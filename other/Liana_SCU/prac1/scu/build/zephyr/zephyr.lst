
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	18 5c 00 20 85 72 00 00 17 6c 02 00 59 72 00 00     .\. .r...l..Yr..
  10:	59 72 00 00 59 72 00 00 59 72 00 00 00 00 00 00     Yr..Yr..Yr......
	...
  2c:	09 6c 00 00 59 72 00 00 00 00 00 00 c1 6b 00 00     .l..Yr.......k..
  3c:	59 72 00 00                                         Yr..

00000040 <_irq_vector_table>:
  40:	85 6c 00 00 95 c2 01 00 85 6c 00 00 85 6c 00 00     .l.......l...l..
  50:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  60:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  70:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  80:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  90:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  a0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  b0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  c0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  d0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  e0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..
  f0:	85 6c 00 00 85 6c 00 00 85 6c 00 00 85 6c 00 00     .l...l...l...l..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x2b>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_drsub>:
     1a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     1a4:	e002      	b.n	1ac <__adddf3>
     1a6:	bf00      	nop

000001a8 <__aeabi_dsub>:
     1a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000001ac <__adddf3>:
     1ac:	b530      	push	{r4, r5, lr}
     1ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
     1b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
     1b6:	ea94 0f05 	teq	r4, r5
     1ba:	bf08      	it	eq
     1bc:	ea90 0f02 	teqeq	r0, r2
     1c0:	bf1f      	itttt	ne
     1c2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1c6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1d2:	f000 80e2 	beq.w	39a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9a>
     1d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1de:	bfb8      	it	lt
     1e0:	426d      	neglt	r5, r5
     1e2:	dd0c      	ble.n	1fe <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3e>
     1e4:	442c      	add	r4, r5
     1e6:	ea80 0202 	eor.w	r2, r0, r2
     1ea:	ea81 0303 	eor.w	r3, r1, r3
     1ee:	ea82 0000 	eor.w	r0, r2, r0
     1f2:	ea83 0101 	eor.w	r1, r3, r1
     1f6:	ea80 0202 	eor.w	r2, r0, r2
     1fa:	ea81 0303 	eor.w	r3, r1, r3
     1fe:	2d36      	cmp	r5, #54	; 0x36
     200:	bf88      	it	hi
     202:	bd30      	pophi	{r4, r5, pc}
     204:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     208:	ea4f 3101 	mov.w	r1, r1, lsl #12
     20c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     210:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     214:	d002      	beq.n	21c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5c>
     216:	4240      	negs	r0, r0
     218:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     21c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     220:	ea4f 3303 	mov.w	r3, r3, lsl #12
     224:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     228:	d002      	beq.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     22a:	4252      	negs	r2, r2
     22c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     230:	ea94 0f05 	teq	r4, r5
     234:	f000 80a7 	beq.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     238:	f1a4 0401 	sub.w	r4, r4, #1
     23c:	f1d5 0e20 	rsbs	lr, r5, #32
     240:	db0d      	blt.n	25e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9e>
     242:	fa02 fc0e 	lsl.w	ip, r2, lr
     246:	fa22 f205 	lsr.w	r2, r2, r5
     24a:	1880      	adds	r0, r0, r2
     24c:	f141 0100 	adc.w	r1, r1, #0
     250:	fa03 f20e 	lsl.w	r2, r3, lr
     254:	1880      	adds	r0, r0, r2
     256:	fa43 f305 	asr.w	r3, r3, r5
     25a:	4159      	adcs	r1, r3
     25c:	e00e      	b.n	27c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xbc>
     25e:	f1a5 0520 	sub.w	r5, r5, #32
     262:	f10e 0e20 	add.w	lr, lr, #32
     266:	2a01      	cmp	r2, #1
     268:	fa03 fc0e 	lsl.w	ip, r3, lr
     26c:	bf28      	it	cs
     26e:	f04c 0c02 	orrcs.w	ip, ip, #2
     272:	fa43 f305 	asr.w	r3, r3, r5
     276:	18c0      	adds	r0, r0, r3
     278:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     27c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     280:	d507      	bpl.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     282:	f04f 0e00 	mov.w	lr, #0
     286:	f1dc 0c00 	rsbs	ip, ip, #0
     28a:	eb7e 0000 	sbcs.w	r0, lr, r0
     28e:	eb6e 0101 	sbc.w	r1, lr, r1
     292:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     296:	d31b      	bcc.n	2d0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x110>
     298:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     29c:	d30c      	bcc.n	2b8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xf8>
     29e:	0849      	lsrs	r1, r1, #1
     2a0:	ea5f 0030 	movs.w	r0, r0, rrx
     2a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
     2a8:	f104 0401 	add.w	r4, r4, #1
     2ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
     2b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     2b4:	f080 809a 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2bc:	bf08      	it	eq
     2be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2c2:	f150 0000 	adcs.w	r0, r0, #0
     2c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2ca:	ea41 0105 	orr.w	r1, r1, r5
     2ce:	bd30      	pop	{r4, r5, pc}
     2d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2d4:	4140      	adcs	r0, r0
     2d6:	eb41 0101 	adc.w	r1, r1, r1
     2da:	3c01      	subs	r4, #1
     2dc:	bf28      	it	cs
     2de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2e2:	d2e9      	bcs.n	2b8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xf8>
     2e4:	f091 0f00 	teq	r1, #0
     2e8:	bf04      	itt	eq
     2ea:	4601      	moveq	r1, r0
     2ec:	2000      	moveq	r0, #0
     2ee:	fab1 f381 	clz	r3, r1
     2f2:	bf08      	it	eq
     2f4:	3320      	addeq	r3, #32
     2f6:	f1a3 030b 	sub.w	r3, r3, #11
     2fa:	f1b3 0220 	subs.w	r2, r3, #32
     2fe:	da0c      	bge.n	31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     300:	320c      	adds	r2, #12
     302:	dd08      	ble.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     304:	f102 0c14 	add.w	ip, r2, #20
     308:	f1c2 020c 	rsb	r2, r2, #12
     30c:	fa01 f00c 	lsl.w	r0, r1, ip
     310:	fa21 f102 	lsr.w	r1, r1, r2
     314:	e00c      	b.n	330 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x30>
     316:	f102 0214 	add.w	r2, r2, #20
     31a:	bfd8      	it	le
     31c:	f1c2 0c20 	rsble	ip, r2, #32
     320:	fa01 f102 	lsl.w	r1, r1, r2
     324:	fa20 fc0c 	lsr.w	ip, r0, ip
     328:	bfdc      	itt	le
     32a:	ea41 010c 	orrle.w	r1, r1, ip
     32e:	4090      	lslle	r0, r2
     330:	1ae4      	subs	r4, r4, r3
     332:	bfa2      	ittt	ge
     334:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     338:	4329      	orrge	r1, r5
     33a:	bd30      	popge	{r4, r5, pc}
     33c:	ea6f 0404 	mvn.w	r4, r4
     340:	3c1f      	subs	r4, #31
     342:	da1c      	bge.n	37e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7e>
     344:	340c      	adds	r4, #12
     346:	dc0e      	bgt.n	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     348:	f104 0414 	add.w	r4, r4, #20
     34c:	f1c4 0220 	rsb	r2, r4, #32
     350:	fa20 f004 	lsr.w	r0, r0, r4
     354:	fa01 f302 	lsl.w	r3, r1, r2
     358:	ea40 0003 	orr.w	r0, r0, r3
     35c:	fa21 f304 	lsr.w	r3, r1, r4
     360:	ea45 0103 	orr.w	r1, r5, r3
     364:	bd30      	pop	{r4, r5, pc}
     366:	f1c4 040c 	rsb	r4, r4, #12
     36a:	f1c4 0220 	rsb	r2, r4, #32
     36e:	fa20 f002 	lsr.w	r0, r0, r2
     372:	fa01 f304 	lsl.w	r3, r1, r4
     376:	ea40 0003 	orr.w	r0, r0, r3
     37a:	4629      	mov	r1, r5
     37c:	bd30      	pop	{r4, r5, pc}
     37e:	fa21 f004 	lsr.w	r0, r1, r4
     382:	4629      	mov	r1, r5
     384:	bd30      	pop	{r4, r5, pc}
     386:	f094 0f00 	teq	r4, #0
     38a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     38e:	bf06      	itte	eq
     390:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     394:	3401      	addeq	r4, #1
     396:	3d01      	subne	r5, #1
     398:	e74e      	b.n	238 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x78>
     39a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     39e:	bf18      	it	ne
     3a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     3a4:	d029      	beq.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     3a6:	ea94 0f05 	teq	r4, r5
     3aa:	bf08      	it	eq
     3ac:	ea90 0f02 	teqeq	r0, r2
     3b0:	d005      	beq.n	3be <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbe>
     3b2:	ea54 0c00 	orrs.w	ip, r4, r0
     3b6:	bf04      	itt	eq
     3b8:	4619      	moveq	r1, r3
     3ba:	4610      	moveq	r0, r2
     3bc:	bd30      	pop	{r4, r5, pc}
     3be:	ea91 0f03 	teq	r1, r3
     3c2:	bf1e      	ittt	ne
     3c4:	2100      	movne	r1, #0
     3c6:	2000      	movne	r0, #0
     3c8:	bd30      	popne	{r4, r5, pc}
     3ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ce:	d105      	bne.n	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     3d0:	0040      	lsls	r0, r0, #1
     3d2:	4149      	adcs	r1, r1
     3d4:	bf28      	it	cs
     3d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3da:	bd30      	pop	{r4, r5, pc}
     3dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3e0:	bf3c      	itt	cc
     3e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3e6:	bd30      	popcc	{r4, r5, pc}
     3e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3f4:	f04f 0000 	mov.w	r0, #0
     3f8:	bd30      	pop	{r4, r5, pc}
     3fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3fe:	bf1a      	itte	ne
     400:	4619      	movne	r1, r3
     402:	4610      	movne	r0, r2
     404:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     408:	bf1c      	itt	ne
     40a:	460b      	movne	r3, r1
     40c:	4602      	movne	r2, r0
     40e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     412:	bf06      	itte	eq
     414:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     418:	ea91 0f03 	teqeq	r1, r3
     41c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     420:	bd30      	pop	{r4, r5, pc}
     422:	bf00      	nop

00000424 <__aeabi_ui2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f04f 0500 	mov.w	r5, #0
     43c:	f04f 0100 	mov.w	r1, #0
     440:	e750      	b.n	2e4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x124>
     442:	bf00      	nop

00000444 <__aeabi_i2d>:
     444:	f090 0f00 	teq	r0, #0
     448:	bf04      	itt	eq
     44a:	2100      	moveq	r1, #0
     44c:	4770      	bxeq	lr
     44e:	b530      	push	{r4, r5, lr}
     450:	f44f 6480 	mov.w	r4, #1024	; 0x400
     454:	f104 0432 	add.w	r4, r4, #50	; 0x32
     458:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     45c:	bf48      	it	mi
     45e:	4240      	negmi	r0, r0
     460:	f04f 0100 	mov.w	r1, #0
     464:	e73e      	b.n	2e4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x124>
     466:	bf00      	nop

00000468 <__aeabi_f2d>:
     468:	0042      	lsls	r2, r0, #1
     46a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     46e:	ea4f 0131 	mov.w	r1, r1, rrx
     472:	ea4f 7002 	mov.w	r0, r2, lsl #28
     476:	bf1f      	itttt	ne
     478:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     47c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     480:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     484:	4770      	bxne	lr
     486:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     48a:	bf08      	it	eq
     48c:	4770      	bxeq	lr
     48e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     492:	bf04      	itt	eq
     494:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     498:	4770      	bxeq	lr
     49a:	b530      	push	{r4, r5, lr}
     49c:	f44f 7460 	mov.w	r4, #896	; 0x380
     4a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     4a8:	e71c      	b.n	2e4 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x124>
     4aa:	bf00      	nop

000004ac <__aeabi_ul2d>:
     4ac:	ea50 0201 	orrs.w	r2, r0, r1
     4b0:	bf08      	it	eq
     4b2:	4770      	bxeq	lr
     4b4:	b530      	push	{r4, r5, lr}
     4b6:	f04f 0500 	mov.w	r5, #0
     4ba:	e00a      	b.n	4d2 <__aeabi_l2d+0x16>

000004bc <__aeabi_l2d>:
     4bc:	ea50 0201 	orrs.w	r2, r0, r1
     4c0:	bf08      	it	eq
     4c2:	4770      	bxeq	lr
     4c4:	b530      	push	{r4, r5, lr}
     4c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4ca:	d502      	bpl.n	4d2 <__aeabi_l2d+0x16>
     4cc:	4240      	negs	r0, r0
     4ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4de:	f43f aed8 	beq.w	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     4e2:	f04f 0203 	mov.w	r2, #3
     4e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ea:	bf18      	it	ne
     4ec:	3203      	addne	r2, #3
     4ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4f2:	bf18      	it	ne
     4f4:	3203      	addne	r2, #3
     4f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4fa:	f1c2 0320 	rsb	r3, r2, #32
     4fe:	fa00 fc03 	lsl.w	ip, r0, r3
     502:	fa20 f002 	lsr.w	r0, r0, r2
     506:	fa01 fe03 	lsl.w	lr, r1, r3
     50a:	ea40 000e 	orr.w	r0, r0, lr
     50e:	fa21 f102 	lsr.w	r1, r1, r2
     512:	4414      	add	r4, r2
     514:	e6bd      	b.n	292 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xd2>
     516:	bf00      	nop

00000518 <__aeabi_dmul>:
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     51e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     522:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     526:	bf1d      	ittte	ne
     528:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     52c:	ea94 0f0c 	teqne	r4, ip
     530:	ea95 0f0c 	teqne	r5, ip
     534:	f000 f8de 	bleq	6f4 <CONFIG_BT_COMPANY_ID+0x103>
     538:	442c      	add	r4, r5
     53a:	ea81 0603 	eor.w	r6, r1, r3
     53e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     542:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     546:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     54a:	bf18      	it	ne
     54c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     550:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     558:	d038      	beq.n	5cc <__aeabi_dmul+0xb4>
     55a:	fba0 ce02 	umull	ip, lr, r0, r2
     55e:	f04f 0500 	mov.w	r5, #0
     562:	fbe1 e502 	umlal	lr, r5, r1, r2
     566:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     56a:	fbe0 e503 	umlal	lr, r5, r0, r3
     56e:	f04f 0600 	mov.w	r6, #0
     572:	fbe1 5603 	umlal	r5, r6, r1, r3
     576:	f09c 0f00 	teq	ip, #0
     57a:	bf18      	it	ne
     57c:	f04e 0e01 	orrne.w	lr, lr, #1
     580:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     584:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     588:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     58c:	d204      	bcs.n	598 <__aeabi_dmul+0x80>
     58e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     592:	416d      	adcs	r5, r5
     594:	eb46 0606 	adc.w	r6, r6, r6
     598:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     59c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     5a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     5a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     5a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     5ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     5b0:	bf88      	it	hi
     5b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     5b6:	d81e      	bhi.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     5b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     5bc:	bf08      	it	eq
     5be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5c2:	f150 0000 	adcs.w	r0, r0, #0
     5c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5ca:	bd70      	pop	{r4, r5, r6, pc}
     5cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5d0:	ea46 0101 	orr.w	r1, r6, r1
     5d4:	ea40 0002 	orr.w	r0, r0, r2
     5d8:	ea81 0103 	eor.w	r1, r1, r3
     5dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5e0:	bfc2      	ittt	gt
     5e2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ea:	bd70      	popgt	{r4, r5, r6, pc}
     5ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5f0:	f04f 0e00 	mov.w	lr, #0
     5f4:	3c01      	subs	r4, #1
     5f6:	f300 80ab 	bgt.w	750 <CONFIG_BT_COMPANY_ID+0x15f>
     5fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5fe:	bfde      	ittt	le
     600:	2000      	movle	r0, #0
     602:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     606:	bd70      	pople	{r4, r5, r6, pc}
     608:	f1c4 0400 	rsb	r4, r4, #0
     60c:	3c20      	subs	r4, #32
     60e:	da35      	bge.n	67c <CONFIG_BT_COMPANY_ID+0x8b>
     610:	340c      	adds	r4, #12
     612:	dc1b      	bgt.n	64c <CONFIG_BT_COMPANY_ID+0x5b>
     614:	f104 0414 	add.w	r4, r4, #20
     618:	f1c4 0520 	rsb	r5, r4, #32
     61c:	fa00 f305 	lsl.w	r3, r0, r5
     620:	fa20 f004 	lsr.w	r0, r0, r4
     624:	fa01 f205 	lsl.w	r2, r1, r5
     628:	ea40 0002 	orr.w	r0, r0, r2
     62c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     630:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     634:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     638:	fa21 f604 	lsr.w	r6, r1, r4
     63c:	eb42 0106 	adc.w	r1, r2, r6
     640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     644:	bf08      	it	eq
     646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     64a:	bd70      	pop	{r4, r5, r6, pc}
     64c:	f1c4 040c 	rsb	r4, r4, #12
     650:	f1c4 0520 	rsb	r5, r4, #32
     654:	fa00 f304 	lsl.w	r3, r0, r4
     658:	fa20 f005 	lsr.w	r0, r0, r5
     65c:	fa01 f204 	lsl.w	r2, r1, r4
     660:	ea40 0002 	orr.w	r0, r0, r2
     664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     66c:	f141 0100 	adc.w	r1, r1, #0
     670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     674:	bf08      	it	eq
     676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     67a:	bd70      	pop	{r4, r5, r6, pc}
     67c:	f1c4 0520 	rsb	r5, r4, #32
     680:	fa00 f205 	lsl.w	r2, r0, r5
     684:	ea4e 0e02 	orr.w	lr, lr, r2
     688:	fa20 f304 	lsr.w	r3, r0, r4
     68c:	fa01 f205 	lsl.w	r2, r1, r5
     690:	ea43 0302 	orr.w	r3, r3, r2
     694:	fa21 f004 	lsr.w	r0, r1, r4
     698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     69c:	fa21 f204 	lsr.w	r2, r1, r4
     6a0:	ea20 0002 	bic.w	r0, r0, r2
     6a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     6a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     6ac:	bf08      	it	eq
     6ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     6b2:	bd70      	pop	{r4, r5, r6, pc}
     6b4:	f094 0f00 	teq	r4, #0
     6b8:	d10f      	bne.n	6da <CONFIG_BT_COMPANY_ID+0xe9>
     6ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     6be:	0040      	lsls	r0, r0, #1
     6c0:	eb41 0101 	adc.w	r1, r1, r1
     6c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3c01      	subeq	r4, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_COMPANY_ID+0xcd>
     6ce:	ea41 0106 	orr.w	r1, r1, r6
     6d2:	f095 0f00 	teq	r5, #0
     6d6:	bf18      	it	ne
     6d8:	4770      	bxne	lr
     6da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6de:	0052      	lsls	r2, r2, #1
     6e0:	eb43 0303 	adc.w	r3, r3, r3
     6e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6e8:	bf08      	it	eq
     6ea:	3d01      	subeq	r5, #1
     6ec:	d0f7      	beq.n	6de <CONFIG_BT_COMPANY_ID+0xed>
     6ee:	ea43 0306 	orr.w	r3, r3, r6
     6f2:	4770      	bx	lr
     6f4:	ea94 0f0c 	teq	r4, ip
     6f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6fc:	bf18      	it	ne
     6fe:	ea95 0f0c 	teqne	r5, ip
     702:	d00c      	beq.n	71e <CONFIG_BT_COMPANY_ID+0x12d>
     704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     708:	bf18      	it	ne
     70a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70e:	d1d1      	bne.n	6b4 <CONFIG_BT_COMPANY_ID+0xc3>
     710:	ea81 0103 	eor.w	r1, r1, r3
     714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     718:	f04f 0000 	mov.w	r0, #0
     71c:	bd70      	pop	{r4, r5, r6, pc}
     71e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     722:	bf06      	itte	eq
     724:	4610      	moveq	r0, r2
     726:	4619      	moveq	r1, r3
     728:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     72c:	d019      	beq.n	762 <CONFIG_BT_COMPANY_ID+0x171>
     72e:	ea94 0f0c 	teq	r4, ip
     732:	d102      	bne.n	73a <CONFIG_BT_COMPANY_ID+0x149>
     734:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     738:	d113      	bne.n	762 <CONFIG_BT_COMPANY_ID+0x171>
     73a:	ea95 0f0c 	teq	r5, ip
     73e:	d105      	bne.n	74c <CONFIG_BT_COMPANY_ID+0x15b>
     740:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     744:	bf1c      	itt	ne
     746:	4610      	movne	r0, r2
     748:	4619      	movne	r1, r3
     74a:	d10a      	bne.n	762 <CONFIG_BT_COMPANY_ID+0x171>
     74c:	ea81 0103 	eor.w	r1, r1, r3
     750:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     754:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     758:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     75c:	f04f 0000 	mov.w	r0, #0
     760:	bd70      	pop	{r4, r5, r6, pc}
     762:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     766:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     76a:	bd70      	pop	{r4, r5, r6, pc}

0000076c <__aeabi_ddiv>:
     76c:	b570      	push	{r4, r5, r6, lr}
     76e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     772:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     776:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     77a:	bf1d      	ittte	ne
     77c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     780:	ea94 0f0c 	teqne	r4, ip
     784:	ea95 0f0c 	teqne	r5, ip
     788:	f000 f8a7 	bleq	8da <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xda>
     78c:	eba4 0405 	sub.w	r4, r4, r5
     790:	ea81 0e03 	eor.w	lr, r1, r3
     794:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     798:	ea4f 3101 	mov.w	r1, r1, lsl #12
     79c:	f000 8088 	beq.w	8b0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xb0>
     7a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
     7a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     7a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     7ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     7b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
     7b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     7b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     7bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7c4:	429d      	cmp	r5, r3
     7c6:	bf08      	it	eq
     7c8:	4296      	cmpeq	r6, r2
     7ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7d2:	d202      	bcs.n	7da <__aeabi_ddiv+0x6e>
     7d4:	085b      	lsrs	r3, r3, #1
     7d6:	ea4f 0232 	mov.w	r2, r2, rrx
     7da:	1ab6      	subs	r6, r6, r2
     7dc:	eb65 0503 	sbc.w	r5, r5, r3
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ee:	ebb6 0e02 	subs.w	lr, r6, r2
     7f2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7f6:	bf22      	ittt	cs
     7f8:	1ab6      	subcs	r6, r6, r2
     7fa:	4675      	movcs	r5, lr
     7fc:	ea40 000c 	orrcs.w	r0, r0, ip
     800:	085b      	lsrs	r3, r3, #1
     802:	ea4f 0232 	mov.w	r2, r2, rrx
     806:	ebb6 0e02 	subs.w	lr, r6, r2
     80a:	eb75 0e03 	sbcs.w	lr, r5, r3
     80e:	bf22      	ittt	cs
     810:	1ab6      	subcs	r6, r6, r2
     812:	4675      	movcs	r5, lr
     814:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     818:	085b      	lsrs	r3, r3, #1
     81a:	ea4f 0232 	mov.w	r2, r2, rrx
     81e:	ebb6 0e02 	subs.w	lr, r6, r2
     822:	eb75 0e03 	sbcs.w	lr, r5, r3
     826:	bf22      	ittt	cs
     828:	1ab6      	subcs	r6, r6, r2
     82a:	4675      	movcs	r5, lr
     82c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     830:	085b      	lsrs	r3, r3, #1
     832:	ea4f 0232 	mov.w	r2, r2, rrx
     836:	ebb6 0e02 	subs.w	lr, r6, r2
     83a:	eb75 0e03 	sbcs.w	lr, r5, r3
     83e:	bf22      	ittt	cs
     840:	1ab6      	subcs	r6, r6, r2
     842:	4675      	movcs	r5, lr
     844:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     848:	ea55 0e06 	orrs.w	lr, r5, r6
     84c:	d018      	beq.n	880 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x80>
     84e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     852:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     856:	ea4f 1606 	mov.w	r6, r6, lsl #4
     85a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     85e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     862:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     866:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     86a:	d1c0      	bne.n	7ee <__aeabi_ddiv+0x82>
     86c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     870:	d10b      	bne.n	88a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x8a>
     872:	ea41 0100 	orr.w	r1, r1, r0
     876:	f04f 0000 	mov.w	r0, #0
     87a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     87e:	e7b6      	b.n	7ee <__aeabi_ddiv+0x82>
     880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     884:	bf04      	itt	eq
     886:	4301      	orreq	r1, r0
     888:	2000      	moveq	r0, #0
     88a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     88e:	bf88      	it	hi
     890:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     894:	f63f aeaf 	bhi.w	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     898:	ebb5 0c03 	subs.w	ip, r5, r3
     89c:	bf04      	itt	eq
     89e:	ebb6 0c02 	subseq.w	ip, r6, r2
     8a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8a6:	f150 0000 	adcs.w	r0, r0, #0
     8aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     8ae:	bd70      	pop	{r4, r5, r6, pc}
     8b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     8b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     8b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     8bc:	bfc2      	ittt	gt
     8be:	ebd4 050c 	rsbsgt	r5, r4, ip
     8c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8c6:	bd70      	popgt	{r4, r5, r6, pc}
     8c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8cc:	f04f 0e00 	mov.w	lr, #0
     8d0:	3c01      	subs	r4, #1
     8d2:	e690      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8d4:	ea45 0e06 	orr.w	lr, r5, r6
     8d8:	e68d      	b.n	5f6 <CONFIG_BT_COMPANY_ID+0x5>
     8da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8de:	ea94 0f0c 	teq	r4, ip
     8e2:	bf08      	it	eq
     8e4:	ea95 0f0c 	teqeq	r5, ip
     8e8:	f43f af3b 	beq.w	762 <CONFIG_BT_COMPANY_ID+0x171>
     8ec:	ea94 0f0c 	teq	r4, ip
     8f0:	d10a      	bne.n	908 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x108>
     8f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8f6:	f47f af34 	bne.w	762 <CONFIG_BT_COMPANY_ID+0x171>
     8fa:	ea95 0f0c 	teq	r5, ip
     8fe:	f47f af25 	bne.w	74c <CONFIG_BT_COMPANY_ID+0x15b>
     902:	4610      	mov	r0, r2
     904:	4619      	mov	r1, r3
     906:	e72c      	b.n	762 <CONFIG_BT_COMPANY_ID+0x171>
     908:	ea95 0f0c 	teq	r5, ip
     90c:	d106      	bne.n	91c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x11c>
     90e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     912:	f43f aefd 	beq.w	710 <CONFIG_BT_COMPANY_ID+0x11f>
     916:	4610      	mov	r0, r2
     918:	4619      	mov	r1, r3
     91a:	e722      	b.n	762 <CONFIG_BT_COMPANY_ID+0x171>
     91c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     920:	bf18      	it	ne
     922:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     926:	f47f aec5 	bne.w	6b4 <CONFIG_BT_COMPANY_ID+0xc3>
     92a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     92e:	f47f af0d 	bne.w	74c <CONFIG_BT_COMPANY_ID+0x15b>
     932:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     936:	f47f aeeb 	bne.w	710 <CONFIG_BT_COMPANY_ID+0x11f>
     93a:	e712      	b.n	762 <CONFIG_BT_COMPANY_ID+0x171>

0000093c <__aeabi_d2uiz>:
     93c:	004a      	lsls	r2, r1, #1
     93e:	d211      	bcs.n	964 <__aeabi_d2uiz+0x28>
     940:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     944:	d211      	bcs.n	96a <__aeabi_d2uiz+0x2e>
     946:	d50d      	bpl.n	964 <__aeabi_d2uiz+0x28>
     948:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     94c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     950:	d40e      	bmi.n	970 <__aeabi_d2uiz+0x34>
     952:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     956:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     95a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     95e:	fa23 f002 	lsr.w	r0, r3, r2
     962:	4770      	bx	lr
     964:	f04f 0000 	mov.w	r0, #0
     968:	4770      	bx	lr
     96a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     96e:	d102      	bne.n	976 <__aeabi_d2uiz+0x3a>
     970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     974:	4770      	bx	lr
     976:	f04f 0000 	mov.w	r0, #0
     97a:	4770      	bx	lr

0000097c <__aeabi_uldivmod>:
     97c:	b953      	cbnz	r3, 994 <__aeabi_uldivmod+0x18>
     97e:	b94a      	cbnz	r2, 994 <__aeabi_uldivmod+0x18>
     980:	2900      	cmp	r1, #0
     982:	bf08      	it	eq
     984:	2800      	cmpeq	r0, #0
     986:	bf1c      	itt	ne
     988:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     98c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     990:	f000 b80c 	b.w	9ac <__aeabi_idiv0>
     994:	f1ad 0c08 	sub.w	ip, sp, #8
     998:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     99c:	f000 f8ce 	bl	b3c <__udivmoddi4>
     9a0:	f8dd e004 	ldr.w	lr, [sp, #4]
     9a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     9a8:	b004      	add	sp, #16
     9aa:	4770      	bx	lr

000009ac <__aeabi_idiv0>:
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop

000009b0 <__gedf2>:
     9b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     9b4:	e006      	b.n	9c4 <__cmpdf2+0x4>
     9b6:	bf00      	nop

000009b8 <__ledf2>:
     9b8:	f04f 0c01 	mov.w	ip, #1
     9bc:	e002      	b.n	9c4 <__cmpdf2+0x4>
     9be:	bf00      	nop

000009c0 <__cmpdf2>:
     9c0:	f04f 0c01 	mov.w	ip, #1
     9c4:	f84d cd04 	str.w	ip, [sp, #-4]!
     9c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     9cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     9d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     9d4:	bf18      	it	ne
     9d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     9da:	d01b      	beq.n	a14 <__cmpdf2+0x54>
     9dc:	b001      	add	sp, #4
     9de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     9e2:	bf0c      	ite	eq
     9e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     9e8:	ea91 0f03 	teqne	r1, r3
     9ec:	bf02      	ittt	eq
     9ee:	ea90 0f02 	teqeq	r0, r2
     9f2:	2000      	moveq	r0, #0
     9f4:	4770      	bxeq	lr
     9f6:	f110 0f00 	cmn.w	r0, #0
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf58      	it	pl
     a00:	4299      	cmppl	r1, r3
     a02:	bf08      	it	eq
     a04:	4290      	cmpeq	r0, r2
     a06:	bf2c      	ite	cs
     a08:	17d8      	asrcs	r0, r3, #31
     a0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a0e:	f040 0001 	orr.w	r0, r0, #1
     a12:	4770      	bx	lr
     a14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a1c:	d102      	bne.n	a24 <__cmpdf2+0x64>
     a1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a22:	d107      	bne.n	a34 <__cmpdf2+0x74>
     a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a2c:	d1d6      	bne.n	9dc <__cmpdf2+0x1c>
     a2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a32:	d0d3      	beq.n	9dc <__cmpdf2+0x1c>
     a34:	f85d 0b04 	ldr.w	r0, [sp], #4
     a38:	4770      	bx	lr
     a3a:	bf00      	nop

00000a3c <__aeabi_cdrcmple>:
     a3c:	4684      	mov	ip, r0
     a3e:	4610      	mov	r0, r2
     a40:	4662      	mov	r2, ip
     a42:	468c      	mov	ip, r1
     a44:	4619      	mov	r1, r3
     a46:	4663      	mov	r3, ip
     a48:	e000      	b.n	a4c <__aeabi_cdcmpeq>
     a4a:	bf00      	nop

00000a4c <__aeabi_cdcmpeq>:
     a4c:	b501      	push	{r0, lr}
     a4e:	f7ff ffb7 	bl	9c0 <__cmpdf2>
     a52:	2800      	cmp	r0, #0
     a54:	bf48      	it	mi
     a56:	f110 0f00 	cmnmi.w	r0, #0
     a5a:	bd01      	pop	{r0, pc}

00000a5c <__aeabi_dcmpeq>:
     a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
     a60:	f7ff fff4 	bl	a4c <__aeabi_cdcmpeq>
     a64:	bf0c      	ite	eq
     a66:	2001      	moveq	r0, #1
     a68:	2000      	movne	r0, #0
     a6a:	f85d fb08 	ldr.w	pc, [sp], #8
     a6e:	bf00      	nop

00000a70 <__aeabi_dcmplt>:
     a70:	f84d ed08 	str.w	lr, [sp, #-8]!
     a74:	f7ff ffea 	bl	a4c <__aeabi_cdcmpeq>
     a78:	bf34      	ite	cc
     a7a:	2001      	movcc	r0, #1
     a7c:	2000      	movcs	r0, #0
     a7e:	f85d fb08 	ldr.w	pc, [sp], #8
     a82:	bf00      	nop

00000a84 <__aeabi_dcmple>:
     a84:	f84d ed08 	str.w	lr, [sp, #-8]!
     a88:	f7ff ffe0 	bl	a4c <__aeabi_cdcmpeq>
     a8c:	bf94      	ite	ls
     a8e:	2001      	movls	r0, #1
     a90:	2000      	movhi	r0, #0
     a92:	f85d fb08 	ldr.w	pc, [sp], #8
     a96:	bf00      	nop

00000a98 <__aeabi_dcmpge>:
     a98:	f84d ed08 	str.w	lr, [sp, #-8]!
     a9c:	f7ff ffce 	bl	a3c <__aeabi_cdrcmple>
     aa0:	bf94      	ite	ls
     aa2:	2001      	movls	r0, #1
     aa4:	2000      	movhi	r0, #0
     aa6:	f85d fb08 	ldr.w	pc, [sp], #8
     aaa:	bf00      	nop

00000aac <__aeabi_dcmpgt>:
     aac:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab0:	f7ff ffc4 	bl	a3c <__aeabi_cdrcmple>
     ab4:	bf34      	ite	cc
     ab6:	2001      	movcc	r0, #1
     ab8:	2000      	movcs	r0, #0
     aba:	f85d fb08 	ldr.w	pc, [sp], #8
     abe:	bf00      	nop

00000ac0 <__aeabi_dcmpun>:
     ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ac8:	d102      	bne.n	ad0 <__aeabi_dcmpun+0x10>
     aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     ace:	d10a      	bne.n	ae6 <__aeabi_dcmpun+0x26>
     ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     ad8:	d102      	bne.n	ae0 <__aeabi_dcmpun+0x20>
     ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ade:	d102      	bne.n	ae6 <__aeabi_dcmpun+0x26>
     ae0:	f04f 0000 	mov.w	r0, #0
     ae4:	4770      	bx	lr
     ae6:	f04f 0001 	mov.w	r0, #1
     aea:	4770      	bx	lr

00000aec <__aeabi_d2iz>:
     aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
     af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     af4:	d215      	bcs.n	b22 <__aeabi_d2iz+0x36>
     af6:	d511      	bpl.n	b1c <__aeabi_d2iz+0x30>
     af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     b00:	d912      	bls.n	b28 <__aeabi_d2iz+0x3c>
     b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     b0e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b12:	fa23 f002 	lsr.w	r0, r3, r2
     b16:	bf18      	it	ne
     b18:	4240      	negne	r0, r0
     b1a:	4770      	bx	lr
     b1c:	f04f 0000 	mov.w	r0, #0
     b20:	4770      	bx	lr
     b22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     b26:	d105      	bne.n	b34 <__aeabi_d2iz+0x48>
     b28:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     b2c:	bf08      	it	eq
     b2e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     b32:	4770      	bx	lr
     b34:	f04f 0000 	mov.w	r0, #0
     b38:	4770      	bx	lr
     b3a:	bf00      	nop

00000b3c <__udivmoddi4>:
     b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b40:	4607      	mov	r7, r0
     b42:	468c      	mov	ip, r1
     b44:	4608      	mov	r0, r1
     b46:	9e09      	ldr	r6, [sp, #36]	; 0x24
     b48:	4615      	mov	r5, r2
     b4a:	463c      	mov	r4, r7
     b4c:	4619      	mov	r1, r3
     b4e:	2b00      	cmp	r3, #0
     b50:	f040 80c6 	bne.w	ce0 <__udivmoddi4+0x1a4>
     b54:	4282      	cmp	r2, r0
     b56:	fab2 f782 	clz	r7, r2
     b5a:	d946      	bls.n	bea <__udivmoddi4+0xae>
     b5c:	b14f      	cbz	r7, b72 <__udivmoddi4+0x36>
     b5e:	f1c7 0e20 	rsb	lr, r7, #32
     b62:	fa24 fe0e 	lsr.w	lr, r4, lr
     b66:	fa00 f307 	lsl.w	r3, r0, r7
     b6a:	40bd      	lsls	r5, r7
     b6c:	ea4e 0c03 	orr.w	ip, lr, r3
     b70:	40bc      	lsls	r4, r7
     b72:	ea4f 4815 	mov.w	r8, r5, lsr #16
     b76:	fa1f fe85 	uxth.w	lr, r5
     b7a:	fbbc f9f8 	udiv	r9, ip, r8
     b7e:	0c22      	lsrs	r2, r4, #16
     b80:	fb08 c319 	mls	r3, r8, r9, ip
     b84:	fb09 fa0e 	mul.w	sl, r9, lr
     b88:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     b8c:	459a      	cmp	sl, r3
     b8e:	d928      	bls.n	be2 <__udivmoddi4+0xa6>
     b90:	18eb      	adds	r3, r5, r3
     b92:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     b96:	d204      	bcs.n	ba2 <__udivmoddi4+0x66>
     b98:	459a      	cmp	sl, r3
     b9a:	d902      	bls.n	ba2 <__udivmoddi4+0x66>
     b9c:	f1a9 0002 	sub.w	r0, r9, #2
     ba0:	442b      	add	r3, r5
     ba2:	eba3 030a 	sub.w	r3, r3, sl
     ba6:	b2a4      	uxth	r4, r4
     ba8:	fbb3 f2f8 	udiv	r2, r3, r8
     bac:	fb08 3312 	mls	r3, r8, r2, r3
     bb0:	fb02 fe0e 	mul.w	lr, r2, lr
     bb4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     bb8:	45a6      	cmp	lr, r4
     bba:	d914      	bls.n	be6 <__udivmoddi4+0xaa>
     bbc:	192c      	adds	r4, r5, r4
     bbe:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     bc2:	d203      	bcs.n	bcc <__udivmoddi4+0x90>
     bc4:	45a6      	cmp	lr, r4
     bc6:	d901      	bls.n	bcc <__udivmoddi4+0x90>
     bc8:	1e93      	subs	r3, r2, #2
     bca:	442c      	add	r4, r5
     bcc:	eba4 040e 	sub.w	r4, r4, lr
     bd0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     bd4:	b11e      	cbz	r6, bde <__udivmoddi4+0xa2>
     bd6:	40fc      	lsrs	r4, r7
     bd8:	2300      	movs	r3, #0
     bda:	6034      	str	r4, [r6, #0]
     bdc:	6073      	str	r3, [r6, #4]
     bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     be2:	4648      	mov	r0, r9
     be4:	e7dd      	b.n	ba2 <__udivmoddi4+0x66>
     be6:	4613      	mov	r3, r2
     be8:	e7f0      	b.n	bcc <__udivmoddi4+0x90>
     bea:	b902      	cbnz	r2, bee <__udivmoddi4+0xb2>
     bec:	deff      	udf	#255	; 0xff
     bee:	bb87      	cbnz	r7, c52 <__udivmoddi4+0x116>
     bf0:	1a83      	subs	r3, r0, r2
     bf2:	2101      	movs	r1, #1
     bf4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     bf8:	b2aa      	uxth	r2, r5
     bfa:	fbb3 fcfe 	udiv	ip, r3, lr
     bfe:	0c20      	lsrs	r0, r4, #16
     c00:	fb0e 331c 	mls	r3, lr, ip, r3
     c04:	fb0c f802 	mul.w	r8, ip, r2
     c08:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     c0c:	4598      	cmp	r8, r3
     c0e:	d963      	bls.n	cd8 <__udivmoddi4+0x19c>
     c10:	18eb      	adds	r3, r5, r3
     c12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     c16:	d204      	bcs.n	c22 <__udivmoddi4+0xe6>
     c18:	4598      	cmp	r8, r3
     c1a:	d902      	bls.n	c22 <__udivmoddi4+0xe6>
     c1c:	f1ac 0002 	sub.w	r0, ip, #2
     c20:	442b      	add	r3, r5
     c22:	eba3 0308 	sub.w	r3, r3, r8
     c26:	b2a4      	uxth	r4, r4
     c28:	fbb3 fcfe 	udiv	ip, r3, lr
     c2c:	fb0e 331c 	mls	r3, lr, ip, r3
     c30:	fb0c f202 	mul.w	r2, ip, r2
     c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     c38:	42a2      	cmp	r2, r4
     c3a:	d94f      	bls.n	cdc <__udivmoddi4+0x1a0>
     c3c:	192c      	adds	r4, r5, r4
     c3e:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     c42:	d204      	bcs.n	c4e <__udivmoddi4+0x112>
     c44:	42a2      	cmp	r2, r4
     c46:	d902      	bls.n	c4e <__udivmoddi4+0x112>
     c48:	f1ac 0302 	sub.w	r3, ip, #2
     c4c:	442c      	add	r4, r5
     c4e:	1aa4      	subs	r4, r4, r2
     c50:	e7be      	b.n	bd0 <__udivmoddi4+0x94>
     c52:	f1c7 0c20 	rsb	ip, r7, #32
     c56:	fa20 f80c 	lsr.w	r8, r0, ip
     c5a:	fa00 f307 	lsl.w	r3, r0, r7
     c5e:	fa24 fc0c 	lsr.w	ip, r4, ip
     c62:	40bd      	lsls	r5, r7
     c64:	ea4c 0203 	orr.w	r2, ip, r3
     c68:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     c6c:	b2ab      	uxth	r3, r5
     c6e:	fbb8 fcfe 	udiv	ip, r8, lr
     c72:	0c11      	lsrs	r1, r2, #16
     c74:	fb0e 801c 	mls	r0, lr, ip, r8
     c78:	fb0c f903 	mul.w	r9, ip, r3
     c7c:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     c80:	4581      	cmp	r9, r0
     c82:	fa04 f407 	lsl.w	r4, r4, r7
     c86:	d923      	bls.n	cd0 <__udivmoddi4+0x194>
     c88:	1828      	adds	r0, r5, r0
     c8a:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     c8e:	d204      	bcs.n	c9a <__udivmoddi4+0x15e>
     c90:	4581      	cmp	r9, r0
     c92:	d902      	bls.n	c9a <__udivmoddi4+0x15e>
     c94:	f1ac 0102 	sub.w	r1, ip, #2
     c98:	4428      	add	r0, r5
     c9a:	eba0 0009 	sub.w	r0, r0, r9
     c9e:	b292      	uxth	r2, r2
     ca0:	fbb0 fcfe 	udiv	ip, r0, lr
     ca4:	fb0e 001c 	mls	r0, lr, ip, r0
     ca8:	fb0c f803 	mul.w	r8, ip, r3
     cac:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     cb0:	4598      	cmp	r8, r3
     cb2:	d90f      	bls.n	cd4 <__udivmoddi4+0x198>
     cb4:	18eb      	adds	r3, r5, r3
     cb6:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     cba:	d204      	bcs.n	cc6 <__udivmoddi4+0x18a>
     cbc:	4598      	cmp	r8, r3
     cbe:	d902      	bls.n	cc6 <__udivmoddi4+0x18a>
     cc0:	f1ac 0202 	sub.w	r2, ip, #2
     cc4:	442b      	add	r3, r5
     cc6:	eba3 0308 	sub.w	r3, r3, r8
     cca:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     cce:	e791      	b.n	bf4 <__udivmoddi4+0xb8>
     cd0:	4661      	mov	r1, ip
     cd2:	e7e2      	b.n	c9a <__udivmoddi4+0x15e>
     cd4:	4662      	mov	r2, ip
     cd6:	e7f6      	b.n	cc6 <__udivmoddi4+0x18a>
     cd8:	4660      	mov	r0, ip
     cda:	e7a2      	b.n	c22 <__udivmoddi4+0xe6>
     cdc:	4663      	mov	r3, ip
     cde:	e7b6      	b.n	c4e <__udivmoddi4+0x112>
     ce0:	4283      	cmp	r3, r0
     ce2:	d905      	bls.n	cf0 <__udivmoddi4+0x1b4>
     ce4:	b10e      	cbz	r6, cea <__udivmoddi4+0x1ae>
     ce6:	e9c6 7000 	strd	r7, r0, [r6]
     cea:	2100      	movs	r1, #0
     cec:	4608      	mov	r0, r1
     cee:	e776      	b.n	bde <__udivmoddi4+0xa2>
     cf0:	fab3 f183 	clz	r1, r3
     cf4:	b981      	cbnz	r1, d18 <__udivmoddi4+0x1dc>
     cf6:	4283      	cmp	r3, r0
     cf8:	d301      	bcc.n	cfe <__udivmoddi4+0x1c2>
     cfa:	42ba      	cmp	r2, r7
     cfc:	d80a      	bhi.n	d14 <__udivmoddi4+0x1d8>
     cfe:	1abc      	subs	r4, r7, r2
     d00:	eb60 0303 	sbc.w	r3, r0, r3
     d04:	2001      	movs	r0, #1
     d06:	469c      	mov	ip, r3
     d08:	2e00      	cmp	r6, #0
     d0a:	d068      	beq.n	dde <__udivmoddi4+0x2a2>
     d0c:	e9c6 4c00 	strd	r4, ip, [r6]
     d10:	2100      	movs	r1, #0
     d12:	e764      	b.n	bde <__udivmoddi4+0xa2>
     d14:	4608      	mov	r0, r1
     d16:	e7f7      	b.n	d08 <__udivmoddi4+0x1cc>
     d18:	f1c1 0c20 	rsb	ip, r1, #32
     d1c:	408b      	lsls	r3, r1
     d1e:	fa22 f40c 	lsr.w	r4, r2, ip
     d22:	431c      	orrs	r4, r3
     d24:	fa02 f501 	lsl.w	r5, r2, r1
     d28:	fa00 f301 	lsl.w	r3, r0, r1
     d2c:	fa27 f20c 	lsr.w	r2, r7, ip
     d30:	fa20 fb0c 	lsr.w	fp, r0, ip
     d34:	ea4f 4914 	mov.w	r9, r4, lsr #16
     d38:	4313      	orrs	r3, r2
     d3a:	fbbb f8f9 	udiv	r8, fp, r9
     d3e:	fa1f fe84 	uxth.w	lr, r4
     d42:	fb09 bb18 	mls	fp, r9, r8, fp
     d46:	0c1a      	lsrs	r2, r3, #16
     d48:	fb08 fa0e 	mul.w	sl, r8, lr
     d4c:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     d50:	4592      	cmp	sl, r2
     d52:	fa07 f701 	lsl.w	r7, r7, r1
     d56:	d93e      	bls.n	dd6 <__udivmoddi4+0x29a>
     d58:	18a2      	adds	r2, r4, r2
     d5a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     d5e:	d204      	bcs.n	d6a <__udivmoddi4+0x22e>
     d60:	4592      	cmp	sl, r2
     d62:	d902      	bls.n	d6a <__udivmoddi4+0x22e>
     d64:	f1a8 0002 	sub.w	r0, r8, #2
     d68:	4422      	add	r2, r4
     d6a:	eba2 020a 	sub.w	r2, r2, sl
     d6e:	b29b      	uxth	r3, r3
     d70:	fbb2 f8f9 	udiv	r8, r2, r9
     d74:	fb09 2218 	mls	r2, r9, r8, r2
     d78:	fb08 fe0e 	mul.w	lr, r8, lr
     d7c:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     d80:	4596      	cmp	lr, r2
     d82:	d92a      	bls.n	dda <__udivmoddi4+0x29e>
     d84:	18a2      	adds	r2, r4, r2
     d86:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     d8a:	d204      	bcs.n	d96 <__udivmoddi4+0x25a>
     d8c:	4596      	cmp	lr, r2
     d8e:	d902      	bls.n	d96 <__udivmoddi4+0x25a>
     d90:	f1a8 0302 	sub.w	r3, r8, #2
     d94:	4422      	add	r2, r4
     d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     d9a:	fba0 9305 	umull	r9, r3, r0, r5
     d9e:	eba2 020e 	sub.w	r2, r2, lr
     da2:	429a      	cmp	r2, r3
     da4:	46ce      	mov	lr, r9
     da6:	4698      	mov	r8, r3
     da8:	d302      	bcc.n	db0 <__udivmoddi4+0x274>
     daa:	d106      	bne.n	dba <__udivmoddi4+0x27e>
     dac:	454f      	cmp	r7, r9
     dae:	d204      	bcs.n	dba <__udivmoddi4+0x27e>
     db0:	ebb9 0e05 	subs.w	lr, r9, r5
     db4:	eb63 0804 	sbc.w	r8, r3, r4
     db8:	3801      	subs	r0, #1
     dba:	b186      	cbz	r6, dde <__udivmoddi4+0x2a2>
     dbc:	ebb7 030e 	subs.w	r3, r7, lr
     dc0:	eb62 0708 	sbc.w	r7, r2, r8
     dc4:	fa07 fc0c 	lsl.w	ip, r7, ip
     dc8:	40cb      	lsrs	r3, r1
     dca:	ea4c 0303 	orr.w	r3, ip, r3
     dce:	40cf      	lsrs	r7, r1
     dd0:	e9c6 3700 	strd	r3, r7, [r6]
     dd4:	e79c      	b.n	d10 <__udivmoddi4+0x1d4>
     dd6:	4640      	mov	r0, r8
     dd8:	e7c7      	b.n	d6a <__udivmoddi4+0x22e>
     dda:	4643      	mov	r3, r8
     ddc:	e7db      	b.n	d96 <__udivmoddi4+0x25a>
     dde:	4631      	mov	r1, r6
     de0:	e6fd      	b.n	bde <__udivmoddi4+0xa2>

00000de2 <strcmp>:
     de2:	f810 2b01 	ldrb.w	r2, [r0], #1
     de6:	f811 3b01 	ldrb.w	r3, [r1], #1
     dea:	2a01      	cmp	r2, #1
     dec:	bf28      	it	cs
     dee:	429a      	cmpcs	r2, r3
     df0:	d0f7      	beq.n	de2 <strcmp>
     df2:	1ad0      	subs	r0, r2, r3
     df4:	4770      	bx	lr

00000df6 <strlen>:
     df6:	4603      	mov	r3, r0
     df8:	f813 2b01 	ldrb.w	r2, [r3], #1
     dfc:	2a00      	cmp	r2, #0
     dfe:	d1fb      	bne.n	df8 <strlen+0x2>
     e00:	1a18      	subs	r0, r3, r0
     e02:	3801      	subs	r0, #1
     e04:	4770      	bx	lr
	...

00000e08 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     e08:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     e0a:	4d49      	ldr	r5, [pc, #292]	; (f30 <bt_init+0x128>)
     e0c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
     e10:	6899      	ldr	r1, [r3, #8]
     e12:	f011 0101 	ands.w	r1, r1, #1
{
     e16:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     e18:	d123      	bne.n	e62 <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     e1a:	aa02      	add	r2, sp, #8
     e1c:	f640 4003 	movw	r0, #3075	; 0xc03
     e20:	f007 fb92 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
     e24:	4604      	mov	r4, r0
     e26:	2800      	cmp	r0, #0
     e28:	d17f      	bne.n	f2a <bt_init+0x122>
	uint8_t status = buf->data[0];
     e2a:	9b02      	ldr	r3, [sp, #8]
     e2c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     e2e:	781b      	ldrb	r3, [r3, #0]
     e30:	b9a3      	cbnz	r3, e5c <bt_init+0x54>
		bt_scan_reset();
     e32:	f009 f939 	bl	a0a8 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     e36:	f3bf 8f5b 	dmb	ish
     e3a:	462b      	mov	r3, r5
     e3c:	f853 2fcc 	ldr.w	r2, [r3, #204]!
     e40:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     e44:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     e48:	f3bf 8f5b 	dmb	ish
     e4c:	e853 1f00 	ldrex	r1, [r3]
     e50:	e843 2000 	strex	r0, r2, [r3]
     e54:	2800      	cmp	r0, #0
     e56:	d1f9      	bne.n	e4c <bt_init+0x44>
     e58:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     e5c:	9802      	ldr	r0, [sp, #8]
     e5e:	f01e ff83 	bl	1fd68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     e62:	aa02      	add	r2, sp, #8
     e64:	2100      	movs	r1, #0
     e66:	f241 0003 	movw	r0, #4099	; 0x1003
     e6a:	f007 fb6d 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
     e6e:	4604      	mov	r4, r0
     e70:	2800      	cmp	r0, #0
     e72:	d15a      	bne.n	f2a <bt_init+0x122>
	read_local_features_complete(rsp);
     e74:	9b02      	ldr	r3, [sp, #8]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
     e76:	4e2f      	ldr	r6, [pc, #188]	; (f34 <bt_init+0x12c>)
     e78:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     e7a:	f8d2 0001 	ldr.w	r0, [r2, #1]
     e7e:	f8d2 1005 	ldr.w	r1, [r2, #5]
     e82:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     e84:	4618      	mov	r0, r3
     e86:	f01e ff6f 	bl	1fd68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     e8a:	4621      	mov	r1, r4
     e8c:	aa02      	add	r2, sp, #8
     e8e:	f241 0001 	movw	r0, #4097	; 0x1001
     e92:	f007 fb59 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
     e96:	4604      	mov	r4, r0
     e98:	2800      	cmp	r0, #0
     e9a:	d146      	bne.n	f2a <bt_init+0x122>
	read_local_ver_complete(rsp);
     e9c:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
     e9e:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     ea0:	785a      	ldrb	r2, [r3, #1]
     ea2:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     ea6:	78d9      	ldrb	r1, [r3, #3]
     ea8:	789a      	ldrb	r2, [r3, #2]
     eaa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     eae:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
     eb2:	791a      	ldrb	r2, [r3, #4]
     eb4:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     eb8:	7a19      	ldrb	r1, [r3, #8]
     eba:	79da      	ldrb	r2, [r3, #7]
     ebc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     ec0:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     ec4:	795a      	ldrb	r2, [r3, #5]
     ec6:	799b      	ldrb	r3, [r3, #6]
     ec8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     ecc:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
     ed0:	f01e ff4a 	bl	1fd68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     ed4:	4621      	mov	r1, r4
     ed6:	aa02      	add	r2, sp, #8
     ed8:	f241 0002 	movw	r0, #4098	; 0x1002
     edc:	f007 fb34 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
     ee0:	4604      	mov	r4, r0
     ee2:	bb10      	cbnz	r0, f2a <bt_init+0x122>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
     ee4:	9b02      	ldr	r3, [sp, #8]
     ee6:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
     ee8:	1c53      	adds	r3, r2, #1
     eea:	3241      	adds	r2, #65	; 0x41
     eec:	6818      	ldr	r0, [r3, #0]
     eee:	6859      	ldr	r1, [r3, #4]
     ef0:	4634      	mov	r4, r6
     ef2:	c403      	stmia	r4!, {r0, r1}
     ef4:	3308      	adds	r3, #8
     ef6:	4293      	cmp	r3, r2
     ef8:	4626      	mov	r6, r4
     efa:	d1f7      	bne.n	eec <bt_init+0xe4>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     efc:	480e      	ldr	r0, [pc, #56]	; (f38 <bt_init+0x130>)
     efe:	f025 ff71 	bl	26de4 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     f02:	9802      	ldr	r0, [sp, #8]
     f04:	f01e ff30 	bl	1fd68 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     f08:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
     f0c:	065a      	lsls	r2, r3, #25
     f0e:	d419      	bmi.n	f44 <bt_init+0x13c>
		BT_ERR("Non-LE capable controller detected!");
     f10:	4b0a      	ldr	r3, [pc, #40]	; (f3c <bt_init+0x134>)
     f12:	9306      	str	r3, [sp, #24]
     f14:	480a      	ldr	r0, [pc, #40]	; (f40 <bt_init+0x138>)
     f16:	2302      	movs	r3, #2
     f18:	aa05      	add	r2, sp, #20
     f1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
     f1e:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
     f22:	9301      	str	r3, [sp, #4]
     f24:	9305      	str	r3, [sp, #20]
     f26:	f026 f821 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     f2a:	4620      	mov	r0, r4
     f2c:	b008      	add	sp, #32
     f2e:	bd70      	pop	{r4, r5, r6, pc}
     f30:	20000000 	.word	0x20000000
     f34:	20000070 	.word	0x20000070
     f38:	20000078 	.word	0x20000078
     f3c:	0002e160 	.word	0x0002e160
     f40:	0002b6bc 	.word	0x0002b6bc
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     f44:	aa02      	add	r2, sp, #8
     f46:	2100      	movs	r1, #0
     f48:	f242 0003 	movw	r0, #8195	; 0x2003
     f4c:	f007 fafc 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
     f50:	4604      	mov	r4, r0
     f52:	2800      	cmp	r0, #0
     f54:	d1e9      	bne.n	f2a <bt_init+0x122>
	read_le_features_complete(rsp);
     f56:	9b02      	ldr	r3, [sp, #8]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
     f58:	4ec1      	ldr	r6, [pc, #772]	; (1260 <bt_init+0x458>)
     f5a:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     f5c:	f8d2 0001 	ldr.w	r0, [r2, #1]
     f60:	f8d2 1005 	ldr.w	r1, [r2, #5]
     f64:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
     f66:	4618      	mov	r0, r3
     f68:	f01e fefe 	bl	1fd68 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     f6c:	4621      	mov	r1, r4
     f6e:	aa02      	add	r2, sp, #8
     f70:	f242 0002 	movw	r0, #8194	; 0x2002
     f74:	f007 fae8 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
     f78:	4604      	mov	r4, r0
     f7a:	2800      	cmp	r0, #0
     f7c:	d1d5      	bne.n	f2a <bt_init+0x122>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
     f7e:	9b02      	ldr	r3, [sp, #8]
     f80:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     f82:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     f86:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
     f8a:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     f8c:	b129      	cbz	r1, f9a <bt_init+0x192>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     f8e:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     f90:	4611      	mov	r1, r2
     f92:	f106 0028 	add.w	r0, r6, #40	; 0x28
     f96:	f029 f95c 	bl	2a252 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     f9a:	9802      	ldr	r0, [sp, #8]
     f9c:	f01e fee4 	bl	1fd68 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     fa0:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
     fa4:	f016 0620 	ands.w	r6, r6, #32
     fa8:	f000 80f9 	beq.w	119e <bt_init+0x396>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     fac:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
     fb0:	071b      	lsls	r3, r3, #28
     fb2:	d512      	bpl.n	fda <bt_init+0x1d2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     fb4:	aa02      	add	r2, sp, #8
     fb6:	2100      	movs	r1, #0
     fb8:	f242 001c 	movw	r0, #8220	; 0x201c
     fbc:	f007 fac4 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
     fc0:	4604      	mov	r4, r0
     fc2:	2800      	cmp	r0, #0
     fc4:	d1b1      	bne.n	f2a <bt_init+0x122>
		le_read_supp_states_complete(rsp);
     fc6:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     fc8:	6883      	ldr	r3, [r0, #8]
     fca:	f8d3 2001 	ldr.w	r2, [r3, #1]
     fce:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     fd2:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
     fd6:	f01e fec7 	bl	1fd68 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     fda:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
     fde:	069e      	lsls	r6, r3, #26
     fe0:	d522      	bpl.n	1028 <bt_init+0x220>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     fe2:	a901      	add	r1, sp, #4
     fe4:	4668      	mov	r0, sp
     fe6:	f007 fb2f 	bl	8648 <hci_le_read_max_data_len>
		if (err) {
     fea:	4604      	mov	r4, r0
     fec:	2800      	cmp	r0, #0
     fee:	d19c      	bne.n	f2a <bt_init+0x122>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     ff0:	2104      	movs	r1, #4
     ff2:	f242 0024 	movw	r0, #8228	; 0x2024
     ff6:	f007 f93f 	bl	8278 <bt_hci_cmd_create>
		if (!buf) {
     ffa:	4606      	mov	r6, r0
     ffc:	2800      	cmp	r0, #0
     ffe:	f000 80d5 	beq.w	11ac <bt_init+0x3a4>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1002:	2104      	movs	r1, #4
    1004:	3008      	adds	r0, #8
    1006:	f028 fca0 	bl	2994a <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    100a:	f8bd 3000 	ldrh.w	r3, [sp]
    100e:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    1010:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    1014:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1016:	4622      	mov	r2, r4
    1018:	4631      	mov	r1, r6
    101a:	f242 0024 	movw	r0, #8228	; 0x2024
    101e:	f007 fa93 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
    1022:	4604      	mov	r4, r0
    1024:	2800      	cmp	r0, #0
    1026:	d180      	bne.n	f2a <bt_init+0x122>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1028:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    102c:	065c      	lsls	r4, r3, #25
    102e:	d510      	bpl.n	1052 <bt_init+0x24a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1030:	aa02      	add	r2, sp, #8
    1032:	2100      	movs	r1, #0
    1034:	f242 002a 	movw	r0, #8234	; 0x202a
    1038:	f007 fa86 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
    103c:	4604      	mov	r4, r0
    103e:	2800      	cmp	r0, #0
    1040:	f47f af73 	bne.w	f2a <bt_init+0x122>
		le_read_resolving_list_size_complete(rsp);
    1044:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    1046:	6883      	ldr	r3, [r0, #8]
    1048:	785b      	ldrb	r3, [r3, #1]
    104a:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    104e:	f01e fe8b 	bl	1fd68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1052:	2108      	movs	r1, #8
    1054:	f242 0001 	movw	r0, #8193	; 0x2001
    1058:	f007 f90e 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    105c:	4604      	mov	r4, r0
    105e:	2800      	cmp	r0, #0
    1060:	f000 80a4 	beq.w	11ac <bt_init+0x3a4>
    1064:	2108      	movs	r1, #8
    1066:	4408      	add	r0, r1
    1068:	f028 fc6f 	bl	2994a <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    106c:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1070:	f011 0f40 	tst.w	r1, #64	; 0x40
    1074:	4602      	mov	r2, r0
    1076:	f240 2302 	movw	r3, #514	; 0x202
    107a:	bf08      	it	eq
    107c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    107e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1080:	bf4c      	ite	mi
    1082:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    1086:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    108a:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    108c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1090:	bf48      	it	mi
    1092:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1096:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    109a:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    109e:	bf18      	it	ne
    10a0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    10a4:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    10a8:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    10aa:	bf48      	it	mi
    10ac:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    10b0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    10b2:	bf08      	it	eq
    10b4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    10b8:	2100      	movs	r1, #0
    10ba:	f025 ff68 	bl	26f8e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    10be:	4621      	mov	r1, r4
    10c0:	2200      	movs	r2, #0
    10c2:	f242 0001 	movw	r0, #8193	; 0x2001
    10c6:	f007 fa3f 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    10ca:	4604      	mov	r4, r0
    10cc:	2800      	cmp	r0, #0
    10ce:	f47f af2c 	bne.w	f2a <bt_init+0x122>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    10d2:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    10d6:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    10da:	0698      	lsls	r0, r3, #26
    10dc:	d47b      	bmi.n	11d6 <bt_init+0x3ce>
	if (bt_dev.le.acl_mtu) {
    10de:	b9d9      	cbnz	r1, 1118 <bt_init+0x310>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    10e0:	aa02      	add	r2, sp, #8
    10e2:	f241 0005 	movw	r0, #4101	; 0x1005
    10e6:	f007 fa2f 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    10ea:	4604      	mov	r4, r0
    10ec:	2800      	cmp	r0, #0
    10ee:	f47f af1c 	bne.w	f2a <bt_init+0x122>
	if (bt_dev.le.acl_mtu) {
    10f2:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    10f6:	b963      	cbnz	r3, 1112 <bt_init+0x30a>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    10f8:	9b02      	ldr	r3, [sp, #8]
    10fa:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    10fc:	785a      	ldrb	r2, [r3, #1]
    10fe:	7899      	ldrb	r1, [r3, #2]
    1100:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1104:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1108:	889a      	ldrh	r2, [r3, #4]
    110a:	4856      	ldr	r0, [pc, #344]	; (1264 <bt_init+0x45c>)
    110c:	4611      	mov	r1, r2
    110e:	f029 f8a0 	bl	2a252 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1112:	9802      	ldr	r0, [sp, #8]
    1114:	f01e fe28 	bl	1fd68 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1118:	2108      	movs	r1, #8
    111a:	f640 4001 	movw	r0, #3073	; 0xc01
    111e:	f007 f8ab 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    1122:	4604      	mov	r4, r0
    1124:	2800      	cmp	r0, #0
    1126:	d041      	beq.n	11ac <bt_init+0x3a4>
    1128:	2108      	movs	r1, #8
    112a:	4408      	add	r0, r1
    112c:	f028 fc0d 	bl	2994a <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1130:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    1134:	07d9      	lsls	r1, r3, #31
    1136:	4602      	mov	r2, r0
    1138:	d55d      	bpl.n	11f6 <bt_init+0x3ee>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    113a:	a147      	add	r1, pc, #284	; (adr r1, 1258 <bt_init+0x450>)
    113c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1140:	f025 ff25 	bl	26f8e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1144:	4621      	mov	r1, r4
    1146:	2200      	movs	r2, #0
    1148:	f640 4001 	movw	r0, #3073	; 0xc01
    114c:	f007 f9fc 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    1150:	4604      	mov	r4, r0
    1152:	2800      	cmp	r0, #0
    1154:	f47f aee9 	bne.w	f2a <bt_init+0x122>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1158:	4601      	mov	r1, r0
    115a:	466a      	mov	r2, sp
    115c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1160:	f007 f9f2 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    1164:	4604      	mov	r4, r0
    1166:	2800      	cmp	r0, #0
    1168:	d049      	beq.n	11fe <bt_init+0x3f6>
		BT_WARN("Vendor HCI extensions not available");
    116a:	4b3f      	ldr	r3, [pc, #252]	; (1268 <bt_init+0x460>)
			BT_WARN("Failed to read supported vendor features");
    116c:	9306      	str	r3, [sp, #24]
    116e:	483f      	ldr	r0, [pc, #252]	; (126c <bt_init+0x464>)
    1170:	2302      	movs	r3, #2
    1172:	aa05      	add	r2, sp, #20
    1174:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    1178:	9301      	str	r3, [sp, #4]
    117a:	9305      	str	r3, [sp, #20]
    117c:	f025 fef6 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    1180:	f008 fbbe 	bl	9900 <bt_id_init>
	if (err) {
    1184:	4604      	mov	r4, r0
    1186:	2800      	cmp	r0, #0
    1188:	f47f aecf 	bne.w	f2a <bt_init+0x122>
		err = bt_conn_init();
    118c:	f00a f8b8 	bl	b300 <bt_conn_init>
		if (err) {
    1190:	4604      	mov	r4, r0
    1192:	2800      	cmp	r0, #0
    1194:	f47f aec9 	bne.w	f2a <bt_init+0x122>
	bt_finalize_init();
    1198:	f007 ff16 	bl	8fc8 <bt_finalize_init>
	return 0;
    119c:	e6c5      	b.n	f2a <bt_init+0x122>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    119e:	2102      	movs	r1, #2
    11a0:	f640 406d 	movw	r0, #3181	; 0xc6d
    11a4:	f007 f868 	bl	8278 <bt_hci_cmd_create>
		if (!buf) {
    11a8:	4604      	mov	r4, r0
    11aa:	b910      	cbnz	r0, 11b2 <bt_init+0x3aa>
		return -ENOBUFS;
    11ac:	f06f 0468 	mvn.w	r4, #104	; 0x68
    11b0:	e6bb      	b.n	f2a <bt_init+0x122>
    11b2:	2102      	movs	r1, #2
    11b4:	3008      	adds	r0, #8
    11b6:	f028 fbc8 	bl	2994a <net_buf_simple_add>
		cp_le->le = 0x01;
    11ba:	2301      	movs	r3, #1
    11bc:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    11be:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    11c0:	4621      	mov	r1, r4
    11c2:	4632      	mov	r2, r6
    11c4:	f640 406d 	movw	r0, #3181	; 0xc6d
    11c8:	f007 f9be 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
    11cc:	4604      	mov	r4, r0
    11ce:	2800      	cmp	r0, #0
    11d0:	f43f aeec 	beq.w	fac <bt_init+0x1a4>
    11d4:	e6a9      	b.n	f2a <bt_init+0x122>
	else if (!bt_dev.le.acl_mtu) {
    11d6:	2900      	cmp	r1, #0
    11d8:	d19e      	bne.n	1118 <bt_init+0x310>
		BT_ERR("ACL BR/EDR buffers not initialized");
    11da:	4b25      	ldr	r3, [pc, #148]	; (1270 <bt_init+0x468>)
    11dc:	9306      	str	r3, [sp, #24]
    11de:	4823      	ldr	r0, [pc, #140]	; (126c <bt_init+0x464>)
    11e0:	2302      	movs	r3, #2
    11e2:	aa05      	add	r2, sp, #20
    11e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    11e8:	9301      	str	r3, [sp, #4]
    11ea:	9305      	str	r3, [sp, #20]
		return -EIO;
    11ec:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    11f0:	f025 febc 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	if (err) {
    11f4:	e699      	b.n	f2a <bt_init+0x122>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    11f6:	481f      	ldr	r0, [pc, #124]	; (1274 <bt_init+0x46c>)
    11f8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    11fc:	e7a0      	b.n	1140 <bt_init+0x338>
	net_buf_unref(rsp);
    11fe:	9800      	ldr	r0, [sp, #0]
    1200:	f01e fdb2 	bl	1fd68 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1204:	4621      	mov	r1, r4
    1206:	466a      	mov	r2, sp
    1208:	f64f 4002 	movw	r0, #64514	; 0xfc02
    120c:	f007 f99c 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    1210:	4604      	mov	r4, r0
    1212:	b108      	cbz	r0, 1218 <bt_init+0x410>
		BT_WARN("Failed to read supported vendor commands");
    1214:	4b18      	ldr	r3, [pc, #96]	; (1278 <bt_init+0x470>)
    1216:	e7a9      	b.n	116c <bt_init+0x364>
	rp.cmds = (void *)rsp->data;
    1218:	9800      	ldr	r0, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    121a:	6883      	ldr	r3, [r0, #8]
    121c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    1220:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    1224:	f01e fda0 	bl	1fd68 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    1228:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    122c:	075b      	lsls	r3, r3, #29
    122e:	d5a7      	bpl.n	1180 <bt_init+0x378>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1230:	466a      	mov	r2, sp
    1232:	4621      	mov	r1, r4
    1234:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1238:	f007 f986 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
    123c:	b108      	cbz	r0, 1242 <bt_init+0x43a>
			BT_WARN("Failed to read supported vendor features");
    123e:	4b0f      	ldr	r3, [pc, #60]	; (127c <bt_init+0x474>)
    1240:	e794      	b.n	116c <bt_init+0x364>
		rp.feat = (void *)rsp->data;
    1242:	9800      	ldr	r0, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    1244:	6883      	ldr	r3, [r0, #8]
    1246:	785b      	ldrb	r3, [r3, #1]
    1248:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    124c:	f01e fd8c 	bl	1fd68 <net_buf_unref>
    1250:	e796      	b.n	1180 <bt_init+0x378>
    1252:	bf00      	nop
    1254:	f3af 8000 	nop.w
    1258:	02008890 	.word	0x02008890
    125c:	20008000 	.word	0x20008000
    1260:	200000d0 	.word	0x200000d0
    1264:	20000100 	.word	0x20000100
    1268:	0002e1a7 	.word	0x0002e1a7
    126c:	0002b6bc 	.word	0x0002b6bc
    1270:	0002e184 	.word	0x0002e184
    1274:	02008810 	.word	0x02008810
    1278:	0002e1cb 	.word	0x0002e1cb
    127c:	0002e1f4 	.word	0x0002e1f4

00001280 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1284:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1288:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    128a:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    128c:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    128e:	42a6      	cmp	r6, r4
{
    1290:	4688      	mov	r8, r1
    1292:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1294:	d818      	bhi.n	12c8 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1296:	4d1c      	ldr	r5, [pc, #112]	; (1308 <ull_drift_ticks_get+0x88>)
    1298:	fba3 0105 	umull	r0, r1, r3, r5
    129c:	a318      	add	r3, pc, #96	; (adr r3, 1300 <ull_drift_ticks_get+0x80>)
    129e:	e9d3 2300 	ldrd	r2, r3, [r3]
    12a2:	f7ff fb6b 	bl	97c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    12a6:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    12a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    12ac:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    12b0:	a313      	add	r3, pc, #76	; (adr r3, 1300 <ull_drift_ticks_get+0x80>)
    12b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12b6:	fba4 0105 	umull	r0, r1, r4, r5
    12ba:	f7ff fb5f 	bl	97c <__aeabi_uldivmod>
    12be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    12c2:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    12c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    12c8:	4c0f      	ldr	r4, [pc, #60]	; (1308 <ull_drift_ticks_get+0x88>)
    12ca:	a30d      	add	r3, pc, #52	; (adr r3, 1300 <ull_drift_ticks_get+0x80>)
    12cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    12d0:	fba6 0104 	umull	r0, r1, r6, r4
    12d4:	f7ff fb52 	bl	97c <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    12d8:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    12dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    12e0:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    12e4:	a306      	add	r3, pc, #24	; (adr r3, 1300 <ull_drift_ticks_get+0x80>)
    12e6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ea:	fba1 0104 	umull	r0, r1, r1, r4
    12ee:	f7ff fb45 	bl	97c <__aeabi_uldivmod>
    12f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    12f6:	6038      	str	r0, [r7, #0]
}
    12f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    12fc:	f3af 8000 	nop.w
    1300:	1afd498d 	.word	0x1afd498d
    1304:	00000007 	.word	0x00000007
    1308:	3b9aca00 	.word	0x3b9aca00
    130c:	00000000 	.word	0x00000000

00001310 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    1314:	4cac      	ldr	r4, [pc, #688]	; (15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>)
{
    1316:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
    1318:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
    131c:	2800      	cmp	r0, #0
    131e:	f000 8139 	beq.w	1594 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x20c>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1322:	f012 0701 	ands.w	r7, r2, #1
    1326:	f040 8137 	bne.w	1598 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x210>
	ull_filter_adv_update(lll->filter_policy);
    132a:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
    132e:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1330:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    1334:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    1338:	f01a fb3e 	bl	1b9b8 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    133c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1340:	0741      	lsls	r1, r0, #29
    1342:	d42d      	bmi.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1344:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1348:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    134c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1350:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1354:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1358:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    135c:	f1b8 0f00 	cmp.w	r8, #0
    1360:	d011      	beq.n	1386 <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    1362:	4899      	ldr	r0, [pc, #612]	; (15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>)
    1364:	4641      	mov	r1, r8
    1366:	f013 ff5b 	bl	15220 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    136a:	f898 3000 	ldrb.w	r3, [r8]
    136e:	065a      	lsls	r2, r3, #25
    1370:	d505      	bpl.n	137e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1372:	2106      	movs	r1, #6
    1374:	f00e fec0 	bl	100f8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1378:	2800      	cmp	r0, #0
    137a:	f000 81ce 	beq.w	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    137e:	4892      	ldr	r0, [pc, #584]	; (15c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x240>)
    1380:	4649      	mov	r1, r9
    1382:	f013 ff4d 	bl	15220 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1386:	f898 3000 	ldrb.w	r3, [r8]
    138a:	f013 0f0e 	tst.w	r3, #14
    138e:	f040 80ee 	bne.w	156e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e6>
		if (lll->conn) {
    1392:	6a23      	ldr	r3, [r4, #32]
    1394:	b19b      	cbz	r3, 13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1396:	270c      	movs	r7, #12
}
    1398:	4638      	mov	r0, r7
    139a:	b00f      	add	sp, #60	; 0x3c
    139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    13a0:	463a      	mov	r2, r7
    13a2:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    13a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    13aa:	f01a fc97 	bl	1bcdc <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    13ae:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    13b0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    13b4:	d0c6      	beq.n	1344 <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
    13b6:	4638      	mov	r0, r7
    13b8:	f01a fb44 	bl	1ba44 <ull_filter_rpa_update>
    13bc:	e7c2      	b.n	1344 <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
    13be:	f012 fdd9 	bl	13f74 <ll_rx_link_alloc>
		if (!link) {
    13c2:	4682      	mov	sl, r0
    13c4:	2800      	cmp	r0, #0
    13c6:	f000 81b2 	beq.w	172e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a6>
		node_rx = ll_rx_alloc();
    13ca:	f012 fddf 	bl	13f8c <ll_rx_alloc>
		if (!node_rx) {
    13ce:	4683      	mov	fp, r0
    13d0:	2800      	cmp	r0, #0
    13d2:	f000 81b1 	beq.w	1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>
		conn = ll_conn_acquire();
    13d6:	f014 ffcf 	bl	16378 <ll_conn_acquire>
		if (!conn) {
    13da:	4605      	mov	r5, r0
    13dc:	2800      	cmp	r0, #0
    13de:	f000 81a8 	beq.w	1732 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3aa>
		if (!conn_lll->link_tx_free) {
    13e2:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    13e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    13e8:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    13ea:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    13ee:	2800      	cmp	r0, #0
    13f0:	f000 8199 	beq.w	1726 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x39e>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    13f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
    13f8:	f105 0164 	add.w	r1, r5, #100	; 0x64
    13fc:	930b      	str	r3, [sp, #44]	; 0x2c
    13fe:	f00e fe87 	bl	10110 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    1402:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1406:	4b71      	ldr	r3, [pc, #452]	; (15cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x244>)
			conn_lll->phy_tx = PHY_1M;
    1408:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    140c:	f022 0207 	bic.w	r2, r2, #7
    1410:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    1414:	f042 0201 	orr.w	r2, r2, #1
    1418:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    141c:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    1420:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1424:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1428:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    142c:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    1430:	f022 0207 	bic.w	r2, r2, #7
    1434:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
    1438:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    143c:	f022 0207 	bic.w	r2, r2, #7
    1440:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
    1444:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
    1448:	f022 0207 	bic.w	r2, r2, #7
    144c:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1450:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
    1454:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1456:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
    145a:	2206      	movs	r2, #6
    145c:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
    1460:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    1464:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    1466:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
    146a:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    146c:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    146e:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    1472:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    1474:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    1478:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
    147c:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
    1480:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1484:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    1488:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
    148c:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1490:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1494:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
    1498:	f012 f82e 	bl	134f8 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    149c:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    14a0:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    14a4:	f022 0203 	bic.w	r2, r2, #3
    14a8:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    14ac:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    14b0:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    14b4:	f022 0218 	bic.w	r2, r2, #24
    14b8:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    14bc:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
    14c0:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    14c4:	f022 0207 	bic.w	r2, r2, #7
    14c8:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    14cc:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
    14d0:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
    14d4:	f366 1245 	bfi	r2, r6, #5, #1
    14d8:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    14dc:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    14e0:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
    14e4:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
    14e8:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
    14ec:	2100      	movs	r1, #0
    14ee:	2000      	movs	r0, #0
    14f0:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
    14f4:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
    14f8:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
    14fc:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
    1500:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1504:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    1508:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    150c:	f015 fa7c 	bl	16a08 <ull_conn_default_tx_octets_get>
    1510:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1514:	f015 fa7e 	bl	16a14 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1518:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    151c:	4a2c      	ldr	r2, [pc, #176]	; (15d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x248>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    151e:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1522:	400a      	ands	r2, r1
    1524:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1528:	f015 fa7a 	bl	16a20 <ull_conn_default_phy_tx_get>
    152c:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    1530:	f360 0202 	bfi	r2, r0, #0, #3
    1534:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1538:	f015 fa78 	bl	16a2c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    153c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    153e:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1540:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1544:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1548:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    154c:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    1550:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1554:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1558:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
    155c:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    155e:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1560:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    1564:	f01b fbf4 	bl	1cd50 <lll_clock_wait>
		if (err) {
    1568:	2800      	cmp	r0, #0
    156a:	f040 80d8 	bne.w	171e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x396>
	uint8_t ch_map = lll->chan_map;
    156e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1572:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1574:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1578:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    157c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1580:	f00e ff46 	bl	10410 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1584:	bb30      	cbnz	r0, 15d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24c>
	if (adv->lll.conn) {
    1586:	6a23      	ldr	r3, [r4, #32]
    1588:	2b00      	cmp	r3, #0
    158a:	f43f af04 	beq.w	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
		conn_release(adv);
    158e:	f013 fb09 	bl	14ba4 <conn_release.constprop.0>
    1592:	e700      	b.n	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
	if (!adv || !adv->is_enabled) {
    1594:	07d5      	lsls	r5, r2, #31
    1596:	d404      	bmi.n	15a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x21a>
			return 0;
    1598:	2700      	movs	r7, #0
}
    159a:	4638      	mov	r0, r7
    159c:	b00f      	add	sp, #60	; 0x3c
    159e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (adv->lll.conn) {
    15a2:	6a23      	ldr	r3, [r4, #32]
    15a4:	b15b      	cbz	r3, 15be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x236>
		adv->lll.conn->periph.cancelled = 1U;
    15a6:	f893 2020 	ldrb.w	r2, [r3, #32]
    15aa:	f042 0202 	orr.w	r2, r2, #2
    15ae:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    15b2:	6a23      	ldr	r3, [r4, #32]
    15b4:	f893 3020 	ldrb.w	r3, [r3, #32]
    15b8:	07d8      	lsls	r0, r3, #31
    15ba:	f53f aeec 	bmi.w	1396 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe>
}
    15be:	b00f      	add	sp, #60	; 0x3c
    15c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    15c4:	f013 bb30 	b.w	14c28 <disable.part.0>
    15c8:	2000295c 	.word	0x2000295c
    15cc:	01480148 	.word	0x01480148
    15d0:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    15d4:	f899 1001 	ldrb.w	r1, [r9, #1]
    15d8:	4602      	mov	r2, r0
    15da:	4640      	mov	r0, r8
    15dc:	f013 fbd4 	bl	14d88 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    15e0:	495b      	ldr	r1, [pc, #364]	; (1750 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c8>)
	uint16_t interval = adv->interval;
    15e2:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
    15e6:	2331      	movs	r3, #49	; 0x31
    15e8:	2500      	movs	r5, #0
    15ea:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    15ec:	fba0 0101 	umull	r0, r1, r0, r1
    15f0:	a355      	add	r3, pc, #340	; (adr r3, 1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    15f2:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    15f6:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
    15fa:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    15fc:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    15fe:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1600:	f7ff f9bc 	bl	97c <__aeabi_uldivmod>
    1604:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    1606:	f010 f8fb 	bl	11800 <ticker_ticks_now_get>
    160a:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    160c:	f1b9 0f00 	cmp.w	r9, #0
    1610:	d108      	bne.n	1624 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x29c>
    1612:	f898 5000 	ldrb.w	r5, [r8]
    1616:	f005 050f 	and.w	r5, r5, #15
    161a:	f1a5 0501 	sub.w	r5, r5, #1
    161e:	fab5 f585 	clz	r5, r5
    1622:	096d      	lsrs	r5, r5, #5
    1624:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    1628:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    162a:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    162e:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1632:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    1636:	d031      	beq.n	169c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x314>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1638:	2000      	movs	r0, #0
    163a:	4a46      	ldr	r2, [pc, #280]	; (1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>)
    163c:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1758 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d0>
    1640:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    1642:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1644:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    1648:	9301      	str	r3, [sp, #4]
    164a:	9205      	str	r2, [sp, #20]
    164c:	2103      	movs	r1, #3
    164e:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1652:	9406      	str	r4, [sp, #24]
    1654:	4633      	mov	r3, r6
    1656:	9000      	str	r0, [sp, #0]
    1658:	f8cd 8020 	str.w	r8, [sp, #32]
    165c:	f8cd 901c 	str.w	r9, [sp, #28]
    1660:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1662:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1664:	f00f ffa2 	bl	115ac <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1668:	4641      	mov	r1, r8
    166a:	f012 fd13 	bl	14094 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    166e:	2800      	cmp	r0, #0
    1670:	d189      	bne.n	1586 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fe>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1672:	4a3a      	ldr	r2, [pc, #232]	; (175c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d4>)
    1674:	9205      	str	r2, [sp, #20]
    1676:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    167a:	9200      	str	r2, [sp, #0]
    167c:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1680:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1684:	f8cd 901c 	str.w	r9, [sp, #28]
    1688:	f8cd 8020 	str.w	r8, [sp, #32]
    168c:	9406      	str	r4, [sp, #24]
    168e:	4633      	mov	r3, r6
    1690:	2201      	movs	r2, #1
    1692:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1694:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1696:	f00f ff89 	bl	115ac <ticker_start>
    169a:	e029      	b.n	16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    169c:	4a30      	ldr	r2, [pc, #192]	; (1760 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    169e:	4831      	ldr	r0, [pc, #196]	; (1764 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3dc>)
		ret = ticker_start_ext(
    16a0:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    16a2:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    16a6:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    16aa:	9406      	str	r4, [sp, #24]
    16ac:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    16ae:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    16b0:	2391      	movs	r3, #145	; 0x91
    16b2:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    16b6:	4b28      	ldr	r3, [pc, #160]	; (1758 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3d0>)
    16b8:	9307      	str	r3, [sp, #28]
    16ba:	4b26      	ldr	r3, [pc, #152]	; (1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>)
    16bc:	9305      	str	r3, [sp, #20]
    16be:	f64f 73ff 	movw	r3, #65535	; 0xffff
    16c2:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    16c4:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    16c8:	9303      	str	r3, [sp, #12]
    16ca:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    16ce:	a31e      	add	r3, pc, #120	; (adr r3, 1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    16d0:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    16d4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    16d8:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    16dc:	f7ff f94e 	bl	97c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    16e0:	4633      	mov	r3, r6
    16e2:	e9cd 5000 	strd	r5, r0, [sp]
    16e6:	464a      	mov	r2, r9
    16e8:	4628      	mov	r0, r5
    16ea:	2103      	movs	r1, #3
    16ec:	f00f ff08 	bl	11500 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    16f0:	4641      	mov	r1, r8
    16f2:	f012 fccf 	bl	14094 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    16f6:	2800      	cmp	r0, #0
    16f8:	f47f af45 	bne.w	1586 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1fe>
	adv->is_enabled = 1;
    16fc:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1700:	f043 0301 	orr.w	r3, r3, #1
    1704:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    1708:	f013 ff7a 	bl	15600 <ull_scan_is_enabled_get>
    170c:	2800      	cmp	r0, #0
    170e:	f47f af43 	bne.w	1598 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x210>
		ull_filter_adv_scan_state_cb(BIT(0));
    1712:	2001      	movs	r0, #1
    1714:	f01a f932 	bl	1b97c <ull_filter_adv_scan_state_cb>
    1718:	e63e      	b.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
			return BT_HCI_ERR_INVALID_PARAM;
    171a:	2712      	movs	r7, #18
    171c:	e63c      	b.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
			conn_release(adv);
    171e:	f013 fa41 	bl	14ba4 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1722:	2703      	movs	r7, #3
    1724:	e638      	b.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1726:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    172a:	6768      	str	r0, [r5, #116]	; 0x74
    172c:	e662      	b.n	13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    172e:	2707      	movs	r7, #7
    1730:	e632      	b.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
			ll_rx_release(node_rx);
    1732:	4658      	mov	r0, fp
    1734:	f012 fc30 	bl	13f98 <ll_rx_release>
			ll_rx_link_release(link);
    1738:	4650      	mov	r0, sl
    173a:	f012 fc21 	bl	13f80 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    173e:	2707      	movs	r7, #7
    1740:	e62a      	b.n	1398 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10>
    1742:	bf00      	nop
    1744:	f3af 8000 	nop.w
    1748:	1afd498d 	.word	0x1afd498d
    174c:	00000007 	.word	0x00000007
    1750:	3b9aca00 	.word	0x3b9aca00
    1754:	00014df9 	.word	0x00014df9
    1758:	000135c5 	.word	0x000135c5
    175c:	00014935 	.word	0x00014935
    1760:	200029d0 	.word	0x200029d0
    1764:	84e72a00 	.word	0x84e72a00

00001768 <ull_adv_time_update>:
{
    1768:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    176a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    176e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1770:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    1774:	460d      	mov	r5, r1
    1776:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1778:	2101      	movs	r1, #1
    177a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    177e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1780:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1784:	f00e fe44 	bl	10410 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1788:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    178a:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    178c:	4628      	mov	r0, r5
    178e:	f013 fafb 	bl	14d88 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1792:	491d      	ldr	r1, [pc, #116]	; (1808 <ull_adv_time_update+0xa0>)
    1794:	a31a      	add	r3, pc, #104	; (adr r3, 1800 <ull_adv_time_update+0x98>)
    1796:	e9d3 2300 	ldrd	r2, r3, [r3]
    179a:	fba0 0101 	umull	r0, r1, r0, r1
    179e:	f7ff f8ed 	bl	97c <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    17a2:	6923      	ldr	r3, [r4, #16]
    17a4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    17a6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    17a8:	d220      	bcs.n	17ec <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    17aa:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    17ac:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    17ae:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    17b0:	4a16      	ldr	r2, [pc, #88]	; (180c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    17b2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    17b4:	4b16      	ldr	r3, [pc, #88]	; (1810 <ull_adv_time_update+0xa8>)
    17b6:	1aa2      	subs	r2, r4, r2
    17b8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    17bc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    17be:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    17c0:	2300      	movs	r3, #0
    17c2:	440a      	add	r2, r1
    17c4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    17c6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    17c8:	4912      	ldr	r1, [pc, #72]	; (1814 <ull_adv_time_update+0xac>)
    17ca:	9105      	str	r1, [sp, #20]
    17cc:	e9cd 3303 	strd	r3, r3, [sp, #12]
    17d0:	2103      	movs	r1, #3
    17d2:	b2d2      	uxtb	r2, r2
    17d4:	9606      	str	r6, [sp, #24]
    17d6:	9300      	str	r3, [sp, #0]
    17d8:	4618      	mov	r0, r3
    17da:	f00f ff59 	bl	11690 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    17de:	4631      	mov	r1, r6
    17e0:	f012 fc58 	bl	14094 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    17e4:	b948      	cbnz	r0, 17fa <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    17e6:	6125      	str	r5, [r4, #16]
}
    17e8:	b00a      	add	sp, #40	; 0x28
    17ea:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    17ec:	d902      	bls.n	17f4 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    17ee:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    17f0:	2300      	movs	r3, #0
    17f2:	e7dc      	b.n	17ae <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    17f4:	2000      	movs	r0, #0
}
    17f6:	b00a      	add	sp, #40	; 0x28
    17f8:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    17fa:	200c      	movs	r0, #12
}
    17fc:	b00a      	add	sp, #40	; 0x28
    17fe:	bd70      	pop	{r4, r5, r6, pc}
    1800:	1afd498d 	.word	0x1afd498d
    1804:	00000007 	.word	0x00000007
    1808:	3b9aca00 	.word	0x3b9aca00
    180c:	2000295c 	.word	0x2000295c
    1810:	8d3dcb09 	.word	0x8d3dcb09
    1814:	000135c5 	.word	0x000135c5

00001818 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1818:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    181a:	4c19      	ldr	r4, [pc, #100]	; (1880 <ll_scan_params_set+0x68>)
{
    181c:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1820:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    1824:	f01c 0501 	ands.w	r5, ip, #1
    1828:	d122      	bne.n	1870 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    182a:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    182e:	0140      	lsls	r0, r0, #5
    1830:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    1834:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    1836:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    183a:	f00e 0e18 	and.w	lr, lr, #24
    183e:	f000 0020 	and.w	r0, r0, #32
    1842:	ea40 000e 	orr.w	r0, r0, lr
    1846:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    184a:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    184c:	480d      	ldr	r0, [pc, #52]	; (1884 <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    184e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1852:	fba2 0100 	umull	r0, r1, r2, r0
    1856:	2391      	movs	r3, #145	; 0x91
    1858:	fb03 1102 	mla	r1, r3, r2, r1
    185c:	a306      	add	r3, pc, #24	; (adr r3, 1878 <ll_scan_params_set+0x60>)
    185e:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    1862:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1866:	f7ff f889 	bl	97c <__aeabi_uldivmod>
    186a:	6420      	str	r0, [r4, #64]	; 0x40
}
    186c:	4628      	mov	r0, r5
    186e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1870:	250c      	movs	r5, #12
}
    1872:	4628      	mov	r0, r5
    1874:	bd38      	pop	{r3, r4, r5, pc}
    1876:	bf00      	nop
    1878:	1afd498d 	.word	0x1afd498d
    187c:	00000007 	.word	0x00000007
    1880:	200029f4 	.word	0x200029f4
    1884:	84e72a00 	.word	0x84e72a00

00001888 <ull_scan_params_set>:
{
    1888:	b510      	push	{r4, lr}
    188a:	f89d c008 	ldrb.w	ip, [sp, #8]
    188e:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1890:	0149      	lsls	r1, r1, #5
    1892:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    1896:	f000 0018 	and.w	r0, r0, #24
    189a:	f001 0c20 	and.w	ip, r1, #32
    189e:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    18a0:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    18a2:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18a6:	480c      	ldr	r0, [pc, #48]	; (18d8 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    18a8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    18ac:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18b0:	2291      	movs	r2, #145	; 0x91
    18b2:	fba3 0100 	umull	r0, r1, r3, r0
    18b6:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    18ba:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    18be:	a304      	add	r3, pc, #16	; (adr r3, 18d0 <ull_scan_params_set+0x48>)
    18c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    18c4:	f7ff f85a 	bl	97c <__aeabi_uldivmod>
    18c8:	6260      	str	r0, [r4, #36]	; 0x24
}
    18ca:	bd10      	pop	{r4, pc}
    18cc:	f3af 8000 	nop.w
    18d0:	1afd498d 	.word	0x1afd498d
    18d4:	00000007 	.word	0x00000007
    18d8:	84e72a00 	.word	0x84e72a00
    18dc:	00000000 	.word	0x00000000

000018e0 <ull_scan_enable>:
{
    18e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18e4:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    18e6:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    18ea:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    18ee:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    18f2:	f3c0 0040 	ubfx	r0, r0, #1, #1
    18f6:	f360 1386 	bfi	r3, r0, #6, #1
{
    18fa:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    18fc:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1900:	f00f ffb6 	bl	11870 <ll_addr_read>
	lll->chan = 0U;
    1904:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1908:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    190a:	484d      	ldr	r0, [pc, #308]	; (1a40 <ull_scan_enable+0x160>)
    190c:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    190e:	f002 0279 	and.w	r2, r2, #121	; 0x79
    1912:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1914:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1918:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    191c:	2291      	movs	r2, #145	; 0x91
    191e:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1922:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1926:	a344      	add	r3, pc, #272	; (adr r3, 1a38 <ull_scan_enable+0x158>)
    1928:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    192c:	7025      	strb	r5, [r4, #0]
    192e:	f7ff f825 	bl	97c <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1932:	2331      	movs	r3, #49	; 0x31
    1934:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1938:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    193a:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    193c:	3309      	adds	r3, #9
	    (ticks_interval -
    193e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1942:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1944:	bf32      	itee	cc
    1946:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1948:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    194a:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    194c:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    194e:	f00f ff57 	bl	11800 <ticker_ticks_now_get>
	if (!lll->conn) {
    1952:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1954:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1956:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    195a:	2b00      	cmp	r3, #0
    195c:	d04c      	beq.n	19f8 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    195e:	4d39      	ldr	r5, [pc, #228]	; (1a44 <ull_scan_enable+0x164>)
    1960:	4b39      	ldr	r3, [pc, #228]	; (1a48 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1962:	f8cd 8020 	str.w	r8, [sp, #32]
    1966:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1968:	1b65      	subs	r5, r4, r5
    196a:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    196e:	4834      	ldr	r0, [pc, #208]	; (1a40 <ull_scan_enable+0x160>)
    1970:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1972:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1976:	fba3 0100 	umull	r0, r1, r3, r0
    197a:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    197c:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1980:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1984:	6923      	ldr	r3, [r4, #16]
    1986:	9304      	str	r3, [sp, #16]
    1988:	4b30      	ldr	r3, [pc, #192]	; (1a4c <ull_scan_enable+0x16c>)
    198a:	9307      	str	r3, [sp, #28]
    198c:	4b30      	ldr	r3, [pc, #192]	; (1a50 <ull_scan_enable+0x170>)
    198e:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1990:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1994:	a328      	add	r3, pc, #160	; (adr r3, 1a38 <ull_scan_enable+0x158>)
    1996:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    199a:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    199e:	f7fe ffed 	bl	97c <__aeabi_uldivmod>
    19a2:	4610      	mov	r0, r2
    19a4:	4619      	mov	r1, r3
    19a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    19aa:	2300      	movs	r3, #0
    19ac:	f7fe ffe6 	bl	97c <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    19b0:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    19b2:	3504      	adds	r5, #4
    19b4:	b2ed      	uxtb	r5, r5
    19b6:	462a      	mov	r2, r5
    19b8:	e9cd 6001 	strd	r6, r0, [sp, #4]
    19bc:	463b      	mov	r3, r7
    19be:	2103      	movs	r1, #3
    19c0:	f8cd a000 	str.w	sl, [sp]
    19c4:	4650      	mov	r0, sl
    19c6:	f00f fdf1 	bl	115ac <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    19ca:	4641      	mov	r1, r8
    19cc:	f012 fb62 	bl	14094 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    19d0:	4605      	mov	r5, r0
    19d2:	b968      	cbnz	r0, 19f0 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
    19d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    19d8:	f043 0301 	orr.w	r3, r3, #1
    19dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    19e0:	f013 fbf4 	bl	151cc <ull_adv_is_enabled_get>
    19e4:	4604      	mov	r4, r0
    19e6:	b1f8      	cbz	r0, 1a28 <ull_scan_enable+0x148>
	return 0;
    19e8:	4628      	mov	r0, r5
}
    19ea:	b00c      	add	sp, #48	; 0x30
    19ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    19f0:	200c      	movs	r0, #12
}
    19f2:	b00c      	add	sp, #48	; 0x30
    19f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    19f8:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    19fc:	6921      	ldr	r1, [r4, #16]
    19fe:	4643      	mov	r3, r8
    1a00:	aa0a      	add	r2, sp, #40	; 0x28
    1a02:	2003      	movs	r0, #3
    1a04:	f001 f974 	bl	2cf0 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1a08:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1a0a:	2900      	cmp	r1, #0
    1a0c:	d0a7      	beq.n	195e <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1a0e:	4811      	ldr	r0, [pc, #68]	; (1a54 <ull_scan_enable+0x174>)
    1a10:	a309      	add	r3, pc, #36	; (adr r3, 1a38 <ull_scan_enable+0x158>)
    1a12:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a16:	fba1 0100 	umull	r0, r1, r1, r0
    1a1a:	f7fe ffaf 	bl	97c <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1a1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1a20:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1a24:	4407      	add	r7, r0
    1a26:	e79a      	b.n	195e <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
    1a28:	4648      	mov	r0, r9
    1a2a:	f019 ffa7 	bl	1b97c <ull_filter_adv_scan_state_cb>
	return 0;
    1a2e:	4620      	mov	r0, r4
}
    1a30:	b00c      	add	sp, #48	; 0x30
    1a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a36:	bf00      	nop
    1a38:	1afd498d 	.word	0x1afd498d
    1a3c:	00000007 	.word	0x00000007
    1a40:	84e72a00 	.word	0x84e72a00
    1a44:	200029f4 	.word	0x200029f4
    1a48:	38e38e39 	.word	0x38e38e39
    1a4c:	000135c5 	.word	0x000135c5
    1a50:	000153fd 	.word	0x000153fd
    1a54:	3b9aca00 	.word	0x3b9aca00

00001a58 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a5c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    1a5e:	8e45      	ldrh	r5, [r0, #50]	; 0x32
    1a60:	441d      	add	r5, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a62:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a66:	b2ad      	uxth	r5, r5
    1a68:	4429      	add	r1, r5
{
    1a6a:	4616      	mov	r6, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a6c:	f013 0207 	ands.w	r2, r3, #7
{
    1a70:	b08b      	sub	sp, #44	; 0x2c
    1a72:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1a74:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1a76:	d00a      	beq.n	1a8e <event_conn_upd_prep+0x36>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
    1a78:	1e53      	subs	r3, r2, #1
    1a7a:	2b04      	cmp	r3, #4
    1a7c:	f200 8370 	bhi.w	2160 <event_conn_upd_prep+0x708>
    1a80:	e8df f013 	tbh	[pc, r3, lsl #1]
    1a84:	023701c6 	.word	0x023701c6
    1a88:	015001a1 	.word	0x015001a1
    1a8c:	023a      	.short	0x023a
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1a8e:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    1a92:	1bc9      	subs	r1, r1, r7
    1a94:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1a98:	0409      	lsls	r1, r1, #16
    1a9a:	f100 816e 	bmi.w	1d7a <event_conn_upd_prep+0x322>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    1a9e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	f2c0 826a 	blt.w	1f7c <event_conn_upd_prep+0x524>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1aa8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    1aac:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ab0:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    1ab4:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1ab8:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    1abc:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ac0:	4293      	cmp	r3, r2
    1ac2:	d00a      	beq.n	1ada <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1ac4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ac8:	f003 030f 	and.w	r3, r3, #15
    1acc:	2b06      	cmp	r3, #6
    1ace:	d104      	bne.n	1ada <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1ad0:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1ad2:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1ad6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
    1ada:	4bbf      	ldr	r3, [pc, #764]	; (1dd8 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1adc:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    1ae0:	681a      	ldr	r2, [r3, #0]
    1ae2:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1ae4:	bf04      	itt	eq
    1ae6:	2200      	moveq	r2, #0
    1ae8:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1aea:	f1b9 0f00 	cmp.w	r9, #0
    1aee:	f000 815a 	beq.w	1da6 <event_conn_upd_prep+0x34e>
    1af2:	f8d9 0000 	ldr.w	r0, [r9]
    1af6:	2800      	cmp	r0, #0
    1af8:	f000 8155 	beq.w	1da6 <event_conn_upd_prep+0x34e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1afc:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1b00:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1b04:	6842      	ldr	r2, [r0, #4]
    1b06:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1b0a:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1b0c:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1b10:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    1b14:	f000 823a 	beq.w	1f8c <event_conn_upd_prep+0x534>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1b18:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1b1c:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1b20:	2318      	movs	r3, #24
    1b22:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
    1b26:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1b28:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
    1b2c:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1b30:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
    1b34:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1b38:	4649      	mov	r1, r9
    1b3a:	f012 fa33 	bl	13fa4 <ll_rx_put>
		ll_rx_sched();
    1b3e:	f012 fa3b 	bl	13fb8 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1b42:	68a3      	ldr	r3, [r4, #8]
    1b44:	2b00      	cmp	r3, #0
    1b46:	da09      	bge.n	1b5c <event_conn_upd_prep+0x104>
			uint32_t ticks_prepare_to_start =
    1b48:	68e1      	ldr	r1, [r4, #12]
    1b4a:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    1b4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1b50:	4291      	cmp	r1, r2
    1b52:	bf2c      	ite	cs
    1b54:	1876      	addcs	r6, r6, r1
    1b56:	18b6      	addcc	r6, r6, r2
    1b58:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    1b5a:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1b5c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b5e:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    1b62:	fb10 f008 	smulbb	r0, r0, r8
    1b66:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b68:	fbb0 f1f9 	udiv	r1, r0, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
    1b6c:	fb19 f301 	smulbb	r3, r9, r1
    1b70:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    1b72:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1b74:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1b78:	f080 8104 	bcs.w	1d84 <event_conn_upd_prep+0x32c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1b7c:	1a1b      	subs	r3, r3, r0
    1b7e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    1b82:	4896      	ldr	r0, [pc, #600]	; (1ddc <event_conn_upd_prep+0x384>)
    1b84:	fb03 f101 	mul.w	r1, r3, r1
    1b88:	fba1 0100 	umull	r0, r1, r1, r0
    1b8c:	a390      	add	r3, pc, #576	; (adr r3, 1dd0 <event_conn_upd_prep+0x378>)
    1b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b92:	f7fe fef3 	bl	97c <__aeabi_uldivmod>
    1b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b9a:	4406      	add	r6, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    1b9c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    1b9e:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1ba0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    1ba4:	1b7d      	subs	r5, r7, r5
    1ba6:	4455      	add	r5, sl
		conn_interval_us = conn->llcp_cu.interval *
    1ba8:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
    1bac:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1bae:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    1bb0:	fb0b f709 	mul.w	r7, fp, r9
		} else if (lll->role) {
    1bb4:	f2c0 820c 	blt.w	1fd0 <event_conn_upd_prep+0x578>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1bb8:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    1bbc:	4887      	ldr	r0, [pc, #540]	; (1ddc <event_conn_upd_prep+0x384>)
    1bbe:	a384      	add	r3, pc, #528	; (adr r3, 1dd0 <event_conn_upd_prep+0x378>)
    1bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bc4:	fba1 0100 	umull	r0, r1, r1, r0
    1bc8:	f7fe fed8 	bl	97c <__aeabi_uldivmod>
    1bcc:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
    1bd0:	463d      	mov	r5, r7

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    1bd2:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1bd6:	4a82      	ldr	r2, [pc, #520]	; (1de0 <event_conn_upd_prep+0x388>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1bd8:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    1bdc:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1be0:	4980      	ldr	r1, [pc, #512]	; (1de4 <event_conn_upd_prep+0x38c>)
		lll->interval = conn->llcp_cu.interval;
    1be2:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1be6:	443a      	add	r2, r7
    1be8:	fbb2 f2f7 	udiv	r2, r2, r7
    1bec:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1bf0:	f242 7210 	movw	r2, #10000	; 0x2710
    1bf4:	fb02 7303 	mla	r3, r2, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bf8:	4439      	add	r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1bfa:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1bfc:	fbb1 f1f7 	udiv	r1, r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1c00:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1c04:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1c06:	1d83      	adds	r3, r0, #6
    1c08:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
    1c0a:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1c0c:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1c10:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1c14:	dd04      	ble.n	1c20 <event_conn_upd_prep+0x1c8>
    1c16:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    1c1a:	33fa      	adds	r3, #250	; 0xfa
    1c1c:	441a      	add	r2, r3
    1c1e:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    1c20:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1c24:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    1c28:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    1c2a:	bf44      	itt	mi
    1c2c:	2300      	movmi	r3, #0
    1c2e:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1c32:	2102      	movs	r1, #2
    1c34:	2001      	movs	r0, #1
    1c36:	f01d fdcf 	bl	1f7d8 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1c3a:	2200      	movs	r2, #0
    1c3c:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    1c3e:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1c40:	2001      	movs	r0, #1
    1c42:	f00e fab5 	bl	101b0 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1c46:	4968      	ldr	r1, [pc, #416]	; (1de8 <event_conn_upd_prep+0x390>)
    1c48:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1c4c:	4620      	mov	r0, r4
    1c4e:	f00e fa3f 	bl	100d0 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    1c52:	f100 0a05 	add.w	sl, r0, #5
    1c56:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1c5a:	4b64      	ldr	r3, [pc, #400]	; (1dec <event_conn_upd_prep+0x394>)
    1c5c:	9400      	str	r4, [sp, #0]
    1c5e:	4652      	mov	r2, sl
    1c60:	2101      	movs	r1, #1
    1c62:	2000      	movs	r0, #0
    1c64:	f00f fd2c 	bl	116c0 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1c68:	f030 0302 	bics.w	r3, r0, #2
    1c6c:	d00c      	beq.n	1c88 <event_conn_upd_prep+0x230>
    1c6e:	4a60      	ldr	r2, [pc, #384]	; (1df0 <event_conn_upd_prep+0x398>)
    1c70:	4960      	ldr	r1, [pc, #384]	; (1df4 <event_conn_upd_prep+0x39c>)
    1c72:	4861      	ldr	r0, [pc, #388]	; (1df8 <event_conn_upd_prep+0x3a0>)
    1c74:	f640 43cb 	movw	r3, #3275	; 0xccb
    1c78:	f023 f945 	bl	24f06 <printk>
    1c7c:	4040      	eors	r0, r0
    1c7e:	f380 8811 	msr	BASEPRI, r0
    1c82:	f04f 0003 	mov.w	r0, #3
    1c86:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1c88:	4f54      	ldr	r7, [pc, #336]	; (1ddc <event_conn_upd_prep+0x384>)
    1c8a:	fba5 7b07 	umull	r7, fp, r5, r7
    1c8e:	a350      	add	r3, pc, #320	; (adr r3, 1dd0 <event_conn_upd_prep+0x378>)
    1c90:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c94:	4638      	mov	r0, r7
    1c96:	4659      	mov	r1, fp
    1c98:	f7fe fe70 	bl	97c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1c9c:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    1ca0:	4856      	ldr	r0, [pc, #344]	; (1dfc <event_conn_upd_prep+0x3a4>)
    1ca2:	2307      	movs	r3, #7
    1ca4:	fba5 0100 	umull	r0, r1, r5, r0
    1ca8:	1a38      	subs	r0, r7, r0
    1caa:	fb03 1105 	mla	r1, r3, r5, r1
    1cae:	eb6b 0101 	sbc.w	r1, fp, r1
    1cb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1cb6:	2300      	movs	r3, #0
    1cb8:	f7fe fe60 	bl	97c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1cbc:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1cc0:	9408      	str	r4, [sp, #32]
    1cc2:	9406      	str	r4, [sp, #24]
    1cc4:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
    1cc8:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1cca:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
    1cce:	484c      	ldr	r0, [pc, #304]	; (1e00 <event_conn_upd_prep+0x3a8>)
    1cd0:	9104      	str	r1, [sp, #16]
    1cd2:	494c      	ldr	r1, [pc, #304]	; (1e04 <event_conn_upd_prep+0x3ac>)
    1cd4:	4c4c      	ldr	r4, [pc, #304]	; (1e08 <event_conn_upd_prep+0x3b0>)
    1cd6:	9407      	str	r4, [sp, #28]
    1cd8:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    1cdc:	bf38      	it	cc
    1cde:	4601      	movcc	r1, r0
    1ce0:	9105      	str	r1, [sp, #20]
    1ce2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    1ce6:	4633      	mov	r3, r6
    1ce8:	9103      	str	r1, [sp, #12]
    1cea:	4652      	mov	r2, sl
    1cec:	2101      	movs	r1, #1
    1cee:	2000      	movs	r0, #0
    1cf0:	f00f fc5c 	bl	115ac <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1cf4:	f030 0302 	bics.w	r3, r0, #2
    1cf8:	d00c      	beq.n	1d14 <event_conn_upd_prep+0x2bc>
    1cfa:	4a3d      	ldr	r2, [pc, #244]	; (1df0 <event_conn_upd_prep+0x398>)
    1cfc:	493d      	ldr	r1, [pc, #244]	; (1df4 <event_conn_upd_prep+0x39c>)
    1cfe:	483e      	ldr	r0, [pc, #248]	; (1df8 <event_conn_upd_prep+0x3a0>)
    1d00:	f640 43e5 	movw	r3, #3301	; 0xce5
    1d04:	f023 f8ff 	bl	24f06 <printk>
    1d08:	4040      	eors	r0, r0
    1d0a:	f380 8811 	msr	BASEPRI, r0
    1d0e:	f04f 0003 	mov.w	r0, #3
    1d12:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1d14:	f1b9 0f00 	cmp.w	r9, #0
    1d18:	f040 8154 	bne.w	1fc4 <event_conn_upd_prep+0x56c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    1d1c:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    1d1e:	b00b      	add	sp, #44	; 0x2c
    1d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						      conn->lll.latency + 6;
    1d24:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1d26:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1d2a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
						      conn->lll.latency + 6;
    1d2e:	3206      	adds	r2, #6
    1d30:	4411      	add	r1, r2
	    conn->tx_head &&
    1d32:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
						      conn->lll.latency + 6;
    1d36:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1d38:	f36f 0502 	bfc	r5, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    1d3c:	f8a0 10e8 	strh.w	r1, [r0, #232]	; 0xe8
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1d40:	8119      	strh	r1, [r3, #8]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1d42:	f1a3 0009 	sub.w	r0, r3, #9
		if (!conn->tx_ctrl) {
    1d46:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1d4a:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
	if (
    1d4e:	b122      	cbz	r2, 1d5a <event_conn_upd_prep+0x302>
	    !conn->llcp_enc.pause_tx &&
    1d50:	f894 5166 	ldrb.w	r5, [r4, #358]	; 0x166
	    conn->tx_head &&
    1d54:	07ae      	lsls	r6, r5, #30
    1d56:	f140 8189 	bpl.w	206c <event_conn_upd_prep+0x614>
		if (!conn->tx_ctrl) {
    1d5a:	2900      	cmp	r1, #0
    1d5c:	f000 819d 	beq.w	209a <event_conn_upd_prep+0x642>
	tx->next = conn->tx_ctrl_last->next;
    1d60:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    1d64:	6811      	ldr	r1, [r2, #0]
    1d66:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
    1d6a:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    1d6c:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
    1d70:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1d74:	2a00      	cmp	r2, #0
    1d76:	f000 818d 	beq.w	2094 <event_conn_upd_prep+0x63c>
			return -EINPROGRESS;
    1d7a:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1d7e:	b00b      	add	sp, #44	; 0x2c
    1d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1d84:	fb09 0111 	mls	r1, r9, r1, r0
    1d88:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1d8c:	4813      	ldr	r0, [pc, #76]	; (1ddc <event_conn_upd_prep+0x384>)
    1d8e:	b289      	uxth	r1, r1
    1d90:	fb03 f101 	mul.w	r1, r3, r1
    1d94:	fba1 0100 	umull	r0, r1, r1, r0
    1d98:	a30d      	add	r3, pc, #52	; (adr r3, 1dd0 <event_conn_upd_prep+0x378>)
    1d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d9e:	f7fe fded 	bl	97c <__aeabi_uldivmod>
    1da2:	1a36      	subs	r6, r6, r0
    1da4:	e6fa      	b.n	1b9c <event_conn_upd_prep+0x144>
		LL_ASSERT(rx && rx->hdr.link);
    1da6:	4a12      	ldr	r2, [pc, #72]	; (1df0 <event_conn_upd_prep+0x398>)
    1da8:	4918      	ldr	r1, [pc, #96]	; (1e0c <event_conn_upd_prep+0x3b4>)
    1daa:	4813      	ldr	r0, [pc, #76]	; (1df8 <event_conn_upd_prep+0x3a0>)
    1dac:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    1db0:	f023 f8a9 	bl	24f06 <printk>
    1db4:	4040      	eors	r0, r0
    1db6:	f380 8811 	msr	BASEPRI, r0
    1dba:	f04f 0003 	mov.w	r0, #3
    1dbe:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1dc0:	f8d9 0000 	ldr.w	r0, [r9]
    1dc4:	e69a      	b.n	1afc <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
    1dc6:	f06f 000f 	mvn.w	r0, #15
}
    1dca:	b00b      	add	sp, #44	; 0x2c
    1dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1dd0:	1afd498d 	.word	0x1afd498d
    1dd4:	00000007 	.word	0x00000007
    1dd8:	20002a50 	.word	0x20002a50
    1ddc:	3b9aca00 	.word	0x3b9aca00
    1de0:	026259ff 	.word	0x026259ff
    1de4:	01c9c37f 	.word	0x01c9c37f
    1de8:	20001a30 	.word	0x20001a30
    1dec:	00015ae9 	.word	0x00015ae9
    1df0:	0002c6cc 	.word	0x0002c6cc
    1df4:	0002c7ac 	.word	0x0002c7ac
    1df8:	0002bfdc 	.word	0x0002bfdc
    1dfc:	1afd498d 	.word	0x1afd498d
    1e00:	0001a801 	.word	0x0001a801
    1e04:	0001a601 	.word	0x0001a601
    1e08:	00015a91 	.word	0x00015a91
    1e0c:	0002c798 	.word	0x0002c798
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    1e10:	f8df 8314 	ldr.w	r8, [pc, #788]	; 2128 <event_conn_upd_prep+0x6d0>
		rx = ll_pdu_rx_alloc_peek(1);
    1e14:	2001      	movs	r0, #1
    1e16:	f012 f8d5 	bl	13fc4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    1e1a:	4607      	mov	r7, r0
    1e1c:	2800      	cmp	r0, #0
    1e1e:	f000 814d 	beq.w	20bc <event_conn_upd_prep+0x664>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1e22:	48c2      	ldr	r0, [pc, #776]	; (212c <event_conn_upd_prep+0x6d4>)
    1e24:	f00e f922 	bl	1006c <mem_acquire>
		if (!tx) {
    1e28:	4605      	mov	r5, r0
    1e2a:	2800      	cmp	r0, #0
    1e2c:	f000 8146 	beq.w	20bc <event_conn_upd_prep+0x664>
	if (!conn_upd_curr) {
    1e30:	4bbf      	ldr	r3, [pc, #764]	; (2130 <event_conn_upd_prep+0x6d8>)
    1e32:	681a      	ldr	r2, [r3, #0]
    1e34:	2a00      	cmp	r2, #0
    1e36:	f000 8117 	beq.w	2068 <event_conn_upd_prep+0x610>
		(void)ll_pdu_rx_alloc();
    1e3a:	f012 f8e1 	bl	14000 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    1e3e:	683b      	ldr	r3, [r7, #0]
    1e40:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    1e44:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e46:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    1e48:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e4c:	f043 0303 	orr.w	r3, r3, #3
    1e50:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1e52:	230c      	movs	r3, #12
    1e54:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1e56:	2300      	movs	r3, #0
    1e58:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1e5a:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    1e5e:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    1e60:	4ab4      	ldr	r2, [pc, #720]	; (2134 <event_conn_upd_prep+0x6dc>)
    1e62:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    1e66:	fba2 2303 	umull	r2, r3, r2, r3
    1e6a:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1e6c:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1e70:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1e74:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    1e78:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
    1e7c:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1e80:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    1e84:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1e88:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    1e8c:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    1e90:	2203      	movs	r2, #3
    1e92:	f362 0302 	bfi	r3, r2, #0, #3
    1e96:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    1e9a:	68a3      	ldr	r3, [r4, #8]
    1e9c:	2b00      	cmp	r3, #0
    1e9e:	da0a      	bge.n	1eb6 <event_conn_upd_prep+0x45e>
			uint32_t ticks_prepare_to_start =
    1ea0:	68e1      	ldr	r1, [r4, #12]
    1ea2:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    1ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    1ea8:	4291      	cmp	r1, r2
    1eaa:	bf2c      	ite	cs
    1eac:	1876      	addcs	r6, r6, r1
    1eae:	18b6      	addcc	r6, r6, r2
    1eb0:	1af3      	subs	r3, r6, r3
    1eb2:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    1eb6:	4ba0      	ldr	r3, [pc, #640]	; (2138 <event_conn_upd_prep+0x6e0>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1eb8:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    1eba:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    1ebc:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1ec0:	2102      	movs	r1, #2
    1ec2:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    1ec4:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    1ec8:	f00e f9a4 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!retval);
    1ecc:	2800      	cmp	r0, #0
    1ece:	f43f af54 	beq.w	1d7a <event_conn_upd_prep+0x322>
    1ed2:	4a9a      	ldr	r2, [pc, #616]	; (213c <event_conn_upd_prep+0x6e4>)
    1ed4:	499a      	ldr	r1, [pc, #616]	; (2140 <event_conn_upd_prep+0x6e8>)
    1ed6:	489b      	ldr	r0, [pc, #620]	; (2144 <event_conn_upd_prep+0x6ec>)
    1ed8:	f640 3373 	movw	r3, #2931	; 0xb73
    1edc:	f023 f813 	bl	24f06 <printk>
    1ee0:	4040      	eors	r0, r0
    1ee2:	f380 8811 	msr	BASEPRI, r0
    1ee6:	f04f 0003 	mov.w	r0, #3
    1eea:	df02      	svc	2
	return -EINPROGRESS;
    1eec:	f06f 0076 	mvn.w	r0, #118	; 0x76
    1ef0:	e715      	b.n	1d1e <event_conn_upd_prep+0x2c6>
		switch (conn->llcp_cu.state) {
    1ef2:	f8df 8254 	ldr.w	r8, [pc, #596]	; 2148 <event_conn_upd_prep+0x6f0>
    1ef6:	e78d      	b.n	1e14 <event_conn_upd_prep+0x3bc>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    1ef8:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
	    conn->tx_head &&
    1efc:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
			conn->llcp_ack = conn->llcp_req;
    1f00:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    1f04:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1f08:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
	conn_upd_curr = NULL;
    1f0c:	4988      	ldr	r1, [pc, #544]	; (2130 <event_conn_upd_prep+0x6d8>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
    1f0e:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1f12:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    1f16:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    1f1a:	2000      	movs	r0, #0
    1f1c:	6008      	str	r0, [r1, #0]
		if (!conn->tx_ctrl) {
    1f1e:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    1f22:	f1a2 0109 	sub.w	r1, r2, #9
	if (
    1f26:	b1b3      	cbz	r3, 1f56 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_enc.pause_tx &&
    1f28:	f894 5166 	ldrb.w	r5, [r4, #358]	; 0x166
	    conn->tx_head &&
    1f2c:	07ad      	lsls	r5, r5, #30
    1f2e:	d412      	bmi.n	1f56 <event_conn_upd_prep+0x4fe>
	    !conn->llcp_phy.pause_tx &&
    1f30:	f894 51bf 	ldrb.w	r5, [r4, #447]	; 0x1bf
    1f34:	07ef      	lsls	r7, r5, #31
    1f36:	d40e      	bmi.n	1f56 <event_conn_upd_prep+0x4fe>
		if (conn->tx_head == conn->tx_data) {
    1f38:	f8d4 51d0 	ldr.w	r5, [r4, #464]	; 0x1d0
    1f3c:	42ab      	cmp	r3, r5
    1f3e:	f000 80d7 	beq.w	20f0 <event_conn_upd_prep+0x698>
		} else if (!conn->tx_ctrl) {
    1f42:	b958      	cbnz	r0, 1f5c <event_conn_upd_prep+0x504>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    1f44:	7918      	ldrb	r0, [r3, #4]
    1f46:	f000 0003 	and.w	r0, r0, #3
    1f4a:	2803      	cmp	r0, #3
    1f4c:	f000 80df 	beq.w	210e <event_conn_upd_prep+0x6b6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    1f50:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    1f54:	e004      	b.n	1f60 <event_conn_upd_prep+0x508>
		if (!conn->tx_ctrl) {
    1f56:	2800      	cmp	r0, #0
    1f58:	f000 80a9 	beq.w	20ae <event_conn_upd_prep+0x656>
	tx->next = conn->tx_ctrl_last->next;
    1f5c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    1f60:	6818      	ldr	r0, [r3, #0]
    1f62:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
    1f66:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    1f68:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
    1f6c:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1f70:	2b00      	cmp	r3, #0
    1f72:	f000 80a6 	beq.w	20c2 <event_conn_upd_prep+0x66a>
			return -ECANCELED;
    1f76:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    1f7a:	e6d0      	b.n	1d1e <event_conn_upd_prep+0x2c6>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    1f7c:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
    1f80:	2b00      	cmp	r3, #0
    1f82:	f43f ad91 	beq.w	1aa8 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
    1f86:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
    1f8a:	e591      	b.n	1ab0 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
    1f8c:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    1f90:	4594      	cmp	ip, r2
    1f92:	f47f adc1 	bne.w	1b18 <event_conn_upd_prep+0xc0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1f96:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    1f9a:	fb0c fe03 	mul.w	lr, ip, r3
    1f9e:	f242 7c10 	movw	ip, #10000	; 0x2710
    1fa2:	fb0c ec01 	mla	ip, ip, r1, lr
    1fa6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    1faa:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    1fae:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    1fb2:	fa1f fc8c 	uxth.w	ip, ip
    1fb6:	45e6      	cmp	lr, ip
    1fb8:	f47f adae 	bne.w	1b18 <event_conn_upd_prep+0xc0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1fbc:	2301      	movs	r3, #1
    1fbe:	f889 3004 	strb.w	r3, [r9, #4]
    1fc2:	e5b9      	b.n	1b38 <event_conn_upd_prep+0xe0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1fc4:	2201      	movs	r2, #1
    1fc6:	2102      	movs	r1, #2
    1fc8:	4610      	mov	r0, r2
    1fca:	f00e f8f1 	bl	101b0 <mayfly_enable>
    1fce:	e6a5      	b.n	1d1c <event_conn_upd_prep+0x2c4>
				lll->periph.window_widening_periodic_us *
    1fd0:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    1fd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1fd4:	fb02 3318 	mls	r3, r2, r8, r3
    1fd8:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1fda:	f01a ff0d 	bl	1cdf8 <lll_clock_ppm_local_get>
    1fde:	4605      	mov	r5, r0
    1fe0:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1fe4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 214c <event_conn_upd_prep+0x6f4>
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1fe8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    1fec:	f01a ff06 	bl	1cdfc <lll_clock_ppm_get>
    1ff0:	4405      	add	r5, r0
    1ff2:	fb07 f505 	mul.w	r5, r7, r5
    1ff6:	4b56      	ldr	r3, [pc, #344]	; (2150 <event_conn_upd_prep+0x6f8>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    1ff8:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    1ffc:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    2000:	f205 253f 	addw	r5, r5, #575	; 0x23f
    2004:	fba3 3505 	umull	r3, r5, r3, r5
    2008:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
    200a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
    200c:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    200e:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
    2012:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
    2016:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2018:	087a      	lsrs	r2, r7, #1
			lll->periph.window_widening_prepare_us +=
    201a:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    201c:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    201e:	4293      	cmp	r3, r2
    2020:	bf28      	it	cs
    2022:	4613      	movcs	r3, r2
    2024:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    2028:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    202a:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
    202e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2032:	a33b      	add	r3, pc, #236	; (adr r3, 2120 <event_conn_upd_prep+0x6c8>)
    2034:	e9d3 2300 	ldrd	r2, r3, [r3]
    2038:	f7fe fca0 	bl	97c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    203c:	4b3d      	ldr	r3, [pc, #244]	; (2134 <event_conn_upd_prep+0x6dc>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    203e:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2040:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    2044:	fba3 3000 	umull	r3, r0, r3, r0
    2048:	0a80      	lsrs	r0, r0, #10
    204a:	fb0b f000 	mul.w	r0, fp, r0
    204e:	fba0 0108 	umull	r0, r1, r0, r8
    2052:	a333      	add	r3, pc, #204	; (adr r3, 2120 <event_conn_upd_prep+0x6c8>)
    2054:	e9d3 2300 	ldrd	r2, r3, [r3]
    2058:	f7fe fc90 	bl	97c <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    205c:	1b7d      	subs	r5, r7, r5
		lll->interval = conn->llcp_cu.interval;
    205e:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2062:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    2066:	e5b6      	b.n	1bd6 <event_conn_upd_prep+0x17e>
		conn_upd_curr = conn;
    2068:	601c      	str	r4, [r3, #0]
    206a:	e6e6      	b.n	1e3a <event_conn_upd_prep+0x3e2>
	    !conn->llcp_phy.pause_tx &&
    206c:	f894 51bf 	ldrb.w	r5, [r4, #447]	; 0x1bf
    2070:	07ed      	lsls	r5, r5, #31
    2072:	f53f ae72 	bmi.w	1d5a <event_conn_upd_prep+0x302>
		if (conn->tx_head == conn->tx_data) {
    2076:	f8d4 51d0 	ldr.w	r5, [r4, #464]	; 0x1d0
    207a:	42aa      	cmp	r2, r5
    207c:	d026      	beq.n	20cc <event_conn_upd_prep+0x674>
		} else if (!conn->tx_ctrl) {
    207e:	2900      	cmp	r1, #0
    2080:	f47f ae6e 	bne.w	1d60 <event_conn_upd_prep+0x308>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2084:	7911      	ldrb	r1, [r2, #4]
    2086:	f001 0103 	and.w	r1, r1, #3
    208a:	2903      	cmp	r1, #3
    208c:	d062      	beq.n	2154 <event_conn_upd_prep+0x6fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    208e:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    2092:	e667      	b.n	1d64 <event_conn_upd_prep+0x30c>
		conn->tx_data_last = tx;
    2094:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    2098:	e66f      	b.n	1d7a <event_conn_upd_prep+0x322>
			tx->next = conn->tx_head;
    209a:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
    209e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    20a2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    20a6:	2a00      	cmp	r2, #0
    20a8:	f47f ae67 	bne.w	1d7a <event_conn_upd_prep+0x322>
    20ac:	e7f2      	b.n	2094 <event_conn_upd_prep+0x63c>
			tx->next = conn->tx_head;
    20ae:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
    20b2:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    20b6:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
    20ba:	e759      	b.n	1f70 <event_conn_upd_prep+0x518>
			return -ENOBUFS;
    20bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
    20c0:	e62d      	b.n	1d1e <event_conn_upd_prep+0x2c6>
		conn->tx_data_last = tx;
    20c2:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			return -ECANCELED;
    20c6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    20ca:	e628      	b.n	1d1e <event_conn_upd_prep+0x2c6>
			conn->tx_data = conn->tx_data->next;
    20cc:	6815      	ldr	r5, [r2, #0]
    20ce:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    20d2:	2900      	cmp	r1, #0
    20d4:	f47f ae44 	bne.w	1d60 <event_conn_upd_prep+0x308>
			tx->next = conn->tx_head->next;
    20d8:	6811      	ldr	r1, [r2, #0]
    20da:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
    20de:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    20e0:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
    20e4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    20e8:	2a00      	cmp	r2, #0
    20ea:	f47f ae46 	bne.w	1d7a <event_conn_upd_prep+0x322>
    20ee:	e7d1      	b.n	2094 <event_conn_upd_prep+0x63c>
			conn->tx_data = conn->tx_data->next;
    20f0:	681d      	ldr	r5, [r3, #0]
    20f2:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    20f6:	2800      	cmp	r0, #0
    20f8:	f47f af30 	bne.w	1f5c <event_conn_upd_prep+0x504>
			tx->next = conn->tx_head->next;
    20fc:	6818      	ldr	r0, [r3, #0]
    20fe:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
    2102:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    2104:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
    2108:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
    210c:	e730      	b.n	1f70 <event_conn_upd_prep+0x518>
	    ((pdu_data_tx->llctrl.opcode !=
    210e:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2110:	2803      	cmp	r0, #3
    2112:	d0f3      	beq.n	20fc <event_conn_upd_prep+0x6a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2114:	280a      	cmp	r0, #10
    2116:	f47f af1b 	bne.w	1f50 <event_conn_upd_prep+0x4f8>
    211a:	e7ef      	b.n	20fc <event_conn_upd_prep+0x6a4>
    211c:	f3af 8000 	nop.w
    2120:	1afd498d 	.word	0x1afd498d
    2124:	00000007 	.word	0x00000007
    2128:	0001ae61 	.word	0x0001ae61
    212c:	20002ae4 	.word	0x20002ae4
    2130:	20002a50 	.word	0x20002a50
    2134:	d1b71759 	.word	0xd1b71759
    2138:	20000608 	.word	0x20000608
    213c:	0002c6cc 	.word	0x0002c6cc
    2140:	0002c47c 	.word	0x0002c47c
    2144:	0002bfdc 	.word	0x0002bfdc
    2148:	00002eb9 	.word	0x00002eb9
    214c:	3b9aca00 	.word	0x3b9aca00
    2150:	431bde83 	.word	0x431bde83
	    ((pdu_data_tx->llctrl.opcode !=
    2154:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    2156:	2903      	cmp	r1, #3
    2158:	d0be      	beq.n	20d8 <event_conn_upd_prep+0x680>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    215a:	290a      	cmp	r1, #10
    215c:	d197      	bne.n	208e <event_conn_upd_prep+0x636>
    215e:	e7bb      	b.n	20d8 <event_conn_upd_prep+0x680>
			LL_ASSERT(0);
    2160:	4a07      	ldr	r2, [pc, #28]	; (2180 <event_conn_upd_prep+0x728>)
    2162:	4908      	ldr	r1, [pc, #32]	; (2184 <event_conn_upd_prep+0x72c>)
    2164:	4808      	ldr	r0, [pc, #32]	; (2188 <event_conn_upd_prep+0x730>)
    2166:	f640 33c7 	movw	r3, #3015	; 0xbc7
    216a:	f022 fecc 	bl	24f06 <printk>
    216e:	4040      	eors	r0, r0
    2170:	f380 8811 	msr	BASEPRI, r0
    2174:	f04f 0003 	mov.w	r0, #3
    2178:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    217a:	f04f 0800 	mov.w	r8, #0
			break;
    217e:	e649      	b.n	1e14 <event_conn_upd_prep+0x3bc>
    2180:	0002c6cc 	.word	0x0002c6cc
    2184:	0002c074 	.word	0x0002c074
    2188:	0002bfdc 	.word	0x0002bfdc
    218c:	00000000 	.word	0x00000000

00002190 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    2190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2194:	680b      	ldr	r3, [r1, #0]

	peer_addr_type = pdu_adv->tx_addr;
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    2196:	f891 9011 	ldrb.w	r9, [r1, #17]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    219a:	681b      	ldr	r3, [r3, #0]
	conn = lll->hdr.parent;
    219c:	f8d2 a000 	ldr.w	sl, [r2]
{
    21a0:	b097      	sub	sp, #92	; 0x5c
    21a2:	4605      	mov	r5, r0
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    21a4:	930b      	str	r3, [sp, #44]	; 0x2c
	peer_addr_type = pdu_adv->tx_addr;
    21a6:	7f03      	ldrb	r3, [r0, #28]
    21a8:	f8d0 001e 	ldr.w	r0, [r0, #30]
    21ac:	9014      	str	r0, [sp, #80]	; 0x50
    21ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
    21b2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47

	if (rl_idx != FILTER_IDX_NONE) {
    21b6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    21ba:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    21bc:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
{
    21c0:	460c      	mov	r4, r1
    21c2:	4617      	mov	r7, r2
    21c4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	if (rl_idx != FILTER_IDX_NONE) {
    21c8:	d14b      	bne.n	2262 <ull_periph_setup+0xd2>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    21ca:	e898 0003 	ldmia.w	r8, {r0, r1}
    21ce:	9012      	str	r0, [sp, #72]	; 0x48
    21d0:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    21d4:	462b      	mov	r3, r5
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    21d6:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    21d8:	f853 bb2e 	ldr.w	fp, [r3], #46
    21dc:	789b      	ldrb	r3, [r3, #2]
    21de:	72bb      	strb	r3, [r7, #10]
    21e0:	813a      	strh	r2, [r7, #8]
    21e2:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
    21e6:	607b      	str	r3, [r7, #4]
    21e8:	f8d5 303a 	ldr.w	r3, [r5, #58]	; 0x3a
    21ec:	61bb      	str	r3, [r7, #24]
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    21ee:	f107 0018 	add.w	r0, r7, #24
    21f2:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    21f6:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    21f8:	2105      	movs	r1, #5
    21fa:	f00e f909 	bl	10410 <util_ones_count_get>
    21fe:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2200:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2204:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2208:	f360 0305 	bfi	r3, r0, #0, #6
    220c:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    220e:	f3c2 0304 	ubfx	r3, r2, #0, #5
    2212:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2214:	8eae      	ldrh	r6, [r5, #52]	; 0x34
    2216:	81fe      	strh	r6, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    2218:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    221a:	b2b6      	uxth	r6, r6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    221c:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    2220:	d905      	bls.n	222e <ull_periph_setup+0x9e>
    2222:	331b      	adds	r3, #27
    2224:	f003 031f 	and.w	r3, r3, #31
    2228:	2b0b      	cmp	r3, #11
    222a:	d800      	bhi.n	222e <ull_periph_setup+0x9e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    222c:	bb2e      	cbnz	r6, 227a <ull_periph_setup+0xea>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    222e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    2230:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    2232:	2200      	movs	r2, #0
    2234:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    2236:	f897 3020 	ldrb.w	r3, [r7, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
    223a:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    223c:	f362 0300 	bfi	r3, r2, #0, #1
    2240:	f887 3020 	strb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    2244:	4658      	mov	r0, fp
    2246:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    2248:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    224a:	f011 feab 	bl	13fa4 <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    224e:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    2250:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    2252:	4621      	mov	r1, r4
    2254:	f011 fea6 	bl	13fa4 <ll_rx_put>
	ll_rx_sched();
    2258:	f011 feae 	bl	13fb8 <ll_rx_sched>
}
    225c:	b017      	add	sp, #92	; 0x5c
    225e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    2262:	aa12      	add	r2, sp, #72	; 0x48
    2264:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    2268:	4648      	mov	r0, r9
    226a:	f019 f8ad 	bl	1b3c8 <ll_rl_id_addr_get>
		peer_addr_type += 2;
    226e:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    2272:	3302      	adds	r3, #2
    2274:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    2278:	e7ac      	b.n	21d4 <ull_periph_setup+0x44>
	((struct lll_adv *)ftr->param)->conn = NULL;
    227a:	6823      	ldr	r3, [r4, #0]
    227c:	2100      	movs	r1, #0
    227e:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2280:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
    2284:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    2288:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    228c:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    228e:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    2292:	0952      	lsrs	r2, r2, #5
    2294:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2298:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    229a:	920d      	str	r2, [sp, #52]	; 0x34
	conn->periph.sca = pdu_adv->connect_ind.sca;
    229c:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    22a0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    22a4:	fb02 f606 	mul.w	r6, r2, r6
		ceiling_fraction(((lll_clock_ppm_local_get() +
    22a8:	f01a fda6 	bl	1cdf8 <lll_clock_ppm_local_get>
    22ac:	900c      	str	r0, [sp, #48]	; 0x30
    22ae:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
    22b2:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    22b6:	f01a fda1 	bl	1cdfc <lll_clock_ppm_get>
    22ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    22bc:	49c2      	ldr	r1, [pc, #776]	; (25c8 <ull_periph_setup+0x438>)
    22be:	4403      	add	r3, r0
    22c0:	fb06 f303 	mul.w	r3, r6, r3
    22c4:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    22c8:	f203 233f 	addw	r3, r3, #575	; 0x23f
    22cc:	fba1 2303 	umull	r2, r3, r1, r3
    22d0:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    22d2:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    22d4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    22d8:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    22da:	f240 42e2 	movw	r2, #1250	; 0x4e2
    22de:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    22e2:	0873      	lsrs	r3, r6, #1
    22e4:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    22e6:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    22e8:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    22ea:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    22ec:	4ab7      	ldr	r2, [pc, #732]	; (25cc <ull_periph_setup+0x43c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    22ee:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    22f2:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    22f4:	4432      	add	r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    22f6:	4bb6      	ldr	r3, [pc, #728]	; (25d0 <ull_periph_setup+0x440>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    22f8:	fbb2 f2f6 	udiv	r2, r2, r6
    22fc:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2300:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2302:	f242 7010 	movw	r0, #10000	; 0x2710
    2306:	fb00 6202 	mla	r2, r0, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    230a:	4433      	add	r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    230c:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    230e:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2310:	fbb2 f2f6 	udiv	r2, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2314:	fbb3 f3f6 	udiv	r3, r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2318:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    231c:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    231e:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2320:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2324:	dd04      	ble.n	2330 <ull_periph_setup+0x1a0>
    2326:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    232a:	31fa      	adds	r1, #250	; 0xfa
    232c:	440a      	add	r2, r1
    232e:	b292      	uxth	r2, r2
    2330:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
    2334:	687b      	ldr	r3, [r7, #4]
    2336:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
		chan_sel = pdu_adv->chan_sel;
    233a:	462b      	mov	r3, r5
    233c:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    2340:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2344:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    2346:	910f      	str	r1, [sp, #60]	; 0x3c
    2348:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    234a:	f100 8117 	bmi.w	257c <ull_periph_setup+0x3ec>
	cc->status = 0U;
    234e:	f44f 7380 	mov.w	r3, #256	; 0x100
    2352:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2354:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2356:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    235a:	f019 fde5 	bl	1bf28 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    235e:	f105 032b 	add.w	r3, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2362:	2800      	cmp	r0, #0
    2364:	f000 80ed 	beq.w	2542 <ull_periph_setup+0x3b2>
    2368:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    236a:	f8c5 202b 	str.w	r2, [r5, #43]	; 0x2b
    236e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2370:	809a      	strh	r2, [r3, #4]
	if (rl_idx != FILTER_IDX_NONE) {
    2372:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2376:	f000 80e8 	beq.w	254a <ull_periph_setup+0x3ba>
    237a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    237e:	9814      	ldr	r0, [sp, #80]	; 0x50
    2380:	f8a5 3029 	strh.w	r3, [r5, #41]	; 0x29
    2384:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
	cc->peer_addr_type = peer_addr_type;
    2388:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    238c:	77ab      	strb	r3, [r5, #30]
    238e:	9812      	ldr	r0, [sp, #72]	; 0x48
    2390:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    2394:	f8c5 001f 	str.w	r0, [r5, #31]
    2398:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
	cc->sca = conn->periph.sca;
    239c:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
    23a0:	89fa      	ldrh	r2, [r7, #14]
    23a2:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    23a4:	8a3a      	ldrh	r2, [r7, #16]
    23a6:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    23a8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    23ac:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    23b0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    23b4:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    23b6:	4650      	mov	r0, sl
    23b8:	f013 ffea 	bl	16390 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    23bc:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    23be:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    23c0:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    23c2:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    23c4:	4658      	mov	r0, fp
    23c6:	f011 fded 	bl	13fa4 <ll_rx_put>
		rx->handle = lll->handle;
    23ca:	89bb      	ldrh	r3, [r7, #12]
    23cc:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    23ce:	231b      	movs	r3, #27
    23d0:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    23d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    23d4:	f8d5 8000 	ldr.w	r8, [r5]
		if (chan_sel) {
    23d8:	2b00      	cmp	r3, #0
    23da:	f040 80bc 	bne.w	2556 <ull_periph_setup+0x3c6>
			cs->csa = 0x00;
    23de:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    23e2:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    23e4:	4629      	mov	r1, r5
    23e6:	4640      	mov	r0, r8
    23e8:	f011 fddc 	bl	13fa4 <ll_rx_put>
	ll_rx_sched();
    23ec:	f011 fde4 	bl	13fb8 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    23f0:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    23f4:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    23f8:	f8b7 8042 	ldrh.w	r8, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    23fc:	2101      	movs	r1, #1
    23fe:	f000 0007 	and.w	r0, r0, #7
    2402:	f01a fb07 	bl	1ca14 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2406:	44a8      	add	r8, r5
    2408:	f508 78e1 	add.w	r8, r8, #450	; 0x1c2
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    240c:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    240e:	eb08 0100 	add.w	r1, r8, r0
    2412:	4870      	ldr	r0, [pc, #448]	; (25d4 <ull_periph_setup+0x444>)
	conn->ull.ticks_active_to_start = 0U;
    2414:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    2418:	2331      	movs	r3, #49	; 0x31
    241a:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    241e:	fba1 0100 	umull	r0, r1, r1, r0
    2422:	a367      	add	r3, pc, #412	; (adr r3, 25c0 <ull_periph_setup+0x430>)
    2424:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    2428:	f8ca 9004 	str.w	r9, [sl, #4]
	conn->ull.ticks_preempt_to_start =
    242c:	f8ca 900c 	str.w	r9, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2430:	f7fe faa4 	bl	97c <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    2434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2436:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    2438:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    243a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    243e:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2440:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2444:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2448:	2102      	movs	r1, #2
    244a:	464a      	mov	r2, r9
	conn->ull.ticks_slot =
    244c:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2450:	2001      	movs	r0, #1
    2452:	f00d fead 	bl	101b0 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2456:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2458:	4638      	mov	r0, r7
    245a:	f012 fe9d 	bl	15198 <ull_adv_handle_get>
    245e:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2460:	4b5d      	ldr	r3, [pc, #372]	; (25d8 <ull_periph_setup+0x448>)
    2462:	9700      	str	r7, [sp, #0]
    2464:	b2d2      	uxtb	r2, r2
    2466:	4648      	mov	r0, r9
    2468:	2101      	movs	r1, #1
    246a:	f00f f929 	bl	116c0 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    246e:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2472:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    2474:	eba5 050b 	sub.w	r5, r5, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2478:	f000 808d 	beq.w	2596 <ull_periph_setup+0x406>
	if (adv->lll.is_hdcd) {
    247c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    247e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    2482:	07db      	lsls	r3, r3, #31
    2484:	d472      	bmi.n	256c <ull_periph_setup+0x3dc>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2486:	4650      	mov	r0, sl
    2488:	f013 ff82 	bl	16390 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    248c:	f8df 9144 	ldr.w	r9, [pc, #324]	; 25d4 <ull_periph_setup+0x444>
    2490:	fba6 8609 	umull	r8, r6, r6, r9
    2494:	a34a      	add	r3, pc, #296	; (adr r3, 25c0 <ull_periph_setup+0x430>)
    2496:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    249a:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    249c:	4631      	mov	r1, r6
    249e:	4640      	mov	r0, r8
    24a0:	f7fe fa6c 	bl	97c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24a4:	68a3      	ldr	r3, [r4, #8]
    24a6:	f8cd a018 	str.w	sl, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    24aa:	f10b 0405 	add.w	r4, fp, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24ae:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    24b2:	4b4a      	ldr	r3, [pc, #296]	; (25dc <ull_periph_setup+0x44c>)
    24b4:	9307      	str	r3, [sp, #28]
    24b6:	4b4a      	ldr	r3, [pc, #296]	; (25e0 <ull_periph_setup+0x450>)
    24b8:	9305      	str	r3, [sp, #20]
    24ba:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    24be:	9308      	str	r3, [sp, #32]
    24c0:	f8da 3010 	ldr.w	r3, [sl, #16]
    24c4:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    24c6:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    24ca:	4846      	ldr	r0, [pc, #280]	; (25e4 <ull_periph_setup+0x454>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24cc:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    24ce:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24d2:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    24d4:	2307      	movs	r3, #7
    24d6:	ebb8 0000 	subs.w	r0, r8, r0
    24da:	fb03 1107 	mla	r1, r3, r7, r1
    24de:	eb66 0101 	sbc.w	r1, r6, r1
    24e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    24e6:	2300      	movs	r3, #0
    24e8:	f7fe fa48 	bl	97c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    24ec:	a334      	add	r3, pc, #208	; (adr r3, 25c0 <ull_periph_setup+0x430>)
    24ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24f2:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    24f6:	fba5 0109 	umull	r0, r1, r5, r9
    24fa:	f7fe fa3f 	bl	97c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    24fe:	b2e4      	uxtb	r4, r4
    2500:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2504:	9000      	str	r0, [sp, #0]
    2506:	465b      	mov	r3, fp
    2508:	4622      	mov	r2, r4
    250a:	2101      	movs	r1, #1
    250c:	2000      	movs	r0, #0
    250e:	f00f f84d 	bl	115ac <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2512:	f030 0302 	bics.w	r3, r0, #2
    2516:	d00c      	beq.n	2532 <ull_periph_setup+0x3a2>
    2518:	4a33      	ldr	r2, [pc, #204]	; (25e8 <ull_periph_setup+0x458>)
    251a:	4934      	ldr	r1, [pc, #208]	; (25ec <ull_periph_setup+0x45c>)
    251c:	4834      	ldr	r0, [pc, #208]	; (25f0 <ull_periph_setup+0x460>)
    251e:	f240 13c9 	movw	r3, #457	; 0x1c9
    2522:	f022 fcf0 	bl	24f06 <printk>
    2526:	4040      	eors	r0, r0
    2528:	f380 8811 	msr	BASEPRI, r0
    252c:	f04f 0003 	mov.w	r0, #3
    2530:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2532:	2201      	movs	r2, #1
    2534:	2102      	movs	r1, #2
    2536:	4610      	mov	r0, r2
    2538:	f00d fe3a 	bl	101b0 <mayfly_enable>
}
    253c:	b017      	add	sp, #92	; 0x5c
    253e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2542:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    2546:	8098      	strh	r0, [r3, #4]
    2548:	e713      	b.n	2372 <ull_periph_setup+0x1e2>
    254a:	2200      	movs	r2, #0
    254c:	f8c5 2025 	str.w	r2, [r5, #37]	; 0x25
    2550:	f8a5 2029 	strh.w	r2, [r5, #41]	; 0x29
    2554:	e718      	b.n	2388 <ull_periph_setup+0x1f8>
			lll->data_chan_sel = 1;
    2556:	7f7b      	ldrb	r3, [r7, #29]
    2558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    255c:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    255e:	1d38      	adds	r0, r7, #4
    2560:	f018 fd2e 	bl	1afc0 <lll_chan_id>
			cs->csa = 0x01;
    2564:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2566:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    2568:	772b      	strb	r3, [r5, #28]
    256a:	e73b      	b.n	23e4 <ull_periph_setup+0x254>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    256c:	2300      	movs	r3, #0
    256e:	2201      	movs	r2, #1
    2570:	9300      	str	r3, [sp, #0]
    2572:	4618      	mov	r0, r3
    2574:	4611      	mov	r1, r2
    2576:	f00f f8a3 	bl	116c0 <ticker_stop>
    257a:	e784      	b.n	2486 <ull_periph_setup+0x2f6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    257c:	4a1a      	ldr	r2, [pc, #104]	; (25e8 <ull_periph_setup+0x458>)
    257e:	491d      	ldr	r1, [pc, #116]	; (25f4 <ull_periph_setup+0x464>)
    2580:	481b      	ldr	r0, [pc, #108]	; (25f0 <ull_periph_setup+0x460>)
    2582:	23f1      	movs	r3, #241	; 0xf1
    2584:	f022 fcbf 	bl	24f06 <printk>
    2588:	4040      	eors	r0, r0
    258a:	f380 8811 	msr	BASEPRI, r0
    258e:	f04f 0003 	mov.w	r0, #3
    2592:	df02      	svc	2
    2594:	e6db      	b.n	234e <ull_periph_setup+0x1be>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2596:	f011 fdbb 	bl	14110 <ull_disable_mark_get>
    259a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    259c:	4283      	cmp	r3, r0
    259e:	f43f af6d 	beq.w	247c <ull_periph_setup+0x2ec>
    25a2:	4a11      	ldr	r2, [pc, #68]	; (25e8 <ull_periph_setup+0x458>)
    25a4:	4914      	ldr	r1, [pc, #80]	; (25f8 <ull_periph_setup+0x468>)
    25a6:	4812      	ldr	r0, [pc, #72]	; (25f0 <ull_periph_setup+0x460>)
    25a8:	f240 239f 	movw	r3, #671	; 0x29f
    25ac:	f022 fcab 	bl	24f06 <printk>
    25b0:	4040      	eors	r0, r0
    25b2:	f380 8811 	msr	BASEPRI, r0
    25b6:	f04f 0003 	mov.w	r0, #3
    25ba:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    25bc:	e75e      	b.n	247c <ull_periph_setup+0x2ec>
    25be:	bf00      	nop
    25c0:	1afd498d 	.word	0x1afd498d
    25c4:	00000007 	.word	0x00000007
    25c8:	431bde83 	.word	0x431bde83
    25cc:	026259ff 	.word	0x026259ff
    25d0:	01c9c37f 	.word	0x01c9c37f
    25d4:	3b9aca00 	.word	0x3b9aca00
    25d8:	0001a5c5 	.word	0x0001a5c5
    25dc:	0001a595 	.word	0x0001a595
    25e0:	0001a601 	.word	0x0001a601
    25e4:	1afd498d 	.word	0x1afd498d
    25e8:	0002c8c8 	.word	0x0002c8c8
    25ec:	0002c7ac 	.word	0x0002c7ac
    25f0:	0002bfdc 	.word	0x0002bfdc
    25f4:	0002c208 	.word	0x0002c208
    25f8:	0002c924 	.word	0x0002c924
    25fc:	00000000 	.word	0x00000000

00002600 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2604:	b08b      	sub	sp, #44	; 0x2c
    2606:	460f      	mov	r7, r1
    2608:	9304      	str	r3, [sp, #16]
    260a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    260e:	9005      	str	r0, [sp, #20]
    2610:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2612:	2000      	movs	r0, #0
{
    2614:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    2618:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    261c:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    2620:	9303      	str	r3, [sp, #12]
    2622:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2624:	f012 fffa 	bl	1561c <ull_scan_is_disabled_get>
	if (!scan) {
    2628:	2800      	cmp	r0, #0
    262a:	f000 819d 	beq.w	2968 <ll_create_connection+0x368>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    262e:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    2632:	4605      	mov	r5, r0
    2634:	4650      	mov	r0, sl
    2636:	f00f f90b 	bl	11850 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    263a:	f1ba 0f00 	cmp.w	sl, #0
    263e:	d16a      	bne.n	2716 <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    2640:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    2642:	f105 021c 	add.w	r2, r5, #28
    2646:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    2648:	2b00      	cmp	r3, #0
    264a:	d06b      	beq.n	2724 <ll_create_connection+0x124>
		conn_lll = lll->conn;
    264c:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    2650:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    2654:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2658:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    265c:	f000 0007 	and.w	r0, r0, #7
    2660:	f01a f9d6 	bl	1ca10 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2664:	f8b8 1040 	ldrh.w	r1, [r8, #64]	; 0x40
    2668:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    266c:	4401      	add	r1, r0
    266e:	f8b8 0042 	ldrh.w	r0, [r8, #66]	; 0x42
    2672:	4401      	add	r1, r0
    2674:	48c6      	ldr	r0, [pc, #792]	; (2990 <ll_create_connection+0x390>)
    2676:	a3c4      	add	r3, pc, #784	; (adr r3, 2988 <ll_create_connection+0x388>)
    2678:	e9d3 2300 	ldrd	r2, r3, [r3]
    267c:	fba1 0100 	umull	r0, r1, r1, r0
    2680:	f7fe f97c 	bl	97c <__aeabi_uldivmod>
    2684:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    2688:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    268a:	4630      	mov	r0, r6
    268c:	f019 f9b6 	bl	1b9fc <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    2690:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2694:	f36f 0341 	bfc	r3, #1, #1
    2698:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    269c:	23ff      	movs	r3, #255	; 0xff
    269e:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    26a2:	b366      	cbz	r6, 26fe <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    26a4:	f1a9 0302 	sub.w	r3, r9, #2
    26a8:	2b01      	cmp	r3, #1
    26aa:	f240 8161 	bls.w	2970 <ll_create_connection+0x370>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    26ae:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    26b2:	9c04      	ldr	r4, [sp, #16]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
	lll->conn_timeout = timeout;

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    26b4:	9a05      	ldr	r2, [sp, #20]
	scan->own_addr_type = own_addr_type;
    26b6:	f369 0142 	bfi	r1, r9, #1, #2
    26ba:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    26be:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    26c2:	f364 0100 	bfi	r1, r4, #0, #1
    26c6:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    26ca:	9914      	ldr	r1, [sp, #80]	; 0x50
    26cc:	6809      	ldr	r1, [r1, #0]
    26ce:	6269      	str	r1, [r5, #36]	; 0x24
    26d0:	9914      	ldr	r1, [sp, #80]	; 0x50
    26d2:	8889      	ldrh	r1, [r1, #4]
    26d4:	8529      	strh	r1, [r5, #40]	; 0x28
	lll->conn_timeout = timeout;
    26d6:	9903      	ldr	r1, [sp, #12]
    26d8:	8629      	strh	r1, [r5, #48]	; 0x30
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    26da:	463b      	mov	r3, r7
    26dc:	f105 001c 	add.w	r0, r5, #28
    26e0:	2100      	movs	r1, #0
    26e2:	9600      	str	r6, [sp, #0]
    26e4:	f7ff f8d0 	bl	1888 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    26e8:	f01a fb32 	bl	1cd50 <lll_clock_wait>
	if (err) {
    26ec:	2800      	cmp	r0, #0
    26ee:	f040 815b 	bne.w	29a8 <ll_create_connection+0x3a8>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    26f2:	4628      	mov	r0, r5
    26f4:	f7ff f8f4 	bl	18e0 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    26f8:	b00b      	add	sp, #44	; 0x2c
    26fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    26fe:	f019 fdc1 	bl	1c284 <ull_filter_lll_rl_enabled>
    2702:	2800      	cmp	r0, #0
    2704:	d0ce      	beq.n	26a4 <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    2706:	9914      	ldr	r1, [sp, #80]	; 0x50
    2708:	9804      	ldr	r0, [sp, #16]
    270a:	4632      	mov	r2, r6
    270c:	f019 fae6 	bl	1bcdc <ull_filter_rl_find>
    2710:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    2714:	e7c6      	b.n	26a4 <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    2716:	2106      	movs	r1, #6
    2718:	f00d fcee 	bl	100f8 <mem_nz>
    271c:	2800      	cmp	r0, #0
    271e:	d18f      	bne.n	2640 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    2720:	2012      	movs	r0, #18
    2722:	e7e9      	b.n	26f8 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    2724:	f011 fc26 	bl	13f74 <ll_rx_link_alloc>
	if (!link) {
    2728:	9007      	str	r0, [sp, #28]
    272a:	2800      	cmp	r0, #0
    272c:	f000 8173 	beq.w	2a16 <ll_create_connection+0x416>
	conn = ll_conn_acquire();
    2730:	f013 fe22 	bl	16378 <ll_conn_acquire>
	if (!conn) {
    2734:	4604      	mov	r4, r0
    2736:	2800      	cmp	r0, #0
    2738:	f000 818f 	beq.w	2a5a <ll_create_connection+0x45a>
	err = util_aa_le32(conn_lll->access_addr);
    273c:	3020      	adds	r0, #32
    273e:	f00d fe7b 	bl	10438 <util_aa_le32>
	conn_lll = &conn->lll;
    2742:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    2746:	2800      	cmp	r0, #0
    2748:	f040 8158 	bne.w	29fc <ll_create_connection+0x3fc>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    274c:	2103      	movs	r1, #3
    274e:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2752:	f01a f80b 	bl	1c76c <lll_csrand_get>
	conn_lll->interval = interval;
    2756:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    2758:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
    275a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    275c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    2760:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    2764:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    2766:	2800      	cmp	r0, #0
    2768:	f000 8157 	beq.w	2a1a <ll_create_connection+0x41a>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    276c:	f104 0164 	add.w	r1, r4, #100	; 0x64
    2770:	f104 0268 	add.w	r2, r4, #104	; 0x68
    2774:	f00d fccc 	bl	10110 <memq_init>
	conn_lll->phy_tx = PHY_1M;
    2778:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    277c:	4a85      	ldr	r2, [pc, #532]	; (2994 <ll_create_connection+0x394>)
	conn_lll->phy_tx = PHY_1M;
    277e:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    2782:	f023 0307 	bic.w	r3, r3, #7
    2786:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    278a:	f043 0301 	orr.w	r3, r3, #1
    278e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
    2792:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    2796:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
    279a:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
    279e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    27a2:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
    27a6:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
    27aa:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
    27ae:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
    27b2:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    27b6:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    27ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
    27be:	f018 fbb1 	bl	1af24 <ull_chan_map_get>
    27c2:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    27c6:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    27ca:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    27cc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    27d0:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    27d4:	f019 ffca 	bl	1c76c <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    27d8:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    27dc:	4b6e      	ldr	r3, [pc, #440]	; (2998 <ll_create_connection+0x398>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    27de:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    27e2:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    27e4:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    27e8:	fba3 1302 	umull	r1, r3, r3, r2
    27ec:	08db      	lsrs	r3, r3, #3
    27ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    27f2:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    27f6:	3305      	adds	r3, #5
    27f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    27fc:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2800:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    2802:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
    2806:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    280a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    280e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    2812:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->central.initiated = 0;
    2816:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    281a:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    281e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2822:	4b5e      	ldr	r3, [pc, #376]	; (299c <ll_create_connection+0x39c>)
	conn->apto_expire = 0U;
    2824:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2828:	fb02 f101 	mul.w	r1, r2, r1
    282c:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    282e:	440b      	add	r3, r1
    2830:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2834:	495a      	ldr	r1, [pc, #360]	; (29a0 <ll_create_connection+0x3a0>)
	conn->appto_expire = 0U;
    2836:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    283a:	4411      	add	r1, r2
    283c:	fbb1 f1f2 	udiv	r1, r1, r2
    2840:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2844:	f242 7110 	movw	r1, #10000	; 0x2710
    2848:	fb01 210c 	mla	r1, r1, ip, r2
    284c:	3901      	subs	r1, #1
    284e:	fbb1 f2f2 	udiv	r2, r1, r2
    2852:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    2856:	2206      	movs	r2, #6
    2858:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    285c:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    285e:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2860:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2862:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2866:	dd02      	ble.n	286e <ll_create_connection+0x26e>
    2868:	3a06      	subs	r2, #6
    286a:	1a12      	subs	r2, r2, r0
    286c:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    286e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2872:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2876:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    287a:	f023 0307 	bic.w	r3, r3, #7
    287e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2882:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
    2886:	f884 b0e6 	strb.w	fp, [r4, #230]	; 0xe6
	conn->llcp_rx = NULL;
    288a:	f8c4 b108 	str.w	fp, [r4, #264]	; 0x108
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    288e:	f8a4 b10c 	strh.w	fp, [r4, #268]	; 0x10c
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    2892:	f8a4 b120 	strh.w	fp, [r4, #288]	; 0x120
	conn->llcp_feature.features_conn = ll_feat_get();
    2896:	f010 fe2f 	bl	134f8 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    289a:	9b07      	ldr	r3, [sp, #28]
    289c:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    28a0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    28a4:	f8a4 b138 	strh.w	fp, [r4, #312]	; 0x138
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    28a8:	f023 0303 	bic.w	r3, r3, #3
    28ac:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    28b0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    28b4:	f8a4 b140 	strh.w	fp, [r4, #320]	; 0x140
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    28b8:	f023 0318 	bic.w	r3, r3, #24
    28bc:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    28c0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_terminate.reason_final = 0U;
    28c4:	f884 b143 	strb.w	fp, [r4, #323]	; 0x143
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    28c8:	f023 0307 	bic.w	r3, r3, #7
    28cc:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->llcp_conn_param.disabled = 0U;
    28d0:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    28d4:	f8a4 b164 	strh.w	fp, [r4, #356]	; 0x164
	conn->llcp_conn_param.disabled = 0U;
    28d8:	f36b 1345 	bfi	r3, fp, #5, #1
    28dc:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_length.disabled = 0U;
    28e0:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_conn_param.req = 0U;
    28e4:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.disabled = 0U;
    28e8:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    28ec:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    28ee:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_feature.features_peer = 0;
    28f2:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    28f4:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
	conn->llcp_feature.features_peer = 0;
    28f8:	e9c4 234c 	strd	r2, r3, [r4, #304]	; 0x130
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    28fc:	f8a4 b1ac 	strh.w	fp, [r4, #428]	; 0x1ac
	conn->llcp_length.cache.tx_octets = 0U;
    2900:	f8a4 b1b8 	strh.w	fp, [r4, #440]	; 0x1b8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    2904:	f014 f880 	bl	16a08 <ull_conn_default_tx_octets_get>
    2908:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
    290c:	f014 f882 	bl	16a14 <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    2910:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2914:	4b23      	ldr	r3, [pc, #140]	; (29a4 <ll_create_connection+0x3a4>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    2916:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    291a:	4013      	ands	r3, r2
    291c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    2920:	f014 f87e 	bl	16a20 <ull_conn_default_phy_tx_get>
    2924:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    2928:	f360 0302 	bfi	r3, r0, #0, #3
    292c:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2930:	f014 f87c 	bl	16a2c <ull_conn_default_phy_rx_get>
    2934:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2938:	f8c4 b1c4 	str.w	fp, [r4, #452]	; 0x1c4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    293c:	f360 03c5 	bfi	r3, r0, #3, #3
    2940:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->ull.ticks_prepare_to_start =
    2944:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    2946:	e9c4 bb74 	strd	fp, fp, [r4, #464]	; 0x1d0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    294a:	e9c4 bb72 	strd	fp, fp, [r4, #456]	; 0x1c8
	conn->ull.ticks_active_to_start = 0U;
    294e:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    2952:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    2956:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    2958:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    295c:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    2960:	f884 b000 	strb.w	fp, [r4]
    2964:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    2966:	e675      	b.n	2654 <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    2968:	200c      	movs	r0, #12
}
    296a:	b00b      	add	sp, #44	; 0x2c
    296c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    2970:	2000      	movs	r0, #0
    2972:	f019 f867 	bl	1ba44 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    2976:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    297a:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    297e:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    2980:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    2984:	e693      	b.n	26ae <ll_create_connection+0xae>
    2986:	bf00      	nop
    2988:	1afd498d 	.word	0x1afd498d
    298c:	00000007 	.word	0x00000007
    2990:	3b9aca00 	.word	0x3b9aca00
    2994:	01480148 	.word	0x01480148
    2998:	aaaaaaab 	.word	0xaaaaaaab
    299c:	01c9c37f 	.word	0x01c9c37f
    29a0:	026259ff 	.word	0x026259ff
    29a4:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    29a8:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    29aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
    29ac:	b163      	cbz	r3, 29c8 <ll_create_connection+0x3c8>
    29ae:	4a2d      	ldr	r2, [pc, #180]	; (2a64 <ll_create_connection+0x464>)
    29b0:	492d      	ldr	r1, [pc, #180]	; (2a68 <ll_create_connection+0x468>)
    29b2:	482e      	ldr	r0, [pc, #184]	; (2a6c <ll_create_connection+0x46c>)
    29b4:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    29b8:	f022 faa5 	bl	24f06 <printk>
    29bc:	4040      	eors	r0, r0
    29be:	f380 8811 	msr	BASEPRI, r0
    29c2:	f04f 0003 	mov.w	r0, #3
    29c6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    29c8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    29cc:	f104 0048 	add.w	r0, r4, #72	; 0x48
    29d0:	f00d fba2 	bl	10118 <memq_deinit>
	LL_ASSERT(link);
    29d4:	4606      	mov	r6, r0
    29d6:	2800      	cmp	r0, #0
    29d8:	d031      	beq.n	2a3e <ll_create_connection+0x43e>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    29da:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    29dc:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    29de:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
	LL_ASSERT(link);
    29e2:	b1f4      	cbz	r4, 2a22 <ll_create_connection+0x422>

	ll_rx_link_release(link);
    29e4:	4620      	mov	r0, r4
    29e6:	f011 facb 	bl	13f80 <ll_rx_link_release>

	ll_conn_release(conn);
    29ea:	4638      	mov	r0, r7
    29ec:	f013 fcca 	bl	16384 <ll_conn_release>
	scan->lll.conn = NULL;
    29f0:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    29f2:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    29f4:	622b      	str	r3, [r5, #32]
}
    29f6:	b00b      	add	sp, #44	; 0x2c
    29f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    29fc:	4a19      	ldr	r2, [pc, #100]	; (2a64 <ll_create_connection+0x464>)
    29fe:	491c      	ldr	r1, [pc, #112]	; (2a70 <ll_create_connection+0x470>)
    2a00:	481a      	ldr	r0, [pc, #104]	; (2a6c <ll_create_connection+0x46c>)
    2a02:	23bf      	movs	r3, #191	; 0xbf
    2a04:	f022 fa7f 	bl	24f06 <printk>
    2a08:	4040      	eors	r0, r0
    2a0a:	f380 8811 	msr	BASEPRI, r0
    2a0e:	f04f 0003 	mov.w	r0, #3
    2a12:	df02      	svc	2
    2a14:	e69a      	b.n	274c <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2a16:	2007      	movs	r0, #7
    2a18:	e66e      	b.n	26f8 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    2a1a:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2a1e:	6760      	str	r0, [r4, #116]	; 0x74
    2a20:	e6a4      	b.n	276c <ll_create_connection+0x16c>
	LL_ASSERT(link);
    2a22:	4a10      	ldr	r2, [pc, #64]	; (2a64 <ll_create_connection+0x464>)
    2a24:	4913      	ldr	r1, [pc, #76]	; (2a74 <ll_create_connection+0x474>)
    2a26:	4811      	ldr	r0, [pc, #68]	; (2a6c <ll_create_connection+0x46c>)
    2a28:	f240 43c1 	movw	r3, #1217	; 0x4c1
    2a2c:	f022 fa6b 	bl	24f06 <printk>
    2a30:	4040      	eors	r0, r0
    2a32:	f380 8811 	msr	BASEPRI, r0
    2a36:	f04f 0003 	mov.w	r0, #3
    2a3a:	df02      	svc	2
    2a3c:	e7d2      	b.n	29e4 <ll_create_connection+0x3e4>
	LL_ASSERT(link);
    2a3e:	4a09      	ldr	r2, [pc, #36]	; (2a64 <ll_create_connection+0x464>)
    2a40:	490c      	ldr	r1, [pc, #48]	; (2a74 <ll_create_connection+0x474>)
    2a42:	480a      	ldr	r0, [pc, #40]	; (2a6c <ll_create_connection+0x46c>)
    2a44:	f240 43ba 	movw	r3, #1210	; 0x4ba
    2a48:	f022 fa5d 	bl	24f06 <printk>
    2a4c:	4040      	eors	r0, r0
    2a4e:	f380 8811 	msr	BASEPRI, r0
    2a52:	f04f 0003 	mov.w	r0, #3
    2a56:	df02      	svc	2
    2a58:	e7bf      	b.n	29da <ll_create_connection+0x3da>
		ll_rx_link_release(link);
    2a5a:	9807      	ldr	r0, [sp, #28]
    2a5c:	f011 fa90 	bl	13f80 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2a60:	2007      	movs	r0, #7
    2a62:	e649      	b.n	26f8 <ll_create_connection+0xf8>
    2a64:	0002c968 	.word	0x0002c968
    2a68:	0002c5d4 	.word	0x0002c5d4
    2a6c:	0002bfdc 	.word	0x0002bfdc
    2a70:	0002c354 	.word	0x0002c354
    2a74:	0002c724 	.word	0x0002c724

00002a78 <ull_central_setup>:
{
    2a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2a7c:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
    2a7e:	f890 801c 	ldrb.w	r8, [r0, #28]
    2a82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2a84:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
    2a86:	b08d      	sub	sp, #52	; 0x34
	chan_sel = pdu_tx->chan_sel;
    2a88:	f3c8 1b40 	ubfx	fp, r8, #5, #1
    2a8c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2a90:	07e3      	lsls	r3, r4, #31
	peer_addr_type = pdu_tx->rx_addr;
    2a92:	f3c8 16c0 	ubfx	r6, r8, #7, #1
{
    2a96:	4689      	mov	r9, r1
    2a98:	4615      	mov	r5, r2
    2a9a:	900a      	str	r0, [sp, #40]	; 0x28
	chan_sel = pdu_tx->chan_sel;
    2a9c:	46d8      	mov	r8, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2a9e:	f100 80f9 	bmi.w	2c94 <ull_central_setup+0x21c>
	cc->status = 0U;
    2aa2:	2300      	movs	r3, #0
    2aa4:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    2aa6:	f899 3012 	ldrb.w	r3, [r9, #18]
	uint8_t rl_idx = ftr->rl_idx;
    2aaa:	f899 0011 	ldrb.w	r0, [r9, #17]
	if (ftr->lrpa_used) {
    2aae:	f013 0301 	ands.w	r3, r3, #1
    2ab2:	bf1c      	itt	ne
    2ab4:	f8d4 301e 	ldrne.w	r3, [r4, #30]
    2ab8:	f8c4 302b 	strne.w	r3, [r4, #43]	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    2abc:	f104 022b 	add.w	r2, r4, #43	; 0x2b
    2ac0:	bf14      	ite	ne
    2ac2:	8c63      	ldrhne	r3, [r4, #34]	; 0x22
__ssp_bos_icheck3(memset, void *, int)
    2ac4:	f8c4 302b 	streq.w	r3, [r4, #43]	; 0x2b
	if (rl_idx != FILTER_IDX_NONE) {
    2ac8:	28ff      	cmp	r0, #255	; 0xff
    2aca:	8093      	strh	r3, [r2, #4]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2acc:	f104 0725 	add.w	r7, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2ad0:	f104 021f 	add.w	r2, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    2ad4:	f040 80d0 	bne.w	2c78 <ull_central_setup+0x200>
    2ad8:	2300      	movs	r3, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2ada:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    2ade:	980a      	ldr	r0, [sp, #40]	; 0x28
__ssp_bos_icheck3(memset, void *, int)
    2ae0:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
    2ae4:	80bb      	strh	r3, [r7, #4]
		cc->peer_addr_type = peer_addr_type;
    2ae6:	77a6      	strb	r6, [r4, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2ae8:	f8c4 001f 	str.w	r0, [r4, #31]
    2aec:	8091      	strh	r1, [r2, #4]
	scan = HDR_LLL2ULL(ftr->param);
    2aee:	f8d9 3000 	ldr.w	r3, [r9]
    2af2:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    2af6:	89eb      	ldrh	r3, [r5, #14]
    2af8:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    2afa:	8a2b      	ldrh	r3, [r5, #16]
    2afc:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    2afe:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    2b02:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    2b04:	f01a f976 	bl	1cdf4 <lll_clock_sca_local_get>
    2b08:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    2b0c:	682e      	ldr	r6, [r5, #0]
	lll->handle = ll_conn_handle_get(conn);
    2b0e:	4630      	mov	r0, r6
    2b10:	f013 fc3e 	bl	16390 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    2b14:	f8d9 7004 	ldr.w	r7, [r9, #4]
	lll->handle = ll_conn_handle_get(conn);
    2b18:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    2b1a:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    2b1c:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    2b1e:	6820      	ldr	r0, [r4, #0]
    2b20:	f011 fa40 	bl	13fa4 <ll_rx_put>
		rx->handle = lll->handle;
    2b24:	89ab      	ldrh	r3, [r5, #12]
    2b26:	80fb      	strh	r3, [r7, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2b28:	231b      	movs	r3, #27
		link = rx->link;
    2b2a:	683c      	ldr	r4, [r7, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2b2c:	713b      	strb	r3, [r7, #4]
		if (chan_sel) {
    2b2e:	f1b8 0f00 	cmp.w	r8, #0
    2b32:	f040 80bd 	bne.w	2cb0 <ull_central_setup+0x238>
			cs->csa = 0x00;
    2b36:	f887 b01c 	strb.w	fp, [r7, #28]
	ll_rx_put(link, rx);
    2b3a:	4639      	mov	r1, r7
    2b3c:	4620      	mov	r0, r4
    2b3e:	f011 fa31 	bl	13fa4 <ll_rx_put>
	ll_rx_sched();
    2b42:	f011 fa39 	bl	13fb8 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    2b46:	6873      	ldr	r3, [r6, #4]
    2b48:	68b7      	ldr	r7, [r6, #8]
						      lll->phy_flags);
    2b4a:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2b4e:	f8b5 b00e 	ldrh.w	fp, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    2b52:	f8d9 400c 	ldr.w	r4, [r9, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    2b56:	429f      	cmp	r7, r3
    2b58:	bf38      	it	cc
    2b5a:	461f      	movcc	r7, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2b5c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2b60:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2b64:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2b68:	fb03 fb0b 	mul.w	fp, r3, fp
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2b6c:	f019 ff50 	bl	1ca10 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    2b70:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2b72:	2200      	movs	r2, #0
    2b74:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    2b76:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2b78:	2001      	movs	r0, #1
    2b7a:	f00d fb19 	bl	101b0 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    2b7e:	4650      	mov	r0, sl
    2b80:	f012 fd24 	bl	155cc <ull_scan_handle_get>
    2b84:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2b86:	4b52      	ldr	r3, [pc, #328]	; (2cd0 <ull_central_setup+0x258>)
    2b88:	f8cd a000 	str.w	sl, [sp]
    2b8c:	b2d2      	uxtb	r2, r2
    2b8e:	2101      	movs	r1, #1
    2b90:	2000      	movs	r0, #0
    2b92:	f00e fd95 	bl	116c0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2b96:	f030 0302 	bics.w	r3, r0, #2
    2b9a:	d00c      	beq.n	2bb6 <ull_central_setup+0x13e>
    2b9c:	4a4d      	ldr	r2, [pc, #308]	; (2cd4 <ull_central_setup+0x25c>)
    2b9e:	494e      	ldr	r1, [pc, #312]	; (2cd8 <ull_central_setup+0x260>)
    2ba0:	484e      	ldr	r0, [pc, #312]	; (2cdc <ull_central_setup+0x264>)
    2ba2:	f240 33c9 	movw	r3, #969	; 0x3c9
    2ba6:	f022 f9ae 	bl	24f06 <printk>
    2baa:	4040      	eors	r0, r0
    2bac:	f380 8811 	msr	BASEPRI, r0
    2bb0:	f04f 0003 	mov.w	r0, #3
    2bb4:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2bb6:	2500      	movs	r5, #0
    2bb8:	462b      	mov	r3, r5
    2bba:	2203      	movs	r2, #3
    2bbc:	2101      	movs	r1, #1
    2bbe:	9500      	str	r5, [sp, #0]
    2bc0:	4628      	mov	r0, r5
    2bc2:	f00e fd7d 	bl	116c0 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2bc6:	4630      	mov	r0, r6
    2bc8:	f013 fbe2 	bl	16390 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2bcc:	f8d9 3008 	ldr.w	r3, [r9, #8]
    2bd0:	9606      	str	r6, [sp, #24]
    2bd2:	f1a3 0809 	sub.w	r8, r3, #9
    2bd6:	4b42      	ldr	r3, [pc, #264]	; (2ce0 <ull_central_setup+0x268>)
    2bd8:	9307      	str	r3, [sp, #28]
    2bda:	4b42      	ldr	r3, [pc, #264]	; (2ce4 <ull_central_setup+0x26c>)
    2bdc:	9305      	str	r3, [sp, #20]
    2bde:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2be2:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2ce8 <ull_central_setup+0x270>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2be6:	9308      	str	r3, [sp, #32]
    2be8:	6933      	ldr	r3, [r6, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2bea:	fbab b609 	umull	fp, r6, fp, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2bee:	e9cd 5303 	strd	r5, r3, [sp, #12]
    2bf2:	eba8 0807 	sub.w	r8, r8, r7
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2bf6:	a334      	add	r3, pc, #208	; (adr r3, 2cc8 <ull_central_setup+0x250>)
    2bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2bfc:	1d47      	adds	r7, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2bfe:	4631      	mov	r1, r6
    2c00:	4658      	mov	r0, fp
    2c02:	f7fd febb 	bl	97c <__aeabi_uldivmod>
    2c06:	4610      	mov	r0, r2
    2c08:	4619      	mov	r1, r3
    2c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2c0e:	2300      	movs	r3, #0
    2c10:	f7fd feb4 	bl	97c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c14:	a32c      	add	r3, pc, #176	; (adr r3, 2cc8 <ull_central_setup+0x250>)
    2c16:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2c1a:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c1c:	4631      	mov	r1, r6
    2c1e:	4658      	mov	r0, fp
    2c20:	f7fd feac 	bl	97c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2c24:	a328      	add	r3, pc, #160	; (adr r3, 2cc8 <ull_central_setup+0x250>)
    2c26:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c2a:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2c2c:	fba4 0109 	umull	r0, r1, r4, r9
    2c30:	f7fd fea4 	bl	97c <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2c34:	b2ff      	uxtb	r7, r7
    2c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2c3a:	9000      	str	r0, [sp, #0]
    2c3c:	4643      	mov	r3, r8
    2c3e:	463a      	mov	r2, r7
    2c40:	2101      	movs	r1, #1
    2c42:	4628      	mov	r0, r5
    2c44:	f00e fcb2 	bl	115ac <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2c48:	f030 0302 	bics.w	r3, r0, #2
    2c4c:	d00c      	beq.n	2c68 <ull_central_setup+0x1f0>
    2c4e:	4a21      	ldr	r2, [pc, #132]	; (2cd4 <ull_central_setup+0x25c>)
    2c50:	4921      	ldr	r1, [pc, #132]	; (2cd8 <ull_central_setup+0x260>)
    2c52:	4822      	ldr	r0, [pc, #136]	; (2cdc <ull_central_setup+0x264>)
    2c54:	f240 33fa 	movw	r3, #1018	; 0x3fa
    2c58:	f022 f955 	bl	24f06 <printk>
    2c5c:	4040      	eors	r0, r0
    2c5e:	f380 8811 	msr	BASEPRI, r0
    2c62:	f04f 0003 	mov.w	r0, #3
    2c66:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2c68:	2201      	movs	r2, #1
    2c6a:	2102      	movs	r1, #2
    2c6c:	4610      	mov	r0, r2
}
    2c6e:	b00d      	add	sp, #52	; 0x34
    2c70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2c74:	f00d ba9c 	b.w	101b0 <mayfly_enable>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2c78:	f104 011e 	add.w	r1, r4, #30
    2c7c:	f018 fba4 	bl	1b3c8 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2c80:	7fa3      	ldrb	r3, [r4, #30]
    2c82:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    2c86:	980a      	ldr	r0, [sp, #40]	; 0x28
    2c88:	f8c4 0025 	str.w	r0, [r4, #37]	; 0x25
    2c8c:	3302      	adds	r3, #2
    2c8e:	77a3      	strb	r3, [r4, #30]
    2c90:	80ba      	strh	r2, [r7, #4]
    2c92:	e72c      	b.n	2aee <ull_central_setup+0x76>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2c94:	4a0f      	ldr	r2, [pc, #60]	; (2cd4 <ull_central_setup+0x25c>)
    2c96:	4915      	ldr	r1, [pc, #84]	; (2cec <ull_central_setup+0x274>)
    2c98:	4810      	ldr	r0, [pc, #64]	; (2cdc <ull_central_setup+0x264>)
    2c9a:	f44f 7352 	mov.w	r3, #840	; 0x348
    2c9e:	f022 f932 	bl	24f06 <printk>
    2ca2:	4040      	eors	r0, r0
    2ca4:	f380 8811 	msr	BASEPRI, r0
    2ca8:	f04f 0003 	mov.w	r0, #3
    2cac:	df02      	svc	2
    2cae:	e6f8      	b.n	2aa2 <ull_central_setup+0x2a>
			lll->data_chan_sel = 1;
    2cb0:	7f6b      	ldrb	r3, [r5, #29]
    2cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2cb6:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2cb8:	1d28      	adds	r0, r5, #4
    2cba:	f018 f981 	bl	1afc0 <lll_chan_id>
			cs->csa = 0x01;
    2cbe:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2cc0:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    2cc2:	773b      	strb	r3, [r7, #28]
    2cc4:	e739      	b.n	2b3a <ull_central_setup+0xc2>
    2cc6:	bf00      	nop
    2cc8:	1afd498d 	.word	0x1afd498d
    2ccc:	00000007 	.word	0x00000007
    2cd0:	0001a7cd 	.word	0x0001a7cd
    2cd4:	0002c968 	.word	0x0002c968
    2cd8:	0002c7ac 	.word	0x0002c7ac
    2cdc:	0002bfdc 	.word	0x0002bfdc
    2ce0:	0001a7d1 	.word	0x0001a7d1
    2ce4:	0001a801 	.word	0x0001a801
    2ce8:	3b9aca00 	.word	0x3b9aca00
    2cec:	0002c208 	.word	0x0002c208

00002cf0 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    2cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cf4:	b08f      	sub	sp, #60	; 0x3c
    2cf6:	461e      	mov	r6, r3
    2cf8:	9309      	str	r3, [sp, #36]	; 0x24
    2cfa:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    2cfc:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    2cfe:	1d0a      	adds	r2, r1, #4
    2d00:	f8df 8104 	ldr.w	r8, [pc, #260]	; 2e08 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    2d04:	f8df b104 	ldr.w	fp, [pc, #260]	; 2e0c <ull_sched_after_mstr_slot_get+0x11c>
    2d08:	f8df a104 	ldr.w	sl, [pc, #260]	; 2e10 <ull_sched_after_mstr_slot_get+0x120>
    2d0c:	f8df 9104 	ldr.w	r9, [pc, #260]	; 2e14 <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    2d10:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2d12:	2100      	movs	r1, #0
    2d14:	6031      	str	r1, [r6, #0]
{
    2d16:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    2d18:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    2d1c:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2d1e:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    2d20:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    2d22:	9106      	str	r1, [sp, #24]
    2d24:	af0d      	add	r7, sp, #52	; 0x34
    2d26:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    2d28:	2302      	movs	r3, #2
    2d2a:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    2d2c:	e9cd 8701 	strd	r8, r7, [sp, #4]
    2d30:	9600      	str	r6, [sp, #0]
    2d32:	462b      	mov	r3, r5
    2d34:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    2d38:	4621      	mov	r1, r4
    2d3a:	2000      	movs	r0, #0
    2d3c:	f00e fd02 	bl	11744 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    2d40:	2802      	cmp	r0, #2
    2d42:	d02d      	beq.n	2da0 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2d46:	2b00      	cmp	r3, #0
    2d48:	d130      	bne.n	2dac <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    2d4a:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2d4e:	2bff      	cmp	r3, #255	; 0xff
    2d50:	d03c      	beq.n	2dcc <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    2d52:	2b05      	cmp	r3, #5
    2d54:	d1e8      	bne.n	2d28 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    2d56:	2000      	movs	r0, #0
    2d58:	f013 fb22 	bl	163a0 <ll_conn_get>
		if (conn && !conn->lll.role) {
    2d5c:	2800      	cmp	r0, #0
    2d5e:	d0e3      	beq.n	2d28 <ull_sched_after_mstr_slot_get+0x38>
    2d60:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    2d64:	2b00      	cmp	r3, #0
    2d66:	dbdf      	blt.n	2d28 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    2d68:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    2d6a:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    2d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    2d6e:	29ff      	cmp	r1, #255	; 0xff
    2d70:	d00c      	beq.n	2d8c <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    2d72:	9906      	ldr	r1, [sp, #24]
    2d74:	9207      	str	r2, [sp, #28]
    2d76:	4618      	mov	r0, r3
    2d78:	9304      	str	r3, [sp, #16]
    2d7a:	f00e fd43 	bl	11804 <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    2d7e:	9b05      	ldr	r3, [sp, #20]
    2d80:	9a08      	ldr	r2, [sp, #32]
    2d82:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    2d84:	4288      	cmp	r0, r1
    2d86:	9b04      	ldr	r3, [sp, #16]
    2d88:	9a07      	ldr	r2, [sp, #28]
    2d8a:	d822      	bhi.n	2dd2 <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    2d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    2d90:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2d94:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    2d96:	e7c7      	b.n	2d28 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    2d98:	4621      	mov	r1, r4
    2d9a:	2000      	movs	r0, #0
    2d9c:	f00e fd18 	bl	117d0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    2da0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    2da2:	2b02      	cmp	r3, #2
    2da4:	d0f8      	beq.n	2d98 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    2da6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    2da8:	2b00      	cmp	r3, #0
    2daa:	d0ce      	beq.n	2d4a <ull_sched_after_mstr_slot_get+0x5a>
    2dac:	2373      	movs	r3, #115	; 0x73
    2dae:	465a      	mov	r2, fp
    2db0:	4651      	mov	r1, sl
    2db2:	4648      	mov	r0, r9
    2db4:	f022 f8a7 	bl	24f06 <printk>
    2db8:	4040      	eors	r0, r0
    2dba:	f380 8811 	msr	BASEPRI, r0
    2dbe:	f04f 0003 	mov.w	r0, #3
    2dc2:	df02      	svc	2
		if (ticker_id == 0xff) {
    2dc4:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    2dc8:	2bff      	cmp	r3, #255	; 0xff
    2dca:	d1c2      	bne.n	2d52 <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    2dcc:	9b04      	ldr	r3, [sp, #16]
    2dce:	2bff      	cmp	r3, #255	; 0xff
    2dd0:	d010      	beq.n	2df4 <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2dd2:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    2dd6:	4810      	ldr	r0, [pc, #64]	; (2e18 <ull_sched_after_mstr_slot_get+0x128>)
    2dd8:	4413      	add	r3, r2
    2dda:	fba3 0100 	umull	r0, r1, r3, r0
    2dde:	2207      	movs	r2, #7
    2de0:	fb02 1103 	mla	r1, r2, r3, r1
    2de4:	a306      	add	r3, pc, #24	; (adr r3, 2e00 <ull_sched_after_mstr_slot_get+0x110>)
    2de6:	e9d3 2300 	ldrd	r2, r3, [r3]
    2dea:	f7fd fdc7 	bl	97c <__aeabi_uldivmod>
    2dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    2df0:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    2df2:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    2df4:	b00f      	add	sp, #60	; 0x3c
    2df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2dfa:	bf00      	nop
    2dfc:	f3af 8000 	nop.w
    2e00:	3b9aca00 	.word	0x3b9aca00
    2e04:	00000000 	.word	0x00000000
    2e08:	0001aba9 	.word	0x0001aba9
    2e0c:	0002c9c0 	.word	0x0002c9c0
    2e10:	0002ca04 	.word	0x0002ca04
    2e14:	0002bfdc 	.word	0x0002bfdc
    2e18:	1afd498d 	.word	0x1afd498d
    2e1c:	00000000 	.word	0x00000000

00002e20 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    2e20:	b570      	push	{r4, r5, r6, lr}
    2e22:	b082      	sub	sp, #8
    2e24:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    2e26:	9201      	str	r2, [sp, #4]
{
    2e28:	4615      	mov	r5, r2
    2e2a:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    2e2c:	aa01      	add	r2, sp, #4
    2e2e:	2002      	movs	r0, #2
    2e30:	f7ff ff5e 	bl	2cf0 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    2e34:	6823      	ldr	r3, [r4, #0]
    2e36:	b30b      	cbz	r3, 2e7c <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    2e38:	9801      	ldr	r0, [sp, #4]
    2e3a:	1b43      	subs	r3, r0, r5
    2e3c:	021b      	lsls	r3, r3, #8
    2e3e:	d41f      	bmi.n	2e80 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    2e40:	4629      	mov	r1, r5
    2e42:	f00e fcdf 	bl	11804 <ticker_ticks_diff_get>
    2e46:	4a1a      	ldr	r2, [pc, #104]	; (2eb0 <after_mstr_offset_get+0x90>)
    2e48:	4603      	mov	r3, r0
    2e4a:	2107      	movs	r1, #7
    2e4c:	fba0 0202 	umull	r0, r2, r0, r2
    2e50:	fb01 2103 	mla	r1, r1, r3, r2
    2e54:	a314      	add	r3, pc, #80	; (adr r3, 2ea8 <after_mstr_offset_get+0x88>)
    2e56:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e5a:	f7fd fd8f 	bl	97c <__aeabi_uldivmod>
    2e5e:	6822      	ldr	r2, [r4, #0]
    2e60:	4402      	add	r2, r0
    2e62:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    2e64:	2a00      	cmp	r2, #0
    2e66:	db09      	blt.n	2e7c <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    2e68:	f240 40e2 	movw	r0, #1250	; 0x4e2
    2e6c:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    2e70:	4290      	cmp	r0, r2
    2e72:	d203      	bcs.n	2e7c <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    2e74:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    2e76:	4282      	cmp	r2, r0
    2e78:	d8fc      	bhi.n	2e74 <after_mstr_offset_get+0x54>
    2e7a:	6022      	str	r2, [r4, #0]
		}
	}
}
    2e7c:	b002      	add	sp, #8
    2e7e:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    2e80:	4601      	mov	r1, r0
    2e82:	4628      	mov	r0, r5
    2e84:	f00e fcbe 	bl	11804 <ticker_ticks_diff_get>
    2e88:	4a09      	ldr	r2, [pc, #36]	; (2eb0 <after_mstr_offset_get+0x90>)
    2e8a:	4603      	mov	r3, r0
    2e8c:	2107      	movs	r1, #7
    2e8e:	fba0 0202 	umull	r0, r2, r0, r2
    2e92:	fb01 2103 	mla	r1, r1, r3, r2
    2e96:	a304      	add	r3, pc, #16	; (adr r3, 2ea8 <after_mstr_offset_get+0x88>)
    2e98:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e9c:	f7fd fd6e 	bl	97c <__aeabi_uldivmod>
    2ea0:	6822      	ldr	r2, [r4, #0]
    2ea2:	1a12      	subs	r2, r2, r0
    2ea4:	6022      	str	r2, [r4, #0]
    2ea6:	e7dd      	b.n	2e64 <after_mstr_offset_get+0x44>
    2ea8:	3b9aca00 	.word	0x3b9aca00
    2eac:	00000000 	.word	0x00000000
    2eb0:	1afd498d 	.word	0x1afd498d
    2eb4:	00000000 	.word	0x00000000

00002eb8 <ull_sched_mfy_win_offset_select>:
{
    2eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2ebc:	f8b0 1194 	ldrh.w	r1, [r0, #404]	; 0x194
{
    2ec0:	b088      	sub	sp, #32
    2ec2:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2ec4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2ec8:	4847      	ldr	r0, [pc, #284]	; (2fe8 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2eca:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2ecc:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2ed0:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    2ed2:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2ed4:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    2ed8:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2edc:	fba1 0100 	umull	r0, r1, r1, r0
    2ee0:	a33f      	add	r3, pc, #252	; (adr r3, 2fe0 <ull_sched_mfy_win_offset_select+0x128>)
    2ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    2ee6:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2ee8:	f7fd fd48 	bl	97c <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    2eec:	f10d 030f 	add.w	r3, sp, #15
    2ef0:	9501      	str	r5, [sp, #4]
    2ef2:	9300      	str	r3, [sp, #0]
    2ef4:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    2ef8:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    2efa:	aa04      	add	r2, sp, #16
    2efc:	4620      	mov	r0, r4
    2efe:	2101      	movs	r1, #1
    2f00:	f017 fe54 	bl	1abac <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    2f04:	f89d 800f 	ldrb.w	r8, [sp, #15]
    2f08:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    2f0c:	fa5f fc8c 	uxtb.w	ip, ip
    2f10:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    2f14:	4630      	mov	r0, r6
    2f16:	f504 77ca 	add.w	r7, r4, #404	; 0x194
    2f1a:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    2f1e:	f504 76d0 	add.w	r6, r4, #416	; 0x1a0
			if (win_offset_s != 0xffff) {
    2f22:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    2f26:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    2f28:	f1b8 0f00 	cmp.w	r8, #0
    2f2c:	d00a      	beq.n	2f44 <ull_sched_mfy_win_offset_select+0x8c>
    2f2e:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    2f30:	4572      	cmp	r2, lr
    2f32:	d004      	beq.n	2f3e <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    2f34:	8819      	ldrh	r1, [r3, #0]
    2f36:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    2f38:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    2f3c:	d01d      	beq.n	2f7a <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
    2f3e:	3302      	adds	r3, #2
    2f40:	459c      	cmp	ip, r3
    2f42:	d1f5      	bne.n	2f30 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    2f44:	3702      	adds	r7, #2
    2f46:	42be      	cmp	r6, r7
    2f48:	d1ed      	bne.n	2f26 <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2f4a:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	} else if (!has_offset_s) {
    2f4e:	bb48      	cbnz	r0, 2fa4 <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    2f50:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    2f54:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2f58:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    2f5c:	0a10      	lsrs	r0, r2, #8
    2f5e:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
	dst[0] = val;
    2f62:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    2f64:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2f66:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    2f6a:	2204      	movs	r2, #4
    2f6c:	f362 0302 	bfi	r3, r2, #0, #3
    2f70:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    2f74:	b008      	add	sp, #32
    2f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    2f7a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    2f7e:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2f82:	fb02 f303 	mul.w	r3, r2, r3
    2f86:	0a10      	lsrs	r0, r2, #8
    2f88:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	dst[0] = val;
    2f8c:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    2f8e:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    2f90:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    2f94:	2204      	movs	r2, #4
    2f96:	f362 0302 	bfi	r3, r2, #0, #3
    2f9a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    2f9e:	b008      	add	sp, #32
    2fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    2fa4:	2203      	movs	r2, #3
    2fa6:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2faa:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2fae:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
    2fb2:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fb4:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    2fb8:	2011      	movs	r0, #17
    2fba:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2fbe:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2fc2:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2fc6:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2fc8:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    2fca:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    2fce:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    2fd0:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
}
    2fd4:	b008      	add	sp, #32
    2fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fda:	bf00      	nop
    2fdc:	f3af 8000 	nop.w
    2fe0:	1afd498d 	.word	0x1afd498d
    2fe4:	00000007 	.word	0x00000007
    2fe8:	3b9aca00 	.word	0x3b9aca00
    2fec:	00000000 	.word	0x00000000

00002ff0 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    2ff0:	b538      	push	{r3, r4, r5, lr}
    2ff2:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    2ff4:	f01a fd8e 	bl	1db14 <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    2ff8:	7da2      	ldrb	r2, [r4, #22]
    2ffa:	f3c2 0341 	ubfx	r3, r2, #1, #2
    2ffe:	3301      	adds	r3, #1
    3000:	f003 0303 	and.w	r3, r3, #3
    3004:	2b03      	cmp	r3, #3
    3006:	d034      	beq.n	3072 <isr_window+0x82>
    3008:	f363 0242 	bfi	r2, r3, #1, #2
    300c:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    300e:	f103 0025 	add.w	r0, r3, #37	; 0x25
    3012:	f019 fcbb 	bl	1c98c <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    3016:	6863      	ldr	r3, [r4, #4]
    3018:	b30b      	cbz	r3, 305e <isr_window+0x6e>
    301a:	6923      	ldr	r3, [r4, #16]
    301c:	b1fb      	cbz	r3, 305e <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    301e:	f01c fa65 	bl	1f4ec <radio_tmr_start_get>
    3022:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    3024:	f00e fbec 	bl	11800 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3028:	1cc1      	adds	r1, r0, #3
    302a:	2000      	movs	r0, #0
    302c:	f01c fa2c 	bl	1f488 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    3030:	f01c faa8 	bl	1f584 <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    3034:	f01c fa5a 	bl	1f4ec <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3038:	4629      	mov	r1, r5
    303a:	f00e fbe3 	bl	11804 <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    303e:	4912      	ldr	r1, [pc, #72]	; (3088 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3040:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3042:	2207      	movs	r2, #7
    3044:	fba0 0101 	umull	r0, r1, r0, r1
    3048:	fb02 1103 	mla	r1, r2, r3, r1
    304c:	a30c      	add	r3, pc, #48	; (adr r3, 3080 <isr_window+0x90>)
    304e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3052:	f7fd fc93 	bl	97c <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    3056:	6923      	ldr	r3, [r4, #16]
    3058:	1a1b      	subs	r3, r3, r0
    305a:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    305c:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    305e:	f00e fbcf 	bl	11800 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3062:	1cc1      	adds	r1, r0, #3
    3064:	2000      	movs	r0, #0
    3066:	f01c fa0f 	bl	1f488 <radio_tmr_start_tick>
}
    306a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    306e:	f01c ba89 	b.w	1f584 <radio_tmr_end_capture>
		lll->chan = 0U;
    3072:	f36f 0242 	bfc	r2, #1, #2
    3076:	75a2      	strb	r2, [r4, #22]
    3078:	2025      	movs	r0, #37	; 0x25
    307a:	e7ca      	b.n	3012 <isr_window+0x22>
    307c:	f3af 8000 	nop.w
    3080:	3b9aca00 	.word	0x3b9aca00
    3084:	00000000 	.word	0x00000000
    3088:	1afd498d 	.word	0x1afd498d
    308c:	00000000 	.word	0x00000000

00003090 <isr_rx>:
{
    3090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3094:	b087      	sub	sp, #28
    3096:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    3098:	f01c f80a 	bl	1f0b0 <radio_is_done>
	if (trx_done) {
    309c:	b2c0      	uxtb	r0, r0
    309e:	b950      	cbnz	r0, 30b6 <isr_rx+0x26>
	lll_isr_status_reset();
    30a0:	f019 fccc 	bl	1ca3c <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    30a4:	48be      	ldr	r0, [pc, #760]	; (33a0 <isr_rx+0x310>)
    30a6:	4621      	mov	r1, r4
    30a8:	f01b fedc 	bl	1ee64 <radio_isr_set>
}
    30ac:	b007      	add	sp, #28
    30ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    30b2:	f01b bfd3 	b.w	1f05c <radio_disable>
		crc_ok = radio_crc_is_valid();
    30b6:	f01c f81b 	bl	1f0f0 <radio_crc_is_valid>
    30ba:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    30bc:	f01c f936 	bl	1f32c <radio_filter_has_match>
    30c0:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    30c2:	f01c f93d 	bl	1f340 <radio_filter_match_get>
    30c6:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    30c8:	f01c fb52 	bl	1f770 <radio_ar_has_match>
    30cc:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    30ce:	f01c fb33 	bl	1f738 <radio_ar_match_get>
    30d2:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    30d4:	f01c f8ee 	bl	1f2b4 <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    30d8:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    30da:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    30dc:	f01c f8d0 	bl	1f280 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    30e0:	f019 fcac 	bl	1ca3c <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    30e4:	2d00      	cmp	r5, #0
    30e6:	d0dd      	beq.n	30a4 <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    30e8:	2001      	movs	r0, #1
    30ea:	f011 f8b7 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    30ee:	4605      	mov	r5, r0
    30f0:	2800      	cmp	r0, #0
    30f2:	f000 8191 	beq.w	3418 <isr_rx+0x388>
	rl_idx = devmatch_ok ?
    30f6:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    30fa:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    30fc:	f040 8183 	bne.w	3406 <isr_rx+0x376>
    3100:	2e00      	cmp	r6, #0
    3102:	f040 80e0 	bne.w	32c6 <isr_rx+0x236>
    3106:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    3108:	465a      	mov	r2, fp
    310a:	463b      	mov	r3, r7
    310c:	4631      	mov	r1, r6
    310e:	4620      	mov	r0, r4
    3110:	f01a ff2e 	bl	1df70 <lll_scan_isr_rx_check>
	if (has_adva &&
    3114:	2800      	cmp	r0, #0
    3116:	d0c5      	beq.n	30a4 <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    3118:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    311a:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    311c:	2100      	movs	r1, #0
    311e:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    3122:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    3126:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    312a:	2a00      	cmp	r2, #0
    312c:	f000 80e7 	beq.w	32fe <isr_rx+0x26e>
    3130:	6862      	ldr	r2, [r4, #4]
    3132:	f892 2020 	ldrb.w	r2, [r2, #32]
    3136:	0790      	lsls	r0, r2, #30
    3138:	f100 80e1 	bmi.w	32fe <isr_rx+0x26e>
    313c:	2907      	cmp	r1, #7
    313e:	d0b1      	beq.n	30a4 <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3140:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    3142:	0712      	lsls	r2, r2, #28
    3144:	f140 8176 	bpl.w	3434 <isr_rx+0x3a4>
    3148:	2900      	cmp	r1, #0
    314a:	f040 80c2 	bne.w	32d2 <isr_rx+0x242>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    314e:	7f6b      	ldrb	r3, [r5, #29]
    3150:	2b25      	cmp	r3, #37	; 0x25
    3152:	f200 8136 	bhi.w	33c2 <isr_rx+0x332>
			rx = ull_pdu_rx_alloc_peek(4);
    3156:	2004      	movs	r0, #4
    3158:	f011 f880 	bl	1425c <ull_pdu_rx_alloc_peek>
		if (!rx) {
    315c:	2800      	cmp	r0, #0
    315e:	d0a1      	beq.n	30a4 <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    3160:	f01c fa18 	bl	1f594 <radio_tmr_end_get>
		if (!lll->ticks_window) {
    3164:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    3166:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    3168:	b943      	cbnz	r3, 317c <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    316a:	8c23      	ldrh	r3, [r4, #32]
    316c:	f240 2271 	movw	r2, #625	; 0x271
    3170:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    3174:	fbb0 f2f3 	udiv	r2, r0, r3
    3178:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    317c:	6823      	ldr	r3, [r4, #0]
    317e:	691a      	ldr	r2, [r3, #16]
    3180:	4b88      	ldr	r3, [pc, #544]	; (33a4 <isr_rx+0x314>)
    3182:	2107      	movs	r1, #7
    3184:	fba2 0303 	umull	r0, r3, r2, r3
    3188:	fb01 3102 	mla	r1, r1, r2, r3
    318c:	a382      	add	r3, pc, #520	; (adr r3, 3398 <isr_rx+0x308>)
    318e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3192:	f7fd fbf3 	bl	97c <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    3196:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    319a:	4543      	cmp	r3, r8
    319c:	d382      	bcc.n	30a4 <isr_rx+0x14>
		radio_switch_complete_and_disable();
    319e:	f01c f861 	bl	1f264 <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    31a2:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    31a4:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    31a6:	f018 fecd 	bl	1bf44 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    31aa:	7de3      	ldrb	r3, [r4, #23]
    31ac:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    31ae:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    31b0:	f140 81e2 	bpl.w	3578 <isr_rx+0x4e8>
    31b4:	2800      	cmp	r0, #0
    31b6:	f000 81df 	beq.w	3578 <isr_rx+0x4e8>
			init_addr = lrpa->val;
    31ba:	4683      	mov	fp, r0
			init_tx_addr = 1;
    31bc:	f04f 0a01 	mov.w	sl, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    31c0:	f01b ffa4 	bl	1f10c <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    31c4:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    31c6:	aa05      	add	r2, sp, #20
    31c8:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    31ca:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    31ce:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    31d0:	4680      	mov	r8, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    31d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    31d6:	9200      	str	r2, [sp, #0]
    31d8:	4620      	mov	r0, r4
    31da:	2200      	movs	r2, #0
    31dc:	e9cd ab01 	strd	sl, fp, [sp, #4]
    31e0:	f01a fee0 	bl	1dfa4 <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    31e4:	4640      	mov	r0, r8
    31e6:	f01b ff17 	bl	1f018 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    31ea:	f01b ff57 	bl	1f09c <radio_is_ready>
    31ee:	2800      	cmp	r0, #0
    31f0:	f040 81dc 	bne.w	35ac <isr_rx+0x51c>
		radio_isr_set(isr_done_cleanup, lll);
    31f4:	486c      	ldr	r0, [pc, #432]	; (33a8 <isr_rx+0x318>)
    31f6:	4621      	mov	r1, r4
    31f8:	f01b fe34 	bl	1ee64 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    31fc:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    31fe:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    3200:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    3204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    3208:	f042 0201 	orr.w	r2, r2, #1
    320c:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    3210:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    3212:	f011 f841 	bl	14298 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    3216:	2216      	movs	r2, #22
    3218:	7102      	strb	r2, [r0, #4]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    321a:	f895 e01c 	ldrb.w	lr, [r5, #28]
		rx->hdr.handle = 0xffff;
    321e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3222:	4643      	mov	r3, r8
    3224:	80c2      	strh	r2, [r0, #6]
		rx = ull_pdu_rx_alloc();
    3226:	4682      	mov	sl, r0
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3228:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    322c:	f100 021c 	add.w	r2, r0, #28
    3230:	f108 0820 	add.w	r8, r8, #32
    3234:	681d      	ldr	r5, [r3, #0]
    3236:	6858      	ldr	r0, [r3, #4]
    3238:	6899      	ldr	r1, [r3, #8]
    323a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    323e:	f8c2 c00c 	str.w	ip, [r2, #12]
    3242:	3310      	adds	r3, #16
    3244:	4543      	cmp	r3, r8
    3246:	6015      	str	r5, [r2, #0]
    3248:	6050      	str	r0, [r2, #4]
    324a:	6091      	str	r1, [r2, #8]
    324c:	f102 0210 	add.w	r2, r2, #16
    3250:	d1f0      	bne.n	3234 <isr_rx+0x1a4>
    3252:	681b      	ldr	r3, [r3, #0]
    3254:	6013      	str	r3, [r2, #0]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3256:	f89a 301c 	ldrb.w	r3, [sl, #28]
		ftr->param = lll;
    325a:	f8ca 4008 	str.w	r4, [sl, #8]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    325e:	f36e 1345 	bfi	r3, lr, #5, #1
    3262:	f88a 301c 	strb.w	r3, [sl, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    3266:	f01c f941 	bl	1f4ec <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    326a:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    326c:	f8ca 0010 	str.w	r0, [sl, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3270:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    3272:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3274:	f01b fee0 	bl	1f038 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3278:	2e00      	cmp	r6, #0
    327a:	bf08      	it	eq
    327c:	27ff      	moveq	r7, #255	; 0xff
    327e:	f88a 7019 	strb.w	r7, [sl, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3282:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    3284:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3286:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    328a:	f8ca 5014 	str.w	r5, [sl, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    328e:	f000 817a 	beq.w	3586 <isr_rx+0x4f6>
    3292:	f1b9 0900 	subs.w	r9, r9, #0
    3296:	bf18      	it	ne
    3298:	f04f 0901 	movne.w	r9, #1
    329c:	f89a 301a 	ldrb.w	r3, [sl, #26]
    32a0:	f369 0300 	bfi	r3, r9, #0, #1
    32a4:	f88a 301a 	strb.w	r3, [sl, #26]
			ftr->extra = ull_pdu_rx_alloc();
    32a8:	f010 fff6 	bl	14298 <ull_pdu_rx_alloc>
    32ac:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    32ae:	4651      	mov	r1, sl
    32b0:	f8da 0000 	ldr.w	r0, [sl]
			ftr->extra = ull_pdu_rx_alloc();
    32b4:	f8ca 300c 	str.w	r3, [sl, #12]
		ull_rx_put(rx->hdr.link, rx);
    32b8:	f011 f804 	bl	142c4 <ull_rx_put>
		ull_rx_sched();
    32bc:	f011 f812 	bl	142e4 <ull_rx_sched>
}
    32c0:	b007      	add	sp, #28
    32c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    32c6:	fa5f f08a 	uxtb.w	r0, sl
    32ca:	f018 fec9 	bl	1c060 <ull_filter_lll_rl_irk_idx>
    32ce:	4607      	mov	r7, r0
    32d0:	e71a      	b.n	3108 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    32d2:	2901      	cmp	r1, #1
    32d4:	d115      	bne.n	3302 <isr_rx+0x272>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    32d6:	7f6b      	ldrb	r3, [r5, #29]
    32d8:	2b0c      	cmp	r3, #12
    32da:	f47f aee3 	bne.w	30a4 <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    32de:	7f2a      	ldrb	r2, [r5, #28]
    32e0:	9700      	str	r7, [sp, #0]
    32e2:	2300      	movs	r3, #0
    32e4:	9301      	str	r3, [sp, #4]
    32e6:	09d2      	lsrs	r2, r2, #7
    32e8:	f105 0324 	add.w	r3, r5, #36	; 0x24
    32ec:	4620      	mov	r0, r4
    32ee:	f01a fd91 	bl	1de14 <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    32f2:	2800      	cmp	r0, #0
    32f4:	f47f af2f 	bne.w	3156 <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    32f8:	7f29      	ldrb	r1, [r5, #28]
    32fa:	f001 010f 	and.w	r1, r1, #15
    32fe:	2900      	cmp	r1, #0
    3300:	d054      	beq.n	33ac <isr_rx+0x31c>
    3302:	2906      	cmp	r1, #6
    3304:	d052      	beq.n	33ac <isr_rx+0x31c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3306:	2902      	cmp	r1, #2
    3308:	f000 80a7 	beq.w	345a <isr_rx+0x3ca>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    330c:	2901      	cmp	r1, #1
    330e:	d158      	bne.n	33c2 <isr_rx+0x332>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    3310:	7f6b      	ldrb	r3, [r5, #29]
    3312:	2b0c      	cmp	r3, #12
    3314:	f47f aec6 	bne.w	30a4 <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    3318:	7f2a      	ldrb	r2, [r5, #28]
    331a:	9700      	str	r7, [sp, #0]
    331c:	f10d 0313 	add.w	r3, sp, #19
    3320:	9301      	str	r3, [sp, #4]
    3322:	09d2      	lsrs	r2, r2, #7
    3324:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3328:	2100      	movs	r1, #0
    332a:	4620      	mov	r0, r4
    332c:	f01a fd72 	bl	1de14 <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    3330:	2800      	cmp	r0, #0
    3332:	d046      	beq.n	33c2 <isr_rx+0x332>
		 (pdu_adv_rx->len != 0) &&
    3334:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    3336:	2b00      	cmp	r3, #0
    3338:	f43f aeb4 	beq.w	30a4 <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    333c:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    333e:	b12b      	cbz	r3, 334c <isr_rx+0x2bc>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    3340:	7f2b      	ldrb	r3, [r5, #28]
    3342:	f003 030f 	and.w	r3, r3, #15
    3346:	2b07      	cmp	r3, #7
    3348:	f47f aeac 	bne.w	30a4 <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    334c:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    334e:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    3352:	f010 ff83 	bl	1425c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    3356:	4605      	mov	r5, r0
    3358:	2800      	cmp	r0, #0
    335a:	f43f aea3 	beq.w	30a4 <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    335e:	f010 ff9b 	bl	14298 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    3362:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3366:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    3368:	2305      	movs	r3, #5
    336a:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    336c:	f1b8 0f00 	cmp.w	r8, #0
    3370:	d16f      	bne.n	3452 <isr_rx+0x3c2>
    3372:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    3374:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3376:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3378:	2e00      	cmp	r6, #0
    337a:	bf08      	it	eq
    337c:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    337e:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    3382:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3384:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3386:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3388:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    338a:	f010 ff9b 	bl	142c4 <ull_rx_put>
	ull_rx_sched();
    338e:	f010 ffa9 	bl	142e4 <ull_rx_sched>
	if (!err) {
    3392:	e687      	b.n	30a4 <isr_rx+0x14>
    3394:	f3af 8000 	nop.w
    3398:	3b9aca00 	.word	0x3b9aca00
    339c:	00000000 	.word	0x00000000
    33a0:	0001dbcd 	.word	0x0001dbcd
    33a4:	1afd498d 	.word	0x1afd498d
    33a8:	0001ddc5 	.word	0x0001ddc5
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    33ac:	7f6b      	ldrb	r3, [r5, #29]
    33ae:	2b25      	cmp	r3, #37	; 0x25
    33b0:	d807      	bhi.n	33c2 <isr_rx+0x332>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    33b2:	7da2      	ldrb	r2, [r4, #22]
    33b4:	0692      	lsls	r2, r2, #26
    33b6:	d502      	bpl.n	33be <isr_rx+0x32e>
		   !lll->conn) {
    33b8:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    33ba:	2a00      	cmp	r2, #0
    33bc:	d04f      	beq.n	345e <isr_rx+0x3ce>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    33be:	2b25      	cmp	r3, #37	; 0x25
    33c0:	d9b9      	bls.n	3336 <isr_rx+0x2a6>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    33c2:	7f2b      	ldrb	r3, [r5, #28]
    33c4:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    33c8:	2b04      	cmp	r3, #4
    33ca:	f47f ae6b 	bne.w	30a4 <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    33ce:	7f6b      	ldrb	r3, [r5, #29]
    33d0:	2b25      	cmp	r3, #37	; 0x25
    33d2:	f63f ae67 	bhi.w	30a4 <isr_rx+0x14>
		   (lll->state != 0U) &&
    33d6:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    33d8:	07d9      	lsls	r1, r3, #31
    33da:	f57f ae63 	bpl.w	30a4 <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    33de:	f01b fe95 	bl	1f10c <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    33e2:	7f2b      	ldrb	r3, [r5, #28]
    33e4:	7802      	ldrb	r2, [r0, #0]
    33e6:	f3c3 1380 	ubfx	r3, r3, #6, #1
    33ea:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    33ee:	f47f ae59 	bne.w	30a4 <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    33f2:	3008      	adds	r0, #8
    33f4:	2206      	movs	r2, #6
    33f6:	f105 011e 	add.w	r1, r5, #30
    33fa:	f027 fb1e 	bl	2aa3a <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    33fe:	2800      	cmp	r0, #0
    3400:	f47f ae50 	bne.w	30a4 <isr_rx+0x14>
    3404:	e796      	b.n	3334 <isr_rx+0x2a4>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    3406:	7da0      	ldrb	r0, [r4, #22]
    3408:	fa5f f189 	uxtb.w	r1, r9
    340c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    3410:	f018 fdbc 	bl	1bf8c <ull_filter_lll_rl_idx>
    3414:	4607      	mov	r7, r0
    3416:	e677      	b.n	3108 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    3418:	4a72      	ldr	r2, [pc, #456]	; (35e4 <isr_rx+0x554>)
    341a:	4973      	ldr	r1, [pc, #460]	; (35e8 <isr_rx+0x558>)
    341c:	4873      	ldr	r0, [pc, #460]	; (35ec <isr_rx+0x55c>)
    341e:	f240 23c3 	movw	r3, #707	; 0x2c3
    3422:	f021 fd70 	bl	24f06 <printk>
    3426:	4040      	eors	r0, r0
    3428:	f380 8811 	msr	BASEPRI, r0
    342c:	f04f 0003 	mov.w	r0, #3
    3430:	df02      	svc	2
    3432:	e660      	b.n	30f6 <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    3434:	2fff      	cmp	r7, #255	; 0xff
    3436:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    343a:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    343e:	d077      	beq.n	3530 <isr_rx+0x4a0>
		return (rl_idx == lll->rl_idx);
    3440:	7e23      	ldrb	r3, [r4, #24]
    3442:	1bdb      	subs	r3, r3, r7
    3444:	fab3 f383 	clz	r3, r3
    3448:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    344a:	2b00      	cmp	r3, #0
    344c:	f47f ae7c 	bne.w	3148 <isr_rx+0xb8>
    3450:	e755      	b.n	32fe <isr_rx+0x26e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3452:	f01b ff21 	bl	1f298 <radio_rssi_get>
    3456:	b2c0      	uxtb	r0, r0
    3458:	e78c      	b.n	3374 <isr_rx+0x2e4>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    345a:	7f6b      	ldrb	r3, [r5, #29]
    345c:	e7af      	b.n	33be <isr_rx+0x32e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    345e:	2096      	movs	r0, #150	; 0x96
    3460:	f01b ff84 	bl	1f36c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    3464:	2000      	movs	r0, #0
    3466:	f01b fe55 	bl	1f114 <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    346a:	2003      	movs	r0, #3
    346c:	f010 fef6 	bl	1425c <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    3470:	4681      	mov	r9, r0
    3472:	2800      	cmp	r0, #0
    3474:	f43f ae16 	beq.w	30a4 <isr_rx+0x14>
	ull_pdu_rx_alloc();
    3478:	f010 ff0e 	bl	14298 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    347c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3480:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    3484:	2305      	movs	r3, #5
    3486:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    348a:	f1b8 0f00 	cmp.w	r8, #0
    348e:	d16f      	bne.n	3570 <isr_rx+0x4e0>
    3490:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3492:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3494:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3498:	bf14      	ite	ne
    349a:	463b      	movne	r3, r7
    349c:	23ff      	moveq	r3, #255	; 0xff
    349e:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    34a2:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    34a6:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    34aa:	f36f 0341 	bfc	r3, #1, #1
    34ae:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    34b2:	4649      	mov	r1, r9
    34b4:	f010 ff06 	bl	142c4 <ull_rx_put>
	ull_rx_sched();
    34b8:	f010 ff14 	bl	142e4 <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    34bc:	f01b fe26 	bl	1f10c <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    34c0:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    34c2:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    34c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    34c8:	7832      	ldrb	r2, [r6, #0]
    34ca:	01db      	lsls	r3, r3, #7
    34cc:	f002 0270 	and.w	r2, r2, #112	; 0x70
    34d0:	f043 0303 	orr.w	r3, r3, #3
    34d4:	4313      	orrs	r3, r2
    34d6:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    34d8:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    34da:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    34dc:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    34de:	f018 fd31 	bl	1bf44 <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    34e2:	7de3      	ldrb	r3, [r4, #23]
    34e4:	079f      	lsls	r7, r3, #30
    34e6:	d550      	bpl.n	358a <isr_rx+0x4fa>
    34e8:	2800      	cmp	r0, #0
    34ea:	d04e      	beq.n	358a <isr_rx+0x4fa>
			pdu_tx->tx_addr = 1;
    34ec:	7832      	ldrb	r2, [r6, #0]
    34ee:	4633      	mov	r3, r6
    34f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    34f4:	f803 2b02 	strb.w	r2, [r3], #2
    34f8:	6802      	ldr	r2, [r0, #0]
    34fa:	f8c6 2002 	str.w	r2, [r6, #2]
    34fe:	8882      	ldrh	r2, [r0, #4]
    3500:	809a      	strh	r2, [r3, #4]
    3502:	f8d5 301e 	ldr.w	r3, [r5, #30]
    3506:	60b3      	str	r3, [r6, #8]
    3508:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    350a:	81b3      	strh	r3, [r6, #12]
		radio_pkt_tx_set(pdu_tx);
    350c:	4630      	mov	r0, r6
    350e:	f01b fd83 	bl	1f018 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    3512:	f01b fdc3 	bl	1f09c <radio_is_ready>
    3516:	2800      	cmp	r0, #0
    3518:	d156      	bne.n	35c8 <isr_rx+0x538>
		radio_tmr_end_capture();
    351a:	f01c f833 	bl	1f584 <radio_tmr_end_capture>
		lll->state = 1U;
    351e:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3520:	4833      	ldr	r0, [pc, #204]	; (35f0 <isr_rx+0x560>)
		lll->state = 1U;
    3522:	f043 0301 	orr.w	r3, r3, #1
    3526:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3528:	4621      	mov	r1, r4
    352a:	f01b fc9b 	bl	1ee64 <radio_isr_set>
	if (!err) {
    352e:	e6c7      	b.n	32c0 <isr_rx+0x230>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3530:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    3534:	aa05      	add	r2, sp, #20
    3536:	4651      	mov	r1, sl
    3538:	4648      	mov	r0, r9
    353a:	f018 fe47 	bl	1c1cc <ull_filter_lll_rl_addr_allowed>
    353e:	2800      	cmp	r0, #0
    3540:	f43f aeda 	beq.w	32f8 <isr_rx+0x268>
	return ((lll->adv_addr_type == addr_type) &&
    3544:	7de3      	ldrb	r3, [r4, #23]
    3546:	f003 0301 	and.w	r3, r3, #1
    354a:	454b      	cmp	r3, r9
    354c:	f47f aed4 	bne.w	32f8 <isr_rx+0x268>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    3550:	4651      	mov	r1, sl
    3552:	2206      	movs	r2, #6
    3554:	f104 0008 	add.w	r0, r4, #8
    3558:	f027 fa6f 	bl	2aa3a <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    355c:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    355e:	fab0 f380 	clz	r3, r0
    3562:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3564:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3568:	2b00      	cmp	r3, #0
    356a:	f47f aded 	bne.w	3148 <isr_rx+0xb8>
    356e:	e6c6      	b.n	32fe <isr_rx+0x26e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3570:	f01b fe92 	bl	1f298 <radio_rssi_get>
    3574:	b2c3      	uxtb	r3, r0
    3576:	e78c      	b.n	3492 <isr_rx+0x402>
			init_tx_addr = lll->init_addr_type;
    3578:	f894 a016 	ldrb.w	sl, [r4, #22]
			init_addr = lll->init_addr;
    357c:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    3580:	f3ca 1a80 	ubfx	sl, sl, #6, #1
			init_addr = lll->init_addr;
    3584:	e61c      	b.n	31c0 <isr_rx+0x130>
    3586:	4699      	mov	r9, r3
    3588:	e688      	b.n	329c <isr_rx+0x20c>
			pdu_tx->tx_addr = lll->init_addr_type;
    358a:	7da3      	ldrb	r3, [r4, #22]
    358c:	7832      	ldrb	r2, [r6, #0]
    358e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3592:	f363 1286 	bfi	r2, r3, #6, #1
    3596:	4633      	mov	r3, r6
    3598:	f803 2b02 	strb.w	r2, [r3], #2
    359c:	f8d4 2019 	ldr.w	r2, [r4, #25]
    35a0:	f8c6 2002 	str.w	r2, [r6, #2]
    35a4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
    35a8:	809a      	strh	r2, [r3, #4]
    35aa:	e7aa      	b.n	3502 <isr_rx+0x472>
		LL_ASSERT(!radio_is_ready());
    35ac:	4a0d      	ldr	r2, [pc, #52]	; (35e4 <isr_rx+0x554>)
    35ae:	4911      	ldr	r1, [pc, #68]	; (35f4 <isr_rx+0x564>)
    35b0:	480e      	ldr	r0, [pc, #56]	; (35ec <isr_rx+0x55c>)
    35b2:	f240 4391 	movw	r3, #1169	; 0x491
    35b6:	f021 fca6 	bl	24f06 <printk>
    35ba:	4040      	eors	r0, r0
    35bc:	f380 8811 	msr	BASEPRI, r0
    35c0:	f04f 0003 	mov.w	r0, #3
    35c4:	df02      	svc	2
    35c6:	e615      	b.n	31f4 <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    35c8:	4a06      	ldr	r2, [pc, #24]	; (35e4 <isr_rx+0x554>)
    35ca:	490a      	ldr	r1, [pc, #40]	; (35f4 <isr_rx+0x564>)
    35cc:	4807      	ldr	r0, [pc, #28]	; (35ec <isr_rx+0x55c>)
    35ce:	f240 5316 	movw	r3, #1302	; 0x516
    35d2:	f021 fc98 	bl	24f06 <printk>
    35d6:	4040      	eors	r0, r0
    35d8:	f380 8811 	msr	BASEPRI, r0
    35dc:	f04f 0003 	mov.w	r0, #3
    35e0:	df02      	svc	2
    35e2:	e79a      	b.n	351a <isr_rx+0x48a>
    35e4:	0002ce88 	.word	0x0002ce88
    35e8:	0002ce34 	.word	0x0002ce34
    35ec:	0002bfdc 	.word	0x0002bfdc
    35f0:	0001dbe1 	.word	0x0001dbe1
    35f4:	0002ce3c 	.word	0x0002ce3c

000035f8 <_dtoa_r>:
    35f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    35fc:	6a44      	ldr	r4, [r0, #36]	; 0x24
    35fe:	b099      	sub	sp, #100	; 0x64
    3600:	4616      	mov	r6, r2
    3602:	461f      	mov	r7, r3
    3604:	e9cd 6704 	strd	r6, r7, [sp, #16]
    3608:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    360c:	4605      	mov	r5, r0
    360e:	b974      	cbnz	r4, 362e <_dtoa_r+0x36>
    3610:	2010      	movs	r0, #16
    3612:	f01f ff3b 	bl	2348c <malloc>
    3616:	4602      	mov	r2, r0
    3618:	6268      	str	r0, [r5, #36]	; 0x24
    361a:	b920      	cbnz	r0, 3626 <_dtoa_r+0x2e>
    361c:	4ba8      	ldr	r3, [pc, #672]	; (38c0 <_dtoa_r+0x2c8>)
    361e:	21ea      	movs	r1, #234	; 0xea
    3620:	48a8      	ldr	r0, [pc, #672]	; (38c4 <_dtoa_r+0x2cc>)
    3622:	f020 ff91 	bl	24548 <__assert_func>
    3626:	e9c0 4401 	strd	r4, r4, [r0, #4]
    362a:	6004      	str	r4, [r0, #0]
    362c:	60c4      	str	r4, [r0, #12]
    362e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3630:	6819      	ldr	r1, [r3, #0]
    3632:	b151      	cbz	r1, 364a <_dtoa_r+0x52>
    3634:	685a      	ldr	r2, [r3, #4]
    3636:	604a      	str	r2, [r1, #4]
    3638:	2301      	movs	r3, #1
    363a:	4093      	lsls	r3, r2
    363c:	608b      	str	r3, [r1, #8]
    363e:	4628      	mov	r0, r5
    3640:	f020 fbae 	bl	23da0 <_Bfree>
    3644:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3646:	2200      	movs	r2, #0
    3648:	601a      	str	r2, [r3, #0]
    364a:	1e3b      	subs	r3, r7, #0
    364c:	bfb9      	ittee	lt
    364e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    3652:	9305      	strlt	r3, [sp, #20]
    3654:	2300      	movge	r3, #0
    3656:	f8c8 3000 	strge.w	r3, [r8]
    365a:	f8dd 9014 	ldr.w	r9, [sp, #20]
    365e:	4b9a      	ldr	r3, [pc, #616]	; (38c8 <_dtoa_r+0x2d0>)
    3660:	bfbc      	itt	lt
    3662:	2201      	movlt	r2, #1
    3664:	f8c8 2000 	strlt.w	r2, [r8]
    3668:	ea33 0309 	bics.w	r3, r3, r9
    366c:	d119      	bne.n	36a2 <_dtoa_r+0xaa>
    366e:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3670:	f242 730f 	movw	r3, #9999	; 0x270f
    3674:	6013      	str	r3, [r2, #0]
    3676:	f3c9 0313 	ubfx	r3, r9, #0, #20
    367a:	4333      	orrs	r3, r6
    367c:	f000 8580 	beq.w	4180 <_dtoa_r+0xb88>
    3680:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3682:	b953      	cbnz	r3, 369a <_dtoa_r+0xa2>
    3684:	4b91      	ldr	r3, [pc, #580]	; (38cc <_dtoa_r+0x2d4>)
    3686:	e022      	b.n	36ce <_dtoa_r+0xd6>
    3688:	4b91      	ldr	r3, [pc, #580]	; (38d0 <_dtoa_r+0x2d8>)
    368a:	9303      	str	r3, [sp, #12]
    368c:	3308      	adds	r3, #8
    368e:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3690:	6013      	str	r3, [r2, #0]
    3692:	9803      	ldr	r0, [sp, #12]
    3694:	b019      	add	sp, #100	; 0x64
    3696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    369a:	4b8c      	ldr	r3, [pc, #560]	; (38cc <_dtoa_r+0x2d4>)
    369c:	9303      	str	r3, [sp, #12]
    369e:	3303      	adds	r3, #3
    36a0:	e7f5      	b.n	368e <_dtoa_r+0x96>
    36a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    36a6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    36aa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    36ae:	2200      	movs	r2, #0
    36b0:	2300      	movs	r3, #0
    36b2:	f7fd f9d3 	bl	a5c <__aeabi_dcmpeq>
    36b6:	4680      	mov	r8, r0
    36b8:	b158      	cbz	r0, 36d2 <_dtoa_r+0xda>
    36ba:	9a24      	ldr	r2, [sp, #144]	; 0x90
    36bc:	2301      	movs	r3, #1
    36be:	6013      	str	r3, [r2, #0]
    36c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    36c2:	2b00      	cmp	r3, #0
    36c4:	f000 8559 	beq.w	417a <_dtoa_r+0xb82>
    36c8:	4882      	ldr	r0, [pc, #520]	; (38d4 <_dtoa_r+0x2dc>)
    36ca:	6018      	str	r0, [r3, #0]
    36cc:	1e43      	subs	r3, r0, #1
    36ce:	9303      	str	r3, [sp, #12]
    36d0:	e7df      	b.n	3692 <_dtoa_r+0x9a>
    36d2:	ab16      	add	r3, sp, #88	; 0x58
    36d4:	9301      	str	r3, [sp, #4]
    36d6:	ab17      	add	r3, sp, #92	; 0x5c
    36d8:	9300      	str	r3, [sp, #0]
    36da:	4628      	mov	r0, r5
    36dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    36e0:	f020 fdd6 	bl	24290 <__d2b>
    36e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
    36e8:	4683      	mov	fp, r0
    36ea:	2c00      	cmp	r4, #0
    36ec:	d07e      	beq.n	37ec <_dtoa_r+0x1f4>
    36ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    36f0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    36f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    36f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    36fc:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    3700:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    3704:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    3708:	4b73      	ldr	r3, [pc, #460]	; (38d8 <_dtoa_r+0x2e0>)
    370a:	2200      	movs	r2, #0
    370c:	f7fc fd4c 	bl	1a8 <__aeabi_dsub>
    3710:	a365      	add	r3, pc, #404	; (adr r3, 38a8 <_dtoa_r+0x2b0>)
    3712:	e9d3 2300 	ldrd	r2, r3, [r3]
    3716:	f7fc feff 	bl	518 <__aeabi_dmul>
    371a:	a365      	add	r3, pc, #404	; (adr r3, 38b0 <_dtoa_r+0x2b8>)
    371c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3720:	f7fc fd44 	bl	1ac <__adddf3>
    3724:	4606      	mov	r6, r0
    3726:	4620      	mov	r0, r4
    3728:	460f      	mov	r7, r1
    372a:	f7fc fe8b 	bl	444 <__aeabi_i2d>
    372e:	a362      	add	r3, pc, #392	; (adr r3, 38b8 <_dtoa_r+0x2c0>)
    3730:	e9d3 2300 	ldrd	r2, r3, [r3]
    3734:	f7fc fef0 	bl	518 <__aeabi_dmul>
    3738:	4602      	mov	r2, r0
    373a:	460b      	mov	r3, r1
    373c:	4630      	mov	r0, r6
    373e:	4639      	mov	r1, r7
    3740:	f7fc fd34 	bl	1ac <__adddf3>
    3744:	4606      	mov	r6, r0
    3746:	460f      	mov	r7, r1
    3748:	f7fd f9d0 	bl	aec <__aeabi_d2iz>
    374c:	2200      	movs	r2, #0
    374e:	4682      	mov	sl, r0
    3750:	2300      	movs	r3, #0
    3752:	4630      	mov	r0, r6
    3754:	4639      	mov	r1, r7
    3756:	f7fd f98b 	bl	a70 <__aeabi_dcmplt>
    375a:	b148      	cbz	r0, 3770 <_dtoa_r+0x178>
    375c:	4650      	mov	r0, sl
    375e:	f7fc fe71 	bl	444 <__aeabi_i2d>
    3762:	4632      	mov	r2, r6
    3764:	463b      	mov	r3, r7
    3766:	f7fd f979 	bl	a5c <__aeabi_dcmpeq>
    376a:	b908      	cbnz	r0, 3770 <_dtoa_r+0x178>
    376c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3770:	f1ba 0f16 	cmp.w	sl, #22
    3774:	d857      	bhi.n	3826 <_dtoa_r+0x22e>
    3776:	4b59      	ldr	r3, [pc, #356]	; (38dc <_dtoa_r+0x2e4>)
    3778:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    377c:	e9d3 2300 	ldrd	r2, r3, [r3]
    3780:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3784:	f7fd f974 	bl	a70 <__aeabi_dcmplt>
    3788:	2800      	cmp	r0, #0
    378a:	d04e      	beq.n	382a <_dtoa_r+0x232>
    378c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3790:	2300      	movs	r3, #0
    3792:	930f      	str	r3, [sp, #60]	; 0x3c
    3794:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3796:	1b1c      	subs	r4, r3, r4
    3798:	1e63      	subs	r3, r4, #1
    379a:	9309      	str	r3, [sp, #36]	; 0x24
    379c:	bf45      	ittet	mi
    379e:	f1c4 0301 	rsbmi	r3, r4, #1
    37a2:	9306      	strmi	r3, [sp, #24]
    37a4:	2300      	movpl	r3, #0
    37a6:	2300      	movmi	r3, #0
    37a8:	bf4c      	ite	mi
    37aa:	9309      	strmi	r3, [sp, #36]	; 0x24
    37ac:	9306      	strpl	r3, [sp, #24]
    37ae:	f1ba 0f00 	cmp.w	sl, #0
    37b2:	db3c      	blt.n	382e <_dtoa_r+0x236>
    37b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    37b6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    37ba:	4453      	add	r3, sl
    37bc:	9309      	str	r3, [sp, #36]	; 0x24
    37be:	2300      	movs	r3, #0
    37c0:	930a      	str	r3, [sp, #40]	; 0x28
    37c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    37c4:	2b09      	cmp	r3, #9
    37c6:	f200 808d 	bhi.w	38e4 <_dtoa_r+0x2ec>
    37ca:	2b05      	cmp	r3, #5
    37cc:	bfc4      	itt	gt
    37ce:	3b04      	subgt	r3, #4
    37d0:	9322      	strgt	r3, [sp, #136]	; 0x88
    37d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    37d4:	f1a3 0302 	sub.w	r3, r3, #2
    37d8:	bfcc      	ite	gt
    37da:	2400      	movgt	r4, #0
    37dc:	2401      	movle	r4, #1
    37de:	2b03      	cmp	r3, #3
    37e0:	f200 808c 	bhi.w	38fc <_dtoa_r+0x304>
    37e4:	e8df f003 	tbb	[pc, r3]
    37e8:	5b4d4f2d 	.word	0x5b4d4f2d
    37ec:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    37f0:	441c      	add	r4, r3
    37f2:	f204 4332 	addw	r3, r4, #1074	; 0x432
    37f6:	2b20      	cmp	r3, #32
    37f8:	bfc3      	ittte	gt
    37fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    37fe:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    3802:	fa09 f303 	lslgt.w	r3, r9, r3
    3806:	f1c3 0320 	rsble	r3, r3, #32
    380a:	bfc6      	itte	gt
    380c:	fa26 f000 	lsrgt.w	r0, r6, r0
    3810:	4318      	orrgt	r0, r3
    3812:	fa06 f003 	lslle.w	r0, r6, r3
    3816:	f7fc fe05 	bl	424 <__aeabi_ui2d>
    381a:	2301      	movs	r3, #1
    381c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    3820:	3c01      	subs	r4, #1
    3822:	9313      	str	r3, [sp, #76]	; 0x4c
    3824:	e770      	b.n	3708 <_dtoa_r+0x110>
    3826:	2301      	movs	r3, #1
    3828:	e7b3      	b.n	3792 <_dtoa_r+0x19a>
    382a:	900f      	str	r0, [sp, #60]	; 0x3c
    382c:	e7b2      	b.n	3794 <_dtoa_r+0x19c>
    382e:	9b06      	ldr	r3, [sp, #24]
    3830:	eba3 030a 	sub.w	r3, r3, sl
    3834:	9306      	str	r3, [sp, #24]
    3836:	f1ca 0300 	rsb	r3, sl, #0
    383a:	930a      	str	r3, [sp, #40]	; 0x28
    383c:	2300      	movs	r3, #0
    383e:	930e      	str	r3, [sp, #56]	; 0x38
    3840:	e7bf      	b.n	37c2 <_dtoa_r+0x1ca>
    3842:	2300      	movs	r3, #0
    3844:	930b      	str	r3, [sp, #44]	; 0x2c
    3846:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3848:	2b00      	cmp	r3, #0
    384a:	dc5a      	bgt.n	3902 <_dtoa_r+0x30a>
    384c:	f04f 0901 	mov.w	r9, #1
    3850:	f8cd 9020 	str.w	r9, [sp, #32]
    3854:	464b      	mov	r3, r9
    3856:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    385a:	6a68      	ldr	r0, [r5, #36]	; 0x24
    385c:	2200      	movs	r2, #0
    385e:	6042      	str	r2, [r0, #4]
    3860:	2204      	movs	r2, #4
    3862:	f102 0614 	add.w	r6, r2, #20
    3866:	429e      	cmp	r6, r3
    3868:	6841      	ldr	r1, [r0, #4]
    386a:	d950      	bls.n	390e <_dtoa_r+0x316>
    386c:	4628      	mov	r0, r5
    386e:	f020 fa57 	bl	23d20 <_Balloc>
    3872:	9003      	str	r0, [sp, #12]
    3874:	2800      	cmp	r0, #0
    3876:	d14e      	bne.n	3916 <_dtoa_r+0x31e>
    3878:	4b19      	ldr	r3, [pc, #100]	; (38e0 <_dtoa_r+0x2e8>)
    387a:	4602      	mov	r2, r0
    387c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3880:	e6ce      	b.n	3620 <_dtoa_r+0x28>
    3882:	2301      	movs	r3, #1
    3884:	e7de      	b.n	3844 <_dtoa_r+0x24c>
    3886:	2300      	movs	r3, #0
    3888:	930b      	str	r3, [sp, #44]	; 0x2c
    388a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    388c:	eb0a 0903 	add.w	r9, sl, r3
    3890:	f109 0301 	add.w	r3, r9, #1
    3894:	2b01      	cmp	r3, #1
    3896:	9308      	str	r3, [sp, #32]
    3898:	bfb8      	it	lt
    389a:	2301      	movlt	r3, #1
    389c:	e7dd      	b.n	385a <_dtoa_r+0x262>
    389e:	2301      	movs	r3, #1
    38a0:	e7f2      	b.n	3888 <_dtoa_r+0x290>
    38a2:	bf00      	nop
    38a4:	f3af 8000 	nop.w
    38a8:	636f4361 	.word	0x636f4361
    38ac:	3fd287a7 	.word	0x3fd287a7
    38b0:	8b60c8b3 	.word	0x8b60c8b3
    38b4:	3fc68a28 	.word	0x3fc68a28
    38b8:	509f79fb 	.word	0x509f79fb
    38bc:	3fd34413 	.word	0x3fd34413
    38c0:	0002f491 	.word	0x0002f491
    38c4:	0002f4a8 	.word	0x0002f4a8
    38c8:	7ff00000 	.word	0x7ff00000
    38cc:	0002f48d 	.word	0x0002f48d
    38d0:	0002f484 	.word	0x0002f484
    38d4:	0002de51 	.word	0x0002de51
    38d8:	3ff80000 	.word	0x3ff80000
    38dc:	0002b880 	.word	0x0002b880
    38e0:	0002f502 	.word	0x0002f502
    38e4:	2401      	movs	r4, #1
    38e6:	2300      	movs	r3, #0
    38e8:	9322      	str	r3, [sp, #136]	; 0x88
    38ea:	940b      	str	r4, [sp, #44]	; 0x2c
    38ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    38f0:	2200      	movs	r2, #0
    38f2:	f8cd 9020 	str.w	r9, [sp, #32]
    38f6:	2312      	movs	r3, #18
    38f8:	9223      	str	r2, [sp, #140]	; 0x8c
    38fa:	e7ae      	b.n	385a <_dtoa_r+0x262>
    38fc:	2301      	movs	r3, #1
    38fe:	930b      	str	r3, [sp, #44]	; 0x2c
    3900:	e7f4      	b.n	38ec <_dtoa_r+0x2f4>
    3902:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    3906:	f8cd 9020 	str.w	r9, [sp, #32]
    390a:	464b      	mov	r3, r9
    390c:	e7a5      	b.n	385a <_dtoa_r+0x262>
    390e:	3101      	adds	r1, #1
    3910:	6041      	str	r1, [r0, #4]
    3912:	0052      	lsls	r2, r2, #1
    3914:	e7a5      	b.n	3862 <_dtoa_r+0x26a>
    3916:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3918:	9a03      	ldr	r2, [sp, #12]
    391a:	601a      	str	r2, [r3, #0]
    391c:	9b08      	ldr	r3, [sp, #32]
    391e:	2b0e      	cmp	r3, #14
    3920:	f200 80a8 	bhi.w	3a74 <_dtoa_r+0x47c>
    3924:	2c00      	cmp	r4, #0
    3926:	f000 80a5 	beq.w	3a74 <_dtoa_r+0x47c>
    392a:	f1ba 0f00 	cmp.w	sl, #0
    392e:	dd34      	ble.n	399a <_dtoa_r+0x3a2>
    3930:	4a9a      	ldr	r2, [pc, #616]	; (3b9c <_dtoa_r+0x5a4>)
    3932:	f00a 030f 	and.w	r3, sl, #15
    3936:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    393a:	e9d3 3400 	ldrd	r3, r4, [r3]
    393e:	f41a 7f80 	tst.w	sl, #256	; 0x100
    3942:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    3946:	ea4f 142a 	mov.w	r4, sl, asr #4
    394a:	d016      	beq.n	397a <_dtoa_r+0x382>
    394c:	4b94      	ldr	r3, [pc, #592]	; (3ba0 <_dtoa_r+0x5a8>)
    394e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3952:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    3956:	f7fc ff09 	bl	76c <__aeabi_ddiv>
    395a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    395e:	f004 040f 	and.w	r4, r4, #15
    3962:	2703      	movs	r7, #3
    3964:	4e8e      	ldr	r6, [pc, #568]	; (3ba0 <_dtoa_r+0x5a8>)
    3966:	b954      	cbnz	r4, 397e <_dtoa_r+0x386>
    3968:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    396c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3970:	f7fc fefc 	bl	76c <__aeabi_ddiv>
    3974:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3978:	e029      	b.n	39ce <_dtoa_r+0x3d6>
    397a:	2702      	movs	r7, #2
    397c:	e7f2      	b.n	3964 <_dtoa_r+0x36c>
    397e:	07e1      	lsls	r1, r4, #31
    3980:	d508      	bpl.n	3994 <_dtoa_r+0x39c>
    3982:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3986:	e9d6 2300 	ldrd	r2, r3, [r6]
    398a:	f7fc fdc5 	bl	518 <__aeabi_dmul>
    398e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3992:	3701      	adds	r7, #1
    3994:	1064      	asrs	r4, r4, #1
    3996:	3608      	adds	r6, #8
    3998:	e7e5      	b.n	3966 <_dtoa_r+0x36e>
    399a:	f000 80a5 	beq.w	3ae8 <_dtoa_r+0x4f0>
    399e:	f1ca 0400 	rsb	r4, sl, #0
    39a2:	4b7e      	ldr	r3, [pc, #504]	; (3b9c <_dtoa_r+0x5a4>)
    39a4:	4e7e      	ldr	r6, [pc, #504]	; (3ba0 <_dtoa_r+0x5a8>)
    39a6:	f004 020f 	and.w	r2, r4, #15
    39aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    39ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    39b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    39b6:	f7fc fdaf 	bl	518 <__aeabi_dmul>
    39ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
    39be:	1124      	asrs	r4, r4, #4
    39c0:	2300      	movs	r3, #0
    39c2:	2702      	movs	r7, #2
    39c4:	2c00      	cmp	r4, #0
    39c6:	f040 8084 	bne.w	3ad2 <_dtoa_r+0x4da>
    39ca:	2b00      	cmp	r3, #0
    39cc:	d1d2      	bne.n	3974 <_dtoa_r+0x37c>
    39ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39d0:	2b00      	cmp	r3, #0
    39d2:	f000 808b 	beq.w	3aec <_dtoa_r+0x4f4>
    39d6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    39da:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    39de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    39e2:	4b70      	ldr	r3, [pc, #448]	; (3ba4 <_dtoa_r+0x5ac>)
    39e4:	2200      	movs	r2, #0
    39e6:	f7fd f843 	bl	a70 <__aeabi_dcmplt>
    39ea:	2800      	cmp	r0, #0
    39ec:	d07e      	beq.n	3aec <_dtoa_r+0x4f4>
    39ee:	9b08      	ldr	r3, [sp, #32]
    39f0:	2b00      	cmp	r3, #0
    39f2:	d07b      	beq.n	3aec <_dtoa_r+0x4f4>
    39f4:	f1b9 0f00 	cmp.w	r9, #0
    39f8:	dd38      	ble.n	3a6c <_dtoa_r+0x474>
    39fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    39fe:	4b6a      	ldr	r3, [pc, #424]	; (3ba8 <_dtoa_r+0x5b0>)
    3a00:	2200      	movs	r2, #0
    3a02:	f7fc fd89 	bl	518 <__aeabi_dmul>
    3a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3a0a:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    3a0e:	3701      	adds	r7, #1
    3a10:	464c      	mov	r4, r9
    3a12:	4638      	mov	r0, r7
    3a14:	f7fc fd16 	bl	444 <__aeabi_i2d>
    3a18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3a1c:	f7fc fd7c 	bl	518 <__aeabi_dmul>
    3a20:	4b62      	ldr	r3, [pc, #392]	; (3bac <_dtoa_r+0x5b4>)
    3a22:	2200      	movs	r2, #0
    3a24:	f7fc fbc2 	bl	1ac <__adddf3>
    3a28:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    3a2c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3a30:	9611      	str	r6, [sp, #68]	; 0x44
    3a32:	2c00      	cmp	r4, #0
    3a34:	d15d      	bne.n	3af2 <_dtoa_r+0x4fa>
    3a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3a3a:	4b5d      	ldr	r3, [pc, #372]	; (3bb0 <_dtoa_r+0x5b8>)
    3a3c:	2200      	movs	r2, #0
    3a3e:	f7fc fbb3 	bl	1a8 <__aeabi_dsub>
    3a42:	4602      	mov	r2, r0
    3a44:	460b      	mov	r3, r1
    3a46:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3a4a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3a4c:	4633      	mov	r3, r6
    3a4e:	f7fd f82d 	bl	aac <__aeabi_dcmpgt>
    3a52:	2800      	cmp	r0, #0
    3a54:	f040 829c 	bne.w	3f90 <_dtoa_r+0x998>
    3a58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3a5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    3a5e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    3a62:	f7fd f805 	bl	a70 <__aeabi_dcmplt>
    3a66:	2800      	cmp	r0, #0
    3a68:	f040 8290 	bne.w	3f8c <_dtoa_r+0x994>
    3a6c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    3a70:	e9cd 3404 	strd	r3, r4, [sp, #16]
    3a74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    3a76:	2b00      	cmp	r3, #0
    3a78:	f2c0 8152 	blt.w	3d20 <_dtoa_r+0x728>
    3a7c:	f1ba 0f0e 	cmp.w	sl, #14
    3a80:	f300 814e 	bgt.w	3d20 <_dtoa_r+0x728>
    3a84:	4b45      	ldr	r3, [pc, #276]	; (3b9c <_dtoa_r+0x5a4>)
    3a86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    3a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
    3a8e:	e9cd 3406 	strd	r3, r4, [sp, #24]
    3a92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3a94:	2b00      	cmp	r3, #0
    3a96:	f280 80db 	bge.w	3c50 <_dtoa_r+0x658>
    3a9a:	9b08      	ldr	r3, [sp, #32]
    3a9c:	2b00      	cmp	r3, #0
    3a9e:	f300 80d7 	bgt.w	3c50 <_dtoa_r+0x658>
    3aa2:	f040 8272 	bne.w	3f8a <_dtoa_r+0x992>
    3aa6:	4b42      	ldr	r3, [pc, #264]	; (3bb0 <_dtoa_r+0x5b8>)
    3aa8:	2200      	movs	r2, #0
    3aaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    3aae:	f7fc fd33 	bl	518 <__aeabi_dmul>
    3ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3ab6:	f7fc ffef 	bl	a98 <__aeabi_dcmpge>
    3aba:	9c08      	ldr	r4, [sp, #32]
    3abc:	4626      	mov	r6, r4
    3abe:	2800      	cmp	r0, #0
    3ac0:	f040 8248 	bne.w	3f54 <_dtoa_r+0x95c>
    3ac4:	9f03      	ldr	r7, [sp, #12]
    3ac6:	2331      	movs	r3, #49	; 0x31
    3ac8:	f807 3b01 	strb.w	r3, [r7], #1
    3acc:	f10a 0a01 	add.w	sl, sl, #1
    3ad0:	e244      	b.n	3f5c <_dtoa_r+0x964>
    3ad2:	07e2      	lsls	r2, r4, #31
    3ad4:	d505      	bpl.n	3ae2 <_dtoa_r+0x4ea>
    3ad6:	e9d6 2300 	ldrd	r2, r3, [r6]
    3ada:	f7fc fd1d 	bl	518 <__aeabi_dmul>
    3ade:	3701      	adds	r7, #1
    3ae0:	2301      	movs	r3, #1
    3ae2:	1064      	asrs	r4, r4, #1
    3ae4:	3608      	adds	r6, #8
    3ae6:	e76d      	b.n	39c4 <_dtoa_r+0x3cc>
    3ae8:	2702      	movs	r7, #2
    3aea:	e770      	b.n	39ce <_dtoa_r+0x3d6>
    3aec:	9c08      	ldr	r4, [sp, #32]
    3aee:	46d0      	mov	r8, sl
    3af0:	e78f      	b.n	3a12 <_dtoa_r+0x41a>
    3af2:	9903      	ldr	r1, [sp, #12]
    3af4:	4b29      	ldr	r3, [pc, #164]	; (3b9c <_dtoa_r+0x5a4>)
    3af6:	4421      	add	r1, r4
    3af8:	9112      	str	r1, [sp, #72]	; 0x48
    3afa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    3afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    3b00:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    3b04:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    3b08:	2900      	cmp	r1, #0
    3b0a:	d055      	beq.n	3bb8 <_dtoa_r+0x5c0>
    3b0c:	4929      	ldr	r1, [pc, #164]	; (3bb4 <_dtoa_r+0x5bc>)
    3b0e:	2000      	movs	r0, #0
    3b10:	f7fc fe2c 	bl	76c <__aeabi_ddiv>
    3b14:	463b      	mov	r3, r7
    3b16:	4632      	mov	r2, r6
    3b18:	f7fc fb46 	bl	1a8 <__aeabi_dsub>
    3b1c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3b20:	9f03      	ldr	r7, [sp, #12]
    3b22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3b26:	f7fc ffe1 	bl	aec <__aeabi_d2iz>
    3b2a:	4604      	mov	r4, r0
    3b2c:	f7fc fc8a 	bl	444 <__aeabi_i2d>
    3b30:	4602      	mov	r2, r0
    3b32:	460b      	mov	r3, r1
    3b34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3b38:	f7fc fb36 	bl	1a8 <__aeabi_dsub>
    3b3c:	3430      	adds	r4, #48	; 0x30
    3b3e:	4602      	mov	r2, r0
    3b40:	460b      	mov	r3, r1
    3b42:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3b46:	f807 4b01 	strb.w	r4, [r7], #1
    3b4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3b4e:	f7fc ff8f 	bl	a70 <__aeabi_dcmplt>
    3b52:	2800      	cmp	r0, #0
    3b54:	d174      	bne.n	3c40 <_dtoa_r+0x648>
    3b56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3b5a:	4912      	ldr	r1, [pc, #72]	; (3ba4 <_dtoa_r+0x5ac>)
    3b5c:	2000      	movs	r0, #0
    3b5e:	f7fc fb23 	bl	1a8 <__aeabi_dsub>
    3b62:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3b66:	f7fc ff83 	bl	a70 <__aeabi_dcmplt>
    3b6a:	2800      	cmp	r0, #0
    3b6c:	f040 80b7 	bne.w	3cde <_dtoa_r+0x6e6>
    3b70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3b72:	429f      	cmp	r7, r3
    3b74:	f43f af7a 	beq.w	3a6c <_dtoa_r+0x474>
    3b78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3b7c:	4b0a      	ldr	r3, [pc, #40]	; (3ba8 <_dtoa_r+0x5b0>)
    3b7e:	2200      	movs	r2, #0
    3b80:	f7fc fcca 	bl	518 <__aeabi_dmul>
    3b84:	4b08      	ldr	r3, [pc, #32]	; (3ba8 <_dtoa_r+0x5b0>)
    3b86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3b8a:	2200      	movs	r2, #0
    3b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3b90:	f7fc fcc2 	bl	518 <__aeabi_dmul>
    3b94:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3b98:	e7c3      	b.n	3b22 <_dtoa_r+0x52a>
    3b9a:	bf00      	nop
    3b9c:	0002b880 	.word	0x0002b880
    3ba0:	0002b858 	.word	0x0002b858
    3ba4:	3ff00000 	.word	0x3ff00000
    3ba8:	40240000 	.word	0x40240000
    3bac:	401c0000 	.word	0x401c0000
    3bb0:	40140000 	.word	0x40140000
    3bb4:	3fe00000 	.word	0x3fe00000
    3bb8:	4630      	mov	r0, r6
    3bba:	4639      	mov	r1, r7
    3bbc:	f7fc fcac 	bl	518 <__aeabi_dmul>
    3bc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3bc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3bc6:	9c03      	ldr	r4, [sp, #12]
    3bc8:	9314      	str	r3, [sp, #80]	; 0x50
    3bca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3bce:	f7fc ff8d 	bl	aec <__aeabi_d2iz>
    3bd2:	9015      	str	r0, [sp, #84]	; 0x54
    3bd4:	f7fc fc36 	bl	444 <__aeabi_i2d>
    3bd8:	4602      	mov	r2, r0
    3bda:	460b      	mov	r3, r1
    3bdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3be0:	f7fc fae2 	bl	1a8 <__aeabi_dsub>
    3be4:	9b15      	ldr	r3, [sp, #84]	; 0x54
    3be6:	3330      	adds	r3, #48	; 0x30
    3be8:	f804 3b01 	strb.w	r3, [r4], #1
    3bec:	9b12      	ldr	r3, [sp, #72]	; 0x48
    3bee:	429c      	cmp	r4, r3
    3bf0:	4606      	mov	r6, r0
    3bf2:	460f      	mov	r7, r1
    3bf4:	f04f 0200 	mov.w	r2, #0
    3bf8:	d124      	bne.n	3c44 <_dtoa_r+0x64c>
    3bfa:	4ba4      	ldr	r3, [pc, #656]	; (3e8c <_dtoa_r+0x894>)
    3bfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3c00:	f7fc fad4 	bl	1ac <__adddf3>
    3c04:	4602      	mov	r2, r0
    3c06:	460b      	mov	r3, r1
    3c08:	4630      	mov	r0, r6
    3c0a:	4639      	mov	r1, r7
    3c0c:	f7fc ff4e 	bl	aac <__aeabi_dcmpgt>
    3c10:	2800      	cmp	r0, #0
    3c12:	d163      	bne.n	3cdc <_dtoa_r+0x6e4>
    3c14:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3c18:	499c      	ldr	r1, [pc, #624]	; (3e8c <_dtoa_r+0x894>)
    3c1a:	2000      	movs	r0, #0
    3c1c:	f7fc fac4 	bl	1a8 <__aeabi_dsub>
    3c20:	4602      	mov	r2, r0
    3c22:	460b      	mov	r3, r1
    3c24:	4630      	mov	r0, r6
    3c26:	4639      	mov	r1, r7
    3c28:	f7fc ff22 	bl	a70 <__aeabi_dcmplt>
    3c2c:	2800      	cmp	r0, #0
    3c2e:	f43f af1d 	beq.w	3a6c <_dtoa_r+0x474>
    3c32:	9f14      	ldr	r7, [sp, #80]	; 0x50
    3c34:	1e7b      	subs	r3, r7, #1
    3c36:	9314      	str	r3, [sp, #80]	; 0x50
    3c38:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    3c3c:	2b30      	cmp	r3, #48	; 0x30
    3c3e:	d0f8      	beq.n	3c32 <_dtoa_r+0x63a>
    3c40:	46c2      	mov	sl, r8
    3c42:	e03b      	b.n	3cbc <_dtoa_r+0x6c4>
    3c44:	4b92      	ldr	r3, [pc, #584]	; (3e90 <_dtoa_r+0x898>)
    3c46:	f7fc fc67 	bl	518 <__aeabi_dmul>
    3c4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3c4e:	e7bc      	b.n	3bca <_dtoa_r+0x5d2>
    3c50:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    3c54:	9f03      	ldr	r7, [sp, #12]
    3c56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3c5a:	4640      	mov	r0, r8
    3c5c:	4649      	mov	r1, r9
    3c5e:	f7fc fd85 	bl	76c <__aeabi_ddiv>
    3c62:	f7fc ff43 	bl	aec <__aeabi_d2iz>
    3c66:	4604      	mov	r4, r0
    3c68:	f7fc fbec 	bl	444 <__aeabi_i2d>
    3c6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3c70:	f7fc fc52 	bl	518 <__aeabi_dmul>
    3c74:	f104 0630 	add.w	r6, r4, #48	; 0x30
    3c78:	4602      	mov	r2, r0
    3c7a:	460b      	mov	r3, r1
    3c7c:	4640      	mov	r0, r8
    3c7e:	4649      	mov	r1, r9
    3c80:	f7fc fa92 	bl	1a8 <__aeabi_dsub>
    3c84:	f807 6b01 	strb.w	r6, [r7], #1
    3c88:	9e03      	ldr	r6, [sp, #12]
    3c8a:	f8dd c020 	ldr.w	ip, [sp, #32]
    3c8e:	1bbe      	subs	r6, r7, r6
    3c90:	45b4      	cmp	ip, r6
    3c92:	4602      	mov	r2, r0
    3c94:	460b      	mov	r3, r1
    3c96:	d136      	bne.n	3d06 <_dtoa_r+0x70e>
    3c98:	f7fc fa88 	bl	1ac <__adddf3>
    3c9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3ca0:	4680      	mov	r8, r0
    3ca2:	4689      	mov	r9, r1
    3ca4:	f7fc ff02 	bl	aac <__aeabi_dcmpgt>
    3ca8:	bb58      	cbnz	r0, 3d02 <_dtoa_r+0x70a>
    3caa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    3cae:	4640      	mov	r0, r8
    3cb0:	4649      	mov	r1, r9
    3cb2:	f7fc fed3 	bl	a5c <__aeabi_dcmpeq>
    3cb6:	b108      	cbz	r0, 3cbc <_dtoa_r+0x6c4>
    3cb8:	07e1      	lsls	r1, r4, #31
    3cba:	d422      	bmi.n	3d02 <_dtoa_r+0x70a>
    3cbc:	4628      	mov	r0, r5
    3cbe:	4659      	mov	r1, fp
    3cc0:	f020 f86e 	bl	23da0 <_Bfree>
    3cc4:	2300      	movs	r3, #0
    3cc6:	703b      	strb	r3, [r7, #0]
    3cc8:	9b24      	ldr	r3, [sp, #144]	; 0x90
    3cca:	f10a 0001 	add.w	r0, sl, #1
    3cce:	6018      	str	r0, [r3, #0]
    3cd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3cd2:	2b00      	cmp	r3, #0
    3cd4:	f43f acdd 	beq.w	3692 <_dtoa_r+0x9a>
    3cd8:	601f      	str	r7, [r3, #0]
    3cda:	e4da      	b.n	3692 <_dtoa_r+0x9a>
    3cdc:	4627      	mov	r7, r4
    3cde:	463b      	mov	r3, r7
    3ce0:	461f      	mov	r7, r3
    3ce2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    3ce6:	2a39      	cmp	r2, #57	; 0x39
    3ce8:	d107      	bne.n	3cfa <_dtoa_r+0x702>
    3cea:	9a03      	ldr	r2, [sp, #12]
    3cec:	429a      	cmp	r2, r3
    3cee:	d1f7      	bne.n	3ce0 <_dtoa_r+0x6e8>
    3cf0:	9903      	ldr	r1, [sp, #12]
    3cf2:	2230      	movs	r2, #48	; 0x30
    3cf4:	f108 0801 	add.w	r8, r8, #1
    3cf8:	700a      	strb	r2, [r1, #0]
    3cfa:	781a      	ldrb	r2, [r3, #0]
    3cfc:	3201      	adds	r2, #1
    3cfe:	701a      	strb	r2, [r3, #0]
    3d00:	e79e      	b.n	3c40 <_dtoa_r+0x648>
    3d02:	46d0      	mov	r8, sl
    3d04:	e7eb      	b.n	3cde <_dtoa_r+0x6e6>
    3d06:	4b62      	ldr	r3, [pc, #392]	; (3e90 <_dtoa_r+0x898>)
    3d08:	2200      	movs	r2, #0
    3d0a:	f7fc fc05 	bl	518 <__aeabi_dmul>
    3d0e:	2200      	movs	r2, #0
    3d10:	2300      	movs	r3, #0
    3d12:	4680      	mov	r8, r0
    3d14:	4689      	mov	r9, r1
    3d16:	f7fc fea1 	bl	a5c <__aeabi_dcmpeq>
    3d1a:	2800      	cmp	r0, #0
    3d1c:	d09b      	beq.n	3c56 <_dtoa_r+0x65e>
    3d1e:	e7cd      	b.n	3cbc <_dtoa_r+0x6c4>
    3d20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3d22:	2a00      	cmp	r2, #0
    3d24:	f000 80d0 	beq.w	3ec8 <_dtoa_r+0x8d0>
    3d28:	9a22      	ldr	r2, [sp, #136]	; 0x88
    3d2a:	2a01      	cmp	r2, #1
    3d2c:	f300 80b2 	bgt.w	3e94 <_dtoa_r+0x89c>
    3d30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    3d32:	2a00      	cmp	r2, #0
    3d34:	f000 80a6 	beq.w	3e84 <_dtoa_r+0x88c>
    3d38:	f203 4333 	addw	r3, r3, #1075	; 0x433
    3d3c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3d3e:	9f06      	ldr	r7, [sp, #24]
    3d40:	9a06      	ldr	r2, [sp, #24]
    3d42:	441a      	add	r2, r3
    3d44:	9206      	str	r2, [sp, #24]
    3d46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d48:	2101      	movs	r1, #1
    3d4a:	441a      	add	r2, r3
    3d4c:	4628      	mov	r0, r5
    3d4e:	9209      	str	r2, [sp, #36]	; 0x24
    3d50:	f020 f88e 	bl	23e70 <__i2b>
    3d54:	4606      	mov	r6, r0
    3d56:	2f00      	cmp	r7, #0
    3d58:	dd0c      	ble.n	3d74 <_dtoa_r+0x77c>
    3d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3d5c:	2b00      	cmp	r3, #0
    3d5e:	dd09      	ble.n	3d74 <_dtoa_r+0x77c>
    3d60:	42bb      	cmp	r3, r7
    3d62:	9a06      	ldr	r2, [sp, #24]
    3d64:	bfa8      	it	ge
    3d66:	463b      	movge	r3, r7
    3d68:	1ad2      	subs	r2, r2, r3
    3d6a:	9206      	str	r2, [sp, #24]
    3d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3d6e:	1aff      	subs	r7, r7, r3
    3d70:	1ad3      	subs	r3, r2, r3
    3d72:	9309      	str	r3, [sp, #36]	; 0x24
    3d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3d76:	b1f3      	cbz	r3, 3db6 <_dtoa_r+0x7be>
    3d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3d7a:	2b00      	cmp	r3, #0
    3d7c:	f000 80a8 	beq.w	3ed0 <_dtoa_r+0x8d8>
    3d80:	2c00      	cmp	r4, #0
    3d82:	dd10      	ble.n	3da6 <_dtoa_r+0x7ae>
    3d84:	4631      	mov	r1, r6
    3d86:	4622      	mov	r2, r4
    3d88:	4628      	mov	r0, r5
    3d8a:	f020 f92f 	bl	23fec <__pow5mult>
    3d8e:	465a      	mov	r2, fp
    3d90:	4601      	mov	r1, r0
    3d92:	4606      	mov	r6, r0
    3d94:	4628      	mov	r0, r5
    3d96:	f020 f881 	bl	23e9c <__multiply>
    3d9a:	4659      	mov	r1, fp
    3d9c:	4680      	mov	r8, r0
    3d9e:	4628      	mov	r0, r5
    3da0:	f01f fffe 	bl	23da0 <_Bfree>
    3da4:	46c3      	mov	fp, r8
    3da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3da8:	1b1a      	subs	r2, r3, r4
    3daa:	d004      	beq.n	3db6 <_dtoa_r+0x7be>
    3dac:	4659      	mov	r1, fp
    3dae:	4628      	mov	r0, r5
    3db0:	f020 f91c 	bl	23fec <__pow5mult>
    3db4:	4683      	mov	fp, r0
    3db6:	2101      	movs	r1, #1
    3db8:	4628      	mov	r0, r5
    3dba:	f020 f859 	bl	23e70 <__i2b>
    3dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3dc0:	2b00      	cmp	r3, #0
    3dc2:	4604      	mov	r4, r0
    3dc4:	f340 8086 	ble.w	3ed4 <_dtoa_r+0x8dc>
    3dc8:	461a      	mov	r2, r3
    3dca:	4601      	mov	r1, r0
    3dcc:	4628      	mov	r0, r5
    3dce:	f020 f90d 	bl	23fec <__pow5mult>
    3dd2:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3dd4:	2b01      	cmp	r3, #1
    3dd6:	4604      	mov	r4, r0
    3dd8:	dd7f      	ble.n	3eda <_dtoa_r+0x8e2>
    3dda:	f04f 0800 	mov.w	r8, #0
    3dde:	6923      	ldr	r3, [r4, #16]
    3de0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    3de4:	6918      	ldr	r0, [r3, #16]
    3de6:	f027 f84c 	bl	2ae82 <__hi0bits>
    3dea:	f1c0 0020 	rsb	r0, r0, #32
    3dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3df0:	4418      	add	r0, r3
    3df2:	f010 001f 	ands.w	r0, r0, #31
    3df6:	f000 8092 	beq.w	3f1e <_dtoa_r+0x926>
    3dfa:	f1c0 0320 	rsb	r3, r0, #32
    3dfe:	2b04      	cmp	r3, #4
    3e00:	f340 808a 	ble.w	3f18 <_dtoa_r+0x920>
    3e04:	f1c0 001c 	rsb	r0, r0, #28
    3e08:	9b06      	ldr	r3, [sp, #24]
    3e0a:	4403      	add	r3, r0
    3e0c:	9306      	str	r3, [sp, #24]
    3e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e10:	4403      	add	r3, r0
    3e12:	4407      	add	r7, r0
    3e14:	9309      	str	r3, [sp, #36]	; 0x24
    3e16:	9b06      	ldr	r3, [sp, #24]
    3e18:	2b00      	cmp	r3, #0
    3e1a:	dd05      	ble.n	3e28 <_dtoa_r+0x830>
    3e1c:	4659      	mov	r1, fp
    3e1e:	461a      	mov	r2, r3
    3e20:	4628      	mov	r0, r5
    3e22:	f020 f93d 	bl	240a0 <__lshift>
    3e26:	4683      	mov	fp, r0
    3e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	dd05      	ble.n	3e3a <_dtoa_r+0x842>
    3e2e:	4621      	mov	r1, r4
    3e30:	461a      	mov	r2, r3
    3e32:	4628      	mov	r0, r5
    3e34:	f020 f934 	bl	240a0 <__lshift>
    3e38:	4604      	mov	r4, r0
    3e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3e3c:	2b00      	cmp	r3, #0
    3e3e:	d070      	beq.n	3f22 <_dtoa_r+0x92a>
    3e40:	4621      	mov	r1, r4
    3e42:	4658      	mov	r0, fp
    3e44:	f027 f86a 	bl	2af1c <__mcmp>
    3e48:	2800      	cmp	r0, #0
    3e4a:	da6a      	bge.n	3f22 <_dtoa_r+0x92a>
    3e4c:	2300      	movs	r3, #0
    3e4e:	4659      	mov	r1, fp
    3e50:	220a      	movs	r2, #10
    3e52:	4628      	mov	r0, r5
    3e54:	f01f ffc6 	bl	23de4 <__multadd>
    3e58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3e5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3e5e:	4683      	mov	fp, r0
    3e60:	2b00      	cmp	r3, #0
    3e62:	f000 8194 	beq.w	418e <_dtoa_r+0xb96>
    3e66:	4631      	mov	r1, r6
    3e68:	2300      	movs	r3, #0
    3e6a:	220a      	movs	r2, #10
    3e6c:	4628      	mov	r0, r5
    3e6e:	f01f ffb9 	bl	23de4 <__multadd>
    3e72:	f1b9 0f00 	cmp.w	r9, #0
    3e76:	4606      	mov	r6, r0
    3e78:	f300 8093 	bgt.w	3fa2 <_dtoa_r+0x9aa>
    3e7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3e7e:	2b02      	cmp	r3, #2
    3e80:	dc57      	bgt.n	3f32 <_dtoa_r+0x93a>
    3e82:	e08e      	b.n	3fa2 <_dtoa_r+0x9aa>
    3e84:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3e86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    3e8a:	e757      	b.n	3d3c <_dtoa_r+0x744>
    3e8c:	3fe00000 	.word	0x3fe00000
    3e90:	40240000 	.word	0x40240000
    3e94:	9b08      	ldr	r3, [sp, #32]
    3e96:	1e5c      	subs	r4, r3, #1
    3e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    3e9a:	42a3      	cmp	r3, r4
    3e9c:	bfbf      	itttt	lt
    3e9e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    3ea0:	940a      	strlt	r4, [sp, #40]	; 0x28
    3ea2:	1ae2      	sublt	r2, r4, r3
    3ea4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    3ea6:	bfb6      	itet	lt
    3ea8:	189b      	addlt	r3, r3, r2
    3eaa:	1b1c      	subge	r4, r3, r4
    3eac:	930e      	strlt	r3, [sp, #56]	; 0x38
    3eae:	9b08      	ldr	r3, [sp, #32]
    3eb0:	bfb8      	it	lt
    3eb2:	2400      	movlt	r4, #0
    3eb4:	2b00      	cmp	r3, #0
    3eb6:	bfb9      	ittee	lt
    3eb8:	9b06      	ldrlt	r3, [sp, #24]
    3eba:	9a08      	ldrlt	r2, [sp, #32]
    3ebc:	9f06      	ldrge	r7, [sp, #24]
    3ebe:	9b08      	ldrge	r3, [sp, #32]
    3ec0:	bfbc      	itt	lt
    3ec2:	1a9f      	sublt	r7, r3, r2
    3ec4:	2300      	movlt	r3, #0
    3ec6:	e73b      	b.n	3d40 <_dtoa_r+0x748>
    3ec8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    3eca:	9f06      	ldr	r7, [sp, #24]
    3ecc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    3ece:	e742      	b.n	3d56 <_dtoa_r+0x75e>
    3ed0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3ed2:	e76b      	b.n	3dac <_dtoa_r+0x7b4>
    3ed4:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3ed6:	2b01      	cmp	r3, #1
    3ed8:	dc19      	bgt.n	3f0e <_dtoa_r+0x916>
    3eda:	9b04      	ldr	r3, [sp, #16]
    3edc:	b9bb      	cbnz	r3, 3f0e <_dtoa_r+0x916>
    3ede:	9b05      	ldr	r3, [sp, #20]
    3ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3ee4:	b99b      	cbnz	r3, 3f0e <_dtoa_r+0x916>
    3ee6:	9b05      	ldr	r3, [sp, #20]
    3ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    3eec:	0d1b      	lsrs	r3, r3, #20
    3eee:	051b      	lsls	r3, r3, #20
    3ef0:	b183      	cbz	r3, 3f14 <_dtoa_r+0x91c>
    3ef2:	9b06      	ldr	r3, [sp, #24]
    3ef4:	3301      	adds	r3, #1
    3ef6:	9306      	str	r3, [sp, #24]
    3ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3efa:	3301      	adds	r3, #1
    3efc:	9309      	str	r3, [sp, #36]	; 0x24
    3efe:	f04f 0801 	mov.w	r8, #1
    3f02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    3f04:	2b00      	cmp	r3, #0
    3f06:	f47f af6a 	bne.w	3dde <_dtoa_r+0x7e6>
    3f0a:	2001      	movs	r0, #1
    3f0c:	e76f      	b.n	3dee <_dtoa_r+0x7f6>
    3f0e:	f04f 0800 	mov.w	r8, #0
    3f12:	e7f6      	b.n	3f02 <_dtoa_r+0x90a>
    3f14:	4698      	mov	r8, r3
    3f16:	e7f4      	b.n	3f02 <_dtoa_r+0x90a>
    3f18:	f43f af7d 	beq.w	3e16 <_dtoa_r+0x81e>
    3f1c:	4618      	mov	r0, r3
    3f1e:	301c      	adds	r0, #28
    3f20:	e772      	b.n	3e08 <_dtoa_r+0x810>
    3f22:	9b08      	ldr	r3, [sp, #32]
    3f24:	2b00      	cmp	r3, #0
    3f26:	dc36      	bgt.n	3f96 <_dtoa_r+0x99e>
    3f28:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3f2a:	2b02      	cmp	r3, #2
    3f2c:	dd33      	ble.n	3f96 <_dtoa_r+0x99e>
    3f2e:	f8dd 9020 	ldr.w	r9, [sp, #32]
    3f32:	f1b9 0f00 	cmp.w	r9, #0
    3f36:	d10d      	bne.n	3f54 <_dtoa_r+0x95c>
    3f38:	4621      	mov	r1, r4
    3f3a:	464b      	mov	r3, r9
    3f3c:	2205      	movs	r2, #5
    3f3e:	4628      	mov	r0, r5
    3f40:	f01f ff50 	bl	23de4 <__multadd>
    3f44:	4601      	mov	r1, r0
    3f46:	4604      	mov	r4, r0
    3f48:	4658      	mov	r0, fp
    3f4a:	f026 ffe7 	bl	2af1c <__mcmp>
    3f4e:	2800      	cmp	r0, #0
    3f50:	f73f adb8 	bgt.w	3ac4 <_dtoa_r+0x4cc>
    3f54:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3f56:	9f03      	ldr	r7, [sp, #12]
    3f58:	ea6f 0a03 	mvn.w	sl, r3
    3f5c:	f04f 0800 	mov.w	r8, #0
    3f60:	4621      	mov	r1, r4
    3f62:	4628      	mov	r0, r5
    3f64:	f01f ff1c 	bl	23da0 <_Bfree>
    3f68:	2e00      	cmp	r6, #0
    3f6a:	f43f aea7 	beq.w	3cbc <_dtoa_r+0x6c4>
    3f6e:	f1b8 0f00 	cmp.w	r8, #0
    3f72:	d005      	beq.n	3f80 <_dtoa_r+0x988>
    3f74:	45b0      	cmp	r8, r6
    3f76:	d003      	beq.n	3f80 <_dtoa_r+0x988>
    3f78:	4641      	mov	r1, r8
    3f7a:	4628      	mov	r0, r5
    3f7c:	f01f ff10 	bl	23da0 <_Bfree>
    3f80:	4631      	mov	r1, r6
    3f82:	4628      	mov	r0, r5
    3f84:	f01f ff0c 	bl	23da0 <_Bfree>
    3f88:	e698      	b.n	3cbc <_dtoa_r+0x6c4>
    3f8a:	2400      	movs	r4, #0
    3f8c:	4626      	mov	r6, r4
    3f8e:	e7e1      	b.n	3f54 <_dtoa_r+0x95c>
    3f90:	46c2      	mov	sl, r8
    3f92:	4626      	mov	r6, r4
    3f94:	e596      	b.n	3ac4 <_dtoa_r+0x4cc>
    3f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    3f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
    3f9c:	2b00      	cmp	r3, #0
    3f9e:	f000 80fd 	beq.w	419c <_dtoa_r+0xba4>
    3fa2:	2f00      	cmp	r7, #0
    3fa4:	dd05      	ble.n	3fb2 <_dtoa_r+0x9ba>
    3fa6:	4631      	mov	r1, r6
    3fa8:	463a      	mov	r2, r7
    3faa:	4628      	mov	r0, r5
    3fac:	f020 f878 	bl	240a0 <__lshift>
    3fb0:	4606      	mov	r6, r0
    3fb2:	f1b8 0f00 	cmp.w	r8, #0
    3fb6:	d05c      	beq.n	4072 <_dtoa_r+0xa7a>
    3fb8:	6871      	ldr	r1, [r6, #4]
    3fba:	4628      	mov	r0, r5
    3fbc:	f01f feb0 	bl	23d20 <_Balloc>
    3fc0:	4607      	mov	r7, r0
    3fc2:	b928      	cbnz	r0, 3fd0 <_dtoa_r+0x9d8>
    3fc4:	4b80      	ldr	r3, [pc, #512]	; (41c8 <_dtoa_r+0xbd0>)
    3fc6:	4602      	mov	r2, r0
    3fc8:	f240 21ea 	movw	r1, #746	; 0x2ea
    3fcc:	f7ff bb28 	b.w	3620 <_dtoa_r+0x28>
    3fd0:	6932      	ldr	r2, [r6, #16]
    3fd2:	3202      	adds	r2, #2
    3fd4:	0092      	lsls	r2, r2, #2
    3fd6:	f106 010c 	add.w	r1, r6, #12
    3fda:	300c      	adds	r0, #12
    3fdc:	f026 fd3d 	bl	2aa5a <memcpy>
    3fe0:	2201      	movs	r2, #1
    3fe2:	4639      	mov	r1, r7
    3fe4:	4628      	mov	r0, r5
    3fe6:	f020 f85b 	bl	240a0 <__lshift>
    3fea:	9b03      	ldr	r3, [sp, #12]
    3fec:	3301      	adds	r3, #1
    3fee:	9308      	str	r3, [sp, #32]
    3ff0:	9b03      	ldr	r3, [sp, #12]
    3ff2:	444b      	add	r3, r9
    3ff4:	930a      	str	r3, [sp, #40]	; 0x28
    3ff6:	9b04      	ldr	r3, [sp, #16]
    3ff8:	f003 0301 	and.w	r3, r3, #1
    3ffc:	46b0      	mov	r8, r6
    3ffe:	9309      	str	r3, [sp, #36]	; 0x24
    4000:	4606      	mov	r6, r0
    4002:	9b08      	ldr	r3, [sp, #32]
    4004:	4621      	mov	r1, r4
    4006:	3b01      	subs	r3, #1
    4008:	4658      	mov	r0, fp
    400a:	9304      	str	r3, [sp, #16]
    400c:	f026 feb2 	bl	2ad74 <quorem>
    4010:	4603      	mov	r3, r0
    4012:	3330      	adds	r3, #48	; 0x30
    4014:	9006      	str	r0, [sp, #24]
    4016:	4641      	mov	r1, r8
    4018:	4658      	mov	r0, fp
    401a:	930b      	str	r3, [sp, #44]	; 0x2c
    401c:	f026 ff7e 	bl	2af1c <__mcmp>
    4020:	4632      	mov	r2, r6
    4022:	4681      	mov	r9, r0
    4024:	4621      	mov	r1, r4
    4026:	4628      	mov	r0, r5
    4028:	f020 f8aa 	bl	24180 <__mdiff>
    402c:	68c2      	ldr	r2, [r0, #12]
    402e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4030:	4607      	mov	r7, r0
    4032:	bb02      	cbnz	r2, 4076 <_dtoa_r+0xa7e>
    4034:	4601      	mov	r1, r0
    4036:	4658      	mov	r0, fp
    4038:	f026 ff70 	bl	2af1c <__mcmp>
    403c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    403e:	4602      	mov	r2, r0
    4040:	4639      	mov	r1, r7
    4042:	4628      	mov	r0, r5
    4044:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    4048:	f01f feaa 	bl	23da0 <_Bfree>
    404c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    404e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4050:	9f08      	ldr	r7, [sp, #32]
    4052:	ea43 0102 	orr.w	r1, r3, r2
    4056:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4058:	430b      	orrs	r3, r1
    405a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    405c:	d10d      	bne.n	407a <_dtoa_r+0xa82>
    405e:	2b39      	cmp	r3, #57	; 0x39
    4060:	d029      	beq.n	40b6 <_dtoa_r+0xabe>
    4062:	f1b9 0f00 	cmp.w	r9, #0
    4066:	dd01      	ble.n	406c <_dtoa_r+0xa74>
    4068:	9b06      	ldr	r3, [sp, #24]
    406a:	3331      	adds	r3, #49	; 0x31
    406c:	9a04      	ldr	r2, [sp, #16]
    406e:	7013      	strb	r3, [r2, #0]
    4070:	e776      	b.n	3f60 <_dtoa_r+0x968>
    4072:	4630      	mov	r0, r6
    4074:	e7b9      	b.n	3fea <_dtoa_r+0x9f2>
    4076:	2201      	movs	r2, #1
    4078:	e7e2      	b.n	4040 <_dtoa_r+0xa48>
    407a:	f1b9 0f00 	cmp.w	r9, #0
    407e:	db06      	blt.n	408e <_dtoa_r+0xa96>
    4080:	9922      	ldr	r1, [sp, #136]	; 0x88
    4082:	ea41 0909 	orr.w	r9, r1, r9
    4086:	9909      	ldr	r1, [sp, #36]	; 0x24
    4088:	ea59 0101 	orrs.w	r1, r9, r1
    408c:	d120      	bne.n	40d0 <_dtoa_r+0xad8>
    408e:	2a00      	cmp	r2, #0
    4090:	ddec      	ble.n	406c <_dtoa_r+0xa74>
    4092:	4659      	mov	r1, fp
    4094:	2201      	movs	r2, #1
    4096:	4628      	mov	r0, r5
    4098:	9308      	str	r3, [sp, #32]
    409a:	f020 f801 	bl	240a0 <__lshift>
    409e:	4621      	mov	r1, r4
    40a0:	4683      	mov	fp, r0
    40a2:	f026 ff3b 	bl	2af1c <__mcmp>
    40a6:	2800      	cmp	r0, #0
    40a8:	9b08      	ldr	r3, [sp, #32]
    40aa:	dc02      	bgt.n	40b2 <_dtoa_r+0xaba>
    40ac:	d1de      	bne.n	406c <_dtoa_r+0xa74>
    40ae:	07da      	lsls	r2, r3, #31
    40b0:	d5dc      	bpl.n	406c <_dtoa_r+0xa74>
    40b2:	2b39      	cmp	r3, #57	; 0x39
    40b4:	d1d8      	bne.n	4068 <_dtoa_r+0xa70>
    40b6:	9a04      	ldr	r2, [sp, #16]
    40b8:	2339      	movs	r3, #57	; 0x39
    40ba:	7013      	strb	r3, [r2, #0]
    40bc:	463b      	mov	r3, r7
    40be:	461f      	mov	r7, r3
    40c0:	3b01      	subs	r3, #1
    40c2:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    40c6:	2a39      	cmp	r2, #57	; 0x39
    40c8:	d050      	beq.n	416c <_dtoa_r+0xb74>
    40ca:	3201      	adds	r2, #1
    40cc:	701a      	strb	r2, [r3, #0]
    40ce:	e747      	b.n	3f60 <_dtoa_r+0x968>
    40d0:	2a00      	cmp	r2, #0
    40d2:	dd03      	ble.n	40dc <_dtoa_r+0xae4>
    40d4:	2b39      	cmp	r3, #57	; 0x39
    40d6:	d0ee      	beq.n	40b6 <_dtoa_r+0xabe>
    40d8:	3301      	adds	r3, #1
    40da:	e7c7      	b.n	406c <_dtoa_r+0xa74>
    40dc:	9a08      	ldr	r2, [sp, #32]
    40de:	990a      	ldr	r1, [sp, #40]	; 0x28
    40e0:	f802 3c01 	strb.w	r3, [r2, #-1]
    40e4:	428a      	cmp	r2, r1
    40e6:	d02a      	beq.n	413e <_dtoa_r+0xb46>
    40e8:	4659      	mov	r1, fp
    40ea:	2300      	movs	r3, #0
    40ec:	220a      	movs	r2, #10
    40ee:	4628      	mov	r0, r5
    40f0:	f01f fe78 	bl	23de4 <__multadd>
    40f4:	45b0      	cmp	r8, r6
    40f6:	4683      	mov	fp, r0
    40f8:	f04f 0300 	mov.w	r3, #0
    40fc:	f04f 020a 	mov.w	r2, #10
    4100:	4641      	mov	r1, r8
    4102:	4628      	mov	r0, r5
    4104:	d107      	bne.n	4116 <_dtoa_r+0xb1e>
    4106:	f01f fe6d 	bl	23de4 <__multadd>
    410a:	4680      	mov	r8, r0
    410c:	4606      	mov	r6, r0
    410e:	9b08      	ldr	r3, [sp, #32]
    4110:	3301      	adds	r3, #1
    4112:	9308      	str	r3, [sp, #32]
    4114:	e775      	b.n	4002 <_dtoa_r+0xa0a>
    4116:	f01f fe65 	bl	23de4 <__multadd>
    411a:	4631      	mov	r1, r6
    411c:	4680      	mov	r8, r0
    411e:	2300      	movs	r3, #0
    4120:	220a      	movs	r2, #10
    4122:	4628      	mov	r0, r5
    4124:	f01f fe5e 	bl	23de4 <__multadd>
    4128:	4606      	mov	r6, r0
    412a:	e7f0      	b.n	410e <_dtoa_r+0xb16>
    412c:	f1b9 0f00 	cmp.w	r9, #0
    4130:	9a03      	ldr	r2, [sp, #12]
    4132:	bfcc      	ite	gt
    4134:	464f      	movgt	r7, r9
    4136:	2701      	movle	r7, #1
    4138:	4417      	add	r7, r2
    413a:	f04f 0800 	mov.w	r8, #0
    413e:	4659      	mov	r1, fp
    4140:	2201      	movs	r2, #1
    4142:	4628      	mov	r0, r5
    4144:	9308      	str	r3, [sp, #32]
    4146:	f01f ffab 	bl	240a0 <__lshift>
    414a:	4621      	mov	r1, r4
    414c:	4683      	mov	fp, r0
    414e:	f026 fee5 	bl	2af1c <__mcmp>
    4152:	2800      	cmp	r0, #0
    4154:	dcb2      	bgt.n	40bc <_dtoa_r+0xac4>
    4156:	d102      	bne.n	415e <_dtoa_r+0xb66>
    4158:	9b08      	ldr	r3, [sp, #32]
    415a:	07db      	lsls	r3, r3, #31
    415c:	d4ae      	bmi.n	40bc <_dtoa_r+0xac4>
    415e:	463b      	mov	r3, r7
    4160:	461f      	mov	r7, r3
    4162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    4166:	2a30      	cmp	r2, #48	; 0x30
    4168:	d0fa      	beq.n	4160 <_dtoa_r+0xb68>
    416a:	e6f9      	b.n	3f60 <_dtoa_r+0x968>
    416c:	9a03      	ldr	r2, [sp, #12]
    416e:	429a      	cmp	r2, r3
    4170:	d1a5      	bne.n	40be <_dtoa_r+0xac6>
    4172:	f10a 0a01 	add.w	sl, sl, #1
    4176:	2331      	movs	r3, #49	; 0x31
    4178:	e779      	b.n	406e <_dtoa_r+0xa76>
    417a:	4b14      	ldr	r3, [pc, #80]	; (41cc <_dtoa_r+0xbd4>)
    417c:	f7ff baa7 	b.w	36ce <_dtoa_r+0xd6>
    4180:	9b26      	ldr	r3, [sp, #152]	; 0x98
    4182:	2b00      	cmp	r3, #0
    4184:	f47f aa80 	bne.w	3688 <_dtoa_r+0x90>
    4188:	4b11      	ldr	r3, [pc, #68]	; (41d0 <_dtoa_r+0xbd8>)
    418a:	f7ff baa0 	b.w	36ce <_dtoa_r+0xd6>
    418e:	f1b9 0f00 	cmp.w	r9, #0
    4192:	dc03      	bgt.n	419c <_dtoa_r+0xba4>
    4194:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4196:	2b02      	cmp	r3, #2
    4198:	f73f aecb 	bgt.w	3f32 <_dtoa_r+0x93a>
    419c:	9f03      	ldr	r7, [sp, #12]
    419e:	4621      	mov	r1, r4
    41a0:	4658      	mov	r0, fp
    41a2:	f026 fde7 	bl	2ad74 <quorem>
    41a6:	f100 0330 	add.w	r3, r0, #48	; 0x30
    41aa:	f807 3b01 	strb.w	r3, [r7], #1
    41ae:	9a03      	ldr	r2, [sp, #12]
    41b0:	1aba      	subs	r2, r7, r2
    41b2:	4591      	cmp	r9, r2
    41b4:	ddba      	ble.n	412c <_dtoa_r+0xb34>
    41b6:	4659      	mov	r1, fp
    41b8:	2300      	movs	r3, #0
    41ba:	220a      	movs	r2, #10
    41bc:	4628      	mov	r0, r5
    41be:	f01f fe11 	bl	23de4 <__multadd>
    41c2:	4683      	mov	fp, r0
    41c4:	e7eb      	b.n	419e <_dtoa_r+0xba6>
    41c6:	bf00      	nop
    41c8:	0002f502 	.word	0x0002f502
    41cc:	0002de50 	.word	0x0002de50
    41d0:	0002f484 	.word	0x0002f484

000041d4 <read_ahu_ch>:
}

static ssize_t read_ahu_ch(struct bt_conn *conn,
                           const struct bt_gatt_attr *attr,
                           void *buf, uint16_t len, uint16_t offset)
{
    41d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset,
    41d6:	240e      	movs	r4, #14
    41d8:	9402      	str	r4, [sp, #8]
    41da:	4c04      	ldr	r4, [pc, #16]	; (41ec <read_ahu_ch+0x18>)
    41dc:	9401      	str	r4, [sp, #4]
    41de:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    41e2:	9400      	str	r4, [sp, #0]
    41e4:	f024 fc12 	bl	28a0c <bt_gatt_attr_read>
                             (void *)ahu_packet, sizeof(ahu_packet));
}
    41e8:	b004      	add	sp, #16
    41ea:	bd10      	pop	{r4, pc}
    41ec:	2000340a 	.word	0x2000340a

000041f0 <bt_ready>:
{
    41f0:	b570      	push	{r4, r5, r6, lr}
    err = bt_enable(NULL);
    41f2:	2000      	movs	r0, #0
{
    41f4:	b088      	sub	sp, #32
    err = bt_enable(NULL);
    41f6:	f004 feff 	bl	8ff8 <bt_enable>
    if (err)
    41fa:	4606      	mov	r6, r0
    41fc:	b130      	cbz	r0, 420c <bt_ready+0x1c>
        printk("Bluetooth init failed (err %d)\n", err);
    41fe:	4601      	mov	r1, r0
    4200:	4810      	ldr	r0, [pc, #64]	; (4244 <bt_ready+0x54>)
}
    4202:	b008      	add	sp, #32
    4204:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Bluetooth init failed (err %d)\n", err);
    4208:	f020 be7d 	b.w	24f06 <printk>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    420c:	4d0e      	ldr	r5, [pc, #56]	; (4248 <bt_ready+0x58>)
    printk("Bluetooth initialized\n");
    420e:	480f      	ldr	r0, [pc, #60]	; (424c <bt_ready+0x5c>)
    4210:	f020 fe79 	bl	24f06 <printk>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    4214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4216:	ac03      	add	r4, sp, #12
    4218:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    421a:	682b      	ldr	r3, [r5, #0]
    421c:	6023      	str	r3, [r4, #0]
    421e:	490c      	ldr	r1, [pc, #48]	; (4250 <bt_ready+0x60>)
    4220:	9600      	str	r6, [sp, #0]
    4222:	4633      	mov	r3, r6
    4224:	2202      	movs	r2, #2
    4226:	a803      	add	r0, sp, #12
    4228:	f005 fdce 	bl	9dc8 <bt_le_adv_start>
    if (err)
    422c:	4601      	mov	r1, r0
    422e:	b120      	cbz	r0, 423a <bt_ready+0x4a>
        printk("Advertising failed to start (err %d)\n", err);
    4230:	4808      	ldr	r0, [pc, #32]	; (4254 <bt_ready+0x64>)
    4232:	f020 fe68 	bl	24f06 <printk>
}
    4236:	b008      	add	sp, #32
    4238:	bd70      	pop	{r4, r5, r6, pc}
    printk("Advertising successfully started\n");
    423a:	4807      	ldr	r0, [pc, #28]	; (4258 <bt_ready+0x68>)
    423c:	f020 fe63 	bl	24f06 <printk>
    4240:	e7f9      	b.n	4236 <bt_ready+0x46>
    4242:	bf00      	nop
    4244:	0002d366 	.word	0x0002d366
    4248:	0002b770 	.word	0x0002b770
    424c:	0002d386 	.word	0x0002d386
    4250:	0002b948 	.word	0x0002b948
    4254:	0002d39d 	.word	0x0002d39d
    4258:	0002d3c3 	.word	0x0002d3c3

0000425c <disconnected>:
{
    425c:	b508      	push	{r3, lr}
    printk("Disconnected (reason 0x%02x)\n", reason);
    425e:	4807      	ldr	r0, [pc, #28]	; (427c <disconnected+0x20>)
    4260:	f020 fe51 	bl	24f06 <printk>
    ble_connected = false;
    4264:	4b06      	ldr	r3, [pc, #24]	; (4280 <disconnected+0x24>)
    4266:	2200      	movs	r2, #0
    4268:	701a      	strb	r2, [r3, #0]
    bt_ready();
    426a:	f7ff ffc1 	bl	41f0 <bt_ready>
    bt_conn_unref(g_conn);
    426e:	4b05      	ldr	r3, [pc, #20]	; (4284 <disconnected+0x28>)
    4270:	6818      	ldr	r0, [r3, #0]
}
    4272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bt_conn_unref(g_conn);
    4276:	f023 ba28 	b.w	276ca <bt_conn_unref>
    427a:	bf00      	nop
    427c:	0002d3e5 	.word	0x0002d3e5
    4280:	20003418 	.word	0x20003418
    4284:	20001e28 	.word	0x20001e28

00004288 <gatt_write_cb>:

static void gatt_write_cb(struct bt_conn *conn, uint8_t err,
                          struct bt_gatt_write_params *params)
{
    4288:	b510      	push	{r4, lr}
    428a:	4614      	mov	r4, r2
    if (err != BT_ATT_ERR_SUCCESS)
    428c:	b111      	cbz	r1, 4294 <gatt_write_cb+0xc>
    {
        printk("Write failed: 0x%02X\n", err);
    428e:	4805      	ldr	r0, [pc, #20]	; (42a4 <gatt_write_cb+0x1c>)
    4290:	f020 fe39 	bl	24f06 <printk>
__ssp_bos_icheck3(memset, void *, int)
    4294:	4620      	mov	r0, r4
    4296:	2210      	movs	r2, #16
    }

    (void)memset(params, 0, sizeof(*params));

    // SET_FLAG(flag_write_complete);
}
    4298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    429c:	2100      	movs	r1, #0
    429e:	f026 bbfd 	b.w	2aa9c <memset>
    42a2:	bf00      	nop
    42a4:	0002d403 	.word	0x0002d403

000042a8 <receive_ahu>:

static ssize_t receive_ahu(struct bt_conn *conn,
                           const struct bt_gatt_attr *attr,
                           const void *buf, uint16_t len,
                           uint16_t offset, uint8_t flags)
{
    42a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    42aa:	b085      	sub	sp, #20
    42ac:	461c      	mov	r4, r3
    printk("FIRST\n");
    42ae:	482b      	ldr	r0, [pc, #172]	; (435c <receive_ahu+0xb4>)
{
    42b0:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    42b4:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
    42b8:	4616      	mov	r6, r2
    printk("FIRST\n");
    42ba:	f020 fe24 	bl	24f06 <printk>
    if (len > sizeof(ahu_packet))
    42be:	2c0e      	cmp	r4, #14
    42c0:	d907      	bls.n	42d2 <receive_ahu+0x2a>
    {
        printk("Invalid chrc length\n");
    42c2:	4827      	ldr	r0, [pc, #156]	; (4360 <receive_ahu+0xb8>)
    42c4:	f020 fe1f 	bl	24f06 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    42c8:	f06f 040c 	mvn.w	r4, #12
    {
        printk("add to queue %u\n", data.id);
    }

    return len;
}
    42cc:	4620      	mov	r0, r4
    42ce:	b005      	add	sp, #20
    42d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (offset + len > sizeof(ahu_packet))
    42d2:	193b      	adds	r3, r7, r4
    42d4:	2b0e      	cmp	r3, #14
    42d6:	dd05      	ble.n	42e4 <receive_ahu+0x3c>
        printk("Invalid chrc offset and length\n");
    42d8:	4822      	ldr	r0, [pc, #136]	; (4364 <receive_ahu+0xbc>)
    42da:	f020 fe14 	bl	24f06 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    42de:	f06f 0406 	mvn.w	r4, #6
    42e2:	e7f3      	b.n	42cc <receive_ahu+0x24>
    if (flags != 0)
    42e4:	b12d      	cbz	r5, 42f2 <receive_ahu+0x4a>
        printk("Invalid flags");
    42e6:	4820      	ldr	r0, [pc, #128]	; (4368 <receive_ahu+0xc0>)
    42e8:	f020 fe0d 	bl	24f06 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    42ec:	f06f 040d 	mvn.w	r4, #13
    42f0:	e7ec      	b.n	42cc <receive_ahu+0x24>
    (void)memcpy(ahu_packet + offset, buf, len);
    42f2:	4d1e      	ldr	r5, [pc, #120]	; (436c <receive_ahu+0xc4>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    42f4:	4622      	mov	r2, r4
    42f6:	4631      	mov	r1, r6
    42f8:	19e8      	adds	r0, r5, r7
    42fa:	f026 fbae 	bl	2aa5a <memcpy>
    data.preamble = ahu_packet[0];
    42fe:	782b      	ldrb	r3, [r5, #0]
    4300:	f88d 3000 	strb.w	r3, [sp]
    data.typelen = ahu_packet[1];
    4304:	786b      	ldrb	r3, [r5, #1]
    4306:	f88d 3001 	strb.w	r3, [sp, #1]
    data.id = ahu_packet[2];
    430a:	78ab      	ldrb	r3, [r5, #2]
    430c:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(data.data, &ahu_packet[3], 11 * sizeof(char));
    4310:	f8d5 3003 	ldr.w	r3, [r5, #3]
    4314:	f8cd 3003 	str.w	r3, [sp, #3]
    4318:	f8d5 3007 	ldr.w	r3, [r5, #7]
    431c:	f8cd 3007 	str.w	r3, [sp, #7]
    4320:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    4324:	f8ad 300b 	strh.w	r3, [sp, #11]
    printk("%s\n", data.data);
    4328:	4811      	ldr	r0, [pc, #68]	; (4370 <receive_ahu+0xc8>)
    432a:	7b6b      	ldrb	r3, [r5, #13]
    432c:	f88d 300d 	strb.w	r3, [sp, #13]
    4330:	f10d 0103 	add.w	r1, sp, #3
    4334:	f020 fde7 	bl	24f06 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
    4338:	480e      	ldr	r0, [pc, #56]	; (4374 <receive_ahu+0xcc>)
    433a:	2200      	movs	r2, #0
    433c:	2300      	movs	r3, #0
    433e:	4669      	mov	r1, sp
    4340:	f01d fef4 	bl	2212c <z_impl_k_msgq_put>
    if (k_msgq_put(&command_msgq, &data, K_NO_WAIT) != 0)
    4344:	b118      	cbz	r0, 434e <receive_ahu+0xa6>
		arch_syscall_invoke1(*(uintptr_t *)&msgq, K_SYSCALL_K_MSGQ_PURGE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_msgq_purge(msgq);
    4346:	480b      	ldr	r0, [pc, #44]	; (4374 <receive_ahu+0xcc>)
    4348:	f025 fe87 	bl	2a05a <z_impl_k_msgq_purge>
}
    434c:	e7be      	b.n	42cc <receive_ahu+0x24>
        printk("add to queue %u\n", data.id);
    434e:	f89d 1002 	ldrb.w	r1, [sp, #2]
    4352:	4809      	ldr	r0, [pc, #36]	; (4378 <receive_ahu+0xd0>)
    4354:	f020 fdd7 	bl	24f06 <printk>
    return len;
    4358:	e7b8      	b.n	42cc <receive_ahu+0x24>
    435a:	bf00      	nop
    435c:	0002d419 	.word	0x0002d419
    4360:	0002d420 	.word	0x0002d420
    4364:	0002d435 	.word	0x0002d435
    4368:	0002d455 	.word	0x0002d455
    436c:	2000340a 	.word	0x2000340a
    4370:	0002f5b7 	.word	0x0002f5b7
    4374:	20000b84 	.word	0x20000b84
    4378:	0002d463 	.word	0x0002d463

0000437c <discover_func>:
{
    437c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4380:	4680      	mov	r8, r0
    4382:	b08b      	sub	sp, #44	; 0x2c
    4384:	4614      	mov	r4, r2
    if (attr == NULL)
    4386:	460d      	mov	r5, r1
    4388:	b979      	cbnz	r1, 43aa <discover_func+0x2e>
        if (ahu_handle == 0)
    438a:	4b37      	ldr	r3, [pc, #220]	; (4468 <discover_func+0xec>)
    438c:	881b      	ldrh	r3, [r3, #0]
    438e:	b913      	cbnz	r3, 4396 <discover_func+0x1a>
            printk("Did not discover ahu (%x)", ahu_handle);
    4390:	4836      	ldr	r0, [pc, #216]	; (446c <discover_func+0xf0>)
    4392:	f020 fdb8 	bl	24f06 <printk>
__ssp_bos_icheck3(memset, void *, int)
    4396:	2214      	movs	r2, #20
    4398:	2100      	movs	r1, #0
    439a:	4620      	mov	r0, r4
    439c:	f026 fb7e 	bl	2aa9c <memset>
        return BT_GATT_ITER_STOP;
    43a0:	2600      	movs	r6, #0
}
    43a2:	4630      	mov	r0, r6
    43a4:	b00b      	add	sp, #44	; 0x2c
    43a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    43aa:	4b31      	ldr	r3, [pc, #196]	; (4470 <discover_func+0xf4>)
    43ac:	f3bf 8f5b 	dmb	ish
    43b0:	2201      	movs	r2, #1
    43b2:	e853 1f00 	ldrex	r1, [r3]
    43b6:	e843 2000 	strex	r0, r2, [r3]
    43ba:	2800      	cmp	r0, #0
    43bc:	d1f9      	bne.n	43b2 <discover_func+0x36>
    43be:	f3bf 8f5b 	dmb	ish
    printk("[ATTRIBUTE] handle %u\n", attr->handle);
    43c2:	482c      	ldr	r0, [pc, #176]	; (4474 <discover_func+0xf8>)
    43c4:	8a29      	ldrh	r1, [r5, #16]
    43c6:	f020 fd9e 	bl	24f06 <printk>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    43ca:	7c26      	ldrb	r6, [r4, #16]
    43cc:	bb56      	cbnz	r6, 4424 <discover_func+0xa8>
        bt_uuid_cmp(params->uuid, AHU_UUID) == 0)
    43ce:	4b2a      	ldr	r3, [pc, #168]	; (4478 <discover_func+0xfc>)
    43d0:	f8d4 c000 	ldr.w	ip, [r4]
    43d4:	466a      	mov	r2, sp
    43d6:	f103 0910 	add.w	r9, r3, #16
    43da:	4696      	mov	lr, r2
    43dc:	6818      	ldr	r0, [r3, #0]
    43de:	6859      	ldr	r1, [r3, #4]
    43e0:	4617      	mov	r7, r2
    43e2:	c703      	stmia	r7!, {r0, r1}
    43e4:	3308      	adds	r3, #8
    43e6:	454b      	cmp	r3, r9
    43e8:	463a      	mov	r2, r7
    43ea:	d1f7      	bne.n	43dc <discover_func+0x60>
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	703b      	strb	r3, [r7, #0]
    43f0:	4671      	mov	r1, lr
    43f2:	4660      	mov	r0, ip
    43f4:	f022 fd0a 	bl	26e0c <bt_uuid_cmp>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    43f8:	4607      	mov	r7, r0
    43fa:	b998      	cbnz	r0, 4424 <discover_func+0xa8>
        printk("Found test service\n");
    43fc:	481f      	ldr	r0, [pc, #124]	; (447c <discover_func+0x100>)
    43fe:	f020 fd82 	bl	24f06 <printk>
        params->start_handle = attr->handle + 1;
    4402:	8a2b      	ldrh	r3, [r5, #16]
        params->uuid = NULL;
    4404:	6027      	str	r7, [r4, #0]
        params->start_handle = attr->handle + 1;
    4406:	3301      	adds	r3, #1
    4408:	8123      	strh	r3, [r4, #8]
        params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    440a:	2303      	movs	r3, #3
        err = bt_gatt_discover(conn, params);
    440c:	4621      	mov	r1, r4
        params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    440e:	7423      	strb	r3, [r4, #16]
        err = bt_gatt_discover(conn, params);
    4410:	4640      	mov	r0, r8
    4412:	f008 ffab 	bl	d36c <bt_gatt_discover>
        if (err != 0)
    4416:	4601      	mov	r1, r0
    4418:	2800      	cmp	r0, #0
    441a:	d0c2      	beq.n	43a2 <discover_func+0x26>
            printk("Discover failed (err %d)\n", err);
    441c:	4818      	ldr	r0, [pc, #96]	; (4480 <discover_func+0x104>)
    441e:	f020 fd72 	bl	24f06 <printk>
        return BT_GATT_ITER_STOP;
    4422:	e7be      	b.n	43a2 <discover_func+0x26>
    else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC)
    4424:	7c23      	ldrb	r3, [r4, #16]
    4426:	2b03      	cmp	r3, #3
    4428:	d11b      	bne.n	4462 <discover_func+0xe6>
        struct bt_gatt_chrc *chrc = (struct bt_gatt_chrc *)attr->user_data;
    442a:	68ed      	ldr	r5, [r5, #12]
        if (bt_uuid_cmp(chrc->uuid, ACU_CH_UUID) == 0)
    442c:	4b15      	ldr	r3, [pc, #84]	; (4484 <discover_func+0x108>)
    442e:	682e      	ldr	r6, [r5, #0]
    4430:	aa05      	add	r2, sp, #20
    4432:	f103 0c10 	add.w	ip, r3, #16
    4436:	4617      	mov	r7, r2
    4438:	6818      	ldr	r0, [r3, #0]
    443a:	6859      	ldr	r1, [r3, #4]
    443c:	4614      	mov	r4, r2
    443e:	c403      	stmia	r4!, {r0, r1}
    4440:	3308      	adds	r3, #8
    4442:	4563      	cmp	r3, ip
    4444:	4622      	mov	r2, r4
    4446:	d1f7      	bne.n	4438 <discover_func+0xbc>
    4448:	781b      	ldrb	r3, [r3, #0]
    444a:	7023      	strb	r3, [r4, #0]
    444c:	4639      	mov	r1, r7
    444e:	4630      	mov	r0, r6
    4450:	f022 fcdc 	bl	26e0c <bt_uuid_cmp>
    4454:	b928      	cbnz	r0, 4462 <discover_func+0xe6>
            printk("Found chrc\n");
    4456:	480c      	ldr	r0, [pc, #48]	; (4488 <discover_func+0x10c>)
    4458:	f020 fd55 	bl	24f06 <printk>
            ahu_handle = chrc->value_handle;
    445c:	4b02      	ldr	r3, [pc, #8]	; (4468 <discover_func+0xec>)
    445e:	88aa      	ldrh	r2, [r5, #4]
    4460:	801a      	strh	r2, [r3, #0]
    return BT_GATT_ITER_CONTINUE;
    4462:	2601      	movs	r6, #1
    4464:	e79d      	b.n	43a2 <discover_func+0x26>
    4466:	bf00      	nop
    4468:	200033e4 	.word	0x200033e4
    446c:	0002d474 	.word	0x0002d474
    4470:	20001e24 	.word	0x20001e24
    4474:	0002d48e 	.word	0x0002d48e
    4478:	0002b784 	.word	0x0002b784
    447c:	0002d4a5 	.word	0x0002d4a5
    4480:	0002d4b9 	.word	0x0002d4b9
    4484:	0002b795 	.word	0x0002b795
    4488:	0002d4d3 	.word	0x0002d4d3

0000448c <auth_passkey_display>:
{
    448c:	b570      	push	{r4, r5, r6, lr}
    448e:	b092      	sub	sp, #72	; 0x48
    4490:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4492:	f023 f9e2 	bl	2785a <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4496:	7803      	ldrb	r3, [r0, #0]
    4498:	4604      	mov	r4, r0
    449a:	ad07      	add	r5, sp, #28
    449c:	2b03      	cmp	r3, #3
    449e:	d825      	bhi.n	44ec <auth_passkey_display+0x60>
    44a0:	e8df f003 	tbb	[pc, r3]
    44a4:	22201e02 	.word	0x22201e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    44a8:	4913      	ldr	r1, [pc, #76]	; (44f8 <auth_passkey_display+0x6c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    44aa:	4628      	mov	r0, r5
    44ac:	f026 fc23 	bl	2acf6 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    44b0:	79a3      	ldrb	r3, [r4, #6]
    44b2:	9505      	str	r5, [sp, #20]
    44b4:	7862      	ldrb	r2, [r4, #1]
    44b6:	9204      	str	r2, [sp, #16]
    44b8:	78a2      	ldrb	r2, [r4, #2]
    44ba:	9203      	str	r2, [sp, #12]
    44bc:	78e2      	ldrb	r2, [r4, #3]
    44be:	9202      	str	r2, [sp, #8]
    44c0:	7922      	ldrb	r2, [r4, #4]
    44c2:	9201      	str	r2, [sp, #4]
    44c4:	7962      	ldrb	r2, [r4, #5]
    44c6:	9200      	str	r2, [sp, #0]
    44c8:	211e      	movs	r1, #30
    44ca:	4a0c      	ldr	r2, [pc, #48]	; (44fc <auth_passkey_display+0x70>)
    44cc:	a80a      	add	r0, sp, #40	; 0x28
    44ce:	f020 fd27 	bl	24f20 <snprintk>
    printk("Passkey for %s: %06u\n", addr, passkey);
    44d2:	480b      	ldr	r0, [pc, #44]	; (4500 <auth_passkey_display+0x74>)
    44d4:	4632      	mov	r2, r6
    44d6:	a90a      	add	r1, sp, #40	; 0x28
    44d8:	f020 fd15 	bl	24f06 <printk>
}
    44dc:	b012      	add	sp, #72	; 0x48
    44de:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    44e0:	4908      	ldr	r1, [pc, #32]	; (4504 <auth_passkey_display+0x78>)
    44e2:	e7e2      	b.n	44aa <auth_passkey_display+0x1e>
		strcpy(type, "public-id");
    44e4:	4908      	ldr	r1, [pc, #32]	; (4508 <auth_passkey_display+0x7c>)
    44e6:	e7e0      	b.n	44aa <auth_passkey_display+0x1e>
		strcpy(type, "random-id");
    44e8:	4908      	ldr	r1, [pc, #32]	; (450c <auth_passkey_display+0x80>)
    44ea:	e7de      	b.n	44aa <auth_passkey_display+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    44ec:	4a08      	ldr	r2, [pc, #32]	; (4510 <auth_passkey_display+0x84>)
    44ee:	210a      	movs	r1, #10
    44f0:	4628      	mov	r0, r5
    44f2:	f020 fd15 	bl	24f20 <snprintk>
		break;
    44f6:	e7db      	b.n	44b0 <auth_passkey_display+0x24>
    44f8:	0002d4df 	.word	0x0002d4df
    44fc:	0002d501 	.word	0x0002d501
    4500:	0002d524 	.word	0x0002d524
    4504:	0002d4e6 	.word	0x0002d4e6
    4508:	0002d4ed 	.word	0x0002d4ed
    450c:	0002d4f7 	.word	0x0002d4f7
    4510:	0002f0d7 	.word	0x0002f0d7

00004514 <connected>:
{
    4514:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4516:	4d14      	ldr	r5, [pc, #80]	; (4568 <connected+0x54>)
    4518:	4604      	mov	r4, r0
    if (err)
    451a:	b131      	cbz	r1, 452a <connected+0x16>
        printk("Connection failed (err 0x%02x)\n", err);
    451c:	4813      	ldr	r0, [pc, #76]	; (456c <connected+0x58>)
    451e:	f020 fcf2 	bl	24f06 <printk>
        ble_connected = false;
    4522:	2300      	movs	r3, #0
    4524:	702b      	strb	r3, [r5, #0]
}
    4526:	b003      	add	sp, #12
    4528:	bd30      	pop	{r4, r5, pc}
        printk("BLE Connected to Device\n");
    452a:	4811      	ldr	r0, [pc, #68]	; (4570 <connected+0x5c>)
    452c:	f020 fceb 	bl	24f06 <printk>
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    4530:	4a10      	ldr	r2, [pc, #64]	; (4574 <connected+0x60>)
        ble_connected = true;
    4532:	2301      	movs	r3, #1
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    4534:	f8d2 0036 	ldr.w	r0, [r2, #54]	; 0x36
    4538:	f8d2 103a 	ldr.w	r1, [r2, #58]	; 0x3a
        ble_connected = true;
    453c:	702b      	strb	r3, [r5, #0]
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    453e:	466b      	mov	r3, sp
    4540:	c303      	stmia	r3!, {r0, r1}
        g_conn = bt_conn_ref(conn);
    4542:	4620      	mov	r0, r4
    4544:	f023 f8a6 	bl	27694 <bt_conn_ref>
    4548:	4b0b      	ldr	r3, [pc, #44]	; (4578 <connected+0x64>)
        if (bt_conn_le_param_update(conn, param) < 0)
    454a:	4669      	mov	r1, sp
        g_conn = bt_conn_ref(conn);
    454c:	6018      	str	r0, [r3, #0]
        if (bt_conn_le_param_update(conn, param) < 0)
    454e:	4620      	mov	r0, r4
    4550:	f023 f9e6 	bl	27920 <bt_conn_le_param_update>
    4554:	2800      	cmp	r0, #0
    4556:	dae6      	bge.n	4526 <connected+0x12>
                printk("Connection Update Error\n");
    4558:	4c08      	ldr	r4, [pc, #32]	; (457c <connected+0x68>)
    455a:	4620      	mov	r0, r4
    455c:	f020 fcd3 	bl	24f06 <printk>
                k_msleep(10);
    4560:	200a      	movs	r0, #10
    4562:	f020 fc53 	bl	24e0c <k_msleep.isra.0>
            while (1)
    4566:	e7f8      	b.n	455a <connected+0x46>
    4568:	20003418 	.word	0x20003418
    456c:	0002d53a 	.word	0x0002d53a
    4570:	0002d55a 	.word	0x0002d55a
    4574:	0002b770 	.word	0x0002b770
    4578:	20001e28 	.word	0x20001e28
    457c:	0002d573 	.word	0x0002d573

00004580 <thread_send_message>:
        }
    }
}

void thread_send_message(void)
{
    4580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
    4584:	4d45      	ldr	r5, [pc, #276]	; (469c <thread_send_message+0x11c>)

            char scu_packet[14] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, '\0'};
            scu_packet[0] = data.preamble;
            scu_packet[1] = data.typelen;
            scu_packet[2] = data.id;
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    4586:	4c46      	ldr	r4, [pc, #280]	; (46a0 <thread_send_message+0x120>)
                int value = (uint8_t)data.data;
                sprintf(reading, "%-9d", value);
            }
            memcpy(&scu_packet[3], &reading, 10 * sizeof(char));

            gatt_write(ahu_handle, scu_packet);
    4588:	4e46      	ldr	r6, [pc, #280]	; (46a4 <thread_send_message+0x124>)
{
    458a:	b092      	sub	sp, #72	; 0x48
    458c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4590:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4594:	a90e      	add	r1, sp, #56	; 0x38
    4596:	4628      	mov	r0, r5
    4598:	f01d fe1e 	bl	221d8 <z_impl_k_msgq_get>
        if (k_msgq_get(&tosend_msgq, &data, K_FOREVER) == 0)
    459c:	2800      	cmp	r0, #0
    459e:	d16d      	bne.n	467c <thread_send_message+0xfc>
            char scu_packet[14] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, '\0'};
    45a0:	4b41      	ldr	r3, [pc, #260]	; (46a8 <thread_send_message+0x128>)
    45a2:	aa0a      	add	r2, sp, #40	; 0x28
    45a4:	f103 0e08 	add.w	lr, r3, #8
    45a8:	4617      	mov	r7, r2
    45aa:	6818      	ldr	r0, [r3, #0]
    45ac:	6859      	ldr	r1, [r3, #4]
    45ae:	4694      	mov	ip, r2
    45b0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    45b4:	3308      	adds	r3, #8
    45b6:	4573      	cmp	r3, lr
    45b8:	4662      	mov	r2, ip
    45ba:	d1f6      	bne.n	45aa <thread_send_message+0x2a>
    45bc:	6818      	ldr	r0, [r3, #0]
    45be:	889b      	ldrh	r3, [r3, #4]
    45c0:	f8cc 0000 	str.w	r0, [ip]
    45c4:	f8ac 3004 	strh.w	r3, [ip, #4]
            scu_packet[0] = data.preamble;
    45c8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    45cc:	6820      	ldr	r0, [r4, #0]
    45ce:	6861      	ldr	r1, [r4, #4]
            scu_packet[0] = data.preamble;
    45d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
            scu_packet[1] = data.typelen;
    45d4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
            scu_packet[2] = data.id;
    45d8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
            scu_packet[1] = data.typelen;
    45dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    45e0:	ab07      	add	r3, sp, #28
    45e2:	c303      	stmia	r3!, {r0, r1}
            scu_packet[2] = data.id;
    45e4:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    45e8:	3a08      	subs	r2, #8
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    45ea:	8921      	ldrh	r1, [r4, #8]
    45ec:	8019      	strh	r1, [r3, #0]
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    45ee:	2a02      	cmp	r2, #2
                sprintf(reading, "%-9.1f", data.data);
    45f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    45f4:	d946      	bls.n	4684 <thread_send_message+0x104>
                sprintf(reading, "%-9.1f", data.data);
    45f6:	e9cd 0100 	strd	r0, r1, [sp]
    45fa:	4b2c      	ldr	r3, [pc, #176]	; (46ac <thread_send_message+0x12c>)
    45fc:	220a      	movs	r2, #10
    45fe:	2100      	movs	r1, #0
    4600:	a807      	add	r0, sp, #28
    4602:	f026 fb5e 	bl	2acc2 <__sprintf_chk>
            memcpy(&scu_packet[3], &reading, 10 * sizeof(char));
    4606:	ab07      	add	r3, sp, #28
    4608:	cb03      	ldmia	r3!, {r0, r1}
    460a:	881b      	ldrh	r3, [r3, #0]
    460c:	f8cd 102f 	str.w	r1, [sp, #47]	; 0x2f
    4610:	f8ad 3033 	strh.w	r3, [sp, #51]	; 0x33
    printk("%u,%u,%u,%c%c%c%c%c%c\n", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], packet[8]);
    4614:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    4618:	f8cd 002b 	str.w	r0, [sp, #43]	; 0x2b
    461c:	9305      	str	r3, [sp, #20]
    461e:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    4622:	9304      	str	r3, [sp, #16]
    4624:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
    4628:	9303      	str	r3, [sp, #12]
    462a:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
    462e:	9302      	str	r3, [sp, #8]
    4630:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    4634:	9301      	str	r3, [sp, #4]
    4636:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    463a:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    463e:	481c      	ldr	r0, [pc, #112]	; (46b0 <thread_send_message+0x130>)
    4640:	9300      	str	r3, [sp, #0]
    4642:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
    4646:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
            gatt_write(ahu_handle, scu_packet);
    464a:	f8b6 8000 	ldrh.w	r8, [r6]
    printk("%u,%u,%u,%c%c%c%c%c%c\n", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], packet[8]);
    464e:	f020 fc5a 	bl	24f06 <printk>
    write_params.data = packet;
    4652:	4918      	ldr	r1, [pc, #96]	; (46b4 <thread_send_message+0x134>)
    write_params.length = 14 * sizeof(char);
    4654:	230e      	movs	r3, #14
    4656:	818b      	strh	r3, [r1, #12]
    write_params.func = gatt_write_cb;
    4658:	4b17      	ldr	r3, [pc, #92]	; (46b8 <thread_send_message+0x138>)
    465a:	600b      	str	r3, [r1, #0]
    if (bt_gatt_write(g_conn, &write_params) != 0)
    465c:	4b17      	ldr	r3, [pc, #92]	; (46bc <thread_send_message+0x13c>)
    write_params.data = packet;
    465e:	608f      	str	r7, [r1, #8]
    if (bt_gatt_write(g_conn, &write_params) != 0)
    4660:	6818      	ldr	r0, [r3, #0]
    write_params.handle = handle;
    4662:	f8a1 8004 	strh.w	r8, [r1, #4]
    if (bt_gatt_write(g_conn, &write_params) != 0)
    4666:	f009 fa67 	bl	db38 <bt_gatt_write>
    466a:	b110      	cbz	r0, 4672 <thread_send_message+0xf2>
        printk("fail\n");
    466c:	4814      	ldr	r0, [pc, #80]	; (46c0 <thread_send_message+0x140>)
    466e:	f020 fc4a 	bl	24f06 <printk>

            memset(&data, 0, sizeof(struct return_packet));
    4672:	2210      	movs	r2, #16
    4674:	2100      	movs	r1, #0
    4676:	a80e      	add	r0, sp, #56	; 0x38
    4678:	f026 fa10 	bl	2aa9c <memset>
        }
        k_msleep(100);
    467c:	2064      	movs	r0, #100	; 0x64
    467e:	f020 fbc5 	bl	24e0c <k_msleep.isra.0>
        if (k_msgq_get(&tosend_msgq, &data, K_FOREVER) == 0)
    4682:	e783      	b.n	458c <thread_send_message+0xc>
                int value = (uint8_t)data.data;
    4684:	f7fc f95a 	bl	93c <__aeabi_d2uiz>
    4688:	b2c0      	uxtb	r0, r0
    468a:	9000      	str	r0, [sp, #0]
                sprintf(reading, "%-9d", value);
    468c:	4b0d      	ldr	r3, [pc, #52]	; (46c4 <thread_send_message+0x144>)
    468e:	220a      	movs	r2, #10
    4690:	2100      	movs	r1, #0
    4692:	a807      	add	r0, sp, #28
    4694:	f026 fb15 	bl	2acc2 <__sprintf_chk>
    4698:	e7b5      	b.n	4606 <thread_send_message+0x86>
    469a:	bf00      	nop
    469c:	20000bb4 	.word	0x20000bb4
    46a0:	0002b7bc 	.word	0x0002b7bc
    46a4:	200033e4 	.word	0x200033e4
    46a8:	0002b7ae 	.word	0x0002b7ae
    46ac:	0002d58c 	.word	0x0002d58c
    46b0:	0002d598 	.word	0x0002d598
    46b4:	20001e2c 	.word	0x20001e2c
    46b8:	00004289 	.word	0x00004289
    46bc:	20001e28 	.word	0x20001e28
    46c0:	0002d5af 	.word	0x0002d5af
    46c4:	0002d593 	.word	0x0002d593

000046c8 <thread_ble_connect>:
 * @brief Enabled bluetooth, and sets connection callback handler, awaits
 *          central to connect to peripheral (mobile)
 *
 */
void thread_ble_connect(void)
{
    46c8:	b508      	push	{r3, lr}

    bt_ready();
    46ca:	f7ff fd91 	bl	41f0 <bt_ready>

    bt_conn_cb_register(&conn_callbacks);
    46ce:	4805      	ldr	r0, [pc, #20]	; (46e4 <thread_ble_connect+0x1c>)
    46d0:	f006 fbd6 	bl	ae80 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&auth_cb_display);
    46d4:	4804      	ldr	r0, [pc, #16]	; (46e8 <thread_ble_connect+0x20>)
    46d6:	f006 fdf7 	bl	b2c8 <bt_conn_auth_cb_register>

    while (1)
    {
        k_msleep(SHORT_SLEEP_MS);
    46da:	2032      	movs	r0, #50	; 0x32
    46dc:	f020 fb96 	bl	24e0c <k_msleep.isra.0>
    while (1)
    46e0:	e7fb      	b.n	46da <thread_ble_connect+0x12>
    46e2:	bf00      	nop
    46e4:	20000194 	.word	0x20000194
    46e8:	20000170 	.word	0x20000170

000046ec <thread_ble_discover>:
    }
}

void thread_ble_discover(void *arg1, void *arg2, void *arg3)
{
    46ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int flag = 0;
    while (1)
    {
        while (!ble_connected)
    46f0:	4f1e      	ldr	r7, [pc, #120]	; (476c <thread_ble_discover+0x80>)
    printk("Discovering services and characteristics\n");
    46f2:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4770 <thread_ble_discover+0x84>
    discover_params.uuid = scu_svc_uuid;
    46f6:	4c1f      	ldr	r4, [pc, #124]	; (4774 <thread_ble_discover+0x88>)
    int flag = 0;
    46f8:	2500      	movs	r5, #0
        while (!ble_connected)
    46fa:	783e      	ldrb	r6, [r7, #0]
    46fc:	b35e      	cbz	r6, 4756 <thread_ble_discover+0x6a>
        {
            flag = 0;
            k_msleep(1000);
        }
        if (flag == 0)
    46fe:	bb2d      	cbnz	r5, 474c <thread_ble_discover+0x60>
    printk("Discovering services and characteristics\n");
    4700:	4640      	mov	r0, r8
    4702:	f020 fc00 	bl	24f06 <printk>
    discover_params.uuid = scu_svc_uuid;
    4706:	4b1c      	ldr	r3, [pc, #112]	; (4778 <thread_ble_discover+0x8c>)
    4708:	6023      	str	r3, [r4, #0]
    discover_params.func = discover_func;
    470a:	4b1c      	ldr	r3, [pc, #112]	; (477c <thread_ble_discover+0x90>)
    470c:	6063      	str	r3, [r4, #4]
    discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    470e:	2301      	movs	r3, #1
    4710:	8123      	strh	r3, [r4, #8]
    discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    4712:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4716:	81e3      	strh	r3, [r4, #14]
    err = bt_gatt_discover(g_conn, &discover_params);
    4718:	4b19      	ldr	r3, [pc, #100]	; (4780 <thread_ble_discover+0x94>)
    471a:	4916      	ldr	r1, [pc, #88]	; (4774 <thread_ble_discover+0x88>)
    471c:	6818      	ldr	r0, [r3, #0]
    discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    471e:	7425      	strb	r5, [r4, #16]
    err = bt_gatt_discover(g_conn, &discover_params);
    4720:	f008 fe24 	bl	d36c <bt_gatt_discover>
    if (err != 0)
    4724:	4601      	mov	r1, r0
    4726:	b110      	cbz	r0, 472e <thread_ble_discover+0x42>
        printk("Discover failed(err %d)\n", err);
    4728:	4816      	ldr	r0, [pc, #88]	; (4784 <thread_ble_discover+0x98>)
    472a:	f020 fbec 	bl	24f06 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    472e:	4d16      	ldr	r5, [pc, #88]	; (4788 <thread_ble_discover+0x9c>)
    4730:	f3bf 8f5b 	dmb	ish
    4734:	682b      	ldr	r3, [r5, #0]
    4736:	f3bf 8f5b 	dmb	ish
    WAIT_FOR_FLAG(flag_discover_complete);
    473a:	b193      	cbz	r3, 4762 <thread_ble_discover+0x76>
    printk("Discover complete\n");
    473c:	4813      	ldr	r0, [pc, #76]	; (478c <thread_ble_discover+0xa0>)
    473e:	f020 fbe2 	bl	24f06 <printk>
    printk("%x\n", ahu_handle);
    4742:	4b13      	ldr	r3, [pc, #76]	; (4790 <thread_ble_discover+0xa4>)
    4744:	4813      	ldr	r0, [pc, #76]	; (4794 <thread_ble_discover+0xa8>)
    4746:	8819      	ldrh	r1, [r3, #0]
    4748:	f020 fbdd 	bl	24f06 <printk>
        {
            gatt_discover();
            flag = 1;
        }
        k_msleep(100);
    474c:	2064      	movs	r0, #100	; 0x64
    474e:	f020 fb5d 	bl	24e0c <k_msleep.isra.0>
        while (!ble_connected)
    4752:	2501      	movs	r5, #1
    4754:	e7d1      	b.n	46fa <thread_ble_discover+0xe>
            k_msleep(1000);
    4756:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    475a:	f020 fb57 	bl	24e0c <k_msleep.isra.0>
            flag = 0;
    475e:	4635      	mov	r5, r6
    4760:	e7cb      	b.n	46fa <thread_ble_discover+0xe>
	return z_impl_k_sleep(timeout);
    4762:	2100      	movs	r1, #0
    4764:	2021      	movs	r0, #33	; 0x21
    4766:	f01e fb63 	bl	22e30 <z_impl_k_sleep>
    476a:	e7e1      	b.n	4730 <thread_ble_discover+0x44>
    476c:	20003418 	.word	0x20003418
    4770:	0002d5b5 	.word	0x0002d5b5
    4774:	20001e10 	.word	0x20001e10
    4778:	20000a02 	.word	0x20000a02
    477c:	0000437d 	.word	0x0000437d
    4780:	20001e28 	.word	0x20001e28
    4784:	0002d5df 	.word	0x0002d5df
    4788:	20001e24 	.word	0x20001e24
    478c:	0002d5f8 	.word	0x0002d5f8
    4790:	200033e4 	.word	0x200033e4
    4794:	0002db78 	.word	0x0002db78

00004798 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    4798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    479c:	4605      	mov	r5, r0
    479e:	b08b      	sub	sp, #44	; 0x2c
    47a0:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    47a2:	f015 0303 	ands.w	r3, r5, #3
    47a6:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    47aa:	9203      	str	r2, [sp, #12]
    47ac:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    47ae:	9301      	str	r3, [sp, #4]
    47b0:	f040 81f5 	bne.w	4b9e <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    47b4:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    47b6:	2d00      	cmp	r5, #0
    47b8:	f040 81f4 	bne.w	4ba4 <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    47bc:	f001 0607 	and.w	r6, r1, #7
    47c0:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    47c2:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    47c6:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    47ca:	2704      	movs	r7, #4
	s = fmt--;
    47cc:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    47ce:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    47d2:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    47d6:	4652      	mov	r2, sl
	size = sizeof(char *);
    47d8:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    47da:	b105      	cbz	r5, 47de <cbvprintf_package+0x46>
				*(const char **)buf = s;
    47dc:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    47de:	9b03      	ldr	r3, [sp, #12]
    47e0:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    47e4:	4bce      	ldr	r3, [pc, #824]	; (4b20 <cbvprintf_package+0x388>)
    47e6:	4298      	cmp	r0, r3
    47e8:	f0c0 812a 	bcc.w	4a40 <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    47ec:	4bcd      	ldr	r3, [pc, #820]	; (4b24 <cbvprintf_package+0x38c>)
    47ee:	4298      	cmp	r0, r3
    47f0:	f080 8126 	bcs.w	4a40 <cbvprintf_package+0x2a8>
    47f4:	f1be 0f00 	cmp.w	lr, #0
    47f8:	f000 813c 	beq.w	4a74 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    47fc:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    4800:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    4804:	f1be 0f00 	cmp.w	lr, #0
    4808:	f000 811d 	beq.w	4a46 <cbvprintf_package+0x2ae>
    480c:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    4810:	f0c0 8119 	bcc.w	4a46 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    4814:	f06f 0015 	mvn.w	r0, #21
    4818:	e0f5      	b.n	4a06 <cbvprintf_package+0x26e>
		if (!parsing) {
    481a:	b932      	cbnz	r2, 482a <cbvprintf_package+0x92>
			if (*fmt == '%') {
    481c:	2b25      	cmp	r3, #37	; 0x25
    481e:	f040 812c 	bne.w	4a7a <cbvprintf_package+0x2e2>
				parsing = true;
    4822:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    4824:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    4826:	46b9      	mov	r9, r7
    4828:	e127      	b.n	4a7a <cbvprintf_package+0x2e2>
		switch (*fmt) {
    482a:	2b2b      	cmp	r3, #43	; 0x2b
    482c:	d824      	bhi.n	4878 <cbvprintf_package+0xe0>
    482e:	2b1f      	cmp	r3, #31
    4830:	d801      	bhi.n	4836 <cbvprintf_package+0x9e>
			parsing = false;
    4832:	2200      	movs	r2, #0
    4834:	e121      	b.n	4a7a <cbvprintf_package+0x2e2>
		switch (*fmt) {
    4836:	f1a3 0020 	sub.w	r0, r3, #32
    483a:	280b      	cmp	r0, #11
    483c:	d8f9      	bhi.n	4832 <cbvprintf_package+0x9a>
    483e:	f20f 0c08 	addw	ip, pc, #8
    4842:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    4846:	bf00      	nop
    4848:	00004a7b 	.word	0x00004a7b
    484c:	00004833 	.word	0x00004833
    4850:	00004833 	.word	0x00004833
    4854:	00004a7b 	.word	0x00004a7b
    4858:	00004833 	.word	0x00004833
    485c:	00004833 	.word	0x00004833
    4860:	00004833 	.word	0x00004833
    4864:	00004833 	.word	0x00004833
    4868:	00004833 	.word	0x00004833
    486c:	00004833 	.word	0x00004833
    4870:	00004a1f 	.word	0x00004a1f
    4874:	00004a7b 	.word	0x00004a7b
    4878:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    487c:	fa5f fc80 	uxtb.w	ip, r0
    4880:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    4884:	d8d5      	bhi.n	4832 <cbvprintf_package+0x9a>
    4886:	284d      	cmp	r0, #77	; 0x4d
    4888:	d8d3      	bhi.n	4832 <cbvprintf_package+0x9a>
    488a:	f20f 0c08 	addw	ip, pc, #8
    488e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    4892:	bf00      	nop
    4894:	00004a7b 	.word	0x00004a7b
    4898:	00004a7b 	.word	0x00004a7b
    489c:	00004833 	.word	0x00004833
    48a0:	00004a7b 	.word	0x00004a7b
    48a4:	00004a7b 	.word	0x00004a7b
    48a8:	00004a7b 	.word	0x00004a7b
    48ac:	00004a7b 	.word	0x00004a7b
    48b0:	00004a7b 	.word	0x00004a7b
    48b4:	00004a7b 	.word	0x00004a7b
    48b8:	00004a7b 	.word	0x00004a7b
    48bc:	00004a7b 	.word	0x00004a7b
    48c0:	00004a7b 	.word	0x00004a7b
    48c4:	00004a7b 	.word	0x00004a7b
    48c8:	00004833 	.word	0x00004833
    48cc:	00004833 	.word	0x00004833
    48d0:	00004833 	.word	0x00004833
    48d4:	00004833 	.word	0x00004833
    48d8:	00004833 	.word	0x00004833
    48dc:	00004833 	.word	0x00004833
    48e0:	00004833 	.word	0x00004833
    48e4:	000049e7 	.word	0x000049e7
    48e8:	00004833 	.word	0x00004833
    48ec:	00004833 	.word	0x00004833
    48f0:	00004833 	.word	0x00004833
    48f4:	000049e7 	.word	0x000049e7
    48f8:	000049e7 	.word	0x000049e7
    48fc:	000049e7 	.word	0x000049e7
    4900:	00004833 	.word	0x00004833
    4904:	00004833 	.word	0x00004833
    4908:	00004833 	.word	0x00004833
    490c:	00004833 	.word	0x00004833
    4910:	00004a7b 	.word	0x00004a7b
    4914:	00004833 	.word	0x00004833
    4918:	00004833 	.word	0x00004833
    491c:	00004833 	.word	0x00004833
    4920:	00004833 	.word	0x00004833
    4924:	00004833 	.word	0x00004833
    4928:	00004833 	.word	0x00004833
    492c:	00004833 	.word	0x00004833
    4930:	00004833 	.word	0x00004833
    4934:	00004833 	.word	0x00004833
    4938:	00004833 	.word	0x00004833
    493c:	00004833 	.word	0x00004833
    4940:	000049cd 	.word	0x000049cd
    4944:	00004833 	.word	0x00004833
    4948:	00004833 	.word	0x00004833
    494c:	00004833 	.word	0x00004833
    4950:	00004833 	.word	0x00004833
    4954:	00004833 	.word	0x00004833
    4958:	00004833 	.word	0x00004833
    495c:	00004833 	.word	0x00004833
    4960:	00004833 	.word	0x00004833
    4964:	000049e7 	.word	0x000049e7
    4968:	00004833 	.word	0x00004833
    496c:	000049cd 	.word	0x000049cd
    4970:	000049cd 	.word	0x000049cd
    4974:	000049e7 	.word	0x000049e7
    4978:	000049e7 	.word	0x000049e7
    497c:	000049e7 	.word	0x000049e7
    4980:	00004a7b 	.word	0x00004a7b
    4984:	000049cd 	.word	0x000049cd
    4988:	00004a15 	.word	0x00004a15
    498c:	00004833 	.word	0x00004833
    4990:	00004a7b 	.word	0x00004a7b
    4994:	00004833 	.word	0x00004833
    4998:	00004a19 	.word	0x00004a19
    499c:	000049cd 	.word	0x000049cd
    49a0:	00004a19 	.word	0x00004a19
    49a4:	00004833 	.word	0x00004833
    49a8:	00004833 	.word	0x00004833
    49ac:	00004a19 	.word	0x00004a19
    49b0:	00004825 	.word	0x00004825
    49b4:	000049cd 	.word	0x000049cd
    49b8:	00004833 	.word	0x00004833
    49bc:	00004833 	.word	0x00004833
    49c0:	000049cd 	.word	0x000049cd
    49c4:	00004833 	.word	0x00004833
    49c8:	00004825 	.word	0x00004825
			if (fmt[-1] == 'l') {
    49cc:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    49d0:	2a6c      	cmp	r2, #108	; 0x6c
    49d2:	d123      	bne.n	4a1c <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    49d4:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    49d8:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    49da:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    49de:	d02d      	beq.n	4a3c <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    49e0:	2704      	movs	r7, #4
					size = sizeof(long long);
    49e2:	46b9      	mov	r9, r7
    49e4:	e01b      	b.n	4a1e <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    49e6:	f108 0807 	add.w	r8, r8, #7
    49ea:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    49ee:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    49f0:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    49f4:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    49f8:	b155      	cbz	r5, 4a10 <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    49fa:	eb0e 0004 	add.w	r0, lr, r4
    49fe:	42b0      	cmp	r0, r6
    4a00:	d904      	bls.n	4a0c <cbvprintf_package+0x274>
					return -ENOSPC;
    4a02:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    4a06:	b00b      	add	sp, #44	; 0x2c
    4a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    4a0c:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    4a10:	3408      	adds	r4, #8
			parsing = false;
    4a12:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    4a14:	2708      	movs	r7, #8
    4a16:	e706      	b.n	4826 <cbvprintf_package+0x8e>
			parsing = false;
    4a18:	2200      	movs	r2, #0
    4a1a:	e7e1      	b.n	49e0 <cbvprintf_package+0x248>
			parsing = false;
    4a1c:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    4a1e:	3c01      	subs	r4, #1
    4a20:	443c      	add	r4, r7
    4a22:	4278      	negs	r0, r7
    4a24:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    4a26:	b125      	cbz	r5, 4a32 <cbvprintf_package+0x29a>
    4a28:	eba9 0005 	sub.w	r0, r9, r5
    4a2c:	4420      	add	r0, r4
    4a2e:	4286      	cmp	r6, r0
    4a30:	d3e7      	bcc.n	4a02 <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    4a32:	2b73      	cmp	r3, #115	; 0x73
    4a34:	d143      	bne.n	4abe <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    4a36:	f858 0b04 	ldr.w	r0, [r8], #4
    4a3a:	e6ce      	b.n	47da <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    4a3c:	2708      	movs	r7, #8
    4a3e:	e7d0      	b.n	49e2 <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    4a40:	f04f 0c00 	mov.w	ip, #0
    4a44:	e6dc      	b.n	4800 <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    4a46:	9b00      	ldr	r3, [sp, #0]
    4a48:	2b0f      	cmp	r3, #15
    4a4a:	f63f aee3 	bhi.w	4814 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    4a4e:	b345      	cbz	r5, 4aa2 <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4a50:	f8dd e000 	ldr.w	lr, [sp]
    4a54:	a80a      	add	r0, sp, #40	; 0x28
    4a56:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    4a5a:	4470      	add	r0, lr
    4a5c:	f1bc 0f00 	cmp.w	ip, #0
    4a60:	d019      	beq.n	4a96 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    4a62:	f063 037f 	orn	r3, r3, #127	; 0x7f
    4a66:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    4a6a:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    4a6e:	9b00      	ldr	r3, [sp, #0]
    4a70:	3301      	adds	r3, #1
    4a72:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    4a74:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    4a76:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    4a7a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4a7e:	2b00      	cmp	r3, #0
    4a80:	f47f aecb 	bne.w	481a <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    4a84:	1b60      	subs	r0, r4, r5
    4a86:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    4a8a:	f4bf aec3 	bcs.w	4814 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    4a8e:	bb9d      	cbnz	r5, 4af8 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    4a90:	3e08      	subs	r6, #8
    4a92:	4430      	add	r0, r6
    4a94:	e7b7      	b.n	4a06 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    4a96:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    4a9a:	9b02      	ldr	r3, [sp, #8]
    4a9c:	3301      	adds	r3, #1
    4a9e:	9302      	str	r3, [sp, #8]
    4aa0:	e7e5      	b.n	4a6e <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    4aa2:	f1bc 0f00 	cmp.w	ip, #0
    4aa6:	d001      	beq.n	4aac <cbvprintf_package+0x314>
					len += 1;
    4aa8:	3601      	adds	r6, #1
    4aaa:	e7e0      	b.n	4a6e <cbvprintf_package+0x2d6>
    4aac:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    4ab0:	f7fc f9a1 	bl	df6 <strlen>
    4ab4:	3602      	adds	r6, #2
    4ab6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4aba:	4406      	add	r6, r0
    4abc:	e7d7      	b.n	4a6e <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    4abe:	f1b9 0f04 	cmp.w	r9, #4
    4ac2:	d108      	bne.n	4ad6 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    4ac4:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    4ac8:	b115      	cbz	r5, 4ad0 <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    4aca:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    4ace:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    4ad0:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    4ad2:	4680      	mov	r8, r0
    4ad4:	e7d1      	b.n	4a7a <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    4ad6:	f1b9 0f08 	cmp.w	r9, #8
    4ada:	f47f ae9b 	bne.w	4814 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    4ade:	f108 0307 	add.w	r3, r8, #7
    4ae2:	f023 0307 	bic.w	r3, r3, #7
    4ae6:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    4aea:	b11d      	cbz	r5, 4af4 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    4aec:	e9d3 bc00 	ldrd	fp, ip, [r3]
    4af0:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    4af4:	3408      	adds	r4, #8
    4af6:	e7c0      	b.n	4a7a <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    4af8:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    4afa:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    4afc:	0880      	lsrs	r0, r0, #2
    4afe:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    4b00:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    4b02:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    4b06:	f1ba 0f00 	cmp.w	sl, #0
    4b0a:	d005      	beq.n	4b18 <cbvprintf_package+0x380>
    4b0c:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    4b0e:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    4b12:	9a00      	ldr	r2, [sp, #0]
    4b14:	429a      	cmp	r2, r3
    4b16:	d107      	bne.n	4b28 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    4b18:	f1c5 0901 	rsb	r9, r5, #1
    4b1c:	e039      	b.n	4b92 <cbvprintf_package+0x3fa>
    4b1e:	bf00      	nop
    4b20:	0002b2e8 	.word	0x0002b2e8
    4b24:	0002f5c4 	.word	0x0002f5c4
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    4b28:	f811 2b01 	ldrb.w	r2, [r1], #1
    4b2c:	0617      	lsls	r7, r2, #24
    4b2e:	d507      	bpl.n	4b40 <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    4b30:	1827      	adds	r7, r4, r0
    4b32:	42be      	cmp	r6, r7
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    4b34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    4b38:	f4ff af63 	bcc.w	4a02 <cbvprintf_package+0x26a>
			*buf++ = pos;
    4b3c:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    4b40:	3301      	adds	r3, #1
    4b42:	e7e6      	b.n	4b12 <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    4b44:	9b01      	ldr	r3, [sp, #4]
    4b46:	aa06      	add	r2, sp, #24
    4b48:	f812 8003 	ldrb.w	r8, [r2, r3]
    4b4c:	f1ba 0f00 	cmp.w	sl, #0
    4b50:	d002      	beq.n	4b58 <cbvprintf_package+0x3c0>
    4b52:	f018 0f80 	tst.w	r8, #128	; 0x80
    4b56:	d119      	bne.n	4b8c <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4b58:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4b5c:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    4b5e:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    4b62:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    4b66:	4608      	mov	r0, r1
    4b68:	9102      	str	r1, [sp, #8]
    4b6a:	f7fc f944 	bl	df6 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    4b6e:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    4b72:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    4b74:	443a      	add	r2, r7
    4b76:	4296      	cmp	r6, r2
    4b78:	f4ff af43 	bcc.w	4a02 <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    4b7c:	f804 8b01 	strb.w	r8, [r4], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4b80:	9902      	ldr	r1, [sp, #8]
    4b82:	4620      	mov	r0, r4
    4b84:	463a      	mov	r2, r7
    4b86:	f025 ff68 	bl	2aa5a <memcpy>
		buf += size;
    4b8a:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    4b8c:	9b01      	ldr	r3, [sp, #4]
    4b8e:	3301      	adds	r3, #1
    4b90:	9301      	str	r3, [sp, #4]
    4b92:	e9dd 2300 	ldrd	r2, r3, [sp]
    4b96:	429a      	cmp	r2, r3
    4b98:	d1d4      	bne.n	4b44 <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    4b9a:	1b60      	subs	r0, r4, r5
    4b9c:	e733      	b.n	4a06 <cbvprintf_package+0x26e>
		return -EFAULT;
    4b9e:	f06f 000d 	mvn.w	r0, #13
    4ba2:	e730      	b.n	4a06 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    4ba4:	2907      	cmp	r1, #7
    4ba6:	f63f ae0e 	bhi.w	47c6 <cbvprintf_package+0x2e>
    4baa:	e72a      	b.n	4a02 <cbvprintf_package+0x26a>

00004bac <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    4bac:	4b01      	ldr	r3, [pc, #4]	; (4bb4 <__printk_hook_install+0x8>)
    4bae:	6018      	str	r0, [r3, #0]
}
    4bb0:	4770      	bx	lr
    4bb2:	bf00      	nop
    4bb4:	200001b0 	.word	0x200001b0

00004bb8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4bb8:	b530      	push	{r4, r5, lr}
    4bba:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    4bbc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4bc0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4bc2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4bc4:	a901      	add	r1, sp, #4
    4bc6:	4805      	ldr	r0, [pc, #20]	; (4bdc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4bc8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    4bca:	f000 f949 	bl	4e60 <cbvprintf>

	if (ctx.count < ctx.max) {
    4bce:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4bd2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4bd4:	bfb8      	it	lt
    4bd6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4bd8:	b005      	add	sp, #20
    4bda:	bd30      	pop	{r4, r5, pc}
    4bdc:	00024ee1 	.word	0x00024ee1

00004be0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4be4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4be8:	f019 0808 	ands.w	r8, r9, #8
{
    4bec:	4604      	mov	r4, r0
    4bee:	4693      	mov	fp, r2
	if (processing) {
    4bf0:	d00d      	beq.n	4c0e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4bf2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4bf4:	bf0c      	ite	eq
    4bf6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    4bfa:	f049 0920 	orrne.w	r9, r9, #32
    4bfe:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4c02:	f38b 8811 	msr	BASEPRI, fp
    4c06:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    4c0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c0e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4c12:	2902      	cmp	r1, #2
    4c14:	d107      	bne.n	4c26 <process_event+0x46>
			evt = process_recheck(mgr);
    4c16:	4620      	mov	r0, r4
    4c18:	f020 f98f 	bl	24f3a <process_recheck>
		if (evt == EVT_NOP) {
    4c1c:	2800      	cmp	r0, #0
    4c1e:	d0f0      	beq.n	4c02 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4c20:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c22:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4c24:	d14e      	bne.n	4cc4 <process_event+0xe4>
			res = mgr->last_res;
    4c26:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c28:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    4c2a:	2f00      	cmp	r7, #0
    4c2c:	da15      	bge.n	4c5a <process_event+0x7a>
		*clients = mgr->clients;
    4c2e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c30:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4c34:	e9c4 8800 	strd	r8, r8, [r4]
    4c38:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c3c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4c3e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4c40:	8b21      	ldrh	r1, [r4, #24]
    4c42:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    4c46:	45ca      	cmp	sl, r9
    4c48:	d002      	beq.n	4c50 <process_event+0x70>
		if (do_monitors
    4c4a:	68a3      	ldr	r3, [r4, #8]
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	d15a      	bne.n	4d06 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4c50:	b90d      	cbnz	r5, 4c56 <process_event+0x76>
		    || (transit != NULL)) {
    4c52:	2e00      	cmp	r6, #0
    4c54:	d071      	beq.n	4d3a <process_event+0x15a>
    4c56:	2300      	movs	r3, #0
    4c58:	e056      	b.n	4d08 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4c5a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4c5e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4c60:	2a01      	cmp	r2, #1
    4c62:	d81e      	bhi.n	4ca2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c64:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4c68:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    4c6a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c6c:	b289      	uxth	r1, r1
    4c6e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4c72:	d10a      	bne.n	4c8a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c74:	b13d      	cbz	r5, 4c86 <process_event+0xa6>
    4c76:	8b63      	ldrh	r3, [r4, #26]
    4c78:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    4c7a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4c7c:	3301      	adds	r3, #1
    4c7e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4c80:	2a00      	cmp	r2, #0
    4c82:	d1fa      	bne.n	4c7a <process_event+0x9a>
    4c84:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4c86:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    4c8a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4c8c:	4620      	mov	r0, r4
    4c8e:	f020 f954 	bl	24f3a <process_recheck>
    4c92:	4606      	mov	r6, r0
    4c94:	2800      	cmp	r0, #0
    4c96:	d0d3      	beq.n	4c40 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4c98:	8b23      	ldrh	r3, [r4, #24]
    4c9a:	f043 0320 	orr.w	r3, r3, #32
    4c9e:	8323      	strh	r3, [r4, #24]
    4ca0:	e7cd      	b.n	4c3e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4ca2:	2b04      	cmp	r3, #4
    4ca4:	d10c      	bne.n	4cc0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ca6:	f021 0107 	bic.w	r1, r1, #7
    4caa:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4cac:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4cae:	4620      	mov	r0, r4
    4cb0:	f020 f943 	bl	24f3a <process_recheck>
    4cb4:	4605      	mov	r5, r0
    4cb6:	2800      	cmp	r0, #0
    4cb8:	d0c1      	beq.n	4c3e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4cba:	f041 0120 	orr.w	r1, r1, #32
    4cbe:	8321      	strh	r1, [r4, #24]
    4cc0:	2500      	movs	r5, #0
    4cc2:	e7bc      	b.n	4c3e <process_event+0x5e>
		} else if (evt == EVT_START) {
    4cc4:	2803      	cmp	r0, #3
    4cc6:	d109      	bne.n	4cdc <process_event+0xfc>
			transit = mgr->transitions->start;
    4cc8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4cca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    4cce:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4cd0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4cd4:	8323      	strh	r3, [r4, #24]
}
    4cd6:	2500      	movs	r5, #0
		res = 0;
    4cd8:	462f      	mov	r7, r5
    4cda:	e7b1      	b.n	4c40 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    4cdc:	2804      	cmp	r0, #4
    4cde:	d106      	bne.n	4cee <process_event+0x10e>
			transit = mgr->transitions->stop;
    4ce0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ce2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4ce6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4ce8:	f043 0304 	orr.w	r3, r3, #4
    4cec:	e7f2      	b.n	4cd4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    4cee:	2805      	cmp	r0, #5
    4cf0:	d106      	bne.n	4d00 <process_event+0x120>
			transit = mgr->transitions->reset;
    4cf2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4cf4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4cf8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4cfa:	f043 0305 	orr.w	r3, r3, #5
    4cfe:	e7e9      	b.n	4cd4 <process_event+0xf4>
    4d00:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4d02:	462e      	mov	r6, r5
    4d04:	e7e8      	b.n	4cd8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    4d06:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    4d08:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4d0c:	8321      	strh	r1, [r4, #24]
    4d0e:	f38b 8811 	msr	BASEPRI, fp
    4d12:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    4d16:	b9fb      	cbnz	r3, 4d58 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    4d18:	bb85      	cbnz	r5, 4d7c <process_event+0x19c>
			if (transit != NULL) {
    4d1a:	b116      	cbz	r6, 4d22 <process_event+0x142>
				transit(mgr, transition_complete);
    4d1c:	491f      	ldr	r1, [pc, #124]	; (4d9c <process_event+0x1bc>)
    4d1e:	4620      	mov	r0, r4
    4d20:	47b0      	blx	r6
	__asm__ volatile(
    4d22:	f04f 0320 	mov.w	r3, #32
    4d26:	f3ef 8b11 	mrs	fp, BASEPRI
    4d2a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d2e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4d32:	8b23      	ldrh	r3, [r4, #24]
    4d34:	f023 0308 	bic.w	r3, r3, #8
    4d38:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    4d3a:	8b23      	ldrh	r3, [r4, #24]
    4d3c:	06da      	lsls	r2, r3, #27
    4d3e:	d525      	bpl.n	4d8c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4d40:	f023 0310 	bic.w	r3, r3, #16
    4d44:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    4d46:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    4d48:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4d4c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4d50:	2900      	cmp	r1, #0
    4d52:	f47f af5e 	bne.w	4c12 <process_event+0x32>
out:
    4d56:	e754      	b.n	4c02 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    4d58:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4d5a:	2900      	cmp	r1, #0
    4d5c:	d0dc      	beq.n	4d18 <process_event+0x138>
	return node->next;
    4d5e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    4d62:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4d66:	463b      	mov	r3, r7
    4d68:	4652      	mov	r2, sl
    4d6a:	4620      	mov	r0, r4
    4d6c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4d6e:	f1b9 0f00 	cmp.w	r9, #0
    4d72:	d0d1      	beq.n	4d18 <process_event+0x138>
    4d74:	4649      	mov	r1, r9
    4d76:	f8d9 9000 	ldr.w	r9, [r9]
    4d7a:	e7f2      	b.n	4d62 <process_event+0x182>
    4d7c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4d7e:	463b      	mov	r3, r7
    4d80:	4652      	mov	r2, sl
    4d82:	4620      	mov	r0, r4
    4d84:	682d      	ldr	r5, [r5, #0]
    4d86:	f020 f8f4 	bl	24f72 <notify_one>
    4d8a:	e7c5      	b.n	4d18 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4d8c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4d90:	bf1e      	ittt	ne
    4d92:	f023 0320 	bicne.w	r3, r3, #32
    4d96:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4d98:	2102      	movne	r1, #2
    4d9a:	e7d5      	b.n	4d48 <process_event+0x168>
    4d9c:	00024f9f 	.word	0x00024f9f

00004da0 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    4da0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    4da2:	4e08      	ldr	r6, [pc, #32]	; (4dc4 <extract_decimal+0x24>)
    4da4:	6802      	ldr	r2, [r0, #0]
{
    4da6:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
    4da8:	270a      	movs	r7, #10
	size_t val = 0;
    4daa:	2000      	movs	r0, #0
    4dac:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
    4dae:	3201      	adds	r2, #1
    4db0:	780c      	ldrb	r4, [r1, #0]
    4db2:	5da5      	ldrb	r5, [r4, r6]
    4db4:	076d      	lsls	r5, r5, #29
    4db6:	d401      	bmi.n	4dbc <extract_decimal+0x1c>
	}
	*str = sp;
    4db8:	6019      	str	r1, [r3, #0]
	return val;
}
    4dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    4dbc:	fb07 4000 	mla	r0, r7, r0, r4
    4dc0:	3830      	subs	r0, #48	; 0x30
    4dc2:	e7f3      	b.n	4dac <extract_decimal+0xc>
    4dc4:	0002f356 	.word	0x0002f356

00004dc8 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    4dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dcc:	4615      	mov	r5, r2
    4dce:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4dd0:	78d3      	ldrb	r3, [r2, #3]
    4dd2:	4a22      	ldr	r2, [pc, #136]	; (4e5c <encode_uint+0x94>)
    4dd4:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    4dd8:	2b6f      	cmp	r3, #111	; 0x6f
{
    4dda:	4680      	mov	r8, r0
    4ddc:	460f      	mov	r7, r1
    4dde:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    4de2:	d029      	beq.n	4e38 <encode_uint+0x70>
    4de4:	d824      	bhi.n	4e30 <encode_uint+0x68>
		return 16;
    4de6:	2b58      	cmp	r3, #88	; 0x58
    4de8:	bf14      	ite	ne
    4dea:	260a      	movne	r6, #10
    4dec:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    4dee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    4df2:	4632      	mov	r2, r6
    4df4:	2300      	movs	r3, #0
    4df6:	4640      	mov	r0, r8
    4df8:	4639      	mov	r1, r7
    4dfa:	f7fb fdbf 	bl	97c <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    4dfe:	2a09      	cmp	r2, #9
    4e00:	b2d4      	uxtb	r4, r2
    4e02:	d81e      	bhi.n	4e42 <encode_uint+0x7a>
    4e04:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    4e06:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e08:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4e0a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e0e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4e12:	d301      	bcc.n	4e18 <encode_uint+0x50>
    4e14:	45d1      	cmp	r9, sl
    4e16:	d811      	bhi.n	4e3c <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    4e18:	782b      	ldrb	r3, [r5, #0]
    4e1a:	069b      	lsls	r3, r3, #26
    4e1c:	d505      	bpl.n	4e2a <encode_uint+0x62>
		if (radix == 8) {
    4e1e:	2e08      	cmp	r6, #8
    4e20:	d115      	bne.n	4e4e <encode_uint+0x86>
			conv->altform_0 = true;
    4e22:	78ab      	ldrb	r3, [r5, #2]
    4e24:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    4e28:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    4e2a:	4648      	mov	r0, r9
    4e2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    4e30:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    4e34:	2b70      	cmp	r3, #112	; 0x70
    4e36:	e7d7      	b.n	4de8 <encode_uint+0x20>
	switch (specifier) {
    4e38:	2608      	movs	r6, #8
    4e3a:	e7d8      	b.n	4dee <encode_uint+0x26>
		value /= radix;
    4e3c:	4680      	mov	r8, r0
    4e3e:	460f      	mov	r7, r1
    4e40:	e7d7      	b.n	4df2 <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4e42:	f1bb 0f01 	cmp.w	fp, #1
    4e46:	bf0c      	ite	eq
    4e48:	3437      	addeq	r4, #55	; 0x37
    4e4a:	3457      	addne	r4, #87	; 0x57
    4e4c:	e7db      	b.n	4e06 <encode_uint+0x3e>
		} else if (radix == 16) {
    4e4e:	2e10      	cmp	r6, #16
    4e50:	d1eb      	bne.n	4e2a <encode_uint+0x62>
			conv->altform_0c = true;
    4e52:	78ab      	ldrb	r3, [r5, #2]
    4e54:	f043 0310 	orr.w	r3, r3, #16
    4e58:	e7e6      	b.n	4e28 <encode_uint+0x60>
    4e5a:	bf00      	nop
    4e5c:	0002f356 	.word	0x0002f356

00004e60 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4e64:	4681      	mov	r9, r0
    4e66:	b09b      	sub	sp, #108	; 0x6c
    4e68:	468a      	mov	sl, r1
    4e6a:	4615      	mov	r5, r2
    4e6c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    4e6e:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4e70:	7828      	ldrb	r0, [r5, #0]
    4e72:	b910      	cbnz	r0, 4e7a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4e74:	4630      	mov	r0, r6
    4e76:	f000 bdc5 	b.w	5a04 <cbvprintf+0xba4>
			OUTC(*fp++);
    4e7a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    4e7c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    4e7e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    4e80:	d006      	beq.n	4e90 <cbvprintf+0x30>
			OUTC(*fp++);
    4e82:	4651      	mov	r1, sl
			OUTC('%');
    4e84:	47c8      	blx	r9
    4e86:	2800      	cmp	r0, #0
    4e88:	f2c0 85bc 	blt.w	5a04 <cbvprintf+0xba4>
    4e8c:	3601      	adds	r6, #1
		if (bps == NULL) {
    4e8e:	e226      	b.n	52de <cbvprintf+0x47e>
		} state = {
    4e90:	2218      	movs	r2, #24
    4e92:	2100      	movs	r1, #0
    4e94:	a80c      	add	r0, sp, #48	; 0x30
    4e96:	f025 fe01 	bl	2aa9c <memset>
	if (*sp == '%') {
    4e9a:	786b      	ldrb	r3, [r5, #1]
    4e9c:	2b25      	cmp	r3, #37	; 0x25
    4e9e:	d059      	beq.n	4f54 <cbvprintf+0xf4>
    4ea0:	1c6a      	adds	r2, r5, #1
    4ea2:	4617      	mov	r7, r2
		switch (*sp) {
    4ea4:	f812 3b01 	ldrb.w	r3, [r2], #1
    4ea8:	2b2b      	cmp	r3, #43	; 0x2b
    4eaa:	f000 808b 	beq.w	4fc4 <cbvprintf+0x164>
    4eae:	d879      	bhi.n	4fa4 <cbvprintf+0x144>
    4eb0:	2b20      	cmp	r3, #32
    4eb2:	f000 808c 	beq.w	4fce <cbvprintf+0x16e>
    4eb6:	2b23      	cmp	r3, #35	; 0x23
    4eb8:	f000 808e 	beq.w	4fd8 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
    4ebc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ec0:	f003 0244 	and.w	r2, r3, #68	; 0x44
    4ec4:	2a44      	cmp	r2, #68	; 0x44
    4ec6:	d103      	bne.n	4ed0 <cbvprintf+0x70>
		conv->flag_zero = false;
    4ec8:	f36f 1386 	bfc	r3, #6, #1
    4ecc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    4ed0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4ed4:	970a      	str	r7, [sp, #40]	; 0x28
    4ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4eda:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    4ede:	783b      	ldrb	r3, [r7, #0]
    4ee0:	2b2a      	cmp	r3, #42	; 0x2a
    4ee2:	d17e      	bne.n	4fe2 <cbvprintf+0x182>
		conv->width_star = true;
    4ee4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4ee8:	f043 0301 	orr.w	r3, r3, #1
    4eec:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    4ef0:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    4ef2:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    4ef4:	781a      	ldrb	r2, [r3, #0]
    4ef6:	2a2e      	cmp	r2, #46	; 0x2e
    4ef8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4efc:	bf0c      	ite	eq
    4efe:	2101      	moveq	r1, #1
    4f00:	2100      	movne	r1, #0
    4f02:	f361 0241 	bfi	r2, r1, #1, #1
    4f06:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4f0a:	d10b      	bne.n	4f24 <cbvprintf+0xc4>
	++sp;
    4f0c:	1c5a      	adds	r2, r3, #1
    4f0e:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    4f10:	785a      	ldrb	r2, [r3, #1]
    4f12:	2a2a      	cmp	r2, #42	; 0x2a
    4f14:	d17b      	bne.n	500e <cbvprintf+0x1ae>
		conv->prec_star = true;
    4f16:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4f1a:	f042 0204 	orr.w	r2, r2, #4
    4f1e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    4f22:	3302      	adds	r3, #2
	switch (*sp) {
    4f24:	461a      	mov	r2, r3
    4f26:	f812 0b01 	ldrb.w	r0, [r2], #1
    4f2a:	286c      	cmp	r0, #108	; 0x6c
    4f2c:	f000 80cf 	beq.w	50ce <cbvprintf+0x26e>
    4f30:	d87d      	bhi.n	502e <cbvprintf+0x1ce>
    4f32:	2868      	cmp	r0, #104	; 0x68
    4f34:	f000 8084 	beq.w	5040 <cbvprintf+0x1e0>
    4f38:	286a      	cmp	r0, #106	; 0x6a
    4f3a:	f000 80d2 	beq.w	50e2 <cbvprintf+0x282>
    4f3e:	284c      	cmp	r0, #76	; 0x4c
    4f40:	f000 80d6 	beq.w	50f0 <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
    4f44:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4f48:	f36f 02c6 	bfc	r2, #3, #4
    4f4c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    4f50:	461a      	mov	r2, r3
    4f52:	e080      	b.n	5056 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    4f54:	1caa      	adds	r2, r5, #2
    4f56:	9202      	str	r2, [sp, #8]
    4f58:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    4f5c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f60:	07df      	lsls	r7, r3, #31
    4f62:	f140 8170 	bpl.w	5246 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
    4f66:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    4f6a:	f1bb 0f00 	cmp.w	fp, #0
    4f6e:	da07      	bge.n	4f80 <cbvprintf+0x120>
				conv->flag_dash = true;
    4f70:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4f74:	f042 0204 	orr.w	r2, r2, #4
    4f78:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    4f7c:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    4f80:	0758      	lsls	r0, r3, #29
    4f82:	f140 8169 	bpl.w	5258 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
    4f86:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    4f8a:	f1b8 0f00 	cmp.w	r8, #0
    4f8e:	f280 8168 	bge.w	5262 <cbvprintf+0x402>
				conv->prec_present = false;
    4f92:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4f96:	f36f 0341 	bfc	r3, #1, #1
    4f9a:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    4f9e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    4fa2:	e15e      	b.n	5262 <cbvprintf+0x402>
		switch (*sp) {
    4fa4:	2b2d      	cmp	r3, #45	; 0x2d
    4fa6:	d006      	beq.n	4fb6 <cbvprintf+0x156>
    4fa8:	2b30      	cmp	r3, #48	; 0x30
    4faa:	d187      	bne.n	4ebc <cbvprintf+0x5c>
			conv->flag_zero = true;
    4fac:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fb4:	e003      	b.n	4fbe <cbvprintf+0x15e>
			conv->flag_dash = true;
    4fb6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fba:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    4fbe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    4fc2:	e76e      	b.n	4ea2 <cbvprintf+0x42>
			conv->flag_plus = true;
    4fc4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fc8:	f043 0308 	orr.w	r3, r3, #8
    4fcc:	e7f7      	b.n	4fbe <cbvprintf+0x15e>
			conv->flag_space = true;
    4fce:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fd2:	f043 0310 	orr.w	r3, r3, #16
    4fd6:	e7f2      	b.n	4fbe <cbvprintf+0x15e>
			conv->flag_hash = true;
    4fd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4fdc:	f043 0320 	orr.w	r3, r3, #32
    4fe0:	e7ed      	b.n	4fbe <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
    4fe2:	a80a      	add	r0, sp, #40	; 0x28
    4fe4:	f7ff fedc 	bl	4da0 <extract_decimal>
	if (sp != wp) {
    4fe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    4fea:	42bb      	cmp	r3, r7
    4fec:	d081      	beq.n	4ef2 <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
    4fee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    4ff2:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    4ff4:	f3c1 0240 	ubfx	r2, r1, #1, #1
    4ff8:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    4ffc:	0052      	lsls	r2, r2, #1
    4ffe:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5002:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    5006:	430a      	orrs	r2, r1
    5008:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    500c:	e771      	b.n	4ef2 <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
    500e:	a80a      	add	r0, sp, #40	; 0x28
    5010:	f7ff fec6 	bl	4da0 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5014:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5018:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    501a:	f3c3 0240 	ubfx	r2, r3, #1, #1
    501e:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    5022:	f360 0341 	bfi	r3, r0, #1, #1
    5026:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    502a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    502c:	e77a      	b.n	4f24 <cbvprintf+0xc4>
	switch (*sp) {
    502e:	2874      	cmp	r0, #116	; 0x74
    5030:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5034:	d059      	beq.n	50ea <cbvprintf+0x28a>
    5036:	287a      	cmp	r0, #122	; 0x7a
    5038:	d184      	bne.n	4f44 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
    503a:	460b      	mov	r3, r1
    503c:	2106      	movs	r1, #6
    503e:	e041      	b.n	50c4 <cbvprintf+0x264>
		if (*++sp == 'h') {
    5040:	7859      	ldrb	r1, [r3, #1]
    5042:	2968      	cmp	r1, #104	; 0x68
    5044:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5048:	d13a      	bne.n	50c0 <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
    504a:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    504c:	f362 01c6 	bfi	r1, r2, #3, #4
    5050:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
    5054:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    5056:	4613      	mov	r3, r2
    5058:	f813 2b01 	ldrb.w	r2, [r3], #1
    505c:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    505e:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    5060:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5064:	f200 80c5 	bhi.w	51f2 <cbvprintf+0x392>
    5068:	2a57      	cmp	r2, #87	; 0x57
    506a:	d84e      	bhi.n	510a <cbvprintf+0x2aa>
    506c:	2a41      	cmp	r2, #65	; 0x41
    506e:	d004      	beq.n	507a <cbvprintf+0x21a>
    5070:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5074:	2b02      	cmp	r3, #2
    5076:	f200 80bc 	bhi.w	51f2 <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    507a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    507e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    5082:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    5084:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    5088:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    508c:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    5090:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    5094:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5098:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    509c:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    50a0:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    50a2:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    50a6:	b2cb      	uxtb	r3, r1
    50a8:	f100 80cb 	bmi.w	5242 <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
    50ac:	f003 0278 	and.w	r2, r3, #120	; 0x78
    50b0:	2a18      	cmp	r2, #24
    50b2:	f040 809b 	bne.w	51ec <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
    50b6:	f36f 03c6 	bfc	r3, #3, #4
    50ba:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    50be:	e082      	b.n	51c6 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
    50c0:	460b      	mov	r3, r1
    50c2:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    50c4:	f361 03c6 	bfi	r3, r1, #3, #4
    50c8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    50cc:	e7c3      	b.n	5056 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
    50ce:	7859      	ldrb	r1, [r3, #1]
    50d0:	296c      	cmp	r1, #108	; 0x6c
    50d2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    50d6:	d101      	bne.n	50dc <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
    50d8:	2204      	movs	r2, #4
    50da:	e7b7      	b.n	504c <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
    50dc:	460b      	mov	r3, r1
    50de:	2103      	movs	r1, #3
    50e0:	e7f0      	b.n	50c4 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
    50e2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    50e6:	2105      	movs	r1, #5
    50e8:	e7ec      	b.n	50c4 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
    50ea:	460b      	mov	r3, r1
    50ec:	2107      	movs	r1, #7
    50ee:	e7e9      	b.n	50c4 <cbvprintf+0x264>
		conv->unsupported = true;
    50f0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    50f4:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    50f8:	f023 0302 	bic.w	r3, r3, #2
    50fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5100:	f043 0302 	orr.w	r3, r3, #2
    5104:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    5108:	e7a5      	b.n	5056 <cbvprintf+0x1f6>
	switch (conv->specifier) {
    510a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    510e:	2b20      	cmp	r3, #32
    5110:	d86f      	bhi.n	51f2 <cbvprintf+0x392>
    5112:	a101      	add	r1, pc, #4	; (adr r1, 5118 <cbvprintf+0x2b8>)
    5114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5118:	000051cb 	.word	0x000051cb
    511c:	000051f3 	.word	0x000051f3
    5120:	000051f3 	.word	0x000051f3
    5124:	000051f3 	.word	0x000051f3
    5128:	000051f3 	.word	0x000051f3
    512c:	000051f3 	.word	0x000051f3
    5130:	000051f3 	.word	0x000051f3
    5134:	000051f3 	.word	0x000051f3
    5138:	000051f3 	.word	0x000051f3
    513c:	0000507b 	.word	0x0000507b
    5140:	000051f3 	.word	0x000051f3
    5144:	000051cb 	.word	0x000051cb
    5148:	0000519d 	.word	0x0000519d
    514c:	0000507b 	.word	0x0000507b
    5150:	0000507b 	.word	0x0000507b
    5154:	0000507b 	.word	0x0000507b
    5158:	000051f3 	.word	0x000051f3
    515c:	0000519d 	.word	0x0000519d
    5160:	000051f3 	.word	0x000051f3
    5164:	000051f3 	.word	0x000051f3
    5168:	000051f3 	.word	0x000051f3
    516c:	000051f3 	.word	0x000051f3
    5170:	00005201 	.word	0x00005201
    5174:	000051cb 	.word	0x000051cb
    5178:	00005225 	.word	0x00005225
    517c:	000051f3 	.word	0x000051f3
    5180:	000051f3 	.word	0x000051f3
    5184:	00005225 	.word	0x00005225
    5188:	000051f3 	.word	0x000051f3
    518c:	000051cb 	.word	0x000051cb
    5190:	000051f3 	.word	0x000051f3
    5194:	000051f3 	.word	0x000051f3
    5198:	000051cb 	.word	0x000051cb
		conv->specifier_cat = SPECIFIER_SINT;
    519c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    51a0:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    51a2:	f361 0302 	bfi	r3, r1, #0, #3
    51a6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    51aa:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    51ae:	f003 0378 	and.w	r3, r3, #120	; 0x78
    51b2:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    51b4:	bf02      	ittt	eq
    51b6:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    51ba:	f041 0101 	orreq.w	r1, r1, #1
    51be:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    51c2:	2a63      	cmp	r2, #99	; 0x63
    51c4:	d005      	beq.n	51d2 <cbvprintf+0x372>
	bool unsupported = false;
    51c6:	2300      	movs	r3, #0
    51c8:	e006      	b.n	51d8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
    51ca:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    51ce:	2102      	movs	r1, #2
    51d0:	e7e7      	b.n	51a2 <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
    51d2:	3b00      	subs	r3, #0
    51d4:	bf18      	it	ne
    51d6:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    51d8:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    51dc:	f3c2 0140 	ubfx	r1, r2, #1, #1
    51e0:	430b      	orrs	r3, r1
    51e2:	f363 0241 	bfi	r2, r3, #1, #1
    51e6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    51ea:	e6b7      	b.n	4f5c <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
    51ec:	f013 0f38 	tst.w	r3, #56	; 0x38
    51f0:	d0e9      	beq.n	51c6 <cbvprintf+0x366>
			conv->invalid = true;
    51f2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    51f6:	f043 0301 	orr.w	r3, r3, #1
    51fa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    51fe:	e7e2      	b.n	51c6 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
    5200:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5204:	2203      	movs	r2, #3
    5206:	f362 0302 	bfi	r3, r2, #0, #3
    520a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    520e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5212:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5216:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    521a:	f1dc 0300 	rsbs	r3, ip, #0
    521e:	eb43 030c 	adc.w	r3, r3, ip
    5222:	e7d9      	b.n	51d8 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    5224:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5228:	2203      	movs	r2, #3
    522a:	f362 0302 	bfi	r3, r2, #0, #3
    522e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5232:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5236:	f013 0f78 	tst.w	r3, #120	; 0x78
    523a:	bf14      	ite	ne
    523c:	2301      	movne	r3, #1
    523e:	2300      	moveq	r3, #0
    5240:	e7ca      	b.n	51d8 <cbvprintf+0x378>
			unsupported = true;
    5242:	2301      	movs	r3, #1
    5244:	e7c8      	b.n	51d8 <cbvprintf+0x378>
		} else if (conv->width_present) {
    5246:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    524a:	2a00      	cmp	r2, #0
			width = conv->width_value;
    524c:	bfb4      	ite	lt
    524e:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    5252:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    5256:	e693      	b.n	4f80 <cbvprintf+0x120>
		} else if (conv->prec_present) {
    5258:	0799      	lsls	r1, r3, #30
    525a:	f57f aea0 	bpl.w	4f9e <cbvprintf+0x13e>
			precision = conv->prec_value;
    525e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    5262:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5266:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5268:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    526c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    5270:	f003 0207 	and.w	r2, r3, #7
    5274:	2a04      	cmp	r2, #4
    5276:	d109      	bne.n	528c <cbvprintf+0x42c>
		    && !conv->prec_present) {
    5278:	078a      	lsls	r2, r1, #30
    527a:	d407      	bmi.n	528c <cbvprintf+0x42c>
			if (conv->specifier_a) {
    527c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    5280:	2a00      	cmp	r2, #0
    5282:	bfb4      	ite	lt
    5284:	f04f 080d 	movlt.w	r8, #13
    5288:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    528c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    5290:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5292:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5296:	d137      	bne.n	5308 <cbvprintf+0x4a8>
			switch (length_mod) {
    5298:	1ecb      	subs	r3, r1, #3
    529a:	2b04      	cmp	r3, #4
    529c:	d821      	bhi.n	52e2 <cbvprintf+0x482>
    529e:	e8df f003 	tbb	[pc, r3]
    52a2:	0903      	.short	0x0903
    52a4:	2009      	.short	0x2009
    52a6:	20          	.byte	0x20
    52a7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    52a8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    52ac:	17da      	asrs	r2, r3, #31
    52ae:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    52b2:	e006      	b.n	52c2 <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
    52b4:	3407      	adds	r4, #7
    52b6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    52ba:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    52be:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    52c2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    52c6:	07bb      	lsls	r3, r7, #30
    52c8:	d056      	beq.n	5378 <cbvprintf+0x518>
			OUTS(sp, fp);
    52ca:	9b02      	ldr	r3, [sp, #8]
    52cc:	462a      	mov	r2, r5
    52ce:	4651      	mov	r1, sl
    52d0:	4648      	mov	r0, r9
    52d2:	f020 f901 	bl	254d8 <outs>
    52d6:	2800      	cmp	r0, #0
    52d8:	f2c0 8394 	blt.w	5a04 <cbvprintf+0xba4>
    52dc:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    52de:	9d02      	ldr	r5, [sp, #8]
    52e0:	e5c6      	b.n	4e70 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    52e2:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    52e6:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    52e8:	ea4f 72e3 	mov.w	r2, r3, asr #31
    52ec:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    52f0:	d105      	bne.n	52fe <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
    52f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    52f6:	930c      	str	r3, [sp, #48]	; 0x30
    52f8:	2300      	movs	r3, #0
    52fa:	930d      	str	r3, [sp, #52]	; 0x34
    52fc:	e7e1      	b.n	52c2 <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
    52fe:	2902      	cmp	r1, #2
    5300:	d1df      	bne.n	52c2 <cbvprintf+0x462>
				value->sint = (short)value->sint;
    5302:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    5306:	e7d1      	b.n	52ac <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5308:	2b02      	cmp	r3, #2
    530a:	d123      	bne.n	5354 <cbvprintf+0x4f4>
			switch (length_mod) {
    530c:	1ecb      	subs	r3, r1, #3
    530e:	2b04      	cmp	r3, #4
    5310:	d813      	bhi.n	533a <cbvprintf+0x4da>
    5312:	e8df f003 	tbb	[pc, r3]
    5316:	0a03      	.short	0x0a03
    5318:	120a      	.short	0x120a
    531a:	12          	.byte	0x12
    531b:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    531c:	6822      	ldr	r2, [r4, #0]
    531e:	920c      	str	r2, [sp, #48]	; 0x30
    5320:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    5322:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    5324:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    5326:	4604      	mov	r4, r0
    5328:	e7cb      	b.n	52c2 <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
    532a:	1de0      	adds	r0, r4, #7
    532c:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    5330:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5334:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    5338:	e7f5      	b.n	5326 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
    533a:	f854 3b04 	ldr.w	r3, [r4], #4
    533e:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5340:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    5342:	f04f 0300 	mov.w	r3, #0
    5346:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5348:	d0d3      	beq.n	52f2 <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
    534a:	2902      	cmp	r1, #2
    534c:	d1b9      	bne.n	52c2 <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
    534e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5352:	e7d0      	b.n	52f6 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
    5354:	2b04      	cmp	r3, #4
    5356:	d109      	bne.n	536c <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
    5358:	1de3      	adds	r3, r4, #7
    535a:	f023 0307 	bic.w	r3, r3, #7
    535e:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    5362:	e9d3 2300 	ldrd	r2, r3, [r3]
    5366:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    536a:	e7aa      	b.n	52c2 <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
    536c:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    536e:	bf04      	itt	eq
    5370:	f854 3b04 	ldreq.w	r3, [r4], #4
    5374:	930c      	streq	r3, [sp, #48]	; 0x30
    5376:	e7a4      	b.n	52c2 <cbvprintf+0x462>
		switch (conv->specifier) {
    5378:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    537c:	2a78      	cmp	r2, #120	; 0x78
    537e:	d8ae      	bhi.n	52de <cbvprintf+0x47e>
    5380:	2a57      	cmp	r2, #87	; 0x57
    5382:	f200 808c 	bhi.w	549e <cbvprintf+0x63e>
    5386:	2a25      	cmp	r2, #37	; 0x25
    5388:	f000 80d4 	beq.w	5534 <cbvprintf+0x6d4>
    538c:	2a24      	cmp	r2, #36	; 0x24
    538e:	d9a6      	bls.n	52de <cbvprintf+0x47e>
    5390:	2a41      	cmp	r2, #65	; 0x41
    5392:	d003      	beq.n	539c <cbvprintf+0x53c>
    5394:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5398:	2b02      	cmp	r3, #2
    539a:	d8a0      	bhi.n	52de <cbvprintf+0x47e>
	} u = {
    539c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    53a0:	2b00      	cmp	r3, #0
    53a2:	f2c0 81b7 	blt.w	5714 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
    53a6:	0738      	lsls	r0, r7, #28
    53a8:	f100 81b6 	bmi.w	5718 <cbvprintf+0x8b8>
		*sign = ' ';
    53ac:	f017 0710 	ands.w	r7, r7, #16
    53b0:	bf18      	it	ne
    53b2:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    53b4:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    53b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    53bc:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    53c0:	2d00      	cmp	r5, #0
    53c2:	f040 81ab 	bne.w	571c <cbvprintf+0x8bc>
    53c6:	ea51 0003 	orrs.w	r0, r1, r3
    53ca:	bf14      	ite	ne
    53cc:	2001      	movne	r0, #1
    53ce:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    53d0:	02db      	lsls	r3, r3, #11
    53d2:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    53d6:	02c9      	lsls	r1, r1, #11
		c = 'f';
    53d8:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    53da:	ea45 0e01 	orr.w	lr, r5, r1
    53de:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    53e2:	bf08      	it	eq
    53e4:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    53e6:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    53ea:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    53ee:	f000 8203 	beq.w	57f8 <cbvprintf+0x998>
		if (is_subnormal) {
    53f2:	2800      	cmp	r0, #0
    53f4:	f040 81cb 	bne.w	578e <cbvprintf+0x92e>
		fract |= BIT_63;
    53f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    53fc:	f04f 0c00 	mov.w	ip, #0
    5400:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    5404:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    5408:	9109      	str	r1, [sp, #36]	; 0x24
    540a:	4663      	mov	r3, ip
		fract *= 5U;
    540c:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    5410:	f115 0f02 	cmn.w	r5, #2
    5414:	f2c0 81c2 	blt.w	579c <cbvprintf+0x93c>
    5418:	f1bc 0f00 	cmp.w	ip, #0
    541c:	d001      	beq.n	5422 <cbvprintf+0x5c2>
    541e:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    5422:	2d00      	cmp	r5, #0
		fract += 2;
    5424:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    5428:	f300 81cd 	bgt.w	57c6 <cbvprintf+0x966>
	fract >>= (4 - expo);
    542c:	9809      	ldr	r0, [sp, #36]	; 0x24
    542e:	9908      	ldr	r1, [sp, #32]
    5430:	f1c5 0c04 	rsb	ip, r5, #4
    5434:	351c      	adds	r5, #28
    5436:	fa00 f505 	lsl.w	r5, r0, r5
    543a:	f1ac 0e20 	sub.w	lr, ip, #32
    543e:	fa21 f10c 	lsr.w	r1, r1, ip
    5442:	fa20 fe0e 	lsr.w	lr, r0, lr
    5446:	4329      	orrs	r1, r5
    5448:	ea41 010e 	orr.w	r1, r1, lr
    544c:	fa20 f00c 	lsr.w	r0, r0, ip
    5450:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    5454:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    5458:	2947      	cmp	r1, #71	; 0x47
    545a:	f040 81d4 	bne.w	5806 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
    545e:	1cdd      	adds	r5, r3, #3
    5460:	db02      	blt.n	5468 <cbvprintf+0x608>
    5462:	4598      	cmp	r8, r3
    5464:	f280 81cb 	bge.w	57fe <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
    5468:	3a02      	subs	r2, #2
			if (precision > 0) {
    546a:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    546e:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    5470:	dd01      	ble.n	5476 <cbvprintf+0x616>
				precision--;
    5472:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    5476:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    547a:	0688      	lsls	r0, r1, #26
    547c:	f100 81c3 	bmi.w	5806 <cbvprintf+0x9a6>
    5480:	f1b8 0f00 	cmp.w	r8, #0
    5484:	bfd4      	ite	le
    5486:	2100      	movle	r1, #0
    5488:	2101      	movgt	r1, #1
	if (c == 'f') {
    548a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    548c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    548e:	f040 81bc 	bne.w	580a <cbvprintf+0x9aa>
		if (decimals < 0) {
    5492:	eb13 0508 	adds.w	r5, r3, r8
    5496:	f140 81ba 	bpl.w	580e <cbvprintf+0x9ae>
			decimals = 0;
    549a:	2500      	movs	r5, #0
    549c:	e1ba      	b.n	5814 <cbvprintf+0x9b4>
		switch (conv->specifier) {
    549e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    54a2:	2b20      	cmp	r3, #32
    54a4:	f63f af1b 	bhi.w	52de <cbvprintf+0x47e>
    54a8:	a001      	add	r0, pc, #4	; (adr r0, 54b0 <cbvprintf+0x650>)
    54aa:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    54ae:	bf00      	nop
    54b0:	000056b7 	.word	0x000056b7
    54b4:	000052df 	.word	0x000052df
    54b8:	000052df 	.word	0x000052df
    54bc:	000052df 	.word	0x000052df
    54c0:	000052df 	.word	0x000052df
    54c4:	000052df 	.word	0x000052df
    54c8:	000052df 	.word	0x000052df
    54cc:	000052df 	.word	0x000052df
    54d0:	000052df 	.word	0x000052df
    54d4:	0000539d 	.word	0x0000539d
    54d8:	000052df 	.word	0x000052df
    54dc:	00005561 	.word	0x00005561
    54e0:	00005657 	.word	0x00005657
    54e4:	0000539d 	.word	0x0000539d
    54e8:	0000539d 	.word	0x0000539d
    54ec:	0000539d 	.word	0x0000539d
    54f0:	000052df 	.word	0x000052df
    54f4:	00005657 	.word	0x00005657
    54f8:	000052df 	.word	0x000052df
    54fc:	000052df 	.word	0x000052df
    5500:	000052df 	.word	0x000052df
    5504:	000052df 	.word	0x000052df
    5508:	000056ed 	.word	0x000056ed
    550c:	000056b7 	.word	0x000056b7
    5510:	000056bb 	.word	0x000056bb
    5514:	000052df 	.word	0x000052df
    5518:	000052df 	.word	0x000052df
    551c:	0000553b 	.word	0x0000553b
    5520:	000052df 	.word	0x000052df
    5524:	000056b7 	.word	0x000056b7
    5528:	000052df 	.word	0x000052df
    552c:	000052df 	.word	0x000052df
    5530:	000056b7 	.word	0x000056b7
			OUTC('%');
    5534:	4651      	mov	r1, sl
    5536:	4610      	mov	r0, r2
    5538:	e4a4      	b.n	4e84 <cbvprintf+0x24>
			if (precision >= 0) {
    553a:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    553e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    5540:	db09      	blt.n	5556 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
    5542:	4641      	mov	r1, r8
    5544:	4610      	mov	r0, r2
    5546:	9203      	str	r2, [sp, #12]
    5548:	f025 fbdd 	bl	2ad06 <strnlen>
				len = strlen(bps);
    554c:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    554e:	2700      	movs	r7, #0
			bpe = bps + len;
    5550:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    5552:	b962      	cbnz	r2, 556e <cbvprintf+0x70e>
    5554:	e6c3      	b.n	52de <cbvprintf+0x47e>
				len = strlen(bps);
    5556:	4610      	mov	r0, r2
    5558:	9203      	str	r2, [sp, #12]
    555a:	f7fb fc4c 	bl	df6 <strlen>
    555e:	e7f5      	b.n	554c <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    5560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5562:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    5566:	2700      	movs	r7, #0
			bpe = buf + 1;
    5568:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    556c:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    556e:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    5570:	b107      	cbz	r7, 5574 <cbvprintf+0x714>
			nj_len += 1U;
    5572:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    5574:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    5578:	06c1      	lsls	r1, r0, #27
    557a:	f140 8237 	bpl.w	59ec <cbvprintf+0xb8c>
			nj_len += 2U;
    557e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    5580:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    5582:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    5584:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    5586:	bf44      	itt	mi
    5588:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    558a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    558c:	f1bb 0f00 	cmp.w	fp, #0
    5590:	dd23      	ble.n	55da <cbvprintf+0x77a>
			width -= (int)nj_len;
    5592:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    5596:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    559a:	0759      	lsls	r1, r3, #29
    559c:	f3c3 0880 	ubfx	r8, r3, #2, #1
    55a0:	d41b      	bmi.n	55da <cbvprintf+0x77a>
				if (conv->flag_zero) {
    55a2:	0658      	lsls	r0, r3, #25
    55a4:	f140 8236 	bpl.w	5a14 <cbvprintf+0xbb4>
					if (sign != 0) {
    55a8:	2f00      	cmp	r7, #0
    55aa:	f000 8236 	beq.w	5a1a <cbvprintf+0xbba>
						OUTC(sign);
    55ae:	4651      	mov	r1, sl
    55b0:	4638      	mov	r0, r7
    55b2:	9203      	str	r2, [sp, #12]
    55b4:	47c8      	blx	r9
    55b6:	2800      	cmp	r0, #0
    55b8:	f2c0 8224 	blt.w	5a04 <cbvprintf+0xba4>
    55bc:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    55be:	4647      	mov	r7, r8
						OUTC(sign);
    55c0:	3601      	adds	r6, #1
					pad = '0';
    55c2:	f04f 0830 	mov.w	r8, #48	; 0x30
    55c6:	445e      	add	r6, fp
    55c8:	465b      	mov	r3, fp
				while (width-- > 0) {
    55ca:	2b00      	cmp	r3, #0
    55cc:	eba6 000b 	sub.w	r0, r6, fp
    55d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    55d4:	f300 820e 	bgt.w	59f4 <cbvprintf+0xb94>
    55d8:	4606      	mov	r6, r0
		if (sign != 0) {
    55da:	b147      	cbz	r7, 55ee <cbvprintf+0x78e>
			OUTC(sign);
    55dc:	4651      	mov	r1, sl
    55de:	4638      	mov	r0, r7
    55e0:	9203      	str	r2, [sp, #12]
    55e2:	47c8      	blx	r9
    55e4:	2800      	cmp	r0, #0
    55e6:	f2c0 820d 	blt.w	5a04 <cbvprintf+0xba4>
    55ea:	9a03      	ldr	r2, [sp, #12]
    55ec:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    55ee:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    55f2:	0659      	lsls	r1, r3, #25
    55f4:	f140 8265 	bpl.w	5ac2 <cbvprintf+0xc62>
			if (conv->specifier_a) {
    55f8:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    55fc:	2b00      	cmp	r3, #0
    55fe:	eba6 0602 	sub.w	r6, r6, r2
    5602:	f280 8219 	bge.w	5a38 <cbvprintf+0xbd8>
    5606:	4617      	mov	r7, r2
    5608:	46b8      	mov	r8, r7
    560a:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    560c:	f817 0b01 	ldrb.w	r0, [r7], #1
    5610:	2870      	cmp	r0, #112	; 0x70
    5612:	f040 8205 	bne.w	5a20 <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
    5616:	9f10      	ldr	r7, [sp, #64]	; 0x40
    5618:	461e      	mov	r6, r3
    561a:	441f      	add	r7, r3
    561c:	1bbb      	subs	r3, r7, r6
    561e:	2b00      	cmp	r3, #0
    5620:	f300 8248 	bgt.w	5ab4 <cbvprintf+0xc54>
			OUTS(cp, bpe);
    5624:	462b      	mov	r3, r5
    5626:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    5628:	4651      	mov	r1, sl
    562a:	4648      	mov	r0, r9
    562c:	f01f ff54 	bl	254d8 <outs>
    5630:	2800      	cmp	r0, #0
    5632:	f2c0 81e7 	blt.w	5a04 <cbvprintf+0xba4>
    5636:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    5638:	4606      	mov	r6, r0
    563a:	4483      	add	fp, r0
		while (width > 0) {
    563c:	ebab 0306 	sub.w	r3, fp, r6
    5640:	2b00      	cmp	r3, #0
    5642:	f77f ae4c 	ble.w	52de <cbvprintf+0x47e>
			OUTC(' ');
    5646:	4651      	mov	r1, sl
    5648:	2020      	movs	r0, #32
    564a:	47c8      	blx	r9
    564c:	2800      	cmp	r0, #0
    564e:	f2c0 81d9 	blt.w	5a04 <cbvprintf+0xba4>
    5652:	3601      	adds	r6, #1
			--width;
    5654:	e7f2      	b.n	563c <cbvprintf+0x7dc>
			if (conv->flag_plus) {
    5656:	073d      	lsls	r5, r7, #28
    5658:	d42b      	bmi.n	56b2 <cbvprintf+0x852>
				sign = ' ';
    565a:	f017 0710 	ands.w	r7, r7, #16
    565e:	bf18      	it	ne
    5660:	2720      	movne	r7, #32
			sint = value->sint;
    5662:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    5666:	2b00      	cmp	r3, #0
    5668:	da05      	bge.n	5676 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
    566a:	4252      	negs	r2, r2
    566c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    5670:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5674:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    5676:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    567a:	9300      	str	r3, [sp, #0]
    567c:	aa0e      	add	r2, sp, #56	; 0x38
    567e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    5682:	ab13      	add	r3, sp, #76	; 0x4c
    5684:	f7ff fba0 	bl	4dc8 <encode_uint>
    5688:	4602      	mov	r2, r0
			if (precision >= 0) {
    568a:	f1b8 0f00 	cmp.w	r8, #0
    568e:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    5692:	f6ff af5e 	blt.w	5552 <cbvprintf+0x6f2>
				conv->flag_zero = false;
    5696:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    569a:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    569c:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    56a0:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    56a2:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    56a6:	f67f af54 	bls.w	5552 <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
    56aa:	eba8 0303 	sub.w	r3, r8, r3
    56ae:	930f      	str	r3, [sp, #60]	; 0x3c
    56b0:	e74f      	b.n	5552 <cbvprintf+0x6f2>
				sign = '+';
    56b2:	272b      	movs	r7, #43	; 0x2b
    56b4:	e7d5      	b.n	5662 <cbvprintf+0x802>
		switch (conv->specifier) {
    56b6:	2700      	movs	r7, #0
    56b8:	e7dd      	b.n	5676 <cbvprintf+0x816>
			if (value->ptr != NULL) {
    56ba:	980c      	ldr	r0, [sp, #48]	; 0x30
    56bc:	2800      	cmp	r0, #0
    56be:	f000 8191 	beq.w	59e4 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    56c2:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    56c6:	9300      	str	r3, [sp, #0]
    56c8:	aa0e      	add	r2, sp, #56	; 0x38
    56ca:	ab13      	add	r3, sp, #76	; 0x4c
    56cc:	2100      	movs	r1, #0
    56ce:	f7ff fb7b 	bl	4dc8 <encode_uint>
				conv->altform_0c = true;
    56d2:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    56d6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    56da:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    56de:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    56e2:	4602      	mov	r2, r0
				conv->altform_0c = true;
    56e4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    56e8:	2700      	movs	r7, #0
				goto prec_int_pad0;
    56ea:	e7ce      	b.n	568a <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
    56ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    56ee:	2907      	cmp	r1, #7
    56f0:	f63f adf5 	bhi.w	52de <cbvprintf+0x47e>
    56f4:	e8df f001 	tbb	[pc, r1]
    56f8:	0c06040c 	.word	0x0c06040c
    56fc:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    5700:	701e      	strb	r6, [r3, #0]
		break;
    5702:	e5ec      	b.n	52de <cbvprintf+0x47e>
		*(short *)dp = (short)count;
    5704:	801e      	strh	r6, [r3, #0]
		break;
    5706:	e5ea      	b.n	52de <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
    5708:	17f2      	asrs	r2, r6, #31
    570a:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    570e:	e5e6      	b.n	52de <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    5710:	601e      	str	r6, [r3, #0]
		break;
    5712:	e5e4      	b.n	52de <cbvprintf+0x47e>
		*sign = '-';
    5714:	272d      	movs	r7, #45	; 0x2d
    5716:	e64d      	b.n	53b4 <cbvprintf+0x554>
		*sign = '+';
    5718:	272b      	movs	r7, #43	; 0x2b
    571a:	e64b      	b.n	53b4 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    571c:	f240 70ff 	movw	r0, #2047	; 0x7ff
    5720:	4285      	cmp	r5, r0
    5722:	d131      	bne.n	5788 <cbvprintf+0x928>
			if (isupper((int)c)) {
    5724:	3201      	adds	r2, #1
    5726:	48b9      	ldr	r0, [pc, #740]	; (5a0c <cbvprintf+0xbac>)
    5728:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    572a:	430b      	orrs	r3, r1
    572c:	5c12      	ldrb	r2, [r2, r0]
    572e:	f002 0203 	and.w	r2, r2, #3
    5732:	d11b      	bne.n	576c <cbvprintf+0x90c>
			if (isupper((int)c)) {
    5734:	2a01      	cmp	r2, #1
    5736:	d111      	bne.n	575c <cbvprintf+0x8fc>
				*buf++ = 'I';
    5738:	2349      	movs	r3, #73	; 0x49
    573a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    573e:	234e      	movs	r3, #78	; 0x4e
    5740:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    5744:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    5746:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    574a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    574e:	f36f 1386 	bfc	r3, #6, #1
    5752:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    5756:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    575a:	e707      	b.n	556c <cbvprintf+0x70c>
				*buf++ = 'i';
    575c:	2369      	movs	r3, #105	; 0x69
    575e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5762:	236e      	movs	r3, #110	; 0x6e
    5764:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    5768:	2366      	movs	r3, #102	; 0x66
    576a:	e7ec      	b.n	5746 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
    576c:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    576e:	bf07      	ittee	eq
    5770:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    5772:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    5774:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    5776:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    5778:	bf0c      	ite	eq
    577a:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    577e:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    5782:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    5786:	e7de      	b.n	5746 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    5788:	2000      	movs	r0, #0
    578a:	e621      	b.n	53d0 <cbvprintf+0x570>
				expo--;
    578c:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    578e:	1849      	adds	r1, r1, r1
    5790:	415b      	adcs	r3, r3
    5792:	2b00      	cmp	r3, #0
    5794:	dafa      	bge.n	578c <cbvprintf+0x92c>
    5796:	e9cd 1308 	strd	r1, r3, [sp, #32]
    579a:	e62d      	b.n	53f8 <cbvprintf+0x598>
			fract >>= 1;
    579c:	0840      	lsrs	r0, r0, #1
    579e:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    57a2:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    57a4:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    57a8:	46ac      	mov	ip, r5
			expo++;
    57aa:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    57ae:	d2f5      	bcs.n	579c <cbvprintf+0x93c>
		fract *= 5U;
    57b0:	fb0e f501 	mul.w	r5, lr, r1
    57b4:	fba0 010e 	umull	r0, r1, r0, lr
    57b8:	4429      	add	r1, r5
		decexp--;
    57ba:	3b01      	subs	r3, #1
		expo++;
    57bc:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    57c0:	f04f 0c01 	mov.w	ip, #1
    57c4:	e624      	b.n	5410 <cbvprintf+0x5b0>
		fract += 2;
    57c6:	3102      	adds	r1, #2
    57c8:	f140 0000 	adc.w	r0, r0, #0
    57cc:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    57d0:	a808      	add	r0, sp, #32
    57d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    57d6:	f01f fe50 	bl	2547a <_ldiv5>
		decexp++;
    57da:	9b04      	ldr	r3, [sp, #16]
    57dc:	9a03      	ldr	r2, [sp, #12]
    57de:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    57e2:	3d01      	subs	r5, #1
		decexp++;
    57e4:	3301      	adds	r3, #1
			fract <<= 1;
    57e6:	1849      	adds	r1, r1, r1
    57e8:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    57ea:	2800      	cmp	r0, #0
			expo--;
    57ec:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    57f0:	daf9      	bge.n	57e6 <cbvprintf+0x986>
    57f2:	e9cd 1008 	strd	r1, r0, [sp, #32]
    57f6:	e614      	b.n	5422 <cbvprintf+0x5c2>
    57f8:	2300      	movs	r3, #0
    57fa:	461d      	mov	r5, r3
    57fc:	e616      	b.n	542c <cbvprintf+0x5cc>
			precision -= decexp;
    57fe:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    5802:	2266      	movs	r2, #102	; 0x66
    5804:	e637      	b.n	5476 <cbvprintf+0x616>
	bool prune_zero = false;
    5806:	2100      	movs	r1, #0
    5808:	e63f      	b.n	548a <cbvprintf+0x62a>
		decimals = precision + 1;
    580a:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    580e:	2d10      	cmp	r5, #16
    5810:	bfa8      	it	ge
    5812:	2510      	movge	r5, #16
    5814:	2110      	movs	r1, #16
    5816:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    5818:	2000      	movs	r0, #0
    581a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    581e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    5822:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    5826:	b9a5      	cbnz	r5, 5852 <cbvprintf+0x9f2>
	fract += round;
    5828:	9d08      	ldr	r5, [sp, #32]
    582a:	1949      	adds	r1, r1, r5
    582c:	9d09      	ldr	r5, [sp, #36]	; 0x24
    582e:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    5832:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    5836:	d21b      	bcs.n	5870 <cbvprintf+0xa10>
	fract += round;
    5838:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    583c:	2a66      	cmp	r2, #102	; 0x66
    583e:	f040 8099 	bne.w	5974 <cbvprintf+0xb14>
		if (decexp > 0) {
    5842:	2b00      	cmp	r3, #0
    5844:	dc23      	bgt.n	588e <cbvprintf+0xa2e>
			*buf++ = '0';
    5846:	2130      	movs	r1, #48	; 0x30
    5848:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    584c:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5850:	e02f      	b.n	58b2 <cbvprintf+0xa52>
	*v >>= 1;
    5852:	0849      	lsrs	r1, r1, #1
    5854:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    5858:	0840      	lsrs	r0, r0, #1
    585a:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    585e:	a80a      	add	r0, sp, #40	; 0x28
    5860:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5864:	3d01      	subs	r5, #1
    5866:	f01f fe08 	bl	2547a <_ldiv5>
    586a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    586e:	e7d8      	b.n	5822 <cbvprintf+0x9c2>
	*v >>= 1;
    5870:	0849      	lsrs	r1, r1, #1
    5872:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    5876:	a808      	add	r0, sp, #32
	*v >>= 1;
    5878:	086d      	lsrs	r5, r5, #1
    587a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    587e:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5882:	f01f fdfa 	bl	2547a <_ldiv5>
		decexp++;
    5886:	9b05      	ldr	r3, [sp, #20]
    5888:	9a04      	ldr	r2, [sp, #16]
    588a:	3301      	adds	r3, #1
    588c:	e7d6      	b.n	583c <cbvprintf+0x9dc>
	char *buf = bps;
    588e:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    5890:	9907      	ldr	r1, [sp, #28]
    5892:	2900      	cmp	r1, #0
    5894:	dd0b      	ble.n	58ae <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
    5896:	a907      	add	r1, sp, #28
    5898:	a808      	add	r0, sp, #32
    589a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    589e:	f01f fe04 	bl	254aa <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    58a2:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    58a4:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    58a8:	3b01      	subs	r3, #1
    58aa:	9a04      	ldr	r2, [sp, #16]
    58ac:	d1f0      	bne.n	5890 <cbvprintf+0xa30>
			conv->pad0_value = decexp;
    58ae:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    58b0:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    58b2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    58b6:	0689      	lsls	r1, r1, #26
    58b8:	d402      	bmi.n	58c0 <cbvprintf+0xa60>
    58ba:	f1b8 0f00 	cmp.w	r8, #0
    58be:	dd1d      	ble.n	58fc <cbvprintf+0xa9c>
			*buf++ = '.';
    58c0:	212e      	movs	r1, #46	; 0x2e
    58c2:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    58c6:	b19b      	cbz	r3, 58f0 <cbvprintf+0xa90>
    58c8:	f1b8 0f00 	cmp.w	r8, #0
    58cc:	dd16      	ble.n	58fc <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
    58ce:	4259      	negs	r1, r3
    58d0:	4541      	cmp	r1, r8
    58d2:	bfa8      	it	ge
    58d4:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    58d6:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    58da:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    58dc:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    58de:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    58e2:	bfd4      	ite	le
    58e4:	2100      	movle	r1, #0
    58e6:	2101      	movgt	r1, #1
    58e8:	f361 1045 	bfi	r0, r1, #5, #1
    58ec:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    58f0:	f1b8 0f00 	cmp.w	r8, #0
    58f4:	dd02      	ble.n	58fc <cbvprintf+0xa9c>
    58f6:	9907      	ldr	r1, [sp, #28]
    58f8:	2900      	cmp	r1, #0
    58fa:	dc56      	bgt.n	59aa <cbvprintf+0xb4a>
	if (prune_zero) {
    58fc:	9903      	ldr	r1, [sp, #12]
    58fe:	2900      	cmp	r1, #0
    5900:	d163      	bne.n	59ca <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
    5902:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    5906:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    590a:	2945      	cmp	r1, #69	; 0x45
    590c:	d121      	bne.n	5952 <cbvprintf+0xaf2>
		if (decexp < 0) {
    590e:	2b00      	cmp	r3, #0
		*buf++ = c;
    5910:	4629      	mov	r1, r5
			decexp = -decexp;
    5912:	bfb8      	it	lt
    5914:	425b      	neglt	r3, r3
		*buf++ = c;
    5916:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    591a:	bfb4      	ite	lt
    591c:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    591e:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    5920:	2b63      	cmp	r3, #99	; 0x63
    5922:	706a      	strb	r2, [r5, #1]
    5924:	dd09      	ble.n	593a <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
    5926:	2064      	movs	r0, #100	; 0x64
    5928:	fbb3 f2f0 	udiv	r2, r3, r0
    592c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    5930:	1ce9      	adds	r1, r5, #3
    5932:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    5936:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    593a:	200a      	movs	r0, #10
    593c:	460d      	mov	r5, r1
    593e:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5942:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5946:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    594a:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    594c:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    5950:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5954:	2b00      	cmp	r3, #0
    5956:	dc43      	bgt.n	59e0 <cbvprintf+0xb80>
    5958:	9b10      	ldr	r3, [sp, #64]	; 0x40
    595a:	2b00      	cmp	r3, #0
    595c:	bfd4      	ite	le
    595e:	2300      	movle	r3, #0
    5960:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5962:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5966:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    596a:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    596c:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    5970:	702b      	strb	r3, [r5, #0]
	return bps;
    5972:	e5fb      	b.n	556c <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
    5974:	a907      	add	r1, sp, #28
    5976:	a808      	add	r0, sp, #32
    5978:	e9cd 2304 	strd	r2, r3, [sp, #16]
    597c:	f01f fd95 	bl	254aa <_get_digit>
		if (*buf++ != '0') {
    5980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    5984:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    5988:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    598c:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    598e:	bf18      	it	ne
    5990:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    5994:	0688      	lsls	r0, r1, #26
    5996:	d402      	bmi.n	599e <cbvprintf+0xb3e>
    5998:	f1b8 0f00 	cmp.w	r8, #0
    599c:	dd12      	ble.n	59c4 <cbvprintf+0xb64>
			*buf++ = '.';
    599e:	212e      	movs	r1, #46	; 0x2e
    59a0:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    59a4:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    59a8:	e7a2      	b.n	58f0 <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
    59aa:	a907      	add	r1, sp, #28
    59ac:	a808      	add	r0, sp, #32
    59ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
    59b2:	f01f fd7a 	bl	254aa <_get_digit>
		precision--;
    59b6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    59ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    59be:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    59c2:	e795      	b.n	58f0 <cbvprintf+0xa90>
		if (*buf++ != '0') {
    59c4:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    59c8:	e798      	b.n	58fc <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
    59ca:	2100      	movs	r1, #0
    59cc:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    59ce:	4628      	mov	r0, r5
    59d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    59d4:	2930      	cmp	r1, #48	; 0x30
    59d6:	d0fa      	beq.n	59ce <cbvprintf+0xb6e>
		if (*buf != '.') {
    59d8:	292e      	cmp	r1, #46	; 0x2e
    59da:	bf18      	it	ne
    59dc:	4605      	movne	r5, r0
    59de:	e792      	b.n	5906 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
    59e0:	2301      	movs	r3, #1
    59e2:	e7be      	b.n	5962 <cbvprintf+0xb02>
			bpe = bps + 5;
    59e4:	4d0a      	ldr	r5, [pc, #40]	; (5a10 <cbvprintf+0xbb0>)
		char sign = 0;
    59e6:	4607      	mov	r7, r0
			bps = "(nil)";
    59e8:	1f6a      	subs	r2, r5, #5
    59ea:	e5c0      	b.n	556e <cbvprintf+0x70e>
		} else if (conv->altform_0) {
    59ec:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    59ee:	bf48      	it	mi
    59f0:	3301      	addmi	r3, #1
    59f2:	e5c5      	b.n	5580 <cbvprintf+0x720>
					OUTC(pad);
    59f4:	4651      	mov	r1, sl
    59f6:	4640      	mov	r0, r8
    59f8:	9203      	str	r2, [sp, #12]
    59fa:	47c8      	blx	r9
    59fc:	2800      	cmp	r0, #0
    59fe:	9a03      	ldr	r2, [sp, #12]
    5a00:	f6bf ade2 	bge.w	55c8 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
    5a04:	b01b      	add	sp, #108	; 0x6c
    5a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5a0a:	bf00      	nop
    5a0c:	0002f355 	.word	0x0002f355
    5a10:	0002d610 	.word	0x0002d610
				char pad = ' ';
    5a14:	f04f 0820 	mov.w	r8, #32
    5a18:	e5d5      	b.n	55c6 <cbvprintf+0x766>
					pad = '0';
    5a1a:	f04f 0830 	mov.w	r8, #48	; 0x30
    5a1e:	e5d2      	b.n	55c6 <cbvprintf+0x766>
					OUTC(*cp++);
    5a20:	4651      	mov	r1, sl
    5a22:	47c8      	blx	r9
    5a24:	2800      	cmp	r0, #0
    5a26:	f6bf adef 	bge.w	5608 <cbvprintf+0x7a8>
    5a2a:	e7eb      	b.n	5a04 <cbvprintf+0xba4>
					OUTC(*cp++);
    5a2c:	4651      	mov	r1, sl
    5a2e:	9203      	str	r2, [sp, #12]
    5a30:	47c8      	blx	r9
    5a32:	2800      	cmp	r0, #0
    5a34:	9a03      	ldr	r2, [sp, #12]
    5a36:	dbe5      	blt.n	5a04 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    5a38:	7810      	ldrb	r0, [r2, #0]
    5a3a:	4b37      	ldr	r3, [pc, #220]	; (5b18 <cbvprintf+0xcb8>)
    5a3c:	5cc3      	ldrb	r3, [r0, r3]
    5a3e:	075b      	lsls	r3, r3, #29
    5a40:	4617      	mov	r7, r2
    5a42:	eb06 0802 	add.w	r8, r6, r2
    5a46:	f102 0201 	add.w	r2, r2, #1
    5a4a:	d4ef      	bmi.n	5a2c <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
    5a4c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    5a50:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    5a52:	0699      	lsls	r1, r3, #26
    5a54:	d407      	bmi.n	5a66 <cbvprintf+0xc06>
    5a56:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    5a58:	2e00      	cmp	r6, #0
    5a5a:	eba8 0206 	sub.w	r2, r8, r6
    5a5e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    5a62:	dc0f      	bgt.n	5a84 <cbvprintf+0xc24>
    5a64:	4690      	mov	r8, r2
				if (*cp == '.') {
    5a66:	7838      	ldrb	r0, [r7, #0]
    5a68:	282e      	cmp	r0, #46	; 0x2e
    5a6a:	d108      	bne.n	5a7e <cbvprintf+0xc1e>
					OUTC(*cp++);
    5a6c:	4651      	mov	r1, sl
    5a6e:	47c8      	blx	r9
						OUTC('0');
    5a70:	2800      	cmp	r0, #0
    5a72:	dbc7      	blt.n	5a04 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
    5a74:	2e00      	cmp	r6, #0
						OUTC('0');
    5a76:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    5a7a:	dc09      	bgt.n	5a90 <cbvprintf+0xc30>
					OUTC(*cp++);
    5a7c:	3701      	adds	r7, #1
    5a7e:	eba8 0607 	sub.w	r6, r8, r7
    5a82:	e00e      	b.n	5aa2 <cbvprintf+0xc42>
						OUTC('0');
    5a84:	4651      	mov	r1, sl
    5a86:	2030      	movs	r0, #48	; 0x30
    5a88:	47c8      	blx	r9
    5a8a:	2800      	cmp	r0, #0
    5a8c:	dae4      	bge.n	5a58 <cbvprintf+0xbf8>
    5a8e:	e7b9      	b.n	5a04 <cbvprintf+0xba4>
						OUTC('0');
    5a90:	4651      	mov	r1, sl
    5a92:	2030      	movs	r0, #48	; 0x30
    5a94:	47c8      	blx	r9
    5a96:	3e01      	subs	r6, #1
    5a98:	e7ea      	b.n	5a70 <cbvprintf+0xc10>
					OUTC(*cp++);
    5a9a:	4651      	mov	r1, sl
    5a9c:	47c8      	blx	r9
    5a9e:	2800      	cmp	r0, #0
    5aa0:	dbb0      	blt.n	5a04 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    5aa2:	4a1d      	ldr	r2, [pc, #116]	; (5b18 <cbvprintf+0xcb8>)
    5aa4:	46b8      	mov	r8, r7
    5aa6:	19f3      	adds	r3, r6, r7
    5aa8:	f817 0b01 	ldrb.w	r0, [r7], #1
    5aac:	5c12      	ldrb	r2, [r2, r0]
    5aae:	0752      	lsls	r2, r2, #29
    5ab0:	d4f3      	bmi.n	5a9a <cbvprintf+0xc3a>
    5ab2:	e5b0      	b.n	5616 <cbvprintf+0x7b6>
				OUTC('0');
    5ab4:	4651      	mov	r1, sl
    5ab6:	2030      	movs	r0, #48	; 0x30
    5ab8:	47c8      	blx	r9
    5aba:	2800      	cmp	r0, #0
    5abc:	dba2      	blt.n	5a04 <cbvprintf+0xba4>
    5abe:	3601      	adds	r6, #1
    5ac0:	e5ac      	b.n	561c <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
    5ac2:	06d8      	lsls	r0, r3, #27
    5ac4:	d401      	bmi.n	5aca <cbvprintf+0xc6a>
    5ac6:	0719      	lsls	r1, r3, #28
    5ac8:	d507      	bpl.n	5ada <cbvprintf+0xc7a>
				OUTC('0');
    5aca:	4651      	mov	r1, sl
    5acc:	2030      	movs	r0, #48	; 0x30
    5ace:	9203      	str	r2, [sp, #12]
    5ad0:	47c8      	blx	r9
    5ad2:	2800      	cmp	r0, #0
    5ad4:	db96      	blt.n	5a04 <cbvprintf+0xba4>
    5ad6:	9a03      	ldr	r2, [sp, #12]
    5ad8:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    5ada:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5ade:	06db      	lsls	r3, r3, #27
    5ae0:	d508      	bpl.n	5af4 <cbvprintf+0xc94>
				OUTC(conv->specifier);
    5ae2:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5ae6:	9203      	str	r2, [sp, #12]
    5ae8:	4651      	mov	r1, sl
    5aea:	47c8      	blx	r9
    5aec:	2800      	cmp	r0, #0
    5aee:	db89      	blt.n	5a04 <cbvprintf+0xba4>
    5af0:	9a03      	ldr	r2, [sp, #12]
    5af2:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5af4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5af6:	4437      	add	r7, r6
    5af8:	1bbb      	subs	r3, r7, r6
    5afa:	2b00      	cmp	r3, #0
    5afc:	dc01      	bgt.n	5b02 <cbvprintf+0xca2>
			OUTS(bps, bpe);
    5afe:	462b      	mov	r3, r5
    5b00:	e592      	b.n	5628 <cbvprintf+0x7c8>
				OUTC('0');
    5b02:	4651      	mov	r1, sl
    5b04:	2030      	movs	r0, #48	; 0x30
    5b06:	9203      	str	r2, [sp, #12]
    5b08:	47c8      	blx	r9
    5b0a:	2800      	cmp	r0, #0
    5b0c:	f6ff af7a 	blt.w	5a04 <cbvprintf+0xba4>
    5b10:	9a03      	ldr	r2, [sp, #12]
    5b12:	3601      	adds	r6, #1
    5b14:	e7f0      	b.n	5af8 <cbvprintf+0xc98>
    5b16:	bf00      	nop
    5b18:	0002f356 	.word	0x0002f356

00005b1c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5b1c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    5b1e:	4910      	ldr	r1, [pc, #64]	; (5b60 <enable_logger+0x44>)
    5b20:	4810      	ldr	r0, [pc, #64]	; (5b64 <enable_logger+0x48>)
{
    5b22:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5b24:	2200      	movs	r2, #0
    5b26:	f024 fe0c 	bl	2a742 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5b2a:	4d0f      	ldr	r5, [pc, #60]	; (5b68 <enable_logger+0x4c>)
    5b2c:	490f      	ldr	r1, [pc, #60]	; (5b6c <enable_logger+0x50>)
    5b2e:	2200      	movs	r2, #0
    5b30:	2300      	movs	r3, #0
    5b32:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5b36:	2400      	movs	r4, #0
    5b38:	230e      	movs	r3, #14
    5b3a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    5b3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5b42:	4b0b      	ldr	r3, [pc, #44]	; (5b70 <enable_logger+0x54>)
    5b44:	9400      	str	r4, [sp, #0]
    5b46:	f44f 7240 	mov.w	r2, #768	; 0x300
    5b4a:	4628      	mov	r0, r5
    5b4c:	f01c fa4a 	bl	21fe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5b50:	4908      	ldr	r1, [pc, #32]	; (5b74 <enable_logger+0x58>)
    5b52:	4628      	mov	r0, r5
    5b54:	f024 fa73 	bl	2a03e <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5b58:	4620      	mov	r0, r4
    5b5a:	b009      	add	sp, #36	; 0x24
    5b5c:	bd30      	pop	{r4, r5, pc}
    5b5e:	bf00      	nop
    5b60:	00005b79 	.word	0x00005b79
    5b64:	20001300 	.word	0x20001300
    5b68:	20001338 	.word	0x20001338
    5b6c:	20004598 	.word	0x20004598
    5b70:	00005d91 	.word	0x00005d91
    5b74:	0002d611 	.word	0x0002d611

00005b78 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    5b78:	4801      	ldr	r0, [pc, #4]	; (5b80 <log_process_thread_timer_expiry_fn+0x8>)
    5b7a:	f01c bc75 	b.w	22468 <z_impl_k_sem_give>
    5b7e:	bf00      	nop
    5b80:	20000bfc 	.word	0x20000bfc

00005b84 <log_init>:
{
    5b84:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5b86:	4b12      	ldr	r3, [pc, #72]	; (5bd0 <log_init+0x4c>)
    5b88:	f3bf 8f5b 	dmb	ish
    5b8c:	e853 5f00 	ldrex	r5, [r3]
    5b90:	1c6a      	adds	r2, r5, #1
    5b92:	e843 2100 	strex	r1, r2, [r3]
    5b96:	2900      	cmp	r1, #0
    5b98:	d1f8      	bne.n	5b8c <log_init+0x8>
    5b9a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    5b9e:	b92d      	cbnz	r5, 5bac <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    5ba0:	4c0c      	ldr	r4, [pc, #48]	; (5bd4 <log_init+0x50>)
    5ba2:	4e0d      	ldr	r6, [pc, #52]	; (5bd8 <log_init+0x54>)
    5ba4:	1b36      	subs	r6, r6, r4
    5ba6:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5ba8:	42b5      	cmp	r5, r6
    5baa:	db00      	blt.n	5bae <log_init+0x2a>
}
    5bac:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    5bae:	7b23      	ldrb	r3, [r4, #12]
    5bb0:	b153      	cbz	r3, 5bc8 <log_init+0x44>
			if (backend->api->init != NULL) {
    5bb2:	6823      	ldr	r3, [r4, #0]
    5bb4:	699b      	ldr	r3, [r3, #24]
    5bb6:	b10b      	cbz	r3, 5bbc <log_init+0x38>
				backend->api->init(backend);
    5bb8:	4620      	mov	r0, r4
    5bba:	4798      	blx	r3
			log_backend_enable(backend,
    5bbc:	6863      	ldr	r3, [r4, #4]
    5bbe:	2204      	movs	r2, #4
    5bc0:	6819      	ldr	r1, [r3, #0]
    5bc2:	4620      	mov	r0, r4
    5bc4:	f000 f992 	bl	5eec <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5bc8:	3501      	adds	r5, #1
    5bca:	3410      	adds	r4, #16
    5bcc:	e7ec      	b.n	5ba8 <log_init+0x24>
    5bce:	bf00      	nop
    5bd0:	20001e44 	.word	0x20001e44
    5bd4:	0002b73c 	.word	0x0002b73c
    5bd8:	0002b74c 	.word	0x0002b74c

00005bdc <z_log_notify_backend_enabled>:
{
    5bdc:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    5bde:	4c04      	ldr	r4, [pc, #16]	; (5bf0 <z_log_notify_backend_enabled+0x14>)
    5be0:	7823      	ldrb	r3, [r4, #0]
    5be2:	b913      	cbnz	r3, 5bea <z_log_notify_backend_enabled+0xe>
    5be4:	4803      	ldr	r0, [pc, #12]	; (5bf4 <z_log_notify_backend_enabled+0x18>)
    5be6:	f01c fc3f 	bl	22468 <z_impl_k_sem_give>
	backend_attached = true;
    5bea:	2301      	movs	r3, #1
    5bec:	7023      	strb	r3, [r4, #0]
}
    5bee:	bd10      	pop	{r4, pc}
    5bf0:	20003419 	.word	0x20003419
    5bf4:	20000bfc 	.word	0x20000bfc

00005bf8 <z_log_dropped>:
    5bf8:	4b0c      	ldr	r3, [pc, #48]	; (5c2c <z_log_dropped+0x34>)
    5bfa:	f3bf 8f5b 	dmb	ish
    5bfe:	e853 2f00 	ldrex	r2, [r3]
    5c02:	3201      	adds	r2, #1
    5c04:	e843 2100 	strex	r1, r2, [r3]
    5c08:	2900      	cmp	r1, #0
    5c0a:	d1f8      	bne.n	5bfe <z_log_dropped+0x6>
    5c0c:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    5c10:	b158      	cbz	r0, 5c2a <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5c12:	f3bf 8f5b 	dmb	ish
    5c16:	4b06      	ldr	r3, [pc, #24]	; (5c30 <z_log_dropped+0x38>)
    5c18:	e853 2f00 	ldrex	r2, [r3]
    5c1c:	3a01      	subs	r2, #1
    5c1e:	e843 2100 	strex	r1, r2, [r3]
    5c22:	2900      	cmp	r1, #0
    5c24:	d1f8      	bne.n	5c18 <z_log_dropped+0x20>
    5c26:	f3bf 8f5b 	dmb	ish
}
    5c2a:	4770      	bx	lr
    5c2c:	20001e40 	.word	0x20001e40
    5c30:	20001e3c 	.word	0x20001e3c

00005c34 <z_log_dropped_read_and_clear>:
}
    5c34:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5c36:	4b06      	ldr	r3, [pc, #24]	; (5c50 <z_log_dropped_read_and_clear+0x1c>)
    5c38:	f3bf 8f5b 	dmb	ish
    5c3c:	4602      	mov	r2, r0
    5c3e:	e853 0f00 	ldrex	r0, [r3]
    5c42:	e843 2100 	strex	r1, r2, [r3]
    5c46:	2900      	cmp	r1, #0
    5c48:	d1f9      	bne.n	5c3e <z_log_dropped_read_and_clear+0xa>
    5c4a:	f3bf 8f5b 	dmb	ish
    5c4e:	4770      	bx	lr
    5c50:	20001e40 	.word	0x20001e40

00005c54 <dropped_notify>:
{
    5c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    5c56:	f7ff ffed 	bl	5c34 <z_log_dropped_read_and_clear>
    5c5a:	4c0a      	ldr	r4, [pc, #40]	; (5c84 <dropped_notify+0x30>)
    5c5c:	4d0a      	ldr	r5, [pc, #40]	; (5c88 <dropped_notify+0x34>)
    5c5e:	1b2d      	subs	r5, r5, r4
    5c60:	4607      	mov	r7, r0
    5c62:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5c64:	2600      	movs	r6, #0
    5c66:	42ae      	cmp	r6, r5
    5c68:	db00      	blt.n	5c6c <dropped_notify+0x18>
}
    5c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    5c6c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5c6e:	795b      	ldrb	r3, [r3, #5]
    5c70:	b12b      	cbz	r3, 5c7e <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    5c72:	6823      	ldr	r3, [r4, #0]
    5c74:	691b      	ldr	r3, [r3, #16]
    5c76:	b113      	cbz	r3, 5c7e <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    5c78:	4639      	mov	r1, r7
    5c7a:	4620      	mov	r0, r4
    5c7c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5c7e:	3601      	adds	r6, #1
    5c80:	3410      	adds	r4, #16
    5c82:	e7f0      	b.n	5c66 <dropped_notify+0x12>
    5c84:	0002b73c 	.word	0x0002b73c
    5c88:	0002b74c 	.word	0x0002b74c

00005c8c <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    5c8c:	4901      	ldr	r1, [pc, #4]	; (5c94 <z_log_msg2_init+0x8>)
    5c8e:	4802      	ldr	r0, [pc, #8]	; (5c98 <z_log_msg2_init+0xc>)
    5c90:	f01f bccb 	b.w	2562a <mpsc_pbuf_init>
    5c94:	0002b994 	.word	0x0002b994
    5c98:	20001e48 	.word	0x20001e48

00005c9c <log_core_init>:
	panic_mode = false;
    5c9c:	4a08      	ldr	r2, [pc, #32]	; (5cc0 <log_core_init+0x24>)
{
    5c9e:	b508      	push	{r3, lr}
	panic_mode = false;
    5ca0:	2300      	movs	r3, #0
    5ca2:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    5ca4:	4a07      	ldr	r2, [pc, #28]	; (5cc4 <log_core_init+0x28>)
    5ca6:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    5ca8:	4b07      	ldr	r3, [pc, #28]	; (5cc8 <log_core_init+0x2c>)
    5caa:	4a08      	ldr	r2, [pc, #32]	; (5ccc <log_core_init+0x30>)
    5cac:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5cae:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    5cb2:	f000 faff 	bl	62b4 <log_output_timestamp_freq_set>
}
    5cb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    5cba:	f7ff bfe7 	b.w	5c8c <z_log_msg2_init>
    5cbe:	bf00      	nop
    5cc0:	2000341a 	.word	0x2000341a
    5cc4:	20001e40 	.word	0x20001e40
    5cc8:	200001b4 	.word	0x200001b4
    5ccc:	000258c9 	.word	0x000258c9

00005cd0 <z_log_msg2_alloc>:
{
    5cd0:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    5cd2:	2200      	movs	r2, #0
    5cd4:	4801      	ldr	r0, [pc, #4]	; (5cdc <z_log_msg2_alloc+0xc>)
    5cd6:	2300      	movs	r3, #0
    5cd8:	f01f bcc6 	b.w	25668 <mpsc_pbuf_alloc>
    5cdc:	20001e48 	.word	0x20001e48

00005ce0 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    5ce0:	4801      	ldr	r0, [pc, #4]	; (5ce8 <z_log_msg2_claim+0x8>)
    5ce2:	f01f bd54 	b.w	2578e <mpsc_pbuf_claim>
    5ce6:	bf00      	nop
    5ce8:	20001e48 	.word	0x20001e48

00005cec <z_log_msg2_free>:
{
    5cec:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5cee:	4801      	ldr	r0, [pc, #4]	; (5cf4 <z_log_msg2_free+0x8>)
    5cf0:	f01f bd99 	b.w	25826 <mpsc_pbuf_free>
    5cf4:	20001e48 	.word	0x20001e48

00005cf8 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    5cf8:	4801      	ldr	r0, [pc, #4]	; (5d00 <z_log_msg2_pending+0x8>)
    5cfa:	f01f bdc8 	b.w	2588e <mpsc_pbuf_is_pending>
    5cfe:	bf00      	nop
    5d00:	20001e48 	.word	0x20001e48

00005d04 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    5d04:	4b1d      	ldr	r3, [pc, #116]	; (5d7c <z_impl_log_process+0x78>)
    5d06:	781b      	ldrb	r3, [r3, #0]
{
    5d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d0c:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    5d0e:	b903      	cbnz	r3, 5d12 <z_impl_log_process+0xe>
    5d10:	b388      	cbz	r0, 5d76 <z_impl_log_process+0x72>
	msg = get_msg();
    5d12:	f01f fded 	bl	258f0 <get_msg>
	if (msg.msg) {
    5d16:	4606      	mov	r6, r0
    5d18:	b118      	cbz	r0, 5d22 <z_impl_log_process+0x1e>
		if (!bypass) {
    5d1a:	b16d      	cbz	r5, 5d38 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    5d1c:	4630      	mov	r0, r6
    5d1e:	f7ff ffe5 	bl	5cec <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    5d22:	b92d      	cbnz	r5, 5d30 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    5d24:	4b16      	ldr	r3, [pc, #88]	; (5d80 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    5d26:	681b      	ldr	r3, [r3, #0]
    5d28:	2b00      	cmp	r3, #0
    5d2a:	dd01      	ble.n	5d30 <z_impl_log_process+0x2c>
		dropped_notify();
    5d2c:	f7ff ff92 	bl	5c54 <dropped_notify>
}
    5d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    5d34:	f7ff bfe0 	b.w	5cf8 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5d38:	4b12      	ldr	r3, [pc, #72]	; (5d84 <z_impl_log_process+0x80>)
    5d3a:	f3bf 8f5b 	dmb	ish
    5d3e:	e853 2f00 	ldrex	r2, [r3]
    5d42:	3a01      	subs	r2, #1
    5d44:	e843 2100 	strex	r1, r2, [r3]
    5d48:	2900      	cmp	r1, #0
    5d4a:	d1f8      	bne.n	5d3e <z_impl_log_process+0x3a>
    5d4c:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    5d50:	4c0d      	ldr	r4, [pc, #52]	; (5d88 <z_impl_log_process+0x84>)
    5d52:	4f0e      	ldr	r7, [pc, #56]	; (5d8c <z_impl_log_process+0x88>)
    5d54:	1b3f      	subs	r7, r7, r4
    5d56:	113f      	asrs	r7, r7, #4
    5d58:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    5d5a:	45b8      	cmp	r8, r7
    5d5c:	dade      	bge.n	5d1c <z_impl_log_process+0x18>
	return backend->cb->active;
    5d5e:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    5d60:	795b      	ldrb	r3, [r3, #5]
    5d62:	b123      	cbz	r3, 5d6e <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    5d64:	6823      	ldr	r3, [r4, #0]
    5d66:	4631      	mov	r1, r6
    5d68:	681b      	ldr	r3, [r3, #0]
    5d6a:	4620      	mov	r0, r4
    5d6c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    5d6e:	f108 0801 	add.w	r8, r8, #1
    5d72:	3410      	adds	r4, #16
    5d74:	e7f1      	b.n	5d5a <z_impl_log_process+0x56>
}
    5d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d7a:	bf00      	nop
    5d7c:	20003419 	.word	0x20003419
    5d80:	20001e40 	.word	0x20001e40
    5d84:	20001e3c 	.word	0x20001e3c
    5d88:	0002b73c 	.word	0x0002b73c
    5d8c:	0002b74c 	.word	0x0002b74c

00005d90 <log_process_thread_func>:
{
    5d90:	b510      	push	{r4, lr}
	log_init();
    5d92:	f7ff fef7 	bl	5b84 <log_init>
	return z_impl_z_current_get();
    5d96:	f01d f865 	bl	22e64 <z_impl_z_current_get>
	proc_tid = process_tid;
    5d9a:	4b0c      	ldr	r3, [pc, #48]	; (5dcc <log_process_thread_func+0x3c>)
    5d9c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    5d9e:	b130      	cbz	r0, 5dae <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5da0:	4b0b      	ldr	r3, [pc, #44]	; (5dd0 <log_process_thread_func+0x40>)
	    process_tid &&
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	2b09      	cmp	r3, #9
    5da6:	dd02      	ble.n	5dae <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5da8:	480a      	ldr	r0, [pc, #40]	; (5dd4 <log_process_thread_func+0x44>)
    5daa:	f01c fb5d 	bl	22468 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    5dae:	4c09      	ldr	r4, [pc, #36]	; (5dd4 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5db0:	2000      	movs	r0, #0
    5db2:	f7ff ffa7 	bl	5d04 <z_impl_log_process>
		if (log_process(false) == false) {
    5db6:	2800      	cmp	r0, #0
    5db8:	d1fa      	bne.n	5db0 <log_process_thread_func+0x20>
    5dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5dc2:	4620      	mov	r0, r4
    5dc4:	f01c fb76 	bl	224b4 <z_impl_k_sem_take>
    5dc8:	e7f2      	b.n	5db0 <log_process_thread_func+0x20>
    5dca:	bf00      	nop
    5dcc:	20001e84 	.word	0x20001e84
    5dd0:	20001e3c 	.word	0x20001e3c
    5dd4:	20000bfc 	.word	0x20000bfc

00005dd8 <z_log_msg_post_finalize>:
{
    5dd8:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5dda:	4b1d      	ldr	r3, [pc, #116]	; (5e50 <z_log_msg_post_finalize+0x78>)
    5ddc:	f3bf 8f5b 	dmb	ish
    5de0:	e853 2f00 	ldrex	r2, [r3]
    5de4:	1c51      	adds	r1, r2, #1
    5de6:	e843 1000 	strex	r0, r1, [r3]
    5dea:	2800      	cmp	r0, #0
    5dec:	d1f8      	bne.n	5de0 <z_log_msg_post_finalize+0x8>
    5dee:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    5df2:	4b18      	ldr	r3, [pc, #96]	; (5e54 <z_log_msg_post_finalize+0x7c>)
    5df4:	781b      	ldrb	r3, [r3, #0]
    5df6:	b183      	cbz	r3, 5e1a <z_log_msg_post_finalize+0x42>
    5df8:	f04f 0320 	mov.w	r3, #32
    5dfc:	f3ef 8411 	mrs	r4, BASEPRI
    5e00:	f383 8812 	msr	BASEPRI_MAX, r3
    5e04:	f3bf 8f6f 	isb	sy
    5e08:	2000      	movs	r0, #0
    5e0a:	f7ff ff7b 	bl	5d04 <z_impl_log_process>
	__asm__ volatile(
    5e0e:	f384 8811 	msr	BASEPRI, r4
    5e12:	f3bf 8f6f 	isb	sy
}
    5e16:	b002      	add	sp, #8
    5e18:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    5e1a:	4b0f      	ldr	r3, [pc, #60]	; (5e58 <z_log_msg_post_finalize+0x80>)
    5e1c:	681b      	ldr	r3, [r3, #0]
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d0f9      	beq.n	5e16 <z_log_msg_post_finalize+0x3e>
    5e22:	b952      	cbnz	r2, 5e3a <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    5e24:	2200      	movs	r2, #0
    5e26:	2300      	movs	r3, #0
    5e28:	e9cd 2300 	strd	r2, r3, [sp]
    5e2c:	480b      	ldr	r0, [pc, #44]	; (5e5c <z_log_msg_post_finalize+0x84>)
    5e2e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5e32:	2300      	movs	r3, #0
    5e34:	f01d fa28 	bl	23288 <z_impl_k_timer_start>
    5e38:	e7ed      	b.n	5e16 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    5e3a:	2a0a      	cmp	r2, #10
    5e3c:	d1eb      	bne.n	5e16 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    5e3e:	4807      	ldr	r0, [pc, #28]	; (5e5c <z_log_msg_post_finalize+0x84>)
    5e40:	f024 fc8b 	bl	2a75a <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5e44:	4806      	ldr	r0, [pc, #24]	; (5e60 <z_log_msg_post_finalize+0x88>)
}
    5e46:	b002      	add	sp, #8
    5e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e4c:	f01c bb0c 	b.w	22468 <z_impl_k_sem_give>
    5e50:	20001e3c 	.word	0x20001e3c
    5e54:	2000341a 	.word	0x2000341a
    5e58:	20001e84 	.word	0x20001e84
    5e5c:	20001300 	.word	0x20001300
    5e60:	20000bfc 	.word	0x20000bfc

00005e64 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    5e64:	4b06      	ldr	r3, [pc, #24]	; (5e80 <z_log_msg2_commit+0x1c>)
{
    5e66:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    5e68:	681b      	ldr	r3, [r3, #0]
{
    5e6a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    5e6c:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5e6e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    5e70:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    5e72:	4804      	ldr	r0, [pc, #16]	; (5e84 <z_log_msg2_commit+0x20>)
    5e74:	f01f fc6e 	bl	25754 <mpsc_pbuf_commit>
}
    5e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    5e7c:	f7ff bfac 	b.w	5dd8 <z_log_msg_post_finalize>
    5e80:	200001b4 	.word	0x200001b4
    5e84:	20001e48 	.word	0x20001e48

00005e88 <z_impl_log_panic>:
{
    5e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    5e8a:	4f0e      	ldr	r7, [pc, #56]	; (5ec4 <z_impl_log_panic+0x3c>)
    5e8c:	783d      	ldrb	r5, [r7, #0]
    5e8e:	b975      	cbnz	r5, 5eae <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5e90:	4c0d      	ldr	r4, [pc, #52]	; (5ec8 <z_impl_log_panic+0x40>)
    5e92:	4e0e      	ldr	r6, [pc, #56]	; (5ecc <z_impl_log_panic+0x44>)
	log_init();
    5e94:	f7ff fe76 	bl	5b84 <log_init>
    5e98:	1b36      	subs	r6, r6, r4
    5e9a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5e9c:	42b5      	cmp	r5, r6
    5e9e:	db07      	blt.n	5eb0 <z_impl_log_panic+0x28>
    5ea0:	2000      	movs	r0, #0
    5ea2:	f7ff ff2f 	bl	5d04 <z_impl_log_process>
		while (log_process(false) == true) {
    5ea6:	2800      	cmp	r0, #0
    5ea8:	d1fa      	bne.n	5ea0 <z_impl_log_panic+0x18>
	panic_mode = true;
    5eaa:	2301      	movs	r3, #1
    5eac:	703b      	strb	r3, [r7, #0]
}
    5eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5eb0:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5eb2:	795b      	ldrb	r3, [r3, #5]
    5eb4:	b11b      	cbz	r3, 5ebe <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5eb6:	6823      	ldr	r3, [r4, #0]
    5eb8:	4620      	mov	r0, r4
    5eba:	695b      	ldr	r3, [r3, #20]
    5ebc:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    5ebe:	3501      	adds	r5, #1
    5ec0:	3410      	adds	r4, #16
    5ec2:	e7eb      	b.n	5e9c <z_impl_log_panic+0x14>
    5ec4:	2000341a 	.word	0x2000341a
    5ec8:	0002b73c 	.word	0x0002b73c
    5ecc:	0002b74c 	.word	0x0002b74c

00005ed0 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    5ed0:	4a04      	ldr	r2, [pc, #16]	; (5ee4 <log_source_name_get+0x14>)
    5ed2:	4b05      	ldr	r3, [pc, #20]	; (5ee8 <log_source_name_get+0x18>)
    5ed4:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    5ed6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5eda:	bf34      	ite	cc
    5edc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    5ee0:	2000      	movcs	r0, #0
}
    5ee2:	4770      	bx	lr
    5ee4:	0002b5bc 	.word	0x0002b5bc
    5ee8:	0002b73c 	.word	0x0002b73c

00005eec <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    5eec:	4a05      	ldr	r2, [pc, #20]	; (5f04 <log_backend_enable+0x18>)
	backend->cb->id = id;
    5eee:	6843      	ldr	r3, [r0, #4]
    5ef0:	1a80      	subs	r0, r0, r2
    5ef2:	1100      	asrs	r0, r0, #4
    5ef4:	3001      	adds	r0, #1
	backend->cb->active = true;
    5ef6:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    5ef8:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    5efa:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    5efc:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    5efe:	f7ff be6d 	b.w	5bdc <z_log_notify_backend_enabled>
    5f02:	bf00      	nop
    5f04:	0002b73c 	.word	0x0002b73c

00005f08 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    5f08:	b40e      	push	{r1, r2, r3}
    5f0a:	b503      	push	{r0, r1, lr}
    5f0c:	ab03      	add	r3, sp, #12
    5f0e:	4601      	mov	r1, r0
    5f10:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5f14:	4804      	ldr	r0, [pc, #16]	; (5f28 <print_formatted+0x20>)
	va_start(args, fmt);
    5f16:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    5f18:	f7fe ffa2 	bl	4e60 <cbvprintf>
	va_end(args);

	return length;
}
    5f1c:	b002      	add	sp, #8
    5f1e:	f85d eb04 	ldr.w	lr, [sp], #4
    5f22:	b003      	add	sp, #12
    5f24:	4770      	bx	lr
    5f26:	bf00      	nop
    5f28:	00025931 	.word	0x00025931

00005f2c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5f30:	461d      	mov	r5, r3
    5f32:	9b08      	ldr	r3, [sp, #32]
    5f34:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f36:	06da      	lsls	r2, r3, #27
{
    5f38:	4604      	mov	r4, r0
    5f3a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5f3c:	d405      	bmi.n	5f4a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5f3e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5f40:	bf4c      	ite	mi
    5f42:	492b      	ldrmi	r1, [pc, #172]	; (5ff0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    5f44:	492b      	ldrpl	r1, [pc, #172]	; (5ff4 <hexdump_line_print+0xc8>)
    5f46:	f7ff ffdf 	bl	5f08 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    5f4a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5ff8 <hexdump_line_print+0xcc>
{
    5f4e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5f52:	45a8      	cmp	r8, r5
    5f54:	db2d      	blt.n	5fb2 <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    5f56:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 5ffc <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    5f5a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 6000 <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    5f5e:	f8df a098 	ldr.w	sl, [pc, #152]	; 5ff8 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f62:	2500      	movs	r5, #0
		if (i < length) {
    5f64:	42bd      	cmp	r5, r7
    5f66:	d232      	bcs.n	5fce <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    5f68:	5d72      	ldrb	r2, [r6, r5]
    5f6a:	4649      	mov	r1, r9
    5f6c:	4620      	mov	r0, r4
    5f6e:	f7ff ffcb 	bl	5f08 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f72:	3501      	adds	r5, #1
    5f74:	2d10      	cmp	r5, #16
    5f76:	d123      	bne.n	5fc0 <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
    5f78:	4922      	ldr	r1, [pc, #136]	; (6004 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    5f7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 5ff8 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    5f7e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 6008 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    5f82:	f8df a088 	ldr.w	sl, [pc, #136]	; 600c <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    5f86:	4620      	mov	r0, r4
    5f88:	f7ff ffbe 	bl	5f08 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5f8c:	2500      	movs	r5, #0
		if (i < length) {
    5f8e:	42af      	cmp	r7, r5
    5f90:	d929      	bls.n	5fe6 <hexdump_line_print+0xba>
			char c = (char)data[i];
    5f92:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    5f94:	f812 3009 	ldrb.w	r3, [r2, r9]
    5f98:	f013 0f97 	tst.w	r3, #151	; 0x97
    5f9c:	bf08      	it	eq
    5f9e:	222e      	moveq	r2, #46	; 0x2e
    5fa0:	4651      	mov	r1, sl
    5fa2:	4620      	mov	r0, r4
    5fa4:	f7ff ffb0 	bl	5f08 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5fa8:	3501      	adds	r5, #1
    5faa:	2d10      	cmp	r5, #16
    5fac:	d114      	bne.n	5fd8 <hexdump_line_print+0xac>
		}
	}
}
    5fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    5fb2:	4649      	mov	r1, r9
    5fb4:	4620      	mov	r0, r4
    5fb6:	f7ff ffa7 	bl	5f08 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5fba:	f108 0801 	add.w	r8, r8, #1
    5fbe:	e7c8      	b.n	5f52 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5fc0:	076a      	lsls	r2, r5, #29
    5fc2:	d1cf      	bne.n	5f64 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    5fc4:	4651      	mov	r1, sl
    5fc6:	4620      	mov	r0, r4
    5fc8:	f7ff ff9e 	bl	5f08 <print_formatted>
    5fcc:	e7ca      	b.n	5f64 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    5fce:	4641      	mov	r1, r8
    5fd0:	4620      	mov	r0, r4
    5fd2:	f7ff ff99 	bl	5f08 <print_formatted>
    5fd6:	e7cc      	b.n	5f72 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5fd8:	076b      	lsls	r3, r5, #29
    5fda:	d1d8      	bne.n	5f8e <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fdc:	4641      	mov	r1, r8
    5fde:	4620      	mov	r0, r4
    5fe0:	f7ff ff92 	bl	5f08 <print_formatted>
    5fe4:	e7d3      	b.n	5f8e <hexdump_line_print+0x62>
			print_formatted(output, " ");
    5fe6:	4641      	mov	r1, r8
    5fe8:	4620      	mov	r0, r4
    5fea:	f7ff ff8d 	bl	5f08 <print_formatted>
    5fee:	e7db      	b.n	5fa8 <hexdump_line_print+0x7c>
    5ff0:	0002d61e 	.word	0x0002d61e
    5ff4:	0002d61d 	.word	0x0002d61d
    5ff8:	0002d628 	.word	0x0002d628
    5ffc:	0002d626 	.word	0x0002d626
    6000:	0002d620 	.word	0x0002d620
    6004:	0002d62a 	.word	0x0002d62a
    6008:	0002f356 	.word	0x0002f356
    600c:	0002d62c 	.word	0x0002d62c

00006010 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    6010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6014:	b087      	sub	sp, #28
    6016:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6018:	f001 0301 	and.w	r3, r1, #1
{
    601c:	9205      	str	r2, [sp, #20]
    601e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    6022:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6026:	9304      	str	r3, [sp, #16]
{
    6028:	4607      	mov	r7, r0
    602a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    602c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    6030:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    6034:	f01f fc60 	bl	258f8 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    6038:	4602      	mov	r2, r0
    603a:	2800      	cmp	r0, #0
    603c:	d044      	beq.n	60c8 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    603e:	493a      	ldr	r1, [pc, #232]	; (6128 <prefix_print+0x118>)
    6040:	4638      	mov	r0, r7
    6042:	f7ff ff61 	bl	5f08 <print_formatted>
    6046:	4605      	mov	r5, r0
	}

	if (stamp) {
    6048:	f1bb 0f00 	cmp.w	fp, #0
    604c:	d008      	beq.n	6060 <prefix_print+0x50>
	if (!format) {
    604e:	f018 0f44 	tst.w	r8, #68	; 0x44
    6052:	d13b      	bne.n	60cc <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    6054:	4935      	ldr	r1, [pc, #212]	; (612c <prefix_print+0x11c>)
    6056:	4622      	mov	r2, r4
    6058:	4638      	mov	r0, r7
    605a:	f7ff ff55 	bl	5f08 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    605e:	4405      	add	r5, r0
	if (color) {
    6060:	9b04      	ldr	r3, [sp, #16]
    6062:	b153      	cbz	r3, 607a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    6064:	4b32      	ldr	r3, [pc, #200]	; (6130 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    6066:	4933      	ldr	r1, [pc, #204]	; (6134 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    6068:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    606c:	4b32      	ldr	r3, [pc, #200]	; (6138 <prefix_print+0x128>)
    606e:	4638      	mov	r0, r7
    6070:	2a00      	cmp	r2, #0
    6072:	bf08      	it	eq
    6074:	461a      	moveq	r2, r3
    6076:	f7ff ff47 	bl	5f08 <print_formatted>
	if (level_on) {
    607a:	b13e      	cbz	r6, 608c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    607c:	4b2f      	ldr	r3, [pc, #188]	; (613c <prefix_print+0x12c>)
    607e:	4930      	ldr	r1, [pc, #192]	; (6140 <prefix_print+0x130>)
    6080:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    6084:	4638      	mov	r0, r7
    6086:	f7ff ff3f 	bl	5f08 <print_formatted>
    608a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    608c:	f1ba 0f00 	cmp.w	sl, #0
    6090:	db16      	blt.n	60c0 <prefix_print+0xb0>
		total += print_formatted(output,
    6092:	9b05      	ldr	r3, [sp, #20]
    6094:	2b00      	cmp	r3, #0
    6096:	d045      	beq.n	6124 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    6098:	2301      	movs	r3, #1
    609a:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    609e:	4b29      	ldr	r3, [pc, #164]	; (6144 <prefix_print+0x134>)
    60a0:	4c29      	ldr	r4, [pc, #164]	; (6148 <prefix_print+0x138>)
    60a2:	f019 0f10 	tst.w	r9, #16
    60a6:	bf18      	it	ne
    60a8:	461c      	movne	r4, r3
    60aa:	4651      	mov	r1, sl
    60ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    60b0:	f7ff ff0e 	bl	5ed0 <log_source_name_get>
    60b4:	4621      	mov	r1, r4
    60b6:	4602      	mov	r2, r0
    60b8:	4638      	mov	r0, r7
    60ba:	f7ff ff25 	bl	5f08 <print_formatted>
    60be:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    60c0:	1970      	adds	r0, r6, r5
    60c2:	b007      	add	sp, #28
    60c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    60c8:	4605      	mov	r5, r0
    60ca:	e7bd      	b.n	6048 <prefix_print+0x38>
	} else if (freq != 0U) {
    60cc:	4b1f      	ldr	r3, [pc, #124]	; (614c <prefix_print+0x13c>)
    60ce:	6818      	ldr	r0, [r3, #0]
    60d0:	2800      	cmp	r0, #0
    60d2:	d0c4      	beq.n	605e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    60d4:	4b1e      	ldr	r3, [pc, #120]	; (6150 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    60d6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    60da:	681b      	ldr	r3, [r3, #0]
    60dc:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    60e0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    60e4:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    60e8:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    60ec:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    60f0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    60f4:	fbb3 f2f1 	udiv	r2, r3, r1
    60f8:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    60fc:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    6100:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6104:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    6108:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    610c:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    6110:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6112:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    6116:	490f      	ldr	r1, [pc, #60]	; (6154 <prefix_print+0x144>)
    6118:	e9cd e001 	strd	lr, r0, [sp, #4]
    611c:	4638      	mov	r0, r7
    611e:	f7ff fef3 	bl	5f08 <print_formatted>
    6122:	e79c      	b.n	605e <prefix_print+0x4e>
		total += print_formatted(output,
    6124:	4c08      	ldr	r4, [pc, #32]	; (6148 <prefix_print+0x138>)
    6126:	e7c0      	b.n	60aa <prefix_print+0x9a>
    6128:	0002d63d 	.word	0x0002d63d
    612c:	0002d641 	.word	0x0002d641
    6130:	0002b9a8 	.word	0x0002b9a8
    6134:	0002dd66 	.word	0x0002dd66
    6138:	0002d62f 	.word	0x0002d62f
    613c:	0002b9bc 	.word	0x0002b9bc
    6140:	0002d666 	.word	0x0002d666
    6144:	0002d639 	.word	0x0002d639
    6148:	0002d634 	.word	0x0002d634
    614c:	20001e88 	.word	0x20001e88
    6150:	20001e8c 	.word	0x20001e8c
    6154:	0002d64a 	.word	0x0002d64a

00006158 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    6158:	b538      	push	{r3, r4, r5, lr}
    615a:	460c      	mov	r4, r1
	if (color) {
    615c:	07e1      	lsls	r1, r4, #31
{
    615e:	4605      	mov	r5, r0
	if (color) {
    6160:	d503      	bpl.n	616a <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    6162:	4a08      	ldr	r2, [pc, #32]	; (6184 <postfix_print+0x2c>)
    6164:	4908      	ldr	r1, [pc, #32]	; (6188 <postfix_print+0x30>)
    6166:	f7ff fecf 	bl	5f08 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    616a:	06e2      	lsls	r2, r4, #27
    616c:	d408      	bmi.n	6180 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    616e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    6170:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    6172:	bf4c      	ite	mi
    6174:	4905      	ldrmi	r1, [pc, #20]	; (618c <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    6176:	4906      	ldrpl	r1, [pc, #24]	; (6190 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    6178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    617c:	f7ff bec4 	b.w	5f08 <print_formatted>
}
    6180:	bd38      	pop	{r3, r4, r5, pc}
    6182:	bf00      	nop
    6184:	0002d62f 	.word	0x0002d62f
    6188:	0002dd66 	.word	0x0002dd66
    618c:	0002d61e 	.word	0x0002d61e
    6190:	0002d61d 	.word	0x0002d61d

00006194 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    6194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    6198:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    619a:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    619e:	4606      	mov	r6, r0
    61a0:	460c      	mov	r4, r1
    61a2:	4690      	mov	r8, r2
    61a4:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    61a8:	d04d      	beq.n	6246 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    61aa:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    61ac:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    61ae:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    61b2:	2b00      	cmp	r3, #0
    61b4:	d044      	beq.n	6240 <log_output_msg2_process+0xac>
    61b6:	4925      	ldr	r1, [pc, #148]	; (624c <log_output_msg2_process+0xb8>)
    61b8:	1a5b      	subs	r3, r3, r1
    61ba:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    61be:	e9cd 2301 	strd	r2, r3, [sp, #4]
    61c2:	f8cd 9000 	str.w	r9, [sp]
    61c6:	68a3      	ldr	r3, [r4, #8]
    61c8:	2200      	movs	r2, #0
    61ca:	4641      	mov	r1, r8
    61cc:	4630      	mov	r0, r6
    61ce:	f7ff ff1f 	bl	6010 <prefix_print>
    61d2:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    61d4:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    61d6:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    61da:	f3c3 2349 	ubfx	r3, r3, #9, #10
    61de:	b153      	cbz	r3, 61f6 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    61e0:	4f1b      	ldr	r7, [pc, #108]	; (6250 <log_output_msg2_process+0xbc>)
    61e2:	481c      	ldr	r0, [pc, #112]	; (6254 <log_output_msg2_process+0xc0>)
    61e4:	491c      	ldr	r1, [pc, #112]	; (6258 <log_output_msg2_process+0xc4>)
    61e6:	462b      	mov	r3, r5
    61e8:	4632      	mov	r2, r6
    61ea:	f1b9 0f00 	cmp.w	r9, #0
    61ee:	bf08      	it	eq
    61f0:	4638      	moveq	r0, r7
    61f2:	f01e fe1b 	bl	24e2c <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    61f6:	8867      	ldrh	r7, [r4, #2]
    61f8:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    61fc:	b197      	cbz	r7, 6224 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    61fe:	6823      	ldr	r3, [r4, #0]
    6200:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6204:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    6206:	2f10      	cmp	r7, #16
    6208:	463c      	mov	r4, r7
    620a:	bf28      	it	cs
    620c:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    620e:	4629      	mov	r1, r5
    6210:	f8cd 8000 	str.w	r8, [sp]
    6214:	4653      	mov	r3, sl
    6216:	4622      	mov	r2, r4
    6218:	4630      	mov	r0, r6
    621a:	f7ff fe87 	bl	5f2c <hexdump_line_print>
	} while (len);
    621e:	1b3f      	subs	r7, r7, r4
		data += length;
    6220:	4425      	add	r5, r4
	} while (len);
    6222:	d1f0      	bne.n	6206 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    6224:	f1b9 0f00 	cmp.w	r9, #0
    6228:	d004      	beq.n	6234 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    622a:	464a      	mov	r2, r9
    622c:	4641      	mov	r1, r8
    622e:	4630      	mov	r0, r6
    6230:	f7ff ff92 	bl	6158 <postfix_print>
	}

	log_output_flush(output);
    6234:	4630      	mov	r0, r6
}
    6236:	b004      	add	sp, #16
    6238:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    623c:	f01f bb6b 	b.w	25916 <log_output_flush>
		int16_t source_id = source ?
    6240:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6244:	e7bb      	b.n	61be <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    6246:	46ca      	mov	sl, r9
    6248:	e7c4      	b.n	61d4 <log_output_msg2_process+0x40>
    624a:	bf00      	nop
    624c:	0002b5bc 	.word	0x0002b5bc
    6250:	00025967 	.word	0x00025967
    6254:	00025931 	.word	0x00025931
    6258:	00004e61 	.word	0x00004e61

0000625c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    625c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    625e:	f242 730f 	movw	r3, #9999	; 0x270f
    6262:	428b      	cmp	r3, r1
    6264:	bf28      	it	cs
    6266:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    6268:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    626a:	4a0f      	ldr	r2, [pc, #60]	; (62a8 <log_output_dropped_process+0x4c>)
{
    626c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    626e:	2105      	movs	r1, #5
    6270:	4668      	mov	r0, sp
    6272:	f01e fe55 	bl	24f20 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6276:	6863      	ldr	r3, [r4, #4]
    6278:	490c      	ldr	r1, [pc, #48]	; (62ac <log_output_dropped_process+0x50>)
    627a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    627c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    627e:	220b      	movs	r2, #11
    6280:	4628      	mov	r0, r5
    6282:	f01f fb3b 	bl	258fc <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    6286:	6863      	ldr	r3, [r4, #4]
    6288:	4632      	mov	r2, r6
    628a:	4669      	mov	r1, sp
    628c:	4628      	mov	r0, r5
    628e:	685b      	ldr	r3, [r3, #4]
    6290:	f01f fb34 	bl	258fc <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    6294:	6863      	ldr	r3, [r4, #4]
    6296:	4906      	ldr	r1, [pc, #24]	; (62b0 <log_output_dropped_process+0x54>)
    6298:	685b      	ldr	r3, [r3, #4]
    629a:	221b      	movs	r2, #27
    629c:	4628      	mov	r0, r5
    629e:	f01f fb2d 	bl	258fc <buffer_write>
		     output->control_block->ctx);
}
    62a2:	b002      	add	sp, #8
    62a4:	bd70      	pop	{r4, r5, r6, pc}
    62a6:	bf00      	nop
    62a8:	0002dd42 	.word	0x0002dd42
    62ac:	0002d6a8 	.word	0x0002d6a8
    62b0:	0002d68c 	.word	0x0002d68c

000062b4 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    62b4:	4a08      	ldr	r2, [pc, #32]	; (62d8 <log_output_timestamp_freq_set+0x24>)
{
    62b6:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    62b8:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    62ba:	4c08      	ldr	r4, [pc, #32]	; (62dc <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    62bc:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    62be:	2100      	movs	r1, #0
    62c0:	42a0      	cmp	r0, r4
    62c2:	d804      	bhi.n	62ce <log_output_timestamp_freq_set+0x1a>
    62c4:	b101      	cbz	r1, 62c8 <log_output_timestamp_freq_set+0x14>
    62c6:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    62c8:	4b05      	ldr	r3, [pc, #20]	; (62e0 <log_output_timestamp_freq_set+0x2c>)
    62ca:	6018      	str	r0, [r3, #0]
}
    62cc:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    62ce:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    62d0:	005b      	lsls	r3, r3, #1
    62d2:	2101      	movs	r1, #1
    62d4:	e7f4      	b.n	62c0 <log_output_timestamp_freq_set+0xc>
    62d6:	bf00      	nop
    62d8:	20001e8c 	.word	0x20001e8c
    62dc:	000f4240 	.word	0x000f4240
    62e0:	20001e88 	.word	0x20001e88

000062e4 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    62e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    62e8:	b085      	sub	sp, #20
    62ea:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    62ee:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    62f2:	4605      	mov	r5, r0
    62f4:	4688      	mov	r8, r1
    62f6:	4614      	mov	r4, r2
    62f8:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    62fa:	f1bb 0f00 	cmp.w	fp, #0
    62fe:	d037      	beq.n	6370 <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6300:	2200      	movs	r2, #0
    6302:	f8cd a000 	str.w	sl, [sp]
    6306:	465b      	mov	r3, fp
    6308:	210c      	movs	r1, #12
    630a:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    630c:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6310:	f7fe fa42 	bl	4798 <cbvprintf_package>
    6314:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    6316:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    631a:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    631e:	f005 0407 	and.w	r4, r5, #7
    6322:	4d14      	ldr	r5, [pc, #80]	; (6374 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    6324:	4b14      	ldr	r3, [pc, #80]	; (6378 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    6326:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6328:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    632a:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    632e:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6332:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    6336:	432c      	orrs	r4, r5
    6338:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    633c:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    633e:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    6340:	f7ff fcc6 	bl	5cd0 <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    6344:	4605      	mov	r5, r0
    6346:	b150      	cbz	r0, 635e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    6348:	f1bb 0f00 	cmp.w	fp, #0
    634c:	d007      	beq.n	635e <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    634e:	f8cd a000 	str.w	sl, [sp]
    6352:	465b      	mov	r3, fp
    6354:	2200      	movs	r2, #0
    6356:	4639      	mov	r1, r7
    6358:	300c      	adds	r0, #12
    635a:	f7fe fa1d 	bl	4798 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    635e:	464b      	mov	r3, r9
    6360:	4622      	mov	r2, r4
    6362:	4641      	mov	r1, r8
    6364:	4628      	mov	r0, r5
}
    6366:	b005      	add	sp, #20
    6368:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    636c:	f01f bb08 	b.w	25980 <z_log_msg2_finalize>
		plen = 0;
    6370:	465f      	mov	r7, fp
    6372:	e7d0      	b.n	6316 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    6374:	0007fe00 	.word	0x0007fe00
    6378:	7ff80000 	.word	0x7ff80000

0000637c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    637c:	4b01      	ldr	r3, [pc, #4]	; (6384 <log_backend_rtt_init+0x8>)
    637e:	2201      	movs	r2, #1
    6380:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    6382:	4770      	bx	lr
    6384:	2000342b 	.word	0x2000342b

00006388 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    6388:	4b02      	ldr	r3, [pc, #8]	; (6394 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    638a:	4803      	ldr	r0, [pc, #12]	; (6398 <panic+0x10>)
    638c:	2201      	movs	r2, #1
    638e:	701a      	strb	r2, [r3, #0]
    6390:	f01f bac1 	b.w	25916 <log_output_flush>
    6394:	2000342c 	.word	0x2000342c
    6398:	0002b9ec 	.word	0x0002b9ec

0000639c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    639c:	4801      	ldr	r0, [pc, #4]	; (63a4 <dropped+0x8>)
    639e:	f7ff bf5d 	b.w	625c <log_output_dropped_process>
    63a2:	bf00      	nop
    63a4:	0002b9ec 	.word	0x0002b9ec

000063a8 <process>:
{
	uint32_t flags = log_backend_std_get_flags();

	flags |= IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ? LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_output_msg2_process(&log_output_rtt, &msg->log, flags);
    63a8:	4801      	ldr	r0, [pc, #4]	; (63b0 <process+0x8>)
    63aa:	220f      	movs	r2, #15
    63ac:	f7ff bef2 	b.w	6194 <log_output_msg2_process>
    63b0:	0002b9ec 	.word	0x0002b9ec

000063b4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    63b4:	4b05      	ldr	r3, [pc, #20]	; (63cc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    63b6:	781b      	ldrb	r3, [r3, #0]
    63b8:	b11b      	cbz	r3, 63c2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    63ba:	f241 3088 	movw	r0, #5000	; 0x1388
    63be:	f024 b991 	b.w	2a6e4 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    63c2:	20a4      	movs	r0, #164	; 0xa4
    63c4:	2100      	movs	r1, #0
    63c6:	f01c bd33 	b.w	22e30 <z_impl_k_sleep>
    63ca:	bf00      	nop
    63cc:	2000342c 	.word	0x2000342c

000063d0 <data_out_block_mode>:
{
    63d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    63d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 6464 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    63d8:	f8df a08c 	ldr.w	sl, [pc, #140]	; 6468 <data_out_block_mode+0x98>
{
    63dc:	4680      	mov	r8, r0
    63de:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    63e0:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    63e2:	f899 5000 	ldrb.w	r5, [r9]
    63e6:	b9cd      	cbnz	r5, 641c <data_out_block_mode+0x4c>
    63e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    63ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    63f0:	4650      	mov	r0, sl
    63f2:	f01b ff4b 	bl	2228c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    63f6:	463a      	mov	r2, r7
    63f8:	4641      	mov	r1, r8
    63fa:	4628      	mov	r0, r5
    63fc:	f01b fb50 	bl	21aa0 <SEGGER_RTT_WriteSkipNoLock>
    6400:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    6402:	4650      	mov	r0, sl
    6404:	f01b ffba 	bl	2237c <z_impl_k_mutex_unlock>
		if (ret) {
    6408:	4d18      	ldr	r5, [pc, #96]	; (646c <data_out_block_mode+0x9c>)
    640a:	b1fe      	cbz	r6, 644c <data_out_block_mode+0x7c>
	host_present = true;
    640c:	2301      	movs	r3, #1
    640e:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    6410:	f899 3000 	ldrb.w	r3, [r9]
    6414:	b96b      	cbnz	r3, 6432 <data_out_block_mode+0x62>
}
    6416:	4638      	mov	r0, r7
    6418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    641c:	463a      	mov	r2, r7
    641e:	4641      	mov	r1, r8
    6420:	2000      	movs	r0, #0
    6422:	f01b fb3d 	bl	21aa0 <SEGGER_RTT_WriteSkipNoLock>
    6426:	4606      	mov	r6, r0
    6428:	e7ee      	b.n	6408 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    642a:	b95c      	cbnz	r4, 6444 <data_out_block_mode+0x74>
		host_present = false;
    642c:	702c      	strb	r4, [r5, #0]
    642e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    6432:	2000      	movs	r0, #0
    6434:	f01b fbb0 	bl	21b98 <SEGGER_RTT_HasDataUp>
    6438:	2800      	cmp	r0, #0
    643a:	d0ec      	beq.n	6416 <data_out_block_mode+0x46>
    643c:	782b      	ldrb	r3, [r5, #0]
    643e:	2b00      	cmp	r3, #0
    6440:	d1f3      	bne.n	642a <data_out_block_mode+0x5a>
    6442:	e7e8      	b.n	6416 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    6444:	3c01      	subs	r4, #1
    6446:	f7ff ffb5 	bl	63b4 <on_failed_write.part.0>
    644a:	e7f2      	b.n	6432 <data_out_block_mode+0x62>
		} else if (host_present) {
    644c:	782b      	ldrb	r3, [r5, #0]
    644e:	b113      	cbz	r3, 6456 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    6450:	3c01      	subs	r4, #1
    6452:	d104      	bne.n	645e <data_out_block_mode+0x8e>
		host_present = false;
    6454:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    6456:	782b      	ldrb	r3, [r5, #0]
    6458:	2b00      	cmp	r3, #0
    645a:	d1c2      	bne.n	63e2 <data_out_block_mode+0x12>
    645c:	e7db      	b.n	6416 <data_out_block_mode+0x46>
    645e:	f7ff ffa9 	bl	63b4 <on_failed_write.part.0>
    6462:	e7f8      	b.n	6456 <data_out_block_mode+0x86>
    6464:	2000342c 	.word	0x2000342c
    6468:	20000b70 	.word	0x20000b70
    646c:	2000342b 	.word	0x2000342b

00006470 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6474:	4605      	mov	r5, r0
	__asm__ volatile(
    6476:	f04f 0320 	mov.w	r3, #32
    647a:	f3ef 8611 	mrs	r6, BASEPRI
    647e:	f383 8812 	msr	BASEPRI_MAX, r3
    6482:	f3bf 8f6f 	isb	sy
	return list->head;
    6486:	4b0e      	ldr	r3, [pc, #56]	; (64c0 <pm_state_notify+0x50>)
    6488:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    648a:	b19c      	cbz	r4, 64b4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    648c:	4f0d      	ldr	r7, [pc, #52]	; (64c4 <pm_state_notify+0x54>)
    648e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 64c8 <pm_state_notify+0x58>
    6492:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    6496:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    649a:	2d00      	cmp	r5, #0
    649c:	bf08      	it	eq
    649e:	4613      	moveq	r3, r2
		if (callback) {
    64a0:	b12b      	cbz	r3, 64ae <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    64a2:	f898 2014 	ldrb.w	r2, [r8, #20]
    64a6:	fb09 f202 	mul.w	r2, r9, r2
    64aa:	5cb8      	ldrb	r0, [r7, r2]
    64ac:	4798      	blx	r3
	return node->next;
    64ae:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    64b0:	2c00      	cmp	r4, #0
    64b2:	d1f0      	bne.n	6496 <pm_state_notify+0x26>
	__asm__ volatile(
    64b4:	f386 8811 	msr	BASEPRI, r6
    64b8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    64bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    64c0:	20001ea4 	.word	0x20001ea4
    64c4:	20001eac 	.word	0x20001eac
    64c8:	20003398 	.word	0x20003398

000064cc <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    64cc:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    64ce:	2301      	movs	r3, #1
    64d0:	f000 001f 	and.w	r0, r0, #31
    64d4:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    64d8:	4b07      	ldr	r3, [pc, #28]	; (64f8 <atomic_clear_bit.constprop.0+0x2c>)
    64da:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    64de:	43c0      	mvns	r0, r0
    64e0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    64e4:	e853 2f00 	ldrex	r2, [r3]
    64e8:	4002      	ands	r2, r0
    64ea:	e843 2100 	strex	r1, r2, [r3]
    64ee:	2900      	cmp	r1, #0
    64f0:	d1f8      	bne.n	64e4 <atomic_clear_bit.constprop.0+0x18>
    64f2:	f3bf 8f5b 	dmb	ish
}
    64f6:	4770      	bx	lr
    64f8:	20001eb8 	.word	0x20001eb8

000064fc <pm_system_resume>:

void pm_system_resume(void)
{
    64fc:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    64fe:	4b1d      	ldr	r3, [pc, #116]	; (6574 <pm_system_resume+0x78>)
    6500:	7d1c      	ldrb	r4, [r3, #20]
    6502:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    6506:	f004 031f 	and.w	r3, r4, #31
    650a:	2201      	movs	r2, #1
    650c:	409a      	lsls	r2, r3
    650e:	4b1a      	ldr	r3, [pc, #104]	; (6578 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6510:	0961      	lsrs	r1, r4, #5
{
    6512:	b085      	sub	sp, #20
    6514:	43d0      	mvns	r0, r2
    6516:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    651a:	e853 1f00 	ldrex	r1, [r3]
    651e:	ea01 0500 	and.w	r5, r1, r0
    6522:	e843 5c00 	strex	ip, r5, [r3]
    6526:	f1bc 0f00 	cmp.w	ip, #0
    652a:	d1f6      	bne.n	651a <pm_system_resume+0x1e>
    652c:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    6530:	4211      	tst	r1, r2
    6532:	d017      	beq.n	6564 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    6534:	4d11      	ldr	r5, [pc, #68]	; (657c <pm_system_resume+0x80>)
    6536:	220c      	movs	r2, #12
    6538:	fb02 5204 	mla	r2, r2, r4, r5
    653c:	ca07      	ldmia	r2, {r0, r1, r2}
    653e:	ab01      	add	r3, sp, #4
    6540:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    6544:	4a0e      	ldr	r2, [pc, #56]	; (6580 <pm_system_resume+0x84>)
    6546:	b17a      	cbz	r2, 6568 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    6548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    654c:	f020 fbb4 	bl	26cb8 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    6550:	2000      	movs	r0, #0
    6552:	f7ff ff8d 	bl	6470 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    6556:	230c      	movs	r3, #12
    6558:	435c      	muls	r4, r3
    655a:	192a      	adds	r2, r5, r4
    655c:	2300      	movs	r3, #0
    655e:	512b      	str	r3, [r5, r4]
    6560:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    6564:	b005      	add	sp, #20
    6566:	bd30      	pop	{r4, r5, pc}
    6568:	f382 8811 	msr	BASEPRI, r2
    656c:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    6570:	e7ee      	b.n	6550 <pm_system_resume+0x54>
    6572:	bf00      	nop
    6574:	20003398 	.word	0x20003398
    6578:	20001ebc 	.word	0x20001ebc
    657c:	20001eac 	.word	0x20001eac
    6580:	00026cb9 	.word	0x00026cb9

00006584 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    6584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    6588:	4b35      	ldr	r3, [pc, #212]	; (6660 <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    658a:	4a36      	ldr	r2, [pc, #216]	; (6664 <pm_system_suspend+0xe0>)
    658c:	7d1c      	ldrb	r4, [r3, #20]
    658e:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6592:	0963      	lsrs	r3, r4, #5
    6594:	ea4f 0983 	mov.w	r9, r3, lsl #2
    6598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    659c:	4d32      	ldr	r5, [pc, #200]	; (6668 <pm_system_suspend+0xe4>)
    659e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    65a2:	f004 081f 	and.w	r8, r4, #31
    65a6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    65aa:	f013 0f01 	tst.w	r3, #1
{
    65ae:	b085      	sub	sp, #20
    65b0:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    65b2:	d10a      	bne.n	65ca <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    65b4:	4601      	mov	r1, r0
    65b6:	4620      	mov	r0, r4
    65b8:	f000 f876 	bl	66a8 <pm_policy_next_state>
		if (info != NULL) {
    65bc:	b128      	cbz	r0, 65ca <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    65be:	c807      	ldmia	r0, {r0, r1, r2}
    65c0:	230c      	movs	r3, #12
    65c2:	fb03 5304 	mla	r3, r3, r4, r5
    65c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    65ca:	230c      	movs	r3, #12
    65cc:	4363      	muls	r3, r4
    65ce:	18ea      	adds	r2, r5, r3
    65d0:	5cee      	ldrb	r6, [r5, r3]
    65d2:	b936      	cbnz	r6, 65e2 <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    65d4:	4620      	mov	r0, r4
    65d6:	f7ff ff79 	bl	64cc <atomic_clear_bit.constprop.0>
		ret = false;
    65da:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    65dc:	b005      	add	sp, #20
    65de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    65e2:	1c7b      	adds	r3, r7, #1
    65e4:	d00f      	beq.n	6606 <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    65e6:	f8d2 c008 	ldr.w	ip, [r2, #8]
    65ea:	4820      	ldr	r0, [pc, #128]	; (666c <pm_system_suspend+0xe8>)
    65ec:	4a20      	ldr	r2, [pc, #128]	; (6670 <pm_system_suspend+0xec>)
    65ee:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    65f2:	2100      	movs	r1, #0
    65f4:	2300      	movs	r3, #0
    65f6:	fbec 0106 	umlal	r0, r1, ip, r6
    65fa:	f7fa f9bf 	bl	97c <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    65fe:	2101      	movs	r1, #1
    6600:	1a38      	subs	r0, r7, r0
    6602:	f024 f84f 	bl	2a6a4 <z_set_timeout_expiry>
	k_sched_lock();
    6606:	f01c f995 	bl	22934 <k_sched_lock>
	pm_state_notify(true);
    660a:	2001      	movs	r0, #1
    660c:	f7ff ff30 	bl	6470 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6610:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    6614:	2301      	movs	r3, #1
    6616:	fa03 f808 	lsl.w	r8, r3, r8
    661a:	4b16      	ldr	r3, [pc, #88]	; (6674 <pm_system_suspend+0xf0>)
    661c:	4499      	add	r9, r3
    661e:	e859 3f00 	ldrex	r3, [r9]
    6622:	ea43 0308 	orr.w	r3, r3, r8
    6626:	e849 3200 	strex	r2, r3, [r9]
    662a:	2a00      	cmp	r2, #0
    662c:	d1f7      	bne.n	661e <pm_system_suspend+0x9a>
    662e:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    6632:	230c      	movs	r3, #12
    6634:	fb03 5504 	mla	r5, r3, r4, r5
    6638:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    663c:	ab01      	add	r3, sp, #4
    663e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    6642:	4a0d      	ldr	r2, [pc, #52]	; (6678 <pm_system_suspend+0xf4>)
    6644:	b11a      	cbz	r2, 664e <pm_system_suspend+0xca>
		pm_power_state_set(info);
    6646:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    664a:	f020 fb22 	bl	26c92 <pm_power_state_set>
	pm_system_resume();
    664e:	f7ff ff55 	bl	64fc <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    6652:	4620      	mov	r0, r4
    6654:	f7ff ff3a 	bl	64cc <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    6658:	f01c fb3a 	bl	22cd0 <k_sched_unlock>
	bool ret = true;
    665c:	2001      	movs	r0, #1
    665e:	e7bd      	b.n	65dc <pm_system_suspend+0x58>
    6660:	20003398 	.word	0x20003398
    6664:	20001eb8 	.word	0x20001eb8
    6668:	20001eac 	.word	0x20001eac
    666c:	000f423f 	.word	0x000f423f
    6670:	000f4240 	.word	0x000f4240
    6674:	20001ebc 	.word	0x20001ebc
    6678:	00026c93 	.word	0x00026c93

0000667c <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    667c:	4b05      	ldr	r3, [pc, #20]	; (6694 <pm_constraint_get+0x18>)
    667e:	f3bf 8f5b 	dmb	ish
    6682:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    6686:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    668a:	fab0 f080 	clz	r0, r0
    668e:	0940      	lsrs	r0, r0, #5
    6690:	4770      	bx	lr
    6692:	bf00      	nop
    6694:	20001ec0 	.word	0x20001ec0

00006698 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    6698:	b908      	cbnz	r0, 669e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    669a:	4b02      	ldr	r3, [pc, #8]	; (66a4 <pm_state_cpu_get_all+0xc>)
    669c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    669e:	2000      	movs	r0, #0
    66a0:	4770      	bx	lr
    66a2:	bf00      	nop
    66a4:	0002b9fc 	.word	0x0002b9fc

000066a8 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    66a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    66ac:	b085      	sub	sp, #20
    66ae:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    66b0:	a903      	add	r1, sp, #12
    66b2:	f7ff fff1 	bl	6698 <pm_state_cpu_get_all>
    66b6:	f8df a074 	ldr.w	sl, [pc, #116]	; 672c <pm_policy_next_state+0x84>
    66ba:	f8df 8074 	ldr.w	r8, [pc, #116]	; 6730 <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    66be:	1e44      	subs	r4, r0, #1
    66c0:	b224      	sxth	r4, r4
    66c2:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    66c6:	f04f 0900 	mov.w	r9, #0
    66ca:	1c63      	adds	r3, r4, #1
    66cc:	d104      	bne.n	66d8 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    66ce:	2500      	movs	r5, #0
}
    66d0:	4628      	mov	r0, r5
    66d2:	b005      	add	sp, #20
    66d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    66d8:	9a03      	ldr	r2, [sp, #12]
    66da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    66de:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    66e2:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    66e6:	f7ff ffc9 	bl	667c <pm_constraint_get>
    66ea:	b1e0      	cbz	r0, 6726 <pm_policy_next_state+0x7e>
    66ec:	6868      	ldr	r0, [r5, #4]
    66ee:	f04f 0b00 	mov.w	fp, #0
    66f2:	46d4      	mov	ip, sl
    66f4:	4659      	mov	r1, fp
    66f6:	fbe0 c107 	umlal	ip, r1, r0, r7
    66fa:	4642      	mov	r2, r8
    66fc:	464b      	mov	r3, r9
    66fe:	4660      	mov	r0, ip
    6700:	f7fa f93c 	bl	97c <__aeabi_uldivmod>
    6704:	9001      	str	r0, [sp, #4]
    6706:	68a8      	ldr	r0, [r5, #8]
    6708:	46d4      	mov	ip, sl
    670a:	4659      	mov	r1, fp
    670c:	fbe0 c107 	umlal	ip, r1, r0, r7
    6710:	4642      	mov	r2, r8
    6712:	464b      	mov	r3, r9
    6714:	4660      	mov	r0, ip
    6716:	f7fa f931 	bl	97c <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    671a:	1c72      	adds	r2, r6, #1
    671c:	d0d8      	beq.n	66d0 <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    671e:	9b01      	ldr	r3, [sp, #4]
    6720:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    6722:	42b0      	cmp	r0, r6
    6724:	d9d4      	bls.n	66d0 <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    6726:	3c01      	subs	r4, #1
    6728:	b224      	sxth	r4, r4
    672a:	e7ce      	b.n	66ca <pm_policy_next_state+0x22>
    672c:	000f423f 	.word	0x000f423f
    6730:	000f4240 	.word	0x000f4240

00006734 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    6734:	4b01      	ldr	r3, [pc, #4]	; (673c <uECC_get_rng+0x8>)
    6736:	6818      	ldr	r0, [r3, #0]
    6738:	4770      	bx	lr
    673a:	bf00      	nop
    673c:	200001b8 	.word	0x200001b8

00006740 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    6740:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6742:	2208      	movs	r2, #8
{
    6744:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    6746:	f01f fb06 	bl	25d56 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    674a:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    674c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    674e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    6750:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    6752:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    6754:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    6756:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6758:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    675a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    675c:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    675e:	4613      	mov	r3, r2
    6760:	466a      	mov	r2, sp
{
    6762:	460c      	mov	r4, r1
    6764:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    6766:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6768:	4611      	mov	r1, r2
    676a:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    676c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    6770:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6772:	f01f fa06 	bl	25b82 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    6776:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6778:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    677a:	4630      	mov	r0, r6
    677c:	f01f fa01 	bl	25b82 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    6780:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6782:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    6784:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6786:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    6788:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    678a:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    678c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    678e:	4405      	add	r5, r0
	tmp[7] = 0;
    6790:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    6794:	4610      	mov	r0, r2
    6796:	4611      	mov	r1, r2
    6798:	f01f f9f3 	bl	25b82 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    679c:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    679e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    67a0:	4630      	mov	r0, r6
    67a2:	f01f f9ee 	bl	25b82 <uECC_vli_add>
    67a6:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    67a8:	6a20      	ldr	r0, [r4, #32]
    67aa:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    67ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
    67ae:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    67b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    67b2:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    67b4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    67b6:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    67b8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    67ba:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    67bc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    67be:	e9cd 7704 	strd	r7, r7, [sp, #16]
    67c2:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    67c4:	f01f f9dd 	bl	25b82 <uECC_vli_add>
    67c8:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    67ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
    67cc:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    67ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    67d0:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    67d4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    67d6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    67d8:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    67da:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    67de:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    67e0:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    67e4:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    67e6:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    67ea:	6a20      	ldr	r0, [r4, #32]
    67ec:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    67ee:	4630      	mov	r0, r6
    67f0:	f01f f9c7 	bl	25b82 <uECC_vli_add>
    67f4:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    67f6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    67f8:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    67fa:	6b20      	ldr	r0, [r4, #48]	; 0x30
    67fc:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    67fe:	6b60      	ldr	r0, [r4, #52]	; 0x34
    6800:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    6802:	6a20      	ldr	r0, [r4, #32]
    6804:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    6806:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6808:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    680a:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    680c:	e9cd 7704 	strd	r7, r7, [sp, #16]
    6810:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6812:	f01f fad3 	bl	25dbc <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    6816:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6818:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    681a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    681c:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    681e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6820:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    6822:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6824:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    6826:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6828:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    682a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    682c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    682e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6830:	2308      	movs	r3, #8
    6832:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    6834:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6838:	f01f fac0 	bl	25dbc <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    683c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    683e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    6840:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6842:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    6844:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    6846:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    6848:	6a23      	ldr	r3, [r4, #32]
    684a:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    684c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    684e:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    6850:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    6852:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    6856:	6b23      	ldr	r3, [r4, #48]	; 0x30
    6858:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    685a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    685c:	2308      	movs	r3, #8
    685e:	4630      	mov	r0, r6
    6860:	f01f faac 	bl	25dbc <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    6864:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    6866:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    6868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    686a:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    686e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6870:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    6872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6874:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    6876:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    6878:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    687c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    687e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6880:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    6882:	2308      	movs	r3, #8
    6884:	4630      	mov	r0, r6
    6886:	f01f fa99 	bl	25dbc <uECC_vli_sub>

	if (carry < 0) {
    688a:	1a2d      	subs	r5, r5, r0
    688c:	d410      	bmi.n	68b0 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    688e:	4c0d      	ldr	r4, [pc, #52]	; (68c4 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    6890:	b935      	cbnz	r5, 68a0 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    6892:	2208      	movs	r2, #8
    6894:	4631      	mov	r1, r6
    6896:	4620      	mov	r0, r4
    6898:	f01f fa69 	bl	25d6e <uECC_vli_cmp_unsafe>
		while (carry || 
    689c:	2801      	cmp	r0, #1
    689e:	d00f      	beq.n	68c0 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    68a0:	2308      	movs	r3, #8
    68a2:	4622      	mov	r2, r4
    68a4:	4631      	mov	r1, r6
    68a6:	4630      	mov	r0, r6
    68a8:	f01f fa88 	bl	25dbc <uECC_vli_sub>
    68ac:	1a2d      	subs	r5, r5, r0
    68ae:	e7ef      	b.n	6890 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    68b0:	4a04      	ldr	r2, [pc, #16]	; (68c4 <vli_mmod_fast_secp256r1+0x184>)
    68b2:	2308      	movs	r3, #8
    68b4:	4631      	mov	r1, r6
    68b6:	4630      	mov	r0, r6
    68b8:	f01f f963 	bl	25b82 <uECC_vli_add>
		while (carry < 0);
    68bc:	182d      	adds	r5, r5, r0
    68be:	d4f8      	bmi.n	68b2 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    68c0:	b009      	add	sp, #36	; 0x24
    68c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    68c4:	0002ba00 	.word	0x0002ba00

000068c8 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    68c8:	4904      	ldr	r1, [pc, #16]	; (68dc <sub_bytes+0x14>)
    68ca:	1e43      	subs	r3, r0, #1
    68cc:	300f      	adds	r0, #15
    68ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    68d2:	5c8a      	ldrb	r2, [r1, r2]
    68d4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    68d6:	4283      	cmp	r3, r0
    68d8:	d1f9      	bne.n	68ce <sub_bytes+0x6>
	}
}
    68da:	4770      	bx	lr
    68dc:	0002d6c7 	.word	0x0002d6c7

000068e0 <tc_aes128_set_encrypt_key>:
{
    68e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    68e2:	4e26      	ldr	r6, [pc, #152]	; (697c <tc_aes128_set_encrypt_key+0x9c>)
{
    68e4:	4607      	mov	r7, r0
    68e6:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    68e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    68ea:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    68ec:	ad01      	add	r5, sp, #4
    68ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    68f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    68f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    68f4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    68f8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    68fc:	4638      	mov	r0, r7
    68fe:	2f00      	cmp	r7, #0
    6900:	d038      	beq.n	6974 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    6902:	2c00      	cmp	r4, #0
    6904:	d038      	beq.n	6978 <tc_aes128_set_encrypt_key+0x98>
    6906:	1f38      	subs	r0, r7, #4
    6908:	4621      	mov	r1, r4
    690a:	4602      	mov	r2, r0
    690c:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    690e:	784b      	ldrb	r3, [r1, #1]
    6910:	780d      	ldrb	r5, [r1, #0]
    6912:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6914:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    6918:	78cd      	ldrb	r5, [r1, #3]
    691a:	432b      	orrs	r3, r5
    691c:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    691e:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    6920:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    6924:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    6926:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    692a:	d1f0      	bne.n	690e <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    692c:	4c14      	ldr	r4, [pc, #80]	; (6980 <tc_aes128_set_encrypt_key+0xa0>)
    692e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    6930:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    6932:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    6934:	d116      	bne.n	6964 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    6936:	f3c3 4207 	ubfx	r2, r3, #16, #8
    693a:	5ca5      	ldrb	r5, [r4, r2]
    693c:	0e1a      	lsrs	r2, r3, #24
    693e:	5ca2      	ldrb	r2, [r4, r2]
    6940:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    6944:	f3c3 2507 	ubfx	r5, r3, #8, #8
    6948:	b2db      	uxtb	r3, r3
    694a:	5d65      	ldrb	r5, [r4, r5]
    694c:	5ce3      	ldrb	r3, [r4, r3]
    694e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    6952:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    6956:	ad0c      	add	r5, sp, #48	; 0x30
    6958:	f021 0303 	bic.w	r3, r1, #3
    695c:	442b      	add	r3, r5
    695e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    6962:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    6964:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    6968:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    696a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    696c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    696e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    6970:	d1de      	bne.n	6930 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    6972:	2001      	movs	r0, #1
}
    6974:	b00d      	add	sp, #52	; 0x34
    6976:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    6978:	4620      	mov	r0, r4
    697a:	e7fb      	b.n	6974 <tc_aes128_set_encrypt_key+0x94>
    697c:	0002b7c8 	.word	0x0002b7c8
    6980:	0002d6c7 	.word	0x0002d6c7

00006984 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    6984:	4901      	ldr	r1, [pc, #4]	; (698c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    6986:	2210      	movs	r2, #16
	str	r2, [r1]
    6988:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    698a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    698c:	e000ed10 	.word	0xe000ed10

00006990 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    6990:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    6992:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    6994:	f380 8811 	msr	BASEPRI, r0
	isb
    6998:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    699c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    69a0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    69a2:	b662      	cpsie	i
	isb
    69a4:	f3bf 8f6f 	isb	sy

	bx	lr
    69a8:	4770      	bx	lr
    69aa:	bf00      	nop

000069ac <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    69ac:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    69ae:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    69b0:	f381 8811 	msr	BASEPRI, r1

	wfe
    69b4:	bf20      	wfe

	msr	BASEPRI, r0
    69b6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    69ba:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    69bc:	4770      	bx	lr
    69be:	bf00      	nop

000069c0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    69c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    69c4:	b088      	sub	sp, #32
    69c6:	4681      	mov	r9, r0
    69c8:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    69ca:	460c      	mov	r4, r1
    69cc:	2900      	cmp	r1, #0
    69ce:	d04b      	beq.n	6a68 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    69d0:	46ea      	mov	sl, sp
    69d2:	b088      	sub	sp, #32
    69d4:	466d      	mov	r5, sp
    69d6:	e9d1 1200 	ldrd	r1, r2, [r1]
    69da:	68a3      	ldr	r3, [r4, #8]
    69dc:	4826      	ldr	r0, [pc, #152]	; (6a78 <z_arm_fatal_error+0xb8>)
    69de:	462e      	mov	r6, r5
    69e0:	f04f 0805 	mov.w	r8, #5
    69e4:	e9c5 0104 	strd	r0, r1, [r5, #16]
    69e8:	e9c5 2306 	strd	r2, r3, [r5, #24]
    69ec:	f8c7 8008 	str.w	r8, [r7, #8]
    69f0:	f846 8f0c 	str.w	r8, [r6, #12]!
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    69f4:	4821      	ldr	r0, [pc, #132]	; (6a7c <z_arm_fatal_error+0xbc>)
    69f6:	4632      	mov	r2, r6
    69f8:	2300      	movs	r3, #0
    69fa:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    69fe:	f01e ffda 	bl	259b6 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    6a02:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    6a06:	6963      	ldr	r3, [r4, #20]
    6a08:	481d      	ldr	r0, [pc, #116]	; (6a80 <z_arm_fatal_error+0xc0>)
    6a0a:	f8c7 8008 	str.w	r8, [r7, #8]
    6a0e:	46d5      	mov	sp, sl
    6a10:	e9c5 0104 	strd	r0, r1, [r5, #16]
    6a14:	e9c5 2306 	strd	r2, r3, [r5, #24]
    6a18:	46ad      	mov	sp, r5
    6a1a:	f8c5 800c 	str.w	r8, [r5, #12]
    6a1e:	4817      	ldr	r0, [pc, #92]	; (6a7c <z_arm_fatal_error+0xbc>)
    6a20:	4632      	mov	r2, r6
    6a22:	2300      	movs	r3, #0
    6a24:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    6a28:	f01e ffc5 	bl	259b6 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    6a2c:	4a15      	ldr	r2, [pc, #84]	; (6a84 <z_arm_fatal_error+0xc4>)
    6a2e:	69e3      	ldr	r3, [r4, #28]
    6a30:	2503      	movs	r5, #3
    6a32:	e9c7 2306 	strd	r2, r3, [r7, #24]
    6a36:	46d5      	mov	sp, sl
    6a38:	607d      	str	r5, [r7, #4]
    6a3a:	617d      	str	r5, [r7, #20]
    6a3c:	480f      	ldr	r0, [pc, #60]	; (6a7c <z_arm_fatal_error+0xbc>)
    6a3e:	f107 0214 	add.w	r2, r7, #20
    6a42:	2300      	movs	r3, #0
    6a44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6a48:	f01e ffb5 	bl	259b6 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    6a4c:	4a0e      	ldr	r2, [pc, #56]	; (6a88 <z_arm_fatal_error+0xc8>)
    6a4e:	69a3      	ldr	r3, [r4, #24]
    6a50:	607d      	str	r5, [r7, #4]
    6a52:	e9c7 2306 	strd	r2, r3, [r7, #24]
    6a56:	617d      	str	r5, [r7, #20]
    6a58:	4808      	ldr	r0, [pc, #32]	; (6a7c <z_arm_fatal_error+0xbc>)
    6a5a:	2300      	movs	r3, #0
    6a5c:	f107 0214 	add.w	r2, r7, #20
    6a60:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6a64:	f01e ffa7 	bl	259b6 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    6a68:	4621      	mov	r1, r4
    6a6a:	4648      	mov	r0, r9
    6a6c:	f01b f900 	bl	21c70 <z_fatal_error>
}
    6a70:	3720      	adds	r7, #32
    6a72:	46bd      	mov	sp, r7
    6a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a78:	0002d7c7 	.word	0x0002d7c7
    6a7c:	0002b71c 	.word	0x0002b71c
    6a80:	0002d7f6 	.word	0x0002d7f6
    6a84:	0002d825 	.word	0x0002d825
    6a88:	0002d834 	.word	0x0002d834

00006a8c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    6a8c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6a8e:	2b00      	cmp	r3, #0
    6a90:	db08      	blt.n	6aa4 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6a92:	2201      	movs	r2, #1
    6a94:	f000 001f 	and.w	r0, r0, #31
    6a98:	fa02 f000 	lsl.w	r0, r2, r0
    6a9c:	095b      	lsrs	r3, r3, #5
    6a9e:	4a02      	ldr	r2, [pc, #8]	; (6aa8 <arch_irq_enable+0x1c>)
    6aa0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    6aa4:	4770      	bx	lr
    6aa6:	bf00      	nop
    6aa8:	e000e100 	.word	0xe000e100

00006aac <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    6aac:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    6aae:	2b00      	cmp	r3, #0
    6ab0:	db0d      	blt.n	6ace <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6ab2:	2201      	movs	r2, #1
    6ab4:	095b      	lsrs	r3, r3, #5
    6ab6:	f000 001f 	and.w	r0, r0, #31
    6aba:	fa02 f000 	lsl.w	r0, r2, r0
    6abe:	3320      	adds	r3, #32
    6ac0:	4a03      	ldr	r2, [pc, #12]	; (6ad0 <arch_irq_disable+0x24>)
    6ac2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    6ac6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6aca:	f3bf 8f6f 	isb	sy
}
    6ace:	4770      	bx	lr
    6ad0:	e000e100 	.word	0xe000e100

00006ad4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    6ad4:	4b05      	ldr	r3, [pc, #20]	; (6aec <arch_irq_is_enabled+0x18>)
    6ad6:	0942      	lsrs	r2, r0, #5
    6ad8:	f000 001f 	and.w	r0, r0, #31
    6adc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    6ae0:	2301      	movs	r3, #1
    6ae2:	fa03 f000 	lsl.w	r0, r3, r0
}
    6ae6:	4010      	ands	r0, r2
    6ae8:	4770      	bx	lr
    6aea:	bf00      	nop
    6aec:	e000e100 	.word	0xe000e100

00006af0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    6af0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    6af2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6af4:	bfa8      	it	ge
    6af6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    6afa:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6afe:	bfb8      	it	lt
    6b00:	4b06      	ldrlt	r3, [pc, #24]	; (6b1c <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b02:	ea4f 1141 	mov.w	r1, r1, lsl #5
    6b06:	bfac      	ite	ge
    6b08:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b0c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b10:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b12:	bfb4      	ite	lt
    6b14:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    6b16:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    6b1a:	4770      	bx	lr
    6b1c:	e000ed14 	.word	0xe000ed14

00006b20 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    6b20:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    6b22:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    6b24:	4b04      	ldr	r3, [pc, #16]	; (6b38 <_arch_isr_direct_pm+0x18>)
    6b26:	699a      	ldr	r2, [r3, #24]
    6b28:	b11a      	cbz	r2, 6b32 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    6b2a:	2200      	movs	r2, #0
    6b2c:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    6b2e:	f023 fa8d 	bl	2a04c <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    6b32:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    6b34:	bd08      	pop	{r3, pc}
    6b36:	bf00      	nop
    6b38:	20003398 	.word	0x20003398

00006b3c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    6b3c:	bf30      	wfi
    b z_SysNmiOnReset
    6b3e:	f7ff bffd 	b.w	6b3c <z_SysNmiOnReset>
    6b42:	bf00      	nop

00006b44 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6b44:	4a0f      	ldr	r2, [pc, #60]	; (6b84 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    6b46:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    6b48:	4b0f      	ldr	r3, [pc, #60]	; (6b88 <z_arm_prep_c+0x44>)
    6b4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    6b4e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    6b50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6b54:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    6b58:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    6b5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    6b60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    6b64:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    6b68:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    6b6c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    6b70:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    6b74:	f01b f924 	bl	21dc0 <z_bss_zero>
	z_data_copy();
    6b78:	f01c f9ee 	bl	22f58 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    6b7c:	f000 fb76 	bl	726c <z_arm_interrupt_init>
	z_cstart();
    6b80:	f01b f928 	bl	21dd4 <z_cstart>
    6b84:	00000000 	.word	0x00000000
    6b88:	e000ed00 	.word	0xe000ed00

00006b8c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    6b8c:	4a09      	ldr	r2, [pc, #36]	; (6bb4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    6b8e:	490a      	ldr	r1, [pc, #40]	; (6bb8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    6b90:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    6b92:	6809      	ldr	r1, [r1, #0]
    6b94:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6b96:	4909      	ldr	r1, [pc, #36]	; (6bbc <arch_swap+0x30>)
	_current->arch.basepri = key;
    6b98:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6b9a:	684b      	ldr	r3, [r1, #4]
    6b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    6ba0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    6ba2:	2300      	movs	r3, #0
    6ba4:	f383 8811 	msr	BASEPRI, r3
    6ba8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    6bac:	6893      	ldr	r3, [r2, #8]
}
    6bae:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    6bb0:	4770      	bx	lr
    6bb2:	bf00      	nop
    6bb4:	20003398 	.word	0x20003398
    6bb8:	0002d2b8 	.word	0x0002d2b8
    6bbc:	e000ed00 	.word	0xe000ed00

00006bc0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    6bc0:	490f      	ldr	r1, [pc, #60]	; (6c00 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    6bc2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    6bc4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    6bc8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    6bca:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    6bce:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6bd2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    6bd4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    6bd8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    6bdc:	4f09      	ldr	r7, [pc, #36]	; (6c04 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    6bde:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    6be2:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    6be4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    6be6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    6be8:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    6bea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    6bec:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    6bee:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    6bf2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    6bf6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    6bfa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    6bfe:	4770      	bx	lr
    ldr r1, =_kernel
    6c00:	20003398 	.word	0x20003398
    ldr v4, =_SCS_ICSR
    6c04:	e000ed04 	.word	0xe000ed04

00006c08 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    6c08:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    6c0c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    6c0e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    6c12:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    6c16:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    6c18:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    6c1c:	2902      	cmp	r1, #2
    beq _oops
    6c1e:	d0ff      	beq.n	6c20 <_oops>

00006c20 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    6c20:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    6c22:	f01f fff0 	bl	26c06 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    6c26:	bd01      	pop	{r0, pc}

00006c28 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    6c28:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    6c2c:	9b00      	ldr	r3, [sp, #0]
    6c2e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    6c32:	490a      	ldr	r1, [pc, #40]	; (6c5c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    6c34:	9b01      	ldr	r3, [sp, #4]
    6c36:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    6c3a:	9b02      	ldr	r3, [sp, #8]
    6c3c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    6c40:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    6c44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    6c48:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    6c4c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    6c50:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    6c52:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    6c54:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    6c56:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    6c58:	4770      	bx	lr
    6c5a:	bf00      	nop
    6c5c:	000250db 	.word	0x000250db

00006c60 <arch_switch_to_main_thread>:
void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    6c60:	4b07      	ldr	r3, [pc, #28]	; (6c80 <arch_switch_to_main_thread+0x20>)
    6c62:	6098      	str	r0, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    6c64:	4610      	mov	r0, r2
    6c66:	f381 8809 	msr	PSP, r1
    6c6a:	2100      	movs	r1, #0
    6c6c:	b663      	cpsie	if
    6c6e:	f381 8811 	msr	BASEPRI, r1
    6c72:	f3bf 8f6f 	isb	sy
    6c76:	2200      	movs	r2, #0
    6c78:	2300      	movs	r3, #0
    6c7a:	f01e fa2e 	bl	250da <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    6c7e:	bf00      	nop
    6c80:	20003398 	.word	0x20003398

00006c84 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    6c84:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    6c86:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    6c88:	4a0b      	ldr	r2, [pc, #44]	; (6cb8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    6c8a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    6c8c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    6c8e:	bf1e      	ittt	ne
	movne	r1, #0
    6c90:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    6c92:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    6c94:	f023 f9da 	blne	2a04c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    6c98:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    6c9a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    6c9e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    6ca2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    6ca6:	4905      	ldr	r1, [pc, #20]	; (6cbc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    6ca8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    6caa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    6cac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    6cae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    6cb2:	4903      	ldr	r1, [pc, #12]	; (6cc0 <_isr_wrapper+0x3c>)
	bx r1
    6cb4:	4708      	bx	r1
    6cb6:	0000      	.short	0x0000
	ldr r2, =_kernel
    6cb8:	20003398 	.word	0x20003398
	ldr r1, =_sw_isr_table
    6cbc:	0002b400 	.word	0x0002b400
	ldr r1, =z_arm_int_exit
    6cc0:	00006cc5 	.word	0x00006cc5

00006cc4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    6cc4:	4b04      	ldr	r3, [pc, #16]	; (6cd8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    6cc6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    6cc8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    6cca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    6ccc:	d003      	beq.n	6cd6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    6cce:	4903      	ldr	r1, [pc, #12]	; (6cdc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    6cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    6cd4:	600a      	str	r2, [r1, #0]

00006cd6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    6cd6:	4770      	bx	lr
	ldr r3, =_kernel
    6cd8:	20003398 	.word	0x20003398
	ldr r1, =_SCS_ICSR
    6cdc:	e000ed04 	.word	0xe000ed04

00006ce0 <mem_manage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6ce0:	b570      	push	{r4, r5, r6, lr}
    6ce2:	b088      	sub	sp, #32
			      bool *recoverable)
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
    6ce4:	4b3c      	ldr	r3, [pc, #240]	; (6dd8 <mem_manage_fault.constprop.0+0xf8>)
    6ce6:	9306      	str	r3, [sp, #24]
    6ce8:	2402      	movs	r4, #2
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    6cea:	4606      	mov	r6, r0
    6cec:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    6cee:	483b      	ldr	r0, [pc, #236]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6cf0:	9401      	str	r4, [sp, #4]
    6cf2:	aa05      	add	r2, sp, #20
    6cf4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cf8:	9405      	str	r4, [sp, #20]
    6cfa:	f01f ff93 	bl	26c24 <z_log_msg2_static_create.constprop.0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    6cfe:	4b38      	ldr	r3, [pc, #224]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d02:	06db      	lsls	r3, r3, #27
    6d04:	d509      	bpl.n	6d1a <mem_manage_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error (context area might be"
    6d06:	4b37      	ldr	r3, [pc, #220]	; (6de4 <mem_manage_fault.constprop.0+0x104>)
    6d08:	4834      	ldr	r0, [pc, #208]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6d0a:	9306      	str	r3, [sp, #24]
    6d0c:	aa05      	add	r2, sp, #20
    6d0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d12:	9401      	str	r4, [sp, #4]
    6d14:	9405      	str	r4, [sp, #20]
    6d16:	f01f ff85 	bl	26c24 <z_log_msg2_static_create.constprop.0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    6d1a:	4b31      	ldr	r3, [pc, #196]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d1e:	0718      	lsls	r0, r3, #28
    6d20:	d50a      	bpl.n	6d38 <mem_manage_fault.constprop.0+0x58>
		PR_FAULT_INFO("  Unstacking error");
    6d22:	4b31      	ldr	r3, [pc, #196]	; (6de8 <mem_manage_fault.constprop.0+0x108>)
    6d24:	9306      	str	r3, [sp, #24]
    6d26:	482d      	ldr	r0, [pc, #180]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6d28:	2302      	movs	r3, #2
    6d2a:	aa05      	add	r2, sp, #20
    6d2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d30:	9301      	str	r3, [sp, #4]
    6d32:	9305      	str	r3, [sp, #20]
    6d34:	f01f ff76 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    6d38:	4c29      	ldr	r4, [pc, #164]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6d3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6d3c:	0799      	lsls	r1, r3, #30
    6d3e:	d51f      	bpl.n	6d80 <mem_manage_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Data Access Violation");
    6d40:	4b2a      	ldr	r3, [pc, #168]	; (6dec <mem_manage_fault.constprop.0+0x10c>)
    6d42:	9306      	str	r3, [sp, #24]
    6d44:	aa05      	add	r2, sp, #20
    6d46:	2302      	movs	r3, #2
    6d48:	4824      	ldr	r0, [pc, #144]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6d4a:	9301      	str	r3, [sp, #4]
    6d4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d50:	9305      	str	r3, [sp, #20]
    6d52:	f01f ff67 	bl	26c24 <z_log_msg2_static_create.constprop.0>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    6d56:	6b63      	ldr	r3, [r4, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    6d58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6d5a:	0612      	lsls	r2, r2, #24
    6d5c:	d510      	bpl.n	6d80 <mem_manage_fault.constprop.0+0xa0>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    6d5e:	4a24      	ldr	r2, [pc, #144]	; (6df0 <mem_manage_fault.constprop.0+0x110>)
    6d60:	481e      	ldr	r0, [pc, #120]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6d62:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6d66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6d6a:	2303      	movs	r3, #3
    6d6c:	aa05      	add	r2, sp, #20
    6d6e:	9301      	str	r3, [sp, #4]
    6d70:	9305      	str	r3, [sp, #20]
    6d72:	f01f ff57 	bl	26c24 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    6d76:	b11e      	cbz	r6, 6d80 <mem_manage_fault.constprop.0+0xa0>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    6d78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    6d7e:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    6d80:	4b17      	ldr	r3, [pc, #92]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6d84:	07d8      	lsls	r0, r3, #31
    6d86:	d50a      	bpl.n	6d9e <mem_manage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Instruction Access Violation");
    6d88:	4b1a      	ldr	r3, [pc, #104]	; (6df4 <mem_manage_fault.constprop.0+0x114>)
    6d8a:	9306      	str	r3, [sp, #24]
    6d8c:	4813      	ldr	r0, [pc, #76]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6d8e:	2302      	movs	r3, #2
    6d90:	aa05      	add	r2, sp, #20
    6d92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6d96:	9301      	str	r3, [sp, #4]
    6d98:	9305      	str	r3, [sp, #20]
    6d9a:	f01f ff43 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    6d9e:	4b10      	ldr	r3, [pc, #64]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6da2:	0699      	lsls	r1, r3, #26
    6da4:	d50a      	bpl.n	6dbc <mem_manage_fault.constprop.0+0xdc>
		PR_FAULT_INFO(
    6da6:	4b14      	ldr	r3, [pc, #80]	; (6df8 <mem_manage_fault.constprop.0+0x118>)
    6da8:	9306      	str	r3, [sp, #24]
    6daa:	480c      	ldr	r0, [pc, #48]	; (6ddc <mem_manage_fault.constprop.0+0xfc>)
    6dac:	2302      	movs	r3, #2
    6dae:	aa05      	add	r2, sp, #20
    6db0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6db4:	9301      	str	r3, [sp, #4]
    6db6:	9305      	str	r3, [sp, #20]
    6db8:	f01f ff34 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    6dbc:	4b08      	ldr	r3, [pc, #32]	; (6de0 <mem_manage_fault.constprop.0+0x100>)
    6dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6dc0:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    6dc2:	bf58      	it	pl
    6dc4:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6dc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    6dc8:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    6dca:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    6dce:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6dd0:	7028      	strb	r0, [r5, #0]

	return reason;
}
    6dd2:	b008      	add	sp, #32
    6dd4:	bd70      	pop	{r4, r5, r6, pc}
    6dd6:	bf00      	nop
    6dd8:	0002d862 	.word	0x0002d862
    6ddc:	0002b71c 	.word	0x0002b71c
    6de0:	e000ed00 	.word	0xe000ed00
    6de4:	0002d878 	.word	0x0002d878
    6de8:	0002d8ab 	.word	0x0002d8ab
    6dec:	0002d8be 	.word	0x0002d8be
    6df0:	0002d8d6 	.word	0x0002d8d6
    6df4:	0002d8ec 	.word	0x0002d8ec
    6df8:	0002d90b 	.word	0x0002d90b

00006dfc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6dfc:	b570      	push	{r4, r5, r6, lr}
    6dfe:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    6e00:	4b3c      	ldr	r3, [pc, #240]	; (6ef4 <bus_fault.constprop.0+0xf8>)
    6e02:	9306      	str	r3, [sp, #24]
    6e04:	2402      	movs	r4, #2
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6e06:	4606      	mov	r6, r0
    6e08:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6e0a:	483b      	ldr	r0, [pc, #236]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6e0c:	9401      	str	r4, [sp, #4]
    6e0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e12:	aa05      	add	r2, sp, #20
    6e14:	9405      	str	r4, [sp, #20]
    6e16:	f01f ff05 	bl	26c24 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6e1a:	4b38      	ldr	r3, [pc, #224]	; (6efc <bus_fault.constprop.0+0x100>)
    6e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e1e:	04d9      	lsls	r1, r3, #19
    6e20:	d509      	bpl.n	6e36 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    6e22:	4b37      	ldr	r3, [pc, #220]	; (6f00 <bus_fault.constprop.0+0x104>)
    6e24:	4834      	ldr	r0, [pc, #208]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6e26:	9306      	str	r3, [sp, #24]
    6e28:	aa05      	add	r2, sp, #20
    6e2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e2e:	9401      	str	r4, [sp, #4]
    6e30:	9405      	str	r4, [sp, #20]
    6e32:	f01f fef7 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6e36:	4b31      	ldr	r3, [pc, #196]	; (6efc <bus_fault.constprop.0+0x100>)
    6e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e3a:	051a      	lsls	r2, r3, #20
    6e3c:	d50a      	bpl.n	6e54 <bus_fault.constprop.0+0x58>
		PR_FAULT_INFO("  Unstacking error");
    6e3e:	4b31      	ldr	r3, [pc, #196]	; (6f04 <bus_fault.constprop.0+0x108>)
    6e40:	9306      	str	r3, [sp, #24]
    6e42:	482d      	ldr	r0, [pc, #180]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6e44:	2302      	movs	r3, #2
    6e46:	aa05      	add	r2, sp, #20
    6e48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e4c:	9301      	str	r3, [sp, #4]
    6e4e:	9305      	str	r3, [sp, #20]
    6e50:	f01f fee8 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6e54:	4c29      	ldr	r4, [pc, #164]	; (6efc <bus_fault.constprop.0+0x100>)
    6e56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e58:	059b      	lsls	r3, r3, #22
    6e5a:	d51f      	bpl.n	6e9c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Precise data bus error");
    6e5c:	4b2a      	ldr	r3, [pc, #168]	; (6f08 <bus_fault.constprop.0+0x10c>)
    6e5e:	4826      	ldr	r0, [pc, #152]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6e60:	9306      	str	r3, [sp, #24]
    6e62:	aa05      	add	r2, sp, #20
    6e64:	2302      	movs	r3, #2
    6e66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6e6a:	9301      	str	r3, [sp, #4]
    6e6c:	9305      	str	r3, [sp, #20]
    6e6e:	f01f fed9 	bl	26c24 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    6e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    6e74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    6e76:	0410      	lsls	r0, r2, #16
    6e78:	d510      	bpl.n	6e9c <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6e7a:	4a24      	ldr	r2, [pc, #144]	; (6f0c <bus_fault.constprop.0+0x110>)
    6e7c:	481e      	ldr	r0, [pc, #120]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6e7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6e82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6e86:	2303      	movs	r3, #3
    6e88:	aa05      	add	r2, sp, #20
    6e8a:	9301      	str	r3, [sp, #4]
    6e8c:	9305      	str	r3, [sp, #20]
    6e8e:	f01f fec9 	bl	26c24 <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    6e92:	b11e      	cbz	r6, 6e9c <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    6e94:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6e9a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6e9c:	4b17      	ldr	r3, [pc, #92]	; (6efc <bus_fault.constprop.0+0x100>)
    6e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6ea0:	0559      	lsls	r1, r3, #21
    6ea2:	d50a      	bpl.n	6eba <bus_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Imprecise data bus error");
    6ea4:	4b1a      	ldr	r3, [pc, #104]	; (6f10 <bus_fault.constprop.0+0x114>)
    6ea6:	9306      	str	r3, [sp, #24]
    6ea8:	4813      	ldr	r0, [pc, #76]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6eaa:	2302      	movs	r3, #2
    6eac:	aa05      	add	r2, sp, #20
    6eae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6eb2:	9301      	str	r3, [sp, #4]
    6eb4:	9305      	str	r3, [sp, #20]
    6eb6:	f01f feb5 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    6eba:	4b10      	ldr	r3, [pc, #64]	; (6efc <bus_fault.constprop.0+0x100>)
    6ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    6ebe:	05d2      	lsls	r2, r2, #23
    6ec0:	d513      	bpl.n	6eea <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Instruction bus error");
    6ec2:	4b14      	ldr	r3, [pc, #80]	; (6f14 <bus_fault.constprop.0+0x118>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6ec4:	9306      	str	r3, [sp, #24]
    6ec6:	480c      	ldr	r0, [pc, #48]	; (6ef8 <bus_fault.constprop.0+0xfc>)
    6ec8:	2302      	movs	r3, #2
    6eca:	aa05      	add	r2, sp, #20
    6ecc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ed0:	9301      	str	r3, [sp, #4]
    6ed2:	9305      	str	r3, [sp, #20]
    6ed4:	f01f fea6 	bl	26c24 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6ed8:	4a08      	ldr	r2, [pc, #32]	; (6efc <bus_fault.constprop.0+0x100>)
    6eda:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    6edc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    6ede:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    6ee2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    6ee4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    6ee6:	b008      	add	sp, #32
    6ee8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    6eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6eec:	049b      	lsls	r3, r3, #18
    6eee:	d5f3      	bpl.n	6ed8 <bus_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    6ef0:	4b09      	ldr	r3, [pc, #36]	; (6f18 <bus_fault.constprop.0+0x11c>)
    6ef2:	e7e7      	b.n	6ec4 <bus_fault.constprop.0+0xc8>
    6ef4:	0002d93a 	.word	0x0002d93a
    6ef8:	0002b71c 	.word	0x0002b71c
    6efc:	e000ed00 	.word	0xe000ed00
    6f00:	0002d950 	.word	0x0002d950
    6f04:	0002d8ab 	.word	0x0002d8ab
    6f08:	0002d961 	.word	0x0002d961
    6f0c:	0002d97a 	.word	0x0002d97a
    6f10:	0002d98f 	.word	0x0002d98f
    6f14:	0002d9aa 	.word	0x0002d9aa
    6f18:	0002d90b 	.word	0x0002d90b

00006f1c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    6f1c:	b510      	push	{r4, lr}
    6f1e:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    6f20:	4b36      	ldr	r3, [pc, #216]	; (6ffc <usage_fault.constprop.0+0xe0>)
    6f22:	4837      	ldr	r0, [pc, #220]	; (7000 <usage_fault.constprop.0+0xe4>)
    6f24:	9306      	str	r3, [sp, #24]
    6f26:	2402      	movs	r4, #2
    6f28:	aa05      	add	r2, sp, #20
    6f2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f2e:	9401      	str	r4, [sp, #4]
    6f30:	9405      	str	r4, [sp, #20]
    6f32:	f01f fe77 	bl	26c24 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    6f36:	4b33      	ldr	r3, [pc, #204]	; (7004 <usage_fault.constprop.0+0xe8>)
    6f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f3a:	019b      	lsls	r3, r3, #6
    6f3c:	d509      	bpl.n	6f52 <usage_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Division by zero");
    6f3e:	4b32      	ldr	r3, [pc, #200]	; (7008 <usage_fault.constprop.0+0xec>)
    6f40:	482f      	ldr	r0, [pc, #188]	; (7000 <usage_fault.constprop.0+0xe4>)
    6f42:	9306      	str	r3, [sp, #24]
    6f44:	aa05      	add	r2, sp, #20
    6f46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f4a:	9401      	str	r4, [sp, #4]
    6f4c:	9405      	str	r4, [sp, #20]
    6f4e:	f01f fe69 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    6f52:	4b2c      	ldr	r3, [pc, #176]	; (7004 <usage_fault.constprop.0+0xe8>)
    6f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f56:	01dc      	lsls	r4, r3, #7
    6f58:	d50a      	bpl.n	6f70 <usage_fault.constprop.0+0x54>
		PR_FAULT_INFO("  Unaligned memory access");
    6f5a:	4b2c      	ldr	r3, [pc, #176]	; (700c <usage_fault.constprop.0+0xf0>)
    6f5c:	9306      	str	r3, [sp, #24]
    6f5e:	4828      	ldr	r0, [pc, #160]	; (7000 <usage_fault.constprop.0+0xe4>)
    6f60:	2302      	movs	r3, #2
    6f62:	aa05      	add	r2, sp, #20
    6f64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f68:	9301      	str	r3, [sp, #4]
    6f6a:	9305      	str	r3, [sp, #20]
    6f6c:	f01f fe5a 	bl	26c24 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    6f70:	4b24      	ldr	r3, [pc, #144]	; (7004 <usage_fault.constprop.0+0xe8>)
    6f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f74:	0318      	lsls	r0, r3, #12
    6f76:	d50a      	bpl.n	6f8e <usage_fault.constprop.0+0x72>
		PR_FAULT_INFO("  No coprocessor instructions");
    6f78:	4b25      	ldr	r3, [pc, #148]	; (7010 <usage_fault.constprop.0+0xf4>)
    6f7a:	9306      	str	r3, [sp, #24]
    6f7c:	4820      	ldr	r0, [pc, #128]	; (7000 <usage_fault.constprop.0+0xe4>)
    6f7e:	2302      	movs	r3, #2
    6f80:	aa05      	add	r2, sp, #20
    6f82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f86:	9301      	str	r3, [sp, #4]
    6f88:	9305      	str	r3, [sp, #20]
    6f8a:	f01f fe4b 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    6f8e:	4b1d      	ldr	r3, [pc, #116]	; (7004 <usage_fault.constprop.0+0xe8>)
    6f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f92:	0359      	lsls	r1, r3, #13
    6f94:	d50a      	bpl.n	6fac <usage_fault.constprop.0+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    6f96:	4b1f      	ldr	r3, [pc, #124]	; (7014 <usage_fault.constprop.0+0xf8>)
    6f98:	9306      	str	r3, [sp, #24]
    6f9a:	4819      	ldr	r0, [pc, #100]	; (7000 <usage_fault.constprop.0+0xe4>)
    6f9c:	2302      	movs	r3, #2
    6f9e:	aa05      	add	r2, sp, #20
    6fa0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fa4:	9301      	str	r3, [sp, #4]
    6fa6:	9305      	str	r3, [sp, #20]
    6fa8:	f01f fe3c 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    6fac:	4b15      	ldr	r3, [pc, #84]	; (7004 <usage_fault.constprop.0+0xe8>)
    6fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fb0:	039a      	lsls	r2, r3, #14
    6fb2:	d50a      	bpl.n	6fca <usage_fault.constprop.0+0xae>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    6fb4:	4b18      	ldr	r3, [pc, #96]	; (7018 <usage_fault.constprop.0+0xfc>)
    6fb6:	9306      	str	r3, [sp, #24]
    6fb8:	4811      	ldr	r0, [pc, #68]	; (7000 <usage_fault.constprop.0+0xe4>)
    6fba:	2302      	movs	r3, #2
    6fbc:	aa05      	add	r2, sp, #20
    6fbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fc2:	9301      	str	r3, [sp, #4]
    6fc4:	9305      	str	r3, [sp, #20]
    6fc6:	f01f fe2d 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    6fca:	4b0e      	ldr	r3, [pc, #56]	; (7004 <usage_fault.constprop.0+0xe8>)
    6fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fce:	03db      	lsls	r3, r3, #15
    6fd0:	d50a      	bpl.n	6fe8 <usage_fault.constprop.0+0xcc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    6fd2:	4b12      	ldr	r3, [pc, #72]	; (701c <usage_fault.constprop.0+0x100>)
    6fd4:	9306      	str	r3, [sp, #24]
    6fd6:	480a      	ldr	r0, [pc, #40]	; (7000 <usage_fault.constprop.0+0xe4>)
    6fd8:	2302      	movs	r3, #2
    6fda:	aa05      	add	r2, sp, #20
    6fdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fe0:	9301      	str	r3, [sp, #4]
    6fe2:	9305      	str	r3, [sp, #20]
    6fe4:	f01f fe1e 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6fe8:	4a06      	ldr	r2, [pc, #24]	; (7004 <usage_fault.constprop.0+0xe8>)
    6fea:	6a93      	ldr	r3, [r2, #40]	; 0x28
    6fec:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    6ff0:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    6ff4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    6ff6:	6293      	str	r3, [r2, #40]	; 0x28
}
    6ff8:	b008      	add	sp, #32
    6ffa:	bd10      	pop	{r4, pc}
    6ffc:	0002d9c2 	.word	0x0002d9c2
    7000:	0002b71c 	.word	0x0002b71c
    7004:	e000ed00 	.word	0xe000ed00
    7008:	0002d9da 	.word	0x0002d9da
    700c:	0002d9ed 	.word	0x0002d9ed
    7010:	0002da07 	.word	0x0002da07
    7014:	0002da25 	.word	0x0002da25
    7018:	0002da4a 	.word	0x0002da4a
    701c:	0002da64 	.word	0x0002da64

00007020 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    7020:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    7022:	ab0a      	add	r3, sp, #40	; 0x28
    7024:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    7026:	9302      	str	r3, [sp, #8]
    7028:	4b05      	ldr	r3, [pc, #20]	; (7040 <z_log_msg2_runtime_create.constprop.0+0x20>)
    702a:	9301      	str	r3, [sp, #4]
    702c:	2300      	movs	r3, #0
    702e:	9300      	str	r3, [sp, #0]
    7030:	2201      	movs	r2, #1
    7032:	4618      	mov	r0, r3
    7034:	f7ff f956 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
    7038:	b007      	add	sp, #28
    703a:	f85d fb04 	ldr.w	pc, [sp], #4
    703e:	bf00      	nop
    7040:	0002da8f 	.word	0x0002da8f

00007044 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7048:	4b73      	ldr	r3, [pc, #460]	; (7218 <z_arm_fault+0x1d4>)
    704a:	685f      	ldr	r7, [r3, #4]
{
    704c:	b08f      	sub	sp, #60	; 0x3c
    704e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7050:	f3c7 0408 	ubfx	r4, r7, #0, #9
    7054:	2600      	movs	r6, #0
    7056:	f386 8811 	msr	BASEPRI, r6
    705a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    705e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7062:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7066:	d10e      	bne.n	7086 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7068:	f002 030c 	and.w	r3, r2, #12
    706c:	2b08      	cmp	r3, #8
    706e:	d10c      	bne.n	708a <z_arm_fault+0x46>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7070:	4b6a      	ldr	r3, [pc, #424]	; (721c <z_arm_fault+0x1d8>)
    7072:	930a      	str	r3, [sp, #40]	; 0x28
    7074:	486a      	ldr	r0, [pc, #424]	; (7220 <z_arm_fault+0x1dc>)
    7076:	2302      	movs	r3, #2
    7078:	aa09      	add	r2, sp, #36	; 0x24
    707a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    707e:	9305      	str	r3, [sp, #20]
    7080:	9309      	str	r3, [sp, #36]	; 0x24
    7082:	f01f fdcf 	bl	26c24 <z_log_msg2_static_create.constprop.0>
		return NULL;
    7086:	4635      	mov	r5, r6
    7088:	e003      	b.n	7092 <z_arm_fault+0x4e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    708a:	0712      	lsls	r2, r2, #28
    708c:	d401      	bmi.n	7092 <z_arm_fault+0x4e>
			ptr_esf = (z_arch_esf_t *)msp;
    708e:	4605      	mov	r5, r0
			*nested_exc = true;
    7090:	2601      	movs	r6, #1
	*recoverable = false;
    7092:	2300      	movs	r3, #0
    7094:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    7098:	1ee3      	subs	r3, r4, #3
    709a:	2b09      	cmp	r3, #9
    709c:	f200 80a3 	bhi.w	71e6 <z_arm_fault+0x1a2>
    70a0:	e8df f003 	tbb	[pc, r3]
    70a4:	90979305 	.word	0x90979305
    70a8:	a1a1a1a1 	.word	0xa1a1a1a1
    70ac:	9ba1      	.short	0x9ba1
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    70ae:	f8df 8168 	ldr.w	r8, [pc, #360]	; 7218 <z_arm_fault+0x1d4>
	PR_FAULT_INFO("***** HARD FAULT *****");
    70b2:	4b5c      	ldr	r3, [pc, #368]	; (7224 <z_arm_fault+0x1e0>)
    70b4:	485a      	ldr	r0, [pc, #360]	; (7220 <z_arm_fault+0x1dc>)
    70b6:	930a      	str	r3, [sp, #40]	; 0x28
    70b8:	2702      	movs	r7, #2
    70ba:	aa09      	add	r2, sp, #36	; 0x24
    70bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    70c0:	9705      	str	r7, [sp, #20]
    70c2:	9709      	str	r7, [sp, #36]	; 0x24
    70c4:	f01f fdae 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    70c8:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    70cc:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    70d0:	403c      	ands	r4, r7
	*recoverable = false;
    70d2:	f88d 9013 	strb.w	r9, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    70d6:	d00b      	beq.n	70f0 <z_arm_fault+0xac>
		PR_EXC("  Bus fault on vector table read");
    70d8:	4b53      	ldr	r3, [pc, #332]	; (7228 <z_arm_fault+0x1e4>)
    70da:	930a      	str	r3, [sp, #40]	; 0x28
    70dc:	9705      	str	r7, [sp, #20]
    70de:	9709      	str	r7, [sp, #36]	; 0x24
	PR_FAULT_INFO(
    70e0:	484f      	ldr	r0, [pc, #316]	; (7220 <z_arm_fault+0x1dc>)
    70e2:	aa09      	add	r2, sp, #36	; 0x24
    70e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    70e8:	f01f fd9c 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    70ec:	2400      	movs	r4, #0
}
    70ee:	e00d      	b.n	710c <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    70f0:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    70f4:	2b00      	cmp	r3, #0
    70f6:	da29      	bge.n	714c <z_arm_fault+0x108>
		PR_EXC("  Debug event");
    70f8:	4b4c      	ldr	r3, [pc, #304]	; (722c <z_arm_fault+0x1e8>)
    70fa:	4849      	ldr	r0, [pc, #292]	; (7220 <z_arm_fault+0x1dc>)
    70fc:	930a      	str	r3, [sp, #40]	; 0x28
    70fe:	aa09      	add	r2, sp, #36	; 0x24
    7100:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7104:	9705      	str	r7, [sp, #20]
    7106:	9709      	str	r7, [sp, #36]	; 0x24
    7108:	f01f fd8c 	bl	26c24 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    710c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7110:	b9cb      	cbnz	r3, 7146 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7112:	aa06      	add	r2, sp, #24
    7114:	f105 0720 	add.w	r7, r5, #32
    7118:	6828      	ldr	r0, [r5, #0]
    711a:	6869      	ldr	r1, [r5, #4]
    711c:	4613      	mov	r3, r2
    711e:	c303      	stmia	r3!, {r0, r1}
    7120:	3508      	adds	r5, #8
    7122:	42bd      	cmp	r5, r7
    7124:	461a      	mov	r2, r3
    7126:	d1f7      	bne.n	7118 <z_arm_fault+0xd4>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7128:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    712a:	2e00      	cmp	r6, #0
    712c:	d06f      	beq.n	720e <z_arm_fault+0x1ca>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    712e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7132:	b922      	cbnz	r2, 713e <z_arm_fault+0xfa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7134:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7138:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    713c:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    713e:	a906      	add	r1, sp, #24
    7140:	4620      	mov	r0, r4
    7142:	f7ff fc3d 	bl	69c0 <z_arm_fatal_error>
}
    7146:	b00f      	add	sp, #60	; 0x3c
    7148:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    714c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7150:	005b      	lsls	r3, r3, #1
    7152:	d5db      	bpl.n	710c <z_arm_fault+0xc8>
		PR_EXC("  Fault escalation (see below)");
    7154:	4b36      	ldr	r3, [pc, #216]	; (7230 <z_arm_fault+0x1ec>)
    7156:	4832      	ldr	r0, [pc, #200]	; (7220 <z_arm_fault+0x1dc>)
    7158:	930a      	str	r3, [sp, #40]	; 0x28
    715a:	aa09      	add	r2, sp, #36	; 0x24
    715c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7160:	9705      	str	r7, [sp, #20]
    7162:	9709      	str	r7, [sp, #36]	; 0x24
    7164:	f01f fd5e 	bl	26c24 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    7168:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    716a:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    716e:	f64d 7302 	movw	r3, #57090	; 0xdf02
    7172:	429a      	cmp	r2, r3
    7174:	d009      	beq.n	718a <z_arm_fault+0x146>
		} else if (SCB_MMFSR != 0) {
    7176:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    717a:	b1ab      	cbz	r3, 71a8 <z_arm_fault+0x164>
			reason = mem_manage_fault(esf, 1, recoverable);
    717c:	f10d 0113 	add.w	r1, sp, #19
    7180:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7182:	f7ff fdad 	bl	6ce0 <mem_manage_fault.constprop.0>
    7186:	4604      	mov	r4, r0
		break;
    7188:	e7c0      	b.n	710c <z_arm_fault+0xc8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    718a:	682b      	ldr	r3, [r5, #0]
    718c:	4a29      	ldr	r2, [pc, #164]	; (7234 <z_arm_fault+0x1f0>)
    718e:	4824      	ldr	r0, [pc, #144]	; (7220 <z_arm_fault+0x1dc>)
    7190:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    7194:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7198:	2303      	movs	r3, #3
    719a:	aa09      	add	r2, sp, #36	; 0x24
    719c:	9305      	str	r3, [sp, #20]
    719e:	9309      	str	r3, [sp, #36]	; 0x24
    71a0:	f01f fd40 	bl	26c24 <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    71a4:	682c      	ldr	r4, [r5, #0]
    71a6:	e7b1      	b.n	710c <z_arm_fault+0xc8>
		} else if (SCB_BFSR != 0) {
    71a8:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    71ac:	b12b      	cbz	r3, 71ba <z_arm_fault+0x176>
			reason = bus_fault(esf, 1, recoverable);
    71ae:	f10d 0113 	add.w	r1, sp, #19
    71b2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    71b4:	f7ff fe22 	bl	6dfc <bus_fault.constprop.0>
    71b8:	e7e5      	b.n	7186 <z_arm_fault+0x142>
		} else if (SCB_UFSR != 0) {
    71ba:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    71be:	b29b      	uxth	r3, r3
    71c0:	2b00      	cmp	r3, #0
    71c2:	d0a3      	beq.n	710c <z_arm_fault+0xc8>
		reason = usage_fault(esf);
    71c4:	f7ff feaa 	bl	6f1c <usage_fault.constprop.0>
    71c8:	e7dd      	b.n	7186 <z_arm_fault+0x142>
		reason = mem_manage_fault(esf, 0, recoverable);
    71ca:	f10d 0113 	add.w	r1, sp, #19
    71ce:	2000      	movs	r0, #0
    71d0:	e7d7      	b.n	7182 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    71d2:	f10d 0113 	add.w	r1, sp, #19
    71d6:	2000      	movs	r0, #0
    71d8:	e7ec      	b.n	71b4 <z_arm_fault+0x170>
	PR_FAULT_INFO(
    71da:	4b17      	ldr	r3, [pc, #92]	; (7238 <z_arm_fault+0x1f4>)
    71dc:	930a      	str	r3, [sp, #40]	; 0x28
    71de:	2302      	movs	r3, #2
    71e0:	9305      	str	r3, [sp, #20]
    71e2:	9309      	str	r3, [sp, #36]	; 0x24
    71e4:	e77c      	b.n	70e0 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    71e6:	4a15      	ldr	r2, [pc, #84]	; (723c <z_arm_fault+0x1f8>)
    71e8:	4b15      	ldr	r3, [pc, #84]	; (7240 <z_arm_fault+0x1fc>)
    71ea:	490d      	ldr	r1, [pc, #52]	; (7220 <z_arm_fault+0x1dc>)
    71ec:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    71f0:	bf18      	it	ne
    71f2:	4613      	movne	r3, r2
    71f4:	3c10      	subs	r4, #16
    71f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
    71fa:	2400      	movs	r4, #0
    71fc:	4b11      	ldr	r3, [pc, #68]	; (7244 <z_arm_fault+0x200>)
    71fe:	9301      	str	r3, [sp, #4]
    7200:	9400      	str	r4, [sp, #0]
    7202:	4623      	mov	r3, r4
    7204:	2201      	movs	r2, #1
    7206:	4620      	mov	r0, r4
    7208:	f7ff ff0a 	bl	7020 <z_log_msg2_runtime_create.constprop.0>
}
    720c:	e77e      	b.n	710c <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    720e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7212:	f023 0301 	bic.w	r3, r3, #1
    7216:	e791      	b.n	713c <z_arm_fault+0xf8>
    7218:	e000ed00 	.word	0xe000ed00
    721c:	0002dad0 	.word	0x0002dad0
    7220:	0002b71c 	.word	0x0002b71c
    7224:	0002dafb 	.word	0x0002dafb
    7228:	0002db12 	.word	0x0002db12
    722c:	0002db33 	.word	0x0002db33
    7230:	0002db41 	.word	0x0002db41
    7234:	0002db60 	.word	0x0002db60
    7238:	0002db7c 	.word	0x0002db7c
    723c:	0002dab7 	.word	0x0002dab7
    7240:	0002daa2 	.word	0x0002daa2
    7244:	0002da8f 	.word	0x0002da8f

00007248 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7248:	4a02      	ldr	r2, [pc, #8]	; (7254 <z_arm_fault_init+0xc>)
    724a:	6953      	ldr	r3, [r2, #20]
    724c:	f043 0310 	orr.w	r3, r3, #16
    7250:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7252:	4770      	bx	lr
    7254:	e000ed00 	.word	0xe000ed00

00007258 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7258:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    725c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7260:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7262:	4672      	mov	r2, lr
	bl z_arm_fault
    7264:	f7ff feee 	bl	7044 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7268:	bd01      	pop	{r0, pc}
    726a:	bf00      	nop

0000726c <z_arm_interrupt_init>:
    726c:	4804      	ldr	r0, [pc, #16]	; (7280 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    726e:	2300      	movs	r3, #0
    7270:	2120      	movs	r1, #32
    7272:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7274:	3301      	adds	r3, #1
    7276:	2b30      	cmp	r3, #48	; 0x30
    7278:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    727c:	d1f9      	bne.n	7272 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    727e:	4770      	bx	lr
    7280:	e000e100 	.word	0xe000e100

00007284 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    7284:	f024 f82a 	bl	2b2dc <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7288:	2020      	movs	r0, #32
    msr BASEPRI, r0
    728a:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    728e:	4808      	ldr	r0, [pc, #32]	; (72b0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7290:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    7294:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7296:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    729a:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    729e:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    72a0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    72a2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    72a6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    72aa:	f7ff fc4b 	bl	6b44 <z_arm_prep_c>
    72ae:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    72b0:	20005d58 	.word	0x20005d58

000072b4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    72b4:	4b06      	ldr	r3, [pc, #24]	; (72d0 <z_impl_k_thread_abort+0x1c>)
    72b6:	689b      	ldr	r3, [r3, #8]
    72b8:	4283      	cmp	r3, r0
    72ba:	d107      	bne.n	72cc <z_impl_k_thread_abort+0x18>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    72bc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    72c0:	b123      	cbz	r3, 72cc <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    72c2:	4a04      	ldr	r2, [pc, #16]	; (72d4 <z_impl_k_thread_abort+0x20>)
    72c4:	6853      	ldr	r3, [r2, #4]
    72c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    72ca:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    72cc:	f01b bde0 	b.w	22e90 <z_thread_abort>
    72d0:	20003398 	.word	0x20003398
    72d4:	e000ed00 	.word	0xe000ed00

000072d8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    72d8:	4b02      	ldr	r3, [pc, #8]	; (72e4 <z_arm_configure_static_mpu_regions+0xc>)
    72da:	4a03      	ldr	r2, [pc, #12]	; (72e8 <z_arm_configure_static_mpu_regions+0x10>)
    72dc:	4803      	ldr	r0, [pc, #12]	; (72ec <z_arm_configure_static_mpu_regions+0x14>)
    72de:	2101      	movs	r1, #1
    72e0:	f000 b878 	b.w	73d4 <arm_core_mpu_configure_static_mpu_regions>
    72e4:	20040000 	.word	0x20040000
    72e8:	20000000 	.word	0x20000000
    72ec:	0002baac 	.word	0x0002baac

000072f0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    72f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    72f2:	4f29      	ldr	r7, [pc, #164]	; (7398 <mpu_configure_regions+0xa8>)
    72f4:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    72f6:	2600      	movs	r6, #0
    72f8:	428e      	cmp	r6, r1
    72fa:	da17      	bge.n	732c <mpu_configure_regions+0x3c>
		if (regions[i].size == 0U) {
    72fc:	6844      	ldr	r4, [r0, #4]
    72fe:	2c00      	cmp	r4, #0
    7300:	d046      	beq.n	7390 <mpu_configure_regions+0xa0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7302:	b1e3      	cbz	r3, 733e <mpu_configure_regions+0x4e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7304:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7308:	ea14 0f0c 	tst.w	r4, ip
    730c:	d011      	beq.n	7332 <mpu_configure_regions+0x42>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    730e:	4b23      	ldr	r3, [pc, #140]	; (739c <mpu_configure_regions+0xac>)
    7310:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7314:	2303      	movs	r3, #3
    7316:	9301      	str	r3, [sp, #4]
    7318:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    731a:	4821      	ldr	r0, [pc, #132]	; (73a0 <mpu_configure_regions+0xb0>)
    731c:	aa05      	add	r2, sp, #20
    731e:	2300      	movs	r3, #0
    7320:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7324:	f01e fb47 	bl	259b6 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7328:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    732c:	4610      	mov	r0, r2
    732e:	b009      	add	sp, #36	; 0x24
    7330:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    7332:	2c1f      	cmp	r4, #31
    7334:	d9eb      	bls.n	730e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7336:	6805      	ldr	r5, [r0, #0]
		&&
    7338:	ea1c 0f05 	tst.w	ip, r5
    733c:	d1e7      	bne.n	730e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    733e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    7340:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7342:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7346:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    7348:	d910      	bls.n	736c <mpu_configure_regions+0x7c>
	if (size > (1UL << 31)) {
    734a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    734e:	d80f      	bhi.n	7370 <mpu_configure_regions+0x80>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7350:	3c01      	subs	r4, #1
    7352:	fab4 f484 	clz	r4, r4
    7356:	f1c4 041f 	rsb	r4, r4, #31
    735a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    735c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    735e:	ea4c 0404 	orr.w	r4, ip, r4
    7362:	d907      	bls.n	7374 <mpu_configure_regions+0x84>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7364:	4b0f      	ldr	r3, [pc, #60]	; (73a4 <mpu_configure_regions+0xb4>)
    7366:	e9cd 3206 	strd	r3, r2, [sp, #24]
    736a:	e7d3      	b.n	7314 <mpu_configure_regions+0x24>
		return REGION_32B;
    736c:	2408      	movs	r4, #8
    736e:	e7f5      	b.n	735c <mpu_configure_regions+0x6c>
		return REGION_4G;
    7370:	243e      	movs	r4, #62	; 0x3e
    7372:	e7f3      	b.n	735c <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7374:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    7378:	4315      	orrs	r5, r2
    737a:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    737e:	f044 0401 	orr.w	r4, r4, #1
    7382:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7386:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    738a:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    738c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    7390:	3601      	adds	r6, #1
    7392:	300c      	adds	r0, #12
    7394:	e7b0      	b.n	72f8 <mpu_configure_regions+0x8>
    7396:	bf00      	nop
    7398:	e000ed00 	.word	0xe000ed00
    739c:	0002dba4 	.word	0x0002dba4
    73a0:	0002b70c 	.word	0x0002b70c
    73a4:	0002dbc7 	.word	0x0002dbc7

000073a8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    73a8:	4b04      	ldr	r3, [pc, #16]	; (73bc <arm_core_mpu_enable+0x14>)
    73aa:	2205      	movs	r2, #5
    73ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    73b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    73b4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    73b8:	4770      	bx	lr
    73ba:	bf00      	nop
    73bc:	e000ed00 	.word	0xe000ed00

000073c0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    73c0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    73c4:	4b02      	ldr	r3, [pc, #8]	; (73d0 <arm_core_mpu_disable+0x10>)
    73c6:	2200      	movs	r2, #0
    73c8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    73cc:	4770      	bx	lr
    73ce:	bf00      	nop
    73d0:	e000ed00 	.word	0xe000ed00

000073d4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    73d4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    73d6:	4c03      	ldr	r4, [pc, #12]	; (73e4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    73d8:	2301      	movs	r3, #1
    73da:	7822      	ldrb	r2, [r4, #0]
    73dc:	f7ff ff88 	bl	72f0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    73e0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    73e2:	bd10      	pop	{r4, pc}
    73e4:	2000342d 	.word	0x2000342d

000073e8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    73e8:	4914      	ldr	r1, [pc, #80]	; (743c <z_arm_mpu_init+0x54>)
    73ea:	6808      	ldr	r0, [r1, #0]
    73ec:	2808      	cmp	r0, #8
{
    73ee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    73f0:	d821      	bhi.n	7436 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    73f2:	f7ff ffe5 	bl	73c0 <arm_core_mpu_disable>
    73f6:	4c12      	ldr	r4, [pc, #72]	; (7440 <z_arm_mpu_init+0x58>)
    73f8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    73fa:	2200      	movs	r2, #0
    73fc:	4290      	cmp	r0, r2
    73fe:	f101 010c 	add.w	r1, r1, #12
    7402:	d105      	bne.n	7410 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7404:	4b0f      	ldr	r3, [pc, #60]	; (7444 <z_arm_mpu_init+0x5c>)
    7406:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7408:	f7ff ffce 	bl	73a8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    740c:	2000      	movs	r0, #0
}
    740e:	bd10      	pop	{r4, pc}
    7410:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7414:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7418:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    741c:	4313      	orrs	r3, r2
    741e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7422:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7426:	f851 3c04 	ldr.w	r3, [r1, #-4]
    742a:	f043 0301 	orr.w	r3, r3, #1
    742e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7432:	3201      	adds	r2, #1
    7434:	e7e2      	b.n	73fc <z_arm_mpu_init+0x14>
		return -1;
    7436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    743a:	e7e8      	b.n	740e <z_arm_mpu_init+0x26>
    743c:	0002bab8 	.word	0x0002bab8
    7440:	e000ed00 	.word	0xe000ed00
    7444:	2000342d 	.word	0x2000342d

00007448 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7448:	4b01      	ldr	r3, [pc, #4]	; (7450 <__stdout_hook_install+0x8>)
    744a:	6018      	str	r0, [r3, #0]
}
    744c:	4770      	bx	lr
    744e:	bf00      	nop
    7450:	200001c0 	.word	0x200001c0

00007454 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    7454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    7456:	4f08      	ldr	r7, [pc, #32]	; (7478 <z_impl_zephyr_read_stdin+0x24>)
{
    7458:	4606      	mov	r6, r0
    745a:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    745c:	2400      	movs	r4, #0
    745e:	42ac      	cmp	r4, r5
    7460:	da08      	bge.n	7474 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    7462:	683b      	ldr	r3, [r7, #0]
    7464:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    7466:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    7468:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    746a:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    746e:	d001      	beq.n	7474 <z_impl_zephyr_read_stdin+0x20>
    7470:	280d      	cmp	r0, #13
    7472:	d1f4      	bne.n	745e <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    7474:	4620      	mov	r0, r4
    7476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7478:	200001bc 	.word	0x200001bc

0000747c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    747c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    747e:	4f0a      	ldr	r7, [pc, #40]	; (74a8 <z_impl_zephyr_write_stdout+0x2c>)
    7480:	460d      	mov	r5, r1
    7482:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    7484:	f1c0 0401 	rsb	r4, r0, #1
    7488:	19a3      	adds	r3, r4, r6
    748a:	429d      	cmp	r5, r3
    748c:	dc01      	bgt.n	7492 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    748e:	4628      	mov	r0, r5
    7490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    7492:	7873      	ldrb	r3, [r6, #1]
    7494:	2b0a      	cmp	r3, #10
    7496:	d102      	bne.n	749e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    7498:	683b      	ldr	r3, [r7, #0]
    749a:	200d      	movs	r0, #13
    749c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    749e:	683b      	ldr	r3, [r7, #0]
    74a0:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    74a4:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    74a6:	e7ef      	b.n	7488 <z_impl_zephyr_write_stdout+0xc>
    74a8:	200001c0 	.word	0x200001c0

000074ac <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    74ac:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    74ae:	4802      	ldr	r0, [pc, #8]	; (74b8 <_exit+0xc>)
    74b0:	2105      	movs	r1, #5
    74b2:	f7ff ffe3 	bl	747c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    74b6:	e7fe      	b.n	74b6 <_exit+0xa>
    74b8:	0002dbed 	.word	0x0002dbed

000074bc <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    74bc:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    74be:	4c07      	ldr	r4, [pc, #28]	; (74dc <_sbrk+0x20>)
    74c0:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    74c2:	18c2      	adds	r2, r0, r3
    74c4:	4806      	ldr	r0, [pc, #24]	; (74e0 <_sbrk+0x24>)
    74c6:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    74ca:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
    74ce:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    74d0:	bf3a      	itte	cc
    74d2:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    74d4:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    74d6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    74da:	bd10      	pop	{r4, pc}
    74dc:	20001edc 	.word	0x20001edc
    74e0:	20006f8e 	.word	0x20006f8e

000074e4 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    74e4:	b508      	push	{r3, lr}
    74e6:	211d      	movs	r1, #29
    74e8:	4804      	ldr	r0, [pc, #16]	; (74fc <__chk_fail+0x18>)
    74ea:	f7ff ffc7 	bl	747c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    74ee:	4040      	eors	r0, r0
    74f0:	f380 8811 	msr	BASEPRI, r0
    74f4:	f04f 0003 	mov.w	r0, #3
    74f8:	df02      	svc	2
	CODE_UNREACHABLE;
    74fa:	bf00      	nop
    74fc:	0002dbf3 	.word	0x0002dbf3

00007500 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    7500:	f04f 0320 	mov.w	r3, #32
    7504:	f3ef 8211 	mrs	r2, BASEPRI
    7508:	f383 8812 	msr	BASEPRI_MAX, r3
    750c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7510:	4906      	ldr	r1, [pc, #24]	; (752c <nordicsemi_nrf52_init+0x2c>)
    7512:	2301      	movs	r3, #1
    7514:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7518:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    751c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7520:	f382 8811 	msr	BASEPRI, r2
    7524:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7528:	2000      	movs	r0, #0
    752a:	4770      	bx	lr
    752c:	4001e000 	.word	0x4001e000

00007530 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7530:	b120      	cbz	r0, 753c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7532:	4b03      	ldr	r3, [pc, #12]	; (7540 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7534:	0180      	lsls	r0, r0, #6
    7536:	f043 0301 	orr.w	r3, r3, #1
    753a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    753c:	4770      	bx	lr
    753e:	bf00      	nop
    7540:	0002b850 	.word	0x0002b850

00007544 <board_particle_argon_init>:
			      ? GPIO_OUTPUT_INACTIVE
			      : GPIO_OUTPUT_ACTIVE));
}

static int board_particle_argon_init(const struct device *dev)
{
    7544:	b538      	push	{r3, r4, r5, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    7546:	480c      	ldr	r0, [pc, #48]	; (7578 <board_particle_argon_init+0x34>)
    7548:	f01a fb50 	bl	21bec <z_impl_device_get_binding>
	if (!ufl_gpio_dev) {
    754c:	4605      	mov	r5, r0
    754e:	b180      	cbz	r0, 7572 <board_particle_argon_init+0x2e>
    7550:	4809      	ldr	r0, [pc, #36]	; (7578 <board_particle_argon_init+0x34>)
    7552:	f01a fb4b 	bl	21bec <z_impl_device_get_binding>
	if (!pcb_gpio_dev) {
    7556:	4604      	mov	r4, r0
    7558:	b158      	cbz	r0, 7572 <board_particle_argon_init+0x2e>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
    755a:	f241 6201 	movw	r2, #5633	; 0x1601
    755e:	2119      	movs	r1, #25
    7560:	4628      	mov	r0, r5
    7562:	f01f fbb4 	bl	26cce <z_impl_gpio_pin_configure.isra.0>
    7566:	f641 2201 	movw	r2, #6657	; 0x1a01
    756a:	2102      	movs	r1, #2
    756c:	4620      	mov	r0, r4
    756e:	f01f fbae 	bl	26cce <z_impl_gpio_pin_configure.isra.0>
	 * antenna.
	 */
	external_antenna(false);

	return 0;
}
    7572:	2000      	movs	r0, #0
    7574:	bd38      	pop	{r3, r4, r5, pc}
    7576:	bf00      	nop
    7578:	0002dc24 	.word	0x0002dc24

0000757c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    757c:	4b0e      	ldr	r3, [pc, #56]	; (75b8 <bt_hex_real+0x3c>)
    757e:	2940      	cmp	r1, #64	; 0x40
{
    7580:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7582:	bf28      	it	cs
    7584:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7586:	4c0d      	ldr	r4, [pc, #52]	; (75bc <bt_hex_real+0x40>)
    7588:	1846      	adds	r6, r0, r1
    758a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    758c:	42b0      	cmp	r0, r6
    758e:	f103 0302 	add.w	r3, r3, #2
    7592:	d104      	bne.n	759e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7594:	2300      	movs	r3, #0
    7596:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    759a:	4807      	ldr	r0, [pc, #28]	; (75b8 <bt_hex_real+0x3c>)
    759c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    759e:	7802      	ldrb	r2, [r0, #0]
    75a0:	0912      	lsrs	r2, r2, #4
    75a2:	5ca2      	ldrb	r2, [r4, r2]
    75a4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    75a8:	f810 2b01 	ldrb.w	r2, [r0], #1
    75ac:	f002 020f 	and.w	r2, r2, #15
    75b0:	5ca2      	ldrb	r2, [r4, r2]
    75b2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    75b6:	e7e9      	b.n	758c <bt_hex_real+0x10>
    75b8:	2000344c 	.word	0x2000344c
    75bc:	0002dc2b 	.word	0x0002dc2b

000075c0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    75c0:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    75c2:	7803      	ldrb	r3, [r0, #0]
    75c4:	b08b      	sub	sp, #44	; 0x2c
    75c6:	4604      	mov	r4, r0
    75c8:	ad07      	add	r5, sp, #28
    75ca:	2b03      	cmp	r3, #3
    75cc:	d821      	bhi.n	7612 <bt_addr_le_str_real+0x52>
    75ce:	e8df f003 	tbb	[pc, r3]
    75d2:	1a02      	.short	0x1a02
    75d4:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    75d6:	4912      	ldr	r1, [pc, #72]	; (7620 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    75d8:	4628      	mov	r0, r5
    75da:	f023 fb8c 	bl	2acf6 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    75de:	7863      	ldrb	r3, [r4, #1]
    75e0:	9304      	str	r3, [sp, #16]
    75e2:	78a3      	ldrb	r3, [r4, #2]
    75e4:	9303      	str	r3, [sp, #12]
    75e6:	78e3      	ldrb	r3, [r4, #3]
    75e8:	9302      	str	r3, [sp, #8]
    75ea:	7923      	ldrb	r3, [r4, #4]
    75ec:	9301      	str	r3, [sp, #4]
    75ee:	7963      	ldrb	r3, [r4, #5]
    75f0:	9300      	str	r3, [sp, #0]
    75f2:	4a0c      	ldr	r2, [pc, #48]	; (7624 <bt_addr_le_str_real+0x64>)
    75f4:	79a3      	ldrb	r3, [r4, #6]
    75f6:	9505      	str	r5, [sp, #20]
    75f8:	211e      	movs	r1, #30
    75fa:	480b      	ldr	r0, [pc, #44]	; (7628 <bt_addr_le_str_real+0x68>)
    75fc:	f01d fc90 	bl	24f20 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    7600:	4809      	ldr	r0, [pc, #36]	; (7628 <bt_addr_le_str_real+0x68>)
    7602:	b00b      	add	sp, #44	; 0x2c
    7604:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    7606:	4909      	ldr	r1, [pc, #36]	; (762c <bt_addr_le_str_real+0x6c>)
    7608:	e7e6      	b.n	75d8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    760a:	4909      	ldr	r1, [pc, #36]	; (7630 <bt_addr_le_str_real+0x70>)
    760c:	e7e4      	b.n	75d8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    760e:	4909      	ldr	r1, [pc, #36]	; (7634 <bt_addr_le_str_real+0x74>)
    7610:	e7e2      	b.n	75d8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    7612:	4a09      	ldr	r2, [pc, #36]	; (7638 <bt_addr_le_str_real+0x78>)
    7614:	210a      	movs	r1, #10
    7616:	4628      	mov	r0, r5
    7618:	f01d fc82 	bl	24f20 <snprintk>
		break;
    761c:	e7df      	b.n	75de <bt_addr_le_str_real+0x1e>
    761e:	bf00      	nop
    7620:	0002d4df 	.word	0x0002d4df
    7624:	0002d501 	.word	0x0002d501
    7628:	2000342e 	.word	0x2000342e
    762c:	0002d4e6 	.word	0x0002d4e6
    7630:	0002d4ed 	.word	0x0002d4ed
    7634:	0002d4f7 	.word	0x0002d4f7
    7638:	0002f0d7 	.word	0x0002f0d7

0000763c <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    763c:	b570      	push	{r4, r5, r6, lr}
    763e:	4c21      	ldr	r4, [pc, #132]	; (76c4 <le_gen_dhkey+0x88>)
    7640:	f3bf 8f5b 	dmb	ish
    7644:	6823      	ldr	r3, [r4, #0]
    7646:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    764a:	07da      	lsls	r2, r3, #31
{
    764c:	4606      	mov	r6, r0
    764e:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    7650:	d501      	bpl.n	7656 <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    7652:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    7654:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    7656:	2901      	cmp	r1, #1
    7658:	d831      	bhi.n	76be <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    765a:	f3bf 8f5b 	dmb	ish
    765e:	e854 3f00 	ldrex	r3, [r4]
    7662:	f043 0202 	orr.w	r2, r3, #2
    7666:	e844 2100 	strex	r1, r2, [r4]
    766a:	2900      	cmp	r1, #0
    766c:	d1f7      	bne.n	765e <le_gen_dhkey+0x22>
    766e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    7672:	079b      	lsls	r3, r3, #30
    7674:	d4ed      	bmi.n	7652 <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    7676:	4814      	ldr	r0, [pc, #80]	; (76c8 <le_gen_dhkey+0x8c>)
    7678:	4631      	mov	r1, r6
    767a:	f01f fba9 	bl	26dd0 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    767e:	4813      	ldr	r0, [pc, #76]	; (76cc <le_gen_dhkey+0x90>)
    7680:	f106 0120 	add.w	r1, r6, #32
    7684:	f01f fba4 	bl	26dd0 <sys_memcpy_swap.constprop.0>
    7688:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    768c:	b175      	cbz	r5, 76ac <le_gen_dhkey+0x70>
    768e:	e854 3f00 	ldrex	r3, [r4]
    7692:	f043 0304 	orr.w	r3, r3, #4
    7696:	e844 3200 	strex	r2, r3, [r4]
    769a:	2a00      	cmp	r2, #0
    769c:	d1f7      	bne.n	768e <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    769e:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    76a2:	480b      	ldr	r0, [pc, #44]	; (76d0 <le_gen_dhkey+0x94>)
    76a4:	f01a fee0 	bl	22468 <z_impl_k_sem_give>
    76a8:	2000      	movs	r0, #0
    76aa:	e7d3      	b.n	7654 <le_gen_dhkey+0x18>
    76ac:	e854 3f00 	ldrex	r3, [r4]
    76b0:	f023 0304 	bic.w	r3, r3, #4
    76b4:	e844 3200 	strex	r2, r3, [r4]
    76b8:	2a00      	cmp	r2, #0
    76ba:	d0f0      	beq.n	769e <le_gen_dhkey+0x62>
    76bc:	e7f6      	b.n	76ac <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    76be:	2012      	movs	r0, #18
    76c0:	e7c8      	b.n	7654 <le_gen_dhkey+0x18>
    76c2:	bf00      	nop
    76c4:	20001ee0 	.word	0x20001ee0
    76c8:	200034ed 	.word	0x200034ed
    76cc:	2000350d 	.word	0x2000350d
    76d0:	20000be4 	.word	0x20000be4

000076d4 <ecc_thread>:
{
    76d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    76d8:	4e6d      	ldr	r6, [pc, #436]	; (7890 <ecc_thread+0x1bc>)
	return z_impl_k_sem_take(sem, timeout);
    76da:	4f6e      	ldr	r7, [pc, #440]	; (7894 <ecc_thread+0x1c0>)
    76dc:	b089      	sub	sp, #36	; 0x24
    76de:	4635      	mov	r5, r6
    76e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    76e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    76e8:	4638      	mov	r0, r7
    76ea:	f01a fee3 	bl	224b4 <z_impl_k_sem_take>
    76ee:	f3bf 8f5b 	dmb	ish
    76f2:	6834      	ldr	r4, [r6, #0]
    76f4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    76f8:	f014 0401 	ands.w	r4, r4, #1
    76fc:	d062      	beq.n	77c4 <ecc_thread+0xf0>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    76fe:	f8df 9198 	ldr.w	r9, [pc, #408]	; 7898 <ecc_thread+0x1c4>
    7702:	4c66      	ldr	r4, [pc, #408]	; (789c <ecc_thread+0x1c8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    7704:	f8df 8198 	ldr.w	r8, [pc, #408]	; 78a0 <ecc_thread+0x1cc>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    7708:	4866      	ldr	r0, [pc, #408]	; (78a4 <ecc_thread+0x1d0>)
    770a:	464a      	mov	r2, r9
    770c:	4621      	mov	r1, r4
    770e:	f01e f991 	bl	25a34 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    7712:	4603      	mov	r3, r0
    7714:	2800      	cmp	r0, #0
    7716:	d142      	bne.n	779e <ecc_thread+0xca>
			BT_ERR("Failed to create ECC public/private pair");
    7718:	4a63      	ldr	r2, [pc, #396]	; (78a8 <ecc_thread+0x1d4>)
    771a:	9206      	str	r2, [sp, #24]
    771c:	2202      	movs	r2, #2
    771e:	9201      	str	r2, [sp, #4]
    7720:	9205      	str	r2, [sp, #20]
    7722:	4862      	ldr	r0, [pc, #392]	; (78ac <ecc_thread+0x1d8>)
    7724:	aa05      	add	r2, sp, #20
    7726:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return BT_HCI_ERR_UNSPECIFIED;
    772a:	f04f 091f 	mov.w	r9, #31
    772e:	f01e f942 	bl	259b6 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    7732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    773a:	2001      	movs	r0, #1
    773c:	f000 f988 	bl	7a50 <bt_buf_get_rx>
    7740:	f100 0808 	add.w	r8, r0, #8
    7744:	2102      	movs	r1, #2
    7746:	4604      	mov	r4, r0
    7748:	4640      	mov	r0, r8
    774a:	f022 f8fe 	bl	2994a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    774e:	233e      	movs	r3, #62	; 0x3e
    7750:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7752:	2342      	movs	r3, #66	; 0x42
    7754:	7043      	strb	r3, [r0, #1]
    7756:	2101      	movs	r1, #1
    7758:	4640      	mov	r0, r8
    775a:	f022 f8f6 	bl	2994a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    775e:	2308      	movs	r3, #8
    7760:	7003      	strb	r3, [r0, #0]
    7762:	2141      	movs	r1, #65	; 0x41
    7764:	4640      	mov	r0, r8
    7766:	f022 f8f0 	bl	2994a <net_buf_simple_add>
    776a:	4680      	mov	r8, r0
	evt->status = status;
    776c:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    7770:	f1b9 0f00 	cmp.w	r9, #0
    7774:	d01d      	beq.n	77b2 <ecc_thread+0xde>
__ssp_bos_icheck3(memset, void *, int)
    7776:	2240      	movs	r2, #64	; 0x40
    7778:	2100      	movs	r1, #0
    777a:	f023 f98f 	bl	2aa9c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    777e:	f3bf 8f5b 	dmb	ish
    7782:	e855 3f00 	ldrex	r3, [r5]
    7786:	f023 0301 	bic.w	r3, r3, #1
    778a:	e845 3200 	strex	r2, r3, [r5]
    778e:	2a00      	cmp	r2, #0
    7790:	d1f7      	bne.n	7782 <ecc_thread+0xae>
    7792:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    7796:	4620      	mov	r0, r4
	bt_recv(buf);
    7798:	f001 fb28 	bl	8dec <bt_recv>
	while (true) {
    779c:	e7a0      	b.n	76e0 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    779e:	2220      	movs	r2, #32
    77a0:	4641      	mov	r1, r8
    77a2:	4620      	mov	r0, r4
    77a4:	f023 f949 	bl	2aa3a <memcmp>
    77a8:	2800      	cmp	r0, #0
    77aa:	d0ad      	beq.n	7708 <ecc_thread+0x34>
	return 0;
    77ac:	f04f 0900 	mov.w	r9, #0
    77b0:	e7bf      	b.n	7732 <ecc_thread+0x5e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    77b2:	493c      	ldr	r1, [pc, #240]	; (78a4 <ecc_thread+0x1d0>)
    77b4:	f01f fb0c 	bl	26dd0 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    77b8:	3120      	adds	r1, #32
    77ba:	f108 0021 	add.w	r0, r8, #33	; 0x21
    77be:	f01f fb07 	bl	26dd0 <sys_memcpy_swap.constprop.0>
    77c2:	e7dc      	b.n	777e <ecc_thread+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    77c4:	f3bf 8f5b 	dmb	ish
    77c8:	6833      	ldr	r3, [r6, #0]
    77ca:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    77ce:	079b      	lsls	r3, r3, #30
    77d0:	d586      	bpl.n	76e0 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    77d2:	4931      	ldr	r1, [pc, #196]	; (7898 <ecc_thread+0x1c4>)
    77d4:	4833      	ldr	r0, [pc, #204]	; (78a4 <ecc_thread+0x1d0>)
    77d6:	f01e ffe1 	bl	2679c <uECC_valid_public_key>
	if (ret < 0) {
    77da:	2800      	cmp	r0, #0
    77dc:	da3f      	bge.n	785e <ecc_thread+0x18a>
		BT_ERR("public key is not valid (ret %d)", ret);
    77de:	4b34      	ldr	r3, [pc, #208]	; (78b0 <ecc_thread+0x1dc>)
    77e0:	e9cd 3006 	strd	r3, r0, [sp, #24]
    77e4:	2303      	movs	r3, #3
    77e6:	9301      	str	r3, [sp, #4]
    77e8:	9305      	str	r3, [sp, #20]
    77ea:	4830      	ldr	r0, [pc, #192]	; (78ac <ecc_thread+0x1d8>)
    77ec:	4623      	mov	r3, r4
    77ee:	aa05      	add	r2, sp, #20
    77f0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    77f4:	f01e f8df 	bl	259b6 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    77f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    77fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7800:	2001      	movs	r0, #1
    7802:	f000 f925 	bl	7a50 <bt_buf_get_rx>
    7806:	f100 0908 	add.w	r9, r0, #8
    780a:	2102      	movs	r1, #2
    780c:	4680      	mov	r8, r0
    780e:	4648      	mov	r0, r9
    7810:	f022 f89b 	bl	2994a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    7814:	233e      	movs	r3, #62	; 0x3e
    7816:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    7818:	2322      	movs	r3, #34	; 0x22
    781a:	7043      	strb	r3, [r0, #1]
    781c:	2101      	movs	r1, #1
    781e:	4648      	mov	r0, r9
    7820:	f022 f893 	bl	2994a <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    7824:	2309      	movs	r3, #9
    7826:	7003      	strb	r3, [r0, #0]
    7828:	2121      	movs	r1, #33	; 0x21
    782a:	4648      	mov	r0, r9
    782c:	f022 f88d 	bl	2994a <net_buf_simple_add>
    7830:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    7832:	3001      	adds	r0, #1
    7834:	bb34      	cbnz	r4, 7884 <ecc_thread+0x1b0>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    7836:	221f      	movs	r2, #31
    7838:	701a      	strb	r2, [r3, #0]
    783a:	21ff      	movs	r1, #255	; 0xff
    783c:	2220      	movs	r2, #32
    783e:	f023 f92d 	bl	2aa9c <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7842:	f3bf 8f5b 	dmb	ish
    7846:	e855 3f00 	ldrex	r3, [r5]
    784a:	f023 0302 	bic.w	r3, r3, #2
    784e:	e845 3200 	strex	r2, r3, [r5]
    7852:	2a00      	cmp	r2, #0
    7854:	d1f7      	bne.n	7846 <ecc_thread+0x172>
    7856:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    785a:	4640      	mov	r0, r8
    785c:	e79c      	b.n	7798 <ecc_thread+0xc4>
		ret = uECC_shared_secret(ecc.public_key_be,
    785e:	490f      	ldr	r1, [pc, #60]	; (789c <ecc_thread+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7860:	f3bf 8f5b 	dmb	ish
    7864:	6833      	ldr	r3, [r6, #0]
    7866:	480e      	ldr	r0, [pc, #56]	; (78a0 <ecc_thread+0x1cc>)
    7868:	f3bf 8f5b 	dmb	ish
    786c:	f013 0f04 	tst.w	r3, #4
    7870:	f101 0220 	add.w	r2, r1, #32
    7874:	4b08      	ldr	r3, [pc, #32]	; (7898 <ecc_thread+0x1c4>)
    7876:	bf18      	it	ne
    7878:	4601      	movne	r1, r0
    787a:	4610      	mov	r0, r2
    787c:	f01e f927 	bl	25ace <uECC_shared_secret>
    7880:	4604      	mov	r4, r0
    7882:	e7b9      	b.n	77f8 <ecc_thread+0x124>
		evt->status = 0U;
    7884:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    7886:	4907      	ldr	r1, [pc, #28]	; (78a4 <ecc_thread+0x1d0>)
		evt->status = 0U;
    7888:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    788a:	f01f faa1 	bl	26dd0 <sys_memcpy_swap.constprop.0>
    788e:	e7d8      	b.n	7842 <ecc_thread+0x16e>
    7890:	20001ee0 	.word	0x20001ee0
    7894:	20000be4 	.word	0x20000be4
    7898:	0002bad8 	.word	0x0002bad8
    789c:	200034cd 	.word	0x200034cd
    78a0:	0002dc9f 	.word	0x0002dc9f
    78a4:	200034ed 	.word	0x200034ed
    78a8:	0002dc43 	.word	0x0002dc43
    78ac:	0002b6c4 	.word	0x0002b6c4
    78b0:	0002dc6c 	.word	0x0002dc6c

000078b4 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    78b4:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    78b6:	7d06      	ldrb	r6, [r0, #20]
    78b8:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    78ba:	b976      	cbnz	r6, 78da <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    78bc:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    78be:	881d      	ldrh	r5, [r3, #0]
    78c0:	f242 0226 	movw	r2, #8230	; 0x2026
    78c4:	4295      	cmp	r5, r2
    78c6:	d045      	beq.n	7954 <bt_hci_ecc_send+0xa0>
    78c8:	d80f      	bhi.n	78ea <bt_hci_ecc_send+0x36>
    78ca:	f242 0201 	movw	r2, #8193	; 0x2001
    78ce:	4295      	cmp	r5, r2
    78d0:	d04f      	beq.n	7972 <bt_hci_ecc_send+0xbe>
    78d2:	f242 0325 	movw	r3, #8229	; 0x2025
    78d6:	429d      	cmp	r5, r3
    78d8:	d013      	beq.n	7902 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    78da:	4b2a      	ldr	r3, [pc, #168]	; (7984 <bt_hci_ecc_send+0xd0>)
    78dc:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    78e0:	4620      	mov	r0, r4
    78e2:	691b      	ldr	r3, [r3, #16]
}
    78e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    78e8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    78ea:	f242 035e 	movw	r3, #8286	; 0x205e
    78ee:	429d      	cmp	r5, r3
    78f0:	d1f3      	bne.n	78da <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    78f2:	2103      	movs	r1, #3
    78f4:	3008      	adds	r0, #8
    78f6:	f022 f851 	bl	2999c <net_buf_simple_pull>
	cmd = (void *)buf->data;
    78fa:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    78fc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    7900:	e02e      	b.n	7960 <bt_hci_ecc_send+0xac>
    7902:	2103      	movs	r1, #3
    7904:	3008      	adds	r0, #8
    7906:	f022 f849 	bl	2999c <net_buf_simple_pull>
	net_buf_unref(buf);
    790a:	4620      	mov	r0, r4
    790c:	f018 fa2c 	bl	1fd68 <net_buf_unref>
    7910:	f3bf 8f5b 	dmb	ish
    7914:	4b1c      	ldr	r3, [pc, #112]	; (7988 <bt_hci_ecc_send+0xd4>)
    7916:	681a      	ldr	r2, [r3, #0]
    7918:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    791c:	0792      	lsls	r2, r2, #30
    791e:	d507      	bpl.n	7930 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    7920:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    7922:	4631      	mov	r1, r6
    7924:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    7928:	f01f fa2e 	bl	26d88 <send_cmd_status>
}
    792c:	2000      	movs	r0, #0
    792e:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7930:	f3bf 8f5b 	dmb	ish
    7934:	e853 2f00 	ldrex	r2, [r3]
    7938:	f042 0101 	orr.w	r1, r2, #1
    793c:	e843 1000 	strex	r0, r1, [r3]
    7940:	2800      	cmp	r0, #0
    7942:	d1f7      	bne.n	7934 <bt_hci_ecc_send+0x80>
    7944:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    7948:	07d3      	lsls	r3, r2, #31
    794a:	d4e9      	bmi.n	7920 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    794c:	480f      	ldr	r0, [pc, #60]	; (798c <bt_hci_ecc_send+0xd8>)
    794e:	f01a fd8b 	bl	22468 <z_impl_k_sem_give>
}
    7952:	e7e6      	b.n	7922 <bt_hci_ecc_send+0x6e>
    7954:	2103      	movs	r1, #3
    7956:	3008      	adds	r0, #8
    7958:	f022 f820 	bl	2999c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    795c:	68a0      	ldr	r0, [r4, #8]
    795e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    7960:	f7ff fe6c 	bl	763c <le_gen_dhkey>
    7964:	4606      	mov	r6, r0
	net_buf_unref(buf);
    7966:	4620      	mov	r0, r4
    7968:	f018 f9fe 	bl	1fd68 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    796c:	4631      	mov	r1, r6
    796e:	4628      	mov	r0, r5
    7970:	e7da      	b.n	7928 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    7972:	78da      	ldrb	r2, [r3, #3]
    7974:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    7978:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    797a:	791a      	ldrb	r2, [r3, #4]
    797c:	f022 0201 	bic.w	r2, r2, #1
    7980:	711a      	strb	r2, [r3, #4]
}
    7982:	e7aa      	b.n	78da <bt_hci_ecc_send+0x26>
    7984:	20000000 	.word	0x20000000
    7988:	20001ee0 	.word	0x20001ee0
    798c:	20000be4 	.word	0x20000be4

00007990 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    7990:	b510      	push	{r4, lr}
    7992:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    7994:	4c0c      	ldr	r4, [pc, #48]	; (79c8 <bt_hci_ecc_init+0x38>)
    7996:	490d      	ldr	r1, [pc, #52]	; (79cc <bt_hci_ecc_init+0x3c>)
    7998:	2200      	movs	r2, #0
    799a:	2300      	movs	r3, #0
    799c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    79a0:	2300      	movs	r3, #0
    79a2:	220a      	movs	r2, #10
    79a4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    79a8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    79ac:	9300      	str	r3, [sp, #0]
    79ae:	f44f 628f 	mov.w	r2, #1144	; 0x478
    79b2:	4b07      	ldr	r3, [pc, #28]	; (79d0 <bt_hci_ecc_init+0x40>)
    79b4:	4620      	mov	r0, r4
    79b6:	f01a fb15 	bl	21fe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    79ba:	4906      	ldr	r1, [pc, #24]	; (79d4 <bt_hci_ecc_init+0x44>)
    79bc:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    79be:	b008      	add	sp, #32
    79c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    79c4:	f022 bb3b 	b.w	2a03e <z_impl_k_thread_name_set>
    79c8:	200013b8 	.word	0x200013b8
    79cc:	20004898 	.word	0x20004898
    79d0:	000076d5 	.word	0x000076d5
    79d4:	0002dc8d 	.word	0x0002dc8d

000079d8 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
    79d8:	7803      	ldrb	r3, [r0, #0]
    79da:	2b01      	cmp	r3, #1
{
    79dc:	b530      	push	{r4, r5, lr}
	switch (src->type) {
    79de:	d013      	beq.n	7a08 <uuid_to_uuid128+0x30>
    79e0:	2b02      	cmp	r3, #2
    79e2:	d027      	beq.n	7a34 <uuid_to_uuid128+0x5c>
    79e4:	b97b      	cbnz	r3, 7a06 <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    79e6:	4b19      	ldr	r3, [pc, #100]	; (7a4c <uuid_to_uuid128+0x74>)
    79e8:	460a      	mov	r2, r1
    79ea:	f103 0410 	add.w	r4, r3, #16
    79ee:	f853 5b04 	ldr.w	r5, [r3], #4
    79f2:	f842 5b04 	str.w	r5, [r2], #4
    79f6:	42a3      	cmp	r3, r4
    79f8:	d1f9      	bne.n	79ee <uuid_to_uuid128+0x16>
    79fa:	781b      	ldrb	r3, [r3, #0]
    79fc:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    79fe:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
    7a00:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    7a02:	0a1b      	lsrs	r3, r3, #8
    7a04:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    7a06:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
    7a08:	4b10      	ldr	r3, [pc, #64]	; (7a4c <uuid_to_uuid128+0x74>)
    7a0a:	460a      	mov	r2, r1
    7a0c:	f103 0410 	add.w	r4, r3, #16
    7a10:	f853 5b04 	ldr.w	r5, [r3], #4
    7a14:	f842 5b04 	str.w	r5, [r2], #4
    7a18:	42a3      	cmp	r3, r4
    7a1a:	d1f9      	bne.n	7a10 <uuid_to_uuid128+0x38>
    7a1c:	781b      	ldrb	r3, [r3, #0]
    7a1e:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    7a20:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
    7a22:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    7a24:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    7a28:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    7a2a:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
    7a2c:	0a1b      	lsrs	r3, r3, #8
    7a2e:	738a      	strb	r2, [r1, #14]
    7a30:	740b      	strb	r3, [r1, #16]
}
    7a32:	e7e8      	b.n	7a06 <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    7a34:	f100 0310 	add.w	r3, r0, #16
    7a38:	f850 2b04 	ldr.w	r2, [r0], #4
    7a3c:	f841 2b04 	str.w	r2, [r1], #4
    7a40:	4298      	cmp	r0, r3
    7a42:	d1f9      	bne.n	7a38 <uuid_to_uuid128+0x60>
    7a44:	7803      	ldrb	r3, [r0, #0]
    7a46:	700b      	strb	r3, [r1, #0]
    7a48:	e7dd      	b.n	7a06 <uuid_to_uuid128+0x2e>
    7a4a:	bf00      	nop
    7a4c:	0002dcbf 	.word	0x0002dcbf

00007a50 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7a50:	b538      	push	{r3, r4, r5, lr}
    7a52:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    7a54:	4805      	ldr	r0, [pc, #20]	; (7a6c <bt_buf_get_rx+0x1c>)
    7a56:	f021 ff10 	bl	2987a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    7a5a:	4604      	mov	r4, r0
    7a5c:	b120      	cbz	r0, 7a68 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    7a5e:	2100      	movs	r1, #0
    7a60:	3008      	adds	r0, #8
    7a62:	f021 ff2f 	bl	298c4 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    7a66:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7a68:	4620      	mov	r0, r4
    7a6a:	bd38      	pop	{r3, r4, r5, pc}
    7a6c:	20000d24 	.word	0x20000d24

00007a70 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    7a70:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    7a72:	490b      	ldr	r1, [pc, #44]	; (7aa0 <bt_buf_get_cmd_complete+0x30>)
{
    7a74:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    7a76:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    7a7a:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    7a7c:	b920      	cbnz	r0, 7a88 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    7a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7a82:	2001      	movs	r0, #1
    7a84:	f7ff bfe4 	b.w	7a50 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    7a88:	f021 ff2d 	bl	298e6 <net_buf_ref>
    7a8c:	2301      	movs	r3, #1
		buf->len = 0U;
    7a8e:	2100      	movs	r1, #0
    7a90:	7503      	strb	r3, [r0, #20]
    7a92:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    7a94:	4604      	mov	r4, r0
    7a96:	3008      	adds	r0, #8
    7a98:	f021 ff14 	bl	298c4 <net_buf_simple_reserve>
}
    7a9c:	4620      	mov	r0, r4
    7a9e:	bd10      	pop	{r4, pc}
    7aa0:	20000000 	.word	0x20000000

00007aa4 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    7aa4:	b570      	push	{r4, r5, r6, lr}
    7aa6:	4604      	mov	r4, r0
	switch (evt) {
    7aa8:	2c0f      	cmp	r4, #15
{
    7aaa:	460d      	mov	r5, r1
    7aac:	4610      	mov	r0, r2
    7aae:	4619      	mov	r1, r3
	switch (evt) {
    7ab0:	d805      	bhi.n	7abe <bt_buf_get_evt+0x1a>
    7ab2:	2c0d      	cmp	r4, #13
    7ab4:	d912      	bls.n	7adc <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    7ab6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    7aba:	f7ff bfd9 	b.w	7a70 <bt_buf_get_cmd_complete>
	switch (evt) {
    7abe:	2c13      	cmp	r4, #19
    7ac0:	d10c      	bne.n	7adc <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    7ac2:	480b      	ldr	r0, [pc, #44]	; (7af0 <bt_buf_get_evt+0x4c>)
    7ac4:	f021 fed9 	bl	2987a <net_buf_alloc_fixed>
			if (buf) {
    7ac8:	4604      	mov	r4, r0
    7aca:	b128      	cbz	r0, 7ad8 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    7acc:	2100      	movs	r1, #0
    7ace:	3008      	adds	r0, #8
    7ad0:	f021 fef8 	bl	298c4 <net_buf_simple_reserve>
    7ad4:	2301      	movs	r3, #1
    7ad6:	7523      	strb	r3, [r4, #20]
}
    7ad8:	4620      	mov	r0, r4
    7ada:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    7adc:	4602      	mov	r2, r0
    7ade:	460b      	mov	r3, r1
		if (discardable) {
    7ae0:	b10d      	cbz	r5, 7ae6 <bt_buf_get_evt+0x42>
    7ae2:	4804      	ldr	r0, [pc, #16]	; (7af4 <bt_buf_get_evt+0x50>)
    7ae4:	e7ee      	b.n	7ac4 <bt_buf_get_evt+0x20>
}
    7ae6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7aea:	2001      	movs	r0, #1
    7aec:	f7ff bfb0 	b.w	7a50 <bt_buf_get_rx>
    7af0:	20000d50 	.word	0x20000d50
    7af4:	20000ca0 	.word	0x20000ca0

00007af8 <hci_disconn_complete_prio>:
{
    7af8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    7afa:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    7afc:	781a      	ldrb	r2, [r3, #0]
    7afe:	b972      	cbnz	r2, 7b1e <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7b00:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    7b04:	4620      	mov	r0, r4
    7b06:	f002 ff9f 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    7b0a:	4605      	mov	r5, r0
    7b0c:	b940      	cbnz	r0, 7b20 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    7b0e:	4b08      	ldr	r3, [pc, #32]	; (7b30 <hci_disconn_complete_prio+0x38>)
    7b10:	881a      	ldrh	r2, [r3, #0]
    7b12:	b922      	cbnz	r2, 7b1e <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    7b14:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    7b18:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    7b1c:	8018      	strh	r0, [r3, #0]
}
    7b1e:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    7b20:	2101      	movs	r1, #1
    7b22:	f002 ff99 	bl	aa58 <bt_conn_set_state>
	bt_conn_unref(conn);
    7b26:	4628      	mov	r0, r5
}
    7b28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    7b2c:	f01f bdcd 	b.w	276ca <bt_conn_unref>
    7b30:	200033e6 	.word	0x200033e6

00007b34 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7b34:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7b36:	4c0c      	ldr	r4, [pc, #48]	; (7b68 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7b38:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7b3a:	2205      	movs	r2, #5
    7b3c:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    7b40:	f003 fa04 	bl	af4c <bt_conn_lookup_state_le>
		if (!conn) {
    7b44:	b970      	cbnz	r0, 7b64 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    7b46:	4b09      	ldr	r3, [pc, #36]	; (7b6c <find_pending_connect.part.0+0x38>)
    7b48:	6818      	ldr	r0, [r3, #0]
    7b4a:	889a      	ldrh	r2, [r3, #4]
    7b4c:	9000      	str	r0, [sp, #0]
    7b4e:	799b      	ldrb	r3, [r3, #6]
    7b50:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7b54:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    7b58:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    7b5c:	2204      	movs	r2, #4
    7b5e:	4669      	mov	r1, sp
    7b60:	f003 f9f4 	bl	af4c <bt_conn_lookup_state_le>
}
    7b64:	b002      	add	sp, #8
    7b66:	bd10      	pop	{r4, pc}
    7b68:	20000000 	.word	0x20000000
    7b6c:	0002b80a 	.word	0x0002b80a

00007b70 <hci_data_buf_overflow>:
{
    7b70:	b500      	push	{lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7b72:	6883      	ldr	r3, [r0, #8]
    7b74:	4a07      	ldr	r2, [pc, #28]	; (7b94 <hci_data_buf_overflow+0x24>)
    7b76:	781b      	ldrb	r3, [r3, #0]
    7b78:	4807      	ldr	r0, [pc, #28]	; (7b98 <hci_data_buf_overflow+0x28>)
{
    7b7a:	b089      	sub	sp, #36	; 0x24
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    7b7c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7b80:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    7b84:	2303      	movs	r3, #3
    7b86:	aa05      	add	r2, sp, #20
    7b88:	9305      	str	r3, [sp, #20]
    7b8a:	f01f f9ef 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    7b8e:	b009      	add	sp, #36	; 0x24
    7b90:	f85d fb04 	ldr.w	pc, [sp], #4
    7b94:	0002dcd7 	.word	0x0002dcd7
    7b98:	0002b6bc 	.word	0x0002b6bc

00007b9c <le_conn_update_complete>:
{
    7b9c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    7b9e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7ba0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    7ba4:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    7ba6:	4630      	mov	r0, r6
    7ba8:	f002 ff4e 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    7bac:	4604      	mov	r4, r0
    7bae:	b968      	cbnz	r0, 7bcc <le_conn_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7bb0:	4b25      	ldr	r3, [pc, #148]	; (7c48 <le_conn_update_complete+0xac>)
    7bb2:	4826      	ldr	r0, [pc, #152]	; (7c4c <le_conn_update_complete+0xb0>)
    7bb4:	e9cd 3606 	strd	r3, r6, [sp, #24]
    7bb8:	aa05      	add	r2, sp, #20
    7bba:	2303      	movs	r3, #3
    7bbc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7bc0:	9301      	str	r3, [sp, #4]
    7bc2:	9305      	str	r3, [sp, #20]
    7bc4:	f01f f9d2 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    7bc8:	b008      	add	sp, #32
    7bca:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    7bcc:	782b      	ldrb	r3, [r5, #0]
    7bce:	b9cb      	cbnz	r3, 7c04 <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    7bd0:	792a      	ldrb	r2, [r5, #4]
    7bd2:	78eb      	ldrb	r3, [r5, #3]
    7bd4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7bd8:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    7bdc:	79aa      	ldrb	r2, [r5, #6]
    7bde:	796b      	ldrb	r3, [r5, #5]
    7be0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7be4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7be8:	79eb      	ldrb	r3, [r5, #7]
    7bea:	7a2a      	ldrb	r2, [r5, #8]
    7bec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7bf0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    7bf4:	f003 f874 	bl	ace0 <notify_le_param_updated>
	bt_conn_unref(conn);
    7bf8:	4620      	mov	r0, r4
}
    7bfa:	b008      	add	sp, #32
    7bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7c00:	f01f bd63 	b.w	276ca <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    7c04:	2b1a      	cmp	r3, #26
    7c06:	d1f7      	bne.n	7bf8 <le_conn_update_complete+0x5c>
    7c08:	78c3      	ldrb	r3, [r0, #3]
    7c0a:	2b01      	cmp	r3, #1
    7c0c:	d1f4      	bne.n	7bf8 <le_conn_update_complete+0x5c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    7c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    7c12:	3004      	adds	r0, #4
    7c14:	f01f f98f 	bl	26f36 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    7c18:	0543      	lsls	r3, r0, #21
    7c1a:	d4ed      	bmi.n	7bf8 <le_conn_update_complete+0x5c>
		param.interval_min = conn->le.interval_min;
    7c1c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    7c20:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    7c24:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    7c28:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    7c2c:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    7c30:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    7c34:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    7c36:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    7c3a:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    7c3e:	4620      	mov	r0, r4
    7c40:	f003 fd44 	bl	b6cc <bt_l2cap_update_conn_param>
    7c44:	e7d8      	b.n	7bf8 <le_conn_update_complete+0x5c>
    7c46:	bf00      	nop
    7c48:	0002dcff 	.word	0x0002dcff
    7c4c:	0002b6bc 	.word	0x0002b6bc

00007c50 <hci_hardware_error>:
{
    7c50:	b500      	push	{lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    7c52:	2101      	movs	r1, #1
    7c54:	b089      	sub	sp, #36	; 0x24
    7c56:	3008      	adds	r0, #8
    7c58:	f021 fea8 	bl	299ac <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    7c5c:	4a07      	ldr	r2, [pc, #28]	; (7c7c <hci_hardware_error+0x2c>)
    7c5e:	7803      	ldrb	r3, [r0, #0]
    7c60:	4807      	ldr	r0, [pc, #28]	; (7c80 <hci_hardware_error+0x30>)
    7c62:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7c66:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7c6a:	2303      	movs	r3, #3
    7c6c:	aa05      	add	r2, sp, #20
    7c6e:	9305      	str	r3, [sp, #20]
    7c70:	f01f f97c 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    7c74:	b009      	add	sp, #36	; 0x24
    7c76:	f85d fb04 	ldr.w	pc, [sp], #4
    7c7a:	bf00      	nop
    7c7c:	0002dd23 	.word	0x0002dd23
    7c80:	0002b6bc 	.word	0x0002b6bc

00007c84 <le_data_len_change>:
{
    7c84:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    7c86:	6883      	ldr	r3, [r0, #8]
    7c88:	881c      	ldrh	r4, [r3, #0]
{
    7c8a:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    7c8c:	4620      	mov	r0, r4
    7c8e:	f002 fedb 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    7c92:	b968      	cbnz	r0, 7cb0 <le_data_len_change+0x2c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7c94:	4b09      	ldr	r3, [pc, #36]	; (7cbc <le_data_len_change+0x38>)
    7c96:	480a      	ldr	r0, [pc, #40]	; (7cc0 <le_data_len_change+0x3c>)
    7c98:	e9cd 3406 	strd	r3, r4, [sp, #24]
    7c9c:	aa05      	add	r2, sp, #20
    7c9e:	2303      	movs	r3, #3
    7ca0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7ca4:	9301      	str	r3, [sp, #4]
    7ca6:	9305      	str	r3, [sp, #20]
    7ca8:	f01f f960 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    7cac:	b008      	add	sp, #32
    7cae:	bd10      	pop	{r4, pc}
    7cb0:	b008      	add	sp, #32
    7cb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    7cb6:	f01f bd08 	b.w	276ca <bt_conn_unref>
    7cba:	bf00      	nop
    7cbc:	0002dcff 	.word	0x0002dcff
    7cc0:	0002b6bc 	.word	0x0002b6bc

00007cc4 <hci_vendor_event>:
{
    7cc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    7cc6:	8981      	ldrh	r1, [r0, #12]
    7cc8:	6880      	ldr	r0, [r0, #8]
    7cca:	f7ff fc57 	bl	757c <bt_hex_real>
    7cce:	4b06      	ldr	r3, [pc, #24]	; (7ce8 <hci_vendor_event+0x24>)
    7cd0:	9301      	str	r3, [sp, #4]
    7cd2:	2300      	movs	r3, #0
    7cd4:	9002      	str	r0, [sp, #8]
    7cd6:	4905      	ldr	r1, [pc, #20]	; (7cec <hci_vendor_event+0x28>)
    7cd8:	9300      	str	r3, [sp, #0]
    7cda:	2202      	movs	r2, #2
    7cdc:	4618      	mov	r0, r3
    7cde:	f01f f948 	bl	26f72 <z_log_msg2_runtime_create.constprop.0>
}
    7ce2:	b005      	add	sp, #20
    7ce4:	f85d fb04 	ldr.w	pc, [sp], #4
    7ce8:	0002dd45 	.word	0x0002dd45
    7cec:	0002b6bc 	.word	0x0002b6bc

00007cf0 <handle_event>:
{
    7cf0:	b5b0      	push	{r4, r5, r7, lr}
    7cf2:	b088      	sub	sp, #32
    7cf4:	4604      	mov	r4, r0
    7cf6:	af06      	add	r7, sp, #24
    7cf8:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    7cfa:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    7cfe:	7811      	ldrb	r1, [r2, #0]
    7d00:	42a1      	cmp	r1, r4
    7d02:	d014      	beq.n	7d2e <handle_event+0x3e>
	for (i = 0; i < num_handlers; i++) {
    7d04:	3208      	adds	r2, #8
    7d06:	429a      	cmp	r2, r3
    7d08:	d1f9      	bne.n	7cfe <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    7d0a:	8985      	ldrh	r5, [r0, #12]
    7d0c:	6880      	ldr	r0, [r0, #8]
    7d0e:	4629      	mov	r1, r5
    7d10:	f7ff fc34 	bl	757c <bt_hex_real>
    7d14:	4b13      	ldr	r3, [pc, #76]	; (7d64 <handle_event+0x74>)
    7d16:	9301      	str	r3, [sp, #4]
    7d18:	2300      	movs	r3, #0
    7d1a:	e9cd 5003 	strd	r5, r0, [sp, #12]
    7d1e:	4912      	ldr	r1, [pc, #72]	; (7d68 <handle_event+0x78>)
    7d20:	9402      	str	r4, [sp, #8]
    7d22:	9300      	str	r3, [sp, #0]
    7d24:	2202      	movs	r2, #2
    7d26:	4618      	mov	r0, r3
    7d28:	f01f f923 	bl	26f72 <z_log_msg2_runtime_create.constprop.0>
    7d2c:	e014      	b.n	7d58 <handle_event+0x68>
		if (buf->len < handler->min_len) {
    7d2e:	8983      	ldrh	r3, [r0, #12]
    7d30:	7851      	ldrb	r1, [r2, #1]
    7d32:	4299      	cmp	r1, r3
    7d34:	d913      	bls.n	7d5e <handle_event+0x6e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7d36:	490d      	ldr	r1, [pc, #52]	; (7d6c <handle_event+0x7c>)
    7d38:	480b      	ldr	r0, [pc, #44]	; (7d68 <handle_event+0x78>)
    7d3a:	466d      	mov	r5, sp
    7d3c:	b088      	sub	sp, #32
    7d3e:	aa06      	add	r2, sp, #24
    7d40:	e9c2 1304 	strd	r1, r3, [r2, #16]
    7d44:	2304      	movs	r3, #4
    7d46:	6194      	str	r4, [r2, #24]
    7d48:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    7d4c:	f842 3f0c 	str.w	r3, [r2, #12]!
    7d50:	607b      	str	r3, [r7, #4]
    7d52:	f01f f90b 	bl	26f6c <z_log_msg2_static_create.constprop.0>
    7d56:	46ad      	mov	sp, r5
}
    7d58:	3708      	adds	r7, #8
    7d5a:	46bd      	mov	sp, r7
    7d5c:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    7d5e:	6853      	ldr	r3, [r2, #4]
    7d60:	4798      	blx	r3
		return;
    7d62:	e7f9      	b.n	7d58 <handle_event+0x68>
    7d64:	0002dd8b 	.word	0x0002dd8b
    7d68:	0002b6bc 	.word	0x0002b6bc
    7d6c:	0002dd69 	.word	0x0002dd69

00007d70 <hci_le_meta_event>:
{
    7d70:	b510      	push	{r4, lr}
    7d72:	2101      	movs	r1, #1
    7d74:	4604      	mov	r4, r0
    7d76:	3008      	adds	r0, #8
    7d78:	f021 fe18 	bl	299ac <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7d7c:	4621      	mov	r1, r4
    7d7e:	4a03      	ldr	r2, [pc, #12]	; (7d8c <hci_le_meta_event+0x1c>)
    7d80:	7800      	ldrb	r0, [r0, #0]
}
    7d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7d86:	230b      	movs	r3, #11
    7d88:	f7ff bfb2 	b.w	7cf0 <handle_event>
    7d8c:	0002bbb8 	.word	0x0002bbb8

00007d90 <hci_cmd_done>:
{
    7d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7d94:	b082      	sub	sp, #8
    7d96:	4680      	mov	r8, r0
    7d98:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7d9a:	7990      	ldrb	r0, [r2, #6]
    7d9c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 7ed0 <hci_cmd_done+0x140>
{
    7da0:	460e      	mov	r6, r1
    7da2:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    7da4:	f017 ff1c 	bl	1fbe0 <net_buf_pool_get>
    7da8:	4581      	cmp	r9, r0
    7daa:	d020      	beq.n	7dee <hci_cmd_done+0x5e>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    7dac:	79a0      	ldrb	r0, [r4, #6]
    7dae:	f017 ff17 	bl	1fbe0 <net_buf_pool_get>
    7db2:	466e      	mov	r6, sp
    7db4:	b08a      	sub	sp, #40	; 0x28
    7db6:	466d      	mov	r5, sp
    7db8:	4b46      	ldr	r3, [pc, #280]	; (7ed4 <hci_cmd_done+0x144>)
    7dba:	79a0      	ldrb	r0, [r4, #6]
    7dbc:	61a8      	str	r0, [r5, #24]
    7dbe:	e9c5 3804 	strd	r3, r8, [r5, #16]
    7dc2:	f017 ff0d 	bl	1fbe0 <net_buf_pool_get>
    7dc6:	79a0      	ldrb	r0, [r4, #6]
    7dc8:	f017 ff0a 	bl	1fbe0 <net_buf_pool_get>
    7dcc:	462a      	mov	r2, r5
    7dce:	2306      	movs	r3, #6
    7dd0:	e9c5 0907 	strd	r0, r9, [r5, #28]
    7dd4:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    7dd8:	f842 3f0c 	str.w	r3, [r2, #12]!
    7ddc:	483e      	ldr	r0, [pc, #248]	; (7ed8 <hci_cmd_done+0x148>)
    7dde:	607b      	str	r3, [r7, #4]
    7de0:	f01f f8c4 	bl	26f6c <z_log_msg2_static_create.constprop.0>
    7de4:	46b5      	mov	sp, r6
}
    7de6:	3708      	adds	r7, #8
    7de8:	46bd      	mov	sp, r7
    7dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
    7dee:	4620      	mov	r0, r4
    7df0:	f017 fefe 	bl	1fbf0 <net_buf_id>
    7df4:	4d39      	ldr	r5, [pc, #228]	; (7edc <hci_cmd_done+0x14c>)
    7df6:	f04f 0a0c 	mov.w	sl, #12
    7dfa:	fb0a 5000 	mla	r0, sl, r0, r5
    7dfe:	8843      	ldrh	r3, [r0, #2]
    7e00:	4543      	cmp	r3, r8
    7e02:	d01e      	beq.n	7e42 <hci_cmd_done+0xb2>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7e04:	4620      	mov	r0, r4
    7e06:	f017 fef3 	bl	1fbf0 <net_buf_id>
    7e0a:	46e9      	mov	r9, sp
    7e0c:	4b34      	ldr	r3, [pc, #208]	; (7ee0 <hci_cmd_done+0x150>)
    7e0e:	b088      	sub	sp, #32
    7e10:	466e      	mov	r6, sp
    7e12:	e9c6 3804 	strd	r3, r8, [r6, #16]
    7e16:	4620      	mov	r0, r4
    7e18:	f017 feea 	bl	1fbf0 <net_buf_id>
    7e1c:	4620      	mov	r0, r4
    7e1e:	f017 fee7 	bl	1fbf0 <net_buf_id>
    7e22:	fb0a 5500 	mla	r5, sl, r0, r5
    7e26:	4632      	mov	r2, r6
    7e28:	886b      	ldrh	r3, [r5, #2]
    7e2a:	61b3      	str	r3, [r6, #24]
    7e2c:	2304      	movs	r3, #4
    7e2e:	f842 3f0c 	str.w	r3, [r2, #12]!
    7e32:	4829      	ldr	r0, [pc, #164]	; (7ed8 <hci_cmd_done+0x148>)
    7e34:	607b      	str	r3, [r7, #4]
    7e36:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    7e3a:	f01f f897 	bl	26f6c <z_log_msg2_static_create.constprop.0>
    7e3e:	46cd      	mov	sp, r9
		return;
    7e40:	e7d1      	b.n	7de6 <hci_cmd_done+0x56>
	if (bt_dev.sent_cmd) {
    7e42:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 7ee4 <hci_cmd_done+0x154>
    7e46:	f8d8 0138 	ldr.w	r0, [r8, #312]	; 0x138
    7e4a:	b120      	cbz	r0, 7e56 <hci_cmd_done+0xc6>
		net_buf_unref(bt_dev.sent_cmd);
    7e4c:	f017 ff8c 	bl	1fd68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    7e50:	2300      	movs	r3, #0
    7e52:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    7e56:	4620      	mov	r0, r4
    7e58:	f017 feca 	bl	1fbf0 <net_buf_id>
    7e5c:	f04f 080c 	mov.w	r8, #12
    7e60:	fb08 5000 	mla	r0, r8, r0, r5
    7e64:	6843      	ldr	r3, [r0, #4]
    7e66:	b1a3      	cbz	r3, 7e92 <hci_cmd_done+0x102>
    7e68:	b99e      	cbnz	r6, 7e92 <hci_cmd_done+0x102>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    7e6a:	4620      	mov	r0, r4
    7e6c:	f017 fec0 	bl	1fbf0 <net_buf_id>
    7e70:	fb08 5000 	mla	r0, r8, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    7e74:	2101      	movs	r1, #1
    7e76:	6842      	ldr	r2, [r0, #4]
    7e78:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
    7e7c:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    7e7e:	f003 0c1f 	and.w	ip, r3, #31
    7e82:	fa01 f10c 	lsl.w	r1, r1, ip
	if (val) {
    7e86:	095b      	lsrs	r3, r3, #5
    7e88:	b1e2      	cbz	r2, 7ec4 <hci_cmd_done+0x134>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7e8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7e8e:	f01f f852 	bl	26f36 <atomic_or>
	if (cmd(buf)->sync) {
    7e92:	4620      	mov	r0, r4
    7e94:	f017 feac 	bl	1fbf0 <net_buf_id>
    7e98:	f04f 080c 	mov.w	r8, #12
    7e9c:	fb08 5000 	mla	r0, r8, r0, r5
    7ea0:	6883      	ldr	r3, [r0, #8]
    7ea2:	2b00      	cmp	r3, #0
    7ea4:	d09f      	beq.n	7de6 <hci_cmd_done+0x56>
		cmd(buf)->status = status;
    7ea6:	4620      	mov	r0, r4
    7ea8:	f017 fea2 	bl	1fbf0 <net_buf_id>
    7eac:	fb08 f000 	mul.w	r0, r8, r0
    7eb0:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7eb2:	4620      	mov	r0, r4
    7eb4:	f017 fe9c 	bl	1fbf0 <net_buf_id>
    7eb8:	fb08 5500 	mla	r5, r8, r0, r5
    7ebc:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    7ebe:	f01a fad3 	bl	22468 <z_impl_k_sem_give>
}
    7ec2:	e790      	b.n	7de6 <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7ec4:	43c9      	mvns	r1, r1
    7ec6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    7eca:	f01f f825 	bl	26f18 <atomic_and>
    7ece:	e7e0      	b.n	7e92 <hci_cmd_done+0x102>
    7ed0:	20000cf8 	.word	0x20000cf8
    7ed4:	0002ddad 	.word	0x0002ddad
    7ed8:	0002b6bc 	.word	0x0002b6bc
    7edc:	20001ee8 	.word	0x20001ee8
    7ee0:	0002dde2 	.word	0x0002dde2
    7ee4:	20000000 	.word	0x20000000

00007ee8 <hci_cmd_status>:
{
    7ee8:	b538      	push	{r3, r4, r5, lr}
    7eea:	2104      	movs	r1, #4
    7eec:	4604      	mov	r4, r0
    7eee:	3008      	adds	r0, #8
    7ef0:	f021 fd5c 	bl	299ac <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    7ef4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    7ef6:	7801      	ldrb	r1, [r0, #0]
    7ef8:	8840      	ldrh	r0, [r0, #2]
    7efa:	4622      	mov	r2, r4
    7efc:	f7ff ff48 	bl	7d90 <hci_cmd_done>
	if (ncmd) {
    7f00:	b125      	cbz	r5, 7f0c <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    7f02:	4803      	ldr	r0, [pc, #12]	; (7f10 <hci_cmd_status+0x28>)
}
    7f04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f08:	f01a baae 	b.w	22468 <z_impl_k_sem_give>
    7f0c:	bd38      	pop	{r3, r4, r5, pc}
    7f0e:	bf00      	nop
    7f10:	20000120 	.word	0x20000120

00007f14 <hci_cmd_complete>:
{
    7f14:	b538      	push	{r3, r4, r5, lr}
    7f16:	2103      	movs	r1, #3
    7f18:	4604      	mov	r4, r0
    7f1a:	3008      	adds	r0, #8
    7f1c:	f021 fd46 	bl	299ac <net_buf_simple_pull_mem>
	status = buf->data[0];
    7f20:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7f22:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7f24:	7819      	ldrb	r1, [r3, #0]
    7f26:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    7f2a:	4622      	mov	r2, r4
    7f2c:	f7ff ff30 	bl	7d90 <hci_cmd_done>
	if (ncmd) {
    7f30:	b125      	cbz	r5, 7f3c <hci_cmd_complete+0x28>
    7f32:	4803      	ldr	r0, [pc, #12]	; (7f40 <hci_cmd_complete+0x2c>)
}
    7f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    7f38:	f01a ba96 	b.w	22468 <z_impl_k_sem_give>
    7f3c:	bd38      	pop	{r3, r4, r5, pc}
    7f3e:	bf00      	nop
    7f40:	20000120 	.word	0x20000120

00007f44 <hci_tx_thread>:
{
    7f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    7f48:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>
		BT_ASSERT(err == 0);
    7f4c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa8>
{
    7f50:	b089      	sub	sp, #36	; 0x24
			ev_count += bt_conn_prepare_events(&events[1]);
    7f52:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    7f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7f5a:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    7f5c:	f36f 3352 	bfc	r3, #13, #6
    7f60:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7f64:	f002 fd3c 	bl	a9e0 <bt_conn_prepare_events>
    7f68:	1c46      	adds	r6, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7f6a:	484e      	ldr	r0, [pc, #312]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f74:	4631      	mov	r1, r6
    7f76:	f01b f9d9 	bl	2332c <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7f7a:	b160      	cbz	r0, 7f96 <hci_tx_thread+0x52>
    7f7c:	494b      	ldr	r1, [pc, #300]	; (80ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xac>)
    7f7e:	484c      	ldr	r0, [pc, #304]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    7f80:	f640 1393 	movw	r3, #2451	; 0x993
    7f84:	464a      	mov	r2, r9
    7f86:	f01c ffbe 	bl	24f06 <printk>
    7f8a:	4040      	eors	r0, r0
    7f8c:	f380 8811 	msr	BASEPRI, r0
    7f90:	f04f 0003 	mov.w	r0, #3
    7f94:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7f96:	4d47      	ldr	r5, [pc, #284]	; (80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>)
{
    7f98:	4f42      	ldr	r7, [pc, #264]	; (80a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xa4>)
    7f9a:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
    7f9e:	b916      	cbnz	r6, 7fa6 <hci_tx_thread+0x62>
	z_impl_k_yield();
    7fa0:	f01a febe 	bl	22d20 <z_impl_k_yield>
	while (1) {
    7fa4:	e7d7      	b.n	7f56 <hci_tx_thread+0x12>
		switch (ev->state) {
    7fa6:	68fb      	ldr	r3, [r7, #12]
    7fa8:	f3c3 3345 	ubfx	r3, r3, #13, #6
    7fac:	2b01      	cmp	r3, #1
    7fae:	d962      	bls.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
    7fb0:	2b04      	cmp	r3, #4
    7fb2:	d16a      	bne.n	808a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a>
			if (ev->tag == BT_EVENT_CMD_TX) {
    7fb4:	7b3b      	ldrb	r3, [r7, #12]
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	d160      	bne.n	807c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7c>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    7fba:	483f      	ldr	r0, [pc, #252]	; (80b8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb8>)
    7fbc:	2200      	movs	r2, #0
    7fbe:	2300      	movs	r3, #0
    7fc0:	f021 fc60 	bl	29884 <net_buf_get>
	BT_ASSERT(buf);
    7fc4:	4604      	mov	r4, r0
    7fc6:	b960      	cbnz	r0, 7fe2 <hci_tx_thread+0x9e>
    7fc8:	493c      	ldr	r1, [pc, #240]	; (80bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xbc>)
    7fca:	4839      	ldr	r0, [pc, #228]	; (80b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb0>)
    7fcc:	f640 132a 	movw	r3, #2346	; 0x92a
    7fd0:	464a      	mov	r2, r9
    7fd2:	f01c ff98 	bl	24f06 <printk>
    7fd6:	4040      	eors	r0, r0
    7fd8:	f380 8811 	msr	BASEPRI, r0
    7fdc:	f04f 0003 	mov.w	r0, #3
    7fe0:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    7fe2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7fea:	4658      	mov	r0, fp
    7fec:	f01a fa62 	bl	224b4 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7ff0:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    7ff4:	b18b      	cbz	r3, 801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
		BT_ERR("Uncleared pending sent_cmd");
    7ff6:	4b32      	ldr	r3, [pc, #200]	; (80c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc0>)
    7ff8:	4832      	ldr	r0, [pc, #200]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    7ffa:	9306      	str	r3, [sp, #24]
    7ffc:	aa05      	add	r2, sp, #20
    7ffe:	2302      	movs	r3, #2
    8000:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8004:	9301      	str	r3, [sp, #4]
    8006:	9305      	str	r3, [sp, #20]
    8008:	f01e ffb0 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    800c:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    8010:	f017 feaa 	bl	1fd68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8014:	2300      	movs	r3, #0
    8016:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    801a:	4620      	mov	r0, r4
    801c:	f021 fc63 	bl	298e6 <net_buf_ref>
    8020:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    8024:	4620      	mov	r0, r4
    8026:	f7ff fc45 	bl	78b4 <bt_hci_ecc_send>
	if (err) {
    802a:	b320      	cbz	r0, 8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
		BT_ERR("Unable to send to driver (err %d)", err);
    802c:	4b26      	ldr	r3, [pc, #152]	; (80c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc8>)
    802e:	aa05      	add	r2, sp, #20
    8030:	e9cd 3006 	strd	r3, r0, [sp, #24]
    8034:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8038:	2303      	movs	r3, #3
    803a:	4822      	ldr	r0, [pc, #136]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
    803c:	9301      	str	r3, [sp, #4]
    803e:	9305      	str	r3, [sp, #20]
    8040:	f01e ff94 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
    8044:	4821      	ldr	r0, [pc, #132]	; (80cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xcc>)
    8046:	f01a fa0f 	bl	22468 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    804a:	4620      	mov	r0, r4
    804c:	f017 fdd0 	bl	1fbf0 <net_buf_id>
    8050:	4b1f      	ldr	r3, [pc, #124]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    8052:	220c      	movs	r2, #12
    8054:	fb02 3000 	mla	r0, r2, r0, r3
    8058:	211f      	movs	r1, #31
    805a:	8840      	ldrh	r0, [r0, #2]
    805c:	4622      	mov	r2, r4
    805e:	f7ff fe97 	bl	7d90 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8062:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    8066:	f017 fe7f 	bl	1fd68 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    806a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    806c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    806e:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
    8072:	f017 fe79 	bl	1fd68 <net_buf_unref>
	for (; count; ev++, count--) {
    8076:	3714      	adds	r7, #20
    8078:	3e01      	subs	r6, #1
    807a:	e790      	b.n	7f9e <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    807c:	2b01      	cmp	r3, #1
    807e:	d1fa      	bne.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
					conn = CONTAINER_OF(ev->fifo,
    8080:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    8082:	3838      	subs	r0, #56	; 0x38
    8084:	f003 f8c0 	bl	b208 <bt_conn_process_tx>
    8088:	e7f5      	b.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    808a:	4a12      	ldr	r2, [pc, #72]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    808c:	480d      	ldr	r0, [pc, #52]	; (80c4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc4>)
		switch (ev->state) {
    808e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8092:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8096:	2303      	movs	r3, #3
    8098:	aa05      	add	r2, sp, #20
    809a:	9301      	str	r3, [sp, #4]
    809c:	9305      	str	r3, [sp, #20]
    809e:	f01e ff65 	bl	26f6c <z_log_msg2_static_create.constprop.0>
			break;
    80a2:	e7e8      	b.n	8076 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x76>
    80a4:	200001c4 	.word	0x200001c4
    80a8:	0002de15 	.word	0x0002de15
    80ac:	0002de49 	.word	0x0002de49
    80b0:	0002de52 	.word	0x0002de52
    80b4:	20000000 	.word	0x20000000
    80b8:	2000013c 	.word	0x2000013c
    80bc:	0002dcd3 	.word	0x0002dcd3
    80c0:	0002de6f 	.word	0x0002de6f
    80c4:	0002b6bc 	.word	0x0002b6bc
    80c8:	0002de8a 	.word	0x0002de8a
    80cc:	20000120 	.word	0x20000120
    80d0:	20001ee8 	.word	0x20001ee8
    80d4:	0002deac 	.word	0x0002deac

000080d8 <hci_num_completed_packets>:
{
    80d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    80dc:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    80de:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
    80e0:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 81d0 <hci_num_completed_packets+0xf8>
{
    80e4:	b088      	sub	sp, #32
			tx->pending_no_cb = 0U;
    80e6:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    80e8:	783b      	ldrb	r3, [r7, #0]
    80ea:	429d      	cmp	r5, r3
    80ec:	db02      	blt.n	80f4 <hci_num_completed_packets+0x1c>
}
    80ee:	b008      	add	sp, #32
    80f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    80f4:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    80f8:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    80fc:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8100:	4650      	mov	r0, sl
    8102:	f002 fca1 	bl	aa48 <bt_conn_lookup_handle>
		if (!conn) {
    8106:	4604      	mov	r4, r0
    8108:	b1d8      	cbz	r0, 8142 <hci_num_completed_packets+0x6a>
			k_work_submit(&conn->tx_complete_work);
    810a:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    810e:	2e00      	cmp	r6, #0
    8110:	d03d      	beq.n	818e <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    8112:	f04f 0320 	mov.w	r3, #32
    8116:	f3ef 8211 	mrs	r2, BASEPRI
    811a:	f383 8812 	msr	BASEPRI_MAX, r3
    811e:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8122:	69e3      	ldr	r3, [r4, #28]
    8124:	b1db      	cbz	r3, 815e <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    8126:	3b01      	subs	r3, #1
    8128:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    812a:	f382 8811 	msr	BASEPRI, r2
    812e:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8132:	4620      	mov	r0, r4
    8134:	f002 fb1c 	bl	a770 <bt_conn_get_pkts>
    8138:	3e01      	subs	r6, #1
    813a:	f01a f995 	bl	22468 <z_impl_k_sem_give>
    813e:	b2b6      	uxth	r6, r6
    8140:	e7e5      	b.n	810e <hci_num_completed_packets+0x36>
			BT_ERR("No connection for handle %u", handle);
    8142:	4b24      	ldr	r3, [pc, #144]	; (81d4 <hci_num_completed_packets+0xfc>)
    8144:	4824      	ldr	r0, [pc, #144]	; (81d8 <hci_num_completed_packets+0x100>)
    8146:	e9cd 3a06 	strd	r3, sl, [sp, #24]
    814a:	aa05      	add	r2, sp, #20
    814c:	2303      	movs	r3, #3
    814e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8152:	9301      	str	r3, [sp, #4]
    8154:	9305      	str	r3, [sp, #20]
    8156:	f01e ff09 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
    815a:	3501      	adds	r5, #1
    815c:	e7c4      	b.n	80e8 <hci_num_completed_packets+0x10>
	return list->head;
    815e:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8160:	b12b      	cbz	r3, 816e <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8162:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8164:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    8166:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8168:	428b      	cmp	r3, r1
	list->tail = node;
    816a:	bf08      	it	eq
    816c:	61a0      	streq	r0, [r4, #24]
    816e:	f382 8811 	msr	BASEPRI, r2
    8172:	f3bf 8f6f 	isb	sy
			if (!node) {
    8176:	b973      	cbnz	r3, 8196 <hci_num_completed_packets+0xbe>
				BT_ERR("packets count mismatch");
    8178:	2302      	movs	r3, #2
    817a:	4817      	ldr	r0, [pc, #92]	; (81d8 <hci_num_completed_packets+0x100>)
    817c:	f8cd 9018 	str.w	r9, [sp, #24]
    8180:	aa05      	add	r2, sp, #20
    8182:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8186:	9301      	str	r3, [sp, #4]
    8188:	9305      	str	r3, [sp, #20]
    818a:	f01e feef 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    818e:	4620      	mov	r0, r4
    8190:	f01f fa9b 	bl	276ca <bt_conn_unref>
    8194:	e7e1      	b.n	815a <hci_num_completed_packets+0x82>
	__asm__ volatile(
    8196:	f04f 0220 	mov.w	r2, #32
    819a:	f3ef 8111 	mrs	r1, BASEPRI
    819e:	f382 8812 	msr	BASEPRI_MAX, r2
    81a2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    81a6:	68da      	ldr	r2, [r3, #12]
    81a8:	61e2      	str	r2, [r4, #28]
	return list->tail;
    81aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    81ac:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    81b0:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    81b4:	b94a      	cbnz	r2, 81ca <hci_num_completed_packets+0xf2>
	list->head = node;
    81b6:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    81ba:	f381 8811 	msr	BASEPRI, r1
    81be:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    81c2:	4650      	mov	r0, sl
    81c4:	f01a fabc 	bl	22740 <k_work_submit>
    81c8:	e7b3      	b.n	8132 <hci_num_completed_packets+0x5a>
	parent->next = child;
    81ca:	6013      	str	r3, [r2, #0]
	list->tail = node;
    81cc:	6263      	str	r3, [r4, #36]	; 0x24
}
    81ce:	e7f4      	b.n	81ba <hci_num_completed_packets+0xe2>
    81d0:	0002dee9 	.word	0x0002dee9
    81d4:	0002decd 	.word	0x0002decd
    81d8:	0002b6bc 	.word	0x0002b6bc

000081dc <hci_disconn_complete>:
{
    81dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    81de:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    81e0:	7835      	ldrb	r5, [r6, #0]
{
    81e2:	b089      	sub	sp, #36	; 0x24
	if (evt->status) {
    81e4:	b995      	cbnz	r5, 820c <hci_disconn_complete+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    81e6:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    81ea:	4638      	mov	r0, r7
    81ec:	f002 fc2c 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    81f0:	4604      	mov	r4, r0
    81f2:	b968      	cbnz	r0, 8210 <hci_disconn_complete+0x34>
		BT_ERR("Unable to look up conn with handle %u", handle);
    81f4:	4b15      	ldr	r3, [pc, #84]	; (824c <hci_disconn_complete+0x70>)
    81f6:	4816      	ldr	r0, [pc, #88]	; (8250 <hci_disconn_complete+0x74>)
    81f8:	e9cd 3706 	strd	r3, r7, [sp, #24]
    81fc:	aa05      	add	r2, sp, #20
    81fe:	2303      	movs	r3, #3
    8200:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8204:	9301      	str	r3, [sp, #4]
    8206:	9305      	str	r3, [sp, #20]
    8208:	f01e feb0 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    820c:	b009      	add	sp, #36	; 0x24
    820e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
    8210:	78f3      	ldrb	r3, [r6, #3]
    8212:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8214:	4629      	mov	r1, r5
    8216:	f002 fc1f 	bl	aa58 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    821a:	78a3      	ldrb	r3, [r4, #2]
    821c:	2b01      	cmp	r3, #1
    821e:	d005      	beq.n	822c <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
    8220:	4620      	mov	r0, r4
}
    8222:	b009      	add	sp, #36	; 0x24
    8224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8228:	f01f ba4f 	b.w	276ca <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    822c:	f3bf 8f5b 	dmb	ish
    8230:	6863      	ldr	r3, [r4, #4]
    8232:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8236:	07db      	lsls	r3, r3, #31
    8238:	d5f2      	bpl.n	8220 <hci_disconn_complete+0x44>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    823a:	4620      	mov	r0, r4
    823c:	2102      	movs	r1, #2
    823e:	f002 fc0b 	bl	aa58 <bt_conn_set_state>
		bt_le_scan_update(false);
    8242:	4628      	mov	r0, r5
    8244:	f001 ff36 	bl	a0b4 <bt_le_scan_update>
    8248:	e7ea      	b.n	8220 <hci_disconn_complete+0x44>
    824a:	bf00      	nop
    824c:	0002df00 	.word	0x0002df00
    8250:	0002b6bc 	.word	0x0002b6bc

00008254 <bt_hci_cmd_state_set_init>:
{
    8254:	b510      	push	{r4, lr}
	state->bit = bit;
    8256:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    825a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    825e:	720b      	strb	r3, [r1, #8]
{
    8260:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    8262:	f017 fcc5 	bl	1fbf0 <net_buf_id>
    8266:	4b03      	ldr	r3, [pc, #12]	; (8274 <bt_hci_cmd_state_set_init+0x20>)
    8268:	220c      	movs	r2, #12
    826a:	fb02 3300 	mla	r3, r2, r0, r3
    826e:	605c      	str	r4, [r3, #4]
}
    8270:	bd10      	pop	{r4, pc}
    8272:	bf00      	nop
    8274:	20001ee8 	.word	0x20001ee8

00008278 <bt_hci_cmd_create>:
{
    8278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    827c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8284:	4606      	mov	r6, r0
    8286:	4817      	ldr	r0, [pc, #92]	; (82e4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    8288:	4d17      	ldr	r5, [pc, #92]	; (82e8 <bt_hci_cmd_create+0x70>)
{
    828a:	460f      	mov	r7, r1
    828c:	f021 faf5 	bl	2987a <net_buf_alloc_fixed>
    8290:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    8292:	f100 0a08 	add.w	sl, r0, #8
    8296:	2100      	movs	r1, #0
    8298:	f04f 0800 	mov.w	r8, #0
    829c:	4650      	mov	r0, sl
    829e:	f021 fb11 	bl	298c4 <net_buf_simple_reserve>
    82a2:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    82a6:	4620      	mov	r0, r4
    82a8:	f017 fca2 	bl	1fbf0 <net_buf_id>
    82ac:	f04f 090c 	mov.w	r9, #12
    82b0:	fb09 5000 	mla	r0, r9, r0, r5
    82b4:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    82b6:	4620      	mov	r0, r4
    82b8:	f017 fc9a 	bl	1fbf0 <net_buf_id>
    82bc:	fb09 5000 	mla	r0, r9, r0, r5
    82c0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    82c4:	4620      	mov	r0, r4
    82c6:	f017 fc93 	bl	1fbf0 <net_buf_id>
    82ca:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    82ce:	2103      	movs	r1, #3
    82d0:	f8c5 8004 	str.w	r8, [r5, #4]
    82d4:	4650      	mov	r0, sl
    82d6:	f021 fb38 	bl	2994a <net_buf_simple_add>
	hdr->param_len = param_len;
    82da:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    82dc:	8006      	strh	r6, [r0, #0]
}
    82de:	4620      	mov	r0, r4
    82e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    82e4:	20000cf8 	.word	0x20000cf8
    82e8:	20001ee8 	.word	0x20001ee8

000082ec <bt_hci_cmd_send>:
{
    82ec:	b530      	push	{r4, r5, lr}
    82ee:	4605      	mov	r5, r0
    82f0:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    82f2:	460c      	mov	r4, r1
    82f4:	b919      	cbnz	r1, 82fe <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    82f6:	f7ff ffbf 	bl	8278 <bt_hci_cmd_create>
		if (!buf) {
    82fa:	4604      	mov	r4, r0
    82fc:	b300      	cbz	r0, 8340 <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    82fe:	f640 4335 	movw	r3, #3125	; 0xc35
    8302:	429d      	cmp	r5, r3
    8304:	d116      	bne.n	8334 <bt_hci_cmd_send+0x48>
		return bt_hci_ecc_send(buf);
    8306:	4620      	mov	r0, r4
    8308:	f7ff fad4 	bl	78b4 <bt_hci_ecc_send>
		if (err) {
    830c:	4605      	mov	r5, r0
    830e:	b170      	cbz	r0, 832e <bt_hci_cmd_send+0x42>
			BT_ERR("Unable to send to driver (err %d)", err);
    8310:	4b0d      	ldr	r3, [pc, #52]	; (8348 <bt_hci_cmd_send+0x5c>)
    8312:	aa05      	add	r2, sp, #20
    8314:	e9cd 3006 	strd	r3, r0, [sp, #24]
    8318:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    831c:	2303      	movs	r3, #3
    831e:	480b      	ldr	r0, [pc, #44]	; (834c <bt_hci_cmd_send+0x60>)
    8320:	9301      	str	r3, [sp, #4]
    8322:	9305      	str	r3, [sp, #20]
    8324:	f01e fe22 	bl	26f6c <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    8328:	4620      	mov	r0, r4
    832a:	f017 fd1d 	bl	1fd68 <net_buf_unref>
}
    832e:	4628      	mov	r0, r5
    8330:	b009      	add	sp, #36	; 0x24
    8332:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8334:	4806      	ldr	r0, [pc, #24]	; (8350 <bt_hci_cmd_send+0x64>)
    8336:	4621      	mov	r1, r4
    8338:	f021 fac8 	bl	298cc <net_buf_put>
	return 0;
    833c:	2500      	movs	r5, #0
    833e:	e7f6      	b.n	832e <bt_hci_cmd_send+0x42>
			return -ENOBUFS;
    8340:	f06f 0568 	mvn.w	r5, #104	; 0x68
    8344:	e7f3      	b.n	832e <bt_hci_cmd_send+0x42>
    8346:	bf00      	nop
    8348:	0002de8a 	.word	0x0002de8a
    834c:	0002b6bc 	.word	0x0002b6bc
    8350:	2000013c 	.word	0x2000013c

00008354 <le_ltk_request>:
{
    8354:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8356:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8358:	882f      	ldrh	r7, [r5, #0]
    835a:	b2bc      	uxth	r4, r7
{
    835c:	b08f      	sub	sp, #60	; 0x3c
	conn = bt_conn_lookup_handle(handle);
    835e:	4620      	mov	r0, r4
    8360:	f002 fb72 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    8364:	4606      	mov	r6, r0
    8366:	b968      	cbnz	r0, 8384 <le_ltk_request+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8368:	4b2b      	ldr	r3, [pc, #172]	; (8418 <le_ltk_request+0xc4>)
    836a:	482c      	ldr	r0, [pc, #176]	; (841c <le_ltk_request+0xc8>)
    836c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    8370:	aa0b      	add	r2, sp, #44	; 0x2c
    8372:	2303      	movs	r3, #3
    8374:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8378:	9304      	str	r3, [sp, #16]
    837a:	930b      	str	r3, [sp, #44]	; 0x2c
    837c:	f01e fdf6 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8380:	b00f      	add	sp, #60	; 0x3c
    8382:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    8384:	ac04      	add	r4, sp, #16
    8386:	f8d5 2002 	ldr.w	r2, [r5, #2]
    838a:	f8d5 3006 	ldr.w	r3, [r5, #6]
    838e:	9401      	str	r4, [sp, #4]
    8390:	8969      	ldrh	r1, [r5, #10]
    8392:	9100      	str	r1, [sp, #0]
    8394:	f021 f838 	bl	29408 <bt_smp_request_ltk>
    8398:	b368      	cbz	r0, 83f6 <le_ltk_request+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    839a:	2112      	movs	r1, #18
    839c:	f242 001a 	movw	r0, #8218	; 0x201a
    83a0:	f7ff ff6a 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    83a4:	4605      	mov	r5, r0
    83a6:	b970      	cbnz	r0, 83c6 <le_ltk_request+0x72>
		BT_ERR("Out of command buffers");
    83a8:	4b1d      	ldr	r3, [pc, #116]	; (8420 <le_ltk_request+0xcc>)
    83aa:	930c      	str	r3, [sp, #48]	; 0x30
    83ac:	481b      	ldr	r0, [pc, #108]	; (841c <le_ltk_request+0xc8>)
    83ae:	2302      	movs	r3, #2
    83b0:	aa0b      	add	r2, sp, #44	; 0x2c
    83b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    83b6:	9303      	str	r3, [sp, #12]
    83b8:	930b      	str	r3, [sp, #44]	; 0x2c
    83ba:	f01e fdd7 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
    83be:	4630      	mov	r0, r6
    83c0:	f01f f983 	bl	276ca <bt_conn_unref>
    83c4:	e7dc      	b.n	8380 <le_ltk_request+0x2c>
    83c6:	2112      	movs	r1, #18
    83c8:	3008      	adds	r0, #8
    83ca:	f021 fabe 	bl	2994a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    83ce:	4603      	mov	r3, r0
    83d0:	4622      	mov	r2, r4
    83d2:	f823 7b02 	strh.w	r7, [r3], #2
    83d6:	af08      	add	r7, sp, #32
    83d8:	4614      	mov	r4, r2
    83da:	cc03      	ldmia	r4!, {r0, r1}
    83dc:	42bc      	cmp	r4, r7
    83de:	6018      	str	r0, [r3, #0]
    83e0:	6059      	str	r1, [r3, #4]
    83e2:	4622      	mov	r2, r4
    83e4:	f103 0308 	add.w	r3, r3, #8
    83e8:	d1f6      	bne.n	83d8 <le_ltk_request+0x84>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    83ea:	4629      	mov	r1, r5
    83ec:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    83f0:	f7ff ff7c 	bl	82ec <bt_hci_cmd_send>
    83f4:	e7e3      	b.n	83be <le_ltk_request+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    83f6:	2102      	movs	r1, #2
    83f8:	f242 001b 	movw	r0, #8219	; 0x201b
    83fc:	f7ff ff3c 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    8400:	4604      	mov	r4, r0
    8402:	2800      	cmp	r0, #0
    8404:	d0d0      	beq.n	83a8 <le_ltk_request+0x54>
    8406:	2102      	movs	r1, #2
    8408:	3008      	adds	r0, #8
    840a:	f021 fa9e 	bl	2994a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    840e:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    8410:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    8412:	f242 001b 	movw	r0, #8219	; 0x201b
    8416:	e7eb      	b.n	83f0 <le_ltk_request+0x9c>
    8418:	0002dcff 	.word	0x0002dcff
    841c:	0002b6bc 	.word	0x0002b6bc
    8420:	0002df26 	.word	0x0002df26

00008424 <le_conn_param_neg_reply>:
{
    8424:	b570      	push	{r4, r5, r6, lr}
    8426:	4606      	mov	r6, r0
    8428:	b088      	sub	sp, #32
    842a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    842c:	f242 0021 	movw	r0, #8225	; 0x2021
    8430:	2103      	movs	r1, #3
    8432:	f7ff ff21 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    8436:	4604      	mov	r4, r0
    8438:	b960      	cbnz	r0, 8454 <le_conn_param_neg_reply+0x30>
		BT_ERR("Unable to allocate buffer");
    843a:	4b0d      	ldr	r3, [pc, #52]	; (8470 <le_conn_param_neg_reply+0x4c>)
    843c:	9306      	str	r3, [sp, #24]
    843e:	480d      	ldr	r0, [pc, #52]	; (8474 <le_conn_param_neg_reply+0x50>)
    8440:	2302      	movs	r3, #2
    8442:	aa05      	add	r2, sp, #20
    8444:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8448:	9301      	str	r3, [sp, #4]
    844a:	9305      	str	r3, [sp, #20]
    844c:	f01e fd8e 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8450:	b008      	add	sp, #32
    8452:	bd70      	pop	{r4, r5, r6, pc}
    8454:	2103      	movs	r1, #3
    8456:	3008      	adds	r0, #8
    8458:	f021 fa77 	bl	2994a <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    845c:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    845e:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    8460:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    8462:	f242 0021 	movw	r0, #8225	; 0x2021
}
    8466:	b008      	add	sp, #32
    8468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    846c:	f7ff bf3e 	b.w	82ec <bt_hci_cmd_send>
    8470:	0002df3d 	.word	0x0002df3d
    8474:	0002b6bc 	.word	0x0002b6bc

00008478 <le_conn_param_req>:
{
    8478:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    847a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    847c:	78d9      	ldrb	r1, [r3, #3]
    847e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    8480:	881f      	ldrh	r7, [r3, #0]
{
    8482:	b08b      	sub	sp, #44	; 0x2c
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    8484:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8488:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    848c:	7959      	ldrb	r1, [r3, #5]
    848e:	791a      	ldrb	r2, [r3, #4]
    8490:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    8494:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    8498:	799a      	ldrb	r2, [r3, #6]
    849a:	79d9      	ldrb	r1, [r3, #7]
    849c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    84a0:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    84a4:	7a1a      	ldrb	r2, [r3, #8]
    84a6:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    84a8:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    84aa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    84ae:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    84b0:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
    84b4:	f002 fac8 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    84b8:	4606      	mov	r6, r0
    84ba:	b988      	cbnz	r0, 84e0 <le_conn_param_req+0x68>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    84bc:	4b20      	ldr	r3, [pc, #128]	; (8540 <le_conn_param_req+0xc8>)
    84be:	4821      	ldr	r0, [pc, #132]	; (8544 <le_conn_param_req+0xcc>)
    84c0:	e9cd 3408 	strd	r3, r4, [sp, #32]
    84c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    84c8:	2303      	movs	r3, #3
    84ca:	aa07      	add	r2, sp, #28
    84cc:	9301      	str	r3, [sp, #4]
    84ce:	9307      	str	r3, [sp, #28]
    84d0:	f01e fd4c 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    84d4:	2102      	movs	r1, #2
    84d6:	4620      	mov	r0, r4
    84d8:	f7ff ffa4 	bl	8424 <le_conn_param_neg_reply>
}
    84dc:	b00b      	add	sp, #44	; 0x2c
    84de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    84e0:	a902      	add	r1, sp, #8
    84e2:	f002 fc3f 	bl	ad64 <le_param_req>
    84e6:	b938      	cbnz	r0, 84f8 <le_conn_param_req+0x80>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    84e8:	211e      	movs	r1, #30
    84ea:	4620      	mov	r0, r4
    84ec:	f7ff ff9a 	bl	8424 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    84f0:	4630      	mov	r0, r6
    84f2:	f01f f8ea 	bl	276ca <bt_conn_unref>
    84f6:	e7f1      	b.n	84dc <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    84f8:	210e      	movs	r1, #14
    84fa:	f242 0020 	movw	r0, #8224	; 0x2020
    84fe:	f7ff febb 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    8502:	4605      	mov	r5, r0
    8504:	2800      	cmp	r0, #0
    8506:	d0f3      	beq.n	84f0 <le_conn_param_req+0x78>
    8508:	210e      	movs	r1, #14
    850a:	3008      	adds	r0, #8
    850c:	f021 fa1d 	bl	2994a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    8510:	220e      	movs	r2, #14
    8512:	4604      	mov	r4, r0
    8514:	2100      	movs	r1, #0
    8516:	f022 fac1 	bl	2aa9c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    851a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    851e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    8520:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    8524:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    8526:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    852a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    852c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	cp->handle = sys_cpu_to_le16(handle);
    8530:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    8532:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    8534:	4629      	mov	r1, r5
    8536:	f242 0020 	movw	r0, #8224	; 0x2020
    853a:	f7ff fed7 	bl	82ec <bt_hci_cmd_send>
    853e:	e7d7      	b.n	84f0 <le_conn_param_req+0x78>
    8540:	0002dcff 	.word	0x0002dcff
    8544:	0002b6bc 	.word	0x0002b6bc

00008548 <bt_hci_cmd_send_sync>:
{
    8548:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    854c:	b089      	sub	sp, #36	; 0x24
    854e:	4680      	mov	r8, r0
    8550:	af00      	add	r7, sp, #0
    8552:	4615      	mov	r5, r2
	if (!buf) {
    8554:	460c      	mov	r4, r1
    8556:	b921      	cbnz	r1, 8562 <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    8558:	f7ff fe8e 	bl	8278 <bt_hci_cmd_create>
		if (!buf) {
    855c:	4604      	mov	r4, r0
    855e:	2800      	cmp	r0, #0
    8560:	d05e      	beq.n	8620 <bt_hci_cmd_send_sync+0xd8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    8562:	f107 0608 	add.w	r6, r7, #8
    8566:	2201      	movs	r2, #1
    8568:	2100      	movs	r1, #0
    856a:	4630      	mov	r0, r6
    856c:	f021 fe71 	bl	2a252 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    8570:	4620      	mov	r0, r4
    8572:	f017 fb3d 	bl	1fbf0 <net_buf_id>
    8576:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8628 <bt_hci_cmd_send_sync+0xe0>
    857a:	230c      	movs	r3, #12
    857c:	fb03 9000 	mla	r0, r3, r0, r9
    8580:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    8582:	4620      	mov	r0, r4
    8584:	f021 f9af 	bl	298e6 <net_buf_ref>
    8588:	4601      	mov	r1, r0
    858a:	4828      	ldr	r0, [pc, #160]	; (862c <bt_hci_cmd_send_sync+0xe4>)
    858c:	f021 f99e 	bl	298cc <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    8590:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    8594:	4630      	mov	r0, r6
    8596:	2300      	movs	r3, #0
    8598:	f019 ff8c 	bl	224b4 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    859c:	4606      	mov	r6, r0
    859e:	b180      	cbz	r0, 85c2 <bt_hci_cmd_send_sync+0x7a>
    85a0:	4a23      	ldr	r2, [pc, #140]	; (8630 <bt_hci_cmd_send_sync+0xe8>)
    85a2:	4924      	ldr	r1, [pc, #144]	; (8634 <bt_hci_cmd_send_sync+0xec>)
    85a4:	4824      	ldr	r0, [pc, #144]	; (8638 <bt_hci_cmd_send_sync+0xf0>)
    85a6:	f240 1331 	movw	r3, #305	; 0x131
    85aa:	f01c fcac 	bl	24f06 <printk>
    85ae:	4823      	ldr	r0, [pc, #140]	; (863c <bt_hci_cmd_send_sync+0xf4>)
    85b0:	4631      	mov	r1, r6
    85b2:	f01c fca8 	bl	24f06 <printk>
    85b6:	4040      	eors	r0, r0
    85b8:	f380 8811 	msr	BASEPRI, r0
    85bc:	f04f 0003 	mov.w	r0, #3
    85c0:	df02      	svc	2
	status = cmd(buf)->status;
    85c2:	4620      	mov	r0, r4
    85c4:	f017 fb14 	bl	1fbf0 <net_buf_id>
    85c8:	230c      	movs	r3, #12
    85ca:	4358      	muls	r0, r3
    85cc:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    85d0:	b1ee      	cbz	r6, 860e <bt_hci_cmd_send_sync+0xc6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    85d2:	4b1b      	ldr	r3, [pc, #108]	; (8640 <bt_hci_cmd_send_sync+0xf8>)
    85d4:	481b      	ldr	r0, [pc, #108]	; (8644 <bt_hci_cmd_send_sync+0xfc>)
    85d6:	466d      	mov	r5, sp
    85d8:	b088      	sub	sp, #32
    85da:	466a      	mov	r2, sp
    85dc:	e9c2 3804 	strd	r3, r8, [r2, #16]
    85e0:	2304      	movs	r3, #4
    85e2:	6196      	str	r6, [r2, #24]
    85e4:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    85e8:	f842 3f0c 	str.w	r3, [r2, #12]!
    85ec:	607b      	str	r3, [r7, #4]
    85ee:	f01e fcbd 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    85f2:	4620      	mov	r0, r4
    85f4:	46ad      	mov	sp, r5
    85f6:	f017 fbb7 	bl	1fd68 <net_buf_unref>
			return -EIO;
    85fa:	2e09      	cmp	r6, #9
    85fc:	bf0c      	ite	eq
    85fe:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    8602:	f06f 0004 	mvnne.w	r0, #4
}
    8606:	3724      	adds	r7, #36	; 0x24
    8608:	46bd      	mov	sp, r7
    860a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    860e:	b115      	cbz	r5, 8616 <bt_hci_cmd_send_sync+0xce>
		*rsp = buf;
    8610:	602c      	str	r4, [r5, #0]
	return 0;
    8612:	4630      	mov	r0, r6
    8614:	e7f7      	b.n	8606 <bt_hci_cmd_send_sync+0xbe>
		net_buf_unref(buf);
    8616:	4620      	mov	r0, r4
    8618:	f017 fba6 	bl	1fd68 <net_buf_unref>
	return 0;
    861c:	4628      	mov	r0, r5
    861e:	e7f2      	b.n	8606 <bt_hci_cmd_send_sync+0xbe>
			return -ENOBUFS;
    8620:	f06f 0068 	mvn.w	r0, #104	; 0x68
    8624:	e7ef      	b.n	8606 <bt_hci_cmd_send_sync+0xbe>
    8626:	bf00      	nop
    8628:	20001ee8 	.word	0x20001ee8
    862c:	2000013c 	.word	0x2000013c
    8630:	0002de15 	.word	0x0002de15
    8634:	0002de49 	.word	0x0002de49
    8638:	0002de52 	.word	0x0002de52
    863c:	0002df57 	.word	0x0002df57
    8640:	0002df77 	.word	0x0002df77
    8644:	0002b6bc 	.word	0x0002b6bc

00008648 <hci_le_read_max_data_len>:
{
    8648:	b570      	push	{r4, r5, r6, lr}
    864a:	b088      	sub	sp, #32
    864c:	4606      	mov	r6, r0
    864e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    8650:	466a      	mov	r2, sp
    8652:	2100      	movs	r1, #0
    8654:	f242 002f 	movw	r0, #8239	; 0x202f
    8658:	f7ff ff76 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    865c:	4604      	mov	r4, r0
    865e:	b168      	cbz	r0, 867c <hci_le_read_max_data_len+0x34>
		BT_ERR("Failed to read DLE max data len");
    8660:	4b0c      	ldr	r3, [pc, #48]	; (8694 <hci_le_read_max_data_len+0x4c>)
    8662:	9306      	str	r3, [sp, #24]
    8664:	480c      	ldr	r0, [pc, #48]	; (8698 <hci_le_read_max_data_len+0x50>)
    8666:	2302      	movs	r3, #2
    8668:	aa05      	add	r2, sp, #20
    866a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    866e:	9301      	str	r3, [sp, #4]
    8670:	9305      	str	r3, [sp, #20]
    8672:	f01e fc7b 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8676:	4620      	mov	r0, r4
    8678:	b008      	add	sp, #32
    867a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    867c:	9800      	ldr	r0, [sp, #0]
    867e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    8680:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    8684:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    8686:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    868a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    868c:	f017 fb6c 	bl	1fd68 <net_buf_unref>
	return 0;
    8690:	e7f1      	b.n	8676 <hci_le_read_max_data_len+0x2e>
    8692:	bf00      	nop
    8694:	0002df93 	.word	0x0002df93
    8698:	0002b6bc 	.word	0x0002b6bc

0000869c <bt_le_create_conn_legacy>:
{
    869c:	b5f0      	push	{r4, r5, r6, r7, lr}
    869e:	b087      	sub	sp, #28
    86a0:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    86a2:	f10d 010b 	add.w	r1, sp, #11
    86a6:	2000      	movs	r0, #0
    86a8:	f001 f884 	bl	97b4 <bt_id_set_create_conn_own_addr>
	if (err) {
    86ac:	4605      	mov	r5, r0
    86ae:	2800      	cmp	r0, #0
    86b0:	d145      	bne.n	873e <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    86b2:	2119      	movs	r1, #25
    86b4:	f242 000d 	movw	r0, #8205	; 0x200d
    86b8:	f7ff fdde 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    86bc:	4607      	mov	r7, r0
    86be:	2800      	cmp	r0, #0
    86c0:	d043      	beq.n	874a <bt_le_create_conn_legacy+0xae>
    86c2:	2119      	movs	r1, #25
    86c4:	3008      	adds	r0, #8
    86c6:	f021 f940 	bl	2994a <net_buf_simple_add>
    86ca:	2219      	movs	r2, #25
    86cc:	4604      	mov	r4, r0
    86ce:	4629      	mov	r1, r5
    86d0:	f022 f9e4 	bl	2aa9c <memset>
	cp->own_addr_type = own_addr_type;
    86d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
		if (!bt_dev.le.rl_size ||
    86d8:	4a1d      	ldr	r2, [pc, #116]	; (8750 <bt_le_create_conn_legacy+0xb4>)
	cp->own_addr_type = own_addr_type;
    86da:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    86dc:	f892 3118 	ldrb.w	r3, [r2, #280]	; 0x118
    86e0:	b383      	cbz	r3, 8744 <bt_le_create_conn_legacy+0xa8>
    86e2:	f892 1119 	ldrb.w	r1, [r2, #281]	; 0x119
    86e6:	4299      	cmp	r1, r3
    86e8:	d82c      	bhi.n	8744 <bt_le_create_conn_legacy+0xa8>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    86ea:	f106 0188 	add.w	r1, r6, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    86ee:	2500      	movs	r5, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    86f0:	1d60      	adds	r0, r4, #5
    86f2:	f01e fc2f 	bl	26f54 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    86f6:	7125      	strb	r5, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    86f8:	8993      	ldrh	r3, [r2, #12]
    86fa:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    86fc:	89d3      	ldrh	r3, [r2, #14]
    86fe:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    8700:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    8704:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    8708:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    870c:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    8710:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    8714:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    8718:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    871c:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    8720:	2301      	movs	r3, #1
    8722:	4a0c      	ldr	r2, [pc, #48]	; (8754 <bt_le_create_conn_legacy+0xb8>)
    8724:	9300      	str	r3, [sp, #0]
    8726:	a903      	add	r1, sp, #12
    8728:	230b      	movs	r3, #11
    872a:	4638      	mov	r0, r7
    872c:	f7ff fd92 	bl	8254 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    8730:	462a      	mov	r2, r5
    8732:	4639      	mov	r1, r7
    8734:	f242 000d 	movw	r0, #8205	; 0x200d
    8738:	f7ff ff06 	bl	8548 <bt_hci_cmd_send_sync>
    873c:	4605      	mov	r5, r0
}
    873e:	4628      	mov	r0, r5
    8740:	b007      	add	sp, #28
    8742:	bdf0      	pop	{r4, r5, r6, r7, pc}
			peer_addr = &conn->le.resp_addr;
    8744:	f106 0196 	add.w	r1, r6, #150	; 0x96
    8748:	e7d1      	b.n	86ee <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    874a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    874e:	e7f6      	b.n	873e <bt_le_create_conn_legacy+0xa2>
    8750:	20000000 	.word	0x20000000
    8754:	200000cc 	.word	0x200000cc

00008758 <bt_le_create_conn_cancel>:
{
    8758:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    875a:	2100      	movs	r1, #0
{
    875c:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    875e:	f242 000e 	movw	r0, #8206	; 0x200e
    8762:	f7ff fd89 	bl	8278 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    8766:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    8768:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    876a:	230b      	movs	r3, #11
    876c:	a903      	add	r1, sp, #12
    876e:	4a06      	ldr	r2, [pc, #24]	; (8788 <bt_le_create_conn_cancel+0x30>)
    8770:	9500      	str	r5, [sp, #0]
    8772:	f7ff fd6f 	bl	8254 <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    8776:	462a      	mov	r2, r5
    8778:	4621      	mov	r1, r4
    877a:	f242 000e 	movw	r0, #8206	; 0x200e
    877e:	f7ff fee3 	bl	8548 <bt_hci_cmd_send_sync>
}
    8782:	b007      	add	sp, #28
    8784:	bd30      	pop	{r4, r5, pc}
    8786:	bf00      	nop
    8788:	200000cc 	.word	0x200000cc

0000878c <conn_auto_initiate>:
{
    878c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    878e:	7b43      	ldrb	r3, [r0, #13]
    8790:	2b07      	cmp	r3, #7
{
    8792:	b08a      	sub	sp, #40	; 0x28
    8794:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8796:	d170      	bne.n	887a <conn_auto_initiate+0xee>
    8798:	f3bf 8f5b 	dmb	ish
    879c:	6843      	ldr	r3, [r0, #4]
    879e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    87a2:	049b      	lsls	r3, r3, #18
    87a4:	f100 0604 	add.w	r6, r0, #4
    87a8:	d41b      	bmi.n	87e2 <conn_auto_initiate+0x56>
    87aa:	78c3      	ldrb	r3, [r0, #3]
    87ac:	b123      	cbz	r3, 87b8 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    87ae:	4b34      	ldr	r3, [pc, #208]	; (8880 <conn_auto_initiate+0xf4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    87b0:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    87b4:	071d      	lsls	r5, r3, #28
    87b6:	d514      	bpl.n	87e2 <conn_auto_initiate+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    87b8:	2102      	movs	r1, #2
    87ba:	f242 0016 	movw	r0, #8214	; 0x2016
    87be:	f7ff fd5b 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    87c2:	4605      	mov	r5, r0
    87c4:	b168      	cbz	r0, 87e2 <conn_auto_initiate+0x56>
    87c6:	2102      	movs	r1, #2
    87c8:	3008      	adds	r0, #8
    87ca:	f021 f8be 	bl	2994a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    87ce:	8823      	ldrh	r3, [r4, #0]
    87d0:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87d2:	4629      	mov	r1, r5
    87d4:	f242 0016 	movw	r0, #8214	; 0x2016
}
    87d8:	b00a      	add	sp, #40	; 0x28
    87da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    87de:	f7ff bd85 	b.w	82ec <bt_hci_cmd_send>
    87e2:	f3bf 8f5b 	dmb	ish
    87e6:	6863      	ldr	r3, [r4, #4]
    87e8:	4d25      	ldr	r5, [pc, #148]	; (8880 <conn_auto_initiate+0xf4>)
    87ea:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    87ee:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    87f2:	f3c3 3100 	ubfx	r1, r3, #12, #1
    87f6:	d11d      	bne.n	8834 <conn_auto_initiate+0xa8>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    87f8:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    87fc:	07d8      	lsls	r0, r3, #31
    87fe:	d519      	bpl.n	8834 <conn_auto_initiate+0xa8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    8800:	2302      	movs	r3, #2
    8802:	9100      	str	r1, [sp, #0]
    8804:	461a      	mov	r2, r3
    8806:	4620      	mov	r0, r4
    8808:	f01e fc0b 	bl	27022 <bt_le_set_phy>
		if (!err) {
    880c:	b930      	cbnz	r0, 881c <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    880e:	2180      	movs	r1, #128	; 0x80
    8810:	4630      	mov	r0, r6
}
    8812:	b00a      	add	sp, #40	; 0x28
    8814:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8818:	f01e bb8d 	b.w	26f36 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    881c:	4b19      	ldr	r3, [pc, #100]	; (8884 <conn_auto_initiate+0xf8>)
    881e:	aa07      	add	r2, sp, #28
    8820:	e9cd 3008 	strd	r3, r0, [sp, #32]
    8824:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8828:	2303      	movs	r3, #3
    882a:	4817      	ldr	r0, [pc, #92]	; (8888 <conn_auto_initiate+0xfc>)
    882c:	9303      	str	r3, [sp, #12]
    882e:	9307      	str	r3, [sp, #28]
    8830:	f01e fb9c 	bl	26f6c <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8834:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    8838:	069a      	lsls	r2, r3, #26
    883a:	d51e      	bpl.n	887a <conn_auto_initiate+0xee>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    883c:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    8840:	689b      	ldr	r3, [r3, #8]
    8842:	079b      	lsls	r3, r3, #30
    8844:	d519      	bpl.n	887a <conn_auto_initiate+0xee>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    8846:	f10d 010a 	add.w	r1, sp, #10
    884a:	a802      	add	r0, sp, #8
    884c:	f7ff fefc 	bl	8648 <hci_le_read_max_data_len>
			if (!err) {
    8850:	b998      	cbnz	r0, 887a <conn_auto_initiate+0xee>
				err = bt_le_set_data_len(conn,
    8852:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    8856:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    885a:	4620      	mov	r0, r4
    885c:	f01e fbc4 	bl	26fe8 <bt_le_set_data_len>
				if (err) {
    8860:	b158      	cbz	r0, 887a <conn_auto_initiate+0xee>
					BT_ERR("Failed to set data len (%d)", err);
    8862:	4b0a      	ldr	r3, [pc, #40]	; (888c <conn_auto_initiate+0x100>)
    8864:	aa07      	add	r2, sp, #28
    8866:	e9cd 3008 	strd	r3, r0, [sp, #32]
    886a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    886e:	2303      	movs	r3, #3
    8870:	4805      	ldr	r0, [pc, #20]	; (8888 <conn_auto_initiate+0xfc>)
    8872:	9303      	str	r3, [sp, #12]
    8874:	9307      	str	r3, [sp, #28]
    8876:	f01e fb79 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    887a:	b00a      	add	sp, #40	; 0x28
    887c:	bd70      	pop	{r4, r5, r6, pc}
    887e:	bf00      	nop
    8880:	20000000 	.word	0x20000000
    8884:	0002dfb3 	.word	0x0002dfb3
    8888:	0002b6bc 	.word	0x0002b6bc
    888c:	0002dfcd 	.word	0x0002dfcd

00008890 <le_phy_update_complete>:
{
    8890:	b530      	push	{r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8892:	6883      	ldr	r3, [r0, #8]
    8894:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    8898:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    889a:	4628      	mov	r0, r5
    889c:	f002 f8d4 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    88a0:	4604      	mov	r4, r0
    88a2:	b968      	cbnz	r0, 88c0 <le_phy_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    88a4:	4b11      	ldr	r3, [pc, #68]	; (88ec <le_phy_update_complete+0x5c>)
    88a6:	4812      	ldr	r0, [pc, #72]	; (88f0 <le_phy_update_complete+0x60>)
    88a8:	e9cd 3506 	strd	r3, r5, [sp, #24]
    88ac:	aa05      	add	r2, sp, #20
    88ae:	2303      	movs	r3, #3
    88b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    88b4:	9301      	str	r3, [sp, #4]
    88b6:	9305      	str	r3, [sp, #20]
    88b8:	f01e fb58 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    88bc:	b009      	add	sp, #36	; 0x24
    88be:	bd30      	pop	{r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    88c0:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    88c2:	f06f 0180 	mvn.w	r1, #128	; 0x80
    88c6:	4628      	mov	r0, r5
    88c8:	f01e fb26 	bl	26f18 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    88cc:	0603      	lsls	r3, r0, #24
    88ce:	d507      	bpl.n	88e0 <le_phy_update_complete+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    88d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    88d4:	4628      	mov	r0, r5
    88d6:	f01e fb2e 	bl	26f36 <atomic_or>
		conn_auto_initiate(conn);
    88da:	4620      	mov	r0, r4
    88dc:	f7ff ff56 	bl	878c <conn_auto_initiate>
	bt_conn_unref(conn);
    88e0:	4620      	mov	r0, r4
}
    88e2:	b009      	add	sp, #36	; 0x24
    88e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    88e8:	f01e beef 	b.w	276ca <bt_conn_unref>
    88ec:	0002dcff 	.word	0x0002dcff
    88f0:	0002b6bc 	.word	0x0002b6bc

000088f4 <le_remote_feat_complete>:
{
    88f4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    88f6:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    88f8:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    88fc:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    88fe:	4630      	mov	r0, r6
    8900:	f002 f8a2 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    8904:	4604      	mov	r4, r0
    8906:	b968      	cbnz	r0, 8924 <le_remote_feat_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8908:	4b12      	ldr	r3, [pc, #72]	; (8954 <le_remote_feat_complete+0x60>)
    890a:	4813      	ldr	r0, [pc, #76]	; (8958 <le_remote_feat_complete+0x64>)
    890c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    8910:	aa05      	add	r2, sp, #20
    8912:	2303      	movs	r3, #3
    8914:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8918:	9301      	str	r3, [sp, #4]
    891a:	9305      	str	r3, [sp, #20]
    891c:	f01e fb26 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8920:	b008      	add	sp, #32
    8922:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    8924:	782b      	ldrb	r3, [r5, #0]
    8926:	b93b      	cbnz	r3, 8938 <le_remote_feat_complete+0x44>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    8928:	f8d5 3003 	ldr.w	r3, [r5, #3]
    892c:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    8930:	f8d5 3007 	ldr.w	r3, [r5, #7]
    8934:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    8938:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    893c:	1d20      	adds	r0, r4, #4
    893e:	f01e fafa 	bl	26f36 <atomic_or>
	conn_auto_initiate(conn);
    8942:	4620      	mov	r0, r4
    8944:	f7ff ff22 	bl	878c <conn_auto_initiate>
	bt_conn_unref(conn);
    8948:	4620      	mov	r0, r4
}
    894a:	b008      	add	sp, #32
    894c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8950:	f01e bebb 	b.w	276ca <bt_conn_unref>
    8954:	0002dcff 	.word	0x0002dcff
    8958:	0002b6bc 	.word	0x0002b6bc

0000895c <bt_hci_le_enh_conn_complete>:
{
    895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8960:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    8964:	4a97      	ldr	r2, [pc, #604]	; (8bc4 <bt_hci_le_enh_conn_complete+0x268>)
	handle |= ~BT_ACL_HANDLE_MASK;
    8966:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    896a:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    896c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    8970:	b29b      	uxth	r3, r3
    8972:	4299      	cmp	r1, r3
{
    8974:	4605      	mov	r5, r0
    8976:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    897a:	bf08      	it	eq
    897c:	8016      	strheq	r6, [r2, #0]
{
    897e:	b08c      	sub	sp, #48	; 0x30
			return true;
    8980:	bf08      	it	eq
    8982:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    8984:	f000 fcf8 	bl	9378 <bt_id_pending_keys_update>
	if (evt->status) {
    8988:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    898a:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    898e:	2c00      	cmp	r4, #0
    8990:	d059      	beq.n	8a46 <bt_hci_le_enh_conn_complete+0xea>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8992:	2c3c      	cmp	r4, #60	; 0x3c
    8994:	d121      	bne.n	89da <bt_hci_le_enh_conn_complete+0x7e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8996:	f001 f8e5 	bl	9b64 <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    899a:	f06f 0140 	mvn.w	r1, #64	; 0x40
    899e:	3010      	adds	r0, #16
    89a0:	f01e faba 	bl	26f18 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    89a4:	2000      	movs	r0, #0
    89a6:	f7ff f8c5 	bl	7b34 <find_pending_connect.part.0>
		if (!conn) {
    89aa:	4605      	mov	r5, r0
    89ac:	b958      	cbnz	r0, 89c6 <bt_hci_le_enh_conn_complete+0x6a>
			BT_ERR("No pending peripheral connection");
    89ae:	4b86      	ldr	r3, [pc, #536]	; (8bc8 <bt_hci_le_enh_conn_complete+0x26c>)
    89b0:	930a      	str	r3, [sp, #40]	; 0x28
    89b2:	2302      	movs	r3, #2
    89b4:	9304      	str	r3, [sp, #16]
    89b6:	9309      	str	r3, [sp, #36]	; 0x24
    89b8:	aa09      	add	r2, sp, #36	; 0x24
    89ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Unexpected status 0x%02x", evt->status);
    89be:	4883      	ldr	r0, [pc, #524]	; (8bcc <bt_hci_le_enh_conn_complete+0x270>)
    89c0:	f01e fad4 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		return;
    89c4:	e01f      	b.n	8a06 <bt_hci_le_enh_conn_complete+0xaa>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    89c6:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    89c8:	2100      	movs	r1, #0
    89ca:	f002 f845 	bl	aa58 <bt_conn_set_state>
		bt_conn_unref(conn);
    89ce:	4628      	mov	r0, r5
}
    89d0:	b00c      	add	sp, #48	; 0x30
    89d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
    89d6:	f01e be78 	b.w	276ca <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    89da:	2c02      	cmp	r4, #2
    89dc:	d129      	bne.n	8a32 <bt_hci_le_enh_conn_complete+0xd6>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    89de:	2100      	movs	r1, #0
    89e0:	2206      	movs	r2, #6
    89e2:	4608      	mov	r0, r1
    89e4:	f002 fab2 	bl	af4c <bt_conn_lookup_state_le>
	if (!conn) {
    89e8:	4605      	mov	r5, r0
    89ea:	b978      	cbnz	r0, 8a0c <bt_hci_le_enh_conn_complete+0xb0>
		BT_ERR("No pending central connection");
    89ec:	4b78      	ldr	r3, [pc, #480]	; (8bd0 <bt_hci_le_enh_conn_complete+0x274>)
    89ee:	4877      	ldr	r0, [pc, #476]	; (8bcc <bt_hci_le_enh_conn_complete+0x270>)
    89f0:	930a      	str	r3, [sp, #40]	; 0x28
    89f2:	aa09      	add	r2, sp, #36	; 0x24
    89f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    89f8:	9404      	str	r4, [sp, #16]
    89fa:	9409      	str	r4, [sp, #36]	; 0x24
    89fc:	f01e fab6 	bl	26f6c <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    8a00:	2000      	movs	r0, #0
    8a02:	f001 fb57 	bl	a0b4 <bt_le_scan_update>
}
    8a06:	b00c      	add	sp, #48	; 0x30
    8a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    8a0c:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8a0e:	2100      	movs	r1, #0
    8a10:	f002 f822 	bl	aa58 <bt_conn_set_state>
    8a14:	f3bf 8f5b 	dmb	ish
    8a18:	686b      	ldr	r3, [r5, #4]
    8a1a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8a1e:	07da      	lsls	r2, r3, #31
    8a20:	d503      	bpl.n	8a2a <bt_hci_le_enh_conn_complete+0xce>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8a22:	4621      	mov	r1, r4
    8a24:	4628      	mov	r0, r5
    8a26:	f002 f817 	bl	aa58 <bt_conn_set_state>
	bt_conn_unref(conn);
    8a2a:	4628      	mov	r0, r5
    8a2c:	f01e fe4d 	bl	276ca <bt_conn_unref>
    8a30:	e7e6      	b.n	8a00 <bt_hci_le_enh_conn_complete+0xa4>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    8a32:	4b68      	ldr	r3, [pc, #416]	; (8bd4 <bt_hci_le_enh_conn_complete+0x278>)
    8a34:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    8a38:	2303      	movs	r3, #3
    8a3a:	9304      	str	r3, [sp, #16]
    8a3c:	9309      	str	r3, [sp, #36]	; 0x24
    8a3e:	aa09      	add	r2, sp, #36	; 0x24
    8a40:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8a44:	e7bb      	b.n	89be <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8a46:	792b      	ldrb	r3, [r5, #4]
    8a48:	3b02      	subs	r3, #2
    8a4a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    8a4c:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    8a50:	d841      	bhi.n	8ad6 <bt_hci_le_enh_conn_complete+0x17a>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    8a52:	4649      	mov	r1, r9
    8a54:	a806      	add	r0, sp, #24
    8a56:	f01e fa7d 	bl	26f54 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8a5a:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8a5e:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8a62:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8a64:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    8a68:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    8a6c:	f01e fa79 	bl	26f62 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    8a70:	2301      	movs	r3, #1
    8a72:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = find_pending_connect(evt->role, &id_addr);
    8a76:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    8a78:	2800      	cmp	r0, #0
    8a7a:	d13f      	bne.n	8afc <bt_hci_le_enh_conn_complete+0x1a0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    8a7c:	2206      	movs	r2, #6
    8a7e:	a906      	add	r1, sp, #24
    8a80:	f002 fa64 	bl	af4c <bt_conn_lookup_state_le>
    8a84:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8a86:	78eb      	ldrb	r3, [r5, #3]
    8a88:	2b01      	cmp	r3, #1
    8a8a:	d10a      	bne.n	8aa2 <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8a8c:	f001 f86a 	bl	9b64 <bt_le_adv_lookup_legacy>
    8a90:	f06f 0140 	mvn.w	r1, #64	; 0x40
    8a94:	4682      	mov	sl, r0
    8a96:	3010      	adds	r0, #16
    8a98:	f01e fa3e 	bl	26f18 <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    8a9c:	4650      	mov	r0, sl
    8a9e:	f01e fd54 	bl	2754a <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8aa2:	78eb      	ldrb	r3, [r5, #3]
    8aa4:	b923      	cbnz	r3, 8ab0 <bt_hci_le_enh_conn_complete+0x154>
    8aa6:	484c      	ldr	r0, [pc, #304]	; (8bd8 <bt_hci_le_enh_conn_complete+0x27c>)
    8aa8:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    8aac:	f01e fa34 	bl	26f18 <atomic_and>
	if (!conn) {
    8ab0:	bb64      	cbnz	r4, 8b0c <bt_hci_le_enh_conn_complete+0x1b0>
		BT_ERR("No pending conn for peer %s",
    8ab2:	4648      	mov	r0, r9
    8ab4:	f7fe fd84 	bl	75c0 <bt_addr_le_str_real>
    8ab8:	4b48      	ldr	r3, [pc, #288]	; (8bdc <bt_hci_le_enh_conn_complete+0x280>)
    8aba:	9002      	str	r0, [sp, #8]
    8abc:	e9cd 4300 	strd	r4, r3, [sp]
    8ac0:	4620      	mov	r0, r4
    8ac2:	4942      	ldr	r1, [pc, #264]	; (8bcc <bt_hci_le_enh_conn_complete+0x270>)
    8ac4:	4623      	mov	r3, r4
    8ac6:	2201      	movs	r2, #1
    8ac8:	f01e fa53 	bl	26f72 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    8acc:	211f      	movs	r1, #31
    8ace:	4640      	mov	r0, r8
    8ad0:	f01e fa6f 	bl	26fb2 <bt_hci_disconnect>
		return;
    8ad4:	e797      	b.n	8a06 <bt_hci_le_enh_conn_complete+0xaa>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    8ad6:	78eb      	ldrb	r3, [r5, #3]
    8ad8:	2b01      	cmp	r3, #1
    8ada:	bf04      	itt	eq
    8adc:	4b40      	ldreq	r3, [pc, #256]	; (8be0 <bt_hci_le_enh_conn_complete+0x284>)
    8ade:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    8ae2:	4649      	mov	r1, r9
    8ae4:	4620      	mov	r0, r4
    8ae6:	f01e fbfb 	bl	272e0 <bt_lookup_id_addr>
    8aea:	4601      	mov	r1, r0
    8aec:	a806      	add	r0, sp, #24
    8aee:	f01e fa31 	bl	26f54 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    8af2:	4649      	mov	r1, r9
    8af4:	a804      	add	r0, sp, #16
    8af6:	f01e fa2d 	bl	26f54 <bt_addr_le_copy>
    8afa:	e7bc      	b.n	8a76 <bt_hci_le_enh_conn_complete+0x11a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    8afc:	2801      	cmp	r0, #1
    8afe:	d103      	bne.n	8b08 <bt_hci_le_enh_conn_complete+0x1ac>
    8b00:	a806      	add	r0, sp, #24
    8b02:	f7ff f817 	bl	7b34 <find_pending_connect.part.0>
    8b06:	e7bd      	b.n	8a84 <bt_hci_le_enh_conn_complete+0x128>
	return NULL;
    8b08:	2400      	movs	r4, #0
    8b0a:	e7bc      	b.n	8a86 <bt_hci_le_enh_conn_complete+0x12a>
	conn->handle = handle;
    8b0c:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8b0e:	a906      	add	r1, sp, #24
	conn->handle = handle;
    8b10:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    8b14:	f01e fa1e 	bl	26f54 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    8b18:	7e2a      	ldrb	r2, [r5, #24]
    8b1a:	7deb      	ldrb	r3, [r5, #23]
    8b1c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b20:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    8b24:	7eaa      	ldrb	r2, [r5, #26]
    8b26:	7e6b      	ldrb	r3, [r5, #25]
    8b28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b2c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8b30:	7f2a      	ldrb	r2, [r5, #28]
    8b32:	7eeb      	ldrb	r3, [r5, #27]
    8b34:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8b38:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    8b3c:	78eb      	ldrb	r3, [r5, #3]
    8b3e:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    8b40:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8b42:	2b01      	cmp	r3, #1
	conn->err = 0U;
    8b44:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8b46:	d115      	bne.n	8b74 <bt_hci_le_enh_conn_complete+0x218>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    8b48:	a904      	add	r1, sp, #16
    8b4a:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    8b4e:	f01e fa01 	bl	26f54 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    8b52:	f001 f807 	bl	9b64 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    8b56:	7a21      	ldrb	r1, [r4, #8]
    8b58:	4a21      	ldr	r2, [pc, #132]	; (8be0 <bt_hci_le_enh_conn_complete+0x284>)
    8b5a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    8b5e:	4411      	add	r1, r2
    8b60:	f104 0096 	add.w	r0, r4, #150	; 0x96
    8b64:	f01e f9f6 	bl	26f54 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    8b68:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    8b6c:	065b      	lsls	r3, r3, #25
    8b6e:	d501      	bpl.n	8b74 <bt_hci_le_enh_conn_complete+0x218>
			bt_le_adv_resume();
    8b70:	f001 f9d4 	bl	9f1c <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8b74:	78e3      	ldrb	r3, [r4, #3]
    8b76:	b96b      	cbnz	r3, 8b94 <bt_hci_le_enh_conn_complete+0x238>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    8b78:	a904      	add	r1, sp, #16
    8b7a:	f104 0096 	add.w	r0, r4, #150	; 0x96
    8b7e:	f01e f9e9 	bl	26f54 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    8b82:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    8b84:	4b16      	ldr	r3, [pc, #88]	; (8be0 <bt_hci_le_enh_conn_complete+0x284>)
					&bt_dev.id_addr[conn->id]);
    8b86:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    8b8a:	4419      	add	r1, r3
    8b8c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    8b90:	f01e f9e0 	bl	26f54 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    8b94:	2107      	movs	r1, #7
    8b96:	4620      	mov	r0, r4
    8b98:	f001 ff5e 	bl	aa58 <bt_conn_set_state>
	if (is_disconnected) {
    8b9c:	b11e      	cbz	r6, 8ba6 <bt_hci_le_enh_conn_complete+0x24a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8b9e:	2101      	movs	r1, #1
    8ba0:	4620      	mov	r0, r4
    8ba2:	f001 ff59 	bl	aa58 <bt_conn_set_state>
	bt_conn_connected(conn);
    8ba6:	4620      	mov	r0, r4
    8ba8:	f01e fdca 	bl	27740 <bt_conn_connected>
	conn_auto_initiate(conn);
    8bac:	4620      	mov	r0, r4
    8bae:	f7ff fded 	bl	878c <conn_auto_initiate>
	bt_conn_unref(conn);
    8bb2:	4620      	mov	r0, r4
    8bb4:	f01e fd89 	bl	276ca <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    8bb8:	78e3      	ldrb	r3, [r4, #3]
    8bba:	2b00      	cmp	r3, #0
    8bbc:	f47f af23 	bne.w	8a06 <bt_hci_le_enh_conn_complete+0xaa>
    8bc0:	e71e      	b.n	8a00 <bt_hci_le_enh_conn_complete+0xa4>
    8bc2:	bf00      	nop
    8bc4:	200033e6 	.word	0x200033e6
    8bc8:	0002dfe9 	.word	0x0002dfe9
    8bcc:	0002b6bc 	.word	0x0002b6bc
    8bd0:	0002e00a 	.word	0x0002e00a
    8bd4:	0002e028 	.word	0x0002e028
    8bd8:	200000cc 	.word	0x200000cc
    8bdc:	0002e041 	.word	0x0002e041
    8be0:	20000000 	.word	0x20000000

00008be4 <bt_security_err_get>:
	switch (hci_err) {
    8be4:	2829      	cmp	r0, #41	; 0x29
    8be6:	bf9a      	itte	ls
    8be8:	4b01      	ldrls	r3, [pc, #4]	; (8bf0 <bt_security_err_get+0xc>)
    8bea:	5c18      	ldrbls	r0, [r3, r0]
{
    8bec:	2009      	movhi	r0, #9
}
    8bee:	4770      	bx	lr
    8bf0:	0002e26b 	.word	0x0002e26b

00008bf4 <hci_encrypt_key_refresh_complete>:
{
    8bf4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    8bf6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8bf8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    8bfc:	781d      	ldrb	r5, [r3, #0]
{
    8bfe:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    8c00:	4630      	mov	r0, r6
    8c02:	f001 ff21 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    8c06:	4604      	mov	r4, r0
    8c08:	b968      	cbnz	r0, 8c26 <hci_encrypt_key_refresh_complete+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8c0a:	4b21      	ldr	r3, [pc, #132]	; (8c90 <hci_encrypt_key_refresh_complete+0x9c>)
    8c0c:	4821      	ldr	r0, [pc, #132]	; (8c94 <hci_encrypt_key_refresh_complete+0xa0>)
    8c0e:	e9cd 3606 	strd	r3, r6, [sp, #24]
    8c12:	aa05      	add	r2, sp, #20
    8c14:	2303      	movs	r3, #3
    8c16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8c1a:	9301      	str	r3, [sp, #4]
    8c1c:	9305      	str	r3, [sp, #20]
    8c1e:	f01e f9a5 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8c22:	b008      	add	sp, #32
    8c24:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
    8c26:	b16d      	cbz	r5, 8c44 <hci_encrypt_key_refresh_complete+0x50>
		bt_conn_security_changed(conn, status,
    8c28:	4628      	mov	r0, r5
    8c2a:	f7ff ffdb 	bl	8be4 <bt_security_err_get>
    8c2e:	4629      	mov	r1, r5
    8c30:	4602      	mov	r2, r0
    8c32:	4620      	mov	r0, r4
    8c34:	f002 f8fe 	bl	ae34 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8c38:	4620      	mov	r0, r4
}
    8c3a:	b008      	add	sp, #32
    8c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8c40:	f01e bd43 	b.w	276ca <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8c44:	7883      	ldrb	r3, [r0, #2]
    8c46:	2b01      	cmp	r3, #1
    8c48:	d107      	bne.n	8c5a <hci_encrypt_key_refresh_complete+0x66>
		bt_smp_update_keys(conn);
    8c4a:	f007 f8af 	bl	fdac <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    8c4e:	4620      	mov	r0, r4
    8c50:	f01e f94a 	bl	26ee8 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    8c54:	2800      	cmp	r0, #0
    8c56:	bf08      	it	eq
    8c58:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    8c5a:	4628      	mov	r0, r5
    8c5c:	f7ff ffc2 	bl	8be4 <bt_security_err_get>
    8c60:	4629      	mov	r1, r5
    8c62:	4602      	mov	r2, r0
    8c64:	4620      	mov	r0, r4
    8c66:	f002 f8e5 	bl	ae34 <bt_conn_security_changed>
	if (status) {
    8c6a:	2d00      	cmp	r5, #0
    8c6c:	d0e4      	beq.n	8c38 <hci_encrypt_key_refresh_complete+0x44>
		BT_ERR("Failed to set required security level");
    8c6e:	4b0a      	ldr	r3, [pc, #40]	; (8c98 <hci_encrypt_key_refresh_complete+0xa4>)
    8c70:	9306      	str	r3, [sp, #24]
    8c72:	4808      	ldr	r0, [pc, #32]	; (8c94 <hci_encrypt_key_refresh_complete+0xa0>)
    8c74:	2302      	movs	r3, #2
    8c76:	aa05      	add	r2, sp, #20
    8c78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8c7c:	9301      	str	r3, [sp, #4]
    8c7e:	9305      	str	r3, [sp, #20]
    8c80:	f01e f974 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    8c84:	4629      	mov	r1, r5
    8c86:	4620      	mov	r0, r4
    8c88:	f01e fde9 	bl	2785e <bt_conn_disconnect>
    8c8c:	e7d4      	b.n	8c38 <hci_encrypt_key_refresh_complete+0x44>
    8c8e:	bf00      	nop
    8c90:	0002df00 	.word	0x0002df00
    8c94:	0002b6bc 	.word	0x0002b6bc
    8c98:	0002e05d 	.word	0x0002e05d

00008c9c <hci_encrypt_change>:
{
    8c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    8c9e:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8ca0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    8ca4:	7835      	ldrb	r5, [r6, #0]
{
    8ca6:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    8ca8:	4638      	mov	r0, r7
    8caa:	f001 fecd 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    8cae:	4604      	mov	r4, r0
    8cb0:	b968      	cbnz	r0, 8cce <hci_encrypt_change+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8cb2:	4b22      	ldr	r3, [pc, #136]	; (8d3c <hci_encrypt_change+0xa0>)
    8cb4:	4822      	ldr	r0, [pc, #136]	; (8d40 <hci_encrypt_change+0xa4>)
    8cb6:	e9cd 3706 	strd	r3, r7, [sp, #24]
    8cba:	aa05      	add	r2, sp, #20
    8cbc:	2303      	movs	r3, #3
    8cbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8cc2:	9301      	str	r3, [sp, #4]
    8cc4:	9305      	str	r3, [sp, #20]
    8cc6:	f01e f951 	bl	26f6c <z_log_msg2_static_create.constprop.0>
}
    8cca:	b009      	add	sp, #36	; 0x24
    8ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    8cce:	b16d      	cbz	r5, 8cec <hci_encrypt_change+0x50>
		bt_conn_security_changed(conn, status,
    8cd0:	4628      	mov	r0, r5
    8cd2:	f7ff ff87 	bl	8be4 <bt_security_err_get>
    8cd6:	4629      	mov	r1, r5
    8cd8:	4602      	mov	r2, r0
    8cda:	4620      	mov	r0, r4
    8cdc:	f002 f8aa 	bl	ae34 <bt_conn_security_changed>
	bt_conn_unref(conn);
    8ce0:	4620      	mov	r0, r4
}
    8ce2:	b009      	add	sp, #36	; 0x24
    8ce4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8ce8:	f01e bcef 	b.w	276ca <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    8cec:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    8cee:	78f3      	ldrb	r3, [r6, #3]
    8cf0:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    8cf2:	2a01      	cmp	r2, #1
    8cf4:	d108      	bne.n	8d08 <hci_encrypt_change+0x6c>
		if (conn->encrypt) {
    8cf6:	b10b      	cbz	r3, 8cfc <hci_encrypt_change+0x60>
			bt_smp_update_keys(conn);
    8cf8:	f007 f858 	bl	fdac <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    8cfc:	4620      	mov	r0, r4
    8cfe:	f01e f8f3 	bl	26ee8 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    8d02:	2800      	cmp	r0, #0
    8d04:	bf08      	it	eq
    8d06:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    8d08:	4628      	mov	r0, r5
    8d0a:	f7ff ff6b 	bl	8be4 <bt_security_err_get>
    8d0e:	4629      	mov	r1, r5
    8d10:	4602      	mov	r2, r0
    8d12:	4620      	mov	r0, r4
    8d14:	f002 f88e 	bl	ae34 <bt_conn_security_changed>
	if (status) {
    8d18:	2d00      	cmp	r5, #0
    8d1a:	d0e1      	beq.n	8ce0 <hci_encrypt_change+0x44>
		BT_ERR("Failed to set required security level");
    8d1c:	4b09      	ldr	r3, [pc, #36]	; (8d44 <hci_encrypt_change+0xa8>)
    8d1e:	9306      	str	r3, [sp, #24]
    8d20:	4807      	ldr	r0, [pc, #28]	; (8d40 <hci_encrypt_change+0xa4>)
    8d22:	2302      	movs	r3, #2
    8d24:	aa05      	add	r2, sp, #20
    8d26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8d2a:	9301      	str	r3, [sp, #4]
    8d2c:	9305      	str	r3, [sp, #20]
    8d2e:	f01e f91d 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    8d32:	4629      	mov	r1, r5
    8d34:	4620      	mov	r0, r4
    8d36:	f01e fd92 	bl	2785e <bt_conn_disconnect>
    8d3a:	e7d1      	b.n	8ce0 <hci_encrypt_change+0x44>
    8d3c:	0002df00 	.word	0x0002df00
    8d40:	0002b6bc 	.word	0x0002b6bc
    8d44:	0002e05d 	.word	0x0002e05d

00008d48 <hci_event_prio>:
{
    8d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d4c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8d4e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    8d52:	4630      	mov	r0, r6
    8d54:	f020 fe42 	bl	299dc <net_buf_simple_headroom>
	state->len = buf->len;
    8d58:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8d5c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    8d60:	4605      	mov	r5, r0
    8d62:	d80c      	bhi.n	8d7e <hci_event_prio+0x36>
    8d64:	4a1c      	ldr	r2, [pc, #112]	; (8dd8 <hci_event_prio+0x90>)
    8d66:	491d      	ldr	r1, [pc, #116]	; (8ddc <hci_event_prio+0x94>)
    8d68:	481d      	ldr	r0, [pc, #116]	; (8de0 <hci_event_prio+0x98>)
    8d6a:	f640 532f 	movw	r3, #3375	; 0xd2f
    8d6e:	f01c f8ca 	bl	24f06 <printk>
    8d72:	4040      	eors	r0, r0
    8d74:	f380 8811 	msr	BASEPRI, r0
    8d78:	f04f 0003 	mov.w	r0, #3
    8d7c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8d7e:	4630      	mov	r0, r6
    8d80:	2102      	movs	r1, #2
    8d82:	f020 fe13 	bl	299ac <net_buf_simple_pull_mem>
    8d86:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8d88:	7800      	ldrb	r0, [r0, #0]
    8d8a:	f01e f89b 	bl	26ec4 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8d8e:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    8d90:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    8d92:	d40c      	bmi.n	8dae <hci_event_prio+0x66>
    8d94:	4a10      	ldr	r2, [pc, #64]	; (8dd8 <hci_event_prio+0x90>)
    8d96:	4913      	ldr	r1, [pc, #76]	; (8de4 <hci_event_prio+0x9c>)
    8d98:	4811      	ldr	r0, [pc, #68]	; (8de0 <hci_event_prio+0x98>)
    8d9a:	f640 5333 	movw	r3, #3379	; 0xd33
    8d9e:	f01c f8b2 	bl	24f06 <printk>
    8da2:	4040      	eors	r0, r0
    8da4:	f380 8811 	msr	BASEPRI, r0
    8da8:	f04f 0003 	mov.w	r0, #3
    8dac:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    8dae:	2305      	movs	r3, #5
    8db0:	4a0d      	ldr	r2, [pc, #52]	; (8de8 <hci_event_prio+0xa0>)
    8db2:	7838      	ldrb	r0, [r7, #0]
    8db4:	4621      	mov	r1, r4
    8db6:	f7fe ff9b 	bl	7cf0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    8dba:	07b3      	lsls	r3, r6, #30
    8dbc:	d507      	bpl.n	8dce <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    8dbe:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    8dc0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    8dc4:	fa10 f585 	uxtah	r5, r0, r5
    8dc8:	60a5      	str	r5, [r4, #8]
}
    8dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8dce:	4620      	mov	r0, r4
}
    8dd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    8dd4:	f016 bfc8 	b.w	1fd68 <net_buf_unref>
    8dd8:	0002de15 	.word	0x0002de15
    8ddc:	0002e083 	.word	0x0002e083
    8de0:	0002de52 	.word	0x0002de52
    8de4:	0002e09c 	.word	0x0002e09c
    8de8:	0002bc50 	.word	0x0002bc50

00008dec <bt_recv>:
{
    8dec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    8dee:	4d53      	ldr	r5, [pc, #332]	; (8f3c <bt_recv+0x150>)
{
    8df0:	b089      	sub	sp, #36	; 0x24
	if (bt_recv_thread_id == NULL) {
    8df2:	682b      	ldr	r3, [r5, #0]
{
    8df4:	af00      	add	r7, sp, #0
    8df6:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    8df8:	b913      	cbnz	r3, 8e00 <bt_recv+0x14>
	return z_impl_z_current_get();
    8dfa:	f01a f833 	bl	22e64 <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    8dfe:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8e00:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    8e02:	2b01      	cmp	r3, #1
    8e04:	d058      	beq.n	8eb8 <bt_recv+0xcc>
    8e06:	2b03      	cmp	r3, #3
    8e08:	f040 8085 	bne.w	8f16 <bt_recv+0x12a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8e0c:	89a3      	ldrh	r3, [r4, #12]
    8e0e:	2b03      	cmp	r3, #3
    8e10:	d80c      	bhi.n	8e2c <bt_recv+0x40>
    8e12:	4a4b      	ldr	r2, [pc, #300]	; (8f40 <bt_recv+0x154>)
    8e14:	494b      	ldr	r1, [pc, #300]	; (8f44 <bt_recv+0x158>)
    8e16:	484c      	ldr	r0, [pc, #304]	; (8f48 <bt_recv+0x15c>)
    8e18:	f240 13b5 	movw	r3, #437	; 0x1b5
    8e1c:	f01c f873 	bl	24f06 <printk>
    8e20:	4040      	eors	r0, r0
    8e22:	f380 8811 	msr	BASEPRI, r0
    8e26:	f04f 0003 	mov.w	r0, #3
    8e2a:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    8e2c:	2104      	movs	r1, #4
    8e2e:	f104 0008 	add.w	r0, r4, #8
    8e32:	f020 fdbb 	bl	299ac <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8e36:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    8e38:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    8e3a:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8e3c:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    8e3e:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8e42:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    8e44:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8e46:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    8e48:	d014      	beq.n	8e74 <bt_recv+0x88>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8e4a:	466d      	mov	r5, sp
    8e4c:	b088      	sub	sp, #32
    8e4e:	466a      	mov	r2, sp
    8e50:	483e      	ldr	r0, [pc, #248]	; (8f4c <bt_recv+0x160>)
    8e52:	6193      	str	r3, [r2, #24]
    8e54:	2304      	movs	r3, #4
    8e56:	e9c2 0104 	strd	r0, r1, [r2, #16]
    8e5a:	f842 3f0c 	str.w	r3, [r2, #12]!
    8e5e:	483c      	ldr	r0, [pc, #240]	; (8f50 <bt_recv+0x164>)
    8e60:	60bb      	str	r3, [r7, #8]
    8e62:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    8e66:	f01e f881 	bl	26f6c <z_log_msg2_static_create.constprop.0>
    8e6a:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    8e6c:	4620      	mov	r0, r4
    8e6e:	f016 ff7b 	bl	1fd68 <net_buf_unref>
    8e72:	e01d      	b.n	8eb0 <bt_recv+0xc4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8e74:	f001 fde8 	bl	aa48 <bt_conn_lookup_handle>
	if (!conn) {
    8e78:	4605      	mov	r5, r0
    8e7a:	b970      	cbnz	r0, 8e9a <bt_recv+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8e7c:	8ae3      	ldrh	r3, [r4, #22]
    8e7e:	4a35      	ldr	r2, [pc, #212]	; (8f54 <bt_recv+0x168>)
    8e80:	4833      	ldr	r0, [pc, #204]	; (8f50 <bt_recv+0x164>)
    8e82:	e9c7 2306 	strd	r2, r3, [r7, #24]
    8e86:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8e8a:	2303      	movs	r3, #3
    8e8c:	f107 0214 	add.w	r2, r7, #20
    8e90:	607b      	str	r3, [r7, #4]
    8e92:	617b      	str	r3, [r7, #20]
    8e94:	f01e f86a 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    8e98:	e7e8      	b.n	8e6c <bt_recv+0x80>
	acl(buf)->index = bt_conn_index(conn);
    8e9a:	f001 fef1 	bl	ac80 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    8e9e:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    8ea0:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    8ea2:	4621      	mov	r1, r4
    8ea4:	4628      	mov	r0, r5
    8ea6:	f001 fc9b 	bl	a7e0 <bt_conn_recv>
	bt_conn_unref(conn);
    8eaa:	4628      	mov	r0, r5
    8eac:	f01e fc0d 	bl	276ca <bt_conn_unref>
		return 0;
    8eb0:	2000      	movs	r0, #0
}
    8eb2:	3724      	adds	r7, #36	; 0x24
    8eb4:	46bd      	mov	sp, r7
    8eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8eb8:	89a3      	ldrh	r3, [r4, #12]
    8eba:	2b01      	cmp	r3, #1
    8ebc:	d80c      	bhi.n	8ed8 <bt_recv+0xec>
    8ebe:	4a20      	ldr	r2, [pc, #128]	; (8f40 <bt_recv+0x154>)
    8ec0:	4920      	ldr	r1, [pc, #128]	; (8f44 <bt_recv+0x158>)
    8ec2:	4821      	ldr	r0, [pc, #132]	; (8f48 <bt_recv+0x15c>)
    8ec4:	f640 1317 	movw	r3, #2327	; 0x917
    8ec8:	f01c f81d 	bl	24f06 <printk>
    8ecc:	4040      	eors	r0, r0
    8ece:	f380 8811 	msr	BASEPRI, r0
    8ed2:	f04f 0003 	mov.w	r0, #3
    8ed6:	df02      	svc	2
    8ed8:	2102      	movs	r1, #2
    8eda:	f104 0008 	add.w	r0, r4, #8
    8ede:	f020 fd65 	bl	299ac <net_buf_simple_pull_mem>
    8ee2:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    8ee4:	7800      	ldrb	r0, [r0, #0]
    8ee6:	f01d ffed 	bl	26ec4 <bt_hci_evt_get_flags>
    8eea:	0783      	lsls	r3, r0, #30
    8eec:	d40c      	bmi.n	8f08 <bt_recv+0x11c>
    8eee:	4a14      	ldr	r2, [pc, #80]	; (8f40 <bt_recv+0x154>)
    8ef0:	4919      	ldr	r1, [pc, #100]	; (8f58 <bt_recv+0x16c>)
    8ef2:	4815      	ldr	r0, [pc, #84]	; (8f48 <bt_recv+0x15c>)
    8ef4:	f640 131b 	movw	r3, #2331	; 0x91b
    8ef8:	f01c f805 	bl	24f06 <printk>
    8efc:	4040      	eors	r0, r0
    8efe:	f380 8811 	msr	BASEPRI, r0
    8f02:	f04f 0003 	mov.w	r0, #3
    8f06:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8f08:	4a14      	ldr	r2, [pc, #80]	; (8f5c <bt_recv+0x170>)
    8f0a:	7828      	ldrb	r0, [r5, #0]
    8f0c:	2306      	movs	r3, #6
    8f0e:	4621      	mov	r1, r4
    8f10:	f7fe feee 	bl	7cf0 <handle_event>
    8f14:	e7aa      	b.n	8e6c <bt_recv+0x80>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8f16:	4a12      	ldr	r2, [pc, #72]	; (8f60 <bt_recv+0x174>)
    8f18:	480d      	ldr	r0, [pc, #52]	; (8f50 <bt_recv+0x164>)
	switch (bt_buf_get_type(buf)) {
    8f1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8f1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8f22:	2303      	movs	r3, #3
    8f24:	f107 0214 	add.w	r2, r7, #20
    8f28:	607b      	str	r3, [r7, #4]
    8f2a:	617b      	str	r3, [r7, #20]
    8f2c:	f01e f81e 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    8f30:	4620      	mov	r0, r4
    8f32:	f016 ff19 	bl	1fd68 <net_buf_unref>
		return -EINVAL;
    8f36:	f06f 0015 	mvn.w	r0, #21
    8f3a:	e7ba      	b.n	8eb2 <bt_recv+0xc6>
    8f3c:	20001ee4 	.word	0x20001ee4
    8f40:	0002de15 	.word	0x0002de15
    8f44:	0002e083 	.word	0x0002e083
    8f48:	0002de52 	.word	0x0002de52
    8f4c:	0002e0b5 	.word	0x0002e0b5
    8f50:	0002b6bc 	.word	0x0002b6bc
    8f54:	0002e0d9 	.word	0x0002e0d9
    8f58:	0002e0fb 	.word	0x0002e0fb
    8f5c:	0002bc20 	.word	0x0002bc20
    8f60:	0002e129 	.word	0x0002e129

00008f64 <bt_recv_prio>:
{
    8f64:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8f66:	7d03      	ldrb	r3, [r0, #20]
    8f68:	2b01      	cmp	r3, #1
{
    8f6a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8f6c:	d00c      	beq.n	8f88 <bt_recv_prio+0x24>
    8f6e:	4a09      	ldr	r2, [pc, #36]	; (8f94 <bt_recv_prio+0x30>)
    8f70:	4909      	ldr	r1, [pc, #36]	; (8f98 <bt_recv_prio+0x34>)
    8f72:	480a      	ldr	r0, [pc, #40]	; (8f9c <bt_recv_prio+0x38>)
    8f74:	f640 537c 	movw	r3, #3452	; 0xd7c
    8f78:	f01b ffc5 	bl	24f06 <printk>
    8f7c:	4040      	eors	r0, r0
    8f7e:	f380 8811 	msr	BASEPRI, r0
    8f82:	f04f 0003 	mov.w	r0, #3
    8f86:	df02      	svc	2
	hci_event_prio(buf);
    8f88:	4620      	mov	r0, r4
    8f8a:	f7ff fedd 	bl	8d48 <hci_event_prio>
}
    8f8e:	2000      	movs	r0, #0
    8f90:	bd10      	pop	{r4, pc}
    8f92:	bf00      	nop
    8f94:	0002de15 	.word	0x0002de15
    8f98:	0002e13d 	.word	0x0002e13d
    8f9c:	0002de52 	.word	0x0002de52

00008fa0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    8fa0:	4a08      	ldr	r2, [pc, #32]	; (8fc4 <bt_hci_driver_register+0x24>)
{
    8fa2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    8fa4:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    8fa8:	b930      	cbnz	r0, 8fb8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    8faa:	68d9      	ldr	r1, [r3, #12]
    8fac:	b139      	cbz	r1, 8fbe <bt_hci_driver_register+0x1e>
    8fae:	6919      	ldr	r1, [r3, #16]
    8fb0:	b129      	cbz	r1, 8fbe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    8fb2:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    8fb6:	4770      	bx	lr
		return -EALREADY;
    8fb8:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8fbc:	4770      	bx	lr
		return -EINVAL;
    8fbe:	f06f 0015 	mvn.w	r0, #21
}
    8fc2:	4770      	bx	lr
    8fc4:	20000000 	.word	0x20000000

00008fc8 <bt_finalize_init>:
{
    8fc8:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8fca:	4804      	ldr	r0, [pc, #16]	; (8fdc <bt_finalize_init+0x14>)
    8fcc:	2102      	movs	r1, #2
    8fce:	f01d ffb2 	bl	26f36 <atomic_or>
}
    8fd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    8fd6:	2000      	movs	r0, #0
    8fd8:	f001 b86c 	b.w	a0b4 <bt_le_scan_update>
    8fdc:	200000cc 	.word	0x200000cc

00008fe0 <init_work>:

static void init_work(struct k_work *work)
{
    8fe0:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    8fe2:	f7f7 ff11 	bl	e08 <bt_init>
	if (ready_cb) {
    8fe6:	4b03      	ldr	r3, [pc, #12]	; (8ff4 <init_work+0x14>)
    8fe8:	681b      	ldr	r3, [r3, #0]
    8fea:	b113      	cbz	r3, 8ff2 <init_work+0x12>
		ready_cb(err);
	}
}
    8fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    8ff0:	4718      	bx	r3
}
    8ff2:	bd10      	pop	{r4, pc}
    8ff4:	20001f00 	.word	0x20001f00

00008ff8 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    8ff8:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    8ffa:	4d2c      	ldr	r5, [pc, #176]	; (90ac <bt_enable+0xb4>)
    8ffc:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    9000:	b090      	sub	sp, #64	; 0x40
    9002:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9004:	b97b      	cbnz	r3, 9026 <bt_enable+0x2e>
		BT_ERR("No HCI driver registered");
    9006:	4b2a      	ldr	r3, [pc, #168]	; (90b0 <bt_enable+0xb8>)
    9008:	930e      	str	r3, [sp, #56]	; 0x38
    900a:	482a      	ldr	r0, [pc, #168]	; (90b4 <bt_enable+0xbc>)
    900c:	2302      	movs	r3, #2
    900e:	aa0d      	add	r2, sp, #52	; 0x34
    9010:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    9014:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    9018:	9309      	str	r3, [sp, #36]	; 0x24
    901a:	930d      	str	r3, [sp, #52]	; 0x34
    901c:	f01d ffa6 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    9020:	4620      	mov	r0, r4
    9022:	b010      	add	sp, #64	; 0x40
    9024:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9026:	2101      	movs	r1, #1
    9028:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    902c:	f01d ff83 	bl	26f36 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9030:	ea10 0301 	ands.w	r3, r0, r1
    9034:	d137      	bne.n	90a6 <bt_enable+0xae>
	ready_cb = cb;
    9036:	4a20      	ldr	r2, [pc, #128]	; (90b8 <bt_enable+0xc0>)
    9038:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    903a:	2000      	movs	r0, #0
    903c:	2100      	movs	r1, #0
    903e:	f06f 0208 	mvn.w	r2, #8
    9042:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9046:	e9cd 3202 	strd	r3, r2, [sp, #8]
    904a:	e9cd 3300 	strd	r3, r3, [sp]
    904e:	9304      	str	r3, [sp, #16]
    9050:	491a      	ldr	r1, [pc, #104]	; (90bc <bt_enable+0xc4>)
    9052:	4b1b      	ldr	r3, [pc, #108]	; (90c0 <bt_enable+0xc8>)
    9054:	481b      	ldr	r0, [pc, #108]	; (90c4 <bt_enable+0xcc>)
    9056:	f44f 6280 	mov.w	r2, #1024	; 0x400
    905a:	f018 ffc3 	bl	21fe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    905e:	491a      	ldr	r1, [pc, #104]	; (90c8 <bt_enable+0xd0>)
    9060:	4818      	ldr	r0, [pc, #96]	; (90c4 <bt_enable+0xcc>)
    9062:	f020 ffec 	bl	2a03e <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9066:	f7fe fc93 	bl	7990 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    906a:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    906e:	68db      	ldr	r3, [r3, #12]
    9070:	4798      	blx	r3
	if (err) {
    9072:	4604      	mov	r4, r0
    9074:	b160      	cbz	r0, 9090 <bt_enable+0x98>
		BT_ERR("HCI driver open failed (%d)", err);
    9076:	4b15      	ldr	r3, [pc, #84]	; (90cc <bt_enable+0xd4>)
    9078:	aa0d      	add	r2, sp, #52	; 0x34
    907a:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
    907e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9082:	2303      	movs	r3, #3
    9084:	480b      	ldr	r0, [pc, #44]	; (90b4 <bt_enable+0xbc>)
    9086:	9309      	str	r3, [sp, #36]	; 0x24
    9088:	930d      	str	r3, [sp, #52]	; 0x34
    908a:	f01d ff6f 	bl	26f6c <z_log_msg2_static_create.constprop.0>
		return err;
    908e:	e7c7      	b.n	9020 <bt_enable+0x28>
	if (!cb) {
    9090:	b926      	cbnz	r6, 909c <bt_enable+0xa4>
}
    9092:	b010      	add	sp, #64	; 0x40
    9094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9098:	f7f7 beb6 	b.w	e08 <bt_init>
	k_work_submit(&bt_dev.init);
    909c:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    90a0:	f019 fb4e 	bl	22740 <k_work_submit>
	return 0;
    90a4:	e7bc      	b.n	9020 <bt_enable+0x28>
		return -EALREADY;
    90a6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    90aa:	e7b9      	b.n	9020 <bt_enable+0x28>
    90ac:	20000000 	.word	0x20000000
    90b0:	0002e21d 	.word	0x0002e21d
    90b4:	0002b6bc 	.word	0x0002b6bc
    90b8:	20001f00 	.word	0x20001f00
    90bc:	20004d10 	.word	0x20004d10
    90c0:	00007f45 	.word	0x00007f45
    90c4:	20001438 	.word	0x20001438
    90c8:	0002e236 	.word	0x0002e236
    90cc:	0002e23c 	.word	0x0002e23c

000090d0 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    90d0:	4800      	ldr	r0, [pc, #0]	; (90d4 <bt_get_name+0x4>)
    90d2:	4770      	bx	lr
    90d4:	0002e258 	.word	0x0002e258

000090d8 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    90d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    90da:	4f0b      	ldr	r7, [pc, #44]	; (9108 <id_find+0x30>)
{
    90dc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    90de:	2500      	movs	r5, #0
    90e0:	79fb      	ldrb	r3, [r7, #7]
    90e2:	b2ec      	uxtb	r4, r5
    90e4:	42a3      	cmp	r3, r4
    90e6:	d802      	bhi.n	90ee <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    90e8:	f06f 0401 	mvn.w	r4, #1
    90ec:	e009      	b.n	9102 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    90ee:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    90f2:	2207      	movs	r2, #7
    90f4:	4439      	add	r1, r7
    90f6:	4630      	mov	r0, r6
    90f8:	f021 fc9f 	bl	2aa3a <memcmp>
    90fc:	3501      	adds	r5, #1
    90fe:	2800      	cmp	r0, #0
    9100:	d1ee      	bne.n	90e0 <id_find+0x8>
}
    9102:	4620      	mov	r0, r4
    9104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9106:	bf00      	nop
    9108:	20000000 	.word	0x20000000

0000910c <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
    910c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9110:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
    9112:	b088      	sub	sp, #32
    9114:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9116:	2206      	movs	r2, #6
    9118:	4608      	mov	r0, r1
    911a:	f001 ff17 	bl	af4c <bt_conn_lookup_state_le>
	if (conn) {
    911e:	4605      	mov	r5, r0
    9120:	b1a8      	cbz	r0, 914e <bt_id_add.part.0+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9122:	f3bf 8f5b 	dmb	ish
    9126:	4b54      	ldr	r3, [pc, #336]	; (9278 <bt_id_add.part.0+0x16c>)
    9128:	e853 2f00 	ldrex	r2, [r3]
    912c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9130:	e843 2100 	strex	r1, r2, [r3]
    9134:	2900      	cmp	r1, #0
    9136:	d1f7      	bne.n	9128 <bt_id_add.part.0+0x1c>
    9138:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    913c:	7a23      	ldrb	r3, [r4, #8]
    913e:	f043 0301 	orr.w	r3, r3, #1
    9142:	7223      	strb	r3, [r4, #8]
}
    9144:	b008      	add	sp, #32
    9146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    914a:	f01e babe 	b.w	276ca <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    914e:	484a      	ldr	r0, [pc, #296]	; (9278 <bt_id_add.part.0+0x16c>)
    9150:	f01e f828 	bl	271a4 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    9154:	4629      	mov	r1, r5
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9156:	f3c0 1640 	ubfx	r6, r0, #5, #1
    915a:	4848      	ldr	r0, [pc, #288]	; (927c <bt_id_add.part.0+0x170>)
    915c:	f000 fcfc 	bl	9b58 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    9160:	b116      	cbz	r6, 9168 <bt_id_add.part.0+0x5c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    9162:	4628      	mov	r0, r5
    9164:	f01e fa0a 	bl	2757c <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    9168:	4d45      	ldr	r5, [pc, #276]	; (9280 <bt_id_add.part.0+0x174>)
    916a:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    916e:	b17b      	cbz	r3, 9190 <bt_id_add.part.0+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9170:	2000      	movs	r0, #0
    9172:	f01e f877 	bl	27264 <addr_res_enable>
		if (err) {
    9176:	b158      	cbz	r0, 9190 <bt_id_add.part.0+0x84>
			BT_WARN("Failed to disable address resolution");
    9178:	4b42      	ldr	r3, [pc, #264]	; (9284 <bt_id_add.part.0+0x178>)
		BT_WARN("Set privacy mode command is not supported");
    917a:	9306      	str	r3, [sp, #24]
    917c:	2302      	movs	r3, #2
    917e:	9301      	str	r3, [sp, #4]
    9180:	9305      	str	r3, [sp, #20]
    9182:	aa05      	add	r2, sp, #20
    9184:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9188:	483f      	ldr	r0, [pc, #252]	; (9288 <bt_id_add.part.0+0x17c>)
    918a:	f01e f868 	bl	2725e <z_log_msg2_static_create.constprop.0>
	if (err) {
    918e:	e028      	b.n	91e2 <bt_id_add.part.0+0xd6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9190:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    9194:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    9198:	429a      	cmp	r2, r3
    919a:	d130      	bne.n	91fe <bt_id_add.part.0+0xf2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    919c:	4b3b      	ldr	r3, [pc, #236]	; (928c <bt_id_add.part.0+0x180>)
    919e:	483a      	ldr	r0, [pc, #232]	; (9288 <bt_id_add.part.0+0x17c>)
    91a0:	9306      	str	r3, [sp, #24]
    91a2:	2702      	movs	r7, #2
    91a4:	aa05      	add	r2, sp, #20
    91a6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    91aa:	9701      	str	r7, [sp, #4]
    91ac:	9705      	str	r7, [sp, #20]
    91ae:	f01e f856 	bl	2725e <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    91b2:	2200      	movs	r2, #0
    91b4:	4611      	mov	r1, r2
    91b6:	f242 0029 	movw	r0, #8233	; 0x2029
    91ba:	f7ff f9c5 	bl	8548 <bt_hci_cmd_send_sync>
		if (err) {
    91be:	b138      	cbz	r0, 91d0 <bt_id_add.part.0+0xc4>
			BT_ERR("Failed to clear resolution list");
    91c0:	4b33      	ldr	r3, [pc, #204]	; (9290 <bt_id_add.part.0+0x184>)
    91c2:	9306      	str	r3, [sp, #24]
    91c4:	9701      	str	r7, [sp, #4]
    91c6:	9705      	str	r7, [sp, #20]
		BT_ERR("Failed to set privacy mode");
    91c8:	aa05      	add	r2, sp, #20
    91ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    91ce:	e7db      	b.n	9188 <bt_id_add.part.0+0x7c>
		bt_dev.le.rl_entries++;
    91d0:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    91d4:	3301      	adds	r3, #1
    91d6:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    91da:	7a23      	ldrb	r3, [r4, #8]
    91dc:	f043 0304 	orr.w	r3, r3, #4
    91e0:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    91e2:	2001      	movs	r0, #1
    91e4:	f01e f83e 	bl	27264 <addr_res_enable>
	if (scan_enabled) {
    91e8:	b116      	cbz	r6, 91f0 <bt_id_add.part.0+0xe4>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    91ea:	2001      	movs	r0, #1
    91ec:	f01e f9c6 	bl	2757c <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    91f0:	4828      	ldr	r0, [pc, #160]	; (9294 <bt_id_add.part.0+0x188>)
    91f2:	2100      	movs	r1, #0
}
    91f4:	b008      	add	sp, #32
    91f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    91fa:	f000 bcad 	b.w	9b58 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    91fe:	f104 0801 	add.w	r8, r4, #1
    9202:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9206:	4640      	mov	r0, r8
    9208:	f01d fff3 	bl	271f2 <hci_id_add.constprop.0>
	if (err) {
    920c:	4607      	mov	r7, r0
    920e:	b128      	cbz	r0, 921c <bt_id_add.part.0+0x110>
		BT_ERR("Failed to add IRK to controller");
    9210:	4b21      	ldr	r3, [pc, #132]	; (9298 <bt_id_add.part.0+0x18c>)
		BT_ERR("Failed to set privacy mode");
    9212:	9306      	str	r3, [sp, #24]
    9214:	2302      	movs	r3, #2
    9216:	9301      	str	r3, [sp, #4]
    9218:	9305      	str	r3, [sp, #20]
    921a:	e7d5      	b.n	91c8 <bt_id_add.part.0+0xbc>
	bt_dev.le.rl_entries++;
    921c:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    9220:	3301      	adds	r3, #1
    9222:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    9226:	7a23      	ldrb	r3, [r4, #8]
    9228:	f043 0304 	orr.w	r3, r3, #4
    922c:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    922e:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    9232:	075b      	lsls	r3, r3, #29
    9234:	d401      	bmi.n	923a <bt_id_add.part.0+0x12e>
		BT_WARN("Set privacy mode command is not supported");
    9236:	4b19      	ldr	r3, [pc, #100]	; (929c <bt_id_add.part.0+0x190>)
    9238:	e79f      	b.n	917a <bt_id_add.part.0+0x6e>
	bt_addr_le_copy(&cp.id_addr, addr);
    923a:	4641      	mov	r1, r8
    923c:	a802      	add	r0, sp, #8
    923e:	f01d ffd1 	bl	271e4 <bt_addr_le_copy>
	cp.mode = mode;
    9242:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9244:	2108      	movs	r1, #8
    9246:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    924a:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    924e:	f7ff f813 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    9252:	4604      	mov	r4, r0
    9254:	b908      	cbnz	r0, 925a <bt_id_add.part.0+0x14e>
		BT_ERR("Failed to set privacy mode");
    9256:	4b12      	ldr	r3, [pc, #72]	; (92a0 <bt_id_add.part.0+0x194>)
    9258:	e7db      	b.n	9212 <bt_id_add.part.0+0x106>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    925a:	2208      	movs	r2, #8
    925c:	eb0d 0102 	add.w	r1, sp, r2
    9260:	4410      	add	r0, r2
    9262:	f020 fb78 	bl	29956 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    9266:	463a      	mov	r2, r7
    9268:	4621      	mov	r1, r4
    926a:	f242 004e 	movw	r0, #8270	; 0x204e
    926e:	f7ff f96b 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    9272:	2800      	cmp	r0, #0
    9274:	d0b5      	beq.n	91e2 <bt_id_add.part.0+0xd6>
    9276:	e7ee      	b.n	9256 <bt_id_add.part.0+0x14a>
    9278:	200000cc 	.word	0x200000cc
    927c:	000272a9 	.word	0x000272a9
    9280:	20000000 	.word	0x20000000
    9284:	0002e295 	.word	0x0002e295
    9288:	0002b6cc 	.word	0x0002b6cc
    928c:	0002e2ba 	.word	0x0002e2ba
    9290:	0002e2eb 	.word	0x0002e2eb
    9294:	000271b1 	.word	0x000271b1
    9298:	0002e30b 	.word	0x0002e30b
    929c:	0002e32b 	.word	0x0002e32b
    92a0:	0002e355 	.word	0x0002e355

000092a4 <set_random_address>:
{
    92a4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    92a6:	2206      	movs	r2, #6
    92a8:	4912      	ldr	r1, [pc, #72]	; (92f4 <set_random_address+0x50>)
    92aa:	4605      	mov	r5, r0
    92ac:	f021 fbc5 	bl	2aa3a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    92b0:	4602      	mov	r2, r0
    92b2:	b1d0      	cbz	r0, 92ea <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    92b4:	2106      	movs	r1, #6
    92b6:	f242 0005 	movw	r0, #8197	; 0x2005
    92ba:	f7fe ffdd 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    92be:	4604      	mov	r4, r0
    92c0:	b1a8      	cbz	r0, 92ee <set_random_address+0x4a>
    92c2:	2206      	movs	r2, #6
    92c4:	4629      	mov	r1, r5
    92c6:	3008      	adds	r0, #8
    92c8:	f020 fb45 	bl	29956 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    92cc:	2200      	movs	r2, #0
    92ce:	4621      	mov	r1, r4
    92d0:	f242 0005 	movw	r0, #8197	; 0x2005
    92d4:	f7ff f938 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    92d8:	4602      	mov	r2, r0
    92da:	b930      	cbnz	r0, 92ea <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    92dc:	4805      	ldr	r0, [pc, #20]	; (92f4 <set_random_address+0x50>)
    92de:	4629      	mov	r1, r5
    92e0:	f01d ff7b 	bl	271da <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    92e4:	2301      	movs	r3, #1
    92e6:	f800 3c01 	strb.w	r3, [r0, #-1]
}
    92ea:	4610      	mov	r0, r2
    92ec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    92ee:	f06f 0268 	mvn.w	r2, #104	; 0x68
    92f2:	e7fa      	b.n	92ea <set_random_address+0x46>
    92f4:	20000061 	.word	0x20000061

000092f8 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    92f8:	b530      	push	{r4, r5, lr}
    92fa:	4604      	mov	r4, r0
    92fc:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    92fe:	460d      	mov	r5, r1
    9300:	b199      	cbz	r1, 932a <id_create.constprop.0+0x32>
    9302:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9304:	2207      	movs	r2, #7
    9306:	a902      	add	r1, sp, #8
    9308:	4628      	mov	r0, r5
    930a:	9302      	str	r3, [sp, #8]
    930c:	f8cd 300b 	str.w	r3, [sp, #11]
    9310:	f021 fb93 	bl	2aa3a <memcmp>
    9314:	b148      	cbz	r0, 932a <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9316:	4810      	ldr	r0, [pc, #64]	; (9358 <id_create.constprop.0+0x60>)
    9318:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    931c:	4629      	mov	r1, r5
    931e:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9320:	f01d ff60 	bl	271e4 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    9324:	2000      	movs	r0, #0
}
    9326:	b005      	add	sp, #20
    9328:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    932a:	4668      	mov	r0, sp
    932c:	f01d fdbc 	bl	26ea8 <bt_addr_le_create_static>
			if (err) {
    9330:	2800      	cmp	r0, #0
    9332:	d1f8      	bne.n	9326 <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
    9334:	4668      	mov	r0, sp
    9336:	f7ff fecf 	bl	90d8 <id_find>
    933a:	2800      	cmp	r0, #0
    933c:	daf5      	bge.n	932a <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    933e:	4806      	ldr	r0, [pc, #24]	; (9358 <id_create.constprop.0+0x60>)
    9340:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9344:	4420      	add	r0, r4
    9346:	4669      	mov	r1, sp
    9348:	f01d ff4c 	bl	271e4 <bt_addr_le_copy>
		if (addr) {
    934c:	2d00      	cmp	r5, #0
    934e:	d0e9      	beq.n	9324 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9350:	4601      	mov	r1, r0
    9352:	4628      	mov	r0, r5
    9354:	e7e4      	b.n	9320 <id_create.constprop.0+0x28>
    9356:	bf00      	nop
    9358:	20000000 	.word	0x20000000

0000935c <bt_id_adv_random_addr_check>:
{
    935c:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    935e:	4805      	ldr	r0, [pc, #20]	; (9374 <bt_id_adv_random_addr_check+0x18>)
    9360:	f01d ff20 	bl	271a4 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    9364:	0503      	lsls	r3, r0, #20
    9366:	d402      	bmi.n	936e <bt_id_adv_random_addr_check+0x12>
    9368:	4802      	ldr	r0, [pc, #8]	; (9374 <bt_id_adv_random_addr_check+0x18>)
    936a:	f01d ff1b 	bl	271a4 <atomic_get>
}
    936e:	2001      	movs	r0, #1
    9370:	bd08      	pop	{r3, pc}
    9372:	bf00      	nop
    9374:	200000cc 	.word	0x200000cc

00009378 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9378:	4b0a      	ldr	r3, [pc, #40]	; (93a4 <bt_id_pending_keys_update+0x2c>)
    937a:	f3bf 8f5b 	dmb	ish
    937e:	e853 2f00 	ldrex	r2, [r3]
    9382:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    9386:	e843 1000 	strex	r0, r1, [r3]
    938a:	2800      	cmp	r0, #0
    938c:	d1f7      	bne.n	937e <bt_id_pending_keys_update+0x6>
    938e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9392:	0493      	lsls	r3, r2, #18
    9394:	d504      	bpl.n	93a0 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9396:	4904      	ldr	r1, [pc, #16]	; (93a8 <bt_id_pending_keys_update+0x30>)
    9398:	2200      	movs	r2, #0
    939a:	2002      	movs	r0, #2
    939c:	f006 bdd4 	b.w	ff48 <bt_keys_foreach>
}
    93a0:	4770      	bx	lr
    93a2:	bf00      	nop
    93a4:	200000cc 	.word	0x200000cc
    93a8:	0002734b 	.word	0x0002734b

000093ac <bt_id_add>:
{
    93ac:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    93ae:	490a      	ldr	r1, [pc, #40]	; (93d8 <bt_id_add+0x2c>)
    93b0:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    93b4:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
    93b8:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    93ba:	b10c      	cbz	r4, 93c0 <bt_id_add+0x14>
    93bc:	4294      	cmp	r4, r2
    93be:	d208      	bcs.n	93d2 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    93c0:	3201      	adds	r2, #1
    93c2:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    93c6:	7a1a      	ldrb	r2, [r3, #8]
}
    93c8:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
    93ca:	f042 0204 	orr.w	r2, r2, #4
    93ce:	721a      	strb	r2, [r3, #8]
}
    93d0:	4770      	bx	lr
    93d2:	bc10      	pop	{r4}
    93d4:	f7ff be9a 	b.w	910c <bt_id_add.part.0>
    93d8:	20000000 	.word	0x20000000

000093dc <bt_id_del>:
{
    93dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    93e0:	4d51      	ldr	r5, [pc, #324]	; (9528 <bt_id_del+0x14c>)
    93e2:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    93e6:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
    93ea:	b089      	sub	sp, #36	; 0x24
    93ec:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    93ee:	b112      	cbz	r2, 93f6 <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    93f0:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    93f2:	4293      	cmp	r3, r2
    93f4:	dd09      	ble.n	940a <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
    93f6:	3b01      	subs	r3, #1
    93f8:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    93fc:	7a23      	ldrb	r3, [r4, #8]
    93fe:	f023 0304 	bic.w	r3, r3, #4
    9402:	7223      	strb	r3, [r4, #8]
}
    9404:	b009      	add	sp, #36	; 0x24
    9406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    940a:	2100      	movs	r1, #0
    940c:	2206      	movs	r2, #6
    940e:	4608      	mov	r0, r1
    9410:	f001 fd9c 	bl	af4c <bt_conn_lookup_state_le>
	if (conn) {
    9414:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    9418:	4606      	mov	r6, r0
    941a:	b1a0      	cbz	r0, 9446 <bt_id_del+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    941c:	f3bf 8f5b 	dmb	ish
    9420:	e853 2f00 	ldrex	r2, [r3]
    9424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9428:	e843 2100 	strex	r1, r2, [r3]
    942c:	2900      	cmp	r1, #0
    942e:	d1f7      	bne.n	9420 <bt_id_del+0x44>
    9430:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    9434:	7a23      	ldrb	r3, [r4, #8]
    9436:	f043 0302 	orr.w	r3, r3, #2
    943a:	7223      	strb	r3, [r4, #8]
}
    943c:	b009      	add	sp, #36	; 0x24
    943e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    9442:	f01e b942 	b.w	276ca <bt_conn_unref>
    9446:	4618      	mov	r0, r3
    9448:	f01d feac 	bl	271a4 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    944c:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    944e:	f3c0 1840 	ubfx	r8, r0, #5, #1
    9452:	4836      	ldr	r0, [pc, #216]	; (952c <bt_id_del+0x150>)
    9454:	f000 fb80 	bl	9b58 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    9458:	f1b8 0f00 	cmp.w	r8, #0
    945c:	d002      	beq.n	9464 <bt_id_del+0x88>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    945e:	4630      	mov	r0, r6
    9460:	f01e f88c 	bl	2757c <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9464:	2000      	movs	r0, #0
    9466:	f01d fefd 	bl	27264 <addr_res_enable>
	if (err) {
    946a:	4606      	mov	r6, r0
    946c:	b160      	cbz	r0, 9488 <bt_id_del+0xac>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    946e:	4b30      	ldr	r3, [pc, #192]	; (9530 <bt_id_del+0x154>)
    9470:	e9cd 3006 	strd	r3, r0, [sp, #24]
    9474:	2303      	movs	r3, #3
    9476:	9301      	str	r3, [sp, #4]
    9478:	9305      	str	r3, [sp, #20]
    947a:	aa05      	add	r2, sp, #20
    947c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
    9480:	482c      	ldr	r0, [pc, #176]	; (9534 <bt_id_del+0x158>)
    9482:	f01d feec 	bl	2725e <z_log_msg2_static_create.constprop.0>
		goto done;
    9486:	e011      	b.n	94ac <bt_id_del+0xd0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9488:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    948c:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
    9490:	429a      	cmp	r2, r3
    9492:	d21e      	bcs.n	94d2 <bt_id_del+0xf6>
		bt_dev.le.rl_entries--;
    9494:	3b01      	subs	r3, #1
    9496:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    949a:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    949c:	4926      	ldr	r1, [pc, #152]	; (9538 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    949e:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    94a2:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    94a4:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    94a6:	2002      	movs	r0, #2
    94a8:	f006 fd4e 	bl	ff48 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    94ac:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    94b0:	b113      	cbz	r3, 94b8 <bt_id_del+0xdc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    94b2:	2001      	movs	r0, #1
    94b4:	f01d fed6 	bl	27264 <addr_res_enable>
	if (scan_enabled) {
    94b8:	f1b8 0f00 	cmp.w	r8, #0
    94bc:	d002      	beq.n	94c4 <bt_id_del+0xe8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    94be:	2001      	movs	r0, #1
    94c0:	f01e f85c 	bl	2757c <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    94c4:	481d      	ldr	r0, [pc, #116]	; (953c <bt_id_del+0x160>)
    94c6:	2100      	movs	r1, #0
}
    94c8:	b009      	add	sp, #36	; 0x24
    94ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    94ce:	f000 bb43 	b.w	9b58 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    94d2:	2107      	movs	r1, #7
    94d4:	f242 0028 	movw	r0, #8232	; 0x2028
    94d8:	f7fe fece 	bl	8278 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    94dc:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    94e0:	4607      	mov	r7, r0
    94e2:	b940      	cbnz	r0, 94f6 <bt_id_del+0x11a>
		BT_ERR("Failed to remove IRK from controller");
    94e4:	4b16      	ldr	r3, [pc, #88]	; (9540 <bt_id_del+0x164>)
    94e6:	9306      	str	r3, [sp, #24]
    94e8:	2302      	movs	r3, #2
    94ea:	9301      	str	r3, [sp, #4]
    94ec:	9305      	str	r3, [sp, #20]
    94ee:	aa05      	add	r2, sp, #20
    94f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    94f4:	e7c4      	b.n	9480 <bt_id_del+0xa4>
	return net_buf_simple_add(&buf->b, len);
    94f6:	2107      	movs	r1, #7
    94f8:	3008      	adds	r0, #8
    94fa:	f020 fa26 	bl	2994a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    94fe:	4649      	mov	r1, r9
    9500:	f01d fe70 	bl	271e4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    9504:	4632      	mov	r2, r6
    9506:	4639      	mov	r1, r7
    9508:	f242 0028 	movw	r0, #8232	; 0x2028
    950c:	f7ff f81c 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    9510:	2800      	cmp	r0, #0
    9512:	d1e7      	bne.n	94e4 <bt_id_del+0x108>
	bt_dev.le.rl_entries--;
    9514:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    9518:	3b01      	subs	r3, #1
    951a:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    951e:	7a23      	ldrb	r3, [r4, #8]
    9520:	f023 0304 	bic.w	r3, r3, #4
    9524:	7223      	strb	r3, [r4, #8]
    9526:	e7c1      	b.n	94ac <bt_id_del+0xd0>
    9528:	20000000 	.word	0x20000000
    952c:	000272a9 	.word	0x000272a9
    9530:	0002e370 	.word	0x0002e370
    9534:	0002b6cc 	.word	0x0002b6cc
    9538:	0002724d 	.word	0x0002724d
    953c:	000271b1 	.word	0x000271b1
    9540:	0002e39d 	.word	0x0002e39d

00009544 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    9544:	b570      	push	{r4, r5, r6, lr}
    9546:	460c      	mov	r4, r1
    9548:	b08a      	sub	sp, #40	; 0x28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    954a:	4605      	mov	r5, r0
    954c:	b918      	cbnz	r0, 9556 <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    954e:	b34c      	cbz	r4, 95a4 <bt_id_create+0x60>
		return -EINVAL;
    9550:	f06f 0015 	mvn.w	r0, #21
    9554:	e024      	b.n	95a0 <bt_id_create+0x5c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9556:	2300      	movs	r3, #0
    9558:	2207      	movs	r2, #7
    955a:	a902      	add	r1, sp, #8
    955c:	9302      	str	r3, [sp, #8]
    955e:	f8cd 300b 	str.w	r3, [sp, #11]
    9562:	f021 fa6a 	bl	2aa3a <memcmp>
    9566:	2800      	cmp	r0, #0
    9568:	d0f1      	beq.n	954e <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    956a:	782b      	ldrb	r3, [r5, #0]
    956c:	2b01      	cmp	r3, #1
    956e:	d104      	bne.n	957a <bt_id_create+0x36>
    9570:	79ab      	ldrb	r3, [r5, #6]
    9572:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9576:	2bc0      	cmp	r3, #192	; 0xc0
    9578:	d00b      	beq.n	9592 <bt_id_create+0x4e>
			BT_ERR("Only static random identity address supported");
    957a:	4b1c      	ldr	r3, [pc, #112]	; (95ec <bt_id_create+0xa8>)
    957c:	9308      	str	r3, [sp, #32]
    957e:	481c      	ldr	r0, [pc, #112]	; (95f0 <bt_id_create+0xac>)
    9580:	2302      	movs	r3, #2
    9582:	aa07      	add	r2, sp, #28
    9584:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9588:	9301      	str	r3, [sp, #4]
    958a:	9307      	str	r3, [sp, #28]
    958c:	f01d fe67 	bl	2725e <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
    9590:	e7de      	b.n	9550 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    9592:	4628      	mov	r0, r5
    9594:	f7ff fda0 	bl	90d8 <id_find>
    9598:	2800      	cmp	r0, #0
    959a:	dbd8      	blt.n	954e <bt_id_create+0xa>
			return -EALREADY;
    959c:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    95a0:	b00a      	add	sp, #40	; 0x28
    95a2:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    95a4:	4e13      	ldr	r6, [pc, #76]	; (95f4 <bt_id_create+0xb0>)
    95a6:	79f3      	ldrb	r3, [r6, #7]
    95a8:	2b01      	cmp	r3, #1
    95aa:	d01c      	beq.n	95e6 <bt_id_create+0xa2>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    95ac:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    95b0:	f01d fdf8 	bl	271a4 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    95b4:	07c3      	lsls	r3, r0, #31
    95b6:	d40b      	bmi.n	95d0 <bt_id_create+0x8c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    95b8:	2d00      	cmp	r5, #0
    95ba:	d0c9      	beq.n	9550 <bt_id_create+0xc>
    95bc:	2207      	movs	r2, #7
    95be:	a904      	add	r1, sp, #16
    95c0:	4628      	mov	r0, r5
    95c2:	9404      	str	r4, [sp, #16]
    95c4:	f8cd 4013 	str.w	r4, [sp, #19]
    95c8:	f021 fa37 	bl	2aa3a <memcmp>
    95cc:	2800      	cmp	r0, #0
    95ce:	d0bf      	beq.n	9550 <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
    95d0:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    95d2:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    95d4:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    95d6:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    95d8:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    95da:	f7ff fe8d 	bl	92f8 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    95de:	2800      	cmp	r0, #0
    95e0:	bf08      	it	eq
    95e2:	4620      	moveq	r0, r4
    95e4:	e7dc      	b.n	95a0 <bt_id_create+0x5c>
		return -ENOMEM;
    95e6:	f06f 000b 	mvn.w	r0, #11
    95ea:	e7d9      	b.n	95a0 <bt_id_create+0x5c>
    95ec:	0002e3c2 	.word	0x0002e3c2
    95f0:	0002b6cc 	.word	0x0002b6cc
    95f4:	20000000 	.word	0x20000000

000095f8 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    95f8:	b570      	push	{r4, r5, r6, lr}
    95fa:	b08a      	sub	sp, #40	; 0x28
    95fc:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    95fe:	aa01      	add	r2, sp, #4
    9600:	2100      	movs	r1, #0
    9602:	f241 0009 	movw	r0, #4105	; 0x1009
    9606:	f7fe ff9f 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    960a:	4604      	mov	r4, r0
    960c:	b168      	cbz	r0, 962a <bt_id_read_public_addr+0x32>
		BT_WARN("Failed to read public address");
    960e:	4b1e      	ldr	r3, [pc, #120]	; (9688 <bt_id_read_public_addr+0x90>)
    9610:	9308      	str	r3, [sp, #32]
    9612:	481e      	ldr	r0, [pc, #120]	; (968c <bt_id_read_public_addr+0x94>)
    9614:	2302      	movs	r3, #2
    9616:	aa07      	add	r2, sp, #28
    9618:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    961c:	9302      	str	r3, [sp, #8]
    961e:	9307      	str	r3, [sp, #28]
    9620:	f01d fe1d 	bl	2725e <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    9624:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    9626:	b00a      	add	sp, #40	; 0x28
    9628:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    962a:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    962c:	689d      	ldr	r5, [r3, #8]
    962e:	9002      	str	r0, [sp, #8]
    9630:	3501      	adds	r5, #1
    9632:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    9636:	2206      	movs	r2, #6
    9638:	a902      	add	r1, sp, #8
    963a:	4628      	mov	r0, r5
    963c:	f021 f9fd 	bl	2aa3a <memcmp>
    9640:	b918      	cbnz	r0, 964a <bt_id_read_public_addr+0x52>
		net_buf_unref(rsp);
    9642:	9801      	ldr	r0, [sp, #4]
    9644:	f016 fb90 	bl	1fd68 <net_buf_unref>
    9648:	e7ec      	b.n	9624 <bt_id_read_public_addr+0x2c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    964a:	23ff      	movs	r3, #255	; 0xff
    964c:	2206      	movs	r2, #6
    964e:	a904      	add	r1, sp, #16
    9650:	4628      	mov	r0, r5
    9652:	f88d 3010 	strb.w	r3, [sp, #16]
    9656:	f88d 3011 	strb.w	r3, [sp, #17]
    965a:	f88d 3012 	strb.w	r3, [sp, #18]
    965e:	f88d 3013 	strb.w	r3, [sp, #19]
    9662:	f88d 3014 	strb.w	r3, [sp, #20]
    9666:	f88d 3015 	strb.w	r3, [sp, #21]
    966a:	f021 f9e6 	bl	2aa3a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    966e:	2800      	cmp	r0, #0
    9670:	d0e7      	beq.n	9642 <bt_id_read_public_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    9672:	4629      	mov	r1, r5
    9674:	1c70      	adds	r0, r6, #1
    9676:	f01d fdb0 	bl	271da <bt_addr_copy>
	net_buf_unref(rsp);
    967a:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    967c:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    967e:	f016 fb73 	bl	1fd68 <net_buf_unref>
	return 1U;
    9682:	2001      	movs	r0, #1
    9684:	e7cf      	b.n	9626 <bt_id_read_public_addr+0x2e>
    9686:	bf00      	nop
    9688:	0002e3f0 	.word	0x0002e3f0
    968c:	0002b6cc 	.word	0x0002b6cc

00009690 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    9690:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    9692:	4668      	mov	r0, sp
    9694:	f7ff ffb0 	bl	95f8 <bt_id_read_public_addr>
    9698:	4b04      	ldr	r3, [pc, #16]	; (96ac <bt_setup_public_id_addr+0x1c>)
    969a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    969c:	b118      	cbz	r0, 96a6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    969e:	4669      	mov	r1, sp
    96a0:	2000      	movs	r0, #0
    96a2:	f7ff fe29 	bl	92f8 <id_create.constprop.0>
}
    96a6:	b003      	add	sp, #12
    96a8:	f85d fb04 	ldr.w	pc, [sp], #4
    96ac:	20000000 	.word	0x20000000

000096b0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    96b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    96b2:	4b25      	ldr	r3, [pc, #148]	; (9748 <bt_read_static_addr+0x98>)
    96b4:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    96b8:	f014 0401 	ands.w	r4, r4, #1
{
    96bc:	b089      	sub	sp, #36	; 0x24
    96be:	4605      	mov	r5, r0
    96c0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    96c2:	d10b      	bne.n	96dc <bt_read_static_addr+0x2c>
		BT_WARN("Read Static Addresses command not available");
    96c4:	4b21      	ldr	r3, [pc, #132]	; (974c <bt_read_static_addr+0x9c>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    96c6:	9306      	str	r3, [sp, #24]
    96c8:	4821      	ldr	r0, [pc, #132]	; (9750 <bt_read_static_addr+0xa0>)
    96ca:	2302      	movs	r3, #2
    96cc:	aa05      	add	r2, sp, #20
    96ce:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    96d2:	9301      	str	r3, [sp, #4]
    96d4:	9305      	str	r3, [sp, #20]
    96d6:	f01d fdc2 	bl	2725e <z_log_msg2_static_create.constprop.0>
    96da:	e013      	b.n	9704 <bt_read_static_addr+0x54>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    96dc:	466a      	mov	r2, sp
    96de:	2100      	movs	r1, #0
    96e0:	f64f 4009 	movw	r0, #64521	; 0xfc09
    96e4:	f7fe ff30 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    96e8:	4603      	mov	r3, r0
    96ea:	b170      	cbz	r0, 970a <bt_read_static_addr+0x5a>
		BT_WARN("Failed to read static addresses");
    96ec:	4b19      	ldr	r3, [pc, #100]	; (9754 <bt_read_static_addr+0xa4>)
    96ee:	9306      	str	r3, [sp, #24]
    96f0:	4817      	ldr	r0, [pc, #92]	; (9750 <bt_read_static_addr+0xa0>)
    96f2:	2302      	movs	r3, #2
    96f4:	aa05      	add	r2, sp, #20
    96f6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
    96fa:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
    96fc:	9301      	str	r3, [sp, #4]
    96fe:	9305      	str	r3, [sp, #20]
    9700:	f01d fdad 	bl	2725e <z_log_msg2_static_create.constprop.0>
	}

	return cnt;
}
    9704:	4620      	mov	r0, r4
    9706:	b009      	add	sp, #36	; 0x24
    9708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    970a:	9800      	ldr	r0, [sp, #0]
    970c:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    970e:	7854      	ldrb	r4, [r2, #1]
    9710:	f04f 0c16 	mov.w	ip, #22
    9714:	42b4      	cmp	r4, r6
    9716:	bf28      	it	cs
    9718:	4634      	movcs	r4, r6
    971a:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    971e:	429c      	cmp	r4, r3
    9720:	dc05      	bgt.n	972e <bt_read_static_addr+0x7e>
	net_buf_unref(rsp);
    9722:	f016 fb21 	bl	1fd68 <net_buf_unref>
	if (!cnt) {
    9726:	2c00      	cmp	r4, #0
    9728:	d1ec      	bne.n	9704 <bt_read_static_addr+0x54>
		BT_WARN("No static addresses stored in controller");
    972a:	4b0b      	ldr	r3, [pc, #44]	; (9758 <bt_read_static_addr+0xa8>)
    972c:	e7cb      	b.n	96c6 <bt_read_static_addr+0x16>
    972e:	1c96      	adds	r6, r2, #2
    9730:	fb0c 5103 	mla	r1, ip, r3, r5
    9734:	f856 eb04 	ldr.w	lr, [r6], #4
    9738:	f841 eb04 	str.w	lr, [r1], #4
    973c:	42be      	cmp	r6, r7
    973e:	d1f9      	bne.n	9734 <bt_read_static_addr+0x84>
    9740:	883e      	ldrh	r6, [r7, #0]
    9742:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    9744:	3301      	adds	r3, #1
    9746:	e7ea      	b.n	971e <bt_read_static_addr+0x6e>
    9748:	20000000 	.word	0x20000000
    974c:	0002e40e 	.word	0x0002e40e
    9750:	0002b6cc 	.word	0x0002b6cc
    9754:	0002e43a 	.word	0x0002e43a
    9758:	0002e45a 	.word	0x0002e45a

0000975c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    975c:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    975e:	4d14      	ldr	r5, [pc, #80]	; (97b0 <bt_setup_random_id_addr+0x54>)
    9760:	79ec      	ldrb	r4, [r5, #7]
{
    9762:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    9764:	b9ec      	cbnz	r4, 97a2 <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    9766:	2101      	movs	r1, #1
    9768:	a802      	add	r0, sp, #8
    976a:	f7ff ffa1 	bl	96b0 <bt_read_static_addr>
    976e:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    9770:	b1b8      	cbz	r0, 97a2 <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    9772:	2616      	movs	r6, #22
    9774:	ab02      	add	r3, sp, #8
    9776:	b2e2      	uxtb	r2, r4
    9778:	fb06 3102 	mla	r1, r6, r2, r3
    977c:	f10d 0001 	add.w	r0, sp, #1
    9780:	f01d fd2b 	bl	271da <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    9784:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    9786:	4669      	mov	r1, sp
    9788:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    978a:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    978e:	f7ff fdb3 	bl	92f8 <id_create.constprop.0>
				if (err) {
    9792:	b920      	cbnz	r0, 979e <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    9794:	79ea      	ldrb	r2, [r5, #7]
    9796:	3401      	adds	r4, #1
    9798:	b2e3      	uxtb	r3, r4
    979a:	429a      	cmp	r2, r3
    979c:	d8ea      	bhi.n	9774 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    979e:	b008      	add	sp, #32
    97a0:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    97a2:	2100      	movs	r1, #0
    97a4:	4608      	mov	r0, r1
}
    97a6:	b008      	add	sp, #32
    97a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    97ac:	f7ff beca 	b.w	9544 <bt_id_create>
    97b0:	20000000 	.word	0x20000000

000097b4 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    97b4:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    97b6:	4c07      	ldr	r4, [pc, #28]	; (97d4 <bt_id_set_create_conn_own_addr+0x20>)
    97b8:	7823      	ldrb	r3, [r4, #0]
    97ba:	2b01      	cmp	r3, #1
{
    97bc:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    97be:	d003      	beq.n	97c8 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    97c0:	7823      	ldrb	r3, [r4, #0]
    97c2:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    97c4:	2000      	movs	r0, #0
}
    97c6:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    97c8:	1c60      	adds	r0, r4, #1
    97ca:	f7ff fd6b 	bl	92a4 <set_random_address>
			if (err) {
    97ce:	2800      	cmp	r0, #0
    97d0:	d0f6      	beq.n	97c0 <bt_id_set_create_conn_own_addr+0xc>
    97d2:	e7f8      	b.n	97c6 <bt_id_set_create_conn_own_addr+0x12>
    97d4:	20000000 	.word	0x20000000

000097d8 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    97d8:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    97da:	4b11      	ldr	r3, [pc, #68]	; (9820 <bt_id_set_scan_own_addr+0x48>)
    97dc:	781b      	ldrb	r3, [r3, #0]
    97de:	700b      	strb	r3, [r1, #0]
{
    97e0:	b088      	sub	sp, #32
    97e2:	4606      	mov	r6, r0
    97e4:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    97e6:	f01d fd55 	bl	27294 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    97ea:	b9a8      	cbnz	r0, 9818 <bt_id_set_scan_own_addr+0x40>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    97ec:	f01d fd80 	bl	272f0 <bt_id_set_private_addr>
			if (err) {
    97f0:	4604      	mov	r4, r0
    97f2:	b178      	cbz	r0, 9814 <bt_id_set_scan_own_addr+0x3c>
				if (active_scan || !is_adv_using_rand_addr()) {
    97f4:	b98e      	cbnz	r6, 981a <bt_id_set_scan_own_addr+0x42>
    97f6:	f01d fd4d 	bl	27294 <is_adv_using_rand_addr>
    97fa:	b170      	cbz	r0, 981a <bt_id_set_scan_own_addr+0x42>
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    97fc:	4b09      	ldr	r3, [pc, #36]	; (9824 <bt_id_set_scan_own_addr+0x4c>)
    97fe:	480a      	ldr	r0, [pc, #40]	; (9828 <bt_id_set_scan_own_addr+0x50>)
    9800:	e9cd 3406 	strd	r3, r4, [sp, #24]
    9804:	aa05      	add	r2, sp, #20
    9806:	2303      	movs	r3, #3
    9808:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    980c:	9301      	str	r3, [sp, #4]
    980e:	9305      	str	r3, [sp, #20]
    9810:	f01d fd25 	bl	2725e <z_log_msg2_static_create.constprop.0>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    9814:	2301      	movs	r3, #1
    9816:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    9818:	2400      	movs	r4, #0
}
    981a:	4620      	mov	r0, r4
    981c:	b008      	add	sp, #32
    981e:	bd70      	pop	{r4, r5, r6, pc}
    9820:	20000000 	.word	0x20000000
    9824:	0002e483 	.word	0x0002e483
    9828:	0002b6cc 	.word	0x0002b6cc

0000982c <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    982c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9830:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    9834:	7806      	ldrb	r6, [r0, #0]
{
    9836:	4680      	mov	r8, r0
    9838:	460d      	mov	r5, r1
    983a:	4691      	mov	r9, r2
    983c:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    983e:	d02b      	beq.n	9898 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    9840:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 98f8 <bt_id_set_adv_own_addr+0xcc>
    9844:	b12a      	cbz	r2, 9852 <bt_id_set_adv_own_addr+0x26>
    9846:	0688      	lsls	r0, r1, #26
    9848:	d503      	bpl.n	9852 <bt_id_set_adv_own_addr+0x26>
    984a:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    984e:	0659      	lsls	r1, r3, #25
    9850:	d54f      	bpl.n	98f2 <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9852:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    9856:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    985a:	f818 3003 	ldrb.w	r3, [r8, r3]
    985e:	2b01      	cmp	r3, #1
    9860:	d009      	beq.n	9876 <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    9862:	ebaa 0606 	sub.w	r6, sl, r6
    9866:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    986a:	f1b9 0f00 	cmp.w	r9, #0
    986e:	d10e      	bne.n	988e <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9870:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    9872:	2400      	movs	r4, #0
    9874:	e008      	b.n	9888 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    9876:	2007      	movs	r0, #7
    9878:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    987c:	4440      	add	r0, r8
    987e:	f7ff fd11 	bl	92a4 <set_random_address>
				if (err) {
    9882:	4604      	mov	r4, r0
    9884:	2800      	cmp	r0, #0
    9886:	d0ec      	beq.n	9862 <bt_id_set_adv_own_addr+0x36>
}
    9888:	4620      	mov	r0, r4
    988a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    988e:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9890:	bf48      	it	mi
    9892:	f043 0302 	orrmi.w	r3, r3, #2
    9896:	e7eb      	b.n	9870 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9898:	f011 0504 	ands.w	r5, r1, #4
    989c:	d014      	beq.n	98c8 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    989e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 98f8 <bt_id_set_adv_own_addr+0xcc>
    98a2:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    98a6:	00f5      	lsls	r5, r6, #3
    98a8:	f818 3003 	ldrb.w	r3, [r8, r3]
    98ac:	2b01      	cmp	r3, #1
    98ae:	d106      	bne.n	98be <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    98b0:	2007      	movs	r0, #7
    98b2:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    98b6:	4440      	add	r0, r8
    98b8:	f7ff fcf4 	bl	92a4 <set_random_address>
    98bc:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    98be:	1bad      	subs	r5, r5, r6
    98c0:	f818 3005 	ldrb.w	r3, [r8, r5]
    98c4:	703b      	strb	r3, [r7, #0]
    98c6:	e7df      	b.n	9888 <bt_id_set_adv_own_addr+0x5c>
    98c8:	480c      	ldr	r0, [pc, #48]	; (98fc <bt_id_set_adv_own_addr+0xd0>)
    98ca:	f01d fc6b 	bl	271a4 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    98ce:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    98d0:	f3c0 1640 	ubfx	r6, r0, #5, #1
    98d4:	d502      	bpl.n	98dc <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    98d6:	4628      	mov	r0, r5
    98d8:	f01d fe50 	bl	2757c <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    98dc:	4640      	mov	r0, r8
    98de:	f01d fd19 	bl	27314 <bt_id_set_adv_private_addr>
    98e2:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    98e4:	2001      	movs	r0, #1
    98e6:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    98e8:	2e00      	cmp	r6, #0
    98ea:	d0cd      	beq.n	9888 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    98ec:	f01d fe46 	bl	2757c <bt_le_scan_set_enable>
		if (err) {
    98f0:	e7ca      	b.n	9888 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    98f2:	f06f 0485 	mvn.w	r4, #133	; 0x85
    98f6:	e7c7      	b.n	9888 <bt_id_set_adv_own_addr+0x5c>
    98f8:	20000000 	.word	0x20000000
    98fc:	200000cc 	.word	0x200000cc

00009900 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    9900:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    9902:	4d14      	ldr	r5, [pc, #80]	; (9954 <bt_id_init+0x54>)
    9904:	79eb      	ldrb	r3, [r5, #7]
{
    9906:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    9908:	b11b      	cbz	r3, 9912 <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    990a:	2400      	movs	r4, #0
}
    990c:	4620      	mov	r0, r4
    990e:	b009      	add	sp, #36	; 0x24
    9910:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    9912:	f7ff febd 	bl	9690 <bt_setup_public_id_addr>
		if (err) {
    9916:	4604      	mov	r4, r0
    9918:	b158      	cbz	r0, 9932 <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
    991a:	4b0f      	ldr	r3, [pc, #60]	; (9958 <bt_id_init+0x58>)
			BT_ERR("Unable to set random address");
    991c:	9306      	str	r3, [sp, #24]
    991e:	480f      	ldr	r0, [pc, #60]	; (995c <bt_id_init+0x5c>)
    9920:	2302      	movs	r3, #2
    9922:	aa05      	add	r2, sp, #20
    9924:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9928:	9301      	str	r3, [sp, #4]
    992a:	9305      	str	r3, [sp, #20]
    992c:	f01d fc97 	bl	2725e <z_log_msg2_static_create.constprop.0>
			return err;
    9930:	e7ec      	b.n	990c <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    9932:	79eb      	ldrb	r3, [r5, #7]
    9934:	2b00      	cmp	r3, #0
    9936:	d1e8      	bne.n	990a <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    9938:	f7ff ff10 	bl	975c <bt_setup_random_id_addr>
		if (err) {
    993c:	4604      	mov	r4, r0
    993e:	2800      	cmp	r0, #0
    9940:	d1eb      	bne.n	991a <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    9942:	1c68      	adds	r0, r5, #1
    9944:	f7ff fcae 	bl	92a4 <set_random_address>
		if (err) {
    9948:	4604      	mov	r4, r0
    994a:	2800      	cmp	r0, #0
    994c:	d0de      	beq.n	990c <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    994e:	4b04      	ldr	r3, [pc, #16]	; (9960 <bt_id_init+0x60>)
    9950:	e7e4      	b.n	991c <bt_id_init+0x1c>
    9952:	bf00      	nop
    9954:	20000000 	.word	0x20000000
    9958:	0002e4b9 	.word	0x0002e4b9
    995c:	0002b6cc 	.word	0x0002b6cc
    9960:	0002e4d8 	.word	0x0002e4d8

00009964 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    9964:	6843      	ldr	r3, [r0, #4]
{
    9966:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9968:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    996a:	0558      	lsls	r0, r3, #21
    996c:	d502      	bpl.n	9974 <valid_adv_param+0x10>
		return false;
    996e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    9970:	b003      	add	sp, #12
    9972:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9974:	6922      	ldr	r2, [r4, #16]
    9976:	b10a      	cbz	r2, 997c <valid_adv_param+0x18>
    9978:	07d9      	lsls	r1, r3, #31
    997a:	d5f8      	bpl.n	996e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    997c:	4d1a      	ldr	r5, [pc, #104]	; (99e8 <valid_adv_param+0x84>)
    997e:	7820      	ldrb	r0, [r4, #0]
    9980:	79eb      	ldrb	r3, [r5, #7]
    9982:	4283      	cmp	r3, r0
    9984:	d9f3      	bls.n	996e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    9986:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    998a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    998c:	2207      	movs	r2, #7
    998e:	4669      	mov	r1, sp
    9990:	4428      	add	r0, r5
    9992:	9300      	str	r3, [sp, #0]
    9994:	f8cd 3003 	str.w	r3, [sp, #3]
    9998:	f021 f84f 	bl	2aa3a <memcmp>
	if (param->id >= bt_dev.id_count ||
    999c:	2800      	cmp	r0, #0
    999e:	d0e6      	beq.n	996e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    99a0:	6860      	ldr	r0, [r4, #4]
    99a2:	07c2      	lsls	r2, r0, #31
    99a4:	d406      	bmi.n	99b4 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    99a6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    99aa:	2b08      	cmp	r3, #8
    99ac:	d802      	bhi.n	99b4 <valid_adv_param+0x50>
    99ae:	68a3      	ldr	r3, [r4, #8]
    99b0:	2b9f      	cmp	r3, #159	; 0x9f
    99b2:	d9dc      	bls.n	996e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    99b4:	f010 0f30 	tst.w	r0, #48	; 0x30
    99b8:	d002      	beq.n	99c0 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    99ba:	6923      	ldr	r3, [r4, #16]
    99bc:	2b00      	cmp	r3, #0
    99be:	d0d6      	beq.n	996e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    99c0:	06c3      	lsls	r3, r0, #27
    99c2:	d401      	bmi.n	99c8 <valid_adv_param+0x64>
    99c4:	6923      	ldr	r3, [r4, #16]
    99c6:	b943      	cbnz	r3, 99da <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    99c8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    99cc:	429a      	cmp	r2, r3
    99ce:	d8ce      	bhi.n	996e <valid_adv_param+0xa>
    99d0:	2a1f      	cmp	r2, #31
    99d2:	d9cc      	bls.n	996e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    99d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    99d8:	d8c9      	bhi.n	996e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    99da:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    99de:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    99e2:	bf18      	it	ne
    99e4:	2001      	movne	r0, #1
    99e6:	e7c3      	b.n	9970 <valid_adv_param+0xc>
    99e8:	20000000 	.word	0x20000000

000099ec <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    99ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    99f0:	460c      	mov	r4, r1
    99f2:	b08b      	sub	sp, #44	; 0x2c
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99f4:	2120      	movs	r1, #32
{
    99f6:	4682      	mov	sl, r0
    99f8:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    99fa:	f7fe fc3d 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    99fe:	4605      	mov	r5, r0
    9a00:	2800      	cmp	r0, #0
    9a02:	d05e      	beq.n	9ac2 <hci_set_ad+0xd6>
    9a04:	2120      	movs	r1, #32
    9a06:	3008      	adds	r0, #8
    9a08:	f01f ff9f 	bl	2994a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    9a0c:	2220      	movs	r2, #32
    9a0e:	2100      	movs	r1, #0
    9a10:	4681      	mov	r9, r0
    9a12:	f021 f843 	bl	2aa9c <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9a16:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
    9a1a:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    9a1e:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    9a20:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9a22:	f8d4 8000 	ldr.w	r8, [r4]
    9a26:	2300      	movs	r3, #0
    9a28:	6862      	ldr	r2, [r4, #4]
    9a2a:	4293      	cmp	r3, r2
    9a2c:	d30d      	bcc.n	9a4a <hci_set_ad+0x5e>
	for (size_t i = 0; i < ad_len; i++) {
    9a2e:	9b00      	ldr	r3, [sp, #0]
    9a30:	3408      	adds	r4, #8
    9a32:	42a3      	cmp	r3, r4
    9a34:	d1f5      	bne.n	9a22 <hci_set_ad+0x36>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a36:	2200      	movs	r2, #0
    9a38:	4629      	mov	r1, r5
    9a3a:	4650      	mov	r0, sl
	*data_len = set_data_len;
    9a3c:	f889 6000 	strb.w	r6, [r9]
}
    9a40:	b00b      	add	sp, #44	; 0x2c
    9a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9a46:	f7fe bd7f 	b.w	8548 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9a4a:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    9a4e:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9a52:	1cb0      	adds	r0, r6, #2
    9a54:	1811      	adds	r1, r2, r0
    9a56:	291f      	cmp	r1, #31
    9a58:	d91c      	bls.n	9a94 <hci_set_ad+0xa8>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a5a:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    9a5e:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9a62:	d101      	bne.n	9a68 <hci_set_ad+0x7c>
    9a64:	2a00      	cmp	r2, #0
    9a66:	dc13      	bgt.n	9a90 <hci_set_ad+0xa4>
					BT_ERR("Too big advertising data");
    9a68:	4b17      	ldr	r3, [pc, #92]	; (9ac8 <hci_set_ad+0xdc>)
    9a6a:	9308      	str	r3, [sp, #32]
    9a6c:	2302      	movs	r3, #2
    9a6e:	9303      	str	r3, [sp, #12]
    9a70:	9307      	str	r3, [sp, #28]
    9a72:	4816      	ldr	r0, [pc, #88]	; (9acc <hci_set_ad+0xe0>)
    9a74:	2300      	movs	r3, #0
    9a76:	aa07      	add	r2, sp, #28
    9a78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9a7c:	f01b ff9b 	bl	259b6 <z_impl_z_log_msg2_static_create>
		net_buf_unref(buf);
    9a80:	4628      	mov	r0, r5
    9a82:	f016 f971 	bl	1fd68 <net_buf_unref>
					return -EINVAL;
    9a86:	f06f 0015 	mvn.w	r0, #21
}
    9a8a:	b00b      	add	sp, #44	; 0x2c
    9a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    9a90:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    9a94:	b2d7      	uxtb	r7, r2
    9a96:	1c79      	adds	r1, r7, #1
    9a98:	f80b 1006 	strb.w	r1, [fp, r6]
    9a9c:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    9a9e:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    9aa0:	fa5b f080 	uxtab	r0, fp, r0
    9aa4:	f80b c001 	strb.w	ip, [fp, r1]
    9aa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9aac:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9aae:	3702      	adds	r7, #2
    9ab0:	f020 ffd3 	bl	2aa5a <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9ab4:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9ab6:	443e      	add	r6, r7
    9ab8:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    9aba:	3301      	adds	r3, #1
    9abc:	f108 0808 	add.w	r8, r8, #8
    9ac0:	e7b2      	b.n	9a28 <hci_set_ad+0x3c>
		return -ENOBUFS;
    9ac2:	f06f 0068 	mvn.w	r0, #104	; 0x68
    9ac6:	e7e0      	b.n	9a8a <hci_set_ad+0x9e>
    9ac8:	0002e4fb 	.word	0x0002e4fb
    9acc:	0002b5bc 	.word	0x0002b5bc

00009ad0 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    9ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    9ad2:	4606      	mov	r6, r0
    9ad4:	4b1e      	ldr	r3, [pc, #120]	; (9b50 <le_adv_start_add_conn+0x80>)
    9ad6:	f816 2b09 	ldrb.w	r2, [r6], #9
    9ada:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    9ade:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9ae0:	2300      	movs	r3, #0
{
    9ae2:	4605      	mov	r5, r0
    9ae4:	2207      	movs	r2, #7
    9ae6:	460f      	mov	r7, r1
    9ae8:	4630      	mov	r0, r6
    9aea:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9aec:	9300      	str	r3, [sp, #0]
    9aee:	f8cd 3003 	str.w	r3, [sp, #3]
    9af2:	f020 ffa2 	bl	2aa3a <memcmp>
    9af6:	782a      	ldrb	r2, [r5, #0]
    9af8:	4604      	mov	r4, r0
    9afa:	b9a8      	cbnz	r0, 9b28 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    9afc:	4b15      	ldr	r3, [pc, #84]	; (9b54 <le_adv_start_add_conn+0x84>)
    9afe:	6818      	ldr	r0, [r3, #0]
    9b00:	8899      	ldrh	r1, [r3, #4]
    9b02:	9002      	str	r0, [sp, #8]
    9b04:	799b      	ldrb	r3, [r3, #6]
    9b06:	f8ad 100c 	strh.w	r1, [sp, #12]
    9b0a:	4610      	mov	r0, r2
    9b0c:	a902      	add	r1, sp, #8
    9b0e:	f88d 300e 	strb.w	r3, [sp, #14]
    9b12:	f001 f9bd 	bl	ae90 <bt_conn_add_le>
		if (!conn) {
    9b16:	4605      	mov	r5, r0
    9b18:	b1b8      	cbz	r0, 9b4a <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    9b1a:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9b1c:	f000 ff9c 	bl	aa58 <bt_conn_set_state>
	*out_conn = conn;
    9b20:	603d      	str	r5, [r7, #0]
	return 0;
}
    9b22:	4620      	mov	r0, r4
    9b24:	b005      	add	sp, #20
    9b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    9b28:	4631      	mov	r1, r6
    9b2a:	4610      	mov	r0, r2
    9b2c:	f001 f9ea 	bl	af04 <bt_conn_exists_le>
    9b30:	4604      	mov	r4, r0
    9b32:	b938      	cbnz	r0, 9b44 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    9b34:	7828      	ldrb	r0, [r5, #0]
    9b36:	4631      	mov	r1, r6
    9b38:	f001 f9aa 	bl	ae90 <bt_conn_add_le>
	if (!conn) {
    9b3c:	4605      	mov	r5, r0
    9b3e:	b120      	cbz	r0, 9b4a <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    9b40:	2105      	movs	r1, #5
    9b42:	e7eb      	b.n	9b1c <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    9b44:	f06f 0415 	mvn.w	r4, #21
    9b48:	e7eb      	b.n	9b22 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    9b4a:	f06f 040b 	mvn.w	r4, #11
    9b4e:	e7e8      	b.n	9b22 <le_adv_start_add_conn+0x52>
    9b50:	20000000 	.word	0x20000000
    9b54:	0002b811 	.word	0x0002b811

00009b58 <bt_le_ext_adv_foreach>:
{
    9b58:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    9b5a:	4801      	ldr	r0, [pc, #4]	; (9b60 <bt_le_ext_adv_foreach+0x8>)
    9b5c:	4718      	bx	r3
    9b5e:	bf00      	nop
    9b60:	20000018 	.word	0x20000018

00009b64 <bt_le_adv_lookup_legacy>:
}
    9b64:	4800      	ldr	r0, [pc, #0]	; (9b68 <bt_le_adv_lookup_legacy+0x4>)
    9b66:	4770      	bx	lr
    9b68:	20000018 	.word	0x20000018

00009b6c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    9b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9b70:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    9b72:	690f      	ldr	r7, [r1, #16]
{
    9b74:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
    9b76:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    9b78:	1afc      	subs	r4, r7, r3
{
    9b7a:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9b7c:	488e      	ldr	r0, [pc, #568]	; (9db8 <bt_le_adv_start_legacy+0x24c>)
	struct bt_conn *conn = NULL;
    9b7e:	9306      	str	r3, [sp, #24]
	bool dir_adv = (param->peer != NULL), scannable = false;
    9b80:	bf18      	it	ne
    9b82:	2401      	movne	r4, #1
    9b84:	f01d fc00 	bl	27388 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b88:	0780      	lsls	r0, r0, #30
{
    9b8a:	460d      	mov	r5, r1
    9b8c:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b8e:	f140 8108 	bpl.w	9da2 <bt_le_adv_start_legacy+0x236>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    9b92:	4608      	mov	r0, r1
    9b94:	f7ff fee6 	bl	9964 <valid_adv_param>
    9b98:	b928      	cbnz	r0, 9ba6 <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    9b9a:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    9b9e:	4620      	mov	r0, r4
    9ba0:	b013      	add	sp, #76	; 0x4c
    9ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    9ba6:	4628      	mov	r0, r5
    9ba8:	f7ff fbd8 	bl	935c <bt_id_adv_random_addr_check>
    9bac:	4681      	mov	r9, r0
    9bae:	2800      	cmp	r0, #0
    9bb0:	d0f3      	beq.n	9b9a <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9bb2:	f106 0810 	add.w	r8, r6, #16
    9bb6:	4640      	mov	r0, r8
    9bb8:	f01d fbe6 	bl	27388 <atomic_get>
    9bbc:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9bbe:	f3c0 1380 	ubfx	r3, r0, #6, #1
    9bc2:	f100 80f1 	bmi.w	9da8 <bt_le_adv_start_legacy+0x23c>
	(void)memset(&set_param, 0, sizeof(set_param));
    9bc6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    9bca:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    9bce:	68ab      	ldr	r3, [r5, #8]
    9bd0:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    9bd4:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    9bd6:	68eb      	ldr	r3, [r5, #12]
    9bd8:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    9bdc:	f01d fbc5 	bl	2736a <get_adv_channel_map>
	if (adv->id != param->id) {
    9be0:	7832      	ldrb	r2, [r6, #0]
    9be2:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    9be4:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    9be8:	429a      	cmp	r2, r3
    9bea:	d004      	beq.n	9bf6 <bt_le_adv_start_legacy+0x8a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9bec:	4872      	ldr	r0, [pc, #456]	; (9db8 <bt_le_adv_start_legacy+0x24c>)
    9bee:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    9bf2:	f01d fbcf 	bl	27394 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    9bf6:	4a71      	ldr	r2, [pc, #452]	; (9dbc <bt_le_adv_start_legacy+0x250>)
	adv->id = param->id;
    9bf8:	782b      	ldrb	r3, [r5, #0]
    9bfa:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    9bfc:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    9c00:	6869      	ldr	r1, [r5, #4]
    9c02:	4622      	mov	r2, r4
    9c04:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    9c08:	4630      	mov	r0, r6
    9c0a:	f7ff fe0f 	bl	982c <bt_id_set_adv_own_addr>
	if (err) {
    9c0e:	4604      	mov	r4, r0
    9c10:	2800      	cmp	r0, #0
    9c12:	d1c4      	bne.n	9b9e <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9c14:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    9c18:	2f00      	cmp	r7, #0
    9c1a:	d053      	beq.n	9cc4 <bt_le_adv_start_legacy+0x158>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    9c1c:	6929      	ldr	r1, [r5, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9c1e:	f01d fbc8 	bl	273b2 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
    9c22:	4628      	mov	r0, r5
    9c24:	f01d fc5a 	bl	274dc <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c28:	686b      	ldr	r3, [r5, #4]
    9c2a:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    9c2c:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    9c2e:	d551      	bpl.n	9cd4 <bt_le_adv_start_legacy+0x168>
		if (dir_adv) {
    9c30:	2f00      	cmp	r7, #0
    9c32:	d04c      	beq.n	9cce <bt_le_adv_start_legacy+0x162>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    9c34:	f013 0f10 	tst.w	r3, #16
    9c38:	bf14      	ite	ne
    9c3a:	2304      	movne	r3, #4
    9c3c:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    9c3e:	6929      	ldr	r1, [r5, #16]
    9c40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9c44:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    9c48:	f01d fbb3 	bl	273b2 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    9c4c:	f04f 0900 	mov.w	r9, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    9c50:	210f      	movs	r1, #15
    9c52:	f242 0006 	movw	r0, #8198	; 0x2006
    9c56:	f7fe fb0f 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    9c5a:	4604      	mov	r4, r0
    9c5c:	2800      	cmp	r0, #0
    9c5e:	f000 80a6 	beq.w	9dae <bt_le_adv_start_legacy+0x242>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9c62:	220f      	movs	r2, #15
    9c64:	a908      	add	r1, sp, #32
    9c66:	3008      	adds	r0, #8
    9c68:	f01f fe75 	bl	29956 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    9c6c:	2200      	movs	r2, #0
    9c6e:	4621      	mov	r1, r4
    9c70:	f242 0006 	movw	r0, #8198	; 0x2006
    9c74:	f7fe fc68 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    9c78:	2800      	cmp	r0, #0
    9c7a:	f040 809b 	bne.w	9db4 <bt_le_adv_start_legacy+0x248>
	if (!dir_adv) {
    9c7e:	2f00      	cmp	r7, #0
    9c80:	d038      	beq.n	9cf4 <bt_le_adv_start_legacy+0x188>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    9c82:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9c84:	07dc      	lsls	r4, r3, #31
    9c86:	d443      	bmi.n	9d10 <bt_le_adv_start_legacy+0x1a4>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9c88:	2101      	movs	r1, #1
    9c8a:	4630      	mov	r0, r6
    9c8c:	f01d fc36 	bl	274fc <bt_le_adv_set_enable_legacy>
	if (err) {
    9c90:	4604      	mov	r4, r0
    9c92:	2800      	cmp	r0, #0
    9c94:	d07e      	beq.n	9d94 <bt_le_adv_start_legacy+0x228>
		BT_ERR("Failed to start advertiser");
    9c96:	4b4a      	ldr	r3, [pc, #296]	; (9dc0 <bt_le_adv_start_legacy+0x254>)
    9c98:	9310      	str	r3, [sp, #64]	; 0x40
    9c9a:	2302      	movs	r3, #2
    9c9c:	9307      	str	r3, [sp, #28]
    9c9e:	930f      	str	r3, [sp, #60]	; 0x3c
    9ca0:	4848      	ldr	r0, [pc, #288]	; (9dc4 <bt_le_adv_start_legacy+0x258>)
    9ca2:	2300      	movs	r3, #0
    9ca4:	aa0f      	add	r2, sp, #60	; 0x3c
    9ca6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9caa:	f01b fe84 	bl	259b6 <z_impl_z_log_msg2_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9cae:	9806      	ldr	r0, [sp, #24]
    9cb0:	2800      	cmp	r0, #0
    9cb2:	f43f af74 	beq.w	9b9e <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9cb6:	2100      	movs	r1, #0
    9cb8:	f000 fece 	bl	aa58 <bt_conn_set_state>
			bt_conn_unref(conn);
    9cbc:	9806      	ldr	r0, [sp, #24]
    9cbe:	f01d fd04 	bl	276ca <bt_conn_unref>
    9cc2:	e76c      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    9cc4:	970c      	str	r7, [sp, #48]	; 0x30
    9cc6:	a90c      	add	r1, sp, #48	; 0x30
    9cc8:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
    9ccc:	e7a7      	b.n	9c1e <bt_le_adv_start_legacy+0xb2>
			set_param.type = BT_HCI_ADV_IND;
    9cce:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    9cd2:	e7bd      	b.n	9c50 <bt_le_adv_start_legacy+0xe4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    9cd4:	059b      	lsls	r3, r3, #22
    9cd6:	d403      	bmi.n	9ce0 <bt_le_adv_start_legacy+0x174>
    9cd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9cda:	b90b      	cbnz	r3, 9ce0 <bt_le_adv_start_legacy+0x174>
    9cdc:	2802      	cmp	r0, #2
    9cde:	d103      	bne.n	9ce8 <bt_le_adv_start_legacy+0x17c>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    9ce0:	2302      	movs	r3, #2
    9ce2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9ce6:	e7b3      	b.n	9c50 <bt_le_adv_start_legacy+0xe4>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    9ce8:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    9cea:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    9cee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    9cf2:	e7ad      	b.n	9c50 <bt_le_adv_start_legacy+0xe4>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    9cf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9cf6:	9300      	str	r3, [sp, #0]
    9cf8:	e9cd 9a01 	strd	r9, sl, [sp, #4]
    9cfc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    9cfe:	9a05      	ldr	r2, [sp, #20]
    9d00:	4659      	mov	r1, fp
    9d02:	4630      	mov	r0, r6
    9d04:	f01d fb73 	bl	273ee <le_adv_update.constprop.0>
		if (err) {
    9d08:	4604      	mov	r4, r0
    9d0a:	2800      	cmp	r0, #0
    9d0c:	d0b9      	beq.n	9c82 <bt_le_adv_start_legacy+0x116>
    9d0e:	e746      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
    9d10:	a906      	add	r1, sp, #24
    9d12:	4630      	mov	r0, r6
    9d14:	f7ff fedc 	bl	9ad0 <le_adv_start_add_conn>
		if (err) {
    9d18:	4604      	mov	r4, r0
    9d1a:	2800      	cmp	r0, #0
    9d1c:	d0b4      	beq.n	9c88 <bt_le_adv_start_legacy+0x11c>
			if (err == -ENOMEM && !dir_adv &&
    9d1e:	f110 0f0c 	cmn.w	r0, #12
    9d22:	f47f af3c 	bne.w	9b9e <bt_le_adv_start_legacy+0x32>
    9d26:	2f00      	cmp	r7, #0
    9d28:	f47f af39 	bne.w	9b9e <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    9d2c:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    9d2e:	0798      	lsls	r0, r3, #30
    9d30:	f53f af35 	bmi.w	9b9e <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9d34:	686c      	ldr	r4, [r5, #4]
    9d36:	f084 0402 	eor.w	r4, r4, #2
    9d3a:	f3c4 0440 	ubfx	r4, r4, #1, #1
    9d3e:	f004 0201 	and.w	r2, r4, #1
    9d42:	210d      	movs	r1, #13
    9d44:	4640      	mov	r0, r8
    9d46:	f01d fb3b 	bl	273c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    9d4a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    9d4e:	425a      	negs	r2, r3
    9d50:	415a      	adcs	r2, r3
    9d52:	2107      	movs	r1, #7
    9d54:	4640      	mov	r0, r8
    9d56:	f01d fb33 	bl	273c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    9d5a:	f1aa 0102 	sub.w	r1, sl, #2
    9d5e:	424a      	negs	r2, r1
    9d60:	414a      	adcs	r2, r1
    9d62:	4640      	mov	r0, r8
    9d64:	2108      	movs	r1, #8
    9d66:	f01d fb2b 	bl	273c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    9d6a:	686a      	ldr	r2, [r5, #4]
    9d6c:	2109      	movs	r1, #9
    9d6e:	f002 0201 	and.w	r2, r2, #1
    9d72:	4640      	mov	r0, r8
    9d74:	f01d fb24 	bl	273c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    9d78:	464a      	mov	r2, r9
    9d7a:	210a      	movs	r1, #10
    9d7c:	4640      	mov	r0, r8
    9d7e:	f01d fb1f 	bl	273c0 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    9d82:	686a      	ldr	r2, [r5, #4]
    9d84:	210c      	movs	r1, #12
    9d86:	f3c2 0280 	ubfx	r2, r2, #2, #1
    9d8a:	4640      	mov	r0, r8
    9d8c:	f01d fb18 	bl	273c0 <atomic_set_bit_to>
	return 0;
    9d90:	2400      	movs	r4, #0
    9d92:	e704      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    9d94:	9806      	ldr	r0, [sp, #24]
    9d96:	b108      	cbz	r0, 9d9c <bt_le_adv_start_legacy+0x230>
		bt_conn_unref(conn);
    9d98:	f01d fc97 	bl	276ca <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    9d9c:	2f00      	cmp	r7, #0
    9d9e:	d1ce      	bne.n	9d3e <bt_le_adv_start_legacy+0x1d2>
    9da0:	e7c8      	b.n	9d34 <bt_le_adv_start_legacy+0x1c8>
		return -EAGAIN;
    9da2:	f06f 040a 	mvn.w	r4, #10
    9da6:	e6fa      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    9da8:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9dac:	e6f7      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    9dae:	f06f 0468 	mvn.w	r4, #104	; 0x68
    9db2:	e6f4      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
    9db4:	4604      	mov	r4, r0
    9db6:	e6f2      	b.n	9b9e <bt_le_adv_start_legacy+0x32>
    9db8:	200000cc 	.word	0x200000cc
    9dbc:	20000000 	.word	0x20000000
    9dc0:	0002e514 	.word	0x0002e514
    9dc4:	0002b5bc 	.word	0x0002b5bc

00009dc8 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    9dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9dca:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    9dcc:	9a06      	ldr	r2, [sp, #24]
{
    9dce:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    9dd0:	e9cd 3200 	strd	r3, r2, [sp]
    9dd4:	462b      	mov	r3, r5
    9dd6:	460a      	mov	r2, r1
    9dd8:	4601      	mov	r1, r0
    9dda:	4811      	ldr	r0, [pc, #68]	; (9e20 <bt_le_adv_start+0x58>)
    9ddc:	f7ff fec6 	bl	9b6c <bt_le_adv_start_legacy>
    9de0:	4621      	mov	r1, r4
    9de2:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    9de4:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    9de6:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    9dea:	429d      	cmp	r5, r3
    9dec:	d102      	bne.n	9df4 <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    9dee:	4630      	mov	r0, r6
    9df0:	b002      	add	sp, #8
    9df2:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    9df4:	880a      	ldrh	r2, [r1, #0]
    9df6:	4282      	cmp	r2, r0
    9df8:	d104      	bne.n	9e04 <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    9dfa:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    9dfc:	b112      	cbz	r2, 9e04 <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    9dfe:	7812      	ldrb	r2, [r2, #0]
    9e00:	07d2      	lsls	r2, r2, #31
    9e02:	d402      	bmi.n	9e0a <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    9e04:	3301      	adds	r3, #1
    9e06:	3108      	adds	r1, #8
    9e08:	e7ef      	b.n	9dea <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    9e0a:	4906      	ldr	r1, [pc, #24]	; (9e24 <bt_le_adv_start+0x5c>)
    9e0c:	4806      	ldr	r0, [pc, #24]	; (9e28 <bt_le_adv_start+0x60>)
    9e0e:	f020 fac6 	bl	2a39e <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    9e12:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9e16:	2300      	movs	r3, #0
    9e18:	4803      	ldr	r0, [pc, #12]	; (9e28 <bt_le_adv_start+0x60>)
    9e1a:	f018 fd2d 	bl	22878 <k_work_reschedule>
    9e1e:	e7e6      	b.n	9dee <bt_le_adv_start+0x26>
    9e20:	20000018 	.word	0x20000018
    9e24:	00009eed 	.word	0x00009eed
    9e28:	20000030 	.word	0x20000030

00009e2c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    9e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    9e2e:	4829      	ldr	r0, [pc, #164]	; (9ed4 <bt_le_adv_stop+0xa8>)
    9e30:	f01d fb8b 	bl	2754a <bt_le_lim_adv_cancel_timeout>
    9e34:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    9e38:	4827      	ldr	r0, [pc, #156]	; (9ed8 <bt_le_adv_stop+0xac>)
    9e3a:	f01d faab 	bl	27394 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9e3e:	4826      	ldr	r0, [pc, #152]	; (9ed8 <bt_le_adv_stop+0xac>)
    9e40:	f01d faa2 	bl	27388 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    9e44:	0641      	lsls	r1, r0, #25
    9e46:	d403      	bmi.n	9e50 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    9e48:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    9e4a:	4620      	mov	r0, r4
    9e4c:	b004      	add	sp, #16
    9e4e:	bd10      	pop	{r4, pc}
    9e50:	4821      	ldr	r0, [pc, #132]	; (9ed8 <bt_le_adv_stop+0xac>)
    9e52:	f01d fa99 	bl	27388 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    9e56:	0582      	lsls	r2, r0, #22
    9e58:	d521      	bpl.n	9e9e <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    9e5a:	2300      	movs	r3, #0
    9e5c:	481f      	ldr	r0, [pc, #124]	; (9edc <bt_le_adv_stop+0xb0>)
    9e5e:	9300      	str	r3, [sp, #0]
    9e60:	2207      	movs	r2, #7
    9e62:	4669      	mov	r1, sp
    9e64:	f8cd 3003 	str.w	r3, [sp, #3]
    9e68:	f020 fde7 	bl	2aa3a <memcmp>
    9e6c:	4b1c      	ldr	r3, [pc, #112]	; (9ee0 <bt_le_adv_stop+0xb4>)
    9e6e:	bb60      	cbnz	r0, 9eca <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    9e70:	4a1c      	ldr	r2, [pc, #112]	; (9ee4 <bt_le_adv_stop+0xb8>)
    9e72:	8891      	ldrh	r1, [r2, #4]
    9e74:	6810      	ldr	r0, [r2, #0]
    9e76:	7992      	ldrb	r2, [r2, #6]
    9e78:	f8ad 100c 	strh.w	r1, [sp, #12]
    9e7c:	f88d 200e 	strb.w	r2, [sp, #14]
    9e80:	9002      	str	r0, [sp, #8]
    9e82:	2204      	movs	r2, #4
    9e84:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9e86:	7e18      	ldrb	r0, [r3, #24]
    9e88:	f001 f860 	bl	af4c <bt_conn_lookup_state_le>
    9e8c:	4604      	mov	r4, r0
	if (conn) {
    9e8e:	b130      	cbz	r0, 9e9e <bt_le_adv_stop+0x72>
		conn->err = status;
    9e90:	2100      	movs	r1, #0
    9e92:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9e94:	f000 fde0 	bl	aa58 <bt_conn_set_state>
		bt_conn_unref(conn);
    9e98:	4620      	mov	r0, r4
    9e9a:	f01d fc16 	bl	276ca <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    9e9e:	480d      	ldr	r0, [pc, #52]	; (9ed4 <bt_le_adv_stop+0xa8>)
    9ea0:	2100      	movs	r1, #0
    9ea2:	f01d fb2b 	bl	274fc <bt_le_adv_set_enable_legacy>
		if (err) {
    9ea6:	4604      	mov	r4, r0
    9ea8:	2800      	cmp	r0, #0
    9eaa:	d1ce      	bne.n	9e4a <bt_le_adv_stop+0x1e>
    9eac:	480e      	ldr	r0, [pc, #56]	; (9ee8 <bt_le_adv_stop+0xbc>)
    9eae:	f01d fa6b 	bl	27388 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    9eb2:	0683      	lsls	r3, r0, #26
    9eb4:	d5c8      	bpl.n	9e48 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    9eb6:	4620      	mov	r0, r4
    9eb8:	f01d fb60 	bl	2757c <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    9ebc:	4620      	mov	r0, r4
    9ebe:	f01d fa17 	bl	272f0 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    9ec2:	2001      	movs	r0, #1
    9ec4:	f01d fb5a 	bl	2757c <bt_le_scan_set_enable>
    9ec8:	e7bf      	b.n	9e4a <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    9eca:	2205      	movs	r2, #5
    9ecc:	f103 0121 	add.w	r1, r3, #33	; 0x21
    9ed0:	e7d9      	b.n	9e86 <bt_le_adv_stop+0x5a>
    9ed2:	bf00      	nop
    9ed4:	20000018 	.word	0x20000018
    9ed8:	20000028 	.word	0x20000028
    9edc:	20000021 	.word	0x20000021
    9ee0:	20000000 	.word	0x20000000
    9ee4:	0002b811 	.word	0x0002b811
    9ee8:	200000cc 	.word	0x200000cc

00009eec <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    9eec:	b500      	push	{lr}
    9eee:	b089      	sub	sp, #36	; 0x24
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    9ef0:	f7ff ff9c 	bl	9e2c <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    9ef4:	4b07      	ldr	r3, [pc, #28]	; (9f14 <adv_timeout+0x28>)
    9ef6:	e9cd 3006 	strd	r3, r0, [sp, #24]
    9efa:	2303      	movs	r3, #3
    9efc:	9301      	str	r3, [sp, #4]
    9efe:	9305      	str	r3, [sp, #20]
    9f00:	4805      	ldr	r0, [pc, #20]	; (9f18 <adv_timeout+0x2c>)
    9f02:	2300      	movs	r3, #0
    9f04:	aa05      	add	r2, sp, #20
    9f06:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    9f0a:	f01b fd54 	bl	259b6 <z_impl_z_log_msg2_static_create>
}
    9f0e:	b009      	add	sp, #36	; 0x24
    9f10:	f85d fb04 	ldr.w	pc, [sp], #4
    9f14:	0002e52f 	.word	0x0002e52f
    9f18:	0002b5bc 	.word	0x0002b5bc

00009f1c <bt_le_adv_resume>:
{
    9f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9f1e:	481e      	ldr	r0, [pc, #120]	; (9f98 <bt_le_adv_resume+0x7c>)
    9f20:	4c1d      	ldr	r4, [pc, #116]	; (9f98 <bt_le_adv_resume+0x7c>)
    9f22:	f01d fa31 	bl	27388 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    9f26:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    9f2a:	d032      	beq.n	9f92 <bt_le_adv_resume+0x76>
    9f2c:	4620      	mov	r0, r4
    9f2e:	f01d fa2b 	bl	27388 <atomic_get>
    9f32:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9f34:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9f38:	d42b      	bmi.n	9f92 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9f3a:	4620      	mov	r0, r4
    9f3c:	f01d fa24 	bl	27388 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9f40:	0583      	lsls	r3, r0, #22
    9f42:	d526      	bpl.n	9f92 <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
    9f44:	a901      	add	r1, sp, #4
    9f46:	f1a4 0010 	sub.w	r0, r4, #16
    9f4a:	f7ff fdc1 	bl	9ad0 <le_adv_start_add_conn>
	if (err) {
    9f4e:	bb00      	cbnz	r0, 9f92 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    9f50:	2101      	movs	r1, #1
    9f52:	f1a4 0010 	sub.w	r0, r4, #16
    9f56:	f01d fad1 	bl	274fc <bt_le_adv_set_enable_legacy>
	if (err) {
    9f5a:	b150      	cbz	r0, 9f72 <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9f5c:	4629      	mov	r1, r5
    9f5e:	9801      	ldr	r0, [sp, #4]
    9f60:	f000 fd7a 	bl	aa58 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9f64:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    9f68:	4620      	mov	r0, r4
    9f6a:	f01d fa13 	bl	27394 <atomic_and>
	return (old & mask) != 0;
    9f6e:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
    9f72:	9801      	ldr	r0, [sp, #4]
    9f74:	f01d fba9 	bl	276ca <bt_conn_unref>
	if (persist_paused) {
    9f78:	b15d      	cbz	r5, 9f92 <bt_le_adv_resume+0x76>
    9f7a:	f3bf 8f5b 	dmb	ish
    9f7e:	e854 3f00 	ldrex	r3, [r4]
    9f82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9f86:	e844 3200 	strex	r2, r3, [r4]
    9f8a:	2a00      	cmp	r2, #0
    9f8c:	d1f7      	bne.n	9f7e <bt_le_adv_resume+0x62>
    9f8e:	f3bf 8f5b 	dmb	ish
}
    9f92:	b003      	add	sp, #12
    9f94:	bd30      	pop	{r4, r5, pc}
    9f96:	bf00      	nop
    9f98:	20000028 	.word	0x20000028

00009f9c <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9f9c:	4b03      	ldr	r3, [pc, #12]	; (9fac <atomic_get.constprop.0+0x10>)
    9f9e:	f3bf 8f5b 	dmb	ish
    9fa2:	6818      	ldr	r0, [r3, #0]
    9fa4:	f3bf 8f5b 	dmb	ish
}
    9fa8:	4770      	bx	lr
    9faa:	bf00      	nop
    9fac:	200000cc 	.word	0x200000cc

00009fb0 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    9fb0:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    9fb2:	2102      	movs	r1, #2
{
    9fb4:	b087      	sub	sp, #28
    9fb6:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    9fb8:	f242 000c 	movw	r0, #8204	; 0x200c
    9fbc:	f7fe f95c 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    9fc0:	4605      	mov	r5, r0
    9fc2:	b308      	cbz	r0, a008 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    9fc4:	2102      	movs	r1, #2
    9fc6:	3008      	adds	r0, #8
    9fc8:	f01f fcbf 	bl	2994a <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    9fcc:	2c01      	cmp	r4, #1
    9fce:	4602      	mov	r2, r0
    9fd0:	d117      	bne.n	a002 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9fd2:	f7ff ffe3 	bl	9f9c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9fd6:	f3c0 2000 	ubfx	r0, r0, #8, #1
    9fda:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    9fdc:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    9fde:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    9fe0:	425c      	negs	r4, r3
    9fe2:	415c      	adcs	r4, r3
    9fe4:	4a0a      	ldr	r2, [pc, #40]	; (a010 <bt_le_scan_set_enable_legacy+0x60>)
    9fe6:	9400      	str	r4, [sp, #0]
    9fe8:	a903      	add	r1, sp, #12
    9fea:	4628      	mov	r0, r5
    9fec:	2305      	movs	r3, #5
    9fee:	f7fe f931 	bl	8254 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    9ff2:	2200      	movs	r2, #0
    9ff4:	4629      	mov	r1, r5
    9ff6:	f242 000c 	movw	r0, #8204	; 0x200c
    9ffa:	f7fe faa5 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    9ffe:	b007      	add	sp, #28
    a000:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    a002:	2300      	movs	r3, #0
    a004:	7043      	strb	r3, [r0, #1]
    a006:	e7e9      	b.n	9fdc <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    a008:	f06f 0068 	mvn.w	r0, #104	; 0x68
    a00c:	e7f7      	b.n	9ffe <bt_le_scan_set_enable_legacy+0x4e>
    a00e:	bf00      	nop
    a010:	200000cc 	.word	0x200000cc

0000a014 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    a014:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    a016:	2300      	movs	r3, #0
    a018:	f8ad 3005 	strh.w	r3, [sp, #5]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    a01c:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
    a01e:	f88d 0000 	strb.w	r0, [sp]
{
    a022:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    a024:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
    a026:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    a02a:	4158      	adcs	r0, r3
    a02c:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
    a030:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    a034:	f7ff fbd0 	bl	97d8 <bt_id_set_scan_own_addr>
	if (err) {
    a038:	4604      	mov	r4, r0
    a03a:	bb38      	cbnz	r0, a08c <start_le_scan_legacy+0x78>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    a03c:	2107      	movs	r1, #7
    a03e:	f242 000b 	movw	r0, #8203	; 0x200b
    a042:	f7fe f919 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    a046:	4606      	mov	r6, r0
    a048:	b348      	cbz	r0, a09e <start_le_scan_legacy+0x8a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a04a:	2207      	movs	r2, #7
    a04c:	4669      	mov	r1, sp
    a04e:	3008      	adds	r0, #8
    a050:	f01f fc81 	bl	29956 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    a054:	4622      	mov	r2, r4
    a056:	4631      	mov	r1, r6
    a058:	f242 000b 	movw	r0, #8203	; 0x200b
    a05c:	f7fe fa74 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    a060:	4604      	mov	r4, r0
    a062:	b998      	cbnz	r0, a08c <start_le_scan_legacy+0x78>
	return bt_le_scan_set_enable_legacy(enable);
    a064:	2001      	movs	r0, #1
    a066:	f7ff ffa3 	bl	9fb0 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    a06a:	4604      	mov	r4, r0
    a06c:	b970      	cbnz	r0, a08c <start_le_scan_legacy+0x78>
	if (val) {
    a06e:	2d01      	cmp	r5, #1
    a070:	d10f      	bne.n	a092 <start_le_scan_legacy+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a072:	f3bf 8f5b 	dmb	ish
    a076:	4b0b      	ldr	r3, [pc, #44]	; (a0a4 <start_le_scan_legacy+0x90>)
    a078:	e853 2f00 	ldrex	r2, [r3]
    a07c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    a080:	e843 2100 	strex	r1, r2, [r3]
    a084:	2900      	cmp	r1, #0
    a086:	d1f7      	bne.n	a078 <start_le_scan_legacy+0x64>
    a088:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    a08c:	4620      	mov	r0, r4
    a08e:	b002      	add	sp, #8
    a090:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a092:	f06f 0180 	mvn.w	r1, #128	; 0x80
    a096:	4803      	ldr	r0, [pc, #12]	; (a0a4 <start_le_scan_legacy+0x90>)
    a098:	f01d fa5a 	bl	27550 <atomic_and>
    a09c:	e7f6      	b.n	a08c <start_le_scan_legacy+0x78>
		return -ENOBUFS;
    a09e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    a0a2:	e7f3      	b.n	a08c <start_le_scan_legacy+0x78>
    a0a4:	200000cc 	.word	0x200000cc

0000a0a8 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    a0a8:	4b01      	ldr	r3, [pc, #4]	; (a0b0 <bt_scan_reset+0x8>)
    a0aa:	2200      	movs	r2, #0
    a0ac:	601a      	str	r2, [r3, #0]
}
    a0ae:	4770      	bx	lr
    a0b0:	20001f0c 	.word	0x20001f0c

0000a0b4 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    a0b4:	b538      	push	{r3, r4, r5, lr}
    a0b6:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a0b8:	f7ff ff70 	bl	9f9c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a0bc:	0641      	lsls	r1, r0, #25
    a0be:	f3c0 1280 	ubfx	r2, r0, #6, #1
    a0c2:	d501      	bpl.n	a0c8 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    a0c4:	2000      	movs	r0, #0
    a0c6:	e031      	b.n	a12c <bt_le_scan_update+0x78>
    a0c8:	f7ff ff68 	bl	9f9c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    a0cc:	0683      	lsls	r3, r0, #26
    a0ce:	d428      	bmi.n	a122 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    a0d0:	2100      	movs	r1, #0
    a0d2:	2206      	movs	r2, #6
    a0d4:	4608      	mov	r0, r1
    a0d6:	f000 ff39 	bl	af4c <bt_conn_lookup_state_le>
		if (conn) {
    a0da:	4604      	mov	r4, r0
    a0dc:	bb38      	cbnz	r0, a12e <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    a0de:	2202      	movs	r2, #2
    a0e0:	4601      	mov	r1, r0
    a0e2:	f000 ff33 	bl	af4c <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    a0e6:	2800      	cmp	r0, #0
    a0e8:	d0ec      	beq.n	a0c4 <bt_le_scan_update+0x10>
    a0ea:	f3bf 8f5b 	dmb	ish
    a0ee:	4b11      	ldr	r3, [pc, #68]	; (a134 <bt_le_scan_update+0x80>)
    a0f0:	e853 2f00 	ldrex	r2, [r3]
    a0f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    a0f8:	e843 2100 	strex	r1, r2, [r3]
    a0fc:	2900      	cmp	r1, #0
    a0fe:	d1f7      	bne.n	a0f0 <bt_le_scan_update+0x3c>
    a100:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    a104:	f01d fae1 	bl	276ca <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    a108:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    a10a:	4620      	mov	r0, r4
    a10c:	bf18      	it	ne
    a10e:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    a110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    a114:	bf0a      	itet	eq
    a116:	2212      	moveq	r2, #18
    a118:	2160      	movne	r1, #96	; 0x60
    a11a:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    a11e:	f7ff bf79 	b.w	a014 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    a122:	4610      	mov	r0, r2
    a124:	f7ff ff44 	bl	9fb0 <bt_le_scan_set_enable_legacy>
		if (err) {
    a128:	2800      	cmp	r0, #0
    a12a:	d0d1      	beq.n	a0d0 <bt_le_scan_update+0x1c>
}
    a12c:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    a12e:	f01d facc 	bl	276ca <bt_conn_unref>
    a132:	e7c7      	b.n	a0c4 <bt_le_scan_update+0x10>
    a134:	200000cc 	.word	0x200000cc

0000a138 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    a138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    a13c:	f100 0808 	add.w	r8, r0, #8
    a140:	b08f      	sub	sp, #60	; 0x3c
    a142:	4604      	mov	r4, r0
    a144:	4640      	mov	r0, r8
    a146:	f01f fc39 	bl	299bc <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    a14a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; a30c <bt_hci_le_adv_report+0x1d4>
    a14e:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    a150:	b176      	cbz	r6, a170 <bt_hci_le_adv_report+0x38>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    a152:	89a3      	ldrh	r3, [r4, #12]
    a154:	2b08      	cmp	r3, #8
    a156:	d80e      	bhi.n	a176 <bt_hci_le_adv_report+0x3e>
			BT_ERR("Unexpected end of buffer");
    a158:	4b6d      	ldr	r3, [pc, #436]	; (a310 <bt_hci_le_adv_report+0x1d8>)
    a15a:	930c      	str	r3, [sp, #48]	; 0x30
    a15c:	2302      	movs	r3, #2
    a15e:	9306      	str	r3, [sp, #24]
    a160:	930b      	str	r3, [sp, #44]	; 0x2c
    a162:	486c      	ldr	r0, [pc, #432]	; (a314 <bt_hci_le_adv_report+0x1dc>)
    a164:	2300      	movs	r3, #0
    a166:	aa0b      	add	r2, sp, #44	; 0x2c
    a168:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a16c:	f01b fc23 	bl	259b6 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    a170:	b00f      	add	sp, #60	; 0x3c
    a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    a176:	2109      	movs	r1, #9
    a178:	4640      	mov	r0, r8
    a17a:	f01f fc17 	bl	299ac <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    a17e:	237f      	movs	r3, #127	; 0x7f
    a180:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    a184:	7a01      	ldrb	r1, [r0, #8]
    a186:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    a188:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    a18a:	7a5b      	ldrb	r3, [r3, #9]
    a18c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    a190:	23ff      	movs	r3, #255	; 0xff
    a192:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    a196:	2300      	movs	r3, #0
    a198:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    a19c:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    a1a0:	7802      	ldrb	r2, [r0, #0]
    a1a2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    a1a6:	2a04      	cmp	r2, #4
    a1a8:	bf9c      	itt	ls
    a1aa:	4b5b      	ldrls	r3, [pc, #364]	; (a318 <bt_hci_le_adv_report+0x1e0>)
    a1ac:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    a1ae:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    a1b2:	b28b      	uxth	r3, r1
    a1b4:	4605      	mov	r5, r0
    a1b6:	f100 0901 	add.w	r9, r0, #1
    a1ba:	9301      	str	r3, [sp, #4]
    a1bc:	f7ff feee 	bl	9f9c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a1c0:	0647      	lsls	r7, r0, #25
    a1c2:	d50b      	bpl.n	a1dc <bt_hci_le_adv_report+0xa4>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    a1c4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a1c8:	0758      	lsls	r0, r3, #29
    a1ca:	d507      	bpl.n	a1dc <bt_hci_le_adv_report+0xa4>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    a1cc:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    a1ce:	4640      	mov	r0, r8
    a1d0:	3101      	adds	r1, #1
    a1d2:	3e01      	subs	r6, #1
    a1d4:	f01f fbe2 	bl	2999c <net_buf_simple_pull>
    a1d8:	b2f6      	uxtb	r6, r6
    a1da:	e7b9      	b.n	a150 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    a1dc:	786b      	ldrb	r3, [r5, #1]
    a1de:	1e9a      	subs	r2, r3, #2
    a1e0:	2a01      	cmp	r2, #1
    a1e2:	d847      	bhi.n	a274 <bt_hci_le_adv_report+0x13c>
		bt_addr_le_copy(&id_addr, addr);
    a1e4:	4649      	mov	r1, r9
    a1e6:	a804      	add	r0, sp, #16
    a1e8:	f01d f9c1 	bl	2756e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    a1ec:	f89d 3010 	ldrb.w	r3, [sp, #16]
    a1f0:	3b02      	subs	r3, #2
    a1f2:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    a1f6:	ab04      	add	r3, sp, #16
    a1f8:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    a1fa:	f8da 3000 	ldr.w	r3, [sl]
    a1fe:	b1a3      	cbz	r3, a22a <bt_hci_le_adv_report+0xf2>
	state->offset = net_buf_simple_headroom(buf);
    a200:	4640      	mov	r0, r8
    a202:	f01f fbeb 	bl	299dc <net_buf_simple_headroom>
		buf->len = len;
    a206:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    a208:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    a20a:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    a20e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    a210:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    a212:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    a216:	f8da c000 	ldr.w	ip, [sl]
    a21a:	a804      	add	r0, sp, #16
    a21c:	4643      	mov	r3, r8
    a21e:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    a220:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a222:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a224:	fa10 f08b 	uxtah	r0, r0, fp
    a228:	60a0      	str	r0, [r4, #8]
	return list->head;
    a22a:	4b3c      	ldr	r3, [pc, #240]	; (a31c <bt_hci_le_adv_report+0x1e4>)
    a22c:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    a22e:	2a00      	cmp	r2, #0
    a230:	d031      	beq.n	a296 <bt_hci_le_adv_report+0x15e>
	return node->next;
    a232:	f852 7908 	ldr.w	r7, [r2], #-8
    a236:	b107      	cbz	r7, a23a <bt_hci_le_adv_report+0x102>
    a238:	3f08      	subs	r7, #8
		if (listener->recv) {
    a23a:	6813      	ldr	r3, [r2, #0]
    a23c:	9203      	str	r2, [sp, #12]
    a23e:	b193      	cbz	r3, a266 <bt_hci_le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    a240:	4640      	mov	r0, r8
    a242:	f01f fbcb 	bl	299dc <net_buf_simple_headroom>
	state->len = buf->len;
    a246:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    a248:	9a03      	ldr	r2, [sp, #12]
    a24a:	9302      	str	r3, [sp, #8]
			buf->len = len;
    a24c:	9b01      	ldr	r3, [sp, #4]
    a24e:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    a250:	4683      	mov	fp, r0
			listener->recv(info, buf);
    a252:	6812      	ldr	r2, [r2, #0]
    a254:	a808      	add	r0, sp, #32
    a256:	4641      	mov	r1, r8
    a258:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    a25a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a25c:	9b02      	ldr	r3, [sp, #8]
    a25e:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a260:	fa10 f08b 	uxtah	r0, r0, fp
    a264:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    a266:	b1b7      	cbz	r7, a296 <bt_hci_le_adv_report+0x15e>
    a268:	68bb      	ldr	r3, [r7, #8]
    a26a:	b103      	cbz	r3, a26e <bt_hci_le_adv_report+0x136>
    a26c:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    a26e:	463a      	mov	r2, r7
    a270:	461f      	mov	r7, r3
    a272:	e7e2      	b.n	a23a <bt_hci_le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    a274:	2bff      	cmp	r3, #255	; 0xff
    a276:	d108      	bne.n	a28a <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    a278:	2300      	movs	r3, #0
    a27a:	9306      	str	r3, [sp, #24]
    a27c:	a906      	add	r1, sp, #24
    a27e:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    a282:	a804      	add	r0, sp, #16
    a284:	f01d f973 	bl	2756e <bt_addr_le_copy>
    a288:	e7b5      	b.n	a1f6 <bt_hci_le_adv_report+0xbe>
    a28a:	4649      	mov	r1, r9
    a28c:	2000      	movs	r0, #0
    a28e:	f01d f827 	bl	272e0 <bt_lookup_id_addr>
    a292:	4601      	mov	r1, r0
    a294:	e7f5      	b.n	a282 <bt_hci_le_adv_report+0x14a>
	check_pending_conn(&id_addr, addr, info->adv_props);
    a296:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    a29a:	f7ff fe7f 	bl	9f9c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    a29e:	0641      	lsls	r1, r0, #25
    a2a0:	f3c0 1780 	ubfx	r7, r0, #6, #1
    a2a4:	d492      	bmi.n	a1cc <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    a2a6:	07d2      	lsls	r2, r2, #31
    a2a8:	d590      	bpl.n	a1cc <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    a2aa:	2202      	movs	r2, #2
    a2ac:	a904      	add	r1, sp, #16
    a2ae:	4638      	mov	r0, r7
    a2b0:	f000 fe4c 	bl	af4c <bt_conn_lookup_state_le>
	if (!conn) {
    a2b4:	4683      	mov	fp, r0
    a2b6:	2800      	cmp	r0, #0
    a2b8:	d088      	beq.n	a1cc <bt_hci_le_adv_report+0x94>
    a2ba:	f7ff fe6f 	bl	9f9c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    a2be:	0683      	lsls	r3, r0, #26
    a2c0:	d410      	bmi.n	a2e4 <bt_hci_le_adv_report+0x1ac>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    a2c2:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    a2c6:	4649      	mov	r1, r9
    a2c8:	f01d f951 	bl	2756e <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
    a2cc:	4658      	mov	r0, fp
    a2ce:	f01c fe6e 	bl	26fae <bt_le_create_conn>
    a2d2:	b960      	cbnz	r0, a2ee <bt_hci_le_adv_report+0x1b6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    a2d4:	4658      	mov	r0, fp
    a2d6:	2106      	movs	r1, #6
    a2d8:	f000 fbbe 	bl	aa58 <bt_conn_set_state>
	bt_conn_unref(conn);
    a2dc:	4658      	mov	r0, fp
    a2de:	f01d f9f4 	bl	276ca <bt_conn_unref>
	return;
    a2e2:	e773      	b.n	a1cc <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
    a2e4:	4638      	mov	r0, r7
    a2e6:	f7ff fe63 	bl	9fb0 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    a2ea:	2800      	cmp	r0, #0
    a2ec:	d0e9      	beq.n	a2c2 <bt_hci_le_adv_report+0x18a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    a2ee:	231f      	movs	r3, #31
    a2f0:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a2f4:	2100      	movs	r1, #0
    a2f6:	4658      	mov	r0, fp
    a2f8:	f000 fbae 	bl	aa58 <bt_conn_set_state>
	bt_conn_unref(conn);
    a2fc:	4658      	mov	r0, fp
    a2fe:	f01d f9e4 	bl	276ca <bt_conn_unref>
	bt_le_scan_update(false);
    a302:	2000      	movs	r0, #0
    a304:	f7ff fed6 	bl	a0b4 <bt_le_scan_update>
    a308:	e760      	b.n	a1cc <bt_hci_le_adv_report+0x94>
    a30a:	bf00      	nop
    a30c:	20001f0c 	.word	0x20001f0c
    a310:	0002e555 	.word	0x0002e555
    a314:	0002b6ec 	.word	0x0002b6ec
    a318:	0002e576 	.word	0x0002e576
    a31c:	20001f04 	.word	0x20001f04

0000a320 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    a320:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    a322:	4904      	ldr	r1, [pc, #16]	; (a334 <bt_pub_key_is_debug+0x14>)
    a324:	2240      	movs	r2, #64	; 0x40
    a326:	f020 fb88 	bl	2aa3a <memcmp>
}
    a32a:	fab0 f080 	clz	r0, r0
    a32e:	0940      	lsrs	r0, r0, #5
    a330:	bd08      	pop	{r3, pc}
    a332:	bf00      	nop
    a334:	0002e609 	.word	0x0002e609

0000a338 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    a338:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a33a:	4b45      	ldr	r3, [pc, #276]	; (a450 <bt_pub_key_gen+0x118>)
    a33c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    a340:	f003 0306 	and.w	r3, r3, #6
    a344:	2b06      	cmp	r3, #6
{
    a346:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    a348:	d010      	beq.n	a36c <bt_pub_key_gen+0x34>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    a34a:	4b42      	ldr	r3, [pc, #264]	; (a454 <bt_pub_key_gen+0x11c>)
    a34c:	9306      	str	r3, [sp, #24]
    a34e:	2302      	movs	r3, #2
    a350:	9301      	str	r3, [sp, #4]
    a352:	9305      	str	r3, [sp, #20]
    a354:	4840      	ldr	r0, [pc, #256]	; (a458 <bt_pub_key_gen+0x120>)
    a356:	2300      	movs	r3, #0
    a358:	aa05      	add	r2, sp, #20
    a35a:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
    a35e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    a362:	f01b fb28 	bl	259b6 <z_impl_z_log_msg2_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    a366:	4628      	mov	r0, r5
    a368:	b009      	add	sp, #36	; 0x24
    a36a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
    a36c:	2800      	cmp	r0, #0
    a36e:	d06b      	beq.n	a448 <bt_pub_key_gen+0x110>
	return list->head;
    a370:	4e3a      	ldr	r6, [pc, #232]	; (a45c <bt_pub_key_gen+0x124>)
    a372:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a374:	b1aa      	cbz	r2, a3a2 <bt_pub_key_gen+0x6a>
    a376:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    a378:	4298      	cmp	r0, r3
    a37a:	d10e      	bne.n	a39a <bt_pub_key_gen+0x62>
			BT_WARN("Callback already registered");
    a37c:	4b38      	ldr	r3, [pc, #224]	; (a460 <bt_pub_key_gen+0x128>)
    a37e:	9306      	str	r3, [sp, #24]
    a380:	2302      	movs	r3, #2
    a382:	9301      	str	r3, [sp, #4]
    a384:	9305      	str	r3, [sp, #20]
    a386:	4834      	ldr	r0, [pc, #208]	; (a458 <bt_pub_key_gen+0x120>)
    a388:	2300      	movs	r3, #0
    a38a:	aa05      	add	r2, sp, #20
    a38c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a390:	f01b fb11 	bl	259b6 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
    a394:	f06f 0577 	mvn.w	r5, #119	; 0x77
    a398:	e7e5      	b.n	a366 <bt_pub_key_gen+0x2e>
	return node->next;
    a39a:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a39c:	b10b      	cbz	r3, a3a2 <bt_pub_key_gen+0x6a>
    a39e:	3b04      	subs	r3, #4
    a3a0:	e7ea      	b.n	a378 <bt_pub_key_gen+0x40>
	parent->next = child;
    a3a2:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    a3a4:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    a3a6:	1d03      	adds	r3, r0, #4
	list->head = node;
    a3a8:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    a3aa:	b902      	cbnz	r2, a3ae <bt_pub_key_gen+0x76>
	list->tail = node;
    a3ac:	6073      	str	r3, [r6, #4]
    a3ae:	4c2d      	ldr	r4, [pc, #180]	; (a464 <bt_pub_key_gen+0x12c>)
    a3b0:	f3bf 8f5b 	dmb	ish
    a3b4:	e854 7f00 	ldrex	r7, [r4]
    a3b8:	f047 0310 	orr.w	r3, r7, #16
    a3bc:	e844 3200 	strex	r2, r3, [r4]
    a3c0:	2a00      	cmp	r2, #0
    a3c2:	d1f7      	bne.n	a3b4 <bt_pub_key_gen+0x7c>
    a3c4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a3c8:	f017 0710 	ands.w	r7, r7, #16
    a3cc:	d001      	beq.n	a3d2 <bt_pub_key_gen+0x9a>
		return 0;
    a3ce:	2500      	movs	r5, #0
    a3d0:	e7c9      	b.n	a366 <bt_pub_key_gen+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a3d2:	f3bf 8f5b 	dmb	ish
    a3d6:	e854 3f00 	ldrex	r3, [r4]
    a3da:	f023 0308 	bic.w	r3, r3, #8
    a3de:	e844 3200 	strex	r2, r3, [r4]
    a3e2:	2a00      	cmp	r2, #0
    a3e4:	d1f7      	bne.n	a3d6 <bt_pub_key_gen+0x9e>
    a3e6:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    a3ea:	463a      	mov	r2, r7
    a3ec:	4639      	mov	r1, r7
    a3ee:	f242 0025 	movw	r0, #8229	; 0x2025
    a3f2:	f7fe f8a9 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    a3f6:	4605      	mov	r5, r0
    a3f8:	2800      	cmp	r0, #0
    a3fa:	d0e8      	beq.n	a3ce <bt_pub_key_gen+0x96>
		BT_ERR("Sending LE P256 Public Key command failed");
    a3fc:	4b1a      	ldr	r3, [pc, #104]	; (a468 <bt_pub_key_gen+0x130>)
    a3fe:	9306      	str	r3, [sp, #24]
    a400:	2302      	movs	r3, #2
    a402:	9301      	str	r3, [sp, #4]
    a404:	9305      	str	r3, [sp, #20]
    a406:	4814      	ldr	r0, [pc, #80]	; (a458 <bt_pub_key_gen+0x120>)
    a408:	463b      	mov	r3, r7
    a40a:	aa05      	add	r2, sp, #20
    a40c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a410:	f01b fad1 	bl	259b6 <z_impl_z_log_msg2_static_create>
    a414:	f3bf 8f5b 	dmb	ish
    a418:	e854 3f00 	ldrex	r3, [r4]
    a41c:	f023 0310 	bic.w	r3, r3, #16
    a420:	e844 3200 	strex	r2, r3, [r4]
    a424:	2a00      	cmp	r2, #0
    a426:	d1f7      	bne.n	a418 <bt_pub_key_gen+0xe0>
    a428:	f3bf 8f5b 	dmb	ish
	return list->head;
    a42c:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a42e:	b13c      	cbz	r4, a440 <bt_pub_key_gen+0x108>
			if (cb->func) {
    a430:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a434:	3c04      	subs	r4, #4
			if (cb->func) {
    a436:	b10b      	cbz	r3, a43c <bt_pub_key_gen+0x104>
				cb->func(NULL);
    a438:	2000      	movs	r0, #0
    a43a:	4798      	blx	r3
	return node->next;
    a43c:	6864      	ldr	r4, [r4, #4]
    a43e:	e7f6      	b.n	a42e <bt_pub_key_gen+0xf6>
	list->head = NULL;
    a440:	2300      	movs	r3, #0
	list->tail = NULL;
    a442:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    a446:	e78e      	b.n	a366 <bt_pub_key_gen+0x2e>
		return -EINVAL;
    a448:	f06f 0515 	mvn.w	r5, #21
    a44c:	e78b      	b.n	a366 <bt_pub_key_gen+0x2e>
    a44e:	bf00      	nop
    a450:	20000000 	.word	0x20000000
    a454:	0002e57b 	.word	0x0002e57b
    a458:	0002b6ac 	.word	0x0002b6ac
    a45c:	20001f14 	.word	0x20001f14
    a460:	0002e59a 	.word	0x0002e59a
    a464:	200000cc 	.word	0x200000cc
    a468:	0002e5b6 	.word	0x0002e5b6

0000a46c <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a46c:	4b05      	ldr	r3, [pc, #20]	; (a484 <bt_pub_key_get+0x18>)
    a46e:	f3bf 8f5b 	dmb	ish
    a472:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    a474:	4804      	ldr	r0, [pc, #16]	; (a488 <bt_pub_key_get+0x1c>)
    a476:	f3bf 8f5b 	dmb	ish
		return pub_key;
    a47a:	f013 0f08 	tst.w	r3, #8
}
    a47e:	bf08      	it	eq
    a480:	2000      	moveq	r0, #0
    a482:	4770      	bx	lr
    a484:	200000cc 	.word	0x200000cc
    a488:	2000352d 	.word	0x2000352d

0000a48c <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    a48c:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
    a48e:	4e28      	ldr	r6, [pc, #160]	; (a530 <bt_dh_key_gen+0xa4>)
    a490:	6833      	ldr	r3, [r6, #0]
    a492:	428b      	cmp	r3, r1
{
    a494:	b088      	sub	sp, #32
    a496:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
    a498:	d044      	beq.n	a524 <bt_dh_key_gen+0x98>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a49a:	b123      	cbz	r3, a4a6 <bt_dh_key_gen+0x1a>
		return -EBUSY;
    a49c:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    a4a0:	4620      	mov	r0, r4
    a4a2:	b008      	add	sp, #32
    a4a4:	bd70      	pop	{r4, r5, r6, pc}
    a4a6:	4b23      	ldr	r3, [pc, #140]	; (a534 <bt_dh_key_gen+0xa8>)
    a4a8:	f3bf 8f5b 	dmb	ish
    a4ac:	681a      	ldr	r2, [r3, #0]
    a4ae:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    a4b2:	06d2      	lsls	r2, r2, #27
    a4b4:	d4f2      	bmi.n	a49c <bt_dh_key_gen+0x10>
    a4b6:	f3bf 8f5b 	dmb	ish
    a4ba:	681b      	ldr	r3, [r3, #0]
    a4bc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    a4c0:	071b      	lsls	r3, r3, #28
    a4c2:	d532      	bpl.n	a52a <bt_dh_key_gen+0x9e>
	dh_key_cb = cb;
    a4c4:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    a4c6:	f242 0026 	movw	r0, #8230	; 0x2026
    a4ca:	2140      	movs	r1, #64	; 0x40
    a4cc:	f7fd fed4 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
    a4d0:	4605      	mov	r5, r0
    a4d2:	b320      	cbz	r0, a51e <bt_dh_key_gen+0x92>
	return net_buf_simple_add(&buf->b, len);
    a4d4:	2140      	movs	r1, #64	; 0x40
    a4d6:	3008      	adds	r0, #8
    a4d8:	f01f fa37 	bl	2994a <net_buf_simple_add>
    a4dc:	4623      	mov	r3, r4
    a4de:	f104 0240 	add.w	r2, r4, #64	; 0x40
    a4e2:	f853 1b04 	ldr.w	r1, [r3], #4
    a4e6:	f840 1b04 	str.w	r1, [r0], #4
    a4ea:	4293      	cmp	r3, r2
    a4ec:	d1f9      	bne.n	a4e2 <bt_dh_key_gen+0x56>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    a4ee:	2200      	movs	r2, #0
    a4f0:	4629      	mov	r1, r5
    a4f2:	f242 0026 	movw	r0, #8230	; 0x2026
    a4f6:	f7fe f827 	bl	8548 <bt_hci_cmd_send_sync>
	if (err) {
    a4fa:	4604      	mov	r4, r0
    a4fc:	2800      	cmp	r0, #0
    a4fe:	d0cf      	beq.n	a4a0 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    a500:	4a0d      	ldr	r2, [pc, #52]	; (a538 <bt_dh_key_gen+0xac>)
		dh_key_cb = NULL;
    a502:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
    a504:	e9cd 2406 	strd	r2, r4, [sp, #24]
    a508:	2203      	movs	r2, #3
		dh_key_cb = NULL;
    a50a:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
    a50c:	9201      	str	r2, [sp, #4]
    a50e:	9205      	str	r2, [sp, #20]
    a510:	480a      	ldr	r0, [pc, #40]	; (a53c <bt_dh_key_gen+0xb0>)
    a512:	aa05      	add	r2, sp, #20
    a514:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a518:	f01b fa4d 	bl	259b6 <z_impl_z_log_msg2_static_create>
		return err;
    a51c:	e7c0      	b.n	a4a0 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
    a51e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    a522:	e7ed      	b.n	a500 <bt_dh_key_gen+0x74>
		return -EALREADY;
    a524:	f06f 0477 	mvn.w	r4, #119	; 0x77
    a528:	e7ba      	b.n	a4a0 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    a52a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    a52e:	e7b7      	b.n	a4a0 <bt_dh_key_gen+0x14>
    a530:	20001f10 	.word	0x20001f10
    a534:	200000cc 	.word	0x200000cc
    a538:	0002e5e0 	.word	0x0002e5e0
    a53c:	0002b6ac 	.word	0x0002b6ac

0000a540 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a542:	4b1d      	ldr	r3, [pc, #116]	; (a5b8 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    a544:	6885      	ldr	r5, [r0, #8]
    a546:	f3bf 8f5b 	dmb	ish
    a54a:	e853 2f00 	ldrex	r2, [r3]
    a54e:	f022 0210 	bic.w	r2, r2, #16
    a552:	e843 2100 	strex	r1, r2, [r3]
    a556:	2900      	cmp	r1, #0
    a558:	d1f7      	bne.n	a54a <bt_hci_evt_le_pkey_complete+0xa>
    a55a:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    a55e:	782a      	ldrb	r2, [r5, #0]
    a560:	b9aa      	cbnz	r2, a58e <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    a562:	4916      	ldr	r1, [pc, #88]	; (a5bc <bt_hci_evt_le_pkey_complete+0x7c>)
    a564:	1c6a      	adds	r2, r5, #1
    a566:	f105 0041 	add.w	r0, r5, #65	; 0x41
    a56a:	f852 4b04 	ldr.w	r4, [r2], #4
    a56e:	f841 4b04 	str.w	r4, [r1], #4
    a572:	4282      	cmp	r2, r0
    a574:	d1f9      	bne.n	a56a <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a576:	f3bf 8f5b 	dmb	ish
    a57a:	e853 2f00 	ldrex	r2, [r3]
    a57e:	f042 0208 	orr.w	r2, r2, #8
    a582:	e843 2100 	strex	r1, r2, [r3]
    a586:	2900      	cmp	r1, #0
    a588:	d1f7      	bne.n	a57a <bt_hci_evt_le_pkey_complete+0x3a>
    a58a:	f3bf 8f5b 	dmb	ish
	return list->head;
    a58e:	4e0c      	ldr	r6, [pc, #48]	; (a5c0 <bt_hci_evt_le_pkey_complete+0x80>)
    a590:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a592:	b16c      	cbz	r4, a5b0 <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    a594:	4f09      	ldr	r7, [pc, #36]	; (a5bc <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a596:	3c04      	subs	r4, #4
		if (cb->func) {
    a598:	6823      	ldr	r3, [r4, #0]
    a59a:	b12b      	cbz	r3, a5a8 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
    a59c:	782a      	ldrb	r2, [r5, #0]
    a59e:	2a00      	cmp	r2, #0
    a5a0:	bf0c      	ite	eq
    a5a2:	4638      	moveq	r0, r7
    a5a4:	2000      	movne	r0, #0
    a5a6:	4798      	blx	r3
	return node->next;
    a5a8:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    a5aa:	b10c      	cbz	r4, a5b0 <bt_hci_evt_le_pkey_complete+0x70>
    a5ac:	3c04      	subs	r4, #4
    a5ae:	e7f3      	b.n	a598 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
    a5b0:	2300      	movs	r3, #0
	list->tail = NULL;
    a5b2:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a5b8:	200000cc 	.word	0x200000cc
    a5bc:	2000352d 	.word	0x2000352d
    a5c0:	20001f14 	.word	0x20001f14

0000a5c4 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    a5c4:	4905      	ldr	r1, [pc, #20]	; (a5dc <bt_hci_evt_le_dhkey_complete+0x18>)
    a5c6:	680b      	ldr	r3, [r1, #0]
    a5c8:	b133      	cbz	r3, a5d8 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    a5ca:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    a5cc:	2000      	movs	r0, #0
    a5ce:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    a5d0:	7811      	ldrb	r1, [r2, #0]
    a5d2:	b901      	cbnz	r1, a5d6 <bt_hci_evt_le_dhkey_complete+0x12>
    a5d4:	1c50      	adds	r0, r2, #1
    a5d6:	4718      	bx	r3
	}
}
    a5d8:	4770      	bx	lr
    a5da:	bf00      	nop
    a5dc:	20001f10 	.word	0x20001f10

0000a5e0 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    a5e0:	2300      	movs	r3, #0
	tx->user_data = NULL;
    a5e2:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    a5e6:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    a5e8:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    a5ea:	4801      	ldr	r0, [pc, #4]	; (a5f0 <tx_free+0x10>)
    a5ec:	f01f bde0 	b.w	2a1b0 <k_queue_append>
    a5f0:	20000c44 	.word	0x20000c44

0000a5f4 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    a5f4:	4b0e      	ldr	r3, [pc, #56]	; (a630 <notify_connected+0x3c>)
{
    a5f6:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    a5f8:	681d      	ldr	r5, [r3, #0]
{
    a5fa:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    a5fc:	b955      	cbnz	r5, a614 <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    a5fe:	4d0d      	ldr	r5, [pc, #52]	; (a634 <notify_connected+0x40>)
    a600:	4e0d      	ldr	r6, [pc, #52]	; (a638 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    a602:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    a604:	42b5      	cmp	r5, r6
    a606:	d30c      	bcc.n	a622 <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    a608:	b989      	cbnz	r1, a62e <notify_connected+0x3a>
		bt_gatt_connected(conn);
    a60a:	4620      	mov	r0, r4
	}
}
    a60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    a610:	f003 bb86 	b.w	dd20 <bt_gatt_connected>
		if (cb->connected) {
    a614:	682b      	ldr	r3, [r5, #0]
    a616:	b113      	cbz	r3, a61e <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    a618:	7b21      	ldrb	r1, [r4, #12]
    a61a:	4620      	mov	r0, r4
    a61c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    a61e:	69ad      	ldr	r5, [r5, #24]
    a620:	e7ec      	b.n	a5fc <notify_connected+0x8>
		if (cb->connected) {
    a622:	682b      	ldr	r3, [r5, #0]
    a624:	b10b      	cbz	r3, a62a <notify_connected+0x36>
			cb->connected(conn, conn->err);
    a626:	4620      	mov	r0, r4
    a628:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    a62a:	351c      	adds	r5, #28
    a62c:	e7e9      	b.n	a602 <notify_connected+0xe>
}
    a62e:	bd70      	pop	{r4, r5, r6, pc}
    a630:	20001f20 	.word	0x20001f20
    a634:	0002b5a4 	.word	0x0002b5a4
    a638:	0002b5a4 	.word	0x0002b5a4

0000a63c <send_frag>:
{
    a63c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    a640:	694d      	ldr	r5, [r1, #20]
{
    a642:	b089      	sub	sp, #36	; 0x24
    a644:	4604      	mov	r4, r0
    a646:	460e      	mov	r6, r1
    a648:	4690      	mov	r8, r2
    a64a:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    a64c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a650:	4844      	ldr	r0, [pc, #272]	; (a764 <send_frag+0x128>)
    a652:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a656:	f017 ff2d 	bl	224b4 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    a65a:	7b63      	ldrb	r3, [r4, #13]
    a65c:	2b07      	cmp	r3, #7
    a65e:	d152      	bne.n	a706 <send_frag+0xca>
	__asm__ volatile(
    a660:	f04f 0320 	mov.w	r3, #32
    a664:	f3ef 8211 	mrs	r2, BASEPRI
    a668:	f383 8812 	msr	BASEPRI_MAX, r3
    a66c:	f3bf 8f6f 	isb	sy
	if (tx) {
    a670:	69a3      	ldr	r3, [r4, #24]
    a672:	2d00      	cmp	r5, #0
    a674:	d05a      	beq.n	a72c <send_frag+0xf0>
	parent->next = child;
    a676:	2100      	movs	r1, #0
    a678:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    a67a:	2b00      	cmp	r3, #0
    a67c:	d153      	bne.n	a726 <send_frag+0xea>
	list->head = node;
    a67e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    a682:	f382 8811 	msr	BASEPRI, r2
    a686:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    a68a:	2104      	movs	r1, #4
    a68c:	f106 0008 	add.w	r0, r6, #8
    a690:	f01f f97c 	bl	2998c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a694:	8823      	ldrh	r3, [r4, #0]
    a696:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    a69a:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a69e:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    a6a0:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    a6a4:	3b04      	subs	r3, #4
    a6a6:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    a6a8:	2302      	movs	r3, #2
    a6aa:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    a6ac:	4630      	mov	r0, r6
    a6ae:	f01c fd37 	bl	27120 <bt_send>
	if (err) {
    a6b2:	2800      	cmp	r0, #0
    a6b4:	d054      	beq.n	a760 <send_frag+0x124>
		BT_ERR("Unable to send to driver (err %d)", err);
    a6b6:	4b2c      	ldr	r3, [pc, #176]	; (a768 <send_frag+0x12c>)
    a6b8:	aa05      	add	r2, sp, #20
    a6ba:	e9cd 3006 	strd	r3, r0, [sp, #24]
    a6be:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a6c2:	2303      	movs	r3, #3
    a6c4:	4829      	ldr	r0, [pc, #164]	; (a76c <send_frag+0x130>)
    a6c6:	9301      	str	r3, [sp, #4]
    a6c8:	9305      	str	r3, [sp, #20]
    a6ca:	f01c ff84 	bl	275d6 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
    a6ce:	f04f 0320 	mov.w	r3, #32
    a6d2:	f3ef 8011 	mrs	r0, BASEPRI
    a6d6:	f383 8812 	msr	BASEPRI_MAX, r3
    a6da:	f3bf 8f6f 	isb	sy
		if (tx) {
    a6de:	2d00      	cmp	r5, #0
    a6e0:	d038      	beq.n	a754 <send_frag+0x118>
	return list->head;
    a6e2:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a6e4:	2200      	movs	r2, #0
    a6e6:	b153      	cbz	r3, a6fe <send_frag+0xc2>
    a6e8:	429d      	cmp	r5, r3
    a6ea:	d130      	bne.n	a74e <send_frag+0x112>
	return node->next;
    a6ec:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    a6ee:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    a6f0:	bb42      	cbnz	r2, a744 <send_frag+0x108>
    a6f2:	428d      	cmp	r5, r1
	list->head = node;
    a6f4:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    a6f6:	d100      	bne.n	a6fa <send_frag+0xbe>
	list->tail = node;
    a6f8:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    a6fa:	2300      	movs	r3, #0
    a6fc:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    a6fe:	f380 8811 	msr	BASEPRI, r0
    a702:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a706:	4817      	ldr	r0, [pc, #92]	; (a764 <send_frag+0x128>)
    a708:	f017 feae 	bl	22468 <z_impl_k_sem_give>
	if (tx) {
    a70c:	b115      	cbz	r5, a714 <send_frag+0xd8>
		tx_free(tx);
    a70e:	4628      	mov	r0, r5
    a710:	f7ff ff66 	bl	a5e0 <tx_free>
	if (always_consume) {
    a714:	b11f      	cbz	r7, a71e <send_frag+0xe2>
		net_buf_unref(buf);
    a716:	4630      	mov	r0, r6
    a718:	f015 fb26 	bl	1fd68 <net_buf_unref>
	return false;
    a71c:	2700      	movs	r7, #0
}
    a71e:	4638      	mov	r0, r7
    a720:	b009      	add	sp, #36	; 0x24
    a722:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a726:	601d      	str	r5, [r3, #0]
	list->tail = node;
    a728:	61a5      	str	r5, [r4, #24]
}
    a72a:	e7aa      	b.n	a682 <send_frag+0x46>
		if (tail_tx) {
    a72c:	b133      	cbz	r3, a73c <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
    a72e:	f103 090c 	add.w	r9, r3, #12
    a732:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    a734:	3301      	adds	r3, #1
    a736:	f8c9 3000 	str.w	r3, [r9]
    a73a:	e7a2      	b.n	a682 <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    a73c:	69e3      	ldr	r3, [r4, #28]
    a73e:	f104 091c 	add.w	r9, r4, #28
    a742:	e7f7      	b.n	a734 <send_frag+0xf8>
Z_GENLIST_REMOVE(slist, snode)
    a744:	428d      	cmp	r5, r1
	parent->next = child;
    a746:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a748:	bf08      	it	eq
    a74a:	61a2      	streq	r2, [r4, #24]
}
    a74c:	e7d5      	b.n	a6fa <send_frag+0xbe>
	return node->next;
    a74e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a750:	681b      	ldr	r3, [r3, #0]
    a752:	e7c8      	b.n	a6e6 <send_frag+0xaa>
			(*pending_no_cb)--;
    a754:	f8d9 3000 	ldr.w	r3, [r9]
    a758:	3b01      	subs	r3, #1
    a75a:	f8c9 3000 	str.w	r3, [r9]
    a75e:	e7ce      	b.n	a6fe <send_frag+0xc2>
	return true;
    a760:	2701      	movs	r7, #1
    a762:	e7dc      	b.n	a71e <send_frag+0xe2>
    a764:	20000100 	.word	0x20000100
    a768:	0002de8a 	.word	0x0002de8a
    a76c:	0002b5d4 	.word	0x0002b5d4

0000a770 <bt_conn_get_pkts>:
}
    a770:	4800      	ldr	r0, [pc, #0]	; (a774 <bt_conn_get_pkts+0x4>)
    a772:	4770      	bx	lr
    a774:	20000100 	.word	0x20000100

0000a778 <bt_conn_new>:
{
    a778:	b538      	push	{r3, r4, r5, lr}
    a77a:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    a77c:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    a77e:	2501      	movs	r5, #1
    a780:	428b      	cmp	r3, r1
    a782:	d102      	bne.n	a78a <bt_conn_new+0x12>
		return NULL;
    a784:	2400      	movs	r4, #0
}
    a786:	4620      	mov	r0, r4
    a788:	bd38      	pop	{r3, r4, r5, pc}
    a78a:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    a78e:	f3bf 8f5b 	dmb	ish
    a792:	e852 0f00 	ldrex	r0, [r2]
    a796:	2800      	cmp	r0, #0
    a798:	d104      	bne.n	a7a4 <bt_conn_new+0x2c>
    a79a:	e842 5c00 	strex	ip, r5, [r2]
    a79e:	f1bc 0f00 	cmp.w	ip, #0
    a7a2:	d1f6      	bne.n	a792 <bt_conn_new+0x1a>
    a7a4:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    a7a8:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    a7ac:	d002      	beq.n	a7b4 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    a7ae:	3301      	adds	r3, #1
    a7b0:	4604      	mov	r4, r0
    a7b2:	e7e5      	b.n	a780 <bt_conn_new+0x8>
	if (!conn) {
    a7b4:	2c00      	cmp	r4, #0
    a7b6:	d0e6      	beq.n	a786 <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
    a7b8:	22b8      	movs	r2, #184	; 0xb8
    a7ba:	2100      	movs	r1, #0
    a7bc:	4620      	mov	r0, r4
    a7be:	f020 f96d 	bl	2aa9c <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    a7c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    a7c6:	4904      	ldr	r1, [pc, #16]	; (a7d8 <bt_conn_new+0x60>)
    a7c8:	f01f fde9 	bl	2a39e <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    a7cc:	4903      	ldr	r1, [pc, #12]	; (a7dc <bt_conn_new+0x64>)
    a7ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a7d2:	f01f fdbe 	bl	2a352 <k_work_init>
	return conn;
    a7d6:	e7d6      	b.n	a786 <bt_conn_new+0xe>
    a7d8:	0000b0c1 	.word	0x0000b0c1
    a7dc:	00027641 	.word	0x00027641

0000a7e0 <bt_conn_recv>:
{
    a7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7e2:	b089      	sub	sp, #36	; 0x24
    a7e4:	4616      	mov	r6, r2
    a7e6:	af00      	add	r7, sp, #0
    a7e8:	4604      	mov	r4, r0
    a7ea:	460d      	mov	r5, r1
	tx_notify(conn);
    a7ec:	f01c ff05 	bl	275fa <tx_notify>
	switch (flags) {
    a7f0:	2e01      	cmp	r6, #1
    a7f2:	d033      	beq.n	a85c <bt_conn_recv+0x7c>
    a7f4:	2e02      	cmp	r6, #2
    a7f6:	d16e      	bne.n	a8d6 <bt_conn_recv+0xf6>
		if (conn->rx) {
    a7f8:	6923      	ldr	r3, [r4, #16]
    a7fa:	b16b      	cbz	r3, a818 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    a7fc:	4b3f      	ldr	r3, [pc, #252]	; (a8fc <bt_conn_recv+0x11c>)
    a7fe:	4840      	ldr	r0, [pc, #256]	; (a900 <bt_conn_recv+0x120>)
    a800:	61bb      	str	r3, [r7, #24]
    a802:	f107 0214 	add.w	r2, r7, #20
    a806:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a80a:	607e      	str	r6, [r7, #4]
    a80c:	617e      	str	r6, [r7, #20]
    a80e:	f01c fee2 	bl	275d6 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    a812:	4620      	mov	r0, r4
    a814:	f01c ff17 	bl	27646 <bt_conn_reset_rx_state>
		conn->rx = buf;
    a818:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    a81a:	6921      	ldr	r1, [r4, #16]
    a81c:	898a      	ldrh	r2, [r1, #12]
    a81e:	2a01      	cmp	r2, #1
    a820:	d933      	bls.n	a88a <bt_conn_recv+0xaa>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    a822:	688b      	ldr	r3, [r1, #8]
    a824:	881b      	ldrh	r3, [r3, #0]
    a826:	3304      	adds	r3, #4
    a828:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    a82a:	429a      	cmp	r2, r3
    a82c:	d32d      	bcc.n	a88a <bt_conn_recv+0xaa>
	if (conn->rx->len > acl_total_len) {
    a82e:	d95d      	bls.n	a8ec <bt_conn_recv+0x10c>
		BT_ERR("ACL len mismatch (%u > %u)",
    a830:	466d      	mov	r5, sp
    a832:	b088      	sub	sp, #32
    a834:	466a      	mov	r2, sp
    a836:	4833      	ldr	r0, [pc, #204]	; (a904 <bt_conn_recv+0x124>)
    a838:	6110      	str	r0, [r2, #16]
    a83a:	8989      	ldrh	r1, [r1, #12]
    a83c:	4830      	ldr	r0, [pc, #192]	; (a900 <bt_conn_recv+0x120>)
    a83e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    a842:	2304      	movs	r3, #4
    a844:	f842 3f0c 	str.w	r3, [r2, #12]!
    a848:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    a84c:	60bb      	str	r3, [r7, #8]
    a84e:	f01c fec2 	bl	275d6 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    a852:	4620      	mov	r0, r4
    a854:	46ad      	mov	sp, r5
    a856:	f01c fef6 	bl	27646 <bt_conn_reset_rx_state>
		return;
    a85a:	e016      	b.n	a88a <bt_conn_recv+0xaa>
		if (!conn->rx) {
    a85c:	6920      	ldr	r0, [r4, #16]
    a85e:	b978      	cbnz	r0, a880 <bt_conn_recv+0xa0>
			BT_ERR("Unexpected L2CAP continuation");
    a860:	4b29      	ldr	r3, [pc, #164]	; (a908 <bt_conn_recv+0x128>)
    a862:	61bb      	str	r3, [r7, #24]
    a864:	2302      	movs	r3, #2
    a866:	607b      	str	r3, [r7, #4]
    a868:	617b      	str	r3, [r7, #20]
    a86a:	f107 0214 	add.w	r2, r7, #20
    a86e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a872:	4823      	ldr	r0, [pc, #140]	; (a900 <bt_conn_recv+0x120>)
    a874:	f01c feaf 	bl	275d6 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    a878:	4620      	mov	r0, r4
    a87a:	f01c fee4 	bl	27646 <bt_conn_reset_rx_state>
    a87e:	e001      	b.n	a884 <bt_conn_recv+0xa4>
		if (!buf->len) {
    a880:	89ae      	ldrh	r6, [r5, #12]
    a882:	b92e      	cbnz	r6, a890 <bt_conn_recv+0xb0>
		net_buf_unref(buf);
    a884:	4628      	mov	r0, r5
    a886:	f015 fa6f 	bl	1fd68 <net_buf_unref>
}
    a88a:	3724      	adds	r7, #36	; 0x24
    a88c:	46bd      	mov	sp, r7
    a88e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    a890:	3008      	adds	r0, #8
    a892:	f01f f8a7 	bl	299e4 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    a896:	4286      	cmp	r6, r0
    a898:	d913      	bls.n	a8c2 <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
    a89a:	4b1c      	ldr	r3, [pc, #112]	; (a90c <bt_conn_recv+0x12c>)
    a89c:	4818      	ldr	r0, [pc, #96]	; (a900 <bt_conn_recv+0x120>)
    a89e:	61bb      	str	r3, [r7, #24]
    a8a0:	f107 0214 	add.w	r2, r7, #20
    a8a4:	2302      	movs	r3, #2
    a8a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a8aa:	607b      	str	r3, [r7, #4]
    a8ac:	617b      	str	r3, [r7, #20]
    a8ae:	f01c fe92 	bl	275d6 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    a8b2:	2200      	movs	r2, #0
    a8b4:	6921      	ldr	r1, [r4, #16]
    a8b6:	4620      	mov	r0, r4
    a8b8:	f000 fed0 	bl	b65c <bt_l2cap_recv>
			conn->rx = NULL;
    a8bc:	2300      	movs	r3, #0
    a8be:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    a8c0:	e7e0      	b.n	a884 <bt_conn_recv+0xa4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a8c2:	6920      	ldr	r0, [r4, #16]
    a8c4:	89aa      	ldrh	r2, [r5, #12]
    a8c6:	68a9      	ldr	r1, [r5, #8]
    a8c8:	3008      	adds	r0, #8
    a8ca:	f01f f844 	bl	29956 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    a8ce:	4628      	mov	r0, r5
    a8d0:	f015 fa4a 	bl	1fd68 <net_buf_unref>
		break;
    a8d4:	e7a1      	b.n	a81a <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a8d6:	4b0e      	ldr	r3, [pc, #56]	; (a910 <bt_conn_recv+0x130>)
	switch (flags) {
    a8d8:	e9c7 3606 	strd	r3, r6, [r7, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    a8dc:	2303      	movs	r3, #3
    a8de:	607b      	str	r3, [r7, #4]
    a8e0:	617b      	str	r3, [r7, #20]
    a8e2:	f107 0214 	add.w	r2, r7, #20
    a8e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    a8ea:	e7c2      	b.n	a872 <bt_conn_recv+0x92>
	conn->rx = NULL;
    a8ec:	2300      	movs	r3, #0
    a8ee:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    a8f0:	2201      	movs	r2, #1
    a8f2:	4620      	mov	r0, r4
    a8f4:	f000 feb2 	bl	b65c <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    a8f8:	e7c7      	b.n	a88a <bt_conn_recv+0xaa>
    a8fa:	bf00      	nop
    a8fc:	0002e649 	.word	0x0002e649
    a900:	0002b5d4 	.word	0x0002b5d4
    a904:	0002e6c9 	.word	0x0002e6c9
    a908:	0002e666 	.word	0x0002e666
    a90c:	0002e684 	.word	0x0002e684
    a910:	0002e6ab 	.word	0x0002e6ab

0000a914 <bt_conn_send_cb>:
{
    a914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a918:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    a91a:	7b43      	ldrb	r3, [r0, #13]
    a91c:	2b07      	cmp	r3, #7
{
    a91e:	b088      	sub	sp, #32
    a920:	4605      	mov	r5, r0
    a922:	460e      	mov	r6, r1
    a924:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    a926:	d00d      	beq.n	a944 <bt_conn_send_cb+0x30>
		BT_ERR("not connected!");
    a928:	4b27      	ldr	r3, [pc, #156]	; (a9c8 <bt_conn_send_cb+0xb4>)
    a92a:	9306      	str	r3, [sp, #24]
    a92c:	4827      	ldr	r0, [pc, #156]	; (a9cc <bt_conn_send_cb+0xb8>)
    a92e:	2302      	movs	r3, #2
    a930:	aa05      	add	r2, sp, #20
    a932:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a936:	9301      	str	r3, [sp, #4]
    a938:	9305      	str	r3, [sp, #20]
    a93a:	f01c fe4c 	bl	275d6 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    a93e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    a942:	e01e      	b.n	a982 <bt_conn_send_cb+0x6e>
	if (cb) {
    a944:	2a00      	cmp	r2, #0
    a946:	d03d      	beq.n	a9c4 <bt_conn_send_cb+0xb0>
	return z_impl_z_current_get();
    a948:	f018 fa8c 	bl	22e64 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    a94c:	4b20      	ldr	r3, [pc, #128]	; (a9d0 <bt_conn_send_cb+0xbc>)
    a94e:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    a950:	4820      	ldr	r0, [pc, #128]	; (a9d4 <bt_conn_send_cb+0xc0>)
    a952:	bf07      	ittee	eq
    a954:	2200      	moveq	r2, #0
    a956:	2300      	moveq	r3, #0
    a958:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    a95c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    a960:	f017 fd4e 	bl	22400 <z_impl_k_queue_get>
    a964:	4604      	mov	r4, r0
		if (!tx) {
    a966:	b978      	cbnz	r0, a988 <bt_conn_send_cb+0x74>
			BT_ERR("Unable to allocate TX context");
    a968:	4b1b      	ldr	r3, [pc, #108]	; (a9d8 <bt_conn_send_cb+0xc4>)
    a96a:	4818      	ldr	r0, [pc, #96]	; (a9cc <bt_conn_send_cb+0xb8>)
    a96c:	9306      	str	r3, [sp, #24]
    a96e:	aa05      	add	r2, sp, #20
    a970:	2302      	movs	r3, #2
    a972:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a976:	9301      	str	r3, [sp, #4]
    a978:	9305      	str	r3, [sp, #20]
    a97a:	f01c fe2c 	bl	275d6 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    a97e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    a982:	b008      	add	sp, #32
    a984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    a988:	7b6b      	ldrb	r3, [r5, #13]
    a98a:	2b07      	cmp	r3, #7
    a98c:	d00e      	beq.n	a9ac <bt_conn_send_cb+0x98>
			BT_WARN("Disconnected while allocating context");
    a98e:	4b13      	ldr	r3, [pc, #76]	; (a9dc <bt_conn_send_cb+0xc8>)
    a990:	9306      	str	r3, [sp, #24]
    a992:	480e      	ldr	r0, [pc, #56]	; (a9cc <bt_conn_send_cb+0xb8>)
    a994:	2302      	movs	r3, #2
    a996:	aa05      	add	r2, sp, #20
    a998:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a99c:	9301      	str	r3, [sp, #4]
    a99e:	9305      	str	r3, [sp, #20]
    a9a0:	f01c fe19 	bl	275d6 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    a9a4:	4620      	mov	r0, r4
    a9a6:	f7ff fe1b 	bl	a5e0 <tx_free>
    a9aa:	e7c8      	b.n	a93e <bt_conn_send_cb+0x2a>
		tx->pending_no_cb = 0U;
    a9ac:	2300      	movs	r3, #0
		tx->user_data = user_data;
    a9ae:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    a9b2:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    a9b4:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    a9b6:	f105 0038 	add.w	r0, r5, #56	; 0x38
    a9ba:	4631      	mov	r1, r6
    a9bc:	f01e ff86 	bl	298cc <net_buf_put>
	return 0;
    a9c0:	2000      	movs	r0, #0
    a9c2:	e7de      	b.n	a982 <bt_conn_send_cb+0x6e>
		tx_data(buf)->tx = NULL;
    a9c4:	614a      	str	r2, [r1, #20]
    a9c6:	e7f6      	b.n	a9b6 <bt_conn_send_cb+0xa2>
    a9c8:	0002e6e4 	.word	0x0002e6e4
    a9cc:	0002b5d4 	.word	0x0002b5d4
    a9d0:	20001d68 	.word	0x20001d68
    a9d4:	20000c44 	.word	0x20000c44
    a9d8:	0002e6f3 	.word	0x0002e6f3
    a9dc:	0002e711 	.word	0x0002e711

0000a9e0 <bt_conn_prepare_events>:
{
    a9e0:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    a9e2:	4b16      	ldr	r3, [pc, #88]	; (aa3c <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    a9e4:	4c16      	ldr	r4, [pc, #88]	; (aa40 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    a9e6:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a9e8:	2101      	movs	r1, #1
{
    a9ea:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    a9ec:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    a9ee:	f020 f800 	bl	2a9f2 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    a9f2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    a9f6:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    a9fa:	f01c fdd0 	bl	2759e <atomic_get>
    a9fe:	b908      	cbnz	r0, aa04 <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    aa00:	2001      	movs	r0, #1
}
    aa02:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    aa04:	7b63      	ldrb	r3, [r4, #13]
    aa06:	b953      	cbnz	r3, aa1e <bt_conn_prepare_events+0x3e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    aa08:	f06f 0140 	mvn.w	r1, #64	; 0x40
    aa0c:	1d20      	adds	r0, r4, #4
    aa0e:	f01c fdb7 	bl	27580 <atomic_and>
    aa12:	0643      	lsls	r3, r0, #25
    aa14:	d503      	bpl.n	aa1e <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    aa16:	4620      	mov	r0, r4
    aa18:	f01c fe1e 	bl	27658 <conn_cleanup>
    aa1c:	e7f0      	b.n	aa00 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    aa1e:	7b63      	ldrb	r3, [r4, #13]
    aa20:	2b07      	cmp	r3, #7
    aa22:	d1ed      	bne.n	aa00 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    aa24:	4b07      	ldr	r3, [pc, #28]	; (aa44 <bt_conn_prepare_events+0x64>)
    aa26:	4630      	mov	r0, r6
    aa28:	2200      	movs	r2, #0
    aa2a:	2104      	movs	r1, #4
    aa2c:	f01f ffe1 	bl	2a9f2 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    aa30:	2301      	movs	r3, #1
    aa32:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    aa36:	2002      	movs	r0, #2
	return ev_count;
    aa38:	e7e3      	b.n	aa02 <bt_conn_prepare_events+0x22>
    aa3a:	bf00      	nop
    aa3c:	20000200 	.word	0x20000200
    aa40:	200014b8 	.word	0x200014b8
    aa44:	200014f0 	.word	0x200014f0

0000aa48 <bt_conn_lookup_handle>:
{
    aa48:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    aa4a:	2101      	movs	r1, #1
    aa4c:	4801      	ldr	r0, [pc, #4]	; (aa54 <bt_conn_lookup_handle+0xc>)
    aa4e:	f01c be55 	b.w	276fc <conn_lookup_handle>
    aa52:	bf00      	nop
    aa54:	200014b8 	.word	0x200014b8

0000aa58 <bt_conn_set_state>:
{
    aa58:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    aa5a:	7b46      	ldrb	r6, [r0, #13]
    aa5c:	42b1      	cmp	r1, r6
{
    aa5e:	b08c      	sub	sp, #48	; 0x30
    aa60:	4604      	mov	r4, r0
    aa62:	460d      	mov	r5, r1
	if (conn->state == state) {
    aa64:	d111      	bne.n	aa8a <bt_conn_set_state+0x32>
	switch (state) {
    aa66:	2908      	cmp	r1, #8
    aa68:	bf96      	itet	ls
    aa6a:	4b7c      	ldrls	r3, [pc, #496]	; (ac5c <bt_conn_set_state+0x204>)
	if (conn->state == state) {
    aa6c:	4b7c      	ldrhi	r3, [pc, #496]	; (ac60 <bt_conn_set_state+0x208>)
    aa6e:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    aa72:	9302      	str	r3, [sp, #8]
    aa74:	4b7b      	ldr	r3, [pc, #492]	; (ac64 <bt_conn_set_state+0x20c>)
    aa76:	9301      	str	r3, [sp, #4]
    aa78:	2300      	movs	r3, #0
    aa7a:	497b      	ldr	r1, [pc, #492]	; (ac68 <bt_conn_set_state+0x210>)
    aa7c:	9300      	str	r3, [sp, #0]
    aa7e:	2202      	movs	r2, #2
    aa80:	4618      	mov	r0, r3
    aa82:	f01c fdab 	bl	275dc <z_log_msg2_runtime_create.constprop.0>
}
    aa86:	b00c      	add	sp, #48	; 0x30
    aa88:	bd70      	pop	{r4, r5, r6, pc}
	conn->state = state;
    aa8a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    aa8c:	b1d6      	cbz	r6, aac4 <bt_conn_set_state+0x6c>
    aa8e:	2e06      	cmp	r6, #6
    aa90:	d01e      	beq.n	aad0 <bt_conn_set_state+0x78>
	switch (conn->state) {
    aa92:	7b63      	ldrb	r3, [r4, #13]
    aa94:	2b08      	cmp	r3, #8
    aa96:	f200 80df 	bhi.w	ac58 <bt_conn_set_state+0x200>
    aa9a:	a201      	add	r2, pc, #4	; (adr r2, aaa0 <bt_conn_set_state+0x48>)
    aa9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aaa0:	0000ab45 	.word	0x0000ab45
    aaa4:	0000aadf 	.word	0x0000aadf
    aaa8:	0000aa87 	.word	0x0000aa87
    aaac:	0000aa87 	.word	0x0000aa87
    aab0:	0000aa87 	.word	0x0000aa87
    aab4:	0000aa87 	.word	0x0000aa87
    aab8:	0000abd7 	.word	0x0000abd7
    aabc:	0000ab0f 	.word	0x0000ab0f
    aac0:	0000aa87 	.word	0x0000aa87
		if (conn->type != BT_CONN_TYPE_ISO) {
    aac4:	7883      	ldrb	r3, [r0, #2]
    aac6:	2b08      	cmp	r3, #8
    aac8:	d0e3      	beq.n	aa92 <bt_conn_set_state+0x3a>
			bt_conn_ref(conn);
    aaca:	f01c fde3 	bl	27694 <bt_conn_ref>
    aace:	e7e0      	b.n	aa92 <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aad0:	7883      	ldrb	r3, [r0, #2]
    aad2:	2b01      	cmp	r3, #1
    aad4:	d1dd      	bne.n	aa92 <bt_conn_set_state+0x3a>
			k_work_cancel_delayable(&conn->deferred_work);
    aad6:	3058      	adds	r0, #88	; 0x58
    aad8:	f01f fc6d 	bl	2a3b6 <k_work_cancel_delayable>
    aadc:	e7d9      	b.n	aa92 <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    aade:	4d63      	ldr	r5, [pc, #396]	; (ac6c <bt_conn_set_state+0x214>)
		tx->pending_no_cb = 0U;
    aae0:	2600      	movs	r6, #0
	__asm__ volatile(
    aae2:	f04f 0320 	mov.w	r3, #32
    aae6:	f3ef 8211 	mrs	r2, BASEPRI
    aaea:	f383 8812 	msr	BASEPRI_MAX, r3
    aaee:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    aaf2:	69e3      	ldr	r3, [r4, #28]
    aaf4:	2b00      	cmp	r3, #0
    aaf6:	f000 808e 	beq.w	ac16 <bt_conn_set_state+0x1be>
			conn->pending_no_cb--;
    aafa:	3b01      	subs	r3, #1
    aafc:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    aafe:	f382 8811 	msr	BASEPRI, r2
    ab02:	f3bf 8f6f 	isb	sy
    ab06:	4628      	mov	r0, r5
    ab08:	f017 fcae 	bl	22468 <z_impl_k_sem_give>
}
    ab0c:	e7e9      	b.n	aae2 <bt_conn_set_state+0x8a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    ab0e:	78a3      	ldrb	r3, [r4, #2]
    ab10:	2b04      	cmp	r3, #4
    ab12:	d0b8      	beq.n	aa86 <bt_conn_set_state+0x2e>
	z_impl_k_queue_init(queue);
    ab14:	f104 0038 	add.w	r0, r4, #56	; 0x38
    ab18:	f01f fb3e 	bl	2a198 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    ab1c:	4854      	ldr	r0, [pc, #336]	; (ac70 <bt_conn_set_state+0x218>)
    ab1e:	2100      	movs	r1, #0
    ab20:	f018 fc60 	bl	233e4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    ab24:	2300      	movs	r3, #0
	list->tail = NULL;
    ab26:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ab2a:	78e3      	ldrb	r3, [r4, #3]
    ab2c:	2b01      	cmp	r3, #1
    ab2e:	d1aa      	bne.n	aa86 <bt_conn_set_state+0x2e>
			k_work_schedule(&conn->deferred_work,
    ab30:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    ab34:	2300      	movs	r3, #0
    ab36:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    ab3a:	b00c      	add	sp, #48	; 0x30
    ab3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    ab40:	f017 be66 	b.w	22810 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    ab44:	78a3      	ldrb	r3, [r4, #2]
    ab46:	2b04      	cmp	r3, #4
    ab48:	d105      	bne.n	ab56 <bt_conn_set_state+0xfe>
			bt_conn_unref(conn);
    ab4a:	4620      	mov	r0, r4
}
    ab4c:	b00c      	add	sp, #48	; 0x30
    ab4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    ab52:	f01c bdba 	b.w	276ca <bt_conn_unref>
		switch (old_state) {
    ab56:	2e08      	cmp	r6, #8
    ab58:	d895      	bhi.n	aa86 <bt_conn_set_state+0x2e>
    ab5a:	a301      	add	r3, pc, #4	; (adr r3, ab60 <bt_conn_set_state+0x108>)
    ab5c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    ab60:	0000abbd 	.word	0x0000abbd
    ab64:	0000ab85 	.word	0x0000ab85
    ab68:	0000abaf 	.word	0x0000abaf
    ab6c:	0000ab4b 	.word	0x0000ab4b
    ab70:	0000ab4b 	.word	0x0000ab4b
    ab74:	0000abaf 	.word	0x0000abaf
    ab78:	0000abaf 	.word	0x0000abaf
    ab7c:	0000abbd 	.word	0x0000abbd
    ab80:	0000abbd 	.word	0x0000abbd
			tx_notify(conn);
    ab84:	4620      	mov	r0, r4
    ab86:	f01c fd38 	bl	275fa <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    ab8a:	78a3      	ldrb	r3, [r4, #2]
    ab8c:	2b01      	cmp	r3, #1
    ab8e:	d103      	bne.n	ab98 <bt_conn_set_state+0x140>
				k_work_cancel_delayable(&conn->deferred_work);
    ab90:	f104 0058 	add.w	r0, r4, #88	; 0x58
    ab94:	f01f fc0f 	bl	2a3b6 <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ab98:	2140      	movs	r1, #64	; 0x40
    ab9a:	1d20      	adds	r0, r4, #4
    ab9c:	f01c fd05 	bl	275aa <atomic_or>
    aba0:	4833      	ldr	r0, [pc, #204]	; (ac70 <bt_conn_set_state+0x218>)
    aba2:	2100      	movs	r1, #0
}
    aba4:	b00c      	add	sp, #48	; 0x30
    aba6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    abaa:	f018 bc1b 	b.w	233e4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    abae:	7b23      	ldrb	r3, [r4, #12]
    abb0:	2b00      	cmp	r3, #0
    abb2:	d0ca      	beq.n	ab4a <bt_conn_set_state+0xf2>
				notify_connected(conn);
    abb4:	4620      	mov	r0, r4
    abb6:	f7ff fd1d 	bl	a5f4 <notify_connected>
    abba:	e7c6      	b.n	ab4a <bt_conn_set_state+0xf2>
			BT_WARN("Invalid (%u) old state", state);
    abbc:	4b2d      	ldr	r3, [pc, #180]	; (ac74 <bt_conn_set_state+0x21c>)
		BT_WARN("no valid (%u) state was set", state);
    abbe:	482a      	ldr	r0, [pc, #168]	; (ac68 <bt_conn_set_state+0x210>)
    abc0:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
    abc4:	aa09      	add	r2, sp, #36	; 0x24
    abc6:	2303      	movs	r3, #3
    abc8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    abcc:	9305      	str	r3, [sp, #20]
    abce:	9309      	str	r3, [sp, #36]	; 0x24
    abd0:	f01c fd01 	bl	275d6 <z_log_msg2_static_create.constprop.0>
		break;
    abd4:	e757      	b.n	aa86 <bt_conn_set_state+0x2e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    abd6:	78a3      	ldrb	r3, [r4, #2]
    abd8:	2b01      	cmp	r3, #1
    abda:	f47f af54 	bne.w	aa86 <bt_conn_set_state+0x2e>
					K_MSEC(10 * bt_dev.create_param.timeout));
    abde:	4b26      	ldr	r3, [pc, #152]	; (ac78 <bt_conn_set_state+0x220>)
    abe0:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    abe2:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    abe4:	b1a8      	cbz	r0, ac12 <bt_conn_set_state+0x1ba>
    abe6:	230a      	movs	r3, #10
    abe8:	4358      	muls	r0, r3
    abea:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    abec:	03c9      	lsls	r1, r1, #15
    abee:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    abf2:	f240 33e7 	movw	r3, #999	; 0x3e7
    abf6:	03c0      	lsls	r0, r0, #15
    abf8:	18c0      	adds	r0, r0, r3
    abfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    abfe:	f04f 0300 	mov.w	r3, #0
    ac02:	f141 0100 	adc.w	r1, r1, #0
    ac06:	f7f5 feb9 	bl	97c <__aeabi_uldivmod>
    ac0a:	4602      	mov	r2, r0
    ac0c:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    ac0e:	4620      	mov	r0, r4
    ac10:	e793      	b.n	ab3a <bt_conn_set_state+0xe2>
					K_MSEC(10 * bt_dev.create_param.timeout));
    ac12:	4601      	mov	r1, r0
    ac14:	e7ea      	b.n	abec <bt_conn_set_state+0x194>
	return list->head;
    ac16:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    ac18:	b128      	cbz	r0, ac26 <bt_conn_set_state+0x1ce>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac1a:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    ac1c:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    ac1e:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    ac20:	4288      	cmp	r0, r1
	list->tail = node;
    ac22:	bf08      	it	eq
    ac24:	61a3      	streq	r3, [r4, #24]
    ac26:	f382 8811 	msr	BASEPRI, r2
    ac2a:	f3bf 8f6f 	isb	sy
		if (!node) {
    ac2e:	2800      	cmp	r0, #0
    ac30:	f43f af29 	beq.w	aa86 <bt_conn_set_state+0x2e>
	__asm__ volatile(
    ac34:	f04f 0220 	mov.w	r2, #32
    ac38:	f3ef 8311 	mrs	r3, BASEPRI
    ac3c:	f382 8812 	msr	BASEPRI_MAX, r2
    ac40:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    ac44:	68c2      	ldr	r2, [r0, #12]
    ac46:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    ac48:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    ac4a:	f383 8811 	msr	BASEPRI, r3
    ac4e:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    ac52:	f7ff fcc5 	bl	a5e0 <tx_free>
    ac56:	e756      	b.n	ab06 <bt_conn_set_state+0xae>
		BT_WARN("no valid (%u) state was set", state);
    ac58:	4b08      	ldr	r3, [pc, #32]	; (ac7c <bt_conn_set_state+0x224>)
    ac5a:	e7b0      	b.n	abbe <bt_conn_set_state+0x166>
    ac5c:	0002bc78 	.word	0x0002bc78
    ac60:	0002e737 	.word	0x0002e737
    ac64:	0002e741 	.word	0x0002e741
    ac68:	0002b5d4 	.word	0x0002b5d4
    ac6c:	20000100 	.word	0x20000100
    ac70:	20000200 	.word	0x20000200
    ac74:	0002e752 	.word	0x0002e752
    ac78:	20000000 	.word	0x20000000
    ac7c:	0002e769 	.word	0x0002e769

0000ac80 <bt_conn_index>:
		index = conn - acl_conns;
    ac80:	4b03      	ldr	r3, [pc, #12]	; (ac90 <bt_conn_index+0x10>)
    ac82:	1ac0      	subs	r0, r0, r3
    ac84:	4b03      	ldr	r3, [pc, #12]	; (ac94 <bt_conn_index+0x14>)
    ac86:	1180      	asrs	r0, r0, #6
    ac88:	4358      	muls	r0, r3
}
    ac8a:	b2c0      	uxtb	r0, r0
    ac8c:	4770      	bx	lr
    ac8e:	bf00      	nop
    ac90:	200014b8 	.word	0x200014b8
    ac94:	aaaaaaab 	.word	0xaaaaaaab

0000ac98 <bt_conn_create_pdu_timeout>:
{
    ac98:	b530      	push	{r4, r5, lr}
    ac9a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    ac9c:	490d      	ldr	r1, [pc, #52]	; (acd4 <bt_conn_create_pdu_timeout+0x3c>)
    ac9e:	b089      	sub	sp, #36	; 0x24
    aca0:	2800      	cmp	r0, #0
    aca2:	bf08      	it	eq
    aca4:	4608      	moveq	r0, r1
    aca6:	f01e fde8 	bl	2987a <net_buf_alloc_fixed>
	if (!buf) {
    acaa:	4604      	mov	r4, r0
    acac:	b968      	cbnz	r0, acca <bt_conn_create_pdu_timeout+0x32>
		BT_WARN("Unable to allocate buffer within timeout");
    acae:	4b0a      	ldr	r3, [pc, #40]	; (acd8 <bt_conn_create_pdu_timeout+0x40>)
    acb0:	9306      	str	r3, [sp, #24]
    acb2:	480a      	ldr	r0, [pc, #40]	; (acdc <bt_conn_create_pdu_timeout+0x44>)
    acb4:	2302      	movs	r3, #2
    acb6:	aa05      	add	r2, sp, #20
    acb8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    acbc:	9301      	str	r3, [sp, #4]
    acbe:	9305      	str	r3, [sp, #20]
    acc0:	f01c fc89 	bl	275d6 <z_log_msg2_static_create.constprop.0>
}
    acc4:	4620      	mov	r0, r4
    acc6:	b009      	add	sp, #36	; 0x24
    acc8:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    acca:	1d29      	adds	r1, r5, #4
    accc:	3008      	adds	r0, #8
    acce:	f01e fdf9 	bl	298c4 <net_buf_simple_reserve>
	return buf;
    acd2:	e7f7      	b.n	acc4 <bt_conn_create_pdu_timeout+0x2c>
    acd4:	20000c74 	.word	0x20000c74
    acd8:	0002e785 	.word	0x0002e785
    acdc:	0002b5d4 	.word	0x0002b5d4

0000ace0 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    ace0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    ace2:	1d03      	adds	r3, r0, #4
{
    ace4:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ace6:	4618      	mov	r0, r3
    ace8:	f01c fc59 	bl	2759e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    acec:	0582      	lsls	r2, r0, #22
    acee:	d512      	bpl.n	ad16 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    acf0:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    acf4:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    acf8:	4291      	cmp	r1, r2
    acfa:	d80c      	bhi.n	ad16 <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    acfc:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    ad00:	4291      	cmp	r1, r2
    ad02:	d308      	bcc.n	ad16 <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    ad04:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    ad08:	4291      	cmp	r1, r2
    ad0a:	d104      	bne.n	ad16 <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad0c:	f46f 7100 	mvn.w	r1, #512	; 0x200
    ad10:	4618      	mov	r0, r3
    ad12:	f01c fc35 	bl	27580 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    ad16:	4b10      	ldr	r3, [pc, #64]	; (ad58 <notify_le_param_updated+0x78>)
    ad18:	681d      	ldr	r5, [r3, #0]
    ad1a:	b925      	cbnz	r5, ad26 <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ad1c:	4d0f      	ldr	r5, [pc, #60]	; (ad5c <notify_le_param_updated+0x7c>)
    ad1e:	4f10      	ldr	r7, [pc, #64]	; (ad60 <notify_le_param_updated+0x80>)
    ad20:	42bd      	cmp	r5, r7
    ad22:	d30c      	bcc.n	ad3e <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    ad24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    ad26:	68ee      	ldr	r6, [r5, #12]
    ad28:	b13e      	cbz	r6, ad3a <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
    ad2a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    ad2e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    ad32:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    ad36:	4620      	mov	r0, r4
    ad38:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    ad3a:	69ad      	ldr	r5, [r5, #24]
    ad3c:	e7ed      	b.n	ad1a <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
    ad3e:	68ee      	ldr	r6, [r5, #12]
    ad40:	b13e      	cbz	r6, ad52 <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
    ad42:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    ad46:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    ad4a:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    ad4e:	4620      	mov	r0, r4
    ad50:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ad52:	351c      	adds	r5, #28
    ad54:	e7e4      	b.n	ad20 <notify_le_param_updated+0x40>
    ad56:	bf00      	nop
    ad58:	20001f20 	.word	0x20001f20
    ad5c:	0002b5a4 	.word	0x0002b5a4
    ad60:	0002b5a4 	.word	0x0002b5a4

0000ad64 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    ad64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad68:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    ad6a:	4608      	mov	r0, r1
{
    ad6c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    ad6e:	f01c f9b6 	bl	270de <bt_le_conn_params_valid>
    ad72:	4605      	mov	r5, r0
    ad74:	b918      	cbnz	r0, ad7e <le_param_req+0x1a>
		return false;
    ad76:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    ad78:	4628      	mov	r0, r5
    ad7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    ad7e:	4b13      	ldr	r3, [pc, #76]	; (adcc <le_param_req+0x68>)
    ad80:	681e      	ldr	r6, [r3, #0]
    ad82:	b946      	cbnz	r6, ad96 <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ad84:	4e12      	ldr	r6, [pc, #72]	; (add0 <le_param_req+0x6c>)
    ad86:	f8df 804c 	ldr.w	r8, [pc, #76]	; add4 <le_param_req+0x70>
    ad8a:	4546      	cmp	r6, r8
    ad8c:	d2f4      	bcs.n	ad78 <le_param_req+0x14>
		if (!cb->le_param_req) {
    ad8e:	68b3      	ldr	r3, [r6, #8]
    ad90:	b983      	cbnz	r3, adb4 <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ad92:	361c      	adds	r6, #28
    ad94:	e7f9      	b.n	ad8a <le_param_req+0x26>
		if (!cb->le_param_req) {
    ad96:	68b3      	ldr	r3, [r6, #8]
    ad98:	b90b      	cbnz	r3, ad9e <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    ad9a:	69b6      	ldr	r6, [r6, #24]
    ad9c:	e7f1      	b.n	ad82 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    ad9e:	4621      	mov	r1, r4
    ada0:	4638      	mov	r0, r7
    ada2:	4798      	blx	r3
    ada4:	2800      	cmp	r0, #0
    ada6:	d0e6      	beq.n	ad76 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    ada8:	4620      	mov	r0, r4
    adaa:	f01c f998 	bl	270de <bt_le_conn_params_valid>
    adae:	2800      	cmp	r0, #0
    adb0:	d1f3      	bne.n	ad9a <le_param_req+0x36>
    adb2:	e7e0      	b.n	ad76 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    adb4:	4621      	mov	r1, r4
    adb6:	4638      	mov	r0, r7
    adb8:	4798      	blx	r3
    adba:	2800      	cmp	r0, #0
    adbc:	d0db      	beq.n	ad76 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    adbe:	4620      	mov	r0, r4
    adc0:	f01c f98d 	bl	270de <bt_le_conn_params_valid>
    adc4:	2800      	cmp	r0, #0
    adc6:	d1e4      	bne.n	ad92 <le_param_req+0x2e>
    adc8:	e7d5      	b.n	ad76 <le_param_req+0x12>
    adca:	bf00      	nop
    adcc:	20001f20 	.word	0x20001f20
    add0:	0002b5a4 	.word	0x0002b5a4
    add4:	0002b5a4 	.word	0x0002b5a4

0000add8 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    add8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    addc:	78c3      	ldrb	r3, [r0, #3]
{
    adde:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    ade0:	b973      	cbnz	r3, ae00 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    ade2:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    ade6:	4b10      	ldr	r3, [pc, #64]	; (ae28 <bt_conn_identity_resolved+0x50>)
    ade8:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    adea:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    adee:	b955      	cbnz	r5, ae06 <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    adf0:	4d0e      	ldr	r5, [pc, #56]	; (ae2c <bt_conn_identity_resolved+0x54>)
    adf2:	4f0f      	ldr	r7, [pc, #60]	; (ae30 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    adf4:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    adf8:	42bd      	cmp	r5, r7
    adfa:	d30c      	bcc.n	ae16 <bt_conn_identity_resolved+0x3e>
		}
	}
}
    adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    ae00:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    ae04:	e7ef      	b.n	ade6 <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    ae06:	692b      	ldr	r3, [r5, #16]
    ae08:	b11b      	cbz	r3, ae12 <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ae0a:	463a      	mov	r2, r7
    ae0c:	4631      	mov	r1, r6
    ae0e:	4620      	mov	r0, r4
    ae10:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ae12:	69ad      	ldr	r5, [r5, #24]
    ae14:	e7eb      	b.n	adee <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    ae16:	692b      	ldr	r3, [r5, #16]
    ae18:	b11b      	cbz	r3, ae22 <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ae1a:	4642      	mov	r2, r8
    ae1c:	4631      	mov	r1, r6
    ae1e:	4620      	mov	r0, r4
    ae20:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ae22:	351c      	adds	r5, #28
    ae24:	e7e8      	b.n	adf8 <bt_conn_identity_resolved+0x20>
    ae26:	bf00      	nop
    ae28:	20001f20 	.word	0x20001f20
    ae2c:	0002b5a4 	.word	0x0002b5a4
    ae30:	0002b5a4 	.word	0x0002b5a4

0000ae34 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    ae36:	7a43      	ldrb	r3, [r0, #9]
    ae38:	7283      	strb	r3, [r0, #10]
{
    ae3a:	4604      	mov	r4, r0
    ae3c:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    ae3e:	f01c fdf8 	bl	27a32 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    ae42:	4b0c      	ldr	r3, [pc, #48]	; (ae74 <bt_conn_security_changed+0x40>)
    ae44:	681d      	ldr	r5, [r3, #0]
    ae46:	b925      	cbnz	r5, ae52 <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ae48:	4d0b      	ldr	r5, [pc, #44]	; (ae78 <bt_conn_security_changed+0x44>)
    ae4a:	4f0c      	ldr	r7, [pc, #48]	; (ae7c <bt_conn_security_changed+0x48>)
    ae4c:	42bd      	cmp	r5, r7
    ae4e:	d308      	bcc.n	ae62 <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    ae50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    ae52:	696b      	ldr	r3, [r5, #20]
    ae54:	b11b      	cbz	r3, ae5e <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    ae56:	7a61      	ldrb	r1, [r4, #9]
    ae58:	4632      	mov	r2, r6
    ae5a:	4620      	mov	r0, r4
    ae5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ae5e:	69ad      	ldr	r5, [r5, #24]
    ae60:	e7f1      	b.n	ae46 <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    ae62:	696b      	ldr	r3, [r5, #20]
    ae64:	b11b      	cbz	r3, ae6e <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    ae66:	7a61      	ldrb	r1, [r4, #9]
    ae68:	4632      	mov	r2, r6
    ae6a:	4620      	mov	r0, r4
    ae6c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ae6e:	351c      	adds	r5, #28
    ae70:	e7ec      	b.n	ae4c <bt_conn_security_changed+0x18>
    ae72:	bf00      	nop
    ae74:	20001f20 	.word	0x20001f20
    ae78:	0002b5a4 	.word	0x0002b5a4
    ae7c:	0002b5a4 	.word	0x0002b5a4

0000ae80 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    ae80:	4b02      	ldr	r3, [pc, #8]	; (ae8c <bt_conn_cb_register+0xc>)
    ae82:	681a      	ldr	r2, [r3, #0]
    ae84:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    ae86:	6018      	str	r0, [r3, #0]
}
    ae88:	4770      	bx	lr
    ae8a:	bf00      	nop
    ae8c:	20001f20 	.word	0x20001f20

0000ae90 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    ae90:	b538      	push	{r3, r4, r5, lr}
    ae92:	4605      	mov	r5, r0
    ae94:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    ae96:	480a      	ldr	r0, [pc, #40]	; (aec0 <bt_conn_add_le+0x30>)
    ae98:	2101      	movs	r1, #1
    ae9a:	f7ff fc6d 	bl	a778 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    ae9e:	4602      	mov	r2, r0
    aea0:	b158      	cbz	r0, aeba <bt_conn_add_le+0x2a>
		return NULL;
	}

	conn->id = id;
    aea2:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
    aea4:	4621      	mov	r1, r4
    aea6:	3088      	adds	r0, #136	; 0x88
    aea8:	f01c fb8e 	bl	275c8 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    aeac:	2301      	movs	r3, #1
    aeae:	7253      	strb	r3, [r2, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    aeb0:	7293      	strb	r3, [r2, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    aeb2:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    aeb4:	4b03      	ldr	r3, [pc, #12]	; (aec4 <bt_conn_add_le+0x34>)
    aeb6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    aeba:	4610      	mov	r0, r2
    aebc:	bd38      	pop	{r3, r4, r5, pc}
    aebe:	bf00      	nop
    aec0:	200014b8 	.word	0x200014b8
    aec4:	00280018 	.word	0x00280018

0000aec8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    aec8:	b570      	push	{r4, r5, r6, lr}
    aeca:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    aecc:	480c      	ldr	r0, [pc, #48]	; (af00 <bt_conn_lookup_addr_le+0x38>)
{
    aece:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    aed0:	f01c fbe0 	bl	27694 <bt_conn_ref>

		if (!conn) {
    aed4:	4604      	mov	r4, r0
    aed6:	b128      	cbz	r0, aee4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    aed8:	7883      	ldrb	r3, [r0, #2]
    aeda:	2b01      	cmp	r3, #1
    aedc:	d004      	beq.n	aee8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    aede:	f01c fbf4 	bl	276ca <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    aee2:	2400      	movs	r4, #0
}
    aee4:	4620      	mov	r0, r4
    aee6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    aee8:	4629      	mov	r1, r5
    aeea:	4632      	mov	r2, r6
    aeec:	f01c fc95 	bl	2781a <bt_conn_is_peer_addr_le>
    aef0:	4605      	mov	r5, r0
    aef2:	2800      	cmp	r0, #0
    aef4:	d1f6      	bne.n	aee4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    aef6:	4620      	mov	r0, r4
    aef8:	f01c fbe7 	bl	276ca <bt_conn_unref>
	return NULL;
    aefc:	462c      	mov	r4, r5
			continue;
    aefe:	e7f1      	b.n	aee4 <bt_conn_lookup_addr_le+0x1c>
    af00:	200014b8 	.word	0x200014b8

0000af04 <bt_conn_exists_le>:
{
    af04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    af06:	f7ff ffdf 	bl	aec8 <bt_conn_lookup_addr_le>
	if (conn) {
    af0a:	4604      	mov	r4, r0
    af0c:	b1a0      	cbz	r0, af38 <bt_conn_exists_le+0x34>
		BT_WARN("Found valid connection in %s state",
    af0e:	7b43      	ldrb	r3, [r0, #13]
    af10:	490a      	ldr	r1, [pc, #40]	; (af3c <bt_conn_exists_le+0x38>)
    af12:	2b08      	cmp	r3, #8
    af14:	bf96      	itet	ls
    af16:	4a0a      	ldrls	r2, [pc, #40]	; (af40 <bt_conn_exists_le+0x3c>)
    af18:	4b0a      	ldrhi	r3, [pc, #40]	; (af44 <bt_conn_exists_le+0x40>)
    af1a:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    af1e:	9302      	str	r3, [sp, #8]
    af20:	4b09      	ldr	r3, [pc, #36]	; (af48 <bt_conn_exists_le+0x44>)
    af22:	9301      	str	r3, [sp, #4]
    af24:	2300      	movs	r3, #0
    af26:	4618      	mov	r0, r3
    af28:	9300      	str	r3, [sp, #0]
    af2a:	2202      	movs	r2, #2
    af2c:	f01c fb56 	bl	275dc <z_log_msg2_runtime_create.constprop.0>
		bt_conn_unref(conn);
    af30:	4620      	mov	r0, r4
    af32:	f01c fbca 	bl	276ca <bt_conn_unref>
		return true;
    af36:	2001      	movs	r0, #1
}
    af38:	b004      	add	sp, #16
    af3a:	bd10      	pop	{r4, pc}
    af3c:	0002b5d4 	.word	0x0002b5d4
    af40:	0002bc78 	.word	0x0002bc78
    af44:	0002e737 	.word	0x0002e737
    af48:	0002e7ae 	.word	0x0002e7ae

0000af4c <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af4e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    af50:	480e      	ldr	r0, [pc, #56]	; (af8c <bt_conn_lookup_state_le+0x40>)
{
    af52:	460e      	mov	r6, r1
    af54:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    af56:	f01c fb9d 	bl	27694 <bt_conn_ref>

		if (!conn) {
    af5a:	4604      	mov	r4, r0
    af5c:	b1a0      	cbz	r0, af88 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    af5e:	7883      	ldrb	r3, [r0, #2]
    af60:	2b01      	cmp	r3, #1
    af62:	d003      	beq.n	af6c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    af64:	f01c fbb1 	bl	276ca <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    af68:	2400      	movs	r4, #0
			continue;
    af6a:	e00d      	b.n	af88 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    af6c:	b136      	cbz	r6, af7c <bt_conn_lookup_state_le+0x30>
    af6e:	4632      	mov	r2, r6
    af70:	4629      	mov	r1, r5
    af72:	f01c fc52 	bl	2781a <bt_conn_is_peer_addr_le>
    af76:	b908      	cbnz	r0, af7c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    af78:	4620      	mov	r0, r4
    af7a:	e7f3      	b.n	af64 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    af7c:	7b63      	ldrb	r3, [r4, #13]
    af7e:	42bb      	cmp	r3, r7
    af80:	d1fa      	bne.n	af78 <bt_conn_lookup_state_le+0x2c>
    af82:	7a23      	ldrb	r3, [r4, #8]
    af84:	42ab      	cmp	r3, r5
    af86:	d1f7      	bne.n	af78 <bt_conn_lookup_state_le+0x2c>
}
    af88:	4620      	mov	r0, r4
    af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af8c:	200014b8 	.word	0x200014b8

0000af90 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    af90:	b570      	push	{r4, r5, r6, lr}
    af92:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    af94:	482f      	ldr	r0, [pc, #188]	; (b054 <bt_le_set_auto_conn+0xc4>)
    af96:	f01c fb02 	bl	2759e <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    af9a:	0780      	lsls	r0, r0, #30
{
    af9c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    af9e:	d553      	bpl.n	b048 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    afa0:	b929      	cbnz	r1, afae <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    afa2:	f01c f9c9 	bl	27338 <bt_id_scan_random_addr_check>
    afa6:	b940      	cbnz	r0, afba <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    afa8:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    afac:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    afae:	4608      	mov	r0, r1
    afb0:	f01c f895 	bl	270de <bt_le_conn_params_valid>
    afb4:	2800      	cmp	r0, #0
    afb6:	d1f4      	bne.n	afa2 <bt_le_set_auto_conn+0x12>
    afb8:	e7f6      	b.n	afa8 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    afba:	4631      	mov	r1, r6
    afbc:	2000      	movs	r0, #0
    afbe:	f7ff ff83 	bl	aec8 <bt_conn_lookup_addr_le>
	if (!conn) {
    afc2:	4604      	mov	r4, r0
    afc4:	b928      	cbnz	r0, afd2 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    afc6:	4631      	mov	r1, r6
    afc8:	f7ff ff62 	bl	ae90 <bt_conn_add_le>
		if (!conn) {
    afcc:	4604      	mov	r4, r0
    afce:	2800      	cmp	r0, #0
    afd0:	d03d      	beq.n	b04e <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
    afd2:	1d20      	adds	r0, r4, #4
	if (param) {
    afd4:	b33d      	cbz	r5, b026 <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
    afd6:	882b      	ldrh	r3, [r5, #0]
    afd8:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    afdc:	886b      	ldrh	r3, [r5, #2]
    afde:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    afe2:	88ab      	ldrh	r3, [r5, #4]
    afe4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    afe8:	88eb      	ldrh	r3, [r5, #6]
    afea:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    afee:	2101      	movs	r1, #1
    aff0:	f01c fadb 	bl	275aa <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
    aff4:	07c1      	lsls	r1, r0, #31
    aff6:	d402      	bmi.n	affe <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
    aff8:	4620      	mov	r0, r4
    affa:	f01c fb4b 	bl	27694 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    affe:	7b63      	ldrb	r3, [r4, #13]
    b000:	b963      	cbnz	r3, b01c <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b002:	4814      	ldr	r0, [pc, #80]	; (b054 <bt_le_set_auto_conn+0xc4>)
    b004:	f01c facb 	bl	2759e <atomic_get>
    b008:	0783      	lsls	r3, r0, #30
    b00a:	d507      	bpl.n	b01c <bt_le_set_auto_conn+0x8c>
		if (param) {
    b00c:	b11d      	cbz	r5, b016 <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b00e:	2102      	movs	r1, #2
    b010:	4620      	mov	r0, r4
    b012:	f7ff fd21 	bl	aa58 <bt_conn_set_state>
		bt_le_scan_update(false);
    b016:	2000      	movs	r0, #0
    b018:	f7ff f84c 	bl	a0b4 <bt_le_scan_update>
	bt_conn_unref(conn);
    b01c:	4620      	mov	r0, r4
    b01e:	f01c fb54 	bl	276ca <bt_conn_unref>
	return 0;
    b022:	2000      	movs	r0, #0
    b024:	e7c2      	b.n	afac <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b026:	f06f 0101 	mvn.w	r1, #1
    b02a:	f01c faa9 	bl	27580 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    b02e:	07c2      	lsls	r2, r0, #31
    b030:	d5e5      	bpl.n	affe <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
    b032:	4620      	mov	r0, r4
    b034:	f01c fb49 	bl	276ca <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    b038:	7b63      	ldrb	r3, [r4, #13]
    b03a:	2b02      	cmp	r3, #2
    b03c:	d1df      	bne.n	affe <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    b03e:	4629      	mov	r1, r5
    b040:	4620      	mov	r0, r4
    b042:	f7ff fd09 	bl	aa58 <bt_conn_set_state>
    b046:	e7da      	b.n	affe <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
    b048:	f06f 000a 	mvn.w	r0, #10
    b04c:	e7ae      	b.n	afac <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    b04e:	f06f 000b 	mvn.w	r0, #11
    b052:	e7ab      	b.n	afac <bt_le_set_auto_conn+0x1c>
    b054:	200000cc 	.word	0x200000cc

0000b058 <send_conn_le_param_update>:
{
    b058:	b538      	push	{r3, r4, r5, lr}
    b05a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b05c:	4608      	mov	r0, r1
{
    b05e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b060:	f01c f83d 	bl	270de <bt_le_conn_params_valid>
    b064:	b338      	cbz	r0, b0b6 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b066:	4b15      	ldr	r3, [pc, #84]	; (b0bc <send_conn_le_param_update+0x64>)
    b068:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    b06c:	0799      	lsls	r1, r3, #30
    b06e:	d407      	bmi.n	b080 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    b070:	78e3      	ldrb	r3, [r4, #3]
    b072:	b173      	cbz	r3, b092 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    b074:	4629      	mov	r1, r5
    b076:	4620      	mov	r0, r4
}
    b078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b07c:	f000 bb26 	b.w	b6cc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b080:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b084:	079a      	lsls	r2, r3, #30
    b086:	d5f3      	bpl.n	b070 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b088:	1d20      	adds	r0, r4, #4
    b08a:	f01c fa88 	bl	2759e <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b08e:	0543      	lsls	r3, r0, #21
    b090:	d4ee      	bmi.n	b070 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b092:	4629      	mov	r1, r5
    b094:	4620      	mov	r0, r4
    b096:	f01c fc1b 	bl	278d0 <bt_conn_le_conn_update>
		if (rc == 0) {
    b09a:	b958      	cbnz	r0, b0b4 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    b09c:	882b      	ldrh	r3, [r5, #0]
    b09e:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    b0a2:	886b      	ldrh	r3, [r5, #2]
    b0a4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    b0a8:	88ab      	ldrh	r3, [r5, #4]
    b0aa:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b0ae:	88eb      	ldrh	r3, [r5, #6]
    b0b0:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b0b4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b0b6:	f06f 0015 	mvn.w	r0, #21
    b0ba:	e7fb      	b.n	b0b4 <send_conn_le_param_update+0x5c>
    b0bc:	20000000 	.word	0x20000000

0000b0c0 <deferred_work>:
{
    b0c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b0c2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    b0c6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    b0c8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b0cc:	b9fb      	cbnz	r3, b10e <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    b0ce:	4628      	mov	r0, r5
    b0d0:	f01c fc9e 	bl	27a10 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b0d4:	4b2a      	ldr	r3, [pc, #168]	; (b180 <deferred_work+0xc0>)
    b0d6:	681e      	ldr	r6, [r3, #0]
    b0d8:	b94e      	cbnz	r6, b0ee <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b0da:	4e2a      	ldr	r6, [pc, #168]	; (b184 <deferred_work+0xc4>)
    b0dc:	4f2a      	ldr	r7, [pc, #168]	; (b188 <deferred_work+0xc8>)
    b0de:	42be      	cmp	r6, r7
    b0e0:	d30d      	bcc.n	b0fe <deferred_work+0x3e>
		bt_conn_unref(conn);
    b0e2:	4628      	mov	r0, r5
}
    b0e4:	b003      	add	sp, #12
    b0e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    b0ea:	f01c baee 	b.w	276ca <bt_conn_unref>
		if (cb->disconnected) {
    b0ee:	6873      	ldr	r3, [r6, #4]
    b0f0:	b11b      	cbz	r3, b0fa <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    b0f2:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    b0f6:	4628      	mov	r0, r5
    b0f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b0fa:	69b6      	ldr	r6, [r6, #24]
    b0fc:	e7ec      	b.n	b0d8 <deferred_work+0x18>
		if (cb->disconnected) {
    b0fe:	6873      	ldr	r3, [r6, #4]
    b100:	b11b      	cbz	r3, b10a <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    b102:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    b106:	4628      	mov	r0, r5
    b108:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b10a:	361c      	adds	r6, #28
    b10c:	e7e7      	b.n	b0de <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    b10e:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b112:	2b01      	cmp	r3, #1
    b114:	d132      	bne.n	b17c <deferred_work+0xbc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b116:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    b11a:	b923      	cbnz	r3, b126 <deferred_work+0x66>
}
    b11c:	b003      	add	sp, #12
    b11e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    b122:	f7fd bb19 	b.w	8758 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    b126:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b12a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b12e:	4630      	mov	r0, r6
    b130:	f01c fa26 	bl	27580 <atomic_and>
    b134:	0583      	lsls	r3, r0, #22
    b136:	d51b      	bpl.n	b170 <deferred_work+0xb0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b138:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    b13c:	f8ad 3000 	strh.w	r3, [sp]
    b140:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b144:	f8ad 3002 	strh.w	r3, [sp, #2]
    b148:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b14c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b150:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    b154:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    b158:	4669      	mov	r1, sp
    b15a:	4628      	mov	r0, r5
    b15c:	f7ff ff7c 	bl	b058 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b160:	f44f 7180 	mov.w	r1, #256	; 0x100
    b164:	4630      	mov	r0, r6
}
    b166:	b003      	add	sp, #12
    b168:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b16c:	f01c ba1d 	b.w	275aa <atomic_or>
		param = BT_LE_CONN_PARAM(
    b170:	4a06      	ldr	r2, [pc, #24]	; (b18c <deferred_work+0xcc>)
    b172:	6810      	ldr	r0, [r2, #0]
    b174:	6851      	ldr	r1, [r2, #4]
    b176:	466b      	mov	r3, sp
    b178:	c303      	stmia	r3!, {r0, r1}
    b17a:	e7ed      	b.n	b158 <deferred_work+0x98>
}
    b17c:	b003      	add	sp, #12
    b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b180:	20001f20 	.word	0x20001f20
    b184:	0002b5a4 	.word	0x0002b5a4
    b188:	0002b5a4 	.word	0x0002b5a4
    b18c:	0002b802 	.word	0x0002b802

0000b190 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    b190:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b192:	4801      	ldr	r0, [pc, #4]	; (b198 <bt_conn_create_frag_timeout+0x8>)
    b194:	f7ff bd80 	b.w	ac98 <bt_conn_create_pdu_timeout>
    b198:	20000ccc 	.word	0x20000ccc

0000b19c <create_frag>:
{
    b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1a0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    b1a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b1a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b1aa:	2000      	movs	r0, #0
{
    b1ac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    b1ae:	f7ff ffef 	bl	b190 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b1b2:	7b73      	ldrb	r3, [r6, #13]
    b1b4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b1b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b1b8:	f04f 0600 	mov.w	r6, #0
    b1bc:	d005      	beq.n	b1ca <create_frag+0x2e>
		net_buf_unref(frag);
    b1be:	f014 fdd3 	bl	1fd68 <net_buf_unref>
		return NULL;
    b1c2:	4635      	mov	r5, r6
}
    b1c4:	4628      	mov	r0, r5
    b1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b1ca:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    b1cc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    b1d0:	4e0c      	ldr	r6, [pc, #48]	; (b204 <create_frag+0x68>)
    b1d2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b1d4:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    b1d8:	f01e fc04 	bl	299e4 <net_buf_simple_tailroom>
    b1dc:	4580      	cmp	r8, r0
    b1de:	d20c      	bcs.n	b1fa <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    b1e0:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b1e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    b1e8:	4632      	mov	r2, r6
    b1ea:	4638      	mov	r0, r7
    b1ec:	f01e fbb3 	bl	29956 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    b1f0:	4631      	mov	r1, r6
    b1f2:	4620      	mov	r0, r4
    b1f4:	f01e fbd2 	bl	2999c <net_buf_simple_pull>
    b1f8:	e7e4      	b.n	b1c4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    b1fa:	4638      	mov	r0, r7
    b1fc:	f01e fbf2 	bl	299e4 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b200:	b286      	uxth	r6, r0
    b202:	e7ef      	b.n	b1e4 <create_frag+0x48>
    b204:	20000000 	.word	0x20000000

0000b208 <bt_conn_process_tx>:
{
    b208:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b20a:	7b43      	ldrb	r3, [r0, #13]
{
    b20c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    b20e:	b95b      	cbnz	r3, b228 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b210:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b214:	3004      	adds	r0, #4
    b216:	f01c f9b3 	bl	27580 <atomic_and>
    b21a:	0643      	lsls	r3, r0, #25
    b21c:	d504      	bpl.n	b228 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    b21e:	4620      	mov	r0, r4
}
    b220:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    b224:	f01c ba18 	b.w	27658 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    b228:	2200      	movs	r2, #0
    b22a:	2300      	movs	r3, #0
    b22c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b230:	f01e fb28 	bl	29884 <net_buf_get>
	BT_ASSERT(buf);
    b234:	4605      	mov	r5, r0
    b236:	b960      	cbnz	r0, b252 <bt_conn_process_tx+0x4a>
    b238:	4a1f      	ldr	r2, [pc, #124]	; (b2b8 <bt_conn_process_tx+0xb0>)
    b23a:	4920      	ldr	r1, [pc, #128]	; (b2bc <bt_conn_process_tx+0xb4>)
    b23c:	4820      	ldr	r0, [pc, #128]	; (b2c0 <bt_conn_process_tx+0xb8>)
    b23e:	f240 23e7 	movw	r3, #743	; 0x2e7
    b242:	f019 fe60 	bl	24f06 <printk>
    b246:	4040      	eors	r0, r0
    b248:	f380 8811 	msr	BASEPRI, r0
    b24c:	f04f 0003 	mov.w	r0, #3
    b250:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    b252:	4e1c      	ldr	r6, [pc, #112]	; (b2c4 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    b254:	89aa      	ldrh	r2, [r5, #12]
    b256:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    b25a:	429a      	cmp	r2, r3
    b25c:	d807      	bhi.n	b26e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    b25e:	2300      	movs	r3, #0
    b260:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    b262:	4629      	mov	r1, r5
    b264:	4620      	mov	r0, r4
    b266:	f7ff f9e9 	bl	a63c <send_frag>
	if (!send_buf(conn, buf)) {
    b26a:	b130      	cbz	r0, b27a <bt_conn_process_tx+0x72>
}
    b26c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    b26e:	4629      	mov	r1, r5
    b270:	4620      	mov	r0, r4
    b272:	f7ff ff93 	bl	b19c <create_frag>
	if (!frag) {
    b276:	4601      	mov	r1, r0
    b278:	b920      	cbnz	r0, b284 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    b27a:	4628      	mov	r0, r5
}
    b27c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    b280:	f014 bd72 	b.w	1fd68 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    b284:	2301      	movs	r3, #1
    b286:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b288:	4620      	mov	r0, r4
    b28a:	f7ff f9d7 	bl	a63c <send_frag>
    b28e:	2800      	cmp	r0, #0
    b290:	d0f3      	beq.n	b27a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    b292:	89aa      	ldrh	r2, [r5, #12]
    b294:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    b298:	429a      	cmp	r2, r3
    b29a:	d802      	bhi.n	b2a2 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    b29c:	2300      	movs	r3, #0
    b29e:	2203      	movs	r2, #3
    b2a0:	e7df      	b.n	b262 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    b2a2:	4629      	mov	r1, r5
    b2a4:	4620      	mov	r0, r4
    b2a6:	f7ff ff79 	bl	b19c <create_frag>
		if (!frag) {
    b2aa:	4601      	mov	r1, r0
    b2ac:	2800      	cmp	r0, #0
    b2ae:	d0e4      	beq.n	b27a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    b2b0:	2301      	movs	r3, #1
    b2b2:	461a      	mov	r2, r3
    b2b4:	e7e8      	b.n	b288 <bt_conn_process_tx+0x80>
    b2b6:	bf00      	nop
    b2b8:	0002e7d1 	.word	0x0002e7d1
    b2bc:	0002dcd3 	.word	0x0002dcd3
    b2c0:	0002de52 	.word	0x0002de52
    b2c4:	20000000 	.word	0x20000000

0000b2c8 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    b2c8:	4b0c      	ldr	r3, [pc, #48]	; (b2fc <bt_conn_auth_cb_register+0x34>)
    b2ca:	b908      	cbnz	r0, b2d0 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    b2cc:	6018      	str	r0, [r3, #0]
		return 0;
    b2ce:	4770      	bx	lr
	}

	if (bt_auth) {
    b2d0:	681a      	ldr	r2, [r3, #0]
    b2d2:	b962      	cbnz	r2, b2ee <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    b2d4:	6902      	ldr	r2, [r0, #16]
    b2d6:	b93a      	cbnz	r2, b2e8 <bt_conn_auth_cb_register+0x20>
    b2d8:	6802      	ldr	r2, [r0, #0]
    b2da:	b95a      	cbnz	r2, b2f4 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    b2dc:	6842      	ldr	r2, [r0, #4]
    b2de:	b94a      	cbnz	r2, b2f4 <bt_conn_auth_cb_register+0x2c>
    b2e0:	6882      	ldr	r2, [r0, #8]
    b2e2:	b93a      	cbnz	r2, b2f4 <bt_conn_auth_cb_register+0x2c>
    b2e4:	6942      	ldr	r2, [r0, #20]
    b2e6:	b92a      	cbnz	r2, b2f4 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    b2e8:	6018      	str	r0, [r3, #0]
	return 0;
    b2ea:	2000      	movs	r0, #0
    b2ec:	4770      	bx	lr
		return -EALREADY;
    b2ee:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b2f2:	4770      	bx	lr
		return -EINVAL;
    b2f4:	f06f 0015 	mvn.w	r0, #21
}
    b2f8:	4770      	bx	lr
    b2fa:	bf00      	nop
    b2fc:	20001f1c 	.word	0x20001f1c

0000b300 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    b300:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    b302:	4914      	ldr	r1, [pc, #80]	; (b354 <bt_conn_init+0x54>)
    b304:	4814      	ldr	r0, [pc, #80]	; (b358 <bt_conn_init+0x58>)
    b306:	f01e ff53 	bl	2a1b0 <k_queue_append>
    b30a:	4914      	ldr	r1, [pc, #80]	; (b35c <bt_conn_init+0x5c>)
    b30c:	4812      	ldr	r0, [pc, #72]	; (b358 <bt_conn_init+0x58>)
    b30e:	f01e ff4f 	bl	2a1b0 <k_queue_append>
    b312:	4913      	ldr	r1, [pc, #76]	; (b360 <bt_conn_init+0x60>)
    b314:	4810      	ldr	r0, [pc, #64]	; (b358 <bt_conn_init+0x58>)
    b316:	f01e ff4b 	bl	2a1b0 <k_queue_append>
	}

	bt_att_init();
    b31a:	f01c ff38 	bl	2818e <bt_att_init>

	err = bt_smp_init();
    b31e:	f004 fdcd 	bl	febc <bt_smp_init>
	if (err) {
    b322:	4605      	mov	r5, r0
    b324:	b998      	cbnz	r0, b34e <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
    b326:	f01c fbe9 	bl	27afc <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b32a:	480e      	ldr	r0, [pc, #56]	; (b364 <bt_conn_init+0x64>)
    b32c:	f01c f9b2 	bl	27694 <bt_conn_ref>

			if (!conn) {
    b330:	4604      	mov	r4, r0
    b332:	b160      	cbz	r0, b34e <bt_conn_init+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b334:	3004      	adds	r0, #4
    b336:	f01c f932 	bl	2759e <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    b33a:	07c3      	lsls	r3, r0, #31
    b33c:	d504      	bpl.n	b348 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    b33e:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    b340:	2102      	movs	r1, #2
    b342:	4620      	mov	r0, r4
    b344:	f7ff fb88 	bl	aa58 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
    b348:	4620      	mov	r0, r4
    b34a:	f01c f9be 	bl	276ca <bt_conn_unref>
		}
	}

	return 0;
}
    b34e:	4628      	mov	r0, r5
    b350:	bd38      	pop	{r3, r4, r5, pc}
    b352:	bf00      	nop
    b354:	20001f24 	.word	0x20001f24
    b358:	20000c44 	.word	0x20000c44
    b35c:	20001f34 	.word	0x20001f34
    b360:	20001f44 	.word	0x20001f44
    b364:	200014b8 	.word	0x200014b8

0000b368 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b368:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
    b36a:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    b36c:	b089      	sub	sp, #36	; 0x24
    b36e:	4605      	mov	r5, r0
    b370:	460f      	mov	r7, r1
    b372:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    b374:	2104      	movs	r1, #4
    b376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    b37a:	2000      	movs	r0, #0
    b37c:	f7ff fc8c 	bl	ac98 <bt_conn_create_pdu_timeout>
	if (!buf) {
    b380:	4604      	mov	r4, r0
    b382:	b970      	cbnz	r0, b3a2 <l2cap_create_le_sig_pdu.constprop.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    b384:	4b0b      	ldr	r3, [pc, #44]	; (b3b4 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    b386:	480c      	ldr	r0, [pc, #48]	; (b3b8 <l2cap_create_le_sig_pdu.constprop.0+0x50>)
    b388:	e9cd 3506 	strd	r3, r5, [sp, #24]
    b38c:	aa05      	add	r2, sp, #20
    b38e:	2303      	movs	r3, #3
    b390:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b394:	9301      	str	r3, [sp, #4]
    b396:	9305      	str	r3, [sp, #20]
    b398:	f01c fb04 	bl	279a4 <z_log_msg2_static_create.constprop.0>
}
    b39c:	4620      	mov	r0, r4
    b39e:	b009      	add	sp, #36	; 0x24
    b3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    b3a2:	2104      	movs	r1, #4
    b3a4:	3008      	adds	r0, #8
    b3a6:	f01e fad0 	bl	2994a <net_buf_simple_add>
	hdr->code = code;
    b3aa:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    b3ac:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    b3ae:	8046      	strh	r6, [r0, #2]
	return buf;
    b3b0:	e7f4      	b.n	b39c <l2cap_create_le_sig_pdu.constprop.0+0x34>
    b3b2:	bf00      	nop
    b3b4:	0002e85e 	.word	0x0002e85e
    b3b8:	0002b6dc 	.word	0x0002b6dc

0000b3bc <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    b3bc:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    b3be:	4a0d      	ldr	r2, [pc, #52]	; (b3f4 <l2cap_accept+0x38>)
{
    b3c0:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    b3c2:	6810      	ldr	r0, [r2, #0]
{
    b3c4:	b089      	sub	sp, #36	; 0x24
		if (l2cap->chan.chan.conn) {
    b3c6:	b928      	cbnz	r0, b3d4 <l2cap_accept+0x18>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    b3c8:	4b0b      	ldr	r3, [pc, #44]	; (b3f8 <l2cap_accept+0x3c>)
    b3ca:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    b3cc:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    b3ce:	b009      	add	sp, #36	; 0x24
    b3d0:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    b3d4:	4a09      	ldr	r2, [pc, #36]	; (b3fc <l2cap_accept+0x40>)
    b3d6:	480a      	ldr	r0, [pc, #40]	; (b400 <l2cap_accept+0x44>)
    b3d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    b3dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b3e0:	2303      	movs	r3, #3
    b3e2:	aa05      	add	r2, sp, #20
    b3e4:	9301      	str	r3, [sp, #4]
    b3e6:	9305      	str	r3, [sp, #20]
    b3e8:	f01c fadc 	bl	279a4 <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    b3ec:	f06f 000b 	mvn.w	r0, #11
    b3f0:	e7ed      	b.n	b3ce <l2cap_accept+0x12>
    b3f2:	bf00      	nop
    b3f4:	20001578 	.word	0x20001578
    b3f8:	0002bcbc 	.word	0x0002bcbc
    b3fc:	0002e886 	.word	0x0002e886
    b400:	0002b6dc 	.word	0x0002b6dc

0000b404 <l2cap_rtx_timeout>:
{
    b404:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    b406:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    b408:	4b0c      	ldr	r3, [pc, #48]	; (b43c <l2cap_rtx_timeout+0x38>)
	struct bt_conn *conn = chan->chan.conn;
    b40a:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    b40e:	480c      	ldr	r0, [pc, #48]	; (b440 <l2cap_rtx_timeout+0x3c>)
{
    b410:	b089      	sub	sp, #36	; 0x24
	BT_ERR("chan %p timeout", chan);
    b412:	e9cd 3406 	strd	r3, r4, [sp, #24]
    b416:	aa05      	add	r2, sp, #20
    b418:	2303      	movs	r3, #3
    b41a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b41e:	9301      	str	r3, [sp, #4]
    b420:	9305      	str	r3, [sp, #20]
    b422:	f01c fabf 	bl	279a4 <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
    b426:	4628      	mov	r0, r5
    b428:	4621      	mov	r1, r4
    b42a:	f01c fabe 	bl	279aa <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    b42e:	4620      	mov	r0, r4
}
    b430:	b009      	add	sp, #36	; 0x24
    b432:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    b436:	f01c bad6 	b.w	279e6 <bt_l2cap_chan_del>
    b43a:	bf00      	nop
    b43c:	0002e8ad 	.word	0x0002e8ad
    b440:	0002b6dc 	.word	0x0002b6dc

0000b444 <bt_l2cap_connected>:
{
    b444:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b448:	4e29      	ldr	r6, [pc, #164]	; (b4f0 <bt_l2cap_connected+0xac>)
    b44a:	4f2a      	ldr	r7, [pc, #168]	; (b4f4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    b44c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; b4f8 <bt_l2cap_connected+0xb4>
{
    b450:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b452:	42be      	cmp	r6, r7
    b454:	d302      	bcc.n	b45c <bt_l2cap_connected+0x18>
}
    b456:	b003      	add	sp, #12
    b458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    b45c:	6873      	ldr	r3, [r6, #4]
    b45e:	a901      	add	r1, sp, #4
    b460:	4620      	mov	r0, r4
    b462:	4798      	blx	r3
    b464:	2800      	cmp	r0, #0
    b466:	db3d      	blt.n	b4e4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    b468:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    b46a:	8833      	ldrh	r3, [r6, #0]
    b46c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    b470:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    b474:	4641      	mov	r1, r8
    b476:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    b47a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    b47e:	f01e ff8e 	bl	2a39e <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b482:	f3bf 8f5b 	dmb	ish
    b486:	f105 0368 	add.w	r3, r5, #104	; 0x68
    b48a:	2200      	movs	r2, #0
    b48c:	e853 1f00 	ldrex	r1, [r3]
    b490:	e843 2000 	strex	r0, r2, [r3]
    b494:	2800      	cmp	r0, #0
    b496:	d1f9      	bne.n	b48c <bt_l2cap_connected+0x48>
    b498:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    b49c:	60aa      	str	r2, [r5, #8]
	return list->tail;
    b49e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    b4a0:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    b4a4:	bb02      	cbnz	r2, b4e8 <bt_l2cap_connected+0xa4>
	list->head = node;
    b4a6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    b4aa:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    b4ac:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    b4ae:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    b4b0:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    b4b4:	681b      	ldr	r3, [r3, #0]
    b4b6:	b103      	cbz	r3, b4ba <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    b4b8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b4ba:	9b01      	ldr	r3, [sp, #4]
    b4bc:	f3bf 8f5b 	dmb	ish
    b4c0:	3368      	adds	r3, #104	; 0x68
    b4c2:	e853 2f00 	ldrex	r2, [r3]
    b4c6:	f042 0201 	orr.w	r2, r2, #1
    b4ca:	e843 2100 	strex	r1, r2, [r3]
    b4ce:	2900      	cmp	r1, #0
    b4d0:	d1f7      	bne.n	b4c2 <bt_l2cap_connected+0x7e>
    b4d2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    b4d6:	9801      	ldr	r0, [sp, #4]
    b4d8:	6843      	ldr	r3, [r0, #4]
    b4da:	699b      	ldr	r3, [r3, #24]
    b4dc:	b113      	cbz	r3, b4e4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    b4de:	f100 0168 	add.w	r1, r0, #104	; 0x68
    b4e2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    b4e4:	360c      	adds	r6, #12
    b4e6:	e7b4      	b.n	b452 <bt_l2cap_connected+0xe>
	parent->next = child;
    b4e8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b4ea:	6563      	str	r3, [r4, #84]	; 0x54
}
    b4ec:	e7dd      	b.n	b4aa <bt_l2cap_connected+0x66>
    b4ee:	bf00      	nop
    b4f0:	0002b580 	.word	0x0002b580
    b4f4:	0002b5a4 	.word	0x0002b5a4
    b4f8:	0000b405 	.word	0x0000b405

0000b4fc <l2cap_recv>:
{
    b4fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b500:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
    b502:	898b      	ldrh	r3, [r1, #12]
    b504:	2b03      	cmp	r3, #3
{
    b506:	af02      	add	r7, sp, #8
    b508:	4606      	mov	r6, r0
    b50a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    b50c:	d80c      	bhi.n	b528 <l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP signaling PDU");
    b50e:	4b4c      	ldr	r3, [pc, #304]	; (b640 <l2cap_recv+0x144>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    b510:	61bb      	str	r3, [r7, #24]
    b512:	484c      	ldr	r0, [pc, #304]	; (b644 <l2cap_recv+0x148>)
    b514:	2302      	movs	r3, #2
    b516:	f107 0214 	add.w	r2, r7, #20
    b51a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b51e:	607b      	str	r3, [r7, #4]
    b520:	617b      	str	r3, [r7, #20]
    b522:	f01c fa3f 	bl	279a4 <z_log_msg2_static_create.constprop.0>
		return 0;
    b526:	e01a      	b.n	b55e <l2cap_recv+0x62>
	return net_buf_simple_pull_mem(&buf->b, len);
    b528:	2104      	movs	r1, #4
    b52a:	f105 0008 	add.w	r0, r5, #8
    b52e:	f01e fa3d 	bl	299ac <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
    b532:	8843      	ldrh	r3, [r0, #2]
    b534:	4604      	mov	r4, r0
	if (buf->len != len) {
    b536:	89a8      	ldrh	r0, [r5, #12]
    b538:	4298      	cmp	r0, r3
    b53a:	d015      	beq.n	b568 <l2cap_recv+0x6c>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    b53c:	466c      	mov	r4, sp
    b53e:	b088      	sub	sp, #32
    b540:	aa02      	add	r2, sp, #8
    b542:	4941      	ldr	r1, [pc, #260]	; (b648 <l2cap_recv+0x14c>)
    b544:	6193      	str	r3, [r2, #24]
    b546:	2304      	movs	r3, #4
    b548:	e9c2 1004 	strd	r1, r0, [r2, #16]
    b54c:	f842 3f0c 	str.w	r3, [r2, #12]!
    b550:	483c      	ldr	r0, [pc, #240]	; (b644 <l2cap_recv+0x148>)
    b552:	60bb      	str	r3, [r7, #8]
    b554:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b558:	f01c fa24 	bl	279a4 <z_log_msg2_static_create.constprop.0>
    b55c:	46a5      	mov	sp, r4
}
    b55e:	2000      	movs	r0, #0
    b560:	3720      	adds	r7, #32
    b562:	46bd      	mov	sp, r7
    b564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
    b568:	7861      	ldrb	r1, [r4, #1]
    b56a:	b909      	cbnz	r1, b570 <l2cap_recv+0x74>
		BT_ERR("Invalid ident value in L2CAP PDU");
    b56c:	4b37      	ldr	r3, [pc, #220]	; (b64c <l2cap_recv+0x150>)
    b56e:	e7cf      	b.n	b510 <l2cap_recv+0x14>
	switch (hdr->code) {
    b570:	7823      	ldrb	r3, [r4, #0]
    b572:	2b12      	cmp	r3, #18
    b574:	d017      	beq.n	b5a6 <l2cap_recv+0xaa>
    b576:	2b13      	cmp	r3, #19
    b578:	d011      	beq.n	b59e <l2cap_recv+0xa2>
    b57a:	2b01      	cmp	r3, #1
    b57c:	d0ef      	beq.n	b55e <l2cap_recv+0x62>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b57e:	4a34      	ldr	r2, [pc, #208]	; (b650 <l2cap_recv+0x154>)
    b580:	4830      	ldr	r0, [pc, #192]	; (b644 <l2cap_recv+0x148>)
	switch (hdr->code) {
    b582:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    b586:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b58a:	2303      	movs	r3, #3
    b58c:	f107 0214 	add.w	r2, r7, #20
    b590:	607b      	str	r3, [r7, #4]
    b592:	617b      	str	r3, [r7, #20]
    b594:	f01c fa06 	bl	279a4 <z_log_msg2_static_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
    b598:	7861      	ldrb	r1, [r4, #1]
    b59a:	6830      	ldr	r0, [r6, #0]
    b59c:	e00e      	b.n	b5bc <l2cap_recv+0xc0>
	if (buf->len < sizeof(*rsp)) {
    b59e:	2801      	cmp	r0, #1
    b5a0:	d8dd      	bhi.n	b55e <l2cap_recv+0x62>
		BT_ERR("Too small LE conn param rsp");
    b5a2:	4b2c      	ldr	r3, [pc, #176]	; (b654 <l2cap_recv+0x158>)
    b5a4:	e7b4      	b.n	b510 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    b5a6:	2807      	cmp	r0, #7
    b5a8:	d801      	bhi.n	b5ae <l2cap_recv+0xb2>
		BT_ERR("Too small LE conn update param req");
    b5aa:	4b2b      	ldr	r3, [pc, #172]	; (b658 <l2cap_recv+0x15c>)
    b5ac:	e7b0      	b.n	b510 <l2cap_recv+0x14>
    b5ae:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
    b5b0:	f896 8003 	ldrb.w	r8, [r6, #3]
    b5b4:	f1b8 0f00 	cmp.w	r8, #0
    b5b8:	d003      	beq.n	b5c2 <l2cap_recv+0xc6>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    b5ba:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    b5bc:	f01c fa6a 	bl	27a94 <l2cap_send_reject.constprop.0>
		break;
    b5c0:	e7cd      	b.n	b55e <l2cap_recv+0x62>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    b5c2:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    b5c4:	7850      	ldrb	r0, [r2, #1]
    b5c6:	7813      	ldrb	r3, [r2, #0]
    b5c8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b5cc:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    b5ce:	78d0      	ldrb	r0, [r2, #3]
    b5d0:	7893      	ldrb	r3, [r2, #2]
    b5d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b5d6:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    b5d8:	7950      	ldrb	r0, [r2, #5]
    b5da:	7913      	ldrb	r3, [r2, #4]
    b5dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    b5e0:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    b5e2:	7993      	ldrb	r3, [r2, #6]
    b5e4:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b5e6:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    b5e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b5ec:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    b5ee:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    b5f0:	f7ff feba 	bl	b368 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b5f4:	4604      	mov	r4, r0
    b5f6:	2800      	cmp	r0, #0
    b5f8:	d0b1      	beq.n	b55e <l2cap_recv+0x62>
	accepted = le_param_req(conn, &param);
    b5fa:	f107 0108 	add.w	r1, r7, #8
    b5fe:	4630      	mov	r0, r6
    b600:	f7ff fbb0 	bl	ad64 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
    b604:	2102      	movs	r1, #2
    b606:	4605      	mov	r5, r0
    b608:	f104 0008 	add.w	r0, r4, #8
    b60c:	f01e f99d 	bl	2994a <net_buf_simple_add>
	if (accepted) {
    b610:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    b614:	b2db      	uxtb	r3, r3
    b616:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    b618:	4622      	mov	r2, r4
    b61a:	f8cd 8000 	str.w	r8, [sp]
    b61e:	4643      	mov	r3, r8
    b620:	2105      	movs	r1, #5
    b622:	4630      	mov	r0, r6
    b624:	f01c fa1d 	bl	27a62 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    b628:	b110      	cbz	r0, b630 <l2cap_recv+0x134>
		net_buf_unref(buf);
    b62a:	4620      	mov	r0, r4
    b62c:	f014 fb9c 	bl	1fd68 <net_buf_unref>
	if (accepted) {
    b630:	2d00      	cmp	r5, #0
    b632:	d094      	beq.n	b55e <l2cap_recv+0x62>
		bt_conn_le_conn_update(conn, &param);
    b634:	f107 0108 	add.w	r1, r7, #8
    b638:	4630      	mov	r0, r6
    b63a:	f01c f949 	bl	278d0 <bt_conn_le_conn_update>
    b63e:	e78e      	b.n	b55e <l2cap_recv+0x62>
    b640:	0002e8bd 	.word	0x0002e8bd
    b644:	0002b6dc 	.word	0x0002b6dc
    b648:	0002e8db 	.word	0x0002e8db
    b64c:	0002e8fc 	.word	0x0002e8fc
    b650:	0002e95c 	.word	0x0002e95c
    b654:	0002e91d 	.word	0x0002e91d
    b658:	0002e939 	.word	0x0002e939

0000b65c <bt_l2cap_recv>:
{
    b65c:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    b65e:	898b      	ldrh	r3, [r1, #12]
    b660:	2b03      	cmp	r3, #3
{
    b662:	b089      	sub	sp, #36	; 0x24
    b664:	4605      	mov	r5, r0
    b666:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    b668:	d810      	bhi.n	b68c <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
    b66a:	4b15      	ldr	r3, [pc, #84]	; (b6c0 <bt_l2cap_recv+0x64>)
    b66c:	9306      	str	r3, [sp, #24]
    b66e:	2302      	movs	r3, #2
    b670:	9301      	str	r3, [sp, #4]
    b672:	9305      	str	r3, [sp, #20]
    b674:	aa05      	add	r2, sp, #20
    b676:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    b67a:	4812      	ldr	r0, [pc, #72]	; (b6c4 <bt_l2cap_recv+0x68>)
    b67c:	f01c f992 	bl	279a4 <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
    b680:	4620      	mov	r0, r4
}
    b682:	b009      	add	sp, #36	; 0x24
    b684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
    b688:	f014 bb6e 	b.w	1fd68 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    b68c:	2104      	movs	r1, #4
    b68e:	f104 0008 	add.w	r0, r4, #8
    b692:	f01e f98b 	bl	299ac <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    b696:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    b698:	4628      	mov	r0, r5
    b69a:	f01c fa24 	bl	27ae6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b69e:	b948      	cbnz	r0, b6b4 <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    b6a0:	4b09      	ldr	r3, [pc, #36]	; (b6c8 <bt_l2cap_recv+0x6c>)
    b6a2:	e9cd 3106 	strd	r3, r1, [sp, #24]
    b6a6:	2303      	movs	r3, #3
    b6a8:	9301      	str	r3, [sp, #4]
    b6aa:	9305      	str	r3, [sp, #20]
    b6ac:	aa05      	add	r2, sp, #20
    b6ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b6b2:	e7e2      	b.n	b67a <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    b6b4:	6843      	ldr	r3, [r0, #4]
    b6b6:	4621      	mov	r1, r4
    b6b8:	691b      	ldr	r3, [r3, #16]
    b6ba:	4798      	blx	r3
    b6bc:	e7e0      	b.n	b680 <bt_l2cap_recv+0x24>
    b6be:	bf00      	nop
    b6c0:	0002e97a 	.word	0x0002e97a
    b6c4:	0002b6dc 	.word	0x0002b6dc
    b6c8:	0002e997 	.word	0x0002e997

0000b6cc <bt_l2cap_update_conn_param>:
{
    b6cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b6ce:	460d      	mov	r5, r1
	ident++;
    b6d0:	4916      	ldr	r1, [pc, #88]	; (b72c <bt_l2cap_update_conn_param+0x60>)
    b6d2:	780b      	ldrb	r3, [r1, #0]
    b6d4:	3301      	adds	r3, #1
	if (!ident) {
    b6d6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    b6da:	bf08      	it	eq
    b6dc:	2301      	moveq	r3, #1
    b6de:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b6e0:	7809      	ldrb	r1, [r1, #0]
{
    b6e2:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    b6e4:	2208      	movs	r2, #8
    b6e6:	2012      	movs	r0, #18
    b6e8:	f7ff fe3e 	bl	b368 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    b6ec:	4604      	mov	r4, r0
    b6ee:	b1d0      	cbz	r0, b726 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    b6f0:	2108      	movs	r1, #8
    b6f2:	4408      	add	r0, r1
    b6f4:	f01e f929 	bl	2994a <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    b6f8:	882b      	ldrh	r3, [r5, #0]
    b6fa:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    b6fc:	886b      	ldrh	r3, [r5, #2]
    b6fe:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    b700:	88ab      	ldrh	r3, [r5, #4]
    b702:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    b704:	88eb      	ldrh	r3, [r5, #6]
    b706:	80c3      	strh	r3, [r0, #6]
    b708:	2300      	movs	r3, #0
    b70a:	9300      	str	r3, [sp, #0]
    b70c:	4622      	mov	r2, r4
    b70e:	2105      	movs	r1, #5
    b710:	4630      	mov	r0, r6
    b712:	f01c f9a6 	bl	27a62 <bt_l2cap_send_cb>
	if (err) {
    b716:	4605      	mov	r5, r0
    b718:	b110      	cbz	r0, b720 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    b71a:	4620      	mov	r0, r4
    b71c:	f014 fb24 	bl	1fd68 <net_buf_unref>
}
    b720:	4628      	mov	r0, r5
    b722:	b002      	add	sp, #8
    b724:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    b726:	f06f 050b 	mvn.w	r5, #11
    b72a:	e7f9      	b.n	b720 <bt_l2cap_update_conn_param+0x54>
    b72c:	2000356d 	.word	0x2000356d

0000b730 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    b730:	4b02      	ldr	r3, [pc, #8]	; (b73c <att_cfm_sent+0xc>)
    b732:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    b736:	f01c b9f4 	b.w	27b22 <att_sent>
    b73a:	bf00      	nop
    b73c:	00027f91 	.word	0x00027f91

0000b740 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    b740:	4b02      	ldr	r3, [pc, #8]	; (b74c <att_rsp_sent+0xc>)
    b742:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    b746:	f01c b9ec 	b.w	27b22 <att_sent>
    b74a:	bf00      	nop
    b74c:	00027f75 	.word	0x00027f75

0000b750 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    b750:	4b02      	ldr	r3, [pc, #8]	; (b75c <att_req_sent+0xc>)
    b752:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    b756:	f01c b9e4 	b.w	27b22 <att_sent>
    b75a:	bf00      	nop
    b75c:	00027c81 	.word	0x00027c81

0000b760 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    b760:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    b762:	3808      	subs	r0, #8
    b764:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    b766:	a901      	add	r1, sp, #4
    b768:	4802      	ldr	r0, [pc, #8]	; (b774 <bt_att_released+0x14>)
    b76a:	f01e fc39 	bl	29fe0 <k_mem_slab_free>
}
    b76e:	b003      	add	sp, #12
    b770:	f85d fb04 	ldr.w	pc, [sp], #4
    b774:	20000afc 	.word	0x20000afc

0000b778 <find_type_cb>:
{
    b778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    b77c:	f8d2 9000 	ldr.w	r9, [r2]
{
    b780:	b099      	sub	sp, #100	; 0x64
    b782:	4606      	mov	r6, r0
    b784:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b786:	2500      	movs	r5, #0
    b788:	f642 0301 	movw	r3, #10241	; 0x2801
    b78c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    b78e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b792:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    b796:	a912      	add	r1, sp, #72	; 0x48
{
    b798:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    b79a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    b79e:	f01b fb35 	bl	26e0c <bt_uuid_cmp>
    b7a2:	2800      	cmp	r0, #0
    b7a4:	d069      	beq.n	b87a <find_type_cb+0x102>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    b7a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b7aa:	6830      	ldr	r0, [r6, #0]
    b7ac:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    b7b0:	a912      	add	r1, sp, #72	; 0x48
    b7b2:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    b7b6:	f01b fb29 	bl	26e0c <bt_uuid_cmp>
    b7ba:	b138      	cbz	r0, b7cc <find_type_cb+0x54>
		if (data->group &&
    b7bc:	68a3      	ldr	r3, [r4, #8]
    b7be:	b11b      	cbz	r3, b7c8 <find_type_cb+0x50>
    b7c0:	885a      	ldrh	r2, [r3, #2]
    b7c2:	42ba      	cmp	r2, r7
    b7c4:	d200      	bcs.n	b7c8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    b7c6:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    b7c8:	2001      	movs	r0, #1
    b7ca:	e009      	b.n	b7e0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    b7cc:	6861      	ldr	r1, [r4, #4]
    b7ce:	4608      	mov	r0, r1
    b7d0:	f01c f99f 	bl	27b12 <net_buf_frags_len>
    b7d4:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    b7d8:	1a1b      	subs	r3, r3, r0
    b7da:	2b03      	cmp	r3, #3
    b7dc:	d803      	bhi.n	b7e6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    b7de:	2000      	movs	r0, #0
}
    b7e0:	b019      	add	sp, #100	; 0x64
    b7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    b7e6:	4608      	mov	r0, r1
    b7e8:	f01e f881 	bl	298ee <net_buf_frag_last>
    b7ec:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    b7ee:	6860      	ldr	r0, [r4, #4]
    b7f0:	f01c f98f 	bl	27b12 <net_buf_frags_len>
    b7f4:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    b7f8:	f105 0b08 	add.w	fp, r5, #8
    b7fc:	ebaa 0a00 	sub.w	sl, sl, r0
    b800:	4658      	mov	r0, fp
    b802:	f01e f8ef 	bl	299e4 <net_buf_simple_tailroom>
    b806:	4550      	cmp	r0, sl
    b808:	d93a      	bls.n	b880 <find_type_cb+0x108>
    b80a:	6860      	ldr	r0, [r4, #4]
    b80c:	f01c f981 	bl	27b12 <net_buf_frags_len>
    b810:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    b814:	1a18      	subs	r0, r3, r0
	if (!len) {
    b816:	b970      	cbnz	r0, b836 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    b818:	6863      	ldr	r3, [r4, #4]
    b81a:	7998      	ldrb	r0, [r3, #6]
    b81c:	f014 f9e0 	bl	1fbe0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    b820:	2200      	movs	r2, #0
    b822:	2300      	movs	r3, #0
    b824:	f01e f829 	bl	2987a <net_buf_alloc_fixed>
		if (!frag) {
    b828:	4605      	mov	r5, r0
    b82a:	2800      	cmp	r0, #0
    b82c:	d0d7      	beq.n	b7de <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    b82e:	4601      	mov	r1, r0
    b830:	6860      	ldr	r0, [r4, #4]
    b832:	f01e f86d 	bl	29910 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    b836:	2300      	movs	r3, #0
    b838:	9300      	str	r3, [sp, #0]
    b83a:	2310      	movs	r3, #16
    b83c:	f8d6 9004 	ldr.w	r9, [r6, #4]
    b840:	4631      	mov	r1, r6
    b842:	eb0d 0203 	add.w	r2, sp, r3
    b846:	4640      	mov	r0, r8
    b848:	47c8      	blx	r9
	if (read < 0) {
    b84a:	1e06      	subs	r6, r0, #0
    b84c:	db15      	blt.n	b87a <find_type_cb+0x102>
	if (read != data->value_len) {
    b84e:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b850:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    b852:	4296      	cmp	r6, r2
    b854:	d035      	beq.n	b8c2 <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    b856:	4601      	mov	r1, r0
    b858:	a80d      	add	r0, sp, #52	; 0x34
    b85a:	f01b fb05 	bl	26e68 <bt_uuid_create>
    b85e:	b998      	cbnz	r0, b888 <find_type_cb+0x110>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    b860:	7c23      	ldrb	r3, [r4, #16]
    b862:	4a1a      	ldr	r2, [pc, #104]	; (b8cc <find_type_cb+0x154>)
    b864:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    b868:	2303      	movs	r3, #3
    b86a:	9308      	str	r3, [sp, #32]
			BT_WARN("Unable to create UUID: size %d", read);
    b86c:	4818      	ldr	r0, [pc, #96]	; (b8d0 <find_type_cb+0x158>)
    b86e:	9315      	str	r3, [sp, #84]	; 0x54
    b870:	aa15      	add	r2, sp, #84	; 0x54
    b872:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b876:	f01c fa91 	bl	27d9c <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
    b87a:	2300      	movs	r3, #0
    b87c:	60a3      	str	r3, [r4, #8]
    b87e:	e7a3      	b.n	b7c8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    b880:	4658      	mov	r0, fp
    b882:	f01e f8af 	bl	299e4 <net_buf_simple_tailroom>
    b886:	e7c6      	b.n	b816 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    b888:	b2f2      	uxtb	r2, r6
    b88a:	a904      	add	r1, sp, #16
    b88c:	a808      	add	r0, sp, #32
    b88e:	f01b faeb 	bl	26e68 <bt_uuid_create>
    b892:	b928      	cbnz	r0, b8a0 <find_type_cb+0x128>
			BT_WARN("Unable to create UUID: size %d", read);
    b894:	4b0f      	ldr	r3, [pc, #60]	; (b8d4 <find_type_cb+0x15c>)
    b896:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
    b89a:	2303      	movs	r3, #3
    b89c:	9303      	str	r3, [sp, #12]
    b89e:	e7e5      	b.n	b86c <find_type_cb+0xf4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    b8a0:	a908      	add	r1, sp, #32
    b8a2:	a80d      	add	r0, sp, #52	; 0x34
    b8a4:	f01b fab2 	bl	26e0c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    b8a8:	2800      	cmp	r0, #0
    b8aa:	d1e6      	bne.n	b87a <find_type_cb+0x102>
	data->err = 0x00;
    b8ac:	2300      	movs	r3, #0
    b8ae:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    b8b0:	2104      	movs	r1, #4
    b8b2:	f105 0008 	add.w	r0, r5, #8
    b8b6:	f01e f848 	bl	2994a <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    b8ba:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    b8bc:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    b8be:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    b8c0:	e782      	b.n	b7c8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    b8c2:	4632      	mov	r2, r6
    b8c4:	a904      	add	r1, sp, #16
    b8c6:	f01f f8b8 	bl	2aa3a <memcmp>
    b8ca:	e7ed      	b.n	b8a8 <find_type_cb+0x130>
    b8cc:	0002e9d3 	.word	0x0002e9d3
    b8d0:	0002b5c4 	.word	0x0002b5c4
    b8d4:	0002e9f2 	.word	0x0002e9f2

0000b8d8 <att_get>:
{
    b8d8:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    b8da:	7b43      	ldrb	r3, [r0, #13]
    b8dc:	2b07      	cmp	r3, #7
{
    b8de:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
    b8e0:	d00c      	beq.n	b8fc <att_get+0x24>
		BT_WARN("Not connected");
    b8e2:	4b16      	ldr	r3, [pc, #88]	; (b93c <att_get+0x64>)
		BT_WARN("ATT channel flagged as disconnected");
    b8e4:	9306      	str	r3, [sp, #24]
    b8e6:	4816      	ldr	r0, [pc, #88]	; (b940 <att_get+0x68>)
    b8e8:	2302      	movs	r3, #2
    b8ea:	aa05      	add	r2, sp, #20
    b8ec:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b8f0:	9301      	str	r3, [sp, #4]
    b8f2:	9305      	str	r3, [sp, #20]
		return NULL;
    b8f4:	2400      	movs	r4, #0
		BT_WARN("ATT channel flagged as disconnected");
    b8f6:	f01c fa51 	bl	27d9c <z_log_msg2_static_create.constprop.0>
		return NULL;
    b8fa:	e00f      	b.n	b91c <att_get+0x44>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    b8fc:	2104      	movs	r1, #4
    b8fe:	f01c f8f2 	bl	27ae6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    b902:	4604      	mov	r4, r0
    b904:	b968      	cbnz	r0, b922 <att_get+0x4a>
		BT_ERR("Unable to find ATT channel");
    b906:	4b0f      	ldr	r3, [pc, #60]	; (b944 <att_get+0x6c>)
    b908:	9306      	str	r3, [sp, #24]
    b90a:	480d      	ldr	r0, [pc, #52]	; (b940 <att_get+0x68>)
    b90c:	2302      	movs	r3, #2
    b90e:	aa05      	add	r2, sp, #20
    b910:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b914:	9301      	str	r3, [sp, #4]
    b916:	9305      	str	r3, [sp, #20]
    b918:	f01c fa40 	bl	27d9c <z_log_msg2_static_create.constprop.0>
}
    b91c:	4620      	mov	r0, r4
    b91e:	b008      	add	sp, #32
    b920:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b922:	f3bf 8f5b 	dmb	ish
    b926:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    b92a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    b92e:	075b      	lsls	r3, r3, #29
    b930:	d501      	bpl.n	b936 <att_get+0x5e>
		BT_WARN("ATT channel flagged as disconnected");
    b932:	4b05      	ldr	r3, [pc, #20]	; (b948 <att_get+0x70>)
    b934:	e7d6      	b.n	b8e4 <att_get+0xc>
	return att_chan->att;
    b936:	f850 4c08 	ldr.w	r4, [r0, #-8]
    b93a:	e7ef      	b.n	b91c <att_get+0x44>
    b93c:	0002ea11 	.word	0x0002ea11
    b940:	0002b5c4 	.word	0x0002b5c4
    b944:	0002ea1f 	.word	0x0002ea1f
    b948:	0002ea3a 	.word	0x0002ea3a

0000b94c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    b94c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b94e:	b08b      	sub	sp, #44	; 0x2c
    b950:	4607      	mov	r7, r0
    b952:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    b954:	4827      	ldr	r0, [pc, #156]	; (b9f4 <bt_att_accept+0xa8>)
    b956:	2200      	movs	r2, #0
    b958:	2300      	movs	r3, #0
    b95a:	a901      	add	r1, sp, #4
    b95c:	f016 fae4 	bl	21f28 <k_mem_slab_alloc>
    b960:	4604      	mov	r4, r0
    b962:	b180      	cbz	r0, b986 <bt_att_accept+0x3a>
		BT_ERR("No available ATT context for conn %p", conn);
    b964:	4b24      	ldr	r3, [pc, #144]	; (b9f8 <bt_att_accept+0xac>)
    b966:	e9cd 3708 	strd	r3, r7, [sp, #32]
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b96a:	2303      	movs	r3, #3
    b96c:	4823      	ldr	r0, [pc, #140]	; (b9fc <bt_att_accept+0xb0>)
    b96e:	9303      	str	r3, [sp, #12]
    b970:	aa07      	add	r2, sp, #28
    b972:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    b976:	f06f 040b 	mvn.w	r4, #11
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b97a:	9307      	str	r3, [sp, #28]
    b97c:	f01c fa0e 	bl	27d9c <z_log_msg2_static_create.constprop.0>
	}

	*ch = &chan->chan.chan;

	return 0;
}
    b980:	4620      	mov	r0, r4
    b982:	b00b      	add	sp, #44	; 0x2c
    b984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b986:	4601      	mov	r1, r0
    b988:	222c      	movs	r2, #44	; 0x2c
    b98a:	9801      	ldr	r0, [sp, #4]
    b98c:	f01f f886 	bl	2aa9c <memset>
	att->conn = conn;
    b990:	9d01      	ldr	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b992:	481b      	ldr	r0, [pc, #108]	; (ba00 <bt_att_accept+0xb4>)
	list->tail = NULL;
    b994:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    b996:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    b99a:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    b99e:	2200      	movs	r2, #0
    b9a0:	2300      	movs	r3, #0
    b9a2:	a902      	add	r1, sp, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    b9a4:	9402      	str	r4, [sp, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    b9a6:	f016 fabf 	bl	21f28 <k_mem_slab_alloc>
    b9aa:	4604      	mov	r4, r0
    b9ac:	b120      	cbz	r0, b9b8 <bt_att_accept+0x6c>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    b9ae:	682b      	ldr	r3, [r5, #0]
    b9b0:	4a14      	ldr	r2, [pc, #80]	; (ba04 <bt_att_accept+0xb8>)
    b9b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
    b9b6:	e7d8      	b.n	b96a <bt_att_accept+0x1e>
    b9b8:	4601      	mov	r1, r0
    b9ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
    b9be:	9802      	ldr	r0, [sp, #8]
    b9c0:	f01f f86c 	bl	2aa9c <memset>
	chan->chan.chan.ops = &ops;
    b9c4:	9802      	ldr	r0, [sp, #8]
    b9c6:	4b10      	ldr	r3, [pc, #64]	; (ba08 <bt_att_accept+0xbc>)
    b9c8:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    b9ca:	30f8      	adds	r0, #248	; 0xf8
    b9cc:	f01e fbe4 	bl	2a198 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b9d0:	9b02      	ldr	r3, [sp, #8]
    b9d2:	f3bf 8f5b 	dmb	ish
    b9d6:	33f0      	adds	r3, #240	; 0xf0
    b9d8:	e853 2f00 	ldrex	r2, [r3]
    b9dc:	e843 4100 	strex	r1, r4, [r3]
    b9e0:	2900      	cmp	r1, #0
    b9e2:	d1f9      	bne.n	b9d8 <bt_att_accept+0x8c>
    b9e4:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    b9e8:	9b02      	ldr	r3, [sp, #8]
    b9ea:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    b9ee:	6033      	str	r3, [r6, #0]
	return 0;
    b9f0:	e7c6      	b.n	b980 <bt_att_accept+0x34>
    b9f2:	bf00      	nop
    b9f4:	20000ae0 	.word	0x20000ae0
    b9f8:	0002ea5e 	.word	0x0002ea5e
    b9fc:	0002b5c4 	.word	0x0002b5c4
    ba00:	20000afc 	.word	0x20000afc
    ba04:	0002ea83 	.word	0x0002ea83
    ba08:	20000210 	.word	0x20000210

0000ba0c <read_group_cb>:
{
    ba0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    ba10:	4605      	mov	r5, r0
    ba12:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ba14:	f04f 0800 	mov.w	r8, #0
    ba18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    ba1c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    ba1e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ba20:	f88d 8008 	strb.w	r8, [sp, #8]
    ba24:	a902      	add	r1, sp, #8
{
    ba26:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ba28:	f8ad 300a 	strh.w	r3, [sp, #10]
    ba2c:	f01b f9ee 	bl	26e0c <bt_uuid_cmp>
    ba30:	b1a0      	cbz	r0, ba5c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    ba32:	f642 0301 	movw	r3, #10241	; 0x2801
    ba36:	6828      	ldr	r0, [r5, #0]
    ba38:	f88d 800c 	strb.w	r8, [sp, #12]
    ba3c:	a903      	add	r1, sp, #12
    ba3e:	f8ad 300e 	strh.w	r3, [sp, #14]
    ba42:	f01b f9e3 	bl	26e0c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    ba46:	b148      	cbz	r0, ba5c <read_group_cb+0x50>
		if (data->group &&
    ba48:	6923      	ldr	r3, [r4, #16]
    ba4a:	b11b      	cbz	r3, ba54 <read_group_cb+0x48>
    ba4c:	885a      	ldrh	r2, [r3, #2]
    ba4e:	42b2      	cmp	r2, r6
    ba50:	d200      	bcs.n	ba54 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    ba52:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    ba54:	2001      	movs	r0, #1
}
    ba56:	b004      	add	sp, #16
    ba58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    ba5c:	6861      	ldr	r1, [r4, #4]
    ba5e:	6828      	ldr	r0, [r5, #0]
    ba60:	f01b f9d4 	bl	26e0c <bt_uuid_cmp>
    ba64:	b110      	cbz	r0, ba6c <read_group_cb+0x60>
		data->group = NULL;
    ba66:	2300      	movs	r3, #0
    ba68:	6123      	str	r3, [r4, #16]
    ba6a:	e7f3      	b.n	ba54 <read_group_cb+0x48>
	if (data->rsp->len &&
    ba6c:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    ba6e:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    ba70:	781a      	ldrb	r2, [r3, #0]
    ba72:	b13a      	cbz	r2, ba84 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    ba74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    ba78:	8981      	ldrh	r1, [r0, #12]
    ba7a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    ba7c:	4293      	cmp	r3, r2
    ba7e:	da01      	bge.n	ba84 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    ba80:	2000      	movs	r0, #0
    ba82:	e7e8      	b.n	ba56 <read_group_cb+0x4a>
    ba84:	2104      	movs	r1, #4
    ba86:	3008      	adds	r0, #8
    ba88:	f01d ff5f 	bl	2994a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    ba8c:	4b09      	ldr	r3, [pc, #36]	; (bab4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    ba8e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    ba90:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    ba92:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    ba94:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    ba96:	4629      	mov	r1, r5
    ba98:	9300      	str	r3, [sp, #0]
    ba9a:	9401      	str	r4, [sp, #4]
    ba9c:	2300      	movs	r3, #0
    ba9e:	4638      	mov	r0, r7
    baa0:	f01c f97f 	bl	27da2 <att_chan_read>
	if (read < 0) {
    baa4:	2800      	cmp	r0, #0
    baa6:	dbeb      	blt.n	ba80 <read_group_cb+0x74>
	if (!data->group) {
    baa8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    baaa:	3800      	subs	r0, #0
    baac:	bf18      	it	ne
    baae:	2001      	movne	r0, #1
    bab0:	e7d1      	b.n	ba56 <read_group_cb+0x4a>
    bab2:	bf00      	nop
    bab4:	00027c61 	.word	0x00027c61

0000bab8 <chan_send>:
{
    bab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    babc:	688b      	ldr	r3, [r1, #8]
    babe:	781b      	ldrb	r3, [r3, #0]
    bac0:	2bd2      	cmp	r3, #210	; 0xd2
{
    bac2:	b08b      	sub	sp, #44	; 0x2c
    bac4:	4606      	mov	r6, r0
    bac6:	460c      	mov	r4, r1
    bac8:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    baca:	d117      	bne.n	bafc <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
    bacc:	6803      	ldr	r3, [r0, #0]
    bace:	6818      	ldr	r0, [r3, #0]
    bad0:	f01d fd39 	bl	29546 <bt_smp_sign>
		if (err) {
    bad4:	4605      	mov	r5, r0
    bad6:	b188      	cbz	r0, bafc <chan_send+0x44>
			BT_ERR("Error signing data");
    bad8:	4b24      	ldr	r3, [pc, #144]	; (bb6c <chan_send+0xb4>)
    bada:	4825      	ldr	r0, [pc, #148]	; (bb70 <chan_send+0xb8>)
    badc:	9308      	str	r3, [sp, #32]
    bade:	aa07      	add	r2, sp, #28
    bae0:	2302      	movs	r3, #2
    bae2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    bae6:	9303      	str	r3, [sp, #12]
    bae8:	9307      	str	r3, [sp, #28]
    baea:	f01c f957 	bl	27d9c <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    baee:	4620      	mov	r0, r4
    baf0:	f014 f93a 	bl	1fd68 <net_buf_unref>
}
    baf4:	4628      	mov	r0, r5
    baf6:	b00b      	add	sp, #44	; 0x2c
    baf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    bafc:	f104 0008 	add.w	r0, r4, #8
    bb00:	f01d ff6c 	bl	299dc <net_buf_simple_headroom>
	state->len = buf->len;
    bb04:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    bb08:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    bb0a:	b957      	cbnz	r7, bb22 <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    bb0c:	68a3      	ldr	r3, [r4, #8]
    bb0e:	7818      	ldrb	r0, [r3, #0]
    bb10:	f01c f81f 	bl	27b52 <att_op_get_type>
    bb14:	1e43      	subs	r3, r0, #1
    bb16:	b2db      	uxtb	r3, r3
    bb18:	2b04      	cmp	r3, #4
    bb1a:	bf9c      	itt	ls
    bb1c:	4a15      	ldrls	r2, [pc, #84]	; (bb74 <chan_send+0xbc>)
    bb1e:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bb22:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    bb24:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bb28:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    bb2a:	4b13      	ldr	r3, [pc, #76]	; (bb78 <chan_send+0xc0>)
    bb2c:	429f      	cmp	r7, r3
    bb2e:	d018      	beq.n	bb62 <chan_send+0xaa>
	} else if (cb == chan_cfm_sent) {
    bb30:	4b12      	ldr	r3, [pc, #72]	; (bb7c <chan_send+0xc4>)
    bb32:	429f      	cmp	r7, r3
    bb34:	d017      	beq.n	bb66 <chan_send+0xae>
		return att_sent;
    bb36:	4912      	ldr	r1, [pc, #72]	; (bb80 <chan_send+0xc8>)
    bb38:	4b12      	ldr	r3, [pc, #72]	; (bb84 <chan_send+0xcc>)
    bb3a:	4a13      	ldr	r2, [pc, #76]	; (bb88 <chan_send+0xd0>)
    bb3c:	428f      	cmp	r7, r1
    bb3e:	bf18      	it	ne
    bb40:	4613      	movne	r3, r2
			       &chan->chan.chan);
    bb42:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    bb44:	9600      	str	r6, [sp, #0]
    bb46:	4622      	mov	r2, r4
    bb48:	2104      	movs	r1, #4
    bb4a:	f01b ff8a 	bl	27a62 <bt_l2cap_send_cb>
	if (err) {
    bb4e:	4605      	mov	r5, r0
    bb50:	2800      	cmp	r0, #0
    bb52:	d0cf      	beq.n	baf4 <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
    bb54:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    bb56:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    bb5a:	fa10 f088 	uxtah	r0, r0, r8
    bb5e:	60a0      	str	r0, [r4, #8]
}
    bb60:	e7c8      	b.n	baf4 <chan_send+0x3c>
		return att_rsp_sent;
    bb62:	4b0a      	ldr	r3, [pc, #40]	; (bb8c <chan_send+0xd4>)
    bb64:	e7ed      	b.n	bb42 <chan_send+0x8a>
		return att_cfm_sent;
    bb66:	4b0a      	ldr	r3, [pc, #40]	; (bb90 <chan_send+0xd8>)
    bb68:	e7eb      	b.n	bb42 <chan_send+0x8a>
    bb6a:	bf00      	nop
    bb6c:	0002eaa8 	.word	0x0002eaa8
    bb70:	0002b5c4 	.word	0x0002b5c4
    bb74:	0002bce0 	.word	0x0002bce0
    bb78:	00027f75 	.word	0x00027f75
    bb7c:	00027f91 	.word	0x00027f91
    bb80:	00027c81 	.word	0x00027c81
    bb84:	0000b751 	.word	0x0000b751
    bb88:	00027b23 	.word	0x00027b23
    bb8c:	0000b741 	.word	0x0000b741
    bb90:	0000b731 	.word	0x0000b731

0000bb94 <read_type_cb>:
{
    bb94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    bb98:	f8d2 8000 	ldr.w	r8, [r2]
{
    bb9c:	4606      	mov	r6, r0
    bb9e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bba0:	6800      	ldr	r0, [r0, #0]
    bba2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    bba4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    bba8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    bbaa:	f01b f92f 	bl	26e0c <bt_uuid_cmp>
    bbae:	4607      	mov	r7, r0
    bbb0:	2800      	cmp	r0, #0
    bbb2:	d13e      	bne.n	bc32 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    bbb4:	4628      	mov	r0, r5
    bbb6:	2215      	movs	r2, #21
    bbb8:	4631      	mov	r1, r6
    bbba:	f01c ff92 	bl	28ae2 <bt_gatt_check_perm>
    bbbe:	4605      	mov	r5, r0
    bbc0:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    bbc2:	b148      	cbz	r0, bbd8 <read_type_cb+0x44>
		if (data->rsp->len) {
    bbc4:	68e3      	ldr	r3, [r4, #12]
    bbc6:	781b      	ldrb	r3, [r3, #0]
    bbc8:	b923      	cbnz	r3, bbd4 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    bbca:	2500      	movs	r5, #0
}
    bbcc:	4628      	mov	r0, r5
    bbce:	b003      	add	sp, #12
    bbd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    bbd4:	7527      	strb	r7, [r4, #20]
    bbd6:	e7f8      	b.n	bbca <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bbd8:	68a0      	ldr	r0, [r4, #8]
    bbda:	f01d fe88 	bl	298ee <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    bbde:	2102      	movs	r1, #2
    bbe0:	3008      	adds	r0, #8
    bbe2:	f01d feb2 	bl	2994a <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbe6:	4b14      	ldr	r3, [pc, #80]	; (bc38 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    bbe8:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbea:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    bbec:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    bbf0:	4631      	mov	r1, r6
    bbf2:	9300      	str	r3, [sp, #0]
    bbf4:	9401      	str	r4, [sp, #4]
    bbf6:	462b      	mov	r3, r5
    bbf8:	4640      	mov	r0, r8
    bbfa:	f01c f8d2 	bl	27da2 <att_chan_read>
	if (read < 0) {
    bbfe:	2800      	cmp	r0, #0
    bc00:	da07      	bge.n	bc12 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    bc02:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    bc06:	bf26      	itte	cs
    bc08:	4240      	negcs	r0, r0
    bc0a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    bc0c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    bc0e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    bc10:	e7dc      	b.n	bbcc <read_type_cb+0x38>
	if (!data->item) {
    bc12:	6923      	ldr	r3, [r4, #16]
    bc14:	2b00      	cmp	r3, #0
    bc16:	d0d8      	beq.n	bbca <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bc18:	68a0      	ldr	r0, [r4, #8]
    bc1a:	f01b ff7a 	bl	27b12 <net_buf_frags_len>
    bc1e:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bc22:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    bc24:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    bc26:	7818      	ldrb	r0, [r3, #0]
    bc28:	4285      	cmp	r5, r0
    bc2a:	bf94      	ite	ls
    bc2c:	2500      	movls	r5, #0
    bc2e:	2501      	movhi	r5, #1
    bc30:	e7cc      	b.n	bbcc <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    bc32:	2501      	movs	r5, #1
    bc34:	e7ca      	b.n	bbcc <read_type_cb+0x38>
    bc36:	bf00      	nop
    bc38:	00027b2f 	.word	0x00027b2f

0000bc3c <bt_att_connected>:
{
    bc3c:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bc3e:	4606      	mov	r6, r0
{
    bc40:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    bc42:	2104      	movs	r1, #4
    bc44:	f856 0908 	ldr.w	r0, [r6], #-8
    bc48:	f01b ff42 	bl	27ad0 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    bc4c:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    bc50:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    bc52:	b91b      	cbnz	r3, bc5c <bt_att_connected+0x20>
    bc54:	f105 000c 	add.w	r0, r5, #12
    bc58:	f01e fa9e 	bl	2a198 <z_impl_k_queue_init>
	parent->next = child;
    bc5c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    bc5e:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    bc62:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    bc64:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    bc68:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    bc6a:	b902      	cbnz	r2, bc6e <bt_att_connected+0x32>
	list->tail = node;
    bc6c:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc6e:	f3bf 8f5b 	dmb	ish
    bc72:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    bc76:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    bc7a:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bc7c:	bf58      	it	pl
    bc7e:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    bc80:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bc82:	bf5c      	itt	pl
    bc84:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    bc88:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    bc8c:	f01b ffa7 	bl	27bde <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    bc90:	f504 7084 	add.w	r0, r4, #264	; 0x108
    bc94:	4902      	ldr	r1, [pc, #8]	; (bca0 <bt_att_connected+0x64>)
}
    bc96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    bc9a:	f01e bb80 	b.w	2a39e <k_work_init_delayable>
    bc9e:	bf00      	nop
    bca0:	0000c745 	.word	0x0000c745

0000bca4 <bt_att_chan_create_pdu>:
{
    bca4:	b5b0      	push	{r4, r5, r7, lr}
    bca6:	b088      	sub	sp, #32
    bca8:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    bcaa:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    bcae:	1c53      	adds	r3, r2, #1
    bcb0:	428b      	cmp	r3, r1
{
    bcb2:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    bcb4:	d915      	bls.n	bce2 <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    bcb6:	466c      	mov	r4, sp
    bcb8:	b088      	sub	sp, #32
    bcba:	466a      	mov	r2, sp
    bcbc:	481d      	ldr	r0, [pc, #116]	; (bd34 <bt_att_chan_create_pdu+0x90>)
    bcbe:	6193      	str	r3, [r2, #24]
    bcc0:	2304      	movs	r3, #4
    bcc2:	e9c2 0104 	strd	r0, r1, [r2, #16]
    bcc6:	f842 3f0c 	str.w	r3, [r2, #12]!
    bcca:	481b      	ldr	r0, [pc, #108]	; (bd38 <bt_att_chan_create_pdu+0x94>)
    bccc:	60bb      	str	r3, [r7, #8]
    bcce:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    bcd2:	f01c f863 	bl	27d9c <z_log_msg2_static_create.constprop.0>
    bcd6:	46a5      	mov	sp, r4
		return NULL;
    bcd8:	2400      	movs	r4, #0
}
    bcda:	4620      	mov	r0, r4
    bcdc:	3720      	adds	r7, #32
    bcde:	46bd      	mov	sp, r7
    bce0:	bdb0      	pop	{r4, r5, r7, pc}
	switch (att_op_get_type(op)) {
    bce2:	4628      	mov	r0, r5
    bce4:	f01b ff35 	bl	27b52 <att_op_get_type>
    bce8:	2802      	cmp	r0, #2
    bcea:	d001      	beq.n	bcf0 <bt_att_chan_create_pdu+0x4c>
    bcec:	2804      	cmp	r0, #4
    bcee:	d116      	bne.n	bd1e <bt_att_chan_create_pdu+0x7a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    bcf0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    bcf4:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    bcf6:	2100      	movs	r1, #0
    bcf8:	4608      	mov	r0, r1
    bcfa:	f01b feaf 	bl	27a5c <bt_l2cap_create_pdu_timeout>
    bcfe:	4604      	mov	r4, r0
	if (!buf) {
    bd00:	b990      	cbnz	r0, bd28 <bt_att_chan_create_pdu+0x84>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    bd02:	4b0e      	ldr	r3, [pc, #56]	; (bd3c <bt_att_chan_create_pdu+0x98>)
    bd04:	480c      	ldr	r0, [pc, #48]	; (bd38 <bt_att_chan_create_pdu+0x94>)
    bd06:	e9c7 3506 	strd	r3, r5, [r7, #24]
    bd0a:	f107 0214 	add.w	r2, r7, #20
    bd0e:	2303      	movs	r3, #3
    bd10:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    bd14:	607b      	str	r3, [r7, #4]
    bd16:	617b      	str	r3, [r7, #20]
    bd18:	f01c f840 	bl	27d9c <z_log_msg2_static_create.constprop.0>
		return NULL;
    bd1c:	e7dd      	b.n	bcda <bt_att_chan_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    bd1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    bd22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bd26:	e7e6      	b.n	bcf6 <bt_att_chan_create_pdu+0x52>
    bd28:	2101      	movs	r1, #1
    bd2a:	3008      	adds	r0, #8
    bd2c:	f01d fe0d 	bl	2994a <net_buf_simple_add>
	hdr->code = op;
    bd30:	7005      	strb	r5, [r0, #0]
	return buf;
    bd32:	e7d2      	b.n	bcda <bt_att_chan_create_pdu+0x36>
    bd34:	0002eabb 	.word	0x0002eabb
    bd38:	0002b5c4 	.word	0x0002b5c4
    bd3c:	0002e85e 	.word	0x0002e85e

0000bd40 <att_indicate>:
{
    bd40:	b570      	push	{r4, r5, r6, lr}
    bd42:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    bd44:	f101 0008 	add.w	r0, r1, #8
    bd48:	460d      	mov	r5, r1
    bd4a:	f01d fe3f 	bl	299cc <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    bd4e:	6826      	ldr	r6, [r4, #0]
    bd50:	89ab      	ldrh	r3, [r5, #12]
    bd52:	68aa      	ldr	r2, [r5, #8]
    bd54:	4601      	mov	r1, r0
    bd56:	6830      	ldr	r0, [r6, #0]
    bd58:	f01c ffde 	bl	28d18 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    bd5c:	211e      	movs	r1, #30
    bd5e:	2200      	movs	r2, #0
    bd60:	4620      	mov	r0, r4
    bd62:	f7ff ff9f 	bl	bca4 <bt_att_chan_create_pdu>
	if (!buf) {
    bd66:	4601      	mov	r1, r0
    bd68:	b118      	cbz	r0, bd72 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    bd6a:	4a03      	ldr	r2, [pc, #12]	; (bd78 <att_indicate+0x38>)
    bd6c:	4620      	mov	r0, r4
    bd6e:	f01c f8d9 	bl	27f24 <bt_att_chan_send_rsp>
}
    bd72:	2000      	movs	r0, #0
    bd74:	bd70      	pop	{r4, r5, r6, pc}
    bd76:	bf00      	nop
    bd78:	00027f91 	.word	0x00027f91

0000bd7c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    bd7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd80:	4688      	mov	r8, r1
    bd82:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    bd84:	2101      	movs	r1, #1
    bd86:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    bd88:	4605      	mov	r5, r0
    bd8a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    bd8c:	f7ff ff8a 	bl	bca4 <bt_att_chan_create_pdu>
	if (!buf) {
    bd90:	4604      	mov	r4, r0
    bd92:	b178      	cbz	r0, bdb4 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    bd94:	2104      	movs	r1, #4
    bd96:	3008      	adds	r0, #8
    bd98:	f01d fdd7 	bl	2994a <net_buf_simple_add>
	rsp->request = req;
    bd9c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    bda0:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    bda2:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    bda6:	4621      	mov	r1, r4
    bda8:	4628      	mov	r0, r5
    bdaa:	4a03      	ldr	r2, [pc, #12]	; (bdb8 <send_err_rsp.part.0+0x3c>)
}
    bdac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    bdb0:	f01c b8b8 	b.w	27f24 <bt_att_chan_send_rsp>
}
    bdb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdb8:	00027f75 	.word	0x00027f75

0000bdbc <bt_att_recv>:
{
    bdbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bdc0:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    bdc2:	898b      	ldrh	r3, [r1, #12]
{
    bdc4:	af00      	add	r7, sp, #0
    bdc6:	4604      	mov	r4, r0
    bdc8:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
    bdca:	b983      	cbnz	r3, bdee <bt_att_recv+0x32>
		BT_ERR("Too small ATT PDU received");
    bdcc:	4b54      	ldr	r3, [pc, #336]	; (bf20 <bt_att_recv+0x164>)
    bdce:	61bb      	str	r3, [r7, #24]
    bdd0:	2302      	movs	r3, #2
    bdd2:	607b      	str	r3, [r7, #4]
    bdd4:	617b      	str	r3, [r7, #20]
    bdd6:	f107 0214 	add.w	r2, r7, #20
    bdda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
    bdde:	4851      	ldr	r0, [pc, #324]	; (bf24 <bt_att_recv+0x168>)
    bde0:	f01b ffdc 	bl	27d9c <z_log_msg2_static_create.constprop.0>
}
    bde4:	2000      	movs	r0, #0
    bde6:	3724      	adds	r7, #36	; 0x24
    bde8:	46bd      	mov	sp, r7
    bdea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    bdee:	2101      	movs	r1, #1
    bdf0:	f109 0008 	add.w	r0, r9, #8
    bdf4:	f01d fdda 	bl	299ac <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    bdf8:	f854 3c08 	ldr.w	r3, [r4, #-8]
    bdfc:	4605      	mov	r5, r0
    bdfe:	2b00      	cmp	r3, #0
    be00:	d0f0      	beq.n	bde4 <bt_att_recv+0x28>
		if (hdr->code == handlers[i].op) {
    be02:	7801      	ldrb	r1, [r0, #0]
    be04:	4a48      	ldr	r2, [pc, #288]	; (bf28 <bt_att_recv+0x16c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    be06:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    be0a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    be0c:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    be10:	4288      	cmp	r0, r1
    be12:	d121      	bne.n	be58 <bt_att_recv+0x9c>
		if (handler->type == ATT_REQUEST &&
    be14:	00d9      	lsls	r1, r3, #3
    be16:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    be1a:	f893 8002 	ldrb.w	r8, [r3, #2]
    be1e:	f1b8 0f01 	cmp.w	r8, #1
    be22:	d139      	bne.n	be98 <bt_att_recv+0xdc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be24:	f3bf 8f5b 	dmb	ish
    be28:	34e8      	adds	r4, #232	; 0xe8
    be2a:	e854 3f00 	ldrex	r3, [r4]
    be2e:	f043 0001 	orr.w	r0, r3, #1
    be32:	e844 0c00 	strex	ip, r0, [r4]
    be36:	f1bc 0f00 	cmp.w	ip, #0
    be3a:	d1f6      	bne.n	be2a <bt_att_recv+0x6e>
    be3c:	f3bf 8f5b 	dmb	ish
    be40:	07d8      	lsls	r0, r3, #31
    be42:	d53e      	bpl.n	bec2 <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected request");
    be44:	4b39      	ldr	r3, [pc, #228]	; (bf2c <bt_att_recv+0x170>)
			BT_WARN("Ignoring unexpected indication");
    be46:	61bb      	str	r3, [r7, #24]
    be48:	2302      	movs	r3, #2
    be4a:	607b      	str	r3, [r7, #4]
    be4c:	617b      	str	r3, [r7, #20]
    be4e:	f107 0214 	add.w	r2, r7, #20
    be52:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    be56:	e7c2      	b.n	bdde <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    be58:	3301      	adds	r3, #1
    be5a:	2b1c      	cmp	r3, #28
    be5c:	d1d6      	bne.n	be0c <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    be5e:	4b34      	ldr	r3, [pc, #208]	; (bf30 <bt_att_recv+0x174>)
    be60:	4830      	ldr	r0, [pc, #192]	; (bf24 <bt_att_recv+0x168>)
    be62:	e9c7 3106 	strd	r3, r1, [r7, #24]
    be66:	f107 0214 	add.w	r2, r7, #20
    be6a:	2303      	movs	r3, #3
    be6c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    be70:	607b      	str	r3, [r7, #4]
    be72:	617b      	str	r3, [r7, #20]
    be74:	f01b ff92 	bl	27d9c <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    be78:	7829      	ldrb	r1, [r5, #0]
    be7a:	4608      	mov	r0, r1
    be7c:	f01b fe69 	bl	27b52 <att_op_get_type>
    be80:	2800      	cmp	r0, #0
    be82:	d0af      	beq.n	bde4 <bt_att_recv+0x28>
    be84:	2805      	cmp	r0, #5
    be86:	d0ad      	beq.n	bde4 <bt_att_recv+0x28>
	if (!req) {
    be88:	2900      	cmp	r1, #0
    be8a:	d0ab      	beq.n	bde4 <bt_att_recv+0x28>
    be8c:	2306      	movs	r3, #6
    be8e:	2200      	movs	r2, #0
    be90:	4630      	mov	r0, r6
    be92:	f7ff ff73 	bl	bd7c <send_err_rsp.part.0>
    be96:	e7a5      	b.n	bde4 <bt_att_recv+0x28>
		} else if (handler->type == ATT_INDICATION &&
    be98:	f1b8 0f05 	cmp.w	r8, #5
    be9c:	d111      	bne.n	bec2 <bt_att_recv+0x106>
    be9e:	f3bf 8f5b 	dmb	ish
    bea2:	34e8      	adds	r4, #232	; 0xe8
    bea4:	e854 3f00 	ldrex	r3, [r4]
    bea8:	f043 0002 	orr.w	r0, r3, #2
    beac:	e844 0c00 	strex	ip, r0, [r4]
    beb0:	f1bc 0f00 	cmp.w	ip, #0
    beb4:	d1f6      	bne.n	bea4 <bt_att_recv+0xe8>
    beb6:	f3bf 8f5b 	dmb	ish
    beba:	079b      	lsls	r3, r3, #30
    bebc:	d501      	bpl.n	bec2 <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected indication");
    bebe:	4b1d      	ldr	r3, [pc, #116]	; (bf34 <bt_att_recv+0x178>)
    bec0:	e7c1      	b.n	be46 <bt_att_recv+0x8a>
	if (buf->len < handler->expect_len) {
    bec2:	440a      	add	r2, r1
    bec4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    bec8:	7851      	ldrb	r1, [r2, #1]
    beca:	4299      	cmp	r1, r3
    becc:	d917      	bls.n	befe <bt_att_recv+0x142>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    bece:	46e9      	mov	r9, sp
    bed0:	b088      	sub	sp, #32
    bed2:	466a      	mov	r2, sp
    bed4:	4818      	ldr	r0, [pc, #96]	; (bf38 <bt_att_recv+0x17c>)
    bed6:	7829      	ldrb	r1, [r5, #0]
    bed8:	6191      	str	r1, [r2, #24]
    beda:	2404      	movs	r4, #4
    bedc:	e9c2 0304 	strd	r0, r3, [r2, #16]
    bee0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    bee4:	f842 4f0c 	str.w	r4, [r2, #12]!
    bee8:	480e      	ldr	r0, [pc, #56]	; (bf24 <bt_att_recv+0x168>)
    beea:	60bc      	str	r4, [r7, #8]
    beec:	f01b ff56 	bl	27d9c <z_log_msg2_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
    bef0:	f1b8 0f01 	cmp.w	r8, #1
    bef4:	46cd      	mov	sp, r9
    bef6:	f47f af75 	bne.w	bde4 <bt_att_recv+0x28>
		err = BT_ATT_ERR_INVALID_PDU;
    befa:	4623      	mov	r3, r4
    befc:	e00b      	b.n	bf16 <bt_att_recv+0x15a>
		err = handler->func(att_chan, buf);
    befe:	6853      	ldr	r3, [r2, #4]
    bf00:	4649      	mov	r1, r9
    bf02:	4630      	mov	r0, r6
    bf04:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    bf06:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    bf0a:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    bf0c:	f47f af6a 	bne.w	bde4 <bt_att_recv+0x28>
    bf10:	2800      	cmp	r0, #0
    bf12:	f43f af67 	beq.w	bde4 <bt_att_recv+0x28>
		send_err_rsp(att_chan, hdr->code, 0, err);
    bf16:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    bf18:	2900      	cmp	r1, #0
    bf1a:	f43f af63 	beq.w	bde4 <bt_att_recv+0x28>
    bf1e:	e7b6      	b.n	be8e <bt_att_recv+0xd2>
    bf20:	0002eae0 	.word	0x0002eae0
    bf24:	0002b5c4 	.word	0x0002b5c4
    bf28:	0002bcf4 	.word	0x0002bcf4
    bf2c:	0002eafb 	.word	0x0002eafb
    bf30:	0002eb55 	.word	0x0002eb55
    bf34:	0002eb17 	.word	0x0002eb17
    bf38:	0002eb36 	.word	0x0002eb36

0000bf3c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    bf3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bf40:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bf42:	6803      	ldr	r3, [r0, #0]
    bf44:	460e      	mov	r6, r1
    bf46:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    bf48:	b087      	sub	sp, #28
    bf4a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bf4c:	bf18      	it	ne
    bf4e:	2101      	movne	r1, #1
    bf50:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    bf52:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    bf54:	f01c ff0c 	bl	28d70 <bt_gatt_change_aware>
    bf58:	2800      	cmp	r0, #0
    bf5a:	d04b      	beq.n	bff4 <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    bf5c:	2f00      	cmp	r7, #0
    bf5e:	d04b      	beq.n	bff8 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    bf60:	2218      	movs	r2, #24
    bf62:	2100      	movs	r1, #0
    bf64:	4668      	mov	r0, sp
    bf66:	f01e fd99 	bl	2aa9c <memset>
	if (rsp) {
    bf6a:	f1b8 0f00 	cmp.w	r8, #0
    bf6e:	d122      	bne.n	bfb6 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    bf70:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bf72:	4a22      	ldr	r2, [pc, #136]	; (bffc <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    bf74:	681b      	ldr	r3, [r3, #0]
    bf76:	9300      	str	r3, [sp, #0]
	data.value = value;
    bf78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    bf7a:	9303      	str	r3, [sp, #12]
	data.len = len;
    bf7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    bf80:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    bf84:	2301      	movs	r3, #1
    bf86:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    bf8a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bf8e:	466b      	mov	r3, sp
    bf90:	4639      	mov	r1, r7
    bf92:	4638      	mov	r0, r7
	data.req = req;
    bf94:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    bf98:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    bf9c:	f01b fe55 	bl	27c4a <bt_gatt_foreach_attr>
	if (data.err) {
    bfa0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    bfa4:	b1f4      	cbz	r4, bfe4 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    bfa6:	f1b8 0f00 	cmp.w	r8, #0
    bfaa:	d10e      	bne.n	bfca <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    bfac:	2400      	movs	r4, #0
}
    bfae:	4620      	mov	r0, r4
    bfb0:	b007      	add	sp, #28
    bfb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    bfb6:	2200      	movs	r2, #0
    bfb8:	4641      	mov	r1, r8
    bfba:	4628      	mov	r0, r5
    bfbc:	f7ff fe72 	bl	bca4 <bt_att_chan_create_pdu>
    bfc0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    bfc2:	2800      	cmp	r0, #0
    bfc4:	d1d4      	bne.n	bf70 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    bfc6:	240e      	movs	r4, #14
    bfc8:	e7f1      	b.n	bfae <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    bfca:	9801      	ldr	r0, [sp, #4]
    bfcc:	f013 fecc 	bl	1fd68 <net_buf_unref>
	if (!req) {
    bfd0:	2e00      	cmp	r6, #0
    bfd2:	d0eb      	beq.n	bfac <att_write_rsp.constprop.0+0x70>
    bfd4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    bfd8:	463a      	mov	r2, r7
    bfda:	4631      	mov	r1, r6
    bfdc:	4628      	mov	r0, r5
    bfde:	f7ff fecd 	bl	bd7c <send_err_rsp.part.0>
    bfe2:	e7e3      	b.n	bfac <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    bfe4:	9901      	ldr	r1, [sp, #4]
    bfe6:	2900      	cmp	r1, #0
    bfe8:	d0e0      	beq.n	bfac <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    bfea:	4a05      	ldr	r2, [pc, #20]	; (c000 <att_write_rsp.constprop.0+0xc4>)
    bfec:	4628      	mov	r0, r5
    bfee:	f01b ff99 	bl	27f24 <bt_att_chan_send_rsp>
    bff2:	e7dc      	b.n	bfae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    bff4:	2412      	movs	r4, #18
    bff6:	e7da      	b.n	bfae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    bff8:	2401      	movs	r4, #1
    bffa:	e7d8      	b.n	bfae <att_write_rsp.constprop.0+0x72>
    bffc:	00027c97 	.word	0x00027c97
    c000:	00027f75 	.word	0x00027f75

0000c004 <bt_att_create_pdu>:
{
    c004:	b570      	push	{r4, r5, r6, lr}
    c006:	b088      	sub	sp, #32
    c008:	460e      	mov	r6, r1
    c00a:	4615      	mov	r5, r2
	att = att_get(conn);
    c00c:	f7ff fc64 	bl	b8d8 <att_get>
	if (!att) {
    c010:	b1c8      	cbz	r0, c046 <bt_att_create_pdu+0x42>
	return list->head;
    c012:	6a43      	ldr	r3, [r0, #36]	; 0x24
    c014:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c016:	b153      	cbz	r3, c02e <bt_att_create_pdu+0x2a>
    c018:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
    c01c:	681b      	ldr	r3, [r3, #0]
    c01e:	b10b      	cbz	r3, c024 <bt_att_create_pdu+0x20>
    c020:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c024:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    c028:	428a      	cmp	r2, r1
    c02a:	d90f      	bls.n	c04c <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c02c:	b9ab      	cbnz	r3, c05a <bt_att_create_pdu+0x56>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c02e:	4b0f      	ldr	r3, [pc, #60]	; (c06c <bt_att_create_pdu+0x68>)
    c030:	480f      	ldr	r0, [pc, #60]	; (c070 <bt_att_create_pdu+0x6c>)
    c032:	e9cd 3206 	strd	r3, r2, [sp, #24]
    c036:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c03a:	2303      	movs	r3, #3
    c03c:	aa05      	add	r2, sp, #20
    c03e:	9301      	str	r3, [sp, #4]
    c040:	9305      	str	r3, [sp, #20]
    c042:	f01b feab 	bl	27d9c <z_log_msg2_static_create.constprop.0>
}
    c046:	2000      	movs	r0, #0
    c048:	b008      	add	sp, #32
    c04a:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c04c:	462a      	mov	r2, r5
    c04e:	4631      	mov	r1, r6
}
    c050:	b008      	add	sp, #32
    c052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c056:	f7ff be25 	b.w	bca4 <bt_att_chan_create_pdu>
    c05a:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c05e:	b10c      	cbz	r4, c064 <bt_att_create_pdu+0x60>
    c060:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    c064:	4618      	mov	r0, r3
    c066:	4623      	mov	r3, r4
    c068:	e7dc      	b.n	c024 <bt_att_create_pdu+0x20>
    c06a:	bf00      	nop
    c06c:	0002eb6f 	.word	0x0002eb6f
    c070:	0002b5c4 	.word	0x0002b5c4

0000c074 <att_read_group_req>:
{
    c074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c078:	898c      	ldrh	r4, [r1, #12]
    c07a:	3c04      	subs	r4, #4
    c07c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c07e:	2c02      	cmp	r4, #2
{
    c080:	4605      	mov	r5, r0
    c082:	b08c      	sub	sp, #48	; 0x30
    c084:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c086:	d001      	beq.n	c08c <att_read_group_req+0x18>
    c088:	2c10      	cmp	r4, #16
    c08a:	d16f      	bne.n	c16c <att_read_group_req+0xf8>
    c08c:	2104      	movs	r1, #4
    c08e:	3008      	adds	r0, #8
    c090:	f01d fc8c 	bl	299ac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c094:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c098:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c09a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c09c:	1d01      	adds	r1, r0, #4
    c09e:	4622      	mov	r2, r4
    c0a0:	4640      	mov	r0, r8
    c0a2:	f01a fee1 	bl	26e68 <bt_uuid_create>
    c0a6:	2800      	cmp	r0, #0
    c0a8:	d062      	beq.n	c170 <att_read_group_req+0xfc>
	if (!start || !end) {
    c0aa:	2e00      	cmp	r6, #0
    c0ac:	d03a      	beq.n	c124 <att_read_group_req+0xb0>
    c0ae:	2400      	movs	r4, #0
    c0b0:	2f00      	cmp	r7, #0
    c0b2:	d036      	beq.n	c122 <att_read_group_req+0xae>
	if (start > end) {
    c0b4:	42b7      	cmp	r7, r6
    c0b6:	d335      	bcc.n	c124 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c0b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c0bc:	a901      	add	r1, sp, #4
    c0be:	4640      	mov	r0, r8
    c0c0:	f88d 4004 	strb.w	r4, [sp, #4]
    c0c4:	f8ad 3006 	strh.w	r3, [sp, #6]
    c0c8:	f01a fea0 	bl	26e0c <bt_uuid_cmp>
    c0cc:	2800      	cmp	r0, #0
    c0ce:	d134      	bne.n	c13a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    c0d0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c0d2:	2214      	movs	r2, #20
    c0d4:	2100      	movs	r1, #0
    c0d6:	a807      	add	r0, sp, #28
    c0d8:	f01e fce0 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c0dc:	2201      	movs	r2, #1
    c0de:	2111      	movs	r1, #17
    c0e0:	4620      	mov	r0, r4
    c0e2:	f7ff ff8f 	bl	c004 <bt_att_create_pdu>
    c0e6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c0e8:	2800      	cmp	r0, #0
    c0ea:	d041      	beq.n	c170 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    c0ec:	2101      	movs	r1, #1
    c0ee:	3008      	adds	r0, #8
	data.uuid = uuid;
    c0f0:	e9cd 5807 	strd	r5, r8, [sp, #28]
    c0f4:	f01d fc29 	bl	2994a <net_buf_simple_add>
	data.rsp->len = 0U;
    c0f8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c0fc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c0fe:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    c100:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c104:	4a1b      	ldr	r2, [pc, #108]	; (c174 <att_read_group_req+0x100>)
	data.group = NULL;
    c106:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    c10a:	4639      	mov	r1, r7
    c10c:	4630      	mov	r0, r6
    c10e:	f01b fd9c 	bl	27c4a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    c112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c114:	781c      	ldrb	r4, [r3, #0]
    c116:	bb1c      	cbnz	r4, c160 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    c118:	9809      	ldr	r0, [sp, #36]	; 0x24
    c11a:	f013 fe25 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c11e:	230a      	movs	r3, #10
    c120:	e018      	b.n	c154 <att_read_group_req+0xe0>
			*err = 0U;
    c122:	463e      	mov	r6, r7
	if (!req) {
    c124:	2301      	movs	r3, #1
    c126:	4632      	mov	r2, r6
    c128:	2110      	movs	r1, #16
    c12a:	4628      	mov	r0, r5
    c12c:	f7ff fe26 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c130:	2400      	movs	r4, #0
}
    c132:	4620      	mov	r0, r4
    c134:	b00c      	add	sp, #48	; 0x30
    c136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    c13a:	f642 0301 	movw	r3, #10241	; 0x2801
    c13e:	a907      	add	r1, sp, #28
    c140:	4640      	mov	r0, r8
    c142:	f88d 401c 	strb.w	r4, [sp, #28]
    c146:	f8ad 301e 	strh.w	r3, [sp, #30]
    c14a:	f01a fe5f 	bl	26e0c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c14e:	2800      	cmp	r0, #0
    c150:	d0be      	beq.n	c0d0 <att_read_group_req+0x5c>
	if (!req) {
    c152:	2310      	movs	r3, #16
    c154:	4632      	mov	r2, r6
    c156:	2110      	movs	r1, #16
    c158:	4628      	mov	r0, r5
    c15a:	f7ff fe0f 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c15e:	e7e8      	b.n	c132 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c160:	4a05      	ldr	r2, [pc, #20]	; (c178 <att_read_group_req+0x104>)
    c162:	9909      	ldr	r1, [sp, #36]	; 0x24
    c164:	4628      	mov	r0, r5
    c166:	f01b fedd 	bl	27f24 <bt_att_chan_send_rsp>
	return 0;
    c16a:	e7e1      	b.n	c130 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    c16c:	2404      	movs	r4, #4
    c16e:	e7e0      	b.n	c132 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    c170:	240e      	movs	r4, #14
    c172:	e7de      	b.n	c132 <att_read_group_req+0xbe>
    c174:	0000ba0d 	.word	0x0000ba0d
    c178:	00027f75 	.word	0x00027f75

0000c17c <att_read_mult_req>:
{
    c17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c180:	6886      	ldr	r6, [r0, #8]
{
    c182:	b085      	sub	sp, #20
    c184:	4604      	mov	r4, r0
    c186:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c188:	4630      	mov	r0, r6
    c18a:	2101      	movs	r1, #1
    c18c:	f01c fdf0 	bl	28d70 <bt_gatt_change_aware>
    c190:	2800      	cmp	r0, #0
    c192:	d038      	beq.n	c206 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
    c194:	2210      	movs	r2, #16
    c196:	2100      	movs	r1, #0
    c198:	4668      	mov	r0, sp
    c19a:	f01e fc7f 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    c19e:	2200      	movs	r2, #0
    c1a0:	210f      	movs	r1, #15
    c1a2:	4630      	mov	r0, r6
    c1a4:	f7ff ff2e 	bl	c004 <bt_att_create_pdu>
    c1a8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c1aa:	b370      	cbz	r0, c20a <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c1ac:	f8df 9060 	ldr.w	r9, [pc, #96]	; c210 <att_read_mult_req+0x94>
	data.chan = chan;
    c1b0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    c1b2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c1b6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    c1ba:	89ab      	ldrh	r3, [r5, #12]
    c1bc:	2b01      	cmp	r3, #1
    c1be:	d805      	bhi.n	c1cc <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c1c0:	4a14      	ldr	r2, [pc, #80]	; (c214 <att_read_mult_req+0x98>)
    c1c2:	9902      	ldr	r1, [sp, #8]
    c1c4:	4620      	mov	r0, r4
    c1c6:	f01b fead 	bl	27f24 <bt_att_chan_send_rsp>
    c1ca:	e018      	b.n	c1fe <att_read_mult_req+0x82>
    c1cc:	4638      	mov	r0, r7
    c1ce:	f01d fbfd 	bl	299cc <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c1d2:	466b      	mov	r3, sp
    c1d4:	464a      	mov	r2, r9
    c1d6:	4601      	mov	r1, r0
    c1d8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    c1da:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c1de:	f01b fd34 	bl	27c4a <bt_gatt_foreach_attr>
		if (data.err) {
    c1e2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c1e6:	2b00      	cmp	r3, #0
    c1e8:	d0e7      	beq.n	c1ba <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
    c1ea:	9802      	ldr	r0, [sp, #8]
    c1ec:	f013 fdbc 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c1f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c1f4:	4632      	mov	r2, r6
    c1f6:	210e      	movs	r1, #14
    c1f8:	4620      	mov	r0, r4
    c1fa:	f7ff fdbf 	bl	bd7c <send_err_rsp.part.0>
	return 0;
    c1fe:	2000      	movs	r0, #0
}
    c200:	b005      	add	sp, #20
    c202:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c206:	2012      	movs	r0, #18
    c208:	e7fa      	b.n	c200 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
    c20a:	200e      	movs	r0, #14
    c20c:	e7f8      	b.n	c200 <att_read_mult_req+0x84>
    c20e:	bf00      	nop
    c210:	00027fad 	.word	0x00027fad
    c214:	00027f75 	.word	0x00027f75

0000c218 <att_read_rsp>:
{
    c218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    c21c:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    c220:	4605      	mov	r5, r0
    c222:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    c224:	4640      	mov	r0, r8
    c226:	2101      	movs	r1, #1
{
    c228:	4614      	mov	r4, r2
    c22a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    c22c:	f01c fda0 	bl	28d70 <bt_gatt_change_aware>
    c230:	b390      	cbz	r0, c298 <att_read_rsp+0x80>
	if (!handle) {
    c232:	b39e      	cbz	r6, c29c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    c234:	2210      	movs	r2, #16
    c236:	2100      	movs	r1, #0
    c238:	4668      	mov	r0, sp
    c23a:	f01e fc2f 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    c23e:	2200      	movs	r2, #0
    c240:	4621      	mov	r1, r4
    c242:	4640      	mov	r0, r8
    c244:	f7ff fede 	bl	c004 <bt_att_create_pdu>
    c248:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c24a:	b348      	cbz	r0, c2a0 <att_read_rsp+0x88>
	data.offset = offset;
    c24c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    c250:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c254:	2301      	movs	r3, #1
    c256:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c25a:	4a12      	ldr	r2, [pc, #72]	; (c2a4 <att_read_rsp+0x8c>)
	data.chan = chan;
    c25c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    c25e:	466b      	mov	r3, sp
    c260:	4631      	mov	r1, r6
    c262:	4630      	mov	r0, r6
    c264:	f01b fcf1 	bl	27c4a <bt_gatt_foreach_attr>
	if (data.err) {
    c268:	f89d 400c 	ldrb.w	r4, [sp, #12]
    c26c:	b174      	cbz	r4, c28c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    c26e:	9802      	ldr	r0, [sp, #8]
    c270:	f013 fd7a 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c274:	f89d 300c 	ldrb.w	r3, [sp, #12]
    c278:	4632      	mov	r2, r6
    c27a:	4639      	mov	r1, r7
    c27c:	4628      	mov	r0, r5
    c27e:	f7ff fd7d 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c282:	2400      	movs	r4, #0
}
    c284:	4620      	mov	r0, r4
    c286:	b004      	add	sp, #16
    c288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c28c:	4a06      	ldr	r2, [pc, #24]	; (c2a8 <att_read_rsp+0x90>)
    c28e:	9902      	ldr	r1, [sp, #8]
    c290:	4628      	mov	r0, r5
    c292:	f01b fe47 	bl	27f24 <bt_att_chan_send_rsp>
	return 0;
    c296:	e7f5      	b.n	c284 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c298:	2412      	movs	r4, #18
    c29a:	e7f3      	b.n	c284 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c29c:	2401      	movs	r4, #1
    c29e:	e7f1      	b.n	c284 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c2a0:	240e      	movs	r4, #14
    c2a2:	e7ef      	b.n	c284 <att_read_rsp+0x6c>
    c2a4:	00027fad 	.word	0x00027fad
    c2a8:	00027f75 	.word	0x00027f75

0000c2ac <att_read_type_req>:
{
    c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c2b0:	898c      	ldrh	r4, [r1, #12]
    c2b2:	3c04      	subs	r4, #4
    c2b4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c2b6:	2c02      	cmp	r4, #2
{
    c2b8:	4605      	mov	r5, r0
    c2ba:	b08c      	sub	sp, #48	; 0x30
    c2bc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c2be:	d001      	beq.n	c2c4 <att_read_type_req+0x18>
    c2c0:	2c10      	cmp	r4, #16
    c2c2:	d150      	bne.n	c366 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    c2c4:	2104      	movs	r1, #4
    c2c6:	3008      	adds	r0, #8
    c2c8:	f01d fb70 	bl	299ac <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c2cc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    c2d0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c2d2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c2d4:	1d01      	adds	r1, r0, #4
    c2d6:	4622      	mov	r2, r4
    c2d8:	4640      	mov	r0, r8
    c2da:	f01a fdc5 	bl	26e68 <bt_uuid_create>
    c2de:	b188      	cbz	r0, c304 <att_read_type_req+0x58>
	if (!start || !end) {
    c2e0:	b19e      	cbz	r6, c30a <att_read_type_req+0x5e>
    c2e2:	b18f      	cbz	r7, c308 <att_read_type_req+0x5c>
	if (start > end) {
    c2e4:	42be      	cmp	r6, r7
    c2e6:	d810      	bhi.n	c30a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    c2e8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    c2ea:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c2ec:	2100      	movs	r1, #0
    c2ee:	eb0d 0002 	add.w	r0, sp, r2
    c2f2:	f01e fbd3 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    c2f6:	2201      	movs	r2, #1
    c2f8:	2109      	movs	r1, #9
    c2fa:	4620      	mov	r0, r4
    c2fc:	f7ff fe82 	bl	c004 <bt_att_create_pdu>
    c300:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    c302:	b968      	cbnz	r0, c320 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    c304:	240e      	movs	r4, #14
    c306:	e007      	b.n	c318 <att_read_type_req+0x6c>
			*err = 0U;
    c308:	463e      	mov	r6, r7
	if (!req) {
    c30a:	2301      	movs	r3, #1
    c30c:	4632      	mov	r2, r6
    c30e:	2108      	movs	r1, #8
    c310:	4628      	mov	r0, r5
    c312:	f7ff fd33 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c316:	2400      	movs	r4, #0
}
    c318:	4620      	mov	r0, r4
    c31a:	b00c      	add	sp, #48	; 0x30
    c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    c320:	2101      	movs	r1, #1
    c322:	3008      	adds	r0, #8
	data.uuid = uuid;
    c324:	e9cd 5806 	strd	r5, r8, [sp, #24]
    c328:	f01d fb0f 	bl	2994a <net_buf_simple_add>
	data.rsp->len = 0U;
    c32c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c330:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    c332:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c334:	4a0d      	ldr	r2, [pc, #52]	; (c36c <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    c336:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c33a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c33c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    c340:	4630      	mov	r0, r6
    c342:	ab06      	add	r3, sp, #24
    c344:	f01b fc81 	bl	27c4a <bt_gatt_foreach_attr>
	if (data.err) {
    c348:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    c34c:	b12c      	cbz	r4, c35a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    c34e:	9808      	ldr	r0, [sp, #32]
    c350:	f013 fd0a 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c354:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c358:	e7d8      	b.n	c30c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c35a:	4a05      	ldr	r2, [pc, #20]	; (c370 <att_read_type_req+0xc4>)
    c35c:	9908      	ldr	r1, [sp, #32]
    c35e:	4628      	mov	r0, r5
    c360:	f01b fde0 	bl	27f24 <bt_att_chan_send_rsp>
	return 0;
    c364:	e7d8      	b.n	c318 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    c366:	2404      	movs	r4, #4
    c368:	e7d6      	b.n	c318 <att_read_type_req+0x6c>
    c36a:	bf00      	nop
    c36c:	0000bb95 	.word	0x0000bb95
    c370:	00027f75 	.word	0x00027f75

0000c374 <att_find_type_req>:
{
    c374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c378:	4688      	mov	r8, r1
    c37a:	b086      	sub	sp, #24
    c37c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c37e:	2106      	movs	r1, #6
    c380:	f108 0008 	add.w	r0, r8, #8
    c384:	f01d fb12 	bl	299ac <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    c388:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    c38a:	b317      	cbz	r7, c3d2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c38c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    c390:	f1b9 0f00 	cmp.w	r9, #0
    c394:	d01c      	beq.n	c3d0 <att_find_type_req+0x5c>
	if (start > end) {
    c396:	45b9      	cmp	r9, r7
    c398:	d31b      	bcc.n	c3d2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    c39a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c39c:	f8ad 3002 	strh.w	r3, [sp, #2]
    c3a0:	2400      	movs	r4, #0
    c3a2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c3a6:	a901      	add	r1, sp, #4
    c3a8:	4668      	mov	r0, sp
	value = buf->data;
    c3aa:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    c3ae:	f88d 4000 	strb.w	r4, [sp]
    c3b2:	f88d 4004 	strb.w	r4, [sp, #4]
    c3b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    c3ba:	f01a fd27 	bl	26e0c <bt_uuid_cmp>
    c3be:	4606      	mov	r6, r0
    c3c0:	b190      	cbz	r0, c3e8 <att_find_type_req+0x74>
	if (!req) {
    c3c2:	230a      	movs	r3, #10
    c3c4:	463a      	mov	r2, r7
    c3c6:	2106      	movs	r1, #6
    c3c8:	4628      	mov	r0, r5
    c3ca:	f7ff fcd7 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c3ce:	e007      	b.n	c3e0 <att_find_type_req+0x6c>
			*err = 0U;
    c3d0:	464f      	mov	r7, r9
	if (!req) {
    c3d2:	2301      	movs	r3, #1
    c3d4:	463a      	mov	r2, r7
    c3d6:	2106      	movs	r1, #6
    c3d8:	4628      	mov	r0, r5
    c3da:	f7ff fccf 	bl	bd7c <send_err_rsp.part.0>
		return 0;
    c3de:	2400      	movs	r4, #0
}
    c3e0:	4620      	mov	r0, r4
    c3e2:	b006      	add	sp, #24
    c3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c3e8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    c3ec:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c3f0:	4601      	mov	r1, r0
    c3f2:	2214      	movs	r2, #20
    c3f4:	a801      	add	r0, sp, #4
    c3f6:	f01e fb51 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    c3fa:	4632      	mov	r2, r6
    c3fc:	2107      	movs	r1, #7
    c3fe:	4640      	mov	r0, r8
    c400:	f7ff fe00 	bl	c004 <bt_att_create_pdu>
    c404:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c406:	b1e0      	cbz	r0, c442 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    c408:	230a      	movs	r3, #10
    c40a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c40e:	4a0e      	ldr	r2, [pc, #56]	; (c448 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    c410:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c414:	ab01      	add	r3, sp, #4
    c416:	4649      	mov	r1, r9
    c418:	4638      	mov	r0, r7
	data.value = value;
    c41a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    c41e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    c420:	f01b fc13 	bl	27c4a <bt_gatt_foreach_attr>
	if (data.err) {
    c424:	f89d 4015 	ldrb.w	r4, [sp, #21]
    c428:	b12c      	cbz	r4, c436 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    c42a:	9802      	ldr	r0, [sp, #8]
    c42c:	f013 fc9c 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c430:	f89d 3015 	ldrb.w	r3, [sp, #21]
    c434:	e7ce      	b.n	c3d4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c436:	4a05      	ldr	r2, [pc, #20]	; (c44c <att_find_type_req+0xd8>)
    c438:	9902      	ldr	r1, [sp, #8]
    c43a:	4628      	mov	r0, r5
    c43c:	f01b fd72 	bl	27f24 <bt_att_chan_send_rsp>
	return 0;
    c440:	e7ce      	b.n	c3e0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    c442:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    c444:	e7cc      	b.n	c3e0 <att_find_type_req+0x6c>
    c446:	bf00      	nop
    c448:	0000b779 	.word	0x0000b779
    c44c:	00027f75 	.word	0x00027f75

0000c450 <att_find_info_req>:
{
    c450:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    c452:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    c454:	881e      	ldrh	r6, [r3, #0]
{
    c456:	b085      	sub	sp, #20
    c458:	4605      	mov	r5, r0
	if (!start || !end) {
    c45a:	b19e      	cbz	r6, c484 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    c45c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    c45e:	b184      	cbz	r4, c482 <att_find_info_req+0x32>
	if (start > end) {
    c460:	42a6      	cmp	r6, r4
    c462:	d80f      	bhi.n	c484 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    c464:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    c466:	2210      	movs	r2, #16
    c468:	2100      	movs	r1, #0
    c46a:	4668      	mov	r0, sp
    c46c:	f01e fb16 	bl	2aa9c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    c470:	2200      	movs	r2, #0
    c472:	2105      	movs	r1, #5
    c474:	4638      	mov	r0, r7
    c476:	f7ff fdc5 	bl	c004 <bt_att_create_pdu>
    c47a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    c47c:	b958      	cbnz	r0, c496 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    c47e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    c480:	e007      	b.n	c492 <att_find_info_req+0x42>
			*err = 0U;
    c482:	4626      	mov	r6, r4
	if (!req) {
    c484:	2301      	movs	r3, #1
    c486:	4632      	mov	r2, r6
    c488:	2104      	movs	r1, #4
    c48a:	4628      	mov	r0, r5
    c48c:	f7ff fc76 	bl	bd7c <send_err_rsp.part.0>
	return 0;
    c490:	2000      	movs	r0, #0
}
    c492:	b005      	add	sp, #20
    c494:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c496:	4621      	mov	r1, r4
    c498:	4a09      	ldr	r2, [pc, #36]	; (c4c0 <att_find_info_req+0x70>)
	data.chan = chan;
    c49a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    c49c:	466b      	mov	r3, sp
    c49e:	4630      	mov	r0, r6
    c4a0:	f01b fbd3 	bl	27c4a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    c4a4:	9c02      	ldr	r4, [sp, #8]
    c4a6:	b924      	cbnz	r4, c4b2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    c4a8:	9801      	ldr	r0, [sp, #4]
    c4aa:	f013 fc5d 	bl	1fd68 <net_buf_unref>
	if (!req) {
    c4ae:	230a      	movs	r3, #10
    c4b0:	e7e9      	b.n	c486 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c4b2:	4a04      	ldr	r2, [pc, #16]	; (c4c4 <att_find_info_req+0x74>)
    c4b4:	9901      	ldr	r1, [sp, #4]
    c4b6:	4628      	mov	r0, r5
    c4b8:	f01b fd34 	bl	27f24 <bt_att_chan_send_rsp>
    c4bc:	e7e8      	b.n	c490 <att_find_info_req+0x40>
    c4be:	bf00      	nop
    c4c0:	00027cfb 	.word	0x00027cfb
    c4c4:	00027f75 	.word	0x00027f75

0000c4c8 <att_mtu_req>:
{
    c4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    c4ca:	6803      	ldr	r3, [r0, #0]
{
    c4cc:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
    c4ce:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4d0:	f3bf 8f5b 	dmb	ish
    c4d4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    c4d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    c4dc:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    c4e0:	071b      	lsls	r3, r3, #28
    c4e2:	d421      	bmi.n	c528 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
    c4e4:	688b      	ldr	r3, [r1, #8]
    c4e6:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    c4e8:	2e16      	cmp	r6, #22
    c4ea:	d91f      	bls.n	c52c <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    c4ec:	2202      	movs	r2, #2
    c4ee:	2103      	movs	r1, #3
    c4f0:	f7ff fd88 	bl	c004 <bt_att_create_pdu>
	if (!pdu) {
    c4f4:	4607      	mov	r7, r0
    c4f6:	b1d8      	cbz	r0, c530 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
    c4f8:	2102      	movs	r1, #2
    c4fa:	3008      	adds	r0, #8
    c4fc:	f01d fa25 	bl	2994a <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    c500:	2341      	movs	r3, #65	; 0x41
    c502:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    c504:	4a0b      	ldr	r2, [pc, #44]	; (c534 <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    c506:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    c508:	4639      	mov	r1, r7
    c50a:	4620      	mov	r0, r4
    c50c:	f01b fd0a 	bl	27f24 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    c510:	2e41      	cmp	r6, #65	; 0x41
    c512:	bf28      	it	cs
    c514:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
    c516:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    c518:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    c51c:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
    c520:	f01b fb5d 	bl	27bde <att_chan_mtu_updated>
	return 0;
    c524:	4628      	mov	r0, r5
}
    c526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    c528:	2006      	movs	r0, #6
    c52a:	e7fc      	b.n	c526 <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
    c52c:	2004      	movs	r0, #4
    c52e:	e7fa      	b.n	c526 <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
    c530:	200e      	movs	r0, #14
    c532:	e7f8      	b.n	c526 <att_mtu_req+0x5e>
    c534:	00027f75 	.word	0x00027f75

0000c538 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    c538:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    c53a:	2300      	movs	r3, #0
{
    c53c:	4605      	mov	r5, r0
    c53e:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    c540:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    c542:	f016 fc8f 	bl	22e64 <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    c546:	4b0b      	ldr	r3, [pc, #44]	; (c574 <bt_att_req_alloc+0x3c>)
    c548:	681b      	ldr	r3, [r3, #0]
    c54a:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    c54c:	bf04      	itt	eq
    c54e:	2500      	moveq	r5, #0
    c550:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    c552:	a901      	add	r1, sp, #4
    c554:	4808      	ldr	r0, [pc, #32]	; (c578 <bt_att_req_alloc+0x40>)
    c556:	462a      	mov	r2, r5
    c558:	4623      	mov	r3, r4
    c55a:	f015 fce5 	bl	21f28 <k_mem_slab_alloc>
    c55e:	4601      	mov	r1, r0
    c560:	b930      	cbnz	r0, c570 <bt_att_req_alloc+0x38>
    c562:	9801      	ldr	r0, [sp, #4]
    c564:	221c      	movs	r2, #28
    c566:	f01e fa99 	bl	2aa9c <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    c56a:	9801      	ldr	r0, [sp, #4]
}
    c56c:	b003      	add	sp, #12
    c56e:	bd30      	pop	{r4, r5, pc}
		return NULL;
    c570:	2000      	movs	r0, #0
    c572:	e7fb      	b.n	c56c <bt_att_req_alloc+0x34>
    c574:	20001ee4 	.word	0x20001ee4
    c578:	20000b18 	.word	0x20000b18

0000c57c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    c57c:	b507      	push	{r0, r1, r2, lr}
    c57e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    c580:	6880      	ldr	r0, [r0, #8]
    c582:	b120      	cbz	r0, c58e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    c584:	f013 fbf0 	bl	1fd68 <net_buf_unref>
		req->buf = NULL;
    c588:	9b01      	ldr	r3, [sp, #4]
    c58a:	2200      	movs	r2, #0
    c58c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    c58e:	4803      	ldr	r0, [pc, #12]	; (c59c <bt_att_req_free+0x20>)
    c590:	a901      	add	r1, sp, #4
    c592:	f01d fd25 	bl	29fe0 <k_mem_slab_free>
}
    c596:	b003      	add	sp, #12
    c598:	f85d fb04 	ldr.w	pc, [sp], #4
    c59c:	20000b18 	.word	0x20000b18

0000c5a0 <att_handle_rsp>:
{
    c5a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5a4:	4604      	mov	r4, r0
    c5a6:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
    c5a8:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    c5ac:	4689      	mov	r9, r1
    c5ae:	4692      	mov	sl, r2
    c5b0:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
    c5b2:	f01d ff00 	bl	2a3b6 <k_work_cancel_delayable>
	if (!chan->req) {
    c5b6:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    c5ba:	b9dd      	cbnz	r5, c5f4 <att_handle_rsp+0x54>
		BT_WARN("No pending ATT request");
    c5bc:	4b17      	ldr	r3, [pc, #92]	; (c61c <att_handle_rsp+0x7c>)
    c5be:	9308      	str	r3, [sp, #32]
    c5c0:	4817      	ldr	r0, [pc, #92]	; (c620 <att_handle_rsp+0x80>)
    c5c2:	2302      	movs	r3, #2
    c5c4:	aa07      	add	r2, sp, #28
    c5c6:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
    c5ca:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
    c5cc:	9303      	str	r3, [sp, #12]
    c5ce:	9307      	str	r3, [sp, #28]
    c5d0:	f01b fbe4 	bl	27d9c <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
    c5d4:	6820      	ldr	r0, [r4, #0]
    c5d6:	f01b fd50 	bl	2807a <att_req_send_process>
	if (func) {
    c5da:	b13e      	cbz	r6, c5ec <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    c5dc:	6820      	ldr	r0, [r4, #0]
    c5de:	f8cd b000 	str.w	fp, [sp]
    c5e2:	6800      	ldr	r0, [r0, #0]
    c5e4:	4653      	mov	r3, sl
    c5e6:	464a      	mov	r2, r9
    c5e8:	4641      	mov	r1, r8
    c5ea:	47b0      	blx	r6
}
    c5ec:	2000      	movs	r0, #0
    c5ee:	b00b      	add	sp, #44	; 0x2c
    c5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    c5f4:	4b0b      	ldr	r3, [pc, #44]	; (c624 <att_handle_rsp+0x84>)
    c5f6:	429d      	cmp	r5, r3
    c5f8:	f04f 0700 	mov.w	r7, #0
    c5fc:	d103      	bne.n	c606 <att_handle_rsp+0x66>
		chan->req = NULL;
    c5fe:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    c602:	463e      	mov	r6, r7
		goto process;
    c604:	e7e6      	b.n	c5d4 <att_handle_rsp+0x34>
	func = chan->req->func;
    c606:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
    c608:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
    c60a:	4628      	mov	r0, r5
	params = chan->req->user_data;
    c60c:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
    c610:	f7ff ffb4 	bl	c57c <bt_att_req_free>
	chan->req = NULL;
    c614:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
    c618:	e7dc      	b.n	c5d4 <att_handle_rsp+0x34>
    c61a:	bf00      	nop
    c61c:	0002eb8a 	.word	0x0002eb8a
    c620:	0002b5c4 	.word	0x0002b5c4
    c624:	20001f54 	.word	0x20001f54

0000c628 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    c628:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
    c62c:	b570      	push	{r4, r5, r6, lr}
    c62e:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    c630:	b313      	cbz	r3, c678 <att_error_rsp+0x50>
    c632:	4a16      	ldr	r2, [pc, #88]	; (c68c <att_error_rsp+0x64>)
    c634:	4293      	cmp	r3, r2
    c636:	d01f      	beq.n	c678 <att_error_rsp+0x50>
	err = rsp->error;
    c638:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c63a:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
    c63c:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
    c63e:	2d05      	cmp	r5, #5
    c640:	d006      	beq.n	c650 <att_error_rsp+0x28>
    c642:	2d0f      	cmp	r5, #15
    c644:	d119      	bne.n	c67a <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
    c646:	7a43      	ldrb	r3, [r0, #9]
    c648:	2b01      	cmp	r3, #1
    c64a:	d816      	bhi.n	c67a <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
    c64c:	2102      	movs	r1, #2
    c64e:	e007      	b.n	c660 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
    c650:	7a43      	ldrb	r3, [r0, #9]
    c652:	2b01      	cmp	r3, #1
    c654:	d9fa      	bls.n	c64c <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    c656:	2b02      	cmp	r3, #2
    c658:	d00c      	beq.n	c674 <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    c65a:	2b03      	cmp	r3, #3
    c65c:	d10d      	bne.n	c67a <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
    c65e:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    c660:	f01b f8b1 	bl	277c6 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    c664:	b948      	cbnz	r0, c67a <att_error_rsp+0x52>
		chan->req->retrying = true;
    c666:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
    c66a:	7c13      	ldrb	r3, [r2, #16]
    c66c:	f043 0301 	orr.w	r3, r3, #1
    c670:	7413      	strb	r3, [r2, #16]
}
    c672:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    c674:	2103      	movs	r1, #3
    c676:	e7f3      	b.n	c660 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
    c678:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    c67a:	2200      	movs	r2, #0
    c67c:	462b      	mov	r3, r5
    c67e:	4620      	mov	r0, r4
    c680:	4611      	mov	r1, r2
}
    c682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    c686:	f7ff bf8b 	b.w	c5a0 <att_handle_rsp>
    c68a:	bf00      	nop
    c68c:	20001f54 	.word	0x20001f54

0000c690 <bt_att_disconnected>:
{
    c690:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    c692:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    c696:	b085      	sub	sp, #20
    c698:	4604      	mov	r4, r0
	if (!att_chan->att) {
    c69a:	2d00      	cmp	r5, #0
    c69c:	d04d      	beq.n	c73a <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    c69e:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    c6a2:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c6a6:	f01b fc4b 	bl	27f40 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    c6aa:	f1a4 0608 	sub.w	r6, r4, #8
    c6ae:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    c6b2:	2200      	movs	r2, #0
    c6b4:	2300      	movs	r3, #0
    c6b6:	4638      	mov	r0, r7
    c6b8:	f01d f8e4 	bl	29884 <net_buf_get>
    c6bc:	4602      	mov	r2, r0
    c6be:	bb18      	cbnz	r0, c708 <bt_att_disconnected+0x78>
	if (chan->req) {
    c6c0:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    c6c4:	b123      	cbz	r3, c6d0 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    c6c6:	4601      	mov	r1, r0
    c6c8:	230e      	movs	r3, #14
    c6ca:	4630      	mov	r0, r6
    c6cc:	f7ff ff68 	bl	c5a0 <att_handle_rsp>
	chan->att = NULL;
    c6d0:	2300      	movs	r3, #0
    c6d2:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    c6d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d12e      	bne.n	c73a <bt_att_disconnected+0xaa>
	att_reset(att);
    c6dc:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    c6de:	9803      	ldr	r0, [sp, #12]
    c6e0:	2200      	movs	r2, #0
    c6e2:	2300      	movs	r3, #0
    c6e4:	300c      	adds	r0, #12
    c6e6:	f01d f8cd 	bl	29884 <net_buf_get>
    c6ea:	b980      	cbnz	r0, c70e <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    c6ec:	9803      	ldr	r0, [sp, #12]
	return list->head;
    c6ee:	6845      	ldr	r5, [r0, #4]
    c6f0:	b985      	cbnz	r5, c714 <bt_att_disconnected+0x84>
	att->conn = NULL;
    c6f2:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    c6f4:	a903      	add	r1, sp, #12
    c6f6:	4812      	ldr	r0, [pc, #72]	; (c740 <bt_att_disconnected+0xb0>)
    c6f8:	f01d fc72 	bl	29fe0 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    c6fc:	6820      	ldr	r0, [r4, #0]
}
    c6fe:	b005      	add	sp, #20
    c700:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    c704:	f001 bba0 	b.w	de48 <bt_gatt_disconnected>
		net_buf_unref(buf);
    c708:	f013 fb2e 	bl	1fd68 <net_buf_unref>
    c70c:	e7d1      	b.n	c6b2 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    c70e:	f013 fb2b 	bl	1fd68 <net_buf_unref>
    c712:	e7e4      	b.n	c6de <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c714:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    c716:	686e      	ldr	r6, [r5, #4]
	return node->next;
    c718:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    c71a:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    c71c:	4295      	cmp	r5, r2
	list->tail = node;
    c71e:	bf08      	it	eq
    c720:	6083      	streq	r3, [r0, #8]
    c722:	b136      	cbz	r6, c732 <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    c724:	69ab      	ldr	r3, [r5, #24]
    c726:	9300      	str	r3, [sp, #0]
    c728:	2300      	movs	r3, #0
    c72a:	6800      	ldr	r0, [r0, #0]
    c72c:	461a      	mov	r2, r3
    c72e:	210e      	movs	r1, #14
    c730:	47b0      	blx	r6
		bt_att_req_free(req);
    c732:	4628      	mov	r0, r5
    c734:	f7ff ff22 	bl	c57c <bt_att_req_free>
    c738:	e7d8      	b.n	c6ec <bt_att_disconnected+0x5c>
}
    c73a:	b005      	add	sp, #20
    c73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c73e:	bf00      	nop
    c740:	20000ae0 	.word	0x20000ae0

0000c744 <att_timeout>:
{
    c744:	b510      	push	{r4, lr}
    c746:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
    c748:	4b09      	ldr	r3, [pc, #36]	; (c770 <att_timeout+0x2c>)
    c74a:	9306      	str	r3, [sp, #24]
{
    c74c:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    c74e:	2302      	movs	r3, #2
    c750:	4808      	ldr	r0, [pc, #32]	; (c774 <att_timeout+0x30>)
    c752:	9301      	str	r3, [sp, #4]
    c754:	aa05      	add	r2, sp, #20
    c756:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c75a:	9305      	str	r3, [sp, #20]
    c75c:	f01b fb1e 	bl	27d9c <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
    c760:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    c764:	b008      	add	sp, #32
    c766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    c76a:	f7ff bf91 	b.w	c690 <bt_att_disconnected>
    c76e:	bf00      	nop
    c770:	0002eba1 	.word	0x0002eba1
    c774:	0002b5c4 	.word	0x0002b5c4

0000c778 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    c778:	b510      	push	{r4, lr}
    c77a:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    c77c:	b330      	cbz	r0, c7cc <bt_att_req_cancel+0x54>
    c77e:	b329      	cbz	r1, c7cc <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
    c780:	f7ff f8aa 	bl	b8d8 <att_get>
	if (!att) {
    c784:	b310      	cbz	r0, c7cc <bt_att_req_cancel+0x54>
	return list->head;
    c786:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c788:	b153      	cbz	r3, c7a0 <bt_att_req_cancel+0x28>
    c78a:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
    c78e:	681b      	ldr	r3, [r3, #0]
    c790:	b10b      	cbz	r3, c796 <bt_att_req_cancel+0x1e>
    c792:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
    c796:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
    c79a:	4294      	cmp	r4, r2
    c79c:	d006      	beq.n	c7ac <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c79e:	b96b      	cbnz	r3, c7bc <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    c7a0:	3004      	adds	r0, #4
    c7a2:	4621      	mov	r1, r4
    c7a4:	f01b fbcc 	bl	27f40 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
    c7a8:	4620      	mov	r0, r4
    c7aa:	e003      	b.n	c7b4 <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
    c7ac:	4b08      	ldr	r3, [pc, #32]	; (c7d0 <bt_att_req_cancel+0x58>)
    c7ae:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
    c7b2:	4620      	mov	r0, r4
}
    c7b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    c7b8:	f7ff bee0 	b.w	c57c <bt_att_req_free>
    c7bc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c7c0:	b10a      	cbz	r2, c7c6 <bt_att_req_cancel+0x4e>
    c7c2:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
    c7c6:	4619      	mov	r1, r3
    c7c8:	4613      	mov	r3, r2
    c7ca:	e7e4      	b.n	c796 <bt_att_req_cancel+0x1e>
}
    c7cc:	bd10      	pop	{r4, pc}
    c7ce:	bf00      	nop
    c7d0:	20001f54 	.word	0x20001f54

0000c7d4 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    c7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c7d6:	4c15      	ldr	r4, [pc, #84]	; (c82c <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    c7d8:	4605      	mov	r5, r0
    c7da:	b140      	cbz	r0, c7ee <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c7dc:	4622      	mov	r2, r4
    c7de:	f812 1b01 	ldrb.w	r1, [r2], #1
    c7e2:	f01b f81a 	bl	2781a <bt_conn_is_peer_addr_le>
    c7e6:	b1b0      	cbz	r0, c816 <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    c7e8:	4620      	mov	r0, r4
    c7ea:	b003      	add	sp, #12
    c7ec:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    c7ee:	9000      	str	r0, [sp, #0]
    c7f0:	4669      	mov	r1, sp
    c7f2:	f8cd 0003 	str.w	r0, [sp, #3]
    c7f6:	1c60      	adds	r0, r4, #1
    c7f8:	f01b fe56 	bl	284a8 <bt_addr_le_cmp>
    c7fc:	2800      	cmp	r0, #0
    c7fe:	d0f3      	beq.n	c7e8 <find_cf_cfg+0x14>
    c800:	4669      	mov	r1, sp
    c802:	f104 0011 	add.w	r0, r4, #17
    c806:	9500      	str	r5, [sp, #0]
    c808:	f8cd 5003 	str.w	r5, [sp, #3]
    c80c:	f01b fe4c 	bl	284a8 <bt_addr_le_cmp>
    c810:	b948      	cbnz	r0, c826 <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    c812:	3410      	adds	r4, #16
    c814:	e7e8      	b.n	c7e8 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c816:	7c21      	ldrb	r1, [r4, #16]
    c818:	f104 0211 	add.w	r2, r4, #17
    c81c:	4628      	mov	r0, r5
    c81e:	f01a fffc 	bl	2781a <bt_conn_is_peer_addr_le>
    c822:	2800      	cmp	r0, #0
    c824:	d1f5      	bne.n	c812 <find_cf_cfg+0x3e>
	return NULL;
    c826:	2400      	movs	r4, #0
    c828:	e7de      	b.n	c7e8 <find_cf_cfg+0x14>
    c82a:	bf00      	nop
    c82c:	20001f78 	.word	0x20001f78

0000c830 <find_sc_cfg>:
{
    c830:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    c832:	4c0d      	ldr	r4, [pc, #52]	; (c868 <find_sc_cfg+0x38>)
    c834:	7823      	ldrb	r3, [r4, #0]
    c836:	4283      	cmp	r3, r0
{
    c838:	4605      	mov	r5, r0
    c83a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    c83c:	d009      	beq.n	c852 <find_sc_cfg+0x22>
    c83e:	7b23      	ldrb	r3, [r4, #12]
    c840:	42ab      	cmp	r3, r5
    c842:	d10f      	bne.n	c864 <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c844:	4809      	ldr	r0, [pc, #36]	; (c86c <find_sc_cfg+0x3c>)
    c846:	4631      	mov	r1, r6
    c848:	f01b fe2e 	bl	284a8 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c84c:	b950      	cbnz	r0, c864 <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    c84e:	2001      	movs	r0, #1
    c850:	e004      	b.n	c85c <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    c852:	1c60      	adds	r0, r4, #1
    c854:	f01b fe28 	bl	284a8 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    c858:	2800      	cmp	r0, #0
    c85a:	d1f0      	bne.n	c83e <find_sc_cfg+0xe>
			return &sc_cfg[i];
    c85c:	230c      	movs	r3, #12
    c85e:	fb03 4000 	mla	r0, r3, r0, r4
    c862:	e000      	b.n	c866 <find_sc_cfg+0x36>
	return NULL;
    c864:	2000      	movs	r0, #0
}
    c866:	bd70      	pop	{r4, r5, r6, pc}
    c868:	200033ea 	.word	0x200033ea
    c86c:	200033f7 	.word	0x200033f7

0000c870 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    c870:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c872:	4c15      	ldr	r4, [pc, #84]	; (c8c8 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    c874:	4605      	mov	r5, r0
    c876:	b140      	cbz	r0, c88a <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c878:	4622      	mov	r2, r4
    c87a:	f812 1b01 	ldrb.w	r1, [r2], #1
    c87e:	f01a ffcc 	bl	2781a <bt_conn_is_peer_addr_le>
    c882:	b1b0      	cbz	r0, c8b2 <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    c884:	4620      	mov	r0, r4
    c886:	b003      	add	sp, #12
    c888:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    c88a:	9000      	str	r0, [sp, #0]
    c88c:	4669      	mov	r1, sp
    c88e:	f8cd 0003 	str.w	r0, [sp, #3]
    c892:	1c60      	adds	r0, r4, #1
    c894:	f01b fe08 	bl	284a8 <bt_addr_le_cmp>
    c898:	2800      	cmp	r0, #0
    c89a:	d0f3      	beq.n	c884 <gatt_sub_find+0x14>
    c89c:	4669      	mov	r1, sp
    c89e:	f104 0011 	add.w	r0, r4, #17
    c8a2:	9500      	str	r5, [sp, #0]
    c8a4:	f8cd 5003 	str.w	r5, [sp, #3]
    c8a8:	f01b fdfe 	bl	284a8 <bt_addr_le_cmp>
    c8ac:	b948      	cbnz	r0, c8c2 <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    c8ae:	3410      	adds	r4, #16
    c8b0:	e7e8      	b.n	c884 <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    c8b2:	7c21      	ldrb	r1, [r4, #16]
    c8b4:	f104 0211 	add.w	r2, r4, #17
    c8b8:	4628      	mov	r0, r5
    c8ba:	f01a ffae 	bl	2781a <bt_conn_is_peer_addr_le>
    c8be:	2800      	cmp	r0, #0
    c8c0:	d1f5      	bne.n	c8ae <gatt_sub_find+0x3e>
	return NULL;
    c8c2:	2400      	movs	r4, #0
    c8c4:	e7de      	b.n	c884 <gatt_sub_find+0x14>
    c8c6:	bf00      	nop
    c8c8:	20001fb8 	.word	0x20001fb8

0000c8cc <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    c8cc:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    c8ce:	2312      	movs	r3, #18
{
    c8d0:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    c8d2:	2104      	movs	r1, #4
    c8d4:	e9cd 3100 	strd	r3, r1, [sp]
    c8d8:	4b03      	ldr	r3, [pc, #12]	; (c8e8 <gatt_write_ccc+0x1c>)
    c8da:	4904      	ldr	r1, [pc, #16]	; (c8ec <gatt_write_ccc+0x20>)
    c8dc:	f01b fe13 	bl	28506 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
    c8e0:	b003      	add	sp, #12
    c8e2:	f85d fb04 	ldr.w	pc, [sp], #4
    c8e6:	bf00      	nop
    c8e8:	0002896d 	.word	0x0002896d
    c8ec:	00028997 	.word	0x00028997

0000c8f0 <bt_gatt_attr_write_ccc>:
{
    c8f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c8f4:	b089      	sub	sp, #36	; 0x24
    c8f6:	461f      	mov	r7, r3
    c8f8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    c8fc:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    c900:	4606      	mov	r6, r0
    c902:	4688      	mov	r8, r1
	if (offset) {
    c904:	2b00      	cmp	r3, #0
    c906:	d14f      	bne.n	c9a8 <bt_gatt_attr_write_ccc+0xb8>
	if (!len || len > sizeof(uint16_t)) {
    c908:	1e7b      	subs	r3, r7, #1
    c90a:	2b01      	cmp	r3, #1
    c90c:	d84f      	bhi.n	c9ae <bt_gatt_attr_write_ccc+0xbe>
		value = *(uint8_t *)buf;
    c90e:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    c910:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    c912:	4649      	mov	r1, r9
    c914:	bf14      	ite	ne
    c916:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    c918:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    c91a:	f01b fdc8 	bl	284ae <find_ccc_cfg>
	if (!cfg) {
    c91e:	4604      	mov	r4, r0
    c920:	b9f0      	cbnz	r0, c960 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    c922:	b91d      	cbnz	r5, c92c <bt_gatt_attr_write_ccc+0x3c>
			return len;
    c924:	4638      	mov	r0, r7
}
    c926:	b009      	add	sp, #36	; 0x24
    c928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    c92c:	4649      	mov	r1, r9
    c92e:	f01b fdbe 	bl	284ae <find_ccc_cfg>
		if (!cfg) {
    c932:	4604      	mov	r4, r0
    c934:	b968      	cbnz	r0, c952 <bt_gatt_attr_write_ccc+0x62>
			BT_WARN("No space to store CCC cfg");
    c936:	4b1f      	ldr	r3, [pc, #124]	; (c9b4 <bt_gatt_attr_write_ccc+0xc4>)
    c938:	481f      	ldr	r0, [pc, #124]	; (c9b8 <bt_gatt_attr_write_ccc+0xc8>)
    c93a:	9306      	str	r3, [sp, #24]
    c93c:	aa05      	add	r2, sp, #20
    c93e:	2302      	movs	r3, #2
    c940:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c944:	9301      	str	r3, [sp, #4]
    c946:	9305      	str	r3, [sp, #20]
    c948:	f01b ff89 	bl	2885e <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    c94c:	f06f 0010 	mvn.w	r0, #16
    c950:	e7e9      	b.n	c926 <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c952:	f106 0188 	add.w	r1, r6, #136	; 0x88
    c956:	3001      	adds	r0, #1
    c958:	f01b feab 	bl	286b2 <bt_addr_le_copy>
		cfg->id = conn->id;
    c95c:	7a33      	ldrb	r3, [r6, #8]
    c95e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    c960:	f8d9 301c 	ldr.w	r3, [r9, #28]
    c964:	b9a3      	cbnz	r3, c990 <bt_gatt_attr_write_ccc+0xa0>
	if (cfg->value != ccc->value) {
    c966:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    c96a:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    c96c:	42ab      	cmp	r3, r5
    c96e:	d003      	beq.n	c978 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    c970:	4649      	mov	r1, r9
    c972:	4640      	mov	r0, r8
    c974:	f01b fd15 	bl	283a2 <gatt_ccc_changed>
	if (!value) {
    c978:	2d00      	cmp	r5, #0
    c97a:	d1d3      	bne.n	c924 <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    c97c:	a902      	add	r1, sp, #8
    c97e:	1c60      	adds	r0, r4, #1
    c980:	9502      	str	r5, [sp, #8]
    c982:	f8cd 500b 	str.w	r5, [sp, #11]
    c986:	f01b fe94 	bl	286b2 <bt_addr_le_copy>
	cfg->id = 0U;
    c98a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    c98c:	8125      	strh	r5, [r4, #8]
}
    c98e:	e7c9      	b.n	c924 <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    c990:	462a      	mov	r2, r5
    c992:	4641      	mov	r1, r8
    c994:	4630      	mov	r0, r6
    c996:	4798      	blx	r3
		if (write < 0) {
    c998:	2800      	cmp	r0, #0
    c99a:	dbc4      	blt.n	c926 <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
    c99c:	3801      	subs	r0, #1
    c99e:	2801      	cmp	r0, #1
    c9a0:	d9e1      	bls.n	c966 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    c9a2:	f06f 000d 	mvn.w	r0, #13
    c9a6:	e7be      	b.n	c926 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c9a8:	f06f 0006 	mvn.w	r0, #6
    c9ac:	e7bb      	b.n	c926 <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    c9ae:	f06f 000c 	mvn.w	r0, #12
    c9b2:	e7b8      	b.n	c926 <bt_gatt_attr_write_ccc+0x36>
    c9b4:	0002ebb4 	.word	0x0002ebb4
    c9b8:	0002b6b4 	.word	0x0002b6b4

0000c9bc <sc_save>:
{
    c9bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c9c0:	b08a      	sub	sp, #40	; 0x28
    c9c2:	4680      	mov	r8, r0
    c9c4:	460f      	mov	r7, r1
    c9c6:	4616      	mov	r6, r2
    c9c8:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    c9ca:	f7ff ff31 	bl	c830 <find_sc_cfg>
	if (!cfg) {
    c9ce:	4604      	mov	r4, r0
    c9d0:	b9d0      	cbnz	r0, ca08 <sc_save+0x4c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    c9d2:	a902      	add	r1, sp, #8
    c9d4:	9002      	str	r0, [sp, #8]
    c9d6:	f8cd 000b 	str.w	r0, [sp, #11]
    c9da:	f7ff ff29 	bl	c830 <find_sc_cfg>
		if (!cfg) {
    c9de:	4604      	mov	r4, r0
    c9e0:	b968      	cbnz	r0, c9fe <sc_save+0x42>
			BT_ERR("unable to save SC: no cfg left");
    c9e2:	4b10      	ldr	r3, [pc, #64]	; (ca24 <sc_save+0x68>)
    c9e4:	9308      	str	r3, [sp, #32]
    c9e6:	4810      	ldr	r0, [pc, #64]	; (ca28 <sc_save+0x6c>)
    c9e8:	2302      	movs	r3, #2
    c9ea:	aa07      	add	r2, sp, #28
    c9ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c9f0:	9301      	str	r3, [sp, #4]
    c9f2:	9307      	str	r3, [sp, #28]
    c9f4:	f01b ff33 	bl	2885e <z_log_msg2_static_create.constprop.0>
}
    c9f8:	b00a      	add	sp, #40	; 0x28
    c9fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    c9fe:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    ca02:	4639      	mov	r1, r7
    ca04:	f01b fe55 	bl	286b2 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    ca08:	8922      	ldrh	r2, [r4, #8]
    ca0a:	8963      	ldrh	r3, [r4, #10]
    ca0c:	b91a      	cbnz	r2, ca16 <sc_save+0x5a>
    ca0e:	b923      	cbnz	r3, ca1a <sc_save+0x5e>
		cfg->data.start = start;
    ca10:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    ca12:	8165      	strh	r5, [r4, #10]
    ca14:	e7f0      	b.n	c9f8 <sc_save+0x3c>
	if (new_start >= *start && new_end <= *end) {
    ca16:	4296      	cmp	r6, r2
    ca18:	d302      	bcc.n	ca20 <sc_save+0x64>
    ca1a:	429d      	cmp	r5, r3
    ca1c:	d9ec      	bls.n	c9f8 <sc_save+0x3c>
    ca1e:	e7f8      	b.n	ca12 <sc_save+0x56>
		*start = new_start;
    ca20:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    ca22:	e7fa      	b.n	ca1a <sc_save+0x5e>
    ca24:	0002ebce 	.word	0x0002ebce
    ca28:	0002b6b4 	.word	0x0002b6b4

0000ca2c <cf_write>:
{
    ca2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca30:	b088      	sub	sp, #32
    ca32:	4698      	mov	r8, r3
    ca34:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
    ca38:	2b01      	cmp	r3, #1
{
    ca3a:	4606      	mov	r6, r0
    ca3c:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    ca3e:	d83f      	bhi.n	cac0 <cf_write+0x94>
	if (offset + len > sizeof(cfg->data)) {
    ca40:	4443      	add	r3, r8
    ca42:	2b01      	cmp	r3, #1
    ca44:	4645      	mov	r5, r8
    ca46:	dc3e      	bgt.n	cac6 <cf_write+0x9a>
	cfg = find_cf_cfg(conn);
    ca48:	f7ff fec4 	bl	c7d4 <find_cf_cfg>
	if (!cfg) {
    ca4c:	4604      	mov	r4, r0
    ca4e:	b918      	cbnz	r0, ca58 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
    ca50:	f7ff fec0 	bl	c7d4 <find_cf_cfg>
	if (!cfg) {
    ca54:	4604      	mov	r4, r0
    ca56:	b180      	cbz	r0, ca7a <cf_write+0x4e>
{
    ca58:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    ca5a:	f1b8 0f00 	cmp.w	r8, #0
    ca5e:	d11d      	bne.n	ca9c <cf_write+0x70>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ca60:	f106 0188 	add.w	r1, r6, #136	; 0x88
    ca64:	1c60      	adds	r0, r4, #1
    ca66:	f01b fe24 	bl	286b2 <bt_addr_le_copy>
	cfg->id = conn->id;
    ca6a:	4620      	mov	r0, r4
    ca6c:	7a33      	ldrb	r3, [r6, #8]
    ca6e:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    ca72:	2100      	movs	r1, #0
    ca74:	f01b ff56 	bl	28924 <atomic_set_bit>
	return len;
    ca78:	e00c      	b.n	ca94 <cf_write+0x68>
		BT_WARN("No space to store Client Supported Features");
    ca7a:	4b16      	ldr	r3, [pc, #88]	; (cad4 <cf_write+0xa8>)
    ca7c:	9306      	str	r3, [sp, #24]
    ca7e:	4816      	ldr	r0, [pc, #88]	; (cad8 <cf_write+0xac>)
    ca80:	2302      	movs	r3, #2
    ca82:	aa05      	add	r2, sp, #20
    ca84:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ca88:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
    ca8c:	9301      	str	r3, [sp, #4]
    ca8e:	9305      	str	r3, [sp, #20]
    ca90:	f01b fee5 	bl	2885e <z_log_msg2_static_create.constprop.0>
}
    ca94:	4628      	mov	r0, r5
    ca96:	b008      	add	sp, #32
    ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    ca9c:	7a20      	ldrb	r0, [r4, #8]
    ca9e:	fa20 f301 	lsr.w	r3, r0, r1
    caa2:	07da      	lsls	r2, r3, #31
    caa4:	d503      	bpl.n	caae <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
    caa6:	783b      	ldrb	r3, [r7, #0]
    caa8:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    caaa:	07db      	lsls	r3, r3, #31
    caac:	d50e      	bpl.n	cacc <cf_write+0xa0>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    caae:	3101      	adds	r1, #1
    cab0:	2903      	cmp	r1, #3
    cab2:	d1d2      	bne.n	ca5a <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    cab4:	783b      	ldrb	r3, [r7, #0]
    cab6:	f003 0307 	and.w	r3, r3, #7
    caba:	4318      	orrs	r0, r3
    cabc:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    cabe:	e7cf      	b.n	ca60 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    cac0:	f06f 0506 	mvn.w	r5, #6
    cac4:	e7e6      	b.n	ca94 <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    cac6:	f06f 050c 	mvn.w	r5, #12
    caca:	e7e3      	b.n	ca94 <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    cacc:	f06f 0512 	mvn.w	r5, #18
    cad0:	e7e0      	b.n	ca94 <cf_write+0x68>
    cad2:	bf00      	nop
    cad4:	0002ebed 	.word	0x0002ebed
    cad8:	0002b6b4 	.word	0x0002b6b4

0000cadc <sc_indicate_rsp>:
{
    cadc:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    cade:	4913      	ldr	r1, [pc, #76]	; (cb2c <sc_indicate_rsp+0x50>)
    cae0:	f3bf 8f5b 	dmb	ish
    cae4:	4604      	mov	r4, r0
    cae6:	e851 3f00 	ldrex	r3, [r1]
    caea:	f023 0302 	bic.w	r3, r3, #2
    caee:	e841 3200 	strex	r2, r3, [r1]
    caf2:	2a00      	cmp	r2, #0
    caf4:	d1f7      	bne.n	cae6 <sc_indicate_rsp+0xa>
    caf6:	f3bf 8f5b 	dmb	ish
    cafa:	4608      	mov	r0, r1
    cafc:	f01b fc79 	bl	283f2 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    cb00:	07c2      	lsls	r2, r0, #31
    cb02:	d505      	bpl.n	cb10 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
    cb04:	2200      	movs	r2, #0
    cb06:	2300      	movs	r3, #0
    cb08:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    cb0c:	f015 feb4 	bl	22878 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    cb10:	4620      	mov	r0, r4
    cb12:	f7ff fe5f 	bl	c7d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    cb16:	b140      	cbz	r0, cb2a <sc_indicate_rsp+0x4e>
    cb18:	7a03      	ldrb	r3, [r0, #8]
    cb1a:	07db      	lsls	r3, r3, #31
    cb1c:	d505      	bpl.n	cb2a <sc_indicate_rsp+0x4e>
}
    cb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    cb22:	2100      	movs	r1, #0
    cb24:	300c      	adds	r0, #12
    cb26:	f01b befd 	b.w	28924 <atomic_set_bit>
}
    cb2a:	bd10      	pop	{r4, pc}
    cb2c:	20001718 	.word	0x20001718

0000cb30 <disconnected_cb>:
{
    cb30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    cb34:	4b2a      	ldr	r3, [pc, #168]	; (cbe0 <disconnected_cb+0xb0>)
{
    cb36:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    cb38:	6882      	ldr	r2, [r0, #8]
    cb3a:	429a      	cmp	r2, r3
{
    cb3c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    cb3e:	d12f      	bne.n	cba0 <disconnected_cb+0x70>
	ccc = attr->user_data;
    cb40:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    cb42:	8aab      	ldrh	r3, [r5, #20]
    cb44:	b363      	cbz	r3, cba0 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    cb46:	f8df b09c 	ldr.w	fp, [pc, #156]	; cbe4 <disconnected_cb+0xb4>
    cb4a:	1c6c      	adds	r4, r5, #1
    cb4c:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    cb50:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cb54:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    cb58:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    cb5c:	b19b      	cbz	r3, cb86 <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    cb5e:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    cb62:	4622      	mov	r2, r4
    cb64:	4630      	mov	r0, r6
    cb66:	f01a fe58 	bl	2781a <bt_conn_is_peer_addr_le>
    cb6a:	b9e8      	cbnz	r0, cba8 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    cb6c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    cb70:	4621      	mov	r1, r4
    cb72:	f7fe f9a9 	bl	aec8 <bt_conn_lookup_addr_le>
			if (tmp) {
    cb76:	b130      	cbz	r0, cb86 <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    cb78:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    cb7a:	2b07      	cmp	r3, #7
    cb7c:	bf08      	it	eq
    cb7e:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    cb82:	f01a fda2 	bl	276ca <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    cb86:	340a      	adds	r4, #10
    cb88:	4554      	cmp	r4, sl
    cb8a:	d1e5      	bne.n	cb58 <disconnected_cb+0x28>
	if (!value_used) {
    cb8c:	f1b8 0f00 	cmp.w	r8, #0
    cb90:	d106      	bne.n	cba0 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    cb92:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    cb94:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    cb98:	b113      	cbz	r3, cba0 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    cb9a:	4641      	mov	r1, r8
    cb9c:	4638      	mov	r0, r7
    cb9e:	4798      	blx	r3
}
    cba0:	2001      	movs	r0, #1
    cba2:	b003      	add	sp, #12
    cba4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cba8:	7a30      	ldrb	r0, [r6, #8]
    cbaa:	4649      	mov	r1, r9
    cbac:	f01a faba 	bl	27124 <bt_addr_le_is_bonded>
    cbb0:	b988      	cbnz	r0, cbd6 <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    cbb2:	455d      	cmp	r5, fp
    cbb4:	d102      	bne.n	cbbc <disconnected_cb+0x8c>
					sc_clear(conn);
    cbb6:	4630      	mov	r0, r6
    cbb8:	f01b fe54 	bl	28864 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    cbbc:	2200      	movs	r2, #0
    cbbe:	4669      	mov	r1, sp
    cbc0:	4620      	mov	r0, r4
    cbc2:	9200      	str	r2, [sp, #0]
    cbc4:	f8cd 2003 	str.w	r2, [sp, #3]
    cbc8:	f01b fd73 	bl	286b2 <bt_addr_le_copy>
	cfg->id = 0U;
    cbcc:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    cbd0:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    cbd4:	e7d7      	b.n	cb86 <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cbd6:	4649      	mov	r1, r9
    cbd8:	4620      	mov	r0, r4
    cbda:	f01b fd6a 	bl	286b2 <bt_addr_le_copy>
    cbde:	e7d2      	b.n	cb86 <disconnected_cb+0x56>
    cbe0:	0000c8f1 	.word	0x0000c8f1
    cbe4:	20000264 	.word	0x20000264

0000cbe8 <bt_gatt_init>:
{
    cbe8:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    cbea:	4b20      	ldr	r3, [pc, #128]	; (cc6c <bt_gatt_init+0x84>)
    cbec:	f3bf 8f5b 	dmb	ish
    cbf0:	2201      	movs	r2, #1
    cbf2:	e853 1f00 	ldrex	r1, [r3]
    cbf6:	2900      	cmp	r1, #0
    cbf8:	d103      	bne.n	cc02 <bt_gatt_init+0x1a>
    cbfa:	e843 2000 	strex	r0, r2, [r3]
    cbfe:	2800      	cmp	r0, #0
    cc00:	d1f7      	bne.n	cbf2 <bt_gatt_init+0xa>
    cc02:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    cc06:	d130      	bne.n	cc6a <bt_gatt_init+0x82>
    cc08:	f3bf 8f5b 	dmb	ish
    cc0c:	4b18      	ldr	r3, [pc, #96]	; (cc70 <bt_gatt_init+0x88>)
    cc0e:	e853 1f00 	ldrex	r1, [r3]
    cc12:	2900      	cmp	r1, #0
    cc14:	d103      	bne.n	cc1e <bt_gatt_init+0x36>
    cc16:	e843 2000 	strex	r0, r2, [r3]
    cc1a:	2800      	cmp	r0, #0
    cc1c:	d1f7      	bne.n	cc0e <bt_gatt_init+0x26>
    cc1e:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    cc22:	d108      	bne.n	cc36 <bt_gatt_init+0x4e>
    cc24:	4913      	ldr	r1, [pc, #76]	; (cc74 <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    cc26:	4a14      	ldr	r2, [pc, #80]	; (cc78 <bt_gatt_init+0x90>)
    cc28:	880b      	ldrh	r3, [r1, #0]
    cc2a:	4c14      	ldr	r4, [pc, #80]	; (cc7c <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    cc2c:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    cc2e:	42a2      	cmp	r2, r4
    cc30:	d315      	bcc.n	cc5e <bt_gatt_init+0x76>
    cc32:	b100      	cbz	r0, cc36 <bt_gatt_init+0x4e>
    cc34:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    cc36:	4b12      	ldr	r3, [pc, #72]	; (cc80 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    cc38:	4912      	ldr	r1, [pc, #72]	; (cc84 <bt_gatt_init+0x9c>)
    cc3a:	4813      	ldr	r0, [pc, #76]	; (cc88 <bt_gatt_init+0xa0>)
    cc3c:	2200      	movs	r2, #0
	list->tail = NULL;
    cc3e:	e9c3 2200 	strd	r2, r2, [r3]
    cc42:	f01d fbac 	bl	2a39e <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    cc46:	4810      	ldr	r0, [pc, #64]	; (cc88 <bt_gatt_init+0xa0>)
    cc48:	f44f 72a4 	mov.w	r2, #328	; 0x148
    cc4c:	2300      	movs	r3, #0
    cc4e:	f015 fddf 	bl	22810 <k_work_schedule>
}
    cc52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    cc56:	490d      	ldr	r1, [pc, #52]	; (cc8c <bt_gatt_init+0xa4>)
    cc58:	480d      	ldr	r0, [pc, #52]	; (cc90 <bt_gatt_init+0xa8>)
    cc5a:	f01d bba0 	b.w	2a39e <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    cc5e:	6850      	ldr	r0, [r2, #4]
    cc60:	4403      	add	r3, r0
    cc62:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    cc64:	3208      	adds	r2, #8
    cc66:	2001      	movs	r0, #1
    cc68:	e7e1      	b.n	cc2e <bt_gatt_init+0x46>
}
    cc6a:	bd10      	pop	{r4, pc}
    cc6c:	20001f98 	.word	0x20001f98
    cc70:	20001fb4 	.word	0x20001fb4
    cc74:	200033e8 	.word	0x200033e8
    cc78:	0002b5a4 	.word	0x0002b5a4
    cc7c:	0002b5bc 	.word	0x0002b5bc
    cc80:	20001f70 	.word	0x20001f70
    cc84:	00028adf 	.word	0x00028adf
    cc88:	20001670 	.word	0x20001670
    cc8c:	0000d00d 	.word	0x0000d00d
    cc90:	200016e8 	.word	0x200016e8

0000cc94 <bt_gatt_attr_get_handle>:
{
    cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    cc98:	4603      	mov	r3, r0
    cc9a:	b148      	cbz	r0, ccb0 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    cc9c:	8a00      	ldrh	r0, [r0, #16]
    cc9e:	b938      	cbnz	r0, ccb0 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cca0:	4912      	ldr	r1, [pc, #72]	; (ccec <bt_gatt_attr_get_handle+0x58>)
    cca2:	f8df e04c 	ldr.w	lr, [pc, #76]	; ccf0 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    cca6:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    cca8:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ccac:	4571      	cmp	r1, lr
    ccae:	d301      	bcc.n	ccb4 <bt_gatt_attr_get_handle+0x20>
}
    ccb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ccb4:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    ccb8:	42bb      	cmp	r3, r7
    ccba:	d304      	bcc.n	ccc6 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    ccbc:	fb0c 7206 	mla	r2, ip, r6, r7
    ccc0:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    ccc2:	4293      	cmp	r3, r2
    ccc4:	d90e      	bls.n	cce4 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    ccc6:	19a2      	adds	r2, r4, r6
    ccc8:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    ccca:	3108      	adds	r1, #8
    cccc:	4614      	mov	r4, r2
    ccce:	e7ed      	b.n	ccac <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    ccd0:	fb0c 7805 	mla	r8, ip, r5, r7
    ccd4:	4543      	cmp	r3, r8
    ccd6:	d007      	beq.n	cce8 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    ccd8:	3501      	adds	r5, #1
    ccda:	1962      	adds	r2, r4, r5
    ccdc:	42b5      	cmp	r5, r6
    ccde:	b292      	uxth	r2, r2
    cce0:	d1f6      	bne.n	ccd0 <bt_gatt_attr_get_handle+0x3c>
    cce2:	e7f2      	b.n	ccca <bt_gatt_attr_get_handle+0x36>
    cce4:	2500      	movs	r5, #0
    cce6:	e7f8      	b.n	ccda <bt_gatt_attr_get_handle+0x46>
    cce8:	4610      	mov	r0, r2
    ccea:	e7e1      	b.n	ccb0 <bt_gatt_attr_get_handle+0x1c>
    ccec:	0002b5a4 	.word	0x0002b5a4
    ccf0:	0002b5bc 	.word	0x0002b5bc

0000ccf4 <bt_gatt_foreach_attr_type>:
{
    ccf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccf8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    ccfc:	9100      	str	r1, [sp, #0]
    ccfe:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    cd00:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cd04:	2d00      	cmp	r5, #0
    cd06:	bf08      	it	eq
    cd08:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    cd0a:	4b24      	ldr	r3, [pc, #144]	; (cd9c <bt_gatt_foreach_attr_type+0xa8>)
    cd0c:	881b      	ldrh	r3, [r3, #0]
    cd0e:	4283      	cmp	r3, r0
{
    cd10:	4607      	mov	r7, r0
    cd12:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    cd14:	d23c      	bcs.n	cd90 <bt_gatt_foreach_attr_type+0x9c>
}
    cd16:	b003      	add	sp, #12
    cd18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    cd1c:	6873      	ldr	r3, [r6, #4]
    cd1e:	4423      	add	r3, r4
    cd20:	42bb      	cmp	r3, r7
    cd22:	d232      	bcs.n	cd8a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    cd24:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cd26:	3608      	adds	r6, #8
    cd28:	4b1d      	ldr	r3, [pc, #116]	; (cda0 <bt_gatt_foreach_attr_type+0xac>)
    cd2a:	429e      	cmp	r6, r3
    cd2c:	d3f6      	bcc.n	cd1c <bt_gatt_foreach_attr_type+0x28>
    cd2e:	e7f2      	b.n	cd16 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cd30:	5889      	ldr	r1, [r1, r2]
    cd32:	9301      	str	r3, [sp, #4]
    cd34:	4640      	mov	r0, r8
    cd36:	f01a f869 	bl	26e0c <bt_uuid_cmp>
    cd3a:	9b01      	ldr	r3, [sp, #4]
    cd3c:	b190      	cbz	r0, cd64 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cd3e:	3401      	adds	r4, #1
    cd40:	f10a 0a01 	add.w	sl, sl, #1
    cd44:	b2a4      	uxth	r4, r4
    cd46:	6873      	ldr	r3, [r6, #4]
    cd48:	4553      	cmp	r3, sl
    cd4a:	d9ec      	bls.n	cd26 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    cd4c:	9b00      	ldr	r3, [sp, #0]
    cd4e:	429c      	cmp	r4, r3
    cd50:	d8e1      	bhi.n	cd16 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    cd52:	42bc      	cmp	r4, r7
    cd54:	d3f3      	bcc.n	cd3e <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cd56:	6831      	ldr	r1, [r6, #0]
    cd58:	fb0b f20a 	mul.w	r2, fp, sl
    cd5c:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    cd5e:	f1b8 0f00 	cmp.w	r8, #0
    cd62:	d1e5      	bne.n	cd30 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    cd64:	f1b9 0f00 	cmp.w	r9, #0
    cd68:	d10b      	bne.n	cd82 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    cd6a:	3d01      	subs	r5, #1
    cd6c:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    cd6e:	4618      	mov	r0, r3
    cd70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cd72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cd74:	4621      	mov	r1, r4
    cd76:	4798      	blx	r3
	if (!*num_matches) {
    cd78:	2d00      	cmp	r5, #0
    cd7a:	d0cc      	beq.n	cd16 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cd7c:	2800      	cmp	r0, #0
    cd7e:	d1de      	bne.n	cd3e <bt_gatt_foreach_attr_type+0x4a>
    cd80:	e7c9      	b.n	cd16 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    cd82:	68da      	ldr	r2, [r3, #12]
    cd84:	4591      	cmp	r9, r2
    cd86:	d1da      	bne.n	cd3e <bt_gatt_foreach_attr_type+0x4a>
    cd88:	e7ef      	b.n	cd6a <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    cd8a:	f04f 0a00 	mov.w	sl, #0
    cd8e:	e7da      	b.n	cd46 <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    cd90:	4e04      	ldr	r6, [pc, #16]	; (cda4 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    cd92:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    cd94:	f04f 0b14 	mov.w	fp, #20
    cd98:	e7c6      	b.n	cd28 <bt_gatt_foreach_attr_type+0x34>
    cd9a:	bf00      	nop
    cd9c:	200033e8 	.word	0x200033e8
    cda0:	0002b5bc 	.word	0x0002b5bc
    cda4:	0002b5a4 	.word	0x0002b5a4

0000cda8 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    cda8:	b510      	push	{r4, lr}
    cdaa:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
    cdac:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cdae:	aa24      	add	r2, sp, #144	; 0x90
    cdb0:	a902      	add	r1, sp, #8
    cdb2:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
    cdb4:	e9cd 4402 	strd	r4, r4, [sp, #8]
    cdb8:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    cdbc:	f019 fe58 	bl	26a70 <tc_cmac_setup>
    cdc0:	b960      	cbnz	r0, cddc <db_hash_gen.constprop.0+0x34>
		BT_ERR("Unable to setup AES CMAC");
    cdc2:	4b1a      	ldr	r3, [pc, #104]	; (ce2c <db_hash_gen.constprop.0+0x84>)
		BT_ERR("Unable to calculate hash");
    cdc4:	930a      	str	r3, [sp, #40]	; 0x28
    cdc6:	481a      	ldr	r0, [pc, #104]	; (ce30 <db_hash_gen.constprop.0+0x88>)
    cdc8:	2302      	movs	r3, #2
    cdca:	aa09      	add	r2, sp, #36	; 0x24
    cdcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    cdd0:	9301      	str	r3, [sp, #4]
    cdd2:	9309      	str	r3, [sp, #36]	; 0x24
    cdd4:	f01b fd43 	bl	2885e <z_log_msg2_static_create.constprop.0>
}
    cdd8:	b050      	add	sp, #320	; 0x140
    cdda:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    cddc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cde0:	2001      	movs	r0, #1
    cde2:	4a14      	ldr	r2, [pc, #80]	; (ce34 <db_hash_gen.constprop.0+0x8c>)
    cde4:	ab0c      	add	r3, sp, #48	; 0x30
    cde6:	f01b fe6f 	bl	28ac8 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    cdea:	4813      	ldr	r0, [pc, #76]	; (ce38 <db_hash_gen.constprop.0+0x90>)
    cdec:	a90c      	add	r1, sp, #48	; 0x30
    cdee:	f019 fed5 	bl	26b9c <tc_cmac_final>
    cdf2:	b908      	cbnz	r0, cdf8 <db_hash_gen.constprop.0+0x50>
		BT_ERR("Unable to calculate hash");
    cdf4:	4b11      	ldr	r3, [pc, #68]	; (ce3c <db_hash_gen.constprop.0+0x94>)
    cdf6:	e7e5      	b.n	cdc4 <db_hash_gen.constprop.0+0x1c>
    cdf8:	4b0f      	ldr	r3, [pc, #60]	; (ce38 <db_hash_gen.constprop.0+0x90>)
    cdfa:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    cdfe:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    ce00:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    ce02:	7810      	ldrb	r0, [r2, #0]
    ce04:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    ce08:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    ce0a:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
    ce0e:	d1f6      	bne.n	cdfe <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce10:	f3bf 8f5b 	dmb	ish
    ce14:	4b0a      	ldr	r3, [pc, #40]	; (ce40 <db_hash_gen.constprop.0+0x98>)
    ce16:	e853 2f00 	ldrex	r2, [r3]
    ce1a:	f042 0204 	orr.w	r2, r2, #4
    ce1e:	e843 2100 	strex	r1, r2, [r3]
    ce22:	2900      	cmp	r1, #0
    ce24:	d1f7      	bne.n	ce16 <db_hash_gen.constprop.0+0x6e>
    ce26:	f3bf 8f5b 	dmb	ish
    ce2a:	e7d5      	b.n	cdd8 <db_hash_gen.constprop.0+0x30>
    ce2c:	0002ec19 	.word	0x0002ec19
    ce30:	0002b6b4 	.word	0x0002b6b4
    ce34:	000283ff 	.word	0x000283ff
    ce38:	20001660 	.word	0x20001660
    ce3c:	0002ec32 	.word	0x0002ec32
    ce40:	20001718 	.word	0x20001718

0000ce44 <gatt_indicate>:
{
    ce44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce48:	4615      	mov	r5, r2
    ce4a:	b088      	sub	sp, #32
    ce4c:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    ce4e:	2214      	movs	r2, #20
    ce50:	6869      	ldr	r1, [r5, #4]
{
    ce52:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    ce54:	f01b fe45 	bl	28ae2 <bt_gatt_check_perm>
    ce58:	4607      	mov	r7, r0
    ce5a:	b180      	cbz	r0, ce7e <gatt_indicate+0x3a>
		BT_WARN("Link is not encrypted");
    ce5c:	4b2b      	ldr	r3, [pc, #172]	; (cf0c <gatt_indicate+0xc8>)
    ce5e:	9306      	str	r3, [sp, #24]
    ce60:	482b      	ldr	r0, [pc, #172]	; (cf10 <gatt_indicate+0xcc>)
    ce62:	2302      	movs	r3, #2
    ce64:	aa05      	add	r2, sp, #20
    ce66:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
    ce6a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		BT_WARN("Link is not encrypted");
    ce6e:	9301      	str	r3, [sp, #4]
    ce70:	9305      	str	r3, [sp, #20]
    ce72:	f01b fcf4 	bl	2885e <z_log_msg2_static_create.constprop.0>
}
    ce76:	4628      	mov	r0, r5
    ce78:	b008      	add	sp, #32
    ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ce7e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    ce82:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    ce84:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    ce86:	f7ff fb57 	bl	c538 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    ce8a:	3602      	adds	r6, #2
	if (!req) {
    ce8c:	4604      	mov	r4, r0
    ce8e:	b910      	cbnz	r0, ce96 <gatt_indicate+0x52>
		return -ENOMEM;
    ce90:	f06f 050b 	mvn.w	r5, #11
    ce94:	e7ef      	b.n	ce76 <gatt_indicate+0x32>
	req->func = func;
    ce96:	4b1f      	ldr	r3, [pc, #124]	; (cf14 <gatt_indicate+0xd0>)
	req->len = len;
    ce98:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    ce9a:	211d      	movs	r1, #29
    ce9c:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
    ce9e:	60c7      	str	r7, [r0, #12]
	req->func = func;
    cea0:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    cea2:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    cea4:	4632      	mov	r2, r6
    cea6:	4640      	mov	r0, r8
    cea8:	f7ff f8ac 	bl	c004 <bt_att_create_pdu>
	if (!buf) {
    ceac:	4606      	mov	r6, r0
    ceae:	b970      	cbnz	r0, cece <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
    ceb0:	4b19      	ldr	r3, [pc, #100]	; (cf18 <gatt_indicate+0xd4>)
    ceb2:	9306      	str	r3, [sp, #24]
    ceb4:	4816      	ldr	r0, [pc, #88]	; (cf10 <gatt_indicate+0xcc>)
    ceb6:	2302      	movs	r3, #2
    ceb8:	aa05      	add	r2, sp, #20
    ceba:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    cebe:	9301      	str	r3, [sp, #4]
    cec0:	9305      	str	r3, [sp, #20]
    cec2:	f01b fccc 	bl	2885e <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
    cec6:	4620      	mov	r0, r4
    cec8:	f7ff fb58 	bl	c57c <bt_att_req_free>
    cecc:	e7e0      	b.n	ce90 <gatt_indicate+0x4c>
    cece:	f100 0a08 	add.w	sl, r0, #8
    ced2:	2102      	movs	r1, #2
    ced4:	4650      	mov	r0, sl
    ced6:	f01c fd38 	bl	2994a <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    ceda:	4607      	mov	r7, r0
    cedc:	8aa9      	ldrh	r1, [r5, #20]
    cede:	f827 9b02 	strh.w	r9, [r7], #2
    cee2:	4650      	mov	r0, sl
    cee4:	f01c fd31 	bl	2994a <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    cee8:	8aaa      	ldrh	r2, [r5, #20]
    ceea:	6929      	ldr	r1, [r5, #16]
    ceec:	4638      	mov	r0, r7
    ceee:	f01d fdb4 	bl	2aa5a <memcpy>
	req->buf = buf;
    cef2:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    cef4:	4621      	mov	r1, r4
    cef6:	4640      	mov	r0, r8
    cef8:	f01b fa24 	bl	28344 <bt_att_req_send>
	if (err) {
    cefc:	4605      	mov	r5, r0
    cefe:	2800      	cmp	r0, #0
    cf00:	d0b9      	beq.n	ce76 <gatt_indicate+0x32>
		bt_att_req_free(req);
    cf02:	4620      	mov	r0, r4
    cf04:	f7ff fb3a 	bl	c57c <bt_att_req_free>
    cf08:	e7b5      	b.n	ce76 <gatt_indicate+0x32>
    cf0a:	bf00      	nop
    cf0c:	0002ec4b 	.word	0x0002ec4b
    cf10:	0002b6b4 	.word	0x0002b6b4
    cf14:	000283bf 	.word	0x000283bf
    cf18:	0002ec61 	.word	0x0002ec61

0000cf1c <bt_gatt_indicate>:
{
    cf1c:	b530      	push	{r4, r5, lr}
    cf1e:	4604      	mov	r4, r0
    cf20:	b08b      	sub	sp, #44	; 0x2c
    cf22:	4837      	ldr	r0, [pc, #220]	; (d000 <bt_gatt_indicate+0xe4>)
    cf24:	f01b fa65 	bl	283f2 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cf28:	0782      	lsls	r2, r0, #30
{
    cf2a:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    cf2c:	d561      	bpl.n	cff2 <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    cf2e:	b114      	cbz	r4, cf36 <bt_gatt_indicate+0x1a>
    cf30:	7b63      	ldrb	r3, [r4, #13]
    cf32:	2b07      	cmp	r3, #7
    cf34:	d160      	bne.n	cff8 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    cf36:	6868      	ldr	r0, [r5, #4]
    cf38:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    cf3a:	f7ff feab 	bl	cc94 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    cf3e:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    cf40:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    cf44:	b33a      	cbz	r2, cf96 <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cf46:	a905      	add	r1, sp, #20
    cf48:	9102      	str	r1, [sp, #8]
    cf4a:	492e      	ldr	r1, [pc, #184]	; (d004 <bt_gatt_indicate+0xe8>)
    cf4c:	9101      	str	r1, [sp, #4]
    cf4e:	2101      	movs	r1, #1
	found->attr = NULL;
    cf50:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cf52:	9100      	str	r1, [sp, #0]
    cf54:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    cf58:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    cf5a:	f7ff fecb 	bl	ccf4 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    cf5e:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    cf60:	b91b      	cbnz	r3, cf6a <bt_gatt_indicate+0x4e>
			return -ENOENT;
    cf62:	f06f 0001 	mvn.w	r0, #1
}
    cf66:	b00b      	add	sp, #44	; 0x2c
    cf68:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    cf6a:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    cf6c:	9b05      	ldr	r3, [sp, #20]
    cf6e:	6818      	ldr	r0, [r3, #0]
    cf70:	2300      	movs	r3, #0
    cf72:	f88d 3010 	strb.w	r3, [sp, #16]
    cf76:	a904      	add	r1, sp, #16
    cf78:	f642 0303 	movw	r3, #10243	; 0x2803
    cf7c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cf80:	f019 ff44 	bl	26e0c <bt_uuid_cmp>
    cf84:	b970      	cbnz	r0, cfa4 <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    cf86:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    cf88:	68c3      	ldr	r3, [r0, #12]
    cf8a:	799b      	ldrb	r3, [r3, #6]
    cf8c:	069b      	lsls	r3, r3, #26
    cf8e:	d405      	bmi.n	cf9c <bt_gatt_indicate+0x80>
			return -EINVAL;
    cf90:	f06f 0015 	mvn.w	r0, #21
    cf94:	e7e7      	b.n	cf66 <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    cf96:	2800      	cmp	r0, #0
    cf98:	d1e8      	bne.n	cf6c <bt_gatt_indicate+0x50>
    cf9a:	e7e2      	b.n	cf62 <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    cf9c:	f01b fd4d 	bl	28a3a <bt_gatt_attr_value_handle>
    cfa0:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    cfa4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    cfa8:	b13c      	cbz	r4, cfba <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    cfaa:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    cfac:	4601      	mov	r1, r0
		params->_ref = 1;
    cfae:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    cfb0:	462a      	mov	r2, r5
    cfb2:	4620      	mov	r0, r4
    cfb4:	f7ff ff46 	bl	ce44 <gatt_indicate>
    cfb8:	e7d5      	b.n	cf66 <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    cfba:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    cfbe:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    cfc0:	2302      	movs	r3, #2
    cfc2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cfc6:	f642 1302 	movw	r3, #10498	; 0x2902
    cfca:	f8ad 3012 	strh.w	r3, [sp, #18]
    cfce:	ab05      	add	r3, sp, #20
    cfd0:	9302      	str	r3, [sp, #8]
    cfd2:	4b0d      	ldr	r3, [pc, #52]	; (d008 <bt_gatt_indicate+0xec>)
    cfd4:	9301      	str	r3, [sp, #4]
    cfd6:	2301      	movs	r3, #1
    cfd8:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    cfda:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cfdc:	4623      	mov	r3, r4
    cfde:	aa04      	add	r2, sp, #16
    cfe0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    cfe4:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    cfe6:	f88d 4010 	strb.w	r4, [sp, #16]
    cfea:	f7ff fe83 	bl	ccf4 <bt_gatt_foreach_attr_type>
	return data.err;
    cfee:	9807      	ldr	r0, [sp, #28]
    cff0:	e7b9      	b.n	cf66 <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    cff2:	f06f 000a 	mvn.w	r0, #10
    cff6:	e7b6      	b.n	cf66 <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    cff8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    cffc:	e7b3      	b.n	cf66 <bt_gatt_indicate+0x4a>
    cffe:	bf00      	nop
    d000:	200000cc 	.word	0x200000cc
    d004:	000283e5 	.word	0x000283e5
    d008:	0000d121 	.word	0x0000d121

0000d00c <sc_process>:
{
    d00c:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    d00e:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    d012:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    d016:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    d01a:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    d01e:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    d020:	f1a0 0120 	sub.w	r1, r0, #32
    d024:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d028:	f3bf 8f5b 	dmb	ish
    d02c:	e854 2f00 	ldrex	r2, [r4]
    d030:	f022 0201 	bic.w	r2, r2, #1
    d034:	e844 2000 	strex	r0, r2, [r4]
    d038:	2800      	cmp	r0, #0
    d03a:	d1f7      	bne.n	d02c <sc_process+0x20>
    d03c:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    d040:	4a0c      	ldr	r2, [pc, #48]	; (d074 <sc_process+0x68>)
    d042:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    d046:	4a0c      	ldr	r2, [pc, #48]	; (d078 <sc_process+0x6c>)
    d048:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    d04c:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    d04e:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    d050:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    d054:	2204      	movs	r2, #4
	sc->start = 0U;
    d056:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    d05a:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    d05e:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    d062:	f7ff ff5b 	bl	cf1c <bt_gatt_indicate>
    d066:	b918      	cbnz	r0, d070 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    d068:	2101      	movs	r1, #1
    d06a:	4620      	mov	r0, r4
    d06c:	f01b fc5a 	bl	28924 <atomic_set_bit>
}
    d070:	b002      	add	sp, #8
    d072:	bd10      	pop	{r4, pc}
    d074:	0002bdfc 	.word	0x0002bdfc
    d078:	0000cadd 	.word	0x0000cadd

0000d07c <gatt_notify>:
{
    d07c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d080:	4614      	mov	r4, r2
    d082:	b089      	sub	sp, #36	; 0x24
    d084:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    d086:	2214      	movs	r2, #20
    d088:	6861      	ldr	r1, [r4, #4]
{
    d08a:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    d08c:	f01b fd29 	bl	28ae2 <bt_gatt_check_perm>
    d090:	b178      	cbz	r0, d0b2 <gatt_notify+0x36>
		BT_WARN("Link is not encrypted");
    d092:	4b20      	ldr	r3, [pc, #128]	; (d114 <gatt_notify+0x98>)
    d094:	4820      	ldr	r0, [pc, #128]	; (d118 <gatt_notify+0x9c>)
    d096:	9306      	str	r3, [sp, #24]
    d098:	aa05      	add	r2, sp, #20
    d09a:	2302      	movs	r3, #2
    d09c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d0a0:	9301      	str	r3, [sp, #4]
    d0a2:	9305      	str	r3, [sp, #20]
    d0a4:	f01b fbdb 	bl	2885e <z_log_msg2_static_create.constprop.0>
		return -EPERM;
    d0a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    d0ac:	b009      	add	sp, #36	; 0x24
    d0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
    d0b2:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d0b4:	211b      	movs	r1, #27
    d0b6:	3202      	adds	r2, #2
    d0b8:	4638      	mov	r0, r7
    d0ba:	f7fe ffa3 	bl	c004 <bt_att_create_pdu>
	if (!buf) {
    d0be:	4605      	mov	r5, r0
    d0c0:	b968      	cbnz	r0, d0de <gatt_notify+0x62>
		BT_WARN("No buffer available to send notification");
    d0c2:	4b16      	ldr	r3, [pc, #88]	; (d11c <gatt_notify+0xa0>)
    d0c4:	4814      	ldr	r0, [pc, #80]	; (d118 <gatt_notify+0x9c>)
    d0c6:	9306      	str	r3, [sp, #24]
    d0c8:	aa05      	add	r2, sp, #20
    d0ca:	2302      	movs	r3, #2
    d0cc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d0d0:	9301      	str	r3, [sp, #4]
    d0d2:	9305      	str	r3, [sp, #20]
    d0d4:	f01b fbc3 	bl	2885e <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
    d0d8:	f06f 000b 	mvn.w	r0, #11
    d0dc:	e7e6      	b.n	d0ac <gatt_notify+0x30>
    d0de:	f100 0908 	add.w	r9, r0, #8
    d0e2:	2102      	movs	r1, #2
    d0e4:	4648      	mov	r0, r9
    d0e6:	f01c fc30 	bl	2994a <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d0ea:	4606      	mov	r6, r0
    d0ec:	89a1      	ldrh	r1, [r4, #12]
    d0ee:	f826 8b02 	strh.w	r8, [r6], #2
    d0f2:	4648      	mov	r0, r9
    d0f4:	f01c fc29 	bl	2994a <net_buf_simple_add>
    d0f8:	89a2      	ldrh	r2, [r4, #12]
    d0fa:	68a1      	ldr	r1, [r4, #8]
    d0fc:	4630      	mov	r0, r6
    d0fe:	f01d fcac 	bl	2aa5a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d102:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d106:	4629      	mov	r1, r5
    d108:	4638      	mov	r0, r7
}
    d10a:	b009      	add	sp, #36	; 0x24
    d10c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d110:	f01b b8d1 	b.w	282b6 <bt_att_send>
    d114:	0002ec4b 	.word	0x0002ec4b
    d118:	0002b6b4 	.word	0x0002b6b4
    d11c:	0002ec88 	.word	0x0002ec88

0000d120 <notify_cb>:
{
    d120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d124:	4b43      	ldr	r3, [pc, #268]	; (d234 <notify_cb+0x114>)
{
    d126:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d128:	6882      	ldr	r2, [r0, #8]
    d12a:	429a      	cmp	r2, r3
{
    d12c:	b08b      	sub	sp, #44	; 0x2c
    d12e:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d130:	d004      	beq.n	d13c <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
    d132:	2701      	movs	r7, #1
}
    d134:	4638      	mov	r0, r7
    d136:	b00b      	add	sp, #44	; 0x2c
    d138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    d13c:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d140:	4b3d      	ldr	r3, [pc, #244]	; (d238 <notify_cb+0x118>)
    d142:	4598      	cmp	r8, r3
    d144:	d01c      	beq.n	d180 <notify_cb+0x60>
    d146:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
    d14a:	f8df b0f0 	ldr.w	fp, [pc, #240]	; d23c <notify_cb+0x11c>
    d14e:	9301      	str	r3, [sp, #4]
    d150:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
    d154:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    d158:	89a3      	ldrh	r3, [r4, #12]
    d15a:	429a      	cmp	r2, r3
    d15c:	d10b      	bne.n	d176 <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d15e:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d162:	4629      	mov	r1, r5
    d164:	f7fd feb0 	bl	aec8 <bt_conn_lookup_addr_le>
		if (!conn) {
    d168:	4681      	mov	r9, r0
    d16a:	b120      	cbz	r0, d176 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    d16c:	7b42      	ldrb	r2, [r0, #13]
    d16e:	2a07      	cmp	r2, #7
    d170:	d02a      	beq.n	d1c8 <notify_cb+0xa8>
			bt_conn_unref(conn);
    d172:	f01a faaa 	bl	276ca <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d176:	9b01      	ldr	r3, [sp, #4]
    d178:	350a      	adds	r5, #10
    d17a:	429d      	cmp	r5, r3
    d17c:	d0d9      	beq.n	d132 <notify_cb+0x12>
    d17e:	e7e9      	b.n	d154 <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d180:	2700      	movs	r7, #0
    d182:	4d2f      	ldr	r5, [pc, #188]	; (d240 <notify_cb+0x120>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d184:	46b9      	mov	r9, r7
    d186:	a904      	add	r1, sp, #16
    d188:	4628      	mov	r0, r5
    d18a:	f8cd 9010 	str.w	r9, [sp, #16]
    d18e:	f8cd 9013 	str.w	r9, [sp, #19]
    d192:	f01b f989 	bl	284a8 <bt_addr_le_cmp>
    d196:	b178      	cbz	r0, d1b8 <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d198:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d19c:	2207      	movs	r2, #7
    d19e:	4629      	mov	r1, r5
    d1a0:	f7fd fed4 	bl	af4c <bt_conn_lookup_state_le>
			if (!conn) {
    d1a4:	b968      	cbnz	r0, d1c2 <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
    d1a6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    d1a8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d1ac:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    d1ae:	4629      	mov	r1, r5
    d1b0:	8853      	ldrh	r3, [r2, #2]
    d1b2:	8812      	ldrh	r2, [r2, #0]
    d1b4:	f7ff fc02 	bl	c9bc <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d1b8:	350c      	adds	r5, #12
    d1ba:	2f00      	cmp	r7, #0
    d1bc:	d1c3      	bne.n	d146 <notify_cb+0x26>
    d1be:	2701      	movs	r7, #1
    d1c0:	e7e1      	b.n	d186 <notify_cb+0x66>
			bt_conn_unref(conn);
    d1c2:	f01a fa82 	bl	276ca <bt_conn_unref>
    d1c6:	e7f7      	b.n	d1b8 <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d1c8:	f8d8 2020 	ldr.w	r2, [r8, #32]
    d1cc:	b122      	cbz	r2, d1d8 <notify_cb+0xb8>
    d1ce:	4631      	mov	r1, r6
    d1d0:	4790      	blx	r2
    d1d2:	b908      	cbnz	r0, d1d8 <notify_cb+0xb8>
			bt_conn_unref(conn);
    d1d4:	4648      	mov	r0, r9
    d1d6:	e7cc      	b.n	d172 <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
    d1d8:	2214      	movs	r2, #20
    d1da:	4631      	mov	r1, r6
    d1dc:	4648      	mov	r0, r9
    d1de:	f01b fc80 	bl	28ae2 <bt_gatt_check_perm>
    d1e2:	4607      	mov	r7, r0
    d1e4:	b158      	cbz	r0, d1fe <notify_cb+0xde>
			BT_WARN("Link is not encrypted");
    d1e6:	4b17      	ldr	r3, [pc, #92]	; (d244 <notify_cb+0x124>)
    d1e8:	9308      	str	r3, [sp, #32]
    d1ea:	aa07      	add	r2, sp, #28
    d1ec:	2302      	movs	r3, #2
    d1ee:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d1f2:	4658      	mov	r0, fp
    d1f4:	9303      	str	r3, [sp, #12]
    d1f6:	9307      	str	r3, [sp, #28]
    d1f8:	f01b fb31 	bl	2885e <z_log_msg2_static_create.constprop.0>
			continue;
    d1fc:	e7bb      	b.n	d176 <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d1fe:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    d200:	88a1      	ldrh	r1, [r4, #4]
    d202:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    d204:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
    d206:	4648      	mov	r0, r9
		if (data->type == BT_GATT_CCC_INDICATE) {
    d208:	d110      	bne.n	d22c <notify_cb+0x10c>
			err = gatt_indicate(conn, data->handle,
    d20a:	f7ff fe1b 	bl	ce44 <gatt_indicate>
			if (err == 0) {
    d20e:	4682      	mov	sl, r0
    d210:	b918      	cbnz	r0, d21a <notify_cb+0xfa>
				data->ind_params->_ref++;
    d212:	6920      	ldr	r0, [r4, #16]
    d214:	7d81      	ldrb	r1, [r0, #22]
    d216:	3101      	adds	r1, #1
    d218:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
    d21a:	4648      	mov	r0, r9
    d21c:	f01a fa55 	bl	276ca <bt_conn_unref>
		if (err < 0) {
    d220:	f1ba 0f00 	cmp.w	sl, #0
    d224:	db86      	blt.n	d134 <notify_cb+0x14>
		data->err = 0;
    d226:	2300      	movs	r3, #0
    d228:	60a3      	str	r3, [r4, #8]
    d22a:	e7a4      	b.n	d176 <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d22c:	f7ff ff26 	bl	d07c <gatt_notify>
    d230:	4682      	mov	sl, r0
    d232:	e7f2      	b.n	d21a <notify_cb+0xfa>
    d234:	0000c8f1 	.word	0x0000c8f1
    d238:	20000264 	.word	0x20000264
    d23c:	0002b6b4 	.word	0x0002b6b4
    d240:	200033eb 	.word	0x200033eb
    d244:	0002ec4b 	.word	0x0002ec4b

0000d248 <update_ccc>:
{
    d248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d24c:	4b3f      	ldr	r3, [pc, #252]	; (d34c <update_ccc+0x104>)
{
    d24e:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d250:	6882      	ldr	r2, [r0, #8]
    d252:	429a      	cmp	r2, r3
{
    d254:	b089      	sub	sp, #36	; 0x24
    d256:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d258:	d173      	bne.n	d342 <update_ccc+0xfa>
	ccc = attr->user_data;
    d25a:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    d25e:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    d260:	f8df b0ec 	ldr.w	fp, [pc, #236]	; d350 <update_ccc+0x108>
    d264:	f108 0601 	add.w	r6, r8, #1
    d268:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
    d26c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
    d270:	b1cb      	cbz	r3, d2a6 <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d272:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    d276:	4632      	mov	r2, r6
    d278:	4620      	mov	r0, r4
    d27a:	f01a face 	bl	2781a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    d27e:	b190      	cbz	r0, d2a6 <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    d280:	222a      	movs	r2, #42	; 0x2a
    d282:	4629      	mov	r1, r5
    d284:	4620      	mov	r0, r4
    d286:	f01b fc2c 	bl	28ae2 <bt_gatt_check_perm>
		if (err) {
    d28a:	b308      	cbz	r0, d2d0 <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    d28c:	2803      	cmp	r0, #3
    d28e:	d10e      	bne.n	d2ae <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
    d290:	4b30      	ldr	r3, [pc, #192]	; (d354 <update_ccc+0x10c>)
    d292:	9001      	str	r0, [sp, #4]
    d294:	9005      	str	r0, [sp, #20]
    d296:	aa05      	add	r2, sp, #20
    d298:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    d29c:	4658      	mov	r0, fp
    d29e:	e9cd 3506 	strd	r3, r5, [sp, #24]
    d2a2:	f01b fadc 	bl	2885e <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d2a6:	360a      	adds	r6, #10
    d2a8:	45b1      	cmp	r9, r6
    d2aa:	d04a      	beq.n	d342 <update_ccc+0xfa>
    d2ac:	e7de      	b.n	d26c <update_ccc+0x24>
				sec = BT_SECURITY_L3;
    d2ae:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    d2b0:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
    d2b2:	bf14      	ite	ne
    d2b4:	f04f 0a02 	movne.w	sl, #2
    d2b8:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
    d2bc:	f01a faab 	bl	27816 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    d2c0:	4582      	cmp	sl, r0
    d2c2:	d905      	bls.n	d2d0 <update_ccc+0x88>
				if (data->sec < sec) {
    d2c4:	793a      	ldrb	r2, [r7, #4]
    d2c6:	4552      	cmp	r2, sl
    d2c8:	d2ed      	bcs.n	d2a6 <update_ccc+0x5e>
					data->sec = sec;
    d2ca:	f887 a004 	strb.w	sl, [r7, #4]
    d2ce:	e7ea      	b.n	d2a6 <update_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
    d2d0:	4641      	mov	r1, r8
    d2d2:	4628      	mov	r0, r5
    d2d4:	f01b f865 	bl	283a2 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    d2d8:	4b1f      	ldr	r3, [pc, #124]	; (d358 <update_ccc+0x110>)
    d2da:	4598      	cmp	r8, r3
    d2dc:	d131      	bne.n	d342 <update_ccc+0xfa>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d2de:	7a20      	ldrb	r0, [r4, #8]
    d2e0:	f104 0188 	add.w	r1, r4, #136	; 0x88
    d2e4:	f7ff faa4 	bl	c830 <find_sc_cfg>
	if (!cfg) {
    d2e8:	b358      	cbz	r0, d342 <update_ccc+0xfa>
	if (!(cfg->data.start || cfg->data.end)) {
    d2ea:	8902      	ldrh	r2, [r0, #8]
    d2ec:	8943      	ldrh	r3, [r0, #10]
    d2ee:	ea53 0102 	orrs.w	r1, r3, r2
    d2f2:	d026      	beq.n	d342 <update_ccc+0xfa>
	index = bt_conn_index(conn);
    d2f4:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    d2f6:	f8ad 2000 	strh.w	r2, [sp]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    d2fa:	f8ad 3002 	strh.w	r3, [sp, #2]
	index = bt_conn_index(conn);
    d2fe:	f7fd fcbf 	bl	ac80 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d302:	4916      	ldr	r1, [pc, #88]	; (d35c <update_ccc+0x114>)
    d304:	4a16      	ldr	r2, [pc, #88]	; (d360 <update_ccc+0x118>)
    d306:	2318      	movs	r3, #24
    d308:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d30c:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    d30e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    d310:	4a14      	ldr	r2, [pc, #80]	; (d364 <update_ccc+0x11c>)
    d312:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d314:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
    d318:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d31a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
    d31e:	f8c3 d010 	str.w	sp, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    d322:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    d324:	4620      	mov	r0, r4
    d326:	f7ff fdf9 	bl	cf1c <bt_gatt_indicate>
    d32a:	b150      	cbz	r0, d342 <update_ccc+0xfa>
		BT_ERR("SC restore indication failed");
    d32c:	4b0e      	ldr	r3, [pc, #56]	; (d368 <update_ccc+0x120>)
    d32e:	9306      	str	r3, [sp, #24]
    d330:	4807      	ldr	r0, [pc, #28]	; (d350 <update_ccc+0x108>)
    d332:	2302      	movs	r3, #2
    d334:	aa05      	add	r2, sp, #20
    d336:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d33a:	9301      	str	r3, [sp, #4]
    d33c:	9305      	str	r3, [sp, #20]
    d33e:	f01b fa8e 	bl	2885e <z_log_msg2_static_create.constprop.0>
}
    d342:	2001      	movs	r0, #1
    d344:	b009      	add	sp, #36	; 0x24
    d346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d34a:	bf00      	nop
    d34c:	0000c8f1 	.word	0x0000c8f1
    d350:	0002b6b4 	.word	0x0002b6b4
    d354:	0002ecb1 	.word	0x0002ecb1
    d358:	20000264 	.word	0x20000264
    d35c:	20001f9c 	.word	0x20001f9c
    d360:	0002bdfc 	.word	0x0002bdfc
    d364:	00028941 	.word	0x00028941
    d368:	0002ecc5 	.word	0x0002ecc5

0000d36c <bt_gatt_discover>:
{
    d36c:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    d36e:	7b43      	ldrb	r3, [r0, #13]
    d370:	2b07      	cmp	r3, #7
{
    d372:	b08c      	sub	sp, #48	; 0x30
    d374:	4605      	mov	r5, r0
    d376:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    d378:	f040 80aa 	bne.w	d4d0 <bt_gatt_discover+0x164>
	switch (params->type) {
    d37c:	7c0b      	ldrb	r3, [r1, #16]
    d37e:	2b06      	cmp	r3, #6
    d380:	f200 80a4 	bhi.w	d4cc <bt_gatt_discover+0x160>
    d384:	e8df f003 	tbb	[pc, r3]
    d388:	61610404 	.word	0x61610404
    d38c:	9b69      	.short	0x9b69
    d38e:	2d          	.byte	0x2d
    d38f:	00          	.byte	0x00
		if (params->uuid) {
    d390:	680b      	ldr	r3, [r1, #0]
    d392:	b1f3      	cbz	r3, d3d2 <bt_gatt_discover+0x66>
	switch (params->uuid->type) {
    d394:	781b      	ldrb	r3, [r3, #0]
    d396:	b173      	cbz	r3, d3b6 <bt_gatt_discover+0x4a>
    d398:	2b02      	cmp	r3, #2
    d39a:	d018      	beq.n	d3ce <bt_gatt_discover+0x62>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    d39c:	4a4e      	ldr	r2, [pc, #312]	; (d4d8 <bt_gatt_discover+0x16c>)
		BT_ERR("Invalid discovery type: %u", params->type);
    d39e:	484f      	ldr	r0, [pc, #316]	; (d4dc <bt_gatt_discover+0x170>)
	switch (params->type) {
    d3a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		BT_ERR("Invalid discovery type: %u", params->type);
    d3a4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d3a8:	2303      	movs	r3, #3
    d3aa:	aa09      	add	r2, sp, #36	; 0x24
    d3ac:	9305      	str	r3, [sp, #20]
    d3ae:	9309      	str	r3, [sp, #36]	; 0x24
    d3b0:	f01b fa55 	bl	2885e <z_log_msg2_static_create.constprop.0>
    d3b4:	e017      	b.n	d3e6 <bt_gatt_discover+0x7a>
		len += BT_UUID_SIZE_16;
    d3b6:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
    d3b8:	9301      	str	r3, [sp, #4]
    d3ba:	2306      	movs	r3, #6
    d3bc:	9300      	str	r3, [sp, #0]
    d3be:	4948      	ldr	r1, [pc, #288]	; (d4e0 <bt_gatt_discover+0x174>)
    d3c0:	4b48      	ldr	r3, [pc, #288]	; (d4e4 <bt_gatt_discover+0x178>)
    d3c2:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    d3c4:	4628      	mov	r0, r5
    d3c6:	f01b f89e 	bl	28506 <gatt_req_send>
}
    d3ca:	b00c      	add	sp, #48	; 0x30
    d3cc:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
    d3ce:	2316      	movs	r3, #22
    d3d0:	e7f2      	b.n	d3b8 <bt_gatt_discover+0x4c>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
    d3d2:	2310      	movs	r3, #16
    d3d4:	2104      	movs	r1, #4
    d3d6:	e9cd 3100 	strd	r3, r1, [sp]
    d3da:	4622      	mov	r2, r4
    d3dc:	4b42      	ldr	r3, [pc, #264]	; (d4e8 <bt_gatt_discover+0x17c>)
    d3de:	4943      	ldr	r1, [pc, #268]	; (d4ec <bt_gatt_discover+0x180>)
    d3e0:	e7f0      	b.n	d3c4 <bt_gatt_discover+0x58>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    d3e2:	6808      	ldr	r0, [r1, #0]
    d3e4:	b910      	cbnz	r0, d3ec <bt_gatt_discover+0x80>
	return -EINVAL;
    d3e6:	f06f 0015 	mvn.w	r0, #21
    d3ea:	e7ee      	b.n	d3ca <bt_gatt_discover+0x5e>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    d3ec:	7806      	ldrb	r6, [r0, #0]
    d3ee:	2e00      	cmp	r6, #0
    d3f0:	d1f9      	bne.n	d3e6 <bt_gatt_discover+0x7a>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    d3f2:	f44f 5324 	mov.w	r3, #10496	; 0x2900
    d3f6:	a903      	add	r1, sp, #12
    d3f8:	f88d 600c 	strb.w	r6, [sp, #12]
    d3fc:	f8ad 300e 	strh.w	r3, [sp, #14]
    d400:	f019 fd04 	bl	26e0c <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    d404:	b308      	cbz	r0, d44a <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    d406:	f642 1302 	movw	r3, #10498	; 0x2902
    d40a:	6820      	ldr	r0, [r4, #0]
    d40c:	f88d 6010 	strb.w	r6, [sp, #16]
    d410:	a904      	add	r1, sp, #16
    d412:	f8ad 3012 	strh.w	r3, [sp, #18]
    d416:	f019 fcf9 	bl	26e0c <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    d41a:	b1b0      	cbz	r0, d44a <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    d41c:	f642 1303 	movw	r3, #10499	; 0x2903
    d420:	6820      	ldr	r0, [r4, #0]
    d422:	f88d 6014 	strb.w	r6, [sp, #20]
    d426:	a905      	add	r1, sp, #20
    d428:	f8ad 3016 	strh.w	r3, [sp, #22]
    d42c:	f019 fcee 	bl	26e0c <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    d430:	b158      	cbz	r0, d44a <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
    d432:	f642 1304 	movw	r3, #10500	; 0x2904
    d436:	6820      	ldr	r0, [r4, #0]
    d438:	f88d 6018 	strb.w	r6, [sp, #24]
    d43c:	a906      	add	r1, sp, #24
    d43e:	f8ad 301a 	strh.w	r3, [sp, #26]
    d442:	f019 fce3 	bl	26e0c <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    d446:	2800      	cmp	r0, #0
    d448:	d1cd      	bne.n	d3e6 <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
    d44a:	2308      	movs	r3, #8
    d44c:	2204      	movs	r2, #4
    d44e:	e9cd 3200 	strd	r3, r2, [sp]
    d452:	4927      	ldr	r1, [pc, #156]	; (d4f0 <bt_gatt_discover+0x184>)
    d454:	4b27      	ldr	r3, [pc, #156]	; (d4f4 <bt_gatt_discover+0x188>)
    d456:	4622      	mov	r2, r4
    d458:	e7b4      	b.n	d3c4 <bt_gatt_discover+0x58>
		if (params->uuid &&
    d45a:	6808      	ldr	r0, [r1, #0]
    d45c:	b378      	cbz	r0, d4be <bt_gatt_discover+0x152>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d45e:	2600      	movs	r6, #0
    d460:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d464:	a903      	add	r1, sp, #12
    d466:	f88d 600c 	strb.w	r6, [sp, #12]
    d46a:	f8ad 300e 	strh.w	r3, [sp, #14]
    d46e:	f019 fccd 	bl	26e0c <bt_uuid_cmp>
		if (params->uuid &&
    d472:	2800      	cmp	r0, #0
    d474:	d0b7      	beq.n	d3e6 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d476:	f642 0301 	movw	r3, #10241	; 0x2801
    d47a:	6820      	ldr	r0, [r4, #0]
    d47c:	f88d 6010 	strb.w	r6, [sp, #16]
    d480:	a904      	add	r1, sp, #16
    d482:	f8ad 3012 	strh.w	r3, [sp, #18]
    d486:	f019 fcc1 	bl	26e0c <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    d48a:	2800      	cmp	r0, #0
    d48c:	d0ab      	beq.n	d3e6 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d48e:	f642 0302 	movw	r3, #10242	; 0x2802
    d492:	6820      	ldr	r0, [r4, #0]
    d494:	f88d 6014 	strb.w	r6, [sp, #20]
    d498:	a905      	add	r1, sp, #20
    d49a:	f8ad 3016 	strh.w	r3, [sp, #22]
    d49e:	f019 fcb5 	bl	26e0c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    d4a2:	2800      	cmp	r0, #0
    d4a4:	d09f      	beq.n	d3e6 <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    d4a6:	f642 0303 	movw	r3, #10243	; 0x2803
    d4aa:	6820      	ldr	r0, [r4, #0]
    d4ac:	f88d 6018 	strb.w	r6, [sp, #24]
    d4b0:	a906      	add	r1, sp, #24
    d4b2:	f8ad 301a 	strh.w	r3, [sp, #26]
    d4b6:	f019 fca9 	bl	26e0c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d093      	beq.n	d3e6 <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    d4be:	2304      	movs	r3, #4
    d4c0:	e9cd 3300 	strd	r3, r3, [sp]
    d4c4:	490c      	ldr	r1, [pc, #48]	; (d4f8 <bt_gatt_discover+0x18c>)
    d4c6:	4b0d      	ldr	r3, [pc, #52]	; (d4fc <bt_gatt_discover+0x190>)
    d4c8:	4622      	mov	r2, r4
    d4ca:	e77b      	b.n	d3c4 <bt_gatt_discover+0x58>
		BT_ERR("Invalid discovery type: %u", params->type);
    d4cc:	4a0c      	ldr	r2, [pc, #48]	; (d500 <bt_gatt_discover+0x194>)
    d4ce:	e766      	b.n	d39e <bt_gatt_discover+0x32>
		return -ENOTCONN;
    d4d0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    d4d4:	e779      	b.n	d3ca <bt_gatt_discover+0x5e>
    d4d6:	bf00      	nop
    d4d8:	0002ece2 	.word	0x0002ece2
    d4dc:	0002b6b4 	.word	0x0002b6b4
    d4e0:	00028b73 	.word	0x00028b73
    d4e4:	000288bb 	.word	0x000288bb
    d4e8:	000285cb 	.word	0x000285cb
    d4ec:	0000d505 	.word	0x0000d505
    d4f0:	0000d62d 	.word	0x0000d62d
    d4f4:	000285fb 	.word	0x000285fb
    d4f8:	0000d9d1 	.word	0x0000d9d1
    d4fc:	0002858f 	.word	0x0002858f
    d500:	0002ecf7 	.word	0x0002ecf7

0000d504 <gatt_read_group_rsp>:
{
    d504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d508:	b08e      	sub	sp, #56	; 0x38
    d50a:	4607      	mov	r7, r0
    d50c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    d510:	4616      	mov	r6, r2
	if (err) {
    d512:	b139      	cbz	r1, d524 <gatt_read_group_rsp+0x20>
		params->func(conn, NULL, params);
    d514:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d518:	4642      	mov	r2, r8
    d51a:	2100      	movs	r1, #0
}
    d51c:	b00e      	add	sp, #56	; 0x38
    d51e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		params->func(conn, NULL, params);
    d522:	4718      	bx	r3
	switch (rsp->len) {
    d524:	7812      	ldrb	r2, [r2, #0]
    d526:	2a06      	cmp	r2, #6
    d528:	d016      	beq.n	d558 <gatt_read_group_rsp+0x54>
    d52a:	2a14      	cmp	r2, #20
    d52c:	d02b      	beq.n	d586 <gatt_read_group_rsp+0x82>
		BT_ERR("Invalid data len %u", rsp->len);
    d52e:	4b3d      	ldr	r3, [pc, #244]	; (d624 <gatt_read_group_rsp+0x120>)
    d530:	483d      	ldr	r0, [pc, #244]	; (d628 <gatt_read_group_rsp+0x124>)
	switch (rsp->len) {
    d532:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
		BT_ERR("Invalid data len %u", rsp->len);
    d536:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d53a:	2303      	movs	r3, #3
    d53c:	aa0b      	add	r2, sp, #44	; 0x2c
    d53e:	9303      	str	r3, [sp, #12]
    d540:	930b      	str	r3, [sp, #44]	; 0x2c
    d542:	f01b f98c 	bl	2885e <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    d546:	f8d8 3004 	ldr.w	r3, [r8, #4]
    d54a:	4642      	mov	r2, r8
    d54c:	2100      	movs	r1, #0
    d54e:	4638      	mov	r0, r7
    d550:	4798      	blx	r3
}
    d552:	b00e      	add	sp, #56	; 0x38
    d554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u.uuid.type = BT_UUID_TYPE_16;
    d558:	f88d 100c 	strb.w	r1, [sp, #12]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d55c:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
    d55e:	2500      	movs	r5, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d560:	b29c      	uxth	r4, r3
    d562:	f106 0901 	add.w	r9, r6, #1
		struct bt_gatt_attr attr = {};
    d566:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
    d568:	7833      	ldrb	r3, [r6, #0]
    d56a:	42a3      	cmp	r3, r4
    d56c:	d90f      	bls.n	d58e <gatt_read_group_rsp+0x8a>
	if (length == 0U && end_handle) {
    d56e:	2c00      	cmp	r4, #0
    d570:	d1e9      	bne.n	d546 <gatt_read_group_rsp+0x42>
    d572:	2d00      	cmp	r5, #0
    d574:	d0e7      	beq.n	d546 <gatt_read_group_rsp+0x42>
	gatt_discover_next(conn, handle, params);
    d576:	4642      	mov	r2, r8
    d578:	4629      	mov	r1, r5
    d57a:	4638      	mov	r0, r7
}
    d57c:	b00e      	add	sp, #56	; 0x38
    d57e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, handle, params);
    d582:	f01b bad9 	b.w	28b38 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    d586:	2202      	movs	r2, #2
    d588:	f88d 200c 	strb.w	r2, [sp, #12]
		break;
    d58c:	e7e6      	b.n	d55c <gatt_read_group_rsp+0x58>
		struct bt_gatt_attr attr = {};
    d58e:	2214      	movs	r2, #20
    d590:	2100      	movs	r1, #0
    d592:	a808      	add	r0, sp, #32
    d594:	f01d fa82 	bl	2aa9c <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    d598:	f8b9 2000 	ldrh.w	r2, [r9]
    d59c:	b293      	uxth	r3, r2
		if (!start_handle) {
    d59e:	2b00      	cmp	r3, #0
    d5a0:	d0d1      	beq.n	d546 <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
    d5a2:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    d5a6:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
    d5a8:	2d00      	cmp	r5, #0
    d5aa:	d0cc      	beq.n	d546 <gatt_read_group_rsp+0x42>
    d5ac:	42ab      	cmp	r3, r5
    d5ae:	d8ca      	bhi.n	d546 <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
    d5b0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    d5b4:	b323      	cbz	r3, d600 <gatt_read_group_rsp+0xfc>
    d5b6:	2b02      	cmp	r3, #2
    d5b8:	d027      	beq.n	d60a <gatt_read_group_rsp+0x106>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    d5ba:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
    d5be:	f8ad 1008 	strh.w	r1, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    d5c2:	2b00      	cmp	r3, #0
    d5c4:	f642 0301 	movw	r3, #10241	; 0x2801
    d5c8:	bf08      	it	eq
    d5ca:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    d5ce:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = &u.uuid;
    d5d2:	ab03      	add	r3, sp, #12
    d5d4:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
    d5d6:	ab01      	add	r3, sp, #4
		attr.handle = start_handle;
    d5d8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
		attr.user_data = &value;
    d5dc:	930b      	str	r3, [sp, #44]	; 0x2c
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    d5de:	f88d a000 	strb.w	sl, [sp]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d5e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
		attr.uuid = &uuid_svc.uuid;
    d5e6:	f8cd d020 	str.w	sp, [sp, #32]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d5ea:	4642      	mov	r2, r8
    d5ec:	a908      	add	r1, sp, #32
    d5ee:	4638      	mov	r0, r7
    d5f0:	4798      	blx	r3
    d5f2:	2800      	cmp	r0, #0
    d5f4:	d0ad      	beq.n	d552 <gatt_read_group_rsp+0x4e>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d5f6:	7832      	ldrb	r2, [r6, #0]
    d5f8:	1aa4      	subs	r4, r4, r2
    d5fa:	b2a4      	uxth	r4, r4
    d5fc:	4491      	add	r9, r2
    d5fe:	e7b3      	b.n	d568 <gatt_read_group_rsp+0x64>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    d600:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    d604:	f8ad 300e 	strh.w	r3, [sp, #14]
			break;
    d608:	e7d7      	b.n	d5ba <gatt_read_group_rsp+0xb6>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    d60a:	f109 0304 	add.w	r3, r9, #4
    d60e:	f10d 000d 	add.w	r0, sp, #13
    d612:	f109 0c14 	add.w	ip, r9, #20
    d616:	f853 eb04 	ldr.w	lr, [r3], #4
    d61a:	f840 eb04 	str.w	lr, [r0], #4
    d61e:	4563      	cmp	r3, ip
    d620:	d1f9      	bne.n	d616 <gatt_read_group_rsp+0x112>
    d622:	e7ca      	b.n	d5ba <gatt_read_group_rsp+0xb6>
    d624:	0002ed12 	.word	0x0002ed12
    d628:	0002b6b4 	.word	0x0002b6b4

0000d62c <gatt_read_type_rsp>:
{
    d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d630:	b093      	sub	sp, #76	; 0x4c
    d632:	4680      	mov	r8, r0
    d634:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    d636:	4617      	mov	r7, r2
	if (err) {
    d638:	b131      	cbz	r1, d648 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
    d63a:	686b      	ldr	r3, [r5, #4]
    d63c:	462a      	mov	r2, r5
    d63e:	2100      	movs	r1, #0
}
    d640:	b013      	add	sp, #76	; 0x4c
    d642:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
    d646:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    d648:	7c2a      	ldrb	r2, [r5, #16]
    d64a:	2a02      	cmp	r2, #2
    d64c:	f040 8088 	bne.w	d760 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    d650:	7838      	ldrb	r0, [r7, #0]
    d652:	2806      	cmp	r0, #6
    d654:	d018      	beq.n	d688 <gatt_read_type_rsp+0x5c>
    d656:	2808      	cmp	r0, #8
    d658:	d119      	bne.n	d68e <gatt_read_type_rsp+0x62>
		u.uuid.type = BT_UUID_TYPE_16;
    d65a:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d65e:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    d660:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d662:	b2a4      	uxth	r4, r4
    d664:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
    d668:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d66c:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d66e:	783b      	ldrb	r3, [r7, #0]
    d670:	42a3      	cmp	r3, r4
    d672:	d91e      	bls.n	d6b2 <gatt_read_type_rsp+0x86>
	if (length == 0U && handle) {
    d674:	b9bc      	cbnz	r4, d6a6 <gatt_read_type_rsp+0x7a>
    d676:	b1b6      	cbz	r6, d6a6 <gatt_read_type_rsp+0x7a>
	gatt_discover_next(conn, handle, params);
    d678:	462a      	mov	r2, r5
    d67a:	4631      	mov	r1, r6
    d67c:	4640      	mov	r0, r8
}
    d67e:	b013      	add	sp, #76	; 0x4c
    d680:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    d684:	f01b ba58 	b.w	28b38 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    d688:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    d68c:	e7e7      	b.n	d65e <gatt_read_type_rsp+0x32>
		BT_ERR("Invalid data len %u", rsp->len);
    d68e:	4b9f      	ldr	r3, [pc, #636]	; (d90c <gatt_read_type_rsp+0x2e0>)
	switch (rsp->len) {
    d690:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    d694:	2303      	movs	r3, #3
    d696:	9307      	str	r3, [sp, #28]
    d698:	930f      	str	r3, [sp, #60]	; 0x3c
		BT_ERR("Invalid data len %u", rsp->len);
    d69a:	489d      	ldr	r0, [pc, #628]	; (d910 <gatt_read_type_rsp+0x2e4>)
    d69c:	aa0f      	add	r2, sp, #60	; 0x3c
    d69e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d6a2:	f01b f8dc 	bl	2885e <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    d6a6:	686b      	ldr	r3, [r5, #4]
    d6a8:	462a      	mov	r2, r5
    d6aa:	2100      	movs	r1, #0
    d6ac:	4640      	mov	r0, r8
    d6ae:	4798      	blx	r3
	if (!handle) {
    d6b0:	e03a      	b.n	d728 <gatt_read_type_rsp+0xfc>
		handle = sys_le16_to_cpu(data->handle);
    d6b2:	f8b9 3000 	ldrh.w	r3, [r9]
    d6b6:	b29e      	uxth	r6, r3
		if (!handle) {
    d6b8:	2e00      	cmp	r6, #0
    d6ba:	d0f4      	beq.n	d6a6 <gatt_read_type_rsp+0x7a>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    d6bc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    d6c0:	f8ad 2018 	strh.w	r2, [sp, #24]
    d6c4:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    d6c6:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    d6ca:	f8ad 201a 	strh.w	r2, [sp, #26]
    d6ce:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
    d6d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    d6d4:	b172      	cbz	r2, d6f4 <gatt_read_type_rsp+0xc8>
    d6d6:	2a02      	cmp	r2, #2
    d6d8:	d017      	beq.n	d70a <gatt_read_type_rsp+0xde>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d6da:	6829      	ldr	r1, [r5, #0]
    d6dc:	b339      	cbz	r1, d72e <gatt_read_type_rsp+0x102>
    d6de:	4650      	mov	r0, sl
    d6e0:	9303      	str	r3, [sp, #12]
    d6e2:	f019 fb93 	bl	26e0c <bt_uuid_cmp>
    d6e6:	9b03      	ldr	r3, [sp, #12]
    d6e8:	b308      	cbz	r0, d72e <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d6ea:	783a      	ldrb	r2, [r7, #0]
    d6ec:	1aa4      	subs	r4, r4, r2
    d6ee:	b2a4      	uxth	r4, r4
    d6f0:	4491      	add	r9, r2
    d6f2:	e7bc      	b.n	d66e <gatt_read_type_rsp+0x42>
			value.uuid = &u.uuid;
    d6f4:	f8cd a014 	str.w	sl, [sp, #20]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    d6f8:	f899 2006 	ldrb.w	r2, [r9, #6]
    d6fc:	f899 1007 	ldrb.w	r1, [r9, #7]
    d700:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d704:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
    d708:	e7e7      	b.n	d6da <gatt_read_type_rsp+0xae>
	return gatt_req_send(conn, read_included_uuid_cb, params,
    d70a:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
    d70c:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
    d70e:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
    d710:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
    d712:	4980      	ldr	r1, [pc, #512]	; (d914 <gatt_read_type_rsp+0x2e8>)
    d714:	9201      	str	r2, [sp, #4]
    d716:	9300      	str	r3, [sp, #0]
    d718:	462a      	mov	r2, r5
    d71a:	4b7f      	ldr	r3, [pc, #508]	; (d918 <gatt_read_type_rsp+0x2ec>)
    d71c:	4640      	mov	r0, r8
    d71e:	f01a fef2 	bl	28506 <gatt_req_send>
			return read_included_uuid(conn, params);
    d722:	b286      	uxth	r6, r0
	if (!handle) {
    d724:	2e00      	cmp	r6, #0
    d726:	d1a7      	bne.n	d678 <gatt_read_type_rsp+0x4c>
}
    d728:	b013      	add	sp, #76	; 0x4c
    d72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d72e:	f642 0202 	movw	r2, #10242	; 0x2802
    d732:	f8ad 2012 	strh.w	r2, [sp, #18]
    d736:	aa04      	add	r2, sp, #16
    d738:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
    d73c:	aa05      	add	r2, sp, #20
    d73e:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
    d740:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d744:	f88d b010 	strb.w	fp, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d748:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d74a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    d74e:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d752:	462a      	mov	r2, r5
    d754:	a90c      	add	r1, sp, #48	; 0x30
    d756:	4640      	mov	r0, r8
    d758:	4798      	blx	r3
    d75a:	2800      	cmp	r0, #0
    d75c:	d1c5      	bne.n	d6ea <gatt_read_type_rsp+0xbe>
    d75e:	e7e3      	b.n	d728 <gatt_read_type_rsp+0xfc>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
    d760:	2a03      	cmp	r2, #3
    d762:	d16c      	bne.n	d83e <gatt_read_type_rsp+0x212>
	switch (rsp->len) {
    d764:	7838      	ldrb	r0, [r7, #0]
    d766:	2807      	cmp	r0, #7
    d768:	d007      	beq.n	d77a <gatt_read_type_rsp+0x14e>
    d76a:	2815      	cmp	r0, #21
    d76c:	d02a      	beq.n	d7c4 <gatt_read_type_rsp+0x198>
		BT_ERR("Invalid data len %u", rsp->len);
    d76e:	4b67      	ldr	r3, [pc, #412]	; (d90c <gatt_read_type_rsp+0x2e0>)
    d770:	9207      	str	r2, [sp, #28]
	switch (rsp->len) {
    d772:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    d776:	920f      	str	r2, [sp, #60]	; 0x3c
    d778:	e78f      	b.n	d69a <gatt_read_type_rsp+0x6e>
		u.uuid.type = BT_UUID_TYPE_16;
    d77a:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d77e:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    d780:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    d782:	b2a4      	uxth	r4, r4
    d784:	f107 0901 	add.w	r9, r7, #1
    d788:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d78c:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d78e:	783b      	ldrb	r3, [r7, #0]
    d790:	42a3      	cmp	r3, r4
    d792:	f63f af6f 	bhi.w	d674 <gatt_read_type_rsp+0x48>
		handle = sys_le16_to_cpu(data->handle);
    d796:	f8b9 3000 	ldrh.w	r3, [r9]
    d79a:	b29e      	uxth	r6, r3
		if (!handle) {
    d79c:	2e00      	cmp	r6, #0
    d79e:	d082      	beq.n	d6a6 <gatt_read_type_rsp+0x7a>
		switch (u.uuid.type) {
    d7a0:	f89d 201c 	ldrb.w	r2, [sp, #28]
    d7a4:	b192      	cbz	r2, d7cc <gatt_read_type_rsp+0x1a0>
    d7a6:	2a02      	cmp	r2, #2
    d7a8:	d019      	beq.n	d7de <gatt_read_type_rsp+0x1b2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d7aa:	6829      	ldr	r1, [r5, #0]
    d7ac:	b321      	cbz	r1, d7f8 <gatt_read_type_rsp+0x1cc>
    d7ae:	4650      	mov	r0, sl
    d7b0:	9303      	str	r3, [sp, #12]
    d7b2:	f019 fb2b 	bl	26e0c <bt_uuid_cmp>
    d7b6:	9b03      	ldr	r3, [sp, #12]
    d7b8:	b1f0      	cbz	r0, d7f8 <gatt_read_type_rsp+0x1cc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d7ba:	783a      	ldrb	r2, [r7, #0]
    d7bc:	1aa4      	subs	r4, r4, r2
    d7be:	b2a4      	uxth	r4, r4
    d7c0:	4491      	add	r9, r2
    d7c2:	e7e4      	b.n	d78e <gatt_read_type_rsp+0x162>
		u.uuid.type = BT_UUID_TYPE_128;
    d7c4:	2202      	movs	r2, #2
    d7c6:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    d7ca:	e7d8      	b.n	d77e <gatt_read_type_rsp+0x152>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    d7cc:	f899 2005 	ldrb.w	r2, [r9, #5]
    d7d0:	f899 1006 	ldrb.w	r1, [r9, #6]
    d7d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d7d8:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
    d7dc:	e7e5      	b.n	d7aa <gatt_read_type_rsp+0x17e>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    d7de:	f109 0205 	add.w	r2, r9, #5
    d7e2:	f10d 011d 	add.w	r1, sp, #29
    d7e6:	f109 0015 	add.w	r0, r9, #21
    d7ea:	f852 cb04 	ldr.w	ip, [r2], #4
    d7ee:	f841 cb04 	str.w	ip, [r1], #4
    d7f2:	4282      	cmp	r2, r0
    d7f4:	d1f9      	bne.n	d7ea <gatt_read_type_rsp+0x1be>
    d7f6:	e7d8      	b.n	d7aa <gatt_read_type_rsp+0x17e>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d7f8:	f899 2002 	ldrb.w	r2, [r9, #2]
    d7fc:	f88d 201a 	strb.w	r2, [sp, #26]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d800:	f642 0203 	movw	r2, #10243	; 0x2803
    d804:	f8ad 2012 	strh.w	r2, [sp, #18]
    d808:	aa04      	add	r2, sp, #16
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d80a:	f8b9 1003 	ldrh.w	r1, [r9, #3]
    d80e:	f8ad 1018 	strh.w	r1, [sp, #24]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d812:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
    d816:	aa05      	add	r2, sp, #20
    d818:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
    d81a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    d81e:	f8cd a014 	str.w	sl, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d822:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d824:	f88d b010 	strb.w	fp, [sp, #16]
    d828:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    d82c:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d830:	462a      	mov	r2, r5
    d832:	a90c      	add	r1, sp, #48	; 0x30
    d834:	4640      	mov	r0, r8
    d836:	4798      	blx	r3
    d838:	2800      	cmp	r0, #0
    d83a:	d1be      	bne.n	d7ba <gatt_read_type_rsp+0x18e>
    d83c:	e774      	b.n	d728 <gatt_read_type_rsp+0xfc>
	if (params->uuid->type != BT_UUID_TYPE_16) {
    d83e:	682a      	ldr	r2, [r5, #0]
    d840:	7816      	ldrb	r6, [r2, #0]
    d842:	b976      	cbnz	r6, d862 <gatt_read_type_rsp+0x236>
	uuid_val = BT_UUID_16(params->uuid)->val;
    d844:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
    d846:	1e5c      	subs	r4, r3, #1
    d848:	b2a4      	uxth	r4, r4
    d84a:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
    d84e:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d852:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    d854:	783b      	ldrb	r3, [r7, #0]
    d856:	42a3      	cmp	r3, r4
    d858:	d908      	bls.n	d86c <gatt_read_type_rsp+0x240>
	if (length == 0U && handle) {
    d85a:	b914      	cbnz	r4, d862 <gatt_read_type_rsp+0x236>
    d85c:	2e00      	cmp	r6, #0
    d85e:	f47f af0b 	bne.w	d678 <gatt_read_type_rsp+0x4c>
	params->func(conn, NULL, params);
    d862:	686b      	ldr	r3, [r5, #4]
    d864:	462a      	mov	r2, r5
    d866:	2100      	movs	r1, #0
    d868:	4640      	mov	r0, r8
    d86a:	e6e9      	b.n	d640 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
    d86c:	f8b9 2000 	ldrh.w	r2, [r9]
    d870:	b296      	uxth	r6, r2
		if (!handle) {
    d872:	2e00      	cmp	r6, #0
    d874:	d0f5      	beq.n	d862 <gatt_read_type_rsp+0x236>
		switch (uuid_val) {
    d876:	f1bb 0f04 	cmp.w	fp, #4
    d87a:	d8f2      	bhi.n	d862 <gatt_read_type_rsp+0x236>
    d87c:	a301      	add	r3, pc, #4	; (adr r3, d884 <gatt_read_type_rsp+0x258>)
    d87e:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
    d882:	bf00      	nop
    d884:	0000d899 	.word	0x0000d899
    d888:	0000d863 	.word	0x0000d863
    d88c:	0000d899 	.word	0x0000d899
    d890:	0000d899 	.word	0x0000d899
    d894:	0000d8d1 	.word	0x0000d8d1
			value.scc.flags = sys_get_le16(data->value);
    d898:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    d89c:	f8ad 301c 	strh.w	r3, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d8a0:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
    d8a2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d8a6:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
    d8aa:	ab07      	add	r3, sp, #28
    d8ac:	930f      	str	r3, [sp, #60]	; 0x3c
    d8ae:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d8b2:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d8b4:	f88d a042 	strb.w	sl, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d8b8:	462a      	mov	r2, r5
    d8ba:	a90c      	add	r1, sp, #48	; 0x30
    d8bc:	4640      	mov	r0, r8
    d8be:	4798      	blx	r3
    d8c0:	2800      	cmp	r0, #0
    d8c2:	f43f af31 	beq.w	d728 <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    d8c6:	783a      	ldrb	r2, [r7, #0]
    d8c8:	1aa4      	subs	r4, r4, r2
    d8ca:	b2a4      	uxth	r4, r4
    d8cc:	4491      	add	r9, r2
    d8ce:	e7c1      	b.n	d854 <gatt_read_type_rsp+0x228>
			value.cpf.format = cpf->format;
    d8d0:	f899 3002 	ldrb.w	r3, [r9, #2]
    d8d4:	f88d 301c 	strb.w	r3, [sp, #28]
			value.cpf.exponent = cpf->exponent;
    d8d8:	f899 3003 	ldrb.w	r3, [r9, #3]
    d8dc:	f88d 301d 	strb.w	r3, [sp, #29]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
    d8e0:	f899 1005 	ldrb.w	r1, [r9, #5]
    d8e4:	f899 3004 	ldrb.w	r3, [r9, #4]
    d8e8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    d8ec:	f8ad 301e 	strh.w	r3, [sp, #30]
			value.cpf.name_space = cpf->name_space;
    d8f0:	f899 3006 	ldrb.w	r3, [r9, #6]
    d8f4:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
    d8f8:	f899 3007 	ldrb.w	r3, [r9, #7]
    d8fc:	f899 1008 	ldrb.w	r1, [r9, #8]
    d900:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    d904:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
    d908:	e7ca      	b.n	d8a0 <gatt_read_type_rsp+0x274>
    d90a:	bf00      	nop
    d90c:	0002ed12 	.word	0x0002ed12
    d910:	0002b6b4 	.word	0x0002b6b4
    d914:	0000d91d 	.word	0x0000d91d
    d918:	0002857b 	.word	0x0002857b

0000d91c <read_included_uuid_cb>:
{
    d91c:	b570      	push	{r4, r5, r6, lr}
    d91e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    d920:	2b10      	cmp	r3, #16
{
    d922:	9c12      	ldr	r4, [sp, #72]	; 0x48
    d924:	4605      	mov	r5, r0
	if (length != 16U) {
    d926:	d013      	beq.n	d950 <read_included_uuid_cb+0x34>
		BT_ERR("Invalid data len %u", length);
    d928:	4a27      	ldr	r2, [pc, #156]	; (d9c8 <read_included_uuid_cb+0xac>)
    d92a:	4828      	ldr	r0, [pc, #160]	; (d9cc <read_included_uuid_cb+0xb0>)
    d92c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    d930:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d934:	2303      	movs	r3, #3
    d936:	aa0b      	add	r2, sp, #44	; 0x2c
    d938:	9303      	str	r3, [sp, #12]
    d93a:	930b      	str	r3, [sp, #44]	; 0x2c
    d93c:	f01a ff8f 	bl	2885e <z_log_msg2_static_create.constprop.0>
		params->func(conn, NULL, params);
    d940:	6863      	ldr	r3, [r4, #4]
    d942:	4622      	mov	r2, r4
    d944:	2100      	movs	r1, #0
    d946:	4628      	mov	r0, r5
}
    d948:	b00e      	add	sp, #56	; 0x38
    d94a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
    d94e:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
    d950:	8963      	ldrh	r3, [r4, #10]
    d952:	f8ad 3008 	strh.w	r3, [sp, #8]
	value.end_handle = params->_included.end_handle;
    d956:	89a3      	ldrh	r3, [r4, #12]
    d958:	f8ad 300a 	strh.w	r3, [sp, #10]
	value.uuid = &u.uuid;
    d95c:	a803      	add	r0, sp, #12
	u.uuid.type = BT_UUID_TYPE_128;
    d95e:	2302      	movs	r3, #2
    d960:	f88d 300c 	strb.w	r3, [sp, #12]
	value.uuid = &u.uuid;
    d964:	9001      	str	r0, [sp, #4]
	memcpy(u.u128.val, pdu, length);
    d966:	f10d 030d 	add.w	r3, sp, #13
    d96a:	f102 0110 	add.w	r1, r2, #16
    d96e:	f852 6b04 	ldr.w	r6, [r2], #4
    d972:	f843 6b04 	str.w	r6, [r3], #4
    d976:	428a      	cmp	r2, r1
    d978:	d1f9      	bne.n	d96e <read_included_uuid_cb+0x52>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d97a:	6821      	ldr	r1, [r4, #0]
    d97c:	b9c9      	cbnz	r1, d9b2 <read_included_uuid_cb+0x96>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d97e:	2300      	movs	r3, #0
    d980:	f642 0202 	movw	r2, #10242	; 0x2802
    d984:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    d988:	f88d 3000 	strb.w	r3, [sp]
    d98c:	f8ad 2002 	strh.w	r2, [sp, #2]
    d990:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    d994:	aa01      	add	r2, sp, #4
	attr.handle = params->_included.attr_handle;
    d996:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d998:	920b      	str	r2, [sp, #44]	; 0x2c
	attr.handle = params->_included.attr_handle;
    d99a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    d99e:	f8cd d020 	str.w	sp, [sp, #32]
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    d9a2:	6863      	ldr	r3, [r4, #4]
    d9a4:	4622      	mov	r2, r4
    d9a6:	a908      	add	r1, sp, #32
    d9a8:	4628      	mov	r0, r5
    d9aa:	4798      	blx	r3
    d9ac:	b928      	cbnz	r0, d9ba <read_included_uuid_cb+0x9e>
}
    d9ae:	b00e      	add	sp, #56	; 0x38
    d9b0:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    d9b2:	f019 fa2b 	bl	26e0c <bt_uuid_cmp>
    d9b6:	2800      	cmp	r0, #0
    d9b8:	d0e1      	beq.n	d97e <read_included_uuid_cb+0x62>
	gatt_discover_next(conn, params->start_handle, params);
    d9ba:	8921      	ldrh	r1, [r4, #8]
    d9bc:	4622      	mov	r2, r4
    d9be:	4628      	mov	r0, r5
    d9c0:	f01b f8ba 	bl	28b38 <gatt_discover_next>
	return;
    d9c4:	e7f3      	b.n	d9ae <read_included_uuid_cb+0x92>
    d9c6:	bf00      	nop
    d9c8:	0002ed12 	.word	0x0002ed12
    d9cc:	0002b6b4 	.word	0x0002b6b4

0000d9d0 <gatt_find_info_rsp>:
{
    d9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d9d4:	b091      	sub	sp, #68	; 0x44
    d9d6:	4680      	mov	r8, r0
    d9d8:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    d9da:	b981      	cbnz	r1, d9fe <gatt_find_info_rsp+0x2e>
	switch (rsp->format) {
    d9dc:	7810      	ldrb	r0, [r2, #0]
    d9de:	2801      	cmp	r0, #1
    d9e0:	d013      	beq.n	da0a <gatt_find_info_rsp+0x3a>
    d9e2:	2802      	cmp	r0, #2
    d9e4:	d02a      	beq.n	da3c <gatt_find_info_rsp+0x6c>
		BT_ERR("Invalid format %u", rsp->format);
    d9e6:	4b52      	ldr	r3, [pc, #328]	; (db30 <gatt_find_info_rsp+0x160>)
    d9e8:	aa0d      	add	r2, sp, #52	; 0x34
	switch (rsp->format) {
    d9ea:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
		BT_ERR("Invalid format %u", rsp->format);
    d9ee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    d9f2:	2303      	movs	r3, #3
    d9f4:	484f      	ldr	r0, [pc, #316]	; (db34 <gatt_find_info_rsp+0x164>)
    d9f6:	9305      	str	r3, [sp, #20]
    d9f8:	930d      	str	r3, [sp, #52]	; 0x34
    d9fa:	f01a ff30 	bl	2885e <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    d9fe:	6873      	ldr	r3, [r6, #4]
    da00:	4632      	mov	r2, r6
    da02:	2100      	movs	r1, #0
    da04:	4640      	mov	r0, r8
    da06:	4798      	blx	r3
    da08:	e08f      	b.n	db2a <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_16;
    da0a:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i16);
    da0e:	f04f 0a04 	mov.w	sl, #4
	length--;
    da12:	3b01      	subs	r3, #1
    da14:	b29b      	uxth	r3, r3
	if (length < len) {
    da16:	4553      	cmp	r3, sl
    da18:	d3f1      	bcc.n	d9fe <gatt_find_info_rsp+0x2e>
	for (i = length / len, pdu = rsp->info; i != 0;
    da1a:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    da1e:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    da22:	9300      	str	r3, [sp, #0]
    da24:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    da26:	46cb      	mov	fp, r9
			skip = false;
    da28:	464d      	mov	r5, r9
    da2a:	af05      	add	r7, sp, #20
	for (i = length / len, pdu = rsp->info; i != 0;
    da2c:	9b00      	ldr	r3, [sp, #0]
    da2e:	b953      	cbnz	r3, da46 <gatt_find_info_rsp+0x76>
	gatt_discover_next(conn, handle, params);
    da30:	4632      	mov	r2, r6
    da32:	4659      	mov	r1, fp
    da34:	4640      	mov	r0, r8
    da36:	f01b f87f 	bl	28b38 <gatt_discover_next>
	return;
    da3a:	e076      	b.n	db2a <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_128;
    da3c:	f88d 0014 	strb.w	r0, [sp, #20]
		len = sizeof(*info.i128);
    da40:	f04f 0a12 	mov.w	sl, #18
		break;
    da44:	e7e5      	b.n	da12 <gatt_find_info_rsp+0x42>
		handle = sys_le16_to_cpu(info.i16->handle);
    da46:	8823      	ldrh	r3, [r4, #0]
    da48:	9301      	str	r3, [sp, #4]
    da4a:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
    da4e:	f1b9 0f00 	cmp.w	r9, #0
    da52:	d156      	bne.n	db02 <gatt_find_info_rsp+0x132>
		switch (u.uuid.type) {
    da54:	f89d 3014 	ldrb.w	r3, [sp, #20]
    da58:	2b00      	cmp	r3, #0
    da5a:	d03a      	beq.n	dad2 <gatt_find_info_rsp+0x102>
    da5c:	2b02      	cmp	r3, #2
    da5e:	d03f      	beq.n	dae0 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    da60:	6831      	ldr	r1, [r6, #0]
    da62:	2900      	cmp	r1, #0
    da64:	d148      	bne.n	daf8 <gatt_find_info_rsp+0x128>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    da66:	7c33      	ldrb	r3, [r6, #16]
    da68:	2b04      	cmp	r3, #4
    da6a:	d14d      	bne.n	db08 <gatt_find_info_rsp+0x138>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    da6c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    da70:	a903      	add	r1, sp, #12
    da72:	4638      	mov	r0, r7
    da74:	f88d 500c 	strb.w	r5, [sp, #12]
    da78:	f8ad 300e 	strh.w	r3, [sp, #14]
    da7c:	f019 f9c6 	bl	26e0c <bt_uuid_cmp>
    da80:	b310      	cbz	r0, dac8 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    da82:	f642 0301 	movw	r3, #10241	; 0x2801
    da86:	a904      	add	r1, sp, #16
    da88:	4638      	mov	r0, r7
    da8a:	f88d 5010 	strb.w	r5, [sp, #16]
    da8e:	f8ad 3012 	strh.w	r3, [sp, #18]
    da92:	f019 f9bb 	bl	26e0c <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    da96:	b1b8      	cbz	r0, dac8 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    da98:	f642 0302 	movw	r3, #10242	; 0x2802
    da9c:	a90a      	add	r1, sp, #40	; 0x28
    da9e:	4638      	mov	r0, r7
    daa0:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    daa4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    daa8:	f019 f9b0 	bl	26e0c <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    daac:	b160      	cbz	r0, dac8 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    daae:	f642 0303 	movw	r3, #10243	; 0x2803
    dab2:	a90a      	add	r1, sp, #40	; 0x28
    dab4:	4638      	mov	r0, r7
    dab6:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    daba:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    dabe:	f019 f9a5 	bl	26e0c <bt_uuid_cmp>
    dac2:	bb08      	cbnz	r0, db08 <gatt_find_info_rsp+0x138>
				skip = true;
    dac4:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    dac8:	9b00      	ldr	r3, [sp, #0]
    daca:	3b01      	subs	r3, #1
    dacc:	9300      	str	r3, [sp, #0]
    dace:	4454      	add	r4, sl
    dad0:	e7ac      	b.n	da2c <gatt_find_info_rsp+0x5c>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    dad2:	78a3      	ldrb	r3, [r4, #2]
    dad4:	78e2      	ldrb	r2, [r4, #3]
    dad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    dada:	f8ad 3016 	strh.w	r3, [sp, #22]
			break;
    dade:	e7bf      	b.n	da60 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    dae0:	1ca3      	adds	r3, r4, #2
    dae2:	f10d 0215 	add.w	r2, sp, #21
    dae6:	f104 0112 	add.w	r1, r4, #18
    daea:	f853 0b04 	ldr.w	r0, [r3], #4
    daee:	f842 0b04 	str.w	r0, [r2], #4
    daf2:	428b      	cmp	r3, r1
    daf4:	d1f9      	bne.n	daea <gatt_find_info_rsp+0x11a>
    daf6:	e7b3      	b.n	da60 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    daf8:	4638      	mov	r0, r7
    dafa:	f019 f987 	bl	26e0c <bt_uuid_cmp>
    dafe:	2800      	cmp	r0, #0
    db00:	d0b1      	beq.n	da66 <gatt_find_info_rsp+0x96>
			skip = false;
    db02:	f04f 0900 	mov.w	r9, #0
    db06:	e7df      	b.n	dac8 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    db08:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    db0c:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    db10:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
    db14:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    db18:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    db1a:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    db1e:	4632      	mov	r2, r6
    db20:	a90a      	add	r1, sp, #40	; 0x28
    db22:	4640      	mov	r0, r8
    db24:	4798      	blx	r3
    db26:	2800      	cmp	r0, #0
    db28:	d1ce      	bne.n	dac8 <gatt_find_info_rsp+0xf8>
}
    db2a:	b011      	add	sp, #68	; 0x44
    db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    db30:	0002ed26 	.word	0x0002ed26
    db34:	0002b6b4 	.word	0x0002b6b4

0000db38 <bt_gatt_write>:
{
    db38:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    db3a:	7b43      	ldrb	r3, [r0, #13]
    db3c:	2b07      	cmp	r3, #7
{
    db3e:	4605      	mov	r5, r0
    db40:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    db42:	d125      	bne.n	db90 <bt_gatt_write+0x58>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    db44:	88cb      	ldrh	r3, [r1, #6]
    db46:	b1ab      	cbz	r3, db74 <bt_gatt_write+0x3c>
	len = bt_att_get_mtu(conn) - req_len - 1;
    db48:	4628      	mov	r0, r5
    db4a:	f01a fb22 	bl	28192 <bt_att_get_mtu>
    db4e:	1f43      	subs	r3, r0, #5
    db50:	b298      	uxth	r0, r3
	len = MIN(params->length, len);
    db52:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
    db54:	4910      	ldr	r1, [pc, #64]	; (db98 <bt_gatt_write+0x60>)
	len = MIN(params->length, len);
    db56:	4283      	cmp	r3, r0
    db58:	bf28      	it	cs
    db5a:	4603      	movcs	r3, r0
	len += req_len;
    db5c:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
    db5e:	b29b      	uxth	r3, r3
    db60:	9301      	str	r3, [sp, #4]
    db62:	2316      	movs	r3, #22
    db64:	9300      	str	r3, [sp, #0]
    db66:	4b0d      	ldr	r3, [pc, #52]	; (db9c <bt_gatt_write+0x64>)
    db68:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
    db6a:	4628      	mov	r0, r5
    db6c:	f01a fccb 	bl	28506 <gatt_req_send>
}
    db70:	b002      	add	sp, #8
    db72:	bd70      	pop	{r4, r5, r6, pc}
	len = sizeof(struct bt_att_write_req) + params->length;
    db74:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    db76:	f01a fb0c 	bl	28192 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
    db7a:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    db7c:	3801      	subs	r0, #1
    db7e:	42b0      	cmp	r0, r6
    db80:	d3e2      	bcc.n	db48 <bt_gatt_write+0x10>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
    db82:	2312      	movs	r3, #18
    db84:	9300      	str	r3, [sp, #0]
    db86:	4906      	ldr	r1, [pc, #24]	; (dba0 <bt_gatt_write+0x68>)
    db88:	4b06      	ldr	r3, [pc, #24]	; (dba4 <bt_gatt_write+0x6c>)
    db8a:	9601      	str	r6, [sp, #4]
    db8c:	4622      	mov	r2, r4
    db8e:	e7ec      	b.n	db6a <bt_gatt_write+0x32>
		return -ENOTCONN;
    db90:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    db94:	e7ec      	b.n	db70 <bt_gatt_write+0x38>
    db96:	bf00      	nop
    db98:	0000dba9 	.word	0x0000dba9
    db9c:	00028673 	.word	0x00028673
    dba0:	000283ed 	.word	0x000283ed
    dba4:	00028637 	.word	0x00028637

0000dba8 <gatt_prepare_write_rsp>:
{
    dba8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbaa:	b08b      	sub	sp, #44	; 0x2c
    dbac:	4606      	mov	r6, r0
    dbae:	9c10      	ldr	r4, [sp, #64]	; 0x40
    dbb0:	4617      	mov	r7, r2
	if (err) {
    dbb2:	b129      	cbz	r1, dbc0 <gatt_prepare_write_rsp+0x18>
		params->func(conn, err, params);
    dbb4:	6823      	ldr	r3, [r4, #0]
    dbb6:	4622      	mov	r2, r4
}
    dbb8:	b00b      	add	sp, #44	; 0x2c
    dbba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
    dbbe:	4718      	bx	r3
	len = length - sizeof(*rsp);
    dbc0:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
    dbc2:	89a3      	ldrh	r3, [r4, #12]
    dbc4:	429d      	cmp	r5, r3
    dbc6:	d91a      	bls.n	dbfe <gatt_prepare_write_rsp+0x56>
		BT_ERR("Incorrect length, canceling write");
    dbc8:	4b1f      	ldr	r3, [pc, #124]	; (dc48 <gatt_prepare_write_rsp+0xa0>)
    dbca:	9308      	str	r3, [sp, #32]
    dbcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dbd0:	2302      	movs	r3, #2
    dbd2:	481e      	ldr	r0, [pc, #120]	; (dc4c <gatt_prepare_write_rsp+0xa4>)
    dbd4:	9303      	str	r3, [sp, #12]
    dbd6:	aa07      	add	r2, sp, #28
    dbd8:	9307      	str	r3, [sp, #28]
    dbda:	f01a fe40 	bl	2885e <z_log_msg2_static_create.constprop.0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
    dbde:	2318      	movs	r3, #24
    dbe0:	2101      	movs	r1, #1
    dbe2:	e9cd 3100 	strd	r3, r1, [sp]
    dbe6:	4b1a      	ldr	r3, [pc, #104]	; (dc50 <gatt_prepare_write_rsp+0xa8>)
    dbe8:	491a      	ldr	r1, [pc, #104]	; (dc54 <gatt_prepare_write_rsp+0xac>)
    dbea:	4622      	mov	r2, r4
    dbec:	4630      	mov	r0, r6
    dbee:	f01a fc8a 	bl	28506 <gatt_req_send>
		if (gatt_cancel_all_writes(conn, params)) {
    dbf2:	b330      	cbz	r0, dc42 <gatt_prepare_write_rsp+0x9a>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
    dbf4:	6823      	ldr	r3, [r4, #0]
    dbf6:	4622      	mov	r2, r4
    dbf8:	210e      	movs	r1, #14
    dbfa:	4630      	mov	r0, r6
    dbfc:	e7dc      	b.n	dbb8 <gatt_prepare_write_rsp+0x10>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
    dbfe:	462a      	mov	r2, r5
    dc00:	68a0      	ldr	r0, [r4, #8]
    dc02:	1d39      	adds	r1, r7, #4
    dc04:	f01c ff19 	bl	2aa3a <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
    dc08:	88e2      	ldrh	r2, [r4, #6]
    dc0a:	887b      	ldrh	r3, [r7, #2]
    dc0c:	4293      	cmp	r3, r2
    dc0e:	d100      	bne.n	dc12 <gatt_prepare_write_rsp+0x6a>
    dc10:	b108      	cbz	r0, dc16 <gatt_prepare_write_rsp+0x6e>
		BT_ERR("Incorrect offset or data in response, canceling write");
    dc12:	4b11      	ldr	r3, [pc, #68]	; (dc58 <gatt_prepare_write_rsp+0xb0>)
    dc14:	e7d9      	b.n	dbca <gatt_prepare_write_rsp+0x22>
	params->offset += len;
    dc16:	fa13 f385 	uxtah	r3, r3, r5
    dc1a:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
    dc1c:	68a3      	ldr	r3, [r4, #8]
    dc1e:	442b      	add	r3, r5
    dc20:	60a3      	str	r3, [r4, #8]
	params->length -= len;
    dc22:	89a3      	ldrh	r3, [r4, #12]
    dc24:	1b5d      	subs	r5, r3, r5
    dc26:	b2ad      	uxth	r5, r5
    dc28:	81a5      	strh	r5, [r4, #12]
	if (!params->length) {
    dc2a:	b92d      	cbnz	r5, dc38 <gatt_prepare_write_rsp+0x90>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
    dc2c:	2318      	movs	r3, #24
    dc2e:	2201      	movs	r2, #1
    dc30:	e9cd 3200 	strd	r3, r2, [sp]
    dc34:	4b09      	ldr	r3, [pc, #36]	; (dc5c <gatt_prepare_write_rsp+0xb4>)
    dc36:	e7d7      	b.n	dbe8 <gatt_prepare_write_rsp+0x40>
	if (!bt_gatt_write(conn, params)) {
    dc38:	4621      	mov	r1, r4
    dc3a:	4630      	mov	r0, r6
    dc3c:	f7ff ff7c 	bl	db38 <bt_gatt_write>
    dc40:	e7d7      	b.n	dbf2 <gatt_prepare_write_rsp+0x4a>
}
    dc42:	b00b      	add	sp, #44	; 0x2c
    dc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc46:	bf00      	nop
    dc48:	0002ed38 	.word	0x0002ed38
    dc4c:	0002b6b4 	.word	0x0002b6b4
    dc50:	000285a7 	.word	0x000285a7
    dc54:	000283ed 	.word	0x000283ed
    dc58:	0002ed5a 	.word	0x0002ed5a
    dc5c:	000285b9 	.word	0x000285b9

0000dc60 <bt_gatt_mult_notification>:
{
    dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc64:	b087      	sub	sp, #28
    dc66:	af00      	add	r7, sp, #0
    dc68:	4681      	mov	r9, r0
    dc6a:	460c      	mov	r4, r1
    dc6c:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
    dc6e:	f7fe fdff 	bl	c870 <gatt_sub_find>
	if (!sub) {
    dc72:	4606      	mov	r6, r0
    dc74:	b328      	cbz	r0, dcc2 <bt_gatt_mult_notification+0x62>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    dc76:	4652      	mov	r2, sl
    dc78:	4621      	mov	r1, r4
    dc7a:	f107 000c 	add.w	r0, r7, #12
    dc7e:	f01b fe1b 	bl	298b8 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    dc82:	8a3b      	ldrh	r3, [r7, #16]
    dc84:	2b04      	cmp	r3, #4
    dc86:	d91c      	bls.n	dcc2 <bt_gatt_mult_notification+0x62>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    dc88:	2104      	movs	r1, #4
    dc8a:	f107 000c 	add.w	r0, r7, #12
    dc8e:	f01b fe8d 	bl	299ac <net_buf_simple_pull_mem>
		if (len > buf.len) {
    dc92:	8a39      	ldrh	r1, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
    dc94:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    dc98:	4541      	cmp	r1, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    dc9a:	4602      	mov	r2, r0
		if (len > buf.len) {
    dc9c:	d215      	bcs.n	dcca <bt_gatt_mult_notification+0x6a>
			BT_ERR("Invalid data len %u > %u", len, length);
    dc9e:	466c      	mov	r4, sp
    dca0:	b088      	sub	sp, #32
    dca2:	466a      	mov	r2, sp
    dca4:	491c      	ldr	r1, [pc, #112]	; (dd18 <bt_gatt_mult_notification+0xb8>)
    dca6:	f8c2 a018 	str.w	sl, [r2, #24]
    dcaa:	2304      	movs	r3, #4
    dcac:	e9c2 1804 	strd	r1, r8, [r2, #16]
    dcb0:	481a      	ldr	r0, [pc, #104]	; (dd1c <bt_gatt_mult_notification+0xbc>)
    dcb2:	f842 3f0c 	str.w	r3, [r2, #12]!
    dcb6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    dcba:	60bb      	str	r3, [r7, #8]
    dcbc:	f01a fdcf 	bl	2885e <z_log_msg2_static_create.constprop.0>
    dcc0:	46a5      	mov	sp, r4
}
    dcc2:	371c      	adds	r7, #28
    dcc4:	46bd      	mov	sp, r7
    dcc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    dcca:	68b4      	ldr	r4, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    dccc:	b1f4      	cbz	r4, dd0c <bt_gatt_mult_notification+0xac>
	return node->next;
    dcce:	f854 5914 	ldr.w	r5, [r4], #-20
    dcd2:	b105      	cbz	r5, dcd6 <bt_gatt_mult_notification+0x76>
    dcd4:	3d14      	subs	r5, #20
		handle = sys_cpu_to_le16(nfy->handle);
    dcd6:	4693      	mov	fp, r2
    dcd8:	f83b 3b04 	ldrh.w	r3, [fp], #4
    dcdc:	607b      	str	r3, [r7, #4]
			if (handle != params->value_handle) {
    dcde:	8921      	ldrh	r1, [r4, #8]
    dce0:	687b      	ldr	r3, [r7, #4]
    dce2:	4299      	cmp	r1, r3
    dce4:	d10b      	bne.n	dcfe <bt_gatt_mult_notification+0x9e>
			if (params->notify(conn, params, nfy->value, len) ==
    dce6:	f8d4 c000 	ldr.w	ip, [r4]
    dcea:	4643      	mov	r3, r8
    dcec:	465a      	mov	r2, fp
    dcee:	4621      	mov	r1, r4
    dcf0:	4648      	mov	r0, r9
    dcf2:	47e0      	blx	ip
    dcf4:	b918      	cbnz	r0, dcfe <bt_gatt_mult_notification+0x9e>
				bt_gatt_unsubscribe(conn, params);
    dcf6:	4621      	mov	r1, r4
    dcf8:	4648      	mov	r0, r9
    dcfa:	f01a ffa8 	bl	28c4e <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    dcfe:	b12d      	cbz	r5, dd0c <bt_gatt_mult_notification+0xac>
    dd00:	6969      	ldr	r1, [r5, #20]
    dd02:	b101      	cbz	r1, dd06 <bt_gatt_mult_notification+0xa6>
    dd04:	3914      	subs	r1, #20
{
    dd06:	462c      	mov	r4, r5
    dd08:	460d      	mov	r5, r1
    dd0a:	e7e8      	b.n	dcde <bt_gatt_mult_notification+0x7e>
		net_buf_simple_pull_mem(&buf, len);
    dd0c:	4641      	mov	r1, r8
    dd0e:	f107 000c 	add.w	r0, r7, #12
    dd12:	f01b fe4b 	bl	299ac <net_buf_simple_pull_mem>
    dd16:	e7b4      	b.n	dc82 <bt_gatt_mult_notification+0x22>
    dd18:	0002ed90 	.word	0x0002ed90
    dd1c:	0002b6b4 	.word	0x0002b6b4

0000dd20 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    dd20:	b570      	push	{r4, r5, r6, lr}
    dd22:	b08a      	sub	sp, #40	; 0x28
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dd24:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dd28:	4a1e      	ldr	r2, [pc, #120]	; (dda4 <bt_gatt_connected+0x84>)
	data.conn = conn;
    dd2a:	9002      	str	r0, [sp, #8]
{
    dd2c:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dd2e:	ab02      	add	r3, sp, #8
	data.sec = BT_SECURITY_L1;
    dd30:	2001      	movs	r0, #1
    dd32:	f88d 000c 	strb.w	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dd36:	f01a fec7 	bl	28ac8 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
    dd3a:	4628      	mov	r0, r5
    dd3c:	f019 fd6b 	bl	27816 <bt_conn_get_security>
    dd40:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    dd44:	4288      	cmp	r0, r1
    dd46:	d20f      	bcs.n	dd68 <bt_gatt_connected+0x48>
		int err = bt_conn_set_security(conn, data.sec);
    dd48:	4628      	mov	r0, r5
    dd4a:	f019 fd3c 	bl	277c6 <bt_conn_set_security>

		if (err) {
    dd4e:	b158      	cbz	r0, dd68 <bt_gatt_connected+0x48>
			BT_WARN("Failed to set security for bonded peer (%d)",
    dd50:	4b15      	ldr	r3, [pc, #84]	; (dda8 <bt_gatt_connected+0x88>)
    dd52:	aa07      	add	r2, sp, #28
    dd54:	e9cd 3008 	strd	r3, r0, [sp, #32]
    dd58:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    dd5c:	2303      	movs	r3, #3
    dd5e:	4813      	ldr	r0, [pc, #76]	; (ddac <bt_gatt_connected+0x8c>)
    dd60:	9301      	str	r3, [sp, #4]
    dd62:	9307      	str	r3, [sp, #28]
    dd64:	f01a fd7b 	bl	2885e <z_log_msg2_static_create.constprop.0>
	sub = gatt_sub_find(conn);
    dd68:	4628      	mov	r0, r5
    dd6a:	f7fe fd81 	bl	c870 <gatt_sub_find>
	if (!sub) {
    dd6e:	b1b8      	cbz	r0, dda0 <bt_gatt_connected+0x80>
	return list->head;
    dd70:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    dd72:	b1ac      	cbz	r4, dda0 <bt_gatt_connected+0x80>
    dd74:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    dd76:	f105 0688 	add.w	r6, r5, #136	; 0x88
    dd7a:	7a28      	ldrb	r0, [r5, #8]
    dd7c:	4631      	mov	r1, r6
    dd7e:	f019 f9d1 	bl	27124 <bt_addr_le_is_bonded>
    dd82:	b148      	cbz	r0, dd98 <bt_gatt_connected+0x78>
    dd84:	f104 0010 	add.w	r0, r4, #16
    dd88:	f01a fb33 	bl	283f2 <atomic_get>
    dd8c:	0783      	lsls	r3, r0, #30
    dd8e:	d403      	bmi.n	dd98 <bt_gatt_connected+0x78>
			gatt_write_ccc(conn, params);
    dd90:	4621      	mov	r1, r4
    dd92:	4628      	mov	r0, r5
    dd94:	f7fe fd9a 	bl	c8cc <gatt_write_ccc>
	return node->next;
    dd98:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    dd9a:	b10c      	cbz	r4, dda0 <bt_gatt_connected+0x80>
    dd9c:	3c14      	subs	r4, #20
    dd9e:	e7ec      	b.n	dd7a <bt_gatt_connected+0x5a>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    dda0:	b00a      	add	sp, #40	; 0x28
    dda2:	bd70      	pop	{r4, r5, r6, pc}
    dda4:	0000d249 	.word	0x0000d249
    dda8:	0002eda9 	.word	0x0002eda9
    ddac:	0002b6b4 	.word	0x0002b6b4

0000ddb0 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    ddb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    ddb2:	4b08      	ldr	r3, [pc, #32]	; (ddd4 <bt_gatt_att_max_mtu_changed+0x24>)
    ddb4:	681c      	ldr	r4, [r3, #0]
    ddb6:	4605      	mov	r5, r0
    ddb8:	460e      	mov	r6, r1
    ddba:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ddbc:	b14c      	cbz	r4, ddd2 <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    ddbe:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ddc2:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    ddc4:	b11b      	cbz	r3, ddce <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    ddc6:	463a      	mov	r2, r7
    ddc8:	4631      	mov	r1, r6
    ddca:	4628      	mov	r0, r5
    ddcc:	4798      	blx	r3
	return node->next;
    ddce:	6864      	ldr	r4, [r4, #4]
    ddd0:	e7f4      	b.n	ddbc <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    ddd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddd4:	20001f70 	.word	0x20001f70

0000ddd8 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    ddd8:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ddda:	4a06      	ldr	r2, [pc, #24]	; (ddf4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    dddc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ddde:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    dde0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    dde2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    dde6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ddea:	f01a fe6d 	bl	28ac8 <bt_gatt_foreach_attr>
}
    ddee:	b003      	add	sp, #12
    ddf0:	f85d fb04 	ldr.w	pc, [sp], #4
    ddf4:	0000d249 	.word	0x0000d249

0000ddf8 <db_hash_read>:
{
    ddf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    ddfc:	490f      	ldr	r1, [pc, #60]	; (de3c <db_hash_read+0x44>)
{
    ddfe:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    de02:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    de04:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    de08:	461d      	mov	r5, r3
    de0a:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    de0c:	f01c fae7 	bl	2a3de <k_work_cancel_delayable_sync>
    de10:	480b      	ldr	r0, [pc, #44]	; (de40 <db_hash_read+0x48>)
    de12:	f01a faee 	bl	283f2 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    de16:	0743      	lsls	r3, r0, #29
    de18:	d401      	bmi.n	de1e <db_hash_read+0x26>
		db_hash_gen(true);
    de1a:	f7fe ffc5 	bl	cda8 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    de1e:	2101      	movs	r1, #1
    de20:	4630      	mov	r0, r6
    de22:	f01a ffa5 	bl	28d70 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    de26:	2310      	movs	r3, #16
    de28:	9306      	str	r3, [sp, #24]
    de2a:	463a      	mov	r2, r7
    de2c:	4629      	mov	r1, r5
    de2e:	4620      	mov	r0, r4
    de30:	4b04      	ldr	r3, [pc, #16]	; (de44 <db_hash_read+0x4c>)
}
    de32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    de36:	f01a bc73 	b.w	28720 <bt_gatt_attr_read.constprop.0>
    de3a:	bf00      	nop
    de3c:	200016a0 	.word	0x200016a0
    de40:	20001718 	.word	0x20001718
    de44:	20001660 	.word	0x20001660

0000de48 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    de48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    de4c:	4a30      	ldr	r2, [pc, #192]	; (df10 <bt_gatt_disconnected+0xc8>)
    de4e:	4603      	mov	r3, r0
{
    de50:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    de52:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de56:	2001      	movs	r0, #1
    de58:	f01a fe36 	bl	28ac8 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    de5c:	4620      	mov	r0, r4
    de5e:	f7fe fd07 	bl	c870 <gatt_sub_find>
	if (!sub) {
    de62:	4607      	mov	r7, r0
    de64:	b378      	cbz	r0, dec6 <bt_gatt_disconnected+0x7e>
	return list->head;
    de66:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    de68:	b36d      	cbz	r5, dec6 <bt_gatt_disconnected+0x7e>
	return node->next;
    de6a:	f855 6914 	ldr.w	r6, [r5], #-20
    de6e:	b106      	cbz	r6, de72 <bt_gatt_disconnected+0x2a>
    de70:	3e14      	subs	r6, #20
{
    de72:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    de76:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    de7a:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
    de7e:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    de80:	7a20      	ldrb	r0, [r4, #8]
    de82:	4649      	mov	r1, r9
    de84:	f019 f94e 	bl	27124 <bt_addr_le_is_bonded>
    de88:	b970      	cbnz	r0, dea8 <bt_gatt_disconnected+0x60>
			params->value = 0U;
    de8a:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
    de8e:	462b      	mov	r3, r5
    de90:	4642      	mov	r2, r8
    de92:	4639      	mov	r1, r7
    de94:	4620      	mov	r0, r4
    de96:	f01a fc1f 	bl	286d8 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    de9a:	b1a6      	cbz	r6, dec6 <bt_gatt_disconnected+0x7e>
    de9c:	6973      	ldr	r3, [r6, #20]
    de9e:	b103      	cbz	r3, dea2 <bt_gatt_disconnected+0x5a>
    dea0:	3b14      	subs	r3, #20
{
    dea2:	4635      	mov	r5, r6
    dea4:	461e      	mov	r6, r3
    dea6:	e7eb      	b.n	de80 <bt_gatt_disconnected+0x38>
    dea8:	f105 0010 	add.w	r0, r5, #16
    deac:	f01a faa1 	bl	283f2 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    deb0:	07c3      	lsls	r3, r0, #31
    deb2:	d4ea      	bmi.n	de8a <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    deb4:	787b      	ldrb	r3, [r7, #1]
    deb6:	b11b      	cbz	r3, dec0 <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    deb8:	4649      	mov	r1, r9
    deba:	4650      	mov	r0, sl
    debc:	f01a fbf9 	bl	286b2 <bt_addr_le_copy>
			prev = &params->node;
    dec0:	f105 0814 	add.w	r8, r5, #20
    dec4:	e7e9      	b.n	de9a <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
    dec6:	4620      	mov	r0, r4
    dec8:	f7fe fc84 	bl	c7d4 <find_cf_cfg>
	if (!cfg) {
    decc:	4605      	mov	r5, r0
    dece:	b1e0      	cbz	r0, df0a <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    ded0:	f104 0688 	add.w	r6, r4, #136	; 0x88
    ded4:	7a20      	ldrb	r0, [r4, #8]
    ded6:	4631      	mov	r1, r6
    ded8:	f019 f924 	bl	27124 <bt_addr_le_is_bonded>
    dedc:	b920      	cbnz	r0, dee8 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
    dede:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    dee0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    dee4:	f01a bcd0 	b.w	28888 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    dee8:	1c68      	adds	r0, r5, #1
    deea:	4631      	mov	r1, r6
    deec:	350c      	adds	r5, #12
    deee:	f01a fbe0 	bl	286b2 <bt_addr_le_copy>
    def2:	f3bf 8f5b 	dmb	ish
    def6:	e855 3f00 	ldrex	r3, [r5]
    defa:	f023 0302 	bic.w	r3, r3, #2
    defe:	e845 3200 	strex	r2, r3, [r5]
    df02:	2a00      	cmp	r2, #0
    df04:	d1f7      	bne.n	def6 <bt_gatt_disconnected+0xae>
    df06:	f3bf 8f5b 	dmb	ish
}
    df0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df0e:	bf00      	nop
    df10:	0000cb31 	.word	0x0000cb31

0000df14 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    df14:	4b10      	ldr	r3, [pc, #64]	; (df58 <get_io_capa+0x44>)
    df16:	681b      	ldr	r3, [r3, #0]
    df18:	b1bb      	cbz	r3, df4a <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    df1a:	681a      	ldr	r2, [r3, #0]
    df1c:	b142      	cbz	r2, df30 <get_io_capa+0x1c>
    df1e:	6859      	ldr	r1, [r3, #4]
    df20:	b131      	cbz	r1, df30 <get_io_capa+0x1c>
    df22:	6899      	ldr	r1, [r3, #8]
    df24:	b911      	cbnz	r1, df2c <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    df26:	490d      	ldr	r1, [pc, #52]	; (df5c <get_io_capa+0x48>)
    df28:	7809      	ldrb	r1, [r1, #0]
    df2a:	b939      	cbnz	r1, df3c <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    df2c:	2004      	movs	r0, #4
    df2e:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    df30:	490a      	ldr	r1, [pc, #40]	; (df5c <get_io_capa+0x48>)
    df32:	7809      	ldrb	r1, [r1, #0]
    df34:	b111      	cbz	r1, df3c <get_io_capa+0x28>
    df36:	b10a      	cbz	r2, df3c <get_io_capa+0x28>
    df38:	6899      	ldr	r1, [r3, #8]
    df3a:	b941      	cbnz	r1, df4e <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    df3c:	685b      	ldr	r3, [r3, #4]
    df3e:	b943      	cbnz	r3, df52 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    df40:	2a00      	cmp	r2, #0
    df42:	bf0c      	ite	eq
    df44:	2003      	moveq	r0, #3
    df46:	2000      	movne	r0, #0
    df48:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    df4a:	2003      	movs	r0, #3
    df4c:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    df4e:	2001      	movs	r0, #1
    df50:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    df52:	2002      	movs	r0, #2
	}
}
    df54:	4770      	bx	lr
    df56:	bf00      	nop
    df58:	20001f1c 	.word	0x20001f1c
    df5c:	2000356f 	.word	0x2000356f

0000df60 <smp_g2>:
	return 0;
}

static int smp_g2(const uint8_t u[32], const uint8_t v[32],
		  const uint8_t x[16], const uint8_t y[16], uint32_t *passkey)
{
    df60:	b570      	push	{r4, r5, r6, lr}
    df62:	b098      	sub	sp, #96	; 0x60
    df64:	460e      	mov	r6, r1
    df66:	4614      	mov	r4, r2
	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s", bt_hex(x, 16));
	BT_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    df68:	4601      	mov	r1, r0
    df6a:	2220      	movs	r2, #32
    df6c:	a804      	add	r0, sp, #16
{
    df6e:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    df70:	f01a ff2c 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    df74:	2220      	movs	r2, #32
    df76:	4631      	mov	r1, r6
    df78:	a80c      	add	r0, sp, #48	; 0x30
    df7a:	f01a ff27 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    df7e:	2210      	movs	r2, #16
    df80:	4629      	mov	r1, r5
    df82:	a814      	add	r0, sp, #80	; 0x50
    df84:	f01a ff22 	bl	28dcc <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    df88:	2210      	movs	r2, #16
    df8a:	4621      	mov	r1, r4
    df8c:	4668      	mov	r0, sp
    df8e:	f01a ff1d 	bl	28dcc <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    df92:	466b      	mov	r3, sp
    df94:	2250      	movs	r2, #80	; 0x50
    df96:	a904      	add	r1, sp, #16
    df98:	4618      	mov	r0, r3
    df9a:	f01a ff66 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
    df9e:	b940      	cbnz	r0, dfb2 <smp_g2+0x52>
    dfa0:	9b03      	ldr	r3, [sp, #12]
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    dfa2:	4a05      	ldr	r2, [pc, #20]	; (dfb8 <smp_g2+0x58>)
    dfa4:	ba1b      	rev	r3, r3
    dfa6:	fbb3 f1f2 	udiv	r1, r3, r2
    dfaa:	fb02 3311 	mls	r3, r2, r1, r3
    dfae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    dfb0:	6013      	str	r3, [r2, #0]

	BT_DBG("passkey %u", *passkey);

	return 0;
}
    dfb2:	b018      	add	sp, #96	; 0x60
    dfb4:	bd70      	pop	{r4, r5, r6, pc}
    dfb6:	bf00      	nop
    dfb8:	000f4240 	.word	0x000f4240

0000dfbc <get_auth.constprop.0>:
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
	if (sc_supported) {
    dfbc:	4b0c      	ldr	r3, [pc, #48]	; (dff0 <get_auth.constprop.0+0x34>)
    dfbe:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    dfc0:	b510      	push	{r4, lr}
	if (sc_supported) {
    dfc2:	b17b      	cbz	r3, dfe4 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    dfc4:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    dfc8:	f7ff ffa4 	bl	df14 <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    dfcc:	4b09      	ldr	r3, [pc, #36]	; (dff4 <get_auth.constprop.0+0x38>)
    dfce:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    dfd0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    dfd2:	bf0c      	ite	eq
    dfd4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    dfd8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    dfdc:	b12b      	cbz	r3, dfea <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    dfde:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    dfe2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    dfe4:	f000 0407 	and.w	r4, r0, #7
    dfe8:	e7ee      	b.n	dfc8 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    dfea:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    dfee:	e7f8      	b.n	dfe2 <get_auth.constprop.0+0x26>
    dff0:	2000356f 	.word	0x2000356f
    dff4:	20000a35 	.word	0x20000a35

0000dff8 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    dff8:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    dffa:	4b0e      	ldr	r3, [pc, #56]	; (e034 <bt_smp_accept+0x3c>)
{
    dffc:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    dffe:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
{
    e002:	b089      	sub	sp, #36	; 0x24
		if (smp->chan.chan.conn) {
    e004:	b938      	cbnz	r0, e016 <bt_smp_accept+0x1e>
			continue;
		}

		smp->chan.chan.ops = &ops;
    e006:	4a0c      	ldr	r2, [pc, #48]	; (e038 <bt_smp_accept+0x40>)
    e008:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
    e00c:	33f0      	adds	r3, #240	; 0xf0
    e00e:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    e010:	b009      	add	sp, #36	; 0x24
    e012:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    e016:	4b09      	ldr	r3, [pc, #36]	; (e03c <bt_smp_accept+0x44>)
    e018:	4809      	ldr	r0, [pc, #36]	; (e040 <bt_smp_accept+0x48>)
    e01a:	e9cd 3206 	strd	r3, r2, [sp, #24]
    e01e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e022:	2303      	movs	r3, #3
    e024:	aa05      	add	r2, sp, #20
    e026:	9301      	str	r3, [sp, #4]
    e028:	9305      	str	r3, [sp, #20]
    e02a:	f01a ff57 	bl	28edc <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    e02e:	f06f 000b 	mvn.w	r0, #11
    e032:	e7ed      	b.n	e010 <bt_smp_accept+0x18>
    e034:	20001720 	.word	0x20001720
    e038:	0002bf78 	.word	0x0002bf78
    e03c:	0002ede4 	.word	0x0002ede4
    e040:	0002b6f4 	.word	0x0002b6f4

0000e044 <smp_chan_get>:
{
    e044:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e046:	2106      	movs	r1, #6
{
    e048:	b088      	sub	sp, #32
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e04a:	f019 fd4c 	bl	27ae6 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e04e:	4604      	mov	r4, r0
    e050:	b968      	cbnz	r0, e06e <smp_chan_get+0x2a>
		BT_ERR("Unable to find SMP channel");
    e052:	4b08      	ldr	r3, [pc, #32]	; (e074 <smp_chan_get+0x30>)
    e054:	9306      	str	r3, [sp, #24]
    e056:	4808      	ldr	r0, [pc, #32]	; (e078 <smp_chan_get+0x34>)
    e058:	2302      	movs	r3, #2
    e05a:	aa05      	add	r2, sp, #20
    e05c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e060:	9301      	str	r3, [sp, #4]
    e062:	9305      	str	r3, [sp, #20]
    e064:	f01a ff3a 	bl	28edc <z_log_msg2_static_create.constprop.0>
}
    e068:	4620      	mov	r0, r4
    e06a:	b008      	add	sp, #32
    e06c:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
    e06e:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    e072:	e7f9      	b.n	e068 <smp_chan_get+0x24>
    e074:	0002ee09 	.word	0x0002ee09
    e078:	0002b6f4 	.word	0x0002b6f4

0000e07c <smp_f5>:
{
    e07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e080:	b09a      	sub	sp, #104	; 0x68
    e082:	461d      	mov	r5, r3
    e084:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
    e088:	4b2e      	ldr	r3, [pc, #184]	; (e144 <smp_f5+0xc8>)
{
    e08a:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
    e08c:	aa0c      	add	r2, sp, #48	; 0x30
{
    e08e:	4684      	mov	ip, r0
    e090:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
    e092:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    e096:	4690      	mov	r8, r2
    e098:	6818      	ldr	r0, [r3, #0]
    e09a:	6859      	ldr	r1, [r3, #4]
    e09c:	4614      	mov	r4, r2
    e09e:	c403      	stmia	r4!, {r0, r1}
    e0a0:	3308      	adds	r3, #8
    e0a2:	4573      	cmp	r3, lr
    e0a4:	4622      	mov	r2, r4
    e0a6:	d1f7      	bne.n	e098 <smp_f5+0x1c>
    e0a8:	6818      	ldr	r0, [r3, #0]
    e0aa:	791b      	ldrb	r3, [r3, #4]
    e0ac:	6020      	str	r0, [r4, #0]
    e0ae:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
    e0b0:	4661      	mov	r1, ip
    e0b2:	2220      	movs	r2, #32
    e0b4:	a804      	add	r0, sp, #16
    e0b6:	f01a fe89 	bl	28dcc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    e0ba:	4823      	ldr	r0, [pc, #140]	; (e148 <smp_f5+0xcc>)
    e0bc:	466b      	mov	r3, sp
    e0be:	2220      	movs	r2, #32
    e0c0:	a904      	add	r1, sp, #16
    e0c2:	f01a fed2 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
    e0c6:	4604      	mov	r4, r0
    e0c8:	bbc0      	cbnz	r0, e13c <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    e0ca:	2210      	movs	r2, #16
    e0cc:	4651      	mov	r1, sl
    e0ce:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    e0d2:	f01a fe7b 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    e0d6:	2210      	movs	r2, #16
    e0d8:	4631      	mov	r1, r6
    e0da:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    e0de:	f01a fe75 	bl	28dcc <sys_memcpy_swap>
	m[37] = a1->type;
    e0e2:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    e0e4:	2206      	movs	r2, #6
	m[37] = a1->type;
    e0e6:	f811 3b01 	ldrb.w	r3, [r1], #1
    e0ea:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    e0ee:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    e0f2:	f01a fe6b 	bl	28dcc <sys_memcpy_swap>
	m[44] = a2->type;
    e0f6:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    e0f8:	2206      	movs	r2, #6
	m[44] = a2->type;
    e0fa:	f811 3b01 	ldrb.w	r3, [r1], #1
    e0fe:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    e102:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    e106:	f01a fe61 	bl	28dcc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    e10a:	464b      	mov	r3, r9
    e10c:	2235      	movs	r2, #53	; 0x35
    e10e:	4641      	mov	r1, r8
    e110:	4668      	mov	r0, sp
    e112:	f01a feaa 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
    e116:	4604      	mov	r4, r0
    e118:	b980      	cbnz	r0, e13c <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    e11a:	4648      	mov	r0, r9
    e11c:	f01a fef0 	bl	28f00 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    e120:	2301      	movs	r3, #1
    e122:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    e126:	2235      	movs	r2, #53	; 0x35
    e128:	463b      	mov	r3, r7
    e12a:	4641      	mov	r1, r8
    e12c:	4668      	mov	r0, sp
    e12e:	f01a fe9c 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
    e132:	4604      	mov	r4, r0
    e134:	b910      	cbnz	r0, e13c <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    e136:	4638      	mov	r0, r7
    e138:	f01a fee2 	bl	28f00 <sys_mem_swap.constprop.0>
}
    e13c:	4620      	mov	r0, r4
    e13e:	b01a      	add	sp, #104	; 0x68
    e140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e144:	0002b818 	.word	0x0002b818
    e148:	0002f197 	.word	0x0002f197

0000e14c <sc_smp_check_confirm>:
{
    e14c:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    e14e:	7a03      	ldrb	r3, [r0, #8]
{
    e150:	b08f      	sub	sp, #60	; 0x3c
    e152:	4604      	mov	r4, r0
	switch (smp->method) {
    e154:	2b05      	cmp	r3, #5
    e156:	d821      	bhi.n	e19c <sc_smp_check_confirm+0x50>
    e158:	e8df f003 	tbb	[pc, r3]
    e15c:	2f03032f 	.word	0x2f03032f
    e160:	3c20      	.short	0x3c20
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e162:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
    e166:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
    e16a:	40d3      	lsrs	r3, r2
    e16c:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    e170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    e174:	4918      	ldr	r1, [pc, #96]	; (e1d8 <sc_smp_check_confirm+0x8c>)
    e176:	ad04      	add	r5, sp, #16
    e178:	9500      	str	r5, [sp, #0]
    e17a:	6809      	ldr	r1, [r1, #0]
    e17c:	f104 0237 	add.w	r2, r4, #55	; 0x37
    e180:	f104 0057 	add.w	r0, r4, #87	; 0x57
    e184:	f01a ff1a 	bl	28fbc <smp_f4>
    e188:	b1c8      	cbz	r0, e1be <sc_smp_check_confirm+0x72>
		BT_ERR("Calculate confirm failed");
    e18a:	4b14      	ldr	r3, [pc, #80]	; (e1dc <sc_smp_check_confirm+0x90>)
    e18c:	930c      	str	r3, [sp, #48]	; 0x30
    e18e:	2302      	movs	r3, #2
    e190:	9303      	str	r3, [sp, #12]
    e192:	930b      	str	r3, [sp, #44]	; 0x2c
    e194:	aa0b      	add	r2, sp, #44	; 0x2c
    e196:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e19a:	e008      	b.n	e1ae <sc_smp_check_confirm+0x62>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e19c:	4a10      	ldr	r2, [pc, #64]	; (e1e0 <sc_smp_check_confirm+0x94>)
	switch (smp->method) {
    e19e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e1a2:	2303      	movs	r3, #3
    e1a4:	9304      	str	r3, [sp, #16]
    e1a6:	930b      	str	r3, [sp, #44]	; 0x2c
    e1a8:	aa0b      	add	r2, sp, #44	; 0x2c
    e1aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate confirm failed");
    e1ae:	480d      	ldr	r0, [pc, #52]	; (e1e4 <sc_smp_check_confirm+0x98>)
    e1b0:	f01a fe94 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    e1b4:	2008      	movs	r0, #8
}
    e1b6:	b00f      	add	sp, #60	; 0x3c
    e1b8:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
    e1ba:	2300      	movs	r3, #0
    e1bc:	e7da      	b.n	e174 <sc_smp_check_confirm+0x28>
	if (memcmp(smp->pcnf, cfm, 16)) {
    e1be:	2210      	movs	r2, #16
    e1c0:	4629      	mov	r1, r5
    e1c2:	f104 0017 	add.w	r0, r4, #23
    e1c6:	f01c fc38 	bl	2aa3a <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    e1ca:	2800      	cmp	r0, #0
    e1cc:	bf0c      	ite	eq
    e1ce:	2000      	moveq	r0, #0
    e1d0:	2004      	movne	r0, #4
    e1d2:	e7f0      	b.n	e1b6 <sc_smp_check_confirm+0x6a>
	switch (smp->method) {
    e1d4:	2000      	movs	r0, #0
    e1d6:	e7ee      	b.n	e1b6 <sc_smp_check_confirm+0x6a>
    e1d8:	20001fd8 	.word	0x20001fd8
    e1dc:	0002ee40 	.word	0x0002ee40
    e1e0:	0002ee24 	.word	0x0002ee24
    e1e4:	0002b6f4 	.word	0x0002b6f4

0000e1e8 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
    e1e8:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
    e1ea:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    e1ec:	d00a      	beq.n	e204 <sec_level_reachable.isra.0+0x1c>
    e1ee:	d805      	bhi.n	e1fc <sec_level_reachable.isra.0+0x14>
    e1f0:	3801      	subs	r0, #1
    e1f2:	2801      	cmp	r0, #1
    e1f4:	bf8c      	ite	hi
    e1f6:	2000      	movhi	r0, #0
    e1f8:	2001      	movls	r0, #1
}
    e1fa:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
    e1fc:	2804      	cmp	r0, #4
    e1fe:	d010      	beq.n	e222 <sec_level_reachable.isra.0+0x3a>
    e200:	2000      	movs	r0, #0
    e202:	e7fa      	b.n	e1fa <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e204:	f7ff fe86 	bl	df14 <get_io_capa>
    e208:	2803      	cmp	r0, #3
    e20a:	d108      	bne.n	e21e <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
    e20c:	4b0c      	ldr	r3, [pc, #48]	; (e240 <sec_level_reachable.isra.0+0x58>)
    e20e:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e210:	2800      	cmp	r0, #0
    e212:	d0f2      	beq.n	e1fa <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
    e214:	68c0      	ldr	r0, [r0, #12]
    e216:	3800      	subs	r0, #0
    e218:	bf18      	it	ne
    e21a:	2001      	movne	r0, #1
    e21c:	e7ed      	b.n	e1fa <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e21e:	2001      	movs	r0, #1
    e220:	e7eb      	b.n	e1fa <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e222:	f7ff fe77 	bl	df14 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e226:	2803      	cmp	r0, #3
    e228:	d104      	bne.n	e234 <sec_level_reachable.isra.0+0x4c>
    e22a:	4b05      	ldr	r3, [pc, #20]	; (e240 <sec_level_reachable.isra.0+0x58>)
    e22c:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e22e:	b118      	cbz	r0, e238 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e230:	68c0      	ldr	r0, [r0, #12]
    e232:	b108      	cbz	r0, e238 <sec_level_reachable.isra.0+0x50>
    e234:	4b03      	ldr	r3, [pc, #12]	; (e244 <sec_level_reachable.isra.0+0x5c>)
    e236:	7818      	ldrb	r0, [r3, #0]
    e238:	f000 0001 	and.w	r0, r0, #1
    e23c:	e7dd      	b.n	e1fa <sec_level_reachable.isra.0+0x12>
    e23e:	bf00      	nop
    e240:	20001f1c 	.word	0x20001f1c
    e244:	2000356f 	.word	0x2000356f

0000e248 <smp_find>:
{
    e248:	4601      	mov	r1, r0
    e24a:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    e24c:	4803      	ldr	r0, [pc, #12]	; (e25c <smp_find+0x14>)
    e24e:	f01a feda 	bl	29006 <atomic_test_bit>
	return NULL;
    e252:	2800      	cmp	r0, #0
}
    e254:	4802      	ldr	r0, [pc, #8]	; (e260 <smp_find+0x18>)
    e256:	bf08      	it	eq
    e258:	2000      	moveq	r0, #0
    e25a:	bd08      	pop	{r3, pc}
    e25c:	20001724 	.word	0x20001724
    e260:	20001720 	.word	0x20001720

0000e264 <get_pair_method>:
{
    e264:	b538      	push	{r3, r4, r5, lr}
    e266:	4605      	mov	r5, r0
    e268:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e26a:	3004      	adds	r0, #4
    e26c:	2105      	movs	r1, #5
    e26e:	f01a feca 	bl	29006 <atomic_test_bit>
    e272:	b9e8      	cbnz	r0, e2b0 <get_pair_method+0x4c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e274:	2c04      	cmp	r4, #4
    e276:	d81a      	bhi.n	e2ae <get_pair_method+0x4a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e278:	7aeb      	ldrb	r3, [r5, #11]
    e27a:	7caa      	ldrb	r2, [r5, #18]
    e27c:	4013      	ands	r3, r2
    e27e:	07d9      	lsls	r1, r3, #31
    e280:	d42f      	bmi.n	e2e2 <get_pair_method+0x7e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e282:	7ce8      	ldrb	r0, [r5, #19]
    e284:	7b2b      	ldrb	r3, [r5, #12]
    e286:	4303      	orrs	r3, r0
    e288:	f013 0004 	ands.w	r0, r3, #4
    e28c:	d00f      	beq.n	e2ae <get_pair_method+0x4a>
	method = gen_method_legacy[remote_io][get_io_capa()];
    e28e:	f7ff fe41 	bl	df14 <get_io_capa>
    e292:	4b17      	ldr	r3, [pc, #92]	; (e2f0 <get_pair_method+0x8c>)
    e294:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e298:	441c      	add	r4, r3
    e29a:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    e29c:	2804      	cmp	r0, #4
    e29e:	d106      	bne.n	e2ae <get_pair_method+0x4a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    e2a0:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    e2a4:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    e2a6:	2b00      	cmp	r3, #0
    e2a8:	bf0c      	ite	eq
    e2aa:	2002      	moveq	r0, #2
    e2ac:	2001      	movne	r0, #1
}
    e2ae:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    e2b0:	7b2b      	ldrb	r3, [r5, #12]
    e2b2:	7ce8      	ldrb	r0, [r5, #19]
    e2b4:	ea03 0200 	and.w	r2, r3, r0
    e2b8:	0712      	lsls	r2, r2, #28
    e2ba:	d504      	bpl.n	e2c6 <get_pair_method+0x62>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e2bc:	7aea      	ldrb	r2, [r5, #11]
    e2be:	7cad      	ldrb	r5, [r5, #18]
    e2c0:	432a      	orrs	r2, r5
    e2c2:	07d2      	lsls	r2, r2, #31
    e2c4:	d40f      	bmi.n	e2e6 <get_pair_method+0x82>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e2c6:	2c04      	cmp	r4, #4
    e2c8:	d80f      	bhi.n	e2ea <get_pair_method+0x86>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e2ca:	4318      	orrs	r0, r3
    e2cc:	f010 0004 	ands.w	r0, r0, #4
    e2d0:	d0ed      	beq.n	e2ae <get_pair_method+0x4a>
	return gen_method_sc[remote_io][get_io_capa()];
    e2d2:	f7ff fe1f 	bl	df14 <get_io_capa>
    e2d6:	4907      	ldr	r1, [pc, #28]	; (e2f4 <get_pair_method+0x90>)
    e2d8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    e2dc:	440c      	add	r4, r1
    e2de:	5c20      	ldrb	r0, [r4, r0]
    e2e0:	e7e5      	b.n	e2ae <get_pair_method+0x4a>
		return LEGACY_OOB;
    e2e2:	2006      	movs	r0, #6
    e2e4:	e7e3      	b.n	e2ae <get_pair_method+0x4a>
			return LE_SC_OOB;
    e2e6:	4608      	mov	r0, r1
    e2e8:	e7e1      	b.n	e2ae <get_pair_method+0x4a>
		return JUST_WORKS;
    e2ea:	2000      	movs	r0, #0
    e2ec:	e7df      	b.n	e2ae <get_pair_method+0x4a>
    e2ee:	bf00      	nop
    e2f0:	0002f165 	.word	0x0002f165
    e2f4:	0002f17e 	.word	0x0002f17e

0000e2f8 <display_passkey>:
{
    e2f8:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e2fa:	2104      	movs	r1, #4
{
    e2fc:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    e2fe:	30d8      	adds	r0, #216	; 0xd8
    e300:	f005 f8f2 	bl	134e8 <bt_rand>
    e304:	4605      	mov	r5, r0
    e306:	b9e0      	cbnz	r0, e342 <display_passkey+0x4a>
	if (bt_auth && bt_auth->passkey_display) {
    e308:	4e0f      	ldr	r6, [pc, #60]	; (e348 <display_passkey+0x50>)
		smp->passkey %= 1000000;
    e30a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    e30e:	4a0f      	ldr	r2, [pc, #60]	; (e34c <display_passkey+0x54>)
	smp->passkey_round = 0U;
    e310:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
    e314:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    e316:	fbb3 f1f2 	udiv	r1, r3, r2
    e31a:	fb02 3311 	mls	r3, r2, r1, r3
    e31e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
    e322:	b168      	cbz	r0, e340 <display_passkey+0x48>
    e324:	6800      	ldr	r0, [r0, #0]
    e326:	b158      	cbz	r0, e340 <display_passkey+0x48>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e328:	210b      	movs	r1, #11
    e32a:	1d20      	adds	r0, r4, #4
    e32c:	f01a ff01 	bl	29132 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    e330:	6833      	ldr	r3, [r6, #0]
    e332:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    e336:	681b      	ldr	r3, [r3, #0]
    e338:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    e33c:	4798      	blx	r3
	return 0;
    e33e:	4628      	mov	r0, r5
}
    e340:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    e342:	2008      	movs	r0, #8
    e344:	e7fc      	b.n	e340 <display_passkey+0x48>
    e346:	bf00      	nop
    e348:	20001f1c 	.word	0x20001f1c
    e34c:	000f4240 	.word	0x000f4240

0000e350 <smp_init>:
{
    e350:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
    e352:	22f0      	movs	r2, #240	; 0xf0
    e354:	4605      	mov	r5, r0
    e356:	2100      	movs	r1, #0
    e358:	f01c fba0 	bl	2aa9c <memset>
	if (bt_rand(smp->prnd, 16)) {
    e35c:	2110      	movs	r1, #16
    e35e:	f105 0027 	add.w	r0, r5, #39	; 0x27
    e362:	f005 f8c1 	bl	134e8 <bt_rand>
    e366:	4604      	mov	r4, r0
    e368:	b948      	cbnz	r0, e37e <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e36a:	2105      	movs	r1, #5
    e36c:	4628      	mov	r0, r5
    e36e:	f01a fee0 	bl	29132 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e372:	f7fc f87b 	bl	a46c <bt_pub_key_get>
    e376:	4b03      	ldr	r3, [pc, #12]	; (e384 <smp_init+0x34>)
    e378:	6018      	str	r0, [r3, #0]
}
    e37a:	4620      	mov	r0, r4
    e37c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e37e:	2408      	movs	r4, #8
    e380:	e7fb      	b.n	e37a <smp_init+0x2a>
    e382:	bf00      	nop
    e384:	20001fd8 	.word	0x20001fd8

0000e388 <smp_dhkey_generate>:
{
    e388:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e38a:	1d05      	adds	r5, r0, #4
{
    e38c:	b089      	sub	sp, #36	; 0x24
    e38e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e390:	2108      	movs	r1, #8
    e392:	4628      	mov	r0, r5
    e394:	f01a fecd 	bl	29132 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    e398:	490b      	ldr	r1, [pc, #44]	; (e3c8 <smp_dhkey_generate+0x40>)
    e39a:	f104 0057 	add.w	r0, r4, #87	; 0x57
    e39e:	f7fc f875 	bl	a48c <bt_dh_key_gen>
	if (err) {
    e3a2:	b178      	cbz	r0, e3c4 <smp_dhkey_generate+0x3c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e3a4:	2108      	movs	r1, #8
    e3a6:	4628      	mov	r0, r5
    e3a8:	f01a fd3a 	bl	28e20 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
    e3ac:	4b07      	ldr	r3, [pc, #28]	; (e3cc <smp_dhkey_generate+0x44>)
    e3ae:	4808      	ldr	r0, [pc, #32]	; (e3d0 <smp_dhkey_generate+0x48>)
    e3b0:	9306      	str	r3, [sp, #24]
    e3b2:	aa05      	add	r2, sp, #20
    e3b4:	2302      	movs	r3, #2
    e3b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e3ba:	9301      	str	r3, [sp, #4]
    e3bc:	9305      	str	r3, [sp, #20]
    e3be:	f01a fd8d 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    e3c2:	2008      	movs	r0, #8
}
    e3c4:	b009      	add	sp, #36	; 0x24
    e3c6:	bd30      	pop	{r4, r5, pc}
    e3c8:	00029709 	.word	0x00029709
    e3cc:	0002ee59 	.word	0x0002ee59
    e3d0:	0002b6f4 	.word	0x0002b6f4

0000e3d4 <legacy_request_tk>:
{
    e3d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    e3d6:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
    e3da:	4605      	mov	r5, r0
    e3dc:	b088      	sub	sp, #32
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e3de:	7a20      	ldrb	r0, [r4, #8]
    e3e0:	f104 0188 	add.w	r1, r4, #136	; 0x88
    e3e4:	f001 fe0e 	bl	10004 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e3e8:	7a2b      	ldrb	r3, [r5, #8]
    e3ea:	b180      	cbz	r0, e40e <legacy_request_tk+0x3a>
    e3ec:	7b42      	ldrb	r2, [r0, #13]
    e3ee:	07d2      	lsls	r2, r2, #31
    e3f0:	d50d      	bpl.n	e40e <legacy_request_tk+0x3a>
    e3f2:	b963      	cbnz	r3, e40e <legacy_request_tk+0x3a>
		BT_ERR("JustWorks failed, authenticated keys present");
    e3f4:	4b35      	ldr	r3, [pc, #212]	; (e4cc <legacy_request_tk+0xf8>)
    e3f6:	9306      	str	r3, [sp, #24]
    e3f8:	2302      	movs	r3, #2
    e3fa:	9301      	str	r3, [sp, #4]
    e3fc:	9305      	str	r3, [sp, #20]
    e3fe:	aa05      	add	r2, sp, #20
    e400:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e404:	4832      	ldr	r0, [pc, #200]	; (e4d0 <legacy_request_tk+0xfc>)
    e406:	f01a fd69 	bl	28edc <z_log_msg2_static_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
    e40a:	2008      	movs	r0, #8
    e40c:	e01d      	b.n	e44a <legacy_request_tk+0x76>
	switch (smp->method) {
    e40e:	4618      	mov	r0, r3
    e410:	2b06      	cmp	r3, #6
    e412:	d84f      	bhi.n	e4b4 <legacy_request_tk+0xe0>
    e414:	e8df f003 	tbb	[pc, r3]
    e418:	4e1b4419 	.word	0x4e1b4419
    e41c:	4e4e      	.short	0x4e4e
    e41e:	04          	.byte	0x04
    e41f:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    e420:	4e2c      	ldr	r6, [pc, #176]	; (e4d4 <legacy_request_tk+0x100>)
    e422:	6833      	ldr	r3, [r6, #0]
    e424:	2b00      	cmp	r3, #0
    e426:	d04f      	beq.n	e4c8 <legacy_request_tk+0xf4>
    e428:	68db      	ldr	r3, [r3, #12]
    e42a:	2b00      	cmp	r3, #0
    e42c:	d04c      	beq.n	e4c8 <legacy_request_tk+0xf4>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e42e:	210a      	movs	r1, #10
    e430:	1d28      	adds	r0, r5, #4
			struct bt_conn_oob_info info = {
    e432:	2400      	movs	r4, #0
    e434:	f8ad 4008 	strh.w	r4, [sp, #8]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e438:	f01a fe7b 	bl	29132 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    e43c:	6833      	ldr	r3, [r6, #0]
    e43e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    e442:	68db      	ldr	r3, [r3, #12]
    e444:	a902      	add	r1, sp, #8
    e446:	4798      	blx	r3
	return 0;
    e448:	2000      	movs	r0, #0
}
    e44a:	b008      	add	sp, #32
    e44c:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
    e44e:	2104      	movs	r1, #4
    e450:	a802      	add	r0, sp, #8
    e452:	f005 f849 	bl	134e8 <bt_rand>
    e456:	2800      	cmp	r0, #0
    e458:	d1d7      	bne.n	e40a <legacy_request_tk+0x36>
			passkey %= 1000000;
    e45a:	9b02      	ldr	r3, [sp, #8]
    e45c:	4a1e      	ldr	r2, [pc, #120]	; (e4d8 <legacy_request_tk+0x104>)
		if (bt_auth && bt_auth->passkey_display) {
    e45e:	4e1d      	ldr	r6, [pc, #116]	; (e4d4 <legacy_request_tk+0x100>)
			passkey %= 1000000;
    e460:	fbb3 f1f2 	udiv	r1, r3, r2
    e464:	fb02 3311 	mls	r3, r2, r1, r3
    e468:	9302      	str	r3, [sp, #8]
		if (bt_auth && bt_auth->passkey_display) {
    e46a:	6833      	ldr	r3, [r6, #0]
    e46c:	b153      	cbz	r3, e484 <legacy_request_tk+0xb0>
    e46e:	681b      	ldr	r3, [r3, #0]
    e470:	b143      	cbz	r3, e484 <legacy_request_tk+0xb0>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    e472:	210b      	movs	r1, #11
    e474:	1d28      	adds	r0, r5, #4
    e476:	f01a fe5c 	bl	29132 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    e47a:	6833      	ldr	r3, [r6, #0]
    e47c:	9902      	ldr	r1, [sp, #8]
    e47e:	681b      	ldr	r3, [r3, #0]
    e480:	4620      	mov	r0, r4
    e482:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    e484:	9b02      	ldr	r3, [sp, #8]
	dst[0] = val;
    e486:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
	dst[1] = val >> 8;
    e48a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    e48e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    e490:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	dst[1] = val >> 8;
    e494:	0a1b      	lsrs	r3, r3, #8
    e496:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
    e49a:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
    e49e:	e7d3      	b.n	e448 <legacy_request_tk+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    e4a0:	1d28      	adds	r0, r5, #4
    e4a2:	210a      	movs	r1, #10
    e4a4:	f01a fe45 	bl	29132 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    e4a8:	4b0a      	ldr	r3, [pc, #40]	; (e4d4 <legacy_request_tk+0x100>)
    e4aa:	681b      	ldr	r3, [r3, #0]
    e4ac:	4620      	mov	r0, r4
    e4ae:	685b      	ldr	r3, [r3, #4]
    e4b0:	4798      	blx	r3
    e4b2:	e7c9      	b.n	e448 <legacy_request_tk+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e4b4:	4a09      	ldr	r2, [pc, #36]	; (e4dc <legacy_request_tk+0x108>)
	switch (smp->method) {
    e4b6:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e4ba:	2303      	movs	r3, #3
    e4bc:	9301      	str	r3, [sp, #4]
    e4be:	9305      	str	r3, [sp, #20]
    e4c0:	aa05      	add	r2, sp, #20
    e4c2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e4c6:	e79d      	b.n	e404 <legacy_request_tk+0x30>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    e4c8:	2002      	movs	r0, #2
    e4ca:	e7be      	b.n	e44a <legacy_request_tk+0x76>
    e4cc:	0002ee72 	.word	0x0002ee72
    e4d0:	0002b6f4 	.word	0x0002b6f4
    e4d4:	20001f1c 	.word	0x20001f1c
    e4d8:	000f4240 	.word	0x000f4240
    e4dc:	0002ee24 	.word	0x0002ee24

0000e4e0 <smp_ident_info>:
{
    e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4e2:	460b      	mov	r3, r1
    e4e4:	b085      	sub	sp, #20
    e4e6:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e4e8:	210d      	movs	r1, #13
    e4ea:	3004      	adds	r0, #4
    e4ec:	f01a fd8b 	bl	29006 <atomic_test_bit>
    e4f0:	b328      	cbz	r0, e53e <smp_ident_info+0x5e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e4f2:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e4f4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e4f8:	f103 0788 	add.w	r7, r3, #136	; 0x88
    e4fc:	7a19      	ldrb	r1, [r3, #8]
    e4fe:	463a      	mov	r2, r7
    e500:	2002      	movs	r0, #2
    e502:	f01b f997 	bl	29834 <bt_keys_get_type>
		if (!keys) {
    e506:	4604      	mov	r4, r0
    e508:	b978      	cbnz	r0, e52a <smp_ident_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    e50a:	4638      	mov	r0, r7
    e50c:	f7f9 f858 	bl	75c0 <bt_addr_le_str_real>
    e510:	4b0e      	ldr	r3, [pc, #56]	; (e54c <smp_ident_info+0x6c>)
    e512:	9002      	str	r0, [sp, #8]
    e514:	e9cd 4300 	strd	r4, r3, [sp]
    e518:	4620      	mov	r0, r4
    e51a:	490d      	ldr	r1, [pc, #52]	; (e550 <smp_ident_info+0x70>)
    e51c:	4623      	mov	r3, r4
    e51e:	2201      	movs	r2, #1
    e520:	f01a fcdf 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    e524:	2008      	movs	r0, #8
}
    e526:	b005      	add	sp, #20
    e528:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e52a:	462b      	mov	r3, r5
    e52c:	342a      	adds	r4, #42	; 0x2a
    e52e:	f105 0210 	add.w	r2, r5, #16
    e532:	f853 1b04 	ldr.w	r1, [r3], #4
    e536:	f844 1b04 	str.w	r1, [r4], #4
    e53a:	4293      	cmp	r3, r2
    e53c:	d1f9      	bne.n	e532 <smp_ident_info+0x52>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e53e:	4630      	mov	r0, r6
    e540:	2109      	movs	r1, #9
    e542:	f01a fdf6 	bl	29132 <atomic_set_bit>
	return 0;
    e546:	2000      	movs	r0, #0
    e548:	e7ed      	b.n	e526 <smp_ident_info+0x46>
    e54a:	bf00      	nop
    e54c:	0002ee9f 	.word	0x0002ee9f
    e550:	0002b6f4 	.word	0x0002b6f4

0000e554 <smp_encrypt_info>:
{
    e554:	b5f0      	push	{r4, r5, r6, r7, lr}
    e556:	460b      	mov	r3, r1
    e558:	b085      	sub	sp, #20
    e55a:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e55c:	210d      	movs	r1, #13
    e55e:	3004      	adds	r0, #4
    e560:	f01a fd51 	bl	29006 <atomic_test_bit>
    e564:	b328      	cbz	r0, e5b2 <smp_encrypt_info+0x5e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e566:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e568:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e56c:	f103 0788 	add.w	r7, r3, #136	; 0x88
    e570:	7a19      	ldrb	r1, [r3, #8]
    e572:	463a      	mov	r2, r7
    e574:	2004      	movs	r0, #4
    e576:	f01b f95d 	bl	29834 <bt_keys_get_type>
		if (!keys) {
    e57a:	4604      	mov	r4, r0
    e57c:	b978      	cbnz	r0, e59e <smp_encrypt_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    e57e:	4638      	mov	r0, r7
    e580:	f7f9 f81e 	bl	75c0 <bt_addr_le_str_real>
    e584:	4b0e      	ldr	r3, [pc, #56]	; (e5c0 <smp_encrypt_info+0x6c>)
    e586:	9002      	str	r0, [sp, #8]
    e588:	e9cd 4300 	strd	r4, r3, [sp]
    e58c:	4620      	mov	r0, r4
    e58e:	490d      	ldr	r1, [pc, #52]	; (e5c4 <smp_encrypt_info+0x70>)
    e590:	4623      	mov	r3, r4
    e592:	2201      	movs	r2, #1
    e594:	f01a fca5 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    e598:	2008      	movs	r0, #8
}
    e59a:	b005      	add	sp, #20
    e59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e59e:	462b      	mov	r3, r5
    e5a0:	341a      	adds	r4, #26
    e5a2:	f105 0210 	add.w	r2, r5, #16
    e5a6:	f853 1b04 	ldr.w	r1, [r3], #4
    e5aa:	f844 1b04 	str.w	r1, [r4], #4
    e5ae:	4293      	cmp	r3, r2
    e5b0:	d1f9      	bne.n	e5a6 <smp_encrypt_info+0x52>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
    e5b2:	4630      	mov	r0, r6
    e5b4:	2107      	movs	r1, #7
    e5b6:	f01a fdbc 	bl	29132 <atomic_set_bit>
	return 0;
    e5ba:	2000      	movs	r0, #0
    e5bc:	e7ed      	b.n	e59a <smp_encrypt_info+0x46>
    e5be:	bf00      	nop
    e5c0:	0002ee9f 	.word	0x0002ee9f
    e5c4:	0002b6f4 	.word	0x0002b6f4

0000e5c8 <bt_smp_distribute_keys>:
{
    e5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e5cc:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    e5ce:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (!keys) {
    e5d2:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
{
    e5d6:	b095      	sub	sp, #84	; 0x54
	if (!keys) {
    e5d8:	b985      	cbnz	r5, e5fc <bt_smp_distribute_keys+0x34>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    e5da:	3088      	adds	r0, #136	; 0x88
    e5dc:	f7f8 fff0 	bl	75c0 <bt_addr_le_str_real>
    e5e0:	4b44      	ldr	r3, [pc, #272]	; (e6f4 <bt_smp_distribute_keys+0x12c>)
    e5e2:	9002      	str	r0, [sp, #8]
    e5e4:	e9cd 5300 	strd	r5, r3, [sp]
    e5e8:	4628      	mov	r0, r5
    e5ea:	4943      	ldr	r1, [pc, #268]	; (e6f8 <bt_smp_distribute_keys+0x130>)
    e5ec:	462b      	mov	r3, r5
    e5ee:	2201      	movs	r2, #1
    e5f0:	f01a fc77 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    e5f4:	2008      	movs	r0, #8
}
    e5f6:	b015      	add	sp, #84	; 0x54
    e5f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e5fc:	1d27      	adds	r7, r4, #4
    e5fe:	2105      	movs	r1, #5
    e600:	4638      	mov	r0, r7
    e602:	f01a fd00 	bl	29006 <atomic_test_bit>
    e606:	b9c8      	cbnz	r0, e63c <bt_smp_distribute_keys+0x74>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    e608:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    e60c:	f010 0001 	ands.w	r0, r0, #1
    e610:	d0f1      	beq.n	e5f6 <bt_smp_distribute_keys+0x2e>
	struct bt_keys *keys = conn->le.keys;
    e612:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
    e616:	211a      	movs	r1, #26
    e618:	a80d      	add	r0, sp, #52	; 0x34
	struct bt_keys *keys = conn->le.keys;
    e61a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    e61e:	f004 ff63 	bl	134e8 <bt_rand>
    e622:	4680      	mov	r8, r0
    e624:	b160      	cbz	r0, e640 <bt_smp_distribute_keys+0x78>
			BT_ERR("Unable to get random bytes");
    e626:	4b35      	ldr	r3, [pc, #212]	; (e6fc <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Central Ident buffer");
    e628:	930a      	str	r3, [sp, #40]	; 0x28
    e62a:	4833      	ldr	r0, [pc, #204]	; (e6f8 <bt_smp_distribute_keys+0x130>)
    e62c:	2302      	movs	r3, #2
    e62e:	aa09      	add	r2, sp, #36	; 0x24
    e630:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e634:	9305      	str	r3, [sp, #20]
    e636:	9309      	str	r3, [sp, #36]	; 0x24
    e638:	f01a fc50 	bl	28edc <z_log_msg2_static_create.constprop.0>
	return 0;
    e63c:	2000      	movs	r0, #0
    e63e:	e7da      	b.n	e5f6 <bt_smp_distribute_keys+0x2e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    e640:	2106      	movs	r1, #6
    e642:	4620      	mov	r0, r4
    e644:	f01a fd9a 	bl	2917c <smp_create_pdu.constprop.0>
		if (!buf) {
    e648:	4606      	mov	r6, r0
    e64a:	b908      	cbnz	r0, e650 <bt_smp_distribute_keys+0x88>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    e64c:	4b2c      	ldr	r3, [pc, #176]	; (e700 <bt_smp_distribute_keys+0x138>)
    e64e:	e7eb      	b.n	e628 <bt_smp_distribute_keys+0x60>
    e650:	2110      	movs	r1, #16
    e652:	3008      	adds	r0, #8
    e654:	f01b f979 	bl	2994a <net_buf_simple_add>
    e658:	7b2a      	ldrb	r2, [r5, #12]
    e65a:	a90d      	add	r1, sp, #52	; 0x34
    e65c:	4681      	mov	r9, r0
    e65e:	f01c f9fc 	bl	2aa5a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    e662:	7b28      	ldrb	r0, [r5, #12]
    e664:	280f      	cmp	r0, #15
    e666:	d805      	bhi.n	e674 <bt_smp_distribute_keys+0xac>
__ssp_bos_icheck3(memset, void *, int)
    e668:	f1c0 0210 	rsb	r2, r0, #16
    e66c:	4641      	mov	r1, r8
    e66e:	4448      	add	r0, r9
    e670:	f01c fa14 	bl	2aa9c <memset>
		smp_send(smp, buf, NULL, NULL);
    e674:	4631      	mov	r1, r6
    e676:	2200      	movs	r2, #0
    e678:	4620      	mov	r0, r4
    e67a:	f01a fc12 	bl	28ea2 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
    e67e:	2107      	movs	r1, #7
    e680:	4620      	mov	r0, r4
    e682:	f01a fd7b 	bl	2917c <smp_create_pdu.constprop.0>
		if (!buf) {
    e686:	4606      	mov	r6, r0
    e688:	b908      	cbnz	r0, e68e <bt_smp_distribute_keys+0xc6>
			BT_ERR("Unable to allocate Central Ident buffer");
    e68a:	4b1e      	ldr	r3, [pc, #120]	; (e704 <bt_smp_distribute_keys+0x13c>)
    e68c:	e7cc      	b.n	e628 <bt_smp_distribute_keys+0x60>
    e68e:	210a      	movs	r1, #10
    e690:	3008      	adds	r0, #8
    e692:	f01b f95a 	bl	2994a <net_buf_simple_add>
    e696:	aa11      	add	r2, sp, #68	; 0x44
    e698:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    e69a:	ca03      	ldmia	r2!, {r0, r1}
    e69c:	f8c3 0002 	str.w	r0, [r3, #2]
    e6a0:	f8c3 1006 	str.w	r1, [r3, #6]
    e6a4:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    e6a8:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    e6aa:	4620      	mov	r0, r4
    e6ac:	4631      	mov	r1, r6
    e6ae:	4a16      	ldr	r2, [pc, #88]	; (e708 <bt_smp_distribute_keys+0x140>)
    e6b0:	f01a fbf7 	bl	28ea2 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e6b4:	210d      	movs	r1, #13
    e6b6:	4638      	mov	r0, r7
    e6b8:	f01a fca5 	bl	29006 <atomic_test_bit>
    e6bc:	ac11      	add	r4, sp, #68	; 0x44
    e6be:	2800      	cmp	r0, #0
    e6c0:	d0bc      	beq.n	e63c <bt_smp_distribute_keys+0x74>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
    e6c2:	2101      	movs	r1, #1
    e6c4:	4628      	mov	r0, r5
    e6c6:	f01b f8c5 	bl	29854 <bt_keys_add_type>
    e6ca:	f105 064a 	add.w	r6, r5, #74	; 0x4a
    e6ce:	ab0d      	add	r3, sp, #52	; 0x34
    e6d0:	461a      	mov	r2, r3
    e6d2:	ca03      	ldmia	r2!, {r0, r1}
    e6d4:	42a2      	cmp	r2, r4
    e6d6:	6030      	str	r0, [r6, #0]
    e6d8:	6071      	str	r1, [r6, #4]
    e6da:	4613      	mov	r3, r2
    e6dc:	f106 0608 	add.w	r6, r6, #8
    e6e0:	d1f6      	bne.n	e6d0 <bt_smp_distribute_keys+0x108>
    e6e2:	4623      	mov	r3, r4
    e6e4:	cb03      	ldmia	r3!, {r0, r1}
    e6e6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    e6ea:	6428      	str	r0, [r5, #64]	; 0x40
    e6ec:	6469      	str	r1, [r5, #68]	; 0x44
    e6ee:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    e6f2:	e7a3      	b.n	e63c <bt_smp_distribute_keys+0x74>
    e6f4:	0002eeb9 	.word	0x0002eeb9
    e6f8:	0002b6f4 	.word	0x0002b6f4
    e6fc:	0002eece 	.word	0x0002eece
    e700:	0002eee9 	.word	0x0002eee9
    e704:	0002ef10 	.word	0x0002ef10
    e708:	00029809 	.word	0x00029809

0000e70c <smp_send_pairing_req>:
{
    e70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e710:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    e712:	f7ff fc97 	bl	e044 <smp_chan_get>
	if (!smp) {
    e716:	4606      	mov	r6, r0
    e718:	2800      	cmp	r0, #0
    e71a:	d071      	beq.n	e800 <smp_send_pairing_req+0xf4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e71c:	1d07      	adds	r7, r0, #4
    e71e:	2104      	movs	r1, #4
    e720:	4638      	mov	r0, r7
    e722:	f01a fc70 	bl	29006 <atomic_test_bit>
    e726:	4604      	mov	r4, r0
    e728:	2800      	cmp	r0, #0
    e72a:	d16c      	bne.n	e806 <smp_send_pairing_req+0xfa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e72c:	2102      	movs	r1, #2
    e72e:	4638      	mov	r0, r7
    e730:	f01a fc69 	bl	29006 <atomic_test_bit>
    e734:	b930      	cbnz	r0, e744 <smp_send_pairing_req+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e736:	2103      	movs	r1, #3
    e738:	4638      	mov	r0, r7
    e73a:	f01a fc64 	bl	29006 <atomic_test_bit>
    e73e:	b120      	cbz	r0, e74a <smp_send_pairing_req+0x3e>
		return -EBUSY;
    e740:	f06f 040f 	mvn.w	r4, #15
}
    e744:	4620      	mov	r0, r4
    e746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e74a:	2101      	movs	r1, #1
    e74c:	4638      	mov	r0, r7
    e74e:	f01a fc5a 	bl	29006 <atomic_test_bit>
    e752:	2800      	cmp	r0, #0
    e754:	d1f4      	bne.n	e740 <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
    e756:	7aa8      	ldrb	r0, [r5, #10]
    e758:	f7ff fd46 	bl	e1e8 <sec_level_reachable.isra.0>
    e75c:	2800      	cmp	r0, #0
    e75e:	d055      	beq.n	e80c <smp_send_pairing_req+0x100>
	if (!conn->le.keys) {
    e760:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e764:	b13b      	cbz	r3, e776 <smp_send_pairing_req+0x6a>
	if (smp_init(smp)) {
    e766:	4630      	mov	r0, r6
    e768:	f7ff fdf2 	bl	e350 <smp_init>
    e76c:	4604      	mov	r4, r0
    e76e:	b170      	cbz	r0, e78e <smp_send_pairing_req+0x82>
		return -ENOBUFS;
    e770:	f06f 0468 	mvn.w	r4, #104	; 0x68
    e774:	e7e6      	b.n	e744 <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e776:	7a28      	ldrb	r0, [r5, #8]
    e778:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e77c:	f001 fbb4 	bl	fee8 <bt_keys_get_addr>
    e780:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e784:	2800      	cmp	r0, #0
    e786:	d1ee      	bne.n	e766 <smp_send_pairing_req+0x5a>
			return -ENOMEM;
    e788:	f06f 040b 	mvn.w	r4, #11
    e78c:	e7da      	b.n	e744 <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    e78e:	2101      	movs	r1, #1
    e790:	4630      	mov	r0, r6
    e792:	f01a fcf3 	bl	2917c <smp_create_pdu.constprop.0>
	if (!req_buf) {
    e796:	4680      	mov	r8, r0
    e798:	2800      	cmp	r0, #0
    e79a:	d0e9      	beq.n	e770 <smp_send_pairing_req+0x64>
    e79c:	2106      	movs	r1, #6
    e79e:	3008      	adds	r0, #8
    e7a0:	f01b f8d3 	bl	2994a <net_buf_simple_add>
    e7a4:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e7a6:	2009      	movs	r0, #9
    e7a8:	f7ff fc08 	bl	dfbc <get_auth.constprop.0>
    e7ac:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    e7ae:	f7ff fbb1 	bl	df14 <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e7b2:	4b18      	ldr	r3, [pc, #96]	; (e814 <smp_send_pairing_req+0x108>)
	req->io_capability = get_io_capa();
    e7b4:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e7b6:	781b      	ldrb	r3, [r3, #0]
    e7b8:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e7ba:	2310      	movs	r3, #16
    e7bc:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
    e7be:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
    e7c2:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    e7c4:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    e7c8:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    e7ca:	f885 9005 	strb.w	r9, [r5, #5]
	smp->local_dist = SEND_KEYS;
    e7ce:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e7d2:	7273      	strb	r3, [r6, #9]
    e7d4:	682b      	ldr	r3, [r5, #0]
    e7d6:	f8c6 300a 	str.w	r3, [r6, #10]
    e7da:	88ab      	ldrh	r3, [r5, #4]
    e7dc:	81f3      	strh	r3, [r6, #14]
	smp_send(smp, req_buf, NULL, NULL);
    e7de:	4622      	mov	r2, r4
    e7e0:	4641      	mov	r1, r8
    e7e2:	4630      	mov	r0, r6
    e7e4:	f01a fb5d 	bl	28ea2 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    e7e8:	4630      	mov	r0, r6
    e7ea:	2102      	movs	r1, #2
    e7ec:	f01a fca1 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    e7f0:	210b      	movs	r1, #11
    e7f2:	f01a fc9e 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e7f6:	4649      	mov	r1, r9
    e7f8:	4638      	mov	r0, r7
    e7fa:	f01a fc9a 	bl	29132 <atomic_set_bit>
	return 0;
    e7fe:	e7a1      	b.n	e744 <smp_send_pairing_req+0x38>
		return -ENOTCONN;
    e800:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    e804:	e79e      	b.n	e744 <smp_send_pairing_req+0x38>
		return -EIO;
    e806:	f06f 0404 	mvn.w	r4, #4
    e80a:	e79b      	b.n	e744 <smp_send_pairing_req+0x38>
		return -EINVAL;
    e80c:	f06f 0415 	mvn.w	r4, #21
    e810:	e798      	b.n	e744 <smp_send_pairing_req+0x38>
    e812:	bf00      	nop
    e814:	2000356e 	.word	0x2000356e

0000e818 <smp_security_request>:
{
    e818:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e81a:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
    e81c:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
    e820:	688b      	ldr	r3, [r1, #8]
{
    e822:	b08b      	sub	sp, #44	; 0x2c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    e824:	2102      	movs	r1, #2
    e826:	4620      	mov	r0, r4
    e828:	f01a fbed 	bl	29006 <atomic_test_bit>
    e82c:	b110      	cbz	r0, e834 <smp_security_request+0x1c>
	return 0;
    e82e:	2000      	movs	r0, #0
}
    e830:	b00b      	add	sp, #44	; 0x2c
    e832:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e834:	2103      	movs	r1, #3
    e836:	4620      	mov	r0, r4
    e838:	f01a fbe5 	bl	29006 <atomic_test_bit>
    e83c:	2800      	cmp	r0, #0
    e83e:	d1f6      	bne.n	e82e <smp_security_request+0x16>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e840:	2101      	movs	r1, #1
    e842:	4620      	mov	r0, r4
    e844:	f01a fbdf 	bl	29006 <atomic_test_bit>
    e848:	2800      	cmp	r0, #0
    e84a:	d1f0      	bne.n	e82e <smp_security_request+0x16>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e84c:	781e      	ldrb	r6, [r3, #0]
	if (sc_supported) {
    e84e:	4b36      	ldr	r3, [pc, #216]	; (e928 <smp_security_request+0x110>)
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	b17b      	cbz	r3, e874 <smp_security_request+0x5c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    e854:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
    e858:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e85c:	b16b      	cbz	r3, e87a <smp_security_request+0x62>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    e85e:	89db      	ldrh	r3, [r3, #14]
    e860:	f003 0324 	and.w	r3, r3, #36	; 0x24
    e864:	b9d3      	cbnz	r3, e89c <smp_security_request+0x84>
	if (smp_send_pairing_req(conn) < 0) {
    e866:	4628      	mov	r0, r5
    e868:	f7ff ff50 	bl	e70c <smp_send_pairing_req>
    e86c:	2800      	cmp	r0, #0
    e86e:	db54      	blt.n	e91a <smp_security_request+0x102>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e870:	210f      	movs	r1, #15
    e872:	e055      	b.n	e920 <smp_security_request+0x108>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    e874:	f006 0607 	and.w	r6, r6, #7
    e878:	e7ee      	b.n	e858 <smp_security_request+0x40>
					     &conn->le.dst);
    e87a:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    e87e:	7a29      	ldrb	r1, [r5, #8]
    e880:	463a      	mov	r2, r7
    e882:	2020      	movs	r0, #32
    e884:	f001 fb6e 	bl	ff64 <bt_keys_find>
    e888:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e88c:	b930      	cbnz	r0, e89c <smp_security_request+0x84>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    e88e:	7a29      	ldrb	r1, [r5, #8]
    e890:	463a      	mov	r2, r7
    e892:	2004      	movs	r0, #4
    e894:	f001 fb66 	bl	ff64 <bt_keys_find>
    e898:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
    e89c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    e8a0:	2900      	cmp	r1, #0
    e8a2:	d0e0      	beq.n	e866 <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    e8a4:	0777      	lsls	r7, r6, #29
    e8a6:	d51c      	bpl.n	e8e2 <smp_security_request+0xca>
    e8a8:	7b4b      	ldrb	r3, [r1, #13]
    e8aa:	07d8      	lsls	r0, r3, #31
    e8ac:	d419      	bmi.n	e8e2 <smp_security_request+0xca>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    e8ae:	f7ff fb31 	bl	df14 <get_io_capa>
    e8b2:	2803      	cmp	r0, #3
    e8b4:	d009      	beq.n	e8ca <smp_security_request+0xb2>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e8b6:	4b1d      	ldr	r3, [pc, #116]	; (e92c <smp_security_request+0x114>)
    e8b8:	e9cd 3608 	strd	r3, r6, [sp, #32]
    e8bc:	2303      	movs	r3, #3
    e8be:	9303      	str	r3, [sp, #12]
    e8c0:	9307      	str	r3, [sp, #28]
    e8c2:	aa07      	add	r2, sp, #28
    e8c4:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    e8c8:	e007      	b.n	e8da <smp_security_request+0xc2>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    e8ca:	4b19      	ldr	r3, [pc, #100]	; (e930 <smp_security_request+0x118>)
    e8cc:	9003      	str	r0, [sp, #12]
    e8ce:	e9cd 3608 	strd	r3, r6, [sp, #32]
    e8d2:	9007      	str	r0, [sp, #28]
    e8d4:	aa07      	add	r2, sp, #28
    e8d6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    e8da:	4816      	ldr	r0, [pc, #88]	; (e934 <smp_security_request+0x11c>)
    e8dc:	f01a fafe 	bl	28edc <z_log_msg2_static_create.constprop.0>
		goto pair;
    e8e0:	e7c1      	b.n	e866 <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_SC) &&
    e8e2:	0732      	lsls	r2, r6, #28
    e8e4:	d502      	bpl.n	e8ec <smp_security_request+0xd4>
    e8e6:	89cb      	ldrh	r3, [r1, #14]
    e8e8:	069b      	lsls	r3, r3, #26
    e8ea:	d5e4      	bpl.n	e8b6 <smp_security_request+0x9e>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    e8ec:	7b0b      	ldrb	r3, [r1, #12]
    e8ee:	9300      	str	r3, [sp, #0]
    e8f0:	f101 0218 	add.w	r2, r1, #24
    e8f4:	f101 031a 	add.w	r3, r1, #26
    e8f8:	4628      	mov	r0, r5
    e8fa:	3110      	adds	r1, #16
    e8fc:	f018 ff29 	bl	27752 <bt_conn_le_start_encryption>
    e900:	2800      	cmp	r0, #0
    e902:	da0c      	bge.n	e91e <smp_security_request+0x106>
		BT_ERR("Failed to start encryption");
    e904:	4b0c      	ldr	r3, [pc, #48]	; (e938 <smp_security_request+0x120>)
    e906:	9308      	str	r3, [sp, #32]
    e908:	480a      	ldr	r0, [pc, #40]	; (e934 <smp_security_request+0x11c>)
    e90a:	2302      	movs	r3, #2
    e90c:	aa07      	add	r2, sp, #28
    e90e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e912:	9303      	str	r3, [sp, #12]
    e914:	9307      	str	r3, [sp, #28]
    e916:	f01a fae1 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    e91a:	2008      	movs	r0, #8
    e91c:	e788      	b.n	e830 <smp_security_request+0x18>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    e91e:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e920:	4620      	mov	r0, r4
    e922:	f01a fc06 	bl	29132 <atomic_set_bit>
    e926:	e782      	b.n	e82e <smp_security_request+0x16>
    e928:	2000356f 	.word	0x2000356f
    e92c:	0002ef38 	.word	0x0002ef38
    e930:	0002ef5f 	.word	0x0002ef5f
    e934:	0002b6f4 	.word	0x0002b6f4
    e938:	0002ef8e 	.word	0x0002ef8e

0000e93c <smp_send_pairing_confirm>:
{
    e93c:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
    e93e:	7a04      	ldrb	r4, [r0, #8]
    e940:	2c02      	cmp	r4, #2
{
    e942:	b08a      	sub	sp, #40	; 0x28
    e944:	4605      	mov	r5, r0
	switch (smp->method) {
    e946:	d823      	bhi.n	e990 <smp_send_pairing_confirm+0x54>
    e948:	b144      	cbz	r4, e95c <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    e94a:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
    e94e:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
    e952:	40dc      	lsrs	r4, r3
    e954:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    e958:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    e95c:	2103      	movs	r1, #3
    e95e:	4628      	mov	r0, r5
    e960:	f01a fc0c 	bl	2917c <smp_create_pdu.constprop.0>
	if (!buf) {
    e964:	4606      	mov	r6, r0
    e966:	b308      	cbz	r0, e9ac <smp_send_pairing_confirm+0x70>
    e968:	2110      	movs	r1, #16
    e96a:	3008      	adds	r0, #8
    e96c:	f01a ffed 	bl	2994a <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    e970:	9000      	str	r0, [sp, #0]
    e972:	4816      	ldr	r0, [pc, #88]	; (e9cc <smp_send_pairing_confirm+0x90>)
    e974:	4623      	mov	r3, r4
    e976:	6800      	ldr	r0, [r0, #0]
    e978:	f105 0227 	add.w	r2, r5, #39	; 0x27
    e97c:	f105 0157 	add.w	r1, r5, #87	; 0x57
    e980:	f01a fb1c 	bl	28fbc <smp_f4>
    e984:	4604      	mov	r4, r0
    e986:	b1a8      	cbz	r0, e9b4 <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    e988:	4630      	mov	r0, r6
    e98a:	f011 f9ed 	bl	1fd68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    e98e:	e00d      	b.n	e9ac <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    e990:	2c03      	cmp	r4, #3
    e992:	d00d      	beq.n	e9b0 <smp_send_pairing_confirm+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e994:	4b0e      	ldr	r3, [pc, #56]	; (e9d0 <smp_send_pairing_confirm+0x94>)
    e996:	480f      	ldr	r0, [pc, #60]	; (e9d4 <smp_send_pairing_confirm+0x98>)
	switch (smp->method) {
    e998:	e9cd 3408 	strd	r3, r4, [sp, #32]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    e99c:	aa07      	add	r2, sp, #28
    e99e:	2303      	movs	r3, #3
    e9a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e9a4:	9303      	str	r3, [sp, #12]
    e9a6:	9307      	str	r3, [sp, #28]
    e9a8:	f01a fa98 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    e9ac:	2008      	movs	r0, #8
    e9ae:	e00b      	b.n	e9c8 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    e9b0:	2400      	movs	r4, #0
    e9b2:	e7d3      	b.n	e95c <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    e9b4:	4602      	mov	r2, r0
    e9b6:	4631      	mov	r1, r6
    e9b8:	4628      	mov	r0, r5
    e9ba:	f01a fa72 	bl	28ea2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    e9be:	1d28      	adds	r0, r5, #4
    e9c0:	4621      	mov	r1, r4
    e9c2:	f01a fa2d 	bl	28e20 <atomic_clear_bit>
	return 0;
    e9c6:	4620      	mov	r0, r4
}
    e9c8:	b00a      	add	sp, #40	; 0x28
    e9ca:	bd70      	pop	{r4, r5, r6, pc}
    e9cc:	20001fd8 	.word	0x20001fd8
    e9d0:	0002ee24 	.word	0x0002ee24
    e9d4:	0002b6f4 	.word	0x0002b6f4

0000e9d8 <smp_pairing_req>:
{
    e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e9dc:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9de:	78fb      	ldrb	r3, [r7, #3]
    e9e0:	3b07      	subs	r3, #7
    e9e2:	2b09      	cmp	r3, #9
{
    e9e4:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9e6:	f200 80bf 	bhi.w	eb68 <smp_pairing_req+0x190>
	struct bt_conn *conn = smp->chan.chan.conn;
    e9ea:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
    e9ee:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e9f2:	b16b      	cbz	r3, ea10 <smp_pairing_req+0x38>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e9f4:	1d26      	adds	r6, r4, #4
    e9f6:	210f      	movs	r1, #15
    e9f8:	4630      	mov	r0, r6
    e9fa:	f01a fb04 	bl	29006 <atomic_test_bit>
    e9fe:	b998      	cbnz	r0, ea28 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
    ea00:	4620      	mov	r0, r4
    ea02:	f7ff fca5 	bl	e350 <smp_init>
		if (ret) {
    ea06:	b178      	cbz	r0, ea28 <smp_pairing_req+0x50>
			return ret;
    ea08:	b2c5      	uxtb	r5, r0
}
    ea0a:	4628      	mov	r0, r5
    ea0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ea10:	f898 0008 	ldrb.w	r0, [r8, #8]
    ea14:	f108 0188 	add.w	r1, r8, #136	; 0x88
    ea18:	f001 fa66 	bl	fee8 <bt_keys_get_addr>
    ea1c:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
    ea20:	2800      	cmp	r0, #0
    ea22:	d1e7      	bne.n	e9f4 <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
    ea24:	2508      	movs	r5, #8
    ea26:	e7f0      	b.n	ea0a <smp_pairing_req+0x32>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ea28:	2301      	movs	r3, #1
    ea2a:	7263      	strb	r3, [r4, #9]
    ea2c:	683b      	ldr	r3, [r7, #0]
    ea2e:	f8c4 300a 	str.w	r3, [r4, #10]
    ea32:	88bb      	ldrh	r3, [r7, #4]
    ea34:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ea36:	2302      	movs	r3, #2
    ea38:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
    ea3a:	78b8      	ldrb	r0, [r7, #2]
    ea3c:	f7ff fabe 	bl	dfbc <get_auth.constprop.0>
    ea40:	74e0      	strb	r0, [r4, #19]
    ea42:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    ea44:	f7ff fa66 	bl	df14 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea48:	4b49      	ldr	r3, [pc, #292]	; (eb70 <smp_pairing_req+0x198>)
	rsp->io_capability = get_io_capa();
    ea4a:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea4c:	781b      	ldrb	r3, [r3, #0]
    ea4e:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ea50:	2310      	movs	r3, #16
    ea52:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    ea54:	793b      	ldrb	r3, [r7, #4]
    ea56:	f003 0303 	and.w	r3, r3, #3
    ea5a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    ea5c:	797b      	ldrb	r3, [r7, #5]
    ea5e:	f003 0301 	and.w	r3, r3, #1
    ea62:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea64:	072b      	lsls	r3, r5, #28
    ea66:	d50c      	bpl.n	ea82 <smp_pairing_req+0xaa>
    ea68:	78bb      	ldrb	r3, [r7, #2]
    ea6a:	071d      	lsls	r5, r3, #28
    ea6c:	d509      	bpl.n	ea82 <smp_pairing_req+0xaa>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ea6e:	2105      	movs	r1, #5
    ea70:	4630      	mov	r0, r6
    ea72:	f01a fb5e 	bl	29132 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    ea76:	7d63      	ldrb	r3, [r4, #21]
    ea78:	f003 0302 	and.w	r3, r3, #2
    ea7c:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ea7e:	2300      	movs	r3, #0
    ea80:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ea82:	7ce3      	ldrb	r3, [r4, #19]
    ea84:	0698      	lsls	r0, r3, #26
    ea86:	d506      	bpl.n	ea96 <smp_pairing_req+0xbe>
    ea88:	78bb      	ldrb	r3, [r7, #2]
    ea8a:	0699      	lsls	r1, r3, #26
    ea8c:	d503      	bpl.n	ea96 <smp_pairing_req+0xbe>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ea8e:	2114      	movs	r1, #20
    ea90:	4630      	mov	r0, r6
    ea92:	f01a fb4e 	bl	29132 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ea96:	7da3      	ldrb	r3, [r4, #22]
    ea98:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
    ea9c:	7d63      	ldrb	r3, [r4, #21]
    ea9e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    eaa2:	7ce3      	ldrb	r3, [r4, #19]
    eaa4:	07da      	lsls	r2, r3, #31
    eaa6:	d506      	bpl.n	eab6 <smp_pairing_req+0xde>
    eaa8:	78bb      	ldrb	r3, [r7, #2]
    eaaa:	07db      	lsls	r3, r3, #31
    eaac:	d503      	bpl.n	eab6 <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    eaae:	210d      	movs	r1, #13
    eab0:	4630      	mov	r0, r6
    eab2:	f01a fb3e 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    eab6:	2103      	movs	r1, #3
    eab8:	4630      	mov	r0, r6
    eaba:	f01a fb3a 	bl	29132 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
    eabe:	7839      	ldrb	r1, [r7, #0]
    eac0:	4620      	mov	r0, r4
    eac2:	f7ff fbcf 	bl	e264 <get_pair_method>
    eac6:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
    eac8:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
    eacc:	4620      	mov	r0, r4
    eace:	f01a fad1 	bl	29074 <update_keys_check>
    ead2:	2800      	cmp	r0, #0
    ead4:	d04a      	beq.n	eb6c <smp_pairing_req+0x194>
	err = remote_sec_level_reachable(smp);
    ead6:	4620      	mov	r0, r4
    ead8:	f01a faed 	bl	290b6 <remote_sec_level_reachable>
	if (err) {
    eadc:	4605      	mov	r5, r0
    eade:	2800      	cmp	r0, #0
    eae0:	d193      	bne.n	ea0a <smp_pairing_req+0x32>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eae2:	2105      	movs	r1, #5
    eae4:	4630      	mov	r0, r6
    eae6:	f01a fa8e 	bl	29006 <atomic_test_bit>
    eaea:	bb30      	cbnz	r0, eb3a <smp_pairing_req+0x162>
	ret = legacy_request_tk(smp);
    eaec:	4620      	mov	r0, r4
    eaee:	f7ff fc71 	bl	e3d4 <legacy_request_tk>
	if (ret) {
    eaf2:	4605      	mov	r5, r0
    eaf4:	2800      	cmp	r0, #0
    eaf6:	d188      	bne.n	ea0a <smp_pairing_req+0x32>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eaf8:	7a25      	ldrb	r5, [r4, #8]
    eafa:	b99d      	cbnz	r5, eb24 <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eafc:	210f      	movs	r1, #15
    eafe:	4630      	mov	r0, r6
    eb00:	f01a fa81 	bl	29006 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb04:	b970      	cbnz	r0, eb24 <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb06:	4f1b      	ldr	r7, [pc, #108]	; (eb74 <smp_pairing_req+0x19c>)
    eb08:	683b      	ldr	r3, [r7, #0]
    eb0a:	b15b      	cbz	r3, eb24 <smp_pairing_req+0x14c>
	    bt_auth && bt_auth->pairing_confirm) {
    eb0c:	695b      	ldr	r3, [r3, #20]
    eb0e:	b14b      	cbz	r3, eb24 <smp_pairing_req+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eb10:	4630      	mov	r0, r6
    eb12:	210a      	movs	r1, #10
    eb14:	f01a fb0d 	bl	29132 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    eb18:	683b      	ldr	r3, [r7, #0]
    eb1a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    eb1e:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    eb20:	4798      	blx	r3
		return 0;
    eb22:	e772      	b.n	ea0a <smp_pairing_req+0x32>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    eb24:	2103      	movs	r1, #3
    eb26:	4620      	mov	r0, r4
    eb28:	f01a fb03 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    eb2c:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    eb2e:	f01a fb00 	bl	29132 <atomic_set_bit>
}
    eb32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    eb36:	f01a bb40 	b.w	291ba <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb3a:	7a25      	ldrb	r5, [r4, #8]
    eb3c:	b98d      	cbnz	r5, eb62 <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb3e:	210f      	movs	r1, #15
    eb40:	4630      	mov	r0, r6
    eb42:	f01a fa60 	bl	29006 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb46:	b960      	cbnz	r0, eb62 <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb48:	4f0a      	ldr	r7, [pc, #40]	; (eb74 <smp_pairing_req+0x19c>)
    eb4a:	683b      	ldr	r3, [r7, #0]
    eb4c:	b14b      	cbz	r3, eb62 <smp_pairing_req+0x18a>
	    bt_auth && bt_auth->pairing_confirm) {
    eb4e:	695b      	ldr	r3, [r3, #20]
    eb50:	b13b      	cbz	r3, eb62 <smp_pairing_req+0x18a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eb52:	4630      	mov	r0, r6
    eb54:	210a      	movs	r1, #10
    eb56:	f01a faec 	bl	29132 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    eb5a:	683b      	ldr	r3, [r7, #0]
    eb5c:	4640      	mov	r0, r8
    eb5e:	695b      	ldr	r3, [r3, #20]
    eb60:	e7de      	b.n	eb20 <smp_pairing_req+0x148>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    eb62:	210c      	movs	r1, #12
    eb64:	4620      	mov	r0, r4
    eb66:	e7e2      	b.n	eb2e <smp_pairing_req+0x156>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    eb68:	2506      	movs	r5, #6
    eb6a:	e74e      	b.n	ea0a <smp_pairing_req+0x32>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    eb6c:	2503      	movs	r5, #3
    eb6e:	e74c      	b.n	ea0a <smp_pairing_req+0x32>
    eb70:	2000356e 	.word	0x2000356e
    eb74:	20001f1c 	.word	0x20001f1c

0000eb78 <sc_send_public_key>:
{
    eb78:	b570      	push	{r4, r5, r6, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eb7a:	210c      	movs	r1, #12
{
    eb7c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    eb7e:	f01a fafd 	bl	2917c <smp_create_pdu.constprop.0>
	if (!req_buf) {
    eb82:	4604      	mov	r4, r0
    eb84:	b1f8      	cbz	r0, ebc6 <sc_send_public_key+0x4e>
    eb86:	2140      	movs	r1, #64	; 0x40
    eb88:	3008      	adds	r0, #8
    eb8a:	f01a fede 	bl	2994a <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    eb8e:	4b0f      	ldr	r3, [pc, #60]	; (ebcc <sc_send_public_key+0x54>)
    eb90:	681b      	ldr	r3, [r3, #0]
    eb92:	4602      	mov	r2, r0
    eb94:	4601      	mov	r1, r0
    eb96:	f103 0020 	add.w	r0, r3, #32
    eb9a:	f853 6b04 	ldr.w	r6, [r3], #4
    eb9e:	f841 6b04 	str.w	r6, [r1], #4
    eba2:	4283      	cmp	r3, r0
    eba4:	d1f9      	bne.n	eb9a <sc_send_public_key+0x22>
    eba6:	3220      	adds	r2, #32
    eba8:	f103 0120 	add.w	r1, r3, #32
    ebac:	f853 0b04 	ldr.w	r0, [r3], #4
    ebb0:	f842 0b04 	str.w	r0, [r2], #4
    ebb4:	428b      	cmp	r3, r1
    ebb6:	d1f9      	bne.n	ebac <sc_send_public_key+0x34>
	smp_send(smp, req_buf, NULL, NULL);
    ebb8:	4628      	mov	r0, r5
    ebba:	2200      	movs	r2, #0
    ebbc:	4621      	mov	r1, r4
    ebbe:	f01a f970 	bl	28ea2 <smp_send.constprop.0>
	return 0;
    ebc2:	2000      	movs	r0, #0
}
    ebc4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ebc6:	2008      	movs	r0, #8
    ebc8:	e7fc      	b.n	ebc4 <sc_send_public_key+0x4c>
    ebca:	bf00      	nop
    ebcc:	20001fd8 	.word	0x20001fd8

0000ebd0 <smp_public_key_periph>:
{
    ebd0:	b530      	push	{r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ebd2:	1d05      	adds	r5, r0, #4
{
    ebd4:	b089      	sub	sp, #36	; 0x24
    ebd6:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ebd8:	210e      	movs	r1, #14
    ebda:	4628      	mov	r0, r5
    ebdc:	f01a fa13 	bl	29006 <atomic_test_bit>
    ebe0:	b9a0      	cbnz	r0, ec0c <smp_public_key_periph+0x3c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    ebe2:	4b2d      	ldr	r3, [pc, #180]	; (ec98 <smp_public_key_periph+0xc8>)
    ebe4:	2220      	movs	r2, #32
    ebe6:	6819      	ldr	r1, [r3, #0]
    ebe8:	f104 0057 	add.w	r0, r4, #87	; 0x57
    ebec:	f01b ff25 	bl	2aa3a <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ebf0:	b960      	cbnz	r0, ec0c <smp_public_key_periph+0x3c>
		BT_WARN("Remote public key rejected");
    ebf2:	4b2a      	ldr	r3, [pc, #168]	; (ec9c <smp_public_key_periph+0xcc>)
    ebf4:	9306      	str	r3, [sp, #24]
    ebf6:	2302      	movs	r3, #2
    ebf8:	9301      	str	r3, [sp, #4]
    ebfa:	9305      	str	r3, [sp, #20]
    ebfc:	aa05      	add	r2, sp, #20
    ebfe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ec02:	4827      	ldr	r0, [pc, #156]	; (eca0 <smp_public_key_periph+0xd0>)
    ec04:	f01a f96a 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    ec08:	2008      	movs	r0, #8
    ec0a:	e012      	b.n	ec32 <smp_public_key_periph+0x62>
	err = sc_send_public_key(smp);
    ec0c:	4620      	mov	r0, r4
    ec0e:	f7ff ffb3 	bl	eb78 <sc_send_public_key>
	if (err) {
    ec12:	b970      	cbnz	r0, ec32 <smp_public_key_periph+0x62>
	switch (smp->method) {
    ec14:	7a23      	ldrb	r3, [r4, #8]
    ec16:	2b05      	cmp	r3, #5
    ec18:	d834      	bhi.n	ec84 <smp_public_key_periph+0xb4>
    ec1a:	e8df f003 	tbb	[pc, r3]
    ec1e:	1903      	.short	0x1903
    ec20:	3033030c 	.word	0x3033030c
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ec24:	2104      	movs	r1, #4
    ec26:	4620      	mov	r0, r4
    ec28:	f01a fa83 	bl	29132 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ec2c:	f7ff fe86 	bl	e93c <smp_send_pairing_confirm>
		if (err) {
    ec30:	b1f8      	cbz	r0, ec72 <smp_public_key_periph+0xa2>
}
    ec32:	b009      	add	sp, #36	; 0x24
    ec34:	bd30      	pop	{r4, r5, pc}
		err = display_passkey(smp);
    ec36:	4620      	mov	r0, r4
    ec38:	f7ff fb5e 	bl	e2f8 <display_passkey>
		if (err) {
    ec3c:	2800      	cmp	r0, #0
    ec3e:	d1f8      	bne.n	ec32 <smp_public_key_periph+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ec40:	2103      	movs	r1, #3
    ec42:	4620      	mov	r0, r4
    ec44:	f01a fa75 	bl	29132 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    ec48:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ec4a:	f01a fa72 	bl	29132 <atomic_set_bit>
		break;
    ec4e:	e010      	b.n	ec72 <smp_public_key_periph+0xa2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ec50:	4620      	mov	r0, r4
    ec52:	2103      	movs	r1, #3
    ec54:	f01a fa6d 	bl	29132 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    ec58:	210e      	movs	r1, #14
    ec5a:	f01a fa6a 	bl	29132 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec5e:	4628      	mov	r0, r5
    ec60:	210a      	movs	r1, #10
    ec62:	f01a fa66 	bl	29132 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    ec66:	4b0f      	ldr	r3, [pc, #60]	; (eca4 <smp_public_key_periph+0xd4>)
    ec68:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    ec6c:	681b      	ldr	r3, [r3, #0]
    ec6e:	685b      	ldr	r3, [r3, #4]
    ec70:	4798      	blx	r3
	return generate_dhkey(smp);
    ec72:	4620      	mov	r0, r4
}
    ec74:	b009      	add	sp, #36	; 0x24
    ec76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return generate_dhkey(smp);
    ec7a:	f01a ba6e 	b.w	2915a <generate_dhkey>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ec7e:	2104      	movs	r1, #4
    ec80:	4620      	mov	r0, r4
    ec82:	e7e2      	b.n	ec4a <smp_public_key_periph+0x7a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ec84:	4a08      	ldr	r2, [pc, #32]	; (eca8 <smp_public_key_periph+0xd8>)
	switch (smp->method) {
    ec86:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ec8a:	2303      	movs	r3, #3
    ec8c:	9301      	str	r3, [sp, #4]
    ec8e:	9305      	str	r3, [sp, #20]
    ec90:	aa05      	add	r2, sp, #20
    ec92:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ec96:	e7b4      	b.n	ec02 <smp_public_key_periph+0x32>
    ec98:	20001fd8 	.word	0x20001fd8
    ec9c:	0002efa9 	.word	0x0002efa9
    eca0:	0002b6f4 	.word	0x0002b6f4
    eca4:	20001f1c 	.word	0x20001f1c
    eca8:	0002ee24 	.word	0x0002ee24

0000ecac <smp_public_key>:
{
    ecac:	b5f0      	push	{r4, r5, r6, r7, lr}
    ecae:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    ecb0:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
    ecb4:	b089      	sub	sp, #36	; 0x24
    ecb6:	4604      	mov	r4, r0
    ecb8:	463a      	mov	r2, r7
    ecba:	f103 0120 	add.w	r1, r3, #32
    ecbe:	f853 0b04 	ldr.w	r0, [r3], #4
    ecc2:	f842 0b04 	str.w	r0, [r2], #4
    ecc6:	428b      	cmp	r3, r1
    ecc8:	d1f9      	bne.n	ecbe <smp_public_key+0x12>
    ecca:	f104 0277 	add.w	r2, r4, #119	; 0x77
    ecce:	f103 0120 	add.w	r1, r3, #32
    ecd2:	f853 0b04 	ldr.w	r0, [r3], #4
    ecd6:	f842 0b04 	str.w	r0, [r2], #4
    ecda:	428b      	cmp	r3, r1
    ecdc:	d1f9      	bne.n	ecd2 <smp_public_key+0x26>
	if (bt_pub_key_is_debug(smp->pkey)) {
    ecde:	4638      	mov	r0, r7
    ece0:	f7fb fb1e 	bl	a320 <bt_pub_key_is_debug>
    ece4:	bb08      	cbnz	r0, ed2a <smp_public_key+0x7e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    ece6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ecea:	78db      	ldrb	r3, [r3, #3]
    ecec:	2b00      	cmp	r3, #0
    ecee:	f040 80a2 	bne.w	ee36 <smp_public_key+0x18a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ecf2:	1d26      	adds	r6, r4, #4
    ecf4:	210e      	movs	r1, #14
    ecf6:	4630      	mov	r0, r6
    ecf8:	f01a f985 	bl	29006 <atomic_test_bit>
    ecfc:	2800      	cmp	r0, #0
    ecfe:	d13e      	bne.n	ed7e <smp_public_key+0xd2>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    ed00:	4b55      	ldr	r3, [pc, #340]	; (ee58 <smp_public_key+0x1ac>)
    ed02:	2220      	movs	r2, #32
    ed04:	6819      	ldr	r1, [r3, #0]
    ed06:	4638      	mov	r0, r7
    ed08:	f01b fe97 	bl	2aa3a <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ed0c:	2800      	cmp	r0, #0
    ed0e:	d136      	bne.n	ed7e <smp_public_key+0xd2>
			BT_WARN("Remote public key rejected");
    ed10:	4b52      	ldr	r3, [pc, #328]	; (ee5c <smp_public_key+0x1b0>)
    ed12:	9306      	str	r3, [sp, #24]
    ed14:	2302      	movs	r3, #2
    ed16:	9301      	str	r3, [sp, #4]
    ed18:	9305      	str	r3, [sp, #20]
    ed1a:	aa05      	add	r2, sp, #20
    ed1c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Unknown pairing method (%u)", smp->method);
    ed20:	484f      	ldr	r0, [pc, #316]	; (ee60 <smp_public_key+0x1b4>)
    ed22:	f01a f8db 	bl	28edc <z_log_msg2_static_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
    ed26:	2008      	movs	r0, #8
    ed28:	e027      	b.n	ed7a <smp_public_key+0xce>
		BT_INFO("Remote is using Debug Public key");
    ed2a:	4b4e      	ldr	r3, [pc, #312]	; (ee64 <smp_public_key+0x1b8>)
    ed2c:	484c      	ldr	r0, [pc, #304]	; (ee60 <smp_public_key+0x1b4>)
    ed2e:	9306      	str	r3, [sp, #24]
    ed30:	aa05      	add	r2, sp, #20
    ed32:	2302      	movs	r3, #2
    ed34:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    ed38:	9301      	str	r3, [sp, #4]
    ed3a:	9305      	str	r3, [sp, #20]
    ed3c:	f01a f8ce 	bl	28edc <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    ed40:	210e      	movs	r1, #14
    ed42:	1d20      	adds	r0, r4, #4
    ed44:	f01a f9f5 	bl	29132 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    ed48:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
    ed4c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ed50:	b933      	cbnz	r3, ed60 <smp_public_key+0xb4>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    ed52:	7a28      	ldrb	r0, [r5, #8]
    ed54:	f105 0188 	add.w	r1, r5, #136	; 0x88
    ed58:	f001 f8c6 	bl	fee8 <bt_keys_get_addr>
    ed5c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    ed60:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ed64:	2b00      	cmp	r3, #0
    ed66:	d0be      	beq.n	ece6 <smp_public_key+0x3a>
    ed68:	89da      	ldrh	r2, [r3, #14]
    ed6a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ed6e:	2a00      	cmp	r2, #0
    ed70:	d0b9      	beq.n	ece6 <smp_public_key+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    ed72:	7b5b      	ldrb	r3, [r3, #13]
    ed74:	079b      	lsls	r3, r3, #30
    ed76:	d4b6      	bmi.n	ece6 <smp_public_key+0x3a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ed78:	2003      	movs	r0, #3
}
    ed7a:	b009      	add	sp, #36	; 0x24
    ed7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (smp->method) {
    ed7e:	7a23      	ldrb	r3, [r4, #8]
    ed80:	2b05      	cmp	r3, #5
    ed82:	d84e      	bhi.n	ee22 <smp_public_key+0x176>
    ed84:	e8df f003 	tbb	[pc, r3]
    ed88:	03081e03 	.word	0x03081e03
    ed8c:	2a4d      	.short	0x2a4d
			atomic_set_bit(smp->allowed_cmds,
    ed8e:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
    ed90:	4620      	mov	r0, r4
    ed92:	f01a f9ce 	bl	29132 <atomic_set_bit>
			break;
    ed96:	e00f      	b.n	edb8 <smp_public_key+0x10c>
			err = display_passkey(smp);
    ed98:	4620      	mov	r0, r4
    ed9a:	f7ff faad 	bl	e2f8 <display_passkey>
			if (err) {
    ed9e:	2800      	cmp	r0, #0
    eda0:	d1eb      	bne.n	ed7a <smp_public_key+0xce>
			atomic_set_bit(smp->allowed_cmds,
    eda2:	2103      	movs	r1, #3
    eda4:	4620      	mov	r0, r4
    eda6:	f01a f9c4 	bl	29132 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
    edaa:	210e      	movs	r1, #14
    edac:	f01a f9c1 	bl	29132 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    edb0:	f7ff fdc4 	bl	e93c <smp_send_pairing_confirm>
			if (err) {
    edb4:	2800      	cmp	r0, #0
    edb6:	d1e0      	bne.n	ed7a <smp_public_key+0xce>
		return generate_dhkey(smp);
    edb8:	4620      	mov	r0, r4
}
    edba:	b009      	add	sp, #36	; 0x24
    edbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
    edc0:	f01a b9cb 	b.w	2915a <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    edc4:	210a      	movs	r1, #10
    edc6:	4630      	mov	r0, r6
    edc8:	f01a f9b3 	bl	29132 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    edcc:	4b26      	ldr	r3, [pc, #152]	; (ee68 <smp_public_key+0x1bc>)
    edce:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    edd2:	681b      	ldr	r3, [r3, #0]
    edd4:	685b      	ldr	r3, [r3, #4]
    edd6:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
    edd8:	210e      	movs	r1, #14
    edda:	e7d9      	b.n	ed90 <smp_public_key+0xe4>
			if (bt_rand(smp->prnd, 16)) {
    eddc:	2110      	movs	r1, #16
    edde:	f104 0027 	add.w	r0, r4, #39	; 0x27
    ede2:	f004 fb81 	bl	134e8 <bt_rand>
    ede6:	4605      	mov	r5, r0
    ede8:	2800      	cmp	r0, #0
    edea:	d19c      	bne.n	ed26 <smp_public_key+0x7a>
			if (bt_auth && bt_auth->oob_data_request) {
    edec:	4f1e      	ldr	r7, [pc, #120]	; (ee68 <smp_public_key+0x1bc>)
    edee:	683b      	ldr	r3, [r7, #0]
    edf0:	b383      	cbz	r3, ee54 <smp_public_key+0x1a8>
    edf2:	68db      	ldr	r3, [r3, #12]
    edf4:	b373      	cbz	r3, ee54 <smp_public_key+0x1a8>
				struct bt_conn_oob_info info = {
    edf6:	4b1d      	ldr	r3, [pc, #116]	; (ee6c <smp_public_key+0x1c0>)
				le_sc_oob_config_set(smp, &info);
    edf8:	a902      	add	r1, sp, #8
				struct bt_conn_oob_info info = {
    edfa:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    edfe:	f8ad 3008 	strh.w	r3, [sp, #8]
				le_sc_oob_config_set(smp, &info);
    ee02:	4620      	mov	r0, r4
    ee04:	f019 ffec 	bl	28de0 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
    ee08:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
    ee0a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
    ee0e:	210c      	movs	r1, #12
    ee10:	f01a f98f 	bl	29132 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    ee14:	683b      	ldr	r3, [r7, #0]
    ee16:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    ee1a:	68db      	ldr	r3, [r3, #12]
    ee1c:	a902      	add	r1, sp, #8
    ee1e:	4798      	blx	r3
			break;
    ee20:	e7ca      	b.n	edb8 <smp_public_key+0x10c>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    ee22:	4a13      	ldr	r2, [pc, #76]	; (ee70 <smp_public_key+0x1c4>)
		switch (smp->method) {
    ee24:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_ERR("Unknown pairing method (%u)", smp->method);
    ee28:	2303      	movs	r3, #3
    ee2a:	9301      	str	r3, [sp, #4]
    ee2c:	9305      	str	r3, [sp, #20]
    ee2e:	aa05      	add	r2, sp, #20
    ee30:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ee34:	e774      	b.n	ed20 <smp_public_key+0x74>
	if (!sc_public_key) {
    ee36:	4b08      	ldr	r3, [pc, #32]	; (ee58 <smp_public_key+0x1ac>)
    ee38:	681d      	ldr	r5, [r3, #0]
    ee3a:	b92d      	cbnz	r5, ee48 <smp_public_key+0x19c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    ee3c:	1d20      	adds	r0, r4, #4
    ee3e:	2106      	movs	r1, #6
    ee40:	f01a f977 	bl	29132 <atomic_set_bit>
		return 0;
    ee44:	4628      	mov	r0, r5
    ee46:	e798      	b.n	ed7a <smp_public_key+0xce>
	err = smp_public_key_periph(smp);
    ee48:	4620      	mov	r0, r4
}
    ee4a:	b009      	add	sp, #36	; 0x24
    ee4c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
    ee50:	f7ff bebe 	b.w	ebd0 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    ee54:	2002      	movs	r0, #2
    ee56:	e790      	b.n	ed7a <smp_public_key+0xce>
    ee58:	20001fd8 	.word	0x20001fd8
    ee5c:	0002efa9 	.word	0x0002efa9
    ee60:	0002b6f4 	.word	0x0002b6f4
    ee64:	0002efc4 	.word	0x0002efc4
    ee68:	20001f1c 	.word	0x20001f1c
    ee6c:	0002b818 	.word	0x0002b818
    ee70:	0002ee24 	.word	0x0002ee24

0000ee74 <compute_and_send_central_dhcheck>:
{
    ee74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee78:	4604      	mov	r4, r0
    ee7a:	b094      	sub	sp, #80	; 0x50
	(void)memset(r, 0, sizeof(r));
    ee7c:	2210      	movs	r2, #16
    ee7e:	2100      	movs	r1, #0
    ee80:	a80a      	add	r0, sp, #40	; 0x28
    ee82:	f01b fe0b 	bl	2aa9c <memset>
	switch (smp->method) {
    ee86:	7a23      	ldrb	r3, [r4, #8]
    ee88:	2b05      	cmp	r3, #5
    ee8a:	d837      	bhi.n	eefc <compute_and_send_central_dhcheck+0x88>
    ee8c:	e8df f003 	tbb	[pc, r3]
    ee90:	06030306 	.word	0x06030306
    ee94:	2636      	.short	0x2636
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    ee96:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ee9a:	930a      	str	r3, [sp, #40]	; 0x28
		   &smp->chan.chan.conn->le.init_addr,
    ee9c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
    eea0:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    eea4:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    eea8:	e9cd 6201 	strd	r6, r2, [sp, #4]
    eeac:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    eeb0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    eeb4:	f104 0837 	add.w	r8, r4, #55	; 0x37
    eeb8:	9200      	str	r2, [sp, #0]
    eeba:	338f      	adds	r3, #143	; 0x8f
    eebc:	4642      	mov	r2, r8
    eebe:	4639      	mov	r1, r7
    eec0:	f104 0097 	add.w	r0, r4, #151	; 0x97
    eec4:	f7ff f8da 	bl	e07c <smp_f5>
    eec8:	b340      	cbz	r0, ef1c <compute_and_send_central_dhcheck+0xa8>
		BT_ERR("Calculate LTK failed");
    eeca:	4b24      	ldr	r3, [pc, #144]	; (ef5c <compute_and_send_central_dhcheck+0xe8>)
    eecc:	9312      	str	r3, [sp, #72]	; 0x48
    eece:	2302      	movs	r3, #2
    eed0:	9306      	str	r3, [sp, #24]
    eed2:	9311      	str	r3, [sp, #68]	; 0x44
    eed4:	aa11      	add	r2, sp, #68	; 0x44
    eed6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    eeda:	e018      	b.n	ef0e <compute_and_send_central_dhcheck+0x9a>
		if (smp->oobd_remote) {
    eedc:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    eee0:	2b00      	cmp	r3, #0
    eee2:	d0db      	beq.n	ee9c <compute_and_send_central_dhcheck+0x28>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    eee4:	ad0a      	add	r5, sp, #40	; 0x28
    eee6:	f103 0610 	add.w	r6, r3, #16
    eeea:	6818      	ldr	r0, [r3, #0]
    eeec:	6859      	ldr	r1, [r3, #4]
    eeee:	462a      	mov	r2, r5
    eef0:	c203      	stmia	r2!, {r0, r1}
    eef2:	3308      	adds	r3, #8
    eef4:	42b3      	cmp	r3, r6
    eef6:	4615      	mov	r5, r2
    eef8:	d1f7      	bne.n	eeea <compute_and_send_central_dhcheck+0x76>
    eefa:	e7cf      	b.n	ee9c <compute_and_send_central_dhcheck+0x28>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eefc:	4a18      	ldr	r2, [pc, #96]	; (ef60 <compute_and_send_central_dhcheck+0xec>)
	switch (smp->method) {
    eefe:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ef02:	2303      	movs	r3, #3
    ef04:	9306      	str	r3, [sp, #24]
    ef06:	9311      	str	r3, [sp, #68]	; 0x44
    ef08:	aa11      	add	r2, sp, #68	; 0x44
    ef0a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate LTK failed");
    ef0e:	4815      	ldr	r0, [pc, #84]	; (ef64 <compute_and_send_central_dhcheck+0xf0>)
    ef10:	f019 ffe4 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    ef14:	2008      	movs	r0, #8
}
    ef16:	b014      	add	sp, #80	; 0x50
    ef18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   &smp->chan.chan.conn->le.init_addr,
    ef1c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    ef20:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    ef24:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    ef26:	ad06      	add	r5, sp, #24
    ef28:	9301      	str	r3, [sp, #4]
    ef2a:	f104 030a 	add.w	r3, r4, #10
    ef2e:	9202      	str	r2, [sp, #8]
    ef30:	9300      	str	r3, [sp, #0]
    ef32:	9503      	str	r5, [sp, #12]
    ef34:	ab0a      	add	r3, sp, #40	; 0x28
    ef36:	4642      	mov	r2, r8
    ef38:	4639      	mov	r1, r7
    ef3a:	4630      	mov	r0, r6
    ef3c:	f019 ffee 	bl	28f1c <smp_f6>
    ef40:	b120      	cbz	r0, ef4c <compute_and_send_central_dhcheck+0xd8>
		BT_ERR("Calculate local DHKey check failed");
    ef42:	4b09      	ldr	r3, [pc, #36]	; (ef68 <compute_and_send_central_dhcheck+0xf4>)
    ef44:	9312      	str	r3, [sp, #72]	; 0x48
    ef46:	2302      	movs	r3, #2
    ef48:	9305      	str	r3, [sp, #20]
    ef4a:	e7c2      	b.n	eed2 <compute_and_send_central_dhcheck+0x5e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    ef4c:	210d      	movs	r1, #13
    ef4e:	4620      	mov	r0, r4
    ef50:	f01a f8ef 	bl	29132 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
    ef54:	4629      	mov	r1, r5
    ef56:	f01a f968 	bl	2922a <sc_smp_send_dhkey_check>
    ef5a:	e7dc      	b.n	ef16 <compute_and_send_central_dhcheck+0xa2>
    ef5c:	0002efe5 	.word	0x0002efe5
    ef60:	0002ee24 	.word	0x0002ee24
    ef64:	0002b6f4 	.word	0x0002b6f4
    ef68:	0002effa 	.word	0x0002effa

0000ef6c <compute_and_check_and_send_periph_dhcheck>:
{
    ef6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ef70:	4604      	mov	r4, r0
    ef72:	b099      	sub	sp, #100	; 0x64
	(void)memset(r, 0, sizeof(r));
    ef74:	2210      	movs	r2, #16
    ef76:	2100      	movs	r1, #0
    ef78:	a80e      	add	r0, sp, #56	; 0x38
    ef7a:	f01b fd8f 	bl	2aa9c <memset>
	switch (smp->method) {
    ef7e:	7a23      	ldrb	r3, [r4, #8]
    ef80:	2b05      	cmp	r3, #5
    ef82:	d837      	bhi.n	eff4 <compute_and_check_and_send_periph_dhcheck+0x88>
    ef84:	e8df f003 	tbb	[pc, r3]
    ef88:	06030306 	.word	0x06030306
    ef8c:	2636      	.short	0x2636
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    ef8e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    ef92:	930e      	str	r3, [sp, #56]	; 0x38
		   &smp->chan.chan.conn->le.init_addr,
    ef94:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
    ef98:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ef9c:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    efa0:	e9cd 5201 	strd	r5, r2, [sp, #4]
    efa4:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    efa8:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    efac:	f104 0727 	add.w	r7, r4, #39	; 0x27
    efb0:	9200      	str	r2, [sp, #0]
    efb2:	338f      	adds	r3, #143	; 0x8f
    efb4:	463a      	mov	r2, r7
    efb6:	4631      	mov	r1, r6
    efb8:	f104 0097 	add.w	r0, r4, #151	; 0x97
    efbc:	f7ff f85e 	bl	e07c <smp_f5>
    efc0:	b348      	cbz	r0, f016 <compute_and_check_and_send_periph_dhcheck+0xaa>
		BT_ERR("Calculate LTK failed");
    efc2:	4b45      	ldr	r3, [pc, #276]	; (f0d8 <compute_and_check_and_send_periph_dhcheck+0x16c>)
    efc4:	9316      	str	r3, [sp, #88]	; 0x58
    efc6:	2302      	movs	r3, #2
    efc8:	930a      	str	r3, [sp, #40]	; 0x28
		BT_ERR("Calculate remote DHKey check failed");
    efca:	9315      	str	r3, [sp, #84]	; 0x54
    efcc:	aa15      	add	r2, sp, #84	; 0x54
    efce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    efd2:	e018      	b.n	f006 <compute_and_check_and_send_periph_dhcheck+0x9a>
		if (smp->oobd_remote) {
    efd4:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    efd8:	2b00      	cmp	r3, #0
    efda:	d0db      	beq.n	ef94 <compute_and_check_and_send_periph_dhcheck+0x28>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    efdc:	ad0e      	add	r5, sp, #56	; 0x38
    efde:	f103 0610 	add.w	r6, r3, #16
    efe2:	6818      	ldr	r0, [r3, #0]
    efe4:	6859      	ldr	r1, [r3, #4]
    efe6:	462a      	mov	r2, r5
    efe8:	c203      	stmia	r2!, {r0, r1}
    efea:	3308      	adds	r3, #8
    efec:	42b3      	cmp	r3, r6
    efee:	4615      	mov	r5, r2
    eff0:	d1f7      	bne.n	efe2 <compute_and_check_and_send_periph_dhcheck+0x76>
    eff2:	e7cf      	b.n	ef94 <compute_and_check_and_send_periph_dhcheck+0x28>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eff4:	4a39      	ldr	r2, [pc, #228]	; (f0dc <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
    eff6:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		BT_ERR("Unknown pairing method (%u)", smp->method);
    effa:	2303      	movs	r3, #3
    effc:	930a      	str	r3, [sp, #40]	; 0x28
    effe:	9315      	str	r3, [sp, #84]	; 0x54
    f000:	aa15      	add	r2, sp, #84	; 0x54
    f002:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate remote DHKey check failed");
    f006:	4836      	ldr	r0, [pc, #216]	; (f0e0 <compute_and_check_and_send_periph_dhcheck+0x174>)
		return BT_SMP_ERR_UNSPECIFIED;
    f008:	2508      	movs	r5, #8
		BT_ERR("Calculate remote DHKey check failed");
    f00a:	f019 ff67 	bl	28edc <z_log_msg2_static_create.constprop.0>
}
    f00e:	4628      	mov	r0, r5
    f010:	b019      	add	sp, #100	; 0x64
    f012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		   &smp->chan.chan.conn->le.resp_addr,
    f016:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
    f01a:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    f01e:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    f020:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    f024:	9301      	str	r3, [sp, #4]
    f026:	f104 0311 	add.w	r3, r4, #17
    f02a:	9202      	str	r2, [sp, #8]
    f02c:	9300      	str	r3, [sp, #0]
    f02e:	f8cd 800c 	str.w	r8, [sp, #12]
    f032:	ab0e      	add	r3, sp, #56	; 0x38
    f034:	4632      	mov	r2, r6
    f036:	4639      	mov	r1, r7
    f038:	4628      	mov	r0, r5
    f03a:	f019 ff6f 	bl	28f1c <smp_f6>
    f03e:	b120      	cbz	r0, f04a <compute_and_check_and_send_periph_dhcheck+0xde>
		BT_ERR("Calculate local DHKey check failed");
    f040:	4b28      	ldr	r3, [pc, #160]	; (f0e4 <compute_and_check_and_send_periph_dhcheck+0x178>)
    f042:	9316      	str	r3, [sp, #88]	; 0x58
    f044:	2302      	movs	r3, #2
    f046:	9306      	str	r3, [sp, #24]
    f048:	e7bf      	b.n	efca <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
    f04a:	7a23      	ldrb	r3, [r4, #8]
    f04c:	2b05      	cmp	r3, #5
    f04e:	d10f      	bne.n	f070 <compute_and_check_and_send_periph_dhcheck+0x104>
		if (smp->oobd_local) {
    f050:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    f054:	b331      	cbz	r1, f0a4 <compute_and_check_and_send_periph_dhcheck+0x138>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    f056:	460b      	mov	r3, r1
    f058:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    f05c:	f101 0e10 	add.w	lr, r1, #16
    f060:	6818      	ldr	r0, [r3, #0]
    f062:	6859      	ldr	r1, [r3, #4]
    f064:	4662      	mov	r2, ip
    f066:	c203      	stmia	r2!, {r0, r1}
    f068:	3308      	adds	r3, #8
    f06a:	4573      	cmp	r3, lr
    f06c:	4694      	mov	ip, r2
    f06e:	d1f7      	bne.n	f060 <compute_and_check_and_send_periph_dhcheck+0xf4>
		   &smp->chan.chan.conn->le.init_addr,
    f070:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    f074:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    f078:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    f07a:	f10d 0918 	add.w	r9, sp, #24
    f07e:	9301      	str	r3, [sp, #4]
    f080:	f104 030a 	add.w	r3, r4, #10
    f084:	9202      	str	r2, [sp, #8]
    f086:	9300      	str	r3, [sp, #0]
    f088:	f8cd 900c 	str.w	r9, [sp, #12]
    f08c:	ab0e      	add	r3, sp, #56	; 0x38
    f08e:	463a      	mov	r2, r7
    f090:	4631      	mov	r1, r6
    f092:	4628      	mov	r0, r5
    f094:	f019 ff42 	bl	28f1c <smp_f6>
    f098:	b148      	cbz	r0, f0ae <compute_and_check_and_send_periph_dhcheck+0x142>
		BT_ERR("Calculate remote DHKey check failed");
    f09a:	4b13      	ldr	r3, [pc, #76]	; (f0e8 <compute_and_check_and_send_periph_dhcheck+0x17c>)
    f09c:	9316      	str	r3, [sp, #88]	; 0x58
    f09e:	2302      	movs	r3, #2
    f0a0:	9305      	str	r3, [sp, #20]
    f0a2:	e792      	b.n	efca <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
    f0a4:	2210      	movs	r2, #16
    f0a6:	a80e      	add	r0, sp, #56	; 0x38
    f0a8:	f01b fcf8 	bl	2aa9c <memset>
    f0ac:	e7e0      	b.n	f070 <compute_and_check_and_send_periph_dhcheck+0x104>
	if (memcmp(smp->e, re, 16)) {
    f0ae:	2210      	movs	r2, #16
    f0b0:	4649      	mov	r1, r9
    f0b2:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    f0b6:	f01b fcc0 	bl	2aa3a <memcmp>
    f0ba:	b958      	cbnz	r0, f0d4 <compute_and_check_and_send_periph_dhcheck+0x168>
	err = sc_smp_send_dhkey_check(smp, e);
    f0bc:	4641      	mov	r1, r8
    f0be:	4620      	mov	r0, r4
    f0c0:	f01a f8b3 	bl	2922a <sc_smp_send_dhkey_check>
	if (err) {
    f0c4:	4605      	mov	r5, r0
    f0c6:	2800      	cmp	r0, #0
    f0c8:	d1a1      	bne.n	f00e <compute_and_check_and_send_periph_dhcheck+0xa2>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f0ca:	2101      	movs	r1, #1
    f0cc:	1d20      	adds	r0, r4, #4
    f0ce:	f01a f830 	bl	29132 <atomic_set_bit>
	return 0;
    f0d2:	e79c      	b.n	f00e <compute_and_check_and_send_periph_dhcheck+0xa2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    f0d4:	250b      	movs	r5, #11
    f0d6:	e79a      	b.n	f00e <compute_and_check_and_send_periph_dhcheck+0xa2>
    f0d8:	0002efe5 	.word	0x0002efe5
    f0dc:	0002ee24 	.word	0x0002ee24
    f0e0:	0002b6f4 	.word	0x0002b6f4
    f0e4:	0002effa 	.word	0x0002effa
    f0e8:	0002f01d 	.word	0x0002f01d

0000f0ec <smp_dhkey_check>:
{
    f0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f0f0:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    f0f4:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f0f6:	78fd      	ldrb	r5, [r7, #3]
{
    f0f8:	b096      	sub	sp, #88	; 0x58
    f0fa:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f0fc:	2d00      	cmp	r5, #0
    f0fe:	d173      	bne.n	f1e8 <smp_dhkey_check+0xfc>
		(void)memset(r, 0, sizeof(r));
    f100:	2210      	movs	r2, #16
    f102:	4629      	mov	r1, r5
    f104:	a80c      	add	r0, sp, #48	; 0x30
    f106:	f01b fcc9 	bl	2aa9c <memset>
		switch (smp->method) {
    f10a:	7a23      	ldrb	r3, [r4, #8]
    f10c:	2b05      	cmp	r3, #5
    f10e:	d853      	bhi.n	f1b8 <smp_dhkey_check+0xcc>
    f110:	e8df f003 	tbb	[pc, r3]
    f114:	06030306 	.word	0x06030306
    f118:	4152      	.short	0x4152
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    f11a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    f11e:	930c      	str	r3, [sp, #48]	; 0x30
			   &smp->chan.chan.conn->le.init_addr, e)) {
    f120:	f107 038f 	add.w	r3, r7, #143	; 0x8f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f124:	f10d 0820 	add.w	r8, sp, #32
    f128:	9302      	str	r3, [sp, #8]
			   &smp->chan.chan.conn->le.resp_addr,
    f12a:	3796      	adds	r7, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    f12c:	f104 0311 	add.w	r3, r4, #17
    f130:	9300      	str	r3, [sp, #0]
    f132:	f8cd 800c 	str.w	r8, [sp, #12]
    f136:	9701      	str	r7, [sp, #4]
    f138:	ab0c      	add	r3, sp, #48	; 0x30
    f13a:	f104 0227 	add.w	r2, r4, #39	; 0x27
    f13e:	f104 0137 	add.w	r1, r4, #55	; 0x37
    f142:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    f146:	f019 fee9 	bl	28f1c <smp_f6>
    f14a:	2800      	cmp	r0, #0
    f14c:	d140      	bne.n	f1d0 <smp_dhkey_check+0xe4>
		if (memcmp(e, req->e, 16)) {
    f14e:	2210      	movs	r2, #16
    f150:	4631      	mov	r1, r6
    f152:	4640      	mov	r0, r8
    f154:	f01b fc71 	bl	2aa3a <memcmp>
    f158:	2800      	cmp	r0, #0
    f15a:	d143      	bne.n	f1e4 <smp_dhkey_check+0xf8>
	return MIN(req->max_key_size, rsp->max_key_size);
    f15c:	7b62      	ldrb	r2, [r4, #13]
    f15e:	7d23      	ldrb	r3, [r4, #20]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    f160:	429a      	cmp	r2, r3
    f162:	bf94      	ite	ls
    f164:	9200      	strls	r2, [sp, #0]
    f166:	9300      	strhi	r3, [sp, #0]
		(void)memset(rand, 0, sizeof(rand));
    f168:	e9cd 0006 	strd	r0, r0, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
    f16c:	f8ad 0010 	strh.w	r0, [sp, #16]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    f170:	f104 0347 	add.w	r3, r4, #71	; 0x47
    f174:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    f178:	aa04      	add	r2, sp, #16
    f17a:	a906      	add	r1, sp, #24
    f17c:	f018 fae9 	bl	27752 <bt_conn_le_start_encryption>
    f180:	2800      	cmp	r0, #0
    f182:	da2a      	bge.n	f1da <smp_dhkey_check+0xee>
			BT_ERR("Failed to start encryption");
    f184:	4b2e      	ldr	r3, [pc, #184]	; (f240 <smp_dhkey_check+0x154>)
    f186:	9314      	str	r3, [sp, #80]	; 0x50
    f188:	2302      	movs	r3, #2
    f18a:	9305      	str	r3, [sp, #20]
    f18c:	9313      	str	r3, [sp, #76]	; 0x4c
    f18e:	aa13      	add	r2, sp, #76	; 0x4c
    f190:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f194:	e019      	b.n	f1ca <smp_dhkey_check+0xde>
			if (smp->oobd_local) {
    f196:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    f19a:	2b00      	cmp	r3, #0
    f19c:	d0c0      	beq.n	f120 <smp_dhkey_check+0x34>
				memcpy(r, smp->oobd_local->r, sizeof(r));
    f19e:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    f1a2:	f103 0e10 	add.w	lr, r3, #16
    f1a6:	6818      	ldr	r0, [r3, #0]
    f1a8:	6859      	ldr	r1, [r3, #4]
    f1aa:	4662      	mov	r2, ip
    f1ac:	c203      	stmia	r2!, {r0, r1}
    f1ae:	3308      	adds	r3, #8
    f1b0:	4573      	cmp	r3, lr
    f1b2:	4694      	mov	ip, r2
    f1b4:	d1f7      	bne.n	f1a6 <smp_dhkey_check+0xba>
    f1b6:	e7b3      	b.n	f120 <smp_dhkey_check+0x34>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    f1b8:	4a22      	ldr	r2, [pc, #136]	; (f244 <smp_dhkey_check+0x158>)
		switch (smp->method) {
    f1ba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_ERR("Unknown pairing method (%u)", smp->method);
    f1be:	2303      	movs	r3, #3
    f1c0:	9308      	str	r3, [sp, #32]
    f1c2:	9313      	str	r3, [sp, #76]	; 0x4c
    f1c4:	aa13      	add	r2, sp, #76	; 0x4c
    f1c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_ERR("Failed to start encryption");
    f1ca:	481f      	ldr	r0, [pc, #124]	; (f248 <smp_dhkey_check+0x15c>)
    f1cc:	f019 fe86 	bl	28edc <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f1d0:	2508      	movs	r5, #8
}
    f1d2:	4628      	mov	r0, r5
    f1d4:	b016      	add	sp, #88	; 0x58
    f1d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f1da:	2101      	movs	r1, #1
    f1dc:	1d20      	adds	r0, r4, #4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f1de:	f019 ffa8 	bl	29132 <atomic_set_bit>
			return 0;
    f1e2:	e7f6      	b.n	f1d2 <smp_dhkey_check+0xe6>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    f1e4:	250b      	movs	r5, #11
    f1e6:	e7f4      	b.n	f1d2 <smp_dhkey_check+0xe6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
    f1e8:	2d01      	cmp	r5, #1
    f1ea:	d119      	bne.n	f220 <smp_dhkey_check+0x134>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f1ec:	1d07      	adds	r7, r0, #4
    f1ee:	2110      	movs	r1, #16
    f1f0:	4638      	mov	r0, r7
    f1f2:	f019 fe15 	bl	28e20 <atomic_clear_bit>
    f1f6:	4631      	mov	r1, r6
    f1f8:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
    f1fc:	f106 0210 	add.w	r2, r6, #16
    f200:	f851 0b04 	ldr.w	r0, [r1], #4
    f204:	f843 0b04 	str.w	r0, [r3], #4
    f208:	4291      	cmp	r1, r2
    f20a:	d1f9      	bne.n	f200 <smp_dhkey_check+0x114>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    f20c:	2107      	movs	r1, #7
    f20e:	4638      	mov	r0, r7
    f210:	f019 fef9 	bl	29006 <atomic_test_bit>
    f214:	4605      	mov	r5, r0
    f216:	b128      	cbz	r0, f224 <smp_dhkey_check+0x138>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f218:	2109      	movs	r1, #9
    f21a:	4638      	mov	r0, r7
    f21c:	f019 ff89 	bl	29132 <atomic_set_bit>
	return 0;
    f220:	2500      	movs	r5, #0
    f222:	e7d6      	b.n	f1d2 <smp_dhkey_check+0xe6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f224:	210a      	movs	r1, #10
    f226:	4638      	mov	r0, r7
    f228:	f019 feed 	bl	29006 <atomic_test_bit>
    f22c:	b110      	cbz	r0, f234 <smp_dhkey_check+0x148>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f22e:	2109      	movs	r1, #9
    f230:	4638      	mov	r0, r7
    f232:	e7d4      	b.n	f1de <smp_dhkey_check+0xf2>
		return compute_and_check_and_send_periph_dhcheck(smp);
    f234:	4620      	mov	r0, r4
}
    f236:	b016      	add	sp, #88	; 0x58
    f238:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
    f23c:	f7ff be96 	b.w	ef6c <compute_and_check_and_send_periph_dhcheck>
    f240:	0002ef8e 	.word	0x0002ef8e
    f244:	0002ee24 	.word	0x0002ee24
    f248:	0002b6f4 	.word	0x0002b6f4

0000f24c <bt_smp_connected>:
{
    f24c:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
    f24e:	4905      	ldr	r1, [pc, #20]	; (f264 <bt_smp_connected+0x18>)
    f250:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    f254:	30e8      	adds	r0, #232	; 0xe8
    f256:	f01b f8a2 	bl	2a39e <k_work_init_delayable>
	smp_reset(smp);
    f25a:	4620      	mov	r0, r4
}
    f25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f260:	f01a b801 	b.w	29266 <smp_reset>
    f264:	0000fd6d 	.word	0x0000fd6d

0000f268 <smp_pairing_confirm>:
{
    f268:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    f26a:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f26c:	1d06      	adds	r6, r0, #4
{
    f26e:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f270:	210b      	movs	r1, #11
{
    f272:	b088      	sub	sp, #32
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f274:	4630      	mov	r0, r6
    f276:	f019 fdd3 	bl	28e20 <atomic_clear_bit>
    f27a:	462b      	mov	r3, r5
    f27c:	f104 0217 	add.w	r2, r4, #23
    f280:	f105 0110 	add.w	r1, r5, #16
    f284:	f853 0b04 	ldr.w	r0, [r3], #4
    f288:	f842 0b04 	str.w	r0, [r2], #4
    f28c:	428b      	cmp	r3, r1
    f28e:	d1f9      	bne.n	f284 <smp_pairing_confirm+0x1c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f290:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f294:	78db      	ldrb	r3, [r3, #3]
    f296:	b943      	cbnz	r3, f2aa <smp_pairing_confirm+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f298:	2104      	movs	r1, #4
    f29a:	4620      	mov	r0, r4
    f29c:	f019 ff49 	bl	29132 <atomic_set_bit>
}
    f2a0:	b008      	add	sp, #32
    f2a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
    f2a6:	f019 bfa2 	b.w	291ee <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f2aa:	2105      	movs	r1, #5
    f2ac:	4630      	mov	r0, r6
    f2ae:	f019 feaa 	bl	29006 <atomic_test_bit>
    f2b2:	b928      	cbnz	r0, f2c0 <smp_pairing_confirm+0x58>
		return legacy_pairing_confirm(smp);
    f2b4:	4620      	mov	r0, r4
}
    f2b6:	b008      	add	sp, #32
    f2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    f2bc:	f01a b888 	b.w	293d0 <legacy_pairing_confirm>
	switch (smp->method) {
    f2c0:	7a23      	ldrb	r3, [r4, #8]
    f2c2:	2b01      	cmp	r3, #1
    f2c4:	d00a      	beq.n	f2dc <smp_pairing_confirm+0x74>
    f2c6:	2b02      	cmp	r3, #2
    f2c8:	d115      	bne.n	f2f6 <smp_pairing_confirm+0x8e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f2ca:	2104      	movs	r1, #4
    f2cc:	4620      	mov	r0, r4
    f2ce:	f019 ff30 	bl	29132 <atomic_set_bit>
}
    f2d2:	b008      	add	sp, #32
    f2d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    f2d8:	f7ff bb30 	b.w	e93c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f2dc:	210a      	movs	r1, #10
    f2de:	4630      	mov	r0, r6
    f2e0:	f019 fe91 	bl	29006 <atomic_test_bit>
    f2e4:	2800      	cmp	r0, #0
    f2e6:	d0f0      	beq.n	f2ca <smp_pairing_confirm+0x62>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f2e8:	4630      	mov	r0, r6
    f2ea:	2100      	movs	r1, #0
    f2ec:	f019 ff21 	bl	29132 <atomic_set_bit>
			return 0;
    f2f0:	2000      	movs	r0, #0
}
    f2f2:	b008      	add	sp, #32
    f2f4:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f2f6:	4a07      	ldr	r2, [pc, #28]	; (f314 <smp_pairing_confirm+0xac>)
    f2f8:	4807      	ldr	r0, [pc, #28]	; (f318 <smp_pairing_confirm+0xb0>)
	switch (smp->method) {
    f2fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f2fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f302:	2303      	movs	r3, #3
    f304:	aa05      	add	r2, sp, #20
    f306:	9301      	str	r3, [sp, #4]
    f308:	9305      	str	r3, [sp, #20]
    f30a:	f019 fde7 	bl	28edc <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f30e:	2008      	movs	r0, #8
    f310:	e7ef      	b.n	f2f2 <smp_pairing_confirm+0x8a>
    f312:	bf00      	nop
    f314:	0002ee24 	.word	0x0002ee24
    f318:	0002b6f4 	.word	0x0002b6f4

0000f31c <smp_pairing_rsp>:
{
    f31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    f320:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f322:	78eb      	ldrb	r3, [r5, #3]
    f324:	3b07      	subs	r3, #7
    f326:	2b09      	cmp	r3, #9
{
    f328:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f32a:	f200 80ac 	bhi.w	f486 <smp_pairing_rsp+0x16a>
	smp->local_dist &= rsp->init_key_dist;
    f32e:	792a      	ldrb	r2, [r5, #4]
    f330:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
    f334:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
    f338:	4013      	ands	r3, r2
    f33a:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
    f33e:	796a      	ldrb	r2, [r5, #5]
    f340:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    f344:	4013      	ands	r3, r2
    f346:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f34a:	2302      	movs	r3, #2
    f34c:	7403      	strb	r3, [r0, #16]
    f34e:	682b      	ldr	r3, [r5, #0]
    f350:	f8c0 3011 	str.w	r3, [r0, #17]
    f354:	88ab      	ldrh	r3, [r5, #4]
    f356:	f8a0 3015 	strh.w	r3, [r0, #21]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f35a:	78ab      	ldrb	r3, [r5, #2]
    f35c:	071b      	lsls	r3, r3, #28
    f35e:	d506      	bpl.n	f36e <smp_pairing_rsp+0x52>
    f360:	7b03      	ldrb	r3, [r0, #12]
    f362:	071e      	lsls	r6, r3, #28
    f364:	d503      	bpl.n	f36e <smp_pairing_rsp+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f366:	2105      	movs	r1, #5
    f368:	3004      	adds	r0, #4
    f36a:	f019 fee2 	bl	29132 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f36e:	78ab      	ldrb	r3, [r5, #2]
    f370:	0698      	lsls	r0, r3, #26
    f372:	d506      	bpl.n	f382 <smp_pairing_rsp+0x66>
    f374:	7b23      	ldrb	r3, [r4, #12]
    f376:	0699      	lsls	r1, r3, #26
    f378:	d503      	bpl.n	f382 <smp_pairing_rsp+0x66>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f37a:	2114      	movs	r1, #20
    f37c:	1d20      	adds	r0, r4, #4
    f37e:	f019 fed8 	bl	29132 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f382:	78ab      	ldrb	r3, [r5, #2]
    f384:	07da      	lsls	r2, r3, #31
    f386:	d506      	bpl.n	f396 <smp_pairing_rsp+0x7a>
    f388:	7b23      	ldrb	r3, [r4, #12]
    f38a:	07db      	lsls	r3, r3, #31
    f38c:	d503      	bpl.n	f396 <smp_pairing_rsp+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f38e:	210d      	movs	r1, #13
    f390:	1d20      	adds	r0, r4, #4
    f392:	f019 fece 	bl	29132 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
    f396:	7829      	ldrb	r1, [r5, #0]
    f398:	4620      	mov	r0, r4
    f39a:	f7fe ff63 	bl	e264 <get_pair_method>
    f39e:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
    f3a0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
    f3a4:	4620      	mov	r0, r4
    f3a6:	f019 fe65 	bl	29074 <update_keys_check>
    f3aa:	2800      	cmp	r0, #0
    f3ac:	d06d      	beq.n	f48a <smp_pairing_rsp+0x16e>
	err = remote_sec_level_reachable(smp);
    f3ae:	4620      	mov	r0, r4
    f3b0:	f019 fe81 	bl	290b6 <remote_sec_level_reachable>
	if (err) {
    f3b4:	4605      	mov	r5, r0
    f3b6:	b9f8      	cbnz	r0, f3f8 <smp_pairing_rsp+0xdc>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f3b8:	1d26      	adds	r6, r4, #4
    f3ba:	2105      	movs	r1, #5
    f3bc:	4630      	mov	r0, r6
    f3be:	f019 fe22 	bl	29006 <atomic_test_bit>
    f3c2:	bb88      	cbnz	r0, f428 <smp_pairing_rsp+0x10c>
	ret = legacy_request_tk(smp);
    f3c4:	4620      	mov	r0, r4
    f3c6:	f7ff f805 	bl	e3d4 <legacy_request_tk>
	if (ret) {
    f3ca:	4605      	mov	r5, r0
    f3cc:	b9a0      	cbnz	r0, f3f8 <smp_pairing_rsp+0xdc>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f3ce:	7a23      	ldrb	r3, [r4, #8]
    f3d0:	b9ab      	cbnz	r3, f3fe <smp_pairing_rsp+0xe2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f3d2:	210f      	movs	r1, #15
    f3d4:	4630      	mov	r0, r6
    f3d6:	f019 fe16 	bl	29006 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f3da:	b180      	cbz	r0, f3fe <smp_pairing_rsp+0xe2>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f3dc:	4f2c      	ldr	r7, [pc, #176]	; (f490 <smp_pairing_rsp+0x174>)
    f3de:	683b      	ldr	r3, [r7, #0]
    f3e0:	b16b      	cbz	r3, f3fe <smp_pairing_rsp+0xe2>
	    bt_auth && bt_auth->pairing_confirm) {
    f3e2:	695b      	ldr	r3, [r3, #20]
    f3e4:	b15b      	cbz	r3, f3fe <smp_pairing_rsp+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f3e6:	4630      	mov	r0, r6
    f3e8:	210a      	movs	r1, #10
    f3ea:	f019 fea2 	bl	29132 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f3ee:	683b      	ldr	r3, [r7, #0]
    f3f0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    f3f4:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    f3f6:	4798      	blx	r3
}
    f3f8:	4628      	mov	r0, r5
    f3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f3fe:	210a      	movs	r1, #10
    f400:	4630      	mov	r0, r6
    f402:	f019 fe00 	bl	29006 <atomic_test_bit>
    f406:	b950      	cbnz	r0, f41e <smp_pairing_rsp+0x102>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f408:	4620      	mov	r0, r4
    f40a:	2103      	movs	r1, #3
    f40c:	f019 fe91 	bl	29132 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    f410:	210e      	movs	r1, #14
    f412:	f019 fe8e 	bl	29132 <atomic_set_bit>
}
    f416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
    f41a:	f019 bfa9 	b.w	29370 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f41e:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f420:	4630      	mov	r0, r6
    f422:	f019 fe86 	bl	29132 <atomic_set_bit>
		return 0;
    f426:	e7e7      	b.n	f3f8 <smp_pairing_rsp+0xdc>
	smp->remote_dist &= RECV_KEYS_SC;
    f428:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
    f42c:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
    f430:	f003 0302 	and.w	r3, r3, #2
    f434:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f438:	7a23      	ldrb	r3, [r4, #8]
    f43a:	b9a3      	cbnz	r3, f466 <smp_pairing_rsp+0x14a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f43c:	210f      	movs	r1, #15
    f43e:	4630      	mov	r0, r6
    f440:	f019 fde1 	bl	29006 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f444:	b178      	cbz	r0, f466 <smp_pairing_rsp+0x14a>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f446:	f8df 8048 	ldr.w	r8, [pc, #72]	; f490 <smp_pairing_rsp+0x174>
    f44a:	f8d8 3000 	ldr.w	r3, [r8]
    f44e:	b153      	cbz	r3, f466 <smp_pairing_rsp+0x14a>
	    bt_auth && bt_auth->pairing_confirm) {
    f450:	695b      	ldr	r3, [r3, #20]
    f452:	b143      	cbz	r3, f466 <smp_pairing_rsp+0x14a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f454:	4630      	mov	r0, r6
    f456:	210a      	movs	r1, #10
    f458:	f019 fe6b 	bl	29132 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    f45c:	f8d8 3000 	ldr.w	r3, [r8]
    f460:	4638      	mov	r0, r7
    f462:	695b      	ldr	r3, [r3, #20]
    f464:	e7c7      	b.n	f3f6 <smp_pairing_rsp+0xda>
	if (!sc_public_key) {
    f466:	4b0b      	ldr	r3, [pc, #44]	; (f494 <smp_pairing_rsp+0x178>)
    f468:	681b      	ldr	r3, [r3, #0]
    f46a:	b90b      	cbnz	r3, f470 <smp_pairing_rsp+0x154>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f46c:	2106      	movs	r1, #6
    f46e:	e7d7      	b.n	f420 <smp_pairing_rsp+0x104>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f470:	4620      	mov	r0, r4
    f472:	210c      	movs	r1, #12
    f474:	f019 fe5d 	bl	29132 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    f478:	210b      	movs	r1, #11
    f47a:	f019 fcd1 	bl	28e20 <atomic_clear_bit>
}
    f47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
    f482:	f7ff bb79 	b.w	eb78 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f486:	2506      	movs	r5, #6
    f488:	e7b6      	b.n	f3f8 <smp_pairing_rsp+0xdc>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f48a:	2503      	movs	r5, #3
    f48c:	e7b4      	b.n	f3f8 <smp_pairing_rsp+0xdc>
    f48e:	bf00      	nop
    f490:	20001f1c 	.word	0x20001f1c
    f494:	20001fd8 	.word	0x20001fd8

0000f498 <smp_pairing_random>:
{
    f498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f49c:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f49e:	f100 0937 	add.w	r9, r0, #55	; 0x37
{
    f4a2:	b092      	sub	sp, #72	; 0x48
    f4a4:	4607      	mov	r7, r0
    f4a6:	464a      	mov	r2, r9
    f4a8:	f103 0110 	add.w	r1, r3, #16
    f4ac:	f853 0b04 	ldr.w	r0, [r3], #4
    f4b0:	f842 0b04 	str.w	r0, [r2], #4
    f4b4:	428b      	cmp	r3, r1
    f4b6:	d1f9      	bne.n	f4ac <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f4b8:	f107 0804 	add.w	r8, r7, #4
    f4bc:	2105      	movs	r1, #5
    f4be:	4640      	mov	r0, r8
    f4c0:	f019 fda1 	bl	29006 <atomic_test_bit>
    f4c4:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
    f4c8:	2800      	cmp	r0, #0
    f4ca:	d16c      	bne.n	f5a6 <smp_pairing_random+0x10e>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f4cc:	f10a 0396 	add.w	r3, sl, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f4d0:	f107 0647 	add.w	r6, r7, #71	; 0x47
    f4d4:	ad08      	add	r5, sp, #32
    f4d6:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f4d8:	f10a 038f 	add.w	r3, sl, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f4dc:	9300      	str	r3, [sp, #0]
    f4de:	9502      	str	r5, [sp, #8]
    f4e0:	f107 0310 	add.w	r3, r7, #16
    f4e4:	f107 0209 	add.w	r2, r7, #9
    f4e8:	4649      	mov	r1, r9
    f4ea:	4630      	mov	r0, r6
    f4ec:	f019 fee4 	bl	292b8 <smp_c1>
	if (err) {
    f4f0:	2800      	cmp	r0, #0
    f4f2:	d177      	bne.n	f5e4 <smp_pairing_random+0x14c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f4f4:	2210      	movs	r2, #16
    f4f6:	4629      	mov	r1, r5
    f4f8:	f107 0017 	add.w	r0, r7, #23
    f4fc:	f01b fa9d 	bl	2aa3a <memcmp>
    f500:	2800      	cmp	r0, #0
    f502:	d14b      	bne.n	f59c <smp_pairing_random+0x104>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
    f504:	f89a 4003 	ldrb.w	r4, [sl, #3]
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    f508:	f107 0127 	add.w	r1, r7, #39	; 0x27
    f50c:	462b      	mov	r3, r5
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f50e:	bb44      	cbnz	r4, f562 <smp_pairing_random+0xca>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    f510:	460a      	mov	r2, r1
    f512:	4630      	mov	r0, r6
    f514:	4649      	mov	r1, r9
    f516:	f019 fc99 	bl	28e4c <smp_s1>
		if (err) {
    f51a:	2800      	cmp	r0, #0
    f51c:	d162      	bne.n	f5e4 <smp_pairing_random+0x14c>
	return MIN(req->max_key_size, rsp->max_key_size);
    f51e:	7d3a      	ldrb	r2, [r7, #20]
    f520:	7b7b      	ldrb	r3, [r7, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    f522:	429a      	cmp	r2, r3
    f524:	bf94      	ite	ls
    f526:	9200      	strls	r2, [sp, #0]
    f528:	9300      	strhi	r3, [sp, #0]
    f52a:	a906      	add	r1, sp, #24
    f52c:	462b      	mov	r3, r5
    f52e:	aa04      	add	r2, sp, #16
    f530:	4650      	mov	r0, sl
		(void)memset(rand, 0, sizeof(rand));
    f532:	e9cd 4406 	strd	r4, r4, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
    f536:	f8ad 4010 	strh.w	r4, [sp, #16]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
    f53a:	f018 f90a 	bl	27752 <bt_conn_le_start_encryption>
    f53e:	b158      	cbz	r0, f558 <smp_pairing_random+0xc0>
			BT_ERR("Failed to start encryption");
    f540:	4b81      	ldr	r3, [pc, #516]	; (f748 <smp_pairing_random+0x2b0>)
    f542:	9310      	str	r3, [sp, #64]	; 0x40
    f544:	2302      	movs	r3, #2
    f546:	9305      	str	r3, [sp, #20]
			BT_ERR("Calculate STK failed");
    f548:	930f      	str	r3, [sp, #60]	; 0x3c
    f54a:	aa0f      	add	r2, sp, #60	; 0x3c
    f54c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f550:	487e      	ldr	r0, [pc, #504]	; (f74c <smp_pairing_random+0x2b4>)
    f552:	f019 fcc3 	bl	28edc <z_log_msg2_static_create.constprop.0>
    f556:	e045      	b.n	f5e4 <smp_pairing_random+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f558:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f55a:	4640      	mov	r0, r8
    f55c:	f019 fde9 	bl	29132 <atomic_set_bit>
			return 0;
    f560:	e01d      	b.n	f59e <smp_pairing_random+0x106>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    f562:	464a      	mov	r2, r9
    f564:	4630      	mov	r0, r6
    f566:	f019 fc71 	bl	28e4c <smp_s1>
		if (err) {
    f56a:	b120      	cbz	r0, f576 <smp_pairing_random+0xde>
			BT_ERR("Calculate STK failed");
    f56c:	4b78      	ldr	r3, [pc, #480]	; (f750 <smp_pairing_random+0x2b8>)
    f56e:	9310      	str	r3, [sp, #64]	; 0x40
    f570:	2302      	movs	r3, #2
    f572:	9306      	str	r3, [sp, #24]
    f574:	e7e8      	b.n	f548 <smp_pairing_random+0xb0>
    f576:	aa0c      	add	r2, sp, #48	; 0x30
    f578:	462b      	mov	r3, r5
    f57a:	cb03      	ldmia	r3!, {r0, r1}
    f57c:	4293      	cmp	r3, r2
    f57e:	6030      	str	r0, [r6, #0]
    f580:	6071      	str	r1, [r6, #4]
    f582:	461d      	mov	r5, r3
    f584:	f106 0608 	add.w	r6, r6, #8
    f588:	d1f6      	bne.n	f578 <smp_pairing_random+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f58a:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f58c:	4640      	mov	r0, r8
    f58e:	f019 fdd0 	bl	29132 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f592:	4638      	mov	r0, r7
    f594:	f019 fe2b 	bl	291ee <smp_send_pairing_random>
    f598:	4604      	mov	r4, r0
    f59a:	e000      	b.n	f59e <smp_pairing_random+0x106>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f59c:	2404      	movs	r4, #4
}
    f59e:	4620      	mov	r0, r4
    f5a0:	b012      	add	sp, #72	; 0x48
    f5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f5a6:	f89a 3003 	ldrb.w	r3, [sl, #3]
    f5aa:	2b00      	cmp	r3, #0
    f5ac:	d150      	bne.n	f650 <smp_pairing_random+0x1b8>
		err = sc_smp_check_confirm(smp);
    f5ae:	4638      	mov	r0, r7
    f5b0:	f7fe fdcc 	bl	e14c <sc_smp_check_confirm>
		if (err) {
    f5b4:	4604      	mov	r4, r0
    f5b6:	2800      	cmp	r0, #0
    f5b8:	d1f1      	bne.n	f59e <smp_pairing_random+0x106>
		switch (smp->method) {
    f5ba:	7a3b      	ldrb	r3, [r7, #8]
    f5bc:	2b05      	cmp	r3, #5
    f5be:	f200 80b6 	bhi.w	f72e <smp_pairing_random+0x296>
    f5c2:	e8df f003 	tbb	[pc, r3]
    f5c6:	2038      	.short	0x2038
    f5c8:	38b40320 	.word	0x38b40320
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    f5cc:	ab0c      	add	r3, sp, #48	; 0x30
    f5ce:	4861      	ldr	r0, [pc, #388]	; (f754 <smp_pairing_random+0x2bc>)
    f5d0:	9300      	str	r3, [sp, #0]
    f5d2:	6800      	ldr	r0, [r0, #0]
    f5d4:	464b      	mov	r3, r9
    f5d6:	f107 0227 	add.w	r2, r7, #39	; 0x27
    f5da:	f107 0157 	add.w	r1, r7, #87	; 0x57
    f5de:	f7fe fcbf 	bl	df60 <smp_g2>
    f5e2:	b108      	cbz	r0, f5e8 <smp_pairing_random+0x150>
		return BT_SMP_ERR_UNSPECIFIED;
    f5e4:	2408      	movs	r4, #8
    f5e6:	e7da      	b.n	f59e <smp_pairing_random+0x106>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f5e8:	210a      	movs	r1, #10
    f5ea:	4640      	mov	r0, r8
    f5ec:	f019 fda1 	bl	29132 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f5f0:	2109      	movs	r1, #9
    f5f2:	f019 fd9e 	bl	29132 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f5f6:	4b58      	ldr	r3, [pc, #352]	; (f758 <smp_pairing_random+0x2c0>)
    f5f8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5fa:	681b      	ldr	r3, [r3, #0]
    f5fc:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f5fe:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
    f602:	4798      	blx	r3
			return 0;
    f604:	e7cb      	b.n	f59e <smp_pairing_random+0x106>
			smp->passkey_round++;
    f606:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    f60a:	3301      	adds	r3, #1
    f60c:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
    f60e:	2b14      	cmp	r3, #20
			smp->passkey_round++;
    f610:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
    f614:	d00f      	beq.n	f636 <smp_pairing_random+0x19e>
			if (bt_rand(smp->prnd, 16)) {
    f616:	2110      	movs	r1, #16
    f618:	f107 0027 	add.w	r0, r7, #39	; 0x27
    f61c:	f003 ff64 	bl	134e8 <bt_rand>
    f620:	2800      	cmp	r0, #0
    f622:	d1df      	bne.n	f5e4 <smp_pairing_random+0x14c>
			atomic_set_bit(smp->allowed_cmds,
    f624:	2103      	movs	r1, #3
    f626:	4638      	mov	r0, r7
    f628:	f019 fd83 	bl	29132 <atomic_set_bit>
}
    f62c:	b012      	add	sp, #72	; 0x48
    f62e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
    f632:	f7ff b983 	b.w	e93c <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    f636:	2107      	movs	r1, #7
    f638:	4640      	mov	r0, r8
    f63a:	f019 fce4 	bl	29006 <atomic_test_bit>
    f63e:	b108      	cbz	r0, f644 <smp_pairing_random+0x1ac>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    f640:	2109      	movs	r1, #9
    f642:	e78a      	b.n	f55a <smp_pairing_random+0xc2>
		return compute_and_send_central_dhcheck(smp);
    f644:	4638      	mov	r0, r7
}
    f646:	b012      	add	sp, #72	; 0x48
    f648:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
    f64c:	f7ff bc12 	b.w	ee74 <compute_and_send_central_dhcheck>
	switch (smp->method) {
    f650:	7a3b      	ldrb	r3, [r7, #8]
    f652:	2b05      	cmp	r3, #5
    f654:	d86b      	bhi.n	f72e <smp_pairing_random+0x296>
    f656:	e8df f003 	tbb	[pc, r3]
    f65a:	211b      	.short	0x211b
    f65c:	496a0321 	.word	0x496a0321
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f660:	ab0c      	add	r3, sp, #48	; 0x30
    f662:	493c      	ldr	r1, [pc, #240]	; (f754 <smp_pairing_random+0x2bc>)
    f664:	9300      	str	r3, [sp, #0]
    f666:	6809      	ldr	r1, [r1, #0]
    f668:	f107 0327 	add.w	r3, r7, #39	; 0x27
    f66c:	464a      	mov	r2, r9
    f66e:	f107 0057 	add.w	r0, r7, #87	; 0x57
    f672:	f7fe fc75 	bl	df60 <smp_g2>
    f676:	2800      	cmp	r0, #0
    f678:	d1b4      	bne.n	f5e4 <smp_pairing_random+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f67a:	210a      	movs	r1, #10
    f67c:	4640      	mov	r0, r8
    f67e:	f019 fd58 	bl	29132 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f682:	4b35      	ldr	r3, [pc, #212]	; (f758 <smp_pairing_random+0x2c0>)
    f684:	990c      	ldr	r1, [sp, #48]	; 0x30
    f686:	681b      	ldr	r3, [r3, #0]
    f688:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
    f68c:	689b      	ldr	r3, [r3, #8]
    f68e:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f690:	210d      	movs	r1, #13
    f692:	4638      	mov	r0, r7
    f694:	f019 fd4d 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f698:	2110      	movs	r1, #16
    f69a:	e777      	b.n	f58c <smp_pairing_random+0xf4>
		err = sc_smp_check_confirm(smp);
    f69c:	4638      	mov	r0, r7
    f69e:	f7fe fd55 	bl	e14c <sc_smp_check_confirm>
		if (err) {
    f6a2:	4604      	mov	r4, r0
    f6a4:	2800      	cmp	r0, #0
    f6a6:	f47f af7a 	bne.w	f59e <smp_pairing_random+0x106>
		atomic_set_bit(smp->allowed_cmds,
    f6aa:	2103      	movs	r1, #3
    f6ac:	4638      	mov	r0, r7
    f6ae:	f019 fd40 	bl	29132 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f6b2:	f019 fd9c 	bl	291ee <smp_send_pairing_random>
		if (err) {
    f6b6:	4604      	mov	r4, r0
    f6b8:	2800      	cmp	r0, #0
    f6ba:	f47f af70 	bne.w	f59e <smp_pairing_random+0x106>
		smp->passkey_round++;
    f6be:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    f6c2:	3301      	adds	r3, #1
    f6c4:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f6c6:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f6c8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
    f6cc:	d105      	bne.n	f6da <smp_pairing_random+0x242>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f6ce:	210d      	movs	r1, #13
    f6d0:	4638      	mov	r0, r7
    f6d2:	f019 fd2e 	bl	29132 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f6d6:	2110      	movs	r1, #16
    f6d8:	e73f      	b.n	f55a <smp_pairing_random+0xc2>
		if (bt_rand(smp->prnd, 16)) {
    f6da:	2110      	movs	r1, #16
    f6dc:	f107 0027 	add.w	r0, r7, #39	; 0x27
    f6e0:	f003 ff02 	bl	134e8 <bt_rand>
    f6e4:	2800      	cmp	r0, #0
    f6e6:	f43f af5a 	beq.w	f59e <smp_pairing_random+0x106>
    f6ea:	e77b      	b.n	f5e4 <smp_pairing_random+0x14c>
		if (bt_rand(smp->prnd, 16)) {
    f6ec:	2110      	movs	r1, #16
    f6ee:	f107 0027 	add.w	r0, r7, #39	; 0x27
    f6f2:	f003 fef9 	bl	134e8 <bt_rand>
    f6f6:	4604      	mov	r4, r0
    f6f8:	2800      	cmp	r0, #0
    f6fa:	f47f af73 	bne.w	f5e4 <smp_pairing_random+0x14c>
		if (bt_auth && bt_auth->oob_data_request) {
    f6fe:	4d16      	ldr	r5, [pc, #88]	; (f758 <smp_pairing_random+0x2c0>)
    f700:	682b      	ldr	r3, [r5, #0]
    f702:	b1f3      	cbz	r3, f742 <smp_pairing_random+0x2aa>
    f704:	68db      	ldr	r3, [r3, #12]
    f706:	b1e3      	cbz	r3, f742 <smp_pairing_random+0x2aa>
			struct bt_conn_oob_info info = {
    f708:	4b14      	ldr	r3, [pc, #80]	; (f75c <smp_pairing_random+0x2c4>)
			le_sc_oob_config_set(smp, &info);
    f70a:	a90c      	add	r1, sp, #48	; 0x30
			struct bt_conn_oob_info info = {
    f70c:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    f710:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
			le_sc_oob_config_set(smp, &info);
    f714:	4638      	mov	r0, r7
    f716:	f019 fb63 	bl	28de0 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f71a:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
    f71c:	e9c7 4438 	strd	r4, r4, [r7, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f720:	4640      	mov	r0, r8
    f722:	f019 fd06 	bl	29132 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f726:	682b      	ldr	r3, [r5, #0]
    f728:	a90c      	add	r1, sp, #48	; 0x30
    f72a:	68db      	ldr	r3, [r3, #12]
    f72c:	e767      	b.n	f5fe <smp_pairing_random+0x166>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f72e:	4a0c      	ldr	r2, [pc, #48]	; (f760 <smp_pairing_random+0x2c8>)
	switch (smp->method) {
    f730:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f734:	2303      	movs	r3, #3
    f736:	9308      	str	r3, [sp, #32]
    f738:	930f      	str	r3, [sp, #60]	; 0x3c
    f73a:	aa0f      	add	r2, sp, #60	; 0x3c
    f73c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f740:	e706      	b.n	f550 <smp_pairing_random+0xb8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f742:	2402      	movs	r4, #2
    f744:	e72b      	b.n	f59e <smp_pairing_random+0x106>
    f746:	bf00      	nop
    f748:	0002ef8e 	.word	0x0002ef8e
    f74c:	0002b6f4 	.word	0x0002b6f4
    f750:	0002f041 	.word	0x0002f041
    f754:	20001fd8 	.word	0x20001fd8
    f758:	20001f1c 	.word	0x20001f1c
    f75c:	0002b818 	.word	0x0002b818
    f760:	0002ee24 	.word	0x0002ee24

0000f764 <smp_pairing_complete>:
{
    f764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f766:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
    f76a:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f76c:	1d07      	adds	r7, r0, #4
	if (!status) {
    f76e:	b9b9      	cbnz	r1, f7a0 <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f770:	210d      	movs	r1, #13
		if (bt_auth && bt_auth->pairing_complete) {
    f772:	4b28      	ldr	r3, [pc, #160]	; (f814 <smp_pairing_complete+0xb0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f774:	4638      	mov	r0, r7
    f776:	f019 fc46 	bl	29006 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    f77a:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f77c:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    f77e:	b11b      	cbz	r3, f788 <smp_pairing_complete+0x24>
    f780:	699b      	ldr	r3, [r3, #24]
    f782:	b10b      	cbz	r3, f788 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
    f784:	4620      	mov	r0, r4
    f786:	4798      	blx	r3
	smp_reset(smp);
    f788:	4628      	mov	r0, r5
    f78a:	f019 fd6c 	bl	29266 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    f78e:	7a62      	ldrb	r2, [r4, #9]
    f790:	7aa3      	ldrb	r3, [r4, #10]
    f792:	429a      	cmp	r2, r3
    f794:	d03c      	beq.n	f810 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
    f796:	4620      	mov	r0, r4
}
    f798:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
    f79c:	f019 bed6 	b.w	2954c <bt_smp_start_security>
	switch (smp_err) {
    f7a0:	3901      	subs	r1, #1
    f7a2:	b2c9      	uxtb	r1, r1
    f7a4:	290e      	cmp	r1, #14
    f7a6:	bf9c      	itt	ls
    f7a8:	4b1b      	ldrls	r3, [pc, #108]	; (f818 <smp_pairing_complete+0xb4>)
    f7aa:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
    f7ac:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    f7b0:	bf88      	it	hi
    f7b2:	2609      	movhi	r6, #9
		if (conn->le.keys &&
    f7b4:	b143      	cbz	r3, f7c8 <smp_pairing_complete+0x64>
    f7b6:	7b1b      	ldrb	r3, [r3, #12]
    f7b8:	bb1b      	cbnz	r3, f802 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
    f7ba:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f7be:	f01a f84d 	bl	2985c <bt_keys_clear>
			conn->le.keys = NULL;
    f7c2:	2300      	movs	r3, #0
    f7c4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f7c8:	2102      	movs	r1, #2
    f7ca:	4638      	mov	r0, r7
    f7cc:	f019 fc1b 	bl	29006 <atomic_test_bit>
    f7d0:	b940      	cbnz	r0, f7e4 <smp_pairing_complete+0x80>
	switch (err) {
    f7d2:	2e07      	cmp	r6, #7
    f7d4:	bf96      	itet	ls
    f7d6:	4b11      	ldrls	r3, [pc, #68]	; (f81c <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f7d8:	211f      	movhi	r1, #31
    f7da:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
    f7dc:	4632      	mov	r2, r6
    f7de:	4620      	mov	r0, r4
    f7e0:	f7fb fb28 	bl	ae34 <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
    f7e4:	2103      	movs	r1, #3
    f7e6:	4638      	mov	r0, r7
    f7e8:	f019 fc0d 	bl	29006 <atomic_test_bit>
    f7ec:	2800      	cmp	r0, #0
    f7ee:	d0cb      	beq.n	f788 <smp_pairing_complete+0x24>
    f7f0:	4b08      	ldr	r3, [pc, #32]	; (f814 <smp_pairing_complete+0xb0>)
    f7f2:	681b      	ldr	r3, [r3, #0]
    f7f4:	2b00      	cmp	r3, #0
    f7f6:	d0c7      	beq.n	f788 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
    f7f8:	69db      	ldr	r3, [r3, #28]
    f7fa:	2b00      	cmp	r3, #0
    f7fc:	d0c4      	beq.n	f788 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
    f7fe:	4631      	mov	r1, r6
    f800:	e7c0      	b.n	f784 <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f802:	2102      	movs	r1, #2
    f804:	4638      	mov	r0, r7
    f806:	f019 fbfe 	bl	29006 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    f80a:	2800      	cmp	r0, #0
    f80c:	d1d5      	bne.n	f7ba <smp_pairing_complete+0x56>
    f80e:	e7db      	b.n	f7c8 <smp_pairing_complete+0x64>
}
    f810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f812:	bf00      	nop
    f814:	20001f1c 	.word	0x20001f1c
    f818:	0002f145 	.word	0x0002f145
    f81c:	0002f15d 	.word	0x0002f15d

0000f820 <bt_smp_recv>:
{
    f820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f824:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
    f826:	898b      	ldrh	r3, [r1, #12]
{
    f828:	af00      	add	r7, sp, #0
    f82a:	4680      	mov	r8, r0
    f82c:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f82e:	b983      	cbnz	r3, f852 <bt_smp_recv+0x32>
		BT_ERR("Too small SMP PDU received");
    f830:	4b3f      	ldr	r3, [pc, #252]	; (f930 <bt_smp_recv+0x110>)
    f832:	61bb      	str	r3, [r7, #24]
    f834:	2302      	movs	r3, #2
    f836:	607b      	str	r3, [r7, #4]
    f838:	617b      	str	r3, [r7, #20]
    f83a:	f107 0214 	add.w	r2, r7, #20
    f83e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f842:	483c      	ldr	r0, [pc, #240]	; (f934 <bt_smp_recv+0x114>)
    f844:	f019 fb4a 	bl	28edc <z_log_msg2_static_create.constprop.0>
}
    f848:	2000      	movs	r0, #0
    f84a:	3720      	adds	r7, #32
    f84c:	46bd      	mov	sp, r7
    f84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f852:	2101      	movs	r1, #1
    f854:	f105 0008 	add.w	r0, r5, #8
    f858:	f01a f8a8 	bl	299ac <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f85c:	2104      	movs	r1, #4
    f85e:	4606      	mov	r6, r0
    f860:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
    f864:	f019 fbcf 	bl	29006 <atomic_test_bit>
    f868:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
    f86c:	7831      	ldrb	r1, [r6, #0]
    f86e:	b150      	cbz	r0, f886 <bt_smp_recv+0x66>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f870:	4b31      	ldr	r3, [pc, #196]	; (f938 <bt_smp_recv+0x118>)
    f872:	e9c7 3106 	strd	r3, r1, [r7, #24]
    f876:	2303      	movs	r3, #3
    f878:	607b      	str	r3, [r7, #4]
    f87a:	617b      	str	r3, [r7, #20]
    f87c:	f107 0214 	add.w	r2, r7, #20
    f880:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f884:	e7dd      	b.n	f842 <bt_smp_recv+0x22>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    f886:	290e      	cmp	r1, #14
    f888:	d901      	bls.n	f88e <bt_smp_recv+0x6e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f88a:	4b2c      	ldr	r3, [pc, #176]	; (f93c <bt_smp_recv+0x11c>)
    f88c:	e7f1      	b.n	f872 <bt_smp_recv+0x52>
	if (!handlers[hdr->code].func) {
    f88e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; f940 <bt_smp_recv+0x120>
    f892:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
    f896:	b98b      	cbnz	r3, f8bc <bt_smp_recv+0x9c>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    f898:	4b2a      	ldr	r3, [pc, #168]	; (f944 <bt_smp_recv+0x124>)
    f89a:	4826      	ldr	r0, [pc, #152]	; (f934 <bt_smp_recv+0x114>)
    f89c:	e9c7 3106 	strd	r3, r1, [r7, #24]
    f8a0:	f107 0214 	add.w	r2, r7, #20
    f8a4:	2303      	movs	r3, #3
    f8a6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f8aa:	607b      	str	r3, [r7, #4]
    f8ac:	617b      	str	r3, [r7, #20]
    f8ae:	f019 fb15 	bl	28edc <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    f8b2:	2107      	movs	r1, #7
		smp_error(smp, err);
    f8b4:	4620      	mov	r0, r4
    f8b6:	f019 feef 	bl	29698 <smp_error>
    f8ba:	e7c5      	b.n	f848 <bt_smp_recv+0x28>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    f8bc:	4620      	mov	r0, r4
    f8be:	f019 fc20 	bl	29102 <atomic_test_and_clear_bit>
    f8c2:	7833      	ldrb	r3, [r6, #0]
    f8c4:	b988      	cbnz	r0, f8ea <bt_smp_recv+0xca>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    f8c6:	4a20      	ldr	r2, [pc, #128]	; (f948 <bt_smp_recv+0x128>)
    f8c8:	481a      	ldr	r0, [pc, #104]	; (f934 <bt_smp_recv+0x114>)
    f8ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    f8ce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    f8d2:	2303      	movs	r3, #3
    f8d4:	f107 0214 	add.w	r2, r7, #20
    f8d8:	607b      	str	r3, [r7, #4]
    f8da:	617b      	str	r3, [r7, #20]
    f8dc:	f019 fafe 	bl	28edc <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    f8e0:	7833      	ldrb	r3, [r6, #0]
    f8e2:	2b05      	cmp	r3, #5
    f8e4:	d0b0      	beq.n	f848 <bt_smp_recv+0x28>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f8e6:	2108      	movs	r1, #8
    f8e8:	e7e4      	b.n	f8b4 <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
    f8ea:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
    f8ee:	89a9      	ldrh	r1, [r5, #12]
    f8f0:	7912      	ldrb	r2, [r2, #4]
    f8f2:	428a      	cmp	r2, r1
    f8f4:	d012      	beq.n	f91c <bt_smp_recv+0xfc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f8f6:	466d      	mov	r5, sp
    f8f8:	b088      	sub	sp, #32
    f8fa:	466a      	mov	r2, sp
    f8fc:	4813      	ldr	r0, [pc, #76]	; (f94c <bt_smp_recv+0x12c>)
    f8fe:	6193      	str	r3, [r2, #24]
    f900:	2304      	movs	r3, #4
    f902:	e9c2 0104 	strd	r0, r1, [r2, #16]
    f906:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    f90a:	f842 3f0c 	str.w	r3, [r2, #12]!
    f90e:	4809      	ldr	r0, [pc, #36]	; (f934 <bt_smp_recv+0x114>)
    f910:	60bb      	str	r3, [r7, #8]
    f912:	f019 fae3 	bl	28edc <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    f916:	210a      	movs	r1, #10
    f918:	46ad      	mov	sp, r5
    f91a:	e7cb      	b.n	f8b4 <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
    f91c:	4629      	mov	r1, r5
    f91e:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
    f922:	4620      	mov	r0, r4
    f924:	4798      	blx	r3
	if (err) {
    f926:	4601      	mov	r1, r0
    f928:	2800      	cmp	r0, #0
    f92a:	d08d      	beq.n	f848 <bt_smp_recv+0x28>
    f92c:	e7c2      	b.n	f8b4 <bt_smp_recv+0x94>
    f92e:	bf00      	nop
    f930:	0002f056 	.word	0x0002f056
    f934:	0002b6f4 	.word	0x0002b6f4
    f938:	0002f071 	.word	0x0002f071
    f93c:	0002f0a2 	.word	0x0002f0a2
    f940:	0002bf00 	.word	0x0002bf00
    f944:	0002f0c4 	.word	0x0002f0c4
    f948:	0002f0de 	.word	0x0002f0de
    f94c:	0002eb36 	.word	0x0002eb36

0000f950 <bt_smp_pkey_ready>:
{
    f950:	b530      	push	{r4, r5, lr}
	sc_public_key = pkey;
    f952:	4b21      	ldr	r3, [pc, #132]	; (f9d8 <bt_smp_pkey_ready+0x88>)
{
    f954:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
    f956:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    f958:	b960      	cbnz	r0, f974 <bt_smp_pkey_ready+0x24>
		BT_WARN("Public key not available");
    f95a:	4b20      	ldr	r3, [pc, #128]	; (f9dc <bt_smp_pkey_ready+0x8c>)
    f95c:	9306      	str	r3, [sp, #24]
    f95e:	4820      	ldr	r0, [pc, #128]	; (f9e0 <bt_smp_pkey_ready+0x90>)
    f960:	2302      	movs	r3, #2
    f962:	aa05      	add	r2, sp, #20
    f964:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    f968:	9301      	str	r3, [sp, #4]
    f96a:	9305      	str	r3, [sp, #20]
    f96c:	f019 fab6 	bl	28edc <z_log_msg2_static_create.constprop.0>
}
    f970:	b009      	add	sp, #36	; 0x24
    f972:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f974:	4c1b      	ldr	r4, [pc, #108]	; (f9e4 <bt_smp_pkey_ready+0x94>)
	z_impl_k_sem_give(sem);
    f976:	481c      	ldr	r0, [pc, #112]	; (f9e8 <bt_smp_pkey_ready+0x98>)
    f978:	f012 fd76 	bl	22468 <z_impl_k_sem_give>
    f97c:	f3bf 8f5b 	dmb	ish
    f980:	6863      	ldr	r3, [r4, #4]
    f982:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f986:	f013 0f40 	tst.w	r3, #64	; 0x40
    f98a:	4625      	mov	r5, r4
    f98c:	d0f0      	beq.n	f970 <bt_smp_pkey_ready+0x20>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f98e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f992:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
    f994:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f996:	b99b      	cbnz	r3, f9c0 <bt_smp_pkey_ready+0x70>
			err = sc_send_public_key(smp);
    f998:	f7ff f8ee 	bl	eb78 <sc_send_public_key>
			if (err) {
    f99c:	4601      	mov	r1, r0
    f99e:	b110      	cbz	r0, f9a6 <bt_smp_pkey_ready+0x56>
				smp_error(smp, err);
    f9a0:	4620      	mov	r0, r4
    f9a2:	f019 fe79 	bl	29698 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    f9a6:	f3bf 8f5b 	dmb	ish
    f9aa:	e855 3f00 	ldrex	r3, [r5]
    f9ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    f9b2:	e845 3200 	strex	r2, r3, [r5]
    f9b6:	2a00      	cmp	r2, #0
    f9b8:	d1f7      	bne.n	f9aa <bt_smp_pkey_ready+0x5a>
    f9ba:	f3bf 8f5b 	dmb	ish
			continue;
    f9be:	e7d7      	b.n	f970 <bt_smp_pkey_ready+0x20>
		err = smp_public_key_periph(smp);
    f9c0:	f7ff f906 	bl	ebd0 <smp_public_key_periph>
		if (err) {
    f9c4:	4601      	mov	r1, r0
    f9c6:	2800      	cmp	r0, #0
    f9c8:	d0d2      	beq.n	f970 <bt_smp_pkey_ready+0x20>
			smp_error(smp, err);
    f9ca:	4620      	mov	r0, r4
}
    f9cc:	b009      	add	sp, #36	; 0x24
    f9ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			smp_error(smp, err);
    f9d2:	f019 be61 	b.w	29698 <smp_error>
    f9d6:	bf00      	nop
    f9d8:	20001fd8 	.word	0x20001fd8
    f9dc:	0002f0f9 	.word	0x0002f0f9
    f9e0:	0002b6f4 	.word	0x0002b6f4
    f9e4:	20001720 	.word	0x20001720
    f9e8:	20000c14 	.word	0x20000c14

0000f9ec <smp_ident_addr_info>:
{
    f9ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    f9f0:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    f9f2:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    f9f6:	783b      	ldrb	r3, [r7, #0]
{
    f9f8:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    f9fa:	f104 0888 	add.w	r8, r4, #136	; 0x88
    f9fe:	b31b      	cbz	r3, fa48 <smp_ident_addr_info+0x5c>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fa00:	79bb      	ldrb	r3, [r7, #6]
    fa02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fa06:	2bc0      	cmp	r3, #192	; 0xc0
    fa08:	d01e      	beq.n	fa48 <smp_ident_addr_info+0x5c>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fa0a:	4638      	mov	r0, r7
    fa0c:	f7f7 fdd8 	bl	75c0 <bt_addr_le_str_real>
    fa10:	2400      	movs	r4, #0
    fa12:	4b4c      	ldr	r3, [pc, #304]	; (fb44 <smp_ident_addr_info+0x158>)
    fa14:	494c      	ldr	r1, [pc, #304]	; (fb48 <smp_ident_addr_info+0x15c>)
    fa16:	9002      	str	r0, [sp, #8]
    fa18:	2201      	movs	r2, #1
    fa1a:	9301      	str	r3, [sp, #4]
    fa1c:	4620      	mov	r0, r4
    fa1e:	4623      	mov	r3, r4
    fa20:	9400      	str	r4, [sp, #0]
    fa22:	f019 fa5e 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fa26:	4640      	mov	r0, r8
    fa28:	f7f7 fdca 	bl	75c0 <bt_addr_le_str_real>
    fa2c:	4b47      	ldr	r3, [pc, #284]	; (fb4c <smp_ident_addr_info+0x160>)
    fa2e:	9002      	str	r0, [sp, #8]
    fa30:	e9cd 4300 	strd	r4, r3, [sp]
    fa34:	4620      	mov	r0, r4
    fa36:	4944      	ldr	r1, [pc, #272]	; (fb48 <smp_ident_addr_info+0x15c>)
    fa38:	4623      	mov	r3, r4
    fa3a:	2201      	movs	r2, #1
    fa3c:	f019 fa51 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
    fa40:	200a      	movs	r0, #10
}
    fa42:	b004      	add	sp, #16
    fa44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
    fa48:	2207      	movs	r2, #7
    fa4a:	4639      	mov	r1, r7
    fa4c:	4640      	mov	r0, r8
    fa4e:	f01a fff4 	bl	2aa3a <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    fa52:	b168      	cbz	r0, fa70 <smp_ident_addr_info+0x84>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    fa54:	7a20      	ldrb	r0, [r4, #8]
    fa56:	4639      	mov	r1, r7
    fa58:	f000 fad4 	bl	10004 <bt_keys_find_addr>
		if (keys) {
    fa5c:	4606      	mov	r6, r0
    fa5e:	b138      	cbz	r0, fa70 <smp_ident_addr_info+0x84>
			if (!update_keys_check(smp, keys)) {
    fa60:	4601      	mov	r1, r0
    fa62:	4628      	mov	r0, r5
    fa64:	f019 fb06 	bl	29074 <update_keys_check>
    fa68:	b1e0      	cbz	r0, faa4 <smp_ident_addr_info+0xb8>
			bt_keys_clear(keys);
    fa6a:	4630      	mov	r0, r6
    fa6c:	f019 fef6 	bl	2985c <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fa70:	210d      	movs	r1, #13
    fa72:	1d28      	adds	r0, r5, #4
    fa74:	f019 fac7 	bl	29006 <atomic_test_bit>
    fa78:	2800      	cmp	r0, #0
    fa7a:	d03e      	beq.n	fafa <smp_ident_addr_info+0x10e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fa7c:	7a21      	ldrb	r1, [r4, #8]
    fa7e:	4642      	mov	r2, r8
    fa80:	2002      	movs	r0, #2
    fa82:	f019 fed7 	bl	29834 <bt_keys_get_type>
		if (!keys) {
    fa86:	4606      	mov	r6, r0
    fa88:	b970      	cbnz	r0, faa8 <smp_ident_addr_info+0xbc>
			BT_ERR("Unable to get keys for %s",
    fa8a:	4640      	mov	r0, r8
    fa8c:	f7f7 fd98 	bl	75c0 <bt_addr_le_str_real>
    fa90:	4b2f      	ldr	r3, [pc, #188]	; (fb50 <smp_ident_addr_info+0x164>)
    fa92:	9002      	str	r0, [sp, #8]
    fa94:	e9cd 6300 	strd	r6, r3, [sp]
    fa98:	492b      	ldr	r1, [pc, #172]	; (fb48 <smp_ident_addr_info+0x15c>)
    fa9a:	4633      	mov	r3, r6
    fa9c:	2201      	movs	r2, #1
    fa9e:	4630      	mov	r0, r6
    faa0:	f019 fa1f 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
    faa4:	2008      	movs	r0, #8
    faa6:	e7cc      	b.n	fa42 <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
    faa8:	78e3      	ldrb	r3, [r4, #3]
    faaa:	bbcb      	cbnz	r3, fb20 <smp_ident_addr_info+0x134>
			dst = &conn->le.resp_addr;
    faac:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fab0:	781a      	ldrb	r2, [r3, #0]
    fab2:	2a01      	cmp	r2, #1
    fab4:	d11e      	bne.n	faf4 <smp_ident_addr_info+0x108>
		if (bt_addr_le_is_rpa(dst)) {
    fab6:	799a      	ldrb	r2, [r3, #6]
    fab8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    fabc:	2a40      	cmp	r2, #64	; 0x40
    fabe:	d119      	bne.n	faf4 <smp_ident_addr_info+0x108>
    fac0:	f8d3 2001 	ldr.w	r2, [r3, #1]
    fac4:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
    fac8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
    facc:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    face:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
    fad2:	b17b      	cbz	r3, faf4 <smp_ident_addr_info+0x108>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    fad4:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    fad8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fadc:	2bc0      	cmp	r3, #192	; 0xc0
    fade:	d009      	beq.n	faf4 <smp_ident_addr_info+0x108>
				bt_addr_le_copy(&keys->addr, &req->addr);
    fae0:	4639      	mov	r1, r7
    fae2:	1c70      	adds	r0, r6, #1
    fae4:	f019 f9ab 	bl	28e3e <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
    fae8:	4640      	mov	r0, r8
    faea:	f019 f9a8 	bl	28e3e <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
    faee:	4620      	mov	r0, r4
    faf0:	f7fb f972 	bl	add8 <bt_conn_identity_resolved>
		bt_id_add(keys);
    faf4:	4630      	mov	r0, r6
    faf6:	f7f9 fc59 	bl	93ac <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fafa:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    fafe:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fb02:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fb04:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fb08:	d503      	bpl.n	fb12 <smp_ident_addr_info+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fb0a:	210a      	movs	r1, #10
    fb0c:	4628      	mov	r0, r5
    fb0e:	f019 fb10 	bl	29132 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fb12:	78e3      	ldrb	r3, [r4, #3]
    fb14:	b13b      	cbz	r3, fb26 <smp_ident_addr_info+0x13a>
	if (!smp->local_dist && !smp->remote_dist) {
    fb16:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
    fb1a:	b174      	cbz	r4, fb3a <smp_ident_addr_info+0x14e>
	return 0;
    fb1c:	2000      	movs	r0, #0
    fb1e:	e790      	b.n	fa42 <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
    fb20:	f104 038f 	add.w	r3, r4, #143	; 0x8f
    fb24:	e7c4      	b.n	fab0 <smp_ident_addr_info+0xc4>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
    fb26:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    fb2a:	2b00      	cmp	r3, #0
    fb2c:	d1f3      	bne.n	fb16 <smp_ident_addr_info+0x12a>
		err = bt_smp_distribute_keys(smp);
    fb2e:	4628      	mov	r0, r5
    fb30:	f7fe fd4a 	bl	e5c8 <bt_smp_distribute_keys>
		if (err) {
    fb34:	2800      	cmp	r0, #0
    fb36:	d0ee      	beq.n	fb16 <smp_ident_addr_info+0x12a>
    fb38:	e783      	b.n	fa42 <smp_ident_addr_info+0x56>
		smp_pairing_complete(smp, 0);
    fb3a:	4621      	mov	r1, r4
    fb3c:	4628      	mov	r0, r5
    fb3e:	f7ff fe11 	bl	f764 <smp_pairing_complete>
    fb42:	e7eb      	b.n	fb1c <smp_ident_addr_info+0x130>
    fb44:	0002f112 	.word	0x0002f112
    fb48:	0002b6f4 	.word	0x0002b6f4
    fb4c:	0002eec6 	.word	0x0002eec6
    fb50:	0002ee9f 	.word	0x0002ee9f

0000fb54 <smp_central_ident>:
{
    fb54:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    fb58:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
    fb5c:	4604      	mov	r4, r0
    fb5e:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fb60:	3004      	adds	r0, #4
    fb62:	210d      	movs	r1, #13
    fb64:	f019 fa4f 	bl	29006 <atomic_test_bit>
    fb68:	b318      	cbz	r0, fbb2 <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fb6a:	f106 0888 	add.w	r8, r6, #136	; 0x88
    fb6e:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
    fb70:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fb72:	4642      	mov	r2, r8
    fb74:	2004      	movs	r0, #4
    fb76:	f019 fe5d 	bl	29834 <bt_keys_get_type>
		if (!keys) {
    fb7a:	4605      	mov	r5, r0
    fb7c:	b980      	cbnz	r0, fba0 <smp_central_ident+0x4c>
			BT_ERR("Unable to get keys for %s",
    fb7e:	4640      	mov	r0, r8
    fb80:	f7f7 fd1e 	bl	75c0 <bt_addr_le_str_real>
    fb84:	4b1e      	ldr	r3, [pc, #120]	; (fc00 <smp_central_ident+0xac>)
    fb86:	9002      	str	r0, [sp, #8]
    fb88:	e9cd 5300 	strd	r5, r3, [sp]
    fb8c:	4628      	mov	r0, r5
    fb8e:	491d      	ldr	r1, [pc, #116]	; (fc04 <smp_central_ident+0xb0>)
    fb90:	462b      	mov	r3, r5
    fb92:	2201      	movs	r2, #1
    fb94:	f019 f9a5 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    fb98:	2008      	movs	r0, #8
}
    fb9a:	b004      	add	sp, #16
    fb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fba0:	463a      	mov	r2, r7
    fba2:	f832 3b02 	ldrh.w	r3, [r2], #2
    fba6:	8303      	strh	r3, [r0, #24]
    fba8:	f8d7 3002 	ldr.w	r3, [r7, #2]
    fbac:	6103      	str	r3, [r0, #16]
    fbae:	6853      	ldr	r3, [r2, #4]
    fbb0:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fbb2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    fbb6:	f023 0201 	bic.w	r2, r3, #1
    fbba:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fbbe:	079a      	lsls	r2, r3, #30
    fbc0:	d50a      	bpl.n	fbd8 <smp_central_ident+0x84>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fbc2:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fbc4:	4620      	mov	r0, r4
    fbc6:	f019 fab4 	bl	29132 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fbca:	78f3      	ldrb	r3, [r6, #3]
    fbcc:	b143      	cbz	r3, fbe0 <smp_central_ident+0x8c>
	if (!smp->local_dist && !smp->remote_dist) {
    fbce:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
    fbd2:	b17d      	cbz	r5, fbf4 <smp_central_ident+0xa0>
	return 0;
    fbd4:	2000      	movs	r0, #0
    fbd6:	e7e0      	b.n	fb9a <smp_central_ident+0x46>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fbd8:	075b      	lsls	r3, r3, #29
    fbda:	d5f6      	bpl.n	fbca <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fbdc:	210a      	movs	r1, #10
    fbde:	e7f1      	b.n	fbc4 <smp_central_ident+0x70>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
    fbe0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    fbe4:	2b00      	cmp	r3, #0
    fbe6:	d1f2      	bne.n	fbce <smp_central_ident+0x7a>
		err = bt_smp_distribute_keys(smp);
    fbe8:	4620      	mov	r0, r4
    fbea:	f7fe fced 	bl	e5c8 <bt_smp_distribute_keys>
		if (err) {
    fbee:	2800      	cmp	r0, #0
    fbf0:	d0ed      	beq.n	fbce <smp_central_ident+0x7a>
    fbf2:	e7d2      	b.n	fb9a <smp_central_ident+0x46>
		smp_pairing_complete(smp, 0);
    fbf4:	4620      	mov	r0, r4
    fbf6:	4629      	mov	r1, r5
    fbf8:	f7ff fdb4 	bl	f764 <smp_pairing_complete>
	return 0;
    fbfc:	4628      	mov	r0, r5
    fbfe:	e7cc      	b.n	fb9a <smp_central_ident+0x46>
    fc00:	0002ee9f 	.word	0x0002ee9f
    fc04:	0002b6f4 	.word	0x0002b6f4

0000fc08 <smp_pairing_failed>:
{
    fc08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fc0a:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
    fc0c:	4a16      	ldr	r2, [pc, #88]	; (fc68 <smp_pairing_failed+0x60>)
    fc0e:	782b      	ldrb	r3, [r5, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
    fc10:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
{
    fc14:	b089      	sub	sp, #36	; 0x24
    fc16:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fc18:	e9cd 2306 	strd	r2, r3, [sp, #24]
    fc1c:	4813      	ldr	r0, [pc, #76]	; (fc6c <smp_pairing_failed+0x64>)
    fc1e:	2303      	movs	r3, #3
    fc20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    fc24:	aa05      	add	r2, sp, #20
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fc26:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
    fc28:	9301      	str	r3, [sp, #4]
    fc2a:	9305      	str	r3, [sp, #20]
    fc2c:	f019 f956 	bl	28edc <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fc30:	210a      	movs	r1, #10
    fc32:	4630      	mov	r0, r6
    fc34:	f019 fa65 	bl	29102 <atomic_test_and_clear_bit>
    fc38:	b148      	cbz	r0, fc4e <smp_pairing_failed+0x46>
		if (bt_auth && bt_auth->cancel) {
    fc3a:	4b0d      	ldr	r3, [pc, #52]	; (fc70 <smp_pairing_failed+0x68>)
    fc3c:	681b      	ldr	r3, [r3, #0]
    fc3e:	b96b      	cbnz	r3, fc5c <smp_pairing_failed+0x54>
	smp_pairing_complete(smp, req->reason);
    fc40:	4620      	mov	r0, r4
    fc42:	7829      	ldrb	r1, [r5, #0]
    fc44:	f7ff fd8e 	bl	f764 <smp_pairing_complete>
}
    fc48:	2000      	movs	r0, #0
    fc4a:	b009      	add	sp, #36	; 0x24
    fc4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fc4e:	210b      	movs	r1, #11
    fc50:	4630      	mov	r0, r6
    fc52:	f019 fa56 	bl	29102 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fc56:	2800      	cmp	r0, #0
    fc58:	d1ef      	bne.n	fc3a <smp_pairing_failed+0x32>
    fc5a:	e7f1      	b.n	fc40 <smp_pairing_failed+0x38>
		if (bt_auth && bt_auth->cancel) {
    fc5c:	691b      	ldr	r3, [r3, #16]
    fc5e:	2b00      	cmp	r3, #0
    fc60:	d0ee      	beq.n	fc40 <smp_pairing_failed+0x38>
			bt_auth->cancel(conn);
    fc62:	4638      	mov	r0, r7
    fc64:	4798      	blx	r3
    fc66:	e7eb      	b.n	fc40 <smp_pairing_failed+0x38>
    fc68:	0002f126 	.word	0x0002f126
    fc6c:	0002b6f4 	.word	0x0002b6f4
    fc70:	20001f1c 	.word	0x20001f1c

0000fc74 <bt_smp_encrypt_change>:
{
    fc74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
    fc78:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fc7a:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
    fc7e:	4604      	mov	r4, r0
    fc80:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fc82:	4630      	mov	r0, r6
    fc84:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
    fc86:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fc8a:	f019 fa3a 	bl	29102 <atomic_test_and_clear_bit>
    fc8e:	2800      	cmp	r0, #0
    fc90:	d05f      	beq.n	fd52 <bt_smp_encrypt_change+0xde>
	if (hci_status) {
    fc92:	b1cf      	cbz	r7, fcc8 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fc94:	2103      	movs	r1, #3
    fc96:	4630      	mov	r0, r6
    fc98:	f019 f9b5 	bl	29006 <atomic_test_bit>
    fc9c:	2800      	cmp	r0, #0
    fc9e:	d058      	beq.n	fd52 <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
    fca0:	4638      	mov	r0, r7
    fca2:	f7f8 ff9f 	bl	8be4 <bt_security_err_get>
	switch (auth_err) {
    fca6:	3801      	subs	r0, #1
    fca8:	b2c0      	uxtb	r0, r0
    fcaa:	2808      	cmp	r0, #8
    fcac:	bf9a      	itte	ls
    fcae:	4b2e      	ldrls	r3, [pc, #184]	; (fd68 <bt_smp_encrypt_change+0xf4>)
    fcb0:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
    fcb2:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fcb4:	2102      	movs	r1, #2
    fcb6:	4630      	mov	r0, r6
    fcb8:	f019 fa3b 	bl	29132 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    fcbc:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
    fcbe:	4628      	mov	r0, r5
}
    fcc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
    fcc4:	f7ff bd4e 	b.w	f764 <smp_pairing_complete>
	if (!conn->encrypt) {
    fcc8:	f898 300b 	ldrb.w	r3, [r8, #11]
    fccc:	2b00      	cmp	r3, #0
    fcce:	d040      	beq.n	fd52 <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fcd0:	2103      	movs	r1, #3
    fcd2:	4630      	mov	r0, r6
    fcd4:	f019 f997 	bl	29006 <atomic_test_bit>
    fcd8:	b920      	cbnz	r0, fce4 <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
    fcda:	4628      	mov	r0, r5
}
    fcdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
    fce0:	f019 bac1 	b.w	29266 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fce4:	2105      	movs	r1, #5
    fce6:	4630      	mov	r0, r6
    fce8:	f019 f98d 	bl	29006 <atomic_test_bit>
    fcec:	b1b8      	cbz	r0, fd1e <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    fcee:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    fcf2:	071f      	lsls	r7, r3, #28
    fcf4:	d507      	bpl.n	fd06 <bt_smp_encrypt_change+0x92>
    fcf6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    fcfa:	0718      	lsls	r0, r3, #28
    fcfc:	d503      	bpl.n	fd06 <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    fcfe:	2111      	movs	r1, #17
    fd00:	4630      	mov	r0, r6
    fd02:	f019 fa16 	bl	29132 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    fd06:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    fd0a:	f023 0308 	bic.w	r3, r3, #8
    fd0e:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    fd12:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    fd16:	f023 0308 	bic.w	r3, r3, #8
    fd1a:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    fd1e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    fd22:	07d9      	lsls	r1, r3, #31
    fd24:	d517      	bpl.n	fd56 <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    fd26:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd28:	4628      	mov	r0, r5
    fd2a:	f019 fa02 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fd2e:	2102      	movs	r1, #2
    fd30:	4630      	mov	r0, r6
    fd32:	f019 f9fe 	bl	29132 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fd36:	f898 3003 	ldrb.w	r3, [r8, #3]
    fd3a:	b913      	cbnz	r3, fd42 <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
    fd3c:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    fd40:	b93b      	cbnz	r3, fd52 <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
    fd42:	4628      	mov	r0, r5
    fd44:	f7fe fc40 	bl	e5c8 <bt_smp_distribute_keys>
    fd48:	b918      	cbnz	r0, fd52 <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
    fd4a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    fd4e:	2900      	cmp	r1, #0
    fd50:	d0b5      	beq.n	fcbe <bt_smp_encrypt_change+0x4a>
}
    fd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fd56:	079a      	lsls	r2, r3, #30
    fd58:	d501      	bpl.n	fd5e <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fd5a:	2108      	movs	r1, #8
    fd5c:	e7e4      	b.n	fd28 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fd5e:	075b      	lsls	r3, r3, #29
    fd60:	d5e5      	bpl.n	fd2e <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd62:	210a      	movs	r1, #10
    fd64:	e7e0      	b.n	fd28 <bt_smp_encrypt_change+0xb4>
    fd66:	bf00      	nop
    fd68:	0002f154 	.word	0x0002f154

0000fd6c <smp_timeout>:
{
    fd6c:	b510      	push	{r4, lr}
    fd6e:	b088      	sub	sp, #32
	BT_ERR("SMP Timeout");
    fd70:	4b0c      	ldr	r3, [pc, #48]	; (fda4 <smp_timeout+0x38>)
    fd72:	9306      	str	r3, [sp, #24]
{
    fd74:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    fd76:	2302      	movs	r3, #2
    fd78:	aa05      	add	r2, sp, #20
    fd7a:	480b      	ldr	r0, [pc, #44]	; (fda8 <smp_timeout+0x3c>)
    fd7c:	9301      	str	r3, [sp, #4]
    fd7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fd82:	9305      	str	r3, [sp, #20]
    fd84:	f019 f8aa 	bl	28edc <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    fd88:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
    fd8c:	2108      	movs	r1, #8
    fd8e:	f7ff fce9 	bl	f764 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    fd92:	2104      	movs	r1, #4
    fd94:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
    fd98:	b008      	add	sp, #32
    fd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    fd9e:	f019 b9c8 	b.w	29132 <atomic_set_bit>
    fda2:	bf00      	nop
    fda4:	0002f132 	.word	0x0002f132
    fda8:	0002b6f4 	.word	0x0002b6f4

0000fdac <bt_smp_update_keys>:
{
    fdac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    fdb0:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    fdb2:	f7fe f947 	bl	e044 <smp_chan_get>
	if (!smp) {
    fdb6:	4605      	mov	r5, r0
    fdb8:	2800      	cmp	r0, #0
    fdba:	d06d      	beq.n	fe98 <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fdbc:	1d07      	adds	r7, r0, #4
    fdbe:	2103      	movs	r1, #3
    fdc0:	4638      	mov	r0, r7
    fdc2:	f019 f920 	bl	29006 <atomic_test_bit>
    fdc6:	2800      	cmp	r0, #0
    fdc8:	d066      	beq.n	fe98 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
    fdca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fdce:	b108      	cbz	r0, fdd4 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    fdd0:	f019 fd44 	bl	2985c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    fdd4:	f104 0888 	add.w	r8, r4, #136	; 0x88
    fdd8:	7a20      	ldrb	r0, [r4, #8]
    fdda:	4641      	mov	r1, r8
    fddc:	f000 f884 	bl	fee8 <bt_keys_get_addr>
    fde0:	4606      	mov	r6, r0
    fde2:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    fde6:	b998      	cbnz	r0, fe10 <bt_smp_update_keys+0x64>
		BT_ERR("Unable to get keys for %s",
    fde8:	4640      	mov	r0, r8
    fdea:	f7f7 fbe9 	bl	75c0 <bt_addr_le_str_real>
    fdee:	4b31      	ldr	r3, [pc, #196]	; (feb4 <bt_smp_update_keys+0x108>)
    fdf0:	9002      	str	r0, [sp, #8]
    fdf2:	e9cd 6300 	strd	r6, r3, [sp]
    fdf6:	4630      	mov	r0, r6
    fdf8:	492f      	ldr	r1, [pc, #188]	; (feb8 <bt_smp_update_keys+0x10c>)
    fdfa:	4633      	mov	r3, r6
    fdfc:	2201      	movs	r2, #1
    fdfe:	f019 f870 	bl	28ee2 <z_log_msg2_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fe02:	2108      	movs	r1, #8
    fe04:	4628      	mov	r0, r5
}
    fe06:	b004      	add	sp, #16
    fe08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fe0c:	f019 bc44 	b.w	29698 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    fe10:	210e      	movs	r1, #14
    fe12:	4638      	mov	r0, r7
    fe14:	f019 f8f7 	bl	29006 <atomic_test_bit>
    fe18:	b128      	cbz	r0, fe26 <bt_smp_update_keys+0x7a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    fe1a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    fe1e:	7b53      	ldrb	r3, [r2, #13]
    fe20:	f043 0302 	orr.w	r3, r3, #2
    fe24:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    fe26:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    fe28:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
    fe2c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    fe2e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
    fe30:	d835      	bhi.n	fe9e <bt_smp_update_keys+0xf2>
    fe32:	b3ba      	cbz	r2, fea4 <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    fe34:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fe38:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    fe3a:	7d2b      	ldrb	r3, [r5, #20]
    fe3c:	7b6a      	ldrb	r2, [r5, #13]
    fe3e:	4293      	cmp	r3, r2
    fe40:	bf28      	it	cs
    fe42:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    fe44:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fe46:	4638      	mov	r0, r7
    fe48:	2105      	movs	r1, #5
    fe4a:	f019 f8dc 	bl	29006 <atomic_test_bit>
    fe4e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    fe52:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fe54:	b348      	cbz	r0, feaa <bt_smp_update_keys+0xfe>
		conn->le.keys->flags |= BT_KEYS_SC;
    fe56:	f042 0210 	orr.w	r2, r2, #16
    fe5a:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fe5c:	210d      	movs	r1, #13
    fe5e:	4638      	mov	r0, r7
    fe60:	f019 f8d1 	bl	29006 <atomic_test_bit>
    fe64:	b1c0      	cbz	r0, fe98 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    fe66:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    fe6a:	2120      	movs	r1, #32
    fe6c:	f019 fcf2 	bl	29854 <bt_keys_add_type>
    fe70:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    fe74:	f105 0247 	add.w	r2, r5, #71	; 0x47
    fe78:	331a      	adds	r3, #26
    fe7a:	3557      	adds	r5, #87	; 0x57
    fe7c:	f852 1b04 	ldr.w	r1, [r2], #4
    fe80:	f843 1b04 	str.w	r1, [r3], #4
    fe84:	42aa      	cmp	r2, r5
    fe86:	d1f9      	bne.n	fe7c <bt_smp_update_keys+0xd0>
__ssp_bos_icheck3(memset, void *, int)
    fe88:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    fe8c:	2300      	movs	r3, #0
    fe8e:	6113      	str	r3, [r2, #16]
    fe90:	6153      	str	r3, [r2, #20]
    fe92:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    fe96:	8313      	strh	r3, [r2, #24]
}
    fe98:	b004      	add	sp, #16
    fe9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
    fe9e:	3a05      	subs	r2, #5
    fea0:	2a01      	cmp	r2, #1
    fea2:	d9c7      	bls.n	fe34 <bt_smp_update_keys+0x88>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    fea4:	f023 0301 	bic.w	r3, r3, #1
    fea8:	e7c6      	b.n	fe38 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    feaa:	f022 0210 	bic.w	r2, r2, #16
    feae:	735a      	strb	r2, [r3, #13]
    feb0:	e7f2      	b.n	fe98 <bt_smp_update_keys+0xec>
    feb2:	bf00      	nop
    feb4:	0002ee9f 	.word	0x0002ee9f
    feb8:	0002b6f4 	.word	0x0002b6f4

0000febc <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    febc:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    febe:	4b07      	ldr	r3, [pc, #28]	; (fedc <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    fec0:	4807      	ldr	r0, [pc, #28]	; (fee0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    fec2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    fec6:	f003 0306 	and.w	r3, r3, #6
    feca:	1f9a      	subs	r2, r3, #6
    fecc:	4253      	negs	r3, r2
    fece:	4153      	adcs	r3, r2
    fed0:	4a04      	ldr	r2, [pc, #16]	; (fee4 <bt_smp_init+0x28>)
    fed2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    fed4:	f7fa fa30 	bl	a338 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    fed8:	2000      	movs	r0, #0
    feda:	bd08      	pop	{r3, pc}
    fedc:	20000000 	.word	0x20000000
    fee0:	20000288 	.word	0x20000288
    fee4:	2000356f 	.word	0x2000356f

0000fee8 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    fee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    feec:	4f14      	ldr	r7, [pc, #80]	; (ff40 <bt_keys_get_addr+0x58>)
    feee:	463d      	mov	r5, r7
{
    fef0:	4680      	mov	r8, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fef2:	f815 3b01 	ldrb.w	r3, [r5], #1
    fef6:	4283      	cmp	r3, r0
{
    fef8:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    fefa:	d00b      	beq.n	ff14 <bt_keys_get_addr+0x2c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    fefc:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    fefe:	4811      	ldr	r0, [pc, #68]	; (ff44 <bt_keys_get_addr+0x5c>)
    ff00:	9400      	str	r4, [sp, #0]
    ff02:	2207      	movs	r2, #7
    ff04:	4669      	mov	r1, sp
    ff06:	f8cd 4003 	str.w	r4, [sp, #3]
    ff0a:	f01a fd96 	bl	2aa3a <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    ff0e:	b158      	cbz	r0, ff28 <bt_keys_get_addr+0x40>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    ff10:	4620      	mov	r0, r4
    ff12:	e006      	b.n	ff22 <bt_keys_get_addr+0x3a>
    ff14:	2207      	movs	r2, #7
    ff16:	4628      	mov	r0, r5
    ff18:	f01a fd8f 	bl	2aa3a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    ff1c:	2800      	cmp	r0, #0
    ff1e:	d1ed      	bne.n	fefc <bt_keys_get_addr+0x14>
		keys = &key_pool[i];
    ff20:	4638      	mov	r0, r7
}
    ff22:	b002      	add	sp, #8
    ff24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys->id = id;
    ff28:	f887 8000 	strb.w	r8, [r7]
	memcpy(dst, src, sizeof(*dst));
    ff2c:	6833      	ldr	r3, [r6, #0]
    ff2e:	f8c7 3001 	str.w	r3, [r7, #1]
    ff32:	88b3      	ldrh	r3, [r6, #4]
    ff34:	80ab      	strh	r3, [r5, #4]
    ff36:	79b3      	ldrb	r3, [r6, #6]
		return keys;
    ff38:	4801      	ldr	r0, [pc, #4]	; (ff40 <bt_keys_get_addr+0x58>)
    ff3a:	71ab      	strb	r3, [r5, #6]
}
    ff3c:	e7f1      	b.n	ff22 <bt_keys_get_addr+0x3a>
    ff3e:	bf00      	nop
    ff40:	20001fdc 	.word	0x20001fdc
    ff44:	20001fdd 	.word	0x20001fdd

0000ff48 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    ff48:	460b      	mov	r3, r1
    ff4a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    ff4c:	4a04      	ldr	r2, [pc, #16]	; (ff60 <bt_keys_foreach+0x18>)
{
    ff4e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    ff50:	89d4      	ldrh	r4, [r2, #14]
    ff52:	4204      	tst	r4, r0
    ff54:	d002      	beq.n	ff5c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    ff56:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    ff58:	4610      	mov	r0, r2
    ff5a:	4718      	bx	r3
}
    ff5c:	bc10      	pop	{r4}
    ff5e:	4770      	bx	lr
    ff60:	20001fdc 	.word	0x20001fdc

0000ff64 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    ff64:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ff66:	4c09      	ldr	r4, [pc, #36]	; (ff8c <bt_keys_find+0x28>)
{
    ff68:	460b      	mov	r3, r1
    ff6a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    ff6c:	89e2      	ldrh	r2, [r4, #14]
    ff6e:	4202      	tst	r2, r0
    ff70:	d007      	beq.n	ff82 <bt_keys_find+0x1e>
    ff72:	7822      	ldrb	r2, [r4, #0]
    ff74:	429a      	cmp	r2, r3
    ff76:	d104      	bne.n	ff82 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    ff78:	2207      	movs	r2, #7
    ff7a:	1c60      	adds	r0, r4, #1
    ff7c:	f01a fd5d 	bl	2aa3a <memcmp>
    ff80:	b108      	cbz	r0, ff86 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    ff82:	2000      	movs	r0, #0
}
    ff84:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    ff86:	4620      	mov	r0, r4
    ff88:	e7fc      	b.n	ff84 <bt_keys_find+0x20>
    ff8a:	bf00      	nop
    ff8c:	20001fdc 	.word	0x20001fdc

0000ff90 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    ff90:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    ff92:	780b      	ldrb	r3, [r1, #0]
    ff94:	2b01      	cmp	r3, #1
    ff96:	4606      	mov	r6, r0
    ff98:	460d      	mov	r5, r1
    ff9a:	d001      	beq.n	ffa0 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    ff9c:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    ff9e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    ffa0:	798b      	ldrb	r3, [r1, #6]
    ffa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ffa6:	2b40      	cmp	r3, #64	; 0x40
    ffa8:	d1f8      	bne.n	ff9c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ffaa:	4c13      	ldr	r4, [pc, #76]	; (fff8 <bt_keys_find_irk+0x68>)
    ffac:	89e3      	ldrh	r3, [r4, #14]
    ffae:	079b      	lsls	r3, r3, #30
    ffb0:	d5f4      	bpl.n	ff9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    ffb2:	7823      	ldrb	r3, [r4, #0]
    ffb4:	42b3      	cmp	r3, r6
    ffb6:	d10b      	bne.n	ffd0 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
    ffb8:	2206      	movs	r2, #6
    ffba:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    ffbe:	1c68      	adds	r0, r5, #1
    ffc0:	f01a fd3b 	bl	2aa3a <memcmp>
    ffc4:	b908      	cbnz	r0, ffca <bt_keys_find_irk+0x3a>
			return &key_pool[i];
    ffc6:	4620      	mov	r0, r4
    ffc8:	e7e9      	b.n	ff9e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    ffca:	89e3      	ldrh	r3, [r4, #14]
    ffcc:	079a      	lsls	r2, r3, #30
    ffce:	d5e5      	bpl.n	ff9c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    ffd0:	7823      	ldrb	r3, [r4, #0]
    ffd2:	42b3      	cmp	r3, r6
    ffd4:	d1e2      	bne.n	ff9c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    ffd6:	1c6e      	adds	r6, r5, #1
    ffd8:	4808      	ldr	r0, [pc, #32]	; (fffc <bt_keys_find_irk+0x6c>)
    ffda:	4631      	mov	r1, r6
    ffdc:	f016 feaa 	bl	26d34 <bt_rpa_irk_matches>
    ffe0:	2800      	cmp	r0, #0
    ffe2:	d0db      	beq.n	ff9c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    ffe4:	f8d5 3001 	ldr.w	r3, [r5, #1]
    ffe8:	4805      	ldr	r0, [pc, #20]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffea:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
    ffee:	f8b5 3005 	ldrh.w	r3, [r5, #5]
    fff2:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
    fff4:	383a      	subs	r0, #58	; 0x3a
}
    fff6:	e7d2      	b.n	ff9e <bt_keys_find_irk+0xe>
    fff8:	20001fdc 	.word	0x20001fdc
    fffc:	20002006 	.word	0x20002006
   10000:	20002016 	.word	0x20002016

00010004 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   10004:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   10006:	4c06      	ldr	r4, [pc, #24]	; (10020 <bt_keys_find_addr+0x1c>)
   10008:	7823      	ldrb	r3, [r4, #0]
   1000a:	4283      	cmp	r3, r0
   1000c:	d104      	bne.n	10018 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   1000e:	2207      	movs	r2, #7
   10010:	1c60      	adds	r0, r4, #1
   10012:	f01a fd12 	bl	2aa3a <memcmp>
   10016:	b108      	cbz	r0, 1001c <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   10018:	2000      	movs	r0, #0
}
   1001a:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1001c:	4620      	mov	r0, r4
   1001e:	e7fc      	b.n	1001a <bt_keys_find_addr+0x16>
   10020:	20001fdc 	.word	0x20001fdc

00010024 <mem_init>:
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10024:	f100 0c07 	add.w	ip, r0, #7
   10028:	f02c 0c03 	bic.w	ip, ip, #3
{
   1002c:	b410      	push	{r4}

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1002e:	1e54      	subs	r4, r2, #1
	*mem_head = mem_pool;
   10030:	6018      	str	r0, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10032:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10034:	f8ac 2000 	strh.w	r2, [ip]
		     sizeof(mem_pool));
	while (mem_count--) {
   10038:	3a02      	subs	r2, #2
   1003a:	b293      	uxth	r3, r2
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1003c:	fb01 f204 	mul.w	r2, r1, r4
   10040:	f04f 0c00 	mov.w	ip, #0
   10044:	f840 c002 	str.w	ip, [r0, r2]
	while (mem_count--) {
   10048:	b174      	cbz	r4, 10068 <mem_init+0x44>
   1004a:	fb03 1401 	mla	r4, r3, r1, r1
   1004e:	fb03 f201 	mul.w	r2, r3, r1
   10052:	4420      	add	r0, r4
   10054:	1b12      	subs	r2, r2, r4
   10056:	f64f 7cff 	movw	ip, #65535	; 0xffff
   1005a:	3b01      	subs	r3, #1
   1005c:	b29b      	uxth	r3, r3
   1005e:	4563      	cmp	r3, ip
   10060:	5080      	str	r0, [r0, r2]
   10062:	eba0 0001 	sub.w	r0, r0, r1
   10066:	d1f8      	bne.n	1005a <mem_init+0x36>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   10068:	bc10      	pop	{r4}
   1006a:	4770      	bx	lr

0001006c <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   1006c:	4603      	mov	r3, r0
	if (*mem_head) {
   1006e:	6800      	ldr	r0, [r0, #0]
   10070:	b110      	cbz	r0, 10078 <mem_acquire+0xc>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   10072:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10074:	b90a      	cbnz	r2, 1007a <mem_acquire+0xe>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
				free_count;
		}

		*mem_head = head;
   10076:	601a      	str	r2, [r3, #0]
		return mem;
	}

	return NULL;
}
   10078:	4770      	bx	lr
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1007a:	f100 0c07 	add.w	ip, r0, #7
   1007e:	f02c 0c03 	bic.w	ip, ip, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10082:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10084:	f8bc c000 	ldrh.w	ip, [ip]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10088:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
   1008c:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10090:	f8a1 c000 	strh.w	ip, [r1]
   10094:	e7ef      	b.n	10076 <mem_acquire+0xa>
   10096:	bf00      	nop

00010098 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   10098:	b082      	sub	sp, #8
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1009a:	680b      	ldr	r3, [r1, #0]
{
   1009c:	9001      	str	r0, [sp, #4]
   1009e:	4602      	mov	r2, r0
	if (*mem_head) {
   100a0:	b183      	cbz	r3, 100c4 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   100a2:	3307      	adds	r3, #7
   100a4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   100a8:	8818      	ldrh	r0, [r3, #0]
   100aa:	3001      	adds	r0, #1
   100ac:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   100ae:	4613      	mov	r3, r2
   100b0:	f8d1 c000 	ldr.w	ip, [r1]
   100b4:	f843 cb07 	str.w	ip, [r3], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   100b8:	f023 0303 	bic.w	r3, r3, #3
   100bc:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
   100be:	600a      	str	r2, [r1, #0]
}
   100c0:	b002      	add	sp, #8
   100c2:	4770      	bx	lr
   100c4:	2001      	movs	r0, #1
   100c6:	e7f2      	b.n	100ae <mem_release+0x16>

000100c8 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   100c8:	fb02 0001 	mla	r0, r2, r1, r0
   100cc:	4770      	bx	lr
   100ce:	bf00      	nop

000100d0 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   100d0:	1a40      	subs	r0, r0, r1
   100d2:	b280      	uxth	r0, r0
}
   100d4:	fbb0 f0f2 	udiv	r0, r0, r2
   100d8:	4770      	bx	lr
   100da:	bf00      	nop

000100dc <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   100dc:	1e53      	subs	r3, r2, #1
	src += len;
   100de:	4411      	add	r1, r2
	while (len--) {
   100e0:	b29b      	uxth	r3, r3
   100e2:	b142      	cbz	r2, 100f6 <mem_rcopy+0x1a>
   100e4:	43db      	mvns	r3, r3
   100e6:	3801      	subs	r0, #1
   100e8:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   100ea:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   100ee:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   100f2:	4291      	cmp	r1, r2
   100f4:	d1f9      	bne.n	100ea <mem_rcopy+0xe>
	}
}
   100f6:	4770      	bx	lr

000100f8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   100f8:	4401      	add	r1, r0
   100fa:	e002      	b.n	10102 <mem_nz+0xa>
		if (*src++) {
   100fc:	f810 3b01 	ldrb.w	r3, [r0], #1
   10100:	b91b      	cbnz	r3, 1010a <mem_nz+0x12>
	while (len--) {
   10102:	4288      	cmp	r0, r1
   10104:	d1fa      	bne.n	100fc <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   10106:	2000      	movs	r0, #0
   10108:	4770      	bx	lr
			return 1;
   1010a:	2001      	movs	r0, #1
}
   1010c:	4770      	bx	lr
   1010e:	bf00      	nop

00010110 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10110:	6010      	str	r0, [r2, #0]
   10112:	6008      	str	r0, [r1, #0]

	return link;
}
   10114:	4770      	bx	lr
   10116:	bf00      	nop

00010118 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   10118:	680a      	ldr	r2, [r1, #0]
{
   1011a:	4603      	mov	r3, r0
	if (*head != *tail) {
   1011c:	6800      	ldr	r0, [r0, #0]
   1011e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10120:	bf05      	ittet	eq
   10122:	2200      	moveq	r2, #0
   10124:	600a      	streq	r2, [r1, #0]
		return NULL;
   10126:	2000      	movne	r0, #0
	*head = *tail = NULL;
   10128:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1012a:	4770      	bx	lr

0001012c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1012c:	f8d2 c000 	ldr.w	ip, [r2]
   10130:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   10134:	f8d2 c000 	ldr.w	ip, [r2]
   10138:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1013c:	6010      	str	r0, [r2, #0]

	return link;
}
   1013e:	4770      	bx	lr

00010140 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10140:	4288      	cmp	r0, r1
   10142:	d003      	beq.n	1014c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10144:	b11a      	cbz	r2, 1014e <memq_peek+0xe>
		*mem = head->mem;
   10146:	6843      	ldr	r3, [r0, #4]
   10148:	6013      	str	r3, [r2, #0]
   1014a:	4770      	bx	lr
		return NULL;
   1014c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1014e:	4770      	bx	lr

00010150 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10150:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10152:	4283      	cmp	r3, r0
   10154:	d009      	beq.n	1016a <memq_dequeue+0x1a>
	if (mem) {
   10156:	b12a      	cbz	r2, 10164 <memq_dequeue+0x14>
		*mem = head->mem;
   10158:	6858      	ldr	r0, [r3, #4]
   1015a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1015c:	681a      	ldr	r2, [r3, #0]
   1015e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10160:	4618      	mov	r0, r3
   10162:	4770      	bx	lr
	if (old_head == NULL) {
   10164:	2b00      	cmp	r3, #0
   10166:	d1f9      	bne.n	1015c <memq_dequeue+0xc>
   10168:	e7fa      	b.n	10160 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1016a:	2300      	movs	r3, #0
   1016c:	e7f8      	b.n	10160 <memq_dequeue+0x10>
   1016e:	bf00      	nop

00010170 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   10170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10174:	f8df 8030 	ldr.w	r8, [pc, #48]	; 101a8 <mayfly_init+0x38>
   10178:	4e0c      	ldr	r6, [pc, #48]	; (101ac <mayfly_init+0x3c>)
   1017a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1017c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   10180:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   10182:	1d22      	adds	r2, r4, #4
   10184:	4621      	mov	r1, r4
   10186:	4628      	mov	r0, r5
		while (caller_id--) {
   10188:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1018a:	f7ff ffc1 	bl	10110 <memq_init>
		while (caller_id--) {
   1018e:	42b4      	cmp	r4, r6
   10190:	f1a5 0508 	sub.w	r5, r5, #8
   10194:	d1f5      	bne.n	10182 <mayfly_init+0x12>
	while (callee_id--) {
   10196:	3f04      	subs	r7, #4
   10198:	1d3b      	adds	r3, r7, #4
   1019a:	f1a8 0820 	sub.w	r8, r8, #32
   1019e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   101a2:	d1eb      	bne.n	1017c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   101a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   101a8:	200020b0 	.word	0x200020b0
   101ac:	20002140 	.word	0x20002140

000101b0 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   101b0:	b410      	push	{r4}
   101b2:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   101b4:	4c15      	ldr	r4, [pc, #84]	; (1020c <mayfly_enable+0x5c>)
{
   101b6:	468c      	mov	ip, r1
	if (enable) {
   101b8:	b192      	cbz	r2, 101e0 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   101ba:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   101be:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   101c2:	0100      	lsls	r0, r0, #4
   101c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   101c8:	4421      	add	r1, r4
   101ca:	7a48      	ldrb	r0, [r1, #9]
   101cc:	7a0c      	ldrb	r4, [r1, #8]
   101ce:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   101d0:	bf04      	itt	eq
   101d2:	3001      	addeq	r0, #1
   101d4:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   101d6:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   101d8:	4661      	mov	r1, ip
   101da:	4618      	mov	r0, r3
   101dc:	f00f badc 	b.w	1f798 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   101e0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   101e4:	0112      	lsls	r2, r2, #4
   101e6:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   101ea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   101ee:	4423      	add	r3, r4
   101f0:	7a9c      	ldrb	r4, [r3, #10]
   101f2:	7ada      	ldrb	r2, [r3, #11]
   101f4:	42a2      	cmp	r2, r4
   101f6:	d001      	beq.n	101fc <mayfly_enable+0x4c>
}
   101f8:	bc10      	pop	{r4}
   101fa:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   101fc:	3201      	adds	r2, #1
   101fe:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10200:	4b03      	ldr	r3, [pc, #12]	; (10210 <mayfly_enable+0x60>)
   10202:	2201      	movs	r2, #1
   10204:	545a      	strb	r2, [r3, r1]
}
   10206:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   10208:	f00f bb1c 	b.w	1f844 <mayfly_pend>
   1020c:	200020bc 	.word	0x200020bc
   10210:	200020b8 	.word	0x200020b8

00010214 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10214:	b570      	push	{r4, r5, r6, lr}
   10216:	b082      	sub	sp, #8
   10218:	4606      	mov	r6, r0
   1021a:	9101      	str	r1, [sp, #4]
   1021c:	461c      	mov	r4, r3
   1021e:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10220:	b32a      	cbz	r2, 1026e <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10222:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10224:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10226:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10228:	f012 0203 	ands.w	r2, r2, #3
   1022c:	d005      	beq.n	1023a <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   1022e:	2a01      	cmp	r2, #1
   10230:	d042      	beq.n	102b8 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10232:	3301      	adds	r3, #1
   10234:	b2db      	uxtb	r3, r3
   10236:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10238:	e00f      	b.n	1025a <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   1023a:	3301      	adds	r3, #1
   1023c:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1023e:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   10240:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10242:	2304      	movs	r3, #4
   10244:	fb11 3105 	smlabb	r1, r1, r5, r3
   10248:	4a1c      	ldr	r2, [pc, #112]	; (102bc <mayfly_enqueue+0xa8>)
   1024a:	6860      	ldr	r0, [r4, #4]
   1024c:	230c      	movs	r3, #12
   1024e:	fb13 1306 	smlabb	r3, r3, r6, r1
   10252:	441a      	add	r2, r3
   10254:	4621      	mov	r1, r4
   10256:	f7ff ff69 	bl	1012c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1025a:	4b19      	ldr	r3, [pc, #100]	; (102c0 <mayfly_enqueue+0xac>)
   1025c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1025e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10260:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10262:	4629      	mov	r1, r5
   10264:	f00f faee 	bl	1f844 <mayfly_pend>

	return 0;
   10268:	2000      	movs	r0, #0
}
   1026a:	b002      	add	sp, #8
   1026c:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1026e:	f00f fad3 	bl	1f818 <mayfly_prio_is_equal>
   10272:	2800      	cmp	r0, #0
   10274:	d0d5      	beq.n	10222 <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10276:	4629      	mov	r1, r5
   10278:	4630      	mov	r0, r6
   1027a:	f00f faad 	bl	1f7d8 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1027e:	2800      	cmp	r0, #0
   10280:	d0cf      	beq.n	10222 <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   10282:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10286:	0112      	lsls	r2, r2, #4
   10288:	490c      	ldr	r1, [pc, #48]	; (102bc <mayfly_enqueue+0xa8>)
   1028a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1028e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10292:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   10294:	7a9a      	ldrb	r2, [r3, #10]
   10296:	7adb      	ldrb	r3, [r3, #11]
   10298:	429a      	cmp	r2, r3
   1029a:	d1c2      	bne.n	10222 <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   1029c:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1029e:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   102a0:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   102a2:	0792      	lsls	r2, r2, #30
   102a4:	d002      	beq.n	102ac <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   102a6:	3302      	adds	r3, #2
   102a8:	b2db      	uxtb	r3, r3
   102aa:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   102ac:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   102b0:	4798      	blx	r3
		return 0;
   102b2:	2000      	movs	r0, #0
}
   102b4:	b002      	add	sp, #8
   102b6:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   102b8:	4610      	mov	r0, r2
   102ba:	e7d6      	b.n	1026a <mayfly_enqueue+0x56>
   102bc:	200020bc 	.word	0x200020bc
   102c0:	200020b8 	.word	0x200020b8

000102c4 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   102c4:	4a50      	ldr	r2, [pc, #320]	; (10408 <mayfly_run+0x144>)
   102c6:	5c13      	ldrb	r3, [r2, r0]
   102c8:	2b00      	cmp	r3, #0
   102ca:	f000 809b 	beq.w	10404 <mayfly_run+0x140>
{
   102ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   102d2:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   102d4:	4f4d      	ldr	r7, [pc, #308]	; (1040c <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   102d6:	5413      	strb	r3, [r2, r0]
{
   102d8:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   102da:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   102dc:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   102e0:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   102e4:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   102e8:	9303      	str	r3, [sp, #12]
   102ea:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   102ee:	f10b 0804 	add.w	r8, fp, #4
   102f2:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   102f6:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   102fa:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   102fc:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10300:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   10302:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10304:	f7ff ff1c 	bl	10140 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10308:	f107 0624 	add.w	r6, r7, #36	; 0x24
   1030c:	4683      	mov	fp, r0
   1030e:	2800      	cmp	r0, #0
   10310:	d034      	beq.n	1037c <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10312:	9c05      	ldr	r4, [sp, #20]
   10314:	7863      	ldrb	r3, [r4, #1]
   10316:	7825      	ldrb	r5, [r4, #0]
   10318:	1aed      	subs	r5, r5, r3
   1031a:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   1031e:	2d01      	cmp	r5, #1
   10320:	d106      	bne.n	10330 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10322:	3b01      	subs	r3, #1
   10324:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10326:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   1032a:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   1032c:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   1032e:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10330:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   10332:	1ac3      	subs	r3, r0, r3
   10334:	f003 0303 	and.w	r3, r3, #3
   10338:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   1033a:	f04f 0200 	mov.w	r2, #0
   1033e:	4631      	mov	r1, r6
	req = m->_req;
   10340:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   10344:	d00f      	beq.n	10366 <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   10346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10348:	f7ff ff02 	bl	10150 <memq_dequeue>
		ack = m->_ack;
   1034c:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10350:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10352:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10356:	eba3 030c 	sub.w	r3, r3, ip
   1035a:	f003 0303 	and.w	r3, r3, #3
   1035e:	2b01      	cmp	r3, #1
		m->_ack = req;
   10360:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10364:	d046      	beq.n	103f4 <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10366:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   1036a:	aa05      	add	r2, sp, #20
   1036c:	f7ff fee8 	bl	10140 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   10370:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   10372:	9000      	str	r0, [sp, #0]
   10374:	4683      	mov	fp, r0
			if (state == 1U) {
   10376:	d02b      	beq.n	103d0 <mayfly_run+0x10c>
		while (link) {
   10378:	2800      	cmp	r0, #0
   1037a:	d1ca      	bne.n	10312 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   1037c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10380:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   10384:	429a      	cmp	r2, r3
   10386:	d003      	beq.n	10390 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   10388:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   1038c:	2301      	movs	r3, #1
   1038e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   10390:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10394:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   10398:	429a      	cmp	r2, r3
   1039a:	d003      	beq.n	103a4 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   1039c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   103a0:	2301      	movs	r3, #1
   103a2:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   103a4:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   103a8:	fa5f f989 	uxtb.w	r9, r9
   103ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   103b0:	f1a7 070c 	sub.w	r7, r7, #12
   103b4:	d1a1      	bne.n	102fa <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   103b6:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   103ba:	b1c3      	cbz	r3, 103ee <mayfly_run+0x12a>
   103bc:	9b03      	ldr	r3, [sp, #12]
   103be:	b9b3      	cbnz	r3, 103ee <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   103c0:	461a      	mov	r2, r3
   103c2:	4651      	mov	r1, sl
   103c4:	4650      	mov	r0, sl
	}
}
   103c6:	b007      	add	sp, #28
   103c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   103cc:	f00f b9e4 	b.w	1f798 <mayfly_enable_cb>
				if (caller_id || link) {
   103d0:	f1b9 0f00 	cmp.w	r9, #0
   103d4:	d101      	bne.n	103da <mayfly_run+0x116>
   103d6:	2800      	cmp	r0, #0
   103d8:	d0d0      	beq.n	1037c <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   103da:	f8dd a008 	ldr.w	sl, [sp, #8]
   103de:	4a0a      	ldr	r2, [pc, #40]	; (10408 <mayfly_run+0x144>)
   103e0:	2301      	movs	r3, #1
   103e2:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   103e6:	4651      	mov	r1, sl
   103e8:	4650      	mov	r0, sl
   103ea:	f00f fa2b 	bl	1f844 <mayfly_pend>
}
   103ee:	b007      	add	sp, #28
   103f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   103f4:	4642      	mov	r2, r8
   103f6:	4621      	mov	r1, r4
   103f8:	4658      	mov	r0, fp
			m->_ack = ack;
   103fa:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   103fe:	f7ff fe95 	bl	1012c <memq_enqueue>
   10402:	e7b0      	b.n	10366 <mayfly_run+0xa2>
   10404:	4770      	bx	lr
   10406:	bf00      	nop
   10408:	200020b8 	.word	0x200020b8
   1040c:	200020bc 	.word	0x200020bc

00010410 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10410:	1e4b      	subs	r3, r1, #1
   10412:	b2db      	uxtb	r3, r3
   10414:	b171      	cbz	r1, 10434 <util_ones_count_get+0x24>
   10416:	1e41      	subs	r1, r0, #1
   10418:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   1041c:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   1041e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   10422:	b123      	cbz	r3, 1042e <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   10424:	1e5a      	subs	r2, r3, #1
			one_count++;
   10426:	3001      	adds	r0, #1
		while (bite) {
   10428:	4013      	ands	r3, r2
			one_count++;
   1042a:	b2c0      	uxtb	r0, r0
		while (bite) {
   1042c:	d1fa      	bne.n	10424 <util_ones_count_get+0x14>
	while (octets_len--) {
   1042e:	4561      	cmp	r1, ip
   10430:	d1f5      	bne.n	1041e <util_ones_count_get+0xe>
   10432:	4770      	bx	lr
	uint8_t one_count = 0U;
   10434:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   10436:	4770      	bx	lr

00010438 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   10438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   1043c:	4d48      	ldr	r5, [pc, #288]	; (10560 <util_aa_le32+0x128>)
{
   1043e:	b083      	sub	sp, #12
   10440:	4607      	mov	r7, r0
   10442:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   10444:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   10446:	2104      	movs	r1, #4
   10448:	4638      	mov	r0, r7
   1044a:	f00c f98f 	bl	1c76c <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1044e:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   10450:	231e      	movs	r3, #30
   10452:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   10456:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   1045a:	f04f 0901 	mov.w	r9, #1
   1045e:	e00c      	b.n	1047a <util_aa_le32+0x42>
			transitions++;
   10460:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   10464:	2b1b      	cmp	r3, #27
			transitions++;
   10466:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   10468:	d967      	bls.n	1053a <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   1046a:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   1046e:	2919      	cmp	r1, #25
   10470:	d04e      	beq.n	10510 <util_aa_le32+0xd8>
   10472:	468e      	mov	lr, r1
   10474:	4694      	mov	ip, r2
	while (bit_idx--) {
   10476:	3b01      	subs	r3, #1
   10478:	d31e      	bcc.n	104b8 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   1047a:	fa20 f203 	lsr.w	r2, r0, r3
   1047e:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   10482:	4594      	cmp	ip, r2
   10484:	d1ec      	bne.n	10460 <util_aa_le32+0x28>
			consecutive_cnt++;
   10486:	f109 0801 	add.w	r8, r9, #1
   1048a:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   1048e:	f1b8 0f06 	cmp.w	r8, #6
   10492:	d90d      	bls.n	104b0 <util_aa_le32+0x78>
   10494:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   10496:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   1049a:	b3a2      	cbz	r2, 10506 <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   1049c:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   104a0:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   104a4:	4571      	cmp	r1, lr
   104a6:	d1e6      	bne.n	10476 <util_aa_le32+0x3e>
				transitions++;
   104a8:	3101      	adds	r1, #1
   104aa:	b2c9      	uxtb	r1, r1
   104ac:	4662      	mov	r2, ip
   104ae:	e7dc      	b.n	1046a <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   104b0:	d149      	bne.n	10546 <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   104b2:	46c1      	mov	r9, r8
	while (bit_idx--) {
   104b4:	3b01      	subs	r3, #1
   104b6:	d2e0      	bcs.n	1047a <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   104b8:	ea80 0305 	eor.w	r3, r0, r5
   104bc:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   104be:	f10d 0c04 	add.w	ip, sp, #4
   104c2:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   104c6:	2200      	movs	r2, #0
		bite = *octets;
   104c8:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   104cc:	b123      	cbz	r3, 104d8 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   104ce:	1e59      	subs	r1, r3, #1
			one_count++;
   104d0:	3201      	adds	r2, #1
		while (bite) {
   104d2:	400b      	ands	r3, r1
			one_count++;
   104d4:	b2d2      	uxtb	r2, r2
		while (bite) {
   104d6:	d1fa      	bne.n	104ce <util_aa_le32+0x96>
	while (octets_len--) {
   104d8:	45e6      	cmp	lr, ip
   104da:	d1f5      	bne.n	104c8 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   104dc:	2a01      	cmp	r2, #1
   104de:	d909      	bls.n	104f4 <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   104e0:	b283      	uxth	r3, r0
   104e2:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   104e6:	ea4f 4210 	mov.w	r2, r0, lsr #16
   104ea:	d11b      	bne.n	10524 <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   104ec:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   104ee:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   104f2:	d117      	bne.n	10524 <util_aa_le32+0xec>
	if (!retry) {
   104f4:	3e01      	subs	r6, #1
   104f6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   104fa:	d1a4      	bne.n	10446 <util_aa_le32+0xe>
		return -EFAULT;
   104fc:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   10500:	b003      	add	sp, #12
   10502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   10506:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   1050a:	f04f 0c01 	mov.w	ip, #1
   1050e:	e7c9      	b.n	104a4 <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   10510:	3301      	adds	r3, #1
   10512:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   10516:	b112      	cbz	r2, 1051e <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   10518:	425b      	negs	r3, r3
   1051a:	4018      	ands	r0, r3
   1051c:	e7cc      	b.n	104b8 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   1051e:	3b01      	subs	r3, #1
   10520:	4318      	orrs	r0, r3
   10522:	e7c9      	b.n	104b8 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   10524:	f3c0 2107 	ubfx	r1, r0, #8, #8
   10528:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   1052a:	7038      	strb	r0, [r7, #0]
	return 0;
   1052c:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   1052e:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   10530:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   10532:	70fb      	strb	r3, [r7, #3]
}
   10534:	b003      	add	sp, #12
   10536:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   1053a:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   1053e:	2901      	cmp	r1, #1
   10540:	d9a9      	bls.n	10496 <util_aa_le32+0x5e>
   10542:	46c1      	mov	r9, r8
   10544:	e793      	b.n	1046e <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   10546:	2b1c      	cmp	r3, #28
   10548:	d904      	bls.n	10554 <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1054a:	2b1b      	cmp	r3, #27
   1054c:	d906      	bls.n	1055c <util_aa_le32+0x124>
   1054e:	4694      	mov	ip, r2
   10550:	46c1      	mov	r9, r8
   10552:	e7af      	b.n	104b4 <util_aa_le32+0x7c>
   10554:	f1be 0f00 	cmp.w	lr, #0
   10558:	d09c      	beq.n	10494 <util_aa_le32+0x5c>
   1055a:	e7f6      	b.n	1054a <util_aa_le32+0x112>
   1055c:	4671      	mov	r1, lr
   1055e:	e7ee      	b.n	1053e <util_aa_le32+0x106>
   10560:	8e89bed6 	.word	0x8e89bed6

00010564 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   10564:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   10566:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   10568:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   1056a:	2bff      	cmp	r3, #255	; 0xff
   1056c:	d014      	beq.n	10598 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   1056e:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   10572:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   10574:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   10578:	d028      	beq.n	105cc <ticker_dequeue+0x68>
	total = 0U;
   1057a:	f04f 0c00 	mov.w	ip, #0
   1057e:	e001      	b.n	10584 <ticker_dequeue+0x20>
		if (current == id) {
   10580:	4299      	cmp	r1, r3
   10582:	d00b      	beq.n	1059c <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10584:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   10586:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   10588:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   1058a:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   1058c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   10590:	44a4      	add	ip, r4
		ticker_current = &node[current];
   10592:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   10596:	d1f3      	bne.n	10580 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   10598:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   1059a:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   1059c:	4571      	cmp	r1, lr
   1059e:	d018      	beq.n	105d2 <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   105a0:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   105a2:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   105a4:	fa0f fe8e 	sxth.w	lr, lr
   105a8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   105ac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   105b0:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   105b4:	7813      	ldrb	r3, [r2, #0]
   105b6:	2bff      	cmp	r3, #255	; 0xff
   105b8:	d006      	beq.n	105c8 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   105ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   105be:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   105c2:	68ab      	ldr	r3, [r5, #8]
   105c4:	4403      	add	r3, r0
   105c6:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   105c8:	4460      	add	r0, ip
}
   105ca:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   105cc:	469e      	mov	lr, r3
	total = 0U;
   105ce:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   105d2:	7813      	ldrb	r3, [r2, #0]
   105d4:	7743      	strb	r3, [r0, #29]
   105d6:	e7e4      	b.n	105a2 <ticker_dequeue+0x3e>

000105d8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   105d8:	eba2 0c01 	sub.w	ip, r2, r1
   105dc:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   105e0:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   105e2:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   105e4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   105e6:	d10a      	bne.n	105fe <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105e8:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   105ec:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   105ee:	42a3      	cmp	r3, r4
   105f0:	d914      	bls.n	1061c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   105f2:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   105f4:	2100      	movs	r1, #0
}
   105f6:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   105f8:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   105fa:	6141      	str	r1, [r0, #20]
}
   105fc:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   105fe:	1a89      	subs	r1, r1, r2
   10600:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10604:	428b      	cmp	r3, r1
   10606:	d806      	bhi.n	10616 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   10608:	4421      	add	r1, r4
   1060a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   1060c:	2300      	movs	r3, #0
}
   1060e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10610:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10612:	6141      	str	r1, [r0, #20]
}
   10614:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   10616:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10618:	42a3      	cmp	r3, r4
   1061a:	d8ea      	bhi.n	105f2 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   1061c:	1ae1      	subs	r1, r4, r3
   1061e:	e7f5      	b.n	1060c <ticks_to_expire_prep+0x34>

00010620 <ticker_job_list_insert>:
{
   10620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10624:	b087      	sub	sp, #28
   10626:	4603      	mov	r3, r0
	count_user = instance->count_user;
   10628:	7a42      	ldrb	r2, [r0, #9]
{
   1062a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   1062c:	6800      	ldr	r0, [r0, #0]
   1062e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   10630:	6858      	ldr	r0, [r3, #4]
   10632:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   10634:	2a00      	cmp	r2, #0
   10636:	f000 80f4 	beq.w	10822 <ticker_job_list_insert+0x202>
   1063a:	1e53      	subs	r3, r2, #1
   1063c:	b2db      	uxtb	r3, r3
   1063e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   10642:	460f      	mov	r7, r1
   10644:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   10646:	9b03      	ldr	r3, [sp, #12]
   10648:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   1064a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   1064c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1064e:	2fff      	cmp	r7, #255	; 0xff
   10650:	d05e      	beq.n	10710 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   10652:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   10656:	9b02      	ldr	r3, [sp, #8]
   10658:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   1065c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1065e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   10662:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   10666:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   10668:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   1066a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1066e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   10672:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   10676:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   10678:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1067c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1067e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10682:	d10f      	bne.n	106a4 <ticker_job_list_insert+0x84>
   10684:	e0c8      	b.n	10818 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10686:	1a09      	subs	r1, r1, r0
   10688:	d106      	bne.n	10698 <ticker_job_list_insert+0x78>
   1068a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   1068e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   10692:	45e2      	cmp	sl, ip
   10694:	f200 8086 	bhi.w	107a4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   10698:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1069c:	2bff      	cmp	r3, #255	; 0xff
   1069e:	4691      	mov	r9, r2
   106a0:	d072      	beq.n	10788 <ticker_job_list_insert+0x168>
   106a2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   106a4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   106a8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   106ac:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   106ae:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   106b2:	4288      	cmp	r0, r1
   106b4:	d9e7      	bls.n	10686 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   106b6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   106ba:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   106be:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   106c2:	d166      	bne.n	10792 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   106c4:	9b01      	ldr	r3, [sp, #4]
   106c6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   106ca:	2aff      	cmp	r2, #255	; 0xff
   106cc:	d008      	beq.n	106e0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   106ce:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   106d2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   106d6:	f8de 3008 	ldr.w	r3, [lr, #8]
   106da:	1a5b      	subs	r3, r3, r1
   106dc:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   106e0:	78a3      	ldrb	r3, [r4, #2]
   106e2:	3301      	adds	r3, #1
   106e4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   106e6:	2d00      	cmp	r5, #0
   106e8:	d0b1      	beq.n	1064e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   106ea:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   106ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   106f0:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   106f2:	2200      	movs	r2, #0
   106f4:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   106f6:	b113      	cbz	r3, 106fe <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   106f8:	6b29      	ldr	r1, [r5, #48]	; 0x30
   106fa:	4610      	mov	r0, r2
   106fc:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   106fe:	6863      	ldr	r3, [r4, #4]
   10700:	2b00      	cmp	r3, #0
   10702:	d1a4      	bne.n	1064e <ticker_job_list_insert+0x2e>
					ticker->op_context =
   10704:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   10708:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   1070a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1070e:	d1a0      	bne.n	10652 <ticker_job_list_insert+0x32>
   10710:	9b03      	ldr	r3, [sp, #12]
   10712:	7898      	ldrb	r0, [r3, #2]
   10714:	42b0      	cmp	r0, r6
   10716:	d02f      	beq.n	10778 <ticker_job_list_insert+0x158>
   10718:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   1071c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10720:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   10724:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10728:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   1072c:	3601      	adds	r6, #1
   1072e:	b2f6      	uxtb	r6, r6
					first = 0U;
   10730:	42b1      	cmp	r1, r6
   10732:	bf08      	it	eq
   10734:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10736:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   10738:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1073c:	d11a      	bne.n	10774 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1073e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   10742:	9902      	ldr	r1, [sp, #8]
   10744:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   10748:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   1074c:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   10750:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   10752:	7863      	ldrb	r3, [r4, #1]
   10754:	1a5b      	subs	r3, r3, r1
   10756:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   1075a:	d025      	beq.n	107a8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1075c:	f04f 0300 	mov.w	r3, #0
   10760:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   10764:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10766:	2001      	movs	r0, #1
	user_op->status = status;
   10768:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1076a:	b10b      	cbz	r3, 10770 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1076c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1076e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10770:	f89b 0002 	ldrb.w	r0, [fp, #2]
   10774:	42b0      	cmp	r0, r6
   10776:	d1d1      	bne.n	1071c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   10778:	9a03      	ldr	r2, [sp, #12]
   1077a:	9905      	ldr	r1, [sp, #20]
   1077c:	4291      	cmp	r1, r2
   1077e:	f1a2 0308 	sub.w	r3, r2, #8
   10782:	d04e      	beq.n	10822 <ticker_job_list_insert+0x202>
   10784:	9303      	str	r3, [sp, #12]
   10786:	e75e      	b.n	10646 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   10788:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   1078c:	f88b 3000 	strb.w	r3, [fp]
   10790:	461a      	mov	r2, r3
		node[previous].next = id;
   10792:	fa0f f989 	sxth.w	r9, r9
   10796:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   1079a:	ea4f 1909 	mov.w	r9, r9, lsl #4
   1079e:	f80e 8009 	strb.w	r8, [lr, r9]
   107a2:	e792      	b.n	106ca <ticker_job_list_insert+0xaa>
   107a4:	4601      	mov	r1, r0
   107a6:	e786      	b.n	106b6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   107a8:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   107aa:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   107ac:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   107b0:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   107b2:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   107b6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   107ba:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   107bc:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   107c0:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   107c4:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   107c8:	d024      	beq.n	10814 <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   107ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   107ce:	1ad3      	subs	r3, r2, r3
   107d0:	fab3 f383 	clz	r3, r3
   107d4:	095b      	lsrs	r3, r3, #5
   107d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   107da:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   107de:	429a      	cmp	r2, r3
   107e0:	bf88      	it	hi
   107e2:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   107e4:	69ab      	ldr	r3, [r5, #24]
   107e6:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   107e8:	69eb      	ldr	r3, [r5, #28]
   107ea:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   107ec:	6a2b      	ldr	r3, [r5, #32]
   107ee:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   107f0:	68ab      	ldr	r3, [r5, #8]
   107f2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   107f4:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   107f6:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   107f8:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   107fa:	686a      	ldr	r2, [r5, #4]
   107fc:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   107fe:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10800:	f7ff feea 	bl	105d8 <ticks_to_expire_prep>
	ticker->force = 1U;
   10804:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   10808:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   1080c:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   10810:	70e3      	strb	r3, [r4, #3]
}
   10812:	e729      	b.n	10668 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   10814:	461a      	mov	r2, r3
   10816:	e7e5      	b.n	107e4 <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   10818:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   1081c:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10820:	e75e      	b.n	106e0 <ticker_job_list_insert+0xc0>
}
   10822:	b007      	add	sp, #28
   10824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010828 <ticker_worker>:
{
   10828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1082c:	7f82      	ldrb	r2, [r0, #30]
{
   1082e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   10830:	2301      	movs	r3, #1
	if (instance->job_guard) {
   10832:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   10834:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   10836:	2a00      	cmp	r2, #0
   10838:	d15b      	bne.n	108f2 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   1083a:	7f43      	ldrb	r3, [r0, #29]
   1083c:	2bff      	cmp	r3, #255	; 0xff
   1083e:	4681      	mov	r9, r0
   10840:	d056      	beq.n	108f0 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10842:	f00e faa5 	bl	1ed90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10846:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1084a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   1084e:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10852:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   10854:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10856:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1085a:	f000 813c 	beq.w	10ad6 <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1085e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   10862:	42bb      	cmp	r3, r7
   10864:	bf94      	ite	ls
   10866:	2300      	movls	r3, #0
   10868:	2301      	movhi	r3, #1
   1086a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   1086c:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   10870:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   10874:	f000 8145 	beq.w	10b02 <ticker_worker+0x2da>
	ticks_expired = 0U;
   10878:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   1087c:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   10880:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   10884:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   10888:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1088c:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1088e:	42bb      	cmp	r3, r7
   10890:	d837      	bhi.n	10902 <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10892:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   10894:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   10898:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   1089a:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1089c:	7863      	ldrb	r3, [r4, #1]
   1089e:	1a5b      	subs	r3, r3, r1
   108a0:	b2db      	uxtb	r3, r3
   108a2:	2b01      	cmp	r3, #1
   108a4:	d12a      	bne.n	108fc <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   108a6:	69a6      	ldr	r6, [r4, #24]
   108a8:	2e00      	cmp	r6, #0
   108aa:	d054      	beq.n	10956 <ticker_worker+0x12e>
   108ac:	9b03      	ldr	r3, [sp, #12]
   108ae:	2b00      	cmp	r3, #0
   108b0:	d04c      	beq.n	1094c <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   108b2:	8be3      	ldrh	r3, [r4, #30]
   108b4:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   108b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   108b8:	b13b      	cbz	r3, 108ca <ticker_worker+0xa2>
   108ba:	681a      	ldr	r2, [r3, #0]
   108bc:	b11a      	cbz	r2, 108c6 <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   108be:	7a1a      	ldrb	r2, [r3, #8]
   108c0:	2a00      	cmp	r2, #0
   108c2:	f000 80ef 	beq.w	10aa4 <ticker_worker+0x27c>
				ext_data->reschedule_state =
   108c6:	2200      	movs	r2, #0
   108c8:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   108ca:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   108cc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   108d0:	3201      	adds	r2, #1
   108d2:	b292      	uxth	r2, r2
   108d4:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   108d6:	b178      	cbz	r0, 108f8 <ticker_worker+0xd0>
   108d8:	8ba0      	ldrh	r0, [r4, #28]
   108da:	4290      	cmp	r0, r2
   108dc:	d20c      	bcs.n	108f8 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   108de:	2b00      	cmp	r3, #0
   108e0:	f000 80fc 	beq.w	10adc <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   108e4:	7a1a      	ldrb	r2, [r3, #8]
   108e6:	2a01      	cmp	r2, #1
   108e8:	d006      	beq.n	108f8 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   108ea:	f04f 0c01 	mov.w	ip, #1
   108ee:	e036      	b.n	1095e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   108f0:	77c2      	strb	r2, [r0, #31]
}
   108f2:	b00f      	add	sp, #60	; 0x3c
   108f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   108f8:	3901      	subs	r1, #1
   108fa:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   108fc:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   10900:	d1be      	bne.n	10880 <ticker_worker+0x58>
   10902:	f8dd 9010 	ldr.w	r9, [sp, #16]
   10906:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10908:	f899 300b 	ldrb.w	r3, [r9, #11]
   1090c:	f899 200a 	ldrb.w	r2, [r9, #10]
   10910:	429a      	cmp	r2, r3
   10912:	d10a      	bne.n	1092a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   10914:	3201      	adds	r2, #1
   10916:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   10918:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1091a:	bf1c      	itt	ne
   1091c:	4613      	movne	r3, r2
   1091e:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   10920:	9a06      	ldr	r2, [sp, #24]
   10922:	f889 200b 	strb.w	r2, [r9, #11]
   10926:	bf08      	it	eq
   10928:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1092a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1092e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10932:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   10934:	2200      	movs	r2, #0
   10936:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1093a:	464b      	mov	r3, r9
   1093c:	2201      	movs	r2, #1
   1093e:	2104      	movs	r1, #4
   10940:	2003      	movs	r0, #3
   10942:	46a4      	mov	ip, r4
}
   10944:	b00f      	add	sp, #60	; 0x3c
   10946:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1094a:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1094c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   10950:	9307      	str	r3, [sp, #28]
   10952:	3380      	adds	r3, #128	; 0x80
   10954:	d141      	bne.n	109da <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   10956:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   10958:	b1f3      	cbz	r3, 10998 <ticker_worker+0x170>
   1095a:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   1095e:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   10960:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   10962:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10964:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   10966:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   10968:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   1096a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   1096c:	2d00      	cmp	r5, #0
   1096e:	d0c5      	beq.n	108fc <ticker_worker+0xd4>
					   ticks_expired -
   10970:	9b04      	ldr	r3, [sp, #16]
   10972:	6960      	ldr	r0, [r4, #20]
   10974:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   10976:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10978:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   1097a:	ebaa 0000 	sub.w	r0, sl, r0
   1097e:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10980:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   10984:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   10986:	f1bc 0f00 	cmp.w	ip, #0
   1098a:	d016      	beq.n	109ba <ticker_worker+0x192>
   1098c:	e9cd 3600 	strd	r3, r6, [sp]
   10990:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10994:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   10996:	e7b1      	b.n	108fc <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   10998:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   1099a:	3901      	subs	r1, #1
   1099c:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   1099e:	2d00      	cmp	r5, #0
   109a0:	d0ac      	beq.n	108fc <ticker_worker+0xd4>
			ticks_drift = 0U;
   109a2:	4619      	mov	r1, r3
					   ticks_expired -
   109a4:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   109a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   109a8:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   109aa:	ebaa 0003 	sub.w	r0, sl, r3
   109ae:	9b04      	ldr	r3, [sp, #16]
   109b0:	695b      	ldr	r3, [r3, #20]
   109b2:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   109b4:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   109b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   109ba:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   109be:	e9cd 3600 	strd	r3, r6, [sp]
   109c2:	4663      	mov	r3, ip
   109c4:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   109c6:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   109c8:	2b00      	cmp	r3, #0
   109ca:	9b03      	ldr	r3, [sp, #12]
   109cc:	bf18      	it	ne
   109ce:	2301      	movne	r3, #1
   109d0:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   109d2:	2300      	movs	r3, #0
   109d4:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   109d6:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   109d8:	e790      	b.n	108fc <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   109da:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   109de:	d0ba      	beq.n	10956 <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   109e0:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   109e2:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   109e4:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   109e6:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   109e8:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   109ea:	bf28      	it	cs
   109ec:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   109ee:	fb02 5005 	mla	r0, r2, r5, r5
   109f2:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   109f4:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   109f6:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   109fa:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   109fc:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   10a00:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   10a02:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   10a04:	46a0      	mov	r8, r4
   10a06:	f04f 0c00 	mov.w	ip, #0
   10a0a:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   10a0c:	b21b      	sxth	r3, r3
   10a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10a12:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   10a16:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   10a18:	f8d2 e008 	ldr.w	lr, [r2, #8]
   10a1c:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   10a1e:	4566      	cmp	r6, ip
   10a20:	d339      	bcc.n	10a96 <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   10a22:	6991      	ldr	r1, [r2, #24]
   10a24:	b399      	cbz	r1, 10a8e <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   10a26:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   10a28:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10a2a:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   10a2e:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   10a32:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   10a34:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   10a36:	bf28      	it	cs
   10a38:	1a0d      	subcs	r5, r1, r0
					  0U :
   10a3a:	f1b9 0f00 	cmp.w	r9, #0
   10a3e:	d03e      	beq.n	10abe <ticker_worker+0x296>
   10a40:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   10a44:	b3bc      	cbz	r4, 10ab6 <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10a46:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   10a4a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   10a4e:	45f1      	cmp	r9, lr
   10a50:	bf8c      	ite	hi
   10a52:	f04f 0e01 	movhi.w	lr, #1
   10a56:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   10a5a:	bf34      	ite	cc
   10a5c:	f04f 0901 	movcc.w	r9, #1
   10a60:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   10a64:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   10a66:	f892 a003 	ldrb.w	sl, [r2, #3]
   10a6a:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   10a6e:	d30e      	bcc.n	10a8e <ticker_worker+0x266>
   10a70:	4592      	cmp	sl, r2
   10a72:	d829      	bhi.n	10ac8 <ticker_worker+0x2a0>
			    (next_force ||
   10a74:	f117 0f80 	cmn.w	r7, #128	; 0x80
   10a78:	d026      	beq.n	10ac8 <ticker_worker+0x2a0>
			     next_is_critical ||
   10a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   10a7c:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   10a7e:	4295      	cmp	r5, r2
   10a80:	dd02      	ble.n	10a88 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   10a82:	f1be 0f00 	cmp.w	lr, #0
   10a86:	d01f      	beq.n	10ac8 <ticker_worker+0x2a0>
   10a88:	9a07      	ldr	r2, [sp, #28]
   10a8a:	42ba      	cmp	r2, r7
   10a8c:	d019      	beq.n	10ac2 <ticker_worker+0x29a>
			id_head = ticker_next->next;
   10a8e:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   10a92:	2bff      	cmp	r3, #255	; 0xff
   10a94:	d1ba      	bne.n	10a0c <ticker_worker+0x1e4>
   10a96:	4644      	mov	r4, r8
   10a98:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   10a9c:	990a      	ldr	r1, [sp, #40]	; 0x28
   10a9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10aa2:	e758      	b.n	10956 <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   10aa4:	8ba2      	ldrh	r2, [r4, #28]
   10aa6:	9805      	ldr	r0, [sp, #20]
   10aa8:	4282      	cmp	r2, r0
   10aaa:	f63f af0c 	bhi.w	108c6 <ticker_worker+0x9e>
				ext_data->reschedule_state =
   10aae:	f04f 0201 	mov.w	r2, #1
   10ab2:	721a      	strb	r2, [r3, #8]
   10ab4:	e709      	b.n	108ca <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   10ab6:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   10aba:	46a1      	mov	r9, r4
   10abc:	e7d2      	b.n	10a64 <ticker_worker+0x23c>
					  0U :
   10abe:	46ce      	mov	lr, r9
   10ac0:	e7c0      	b.n	10a44 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   10ac2:	f1b9 0f00 	cmp.w	r9, #0
   10ac6:	d0e2      	beq.n	10a8e <ticker_worker+0x266>
   10ac8:	4644      	mov	r4, r8
   10aca:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   10ace:	990a      	ldr	r1, [sp, #40]	; 0x28
   10ad0:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   10ad4:	e6ef      	b.n	108b6 <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   10ad6:	9b06      	ldr	r3, [sp, #24]
   10ad8:	9303      	str	r3, [sp, #12]
   10ada:	e6c7      	b.n	1086c <ticker_worker+0x44>
		if (ticker->timeout_func) {
   10adc:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10ade:	3901      	subs	r1, #1
   10ae0:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   10ae2:	2d00      	cmp	r5, #0
   10ae4:	f43f af0a 	beq.w	108fc <ticker_worker+0xd4>
			ticks_drift = 0U;
   10ae8:	4619      	mov	r1, r3
					   ticks_expired -
   10aea:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10aec:	6a62      	ldr	r2, [r4, #36]	; 0x24
   10aee:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   10af0:	ebaa 0003 	sub.w	r0, sl, r3
   10af4:	9b04      	ldr	r3, [sp, #16]
   10af6:	695b      	ldr	r3, [r3, #20]
   10af8:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   10afe:	78e3      	ldrb	r3, [r4, #3]
   10b00:	e744      	b.n	1098c <ticker_worker+0x164>
	ticks_expired = 0U;
   10b02:	2300      	movs	r3, #0
   10b04:	4619      	mov	r1, r3
   10b06:	e6ff      	b.n	10908 <ticker_worker+0xe0>

00010b08 <ticker_job>:
	if (instance->worker_trigger) {
   10b08:	7fc3      	ldrb	r3, [r0, #31]
   10b0a:	2b00      	cmp	r3, #0
   10b0c:	f040 8431 	bne.w	11372 <ticker_job+0x86a>
{
   10b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   10b14:	7f82      	ldrb	r2, [r0, #30]
{
   10b16:	b08d      	sub	sp, #52	; 0x34
   10b18:	4683      	mov	fp, r0
	if (instance->job_guard) {
   10b1a:	2a00      	cmp	r2, #0
   10b1c:	f040 808c 	bne.w	10c38 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10b20:	7a83      	ldrb	r3, [r0, #10]
   10b22:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   10b24:	2001      	movs	r0, #1
   10b26:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10b2a:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   10b2c:	f8db 0014 	ldr.w	r0, [fp, #20]
   10b30:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10b32:	f000 8440 	beq.w	113b6 <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   10b36:	3301      	adds	r3, #1
   10b38:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   10b3a:	2b02      	cmp	r3, #2
		idx = 0U;
   10b3c:	bf08      	it	eq
   10b3e:	4613      	moveq	r3, r2
		ticks_elapsed =
   10b40:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   10b44:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   10b48:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   10b4c:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   10b4e:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   10b50:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   10b52:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10b54:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   10b56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   10b5a:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   10b5e:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   10b62:	f8db 3000 	ldr.w	r3, [fp]
   10b66:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   10b68:	f8db 3004 	ldr.w	r3, [fp, #4]
   10b6c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   10b6e:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   10b70:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   10b72:	b2db      	uxtb	r3, r3
   10b74:	2a00      	cmp	r2, #0
   10b76:	f000 81d5 	beq.w	10f24 <ticker_job+0x41c>
		flag_elapsed = 1U;
   10b7a:	2201      	movs	r2, #1
   10b7c:	920b      	str	r2, [sp, #44]	; 0x2c
   10b7e:	9a05      	ldr	r2, [sp, #20]
   10b80:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   10b84:	2300      	movs	r3, #0
   10b86:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   10b88:	23ff      	movs	r3, #255	; 0xff
   10b8a:	9301      	str	r3, [sp, #4]
   10b8c:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   10b8e:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   10b92:	f89a c003 	ldrb.w	ip, [sl, #3]
   10b96:	f89a 7002 	ldrb.w	r7, [sl, #2]
   10b9a:	4567      	cmp	r7, ip
   10b9c:	d044      	beq.n	10c28 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   10b9e:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   10ba2:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   10ba4:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   10ba6:	b2db      	uxtb	r3, r3
				middle = 0U;
   10ba8:	429a      	cmp	r2, r3
   10baa:	bf08      	it	eq
   10bac:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   10bae:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   10bb2:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   10bb6:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10bba:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   10bbe:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   10bc0:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10bc4:	d942      	bls.n	10c4c <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10bc6:	2808      	cmp	r0, #8
   10bc8:	d842      	bhi.n	10c50 <ticker_job+0x148>
			ticker = &node[user_op->id];
   10bca:	7861      	ldrb	r1, [r4, #1]
   10bcc:	9a00      	ldr	r2, [sp, #0]
   10bce:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   10bd2:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   10bd6:	786a      	ldrb	r2, [r5, #1]
   10bd8:	f895 e002 	ldrb.w	lr, [r5, #2]
   10bdc:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10be0:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10be4:	d034      	beq.n	10c50 <ticker_job+0x148>
			    (state == 0U) ||
   10be6:	2805      	cmp	r0, #5
   10be8:	d041      	beq.n	10c6e <ticker_job+0x166>
			if (state == 1U) {
   10bea:	2a01      	cmp	r2, #1
   10bec:	f040 8118 	bne.w	10e20 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   10bf0:	2806      	cmp	r0, #6
   10bf2:	d006      	beq.n	10c02 <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   10bf4:	4658      	mov	r0, fp
   10bf6:	f7ff fcb5 	bl	10564 <ticker_dequeue>
			ticker->req = ticker->ack;
   10bfa:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   10bfc:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   10bfe:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10c00:	7861      	ldrb	r1, [r4, #1]
   10c02:	f89b 301c 	ldrb.w	r3, [fp, #28]
   10c06:	428b      	cmp	r3, r1
   10c08:	f000 80d9 	beq.w	10dbe <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10c0c:	2000      	movs	r0, #0
   10c0e:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   10c12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   10c14:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   10c16:	b10b      	cbz	r3, 10c1c <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10c18:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10c1a:	4798      	blx	r3
		while (user->middle != user->last) {
   10c1c:	f89a c003 	ldrb.w	ip, [sl, #3]
   10c20:	f89a 7002 	ldrb.w	r7, [sl, #2]
   10c24:	4567      	cmp	r7, ip
   10c26:	d1ba      	bne.n	10b9e <ticker_job+0x96>
	while (count_user--) {
   10c28:	9a05      	ldr	r2, [sp, #20]
   10c2a:	4552      	cmp	r2, sl
   10c2c:	f1aa 0308 	sub.w	r3, sl, #8
   10c30:	f000 8107 	beq.w	10e42 <ticker_job+0x33a>
   10c34:	469a      	mov	sl, r3
   10c36:	e7aa      	b.n	10b8e <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   10c38:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10c3a:	2104      	movs	r1, #4
   10c3c:	4603      	mov	r3, r0
   10c3e:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10c40:	2004      	movs	r0, #4
   10c42:	46a4      	mov	ip, r4
}
   10c44:	b00d      	add	sp, #52	; 0x34
   10c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   10c4a:	4760      	bx	ip
   10c4c:	461f      	mov	r7, r3
   10c4e:	e7a4      	b.n	10b9a <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10c50:	2200      	movs	r2, #0
   10c52:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   10c56:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   10c58:	2001      	movs	r0, #1
   10c5a:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   10c5c:	2a00      	cmp	r2, #0
   10c5e:	d0f5      	beq.n	10c4c <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10c60:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10c62:	4790      	blx	r2
		while (user->middle != user->last) {
   10c64:	f89a c003 	ldrb.w	ip, [sl, #3]
   10c68:	f89a 7002 	ldrb.w	r7, [sl, #2]
   10c6c:	e795      	b.n	10b9a <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   10c6e:	6860      	ldr	r0, [r4, #4]
   10c70:	b948      	cbnz	r0, 10c86 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   10c72:	68a0      	ldr	r0, [r4, #8]
   10c74:	b938      	cbnz	r0, 10c86 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   10c76:	68e0      	ldr	r0, [r4, #12]
   10c78:	b928      	cbnz	r0, 10c86 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   10c7a:	6920      	ldr	r0, [r4, #16]
   10c7c:	b918      	cbnz	r0, 10c86 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   10c7e:	6960      	ldr	r0, [r4, #20]
   10c80:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   10c84:	d0e4      	beq.n	10c50 <ticker_job+0x148>
			if (state == 1U) {
   10c86:	2a01      	cmp	r2, #1
   10c88:	f040 80ca 	bne.w	10e20 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10c8c:	4658      	mov	r0, fp
   10c8e:	f7ff fc69 	bl	10564 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10c92:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10c96:	60a8      	str	r0, [r5, #8]
   10c98:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10c9a:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   10c9c:	f00e f878 	bl	1ed90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ca0:	9b02      	ldr	r3, [sp, #8]
   10ca2:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10ca4:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ca6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10caa:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   10cac:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   10cae:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   10cb0:	f240 80af 	bls.w	10e12 <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   10cb4:	696b      	ldr	r3, [r5, #20]
   10cb6:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   10cb8:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   10cba:	f8d5 c004 	ldr.w	ip, [r5, #4]
   10cbe:	f1bc 0f00 	cmp.w	ip, #0
   10cc2:	d051      	beq.n	10d68 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   10cc4:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   10cc6:	2b00      	cmp	r3, #0
   10cc8:	d04e      	beq.n	10d68 <ticker_job+0x260>
		user_op->params.update.lazy--;
   10cca:	3b01      	subs	r3, #1
   10ccc:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10cce:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10cd0:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   10cd2:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10cd4:	d223      	bcs.n	10d1e <ticker_job+0x216>
   10cd6:	f10c 0e01 	add.w	lr, ip, #1
   10cda:	f8cd 8018 	str.w	r8, [sp, #24]
   10cde:	940a      	str	r4, [sp, #40]	; 0x28
   10ce0:	e018      	b.n	10d14 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   10ce2:	6a69      	ldr	r1, [r5, #36]	; 0x24
   10ce4:	f8df 8228 	ldr.w	r8, [pc, #552]	; 10f10 <ticker_job+0x408>
   10ce8:	4c8a      	ldr	r4, [pc, #552]	; (10f14 <ticker_job+0x40c>)
   10cea:	4488      	add	r8, r1
   10cec:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   10cee:	bf84      	itt	hi
   10cf0:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   10cf4:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   10cf8:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   10cfa:	6a2c      	ldr	r4, [r5, #32]
   10cfc:	bf94      	ite	ls
   10cfe:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   10d00:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   10d04:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   10d06:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   10d08:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   10d0a:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10d0c:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   10d0e:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   10d10:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   10d12:	d201      	bcs.n	10d18 <ticker_job+0x210>
   10d14:	429f      	cmp	r7, r3
   10d16:	d3e4      	bcc.n	10ce2 <ticker_job+0x1da>
   10d18:	f8dd 8018 	ldr.w	r8, [sp, #24]
   10d1c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d1e:	42bb      	cmp	r3, r7
   10d20:	d221      	bcs.n	10d66 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   10d22:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   10d26:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   10d2a:	9006      	str	r0, [sp, #24]
   10d2c:	940a      	str	r4, [sp, #40]	; 0x28
   10d2e:	e005      	b.n	10d3c <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d30:	3301      	adds	r3, #1
   10d32:	b29b      	uxth	r3, r3
   10d34:	4660      	mov	r0, ip
   10d36:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   10d38:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d3a:	d011      	beq.n	10d60 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   10d3c:	4874      	ldr	r0, [pc, #464]	; (10f10 <ticker_job+0x408>)
   10d3e:	4c75      	ldr	r4, [pc, #468]	; (10f14 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   10d40:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   10d42:	1808      	adds	r0, r1, r0
   10d44:	42a0      	cmp	r0, r4
   10d46:	d8f3      	bhi.n	10d30 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d48:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   10d4a:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10d4c:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d50:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10d52:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d56:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   10d58:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   10d5c:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   10d5e:	d1ed      	bne.n	10d3c <ticker_job+0x234>
   10d60:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   10d62:	6269      	str	r1, [r5, #36]	; 0x24
   10d64:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   10d66:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   10d68:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   10d6a:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   10d6c:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   10d6e:	440a      	add	r2, r1
   10d70:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   10d72:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   10d74:	4403      	add	r3, r0
   10d76:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   10d78:	b11a      	cbz	r2, 10d82 <ticker_job+0x27a>
   10d7a:	6813      	ldr	r3, [r2, #0]
   10d7c:	b10b      	cbz	r3, 10d82 <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   10d7e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   10d80:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   10d82:	464a      	mov	r2, r9
   10d84:	9902      	ldr	r1, [sp, #8]
   10d86:	4628      	mov	r0, r5
   10d88:	f7ff fc26 	bl	105d8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   10d8c:	68e2      	ldr	r2, [r4, #12]
   10d8e:	69ab      	ldr	r3, [r5, #24]
   10d90:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   10d92:	6922      	ldr	r2, [r4, #16]
   10d94:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   10d96:	bf8c      	ite	hi
   10d98:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   10d9a:	2300      	movls	r3, #0
   10d9c:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   10d9e:	7da3      	ldrb	r3, [r4, #22]
   10da0:	b103      	cbz	r3, 10da4 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   10da2:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   10da4:	7de3      	ldrb	r3, [r4, #23]
   10da6:	b113      	cbz	r3, 10dae <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   10da8:	3b01      	subs	r3, #1
   10daa:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   10dae:	9b01      	ldr	r3, [sp, #4]
   10db0:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   10db2:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   10db4:	7862      	ldrb	r2, [r4, #1]
   10db6:	9201      	str	r2, [sp, #4]
		ticker->req++;
   10db8:	3301      	adds	r3, #1
   10dba:	706b      	strb	r3, [r5, #1]
   10dbc:	e726      	b.n	10c0c <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10dbe:	23ff      	movs	r3, #255	; 0xff
   10dc0:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   10dc4:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   10dc8:	2b06      	cmp	r3, #6
   10dca:	d013      	beq.n	10df4 <ticker_job+0x2ec>
   10dcc:	2b08      	cmp	r3, #8
   10dce:	d011      	beq.n	10df4 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   10dd0:	f00d ffde 	bl	1ed90 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   10dd4:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   10dd8:	1a83      	subs	r3, r0, r2
   10dda:	021d      	lsls	r5, r3, #8
   10ddc:	d410      	bmi.n	10e00 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   10dde:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10de0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   10de4:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   10de6:	f8db 2018 	ldr.w	r2, [fp, #24]
   10dea:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   10dec:	bf88      	it	hi
   10dee:	f8cb 3018 	strhi.w	r3, [fp, #24]
   10df2:	e70b      	b.n	10c0c <ticker_job+0x104>
				ticks_at_yield =
   10df4:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   10df6:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   10dfa:	1a83      	subs	r3, r0, r2
   10dfc:	021d      	lsls	r5, r3, #8
   10dfe:	d5ee      	bpl.n	10dde <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e00:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   10e02:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10e04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   10e08:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   10e0a:	bf34      	ite	cc
   10e0c:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   10e0e:	2300      	movcs	r3, #0
   10e10:	e7e9      	b.n	10de6 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10e12:	696b      	ldr	r3, [r5, #20]
   10e14:	1bda      	subs	r2, r3, r7
   10e16:	1853      	adds	r3, r2, r1
   10e18:	9304      	str	r3, [sp, #16]
   10e1a:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   10e1c:	2200      	movs	r2, #0
   10e1e:	e74c      	b.n	10cba <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   10e20:	2104      	movs	r1, #4
   10e22:	465b      	mov	r3, fp
   10e24:	2201      	movs	r2, #1
   10e26:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   10e2a:	4608      	mov	r0, r1
   10e2c:	47a0      	blx	r4
	while (count_user--) {
   10e2e:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   10e30:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   10e34:	2301      	movs	r3, #1
	while (count_user--) {
   10e36:	4552      	cmp	r2, sl
				pending = 1U;
   10e38:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   10e3a:	f1aa 0308 	sub.w	r3, sl, #8
   10e3e:	f47f aef9 	bne.w	10c34 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10e42:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   10e46:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e48:	1a9b      	subs	r3, r3, r2
   10e4a:	bf18      	it	ne
   10e4c:	2301      	movne	r3, #1
   10e4e:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   10e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e52:	2b00      	cmp	r3, #0
   10e54:	d16a      	bne.n	10f2c <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   10e56:	9901      	ldr	r1, [sp, #4]
   10e58:	4658      	mov	r0, fp
   10e5a:	f7ff fbe1 	bl	10620 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10e5e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10e62:	9300      	str	r3, [sp, #0]
   10e64:	9b00      	ldr	r3, [sp, #0]
   10e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10e68:	4293      	cmp	r3, r2
   10e6a:	f000 826c 	beq.w	11346 <ticker_job+0x83e>
	if (!pending) {
   10e6e:	9b08      	ldr	r3, [sp, #32]
   10e70:	2b00      	cmp	r3, #0
   10e72:	f000 81e6 	beq.w	11242 <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   10e76:	f89b 301d 	ldrb.w	r3, [fp, #29]
   10e7a:	9300      	str	r3, [sp, #0]
   10e7c:	9b00      	ldr	r3, [sp, #0]
   10e7e:	2bff      	cmp	r3, #255	; 0xff
   10e80:	f000 82c4 	beq.w	1140c <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   10e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10e86:	2bff      	cmp	r3, #255	; 0xff
   10e88:	f000 82cb 	beq.w	11422 <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   10e8c:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   10e8e:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   10e92:	f8df 9084 	ldr.w	r9, [pc, #132]	; 10f18 <ticker_job+0x410>
   10e96:	f8df 8084 	ldr.w	r8, [pc, #132]	; 10f1c <ticker_job+0x414>
   10e9a:	4f21      	ldr	r7, [pc, #132]	; (10f20 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   10e9c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   10ea0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   10ea4:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   10ea6:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   10ea8:	f00d ff72 	bl	1ed90 <cntr_cnt_get>
		cc = instance->ticks_current;
   10eac:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10eb0:	1b03      	subs	r3, r0, r4
   10eb2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10eb6:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   10eb8:	42b3      	cmp	r3, r6
   10eba:	bf2c      	ite	cs
   10ebc:	18e4      	addcs	r4, r4, r3
   10ebe:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   10ec0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   10ec4:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   10ec8:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   10eca:	4620      	mov	r0, r4
   10ecc:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10ece:	f00d ff5f 	bl	1ed90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ed2:	eba0 030a 	sub.w	r3, r0, sl
   10ed6:	eba4 040a 	sub.w	r4, r4, sl
   10eda:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10ede:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10ee0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   10ee4:	42a3      	cmp	r3, r4
		i--;
   10ee6:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   10eea:	f240 8233 	bls.w	11354 <ticker_job+0x84c>
		LL_ASSERT(i);
   10eee:	2d00      	cmp	r5, #0
   10ef0:	d1da      	bne.n	10ea8 <ticker_job+0x3a0>
   10ef2:	f640 133e 	movw	r3, #2366	; 0x93e
   10ef6:	464a      	mov	r2, r9
   10ef8:	4641      	mov	r1, r8
   10efa:	4638      	mov	r0, r7
   10efc:	f014 f803 	bl	24f06 <printk>
   10f00:	4040      	eors	r0, r0
   10f02:	f380 8811 	msr	BASEPRI, r0
   10f06:	f04f 0003 	mov.w	r0, #3
   10f0a:	df02      	svc	2
   10f0c:	e7cc      	b.n	10ea8 <ticker_job+0x3a0>
   10f0e:	bf00      	nop
   10f10:	ff172b5a 	.word	0xff172b5a
   10f14:	7f172b59 	.word	0x7f172b59
   10f18:	0002bf9c 	.word	0x0002bf9c
   10f1c:	0002c0a0 	.word	0x0002c0a0
   10f20:	0002bfdc 	.word	0x0002bfdc
	pending = 0U;
   10f24:	9b06      	ldr	r3, [sp, #24]
   10f26:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   10f28:	23ff      	movs	r3, #255	; 0xff
   10f2a:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   10f2c:	f00d ff30 	bl	1ed90 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f30:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   10f32:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10f36:	1ac3      	subs	r3, r0, r3
   10f38:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   10f3c:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   10f3e:	f8db 3000 	ldr.w	r3, [fp]
   10f42:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   10f44:	d050      	beq.n	10fe8 <ticker_job+0x4e0>
	ticks_expired = 0U;
   10f46:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   10f48:	f8df 8290 	ldr.w	r8, [pc, #656]	; 111dc <ticker_job+0x6d4>
   10f4c:	f8df 9290 	ldr.w	r9, [pc, #656]	; 111e0 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   10f50:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   10f52:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   10f54:	9a00      	ldr	r2, [sp, #0]
   10f56:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10f5a:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   10f5e:	011b      	lsls	r3, r3, #4
   10f60:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   10f62:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10f64:	429f      	cmp	r7, r3
   10f66:	f0c0 8243 	bcc.w	113f0 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   10f6a:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   10f6c:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   10f70:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   10f74:	441a      	add	r2, r3
   10f76:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10f78:	f8db 2018 	ldr.w	r2, [fp, #24]
   10f7c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   10f7e:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   10f82:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   10f86:	bf25      	ittet	cs
   10f88:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   10f8c:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   10f90:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   10f92:	2300      	movcs	r3, #0
   10f94:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   10f98:	78a2      	ldrb	r2, [r4, #2]
   10f9a:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   10f9c:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   10f9e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   10fa0:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   10fa2:	1a9b      	subs	r3, r3, r2
   10fa4:	b2db      	uxtb	r3, r3
   10fa6:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   10fa8:	9b00      	ldr	r3, [sp, #0]
   10faa:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   10fae:	b118      	cbz	r0, 10fb8 <ticker_job+0x4b0>
   10fb0:	9b05      	ldr	r3, [sp, #20]
   10fb2:	2b02      	cmp	r3, #2
   10fb4:	f000 8135 	beq.w	11222 <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   10fb8:	2300      	movs	r3, #0
   10fba:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   10fbc:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   10fc0:	2d00      	cmp	r5, #0
   10fc2:	f040 80da 	bne.w	1117a <ticker_job+0x672>
   10fc6:	b119      	cbz	r1, 10fd0 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   10fc8:	7a09      	ldrb	r1, [r1, #8]
   10fca:	2901      	cmp	r1, #1
   10fcc:	f000 8111 	beq.w	111f2 <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   10fd0:	9b05      	ldr	r3, [sp, #20]
   10fd2:	b123      	cbz	r3, 10fde <ticker_job+0x4d6>
   10fd4:	2b01      	cmp	r3, #1
   10fd6:	d045      	beq.n	11064 <ticker_job+0x55c>
   10fd8:	f1be 0f00 	cmp.w	lr, #0
   10fdc:	d142      	bne.n	11064 <ticker_job+0x55c>
			ticker->req = ticker->ack;
   10fde:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   10fe0:	f89b 601d 	ldrb.w	r6, [fp, #29]
   10fe4:	2eff      	cmp	r6, #255	; 0xff
   10fe6:	d1b5      	bne.n	10f54 <ticker_job+0x44c>
			flag_compare_update = 1U;
   10fe8:	9b06      	ldr	r3, [sp, #24]
   10fea:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   10fec:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   10fee:	4296      	cmp	r6, r2
   10ff0:	bf18      	it	ne
   10ff2:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   10ff4:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   10ff6:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   10ff8:	f7ff fb12 	bl	10620 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   10ffc:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   11000:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   11004:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   11008:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1100a:	9b00      	ldr	r3, [sp, #0]
   1100c:	2bff      	cmp	r3, #255	; 0xff
   1100e:	d00f      	beq.n	11030 <ticker_job+0x528>
   11010:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   11012:	b233      	sxth	r3, r6
   11014:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11018:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   1101c:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   1101e:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11020:	b117      	cbz	r7, 11028 <ticker_job+0x520>
   11022:	7a39      	ldrb	r1, [r7, #8]
   11024:	2901      	cmp	r1, #1
   11026:	d025      	beq.n	11074 <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   11028:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   1102c:	2eff      	cmp	r6, #255	; 0xff
   1102e:	d1f0      	bne.n	11012 <ticker_job+0x50a>
	return rescheduled;
   11030:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   11034:	2a00      	cmp	r2, #0
   11036:	f43f af15 	beq.w	10e64 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1103a:	9b00      	ldr	r3, [sp, #0]
   1103c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1103e:	428b      	cmp	r3, r1
   11040:	f47f af15 	bne.w	10e6e <ticker_job+0x366>
	if (!pending) {
   11044:	9b08      	ldr	r3, [sp, #32]
   11046:	2b00      	cmp	r3, #0
   11048:	f47f af18 	bne.w	10e7c <ticker_job+0x374>
	users = &instance->users[0];
   1104c:	f8db 3004 	ldr.w	r3, [fp, #4]
   11050:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   11052:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   11056:	1e5f      	subs	r7, r3, #1
   11058:	b2ff      	uxtb	r7, r7
   1105a:	2b00      	cmp	r3, #0
   1105c:	f43f af0e 	beq.w	10e7c <ticker_job+0x374>
			flag_compare_update = 1U;
   11060:	9206      	str	r2, [sp, #24]
   11062:	e0fa      	b.n	1125a <ticker_job+0x752>
			    ticker->fp_op_func) {
   11064:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   11066:	2b00      	cmp	r3, #0
   11068:	d0b9      	beq.n	10fde <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1106a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1106c:	2001      	movs	r0, #1
   1106e:	4798      	blx	r3
			ticker->req = ticker->ack;
   11070:	78a2      	ldrb	r2, [r4, #2]
   11072:	e7b4      	b.n	10fde <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11074:	9b01      	ldr	r3, [sp, #4]
   11076:	7f1b      	ldrb	r3, [r3, #28]
   11078:	2bff      	cmp	r3, #255	; 0xff
   1107a:	d04b      	beq.n	11114 <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   1107c:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1107e:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   11080:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11082:	4293      	cmp	r3, r2
   11084:	d946      	bls.n	11114 <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   11086:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1108a:	687a      	ldr	r2, [r7, #4]
   1108c:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   1108e:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11092:	1ad3      	subs	r3, r2, r3
   11094:	9302      	str	r3, [sp, #8]
   11096:	683b      	ldr	r3, [r7, #0]
   11098:	429a      	cmp	r2, r3
   1109a:	f080 80bd 	bcs.w	11218 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   1109e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   110a2:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   110a6:	f000 80b7 	beq.w	11218 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   110aa:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   110ae:	45f0      	cmp	r8, lr
   110b0:	f04f 0300 	mov.w	r3, #0
   110b4:	d331      	bcc.n	1111a <ticker_job+0x612>
   110b6:	46f1      	mov	r9, lr
   110b8:	465a      	mov	r2, fp
   110ba:	461c      	mov	r4, r3
   110bc:	e01c      	b.n	110f8 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   110be:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   110c0:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   110c2:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   110c4:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   110c6:	d909      	bls.n	110dc <ticker_job+0x5d4>
				window_end_ticks =
   110c8:	4543      	cmp	r3, r8
   110ca:	bf28      	it	cs
   110cc:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   110ce:	4599      	cmp	r9, r3
   110d0:	d204      	bcs.n	110dc <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   110d2:	ebb3 030e 	subs.w	r3, r3, lr
   110d6:	d001      	beq.n	110dc <ticker_job+0x5d4>
   110d8:	459c      	cmp	ip, r3
   110da:	d91e      	bls.n	1111a <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   110dc:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   110de:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   110e2:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   110e6:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   110e8:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   110ec:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   110ee:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   110f2:	d012      	beq.n	1111a <ticker_job+0x612>
   110f4:	45c8      	cmp	r8, r9
   110f6:	d310      	bcc.n	1111a <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   110f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   110fc:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   11100:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   11102:	6a81      	ldr	r1, [r0, #40]	; 0x28
   11104:	2900      	cmp	r1, #0
   11106:	d0da      	beq.n	110be <ticker_job+0x5b6>
   11108:	7a09      	ldrb	r1, [r1, #8]
   1110a:	2901      	cmp	r1, #1
   1110c:	d1d7      	bne.n	110be <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   1110e:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   11112:	e7eb      	b.n	110ec <ticker_job+0x5e4>
		window_start_ticks = 0U;
   11114:	f04f 0c00 	mov.w	ip, #0
   11118:	e7b7      	b.n	1108a <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   1111a:	9a02      	ldr	r2, [sp, #8]
   1111c:	441a      	add	r2, r3
   1111e:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   11120:	465c      	mov	r4, fp
   11122:	60ab      	str	r3, [r5, #8]
   11124:	f04f 0eff 	mov.w	lr, #255	; 0xff
   11128:	e000      	b.n	1112c <ticker_job+0x624>
   1112a:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   1112c:	b221      	sxth	r1, r4
   1112e:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   11132:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   11136:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   11138:	f8dc 0008 	ldr.w	r0, [ip, #8]
   1113c:	4298      	cmp	r0, r3
   1113e:	f080 814d 	bcs.w	113dc <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   11142:	1a1b      	subs	r3, r3, r0
   11144:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   11146:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1114a:	2aff      	cmp	r2, #255	; 0xff
   1114c:	46a6      	mov	lr, r4
   1114e:	d1ec      	bne.n	1112a <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11150:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   11152:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11156:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1115a:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   1115c:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11160:	f81a 3001 	ldrb.w	r3, [sl, r1]
   11164:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11166:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   1116a:	8beb      	ldrh	r3, [r5, #30]
   1116c:	3b01      	subs	r3, #1
   1116e:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   11170:	f04f 0302 	mov.w	r3, #2
   11174:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   11176:	2201      	movs	r2, #1
   11178:	e747      	b.n	1100a <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   1117a:	b111      	cbz	r1, 11182 <ticker_job+0x67a>
   1117c:	7a0b      	ldrb	r3, [r1, #8]
   1117e:	2b01      	cmp	r3, #1
   11180:	d037      	beq.n	111f2 <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   11182:	f1be 0f00 	cmp.w	lr, #0
   11186:	d159      	bne.n	1123c <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   11188:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   1118c:	4672      	mov	r2, lr
				while (count--) {
   1118e:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11190:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   11194:	2100      	movs	r1, #0
   11196:	9005      	str	r0, [sp, #20]
   11198:	e004      	b.n	111a4 <ticker_job+0x69c>
   1119a:	4628      	mov	r0, r5
				while (count--) {
   1119c:	3a01      	subs	r2, #1
					ticks_to_expire +=
   1119e:	4401      	add	r1, r0
				while (count--) {
   111a0:	1c50      	adds	r0, r2, #1
   111a2:	d00f      	beq.n	111c4 <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   111a4:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   111a6:	eb03 0008 	add.w	r0, r3, r8
   111aa:	4548      	cmp	r0, r9
   111ac:	d8f5      	bhi.n	1119a <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   111ae:	9805      	ldr	r0, [sp, #20]
   111b0:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   111b4:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   111b6:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   111ba:	4401      	add	r1, r0
				while (count--) {
   111bc:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   111be:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   111c2:	d1ef      	bne.n	111a4 <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   111c4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   111c8:	6263      	str	r3, [r4, #36]	; 0x24
   111ca:	2a00      	cmp	r2, #0
   111cc:	f000 80d2 	beq.w	11374 <ticker_job+0x86c>
				lazy = 0U;
   111d0:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   111d2:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   111d4:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   111d6:	83e2      	strh	r2, [r4, #30]
   111d8:	e00d      	b.n	111f6 <ticker_job+0x6ee>
   111da:	bf00      	nop
   111dc:	ff172b5a 	.word	0xff172b5a
   111e0:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   111e4:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   111e8:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   111ec:	2d00      	cmp	r5, #0
   111ee:	f43f aeeb 	beq.w	10fc8 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   111f2:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   111f4:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   111f6:	9b07      	ldr	r3, [sp, #28]
   111f8:	9a02      	ldr	r2, [sp, #8]
   111fa:	f8db 1014 	ldr.w	r1, [fp, #20]
   111fe:	189a      	adds	r2, r3, r2
   11200:	4620      	mov	r0, r4
   11202:	f7ff f9e9 	bl	105d8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   11206:	9a00      	ldr	r2, [sp, #0]
   11208:	9904      	ldr	r1, [sp, #16]
   1120a:	9b01      	ldr	r3, [sp, #4]
   1120c:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   1120e:	7863      	ldrb	r3, [r4, #1]
   11210:	9601      	str	r6, [sp, #4]
   11212:	3301      	adds	r3, #1
   11214:	7063      	strb	r3, [r4, #1]
   11216:	e6e3      	b.n	10fe0 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   11218:	9b02      	ldr	r3, [sp, #8]
   1121a:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   1121c:	2300      	movs	r3, #0
   1121e:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   11220:	e7a3      	b.n	1116a <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11222:	f1be 0f00 	cmp.w	lr, #0
   11226:	f47f aec7 	bne.w	10fb8 <ticker_job+0x4b0>
   1122a:	b111      	cbz	r1, 11232 <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1122c:	7a0b      	ldrb	r3, [r1, #8]
   1122e:	2b01      	cmp	r3, #1
   11230:	d0d8      	beq.n	111e4 <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   11232:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   11236:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1123a:	e6bd      	b.n	10fb8 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   1123c:	7062      	strb	r2, [r4, #1]
   1123e:	2200      	movs	r2, #0
   11240:	e7a5      	b.n	1118e <ticker_job+0x686>
	count_user = instance->count_user;
   11242:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11246:	f8db 2004 	ldr.w	r2, [fp, #4]
   1124a:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   1124c:	1e5f      	subs	r7, r3, #1
   1124e:	b2ff      	uxtb	r7, r7
   11250:	2b00      	cmp	r3, #0
   11252:	f43f ae10 	beq.w	10e76 <ticker_job+0x36e>
		flag_compare_update = 1U;
   11256:	2301      	movs	r3, #1
   11258:	9306      	str	r3, [sp, #24]
   1125a:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   1125c:	2600      	movs	r6, #0
   1125e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   11262:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   11266:	787b      	ldrb	r3, [r7, #1]
   11268:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   1126a:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   1126c:	429a      	cmp	r2, r3
   1126e:	d10c      	bne.n	1128a <ticker_job+0x782>
   11270:	e05b      	b.n	1132a <ticker_job+0x822>
	switch (uop->op) {
   11272:	2b01      	cmp	r3, #1
   11274:	d053      	beq.n	1131e <ticker_job+0x816>
			first = user->first + 1;
   11276:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   11278:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   1127a:	3301      	adds	r3, #1
   1127c:	b2db      	uxtb	r3, r3
				first = 0U;
   1127e:	4299      	cmp	r1, r3
   11280:	bf08      	it	eq
   11282:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11284:	429a      	cmp	r2, r3
			user->first = first;
   11286:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   11288:	d04f      	beq.n	1132a <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1128a:	b21b      	sxth	r3, r3
   1128c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11290:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11294:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   11298:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   1129c:	2b02      	cmp	r3, #2
   1129e:	d017      	beq.n	112d0 <ticker_job+0x7c8>
   112a0:	2b03      	cmp	r3, #3
   112a2:	d1e6      	bne.n	11272 <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   112a4:	7843      	ldrb	r3, [r0, #1]
   112a6:	f89b 2008 	ldrb.w	r2, [fp, #8]
   112aa:	429a      	cmp	r2, r3
   112ac:	d93a      	bls.n	11324 <ticker_job+0x81c>
			node[uop->id].priority =
   112ae:	f8db 2000 	ldr.w	r2, [fp]
   112b2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   112b6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   112ba:	7902      	ldrb	r2, [r0, #4]
   112bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   112c0:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   112c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   112c4:	b113      	cbz	r3, 112cc <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   112c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
   112c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
   112ca:	4798      	blx	r3
   112cc:	78fa      	ldrb	r2, [r7, #3]
   112ce:	e7d2      	b.n	11276 <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   112d0:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   112d4:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   112d8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   112dc:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   112e0:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   112e4:	2aff      	cmp	r2, #255	; 0xff
   112e6:	d003      	beq.n	112f0 <ticker_job+0x7e8>
   112e8:	f8d1 8000 	ldr.w	r8, [r1]
   112ec:	4598      	cmp	r8, r3
   112ee:	d023      	beq.n	11338 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   112f0:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   112f4:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   112f6:	f04f 0800 	mov.w	r8, #0
   112fa:	e00a      	b.n	11312 <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   112fc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   11300:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   11304:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   11306:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   1130a:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   1130c:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   1130e:	b911      	cbnz	r1, 11316 <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   11310:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   11312:	2aff      	cmp	r2, #255	; 0xff
   11314:	d1f2      	bne.n	112fc <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   11316:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   1131a:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   1131e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11320:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   11322:	e7cf      	b.n	112c4 <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   11324:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   11328:	e7cb      	b.n	112c2 <ticker_job+0x7ba>
	while (count_user--) {
   1132a:	9a01      	ldr	r2, [sp, #4]
   1132c:	42ba      	cmp	r2, r7
   1132e:	f1a7 0308 	sub.w	r3, r7, #8
   11332:	d00b      	beq.n	1134c <ticker_job+0x844>
   11334:	461f      	mov	r7, r3
   11336:	e796      	b.n	11266 <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   11338:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1133c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1133e:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   11342:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   11344:	e7e5      	b.n	11312 <ticker_job+0x80a>
	if (!pending) {
   11346:	9b08      	ldr	r3, [sp, #32]
   11348:	2b00      	cmp	r3, #0
   1134a:	d054      	beq.n	113f6 <ticker_job+0x8ee>
	if (flag_compare_update) {
   1134c:	9b06      	ldr	r3, [sp, #24]
   1134e:	2b00      	cmp	r3, #0
   11350:	f47f ad91 	bne.w	10e76 <ticker_job+0x36e>
	if (instance->worker_trigger) {
   11354:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   11358:	2200      	movs	r2, #0
   1135a:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   1135e:	b12b      	cbz	r3, 1136c <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11360:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11364:	465b      	mov	r3, fp
   11366:	2201      	movs	r2, #1
   11368:	2103      	movs	r1, #3
   1136a:	e469      	b.n	10c40 <ticker_job+0x138>
}
   1136c:	b00d      	add	sp, #52	; 0x34
   1136e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11372:	4770      	bx	lr
					while (ticks_to_expire <
   11374:	458a      	cmp	sl, r1
   11376:	f67f af2c 	bls.w	111d2 <ticker_job+0x6ca>
   1137a:	1c68      	adds	r0, r5, #1
   1137c:	9405      	str	r4, [sp, #20]
   1137e:	4604      	mov	r4, r0
   11380:	e005      	b.n	1138e <ticker_job+0x886>
   11382:	4628      	mov	r0, r5
						ticks_to_expire +=
   11384:	4401      	add	r1, r0
						lazy++;
   11386:	3201      	adds	r2, #1
					while (ticks_to_expire <
   11388:	458a      	cmp	sl, r1
						lazy++;
   1138a:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1138c:	d910      	bls.n	113b0 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   1138e:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11390:	eb03 0008 	add.w	r0, r3, r8
   11394:	4548      	cmp	r0, r9
   11396:	d8f4      	bhi.n	11382 <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11398:	4620      	mov	r0, r4
   1139a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   1139e:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   113a0:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   113a4:	3201      	adds	r2, #1
					while (ticks_to_expire <
   113a6:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   113a8:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   113ac:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   113ae:	d8ee      	bhi.n	1138e <ticker_job+0x886>
   113b0:	9c05      	ldr	r4, [sp, #20]
   113b2:	6263      	str	r3, [r4, #36]	; 0x24
   113b4:	e70d      	b.n	111d2 <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   113b6:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   113ba:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   113be:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   113c0:	f8db 3000 	ldr.w	r3, [fp]
   113c4:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   113c6:	f8db 3004 	ldr.w	r3, [fp, #4]
   113ca:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   113cc:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   113ce:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   113d0:	b2db      	uxtb	r3, r3
   113d2:	b3a1      	cbz	r1, 1143e <ticker_job+0x936>
		flag_elapsed = 0U;
   113d4:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   113d6:	9203      	str	r2, [sp, #12]
   113d8:	f7ff bbd1 	b.w	10b7e <ticker_job+0x76>
				node->ticks_to_expire -=
   113dc:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   113de:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   113e2:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   113e6:	f43f aec0 	beq.w	1116a <ticker_job+0x662>
   113ea:	fa0f f18e 	sxth.w	r1, lr
   113ee:	e6af      	b.n	11150 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   113f0:	1bdb      	subs	r3, r3, r7
   113f2:	60a3      	str	r3, [r4, #8]
			break;
   113f4:	e5f8      	b.n	10fe8 <ticker_job+0x4e0>
	count_user = instance->count_user;
   113f6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   113fa:	f8db 2004 	ldr.w	r2, [fp, #4]
   113fe:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   11400:	1e5f      	subs	r7, r3, #1
   11402:	b2ff      	uxtb	r7, r7
   11404:	2b00      	cmp	r3, #0
   11406:	f47f af28 	bne.w	1125a <ticker_job+0x752>
   1140a:	e79f      	b.n	1134c <ticker_job+0x844>
		if (cntr_stop() == 0) {
   1140c:	f00d fc9a 	bl	1ed44 <cntr_stop>
   11410:	2800      	cmp	r0, #0
   11412:	d19f      	bne.n	11354 <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   11414:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   11418:	f00d fcba 	bl	1ed90 <cntr_cnt_get>
   1141c:	f8cb 0014 	str.w	r0, [fp, #20]
   11420:	e798      	b.n	11354 <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   11422:	f00d fcb5 	bl	1ed90 <cntr_cnt_get>
   11426:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11428:	f00d fc7c 	bl	1ed24 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   1142c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11430:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   11432:	2800      	cmp	r0, #0
   11434:	f47f ad2a 	bne.w	10e8c <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   11438:	f8cb 4014 	str.w	r4, [fp, #20]
   1143c:	e526      	b.n	10e8c <ticker_job+0x384>
	insert_head = TICKER_NULL;
   1143e:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   11440:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   11442:	9301      	str	r3, [sp, #4]
   11444:	e507      	b.n	10e56 <ticker_job+0x34e>
   11446:	bf00      	nop

00011448 <ticker_init>:
{
   11448:	b4f0      	push	{r4, r5, r6, r7}
   1144a:	9d04      	ldr	r5, [sp, #16]
   1144c:	f89d 7014 	ldrb.w	r7, [sp, #20]
   11450:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   11452:	2800      	cmp	r0, #0
   11454:	d137      	bne.n	114c6 <ticker_init+0x7e>
	instance->count_node = count_node;
   11456:	4e1d      	ldr	r6, [pc, #116]	; (114cc <ticker_init+0x84>)
	while (count_node--) {
   11458:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   1145c:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   1145e:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   11460:	fa5f fc8c 	uxtb.w	ip, ip
   11464:	b149      	cbz	r1, 1147a <ticker_init+0x32>
   11466:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   1146a:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   1146e:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   11470:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   11474:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   11478:	d1f9      	bne.n	1146e <ticker_init+0x26>
	while (count_user--) {
   1147a:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   1147c:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   1147e:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   11480:	b2d2      	uxtb	r2, r2
   11482:	b183      	cbz	r3, 114a6 <ticker_init+0x5e>
   11484:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   11488:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   1148a:	4610      	mov	r0, r2
   1148c:	f812 3908 	ldrb.w	r3, [r2], #-8
   11490:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11494:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   11498:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   1149a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1149e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   114a2:	b2df      	uxtb	r7, r3
	while (count_user--) {
   114a4:	d1f0      	bne.n	11488 <ticker_init+0x40>
	if (count_op) {
   114a6:	b977      	cbnz	r7, 114c6 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   114a8:	9a07      	ldr	r2, [sp, #28]
   114aa:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   114ac:	9a08      	ldr	r2, [sp, #32]
   114ae:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   114b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   114b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114b6:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   114b8:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   114ba:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   114be:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   114c0:	8177      	strh	r7, [r6, #10]
}
   114c2:	bcf0      	pop	{r4, r5, r6, r7}
   114c4:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   114c6:	2001      	movs	r0, #1
}
   114c8:	bcf0      	pop	{r4, r5, r6, r7}
   114ca:	4770      	bx	lr
   114cc:	2000217c 	.word	0x2000217c

000114d0 <ticker_trigger>:
	if (instance->sched_cb) {
   114d0:	4b0a      	ldr	r3, [pc, #40]	; (114fc <ticker_trigger+0x2c>)
   114d2:	222c      	movs	r2, #44	; 0x2c
   114d4:	fb02 3200 	mla	r2, r2, r0, r3
{
   114d8:	b410      	push	{r4}
	if (instance->sched_cb) {
   114da:	6a54      	ldr	r4, [r2, #36]	; 0x24
   114dc:	b15c      	cbz	r4, 114f6 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   114de:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   114e2:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   114e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   114ea:	46a4      	mov	ip, r4
   114ec:	2201      	movs	r2, #1
}
   114ee:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   114f0:	2103      	movs	r1, #3
   114f2:	2002      	movs	r0, #2
   114f4:	4760      	bx	ip
}
   114f6:	bc10      	pop	{r4}
   114f8:	4770      	bx	lr
   114fa:	bf00      	nop
   114fc:	2000217c 	.word	0x2000217c

00011500 <ticker_start_ext>:
{
   11500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11504:	4e28      	ldr	r6, [pc, #160]	; (115a8 <ticker_start_ext+0xa8>)
{
   11506:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1150a:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   1150c:	252c      	movs	r5, #44	; 0x2c
   1150e:	fb05 6504 	mla	r5, r5, r4, r6
{
   11512:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   11514:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11518:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   1151c:	6869      	ldr	r1, [r5, #4]
   1151e:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   11522:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   11526:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   1152a:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   1152e:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   11530:	f10e 0c01 	add.w	ip, lr, #1
   11534:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11538:	4564      	cmp	r4, ip
   1153a:	bf98      	it	ls
   1153c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11540:	4561      	cmp	r1, ip
   11542:	d02e      	beq.n	115a2 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   11544:	6879      	ldr	r1, [r7, #4]
   11546:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1154a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1154e:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   11552:	f04f 0904 	mov.w	r9, #4
   11556:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1155a:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   1155c:	9b08      	ldr	r3, [sp, #32]
   1155e:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11560:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11562:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   11564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11566:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1156a:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   1156c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1156e:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11572:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   11574:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11576:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11578:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1157a:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1157c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1157e:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11580:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11582:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11584:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   11586:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   1158a:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1158e:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   11592:	4798      	blx	r3
   11594:	4633      	mov	r3, r6
   11596:	4649      	mov	r1, r9
   11598:	2200      	movs	r2, #0
   1159a:	47a8      	blx	r5
	return user_op->status;
   1159c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1159e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   115a2:	2001      	movs	r0, #1
}
   115a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   115a8:	2000217c 	.word	0x2000217c

000115ac <ticker_start>:
{
   115ac:	b510      	push	{r4, lr}
   115ae:	b08a      	sub	sp, #40	; 0x28
   115b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115b2:	9400      	str	r4, [sp, #0]
{
   115b4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115b6:	9401      	str	r4, [sp, #4]
{
   115b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115ba:	9402      	str	r4, [sp, #8]
{
   115bc:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115c0:	9403      	str	r4, [sp, #12]
{
   115c2:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115c4:	9404      	str	r4, [sp, #16]
{
   115c6:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115c8:	9405      	str	r4, [sp, #20]
{
   115ca:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115cc:	9406      	str	r4, [sp, #24]
{
   115ce:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115d0:	9407      	str	r4, [sp, #28]
{
   115d2:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   115d4:	9408      	str	r4, [sp, #32]
   115d6:	2400      	movs	r4, #0
   115d8:	9409      	str	r4, [sp, #36]	; 0x24
   115da:	f7ff ff91 	bl	11500 <ticker_start_ext>
}
   115de:	b00a      	add	sp, #40	; 0x28
   115e0:	bd10      	pop	{r4, pc}
   115e2:	bf00      	nop

000115e4 <ticker_update_ext>:
{
   115e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   115e8:	4d28      	ldr	r5, [pc, #160]	; (1168c <ticker_update_ext+0xa8>)
{
   115ea:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   115ee:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   115f2:	4604      	mov	r4, r0
   115f4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   115f6:	212c      	movs	r1, #44	; 0x2c
   115f8:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   115fc:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   11600:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   11604:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   11608:	684c      	ldr	r4, [r1, #4]
   1160a:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   1160e:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   11612:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11616:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   11618:	f10e 0c01 	add.w	ip, lr, #1
   1161c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11620:	45e1      	cmp	r9, ip
   11622:	bf98      	it	ls
   11624:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11628:	4564      	cmp	r4, ip
{
   1162a:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   1162e:	d02a      	beq.n	11686 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   11630:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11634:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11638:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1163c:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11640:	f04f 0b05 	mov.w	fp, #5
   11644:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11648:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1164a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1164c:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1164e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11650:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11652:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11654:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11658:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1165a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1165c:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1165e:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11660:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11662:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   11664:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   11666:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   1166a:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   1166e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11672:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11676:	4798      	blx	r3
   11678:	462b      	mov	r3, r5
   1167a:	2200      	movs	r2, #0
   1167c:	2104      	movs	r1, #4
   1167e:	47b0      	blx	r6
	return user_op->status;
   11680:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   11686:	2001      	movs	r0, #1
}
   11688:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1168c:	2000217c 	.word	0x2000217c

00011690 <ticker_update>:
{
   11690:	b510      	push	{r4, lr}
   11692:	b088      	sub	sp, #32
   11694:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11696:	9400      	str	r4, [sp, #0]
{
   11698:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1169a:	9401      	str	r4, [sp, #4]
{
   1169c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1169e:	9402      	str	r4, [sp, #8]
{
   116a0:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   116a4:	9403      	str	r4, [sp, #12]
{
   116a6:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   116aa:	9404      	str	r4, [sp, #16]
{
   116ac:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   116ae:	9405      	str	r4, [sp, #20]
{
   116b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   116b2:	9406      	str	r4, [sp, #24]
   116b4:	2400      	movs	r4, #0
   116b6:	9407      	str	r4, [sp, #28]
   116b8:	f7ff ff94 	bl	115e4 <ticker_update_ext>
}
   116bc:	b008      	add	sp, #32
   116be:	bd10      	pop	{r4, pc}

000116c0 <ticker_stop>:
{
   116c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   116c4:	4c1e      	ldr	r4, [pc, #120]	; (11740 <ticker_stop+0x80>)
{
   116c6:	4684      	mov	ip, r0
   116c8:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   116ca:	212c      	movs	r1, #44	; 0x2c
   116cc:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   116d0:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   116d4:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   116d8:	684d      	ldr	r5, [r1, #4]
   116da:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   116de:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   116e2:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   116e6:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   116e8:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   116ec:	f10e 0c01 	add.w	ip, lr, #1
   116f0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   116f4:	4567      	cmp	r7, ip
   116f6:	bf98      	it	ls
   116f8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   116fc:	4565      	cmp	r5, ip
   116fe:	d01c      	beq.n	1173a <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   11700:	6877      	ldr	r7, [r6, #4]
   11702:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   11706:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   1170a:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   1170e:	f04f 0807 	mov.w	r8, #7
   11712:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11716:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   11718:	9b06      	ldr	r3, [sp, #24]
   1171a:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1171c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1171e:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11720:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   11722:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11726:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1172a:	4798      	blx	r3
   1172c:	4623      	mov	r3, r4
   1172e:	2200      	movs	r2, #0
   11730:	2104      	movs	r1, #4
   11732:	47b0      	blx	r6
	return user_op->status;
   11734:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   11736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1173a:	2001      	movs	r0, #1
}
   1173c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11740:	2000217c 	.word	0x2000217c

00011744 <ticker_next_slot_get>:
{
   11744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11748:	4d20      	ldr	r5, [pc, #128]	; (117cc <ticker_next_slot_get+0x88>)
{
   1174a:	4684      	mov	ip, r0
   1174c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1174e:	212c      	movs	r1, #44	; 0x2c
   11750:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11754:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   11758:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   1175c:	684c      	ldr	r4, [r1, #4]
   1175e:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   11762:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   11766:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1176a:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   1176c:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   11770:	f10e 0c01 	add.w	ip, lr, #1
   11774:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11778:	4567      	cmp	r7, ip
   1177a:	bf98      	it	ls
   1177c:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11780:	4564      	cmp	r4, ip
   11782:	d020      	beq.n	117c6 <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   11784:	6877      	ldr	r7, [r6, #4]
   11786:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   1178a:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   1178e:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   11792:	f64f 7802 	movw	r8, #65282	; 0xff02
   11796:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   1179a:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   1179e:	9b06      	ldr	r3, [sp, #24]
   117a0:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   117a2:	9b07      	ldr	r3, [sp, #28]
   117a4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   117a6:	9b08      	ldr	r3, [sp, #32]
   117a8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   117aa:	2302      	movs	r3, #2
   117ac:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   117ae:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   117b2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   117b6:	4798      	blx	r3
   117b8:	462b      	mov	r3, r5
   117ba:	2200      	movs	r2, #0
   117bc:	2104      	movs	r1, #4
   117be:	47b0      	blx	r6
	return user_op->status;
   117c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   117c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   117c6:	2001      	movs	r0, #1
}
   117c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   117cc:	2000217c 	.word	0x2000217c

000117d0 <ticker_job_sched>:
{
   117d0:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   117d2:	4d0a      	ldr	r5, [pc, #40]	; (117fc <ticker_job_sched+0x2c>)
   117d4:	222c      	movs	r2, #44	; 0x2c
   117d6:	fb02 5200 	mla	r2, r2, r0, r5
   117da:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   117de:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   117e0:	4608      	mov	r0, r1
   117e2:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   117e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   117e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   117ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   117f0:	46b4      	mov	ip, r6
   117f2:	2200      	movs	r2, #0
}
   117f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   117f8:	2104      	movs	r1, #4
   117fa:	4760      	bx	ip
   117fc:	2000217c 	.word	0x2000217c

00011800 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11800:	f00d bac6 	b.w	1ed90 <cntr_cnt_get>

00011804 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11804:	1a40      	subs	r0, r0, r1
}
   11806:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1180a:	4770      	bx	lr

0001180c <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   1180c:	b538      	push	{r3, r4, r5, lr}
   1180e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   11810:	2000      	movs	r0, #0
{
   11812:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   11814:	f003 fce8 	bl	151e8 <ull_adv_is_enabled>
   11818:	b998      	cbnz	r0, 11842 <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   1181a:	f003 ff0b 	bl	15634 <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   1181e:	f010 0306 	ands.w	r3, r0, #6
   11822:	d10e      	bne.n	11842 <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11824:	b134      	cbz	r4, 11834 <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11826:	4a08      	ldr	r2, [pc, #32]	; (11848 <ll_addr_set+0x3c>)
   11828:	6828      	ldr	r0, [r5, #0]
   1182a:	6010      	str	r0, [r2, #0]
   1182c:	88a9      	ldrh	r1, [r5, #4]
   1182e:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11830:	4618      	mov	r0, r3
}
   11832:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11834:	4b05      	ldr	r3, [pc, #20]	; (1184c <ll_addr_set+0x40>)
   11836:	6828      	ldr	r0, [r5, #0]
   11838:	6018      	str	r0, [r3, #0]
   1183a:	88aa      	ldrh	r2, [r5, #4]
   1183c:	809a      	strh	r2, [r3, #4]
	return 0;
   1183e:	4620      	mov	r0, r4
}
   11840:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11842:	200c      	movs	r0, #12
}
   11844:	bd38      	pop	{r3, r4, r5, pc}
   11846:	bf00      	nop
   11848:	200021b0 	.word	0x200021b0
   1184c:	200021a8 	.word	0x200021a8

00011850 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   11850:	2801      	cmp	r0, #1
{
   11852:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   11854:	d805      	bhi.n	11862 <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   11856:	4a04      	ldr	r2, [pc, #16]	; (11868 <ll_addr_get+0x18>)
   11858:	4804      	ldr	r0, [pc, #16]	; (1186c <ll_addr_get+0x1c>)
   1185a:	2b00      	cmp	r3, #0
   1185c:	bf18      	it	ne
   1185e:	4610      	movne	r0, r2
   11860:	4770      	bx	lr
		return NULL;
   11862:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   11864:	4770      	bx	lr
   11866:	bf00      	nop
   11868:	200021b0 	.word	0x200021b0
   1186c:	200021a8 	.word	0x200021a8

00011870 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   11870:	2801      	cmp	r0, #1
   11872:	d80a      	bhi.n	1188a <ll_addr_read+0x1a>
		return rnd_addr;
   11874:	4a06      	ldr	r2, [pc, #24]	; (11890 <ll_addr_read+0x20>)
   11876:	4b07      	ldr	r3, [pc, #28]	; (11894 <ll_addr_read+0x24>)
   11878:	2800      	cmp	r0, #0
   1187a:	bf18      	it	ne
   1187c:	4613      	movne	r3, r2
   1187e:	6818      	ldr	r0, [r3, #0]
   11880:	6008      	str	r0, [r1, #0]
   11882:	889a      	ldrh	r2, [r3, #4]
   11884:	808a      	strh	r2, [r1, #4]
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
	}

	return addr;
}
   11886:	4618      	mov	r0, r3
   11888:	4770      	bx	lr
		return NULL;
   1188a:	2300      	movs	r3, #0
}
   1188c:	4618      	mov	r0, r3
   1188e:	4770      	bx	lr
   11890:	200021b0 	.word	0x200021b0
   11894:	200021a8 	.word	0x200021a8

00011898 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11898:	2802      	cmp	r0, #2
   1189a:	d001      	beq.n	118a0 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   1189c:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   1189e:	4770      	bx	lr
{
   118a0:	b538      	push	{r3, r4, r5, lr}
   118a2:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   118a4:	4608      	mov	r0, r1
   118a6:	461d      	mov	r5, r3
   118a8:	f004 fd82 	bl	163b0 <ll_connected_get>
			if (!conn) {
   118ac:	b110      	cbz	r0, 118b4 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   118ae:	2000      	movs	r0, #0
   118b0:	7028      	strb	r0, [r5, #0]
}
   118b2:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   118b4:	4620      	mov	r0, r4
}
   118b6:	bd38      	pop	{r3, r4, r5, pc}

000118b8 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   118b8:	2300      	movs	r3, #0
   118ba:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   118bc:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   118be:	4770      	bx	lr

000118c0 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   118c0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   118c2:	4802      	ldr	r0, [pc, #8]	; (118cc <hci_driver_init+0xc>)
   118c4:	f7f7 fb6c 	bl	8fa0 <bt_hci_driver_register>

	return 0;
}
   118c8:	2000      	movs	r0, #0
   118ca:	bd08      	pop	{r3, pc}
   118cc:	0002c0cc 	.word	0x0002c0cc

000118d0 <hci_driver_send>:
{
   118d0:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   118d2:	8983      	ldrh	r3, [r0, #12]
{
   118d4:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   118d6:	2b00      	cmp	r3, #0
   118d8:	d03c      	beq.n	11954 <hci_driver_send+0x84>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   118da:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   118dc:	4604      	mov	r4, r0
   118de:	b32b      	cbz	r3, 1192c <hci_driver_send+0x5c>
   118e0:	2b02      	cmp	r3, #2
   118e2:	d011      	beq.n	11908 <hci_driver_send+0x38>
		BT_ERR("Unknown HCI type %u", type);
   118e4:	4922      	ldr	r1, [pc, #136]	; (11970 <hci_driver_send+0xa0>)
   118e6:	2203      	movs	r2, #3
	switch (type) {
   118e8:	e9cd 1306 	strd	r1, r3, [sp, #24]
		BT_ERR("Unknown HCI type %u", type);
   118ec:	9201      	str	r2, [sp, #4]
   118ee:	9205      	str	r2, [sp, #20]
   118f0:	4820      	ldr	r0, [pc, #128]	; (11974 <hci_driver_send+0xa4>)
   118f2:	2300      	movs	r3, #0
   118f4:	aa05      	add	r2, sp, #20
   118f6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   118fa:	f014 f85c 	bl	259b6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   118fe:	f06f 0515 	mvn.w	r5, #21
}
   11902:	4628      	mov	r0, r5
   11904:	b009      	add	sp, #36	; 0x24
   11906:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11908:	a902      	add	r1, sp, #8
   1190a:	f001 f83f 	bl	1298c <hci_acl_handle>
	if (evt) {
   1190e:	9b02      	ldr	r3, [sp, #8]
	err = hci_acl_handle(buf, &evt);
   11910:	4605      	mov	r5, r0
	if (evt) {
   11912:	b113      	cbz	r3, 1191a <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11914:	4618      	mov	r0, r3
   11916:	f7f7 fb25 	bl	8f64 <bt_recv_prio>
	if (!err) {
   1191a:	2d00      	cmp	r5, #0
   1191c:	d1f1      	bne.n	11902 <hci_driver_send+0x32>
		net_buf_unref(buf);
   1191e:	4620      	mov	r0, r4
   11920:	f00e fa22 	bl	1fd68 <net_buf_unref>
   11924:	2500      	movs	r5, #0
}
   11926:	4628      	mov	r0, r5
   11928:	b009      	add	sp, #36	; 0x24
   1192a:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   1192c:	a902      	add	r1, sp, #8
	struct node_rx_pdu *node_rx = NULL;
   1192e:	9302      	str	r3, [sp, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11930:	f000 faec 	bl	11f0c <hci_cmd_handle>
	if (evt) {
   11934:	2800      	cmp	r0, #0
   11936:	d0f2      	beq.n	1191e <hci_driver_send+0x4e>
		bt_recv_prio(evt);
   11938:	f7f7 fb14 	bl	8f64 <bt_recv_prio>
		if (node_rx) {
   1193c:	9d02      	ldr	r5, [sp, #8]
   1193e:	2d00      	cmp	r5, #0
   11940:	d0ed      	beq.n	1191e <hci_driver_send+0x4e>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11942:	4628      	mov	r0, r5
   11944:	f001 fd94 	bl	13470 <hci_get_class>
   11948:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1194a:	9902      	ldr	r1, [sp, #8]
   1194c:	480a      	ldr	r0, [pc, #40]	; (11978 <hci_driver_send+0xa8>)
   1194e:	f018 fc2f 	bl	2a1b0 <k_queue_append>
	if (!err) {
   11952:	e7e4      	b.n	1191e <hci_driver_send+0x4e>
		BT_ERR("Empty HCI packet");
   11954:	2202      	movs	r2, #2
   11956:	4909      	ldr	r1, [pc, #36]	; (1197c <hci_driver_send+0xac>)
   11958:	9106      	str	r1, [sp, #24]
   1195a:	9201      	str	r2, [sp, #4]
   1195c:	9205      	str	r2, [sp, #20]
   1195e:	4805      	ldr	r0, [pc, #20]	; (11974 <hci_driver_send+0xa4>)
   11960:	aa05      	add	r2, sp, #20
   11962:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   11966:	f014 f826 	bl	259b6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   1196a:	f06f 0515 	mvn.w	r5, #21
   1196e:	e7c8      	b.n	11902 <hci_driver_send+0x32>
   11970:	0002c020 	.word	0x0002c020
   11974:	0002b60c 	.word	0x0002b60c
   11978:	20000c5c 	.word	0x20000c5c
   1197c:	0002c00c 	.word	0x0002c00c

00011980 <recv_thread>:
{
   11980:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11982:	4e41      	ldr	r6, [pc, #260]	; (11a88 <recv_thread+0x108>)
		LL_ASSERT(0);
   11984:	4f41      	ldr	r7, [pc, #260]	; (11a8c <recv_thread+0x10c>)
{
   11986:	b083      	sub	sp, #12
   11988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1198c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11990:	4630      	mov	r0, r6
   11992:	f010 fd35 	bl	22400 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11996:	2800      	cmp	r0, #0
   11998:	d0f6      	beq.n	11988 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   1199a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   1199c:	9001      	str	r0, [sp, #4]
	switch (class) {
   1199e:	2b04      	cmp	r3, #4
   119a0:	d821      	bhi.n	119e6 <recv_thread+0x66>
   119a2:	2b00      	cmp	r3, #0
   119a4:	d14b      	bne.n	11a3e <recv_thread+0xbe>
		LL_ASSERT(0);
   119a6:	493a      	ldr	r1, [pc, #232]	; (11a90 <recv_thread+0x110>)
   119a8:	483a      	ldr	r0, [pc, #232]	; (11a94 <recv_thread+0x114>)
   119aa:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   119ae:	463a      	mov	r2, r7
   119b0:	f013 faa9 	bl	24f06 <printk>
   119b4:	4040      	eors	r0, r0
   119b6:	f380 8811 	msr	BASEPRI, r0
   119ba:	f04f 0003 	mov.w	r0, #3
   119be:	df02      	svc	2
	node_rx->hdr.next = NULL;
   119c0:	9b01      	ldr	r3, [sp, #4]
   119c2:	2200      	movs	r2, #0
   119c4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   119c6:	a801      	add	r0, sp, #4
   119c8:	f002 f9fc 	bl	13dc4 <ll_rx_mem_release>
   119cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119d4:	4630      	mov	r0, r6
   119d6:	f010 fd13 	bl	22400 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   119da:	2800      	cmp	r0, #0
   119dc:	d0d4      	beq.n	11988 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   119de:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   119e0:	9001      	str	r0, [sp, #4]
	switch (class) {
   119e2:	2b04      	cmp	r3, #4
   119e4:	d9dd      	bls.n	119a2 <recv_thread+0x22>
   119e6:	2b05      	cmp	r3, #5
   119e8:	d1dd      	bne.n	119a6 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   119ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   119ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   119f2:	2003      	movs	r0, #3
   119f4:	f7f6 f82c 	bl	7a50 <bt_buf_get_rx>
   119f8:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   119fa:	4621      	mov	r1, r4
   119fc:	9801      	ldr	r0, [sp, #4]
   119fe:	f001 f88f 	bl	12b20 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   11a02:	9b01      	ldr	r3, [sp, #4]
   11a04:	2200      	movs	r2, #0
   11a06:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11a08:	a801      	add	r0, sp, #4
   11a0a:	f002 f9db 	bl	13dc4 <ll_rx_mem_release>
		while (buf) {
   11a0e:	2c00      	cmp	r4, #0
   11a10:	d0ba      	beq.n	11988 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   11a12:	4620      	mov	r0, r4
   11a14:	f017 ff67 	bl	298e6 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   11a18:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   11a1a:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   11a1c:	2000      	movs	r0, #0
   11a1e:	f017 ff88 	bl	29932 <net_buf_frag_del>
			if (frag->len) {
   11a22:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   11a24:	4604      	mov	r4, r0
				bt_recv(frag);
   11a26:	4628      	mov	r0, r5
			if (frag->len) {
   11a28:	b133      	cbz	r3, 11a38 <recv_thread+0xb8>
				bt_recv(frag);
   11a2a:	f7f7 f9df 	bl	8dec <bt_recv>
	z_impl_k_yield();
   11a2e:	f011 f977 	bl	22d20 <z_impl_k_yield>
		while (buf) {
   11a32:	2c00      	cmp	r4, #0
   11a34:	d1ed      	bne.n	11a12 <recv_thread+0x92>
   11a36:	e7a7      	b.n	11988 <recv_thread+0x8>
				net_buf_unref(frag);
   11a38:	f00e f996 	bl	1fd68 <net_buf_unref>
   11a3c:	e7f7      	b.n	11a2e <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11a3e:	2b02      	cmp	r3, #2
   11a40:	d013      	beq.n	11a6a <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11a42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11a4a:	2001      	movs	r0, #1
   11a4c:	f7f6 f800 	bl	7a50 <bt_buf_get_rx>
   11a50:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   11a52:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   11a54:	b19c      	cbz	r4, 11a7e <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   11a56:	4621      	mov	r1, r4
   11a58:	f001 f89c 	bl	12b94 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11a5c:	9b01      	ldr	r3, [sp, #4]
   11a5e:	2200      	movs	r2, #0
   11a60:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11a62:	a801      	add	r0, sp, #4
   11a64:	f002 f9ae 	bl	13dc4 <ll_rx_mem_release>
		while (buf) {
   11a68:	e7d3      	b.n	11a12 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11a6a:	2200      	movs	r2, #0
   11a6c:	2300      	movs	r3, #0
   11a6e:	2101      	movs	r1, #1
   11a70:	2000      	movs	r0, #0
   11a72:	f7f6 f817 	bl	7aa4 <bt_buf_get_evt>
   11a76:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   11a78:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   11a7a:	2c00      	cmp	r4, #0
   11a7c:	d1eb      	bne.n	11a56 <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   11a7e:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   11a80:	a801      	add	r0, sp, #4
   11a82:	f002 f99f 	bl	13dc4 <ll_rx_mem_release>
		while (buf) {
   11a86:	e77f      	b.n	11988 <recv_thread+0x8>
   11a88:	20000c5c 	.word	0x20000c5c
   11a8c:	0002c034 	.word	0x0002c034
   11a90:	0002c074 	.word	0x0002c074
   11a94:	0002bfdc 	.word	0x0002bfdc

00011a98 <prio_recv_thread>:
{
   11a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   11a9c:	4f2e      	ldr	r7, [pc, #184]	; (11b58 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   11a9e:	4e2f      	ldr	r6, [pc, #188]	; (11b5c <prio_recv_thread+0xc4>)
{
   11aa0:	b082      	sub	sp, #8
   11aa2:	e00c      	b.n	11abe <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11aa4:	f7f5 fffe 	bl	7aa4 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11aa8:	4622      	mov	r2, r4
   11aaa:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11aae:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11ab0:	f001 fcc6 	bl	13440 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11ab4:	4620      	mov	r0, r4
   11ab6:	f7f7 fa55 	bl	8f64 <bt_recv_prio>
	z_impl_k_yield();
   11aba:	f011 f931 	bl	22d20 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11abe:	f10d 0102 	add.w	r1, sp, #2
   11ac2:	a801      	add	r0, sp, #4
   11ac4:	f001 ffce 	bl	13a64 <ll_rx_get>
   11ac8:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11ad2:	2100      	movs	r1, #0
   11ad4:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11ad6:	2c00      	cmp	r4, #0
   11ad8:	d1e4      	bne.n	11aa4 <prio_recv_thread+0xc>
		if (node_rx) {
   11ada:	9b01      	ldr	r3, [sp, #4]
   11adc:	b1b3      	cbz	r3, 11b0c <prio_recv_thread+0x74>
			ll_rx_dequeue();
   11ade:	f002 f8a3 	bl	13c28 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11ae2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   11ae6:	4640      	mov	r0, r8
   11ae8:	f001 fcc2 	bl	13470 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11aec:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11aee:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11af2:	796b      	ldrb	r3, [r5, #5]
   11af4:	2b03      	cmp	r3, #3
   11af6:	d102      	bne.n	11afe <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   11af8:	792b      	ldrb	r3, [r5, #4]
   11afa:	2b17      	cmp	r3, #23
   11afc:	d00e      	beq.n	11b1c <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   11afe:	4629      	mov	r1, r5
   11b00:	4630      	mov	r0, r6
   11b02:	f018 fb55 	bl	2a1b0 <k_queue_append>
		if (iso_received || node_rx) {
   11b06:	9b01      	ldr	r3, [sp, #4]
   11b08:	2b00      	cmp	r3, #0
   11b0a:	d1d8      	bne.n	11abe <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   11b0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b14:	4638      	mov	r0, r7
   11b16:	f010 fccd 	bl	224b4 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11b1a:	e7d0      	b.n	11abe <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11b20:	4621      	mov	r1, r4
   11b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   11b26:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   11b28:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11b2c:	f7f5 ffba 	bl	7aa4 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11b30:	4641      	mov	r1, r8
   11b32:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11b34:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11b36:	f105 001c 	add.w	r0, r5, #28
   11b3a:	f000 ffc9 	bl	12ad0 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   11b3e:	4640      	mov	r0, r8
   11b40:	f000 ffe6 	bl	12b10 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   11b44:	4620      	mov	r0, r4
			if (buf) {
   11b46:	b124      	cbz	r4, 11b52 <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   11b48:	f7f7 fa0c 	bl	8f64 <bt_recv_prio>
					net_buf_unref(buf);
   11b4c:	4620      	mov	r0, r4
   11b4e:	f00e f90b 	bl	1fd68 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   11b52:	9d01      	ldr	r5, [sp, #4]
   11b54:	e7d3      	b.n	11afe <prio_recv_thread+0x66>
   11b56:	bf00      	nop
   11b58:	20000c2c 	.word	0x20000c2c
   11b5c:	20000c5c 	.word	0x20000c5c

00011b60 <hci_driver_open>:
{
   11b60:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   11b62:	4822      	ldr	r0, [pc, #136]	; (11bec <hci_driver_open+0x8c>)
{
   11b64:	b090      	sub	sp, #64	; 0x40
	err = ll_init(&sem_prio_recv);
   11b66:	f002 fd95 	bl	14694 <ll_init>
	if (err) {
   11b6a:	4604      	mov	r4, r0
   11b6c:	bb70      	cbnz	r0, 11bcc <hci_driver_open+0x6c>
	hci_init(NULL);
   11b6e:	f001 fc95 	bl	1349c <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   11b72:	2600      	movs	r6, #0
   11b74:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b76:	f06f 0209 	mvn.w	r2, #9
   11b7a:	e9cd 2403 	strd	r2, r4, [sp, #12]
   11b7e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11b82:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11b86:	4b1a      	ldr	r3, [pc, #104]	; (11bf0 <hci_driver_open+0x90>)
   11b88:	491a      	ldr	r1, [pc, #104]	; (11bf4 <hci_driver_open+0x94>)
   11b8a:	9400      	str	r4, [sp, #0]
   11b8c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   11b90:	4819      	ldr	r0, [pc, #100]	; (11bf8 <hci_driver_open+0x98>)
   11b92:	f010 fa27 	bl	21fe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11b96:	4919      	ldr	r1, [pc, #100]	; (11bfc <hci_driver_open+0x9c>)
   11b98:	4817      	ldr	r0, [pc, #92]	; (11bf8 <hci_driver_open+0x98>)
   11b9a:	f018 fa50 	bl	2a03e <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11b9e:	f06f 0207 	mvn.w	r2, #7
   11ba2:	e9cd 2403 	strd	r2, r4, [sp, #12]
   11ba6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11baa:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11bae:	4b14      	ldr	r3, [pc, #80]	; (11c00 <hci_driver_open+0xa0>)
   11bb0:	4914      	ldr	r1, [pc, #80]	; (11c04 <hci_driver_open+0xa4>)
   11bb2:	9400      	str	r4, [sp, #0]
   11bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11bb8:	4813      	ldr	r0, [pc, #76]	; (11c08 <hci_driver_open+0xa8>)
   11bba:	f010 fa13 	bl	21fe4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   11bbe:	4913      	ldr	r1, [pc, #76]	; (11c0c <hci_driver_open+0xac>)
   11bc0:	4811      	ldr	r0, [pc, #68]	; (11c08 <hci_driver_open+0xa8>)
   11bc2:	f018 fa3c 	bl	2a03e <z_impl_k_thread_name_set>
}
   11bc6:	4620      	mov	r0, r4
   11bc8:	b010      	add	sp, #64	; 0x40
   11bca:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   11bcc:	4a10      	ldr	r2, [pc, #64]	; (11c10 <hci_driver_open+0xb0>)
   11bce:	2303      	movs	r3, #3
   11bd0:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
   11bd4:	9309      	str	r3, [sp, #36]	; 0x24
   11bd6:	930d      	str	r3, [sp, #52]	; 0x34
   11bd8:	480e      	ldr	r0, [pc, #56]	; (11c14 <hci_driver_open+0xb4>)
   11bda:	2300      	movs	r3, #0
   11bdc:	aa0d      	add	r2, sp, #52	; 0x34
   11bde:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   11be2:	f013 fee8 	bl	259b6 <z_impl_z_log_msg2_static_create>
}
   11be6:	4620      	mov	r0, r4
   11be8:	b010      	add	sp, #64	; 0x40
   11bea:	bdd0      	pop	{r4, r6, r7, pc}
   11bec:	20000c2c 	.word	0x20000c2c
   11bf0:	00011a99 	.word	0x00011a99
   11bf4:	20005258 	.word	0x20005258
   11bf8:	20001928 	.word	0x20001928
   11bfc:	0002c098 	.word	0x0002c098
   11c00:	00011981 	.word	0x00011981
   11c04:	20005418 	.word	0x20005418
   11c08:	200019a8 	.word	0x200019a8
   11c0c:	0002c0a4 	.word	0x0002c0a4
   11c10:	0002c078 	.word	0x0002c078
   11c14:	0002b60c 	.word	0x0002b60c

00011c18 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   11c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   11c1c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 11ce4 <dup_found.part.0+0xcc>
   11c20:	f8d9 3000 	ldr.w	r3, [r9]
   11c24:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   11c26:	4607      	mov	r7, r0
   11c28:	4688      	mov	r8, r1
   11c2a:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   11c2c:	dd41      	ble.n	11cb2 <dup_found.part.0+0x9a>
   11c2e:	4c2e      	ldr	r4, [pc, #184]	; (11ce8 <dup_found.part.0+0xd0>)
   11c30:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   11c32:	4621      	mov	r1, r4
   11c34:	2206      	movs	r2, #6
   11c36:	4630      	mov	r0, r6
   11c38:	f018 feff 	bl	2aa3a <memcmp>
   11c3c:	b918      	cbnz	r0, 11c46 <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   11c3e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   11c42:	4543      	cmp	r3, r8
   11c44:	d024      	beq.n	11c90 <dup_found.part.0+0x78>
		for (int32_t i = 0; i < dup_count; i++) {
   11c46:	f8d9 3000 	ldr.w	r3, [r9]
   11c4a:	3501      	adds	r5, #1
   11c4c:	429d      	cmp	r5, r3
   11c4e:	f104 0408 	add.w	r4, r4, #8
   11c52:	dbee      	blt.n	11c32 <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   11c54:	4d25      	ldr	r5, [pc, #148]	; (11cec <dup_found.part.0+0xd4>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   11c56:	4826      	ldr	r0, [pc, #152]	; (11cf0 <dup_found.part.0+0xd8>)
		dup = &dup_filter[dup_curr];
   11c58:	682a      	ldr	r2, [r5, #0]
   11c5a:	f8d6 c000 	ldr.w	ip, [r6]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   11c5e:	00d1      	lsls	r1, r2, #3
   11c60:	1c4c      	adds	r4, r1, #1
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   11c62:	4401      	add	r1, r0
   11c64:	f840 c004 	str.w	ip, [r0, r4]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   11c68:	4404      	add	r4, r0
   11c6a:	88b6      	ldrh	r6, [r6, #4]
   11c6c:	80a6      	strh	r6, [r4, #4]
		dup->addr.type = addr_type;
   11c6e:	f800 8032 	strb.w	r8, [r0, r2, lsl #3]
		dup->mask = BIT(adv_type);
   11c72:	2001      	movs	r0, #1
   11c74:	fa00 f707 	lsl.w	r7, r0, r7
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   11c78:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   11c7a:	71cf      	strb	r7, [r1, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   11c7c:	dd2c      	ble.n	11cd8 <dup_found.part.0+0xc0>
			dup_count++;
			dup_curr = dup_count;
		} else {
			dup_curr++;
   11c7e:	3201      	adds	r2, #1
   11c80:	602a      	str	r2, [r5, #0]
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   11c82:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   11c84:	f04f 0000 	mov.w	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   11c88:	d100      	bne.n	11c8c <dup_found.part.0+0x74>
			dup_curr = 0U;
   11c8a:	6028      	str	r0, [r5, #0]
		}
	}

	return false;
}
   11c8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(dup->mask & BIT(adv_type))) {
   11c90:	4b17      	ldr	r3, [pc, #92]	; (11cf0 <dup_found.part.0+0xd8>)
   11c92:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   11c96:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   11c98:	79ea      	ldrb	r2, [r5, #7]
   11c9a:	fa22 f307 	lsr.w	r3, r2, r7
   11c9e:	f013 0301 	ands.w	r3, r3, #1
   11ca2:	d1f3      	bne.n	11c8c <dup_found.part.0+0x74>
		dup->mask |= BIT(adv_type);
   11ca4:	fa00 f707 	lsl.w	r7, r0, r7
   11ca8:	433a      	orrs	r2, r7
   11caa:	71ea      	strb	r2, [r5, #7]
		return false;
   11cac:	4618      	mov	r0, r3
}
   11cae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dup = &dup_filter[dup_curr];
   11cb2:	4d0e      	ldr	r5, [pc, #56]	; (11cec <dup_found.part.0+0xd4>)
   11cb4:	f8d2 c000 	ldr.w	ip, [r2]
   11cb8:	682c      	ldr	r4, [r5, #0]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   11cba:	490d      	ldr	r1, [pc, #52]	; (11cf0 <dup_found.part.0+0xd8>)
   11cbc:	00e2      	lsls	r2, r4, #3
   11cbe:	1c50      	adds	r0, r2, #1
		dup->mask = BIT(adv_type);
   11cc0:	440a      	add	r2, r1
   11cc2:	f841 c000 	str.w	ip, [r1, r0]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   11cc6:	4408      	add	r0, r1
   11cc8:	88b6      	ldrh	r6, [r6, #4]
   11cca:	8086      	strh	r6, [r0, #4]
		dup->addr.type = addr_type;
   11ccc:	f801 8034 	strb.w	r8, [r1, r4, lsl #3]
		dup->mask = BIT(adv_type);
   11cd0:	2101      	movs	r1, #1
   11cd2:	fa01 f707 	lsl.w	r7, r1, r7
   11cd6:	71d7      	strb	r7, [r2, #7]
			dup_count++;
   11cd8:	3301      	adds	r3, #1
			dup_curr = dup_count;
   11cda:	461a      	mov	r2, r3
			dup_count++;
   11cdc:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   11ce0:	602b      	str	r3, [r5, #0]
   11ce2:	e7ce      	b.n	11c82 <dup_found.part.0+0x6a>
   11ce4:	200021bc 	.word	0x200021bc
   11ce8:	200021c5 	.word	0x200021c5
   11cec:	200021c0 	.word	0x200021c0
   11cf0:	200021c4 	.word	0x200021c4

00011cf4 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11cf8:	4c1a      	ldr	r4, [pc, #104]	; (11d64 <le_remote_feat_complete+0x70>)
   11cfa:	6864      	ldr	r4, [r4, #4]
   11cfc:	00a4      	lsls	r4, r4, #2
   11cfe:	d504      	bpl.n	11d0a <le_remote_feat_complete+0x16>
   11d00:	4616      	mov	r6, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11d02:	4a19      	ldr	r2, [pc, #100]	; (11d68 <le_remote_feat_complete+0x74>)
   11d04:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11d06:	0712      	lsls	r2, r2, #28
   11d08:	d401      	bmi.n	11d0e <le_remote_feat_complete+0x1a>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   11d0e:	f103 0408 	add.w	r4, r3, #8
   11d12:	4605      	mov	r5, r0
   11d14:	460f      	mov	r7, r1
   11d16:	4620      	mov	r0, r4
   11d18:	2102      	movs	r1, #2
   11d1a:	f017 fe16 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   11d1e:	233e      	movs	r3, #62	; 0x3e
   11d20:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11d22:	230c      	movs	r3, #12
   11d24:	7043      	strb	r3, [r0, #1]
   11d26:	2101      	movs	r1, #1
   11d28:	4620      	mov	r0, r4
   11d2a:	f017 fe0e 	bl	2994a <net_buf_simple_add>
   11d2e:	4603      	mov	r3, r0
	me->subevent = subevt;
   11d30:	2204      	movs	r2, #4
   11d32:	4620      	mov	r0, r4
   11d34:	701a      	strb	r2, [r3, #0]
   11d36:	210b      	movs	r1, #11
   11d38:	f017 fe07 	bl	2994a <net_buf_simple_add>
	sep->status = status;
   11d3c:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11d3e:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
   11d42:	b93d      	cbnz	r5, 11d54 <le_remote_feat_complete+0x60>
   11d44:	687b      	ldr	r3, [r7, #4]
   11d46:	68ba      	ldr	r2, [r7, #8]
   11d48:	f8c0 2007 	str.w	r2, [r0, #7]
   11d4c:	f8c0 3003 	str.w	r3, [r0, #3]
}
   11d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
__ssp_bos_icheck3(memset, void *, int)
   11d54:	f04f 0800 	mov.w	r8, #0
   11d58:	f8c0 8003 	str.w	r8, [r0, #3]
   11d5c:	f8c0 8007 	str.w	r8, [r0, #7]
   11d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d64:	20000158 	.word	0x20000158
   11d68:	20000160 	.word	0x20000160

00011d6c <hci_vendor_cmd_handle_common>:
{
   11d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   11d6e:	3801      	subs	r0, #1
{
   11d70:	b087      	sub	sp, #28
   11d72:	4614      	mov	r4, r2
	switch (ocf) {
   11d74:	2809      	cmp	r0, #9
   11d76:	d806      	bhi.n	11d86 <hci_vendor_cmd_handle_common+0x1a>
   11d78:	e8df f000 	tbb	[pc, r0]
   11d7c:	054c320a 	.word	0x054c320a
   11d80:	77056105 	.word	0x77056105
   11d84:	af99      	.short	0xaf99
   11d86:	f06f 0c15 	mvn.w	ip, #21
}
   11d8a:	4660      	mov	r0, ip
   11d8c:	b007      	add	sp, #28
   11d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11d90:	4b5c      	ldr	r3, [pc, #368]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11d92:	210d      	movs	r1, #13
   11d94:	8818      	ldrh	r0, [r3, #0]
   11d96:	f015 f9e1 	bl	2715c <bt_hci_cmd_complete_create>
   11d9a:	210d      	movs	r1, #13
   11d9c:	6020      	str	r0, [r4, #0]
   11d9e:	3008      	adds	r0, #8
   11da0:	f017 fdd3 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   11da4:	f04f 0c00 	mov.w	ip, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11da8:	2302      	movs	r3, #2
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11daa:	2203      	movs	r2, #3
	rp->status = 0x00;
   11dac:	f880 c000 	strb.w	ip, [r0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   11db0:	7043      	strb	r3, [r0, #1]
   11db2:	f880 c002 	strb.w	ip, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   11db6:	70c3      	strb	r3, [r0, #3]
   11db8:	f880 c004 	strb.w	ip, [r0, #4]
	rp->fw_variant = 0U;
   11dbc:	f880 c005 	strb.w	ip, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   11dc0:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   11dc2:	f880 c007 	strb.w	ip, [r0, #7]
   11dc6:	f880 c008 	strb.w	ip, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   11dca:	f880 c009 	strb.w	ip, [r0, #9]
   11dce:	f880 c00a 	strb.w	ip, [r0, #10]
   11dd2:	f880 c00b 	strb.w	ip, [r0, #11]
   11dd6:	f880 c00c 	strb.w	ip, [r0, #12]
}
   11dda:	4660      	mov	r0, ip
   11ddc:	b007      	add	sp, #28
   11dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11de0:	4b48      	ldr	r3, [pc, #288]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11de2:	2141      	movs	r1, #65	; 0x41
   11de4:	8818      	ldrh	r0, [r3, #0]
   11de6:	f015 f9b9 	bl	2715c <bt_hci_cmd_complete_create>
   11dea:	2141      	movs	r1, #65	; 0x41
   11dec:	6020      	str	r0, [r4, #0]
   11dee:	3008      	adds	r0, #8
   11df0:	f017 fdab 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   11df4:	2400      	movs	r4, #0
   11df6:	4605      	mov	r5, r0
   11df8:	2240      	movs	r2, #64	; 0x40
   11dfa:	f800 4b01 	strb.w	r4, [r0], #1
   11dfe:	4621      	mov	r1, r4
   11e00:	f018 fe4c 	bl	2aa9c <memset>
	return 0;
   11e04:	46a4      	mov	ip, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   11e06:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
   11e08:	2303      	movs	r3, #3
}
   11e0a:	4660      	mov	r0, ip
	rp->commands[0] |= BIT(5) | BIT(7);
   11e0c:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   11e0e:	70ab      	strb	r3, [r5, #2]
}
   11e10:	b007      	add	sp, #28
   11e12:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11e14:	4b3b      	ldr	r3, [pc, #236]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11e16:	2109      	movs	r1, #9
   11e18:	8818      	ldrh	r0, [r3, #0]
   11e1a:	f015 f99f 	bl	2715c <bt_hci_cmd_complete_create>
   11e1e:	2109      	movs	r1, #9
   11e20:	6020      	str	r0, [r4, #0]
   11e22:	3008      	adds	r0, #8
   11e24:	f017 fd91 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   11e28:	4602      	mov	r2, r0
   11e2a:	2300      	movs	r3, #0
   11e2c:	f802 3b01 	strb.w	r3, [r2], #1
	return 0;
   11e30:	469c      	mov	ip, r3
   11e32:	f8c0 3001 	str.w	r3, [r0, #1]
}
   11e36:	4660      	mov	r0, ip
   11e38:	6053      	str	r3, [r2, #4]
   11e3a:	b007      	add	sp, #28
   11e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   11e3e:	6889      	ldr	r1, [r1, #8]
   11e40:	2000      	movs	r0, #0
   11e42:	f7ff fce3 	bl	1180c <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   11e46:	4b2f      	ldr	r3, [pc, #188]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11e48:	2101      	movs	r1, #1
   11e4a:	8818      	ldrh	r0, [r3, #0]
   11e4c:	f015 f986 	bl	2715c <bt_hci_cmd_complete_create>
   11e50:	2101      	movs	r1, #1
   11e52:	4605      	mov	r5, r0
   11e54:	3008      	adds	r0, #8
   11e56:	f017 fd78 	bl	2994a <net_buf_simple_add>
	ccst->status = status;
   11e5a:	f04f 0c00 	mov.w	ip, #0
   11e5e:	f880 c000 	strb.w	ip, [r0]
}
   11e62:	4660      	mov	r0, ip
	*evt = cmd_complete_status(0x00);
   11e64:	6025      	str	r5, [r4, #0]
}
   11e66:	b007      	add	sp, #28
   11e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   11e6a:	4e27      	ldr	r6, [pc, #156]	; (11f08 <hci_vendor_cmd_handle_common+0x19c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11e6c:	4f25      	ldr	r7, [pc, #148]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   11e6e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11e70:	ad01      	add	r5, sp, #4
   11e72:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   11e74:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11e76:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   11e78:	702b      	strb	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11e7a:	2112      	movs	r1, #18
   11e7c:	f015 f96e 	bl	2715c <bt_hci_cmd_complete_create>
   11e80:	2112      	movs	r1, #18
   11e82:	6020      	str	r0, [r4, #0]
   11e84:	3008      	adds	r0, #8
   11e86:	f017 fd60 	bl	2994a <net_buf_simple_add>
   11e8a:	ae01      	add	r6, sp, #4
	rp->status = 0x00;
   11e8c:	4604      	mov	r4, r0
   11e8e:	4686      	mov	lr, r0
   11e90:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   11e92:	f04f 0c00 	mov.w	ip, #0
   11e96:	f804 cb01 	strb.w	ip, [r4], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11e9a:	782d      	ldrb	r5, [r5, #0]
   11e9c:	f8ce 0001 	str.w	r0, [lr, #1]
}
   11ea0:	4660      	mov	r0, ip
   11ea2:	6061      	str	r1, [r4, #4]
   11ea4:	60a2      	str	r2, [r4, #8]
   11ea6:	60e3      	str	r3, [r4, #12]
   11ea8:	7425      	strb	r5, [r4, #16]
   11eaa:	b007      	add	sp, #28
   11eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11eae:	4b15      	ldr	r3, [pc, #84]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11eb0:	2118      	movs	r1, #24
   11eb2:	8818      	ldrh	r0, [r3, #0]
   11eb4:	f015 f952 	bl	2715c <bt_hci_cmd_complete_create>
   11eb8:	2118      	movs	r1, #24
   11eba:	6020      	str	r0, [r4, #0]
   11ebc:	3008      	adds	r0, #8
   11ebe:	f017 fd44 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   11ec2:	2400      	movs	r4, #0
   11ec4:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11ec6:	2101      	movs	r1, #1
	rp->status = 0x00;
   11ec8:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11ecc:	f00d fdc0 	bl	1fa50 <hci_vendor_read_static_addr>
	return 0;
   11ed0:	46a4      	mov	ip, r4
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   11ed2:	7068      	strb	r0, [r5, #1]
}
   11ed4:	4660      	mov	r0, ip
   11ed6:	b007      	add	sp, #28
   11ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   11eda:	4b0a      	ldr	r3, [pc, #40]	; (11f04 <hci_vendor_cmd_handle_common+0x198>)
   11edc:	2121      	movs	r1, #33	; 0x21
   11ede:	8818      	ldrh	r0, [r3, #0]
   11ee0:	f015 f93c 	bl	2715c <bt_hci_cmd_complete_create>
   11ee4:	2121      	movs	r1, #33	; 0x21
   11ee6:	6020      	str	r0, [r4, #0]
   11ee8:	3008      	adds	r0, #8
   11eea:	f017 fd2e 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   11eee:	4601      	mov	r1, r0
   11ef0:	2400      	movs	r4, #0
   11ef2:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   11ef6:	3001      	adds	r0, #1
   11ef8:	f00d fe26 	bl	1fb48 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   11efc:	46a4      	mov	ip, r4
}
   11efe:	4660      	mov	r0, ip
   11f00:	b007      	add	sp, #28
   11f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11f04:	20003402 	.word	0x20003402
   11f08:	0002c0e0 	.word	0x0002c0e0

00011f0c <hci_cmd_handle>:
{
   11f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   11f0e:	8983      	ldrh	r3, [r0, #12]
{
   11f10:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   11f12:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   11f14:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   11f16:	9408      	str	r4, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   11f18:	f240 8122 	bls.w	12160 <hci_cmd_handle+0x254>
	return net_buf_simple_pull_mem(&buf->b, len);
   11f1c:	4605      	mov	r5, r0
   11f1e:	460e      	mov	r6, r1
   11f20:	3008      	adds	r0, #8
   11f22:	2103      	movs	r1, #3
   11f24:	f017 fd42 	bl	299ac <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   11f28:	89aa      	ldrh	r2, [r5, #12]
   11f2a:	7883      	ldrb	r3, [r0, #2]
   11f2c:	429a      	cmp	r2, r3
   11f2e:	f0c0 8158 	bcc.w	121e2 <hci_cmd_handle+0x2d6>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11f32:	8802      	ldrh	r2, [r0, #0]
   11f34:	4fc0      	ldr	r7, [pc, #768]	; (12238 <hci_cmd_handle+0x32c>)
	switch (BT_OGF(_opcode)) {
   11f36:	f3c2 2385 	ubfx	r3, r2, #10, #6
   11f3a:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   11f3c:	fa1f fc82 	uxth.w	ip, r2
   11f40:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   11f42:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   11f46:	d809      	bhi.n	11f5c <hci_cmd_handle+0x50>
   11f48:	b1ab      	cbz	r3, 11f76 <hci_cmd_handle+0x6a>
   11f4a:	3b01      	subs	r3, #1
   11f4c:	2b07      	cmp	r3, #7
   11f4e:	d812      	bhi.n	11f76 <hci_cmd_handle+0x6a>
   11f50:	e8df f003 	tbb	[pc, r3]
   11f54:	ecca1119 	.word	0xecca1119
   11f58:	28111111 	.word	0x28111111
   11f5c:	2b3f      	cmp	r3, #63	; 0x3f
   11f5e:	d10a      	bne.n	11f76 <hci_cmd_handle+0x6a>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   11f60:	aa08      	add	r2, sp, #32
   11f62:	4629      	mov	r1, r5
   11f64:	4620      	mov	r0, r4
   11f66:	f7ff ff01 	bl	11d6c <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   11f6a:	3016      	adds	r0, #22
	return evt;
   11f6c:	bf18      	it	ne
   11f6e:	9e08      	ldrne	r6, [sp, #32]
	if (err == -EINVAL) {
   11f70:	d106      	bne.n	11f80 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   11f72:	f8b7 c000 	ldrh.w	ip, [r7]
   11f76:	2101      	movs	r1, #1
   11f78:	4660      	mov	r0, ip
   11f7a:	f015 f901 	bl	27180 <bt_hci_cmd_status_create>
   11f7e:	4606      	mov	r6, r0
}
   11f80:	4630      	mov	r0, r6
   11f82:	b011      	add	sp, #68	; 0x44
   11f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   11f86:	2c06      	cmp	r4, #6
   11f88:	f000 8493 	beq.w	128b2 <hci_cmd_handle+0x9a6>
   11f8c:	2c1d      	cmp	r4, #29
   11f8e:	d1f2      	bne.n	11f76 <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   11f90:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   11f92:	8818      	ldrh	r0, [r3, #0]
   11f94:	f004 fb9a 	bl	166cc <ll_version_ind_send>
   11f98:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   11f9a:	8838      	ldrh	r0, [r7, #0]
   11f9c:	f015 f8f0 	bl	27180 <bt_hci_cmd_status_create>
   11fa0:	4606      	mov	r6, r0
}
   11fa2:	e7ed      	b.n	11f80 <hci_cmd_handle+0x74>
	switch (ocf) {
   11fa4:	1e62      	subs	r2, r4, #1
   11fa6:	2a4d      	cmp	r2, #77	; 0x4d
   11fa8:	d8e5      	bhi.n	11f76 <hci_cmd_handle+0x6a>
   11faa:	a301      	add	r3, pc, #4	; (adr r3, 11fb0 <hci_cmd_handle+0xa4>)
   11fac:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   11fb0:	0001256d 	.word	0x0001256d
   11fb4:	000125ef 	.word	0x000125ef
   11fb8:	000125a3 	.word	0x000125a3
   11fbc:	00011f77 	.word	0x00011f77
   11fc0:	00012599 	.word	0x00012599
   11fc4:	0001257d 	.word	0x0001257d
   11fc8:	000126bb 	.word	0x000126bb
   11fcc:	000126af 	.word	0x000126af
   11fd0:	000126a3 	.word	0x000126a3
   11fd4:	00012699 	.word	0x00012699
   11fd8:	00012681 	.word	0x00012681
   11fdc:	00012651 	.word	0x00012651
   11fe0:	0001261d 	.word	0x0001261d
   11fe4:	00012615 	.word	0x00012615
   11fe8:	0001288d 	.word	0x0001288d
   11fec:	0001287b 	.word	0x0001287b
   11ff0:	00012873 	.word	0x00012873
   11ff4:	0001286b 	.word	0x0001286b
   11ff8:	00012843 	.word	0x00012843
   11ffc:	0001283b 	.word	0x0001283b
   12000:	0001280d 	.word	0x0001280d
   12004:	000127f7 	.word	0x000127f7
   12008:	000127b7 	.word	0x000127b7
   1200c:	00012791 	.word	0x00012791
   12010:	00012771 	.word	0x00012771
   12014:	00012767 	.word	0x00012767
   12018:	00012757 	.word	0x00012757
   1201c:	00012725 	.word	0x00012725
   12020:	00011f77 	.word	0x00011f77
   12024:	00011f77 	.word	0x00011f77
   12028:	00011f77 	.word	0x00011f77
   1202c:	0001270f 	.word	0x0001270f
   12030:	000126d9 	.word	0x000126d9
   12034:	0001255d 	.word	0x0001255d
   12038:	00012527 	.word	0x00012527
   1203c:	0001251b 	.word	0x0001251b
   12040:	00011f77 	.word	0x00011f77
   12044:	00011f77 	.word	0x00011f77
   12048:	0001250d 	.word	0x0001250d
   1204c:	00012505 	.word	0x00012505
   12050:	000124ff 	.word	0x000124ff
   12054:	000124db 	.word	0x000124db
   12058:	000124a5 	.word	0x000124a5
   1205c:	0001246f 	.word	0x0001246f
   12060:	00012465 	.word	0x00012465
   12064:	00012457 	.word	0x00012457
   12068:	0001240b 	.word	0x0001240b
   1206c:	000123af 	.word	0x000123af
   12070:	00012391 	.word	0x00012391
   12074:	00012337 	.word	0x00012337
   12078:	00011f77 	.word	0x00011f77
   1207c:	00011f77 	.word	0x00011f77
   12080:	00011f77 	.word	0x00011f77
   12084:	00011f77 	.word	0x00011f77
   12088:	00011f77 	.word	0x00011f77
   1208c:	00011f77 	.word	0x00011f77
   12090:	00011f77 	.word	0x00011f77
   12094:	00011f77 	.word	0x00011f77
   12098:	00011f77 	.word	0x00011f77
   1209c:	00011f77 	.word	0x00011f77
   120a0:	00011f77 	.word	0x00011f77
   120a4:	00011f77 	.word	0x00011f77
   120a8:	00011f77 	.word	0x00011f77
   120ac:	00011f77 	.word	0x00011f77
   120b0:	00011f77 	.word	0x00011f77
   120b4:	00011f77 	.word	0x00011f77
   120b8:	00011f77 	.word	0x00011f77
   120bc:	00011f77 	.word	0x00011f77
   120c0:	00011f77 	.word	0x00011f77
   120c4:	00011f77 	.word	0x00011f77
   120c8:	00011f77 	.word	0x00011f77
   120cc:	00011f77 	.word	0x00011f77
   120d0:	00011f77 	.word	0x00011f77
   120d4:	00011f77 	.word	0x00011f77
   120d8:	00012311 	.word	0x00012311
   120dc:	00011f77 	.word	0x00011f77
   120e0:	00011f77 	.word	0x00011f77
   120e4:	000122f1 	.word	0x000122f1
	switch (ocf) {
   120e8:	2c63      	cmp	r4, #99	; 0x63
   120ea:	f000 83ee 	beq.w	128ca <hci_cmd_handle+0x9be>
   120ee:	d85c      	bhi.n	121aa <hci_cmd_handle+0x29e>
   120f0:	2c03      	cmp	r4, #3
   120f2:	f000 83ed 	beq.w	128d0 <hci_cmd_handle+0x9c4>
   120f6:	2c2d      	cmp	r4, #45	; 0x2d
   120f8:	d142      	bne.n	12180 <hci_cmd_handle+0x274>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   120fa:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   120fc:	4660      	mov	r0, ip
   120fe:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12100:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   12102:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12104:	f015 f82a 	bl	2715c <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   12108:	2104      	movs	r1, #4
   1210a:	9008      	str	r0, [sp, #32]
   1210c:	3008      	adds	r0, #8
   1210e:	f017 fc1c 	bl	2994a <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   12112:	b2ae      	uxth	r6, r5
   12114:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12116:	1cc3      	adds	r3, r0, #3
   12118:	4631      	mov	r1, r6
   1211a:	463a      	mov	r2, r7
   1211c:	2002      	movs	r0, #2
   1211e:	f7ff fbbb 	bl	11898 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12122:	7020      	strb	r0, [r4, #0]
	return evt;
   12124:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   12126:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   1212a:	e729      	b.n	11f80 <hci_cmd_handle+0x74>
	switch (ocf) {
   1212c:	1e62      	subs	r2, r4, #1
   1212e:	2a08      	cmp	r2, #8
   12130:	f63f af21 	bhi.w	11f76 <hci_cmd_handle+0x6a>
   12134:	a301      	add	r3, pc, #4	; (adr r3, 1213c <hci_cmd_handle+0x230>)
   12136:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1213a:	bf00      	nop
   1213c:	000122b9 	.word	0x000122b9
   12140:	0001224d 	.word	0x0001224d
   12144:	0001220d 	.word	0x0001220d
   12148:	00011f77 	.word	0x00011f77
   1214c:	00011f77 	.word	0x00011f77
   12150:	00011f77 	.word	0x00011f77
   12154:	00011f77 	.word	0x00011f77
   12158:	00011f77 	.word	0x00011f77
   1215c:	000121e9 	.word	0x000121e9
		BT_ERR("No HCI Command header");
   12160:	4a36      	ldr	r2, [pc, #216]	; (1223c <hci_cmd_handle+0x330>)
   12162:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI CMD packet length");
   12164:	920e      	str	r2, [sp, #56]	; 0x38
   12166:	9309      	str	r3, [sp, #36]	; 0x24
   12168:	930d      	str	r3, [sp, #52]	; 0x34
   1216a:	4835      	ldr	r0, [pc, #212]	; (12240 <hci_cmd_handle+0x334>)
   1216c:	4623      	mov	r3, r4
   1216e:	aa0d      	add	r2, sp, #52	; 0x34
   12170:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12174:	f013 fc1f 	bl	259b6 <z_impl_z_log_msg2_static_create>
		return NULL;
   12178:	4626      	mov	r6, r4
}
   1217a:	4630      	mov	r0, r6
   1217c:	b011      	add	sp, #68	; 0x44
   1217e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12180:	2c01      	cmp	r4, #1
   12182:	f47f aef8 	bne.w	11f76 <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12186:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   12188:	4b2e      	ldr	r3, [pc, #184]	; (12244 <hci_cmd_handle+0x338>)
   1218a:	6811      	ldr	r1, [r2, #0]
   1218c:	6852      	ldr	r2, [r2, #4]
   1218e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12190:	4660      	mov	r0, ip
   12192:	4621      	mov	r1, r4
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12194:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12196:	f014 ffe1 	bl	2715c <bt_hci_cmd_complete_create>
   1219a:	2101      	movs	r1, #1
   1219c:	4606      	mov	r6, r0
   1219e:	3008      	adds	r0, #8
   121a0:	f017 fbd3 	bl	2994a <net_buf_simple_add>
	ccst->status = status;
   121a4:	2300      	movs	r3, #0
   121a6:	7003      	strb	r3, [r0, #0]
}
   121a8:	e6ea      	b.n	11f80 <hci_cmd_handle+0x74>
	switch (ocf) {
   121aa:	2c7b      	cmp	r4, #123	; 0x7b
   121ac:	f000 83b6 	beq.w	1291c <hci_cmd_handle+0xa10>
   121b0:	2c7c      	cmp	r4, #124	; 0x7c
   121b2:	f47f aee0 	bne.w	11f76 <hci_cmd_handle+0x6a>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   121b6:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   121b8:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   121ba:	8859      	ldrh	r1, [r3, #2]
   121bc:	b2a8      	uxth	r0, r5
   121be:	f004 fbbf 	bl	16940 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   121c2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   121c4:	2103      	movs	r1, #3
   121c6:	8838      	ldrh	r0, [r7, #0]
   121c8:	f014 ffc8 	bl	2715c <bt_hci_cmd_complete_create>
   121cc:	2103      	movs	r1, #3
   121ce:	4603      	mov	r3, r0
   121d0:	3008      	adds	r0, #8
   121d2:	9308      	str	r3, [sp, #32]
   121d4:	f017 fbb9 	bl	2994a <net_buf_simple_add>
	rp->status = status;
   121d8:	7004      	strb	r4, [r0, #0]
	return evt;
   121da:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   121dc:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   121e0:	e6ce      	b.n	11f80 <hci_cmd_handle+0x74>
		BT_ERR("Invalid HCI CMD packet length");
   121e2:	4a19      	ldr	r2, [pc, #100]	; (12248 <hci_cmd_handle+0x33c>)
   121e4:	2302      	movs	r3, #2
   121e6:	e7bd      	b.n	12164 <hci_cmd_handle+0x258>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   121e8:	4660      	mov	r0, ip
   121ea:	2107      	movs	r1, #7
   121ec:	f014 ffb6 	bl	2715c <bt_hci_cmd_complete_create>
   121f0:	2107      	movs	r1, #7
   121f2:	4603      	mov	r3, r0
   121f4:	3008      	adds	r0, #8
   121f6:	9308      	str	r3, [sp, #32]
   121f8:	f017 fba7 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   121fc:	4601      	mov	r1, r0
   121fe:	2000      	movs	r0, #0
   12200:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   12204:	f7ff fb34 	bl	11870 <ll_addr_read>
	return evt;
   12208:	9e08      	ldr	r6, [sp, #32]
}
   1220a:	e6b9      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1220c:	2109      	movs	r1, #9
   1220e:	4660      	mov	r0, ip
   12210:	f014 ffa4 	bl	2715c <bt_hci_cmd_complete_create>
   12214:	2109      	movs	r1, #9
   12216:	4603      	mov	r3, r0
   12218:	3008      	adds	r0, #8
   1221a:	9308      	str	r3, [sp, #32]
   1221c:	f017 fb95 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   12220:	4603      	mov	r3, r0
   12222:	2200      	movs	r2, #0
   12224:	f803 2b01 	strb.w	r2, [r3], #1
	rp->features[4] = (1 << 5) | (1 << 6);
   12228:	2160      	movs	r1, #96	; 0x60
__ssp_bos_icheck3(memset, void *, int)
   1222a:	f8c0 2001 	str.w	r2, [r0, #1]
	return evt;
   1222e:	9e08      	ldr	r6, [sp, #32]
   12230:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   12232:	7141      	strb	r1, [r0, #5]
}
   12234:	e6a4      	b.n	11f80 <hci_cmd_handle+0x74>
   12236:	bf00      	nop
   12238:	20003402 	.word	0x20003402
   1223c:	0002c0f4 	.word	0x0002c0f4
   12240:	0002b604 	.word	0x0002b604
   12244:	20000158 	.word	0x20000158
   12248:	0002c10c 	.word	0x0002c10c
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1224c:	4660      	mov	r0, ip
   1224e:	2141      	movs	r1, #65	; 0x41
   12250:	f014 ff84 	bl	2715c <bt_hci_cmd_complete_create>
   12254:	2141      	movs	r1, #65	; 0x41
   12256:	4603      	mov	r3, r0
   12258:	3008      	adds	r0, #8
   1225a:	9308      	str	r3, [sp, #32]
   1225c:	f017 fb75 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   12260:	2100      	movs	r1, #0
   12262:	4605      	mov	r5, r0
   12264:	2240      	movs	r2, #64	; 0x40
   12266:	f800 1b01 	strb.w	r1, [r0], #1
   1226a:	f018 fc17 	bl	2aa9c <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   1226e:	20c0      	movs	r0, #192	; 0xc0
   12270:	71a8      	strb	r0, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   12272:	2028      	movs	r0, #40	; 0x28
   12274:	73e8      	strb	r0, [r5, #15]
	rp->commands[15] |= BIT(1);
   12276:	2002      	movs	r0, #2
	rp->commands[26] |= BIT(4) | BIT(5);
   12278:	22ff      	movs	r2, #255	; 0xff
	rp->commands[0] |= BIT(5);
   1227a:	2120      	movs	r1, #32
	rp->commands[15] |= BIT(1);
   1227c:	7428      	strb	r0, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1227e:	20f7      	movs	r0, #247	; 0xf7
	rp->commands[0] |= BIT(5);
   12280:	7069      	strb	r1, [r5, #1]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12282:	76a8      	strb	r0, [r5, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   12284:	2130      	movs	r1, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
   12286:	200f      	movs	r0, #15
	rp->commands[26] |= BIT(4) | BIT(5);
   12288:	76ea      	strb	r2, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1228a:	772a      	strb	r2, [r5, #28]
	rp->commands[33] |= BIT(6) | BIT(7);
   1228c:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[10] |= BIT(2);
   1228e:	2304      	movs	r3, #4
	rp->commands[28] |= BIT(1) | BIT(2);
   12290:	7768      	strb	r0, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   12292:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12296:	20f9      	movs	r0, #249	; 0xf9
	rp->commands[33] |= BIT(6) | BIT(7);
   12298:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1229c:	217f      	movs	r1, #127	; 0x7f
	rp->commands[38] |= BIT(7);
   1229e:	2280      	movs	r2, #128	; 0x80
	return evt;
   122a0:	9e08      	ldr	r6, [sp, #32]
	rp->commands[10] |= BIT(2);
   122a2:	72eb      	strb	r3, [r5, #11]
	rp->commands[22] |= BIT(2);
   122a4:	75eb      	strb	r3, [r5, #23]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   122a6:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   122aa:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   122ae:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   122b2:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
}
   122b6:	e663      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   122b8:	2109      	movs	r1, #9
   122ba:	4660      	mov	r0, ip
   122bc:	f014 ff4e 	bl	2715c <bt_hci_cmd_complete_create>
   122c0:	2109      	movs	r1, #9
   122c2:	4603      	mov	r3, r0
   122c4:	3008      	adds	r0, #8
   122c6:	9308      	str	r3, [sp, #32]
   122c8:	f017 fb3f 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   122cc:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   122ce:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   122d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   122d4:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   122d6:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   122d8:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   122dc:	7083      	strb	r3, [r0, #2]
   122de:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   122e0:	2305      	movs	r3, #5
	return evt;
   122e2:	9e08      	ldr	r6, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   122e4:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   122e6:	7144      	strb	r4, [r0, #5]
   122e8:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   122ea:	71c2      	strb	r2, [r0, #7]
   122ec:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   122ee:	e647      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   122f0:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   122f2:	79c1      	ldrb	r1, [r0, #7]
   122f4:	f009 fa7a 	bl	1b7ec <ll_priv_mode_set>
   122f8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   122fa:	8838      	ldrh	r0, [r7, #0]
   122fc:	2101      	movs	r1, #1
   122fe:	f014 ff2d 	bl	2715c <bt_hci_cmd_complete_create>
   12302:	2101      	movs	r1, #1
   12304:	4606      	mov	r6, r0
   12306:	3008      	adds	r0, #8
   12308:	f017 fb1f 	bl	2994a <net_buf_simple_add>
	ccst->status = status;
   1230c:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   1230e:	e637      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12310:	4660      	mov	r0, ip
   12312:	2103      	movs	r1, #3
   12314:	f014 ff22 	bl	2715c <bt_hci_cmd_complete_create>
   12318:	2103      	movs	r1, #3
   1231a:	4603      	mov	r3, r0
   1231c:	3008      	adds	r0, #8
   1231e:	9308      	str	r3, [sp, #32]
   12320:	f017 fb13 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   12324:	4601      	mov	r1, r0
   12326:	2300      	movs	r3, #0
   12328:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1232c:	3001      	adds	r0, #1
   1232e:	f7ff fac3 	bl	118b8 <ll_tx_pwr_get>
	return evt;
   12332:	9e08      	ldr	r6, [sp, #32]
   12334:	e624      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   12336:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12338:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   1233a:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1233c:	8810      	ldrh	r0, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1233e:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12342:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   12344:	bf48      	it	mi
   12346:	f041 0103 	orrmi.w	r1, r1, #3
   1234a:	7913      	ldrb	r3, [r2, #4]
   1234c:	bf48      	it	mi
   1234e:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12350:	07ae      	lsls	r6, r5, #30
		cmd->rx_phys |= mask_phys;
   12352:	bf44      	itt	mi
   12354:	f043 0303 	orrmi.w	r3, r3, #3
   12358:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1235a:	ea41 0203 	orr.w	r2, r1, r3
   1235e:	f032 0203 	bics.w	r2, r2, #3
   12362:	f040 8302 	bne.w	1296a <hci_cmd_handle+0xa5e>
	if (!(cmd->tx_phys & 0x07) ||
   12366:	074d      	lsls	r5, r1, #29
   12368:	f000 82f8 	beq.w	1295c <hci_cmd_handle+0xa50>
   1236c:	075a      	lsls	r2, r3, #29
   1236e:	f000 82f5 	beq.w	1295c <hci_cmd_handle+0xa50>
	if (phy_opts & 0x03) {
   12372:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   12376:	bf1c      	itt	ne
   12378:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1237c:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   12380:	f004 fa68 	bl	16854 <ll_phy_req_send>
   12384:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12386:	8838      	ldrh	r0, [r7, #0]
   12388:	f014 fefa 	bl	27180 <bt_hci_cmd_status_create>
   1238c:	4606      	mov	r6, r0
   1238e:	e5f7      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   12390:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12392:	781a      	ldrb	r2, [r3, #0]
   12394:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   12396:	bf4a      	itet	mi
   12398:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1239a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1239c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1239e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   123a0:	bf4a      	itet	mi
   123a2:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   123a4:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   123a6:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   123a8:	f004 fa4a 	bl	16840 <ll_phy_default_set>
   123ac:	e7a4      	b.n	122f8 <hci_cmd_handle+0x3ec>
	handle = sys_le16_to_cpu(cmd->handle);
   123ae:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123b0:	4660      	mov	r0, ip
   123b2:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   123b4:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   123b6:	f014 fed1 	bl	2715c <bt_hci_cmd_complete_create>
   123ba:	2105      	movs	r1, #5
   123bc:	4603      	mov	r3, r0
   123be:	3008      	adds	r0, #8
   123c0:	9308      	str	r3, [sp, #32]
   123c2:	f017 fac2 	bl	2994a <net_buf_simple_add>
   123c6:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   123c8:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   123ca:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   123cc:	1ce1      	adds	r1, r4, #3
   123ce:	f004 fa19 	bl	16804 <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   123d2:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   123d4:	7020      	strb	r0, [r4, #0]
   123d6:	2b00      	cmp	r3, #0
   123d8:	fa93 f2a3 	rbit	r2, r3
   123dc:	7923      	ldrb	r3, [r4, #4]
   123de:	fab2 f282 	clz	r2, r2
   123e2:	bf08      	it	eq
   123e4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   123e8:	2b00      	cmp	r3, #0
   123ea:	fa93 f3a3 	rbit	r3, r3
   123ee:	fab3 f383 	clz	r3, r3
   123f2:	f102 0201 	add.w	r2, r2, #1
   123f6:	bf08      	it	eq
   123f8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   123fc:	70e2      	strb	r2, [r4, #3]
   123fe:	3301      	adds	r3, #1
	return evt;
   12400:	9e08      	ldr	r6, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   12402:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   12404:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   12408:	e5ba      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1240a:	4660      	mov	r0, ip
   1240c:	2109      	movs	r1, #9
   1240e:	f014 fea5 	bl	2715c <bt_hci_cmd_complete_create>
   12412:	2109      	movs	r1, #9
   12414:	4603      	mov	r3, r0
   12416:	3008      	adds	r0, #8
   12418:	9308      	str	r3, [sp, #32]
   1241a:	f017 fa96 	bl	2994a <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1241e:	ab0a      	add	r3, sp, #40	; 0x28
   12420:	4604      	mov	r4, r0
   12422:	aa09      	add	r2, sp, #36	; 0x24
   12424:	f10d 011e 	add.w	r1, sp, #30
   12428:	a807      	add	r0, sp, #28
   1242a:	f004 f9df 	bl	167ec <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1242e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12432:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   12436:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1243a:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1243e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12442:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   12446:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12448:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   1244c:	7022      	strb	r2, [r4, #0]
	return evt;
   1244e:	9e08      	ldr	r6, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12450:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   12454:	e594      	b.n	11f80 <hci_cmd_handle+0x74>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   12456:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   12458:	8818      	ldrh	r0, [r3, #0]
   1245a:	f009 f9bd 	bl	1b7d8 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1245e:	8838      	ldrh	r0, [r7, #0]
   12460:	2101      	movs	r1, #1
   12462:	e698      	b.n	12196 <hci_cmd_handle+0x28a>
	status = ll_rl_enable(cmd->enable);
   12464:	68ab      	ldr	r3, [r5, #8]
   12466:	7818      	ldrb	r0, [r3, #0]
   12468:	f009 f99a 	bl	1b7a0 <ll_rl_enable>
   1246c:	e744      	b.n	122f8 <hci_cmd_handle+0x3ec>
	memcpy(dst, src, sizeof(*dst));
   1246e:	68ab      	ldr	r3, [r5, #8]
   12470:	6818      	ldr	r0, [r3, #0]
   12472:	900a      	str	r0, [sp, #40]	; 0x28
   12474:	889a      	ldrh	r2, [r3, #4]
   12476:	799b      	ldrb	r3, [r3, #6]
   12478:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1247c:	4660      	mov	r0, ip
   1247e:	2107      	movs	r1, #7
   12480:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   12484:	f014 fe6a 	bl	2715c <bt_hci_cmd_complete_create>
   12488:	2107      	movs	r1, #7
   1248a:	4603      	mov	r3, r0
   1248c:	3008      	adds	r0, #8
   1248e:	9308      	str	r3, [sp, #32]
   12490:	f017 fa5b 	bl	2994a <net_buf_simple_add>
   12494:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   12496:	1c41      	adds	r1, r0, #1
   12498:	a80a      	add	r0, sp, #40	; 0x28
   1249a:	f009 f94f 	bl	1b73c <ll_rl_lrpa_get>
   1249e:	7020      	strb	r0, [r4, #0]
	return evt;
   124a0:	9e08      	ldr	r6, [sp, #32]
   124a2:	e56d      	b.n	11f80 <hci_cmd_handle+0x74>
   124a4:	68ab      	ldr	r3, [r5, #8]
   124a6:	6818      	ldr	r0, [r3, #0]
   124a8:	900a      	str	r0, [sp, #40]	; 0x28
   124aa:	889a      	ldrh	r2, [r3, #4]
   124ac:	799b      	ldrb	r3, [r3, #6]
   124ae:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   124b2:	4660      	mov	r0, ip
   124b4:	2107      	movs	r1, #7
   124b6:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   124ba:	f014 fe4f 	bl	2715c <bt_hci_cmd_complete_create>
   124be:	2107      	movs	r1, #7
   124c0:	4603      	mov	r3, r0
   124c2:	3008      	adds	r0, #8
   124c4:	9308      	str	r3, [sp, #32]
   124c6:	f017 fa40 	bl	2994a <net_buf_simple_add>
   124ca:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   124cc:	1c41      	adds	r1, r0, #1
   124ce:	a80a      	add	r0, sp, #40	; 0x28
   124d0:	f009 f8fa 	bl	1b6c8 <ll_rl_crpa_get>
   124d4:	7020      	strb	r0, [r4, #0]
	return evt;
   124d6:	9e08      	ldr	r6, [sp, #32]
   124d8:	e552      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   124da:	4660      	mov	r0, ip
   124dc:	2102      	movs	r1, #2
   124de:	f014 fe3d 	bl	2715c <bt_hci_cmd_complete_create>
   124e2:	2102      	movs	r1, #2
   124e4:	4603      	mov	r3, r0
   124e6:	3008      	adds	r0, #8
   124e8:	9308      	str	r3, [sp, #32]
   124ea:	f017 fa2e 	bl	2994a <net_buf_simple_add>
   124ee:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   124f0:	f008 ffb2 	bl	1b458 <ll_rl_size_get>
	rp->status = 0x00;
   124f4:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   124f6:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   124f8:	7023      	strb	r3, [r4, #0]
	return evt;
   124fa:	9e08      	ldr	r6, [sp, #32]
   124fc:	e540      	b.n	11f80 <hci_cmd_handle+0x74>
	status = ll_rl_clear();
   124fe:	f008 ffad 	bl	1b45c <ll_rl_clear>
   12502:	e6f9      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_rl_remove(&cmd->peer_id_addr);
   12504:	68a8      	ldr	r0, [r5, #8]
   12506:	f008 ffeb 	bl	1b4e0 <ll_rl_remove>
   1250a:	e6f5      	b.n	122f8 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   1250c:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1250e:	f100 0217 	add.w	r2, r0, #23
   12512:	1dc1      	adds	r1, r0, #7
   12514:	f009 fc22 	bl	1bd5c <ll_rl_add>
   12518:	e6ee      	b.n	122f8 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   1251a:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1251c:	8859      	ldrh	r1, [r3, #2]
   1251e:	8818      	ldrh	r0, [r3, #0]
   12520:	f004 f95a 	bl	167d8 <ll_length_default_set>
   12524:	e6e8      	b.n	122f8 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12526:	4660      	mov	r0, ip
   12528:	2105      	movs	r1, #5
   1252a:	f014 fe17 	bl	2715c <bt_hci_cmd_complete_create>
   1252e:	2105      	movs	r1, #5
   12530:	4603      	mov	r3, r0
   12532:	3008      	adds	r0, #8
   12534:	9308      	str	r3, [sp, #32]
   12536:	f017 fa08 	bl	2994a <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1253a:	a90a      	add	r1, sp, #40	; 0x28
   1253c:	4604      	mov	r4, r0
   1253e:	a809      	add	r0, sp, #36	; 0x24
   12540:	f004 f93e 	bl	167c0 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12544:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   12548:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   1254c:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1254e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   12552:	7022      	strb	r2, [r4, #0]
	return evt;
   12554:	9e08      	ldr	r6, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12556:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   1255a:	e511      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   1255c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1255e:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   12560:	889a      	ldrh	r2, [r3, #4]
   12562:	8859      	ldrh	r1, [r3, #2]
   12564:	b2a8      	uxth	r0, r5
   12566:	f004 f8d7 	bl	16718 <ll_length_req_send>
   1256a:	e62a      	b.n	121c2 <hci_cmd_handle+0x2b6>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1256c:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1256e:	4bc4      	ldr	r3, [pc, #784]	; (12880 <hci_cmd_handle+0x974>)
   12570:	6811      	ldr	r1, [r2, #0]
   12572:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12574:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12576:	4660      	mov	r0, ip
   12578:	2101      	movs	r1, #1
   1257a:	e60b      	b.n	12194 <hci_cmd_handle+0x288>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   1257c:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1257e:	7ba5      	ldrb	r5, [r4, #14]
   12580:	79a3      	ldrb	r3, [r4, #6]
   12582:	7962      	ldrb	r2, [r4, #5]
   12584:	7921      	ldrb	r1, [r4, #4]
   12586:	8820      	ldrh	r0, [r4, #0]
   12588:	9502      	str	r5, [sp, #8]
   1258a:	7b65      	ldrb	r5, [r4, #13]
   1258c:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1258e:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   12590:	9400      	str	r4, [sp, #0]
   12592:	f002 fccb 	bl	14f2c <ll_adv_params_set>
   12596:	e6af      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   12598:	68a9      	ldr	r1, [r5, #8]
   1259a:	2001      	movs	r0, #1
   1259c:	f7ff f936 	bl	1180c <ll_addr_set>
   125a0:	e6aa      	b.n	122f8 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125a2:	4660      	mov	r0, ip
   125a4:	2109      	movs	r1, #9
   125a6:	f014 fdd9 	bl	2715c <bt_hci_cmd_complete_create>
   125aa:	2109      	movs	r1, #9
   125ac:	4603      	mov	r3, r0
   125ae:	3008      	adds	r0, #8
   125b0:	9308      	str	r3, [sp, #32]
   125b2:	f017 f9ca 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   125b6:	4603      	mov	r3, r0
   125b8:	2200      	movs	r2, #0
   125ba:	f803 2b01 	strb.w	r2, [r3], #1
   125be:	f8c0 2001 	str.w	r2, [r0, #1]
   125c2:	605a      	str	r2, [r3, #4]
   125c4:	4604      	mov	r4, r0
	sys_put_le64(ll_feat_get(), rp->features);
   125c6:	f000 ff97 	bl	134f8 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   125ca:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   125cc:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   125d0:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   125d2:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   125d4:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   125d6:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   125d8:	70a5      	strb	r5, [r4, #2]
   125da:	f3c1 2007 	ubfx	r0, r1, #8, #8
   125de:	7123      	strb	r3, [r4, #4]
   125e0:	0a13      	lsrs	r3, r2, #8
	return evt;
   125e2:	9e08      	ldr	r6, [sp, #32]
	dst[0] = val;
   125e4:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   125e6:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   125e8:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   125ea:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   125ec:	e4c8      	b.n	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125ee:	2104      	movs	r1, #4
   125f0:	4660      	mov	r0, ip
   125f2:	f014 fdb3 	bl	2715c <bt_hci_cmd_complete_create>
   125f6:	2104      	movs	r1, #4
   125f8:	4603      	mov	r3, r0
   125fa:	3008      	adds	r0, #8
   125fc:	9308      	str	r3, [sp, #32]
   125fe:	f017 f9a4 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   12602:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   12604:	2103      	movs	r1, #3
	rp->status = 0x00;
   12606:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   12608:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1260a:	70c1      	strb	r1, [r0, #3]
	return evt;
   1260c:	9e08      	ldr	r6, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   1260e:	7042      	strb	r2, [r0, #1]
   12610:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12612:	e4b5      	b.n	11f80 <hci_cmd_handle+0x74>
	status = ll_connect_disable(node_rx);
   12614:	4630      	mov	r0, r6
   12616:	f008 f957 	bl	1a8c8 <ll_connect_disable>
   1261a:	e66d      	b.n	122f8 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   1261c:	68ac      	ldr	r4, [r5, #8]
	status = ll_create_connection(scan_interval, scan_window,
   1261e:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   12622:	7963      	ldrb	r3, [r4, #5]
   12624:	7922      	ldrb	r2, [r4, #4]
   12626:	8861      	ldrh	r1, [r4, #2]
   12628:	8820      	ldrh	r0, [r4, #0]
   1262a:	9504      	str	r5, [sp, #16]
   1262c:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   12630:	9503      	str	r5, [sp, #12]
   12632:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   12636:	9502      	str	r5, [sp, #8]
   12638:	7b25      	ldrb	r5, [r4, #12]
   1263a:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   1263c:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   1263e:	9400      	str	r4, [sp, #0]
   12640:	f7ef ffde 	bl	2600 <ll_create_connection>
   12644:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12646:	8838      	ldrh	r0, [r7, #0]
   12648:	f014 fd9a 	bl	27180 <bt_hci_cmd_status_create>
   1264c:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   1264e:	e497      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   12650:	68ab      	ldr	r3, [r5, #8]
	if (cmd->enable && cmd->filter_dup) {
   12652:	7818      	ldrb	r0, [r3, #0]
   12654:	2800      	cmp	r0, #0
   12656:	f000 817c 	beq.w	12952 <hci_cmd_handle+0xa46>
   1265a:	785b      	ldrb	r3, [r3, #1]
   1265c:	2b00      	cmp	r3, #0
   1265e:	f000 8178 	beq.w	12952 <hci_cmd_handle+0xa46>
			dup_count = 0;
   12662:	4988      	ldr	r1, [pc, #544]	; (12884 <hci_cmd_handle+0x978>)
			dup_curr = 0U;
   12664:	4a88      	ldr	r2, [pc, #544]	; (12888 <hci_cmd_handle+0x97c>)
			dup_count = 0;
   12666:	2300      	movs	r3, #0
   12668:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   1266a:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   1266c:	f002 ff34 	bl	154d8 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   12670:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   12672:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12674:	f04f 0101 	mov.w	r1, #1
   12678:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   1267a:	bf08      	it	eq
   1267c:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1267e:	e63e      	b.n	122fe <hci_cmd_handle+0x3f2>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   12680:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   12682:	7963      	ldrb	r3, [r4, #5]
   12684:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   12688:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   1268c:	7820      	ldrb	r0, [r4, #0]
   1268e:	79a4      	ldrb	r4, [r4, #6]
   12690:	9400      	str	r4, [sp, #0]
   12692:	f7ef f8c1 	bl	1818 <ll_scan_params_set>
   12696:	e62f      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_adv_enable(cmd->enable);
   12698:	68ab      	ldr	r3, [r5, #8]
   1269a:	7818      	ldrb	r0, [r3, #0]
   1269c:	f7ee fe38 	bl	1310 <ll_adv_enable>
   126a0:	e62a      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   126a2:	68a9      	ldr	r1, [r5, #8]
   126a4:	f811 0b01 	ldrb.w	r0, [r1], #1
   126a8:	f002 fe9c 	bl	153e4 <ll_adv_scan_rsp_set>
   126ac:	e624      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   126ae:	68a9      	ldr	r1, [r5, #8]
   126b0:	f811 0b01 	ldrb.w	r0, [r1], #1
   126b4:	f002 fe46 	bl	15344 <ll_adv_data_set>
   126b8:	e61e      	b.n	122f8 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   126ba:	2102      	movs	r1, #2
   126bc:	4660      	mov	r0, ip
   126be:	f014 fd4d 	bl	2715c <bt_hci_cmd_complete_create>
   126c2:	2102      	movs	r1, #2
   126c4:	4603      	mov	r3, r0
   126c6:	3008      	adds	r0, #8
   126c8:	9308      	str	r3, [sp, #32]
   126ca:	f017 f93e 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   126ce:	2300      	movs	r3, #0
   126d0:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   126d2:	7043      	strb	r3, [r0, #1]
	return evt;
   126d4:	9e08      	ldr	r6, [sp, #32]
   126d6:	e453      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   126d8:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   126da:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   126dc:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   126de:	7892      	ldrb	r2, [r2, #2]
   126e0:	9300      	str	r3, [sp, #0]
   126e2:	e9cd 3301 	strd	r3, r3, [sp, #4]
   126e6:	2102      	movs	r1, #2
   126e8:	b2a0      	uxth	r0, r4
   126ea:	f003 fecb 	bl	16484 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   126ee:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   126f0:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   126f2:	8838      	ldrh	r0, [r7, #0]
   126f4:	f014 fd32 	bl	2715c <bt_hci_cmd_complete_create>
   126f8:	2103      	movs	r1, #3
   126fa:	4603      	mov	r3, r0
   126fc:	3008      	adds	r0, #8
   126fe:	9308      	str	r3, [sp, #32]
   12700:	f017 f923 	bl	2994a <net_buf_simple_add>
	rp->status = status;
   12704:	7005      	strb	r5, [r0, #0]
	return evt;
   12706:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   12708:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1270c:	e438      	b.n	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   1270e:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12710:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12712:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12714:	8853      	ldrh	r3, [r2, #2]
   12716:	9102      	str	r1, [sp, #8]
   12718:	88d1      	ldrh	r1, [r2, #6]
   1271a:	9101      	str	r1, [sp, #4]
   1271c:	8891      	ldrh	r1, [r2, #4]
   1271e:	9100      	str	r1, [sp, #0]
   12720:	2200      	movs	r2, #0
   12722:	e7e0      	b.n	126e6 <hci_cmd_handle+0x7da>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12724:	2109      	movs	r1, #9
   12726:	4660      	mov	r0, ip
   12728:	f014 fd18 	bl	2715c <bt_hci_cmd_complete_create>
   1272c:	2109      	movs	r1, #9
   1272e:	4603      	mov	r3, r0
   12730:	3008      	adds	r0, #8
   12732:	9308      	str	r3, [sp, #32]
   12734:	f017 f909 	bl	2994a <net_buf_simple_add>
	dst[0] = val;
   12738:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   1273a:	2200      	movs	r2, #0
   1273c:	213f      	movs	r1, #63	; 0x3f
   1273e:	70c1      	strb	r1, [r0, #3]
   12740:	7002      	strb	r2, [r0, #0]
   12742:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   12744:	7083      	strb	r3, [r0, #2]
   12746:	2103      	movs	r1, #3
	return evt;
   12748:	9e08      	ldr	r6, [sp, #32]
   1274a:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   1274c:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   1274e:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   12750:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   12752:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   12754:	e414      	b.n	11f80 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   12756:	68ab      	ldr	r3, [r5, #8]
   12758:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1275a:	2200      	movs	r2, #0
   1275c:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1275e:	b2a8      	uxth	r0, r5
   12760:	f007 ffe2 	bl	1a728 <ll_start_enc_req_send>
   12764:	e52d      	b.n	121c2 <hci_cmd_handle+0x2b6>
	handle = sys_le16_to_cpu(cmd->handle);
   12766:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12768:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1276a:	f832 5b02 	ldrh.w	r5, [r2], #2
   1276e:	e7f6      	b.n	1275e <hci_cmd_handle+0x852>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   12770:	68aa      	ldr	r2, [r5, #8]
				 (uint8_t *)&cmd->rand,
   12772:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   12774:	f102 030c 	add.w	r3, r2, #12
   12778:	f831 0b02 	ldrh.w	r0, [r1], #2
   1277c:	320a      	adds	r2, #10
   1277e:	f008 f8f1 	bl	1a964 <ll_enc_req_send>
   12782:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12784:	8838      	ldrh	r0, [r7, #0]
   12786:	f014 fcfb 	bl	27180 <bt_hci_cmd_status_create>
   1278a:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   1278c:	f7ff bbf8 	b.w	11f80 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12790:	4660      	mov	r0, ip
   12792:	2109      	movs	r1, #9
   12794:	f014 fce2 	bl	2715c <bt_hci_cmd_complete_create>
   12798:	2109      	movs	r1, #9
   1279a:	4603      	mov	r3, r0
   1279c:	3008      	adds	r0, #8
   1279e:	9308      	str	r3, [sp, #32]
   127a0:	f017 f8d3 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   127a4:	2300      	movs	r3, #0
   127a6:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   127aa:	2108      	movs	r1, #8
   127ac:	f009 ffde 	bl	1c76c <lll_csrand_get>
	return evt;
   127b0:	9e08      	ldr	r6, [sp, #32]
   127b2:	f7ff bbe5 	b.w	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   127b6:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   127b8:	aa0a      	add	r2, sp, #40	; 0x28
   127ba:	2300      	movs	r3, #0
   127bc:	f100 0110 	add.w	r1, r0, #16
   127c0:	f00c fb1c 	bl	1edfc <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   127c4:	2111      	movs	r1, #17
   127c6:	8838      	ldrh	r0, [r7, #0]
   127c8:	f014 fcc8 	bl	2715c <bt_hci_cmd_complete_create>
   127cc:	2111      	movs	r1, #17
   127ce:	4603      	mov	r3, r0
   127d0:	3008      	adds	r0, #8
   127d2:	9308      	str	r3, [sp, #32]
   127d4:	f017 f8b9 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   127d8:	4605      	mov	r5, r0
   127da:	2300      	movs	r3, #0
   127dc:	f805 3b01 	strb.w	r3, [r5], #1
   127e0:	ac0a      	add	r4, sp, #40	; 0x28
   127e2:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   127e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   127e6:	f8c6 0001 	str.w	r0, [r6, #1]
	return evt;
   127ea:	9e08      	ldr	r6, [sp, #32]
   127ec:	6069      	str	r1, [r5, #4]
   127ee:	60aa      	str	r2, [r5, #8]
   127f0:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
   127f2:	f7ff bbc5 	b.w	11f80 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   127f6:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   127f8:	8818      	ldrh	r0, [r3, #0]
   127fa:	f003 ff41 	bl	16680 <ll_feature_req_send>
   127fe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12800:	8838      	ldrh	r0, [r7, #0]
   12802:	f014 fcbd 	bl	27180 <bt_hci_cmd_status_create>
   12806:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   12808:	f7ff bbba 	b.w	11f80 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   1280c:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1280e:	4660      	mov	r0, ip
   12810:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   12812:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12814:	f014 fca2 	bl	2715c <bt_hci_cmd_complete_create>
   12818:	2108      	movs	r1, #8
   1281a:	4603      	mov	r3, r0
   1281c:	4408      	add	r0, r1
   1281e:	9308      	str	r3, [sp, #32]
   12820:	f017 f893 	bl	2994a <net_buf_simple_add>
   12824:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12826:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12828:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   1282a:	f003 febf 	bl	165ac <ll_chm_get>
	rp->status = status;
   1282e:	7020      	strb	r0, [r4, #0]
	return evt;
   12830:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   12832:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   12836:	f7ff bba3 	b.w	11f80 <hci_cmd_handle+0x74>
	status = ll_chm_update(&cmd->ch_map[0]);
   1283a:	68a8      	ldr	r0, [r5, #8]
   1283c:	f008 fb5c 	bl	1aef8 <ll_chm_update>
   12840:	e55a      	b.n	122f8 <hci_cmd_handle+0x3ec>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   12842:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12844:	890a      	ldrh	r2, [r1, #8]
   12846:	884b      	ldrh	r3, [r1, #2]
   12848:	8808      	ldrh	r0, [r1, #0]
   1284a:	9202      	str	r2, [sp, #8]
   1284c:	88ca      	ldrh	r2, [r1, #6]
   1284e:	9201      	str	r2, [sp, #4]
   12850:	8889      	ldrh	r1, [r1, #4]
   12852:	9100      	str	r1, [sp, #0]
   12854:	2200      	movs	r2, #0
   12856:	4611      	mov	r1, r2
   12858:	f003 fe14 	bl	16484 <ll_conn_update>
   1285c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1285e:	8838      	ldrh	r0, [r7, #0]
   12860:	f014 fc8e 	bl	27180 <bt_hci_cmd_status_create>
   12864:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   12866:	f7ff bb8b 	b.w	11f80 <hci_cmd_handle+0x74>
	status = ll_fal_remove(&cmd->addr);
   1286a:	68a8      	ldr	r0, [r5, #8]
   1286c:	f008 fd5e 	bl	1b32c <ll_fal_remove>
   12870:	e542      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_fal_add(&cmd->addr);
   12872:	68a8      	ldr	r0, [r5, #8]
   12874:	f008 fcbe 	bl	1b1f4 <ll_fal_add>
   12878:	e53e      	b.n	122f8 <hci_cmd_handle+0x3ec>
	status = ll_fal_clear();
   1287a:	f008 fc91 	bl	1b1a0 <ll_fal_clear>
   1287e:	e53b      	b.n	122f8 <hci_cmd_handle+0x3ec>
   12880:	20000160 	.word	0x20000160
   12884:	200021bc 	.word	0x200021bc
   12888:	200021c0 	.word	0x200021c0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1288c:	4660      	mov	r0, ip
   1288e:	2102      	movs	r1, #2
   12890:	f014 fc64 	bl	2715c <bt_hci_cmd_complete_create>
   12894:	2102      	movs	r1, #2
   12896:	4603      	mov	r3, r0
   12898:	3008      	adds	r0, #8
   1289a:	9308      	str	r3, [sp, #32]
   1289c:	f017 f855 	bl	2994a <net_buf_simple_add>
	rp->status = 0x00;
   128a0:	2300      	movs	r3, #0
   128a2:	7003      	strb	r3, [r0, #0]
   128a4:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   128a6:	f008 fc79 	bl	1b19c <ll_fal_size_get>
   128aa:	7060      	strb	r0, [r4, #1]
	return evt;
   128ac:	9e08      	ldr	r6, [sp, #32]
   128ae:	f7ff bb67 	b.w	11f80 <hci_cmd_handle+0x74>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   128b2:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   128b4:	7899      	ldrb	r1, [r3, #2]
   128b6:	8818      	ldrh	r0, [r3, #0]
   128b8:	f003 fe98 	bl	165ec <ll_terminate_ind_send>
   128bc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   128be:	8838      	ldrh	r0, [r7, #0]
   128c0:	f014 fc5e 	bl	27180 <bt_hci_cmd_status_create>
   128c4:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   128c6:	f7ff bb5b 	b.w	11f80 <hci_cmd_handle+0x74>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   128ca:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   128cc:	4b2a      	ldr	r3, [pc, #168]	; (12978 <hci_cmd_handle+0xa6c>)
   128ce:	e64f      	b.n	12570 <hci_cmd_handle+0x664>
	dup_count = DUP_FILTER_DISABLED;
   128d0:	482a      	ldr	r0, [pc, #168]	; (1297c <hci_cmd_handle+0xa70>)
	event_mask = DEFAULT_EVENT_MASK;
   128d2:	492b      	ldr	r1, [pc, #172]	; (12980 <hci_cmd_handle+0xa74>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   128d4:	4a28      	ldr	r2, [pc, #160]	; (12978 <hci_cmd_handle+0xa6c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   128d6:	4b2b      	ldr	r3, [pc, #172]	; (12984 <hci_cmd_handle+0xa78>)
	dup_count = DUP_FILTER_DISABLED;
   128d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   128dc:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   128de:	f641 75ff 	movw	r5, #8191	; 0x1fff
   128e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   128e6:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   128ea:	2000      	movs	r0, #0
   128ec:	2100      	movs	r1, #0
   128ee:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   128f2:	201f      	movs	r0, #31
   128f4:	2100      	movs	r1, #0
   128f6:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   128fa:	f001 ff43 	bl	14784 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   128fe:	2101      	movs	r1, #1
   12900:	8838      	ldrh	r0, [r7, #0]
   12902:	f014 fc2b 	bl	2715c <bt_hci_cmd_complete_create>
   12906:	2101      	movs	r1, #1
   12908:	4606      	mov	r6, r0
   1290a:	3008      	adds	r0, #8
   1290c:	f017 f81d 	bl	2994a <net_buf_simple_add>
	conn_count = 0U;
   12910:	4a1d      	ldr	r2, [pc, #116]	; (12988 <hci_cmd_handle+0xa7c>)
	ccst->status = status;
   12912:	2300      	movs	r3, #0
   12914:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   12916:	6013      	str	r3, [r2, #0]
}
   12918:	f7ff bb32 	b.w	11f80 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   1291c:	68ab      	ldr	r3, [r5, #8]
   1291e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   12920:	a90a      	add	r1, sp, #40	; 0x28
   12922:	b2a8      	uxth	r0, r5
   12924:	f003 ffe8 	bl	168f8 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12928:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1292a:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1292c:	8838      	ldrh	r0, [r7, #0]
   1292e:	f014 fc15 	bl	2715c <bt_hci_cmd_complete_create>
   12932:	2105      	movs	r1, #5
   12934:	4603      	mov	r3, r0
   12936:	3008      	adds	r0, #8
   12938:	9308      	str	r3, [sp, #32]
   1293a:	f017 f806 	bl	2994a <net_buf_simple_add>
	rp->status = status;
   1293e:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12940:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12944:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   12948:	9e08      	ldr	r6, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1294a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1294e:	f7ff bb17 	b.w	11f80 <hci_cmd_handle+0x74>
		dup_count = DUP_FILTER_DISABLED;
   12952:	4b0a      	ldr	r3, [pc, #40]	; (1297c <hci_cmd_handle+0xa70>)
   12954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12958:	601a      	str	r2, [r3, #0]
   1295a:	e687      	b.n	1266c <hci_cmd_handle+0x760>
	return bt_hci_cmd_status_create(_opcode, status);
   1295c:	2112      	movs	r1, #18
   1295e:	4660      	mov	r0, ip
   12960:	f014 fc0e 	bl	27180 <bt_hci_cmd_status_create>
   12964:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   12966:	f7ff bb0b 	b.w	11f80 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   1296a:	2111      	movs	r1, #17
   1296c:	4660      	mov	r0, ip
   1296e:	f014 fc07 	bl	27180 <bt_hci_cmd_status_create>
   12972:	4606      	mov	r6, r0
		return;
   12974:	f7ff bb04 	b.w	11f80 <hci_cmd_handle+0x74>
   12978:	20001a28 	.word	0x20001a28
   1297c:	200021bc 	.word	0x200021bc
   12980:	20000158 	.word	0x20000158
   12984:	20000160 	.word	0x20000160
   12988:	200021b8 	.word	0x200021b8

0001298c <hci_acl_handle>:
{
   1298c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   12990:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   12992:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   12994:	2b03      	cmp	r3, #3
{
   12996:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   12998:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1299a:	d947      	bls.n	12a2c <hci_acl_handle+0xa0>
	return net_buf_simple_pull_mem(&buf->b, len);
   1299c:	4605      	mov	r5, r0
   1299e:	4688      	mov	r8, r1
   129a0:	3008      	adds	r0, #8
   129a2:	2104      	movs	r1, #4
   129a4:	f017 f802 	bl	299ac <net_buf_simple_pull_mem>
	if (buf->len < len) {
   129a8:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   129aa:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   129ac:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   129b0:	42b3      	cmp	r3, r6
   129b2:	d34d      	bcc.n	12a50 <hci_acl_handle+0xc4>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   129b4:	2e1b      	cmp	r6, #27
   129b6:	d848      	bhi.n	12a4a <hci_acl_handle+0xbe>
	node_tx = ll_tx_mem_acquire();
   129b8:	f003 fd0c 	bl	163d4 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   129bc:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   129c0:	4604      	mov	r4, r0
   129c2:	2800      	cmp	r0, #0
   129c4:	d047      	beq.n	12a56 <hci_acl_handle+0xca>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   129c6:	08bb      	lsrs	r3, r7, #2
   129c8:	d102      	bne.n	129d0 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   129ca:	b34f      	cbz	r7, 12a20 <hci_acl_handle+0x94>
   129cc:	2f01      	cmp	r7, #1
   129ce:	d004      	beq.n	129da <hci_acl_handle+0x4e>
		return -EINVAL;
   129d0:	f06f 0015 	mvn.w	r0, #21
}
   129d4:	b009      	add	sp, #36	; 0x24
   129d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   129da:	7903      	ldrb	r3, [r0, #4]
   129dc:	f367 0301 	bfi	r3, r7, #0, #2
   129e0:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   129e2:	7166      	strb	r6, [r4, #5]
   129e4:	68a9      	ldr	r1, [r5, #8]
   129e6:	4632      	mov	r2, r6
   129e8:	1de0      	adds	r0, r4, #7
   129ea:	f018 f836 	bl	2aa5a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   129ee:	4621      	mov	r1, r4
   129f0:	f3c9 000b 	ubfx	r0, r9, #0, #12
   129f4:	f003 fcfa 	bl	163ec <ll_tx_mem_enqueue>
   129f8:	2800      	cmp	r0, #0
   129fa:	d0eb      	beq.n	129d4 <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   129fc:	2302      	movs	r3, #2
   129fe:	4a2d      	ldr	r2, [pc, #180]	; (12ab4 <hci_acl_handle+0x128>)
   12a00:	9206      	str	r2, [sp, #24]
   12a02:	9301      	str	r3, [sp, #4]
   12a04:	9305      	str	r3, [sp, #20]
   12a06:	482c      	ldr	r0, [pc, #176]	; (12ab8 <hci_acl_handle+0x12c>)
   12a08:	2300      	movs	r3, #0
   12a0a:	aa05      	add	r2, sp, #20
   12a0c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a10:	f012 ffd1 	bl	259b6 <z_impl_z_log_msg2_static_create>
		ll_tx_mem_release(node_tx);
   12a14:	4620      	mov	r0, r4
   12a16:	f003 fce3 	bl	163e0 <ll_tx_mem_release>
		return -EINVAL;
   12a1a:	f06f 0015 	mvn.w	r0, #21
   12a1e:	e7d9      	b.n	129d4 <hci_acl_handle+0x48>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12a20:	7903      	ldrb	r3, [r0, #4]
   12a22:	2202      	movs	r2, #2
   12a24:	f362 0301 	bfi	r3, r2, #0, #2
   12a28:	7103      	strb	r3, [r0, #4]
		break;
   12a2a:	e7da      	b.n	129e2 <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   12a2c:	4a23      	ldr	r2, [pc, #140]	; (12abc <hci_acl_handle+0x130>)
   12a2e:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI ACL packet length");
   12a30:	9206      	str	r2, [sp, #24]
   12a32:	9301      	str	r3, [sp, #4]
   12a34:	9305      	str	r3, [sp, #20]
   12a36:	4820      	ldr	r0, [pc, #128]	; (12ab8 <hci_acl_handle+0x12c>)
   12a38:	4623      	mov	r3, r4
   12a3a:	aa05      	add	r2, sp, #20
   12a3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a40:	f012 ffb9 	bl	259b6 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   12a44:	f06f 0015 	mvn.w	r0, #21
   12a48:	e7c4      	b.n	129d4 <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   12a4a:	4a1d      	ldr	r2, [pc, #116]	; (12ac0 <hci_acl_handle+0x134>)
   12a4c:	2302      	movs	r3, #2
   12a4e:	e7ef      	b.n	12a30 <hci_acl_handle+0xa4>
		BT_ERR("Invalid HCI ACL packet length");
   12a50:	4a1c      	ldr	r2, [pc, #112]	; (12ac4 <hci_acl_handle+0x138>)
   12a52:	2302      	movs	r3, #2
   12a54:	e7ec      	b.n	12a30 <hci_acl_handle+0xa4>
		BT_ERR("Tx Buffer Overflow");
   12a56:	2502      	movs	r5, #2
   12a58:	4b1b      	ldr	r3, [pc, #108]	; (12ac8 <hci_acl_handle+0x13c>)
   12a5a:	9306      	str	r3, [sp, #24]
   12a5c:	9501      	str	r5, [sp, #4]
   12a5e:	9505      	str	r5, [sp, #20]
   12a60:	4815      	ldr	r0, [pc, #84]	; (12ab8 <hci_acl_handle+0x12c>)
   12a62:	4623      	mov	r3, r4
   12a64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12a68:	aa05      	add	r2, sp, #20
   12a6a:	f012 ffa4 	bl	259b6 <z_impl_z_log_msg2_static_create>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12a6e:	4b17      	ldr	r3, [pc, #92]	; (12acc <hci_acl_handle+0x140>)
   12a70:	681b      	ldr	r3, [r3, #0]
   12a72:	019b      	lsls	r3, r3, #6
   12a74:	d402      	bmi.n	12a7c <hci_acl_handle+0xf0>
		return -ENOBUFS;
   12a76:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12a7a:	e7ab      	b.n	129d4 <hci_acl_handle+0x48>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12a7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a84:	2001      	movs	r0, #1
   12a86:	f7f4 ffe3 	bl	7a50 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   12a8a:	4629      	mov	r1, r5
   12a8c:	f8c8 0000 	str.w	r0, [r8]
   12a90:	3008      	adds	r0, #8
   12a92:	f016 ff5a 	bl	2994a <net_buf_simple_add>
	hdr->len = len;
   12a96:	2401      	movs	r4, #1
	hdr->evt = evt;
   12a98:	221a      	movs	r2, #26
   12a9a:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12a9c:	7044      	strb	r4, [r0, #1]
   12a9e:	f8d8 0000 	ldr.w	r0, [r8]
   12aa2:	4621      	mov	r1, r4
   12aa4:	3008      	adds	r0, #8
   12aa6:	f016 ff50 	bl	2994a <net_buf_simple_add>
   12aaa:	4603      	mov	r3, r0
		return -ENOBUFS;
   12aac:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12ab0:	701c      	strb	r4, [r3, #0]
   12ab2:	e78f      	b.n	129d4 <hci_acl_handle+0x48>
   12ab4:	0002c190 	.word	0x0002c190
   12ab8:	0002b604 	.word	0x0002b604
   12abc:	0002c12c 	.word	0x0002c12c
   12ac0:	0002c160 	.word	0x0002c160
   12ac4:	0002c140 	.word	0x0002c140
   12ac8:	0002c17c 	.word	0x0002c17c
   12acc:	20000158 	.word	0x20000158

00012ad0 <hci_disconn_complete_encode>:
{
   12ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12ad2:	4b0e      	ldr	r3, [pc, #56]	; (12b0c <hci_disconn_complete_encode+0x3c>)
   12ad4:	681b      	ldr	r3, [r3, #0]
   12ad6:	06db      	lsls	r3, r3, #27
   12ad8:	d400      	bmi.n	12adc <hci_disconn_complete_encode+0xc>
}
   12ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12adc:	f102 0408 	add.w	r4, r2, #8
   12ae0:	4605      	mov	r5, r0
   12ae2:	460e      	mov	r6, r1
   12ae4:	4620      	mov	r0, r4
   12ae6:	2102      	movs	r1, #2
   12ae8:	f016 ff2f 	bl	2994a <net_buf_simple_add>
   12aec:	4603      	mov	r3, r0
	hdr->len = len;
   12aee:	2104      	movs	r1, #4
	hdr->evt = evt;
   12af0:	2205      	movs	r2, #5
	hdr->len = len;
   12af2:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   12af4:	701a      	strb	r2, [r3, #0]
   12af6:	4620      	mov	r0, r4
   12af8:	f016 ff27 	bl	2994a <net_buf_simple_add>
   12afc:	2700      	movs	r7, #0
	ep->status = 0x00;
   12afe:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12b00:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12b04:	782b      	ldrb	r3, [r5, #0]
   12b06:	70c3      	strb	r3, [r0, #3]
}
   12b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b0a:	bf00      	nop
   12b0c:	20000158 	.word	0x20000158

00012b10 <hci_disconn_complete_process>:
	conn_count--;
   12b10:	4a02      	ldr	r2, [pc, #8]	; (12b1c <hci_disconn_complete_process+0xc>)
   12b12:	6813      	ldr	r3, [r2, #0]
   12b14:	3b01      	subs	r3, #1
   12b16:	6013      	str	r3, [r2, #0]
}
   12b18:	4770      	bx	lr
   12b1a:	bf00      	nop
   12b1c:	200021b8 	.word	0x200021b8

00012b20 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   12b20:	7f03      	ldrb	r3, [r0, #28]
   12b22:	f003 0303 	and.w	r3, r3, #3
   12b26:	3b01      	subs	r3, #1
   12b28:	2b01      	cmp	r3, #1
{
   12b2a:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12b2c:	d90d      	bls.n	12b4a <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   12b2e:	4a16      	ldr	r2, [pc, #88]	; (12b88 <hci_acl_encode+0x68>)
   12b30:	4916      	ldr	r1, [pc, #88]	; (12b8c <hci_acl_encode+0x6c>)
   12b32:	4817      	ldr	r0, [pc, #92]	; (12b90 <hci_acl_encode+0x70>)
   12b34:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   12b38:	f012 f9e5 	bl	24f06 <printk>
   12b3c:	4040      	eors	r0, r0
   12b3e:	f380 8811 	msr	BASEPRI, r0
   12b42:	f04f 0003 	mov.w	r0, #3
   12b46:	df02      	svc	2
		break;
	}
}
   12b48:	bd70      	pop	{r4, r5, r6, pc}
   12b4a:	4604      	mov	r4, r0
   12b4c:	f101 0508 	add.w	r5, r1, #8
   12b50:	4628      	mov	r0, r5
   12b52:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   12b54:	88e6      	ldrh	r6, [r4, #6]
   12b56:	f016 fef8 	bl	2994a <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   12b5a:	7f23      	ldrb	r3, [r4, #28]
   12b5c:	f003 0303 	and.w	r3, r3, #3
   12b60:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12b62:	bf0c      	ite	eq
   12b64:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12b68:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   12b6c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   12b6e:	7f61      	ldrb	r1, [r4, #29]
   12b70:	8041      	strh	r1, [r0, #2]
   12b72:	4628      	mov	r0, r5
   12b74:	f016 fee9 	bl	2994a <net_buf_simple_add>
   12b78:	7f62      	ldrb	r2, [r4, #29]
   12b7a:	f104 011f 	add.w	r1, r4, #31
}
   12b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   12b82:	f017 bf6a 	b.w	2aa5a <memcpy>
   12b86:	bf00      	nop
   12b88:	0002c1a4 	.word	0x0002c1a4
   12b8c:	0002c074 	.word	0x0002c074
   12b90:	0002bfdc 	.word	0x0002bfdc

00012b94 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b98:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12b9a:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   12b9e:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12ba0:	f1bc 0f03 	cmp.w	ip, #3
{
   12ba4:	af04      	add	r7, sp, #16
   12ba6:	4604      	mov	r4, r0
   12ba8:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   12baa:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12bae:	d01e      	beq.n	12bee <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
   12bb0:	f1ac 0c05 	sub.w	ip, ip, #5
   12bb4:	f1bc 0f17 	cmp.w	ip, #23
   12bb8:	d833      	bhi.n	12c22 <hci_evt_encode+0x8e>
   12bba:	e8df f01c 	tbh	[pc, ip, lsl #1]
   12bbe:	0043      	.short	0x0043
   12bc0:	00320032 	.word	0x00320032
   12bc4:	00320032 	.word	0x00320032
   12bc8:	00320032 	.word	0x00320032
   12bcc:	00320032 	.word	0x00320032
   12bd0:	00320032 	.word	0x00320032
   12bd4:	00320032 	.word	0x00320032
   12bd8:	00320032 	.word	0x00320032
   12bdc:	00320032 	.word	0x00320032
   12be0:	012d00c6 	.word	0x012d00c6
   12be4:	01630133 	.word	0x01630133
   12be8:	018d017a 	.word	0x018d017a
   12bec:	01c1      	.short	0x01c1
	switch (pdu_data->llctrl.opcode) {
   12bee:	7fc3      	ldrb	r3, [r0, #31]
   12bf0:	3b03      	subs	r3, #3
   12bf2:	2b12      	cmp	r3, #18
   12bf4:	f200 81d8 	bhi.w	12fa8 <hci_evt_encode+0x414>
   12bf8:	e8df f013 	tbh	[pc, r3, lsl #1]
   12bfc:	01d60239 	.word	0x01d60239
   12c00:	026101d6 	.word	0x026101d6
   12c04:	01d6027a 	.word	0x01d6027a
   12c08:	01d6028e 	.word	0x01d6028e
   12c0c:	01d601d6 	.word	0x01d601d6
   12c10:	01d602c3 	.word	0x01d602c3
   12c14:	01d60295 	.word	0x01d60295
   12c18:	01d602ba 	.word	0x01d602ba
   12c1c:	01e401d6 	.word	0x01e401d6
   12c20:	01e4      	.short	0x01e4
		LL_ASSERT(0);
   12c22:	4abe      	ldr	r2, [pc, #760]	; (12f1c <hci_evt_encode+0x388>)
   12c24:	49be      	ldr	r1, [pc, #760]	; (12f20 <hci_evt_encode+0x38c>)
   12c26:	48bf      	ldr	r0, [pc, #764]	; (12f24 <hci_evt_encode+0x390>)
   12c28:	f641 43af 	movw	r3, #7343	; 0x1caf
   12c2c:	f012 f96b 	bl	24f06 <printk>
   12c30:	4040      	eors	r0, r0
   12c32:	f380 8811 	msr	BASEPRI, r0
   12c36:	f04f 0003 	mov.w	r0, #3
   12c3a:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   12c3c:	372c      	adds	r7, #44	; 0x2c
   12c3e:	46bd      	mov	sp, r7
   12c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c44:	4ab8      	ldr	r2, [pc, #736]	; (12f28 <hci_evt_encode+0x394>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c46:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   12c48:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   12c4a:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c4e:	e892 0003 	ldmia.w	r2, {r0, r1}
   12c52:	0c0a      	lsrs	r2, r1, #16
   12c54:	75ba      	strb	r2, [r7, #22]
	if (adv->tx_addr) {
   12c56:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c58:	6138      	str	r0, [r7, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c5a:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   12c5c:	0652      	lsls	r2, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   12c5e:	82b9      	strh	r1, [r7, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   12c60:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   12c64:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   12c68:	f100 82bd 	bmi.w	131e6 <hci_evt_encode+0x652>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12c6c:	4baf      	ldr	r3, [pc, #700]	; (12f2c <hci_evt_encode+0x398>)
   12c6e:	685b      	ldr	r3, [r3, #4]
   12c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   12c74:	2e00      	cmp	r6, #0
   12c76:	f040 82ff 	bne.w	13278 <hci_evt_encode+0x6e4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	d0de      	beq.n	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   12c7e:	4bac      	ldr	r3, [pc, #688]	; (12f30 <hci_evt_encode+0x39c>)
   12c80:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12c82:	079e      	lsls	r6, r3, #30
   12c84:	d5da      	bpl.n	12c3c <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   12c86:	4bab      	ldr	r3, [pc, #684]	; (12f34 <hci_evt_encode+0x3a0>)
   12c88:	681b      	ldr	r3, [r3, #0]
   12c8a:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   12c8c:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   12c90:	db09      	blt.n	12ca6 <hci_evt_encode+0x112>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   12c92:	7f20      	ldrb	r0, [r4, #28]
   12c94:	465a      	mov	r2, fp
   12c96:	f3c0 1180 	ubfx	r1, r0, #6, #1
   12c9a:	f000 000f 	and.w	r0, r0, #15
   12c9e:	f7fe ffbb 	bl	11c18 <dup_found.part.0>
	if (dup_scan &&
   12ca2:	2800      	cmp	r0, #0
   12ca4:	d1ca      	bne.n	12c3c <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   12ca6:	7f23      	ldrb	r3, [r4, #28]
   12ca8:	f003 030f 	and.w	r3, r3, #15
   12cac:	2b01      	cmp	r3, #1
   12cae:	f000 83a1 	beq.w	133f4 <hci_evt_encode+0x860>
		data_len = (adv->len - BDADDR_SIZE);
   12cb2:	7f62      	ldrb	r2, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   12cb4:	f102 0a06 	add.w	sl, r2, #6
		data_len = (adv->len - BDADDR_SIZE);
   12cb8:	1f93      	subs	r3, r2, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   12cba:	fa5f f18a 	uxtb.w	r1, sl
		data_len = (adv->len - BDADDR_SIZE);
   12cbe:	b2db      	uxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   12cc0:	3205      	adds	r2, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   12cc2:	6039      	str	r1, [r7, #0]
	return net_buf_add(buf, melen);
   12cc4:	fa5f fa82 	uxtb.w	sl, r2
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12cc8:	461e      	mov	r6, r3
   12cca:	3508      	adds	r5, #8
   12ccc:	2102      	movs	r1, #2
   12cce:	4628      	mov	r0, r5
   12cd0:	607b      	str	r3, [r7, #4]
   12cd2:	f016 fe3a 	bl	2994a <net_buf_simple_add>
	hdr->len = len;
   12cd6:	683b      	ldr	r3, [r7, #0]
   12cd8:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   12cda:	213e      	movs	r1, #62	; 0x3e
   12cdc:	7001      	strb	r1, [r0, #0]
   12cde:	2101      	movs	r1, #1
   12ce0:	4628      	mov	r0, r5
   12ce2:	f016 fe32 	bl	2994a <net_buf_simple_add>
   12ce6:	4684      	mov	ip, r0
	me->subevent = subevt;
   12ce8:	2202      	movs	r2, #2
   12cea:	f88c 2000 	strb.w	r2, [ip]
   12cee:	4651      	mov	r1, sl
   12cf0:	4628      	mov	r0, r5
   12cf2:	f016 fe2a 	bl	2994a <net_buf_simple_add>
	sep->num_reports = 1U;
   12cf6:	2201      	movs	r2, #1
   12cf8:	7002      	strb	r2, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   12cfa:	7f22      	ldrb	r2, [r4, #28]
   12cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
   12d00:	f002 020f 	and.w	r2, r2, #15
   12d04:	441a      	add	r2, r3
   12d06:	4605      	mov	r5, r0
   12d08:	f812 2c18 	ldrb.w	r2, [r2, #-24]
   12d0c:	7042      	strb	r2, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   12d0e:	f008 fba3 	bl	1b458 <ll_rl_size_get>
   12d12:	4581      	cmp	r9, r0
   12d14:	687b      	ldr	r3, [r7, #4]
   12d16:	f0c0 8374 	bcc.w	13402 <hci_evt_encode+0x86e>
		adv_info->addr.type = adv->tx_addr;
   12d1a:	7f22      	ldrb	r2, [r4, #28]
   12d1c:	f3c2 1280 	ubfx	r2, r2, #6, #1
   12d20:	70aa      	strb	r2, [r5, #2]
   12d22:	f8d4 201e 	ldr.w	r2, [r4, #30]
   12d26:	f8c5 2003 	str.w	r2, [r5, #3]
   12d2a:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   12d2e:	f8a5 2007 	strh.w	r2, [r5, #7]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   12d32:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   12d36:	726b      	strb	r3, [r5, #9]
   12d38:	4632      	mov	r2, r6
   12d3a:	f104 0124 	add.w	r1, r4, #36	; 0x24
   12d3e:	4648      	mov	r0, r9
   12d40:	f017 fe8b 	bl	2aa5a <memcpy>
	*prssi = rssi;
   12d44:	f809 8006 	strb.w	r8, [r9, r6]
   12d48:	e778      	b.n	12c3c <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   12d4a:	f018 0f01 	tst.w	r8, #1
   12d4e:	f040 823c 	bne.w	131ca <hci_evt_encode+0x636>
	status = cc->status;
   12d52:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   12d56:	f1b8 0f00 	cmp.w	r8, #0
   12d5a:	f000 822d 	beq.w	131b8 <hci_evt_encode+0x624>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12d5e:	4b73      	ldr	r3, [pc, #460]	; (12f2c <hci_evt_encode+0x398>)
   12d60:	685b      	ldr	r3, [r3, #4]
   12d62:	0098      	lsls	r0, r3, #2
   12d64:	f57f af6a 	bpl.w	12c3c <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12d68:	4b71      	ldr	r3, [pc, #452]	; (12f30 <hci_evt_encode+0x39c>)
   12d6a:	681b      	ldr	r3, [r3, #0]
   12d6c:	f240 2201 	movw	r2, #513	; 0x201
   12d70:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12d72:	f403 7a00 	and.w	sl, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12d76:	f43f af61 	beq.w	12c3c <hci_evt_encode+0xa8>
   12d7a:	3508      	adds	r5, #8
	if (!status) {
   12d7c:	f1b8 0f00 	cmp.w	r8, #0
   12d80:	f040 8243 	bne.w	1320a <hci_evt_encode+0x676>
		conn_count++;
   12d84:	4a6c      	ldr	r2, [pc, #432]	; (12f38 <hci_evt_encode+0x3a4>)
   12d86:	6813      	ldr	r3, [r2, #0]
   12d88:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   12d8a:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   12d8e:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12d90:	f1ba 0f00 	cmp.w	sl, #0
   12d94:	f000 82cf 	beq.w	13336 <hci_evt_encode+0x7a2>
   12d98:	2102      	movs	r1, #2
   12d9a:	4628      	mov	r0, r5
   12d9c:	f016 fdd5 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   12da0:	233e      	movs	r3, #62	; 0x3e
   12da2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12da4:	231f      	movs	r3, #31
   12da6:	7043      	strb	r3, [r0, #1]
   12da8:	2101      	movs	r1, #1
   12daa:	4628      	mov	r0, r5
   12dac:	f016 fdcd 	bl	2994a <net_buf_simple_add>
   12db0:	4603      	mov	r3, r0
	me->subevent = subevt;
   12db2:	220a      	movs	r2, #10
   12db4:	701a      	strb	r2, [r3, #0]
   12db6:	211e      	movs	r1, #30
   12db8:	4628      	mov	r0, r5
   12dba:	f016 fdc6 	bl	2994a <net_buf_simple_add>
		leecc->status = 0x00;
   12dbe:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   12dc2:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   12dc6:	7f63      	ldrb	r3, [r4, #29]
   12dc8:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   12dca:	7fa3      	ldrb	r3, [r4, #30]
   12dcc:	7103      	strb	r3, [r0, #4]
   12dce:	f8d4 301f 	ldr.w	r3, [r4, #31]
   12dd2:	f8c0 3005 	str.w	r3, [r0, #5]
   12dd6:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   12dda:	f8a0 3009 	strh.w	r3, [r0, #9]
   12dde:	f8d4 302b 	ldr.w	r3, [r4, #43]	; 0x2b
   12de2:	f8c0 300b 	str.w	r3, [r0, #11]
   12de6:	f8b4 302f 	ldrh.w	r3, [r4, #47]	; 0x2f
   12dea:	f8a0 300f 	strh.w	r3, [r0, #15]
   12dee:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   12df2:	f8c0 3011 	str.w	r3, [r0, #17]
   12df6:	f8b4 3029 	ldrh.w	r3, [r4, #41]	; 0x29
   12dfa:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12dfe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12e00:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   12e02:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12e04:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12e08:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12e0c:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
   12e10:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12e14:	7743      	strb	r3, [r0, #29]
		return;
   12e16:	e711      	b.n	12c3c <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12e18:	460a      	mov	r2, r1
   12e1a:	4640      	mov	r0, r8
   12e1c:	4631      	mov	r1, r6
   12e1e:	f7ff fe57 	bl	12ad0 <hci_disconn_complete_encode>
		break;
   12e22:	e70b      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e24:	4b41      	ldr	r3, [pc, #260]	; (12f2c <hci_evt_encode+0x398>)
   12e26:	685b      	ldr	r3, [r3, #4]
   12e28:	0099      	lsls	r1, r3, #2
   12e2a:	f57f af07 	bpl.w	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12e2e:	4b40      	ldr	r3, [pc, #256]	; (12f30 <hci_evt_encode+0x39c>)
   12e30:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e32:	075a      	lsls	r2, r3, #29
   12e34:	f57f af02 	bpl.w	12c3c <hci_evt_encode+0xa8>
   12e38:	3508      	adds	r5, #8
   12e3a:	2102      	movs	r1, #2
   12e3c:	4628      	mov	r0, r5
   12e3e:	f016 fd84 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   12e42:	233e      	movs	r3, #62	; 0x3e
   12e44:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12e46:	230a      	movs	r3, #10
   12e48:	7043      	strb	r3, [r0, #1]
   12e4a:	2101      	movs	r1, #1
   12e4c:	4628      	mov	r0, r5
   12e4e:	f016 fd7c 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   12e52:	2303      	movs	r3, #3
   12e54:	7003      	strb	r3, [r0, #0]
   12e56:	2109      	movs	r1, #9
   12e58:	4628      	mov	r0, r5
   12e5a:	f016 fd76 	bl	2994a <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   12e5e:	f018 0f01 	tst.w	r8, #1
   12e62:	4605      	mov	r5, r0
   12e64:	f040 82b8 	bne.w	133d8 <hci_evt_encode+0x844>
	sep->status = cu->status;
   12e68:	7f23      	ldrb	r3, [r4, #28]
   12e6a:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12e6c:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12e6e:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12e70:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12e72:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12e76:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12e7a:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12e7e:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12e82:	e6db      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12e84:	4b29      	ldr	r3, [pc, #164]	; (12f2c <hci_evt_encode+0x398>)
   12e86:	685b      	ldr	r3, [r3, #4]
   12e88:	041b      	lsls	r3, r3, #16
   12e8a:	f04f 0400 	mov.w	r4, #0
   12e8e:	f57f aed5 	bpl.w	12c3c <hci_evt_encode+0xa8>
   12e92:	3508      	adds	r5, #8
   12e94:	2102      	movs	r1, #2
   12e96:	4628      	mov	r0, r5
   12e98:	f016 fd57 	bl	2994a <net_buf_simple_add>
	hdr->len = len;
   12e9c:	2103      	movs	r1, #3
	hdr->evt = evt;
   12e9e:	2330      	movs	r3, #48	; 0x30
   12ea0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12ea2:	7041      	strb	r1, [r0, #1]
   12ea4:	4628      	mov	r0, r5
   12ea6:	f016 fd50 	bl	2994a <net_buf_simple_add>
	ep->status = 0x00;
   12eaa:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12eac:	f8a0 6001 	strh.w	r6, [r0, #1]
   12eb0:	e6c4      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   12eb2:	4b22      	ldr	r3, [pc, #136]	; (12f3c <hci_evt_encode+0x3a8>)
   12eb4:	681b      	ldr	r3, [r3, #0]
   12eb6:	021c      	lsls	r4, r3, #8
   12eb8:	f57f aec0 	bpl.w	12c3c <hci_evt_encode+0xa8>
   12ebc:	3508      	adds	r5, #8
   12ebe:	2102      	movs	r1, #2
   12ec0:	4628      	mov	r0, r5
   12ec2:	f016 fd42 	bl	2994a <net_buf_simple_add>
	hdr->len = len;
   12ec6:	2102      	movs	r1, #2
	hdr->evt = evt;
   12ec8:	2357      	movs	r3, #87	; 0x57
   12eca:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12ecc:	7041      	strb	r1, [r0, #1]
   12ece:	4628      	mov	r0, r5
   12ed0:	f016 fd3b 	bl	2994a <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   12ed4:	8006      	strh	r6, [r0, #0]
   12ed6:	e6b1      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ed8:	4b14      	ldr	r3, [pc, #80]	; (12f2c <hci_evt_encode+0x398>)
   12eda:	685b      	ldr	r3, [r3, #4]
   12edc:	0098      	lsls	r0, r3, #2
   12ede:	f57f aead 	bpl.w	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   12ee2:	4b13      	ldr	r3, [pc, #76]	; (12f30 <hci_evt_encode+0x39c>)
   12ee4:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12ee6:	0319      	lsls	r1, r3, #12
   12ee8:	f57f aea8 	bpl.w	12c3c <hci_evt_encode+0xa8>
   12eec:	3508      	adds	r5, #8
   12eee:	2102      	movs	r1, #2
   12ef0:	4628      	mov	r0, r5
   12ef2:	f016 fd2a 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   12ef6:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   12ef8:	2304      	movs	r3, #4
	hdr->evt = evt;
   12efa:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12efc:	7043      	strb	r3, [r0, #1]
   12efe:	2101      	movs	r1, #1
   12f00:	4628      	mov	r0, r5
   12f02:	f016 fd22 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   12f06:	2314      	movs	r3, #20
   12f08:	7003      	strb	r3, [r0, #0]
   12f0a:	2103      	movs	r1, #3
   12f0c:	4628      	mov	r0, r5
   12f0e:	f016 fd1c 	bl	2994a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   12f12:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   12f14:	7f23      	ldrb	r3, [r4, #28]
   12f16:	7083      	strb	r3, [r0, #2]
   12f18:	e690      	b.n	12c3c <hci_evt_encode+0xa8>
   12f1a:	bf00      	nop
   12f1c:	0002c1a4 	.word	0x0002c1a4
   12f20:	0002c074 	.word	0x0002c074
   12f24:	0002bfdc 	.word	0x0002bfdc
   12f28:	0002b7f4 	.word	0x0002b7f4
   12f2c:	20000158 	.word	0x20000158
   12f30:	20000160 	.word	0x20000160
   12f34:	200021bc 	.word	0x200021bc
   12f38:	200021b8 	.word	0x200021b8
   12f3c:	20001a28 	.word	0x20001a28
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f40:	4bc3      	ldr	r3, [pc, #780]	; (13250 <hci_evt_encode+0x6bc>)
   12f42:	685b      	ldr	r3, [r3, #4]
   12f44:	009a      	lsls	r2, r3, #2
   12f46:	d503      	bpl.n	12f50 <hci_evt_encode+0x3bc>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   12f48:	4bc2      	ldr	r3, [pc, #776]	; (13254 <hci_evt_encode+0x6c0>)
   12f4a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f4c:	051b      	lsls	r3, r3, #20
   12f4e:	d460      	bmi.n	13012 <hci_evt_encode+0x47e>
   12f50:	7f62      	ldrb	r2, [r4, #29]
   12f52:	7fa3      	ldrb	r3, [r4, #30]
   12f54:	2a00      	cmp	r2, #0
   12f56:	fa92 f2a2 	rbit	r2, r2
   12f5a:	fab2 f282 	clz	r2, r2
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   12f5e:	466d      	mov	r5, sp
   12f60:	bf08      	it	eq
   12f62:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   12f66:	b08a      	sub	sp, #40	; 0x28
   12f68:	2b00      	cmp	r3, #0
   12f6a:	f102 0101 	add.w	r1, r2, #1
   12f6e:	a804      	add	r0, sp, #16
   12f70:	4ab9      	ldr	r2, [pc, #740]	; (13258 <hci_evt_encode+0x6c4>)
   12f72:	9609      	str	r6, [sp, #36]	; 0x24
   12f74:	fa93 f3a3 	rbit	r3, r3
   12f78:	7f26      	ldrb	r6, [r4, #28]
   12f7a:	9208      	str	r2, [sp, #32]
   12f7c:	fab3 f383 	clz	r3, r3
   12f80:	4602      	mov	r2, r0
   12f82:	bf08      	it	eq
   12f84:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   12f88:	2406      	movs	r4, #6
   12f8a:	3301      	adds	r3, #1
   12f8c:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
   12f90:	930c      	str	r3, [sp, #48]	; 0x30
   12f92:	613c      	str	r4, [r7, #16]
   12f94:	f842 4f0c 	str.w	r4, [r2, #12]!
   12f98:	48b0      	ldr	r0, [pc, #704]	; (1325c <hci_evt_encode+0x6c8>)
   12f9a:	2300      	movs	r3, #0
   12f9c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   12fa0:	f012 fd09 	bl	259b6 <z_impl_z_log_msg2_static_create>
   12fa4:	46ad      	mov	sp, r5
		return;
   12fa6:	e649      	b.n	12c3c <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   12fa8:	4aad      	ldr	r2, [pc, #692]	; (13260 <hci_evt_encode+0x6cc>)
   12faa:	49ae      	ldr	r1, [pc, #696]	; (13264 <hci_evt_encode+0x6d0>)
   12fac:	48ae      	ldr	r0, [pc, #696]	; (13268 <hci_evt_encode+0x6d4>)
   12fae:	f641 538f 	movw	r3, #7567	; 0x1d8f
   12fb2:	f011 ffa8 	bl	24f06 <printk>
   12fb6:	4040      	eors	r0, r0
   12fb8:	f380 8811 	msr	BASEPRI, r0
   12fbc:	f04f 0003 	mov.w	r0, #3
   12fc0:	df02      	svc	2
}
   12fc2:	e63b      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fc4:	4ba2      	ldr	r3, [pc, #648]	; (13250 <hci_evt_encode+0x6bc>)
   12fc6:	685b      	ldr	r3, [r3, #4]
   12fc8:	009a      	lsls	r2, r3, #2
   12fca:	f57f ae37 	bpl.w	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   12fce:	4ba1      	ldr	r3, [pc, #644]	; (13254 <hci_evt_encode+0x6c0>)
   12fd0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fd2:	065b      	lsls	r3, r3, #25
   12fd4:	f57f ae32 	bpl.w	12c3c <hci_evt_encode+0xa8>
   12fd8:	3508      	adds	r5, #8
   12fda:	2102      	movs	r1, #2
   12fdc:	4628      	mov	r0, r5
   12fde:	f016 fcb4 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   12fe2:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   12fe4:	230b      	movs	r3, #11
	hdr->evt = evt;
   12fe6:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12fe8:	7043      	strb	r3, [r0, #1]
   12fea:	2101      	movs	r1, #1
   12fec:	4628      	mov	r0, r5
   12fee:	f016 fcac 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   12ff2:	2307      	movs	r3, #7
   12ff4:	7003      	strb	r3, [r0, #0]
   12ff6:	210a      	movs	r1, #10
   12ff8:	4628      	mov	r0, r5
   12ffa:	f016 fca6 	bl	2994a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   12ffe:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   13000:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13002:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   13004:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13006:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13008:	8c23      	ldrh	r3, [r4, #32]
   1300a:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1300c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1300e:	8103      	strh	r3, [r0, #8]
   13010:	e614      	b.n	12c3c <hci_evt_encode+0xa8>
   13012:	3508      	adds	r5, #8
   13014:	2102      	movs	r1, #2
   13016:	4628      	mov	r0, r5
   13018:	f016 fc97 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   1301c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1301e:	2306      	movs	r3, #6
	hdr->evt = evt;
   13020:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13022:	7043      	strb	r3, [r0, #1]
   13024:	2101      	movs	r1, #1
   13026:	4628      	mov	r0, r5
   13028:	f016 fc8f 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   1302c:	230c      	movs	r3, #12
   1302e:	7003      	strb	r3, [r0, #0]
   13030:	2105      	movs	r1, #5
   13032:	4628      	mov	r0, r5
   13034:	f016 fc89 	bl	2994a <net_buf_simple_add>
	sep->status = pu->status;
   13038:	7f23      	ldrb	r3, [r4, #28]
   1303a:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1303c:	f8a0 6001 	strh.w	r6, [r0, #1]
   13040:	7f62      	ldrb	r2, [r4, #29]
   13042:	2a00      	cmp	r2, #0
   13044:	fa92 f3a2 	rbit	r3, r2
   13048:	fab3 f383 	clz	r3, r3
   1304c:	bf08      	it	eq
   1304e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13052:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   13054:	70c3      	strb	r3, [r0, #3]
   13056:	7fa2      	ldrb	r2, [r4, #30]
   13058:	fa92 f3a2 	rbit	r3, r2
   1305c:	2a00      	cmp	r2, #0
   1305e:	fab3 f383 	clz	r3, r3
   13062:	bf08      	it	eq
   13064:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13068:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   1306a:	7103      	strb	r3, [r0, #4]
   1306c:	e5e6      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1306e:	4b78      	ldr	r3, [pc, #480]	; (13250 <hci_evt_encode+0x6bc>)
   13070:	685b      	ldr	r3, [r3, #4]
   13072:	0098      	lsls	r0, r3, #2
   13074:	f57f ade2 	bpl.w	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   13078:	4b76      	ldr	r3, [pc, #472]	; (13254 <hci_evt_encode+0x6c0>)
   1307a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1307c:	06d9      	lsls	r1, r3, #27
   1307e:	f57f addd 	bpl.w	12c3c <hci_evt_encode+0xa8>
   13082:	3508      	adds	r5, #8
   13084:	2102      	movs	r1, #2
   13086:	4628      	mov	r0, r5
   13088:	f016 fc5f 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   1308c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1308e:	230d      	movs	r3, #13
	hdr->evt = evt;
   13090:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13092:	7043      	strb	r3, [r0, #1]
   13094:	2101      	movs	r1, #1
   13096:	4628      	mov	r0, r5
   13098:	f016 fc57 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   1309c:	2305      	movs	r3, #5
   1309e:	7003      	strb	r3, [r0, #0]
   130a0:	210c      	movs	r1, #12
   130a2:	4628      	mov	r0, r5
   130a4:	f016 fc51 	bl	2994a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   130a8:	4603      	mov	r3, r0
   130aa:	f823 6b02 	strh.w	r6, [r3], #2
   130ae:	6a21      	ldr	r1, [r4, #32]
   130b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
   130b2:	f8c0 1002 	str.w	r1, [r0, #2]
   130b6:	605a      	str	r2, [r3, #4]
   130b8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   130ba:	8143      	strh	r3, [r0, #10]
   130bc:	e5be      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   130be:	4b64      	ldr	r3, [pc, #400]	; (13250 <hci_evt_encode+0x6bc>)
   130c0:	681b      	ldr	r3, [r3, #0]
   130c2:	061a      	lsls	r2, r3, #24
   130c4:	f04f 0400 	mov.w	r4, #0
   130c8:	f57f adb8 	bpl.w	12c3c <hci_evt_encode+0xa8>
   130cc:	3508      	adds	r5, #8
   130ce:	2102      	movs	r1, #2
   130d0:	4628      	mov	r0, r5
   130d2:	f016 fc3a 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   130d6:	2308      	movs	r3, #8
	hdr->len = len;
   130d8:	2104      	movs	r1, #4
	hdr->evt = evt;
   130da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   130dc:	7041      	strb	r1, [r0, #1]
   130de:	4628      	mov	r0, r5
   130e0:	f016 fc33 	bl	2994a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   130e4:	2301      	movs	r3, #1
	ep->status = err;
   130e6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   130e8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   130ec:	70c3      	strb	r3, [r0, #3]
   130ee:	e5a5      	b.n	12c3c <hci_evt_encode+0xa8>
		le_unknown_rsp(pdu_data, handle, buf);
   130f0:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   130f4:	2b0e      	cmp	r3, #14
   130f6:	f000 8150 	beq.w	1339a <hci_evt_encode+0x806>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   130fa:	495c      	ldr	r1, [pc, #368]	; (1326c <hci_evt_encode+0x6d8>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   130fc:	e9c7 1308 	strd	r1, r3, [r7, #32]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13100:	2203      	movs	r2, #3
   13102:	60fa      	str	r2, [r7, #12]
   13104:	61fa      	str	r2, [r7, #28]
   13106:	4855      	ldr	r0, [pc, #340]	; (1325c <hci_evt_encode+0x6c8>)
   13108:	2300      	movs	r3, #0
   1310a:	f107 021c 	add.w	r2, r7, #28
   1310e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13112:	f012 fc50 	bl	259b6 <z_impl_z_log_msg2_static_create>
}
   13116:	e591      	b.n	12c3c <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   13118:	460b      	mov	r3, r1
   1311a:	4632      	mov	r2, r6
   1311c:	4641      	mov	r1, r8
   1311e:	2000      	movs	r0, #0
   13120:	f7fe fde8 	bl	11cf4 <le_remote_feat_complete>
		break;
   13124:	e58a      	b.n	12c3c <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13126:	4b4a      	ldr	r3, [pc, #296]	; (13250 <hci_evt_encode+0x6bc>)
   13128:	685b      	ldr	r3, [r3, #4]
   1312a:	0098      	lsls	r0, r3, #2
   1312c:	d563      	bpl.n	131f6 <hci_evt_encode+0x662>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1312e:	4b49      	ldr	r3, [pc, #292]	; (13254 <hci_evt_encode+0x6c0>)
   13130:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13132:	0699      	lsls	r1, r3, #26
   13134:	d55f      	bpl.n	131f6 <hci_evt_encode+0x662>
   13136:	3508      	adds	r5, #8
   13138:	2102      	movs	r1, #2
   1313a:	4628      	mov	r0, r5
   1313c:	f016 fc05 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   13140:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13142:	230b      	movs	r3, #11
	hdr->evt = evt;
   13144:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13146:	7043      	strb	r3, [r0, #1]
   13148:	2101      	movs	r1, #1
   1314a:	4628      	mov	r0, r5
   1314c:	f016 fbfd 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   13150:	2306      	movs	r3, #6
   13152:	7003      	strb	r3, [r0, #0]
   13154:	210a      	movs	r1, #10
   13156:	4628      	mov	r0, r5
   13158:	f016 fbf7 	bl	2994a <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1315c:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1315e:	8c23      	ldrh	r3, [r4, #32]
   13160:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   13162:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13164:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   13166:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13168:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1316a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1316c:	8103      	strh	r3, [r0, #8]
   1316e:	e565      	b.n	12c3c <hci_evt_encode+0xa8>
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   13170:	f890 2020 	ldrb.w	r2, [r0, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   13174:	493e      	ldr	r1, [pc, #248]	; (13270 <hci_evt_encode+0x6dc>)
   13176:	2303      	movs	r3, #3
   13178:	e9c7 1208 	strd	r1, r2, [r7, #32]
   1317c:	60fb      	str	r3, [r7, #12]
   1317e:	61fb      	str	r3, [r7, #28]
   13180:	e7c1      	b.n	13106 <hci_evt_encode+0x572>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   13182:	4b33      	ldr	r3, [pc, #204]	; (13250 <hci_evt_encode+0x6bc>)
   13184:	681b      	ldr	r3, [r3, #0]
   13186:	061b      	lsls	r3, r3, #24
   13188:	f57f ad58 	bpl.w	12c3c <hci_evt_encode+0xa8>
   1318c:	3508      	adds	r5, #8
   1318e:	2102      	movs	r1, #2
   13190:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   13192:	f894 4020 	ldrb.w	r4, [r4, #32]
   13196:	f016 fbd8 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   1319a:	2308      	movs	r3, #8
	hdr->len = len;
   1319c:	2104      	movs	r1, #4
	hdr->evt = evt;
   1319e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   131a0:	7041      	strb	r1, [r0, #1]
   131a2:	4628      	mov	r0, r5
   131a4:	f016 fbd1 	bl	2994a <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   131a8:	fab4 f384 	clz	r3, r4
   131ac:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   131ae:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   131b0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   131b4:	70c3      	strb	r3, [r0, #3]
   131b6:	e541      	b.n	12c3c <hci_evt_encode+0xa8>
		ll_rl_crpa_set(cc->peer_addr_type,
   131b8:	7fa0      	ldrb	r0, [r4, #30]
   131ba:	f104 0325 	add.w	r3, r4, #37	; 0x25
   131be:	22ff      	movs	r2, #255	; 0xff
   131c0:	f104 011f 	add.w	r1, r4, #31
   131c4:	f008 fa3a 	bl	1b63c <ll_rl_crpa_set>
   131c8:	e5c9      	b.n	12d5e <hci_evt_encode+0x1ca>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   131ca:	4a25      	ldr	r2, [pc, #148]	; (13260 <hci_evt_encode+0x6cc>)
   131cc:	4929      	ldr	r1, [pc, #164]	; (13274 <hci_evt_encode+0x6e0>)
   131ce:	4826      	ldr	r0, [pc, #152]	; (13268 <hci_evt_encode+0x6d4>)
   131d0:	f641 23f5 	movw	r3, #6901	; 0x1af5
   131d4:	f011 fe97 	bl	24f06 <printk>
   131d8:	4040      	eors	r0, r0
   131da:	f380 8811 	msr	BASEPRI, r0
   131de:	f04f 0003 	mov.w	r0, #3
   131e2:	df02      	svc	2
   131e4:	e5b5      	b.n	12d52 <hci_evt_encode+0x1be>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   131e6:	2100      	movs	r1, #0
   131e8:	f104 031e 	add.w	r3, r4, #30
   131ec:	464a      	mov	r2, r9
   131ee:	4608      	mov	r0, r1
   131f0:	f008 fa24 	bl	1b63c <ll_rl_crpa_set>
   131f4:	e53a      	b.n	12c6c <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   131f6:	2300      	movs	r3, #0
   131f8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   131fc:	9300      	str	r3, [sp, #0]
   131fe:	221a      	movs	r2, #26
   13200:	2102      	movs	r1, #2
   13202:	4630      	mov	r0, r6
   13204:	f003 f93e 	bl	16484 <ll_conn_update>
		return;
   13208:	e518      	b.n	12c3c <hci_evt_encode+0xa8>
   1320a:	2102      	movs	r1, #2
   1320c:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1320e:	f1ba 0f00 	cmp.w	sl, #0
   13212:	f040 80c9 	bne.w	133a8 <hci_evt_encode+0x814>
   13216:	f016 fb98 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   1321a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1321c:	2313      	movs	r3, #19
	hdr->evt = evt;
   1321e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13220:	7043      	strb	r3, [r0, #1]
   13222:	2101      	movs	r1, #1
   13224:	4628      	mov	r0, r5
   13226:	f016 fb90 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   1322a:	2301      	movs	r3, #1
   1322c:	7003      	strb	r3, [r0, #0]
   1322e:	2112      	movs	r1, #18
   13230:	4628      	mov	r0, r5
   13232:	f016 fb8a 	bl	2994a <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13236:	f8c0 a000 	str.w	sl, [r0]
   1323a:	f8c0 a004 	str.w	sl, [r0, #4]
   1323e:	f8c0 a008 	str.w	sl, [r0, #8]
   13242:	f8c0 a00c 	str.w	sl, [r0, #12]
   13246:	f8a0 a010 	strh.w	sl, [r0, #16]
		lecc->status = status;
   1324a:	f880 8000 	strb.w	r8, [r0]
		return;
   1324e:	e4f5      	b.n	12c3c <hci_evt_encode+0xa8>
   13250:	20000158 	.word	0x20000158
   13254:	20000160 	.word	0x20000160
   13258:	0002c280 	.word	0x0002c280
   1325c:	0002b604 	.word	0x0002b604
   13260:	0002c1a4 	.word	0x0002c1a4
   13264:	0002c074 	.word	0x0002c074
   13268:	0002bfdc 	.word	0x0002bfdc
   1326c:	0002c2ac 	.word	0x0002c2ac
   13270:	0002c2bc 	.word	0x0002c2bc
   13274:	0002c208 	.word	0x0002c208
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13278:	2b00      	cmp	r3, #0
   1327a:	f43f acdf 	beq.w	12c3c <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   1327e:	4b6a      	ldr	r3, [pc, #424]	; (13428 <hci_evt_encode+0x894>)
   13280:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13282:	055b      	lsls	r3, r3, #21
   13284:	f57f acda 	bpl.w	12c3c <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   13288:	7f23      	ldrb	r3, [r4, #28]
   1328a:	f003 030f 	and.w	r3, r3, #15
   1328e:	2b01      	cmp	r3, #1
   13290:	d00c      	beq.n	132ac <hci_evt_encode+0x718>
   13292:	4a66      	ldr	r2, [pc, #408]	; (1342c <hci_evt_encode+0x898>)
   13294:	4966      	ldr	r1, [pc, #408]	; (13430 <hci_evt_encode+0x89c>)
   13296:	4867      	ldr	r0, [pc, #412]	; (13434 <hci_evt_encode+0x8a0>)
   13298:	f241 435a 	movw	r3, #5210	; 0x145a
   1329c:	f011 fe33 	bl	24f06 <printk>
   132a0:	4040      	eors	r0, r0
   132a2:	f380 8811 	msr	BASEPRI, r0
   132a6:	f04f 0003 	mov.w	r0, #3
   132aa:	df02      	svc	2
	if (dup_count >= 0) {
   132ac:	4b62      	ldr	r3, [pc, #392]	; (13438 <hci_evt_encode+0x8a4>)
   132ae:	681b      	ldr	r3, [r3, #0]
   132b0:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   132b2:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   132b6:	db0a      	blt.n	132ce <hci_evt_encode+0x73a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   132b8:	7f20      	ldrb	r0, [r4, #28]
   132ba:	4632      	mov	r2, r6
   132bc:	f3c0 1180 	ubfx	r1, r0, #6, #1
   132c0:	f000 000f 	and.w	r0, r0, #15
   132c4:	f7fe fca8 	bl	11c18 <dup_found.part.0>
	if (dup_scan &&
   132c8:	2800      	cmp	r0, #0
   132ca:	f47f acb7 	bne.w	12c3c <hci_evt_encode+0xa8>
   132ce:	3508      	adds	r5, #8
   132d0:	2102      	movs	r1, #2
   132d2:	4628      	mov	r0, r5
   132d4:	f016 fb39 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   132d8:	233e      	movs	r3, #62	; 0x3e
   132da:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   132dc:	2312      	movs	r3, #18
   132de:	7043      	strb	r3, [r0, #1]
   132e0:	2101      	movs	r1, #1
   132e2:	4628      	mov	r0, r5
   132e4:	f016 fb31 	bl	2994a <net_buf_simple_add>
   132e8:	4603      	mov	r3, r0
	me->subevent = subevt;
   132ea:	220b      	movs	r2, #11
   132ec:	701a      	strb	r2, [r3, #0]
   132ee:	4628      	mov	r0, r5
   132f0:	2111      	movs	r1, #17
   132f2:	f016 fb2a 	bl	2994a <net_buf_simple_add>
	drp->num_reports = 1U;
   132f6:	2301      	movs	r3, #1
   132f8:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   132fa:	7043      	strb	r3, [r0, #1]
   132fc:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   132fe:	f008 f8ab 	bl	1b458 <ll_rl_size_get>
   13302:	4581      	cmp	r9, r0
   13304:	f0c0 8087 	bcc.w	13416 <hci_evt_encode+0x882>
		dir_info->addr.type = adv->tx_addr;
   13308:	7f23      	ldrb	r3, [r4, #28]
   1330a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1330e:	70ab      	strb	r3, [r5, #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13310:	f8d4 301e 	ldr.w	r3, [r4, #30]
   13314:	f8c5 3003 	str.w	r3, [r5, #3]
   13318:	88b3      	ldrh	r3, [r6, #4]
   1331a:	f8a5 3007 	strh.w	r3, [r5, #7]
	dir_info->dir_addr.type = adv->rx_addr;
   1331e:	7f23      	ldrb	r3, [r4, #28]
   13320:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   13324:	726b      	strb	r3, [r5, #9]
   13326:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13328:	f8c5 300a 	str.w	r3, [r5, #10]
   1332c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1332e:	81eb      	strh	r3, [r5, #14]
	dir_info->rssi = rssi;
   13330:	f885 8010 	strb.w	r8, [r5, #16]
   13334:	e482      	b.n	12c3c <hci_evt_encode+0xa8>
   13336:	2102      	movs	r1, #2
   13338:	4628      	mov	r0, r5
   1333a:	f016 fb06 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   1333e:	233e      	movs	r3, #62	; 0x3e
   13340:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13342:	2313      	movs	r3, #19
   13344:	7043      	strb	r3, [r0, #1]
   13346:	2101      	movs	r1, #1
   13348:	4628      	mov	r0, r5
   1334a:	f016 fafe 	bl	2994a <net_buf_simple_add>
   1334e:	4603      	mov	r3, r0
	me->subevent = subevt;
   13350:	2201      	movs	r2, #1
   13352:	701a      	strb	r2, [r3, #0]
   13354:	2112      	movs	r1, #18
   13356:	4628      	mov	r0, r5
   13358:	f016 faf7 	bl	2994a <net_buf_simple_add>
	lecc->status = 0x00;
   1335c:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   13360:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   13364:	7f63      	ldrb	r3, [r4, #29]
   13366:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   13368:	7fa3      	ldrb	r3, [r4, #30]
   1336a:	f003 0301 	and.w	r3, r3, #1
   1336e:	7103      	strb	r3, [r0, #4]
   13370:	f8d4 301f 	ldr.w	r3, [r4, #31]
   13374:	f8c0 3005 	str.w	r3, [r0, #5]
   13378:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1337c:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13380:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   13382:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   13384:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13386:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1338a:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1338e:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
   13392:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13396:	7443      	strb	r3, [r0, #17]
   13398:	e450      	b.n	12c3c <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1339a:	460b      	mov	r3, r1
   1339c:	4632      	mov	r2, r6
   1339e:	2100      	movs	r1, #0
   133a0:	201a      	movs	r0, #26
   133a2:	f7fe fca7 	bl	11cf4 <le_remote_feat_complete>
		break;
   133a6:	e449      	b.n	12c3c <hci_evt_encode+0xa8>
   133a8:	f016 facf 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   133ac:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   133ae:	231f      	movs	r3, #31
	hdr->evt = evt;
   133b0:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   133b2:	7043      	strb	r3, [r0, #1]
   133b4:	2101      	movs	r1, #1
   133b6:	4628      	mov	r0, r5
   133b8:	f016 fac7 	bl	2994a <net_buf_simple_add>
	me->subevent = subevt;
   133bc:	230a      	movs	r3, #10
   133be:	7003      	strb	r3, [r0, #0]
   133c0:	211e      	movs	r1, #30
   133c2:	4628      	mov	r0, r5
   133c4:	f016 fac1 	bl	2994a <net_buf_simple_add>
   133c8:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   133ca:	221e      	movs	r2, #30
   133cc:	2100      	movs	r1, #0
   133ce:	f017 fb65 	bl	2aa9c <memset>
			leecc->status = status;
   133d2:	f884 8000 	strb.w	r8, [r4]
			return;
   133d6:	e431      	b.n	12c3c <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   133d8:	4a14      	ldr	r2, [pc, #80]	; (1342c <hci_evt_encode+0x898>)
   133da:	4918      	ldr	r1, [pc, #96]	; (1343c <hci_evt_encode+0x8a8>)
   133dc:	4815      	ldr	r0, [pc, #84]	; (13434 <hci_evt_encode+0x8a0>)
   133de:	f641 337a 	movw	r3, #7034	; 0x1b7a
   133e2:	f011 fd90 	bl	24f06 <printk>
   133e6:	4040      	eors	r0, r0
   133e8:	f380 8811 	msr	BASEPRI, r0
   133ec:	f04f 0003 	mov.w	r0, #3
   133f0:	df02      	svc	2
   133f2:	e539      	b.n	12e68 <hci_evt_encode+0x2d4>
   133f4:	230c      	movs	r3, #12
   133f6:	2600      	movs	r6, #0
   133f8:	603b      	str	r3, [r7, #0]
   133fa:	f04f 0a0b 	mov.w	sl, #11
		data_len = 0U;
   133fe:	4633      	mov	r3, r6
   13400:	e463      	b.n	12cca <hci_evt_encode+0x136>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   13402:	1cea      	adds	r2, r5, #3
   13404:	4648      	mov	r0, r9
   13406:	1ca9      	adds	r1, r5, #2
   13408:	f007 ffde 	bl	1b3c8 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   1340c:	78aa      	ldrb	r2, [r5, #2]
   1340e:	687b      	ldr	r3, [r7, #4]
   13410:	3202      	adds	r2, #2
   13412:	70aa      	strb	r2, [r5, #2]
   13414:	e48d      	b.n	12d32 <hci_evt_encode+0x19e>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   13416:	1cea      	adds	r2, r5, #3
   13418:	1ca9      	adds	r1, r5, #2
   1341a:	4648      	mov	r0, r9
   1341c:	f007 ffd4 	bl	1b3c8 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   13420:	78ab      	ldrb	r3, [r5, #2]
   13422:	3302      	adds	r3, #2
   13424:	70ab      	strb	r3, [r5, #2]
   13426:	e77a      	b.n	1331e <hci_evt_encode+0x78a>
   13428:	20000160 	.word	0x20000160
   1342c:	0002c1a4 	.word	0x0002c1a4
   13430:	0002c1e0 	.word	0x0002c1e0
   13434:	0002bfdc 	.word	0x0002bfdc
   13438:	200021bc 	.word	0x200021bc
   1343c:	0002c244 	.word	0x0002c244

00013440 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13440:	b570      	push	{r4, r5, r6, lr}
   13442:	f100 0408 	add.w	r4, r0, #8
   13446:	460e      	mov	r6, r1
   13448:	4620      	mov	r0, r4
   1344a:	2102      	movs	r1, #2
   1344c:	4615      	mov	r5, r2
   1344e:	f016 fa7c 	bl	2994a <net_buf_simple_add>
	hdr->evt = evt;
   13452:	2313      	movs	r3, #19
	hdr->len = len;
   13454:	2105      	movs	r1, #5
	hdr->evt = evt;
   13456:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13458:	7041      	strb	r1, [r0, #1]
   1345a:	4620      	mov	r0, r4
   1345c:	f016 fa75 	bl	2994a <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   13460:	2301      	movs	r3, #1
   13462:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   13464:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   13468:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1346c:	bd70      	pop	{r4, r5, r6, pc}
   1346e:	bf00      	nop

00013470 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13470:	7903      	ldrb	r3, [r0, #4]
   13472:	2b03      	cmp	r3, #3
   13474:	d008      	beq.n	13488 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   13476:	3b05      	subs	r3, #5
   13478:	b2db      	uxtb	r3, r3
   1347a:	2b17      	cmp	r3, #23
   1347c:	d901      	bls.n	13482 <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1347e:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   13480:	4770      	bx	lr
   13482:	4a05      	ldr	r2, [pc, #20]	; (13498 <hci_get_class+0x28>)
   13484:	5cd0      	ldrb	r0, [r2, r3]
   13486:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   13488:	7f03      	ldrb	r3, [r0, #28]
   1348a:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   1348e:	2b03      	cmp	r3, #3
   13490:	bf0c      	ite	eq
   13492:	2004      	moveq	r0, #4
   13494:	2005      	movne	r0, #5
   13496:	4770      	bx	lr
   13498:	0002c2e0 	.word	0x0002c2e0

0001349c <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   1349c:	480d      	ldr	r0, [pc, #52]	; (134d4 <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1349e:	4a0e      	ldr	r2, [pc, #56]	; (134d8 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   134a0:	490e      	ldr	r1, [pc, #56]	; (134dc <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   134a2:	4b0f      	ldr	r3, [pc, #60]	; (134e0 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   134a4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   134a6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   134aa:	f641 75ff 	movw	r5, #8191	; 0x1fff
   134ae:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   134b2:	2400      	movs	r4, #0
   134b4:	2500      	movs	r5, #0
   134b6:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   134ba:	4a0a      	ldr	r2, [pc, #40]	; (134e4 <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   134bc:	241f      	movs	r4, #31
   134be:	2500      	movs	r5, #0
   134c0:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   134c4:	2100      	movs	r1, #0
   134c6:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   134c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   134cc:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   134ce:	601a      	str	r2, [r3, #0]
}
   134d0:	4770      	bx	lr
   134d2:	bf00      	nop
   134d4:	20000158 	.word	0x20000158
   134d8:	20001a28 	.word	0x20001a28
   134dc:	20000160 	.word	0x20000160
   134e0:	200021bc 	.word	0x200021bc
   134e4:	200021b8 	.word	0x200021b8

000134e8 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   134e8:	f009 b940 	b.w	1c76c <lll_csrand_get>

000134ec <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   134ec:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   134ee:	2300      	movs	r3, #0
   134f0:	f00b fc84 	bl	1edfc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   134f4:	2000      	movs	r0, #0
   134f6:	bd08      	pop	{r3, pc}

000134f8 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   134f8:	4801      	ldr	r0, [pc, #4]	; (13500 <ll_feat_get+0x8>)
   134fa:	2100      	movs	r1, #0
   134fc:	4770      	bx	lr
   134fe:	bf00      	nop
   13500:	000141ff 	.word	0x000141ff

00013504 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   13504:	b510      	push	{r4, lr}
   13506:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   13508:	f009 f966 	bl	1c7d8 <lll_reset>
	LL_ASSERT(!err);
   1350c:	b970      	cbnz	r0, 1352c <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1350e:	f009 fd75 	bl	1cffc <lll_adv_reset>
	LL_ASSERT(!err);
   13512:	b9e0      	cbnz	r0, 1354e <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   13514:	f00a fcee 	bl	1def4 <lll_scan_reset>
	LL_ASSERT(!err);
   13518:	bb50      	cbnz	r0, 13570 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1351a:	f00a fe23 	bl	1e164 <lll_conn_reset>
	LL_ASSERT(!err);
   1351e:	2800      	cmp	r0, #0
   13520:	d137      	bne.n	13592 <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   13522:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   13524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13528:	f00e bf9e 	b.w	22468 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   1352c:	4a22      	ldr	r2, [pc, #136]	; (135b8 <perform_lll_reset+0xb4>)
   1352e:	4923      	ldr	r1, [pc, #140]	; (135bc <perform_lll_reset+0xb8>)
   13530:	4823      	ldr	r0, [pc, #140]	; (135c0 <perform_lll_reset+0xbc>)
   13532:	f640 0324 	movw	r3, #2084	; 0x824
   13536:	f011 fce6 	bl	24f06 <printk>
   1353a:	4040      	eors	r0, r0
   1353c:	f380 8811 	msr	BASEPRI, r0
   13540:	f04f 0003 	mov.w	r0, #3
   13544:	df02      	svc	2
	err = lll_adv_reset();
   13546:	f009 fd59 	bl	1cffc <lll_adv_reset>
	LL_ASSERT(!err);
   1354a:	2800      	cmp	r0, #0
   1354c:	d0e2      	beq.n	13514 <perform_lll_reset+0x10>
   1354e:	4a1a      	ldr	r2, [pc, #104]	; (135b8 <perform_lll_reset+0xb4>)
   13550:	491a      	ldr	r1, [pc, #104]	; (135bc <perform_lll_reset+0xb8>)
   13552:	481b      	ldr	r0, [pc, #108]	; (135c0 <perform_lll_reset+0xbc>)
   13554:	f640 0329 	movw	r3, #2089	; 0x829
   13558:	f011 fcd5 	bl	24f06 <printk>
   1355c:	4040      	eors	r0, r0
   1355e:	f380 8811 	msr	BASEPRI, r0
   13562:	f04f 0003 	mov.w	r0, #3
   13566:	df02      	svc	2
	err = lll_scan_reset();
   13568:	f00a fcc4 	bl	1def4 <lll_scan_reset>
	LL_ASSERT(!err);
   1356c:	2800      	cmp	r0, #0
   1356e:	d0d4      	beq.n	1351a <perform_lll_reset+0x16>
   13570:	4a11      	ldr	r2, [pc, #68]	; (135b8 <perform_lll_reset+0xb4>)
   13572:	4912      	ldr	r1, [pc, #72]	; (135bc <perform_lll_reset+0xb8>)
   13574:	4812      	ldr	r0, [pc, #72]	; (135c0 <perform_lll_reset+0xbc>)
   13576:	f640 032f 	movw	r3, #2095	; 0x82f
   1357a:	f011 fcc4 	bl	24f06 <printk>
   1357e:	4040      	eors	r0, r0
   13580:	f380 8811 	msr	BASEPRI, r0
   13584:	f04f 0003 	mov.w	r0, #3
   13588:	df02      	svc	2
	err = lll_conn_reset();
   1358a:	f00a fdeb 	bl	1e164 <lll_conn_reset>
	LL_ASSERT(!err);
   1358e:	2800      	cmp	r0, #0
   13590:	d0c7      	beq.n	13522 <perform_lll_reset+0x1e>
   13592:	4a09      	ldr	r2, [pc, #36]	; (135b8 <perform_lll_reset+0xb4>)
   13594:	4909      	ldr	r1, [pc, #36]	; (135bc <perform_lll_reset+0xb8>)
   13596:	480a      	ldr	r0, [pc, #40]	; (135c0 <perform_lll_reset+0xbc>)
   13598:	f640 0335 	movw	r3, #2101	; 0x835
   1359c:	f011 fcb3 	bl	24f06 <printk>
   135a0:	4040      	eors	r0, r0
   135a2:	f380 8811 	msr	BASEPRI, r0
   135a6:	f04f 0003 	mov.w	r0, #3
   135aa:	df02      	svc	2
   135ac:	4620      	mov	r0, r4
}
   135ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   135b2:	f00e bf59 	b.w	22468 <z_impl_k_sem_give>
   135b6:	bf00      	nop
   135b8:	0002c318 	.word	0x0002c318
   135bc:	0002c354 	.word	0x0002c354
   135c0:	0002bfdc 	.word	0x0002bfdc

000135c4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   135c4:	6008      	str	r0, [r1, #0]
   135c6:	4801      	ldr	r0, [pc, #4]	; (135cc <ull_ticker_status_give+0x8>)
   135c8:	f00e bf4e 	b.w	22468 <z_impl_k_sem_give>
   135cc:	2000257c 	.word	0x2000257c

000135d0 <disabled_cb>:
   135d0:	f00e bf4a 	b.w	22468 <z_impl_k_sem_give>

000135d4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   135d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   135d8:	4d2c      	ldr	r5, [pc, #176]	; (1368c <tx_cmplt_get+0xb8>)
{
   135da:	460c      	mov	r4, r1
   135dc:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   135de:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   135e0:	7822      	ldrb	r2, [r4, #0]
   135e2:	782b      	ldrb	r3, [r5, #0]
   135e4:	4291      	cmp	r1, r2
   135e6:	bf9c      	itt	ls
   135e8:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   135ea:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   135ec:	4591      	cmp	r9, r2
{
   135ee:	4682      	mov	sl, r0
   135f0:	d042      	beq.n	13678 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   135f2:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   135f6:	3201      	adds	r2, #1
   135f8:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   135fa:	4f25      	ldr	r7, [pc, #148]	; (13690 <tx_cmplt_get+0xbc>)
		i = 0U;
   135fc:	4291      	cmp	r1, r2
   135fe:	bf08      	it	eq
   13600:	2200      	moveq	r2, #0

	*idx = i;
   13602:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   13604:	5afa      	ldrh	r2, [r7, r3]
   13606:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   13608:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   1360a:	443b      	add	r3, r7
   1360c:	f04f 0b01 	mov.w	fp, #1
   13610:	f04f 0802 	mov.w	r8, #2
   13614:	e021      	b.n	1365a <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   13616:	b362      	cbz	r2, 13672 <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   13618:	7902      	ldrb	r2, [r0, #4]
   1361a:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   1361e:	3a01      	subs	r2, #1
   13620:	2a01      	cmp	r2, #1
   13622:	d92d      	bls.n	13680 <tx_cmplt_get+0xac>
   13624:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   13628:	f002 feda 	bl	163e0 <ll_tx_mem_release>
	if (*idx >= count) {
   1362c:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1362e:	7869      	ldrb	r1, [r5, #1]
   13630:	7828      	ldrb	r0, [r5, #0]
   13632:	4299      	cmp	r1, r3
   13634:	bf9c      	itt	ls
   13636:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   13638:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   1363a:	454b      	cmp	r3, r9
   1363c:	d01d      	beq.n	1367a <tx_cmplt_get+0xa6>
	i = *idx + 1;
   1363e:	1c5a      	adds	r2, r3, #1
   13640:	b2d2      	uxtb	r2, r2
		i = 0U;
   13642:	4291      	cmp	r1, r2
   13644:	bf08      	it	eq
   13646:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   13648:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   1364c:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   1364e:	5af9      	ldrh	r1, [r7, r3]
   13650:	f8ba 2000 	ldrh.w	r2, [sl]
   13654:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   13656:	443b      	add	r3, r7
   13658:	d10f      	bne.n	1367a <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   1365a:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1365c:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   1365e:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   13662:	d8d8      	bhi.n	13616 <tx_cmplt_get+0x42>
			cmplt++;
   13664:	3601      	adds	r6, #1
   13666:	b2f6      	uxtb	r6, r6
   13668:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   1366c:	2a00      	cmp	r2, #0
   1366e:	d0dd      	beq.n	1362c <tx_cmplt_get+0x58>
   13670:	e7da      	b.n	13628 <tx_cmplt_get+0x54>
   13672:	f8c3 8004 	str.w	r8, [r3, #4]
   13676:	e7d9      	b.n	1362c <tx_cmplt_get+0x58>
		return 0;
   13678:	2600      	movs	r6, #0

	return cmplt;
}
   1367a:	4630      	mov	r0, r6
   1367c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13680:	3601      	adds	r6, #1
   13682:	f8c3 b004 	str.w	fp, [r3, #4]
   13686:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   13688:	e7ce      	b.n	13628 <tx_cmplt_get+0x54>
   1368a:	bf00      	nop
   1368c:	200004ac 	.word	0x200004ac
   13690:	200004b0 	.word	0x200004b0

00013694 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   13694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13698:	4e3c      	ldr	r6, [pc, #240]	; (1378c <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   1369a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 13790 <ull_done+0xfc>
   1369e:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 13794 <ull_done+0x100>
{
   136a2:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   136a4:	e9d6 0100 	ldrd	r0, r1, [r6]
   136a8:	aa01      	add	r2, sp, #4
   136aa:	f7fc fd49 	bl	10140 <memq_peek>
		if (link) {
   136ae:	4604      	mov	r4, r0
   136b0:	2800      	cmp	r0, #0
   136b2:	d03e      	beq.n	13732 <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   136b4:	6870      	ldr	r0, [r6, #4]
   136b6:	2200      	movs	r2, #0
   136b8:	4631      	mov	r1, r6
   136ba:	f7fc fd49 	bl	10150 <memq_dequeue>
			rx_demux_event_done(link, done);
   136be:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   136c0:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   136c2:	b135      	cbz	r5, 136d2 <ull_done+0x3e>
	return hdr->ref;
   136c4:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   136c6:	2b00      	cmp	r3, #0
   136c8:	d052      	beq.n	13770 <ull_done+0xdc>
	return hdr->ref--;
   136ca:	782b      	ldrb	r3, [r5, #0]
   136cc:	3b01      	subs	r3, #1
   136ce:	b2db      	uxtb	r3, r3
   136d0:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   136d2:	f897 3020 	ldrb.w	r3, [r7, #32]
   136d6:	b123      	cbz	r3, 136e2 <ull_done+0x4e>
   136d8:	2b01      	cmp	r3, #1
   136da:	d13b      	bne.n	13754 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   136dc:	4638      	mov	r0, r7
   136de:	f006 f9bd 	bl	19a5c <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   136e2:	4a2d      	ldr	r2, [pc, #180]	; (13798 <ull_done+0x104>)
	last = last + 1;
   136e4:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   136e6:	f892 c001 	ldrb.w	ip, [r2, #1]
   136ea:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   136ec:	3301      	adds	r3, #1
	done->extra.type = 0U;
   136ee:	2000      	movs	r0, #0
   136f0:	b2db      	uxtb	r3, r3
		last = 0U;
   136f2:	459c      	cmp	ip, r3
   136f4:	bf08      	it	eq
   136f6:	4603      	moveq	r3, r0
	if (last == first) {
   136f8:	4299      	cmp	r1, r3
   136fa:	f887 0020 	strb.w	r0, [r7, #32]
   136fe:	d01b      	beq.n	13738 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   13700:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   13702:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13704:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13706:	fb00 2101 	mla	r1, r0, r1, r2
   1370a:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1370c:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1370e:	2d00      	cmp	r5, #0
   13710:	d0c8      	beq.n	136a4 <ull_done+0x10>
	return hdr->ref;
   13712:	782b      	ldrb	r3, [r5, #0]
   13714:	2b00      	cmp	r3, #0
   13716:	d1c5      	bne.n	136a4 <ull_done+0x10>
   13718:	696b      	ldr	r3, [r5, #20]
   1371a:	2b00      	cmp	r3, #0
   1371c:	d0c2      	beq.n	136a4 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1371e:	69a8      	ldr	r0, [r5, #24]
   13720:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   13722:	e9d6 0100 	ldrd	r0, r1, [r6]
   13726:	aa01      	add	r2, sp, #4
   13728:	f7fc fd0a 	bl	10140 <memq_peek>
		if (link) {
   1372c:	4604      	mov	r4, r0
   1372e:	2800      	cmp	r0, #0
   13730:	d1c0      	bne.n	136b4 <ull_done+0x20>
}
   13732:	b003      	add	sp, #12
   13734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   13738:	4918      	ldr	r1, [pc, #96]	; (1379c <ull_done+0x108>)
   1373a:	4819      	ldr	r0, [pc, #100]	; (137a0 <ull_done+0x10c>)
   1373c:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   13740:	4642      	mov	r2, r8
   13742:	f011 fbe0 	bl	24f06 <printk>
   13746:	4040      	eors	r0, r0
   13748:	f380 8811 	msr	BASEPRI, r0
   1374c:	f04f 0003 	mov.w	r0, #3
   13750:	df02      	svc	2
   13752:	e7dc      	b.n	1370e <ull_done+0x7a>
		LL_ASSERT(0);
   13754:	4913      	ldr	r1, [pc, #76]	; (137a4 <ull_done+0x110>)
   13756:	4812      	ldr	r0, [pc, #72]	; (137a0 <ull_done+0x10c>)
   13758:	f640 2369 	movw	r3, #2665	; 0xa69
   1375c:	4642      	mov	r2, r8
   1375e:	f011 fbd2 	bl	24f06 <printk>
   13762:	4040      	eors	r0, r0
   13764:	f380 8811 	msr	BASEPRI, r0
   13768:	f04f 0003 	mov.w	r0, #3
   1376c:	df02      	svc	2
		break;
   1376e:	e7b8      	b.n	136e2 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   13770:	480b      	ldr	r0, [pc, #44]	; (137a0 <ull_done+0x10c>)
   13772:	f640 2312 	movw	r3, #2578	; 0xa12
   13776:	4642      	mov	r2, r8
   13778:	4649      	mov	r1, r9
   1377a:	f011 fbc4 	bl	24f06 <printk>
   1377e:	4040      	eors	r0, r0
   13780:	f380 8811 	msr	BASEPRI, r0
   13784:	f04f 0003 	mov.w	r0, #3
   13788:	df02      	svc	2
   1378a:	e79e      	b.n	136ca <ull_done+0x36>
   1378c:	20002568 	.word	0x20002568
   13790:	0002c318 	.word	0x0002c318
   13794:	0002c35c 	.word	0x0002c35c
   13798:	20000368 	.word	0x20000368
   1379c:	0002c374 	.word	0x0002c374
   137a0:	0002bfdc 	.word	0x0002bfdc
   137a4:	0002c074 	.word	0x0002c074

000137a8 <rx_alloc>:
{
   137a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   137ac:	4f33      	ldr	r7, [pc, #204]	; (1387c <rx_alloc+0xd4>)
   137ae:	783e      	ldrb	r6, [r7, #0]
   137b0:	4286      	cmp	r6, r0
   137b2:	bf28      	it	cs
   137b4:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   137b6:	b34e      	cbz	r6, 1380c <rx_alloc+0x64>
   137b8:	4d31      	ldr	r5, [pc, #196]	; (13880 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   137ba:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 13884 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   137be:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   137c0:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   137c4:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   137c6:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   137c8:	3401      	adds	r4, #1
   137ca:	b2e4      	uxtb	r4, r4
		last = 0U;
   137cc:	42a2      	cmp	r2, r4
   137ce:	bf08      	it	eq
   137d0:	2400      	moveq	r4, #0
	if (last == first) {
   137d2:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   137d4:	4640      	mov	r0, r8
   137d6:	d01b      	beq.n	13810 <rx_alloc+0x68>
   137d8:	f7fc fc48 	bl	1006c <mem_acquire>
   137dc:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   137de:	4648      	mov	r0, r9
		if (!link) {
   137e0:	f1ba 0f00 	cmp.w	sl, #0
   137e4:	d012      	beq.n	1380c <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   137e6:	f7fc fc41 	bl	1006c <mem_acquire>
		if (!rx) {
   137ea:	2800      	cmp	r0, #0
   137ec:	d03f      	beq.n	1386e <rx_alloc+0xc6>
		rx->link = link;
   137ee:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   137f2:	78ea      	ldrb	r2, [r5, #3]
   137f4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   137f6:	fb02 5303 	mla	r3, r2, r3, r5
   137fa:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   137fc:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   137fe:	70ec      	strb	r4, [r5, #3]
		max--;
   13800:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   13802:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13804:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   13808:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1380a:	d1db      	bne.n	137c4 <rx_alloc+0x1c>
}
   1380c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   13810:	783b      	ldrb	r3, [r7, #0]
   13812:	2b00      	cmp	r3, #0
   13814:	d0fa      	beq.n	1380c <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13816:	4d1c      	ldr	r5, [pc, #112]	; (13888 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   13818:	4e1c      	ldr	r6, [pc, #112]	; (1388c <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1381a:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1381c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 13884 <rx_alloc+0xdc>
		link->mem = NULL;
   13820:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13824:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13826:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13828:	3401      	adds	r4, #1
   1382a:	b2e4      	uxtb	r4, r4
		last = 0U;
   1382c:	42a2      	cmp	r2, r4
   1382e:	bf08      	it	eq
   13830:	2400      	moveq	r4, #0
	if (last == first) {
   13832:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13834:	4630      	mov	r0, r6
   13836:	d0e9      	beq.n	1380c <rx_alloc+0x64>
   13838:	f7fc fc18 	bl	1006c <mem_acquire>
   1383c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1383e:	4640      	mov	r0, r8
		if (!link) {
   13840:	f1ba 0f00 	cmp.w	sl, #0
   13844:	d0e2      	beq.n	1380c <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   13846:	f7fc fc11 	bl	1006c <mem_acquire>
		if (!rx) {
   1384a:	b180      	cbz	r0, 1386e <rx_alloc+0xc6>
		link->mem = NULL;
   1384c:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   13850:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13854:	78ea      	ldrb	r2, [r5, #3]
   13856:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13858:	fb02 5303 	mla	r3, r2, r3, r5
   1385c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1385e:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   13860:	70ec      	strb	r4, [r5, #3]
   13862:	3b01      	subs	r3, #1
   13864:	b2db      	uxtb	r3, r3
   13866:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   13868:	2b00      	cmp	r3, #0
   1386a:	d1db      	bne.n	13824 <rx_alloc+0x7c>
   1386c:	e7ce      	b.n	1380c <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   1386e:	4650      	mov	r0, sl
   13870:	4906      	ldr	r1, [pc, #24]	; (1388c <rx_alloc+0xe4>)
}
   13872:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   13876:	f7fc bc0f 	b.w	10098 <mem_release>
   1387a:	bf00      	nop
   1387c:	200022a0 	.word	0x200022a0
   13880:	20000390 	.word	0x20000390
   13884:	200022f8 	.word	0x200022f8
   13888:	20000380 	.word	0x20000380
   1388c:	200022a4 	.word	0x200022a4

00013890 <rx_demux>:
{
   13890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13894:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 13a44 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   13898:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 13a48 <rx_demux+0x1b8>
		LL_ASSERT(0);
   1389c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 13a4c <rx_demux+0x1bc>
   138a0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 13a50 <rx_demux+0x1c0>
{
   138a4:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   138a6:	e9d8 0100 	ldrd	r0, r1, [r8]
   138aa:	aa03      	add	r2, sp, #12
   138ac:	f7fc fc48 	bl	10140 <memq_peek>
		if (link) {
   138b0:	4605      	mov	r5, r0
   138b2:	2800      	cmp	r0, #0
   138b4:	d035      	beq.n	13922 <rx_demux+0x92>
			LL_ASSERT(rx);
   138b6:	9b03      	ldr	r3, [sp, #12]
   138b8:	2b00      	cmp	r3, #0
   138ba:	f000 80a6 	beq.w	13a0a <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   138be:	7818      	ldrb	r0, [r3, #0]
   138c0:	aa04      	add	r2, sp, #16
   138c2:	a902      	add	r1, sp, #8
   138c4:	f006 fbc2 	bl	1a04c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   138c8:	4604      	mov	r4, r0
   138ca:	2800      	cmp	r0, #0
   138cc:	d055      	beq.n	1397a <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   138ce:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   138d2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   138d6:	780f      	ldrb	r7, [r1, #0]
   138d8:	f8ad 200a 	strh.w	r2, [sp, #10]
   138dc:	ae05      	add	r6, sp, #20
   138de:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   138e0:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   138e4:	f006 fbcc 	bl	1a080 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   138e8:	4621      	mov	r1, r4
   138ea:	9a05      	ldr	r2, [sp, #20]
   138ec:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   138f0:	f006 fc10 	bl	1a114 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   138f4:	4620      	mov	r0, r4
   138f6:	f006 fb81 	bl	19ffc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   138fa:	4632      	mov	r2, r6
   138fc:	4629      	mov	r1, r5
   138fe:	4638      	mov	r0, r7
   13900:	f006 fba4 	bl	1a04c <ull_conn_ack_by_last_peek>
	} while (link);
   13904:	4604      	mov	r4, r0
   13906:	2800      	cmp	r0, #0
   13908:	d1ec      	bne.n	138e4 <rx_demux+0x54>
	k_sem_give(sem_recv);
   1390a:	f8d9 0000 	ldr.w	r0, [r9]
   1390e:	f00e fdab 	bl	22468 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13912:	e9d8 0100 	ldrd	r0, r1, [r8]
   13916:	aa03      	add	r2, sp, #12
   13918:	f7fc fc12 	bl	10140 <memq_peek>
		if (link) {
   1391c:	4605      	mov	r5, r0
   1391e:	2800      	cmp	r0, #0
   13920:	d1c9      	bne.n	138b6 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   13922:	aa04      	add	r2, sp, #16
   13924:	a902      	add	r1, sp, #8
   13926:	f10d 0007 	add.w	r0, sp, #7
   1392a:	f006 fb73 	bl	1a014 <ull_conn_ack_peek>
			if (link) {
   1392e:	4604      	mov	r4, r0
   13930:	2800      	cmp	r0, #0
   13932:	d067      	beq.n	13a04 <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   13934:	9b04      	ldr	r3, [sp, #16]
   13936:	9305      	str	r3, [sp, #20]
   13938:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1393c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13940:	f8ad 300a 	strh.w	r3, [sp, #10]
   13944:	ae05      	add	r6, sp, #20
   13946:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1394a:	f006 fb99 	bl	1a080 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1394e:	4621      	mov	r1, r4
   13950:	9a05      	ldr	r2, [sp, #20]
   13952:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13956:	f006 fbdd 	bl	1a114 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1395a:	4620      	mov	r0, r4
   1395c:	f006 fb4e 	bl	19ffc <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13960:	4632      	mov	r2, r6
   13962:	4629      	mov	r1, r5
   13964:	4638      	mov	r0, r7
   13966:	f006 fb71 	bl	1a04c <ull_conn_ack_by_last_peek>
	} while (link);
   1396a:	4604      	mov	r4, r0
   1396c:	2800      	cmp	r0, #0
   1396e:	d1ec      	bne.n	1394a <rx_demux+0xba>
	k_sem_give(sem_recv);
   13970:	f8d9 0000 	ldr.w	r0, [r9]
   13974:	f00e fd78 	bl	22468 <z_impl_k_sem_give>
			if (nack) {
   13978:	e7cb      	b.n	13912 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   1397a:	9b03      	ldr	r3, [sp, #12]
   1397c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1397e:	791b      	ldrb	r3, [r3, #4]
   13980:	3b01      	subs	r3, #1
   13982:	2b16      	cmp	r3, #22
   13984:	d80d      	bhi.n	139a2 <rx_demux+0x112>
   13986:	e8df f003 	tbb	[pc, r3]
   1398a:	0c1a      	.short	0x0c1a
   1398c:	0c1a0c38 	.word	0x0c1a0c38
   13990:	0c0c0c0c 	.word	0x0c0c0c0c
   13994:	0c0c0c0c 	.word	0x0c0c0c0c
   13998:	0c0c0c0c 	.word	0x0c0c0c0c
   1399c:	2d0c0c0c 	.word	0x2d0c0c0c
   139a0:	1a          	.byte	0x1a
   139a1:	00          	.byte	0x00
		LL_ASSERT(0);
   139a2:	482c      	ldr	r0, [pc, #176]	; (13a54 <rx_demux+0x1c4>)
   139a4:	f640 13ff 	movw	r3, #2559	; 0x9ff
   139a8:	4652      	mov	r2, sl
   139aa:	4659      	mov	r1, fp
   139ac:	f011 faab 	bl	24f06 <printk>
   139b0:	4040      	eors	r0, r0
   139b2:	f380 8811 	msr	BASEPRI, r0
   139b6:	f04f 0003 	mov.w	r0, #3
   139ba:	df02      	svc	2
			if (nack) {
   139bc:	e773      	b.n	138a6 <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   139be:	4921      	ldr	r1, [pc, #132]	; (13a44 <rx_demux+0x1b4>)
   139c0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   139c4:	2200      	movs	r2, #0
   139c6:	f7fc fbc3 	bl	10150 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139ca:	4b23      	ldr	r3, [pc, #140]	; (13a58 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   139cc:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139ce:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   139d0:	4628      	mov	r0, r5
   139d2:	4a22      	ldr	r2, [pc, #136]	; (13a5c <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139d4:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   139d6:	f7fc fba9 	bl	1012c <memq_enqueue>
	k_sem_give(sem_recv);
   139da:	f8d9 0000 	ldr.w	r0, [r9]
   139de:	f00e fd43 	bl	22468 <z_impl_k_sem_give>
			if (nack) {
   139e2:	e796      	b.n	13912 <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   139e4:	4917      	ldr	r1, [pc, #92]	; (13a44 <rx_demux+0x1b4>)
   139e6:	f8d8 0004 	ldr.w	r0, [r8, #4]
   139ea:	2200      	movs	r2, #0
   139ec:	f7fc fbb0 	bl	10150 <memq_dequeue>
		ull_conn_setup(link, rx);
   139f0:	9905      	ldr	r1, [sp, #20]
   139f2:	4628      	mov	r0, r5
   139f4:	f003 f820 	bl	16a38 <ull_conn_setup>
			if (nack) {
   139f8:	e755      	b.n	138a6 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   139fa:	a905      	add	r1, sp, #20
   139fc:	4628      	mov	r0, r5
   139fe:	f003 f843 	bl	16a88 <ull_conn_rx>
		if (nack) {
   13a02:	b188      	cbz	r0, 13a28 <rx_demux+0x198>
}
   13a04:	b007      	add	sp, #28
   13a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   13a0a:	4915      	ldr	r1, [pc, #84]	; (13a60 <rx_demux+0x1d0>)
   13a0c:	4811      	ldr	r0, [pc, #68]	; (13a54 <rx_demux+0x1c4>)
   13a0e:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   13a12:	4652      	mov	r2, sl
   13a14:	f011 fa77 	bl	24f06 <printk>
   13a18:	4040      	eors	r0, r0
   13a1a:	f380 8811 	msr	BASEPRI, r0
   13a1e:	f04f 0003 	mov.w	r0, #3
   13a22:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13a24:	9b03      	ldr	r3, [sp, #12]
   13a26:	e74a      	b.n	138be <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13a28:	4906      	ldr	r1, [pc, #24]	; (13a44 <rx_demux+0x1b4>)
   13a2a:	4602      	mov	r2, r0
   13a2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
   13a30:	f7fc fb8e 	bl	10150 <memq_dequeue>
		if (rx) {
   13a34:	9905      	ldr	r1, [sp, #20]
   13a36:	2900      	cmp	r1, #0
   13a38:	f43f af35 	beq.w	138a6 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13a3c:	4b06      	ldr	r3, [pc, #24]	; (13a58 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13a3e:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13a40:	78db      	ldrb	r3, [r3, #3]
   13a42:	e7c6      	b.n	139d2 <rx_demux+0x142>
   13a44:	20002570 	.word	0x20002570
   13a48:	20002578 	.word	0x20002578
   13a4c:	0002c318 	.word	0x0002c318
   13a50:	0002c074 	.word	0x0002c074
   13a54:	0002bfdc 	.word	0x0002bfdc
   13a58:	200004ac 	.word	0x200004ac
   13a5c:	20002564 	.word	0x20002564
   13a60:	0002c384 	.word	0x0002c384

00013a64 <ll_rx_get>:
{
   13a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a68:	b085      	sub	sp, #20
   13a6a:	e9cd 0100 	strd	r0, r1, [sp]
   13a6e:	4c63      	ldr	r4, [pc, #396]	; (13bfc <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   13a70:	4d63      	ldr	r5, [pc, #396]	; (13c00 <ll_rx_get+0x19c>)
   13a72:	4e64      	ldr	r6, [pc, #400]	; (13c04 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   13a74:	9a00      	ldr	r2, [sp, #0]
   13a76:	2300      	movs	r3, #0
   13a78:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13a7a:	e9d6 0100 	ldrd	r0, r1, [r6]
   13a7e:	aa03      	add	r2, sp, #12
   13a80:	f7fc fb5e 	bl	10140 <memq_peek>
	if (link) {
   13a84:	4680      	mov	r8, r0
   13a86:	2800      	cmp	r0, #0
   13a88:	f000 809f 	beq.w	13bca <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13a8c:	9b03      	ldr	r3, [sp, #12]
   13a8e:	495e      	ldr	r1, [pc, #376]	; (13c08 <ll_rx_get+0x1a4>)
   13a90:	781a      	ldrb	r2, [r3, #0]
   13a92:	9801      	ldr	r0, [sp, #4]
   13a94:	f7ff fd9e 	bl	135d4 <tx_cmplt_get>
		if (!cmplt) {
   13a98:	2800      	cmp	r0, #0
   13a9a:	f040 809b 	bne.w	13bd4 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   13a9e:	78a3      	ldrb	r3, [r4, #2]
   13aa0:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13aa4:	78e2      	ldrb	r2, [r4, #3]
   13aa6:	4607      	mov	r7, r0
   13aa8:	f10d 0109 	add.w	r1, sp, #9
   13aac:	f10d 000a 	add.w	r0, sp, #10
   13ab0:	f7ff fd90 	bl	135d4 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   13ab4:	ea47 0200 	orr.w	r2, r7, r0
   13ab8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   13abc:	d1f2      	bne.n	13aa4 <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   13abe:	9b03      	ldr	r3, [sp, #12]
   13ac0:	7919      	ldrb	r1, [r3, #4]
   13ac2:	2901      	cmp	r1, #1
   13ac4:	f040 8093 	bne.w	13bee <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   13ac8:	494e      	ldr	r1, [pc, #312]	; (13c04 <ll_rx_get+0x1a0>)
   13aca:	6870      	ldr	r0, [r6, #4]
   13acc:	f7fc fb40 	bl	10150 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13ad0:	494e      	ldr	r1, [pc, #312]	; (13c0c <ll_rx_get+0x1a8>)
   13ad2:	4640      	mov	r0, r8
   13ad4:	f7fc fae0 	bl	10098 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13ad8:	782b      	ldrb	r3, [r5, #0]
   13ada:	2b05      	cmp	r3, #5
   13adc:	d866      	bhi.n	13bac <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   13ade:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   13ae0:	494b      	ldr	r1, [pc, #300]	; (13c10 <ll_rx_get+0x1ac>)
   13ae2:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13ae4:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13ae6:	f7fc fad7 	bl	10098 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13aea:	782b      	ldrb	r3, [r5, #0]
   13aec:	2b00      	cmp	r3, #0
   13aee:	d0c1      	beq.n	13a74 <ll_rx_get+0x10>
   13af0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 13c14 <ll_rx_get+0x1b0>
	last = last + 1;
   13af4:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   13af8:	f898 2001 	ldrb.w	r2, [r8, #1]
   13afc:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   13b00:	3701      	adds	r7, #1
   13b02:	b2ff      	uxtb	r7, r7
		last = 0U;
   13b04:	42ba      	cmp	r2, r7
   13b06:	bf08      	it	eq
   13b08:	2700      	moveq	r7, #0
	if (last == first) {
   13b0a:	429f      	cmp	r7, r3
   13b0c:	d019      	beq.n	13b42 <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   13b0e:	483f      	ldr	r0, [pc, #252]	; (13c0c <ll_rx_get+0x1a8>)
   13b10:	f7fc faac 	bl	1006c <mem_acquire>
		if (!link) {
   13b14:	4681      	mov	r9, r0
   13b16:	2800      	cmp	r0, #0
   13b18:	d0ac      	beq.n	13a74 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13b1a:	483d      	ldr	r0, [pc, #244]	; (13c10 <ll_rx_get+0x1ac>)
   13b1c:	f7fc faa6 	bl	1006c <mem_acquire>
		if (!rx) {
   13b20:	2800      	cmp	r0, #0
   13b22:	d05a      	beq.n	13bda <ll_rx_get+0x176>
		rx->link = link;
   13b24:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13b28:	f898 2003 	ldrb.w	r2, [r8, #3]
   13b2c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13b30:	fb02 8303 	mla	r3, r2, r3, r8
   13b34:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13b36:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13b38:	f888 7003 	strb.w	r7, [r8, #3]
   13b3c:	3b01      	subs	r3, #1
   13b3e:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13b40:	e798      	b.n	13a74 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 13c18 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   13b46:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 13c0c <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13b4a:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13b4e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 13c10 <ll_rx_get+0x1ac>
	if (last == count) {
   13b52:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13b56:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   13b5a:	3701      	adds	r7, #1
   13b5c:	b2ff      	uxtb	r7, r7
		last = 0U;
   13b5e:	42ba      	cmp	r2, r7
   13b60:	bf08      	it	eq
   13b62:	2700      	moveq	r7, #0
	if (last == first) {
   13b64:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   13b66:	4648      	mov	r0, r9
   13b68:	d084      	beq.n	13a74 <ll_rx_get+0x10>
   13b6a:	f7fc fa7f 	bl	1006c <mem_acquire>
   13b6e:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13b70:	4650      	mov	r0, sl
		if (!link) {
   13b72:	f1bb 0f00 	cmp.w	fp, #0
   13b76:	f43f af7d 	beq.w	13a74 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13b7a:	f7fc fa77 	bl	1006c <mem_acquire>
		if (!rx) {
   13b7e:	2800      	cmp	r0, #0
   13b80:	d030      	beq.n	13be4 <ll_rx_get+0x180>
		link->mem = NULL;
   13b82:	2300      	movs	r3, #0
   13b84:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   13b88:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13b8c:	f898 2003 	ldrb.w	r2, [r8, #3]
   13b90:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13b94:	fb02 8303 	mla	r3, r2, r3, r8
   13b98:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13b9a:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13b9c:	f888 7003 	strb.w	r7, [r8, #3]
   13ba0:	3b01      	subs	r3, #1
   13ba2:	b2db      	uxtb	r3, r3
   13ba4:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13ba6:	2b00      	cmp	r3, #0
   13ba8:	d1d3      	bne.n	13b52 <ll_rx_get+0xee>
   13baa:	e763      	b.n	13a74 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13bac:	4a1b      	ldr	r2, [pc, #108]	; (13c1c <ll_rx_get+0x1b8>)
   13bae:	491c      	ldr	r1, [pc, #112]	; (13c20 <ll_rx_get+0x1bc>)
   13bb0:	481c      	ldr	r0, [pc, #112]	; (13c24 <ll_rx_get+0x1c0>)
   13bb2:	f240 6306 	movw	r3, #1542	; 0x606
   13bb6:	f011 f9a6 	bl	24f06 <printk>
   13bba:	4040      	eors	r0, r0
   13bbc:	f380 8811 	msr	BASEPRI, r0
   13bc0:	f04f 0003 	mov.w	r0, #3
   13bc4:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13bc6:	782b      	ldrb	r3, [r5, #0]
   13bc8:	e789      	b.n	13ade <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13bca:	78e2      	ldrb	r2, [r4, #3]
   13bcc:	490e      	ldr	r1, [pc, #56]	; (13c08 <ll_rx_get+0x1a4>)
   13bce:	9801      	ldr	r0, [sp, #4]
   13bd0:	f7ff fd00 	bl	135d4 <tx_cmplt_get>
}
   13bd4:	b005      	add	sp, #20
   13bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13bda:	490c      	ldr	r1, [pc, #48]	; (13c0c <ll_rx_get+0x1a8>)
   13bdc:	4648      	mov	r0, r9
   13bde:	f7fc fa5b 	bl	10098 <mem_release>
			return;
   13be2:	e747      	b.n	13a74 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   13be4:	4909      	ldr	r1, [pc, #36]	; (13c0c <ll_rx_get+0x1a8>)
   13be6:	4658      	mov	r0, fp
   13be8:	f7fc fa56 	bl	10098 <mem_release>
			return;
   13bec:	e742      	b.n	13a74 <ll_rx_get+0x10>
			*node_rx = rx;
   13bee:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13bf0:	4610      	mov	r0, r2
			*node_rx = rx;
   13bf2:	600b      	str	r3, [r1, #0]
}
   13bf4:	b005      	add	sp, #20
   13bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bfa:	bf00      	nop
   13bfc:	200004ac 	.word	0x200004ac
   13c00:	200022a0 	.word	0x200022a0
   13c04:	20002560 	.word	0x20002560
   13c08:	200004ae 	.word	0x200004ae
   13c0c:	200022a4 	.word	0x200022a4
   13c10:	200022f8 	.word	0x200022f8
   13c14:	20000390 	.word	0x20000390
   13c18:	20000380 	.word	0x20000380
   13c1c:	0002c318 	.word	0x0002c318
   13c20:	0002c388 	.word	0x0002c388
   13c24:	0002bfdc 	.word	0x0002bfdc

00013c28 <ll_rx_dequeue>:
{
   13c28:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13c2a:	495c      	ldr	r1, [pc, #368]	; (13d9c <ll_rx_dequeue+0x174>)
{
   13c2c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13c2e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13c30:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13c32:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13c34:	aa01      	add	r2, sp, #4
   13c36:	f7fc fa8b 	bl	10150 <memq_dequeue>
	LL_ASSERT(link);
   13c3a:	4604      	mov	r4, r0
   13c3c:	2800      	cmp	r0, #0
   13c3e:	d062      	beq.n	13d06 <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   13c40:	4957      	ldr	r1, [pc, #348]	; (13da0 <ll_rx_dequeue+0x178>)
   13c42:	4620      	mov	r0, r4
   13c44:	f7fc fa28 	bl	10098 <mem_release>
	switch (rx->type) {
   13c48:	9a01      	ldr	r2, [sp, #4]
   13c4a:	7913      	ldrb	r3, [r2, #4]
   13c4c:	2b1c      	cmp	r3, #28
   13c4e:	d810      	bhi.n	13c72 <ll_rx_dequeue+0x4a>
   13c50:	e8df f003 	tbb	[pc, r3]
   13c54:	1e0f0f1e 	.word	0x1e0f0f1e
   13c58:	0f0f1e0f 	.word	0x0f0f1e0f
   13c5c:	0f0f0f0f 	.word	0x0f0f0f0f
   13c60:	0f0f0f0f 	.word	0x0f0f0f0f
   13c64:	0f0f0f0f 	.word	0x0f0f0f0f
   13c68:	1e2f0f0f 	.word	0x1e2f0f0f
   13c6c:	1e1e1e1e 	.word	0x1e1e1e1e
   13c70:	1e          	.byte	0x1e
   13c71:	00          	.byte	0x00
		LL_ASSERT(0);
   13c72:	4a4c      	ldr	r2, [pc, #304]	; (13da4 <ll_rx_dequeue+0x17c>)
   13c74:	494c      	ldr	r1, [pc, #304]	; (13da8 <ll_rx_dequeue+0x180>)
   13c76:	484d      	ldr	r0, [pc, #308]	; (13dac <ll_rx_dequeue+0x184>)
   13c78:	f240 43c7 	movw	r3, #1223	; 0x4c7
   13c7c:	f011 f943 	bl	24f06 <printk>
   13c80:	4040      	eors	r0, r0
   13c82:	f380 8811 	msr	BASEPRI, r0
   13c86:	f04f 0003 	mov.w	r0, #3
   13c8a:	df02      	svc	2
}
   13c8c:	b002      	add	sp, #8
   13c8e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   13c90:	2b00      	cmp	r3, #0
   13c92:	d1fb      	bne.n	13c8c <ll_rx_dequeue+0x64>
   13c94:	4a43      	ldr	r2, [pc, #268]	; (13da4 <ll_rx_dequeue+0x17c>)
   13c96:	4946      	ldr	r1, [pc, #280]	; (13db0 <ll_rx_dequeue+0x188>)
   13c98:	4844      	ldr	r0, [pc, #272]	; (13dac <ll_rx_dequeue+0x184>)
   13c9a:	f240 43c3 	movw	r3, #1219	; 0x4c3
   13c9e:	f011 f932 	bl	24f06 <printk>
   13ca2:	4040      	eors	r0, r0
   13ca4:	f380 8811 	msr	BASEPRI, r0
   13ca8:	f04f 0003 	mov.w	r0, #3
   13cac:	df02      	svc	2
}
   13cae:	b002      	add	sp, #8
   13cb0:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13cb2:	7f13      	ldrb	r3, [r2, #28]
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   13cb4:	6895      	ldr	r5, [r2, #8]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13cb6:	2b3c      	cmp	r3, #60	; 0x3c
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   13cb8:	682c      	ldr	r4, [r5, #0]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13cba:	d032      	beq.n	13d22 <ll_rx_dequeue+0xfa>
   13cbc:	7f53      	ldrb	r3, [r2, #29]
   13cbe:	b1d3      	cbz	r3, 13cf6 <ll_rx_dequeue+0xce>
				if (adv->node_rx_cc_free) {
   13cc0:	6e60      	ldr	r0, [r4, #100]	; 0x64
   13cc2:	b120      	cbz	r0, 13cce <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   13cc4:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   13cc6:	493b      	ldr	r1, [pc, #236]	; (13db4 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   13cc8:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   13cca:	f7fc f9e5 	bl	10098 <mem_release>
			adv->is_enabled = 0U;
   13cce:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   13cd2:	f36f 0300 	bfc	r3, #0, #1
   13cd6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   13cda:	2000      	movs	r0, #0
   13cdc:	f001 fcaa 	bl	15634 <ull_scan_is_enabled>
   13ce0:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   13ce2:	2000      	movs	r0, #0
   13ce4:	f001 fa80 	bl	151e8 <ull_adv_is_enabled>
			if (!bm) {
   13ce8:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   13cec:	d1ce      	bne.n	13c8c <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   13cee:	f007 fe45 	bl	1b97c <ull_filter_adv_scan_state_cb>
}
   13cf2:	b002      	add	sp, #8
   13cf4:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   13cf6:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   13cfa:	6223      	str	r3, [r4, #32]
			scan->is_enabled = 0U;
   13cfc:	f363 0200 	bfi	r2, r3, #0, #1
   13d00:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   13d04:	e7e9      	b.n	13cda <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   13d06:	4a27      	ldr	r2, [pc, #156]	; (13da4 <ll_rx_dequeue+0x17c>)
   13d08:	492b      	ldr	r1, [pc, #172]	; (13db8 <ll_rx_dequeue+0x190>)
   13d0a:	4828      	ldr	r0, [pc, #160]	; (13dac <ll_rx_dequeue+0x184>)
   13d0c:	f240 33a1 	movw	r3, #929	; 0x3a1
   13d10:	f011 f8f9 	bl	24f06 <printk>
   13d14:	4040      	eors	r0, r0
   13d16:	f380 8811 	msr	BASEPRI, r0
   13d1a:	f04f 0003 	mov.w	r0, #3
   13d1e:	df02      	svc	2
   13d20:	e78e      	b.n	13c40 <ll_rx_dequeue+0x18>
				conn_lll = lll->conn;
   13d22:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   13d24:	b1ee      	cbz	r6, 13d62 <ll_rx_dequeue+0x13a>
				LL_ASSERT(!conn_lll->link_tx_free);
   13d26:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   13d28:	2200      	movs	r2, #0
   13d2a:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   13d2c:	b163      	cbz	r3, 13d48 <ll_rx_dequeue+0x120>
   13d2e:	4a1d      	ldr	r2, [pc, #116]	; (13da4 <ll_rx_dequeue+0x17c>)
   13d30:	4922      	ldr	r1, [pc, #136]	; (13dbc <ll_rx_dequeue+0x194>)
   13d32:	481e      	ldr	r0, [pc, #120]	; (13dac <ll_rx_dequeue+0x184>)
   13d34:	f240 431a 	movw	r3, #1050	; 0x41a
   13d38:	f011 f8e5 	bl	24f06 <printk>
   13d3c:	4040      	eors	r0, r0
   13d3e:	f380 8811 	msr	BASEPRI, r0
   13d42:	f04f 0003 	mov.w	r0, #3
   13d46:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   13d48:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   13d4c:	f106 0048 	add.w	r0, r6, #72	; 0x48
   13d50:	f7fc f9e2 	bl	10118 <memq_deinit>
				LL_ASSERT(link);
   13d54:	4605      	mov	r5, r0
   13d56:	b190      	cbz	r0, 13d7e <ll_rx_dequeue+0x156>
				ll_conn_release(conn);
   13d58:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   13d5a:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   13d5c:	f002 fb12 	bl	16384 <ll_conn_release>
   13d60:	e7b5      	b.n	13cce <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   13d62:	4a10      	ldr	r2, [pc, #64]	; (13da4 <ll_rx_dequeue+0x17c>)
   13d64:	4916      	ldr	r1, [pc, #88]	; (13dc0 <ll_rx_dequeue+0x198>)
   13d66:	4811      	ldr	r0, [pc, #68]	; (13dac <ll_rx_dequeue+0x184>)
   13d68:	f240 4317 	movw	r3, #1047	; 0x417
   13d6c:	f011 f8cb 	bl	24f06 <printk>
   13d70:	4040      	eors	r0, r0
   13d72:	f380 8811 	msr	BASEPRI, r0
   13d76:	f04f 0003 	mov.w	r0, #3
   13d7a:	df02      	svc	2
   13d7c:	e7d3      	b.n	13d26 <ll_rx_dequeue+0xfe>
				LL_ASSERT(link);
   13d7e:	4a09      	ldr	r2, [pc, #36]	; (13da4 <ll_rx_dequeue+0x17c>)
   13d80:	490d      	ldr	r1, [pc, #52]	; (13db8 <ll_rx_dequeue+0x190>)
   13d82:	480a      	ldr	r0, [pc, #40]	; (13dac <ll_rx_dequeue+0x184>)
   13d84:	f240 431d 	movw	r3, #1053	; 0x41d
   13d88:	f011 f8bd 	bl	24f06 <printk>
   13d8c:	4040      	eors	r0, r0
   13d8e:	f380 8811 	msr	BASEPRI, r0
   13d92:	f04f 0003 	mov.w	r0, #3
   13d96:	df02      	svc	2
   13d98:	e7de      	b.n	13d58 <ll_rx_dequeue+0x130>
   13d9a:	bf00      	nop
   13d9c:	20002560 	.word	0x20002560
   13da0:	200022a4 	.word	0x200022a4
   13da4:	0002c318 	.word	0x0002c318
   13da8:	0002c074 	.word	0x0002c074
   13dac:	0002bfdc 	.word	0x0002bfdc
   13db0:	0002c3ec 	.word	0x0002c3ec
   13db4:	200022f8 	.word	0x200022f8
   13db8:	0002c724 	.word	0x0002c724
   13dbc:	0002c3d4 	.word	0x0002c3d4
   13dc0:	0002c3c8 	.word	0x0002c3c8

00013dc4 <ll_rx_mem_release>:
{
   13dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   13dc8:	6804      	ldr	r4, [r0, #0]
{
   13dca:	4680      	mov	r8, r0
	while (rx) {
   13dcc:	b344      	cbz	r4, 13e20 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   13dce:	4f5f      	ldr	r7, [pc, #380]	; (13f4c <ll_rx_mem_release+0x188>)
   13dd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 13f50 <ll_rx_mem_release+0x18c>
   13dd4:	4e5f      	ldr	r6, [pc, #380]	; (13f54 <ll_rx_mem_release+0x190>)
		rx = rx->next;
   13dd6:	4625      	mov	r5, r4
   13dd8:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   13dda:	792b      	ldrb	r3, [r5, #4]
   13ddc:	2b1c      	cmp	r3, #28
   13dde:	d810      	bhi.n	13e02 <ll_rx_mem_release+0x3e>
   13de0:	e8df f003 	tbb	[pc, r3]
   13de4:	3a0f0f3a 	.word	0x3a0f0f3a
   13de8:	0f0f3a0f 	.word	0x0f0f3a0f
   13dec:	0f0f0f0f 	.word	0x0f0f0f0f
   13df0:	0f0f0f0f 	.word	0x0f0f0f0f
   13df4:	0f0f0f0f 	.word	0x0f0f0f0f
   13df8:	58260f0f 	.word	0x58260f0f
   13dfc:	3a3a3a3a 	.word	0x3a3a3a3a
   13e00:	3a          	.byte	0x3a
   13e01:	00          	.byte	0x00
			LL_ASSERT(0);
   13e02:	f240 53fa 	movw	r3, #1530	; 0x5fa
   13e06:	463a      	mov	r2, r7
   13e08:	4649      	mov	r1, r9
   13e0a:	4630      	mov	r0, r6
   13e0c:	f011 f87b 	bl	24f06 <printk>
   13e10:	4040      	eors	r0, r0
   13e12:	f380 8811 	msr	BASEPRI, r0
   13e16:	f04f 0003 	mov.w	r0, #3
   13e1a:	df02      	svc	2
	while (rx) {
   13e1c:	2c00      	cmp	r4, #0
   13e1e:	d1da      	bne.n	13dd6 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   13e20:	2300      	movs	r3, #0
   13e22:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   13e26:	20ff      	movs	r0, #255	; 0xff
}
   13e28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   13e2c:	f7ff bcbc 	b.w	137a8 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   13e30:	7f2b      	ldrb	r3, [r5, #28]
   13e32:	2b3c      	cmp	r3, #60	; 0x3c
   13e34:	d064      	beq.n	13f00 <ll_rx_mem_release+0x13c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   13e36:	2b02      	cmp	r3, #2
   13e38:	d06a      	beq.n	13f10 <ll_rx_mem_release+0x14c>
				LL_ASSERT(!cc->status);
   13e3a:	b1db      	cbz	r3, 13e74 <ll_rx_mem_release+0xb0>
   13e3c:	4946      	ldr	r1, [pc, #280]	; (13f58 <ll_rx_mem_release+0x194>)
   13e3e:	f240 532b 	movw	r3, #1323	; 0x52b
   13e42:	463a      	mov	r2, r7
   13e44:	4630      	mov	r0, r6
   13e46:	f011 f85e 	bl	24f06 <printk>
   13e4a:	4040      	eors	r0, r0
   13e4c:	f380 8811 	msr	BASEPRI, r0
   13e50:	f04f 0003 	mov.w	r0, #3
   13e54:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   13e56:	792b      	ldrb	r3, [r5, #4]
   13e58:	b963      	cbnz	r3, 13e74 <ll_rx_mem_release+0xb0>
   13e5a:	4940      	ldr	r1, [pc, #256]	; (13f5c <ll_rx_mem_release+0x198>)
   13e5c:	f240 537d 	movw	r3, #1405	; 0x57d
   13e60:	463a      	mov	r2, r7
   13e62:	4630      	mov	r0, r6
   13e64:	f011 f84f 	bl	24f06 <printk>
   13e68:	4040      	eors	r0, r0
   13e6a:	f380 8811 	msr	BASEPRI, r0
   13e6e:	f04f 0003 	mov.w	r0, #3
   13e72:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13e74:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 13f60 <ll_rx_mem_release+0x19c>
   13e78:	f89a 3000 	ldrb.w	r3, [sl]
   13e7c:	2b05      	cmp	r3, #5
   13e7e:	d82f      	bhi.n	13ee0 <ll_rx_mem_release+0x11c>
	mem_link_rx.quota_pdu += delta;
   13e80:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   13e82:	4938      	ldr	r1, [pc, #224]	; (13f64 <ll_rx_mem_release+0x1a0>)
	mem_link_rx.quota_pdu += delta;
   13e84:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   13e88:	4628      	mov	r0, r5
   13e8a:	f7fc f905 	bl	10098 <mem_release>
	while (rx) {
   13e8e:	2c00      	cmp	r4, #0
   13e90:	d1a1      	bne.n	13dd6 <ll_rx_mem_release+0x12>
   13e92:	e7c5      	b.n	13e20 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   13e94:	88e8      	ldrh	r0, [r5, #6]
   13e96:	2800      	cmp	r0, #0
   13e98:	d1c0      	bne.n	13e1c <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   13e9a:	f002 fa81 	bl	163a0 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   13e9e:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   13ea0:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   13ea2:	b163      	cbz	r3, 13ebe <ll_rx_mem_release+0xfa>
   13ea4:	4930      	ldr	r1, [pc, #192]	; (13f68 <ll_rx_mem_release+0x1a4>)
   13ea6:	f240 53ec 	movw	r3, #1516	; 0x5ec
   13eaa:	463a      	mov	r2, r7
   13eac:	4630      	mov	r0, r6
   13eae:	f011 f82a 	bl	24f06 <printk>
   13eb2:	4040      	eors	r0, r0
   13eb4:	f380 8811 	msr	BASEPRI, r0
   13eb8:	f04f 0003 	mov.w	r0, #3
   13ebc:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   13ebe:	f105 0168 	add.w	r1, r5, #104	; 0x68
   13ec2:	f105 0064 	add.w	r0, r5, #100	; 0x64
   13ec6:	f7fc f927 	bl	10118 <memq_deinit>
				LL_ASSERT(link);
   13eca:	4682      	mov	sl, r0
   13ecc:	b378      	cbz	r0, 13f2e <ll_rx_mem_release+0x16a>
				conn->lll.link_tx_free = link;
   13ece:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   13ed2:	4628      	mov	r0, r5
   13ed4:	f002 fa56 	bl	16384 <ll_conn_release>
	while (rx) {
   13ed8:	2c00      	cmp	r4, #0
   13eda:	f47f af7c 	bne.w	13dd6 <ll_rx_mem_release+0x12>
   13ede:	e79f      	b.n	13e20 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13ee0:	4922      	ldr	r1, [pc, #136]	; (13f6c <ll_rx_mem_release+0x1a8>)
   13ee2:	f240 6306 	movw	r3, #1542	; 0x606
   13ee6:	463a      	mov	r2, r7
   13ee8:	4630      	mov	r0, r6
   13eea:	f011 f80c 	bl	24f06 <printk>
   13eee:	4040      	eors	r0, r0
   13ef0:	f380 8811 	msr	BASEPRI, r0
   13ef4:	f04f 0003 	mov.w	r0, #3
   13ef8:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13efa:	f89a 3000 	ldrb.w	r3, [sl]
   13efe:	e7bf      	b.n	13e80 <ll_rx_mem_release+0xbc>
				mem_release(rx_free, &mem_pdu_rx.free);
   13f00:	4918      	ldr	r1, [pc, #96]	; (13f64 <ll_rx_mem_release+0x1a0>)
   13f02:	4628      	mov	r0, r5
   13f04:	f7fc f8c8 	bl	10098 <mem_release>
	while (rx) {
   13f08:	2c00      	cmp	r4, #0
   13f0a:	f47f af64 	bne.w	13dd6 <ll_rx_mem_release+0x12>
   13f0e:	e787      	b.n	13e20 <ll_rx_mem_release+0x5c>
				ull_central_cleanup(rx_free);
   13f10:	4628      	mov	r0, r5
   13f12:	f006 fdd3 	bl	1aabc <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   13f16:	2000      	movs	r0, #0
   13f18:	f001 f958 	bl	151cc <ull_adv_is_enabled_get>
   13f1c:	2800      	cmp	r0, #0
   13f1e:	f47f af7d 	bne.w	13e1c <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
   13f22:	f007 fd2b 	bl	1b97c <ull_filter_adv_scan_state_cb>
	while (rx) {
   13f26:	2c00      	cmp	r4, #0
   13f28:	f47f af55 	bne.w	13dd6 <ll_rx_mem_release+0x12>
   13f2c:	e778      	b.n	13e20 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   13f2e:	4910      	ldr	r1, [pc, #64]	; (13f70 <ll_rx_mem_release+0x1ac>)
   13f30:	f240 53ef 	movw	r3, #1519	; 0x5ef
   13f34:	463a      	mov	r2, r7
   13f36:	4630      	mov	r0, r6
   13f38:	f010 ffe5 	bl	24f06 <printk>
   13f3c:	4040      	eors	r0, r0
   13f3e:	f380 8811 	msr	BASEPRI, r0
   13f42:	f04f 0003 	mov.w	r0, #3
   13f46:	df02      	svc	2
   13f48:	e7c1      	b.n	13ece <ll_rx_mem_release+0x10a>
   13f4a:	bf00      	nop
   13f4c:	0002c318 	.word	0x0002c318
   13f50:	0002c074 	.word	0x0002c074
   13f54:	0002bfdc 	.word	0x0002bfdc
   13f58:	0002c40c 	.word	0x0002c40c
   13f5c:	0002c418 	.word	0x0002c418
   13f60:	200022a0 	.word	0x200022a0
   13f64:	200022f8 	.word	0x200022f8
   13f68:	0002c43c 	.word	0x0002c43c
   13f6c:	0002c388 	.word	0x0002c388
   13f70:	0002c724 	.word	0x0002c724

00013f74 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   13f74:	4801      	ldr	r0, [pc, #4]	; (13f7c <ll_rx_link_alloc+0x8>)
   13f76:	f7fc b879 	b.w	1006c <mem_acquire>
   13f7a:	bf00      	nop
   13f7c:	200022a4 	.word	0x200022a4

00013f80 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   13f80:	4901      	ldr	r1, [pc, #4]	; (13f88 <ll_rx_link_release+0x8>)
   13f82:	f7fc b889 	b.w	10098 <mem_release>
   13f86:	bf00      	nop
   13f88:	200022a4 	.word	0x200022a4

00013f8c <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   13f8c:	4801      	ldr	r0, [pc, #4]	; (13f94 <ll_rx_alloc+0x8>)
   13f8e:	f7fc b86d 	b.w	1006c <mem_acquire>
   13f92:	bf00      	nop
   13f94:	200022f8 	.word	0x200022f8

00013f98 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   13f98:	4901      	ldr	r1, [pc, #4]	; (13fa0 <ll_rx_release+0x8>)
   13f9a:	f7fc b87d 	b.w	10098 <mem_release>
   13f9e:	bf00      	nop
   13fa0:	200022f8 	.word	0x200022f8

00013fa4 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13fa4:	4b02      	ldr	r3, [pc, #8]	; (13fb0 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13fa6:	4a03      	ldr	r2, [pc, #12]	; (13fb4 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13fa8:	78db      	ldrb	r3, [r3, #3]
   13faa:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13fac:	f7fc b8be 	b.w	1012c <memq_enqueue>
   13fb0:	200004ac 	.word	0x200004ac
   13fb4:	20002564 	.word	0x20002564

00013fb8 <ll_rx_sched>:
	k_sem_give(sem_recv);
   13fb8:	4b01      	ldr	r3, [pc, #4]	; (13fc0 <ll_rx_sched+0x8>)
   13fba:	6818      	ldr	r0, [r3, #0]
   13fbc:	f00e ba54 	b.w	22468 <z_impl_k_sem_give>
   13fc0:	20002578 	.word	0x20002578

00013fc4 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13fc4:	4b0d      	ldr	r3, [pc, #52]	; (13ffc <ll_pdu_rx_alloc_peek+0x38>)
   13fc6:	7899      	ldrb	r1, [r3, #2]
   13fc8:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   13fca:	4291      	cmp	r1, r2
   13fcc:	d80a      	bhi.n	13fe4 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   13fce:	eba2 0c01 	sub.w	ip, r2, r1
   13fd2:	fa5f fc8c 	uxtb.w	ip, ip
   13fd6:	4560      	cmp	r0, ip
   13fd8:	d802      	bhi.n	13fe0 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   13fda:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13fdc:	7818      	ldrb	r0, [r3, #0]
   13fde:	d109      	bne.n	13ff4 <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   13fe0:	2000      	movs	r0, #0
}
   13fe2:	4770      	bx	lr
		return count - first + last;
   13fe4:	f893 c001 	ldrb.w	ip, [r3, #1]
   13fe8:	4462      	add	r2, ip
   13fea:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   13fec:	b2d2      	uxtb	r2, r2
   13fee:	4290      	cmp	r0, r2
   13ff0:	d8f6      	bhi.n	13fe0 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   13ff2:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   13ff4:	fb01 3300 	mla	r3, r1, r0, r3
   13ff8:	6858      	ldr	r0, [r3, #4]
   13ffa:	4770      	bx	lr
   13ffc:	20000380 	.word	0x20000380

00014000 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14000:	4b09      	ldr	r3, [pc, #36]	; (14028 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   14002:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   14004:	78da      	ldrb	r2, [r3, #3]
   14006:	7818      	ldrb	r0, [r3, #0]
   14008:	f893 c001 	ldrb.w	ip, [r3, #1]
   1400c:	428a      	cmp	r2, r1
   1400e:	d009      	beq.n	14024 <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   14010:	1c4a      	adds	r2, r1, #1
   14012:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14014:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   14018:	4594      	cmp	ip, r2
   1401a:	bf08      	it	eq
   1401c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1401e:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   14020:	709a      	strb	r2, [r3, #2]

	return mem;
   14022:	4770      	bx	lr
		return NULL;
   14024:	2000      	movs	r0, #0
}
   14026:	4770      	bx	lr
   14028:	20000380 	.word	0x20000380

0001402c <ll_tx_ack_put>:
{
   1402c:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1402e:	4a15      	ldr	r2, [pc, #84]	; (14084 <ll_tx_ack_put+0x58>)
   14030:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   14034:	7854      	ldrb	r4, [r2, #1]
   14036:	f892 e002 	ldrb.w	lr, [r2, #2]
   1403a:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1403c:	f10c 0301 	add.w	r3, ip, #1
   14040:	b2db      	uxtb	r3, r3
		last = 0U;
   14042:	429c      	cmp	r4, r3
   14044:	bf08      	it	eq
   14046:	2300      	moveq	r3, #0
	if (last == first) {
   14048:	459e      	cmp	lr, r3
   1404a:	d00a      	beq.n	14062 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1404c:	fb1c fc05 	smulbb	ip, ip, r5
   14050:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   14054:	f82e 000c 	strh.w	r0, [lr, ip]
   14058:	44f4      	add	ip, lr
	tx->node = node_tx;
   1405a:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1405e:	70d3      	strb	r3, [r2, #3]
}
   14060:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   14062:	4a09      	ldr	r2, [pc, #36]	; (14088 <ll_tx_ack_put+0x5c>)
   14064:	4909      	ldr	r1, [pc, #36]	; (1408c <ll_tx_ack_put+0x60>)
   14066:	480a      	ldr	r0, [pc, #40]	; (14090 <ll_tx_ack_put+0x64>)
   14068:	f240 634e 	movw	r3, #1614	; 0x64e
   1406c:	f010 ff4b 	bl	24f06 <printk>
   14070:	4040      	eors	r0, r0
   14072:	f380 8811 	msr	BASEPRI, r0
   14076:	f04f 0003 	mov.w	r0, #3
   1407a:	df02      	svc	2
	tx->handle = handle;
   1407c:	2300      	movs	r3, #0
   1407e:	801b      	strh	r3, [r3, #0]
   14080:	deff      	udf	#255	; 0xff
   14082:	bf00      	nop
   14084:	200004ac 	.word	0x200004ac
   14088:	0002c318 	.word	0x0002c318
   1408c:	0002c718 	.word	0x0002c718
   14090:	0002bfdc 	.word	0x0002bfdc

00014094 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14094:	f030 0302 	bics.w	r3, r0, #2
{
   14098:	b510      	push	{r4, lr}
   1409a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1409c:	d002      	beq.n	140a4 <ull_ticker_status_take+0x10>
   1409e:	680b      	ldr	r3, [r1, #0]
   140a0:	2b02      	cmp	r3, #2
   140a2:	d008      	beq.n	140b6 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   140a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   140a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   140ac:	4809      	ldr	r0, [pc, #36]	; (140d4 <ull_ticker_status_take+0x40>)
   140ae:	f00e fa01 	bl	224b4 <z_impl_k_sem_take>
	return *ret_cb;
   140b2:	6820      	ldr	r0, [r4, #0]
}
   140b4:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   140b6:	4a08      	ldr	r2, [pc, #32]	; (140d8 <ull_ticker_status_take+0x44>)
   140b8:	4908      	ldr	r1, [pc, #32]	; (140dc <ull_ticker_status_take+0x48>)
   140ba:	4809      	ldr	r0, [pc, #36]	; (140e0 <ull_ticker_status_take+0x4c>)
   140bc:	f240 6382 	movw	r3, #1666	; 0x682
   140c0:	f010 ff21 	bl	24f06 <printk>
   140c4:	4040      	eors	r0, r0
   140c6:	f380 8811 	msr	BASEPRI, r0
   140ca:	f04f 0003 	mov.w	r0, #3
   140ce:	df02      	svc	2
   140d0:	e7e8      	b.n	140a4 <ull_ticker_status_take+0x10>
   140d2:	bf00      	nop
   140d4:	2000257c 	.word	0x2000257c
   140d8:	0002c318 	.word	0x0002c318
   140dc:	0002c45c 	.word	0x0002c45c
   140e0:	0002bfdc 	.word	0x0002bfdc

000140e4 <ull_disable_mark>:
	if (!*m) {
   140e4:	4a03      	ldr	r2, [pc, #12]	; (140f4 <ull_disable_mark+0x10>)
{
   140e6:	4603      	mov	r3, r0
	if (!*m) {
   140e8:	6810      	ldr	r0, [r2, #0]
   140ea:	b100      	cbz	r0, 140ee <ull_disable_mark+0xa>
}
   140ec:	4770      	bx	lr
		*m = param;
   140ee:	6013      	str	r3, [r2, #0]
   140f0:	4618      	mov	r0, r3
}
   140f2:	4770      	bx	lr
   140f4:	2000226c 	.word	0x2000226c

000140f8 <ull_disable_unmark>:
	if (*m && *m == param) {
   140f8:	4a04      	ldr	r2, [pc, #16]	; (1410c <ull_disable_unmark+0x14>)
   140fa:	6813      	ldr	r3, [r2, #0]
   140fc:	b123      	cbz	r3, 14108 <ull_disable_unmark+0x10>
   140fe:	4298      	cmp	r0, r3
		*m = NULL;
   14100:	bf06      	itte	eq
   14102:	2100      	moveq	r1, #0
   14104:	6011      	streq	r1, [r2, #0]
	return NULL;
   14106:	2300      	movne	r3, #0
}
   14108:	4618      	mov	r0, r3
   1410a:	4770      	bx	lr
   1410c:	2000226c 	.word	0x2000226c

00014110 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14110:	4b01      	ldr	r3, [pc, #4]	; (14118 <ull_disable_mark_get+0x8>)
}
   14112:	6818      	ldr	r0, [r3, #0]
   14114:	4770      	bx	lr
   14116:	bf00      	nop
   14118:	2000226c 	.word	0x2000226c

0001411c <ull_update_mark>:
	if (!*m) {
   1411c:	4a03      	ldr	r2, [pc, #12]	; (1412c <ull_update_mark+0x10>)
{
   1411e:	4603      	mov	r3, r0
	if (!*m) {
   14120:	6810      	ldr	r0, [r2, #0]
   14122:	b100      	cbz	r0, 14126 <ull_update_mark+0xa>
}
   14124:	4770      	bx	lr
		*m = param;
   14126:	6013      	str	r3, [r2, #0]
   14128:	4618      	mov	r0, r3
}
   1412a:	4770      	bx	lr
   1412c:	20002270 	.word	0x20002270

00014130 <ull_update_unmark>:
	if (*m && *m == param) {
   14130:	4a04      	ldr	r2, [pc, #16]	; (14144 <ull_update_unmark+0x14>)
   14132:	6813      	ldr	r3, [r2, #0]
   14134:	b123      	cbz	r3, 14140 <ull_update_unmark+0x10>
   14136:	4298      	cmp	r0, r3
		*m = NULL;
   14138:	bf06      	itte	eq
   1413a:	2100      	moveq	r1, #0
   1413c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1413e:	2300      	movne	r3, #0
}
   14140:	4618      	mov	r0, r3
   14142:	4770      	bx	lr
   14144:	20002270 	.word	0x20002270

00014148 <ull_update_mark_get>:
	return mark_get(mark_update);
   14148:	4b01      	ldr	r3, [pc, #4]	; (14150 <ull_update_mark_get+0x8>)
}
   1414a:	6818      	ldr	r0, [r3, #0]
   1414c:	4770      	bx	lr
   1414e:	bf00      	nop
   14150:	20002270 	.word	0x20002270

00014154 <ull_disable>:
{
   14154:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   14156:	6805      	ldr	r5, [r0, #0]
   14158:	782b      	ldrb	r3, [r5, #0]
{
   1415a:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   1415c:	b353      	cbz	r3, 141b4 <ull_disable+0x60>
	compiler_barrier();
   1415e:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   14160:	2201      	movs	r2, #1
   14162:	2100      	movs	r1, #0
   14164:	4668      	mov	r0, sp
   14166:	f016 f874 	bl	2a252 <z_impl_k_sem_init>
   1416a:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   1416c:	4a13      	ldr	r2, [pc, #76]	; (141bc <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   1416e:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14172:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   14174:	b1f3      	cbz	r3, 141b4 <ull_disable+0x60>
	mfy.param = lll;
   14176:	4b12      	ldr	r3, [pc, #72]	; (141c0 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14178:	2200      	movs	r2, #0
   1417a:	4611      	mov	r1, r2
   1417c:	2003      	movs	r0, #3
	mfy.param = lll;
   1417e:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14180:	f7fc f848 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!ret);
   14184:	b940      	cbnz	r0, 14198 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   14186:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1418a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1418e:	4668      	mov	r0, sp
   14190:	f00e f990 	bl	224b4 <z_impl_k_sem_take>
}
   14194:	b007      	add	sp, #28
   14196:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14198:	4a0a      	ldr	r2, [pc, #40]	; (141c4 <ull_disable+0x70>)
   1419a:	490b      	ldr	r1, [pc, #44]	; (141c8 <ull_disable+0x74>)
   1419c:	480b      	ldr	r0, [pc, #44]	; (141cc <ull_disable+0x78>)
   1419e:	f240 63ff 	movw	r3, #1791	; 0x6ff
   141a2:	f010 feb0 	bl	24f06 <printk>
   141a6:	4040      	eors	r0, r0
   141a8:	f380 8811 	msr	BASEPRI, r0
   141ac:	f04f 0003 	mov.w	r0, #3
   141b0:	df02      	svc	2
   141b2:	e7e8      	b.n	14186 <ull_disable+0x32>
		return -EALREADY;
   141b4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   141b8:	e7ec      	b.n	14194 <ull_disable+0x40>
   141ba:	bf00      	nop
   141bc:	000135d1 	.word	0x000135d1
   141c0:	20000510 	.word	0x20000510
   141c4:	0002c318 	.word	0x0002c318
   141c8:	0002c454 	.word	0x0002c454
   141cc:	0002bfdc 	.word	0x0002bfdc

000141d0 <ull_ticker_stop_with_mark>:
{
   141d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   141d2:	4e20      	ldr	r6, [pc, #128]	; (14254 <ull_ticker_stop_with_mark+0x84>)
   141d4:	6833      	ldr	r3, [r6, #0]
{
   141d6:	b085      	sub	sp, #20
   141d8:	460c      	mov	r4, r1
   141da:	4617      	mov	r7, r2
	if (!*m) {
   141dc:	b353      	cbz	r3, 14234 <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   141de:	4299      	cmp	r1, r3
   141e0:	d113      	bne.n	1420a <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141e2:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   141e4:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141e6:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   141e8:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141ea:	9500      	str	r5, [sp, #0]
   141ec:	4b1a      	ldr	r3, [pc, #104]	; (14258 <ull_ticker_stop_with_mark+0x88>)
   141ee:	2103      	movs	r1, #3
   141f0:	2000      	movs	r0, #0
   141f2:	f7fd fa65 	bl	116c0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   141f6:	4629      	mov	r1, r5
   141f8:	f7ff ff4c 	bl	14094 <ull_ticker_status_take>
	if (ret) {
   141fc:	4605      	mov	r5, r0
   141fe:	b140      	cbz	r0, 14212 <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   14200:	6833      	ldr	r3, [r6, #0]
   14202:	b10b      	cbz	r3, 14208 <ull_ticker_stop_with_mark+0x38>
   14204:	429c      	cmp	r4, r3
   14206:	d017      	beq.n	14238 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   14208:	b304      	cbz	r4, 1424c <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   1420a:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   1420e:	b005      	add	sp, #20
   14210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   14212:	4638      	mov	r0, r7
   14214:	f7ff ff9e 	bl	14154 <ull_disable>
	if (*m && *m == param) {
   14218:	6833      	ldr	r3, [r6, #0]
   1421a:	b10b      	cbz	r3, 14220 <ull_ticker_stop_with_mark+0x50>
   1421c:	429c      	cmp	r4, r3
   1421e:	d011      	beq.n	14244 <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   14220:	2c00      	cmp	r4, #0
   14222:	d1f2      	bne.n	1420a <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   14224:	2800      	cmp	r0, #0
   14226:	d0f2      	beq.n	1420e <ull_ticker_stop_with_mark+0x3e>
	return 0;
   14228:	f110 0f78 	cmn.w	r0, #120	; 0x78
   1422c:	bf08      	it	eq
   1422e:	2000      	moveq	r0, #0
}
   14230:	b005      	add	sp, #20
   14232:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   14234:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   14236:	e7d4      	b.n	141e2 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   14238:	2300      	movs	r3, #0
		return -EALREADY;
   1423a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   1423e:	6033      	str	r3, [r6, #0]
}
   14240:	b005      	add	sp, #20
   14242:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   14244:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   14246:	2800      	cmp	r0, #0
   14248:	d0e1      	beq.n	1420e <ull_ticker_stop_with_mark+0x3e>
   1424a:	e7ed      	b.n	14228 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   1424c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14250:	e7dd      	b.n	1420e <ull_ticker_stop_with_mark+0x3e>
   14252:	bf00      	nop
   14254:	2000226c 	.word	0x2000226c
   14258:	000135c5 	.word	0x000135c5

0001425c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1425c:	4b0d      	ldr	r3, [pc, #52]	; (14294 <ull_pdu_rx_alloc_peek+0x38>)
   1425e:	7899      	ldrb	r1, [r3, #2]
   14260:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   14262:	4291      	cmp	r1, r2
   14264:	d80a      	bhi.n	1427c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   14266:	eba2 0c01 	sub.w	ip, r2, r1
   1426a:	fa5f fc8c 	uxtb.w	ip, ip
   1426e:	4560      	cmp	r0, ip
   14270:	d802      	bhi.n	14278 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   14272:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14274:	7818      	ldrb	r0, [r3, #0]
   14276:	d109      	bne.n	1428c <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   14278:	2000      	movs	r0, #0
}
   1427a:	4770      	bx	lr
		return count - first + last;
   1427c:	f893 c001 	ldrb.w	ip, [r3, #1]
   14280:	4462      	add	r2, ip
   14282:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14284:	b2d2      	uxtb	r2, r2
   14286:	4290      	cmp	r0, r2
   14288:	d8f6      	bhi.n	14278 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1428a:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   1428c:	fb01 3300 	mla	r3, r1, r0, r3
   14290:	6858      	ldr	r0, [r3, #4]
   14292:	4770      	bx	lr
   14294:	20000390 	.word	0x20000390

00014298 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   14298:	4b09      	ldr	r3, [pc, #36]	; (142c0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1429a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1429c:	78da      	ldrb	r2, [r3, #3]
   1429e:	7818      	ldrb	r0, [r3, #0]
   142a0:	f893 c001 	ldrb.w	ip, [r3, #1]
   142a4:	428a      	cmp	r2, r1
   142a6:	d009      	beq.n	142bc <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   142a8:	1c4a      	adds	r2, r1, #1
   142aa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   142ac:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   142b0:	4594      	cmp	ip, r2
   142b2:	bf08      	it	eq
   142b4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   142b6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   142b8:	709a      	strb	r2, [r3, #2]
	return mem;
   142ba:	4770      	bx	lr
		return NULL;
   142bc:	2000      	movs	r0, #0
}
   142be:	4770      	bx	lr
   142c0:	20000390 	.word	0x20000390

000142c4 <ull_rx_put>:
{
   142c4:	b538      	push	{r3, r4, r5, lr}
   142c6:	460c      	mov	r4, r1
   142c8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   142ca:	f005 fe9d 	bl	1a008 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   142ce:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   142d0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   142d2:	4a03      	ldr	r2, [pc, #12]	; (142e0 <ull_rx_put+0x1c>)
   142d4:	4628      	mov	r0, r5
}
   142d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   142da:	f7fb bf27 	b.w	1012c <memq_enqueue>
   142de:	bf00      	nop
   142e0:	20002574 	.word	0x20002574

000142e4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   142e4:	2201      	movs	r2, #1
   142e6:	4b02      	ldr	r3, [pc, #8]	; (142f0 <ull_rx_sched+0xc>)
   142e8:	4611      	mov	r1, r2
   142ea:	2000      	movs	r0, #0
   142ec:	f7fb bf92 	b.w	10214 <mayfly_enqueue>
   142f0:	20000500 	.word	0x20000500

000142f4 <ull_prepare_enqueue>:
{
   142f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   142f8:	4c1a      	ldr	r4, [pc, #104]	; (14364 <ull_prepare_enqueue+0x70>)
{
   142fa:	f89d 801c 	ldrb.w	r8, [sp, #28]
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   142fe:	f894 c003 	ldrb.w	ip, [r4, #3]
   14302:	78a7      	ldrb	r7, [r4, #2]
{
   14304:	4606      	mov	r6, r0
	last = last + 1;
   14306:	f10c 0e01 	add.w	lr, ip, #1
	if (last == count) {
   1430a:	7860      	ldrb	r0, [r4, #1]
	last = last + 1;
   1430c:	fa5f fe8e 	uxtb.w	lr, lr
		last = 0U;
   14310:	4570      	cmp	r0, lr
   14312:	bf08      	it	eq
   14314:	f04f 0e00 	moveq.w	lr, #0
	if (last == first) {
   14318:	4577      	cmp	r7, lr
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1431a:	7820      	ldrb	r0, [r4, #0]
   1431c:	d01f      	beq.n	1435e <ull_prepare_enqueue+0x6a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1431e:	fb1c f500 	smulbb	r5, ip, r0
   14322:	f104 0c04 	add.w	ip, r4, #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14326:	6810      	ldr	r0, [r2, #0]
   14328:	f8d2 9004 	ldr.w	r9, [r2, #4]
   1432c:	6897      	ldr	r7, [r2, #8]
   1432e:	68d2      	ldr	r2, [r2, #12]
   14330:	f84c 0005 	str.w	r0, [ip, r5]
   14334:	eb0c 0005 	add.w	r0, ip, r5
	e->is_abort_cb = is_abort_cb;
   14338:	e9c0 3604 	strd	r3, r6, [r0, #16]
	e->is_resume = is_resume;
   1433c:	7f03      	ldrb	r3, [r0, #28]
   1433e:	f8c0 9004 	str.w	r9, [r0, #4]
   14342:	f008 0801 	and.w	r8, r8, #1
   14346:	f023 0303 	bic.w	r3, r3, #3
   1434a:	ea43 0308 	orr.w	r3, r3, r8
   1434e:	6087      	str	r7, [r0, #8]
   14350:	60c2      	str	r2, [r0, #12]
	e->abort_cb = abort_cb;
   14352:	6181      	str	r1, [r0, #24]
	e->is_resume = is_resume;
   14354:	7703      	strb	r3, [r0, #28]
	*last = idx; /* Commit: Update write index */
   14356:	f884 e003 	strb.w	lr, [r4, #3]
}
   1435a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   1435e:	2000      	movs	r0, #0
}
   14360:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14364:	200003a8 	.word	0x200003a8

00014368 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   14368:	4b05      	ldr	r3, [pc, #20]	; (14380 <ull_prepare_dequeue_get+0x18>)
   1436a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1436c:	78da      	ldrb	r2, [r3, #3]
   1436e:	7819      	ldrb	r1, [r3, #0]
   14370:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   14372:	bf1a      	itte	ne
   14374:	3304      	addne	r3, #4
   14376:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1437a:	2000      	moveq	r0, #0
}
   1437c:	4770      	bx	lr
   1437e:	bf00      	nop
   14380:	200003a8 	.word	0x200003a8

00014384 <ull_prepare_dequeue_iter>:
{
   14384:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14386:	4b0d      	ldr	r3, [pc, #52]	; (143bc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   14388:	7802      	ldrb	r2, [r0, #0]
   1438a:	7859      	ldrb	r1, [r3, #1]
   1438c:	f893 c003 	ldrb.w	ip, [r3, #3]
   14390:	f893 e000 	ldrb.w	lr, [r3]
   14394:	4291      	cmp	r1, r2
   14396:	bf9c      	itt	ls
   14398:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   1439a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   1439c:	4594      	cmp	ip, r2
   1439e:	d00a      	beq.n	143b6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   143a0:	1c53      	adds	r3, r2, #1
   143a2:	b2db      	uxtb	r3, r3
		i = 0U;
   143a4:	4299      	cmp	r1, r3
   143a6:	bf08      	it	eq
   143a8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   143aa:	4905      	ldr	r1, [pc, #20]	; (143c0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   143ac:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   143ae:	fb02 100e 	mla	r0, r2, lr, r1
}
   143b2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   143b6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   143b8:	e7fb      	b.n	143b2 <ull_prepare_dequeue_iter+0x2e>
   143ba:	bf00      	nop
   143bc:	200003a8 	.word	0x200003a8
   143c0:	200003ac 	.word	0x200003ac

000143c4 <ull_prepare_dequeue>:
{
   143c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   143c8:	4c23      	ldr	r4, [pc, #140]	; (14458 <ull_prepare_dequeue+0x94>)
   143ca:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   143cc:	78e1      	ldrb	r1, [r4, #3]
   143ce:	7823      	ldrb	r3, [r4, #0]
   143d0:	4291      	cmp	r1, r2
   143d2:	d027      	beq.n	14424 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   143d4:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   143d6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1445c <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   143da:	f8df b084 	ldr.w	fp, [pc, #132]	; 14460 <ull_prepare_dequeue+0x9c>
   143de:	f8df a084 	ldr.w	sl, [pc, #132]	; 14464 <ull_prepare_dequeue+0xa0>
   143e2:	4680      	mov	r8, r0
   143e4:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   143e8:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   143ea:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   143ec:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   143f0:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   143f4:	d518      	bpl.n	14428 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   143f6:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   143f8:	78e1      	ldrb	r1, [r4, #3]
   143fa:	7820      	ldrb	r0, [r4, #0]
   143fc:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   14400:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   14402:	4291      	cmp	r1, r2
	_first += 1U;
   14404:	b2db      	uxtb	r3, r3
	if (_first == last) {
   14406:	d00d      	beq.n	14424 <ull_prepare_dequeue+0x60>
		_first = 0U;
   14408:	459c      	cmp	ip, r3
   1440a:	bf08      	it	eq
   1440c:	2300      	moveq	r3, #0
	if (first == last) {
   1440e:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   14410:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   14412:	d007      	beq.n	14424 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   14414:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   14418:	2d00      	cmp	r5, #0
   1441a:	d1e5      	bne.n	143e8 <ull_prepare_dequeue+0x24>
   1441c:	b116      	cbz	r6, 14424 <ull_prepare_dequeue+0x60>
   1441e:	7f03      	ldrb	r3, [r0, #28]
   14420:	07db      	lsls	r3, r3, #31
   14422:	d5e1      	bpl.n	143e8 <ull_prepare_dequeue+0x24>
}
   14424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   14428:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   1442c:	4b0b      	ldr	r3, [pc, #44]	; (1445c <ull_prepare_dequeue+0x98>)
   1442e:	462a      	mov	r2, r5
   14430:	4629      	mov	r1, r5
   14432:	4640      	mov	r0, r8
   14434:	f7fb feee 	bl	10214 <mayfly_enqueue>
			LL_ASSERT(!ret);
   14438:	2800      	cmp	r0, #0
   1443a:	d0dc      	beq.n	143f6 <ull_prepare_dequeue+0x32>
   1443c:	480a      	ldr	r0, [pc, #40]	; (14468 <ull_prepare_dequeue+0xa4>)
   1443e:	f240 7376 	movw	r3, #1910	; 0x776
   14442:	465a      	mov	r2, fp
   14444:	4651      	mov	r1, sl
   14446:	f010 fd5e 	bl	24f06 <printk>
   1444a:	4040      	eors	r0, r0
   1444c:	f380 8811 	msr	BASEPRI, r0
   14450:	f04f 0003 	mov.w	r0, #3
   14454:	df02      	svc	2
   14456:	e7ce      	b.n	143f6 <ull_prepare_dequeue+0x32>
   14458:	200003a8 	.word	0x200003a8
   1445c:	200004d0 	.word	0x200004d0
   14460:	0002c318 	.word	0x0002c318
   14464:	0002c454 	.word	0x0002c454
   14468:	0002bfdc 	.word	0x0002bfdc

0001446c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1446c:	4b06      	ldr	r3, [pc, #24]	; (14488 <ull_event_done_extra_get+0x1c>)
   1446e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   14470:	78d9      	ldrb	r1, [r3, #3]
   14472:	7818      	ldrb	r0, [r3, #0]
   14474:	4291      	cmp	r1, r2
   14476:	d005      	beq.n	14484 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   14478:	fb02 3300 	mla	r3, r2, r0, r3
   1447c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1447e:	b110      	cbz	r0, 14486 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14480:	3020      	adds	r0, #32
   14482:	4770      	bx	lr
		return NULL;
   14484:	2000      	movs	r0, #0
}
   14486:	4770      	bx	lr
   14488:	20000368 	.word	0x20000368

0001448c <ull_event_done>:
{
   1448c:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   1448e:	4a13      	ldr	r2, [pc, #76]	; (144dc <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   14490:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   14492:	78d4      	ldrb	r4, [r2, #3]
   14494:	7811      	ldrb	r1, [r2, #0]
   14496:	429c      	cmp	r4, r3
{
   14498:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   1449a:	7850      	ldrb	r0, [r2, #1]
   1449c:	d01b      	beq.n	144d6 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   1449e:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   144a2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   144a4:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   144a6:	b2db      	uxtb	r3, r3
		_first = 0U;
   144a8:	4298      	cmp	r0, r3
   144aa:	bf08      	it	eq
   144ac:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   144ae:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   144b0:	b17c      	cbz	r4, 144d2 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   144b2:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   144b4:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   144b6:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   144b8:	4a09      	ldr	r2, [pc, #36]	; (144e0 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   144ba:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   144bc:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   144be:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   144c0:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   144c2:	f7fb fe33 	bl	1012c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   144c6:	2201      	movs	r2, #1
   144c8:	4b06      	ldr	r3, [pc, #24]	; (144e4 <ull_event_done+0x58>)
   144ca:	4611      	mov	r1, r2
   144cc:	4628      	mov	r0, r5
   144ce:	f7fb fea1 	bl	10214 <mayfly_enqueue>
}
   144d2:	4620      	mov	r0, r4
   144d4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   144d6:	2400      	movs	r4, #0
   144d8:	e7fb      	b.n	144d2 <ull_event_done+0x46>
   144da:	bf00      	nop
   144dc:	20000368 	.word	0x20000368
   144e0:	2000256c 	.word	0x2000256c
   144e4:	200004f0 	.word	0x200004f0

000144e8 <ull_rxfifo_alloc>:
{
   144e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ec:	b083      	sub	sp, #12
   144ee:	461d      	mov	r5, r3
   144f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   144f2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   144f6:	e9cd 0400 	strd	r0, r4, [sp]
   144fa:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   144fe:	b33b      	cbz	r3, 14550 <ull_rxfifo_alloc+0x68>
   14500:	1e5c      	subs	r4, r3, #1
   14502:	f895 b000 	ldrb.w	fp, [r5]
   14506:	4688      	mov	r8, r1
   14508:	4617      	mov	r7, r2
   1450a:	b2e4      	uxtb	r4, r4
	last = last + 1;
   1450c:	f10b 0301 	add.w	r3, fp, #1
   14510:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   14514:	45d8      	cmp	r8, fp
   14516:	bf08      	it	eq
   14518:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   1451c:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   1451e:	4648      	mov	r0, r9
   14520:	d016      	beq.n	14550 <ull_rxfifo_alloc+0x68>
   14522:	f7fb fda3 	bl	1006c <mem_acquire>
   14526:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   14528:	4650      	mov	r0, sl
		if (!link) {
   1452a:	b18e      	cbz	r6, 14550 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   1452c:	f7fb fd9e 	bl	1006c <mem_acquire>
		if (!rx) {
   14530:	b188      	cbz	r0, 14556 <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   14532:	2300      	movs	r3, #0
   14534:	6073      	str	r3, [r6, #4]
		rx->link = link;
   14536:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14538:	782a      	ldrb	r2, [r5, #0]
   1453a:	9b00      	ldr	r3, [sp, #0]
   1453c:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   14540:	9b01      	ldr	r3, [sp, #4]
   14542:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   14544:	3c01      	subs	r4, #1
   14546:	b2e4      	uxtb	r4, r4
   14548:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   1454a:	f885 b000 	strb.w	fp, [r5]
   1454e:	d1dd      	bne.n	1450c <ull_rxfifo_alloc+0x24>
}
   14550:	b003      	add	sp, #12
   14552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   14556:	4649      	mov	r1, r9
   14558:	4630      	mov	r0, r6
}
   1455a:	b003      	add	sp, #12
   1455c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   14560:	f7fb bd9a 	b.w	10098 <mem_release>

00014564 <init_reset>:
{
   14564:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   14566:	4c3f      	ldr	r4, [pc, #252]	; (14664 <init_reset+0x100>)
   14568:	4d3f      	ldr	r5, [pc, #252]	; (14668 <init_reset+0x104>)
   1456a:	79a2      	ldrb	r2, [r4, #6]
   1456c:	88a1      	ldrh	r1, [r4, #4]
   1456e:	4e3f      	ldr	r6, [pc, #252]	; (1466c <init_reset+0x108>)
   14570:	2000      	movs	r0, #0
{
   14572:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   14574:	4623      	mov	r3, r4
   14576:	8068      	strh	r0, [r5, #2]
   14578:	f104 0008 	add.w	r0, r4, #8
   1457c:	f7fb fd52 	bl	10024 <mem_init>
   14580:	79e3      	ldrb	r3, [r4, #7]
   14582:	79a2      	ldrb	r2, [r4, #6]
   14584:	1d30      	adds	r0, r6, #4
   14586:	441a      	add	r2, r3
   14588:	2108      	movs	r1, #8
   1458a:	4633      	mov	r3, r6
   1458c:	f7fb fd4a 	bl	10024 <mem_init>
   14590:	9602      	str	r6, [sp, #8]
   14592:	462e      	mov	r6, r5
   14594:	79a3      	ldrb	r3, [r4, #6]
   14596:	f816 0b04 	ldrb.w	r0, [r6], #4
   1459a:	78aa      	ldrb	r2, [r5, #2]
   1459c:	7869      	ldrb	r1, [r5, #1]
   1459e:	9303      	str	r3, [sp, #12]
   145a0:	e9cd 6400 	strd	r6, r4, [sp]
   145a4:	1ceb      	adds	r3, r5, #3
   145a6:	f7ff ff9f 	bl	144e8 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   145aa:	4b31      	ldr	r3, [pc, #196]	; (14670 <init_reset+0x10c>)
   145ac:	2209      	movs	r2, #9
   145ae:	1d18      	adds	r0, r3, #4
   145b0:	2144      	movs	r1, #68	; 0x44
   145b2:	f7fb fd37 	bl	10024 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   145b6:	4b2f      	ldr	r3, [pc, #188]	; (14674 <init_reset+0x110>)
   145b8:	220a      	movs	r2, #10
   145ba:	1d18      	adds	r0, r3, #4
   145bc:	2108      	movs	r1, #8
   145be:	f7fb fd31 	bl	10024 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   145c2:	482c      	ldr	r0, [pc, #176]	; (14674 <init_reset+0x110>)
   145c4:	f7fb fd52 	bl	1006c <mem_acquire>
	LL_ASSERT(link);
   145c8:	4604      	mov	r4, r0
   145ca:	b308      	cbz	r0, 14610 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   145cc:	4a2a      	ldr	r2, [pc, #168]	; (14678 <init_reset+0x114>)
   145ce:	4620      	mov	r0, r4
   145d0:	1f11      	subs	r1, r2, #4
   145d2:	f7fb fd9d 	bl	10110 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   145d6:	4825      	ldr	r0, [pc, #148]	; (1466c <init_reset+0x108>)
   145d8:	f7fb fd48 	bl	1006c <mem_acquire>
	LL_ASSERT(link);
   145dc:	4604      	mov	r4, r0
   145de:	b328      	cbz	r0, 1462c <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   145e0:	4a26      	ldr	r2, [pc, #152]	; (1467c <init_reset+0x118>)
   145e2:	4620      	mov	r0, r4
   145e4:	1f11      	subs	r1, r2, #4
   145e6:	f7fb fd93 	bl	10110 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   145ea:	4822      	ldr	r0, [pc, #136]	; (14674 <init_reset+0x110>)
   145ec:	f7fb fd3e 	bl	1006c <mem_acquire>
	LL_ASSERT(link);
   145f0:	4604      	mov	r4, r0
   145f2:	b348      	cbz	r0, 14648 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   145f4:	4a22      	ldr	r2, [pc, #136]	; (14680 <init_reset+0x11c>)
   145f6:	4620      	mov	r0, r4
   145f8:	1f11      	subs	r1, r2, #4
   145fa:	f7fb fd89 	bl	10110 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   145fe:	4b21      	ldr	r3, [pc, #132]	; (14684 <init_reset+0x120>)
   14600:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   14602:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   14604:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   14606:	f7ff f8cf 	bl	137a8 <rx_alloc>
}
   1460a:	2000      	movs	r0, #0
   1460c:	b004      	add	sp, #16
   1460e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14610:	4a1d      	ldr	r2, [pc, #116]	; (14688 <init_reset+0x124>)
   14612:	491e      	ldr	r1, [pc, #120]	; (1468c <init_reset+0x128>)
   14614:	481e      	ldr	r0, [pc, #120]	; (14690 <init_reset+0x12c>)
   14616:	f640 0302 	movw	r3, #2050	; 0x802
   1461a:	f010 fc74 	bl	24f06 <printk>
   1461e:	4040      	eors	r0, r0
   14620:	f380 8811 	msr	BASEPRI, r0
   14624:	f04f 0003 	mov.w	r0, #3
   14628:	df02      	svc	2
   1462a:	e7cf      	b.n	145cc <init_reset+0x68>
	LL_ASSERT(link);
   1462c:	4a16      	ldr	r2, [pc, #88]	; (14688 <init_reset+0x124>)
   1462e:	4917      	ldr	r1, [pc, #92]	; (1468c <init_reset+0x128>)
   14630:	4817      	ldr	r0, [pc, #92]	; (14690 <init_reset+0x12c>)
   14632:	f640 030a 	movw	r3, #2058	; 0x80a
   14636:	f010 fc66 	bl	24f06 <printk>
   1463a:	4040      	eors	r0, r0
   1463c:	f380 8811 	msr	BASEPRI, r0
   14640:	f04f 0003 	mov.w	r0, #3
   14644:	df02      	svc	2
   14646:	e7cb      	b.n	145e0 <init_reset+0x7c>
	LL_ASSERT(link);
   14648:	4a0f      	ldr	r2, [pc, #60]	; (14688 <init_reset+0x124>)
   1464a:	4910      	ldr	r1, [pc, #64]	; (1468c <init_reset+0x128>)
   1464c:	4810      	ldr	r0, [pc, #64]	; (14690 <init_reset+0x12c>)
   1464e:	f640 0312 	movw	r3, #2066	; 0x812
   14652:	f010 fc58 	bl	24f06 <printk>
   14656:	4040      	eors	r0, r0
   14658:	f380 8811 	msr	BASEPRI, r0
   1465c:	f04f 0003 	mov.w	r0, #3
   14660:	df02      	svc	2
   14662:	e7c7      	b.n	145f4 <init_reset+0x90>
   14664:	20000290 	.word	0x20000290
   14668:	20000368 	.word	0x20000368
   1466c:	20002274 	.word	0x20002274
   14670:	200022f8 	.word	0x200022f8
   14674:	200022a4 	.word	0x200022a4
   14678:	20002574 	.word	0x20002574
   1467c:	2000256c 	.word	0x2000256c
   14680:	20002564 	.word	0x20002564
   14684:	200022a0 	.word	0x200022a0
   14688:	0002c318 	.word	0x0002c318
   1468c:	0002c724 	.word	0x0002c724
   14690:	0002bfdc 	.word	0x0002bfdc

00014694 <ll_init>:
{
   14694:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   14696:	4b30      	ldr	r3, [pc, #192]	; (14758 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   14698:	4d30      	ldr	r5, [pc, #192]	; (1475c <ll_init+0xc8>)
	sem_recv = sem_rx;
   1469a:	6018      	str	r0, [r3, #0]
{
   1469c:	b087      	sub	sp, #28
	cntr_init();
   1469e:	f00a fb33 	bl	1ed08 <cntr_init>
	mayfly_init();
   146a2:	f7fb fd65 	bl	10170 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   146a6:	4a2e      	ldr	r2, [pc, #184]	; (14760 <ll_init+0xcc>)
   146a8:	4c2e      	ldr	r4, [pc, #184]	; (14764 <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   146aa:	492f      	ldr	r1, [pc, #188]	; (14768 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   146ac:	e9cd 2504 	strd	r2, r5, [sp, #16]
   146b0:	4a2e      	ldr	r2, [pc, #184]	; (1476c <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   146b2:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   146b4:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   146b8:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   146ba:	240c      	movs	r4, #12
   146bc:	e9cd 1400 	strd	r1, r4, [sp]
   146c0:	4a2b      	ldr	r2, [pc, #172]	; (14770 <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   146c2:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   146c4:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   146c6:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   146c8:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   146ca:	2000      	movs	r0, #0
   146cc:	2106      	movs	r1, #6
   146ce:	f7fc febb 	bl	11448 <ticker_init>
	LL_ASSERT(!err);
   146d2:	2800      	cmp	r0, #0
   146d4:	d132      	bne.n	1473c <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   146d6:	2201      	movs	r2, #1
   146d8:	2100      	movs	r1, #0
   146da:	4826      	ldr	r0, [pc, #152]	; (14774 <ll_init+0xe0>)
   146dc:	f015 fdb9 	bl	2a252 <z_impl_k_sem_init>
	err = lll_init();
   146e0:	f008 f810 	bl	1c704 <lll_init>
	if (err) {
   146e4:	4604      	mov	r4, r0
   146e6:	b110      	cbz	r0, 146ee <ll_init+0x5a>
}
   146e8:	4620      	mov	r0, r4
   146ea:	b007      	add	sp, #28
   146ec:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   146ee:	f7ff ff39 	bl	14564 <init_reset>
	if (err) {
   146f2:	4604      	mov	r4, r0
   146f4:	2800      	cmp	r0, #0
   146f6:	d1f7      	bne.n	146e8 <ll_init+0x54>
	err = lll_adv_init();
   146f8:	f008 fc68 	bl	1cfcc <lll_adv_init>
	if (err) {
   146fc:	4604      	mov	r4, r0
   146fe:	2800      	cmp	r0, #0
   14700:	d1f2      	bne.n	146e8 <ll_init+0x54>
	err = ull_adv_init();
   14702:	f000 fd07 	bl	15114 <ull_adv_init>
	if (err) {
   14706:	4604      	mov	r4, r0
   14708:	2800      	cmp	r0, #0
   1470a:	d1ed      	bne.n	146e8 <ll_init+0x54>
	err = lll_scan_init();
   1470c:	f009 fbf0 	bl	1def0 <lll_scan_init>
	if (err) {
   14710:	4604      	mov	r4, r0
   14712:	2800      	cmp	r0, #0
   14714:	d1e8      	bne.n	146e8 <ll_init+0x54>
	err = ull_scan_init();
   14716:	f000 febb 	bl	15490 <ull_scan_init>
	if (err) {
   1471a:	4604      	mov	r4, r0
   1471c:	2800      	cmp	r0, #0
   1471e:	d1e3      	bne.n	146e8 <ll_init+0x54>
	err = lll_conn_init();
   14720:	f009 fd14 	bl	1e14c <lll_conn_init>
	if (err) {
   14724:	4604      	mov	r4, r0
   14726:	2800      	cmp	r0, #0
   14728:	d1de      	bne.n	146e8 <ll_init+0x54>
	err = ull_conn_init();
   1472a:	f002 f92b 	bl	16984 <ull_conn_init>
	if (err) {
   1472e:	4604      	mov	r4, r0
   14730:	2800      	cmp	r0, #0
   14732:	d1d9      	bne.n	146e8 <ll_init+0x54>
		ull_filter_reset(true);
   14734:	2001      	movs	r0, #1
   14736:	f007 f8a1 	bl	1b87c <ull_filter_reset>
	return  0;
   1473a:	e7d5      	b.n	146e8 <ll_init+0x54>
	LL_ASSERT(!err);
   1473c:	4a0e      	ldr	r2, [pc, #56]	; (14778 <ll_init+0xe4>)
   1473e:	490f      	ldr	r1, [pc, #60]	; (1477c <ll_init+0xe8>)
   14740:	480f      	ldr	r0, [pc, #60]	; (14780 <ll_init+0xec>)
   14742:	f240 230d 	movw	r3, #525	; 0x20d
   14746:	f010 fbde 	bl	24f06 <printk>
   1474a:	4040      	eors	r0, r0
   1474c:	f380 8811 	msr	BASEPRI, r0
   14750:	f04f 0003 	mov.w	r0, #3
   14754:	df02      	svc	2
   14756:	e7be      	b.n	146d6 <ll_init+0x42>
   14758:	20002578 	.word	0x20002578
   1475c:	0001fa49 	.word	0x0001fa49
   14760:	0001f8f9 	.word	0x0001f8f9
   14764:	0001f895 	.word	0x0001f895
   14768:	20002924 	.word	0x20002924
   1476c:	200026b4 	.word	0x200026b4
   14770:	20002594 	.word	0x20002594
   14774:	2000257c 	.word	0x2000257c
   14778:	0002c318 	.word	0x0002c318
   1477c:	0002c354 	.word	0x0002c354
   14780:	0002bfdc 	.word	0x0002bfdc

00014784 <ll_reset>:
{
   14784:	b510      	push	{r4, lr}
   14786:	b086      	sub	sp, #24
	err = ull_adv_reset();
   14788:	f000 fcd4 	bl	15134 <ull_adv_reset>
	LL_ASSERT(!err);
   1478c:	2800      	cmp	r0, #0
   1478e:	d133      	bne.n	147f8 <ll_reset+0x74>
	err = ull_scan_reset();
   14790:	f000 fefe 	bl	15590 <ull_scan_reset>
	LL_ASSERT(!err);
   14794:	2800      	cmp	r0, #0
   14796:	d140      	bne.n	1481a <ll_reset+0x96>
	err = ull_conn_reset();
   14798:	f002 f8f6 	bl	16988 <ull_conn_reset>
	LL_ASSERT(!err);
   1479c:	2800      	cmp	r0, #0
   1479e:	d14d      	bne.n	1483c <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   147a0:	4b43      	ldr	r3, [pc, #268]	; (148b0 <ll_reset+0x12c>)
   147a2:	2400      	movs	r4, #0
   147a4:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   147a6:	4620      	mov	r0, r4
   147a8:	f007 f868 	bl	1b87c <ull_filter_reset>
	MFIFO_INIT(prep);
   147ac:	4941      	ldr	r1, [pc, #260]	; (148b4 <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   147ae:	4a42      	ldr	r2, [pc, #264]	; (148b8 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   147b0:	4b42      	ldr	r3, [pc, #264]	; (148bc <ll_reset+0x138>)
	MFIFO_INIT(prep);
   147b2:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   147b4:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   147b6:	805c      	strh	r4, [r3, #2]
   147b8:	2201      	movs	r2, #1
   147ba:	4621      	mov	r1, r4
   147bc:	4668      	mov	r0, sp
   147be:	f015 fd48 	bl	2a252 <z_impl_k_sem_init>
		mfy.param = &sem;
   147c2:	4b3f      	ldr	r3, [pc, #252]	; (148c0 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   147c4:	4622      	mov	r2, r4
   147c6:	4621      	mov	r1, r4
   147c8:	2003      	movs	r0, #3
		mfy.param = &sem;
   147ca:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   147ce:	f7fb fd21 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!retval);
   147d2:	2800      	cmp	r0, #0
   147d4:	d15d      	bne.n	14892 <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   147d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   147da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   147de:	4668      	mov	r0, sp
   147e0:	f00d fe68 	bl	224b4 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   147e4:	f000 fcc0 	bl	15168 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   147e8:	2800      	cmp	r0, #0
   147ea:	d144      	bne.n	14876 <ll_reset+0xf2>
	err = init_reset();
   147ec:	f7ff feba 	bl	14564 <init_reset>
	LL_ASSERT(!err);
   147f0:	2800      	cmp	r0, #0
   147f2:	d131      	bne.n	14858 <ll_reset+0xd4>
}
   147f4:	b006      	add	sp, #24
   147f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   147f8:	4a32      	ldr	r2, [pc, #200]	; (148c4 <ll_reset+0x140>)
   147fa:	4933      	ldr	r1, [pc, #204]	; (148c8 <ll_reset+0x144>)
   147fc:	4833      	ldr	r0, [pc, #204]	; (148cc <ll_reset+0x148>)
   147fe:	f240 23ad 	movw	r3, #685	; 0x2ad
   14802:	f010 fb80 	bl	24f06 <printk>
   14806:	4040      	eors	r0, r0
   14808:	f380 8811 	msr	BASEPRI, r0
   1480c:	f04f 0003 	mov.w	r0, #3
   14810:	df02      	svc	2
	err = ull_scan_reset();
   14812:	f000 febd 	bl	15590 <ull_scan_reset>
	LL_ASSERT(!err);
   14816:	2800      	cmp	r0, #0
   14818:	d0be      	beq.n	14798 <ll_reset+0x14>
   1481a:	4a2a      	ldr	r2, [pc, #168]	; (148c4 <ll_reset+0x140>)
   1481c:	492a      	ldr	r1, [pc, #168]	; (148c8 <ll_reset+0x144>)
   1481e:	482b      	ldr	r0, [pc, #172]	; (148cc <ll_reset+0x148>)
   14820:	f240 23b3 	movw	r3, #691	; 0x2b3
   14824:	f010 fb6f 	bl	24f06 <printk>
   14828:	4040      	eors	r0, r0
   1482a:	f380 8811 	msr	BASEPRI, r0
   1482e:	f04f 0003 	mov.w	r0, #3
   14832:	df02      	svc	2
	err = ull_conn_reset();
   14834:	f002 f8a8 	bl	16988 <ull_conn_reset>
	LL_ASSERT(!err);
   14838:	2800      	cmp	r0, #0
   1483a:	d0b1      	beq.n	147a0 <ll_reset+0x1c>
   1483c:	4a21      	ldr	r2, [pc, #132]	; (148c4 <ll_reset+0x140>)
   1483e:	4922      	ldr	r1, [pc, #136]	; (148c8 <ll_reset+0x144>)
   14840:	4822      	ldr	r0, [pc, #136]	; (148cc <ll_reset+0x148>)
   14842:	f240 23de 	movw	r3, #734	; 0x2de
   14846:	f010 fb5e 	bl	24f06 <printk>
   1484a:	4040      	eors	r0, r0
   1484c:	f380 8811 	msr	BASEPRI, r0
   14850:	f04f 0003 	mov.w	r0, #3
   14854:	df02      	svc	2
   14856:	e7a3      	b.n	147a0 <ll_reset+0x1c>
	LL_ASSERT(!err);
   14858:	4a1a      	ldr	r2, [pc, #104]	; (148c4 <ll_reset+0x140>)
   1485a:	491b      	ldr	r1, [pc, #108]	; (148c8 <ll_reset+0x144>)
   1485c:	481b      	ldr	r0, [pc, #108]	; (148cc <ll_reset+0x148>)
   1485e:	f240 3327 	movw	r3, #807	; 0x327
   14862:	f010 fb50 	bl	24f06 <printk>
   14866:	4040      	eors	r0, r0
   14868:	f380 8811 	msr	BASEPRI, r0
   1486c:	f04f 0003 	mov.w	r0, #3
   14870:	df02      	svc	2
}
   14872:	b006      	add	sp, #24
   14874:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   14876:	4a13      	ldr	r2, [pc, #76]	; (148c4 <ll_reset+0x140>)
   14878:	4913      	ldr	r1, [pc, #76]	; (148c8 <ll_reset+0x144>)
   1487a:	4814      	ldr	r0, [pc, #80]	; (148cc <ll_reset+0x148>)
   1487c:	f240 331a 	movw	r3, #794	; 0x31a
   14880:	f010 fb41 	bl	24f06 <printk>
   14884:	4040      	eors	r0, r0
   14886:	f380 8811 	msr	BASEPRI, r0
   1488a:	f04f 0003 	mov.w	r0, #3
   1488e:	df02      	svc	2
   14890:	e7ac      	b.n	147ec <ll_reset+0x68>
		LL_ASSERT(!retval);
   14892:	4a0c      	ldr	r2, [pc, #48]	; (148c4 <ll_reset+0x140>)
   14894:	490e      	ldr	r1, [pc, #56]	; (148d0 <ll_reset+0x14c>)
   14896:	480d      	ldr	r0, [pc, #52]	; (148cc <ll_reset+0x148>)
   14898:	f240 330d 	movw	r3, #781	; 0x30d
   1489c:	f010 fb33 	bl	24f06 <printk>
   148a0:	4040      	eors	r0, r0
   148a2:	f380 8811 	msr	BASEPRI, r0
   148a6:	f04f 0003 	mov.w	r0, #3
   148aa:	df02      	svc	2
   148ac:	e793      	b.n	147d6 <ll_reset+0x52>
   148ae:	bf00      	nop
   148b0:	200004ac 	.word	0x200004ac
   148b4:	200003a8 	.word	0x200003a8
   148b8:	20000390 	.word	0x20000390
   148bc:	20000380 	.word	0x20000380
   148c0:	200004e0 	.word	0x200004e0
   148c4:	0002c318 	.word	0x0002c318
   148c8:	0002c354 	.word	0x0002c354
   148cc:	0002bfdc 	.word	0x0002bfdc
   148d0:	0002c47c 	.word	0x0002c47c

000148d4 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   148d4:	b510      	push	{r4, lr}
   148d6:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   148d8:	2400      	movs	r4, #0
   148da:	e9cd 4400 	strd	r4, r4, [sp]
   148de:	9b04      	ldr	r3, [sp, #16]
   148e0:	f008 f934 	bl	1cb4c <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   148e4:	b002      	add	sp, #8
   148e6:	bd10      	pop	{r4, pc}

000148e8 <lll_resume>:

void lll_resume(void *param)
{
   148e8:	b510      	push	{r4, lr}
   148ea:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   148ec:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   148ee:	691a      	ldr	r2, [r3, #16]
   148f0:	6999      	ldr	r1, [r3, #24]
   148f2:	2401      	movs	r4, #1
{
   148f4:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   148f6:	4020      	ands	r0, r4
   148f8:	e9cd 0400 	strd	r0, r4, [sp]
   148fc:	6958      	ldr	r0, [r3, #20]
   148fe:	f008 f925 	bl	1cb4c <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   14902:	b108      	cbz	r0, 14908 <lll_resume+0x20>
   14904:	3077      	adds	r0, #119	; 0x77
   14906:	d101      	bne.n	1490c <lll_resume+0x24>
}
   14908:	b002      	add	sp, #8
   1490a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1490c:	4a06      	ldr	r2, [pc, #24]	; (14928 <lll_resume+0x40>)
   1490e:	4907      	ldr	r1, [pc, #28]	; (1492c <lll_resume+0x44>)
   14910:	4807      	ldr	r0, [pc, #28]	; (14930 <lll_resume+0x48>)
   14912:	234f      	movs	r3, #79	; 0x4f
   14914:	f010 faf7 	bl	24f06 <printk>
   14918:	4040      	eors	r0, r0
   1491a:	f380 8811 	msr	BASEPRI, r0
   1491e:	f04f 0003 	mov.w	r0, #3
   14922:	df02      	svc	2
}
   14924:	b002      	add	sp, #8
   14926:	bd10      	pop	{r4, pc}
   14928:	0002c490 	.word	0x0002c490
   1492c:	0002c4d4 	.word	0x0002c4d4
   14930:	0002bfdc 	.word	0x0002bfdc

00014934 <ticker_stop_cb>:
{
   14934:	b530      	push	{r4, r5, lr}
   14936:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14938:	4b19      	ldr	r3, [pc, #100]	; (149a0 <ticker_stop_cb+0x6c>)
{
   1493a:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1493c:	4a19      	ldr	r2, [pc, #100]	; (149a4 <ticker_stop_cb+0x70>)
   1493e:	1aeb      	subs	r3, r5, r3
   14940:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14944:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   14948:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1494c:	d119      	bne.n	14982 <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1494e:	1ca2      	adds	r2, r4, #2
   14950:	4b15      	ldr	r3, [pc, #84]	; (149a8 <ticker_stop_cb+0x74>)
   14952:	9500      	str	r5, [sp, #0]
   14954:	b2d2      	uxtb	r2, r2
   14956:	2101      	movs	r1, #1
   14958:	2000      	movs	r0, #0
   1495a:	f7fc feb1 	bl	116c0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1495e:	f030 0302 	bics.w	r3, r0, #2
   14962:	d00c      	beq.n	1497e <ticker_stop_cb+0x4a>
   14964:	4a11      	ldr	r2, [pc, #68]	; (149ac <ticker_stop_cb+0x78>)
   14966:	4912      	ldr	r1, [pc, #72]	; (149b0 <ticker_stop_cb+0x7c>)
   14968:	4812      	ldr	r0, [pc, #72]	; (149b4 <ticker_stop_cb+0x80>)
   1496a:	f640 03d2 	movw	r3, #2258	; 0x8d2
   1496e:	f010 faca 	bl	24f06 <printk>
   14972:	4040      	eors	r0, r0
   14974:	f380 8811 	msr	BASEPRI, r0
   14978:	f04f 0003 	mov.w	r0, #3
   1497c:	df02      	svc	2
}
   1497e:	b003      	add	sp, #12
   14980:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14982:	4a0a      	ldr	r2, [pc, #40]	; (149ac <ticker_stop_cb+0x78>)
   14984:	490c      	ldr	r1, [pc, #48]	; (149b8 <ticker_stop_cb+0x84>)
   14986:	480b      	ldr	r0, [pc, #44]	; (149b4 <ticker_stop_cb+0x80>)
   14988:	f640 03cd 	movw	r3, #2253	; 0x8cd
   1498c:	f010 fabb 	bl	24f06 <printk>
   14990:	4040      	eors	r0, r0
   14992:	f380 8811 	msr	BASEPRI, r0
   14996:	f04f 0003 	mov.w	r0, #3
   1499a:	df02      	svc	2
   1499c:	e7d7      	b.n	1494e <ticker_stop_cb+0x1a>
   1499e:	bf00      	nop
   149a0:	2000295c 	.word	0x2000295c
   149a4:	8d3dcb09 	.word	0x8d3dcb09
   149a8:	000149bd 	.word	0x000149bd
   149ac:	0002c4fc 	.word	0x0002c4fc
   149b0:	0002c548 	.word	0x0002c548
   149b4:	0002bfdc 	.word	0x0002bfdc
   149b8:	0002c53c 	.word	0x0002c53c

000149bc <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   149bc:	b100      	cbz	r0, 149c0 <ticker_stop_op_cb+0x4>
   149be:	4770      	bx	lr
	mfy.param = param;
   149c0:	4b0c      	ldr	r3, [pc, #48]	; (149f4 <ticker_stop_op_cb+0x38>)
{
   149c2:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   149c4:	4602      	mov	r2, r0
   149c6:	460c      	mov	r4, r1
   149c8:	2002      	movs	r0, #2
   149ca:	2101      	movs	r1, #1
	mfy.param = param;
   149cc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   149ce:	f7fb fc21 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!ret);
   149d2:	b900      	cbnz	r0, 149d6 <ticker_stop_op_cb+0x1a>
}
   149d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   149d6:	4a08      	ldr	r2, [pc, #32]	; (149f8 <ticker_stop_op_cb+0x3c>)
   149d8:	4908      	ldr	r1, [pc, #32]	; (149fc <ticker_stop_op_cb+0x40>)
   149da:	4809      	ldr	r0, [pc, #36]	; (14a00 <ticker_stop_op_cb+0x44>)
   149dc:	f640 03ee 	movw	r3, #2286	; 0x8ee
   149e0:	f010 fa91 	bl	24f06 <printk>
   149e4:	4040      	eors	r0, r0
   149e6:	f380 8811 	msr	BASEPRI, r0
   149ea:	f04f 0003 	mov.w	r0, #3
   149ee:	df02      	svc	2
}
   149f0:	bd10      	pop	{r4, pc}
   149f2:	bf00      	nop
   149f4:	20000540 	.word	0x20000540
   149f8:	0002c4fc 	.word	0x0002c4fc
   149fc:	0002c454 	.word	0x0002c454
   14a00:	0002bfdc 	.word	0x0002bfdc

00014a04 <disabled_cb>:
{
   14a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   14a06:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   14a08:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   14a0a:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14a0c:	b1d7      	cbz	r7, 14a44 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   14a0e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   14a10:	2300      	movs	r3, #0
   14a12:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   14a14:	b34c      	cbz	r4, 14a6a <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   14a16:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14a18:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   14a1a:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14a1c:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   14a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14a22:	80e3      	strh	r3, [r4, #6]
__ssp_bos_icheck3(memset, void *, int)
   14a24:	221e      	movs	r2, #30
   14a26:	f104 001c 	add.w	r0, r4, #28
   14a2a:	f016 f837 	bl	2aa9c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   14a2e:	233c      	movs	r3, #60	; 0x3c
   14a30:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   14a32:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   14a34:	4621      	mov	r1, r4
   14a36:	4638      	mov	r0, r7
   14a38:	f7ff fab4 	bl	13fa4 <ll_rx_put>
}
   14a3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   14a40:	f7ff baba 	b.w	13fb8 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   14a44:	4a10      	ldr	r2, [pc, #64]	; (14a88 <disabled_cb+0x84>)
   14a46:	4911      	ldr	r1, [pc, #68]	; (14a8c <disabled_cb+0x88>)
   14a48:	4811      	ldr	r0, [pc, #68]	; (14a90 <disabled_cb+0x8c>)
   14a4a:	f640 131a 	movw	r3, #2330	; 0x91a
   14a4e:	f010 fa5a 	bl	24f06 <printk>
   14a52:	4040      	eors	r0, r0
   14a54:	f380 8811 	msr	BASEPRI, r0
   14a58:	f04f 0003 	mov.w	r0, #3
   14a5c:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   14a5e:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   14a60:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   14a62:	2300      	movs	r3, #0
   14a64:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   14a66:	2c00      	cmp	r4, #0
   14a68:	d1d5      	bne.n	14a16 <disabled_cb+0x12>
   14a6a:	4a07      	ldr	r2, [pc, #28]	; (14a88 <disabled_cb+0x84>)
   14a6c:	4909      	ldr	r1, [pc, #36]	; (14a94 <disabled_cb+0x90>)
   14a6e:	4808      	ldr	r0, [pc, #32]	; (14a90 <disabled_cb+0x8c>)
   14a70:	f640 131e 	movw	r3, #2334	; 0x91e
   14a74:	f010 fa47 	bl	24f06 <printk>
   14a78:	4040      	eors	r0, r0
   14a7a:	f380 8811 	msr	BASEPRI, r0
   14a7e:	f04f 0003 	mov.w	r0, #3
   14a82:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   14a84:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   14a86:	e7c6      	b.n	14a16 <disabled_cb+0x12>
   14a88:	0002c4fc 	.word	0x0002c4fc
   14a8c:	0002c564 	.word	0x0002c564
   14a90:	0002bfdc 	.word	0x0002bfdc
   14a94:	0002c578 	.word	0x0002c578

00014a98 <adv_disable>:
{
   14a98:	b538      	push	{r3, r4, r5, lr}
   14a9a:	4604      	mov	r4, r0
   14a9c:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   14aa0:	b353      	cbz	r3, 14af8 <adv_disable+0x60>
		mfy.param = &adv->lll;
   14aa2:	4d17      	ldr	r5, [pc, #92]	; (14b00 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   14aa4:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   14aa6:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   14aa8:	b16b      	cbz	r3, 14ac6 <adv_disable+0x2e>
   14aaa:	4a16      	ldr	r2, [pc, #88]	; (14b04 <adv_disable+0x6c>)
   14aac:	4916      	ldr	r1, [pc, #88]	; (14b08 <adv_disable+0x70>)
   14aae:	4817      	ldr	r0, [pc, #92]	; (14b0c <adv_disable+0x74>)
   14ab0:	f640 1303 	movw	r3, #2307	; 0x903
   14ab4:	f010 fa27 	bl	24f06 <printk>
   14ab8:	4040      	eors	r0, r0
   14aba:	f380 8811 	msr	BASEPRI, r0
   14abe:	f04f 0003 	mov.w	r0, #3
   14ac2:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   14ac4:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   14ac6:	4912      	ldr	r1, [pc, #72]	; (14b10 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14ac8:	4b0d      	ldr	r3, [pc, #52]	; (14b00 <adv_disable+0x68>)
   14aca:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   14acc:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14ad0:	4611      	mov	r1, r2
   14ad2:	2001      	movs	r0, #1
   14ad4:	f7fb fb9e 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14ad8:	b900      	cbnz	r0, 14adc <adv_disable+0x44>
}
   14ada:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   14adc:	4a09      	ldr	r2, [pc, #36]	; (14b04 <adv_disable+0x6c>)
   14ade:	490d      	ldr	r1, [pc, #52]	; (14b14 <adv_disable+0x7c>)
   14ae0:	480a      	ldr	r0, [pc, #40]	; (14b0c <adv_disable+0x74>)
   14ae2:	f640 130a 	movw	r3, #2314	; 0x90a
   14ae6:	f010 fa0e 	bl	24f06 <printk>
   14aea:	4040      	eors	r0, r0
   14aec:	f380 8811 	msr	BASEPRI, r0
   14af0:	f04f 0003 	mov.w	r0, #3
   14af4:	df02      	svc	2
}
   14af6:	bd38      	pop	{r3, r4, r5, pc}
   14af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   14afc:	f7ff bf82 	b.w	14a04 <disabled_cb>
   14b00:	20000530 	.word	0x20000530
   14b04:	0002c4fc 	.word	0x0002c4fc
   14b08:	0002c590 	.word	0x0002c590
   14b0c:	0002bfdc 	.word	0x0002bfdc
   14b10:	00014a05 	.word	0x00014a05
   14b14:	0002c454 	.word	0x0002c454

00014b18 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b18:	b900      	cbnz	r0, 14b1c <ticker_update_op_cb+0x4>
   14b1a:	4770      	bx	lr
{
   14b1c:	b510      	push	{r4, lr}
   14b1e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b20:	f7ff faf6 	bl	14110 <ull_disable_mark_get>
   14b24:	4284      	cmp	r4, r0
   14b26:	d00c      	beq.n	14b42 <ticker_update_op_cb+0x2a>
   14b28:	4a06      	ldr	r2, [pc, #24]	; (14b44 <ticker_update_op_cb+0x2c>)
   14b2a:	4907      	ldr	r1, [pc, #28]	; (14b48 <ticker_update_op_cb+0x30>)
   14b2c:	4807      	ldr	r0, [pc, #28]	; (14b4c <ticker_update_op_cb+0x34>)
   14b2e:	f640 03bf 	movw	r3, #2239	; 0x8bf
   14b32:	f010 f9e8 	bl	24f06 <printk>
   14b36:	4040      	eors	r0, r0
   14b38:	f380 8811 	msr	BASEPRI, r0
   14b3c:	f04f 0003 	mov.w	r0, #3
   14b40:	df02      	svc	2
}
   14b42:	bd10      	pop	{r4, pc}
   14b44:	0002c4fc 	.word	0x0002c4fc
   14b48:	0002c5a4 	.word	0x0002c5a4
   14b4c:	0002bfdc 	.word	0x0002bfdc

00014b50 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   14b50:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   14b52:	4b13      	ldr	r3, [pc, #76]	; (14ba0 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   14b54:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14b56:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   14b5a:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   14b5e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   14b62:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   14b66:	f022 0202 	bic.w	r2, r2, #2
   14b6a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   14b6c:	f042 020e 	orr.w	r2, r2, #14
   14b70:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   14b72:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   14b74:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   14b76:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   14b7a:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   14b7e:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   14b82:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   14b86:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   14b88:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14b8a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   14b8e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14b92:	2204      	movs	r2, #4
   14b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   14b96:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   14b98:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   14b9a:	f85d fb04 	ldr.w	pc, [sp], #4
   14b9e:	bf00      	nop
   14ba0:	2000295c 	.word	0x2000295c

00014ba4 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   14ba4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   14ba6:	4c1b      	ldr	r4, [pc, #108]	; (14c14 <conn_release.constprop.0+0x70>)
   14ba8:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   14baa:	6dab      	ldr	r3, [r5, #88]	; 0x58
   14bac:	b163      	cbz	r3, 14bc8 <conn_release.constprop.0+0x24>
   14bae:	4a1a      	ldr	r2, [pc, #104]	; (14c18 <conn_release.constprop.0+0x74>)
   14bb0:	491a      	ldr	r1, [pc, #104]	; (14c1c <conn_release.constprop.0+0x78>)
   14bb2:	481b      	ldr	r0, [pc, #108]	; (14c20 <conn_release.constprop.0+0x7c>)
   14bb4:	f640 1348 	movw	r3, #2376	; 0x948
   14bb8:	f010 f9a5 	bl	24f06 <printk>
   14bbc:	4040      	eors	r0, r0
   14bbe:	f380 8811 	msr	BASEPRI, r0
   14bc2:	f04f 0003 	mov.w	r0, #3
   14bc6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14bc8:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   14bcc:	f105 0048 	add.w	r0, r5, #72	; 0x48
   14bd0:	f7fb faa2 	bl	10118 <memq_deinit>
	LL_ASSERT(link);
   14bd4:	4606      	mov	r6, r0
   14bd6:	b170      	cbz	r0, 14bf6 <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   14bd8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   14bda:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   14bdc:	f001 fbd2 	bl	16384 <ll_conn_release>
	adv->lll.conn = NULL;
   14be0:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   14be2:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   14be4:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   14be6:	f7ff f9d7 	bl	13f98 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   14bea:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   14bec:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   14bee:	f7ff f9c7 	bl	13f80 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14bf2:	6625      	str	r5, [r4, #96]	; 0x60
}
   14bf4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14bf6:	4a08      	ldr	r2, [pc, #32]	; (14c18 <conn_release.constprop.0+0x74>)
   14bf8:	490a      	ldr	r1, [pc, #40]	; (14c24 <conn_release.constprop.0+0x80>)
   14bfa:	4809      	ldr	r0, [pc, #36]	; (14c20 <conn_release.constprop.0+0x7c>)
   14bfc:	f640 134a 	movw	r3, #2378	; 0x94a
   14c00:	f010 f981 	bl	24f06 <printk>
   14c04:	4040      	eors	r0, r0
   14c06:	f380 8811 	msr	BASEPRI, r0
   14c0a:	f04f 0003 	mov.w	r0, #3
   14c0e:	df02      	svc	2
   14c10:	e7e2      	b.n	14bd8 <conn_release.constprop.0+0x34>
   14c12:	bf00      	nop
   14c14:	2000295c 	.word	0x2000295c
   14c18:	0002c4fc 	.word	0x0002c4fc
   14c1c:	0002c5d4 	.word	0x0002c5d4
   14c20:	0002bfdc 	.word	0x0002bfdc
   14c24:	0002c724 	.word	0x0002c724

00014c28 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   14c28:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   14c2a:	4c50      	ldr	r4, [pc, #320]	; (14d6c <disable.part.0+0x144>)
static inline uint8_t disable(uint8_t handle)
   14c2c:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   14c2e:	4620      	mov	r0, r4
   14c30:	f7ff fa58 	bl	140e4 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   14c34:	4284      	cmp	r4, r0
   14c36:	d00c      	beq.n	14c52 <disable.part.0+0x2a>
   14c38:	4a4d      	ldr	r2, [pc, #308]	; (14d70 <disable.part.0+0x148>)
   14c3a:	494e      	ldr	r1, [pc, #312]	; (14d74 <disable.part.0+0x14c>)
   14c3c:	484e      	ldr	r0, [pc, #312]	; (14d78 <disable.part.0+0x150>)
   14c3e:	f640 13ff 	movw	r3, #2559	; 0x9ff
   14c42:	f010 f960 	bl	24f06 <printk>
   14c46:	4040      	eors	r0, r0
   14c48:	f380 8811 	msr	BASEPRI, r0
   14c4c:	f04f 0003 	mov.w	r0, #3
   14c50:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   14c52:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   14c56:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14c58:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14c5a:	d50d      	bpl.n	14c78 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   14c5c:	2102      	movs	r1, #2
   14c5e:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14c60:	4b46      	ldr	r3, [pc, #280]	; (14d7c <disable.part.0+0x154>)
   14c62:	9500      	str	r5, [sp, #0]
   14c64:	2103      	movs	r1, #3
   14c66:	2201      	movs	r2, #1
   14c68:	2000      	movs	r0, #0
   14c6a:	f7fc fd29 	bl	116c0 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   14c6e:	4629      	mov	r1, r5
   14c70:	f7ff fa10 	bl	14094 <ull_ticker_status_take>
		if (ret) {
   14c74:	2800      	cmp	r0, #0
   14c76:	d15e      	bne.n	14d36 <disable.part.0+0x10e>
	ret_cb = TICKER_STATUS_BUSY;
   14c78:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14c7a:	2103      	movs	r1, #3
   14c7c:	4b3f      	ldr	r3, [pc, #252]	; (14d7c <disable.part.0+0x154>)
   14c7e:	9500      	str	r5, [sp, #0]
   14c80:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   14c82:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14c84:	f7fc fd1c 	bl	116c0 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14c88:	4629      	mov	r1, r5
   14c8a:	f7ff fa03 	bl	14094 <ull_ticker_status_take>
	if (ret) {
   14c8e:	bb50      	cbnz	r0, 14ce6 <disable.part.0+0xbe>
	err = ull_disable(&adv->lll);
   14c90:	483b      	ldr	r0, [pc, #236]	; (14d80 <disable.part.0+0x158>)
   14c92:	f7ff fa5f 	bl	14154 <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   14c96:	b108      	cbz	r0, 14c9c <disable.part.0+0x74>
   14c98:	3078      	adds	r0, #120	; 0x78
   14c9a:	d139      	bne.n	14d10 <disable.part.0+0xe8>
	mark = ull_disable_unmark(adv);
   14c9c:	4833      	ldr	r0, [pc, #204]	; (14d6c <disable.part.0+0x144>)
   14c9e:	f7ff fa2b 	bl	140f8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14ca2:	4284      	cmp	r4, r0
   14ca4:	d00c      	beq.n	14cc0 <disable.part.0+0x98>
   14ca6:	4a32      	ldr	r2, [pc, #200]	; (14d70 <disable.part.0+0x148>)
   14ca8:	4932      	ldr	r1, [pc, #200]	; (14d74 <disable.part.0+0x14c>)
   14caa:	4833      	ldr	r0, [pc, #204]	; (14d78 <disable.part.0+0x150>)
   14cac:	f640 2321 	movw	r3, #2593	; 0xa21
   14cb0:	f010 f929 	bl	24f06 <printk>
   14cb4:	4040      	eors	r0, r0
   14cb6:	f380 8811 	msr	BASEPRI, r0
   14cba:	f04f 0003 	mov.w	r0, #3
   14cbe:	df02      	svc	2
	if (adv->lll.conn) {
   14cc0:	6a23      	ldr	r3, [r4, #32]
   14cc2:	b10b      	cbz	r3, 14cc8 <disable.part.0+0xa0>
		conn_release(adv);
   14cc4:	f7ff ff6e 	bl	14ba4 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   14cc8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   14ccc:	f36f 0300 	bfc	r3, #0, #1
   14cd0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   14cd4:	2000      	movs	r0, #0
   14cd6:	f000 fc93 	bl	15600 <ull_scan_is_enabled_get>
   14cda:	4604      	mov	r4, r0
   14cdc:	2800      	cmp	r0, #0
   14cde:	d03f      	beq.n	14d60 <disable.part.0+0x138>
	return 0;
   14ce0:	2000      	movs	r0, #0
}
   14ce2:	b005      	add	sp, #20
   14ce4:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   14ce6:	4821      	ldr	r0, [pc, #132]	; (14d6c <disable.part.0+0x144>)
   14ce8:	f7ff fa06 	bl	140f8 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   14cec:	4284      	cmp	r4, r0
   14cee:	d034      	beq.n	14d5a <disable.part.0+0x132>
   14cf0:	4a1f      	ldr	r2, [pc, #124]	; (14d70 <disable.part.0+0x148>)
   14cf2:	4920      	ldr	r1, [pc, #128]	; (14d74 <disable.part.0+0x14c>)
   14cf4:	4820      	ldr	r0, [pc, #128]	; (14d78 <disable.part.0+0x150>)
   14cf6:	f640 2318 	movw	r3, #2584	; 0xa18
   14cfa:	f010 f904 	bl	24f06 <printk>
   14cfe:	4040      	eors	r0, r0
   14d00:	f380 8811 	msr	BASEPRI, r0
   14d04:	f04f 0003 	mov.w	r0, #3
   14d08:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14d0a:	200c      	movs	r0, #12
}
   14d0c:	b005      	add	sp, #20
   14d0e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   14d10:	4a17      	ldr	r2, [pc, #92]	; (14d70 <disable.part.0+0x148>)
   14d12:	491c      	ldr	r1, [pc, #112]	; (14d84 <disable.part.0+0x15c>)
   14d14:	4818      	ldr	r0, [pc, #96]	; (14d78 <disable.part.0+0x150>)
   14d16:	f640 231e 	movw	r3, #2590	; 0xa1e
   14d1a:	f010 f8f4 	bl	24f06 <printk>
   14d1e:	4040      	eors	r0, r0
   14d20:	f380 8811 	msr	BASEPRI, r0
   14d24:	f04f 0003 	mov.w	r0, #3
   14d28:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   14d2a:	4810      	ldr	r0, [pc, #64]	; (14d6c <disable.part.0+0x144>)
   14d2c:	f7ff f9e4 	bl	140f8 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14d30:	4284      	cmp	r4, r0
   14d32:	d1b8      	bne.n	14ca6 <disable.part.0+0x7e>
   14d34:	e7c4      	b.n	14cc0 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   14d36:	480d      	ldr	r0, [pc, #52]	; (14d6c <disable.part.0+0x144>)
   14d38:	f7ff f9de 	bl	140f8 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   14d3c:	4284      	cmp	r4, r0
   14d3e:	d00c      	beq.n	14d5a <disable.part.0+0x132>
   14d40:	4a0b      	ldr	r2, [pc, #44]	; (14d70 <disable.part.0+0x148>)
   14d42:	490c      	ldr	r1, [pc, #48]	; (14d74 <disable.part.0+0x14c>)
   14d44:	480c      	ldr	r0, [pc, #48]	; (14d78 <disable.part.0+0x150>)
   14d46:	f640 230a 	movw	r3, #2570	; 0xa0a
   14d4a:	f010 f8dc 	bl	24f06 <printk>
   14d4e:	4040      	eors	r0, r0
   14d50:	f380 8811 	msr	BASEPRI, r0
   14d54:	f04f 0003 	mov.w	r0, #3
   14d58:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   14d5a:	200c      	movs	r0, #12
}
   14d5c:	b005      	add	sp, #20
   14d5e:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   14d60:	f006 fe0c 	bl	1b97c <ull_filter_adv_scan_state_cb>
	return 0;
   14d64:	4620      	mov	r0, r4
}
   14d66:	b005      	add	sp, #20
   14d68:	bd30      	pop	{r4, r5, pc}
   14d6a:	bf00      	nop
   14d6c:	2000295c 	.word	0x2000295c
   14d70:	0002c4fc 	.word	0x0002c4fc
   14d74:	0002c5e8 	.word	0x0002c5e8
   14d78:	0002bfdc 	.word	0x0002bfdc
   14d7c:	000135c5 	.word	0x000135c5
   14d80:	20002978 	.word	0x20002978
   14d84:	0002c5f4 	.word	0x0002c5f4

00014d88 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   14d88:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   14d8a:	7804      	ldrb	r4, [r0, #0]
   14d8c:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   14d90:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   14d92:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   14d94:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   14d98:	d01f      	beq.n	14dda <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14d9a:	2c01      	cmp	r4, #1
   14d9c:	d009      	beq.n	14db2 <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   14d9e:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   14da0:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   14da2:	b18c      	cbz	r4, 14dc8 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   14da4:	2c06      	cmp	r4, #6
   14da6:	d00f      	beq.n	14dc8 <adv_time_get.constprop.0.isra.0+0x40>
   14da8:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   14dac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   14db0:	e003      	b.n	14dba <adv_time_get.constprop.0.isra.0+0x32>
   14db2:	f44f 6387 	mov.w	r3, #1080	; 0x438
   14db6:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   14dba:	fb0c 3302 	mla	r3, ip, r2, r3
   14dbe:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   14dc2:	4018      	ands	r0, r3
}
   14dc4:	bc10      	pop	{r4}
   14dc6:	4770      	bx	lr
				adv_size += pdu->len;
   14dc8:	7843      	ldrb	r3, [r0, #1]
   14dca:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   14dcc:	00db      	lsls	r3, r3, #3
   14dce:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   14dd2:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   14dd6:	440b      	add	r3, r1
   14dd8:	e7ef      	b.n	14dba <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   14dda:	7840      	ldrb	r0, [r0, #1]
}
   14ddc:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   14dde:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   14de2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   14de6:	3010      	adds	r0, #16
   14de8:	005b      	lsls	r3, r3, #1
   14dea:	00c1      	lsls	r1, r0, #3
   14dec:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   14df0:	fb01 0002 	mla	r0, r1, r2, r0
   14df4:	b280      	uxth	r0, r0
}
   14df6:	4770      	bx	lr

00014df8 <ticker_cb>:
{
   14df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14dfc:	461d      	mov	r5, r3
   14dfe:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   14e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14e04:	429d      	cmp	r5, r3
{
   14e06:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   14e0a:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   14e0c:	d018      	beq.n	14e40 <ticker_cb+0x48>
	return ++hdr->ref;
   14e0e:	7823      	ldrb	r3, [r4, #0]
   14e10:	3301      	adds	r3, #1
   14e12:	b2db      	uxtb	r3, r3
   14e14:	4607      	mov	r7, r0
   14e16:	4616      	mov	r6, r2
   14e18:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   14e1a:	2b00      	cmp	r3, #0
   14e1c:	d061      	beq.n	14ee2 <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   14e1e:	4938      	ldr	r1, [pc, #224]	; (14f00 <ticker_cb+0x108>)
		mfy.param = &p;
   14e20:	4b38      	ldr	r3, [pc, #224]	; (14f04 <ticker_cb+0x10c>)
		p.lazy = lazy;
   14e22:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   14e24:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14e28:	2200      	movs	r2, #0
		p.param = lll;
   14e2a:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   14e2c:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   14e30:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   14e34:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14e36:	2001      	movs	r0, #1
   14e38:	4611      	mov	r1, r2
   14e3a:	f7fb f9eb 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14e3e:	b938      	cbnz	r0, 14e50 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   14e40:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   14e44:	f010 0501 	ands.w	r5, r0, #1
   14e48:	d014      	beq.n	14e74 <ticker_cb+0x7c>
}
   14e4a:	b00a      	add	sp, #40	; 0x28
   14e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   14e50:	4a2d      	ldr	r2, [pc, #180]	; (14f08 <ticker_cb+0x110>)
   14e52:	492e      	ldr	r1, [pc, #184]	; (14f0c <ticker_cb+0x114>)
   14e54:	482e      	ldr	r0, [pc, #184]	; (14f10 <ticker_cb+0x118>)
   14e56:	f640 0392 	movw	r3, #2194	; 0x892
   14e5a:	f010 f854 	bl	24f06 <printk>
   14e5e:	4040      	eors	r0, r0
   14e60:	f380 8811 	msr	BASEPRI, r0
   14e64:	f04f 0003 	mov.w	r0, #3
   14e68:	df02      	svc	2
	if (!lll->is_hdcd)
   14e6a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   14e6e:	f010 0501 	ands.w	r5, r0, #1
   14e72:	d1ea      	bne.n	14e4a <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   14e74:	2104      	movs	r1, #4
   14e76:	a809      	add	r0, sp, #36	; 0x24
   14e78:	f007 fc9a 	bl	1c7b0 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   14e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14e7e:	4a25      	ldr	r2, [pc, #148]	; (14f14 <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14e80:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   14e82:	fba2 1203 	umull	r1, r2, r2, r3
   14e86:	1a99      	subs	r1, r3, r2
   14e88:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   14e8c:	0a12      	lsrs	r2, r2, #8
   14e8e:	f240 1147 	movw	r1, #327	; 0x147
   14e92:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14e96:	4a20      	ldr	r2, [pc, #128]	; (14f18 <ticker_cb+0x120>)
   14e98:	4920      	ldr	r1, [pc, #128]	; (14f1c <ticker_cb+0x124>)
   14e9a:	1aa2      	subs	r2, r4, r2
   14e9c:	fba1 1202 	umull	r1, r2, r1, r2
   14ea0:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14ea2:	491f      	ldr	r1, [pc, #124]	; (14f20 <ticker_cb+0x128>)
   14ea4:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   14ea6:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14ea8:	e9cd 5104 	strd	r5, r1, [sp, #16]
   14eac:	e9cd 5502 	strd	r5, r5, [sp, #8]
   14eb0:	e9cd 5500 	strd	r5, r5, [sp]
   14eb4:	b2d2      	uxtb	r2, r2
   14eb6:	2101      	movs	r1, #1
   14eb8:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   14eba:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14ebc:	f7fc fbe8 	bl	11690 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14ec0:	f030 0302 	bics.w	r3, r0, #2
   14ec4:	d0c1      	beq.n	14e4a <ticker_cb+0x52>
   14ec6:	4a10      	ldr	r2, [pc, #64]	; (14f08 <ticker_cb+0x110>)
   14ec8:	4916      	ldr	r1, [pc, #88]	; (14f24 <ticker_cb+0x12c>)
   14eca:	4811      	ldr	r0, [pc, #68]	; (14f10 <ticker_cb+0x118>)
   14ecc:	f240 732c 	movw	r3, #1836	; 0x72c
   14ed0:	f010 f819 	bl	24f06 <printk>
   14ed4:	4040      	eors	r0, r0
   14ed6:	f380 8811 	msr	BASEPRI, r0
   14eda:	f04f 0003 	mov.w	r0, #3
   14ede:	df02      	svc	2
}
   14ee0:	e7b3      	b.n	14e4a <ticker_cb+0x52>
		LL_ASSERT(ref);
   14ee2:	4a09      	ldr	r2, [pc, #36]	; (14f08 <ticker_cb+0x110>)
   14ee4:	4910      	ldr	r1, [pc, #64]	; (14f28 <ticker_cb+0x130>)
   14ee6:	480a      	ldr	r0, [pc, #40]	; (14f10 <ticker_cb+0x118>)
   14ee8:	f640 0385 	movw	r3, #2181	; 0x885
   14eec:	f010 f80b 	bl	24f06 <printk>
   14ef0:	4040      	eors	r0, r0
   14ef2:	f380 8811 	msr	BASEPRI, r0
   14ef6:	f04f 0003 	mov.w	r0, #3
   14efa:	df02      	svc	2
   14efc:	e78f      	b.n	14e1e <ticker_cb+0x26>
   14efe:	bf00      	nop
   14f00:	200029dc 	.word	0x200029dc
   14f04:	20000520 	.word	0x20000520
   14f08:	0002c4fc 	.word	0x0002c4fc
   14f0c:	0002c454 	.word	0x0002c454
   14f10:	0002bfdc 	.word	0x0002bfdc
   14f14:	90d4f121 	.word	0x90d4f121
   14f18:	2000295c 	.word	0x2000295c
   14f1c:	8d3dcb09 	.word	0x8d3dcb09
   14f20:	00014b19 	.word	0x00014b19
   14f24:	0002c548 	.word	0x0002c548
   14f28:	0002c60c 	.word	0x0002c60c

00014f2c <ll_adv_params_set>:
{
   14f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
   14f30:	4c71      	ldr	r4, [pc, #452]	; (150f8 <ll_adv_params_set+0x1cc>)
{
   14f32:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14f34:	4b71      	ldr	r3, [pc, #452]	; (150fc <ll_adv_params_set+0x1d0>)
	if (!adv || adv->is_enabled) {
   14f36:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   14f3a:	4686      	mov	lr, r0
   14f3c:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14f3e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   14f42:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   14f44:	f016 0601 	ands.w	r6, r6, #1
{
   14f48:	4615      	mov	r5, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14f4a:	f88d 1004 	strb.w	r1, [sp, #4]
{
   14f4e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14f52:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   14f56:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14f5a:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   14f5c:	f040 80aa 	bne.w	150b4 <ll_adv_params_set+0x188>
	adv->lll.chan_map = chan_map;
   14f60:	f002 0207 	and.w	r2, r2, #7
   14f64:	f001 0103 	and.w	r1, r1, #3
   14f68:	0052      	lsls	r2, r2, #1
   14f6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14f6e:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   14f72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   14f76:	ab02      	add	r3, sp, #8
   14f78:	f8d1 902c 	ldr.w	r9, [r1, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   14f7c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   14f7e:	f899 a000 	ldrb.w	sl, [r9]
		adv->interval = 0;
   14f82:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   14f86:	449c      	add	ip, r3
	adv->lll.chan_map = chan_map;
   14f88:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
	pdu->type = pdu_adv_type[adv_type];
   14f8c:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
	adv->lll.chan_map = chan_map;
   14f90:	f021 0102 	bic.w	r1, r1, #2
   14f94:	ea42 0201 	orr.w	r2, r2, r1
		adv->interval = 0;
   14f98:	bf08      	it	eq
   14f9a:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   14f9e:	f02a 011f 	bic.w	r1, sl, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14fa2:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   14fa6:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   14faa:	84a2      	strh	r2, [r4, #36]	; 0x24
   14fac:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14fb0:	bf0c      	ite	eq
   14fb2:	2201      	moveq	r2, #1
   14fb4:	2200      	movne	r2, #0
   14fb6:	f362 1345 	bfi	r3, r2, #5, #1
   14fba:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
   14fbe:	f889 3000 	strb.w	r3, [r9]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   14fc2:	f003 030f 	and.w	r3, r3, #15
   14fc6:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   14fc8:	f00a 0a0f 	and.w	sl, sl, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   14fcc:	d05c      	beq.n	15088 <ll_adv_params_set+0x15c>
	adv->own_addr_type = own_addr_type;
   14fce:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   14fd2:	f365 0342 	bfi	r3, r5, #1, #2
   14fd6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14fda:	b2da      	uxtb	r2, r3
   14fdc:	075b      	lsls	r3, r3, #29
   14fde:	d50c      	bpl.n	14ffa <ll_adv_params_set+0xce>
		adv->peer_addr_type = direct_addr_type;
   14fe0:	4613      	mov	r3, r2
   14fe2:	f367 03c3 	bfi	r3, r7, #3, #1
   14fe6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   14fea:	f8d8 3000 	ldr.w	r3, [r8]
   14fee:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
   14ff2:	4b43      	ldr	r3, [pc, #268]	; (15100 <ll_adv_params_set+0x1d4>)
   14ff4:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   14ff8:	809a      	strh	r2, [r3, #4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14ffa:	f899 3000 	ldrb.w	r3, [r9]
   14ffe:	f003 020f 	and.w	r2, r3, #15
   15002:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   15004:	f005 0b01 	and.w	fp, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15008:	d02c      	beq.n	15064 <ll_adv_params_set+0x138>
	} else if (pdu->len == 0) {
   1500a:	f899 2001 	ldrb.w	r2, [r9, #1]
   1500e:	b9ea      	cbnz	r2, 1504c <ll_adv_params_set+0x120>
		pdu->tx_addr = own_addr_type & 0x1;
   15010:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = 0;
   15014:	f362 13c7 	bfi	r3, r2, #7, #1
   15018:	f889 3000 	strb.w	r3, [r9]
		pdu->len = BDADDR_SIZE;
   1501c:	2306      	movs	r3, #6
   1501e:	f889 3001 	strb.w	r3, [r9, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15022:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   15026:	61e4      	str	r4, [r4, #28]
   15028:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1502c:	01ad      	lsls	r5, r5, #6
   1502e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15030:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   15034:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15036:	f045 0504 	orr.w	r5, r5, #4
   1503a:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   1503c:	b912      	cbnz	r2, 15044 <ll_adv_params_set+0x118>
			pdu->len = BDADDR_SIZE;
   1503e:	2106      	movs	r1, #6
   15040:	7059      	strb	r1, [r3, #1]
	return 0;
   15042:	4616      	mov	r6, r2
}
   15044:	4630      	mov	r0, r6
   15046:	b003      	add	sp, #12
   15048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   1504c:	f1ba 0f01 	cmp.w	sl, #1
   15050:	d023      	beq.n	1509a <ll_adv_params_set+0x16e>
		pdu->tx_addr = own_addr_type & 0x1;
   15052:	f899 3000 	ldrb.w	r3, [r9]
   15056:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = 0;
   1505a:	f36f 13c7 	bfc	r3, #7, #1
   1505e:	f889 3000 	strb.w	r3, [r9]
   15062:	e7de      	b.n	15022 <ll_adv_params_set+0xf6>
		pdu->rx_addr = direct_addr_type;
   15064:	464a      	mov	r2, r9
		pdu->tx_addr = own_addr_type & 0x1;
   15066:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = direct_addr_type;
   1506a:	f367 13c7 	bfi	r3, r7, #7, #1
   1506e:	f802 3b08 	strb.w	r3, [r2], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15072:	f8d8 1000 	ldr.w	r1, [r8]
   15076:	f8c9 1008 	str.w	r1, [r9, #8]
   1507a:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   1507e:	8091      	strh	r1, [r2, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   15080:	230c      	movs	r3, #12
   15082:	f889 3001 	strb.w	r3, [r9, #1]
   15086:	e7cc      	b.n	15022 <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   15088:	f1ba 0f01 	cmp.w	sl, #1
   1508c:	d09f      	beq.n	14fce <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   1508e:	f899 2001 	ldrb.w	r2, [r9, #1]
   15092:	b9a2      	cbnz	r2, 150be <ll_adv_params_set+0x192>
			adv->ad_data_backup.len = 0U;
   15094:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   15098:	e799      	b.n	14fce <ll_adv_params_set+0xa2>
   1509a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   1509e:	4919      	ldr	r1, [pc, #100]	; (15104 <ll_adv_params_set+0x1d8>)
   150a0:	f109 0008 	add.w	r0, r9, #8
   150a4:	f015 fcd9 	bl	2aa5a <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   150a8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   150ac:	3306      	adds	r3, #6
   150ae:	f889 3001 	strb.w	r3, [r9, #1]
   150b2:	e7ce      	b.n	15052 <ll_adv_params_set+0x126>
		return BT_HCI_ERR_CMD_DISALLOWED;
   150b4:	260c      	movs	r6, #12
}
   150b6:	4630      	mov	r0, r6
   150b8:	b003      	add	sp, #12
   150ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(pdu->len >=
   150be:	2a05      	cmp	r2, #5
   150c0:	d90a      	bls.n	150d8 <ll_adv_params_set+0x1ac>
			adv->ad_data_backup.len = pdu->len -
   150c2:	3a06      	subs	r2, #6
   150c4:	b2d2      	uxtb	r2, r2
   150c6:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   150ca:	2333      	movs	r3, #51	; 0x33
   150cc:	f109 0108 	add.w	r1, r9, #8
   150d0:	480c      	ldr	r0, [pc, #48]	; (15104 <ll_adv_params_set+0x1d8>)
   150d2:	f015 fcd0 	bl	2aa76 <__memcpy_chk>
   150d6:	e77a      	b.n	14fce <ll_adv_params_set+0xa2>
			LL_ASSERT(pdu->len >=
   150d8:	4a0b      	ldr	r2, [pc, #44]	; (15108 <ll_adv_params_set+0x1dc>)
   150da:	490c      	ldr	r1, [pc, #48]	; (1510c <ll_adv_params_set+0x1e0>)
   150dc:	480c      	ldr	r0, [pc, #48]	; (15110 <ll_adv_params_set+0x1e4>)
   150de:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   150e2:	f00f ff10 	bl	24f06 <printk>
   150e6:	4040      	eors	r0, r0
   150e8:	f380 8811 	msr	BASEPRI, r0
   150ec:	f04f 0003 	mov.w	r0, #3
   150f0:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   150f2:	f899 2001 	ldrb.w	r2, [r9, #1]
   150f6:	e7e4      	b.n	150c2 <ll_adv_params_set+0x196>
   150f8:	2000295c 	.word	0x2000295c
   150fc:	0002b7fc 	.word	0x0002b7fc
   15100:	200029c7 	.word	0x200029c7
   15104:	2000299d 	.word	0x2000299d
   15108:	0002c4fc 	.word	0x0002c4fc
   1510c:	0002c610 	.word	0x0002c610
   15110:	0002bfdc 	.word	0x0002bfdc

00015114 <ull_adv_init>:
{
   15114:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   15116:	4c06      	ldr	r4, [pc, #24]	; (15130 <ull_adv_init+0x1c>)
   15118:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1511c:	f007 ff86 	bl	1d02c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   15120:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15124:	f007 ff82 	bl	1d02c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   15128:	f7ff fd12 	bl	14b50 <init_set.constprop.0>
}
   1512c:	2000      	movs	r0, #0
   1512e:	bd10      	pop	{r4, pc}
   15130:	2000295c 	.word	0x2000295c

00015134 <ull_adv_reset>:
{
   15134:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   15136:	4b0b      	ldr	r3, [pc, #44]	; (15164 <ull_adv_reset+0x30>)
   15138:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   1513c:	07d2      	lsls	r2, r2, #31
   1513e:	d50e      	bpl.n	1515e <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   15140:	6a1a      	ldr	r2, [r3, #32]
   15142:	b152      	cbz	r2, 1515a <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   15144:	f892 1020 	ldrb.w	r1, [r2, #32]
   15148:	f041 0102 	orr.w	r1, r1, #2
   1514c:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   15150:	6a1b      	ldr	r3, [r3, #32]
   15152:	f893 3020 	ldrb.w	r3, [r3, #32]
   15156:	07db      	lsls	r3, r3, #31
   15158:	d401      	bmi.n	1515e <ull_adv_reset+0x2a>
   1515a:	f7ff fd65 	bl	14c28 <disable.part.0>
}
   1515e:	2000      	movs	r0, #0
   15160:	bd08      	pop	{r3, pc}
   15162:	bf00      	nop
   15164:	2000295c 	.word	0x2000295c

00015168 <ull_adv_reset_finalize>:
{
   15168:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   1516a:	4c0a      	ldr	r4, [pc, #40]	; (15194 <ull_adv_reset_finalize+0x2c>)
   1516c:	f104 0528 	add.w	r5, r4, #40	; 0x28
   15170:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   15172:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   15174:	f007 ff6a 	bl	1d04c <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   15178:	4620      	mov	r0, r4
   1517a:	f007 ff67 	bl	1d04c <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1517e:	4628      	mov	r0, r5
   15180:	f007 ff54 	bl	1d02c <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   15184:	4620      	mov	r0, r4
   15186:	f007 ff51 	bl	1d02c <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1518a:	f7ff fce1 	bl	14b50 <init_set.constprop.0>
}
   1518e:	2000      	movs	r0, #0
   15190:	bd38      	pop	{r3, r4, r5, pc}
   15192:	bf00      	nop
   15194:	2000295c 	.word	0x2000295c

00015198 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   15198:	4a03      	ldr	r2, [pc, #12]	; (151a8 <ull_adv_handle_get+0x10>)
   1519a:	4b04      	ldr	r3, [pc, #16]	; (151ac <ull_adv_handle_get+0x14>)
   1519c:	1a80      	subs	r0, r0, r2
   1519e:	fba3 3000 	umull	r3, r0, r3, r0
}
   151a2:	f3c0 108f 	ubfx	r0, r0, #6, #16
   151a6:	4770      	bx	lr
   151a8:	2000295c 	.word	0x2000295c
   151ac:	8d3dcb09 	.word	0x8d3dcb09

000151b0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   151b0:	4a04      	ldr	r2, [pc, #16]	; (151c4 <ull_adv_lll_handle_get+0x14>)
   151b2:	6800      	ldr	r0, [r0, #0]
   151b4:	4b04      	ldr	r3, [pc, #16]	; (151c8 <ull_adv_lll_handle_get+0x18>)
   151b6:	1a80      	subs	r0, r0, r2
   151b8:	fba3 3000 	umull	r3, r0, r3, r0
}
   151bc:	f3c0 108f 	ubfx	r0, r0, #6, #16
   151c0:	4770      	bx	lr
   151c2:	bf00      	nop
   151c4:	2000295c 	.word	0x2000295c
   151c8:	8d3dcb09 	.word	0x8d3dcb09

000151cc <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   151cc:	b938      	cbnz	r0, 151de <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   151ce:	4805      	ldr	r0, [pc, #20]	; (151e4 <ull_adv_is_enabled_get+0x18>)
   151d0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   151d4:	f013 0f01 	tst.w	r3, #1
   151d8:	bf08      	it	eq
   151da:	2000      	moveq	r0, #0
   151dc:	4770      	bx	lr
		return NULL;
   151de:	2000      	movs	r0, #0
}
   151e0:	4770      	bx	lr
   151e2:	bf00      	nop
   151e4:	2000295c 	.word	0x2000295c

000151e8 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   151e8:	b928      	cbnz	r0, 151f6 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   151ea:	4b04      	ldr	r3, [pc, #16]	; (151fc <ull_adv_is_enabled+0x14>)
   151ec:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   151f0:	f000 0001 	and.w	r0, r0, #1
   151f4:	4770      	bx	lr
   151f6:	2000      	movs	r0, #0
}
   151f8:	4770      	bx	lr
   151fa:	bf00      	nop
   151fc:	2000295c 	.word	0x2000295c

00015200 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15200:	b950      	cbnz	r0, 15218 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   15202:	4b06      	ldr	r3, [pc, #24]	; (1521c <ull_adv_filter_pol_get+0x1c>)
   15204:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   15208:	f010 0001 	ands.w	r0, r0, #1
   1520c:	d005      	beq.n	1521a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1520e:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   15212:	f000 0003 	and.w	r0, r0, #3
   15216:	4770      	bx	lr
		return 0;
   15218:	2000      	movs	r0, #0
}
   1521a:	4770      	bx	lr
   1521c:	2000295c 	.word	0x2000295c

00015220 <ull_adv_pdu_update_addrs>:
{
   15220:	b570      	push	{r4, r5, r6, lr}
   15222:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   15224:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   15228:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   1522a:	f006 fd17 	bl	1bc5c <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   1522e:	b318      	cbz	r0, 15278 <ull_adv_pdu_update_addrs+0x58>
		pdu->tx_addr = 1;
   15230:	7823      	ldrb	r3, [r4, #0]
   15232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15236:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15238:	7823      	ldrb	r3, [r4, #0]
   1523a:	6802      	ldr	r2, [r0, #0]
   1523c:	f8c4 2002 	str.w	r2, [r4, #2]
   15240:	f003 030f 	and.w	r3, r3, #15
   15244:	8882      	ldrh	r2, [r0, #4]
   15246:	80e2      	strh	r2, [r4, #6]
   15248:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
   1524a:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1524e:	d001      	beq.n	15254 <ull_adv_pdu_update_addrs+0x34>
}
   15250:	4630      	mov	r0, r6
   15252:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   15254:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   15258:	f006 fd2e 	bl	1bcb8 <ull_filter_tgta_get>
	if (rx_addr) {
   1525c:	2800      	cmp	r0, #0
   1525e:	d0f7      	beq.n	15250 <ull_adv_pdu_update_addrs+0x30>
		pdu->rx_addr = 1;
   15260:	7822      	ldrb	r2, [r4, #0]
   15262:	4623      	mov	r3, r4
   15264:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15268:	f803 2b08 	strb.w	r2, [r3], #8
   1526c:	6802      	ldr	r2, [r0, #0]
   1526e:	60a2      	str	r2, [r4, #8]
   15270:	8882      	ldrh	r2, [r0, #4]
   15272:	809a      	strh	r2, [r3, #4]
}
   15274:	4630      	mov	r0, r6
   15276:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   15278:	7820      	ldrb	r0, [r4, #0]
   1527a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1527e:	f7fc fae7 	bl	11850 <ll_addr_get>
	if (rpa) {
   15282:	e7d9      	b.n	15238 <ull_adv_pdu_update_addrs+0x18>

00015284 <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   15284:	291f      	cmp	r1, #31
   15286:	d84f      	bhi.n	15328 <ull_adv_data_set+0xa4>
{
   15288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1528c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   15290:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15294:	b082      	sub	sp, #8
   15296:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15298:	783b      	ldrb	r3, [r7, #0]
   1529a:	f003 030f 	and.w	r3, r3, #15
   1529e:	2b01      	cmp	r3, #1
   152a0:	460d      	mov	r5, r1
   152a2:	4604      	mov	r4, r0
   152a4:	4690      	mov	r8, r2
   152a6:	d034      	beq.n	15312 <ull_adv_data_set+0x8e>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   152a8:	f10d 0107 	add.w	r1, sp, #7
   152ac:	3028      	adds	r0, #40	; 0x28
   152ae:	f007 ff4d 	bl	1d14c <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   152b2:	46be      	mov	lr, r7
   152b4:	4606      	mov	r6, r0
	pdu->type = prev->type;
   152b6:	4684      	mov	ip, r0
		pdu->chan_sel = prev->chan_sel;
   152b8:	f81e 0b02 	ldrb.w	r0, [lr], #2
   152bc:	4641      	mov	r1, r8
	pdu->type = prev->type;
   152be:	f3c0 0303 	ubfx	r3, r0, #0, #4
		pdu->chan_sel = prev->chan_sel;
   152c2:	f3c0 1840 	ubfx	r8, r0, #5, #1
	pdu->type = prev->type;
   152c6:	ea43 1348 	orr.w	r3, r3, r8, lsl #5
	pdu->tx_addr = prev->tx_addr;
   152ca:	f3c0 1880 	ubfx	r8, r0, #6, #1
	pdu->type = prev->type;
   152ce:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   152d2:	f000 0080 	and.w	r0, r0, #128	; 0x80
   152d6:	4303      	orrs	r3, r0
   152d8:	f80c 3b02 	strb.w	r3, [ip], #2
   152dc:	f8d7 3002 	ldr.w	r3, [r7, #2]
   152e0:	f8c6 3002 	str.w	r3, [r6, #2]
   152e4:	f8be 3004 	ldrh.w	r3, [lr, #4]
   152e8:	f8ac 3004 	strh.w	r3, [ip, #4]
   152ec:	462a      	mov	r2, r5
   152ee:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   152f2:	3506      	adds	r5, #6
   152f4:	f015 fbb1 	bl	2aa5a <memcpy>
   152f8:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   152fa:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   152fe:	07db      	lsls	r3, r3, #31
   15300:	d414      	bmi.n	1532c <ull_adv_data_set+0xa8>
	pdu->last = idx;
   15302:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15306:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   1530a:	2000      	movs	r0, #0
}
   1530c:	b002      	add	sp, #8
   1530e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		adv->ad_data_backup.len = len;
   15312:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
   15316:	460a      	mov	r2, r1
   15318:	3041      	adds	r0, #65	; 0x41
   1531a:	4641      	mov	r1, r8
   1531c:	f015 fb9d 	bl	2aa5a <memcpy>
		return 0;
   15320:	2000      	movs	r0, #0
}
   15322:	b002      	add	sp, #8
   15324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   15328:	2012      	movs	r0, #18
}
   1532a:	4770      	bx	lr
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1532c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   15330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   15334:	4631      	mov	r1, r6
   15336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15338:	4620      	mov	r0, r4
   1533a:	f7ec fa15 	bl	1768 <ull_adv_time_update>
		if (err) {
   1533e:	2800      	cmp	r0, #0
   15340:	d0df      	beq.n	15302 <ull_adv_data_set+0x7e>
   15342:	e7e3      	b.n	1530c <ull_adv_data_set+0x88>

00015344 <ll_adv_data_set>:
{
   15344:	4603      	mov	r3, r0
   15346:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   15348:	4801      	ldr	r0, [pc, #4]	; (15350 <ll_adv_data_set+0xc>)
   1534a:	4619      	mov	r1, r3
   1534c:	f7ff bf9a 	b.w	15284 <ull_adv_data_set>
   15350:	2000295c 	.word	0x2000295c

00015354 <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   15354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15358:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1535c:	b082      	sub	sp, #8
   1535e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15362:	460e      	mov	r6, r1
   15364:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   15366:	f10d 0107 	add.w	r1, sp, #7
   1536a:	3034      	adds	r0, #52	; 0x34
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1536c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
   1536e:	4690      	mov	r8, r2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   15370:	f007 feec 	bl	1d14c <lll_adv_pdu_alloc>
   15374:	4605      	mov	r5, r0
	pdu->tx_addr = prev->tx_addr;
   15376:	4638      	mov	r0, r7
	pdu->len = BDADDR_SIZE + len;
   15378:	f106 0c06 	add.w	ip, r6, #6
	pdu->tx_addr = prev->tx_addr;
   1537c:	f810 3b02 	ldrb.w	r3, [r0], #2
	pdu->len = BDADDR_SIZE + len;
   15380:	f885 c001 	strb.w	ip, [r5, #1]
	pdu->tx_addr = prev->tx_addr;
   15384:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15388:	019b      	lsls	r3, r3, #6
   1538a:	f043 0304 	orr.w	r3, r3, #4
   1538e:	702b      	strb	r3, [r5, #0]
   15390:	f8d7 3002 	ldr.w	r3, [r7, #2]
   15394:	f8c5 3002 	str.w	r3, [r5, #2]
   15398:	8883      	ldrh	r3, [r0, #4]
   1539a:	80eb      	strh	r3, [r5, #6]
   1539c:	4641      	mov	r1, r8
   1539e:	4632      	mov	r2, r6
   153a0:	f105 0008 	add.w	r0, r5, #8
   153a4:	f015 fb59 	bl	2aa5a <memcpy>
	if (adv->is_enabled) {
   153a8:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   153ac:	07db      	lsls	r3, r3, #31
   153ae:	d50a      	bpl.n	153c6 <ull_scan_rsp_set.part.0+0x72>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   153b0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   153b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   153b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   153ba:	780b      	ldrb	r3, [r1, #0]
   153bc:	f013 030f 	ands.w	r3, r3, #15
   153c0:	d009      	beq.n	153d6 <ull_scan_rsp_set.part.0+0x82>
   153c2:	2b06      	cmp	r3, #6
   153c4:	d007      	beq.n	153d6 <ull_scan_rsp_set.part.0+0x82>
	pdu->last = idx;
   153c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   153ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   153ce:	2000      	movs	r0, #0
}
   153d0:	b002      	add	sp, #8
   153d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   153d6:	462a      	mov	r2, r5
   153d8:	4620      	mov	r0, r4
   153da:	f7ec f9c5 	bl	1768 <ull_adv_time_update>
			if (err) {
   153de:	2800      	cmp	r0, #0
   153e0:	d0f1      	beq.n	153c6 <ull_scan_rsp_set.part.0+0x72>
   153e2:	e7f5      	b.n	153d0 <ull_scan_rsp_set.part.0+0x7c>

000153e4 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   153e4:	281f      	cmp	r0, #31
{
   153e6:	4603      	mov	r3, r0
   153e8:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   153ea:	d803      	bhi.n	153f4 <ll_adv_scan_rsp_set+0x10>
   153ec:	4802      	ldr	r0, [pc, #8]	; (153f8 <ll_adv_scan_rsp_set+0x14>)
   153ee:	4619      	mov	r1, r3
   153f0:	f7ff bfb0 	b.w	15354 <ull_scan_rsp_set.part.0>
}
   153f4:	2012      	movs	r0, #18
   153f6:	4770      	bx	lr
   153f8:	2000295c 	.word	0x2000295c

000153fc <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   153fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15400:	9c09      	ldr	r4, [sp, #36]	; 0x24
   15402:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   15406:	4625      	mov	r5, r4
{
   15408:	4680      	mov	r8, r0
   1540a:	f815 1b1c 	ldrb.w	r1, [r5], #28
   1540e:	3101      	adds	r1, #1
   15410:	b2c9      	uxtb	r1, r1
   15412:	4617      	mov	r7, r2
   15414:	461e      	mov	r6, r3
   15416:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   15418:	b181      	cbz	r1, 1543c <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   1541a:	4c17      	ldr	r4, [pc, #92]	; (15478 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   1541c:	4b17      	ldr	r3, [pc, #92]	; (1547c <ticker_cb+0x80>)
	p.lazy = lazy;
   1541e:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15420:	2200      	movs	r2, #0
   15422:	4611      	mov	r1, r2
   15424:	2001      	movs	r0, #1
	p.remainder = remainder;
   15426:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   1542a:	60e5      	str	r5, [r4, #12]
	p.force = force;
   1542c:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   15430:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   15432:	f7fa feef 	bl	10214 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   15436:	b978      	cbnz	r0, 15458 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   15438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   1543c:	4a10      	ldr	r2, [pc, #64]	; (15480 <ticker_cb+0x84>)
   1543e:	4911      	ldr	r1, [pc, #68]	; (15484 <ticker_cb+0x88>)
   15440:	4811      	ldr	r0, [pc, #68]	; (15488 <ticker_cb+0x8c>)
   15442:	f240 23db 	movw	r3, #731	; 0x2db
   15446:	f00f fd5e 	bl	24f06 <printk>
   1544a:	4040      	eors	r0, r0
   1544c:	f380 8811 	msr	BASEPRI, r0
   15450:	f04f 0003 	mov.w	r0, #3
   15454:	df02      	svc	2
   15456:	e7e0      	b.n	1541a <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   15458:	4a09      	ldr	r2, [pc, #36]	; (15480 <ticker_cb+0x84>)
   1545a:	490c      	ldr	r1, [pc, #48]	; (1548c <ticker_cb+0x90>)
   1545c:	480a      	ldr	r0, [pc, #40]	; (15488 <ticker_cb+0x8c>)
   1545e:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   15462:	f00f fd50 	bl	24f06 <printk>
   15466:	4040      	eors	r0, r0
   15468:	f380 8811 	msr	BASEPRI, r0
   1546c:	f04f 0003 	mov.w	r0, #3
   15470:	df02      	svc	2
}
   15472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15476:	bf00      	nop
   15478:	20002a3c 	.word	0x20002a3c
   1547c:	20000550 	.word	0x20000550
   15480:	0002c660 	.word	0x0002c660
   15484:	0002c60c 	.word	0x0002c60c
   15488:	0002bfdc 	.word	0x0002bfdc
   1548c:	0002c454 	.word	0x0002c454

00015490 <ull_scan_init>:
}
   15490:	2000      	movs	r0, #0
   15492:	4770      	bx	lr

00015494 <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   15494:	3004      	adds	r0, #4
{
   15496:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   15498:	f101 021c 	add.w	r2, r1, #28
   1549c:	b2c0      	uxtb	r0, r0
   1549e:	f7fe fe97 	bl	141d0 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   154a2:	b110      	cbz	r0, 154aa <ull_scan_disable+0x16>
   154a4:	3078      	adds	r0, #120	; 0x78
   154a6:	d101      	bne.n	154ac <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   154a8:	200c      	movs	r0, #12
}
   154aa:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   154ac:	4a07      	ldr	r2, [pc, #28]	; (154cc <ull_scan_disable+0x38>)
   154ae:	4908      	ldr	r1, [pc, #32]	; (154d0 <ull_scan_disable+0x3c>)
   154b0:	4808      	ldr	r0, [pc, #32]	; (154d4 <ull_scan_disable+0x40>)
   154b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   154b6:	f00f fd26 	bl	24f06 <printk>
   154ba:	4040      	eors	r0, r0
   154bc:	f380 8811 	msr	BASEPRI, r0
   154c0:	f04f 0003 	mov.w	r0, #3
   154c4:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   154c6:	200c      	movs	r0, #12
}
   154c8:	bd08      	pop	{r3, pc}
   154ca:	bf00      	nop
   154cc:	0002c660 	.word	0x0002c660
   154d0:	0002c6a0 	.word	0x0002c6a0
   154d4:	0002bfdc 	.word	0x0002bfdc

000154d8 <ll_scan_enable>:
{
   154d8:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   154da:	4c2c      	ldr	r4, [pc, #176]	; (1558c <ll_scan_enable+0xb4>)
   154dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   154e0:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   154e4:	b358      	cbz	r0, 1553e <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   154e6:	bb5a      	cbnz	r2, 15540 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   154e8:	079a      	lsls	r2, r3, #30
   154ea:	f3c3 0541 	ubfx	r5, r3, #1, #2
   154ee:	d50b      	bpl.n	15508 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   154f0:	2001      	movs	r0, #1
   154f2:	f7fc f9ad 	bl	11850 <ll_addr_get>
   154f6:	2106      	movs	r1, #6
   154f8:	f7fa fdfe 	bl	100f8 <mem_nz>
   154fc:	2800      	cmp	r0, #0
   154fe:	d042      	beq.n	15586 <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   15500:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   15504:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   15508:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1550c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   15510:	f006 fa74 	bl	1b9fc <ull_filter_scan_update>
	lll->rpa_gen = 0;
   15514:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   15518:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   1551c:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   15520:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   15522:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   15526:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   15528:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   1552c:	d502      	bpl.n	15534 <ll_scan_enable+0x5c>
   1552e:	3d02      	subs	r5, #2
   15530:	2d01      	cmp	r5, #1
   15532:	d91e      	bls.n	15572 <ll_scan_enable+0x9a>
}
   15534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   15538:	4814      	ldr	r0, [pc, #80]	; (1558c <ll_scan_enable+0xb4>)
   1553a:	f7ec b9d1 	b.w	18e0 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   1553e:	b912      	cbnz	r2, 15546 <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   15540:	250c      	movs	r5, #12
}
   15542:	4628      	mov	r0, r5
   15544:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   15546:	6a23      	ldr	r3, [r4, #32]
   15548:	2b00      	cmp	r3, #0
   1554a:	d1f9      	bne.n	15540 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   1554c:	4621      	mov	r1, r4
   1554e:	f7ff ffa1 	bl	15494 <ull_scan_disable>
	if (ret) {
   15552:	4605      	mov	r5, r0
   15554:	2800      	cmp	r0, #0
   15556:	d1f4      	bne.n	15542 <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   15558:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   1555c:	f360 0300 	bfi	r3, r0, #0, #1
   15560:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   15564:	f7ff fe32 	bl	151cc <ull_adv_is_enabled_get>
   15568:	2800      	cmp	r0, #0
   1556a:	d1ea      	bne.n	15542 <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   1556c:	f006 fa06 	bl	1b97c <ull_filter_adv_scan_state_cb>
   15570:	e7e7      	b.n	15542 <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   15572:	2000      	movs	r0, #0
   15574:	f006 fa66 	bl	1ba44 <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   15578:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1557c:	f043 0302 	orr.w	r3, r3, #2
   15580:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   15584:	e7d6      	b.n	15534 <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   15586:	2512      	movs	r5, #18
   15588:	e7db      	b.n	15542 <ll_scan_enable+0x6a>
   1558a:	bf00      	nop
   1558c:	200029f4 	.word	0x200029f4

00015590 <ull_scan_reset>:
{
   15590:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   15592:	4c0d      	ldr	r4, [pc, #52]	; (155c8 <ull_scan_reset+0x38>)
   15594:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   15598:	07db      	lsls	r3, r3, #31
   1559a:	d501      	bpl.n	155a0 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   1559c:	6a20      	ldr	r0, [r4, #32]
   1559e:	b108      	cbz	r0, 155a4 <ull_scan_reset+0x14>
}
   155a0:	2000      	movs	r0, #0
   155a2:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   155a4:	4621      	mov	r1, r4
   155a6:	f7ff ff75 	bl	15494 <ull_scan_disable>
	if (ret) {
   155aa:	2800      	cmp	r0, #0
   155ac:	d1f8      	bne.n	155a0 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   155ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   155b2:	f360 0200 	bfi	r2, r0, #0, #1
   155b6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   155ba:	f7ff fe07 	bl	151cc <ull_adv_is_enabled_get>
   155be:	2800      	cmp	r0, #0
   155c0:	d1ee      	bne.n	155a0 <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   155c2:	f006 f9db 	bl	1b97c <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   155c6:	e7eb      	b.n	155a0 <ull_scan_reset+0x10>
   155c8:	200029f4 	.word	0x200029f4

000155cc <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   155cc:	4a03      	ldr	r2, [pc, #12]	; (155dc <ull_scan_handle_get+0x10>)
   155ce:	4b04      	ldr	r3, [pc, #16]	; (155e0 <ull_scan_handle_get+0x14>)
   155d0:	1a80      	subs	r0, r0, r2
   155d2:	fba3 3000 	umull	r3, r0, r3, r0
}
   155d6:	f3c0 1007 	ubfx	r0, r0, #4, #8
   155da:	4770      	bx	lr
   155dc:	200029f4 	.word	0x200029f4
   155e0:	38e38e39 	.word	0x38e38e39

000155e4 <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   155e4:	4a04      	ldr	r2, [pc, #16]	; (155f8 <ull_scan_lll_handle_get+0x14>)
   155e6:	6800      	ldr	r0, [r0, #0]
   155e8:	4b04      	ldr	r3, [pc, #16]	; (155fc <ull_scan_lll_handle_get+0x18>)
   155ea:	1a80      	subs	r0, r0, r2
   155ec:	fba3 3000 	umull	r3, r0, r3, r0
}
   155f0:	f3c0 1007 	ubfx	r0, r0, #4, #8
   155f4:	4770      	bx	lr
   155f6:	bf00      	nop
   155f8:	200029f4 	.word	0x200029f4
   155fc:	38e38e39 	.word	0x38e38e39

00015600 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15600:	b938      	cbnz	r0, 15612 <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   15602:	4805      	ldr	r0, [pc, #20]	; (15618 <ull_scan_is_enabled_get+0x18>)
   15604:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   15608:	f013 0f01 	tst.w	r3, #1
   1560c:	bf08      	it	eq
   1560e:	2000      	moveq	r0, #0
   15610:	4770      	bx	lr
		return NULL;
   15612:	2000      	movs	r0, #0
}
   15614:	4770      	bx	lr
   15616:	bf00      	nop
   15618:	200029f4 	.word	0x200029f4

0001561c <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   1561c:	4a04      	ldr	r2, [pc, #16]	; (15630 <ull_scan_is_disabled_get+0x14>)
   1561e:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   15622:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   15626:	4303      	orrs	r3, r0
}
   15628:	bf0c      	ite	eq
   1562a:	4610      	moveq	r0, r2
   1562c:	2000      	movne	r0, #0
   1562e:	4770      	bx	lr
   15630:	200029f4 	.word	0x200029f4

00015634 <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15634:	b990      	cbnz	r0, 1565c <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   15636:	4a0a      	ldr	r2, [pc, #40]	; (15660 <ull_scan_is_enabled+0x2c>)
   15638:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   1563c:	f013 0001 	ands.w	r0, r3, #1
   15640:	d00d      	beq.n	1565e <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   15642:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   15646:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   15648:	f003 0301 	and.w	r3, r3, #1
   1564c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15650:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   15654:	b11a      	cbz	r2, 1565e <ull_scan_is_enabled+0x2a>
   15656:	f040 0004 	orr.w	r0, r0, #4
   1565a:	4770      	bx	lr
		return 0U;
   1565c:	2000      	movs	r0, #0
}
   1565e:	4770      	bx	lr
   15660:	200029f4 	.word	0x200029f4

00015664 <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   15664:	b950      	cbnz	r0, 1567c <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   15666:	4b06      	ldr	r3, [pc, #24]	; (15680 <ull_scan_filter_pol_get+0x1c>)
   15668:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   1566c:	f010 0001 	ands.w	r0, r0, #1
   15670:	d005      	beq.n	1567e <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   15672:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   15676:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1567a:	4770      	bx	lr
		return 0;
   1567c:	2000      	movs	r0, #0
}
   1567e:	4770      	bx	lr
   15680:	200029f4 	.word	0x200029f4

00015684 <init_reset>:
{
   15684:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   15686:	4b15      	ldr	r3, [pc, #84]	; (156dc <init_reset+0x58>)
   15688:	4815      	ldr	r0, [pc, #84]	; (156e0 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1568a:	4c16      	ldr	r4, [pc, #88]	; (156e4 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   1568c:	2201      	movs	r2, #1
   1568e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   15692:	f7fa fcc7 	bl	10024 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   15696:	4b14      	ldr	r3, [pc, #80]	; (156e8 <init_reset+0x64>)
   15698:	2203      	movs	r2, #3
   1569a:	1d18      	adds	r0, r3, #4
   1569c:	2124      	movs	r1, #36	; 0x24
   1569e:	f7fa fcc1 	bl	10024 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   156a2:	4b12      	ldr	r3, [pc, #72]	; (156ec <init_reset+0x68>)
   156a4:	2204      	movs	r2, #4
   156a6:	1898      	adds	r0, r3, r2
   156a8:	212c      	movs	r1, #44	; 0x2c
   156aa:	f7fa fcbb 	bl	10024 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   156ae:	4b10      	ldr	r3, [pc, #64]	; (156f0 <init_reset+0x6c>)
   156b0:	2207      	movs	r2, #7
   156b2:	1d18      	adds	r0, r3, #4
   156b4:	2108      	movs	r1, #8
   156b6:	f7fa fcb5 	bl	10024 <mem_init>
	default_phy_tx |= PHY_2M;
   156ba:	490e      	ldr	r1, [pc, #56]	; (156f4 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   156bc:	4a0e      	ldr	r2, [pc, #56]	; (156f8 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   156be:	480f      	ldr	r0, [pc, #60]	; (156fc <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   156c0:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   156c2:	f04f 0c1b 	mov.w	ip, #27
   156c6:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   156ca:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   156cc:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   156d0:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   156d2:	f8a0 c000 	strh.w	ip, [r0]
}
   156d6:	2000      	movs	r0, #0
   156d8:	bd10      	pop	{r4, pc}
   156da:	bf00      	nop
   156dc:	20002a4c 	.word	0x20002a4c
   156e0:	20001a30 	.word	0x20001a30
   156e4:	20003404 	.word	0x20003404
   156e8:	20002a74 	.word	0x20002a74
   156ec:	20002ae4 	.word	0x20002ae4
   156f0:	20002b98 	.word	0x20002b98
   156f4:	20003571 	.word	0x20003571
   156f8:	20003570 	.word	0x20003570
   156fc:	20003406 	.word	0x20003406

00015700 <ctrl_tx_pause_enqueue>:
{
   15700:	b538      	push	{r3, r4, r5, lr}
   15702:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   15704:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   15708:	460d      	mov	r5, r1
	if (
   1570a:	b11b      	cbz	r3, 15714 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   1570c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   15710:	0789      	lsls	r1, r1, #30
   15712:	d50c      	bpl.n	1572e <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   15714:	b340      	cbz	r0, 15768 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   15716:	2a00      	cmp	r2, #0
   15718:	d130      	bne.n	1577c <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   1571a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1571e:	681a      	ldr	r2, [r3, #0]
   15720:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15722:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15724:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   15726:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1572a:	b1d3      	cbz	r3, 15762 <ctrl_tx_pause_enqueue+0x62>
}
   1572c:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   1572e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   15732:	07c9      	lsls	r1, r1, #31
   15734:	d4ee      	bmi.n	15714 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   15736:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1573a:	428b      	cmp	r3, r1
   1573c:	d02c      	beq.n	15798 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   1573e:	2800      	cmp	r0, #0
   15740:	d036      	beq.n	157b0 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   15742:	2a00      	cmp	r2, #0
   15744:	d0e9      	beq.n	1571a <ctrl_tx_pause_enqueue+0x1a>
   15746:	4a22      	ldr	r2, [pc, #136]	; (157d0 <ctrl_tx_pause_enqueue+0xd0>)
   15748:	4922      	ldr	r1, [pc, #136]	; (157d4 <ctrl_tx_pause_enqueue+0xd4>)
   1574a:	4823      	ldr	r0, [pc, #140]	; (157d8 <ctrl_tx_pause_enqueue+0xd8>)
   1574c:	f640 236e 	movw	r3, #2670	; 0xa6e
   15750:	f00f fbd9 	bl	24f06 <printk>
   15754:	4040      	eors	r0, r0
   15756:	f380 8811 	msr	BASEPRI, r0
   1575a:	f04f 0003 	mov.w	r0, #3
   1575e:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   15760:	e7db      	b.n	1571a <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   15762:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   15766:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   15768:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1576a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   1576e:	2a00      	cmp	r2, #0
   15770:	d1db      	bne.n	1572a <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   15772:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   15776:	2b00      	cmp	r3, #0
   15778:	d1d8      	bne.n	1572c <ctrl_tx_pause_enqueue+0x2c>
   1577a:	e7f2      	b.n	15762 <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   1577c:	4a14      	ldr	r2, [pc, #80]	; (157d0 <ctrl_tx_pause_enqueue+0xd0>)
   1577e:	4915      	ldr	r1, [pc, #84]	; (157d4 <ctrl_tx_pause_enqueue+0xd4>)
   15780:	4815      	ldr	r0, [pc, #84]	; (157d8 <ctrl_tx_pause_enqueue+0xd8>)
   15782:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   15786:	f00f fbbe 	bl	24f06 <printk>
   1578a:	4040      	eors	r0, r0
   1578c:	f380 8811 	msr	BASEPRI, r0
   15790:	f04f 0003 	mov.w	r0, #3
   15794:	df02      	svc	2
   15796:	e7c0      	b.n	1571a <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   15798:	6819      	ldr	r1, [r3, #0]
   1579a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1579e:	2800      	cmp	r0, #0
   157a0:	d1cf      	bne.n	15742 <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   157a2:	6819      	ldr	r1, [r3, #0]
   157a4:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   157a6:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   157a8:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   157aa:	2a00      	cmp	r2, #0
   157ac:	d0e1      	beq.n	15772 <ctrl_tx_pause_enqueue+0x72>
   157ae:	e7bc      	b.n	1572a <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   157b0:	7919      	ldrb	r1, [r3, #4]
   157b2:	f001 0103 	and.w	r1, r1, #3
   157b6:	2903      	cmp	r1, #3
   157b8:	d004      	beq.n	157c4 <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   157ba:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   157be:	2a00      	cmp	r2, #0
   157c0:	d0ab      	beq.n	1571a <ctrl_tx_pause_enqueue+0x1a>
   157c2:	e7c0      	b.n	15746 <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   157c4:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   157c6:	2903      	cmp	r1, #3
   157c8:	d0eb      	beq.n	157a2 <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   157ca:	290a      	cmp	r1, #10
   157cc:	d1f5      	bne.n	157ba <ctrl_tx_pause_enqueue+0xba>
   157ce:	e7e8      	b.n	157a2 <ctrl_tx_pause_enqueue+0xa2>
   157d0:	0002c6cc 	.word	0x0002c6cc
   157d4:	0002c70c 	.word	0x0002c70c
   157d8:	0002bfdc 	.word	0x0002bfdc

000157dc <tx_lll_flush>:
{
   157dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   157e0:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   157e4:	4934      	ldr	r1, [pc, #208]	; (158b8 <tx_lll_flush+0xdc>)
{
   157e6:	b083      	sub	sp, #12
   157e8:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   157ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   157ee:	4640      	mov	r0, r8
   157f0:	f7fa fc6e 	bl	100d0 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   157f4:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   157f8:	4629      	mov	r1, r5
   157fa:	f008 fcb5 	bl	1e168 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   157fe:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   15800:	aa01      	add	r2, sp, #4
   15802:	4631      	mov	r1, r6
   15804:	f7fa fca4 	bl	10150 <memq_dequeue>
	while (link) {
   15808:	b328      	cbz	r0, 15856 <tx_lll_flush+0x7a>
   1580a:	4c2c      	ldr	r4, [pc, #176]	; (158bc <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   1580c:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15810:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   15814:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   15816:	f894 c001 	ldrb.w	ip, [r4, #1]
   1581a:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   1581c:	1c53      	adds	r3, r2, #1
   1581e:	b2db      	uxtb	r3, r3
		last = 0U;
   15820:	459c      	cmp	ip, r3
   15822:	bf08      	it	eq
   15824:	2300      	moveq	r3, #0
	if (last == first) {
   15826:	4299      	cmp	r1, r3
   15828:	f894 c000 	ldrb.w	ip, [r4]
   1582c:	d033      	beq.n	15896 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1582e:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15830:	fb12 f20c 	smulbb	r2, r2, ip
   15834:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   15838:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1583c:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1583e:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   15842:	6002      	str	r2, [r0, #0]
		tx->next = link;
   15844:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15846:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   15848:	70e3      	strb	r3, [r4, #3]
   1584a:	aa01      	add	r2, sp, #4
   1584c:	4631      	mov	r1, r6
   1584e:	f7fa fc7f 	bl	10150 <memq_dequeue>
	while (link) {
   15852:	2800      	cmp	r0, #0
   15854:	d1de      	bne.n	15814 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   15856:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   1585a:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   1585e:	b150      	cbz	r0, 15876 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   15860:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   15862:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   15864:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   15868:	f7fe fd2c 	bl	142c4 <ull_rx_put>
	ull_rx_sched();
   1586c:	f7fe fd3a 	bl	142e4 <ull_rx_sched>
}
   15870:	b003      	add	sp, #12
   15872:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   15876:	4a12      	ldr	r2, [pc, #72]	; (158c0 <tx_lll_flush+0xe4>)
   15878:	4912      	ldr	r1, [pc, #72]	; (158c4 <tx_lll_flush+0xe8>)
   1587a:	4813      	ldr	r0, [pc, #76]	; (158c8 <tx_lll_flush+0xec>)
   1587c:	f640 13da 	movw	r3, #2522	; 0x9da
   15880:	f00f fb41 	bl	24f06 <printk>
   15884:	4040      	eors	r0, r0
   15886:	f380 8811 	msr	BASEPRI, r0
   1588a:	f04f 0003 	mov.w	r0, #3
   1588e:	df02      	svc	2
	link = rx->hdr.link;
   15890:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   15894:	e7e4      	b.n	15860 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   15896:	4a0a      	ldr	r2, [pc, #40]	; (158c0 <tx_lll_flush+0xe4>)
   15898:	490c      	ldr	r1, [pc, #48]	; (158cc <tx_lll_flush+0xf0>)
   1589a:	480b      	ldr	r0, [pc, #44]	; (158c8 <tx_lll_flush+0xec>)
   1589c:	f640 13c6 	movw	r3, #2502	; 0x9c6
   158a0:	f00f fb31 	bl	24f06 <printk>
   158a4:	4040      	eors	r0, r0
   158a6:	f380 8811 	msr	BASEPRI, r0
   158aa:	f04f 0003 	mov.w	r0, #3
   158ae:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   158b0:	2300      	movs	r3, #0
   158b2:	801b      	strh	r3, [r3, #0]
   158b4:	deff      	udf	#255	; 0xff
   158b6:	bf00      	nop
   158b8:	20001a30 	.word	0x20001a30
   158bc:	20000560 	.word	0x20000560
   158c0:	0002c6cc 	.word	0x0002c6cc
   158c4:	0002c71c 	.word	0x0002c71c
   158c8:	0002bfdc 	.word	0x0002bfdc
   158cc:	0002c714 	.word	0x0002c714

000158d0 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   158d0:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   158d4:	f012 0202 	ands.w	r2, r2, #2
   158d8:	d00a      	beq.n	158f0 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   158da:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   158de:	b1d3      	cbz	r3, 15916 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   158e0:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   158e4:	681a      	ldr	r2, [r3, #0]
   158e6:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   158e8:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   158ea:	680b      	ldr	r3, [r1, #0]
   158ec:	b1d3      	cbz	r3, 15924 <ctrl_tx_sec_enqueue+0x54>
   158ee:	4770      	bx	lr
		if (conn->tx_head) {
   158f0:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   158f4:	b1cb      	cbz	r3, 1592a <ctrl_tx_sec_enqueue+0x5a>
{
   158f6:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   158f8:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   158fc:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   15900:	45e6      	cmp	lr, ip
   15902:	d004      	beq.n	1590e <ctrl_tx_sec_enqueue+0x3e>
   15904:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   15908:	f1bc 0f03 	cmp.w	ip, #3
   1590c:	d010      	beq.n	15930 <ctrl_tx_sec_enqueue+0x60>
}
   1590e:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   15912:	f7ff bef5 	b.w	15700 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   15916:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1591a:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1591c:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   15920:	2b00      	cmp	r3, #0
   15922:	d1e4      	bne.n	158ee <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   15924:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   15928:	4770      	bx	lr
	bool pause = false;
   1592a:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1592c:	f7ff bee8 	b.w	15700 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15930:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   15934:	f00c 0c03 	and.w	ip, ip, #3
   15938:	f1bc 0f03 	cmp.w	ip, #3
   1593c:	d1e7      	bne.n	1590e <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   1593e:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15940:	2a03      	cmp	r2, #3
   15942:	d005      	beq.n	15950 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15944:	f1a2 020a 	sub.w	r2, r2, #10
   15948:	fab2 f282 	clz	r2, r2
   1594c:	0952      	lsrs	r2, r2, #5
   1594e:	e7de      	b.n	1590e <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   15950:	2201      	movs	r2, #1
   15952:	e7dc      	b.n	1590e <ctrl_tx_sec_enqueue+0x3e>

00015954 <ticker_stop_op_cb>:
{
   15954:	b510      	push	{r4, lr}
   15956:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15958:	b9b0      	cbnz	r0, 15988 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   1595a:	4b12      	ldr	r3, [pc, #72]	; (159a4 <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1595c:	2200      	movs	r2, #0
   1595e:	2101      	movs	r1, #1
   15960:	2002      	movs	r0, #2
	mfy.param = param;
   15962:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   15964:	f7fa fc56 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!ret);
   15968:	b900      	cbnz	r0, 1596c <ticker_stop_op_cb+0x18>
}
   1596a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1596c:	4a0e      	ldr	r2, [pc, #56]	; (159a8 <ticker_stop_op_cb+0x54>)
   1596e:	490f      	ldr	r1, [pc, #60]	; (159ac <ticker_stop_op_cb+0x58>)
   15970:	480f      	ldr	r0, [pc, #60]	; (159b0 <ticker_stop_op_cb+0x5c>)
   15972:	f44f 6318 	mov.w	r3, #2432	; 0x980
   15976:	f00f fac6 	bl	24f06 <printk>
   1597a:	4040      	eors	r0, r0
   1597c:	f380 8811 	msr	BASEPRI, r0
   15980:	f04f 0003 	mov.w	r0, #3
   15984:	df02      	svc	2
}
   15986:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15988:	4a07      	ldr	r2, [pc, #28]	; (159a8 <ticker_stop_op_cb+0x54>)
   1598a:	490a      	ldr	r1, [pc, #40]	; (159b4 <ticker_stop_op_cb+0x60>)
   1598c:	4808      	ldr	r0, [pc, #32]	; (159b0 <ticker_stop_op_cb+0x5c>)
   1598e:	f640 137a 	movw	r3, #2426	; 0x97a
   15992:	f00f fab8 	bl	24f06 <printk>
   15996:	4040      	eors	r0, r0
   15998:	f380 8811 	msr	BASEPRI, r0
   1599c:	f04f 0003 	mov.w	r0, #3
   159a0:	df02      	svc	2
   159a2:	e7da      	b.n	1595a <ticker_stop_op_cb+0x6>
   159a4:	200005f8 	.word	0x200005f8
   159a8:	0002c6cc 	.word	0x0002c6cc
   159ac:	0002c454 	.word	0x0002c454
   159b0:	0002bfdc 	.word	0x0002bfdc
   159b4:	0002c72c 	.word	0x0002c72c

000159b8 <disabled_cb>:
{
   159b8:	b508      	push	{r3, lr}
	mfy.param = param;
   159ba:	4b0b      	ldr	r3, [pc, #44]	; (159e8 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   159bc:	2200      	movs	r2, #0
	mfy.param = param;
   159be:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   159c0:	4611      	mov	r1, r2
   159c2:	2001      	movs	r0, #1
   159c4:	f7fa fc26 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!ret);
   159c8:	b900      	cbnz	r0, 159cc <disabled_cb+0x14>
}
   159ca:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   159cc:	4a07      	ldr	r2, [pc, #28]	; (159ec <disabled_cb+0x34>)
   159ce:	4908      	ldr	r1, [pc, #32]	; (159f0 <disabled_cb+0x38>)
   159d0:	4808      	ldr	r0, [pc, #32]	; (159f4 <disabled_cb+0x3c>)
   159d2:	f640 13ac 	movw	r3, #2476	; 0x9ac
   159d6:	f00f fa96 	bl	24f06 <printk>
   159da:	4040      	eors	r0, r0
   159dc:	f380 8811 	msr	BASEPRI, r0
   159e0:	f04f 0003 	mov.w	r0, #3
   159e4:	df02      	svc	2
}
   159e6:	bd08      	pop	{r3, pc}
   159e8:	200005c8 	.word	0x200005c8
   159ec:	0002c6cc 	.word	0x0002c6cc
   159f0:	0002c454 	.word	0x0002c454
   159f4:	0002bfdc 	.word	0x0002bfdc

000159f8 <conn_disable>:
{
   159f8:	b538      	push	{r3, r4, r5, lr}
   159fa:	4604      	mov	r4, r0
	return hdr->ref;
   159fc:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   15a00:	b353      	cbz	r3, 15a58 <conn_disable+0x60>
		mfy.param = &conn->lll;
   15a02:	4d17      	ldr	r5, [pc, #92]	; (15a60 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   15a04:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   15a06:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   15a08:	b16b      	cbz	r3, 15a26 <conn_disable+0x2e>
   15a0a:	4a16      	ldr	r2, [pc, #88]	; (15a64 <conn_disable+0x6c>)
   15a0c:	4916      	ldr	r1, [pc, #88]	; (15a68 <conn_disable+0x70>)
   15a0e:	4817      	ldr	r0, [pc, #92]	; (15a6c <conn_disable+0x74>)
   15a10:	f640 1395 	movw	r3, #2453	; 0x995
   15a14:	f00f fa77 	bl	24f06 <printk>
   15a18:	4040      	eors	r0, r0
   15a1a:	f380 8811 	msr	BASEPRI, r0
   15a1e:	f04f 0003 	mov.w	r0, #3
   15a22:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   15a24:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   15a26:	4912      	ldr	r1, [pc, #72]	; (15a70 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15a28:	4b0d      	ldr	r3, [pc, #52]	; (15a60 <conn_disable+0x68>)
   15a2a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   15a2c:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15a30:	4611      	mov	r1, r2
   15a32:	2001      	movs	r0, #1
   15a34:	f7fa fbee 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!ret);
   15a38:	b900      	cbnz	r0, 15a3c <conn_disable+0x44>
}
   15a3a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   15a3c:	4a09      	ldr	r2, [pc, #36]	; (15a64 <conn_disable+0x6c>)
   15a3e:	490d      	ldr	r1, [pc, #52]	; (15a74 <conn_disable+0x7c>)
   15a40:	480a      	ldr	r0, [pc, #40]	; (15a6c <conn_disable+0x74>)
   15a42:	f640 139c 	movw	r3, #2460	; 0x99c
   15a46:	f00f fa5e 	bl	24f06 <printk>
   15a4a:	4040      	eors	r0, r0
   15a4c:	f380 8811 	msr	BASEPRI, r0
   15a50:	f04f 0003 	mov.w	r0, #3
   15a54:	df02      	svc	2
}
   15a56:	bd38      	pop	{r3, r4, r5, pc}
   15a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   15a5c:	f7ff bfac 	b.w	159b8 <disabled_cb>
   15a60:	200005e8 	.word	0x200005e8
   15a64:	0002c6cc 	.word	0x0002c6cc
   15a68:	0002c590 	.word	0x0002c590
   15a6c:	0002bfdc 	.word	0x0002bfdc
   15a70:	000159b9 	.word	0x000159b9
   15a74:	0002c454 	.word	0x0002c454

00015a78 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   15a78:	6883      	ldr	r3, [r0, #8]
   15a7a:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   15a7c:	7f53      	ldrb	r3, [r2, #29]
   15a7e:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   15a80:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   15a84:	d001      	beq.n	15a8a <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   15a86:	f7ec bb83 	b.w	2190 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   15a8a:	f7ec bff5 	b.w	2a78 <ull_central_setup>
   15a8e:	bf00      	nop

00015a90 <ticker_start_conn_op_cb>:
{
   15a90:	b510      	push	{r4, lr}
   15a92:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15a94:	b990      	cbnz	r0, 15abc <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   15a96:	4620      	mov	r0, r4
   15a98:	f7fe fb4a 	bl	14130 <ull_update_unmark>
	LL_ASSERT(p == param);
   15a9c:	4284      	cmp	r4, r0
   15a9e:	d00c      	beq.n	15aba <ticker_start_conn_op_cb+0x2a>
   15aa0:	4a0d      	ldr	r2, [pc, #52]	; (15ad8 <ticker_start_conn_op_cb+0x48>)
   15aa2:	490e      	ldr	r1, [pc, #56]	; (15adc <ticker_start_conn_op_cb+0x4c>)
   15aa4:	480e      	ldr	r0, [pc, #56]	; (15ae0 <ticker_start_conn_op_cb+0x50>)
   15aa6:	f640 03b7 	movw	r3, #2231	; 0x8b7
   15aaa:	f00f fa2c 	bl	24f06 <printk>
   15aae:	4040      	eors	r0, r0
   15ab0:	f380 8811 	msr	BASEPRI, r0
   15ab4:	f04f 0003 	mov.w	r0, #3
   15ab8:	df02      	svc	2
}
   15aba:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15abc:	4a06      	ldr	r2, [pc, #24]	; (15ad8 <ticker_start_conn_op_cb+0x48>)
   15abe:	4909      	ldr	r1, [pc, #36]	; (15ae4 <ticker_start_conn_op_cb+0x54>)
   15ac0:	4807      	ldr	r0, [pc, #28]	; (15ae0 <ticker_start_conn_op_cb+0x50>)
   15ac2:	f640 03b4 	movw	r3, #2228	; 0x8b4
   15ac6:	f00f fa1e 	bl	24f06 <printk>
   15aca:	4040      	eors	r0, r0
   15acc:	f380 8811 	msr	BASEPRI, r0
   15ad0:	f04f 0003 	mov.w	r0, #3
   15ad4:	df02      	svc	2
   15ad6:	e7de      	b.n	15a96 <ticker_start_conn_op_cb+0x6>
   15ad8:	0002c6cc 	.word	0x0002c6cc
   15adc:	0002c738 	.word	0x0002c738
   15ae0:	0002bfdc 	.word	0x0002bfdc
   15ae4:	0002c72c 	.word	0x0002c72c

00015ae8 <ticker_stop_conn_op_cb>:
{
   15ae8:	b510      	push	{r4, lr}
   15aea:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15aec:	b990      	cbnz	r0, 15b14 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   15aee:	4620      	mov	r0, r4
   15af0:	f7fe fb14 	bl	1411c <ull_update_mark>
	LL_ASSERT(p == param);
   15af4:	4284      	cmp	r4, r0
   15af6:	d00c      	beq.n	15b12 <ticker_stop_conn_op_cb+0x2a>
   15af8:	4a0d      	ldr	r2, [pc, #52]	; (15b30 <ticker_stop_conn_op_cb+0x48>)
   15afa:	490e      	ldr	r1, [pc, #56]	; (15b34 <ticker_stop_conn_op_cb+0x4c>)
   15afc:	480e      	ldr	r0, [pc, #56]	; (15b38 <ticker_stop_conn_op_cb+0x50>)
   15afe:	f640 03ad 	movw	r3, #2221	; 0x8ad
   15b02:	f00f fa00 	bl	24f06 <printk>
   15b06:	4040      	eors	r0, r0
   15b08:	f380 8811 	msr	BASEPRI, r0
   15b0c:	f04f 0003 	mov.w	r0, #3
   15b10:	df02      	svc	2
}
   15b12:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15b14:	4a06      	ldr	r2, [pc, #24]	; (15b30 <ticker_stop_conn_op_cb+0x48>)
   15b16:	4909      	ldr	r1, [pc, #36]	; (15b3c <ticker_stop_conn_op_cb+0x54>)
   15b18:	4807      	ldr	r0, [pc, #28]	; (15b38 <ticker_stop_conn_op_cb+0x50>)
   15b1a:	f640 03aa 	movw	r3, #2218	; 0x8aa
   15b1e:	f00f f9f2 	bl	24f06 <printk>
   15b22:	4040      	eors	r0, r0
   15b24:	f380 8811 	msr	BASEPRI, r0
   15b28:	f04f 0003 	mov.w	r0, #3
   15b2c:	df02      	svc	2
   15b2e:	e7de      	b.n	15aee <ticker_stop_conn_op_cb+0x6>
   15b30:	0002c6cc 	.word	0x0002c6cc
   15b34:	0002c738 	.word	0x0002c738
   15b38:	0002bfdc 	.word	0x0002bfdc
   15b3c:	0002c72c 	.word	0x0002c72c

00015b40 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15b40:	b900      	cbnz	r0, 15b44 <ticker_update_conn_op_cb+0x4>
   15b42:	4770      	bx	lr
{
   15b44:	b510      	push	{r4, lr}
   15b46:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15b48:	f7fe fafe 	bl	14148 <ull_update_mark_get>
   15b4c:	4284      	cmp	r4, r0
   15b4e:	d010      	beq.n	15b72 <ticker_update_conn_op_cb+0x32>
   15b50:	f7fe fade 	bl	14110 <ull_disable_mark_get>
   15b54:	4284      	cmp	r4, r0
   15b56:	d00c      	beq.n	15b72 <ticker_update_conn_op_cb+0x32>
   15b58:	4a06      	ldr	r2, [pc, #24]	; (15b74 <ticker_update_conn_op_cb+0x34>)
   15b5a:	4907      	ldr	r1, [pc, #28]	; (15b78 <ticker_update_conn_op_cb+0x38>)
   15b5c:	4807      	ldr	r0, [pc, #28]	; (15b7c <ticker_update_conn_op_cb+0x3c>)
   15b5e:	f640 03a1 	movw	r3, #2209	; 0x8a1
   15b62:	f00f f9d0 	bl	24f06 <printk>
   15b66:	4040      	eors	r0, r0
   15b68:	f380 8811 	msr	BASEPRI, r0
   15b6c:	f04f 0003 	mov.w	r0, #3
   15b70:	df02      	svc	2
}
   15b72:	bd10      	pop	{r4, pc}
   15b74:	0002c6cc 	.word	0x0002c6cc
   15b78:	0002c744 	.word	0x0002c744
   15b7c:	0002bfdc 	.word	0x0002bfdc

00015b80 <tx_ull_dequeue>:
{
   15b80:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15b82:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   15b86:	4603      	mov	r3, r0
   15b88:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15b8a:	b164      	cbz	r4, 15ba6 <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   15b8c:	4294      	cmp	r4, r2
   15b8e:	d021      	beq.n	15bd4 <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15b90:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   15b94:	428a      	cmp	r2, r1
   15b96:	d00b      	beq.n	15bb0 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   15b98:	6811      	ldr	r1, [r2, #0]
   15b9a:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   15b9e:	2200      	movs	r2, #0
}
   15ba0:	bc10      	pop	{r4}
		tx->next = NULL;
   15ba2:	6002      	str	r2, [r0, #0]
}
   15ba4:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15ba6:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   15baa:	4291      	cmp	r1, r2
   15bac:	d104      	bne.n	15bb8 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   15bae:	b18a      	cbz	r2, 15bd4 <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   15bb0:	6809      	ldr	r1, [r1, #0]
   15bb2:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   15bb6:	e7ef      	b.n	15b98 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15bb8:	7911      	ldrb	r1, [r2, #4]
   15bba:	f001 0103 	and.w	r1, r1, #3
   15bbe:	2903      	cmp	r1, #3
   15bc0:	d013      	beq.n	15bea <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   15bc2:	6812      	ldr	r2, [r2, #0]
   15bc4:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   15bc8:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   15bca:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   15bce:	bc10      	pop	{r4}
		tx->next = tx;
   15bd0:	6000      	str	r0, [r0, #0]
}
   15bd2:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15bd4:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   15bd8:	6812      	ldr	r2, [r2, #0]
   15bda:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15bde:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   15be0:	bf18      	it	ne
   15be2:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15be6:	d1f2      	bne.n	15bce <tx_ull_dequeue+0x4e>
   15be8:	e7ee      	b.n	15bc8 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   15bea:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15bec:	2903      	cmp	r1, #3
   15bee:	d0d3      	beq.n	15b98 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15bf0:	290a      	cmp	r1, #10
   15bf2:	d1e6      	bne.n	15bc2 <tx_ull_dequeue+0x42>
   15bf4:	e7d0      	b.n	15b98 <tx_ull_dequeue+0x18>
   15bf6:	bf00      	nop

00015bf8 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   15bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   15bfc:	f890 60d8 	ldrb.w	r6, [r0, #216]	; 0xd8
   15c00:	f016 0602 	ands.w	r6, r6, #2
{
   15c04:	460f      	mov	r7, r1
	if (conn->common.txn_lock) {
   15c06:	d16b      	bne.n	15ce0 <feature_rsp_send+0xe8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15c08:	4605      	mov	r5, r0
   15c0a:	4839      	ldr	r0, [pc, #228]	; (15cf0 <feature_rsp_send+0xf8>)
   15c0c:	4690      	mov	r8, r2
   15c0e:	f7fa fa2d 	bl	1006c <mem_acquire>
	if (!tx) {
   15c12:	4604      	mov	r4, r0
   15c14:	2800      	cmp	r0, #0
   15c16:	d068      	beq.n	15cea <feature_rsp_send+0xf2>
	conn->common.txn_lock = 1U;
   15c18:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   15c1c:	4935      	ldr	r1, [pc, #212]	; (15cf4 <feature_rsp_send+0xfc>)
	conn->common.txn_lock = 1U;
   15c1e:	f043 0302 	orr.w	r3, r3, #2
   15c22:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
   15c26:	f8d8 2004 	ldr.w	r2, [r8, #4]
   15c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
	feat &= LL_FEAT_BIT_MASK;
   15c2e:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15c30:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
   15c34:	400a      	ands	r2, r1
   15c36:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   15c3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15c3e:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   15c42:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   15c46:	4013      	ands	r3, r2
   15c48:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   15c4c:	f8d8 9004 	ldr.w	r9, [r8, #4]
   15c50:	f8d8 8008 	ldr.w	r8, [r8, #8]
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   15c54:	f7fd fc50 	bl	134f8 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   15c58:	4b26      	ldr	r3, [pc, #152]	; (15cf4 <feature_rsp_send+0xfc>)
   15c5a:	ea49 0303 	orr.w	r3, r9, r3
	feat_result = feat_to_keep & feat_octet0;
   15c5e:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   15c60:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   15c64:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
   15c68:	ea43 0309 	orr.w	r3, r3, r9
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15c6c:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   15c70:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   15c74:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	/* features exchanged */
	conn->common.fex_valid = 1U;
   15c78:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   15c7c:	f043 0301 	orr.w	r3, r3, #1
   15c80:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c84:	7923      	ldrb	r3, [r4, #4]
   15c86:	f008 08ff 	and.w	r8, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15c8a:	f048 0210 	orr.w	r2, r8, #16
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c8e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_feature.features_peer =
   15c92:	f8c5 2134 	str.w	r2, [r5, #308]	; 0x134
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c96:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   15c98:	2309      	movs	r3, #9
   15c9a:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   15c9c:	71e3      	strb	r3, [r4, #7]
__ssp_bos_icheck3(memset, void *, int)
   15c9e:	60a6      	str	r6, [r4, #8]
   15ca0:	60e6      	str	r6, [r4, #12]
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   15ca2:	f7fd fc29 	bl	134f8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   15ca6:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	dst[0] = val;
   15caa:	7321      	strb	r1, [r4, #12]
   15cac:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   15cae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   15cb2:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   15cb6:	4303      	orrs	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   15cb8:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   15cba:	7223      	strb	r3, [r4, #8]
   15cbc:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
   15cbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
   15cc2:	0a12      	lsrs	r2, r2, #8
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   15cc4:	4628      	mov	r0, r5
   15cc6:	7263      	strb	r3, [r4, #9]
   15cc8:	7366      	strb	r6, [r4, #13]
	dst[0] = val;
   15cca:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
   15ccc:	73e6      	strb	r6, [r4, #15]
   15cce:	72e2      	strb	r2, [r4, #11]
   15cd0:	4621      	mov	r1, r4
   15cd2:	f7ff fdfd 	bl	158d0 <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15cd6:	2301      	movs	r3, #1
   15cd8:	713b      	strb	r3, [r7, #4]

	return 0;
   15cda:	4630      	mov	r0, r6
}
   15cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15ce0:	2301      	movs	r3, #1
   15ce2:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   15ce4:	2000      	movs	r0, #0
}
   15ce6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   15cea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15cee:	e7f5      	b.n	15cdc <feature_rsp_send+0xe4>
   15cf0:	20002ae4 	.word	0x20002ae4
   15cf4:	087830d0 	.word	0x087830d0

00015cf8 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   15cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15cfa:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   15cfc:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   15d00:	0787      	lsls	r7, r0, #30
{
   15d02:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   15d04:	d433      	bmi.n	15d6e <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15d06:	482e      	ldr	r0, [pc, #184]	; (15dc0 <reject_ext_ind_send+0xc8>)
   15d08:	4617      	mov	r7, r2
   15d0a:	461e      	mov	r6, r3
   15d0c:	f7fa f9ae 	bl	1006c <mem_acquire>
	if (!tx) {
   15d10:	2800      	cmp	r0, #0
   15d12:	d038      	beq.n	15d86 <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   15d14:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   15d18:	f043 0302 	orr.w	r3, r3, #2
   15d1c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15d20:	2303      	movs	r3, #3
   15d22:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15d24:	2211      	movs	r2, #17
	    conn->tx_head &&
   15d26:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15d2a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d2c:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   15d2e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   15d32:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d34:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15d38:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15d3a:	7102      	strb	r2, [r0, #4]
	if (
   15d3c:	b1db      	cbz	r3, 15d76 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   15d3e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   15d42:	0796      	lsls	r6, r2, #30
   15d44:	d417      	bmi.n	15d76 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   15d46:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   15d4a:	07d2      	lsls	r2, r2, #31
   15d4c:	d413      	bmi.n	15d76 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   15d4e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   15d52:	4293      	cmp	r3, r2
   15d54:	d022      	beq.n	15d9c <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   15d56:	b1c9      	cbz	r1, 15d8c <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   15d58:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15d5c:	681a      	ldr	r2, [r3, #0]
   15d5e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15d60:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15d62:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15d64:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15d68:	b90b      	cbnz	r3, 15d6e <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   15d6a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15d6e:	2301      	movs	r3, #1
   15d70:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   15d72:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   15d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   15d76:	2900      	cmp	r1, #0
   15d78:	d1ee      	bne.n	15d58 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   15d7a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15d7c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15d80:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   15d84:	e7f0      	b.n	15d68 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   15d86:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15d8c:	791a      	ldrb	r2, [r3, #4]
   15d8e:	f002 0203 	and.w	r2, r2, #3
   15d92:	2a03      	cmp	r2, #3
   15d94:	d00e      	beq.n	15db4 <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15d96:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   15d9a:	e7df      	b.n	15d5c <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   15d9c:	681a      	ldr	r2, [r3, #0]
   15d9e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15da2:	2900      	cmp	r1, #0
   15da4:	d1d8      	bne.n	15d58 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   15da6:	681a      	ldr	r2, [r3, #0]
   15da8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15daa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15dac:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15dae:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15db2:	e7d9      	b.n	15d68 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   15db4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15db6:	2a03      	cmp	r2, #3
   15db8:	d0f5      	beq.n	15da6 <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15dba:	2a0a      	cmp	r2, #10
   15dbc:	d1eb      	bne.n	15d96 <reject_ext_ind_send+0x9e>
   15dbe:	e7f2      	b.n	15da6 <reject_ext_ind_send+0xae>
   15dc0:	20002ae4 	.word	0x20002ae4

00015dc4 <event_len_prep>:
{
   15dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   15dc6:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   15dca:	f003 0207 	and.w	r2, r3, #7
{
   15dce:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   15dd0:	2a06      	cmp	r2, #6
   15dd2:	f200 80d4 	bhi.w	15f7e <event_len_prep+0x1ba>
   15dd6:	e8df f002 	tbb	[pc, r2]
   15dda:	4704      	.short	0x4704
   15ddc:	48484747 	.word	0x48484747
   15de0:	47          	.byte	0x47
   15de1:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15de2:	486e      	ldr	r0, [pc, #440]	; (15f9c <event_len_prep+0x1d8>)
   15de4:	f7fa f942 	bl	1006c <mem_acquire>
		if (!tx) {
   15de8:	2800      	cmp	r0, #0
   15dea:	d03d      	beq.n	15e68 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15dec:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15df0:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   15df4:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15df8:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15dfc:	2301      	movs	r3, #1
   15dfe:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   15e02:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15e06:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   15e0a:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   15e0c:	72c3      	strb	r3, [r0, #11]
   15e0e:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15e10:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   15e12:	2309      	movs	r3, #9
   15e14:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   15e16:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15e18:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15e1a:	2214      	movs	r2, #20
	    conn->tx_head &&
   15e1c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15e20:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   15e22:	2100      	movs	r1, #0
   15e24:	221b      	movs	r2, #27
   15e26:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   15e28:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   15e2c:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15e2e:	7902      	ldrb	r2, [r0, #4]
   15e30:	f042 0203 	orr.w	r2, r2, #3
   15e34:	7102      	strb	r2, [r0, #4]
	if (
   15e36:	b13b      	cbz	r3, 15e48 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   15e38:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   15e3c:	0795      	lsls	r5, r2, #30
   15e3e:	d403      	bmi.n	15e48 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   15e40:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   15e44:	07d2      	lsls	r2, r2, #31
   15e46:	d573      	bpl.n	15f30 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   15e48:	2900      	cmp	r1, #0
   15e4a:	d07f      	beq.n	15f4c <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   15e4c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   15e50:	681a      	ldr	r2, [r3, #0]
   15e52:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15e54:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15e56:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15e58:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   15e5c:	2b00      	cmp	r3, #0
   15e5e:	d056      	beq.n	15f0e <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   15e60:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15e64:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   15e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15e6a:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15e6e:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   15e72:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   15e76:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   15e7a:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15e7e:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15e82:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   15e84:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15e88:	d024      	beq.n	15ed4 <event_len_prep+0x110>
			conn->llcp_length.state =
   15e8a:	2206      	movs	r2, #6
   15e8c:	f362 0302 	bfi	r3, r2, #0, #3
   15e90:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   15e94:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   15e98:	b335      	cbz	r5, 15ee8 <event_len_prep+0x124>
   15e9a:	6828      	ldr	r0, [r5, #0]
   15e9c:	b320      	cbz	r0, 15ee8 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15e9e:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   15ea0:	6842      	ldr	r2, [r0, #4]
   15ea2:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15ea6:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   15eaa:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15eac:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   15eae:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   15eb0:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   15eb2:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15eb4:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15eb6:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15eb8:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15eba:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15ebe:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15ec0:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15ec2:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15ec4:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15ec6:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   15ec8:	f7fe f86c 	bl	13fa4 <ll_rx_put>
}
   15ecc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   15ed0:	f7fe b872 	b.w	13fb8 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   15ed4:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   15ed8:	b9e2      	cbnz	r2, 15f14 <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   15eda:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   15ede:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   15ee2:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   15ee6:	e7d5      	b.n	15e94 <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   15ee8:	4a2d      	ldr	r2, [pc, #180]	; (15fa0 <event_len_prep+0x1dc>)
   15eea:	492e      	ldr	r1, [pc, #184]	; (15fa4 <event_len_prep+0x1e0>)
   15eec:	482e      	ldr	r0, [pc, #184]	; (15fa8 <event_len_prep+0x1e4>)
   15eee:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   15ef2:	f00f f808 	bl	24f06 <printk>
   15ef6:	4040      	eors	r0, r0
   15ef8:	f380 8811 	msr	BASEPRI, r0
   15efc:	f04f 0003 	mov.w	r0, #3
   15f00:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15f02:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15f04:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15f08:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   15f0c:	e7c7      	b.n	15e9e <event_len_prep+0xda>
		conn->tx_data_last = tx;
   15f0e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   15f12:	e7a5      	b.n	15e60 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   15f14:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   15f18:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15f1a:	f362 0302 	bfi	r3, r2, #0, #3
   15f1e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   15f22:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   15f26:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   15f2a:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15f2e:	e7b1      	b.n	15e94 <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   15f30:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   15f34:	4293      	cmp	r3, r2
   15f36:	d00f      	beq.n	15f58 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   15f38:	2900      	cmp	r1, #0
   15f3a:	d187      	bne.n	15e4c <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15f3c:	791a      	ldrb	r2, [r3, #4]
   15f3e:	f002 0203 	and.w	r2, r2, #3
   15f42:	2a03      	cmp	r2, #3
   15f44:	d015      	beq.n	15f72 <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   15f46:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   15f4a:	e781      	b.n	15e50 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   15f4c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15f4e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   15f52:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   15f56:	e781      	b.n	15e5c <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   15f58:	681a      	ldr	r2, [r3, #0]
   15f5a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   15f5e:	2900      	cmp	r1, #0
   15f60:	f47f af74 	bne.w	15e4c <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   15f64:	681a      	ldr	r2, [r3, #0]
   15f66:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15f68:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15f6a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15f6c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   15f70:	e774      	b.n	15e5c <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   15f72:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   15f74:	2a03      	cmp	r2, #3
   15f76:	d0f5      	beq.n	15f64 <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   15f78:	2a0a      	cmp	r2, #10
   15f7a:	d1e4      	bne.n	15f46 <event_len_prep+0x182>
   15f7c:	e7f2      	b.n	15f64 <event_len_prep+0x1a0>
		LL_ASSERT(0);
   15f7e:	4a08      	ldr	r2, [pc, #32]	; (15fa0 <event_len_prep+0x1dc>)
   15f80:	490a      	ldr	r1, [pc, #40]	; (15fac <event_len_prep+0x1e8>)
   15f82:	4809      	ldr	r0, [pc, #36]	; (15fa8 <event_len_prep+0x1e4>)
   15f84:	f241 03ea 	movw	r3, #4330	; 0x10ea
   15f88:	f00e ffbd 	bl	24f06 <printk>
   15f8c:	4040      	eors	r0, r0
   15f8e:	f380 8811 	msr	BASEPRI, r0
   15f92:	f04f 0003 	mov.w	r0, #3
   15f96:	df02      	svc	2
}
   15f98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15f9a:	bf00      	nop
   15f9c:	20002ae4 	.word	0x20002ae4
   15fa0:	0002c6cc 	.word	0x0002c6cc
   15fa4:	0002c798 	.word	0x0002c798
   15fa8:	0002bfdc 	.word	0x0002bfdc
   15fac:	0002c074 	.word	0x0002c074

00015fb0 <event_phy_upd_ind_prep>:
{
   15fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   15fb4:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   15fb8:	f013 0601 	ands.w	r6, r3, #1
{
   15fbc:	4604      	mov	r4, r0
   15fbe:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   15fc0:	f040 8092 	bne.w	160e8 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   15fc4:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   15fc8:	1a69      	subs	r1, r5, r1
   15fca:	0409      	lsls	r1, r1, #16
   15fcc:	f100 8093 	bmi.w	160f6 <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15fd0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   15fd4:	2900      	cmp	r1, #0
   15fd6:	f2c0 8110 	blt.w	161fa <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   15fda:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   15fde:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   15fe0:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   15fe4:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   15fe8:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   15fec:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   15ff0:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   15ff4:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   15ff8:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   15ffc:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   16000:	d17b      	bne.n	160fa <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   16002:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   16006:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1600a:	d008      	beq.n	1601e <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   1600c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   16010:	095b      	lsrs	r3, r3, #5
   16012:	f363 0102 	bfi	r1, r3, #0, #3
   16016:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1601a:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   1601e:	2d00      	cmp	r5, #0
   16020:	f000 80cb 	beq.w	161ba <event_phy_upd_ind_prep+0x20a>
   16024:	6828      	ldr	r0, [r5, #0]
   16026:	2800      	cmp	r0, #0
   16028:	f000 80c7 	beq.w	161ba <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1602c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   16030:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   16034:	f8d0 c004 	ldr.w	ip, [r0, #4]
   16038:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1603c:	0792      	lsls	r2, r2, #30
   1603e:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   16042:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16046:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   1604a:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1604e:	d402      	bmi.n	16056 <event_phy_upd_ind_prep+0xa6>
   16050:	4599      	cmp	r9, r3
   16052:	f000 80ee 	beq.w	16232 <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   16056:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16058:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1605a:	231c      	movs	r3, #28
   1605c:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   1605e:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   16060:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   16064:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   16068:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   1606a:	4629      	mov	r1, r5
   1606c:	f7fd ff9a 	bl	13fa4 <ll_rx_put>
		rx = conn->llcp_rx;
   16070:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   16074:	2d00      	cmp	r5, #0
   16076:	f000 80b1 	beq.w	161dc <event_phy_upd_ind_prep+0x22c>
   1607a:	6828      	ldr	r0, [r5, #0]
   1607c:	2800      	cmp	r0, #0
   1607e:	f000 80ad 	beq.w	161dc <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   16082:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   16086:	6842      	ldr	r2, [r0, #4]
   16088:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   1608c:	42b3      	cmp	r3, r6
   1608e:	d30a      	bcc.n	160a6 <event_phy_upd_ind_prep+0xf6>
   16090:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   16094:	d807      	bhi.n	160a6 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   16096:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   1609a:	42bb      	cmp	r3, r7
   1609c:	d303      	bcc.n	160a6 <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   1609e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   160a2:	f240 80ff 	bls.w	162a4 <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   160a6:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   160aa:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   160ae:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   160b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   160b2:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   160b4:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   160b8:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   160bc:	2109      	movs	r1, #9
   160be:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   160c0:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   160c4:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   160c6:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   160ca:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   160cc:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   160d0:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   160d2:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   160d4:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   160d6:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   160d8:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   160da:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   160dc:	f7fd ff62 	bl	13fa4 <ll_rx_put>
}
   160e0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   160e4:	f7fd bf68 	b.w	13fb8 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   160e8:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   160ec:	2200      	movs	r2, #0
   160ee:	f7fa f827 	bl	10140 <memq_peek>
   160f2:	4606      	mov	r6, r0
   160f4:	b150      	cbz	r0, 1610c <event_phy_upd_ind_prep+0x15c>
}
   160f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   160fa:	f3c3 0082 	ubfx	r0, r3, #2, #3
   160fe:	f360 0102 	bfi	r1, r0, #0, #3
   16102:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   16106:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1610a:	e77c      	b.n	16006 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   1610c:	2002      	movs	r0, #2
   1610e:	f7fd ff59 	bl	13fc4 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   16112:	4680      	mov	r8, r0
   16114:	2800      	cmp	r0, #0
   16116:	d0ee      	beq.n	160f6 <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16118:	4893      	ldr	r0, [pc, #588]	; (16368 <event_phy_upd_ind_prep+0x3b8>)
   1611a:	f7f9 ffa7 	bl	1006c <mem_acquire>
		if (!tx) {
   1611e:	4607      	mov	r7, r0
   16120:	2800      	cmp	r0, #0
   16122:	d0e8      	beq.n	160f6 <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   16124:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16128:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1612c:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   16130:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   16134:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   16138:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   1613c:	b2db      	uxtb	r3, r3
   1613e:	f040 8093 	bne.w	16268 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   16142:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   16146:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1614a:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1614c:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   16150:	f100 80ba 	bmi.w	162c8 <event_phy_upd_ind_prep+0x318>
   16154:	4633      	mov	r3, r6
   16156:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   16158:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   1615a:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1615c:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   1615e:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16160:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   16162:	2218      	movs	r2, #24
	    conn->tx_head &&
   16164:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   16168:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   1616c:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1616e:	793a      	ldrb	r2, [r7, #4]
   16170:	f042 0203 	orr.w	r2, r2, #3
   16174:	713a      	strb	r2, [r7, #4]
	if (
   16176:	2b00      	cmp	r3, #0
   16178:	f000 809d 	beq.w	162b6 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   1617c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   16180:	0795      	lsls	r5, r2, #30
   16182:	f100 8098 	bmi.w	162b6 <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   16186:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1618a:	07d0      	lsls	r0, r2, #31
   1618c:	f100 8093 	bmi.w	162b6 <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   16190:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   16194:	4293      	cmp	r3, r2
   16196:	f000 80cb 	beq.w	16330 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   1619a:	2900      	cmp	r1, #0
   1619c:	f000 80d5 	beq.w	1634a <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   161a0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   161a4:	681a      	ldr	r2, [r3, #0]
   161a6:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   161a8:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   161aa:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   161ac:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   161b0:	2b00      	cmp	r3, #0
   161b2:	d1a0      	bne.n	160f6 <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   161b4:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   161b8:	e79d      	b.n	160f6 <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   161ba:	4a6c      	ldr	r2, [pc, #432]	; (1636c <event_phy_upd_ind_prep+0x3bc>)
   161bc:	496c      	ldr	r1, [pc, #432]	; (16370 <event_phy_upd_ind_prep+0x3c0>)
   161be:	486d      	ldr	r0, [pc, #436]	; (16374 <event_phy_upd_ind_prep+0x3c4>)
   161c0:	f241 231a 	movw	r3, #4634	; 0x121a
   161c4:	f00e fe9f 	bl	24f06 <printk>
   161c8:	4040      	eors	r0, r0
   161ca:	f380 8811 	msr	BASEPRI, r0
   161ce:	f04f 0003 	mov.w	r0, #3
   161d2:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   161d4:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   161d6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   161da:	e727      	b.n	1602c <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   161dc:	4a63      	ldr	r2, [pc, #396]	; (1636c <event_phy_upd_ind_prep+0x3bc>)
   161de:	4964      	ldr	r1, [pc, #400]	; (16370 <event_phy_upd_ind_prep+0x3c0>)
   161e0:	4864      	ldr	r0, [pc, #400]	; (16374 <event_phy_upd_ind_prep+0x3c4>)
   161e2:	f241 2349 	movw	r3, #4681	; 0x1249
   161e6:	f00e fe8e 	bl	24f06 <printk>
   161ea:	4040      	eors	r0, r0
   161ec:	f380 8811 	msr	BASEPRI, r0
   161f0:	f04f 0003 	mov.w	r0, #3
   161f4:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   161f6:	6828      	ldr	r0, [r5, #0]
   161f8:	e743      	b.n	16082 <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   161fa:	f7fd ff01 	bl	14000 <ll_pdu_rx_alloc>
			if (!rx) {
   161fe:	4605      	mov	r5, r0
   16200:	2800      	cmp	r0, #0
   16202:	f43f af78 	beq.w	160f6 <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   16206:	6803      	ldr	r3, [r0, #0]
   16208:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1620c:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1620e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   16212:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   16216:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   16218:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1621c:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   1621e:	f6bf aedf 	bge.w	15fe0 <event_phy_upd_ind_prep+0x30>
   16222:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   16226:	2900      	cmp	r1, #0
   16228:	f43f aeda 	beq.w	15fe0 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   1622c:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   16230:	e6da      	b.n	15fe8 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16232:	4588      	cmp	r8, r1
   16234:	f47f af0f 	bne.w	16056 <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16238:	2301      	movs	r3, #1
   1623a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1623c:	4629      	mov	r1, r5
   1623e:	f7fd feb1 	bl	13fa4 <ll_rx_put>
				rx = conn->llcp_rx;
   16242:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   16246:	2d00      	cmp	r5, #0
   16248:	d063      	beq.n	16312 <event_phy_upd_ind_prep+0x362>
   1624a:	6828      	ldr	r0, [r5, #0]
   1624c:	2800      	cmp	r0, #0
   1624e:	d060      	beq.n	16312 <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   16250:	6842      	ldr	r2, [r0, #4]
   16252:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16256:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   16258:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1625a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1625c:	f7fd fea2 	bl	13fa4 <ll_rx_put>
}
   16260:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   16264:	f7fd bea8 	b.w	13fb8 <ll_rx_sched>
							 lll->latency +
   16268:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1626a:	1da9      	adds	r1, r5, #6
   1626c:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   1626e:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   16272:	f7fd fec5 	bl	14000 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   16276:	f8d8 3000 	ldr.w	r3, [r8]
   1627a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1627e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   16280:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   16284:	f7fd febc 	bl	14000 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   16288:	6803      	ldr	r3, [r0, #0]
   1628a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1628e:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16290:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16294:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   16298:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1629c:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   162a0:	095b      	lsrs	r3, r3, #5
   162a2:	e759      	b.n	16158 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   162a4:	2301      	movs	r3, #1
   162a6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   162a8:	4629      	mov	r1, r5
   162aa:	f7fd fe7b 	bl	13fa4 <ll_rx_put>
}
   162ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   162b2:	f7fd be81 	b.w	13fb8 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   162b6:	2900      	cmp	r1, #0
   162b8:	f47f af72 	bne.w	161a0 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   162bc:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   162be:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   162c2:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   162c6:	e773      	b.n	161b0 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   162c8:	f7fd fe9a 	bl	14000 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   162cc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   162ce:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   162d2:	231c      	movs	r3, #28
				upd->status = 0U;
   162d4:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   162d8:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   162dc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   162e0:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   162e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   162e8:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   162ec:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   162f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   162f4:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   162f8:	4641      	mov	r1, r8
   162fa:	f7fd fe53 	bl	13fa4 <ll_rx_put>
				ll_rx_sched();
   162fe:	f7fd fe5b 	bl	13fb8 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16302:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16306:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   1630a:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   1630e:	095b      	lsrs	r3, r3, #5
   16310:	e722      	b.n	16158 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   16312:	4a16      	ldr	r2, [pc, #88]	; (1636c <event_phy_upd_ind_prep+0x3bc>)
   16314:	4916      	ldr	r1, [pc, #88]	; (16370 <event_phy_upd_ind_prep+0x3c0>)
   16316:	4817      	ldr	r0, [pc, #92]	; (16374 <event_phy_upd_ind_prep+0x3c4>)
   16318:	f241 232c 	movw	r3, #4652	; 0x122c
   1631c:	f00e fdf3 	bl	24f06 <printk>
   16320:	4040      	eors	r0, r0
   16322:	f380 8811 	msr	BASEPRI, r0
   16326:	f04f 0003 	mov.w	r0, #3
   1632a:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1632c:	6828      	ldr	r0, [r5, #0]
   1632e:	e78f      	b.n	16250 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   16330:	681a      	ldr	r2, [r3, #0]
   16332:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16336:	2900      	cmp	r1, #0
   16338:	f47f af32 	bne.w	161a0 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   1633c:	681a      	ldr	r2, [r3, #0]
   1633e:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   16340:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   16342:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   16344:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   16348:	e732      	b.n	161b0 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1634a:	791a      	ldrb	r2, [r3, #4]
   1634c:	f002 0203 	and.w	r2, r2, #3
   16350:	2a03      	cmp	r2, #3
   16352:	d002      	beq.n	1635a <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16354:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   16358:	e722      	b.n	161a0 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   1635a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1635c:	2a03      	cmp	r2, #3
   1635e:	d0ed      	beq.n	1633c <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16360:	2a0a      	cmp	r2, #10
   16362:	d1f7      	bne.n	16354 <event_phy_upd_ind_prep+0x3a4>
   16364:	e7ea      	b.n	1633c <event_phy_upd_ind_prep+0x38c>
   16366:	bf00      	nop
   16368:	20002ae4 	.word	0x20002ae4
   1636c:	0002c6cc 	.word	0x0002c6cc
   16370:	0002c798 	.word	0x0002c798
   16374:	0002bfdc 	.word	0x0002bfdc

00016378 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   16378:	4801      	ldr	r0, [pc, #4]	; (16380 <ll_conn_acquire+0x8>)
   1637a:	f7f9 be77 	b.w	1006c <mem_acquire>
   1637e:	bf00      	nop
   16380:	20002a4c 	.word	0x20002a4c

00016384 <ll_conn_release>:
	mem_release(conn, &conn_free);
   16384:	4901      	ldr	r1, [pc, #4]	; (1638c <ll_conn_release+0x8>)
   16386:	f7f9 be87 	b.w	10098 <mem_release>
   1638a:	bf00      	nop
   1638c:	20002a4c 	.word	0x20002a4c

00016390 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   16390:	4902      	ldr	r1, [pc, #8]	; (1639c <ll_conn_handle_get+0xc>)
   16392:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   16396:	f7f9 be9b 	b.w	100d0 <mem_index_get>
   1639a:	bf00      	nop
   1639c:	20001a30 	.word	0x20001a30

000163a0 <ll_conn_get>:
{
   163a0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   163a6:	4801      	ldr	r0, [pc, #4]	; (163ac <ll_conn_get+0xc>)
   163a8:	f7f9 be8e 	b.w	100c8 <mem_get>
   163ac:	20001a30 	.word	0x20001a30

000163b0 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   163b0:	b958      	cbnz	r0, 163ca <ll_connected_get+0x1a>
{
   163b2:	b508      	push	{r3, lr}
   163b4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163b6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   163ba:	4805      	ldr	r0, [pc, #20]	; (163d0 <ll_connected_get+0x20>)
   163bc:	f7f9 fe84 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   163c0:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   163c2:	b903      	cbnz	r3, 163c6 <ll_connected_get+0x16>
}
   163c4:	bd08      	pop	{r3, pc}
		return NULL;
   163c6:	2000      	movs	r0, #0
}
   163c8:	bd08      	pop	{r3, pc}
		return NULL;
   163ca:	2000      	movs	r0, #0
}
   163cc:	4770      	bx	lr
   163ce:	bf00      	nop
   163d0:	20001a30 	.word	0x20001a30

000163d4 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   163d4:	4801      	ldr	r0, [pc, #4]	; (163dc <ll_tx_mem_acquire+0x8>)
   163d6:	f7f9 be49 	b.w	1006c <mem_acquire>
   163da:	bf00      	nop
   163dc:	20002a74 	.word	0x20002a74

000163e0 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   163e0:	4901      	ldr	r1, [pc, #4]	; (163e8 <ll_tx_mem_release+0x8>)
   163e2:	f7f9 be59 	b.w	10098 <mem_release>
   163e6:	bf00      	nop
   163e8:	20002a74 	.word	0x20002a74

000163ec <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   163ec:	2800      	cmp	r0, #0
   163ee:	d13f      	bne.n	16470 <ll_tx_mem_enqueue+0x84>
{
   163f0:	b570      	push	{r4, r5, r6, lr}
   163f2:	4602      	mov	r2, r0
   163f4:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   163f6:	4820      	ldr	r0, [pc, #128]	; (16478 <ll_tx_mem_enqueue+0x8c>)
   163f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   163fc:	f7f9 fe64 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   16400:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16402:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   16404:	bb72      	cbnz	r2, 16464 <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   16406:	4c1d      	ldr	r4, [pc, #116]	; (1647c <ll_tx_mem_enqueue+0x90>)
   16408:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   1640c:	7861      	ldrb	r1, [r4, #1]
   1640e:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   16410:	f10c 0301 	add.w	r3, ip, #1
   16414:	b2db      	uxtb	r3, r3
		last = 0U;
   16416:	4299      	cmp	r1, r3
   16418:	bf08      	it	eq
   1641a:	2300      	moveq	r3, #0
   1641c:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
   1641e:	4299      	cmp	r1, r3
   16420:	d023      	beq.n	1646a <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   16422:	fb1c fc00 	smulbb	ip, ip, r0
   16426:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
   16428:	f820 200c 	strh.w	r2, [r0, ip]
   1642c:	4484      	add	ip, r0
	lll_tx->node = tx;
   1642e:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   16432:	70e3      	strb	r3, [r4, #3]
   16434:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   16436:	b92b      	cbnz	r3, 16444 <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16438:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1643c:	2b00      	cmp	r3, #0
   1643e:	db0b      	blt.n	16458 <ll_tx_mem_enqueue+0x6c>
	return 0;
   16440:	2000      	movs	r0, #0
}
   16442:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   16444:	4b0e      	ldr	r3, [pc, #56]	; (16480 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   16446:	2101      	movs	r1, #1
   16448:	2003      	movs	r0, #3
		mfy.param = conn;
   1644a:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1644c:	f7f9 fee2 	bl	10214 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16450:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   16454:	2b00      	cmp	r3, #0
   16456:	daf3      	bge.n	16440 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
   16458:	4628      	mov	r0, r5
   1645a:	2100      	movs	r1, #0
   1645c:	f004 f92c 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   16460:	2000      	movs	r0, #0
}
   16462:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   16464:	f06f 0015 	mvn.w	r0, #21
}
   16468:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1646a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1646e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   16470:	f06f 0015 	mvn.w	r0, #21
}
   16474:	4770      	bx	lr
   16476:	bf00      	nop
   16478:	20001a30 	.word	0x20001a30
   1647c:	200005a4 	.word	0x200005a4
   16480:	200005d8 	.word	0x200005d8

00016484 <ll_conn_update>:
{
   16484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16488:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1648c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   16490:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   16494:	2800      	cmp	r0, #0
   16496:	d155      	bne.n	16544 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16498:	460c      	mov	r4, r1
   1649a:	4615      	mov	r5, r2
   1649c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   164a0:	4602      	mov	r2, r0
   164a2:	4841      	ldr	r0, [pc, #260]	; (165a8 <ll_conn_update+0x124>)
   164a4:	461e      	mov	r6, r3
   164a6:	f7f9 fe0f 	bl	100c8 <mem_get>
   164aa:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   164ac:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   164ae:	2800      	cmp	r0, #0
   164b0:	d148      	bne.n	16544 <ll_conn_update+0xc0>
	if (!cmd) {
   164b2:	bb3c      	cbnz	r4, 16504 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   164b4:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   164b8:	0699      	lsls	r1, r3, #26
   164ba:	d44a      	bmi.n	16552 <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   164bc:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   164c0:	07da      	lsls	r2, r3, #31
   164c2:	d442      	bmi.n	1654a <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   164c4:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   164c8:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   164cc:	4293      	cmp	r3, r2
   164ce:	d136      	bne.n	1653e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   164d0:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   164d4:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   164d8:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   164dc:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   164e0:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   164e2:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   164e6:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   164e8:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   164ec:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   164f0:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   164f4:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   164f8:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   164fc:	db4e      	blt.n	1659c <ll_conn_update+0x118>
	return 0;
   164fe:	2000      	movs	r0, #0
}
   16500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   16504:	3c01      	subs	r4, #1
		if (cmd) {
   16506:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1650a:	d0db      	beq.n	164c4 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1650c:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
   16510:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
   16514:	429a      	cmp	r2, r3
   16516:	d012      	beq.n	1653e <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   16518:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1651c:	f003 020f 	and.w	r2, r3, #15
   16520:	2a03      	cmp	r2, #3
   16522:	d10c      	bne.n	1653e <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   16524:	f004 040f 	and.w	r4, r4, #15
   16528:	f023 031f 	bic.w	r3, r3, #31
   1652c:	f044 0410 	orr.w	r4, r4, #16
   16530:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   16532:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   16536:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   1653a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1653e:	200c      	movs	r0, #12
}
   16540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16544:	2002      	movs	r0, #2
}
   16546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1654a:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1654e:	079b      	lsls	r3, r3, #30
   16550:	d4b8      	bmi.n	164c4 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   16552:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   16556:	2b00      	cmp	r3, #0
   16558:	db1e      	blt.n	16598 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1655a:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   1655e:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   16562:	4293      	cmp	r3, r2
   16564:	d1eb      	bne.n	1653e <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16566:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   1656a:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   1656e:	3301      	adds	r3, #1
   16570:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16574:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   16578:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1657a:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1657e:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   16580:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   16584:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   16588:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1658c:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   16590:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   16594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16598:	201a      	movs	r0, #26
   1659a:	e7d1      	b.n	16540 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   1659c:	4660      	mov	r0, ip
   1659e:	2100      	movs	r1, #0
   165a0:	f004 f88a 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   165a4:	2000      	movs	r0, #0
   165a6:	e7cb      	b.n	16540 <ll_conn_update+0xbc>
   165a8:	20001a30 	.word	0x20001a30

000165ac <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   165ac:	b9c8      	cbnz	r0, 165e2 <ll_chm_get+0x36>
{
   165ae:	b538      	push	{r3, r4, r5, lr}
   165b0:	4602      	mov	r2, r0
   165b2:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   165b4:	480c      	ldr	r0, [pc, #48]	; (165e8 <ll_chm_get+0x3c>)
   165b6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   165ba:	f7f9 fd85 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   165be:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   165c0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   165c2:	b965      	cbnz	r5, 165de <ll_chm_get+0x32>
		memcpy(chm, conn->lll.data_chan_map,
   165c4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		conn->chm_updated = 0U;
   165c8:	f883 51d8 	strb.w	r5, [r3, #472]	; 0x1d8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   165cc:	6811      	ldr	r1, [r2, #0]
   165ce:	6021      	str	r1, [r4, #0]
   165d0:	7911      	ldrb	r1, [r2, #4]
   165d2:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   165d4:	f893 01d8 	ldrb.w	r0, [r3, #472]	; 0x1d8
   165d8:	2800      	cmp	r0, #0
   165da:	d1f5      	bne.n	165c8 <ll_chm_get+0x1c>
}
   165dc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   165de:	2002      	movs	r0, #2
}
   165e0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   165e2:	2002      	movs	r0, #2
}
   165e4:	4770      	bx	lr
   165e6:	bf00      	nop
   165e8:	20001a30 	.word	0x20001a30

000165ec <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   165ec:	2800      	cmp	r0, #0
   165ee:	d13e      	bne.n	1666e <ll_terminate_ind_send+0x82>
{
   165f0:	b510      	push	{r4, lr}
   165f2:	4602      	mov	r2, r0
   165f4:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   165f6:	4821      	ldr	r0, [pc, #132]	; (1667c <ll_terminate_ind_send+0x90>)
   165f8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   165fc:	f7f9 fd64 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   16600:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   16602:	bb93      	cbnz	r3, 1666a <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   16604:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   16608:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   1660c:	429a      	cmp	r2, r3
   1660e:	d12a      	bne.n	16666 <ll_terminate_ind_send+0x7a>
	switch (reason) {
   16610:	2c29      	cmp	r4, #41	; 0x29
   16612:	d819      	bhi.n	16648 <ll_terminate_ind_send+0x5c>
   16614:	2c04      	cmp	r4, #4
   16616:	d919      	bls.n	1664c <ll_terminate_ind_send+0x60>
   16618:	1f62      	subs	r2, r4, #5
   1661a:	2a24      	cmp	r2, #36	; 0x24
   1661c:	d816      	bhi.n	1664c <ll_terminate_ind_send+0x60>
   1661e:	e8df f002 	tbb	[pc, r2]
   16622:	1517      	.short	0x1517
   16624:	15151515 	.word	0x15151515
   16628:	15151515 	.word	0x15151515
   1662c:	15151515 	.word	0x15151515
   16630:	15171717 	.word	0x15171717
   16634:	17151515 	.word	0x17151515
   16638:	15151515 	.word	0x15151515
   1663c:	15151515 	.word	0x15151515
   16640:	15151515 	.word	0x15151515
   16644:	1515      	.short	0x1515
   16646:	17          	.byte	0x17
   16647:	00          	.byte	0x00
   16648:	2c3b      	cmp	r4, #59	; 0x3b
   1664a:	d001      	beq.n	16650 <ll_terminate_ind_send+0x64>
   1664c:	2012      	movs	r0, #18
}
   1664e:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16650:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   16654:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   16658:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1665a:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1665c:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16660:	db07      	blt.n	16672 <ll_terminate_ind_send+0x86>
	return 0;
   16662:	2000      	movs	r0, #0
}
   16664:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16666:	200c      	movs	r0, #12
}
   16668:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1666a:	2002      	movs	r0, #2
}
   1666c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1666e:	2002      	movs	r0, #2
}
   16670:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   16672:	2100      	movs	r1, #0
   16674:	f004 f820 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   16678:	2000      	movs	r0, #0
}
   1667a:	bd10      	pop	{r4, pc}
   1667c:	20001a30 	.word	0x20001a30

00016680 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16680:	bb00      	cbnz	r0, 166c4 <ll_feature_req_send+0x44>
{
   16682:	b510      	push	{r4, lr}
   16684:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16686:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1668a:	480f      	ldr	r0, [pc, #60]	; (166c8 <ll_feature_req_send+0x48>)
   1668c:	f7f9 fd1c 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   16690:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   16692:	b984      	cbnz	r4, 166b6 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   16694:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   16698:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   1669c:	428a      	cmp	r2, r1
   1669e:	d108      	bne.n	166b2 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   166a0:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   166a4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   166a6:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   166a8:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   166ac:	db05      	blt.n	166ba <ll_feature_req_send+0x3a>
	return 0;
   166ae:	4620      	mov	r0, r4
}
   166b0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   166b2:	200c      	movs	r0, #12
}
   166b4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   166b6:	2002      	movs	r0, #2
}
   166b8:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   166ba:	4621      	mov	r1, r4
   166bc:	f003 fffc 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   166c0:	4620      	mov	r0, r4
}
   166c2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   166c4:	2002      	movs	r0, #2
}
   166c6:	4770      	bx	lr
   166c8:	20001a30 	.word	0x20001a30

000166cc <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   166cc:	bb00      	cbnz	r0, 16710 <ll_version_ind_send+0x44>
{
   166ce:	b510      	push	{r4, lr}
   166d0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   166d2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   166d6:	480f      	ldr	r0, [pc, #60]	; (16714 <ll_version_ind_send+0x48>)
   166d8:	f7f9 fcf6 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   166dc:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   166de:	b984      	cbnz	r4, 16702 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   166e0:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   166e4:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   166e8:	428a      	cmp	r2, r1
   166ea:	d108      	bne.n	166fe <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   166ec:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   166f0:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   166f2:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   166f4:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   166f8:	db05      	blt.n	16706 <ll_version_ind_send+0x3a>
	return 0;
   166fa:	4620      	mov	r0, r4
}
   166fc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   166fe:	200c      	movs	r0, #12
}
   16700:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16702:	2002      	movs	r0, #2
}
   16704:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   16706:	4621      	mov	r1, r4
   16708:	f003 ffd6 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   1670c:	4620      	mov	r0, r4
}
   1670e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16710:	2002      	movs	r0, #2
}
   16712:	4770      	bx	lr
   16714:	20001a30 	.word	0x20001a30

00016718 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16718:	2800      	cmp	r0, #0
   1671a:	d14c      	bne.n	167b6 <ll_length_req_send+0x9e>
{
   1671c:	b538      	push	{r3, r4, r5, lr}
   1671e:	460d      	mov	r5, r1
   16720:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16722:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16726:	4602      	mov	r2, r0
   16728:	4824      	ldr	r0, [pc, #144]	; (167bc <ll_length_req_send+0xa4>)
   1672a:	f7f9 fccd 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   1672e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   16730:	bbc3      	cbnz	r3, 167a4 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   16732:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   16736:	071a      	lsls	r2, r3, #28
   16738:	d432      	bmi.n	167a0 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   1673a:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   1673e:	07d1      	lsls	r1, r2, #31
   16740:	d503      	bpl.n	1674a <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   16742:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   16746:	0692      	lsls	r2, r2, #26
   16748:	d52a      	bpl.n	167a0 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1674a:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   1674e:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   16752:	428a      	cmp	r2, r1
   16754:	d011      	beq.n	1677a <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   16756:	f003 0307 	and.w	r3, r3, #7
   1675a:	2b03      	cmp	r3, #3
   1675c:	d004      	beq.n	16768 <ll_length_req_send+0x50>
   1675e:	3303      	adds	r3, #3
   16760:	f003 0307 	and.w	r3, r3, #7
   16764:	2b01      	cmp	r3, #1
   16766:	d824      	bhi.n	167b2 <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   16768:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   1676c:	bb0b      	cbnz	r3, 167b2 <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1676e:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   16772:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   16776:	4618      	mov	r0, r3
}
   16778:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1677a:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   1677e:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16782:	f36f 0302 	bfc	r3, #0, #3
   16786:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1678a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   1678e:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   16792:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16794:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   16796:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1679a:	db05      	blt.n	167a8 <ll_length_req_send+0x90>
	return 0;
   1679c:	2000      	movs	r0, #0
}
   1679e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   167a0:	201a      	movs	r0, #26
}
   167a2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   167a4:	2002      	movs	r0, #2
}
   167a6:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   167a8:	2100      	movs	r1, #0
   167aa:	f003 ff85 	bl	1a6b8 <ull_periph_latency_cancel>
	return 0;
   167ae:	2000      	movs	r0, #0
}
   167b0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   167b2:	200c      	movs	r0, #12
}
   167b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   167b6:	2002      	movs	r0, #2
}
   167b8:	4770      	bx	lr
   167ba:	bf00      	nop
   167bc:	20001a30 	.word	0x20001a30

000167c0 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   167c0:	4a03      	ldr	r2, [pc, #12]	; (167d0 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   167c2:	4b04      	ldr	r3, [pc, #16]	; (167d4 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   167c4:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   167c6:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   167c8:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   167ca:	800b      	strh	r3, [r1, #0]
}
   167cc:	4770      	bx	lr
   167ce:	bf00      	nop
   167d0:	20003404 	.word	0x20003404
   167d4:	20003406 	.word	0x20003406

000167d8 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   167d8:	4a02      	ldr	r2, [pc, #8]	; (167e4 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   167da:	4b03      	ldr	r3, [pc, #12]	; (167e8 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   167dc:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   167de:	8019      	strh	r1, [r3, #0]
}
   167e0:	2000      	movs	r0, #0
   167e2:	4770      	bx	lr
   167e4:	20003404 	.word	0x20003404
   167e8:	20003406 	.word	0x20003406

000167ec <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   167ec:	f04f 0c1b 	mov.w	ip, #27
   167f0:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   167f4:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   167f8:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   167fc:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   167fe:	8018      	strh	r0, [r3, #0]
}
   16800:	4770      	bx	lr
   16802:	bf00      	nop

00016804 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16804:	b9c0      	cbnz	r0, 16838 <ll_phy_get+0x34>
{
   16806:	b538      	push	{r3, r4, r5, lr}
   16808:	460d      	mov	r5, r1
   1680a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1680c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16810:	4602      	mov	r2, r0
   16812:	480a      	ldr	r0, [pc, #40]	; (1683c <ll_phy_get+0x38>)
   16814:	f7f9 fc58 	bl	100c8 <mem_get>
   16818:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1681a:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1681c:	b950      	cbnz	r0, 16834 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1681e:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   16822:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16826:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   16828:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   1682c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16830:	7023      	strb	r3, [r4, #0]
}
   16832:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16834:	2002      	movs	r0, #2
}
   16836:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16838:	2002      	movs	r0, #2
}
   1683a:	4770      	bx	lr
   1683c:	20001a30 	.word	0x20001a30

00016840 <ll_phy_default_set>:
	default_phy_tx = tx;
   16840:	4a02      	ldr	r2, [pc, #8]	; (1684c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   16842:	4b03      	ldr	r3, [pc, #12]	; (16850 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   16844:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   16846:	7019      	strb	r1, [r3, #0]
}
   16848:	2000      	movs	r0, #0
   1684a:	4770      	bx	lr
   1684c:	20003571 	.word	0x20003571
   16850:	20003570 	.word	0x20003570

00016854 <ll_phy_req_send>:
{
   16854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   16856:	2800      	cmp	r0, #0
   16858:	d143      	bne.n	168e2 <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1685a:	460c      	mov	r4, r1
   1685c:	4616      	mov	r6, r2
   1685e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16862:	4602      	mov	r2, r0
   16864:	4823      	ldr	r0, [pc, #140]	; (168f4 <ll_phy_req_send+0xa0>)
   16866:	461f      	mov	r7, r3
   16868:	f7f9 fc2e 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   1686c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1686e:	bbc3      	cbnz	r3, 168e2 <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   16870:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   16874:	f015 0508 	ands.w	r5, r5, #8
   16878:	d130      	bne.n	168dc <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   1687a:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   1687e:	07db      	lsls	r3, r3, #31
   16880:	d504      	bpl.n	1688c <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   16882:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   16886:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1688a:	d027      	beq.n	168dc <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1688c:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   16890:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   16894:	4299      	cmp	r1, r3
   16896:	d11e      	bne.n	168d6 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   16898:	f004 0407 	and.w	r4, r4, #7
   1689c:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   168a0:	00a4      	lsls	r4, r4, #2
   168a2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   168a6:	f007 0307 	and.w	r3, r7, #7
   168aa:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   168ae:	f006 0601 	and.w	r6, r6, #1
   168b2:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   168b6:	f022 0207 	bic.w	r2, r2, #7
   168ba:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   168be:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   168c0:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   168c4:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   168c8:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   168ca:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   168cc:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   168d0:	db0a      	blt.n	168e8 <ll_phy_req_send+0x94>
}
   168d2:	4628      	mov	r0, r5
   168d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   168d6:	250c      	movs	r5, #12
}
   168d8:	4628      	mov	r0, r5
   168da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   168dc:	251a      	movs	r5, #26
}
   168de:	4628      	mov	r0, r5
   168e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   168e2:	2502      	movs	r5, #2
}
   168e4:	4628      	mov	r0, r5
   168e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   168e8:	2100      	movs	r1, #0
   168ea:	f003 fee5 	bl	1a6b8 <ull_periph_latency_cancel>
}
   168ee:	4628      	mov	r0, r5
   168f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   168f2:	bf00      	nop
   168f4:	20001a30 	.word	0x20001a30

000168f8 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   168f8:	b9d8      	cbnz	r0, 16932 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   168fa:	4602      	mov	r2, r0
{
   168fc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   168fe:	480e      	ldr	r0, [pc, #56]	; (16938 <ll_apto_get+0x40>)
   16900:	460c      	mov	r4, r1
   16902:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16906:	f7f9 fbdf 	bl	100c8 <mem_get>
   1690a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1690c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1690e:	b970      	cbnz	r0, 1692e <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   16910:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   16914:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   16916:	fb02 f303 	mul.w	r3, r2, r3
   1691a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1691e:	4a07      	ldr	r2, [pc, #28]	; (1693c <ll_apto_get+0x44>)
   16920:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16924:	fba2 2303 	umull	r2, r3, r2, r3
   16928:	099b      	lsrs	r3, r3, #6
   1692a:	8023      	strh	r3, [r4, #0]
}
   1692c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1692e:	2002      	movs	r0, #2
}
   16930:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16932:	2002      	movs	r0, #2
}
   16934:	4770      	bx	lr
   16936:	bf00      	nop
   16938:	20001a30 	.word	0x20001a30
   1693c:	10624dd3 	.word	0x10624dd3

00016940 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16940:	b9e0      	cbnz	r0, 1697c <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16942:	4602      	mov	r2, r0
{
   16944:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16946:	480e      	ldr	r0, [pc, #56]	; (16980 <ll_apto_set+0x40>)
   16948:	460c      	mov	r4, r1
   1694a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1694e:	f7f9 fbbb 	bl	100c8 <mem_get>
   16952:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   16954:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   16956:	b978      	cbnz	r0, 16978 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   16958:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   1695c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   16960:	fb03 fc0c 	mul.w	ip, r3, ip
   16964:	f242 7310 	movw	r3, #10000	; 0x2710
   16968:	fb03 c304 	mla	r3, r3, r4, ip
   1696c:	3b01      	subs	r3, #1
   1696e:	fbb3 f3fc 	udiv	r3, r3, ip
   16972:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   16976:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   16978:	2002      	movs	r0, #2
}
   1697a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1697c:	2002      	movs	r0, #2
}
   1697e:	4770      	bx	lr
   16980:	20001a30 	.word	0x20001a30

00016984 <ull_conn_init>:
	err = init_reset();
   16984:	f7fe be7e 	b.w	15684 <init_reset>

00016988 <ull_conn_reset>:
{
   16988:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   1698a:	f004 f869 	bl	1aa60 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1698e:	2200      	movs	r2, #0
   16990:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16994:	4815      	ldr	r0, [pc, #84]	; (169ec <ull_conn_reset+0x64>)
   16996:	f7f9 fb97 	bl	100c8 <mem_get>
   1699a:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1699c:	f100 021c 	add.w	r2, r0, #28
   169a0:	4601      	mov	r1, r0
   169a2:	2005      	movs	r0, #5
   169a4:	f7fd fc14 	bl	141d0 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   169a8:	b108      	cbz	r0, 169ae <ull_conn_reset+0x26>
   169aa:	3078      	adds	r0, #120	; 0x78
   169ac:	d10f      	bne.n	169ce <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   169ae:	4810      	ldr	r0, [pc, #64]	; (169f0 <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   169b0:	4910      	ldr	r1, [pc, #64]	; (169f4 <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   169b2:	4a11      	ldr	r2, [pc, #68]	; (169f8 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   169b4:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   169b6:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   169ba:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   169bc:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   169be:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   169c2:	6763      	str	r3, [r4, #116]	; 0x74
}
   169c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   169c8:	6013      	str	r3, [r2, #0]
	err = init_reset();
   169ca:	f7fe be5b 	b.w	15684 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   169ce:	4a0b      	ldr	r2, [pc, #44]	; (169fc <ull_conn_reset+0x74>)
   169d0:	490b      	ldr	r1, [pc, #44]	; (16a00 <ull_conn_reset+0x78>)
   169d2:	480c      	ldr	r0, [pc, #48]	; (16a04 <ull_conn_reset+0x7c>)
   169d4:	f640 03e3 	movw	r3, #2275	; 0x8e3
   169d8:	f00e fa95 	bl	24f06 <printk>
   169dc:	4040      	eors	r0, r0
   169de:	f380 8811 	msr	BASEPRI, r0
   169e2:	f04f 0003 	mov.w	r0, #3
   169e6:	df02      	svc	2
   169e8:	e7e1      	b.n	169ae <ull_conn_reset+0x26>
   169ea:	bf00      	nop
   169ec:	20001a30 	.word	0x20001a30
   169f0:	200005a4 	.word	0x200005a4
   169f4:	20000560 	.word	0x20000560
   169f8:	20002a50 	.word	0x20002a50
   169fc:	0002c6cc 	.word	0x0002c6cc
   16a00:	0002c6a0 	.word	0x0002c6a0
   16a04:	0002bfdc 	.word	0x0002bfdc

00016a08 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   16a08:	4b01      	ldr	r3, [pc, #4]	; (16a10 <ull_conn_default_tx_octets_get+0x8>)
}
   16a0a:	8818      	ldrh	r0, [r3, #0]
   16a0c:	4770      	bx	lr
   16a0e:	bf00      	nop
   16a10:	20003404 	.word	0x20003404

00016a14 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   16a14:	4b01      	ldr	r3, [pc, #4]	; (16a1c <ull_conn_default_tx_time_get+0x8>)
}
   16a16:	8818      	ldrh	r0, [r3, #0]
   16a18:	4770      	bx	lr
   16a1a:	bf00      	nop
   16a1c:	20003406 	.word	0x20003406

00016a20 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   16a20:	4b01      	ldr	r3, [pc, #4]	; (16a28 <ull_conn_default_phy_tx_get+0x8>)
}
   16a22:	7818      	ldrb	r0, [r3, #0]
   16a24:	4770      	bx	lr
   16a26:	bf00      	nop
   16a28:	20003571 	.word	0x20003571

00016a2c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   16a2c:	4b01      	ldr	r3, [pc, #4]	; (16a34 <ull_conn_default_phy_rx_get+0x8>)
}
   16a2e:	7818      	ldrb	r0, [r3, #0]
   16a30:	4770      	bx	lr
   16a32:	bf00      	nop
   16a34:	20003570 	.word	0x20003570

00016a38 <ull_conn_setup>:
{
   16a38:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   16a3a:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   16a3c:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   16a3e:	681d      	ldr	r5, [r3, #0]
   16a40:	782b      	ldrb	r3, [r5, #0]
{
   16a42:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   16a44:	b193      	cbz	r3, 16a6c <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   16a46:	696b      	ldr	r3, [r5, #20]
   16a48:	b163      	cbz	r3, 16a64 <ull_conn_setup+0x2c>
   16a4a:	4a0b      	ldr	r2, [pc, #44]	; (16a78 <ull_conn_setup+0x40>)
   16a4c:	490b      	ldr	r1, [pc, #44]	; (16a7c <ull_conn_setup+0x44>)
   16a4e:	480c      	ldr	r0, [pc, #48]	; (16a80 <ull_conn_setup+0x48>)
   16a50:	f240 33ed 	movw	r3, #1005	; 0x3ed
   16a54:	f00e fa57 	bl	24f06 <printk>
   16a58:	4040      	eors	r0, r0
   16a5a:	f380 8811 	msr	BASEPRI, r0
   16a5e:	f04f 0003 	mov.w	r0, #3
   16a62:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   16a64:	4b07      	ldr	r3, [pc, #28]	; (16a84 <ull_conn_setup+0x4c>)
   16a66:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   16a6a:	bd38      	pop	{r3, r4, r5, pc}
   16a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   16a70:	4608      	mov	r0, r1
   16a72:	f7ff b801 	b.w	15a78 <conn_setup_adv_scan_disabled_cb>
   16a76:	bf00      	nop
   16a78:	0002c6cc 	.word	0x0002c6cc
   16a7c:	0002c590 	.word	0x0002c590
   16a80:	0002bfdc 	.word	0x0002bfdc
   16a84:	00015a79 	.word	0x00015a79

00016a88 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   16a88:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   16a8a:	88da      	ldrh	r2, [r3, #6]
   16a8c:	2a00      	cmp	r2, #0
   16a8e:	f040 80ce 	bne.w	16c2e <ull_conn_rx+0x1a6>
{
   16a92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a96:	460e      	mov	r6, r1
   16a98:	b085      	sub	sp, #20
   16a9a:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16a9c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   16aa0:	48a9      	ldr	r0, [pc, #676]	; (16d48 <ull_conn_rx+0x2c0>)
   16aa2:	f7f9 fb11 	bl	100c8 <mem_get>
   16aa6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   16aa8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   16aaa:	2800      	cmp	r0, #0
   16aac:	f040 80b8 	bne.w	16c20 <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
   16ab0:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16ab2:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   16ab6:	7f2a      	ldrb	r2, [r5, #28]
   16ab8:	f002 0203 	and.w	r2, r2, #3
   16abc:	2a03      	cmp	r2, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16abe:	f00c 0101 	and.w	r1, ip, #1
	switch (pdu_rx->ll_id) {
   16ac2:	d129      	bne.n	16b18 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
   16ac4:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   16ac8:	f105 021c 	add.w	r2, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16acc:	b3c9      	cbz	r1, 16b42 <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   16ace:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16ad2:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   16ad4:	f00c 0104 	and.w	r1, ip, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   16ad8:	f2c0 80ad 	blt.w	16c36 <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
   16adc:	2900      	cmp	r1, #0
   16ade:	f040 80fb 	bne.w	16cd8 <ull_conn_rx+0x250>
		((!conn->llcp_enc.refresh &&
   16ae2:	f1b8 0f02 	cmp.w	r8, #2
   16ae6:	f000 8122 	beq.w	16d2e <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16aea:	f1b8 0f05 	cmp.w	r8, #5
   16aee:	f000 8563 	beq.w	175b8 <ull_conn_rx+0xb30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16af2:	f1b8 0f06 	cmp.w	r8, #6
   16af6:	f000 83d1 	beq.w	1729c <ull_conn_rx+0x814>
   16afa:	f1b8 0f0d 	cmp.w	r8, #13
   16afe:	f000 844e 	beq.w	1739e <ull_conn_rx+0x916>
   16b02:	f1b8 0f11 	cmp.w	r8, #17
   16b06:	f000 848e 	beq.w	17426 <ull_conn_rx+0x99e>
		conn->llcp_terminate.reason_final =
   16b0a:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b0c:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   16b0e:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   16b12:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b14:	712b      	strb	r3, [r5, #4]
		return 0;
   16b16:	e007      	b.n	16b28 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   16b18:	b94a      	cbnz	r2, 16b2e <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   16b1a:	b111      	cbz	r1, 16b22 <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
   16b1c:	233d      	movs	r3, #61	; 0x3d
   16b1e:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b22:	2301      	movs	r3, #1
   16b24:	712b      	strb	r3, [r5, #4]
	return 0;
   16b26:	2000      	movs	r0, #0
}
   16b28:	b005      	add	sp, #20
   16b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16b2e:	2900      	cmp	r1, #0
   16b30:	d0f9      	beq.n	16b26 <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   16b32:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b34:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   16b36:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16b3a:	712a      	strb	r2, [r5, #4]
}
   16b3c:	b005      	add	sp, #20
   16b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   16b42:	f1b8 0f19 	cmp.w	r8, #25
   16b46:	d81f      	bhi.n	16b88 <ull_conn_rx+0x100>
   16b48:	e8df f018 	tbh	[pc, r8, lsl #1]
   16b4c:	01450178 	.word	0x01450178
   16b50:	001a00f1 	.word	0x001a00f1
   16b54:	0531052a 	.word	0x0531052a
   16b58:	02a303a8 	.word	0x02a303a8
   16b5c:	04ec029e 	.word	0x04ec029e
   16b60:	055004a2 	.word	0x055004a2
   16b64:	042903d4 	.word	0x042903d4
   16b68:	0279028e 	.word	0x0279028e
   16b6c:	046d01e7 	.word	0x046d01e7
   16b70:	013b0404 	.word	0x013b0404
   16b74:	01020102 	.word	0x01020102
   16b78:	0340037d 	.word	0x0340037d
   16b7c:	02ce0304 	.word	0x02ce0304
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   16b80:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16b84:	2b00      	cmp	r3, #0
   16b86:	db63      	blt.n	16c50 <ull_conn_rx+0x1c8>
	if (conn->common.txn_lock) {
   16b88:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   16b8c:	0798      	lsls	r0, r3, #30
   16b8e:	d4c8      	bmi.n	16b22 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16b90:	486e      	ldr	r0, [pc, #440]	; (16d4c <ull_conn_rx+0x2c4>)
   16b92:	f7f9 fa6b 	bl	1006c <mem_acquire>
	if (!tx) {
   16b96:	2800      	cmp	r0, #0
   16b98:	f000 85d1 	beq.w	1773e <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   16b9c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   16ba0:	f043 0302 	orr.w	r3, r3, #2
   16ba4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16ba8:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   16baa:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16bae:	f043 0303 	orr.w	r3, r3, #3
   16bb2:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   16bb4:	2302      	movs	r3, #2
   16bb6:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   16bb8:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16bbc:	2307      	movs	r3, #7
   16bbe:	71c3      	strb	r3, [r0, #7]
	if (
   16bc0:	b1f2      	cbz	r2, 16c00 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   16bc2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   16bc6:	0799      	lsls	r1, r3, #30
   16bc8:	d41a      	bmi.n	16c00 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   16bca:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   16bce:	07db      	lsls	r3, r3, #31
   16bd0:	d416      	bmi.n	16c00 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   16bd2:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   16bd6:	429a      	cmp	r2, r3
   16bd8:	f000 85ce 	beq.w	17778 <ull_conn_rx+0xcf0>
		} else if (!conn->tx_ctrl) {
   16bdc:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   16be0:	2b00      	cmp	r3, #0
   16be2:	f000 8615 	beq.w	17810 <ull_conn_rx+0xd88>
	tx->next = conn->tx_ctrl_last->next;
   16be6:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   16bea:	6813      	ldr	r3, [r2, #0]
   16bec:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16bee:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   16bf0:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   16bf2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16bf6:	2a00      	cmp	r2, #0
   16bf8:	d193      	bne.n	16b22 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   16bfa:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16bfe:	e790      	b.n	16b22 <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   16c00:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   16c04:	2b00      	cmp	r3, #0
   16c06:	f000 8590 	beq.w	1772a <ull_conn_rx+0xca2>
	tx->next = conn->tx_ctrl_last->next;
   16c0a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16c0e:	681a      	ldr	r2, [r3, #0]
   16c10:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16c12:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16c14:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   16c16:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16c1a:	2a00      	cmp	r2, #0
   16c1c:	d181      	bne.n	16b22 <ull_conn_rx+0x9a>
   16c1e:	e7ec      	b.n	16bfa <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c20:	6833      	ldr	r3, [r6, #0]
   16c22:	2201      	movs	r2, #1
		return 0;
   16c24:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c26:	711a      	strb	r2, [r3, #4]
}
   16c28:	b005      	add	sp, #20
   16c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c2e:	2201      	movs	r2, #1
   16c30:	711a      	strb	r2, [r3, #4]
		return 0;
   16c32:	2000      	movs	r0, #0
}
   16c34:	4770      	bx	lr
	       (conn->lll.role &&
   16c36:	2900      	cmp	r1, #0
   16c38:	d071      	beq.n	16d1e <ull_conn_rx+0x296>
		 (conn->llcp_enc.refresh &&
   16c3a:	f1b8 0f02 	cmp.w	r8, #2
   16c3e:	d076      	beq.n	16d2e <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16c40:	f1b8 0f0b 	cmp.w	r8, #11
   16c44:	f000 85df 	beq.w	17806 <ull_conn_rx+0xd7e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16c48:	f1b8 0f03 	cmp.w	r8, #3
   16c4c:	f47f af51 	bne.w	16af2 <ull_conn_rx+0x6a>
		if (!conn->lll.role ||
   16c50:	7f6b      	ldrb	r3, [r5, #29]
   16c52:	2b17      	cmp	r3, #23
   16c54:	d198      	bne.n	16b88 <ull_conn_rx+0x100>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   16c56:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   16c5a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16c5e:	1a9b      	subs	r3, r3, r2
   16c60:	f003 0303 	and.w	r3, r3, #3
   16c64:	2b02      	cmp	r3, #2
   16c66:	f001 8189 	beq.w	17f7c <ull_conn_rx+0x14f4>
   16c6a:	6a2b      	ldr	r3, [r5, #32]
   16c6c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   16c6e:	f8c4 216d 	str.w	r2, [r4, #365]	; 0x16d
   16c72:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   16c76:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   16c7a:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   16c7e:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   16c82:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16c86:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c8a:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16c8c:	2301      	movs	r3, #1
   16c8e:	f363 0201 	bfi	r2, r3, #0, #2
   16c92:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16c96:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   16c98:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   16c9c:	2203      	movs	r2, #3
		conn->llcp_ack -= 2U;
   16c9e:	3b02      	subs	r3, #2
   16ca0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   16ca4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
   16ca8:	f8d5 102a 	ldr.w	r1, [r5, #42]	; 0x2a
   16cac:	f8d5 202e 	ldr.w	r2, [r5, #46]	; 0x2e
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   16cb0:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   16cb4:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
   16cb8:	f8c4 10f6 	str.w	r1, [r4, #246]	; 0xf6
   16cbc:	f8d5 1032 	ldr.w	r1, [r5, #50]	; 0x32

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   16cc0:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   16cc4:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
		conn->llcp_enc.pause_rx = 1U;
   16cc8:	f043 0301 	orr.w	r3, r3, #1
   16ccc:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   16cd0:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	int nack = 0;
   16cd4:	2000      	movs	r0, #0

		break;
   16cd6:	e727      	b.n	16b28 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   16cd8:	f1b8 0f02 	cmp.w	r8, #2
   16cdc:	d027      	beq.n	16d2e <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16cde:	f1b8 0f0b 	cmp.w	r8, #11
   16ce2:	f000 8530 	beq.w	17746 <ull_conn_rx+0xcbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16ce6:	f1b8 0f04 	cmp.w	r8, #4
   16cea:	f47f aefe 	bne.w	16aea <ull_conn_rx+0x62>
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		if (conn->lll.role ||
   16cee:	7f6b      	ldrb	r3, [r5, #29]
   16cf0:	2b0d      	cmp	r3, #13
   16cf2:	f47f af49 	bne.w	16b88 <ull_conn_rx+0x100>
   16cf6:	6a2b      	ldr	r3, [r5, #32]
   16cf8:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   16cfa:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   16cfe:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
   16d02:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		       &pdu_rx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
		       &pdu_rx->llctrl.enc_rsp.ivs[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   16d04:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   16d08:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16d0c:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   16d0e:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16d12:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   16d14:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   16d18:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16d1a:	7111      	strb	r1, [r2, #4]

		break;
   16d1c:	e704      	b.n	16b28 <ull_conn_rx+0xa0>
		((!conn->llcp_enc.refresh &&
   16d1e:	f1b8 0f07 	cmp.w	r8, #7
   16d22:	f000 81b6 	beq.w	17092 <ull_conn_rx+0x60a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16d26:	f1b8 0f02 	cmp.w	r8, #2
   16d2a:	f47f aee2 	bne.w	16af2 <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   16d2e:	7f6b      	ldrb	r3, [r5, #29]
   16d30:	2b02      	cmp	r3, #2
   16d32:	f47f af29 	bne.w	16b88 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
   16d36:	f895 2020 	ldrb.w	r2, [r5, #32]
   16d3a:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16d3e:	2301      	movs	r3, #1
	int nack = 0;
   16d40:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16d42:	712b      	strb	r3, [r5, #4]
}
   16d44:	e6f0      	b.n	16b28 <ull_conn_rx+0xa0>
   16d46:	bf00      	nop
   16d48:	20001a30 	.word	0x20001a30
   16d4c:	20002ae4 	.word	0x20002ae4
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   16d50:	7f6b      	ldrb	r3, [r5, #29]
   16d52:	2b09      	cmp	r3, #9
   16d54:	f47f af18 	bne.w	16b88 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   16d58:	f1b8 0f14 	cmp.w	r8, #20
   16d5c:	f000 8562 	beq.w	17824 <ull_conn_rx+0xd9c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16d60:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   16d64:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   16d68:	4293      	cmp	r3, r2
   16d6a:	f001 812b 	beq.w	17fc4 <ull_conn_rx+0x153c>
	eff_rx_octets = conn->lll.max_rx_octets;
   16d6e:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   16d72:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   16d76:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   16d7a:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   16d7e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   16d82:	2300      	movs	r3, #0
	       tx) ||
   16d84:	f001 0107 	and.w	r1, r1, #7
   16d88:	2902      	cmp	r1, #2
   16d8a:	f000 856b 	beq.w	17864 <ull_conn_rx+0xddc>
   16d8e:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   16d92:	f1b8 0f15 	cmp.w	r8, #21
   16d96:	f43f aec6 	beq.w	16b26 <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   16d9a:	4618      	mov	r0, r3
   16d9c:	49d0      	ldr	r1, [pc, #832]	; (170e0 <ull_conn_rx+0x658>)
   16d9e:	f7f9 f97b 	bl	10098 <mem_release>
			if (conn->llcp_length.state ==
   16da2:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   16da6:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   16daa:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   16dae:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   16db2:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   16db4:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   16db8:	f47f aeb5 	bne.w	16b26 <ull_conn_rx+0x9e>
				return -EBUSY;
   16dbc:	f06f 000f 	mvn.w	r0, #15
   16dc0:	e6b2      	b.n	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   16dc2:	7f6a      	ldrb	r2, [r5, #29]
   16dc4:	2a01      	cmp	r2, #1
   16dc6:	f47f aedf 	bne.w	16b88 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   16dca:	2300      	movs	r3, #0
   16dcc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   16dd0:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16dd2:	712a      	strb	r2, [r5, #4]
		break;
   16dd4:	e6a8      	b.n	16b28 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   16dd6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16dda:	2b00      	cmp	r3, #0
   16ddc:	f6bf aed4 	bge.w	16b88 <ull_conn_rx+0x100>
   16de0:	7f6b      	ldrb	r3, [r5, #29]
   16de2:	2b08      	cmp	r3, #8
   16de4:	f47f aed0 	bne.w	16b88 <ull_conn_rx+0x100>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   16de8:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16dec:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16dee:	1acb      	subs	r3, r1, r3
   16df0:	041f      	lsls	r7, r3, #16
   16df2:	f101 8091 	bmi.w	17f18 <ull_conn_rx+0x1490>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16df6:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   16dfa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16dfe:	1a9b      	subs	r3, r3, r2
   16e00:	f003 0303 	and.w	r3, r3, #3
   16e04:	2b02      	cmp	r3, #2
   16e06:	f001 80a1 	beq.w	17f4c <ull_conn_rx+0x14c4>
   16e0a:	6a2b      	ldr	r3, [r5, #32]
   16e0c:	f8c4 30e9 	str.w	r3, [r4, #233]	; 0xe9
   16e10:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   16e14:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn->llcp.chan_map.initiate = 0U;
   16e18:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp.chan_map.instant = instant;
   16e1c:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   16e20:	f36f 0300 	bfc	r3, #0, #1
   16e24:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   16e28:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_CHAN_MAP;
   16e2a:	2102      	movs	r1, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16e2c:	2301      	movs	r3, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   16e2e:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   16e32:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	int nack = 0;
   16e36:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16e38:	712b      	strb	r3, [r5, #4]
		if (err) {
   16e3a:	e675      	b.n	16b28 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   16e3c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16e40:	2b00      	cmp	r3, #0
   16e42:	f6bf aea1 	bge.w	16b88 <ull_conn_rx+0x100>
   16e46:	7f6b      	ldrb	r3, [r5, #29]
   16e48:	2b0c      	cmp	r3, #12
   16e4a:	f47f ae9d 	bne.w	16b88 <ull_conn_rx+0x100>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   16e4e:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   16e52:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   16e54:	1acb      	subs	r3, r1, r3
   16e56:	041b      	lsls	r3, r3, #16
   16e58:	f101 805e 	bmi.w	17f18 <ull_conn_rx+0x1490>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16e5c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   16e60:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   16e64:	1a9b      	subs	r3, r3, r2
   16e66:	f003 0303 	and.w	r3, r3, #3
   16e6a:	2b02      	cmp	r3, #2
   16e6c:	f001 806e 	beq.w	17f4c <ull_conn_rx+0x14c4>
	if (!conn_upd_curr) {
   16e70:	4b9c      	ldr	r3, [pc, #624]	; (170e4 <ull_conn_rx+0x65c>)
   16e72:	681a      	ldr	r2, [r3, #0]
   16e74:	2a00      	cmp	r2, #0
   16e76:	f001 8066 	beq.w	17f46 <ull_conn_rx+0x14be>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   16e7a:	f895 3020 	ldrb.w	r3, [r5, #32]
   16e7e:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   16e82:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   16e86:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16e8a:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   16e8e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   16e92:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   16e96:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   16e9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   16e9e:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   16ea2:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   16ea6:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   16eaa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   16eae:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16eb2:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   16eb6:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   16eba:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   16ebe:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16ec2:	f023 030f 	bic.w	r3, r3, #15
   16ec6:	f043 0308 	orr.w	r3, r3, #8
   16eca:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   16ece:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   16ed2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   16ed6:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   16eda:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   16edc:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   16ee0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   16ee4:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   16ee6:	6832      	ldr	r2, [r6, #0]
   16ee8:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   16eea:	6832      	ldr	r2, [r6, #0]
   16eec:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   16ef0:	2300      	movs	r3, #0
   16ef2:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16ef4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   16ef8:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   16efc:	4293      	cmp	r3, r2
   16efe:	d007      	beq.n	16f10 <ull_conn_rx+0x488>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   16f00:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   16f04:	f003 030e 	and.w	r3, r3, #14
   16f08:	2b04      	cmp	r3, #4
   16f0a:	d101      	bne.n	16f10 <ull_conn_rx+0x488>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16f0c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   16f10:	2300      	movs	r3, #0
   16f12:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   16f16:	4618      	mov	r0, r3
		break;
   16f18:	e606      	b.n	16b28 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   16f1a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   16f1e:	2b00      	cmp	r3, #0
   16f20:	f6ff ae32 	blt.w	16b88 <ull_conn_rx+0x100>
   16f24:	7f6b      	ldrb	r3, [r5, #29]
   16f26:	2b18      	cmp	r3, #24
   16f28:	f47f ae2e 	bne.w	16b88 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   16f2c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   16f30:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   16f34:	429a      	cmp	r2, r3
   16f36:	f43f adf4 	beq.w	16b22 <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   16f3a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		     conn->llcp_conn_param.ack) &&
   16f3e:	f003 030f 	and.w	r3, r3, #15
   16f42:	2b04      	cmp	r3, #4
   16f44:	f47f aded 	bne.w	16b22 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16f48:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   16f4c:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16f50:	2b05      	cmp	r3, #5
   16f52:	f240 86b1 	bls.w	17cb8 <ull_conn_rx+0x1230>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16f56:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   16f58:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16f5a:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16f5e:	f200 86ab 	bhi.w	17cb8 <ull_conn_rx+0x1230>
			    (interval_max > 3200) ||
   16f62:	428b      	cmp	r3, r1
   16f64:	f200 86a8 	bhi.w	17cb8 <ull_conn_rx+0x1230>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16f68:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   16f6a:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   16f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   16f70:	f080 86a2 	bcs.w	17cb8 <ull_conn_rx+0x1230>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16f74:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   16f76:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   16f7a:	f1ae 020a 	sub.w	r2, lr, #10
   16f7e:	f640 4876 	movw	r8, #3190	; 0xc76
   16f82:	b292      	uxth	r2, r2
   16f84:	4542      	cmp	r2, r8
   16f86:	f200 8697 	bhi.w	17cb8 <ull_conn_rx+0x1230>
			     ((latency + 1) * interval_max)) ||
   16f8a:	3301      	adds	r3, #1
   16f8c:	b29b      	uxth	r3, r3
   16f8e:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   16f92:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   16f96:	f080 868f 	bcs.w	17cb8 <ull_conn_rx+0x1230>
			     ((latency + 1) * interval_max)) ||
   16f9a:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   16f9e:	4291      	cmp	r1, r2
   16fa0:	f0c0 868a 	bcc.w	17cb8 <ull_conn_rx+0x1230>
			conn->llcp_conn_param.preferred_periodicity =
   16fa4:	f884 2190 	strb.w	r2, [r4, #400]	; 0x190
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16fa8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   16fac:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   16fb0:	2301      	movs	r3, #1
   16fb2:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   16fb6:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   16fb8:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   16fbc:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   16fc0:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->procedure_expire = 0U;
   16fc4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16fc8:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   16fcc:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   16fd0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16fd4:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   16fd8:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   16fdc:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   16fe0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   16fe4:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   16fe8:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   16fec:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   16ff0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   16ff4:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   16ff8:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   16ffc:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   17000:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   17004:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   17008:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   1700c:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   17010:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   17014:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   17018:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   1701c:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   17020:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   17024:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   17028:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1702c:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17030:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset5);
   17034:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   17038:	f8a4 319e 	strh.w	r3, [r4, #414]	; 0x19e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1703c:	e571      	b.n	16b22 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1703e:	7f6b      	ldrb	r3, [r5, #29]
   17040:	2b18      	cmp	r3, #24
   17042:	f47f ada1 	bne.w	16b88 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   17046:	4827      	ldr	r0, [pc, #156]	; (170e4 <ull_conn_rx+0x65c>)
   17048:	6803      	ldr	r3, [r0, #0]
   1704a:	2b00      	cmp	r3, #0
   1704c:	f000 83a7 	beq.w	1779e <ull_conn_rx+0xd16>
   17050:	429c      	cmp	r4, r3
   17052:	f000 83a4 	beq.w	1779e <ull_conn_rx+0xd16>
			nack = reject_ext_ind_send(conn, *rx,
   17056:	2320      	movs	r3, #32
   17058:	220f      	movs	r2, #15
   1705a:	4629      	mov	r1, r5
   1705c:	4620      	mov	r0, r4
}
   1705e:	b005      	add	sp, #20
   17060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   17064:	f7fe be48 	b.w	15cf8 <reject_ext_ind_send>
		if (conn->lll.role ||
   17068:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1706c:	2b00      	cmp	r3, #0
   1706e:	f6ff ad8b 	blt.w	16b88 <ull_conn_rx+0x100>
   17072:	7f6b      	ldrb	r3, [r5, #29]
   17074:	2b09      	cmp	r3, #9
   17076:	f47f ad87 	bne.w	16b88 <ull_conn_rx+0x100>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   1707a:	4629      	mov	r1, r5
   1707c:	4620      	mov	r0, r4
}
   1707e:	b005      	add	sp, #20
   17080:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   17084:	f7fe bdb8 	b.w	15bf8 <feature_rsp_send>
		if (!conn->lll.role ||
   17088:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1708c:	2b00      	cmp	r3, #0
   1708e:	dbf0      	blt.n	17072 <ull_conn_rx+0x5ea>
   17090:	e57a      	b.n	16b88 <ull_conn_rx+0x100>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   17092:	7f6b      	ldrb	r3, [r5, #29]
   17094:	2b02      	cmp	r3, #2
   17096:	f47f ad77 	bne.w	16b88 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   1709a:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   1709e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   170a2:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   170a6:	4288      	cmp	r0, r1
   170a8:	d002      	beq.n	170b0 <ull_conn_rx+0x628>
			    conn->llcp_conn_param.req) &&
   170aa:	2b0f      	cmp	r3, #15
   170ac:	f000 856b 	beq.w	17b86 <ull_conn_rx+0x10fe>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   170b0:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   170b4:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   170b8:	4291      	cmp	r1, r2
   170ba:	d002      	beq.n	170c2 <ull_conn_rx+0x63a>
   170bc:	2b14      	cmp	r3, #20
   170be:	f000 85e6 	beq.w	17c8e <ull_conn_rx+0x1206>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   170c2:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   170c6:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   170ca:	428a      	cmp	r2, r1
   170cc:	d002      	beq.n	170d4 <ull_conn_rx+0x64c>
   170ce:	2b16      	cmp	r3, #22
   170d0:	f000 8647 	beq.w	17d62 <ull_conn_rx+0x12da>
			switch (llctrl->unknown_rsp.type) {
   170d4:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   170d6:	bf04      	itt	eq
   170d8:	2301      	moveq	r3, #1
   170da:	712b      	strbeq	r3, [r5, #4]
				break;
   170dc:	e718      	b.n	16f10 <ull_conn_rx+0x488>
   170de:	bf00      	nop
   170e0:	20002ae4 	.word	0x20002ae4
   170e4:	20002a50 	.word	0x20002a50
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   170e8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   170ec:	2b00      	cmp	r3, #0
   170ee:	f6ff ad4b 	blt.w	16b88 <ull_conn_rx+0x100>
   170f2:	7f6b      	ldrb	r3, [r5, #29]
   170f4:	2b03      	cmp	r3, #3
   170f6:	f47f ad47 	bne.w	16b88 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   170fa:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   170fe:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   17102:	f895 2020 	ldrb.w	r2, [r5, #32]
   17106:	430b      	orrs	r3, r1
   17108:	f003 0307 	and.w	r3, r3, #7
   1710c:	4213      	tst	r3, r2
   1710e:	f43f ad0a 	beq.w	16b26 <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   17112:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17116:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1711a:	1a9b      	subs	r3, r3, r2
   1711c:	f003 0303 	and.w	r3, r3, #3
   17120:	2b02      	cmp	r3, #2
   17122:	f43f ad00 	beq.w	16b26 <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   17126:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1712a:	f003 fefb 	bl	1af24 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   1712e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.chan_map.initiate = 1U;
   17132:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->llcp_type = LLCP_CHAN_MAP;
   17136:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   17138:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   1713a:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1713e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17142:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   17144:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17148:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   1714a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	int nack = 0;
   1714e:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17150:	7111      	strb	r1, [r2, #4]

		break;
   17152:	e4e9      	b.n	16b28 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   17154:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17158:	2b00      	cmp	r3, #0
   1715a:	f6bf ad15 	bge.w	16b88 <ull_conn_rx+0x100>
   1715e:	7f6b      	ldrb	r3, [r5, #29]
   17160:	2b05      	cmp	r3, #5
   17162:	f47f ad11 	bne.w	16b88 <ull_conn_rx+0x100>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   17166:	f895 2020 	ldrb.w	r2, [r5, #32]
   1716a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1716e:	4313      	orrs	r3, r2
   17170:	f013 0307 	ands.w	r3, r3, #7
   17174:	f040 8632 	bne.w	17ddc <ull_conn_rx+0x1354>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17178:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1717c:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   17180:	428a      	cmp	r2, r1
   17182:	f43f acce 	beq.w	16b22 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   17186:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1718a:	f002 0203 	and.w	r2, r2, #3
   1718e:	2a02      	cmp	r2, #2
   17190:	f47f acc7 	bne.w	16b22 <ull_conn_rx+0x9a>
		conn->llcp_phy.pause_tx = 0U;
   17194:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17198:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1719c:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   171a0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   171a4:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   171a8:	4608      	mov	r0, r1
   171aa:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   171ae:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   171b2:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   171b6:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   171ba:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   171be:	f040 871d 	bne.w	17ffc <ull_conn_rx+0x1574>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   171c2:	6833      	ldr	r3, [r6, #0]
   171c4:	2101      	movs	r1, #1
   171c6:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   171c8:	4610      	mov	r0, r2
   171ca:	e4ad      	b.n	16b28 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   171cc:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   171d0:	2b00      	cmp	r3, #0
   171d2:	f6ff acd9 	blt.w	16b88 <ull_conn_rx+0x100>
   171d6:	7f6b      	ldrb	r3, [r5, #29]
   171d8:	2b03      	cmp	r3, #3
   171da:	f47f acd5 	bne.w	16b88 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   171de:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   171e2:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   171e6:	429a      	cmp	r2, r3
   171e8:	f43f ac9b 	beq.w	16b22 <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   171ec:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   171f0:	f002 0303 	and.w	r3, r2, #3
   171f4:	2b02      	cmp	r3, #2
   171f6:	f47f ac94 	bne.w	16b22 <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   171fa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   171fe:	f3c2 0182 	ubfx	r1, r2, #2, #3
   17202:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   17204:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17208:	009b      	lsls	r3, r3, #2
   1720a:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   1720e:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17212:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17216:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   1721a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1721e:	d002      	beq.n	17226 <ull_conn_rx+0x79e>
   17220:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17224:	d105      	bne.n	17232 <ull_conn_rx+0x7aa>
				conn->llcp_phy.tx = 0;
   17226:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1722a:	f003 0303 	and.w	r3, r3, #3
   1722e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_phy.pause_tx = 1U;
   17232:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   17236:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   17238:	f043 0301 	orr.w	r3, r3, #1
   1723c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   17240:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17244:	e46d      	b.n	16b22 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   17246:	7f6b      	ldrb	r3, [r5, #29]
   17248:	2b03      	cmp	r3, #3
   1724a:	f47f ac9d 	bne.w	16b88 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   1724e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17252:	2b00      	cmp	r3, #0
   17254:	f2c0 83f0 	blt.w	17a38 <ull_conn_rx+0xfb0>
			if ((conn->llcp_phy.ack !=
   17258:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   1725c:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   17260:	4291      	cmp	r1, r2
   17262:	d007      	beq.n	17274 <ull_conn_rx+0x7ec>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   17264:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17268:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   1726c:	3b01      	subs	r3, #1
   1726e:	2b02      	cmp	r3, #2
   17270:	f240 8573 	bls.w	17d5a <ull_conn_rx+0x12d2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   17274:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17278:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   1727c:	1a1b      	subs	r3, r3, r0
   1727e:	f003 0303 	and.w	r3, r3, #3
   17282:	2b02      	cmp	r3, #2
   17284:	f000 84ca 	beq.w	17c1c <ull_conn_rx+0x1194>
				     LLCP_ENCRYPTION)) ||
   17288:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
   1728c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   17290:	4298      	cmp	r0, r3
   17292:	f000 8515 	beq.w	17cc0 <ull_conn_rx+0x1238>
				nack = reject_ext_ind_send(conn, *rx,
   17296:	232a      	movs	r3, #42	; 0x2a
   17298:	2216      	movs	r2, #22
   1729a:	e6de      	b.n	1705a <ull_conn_rx+0x5d2>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1729c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   172a0:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   172a4:	429a      	cmp	r2, r3
   172a6:	f43f ac6f 	beq.w	16b88 <ull_conn_rx+0x100>
   172aa:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   172ae:	2a03      	cmp	r2, #3
   172b0:	f47f ac6a 	bne.w	16b88 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   172b4:	7f6a      	ldrb	r2, [r5, #29]
   172b6:	2a01      	cmp	r2, #1
   172b8:	f47f ac66 	bne.w	16b88 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   172bc:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   172c0:	2a00      	cmp	r2, #0
   172c2:	f2c0 8542 	blt.w	17d4a <ull_conn_rx+0x12c2>
			conn->llcp_enc.pause_rx = 0U;
   172c6:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   172ca:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   172ce:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   172d0:	f02c 0c03 	bic.w	ip, ip, #3
   172d4:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   172d8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   172dc:	f01c 0f04 	tst.w	ip, #4
   172e0:	f43f ac21 	beq.w	16b26 <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   172e4:	f36f 0c82 	bfc	ip, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   172e8:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   172ea:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
	int nack = 0;
   172ee:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   172f0:	712b      	strb	r3, [r5, #4]
   172f2:	e419      	b.n	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   172f4:	7f6e      	ldrb	r6, [r5, #29]
   172f6:	2e06      	cmp	r6, #6
   172f8:	f47f ac46 	bne.w	16b88 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   172fc:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   17300:	07da      	lsls	r2, r3, #31
   17302:	f140 8496 	bpl.w	17c32 <ull_conn_rx+0x11aa>
	} else if (!conn->llcp_version.rx) {
   17306:	f013 0302 	ands.w	r3, r3, #2
   1730a:	f47f ac0a 	bne.w	16b22 <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   1730e:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   17312:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   17316:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   1731a:	f895 3020 	ldrb.w	r3, [r5, #32]
   1731e:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   17322:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   17326:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1732a:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1732e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17332:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   17336:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1733a:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1733e:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   17342:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   17346:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   1734a:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1734e:	2000      	movs	r0, #0
   17350:	f7ff bbea 	b.w	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   17354:	7f6f      	ldrb	r7, [r5, #29]
   17356:	2f01      	cmp	r7, #1
   17358:	f47f ac16 	bne.w	16b88 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   1735c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   17360:	f010 0602 	ands.w	r6, r0, #2
   17364:	f040 8461 	bne.w	17c2a <ull_conn_rx+0x11a2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17368:	48d6      	ldr	r0, [pc, #856]	; (176c4 <ull_conn_rx+0xc3c>)
   1736a:	f7f8 fe7f 	bl	1006c <mem_acquire>
	if (!tx) {
   1736e:	4601      	mov	r1, r0
   17370:	2800      	cmp	r0, #0
   17372:	f000 81e4 	beq.w	1773e <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   17376:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1737a:	f043 0302 	orr.w	r3, r3, #2
   1737e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17382:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   17384:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17386:	f043 0303 	orr.w	r3, r3, #3
   1738a:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1738c:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1738e:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   17390:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   17392:	f7fe fa9d 	bl	158d0 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17396:	712f      	strb	r7, [r5, #4]
	return 0;
   17398:	4630      	mov	r0, r6
   1739a:	f7ff bbc5 	b.w	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1739e:	7f6b      	ldrb	r3, [r5, #29]
   173a0:	2b02      	cmp	r3, #2
   173a2:	f47f abf1 	bne.w	16b88 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   173a6:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   173aa:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   173ae:	428b      	cmp	r3, r1
   173b0:	d004      	beq.n	173bc <ull_conn_rx+0x934>
   173b2:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   173b6:	2b03      	cmp	r3, #3
   173b8:	f000 84f7 	beq.w	17daa <ull_conn_rx+0x1322>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   173bc:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   173c0:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   173c4:	428b      	cmp	r3, r1
   173c6:	f000 83ba 	beq.w	17b3e <ull_conn_rx+0x10b6>
		rej_ext_ind->error_code = rej_ind->error_code;
   173ca:	f895 2020 	ldrb.w	r2, [r5, #32]
   173ce:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   173d2:	2a23      	cmp	r2, #35	; 0x23
   173d4:	d012      	beq.n	173fc <ull_conn_rx+0x974>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   173d6:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   173da:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   173de:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   173e2:	f36f 0100 	bfc	r1, #0, #1
   173e6:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   173ea:	2100      	movs	r1, #0
   173ec:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   173f0:	f3c3 0102 	ubfx	r1, r3, #0, #3
   173f4:	f361 1306 	bfi	r3, r1, #4, #3
   173f8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   173fc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   17400:	075e      	lsls	r6, r3, #29
   17402:	f57f ab8e 	bpl.w	16b22 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17406:	231c      	movs	r3, #28
   17408:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1740a:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   1740c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   17410:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17414:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   17416:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1741a:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1741e:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   17420:	77ab      	strb	r3, [r5, #30]
	if (err) {
   17422:	f7ff bb81 	b.w	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   17426:	7f6b      	ldrb	r3, [r5, #29]
   17428:	2b03      	cmp	r3, #3
   1742a:	f47f abad 	bne.w	16b88 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   1742e:	f895 3020 	ldrb.w	r3, [r5, #32]
   17432:	3b03      	subs	r3, #3
   17434:	2b13      	cmp	r3, #19
   17436:	f63f ab74 	bhi.w	16b22 <ull_conn_rx+0x9a>
   1743a:	a101      	add	r1, pc, #4	; (adr r1, 17440 <ull_conn_rx+0x9b8>)
   1743c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   17440:	000176d1 	.word	0x000176d1
   17444:	00016b23 	.word	0x00016b23
   17448:	00016b23 	.word	0x00016b23
   1744c:	00016b23 	.word	0x00016b23
   17450:	00016b23 	.word	0x00016b23
   17454:	00016b23 	.word	0x00016b23
   17458:	00016b23 	.word	0x00016b23
   1745c:	00016b23 	.word	0x00016b23
   17460:	00016b23 	.word	0x00016b23
   17464:	00016b23 	.word	0x00016b23
   17468:	00016b23 	.word	0x00016b23
   1746c:	00016b23 	.word	0x00016b23
   17470:	0001764d 	.word	0x0001764d
   17474:	00016b23 	.word	0x00016b23
   17478:	00016b23 	.word	0x00016b23
   1747c:	00016b23 	.word	0x00016b23
   17480:	00016b23 	.word	0x00016b23
   17484:	0001760f 	.word	0x0001760f
   17488:	00016b23 	.word	0x00016b23
   1748c:	00017711 	.word	0x00017711
		if (!conn->lll.role ||
   17490:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17494:	2b00      	cmp	r3, #0
   17496:	f6bf ab77 	bge.w	16b88 <ull_conn_rx+0x100>
   1749a:	7f6e      	ldrb	r6, [r5, #29]
   1749c:	2e01      	cmp	r6, #1
   1749e:	f47f ab73 	bne.w	16b88 <ull_conn_rx+0x100>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   174a2:	4888      	ldr	r0, [pc, #544]	; (176c4 <ull_conn_rx+0xc3c>)
   174a4:	f7f8 fde2 	bl	1006c <mem_acquire>
		if (!tx) {
   174a8:	2800      	cmp	r0, #0
   174aa:	f000 8148 	beq.w	1773e <ull_conn_rx+0xcb6>
	conn->llcp_enc.pause_rx = 1U;
   174ae:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   174b2:	f022 0205 	bic.w	r2, r2, #5
   174b6:	f042 0205 	orr.w	r2, r2, #5
   174ba:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   174be:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   174c2:	f36f 02c3 	bfc	r2, #3, #1
   174c6:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   174ca:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   174cc:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   174ce:	f042 0203 	orr.w	r2, r2, #3
   174d2:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   174d4:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   174d8:	210b      	movs	r1, #11
   174da:	71c1      	strb	r1, [r0, #7]
	if (
   174dc:	2a00      	cmp	r2, #0
   174de:	f000 8187 	beq.w	177f0 <ull_conn_rx+0xd68>
	    !conn->llcp_enc.pause_tx &&
   174e2:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   174e6:	078e      	lsls	r6, r1, #30
   174e8:	f100 8182 	bmi.w	177f0 <ull_conn_rx+0xd68>
	    !conn->llcp_phy.pause_tx &&
   174ec:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   174f0:	07c9      	lsls	r1, r1, #31
   174f2:	f100 817d 	bmi.w	177f0 <ull_conn_rx+0xd68>
		if (conn->tx_head == conn->tx_data) {
   174f6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   174fa:	428a      	cmp	r2, r1
   174fc:	f000 8593 	beq.w	18026 <ull_conn_rx+0x159e>
		} else if (!conn->tx_ctrl) {
   17500:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   17504:	2900      	cmp	r1, #0
   17506:	f000 8644 	beq.w	18192 <ull_conn_rx+0x170a>
	tx->next = conn->tx_ctrl_last->next;
   1750a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1750e:	6811      	ldr	r1, [r2, #0]
   17510:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17512:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   17514:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   17518:	6802      	ldr	r2, [r0, #0]
   1751a:	2a00      	cmp	r2, #0
   1751c:	f47f ab01 	bne.w	16b22 <ull_conn_rx+0x9a>
   17520:	f7ff bb6b 	b.w	16bfa <ull_conn_rx+0x172>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   17524:	7f6b      	ldrb	r3, [r5, #29]
   17526:	2b09      	cmp	r3, #9
   17528:	f47f ab2e 	bne.w	16b88 <ull_conn_rx+0x100>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1752c:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1752e:	4966      	ldr	r1, [pc, #408]	; (176c8 <ull_conn_rx+0xc40>)
   17530:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   17532:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   17534:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   17538:	400a      	ands	r2, r1
   1753a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1753e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   17542:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   17546:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1754a:	4013      	ands	r3, r2
   1754c:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   17550:	6a2e      	ldr	r6, [r5, #32]
   17552:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   17554:	f7fb ffd0 	bl	134f8 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   17558:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1755c:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   17560:	4a59      	ldr	r2, [pc, #356]	; (176c8 <ull_conn_rx+0xc40>)
	conn->llcp_feature.features_peer =
   17562:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   17566:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   1756a:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   1756c:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   17570:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   17572:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   17576:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   1757a:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   1757e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   17582:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   17586:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   17588:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   1758c:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1758e:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   17592:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   17596:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1759a:	4618      	mov	r0, r3
}
   1759c:	f7ff bac4 	b.w	16b28 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   175a0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   175a4:	2b00      	cmp	r3, #0
   175a6:	f6bf aba2 	bge.w	16cee <ull_conn_rx+0x266>
   175aa:	f7ff baed 	b.w	16b88 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   175ae:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   175b2:	2b00      	cmp	r3, #0
   175b4:	f6ff aae8 	blt.w	16b88 <ull_conn_rx+0x100>
   175b8:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   175bc:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   175c0:	429a      	cmp	r2, r3
   175c2:	f43f aae1 	beq.w	16b88 <ull_conn_rx+0x100>
   175c6:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   175ca:	2b03      	cmp	r3, #3
   175cc:	f47f aadc 	bne.w	16b88 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   175d0:	7f6b      	ldrb	r3, [r5, #29]
   175d2:	2b01      	cmp	r3, #1
   175d4:	f47f aad8 	bne.w	16b88 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   175d8:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   175dc:	f36f 0201 	bfc	r2, #0, #2
   175e0:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	int nack = 0;
   175e4:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   175e6:	712b      	strb	r3, [r5, #4]
		break;
   175e8:	f7ff ba9e 	b.w	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   175ec:	7f6b      	ldrb	r3, [r5, #29]
   175ee:	2b01      	cmp	r3, #1
   175f0:	f47f aaca 	bne.w	16b88 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   175f4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   175f8:	2b00      	cmp	r3, #0
   175fa:	f280 80a8 	bge.w	1774e <ull_conn_rx+0xcc6>
		conn->lll.enc_tx = 0;
   175fe:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   17602:	f36f 1304 	bfc	r3, #4, #1
   17606:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   1760a:	f7ff ba8a 	b.w	16b22 <ull_conn_rx+0x9a>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1760e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   17612:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   17616:	4293      	cmp	r3, r2
   17618:	f43f aa83 	beq.w	16b22 <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   1761c:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1761e:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   17620:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   17624:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17628:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1762a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1762e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   17632:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17634:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   17636:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1763a:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1763c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   17640:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   17642:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   17644:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   17646:	4618      	mov	r0, r3
   17648:	f7ff ba6e 	b.w	16b28 <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1764c:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   17650:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   17654:	4299      	cmp	r1, r3
   17656:	f43f aa64 	beq.w	16b22 <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   1765a:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   1765e:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   17662:	2800      	cmp	r0, #0
   17664:	f2c0 85ac 	blt.w	181c0 <ull_conn_rx+0x1738>
   17668:	291a      	cmp	r1, #26
   1766a:	f000 85b2 	beq.w	181d2 <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1766e:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   17672:	f001 000f 	and.w	r0, r1, #15
   17676:	2804      	cmp	r0, #4
   17678:	d106      	bne.n	17688 <ull_conn_rx+0xc00>
	conn_upd_curr = NULL;
   1767a:	4814      	ldr	r0, [pc, #80]	; (176cc <ull_conn_rx+0xc44>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1767c:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   17680:	2300      	movs	r3, #0
   17682:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   17684:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   17688:	06c8      	lsls	r0, r1, #27
   1768a:	f57f aa4a 	bpl.w	16b22 <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1768e:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17690:	07d1      	lsls	r1, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17692:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17694:	f100 8463 	bmi.w	17f5e <ull_conn_rx+0x14d6>
	cu->status = rej_ext_ind->error_code;
   17698:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1769c:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   1769e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   176a0:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   176a4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   176a6:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   176a8:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   176aa:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   176ae:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   176b2:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   176b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   176b8:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   176bc:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   176be:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   176c0:	f7ff ba32 	b.w	16b28 <ull_conn_rx+0xa0>
   176c4:	20002ae4 	.word	0x20002ae4
   176c8:	087830d0 	.word	0x087830d0
   176cc:	20002a50 	.word	0x20002a50
		if ((conn->llcp_ack != conn->llcp_req) &&
   176d0:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   176d4:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   176d8:	428b      	cmp	r3, r1
   176da:	f43f aa22 	beq.w	16b22 <ull_conn_rx+0x9a>
   176de:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   176e2:	2b03      	cmp	r3, #3
   176e4:	f47f aa1d 	bne.w	16b22 <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   176e8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   176ec:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   176f0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   176f2:	f022 0203 	bic.w	r2, r2, #3
   176f6:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   176fa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   176fe:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   17702:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   17706:	210d      	movs	r1, #13
   17708:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   1770a:	4618      	mov	r0, r3
   1770c:	f7ff ba0c 	b.w	16b28 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   17710:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   17714:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   17718:	428b      	cmp	r3, r1
   1771a:	f43f aa02 	beq.w	16b22 <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1771e:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   17722:	2a23      	cmp	r2, #35	; 0x23
   17724:	f47f ae57 	bne.w	173d6 <ull_conn_rx+0x94e>
   17728:	e668      	b.n	173fc <ull_conn_rx+0x974>
			tx->next = conn->tx_head;
   1772a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1772c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17730:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   17734:	2a00      	cmp	r2, #0
   17736:	f47f a9f4 	bne.w	16b22 <ull_conn_rx+0x9a>
   1773a:	f7ff ba5e 	b.w	16bfa <ull_conn_rx+0x172>
			return -ENOBUFS;
   1773e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17742:	f7ff b9f1 	b.w	16b28 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   17746:	7f6b      	ldrb	r3, [r5, #29]
   17748:	2b01      	cmp	r3, #1
   1774a:	f47f aa1d 	bne.w	16b88 <ull_conn_rx+0x100>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1774e:	48b9      	ldr	r0, [pc, #740]	; (17a34 <ull_conn_rx+0xfac>)
   17750:	f7f8 fc8c 	bl	1006c <mem_acquire>
		if (!tx) {
   17754:	2800      	cmp	r0, #0
   17756:	d0f2      	beq.n	1773e <ull_conn_rx+0xcb6>
	conn->llcp_enc.pause_rx = 1U;
   17758:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1775c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   17760:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   17764:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   17768:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1776c:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   1776e:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17772:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   17774:	7141      	strb	r1, [r0, #5]
   17776:	e6aa      	b.n	174ce <ull_conn_rx+0xa46>
			conn->tx_data = conn->tx_data->next;
   17778:	6813      	ldr	r3, [r2, #0]
   1777a:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1777e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17782:	2b00      	cmp	r3, #0
   17784:	f47f aa2f 	bne.w	16be6 <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   17788:	6813      	ldr	r3, [r2, #0]
   1778a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1778c:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1778e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   17790:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   17794:	2a00      	cmp	r2, #0
   17796:	f47f a9c4 	bne.w	16b22 <ull_conn_rx+0x9a>
   1779a:	f7ff ba2e 	b.w	16bfa <ull_conn_rx+0x172>
		if (!conn->lll.role) {
   1779e:	f994 6039 	ldrsb.w	r6, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   177a2:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   177a6:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   177aa:	2e00      	cmp	r6, #0
   177ac:	f2c0 80b2 	blt.w	17914 <ull_conn_rx+0xe8c>
			if ((conn->llcp_conn_param.req !=
   177b0:	4291      	cmp	r1, r2
   177b2:	d00a      	beq.n	177ca <ull_conn_rx+0xd42>
			    ((conn->llcp_conn_param.state ==
   177b4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   177b8:	f012 0f0b 	tst.w	r2, #11
   177bc:	f000 8279 	beq.w	17cb2 <ull_conn_rx+0x122a>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   177c0:	f002 020f 	and.w	r2, r2, #15
   177c4:	2a06      	cmp	r2, #6
   177c6:	f000 8274 	beq.w	17cb2 <ull_conn_rx+0x122a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   177ca:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   177ce:	f894 60e5 	ldrb.w	r6, [r4, #229]	; 0xe5
   177d2:	1b92      	subs	r2, r2, r6
   177d4:	f002 0203 	and.w	r2, r2, #3
   177d8:	2a02      	cmp	r2, #2
   177da:	f000 83ed 	beq.w	17fb8 <ull_conn_rx+0x1530>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   177de:	f894 61bc 	ldrb.w	r6, [r4, #444]	; 0x1bc
   177e2:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   177e6:	4296      	cmp	r6, r2
   177e8:	f000 8436 	beq.w	18058 <ull_conn_rx+0x15d0>
				nack = reject_ext_ind_send(conn, *rx,
   177ec:	232a      	movs	r3, #42	; 0x2a
   177ee:	e433      	b.n	17058 <ull_conn_rx+0x5d0>
		if (!conn->tx_ctrl) {
   177f0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   177f4:	2900      	cmp	r1, #0
   177f6:	f47f ae88 	bne.w	1750a <ull_conn_rx+0xa82>
			tx->next = conn->tx_head;
   177fa:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   177fc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17800:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   17804:	e688      	b.n	17518 <ull_conn_rx+0xa90>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   17806:	7f6b      	ldrb	r3, [r5, #29]
   17808:	2b01      	cmp	r3, #1
   1780a:	f47f a9bd 	bne.w	16b88 <ull_conn_rx+0x100>
   1780e:	e6f6      	b.n	175fe <ull_conn_rx+0xb76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17810:	7913      	ldrb	r3, [r2, #4]
   17812:	f003 0303 	and.w	r3, r3, #3
   17816:	2b03      	cmp	r3, #3
   17818:	f000 8243 	beq.w	17ca2 <ull_conn_rx+0x121a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1781c:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   17820:	f7ff b9e3 	b.w	16bea <ull_conn_rx+0x162>
	if (conn->common.txn_lock) {
   17824:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   17828:	079b      	lsls	r3, r3, #30
   1782a:	f53f a97a 	bmi.w	16b22 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1782e:	4881      	ldr	r0, [pc, #516]	; (17a34 <ull_conn_rx+0xfac>)
   17830:	f7f8 fc1c 	bl	1006c <mem_acquire>
	if (!tx) {
   17834:	4603      	mov	r3, r0
   17836:	2800      	cmp	r0, #0
   17838:	d081      	beq.n	1773e <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   1783a:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1783e:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   17842:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   17846:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1784a:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1784e:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   17852:	f042 0202 	orr.w	r2, r2, #2
   17856:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1785a:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1785e:	428a      	cmp	r2, r1
   17860:	f040 84f5 	bne.w	1824e <ull_conn_rx+0x17c6>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   17864:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   17866:	291a      	cmp	r1, #26
   17868:	f240 826d 	bls.w	17d46 <ull_conn_rx+0x12be>
			eff_tx_octets = MIN(max_rx_octets,
   1786c:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   17870:	4281      	cmp	r1, r0
   17872:	bf28      	it	cs
   17874:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   17876:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   17878:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1787c:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   1787e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   17880:	bf34      	ite	cc
   17882:	46c6      	movcc	lr, r8
   17884:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   17888:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1788c:	bf34      	ite	cc
   1788e:	4658      	movcc	r0, fp
   17890:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   17894:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   17898:	bf34      	ite	cc
   1789a:	46d4      	movcc	ip, sl
   1789c:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   178a0:	45c6      	cmp	lr, r8
   178a2:	f000 8313 	beq.w	17ecc <ull_conn_rx+0x1444>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   178a6:	3a01      	subs	r2, #1
   178a8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   178ac:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   178b0:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   178b4:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   178b8:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   178bc:	2b00      	cmp	r3, #0
   178be:	f000 836b 	beq.w	17f98 <ull_conn_rx+0x1510>
				conn->llcp_length.state =
   178c2:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   178c6:	2505      	movs	r5, #5
   178c8:	f365 0202 	bfi	r2, r5, #0, #3
   178cc:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   178d0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   178d4:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   178d6:	6832      	ldr	r2, [r6, #0]
   178d8:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   178da:	6832      	ldr	r2, [r6, #0]
   178dc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   178e0:	2200      	movs	r2, #0
   178e2:	6032      	str	r2, [r6, #0]
	if (tx) {
   178e4:	2b00      	cmp	r3, #0
   178e6:	f43f a91e 	beq.w	16b26 <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   178ea:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   178ec:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   178ee:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   178f2:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   178f4:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   178f6:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   178f8:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   178fa:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   178fc:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17900:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   17904:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   17906:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   17908:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1790a:	f7fd ffe1 	bl	158d0 <ctrl_tx_sec_enqueue>
	return 0;
   1790e:	2000      	movs	r0, #0
}
   17910:	f7ff b90a 	b.w	16b28 <ull_conn_rx+0xa0>
		} else if ((conn->llcp_conn_param.req ==
   17914:	4291      	cmp	r1, r2
   17916:	d005      	beq.n	17924 <ull_conn_rx+0xe9c>
			    conn->llcp_conn_param.ack) ||
   17918:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1791c:	f012 0f0b 	tst.w	r2, #11
   17920:	f47f a8ff 	bne.w	16b22 <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   17924:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   17928:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1792c:	2a05      	cmp	r2, #5
   1792e:	d97d      	bls.n	17a2c <ull_conn_rx+0xfa4>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17930:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   17934:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17938:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   1793c:	d876      	bhi.n	17a2c <ull_conn_rx+0xfa4>
			    (interval_max > 3200) ||
   1793e:	42b2      	cmp	r2, r6
   17940:	d874      	bhi.n	17a2c <ull_conn_rx+0xfa4>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   17942:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   17946:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   1794a:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1794e:	d26d      	bcs.n	17a2c <ull_conn_rx+0xfa4>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17950:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   17954:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   17958:	f1a2 070a 	sub.w	r7, r2, #10
   1795c:	f640 4b76 	movw	fp, #3190	; 0xc76
   17960:	b2bf      	uxth	r7, r7
   17962:	455f      	cmp	r7, fp
   17964:	d862      	bhi.n	17a2c <ull_conn_rx+0xfa4>
			     ((latency + 1) * interval_max)) ||
   17966:	f10c 0701 	add.w	r7, ip, #1
   1796a:	b2bf      	uxth	r7, r7
   1796c:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   17970:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   17974:	d25a      	bcs.n	17a2c <ull_conn_rx+0xfa4>
			     ((latency + 1) * interval_max)) ||
   17976:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1797a:	455e      	cmp	r6, fp
   1797c:	d356      	bcc.n	17a2c <ull_conn_rx+0xfa4>
			conn->llcp_conn_param.interval_min = interval_min;
   1797e:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   17982:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   17986:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   1798a:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   1798e:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   17992:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   17996:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1799a:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1799e:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   179a2:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   179a6:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   179aa:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   179ae:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   179b2:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   179b6:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   179ba:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   179be:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   179c2:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   179c6:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   179ca:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   179ce:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   179d2:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   179d6:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   179da:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   179de:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   179e2:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   179e6:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   179ea:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   179ee:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   179f2:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   179f6:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   179fa:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   179fe:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   17a02:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   17a04:	42be      	cmp	r6, r7
   17a06:	f000 843d 	beq.w	18284 <ull_conn_rx+0x17fc>
				conn->llcp_conn_param.state =
   17a0a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   17a0e:	2503      	movs	r5, #3
   17a10:	f365 0203 	bfi	r2, r5, #0, #4
   17a14:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   17a18:	3901      	subs	r1, #1
   17a1a:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   17a1e:	2b00      	cmp	r3, #0
   17a20:	f47f a881 	bne.w	16b26 <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   17a24:	6004      	str	r4, [r0, #0]
	int nack = 0;
   17a26:	4618      	mov	r0, r3
   17a28:	f7ff b87e 	b.w	16b28 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   17a2c:	231e      	movs	r3, #30
   17a2e:	f7ff bb13 	b.w	17058 <ull_conn_rx+0x5d0>
   17a32:	bf00      	nop
   17a34:	20002ae4 	.word	0x20002ae4
	if (conn->common.txn_lock) {
   17a38:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   17a3c:	f017 0702 	ands.w	r7, r7, #2
   17a40:	f47f a86f 	bne.w	16b22 <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17a44:	48e0      	ldr	r0, [pc, #896]	; (17dc8 <ull_conn_rx+0x1340>)
   17a46:	f7f8 fb11 	bl	1006c <mem_acquire>
	if (!tx) {
   17a4a:	4602      	mov	r2, r0
   17a4c:	2800      	cmp	r0, #0
   17a4e:	f43f ae76 	beq.w	1773e <ull_conn_rx+0xcb6>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a52:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   17a56:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   17a5a:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a5e:	2002      	movs	r0, #2
   17a60:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   17a64:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   17a68:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   17a6c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   17a70:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   17a74:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   17a78:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   17a7a:	f3c3 0602 	ubfx	r6, r3, #0, #3
   17a7e:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   17a82:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   17a86:	d114      	bne.n	17ab2 <ull_conn_rx+0x102a>
		conn->llcp_phy.ack--;
   17a88:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   17a8a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   17a8e:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   17a92:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   17a96:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   17a9a:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   17a9e:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   17aa2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   17aa6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   17aaa:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   17aae:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   17ab2:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   17ab6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   17aba:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   17abe:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   17ac2:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   17ac6:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   17aca:	009b      	lsls	r3, r3, #2
   17acc:	f001 0103 	and.w	r1, r1, #3
   17ad0:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   17ad4:	430b      	orrs	r3, r1
   17ad6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   17ada:	2303      	movs	r3, #3
   17adc:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   17ade:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17ae0:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   17ae2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   17ae6:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17ae8:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17aea:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   17aee:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   17af0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17af4:	7110      	strb	r0, [r2, #4]
	if (
   17af6:	2b00      	cmp	r3, #0
   17af8:	f000 80c0 	beq.w	17c7c <ull_conn_rx+0x11f4>
	    !conn->llcp_enc.pause_tx &&
   17afc:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   17b00:	0786      	lsls	r6, r0, #30
   17b02:	f100 80bb 	bmi.w	17c7c <ull_conn_rx+0x11f4>
	    !conn->llcp_phy.pause_tx &&
   17b06:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   17b0a:	07c0      	lsls	r0, r0, #31
   17b0c:	f100 80b6 	bmi.w	17c7c <ull_conn_rx+0x11f4>
		if (conn->tx_head == conn->tx_data) {
   17b10:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   17b14:	4283      	cmp	r3, r0
   17b16:	f000 83e3 	beq.w	182e0 <ull_conn_rx+0x1858>
		} else if (!conn->tx_ctrl) {
   17b1a:	2900      	cmp	r1, #0
   17b1c:	f000 83d8 	beq.w	182d0 <ull_conn_rx+0x1848>
	tx->next = conn->tx_ctrl_last->next;
   17b20:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   17b24:	6819      	ldr	r1, [r3, #0]
   17b26:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   17b28:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   17b2a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   17b2e:	6813      	ldr	r3, [r2, #0]
   17b30:	2b00      	cmp	r3, #0
   17b32:	f47e aff6 	bne.w	16b22 <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   17b36:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17b3a:	f7fe bff2 	b.w	16b22 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   17b3e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   17b42:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   17b46:	428b      	cmp	r3, r1
   17b48:	f43f ad61 	beq.w	1760e <ull_conn_rx+0xb86>
		rej_ext_ind->error_code = rej_ind->error_code;
   17b4c:	f895 3020 	ldrb.w	r3, [r5, #32]
   17b50:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   17b54:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   17b58:	2800      	cmp	r0, #0
   17b5a:	f2c0 825c 	blt.w	18016 <ull_conn_rx+0x158e>
   17b5e:	2b1a      	cmp	r3, #26
   17b60:	f000 8337 	beq.w	181d2 <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   17b64:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   17b68:	f003 000f 	and.w	r0, r3, #15
   17b6c:	2804      	cmp	r0, #4
   17b6e:	d106      	bne.n	17b7e <ull_conn_rx+0x10f6>
	conn_upd_curr = NULL;
   17b70:	4896      	ldr	r0, [pc, #600]	; (17dcc <ull_conn_rx+0x1344>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17b72:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   17b76:	2100      	movs	r1, #0
   17b78:	6001      	str	r1, [r0, #0]
		conn->procedure_expire = 0U;
   17b7a:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   17b7e:	06df      	lsls	r7, r3, #27
   17b80:	f57e afcf 	bpl.w	16b22 <ull_conn_rx+0x9a>
   17b84:	e583      	b.n	1768e <ull_conn_rx+0xc06>
			conn->llcp_conn_param.disabled = 1U;
   17b86:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   17b8a:	f043 0320 	orr.w	r3, r3, #32
   17b8e:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   17b92:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17b96:	2b00      	cmp	r3, #0
   17b98:	f2c0 81c6 	blt.w	17f28 <ull_conn_rx+0x14a0>
				LL_ASSERT(conn->llcp_cu.req ==
   17b9c:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   17ba0:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   17ba4:	429a      	cmp	r2, r3
   17ba6:	d00e      	beq.n	17bc6 <ull_conn_rx+0x113e>
   17ba8:	4a89      	ldr	r2, [pc, #548]	; (17dd0 <ull_conn_rx+0x1348>)
   17baa:	498a      	ldr	r1, [pc, #552]	; (17dd4 <ull_conn_rx+0x134c>)
   17bac:	488a      	ldr	r0, [pc, #552]	; (17dd8 <ull_conn_rx+0x1350>)
   17bae:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   17bb2:	f00d f9a8 	bl	24f06 <printk>
   17bb6:	4040      	eors	r0, r0
   17bb8:	f380 8811 	msr	BASEPRI, r0
   17bbc:	f04f 0003 	mov.w	r0, #3
   17bc0:	df02      	svc	2
   17bc2:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   17bc6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   17bca:	2106      	movs	r1, #6
   17bcc:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   17bd0:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   17bd2:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   17bd4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   17bd8:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17bdc:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   17bde:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17be2:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17be6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   17bea:	00db      	lsls	r3, r3, #3
   17bec:	f022 020f 	bic.w	r2, r2, #15
   17bf0:	430b      	orrs	r3, r1
   17bf2:	4313      	orrs	r3, r2
   17bf4:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   17bf8:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   17bfc:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   17c00:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   17c04:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   17c06:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   17c0a:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   17c0e:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   17c12:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17c16:	7129      	strb	r1, [r5, #4]
				break;
   17c18:	f7fe bf86 	b.w	16b28 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   17c1c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   17c20:	2b03      	cmp	r3, #3
   17c22:	f47f ab38 	bne.w	17296 <ull_conn_rx+0x80e>
   17c26:	f7ff bb2f 	b.w	17288 <ull_conn_rx+0x800>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17c2a:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   17c2c:	2000      	movs	r0, #0
   17c2e:	f7fe bf7b 	b.w	16b28 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c32:	4865      	ldr	r0, [pc, #404]	; (17dc8 <ull_conn_rx+0x1340>)
   17c34:	f7f8 fa1a 	bl	1006c <mem_acquire>
		if (!tx) {
   17c38:	4601      	mov	r1, r0
   17c3a:	2800      	cmp	r0, #0
   17c3c:	f43f ad7f 	beq.w	1773e <ull_conn_rx+0xcb6>
		conn->llcp_version.tx = 1U;
   17c40:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   17c44:	f043 0301 	orr.w	r3, r3, #1
   17c48:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c4c:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   17c4e:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17c50:	220c      	movs	r2, #12
   17c52:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   17c54:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c56:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17c5a:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c5e:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17c60:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   17c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17c66:	2205      	movs	r2, #5
		v->sub_version_number =
   17c68:	72c3      	strb	r3, [r0, #11]
   17c6a:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17c6c:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   17c6e:	4620      	mov	r0, r4
   17c70:	f7fd fe2e 	bl	158d0 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17c74:	2301      	movs	r3, #1
   17c76:	712b      	strb	r3, [r5, #4]
   17c78:	f7ff bb4f 	b.w	1731a <ull_conn_rx+0x892>
		if (!conn->tx_ctrl) {
   17c7c:	2900      	cmp	r1, #0
   17c7e:	f47f af4f 	bne.w	17b20 <ull_conn_rx+0x1098>
			tx->next = conn->tx_head;
   17c82:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   17c84:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   17c88:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   17c8c:	e74f      	b.n	17b2e <ull_conn_rx+0x10a6>
			conn->llcp_length.disabled = 1U;
   17c8e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   17c92:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   17c96:	f043 0308 	orr.w	r3, r3, #8
   17c9a:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   17c9e:	f7ff b937 	b.w	16f10 <ull_conn_rx+0x488>
	    ((pdu_data_tx->llctrl.opcode !=
   17ca2:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   17ca4:	2b03      	cmp	r3, #3
   17ca6:	f43f ad6f 	beq.w	17788 <ull_conn_rx+0xd00>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   17caa:	2b0a      	cmp	r3, #10
   17cac:	f47f adb6 	bne.w	1781c <ull_conn_rx+0xd94>
   17cb0:	e56a      	b.n	17788 <ull_conn_rx+0xd00>
				nack = reject_ext_ind_send(conn, *rx,
   17cb2:	2323      	movs	r3, #35	; 0x23
   17cb4:	f7ff b9d0 	b.w	17058 <ull_conn_rx+0x5d0>
				nack = reject_ext_ind_send(conn, *rx,
   17cb8:	231e      	movs	r3, #30
   17cba:	2210      	movs	r2, #16
   17cbc:	f7ff b9cd 	b.w	1705a <ull_conn_rx+0x5d2>
				conn->llcp_phy.state =
   17cc0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   17cc4:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   17cc6:	f043 0303 	orr.w	r3, r3, #3
   17cca:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   17cce:	d111      	bne.n	17cf4 <ull_conn_rx+0x126c>
					conn->llcp_phy.tx =
   17cd0:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   17cd4:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   17cd8:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   17cda:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   17cde:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   17ce2:	f240 43fc 	movw	r3, #1276	; 0x4fc
   17ce6:	f022 0204 	bic.w	r2, r2, #4
   17cea:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   17cee:	4313      	orrs	r3, r2
   17cf0:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   17cf4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17cf8:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   17cfc:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   17d00:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   17d04:	f003 0203 	and.w	r2, r3, #3
   17d08:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17d0c:	4003      	ands	r3, r0
   17d0e:	009b      	lsls	r3, r3, #2
   17d10:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   17d14:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17d16:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   17d1a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17d1e:	d002      	beq.n	17d26 <ull_conn_rx+0x129e>
   17d20:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17d24:	d105      	bne.n	17d32 <ull_conn_rx+0x12aa>
					conn->llcp_phy.tx = 0;
   17d26:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17d2a:	f003 0303 	and.w	r3, r3, #3
   17d2e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   17d32:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17d36:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   17d38:	4313      	orrs	r3, r2
   17d3a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   17d3e:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17d40:	712a      	strb	r2, [r5, #4]
   17d42:	f7fe bef1 	b.w	16b28 <ull_conn_rx+0xa0>
   17d46:	4649      	mov	r1, r9
   17d48:	e595      	b.n	17876 <ull_conn_rx+0xdee>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17d4a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   17d4e:	f36f 0301 	bfc	r3, #0, #2
   17d52:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   17d56:	f7ff bac1 	b.w	172dc <ull_conn_rx+0x854>
				nack = reject_ext_ind_send(conn, *rx,
   17d5a:	2323      	movs	r3, #35	; 0x23
   17d5c:	2216      	movs	r2, #22
   17d5e:	f7ff b97c 	b.w	1705a <ull_conn_rx+0x5d2>
			lll->phy_tx_time = lll->phy_tx;
   17d62:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   17d66:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   17d6a:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   17d6e:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   17d72:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   17d74:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17d78:	f362 1106 	bfi	r1, r2, #4, #3
   17d7c:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   17d80:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   17d84:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   17d88:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17d8c:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   17d8e:	f000 810f 	beq.w	17fb0 <ull_conn_rx+0x1528>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17d92:	211c      	movs	r1, #28
   17d94:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   17d96:	2300      	movs	r3, #0
   17d98:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   17d9a:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   17d9c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   17da0:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17da4:	77ab      	strb	r3, [r5, #30]
   17da6:	f7ff b8b3 	b.w	16f10 <ull_conn_rx+0x488>
	conn->llcp_enc.pause_rx = 0U;
   17daa:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   17dae:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   17db2:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   17db4:	f022 0203 	bic.w	r2, r2, #3
   17db8:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   17dbc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   17dc0:	4618      	mov	r0, r3
   17dc2:	f7fe beb1 	b.w	16b28 <ull_conn_rx+0xa0>
   17dc6:	bf00      	nop
   17dc8:	20002ae4 	.word	0x20002ae4
   17dcc:	20002a50 	.word	0x20002a50
   17dd0:	0002c6cc 	.word	0x0002c6cc
   17dd4:	0002c800 	.word	0x0002c800
   17dd8:	0002bfdc 	.word	0x0002bfdc
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   17ddc:	2101      	movs	r1, #1
   17dde:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   17de2:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   17de6:	f7f8 fb13 	bl	10410 <util_ones_count_get>
   17dea:	2801      	cmp	r0, #1
   17dec:	f200 80b2 	bhi.w	17f54 <ull_conn_rx+0x14cc>
	phy = ind->p_to_c_phy;
   17df0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17df4:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   17df8:	f10d 000f 	add.w	r0, sp, #15
   17dfc:	2101      	movs	r1, #1
   17dfe:	f7f8 fb07 	bl	10410 <util_ones_count_get>
   17e02:	2801      	cmp	r0, #1
   17e04:	f200 80a6 	bhi.w	17f54 <ull_conn_rx+0x14cc>
	instant = sys_le16_to_cpu(ind->instant);
   17e08:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17e0a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17e0c:	1ad3      	subs	r3, r2, r3
   17e0e:	041b      	lsls	r3, r3, #16
   17e10:	f100 8259 	bmi.w	182c6 <ull_conn_rx+0x183e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17e14:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   17e18:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17e1c:	1a5b      	subs	r3, r3, r1
   17e1e:	f003 0303 	and.w	r3, r3, #3
   17e22:	2b02      	cmp	r3, #2
   17e24:	f000 826e 	beq.w	18304 <ull_conn_rx+0x187c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17e28:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   17e2c:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   17e30:	4283      	cmp	r3, r0
   17e32:	d018      	beq.n	17e66 <ull_conn_rx+0x13de>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17e34:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17e38:	f003 0303 	and.w	r3, r3, #3
   17e3c:	2b02      	cmp	r3, #2
   17e3e:	d112      	bne.n	17e66 <ull_conn_rx+0x13de>
		conn->llcp_phy.pause_tx = 0U;
   17e40:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17e44:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   17e48:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e4c:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   17e50:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e54:	f3c3 0380 	ubfx	r3, r3, #2, #1
   17e58:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   17e5c:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17e5e:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   17e62:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   17e66:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   17e6a:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   17e6e:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   17e72:	009b      	lsls	r3, r3, #2
   17e74:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   17e78:	f003 031c 	and.w	r3, r3, #28
   17e7c:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   17e80:	f002 0202 	and.w	r2, r2, #2
   17e84:	4313      	orrs	r3, r2
   17e86:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   17e8a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17e8e:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   17e90:	6833      	ldr	r3, [r6, #0]
   17e92:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   17e94:	6832      	ldr	r2, [r6, #0]
   17e96:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   17e9a:	2300      	movs	r3, #0
   17e9c:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   17e9e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   17ea2:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   17ea4:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   17ea6:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   17eaa:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   17eae:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   17eb2:	f43e ae39 	beq.w	16b28 <ull_conn_rx+0xa0>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   17eb6:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   17eba:	f3c2 0282 	ubfx	r2, r2, #2, #3
   17ebe:	f362 1106 	bfi	r1, r2, #4, #3
   17ec2:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   17ec6:	4618      	mov	r0, r3
   17ec8:	f7fe be2e 	b.w	16b28 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   17ecc:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17ece:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   17ed0:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   17ed4:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17ed8:	f000 80b4 	beq.w	18044 <ull_conn_rx+0x15bc>
			conn->lll.max_rx_time = eff_rx_time;
   17edc:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   17ee0:	2b00      	cmp	r3, #0
   17ee2:	f000 8151 	beq.w	18188 <ull_conn_rx+0x1700>
					(conn->llcp_length.req - 1);
   17ee6:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   17ee8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   17eec:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   17ef0:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   17ef4:	2603      	movs	r6, #3
   17ef6:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   17efa:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   17efe:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   17f02:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   17f06:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   17f0a:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   17f0e:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17f10:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   17f14:	84e8      	strh	r0, [r5, #38]	; 0x26
   17f16:	e4e5      	b.n	178e4 <ull_conn_rx+0xe5c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17f18:	2301      	movs	r3, #1
   17f1a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   17f1c:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_final = err;
   17f1e:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   17f22:	2000      	movs	r0, #0
   17f24:	f7fe be00 	b.w	16b28 <ull_conn_rx+0xa0>
	conn_upd_curr = NULL;
   17f28:	4bd0      	ldr	r3, [pc, #832]	; (1826c <ull_conn_rx+0x17e4>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17f2a:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   17f2e:	2100      	movs	r1, #0
   17f30:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   17f32:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   17f36:	f013 0310 	ands.w	r3, r3, #16
   17f3a:	d146      	bne.n	17fca <ull_conn_rx+0x1542>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17f3c:	2201      	movs	r2, #1
   17f3e:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   17f40:	4618      	mov	r0, r3
				break;
   17f42:	f7fe bdf1 	b.w	16b28 <ull_conn_rx+0xa0>
		conn_upd_curr = conn;
   17f46:	601c      	str	r4, [r3, #0]
   17f48:	f7fe bf97 	b.w	16e7a <ull_conn_rx+0x3f2>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17f4c:	2301      	movs	r3, #1
   17f4e:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   17f50:	232a      	movs	r3, #42	; 0x2a
   17f52:	e7e4      	b.n	17f1e <ull_conn_rx+0x1496>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17f54:	6833      	ldr	r3, [r6, #0]
   17f56:	2201      	movs	r2, #1
   17f58:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   17f5a:	231e      	movs	r3, #30
   17f5c:	e7df      	b.n	17f1e <ull_conn_rx+0x1496>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17f5e:	4ac4      	ldr	r2, [pc, #784]	; (18270 <ull_conn_rx+0x17e8>)
   17f60:	49c4      	ldr	r1, [pc, #784]	; (18274 <ull_conn_rx+0x17ec>)
   17f62:	48c5      	ldr	r0, [pc, #788]	; (18278 <ull_conn_rx+0x17f0>)
   17f64:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   17f68:	f00c ffcd 	bl	24f06 <printk>
   17f6c:	4040      	eors	r0, r0
   17f6e:	f380 8811 	msr	BASEPRI, r0
   17f72:	f04f 0003 	mov.w	r0, #3
   17f76:	df02      	svc	2
   17f78:	f7ff bb8e 	b.w	17698 <ull_conn_rx+0xc10>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   17f7c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   17f80:	3202      	adds	r2, #2
   17f82:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   17f86:	2b00      	cmp	r3, #0
   17f88:	f040 80f0 	bne.w	1816c <ull_conn_rx+0x16e4>
			conn->periph.llcp_type = conn->llcp_type;
   17f8c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   17f90:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   17f94:	f7fe be69 	b.w	16c6a <ull_conn_rx+0x1e2>
				conn->llcp_length.state =
   17f98:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   17f9c:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   17fa0:	2504      	movs	r5, #4
   17fa2:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   17fa6:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   17faa:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   17fae:	e48f      	b.n	178d0 <ull_conn_rx+0xe48>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17fb0:	2201      	movs	r2, #1
   17fb2:	711a      	strb	r2, [r3, #4]
   17fb4:	f7fe bfac 	b.w	16f10 <ull_conn_rx+0x488>
				      0x03) == 0x02) &&
   17fb8:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   17fbc:	2a03      	cmp	r2, #3
   17fbe:	f47f ac15 	bne.w	177ec <ull_conn_rx+0xd64>
   17fc2:	e40c      	b.n	177de <ull_conn_rx+0xd56>
	struct node_tx *tx = NULL;
   17fc4:	2300      	movs	r3, #0
   17fc6:	f7fe bee4 	b.w	16d92 <ull_conn_rx+0x30a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17fca:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17fcc:	07d2      	lsls	r2, r2, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17fce:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   17fd0:	f100 80e8 	bmi.w	181a4 <ull_conn_rx+0x171c>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17fd4:	231a      	movs	r3, #26
   17fd6:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   17fd8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   17fda:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   17fde:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   17fe0:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   17fe2:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   17fe6:	227d      	movs	r2, #125	; 0x7d
   17fe8:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   17fec:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   17fee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17ff2:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   17ff6:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   17ff8:	f7fe bf8a 	b.w	16f10 <ull_conn_rx+0x488>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17ffc:	6832      	ldr	r2, [r6, #0]
   17ffe:	201c      	movs	r0, #28
   18000:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   18002:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   18004:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   18006:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   1800a:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   1800c:	f3c2 0302 	ubfx	r3, r2, #0, #3
   18010:	77ab      	strb	r3, [r5, #30]
		if (err) {
   18012:	f7fe bd89 	b.w	16b28 <ull_conn_rx+0xa0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18016:	2b23      	cmp	r3, #35	; 0x23
   18018:	f43f ada4 	beq.w	17b64 <ull_conn_rx+0x10dc>
			conn->periph.ticks_to_offset =
   1801c:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   18020:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   18024:	e59e      	b.n	17b64 <ull_conn_rx+0x10dc>
			conn->tx_data = conn->tx_data->next;
   18026:	6811      	ldr	r1, [r2, #0]
   18028:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1802c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18030:	2900      	cmp	r1, #0
   18032:	f47f aa6a 	bne.w	1750a <ull_conn_rx+0xa82>
			tx->next = conn->tx_head->next;
   18036:	6811      	ldr	r1, [r2, #0]
   18038:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1803a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1803c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   18040:	f7ff ba6a 	b.w	17518 <ull_conn_rx+0xa90>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18044:	4558      	cmp	r0, fp
   18046:	f47f af49 	bne.w	17edc <ull_conn_rx+0x1454>
			    eff_rx_time == conn->lll.max_rx_time &&
   1804a:	45d4      	cmp	ip, sl
   1804c:	f47f af46 	bne.w	17edc <ull_conn_rx+0x1454>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18050:	6832      	ldr	r2, [r6, #0]
   18052:	2501      	movs	r5, #1
   18054:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   18056:	e445      	b.n	178e4 <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   18058:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   1805c:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   18060:	2a05      	cmp	r2, #5
   18062:	f67f ace3 	bls.w	17a2c <ull_conn_rx+0xfa4>
				uint16_t interval_max =
   18066:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   1806a:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1806e:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   18072:	f63f acdb 	bhi.w	17a2c <ull_conn_rx+0xfa4>
				    (interval_max > 3200) ||
   18076:	4572      	cmp	r2, lr
   18078:	f63f acd8 	bhi.w	17a2c <ull_conn_rx+0xfa4>
				uint16_t latency =
   1807c:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1807e:	b2be      	uxth	r6, r7
				    (interval_min > interval_max) ||
   18080:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   18084:	f4bf acd2 	bcs.w	17a2c <ull_conn_rx+0xfa4>
				uint16_t timeout =
   18088:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   1808a:	f8ad 2006 	strh.w	r2, [sp, #6]
   1808e:	b292      	uxth	r2, r2
				    (latency > 499) ||
   18090:	f1a2 0a0a 	sub.w	sl, r2, #10
   18094:	f640 4b76 	movw	fp, #3190	; 0xc76
   18098:	fa1f fa8a 	uxth.w	sl, sl
   1809c:	45da      	cmp	sl, fp
   1809e:	f63f acc5 	bhi.w	17a2c <ull_conn_rx+0xfa4>
				     ((latency + 1) * interval_max)) ||
   180a2:	f106 0a01 	add.w	sl, r6, #1
   180a6:	fa1f fa8a 	uxth.w	sl, sl
   180aa:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   180ae:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   180b2:	f4bf acbb 	bcs.w	17a2c <ull_conn_rx+0xfa4>
				     ((latency + 1) * interval_max)) ||
   180b6:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   180ba:	45de      	cmp	lr, fp
   180bc:	f4ff acb6 	bcc.w	17a2c <ull_conn_rx+0xfa4>
				conn->llcp_conn_param.latency =	latency;
   180c0:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   180c4:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   180c8:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   180cc:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   180d0:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   180d4:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   180d8:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   180dc:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   180e0:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   180e4:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   180e8:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   180ec:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   180f0:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   180f4:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   180f8:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   180fc:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   18100:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   18104:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   18108:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1810c:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   18110:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   18114:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   18118:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1811c:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   18120:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   18124:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   18128:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1812c:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   18130:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   18134:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   18138:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1813c:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   18140:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   18144:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   18148:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1814a:	45be      	cmp	lr, r7
   1814c:	f000 80df 	beq.w	1830e <ull_conn_rx+0x1886>
					if (conn->llcp_enc.pause_tx) {
   18150:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   18154:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   18158:	f43f ac59 	beq.w	17a0e <ull_conn_rx+0xf86>
						conn->llcp_conn_param.state =
   1815c:	2602      	movs	r6, #2
   1815e:	f366 0203 	bfi	r2, r6, #0, #4
   18162:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   18166:	2201      	movs	r2, #1
   18168:	712a      	strb	r2, [r5, #4]
   1816a:	e455      	b.n	17a18 <ull_conn_rx+0xf90>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   1816c:	4a40      	ldr	r2, [pc, #256]	; (18270 <ull_conn_rx+0x17e8>)
   1816e:	4943      	ldr	r1, [pc, #268]	; (1827c <ull_conn_rx+0x17f4>)
   18170:	4841      	ldr	r0, [pc, #260]	; (18278 <ull_conn_rx+0x17f0>)
   18172:	f641 13ad 	movw	r3, #6573	; 0x19ad
   18176:	f00c fec6 	bl	24f06 <printk>
   1817a:	4040      	eors	r0, r0
   1817c:	f380 8811 	msr	BASEPRI, r0
   18180:	f04f 0003 	mov.w	r0, #3
   18184:	df02      	svc	2
   18186:	e701      	b.n	17f8c <ull_conn_rx+0x1504>
				conn->lll.max_tx_octets = eff_tx_octets;
   18188:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1818c:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   18190:	e6bb      	b.n	17f0a <ull_conn_rx+0x1482>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18192:	7911      	ldrb	r1, [r2, #4]
   18194:	f001 0103 	and.w	r1, r1, #3
   18198:	2903      	cmp	r1, #3
   1819a:	d060      	beq.n	1825e <ull_conn_rx+0x17d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1819c:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   181a0:	f7ff b9b3 	b.w	1750a <ull_conn_rx+0xa82>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   181a4:	4a32      	ldr	r2, [pc, #200]	; (18270 <ull_conn_rx+0x17e8>)
   181a6:	4933      	ldr	r1, [pc, #204]	; (18274 <ull_conn_rx+0x17ec>)
   181a8:	4833      	ldr	r0, [pc, #204]	; (18278 <ull_conn_rx+0x17f0>)
   181aa:	f641 4322 	movw	r3, #7202	; 0x1c22
   181ae:	f00c feaa 	bl	24f06 <printk>
   181b2:	4040      	eors	r0, r0
   181b4:	f380 8811 	msr	BASEPRI, r0
   181b8:	f04f 0003 	mov.w	r0, #3
   181bc:	df02      	svc	2
   181be:	e709      	b.n	17fd4 <ull_conn_rx+0x154c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   181c0:	2923      	cmp	r1, #35	; 0x23
   181c2:	f43f aa54 	beq.w	1766e <ull_conn_rx+0xbe6>
			conn->periph.ticks_to_offset =
   181c6:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   181ca:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
   181ce:	f7ff ba4e 	b.w	1766e <ull_conn_rx+0xbe6>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   181d2:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   181d6:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   181da:	429a      	cmp	r2, r3
   181dc:	d00e      	beq.n	181fc <ull_conn_rx+0x1774>
   181de:	4a24      	ldr	r2, [pc, #144]	; (18270 <ull_conn_rx+0x17e8>)
   181e0:	4927      	ldr	r1, [pc, #156]	; (18280 <ull_conn_rx+0x17f8>)
   181e2:	4825      	ldr	r0, [pc, #148]	; (18278 <ull_conn_rx+0x17f0>)
   181e4:	f241 43af 	movw	r3, #5295	; 0x14af
   181e8:	f00c fe8d 	bl	24f06 <printk>
   181ec:	4040      	eors	r0, r0
   181ee:	f380 8811 	msr	BASEPRI, r0
   181f2:	f04f 0003 	mov.w	r0, #3
   181f6:	df02      	svc	2
   181f8:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   181fc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   18200:	2106      	movs	r1, #6
   18202:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   18206:	3b01      	subs	r3, #1
   18208:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1820c:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   18210:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18214:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   18218:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1821a:	00db      	lsls	r3, r3, #3
   1821c:	430b      	orrs	r3, r1
   1821e:	f022 020f 	bic.w	r2, r2, #15
   18222:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   18224:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18228:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1822c:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18230:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   18234:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18236:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   1823a:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1823e:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18242:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18246:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   1824a:	f7fe bc6a 	b.w	16b22 <ull_conn_rx+0x9a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1824e:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   18252:	f011 0f06 	tst.w	r1, #6
   18256:	f43f ab05 	beq.w	17864 <ull_conn_rx+0xddc>
   1825a:	f7fe bd93 	b.w	16d84 <ull_conn_rx+0x2fc>
	    ((pdu_data_tx->llctrl.opcode !=
   1825e:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18260:	2903      	cmp	r1, #3
   18262:	f43f aee8 	beq.w	18036 <ull_conn_rx+0x15ae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18266:	290a      	cmp	r1, #10
   18268:	d198      	bne.n	1819c <ull_conn_rx+0x1714>
   1826a:	e6e4      	b.n	18036 <ull_conn_rx+0x15ae>
   1826c:	20002a50 	.word	0x20002a50
   18270:	0002c6cc 	.word	0x0002c6cc
   18274:	0002c244 	.word	0x0002c244
   18278:	0002bfdc 	.word	0x0002bfdc
   1827c:	0002c7dc 	.word	0x0002c7dc
   18280:	0002c800 	.word	0x0002c800
			     lll->interval) ||
   18284:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   18286:	4567      	cmp	r7, ip
   18288:	f47f abbf 	bne.w	17a0a <ull_conn_rx+0xf82>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1828c:	f240 47e2 	movw	r7, #1250	; 0x4e2
   18290:	fb07 f606 	mul.w	r6, r7, r6
   18294:	f242 7710 	movw	r7, #10000	; 0x2710
   18298:	fb07 6202 	mla	r2, r7, r2, r6
   1829c:	3a01      	subs	r2, #1
   1829e:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   182a2:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   182a6:	b292      	uxth	r2, r2
   182a8:	4296      	cmp	r6, r2
   182aa:	f47f abae 	bne.w	17a0a <ull_conn_rx+0xf82>
				conn->llcp_conn_param.state =
   182ae:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   182b2:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   182b6:	f042 0201 	orr.w	r2, r2, #1
   182ba:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   182be:	2201      	movs	r2, #1
   182c0:	712a      	strb	r2, [r5, #4]
   182c2:	f7ff bba9 	b.w	17a18 <ull_conn_rx+0xf90>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   182c6:	6833      	ldr	r3, [r6, #0]
   182c8:	2201      	movs	r2, #1
   182ca:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   182cc:	2328      	movs	r3, #40	; 0x28
   182ce:	e626      	b.n	17f1e <ull_conn_rx+0x1496>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   182d0:	7919      	ldrb	r1, [r3, #4]
   182d2:	f001 0103 	and.w	r1, r1, #3
   182d6:	2903      	cmp	r1, #3
   182d8:	d00e      	beq.n	182f8 <ull_conn_rx+0x1870>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   182da:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   182de:	e41f      	b.n	17b20 <ull_conn_rx+0x1098>
			conn->tx_data = conn->tx_data->next;
   182e0:	6818      	ldr	r0, [r3, #0]
   182e2:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   182e6:	2900      	cmp	r1, #0
   182e8:	f47f ac1a 	bne.w	17b20 <ull_conn_rx+0x1098>
			tx->next = conn->tx_head->next;
   182ec:	6819      	ldr	r1, [r3, #0]
   182ee:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   182f0:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   182f2:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   182f6:	e41a      	b.n	17b2e <ull_conn_rx+0x10a6>
	    ((pdu_data_tx->llctrl.opcode !=
   182f8:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   182fa:	2903      	cmp	r1, #3
   182fc:	d0f6      	beq.n	182ec <ull_conn_rx+0x1864>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   182fe:	290a      	cmp	r1, #10
   18300:	d1eb      	bne.n	182da <ull_conn_rx+0x1852>
   18302:	e7f3      	b.n	182ec <ull_conn_rx+0x1864>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18304:	6833      	ldr	r3, [r6, #0]
   18306:	2201      	movs	r2, #1
   18308:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1830a:	232a      	movs	r3, #42	; 0x2a
   1830c:	e607      	b.n	17f1e <ull_conn_rx+0x1496>
				     lll->interval) ||
   1830e:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   18312:	45b6      	cmp	lr, r6
   18314:	f47f af1c 	bne.w	18150 <ull_conn_rx+0x16c8>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18318:	f240 46e2 	movw	r6, #1250	; 0x4e2
   1831c:	fb07 f606 	mul.w	r6, r7, r6
   18320:	f242 7710 	movw	r7, #10000	; 0x2710
   18324:	fb07 6202 	mla	r2, r7, r2, r6
   18328:	3a01      	subs	r2, #1
   1832a:	fbb2 f2f6 	udiv	r2, r2, r6
				     lll->latency) ||
   1832e:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   18332:	b292      	uxth	r2, r2
   18334:	4296      	cmp	r6, r2
   18336:	f47f af0b 	bne.w	18150 <ull_conn_rx+0x16c8>
   1833a:	e7b8      	b.n	182ae <ull_conn_rx+0x1826>

0001833c <ull_conn_llcp>:
{
   1833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18340:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   18342:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   18346:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1834a:	4298      	cmp	r0, r3
{
   1834c:	460d      	mov	r5, r1
   1834e:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   18350:	f000 8093 	beq.w	1847a <ull_conn_llcp+0x13e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18354:	1a1b      	subs	r3, r3, r0
   18356:	f003 0303 	and.w	r3, r3, #3
   1835a:	2b02      	cmp	r3, #2
   1835c:	d011      	beq.n	18382 <ull_conn_llcp+0x46>
   1835e:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   18362:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18364:	f1bc 0f00 	cmp.w	ip, #0
   18368:	db6c      	blt.n	18444 <ull_conn_llcp+0x108>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   1836a:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   1836e:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   18372:	1a9b      	subs	r3, r3, r2
   18374:	b2db      	uxtb	r3, r3
   18376:	2b01      	cmp	r3, #1
   18378:	f000 80aa 	beq.w	184d0 <ull_conn_llcp+0x194>
	return 0;
   1837c:	2000      	movs	r0, #0
}
   1837e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18382:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   18386:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1838a:	429a      	cmp	r2, r3
   1838c:	d006      	beq.n	1839c <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   1838e:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   18392:	f003 0306 	and.w	r3, r3, #6
   18396:	2b04      	cmp	r3, #4
   18398:	f000 823c 	beq.w	18814 <ull_conn_llcp+0x4d8>
		switch (conn->llcp_type) {
   1839c:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   183a0:	1e7b      	subs	r3, r7, #1
   183a2:	2b05      	cmp	r3, #5
   183a4:	f200 8220 	bhi.w	187e8 <ull_conn_llcp+0x4ac>
   183a8:	e8df f013 	tbh	[pc, r3, lsl #1]
   183ac:	01bc0087 	.word	0x01bc0087
   183b0:	021e0135 	.word	0x021e0135
   183b4:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   183b8:	7903      	ldrb	r3, [r0, #4]
   183ba:	f043 0303 	orr.w	r3, r3, #3
   183be:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   183c0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   183c4:	07db      	lsls	r3, r3, #31
   183c6:	f140 8792 	bpl.w	192ee <ull_conn_llcp+0xfb2>
	    (conn->llcp_feature.features_conn &
   183ca:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   183ce:	0758      	lsls	r0, r3, #29
   183d0:	f140 878d 	bpl.w	192ee <ull_conn_llcp+0xfb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   183d4:	2311      	movs	r3, #17
   183d6:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   183da:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   183dc:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   183e0:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   183e4:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   183e8:	2300      	movs	r3, #0
   183ea:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   183ee:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   183f2:	2b00      	cmp	r3, #0
   183f4:	f000 8760 	beq.w	192b8 <ull_conn_llcp+0xf7c>
	    !conn->llcp_enc.pause_tx &&
   183f8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   183fc:	0791      	lsls	r1, r2, #30
   183fe:	f100 875b 	bmi.w	192b8 <ull_conn_llcp+0xf7c>
	    !conn->llcp_phy.pause_tx &&
   18402:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   18406:	07d2      	lsls	r2, r2, #31
   18408:	f100 8756 	bmi.w	192b8 <ull_conn_llcp+0xf7c>
		if (conn->tx_head == conn->tx_data) {
   1840c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   18410:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   18412:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   18416:	f001 8151 	beq.w	196bc <ull_conn_llcp+0x1380>
		} else if (!conn->tx_ctrl) {
   1841a:	2a00      	cmp	r2, #0
   1841c:	f001 81dd 	beq.w	197da <ull_conn_llcp+0x149e>
	tx->next = conn->tx_ctrl_last->next;
   18420:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   18424:	681a      	ldr	r2, [r3, #0]
   18426:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1842a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1842e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18432:	f8d9 3000 	ldr.w	r3, [r9]
   18436:	2b00      	cmp	r3, #0
   18438:	f000 8799 	beq.w	1936e <ull_conn_llcp+0x1032>
			conn->llcp_ack = conn->llcp_req;
   1843c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18440:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18444:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   18448:	2b00      	cmp	r3, #0
   1844a:	d08e      	beq.n	1836a <ull_conn_llcp+0x2e>
		switch (conn->periph.llcp_type) {
   1844c:	2b02      	cmp	r3, #2
   1844e:	f000 81a3 	beq.w	18798 <ull_conn_llcp+0x45c>
   18452:	2b06      	cmp	r3, #6
   18454:	f000 8087 	beq.w	18566 <ull_conn_llcp+0x22a>
   18458:	2b01      	cmp	r3, #1
   1845a:	f000 808d 	beq.w	18578 <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   1845e:	4aca      	ldr	r2, [pc, #808]	; (18788 <ull_conn_llcp+0x44c>)
   18460:	49ca      	ldr	r1, [pc, #808]	; (1878c <ull_conn_llcp+0x450>)
   18462:	48cb      	ldr	r0, [pc, #812]	; (18790 <ull_conn_llcp+0x454>)
   18464:	f240 5312 	movw	r3, #1298	; 0x512
   18468:	f00c fd4d 	bl	24f06 <printk>
   1846c:	4040      	eors	r0, r0
   1846e:	f380 8811 	msr	BASEPRI, r0
   18472:	f04f 0003 	mov.w	r0, #3
   18476:	df02      	svc	2
			break;
   18478:	e777      	b.n	1836a <ull_conn_llcp+0x2e>
   1847a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   1847e:	2a00      	cmp	r2, #0
   18480:	4694      	mov	ip, r2
   18482:	f2c0 81c1 	blt.w	18808 <ull_conn_llcp+0x4cc>
	    !conn->llcp_enc.pause_rx) {
   18486:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   1848a:	f011 0801 	ands.w	r8, r1, #1
   1848e:	f47f af69 	bne.w	18364 <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   18492:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   18496:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
   1849a:	454f      	cmp	r7, r9
   1849c:	f000 82f0 	beq.w	18a80 <ull_conn_llcp+0x744>
			conn->llcp_type = LLCP_CONN_UPD;
   184a0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   184a2:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   184a4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   184a8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   184ac:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   184b0:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   184b4:	429a      	cmp	r2, r3
   184b6:	f47f af6a 	bne.w	1838e <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   184ba:	462a      	mov	r2, r5
   184bc:	4631      	mov	r1, r6
   184be:	4620      	mov	r0, r4
   184c0:	f7e9 faca 	bl	1a58 <event_conn_upd_prep>
   184c4:	2800      	cmp	r0, #0
   184c6:	f040 819c 	bne.w	18802 <ull_conn_llcp+0x4c6>
				return -ECANCELED;
   184ca:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   184ce:	e756      	b.n	1837e <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   184d0:	48b0      	ldr	r0, [pc, #704]	; (18794 <ull_conn_llcp+0x458>)
   184d2:	f7f7 fdcb 	bl	1006c <mem_acquire>
		if (tx) {
   184d6:	2800      	cmp	r0, #0
   184d8:	d038      	beq.n	1854c <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   184da:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   184de:	3b01      	subs	r3, #1
   184e0:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   184e4:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   184e6:	2202      	movs	r2, #2
   184e8:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   184ea:	f043 0303 	orr.w	r3, r3, #3
   184ee:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   184f0:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   184f2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   184f6:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   184fa:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   184fe:	7202      	strb	r2, [r0, #8]
	if (
   18500:	b1b3      	cbz	r3, 18530 <ull_conn_llcp+0x1f4>
	    !conn->llcp_enc.pause_tx &&
   18502:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   18506:	0795      	lsls	r5, r2, #30
   18508:	d412      	bmi.n	18530 <ull_conn_llcp+0x1f4>
	    !conn->llcp_phy.pause_tx &&
   1850a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1850e:	07d2      	lsls	r2, r2, #31
   18510:	d40e      	bmi.n	18530 <ull_conn_llcp+0x1f4>
		if (conn->tx_head == conn->tx_data) {
   18512:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   18516:	4293      	cmp	r3, r2
   18518:	f000 85ae 	beq.w	19078 <ull_conn_llcp+0xd3c>
		} else if (!conn->tx_ctrl) {
   1851c:	b959      	cbnz	r1, 18536 <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1851e:	791a      	ldrb	r2, [r3, #4]
   18520:	f002 0203 	and.w	r2, r2, #3
   18524:	2a03      	cmp	r2, #3
   18526:	f000 86f4 	beq.w	19312 <ull_conn_llcp+0xfd6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1852a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1852e:	e004      	b.n	1853a <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   18530:	2900      	cmp	r1, #0
   18532:	f000 82f5 	beq.w	18b20 <ull_conn_llcp+0x7e4>
	tx->next = conn->tx_ctrl_last->next;
   18536:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1853a:	681a      	ldr	r2, [r3, #0]
   1853c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1853e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18540:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   18542:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18546:	2b00      	cmp	r3, #0
   18548:	f000 8168 	beq.w	1881c <ull_conn_llcp+0x4e0>
		if (!conn->procedure_expire) {
   1854c:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   18550:	2800      	cmp	r0, #0
   18552:	f47f af13 	bne.w	1837c <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   18556:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   1855a:	2b01      	cmp	r3, #1
   1855c:	f240 82dc 	bls.w	18b18 <ull_conn_llcp+0x7dc>
			conn->procedure_expire = conn->supervision_reload;
   18560:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   18564:	e70a      	b.n	1837c <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   18566:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   18568:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1856a:	440a      	add	r2, r1
   1856c:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1856e:	4620      	mov	r0, r4
   18570:	b291      	uxth	r1, r2
   18572:	f7fd fd1d 	bl	15fb0 <event_phy_upd_ind_prep>
		break;
   18576:	e6f8      	b.n	1836a <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   18578:	462a      	mov	r2, r5
   1857a:	4631      	mov	r1, r6
   1857c:	4620      	mov	r0, r4
   1857e:	f7e9 fa6b 	bl	1a58 <event_conn_upd_prep>
   18582:	2800      	cmp	r0, #0
   18584:	f47f aef1 	bne.w	1836a <ull_conn_llcp+0x2e>
   18588:	e79f      	b.n	184ca <ull_conn_llcp+0x18e>
			event_counter = lll->event_counter +
   1858a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1858c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1858e:	4419      	add	r1, r3
   18590:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   18592:	b289      	uxth	r1, r1
   18594:	4620      	mov	r0, r4
   18596:	f7fd fd0b 	bl	15fb0 <event_phy_upd_ind_prep>
		break;
   1859a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1859e:	e6e1      	b.n	18364 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   185a0:	487c      	ldr	r0, [pc, #496]	; (18794 <ull_conn_llcp+0x458>)
   185a2:	f7f7 fd63 	bl	1006c <mem_acquire>
	if (tx) {
   185a6:	2800      	cmp	r0, #0
   185a8:	f000 812b 	beq.w	18802 <ull_conn_llcp+0x4c6>
		conn->llcp_ack = conn->llcp_req;
   185ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   185b0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   185b4:	7903      	ldrb	r3, [r0, #4]
   185b6:	f043 0303 	orr.w	r3, r3, #3
   185ba:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   185bc:	2301      	movs	r3, #1
   185be:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   185c0:	2312      	movs	r3, #18
   185c2:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   185c4:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   185c8:	2b00      	cmp	r3, #0
   185ca:	f000 82bb 	beq.w	18b44 <ull_conn_llcp+0x808>
	    !conn->llcp_enc.pause_tx &&
   185ce:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   185d2:	078f      	lsls	r7, r1, #30
   185d4:	f100 82b6 	bmi.w	18b44 <ull_conn_llcp+0x808>
	    !conn->llcp_phy.pause_tx &&
   185d8:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   185dc:	07c9      	lsls	r1, r1, #31
   185de:	f100 82b1 	bmi.w	18b44 <ull_conn_llcp+0x808>
		if (conn->tx_head == conn->tx_data) {
   185e2:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   185e6:	428b      	cmp	r3, r1
   185e8:	f000 8673 	beq.w	192d2 <ull_conn_llcp+0xf96>
		} else if (!conn->tx_ctrl) {
   185ec:	2a00      	cmp	r2, #0
   185ee:	f000 86b4 	beq.w	1935a <ull_conn_llcp+0x101e>
	tx->next = conn->tx_ctrl_last->next;
   185f2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   185f6:	681a      	ldr	r2, [r3, #0]
   185f8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   185fa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   185fc:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   185fe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18602:	2b00      	cmp	r3, #0
   18604:	f000 8435 	beq.w	18e72 <ull_conn_llcp+0xb36>
		conn->procedure_expire = conn->procedure_reload;
   18608:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1860c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   18610:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   18614:	e6a6      	b.n	18364 <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   18616:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   1861a:	f012 0803 	ands.w	r8, r2, #3
   1861e:	f000 814b 	beq.w	188b8 <ull_conn_llcp+0x57c>
		if (lll->role &&
   18622:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18626:	2b00      	cmp	r3, #0
   18628:	f6bf ae9f 	bge.w	1836a <ull_conn_llcp+0x2e>
   1862c:	f1b8 0f01 	cmp.w	r8, #1
   18630:	f47f af08 	bne.w	18444 <ull_conn_llcp+0x108>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18634:	4857      	ldr	r0, [pc, #348]	; (18794 <ull_conn_llcp+0x458>)
   18636:	f7f7 fd19 	bl	1006c <mem_acquire>
	if (!tx) {
   1863a:	4680      	mov	r8, r0
   1863c:	2800      	cmp	r0, #0
   1863e:	f000 80e0 	beq.w	18802 <ull_conn_llcp+0x4c6>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18642:	7903      	ldrb	r3, [r0, #4]
   18644:	f043 0303 	orr.w	r3, r3, #3
   18648:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1864a:	230d      	movs	r3, #13
   1864c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1864e:	2304      	movs	r3, #4
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   18650:	eb00 0903 	add.w	r9, r0, r3
   18654:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   18658:	71c3      	strb	r3, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1865a:	210c      	movs	r1, #12
   1865c:	4638      	mov	r0, r7
   1865e:	f004 f893 	bl	1c788 <lll_csrand_isr_get>
   18662:	f8d9 3004 	ldr.w	r3, [r9, #4]
   18666:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1866a:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   1866e:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
   18672:	f8d8 3010 	ldr.w	r3, [r8, #16]
   18676:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	    conn->tx_head &&
   1867a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1867e:	2b00      	cmp	r3, #0
   18680:	f000 84ed 	beq.w	1905e <ull_conn_llcp+0xd22>
	    !conn->llcp_enc.pause_tx &&
   18684:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   18688:	0792      	lsls	r2, r2, #30
   1868a:	f100 84e8 	bmi.w	1905e <ull_conn_llcp+0xd22>
	    !conn->llcp_phy.pause_tx &&
   1868e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   18692:	07d7      	lsls	r7, r2, #31
   18694:	f100 84e3 	bmi.w	1905e <ull_conn_llcp+0xd22>
		if (conn->tx_head == conn->tx_data) {
   18698:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1869c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   186a0:	428b      	cmp	r3, r1
   186a2:	f000 8672 	beq.w	1938a <ull_conn_llcp+0x104e>
		} else if (!conn->tx_ctrl) {
   186a6:	2a00      	cmp	r2, #0
   186a8:	f000 86b1 	beq.w	1940e <ull_conn_llcp+0x10d2>
	tx->next = conn->tx_ctrl_last->next;
   186ac:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   186b0:	681a      	ldr	r2, [r3, #0]
   186b2:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   186b6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   186ba:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   186be:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   186c2:	2b00      	cmp	r3, #0
   186c4:	f000 85d4 	beq.w	19270 <ull_conn_llcp+0xf34>
			rx = ll_pdu_rx_alloc();
   186c8:	f7fb fc9a 	bl	14000 <ll_pdu_rx_alloc>
			if (!rx) {
   186cc:	4601      	mov	r1, r0
   186ce:	2800      	cmp	r0, #0
   186d0:	f000 8097 	beq.w	18802 <ull_conn_llcp+0x4c6>
			rx->hdr.handle = conn->lll.handle;
   186d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   186d6:	80cb      	strh	r3, [r1, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   186d8:	2303      	movs	r3, #3
   186da:	710b      	strb	r3, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   186dc:	77cb      	strb	r3, [r1, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   186de:	7f0b      	ldrb	r3, [r1, #28]
			ll_rx_put(rx->hdr.link, rx);
   186e0:	6808      	ldr	r0, [r1, #0]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   186e2:	f043 0303 	orr.w	r3, r3, #3
   186e6:	770b      	strb	r3, [r1, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   186e8:	2317      	movs	r3, #23
   186ea:	774b      	strb	r3, [r1, #29]
   186ec:	f8d4 216d 	ldr.w	r2, [r4, #365]	; 0x16d
   186f0:	f8d4 3169 	ldr.w	r3, [r4, #361]	; 0x169
   186f4:	620b      	str	r3, [r1, #32]
   186f6:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   186f8:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   186fc:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   18700:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   18704:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   18708:	f7fb fc4c 	bl	13fa4 <ll_rx_put>
			ll_rx_sched();
   1870c:	f7fb fc54 	bl	13fb8 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   18710:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   18714:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   18718:	2202      	movs	r2, #2
   1871a:	f362 0301 	bfi	r3, r2, #0, #2
   1871e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   18722:	e61f      	b.n	18364 <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   18724:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   18726:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   18728:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   1872a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   1872e:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   18730:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   18734:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   18736:	d174      	bne.n	18822 <ull_conn_llcp+0x4e6>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   18738:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1873c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   18740:	1afb      	subs	r3, r7, r3
   18742:	0419      	lsls	r1, r3, #16
   18744:	f53f ae0e 	bmi.w	18364 <ull_conn_llcp+0x28>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18748:	f1bc 0f00 	cmp.w	ip, #0
   1874c:	f2c0 8389 	blt.w	18e62 <ull_conn_llcp+0xb26>
			conn->llcp_ack = conn->llcp_req;
   18750:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18754:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   18758:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   1875c:	6363      	str	r3, [r4, #52]	; 0x34
		memcpy(&lll->data_chan_map[0],
   1875e:	f104 0034 	add.w	r0, r4, #52	; 0x34
   18762:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   18766:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   18768:	2105      	movs	r1, #5
   1876a:	f7f7 fe51 	bl	10410 <util_ones_count_get>
		lll->data_chan_count =
   1876e:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   18772:	2301      	movs	r3, #1
		lll->data_chan_count =
   18774:	f360 0c05 	bfi	ip, r0, #0, #6
   18778:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1877c:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   18780:	fa4f fc8c 	sxtb.w	ip, ip
   18784:	e5ee      	b.n	18364 <ull_conn_llcp+0x28>
   18786:	bf00      	nop
   18788:	0002c6cc 	.word	0x0002c6cc
   1878c:	0002c074 	.word	0x0002c074
   18790:	0002bfdc 	.word	0x0002bfdc
   18794:	20002ae4 	.word	0x20002ae4
			event_counter = lll->event_counter +
   18798:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1879a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   1879c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   187a0:	440a      	add	r2, r1
   187a2:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   187a4:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   187a8:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   187aa:	f040 811f 	bne.w	189ec <ull_conn_llcp+0x6b0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   187ae:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   187b2:	1ab6      	subs	r6, r6, r2
   187b4:	0436      	lsls	r6, r6, #16
   187b6:	f53f add8 	bmi.w	1836a <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   187ba:	f104 0034 	add.w	r0, r4, #52	; 0x34
   187be:	f8d4 10e9 	ldr.w	r1, [r4, #233]	; 0xe9
   187c2:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
			conn->periph.llcp_type = LLCP_NONE;
   187c6:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   187ca:	6361      	str	r1, [r4, #52]	; 0x34
   187cc:	7102      	strb	r2, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   187ce:	2105      	movs	r1, #5
   187d0:	f7f7 fe1e 	bl	10410 <util_ones_count_get>
		lll->data_chan_count =
   187d4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   187d8:	2201      	movs	r2, #1
		lll->data_chan_count =
   187da:	f360 0305 	bfi	r3, r0, #0, #6
   187de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   187e2:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   187e6:	e5c0      	b.n	1836a <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   187e8:	4ad2      	ldr	r2, [pc, #840]	; (18b34 <ull_conn_llcp+0x7f8>)
   187ea:	49d3      	ldr	r1, [pc, #844]	; (18b38 <ull_conn_llcp+0x7fc>)
   187ec:	48d3      	ldr	r0, [pc, #844]	; (18b3c <ull_conn_llcp+0x800>)
   187ee:	f240 43e1 	movw	r3, #1249	; 0x4e1
   187f2:	f00c fb88 	bl	24f06 <printk>
   187f6:	4040      	eors	r0, r0
   187f8:	f380 8811 	msr	BASEPRI, r0
   187fc:	f04f 0003 	mov.w	r0, #3
   18800:	df02      	svc	2
			break;
   18802:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   18806:	e5ad      	b.n	18364 <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   18808:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1880c:	2900      	cmp	r1, #0
   1880e:	f47f ada9 	bne.w	18364 <ull_conn_llcp+0x28>
   18812:	e638      	b.n	18486 <ull_conn_llcp+0x14a>
				event_len_prep(conn);
   18814:	4620      	mov	r0, r4
   18816:	f7fd fad5 	bl	15dc4 <event_len_prep>
   1881a:	e5bf      	b.n	1839c <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   1881c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   18820:	e694      	b.n	1854c <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18822:	48c7      	ldr	r0, [pc, #796]	; (18b40 <ull_conn_llcp+0x804>)
   18824:	f7f7 fc22 	bl	1006c <mem_acquire>
		if (tx) {
   18828:	2800      	cmp	r0, #0
   1882a:	d0ea      	beq.n	18802 <ull_conn_llcp+0x4c6>
						      conn->lll.latency + 6;
   1882c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1882e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   18832:	3306      	adds	r3, #6
   18834:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   18836:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1883a:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   1883c:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18840:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   18844:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18848:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1884a:	2308      	movs	r3, #8
   1884c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1884e:	2301      	movs	r3, #1
   18850:	71c3      	strb	r3, [r0, #7]
   18852:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   18856:	6083      	str	r3, [r0, #8]
   18858:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   1885c:	7303      	strb	r3, [r0, #12]
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1885e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   18862:	f8a0 300d 	strh.w	r3, [r0, #13]
	    conn->tx_head &&
   18866:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1886a:	2b00      	cmp	r3, #0
   1886c:	f000 82e3 	beq.w	18e36 <ull_conn_llcp+0xafa>
	    !conn->llcp_enc.pause_tx &&
   18870:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   18874:	0792      	lsls	r2, r2, #30
   18876:	f100 82de 	bmi.w	18e36 <ull_conn_llcp+0xafa>
	    !conn->llcp_phy.pause_tx &&
   1887a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1887e:	07d7      	lsls	r7, r2, #31
   18880:	f100 82d9 	bmi.w	18e36 <ull_conn_llcp+0xafa>
		if (conn->tx_head == conn->tx_data) {
   18884:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18888:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1888c:	428b      	cmp	r3, r1
   1888e:	f000 8548 	beq.w	19322 <ull_conn_llcp+0xfe6>
		} else if (!conn->tx_ctrl) {
   18892:	2a00      	cmp	r2, #0
   18894:	f000 85b1 	beq.w	193fa <ull_conn_llcp+0x10be>
	tx->next = conn->tx_ctrl_last->next;
   18898:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1889c:	681a      	ldr	r2, [r3, #0]
   1889e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   188a0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   188a2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   188a4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   188a8:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   188ac:	2b00      	cmp	r3, #0
   188ae:	f47f ad59 	bne.w	18364 <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   188b2:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   188b6:	e555      	b.n	18364 <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   188b8:	48a1      	ldr	r0, [pc, #644]	; (18b40 <ull_conn_llcp+0x804>)
   188ba:	f7f7 fbd7 	bl	1006c <mem_acquire>
	if (!tx) {
   188be:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   188c2:	4681      	mov	r9, r0
   188c4:	2800      	cmp	r0, #0
   188c6:	f43f ad4d 	beq.w	18364 <ull_conn_llcp+0x28>
	if (!lll->role) {
   188ca:	f1bc 0f00 	cmp.w	ip, #0
   188ce:	f280 833f 	bge.w	18f50 <ull_conn_llcp+0xc14>
	else if (!lll->enc_rx) {
   188d2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   188d6:	071a      	lsls	r2, r3, #28
   188d8:	f100 8447 	bmi.w	1916a <ull_conn_llcp+0xe2e>
		if (conn->llcp.encryption.error_code) {
   188dc:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   188e0:	f1b8 0f00 	cmp.w	r8, #0
   188e4:	f47f ad68 	bne.w	183b8 <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   188e8:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   188ec:	463b      	mov	r3, r7
   188ee:	4642      	mov	r2, r8
   188f0:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   188f4:	f204 1071 	addw	r0, r4, #369	; 0x171
   188f8:	f006 fa80 	bl	1edfc <ecb_encrypt>
			lll->ccm_rx.direction = 1U;
   188fc:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
   18900:	f8d4 2083 	ldr.w	r2, [r4, #131]	; 0x83
   18904:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
   18908:	f043 0301 	orr.w	r3, r3, #1
   1890c:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   18910:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18914:	f8d4 207b 	ldr.w	r2, [r4, #123]	; 0x7b
   18918:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
   1891c:	f368 0300 	bfi	r3, r8, #0, #1
   18920:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   18924:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   18928:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1892c:	f8c4 20b5 	str.w	r2, [r4, #181]	; 0xb5
   18930:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   18934:	f8d4 0087 	ldr.w	r0, [r4, #135]	; 0x87
   18938:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   1893c:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
   18940:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   18944:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   18948:	f043 0308 	orr.w	r3, r3, #8
   1894c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18950:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   18954:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18958:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   1895c:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   18960:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   18964:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   18968:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   1896c:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   18970:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   18974:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   18978:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1897c:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   18980:	2301      	movs	r3, #1
   18982:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   18986:	2305      	movs	r3, #5
   18988:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   1898c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   18990:	2b00      	cmp	r3, #0
   18992:	f000 8398 	beq.w	190c6 <ull_conn_llcp+0xd8a>
	    !conn->llcp_enc.pause_tx &&
   18996:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1899a:	0797      	lsls	r7, r2, #30
   1899c:	f100 8393 	bmi.w	190c6 <ull_conn_llcp+0xd8a>
	    !conn->llcp_phy.pause_tx &&
   189a0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   189a4:	07d0      	lsls	r0, r2, #31
   189a6:	f100 838e 	bmi.w	190c6 <ull_conn_llcp+0xd8a>
		if (conn->tx_head == conn->tx_data) {
   189aa:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   189ae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   189b2:	428b      	cmp	r3, r1
   189b4:	f000 853c 	beq.w	19430 <ull_conn_llcp+0x10f4>
		} else if (!conn->tx_ctrl) {
   189b8:	2a00      	cmp	r2, #0
   189ba:	f000 866d 	beq.w	19698 <ull_conn_llcp+0x135c>
	tx->next = conn->tx_ctrl_last->next;
   189be:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   189c2:	681a      	ldr	r2, [r3, #0]
   189c4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   189c8:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   189cc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   189d0:	f8d9 3000 	ldr.w	r3, [r9]
   189d4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   189d8:	2b00      	cmp	r3, #0
   189da:	f000 8333 	beq.w	19044 <ull_conn_llcp+0xd08>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   189de:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   189e2:	f043 0303 	orr.w	r3, r3, #3
   189e6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   189ea:	e4bb      	b.n	18364 <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   189ec:	4854      	ldr	r0, [pc, #336]	; (18b40 <ull_conn_llcp+0x804>)
   189ee:	f7f7 fb3d 	bl	1006c <mem_acquire>
		if (tx) {
   189f2:	2800      	cmp	r0, #0
   189f4:	f43f acb9 	beq.w	1836a <ull_conn_llcp+0x2e>
						      conn->lll.latency + 6;
   189f8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   189fa:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   189fe:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   18a00:	3206      	adds	r2, #6
   18a02:	4432      	add	r2, r6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a04:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   18a08:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   18a0c:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   18a10:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   18a14:	2208      	movs	r2, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18a16:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   18a18:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   18a1a:	7142      	strb	r2, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   18a1c:	71c3      	strb	r3, [r0, #7]
   18a1e:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   18a22:	6083      	str	r3, [r0, #8]
   18a24:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   18a28:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   18a2a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   18a2e:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   18a32:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   18a36:	2b00      	cmp	r3, #0
   18a38:	f000 8208 	beq.w	18e4c <ull_conn_llcp+0xb10>
	    !conn->llcp_enc.pause_tx &&
   18a3c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   18a40:	0792      	lsls	r2, r2, #30
   18a42:	f100 8203 	bmi.w	18e4c <ull_conn_llcp+0xb10>
	    !conn->llcp_phy.pause_tx &&
   18a46:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   18a4a:	07d7      	lsls	r7, r2, #31
   18a4c:	f100 81fe 	bmi.w	18e4c <ull_conn_llcp+0xb10>
		if (conn->tx_head == conn->tx_data) {
   18a50:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18a54:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   18a58:	428b      	cmp	r3, r1
   18a5a:	f000 8470 	beq.w	1933e <ull_conn_llcp+0x1002>
		} else if (!conn->tx_ctrl) {
   18a5e:	2a00      	cmp	r2, #0
   18a60:	f000 84c1 	beq.w	193e6 <ull_conn_llcp+0x10aa>
	tx->next = conn->tx_ctrl_last->next;
   18a64:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   18a68:	681a      	ldr	r2, [r3, #0]
   18a6a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18a6c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18a6e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   18a70:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18a74:	2b00      	cmp	r3, #0
   18a76:	f47f ac78 	bne.w	1836a <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   18a7a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   18a7e:	e474      	b.n	1836a <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   18a80:	f894 7121 	ldrb.w	r7, [r4, #289]	; 0x121
   18a84:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   18a88:	4577      	cmp	r7, lr
   18a8a:	d064      	beq.n	18b56 <ull_conn_llcp+0x81a>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   18a8c:	eba7 070e 	sub.w	r7, r7, lr
   18a90:	07f9      	lsls	r1, r7, #31
   18a92:	f57f ac67 	bpl.w	18364 <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   18a96:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   18a9a:	f013 0701 	ands.w	r7, r3, #1
   18a9e:	f000 81ec 	beq.w	18e7a <ull_conn_llcp+0xb3e>
		rx = ll_pdu_rx_alloc();
   18aa2:	f7fb faad 	bl	14000 <ll_pdu_rx_alloc>
		if (!rx) {
   18aa6:	4601      	mov	r1, r0
   18aa8:	b388      	cbz	r0, 18b0e <ull_conn_llcp+0x7d2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   18aaa:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   18aae:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18ab2:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   18ab4:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   18ab6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
__ssp_bos_icheck3(memset, void *, int)
   18ab8:	f8c1 8020 	str.w	r8, [r1, #32]
   18abc:	f8c1 8024 	str.w	r8, [r1, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18ac0:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   18ac2:	774b      	strb	r3, [r1, #29]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18ac4:	7f08      	ldrb	r0, [r1, #28]
		rx->hdr.handle = conn->lll.handle;
   18ac6:	80ca      	strh	r2, [r1, #6]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   18ac8:	77cb      	strb	r3, [r1, #31]
		sys_put_le64(conn->llcp_feature.features_peer,
   18aca:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18ace:	f040 0003 	orr.w	r0, r0, #3
	dst[0] = val;
   18ad2:	f881 2020 	strb.w	r2, [r1, #32]
   18ad6:	7708      	strb	r0, [r1, #28]
	sys_put_le16(val >> 16, &dst[2]);
   18ad8:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   18ada:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18ade:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   18ae2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   18ae4:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   18ae8:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
	dst[1] = val >> 8;
   18aec:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18af0:	0a00      	lsrs	r0, r0, #8
	dst[0] = val;
   18af2:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
	dst[1] = val >> 8;
   18af6:	0a12      	lsrs	r2, r2, #8
   18af8:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
   18afc:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
   18b00:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	ll_rx_put(rx->hdr.link, rx);
   18b04:	6808      	ldr	r0, [r1, #0]
   18b06:	f7fb fa4d 	bl	13fa4 <ll_rx_put>
	ll_rx_sched();
   18b0a:	f7fb fa55 	bl	13fb8 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18b0e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18b12:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   18b16:	e41d      	b.n	18354 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   18b18:	3301      	adds	r3, #1
   18b1a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   18b1e:	e42e      	b.n	1837e <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   18b20:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18b22:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18b26:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18b2a:	2b00      	cmp	r3, #0
   18b2c:	f47f ad0e 	bne.w	1854c <ull_conn_llcp+0x210>
   18b30:	e674      	b.n	1881c <ull_conn_llcp+0x4e0>
   18b32:	bf00      	nop
   18b34:	0002c6cc 	.word	0x0002c6cc
   18b38:	0002c074 	.word	0x0002c074
   18b3c:	0002bfdc 	.word	0x0002bfdc
   18b40:	20002ae4 	.word	0x20002ae4
		if (!conn->tx_ctrl) {
   18b44:	2a00      	cmp	r2, #0
   18b46:	f47f ad54 	bne.w	185f2 <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head;
   18b4a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18b4c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18b50:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18b54:	e555      	b.n	18602 <ull_conn_llcp+0x2c6>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   18b56:	f894 7139 	ldrb.w	r7, [r4, #313]	; 0x139
   18b5a:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   18b5e:	4577      	cmp	r7, lr
   18b60:	d038      	beq.n	18bd4 <ull_conn_llcp+0x898>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   18b62:	eba7 070e 	sub.w	r7, r7, lr
   18b66:	07f9      	lsls	r1, r7, #31
   18b68:	f57f abfc 	bpl.w	18364 <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   18b6c:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   18b70:	07da      	lsls	r2, r3, #31
   18b72:	f140 8330 	bpl.w	191d6 <ull_conn_llcp+0xe9a>
	} else if (conn->llcp_version.rx) {
   18b76:	079a      	lsls	r2, r3, #30
   18b78:	f140 8328 	bpl.w	191cc <ull_conn_llcp+0xe90>
		rx = ll_pdu_rx_alloc();
   18b7c:	f7fb fa40 	bl	14000 <ll_pdu_rx_alloc>
		if (!rx) {
   18b80:	4601      	mov	r1, r0
   18b82:	2800      	cmp	r0, #0
   18b84:	d0c3      	beq.n	18b0e <ull_conn_llcp+0x7d2>
		conn->llcp_version.ack = conn->llcp_version.req;
   18b86:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   18b8a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   18b8e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   18b90:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18b92:	2303      	movs	r3, #3
   18b94:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18b96:	7f03      	ldrb	r3, [r0, #28]
   18b98:	f043 0303 	orr.w	r3, r3, #3
   18b9c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   18b9e:	2306      	movs	r3, #6
   18ba0:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   18ba2:	230c      	movs	r3, #12
   18ba4:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   18ba6:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   18baa:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   18bae:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   18bb2:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   18bb6:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   18bba:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   18bbe:	6800      	ldr	r0, [r0, #0]
   18bc0:	f7fb f9f0 	bl	13fa4 <ll_rx_put>
		ll_rx_sched();
   18bc4:	f7fb f9f8 	bl	13fb8 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18bc8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18bcc:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   18bd0:	f7ff bbc0 	b.w	18354 <ull_conn_llcp+0x18>
		} else if (conn->llcp_conn_param.ack !=
   18bd4:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   18bd8:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   18bdc:	45be      	cmp	lr, r7
   18bde:	f000 8234 	beq.w	1904a <ull_conn_llcp+0xd0e>
	return conn_upd_curr && (conn_upd_curr != conn);
   18be2:	4fd5      	ldr	r7, [pc, #852]	; (18f38 <ull_conn_llcp+0xbfc>)
   18be4:	f8d7 e000 	ldr.w	lr, [r7]
   18be8:	f1be 0f00 	cmp.w	lr, #0
   18bec:	f000 8347 	beq.w	1927e <ull_conn_llcp+0xf42>
   18bf0:	4574      	cmp	r4, lr
   18bf2:	f47f abb7 	bne.w	18364 <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   18bf6:	f894 e186 	ldrb.w	lr, [r4, #390]	; 0x186
   18bfa:	f00e 0e0f 	and.w	lr, lr, #15
   18bfe:	f1be 0f08 	cmp.w	lr, #8
   18c02:	f200 864f 	bhi.w	198a4 <ull_conn_llcp+0x1568>
   18c06:	f20f 0808 	addw	r8, pc, #8
   18c0a:	f858 f02e 	ldr.w	pc, [r8, lr, lsl #2]
   18c0e:	bf00      	nop
   18c10:	00018ced 	.word	0x00018ced
   18c14:	00018db1 	.word	0x00018db1
   18c18:	00018c9d 	.word	0x00018c9d
   18c1c:	00018355 	.word	0x00018355
   18c20:	00018355 	.word	0x00018355
   18c24:	00018355 	.word	0x00018355
   18c28:	00018355 	.word	0x00018355
   18c2c:	00018355 	.word	0x00018355
   18c30:	00018c35 	.word	0x00018c35
			event_counter = lll->event_counter +
   18c34:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   18c36:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   18c38:	f8d4 71a0 	ldr.w	r7, [r4, #416]	; 0x1a0
			event_counter = lll->event_counter +
   18c3c:	4413      	add	r3, r2
   18c3e:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   18c40:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   18c44:	f827 3c02 	strh.w	r3, [r7, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   18c48:	2304      	movs	r3, #4
   18c4a:	f363 0203 	bfi	r2, r3, #0, #4
   18c4e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		if (!conn->tx_ctrl) {
   18c52:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   18c56:	f1a7 0013 	sub.w	r0, r7, #19
	if (
   18c5a:	2b00      	cmp	r3, #0
   18c5c:	f000 838b 	beq.w	19376 <ull_conn_llcp+0x103a>
	    conn->tx_head &&
   18c60:	0789      	lsls	r1, r1, #30
   18c62:	f100 8388 	bmi.w	19376 <ull_conn_llcp+0x103a>
	    !conn->llcp_phy.pause_tx &&
   18c66:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   18c6a:	07c9      	lsls	r1, r1, #31
   18c6c:	f100 8383 	bmi.w	19376 <ull_conn_llcp+0x103a>
		if (conn->tx_head == conn->tx_data) {
   18c70:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   18c74:	428b      	cmp	r3, r1
   18c76:	f000 85f0 	beq.w	1985a <ull_conn_llcp+0x151e>
		} else if (!conn->tx_ctrl) {
   18c7a:	2a00      	cmp	r2, #0
   18c7c:	f000 8574 	beq.w	19768 <ull_conn_llcp+0x142c>
	tx->next = conn->tx_ctrl_last->next;
   18c80:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   18c84:	681a      	ldr	r2, [r3, #0]
   18c86:	f847 2c13 	str.w	r2, [r7, #-19]
	conn->tx_ctrl_last->next = tx;
   18c8a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18c8c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18c90:	f857 3c13 	ldr.w	r3, [r7, #-19]
   18c94:	2b00      	cmp	r3, #0
   18c96:	f47f ab65 	bne.w	18364 <ull_conn_llcp+0x28>
   18c9a:	e60a      	b.n	188b2 <ull_conn_llcp+0x576>
	if (conn->llcp_enc.pause_tx) {
   18c9c:	0788      	lsls	r0, r1, #30
   18c9e:	f53f ab61 	bmi.w	18364 <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   18ca2:	f7fb f9ad 	bl	14000 <ll_pdu_rx_alloc>
	if (!rx) {
   18ca6:	4601      	mov	r1, r0
   18ca8:	2800      	cmp	r0, #0
   18caa:	f43f af30 	beq.w	18b0e <ull_conn_llcp+0x7d2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   18cae:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18cb2:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   18cb4:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18cb6:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   18cba:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   18cbe:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   18cc0:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   18cc4:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18cc6:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18cc8:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   18cca:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   18ccc:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   18cd0:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   18cd2:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   18cd6:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   18cd8:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   18cdc:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   18cde:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   18ce2:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18ce4:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   18ce6:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18ce8:	77cb      	strb	r3, [r1, #31]
   18cea:	e70b      	b.n	18b04 <ull_conn_llcp+0x7c8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18cec:	4893      	ldr	r0, [pc, #588]	; (18f3c <ull_conn_llcp+0xc00>)
   18cee:	f7f7 f9bd 	bl	1006c <mem_acquire>
	if (!tx) {
   18cf2:	4602      	mov	r2, r0
   18cf4:	2800      	cmp	r0, #0
   18cf6:	f43f af0a 	beq.w	18b0e <ull_conn_llcp+0x7d2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18cfa:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   18cfc:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18cfe:	f043 0303 	orr.w	r3, r3, #3
   18d02:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   18d04:	2318      	movs	r3, #24
   18d06:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18d08:	230f      	movs	r3, #15
   18d0a:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   18d0c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   18d10:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   18d12:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   18d16:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   18d18:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   18d1c:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   18d1e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   18d22:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   18d24:	2300      	movs	r3, #0
   18d26:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   18d28:	74c3      	strb	r3, [r0, #19]
   18d2a:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   18d2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18d30:	7543      	strb	r3, [r0, #21]
   18d32:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   18d34:	75c3      	strb	r3, [r0, #23]
   18d36:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   18d38:	7643      	strb	r3, [r0, #25]
   18d3a:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   18d3c:	76c3      	strb	r3, [r0, #27]
   18d3e:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   18d40:	7743      	strb	r3, [r0, #29]
   18d42:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   18d44:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   18d48:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   18d4c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   18d50:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   18d54:	2107      	movs	r1, #7
   18d56:	f361 0303 	bfi	r3, r1, #0, #4
   18d5a:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   18d5e:	68a3      	ldr	r3, [r4, #8]
   18d60:	2b00      	cmp	r3, #0
   18d62:	da0a      	bge.n	18d7a <ull_conn_llcp+0xa3e>
			uint32_t ticks_prepare_to_start =
   18d64:	68e7      	ldr	r7, [r4, #12]
   18d66:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   18d68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   18d6c:	4287      	cmp	r7, r0
   18d6e:	bf2c      	ite	cs
   18d70:	19e9      	addcs	r1, r5, r7
   18d72:	1829      	addcc	r1, r5, r0
   18d74:	1acb      	subs	r3, r1, r3
   18d76:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
		win_offs = &p->offset0;
   18d7a:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   18d7c:	4b70      	ldr	r3, [pc, #448]	; (18f40 <ull_conn_llcp+0xc04>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   18d7e:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18d82:	2201      	movs	r2, #1
   18d84:	2102      	movs	r1, #2
   18d86:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   18d88:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   18d8a:	f7f7 fa43 	bl	10214 <mayfly_enqueue>
		LL_ASSERT(!retval);
   18d8e:	2800      	cmp	r0, #0
   18d90:	f43f aebd 	beq.w	18b0e <ull_conn_llcp+0x7d2>
   18d94:	4a6b      	ldr	r2, [pc, #428]	; (18f44 <ull_conn_llcp+0xc08>)
   18d96:	496c      	ldr	r1, [pc, #432]	; (18f48 <ull_conn_llcp+0xc0c>)
   18d98:	f640 63f6 	movw	r3, #3830	; 0xef6
   18d9c:	486b      	ldr	r0, [pc, #428]	; (18f4c <ull_conn_llcp+0xc10>)
   18d9e:	f00c f8b2 	bl	24f06 <printk>
   18da2:	4040      	eors	r0, r0
   18da4:	f380 8811 	msr	BASEPRI, r0
   18da8:	f04f 0003 	mov.w	r0, #3
   18dac:	df02      	svc	2
   18dae:	e6ae      	b.n	18b0e <ull_conn_llcp+0x7d2>
	if (conn->llcp_conn_param.status) {
   18db0:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   18db4:	2b00      	cmp	r3, #0
   18db6:	f040 8358 	bne.w	1946a <ull_conn_llcp+0x112e>
	if (!conn->lll.role) {
   18dba:	2a00      	cmp	r2, #0
   18dbc:	f2c0 83f3 	blt.w	195a6 <ull_conn_llcp+0x126a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18dc0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   18dc4:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18dc8:	2106      	movs	r1, #6
   18dca:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   18dce:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18dd2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   18dd6:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   18dd8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   18ddc:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   18de0:	2900      	cmp	r1, #0
   18de2:	f000 83dd 	beq.w	195a0 <ull_conn_llcp+0x1264>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   18de6:	fbb2 f3f1 	udiv	r3, r2, r1
   18dea:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   18dee:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   18df2:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   18df4:	4299      	cmp	r1, r3
   18df6:	bf98      	it	ls
   18df8:	461a      	movls	r2, r3
   18dfa:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   18dfe:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   18e02:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18e06:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   18e0a:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   18e0e:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   18e12:	00db      	lsls	r3, r3, #3
   18e14:	f022 020f 	bic.w	r2, r2, #15
   18e18:	f043 0302 	orr.w	r3, r3, #2
   18e1c:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   18e1e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18e22:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   18e26:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   18e2a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   18e2e:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18e32:	f7ff ba9a 	b.w	1836a <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
   18e36:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   18e3a:	2a00      	cmp	r2, #0
   18e3c:	f47f ad2c 	bne.w	18898 <ull_conn_llcp+0x55c>
			tx->next = conn->tx_head;
   18e40:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18e42:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18e46:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18e4a:	e52d      	b.n	188a8 <ull_conn_llcp+0x56c>
		if (!conn->tx_ctrl) {
   18e4c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   18e50:	2a00      	cmp	r2, #0
   18e52:	f47f ae07 	bne.w	18a64 <ull_conn_llcp+0x728>
			tx->next = conn->tx_head;
   18e56:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18e58:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18e5c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18e60:	e608      	b.n	18a74 <ull_conn_llcp+0x738>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18e62:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   18e66:	2b00      	cmp	r3, #0
   18e68:	f43f ac72 	beq.w	18750 <ull_conn_llcp+0x414>
			conn->periph.llcp_type = LLCP_NONE;
   18e6c:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   18e70:	e472      	b.n	18758 <ull_conn_llcp+0x41c>
		conn->tx_data_last = tx;
   18e72:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   18e76:	f7ff bbc7 	b.w	18608 <ull_conn_llcp+0x2cc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18e7a:	4830      	ldr	r0, [pc, #192]	; (18f3c <ull_conn_llcp+0xc00>)
   18e7c:	f7f7 f8f6 	bl	1006c <mem_acquire>
	if (tx) {
   18e80:	2800      	cmp	r0, #0
   18e82:	f43f ae44 	beq.w	18b0e <ull_conn_llcp+0x7d2>
		conn->llcp_feature.ack--;
   18e86:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   18e8a:	3b01      	subs	r3, #1
   18e8c:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   18e90:	2309      	movs	r3, #9
   18e92:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   18e94:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18e98:	6087      	str	r7, [r0, #8]
   18e9a:	60c7      	str	r7, [r0, #12]
   18e9c:	2b00      	cmp	r3, #0
		sys_put_le64(conn->llcp_feature.features_conn,
   18e9e:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   18ea2:	ea4f 4112 	mov.w	r1, r2, lsr #16
	dst[0] = val;
   18ea6:	7202      	strb	r2, [r0, #8]
	dst[1] = val >> 8;
   18ea8:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18eac:	7242      	strb	r2, [r0, #9]
	sys_put_le16(val >> 16, &dst[2]);
   18eae:	ea4f 4213 	mov.w	r2, r3, lsr #16
	dst[0] = val;
   18eb2:	7382      	strb	r2, [r0, #14]
	dst[1] = val >> 8;
   18eb4:	ea4f 2212 	mov.w	r2, r2, lsr #8
	dst[0] = val;
   18eb8:	7303      	strb	r3, [r0, #12]
   18eba:	7281      	strb	r1, [r0, #10]
	dst[1] = val >> 8;
   18ebc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18ec0:	73c2      	strb	r2, [r0, #15]
   18ec2:	ea4f 2111 	mov.w	r1, r1, lsr #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18ec6:	7902      	ldrb	r2, [r0, #4]
   18ec8:	72c1      	strb	r1, [r0, #11]
   18eca:	7343      	strb	r3, [r0, #13]
   18ecc:	f042 0203 	orr.w	r2, r2, #3
	    conn->tx_head &&
   18ed0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18ed4:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
   18ed6:	bfac      	ite	ge
   18ed8:	2208      	movge	r2, #8
   18eda:	220e      	movlt	r2, #14
   18edc:	71c2      	strb	r2, [r0, #7]
	if (
   18ede:	2b00      	cmp	r3, #0
   18ee0:	f000 80e6 	beq.w	190b0 <ull_conn_llcp+0xd74>
	    !conn->llcp_enc.pause_tx &&
   18ee4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   18ee8:	0792      	lsls	r2, r2, #30
   18eea:	f100 80e1 	bmi.w	190b0 <ull_conn_llcp+0xd74>
	    !conn->llcp_phy.pause_tx &&
   18eee:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   18ef2:	07d7      	lsls	r7, r2, #31
   18ef4:	f100 80dc 	bmi.w	190b0 <ull_conn_llcp+0xd74>
		if (conn->tx_head == conn->tx_data) {
   18ef8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18efc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   18f00:	428b      	cmp	r3, r1
   18f02:	f000 8263 	beq.w	193cc <ull_conn_llcp+0x1090>
		} else if (!conn->tx_ctrl) {
   18f06:	2a00      	cmp	r2, #0
   18f08:	f000 83b5 	beq.w	19676 <ull_conn_llcp+0x133a>
	tx->next = conn->tx_ctrl_last->next;
   18f0c:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   18f10:	681a      	ldr	r2, [r3, #0]
   18f12:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18f14:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18f16:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   18f18:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	f000 81ab 	beq.w	19278 <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   18f22:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18f26:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18f2a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   18f2e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   18f32:	f7ff ba0f 	b.w	18354 <ull_conn_llcp+0x18>
   18f36:	bf00      	nop
   18f38:	20002a50 	.word	0x20002a50
   18f3c:	20002ae4 	.word	0x20002ae4
   18f40:	20000618 	.word	0x20000618
   18f44:	0002c6cc 	.word	0x0002c6cc
   18f48:	0002c47c 	.word	0x0002c47c
   18f4c:	0002bfdc 	.word	0x0002bfdc
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   18f50:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   18f54:	463b      	mov	r3, r7
   18f56:	4642      	mov	r2, r8
   18f58:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   18f5c:	f204 1071 	addw	r0, r4, #369	; 0x171
   18f60:	f005 ff4c 	bl	1edfc <ecb_encrypt>
		lll->enc_rx = 1;
   18f64:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18f68:	f8d4 2083 	ldr.w	r2, [r4, #131]	; 0x83
   18f6c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
   18f70:	f023 0318 	bic.w	r3, r3, #24
   18f74:	f043 0318 	orr.w	r3, r3, #24
   18f78:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   18f7c:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
   18f80:	f8d4 207b 	ldr.w	r2, [r4, #123]	; 0x7b
   18f84:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
   18f88:	f368 0300 	bfi	r3, r8, #0, #1
   18f8c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   18f90:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   18f94:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   18f98:	f8c4 20b5 	str.w	r2, [r4, #181]	; 0xb5
   18f9c:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   18fa0:	f8d4 0087 	ldr.w	r0, [r4, #135]	; 0x87
   18fa4:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   18fa8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
   18fac:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   18fb0:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   18fb4:	f043 0301 	orr.w	r3, r3, #1
   18fb8:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fbc:	f899 3004 	ldrb.w	r3, [r9, #4]
		lll->ccm_rx.counter = 0;
   18fc0:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fc4:	f043 0303 	orr.w	r3, r3, #3
		lll->ccm_tx.counter = 0;
   18fc8:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   18fcc:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   18fd0:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   18fd4:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   18fd8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   18fdc:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   18fe0:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   18fe4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18fe8:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18fec:	2301      	movs	r3, #1
   18fee:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18ff2:	2306      	movs	r3, #6
   18ff4:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   18ff8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   18ffc:	2b00      	cmp	r3, #0
   18ffe:	d04c      	beq.n	1909a <ull_conn_llcp+0xd5e>
	    !conn->llcp_enc.pause_tx &&
   19000:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19004:	0790      	lsls	r0, r2, #30
   19006:	d448      	bmi.n	1909a <ull_conn_llcp+0xd5e>
	    !conn->llcp_phy.pause_tx &&
   19008:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1900c:	07d1      	lsls	r1, r2, #31
   1900e:	d444      	bmi.n	1909a <ull_conn_llcp+0xd5e>
		if (conn->tx_head == conn->tx_data) {
   19010:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   19014:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   19016:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1901a:	f000 81c7 	beq.w	193ac <ull_conn_llcp+0x1070>
		} else if (!conn->tx_ctrl) {
   1901e:	2a00      	cmp	r2, #0
   19020:	f000 835b 	beq.w	196da <ull_conn_llcp+0x139e>
	tx->next = conn->tx_ctrl_last->next;
   19024:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19028:	681a      	ldr	r2, [r3, #0]
   1902a:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1902e:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   19032:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   19036:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1903a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1903e:	2b00      	cmp	r3, #0
   19040:	f47f accd 	bne.w	189de <ull_conn_llcp+0x6a2>
		conn->tx_data_last = tx;
   19044:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   19048:	e4c9      	b.n	189de <ull_conn_llcp+0x6a2>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1904a:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   1904e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   19052:	4299      	cmp	r1, r3
   19054:	d043      	beq.n	190de <ull_conn_llcp+0xda2>
			event_len_prep(conn);
   19056:	4620      	mov	r0, r4
   19058:	f7fc feb4 	bl	15dc4 <event_len_prep>
   1905c:	e557      	b.n	18b0e <ull_conn_llcp+0x7d2>
		if (!conn->tx_ctrl) {
   1905e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19062:	2a00      	cmp	r2, #0
   19064:	f47f ab22 	bne.w	186ac <ull_conn_llcp+0x370>
			tx->next = conn->tx_head;
   19068:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1906c:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19070:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   19074:	f7ff bb25 	b.w	186c2 <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   19078:	681a      	ldr	r2, [r3, #0]
   1907a:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1907e:	2900      	cmp	r1, #0
   19080:	f47f aa59 	bne.w	18536 <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   19084:	681a      	ldr	r2, [r3, #0]
   19086:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19088:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1908a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1908c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   19090:	2b00      	cmp	r3, #0
   19092:	f47f aa5b 	bne.w	1854c <ull_conn_llcp+0x210>
   19096:	f7ff bbc1 	b.w	1881c <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   1909a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1909e:	2a00      	cmp	r2, #0
   190a0:	d1c0      	bne.n	19024 <ull_conn_llcp+0xce8>
			tx->next = conn->tx_head;
   190a2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   190a6:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   190aa:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   190ae:	e7c4      	b.n	1903a <ull_conn_llcp+0xcfe>
		if (!conn->tx_ctrl) {
   190b0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   190b4:	2a00      	cmp	r2, #0
   190b6:	f47f af29 	bne.w	18f0c <ull_conn_llcp+0xbd0>
			tx->next = conn->tx_head;
   190ba:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   190bc:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   190c0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   190c4:	e72a      	b.n	18f1c <ull_conn_llcp+0xbe0>
		if (!conn->tx_ctrl) {
   190c6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   190ca:	2a00      	cmp	r2, #0
   190cc:	f47f ac77 	bne.w	189be <ull_conn_llcp+0x682>
			tx->next = conn->tx_head;
   190d0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   190d4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   190d8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   190dc:	e478      	b.n	189d0 <ull_conn_llcp+0x694>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   190de:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   190e2:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   190e6:	428b      	cmp	r3, r1
   190e8:	f43f a93c 	beq.w	18364 <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   190ec:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   190f0:	f003 0703 	and.w	r7, r3, #3
   190f4:	2f03      	cmp	r7, #3
   190f6:	f000 81f7 	beq.w	194e8 <ull_conn_llcp+0x11ac>
   190fa:	2f00      	cmp	r7, #0
   190fc:	f47f a931 	bne.w	18362 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19100:	48c8      	ldr	r0, [pc, #800]	; (19424 <ull_conn_llcp+0x10e8>)
   19102:	f7f6 ffb3 	bl	1006c <mem_acquire>
		if (!tx) {
   19106:	4601      	mov	r1, r0
   19108:	2800      	cmp	r0, #0
   1910a:	f43f ad00 	beq.w	18b0e <ull_conn_llcp+0x7d2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1910e:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   19112:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   19116:	2201      	movs	r2, #1
   19118:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1911c:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   19120:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   19124:	f3c3 0782 	ubfx	r7, r3, #2, #3
   19128:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1912c:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   19130:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19134:	f360 07c3 	bfi	r7, r0, #3, #1
   19138:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1913c:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19140:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   19142:	f367 02c5 	bfi	r2, r7, #3, #3
   19146:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   1914a:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   1914e:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19150:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   19154:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   19156:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19158:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   1915a:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   1915c:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   1915e:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   19160:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   19162:	4620      	mov	r0, r4
   19164:	f7fc facc 	bl	15700 <ctrl_tx_pause_enqueue>
   19168:	e6db      	b.n	18f22 <ull_conn_llcp+0xbe6>
	conn->lll.enc_tx = 1;
   1916a:	f043 0310 	orr.w	r3, r3, #16
   1916e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19172:	2301      	movs	r3, #1
   19174:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19176:	7903      	ldrb	r3, [r0, #4]
   19178:	f043 0303 	orr.w	r3, r3, #3
   1917c:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1917e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   19182:	2206      	movs	r2, #6
   19184:	71c2      	strb	r2, [r0, #7]
	if (
   19186:	2b00      	cmp	r3, #0
   19188:	d067      	beq.n	1925a <ull_conn_llcp+0xf1e>
	    !conn->llcp_enc.pause_tx &&
   1918a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1918e:	0791      	lsls	r1, r2, #30
   19190:	d463      	bmi.n	1925a <ull_conn_llcp+0xf1e>
	    !conn->llcp_phy.pause_tx &&
   19192:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19196:	07d2      	lsls	r2, r2, #31
   19198:	d45f      	bmi.n	1925a <ull_conn_llcp+0xf1e>
		if (conn->tx_head == conn->tx_data) {
   1919a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1919e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   191a0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   191a4:	f000 8153 	beq.w	1944e <ull_conn_llcp+0x1112>
		} else if (!conn->tx_ctrl) {
   191a8:	2a00      	cmp	r2, #0
   191aa:	f000 82a7 	beq.w	196fc <ull_conn_llcp+0x13c0>
	tx->next = conn->tx_ctrl_last->next;
   191ae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   191b2:	681a      	ldr	r2, [r3, #0]
   191b4:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   191b8:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   191bc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   191c0:	f8d9 3000 	ldr.w	r3, [r9]
   191c4:	2b00      	cmp	r3, #0
   191c6:	f47f ac0a 	bne.w	189de <ull_conn_llcp+0x6a2>
   191ca:	e73b      	b.n	19044 <ull_conn_llcp+0xd08>
		LL_ASSERT(0);
   191cc:	4a96      	ldr	r2, [pc, #600]	; (19428 <ull_conn_llcp+0x10ec>)
   191ce:	4997      	ldr	r1, [pc, #604]	; (1942c <ull_conn_llcp+0x10f0>)
   191d0:	f640 63a1 	movw	r3, #3745	; 0xea1
   191d4:	e5e2      	b.n	18d9c <ull_conn_llcp+0xa60>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   191d6:	4893      	ldr	r0, [pc, #588]	; (19424 <ull_conn_llcp+0x10e8>)
   191d8:	f7f6 ff48 	bl	1006c <mem_acquire>
		if (tx) {
   191dc:	2800      	cmp	r0, #0
   191de:	f43f ac96 	beq.w	18b0e <ull_conn_llcp+0x7d2>
			conn->llcp_version.ack--;
   191e2:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   191e6:	3b01      	subs	r3, #1
   191e8:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   191ec:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   191f0:	f043 0301 	orr.w	r3, r3, #1
   191f4:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   191f8:	7903      	ldrb	r3, [r0, #4]
   191fa:	f043 0303 	orr.w	r3, r3, #3
   191fe:	7103      	strb	r3, [r0, #4]
			pdu->len =
   19200:	2306      	movs	r3, #6
   19202:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   19204:	230c      	movs	r3, #12
   19206:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   19208:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1920a:	f06f 030e 	mvn.w	r3, #14
   1920e:	7243      	strb	r3, [r0, #9]
   19210:	2305      	movs	r3, #5
   19212:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   19214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19218:	72c3      	strb	r3, [r0, #11]
   1921a:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1921c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19220:	2b00      	cmp	r3, #0
   19222:	d06c      	beq.n	192fe <ull_conn_llcp+0xfc2>
	    !conn->llcp_enc.pause_tx &&
   19224:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19228:	0797      	lsls	r7, r2, #30
   1922a:	d468      	bmi.n	192fe <ull_conn_llcp+0xfc2>
	    !conn->llcp_phy.pause_tx &&
   1922c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19230:	07d1      	lsls	r1, r2, #31
   19232:	d464      	bmi.n	192fe <ull_conn_llcp+0xfc2>
		if (conn->tx_head == conn->tx_data) {
   19234:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   19238:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1923a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1923e:	f000 8266 	beq.w	1970e <ull_conn_llcp+0x13d2>
		} else if (!conn->tx_ctrl) {
   19242:	2a00      	cmp	r2, #0
   19244:	f000 8319 	beq.w	1987a <ull_conn_llcp+0x153e>
	tx->next = conn->tx_ctrl_last->next;
   19248:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1924c:	681a      	ldr	r2, [r3, #0]
   1924e:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19250:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   19252:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19256:	6803      	ldr	r3, [r0, #0]
   19258:	e660      	b.n	18f1c <ull_conn_llcp+0xbe0>
		if (!conn->tx_ctrl) {
   1925a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1925e:	2a00      	cmp	r2, #0
   19260:	d1a5      	bne.n	191ae <ull_conn_llcp+0xe72>
			tx->next = conn->tx_head;
   19262:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   19266:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1926a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1926e:	e7a7      	b.n	191c0 <ull_conn_llcp+0xe84>
		conn->tx_data_last = tx;
   19270:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   19274:	f7ff ba28 	b.w	186c8 <ull_conn_llcp+0x38c>
   19278:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   1927c:	e651      	b.n	18f22 <ull_conn_llcp+0xbe6>
	switch (conn->llcp_conn_param.state) {
   1927e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   19282:	f003 030f 	and.w	r3, r3, #15
   19286:	2b08      	cmp	r3, #8
   19288:	f200 830c 	bhi.w	198a4 <ull_conn_llcp+0x1568>
   1928c:	a001      	add	r0, pc, #4	; (adr r0, 19294 <ull_conn_llcp+0xf58>)
   1928e:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   19292:	bf00      	nop
   19294:	00018ced 	.word	0x00018ced
   19298:	00018db1 	.word	0x00018db1
   1929c:	00018c9d 	.word	0x00018c9d
   192a0:	00018365 	.word	0x00018365
   192a4:	00018365 	.word	0x00018365
   192a8:	00018365 	.word	0x00018365
   192ac:	00018365 	.word	0x00018365
   192b0:	00018365 	.word	0x00018365
   192b4:	00018c35 	.word	0x00018c35
		if (!conn->tx_ctrl) {
   192b8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   192bc:	2a00      	cmp	r2, #0
   192be:	f47f a8af 	bne.w	18420 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head;
   192c2:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   192c6:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   192ca:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   192ce:	f7ff b8b0 	b.w	18432 <ull_conn_llcp+0xf6>
			conn->tx_data = conn->tx_data->next;
   192d2:	6819      	ldr	r1, [r3, #0]
   192d4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   192d8:	2a00      	cmp	r2, #0
   192da:	f47f a98a 	bne.w	185f2 <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head->next;
   192de:	681a      	ldr	r2, [r3, #0]
   192e0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   192e2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   192e4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   192e6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   192ea:	f7ff b98a 	b.w	18602 <ull_conn_llcp+0x2c6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   192ee:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   192f0:	f889 8008 	strb.w	r8, [r9, #8]
   192f4:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   192f6:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   192fa:	f7ff b873 	b.w	183e4 <ull_conn_llcp+0xa8>
		if (!conn->tx_ctrl) {
   192fe:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19302:	2a00      	cmp	r2, #0
   19304:	d1a0      	bne.n	19248 <ull_conn_llcp+0xf0c>
			tx->next = conn->tx_head;
   19306:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19308:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1930c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19310:	e7a1      	b.n	19256 <ull_conn_llcp+0xf1a>
	    ((pdu_data_tx->llctrl.opcode !=
   19312:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19314:	2a03      	cmp	r2, #3
   19316:	f43f aeb5 	beq.w	19084 <ull_conn_llcp+0xd48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1931a:	2a0a      	cmp	r2, #10
   1931c:	f47f a905 	bne.w	1852a <ull_conn_llcp+0x1ee>
   19320:	e6b0      	b.n	19084 <ull_conn_llcp+0xd48>
			conn->tx_data = conn->tx_data->next;
   19322:	6819      	ldr	r1, [r3, #0]
   19324:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19328:	2a00      	cmp	r2, #0
   1932a:	f47f aab5 	bne.w	18898 <ull_conn_llcp+0x55c>
			tx->next = conn->tx_head->next;
   1932e:	681a      	ldr	r2, [r3, #0]
   19330:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19332:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19334:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19336:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1933a:	f7ff bab5 	b.w	188a8 <ull_conn_llcp+0x56c>
			conn->tx_data = conn->tx_data->next;
   1933e:	6819      	ldr	r1, [r3, #0]
   19340:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19344:	2a00      	cmp	r2, #0
   19346:	f47f ab8d 	bne.w	18a64 <ull_conn_llcp+0x728>
			tx->next = conn->tx_head->next;
   1934a:	681a      	ldr	r2, [r3, #0]
   1934c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1934e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19350:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19352:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19356:	f7ff bb8d 	b.w	18a74 <ull_conn_llcp+0x738>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1935a:	791a      	ldrb	r2, [r3, #4]
   1935c:	f002 0203 	and.w	r2, r2, #3
   19360:	2a03      	cmp	r2, #3
   19362:	f000 8101 	beq.w	19568 <ull_conn_llcp+0x122c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19366:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1936a:	f7ff b942 	b.w	185f2 <ull_conn_llcp+0x2b6>
		conn->tx_data_last = tx;
   1936e:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   19372:	f7ff b863 	b.w	1843c <ull_conn_llcp+0x100>
		if (!conn->tx_ctrl) {
   19376:	2a00      	cmp	r2, #0
   19378:	f47f ac82 	bne.w	18c80 <ull_conn_llcp+0x944>
			tx->next = conn->tx_head;
   1937c:	f847 3c13 	str.w	r3, [r7, #-19]
				conn->tx_ctrl = tx;
   19380:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19384:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19388:	e482      	b.n	18c90 <ull_conn_llcp+0x954>
			conn->tx_data = conn->tx_data->next;
   1938a:	6819      	ldr	r1, [r3, #0]
   1938c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19390:	2a00      	cmp	r2, #0
   19392:	f47f a98b 	bne.w	186ac <ull_conn_llcp+0x370>
			tx->next = conn->tx_head->next;
   19396:	681a      	ldr	r2, [r3, #0]
   19398:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1939c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   193a0:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   193a4:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   193a8:	f7ff b98b 	b.w	186c2 <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   193ac:	6819      	ldr	r1, [r3, #0]
   193ae:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   193b2:	2a00      	cmp	r2, #0
   193b4:	f47f ae36 	bne.w	19024 <ull_conn_llcp+0xce8>
			tx->next = conn->tx_head->next;
   193b8:	681a      	ldr	r2, [r3, #0]
   193ba:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   193be:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   193c2:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   193c6:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   193ca:	e636      	b.n	1903a <ull_conn_llcp+0xcfe>
			conn->tx_data = conn->tx_data->next;
   193cc:	6819      	ldr	r1, [r3, #0]
   193ce:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   193d2:	2a00      	cmp	r2, #0
   193d4:	f47f ad9a 	bne.w	18f0c <ull_conn_llcp+0xbd0>
			tx->next = conn->tx_head->next;
   193d8:	681a      	ldr	r2, [r3, #0]
   193da:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   193dc:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   193de:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   193e0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   193e4:	e59a      	b.n	18f1c <ull_conn_llcp+0xbe0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   193e6:	791a      	ldrb	r2, [r3, #4]
   193e8:	f002 0203 	and.w	r2, r2, #3
   193ec:	2a03      	cmp	r2, #3
   193ee:	f000 817d 	beq.w	196ec <ull_conn_llcp+0x13b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   193f2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   193f6:	f7ff bb35 	b.w	18a64 <ull_conn_llcp+0x728>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   193fa:	791a      	ldrb	r2, [r3, #4]
   193fc:	f002 0203 	and.w	r2, r2, #3
   19400:	2a03      	cmp	r2, #3
   19402:	f000 8141 	beq.w	19688 <ull_conn_llcp+0x134c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19406:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1940a:	f7ff ba45 	b.w	18898 <ull_conn_llcp+0x55c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1940e:	791a      	ldrb	r2, [r3, #4]
   19410:	f002 0203 	and.w	r2, r2, #3
   19414:	2a03      	cmp	r2, #3
   19416:	f000 8149 	beq.w	196ac <ull_conn_llcp+0x1370>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1941a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1941e:	f7ff b945 	b.w	186ac <ull_conn_llcp+0x370>
   19422:	bf00      	nop
   19424:	20002ae4 	.word	0x20002ae4
   19428:	0002c6cc 	.word	0x0002c6cc
   1942c:	0002c074 	.word	0x0002c074
			conn->tx_data = conn->tx_data->next;
   19430:	6819      	ldr	r1, [r3, #0]
   19432:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19436:	2a00      	cmp	r2, #0
   19438:	f47f aac1 	bne.w	189be <ull_conn_llcp+0x682>
			tx->next = conn->tx_head->next;
   1943c:	681a      	ldr	r2, [r3, #0]
   1943e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   19442:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   19446:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1944a:	f7ff bac1 	b.w	189d0 <ull_conn_llcp+0x694>
			conn->tx_data = conn->tx_data->next;
   1944e:	6819      	ldr	r1, [r3, #0]
   19450:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19454:	2a00      	cmp	r2, #0
   19456:	f47f aeaa 	bne.w	191ae <ull_conn_llcp+0xe72>
			tx->next = conn->tx_head->next;
   1945a:	681a      	ldr	r2, [r3, #0]
   1945c:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   19460:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   19464:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   19468:	e6aa      	b.n	191c0 <ull_conn_llcp+0xe84>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1946a:	48c5      	ldr	r0, [pc, #788]	; (19780 <ull_conn_llcp+0x1444>)
   1946c:	f7f6 fdfe 	bl	1006c <mem_acquire>
		if (!tx) {
   19470:	2800      	cmp	r0, #0
   19472:	f43f ab4c 	beq.w	18b0e <ull_conn_llcp+0x7d2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   19476:	7902      	ldrb	r2, [r0, #4]
   19478:	f042 0203 	orr.w	r2, r2, #3
   1947c:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1947e:	2211      	movs	r2, #17
   19480:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   19482:	2203      	movs	r2, #3
   19484:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   19486:	220f      	movs	r2, #15
   19488:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1948a:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   1948e:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   19490:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   19494:	2a00      	cmp	r2, #0
   19496:	f000 8150 	beq.w	1973a <ull_conn_llcp+0x13fe>
	    !conn->llcp_enc.pause_tx &&
   1949a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1949e:	078b      	lsls	r3, r1, #30
   194a0:	f100 814b 	bmi.w	1973a <ull_conn_llcp+0x13fe>
	    !conn->llcp_phy.pause_tx &&
   194a4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   194a8:	07c9      	lsls	r1, r1, #31
   194aa:	f100 8146 	bmi.w	1973a <ull_conn_llcp+0x13fe>
		if (conn->tx_head == conn->tx_data) {
   194ae:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   194b2:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   194b4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   194b8:	f000 814a 	beq.w	19750 <ull_conn_llcp+0x1414>
		} else if (!conn->tx_ctrl) {
   194bc:	2900      	cmp	r1, #0
   194be:	f000 8161 	beq.w	19784 <ull_conn_llcp+0x1448>
	tx->next = conn->tx_ctrl_last->next;
   194c2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   194c6:	6811      	ldr	r1, [r2, #0]
   194c8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   194ca:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   194cc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   194d0:	6802      	ldr	r2, [r0, #0]
   194d2:	2a00      	cmp	r2, #0
   194d4:	f000 8151 	beq.w	1977a <ull_conn_llcp+0x143e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   194d8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   194dc:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   194e0:	2300      	movs	r3, #0
   194e2:	603b      	str	r3, [r7, #0]
   194e4:	f7ff bb13 	b.w	18b0e <ull_conn_llcp+0x7d2>
		if (conn->llcp_phy.tx & PHY_2M) {
   194e8:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   194ea:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   194ee:	f3c3 0282 	ubfx	r2, r3, #2, #3
   194f2:	d54a      	bpl.n	1958a <ull_conn_llcp+0x124e>
			conn->llcp_phy.tx = PHY_2M;
   194f4:	2202      	movs	r2, #2
   194f6:	f362 0384 	bfi	r3, r2, #2, #3
   194fa:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   194fe:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   19502:	065f      	lsls	r7, r3, #25
   19504:	ea4f 1253 	mov.w	r2, r3, lsr #5
   19508:	d536      	bpl.n	19578 <ull_conn_llcp+0x123c>
			conn->llcp_phy.rx = PHY_2M;
   1950a:	2202      	movs	r2, #2
   1950c:	f362 1347 	bfi	r3, r2, #5, #3
   19510:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   19514:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   19516:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1951a:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1951e:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   19522:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   19526:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1952a:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1952e:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   19532:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   19536:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1953a:	428f      	cmp	r7, r1
   1953c:	bf08      	it	eq
   1953e:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   19540:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   19542:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   19546:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1954a:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1954e:	bf08      	it	eq
   19550:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   19552:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   19556:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   1955a:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   1955c:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   19560:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   19564:	f7fe bf1a 	b.w	1839c <ull_conn_llcp+0x60>
	    ((pdu_data_tx->llctrl.opcode !=
   19568:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1956a:	2a03      	cmp	r2, #3
   1956c:	f43f aeb7 	beq.w	192de <ull_conn_llcp+0xfa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19570:	2a0a      	cmp	r2, #10
   19572:	f47f aef8 	bne.w	19366 <ull_conn_llcp+0x102a>
   19576:	e6b2      	b.n	192de <ull_conn_llcp+0xfa2>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   19578:	07d1      	lsls	r1, r2, #31
   1957a:	f140 8165 	bpl.w	19848 <ull_conn_llcp+0x150c>
			conn->llcp_phy.rx = PHY_1M;
   1957e:	2201      	movs	r2, #1
   19580:	f362 1347 	bfi	r3, r2, #5, #3
   19584:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   19588:	e7c4      	b.n	19514 <ull_conn_llcp+0x11d8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1958a:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   1958c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   19590:	f140 816a 	bpl.w	19868 <ull_conn_llcp+0x152c>
			conn->llcp_phy.tx = PHY_1M;
   19594:	2201      	movs	r2, #1
   19596:	f362 0384 	bfi	r3, r2, #2, #3
   1959a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1959e:	e7ae      	b.n	194fe <ull_conn_llcp+0x11c2>
			conn->llcp_cu.interval = interval_max;
   195a0:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   195a4:	e42b      	b.n	18dfe <ull_conn_llcp+0xac2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   195a6:	4876      	ldr	r0, [pc, #472]	; (19780 <ull_conn_llcp+0x1444>)
   195a8:	f7f6 fd60 	bl	1006c <mem_acquire>
	if (!tx) {
   195ac:	2800      	cmp	r0, #0
   195ae:	f43f aaae 	beq.w	18b0e <ull_conn_llcp+0x7d2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   195b2:	7902      	ldrb	r2, [r0, #4]
   195b4:	f042 0203 	orr.w	r2, r2, #3
   195b8:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   195ba:	2218      	movs	r2, #24
   195bc:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   195be:	2210      	movs	r2, #16
   195c0:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   195c2:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   195c6:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   195c8:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   195cc:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   195ce:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   195d2:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   195d4:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   195d8:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   195da:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   195de:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   195e0:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   195e4:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   195e8:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   195ec:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   195f0:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   195f4:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   195f8:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   195fc:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   19600:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   19604:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   19608:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   1960c:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   19610:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   19614:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   19618:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1961c:	2a00      	cmp	r2, #0
   1961e:	f000 8082 	beq.w	19726 <ull_conn_llcp+0x13ea>
	    !conn->llcp_enc.pause_tx &&
   19622:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   19626:	078b      	lsls	r3, r1, #30
   19628:	d47d      	bmi.n	19726 <ull_conn_llcp+0x13ea>
	    !conn->llcp_phy.pause_tx &&
   1962a:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1962e:	07cf      	lsls	r7, r1, #31
   19630:	d479      	bmi.n	19726 <ull_conn_llcp+0x13ea>
		if (conn->tx_head == conn->tx_data) {
   19632:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   19636:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   19638:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1963c:	f000 80ed 	beq.w	1981a <ull_conn_llcp+0x14de>
		} else if (!conn->tx_ctrl) {
   19640:	2900      	cmp	r1, #0
   19642:	f000 80f9 	beq.w	19838 <ull_conn_llcp+0x14fc>
	tx->next = conn->tx_ctrl_last->next;
   19646:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1964a:	6811      	ldr	r1, [r2, #0]
   1964c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1964e:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   19650:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19654:	6802      	ldr	r2, [r0, #0]
   19656:	2a00      	cmp	r2, #0
   19658:	f000 80eb 	beq.w	19832 <ull_conn_llcp+0x14f6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   1965c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19660:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   19664:	2305      	movs	r3, #5
   19666:	f363 0203 	bfi	r2, r3, #0, #4
   1966a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1966e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   19672:	f7fe be6f 	b.w	18354 <ull_conn_llcp+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19676:	791a      	ldrb	r2, [r3, #4]
   19678:	f002 0203 	and.w	r2, r2, #3
   1967c:	2a03      	cmp	r2, #3
   1967e:	f000 809c 	beq.w	197ba <ull_conn_llcp+0x147e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19682:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   19686:	e441      	b.n	18f0c <ull_conn_llcp+0xbd0>
	    ((pdu_data_tx->llctrl.opcode !=
   19688:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1968a:	2a03      	cmp	r2, #3
   1968c:	f43f ae4f 	beq.w	1932e <ull_conn_llcp+0xff2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19690:	2a0a      	cmp	r2, #10
   19692:	f47f aeb8 	bne.w	19406 <ull_conn_llcp+0x10ca>
   19696:	e64a      	b.n	1932e <ull_conn_llcp+0xff2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19698:	791a      	ldrb	r2, [r3, #4]
   1969a:	f002 0203 	and.w	r2, r2, #3
   1969e:	2a03      	cmp	r2, #3
   196a0:	f000 8093 	beq.w	197ca <ull_conn_llcp+0x148e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   196a4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   196a8:	f7ff b989 	b.w	189be <ull_conn_llcp+0x682>
	    ((pdu_data_tx->llctrl.opcode !=
   196ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   196ae:	2a03      	cmp	r2, #3
   196b0:	f43f ae71 	beq.w	19396 <ull_conn_llcp+0x105a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   196b4:	2a0a      	cmp	r2, #10
   196b6:	f47f aeb0 	bne.w	1941a <ull_conn_llcp+0x10de>
   196ba:	e66c      	b.n	19396 <ull_conn_llcp+0x105a>
			conn->tx_data = conn->tx_data->next;
   196bc:	6819      	ldr	r1, [r3, #0]
   196be:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   196c2:	2a00      	cmp	r2, #0
   196c4:	f47e aeac 	bne.w	18420 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head->next;
   196c8:	681a      	ldr	r2, [r3, #0]
   196ca:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   196ce:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   196d2:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   196d6:	f7fe beac 	b.w	18432 <ull_conn_llcp+0xf6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   196da:	791a      	ldrb	r2, [r3, #4]
   196dc:	f002 0203 	and.w	r2, r2, #3
   196e0:	2a03      	cmp	r2, #3
   196e2:	f000 8083 	beq.w	197ec <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   196e6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   196ea:	e49b      	b.n	19024 <ull_conn_llcp+0xce8>
	    ((pdu_data_tx->llctrl.opcode !=
   196ec:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   196ee:	2a03      	cmp	r2, #3
   196f0:	f43f ae2b 	beq.w	1934a <ull_conn_llcp+0x100e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   196f4:	2a0a      	cmp	r2, #10
   196f6:	f47f ae7c 	bne.w	193f2 <ull_conn_llcp+0x10b6>
   196fa:	e626      	b.n	1934a <ull_conn_llcp+0x100e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   196fc:	791a      	ldrb	r2, [r3, #4]
   196fe:	f002 0203 	and.w	r2, r2, #3
   19702:	2a03      	cmp	r2, #3
   19704:	f000 8081 	beq.w	1980a <ull_conn_llcp+0x14ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19708:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1970c:	e54f      	b.n	191ae <ull_conn_llcp+0xe72>
			conn->tx_data = conn->tx_data->next;
   1970e:	6819      	ldr	r1, [r3, #0]
   19710:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19714:	2a00      	cmp	r2, #0
   19716:	f47f ad97 	bne.w	19248 <ull_conn_llcp+0xf0c>
			tx->next = conn->tx_head->next;
   1971a:	681a      	ldr	r2, [r3, #0]
   1971c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1971e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   19720:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19724:	e597      	b.n	19256 <ull_conn_llcp+0xf1a>
		if (!conn->tx_ctrl) {
   19726:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1972a:	2900      	cmp	r1, #0
   1972c:	d18b      	bne.n	19646 <ull_conn_llcp+0x130a>
			tx->next = conn->tx_head;
   1972e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   19730:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19734:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19738:	e78c      	b.n	19654 <ull_conn_llcp+0x1318>
		if (!conn->tx_ctrl) {
   1973a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1973e:	2900      	cmp	r1, #0
   19740:	f47f aebf 	bne.w	194c2 <ull_conn_llcp+0x1186>
			tx->next = conn->tx_head;
   19744:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   19746:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1974a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1974e:	e6bf      	b.n	194d0 <ull_conn_llcp+0x1194>
			conn->tx_data = conn->tx_data->next;
   19750:	6813      	ldr	r3, [r2, #0]
   19752:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19756:	2900      	cmp	r1, #0
   19758:	f47f aeb3 	bne.w	194c2 <ull_conn_llcp+0x1186>
			tx->next = conn->tx_head->next;
   1975c:	6811      	ldr	r1, [r2, #0]
   1975e:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   19760:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   19762:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19766:	e6b3      	b.n	194d0 <ull_conn_llcp+0x1194>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19768:	791a      	ldrb	r2, [r3, #4]
   1976a:	f002 0203 	and.w	r2, r2, #3
   1976e:	2a03      	cmp	r2, #3
   19770:	d010      	beq.n	19794 <ull_conn_llcp+0x1458>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19772:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   19776:	f7ff ba83 	b.w	18c80 <ull_conn_llcp+0x944>
		conn->tx_data_last = tx;
   1977a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1977e:	e6ab      	b.n	194d8 <ull_conn_llcp+0x119c>
   19780:	20002ae4 	.word	0x20002ae4
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19784:	7911      	ldrb	r1, [r2, #4]
   19786:	f001 0103 	and.w	r1, r1, #3
   1978a:	2903      	cmp	r1, #3
   1978c:	d00f      	beq.n	197ae <ull_conn_llcp+0x1472>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1978e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   19792:	e696      	b.n	194c2 <ull_conn_llcp+0x1186>
	    ((pdu_data_tx->llctrl.opcode !=
   19794:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19796:	2a03      	cmp	r2, #3
   19798:	d001      	beq.n	1979e <ull_conn_llcp+0x1462>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1979a:	2a0a      	cmp	r2, #10
   1979c:	d1e9      	bne.n	19772 <ull_conn_llcp+0x1436>
			tx->next = conn->tx_head->next;
   1979e:	681a      	ldr	r2, [r3, #0]
   197a0:	f847 2c13 	str.w	r2, [r7, #-19]
			conn->tx_head->next = tx;
   197a4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   197a6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   197aa:	f7ff ba71 	b.w	18c90 <ull_conn_llcp+0x954>
	    ((pdu_data_tx->llctrl.opcode !=
   197ae:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197b0:	2903      	cmp	r1, #3
   197b2:	d0d3      	beq.n	1975c <ull_conn_llcp+0x1420>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197b4:	290a      	cmp	r1, #10
   197b6:	d1ea      	bne.n	1978e <ull_conn_llcp+0x1452>
   197b8:	e7d0      	b.n	1975c <ull_conn_llcp+0x1420>
	    ((pdu_data_tx->llctrl.opcode !=
   197ba:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197bc:	2a03      	cmp	r2, #3
   197be:	f43f ae0b 	beq.w	193d8 <ull_conn_llcp+0x109c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197c2:	2a0a      	cmp	r2, #10
   197c4:	f47f af5d 	bne.w	19682 <ull_conn_llcp+0x1346>
   197c8:	e606      	b.n	193d8 <ull_conn_llcp+0x109c>
	    ((pdu_data_tx->llctrl.opcode !=
   197ca:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197cc:	2a03      	cmp	r2, #3
   197ce:	f43f ae35 	beq.w	1943c <ull_conn_llcp+0x1100>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197d2:	2a0a      	cmp	r2, #10
   197d4:	f47f af66 	bne.w	196a4 <ull_conn_llcp+0x1368>
   197d8:	e630      	b.n	1943c <ull_conn_llcp+0x1100>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197da:	791a      	ldrb	r2, [r3, #4]
   197dc:	f002 0203 	and.w	r2, r2, #3
   197e0:	2a03      	cmp	r2, #3
   197e2:	d00b      	beq.n	197fc <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   197e4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   197e8:	f7fe be1a 	b.w	18420 <ull_conn_llcp+0xe4>
	    ((pdu_data_tx->llctrl.opcode !=
   197ec:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197ee:	2a03      	cmp	r2, #3
   197f0:	f43f ade2 	beq.w	193b8 <ull_conn_llcp+0x107c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   197f4:	2a0a      	cmp	r2, #10
   197f6:	f47f af76 	bne.w	196e6 <ull_conn_llcp+0x13aa>
   197fa:	e5dd      	b.n	193b8 <ull_conn_llcp+0x107c>
	    ((pdu_data_tx->llctrl.opcode !=
   197fc:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   197fe:	2a03      	cmp	r2, #3
   19800:	f43f af62 	beq.w	196c8 <ull_conn_llcp+0x138c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19804:	2a0a      	cmp	r2, #10
   19806:	d1ed      	bne.n	197e4 <ull_conn_llcp+0x14a8>
   19808:	e75e      	b.n	196c8 <ull_conn_llcp+0x138c>
	    ((pdu_data_tx->llctrl.opcode !=
   1980a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1980c:	2a03      	cmp	r2, #3
   1980e:	f43f ae24 	beq.w	1945a <ull_conn_llcp+0x111e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19812:	2a0a      	cmp	r2, #10
   19814:	f47f af78 	bne.w	19708 <ull_conn_llcp+0x13cc>
   19818:	e61f      	b.n	1945a <ull_conn_llcp+0x111e>
			conn->tx_data = conn->tx_data->next;
   1981a:	6813      	ldr	r3, [r2, #0]
   1981c:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19820:	2900      	cmp	r1, #0
   19822:	f47f af10 	bne.w	19646 <ull_conn_llcp+0x130a>
			tx->next = conn->tx_head->next;
   19826:	6811      	ldr	r1, [r2, #0]
   19828:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1982a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1982c:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19830:	e710      	b.n	19654 <ull_conn_llcp+0x1318>
		conn->tx_data_last = tx;
   19832:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   19836:	e711      	b.n	1965c <ull_conn_llcp+0x1320>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19838:	7911      	ldrb	r1, [r2, #4]
   1983a:	f001 0103 	and.w	r1, r1, #3
   1983e:	2903      	cmp	r1, #3
   19840:	d023      	beq.n	1988a <ull_conn_llcp+0x154e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19842:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   19846:	e6fe      	b.n	19646 <ull_conn_llcp+0x130a>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   19848:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   1984c:	bf18      	it	ne
   1984e:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   19850:	f362 1347 	bfi	r3, r2, #5, #3
   19854:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   19858:	e65c      	b.n	19514 <ull_conn_llcp+0x11d8>
			conn->tx_data = conn->tx_data->next;
   1985a:	6819      	ldr	r1, [r3, #0]
   1985c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19860:	2a00      	cmp	r2, #0
   19862:	d09c      	beq.n	1979e <ull_conn_llcp+0x1462>
   19864:	f7ff ba0c 	b.w	18c80 <ull_conn_llcp+0x944>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   19868:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   1986c:	bf18      	it	ne
   1986e:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   19870:	f362 0384 	bfi	r3, r2, #2, #3
   19874:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   19878:	e641      	b.n	194fe <ull_conn_llcp+0x11c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1987a:	791a      	ldrb	r2, [r3, #4]
   1987c:	f002 0203 	and.w	r2, r2, #3
   19880:	2a03      	cmp	r2, #3
   19882:	d008      	beq.n	19896 <ull_conn_llcp+0x155a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19884:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   19888:	e4de      	b.n	19248 <ull_conn_llcp+0xf0c>
	    ((pdu_data_tx->llctrl.opcode !=
   1988a:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1988c:	2903      	cmp	r1, #3
   1988e:	d0ca      	beq.n	19826 <ull_conn_llcp+0x14ea>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19890:	290a      	cmp	r1, #10
   19892:	d1d6      	bne.n	19842 <ull_conn_llcp+0x1506>
   19894:	e7c7      	b.n	19826 <ull_conn_llcp+0x14ea>
	    ((pdu_data_tx->llctrl.opcode !=
   19896:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19898:	2a03      	cmp	r2, #3
   1989a:	f43f af3e 	beq.w	1971a <ull_conn_llcp+0x13de>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1989e:	2a0a      	cmp	r2, #10
   198a0:	d1f0      	bne.n	19884 <ull_conn_llcp+0x1548>
   198a2:	e73a      	b.n	1971a <ull_conn_llcp+0x13de>
		LL_ASSERT(0);
   198a4:	4a09      	ldr	r2, [pc, #36]	; (198cc <ull_conn_llcp+0x1590>)
   198a6:	490a      	ldr	r1, [pc, #40]	; (198d0 <ull_conn_llcp+0x1594>)
   198a8:	480a      	ldr	r0, [pc, #40]	; (198d4 <ull_conn_llcp+0x1598>)
   198aa:	f640 73e1 	movw	r3, #4065	; 0xfe1
   198ae:	f00b fb2a 	bl	24f06 <printk>
   198b2:	4040      	eors	r0, r0
   198b4:	f380 8811 	msr	BASEPRI, r0
   198b8:	f04f 0003 	mov.w	r0, #3
   198bc:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   198be:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   198c2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   198c6:	f7fe bd45 	b.w	18354 <ull_conn_llcp+0x18>
   198ca:	bf00      	nop
   198cc:	0002c6cc 	.word	0x0002c6cc
   198d0:	0002c074 	.word	0x0002c074
   198d4:	0002bfdc 	.word	0x0002bfdc

000198d8 <ull_conn_tx_demux>:
{
   198d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   198dc:	4c24      	ldr	r4, [pc, #144]	; (19970 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   198de:	4f25      	ldr	r7, [pc, #148]	; (19974 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   198e0:	78e2      	ldrb	r2, [r4, #3]
{
   198e2:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   198e4:	1d26      	adds	r6, r4, #4
   198e6:	e021      	b.n	1992c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   198e8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   198ec:	4638      	mov	r0, r7
   198ee:	f7f6 fbeb 	bl	100c8 <mem_get>
	if (conn->lll.handle != handle) {
   198f2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   198f4:	bb2a      	cbnz	r2, 19942 <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   198f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   198fa:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   198fe:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   19900:	b351      	cbz	r1, 19958 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   19902:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   19906:	b102      	cbz	r2, 1990a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   19908:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1990a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   1990e:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   19910:	78a3      	ldrb	r3, [r4, #2]
   19912:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   19914:	429a      	cmp	r2, r3
   19916:	d005      	beq.n	19924 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   19918:	3301      	adds	r3, #1
   1991a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1991c:	4299      	cmp	r1, r3
   1991e:	bf08      	it	eq
   19920:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   19922:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   19924:	3d01      	subs	r5, #1
   19926:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1992a:	d01e      	beq.n	1996a <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1992c:	78a3      	ldrb	r3, [r4, #2]
   1992e:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   19930:	4293      	cmp	r3, r2
   19932:	d01a      	beq.n	1996a <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   19934:	fb13 f301 	smulbb	r3, r3, r1
   19938:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   1993c:	5af2      	ldrh	r2, [r6, r3]
   1993e:	2a00      	cmp	r2, #0
   19940:	d0d2      	beq.n	198e8 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   19942:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   19946:	790b      	ldrb	r3, [r1, #4]
   19948:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1994c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   19950:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   19952:	f7fa fb6b 	bl	1402c <ll_tx_ack_put>
   19956:	e7da      	b.n	1990e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   19958:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   1995c:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   19960:	2a00      	cmp	r2, #0
   19962:	d1ce      	bne.n	19902 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   19964:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   19968:	e7cf      	b.n	1990a <ull_conn_tx_demux+0x32>
}
   1996a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1996e:	bf00      	nop
   19970:	200005a4 	.word	0x200005a4
   19974:	20001a30 	.word	0x20001a30

00019978 <conn_cleanup_finalize>:
{
   19978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1997c:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   19980:	b082      	sub	sp, #8
   19982:	4606      	mov	r6, r0
	while (rx) {
   19984:	b144      	cbz	r4, 19998 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   19986:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   19988:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1998a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1998c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1998e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   19990:	f7fa fb08 	bl	13fa4 <ll_rx_put>
	while (rx) {
   19994:	2c00      	cmp	r4, #0
   19996:	d1f7      	bne.n	19988 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   19998:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1999c:	b381      	cbz	r1, 19a00 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1999e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 19a44 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   199a2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 19a48 <conn_cleanup_finalize+0xd0>
   199a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 19a4c <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   199aa:	f106 0768 	add.w	r7, r6, #104	; 0x68
   199ae:	e007      	b.n	199c0 <conn_cleanup_finalize+0x48>
   199b0:	4629      	mov	r1, r5
   199b2:	463a      	mov	r2, r7
   199b4:	4620      	mov	r0, r4
   199b6:	f7f6 fbb9 	bl	1012c <memq_enqueue>
	while (conn->tx_head) {
   199ba:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   199be:	b1f9      	cbz	r1, 19a00 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   199c0:	4630      	mov	r0, r6
   199c2:	f7fc f8dd 	bl	15b80 <tx_ull_dequeue>
   199c6:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   199c8:	4640      	mov	r0, r8
   199ca:	f7f6 fb4f 	bl	1006c <mem_acquire>
		LL_ASSERT(link);
   199ce:	4604      	mov	r4, r0
   199d0:	2800      	cmp	r0, #0
   199d2:	d1ed      	bne.n	199b0 <conn_cleanup_finalize+0x38>
   199d4:	481e      	ldr	r0, [pc, #120]	; (19a50 <conn_cleanup_finalize+0xd8>)
   199d6:	f640 135e 	movw	r3, #2398	; 0x95e
   199da:	4652      	mov	r2, sl
   199dc:	4649      	mov	r1, r9
   199de:	f00b fa92 	bl	24f06 <printk>
   199e2:	4040      	eors	r0, r0
   199e4:	f380 8811 	msr	BASEPRI, r0
   199e8:	f04f 0003 	mov.w	r0, #3
   199ec:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   199ee:	4629      	mov	r1, r5
   199f0:	463a      	mov	r2, r7
   199f2:	4620      	mov	r0, r4
   199f4:	f7f6 fb9a 	bl	1012c <memq_enqueue>
	while (conn->tx_head) {
   199f8:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   199fc:	2900      	cmp	r1, #0
   199fe:	d1df      	bne.n	199c0 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   19a00:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   19a02:	4b14      	ldr	r3, [pc, #80]	; (19a54 <conn_cleanup_finalize+0xdc>)
   19a04:	9600      	str	r6, [sp, #0]
   19a06:	3205      	adds	r2, #5
   19a08:	b2d2      	uxtb	r2, r2
   19a0a:	2101      	movs	r1, #1
   19a0c:	2000      	movs	r0, #0
   19a0e:	f7f7 fe57 	bl	116c0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19a12:	f030 0302 	bics.w	r3, r0, #2
   19a16:	d00c      	beq.n	19a32 <conn_cleanup_finalize+0xba>
   19a18:	4a0b      	ldr	r2, [pc, #44]	; (19a48 <conn_cleanup_finalize+0xd0>)
   19a1a:	490f      	ldr	r1, [pc, #60]	; (19a58 <conn_cleanup_finalize+0xe0>)
   19a1c:	480c      	ldr	r0, [pc, #48]	; (19a50 <conn_cleanup_finalize+0xd8>)
   19a1e:	f640 1323 	movw	r3, #2339	; 0x923
   19a22:	f00b fa70 	bl	24f06 <printk>
   19a26:	4040      	eors	r0, r0
   19a28:	f380 8811 	msr	BASEPRI, r0
   19a2c:	f04f 0003 	mov.w	r0, #3
   19a30:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   19a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   19a36:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   19a38:	8533      	strh	r3, [r6, #40]	; 0x28
}
   19a3a:	b002      	add	sp, #8
   19a3c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   19a40:	f7ff bf4a 	b.w	198d8 <ull_conn_tx_demux>
   19a44:	20002b98 	.word	0x20002b98
   19a48:	0002c6cc 	.word	0x0002c6cc
   19a4c:	0002c724 	.word	0x0002c724
   19a50:	0002bfdc 	.word	0x0002bfdc
   19a54:	00015955 	.word	0x00015955
   19a58:	0002c7ac 	.word	0x0002c7ac

00019a5c <ull_conn_done>:
{
   19a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   19a5e:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   19a60:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   19a62:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19a66:	429a      	cmp	r2, r3
{
   19a68:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   19a6a:	f000 808e 	beq.w	19b8a <ull_conn_done+0x12e>
	switch (done->extra.mic_state) {
   19a6e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   19a72:	2b01      	cmp	r3, #1
   19a74:	4605      	mov	r5, r0
   19a76:	f000 810c 	beq.w	19c92 <ull_conn_done+0x236>
   19a7a:	2b02      	cmp	r3, #2
   19a7c:	f000 8087 	beq.w	19b8e <ull_conn_done+0x132>
   19a80:	2b00      	cmp	r3, #0
   19a82:	f000 80ec 	beq.w	19c5e <ull_conn_done+0x202>
	reason_final = conn->llcp_terminate.reason_final;
   19a86:	f894 3143 	ldrb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   19a8a:	2b00      	cmp	r3, #0
   19a8c:	f040 8082 	bne.w	19b94 <ull_conn_done+0x138>
	latency_event = lll->latency_event;
   19a90:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   19a92:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (done->extra.trx_cnt) {
   19a96:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   19a98:	1c7e      	adds	r6, r7, #1
   19a9a:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   19a9c:	2b00      	cmp	r3, #0
   19a9e:	f000 80ab 	beq.w	19bf8 <ull_conn_done+0x19c>
		} else if (lll->role) {
   19aa2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19aa6:	2b00      	cmp	r3, #0
   19aa8:	f2c0 8125 	blt.w	19cf6 <ull_conn_done+0x29a>
	if (done->extra.crc_valid) {
   19aac:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   19ab0:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   19ab2:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   19ab4:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   19ab8:	f140 80f1 	bpl.w	19c9e <ull_conn_done+0x242>
		conn->supervision_expire = 0U;
   19abc:	2500      	movs	r5, #0
   19abe:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   19ac2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   19ac6:	b12b      	cbz	r3, 19ad4 <ull_conn_done+0x78>
		if (conn->procedure_expire > elapsed_event) {
   19ac8:	42b3      	cmp	r3, r6
   19aca:	f240 8150 	bls.w	19d6e <ull_conn_done+0x312>
			conn->procedure_expire -= elapsed_event;
   19ace:	1b9b      	subs	r3, r3, r6
   19ad0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   19ad4:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   19ad8:	b12b      	cbz	r3, 19ae6 <ull_conn_done+0x8a>
		if (conn->apto_expire > elapsed_event) {
   19ada:	42b3      	cmp	r3, r6
   19adc:	f240 8117 	bls.w	19d0e <ull_conn_done+0x2b2>
			conn->apto_expire -= elapsed_event;
   19ae0:	1b9b      	subs	r3, r3, r6
   19ae2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   19ae6:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   19aea:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   19aee:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   19af2:	b15a      	cbz	r2, 19b0c <ull_conn_done+0xb0>
		if (conn->appto_expire > elapsed_event) {
   19af4:	42b2      	cmp	r2, r6
   19af6:	f200 80e2 	bhi.w	19cbe <ull_conn_done+0x262>
			if ((conn->procedure_expire == 0U) &&
   19afa:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   19afe:	2000      	movs	r0, #0
   19b00:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   19b04:	b912      	cbnz	r2, 19b0c <ull_conn_done+0xb0>
   19b06:	4299      	cmp	r1, r3
   19b08:	f000 813f 	beq.w	19d8a <ull_conn_done+0x32e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19b0c:	1a5b      	subs	r3, r3, r1
   19b0e:	f003 0303 	and.w	r3, r3, #3
   19b12:	2b02      	cmp	r3, #2
   19b14:	f000 80dc 	beq.w	19cd0 <ull_conn_done+0x274>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   19b18:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   19b1c:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   19b20:	429a      	cmp	r2, r3
   19b22:	f000 8108 	beq.w	19d36 <ull_conn_done+0x2da>
		lll->latency_event = 0U;
   19b26:	2200      	movs	r2, #0
   19b28:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19b2a:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   19b2e:	b915      	cbnz	r5, 19b36 <ull_conn_done+0xda>
   19b30:	42ba      	cmp	r2, r7
   19b32:	f000 80da 	beq.w	19cea <ull_conn_done+0x28e>
		lazy = lll->latency_event + 1U;
   19b36:	3201      	adds	r2, #1
   19b38:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19b3a:	b913      	cbnz	r3, 19b42 <ull_conn_done+0xe6>
   19b3c:	2e00      	cmp	r6, #0
   19b3e:	f000 80b7 	beq.w	19cb0 <ull_conn_done+0x254>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   19b44:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b46:	9504      	str	r5, [sp, #16]
   19b48:	2000      	movs	r0, #0
   19b4a:	4da6      	ldr	r5, [pc, #664]	; (19de4 <ull_conn_done+0x388>)
   19b4c:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   19b4e:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   19b50:	e9cd 0001 	strd	r0, r0, [sp, #4]
   19b54:	9406      	str	r4, [sp, #24]
   19b56:	9600      	str	r6, [sp, #0]
   19b58:	b2d2      	uxtb	r2, r2
   19b5a:	2101      	movs	r1, #1
   19b5c:	9505      	str	r5, [sp, #20]
   19b5e:	f7f7 fd97 	bl	11690 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19b62:	f030 0302 	bics.w	r3, r0, #2
   19b66:	d010      	beq.n	19b8a <ull_conn_done+0x12e>
   19b68:	f7fa fad2 	bl	14110 <ull_disable_mark_get>
   19b6c:	4284      	cmp	r4, r0
   19b6e:	d00c      	beq.n	19b8a <ull_conn_done+0x12e>
   19b70:	4a9d      	ldr	r2, [pc, #628]	; (19de8 <ull_conn_done+0x38c>)
   19b72:	499e      	ldr	r1, [pc, #632]	; (19dec <ull_conn_done+0x390>)
   19b74:	489e      	ldr	r0, [pc, #632]	; (19df0 <ull_conn_done+0x394>)
   19b76:	f240 63cd 	movw	r3, #1741	; 0x6cd
   19b7a:	f00b f9c4 	bl	24f06 <printk>
   19b7e:	4040      	eors	r0, r0
   19b80:	f380 8811 	msr	BASEPRI, r0
   19b84:	f04f 0003 	mov.w	r0, #3
   19b88:	df02      	svc	2
}
   19b8a:	b00b      	add	sp, #44	; 0x2c
   19b8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   19b8e:	233d      	movs	r3, #61	; 0x3d
   19b90:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   19b94:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   19b98:	2900      	cmp	r1, #0
   19b9a:	db1a      	blt.n	19bd2 <ull_conn_done+0x176>
			       conn->llcp_terminate.ack) & 0xFF) ==
   19b9c:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   19ba0:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
   19ba4:	1a09      	subs	r1, r1, r0
			    lll->role ||
   19ba6:	b2c9      	uxtb	r1, r1
   19ba8:	2903      	cmp	r1, #3
   19baa:	d012      	beq.n	19bd2 <ull_conn_done+0x176>
			     TERM_ACKED) ||
   19bac:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
   19bb0:	f011 0004 	ands.w	r0, r1, #4
   19bb4:	d10d      	bne.n	19bd2 <ull_conn_done+0x176>
			    conn->central.terminate_ack ||
   19bb6:	2b3d      	cmp	r3, #61	; 0x3d
   19bb8:	d00b      	beq.n	19bd2 <ull_conn_done+0x176>
	latency_event = lll->latency_event;
   19bba:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   19bbc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   19bbe:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   19bc0:	e9cd 0008 	strd	r0, r0, [sp, #32]
	elapsed_event = latency_event + 1;
   19bc4:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   19bc6:	b1bb      	cbz	r3, 19bf8 <ull_conn_done+0x19c>
			conn->central.terminate_ack = 1;
   19bc8:	f041 0104 	orr.w	r1, r1, #4
   19bcc:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   19bd0:	e76c      	b.n	19aac <ull_conn_done+0x50>
	if (conn == conn_upd_curr) {
   19bd2:	4988      	ldr	r1, [pc, #544]	; (19df4 <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   19bd4:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   19bd8:	6808      	ldr	r0, [r1, #0]
	*((uint8_t *)rx->pdu) = reason;
   19bda:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   19bde:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   19be0:	bf04      	itt	eq
   19be2:	2000      	moveq	r0, #0
   19be4:	6008      	streq	r0, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19be6:	2117      	movs	r1, #23
	conn_cleanup_finalize(conn);
   19be8:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19bea:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
}
   19bee:	b00b      	add	sp, #44	; 0x2c
   19bf0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   19bf4:	f7ff bec0 	b.w	19978 <conn_cleanup_finalize>
	if (done->extra.crc_valid) {
   19bf8:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   19bfc:	f013 0301 	ands.w	r3, r3, #1
   19c00:	f47f af5c 	bne.w	19abc <ull_conn_done+0x60>
	else if (conn->connect_expire) {
   19c04:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   19c08:	2900      	cmp	r1, #0
   19c0a:	d048      	beq.n	19c9e <ull_conn_done+0x242>
		if (conn->connect_expire > elapsed_event) {
   19c0c:	42b1      	cmp	r1, r6
   19c0e:	f240 80c3 	bls.w	19d98 <ull_conn_done+0x33c>
			conn->connect_expire -= elapsed_event;
   19c12:	1b89      	subs	r1, r1, r6
	if (conn->supervision_expire) {
   19c14:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   19c18:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   19c1c:	2d00      	cmp	r5, #0
   19c1e:	f43f af50 	beq.w	19ac2 <ull_conn_done+0x66>
		if (conn->supervision_expire > elapsed_event) {
   19c22:	42ae      	cmp	r6, r5
   19c24:	f080 808f 	bcs.w	19d46 <ull_conn_done+0x2ea>
			conn->supervision_expire -= elapsed_event;
   19c28:	1bad      	subs	r5, r5, r6
   19c2a:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   19c2c:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   19c2e:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   19c32:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   19c36:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   19c38:	d97b      	bls.n	19d32 <ull_conn_done+0x2d6>
			else if (lll->role) {
   19c3a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19c3e:	42ab      	cmp	r3, r5
   19c40:	f6bf af3f 	bge.w	19ac2 <ull_conn_done+0x66>
				if (latency_event) {
   19c44:	2f00      	cmp	r7, #0
   19c46:	d174      	bne.n	19d32 <ull_conn_done+0x2d6>
					force = conn->periph.force & 0x01;
   19c48:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   19c4c:	086b      	lsrs	r3, r5, #1
					if (force) {
   19c4e:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   19c52:	bf18      	it	ne
   19c54:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   19c58:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   19c5c:	e731      	b.n	19ac2 <ull_conn_done+0x66>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19c5e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   19c62:	0718      	lsls	r0, r3, #28
   19c64:	d53b      	bpl.n	19cde <ull_conn_done+0x282>
					    (lll->latency + 6)) ?
   19c66:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   19c68:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   19c6c:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   19c6e:	4299      	cmp	r1, r3
   19c70:	bfc4      	itt	gt
   19c72:	1f8b      	subgt	r3, r1, #6
   19c74:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   19c76:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   19c7a:	bfcc      	ite	gt
   19c7c:	b29b      	uxthgt	r3, r3
   19c7e:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   19c80:	4298      	cmp	r0, r3
   19c82:	d05a      	beq.n	19d3a <ull_conn_done+0x2de>
				conn->appto_reload = appto_reload_new;
   19c84:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   19c88:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   19c8c:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   19c90:	e6f9      	b.n	19a86 <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   19c92:	2300      	movs	r3, #0
   19c94:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   19c98:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   19c9c:	e6f3      	b.n	19a86 <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   19c9e:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   19ca2:	2d00      	cmp	r5, #0
   19ca4:	d1bd      	bne.n	19c22 <ull_conn_done+0x1c6>
			conn->supervision_expire = conn->supervision_reload;
   19ca6:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   19caa:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   19cae:	e7b5      	b.n	19c1c <ull_conn_done+0x1c0>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19cb0:	2900      	cmp	r1, #0
   19cb2:	f47f af46 	bne.w	19b42 <ull_conn_done+0xe6>
   19cb6:	2d00      	cmp	r5, #0
   19cb8:	f47f af43 	bne.w	19b42 <ull_conn_done+0xe6>
   19cbc:	e765      	b.n	19b8a <ull_conn_done+0x12e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19cbe:	1a5b      	subs	r3, r3, r1
   19cc0:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   19cc4:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19cc6:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   19cc8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19ccc:	f47f af24 	bne.w	19b18 <ull_conn_done+0xbc>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   19cd0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19cd4:	3b01      	subs	r3, #1
   19cd6:	2b01      	cmp	r3, #1
   19cd8:	f63f af1e 	bhi.w	19b18 <ull_conn_done+0xbc>
   19cdc:	e723      	b.n	19b26 <ull_conn_done+0xca>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19cde:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   19ce2:	07d9      	lsls	r1, r3, #31
   19ce4:	f57f aecf 	bpl.w	19a86 <ull_conn_done+0x2a>
   19ce8:	e7bd      	b.n	19c66 <ull_conn_done+0x20a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19cea:	b913      	cbnz	r3, 19cf2 <ull_conn_done+0x296>
   19cec:	2e00      	cmp	r6, #0
   19cee:	f43f af4c 	beq.w	19b8a <ull_conn_done+0x12e>
	lazy = 0U;
   19cf2:	4629      	mov	r1, r5
   19cf4:	e725      	b.n	19b42 <ull_conn_done+0xe6>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   19cf6:	aa08      	add	r2, sp, #32
   19cf8:	a909      	add	r1, sp, #36	; 0x24
   19cfa:	4628      	mov	r0, r5
   19cfc:	f7e7 fac0 	bl	1280 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   19d00:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   19d04:	2b00      	cmp	r3, #0
   19d06:	d058      	beq.n	19dba <ull_conn_done+0x35e>
				lll->latency_event = 0;
   19d08:	2300      	movs	r3, #0
   19d0a:	8623      	strh	r3, [r4, #48]	; 0x30
   19d0c:	e6ce      	b.n	19aac <ull_conn_done+0x50>
			rx = ll_pdu_rx_alloc();
   19d0e:	f7fa f977 	bl	14000 <ll_pdu_rx_alloc>
			if (rx) {
   19d12:	4601      	mov	r1, r0
   19d14:	2800      	cmp	r0, #0
   19d16:	d034      	beq.n	19d82 <ull_conn_done+0x326>
				rx->handle = lll->handle;
   19d18:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   19d1a:	2200      	movs	r2, #0
   19d1c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   19d20:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   19d22:	231a      	movs	r3, #26
   19d24:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   19d26:	6800      	ldr	r0, [r0, #0]
   19d28:	f7fa f93c 	bl	13fa4 <ll_rx_put>
				ll_rx_sched();
   19d2c:	f7fa f944 	bl	13fb8 <ll_rx_sched>
   19d30:	e6d9      	b.n	19ae6 <ull_conn_done+0x8a>
					force = 1U;
   19d32:	2501      	movs	r5, #1
   19d34:	e6c5      	b.n	19ac2 <ull_conn_done+0x66>
	if ((force) || (latency_event != lll->latency_event)) {
   19d36:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   19d38:	e6f7      	b.n	19b2a <ull_conn_done+0xce>
			if (conn->apto_expire == 0U) {
   19d3a:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   19d3e:	2800      	cmp	r0, #0
   19d40:	f47f aea1 	bne.w	19a86 <ull_conn_done+0x2a>
   19d44:	e7a0      	b.n	19c88 <ull_conn_done+0x22c>
	if (conn == conn_upd_curr) {
   19d46:	4b2b      	ldr	r3, [pc, #172]	; (19df4 <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   19d48:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   19d4a:	681a      	ldr	r2, [r3, #0]
   19d4c:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   19d4e:	bf04      	itt	eq
   19d50:	2200      	moveq	r2, #0
   19d52:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19d54:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   19d56:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   19d58:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19d5c:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   19d60:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   19d64:	4620      	mov	r0, r4
   19d66:	f7ff fe07 	bl	19978 <conn_cleanup_finalize>
}
   19d6a:	b00b      	add	sp, #44	; 0x2c
   19d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn == conn_upd_curr) {
   19d6e:	4b21      	ldr	r3, [pc, #132]	; (19df4 <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   19d70:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   19d72:	681a      	ldr	r2, [r3, #0]
   19d74:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   19d76:	bf04      	itt	eq
   19d78:	2200      	moveq	r2, #0
   19d7a:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19d7c:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   19d7e:	2322      	movs	r3, #34	; 0x22
   19d80:	e7ea      	b.n	19d58 <ull_conn_done+0x2fc>
				conn->apto_expire = 1U;
   19d82:	2301      	movs	r3, #1
   19d84:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   19d88:	e6ad      	b.n	19ae6 <ull_conn_done+0x8a>
				conn->llcp_type = LLCP_PING;
   19d8a:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   19d8c:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   19d8e:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   19d92:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   19d96:	e6bf      	b.n	19b18 <ull_conn_done+0xbc>
	if (conn == conn_upd_curr) {
   19d98:	4916      	ldr	r1, [pc, #88]	; (19df4 <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   19d9a:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   19d9e:	6808      	ldr	r0, [r1, #0]
   19da0:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   19da2:	bf08      	it	eq
   19da4:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19da6:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
   19da8:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   19daa:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   19dae:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   19db2:	4620      	mov	r0, r4
   19db4:	f7ff fde0 	bl	19978 <conn_cleanup_finalize>
}
   19db8:	e6e7      	b.n	19b8a <ull_conn_done+0x12e>
				ull_conn_tx_demux(UINT8_MAX);
   19dba:	20ff      	movs	r0, #255	; 0xff
   19dbc:	f7ff fd8c 	bl	198d8 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   19dc0:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   19dc4:	2a00      	cmp	r2, #0
   19dc6:	d19f      	bne.n	19d08 <ull_conn_done+0x2ac>
   19dc8:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   19dcc:	f7f6 f9b8 	bl	10140 <memq_peek>
   19dd0:	2800      	cmp	r0, #0
   19dd2:	d199      	bne.n	19d08 <ull_conn_done+0x2ac>
			} else if (lll->periph.latency_enabled) {
   19dd4:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   19dd8:	075a      	lsls	r2, r3, #29
   19dda:	f57f ae67 	bpl.w	19aac <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
   19dde:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   19de0:	8623      	strh	r3, [r4, #48]	; 0x30
   19de2:	e663      	b.n	19aac <ull_conn_done+0x50>
   19de4:	00015b41 	.word	0x00015b41
   19de8:	0002c6cc 	.word	0x0002c6cc
   19dec:	0002c828 	.word	0x0002c828
   19df0:	0002bfdc 	.word	0x0002bfdc
   19df4:	20002a50 	.word	0x20002a50

00019df8 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   19df8:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   19dfc:	2b00      	cmp	r3, #0
   19dfe:	f000 80e7 	beq.w	19fd0 <ull_conn_tx_lll_enqueue+0x1d8>
   19e02:	3901      	subs	r1, #1
{
   19e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   19e08:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 19fd4 <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   19e0c:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 19fd8 <ull_conn_tx_lll_enqueue+0x1e0>
   19e10:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 19fdc <ull_conn_tx_lll_enqueue+0x1e4>
   19e14:	4604      	mov	r4, r0
   19e16:	b2cd      	uxtb	r5, r1
   19e18:	e012      	b.n	19e40 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   19e1a:	4640      	mov	r0, r8
   19e1c:	f7f6 f926 	bl	1006c <mem_acquire>
		LL_ASSERT(link);
   19e20:	4607      	mov	r7, r0
   19e22:	2800      	cmp	r0, #0
   19e24:	d066      	beq.n	19ef4 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19e26:	f104 0268 	add.w	r2, r4, #104	; 0x68
   19e2a:	4631      	mov	r1, r6
   19e2c:	4638      	mov	r0, r7
   19e2e:	f7f6 f97d 	bl	1012c <memq_enqueue>
	while (conn->tx_head &&
   19e32:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   19e36:	3d01      	subs	r5, #1
   19e38:	b2ed      	uxtb	r5, r5
   19e3a:	2b00      	cmp	r3, #0
   19e3c:	f000 8082 	beq.w	19f44 <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   19e40:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   19e44:	07d1      	lsls	r1, r2, #31
   19e46:	d403      	bmi.n	19e50 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   19e48:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   19e4c:	0792      	lsls	r2, r2, #30
   19e4e:	d55f      	bpl.n	19f10 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   19e50:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19e54:	4293      	cmp	r3, r2
   19e56:	d175      	bne.n	19f44 <ull_conn_tx_lll_enqueue+0x14c>
   19e58:	2dff      	cmp	r5, #255	; 0xff
   19e5a:	d073      	beq.n	19f44 <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19e5c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   19e60:	4620      	mov	r0, r4
   19e62:	f7fb fe8d 	bl	15b80 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19e66:	7903      	ldrb	r3, [r0, #4]
   19e68:	f003 0303 	and.w	r3, r3, #3
   19e6c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19e6e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19e70:	d1d3      	bne.n	19e1a <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   19e72:	79c3      	ldrb	r3, [r0, #7]
   19e74:	3b03      	subs	r3, #3
   19e76:	2b14      	cmp	r3, #20
   19e78:	d8cf      	bhi.n	19e1a <ull_conn_tx_lll_enqueue+0x22>
   19e7a:	a201      	add	r2, pc, #4	; (adr r2, 19e80 <ull_conn_tx_lll_enqueue+0x88>)
   19e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   19e80:	00019edd 	.word	0x00019edd
   19e84:	00019edd 	.word	0x00019edd
   19e88:	00019e1b 	.word	0x00019e1b
   19e8c:	00019e1b 	.word	0x00019e1b
   19e90:	00019e1b 	.word	0x00019e1b
   19e94:	00019e1b 	.word	0x00019e1b
   19e98:	00019e1b 	.word	0x00019e1b
   19e9c:	00019edd 	.word	0x00019edd
   19ea0:	00019ed5 	.word	0x00019ed5
   19ea4:	00019e1b 	.word	0x00019e1b
   19ea8:	00019e1b 	.word	0x00019e1b
   19eac:	00019e1b 	.word	0x00019e1b
   19eb0:	00019e1b 	.word	0x00019e1b
   19eb4:	00019e1b 	.word	0x00019e1b
   19eb8:	00019e1b 	.word	0x00019e1b
   19ebc:	00019e1b 	.word	0x00019e1b
   19ec0:	00019e1b 	.word	0x00019e1b
   19ec4:	00019e1b 	.word	0x00019e1b
   19ec8:	00019e1b 	.word	0x00019e1b
   19ecc:	00019f49 	.word	0x00019f49
   19ed0:	00019f49 	.word	0x00019f49
		if (!conn->lll.role) {
   19ed4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19ed8:	2b00      	cmp	r3, #0
   19eda:	da9e      	bge.n	19e1a <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   19edc:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   19ee0:	f043 0302 	orr.w	r3, r3, #2
   19ee4:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   19ee8:	4640      	mov	r0, r8
   19eea:	f7f6 f8bf 	bl	1006c <mem_acquire>
		LL_ASSERT(link);
   19eee:	4607      	mov	r7, r0
   19ef0:	2800      	cmp	r0, #0
   19ef2:	d198      	bne.n	19e26 <ull_conn_tx_lll_enqueue+0x2e>
   19ef4:	483a      	ldr	r0, [pc, #232]	; (19fe0 <ull_conn_tx_lll_enqueue+0x1e8>)
   19ef6:	f240 7326 	movw	r3, #1830	; 0x726
   19efa:	4652      	mov	r2, sl
   19efc:	4649      	mov	r1, r9
   19efe:	f00b f802 	bl	24f06 <printk>
   19f02:	4040      	eors	r0, r0
   19f04:	f380 8811 	msr	BASEPRI, r0
   19f08:	f04f 0003 	mov.w	r0, #3
   19f0c:	df02      	svc	2
   19f0e:	e78a      	b.n	19e26 <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19f10:	791a      	ldrb	r2, [r3, #4]
   19f12:	f002 0203 	and.w	r2, r2, #3
   19f16:	2a03      	cmp	r2, #3
   19f18:	d19e      	bne.n	19e58 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   19f1a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19f1c:	2a03      	cmp	r2, #3
   19f1e:	d001      	beq.n	19f24 <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   19f20:	2a0a      	cmp	r2, #10
   19f22:	d199      	bne.n	19e58 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   19f24:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   19f28:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   19f2c:	428a      	cmp	r2, r1
   19f2e:	d012      	beq.n	19f56 <ull_conn_tx_lll_enqueue+0x15e>
   19f30:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   19f34:	2a03      	cmp	r2, #3
   19f36:	d08f      	beq.n	19e58 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   19f38:	681a      	ldr	r2, [r3, #0]
   19f3a:	b11a      	cbz	r2, 19f44 <ull_conn_tx_lll_enqueue+0x14c>
   19f3c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   19f40:	428a      	cmp	r2, r1
   19f42:	d034      	beq.n	19fae <ull_conn_tx_lll_enqueue+0x1b6>
}
   19f44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   19f48:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   19f4c:	f043 0301 	orr.w	r3, r3, #1
   19f50:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   19f54:	e761      	b.n	19e1a <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   19f56:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   19f5a:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   19f5e:	4288      	cmp	r0, r1
   19f60:	d1ea      	bne.n	19f38 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   19f62:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   19f66:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   19f6a:	4288      	cmp	r0, r1
   19f6c:	d1e4      	bne.n	19f38 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   19f6e:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   19f72:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   19f76:	4288      	cmp	r0, r1
   19f78:	d1de      	bne.n	19f38 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   19f7a:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   19f7e:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   19f82:	4288      	cmp	r0, r1
   19f84:	d1d8      	bne.n	19f38 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   19f86:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   19f8a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   19f8e:	4288      	cmp	r0, r1
   19f90:	d1d2      	bne.n	19f38 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19f92:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   19f96:	3a02      	subs	r2, #2
   19f98:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19f9c:	2201      	movs	r2, #1
   19f9e:	f362 0301 	bfi	r3, r2, #0, #2
   19fa2:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   19fa6:	2303      	movs	r3, #3
   19fa8:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   19fac:	e754      	b.n	19e58 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   19fae:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   19fb2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   19fb6:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   19fba:	6810      	ldr	r0, [r2, #0]
   19fbc:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   19fbe:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   19fc0:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   19fc4:	2900      	cmp	r1, #0
   19fc6:	f47f af47 	bne.w	19e58 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   19fca:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   19fce:	e743      	b.n	19e58 <ull_conn_tx_lll_enqueue+0x60>
   19fd0:	4770      	bx	lr
   19fd2:	bf00      	nop
   19fd4:	20002b98 	.word	0x20002b98
   19fd8:	0002c6cc 	.word	0x0002c6cc
   19fdc:	0002c724 	.word	0x0002c724
   19fe0:	0002bfdc 	.word	0x0002bfdc

00019fe4 <tx_demux>:
{
   19fe4:	b510      	push	{r4, lr}
   19fe6:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   19fe8:	2001      	movs	r0, #1
   19fea:	f7ff fc75 	bl	198d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   19fee:	4620      	mov	r0, r4
   19ff0:	2101      	movs	r1, #1
}
   19ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   19ff6:	f7ff beff 	b.w	19df8 <ull_conn_tx_lll_enqueue>
   19ffa:	bf00      	nop

00019ffc <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   19ffc:	4901      	ldr	r1, [pc, #4]	; (1a004 <ull_conn_link_tx_release+0x8>)
   19ffe:	f7f6 b84b 	b.w	10098 <mem_release>
   1a002:	bf00      	nop
   1a004:	20002b98 	.word	0x20002b98

0001a008 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1a008:	4b01      	ldr	r3, [pc, #4]	; (1a010 <ull_conn_ack_last_idx_get+0x8>)
}
   1a00a:	78d8      	ldrb	r0, [r3, #3]
   1a00c:	4770      	bx	lr
   1a00e:	bf00      	nop
   1a010:	20000560 	.word	0x20000560

0001a014 <ull_conn_ack_peek>:
{
   1a014:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1a016:	4b0c      	ldr	r3, [pc, #48]	; (1a048 <ull_conn_ack_peek+0x34>)
   1a018:	f893 c002 	ldrb.w	ip, [r3, #2]
   1a01c:	f893 e003 	ldrb.w	lr, [r3, #3]
   1a020:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1a022:	45f4      	cmp	ip, lr
   1a024:	d00d      	beq.n	1a042 <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   1a026:	fb1c fc04 	smulbb	ip, ip, r4
   1a02a:	3304      	adds	r3, #4
   1a02c:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1a030:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   1a034:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1a038:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   1a03a:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1a03c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a03e:	6818      	ldr	r0, [r3, #0]
}
   1a040:	bd10      	pop	{r4, pc}
		return NULL;
   1a042:	2000      	movs	r0, #0
}
   1a044:	bd10      	pop	{r4, pc}
   1a046:	bf00      	nop
   1a048:	20000560 	.word	0x20000560

0001a04c <ull_conn_ack_by_last_peek>:
{
   1a04c:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1a04e:	4b0b      	ldr	r3, [pc, #44]	; (1a07c <ull_conn_ack_by_last_peek+0x30>)
   1a050:	f893 c002 	ldrb.w	ip, [r3, #2]
   1a054:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1a058:	4584      	cmp	ip, r0
   1a05a:	d00d      	beq.n	1a078 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   1a05c:	3304      	adds	r3, #4
   1a05e:	fb1c fc0e 	smulbb	ip, ip, lr
   1a062:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   1a066:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1a06a:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   1a06e:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1a070:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1a072:	6818      	ldr	r0, [r3, #0]
}
   1a074:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1a078:	2000      	movs	r0, #0
   1a07a:	e7fb      	b.n	1a074 <ull_conn_ack_by_last_peek+0x28>
   1a07c:	20000560 	.word	0x20000560

0001a080 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1a080:	4b09      	ldr	r3, [pc, #36]	; (1a0a8 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1a082:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1a084:	78da      	ldrb	r2, [r3, #3]
   1a086:	7818      	ldrb	r0, [r3, #0]
   1a088:	f893 c001 	ldrb.w	ip, [r3, #1]
   1a08c:	428a      	cmp	r2, r1
   1a08e:	d009      	beq.n	1a0a4 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1a090:	1c4a      	adds	r2, r1, #1
   1a092:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1a094:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1a098:	4594      	cmp	ip, r2
   1a09a:	bf08      	it	eq
   1a09c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1a09e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1a0a0:	709a      	strb	r2, [r3, #2]
	return mem;
   1a0a2:	4770      	bx	lr
		return NULL;
   1a0a4:	2000      	movs	r0, #0
}
   1a0a6:	4770      	bx	lr
   1a0a8:	20000560 	.word	0x20000560

0001a0ac <ull_conn_lll_ack_enqueue>:
{
   1a0ac:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1a0ae:	4a15      	ldr	r2, [pc, #84]	; (1a104 <ull_conn_lll_ack_enqueue+0x58>)
   1a0b0:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   1a0b4:	7854      	ldrb	r4, [r2, #1]
   1a0b6:	f892 e002 	ldrb.w	lr, [r2, #2]
   1a0ba:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1a0bc:	f10c 0301 	add.w	r3, ip, #1
   1a0c0:	b2db      	uxtb	r3, r3
		last = 0U;
   1a0c2:	429c      	cmp	r4, r3
   1a0c4:	bf08      	it	eq
   1a0c6:	2300      	moveq	r3, #0
	if (last == first) {
   1a0c8:	459e      	cmp	lr, r3
   1a0ca:	d00a      	beq.n	1a0e2 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1a0cc:	fb1c fc05 	smulbb	ip, ip, r5
   1a0d0:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   1a0d4:	f82e 000c 	strh.w	r0, [lr, ip]
   1a0d8:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1a0da:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1a0de:	70d3      	strb	r3, [r2, #3]
}
   1a0e0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1a0e2:	4a09      	ldr	r2, [pc, #36]	; (1a108 <ull_conn_lll_ack_enqueue+0x5c>)
   1a0e4:	4909      	ldr	r1, [pc, #36]	; (1a10c <ull_conn_lll_ack_enqueue+0x60>)
   1a0e6:	480a      	ldr	r0, [pc, #40]	; (1a110 <ull_conn_lll_ack_enqueue+0x64>)
   1a0e8:	f240 7376 	movw	r3, #1910	; 0x776
   1a0ec:	f00a ff0b 	bl	24f06 <printk>
   1a0f0:	4040      	eors	r0, r0
   1a0f2:	f380 8811 	msr	BASEPRI, r0
   1a0f6:	f04f 0003 	mov.w	r0, #3
   1a0fa:	df02      	svc	2
	lll_tx->handle = handle;
   1a0fc:	2300      	movs	r3, #0
   1a0fe:	801b      	strh	r3, [r3, #0]
   1a100:	deff      	udf	#255	; 0xff
   1a102:	bf00      	nop
   1a104:	20000560 	.word	0x20000560
   1a108:	0002c6cc 	.word	0x0002c6cc
   1a10c:	0002c714 	.word	0x0002c714
   1a110:	0002bfdc 	.word	0x0002bfdc

0001a114 <ull_conn_tx_ack>:
{
   1a114:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1a116:	7953      	ldrb	r3, [r2, #5]
{
   1a118:	b083      	sub	sp, #12
   1a11a:	4614      	mov	r4, r2
   1a11c:	4605      	mov	r5, r0
   1a11e:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1a120:	b37b      	cbz	r3, 1a182 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1a122:	7923      	ldrb	r3, [r4, #4]
   1a124:	f003 0203 	and.w	r2, r3, #3
   1a128:	2a03      	cmp	r2, #3
   1a12a:	d00d      	beq.n	1a148 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   1a12c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1a130:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1a132:	bf04      	itt	eq
   1a134:	f36f 0301 	bfceq	r3, #0, #2
   1a138:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1a13a:	4621      	mov	r1, r4
   1a13c:	4628      	mov	r0, r5
}
   1a13e:	b003      	add	sp, #12
   1a140:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1a144:	f7f9 bf72 	b.w	1402c <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1a148:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a14c:	429d      	cmp	r5, r3
   1a14e:	d126      	bne.n	1a19e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   1a150:	6830      	ldr	r0, [r6, #0]
   1a152:	4284      	cmp	r4, r0
   1a154:	d055      	beq.n	1a202 <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   1a156:	2800      	cmp	r0, #0
   1a158:	d0ef      	beq.n	1a13a <ull_conn_tx_ack+0x26>
   1a15a:	4ac1      	ldr	r2, [pc, #772]	; (1a460 <ull_conn_tx_ack+0x34c>)
   1a15c:	49c1      	ldr	r1, [pc, #772]	; (1a464 <ull_conn_tx_ack+0x350>)
   1a15e:	48c2      	ldr	r0, [pc, #776]	; (1a468 <ull_conn_tx_ack+0x354>)
   1a160:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1a164:	f00a fecf 	bl	24f06 <printk>
   1a168:	4040      	eors	r0, r0
   1a16a:	f380 8811 	msr	BASEPRI, r0
   1a16e:	f04f 0003 	mov.w	r0, #3
   1a172:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1a174:	4621      	mov	r1, r4
   1a176:	4628      	mov	r0, r5
}
   1a178:	b003      	add	sp, #12
   1a17a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1a17e:	f7f9 bf55 	b.w	1402c <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1a182:	4ab7      	ldr	r2, [pc, #732]	; (1a460 <ull_conn_tx_ack+0x34c>)
   1a184:	49b9      	ldr	r1, [pc, #740]	; (1a46c <ull_conn_tx_ack+0x358>)
   1a186:	48b8      	ldr	r0, [pc, #736]	; (1a468 <ull_conn_tx_ack+0x354>)
   1a188:	f240 7383 	movw	r3, #1923	; 0x783
   1a18c:	f00a febb 	bl	24f06 <printk>
   1a190:	4040      	eors	r0, r0
   1a192:	f380 8811 	msr	BASEPRI, r0
   1a196:	f04f 0003 	mov.w	r0, #3
   1a19a:	df02      	svc	2
   1a19c:	e7c1      	b.n	1a122 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a19e:	48b4      	ldr	r0, [pc, #720]	; (1a470 <ull_conn_tx_ack+0x35c>)
   1a1a0:	462a      	mov	r2, r5
   1a1a2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a1a6:	f7f5 ff8f 	bl	100c8 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1a1aa:	79e3      	ldrb	r3, [r4, #7]
   1a1ac:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a1ae:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1a1b0:	2b16      	cmp	r3, #22
   1a1b2:	d836      	bhi.n	1a222 <ull_conn_tx_ack+0x10e>
   1a1b4:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a1b8:	00ce00df 	.word	0x00ce00df
   1a1bc:	003b0042 	.word	0x003b0042
   1a1c0:	002e00ab 	.word	0x002e00ab
   1a1c4:	002e0035 	.word	0x002e0035
   1a1c8:	0053009a 	.word	0x0053009a
   1a1cc:	00490035 	.word	0x00490035
   1a1d0:	00350035 	.word	0x00350035
   1a1d4:	002b0035 	.word	0x002b0035
   1a1d8:	002e0035 	.word	0x002e0035
   1a1dc:	011a0147 	.word	0x011a0147
   1a1e0:	00eb0108 	.word	0x00eb0108
   1a1e4:	00bd      	.short	0x00bd
			LL_ASSERT(link->next);
   1a1e6:	4a9e      	ldr	r2, [pc, #632]	; (1a460 <ull_conn_tx_ack+0x34c>)
   1a1e8:	49a2      	ldr	r1, [pc, #648]	; (1a474 <ull_conn_tx_ack+0x360>)
   1a1ea:	489f      	ldr	r0, [pc, #636]	; (1a468 <ull_conn_tx_ack+0x354>)
   1a1ec:	f240 7392 	movw	r3, #1938	; 0x792
   1a1f0:	f00a fe89 	bl	24f06 <printk>
   1a1f4:	4040      	eors	r0, r0
   1a1f6:	f380 8811 	msr	BASEPRI, r0
   1a1fa:	f04f 0003 	mov.w	r0, #3
   1a1fe:	df02      	svc	2
   1a200:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1a202:	499d      	ldr	r1, [pc, #628]	; (1a478 <ull_conn_tx_ack+0x364>)
}
   1a204:	b003      	add	sp, #12
   1a206:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1a20a:	f7f5 bf45 	b.w	10098 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1a20e:	7a23      	ldrb	r3, [r4, #8]
   1a210:	2b03      	cmp	r3, #3
   1a212:	d01a      	beq.n	1a24a <ull_conn_tx_ack+0x136>
			conn->common.txn_lock = 0U;
   1a214:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   1a218:	f36f 0341 	bfc	r3, #1, #1
   1a21c:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			break;
   1a220:	e796      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   1a222:	6830      	ldr	r0, [r6, #0]
   1a224:	42a0      	cmp	r0, r4
   1a226:	d0ec      	beq.n	1a202 <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   1a228:	2800      	cmp	r0, #0
   1a22a:	d196      	bne.n	1a15a <ull_conn_tx_ack+0x46>
   1a22c:	e785      	b.n	1a13a <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1a22e:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
   1a232:	f043 0303 	orr.w	r3, r3, #3
   1a236:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
   1a23a:	e789      	b.n	1a150 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1a23c:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1a240:	f043 0302 	orr.w	r3, r3, #2
   1a244:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
   1a248:	e782      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1a24a:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1a24e:	f023 0303 	bic.w	r3, r3, #3
   1a252:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = 0U;
   1a256:	2300      	movs	r3, #0
   1a258:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   1a25c:	e778      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   1a25e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a262:	2b00      	cmp	r3, #0
   1a264:	dbea      	blt.n	1a23c <ull_conn_tx_ack+0x128>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a266:	7923      	ldrb	r3, [r4, #4]
   1a268:	f043 0303 	orr.w	r3, r3, #3
   1a26c:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1a26e:	2217      	movs	r2, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1a270:	2303      	movs	r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1a272:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1a274:	71e3      	strb	r3, [r4, #7]
   1a276:	f8d0 3169 	ldr.w	r3, [r0, #361]	; 0x169
   1a27a:	f8d0 216d 	ldr.w	r2, [r0, #365]	; 0x16d
   1a27e:	60e2      	str	r2, [r4, #12]
   1a280:	60a3      	str	r3, [r4, #8]
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1a282:	f890 3167 	ldrb.w	r3, [r0, #359]	; 0x167
   1a286:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1a288:	f890 3168 	ldrb.w	r3, [r0, #360]	; 0x168
   1a28c:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1a28e:	210c      	movs	r1, #12
   1a290:	f104 0012 	add.w	r0, r4, #18
   1a294:	f002 fa78 	bl	1c788 <lll_csrand_isr_get>
	    conn->tx_head &&
   1a298:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
	if (
   1a29c:	2b00      	cmp	r3, #0
   1a29e:	f000 80f2 	beq.w	1a486 <ull_conn_tx_ack+0x372>
	    !conn->llcp_enc.pause_tx &&
   1a2a2:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
	    conn->tx_head &&
   1a2a6:	0791      	lsls	r1, r2, #30
   1a2a8:	f100 80ed 	bmi.w	1a486 <ull_conn_tx_ack+0x372>
	    !conn->llcp_phy.pause_tx &&
   1a2ac:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
   1a2b0:	07d2      	lsls	r2, r2, #31
   1a2b2:	f100 80e8 	bmi.w	1a486 <ull_conn_tx_ack+0x372>
		if (conn->tx_head == conn->tx_data) {
   1a2b6:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a2ba:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1a2be:	428b      	cmp	r3, r1
   1a2c0:	f000 8100 	beq.w	1a4c4 <ull_conn_tx_ack+0x3b0>
		} else if (!conn->tx_ctrl) {
   1a2c4:	2a00      	cmp	r2, #0
   1a2c6:	f000 810a 	beq.w	1a4de <ull_conn_tx_ack+0x3ca>
	tx->next = conn->tx_ctrl_last->next;
   1a2ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
   1a2ce:	681a      	ldr	r2, [r3, #0]
   1a2d0:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1a2d2:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1a2d4:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1a2d6:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
		if (link->next == (void *)tx) {
   1a2da:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   1a2dc:	2b00      	cmp	r3, #0
   1a2de:	f000 80cf 	beq.w	1a480 <ull_conn_tx_ack+0x36c>
		if (link->next == (void *)tx) {
   1a2e2:	2a00      	cmp	r2, #0
   1a2e4:	f43f af7f 	beq.w	1a1e6 <ull_conn_tx_ack+0xd2>
}
   1a2e8:	b003      	add	sp, #12
   1a2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   1a2ec:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1a2f0:	f023 0306 	bic.w	r3, r3, #6
   1a2f4:	f043 0306 	orr.w	r3, r3, #6
   1a2f8:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   1a2fc:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   1a300:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1a304:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
   1a308:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
		break;
   1a30c:	e720      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1a30e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a312:	2b00      	cmp	r3, #0
   1a314:	da8b      	bge.n	1a22e <ull_conn_tx_ack+0x11a>
			conn->llcp_enc.pause_rx = 0U;
   1a316:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1a31a:	f023 0303 	bic.w	r3, r3, #3
   1a31e:	f880 3166 	strb.w	r3, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   1a322:	2300      	movs	r3, #0
   1a324:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   1a328:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
   1a32c:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
   1a330:	e70e      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1a332:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1a336:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   1a33a:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   1a33e:	f363 1206 	bfi	r2, r3, #4, #3
   1a342:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1a346:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
   1a34a:	f36f 0300 	bfc	r3, #0, #1
   1a34e:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
		break;
   1a352:	e6fd      	b.n	1a150 <ull_conn_tx_ack+0x3c>
   1a354:	f8d4 3012 	ldr.w	r3, [r4, #18]
   1a358:	f8d4 2016 	ldr.w	r2, [r4, #22]
   1a35c:	f8c0 20fa 	str.w	r2, [r0, #250]	; 0xfa
   1a360:	f8c0 30f6 	str.w	r3, [r0, #246]	; 0xf6
   1a364:	f8d4 301a 	ldr.w	r3, [r4, #26]
   1a368:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
		conn->llcp_enc.pause_tx = 1U;
   1a36c:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1a370:	f043 0302 	orr.w	r3, r3, #2
   1a374:	e7c0      	b.n	1a2f8 <ull_conn_tx_ack+0x1e4>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1a376:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1a378:	2b13      	cmp	r3, #19
   1a37a:	bf08      	it	eq
   1a37c:	2316      	moveq	r3, #22
   1a37e:	f880 3143 	strb.w	r3, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   1a382:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   1a386:	3b01      	subs	r3, #1
   1a388:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
	break;
   1a38c:	e6e0      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1a38e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a392:	2b00      	cmp	r3, #0
   1a394:	dad7      	bge.n	1a346 <ull_conn_tx_ack+0x232>
				conn->common.txn_lock = 0U;
   1a396:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1a39a:	4b38      	ldr	r3, [pc, #224]	; (1a47c <ull_conn_tx_ack+0x368>)
				conn->common.txn_lock = 0U;
   1a39c:	f36f 0241 	bfc	r2, #1, #1
   1a3a0:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1a3a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a3a8:	ab02      	add	r3, sp, #8
   1a3aa:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1a3ae:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
   1a3b2:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   1a3b6:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   1a3ba:	f003 0307 	and.w	r3, r3, #7
   1a3be:	a902      	add	r1, sp, #8
   1a3c0:	440b      	add	r3, r1
   1a3c2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1a3c6:	e7ba      	b.n	1a33e <ull_conn_tx_ack+0x22a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1a3c8:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   1a3cc:	2202      	movs	r2, #2
   1a3ce:	f362 0301 	bfi	r3, r2, #0, #2
   1a3d2:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   1a3d6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1a3da:	2b00      	cmp	r3, #0
   1a3dc:	dab3      	bge.n	1a346 <ull_conn_tx_ack+0x232>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1a3de:	4b27      	ldr	r3, [pc, #156]	; (1a47c <ull_conn_tx_ack+0x368>)
   1a3e0:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a3e4:	ab02      	add	r3, sp, #8
   1a3e6:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   1a3ea:	e7e0      	b.n	1a3ae <ull_conn_tx_ack+0x29a>
		conn->common.txn_lock = 0U;
   1a3ec:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1a3f0:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   1a3f4:	f36f 0341 	bfc	r3, #1, #1
   1a3f8:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1a3fc:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
   1a400:	428b      	cmp	r3, r1
   1a402:	f43f aea5 	beq.w	1a150 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1a406:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   1a40a:	f002 0307 	and.w	r3, r2, #7
   1a40e:	2b03      	cmp	r3, #3
   1a410:	d005      	beq.n	1a41e <ull_conn_tx_ack+0x30a>
   1a412:	3303      	adds	r3, #3
   1a414:	f003 0307 	and.w	r3, r3, #7
   1a418:	2b01      	cmp	r3, #1
   1a41a:	f63f af02 	bhi.w	1a222 <ull_conn_tx_ack+0x10e>
				conn->lll.max_tx_octets =
   1a41e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
   1a422:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   1a426:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
   1a42a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1a42e:	f002 0307 	and.w	r3, r2, #7
   1a432:	2b05      	cmp	r3, #5
   1a434:	d032      	beq.n	1a49c <ull_conn_tx_ack+0x388>
				if (!conn->llcp_length.cache.tx_octets) {
   1a436:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
   1a43a:	bbab      	cbnz	r3, 1a4a8 <ull_conn_tx_ack+0x394>
					conn->llcp_length.ack =
   1a43c:	f887 11ad 	strb.w	r1, [r7, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   1a440:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   1a444:	e684      	b.n	1a150 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1a446:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1a44a:	f003 0207 	and.w	r2, r3, #7
   1a44e:	2a01      	cmp	r2, #1
   1a450:	f47f ae7e 	bne.w	1a150 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1a454:	2202      	movs	r2, #2
   1a456:	f362 0302 	bfi	r3, r2, #0, #3
   1a45a:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
   1a45e:	e677      	b.n	1a150 <ull_conn_tx_ack+0x3c>
   1a460:	0002c6cc 	.word	0x0002c6cc
   1a464:	0002c890 	.word	0x0002c890
   1a468:	0002bfdc 	.word	0x0002bfdc
   1a46c:	0002c884 	.word	0x0002c884
   1a470:	20001a30 	.word	0x20001a30
   1a474:	0002c89c 	.word	0x0002c89c
   1a478:	20002ae4 	.word	0x20002ae4
   1a47c:	0002c8a8 	.word	0x0002c8a8
		conn->tx_data_last = tx;
   1a480:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
   1a484:	e72d      	b.n	1a2e2 <ull_conn_tx_ack+0x1ce>
		if (!conn->tx_ctrl) {
   1a486:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   1a48a:	2a00      	cmp	r2, #0
   1a48c:	f47f af1d 	bne.w	1a2ca <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head;
   1a490:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1a492:	e9c7 4471 	strd	r4, r4, [r7, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a496:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
   1a49a:	e71e      	b.n	1a2da <ull_conn_tx_ack+0x1c6>
					conn->llcp_length.state =
   1a49c:	2304      	movs	r3, #4
   1a49e:	f363 0202 	bfi	r2, r3, #0, #3
   1a4a2:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
					break;
   1a4a6:	e653      	b.n	1a150 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   1a4a8:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1a4ac:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a4ae:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1a4b2:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1a4b6:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1a4ba:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1a4be:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
				break;
   1a4c2:	e645      	b.n	1a150 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   1a4c4:	6819      	ldr	r1, [r3, #0]
   1a4c6:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a4ca:	2a00      	cmp	r2, #0
   1a4cc:	f47f aefd 	bne.w	1a2ca <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head->next;
   1a4d0:	681a      	ldr	r2, [r3, #0]
   1a4d2:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1a4d4:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1a4d6:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1a4d8:	e9c7 4472 	strd	r4, r4, [r7, #456]	; 0x1c8
   1a4dc:	e6fd      	b.n	1a2da <ull_conn_tx_ack+0x1c6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a4de:	791a      	ldrb	r2, [r3, #4]
   1a4e0:	f002 0203 	and.w	r2, r2, #3
   1a4e4:	2a03      	cmp	r2, #3
   1a4e6:	d002      	beq.n	1a4ee <ull_conn_tx_ack+0x3da>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a4e8:	e9c7 3372 	strd	r3, r3, [r7, #456]	; 0x1c8
   1a4ec:	e6ed      	b.n	1a2ca <ull_conn_tx_ack+0x1b6>
	    ((pdu_data_tx->llctrl.opcode !=
   1a4ee:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a4f0:	2a03      	cmp	r2, #3
   1a4f2:	d0ed      	beq.n	1a4d0 <ull_conn_tx_ack+0x3bc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a4f4:	2a0a      	cmp	r2, #10
   1a4f6:	d1f7      	bne.n	1a4e8 <ull_conn_tx_ack+0x3d4>
   1a4f8:	e7ea      	b.n	1a4d0 <ull_conn_tx_ack+0x3bc>
   1a4fa:	bf00      	nop

0001a4fc <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1a4fc:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1a500:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1a504:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1a506:	bf03      	ittte	eq
   1a508:	3301      	addeq	r3, #1
   1a50a:	f880 30e4 	strbeq.w	r3, [r0, #228]	; 0xe4
	return 0;
   1a50e:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a510:	200c      	movne	r0, #12
}
   1a512:	4770      	bx	lr

0001a514 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1a514:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a518:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   1a51c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1a520:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a522:	bf14      	ite	ne
   1a524:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1a526:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1a528:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   1a52c:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1a52e:	bf14      	ite	ne
   1a530:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1a532:	3b0b      	subeq	r3, #11
   1a534:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1a536:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1a538:	bf44      	itt	mi
   1a53a:	3b04      	submi	r3, #4
   1a53c:	b29b      	uxthmi	r3, r3
}
   1a53e:	4298      	cmp	r0, r3
   1a540:	bf28      	it	cs
   1a542:	4618      	movcs	r0, r3
   1a544:	4770      	bx	lr
   1a546:	bf00      	nop

0001a548 <ull_pdu_data_init>:
}
   1a548:	4770      	bx	lr
   1a54a:	bf00      	nop

0001a54c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   1a54c:	b510      	push	{r4, lr}
   1a54e:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1a550:	b930      	cbnz	r0, 1a560 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   1a552:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1a556:	f36f 0382 	bfc	r3, #2, #1
   1a55a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1a55e:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1a560:	4a09      	ldr	r2, [pc, #36]	; (1a588 <ticker_update_latency_cancel_op_cb+0x3c>)
   1a562:	490a      	ldr	r1, [pc, #40]	; (1a58c <ticker_update_latency_cancel_op_cb+0x40>)
   1a564:	480a      	ldr	r0, [pc, #40]	; (1a590 <ticker_update_latency_cancel_op_cb+0x44>)
   1a566:	f240 23af 	movw	r3, #687	; 0x2af
   1a56a:	f00a fccc 	bl	24f06 <printk>
   1a56e:	4040      	eors	r0, r0
   1a570:	f380 8811 	msr	BASEPRI, r0
   1a574:	f04f 0003 	mov.w	r0, #3
   1a578:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   1a57a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1a57e:	f36f 0382 	bfc	r3, #2, #1
   1a582:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1a586:	bd10      	pop	{r4, pc}
   1a588:	0002c8c8 	.word	0x0002c8c8
   1a58c:	0002c910 	.word	0x0002c910
   1a590:	0002bfdc 	.word	0x0002bfdc

0001a594 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a594:	b900      	cbnz	r0, 1a598 <ticker_op_cb+0x4>
   1a596:	4770      	bx	lr
{
   1a598:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a59a:	4a07      	ldr	r2, [pc, #28]	; (1a5b8 <ticker_op_cb+0x24>)
   1a59c:	4907      	ldr	r1, [pc, #28]	; (1a5bc <ticker_op_cb+0x28>)
   1a59e:	4808      	ldr	r0, [pc, #32]	; (1a5c0 <ticker_op_cb+0x2c>)
   1a5a0:	f240 23a7 	movw	r3, #679	; 0x2a7
   1a5a4:	f00a fcaf 	bl	24f06 <printk>
   1a5a8:	4040      	eors	r0, r0
   1a5aa:	f380 8811 	msr	BASEPRI, r0
   1a5ae:	f04f 0003 	mov.w	r0, #3
   1a5b2:	df02      	svc	2
}
   1a5b4:	bd08      	pop	{r3, pc}
   1a5b6:	bf00      	nop
   1a5b8:	0002c8c8 	.word	0x0002c8c8
   1a5bc:	0002c72c 	.word	0x0002c72c
   1a5c0:	0002bfdc 	.word	0x0002bfdc

0001a5c4 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1a5c4:	2801      	cmp	r0, #1
   1a5c6:	d000      	beq.n	1a5ca <ticker_op_stop_adv_cb+0x6>
   1a5c8:	4770      	bx	lr
{
   1a5ca:	b510      	push	{r4, lr}
   1a5cc:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1a5ce:	f7f9 fd9f 	bl	14110 <ull_disable_mark_get>
   1a5d2:	4284      	cmp	r4, r0
   1a5d4:	d00c      	beq.n	1a5f0 <ticker_op_stop_adv_cb+0x2c>
   1a5d6:	4a07      	ldr	r2, [pc, #28]	; (1a5f4 <ticker_op_stop_adv_cb+0x30>)
   1a5d8:	4907      	ldr	r1, [pc, #28]	; (1a5f8 <ticker_op_stop_adv_cb+0x34>)
   1a5da:	4808      	ldr	r0, [pc, #32]	; (1a5fc <ticker_op_stop_adv_cb+0x38>)
   1a5dc:	f240 239f 	movw	r3, #671	; 0x29f
   1a5e0:	f00a fc91 	bl	24f06 <printk>
   1a5e4:	4040      	eors	r0, r0
   1a5e6:	f380 8811 	msr	BASEPRI, r0
   1a5ea:	f04f 0003 	mov.w	r0, #3
   1a5ee:	df02      	svc	2
}
   1a5f0:	bd10      	pop	{r4, pc}
   1a5f2:	bf00      	nop
   1a5f4:	0002c8c8 	.word	0x0002c8c8
   1a5f8:	0002c924 	.word	0x0002c924
   1a5fc:	0002bfdc 	.word	0x0002bfdc

0001a600 <ull_periph_ticker_cb>:
{
   1a600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a604:	9c07      	ldr	r4, [sp, #28]
   1a606:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a60a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1a60c:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a60e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a612:	4299      	cmp	r1, r3
   1a614:	d026      	beq.n	1a664 <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1a616:	4606      	mov	r6, r0
   1a618:	4617      	mov	r7, r2
   1a61a:	4601      	mov	r1, r0
   1a61c:	462a      	mov	r2, r5
   1a61e:	4620      	mov	r0, r4
   1a620:	f7fd fe8c 	bl	1833c <ull_conn_llcp>
		if (ret) {
   1a624:	b9f0      	cbnz	r0, 1a664 <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   1a626:	7823      	ldrb	r3, [r4, #0]
   1a628:	3301      	adds	r3, #1
   1a62a:	b2db      	uxtb	r3, r3
   1a62c:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1a62e:	b34b      	cbz	r3, 1a684 <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1a630:	491b      	ldr	r1, [pc, #108]	; (1a6a0 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   1a632:	4b1c      	ldr	r3, [pc, #112]	; (1a6a4 <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   1a634:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1a636:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a63a:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1a63c:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1a63e:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1a642:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1a646:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a648:	2001      	movs	r0, #1
   1a64a:	4611      	mov	r1, r2
   1a64c:	f7f5 fde2 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!err);
   1a650:	b950      	cbnz	r0, 1a668 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1a652:	20ff      	movs	r0, #255	; 0xff
   1a654:	f7ff f940 	bl	198d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a658:	4620      	mov	r0, r4
   1a65a:	21ff      	movs	r1, #255	; 0xff
}
   1a65c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a660:	f7ff bbca 	b.w	19df8 <ull_conn_tx_lll_enqueue>
}
   1a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1a668:	4a0f      	ldr	r2, [pc, #60]	; (1a6a8 <ull_periph_ticker_cb+0xa8>)
   1a66a:	4910      	ldr	r1, [pc, #64]	; (1a6ac <ull_periph_ticker_cb+0xac>)
   1a66c:	4810      	ldr	r0, [pc, #64]	; (1a6b0 <ull_periph_ticker_cb+0xb0>)
   1a66e:	f240 232a 	movw	r3, #554	; 0x22a
   1a672:	f00a fc48 	bl	24f06 <printk>
   1a676:	4040      	eors	r0, r0
   1a678:	f380 8811 	msr	BASEPRI, r0
   1a67c:	f04f 0003 	mov.w	r0, #3
   1a680:	df02      	svc	2
   1a682:	e7e6      	b.n	1a652 <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   1a684:	4a08      	ldr	r2, [pc, #32]	; (1a6a8 <ull_periph_ticker_cb+0xa8>)
   1a686:	490b      	ldr	r1, [pc, #44]	; (1a6b4 <ull_periph_ticker_cb+0xb4>)
   1a688:	4809      	ldr	r0, [pc, #36]	; (1a6b0 <ull_periph_ticker_cb+0xb0>)
   1a68a:	f240 231d 	movw	r3, #541	; 0x21d
   1a68e:	f00a fc3a 	bl	24f06 <printk>
   1a692:	4040      	eors	r0, r0
   1a694:	f380 8811 	msr	BASEPRI, r0
   1a698:	f04f 0003 	mov.w	r0, #3
   1a69c:	df02      	svc	2
   1a69e:	e7c7      	b.n	1a630 <ull_periph_ticker_cb+0x30>
   1a6a0:	20002bec 	.word	0x20002bec
   1a6a4:	20000628 	.word	0x20000628
   1a6a8:	0002c8c8 	.word	0x0002c8c8
   1a6ac:	0002c354 	.word	0x0002c354
   1a6b0:	0002bfdc 	.word	0x0002bfdc
   1a6b4:	0002c60c 	.word	0x0002c60c

0001a6b8 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   1a6b8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1a6ba:	b123      	cbz	r3, 1a6c6 <ull_periph_latency_cancel+0xe>
   1a6bc:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1a6c0:	f012 0304 	ands.w	r3, r2, #4
   1a6c4:	d000      	beq.n	1a6c8 <ull_periph_latency_cancel+0x10>
   1a6c6:	4770      	bx	lr
{
   1a6c8:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   1a6ca:	f042 0204 	orr.w	r2, r2, #4
{
   1a6ce:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a6d0:	4c11      	ldr	r4, [pc, #68]	; (1a718 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   1a6d2:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a6d6:	3105      	adds	r1, #5
   1a6d8:	2201      	movs	r2, #1
   1a6da:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1a6de:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1a6e2:	e9cd 3300 	strd	r3, r3, [sp]
   1a6e6:	9006      	str	r0, [sp, #24]
   1a6e8:	b2ca      	uxtb	r2, r1
   1a6ea:	4618      	mov	r0, r3
   1a6ec:	2103      	movs	r1, #3
   1a6ee:	f7f6 ffcf 	bl	11690 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a6f2:	f030 0302 	bics.w	r3, r0, #2
   1a6f6:	d00c      	beq.n	1a712 <ull_periph_latency_cancel+0x5a>
   1a6f8:	4a08      	ldr	r2, [pc, #32]	; (1a71c <ull_periph_latency_cancel+0x64>)
   1a6fa:	4909      	ldr	r1, [pc, #36]	; (1a720 <ull_periph_latency_cancel+0x68>)
   1a6fc:	4809      	ldr	r0, [pc, #36]	; (1a724 <ull_periph_latency_cancel+0x6c>)
   1a6fe:	f240 13e3 	movw	r3, #483	; 0x1e3
   1a702:	f00a fc00 	bl	24f06 <printk>
   1a706:	4040      	eors	r0, r0
   1a708:	f380 8811 	msr	BASEPRI, r0
   1a70c:	f04f 0003 	mov.w	r0, #3
   1a710:	df02      	svc	2
}
   1a712:	b008      	add	sp, #32
   1a714:	bd10      	pop	{r4, pc}
   1a716:	bf00      	nop
   1a718:	0001a54d 	.word	0x0001a54d
   1a71c:	0002c8c8 	.word	0x0002c8c8
   1a720:	0002c7ac 	.word	0x0002c7ac
   1a724:	0002bfdc 	.word	0x0002bfdc

0001a728 <ll_start_enc_req_send>:
{
   1a728:	b538      	push	{r3, r4, r5, lr}
   1a72a:	460c      	mov	r4, r1
   1a72c:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1a72e:	f7fb fe3f 	bl	163b0 <ll_connected_get>
	if (!conn) {
   1a732:	2800      	cmp	r0, #0
   1a734:	d048      	beq.n	1a7c8 <ll_start_enc_req_send+0xa0>
	if (error_code) {
   1a736:	4603      	mov	r3, r0
   1a738:	b9fc      	cbnz	r4, 1a77a <ll_start_enc_req_send+0x52>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1a73a:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   1a73e:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   1a742:	4291      	cmp	r1, r2
   1a744:	d037      	beq.n	1a7b6 <ll_start_enc_req_send+0x8e>
   1a746:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   1a74a:	2a03      	cmp	r2, #3
   1a74c:	d133      	bne.n	1a7b6 <ll_start_enc_req_send+0x8e>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a74e:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
   1a752:	f8d5 e000 	ldr.w	lr, [r5]
   1a756:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1a75a:	68a9      	ldr	r1, [r5, #8]
	return 0;
   1a75c:	4620      	mov	r0, r4
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a75e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   1a762:	68ec      	ldr	r4, [r5, #12]
   1a764:	f8c3 417d 	str.w	r4, [r3, #381]	; 0x17d
   1a768:	f8c3 e171 	str.w	lr, [r3, #369]	; 0x171
   1a76c:	f8c3 c175 	str.w	ip, [r3, #373]	; 0x175
   1a770:	f8c3 1179 	str.w	r1, [r3, #377]	; 0x179
   1a774:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
}
   1a778:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1a77a:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1a77e:	f010 0004 	ands.w	r0, r0, #4
   1a782:	d112      	bne.n	1a7aa <ll_start_enc_req_send+0x82>
			if ((conn->llcp_req == conn->llcp_ack) ||
   1a784:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
   1a788:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
   1a78c:	4291      	cmp	r1, r2
   1a78e:	d012      	beq.n	1a7b6 <ll_start_enc_req_send+0x8e>
   1a790:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
   1a794:	2a03      	cmp	r2, #3
   1a796:	d10e      	bne.n	1a7b6 <ll_start_enc_req_send+0x8e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a798:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   1a79c:	f883 40f5 	strb.w	r4, [r3, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1a7a0:	f360 0201 	bfi	r2, r0, #0, #2
   1a7a4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
   1a7a8:	bd38      	pop	{r3, r4, r5, pc}
			    conn->llcp_terminate.req) {
   1a7aa:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1a7ae:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
   1a7b2:	428a      	cmp	r2, r1
   1a7b4:	d001      	beq.n	1a7ba <ll_start_enc_req_send+0x92>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1a7b6:	200c      	movs	r0, #12
}
   1a7b8:	bd38      	pop	{r3, r4, r5, pc}
			conn->llcp_terminate.req++;
   1a7ba:	3201      	adds	r2, #1
			conn->llcp_terminate.reason_own = error_code;
   1a7bc:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
			conn->llcp_terminate.req++;
   1a7c0:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	return 0;
   1a7c4:	2000      	movs	r0, #0
}
   1a7c6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a7c8:	2002      	movs	r0, #2
}
   1a7ca:	bd38      	pop	{r3, r4, r5, pc}

0001a7cc <ticker_op_stop_scan_cb>:
}
   1a7cc:	4770      	bx	lr
   1a7ce:	bf00      	nop

0001a7d0 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a7d0:	b900      	cbnz	r0, 1a7d4 <ticker_op_cb+0x4>
   1a7d2:	4770      	bx	lr
{
   1a7d4:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1a7d6:	4a07      	ldr	r2, [pc, #28]	; (1a7f4 <ticker_op_cb+0x24>)
   1a7d8:	4907      	ldr	r1, [pc, #28]	; (1a7f8 <ticker_op_cb+0x28>)
   1a7da:	4808      	ldr	r0, [pc, #32]	; (1a7fc <ticker_op_cb+0x2c>)
   1a7dc:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1a7e0:	f00a fb91 	bl	24f06 <printk>
   1a7e4:	4040      	eors	r0, r0
   1a7e6:	f380 8811 	msr	BASEPRI, r0
   1a7ea:	f04f 0003 	mov.w	r0, #3
   1a7ee:	df02      	svc	2
}
   1a7f0:	bd08      	pop	{r3, pc}
   1a7f2:	bf00      	nop
   1a7f4:	0002c968 	.word	0x0002c968
   1a7f8:	0002c72c 	.word	0x0002c72c
   1a7fc:	0002bfdc 	.word	0x0002bfdc

0001a800 <ull_central_ticker_cb>:
{
   1a800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a804:	9c07      	ldr	r4, [sp, #28]
   1a806:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a80a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1a80c:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1a80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a812:	4299      	cmp	r1, r3
   1a814:	d02d      	beq.n	1a872 <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1a816:	4606      	mov	r6, r0
   1a818:	4617      	mov	r7, r2
   1a81a:	4601      	mov	r1, r0
   1a81c:	462a      	mov	r2, r5
   1a81e:	4620      	mov	r0, r4
   1a820:	f7fd fd8c 	bl	1833c <ull_conn_llcp>
		if (ret) {
   1a824:	bb28      	cbnz	r0, 1a872 <ull_central_ticker_cb+0x72>
   1a826:	7823      	ldrb	r3, [r4, #0]
   1a828:	3301      	adds	r3, #1
   1a82a:	b2db      	uxtb	r3, r3
   1a82c:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1a82e:	b383      	cbz	r3, 1a892 <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   1a830:	2002      	movs	r0, #2
   1a832:	f7ff f851 	bl	198d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   1a836:	2102      	movs	r1, #2
   1a838:	4620      	mov	r0, r4
   1a83a:	f7ff fadd 	bl	19df8 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1a83e:	491c      	ldr	r1, [pc, #112]	; (1a8b0 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   1a840:	4b1c      	ldr	r3, [pc, #112]	; (1a8b4 <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   1a842:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1a844:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a848:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1a84a:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1a84c:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1a850:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1a854:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a856:	2001      	movs	r0, #1
   1a858:	4611      	mov	r1, r2
   1a85a:	f7f5 fcdb 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!err);
   1a85e:	b950      	cbnz	r0, 1a876 <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1a860:	20ff      	movs	r0, #255	; 0xff
   1a862:	f7ff f839 	bl	198d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a866:	4620      	mov	r0, r4
   1a868:	21ff      	movs	r1, #255	; 0xff
}
   1a86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1a86e:	f7ff bac3 	b.w	19df8 <ull_conn_tx_lll_enqueue>
}
   1a872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1a876:	4a10      	ldr	r2, [pc, #64]	; (1a8b8 <ull_central_ticker_cb+0xb8>)
   1a878:	4910      	ldr	r1, [pc, #64]	; (1a8bc <ull_central_ticker_cb+0xbc>)
   1a87a:	4811      	ldr	r0, [pc, #68]	; (1a8c0 <ull_central_ticker_cb+0xc0>)
   1a87c:	f240 434d 	movw	r3, #1101	; 0x44d
   1a880:	f00a fb41 	bl	24f06 <printk>
   1a884:	4040      	eors	r0, r0
   1a886:	f380 8811 	msr	BASEPRI, r0
   1a88a:	f04f 0003 	mov.w	r0, #3
   1a88e:	df02      	svc	2
   1a890:	e7e6      	b.n	1a860 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   1a892:	4a09      	ldr	r2, [pc, #36]	; (1a8b8 <ull_central_ticker_cb+0xb8>)
   1a894:	490b      	ldr	r1, [pc, #44]	; (1a8c4 <ull_central_ticker_cb+0xc4>)
   1a896:	480a      	ldr	r0, [pc, #40]	; (1a8c0 <ull_central_ticker_cb+0xc0>)
   1a898:	f240 433a 	movw	r3, #1082	; 0x43a
   1a89c:	f00a fb33 	bl	24f06 <printk>
   1a8a0:	4040      	eors	r0, r0
   1a8a2:	f380 8811 	msr	BASEPRI, r0
   1a8a6:	f04f 0003 	mov.w	r0, #3
   1a8aa:	df02      	svc	2
   1a8ac:	e7c0      	b.n	1a830 <ull_central_ticker_cb+0x30>
   1a8ae:	bf00      	nop
   1a8b0:	20002c04 	.word	0x20002c04
   1a8b4:	20000638 	.word	0x20000638
   1a8b8:	0002c968 	.word	0x0002c968
   1a8bc:	0002c354 	.word	0x0002c354
   1a8c0:	0002bfdc 	.word	0x0002bfdc
   1a8c4:	0002c60c 	.word	0x0002c60c

0001a8c8 <ll_connect_disable>:
{
   1a8c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a8cc:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1a8ce:	2000      	movs	r0, #0
   1a8d0:	f7fa fe96 	bl	15600 <ull_scan_is_enabled_get>
	if (!scan) {
   1a8d4:	b368      	cbz	r0, 1a932 <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   1a8d6:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   1a8d8:	4604      	mov	r4, r0
   1a8da:	b353      	cbz	r3, 1a932 <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   1a8dc:	f893 2020 	ldrb.w	r2, [r3, #32]
   1a8e0:	f042 0202 	orr.w	r2, r2, #2
   1a8e4:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   1a8e8:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   1a8ea:	b317      	cbz	r7, 1a932 <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   1a8ec:	4601      	mov	r1, r0
   1a8ee:	2000      	movs	r0, #0
   1a8f0:	f7fa fdd0 	bl	15494 <ull_scan_disable>
	if (!err) {
   1a8f4:	4605      	mov	r5, r0
   1a8f6:	b9c8      	cbnz	r0, 1a92c <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   1a8f8:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   1a8fa:	f8d7 8144 	ldr.w	r8, [r7, #324]	; 0x144
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   1a8fe:	f507 79a2 	add.w	r9, r7, #324	; 0x144
		LL_ASSERT(link);
   1a902:	f1b8 0f00 	cmp.w	r8, #0
   1a906:	d018      	beq.n	1a93a <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   1a908:	4640      	mov	r0, r8
   1a90a:	f7f9 fb39 	bl	13f80 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1a90e:	2316      	movs	r3, #22
   1a910:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		node_rx->hdr.handle = 0xffff;
   1a914:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a918:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
		scan_lll = &scan->lll;
   1a91c:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a91e:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   1a920:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a924:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
		*rx = node_rx;
   1a928:	f8c6 9000 	str.w	r9, [r6]
}
   1a92c:	4628      	mov	r0, r5
   1a92e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1a932:	250c      	movs	r5, #12
}
   1a934:	4628      	mov	r0, r5
   1a936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1a93a:	4a07      	ldr	r2, [pc, #28]	; (1a958 <ll_connect_disable+0x90>)
   1a93c:	4907      	ldr	r1, [pc, #28]	; (1a95c <ll_connect_disable+0x94>)
   1a93e:	4808      	ldr	r0, [pc, #32]	; (1a960 <ll_connect_disable+0x98>)
   1a940:	f240 235b 	movw	r3, #603	; 0x25b
   1a944:	f00a fadf 	bl	24f06 <printk>
   1a948:	4040      	eors	r0, r0
   1a94a:	f380 8811 	msr	BASEPRI, r0
   1a94e:	f04f 0003 	mov.w	r0, #3
   1a952:	df02      	svc	2
   1a954:	e7d8      	b.n	1a908 <ll_connect_disable+0x40>
   1a956:	bf00      	nop
   1a958:	0002c968 	.word	0x0002c968
   1a95c:	0002c724 	.word	0x0002c724
   1a960:	0002bfdc 	.word	0x0002bfdc

0001a964 <ll_enc_req_send>:
{
   1a964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1a968:	4680      	mov	r8, r0
   1a96a:	460f      	mov	r7, r1
   1a96c:	4691      	mov	r9, r2
   1a96e:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1a970:	f7fb fd1e 	bl	163b0 <ll_connected_get>
	if (!conn) {
   1a974:	2800      	cmp	r0, #0
   1a976:	d06f      	beq.n	1aa58 <ll_enc_req_send+0xf4>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1a978:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
   1a97c:	f890 3165 	ldrb.w	r3, [r0, #357]	; 0x165
   1a980:	429a      	cmp	r2, r3
   1a982:	4604      	mov	r4, r0
   1a984:	d148      	bne.n	1aa18 <ll_enc_req_send+0xb4>
   1a986:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1a98a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1a98e:	429a      	cmp	r2, r3
   1a990:	d003      	beq.n	1a99a <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1a992:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   1a996:	2b03      	cmp	r3, #3
   1a998:	d03e      	beq.n	1aa18 <ll_enc_req_send+0xb4>
	tx = ll_tx_mem_acquire();
   1a99a:	f7fb fd1b 	bl	163d4 <ll_tx_mem_acquire>
	if (tx) {
   1a99e:	4605      	mov	r5, r0
   1a9a0:	b3d0      	cbz	r0, 1aa18 <ll_enc_req_send+0xb4>
		ull_pdu_data_init(pdu_data_tx);
   1a9a2:	3004      	adds	r0, #4
   1a9a4:	f7ff fdd0 	bl	1a548 <ull_pdu_data_init>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   1a9a8:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1a9ac:	6830      	ldr	r0, [r6, #0]
   1a9ae:	6871      	ldr	r1, [r6, #4]
   1a9b0:	68b2      	ldr	r2, [r6, #8]
   1a9b2:	68f6      	ldr	r6, [r6, #12]
   1a9b4:	f8c4 617d 	str.w	r6, [r4, #381]	; 0x17d
   1a9b8:	f013 0318 	ands.w	r3, r3, #24
   1a9bc:	f8c4 0171 	str.w	r0, [r4, #369]	; 0x171
   1a9c0:	f8c4 1175 	str.w	r1, [r4, #373]	; 0x175
   1a9c4:	f8c4 2179 	str.w	r2, [r4, #377]	; 0x179
   1a9c8:	d029      	beq.n	1aa1e <ll_enc_req_send+0xba>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1a9ca:	2b18      	cmp	r3, #24
   1a9cc:	d121      	bne.n	1aa12 <ll_enc_req_send+0xae>
   1a9ce:	683b      	ldr	r3, [r7, #0]
   1a9d0:	687a      	ldr	r2, [r7, #4]
   1a9d2:	f8c4 216d 	str.w	r2, [r4, #365]	; 0x16d
   1a9d6:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
			conn->llcp_enc.ediv[0] = ediv[0];
   1a9da:	f899 3000 	ldrb.w	r3, [r9]
   1a9de:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
			conn->llcp_enc.ediv[1] = ediv[1];
   1a9e2:	f899 3001 	ldrb.w	r3, [r9, #1]
   1a9e6:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a9ea:	792b      	ldrb	r3, [r5, #4]
   1a9ec:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a9f0:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1a9f2:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1a9f4:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1a9f6:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1a9f8:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   1a9fa:	4629      	mov	r1, r5
   1a9fc:	4640      	mov	r0, r8
   1a9fe:	f7fb fcf5 	bl	163ec <ll_tx_mem_enqueue>
   1aa02:	b930      	cbnz	r0, 1aa12 <ll_enc_req_send+0xae>
		conn->llcp_enc.req++;
   1aa04:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
   1aa08:	3301      	adds	r3, #1
   1aa0a:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
}
   1aa0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1aa12:	4628      	mov	r0, r5
   1aa14:	f7fb fce4 	bl	163e0 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1aa18:	200c      	movs	r0, #12
}
   1aa1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1aa1e:	792b      	ldrb	r3, [r5, #4]
   1aa20:	f043 0303 	orr.w	r3, r3, #3
   1aa24:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1aa26:	2317      	movs	r3, #23
   1aa28:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1aa2a:	2303      	movs	r3, #3
   1aa2c:	71eb      	strb	r3, [r5, #7]
   1aa2e:	683b      	ldr	r3, [r7, #0]
   1aa30:	687a      	ldr	r2, [r7, #4]
   1aa32:	60ea      	str	r2, [r5, #12]
   1aa34:	60ab      	str	r3, [r5, #8]
			enc_req->ediv[0] = ediv[0];
   1aa36:	f899 3000 	ldrb.w	r3, [r9]
   1aa3a:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1aa3c:	f899 3001 	ldrb.w	r3, [r9, #1]
   1aa40:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1aa42:	2108      	movs	r1, #8
   1aa44:	f105 0012 	add.w	r0, r5, #18
   1aa48:	f001 fe90 	bl	1c76c <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1aa4c:	2104      	movs	r1, #4
   1aa4e:	f105 001a 	add.w	r0, r5, #26
   1aa52:	f001 fe8b 	bl	1c76c <lll_csrand_get>
   1aa56:	e7d0      	b.n	1a9fa <ll_enc_req_send+0x96>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1aa58:	2002      	movs	r0, #2
}
   1aa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1aa5e:	bf00      	nop

0001aa60 <ull_central_reset>:
{
   1aa60:	b530      	push	{r4, r5, lr}
   1aa62:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   1aa64:	a801      	add	r0, sp, #4
   1aa66:	f7ff ff2f 	bl	1a8c8 <ll_connect_disable>
	if (!err) {
   1aa6a:	4604      	mov	r4, r0
   1aa6c:	b110      	cbz	r0, 1aa74 <ull_central_reset+0x14>
}
   1aa6e:	4620      	mov	r0, r4
   1aa70:	b003      	add	sp, #12
   1aa72:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1aa74:	f7fa fdc4 	bl	15600 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   1aa78:	4605      	mov	r5, r0
   1aa7a:	b150      	cbz	r0, 1aa92 <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1aa7c:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1aa80:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   1aa82:	f36f 0300 	bfc	r3, #0, #1
}
   1aa86:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   1aa88:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1aa8c:	622a      	str	r2, [r5, #32]
}
   1aa8e:	b003      	add	sp, #12
   1aa90:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   1aa92:	4a07      	ldr	r2, [pc, #28]	; (1aab0 <ull_central_reset+0x50>)
   1aa94:	4907      	ldr	r1, [pc, #28]	; (1aab4 <ull_central_reset+0x54>)
   1aa96:	4808      	ldr	r0, [pc, #32]	; (1aab8 <ull_central_reset+0x58>)
   1aa98:	f240 23e9 	movw	r3, #745	; 0x2e9
   1aa9c:	f00a fa33 	bl	24f06 <printk>
   1aaa0:	4040      	eors	r0, r0
   1aaa2:	f380 8811 	msr	BASEPRI, r0
   1aaa6:	f04f 0003 	mov.w	r0, #3
   1aaaa:	df02      	svc	2
   1aaac:	e7e6      	b.n	1aa7c <ull_central_reset+0x1c>
   1aaae:	bf00      	nop
   1aab0:	0002c968 	.word	0x0002c968
   1aab4:	0002cee0 	.word	0x0002cee0
   1aab8:	0002bfdc 	.word	0x0002bfdc

0001aabc <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1aabc:	6883      	ldr	r3, [r0, #8]
{
   1aabe:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1aac0:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   1aac2:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   1aac4:	b31c      	cbz	r4, 1ab0e <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   1aac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   1aac8:	2200      	movs	r2, #0
   1aaca:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1aacc:	b163      	cbz	r3, 1aae8 <ull_central_cleanup+0x2c>
   1aace:	4a1e      	ldr	r2, [pc, #120]	; (1ab48 <ull_central_cleanup+0x8c>)
   1aad0:	491e      	ldr	r1, [pc, #120]	; (1ab4c <ull_central_cleanup+0x90>)
   1aad2:	481f      	ldr	r0, [pc, #124]	; (1ab50 <ull_central_cleanup+0x94>)
   1aad4:	f240 3305 	movw	r3, #773	; 0x305
   1aad8:	f00a fa15 	bl	24f06 <printk>
   1aadc:	4040      	eors	r0, r0
   1aade:	f380 8811 	msr	BASEPRI, r0
   1aae2:	f04f 0003 	mov.w	r0, #3
   1aae6:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   1aae8:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1aaec:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1aaf0:	f7f5 fb12 	bl	10118 <memq_deinit>
	LL_ASSERT(link);
   1aaf4:	4606      	mov	r6, r0
   1aaf6:	b1c0      	cbz	r0, 1ab2a <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   1aaf8:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   1aafa:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   1aafc:	f7fb fc42 	bl	16384 <ll_conn_release>
	scan->is_enabled = 0U;
   1ab00:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1ab04:	f36f 0300 	bfc	r3, #0, #1
   1ab08:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   1ab0c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   1ab0e:	4a0e      	ldr	r2, [pc, #56]	; (1ab48 <ull_central_cleanup+0x8c>)
   1ab10:	4910      	ldr	r1, [pc, #64]	; (1ab54 <ull_central_cleanup+0x98>)
   1ab12:	480f      	ldr	r0, [pc, #60]	; (1ab50 <ull_central_cleanup+0x94>)
   1ab14:	f240 3302 	movw	r3, #770	; 0x302
   1ab18:	f00a f9f5 	bl	24f06 <printk>
   1ab1c:	4040      	eors	r0, r0
   1ab1e:	f380 8811 	msr	BASEPRI, r0
   1ab22:	f04f 0003 	mov.w	r0, #3
   1ab26:	df02      	svc	2
   1ab28:	e7cd      	b.n	1aac6 <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   1ab2a:	4a07      	ldr	r2, [pc, #28]	; (1ab48 <ull_central_cleanup+0x8c>)
   1ab2c:	490a      	ldr	r1, [pc, #40]	; (1ab58 <ull_central_cleanup+0x9c>)
   1ab2e:	4808      	ldr	r0, [pc, #32]	; (1ab50 <ull_central_cleanup+0x94>)
   1ab30:	f44f 7342 	mov.w	r3, #776	; 0x308
   1ab34:	f00a f9e7 	bl	24f06 <printk>
   1ab38:	4040      	eors	r0, r0
   1ab3a:	f380 8811 	msr	BASEPRI, r0
   1ab3e:	f04f 0003 	mov.w	r0, #3
   1ab42:	df02      	svc	2
   1ab44:	e7d8      	b.n	1aaf8 <ull_central_cleanup+0x3c>
   1ab46:	bf00      	nop
   1ab48:	0002c968 	.word	0x0002c968
   1ab4c:	0002c3d4 	.word	0x0002c3d4
   1ab50:	0002bfdc 	.word	0x0002bfdc
   1ab54:	0002c3c8 	.word	0x0002c3c8
   1ab58:	0002c724 	.word	0x0002c724

0001ab5c <ull_central_chm_update>:
{
   1ab5c:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1ab5e:	2000      	movs	r0, #0
   1ab60:	f7fb fc26 	bl	163b0 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1ab64:	4604      	mov	r4, r0
   1ab66:	b1d8      	cbz	r0, 1aba0 <ull_central_chm_update+0x44>
   1ab68:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1ab6c:	2b00      	cmp	r3, #0
   1ab6e:	db17      	blt.n	1aba0 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   1ab70:	f7ff fcc4 	bl	1a4fc <ull_conn_llcp_req>
		if (ret) {
   1ab74:	4605      	mov	r5, r0
   1ab76:	b988      	cbnz	r0, 1ab9c <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   1ab78:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1ab7c:	f000 f9d2 	bl	1af24 <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   1ab80:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_req++;
   1ab84:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		conn->llcp.chan_map.initiate = 1U;
   1ab88:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1ab8c:	2102      	movs	r1, #2
		conn->llcp_req++;
   1ab8e:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1ab90:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   1ab94:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		conn->llcp_req++;
   1ab98:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   1ab9c:	4628      	mov	r0, r5
   1ab9e:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1aba0:	2500      	movs	r5, #0
}
   1aba2:	4628      	mov	r0, r5
   1aba4:	bd38      	pop	{r3, r4, r5, pc}
   1aba6:	bf00      	nop

0001aba8 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   1aba8:	6008      	str	r0, [r1, #0]
}
   1abaa:	4770      	bx	lr

0001abac <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1abac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1abb0:	b091      	sub	sp, #68	; 0x44
   1abb2:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   1abb6:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   1abb8:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1abbc:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1abbe:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1abc0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   1abc4:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   1abc6:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1abc8:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1abca:	da02      	bge.n	1abd2 <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1abcc:	4613      	mov	r3, r2
   1abce:	3314      	adds	r3, #20
   1abd0:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1abd2:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1abd4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1abd8:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   1abdc:	f8df b254 	ldr.w	fp, [pc, #596]	; 1ae34 <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1abe0:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   1abe4:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1abe6:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   1abea:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   1abec:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1abee:	4635      	mov	r5, r6
   1abf0:	e044      	b.n	1ac7c <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   1abf2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1abf6:	2bff      	cmp	r3, #255	; 0xff
   1abf8:	d064      	beq.n	1acc4 <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   1abfa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1abfe:	d011      	beq.n	1ac24 <win_offset_calc.constprop.0+0x78>
   1ac00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1ac02:	4552      	cmp	r2, sl
   1ac04:	d00e      	beq.n	1ac24 <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   1ac06:	498c      	ldr	r1, [pc, #560]	; (1ae38 <win_offset_calc.constprop.0+0x28c>)
   1ac08:	488c      	ldr	r0, [pc, #560]	; (1ae3c <win_offset_calc.constprop.0+0x290>)
   1ac0a:	f240 13c3 	movw	r3, #451	; 0x1c3
   1ac0e:	465a      	mov	r2, fp
   1ac10:	f00a f979 	bl	24f06 <printk>
   1ac14:	4040      	eors	r0, r0
   1ac16:	f380 8811 	msr	BASEPRI, r0
   1ac1a:	f04f 0003 	mov.w	r0, #3
   1ac1e:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   1ac20:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ac24:	1e9a      	subs	r2, r3, #2
   1ac26:	2a03      	cmp	r2, #3
   1ac28:	d825      	bhi.n	1ac76 <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   1ac2a:	2b05      	cmp	r3, #5
   1ac2c:	d17f      	bne.n	1ad2e <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   1ac2e:	9b05      	ldr	r3, [sp, #20]
   1ac30:	2bff      	cmp	r3, #255	; 0xff
   1ac32:	d178      	bne.n	1ad26 <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   1ac34:	2000      	movs	r0, #0
   1ac36:	f7fb fbb3 	bl	163a0 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1ac3a:	9b07      	ldr	r3, [sp, #28]
   1ac3c:	4283      	cmp	r3, r0
   1ac3e:	d01a      	beq.n	1ac76 <win_offset_calc.constprop.0+0xca>
   1ac40:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1ac42:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1ac46:	2a00      	cmp	r2, #0
   1ac48:	f040 808a 	bne.w	1ad60 <win_offset_calc.constprop.0+0x1b4>
   1ac4c:	2b00      	cmp	r3, #0
   1ac4e:	db12      	blt.n	1ac76 <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ac50:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1ac52:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   1ac56:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ac5a:	3328      	adds	r3, #40	; 0x28
   1ac5c:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ac5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ac60:	681b      	ldr	r3, [r3, #0]
   1ac62:	4543      	cmp	r3, r8
   1ac64:	f0c0 808b 	bcc.w	1ad7e <win_offset_calc.constprop.0+0x1d2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1ac68:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1ac6a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1ac6e:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   1ac70:	4645      	mov	r5, r8
   1ac72:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   1ac76:	783b      	ldrb	r3, [r7, #0]
   1ac78:	42a3      	cmp	r3, r4
   1ac7a:	d95c      	bls.n	1ad36 <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1ac7c:	ab0f      	add	r3, sp, #60	; 0x3c
   1ac7e:	9302      	str	r3, [sp, #8]
   1ac80:	4b6f      	ldr	r3, [pc, #444]	; (1ae40 <win_offset_calc.constprop.0+0x294>)
   1ac82:	9301      	str	r3, [sp, #4]
   1ac84:	ab0d      	add	r3, sp, #52	; 0x34
   1ac86:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   1ac88:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1ac8a:	ab0e      	add	r3, sp, #56	; 0x38
   1ac8c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1ac90:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   1ac92:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1ac94:	f7f6 fd56 	bl	11744 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1ac98:	2802      	cmp	r0, #2
   1ac9a:	d056      	beq.n	1ad4a <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1ac9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1ac9e:	2b00      	cmp	r3, #0
   1aca0:	d0a7      	beq.n	1abf2 <win_offset_calc.constprop.0+0x46>
   1aca2:	4968      	ldr	r1, [pc, #416]	; (1ae44 <win_offset_calc.constprop.0+0x298>)
   1aca4:	4865      	ldr	r0, [pc, #404]	; (1ae3c <win_offset_calc.constprop.0+0x290>)
   1aca6:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1acaa:	465a      	mov	r2, fp
   1acac:	f00a f92b 	bl	24f06 <printk>
   1acb0:	4040      	eors	r0, r0
   1acb2:	f380 8811 	msr	BASEPRI, r0
   1acb6:	f04f 0003 	mov.w	r0, #3
   1acba:	df02      	svc	2
		if (ticker_id == 0xff) {
   1acbc:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1acc0:	2bff      	cmp	r3, #255	; 0xff
   1acc2:	d19a      	bne.n	1abfa <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1acc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1acc6:	681b      	ldr	r3, [r3, #0]
   1acc8:	429d      	cmp	r5, r3
   1acca:	bf38      	it	cc
   1accc:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1acce:	783b      	ldrb	r3, [r7, #0]
   1acd0:	42a3      	cmp	r3, r4
   1acd2:	d926      	bls.n	1ad22 <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1acd4:	9b04      	ldr	r3, [sp, #16]
   1acd6:	495c      	ldr	r1, [pc, #368]	; (1ae48 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   1acd8:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1acda:	442b      	add	r3, r5
   1acdc:	fba1 2303 	umull	r2, r3, r1, r3
   1ace0:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   1ace4:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1ace6:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   1acea:	f240 809a 	bls.w	1ae22 <win_offset_calc.constprop.0+0x276>
   1acee:	9e04      	ldr	r6, [sp, #16]
   1acf0:	f8dd c018 	ldr.w	ip, [sp, #24]
   1acf4:	e002      	b.n	1acfc <win_offset_calc.constprop.0+0x150>
   1acf6:	4594      	cmp	ip, r2
   1acf8:	f240 8093 	bls.w	1ae22 <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   1acfc:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   1ad00:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   1ad04:	0a12      	lsrs	r2, r2, #8
   1ad06:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   1ad08:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   1ad0a:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   1ad0c:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1ad0e:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1ad10:	1973      	adds	r3, r6, r5
   1ad12:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   1ad16:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1ad18:	f3c3 124f 	ubfx	r2, r3, #5, #16
   1ad1c:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1ad20:	d8e9      	bhi.n	1acf6 <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1ad22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad24:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   1ad26:	703c      	strb	r4, [r7, #0]
}
   1ad28:	b011      	add	sp, #68	; 0x44
   1ad2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad2e:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   1ad30:	783b      	ldrb	r3, [r7, #0]
   1ad32:	42a3      	cmp	r3, r4
   1ad34:	d8a2      	bhi.n	1ac7c <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   1ad36:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ad3a:	2bff      	cmp	r3, #255	; 0xff
   1ad3c:	d1f3      	bne.n	1ad26 <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1ad3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad40:	681b      	ldr	r3, [r3, #0]
   1ad42:	429d      	cmp	r5, r3
   1ad44:	bf38      	it	cc
   1ad46:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1ad48:	e7eb      	b.n	1ad22 <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1ad4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad4c:	2b02      	cmp	r3, #2
   1ad4e:	d1a5      	bne.n	1ac9c <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   1ad50:	2102      	movs	r1, #2
   1ad52:	2000      	movs	r0, #0
   1ad54:	f7f6 fd3c 	bl	117d0 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1ad58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1ad5a:	2b02      	cmp	r3, #2
   1ad5c:	d0f8      	beq.n	1ad50 <win_offset_calc.constprop.0+0x1a4>
   1ad5e:	e79d      	b.n	1ac9c <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   1ad60:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ad62:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1ad64:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   1ad68:	da4f      	bge.n	1ae0a <win_offset_calc.constprop.0+0x25e>
				ticks_slot_abs_curr += ticks_slot_margin;
   1ad6a:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1ad6e:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ad70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ad72:	681b      	ldr	r3, [r3, #0]
   1ad74:	4543      	cmp	r3, r8
				ticks_slot_margin =
   1ad76:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ad7a:	f4bf af75 	bcs.w	1ac68 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   1ad7e:	429d      	cmp	r5, r3
   1ad80:	bf38      	it	cc
   1ad82:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   1ad84:	783b      	ldrb	r3, [r7, #0]
   1ad86:	42a3      	cmp	r3, r4
   1ad88:	d930      	bls.n	1adec <win_offset_calc.constprop.0+0x240>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1ad8a:	9b04      	ldr	r3, [sp, #16]
   1ad8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ad8e:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   1ad92:	4413      	add	r3, r2
   1ad94:	449a      	add	sl, r3
   1ad96:	46b1      	mov	r9, r6
   1ad98:	462e      	mov	r6, r5
   1ad9a:	4655      	mov	r5, sl
   1ad9c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   1ada0:	e014      	b.n	1adcc <win_offset_calc.constprop.0+0x220>
					if (offset >= conn_interval) {
   1ada2:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   1ada4:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   1ada8:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   1adaa:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   1adae:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   1adb2:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   1adb6:	d238      	bcs.n	1ae2a <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   1adb8:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   1adbc:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1adc0:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   1adc4:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1adc6:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   1adc8:	42a3      	cmp	r3, r4
   1adca:	d924      	bls.n	1ae16 <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   1adcc:	4631      	mov	r1, r6
   1adce:	4640      	mov	r0, r8
   1add0:	f7f6 fd18 	bl	11804 <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1add4:	9b04      	ldr	r3, [sp, #16]
   1add6:	4a1c      	ldr	r2, [pc, #112]	; (1ae48 <win_offset_calc.constprop.0+0x29c>)
   1add8:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   1adda:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1addc:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   1ade0:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   1ade4:	d2dd      	bcs.n	1ada2 <win_offset_calc.constprop.0+0x1f6>
   1ade6:	4635      	mov	r5, r6
   1ade8:	464e      	mov	r6, r9
   1adea:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   1adec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1adee:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1adf0:	9b06      	ldr	r3, [sp, #24]
   1adf2:	42b3      	cmp	r3, r6
   1adf4:	f63f af38 	bhi.w	1ac68 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   1adf8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1adfc:	2bff      	cmp	r3, #255	; 0xff
   1adfe:	f43f af61 	beq.w	1acc4 <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   1ae02:	703c      	strb	r4, [r7, #0]
}
   1ae04:	b011      	add	sp, #68	; 0x44
   1ae06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1ae0a:	f101 0328 	add.w	r3, r1, #40	; 0x28
   1ae0e:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1ae10:	f04f 0a00 	mov.w	sl, #0
   1ae14:	e723      	b.n	1ac5e <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae18:	4635      	mov	r5, r6
   1ae1a:	601d      	str	r5, [r3, #0]
   1ae1c:	464e      	mov	r6, r9
   1ae1e:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   1ae20:	e722      	b.n	1ac68 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1ae22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   1ae24:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1ae26:	601d      	str	r5, [r3, #0]
   1ae28:	e77d      	b.n	1ad26 <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1ae2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ae2c:	2500      	movs	r5, #0
   1ae2e:	46d1      	mov	r9, sl
   1ae30:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1ae32:	e7e1      	b.n	1adf8 <win_offset_calc.constprop.0+0x24c>
   1ae34:	0002c9c0 	.word	0x0002c9c0
   1ae38:	0002c074 	.word	0x0002c074
   1ae3c:	0002bfdc 	.word	0x0002bfdc
   1ae40:	0001aba9 	.word	0x0001aba9
   1ae44:	0002ca04 	.word	0x0002ca04
   1ae48:	cccccccd 	.word	0xcccccccd

0001ae4c <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1ae4c:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1ae4e:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   1ae50:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1ae52:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   1ae54:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   1ae56:	89c0      	ldrh	r0, [r0, #14]
   1ae58:	6909      	ldr	r1, [r1, #16]
   1ae5a:	3310      	adds	r3, #16
   1ae5c:	f7e7 bfe0 	b.w	2e20 <after_mstr_offset_get>

0001ae60 <ull_sched_mfy_win_offset_use>:
{
   1ae60:	b510      	push	{r4, lr}
   1ae62:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   1ae64:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   1ae68:	6901      	ldr	r1, [r0, #16]
   1ae6a:	f500 738c 	add.w	r3, r0, #280	; 0x118
   1ae6e:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1ae70:	f7e7 ffd6 	bl	2e20 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1ae74:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1ae78:	4908      	ldr	r1, [pc, #32]	; (1ae9c <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1ae7a:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1ae7e:	fba1 1303 	umull	r1, r3, r1, r3
   1ae82:	0a9b      	lsrs	r3, r3, #10
   1ae84:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1ae88:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1ae8a:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1ae8c:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   1ae90:	2204      	movs	r2, #4
   1ae92:	f362 0302 	bfi	r3, r2, #0, #3
   1ae96:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
   1ae9a:	bd10      	pop	{r4, pc}
   1ae9c:	d1b71759 	.word	0xd1b71759

0001aea0 <ull_sched_mfy_free_win_offset_calc>:
{
   1aea0:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   1aea2:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   1aea6:	2100      	movs	r1, #0
{
   1aea8:	b084      	sub	sp, #16
	if (conn->lll.role) {
   1aeaa:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   1aeac:	bfbc      	itt	lt
   1aeae:	f8d0 30e0 	ldrlt.w	r3, [r0, #224]	; 0xe0
   1aeb2:	f8c0 31a8 	strlt.w	r3, [r0, #424]	; 0x1a8
	uint8_t offset_max = 6U;
   1aeb6:	f04f 0206 	mov.w	r2, #6
{
   1aeba:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   1aebc:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   1aec0:	bfb8      	it	lt
   1aec2:	f500 72d4 	addlt.w	r2, r0, #424	; 0x1a8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aec6:	f8d0 01a0 	ldr.w	r0, [r0, #416]	; 0x1a0
	uint32_t ticks_to_offset_default = 0U;
   1aeca:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aecc:	f10d 010b 	add.w	r1, sp, #11
   1aed0:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset_next = &ticks_to_offset_default;
   1aed4:	bfa8      	it	ge
   1aed6:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1aed8:	e9cd 1000 	strd	r1, r0, [sp]
   1aedc:	2100      	movs	r1, #0
   1aede:	4620      	mov	r0, r4
   1aee0:	f7ff fe64 	bl	1abac <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1aee4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1aee8:	2208      	movs	r2, #8
   1aeea:	f362 0303 	bfi	r3, r2, #0, #4
   1aeee:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
}
   1aef2:	b004      	add	sp, #16
   1aef4:	bd10      	pop	{r4, pc}
   1aef6:	bf00      	nop

0001aef8 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   1aef8:	b508      	push	{r3, lr}
   1aefa:	4a08      	ldr	r2, [pc, #32]	; (1af1c <ll_chm_update+0x24>)
   1aefc:	4603      	mov	r3, r0
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   1aefe:	6800      	ldr	r0, [r0, #0]
   1af00:	6010      	str	r0, [r2, #0]
   1af02:	791b      	ldrb	r3, [r3, #4]
   1af04:	7113      	strb	r3, [r2, #4]
	count = util_ones_count_get(map, sizeof(map));
   1af06:	2105      	movs	r1, #5
   1af08:	4610      	mov	r0, r2
   1af0a:	f7f5 fa81 	bl	10410 <util_ones_count_get>
   1af0e:	4b04      	ldr	r3, [pc, #16]	; (1af20 <ll_chm_update+0x28>)
   1af10:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1af12:	f7ff fe23 	bl	1ab5c <ull_central_chm_update>
}
   1af16:	2000      	movs	r0, #0
   1af18:	bd08      	pop	{r3, pc}
   1af1a:	bf00      	nop
   1af1c:	20000648 	.word	0x20000648
   1af20:	20000a36 	.word	0x20000a36

0001af24 <ull_chan_map_get>:
	(void)memcpy(chan_map, map, sizeof(map));
   1af24:	4a04      	ldr	r2, [pc, #16]	; (1af38 <ull_chan_map_get+0x14>)
	return count;
   1af26:	4905      	ldr	r1, [pc, #20]	; (1af3c <ull_chan_map_get+0x18>)
{
   1af28:	4603      	mov	r3, r0
   1af2a:	6810      	ldr	r0, [r2, #0]
   1af2c:	6018      	str	r0, [r3, #0]
   1af2e:	7912      	ldrb	r2, [r2, #4]
}
   1af30:	7808      	ldrb	r0, [r1, #0]
   1af32:	711a      	strb	r2, [r3, #4]
   1af34:	4770      	bx	lr
   1af36:	bf00      	nop
   1af38:	20000648 	.word	0x20000648
   1af3c:	20000a36 	.word	0x20000a36

0001af40 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1af40:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1af42:	fb02 1c01 	mla	ip, r2, r1, r1
   1af46:	7802      	ldrb	r2, [r0, #0]
   1af48:	491c      	ldr	r1, [pc, #112]	; (1afbc <lll_chan_sel_1+0x7c>)
{
   1af4a:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1af4e:	4494      	add	ip, r2
   1af50:	fb81 210c 	smull	r2, r1, r1, ip
   1af54:	4461      	add	r1, ip
   1af56:	1149      	asrs	r1, r1, #5
   1af58:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1af5c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1af60:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1af62:	ebac 0101 	sub.w	r1, ip, r1
   1af66:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1af68:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1af6a:	08c4      	lsrs	r4, r0, #3
   1af6c:	f001 0107 	and.w	r1, r1, #7
   1af70:	f813 c004 	ldrb.w	ip, [r3, r4]
   1af74:	fa4c f101 	asr.w	r1, ip, r1
   1af78:	f011 0101 	ands.w	r1, r1, #1
   1af7c:	d11d      	bne.n	1afba <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1af7e:	fbb0 f2f5 	udiv	r2, r0, r5
   1af82:	fb05 0212 	mls	r2, r5, r2, r0
   1af86:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1af88:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1af8c:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1af8e:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1af90:	f100 0c08 	add.w	ip, r0, #8
   1af94:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1af98:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1af9c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1afa0:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1afa4:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1afa8:	d002      	beq.n	1afb0 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1afaa:	b132      	cbz	r2, 1afba <lll_chan_sel_1+0x7a>
				chan_index--;
   1afac:	3a01      	subs	r2, #1
   1afae:	b2d2      	uxtb	r2, r2
			chan_next++;
   1afb0:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1afb2:	4584      	cmp	ip, r0
   1afb4:	d1f2      	bne.n	1af9c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1afb6:	45a6      	cmp	lr, r4
   1afb8:	d1ea      	bne.n	1af90 <lll_chan_sel_1+0x50>
}
   1afba:	bd30      	pop	{r4, r5, pc}
   1afbc:	dd67c8a7 	.word	0xdd67c8a7

0001afc0 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1afc0:	8842      	ldrh	r2, [r0, #2]
   1afc2:	8800      	ldrh	r0, [r0, #0]
}
   1afc4:	4050      	eors	r0, r2
   1afc6:	4770      	bx	lr

0001afc8 <lll_chan_sel_2>:
{
   1afc8:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1afca:	4d2f      	ldr	r5, [pc, #188]	; (1b088 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1afcc:	4c2f      	ldr	r4, [pc, #188]	; (1b08c <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1afce:	4048      	eors	r0, r1
   1afd0:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1afd4:	0a07      	lsrs	r7, r0, #8
   1afd6:	b2c0      	uxtb	r0, r0
   1afd8:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1afdc:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1afe0:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1afe4:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1afe8:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1afec:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1aff0:	433e      	orrs	r6, r7
   1aff2:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1aff6:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1affa:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1affe:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1b002:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1b006:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1b008:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1b00c:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b010:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1b014:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b018:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1b01a:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1b01e:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1b020:	d1d8      	bne.n	1afd4 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1b022:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1b024:	481a      	ldr	r0, [pc, #104]	; (1b090 <lll_chan_sel_2+0xc8>)
   1b026:	fba0 4001 	umull	r4, r0, r0, r1
   1b02a:	1a0c      	subs	r4, r1, r0
   1b02c:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1b030:	0940      	lsrs	r0, r0, #5
   1b032:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1b036:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1b03a:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b03c:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1b040:	f000 0507 	and.w	r5, r0, #7
   1b044:	5d14      	ldrb	r4, [r2, r4]
   1b046:	412c      	asrs	r4, r5
   1b048:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1b04a:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1b04c:	d41a      	bmi.n	1b084 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1b04e:	fb01 f303 	mul.w	r3, r1, r3
   1b052:	1e56      	subs	r6, r2, #1
   1b054:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1b058:	3204      	adds	r2, #4
	chan_next = 0U;
   1b05a:	4660      	mov	r0, ip
		bite = *chan_map;
   1b05c:	f100 0508 	add.w	r5, r0, #8
   1b060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1b064:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1b066:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1b06a:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1b06e:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1b072:	d002      	beq.n	1b07a <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1b074:	b133      	cbz	r3, 1b084 <lll_chan_sel_2+0xbc>
				chan_index--;
   1b076:	3b01      	subs	r3, #1
   1b078:	b2db      	uxtb	r3, r3
			chan_next++;
   1b07a:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1b07c:	42a8      	cmp	r0, r5
   1b07e:	d1f2      	bne.n	1b066 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1b080:	42b2      	cmp	r2, r6
   1b082:	d1eb      	bne.n	1b05c <lll_chan_sel_2+0x94>
}
   1b084:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b086:	bf00      	nop
   1b088:	00022110 	.word	0x00022110
   1b08c:	00088440 	.word	0x00088440
   1b090:	bacf914d 	.word	0xbacf914d

0001b094 <rl_update>:
static void rl_update(void)
{
	uint8_t i;

	/* Populate filter from rl peers */
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b094:	491a      	ldr	r1, [pc, #104]	; (1b100 <rl_update+0x6c>)
   1b096:	481b      	ldr	r0, [pc, #108]	; (1b104 <rl_update+0x70>)
{
   1b098:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b09c:	2300      	movs	r3, #0
   1b09e:	1e46      	subs	r6, r0, #1
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1b0a0:	f1a1 0c02 	sub.w	ip, r1, #2
   1b0a4:	2701      	movs	r7, #1
   1b0a6:	e006      	b.n	1b0b6 <rl_update+0x22>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0a8:	3301      	adds	r3, #1
   1b0aa:	2b08      	cmp	r3, #8
   1b0ac:	f101 0106 	add.w	r1, r1, #6
   1b0b0:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1b0b4:	d022      	beq.n	1b0fc <rl_update+0x68>
		if (rl[i].taken) {
   1b0b6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1b0ba:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
   1b0be:	07d4      	lsls	r4, r2, #31
   1b0c0:	d5f2      	bpl.n	1b0a8 <rl_update+0x14>
	filter->enable_bitmask |= BIT(index);
   1b0c2:	f89c 5000 	ldrb.w	r5, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b0c6:	f89c e001 	ldrb.w	lr, [ip, #1]
   1b0ca:	f8d0 8000 	ldr.w	r8, [r0]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1b0ce:	f3c2 1280 	ubfx	r2, r2, #6, #1
	filter->enable_bitmask |= BIT(index);
   1b0d2:	fa07 f403 	lsl.w	r4, r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b0d6:	409a      	lsls	r2, r3
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0d8:	3301      	adds	r3, #1
	filter->enable_bitmask |= BIT(index);
   1b0da:	432c      	orrs	r4, r5
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b0dc:	ea4e 0202 	orr.w	r2, lr, r2
   1b0e0:	8885      	ldrh	r5, [r0, #4]
   1b0e2:	808d      	strh	r5, [r1, #4]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0e4:	2b08      	cmp	r3, #8
	filter->enable_bitmask |= BIT(index);
   1b0e6:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b0ea:	f88c 2001 	strb.w	r2, [ip, #1]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b0ee:	f101 0106 	add.w	r1, r1, #6
   1b0f2:	f841 8c06 	str.w	r8, [r1, #-6]
   1b0f6:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1b0fa:	d1dc      	bne.n	1b0b6 <rl_update+0x22>
}
   1b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b100:	20002e82 	.word	0x20002e82
   1b104:	20002d41 	.word	0x20002d41

0001b108 <fal_update>:
	for (i = 0U; i < FAL_SIZE; i++) {
   1b108:	4820      	ldr	r0, [pc, #128]	; (1b18c <fal_update+0x84>)
   1b10a:	4a21      	ldr	r2, [pc, #132]	; (1b190 <fal_update+0x88>)
{
   1b10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b110:	4f20      	ldr	r7, [pc, #128]	; (1b194 <fal_update+0x8c>)
   1b112:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1b198 <fal_update+0x90>
{
   1b116:	2300      	movs	r3, #0
   1b118:	1e95      	subs	r5, r2, #2
	filter->enable_bitmask |= BIT(index);
   1b11a:	f1a0 0c02 	sub.w	ip, r0, #2
   1b11e:	2601      	movs	r6, #1
		if (!fal[i].taken) {
   1b120:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
   1b124:	07c9      	lsls	r1, r1, #31
	filter->enable_bitmask |= BIT(index);
   1b126:	fa06 f903 	lsl.w	r9, r6, r3
		if (!fal[i].taken) {
   1b12a:	d526      	bpl.n	1b17a <fal_update+0x72>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b12c:	7839      	ldrb	r1, [r7, #0]
   1b12e:	b159      	cbz	r1, 1b148 <fal_update+0x40>
		j = fal[i].rl_idx;
   1b130:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1b134:	2907      	cmp	r1, #7
   1b136:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   1b13a:	d805      	bhi.n	1b148 <fal_update+0x40>
   1b13c:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
   1b140:	074c      	lsls	r4, r1, #29
   1b142:	d501      	bpl.n	1b148 <fal_update+0x40>
   1b144:	06c9      	lsls	r1, r1, #27
   1b146:	d518      	bpl.n	1b17a <fal_update+0x72>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1b148:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b14c:	f89c e001 	ldrb.w	lr, [ip, #1]
	filter->enable_bitmask |= BIT(index);
   1b150:	f89c 4000 	ldrb.w	r4, [ip]
   1b154:	f8d2 a000 	ldr.w	sl, [r2]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1b158:	f3c1 0140 	ubfx	r1, r1, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b15c:	4099      	lsls	r1, r3
   1b15e:	ea4e 0101 	orr.w	r1, lr, r1
	filter->enable_bitmask |= BIT(index);
   1b162:	ea44 0409 	orr.w	r4, r4, r9
   1b166:	f8b2 e004 	ldrh.w	lr, [r2, #4]
   1b16a:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1b16e:	f88c 1001 	strb.w	r1, [ip, #1]
   1b172:	f8a0 e004 	strh.w	lr, [r0, #4]
   1b176:	f8c0 a000 	str.w	sl, [r0]
	for (i = 0U; i < FAL_SIZE; i++) {
   1b17a:	3301      	adds	r3, #1
   1b17c:	2b08      	cmp	r3, #8
   1b17e:	f100 0006 	add.w	r0, r0, #6
   1b182:	f102 0208 	add.w	r2, r2, #8
   1b186:	d1cb      	bne.n	1b120 <fal_update+0x18>
}
   1b188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b18c:	20002c56 	.word	0x20002c56
   1b190:	20002c16 	.word	0x20002c16
   1b194:	20003573 	.word	0x20003573
   1b198:	20002d40 	.word	0x20002d40

0001b19c <ll_fal_size_get>:
}
   1b19c:	2008      	movs	r0, #8
   1b19e:	4770      	bx	lr

0001b1a0 <ll_fal_clear>:
{
   1b1a0:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1b1a2:	2000      	movs	r0, #0
   1b1a4:	f7fa f82c 	bl	15200 <ull_adv_filter_pol_get>
   1b1a8:	b9f0      	cbnz	r0, 1b1e8 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b1aa:	f7fa fa5b 	bl	15664 <ull_scan_filter_pol_get>
   1b1ae:	f010 0001 	ands.w	r0, r0, #1
   1b1b2:	d119      	bne.n	1b1e8 <ll_fal_clear+0x48>
   1b1b4:	4a0d      	ldr	r2, [pc, #52]	; (1b1ec <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   1b1b6:	4c0e      	ldr	r4, [pc, #56]	; (1b1f0 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   1b1b8:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1b1bc:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b1be:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1b1c0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1b1c4:	d805      	bhi.n	1b1d2 <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   1b1c6:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1b1ca:	f36f 1345 	bfc	r3, #5, #1
   1b1ce:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1b1d2:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1b1d6:	f36f 0300 	bfc	r3, #0, #1
   1b1da:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1b1de:	3001      	adds	r0, #1
   1b1e0:	2808      	cmp	r0, #8
   1b1e2:	d1e9      	bne.n	1b1b8 <ll_fal_clear+0x18>
	return 0;
   1b1e4:	2000      	movs	r0, #0
}
   1b1e6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b1e8:	200c      	movs	r0, #12
}
   1b1ea:	bd10      	pop	{r4, pc}
   1b1ec:	20002c14 	.word	0x20002c14
   1b1f0:	20002d40 	.word	0x20002d40

0001b1f4 <ll_fal_add>:
{
   1b1f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1f8:	4607      	mov	r7, r0
   1b1fa:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1b1fc:	2000      	movs	r0, #0
   1b1fe:	f7f9 ffff 	bl	15200 <ull_adv_filter_pol_get>
   1b202:	2800      	cmp	r0, #0
   1b204:	d172      	bne.n	1b2ec <ll_fal_add+0xf8>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b206:	f7fa fa2d 	bl	15664 <ull_scan_filter_pol_get>
   1b20a:	f010 0401 	ands.w	r4, r0, #1
   1b20e:	d16d      	bne.n	1b2ec <ll_fal_add+0xf8>
	if (addr->type == ADDR_TYPE_ANON) {
   1b210:	f897 a000 	ldrb.w	sl, [r7]
   1b214:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1b218:	d06c      	beq.n	1b2f4 <ll_fal_add+0x100>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1b21a:	4e42      	ldr	r6, [pc, #264]	; (1b324 <ll_fal_add+0x130>)
   1b21c:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b220:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1b224:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1b228:	4625      	mov	r5, r4
   1b22a:	f1a6 0802 	sub.w	r8, r6, #2
   1b22e:	e009      	b.n	1b244 <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   1b230:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1b234:	d101      	bne.n	1b23a <ll_fal_add+0x46>
			*free_idx = i;
   1b236:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   1b23a:	3501      	adds	r5, #1
   1b23c:	2d08      	cmp	r5, #8
   1b23e:	f106 0608 	add.w	r6, r6, #8
   1b242:	d017      	beq.n	1b274 <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b244:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1b248:	07d8      	lsls	r0, r3, #31
   1b24a:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b24e:	d5ef      	bpl.n	1b230 <ll_fal_add+0x3c>
   1b250:	4552      	cmp	r2, sl
   1b252:	d1f2      	bne.n	1b23a <ll_fal_add+0x46>
   1b254:	2206      	movs	r2, #6
   1b256:	4630      	mov	r0, r6
   1b258:	4659      	mov	r1, fp
   1b25a:	f00f fbee 	bl	2aa3a <memcmp>
   1b25e:	2800      	cmp	r0, #0
   1b260:	d041      	beq.n	1b2e6 <ll_fal_add+0xf2>
		} else if (free_idx && !fal[i].taken &&
   1b262:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1b266:	07d9      	lsls	r1, r3, #31
   1b268:	d5e2      	bpl.n	1b230 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   1b26a:	3501      	adds	r5, #1
   1b26c:	2d08      	cmp	r5, #8
   1b26e:	f106 0608 	add.w	r6, r6, #8
   1b272:	d1e7      	bne.n	1b244 <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   1b274:	f1b9 0f07 	cmp.w	r9, #7
   1b278:	d840      	bhi.n	1b2fc <ll_fal_add+0x108>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1b27a:	783a      	ldrb	r2, [r7, #0]
   1b27c:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1b280:	4e29      	ldr	r6, [pc, #164]	; (1b328 <ll_fal_add+0x134>)
   1b282:	f362 0341 	bfi	r3, r2, #1, #1
   1b286:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1b28a:	2302      	movs	r3, #2
   1b28c:	fb15 3509 	smlabb	r5, r5, r9, r3
   1b290:	f8d7 3001 	ldr.w	r3, [r7, #1]
   1b294:	f848 3005 	str.w	r3, [r8, r5]
   1b298:	4445      	add	r5, r8
   1b29a:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   1b29e:	80ab      	strh	r3, [r5, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b2a0:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b2a2:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b2a4:	f003 0301 	and.w	r3, r3, #1
   1b2a8:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1b2ac:	fa5f fa84 	uxtb.w	sl, r4
   1b2b0:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   1b2b4:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1b2b8:	07d2      	lsls	r2, r2, #31
   1b2ba:	f104 0401 	add.w	r4, r4, #1
   1b2be:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1b2c2:	d501      	bpl.n	1b2c8 <ll_fal_add+0xd4>
   1b2c4:	4299      	cmp	r1, r3
   1b2c6:	d01b      	beq.n	1b300 <ll_fal_add+0x10c>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b2c8:	2c08      	cmp	r4, #8
   1b2ca:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b2ce:	d1eb      	bne.n	1b2a8 <ll_fal_add+0xb4>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1b2d0:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1b2d4:	22ff      	movs	r2, #255	; 0xff
   1b2d6:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1b2d8:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1b2dc:	f043 0301 	orr.w	r3, r3, #1
   1b2e0:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   1b2e4:	2000      	movs	r0, #0
}
   1b2e6:	b003      	add	sp, #12
   1b2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b2ec:	200c      	movs	r0, #12
}
   1b2ee:	b003      	add	sp, #12
   1b2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1b2f4:	4620      	mov	r0, r4
}
   1b2f6:	b003      	add	sp, #12
   1b2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2fc:	2007      	movs	r0, #7
	return fal_add(addr);
   1b2fe:	e7f2      	b.n	1b2e6 <ll_fal_add+0xf2>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b300:	4630      	mov	r0, r6
   1b302:	2206      	movs	r2, #6
   1b304:	4659      	mov	r1, fp
   1b306:	9301      	str	r3, [sp, #4]
   1b308:	f00f fb97 	bl	2aa3a <memcmp>
   1b30c:	9b01      	ldr	r3, [sp, #4]
   1b30e:	2800      	cmp	r0, #0
   1b310:	d1da      	bne.n	1b2c8 <ll_fal_add+0xd4>
		rl[j].fal = 1U;
   1b312:	5d7b      	ldrb	r3, [r7, r5]
   1b314:	f043 0320 	orr.w	r3, r3, #32
   1b318:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   1b31a:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1b31e:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1b322:	e7d9      	b.n	1b2d8 <ll_fal_add+0xe4>
   1b324:	20002c16 	.word	0x20002c16
   1b328:	20002d41 	.word	0x20002d41

0001b32c <ll_fal_remove>:
{
   1b32c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b330:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   1b332:	2000      	movs	r0, #0
   1b334:	f7f9 ff64 	bl	15200 <ull_adv_filter_pol_get>
   1b338:	b9f0      	cbnz	r0, 1b378 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1b33a:	f7fa f993 	bl	15664 <ull_scan_filter_pol_get>
   1b33e:	f010 0401 	ands.w	r4, r0, #1
   1b342:	d119      	bne.n	1b378 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   1b344:	f896 8000 	ldrb.w	r8, [r6]
   1b348:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1b34c:	d035      	beq.n	1b3ba <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b34e:	4d1c      	ldr	r5, [pc, #112]	; (1b3c0 <ll_fal_remove+0x94>)
   1b350:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1b352:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b354:	f008 0801 	and.w	r8, r8, #1
   1b358:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1b35c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b360:	07db      	lsls	r3, r3, #31
   1b362:	d501      	bpl.n	1b368 <ll_fal_remove+0x3c>
   1b364:	4542      	cmp	r2, r8
   1b366:	d00a      	beq.n	1b37e <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   1b368:	3401      	adds	r4, #1
   1b36a:	2c08      	cmp	r4, #8
   1b36c:	f105 0508 	add.w	r5, r5, #8
   1b370:	d1f2      	bne.n	1b358 <ll_fal_remove+0x2c>
   1b372:	2002      	movs	r0, #2
}
   1b374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b378:	200c      	movs	r0, #12
}
   1b37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b37e:	2206      	movs	r2, #6
   1b380:	4628      	mov	r0, r5
   1b382:	4631      	mov	r1, r6
   1b384:	f00f fb59 	bl	2aa3a <memcmp>
   1b388:	2800      	cmp	r0, #0
   1b38a:	d1ed      	bne.n	1b368 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   1b38c:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1b390:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b392:	2b07      	cmp	r3, #7
   1b394:	d808      	bhi.n	1b3a8 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   1b396:	4a0b      	ldr	r2, [pc, #44]	; (1b3c4 <ll_fal_remove+0x98>)
   1b398:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1b39c:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1b3a0:	f360 1145 	bfi	r1, r0, #5, #1
   1b3a4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1b3a8:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1b3ac:	f36f 0300 	bfc	r3, #0, #1
   1b3b0:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   1b3b4:	2000      	movs	r0, #0
}
   1b3b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1b3ba:	4620      	mov	r0, r4
}
   1b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b3c0:	20002c16 	.word	0x20002c16
   1b3c4:	20002d40 	.word	0x20002d40

0001b3c8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b3c8:	2807      	cmp	r0, #7
{
   1b3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3ce:	4604      	mov	r4, r0
   1b3d0:	460f      	mov	r7, r1
   1b3d2:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b3d4:	d819      	bhi.n	1b40a <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   1b3d6:	4e1b      	ldr	r6, [pc, #108]	; (1b444 <ll_rl_id_addr_get+0x7c>)
   1b3d8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b3dc:	ea4f 0884 	mov.w	r8, r4, lsl #2
   1b3e0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1b3e4:	07db      	lsls	r3, r3, #31
   1b3e6:	d51e      	bpl.n	1b426 <ll_rl_id_addr_get+0x5e>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b3e8:	44a0      	add	r8, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b3ea:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1b3ec:	f816 3038 	ldrb.w	r3, [r6, r8, lsl #3]
   1b3f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b3f4:	703b      	strb	r3, [r7, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1b3f6:	2301      	movs	r3, #1
   1b3f8:	fb10 3404 	smlabb	r4, r0, r4, r3
   1b3fc:	1933      	adds	r3, r6, r4
   1b3fe:	5932      	ldr	r2, [r6, r4]
   1b400:	602a      	str	r2, [r5, #0]
   1b402:	889b      	ldrh	r3, [r3, #4]
   1b404:	80ab      	strh	r3, [r5, #4]
}
   1b406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1b40a:	4a0f      	ldr	r2, [pc, #60]	; (1b448 <ll_rl_id_addr_get+0x80>)
   1b40c:	490f      	ldr	r1, [pc, #60]	; (1b44c <ll_rl_id_addr_get+0x84>)
   1b40e:	4810      	ldr	r0, [pc, #64]	; (1b450 <ll_rl_id_addr_get+0x88>)
   1b410:	f44f 7389 	mov.w	r3, #274	; 0x112
   1b414:	f009 fd77 	bl	24f06 <printk>
   1b418:	4040      	eors	r0, r0
   1b41a:	f380 8811 	msr	BASEPRI, r0
   1b41e:	f04f 0003 	mov.w	r0, #3
   1b422:	df02      	svc	2
   1b424:	e7d7      	b.n	1b3d6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1b426:	4a08      	ldr	r2, [pc, #32]	; (1b448 <ll_rl_id_addr_get+0x80>)
   1b428:	490a      	ldr	r1, [pc, #40]	; (1b454 <ll_rl_id_addr_get+0x8c>)
   1b42a:	4809      	ldr	r0, [pc, #36]	; (1b450 <ll_rl_id_addr_get+0x88>)
   1b42c:	f240 1313 	movw	r3, #275	; 0x113
   1b430:	f009 fd69 	bl	24f06 <printk>
   1b434:	4040      	eors	r0, r0
   1b436:	f380 8811 	msr	BASEPRI, r0
   1b43a:	f04f 0003 	mov.w	r0, #3
   1b43e:	df02      	svc	2
   1b440:	e7d2      	b.n	1b3e8 <ll_rl_id_addr_get+0x20>
   1b442:	bf00      	nop
   1b444:	20002d40 	.word	0x20002d40
   1b448:	0002ca34 	.word	0x0002ca34
   1b44c:	0002ca78 	.word	0x0002ca78
   1b450:	0002bfdc 	.word	0x0002bfdc
   1b454:	0002ca84 	.word	0x0002ca84

0001b458 <ll_rl_size_get>:
   1b458:	2008      	movs	r0, #8
   1b45a:	4770      	bx	lr

0001b45c <ll_rl_clear>:
{
   1b45c:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b45e:	2000      	movs	r0, #0
   1b460:	f7f9 fec2 	bl	151e8 <ull_adv_is_enabled>
		? 0 : 1;
   1b464:	b108      	cbz	r0, 1b46a <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b466:	200c      	movs	r0, #12
}
   1b468:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b46a:	f7fa f8e3 	bl	15634 <ull_scan_is_enabled>
		? 0 : 1;
   1b46e:	f030 0001 	bics.w	r0, r0, #1
   1b472:	d1f8      	bne.n	1b466 <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   1b474:	4b18      	ldr	r3, [pc, #96]	; (1b4d8 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   1b476:	4c19      	ldr	r4, [pc, #100]	; (1b4dc <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   1b478:	7819      	ldrb	r1, [r3, #0]
   1b47a:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1b47e:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1b480:	f360 0100 	bfi	r1, r0, #0, #1
   1b484:	f360 0200 	bfi	r2, r0, #0, #1
   1b488:	7019      	strb	r1, [r3, #0]
   1b48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1b48e:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1b492:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1b496:	f360 0100 	bfi	r1, r0, #0, #1
   1b49a:	f360 0200 	bfi	r2, r0, #0, #1
   1b49e:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1b4a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1b4a6:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1b4aa:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1b4ae:	f360 0100 	bfi	r1, r0, #0, #1
   1b4b2:	f360 0200 	bfi	r2, r0, #0, #1
   1b4b6:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1b4ba:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1b4be:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1b4c2:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1b4c6:	f360 0100 	bfi	r1, r0, #0, #1
   1b4ca:	f360 0200 	bfi	r2, r0, #0, #1
   1b4ce:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1b4d2:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1b4d6:	bd10      	pop	{r4, pc}
   1b4d8:	20002d40 	.word	0x20002d40
   1b4dc:	20003572 	.word	0x20003572

0001b4e0 <ll_rl_remove>:
{
   1b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4e4:	b083      	sub	sp, #12
   1b4e6:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b4e8:	2000      	movs	r0, #0
{
   1b4ea:	9301      	str	r3, [sp, #4]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b4ec:	f7f9 fe7c 	bl	151e8 <ull_adv_is_enabled>
		? 0 : 1;
   1b4f0:	b118      	cbz	r0, 1b4fa <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b4f2:	200c      	movs	r0, #12
}
   1b4f4:	b003      	add	sp, #12
   1b4f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b4fa:	f7fa f89b 	bl	15634 <ull_scan_is_enabled>
		? 0 : 1;
   1b4fe:	f030 0a01 	bics.w	sl, r0, #1
   1b502:	d1f6      	bne.n	1b4f2 <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b504:	f8dd b004 	ldr.w	fp, [sp, #4]
   1b508:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1b624 <ll_rl_remove+0x144>
   1b50c:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b510:	f003 0301 	and.w	r3, r3, #1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b514:	4654      	mov	r4, sl
   1b516:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   1b51a:	461f      	mov	r7, r3
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b51c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b520:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
   1b524:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   1b528:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b52c:	07db      	lsls	r3, r3, #31
   1b52e:	ea4f 0984 	mov.w	r9, r4, lsl #2
   1b532:	d501      	bpl.n	1b538 <ll_rl_remove+0x58>
   1b534:	42ba      	cmp	r2, r7
   1b536:	d008      	beq.n	1b54a <ll_rl_remove+0x6a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b538:	3401      	adds	r4, #1
   1b53a:	2c08      	cmp	r4, #8
   1b53c:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1b540:	d1ec      	bne.n	1b51c <ll_rl_remove+0x3c>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b542:	2002      	movs	r0, #2
}
   1b544:	b003      	add	sp, #12
   1b546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b54a:	4640      	mov	r0, r8
   1b54c:	2206      	movs	r2, #6
   1b54e:	4659      	mov	r1, fp
   1b550:	f00f fa73 	bl	2aa3a <memcmp>
   1b554:	2800      	cmp	r0, #0
   1b556:	d1ef      	bne.n	1b538 <ll_rl_remove+0x58>
		if (rl[i].pirk) {
   1b558:	782b      	ldrb	r3, [r5, #0]
   1b55a:	075b      	lsls	r3, r3, #29
   1b55c:	4607      	mov	r7, r0
   1b55e:	d52e      	bpl.n	1b5be <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b560:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1b628 <ll_rl_remove+0x148>
   1b564:	f898 c000 	ldrb.w	ip, [r8]
   1b568:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1b56c:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
   1b570:	d023      	beq.n	1b5ba <ll_rl_remove+0xda>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1b572:	f895 e017 	ldrb.w	lr, [r5, #23]
			if (pj && pi != pj) {
   1b576:	45e6      	cmp	lr, ip
   1b578:	d01f      	beq.n	1b5ba <ll_rl_remove+0xda>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1b57a:	4a2c      	ldr	r2, [pc, #176]	; (1b62c <ll_rl_remove+0x14c>)
   1b57c:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   1b580:	eb02 120e 	add.w	r2, r2, lr, lsl #4
   1b584:	4615      	mov	r5, r2
   1b586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1b588:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b58c:	4d28      	ldr	r5, [pc, #160]	; (1b630 <ll_rl_remove+0x150>)
					if (rl[k].taken && rl[k].pirk &&
   1b58e:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
   1b592:	fa5f f18a 	uxtb.w	r1, sl
   1b596:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1b59a:	07d0      	lsls	r0, r2, #31
   1b59c:	f10a 0a01 	add.w	sl, sl, #1
   1b5a0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1b5a4:	d504      	bpl.n	1b5b0 <ll_rl_remove+0xd0>
   1b5a6:	0750      	lsls	r0, r2, #29
   1b5a8:	d502      	bpl.n	1b5b0 <ll_rl_remove+0xd0>
   1b5aa:	7dea      	ldrb	r2, [r5, #23]
   1b5ac:	4562      	cmp	r2, ip
   1b5ae:	d032      	beq.n	1b616 <ll_rl_remove+0x136>
				for (k = 0U;
   1b5b0:	f1ba 0f08 	cmp.w	sl, #8
   1b5b4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1b5b8:	d1e9      	bne.n	1b58e <ll_rl_remove+0xae>
			peer_irk_count--;
   1b5ba:	f888 c000 	strb.w	ip, [r8]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1b5be:	9b01      	ldr	r3, [sp, #4]
   1b5c0:	4d1c      	ldr	r5, [pc, #112]	; (1b634 <ll_rl_remove+0x154>)
   1b5c2:	f893 a000 	ldrb.w	sl, [r3]
	for (i = 0; i < FAL_SIZE; i++) {
   1b5c6:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b5ca:	f00a 0a01 	and.w	sl, sl, #1
   1b5ce:	f818 3037 	ldrb.w	r3, [r8, r7, lsl #3]
   1b5d2:	07d9      	lsls	r1, r3, #31
   1b5d4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1b5d8:	d501      	bpl.n	1b5de <ll_rl_remove+0xfe>
   1b5da:	4552      	cmp	r2, sl
   1b5dc:	d00f      	beq.n	1b5fe <ll_rl_remove+0x11e>
	for (i = 0; i < FAL_SIZE; i++) {
   1b5de:	3701      	adds	r7, #1
   1b5e0:	2f08      	cmp	r7, #8
   1b5e2:	f105 0508 	add.w	r5, r5, #8
   1b5e6:	d1f2      	bne.n	1b5ce <ll_rl_remove+0xee>
		rl[i].taken = 0U;
   1b5e8:	444c      	add	r4, r9
		return 0;
   1b5ea:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1b5ec:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1b5f0:	f36f 0300 	bfc	r3, #0, #1
   1b5f4:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
}
   1b5f8:	b003      	add	sp, #12
   1b5fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1b5fe:	2206      	movs	r2, #6
   1b600:	4628      	mov	r0, r5
   1b602:	4659      	mov	r1, fp
   1b604:	f00f fa19 	bl	2aa3a <memcmp>
   1b608:	2800      	cmp	r0, #0
   1b60a:	d1e8      	bne.n	1b5de <ll_rl_remove+0xfe>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1b60c:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
   1b610:	23ff      	movs	r3, #255	; 0xff
   1b612:	707b      	strb	r3, [r7, #1]
   1b614:	e7e8      	b.n	1b5e8 <ll_rl_remove+0x108>
						rl[k].pirk_idx = pi;
   1b616:	f883 e017 	strb.w	lr, [r3, #23]
						peer_irk_rl_ids[pi] = k;
   1b61a:	4b07      	ldr	r3, [pc, #28]	; (1b638 <ll_rl_remove+0x158>)
   1b61c:	f803 100e 	strb.w	r1, [r3, lr]
						break;
   1b620:	e7cb      	b.n	1b5ba <ll_rl_remove+0xda>
   1b622:	bf00      	nop
   1b624:	20002d41 	.word	0x20002d41
   1b628:	20003572 	.word	0x20003572
   1b62c:	20002cc0 	.word	0x20002cc0
   1b630:	20002d40 	.word	0x20002d40
   1b634:	20002c16 	.word	0x20002c16
   1b638:	20002cb8 	.word	0x20002cb8

0001b63c <ll_rl_crpa_set>:
{
   1b63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1b640:	795c      	ldrb	r4, [r3, #5]
   1b642:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1b646:	2c40      	cmp	r4, #64	; 0x40
   1b648:	d001      	beq.n	1b64e <ll_rl_crpa_set+0x12>
}
   1b64a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1b64e:	461e      	mov	r6, r3
   1b650:	460f      	mov	r7, r1
   1b652:	b301      	cbz	r1, 1b696 <ll_rl_crpa_set+0x5a>
   1b654:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1b6c0 <ll_rl_crpa_set+0x84>
   1b658:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b65a:	f000 0a01 	and.w	sl, r0, #1
   1b65e:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1b662:	e003      	b.n	1b66c <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b664:	2c08      	cmp	r4, #8
   1b666:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1b66a:	d0ee      	beq.n	1b64a <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b66c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b670:	4625      	mov	r5, r4
   1b672:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1b676:	07d1      	lsls	r1, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b678:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b67c:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1b680:	d5f0      	bpl.n	1b664 <ll_rl_crpa_set+0x28>
   1b682:	4553      	cmp	r3, sl
   1b684:	d1ee      	bne.n	1b664 <ll_rl_crpa_set+0x28>
   1b686:	4648      	mov	r0, r9
   1b688:	2206      	movs	r2, #6
   1b68a:	4639      	mov	r1, r7
   1b68c:	f00f f9d5 	bl	2aa3a <memcmp>
   1b690:	2800      	cmp	r0, #0
   1b692:	d1e7      	bne.n	1b664 <ll_rl_crpa_set+0x28>
   1b694:	e004      	b.n	1b6a0 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1b696:	2a07      	cmp	r2, #7
   1b698:	d8d7      	bhi.n	1b64a <ll_rl_crpa_set+0xe>
   1b69a:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1b6c4 <ll_rl_crpa_set+0x88>
   1b69e:	4615      	mov	r5, r2
   1b6a0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1b6a4:	00eb      	lsls	r3, r5, #3
   1b6a6:	f818 2035 	ldrb.w	r2, [r8, r5, lsl #3]
   1b6aa:	07d2      	lsls	r2, r2, #31
   1b6ac:	d5cd      	bpl.n	1b64a <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1b6ae:	3318      	adds	r3, #24
   1b6b0:	6830      	ldr	r0, [r6, #0]
   1b6b2:	f848 0003 	str.w	r0, [r8, r3]
   1b6b6:	4498      	add	r8, r3
   1b6b8:	88b3      	ldrh	r3, [r6, #4]
   1b6ba:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   1b6be:	e7c4      	b.n	1b64a <ll_rl_crpa_set+0xe>
   1b6c0:	20002d41 	.word	0x20002d41
   1b6c4:	20002d40 	.word	0x20002d40

0001b6c8 <ll_rl_crpa_get>:
{
   1b6c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b6cc:	4682      	mov	sl, r0
   1b6ce:	4e1a      	ldr	r6, [pc, #104]	; (1b738 <ll_rl_crpa_get+0x70>)
   1b6d0:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1b6d4:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b6d6:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b6d8:	f008 0801 	and.w	r8, r8, #1
   1b6dc:	1e77      	subs	r7, r6, #1
   1b6de:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b6e2:	00d5      	lsls	r5, r2, #3
   1b6e4:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b6e8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b6ec:	07db      	lsls	r3, r3, #31
   1b6ee:	f104 0401 	add.w	r4, r4, #1
   1b6f2:	d501      	bpl.n	1b6f8 <ll_rl_crpa_get+0x30>
   1b6f4:	4542      	cmp	r2, r8
   1b6f6:	d006      	beq.n	1b706 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b6f8:	2c08      	cmp	r4, #8
   1b6fa:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b6fe:	d1ee      	bne.n	1b6de <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b700:	2002      	movs	r0, #2
}
   1b702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b706:	4630      	mov	r0, r6
   1b708:	2206      	movs	r2, #6
   1b70a:	4651      	mov	r1, sl
   1b70c:	f00f f995 	bl	2aa3a <memcmp>
   1b710:	4683      	mov	fp, r0
   1b712:	2800      	cmp	r0, #0
   1b714:	d1f0      	bne.n	1b6f8 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1b716:	3518      	adds	r5, #24
   1b718:	197c      	adds	r4, r7, r5
   1b71a:	2106      	movs	r1, #6
   1b71c:	4620      	mov	r0, r4
   1b71e:	f7f4 fceb 	bl	100f8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1b722:	2800      	cmp	r0, #0
   1b724:	d0ec      	beq.n	1b700 <ll_rl_crpa_get+0x38>
   1b726:	5978      	ldr	r0, [r7, r5]
   1b728:	f8c9 0000 	str.w	r0, [r9]
   1b72c:	88a3      	ldrh	r3, [r4, #4]
   1b72e:	f8a9 3004 	strh.w	r3, [r9, #4]
		return 0;
   1b732:	4658      	mov	r0, fp
}
   1b734:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b738:	20002d41 	.word	0x20002d41

0001b73c <ll_rl_lrpa_get>:
{
   1b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b740:	4681      	mov	r9, r0
   1b742:	4e16      	ldr	r6, [pc, #88]	; (1b79c <ll_rl_lrpa_get+0x60>)
   1b744:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1b748:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b74a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b74c:	f008 0801 	and.w	r8, r8, #1
   1b750:	1e77      	subs	r7, r6, #1
   1b752:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b756:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1b75a:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b75e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b762:	07db      	lsls	r3, r3, #31
   1b764:	f104 0401 	add.w	r4, r4, #1
   1b768:	d501      	bpl.n	1b76e <ll_rl_lrpa_get+0x32>
   1b76a:	4542      	cmp	r2, r8
   1b76c:	d006      	beq.n	1b77c <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b76e:	2c08      	cmp	r4, #8
   1b770:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b774:	d1ed      	bne.n	1b752 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b776:	2002      	movs	r0, #2
}
   1b778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b77c:	4630      	mov	r0, r6
   1b77e:	2206      	movs	r2, #6
   1b780:	4649      	mov	r1, r9
   1b782:	f00f f95a 	bl	2aa3a <memcmp>
   1b786:	2800      	cmp	r0, #0
   1b788:	d1f1      	bne.n	1b76e <ll_rl_lrpa_get+0x32>
   1b78a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b78c:	681a      	ldr	r2, [r3, #0]
   1b78e:	f8ca 2000 	str.w	r2, [sl]
   1b792:	889b      	ldrh	r3, [r3, #4]
   1b794:	f8aa 3004 	strh.w	r3, [sl, #4]
}
   1b798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b79c:	20002d41 	.word	0x20002d41

0001b7a0 <ll_rl_enable>:
{
   1b7a0:	b510      	push	{r4, lr}
   1b7a2:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b7a4:	2000      	movs	r0, #0
   1b7a6:	f7f9 fd1f 	bl	151e8 <ull_adv_is_enabled>
		? 0 : 1;
   1b7aa:	b108      	cbz	r0, 1b7b0 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b7ac:	200c      	movs	r0, #12
}
   1b7ae:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b7b0:	f7f9 ff40 	bl	15634 <ull_scan_is_enabled>
		? 0 : 1;
   1b7b4:	f030 0001 	bics.w	r0, r0, #1
   1b7b8:	d1f8      	bne.n	1b7ac <ll_rl_enable+0xc>
	switch (enable) {
   1b7ba:	b134      	cbz	r4, 1b7ca <ll_rl_enable+0x2a>
   1b7bc:	2c01      	cmp	r4, #1
   1b7be:	d102      	bne.n	1b7c6 <ll_rl_enable+0x26>
		rl_enable = 1U;
   1b7c0:	4b04      	ldr	r3, [pc, #16]	; (1b7d4 <ll_rl_enable+0x34>)
   1b7c2:	701c      	strb	r4, [r3, #0]
}
   1b7c4:	bd10      	pop	{r4, pc}
	switch (enable) {
   1b7c6:	2012      	movs	r0, #18
}
   1b7c8:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1b7ca:	4b02      	ldr	r3, [pc, #8]	; (1b7d4 <ll_rl_enable+0x34>)
   1b7cc:	701c      	strb	r4, [r3, #0]
	return 0;
   1b7ce:	4620      	mov	r0, r4
}
   1b7d0:	bd10      	pop	{r4, pc}
   1b7d2:	bf00      	nop
   1b7d4:	20003573 	.word	0x20003573

0001b7d8 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1b7d8:	4b03      	ldr	r3, [pc, #12]	; (1b7e8 <ll_rl_timeout_set+0x10>)
   1b7da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b7de:	fb02 f000 	mul.w	r0, r2, r0
   1b7e2:	6018      	str	r0, [r3, #0]
}
   1b7e4:	4770      	bx	lr
   1b7e6:	bf00      	nop
   1b7e8:	20002eb4 	.word	0x20002eb4

0001b7ec <ll_priv_mode_set>:
{
   1b7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b7f0:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b7f2:	2000      	movs	r0, #0
{
   1b7f4:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1b7f6:	f7f9 fcf7 	bl	151e8 <ull_adv_is_enabled>
		? 0 : 1;
   1b7fa:	b110      	cbz	r0, 1b802 <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b7fc:	200c      	movs	r0, #12
}
   1b7fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1b802:	f7f9 ff17 	bl	15634 <ull_scan_is_enabled>
		? 0 : 1;
   1b806:	f030 0401 	bics.w	r4, r0, #1
   1b80a:	d1f7      	bne.n	1b7fc <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1b80c:	4e1a      	ldr	r6, [pc, #104]	; (1b878 <ll_priv_mode_set+0x8c>)
   1b80e:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b812:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b814:	f009 0901 	and.w	r9, r9, #1
   1b818:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1b81c:	00d5      	lsls	r5, r2, #3
   1b81e:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1b822:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1b826:	07db      	lsls	r3, r3, #31
   1b828:	f104 0401 	add.w	r4, r4, #1
   1b82c:	d501      	bpl.n	1b832 <ll_priv_mode_set+0x46>
   1b82e:	454a      	cmp	r2, r9
   1b830:	d006      	beq.n	1b840 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1b832:	2c08      	cmp	r4, #8
   1b834:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1b838:	d1ee      	bne.n	1b818 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b83a:	2002      	movs	r0, #2
}
   1b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1b840:	4630      	mov	r0, r6
   1b842:	2206      	movs	r2, #6
   1b844:	4651      	mov	r1, sl
   1b846:	f00f f8f8 	bl	2aa3a <memcmp>
   1b84a:	2800      	cmp	r0, #0
   1b84c:	d1f1      	bne.n	1b832 <ll_priv_mode_set+0x46>
		switch (mode) {
   1b84e:	f1b8 0f00 	cmp.w	r8, #0
   1b852:	d00b      	beq.n	1b86c <ll_priv_mode_set+0x80>
   1b854:	f1b8 0f01 	cmp.w	r8, #1
   1b858:	d105      	bne.n	1b866 <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   1b85a:	5d7b      	ldrb	r3, [r7, r5]
   1b85c:	f043 0310 	orr.w	r3, r3, #16
   1b860:	557b      	strb	r3, [r7, r5]
}
   1b862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1b866:	2012      	movs	r0, #18
}
   1b868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1b86c:	5d7b      	ldrb	r3, [r7, r5]
   1b86e:	f368 1304 	bfi	r3, r8, #4, #1
   1b872:	557b      	strb	r3, [r7, r5]
	return 0;
   1b874:	4640      	mov	r0, r8
			break;
   1b876:	e7c2      	b.n	1b7fe <ll_priv_mode_set+0x12>
   1b878:	20002d41 	.word	0x20002d41

0001b87c <ull_filter_reset>:
{
   1b87c:	b4d0      	push	{r4, r6, r7}
   1b87e:	4930      	ldr	r1, [pc, #192]	; (1b940 <ull_filter_reset+0xc4>)
   1b880:	4c30      	ldr	r4, [pc, #192]	; (1b944 <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   1b882:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1b884:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1b888:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1b88a:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1b88c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1b890:	d805      	bhi.n	1b89e <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1b892:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1b896:	f36f 1245 	bfc	r2, #5, #1
   1b89a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1b89e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1b8a2:	f36f 0200 	bfc	r2, #0, #1
   1b8a6:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1b8aa:	3301      	adds	r3, #1
   1b8ac:	2b08      	cmp	r3, #8
   1b8ae:	d1e9      	bne.n	1b884 <ull_filter_reset+0x8>
	rl_enable = 0U;
   1b8b0:	4a25      	ldr	r2, [pc, #148]	; (1b948 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1b8b2:	4c26      	ldr	r4, [pc, #152]	; (1b94c <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1b8b4:	2300      	movs	r3, #0
   1b8b6:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1b8b8:	780a      	ldrb	r2, [r1, #0]
   1b8ba:	f363 0200 	bfi	r2, r3, #0, #1
   1b8be:	700a      	strb	r2, [r1, #0]
   1b8c0:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1b8c4:	f363 0200 	bfi	r2, r3, #0, #1
   1b8c8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1b8cc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1b8d0:	f363 0200 	bfi	r2, r3, #0, #1
   1b8d4:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1b8d8:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1b8dc:	f363 0200 	bfi	r2, r3, #0, #1
   1b8e0:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1b8e4:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1b8e8:	f363 0200 	bfi	r2, r3, #0, #1
   1b8ec:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1b8f0:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1b8f4:	f363 0200 	bfi	r2, r3, #0, #1
   1b8f8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1b8fc:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1b900:	f363 0200 	bfi	r2, r3, #0, #1
   1b904:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1b908:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1b90c:	f363 0200 	bfi	r2, r3, #0, #1
   1b910:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1b914:	4a0e      	ldr	r2, [pc, #56]	; (1b950 <ull_filter_reset+0xd4>)
   1b916:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1b918:	4b0e      	ldr	r3, [pc, #56]	; (1b954 <ull_filter_reset+0xd8>)
   1b91a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b91e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1b922:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1b926:	4b0c      	ldr	r3, [pc, #48]	; (1b958 <ull_filter_reset+0xdc>)
   1b928:	6023      	str	r3, [r4, #0]
	if (init) {
   1b92a:	b120      	cbz	r0, 1b936 <ull_filter_reset+0xba>
}
   1b92c:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1b92e:	490b      	ldr	r1, [pc, #44]	; (1b95c <ull_filter_reset+0xe0>)
   1b930:	480b      	ldr	r0, [pc, #44]	; (1b960 <ull_filter_reset+0xe4>)
   1b932:	f00e bd34 	b.w	2a39e <k_work_init_delayable>
}
   1b936:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1b938:	4809      	ldr	r0, [pc, #36]	; (1b960 <ull_filter_reset+0xe4>)
   1b93a:	f00e bd3c 	b.w	2a3b6 <k_work_cancel_delayable>
   1b93e:	bf00      	nop
   1b940:	20002d40 	.word	0x20002d40
   1b944:	20002c14 	.word	0x20002c14
   1b948:	20003573 	.word	0x20003573
   1b94c:	20002eb4 	.word	0x20002eb4
   1b950:	20003572 	.word	0x20003572
   1b954:	20001c10 	.word	0x20001c10
   1b958:	000dbba0 	.word	0x000dbba0
   1b95c:	0001bc21 	.word	0x0001bc21
   1b960:	20001c18 	.word	0x20001c18

0001b964 <ull_filter_lll_get>:
		return &fal_filter;
   1b964:	4a03      	ldr	r2, [pc, #12]	; (1b974 <ull_filter_lll_get+0x10>)
   1b966:	4b04      	ldr	r3, [pc, #16]	; (1b978 <ull_filter_lll_get+0x14>)
}
   1b968:	2800      	cmp	r0, #0
   1b96a:	bf0c      	ite	eq
   1b96c:	4610      	moveq	r0, r2
   1b96e:	4618      	movne	r0, r3
   1b970:	4770      	bx	lr
   1b972:	bf00      	nop
   1b974:	20002e80 	.word	0x20002e80
   1b978:	20002c54 	.word	0x20002c54

0001b97c <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1b97c:	b1a8      	cbz	r0, 1b9aa <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b97e:	4a0c      	ldr	r2, [pc, #48]	; (1b9b0 <ull_filter_adv_scan_state_cb+0x34>)
   1b980:	6812      	ldr	r2, [r2, #0]
{
   1b982:	b510      	push	{r4, lr}
   1b984:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b988:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b98c:	2100      	movs	r1, #0
   1b98e:	fbe2 0103 	umlal	r0, r1, r2, r3
   1b992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b996:	2300      	movs	r3, #0
   1b998:	f7e4 fff0 	bl	97c <__aeabi_uldivmod>
}
   1b99c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b9a0:	4602      	mov	r2, r0
   1b9a2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1b9a4:	4803      	ldr	r0, [pc, #12]	; (1b9b4 <ull_filter_adv_scan_state_cb+0x38>)
   1b9a6:	f006 bf33 	b.w	22810 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1b9aa:	4802      	ldr	r0, [pc, #8]	; (1b9b4 <ull_filter_adv_scan_state_cb+0x38>)
   1b9ac:	f00e bd03 	b.w	2a3b6 <k_work_cancel_delayable>
   1b9b0:	20002eb4 	.word	0x20002eb4
   1b9b4:	20001c18 	.word	0x20001c18

0001b9b8 <ull_filter_adv_update>:
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1b9b8:	4a0d      	ldr	r2, [pc, #52]	; (1b9f0 <ull_filter_adv_update+0x38>)
{
   1b9ba:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1b9bc:	2300      	movs	r3, #0
   1b9be:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   1b9c0:	b970      	cbnz	r0, 1b9e0 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   1b9c2:	4b0c      	ldr	r3, [pc, #48]	; (1b9f4 <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   1b9c4:	4a0c      	ldr	r2, [pc, #48]	; (1b9f8 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   1b9c6:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1b9c8:	2000      	movs	r0, #0
   1b9ca:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1b9cc:	b903      	cbnz	r3, 1b9d0 <ull_filter_adv_update+0x18>
}
   1b9ce:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   1b9d0:	f7f9 fe30 	bl	15634 <ull_scan_is_enabled>
	if (rl_enable &&
   1b9d4:	2800      	cmp	r0, #0
   1b9d6:	d1fa      	bne.n	1b9ce <ull_filter_adv_update+0x16>
}
   1b9d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1b9dc:	f7ff bb5a 	b.w	1b094 <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   1b9e0:	4618      	mov	r0, r3
   1b9e2:	f7f9 fe3f 	bl	15664 <ull_scan_filter_pol_get>
	if (adv_fp &&
   1b9e6:	07c3      	lsls	r3, r0, #31
   1b9e8:	d4eb      	bmi.n	1b9c2 <ull_filter_adv_update+0xa>
		fal_update();
   1b9ea:	f7ff fb8d 	bl	1b108 <fal_update>
   1b9ee:	e7e8      	b.n	1b9c2 <ull_filter_adv_update+0xa>
   1b9f0:	20002c54 	.word	0x20002c54
   1b9f4:	20003573 	.word	0x20003573
   1b9f8:	20002e80 	.word	0x20002e80

0001b9fc <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   1b9fc:	4a0e      	ldr	r2, [pc, #56]	; (1ba38 <ull_filter_scan_update+0x3c>)
{
   1b9fe:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1ba00:	2300      	movs	r3, #0
   1ba02:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   1ba04:	07c2      	lsls	r2, r0, #31
   1ba06:	d40e      	bmi.n	1ba26 <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   1ba08:	4b0c      	ldr	r3, [pc, #48]	; (1ba3c <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   1ba0a:	4a0d      	ldr	r2, [pc, #52]	; (1ba40 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   1ba0c:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1ba0e:	2000      	movs	r0, #0
   1ba10:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1ba12:	b903      	cbnz	r3, 1ba16 <ull_filter_scan_update+0x1a>
}
   1ba14:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   1ba16:	f7f9 fbe7 	bl	151e8 <ull_adv_is_enabled>
	if (rl_enable &&
   1ba1a:	2800      	cmp	r0, #0
   1ba1c:	d1fa      	bne.n	1ba14 <ull_filter_scan_update+0x18>
}
   1ba1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1ba22:	f7ff bb37 	b.w	1b094 <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   1ba26:	4618      	mov	r0, r3
   1ba28:	f7f9 fbea 	bl	15200 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   1ba2c:	2800      	cmp	r0, #0
   1ba2e:	d1eb      	bne.n	1ba08 <ull_filter_scan_update+0xc>
		fal_update();
   1ba30:	f7ff fb6a 	bl	1b108 <fal_update>
   1ba34:	e7e8      	b.n	1ba08 <ull_filter_scan_update+0xc>
   1ba36:	bf00      	nop
   1ba38:	20002c54 	.word	0x20002c54
   1ba3c:	20003573 	.word	0x20003573
   1ba40:	20002e80 	.word	0x20002e80

0001ba44 <ull_filter_rpa_update>:
{
   1ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ba48:	4683      	mov	fp, r0
   1ba4a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1ba4c:	f00e fe48 	bl	2a6e0 <z_impl_k_uptime_ticks>
   1ba50:	014b      	lsls	r3, r1, #5
   1ba52:	0142      	lsls	r2, r0, #5
   1ba54:	1a12      	subs	r2, r2, r0
   1ba56:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1ba5a:	eb63 0301 	sbc.w	r3, r3, r1
   1ba5e:	009b      	lsls	r3, r3, #2
   1ba60:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1ba64:	eb19 0900 	adds.w	r9, r9, r0
   1ba68:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1ba6c:	eb41 0103 	adc.w	r1, r1, r3
   1ba70:	00cb      	lsls	r3, r1, #3
   1ba72:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1ba76:	0bd9      	lsrs	r1, r3, #15
   1ba78:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1ba7c:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1ba80:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1ba82:	f1bb 0f00 	cmp.w	fp, #0
   1ba86:	d117      	bne.n	1bab8 <ull_filter_rpa_update+0x74>
   1ba88:	4a5d      	ldr	r2, [pc, #372]	; (1bc00 <ull_filter_rpa_update+0x1bc>)
   1ba8a:	e9d2 3200 	ldrd	r3, r2, [r2]
   1ba8e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1ba92:	bf08      	it	eq
   1ba94:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1ba98:	d00e      	beq.n	1bab8 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1ba9a:	ebb9 0303 	subs.w	r3, r9, r3
   1ba9e:	eb61 0202 	sbc.w	r2, r1, r2
   1baa2:	4958      	ldr	r1, [pc, #352]	; (1bc04 <ull_filter_rpa_update+0x1c0>)
   1baa4:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1baa6:	428b      	cmp	r3, r1
   1baa8:	f172 0300 	sbcs.w	r3, r2, #0
   1baac:	bfac      	ite	ge
   1baae:	f04f 0a01 	movge.w	sl, #1
   1bab2:	f04f 0a00 	movlt.w	sl, #0
   1bab6:	e001      	b.n	1babc <ull_filter_rpa_update+0x78>
   1bab8:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1babc:	4e52      	ldr	r6, [pc, #328]	; (1bc08 <ull_filter_rpa_update+0x1c4>)
   1babe:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1bc0c <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1bac2:	2400      	movs	r4, #0
   1bac4:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1bac8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1bacc:	00a5      	lsls	r5, r4, #2
   1bace:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bad2:	07da      	lsls	r2, r3, #31
   1bad4:	d515      	bpl.n	1bb02 <ull_filter_rpa_update+0xbe>
   1bad6:	f1ba 0f00 	cmp.w	sl, #0
   1bada:	d101      	bne.n	1bae0 <ull_filter_rpa_update+0x9c>
   1badc:	0798      	lsls	r0, r3, #30
   1bade:	d410      	bmi.n	1bb02 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1bae0:	192b      	adds	r3, r5, r4
   1bae2:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1bae6:	0759      	lsls	r1, r3, #29
   1bae8:	d431      	bmi.n	1bb4e <ull_filter_rpa_update+0x10a>
			if (rl[i].lirk) {
   1baea:	192b      	adds	r3, r5, r4
   1baec:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1baf0:	071a      	lsls	r2, r3, #28
   1baf2:	d41b      	bmi.n	1bb2c <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1baf4:	4425      	add	r5, r4
   1baf6:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1bafa:	f043 0302 	orr.w	r3, r3, #2
   1bafe:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bb02:	3401      	adds	r4, #1
   1bb04:	2c08      	cmp	r4, #8
   1bb06:	f108 0806 	add.w	r8, r8, #6
   1bb0a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bb0e:	d1db      	bne.n	1bac8 <ull_filter_rpa_update+0x84>
	if (all) {
   1bb10:	f1ba 0f00 	cmp.w	sl, #0
   1bb14:	d004      	beq.n	1bb20 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1bb16:	4b3a      	ldr	r3, [pc, #232]	; (1bc00 <ull_filter_rpa_update+0x1bc>)
   1bb18:	9a01      	ldr	r2, [sp, #4]
   1bb1a:	f8c3 9000 	str.w	r9, [r3]
   1bb1e:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1bb20:	f1bb 0f00 	cmp.w	fp, #0
   1bb24:	d137      	bne.n	1bb96 <ull_filter_rpa_update+0x152>
}
   1bb26:	b007      	add	sp, #28
   1bb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1bb2c:	a902      	add	r1, sp, #8
   1bb2e:	f1a6 0017 	sub.w	r0, r6, #23
   1bb32:	f00b f912 	bl	26d5a <bt_rpa_create>
				LL_ASSERT(!err);
   1bb36:	2800      	cmp	r0, #0
   1bb38:	d153      	bne.n	1bbe2 <ull_filter_rpa_update+0x19e>
   1bb3a:	9802      	ldr	r0, [sp, #8]
   1bb3c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
				rl[i].local_rpa = &local_rpas[i];
   1bb40:	f8c6 8006 	str.w	r8, [r6, #6]
   1bb44:	f8c8 0000 	str.w	r0, [r8]
   1bb48:	f8a8 3004 	strh.w	r3, [r8, #4]
   1bb4c:	e7d2      	b.n	1baf4 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1bb4e:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1bb52:	4a2f      	ldr	r2, [pc, #188]	; (1bc10 <ull_filter_rpa_update+0x1cc>)
   1bb54:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1bb58:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1bb5a:	f10d 0307 	add.w	r3, sp, #7
   1bb5e:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1bb62:	f812 1901 	ldrb.w	r1, [r2], #-1
   1bb66:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1bb6a:	4283      	cmp	r3, r0
   1bb6c:	d1f9      	bne.n	1bb62 <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1bb6e:	4631      	mov	r1, r6
   1bb70:	a802      	add	r0, sp, #8
   1bb72:	f00b f8f2 	bl	26d5a <bt_rpa_create>
				LL_ASSERT(!err);
   1bb76:	2800      	cmp	r0, #0
   1bb78:	d0b7      	beq.n	1baea <ull_filter_rpa_update+0xa6>
   1bb7a:	4a26      	ldr	r2, [pc, #152]	; (1bc14 <ull_filter_rpa_update+0x1d0>)
   1bb7c:	4926      	ldr	r1, [pc, #152]	; (1bc18 <ull_filter_rpa_update+0x1d4>)
   1bb7e:	4827      	ldr	r0, [pc, #156]	; (1bc1c <ull_filter_rpa_update+0x1d8>)
   1bb80:	f240 23eb 	movw	r3, #747	; 0x2eb
   1bb84:	f009 f9bf 	bl	24f06 <printk>
   1bb88:	4040      	eors	r0, r0
   1bb8a:	f380 8811 	msr	BASEPRI, r0
   1bb8e:	f04f 0003 	mov.w	r0, #3
   1bb92:	df02      	svc	2
   1bb94:	e7a9      	b.n	1baea <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1bb96:	2000      	movs	r0, #0
   1bb98:	f7f9 fb18 	bl	151cc <ull_adv_is_enabled_get>
		if (adv) {
   1bb9c:	4604      	mov	r4, r0
   1bb9e:	2800      	cmp	r0, #0
   1bba0:	d0c1      	beq.n	1bb26 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1bba2:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   1bba6:	075b      	lsls	r3, r3, #29
   1bba8:	d5bd      	bpl.n	1bb26 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1bbaa:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   1bbae:	2b07      	cmp	r3, #7
   1bbb0:	d8b9      	bhi.n	1bb26 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bbb2:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1bbb6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1bbba:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1bbbc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1bbbe:	3028      	adds	r0, #40	; 0x28
   1bbc0:	f001 fac4 	bl	1d14c <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1bbc4:	7872      	ldrb	r2, [r6, #1]
   1bbc6:	4605      	mov	r5, r0
   1bbc8:	3202      	adds	r2, #2
   1bbca:	4631      	mov	r1, r6
   1bbcc:	f00e ff45 	bl	2aa5a <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1bbd0:	4629      	mov	r1, r5
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f7f9 fb24 	bl	15220 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1bbd8:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1bbdc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1bbe0:	e7a1      	b.n	1bb26 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1bbe2:	4a0c      	ldr	r2, [pc, #48]	; (1bc14 <ull_filter_rpa_update+0x1d0>)
   1bbe4:	490c      	ldr	r1, [pc, #48]	; (1bc18 <ull_filter_rpa_update+0x1d4>)
   1bbe6:	480d      	ldr	r0, [pc, #52]	; (1bc1c <ull_filter_rpa_update+0x1d8>)
   1bbe8:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1bbec:	f009 f98b 	bl	24f06 <printk>
   1bbf0:	4040      	eors	r0, r0
   1bbf2:	f380 8811 	msr	BASEPRI, r0
   1bbf6:	f04f 0003 	mov.w	r0, #3
   1bbfa:	df02      	svc	2
   1bbfc:	e79d      	b.n	1bb3a <ull_filter_rpa_update+0xf6>
   1bbfe:	bf00      	nop
   1bc00:	20001c10 	.word	0x20001c10
   1bc04:	20002eb4 	.word	0x20002eb4
   1bc08:	20002d5e 	.word	0x20002d5e
   1bc0c:	20002c88 	.word	0x20002c88
   1bc10:	20002cc0 	.word	0x20002cc0
   1bc14:	0002ca34 	.word	0x0002ca34
   1bc18:	0002c354 	.word	0x0002c354
   1bc1c:	0002bfdc 	.word	0x0002bfdc

0001bc20 <rpa_timeout>:
{
   1bc20:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1bc22:	2001      	movs	r0, #1
   1bc24:	f7ff ff0e 	bl	1ba44 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bc28:	4a0a      	ldr	r2, [pc, #40]	; (1bc54 <rpa_timeout+0x34>)
   1bc2a:	6812      	ldr	r2, [r2, #0]
   1bc2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bc30:	f240 30e7 	movw	r0, #999	; 0x3e7
   1bc34:	2100      	movs	r1, #0
   1bc36:	fbe2 0103 	umlal	r0, r1, r2, r3
   1bc3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc3e:	2300      	movs	r3, #0
   1bc40:	f7e4 fe9c 	bl	97c <__aeabi_uldivmod>
}
   1bc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bc48:	4602      	mov	r2, r0
   1bc4a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1bc4c:	4802      	ldr	r0, [pc, #8]	; (1bc58 <rpa_timeout+0x38>)
   1bc4e:	f006 bddf 	b.w	22810 <k_work_schedule>
   1bc52:	bf00      	nop
   1bc54:	20002eb4 	.word	0x20002eb4
   1bc58:	20001c18 	.word	0x20001c18

0001bc5c <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1bc5c:	2807      	cmp	r0, #7
   1bc5e:	d813      	bhi.n	1bc88 <ull_filter_adva_get+0x2c>
{
   1bc60:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1bc62:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1bc66:	4d10      	ldr	r5, [pc, #64]	; (1bca8 <ull_filter_adva_get+0x4c>)
   1bc68:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1bc6c:	071a      	lsls	r2, r3, #28
   1bc6e:	4604      	mov	r4, r0
   1bc70:	ea4f 0680 	mov.w	r6, r0, lsl #2
   1bc74:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1bc78:	d505      	bpl.n	1bc86 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1bc7a:	079b      	lsls	r3, r3, #30
   1bc7c:	d506      	bpl.n	1bc8c <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   1bc7e:	4434      	add	r4, r6
   1bc80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1bc84:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1bc86:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1bc88:	2000      	movs	r0, #0
}
   1bc8a:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1bc8c:	4a07      	ldr	r2, [pc, #28]	; (1bcac <ull_filter_adva_get+0x50>)
   1bc8e:	4908      	ldr	r1, [pc, #32]	; (1bcb0 <ull_filter_adva_get+0x54>)
   1bc90:	4808      	ldr	r0, [pc, #32]	; (1bcb4 <ull_filter_adva_get+0x58>)
   1bc92:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1bc96:	f009 f936 	bl	24f06 <printk>
   1bc9a:	4040      	eors	r0, r0
   1bc9c:	f380 8811 	msr	BASEPRI, r0
   1bca0:	f04f 0003 	mov.w	r0, #3
   1bca4:	df02      	svc	2
   1bca6:	e7ea      	b.n	1bc7e <ull_filter_adva_get+0x22>
   1bca8:	20002d40 	.word	0x20002d40
   1bcac:	0002ca34 	.word	0x0002ca34
   1bcb0:	0002ca98 	.word	0x0002ca98
   1bcb4:	0002bfdc 	.word	0x0002bfdc

0001bcb8 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   1bcb8:	2807      	cmp	r0, #7
   1bcba:	d80b      	bhi.n	1bcd4 <ull_filter_tgta_get+0x1c>
   1bcbc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1bcc0:	4a05      	ldr	r2, [pc, #20]	; (1bcd8 <ull_filter_tgta_get+0x20>)
   1bcc2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1bcc6:	074b      	lsls	r3, r1, #29
   1bcc8:	d504      	bpl.n	1bcd4 <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   1bcca:	2328      	movs	r3, #40	; 0x28
   1bccc:	fb03 2000 	mla	r0, r3, r0, r2
   1bcd0:	301e      	adds	r0, #30
   1bcd2:	4770      	bx	lr
	return NULL;
   1bcd4:	2000      	movs	r0, #0
   1bcd6:	4770      	bx	lr
   1bcd8:	20002d40 	.word	0x20002d40

0001bcdc <ull_filter_rl_find>:
{
   1bcdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bce0:	468b      	mov	fp, r1
	if (free_idx) {
   1bce2:	4617      	mov	r7, r2
   1bce4:	b10a      	cbz	r2, 1bcea <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1bce6:	23ff      	movs	r3, #255	; 0xff
   1bce8:	7013      	strb	r3, [r2, #0]
   1bcea:	4d1b      	ldr	r5, [pc, #108]	; (1bd58 <ull_filter_rl_find+0x7c>)
{
   1bcec:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bcee:	f000 0a01 	and.w	sl, r0, #1
   1bcf2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1bcf6:	e006      	b.n	1bd06 <ull_filter_rl_find+0x2a>
   1bcf8:	4552      	cmp	r2, sl
   1bcfa:	d01f      	beq.n	1bd3c <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bcfc:	3401      	adds	r4, #1
   1bcfe:	2c08      	cmp	r4, #8
   1bd00:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1bd04:	d015      	beq.n	1bd32 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bd06:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1bd0a:	fa5f f884 	uxtb.w	r8, r4
   1bd0e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1bd12:	07d9      	lsls	r1, r3, #31
   1bd14:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1bd18:	d4ee      	bmi.n	1bcf8 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1bd1a:	2f00      	cmp	r7, #0
   1bd1c:	d0ee      	beq.n	1bcfc <ull_filter_rl_find+0x20>
   1bd1e:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd20:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1bd22:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1bd24:	bf08      	it	eq
   1bd26:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd2a:	2c08      	cmp	r4, #8
   1bd2c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1bd30:	d1e9      	bne.n	1bd06 <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1bd32:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1bd36:	4640      	mov	r0, r8
   1bd38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bd3c:	4628      	mov	r0, r5
   1bd3e:	2206      	movs	r2, #6
   1bd40:	4659      	mov	r1, fp
   1bd42:	f00e fe7a 	bl	2aa3a <memcmp>
   1bd46:	2800      	cmp	r0, #0
   1bd48:	d0f5      	beq.n	1bd36 <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1bd4a:	2f00      	cmp	r7, #0
   1bd4c:	d0d6      	beq.n	1bcfc <ull_filter_rl_find+0x20>
   1bd4e:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1bd52:	07db      	lsls	r3, r3, #31
   1bd54:	d4d2      	bmi.n	1bcfc <ull_filter_rl_find+0x20>
   1bd56:	e7e2      	b.n	1bd1e <ull_filter_rl_find+0x42>
   1bd58:	20002d41 	.word	0x20002d41

0001bd5c <ll_rl_add>:
{
   1bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd60:	4680      	mov	r8, r0
   1bd62:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1bd64:	2000      	movs	r0, #0
{
   1bd66:	460e      	mov	r6, r1
   1bd68:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1bd6a:	f7f9 fa3d 	bl	151e8 <ull_adv_is_enabled>
		? 0 : 1;
   1bd6e:	b118      	cbz	r0, 1bd78 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bd70:	200c      	movs	r0, #12
}
   1bd72:	b005      	add	sp, #20
   1bd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   1bd78:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1bd7a:	f7f9 fc5b 	bl	15634 <ull_scan_is_enabled>
		? 0 : 1;
   1bd7e:	f030 0301 	bics.w	r3, r0, #1
   1bd82:	d1f5      	bne.n	1bd70 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1bd84:	46c2      	mov	sl, r8
   1bd86:	f10d 020f 	add.w	r2, sp, #15
   1bd8a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1bd8e:	4651      	mov	r1, sl
   1bd90:	f7ff ffa4 	bl	1bcdc <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1bd94:	2807      	cmp	r0, #7
   1bd96:	f240 80b8 	bls.w	1bf0a <ll_rl_add+0x1ae>
	} else if (j >= ARRAY_SIZE(rl)) {
   1bd9a:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1bd9e:	2f07      	cmp	r7, #7
   1bda0:	f200 80af 	bhi.w	1bf02 <ll_rl_add+0x1a6>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1bda4:	eb07 0287 	add.w	r2, r7, r7, lsl #2
   1bda8:	00d2      	lsls	r2, r2, #3
   1bdaa:	4d5a      	ldr	r5, [pc, #360]	; (1bf14 <ll_rl_add+0x1b8>)
   1bdac:	f8d8 1001 	ldr.w	r1, [r8, #1]
   1bdb0:	9201      	str	r2, [sp, #4]
   1bdb2:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1bdb4:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1bdb8:	50e9      	str	r1, [r5, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1bdba:	442b      	add	r3, r5
   1bdbc:	f8ba 1004 	ldrh.w	r1, [sl, #4]
   1bdc0:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1bdc2:	f898 3000 	ldrb.w	r3, [r8]
   1bdc6:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1bdca:	9200      	str	r2, [sp, #0]
   1bdcc:	f363 1186 	bfi	r1, r3, #6, #1
   1bdd0:	54a9      	strb	r1, [r5, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1bdd2:	4630      	mov	r0, r6
   1bdd4:	2110      	movs	r1, #16
   1bdd6:	f7f4 f98f 	bl	100f8 <mem_nz>
   1bdda:	9b00      	ldr	r3, [sp, #0]
   1bddc:	5ce9      	ldrb	r1, [r5, r3]
   1bdde:	f360 0182 	bfi	r1, r0, #2, #1
   1bde2:	54e9      	strb	r1, [r5, r3]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1bde4:	4648      	mov	r0, r9
   1bde6:	2110      	movs	r1, #16
   1bde8:	f7f4 f986 	bl	100f8 <mem_nz>
   1bdec:	9b00      	ldr	r3, [sp, #0]
	if (rl[i].pirk) {
   1bdee:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1bdf0:	5ce9      	ldrb	r1, [r5, r3]
   1bdf2:	f000 0001 	and.w	r0, r0, #1
   1bdf6:	f360 01c3 	bfi	r1, r0, #3, #1
	if (rl[i].pirk) {
   1bdfa:	f011 0f04 	tst.w	r1, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1bdfe:	54e9      	strb	r1, [r5, r3]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1be00:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
   1be04:	ea4f 0387 	mov.w	r3, r7, lsl #2
	if (rl[i].pirk) {
   1be08:	d01b      	beq.n	1be42 <ll_rl_add+0xe6>
		rl[i].pirk_idx = peer_irk_count;
   1be0a:	f8df c10c 	ldr.w	ip, [pc, #268]	; 1bf18 <ll_rl_add+0x1bc>
		peer_irk_rl_ids[peer_irk_count] = i;
   1be0e:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1bf1c <ll_rl_add+0x1c0>
		rl[i].pirk_idx = peer_irk_count;
   1be12:	f89c 1000 	ldrb.w	r1, [ip]
   1be16:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1be1a:	f80e 7001 	strb.w	r7, [lr, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1be1e:	f8df e100 	ldr.w	lr, [pc, #256]	; 1bf20 <ll_rl_add+0x1c4>
   1be22:	eb0e 1e01 	add.w	lr, lr, r1, lsl #4
   1be26:	3101      	adds	r1, #1
   1be28:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
   1be2c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1be30:	f106 0c0f 	add.w	ip, r6, #15
	for (; length > 0; length--) {
   1be34:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1be36:	f81c 1901 	ldrb.w	r1, [ip], #-1
   1be3a:	f80e 1f01 	strb.w	r1, [lr, #1]!
	for (; length > 0; length--) {
   1be3e:	45b4      	cmp	ip, r6
   1be40:	d1f9      	bne.n	1be36 <ll_rl_add+0xda>
	if (rl[i].lirk) {
   1be42:	2800      	cmp	r0, #0
   1be44:	d145      	bne.n	1bed2 <ll_rl_add+0x176>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1be46:	3218      	adds	r2, #24
__ssp_bos_icheck3(memset, void *, int)
   1be48:	2100      	movs	r1, #0
   1be4a:	50a9      	str	r1, [r5, r2]
   1be4c:	442a      	add	r2, r5
   1be4e:	4e35      	ldr	r6, [pc, #212]	; (1bf24 <ll_rl_add+0x1c8>)
   1be50:	8091      	strh	r1, [r2, #4]
	rl[i].dev = 0U;
   1be52:	19da      	adds	r2, r3, r7
	rl[i].rpas_ready = 0U;
   1be54:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1be58:	f021 0112 	bic.w	r1, r1, #18
   1be5c:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1be60:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   1be64:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1be68:	f009 0901 	and.w	r9, r9, #1
   1be6c:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1be70:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1be74:	07d2      	lsls	r2, r2, #31
   1be76:	d501      	bpl.n	1be7c <ll_rl_add+0x120>
   1be78:	4549      	cmp	r1, r9
   1be7a:	d016      	beq.n	1beaa <ll_rl_add+0x14e>
	for (i = 0; i < FAL_SIZE; i++) {
   1be7c:	3401      	adds	r4, #1
   1be7e:	2c08      	cmp	r4, #8
   1be80:	f106 0608 	add.w	r6, r6, #8
   1be84:	d1f2      	bne.n	1be6c <ll_rl_add+0x110>
		rl[i].fal = 0U;
   1be86:	19da      	adds	r2, r3, r7
   1be88:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1be8c:	f36f 1145 	bfc	r1, #5, #1
   1be90:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1be94:	443b      	add	r3, r7
	return 0;
   1be96:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1be98:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1be9c:	f042 0201 	orr.w	r2, r2, #1
   1bea0:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1bea4:	b005      	add	sp, #20
   1bea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1beaa:	2206      	movs	r2, #6
   1beac:	4630      	mov	r0, r6
   1beae:	4651      	mov	r1, sl
   1beb0:	9300      	str	r3, [sp, #0]
   1beb2:	f00e fdc2 	bl	2aa3a <memcmp>
   1beb6:	9b00      	ldr	r3, [sp, #0]
   1beb8:	2800      	cmp	r0, #0
   1beba:	d1df      	bne.n	1be7c <ll_rl_add+0x120>
		rl[i].fal = 1U;
   1bebc:	19da      	adds	r2, r3, r7
		fal[j].rl_idx = i;
   1bebe:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1bec2:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   1bec6:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1bec8:	f041 0120 	orr.w	r1, r1, #32
   1becc:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1bed0:	e7e0      	b.n	1be94 <ll_rl_add+0x138>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1bed2:	1dd6      	adds	r6, r2, #7
   1bed4:	19a8      	adds	r0, r5, r6
		rl[i].local_rpa = NULL;
   1bed6:	19d9      	adds	r1, r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1bed8:	f8d9 b000 	ldr.w	fp, [r9]
   1bedc:	f8d9 e004 	ldr.w	lr, [r9, #4]
   1bee0:	f8d9 c008 	ldr.w	ip, [r9, #8]
   1bee4:	f8d9 900c 	ldr.w	r9, [r9, #12]
   1bee8:	f845 b006 	str.w	fp, [r5, r6]
   1beec:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1bef0:	f8c0 e004 	str.w	lr, [r0, #4]
   1bef4:	f8c0 c008 	str.w	ip, [r0, #8]
   1bef8:	f8c0 900c 	str.w	r9, [r0, #12]
   1befc:	2000      	movs	r0, #0
   1befe:	6248      	str	r0, [r1, #36]	; 0x24
   1bf00:	e7a1      	b.n	1be46 <ll_rl_add+0xea>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1bf02:	2007      	movs	r0, #7
}
   1bf04:	b005      	add	sp, #20
   1bf06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1bf0a:	2012      	movs	r0, #18
}
   1bf0c:	b005      	add	sp, #20
   1bf0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf12:	bf00      	nop
   1bf14:	20002d40 	.word	0x20002d40
   1bf18:	20003572 	.word	0x20003572
   1bf1c:	20002cb8 	.word	0x20002cb8
   1bf20:	20002cc0 	.word	0x20002cc0
   1bf24:	20002c16 	.word	0x20002c16

0001bf28 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1bf28:	2807      	cmp	r0, #7
   1bf2a:	d807      	bhi.n	1bf3c <ull_filter_lll_lrpa_used+0x14>
   1bf2c:	4b04      	ldr	r3, [pc, #16]	; (1bf40 <ull_filter_lll_lrpa_used+0x18>)
   1bf2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bf32:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1bf36:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1bf3a:	4770      	bx	lr
   1bf3c:	2000      	movs	r0, #0
}
   1bf3e:	4770      	bx	lr
   1bf40:	20002d40 	.word	0x20002d40

0001bf44 <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1bf44:	2807      	cmp	r0, #7
   1bf46:	d812      	bhi.n	1bf6e <ull_filter_lll_lrpa_get+0x2a>
   1bf48:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1bf4c:	4a09      	ldr	r2, [pc, #36]	; (1bf74 <ull_filter_lll_lrpa_get+0x30>)
   1bf4e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1bf52:	f013 0f08 	tst.w	r3, #8
   1bf56:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1bf5a:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1bf5e:	d007      	beq.n	1bf70 <ull_filter_lll_lrpa_get+0x2c>
   1bf60:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1bf64:	079b      	lsls	r3, r3, #30
   1bf66:	d503      	bpl.n	1bf70 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   1bf68:	440a      	add	r2, r1
   1bf6a:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1bf6c:	4770      	bx	lr
		return NULL;
   1bf6e:	2000      	movs	r0, #0
}
   1bf70:	4770      	bx	lr
   1bf72:	bf00      	nop
   1bf74:	20002d40 	.word	0x20002d40

0001bf78 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1bf78:	4b02      	ldr	r3, [pc, #8]	; (1bf84 <ull_filter_lll_irks_get+0xc>)
   1bf7a:	781b      	ldrb	r3, [r3, #0]
   1bf7c:	7003      	strb	r3, [r0, #0]
}
   1bf7e:	4802      	ldr	r0, [pc, #8]	; (1bf88 <ull_filter_lll_irks_get+0x10>)
   1bf80:	4770      	bx	lr
   1bf82:	bf00      	nop
   1bf84:	20003572 	.word	0x20003572
   1bf88:	20002cc0 	.word	0x20002cc0

0001bf8c <ull_filter_lll_rl_idx>:
{
   1bf8c:	b538      	push	{r3, r4, r5, lr}
   1bf8e:	460c      	mov	r4, r1
	if (filter) {
   1bf90:	b150      	cbz	r0, 1bfa8 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1bf92:	2907      	cmp	r1, #7
   1bf94:	d822      	bhi.n	1bfdc <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1bf96:	4d2a      	ldr	r5, [pc, #168]	; (1c040 <ull_filter_lll_rl_idx+0xb4>)
   1bf98:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1bf9c:	07da      	lsls	r2, r3, #31
   1bf9e:	d52f      	bpl.n	1c000 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   1bfa0:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1bfa4:	7860      	ldrb	r0, [r4, #1]
}
   1bfa6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1bfa8:	2907      	cmp	r1, #7
   1bfaa:	d83a      	bhi.n	1c022 <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1bfac:	4b25      	ldr	r3, [pc, #148]	; (1c044 <ull_filter_lll_rl_idx+0xb8>)
   1bfae:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1bfb2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1bfb6:	07db      	lsls	r3, r3, #31
   1bfb8:	d501      	bpl.n	1bfbe <ull_filter_lll_rl_idx+0x32>
   1bfba:	4620      	mov	r0, r4
}
   1bfbc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1bfbe:	4a22      	ldr	r2, [pc, #136]	; (1c048 <ull_filter_lll_rl_idx+0xbc>)
   1bfc0:	4922      	ldr	r1, [pc, #136]	; (1c04c <ull_filter_lll_rl_idx+0xc0>)
   1bfc2:	4823      	ldr	r0, [pc, #140]	; (1c050 <ull_filter_lll_rl_idx+0xc4>)
   1bfc4:	f240 3363 	movw	r3, #867	; 0x363
   1bfc8:	f008 ff9d 	bl	24f06 <printk>
   1bfcc:	4040      	eors	r0, r0
   1bfce:	f380 8811 	msr	BASEPRI, r0
   1bfd2:	f04f 0003 	mov.w	r0, #3
   1bfd6:	df02      	svc	2
   1bfd8:	4620      	mov	r0, r4
}
   1bfda:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1bfdc:	4a1a      	ldr	r2, [pc, #104]	; (1c048 <ull_filter_lll_rl_idx+0xbc>)
   1bfde:	491d      	ldr	r1, [pc, #116]	; (1c054 <ull_filter_lll_rl_idx+0xc8>)
   1bfe0:	481b      	ldr	r0, [pc, #108]	; (1c050 <ull_filter_lll_rl_idx+0xc4>)
   1bfe2:	f240 335d 	movw	r3, #861	; 0x35d
   1bfe6:	f008 ff8e 	bl	24f06 <printk>
   1bfea:	4040      	eors	r0, r0
   1bfec:	f380 8811 	msr	BASEPRI, r0
   1bff0:	f04f 0003 	mov.w	r0, #3
   1bff4:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1bff6:	4d12      	ldr	r5, [pc, #72]	; (1c040 <ull_filter_lll_rl_idx+0xb4>)
   1bff8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1bffc:	07da      	lsls	r2, r3, #31
   1bffe:	d4cf      	bmi.n	1bfa0 <ull_filter_lll_rl_idx+0x14>
   1c000:	4a11      	ldr	r2, [pc, #68]	; (1c048 <ull_filter_lll_rl_idx+0xbc>)
   1c002:	4915      	ldr	r1, [pc, #84]	; (1c058 <ull_filter_lll_rl_idx+0xcc>)
   1c004:	4812      	ldr	r0, [pc, #72]	; (1c050 <ull_filter_lll_rl_idx+0xc4>)
   1c006:	f240 335e 	movw	r3, #862	; 0x35e
   1c00a:	f008 ff7c 	bl	24f06 <printk>
   1c00e:	4040      	eors	r0, r0
   1c010:	f380 8811 	msr	BASEPRI, r0
   1c014:	f04f 0003 	mov.w	r0, #3
   1c018:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1c01a:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1c01e:	7860      	ldrb	r0, [r4, #1]
   1c020:	e7c1      	b.n	1bfa6 <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1c022:	4a09      	ldr	r2, [pc, #36]	; (1c048 <ull_filter_lll_rl_idx+0xbc>)
   1c024:	490d      	ldr	r1, [pc, #52]	; (1c05c <ull_filter_lll_rl_idx+0xd0>)
   1c026:	480a      	ldr	r0, [pc, #40]	; (1c050 <ull_filter_lll_rl_idx+0xc4>)
   1c028:	f240 3361 	movw	r3, #865	; 0x361
   1c02c:	f008 ff6b 	bl	24f06 <printk>
   1c030:	4040      	eors	r0, r0
   1c032:	f380 8811 	msr	BASEPRI, r0
   1c036:	f04f 0003 	mov.w	r0, #3
   1c03a:	df02      	svc	2
   1c03c:	e7b6      	b.n	1bfac <ull_filter_lll_rl_idx+0x20>
   1c03e:	bf00      	nop
   1c040:	20002c14 	.word	0x20002c14
   1c044:	20002d40 	.word	0x20002d40
   1c048:	0002ca34 	.word	0x0002ca34
   1c04c:	0002cc14 	.word	0x0002cc14
   1c050:	0002bfdc 	.word	0x0002bfdc
   1c054:	0002cab0 	.word	0x0002cab0
   1c058:	0002cb58 	.word	0x0002cb58
   1c05c:	0002cb70 	.word	0x0002cb70

0001c060 <ull_filter_lll_rl_irk_idx>:
{
   1c060:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c062:	4b20      	ldr	r3, [pc, #128]	; (1c0e4 <ull_filter_lll_rl_irk_idx+0x84>)
   1c064:	781b      	ldrb	r3, [r3, #0]
   1c066:	4283      	cmp	r3, r0
{
   1c068:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c06a:	d90c      	bls.n	1c086 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1c06c:	4b1e      	ldr	r3, [pc, #120]	; (1c0e8 <ull_filter_lll_rl_irk_idx+0x88>)
   1c06e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c070:	2c07      	cmp	r4, #7
   1c072:	d819      	bhi.n	1c0a8 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1c074:	4b1d      	ldr	r3, [pc, #116]	; (1c0ec <ull_filter_lll_rl_irk_idx+0x8c>)
   1c076:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c07a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1c07e:	07db      	lsls	r3, r3, #31
   1c080:	d520      	bpl.n	1c0c4 <ull_filter_lll_rl_irk_idx+0x64>
}
   1c082:	4620      	mov	r0, r4
   1c084:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1c086:	4a1a      	ldr	r2, [pc, #104]	; (1c0f0 <ull_filter_lll_rl_irk_idx+0x90>)
   1c088:	491a      	ldr	r1, [pc, #104]	; (1c0f4 <ull_filter_lll_rl_irk_idx+0x94>)
   1c08a:	481b      	ldr	r0, [pc, #108]	; (1c0f8 <ull_filter_lll_rl_irk_idx+0x98>)
   1c08c:	f240 336d 	movw	r3, #877	; 0x36d
   1c090:	f008 ff39 	bl	24f06 <printk>
   1c094:	4040      	eors	r0, r0
   1c096:	f380 8811 	msr	BASEPRI, r0
   1c09a:	f04f 0003 	mov.w	r0, #3
   1c09e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1c0a0:	4b11      	ldr	r3, [pc, #68]	; (1c0e8 <ull_filter_lll_rl_irk_idx+0x88>)
   1c0a2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1c0a4:	2c07      	cmp	r4, #7
   1c0a6:	d9e5      	bls.n	1c074 <ull_filter_lll_rl_irk_idx+0x14>
   1c0a8:	4a11      	ldr	r2, [pc, #68]	; (1c0f0 <ull_filter_lll_rl_irk_idx+0x90>)
   1c0aa:	4914      	ldr	r1, [pc, #80]	; (1c0fc <ull_filter_lll_rl_irk_idx+0x9c>)
   1c0ac:	4812      	ldr	r0, [pc, #72]	; (1c0f8 <ull_filter_lll_rl_irk_idx+0x98>)
   1c0ae:	f240 336f 	movw	r3, #879	; 0x36f
   1c0b2:	f008 ff28 	bl	24f06 <printk>
   1c0b6:	4040      	eors	r0, r0
   1c0b8:	f380 8811 	msr	BASEPRI, r0
   1c0bc:	f04f 0003 	mov.w	r0, #3
   1c0c0:	df02      	svc	2
   1c0c2:	e7d7      	b.n	1c074 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1c0c4:	4a0a      	ldr	r2, [pc, #40]	; (1c0f0 <ull_filter_lll_rl_irk_idx+0x90>)
   1c0c6:	490e      	ldr	r1, [pc, #56]	; (1c100 <ull_filter_lll_rl_irk_idx+0xa0>)
   1c0c8:	480b      	ldr	r0, [pc, #44]	; (1c0f8 <ull_filter_lll_rl_irk_idx+0x98>)
   1c0ca:	f44f 735c 	mov.w	r3, #880	; 0x370
   1c0ce:	f008 ff1a 	bl	24f06 <printk>
   1c0d2:	4040      	eors	r0, r0
   1c0d4:	f380 8811 	msr	BASEPRI, r0
   1c0d8:	f04f 0003 	mov.w	r0, #3
   1c0dc:	df02      	svc	2
}
   1c0de:	4620      	mov	r0, r4
   1c0e0:	bd10      	pop	{r4, pc}
   1c0e2:	bf00      	nop
   1c0e4:	20003572 	.word	0x20003572
   1c0e8:	20002cb8 	.word	0x20002cb8
   1c0ec:	20002d40 	.word	0x20002d40
   1c0f0:	0002ca34 	.word	0x0002ca34
   1c0f4:	0002cc20 	.word	0x0002cc20
   1c0f8:	0002bfdc 	.word	0x0002bfdc
   1c0fc:	0002cc40 	.word	0x0002cc40
   1c100:	0002cc14 	.word	0x0002cc14

0001c104 <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1c104:	2807      	cmp	r0, #7
   1c106:	d823      	bhi.n	1c150 <ull_filter_lll_irk_in_fal+0x4c>
{
   1c108:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1c10a:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c10e:	4e11      	ldr	r6, [pc, #68]	; (1c154 <ull_filter_lll_irk_in_fal+0x50>)
   1c110:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c114:	07db      	lsls	r3, r3, #31
   1c116:	4604      	mov	r4, r0
   1c118:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1c11c:	d505      	bpl.n	1c12a <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1c11e:	442c      	add	r4, r5
   1c120:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c124:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c128:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c12a:	4a0b      	ldr	r2, [pc, #44]	; (1c158 <ull_filter_lll_irk_in_fal+0x54>)
   1c12c:	490b      	ldr	r1, [pc, #44]	; (1c15c <ull_filter_lll_irk_in_fal+0x58>)
   1c12e:	480c      	ldr	r0, [pc, #48]	; (1c160 <ull_filter_lll_irk_in_fal+0x5c>)
   1c130:	f240 337b 	movw	r3, #891	; 0x37b
   1c134:	f008 fee7 	bl	24f06 <printk>
   1c138:	4040      	eors	r0, r0
   1c13a:	f380 8811 	msr	BASEPRI, r0
   1c13e:	f04f 0003 	mov.w	r0, #3
   1c142:	df02      	svc	2
	return rl[rl_idx].fal;
   1c144:	442c      	add	r4, r5
   1c146:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c14a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1c14e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1c150:	2000      	movs	r0, #0
}
   1c152:	4770      	bx	lr
   1c154:	20002d40 	.word	0x20002d40
   1c158:	0002ca34 	.word	0x0002ca34
   1c15c:	0002ca84 	.word	0x0002ca84
   1c160:	0002bfdc 	.word	0x0002bfdc

0001c164 <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c164:	4b14      	ldr	r3, [pc, #80]	; (1c1b8 <ull_filter_lll_rl_idx_allowed+0x54>)
   1c166:	781b      	ldrb	r3, [r3, #0]
   1c168:	b19b      	cbz	r3, 1c192 <ull_filter_lll_rl_idx_allowed+0x2e>
   1c16a:	2907      	cmp	r1, #7
{
   1c16c:	b570      	push	{r4, r5, r6, lr}
   1c16e:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1c170:	d80d      	bhi.n	1c18e <ull_filter_lll_rl_idx_allowed+0x2a>
   1c172:	b960      	cbnz	r0, 1c18e <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1c174:	4e11      	ldr	r6, [pc, #68]	; (1c1bc <ull_filter_lll_rl_idx_allowed+0x58>)
   1c176:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1c17a:	008d      	lsls	r5, r1, #2
   1c17c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c180:	07da      	lsls	r2, r3, #31
   1c182:	d50b      	bpl.n	1c19c <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c184:	442c      	add	r4, r5
   1c186:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1c18a:	0743      	lsls	r3, r0, #29
   1c18c:	d403      	bmi.n	1c196 <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1c18e:	2001      	movs	r0, #1
}
   1c190:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1c192:	2001      	movs	r0, #1
}
   1c194:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1c196:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1c19a:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1c19c:	4a08      	ldr	r2, [pc, #32]	; (1c1c0 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1c19e:	4909      	ldr	r1, [pc, #36]	; (1c1c4 <ull_filter_lll_rl_idx_allowed+0x60>)
   1c1a0:	4809      	ldr	r0, [pc, #36]	; (1c1c8 <ull_filter_lll_rl_idx_allowed+0x64>)
   1c1a2:	f44f 7365 	mov.w	r3, #916	; 0x394
   1c1a6:	f008 feae 	bl	24f06 <printk>
   1c1aa:	4040      	eors	r0, r0
   1c1ac:	f380 8811 	msr	BASEPRI, r0
   1c1b0:	f04f 0003 	mov.w	r0, #3
   1c1b4:	df02      	svc	2
   1c1b6:	e7e5      	b.n	1c184 <ull_filter_lll_rl_idx_allowed+0x20>
   1c1b8:	20003573 	.word	0x20003573
   1c1bc:	20002d40 	.word	0x20002d40
   1c1c0:	0002ca34 	.word	0x0002ca34
   1c1c4:	0002ca84 	.word	0x0002ca84
   1c1c8:	0002bfdc 	.word	0x0002bfdc

0001c1cc <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1c1cc:	7813      	ldrb	r3, [r2, #0]
   1c1ce:	2bff      	cmp	r3, #255	; 0xff
   1c1d0:	d11b      	bne.n	1c20a <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1c1d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1d6:	4d19      	ldr	r5, [pc, #100]	; (1c23c <ull_filter_lll_rl_addr_allowed+0x70>)
   1c1d8:	4604      	mov	r4, r0
   1c1da:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1c1dc:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1c1de:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1c1e2:	b2df      	uxtb	r7, r3
   1c1e4:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1c1e8:	f01c 0001 	ands.w	r0, ip, #1
   1c1ec:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1c1f0:	d003      	beq.n	1c1fa <ull_filter_lll_rl_addr_allowed+0x2e>
   1c1f2:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1c1f6:	45a4      	cmp	ip, r4
   1c1f8:	d009      	beq.n	1c20e <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c1fa:	3301      	adds	r3, #1
   1c1fc:	2b08      	cmp	r3, #8
   1c1fe:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1c202:	d1ec      	bne.n	1c1de <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1c204:	2001      	movs	r0, #1
}
   1c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1c20a:	2001      	movs	r0, #1
}
   1c20c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c20e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1c212:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c214:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1c218:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1c21c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1c220:	45ca      	cmp	sl, r9
   1c222:	d1ea      	bne.n	1c1fa <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1c224:	45dc      	cmp	ip, fp
   1c226:	d1f7      	bne.n	1c218 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1c228:	4433      	add	r3, r6
				*rl_idx = i;
   1c22a:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1c22c:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1c230:	075a      	lsls	r2, r3, #29
   1c232:	d5e8      	bpl.n	1c206 <ull_filter_lll_rl_addr_allowed+0x3a>
   1c234:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1c238:	e7e5      	b.n	1c206 <ull_filter_lll_rl_addr_allowed+0x3a>
   1c23a:	bf00      	nop
   1c23c:	20002d40 	.word	0x20002d40

0001c240 <ull_filter_lll_rl_addr_resolve>:
{
   1c240:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1c242:	4b0e      	ldr	r3, [pc, #56]	; (1c27c <ull_filter_lll_rl_addr_resolve+0x3c>)
   1c244:	781c      	ldrb	r4, [r3, #0]
   1c246:	b17c      	cbz	r4, 1c268 <ull_filter_lll_rl_addr_resolve+0x28>
   1c248:	2a07      	cmp	r2, #7
   1c24a:	d80d      	bhi.n	1c268 <ull_filter_lll_rl_addr_resolve+0x28>
   1c24c:	4c0c      	ldr	r4, [pc, #48]	; (1c280 <ull_filter_lll_rl_addr_resolve+0x40>)
   1c24e:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1c252:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1c256:	f01c 0f08 	tst.w	ip, #8
   1c25a:	d005      	beq.n	1c268 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1c25c:	b120      	cbz	r0, 1c268 <ull_filter_lll_rl_addr_resolve+0x28>
   1c25e:	794b      	ldrb	r3, [r1, #5]
   1c260:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c264:	2b40      	cmp	r3, #64	; 0x40
   1c266:	d002      	beq.n	1c26e <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1c268:	2000      	movs	r0, #0
   1c26a:	bc10      	pop	{r4}
   1c26c:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c26e:	2028      	movs	r0, #40	; 0x28
   1c270:	fb00 4002 	mla	r0, r0, r2, r4
   1c274:	3007      	adds	r0, #7
}
   1c276:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1c278:	f00a bd5c 	b.w	26d34 <bt_rpa_irk_matches>
   1c27c:	20003573 	.word	0x20003573
   1c280:	20002d40 	.word	0x20002d40

0001c284 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1c284:	4b02      	ldr	r3, [pc, #8]	; (1c290 <ull_filter_lll_rl_enabled+0xc>)
   1c286:	7818      	ldrb	r0, [r3, #0]
}
   1c288:	3800      	subs	r0, #0
   1c28a:	bf18      	it	ne
   1c28c:	2001      	movne	r0, #1
   1c28e:	4770      	bx	lr
   1c290:	20003573 	.word	0x20003573

0001c294 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c294:	4668      	mov	r0, sp
   1c296:	f020 0107 	bic.w	r1, r0, #7
   1c29a:	468d      	mov	sp, r1
   1c29c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1c29e:	f002 fdd1 	bl	1ee44 <isr_radio>

	ISR_DIRECT_PM();
   1c2a2:	f7ea fc3d 	bl	6b20 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1c2a6:	f7ea fd0d 	bl	6cc4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1c2aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1c2ae:	4685      	mov	sp, r0
   1c2b0:	4770      	bx	lr
   1c2b2:	bf00      	nop

0001c2b4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1c2b4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1c2b6:	4b09      	ldr	r3, [pc, #36]	; (1c2dc <rtc0_nrf5_isr+0x28>)
   1c2b8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1c2bc:	b93a      	cbnz	r2, 1c2ce <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1c2be:	2001      	movs	r0, #1
   1c2c0:	f7f4 f800 	bl	102c4 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1c2c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1c2c8:	2002      	movs	r0, #2
   1c2ca:	f7f3 bffb 	b.w	102c4 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1c2ce:	2000      	movs	r0, #0
   1c2d0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1c2d4:	f7f5 f8fc 	bl	114d0 <ticker_trigger>
   1c2d8:	e7f1      	b.n	1c2be <rtc0_nrf5_isr+0xa>
   1c2da:	bf00      	nop
   1c2dc:	4000b000 	.word	0x4000b000

0001c2e0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1c2e0:	2000      	movs	r0, #0
   1c2e2:	f7f3 bfef 	b.w	102c4 <mayfly_run>
   1c2e6:	bf00      	nop

0001c2e8 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1c2e8:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1c2ea:	4b0e      	ldr	r3, [pc, #56]	; (1c324 <ticker_stop_op_cb+0x3c>)
   1c2ec:	4c0e      	ldr	r4, [pc, #56]	; (1c328 <ticker_stop_op_cb+0x40>)
   1c2ee:	781a      	ldrb	r2, [r3, #0]
   1c2f0:	7823      	ldrb	r3, [r4, #0]
   1c2f2:	429a      	cmp	r2, r3
   1c2f4:	d006      	beq.n	1c304 <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1c2f6:	490d      	ldr	r1, [pc, #52]	; (1c32c <ticker_stop_op_cb+0x44>)
   1c2f8:	4a0d      	ldr	r2, [pc, #52]	; (1c330 <ticker_stop_op_cb+0x48>)
   1c2fa:	7809      	ldrb	r1, [r1, #0]
   1c2fc:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1c2fe:	3301      	adds	r3, #1
   1c300:	7023      	strb	r3, [r4, #0]
}
   1c302:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1c304:	4a0b      	ldr	r2, [pc, #44]	; (1c334 <ticker_stop_op_cb+0x4c>)
   1c306:	490c      	ldr	r1, [pc, #48]	; (1c338 <ticker_stop_op_cb+0x50>)
   1c308:	480c      	ldr	r0, [pc, #48]	; (1c33c <ticker_stop_op_cb+0x54>)
   1c30a:	f240 3301 	movw	r3, #769	; 0x301
   1c30e:	f008 fdfa 	bl	24f06 <printk>
   1c312:	4040      	eors	r0, r0
   1c314:	f380 8811 	msr	BASEPRI, r0
   1c318:	f04f 0003 	mov.w	r0, #3
   1c31c:	df02      	svc	2
	preempt_stop_ack++;
   1c31e:	7823      	ldrb	r3, [r4, #0]
   1c320:	e7e9      	b.n	1c2f6 <ticker_stop_op_cb+0xe>
   1c322:	bf00      	nop
   1c324:	20003579 	.word	0x20003579
   1c328:	20003578 	.word	0x20003578
   1c32c:	20003574 	.word	0x20003574
   1c330:	20003575 	.word	0x20003575
   1c334:	0002cc5c 	.word	0x0002cc5c
   1c338:	0002cca4 	.word	0x0002cca4
   1c33c:	0002bfdc 	.word	0x0002bfdc

0001c340 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1c340:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c342:	b9f8      	cbnz	r0, 1c384 <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1c344:	4b1e      	ldr	r3, [pc, #120]	; (1c3c0 <ticker_start_op_cb+0x80>)
   1c346:	4d1f      	ldr	r5, [pc, #124]	; (1c3c4 <ticker_start_op_cb+0x84>)
   1c348:	781a      	ldrb	r2, [r3, #0]
   1c34a:	782b      	ldrb	r3, [r5, #0]
   1c34c:	429a      	cmp	r2, r3
   1c34e:	d027      	beq.n	1c3a0 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1c350:	4a1d      	ldr	r2, [pc, #116]	; (1c3c8 <ticker_start_op_cb+0x88>)
   1c352:	4c1e      	ldr	r4, [pc, #120]	; (1c3cc <ticker_start_op_cb+0x8c>)
   1c354:	7812      	ldrb	r2, [r2, #0]
   1c356:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1c358:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1c35a:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1c35c:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1c35e:	b2d3      	uxtb	r3, r2
   1c360:	d00d      	beq.n	1c37e <ticker_start_op_cb+0x3e>
   1c362:	4a1b      	ldr	r2, [pc, #108]	; (1c3d0 <ticker_start_op_cb+0x90>)
   1c364:	491b      	ldr	r1, [pc, #108]	; (1c3d4 <ticker_start_op_cb+0x94>)
   1c366:	481c      	ldr	r0, [pc, #112]	; (1c3d8 <ticker_start_op_cb+0x98>)
   1c368:	f240 330f 	movw	r3, #783	; 0x30f
   1c36c:	f008 fdcb 	bl	24f06 <printk>
   1c370:	4040      	eors	r0, r0
   1c372:	f380 8811 	msr	BASEPRI, r0
   1c376:	f04f 0003 	mov.w	r0, #3
   1c37a:	df02      	svc	2
	preempt_req++;
   1c37c:	7823      	ldrb	r3, [r4, #0]
   1c37e:	3301      	adds	r3, #1
   1c380:	7023      	strb	r3, [r4, #0]
}
   1c382:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1c384:	4a12      	ldr	r2, [pc, #72]	; (1c3d0 <ticker_start_op_cb+0x90>)
   1c386:	4915      	ldr	r1, [pc, #84]	; (1c3dc <ticker_start_op_cb+0x9c>)
   1c388:	4813      	ldr	r0, [pc, #76]	; (1c3d8 <ticker_start_op_cb+0x98>)
   1c38a:	f240 330a 	movw	r3, #778	; 0x30a
   1c38e:	f008 fdba 	bl	24f06 <printk>
   1c392:	4040      	eors	r0, r0
   1c394:	f380 8811 	msr	BASEPRI, r0
   1c398:	f04f 0003 	mov.w	r0, #3
   1c39c:	df02      	svc	2
   1c39e:	e7d1      	b.n	1c344 <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1c3a0:	4a0b      	ldr	r2, [pc, #44]	; (1c3d0 <ticker_start_op_cb+0x90>)
   1c3a2:	490f      	ldr	r1, [pc, #60]	; (1c3e0 <ticker_start_op_cb+0xa0>)
   1c3a4:	480c      	ldr	r0, [pc, #48]	; (1c3d8 <ticker_start_op_cb+0x98>)
   1c3a6:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1c3aa:	f008 fdac 	bl	24f06 <printk>
   1c3ae:	4040      	eors	r0, r0
   1c3b0:	f380 8811 	msr	BASEPRI, r0
   1c3b4:	f04f 0003 	mov.w	r0, #3
   1c3b8:	df02      	svc	2
	preempt_start_ack++;
   1c3ba:	782b      	ldrb	r3, [r5, #0]
   1c3bc:	e7c8      	b.n	1c350 <ticker_start_op_cb+0x10>
   1c3be:	bf00      	nop
   1c3c0:	20003577 	.word	0x20003577
   1c3c4:	20003576 	.word	0x20003576
   1c3c8:	20003574 	.word	0x20003574
   1c3cc:	20003575 	.word	0x20003575
   1c3d0:	0002cc5c 	.word	0x0002cc5c
   1c3d4:	0002ccf4 	.word	0x0002ccf4
   1c3d8:	0002bfdc 	.word	0x0002bfdc
   1c3dc:	0002c72c 	.word	0x0002c72c
   1c3e0:	0002cccc 	.word	0x0002cccc

0001c3e4 <isr_race>:
	radio_status_reset();
   1c3e4:	f002 be4e 	b.w	1f084 <radio_status_reset>

0001c3e8 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1c3e8:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1c3ea:	4a18      	ldr	r2, [pc, #96]	; (1c44c <preempt_ticker_cb+0x64>)
   1c3ec:	4c18      	ldr	r4, [pc, #96]	; (1c450 <preempt_ticker_cb+0x68>)
   1c3ee:	7812      	ldrb	r2, [r2, #0]
   1c3f0:	7823      	ldrb	r3, [r4, #0]
   1c3f2:	429a      	cmp	r2, r3
   1c3f4:	d01b      	beq.n	1c42e <preempt_ticker_cb+0x46>
	preempt_ack++;
   1c3f6:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1c3f8:	4b16      	ldr	r3, [pc, #88]	; (1c454 <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1c3fa:	3101      	adds	r1, #1
   1c3fc:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c3fe:	2200      	movs	r2, #0
	preempt_ack++;
   1c400:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1c402:	9903      	ldr	r1, [sp, #12]
   1c404:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1c406:	2001      	movs	r0, #1
   1c408:	4611      	mov	r1, r2
   1c40a:	f7f3 ff03 	bl	10214 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1c40e:	b900      	cbnz	r0, 1c412 <preempt_ticker_cb+0x2a>
}
   1c410:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1c412:	4a11      	ldr	r2, [pc, #68]	; (1c458 <preempt_ticker_cb+0x70>)
   1c414:	4911      	ldr	r1, [pc, #68]	; (1c45c <preempt_ticker_cb+0x74>)
   1c416:	4812      	ldr	r0, [pc, #72]	; (1c460 <preempt_ticker_cb+0x78>)
   1c418:	f240 3376 	movw	r3, #886	; 0x376
   1c41c:	f008 fd73 	bl	24f06 <printk>
   1c420:	4040      	eors	r0, r0
   1c422:	f380 8811 	msr	BASEPRI, r0
   1c426:	f04f 0003 	mov.w	r0, #3
   1c42a:	df02      	svc	2
}
   1c42c:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1c42e:	4a0a      	ldr	r2, [pc, #40]	; (1c458 <preempt_ticker_cb+0x70>)
   1c430:	490c      	ldr	r1, [pc, #48]	; (1c464 <preempt_ticker_cb+0x7c>)
   1c432:	480b      	ldr	r0, [pc, #44]	; (1c460 <preempt_ticker_cb+0x78>)
   1c434:	f44f 735c 	mov.w	r3, #880	; 0x370
   1c438:	f008 fd65 	bl	24f06 <printk>
   1c43c:	4040      	eors	r0, r0
   1c43e:	f380 8811 	msr	BASEPRI, r0
   1c442:	f04f 0003 	mov.w	r0, #3
   1c446:	df02      	svc	2
   1c448:	e7d5      	b.n	1c3f6 <preempt_ticker_cb+0xe>
   1c44a:	bf00      	nop
   1c44c:	20003575 	.word	0x20003575
   1c450:	20003574 	.word	0x20003574
   1c454:	20000650 	.word	0x20000650
   1c458:	0002cc5c 	.word	0x0002cc5c
   1c45c:	0002c454 	.word	0x0002c454
   1c460:	0002bfdc 	.word	0x0002bfdc
   1c464:	0002cd10 	.word	0x0002cd10

0001c468 <preempt_ticker_stop>:
{
   1c468:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c46a:	4917      	ldr	r1, [pc, #92]	; (1c4c8 <preempt_ticker_stop+0x60>)
   1c46c:	4a17      	ldr	r2, [pc, #92]	; (1c4cc <preempt_ticker_stop+0x64>)
   1c46e:	780b      	ldrb	r3, [r1, #0]
   1c470:	7812      	ldrb	r2, [r2, #0]
   1c472:	429a      	cmp	r2, r3
{
   1c474:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c476:	d122      	bne.n	1c4be <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1c478:	4b15      	ldr	r3, [pc, #84]	; (1c4d0 <preempt_ticker_stop+0x68>)
   1c47a:	4a16      	ldr	r2, [pc, #88]	; (1c4d4 <preempt_ticker_stop+0x6c>)
   1c47c:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1c47e:	7812      	ldrb	r2, [r2, #0]
   1c480:	429a      	cmp	r2, r3
   1c482:	d01c      	beq.n	1c4be <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1c484:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c486:	4b14      	ldr	r3, [pc, #80]	; (1c4d8 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1c488:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c48a:	2200      	movs	r2, #0
	preempt_stop_req++;
   1c48c:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c48e:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1c490:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c492:	4611      	mov	r1, r2
   1c494:	4610      	mov	r0, r2
   1c496:	f7f5 f913 	bl	116c0 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c49a:	4604      	mov	r4, r0
   1c49c:	b178      	cbz	r0, 1c4be <preempt_ticker_stop+0x56>
   1c49e:	2802      	cmp	r0, #2
   1c4a0:	d00e      	beq.n	1c4c0 <preempt_ticker_stop+0x58>
   1c4a2:	4a0e      	ldr	r2, [pc, #56]	; (1c4dc <preempt_ticker_stop+0x74>)
   1c4a4:	490e      	ldr	r1, [pc, #56]	; (1c4e0 <preempt_ticker_stop+0x78>)
   1c4a6:	480f      	ldr	r0, [pc, #60]	; (1c4e4 <preempt_ticker_stop+0x7c>)
   1c4a8:	f240 3362 	movw	r3, #866	; 0x362
   1c4ac:	f008 fd2b 	bl	24f06 <printk>
   1c4b0:	4040      	eors	r0, r0
   1c4b2:	f380 8811 	msr	BASEPRI, r0
   1c4b6:	f04f 0003 	mov.w	r0, #3
   1c4ba:	df02      	svc	2
   1c4bc:	e000      	b.n	1c4c0 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1c4be:	2400      	movs	r4, #0
}
   1c4c0:	4620      	mov	r0, r4
   1c4c2:	b002      	add	sp, #8
   1c4c4:	bd10      	pop	{r4, pc}
   1c4c6:	bf00      	nop
   1c4c8:	20003579 	.word	0x20003579
   1c4cc:	20003578 	.word	0x20003578
   1c4d0:	20003574 	.word	0x20003574
   1c4d4:	20003575 	.word	0x20003575
   1c4d8:	0001c2e9 	.word	0x0001c2e9
   1c4dc:	0002cc5c 	.word	0x0002cc5c
   1c4e0:	0002c548 	.word	0x0002c548
   1c4e4:	0002bfdc 	.word	0x0002bfdc

0001c4e8 <preempt_ticker_start>:
{
   1c4e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1c4ec:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1c4ee:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1c4f2:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c4f4:	4b2a      	ldr	r3, [pc, #168]	; (1c5a0 <preempt_ticker_start+0xb8>)
   1c4f6:	4f2b      	ldr	r7, [pc, #172]	; (1c5a4 <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1c4f8:	68d6      	ldr	r6, [r2, #12]
{
   1c4fa:	460d      	mov	r5, r1
   1c4fc:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1c4fe:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1c500:	6890      	ldr	r0, [r2, #8]
   1c502:	6853      	ldr	r3, [r2, #4]
   1c504:	4298      	cmp	r0, r3
   1c506:	bf2c      	ite	cs
   1c508:	ebc6 0600 	rsbcs	r6, r6, r0
   1c50c:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1c510:	783b      	ldrb	r3, [r7, #0]
   1c512:	4299      	cmp	r1, r3
{
   1c514:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1c516:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1c51a:	d033      	beq.n	1c584 <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1c51c:	2c00      	cmp	r4, #0
   1c51e:	d03a      	beq.n	1c596 <preempt_ticker_start+0xae>
   1c520:	7f23      	ldrb	r3, [r4, #28]
   1c522:	079b      	lsls	r3, r3, #30
   1c524:	d437      	bmi.n	1c596 <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1c526:	f8df a080 	ldr.w	sl, [pc, #128]	; 1c5a8 <preempt_ticker_start+0xc0>
   1c52a:	f8da 0000 	ldr.w	r0, [sl]
   1c52e:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1c532:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1c536:	d022      	beq.n	1c57e <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1c538:	f7ff ff96 	bl	1c468 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1c53c:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c53e:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1c540:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1c544:	f043 0302 	orr.w	r3, r3, #2
   1c548:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1c54a:	4620      	mov	r0, r4
   1c54c:	69a3      	ldr	r3, [r4, #24]
   1c54e:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c550:	4b16      	ldr	r3, [pc, #88]	; (1c5ac <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1c552:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c554:	9600      	str	r6, [sp, #0]
   1c556:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1c55a:	4b15      	ldr	r3, [pc, #84]	; (1c5b0 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1c55c:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c560:	2200      	movs	r2, #0
	preempt_start_req++;
   1c562:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c564:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1c568:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c56a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1c56e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1c572:	4643      	mov	r3, r8
   1c574:	4611      	mov	r1, r2
   1c576:	4610      	mov	r0, r2
	preempt_start_req++;
   1c578:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1c57a:	f7f5 f817 	bl	115ac <ticker_start>
}
   1c57e:	b00a      	add	sp, #40	; 0x28
   1c580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1c584:	4b0b      	ldr	r3, [pc, #44]	; (1c5b4 <preempt_ticker_start+0xcc>)
   1c586:	4a0c      	ldr	r2, [pc, #48]	; (1c5b8 <preempt_ticker_start+0xd0>)
   1c588:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1c58a:	7812      	ldrb	r2, [r2, #0]
   1c58c:	429a      	cmp	r2, r3
   1c58e:	d1c5      	bne.n	1c51c <preempt_ticker_start+0x34>
   1c590:	f8df a014 	ldr.w	sl, [pc, #20]	; 1c5a8 <preempt_ticker_start+0xc0>
   1c594:	e7dc      	b.n	1c550 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1c596:	2000      	movs	r0, #0
}
   1c598:	b00a      	add	sp, #40	; 0x28
   1c59a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c59e:	bf00      	nop
   1c5a0:	20003576 	.word	0x20003576
   1c5a4:	20003577 	.word	0x20003577
   1c5a8:	20002ed0 	.word	0x20002ed0
   1c5ac:	0001c341 	.word	0x0001c341
   1c5b0:	0001c3e9 	.word	0x0001c3e9
   1c5b4:	20003574 	.word	0x20003574
   1c5b8:	20003575 	.word	0x20003575

0001c5bc <preempt>:

static void preempt(void *param)
{
   1c5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1c5be:	4e4b      	ldr	r6, [pc, #300]	; (1c6ec <preempt+0x130>)
   1c5c0:	68b3      	ldr	r3, [r6, #8]
{
   1c5c2:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1c5c4:	b1b3      	cbz	r3, 1c5f4 <preempt+0x38>
   1c5c6:	6833      	ldr	r3, [r6, #0]
   1c5c8:	b1a3      	cbz	r3, 1c5f4 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1c5ca:	23ff      	movs	r3, #255	; 0xff
   1c5cc:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1c5ce:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1c5d2:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1c5d6:	f7f7 fed5 	bl	14384 <ull_prepare_dequeue_iter>
	if (!next) {
   1c5da:	4601      	mov	r1, r0
   1c5dc:	b150      	cbz	r0, 1c5f4 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1c5de:	7f0b      	ldrb	r3, [r1, #28]
   1c5e0:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1c5e4:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1c5e8:	d006      	beq.n	1c5f8 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1c5ea:	f7f7 fecb 	bl	14384 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1c5ee:	4601      	mov	r1, r0
   1c5f0:	2800      	cmp	r0, #0
   1c5f2:	d1f4      	bne.n	1c5de <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1c5f4:	b009      	add	sp, #36	; 0x24
   1c5f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1c5f8:	428d      	cmp	r5, r1
   1c5fa:	d126      	bne.n	1c64a <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1c5fc:	6873      	ldr	r3, [r6, #4]
   1c5fe:	6831      	ldr	r1, [r6, #0]
   1c600:	68e8      	ldr	r0, [r5, #12]
   1c602:	aa03      	add	r2, sp, #12
   1c604:	4798      	blx	r3
	if (!err) {
   1c606:	4607      	mov	r7, r0
   1c608:	b1b0      	cbz	r0, 1c638 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1c60a:	68b3      	ldr	r3, [r6, #8]
   1c60c:	6831      	ldr	r1, [r6, #0]
   1c60e:	4620      	mov	r0, r4
   1c610:	4798      	blx	r3
	if (err == -EAGAIN) {
   1c612:	f117 0f0b 	cmn.w	r7, #11
   1c616:	d02c      	beq.n	1c672 <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1c618:	378c      	adds	r7, #140	; 0x8c
   1c61a:	d0eb      	beq.n	1c5f4 <preempt+0x38>
   1c61c:	4a34      	ldr	r2, [pc, #208]	; (1c6f0 <preempt+0x134>)
   1c61e:	4935      	ldr	r1, [pc, #212]	; (1c6f4 <preempt+0x138>)
   1c620:	4835      	ldr	r0, [pc, #212]	; (1c6f8 <preempt+0x13c>)
   1c622:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1c626:	f008 fc6e 	bl	24f06 <printk>
   1c62a:	4040      	eors	r0, r0
   1c62c:	f380 8811 	msr	BASEPRI, r0
   1c630:	f04f 0003 	mov.w	r0, #3
   1c634:	df02      	svc	2
   1c636:	e7dd      	b.n	1c5f4 <preempt+0x38>
		next->is_aborted = 1;
   1c638:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c63a:	69aa      	ldr	r2, [r5, #24]
   1c63c:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1c63e:	f043 0302 	orr.w	r3, r3, #2
   1c642:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1c644:	4628      	mov	r0, r5
   1c646:	4790      	blx	r2
		return;
   1c648:	e7d4      	b.n	1c5f4 <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1c64a:	4620      	mov	r0, r4
   1c64c:	f7ff ff4c 	bl	1c4e8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c650:	f030 0302 	bics.w	r3, r0, #2
   1c654:	d0ce      	beq.n	1c5f4 <preempt+0x38>
   1c656:	4a26      	ldr	r2, [pc, #152]	; (1c6f0 <preempt+0x134>)
   1c658:	4928      	ldr	r1, [pc, #160]	; (1c6fc <preempt+0x140>)
   1c65a:	4827      	ldr	r0, [pc, #156]	; (1c6f8 <preempt+0x13c>)
   1c65c:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1c660:	f008 fc51 	bl	24f06 <printk>
   1c664:	4040      	eors	r0, r0
   1c666:	f380 8811 	msr	BASEPRI, r0
   1c66a:	f04f 0003 	mov.w	r0, #3
   1c66e:	df02      	svc	2
   1c670:	e7c0      	b.n	1c5f4 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1c672:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c674:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1c678:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1c67c:	f7f7 fe82 	bl	14384 <ull_prepare_dequeue_iter>
		while (iter) {
   1c680:	b928      	cbnz	r0, 1c68e <preempt+0xd2>
   1c682:	e013      	b.n	1c6ac <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1c684:	f10d 000b 	add.w	r0, sp, #11
   1c688:	f7f7 fe7c 	bl	14384 <ull_prepare_dequeue_iter>
		while (iter) {
   1c68c:	b170      	cbz	r0, 1c6ac <preempt+0xf0>
			if (!iter->is_aborted &&
   1c68e:	7f03      	ldrb	r3, [r0, #28]
   1c690:	079a      	lsls	r2, r3, #30
   1c692:	d4f7      	bmi.n	1c684 <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1c694:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1c696:	6831      	ldr	r1, [r6, #0]
   1c698:	4291      	cmp	r1, r2
   1c69a:	d1f3      	bne.n	1c684 <preempt+0xc8>
				iter->is_aborted = 1;
   1c69c:	f043 0302 	orr.w	r3, r3, #2
   1c6a0:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1c6a2:	6983      	ldr	r3, [r0, #24]
   1c6a4:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1c6a6:	f88d 400b 	strb.w	r4, [sp, #11]
   1c6aa:	e7eb      	b.n	1c684 <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1c6ac:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1c6ae:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1c6b0:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c6b2:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1c6b4:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c6b8:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1c6ba:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1c6bc:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1c6be:	9b03      	ldr	r3, [sp, #12]
   1c6c0:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1c6c4:	aa04      	add	r2, sp, #16
   1c6c6:	f7f7 fe15 	bl	142f4 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1c6ca:	2800      	cmp	r0, #0
   1c6cc:	d192      	bne.n	1c5f4 <preempt+0x38>
   1c6ce:	4a08      	ldr	r2, [pc, #32]	; (1c6f0 <preempt+0x134>)
   1c6d0:	490b      	ldr	r1, [pc, #44]	; (1c700 <preempt+0x144>)
   1c6d2:	4809      	ldr	r0, [pc, #36]	; (1c6f8 <preempt+0x13c>)
   1c6d4:	f240 33ce 	movw	r3, #974	; 0x3ce
   1c6d8:	f008 fc15 	bl	24f06 <printk>
   1c6dc:	4040      	eors	r0, r0
   1c6de:	f380 8811 	msr	BASEPRI, r0
   1c6e2:	f04f 0003 	mov.w	r0, #3
   1c6e6:	df02      	svc	2
   1c6e8:	e784      	b.n	1c5f4 <preempt+0x38>
   1c6ea:	bf00      	nop
   1c6ec:	20002ebc 	.word	0x20002ebc
   1c6f0:	0002cc5c 	.word	0x0002cc5c
   1c6f4:	0002cd34 	.word	0x0002cd34
   1c6f8:	0002bfdc 	.word	0x0002bfdc
   1c6fc:	0002c548 	.word	0x0002c548
   1c700:	0002cd2c 	.word	0x0002cd2c

0001c704 <lll_init>:
{
   1c704:	b510      	push	{r4, lr}
   1c706:	4816      	ldr	r0, [pc, #88]	; (1c760 <lll_init+0x5c>)
   1c708:	f005 fa70 	bl	21bec <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1c70c:	4b15      	ldr	r3, [pc, #84]	; (1c764 <lll_init+0x60>)
   1c70e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1c710:	b310      	cbz	r0, 1c758 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1c712:	4b15      	ldr	r3, [pc, #84]	; (1c768 <lll_init+0x64>)
   1c714:	2400      	movs	r4, #0
   1c716:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1c718:	f000 fb0a 	bl	1cd30 <lll_clock_init>
	if (err < 0) {
   1c71c:	2800      	cmp	r0, #0
   1c71e:	db1a      	blt.n	1c756 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1c720:	4621      	mov	r1, r4
   1c722:	2001      	movs	r0, #1
   1c724:	4622      	mov	r2, r4
   1c726:	f7ea f9e3 	bl	6af0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1c72a:	4622      	mov	r2, r4
   1c72c:	200b      	movs	r0, #11
   1c72e:	2101      	movs	r1, #1
   1c730:	f7ea f9de 	bl	6af0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1c734:	4622      	mov	r2, r4
   1c736:	4621      	mov	r1, r4
   1c738:	2018      	movs	r0, #24
   1c73a:	f7ea f9d9 	bl	6af0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1c73e:	2001      	movs	r0, #1
   1c740:	f7ea f9a4 	bl	6a8c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1c744:	200b      	movs	r0, #11
   1c746:	f7ea f9a1 	bl	6a8c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1c74a:	2018      	movs	r0, #24
   1c74c:	f7ea f99e 	bl	6a8c <arch_irq_enable>
	radio_setup();
   1c750:	f002 fba8 	bl	1eea4 <radio_setup>
	return 0;
   1c754:	4620      	mov	r0, r4
}
   1c756:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1c758:	f06f 0012 	mvn.w	r0, #18
}
   1c75c:	bd10      	pop	{r4, pc}
   1c75e:	bf00      	nop
   1c760:	0002cd40 	.word	0x0002cd40
   1c764:	20002eb8 	.word	0x20002eb8
   1c768:	20002ebc 	.word	0x20002ebc

0001c76c <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1c76c:	4a05      	ldr	r2, [pc, #20]	; (1c784 <lll_csrand_get+0x18>)
{
   1c76e:	b410      	push	{r4}
   1c770:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1c772:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1c774:	6884      	ldr	r4, [r0, #8]
   1c776:	6824      	ldr	r4, [r4, #0]
   1c778:	b28a      	uxth	r2, r1
   1c77a:	4619      	mov	r1, r3
   1c77c:	4623      	mov	r3, r4
}
   1c77e:	bc10      	pop	{r4}
   1c780:	4718      	bx	r3
   1c782:	bf00      	nop
   1c784:	20002eb8 	.word	0x20002eb8

0001c788 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1c788:	4b08      	ldr	r3, [pc, #32]	; (1c7ac <lll_csrand_isr_get+0x24>)
{
   1c78a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1c78c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1c78e:	68ab      	ldr	r3, [r5, #8]
   1c790:	685c      	ldr	r4, [r3, #4]
   1c792:	b13c      	cbz	r4, 1c7a4 <lll_csrand_isr_get+0x1c>
   1c794:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1c796:	46a4      	mov	ip, r4
   1c798:	4601      	mov	r1, r0
   1c79a:	b292      	uxth	r2, r2
   1c79c:	4628      	mov	r0, r5
   1c79e:	2300      	movs	r3, #0
}
   1c7a0:	bc30      	pop	{r4, r5}
   1c7a2:	4760      	bx	ip
   1c7a4:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c7a8:	bc30      	pop	{r4, r5}
   1c7aa:	4770      	bx	lr
   1c7ac:	20002eb8 	.word	0x20002eb8

0001c7b0 <lll_rand_isr_get>:
   1c7b0:	4b08      	ldr	r3, [pc, #32]	; (1c7d4 <lll_rand_isr_get+0x24>)
   1c7b2:	b430      	push	{r4, r5}
   1c7b4:	681d      	ldr	r5, [r3, #0]
   1c7b6:	68ab      	ldr	r3, [r5, #8]
   1c7b8:	685c      	ldr	r4, [r3, #4]
   1c7ba:	b13c      	cbz	r4, 1c7cc <lll_rand_isr_get+0x1c>
   1c7bc:	460a      	mov	r2, r1
   1c7be:	46a4      	mov	ip, r4
   1c7c0:	4601      	mov	r1, r0
   1c7c2:	b292      	uxth	r2, r2
   1c7c4:	4628      	mov	r0, r5
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	bc30      	pop	{r4, r5}
   1c7ca:	4760      	bx	ip
   1c7cc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1c7d0:	bc30      	pop	{r4, r5}
   1c7d2:	4770      	bx	lr
   1c7d4:	20002eb8 	.word	0x20002eb8

0001c7d8 <lll_reset>:
}
   1c7d8:	2000      	movs	r0, #0
   1c7da:	4770      	bx	lr

0001c7dc <lll_disable>:
{
   1c7dc:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1c7de:	4604      	mov	r4, r0
{
   1c7e0:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1c7e2:	b378      	cbz	r0, 1c844 <lll_disable+0x68>
   1c7e4:	4b23      	ldr	r3, [pc, #140]	; (1c874 <lll_disable+0x98>)
   1c7e6:	681a      	ldr	r2, [r3, #0]
   1c7e8:	4282      	cmp	r2, r0
   1c7ea:	d025      	beq.n	1c838 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1c7ec:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1c7ee:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1c7f2:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1c7f6:	f7f7 fdc5 	bl	14384 <ull_prepare_dequeue_iter>
		while (next) {
   1c7fa:	b938      	cbnz	r0, 1c80c <lll_disable+0x30>
   1c7fc:	e01a      	b.n	1c834 <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1c7fe:	428c      	cmp	r4, r1
   1c800:	d00a      	beq.n	1c818 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1c802:	f10d 0007 	add.w	r0, sp, #7
   1c806:	f7f7 fdbd 	bl	14384 <ull_prepare_dequeue_iter>
		while (next) {
   1c80a:	b198      	cbz	r0, 1c834 <lll_disable+0x58>
			if (!next->is_aborted &&
   1c80c:	7f03      	ldrb	r3, [r0, #28]
   1c80e:	079b      	lsls	r3, r3, #30
   1c810:	d4f7      	bmi.n	1c802 <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1c812:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1c814:	2c00      	cmp	r4, #0
   1c816:	d1f2      	bne.n	1c7fe <lll_disable+0x22>
				next->is_aborted = 1;
   1c818:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1c81a:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1c81c:	f043 0302 	orr.w	r3, r3, #2
   1c820:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1c822:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1c824:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1c828:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1c82c:	f7f7 fdaa 	bl	14384 <ull_prepare_dequeue_iter>
		while (next) {
   1c830:	2800      	cmp	r0, #0
   1c832:	d1eb      	bne.n	1c80c <lll_disable+0x30>
}
   1c834:	b003      	add	sp, #12
   1c836:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1c838:	689b      	ldr	r3, [r3, #8]
   1c83a:	b16b      	cbz	r3, 1c858 <lll_disable+0x7c>
   1c83c:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1c83e:	2000      	movs	r0, #0
   1c840:	4798      	blx	r3
   1c842:	e7d3      	b.n	1c7ec <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1c844:	4a0b      	ldr	r2, [pc, #44]	; (1c874 <lll_disable+0x98>)
   1c846:	6893      	ldr	r3, [r2, #8]
   1c848:	2b00      	cmp	r3, #0
   1c84a:	d0cf      	beq.n	1c7ec <lll_disable+0x10>
   1c84c:	6811      	ldr	r1, [r2, #0]
   1c84e:	2900      	cmp	r1, #0
   1c850:	d0cc      	beq.n	1c7ec <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1c852:	2000      	movs	r0, #0
   1c854:	4798      	blx	r3
   1c856:	e7c9      	b.n	1c7ec <lll_disable+0x10>
			LL_ASSERT(!param);
   1c858:	4a07      	ldr	r2, [pc, #28]	; (1c878 <lll_disable+0x9c>)
   1c85a:	4908      	ldr	r1, [pc, #32]	; (1c87c <lll_disable+0xa0>)
   1c85c:	4808      	ldr	r0, [pc, #32]	; (1c880 <lll_disable+0xa4>)
   1c85e:	23fd      	movs	r3, #253	; 0xfd
   1c860:	f008 fb51 	bl	24f06 <printk>
   1c864:	4040      	eors	r0, r0
   1c866:	f380 8811 	msr	BASEPRI, r0
   1c86a:	f04f 0003 	mov.w	r0, #3
   1c86e:	df02      	svc	2
   1c870:	e7bc      	b.n	1c7ec <lll_disable+0x10>
   1c872:	bf00      	nop
   1c874:	20002ebc 	.word	0x20002ebc
   1c878:	0002cc5c 	.word	0x0002cc5c
   1c87c:	0002cd44 	.word	0x0002cd44
   1c880:	0002bfdc 	.word	0x0002bfdc

0001c884 <lll_prepare_done>:
}
   1c884:	2000      	movs	r0, #0
   1c886:	4770      	bx	lr

0001c888 <lll_done>:
{
   1c888:	b538      	push	{r3, r4, r5, lr}
   1c88a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1c88c:	f7f7 fd6c 	bl	14368 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1c890:	b154      	cbz	r4, 1c8a8 <lll_done+0x20>
   1c892:	b310      	cbz	r0, 1c8da <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1c894:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1c896:	2000      	movs	r0, #0
   1c898:	f7f7 fd94 	bl	143c4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1c89c:	4620      	mov	r0, r4
   1c89e:	f7f7 fdf5 	bl	1448c <ull_event_done>
	LL_ASSERT(evdone);
   1c8a2:	b158      	cbz	r0, 1c8bc <lll_done+0x34>
}
   1c8a4:	2000      	movs	r0, #0
   1c8a6:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1c8a8:	4d1a      	ldr	r5, [pc, #104]	; (1c914 <lll_done+0x8c>)
   1c8aa:	68ab      	ldr	r3, [r5, #8]
   1c8ac:	b31b      	cbz	r3, 1c8f6 <lll_done+0x6e>
		param = event.curr.param;
   1c8ae:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1c8b0:	2300      	movs	r3, #0
   1c8b2:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1c8b4:	602b      	str	r3, [r5, #0]
		if (param) {
   1c8b6:	2c00      	cmp	r4, #0
   1c8b8:	d1ec      	bne.n	1c894 <lll_done+0xc>
   1c8ba:	e7ec      	b.n	1c896 <lll_done+0xe>
	LL_ASSERT(evdone);
   1c8bc:	4a16      	ldr	r2, [pc, #88]	; (1c918 <lll_done+0x90>)
   1c8be:	4917      	ldr	r1, [pc, #92]	; (1c91c <lll_done+0x94>)
   1c8c0:	4817      	ldr	r0, [pc, #92]	; (1c920 <lll_done+0x98>)
   1c8c2:	f240 136d 	movw	r3, #365	; 0x16d
   1c8c6:	f008 fb1e 	bl	24f06 <printk>
   1c8ca:	4040      	eors	r0, r0
   1c8cc:	f380 8811 	msr	BASEPRI, r0
   1c8d0:	f04f 0003 	mov.w	r0, #3
   1c8d4:	df02      	svc	2
}
   1c8d6:	2000      	movs	r0, #0
   1c8d8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1c8da:	4a0f      	ldr	r2, [pc, #60]	; (1c918 <lll_done+0x90>)
   1c8dc:	4911      	ldr	r1, [pc, #68]	; (1c924 <lll_done+0x9c>)
   1c8de:	4810      	ldr	r0, [pc, #64]	; (1c920 <lll_done+0x98>)
   1c8e0:	f240 1337 	movw	r3, #311	; 0x137
   1c8e4:	f008 fb0f 	bl	24f06 <printk>
   1c8e8:	4040      	eors	r0, r0
   1c8ea:	f380 8811 	msr	BASEPRI, r0
   1c8ee:	f04f 0003 	mov.w	r0, #3
   1c8f2:	df02      	svc	2
   1c8f4:	e7ce      	b.n	1c894 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1c8f6:	4a08      	ldr	r2, [pc, #32]	; (1c918 <lll_done+0x90>)
   1c8f8:	490b      	ldr	r1, [pc, #44]	; (1c928 <lll_done+0xa0>)
   1c8fa:	4809      	ldr	r0, [pc, #36]	; (1c920 <lll_done+0x98>)
   1c8fc:	f240 133d 	movw	r3, #317	; 0x13d
   1c900:	f008 fb01 	bl	24f06 <printk>
   1c904:	4040      	eors	r0, r0
   1c906:	f380 8811 	msr	BASEPRI, r0
   1c90a:	f04f 0003 	mov.w	r0, #3
   1c90e:	df02      	svc	2
   1c910:	e7cd      	b.n	1c8ae <lll_done+0x26>
   1c912:	bf00      	nop
   1c914:	20002ebc 	.word	0x20002ebc
   1c918:	0002cc5c 	.word	0x0002cc5c
   1c91c:	0002cd70 	.word	0x0002cd70
   1c920:	0002bfdc 	.word	0x0002bfdc
   1c924:	0002cd4c 	.word	0x0002cd4c
   1c928:	0002cd5c 	.word	0x0002cd5c

0001c92c <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1c92c:	4a05      	ldr	r2, [pc, #20]	; (1c944 <lll_is_done+0x18>)
   1c92e:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1c930:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1c932:	1a1b      	subs	r3, r3, r0
   1c934:	bf18      	it	ne
   1c936:	2301      	movne	r3, #1
}
   1c938:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1c93c:	700b      	strb	r3, [r1, #0]
}
   1c93e:	0940      	lsrs	r0, r0, #5
   1c940:	4770      	bx	lr
   1c942:	bf00      	nop
   1c944:	20002ebc 	.word	0x20002ebc

0001c948 <lll_is_abort_cb>:
}
   1c948:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1c94c:	4770      	bx	lr
   1c94e:	bf00      	nop

0001c950 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   1c950:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1c954:	2a00      	cmp	r2, #0
   1c956:	db04      	blt.n	1c962 <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1c958:	429a      	cmp	r2, r3
   1c95a:	bf38      	it	cc
   1c95c:	461a      	movcc	r2, r3
   1c95e:	4610      	mov	r0, r2
}
   1c960:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1c962:	68c0      	ldr	r0, [r0, #12]
   1c964:	4298      	cmp	r0, r3
   1c966:	bf38      	it	cc
   1c968:	4618      	movcc	r0, r3
   1c96a:	4770      	bx	lr

0001c96c <lll_preempt_calc>:
{
   1c96c:	b510      	push	{r4, lr}
   1c96e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1c970:	f7f4 ff46 	bl	11800 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1c974:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1c976:	0203      	lsls	r3, r0, #8
   1c978:	d405      	bmi.n	1c986 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1c97a:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1c97c:	2809      	cmp	r0, #9
   1c97e:	bf94      	ite	ls
   1c980:	2000      	movls	r0, #0
   1c982:	2001      	movhi	r0, #1
}
   1c984:	bd10      	pop	{r4, pc}
		return 0;
   1c986:	2000      	movs	r0, #0
}
   1c988:	bd10      	pop	{r4, pc}
   1c98a:	bf00      	nop

0001c98c <lll_chan_set>:
	switch (chan) {
   1c98c:	2826      	cmp	r0, #38	; 0x26
{
   1c98e:	b510      	push	{r4, lr}
   1c990:	4604      	mov	r4, r0
	switch (chan) {
   1c992:	d01c      	beq.n	1c9ce <lll_chan_set+0x42>
   1c994:	2827      	cmp	r0, #39	; 0x27
   1c996:	d012      	beq.n	1c9be <lll_chan_set+0x32>
   1c998:	2825      	cmp	r0, #37	; 0x25
   1c99a:	d008      	beq.n	1c9ae <lll_chan_set+0x22>
		if (chan < 11) {
   1c99c:	280a      	cmp	r0, #10
   1c99e:	d91e      	bls.n	1c9de <lll_chan_set+0x52>
		} else if (chan < 40) {
   1c9a0:	2827      	cmp	r0, #39	; 0x27
   1c9a2:	d821      	bhi.n	1c9e8 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1c9a4:	3003      	adds	r0, #3
   1c9a6:	0040      	lsls	r0, r0, #1
   1c9a8:	f002 fad8 	bl	1ef5c <radio_freq_chan_set>
   1c9ac:	e002      	b.n	1c9b4 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1c9ae:	2002      	movs	r0, #2
   1c9b0:	f002 fad4 	bl	1ef5c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c9b4:	4620      	mov	r0, r4
}
   1c9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c9ba:	f002 bad5 	b.w	1ef68 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1c9be:	2050      	movs	r0, #80	; 0x50
   1c9c0:	f002 facc 	bl	1ef5c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c9c4:	4620      	mov	r0, r4
}
   1c9c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c9ca:	f002 bacd 	b.w	1ef68 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1c9ce:	201a      	movs	r0, #26
   1c9d0:	f002 fac4 	bl	1ef5c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1c9d4:	4620      	mov	r0, r4
}
   1c9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1c9da:	f002 bac5 	b.w	1ef68 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1c9de:	3002      	adds	r0, #2
   1c9e0:	0040      	lsls	r0, r0, #1
   1c9e2:	f002 fabb 	bl	1ef5c <radio_freq_chan_set>
   1c9e6:	e7e5      	b.n	1c9b4 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1c9e8:	4a06      	ldr	r2, [pc, #24]	; (1ca04 <lll_chan_set+0x78>)
   1c9ea:	4907      	ldr	r1, [pc, #28]	; (1ca08 <lll_chan_set+0x7c>)
   1c9ec:	4807      	ldr	r0, [pc, #28]	; (1ca0c <lll_chan_set+0x80>)
   1c9ee:	f240 13df 	movw	r3, #479	; 0x1df
   1c9f2:	f008 fa88 	bl	24f06 <printk>
   1c9f6:	4040      	eors	r0, r0
   1c9f8:	f380 8811 	msr	BASEPRI, r0
   1c9fc:	f04f 0003 	mov.w	r0, #3
   1ca00:	df02      	svc	2
   1ca02:	e7d7      	b.n	1c9b4 <lll_chan_set+0x28>
   1ca04:	0002cc5c 	.word	0x0002cc5c
   1ca08:	0002c074 	.word	0x0002c074
   1ca0c:	0002bfdc 	.word	0x0002bfdc

0001ca10 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1ca10:	f002 bb08 	b.w	1f024 <radio_tx_ready_delay_get>

0001ca14 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1ca14:	f002 bb0e 	b.w	1f034 <radio_rx_ready_delay_get>

0001ca18 <lll_isr_tx_status_reset>:
{
   1ca18:	b508      	push	{r3, lr}
	radio_status_reset();
   1ca1a:	f002 fb33 	bl	1f084 <radio_status_reset>
}
   1ca1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1ca22:	f002 bc93 	b.w	1f34c <radio_tmr_status_reset>
   1ca26:	bf00      	nop

0001ca28 <lll_isr_rx_status_reset>:
{
   1ca28:	b508      	push	{r3, lr}
	radio_status_reset();
   1ca2a:	f002 fb2b 	bl	1f084 <radio_status_reset>
	radio_tmr_status_reset();
   1ca2e:	f002 fc8d 	bl	1f34c <radio_tmr_status_reset>
}
   1ca32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1ca36:	f002 bc35 	b.w	1f2a4 <radio_rssi_status_reset>
   1ca3a:	bf00      	nop

0001ca3c <lll_isr_status_reset>:
{
   1ca3c:	b508      	push	{r3, lr}
	radio_status_reset();
   1ca3e:	f002 fb21 	bl	1f084 <radio_status_reset>
	radio_tmr_status_reset();
   1ca42:	f002 fc83 	bl	1f34c <radio_tmr_status_reset>
	radio_filter_status_reset();
   1ca46:	f002 fc69 	bl	1f31c <radio_filter_status_reset>
	radio_ar_status_reset();
   1ca4a:	f002 fe7b 	bl	1f744 <radio_ar_status_reset>
}
   1ca4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1ca52:	f002 bc27 	b.w	1f2a4 <radio_rssi_status_reset>
   1ca56:	bf00      	nop

0001ca58 <lll_isr_cleanup>:
{
   1ca58:	b508      	push	{r3, lr}
   1ca5a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1ca5c:	4815      	ldr	r0, [pc, #84]	; (1cab4 <lll_isr_cleanup+0x5c>)
   1ca5e:	f002 fa01 	bl	1ee64 <radio_isr_set>
	if (!radio_is_idle()) {
   1ca62:	f002 fb2f 	bl	1f0c4 <radio_is_idle>
   1ca66:	b150      	cbz	r0, 1ca7e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1ca68:	f002 fd46 	bl	1f4f8 <radio_tmr_stop>
	err = lll_hfclock_off();
   1ca6c:	f000 f9a4 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ca70:	2800      	cmp	r0, #0
   1ca72:	db0c      	blt.n	1ca8e <lll_isr_cleanup+0x36>
}
   1ca74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1ca78:	2000      	movs	r0, #0
   1ca7a:	f7ff bf05 	b.w	1c888 <lll_done>
		radio_disable();
   1ca7e:	f002 faed 	bl	1f05c <radio_disable>
	radio_tmr_stop();
   1ca82:	f002 fd39 	bl	1f4f8 <radio_tmr_stop>
	err = lll_hfclock_off();
   1ca86:	f000 f997 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ca8a:	2800      	cmp	r0, #0
   1ca8c:	daf2      	bge.n	1ca74 <lll_isr_cleanup+0x1c>
   1ca8e:	4a0a      	ldr	r2, [pc, #40]	; (1cab8 <lll_isr_cleanup+0x60>)
   1ca90:	490a      	ldr	r1, [pc, #40]	; (1cabc <lll_isr_cleanup+0x64>)
   1ca92:	480b      	ldr	r0, [pc, #44]	; (1cac0 <lll_isr_cleanup+0x68>)
   1ca94:	f240 2342 	movw	r3, #578	; 0x242
   1ca98:	f008 fa35 	bl	24f06 <printk>
   1ca9c:	4040      	eors	r0, r0
   1ca9e:	f380 8811 	msr	BASEPRI, r0
   1caa2:	f04f 0003 	mov.w	r0, #3
   1caa6:	df02      	svc	2
	lll_done(NULL);
   1caa8:	2000      	movs	r0, #0
}
   1caaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1caae:	f7ff beeb 	b.w	1c888 <lll_done>
   1cab2:	bf00      	nop
   1cab4:	0001c3e5 	.word	0x0001c3e5
   1cab8:	0002cc5c 	.word	0x0002cc5c
   1cabc:	0002cd78 	.word	0x0002cd78
   1cac0:	0002bfdc 	.word	0x0002bfdc

0001cac4 <lll_isr_abort>:
{
   1cac4:	b510      	push	{r4, lr}
   1cac6:	4604      	mov	r4, r0
	radio_status_reset();
   1cac8:	f002 fadc 	bl	1f084 <radio_status_reset>
	radio_tmr_status_reset();
   1cacc:	f002 fc3e 	bl	1f34c <radio_tmr_status_reset>
	radio_filter_status_reset();
   1cad0:	f002 fc24 	bl	1f31c <radio_filter_status_reset>
	radio_ar_status_reset();
   1cad4:	f002 fe36 	bl	1f744 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1cad8:	f002 fbe4 	bl	1f2a4 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1cadc:	4620      	mov	r0, r4
}
   1cade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1cae2:	f7ff bfb9 	b.w	1ca58 <lll_isr_cleanup>
   1cae6:	bf00      	nop

0001cae8 <lll_isr_early_abort>:
{
   1cae8:	b508      	push	{r3, lr}
   1caea:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1caec:	4813      	ldr	r0, [pc, #76]	; (1cb3c <lll_isr_early_abort+0x54>)
   1caee:	f002 f9b9 	bl	1ee64 <radio_isr_set>
	if (!radio_is_idle()) {
   1caf2:	f002 fae7 	bl	1f0c4 <radio_is_idle>
   1caf6:	b140      	cbz	r0, 1cb0a <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1caf8:	f000 f95e 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cafc:	2800      	cmp	r0, #0
   1cafe:	db0a      	blt.n	1cb16 <lll_isr_early_abort+0x2e>
}
   1cb00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cb04:	2000      	movs	r0, #0
   1cb06:	f7ff bebf 	b.w	1c888 <lll_done>
		radio_disable();
   1cb0a:	f002 faa7 	bl	1f05c <radio_disable>
	err = lll_hfclock_off();
   1cb0e:	f000 f953 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cb12:	2800      	cmp	r0, #0
   1cb14:	daf4      	bge.n	1cb00 <lll_isr_early_abort+0x18>
   1cb16:	4a0a      	ldr	r2, [pc, #40]	; (1cb40 <lll_isr_early_abort+0x58>)
   1cb18:	490a      	ldr	r1, [pc, #40]	; (1cb44 <lll_isr_early_abort+0x5c>)
   1cb1a:	480b      	ldr	r0, [pc, #44]	; (1cb48 <lll_isr_early_abort+0x60>)
   1cb1c:	f240 2351 	movw	r3, #593	; 0x251
   1cb20:	f008 f9f1 	bl	24f06 <printk>
   1cb24:	4040      	eors	r0, r0
   1cb26:	f380 8811 	msr	BASEPRI, r0
   1cb2a:	f04f 0003 	mov.w	r0, #3
   1cb2e:	df02      	svc	2
	lll_done(NULL);
   1cb30:	2000      	movs	r0, #0
}
   1cb32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1cb36:	f7ff bea7 	b.w	1c888 <lll_done>
   1cb3a:	bf00      	nop
   1cb3c:	0001c3e5 	.word	0x0001c3e5
   1cb40:	0002cc5c 	.word	0x0002cc5c
   1cb44:	0002cd78 	.word	0x0002cd78
   1cb48:	0002bfdc 	.word	0x0002bfdc

0001cb4c <lll_prepare_resolve>:
{
   1cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb50:	b084      	sub	sp, #16
   1cb52:	4606      	mov	r6, r0
   1cb54:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1cb56:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1cb5a:	23ff      	movs	r3, #255	; 0xff
{
   1cb5c:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1cb60:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1cb64:	460f      	mov	r7, r1
   1cb66:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1cb68:	f7f7 fc0c 	bl	14384 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1cb6c:	4604      	mov	r4, r0
   1cb6e:	b920      	cbnz	r0, 1cb7a <lll_prepare_resolve+0x2e>
   1cb70:	e032      	b.n	1cbd8 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1cb72:	f7f7 fc07 	bl	14384 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1cb76:	4604      	mov	r4, r0
   1cb78:	b370      	cbz	r0, 1cbd8 <lll_prepare_resolve+0x8c>
   1cb7a:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1cb7e:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1cb82:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1cb86:	d1f4      	bne.n	1cb72 <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1cb88:	f8df a130 	ldr.w	sl, [pc, #304]	; 1ccbc <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1cb8c:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cb90:	bb4b      	cbnz	r3, 1cbe6 <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1cb92:	f1b9 0f00 	cmp.w	r9, #0
   1cb96:	d048      	beq.n	1cc2a <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1cb98:	f8cd 9000 	str.w	r9, [sp]
   1cb9c:	4643      	mov	r3, r8
   1cb9e:	462a      	mov	r2, r5
   1cba0:	4639      	mov	r1, r7
   1cba2:	4630      	mov	r0, r6
   1cba4:	f7f7 fba6 	bl	142f4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1cba8:	b980      	cbnz	r0, 1cbcc <lll_prepare_resolve+0x80>
   1cbaa:	4a45      	ldr	r2, [pc, #276]	; (1ccc0 <lll_prepare_resolve+0x174>)
   1cbac:	4945      	ldr	r1, [pc, #276]	; (1ccc4 <lll_prepare_resolve+0x178>)
   1cbae:	4846      	ldr	r0, [pc, #280]	; (1ccc8 <lll_prepare_resolve+0x17c>)
   1cbb0:	f240 238d 	movw	r3, #653	; 0x28d
   1cbb4:	f008 f9a7 	bl	24f06 <printk>
   1cbb8:	4040      	eors	r0, r0
   1cbba:	f380 8811 	msr	BASEPRI, r0
   1cbbe:	f04f 0003 	mov.w	r0, #3
   1cbc2:	df02      	svc	2
   1cbc4:	2000      	movs	r0, #0
		if (is_resume) {
   1cbc6:	f1b9 0f00 	cmp.w	r9, #0
   1cbca:	d019      	beq.n	1cc00 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1cbcc:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1cbd0:	4620      	mov	r0, r4
   1cbd2:	b004      	add	sp, #16
   1cbd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1cbd8:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1ccbc <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1cbdc:	f8da 3008 	ldr.w	r3, [sl, #8]
   1cbe0:	2b00      	cmp	r3, #0
   1cbe2:	d031      	beq.n	1cc48 <lll_prepare_resolve+0xfc>
   1cbe4:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1cbe6:	f8cd 9000 	str.w	r9, [sp]
   1cbea:	4643      	mov	r3, r8
   1cbec:	462a      	mov	r2, r5
   1cbee:	4639      	mov	r1, r7
   1cbf0:	4630      	mov	r0, r6
   1cbf2:	f7f7 fb7f 	bl	142f4 <ull_prepare_enqueue>
		LL_ASSERT(next);
   1cbf6:	2800      	cmp	r0, #0
   1cbf8:	d0d7      	beq.n	1cbaa <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1cbfa:	f1b9 0f00 	cmp.w	r9, #0
   1cbfe:	d1e5      	bne.n	1cbcc <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1cc00:	4601      	mov	r1, r0
   1cc02:	4620      	mov	r0, r4
   1cc04:	f7ff fc70 	bl	1c4e8 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cc08:	f030 0302 	bics.w	r3, r0, #2
   1cc0c:	d0de      	beq.n	1cbcc <lll_prepare_resolve+0x80>
   1cc0e:	4a2c      	ldr	r2, [pc, #176]	; (1ccc0 <lll_prepare_resolve+0x174>)
   1cc10:	492e      	ldr	r1, [pc, #184]	; (1cccc <lll_prepare_resolve+0x180>)
   1cc12:	482d      	ldr	r0, [pc, #180]	; (1ccc8 <lll_prepare_resolve+0x17c>)
   1cc14:	f44f 7326 	mov.w	r3, #664	; 0x298
   1cc18:	f008 f975 	bl	24f06 <printk>
   1cc1c:	4040      	eors	r0, r0
   1cc1e:	f380 8811 	msr	BASEPRI, r0
   1cc22:	f04f 0003 	mov.w	r0, #3
   1cc26:	df02      	svc	2
   1cc28:	e7d0      	b.n	1cbcc <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1cc2a:	42ac      	cmp	r4, r5
   1cc2c:	d00c      	beq.n	1cc48 <lll_prepare_resolve+0xfc>
   1cc2e:	4a24      	ldr	r2, [pc, #144]	; (1ccc0 <lll_prepare_resolve+0x174>)
   1cc30:	4927      	ldr	r1, [pc, #156]	; (1ccd0 <lll_prepare_resolve+0x184>)
   1cc32:	4825      	ldr	r0, [pc, #148]	; (1ccc8 <lll_prepare_resolve+0x17c>)
   1cc34:	f240 23be 	movw	r3, #702	; 0x2be
   1cc38:	f008 f965 	bl	24f06 <printk>
   1cc3c:	4040      	eors	r0, r0
   1cc3e:	f380 8811 	msr	BASEPRI, r0
   1cc42:	f04f 0003 	mov.w	r0, #3
   1cc46:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1cc48:	68eb      	ldr	r3, [r5, #12]
   1cc4a:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1cc4e:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1cc52:	4628      	mov	r0, r5
   1cc54:	47c0      	blx	r8
   1cc56:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1cc58:	f7ff fc06 	bl	1c468 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cc5c:	f030 0302 	bics.w	r3, r0, #2
   1cc60:	d11e      	bne.n	1cca0 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1cc62:	f10d 000f 	add.w	r0, sp, #15
   1cc66:	f7f7 fb8d 	bl	14384 <ull_prepare_dequeue_iter>
		if (!p) {
   1cc6a:	2800      	cmp	r0, #0
   1cc6c:	d0b0      	beq.n	1cbd0 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1cc6e:	7f03      	ldrb	r3, [r0, #28]
   1cc70:	f013 0303 	ands.w	r3, r3, #3
   1cc74:	d1f5      	bne.n	1cc62 <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1cc76:	4601      	mov	r1, r0
   1cc78:	4618      	mov	r0, r3
   1cc7a:	f7ff fc35 	bl	1c4e8 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cc7e:	f030 0302 	bics.w	r3, r0, #2
   1cc82:	d0a5      	beq.n	1cbd0 <lll_prepare_resolve+0x84>
   1cc84:	4a0e      	ldr	r2, [pc, #56]	; (1ccc0 <lll_prepare_resolve+0x174>)
   1cc86:	4911      	ldr	r1, [pc, #68]	; (1cccc <lll_prepare_resolve+0x180>)
   1cc88:	480f      	ldr	r0, [pc, #60]	; (1ccc8 <lll_prepare_resolve+0x17c>)
   1cc8a:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1cc8e:	f008 f93a 	bl	24f06 <printk>
   1cc92:	4040      	eors	r0, r0
   1cc94:	f380 8811 	msr	BASEPRI, r0
   1cc98:	f04f 0003 	mov.w	r0, #3
   1cc9c:	df02      	svc	2
   1cc9e:	e797      	b.n	1cbd0 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1cca0:	4a07      	ldr	r2, [pc, #28]	; (1ccc0 <lll_prepare_resolve+0x174>)
   1cca2:	490a      	ldr	r1, [pc, #40]	; (1cccc <lll_prepare_resolve+0x180>)
   1cca4:	4808      	ldr	r0, [pc, #32]	; (1ccc8 <lll_prepare_resolve+0x17c>)
   1cca6:	f240 23cb 	movw	r3, #715	; 0x2cb
   1ccaa:	f008 f92c 	bl	24f06 <printk>
   1ccae:	4040      	eors	r0, r0
   1ccb0:	f380 8811 	msr	BASEPRI, r0
   1ccb4:	f04f 0003 	mov.w	r0, #3
   1ccb8:	df02      	svc	2
   1ccba:	e7d2      	b.n	1cc62 <lll_prepare_resolve+0x116>
   1ccbc:	20002ebc 	.word	0x20002ebc
   1ccc0:	0002cc5c 	.word	0x0002cc5c
   1ccc4:	0002cd84 	.word	0x0002cd84
   1ccc8:	0002bfdc 	.word	0x0002bfdc
   1cccc:	0002c548 	.word	0x0002c548
   1ccd0:	0002cd8c 	.word	0x0002cd8c

0001ccd4 <clock_ready>:
	z_impl_k_sem_give(sem);
   1ccd4:	f101 0010 	add.w	r0, r1, #16
   1ccd8:	f005 bbc6 	b.w	22468 <z_impl_k_sem_give>

0001ccdc <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1ccdc:	b570      	push	{r4, r5, r6, lr}
   1ccde:	4605      	mov	r5, r0
   1cce0:	b08a      	sub	sp, #40	; 0x28
   1cce2:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cce4:	2201      	movs	r2, #1
   1cce6:	2100      	movs	r1, #0
   1cce8:	a804      	add	r0, sp, #16
   1ccea:	f00d fab2 	bl	2a252 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1ccee:	4b0f      	ldr	r3, [pc, #60]	; (1cd2c <blocking_on+0x50>)
   1ccf0:	9301      	str	r3, [sp, #4]
   1ccf2:	2600      	movs	r6, #0
   1ccf4:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1ccf6:	4669      	mov	r1, sp
   1ccf8:	4628      	mov	r0, r5
   1ccfa:	9603      	str	r6, [sp, #12]
   1ccfc:	9302      	str	r3, [sp, #8]
   1ccfe:	f008 f97e 	bl	24ffe <onoff_request>
	if (err < 0) {
   1cd02:	2800      	cmp	r0, #0
   1cd04:	db10      	blt.n	1cd28 <blocking_on+0x4c>
   1cd06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1cd0a:	4631      	mov	r1, r6
   1cd0c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1cd10:	fbe4 0103 	umlal	r0, r1, r4, r3
   1cd14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cd18:	2300      	movs	r3, #0
   1cd1a:	f7e3 fe2f 	bl	97c <__aeabi_uldivmod>
   1cd1e:	4602      	mov	r2, r0
   1cd20:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1cd22:	a804      	add	r0, sp, #16
   1cd24:	f005 fbc6 	bl	224b4 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1cd28:	b00a      	add	sp, #40	; 0x28
   1cd2a:	bd70      	pop	{r4, r5, r6, pc}
   1cd2c:	0001ccd5 	.word	0x0001ccd5

0001cd30 <lll_clock_init>:

int lll_clock_init(void)
{
   1cd30:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cd32:	2001      	movs	r0, #1
   1cd34:	f003 f980 	bl	20038 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1cd38:	4904      	ldr	r1, [pc, #16]	; (1cd4c <lll_clock_init+0x1c>)
   1cd3a:	2300      	movs	r3, #0
   1cd3c:	2401      	movs	r4, #1
   1cd3e:	608c      	str	r4, [r1, #8]
   1cd40:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1cd42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1cd46:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1cd48:	f008 b959 	b.w	24ffe <onoff_request>
   1cd4c:	20002ed8 	.word	0x20002ed8

0001cd50 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1cd50:	4b0c      	ldr	r3, [pc, #48]	; (1cd84 <lll_clock_wait+0x34>)
   1cd52:	781a      	ldrb	r2, [r3, #0]
   1cd54:	b10a      	cbz	r2, 1cd5a <lll_clock_wait+0xa>
		return 0;
   1cd56:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1cd58:	4770      	bx	lr
{
   1cd5a:	b510      	push	{r4, lr}
	done = true;
   1cd5c:	2001      	movs	r0, #1
   1cd5e:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cd60:	f003 f96a 	bl	20038 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1cd64:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1cd68:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1cd6a:	f7ff ffb7 	bl	1ccdc <blocking_on>
	if (err) {
   1cd6e:	b938      	cbnz	r0, 1cd80 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1cd70:	4620      	mov	r0, r4
   1cd72:	f008 f98d 	bl	25090 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1cd76:	2802      	cmp	r0, #2
		return 0;
   1cd78:	bf0c      	ite	eq
   1cd7a:	2000      	moveq	r0, #0
		return -EIO;
   1cd7c:	f06f 0004 	mvnne.w	r0, #4
}
   1cd80:	bd10      	pop	{r4, pc}
   1cd82:	bf00      	nop
   1cd84:	2000357a 	.word	0x2000357a

0001cd88 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1cd88:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cd8a:	4b0a      	ldr	r3, [pc, #40]	; (1cdb4 <lll_hfclock_on+0x2c>)
   1cd8c:	f3bf 8f5b 	dmb	ish
   1cd90:	e853 2f00 	ldrex	r2, [r3]
   1cd94:	1c51      	adds	r1, r2, #1
   1cd96:	e843 1000 	strex	r0, r1, [r3]
   1cd9a:	2800      	cmp	r0, #0
   1cd9c:	d1f8      	bne.n	1cd90 <lll_hfclock_on+0x8>
   1cd9e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1cda2:	2a00      	cmp	r2, #0
   1cda4:	dd01      	ble.n	1cdaa <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1cda6:	2000      	movs	r0, #0
   1cda8:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1cdaa:	f003 f94d 	bl	20048 <z_nrf_clock_bt_ctlr_hf_request>
}
   1cdae:	2000      	movs	r0, #0
   1cdb0:	bd08      	pop	{r3, pc}
   1cdb2:	bf00      	nop
   1cdb4:	20002ed4 	.word	0x20002ed4

0001cdb8 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1cdb8:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1cdba:	4b0d      	ldr	r3, [pc, #52]	; (1cdf0 <lll_hfclock_off+0x38>)
   1cdbc:	681a      	ldr	r2, [r3, #0]
   1cdbe:	2a00      	cmp	r2, #0
   1cdc0:	dd12      	ble.n	1cde8 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cdc2:	f3bf 8f5b 	dmb	ish
   1cdc6:	e853 2f00 	ldrex	r2, [r3]
   1cdca:	1e51      	subs	r1, r2, #1
   1cdcc:	e843 1000 	strex	r0, r1, [r3]
   1cdd0:	2800      	cmp	r0, #0
   1cdd2:	d1f8      	bne.n	1cdc6 <lll_hfclock_off+0xe>
   1cdd4:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1cdd8:	2a01      	cmp	r2, #1
   1cdda:	dd01      	ble.n	1cde0 <lll_hfclock_off+0x28>
		return 0;
   1cddc:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1cdde:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1cde0:	f003 f948 	bl	20074 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1cde4:	2000      	movs	r0, #0
}
   1cde6:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1cde8:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1cdec:	bd08      	pop	{r3, pc}
   1cdee:	bf00      	nop
   1cdf0:	20002ed4 	.word	0x20002ed4

0001cdf4 <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1cdf4:	2005      	movs	r0, #5
   1cdf6:	4770      	bx	lr

0001cdf8 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1cdf8:	2032      	movs	r0, #50	; 0x32
   1cdfa:	4770      	bx	lr

0001cdfc <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1cdfc:	4b01      	ldr	r3, [pc, #4]	; (1ce04 <lll_clock_ppm_get+0x8>)
}
   1cdfe:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1ce02:	4770      	bx	lr
   1ce04:	0002cdd8 	.word	0x0002cdd8

0001ce08 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1ce08:	b510      	push	{r4, lr}
   1ce0a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1ce0c:	f7ff fe16 	bl	1ca3c <lll_isr_status_reset>

	radio_filter_disable();
   1ce10:	f002 fa7a 	bl	1f308 <radio_filter_disable>

	lll_isr_cleanup(param);
   1ce14:	4620      	mov	r0, r4
}
   1ce16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1ce1a:	f7ff be1d 	b.w	1ca58 <lll_isr_cleanup>
   1ce1e:	bf00      	nop

0001ce20 <isr_tx>:
{
   1ce20:	b530      	push	{r4, r5, lr}
   1ce22:	b083      	sub	sp, #12
   1ce24:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1ce26:	f7ff fdf7 	bl	1ca18 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ce2a:	2096      	movs	r0, #150	; 0x96
   1ce2c:	f002 fa9e 	bl	1f36c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1ce30:	2300      	movs	r3, #0
   1ce32:	4618      	mov	r0, r3
   1ce34:	461a      	mov	r2, r3
   1ce36:	4619      	mov	r1, r3
   1ce38:	f002 f9b4 	bl	1f1a4 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ce3c:	2001      	movs	r0, #1
   1ce3e:	f7f7 fa0d 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1ce42:	4604      	mov	r4, r0
   1ce44:	2800      	cmp	r0, #0
   1ce46:	d043      	beq.n	1ced0 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   1ce48:	f104 001c 	add.w	r0, r4, #28
   1ce4c:	f002 f8de 	bl	1f00c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1ce50:	f002 f924 	bl	1f09c <radio_is_ready>
   1ce54:	b9e0      	cbnz	r0, 1ce90 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   1ce56:	4825      	ldr	r0, [pc, #148]	; (1ceec <isr_tx+0xcc>)
   1ce58:	4629      	mov	r1, r5
   1ce5a:	f002 f803 	bl	1ee64 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1ce5e:	f7ff fa11 	bl	1c284 <ull_filter_lll_rl_enabled>
   1ce62:	bb50      	cbnz	r0, 1ceba <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1ce64:	f002 fb9c 	bl	1f5a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1ce68:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1ce6a:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1ce6c:	4608      	mov	r0, r1
   1ce6e:	f002 f8e3 	bl	1f038 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1ce72:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1ce74:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1ce76:	4608      	mov	r0, r1
   1ce78:	f002 f8da 	bl	1f030 <radio_tx_chain_delay_get>
   1ce7c:	442c      	add	r4, r5
   1ce7e:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1ce80:	1a20      	subs	r0, r4, r0
   1ce82:	f002 fb45 	bl	1f510 <radio_tmr_hcto_configure>
}
   1ce86:	b003      	add	sp, #12
   1ce88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1ce8c:	f002 bb7a 	b.w	1f584 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1ce90:	4a17      	ldr	r2, [pc, #92]	; (1cef0 <isr_tx+0xd0>)
   1ce92:	4918      	ldr	r1, [pc, #96]	; (1cef4 <isr_tx+0xd4>)
   1ce94:	4818      	ldr	r0, [pc, #96]	; (1cef8 <isr_tx+0xd8>)
   1ce96:	f240 4345 	movw	r3, #1093	; 0x445
   1ce9a:	f008 f834 	bl	24f06 <printk>
   1ce9e:	4040      	eors	r0, r0
   1cea0:	f380 8811 	msr	BASEPRI, r0
   1cea4:	f04f 0003 	mov.w	r0, #3
   1cea8:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1ceaa:	4810      	ldr	r0, [pc, #64]	; (1ceec <isr_tx+0xcc>)
   1ceac:	4629      	mov	r1, r5
   1ceae:	f001 ffd9 	bl	1ee64 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1ceb2:	f7ff f9e7 	bl	1c284 <ull_filter_lll_rl_enabled>
   1ceb6:	2800      	cmp	r0, #0
   1ceb8:	d0d4      	beq.n	1ce64 <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1ceba:	f10d 0007 	add.w	r0, sp, #7
   1cebe:	f7ff f85b 	bl	1bf78 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1cec2:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1cec4:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1cec6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1ceca:	f002 fc01 	bl	1f6d0 <radio_ar_configure>
   1cece:	e7c9      	b.n	1ce64 <isr_tx+0x44>
	LL_ASSERT(node_rx);
   1ced0:	4a07      	ldr	r2, [pc, #28]	; (1cef0 <isr_tx+0xd0>)
   1ced2:	490a      	ldr	r1, [pc, #40]	; (1cefc <isr_tx+0xdc>)
   1ced4:	4808      	ldr	r0, [pc, #32]	; (1cef8 <isr_tx+0xd8>)
   1ced6:	f240 4341 	movw	r3, #1089	; 0x441
   1ceda:	f008 f814 	bl	24f06 <printk>
   1cede:	4040      	eors	r0, r0
   1cee0:	f380 8811 	msr	BASEPRI, r0
   1cee4:	f04f 0003 	mov.w	r0, #3
   1cee8:	df02      	svc	2
   1ceea:	e7ad      	b.n	1ce48 <isr_tx+0x28>
   1ceec:	0001d671 	.word	0x0001d671
   1cef0:	0002cde8 	.word	0x0002cde8
   1cef4:	0002ce3c 	.word	0x0002ce3c
   1cef8:	0002bfdc 	.word	0x0002bfdc
   1cefc:	0002ce34 	.word	0x0002ce34

0001cf00 <is_abort_cb>:
	if (next != curr) {
   1cf00:	4281      	cmp	r1, r0
{
   1cf02:	b508      	push	{r3, lr}
	if (next != curr) {
   1cf04:	d00e      	beq.n	1cf24 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   1cf06:	7a0b      	ldrb	r3, [r1, #8]
   1cf08:	07db      	lsls	r3, r3, #31
   1cf0a:	d402      	bmi.n	1cf12 <is_abort_cb+0x12>
			return -ECANCELED;
   1cf0c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1cf10:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1cf12:	4b13      	ldr	r3, [pc, #76]	; (1cf60 <is_abort_cb+0x60>)
   1cf14:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1cf16:	f7ff ff37 	bl	1cd88 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1cf1a:	2800      	cmp	r0, #0
   1cf1c:	db0f      	blt.n	1cf3e <is_abort_cb+0x3e>
   1cf1e:	f06f 000a 	mvn.w	r0, #10
}
   1cf22:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1cf24:	7b0b      	ldrb	r3, [r1, #12]
   1cf26:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1cf2a:	690b      	ldr	r3, [r1, #16]
   1cf2c:	781b      	ldrb	r3, [r3, #0]
   1cf2e:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1cf32:	2b01      	cmp	r3, #1
   1cf34:	bf14      	ite	ne
   1cf36:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1cf3a:	2000      	moveq	r0, #0
}
   1cf3c:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1cf3e:	4a09      	ldr	r2, [pc, #36]	; (1cf64 <is_abort_cb+0x64>)
   1cf40:	4909      	ldr	r1, [pc, #36]	; (1cf68 <is_abort_cb+0x68>)
   1cf42:	480a      	ldr	r0, [pc, #40]	; (1cf6c <is_abort_cb+0x6c>)
   1cf44:	f240 33fa 	movw	r3, #1018	; 0x3fa
   1cf48:	f007 ffdd 	bl	24f06 <printk>
   1cf4c:	4040      	eors	r0, r0
   1cf4e:	f380 8811 	msr	BASEPRI, r0
   1cf52:	f04f 0003 	mov.w	r0, #3
   1cf56:	df02      	svc	2
   1cf58:	f06f 000a 	mvn.w	r0, #10
}
   1cf5c:	bd08      	pop	{r3, pc}
   1cf5e:	bf00      	nop
   1cf60:	0001d48d 	.word	0x0001d48d
   1cf64:	0002cde8 	.word	0x0002cde8
   1cf68:	0002cd78 	.word	0x0002cd78
   1cf6c:	0002bfdc 	.word	0x0002bfdc

0001cf70 <abort_cb>:
{
   1cf70:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1cf72:	b1d8      	cbz	r0, 1cfac <abort_cb+0x3c>
	err = lll_hfclock_off();
   1cf74:	460c      	mov	r4, r1
   1cf76:	f7ff ff1f 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1cf7a:	2800      	cmp	r0, #0
   1cf7c:	db04      	blt.n	1cf88 <abort_cb+0x18>
	lll_done(param);
   1cf7e:	4620      	mov	r0, r4
}
   1cf80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1cf84:	f7ff bc80 	b.w	1c888 <lll_done>
	LL_ASSERT(err >= 0);
   1cf88:	4a0c      	ldr	r2, [pc, #48]	; (1cfbc <abort_cb+0x4c>)
   1cf8a:	490d      	ldr	r1, [pc, #52]	; (1cfc0 <abort_cb+0x50>)
   1cf8c:	480d      	ldr	r0, [pc, #52]	; (1cfc4 <abort_cb+0x54>)
   1cf8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1cf92:	f007 ffb8 	bl	24f06 <printk>
   1cf96:	4040      	eors	r0, r0
   1cf98:	f380 8811 	msr	BASEPRI, r0
   1cf9c:	f04f 0003 	mov.w	r0, #3
   1cfa0:	df02      	svc	2
	lll_done(param);
   1cfa2:	4620      	mov	r0, r4
}
   1cfa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1cfa8:	f7ff bc6e 	b.w	1c888 <lll_done>
		radio_isr_set(isr_abort, param);
   1cfac:	4806      	ldr	r0, [pc, #24]	; (1cfc8 <abort_cb+0x58>)
   1cfae:	f001 ff59 	bl	1ee64 <radio_isr_set>
}
   1cfb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1cfb6:	f002 b851 	b.w	1f05c <radio_disable>
   1cfba:	bf00      	nop
   1cfbc:	0002cde8 	.word	0x0002cde8
   1cfc0:	0002cd78 	.word	0x0002cd78
   1cfc4:	0002bfdc 	.word	0x0002bfdc
   1cfc8:	0001ce09 	.word	0x0001ce09

0001cfcc <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cfcc:	4b08      	ldr	r3, [pc, #32]	; (1cff0 <lll_adv_init+0x24>)
   1cfce:	2204      	movs	r2, #4
{
   1cfd0:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1cfd2:	1898      	adds	r0, r3, r2
   1cfd4:	2128      	movs	r1, #40	; 0x28
   1cfd6:	f7f3 f825 	bl	10024 <mem_init>
	MFIFO_INIT(pdu_free);
   1cfda:	4b06      	ldr	r3, [pc, #24]	; (1cff4 <lll_adv_init+0x28>)
   1cfdc:	2400      	movs	r4, #0
   1cfde:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1cfe0:	2202      	movs	r2, #2
   1cfe2:	4621      	mov	r1, r4
   1cfe4:	4804      	ldr	r0, [pc, #16]	; (1cff8 <lll_adv_init+0x2c>)
   1cfe6:	f00d f934 	bl	2a252 <z_impl_k_sem_init>
}
   1cfea:	4620      	mov	r0, r4
   1cfec:	bd10      	pop	{r4, pc}
   1cfee:	bf00      	nop
   1cff0:	20002ee8 	.word	0x20002ee8
   1cff4:	20000660 	.word	0x20000660
   1cff8:	20002f8c 	.word	0x20002f8c

0001cffc <lll_adv_reset>:
   1cffc:	4b08      	ldr	r3, [pc, #32]	; (1d020 <lll_adv_reset+0x24>)
   1cffe:	2204      	movs	r2, #4
   1d000:	b510      	push	{r4, lr}
   1d002:	1898      	adds	r0, r3, r2
   1d004:	2128      	movs	r1, #40	; 0x28
   1d006:	f7f3 f80d 	bl	10024 <mem_init>
   1d00a:	4b06      	ldr	r3, [pc, #24]	; (1d024 <lll_adv_reset+0x28>)
   1d00c:	2400      	movs	r4, #0
   1d00e:	805c      	strh	r4, [r3, #2]
   1d010:	2202      	movs	r2, #2
   1d012:	4621      	mov	r1, r4
   1d014:	4804      	ldr	r0, [pc, #16]	; (1d028 <lll_adv_reset+0x2c>)
   1d016:	f00d f91c 	bl	2a252 <z_impl_k_sem_init>
   1d01a:	4620      	mov	r0, r4
   1d01c:	bd10      	pop	{r4, pc}
   1d01e:	bf00      	nop
   1d020:	20002ee8 	.word	0x20002ee8
   1d024:	20000660 	.word	0x20000660
   1d028:	20002f8c 	.word	0x20002f8c

0001d02c <lll_adv_data_init>:
{
   1d02c:	b510      	push	{r4, lr}
   1d02e:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1d030:	4805      	ldr	r0, [pc, #20]	; (1d048 <lll_adv_data_init+0x1c>)
   1d032:	f7f3 f81b 	bl	1006c <mem_acquire>
	if (!p) {
   1d036:	b120      	cbz	r0, 1d042 <lll_adv_data_init+0x16>
   1d038:	4603      	mov	r3, r0
	p->len = 0U;
   1d03a:	2000      	movs	r0, #0
   1d03c:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1d03e:	6063      	str	r3, [r4, #4]
}
   1d040:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1d042:	f06f 000b 	mvn.w	r0, #11
}
   1d046:	bd10      	pop	{r4, pc}
   1d048:	20002ee8 	.word	0x20002ee8

0001d04c <lll_adv_data_reset>:
{
   1d04c:	4603      	mov	r3, r0
	pdu->first = 0U;
   1d04e:	2000      	movs	r0, #0
   1d050:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1d052:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1d054:	6098      	str	r0, [r3, #8]
}
   1d056:	4770      	bx	lr

0001d058 <lll_adv_pdu_alloc_pdu_adv>:
{
   1d058:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1d05a:	4c35      	ldr	r4, [pc, #212]	; (1d130 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1d05c:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1d05e:	78e1      	ldrb	r1, [r4, #3]
   1d060:	7823      	ldrb	r3, [r4, #0]
   1d062:	4291      	cmp	r1, r2
   1d064:	d003      	beq.n	1d06e <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   1d066:	fb02 4303 	mla	r3, r2, r3, r4
   1d06a:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1d06c:	b935      	cbnz	r5, 1d07c <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   1d06e:	4831      	ldr	r0, [pc, #196]	; (1d134 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1d070:	f7f2 fffc 	bl	1006c <mem_acquire>
	if (p) {
   1d074:	4605      	mov	r5, r0
   1d076:	b1a0      	cbz	r0, 1d0a2 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   1d078:	4628      	mov	r0, r5
   1d07a:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   1d07c:	482e      	ldr	r0, [pc, #184]	; (1d138 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1d07e:	2200      	movs	r2, #0
   1d080:	2300      	movs	r3, #0
   1d082:	f005 fa17 	bl	224b4 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1d086:	bb40      	cbnz	r0, 1d0da <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   1d088:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1d08a:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1d08c:	7861      	ldrb	r1, [r4, #1]
   1d08e:	429a      	cmp	r2, r3
   1d090:	d0f2      	beq.n	1d078 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   1d092:	3301      	adds	r3, #1
   1d094:	b2db      	uxtb	r3, r3
		_first = 0U;
   1d096:	4299      	cmp	r1, r3
   1d098:	bf08      	it	eq
   1d09a:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1d09c:	70a3      	strb	r3, [r4, #2]
}
   1d09e:	4628      	mov	r0, r5
   1d0a0:	bd38      	pop	{r3, r4, r5, pc}
   1d0a2:	4825      	ldr	r0, [pc, #148]	; (1d138 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1d0a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d0a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d0ac:	f005 fa02 	bl	224b4 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1d0b0:	2800      	cmp	r0, #0
   1d0b2:	d12e      	bne.n	1d112 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   1d0b4:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1d0b6:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1d0b8:	7822      	ldrb	r2, [r4, #0]
   1d0ba:	7860      	ldrb	r0, [r4, #1]
   1d0bc:	4299      	cmp	r1, r3
   1d0be:	d01a      	beq.n	1d0f6 <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   1d0c0:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1d0c4:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1d0c6:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   1d0c8:	b2db      	uxtb	r3, r3
		_first = 0U;
   1d0ca:	4298      	cmp	r0, r3
   1d0cc:	bf08      	it	eq
   1d0ce:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1d0d0:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   1d0d2:	b182      	cbz	r2, 1d0f6 <lll_adv_pdu_alloc_pdu_adv+0x9e>
   1d0d4:	4615      	mov	r5, r2
}
   1d0d6:	4628      	mov	r0, r5
   1d0d8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   1d0da:	4a18      	ldr	r2, [pc, #96]	; (1d13c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1d0dc:	4918      	ldr	r1, [pc, #96]	; (1d140 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1d0de:	4819      	ldr	r0, [pc, #100]	; (1d144 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1d0e0:	f240 1397 	movw	r3, #407	; 0x197
   1d0e4:	f007 ff0f 	bl	24f06 <printk>
   1d0e8:	4040      	eors	r0, r0
   1d0ea:	f380 8811 	msr	BASEPRI, r0
   1d0ee:	f04f 0003 	mov.w	r0, #3
   1d0f2:	df02      	svc	2
   1d0f4:	e7c8      	b.n	1d088 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   1d0f6:	4a11      	ldr	r2, [pc, #68]	; (1d13c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1d0f8:	4913      	ldr	r1, [pc, #76]	; (1d148 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   1d0fa:	4812      	ldr	r0, [pc, #72]	; (1d144 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1d0fc:	f240 13ad 	movw	r3, #429	; 0x1ad
   1d100:	f007 ff01 	bl	24f06 <printk>
   1d104:	4040      	eors	r0, r0
   1d106:	f380 8811 	msr	BASEPRI, r0
   1d10a:	f04f 0003 	mov.w	r0, #3
   1d10e:	df02      	svc	2
   1d110:	e7b2      	b.n	1d078 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1d112:	4a0a      	ldr	r2, [pc, #40]	; (1d13c <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1d114:	490a      	ldr	r1, [pc, #40]	; (1d140 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1d116:	480b      	ldr	r0, [pc, #44]	; (1d144 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1d118:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1d11c:	f007 fef3 	bl	24f06 <printk>
   1d120:	4040      	eors	r0, r0
   1d122:	f380 8811 	msr	BASEPRI, r0
   1d126:	f04f 0003 	mov.w	r0, #3
   1d12a:	df02      	svc	2
   1d12c:	e7c2      	b.n	1d0b4 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   1d12e:	bf00      	nop
   1d130:	20000660 	.word	0x20000660
   1d134:	20002ee8 	.word	0x20002ee8
   1d138:	20002f8c 	.word	0x20002f8c
   1d13c:	0002cde8 	.word	0x0002cde8
   1d140:	0002c354 	.word	0x0002c354
   1d144:	0002bfdc 	.word	0x0002bfdc
   1d148:	0002ce50 	.word	0x0002ce50

0001d14c <lll_adv_pdu_alloc>:
{
   1d14c:	b510      	push	{r4, lr}
	first = pdu->first;
   1d14e:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1d150:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1d152:	429a      	cmp	r2, r3
   1d154:	d014      	beq.n	1d180 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   1d156:	b2d4      	uxtb	r4, r2
   1d158:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1d15a:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1d15c:	4294      	cmp	r4, r2
   1d15e:	d004      	beq.n	1d16a <lll_adv_pdu_alloc+0x1e>
			last++;
   1d160:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   1d162:	7043      	strb	r3, [r0, #1]
			last++;
   1d164:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   1d166:	2b02      	cmp	r3, #2
   1d168:	d00e      	beq.n	1d188 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   1d16a:	461c      	mov	r4, r3
	*idx = last;
   1d16c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1d170:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1d172:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1d174:	b100      	cbz	r0, 1d178 <lll_adv_pdu_alloc+0x2c>
}
   1d176:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   1d178:	f7ff ff6e 	bl	1d058 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1d17c:	6060      	str	r0, [r4, #4]
}
   1d17e:	bd10      	pop	{r4, pc}
		last++;
   1d180:	3301      	adds	r3, #1
   1d182:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1d184:	2b02      	cmp	r3, #2
   1d186:	d1f0      	bne.n	1d16a <lll_adv_pdu_alloc+0x1e>
{
   1d188:	2400      	movs	r4, #0
			last = 0U;
   1d18a:	4623      	mov	r3, r4
   1d18c:	e7ee      	b.n	1d16c <lll_adv_pdu_alloc+0x20>
   1d18e:	bf00      	nop

0001d190 <lll_adv_pdu_latest_get>:
{
   1d190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d192:	4604      	mov	r4, r0
	first = pdu->first;
   1d194:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1d196:	7840      	ldrb	r0, [r0, #1]
   1d198:	4298      	cmp	r0, r3
   1d19a:	d028      	beq.n	1d1ee <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1d19c:	4a16      	ldr	r2, [pc, #88]	; (1d1f8 <lll_adv_pdu_latest_get+0x68>)
   1d19e:	460e      	mov	r6, r1
   1d1a0:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1d1a2:	f892 c001 	ldrb.w	ip, [r2, #1]
   1d1a6:	b2dd      	uxtb	r5, r3
	last = last + 1;
   1d1a8:	1c4b      	adds	r3, r1, #1
   1d1aa:	b2db      	uxtb	r3, r3
		last = 0U;
   1d1ac:	459c      	cmp	ip, r3
   1d1ae:	bf08      	it	eq
   1d1b0:	2300      	moveq	r3, #0
   1d1b2:	f892 c002 	ldrb.w	ip, [r2, #2]
   1d1b6:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   1d1ba:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   1d1bc:	6878      	ldr	r0, [r7, #4]
   1d1be:	d009      	beq.n	1d1d4 <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1d1c0:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1d1c4:	fb0c 2101 	mla	r1, ip, r1, r2
   1d1c8:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1d1ca:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   1d1cc:	480b      	ldr	r0, [pc, #44]	; (1d1fc <lll_adv_pdu_latest_get+0x6c>)
   1d1ce:	f005 f94b 	bl	22468 <z_impl_k_sem_give>
			p = next;
   1d1d2:	2000      	movs	r0, #0
		first += 1U;
   1d1d4:	1c6b      	adds	r3, r5, #1
   1d1d6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1d1d8:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   1d1da:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   1d1dc:	bf04      	itt	eq
   1d1de:	2000      	moveq	r0, #0
			first = 0U;
   1d1e0:	4603      	moveq	r3, r0
		*is_modified = 1U;
   1d1e2:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   1d1e6:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   1d1e8:	bf18      	it	ne
   1d1ea:	4618      	movne	r0, r3
		*is_modified = 1U;
   1d1ec:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   1d1ee:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1d1f2:	6860      	ldr	r0, [r4, #4]
   1d1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d1f6:	bf00      	nop
   1d1f8:	20000660 	.word	0x20000660
   1d1fc:	20002f8c 	.word	0x20002f8c

0001d200 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1d200:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1d202:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1d204:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1d208:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1d20a:	4604      	mov	r4, r0
   1d20c:	fa93 f0a3 	rbit	r0, r3
   1d210:	fab0 f080 	clz	r0, r0
   1d214:	bf08      	it	eq
   1d216:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1d21a:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1d21c:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1d21e:	d044      	beq.n	1d2aa <chan_prepare.isra.0+0xaa>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1d220:	7a21      	ldrb	r1, [r4, #8]
   1d222:	1e5a      	subs	r2, r3, #1
   1d224:	4013      	ands	r3, r2
   1d226:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   1d22a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1d22e:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   1d230:	f7ff fbac 	bl	1c98c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1d234:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1d236:	f10d 0107 	add.w	r1, sp, #7
   1d23a:	f104 000c 	add.w	r0, r4, #12
   1d23e:	f88d 3007 	strb.w	r3, [sp, #7]
   1d242:	f7ff ffa5 	bl	1d190 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1d246:	4605      	mov	r5, r0
   1d248:	2800      	cmp	r0, #0
   1d24a:	d03f      	beq.n	1d2cc <chan_prepare.isra.0+0xcc>

	radio_pkt_tx_set(pdu);
   1d24c:	4628      	mov	r0, r5
   1d24e:	f001 fee3 	bl	1f018 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1d252:	782b      	ldrb	r3, [r5, #0]
   1d254:	f003 030f 	and.w	r3, r3, #15
   1d258:	2b02      	cmp	r3, #2
   1d25a:	d01e      	beq.n	1d29a <chan_prepare.isra.0+0x9a>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1d25c:	f10d 0107 	add.w	r1, sp, #7
   1d260:	f104 0018 	add.w	r0, r4, #24
   1d264:	f7ff ff94 	bl	1d190 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   1d268:	4606      	mov	r6, r0
   1d26a:	2800      	cmp	r0, #0
   1d26c:	d03c      	beq.n	1d2e8 <chan_prepare.isra.0+0xe8>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1d26e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1d272:	b95b      	cbnz	r3, 1d28c <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1d274:	4621      	mov	r1, r4
   1d276:	4823      	ldr	r0, [pc, #140]	; (1d304 <chan_prepare.isra.0+0x104>)
   1d278:	f001 fdf4 	bl	1ee64 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d27c:	2096      	movs	r0, #150	; 0x96
   1d27e:	f002 f875 	bl	1f36c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1d282:	2000      	movs	r0, #0
   1d284:	f001 ff46 	bl	1f114 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1d288:	b002      	add	sp, #8
   1d28a:	bd70      	pop	{r4, r5, r6, pc}
   1d28c:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1d290:	f8c6 3002 	str.w	r3, [r6, #2]
   1d294:	88eb      	ldrh	r3, [r5, #6]
   1d296:	80f3      	strh	r3, [r6, #6]
   1d298:	e7ec      	b.n	1d274 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   1d29a:	481b      	ldr	r0, [pc, #108]	; (1d308 <chan_prepare.isra.0+0x108>)
   1d29c:	4621      	mov	r1, r4
   1d29e:	f001 fde1 	bl	1ee64 <radio_isr_set>
		radio_switch_complete_and_disable();
   1d2a2:	f001 ffdf 	bl	1f264 <radio_switch_complete_and_disable>
}
   1d2a6:	b002      	add	sp, #8
   1d2a8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   1d2aa:	4a18      	ldr	r2, [pc, #96]	; (1d30c <chan_prepare.isra.0+0x10c>)
   1d2ac:	4918      	ldr	r1, [pc, #96]	; (1d310 <chan_prepare.isra.0+0x110>)
   1d2ae:	4819      	ldr	r0, [pc, #100]	; (1d314 <chan_prepare.isra.0+0x114>)
   1d2b0:	f240 5337 	movw	r3, #1335	; 0x537
   1d2b4:	f007 fe27 	bl	24f06 <printk>
   1d2b8:	4040      	eors	r0, r0
   1d2ba:	f380 8811 	msr	BASEPRI, r0
   1d2be:	f04f 0003 	mov.w	r0, #3
   1d2c2:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1d2c4:	7a23      	ldrb	r3, [r4, #8]
   1d2c6:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1d2ca:	e7a9      	b.n	1d220 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   1d2cc:	4a0f      	ldr	r2, [pc, #60]	; (1d30c <chan_prepare.isra.0+0x10c>)
   1d2ce:	4912      	ldr	r1, [pc, #72]	; (1d318 <chan_prepare.isra.0+0x118>)
   1d2d0:	4810      	ldr	r0, [pc, #64]	; (1d314 <chan_prepare.isra.0+0x114>)
   1d2d2:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   1d2d6:	f007 fe16 	bl	24f06 <printk>
   1d2da:	4040      	eors	r0, r0
   1d2dc:	f380 8811 	msr	BASEPRI, r0
   1d2e0:	f04f 0003 	mov.w	r0, #3
   1d2e4:	df02      	svc	2
   1d2e6:	e7b1      	b.n	1d24c <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   1d2e8:	4a08      	ldr	r2, [pc, #32]	; (1d30c <chan_prepare.isra.0+0x10c>)
   1d2ea:	490c      	ldr	r1, [pc, #48]	; (1d31c <chan_prepare.isra.0+0x11c>)
   1d2ec:	4809      	ldr	r0, [pc, #36]	; (1d314 <chan_prepare.isra.0+0x114>)
   1d2ee:	f240 534a 	movw	r3, #1354	; 0x54a
   1d2f2:	f007 fe08 	bl	24f06 <printk>
   1d2f6:	4040      	eors	r0, r0
   1d2f8:	f380 8811 	msr	BASEPRI, r0
   1d2fc:	f04f 0003 	mov.w	r0, #3
   1d300:	df02      	svc	2
   1d302:	e7b4      	b.n	1d26e <chan_prepare.isra.0+0x6e>
   1d304:	0001ce21 	.word	0x0001ce21
   1d308:	0001d321 	.word	0x0001d321
   1d30c:	0002cde8 	.word	0x0002cde8
   1d310:	0002ca2c 	.word	0x0002ca2c
   1d314:	0002bfdc 	.word	0x0002bfdc
   1d318:	0002ce54 	.word	0x0002ce54
   1d31c:	0002ce58 	.word	0x0002ce58

0001d320 <isr_done>:
{
   1d320:	b510      	push	{r4, lr}
   1d322:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1d324:	f7ff fb8a 	bl	1ca3c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1d328:	7a23      	ldrb	r3, [r4, #8]
   1d32a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1d32e:	2a01      	cmp	r2, #1
   1d330:	d105      	bne.n	1d33e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1d332:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1d336:	f362 1306 	bfi	r3, r2, #4, #3
   1d33a:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1d33c:	b2db      	uxtb	r3, r3
   1d33e:	f013 0f70 	tst.w	r3, #112	; 0x70
   1d342:	d005      	beq.n	1d350 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   1d344:	6863      	ldr	r3, [r4, #4]
   1d346:	b153      	cbz	r3, 1d35e <isr_done+0x3e>
   1d348:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d34c:	079b      	lsls	r3, r3, #30
   1d34e:	d506      	bpl.n	1d35e <isr_done+0x3e>
	radio_filter_disable();
   1d350:	f001 ffda 	bl	1f308 <radio_filter_disable>
	lll_isr_cleanup(param);
   1d354:	4620      	mov	r0, r4
}
   1d356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d35a:	f7ff bb7d 	b.w	1ca58 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1d35e:	4620      	mov	r0, r4
   1d360:	f7ff ff4e 	bl	1d200 <chan_prepare.isra.0>
		radio_tx_enable();
   1d364:	f001 fe74 	bl	1f050 <radio_tx_enable>
}
   1d368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1d36c:	f002 b90a 	b.w	1f584 <radio_tmr_end_capture>

0001d370 <prepare_cb>:
{
   1d370:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1d372:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1d374:	6863      	ldr	r3, [r4, #4]
{
   1d376:	b083      	sub	sp, #12
   1d378:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1d37a:	2b00      	cmp	r3, #0
   1d37c:	d16d      	bne.n	1d45a <prepare_cb+0xea>
	radio_reset();
   1d37e:	f001 fdb3 	bl	1eee8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d382:	2000      	movs	r0, #0
   1d384:	f001 fde4 	bl	1ef50 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d388:	2100      	movs	r1, #0
   1d38a:	4608      	mov	r0, r1
   1d38c:	f001 fdd0 	bl	1ef30 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1d390:	2200      	movs	r2, #0
   1d392:	2125      	movs	r1, #37	; 0x25
   1d394:	2008      	movs	r0, #8
   1d396:	f001 fe11 	bl	1efbc <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d39a:	4b35      	ldr	r3, [pc, #212]	; (1d470 <prepare_cb+0x100>)
   1d39c:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1d39e:	a801      	add	r0, sp, #4
   1d3a0:	f001 fdf4 	bl	1ef8c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1d3a4:	4933      	ldr	r1, [pc, #204]	; (1d474 <prepare_cb+0x104>)
   1d3a6:	f240 605b 	movw	r0, #1627	; 0x65b
   1d3aa:	f001 fe95 	bl	1f0d8 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1d3ae:	7a23      	ldrb	r3, [r4, #8]
   1d3b0:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1d3b4:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1d3b8:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1d3ba:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1d3bc:	f7ff ff20 	bl	1d200 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1d3c0:	f7fe ff60 	bl	1c284 <ull_filter_lll_rl_enabled>
   1d3c4:	bb98      	cbnz	r0, 1d42e <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1d3c6:	7a63      	ldrb	r3, [r4, #9]
   1d3c8:	079b      	lsls	r3, r3, #30
   1d3ca:	d127      	bne.n	1d41c <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   1d3cc:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1d3ce:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1d3d0:	4638      	mov	r0, r7
   1d3d2:	f7ff fabd 	bl	1c950 <lll_event_offset_get>
   1d3d6:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1d3d8:	686a      	ldr	r2, [r5, #4]
   1d3da:	f106 0109 	add.w	r1, r6, #9
   1d3de:	2001      	movs	r0, #1
   1d3e0:	f001 ffd0 	bl	1f384 <radio_tmr_start>
	radio_tmr_end_capture();
   1d3e4:	f002 f8ce 	bl	1f584 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1d3e8:	4620      	mov	r0, r4
   1d3ea:	f7f7 fee1 	bl	151b0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1d3ee:	1c81      	adds	r1, r0, #2
   1d3f0:	4632      	mov	r2, r6
   1d3f2:	b2c9      	uxtb	r1, r1
   1d3f4:	4638      	mov	r0, r7
   1d3f6:	f7ff fab9 	bl	1c96c <lll_preempt_calc>
   1d3fa:	b930      	cbnz	r0, 1d40a <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   1d3fc:	4620      	mov	r0, r4
   1d3fe:	f7ff fa41 	bl	1c884 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d402:	b9d0      	cbnz	r0, 1d43a <prepare_cb+0xca>
}
   1d404:	2000      	movs	r0, #0
   1d406:	b003      	add	sp, #12
   1d408:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1d40a:	481b      	ldr	r0, [pc, #108]	; (1d478 <prepare_cb+0x108>)
   1d40c:	4621      	mov	r1, r4
   1d40e:	f001 fd29 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1d412:	f001 fe23 	bl	1f05c <radio_disable>
}
   1d416:	2000      	movs	r0, #0
   1d418:	b003      	add	sp, #12
   1d41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1d41c:	2001      	movs	r0, #1
   1d41e:	f7fe faa1 	bl	1b964 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1d422:	7841      	ldrb	r1, [r0, #1]
   1d424:	1c82      	adds	r2, r0, #2
   1d426:	7800      	ldrb	r0, [r0, #0]
   1d428:	f001 ff4e 	bl	1f2c8 <radio_filter_configure>
   1d42c:	e7ce      	b.n	1d3cc <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1d42e:	7a60      	ldrb	r0, [r4, #9]
   1d430:	f010 0003 	ands.w	r0, r0, #3
   1d434:	bf18      	it	ne
   1d436:	2001      	movne	r0, #1
   1d438:	e7f1      	b.n	1d41e <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1d43a:	4a10      	ldr	r2, [pc, #64]	; (1d47c <prepare_cb+0x10c>)
   1d43c:	4910      	ldr	r1, [pc, #64]	; (1d480 <prepare_cb+0x110>)
   1d43e:	4811      	ldr	r0, [pc, #68]	; (1d484 <prepare_cb+0x114>)
   1d440:	f240 33d1 	movw	r3, #977	; 0x3d1
   1d444:	f007 fd5f 	bl	24f06 <printk>
   1d448:	4040      	eors	r0, r0
   1d44a:	f380 8811 	msr	BASEPRI, r0
   1d44e:	f04f 0003 	mov.w	r0, #3
   1d452:	df02      	svc	2
}
   1d454:	2000      	movs	r0, #0
   1d456:	b003      	add	sp, #12
   1d458:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1d45a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1d45e:	079a      	lsls	r2, r3, #30
   1d460:	d08d      	beq.n	1d37e <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   1d462:	4809      	ldr	r0, [pc, #36]	; (1d488 <prepare_cb+0x118>)
   1d464:	4621      	mov	r1, r4
   1d466:	f001 fcfd 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1d46a:	f001 fdf7 	bl	1f05c <radio_disable>
		return 0;
   1d46e:	e7c9      	b.n	1d404 <prepare_cb+0x94>
   1d470:	8e89bed6 	.word	0x8e89bed6
   1d474:	00555555 	.word	0x00555555
   1d478:	0001ce09 	.word	0x0001ce09
   1d47c:	0002cde8 	.word	0x0002cde8
   1d480:	0002c454 	.word	0x0002c454
   1d484:	0002bfdc 	.word	0x0002bfdc
   1d488:	0001cae9 	.word	0x0001cae9

0001d48c <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1d48c:	68c3      	ldr	r3, [r0, #12]
{
   1d48e:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1d490:	681e      	ldr	r6, [r3, #0]
{
   1d492:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d494:	f7f4 f9b4 	bl	11800 <ticker_ticks_now_get>
   1d498:	4605      	mov	r5, r0
   1d49a:	4630      	mov	r0, r6
   1d49c:	f7ff fa58 	bl	1c950 <lll_event_offset_get>
	p->remainder = 0;
   1d4a0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1d4a2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1d4a4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1d4a8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1d4aa:	4620      	mov	r0, r4
}
   1d4ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1d4b0:	f7ff bf5e 	b.w	1d370 <prepare_cb>

0001d4b4 <lll_adv_prepare>:
{
   1d4b4:	b510      	push	{r4, lr}
   1d4b6:	b082      	sub	sp, #8
   1d4b8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1d4ba:	f7ff fc65 	bl	1cd88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1d4be:	2800      	cmp	r0, #0
   1d4c0:	db1a      	blt.n	1d4f8 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1d4c2:	4a14      	ldr	r2, [pc, #80]	; (1d514 <lll_adv_prepare+0x60>)
   1d4c4:	4914      	ldr	r1, [pc, #80]	; (1d518 <lll_adv_prepare+0x64>)
   1d4c6:	4815      	ldr	r0, [pc, #84]	; (1d51c <lll_adv_prepare+0x68>)
   1d4c8:	9400      	str	r4, [sp, #0]
   1d4ca:	2300      	movs	r3, #0
   1d4cc:	f7f7 fa02 	bl	148d4 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d4d0:	b108      	cbz	r0, 1d4d6 <lll_adv_prepare+0x22>
   1d4d2:	3077      	adds	r0, #119	; 0x77
   1d4d4:	d101      	bne.n	1d4da <lll_adv_prepare+0x26>
}
   1d4d6:	b002      	add	sp, #8
   1d4d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1d4da:	4a11      	ldr	r2, [pc, #68]	; (1d520 <lll_adv_prepare+0x6c>)
   1d4dc:	4911      	ldr	r1, [pc, #68]	; (1d524 <lll_adv_prepare+0x70>)
   1d4de:	4812      	ldr	r0, [pc, #72]	; (1d528 <lll_adv_prepare+0x74>)
   1d4e0:	f240 239d 	movw	r3, #669	; 0x29d
   1d4e4:	f007 fd0f 	bl	24f06 <printk>
   1d4e8:	4040      	eors	r0, r0
   1d4ea:	f380 8811 	msr	BASEPRI, r0
   1d4ee:	f04f 0003 	mov.w	r0, #3
   1d4f2:	df02      	svc	2
}
   1d4f4:	b002      	add	sp, #8
   1d4f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1d4f8:	4a09      	ldr	r2, [pc, #36]	; (1d520 <lll_adv_prepare+0x6c>)
   1d4fa:	490c      	ldr	r1, [pc, #48]	; (1d52c <lll_adv_prepare+0x78>)
   1d4fc:	480a      	ldr	r0, [pc, #40]	; (1d528 <lll_adv_prepare+0x74>)
   1d4fe:	f240 239a 	movw	r3, #666	; 0x29a
   1d502:	f007 fd00 	bl	24f06 <printk>
   1d506:	4040      	eors	r0, r0
   1d508:	f380 8811 	msr	BASEPRI, r0
   1d50c:	f04f 0003 	mov.w	r0, #3
   1d510:	df02      	svc	2
   1d512:	e7d6      	b.n	1d4c2 <lll_adv_prepare+0xe>
   1d514:	0001d371 	.word	0x0001d371
   1d518:	0001cf71 	.word	0x0001cf71
   1d51c:	0001cf01 	.word	0x0001cf01
   1d520:	0002cde8 	.word	0x0002cde8
   1d524:	0002ce64 	.word	0x0002ce64
   1d528:	0002bfdc 	.word	0x0002bfdc
   1d52c:	0002cd78 	.word	0x0002cd78

0001d530 <lll_adv_scan_req_check>:
{
   1d530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1d534:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   1d538:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d53c:	f01c 0f01 	tst.w	ip, #1
{
   1d540:	460f      	mov	r7, r1
   1d542:	4616      	mov	r6, r2
   1d544:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d546:	d009      	beq.n	1d55c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1d548:	f1b8 0f00 	cmp.w	r8, #0
   1d54c:	d016      	beq.n	1d57c <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1d54e:	783b      	ldrb	r3, [r7, #0]
   1d550:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1d554:	d019      	beq.n	1d58a <lll_adv_scan_req_check+0x5a>
{
   1d556:	2000      	movs	r0, #0
}
   1d558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1d55c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1d55e:	f811 0b02 	ldrb.w	r0, [r1], #2
   1d562:	9a07      	ldr	r2, [sp, #28]
   1d564:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d568:	f7fe fe30 	bl	1c1cc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1d56c:	2800      	cmp	r0, #0
   1d56e:	d1ee      	bne.n	1d54e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1d570:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   1d572:	07db      	lsls	r3, r3, #31
   1d574:	d5ef      	bpl.n	1d556 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1d576:	f1b8 0f00 	cmp.w	r8, #0
   1d57a:	d1e8      	bne.n	1d54e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d57c:	9b07      	ldr	r3, [sp, #28]
   1d57e:	7818      	ldrb	r0, [r3, #0]
   1d580:	f7fe fdc0 	bl	1c104 <ull_filter_lll_irk_in_fal>
   1d584:	2800      	cmp	r0, #0
   1d586:	d1e2      	bne.n	1d54e <lll_adv_scan_req_check+0x1e>
   1d588:	e7e5      	b.n	1d556 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1d58a:	2206      	movs	r2, #6
   1d58c:	f107 0108 	add.w	r1, r7, #8
   1d590:	4628      	mov	r0, r5
   1d592:	f00d fa52 	bl	2aa3a <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1d596:	fab0 f080 	clz	r0, r0
   1d59a:	0940      	lsrs	r0, r0, #5
}
   1d59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d5a0 <lll_adv_connect_ind_check>:
{
   1d5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d5a4:	461f      	mov	r7, r3
	if (tgt_addr) {
   1d5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1d5a8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1d5ac:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1d5b0:	4605      	mov	r5, r0
   1d5b2:	460c      	mov	r4, r1
   1d5b4:	4690      	mov	r8, r2
	if (tgt_addr) {
   1d5b6:	b9fb      	cbnz	r3, 1d5f8 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   1d5b8:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d5ba:	079a      	lsls	r2, r3, #30
   1d5bc:	d507      	bpl.n	1d5ce <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1d5be:	b1a6      	cbz	r6, 1d5ea <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1d5c0:	7823      	ldrb	r3, [r4, #0]
   1d5c2:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1d5c6:	d03a      	beq.n	1d63e <lll_adv_connect_ind_check+0x9e>
   1d5c8:	2000      	movs	r0, #0
}
   1d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1d5ce:	f811 0b02 	ldrb.w	r0, [r1], #2
   1d5d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d5d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d5d8:	f7fe fdf8 	bl	1c1cc <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   1d5dc:	2800      	cmp	r0, #0
   1d5de:	d1ef      	bne.n	1d5c0 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1d5e0:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   1d5e2:	079b      	lsls	r3, r3, #30
   1d5e4:	d5f0      	bpl.n	1d5c8 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1d5e6:	2e00      	cmp	r6, #0
   1d5e8:	d1ea      	bne.n	1d5c0 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d5ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d5ec:	7818      	ldrb	r0, [r3, #0]
   1d5ee:	f7fe fd89 	bl	1c104 <ull_filter_lll_irk_in_fal>
   1d5f2:	2800      	cmp	r0, #0
   1d5f4:	d1e4      	bne.n	1d5c0 <lll_adv_connect_ind_check+0x20>
   1d5f6:	e7e7      	b.n	1d5c8 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1d5f8:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1d5fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1d5fc:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1d600:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1d604:	4651      	mov	r1, sl
   1d606:	f7fe fde1 	bl	1c1cc <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1d60a:	2800      	cmp	r0, #0
   1d60c:	d0dc      	beq.n	1d5c8 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1d60e:	7823      	ldrb	r3, [r4, #0]
   1d610:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1d614:	d1d8      	bne.n	1d5c8 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1d616:	4638      	mov	r0, r7
   1d618:	2206      	movs	r2, #6
   1d61a:	f104 0108 	add.w	r1, r4, #8
   1d61e:	f00d fa0c 	bl	2aa3a <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1d622:	2800      	cmp	r0, #0
   1d624:	d1d0      	bne.n	1d5c8 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1d626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d628:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1d62a:	28ff      	cmp	r0, #255	; 0xff
   1d62c:	d011      	beq.n	1d652 <lll_adv_connect_ind_check+0xb2>
   1d62e:	7aab      	ldrb	r3, [r5, #10]
   1d630:	2bff      	cmp	r3, #255	; 0xff
   1d632:	d00e      	beq.n	1d652 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1d634:	1ac0      	subs	r0, r0, r3
   1d636:	fab0 f080 	clz	r0, r0
   1d63a:	0940      	lsrs	r0, r0, #5
   1d63c:	e7c5      	b.n	1d5ca <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1d63e:	2206      	movs	r2, #6
   1d640:	f104 0108 	add.w	r1, r4, #8
   1d644:	4638      	mov	r0, r7
   1d646:	f00d f9f8 	bl	2aa3a <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1d64a:	fab0 f080 	clz	r0, r0
   1d64e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1d650:	e7bb      	b.n	1d5ca <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1d652:	7823      	ldrb	r3, [r4, #0]
   1d654:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1d658:	454b      	cmp	r3, r9
   1d65a:	d1b5      	bne.n	1d5c8 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1d65c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1d65e:	2206      	movs	r2, #6
   1d660:	4651      	mov	r1, sl
   1d662:	f00d f9ea 	bl	2aa3a <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1d666:	fab0 f080 	clz	r0, r0
   1d66a:	0940      	lsrs	r0, r0, #5
   1d66c:	e7ad      	b.n	1d5ca <lll_adv_connect_ind_check+0x2a>
   1d66e:	bf00      	nop

0001d670 <isr_rx>:
{
   1d670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d674:	b08b      	sub	sp, #44	; 0x2c
   1d676:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1d678:	f001 fd1a 	bl	1f0b0 <radio_is_done>
	if (trx_done) {
   1d67c:	b2c0      	uxtb	r0, r0
   1d67e:	b950      	cbnz	r0, 1d696 <isr_rx+0x26>
	lll_isr_status_reset();
   1d680:	f7ff f9dc 	bl	1ca3c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1d684:	487c      	ldr	r0, [pc, #496]	; (1d878 <isr_rx+0x208>)
   1d686:	4621      	mov	r1, r4
   1d688:	f001 fbec 	bl	1ee64 <radio_isr_set>
}
   1d68c:	b00b      	add	sp, #44	; 0x2c
   1d68e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1d692:	f001 bce3 	b.w	1f05c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1d696:	f001 fd2b 	bl	1f0f0 <radio_crc_is_valid>
   1d69a:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1d69c:	f001 fe46 	bl	1f32c <radio_filter_has_match>
   1d6a0:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   1d6a2:	f001 fe4d 	bl	1f340 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1d6a6:	f002 f863 	bl	1f770 <radio_ar_has_match>
   1d6aa:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1d6ac:	f002 f844 	bl	1f738 <radio_ar_match_get>
	if (crc_ok) {
   1d6b0:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1d6b2:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1d6b4:	f001 fdfe 	bl	1f2b4 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1d6b8:	f7ff f9c0 	bl	1ca3c <lll_isr_status_reset>
	if (crc_ok) {
   1d6bc:	2d00      	cmp	r5, #0
   1d6be:	d0e1      	beq.n	1d684 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d6c0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1d6c4:	d17a      	bne.n	1d7bc <isr_rx+0x14c>
   1d6c6:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d6c8:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d6ca:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d6ce:	f7f6 fdc5 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d6d2:	4605      	mov	r5, r0
   1d6d4:	2800      	cmp	r0, #0
   1d6d6:	f000 80a2 	beq.w	1d81e <isr_rx+0x1ae>
   1d6da:	7b23      	ldrb	r3, [r4, #12]
   1d6dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   1d6e0:	f105 011c 	add.w	r1, r5, #28
   1d6e4:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   1d6e6:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   1d6e8:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   1d6ec:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1d6f0:	f000 0c0f 	and.w	ip, r0, #15
   1d6f4:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1d6f8:	bf08      	it	eq
   1d6fa:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   1d6fe:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1d702:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d706:	7f28      	ldrb	r0, [r5, #28]
   1d708:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   1d70c:	bf18      	it	ne
   1d70e:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d712:	2803      	cmp	r0, #3
   1d714:	d05a      	beq.n	1d7cc <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1d716:	2805      	cmp	r0, #5
   1d718:	d1b4      	bne.n	1d684 <isr_rx+0x14>
   1d71a:	7f68      	ldrb	r0, [r5, #29]
   1d71c:	2822      	cmp	r0, #34	; 0x22
   1d71e:	d1b1      	bne.n	1d684 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1d720:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1d722:	2800      	cmp	r0, #0
   1d724:	d0ae      	beq.n	1d684 <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1d726:	f890 0020 	ldrb.w	r0, [r0, #32]
   1d72a:	0780      	lsls	r0, r0, #30
   1d72c:	d4aa      	bmi.n	1d684 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1d72e:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1d732:	9003      	str	r0, [sp, #12]
   1d734:	e9cd 8901 	strd	r8, r9, [sp, #4]
   1d738:	9700      	str	r7, [sp, #0]
   1d73a:	4620      	mov	r0, r4
   1d73c:	f7ff ff30 	bl	1d5a0 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   1d740:	2800      	cmp	r0, #0
   1d742:	d09f      	beq.n	1d684 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1d744:	2004      	movs	r0, #4
   1d746:	f7f6 fd89 	bl	1425c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1d74a:	2800      	cmp	r0, #0
   1d74c:	d09a      	beq.n	1d684 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1d74e:	484b      	ldr	r0, [pc, #300]	; (1d87c <isr_rx+0x20c>)
   1d750:	4621      	mov	r1, r4
   1d752:	f001 fb87 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1d756:	f001 fc81 	bl	1f05c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1d75a:	f001 fc9f 	bl	1f09c <radio_is_ready>
   1d75e:	2800      	cmp	r0, #0
   1d760:	d14f      	bne.n	1d802 <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   1d762:	6862      	ldr	r2, [r4, #4]
   1d764:	f892 3020 	ldrb.w	r3, [r2, #32]
   1d768:	f043 0301 	orr.w	r3, r3, #1
   1d76c:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1d770:	f7f6 fd92 	bl	14298 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1d774:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   1d776:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1d77a:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   1d77c:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   1d77e:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   1d780:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   1d782:	f001 feb3 	bl	1f4ec <radio_tmr_start_get>
   1d786:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1d788:	f001 ff04 	bl	1f594 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1d78c:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1d78e:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   1d790:	4608      	mov	r0, r1
   1d792:	f001 fc51 	bl	1f038 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1d796:	1a24      	subs	r4, r4, r0
   1d798:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1d79a:	b1ae      	cbz	r6, 1d7c8 <isr_rx+0x158>
   1d79c:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1d7a0:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   1d7a2:	f7f6 fd79 	bl	14298 <ull_pdu_rx_alloc>
   1d7a6:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1d7a8:	4629      	mov	r1, r5
   1d7aa:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1d7ac:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1d7ae:	f7f6 fd89 	bl	142c4 <ull_rx_put>
		ull_rx_sched();
   1d7b2:	f7f6 fd97 	bl	142e4 <ull_rx_sched>
}
   1d7b6:	b00b      	add	sp, #44	; 0x2c
   1d7b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1d7bc:	fa5f f088 	uxtb.w	r0, r8
   1d7c0:	f7fe fc4e 	bl	1c060 <ull_filter_lll_rl_irk_idx>
   1d7c4:	4603      	mov	r3, r0
   1d7c6:	e77f      	b.n	1d6c8 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1d7c8:	23ff      	movs	r3, #255	; 0xff
   1d7ca:	e7e9      	b.n	1d7a0 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1d7cc:	7f68      	ldrb	r0, [r5, #29]
   1d7ce:	280c      	cmp	r0, #12
   1d7d0:	f47f af58 	bne.w	1d684 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1d7d4:	f1b8 0f00 	cmp.w	r8, #0
   1d7d8:	f47f af54 	bne.w	1d684 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1d7dc:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1d7e0:	9001      	str	r0, [sp, #4]
   1d7e2:	f8cd 9000 	str.w	r9, [sp]
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1d7ec:	9105      	str	r1, [sp, #20]
   1d7ee:	f7ff fe9f 	bl	1d530 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1d7f2:	bb10      	cbnz	r0, 1d83a <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1d7f4:	7f28      	ldrb	r0, [r5, #28]
   1d7f6:	9b07      	ldr	r3, [sp, #28]
   1d7f8:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   1d7fc:	f000 000f 	and.w	r0, r0, #15
   1d800:	e789      	b.n	1d716 <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   1d802:	4a1f      	ldr	r2, [pc, #124]	; (1d880 <isr_rx+0x210>)
   1d804:	491f      	ldr	r1, [pc, #124]	; (1d884 <isr_rx+0x214>)
   1d806:	4820      	ldr	r0, [pc, #128]	; (1d888 <isr_rx+0x218>)
   1d808:	f240 53da 	movw	r3, #1498	; 0x5da
   1d80c:	f007 fb7b 	bl	24f06 <printk>
   1d810:	4040      	eors	r0, r0
   1d812:	f380 8811 	msr	BASEPRI, r0
   1d816:	f04f 0003 	mov.w	r0, #3
   1d81a:	df02      	svc	2
   1d81c:	e7a1      	b.n	1d762 <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   1d81e:	4a18      	ldr	r2, [pc, #96]	; (1d880 <isr_rx+0x210>)
   1d820:	491a      	ldr	r1, [pc, #104]	; (1d88c <isr_rx+0x21c>)
   1d822:	4819      	ldr	r0, [pc, #100]	; (1d888 <isr_rx+0x218>)
   1d824:	f240 537a 	movw	r3, #1402	; 0x57a
   1d828:	f007 fb6d 	bl	24f06 <printk>
   1d82c:	4040      	eors	r0, r0
   1d82e:	f380 8811 	msr	BASEPRI, r0
   1d832:	f04f 0003 	mov.w	r0, #3
   1d836:	df02      	svc	2
   1d838:	e74f      	b.n	1d6da <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   1d83a:	4621      	mov	r1, r4
   1d83c:	480e      	ldr	r0, [pc, #56]	; (1d878 <isr_rx+0x208>)
   1d83e:	f001 fb11 	bl	1ee64 <radio_isr_set>
		radio_switch_complete_and_disable();
   1d842:	f001 fd0f 	bl	1f264 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1d846:	7e23      	ldrb	r3, [r4, #24]
   1d848:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1d84c:	69e0      	ldr	r0, [r4, #28]
   1d84e:	f001 fbe3 	bl	1f018 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1d852:	f001 fc23 	bl	1f09c <radio_is_ready>
   1d856:	2800      	cmp	r0, #0
   1d858:	d0ad      	beq.n	1d7b6 <isr_rx+0x146>
   1d85a:	4a09      	ldr	r2, [pc, #36]	; (1d880 <isr_rx+0x210>)
   1d85c:	4909      	ldr	r1, [pc, #36]	; (1d884 <isr_rx+0x214>)
   1d85e:	480a      	ldr	r0, [pc, #40]	; (1d888 <isr_rx+0x218>)
   1d860:	f240 5393 	movw	r3, #1427	; 0x593
   1d864:	f007 fb4f 	bl	24f06 <printk>
   1d868:	4040      	eors	r0, r0
   1d86a:	f380 8811 	msr	BASEPRI, r0
   1d86e:	f04f 0003 	mov.w	r0, #3
   1d872:	df02      	svc	2
		if (!err) {
   1d874:	e79f      	b.n	1d7b6 <isr_rx+0x146>
   1d876:	bf00      	nop
   1d878:	0001d321 	.word	0x0001d321
   1d87c:	0001ce09 	.word	0x0001ce09
   1d880:	0002cde8 	.word	0x0002cde8
   1d884:	0002ce3c 	.word	0x0002ce3c
   1d888:	0002bfdc 	.word	0x0002bfdc
   1d88c:	0002ce34 	.word	0x0002ce34

0001d890 <common_prepare_cb>:
{
   1d890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1d894:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1d896:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1d89a:	2b00      	cmp	r3, #0
{
   1d89c:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1d89e:	f2c0 810e 	blt.w	1dabe <common_prepare_cb+0x22e>
   1d8a2:	6863      	ldr	r3, [r4, #4]
   1d8a4:	4605      	mov	r5, r0
   1d8a6:	460f      	mov	r7, r1
   1d8a8:	2b00      	cmp	r3, #0
   1d8aa:	f040 80fd 	bne.w	1daa8 <common_prepare_cb+0x218>
	lll->state = 0U;
   1d8ae:	7da3      	ldrb	r3, [r4, #22]
   1d8b0:	f36f 0300 	bfc	r3, #0, #1
   1d8b4:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1d8b6:	f001 fb17 	bl	1eee8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1d8ba:	2000      	movs	r0, #0
   1d8bc:	f001 fb48 	bl	1ef50 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1d8c0:	2100      	movs	r1, #0
   1d8c2:	4608      	mov	r0, r1
   1d8c4:	f001 fb34 	bl	1ef30 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1d8c8:	2200      	movs	r2, #0
   1d8ca:	2125      	movs	r1, #37	; 0x25
   1d8cc:	2008      	movs	r0, #8
   1d8ce:	f001 fb75 	bl	1efbc <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1d8d2:	2001      	movs	r0, #1
   1d8d4:	f7f6 fcc2 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1d8d8:	4606      	mov	r6, r0
   1d8da:	2800      	cmp	r0, #0
   1d8dc:	f000 80d6 	beq.w	1da8c <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1d8e0:	f106 001c 	add.w	r0, r6, #28
   1d8e4:	f001 fb92 	bl	1f00c <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1d8e8:	4b7a      	ldr	r3, [pc, #488]	; (1dad4 <common_prepare_cb+0x244>)
   1d8ea:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1d8ec:	a80b      	add	r0, sp, #44	; 0x2c
   1d8ee:	f001 fb4d 	bl	1ef8c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1d8f2:	4979      	ldr	r1, [pc, #484]	; (1dad8 <common_prepare_cb+0x248>)
   1d8f4:	f240 605b 	movw	r0, #1627	; 0x65b
   1d8f8:	f001 fbee 	bl	1f0d8 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1d8fc:	7da0      	ldrb	r0, [r4, #22]
   1d8fe:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1d902:	3025      	adds	r0, #37	; 0x25
   1d904:	f7ff f842 	bl	1c98c <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1d908:	4874      	ldr	r0, [pc, #464]	; (1dadc <common_prepare_cb+0x24c>)
   1d90a:	4621      	mov	r1, r4
   1d90c:	f001 faaa 	bl	1ee64 <radio_isr_set>
	} else if (lll->type ||
   1d910:	7da3      	ldrb	r3, [r4, #22]
   1d912:	069b      	lsls	r3, r3, #26
   1d914:	d403      	bmi.n	1d91e <common_prepare_cb+0x8e>
		   lll->conn) {
   1d916:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1d918:	2b00      	cmp	r3, #0
   1d91a:	f000 8091 	beq.w	1da40 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1d91e:	2096      	movs	r0, #150	; 0x96
   1d920:	f001 fd24 	bl	1f36c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1d924:	2300      	movs	r3, #0
   1d926:	461a      	mov	r2, r3
   1d928:	4619      	mov	r1, r3
   1d92a:	4618      	mov	r0, r3
   1d92c:	f001 fc3a 	bl	1f1a4 <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1d930:	f7fe fca8 	bl	1c284 <ull_filter_lll_rl_enabled>
   1d934:	2800      	cmp	r0, #0
   1d936:	d135      	bne.n	1d9a4 <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1d938:	7da3      	ldrb	r3, [r4, #22]
   1d93a:	f013 0f18 	tst.w	r3, #24
   1d93e:	d152      	bne.n	1d9e6 <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1d940:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1d944:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1d946:	4640      	mov	r0, r8
   1d948:	f7ff f802 	bl	1c950 <lll_event_offset_get>
   1d94c:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1d94e:	686a      	ldr	r2, [r5, #4]
   1d950:	f106 0109 	add.w	r1, r6, #9
   1d954:	2000      	movs	r0, #0
   1d956:	f001 fd15 	bl	1f384 <radio_tmr_start>
	radio_tmr_end_capture();
   1d95a:	f001 fe13 	bl	1f584 <radio_tmr_end_capture>
	radio_rssi_measure();
   1d95e:	f001 fc91 	bl	1f284 <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1d962:	4620      	mov	r0, r4
   1d964:	f7f7 fe3e 	bl	155e4 <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1d968:	1d01      	adds	r1, r0, #4
   1d96a:	b2c9      	uxtb	r1, r1
   1d96c:	4640      	mov	r0, r8
   1d96e:	4632      	mov	r2, r6
   1d970:	f7fe fffc 	bl	1c96c <lll_preempt_calc>
   1d974:	bb68      	cbnz	r0, 1d9d2 <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1d976:	b917      	cbnz	r7, 1d97e <common_prepare_cb+0xee>
   1d978:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d97a:	2b00      	cmp	r3, #0
   1d97c:	d163      	bne.n	1da46 <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1d97e:	6863      	ldr	r3, [r4, #4]
   1d980:	b143      	cbz	r3, 1d994 <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1d982:	4b57      	ldr	r3, [pc, #348]	; (1dae0 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d984:	2201      	movs	r2, #1
   1d986:	2102      	movs	r1, #2
   1d988:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1d98a:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1d98c:	f7f2 fc42 	bl	10214 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1d990:	2800      	cmp	r0, #0
   1d992:	d142      	bne.n	1da1a <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1d994:	4620      	mov	r0, r4
   1d996:	f7fe ff75 	bl	1c884 <lll_prepare_done>
		LL_ASSERT(!ret);
   1d99a:	bb68      	cbnz	r0, 1d9f8 <common_prepare_cb+0x168>
}
   1d99c:	2000      	movs	r0, #0
   1d99e:	b00c      	add	sp, #48	; 0x30
   1d9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1d9a4:	7da0      	ldrb	r0, [r4, #22]
   1d9a6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1d9aa:	f7fd ffdb 	bl	1b964 <ull_filter_lll_get>
   1d9ae:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d9b0:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1d9b4:	f7fe fae0 	bl	1bf78 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1d9b8:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1d9ba:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1d9bc:	1cb2      	adds	r2, r6, #2
   1d9be:	7830      	ldrb	r0, [r6, #0]
   1d9c0:	f001 fc82 	bl	1f2c8 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1d9c4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1d9c8:	2200      	movs	r2, #0
   1d9ca:	4641      	mov	r1, r8
   1d9cc:	f001 fe80 	bl	1f6d0 <radio_ar_configure>
   1d9d0:	e7b6      	b.n	1d940 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1d9d2:	4844      	ldr	r0, [pc, #272]	; (1dae4 <common_prepare_cb+0x254>)
   1d9d4:	4621      	mov	r1, r4
   1d9d6:	f001 fa45 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1d9da:	f001 fb3f 	bl	1f05c <radio_disable>
}
   1d9de:	2000      	movs	r0, #0
   1d9e0:	b00c      	add	sp, #48	; 0x30
   1d9e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1d9e6:	2001      	movs	r0, #1
   1d9e8:	f7fd ffbc 	bl	1b964 <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1d9ec:	7841      	ldrb	r1, [r0, #1]
   1d9ee:	1c82      	adds	r2, r0, #2
   1d9f0:	7800      	ldrb	r0, [r0, #0]
   1d9f2:	f001 fc69 	bl	1f2c8 <radio_filter_configure>
   1d9f6:	e7a3      	b.n	1d940 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1d9f8:	4a3b      	ldr	r2, [pc, #236]	; (1dae8 <common_prepare_cb+0x258>)
   1d9fa:	493c      	ldr	r1, [pc, #240]	; (1daec <common_prepare_cb+0x25c>)
   1d9fc:	483c      	ldr	r0, [pc, #240]	; (1daf0 <common_prepare_cb+0x260>)
   1d9fe:	f44f 7305 	mov.w	r3, #532	; 0x214
   1da02:	f007 fa80 	bl	24f06 <printk>
   1da06:	4040      	eors	r0, r0
   1da08:	f380 8811 	msr	BASEPRI, r0
   1da0c:	f04f 0003 	mov.w	r0, #3
   1da10:	df02      	svc	2
}
   1da12:	2000      	movs	r0, #0
   1da14:	b00c      	add	sp, #48	; 0x30
   1da16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1da1a:	4a33      	ldr	r2, [pc, #204]	; (1dae8 <common_prepare_cb+0x258>)
   1da1c:	4935      	ldr	r1, [pc, #212]	; (1daf4 <common_prepare_cb+0x264>)
   1da1e:	4834      	ldr	r0, [pc, #208]	; (1daf0 <common_prepare_cb+0x260>)
   1da20:	f240 230f 	movw	r3, #527	; 0x20f
   1da24:	f007 fa6f 	bl	24f06 <printk>
   1da28:	4040      	eors	r0, r0
   1da2a:	f380 8811 	msr	BASEPRI, r0
   1da2e:	f04f 0003 	mov.w	r0, #3
   1da32:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1da34:	4620      	mov	r0, r4
   1da36:	f7fe ff25 	bl	1c884 <lll_prepare_done>
		LL_ASSERT(!ret);
   1da3a:	2800      	cmp	r0, #0
   1da3c:	d0ae      	beq.n	1d99c <common_prepare_cb+0x10c>
   1da3e:	e7db      	b.n	1d9f8 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1da40:	f001 fc10 	bl	1f264 <radio_switch_complete_and_disable>
   1da44:	e774      	b.n	1d930 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1da46:	4a2c      	ldr	r2, [pc, #176]	; (1daf8 <common_prepare_cb+0x268>)
   1da48:	9207      	str	r2, [sp, #28]
   1da4a:	4a2c      	ldr	r2, [pc, #176]	; (1dafc <common_prepare_cb+0x26c>)
   1da4c:	9205      	str	r2, [sp, #20]
   1da4e:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1da52:	9300      	str	r3, [sp, #0]
   1da54:	9208      	str	r2, [sp, #32]
   1da56:	4633      	mov	r3, r6
   1da58:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1da5c:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1da60:	9406      	str	r4, [sp, #24]
   1da62:	4639      	mov	r1, r7
   1da64:	2203      	movs	r2, #3
   1da66:	f7f3 fda1 	bl	115ac <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1da6a:	f030 0302 	bics.w	r3, r0, #2
   1da6e:	d086      	beq.n	1d97e <common_prepare_cb+0xee>
   1da70:	4a1d      	ldr	r2, [pc, #116]	; (1dae8 <common_prepare_cb+0x258>)
   1da72:	4923      	ldr	r1, [pc, #140]	; (1db00 <common_prepare_cb+0x270>)
   1da74:	481e      	ldr	r0, [pc, #120]	; (1daf0 <common_prepare_cb+0x260>)
   1da76:	f240 13fb 	movw	r3, #507	; 0x1fb
   1da7a:	f007 fa44 	bl	24f06 <printk>
   1da7e:	4040      	eors	r0, r0
   1da80:	f380 8811 	msr	BASEPRI, r0
   1da84:	f04f 0003 	mov.w	r0, #3
   1da88:	df02      	svc	2
   1da8a:	e778      	b.n	1d97e <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1da8c:	4a16      	ldr	r2, [pc, #88]	; (1dae8 <common_prepare_cb+0x258>)
   1da8e:	491d      	ldr	r1, [pc, #116]	; (1db04 <common_prepare_cb+0x274>)
   1da90:	4817      	ldr	r0, [pc, #92]	; (1daf0 <common_prepare_cb+0x260>)
   1da92:	f240 138d 	movw	r3, #397	; 0x18d
   1da96:	f007 fa36 	bl	24f06 <printk>
   1da9a:	4040      	eors	r0, r0
   1da9c:	f380 8811 	msr	BASEPRI, r0
   1daa0:	f04f 0003 	mov.w	r0, #3
   1daa4:	df02      	svc	2
   1daa6:	e71b      	b.n	1d8e0 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1daa8:	6863      	ldr	r3, [r4, #4]
   1daaa:	f893 3020 	ldrb.w	r3, [r3, #32]
   1daae:	07d9      	lsls	r1, r3, #31
   1dab0:	d405      	bmi.n	1dabe <common_prepare_cb+0x22e>
   1dab2:	6863      	ldr	r3, [r4, #4]
   1dab4:	f893 3020 	ldrb.w	r3, [r3, #32]
   1dab8:	079a      	lsls	r2, r3, #30
   1daba:	f57f aef8 	bpl.w	1d8ae <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1dabe:	4812      	ldr	r0, [pc, #72]	; (1db08 <common_prepare_cb+0x278>)
   1dac0:	4621      	mov	r1, r4
   1dac2:	f001 f9cf 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1dac6:	f001 fac9 	bl	1f05c <radio_disable>
}
   1daca:	2000      	movs	r0, #0
   1dacc:	b00c      	add	sp, #48	; 0x30
   1dace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1dad2:	bf00      	nop
   1dad4:	8e89bed6 	.word	0x8e89bed6
   1dad8:	00555555 	.word	0x00555555
   1dadc:	00003091 	.word	0x00003091
   1dae0:	20000680 	.word	0x20000680
   1dae4:	0001dbb5 	.word	0x0001dbb5
   1dae8:	0002ce88 	.word	0x0002ce88
   1daec:	0002c454 	.word	0x0002c454
   1daf0:	0002bfdc 	.word	0x0002bfdc
   1daf4:	0002c47c 	.word	0x0002c47c
   1daf8:	0001dcd9 	.word	0x0001dcd9
   1dafc:	0001dd81 	.word	0x0001dd81
   1db00:	0002c548 	.word	0x0002c548
   1db04:	0002ce34 	.word	0x0002ce34
   1db08:	0001cae9 	.word	0x0001cae9

0001db0c <prepare_cb>:
	return common_prepare_cb(p, false);
   1db0c:	2100      	movs	r1, #0
   1db0e:	f7ff bebf 	b.w	1d890 <common_prepare_cb>
   1db12:	bf00      	nop

0001db14 <isr_common_done>:
{
   1db14:	b530      	push	{r4, r5, lr}
   1db16:	4604      	mov	r4, r0
   1db18:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1db1a:	f7fe ff8f 	bl	1ca3c <lll_isr_status_reset>
	lll->state = 0U;
   1db1e:	7da3      	ldrb	r3, [r4, #22]
   1db20:	f36f 0300 	bfc	r3, #0, #1
   1db24:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1db26:	069b      	lsls	r3, r3, #26
   1db28:	d401      	bmi.n	1db2e <isr_common_done+0x1a>
		   lll->conn) {
   1db2a:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1db2c:	b3b3      	cbz	r3, 1db9c <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1db2e:	2096      	movs	r0, #150	; 0x96
   1db30:	f001 fc1c 	bl	1f36c <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1db34:	2300      	movs	r3, #0
   1db36:	461a      	mov	r2, r3
   1db38:	4619      	mov	r1, r3
   1db3a:	4618      	mov	r0, r3
   1db3c:	f001 fb32 	bl	1f1a4 <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1db40:	2001      	movs	r0, #1
   1db42:	f7f6 fb8b 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1db46:	4605      	mov	r5, r0
   1db48:	b1d0      	cbz	r0, 1db80 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1db4a:	f105 001c 	add.w	r0, r5, #28
   1db4e:	f001 fa5d 	bl	1f00c <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1db52:	f7fe fb97 	bl	1c284 <ull_filter_lll_rl_enabled>
   1db56:	b940      	cbnz	r0, 1db6a <isr_common_done+0x56>
	radio_rssi_measure();
   1db58:	f001 fb94 	bl	1f284 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1db5c:	4811      	ldr	r0, [pc, #68]	; (1dba4 <isr_common_done+0x90>)
   1db5e:	4621      	mov	r1, r4
}
   1db60:	b003      	add	sp, #12
   1db62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1db66:	f001 b97d 	b.w	1ee64 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1db6a:	f10d 0007 	add.w	r0, sp, #7
   1db6e:	f7fe fa03 	bl	1bf78 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1db72:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1db74:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1db76:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1db7a:	f001 fda9 	bl	1f6d0 <radio_ar_configure>
   1db7e:	e7eb      	b.n	1db58 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1db80:	4a09      	ldr	r2, [pc, #36]	; (1dba8 <isr_common_done+0x94>)
   1db82:	490a      	ldr	r1, [pc, #40]	; (1dbac <isr_common_done+0x98>)
   1db84:	480a      	ldr	r0, [pc, #40]	; (1dbb0 <isr_common_done+0x9c>)
   1db86:	f44f 7352 	mov.w	r3, #840	; 0x348
   1db8a:	f007 f9bc 	bl	24f06 <printk>
   1db8e:	4040      	eors	r0, r0
   1db90:	f380 8811 	msr	BASEPRI, r0
   1db94:	f04f 0003 	mov.w	r0, #3
   1db98:	df02      	svc	2
   1db9a:	e7d6      	b.n	1db4a <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1db9c:	f001 fb62 	bl	1f264 <radio_switch_complete_and_disable>
   1dba0:	e7ce      	b.n	1db40 <isr_common_done+0x2c>
   1dba2:	bf00      	nop
   1dba4:	00003091 	.word	0x00003091
   1dba8:	0002ce88 	.word	0x0002ce88
   1dbac:	0002ce34 	.word	0x0002ce34
   1dbb0:	0002bfdc 	.word	0x0002bfdc

0001dbb4 <isr_abort>:
{
   1dbb4:	b510      	push	{r4, lr}
   1dbb6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1dbb8:	f7fe ff40 	bl	1ca3c <lll_isr_status_reset>
	radio_filter_disable();
   1dbbc:	f001 fba4 	bl	1f308 <radio_filter_disable>
	lll_isr_cleanup(param);
   1dbc0:	4620      	mov	r0, r4
}
   1dbc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1dbc6:	f7fe bf47 	b.w	1ca58 <lll_isr_cleanup>
   1dbca:	bf00      	nop

0001dbcc <isr_done>:
{
   1dbcc:	b508      	push	{r3, lr}
	isr_common_done(param);
   1dbce:	f7ff ffa1 	bl	1db14 <isr_common_done>
	radio_rx_enable();
   1dbd2:	f001 fa37 	bl	1f044 <radio_rx_enable>
}
   1dbd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1dbda:	f001 bcd3 	b.w	1f584 <radio_tmr_end_capture>
   1dbde:	bf00      	nop

0001dbe0 <isr_tx>:
{
   1dbe0:	b570      	push	{r4, r5, r6, lr}
   1dbe2:	b082      	sub	sp, #8
   1dbe4:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1dbe6:	f7fe ff17 	bl	1ca18 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1dbea:	f001 fb3b 	bl	1f264 <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dbee:	2001      	movs	r0, #1
   1dbf0:	f7f6 fb34 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dbf4:	4604      	mov	r4, r0
   1dbf6:	2800      	cmp	r0, #0
   1dbf8:	d03f      	beq.n	1dc7a <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1dbfa:	f104 001c 	add.w	r0, r4, #28
   1dbfe:	f001 fa05 	bl	1f00c <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1dc02:	f001 fa4b 	bl	1f09c <radio_is_ready>
   1dc06:	b9e0      	cbnz	r0, 1dc42 <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1dc08:	f7fe fb3c 	bl	1c284 <ull_filter_lll_rl_enabled>
   1dc0c:	bb50      	cbnz	r0, 1dc64 <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dc0e:	f001 fcc7 	bl	1f5a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc12:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dc14:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc16:	4608      	mov	r0, r1
   1dc18:	f001 fa0e 	bl	1f038 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dc1c:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1dc1e:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1dc20:	4608      	mov	r0, r1
   1dc22:	f001 fa05 	bl	1f030 <radio_tx_chain_delay_get>
   1dc26:	4434      	add	r4, r6
   1dc28:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1dc2a:	1a20      	subs	r0, r4, r0
   1dc2c:	f001 fc70 	bl	1f510 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1dc30:	f001 fb28 	bl	1f284 <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1dc34:	4818      	ldr	r0, [pc, #96]	; (1dc98 <isr_tx+0xb8>)
   1dc36:	4629      	mov	r1, r5
}
   1dc38:	b002      	add	sp, #8
   1dc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1dc3e:	f001 b911 	b.w	1ee64 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1dc42:	4a16      	ldr	r2, [pc, #88]	; (1dc9c <isr_tx+0xbc>)
   1dc44:	4916      	ldr	r1, [pc, #88]	; (1dca0 <isr_tx+0xc0>)
   1dc46:	4817      	ldr	r0, [pc, #92]	; (1dca4 <isr_tx+0xc4>)
   1dc48:	f240 3306 	movw	r3, #774	; 0x306
   1dc4c:	f007 f95b 	bl	24f06 <printk>
   1dc50:	4040      	eors	r0, r0
   1dc52:	f380 8811 	msr	BASEPRI, r0
   1dc56:	f04f 0003 	mov.w	r0, #3
   1dc5a:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1dc5c:	f7fe fb12 	bl	1c284 <ull_filter_lll_rl_enabled>
   1dc60:	2800      	cmp	r0, #0
   1dc62:	d0d4      	beq.n	1dc0e <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1dc64:	f10d 0007 	add.w	r0, sp, #7
   1dc68:	f7fe f986 	bl	1bf78 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1dc6c:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1dc6e:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1dc70:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1dc74:	f001 fd2c 	bl	1f6d0 <radio_ar_configure>
   1dc78:	e7c9      	b.n	1dc0e <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1dc7a:	4a08      	ldr	r2, [pc, #32]	; (1dc9c <isr_tx+0xbc>)
   1dc7c:	490a      	ldr	r1, [pc, #40]	; (1dca8 <isr_tx+0xc8>)
   1dc7e:	4809      	ldr	r0, [pc, #36]	; (1dca4 <isr_tx+0xc4>)
   1dc80:	f240 3302 	movw	r3, #770	; 0x302
   1dc84:	f007 f93f 	bl	24f06 <printk>
   1dc88:	4040      	eors	r0, r0
   1dc8a:	f380 8811 	msr	BASEPRI, r0
   1dc8e:	f04f 0003 	mov.w	r0, #3
   1dc92:	df02      	svc	2
   1dc94:	e7b1      	b.n	1dbfa <isr_tx+0x1a>
   1dc96:	bf00      	nop
   1dc98:	00003091 	.word	0x00003091
   1dc9c:	0002ce88 	.word	0x0002ce88
   1dca0:	0002ce3c 	.word	0x0002ce3c
   1dca4:	0002bfdc 	.word	0x0002bfdc
   1dca8:	0002ce34 	.word	0x0002ce34

0001dcac <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1dcac:	68c3      	ldr	r3, [r0, #12]
{
   1dcae:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1dcb0:	681e      	ldr	r6, [r3, #0]
{
   1dcb2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1dcb4:	f7f3 fda4 	bl	11800 <ticker_ticks_now_get>
   1dcb8:	4605      	mov	r5, r0
   1dcba:	4630      	mov	r0, r6
   1dcbc:	f7fe fe48 	bl	1c950 <lll_event_offset_get>
	p->remainder = 0;
   1dcc0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1dcc2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1dcc4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1dcc8:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1dcca:	4620      	mov	r0, r4
   1dccc:	2101      	movs	r1, #1
}
   1dcce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1dcd2:	f7ff bddd 	b.w	1d890 <common_prepare_cb>
   1dcd6:	bf00      	nop

0001dcd8 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1dcd8:	b900      	cbnz	r0, 1dcdc <ticker_op_start_cb+0x4>
   1dcda:	4770      	bx	lr
{
   1dcdc:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1dcde:	4a07      	ldr	r2, [pc, #28]	; (1dcfc <ticker_op_start_cb+0x24>)
   1dce0:	4907      	ldr	r1, [pc, #28]	; (1dd00 <ticker_op_start_cb+0x28>)
   1dce2:	4808      	ldr	r0, [pc, #32]	; (1dd04 <ticker_op_start_cb+0x2c>)
   1dce4:	f44f 7324 	mov.w	r3, #656	; 0x290
   1dce8:	f007 f90d 	bl	24f06 <printk>
   1dcec:	4040      	eors	r0, r0
   1dcee:	f380 8811 	msr	BASEPRI, r0
   1dcf2:	f04f 0003 	mov.w	r0, #3
   1dcf6:	df02      	svc	2
}
   1dcf8:	bd08      	pop	{r3, pc}
   1dcfa:	bf00      	nop
   1dcfc:	0002ce88 	.word	0x0002ce88
   1dd00:	0002c72c 	.word	0x0002c72c
   1dd04:	0002bfdc 	.word	0x0002bfdc

0001dd08 <is_abort_cb>:
	if (next != curr) {
   1dd08:	4281      	cmp	r1, r0
{
   1dd0a:	b508      	push	{r3, lr}
	if (next != curr) {
   1dd0c:	d00d      	beq.n	1dd2a <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1dd0e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1dd10:	b113      	cbz	r3, 1dd18 <is_abort_cb+0x10>
			return -ECANCELED;
   1dd12:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1dd16:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1dd18:	4b14      	ldr	r3, [pc, #80]	; (1dd6c <is_abort_cb+0x64>)
   1dd1a:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1dd1c:	f7ff f834 	bl	1cd88 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1dd20:	2800      	cmp	r0, #0
   1dd22:	db12      	blt.n	1dd4a <is_abort_cb+0x42>
   1dd24:	f06f 000a 	mvn.w	r0, #10
}
   1dd28:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1dd2a:	684b      	ldr	r3, [r1, #4]
   1dd2c:	b123      	cbz	r3, 1dd38 <is_abort_cb+0x30>
   1dd2e:	684b      	ldr	r3, [r1, #4]
   1dd30:	f893 3020 	ldrb.w	r3, [r3, #32]
   1dd34:	07db      	lsls	r3, r3, #31
   1dd36:	d406      	bmi.n	1dd46 <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1dd38:	480d      	ldr	r0, [pc, #52]	; (1dd70 <is_abort_cb+0x68>)
   1dd3a:	f001 f893 	bl	1ee64 <radio_isr_set>
	radio_disable();
   1dd3e:	f001 f98d 	bl	1f05c <radio_disable>
	return 0;
   1dd42:	2000      	movs	r0, #0
}
   1dd44:	bd08      	pop	{r3, pc}
		return 0;
   1dd46:	2000      	movs	r0, #0
}
   1dd48:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1dd4a:	4a0a      	ldr	r2, [pc, #40]	; (1dd74 <is_abort_cb+0x6c>)
   1dd4c:	490a      	ldr	r1, [pc, #40]	; (1dd78 <is_abort_cb+0x70>)
   1dd4e:	480b      	ldr	r0, [pc, #44]	; (1dd7c <is_abort_cb+0x74>)
   1dd50:	f240 2332 	movw	r3, #562	; 0x232
   1dd54:	f007 f8d7 	bl	24f06 <printk>
   1dd58:	4040      	eors	r0, r0
   1dd5a:	f380 8811 	msr	BASEPRI, r0
   1dd5e:	f04f 0003 	mov.w	r0, #3
   1dd62:	df02      	svc	2
   1dd64:	f06f 000a 	mvn.w	r0, #10
}
   1dd68:	bd08      	pop	{r3, pc}
   1dd6a:	bf00      	nop
   1dd6c:	0001dcad 	.word	0x0001dcad
   1dd70:	00002ff1 	.word	0x00002ff1
   1dd74:	0002ce88 	.word	0x0002ce88
   1dd78:	0002cd78 	.word	0x0002cd78
   1dd7c:	0002bfdc 	.word	0x0002bfdc

0001dd80 <ticker_stop_cb>:
{
   1dd80:	b508      	push	{r3, lr}
	mfy.param = param;
   1dd82:	4b0c      	ldr	r3, [pc, #48]	; (1ddb4 <ticker_stop_cb+0x34>)
{
   1dd84:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1dd86:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1dd88:	2200      	movs	r2, #0
   1dd8a:	4611      	mov	r1, r2
   1dd8c:	2001      	movs	r0, #1
   1dd8e:	f7f2 fa41 	bl	10214 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1dd92:	b900      	cbnz	r0, 1dd96 <ticker_stop_cb+0x16>
}
   1dd94:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1dd96:	4a08      	ldr	r2, [pc, #32]	; (1ddb8 <ticker_stop_cb+0x38>)
   1dd98:	4908      	ldr	r1, [pc, #32]	; (1ddbc <ticker_stop_cb+0x3c>)
   1dd9a:	4809      	ldr	r0, [pc, #36]	; (1ddc0 <ticker_stop_cb+0x40>)
   1dd9c:	f240 2389 	movw	r3, #649	; 0x289
   1dda0:	f007 f8b1 	bl	24f06 <printk>
   1dda4:	4040      	eors	r0, r0
   1dda6:	f380 8811 	msr	BASEPRI, r0
   1ddaa:	f04f 0003 	mov.w	r0, #3
   1ddae:	df02      	svc	2
}
   1ddb0:	bd08      	pop	{r3, pc}
   1ddb2:	bf00      	nop
   1ddb4:	20000670 	.word	0x20000670
   1ddb8:	0002ce88 	.word	0x0002ce88
   1ddbc:	0002c454 	.word	0x0002c454
   1ddc0:	0002bfdc 	.word	0x0002bfdc

0001ddc4 <isr_done_cleanup>:
{
   1ddc4:	b530      	push	{r4, r5, lr}
   1ddc6:	4604      	mov	r4, r0
   1ddc8:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1ddca:	f7fe fe37 	bl	1ca3c <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1ddce:	f10d 010f 	add.w	r1, sp, #15
   1ddd2:	4620      	mov	r0, r4
   1ddd4:	f7fe fdaa 	bl	1c92c <lll_is_done>
   1ddd8:	b9c8      	cbnz	r0, 1de0e <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1ddda:	4605      	mov	r5, r0
   1dddc:	f001 fa94 	bl	1f308 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1dde0:	7da2      	ldrb	r2, [r4, #22]
   1dde2:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1dde6:	3301      	adds	r3, #1
   1dde8:	f003 0303 	and.w	r3, r3, #3
   1ddec:	2b03      	cmp	r3, #3
   1ddee:	bf14      	ite	ne
   1ddf0:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1ddf4:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ddf8:	2300      	movs	r3, #0
		lll->chan = 0U;
   1ddfa:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ddfc:	4619      	mov	r1, r3
   1ddfe:	9300      	str	r3, [sp, #0]
   1de00:	2203      	movs	r2, #3
   1de02:	4618      	mov	r0, r3
   1de04:	f7f3 fc5c 	bl	116c0 <ticker_stop>
	lll_isr_cleanup(param);
   1de08:	4620      	mov	r0, r4
   1de0a:	f7fe fe25 	bl	1ca58 <lll_isr_cleanup>
}
   1de0e:	b005      	add	sp, #20
   1de10:	bd30      	pop	{r4, r5, pc}
   1de12:	bf00      	nop

0001de14 <isr_scan_tgta_check>:
{
   1de14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1de18:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1de1c:	4616      	mov	r6, r2
   1de1e:	4680      	mov	r8, r0
   1de20:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1de22:	464a      	mov	r2, r9
   1de24:	4619      	mov	r1, r3
   1de26:	4630      	mov	r0, r6
{
   1de28:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1de2a:	f7fe fa09 	bl	1c240 <ull_filter_lll_rl_addr_resolve>
   1de2e:	4604      	mov	r4, r0
   1de30:	b9a0      	cbnz	r0, 1de5c <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1de32:	b11d      	cbz	r5, 1de3c <isr_scan_tgta_check+0x28>
   1de34:	f898 3017 	ldrb.w	r3, [r8, #23]
   1de38:	079a      	lsls	r2, r3, #30
   1de3a:	d41c      	bmi.n	1de76 <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1de3c:	f898 5016 	ldrb.w	r5, [r8, #22]
   1de40:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1de44:	42b3      	cmp	r3, r6
   1de46:	d00c      	beq.n	1de62 <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1de48:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1de4c:	07ab      	lsls	r3, r5, #30
   1de4e:	d505      	bpl.n	1de5c <isr_scan_tgta_check+0x48>
   1de50:	b126      	cbz	r6, 1de5c <isr_scan_tgta_check+0x48>
   1de52:	797b      	ldrb	r3, [r7, #5]
   1de54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1de58:	2b40      	cmp	r3, #64	; 0x40
   1de5a:	d014      	beq.n	1de86 <isr_scan_tgta_check+0x72>
}
   1de5c:	4620      	mov	r0, r4
   1de5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1de62:	2206      	movs	r2, #6
   1de64:	4639      	mov	r1, r7
   1de66:	f108 0019 	add.w	r0, r8, #25
   1de6a:	f00c fde6 	bl	2aa3a <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1de6e:	b140      	cbz	r0, 1de82 <isr_scan_tgta_check+0x6e>
   1de70:	f898 5016 	ldrb.w	r5, [r8, #22]
   1de74:	e7e8      	b.n	1de48 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1de76:	4648      	mov	r0, r9
   1de78:	f7fe f864 	bl	1bf44 <ull_filter_lll_lrpa_get>
   1de7c:	2800      	cmp	r0, #0
   1de7e:	d1ed      	bne.n	1de5c <isr_scan_tgta_check+0x48>
   1de80:	e7dc      	b.n	1de3c <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1de82:	2401      	movs	r4, #1
   1de84:	e7ea      	b.n	1de5c <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1de86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1de88:	2b00      	cmp	r3, #0
   1de8a:	d0fa      	beq.n	1de82 <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1de8c:	2401      	movs	r4, #1
   1de8e:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1de90:	e7e4      	b.n	1de5c <isr_scan_tgta_check+0x48>
   1de92:	bf00      	nop

0001de94 <abort_cb>:
{
   1de94:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1de96:	b1d8      	cbz	r0, 1ded0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1de98:	460c      	mov	r4, r1
   1de9a:	f7fe ff8d 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1de9e:	2800      	cmp	r0, #0
   1dea0:	db04      	blt.n	1deac <abort_cb+0x18>
	lll_done(param);
   1dea2:	4620      	mov	r0, r4
}
   1dea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dea8:	f7fe bcee 	b.w	1c888 <lll_done>
	LL_ASSERT(err >= 0);
   1deac:	4a0c      	ldr	r2, [pc, #48]	; (1dee0 <abort_cb+0x4c>)
   1deae:	490d      	ldr	r1, [pc, #52]	; (1dee4 <abort_cb+0x50>)
   1deb0:	480d      	ldr	r0, [pc, #52]	; (1dee8 <abort_cb+0x54>)
   1deb2:	f240 2379 	movw	r3, #633	; 0x279
   1deb6:	f007 f826 	bl	24f06 <printk>
   1deba:	4040      	eors	r0, r0
   1debc:	f380 8811 	msr	BASEPRI, r0
   1dec0:	f04f 0003 	mov.w	r0, #3
   1dec4:	df02      	svc	2
	lll_done(param);
   1dec6:	4620      	mov	r0, r4
}
   1dec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1decc:	f7fe bcdc 	b.w	1c888 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1ded0:	4806      	ldr	r0, [pc, #24]	; (1deec <abort_cb+0x58>)
   1ded2:	f000 ffc7 	bl	1ee64 <radio_isr_set>
}
   1ded6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1deda:	f001 b8bf 	b.w	1f05c <radio_disable>
   1dede:	bf00      	nop
   1dee0:	0002ce88 	.word	0x0002ce88
   1dee4:	0002cd78 	.word	0x0002cd78
   1dee8:	0002bfdc 	.word	0x0002bfdc
   1deec:	0001ddc5 	.word	0x0001ddc5

0001def0 <lll_scan_init>:
}
   1def0:	2000      	movs	r0, #0
   1def2:	4770      	bx	lr

0001def4 <lll_scan_reset>:
   1def4:	2000      	movs	r0, #0
   1def6:	4770      	bx	lr

0001def8 <lll_scan_prepare>:
{
   1def8:	b510      	push	{r4, lr}
   1defa:	b082      	sub	sp, #8
   1defc:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1defe:	f7fe ff43 	bl	1cd88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1df02:	2800      	cmp	r0, #0
   1df04:	db19      	blt.n	1df3a <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1df06:	4a13      	ldr	r2, [pc, #76]	; (1df54 <lll_scan_prepare+0x5c>)
   1df08:	4913      	ldr	r1, [pc, #76]	; (1df58 <lll_scan_prepare+0x60>)
   1df0a:	4814      	ldr	r0, [pc, #80]	; (1df5c <lll_scan_prepare+0x64>)
   1df0c:	9400      	str	r4, [sp, #0]
   1df0e:	2300      	movs	r3, #0
   1df10:	f7f6 fce0 	bl	148d4 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1df14:	b108      	cbz	r0, 1df1a <lll_scan_prepare+0x22>
   1df16:	3077      	adds	r0, #119	; 0x77
   1df18:	d101      	bne.n	1df1e <lll_scan_prepare+0x26>
}
   1df1a:	b002      	add	sp, #8
   1df1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1df1e:	4a10      	ldr	r2, [pc, #64]	; (1df60 <lll_scan_prepare+0x68>)
   1df20:	4910      	ldr	r1, [pc, #64]	; (1df64 <lll_scan_prepare+0x6c>)
   1df22:	4811      	ldr	r0, [pc, #68]	; (1df68 <lll_scan_prepare+0x70>)
   1df24:	238b      	movs	r3, #139	; 0x8b
   1df26:	f006 ffee 	bl	24f06 <printk>
   1df2a:	4040      	eors	r0, r0
   1df2c:	f380 8811 	msr	BASEPRI, r0
   1df30:	f04f 0003 	mov.w	r0, #3
   1df34:	df02      	svc	2
}
   1df36:	b002      	add	sp, #8
   1df38:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1df3a:	4a09      	ldr	r2, [pc, #36]	; (1df60 <lll_scan_prepare+0x68>)
   1df3c:	490b      	ldr	r1, [pc, #44]	; (1df6c <lll_scan_prepare+0x74>)
   1df3e:	480a      	ldr	r0, [pc, #40]	; (1df68 <lll_scan_prepare+0x70>)
   1df40:	2388      	movs	r3, #136	; 0x88
   1df42:	f006 ffe0 	bl	24f06 <printk>
   1df46:	4040      	eors	r0, r0
   1df48:	f380 8811 	msr	BASEPRI, r0
   1df4c:	f04f 0003 	mov.w	r0, #3
   1df50:	df02      	svc	2
   1df52:	e7d8      	b.n	1df06 <lll_scan_prepare+0xe>
   1df54:	0001db0d 	.word	0x0001db0d
   1df58:	0001de95 	.word	0x0001de95
   1df5c:	0001dd09 	.word	0x0001dd09
   1df60:	0002ce88 	.word	0x0002ce88
   1df64:	0002ce64 	.word	0x0002ce64
   1df68:	0002bfdc 	.word	0x0002bfdc
   1df6c:	0002cd78 	.word	0x0002cd78

0001df70 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1df70:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1df74:	f01c 0f08 	tst.w	ip, #8
   1df78:	d002      	beq.n	1df80 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1df7a:	b162      	cbz	r2, 1df96 <lll_scan_isr_rx_check+0x26>
{
   1df7c:	2001      	movs	r0, #1
}
   1df7e:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1df80:	2a00      	cmp	r2, #0
   1df82:	d0fb      	beq.n	1df7c <lll_scan_isr_rx_check+0xc>
{
   1df84:	b510      	push	{r4, lr}
   1df86:	4604      	mov	r4, r0
   1df88:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1df8a:	4619      	mov	r1, r3
   1df8c:	f7fe f8ea 	bl	1c164 <ull_filter_lll_rl_idx_allowed>
   1df90:	b120      	cbz	r0, 1df9c <lll_scan_isr_rx_check+0x2c>
{
   1df92:	2001      	movs	r0, #1
}
   1df94:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1df96:	4618      	mov	r0, r3
   1df98:	f7fe b8b4 	b.w	1c104 <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1df9c:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1df9e:	071b      	lsls	r3, r3, #28
   1dfa0:	d4f7      	bmi.n	1df92 <lll_scan_isr_rx_check+0x22>
}
   1dfa2:	bd10      	pop	{r4, pc}

0001dfa4 <lll_scan_prepare_connect_req>:
{
   1dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfa8:	460c      	mov	r4, r1
   1dfaa:	f89d 101c 	ldrb.w	r1, [sp, #28]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1dfae:	0189      	lsls	r1, r1, #6
   1dfb0:	f001 0140 	and.w	r1, r1, #64	; 0x40
   1dfb4:	f041 0125 	orr.w	r1, r1, #37	; 0x25
   1dfb8:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   1dfbc:	7823      	ldrb	r3, [r4, #0]
{
   1dfbe:	4606      	mov	r6, r0
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1dfc0:	f003 0310 	and.w	r3, r3, #16
{
   1dfc4:	4690      	mov	r8, r2
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1dfc6:	4319      	orrs	r1, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1dfc8:	2222      	movs	r2, #34	; 0x22
{
   1dfca:	9b08      	ldr	r3, [sp, #32]
	lll_conn = lll->conn;
   1dfcc:	6877      	ldr	r7, [r6, #4]
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1dfce:	7062      	strb	r2, [r4, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1dfd0:	7021      	strb	r1, [r4, #0]
   1dfd2:	681a      	ldr	r2, [r3, #0]
   1dfd4:	f8c4 2002 	str.w	r2, [r4, #2]
   1dfd8:	889b      	ldrh	r3, [r3, #4]
{
   1dfda:	9806      	ldr	r0, [sp, #24]
   1dfdc:	80e3      	strh	r3, [r4, #6]
   1dfde:	6803      	ldr	r3, [r0, #0]
   1dfe0:	60a3      	str	r3, [r4, #8]
   1dfe2:	8883      	ldrh	r3, [r0, #4]
   1dfe4:	81a3      	strh	r3, [r4, #12]
   1dfe6:	687b      	ldr	r3, [r7, #4]
   1dfe8:	f8c4 300e 	str.w	r3, [r4, #14]
   1dfec:	893b      	ldrh	r3, [r7, #8]
   1dfee:	7aba      	ldrb	r2, [r7, #10]
   1dff0:	8263      	strh	r3, [r4, #18]
	pdu_tx->connect_ind.win_size = 1;
   1dff2:	2301      	movs	r3, #1
   1dff4:	7522      	strb	r2, [r4, #20]
   1dff6:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1dff8:	89fd      	ldrh	r5, [r7, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1dffa:	f001 facb 	bl	1f594 <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1dffe:	f1b8 0f00 	cmp.w	r8, #0
   1e002:	d043      	beq.n	1e08c <lll_scan_prepare_connect_req+0xe8>
   1e004:	f008 0203 	and.w	r2, r8, #3
   1e008:	322b      	adds	r2, #43	; 0x2b
   1e00a:	00d2      	lsls	r2, r2, #3
   1e00c:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1e010:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1e014:	6933      	ldr	r3, [r6, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1e016:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1e01a:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1e01c:	b38b      	cbz	r3, 1e082 <lll_scan_prepare_connect_req+0xde>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1e01e:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1e022:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1e026:	2b00      	cmp	r3, #0
   1e028:	db01      	blt.n	1e02e <lll_scan_prepare_connect_req+0x8a>
   1e02a:	4293      	cmp	r3, r2
   1e02c:	d201      	bcs.n	1e032 <lll_scan_prepare_connect_req+0x8e>
			win_offset_us += conn_interval_us;
   1e02e:	442b      	add	r3, r5
   1e030:	e7f9      	b.n	1e026 <lll_scan_prepare_connect_req+0x82>
		*conn_space_us = win_offset_us;
   1e032:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1e034:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1e036:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1e038:	4b16      	ldr	r3, [pc, #88]	; (1e094 <lll_scan_prepare_connect_req+0xf0>)
   1e03a:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1e03e:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1e040:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1e042:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1e044:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1e046:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1e048:	8a3a      	ldrh	r2, [r7, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1e04a:	8ab3      	ldrh	r3, [r6, #20]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1e04c:	89f9      	ldrh	r1, [r7, #14]
   1e04e:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1e050:	8362      	strh	r2, [r4, #26]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1e052:	83a3      	strh	r3, [r4, #28]
   1e054:	69bb      	ldr	r3, [r7, #24]
   1e056:	f8c4 301e 	str.w	r3, [r4, #30]
   1e05a:	7f3b      	ldrb	r3, [r7, #28]
   1e05c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1e060:	7fba      	ldrb	r2, [r7, #30]
   1e062:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1e066:	f362 0304 	bfi	r3, r2, #0, #5
   1e06a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1e06e:	f7fe fec1 	bl	1cdf4 <lll_clock_sca_local_get>
   1e072:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1e076:	f360 1347 	bfi	r3, r0, #5, #3
   1e07a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1e07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1e082:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e084:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1e086:	75a3      	strb	r3, [r4, #22]
   1e088:	75e3      	strb	r3, [r4, #23]
   1e08a:	e7dd      	b.n	1e048 <lll_scan_prepare_connect_req+0xa4>
   1e08c:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1e090:	e7c0      	b.n	1e014 <lll_scan_prepare_connect_req+0x70>
   1e092:	bf00      	nop
   1e094:	d1b71759 	.word	0xd1b71759

0001e098 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e09a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1e09c:	f7fe fcce 	bl	1ca3c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1e0a0:	f7f6 f9e4 	bl	1446c <ull_event_done_extra_get>
	LL_ASSERT(e);
   1e0a4:	4604      	mov	r4, r0
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	d036      	beq.n	1e118 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1e0aa:	4922      	ldr	r1, [pc, #136]	; (1e134 <isr_done+0x9c>)
   1e0ac:	79a2      	ldrb	r2, [r4, #6]
   1e0ae:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1e0b0:	4b21      	ldr	r3, [pc, #132]	; (1e138 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   1e0b2:	f360 0200 	bfi	r2, r0, #0, #1
   1e0b6:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1e0b8:	4a20      	ldr	r2, [pc, #128]	; (1e13c <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   1e0ba:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   1e0bc:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1e0be:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1e0c0:	2101      	movs	r1, #1
   1e0c2:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1e0c4:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1e0c6:	b11b      	cbz	r3, 1e0d0 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   1e0c8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1e0cc:	2b00      	cmp	r3, #0
   1e0ce:	db04      	blt.n	1e0da <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1e0d0:	4628      	mov	r0, r5
}
   1e0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1e0d6:	f7fe bcbf 	b.w	1ca58 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1e0da:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1e0de:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1e0e2:	2b02      	cmp	r3, #2
   1e0e4:	d016      	beq.n	1e114 <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1e0e6:	2b04      	cmp	r3, #4
   1e0e8:	bf14      	ite	ne
   1e0ea:	2728      	movne	r7, #40	; 0x28
   1e0ec:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e0f0:	f001 fa3c 	bl	1f56c <radio_tmr_aa_restore>
   1e0f4:	4606      	mov	r6, r0
   1e0f6:	f001 fa3f 	bl	1f578 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1e0fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1e0fc:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1e0fe:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1e100:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   1e104:	2300      	movs	r3, #0
   1e106:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   1e108:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   1e10a:	4628      	mov	r0, r5
}
   1e10c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1e110:	f7fe bca2 	b.w	1ca58 <lll_isr_cleanup>
	switch (phy) {
   1e114:	2718      	movs	r7, #24
   1e116:	e7eb      	b.n	1e0f0 <isr_done+0x58>
	LL_ASSERT(e);
   1e118:	4a09      	ldr	r2, [pc, #36]	; (1e140 <isr_done+0xa8>)
   1e11a:	490a      	ldr	r1, [pc, #40]	; (1e144 <isr_done+0xac>)
   1e11c:	480a      	ldr	r0, [pc, #40]	; (1e148 <isr_done+0xb0>)
   1e11e:	f240 3317 	movw	r3, #791	; 0x317
   1e122:	f006 fef0 	bl	24f06 <printk>
   1e126:	4040      	eors	r0, r0
   1e128:	f380 8811 	msr	BASEPRI, r0
   1e12c:	f04f 0003 	mov.w	r0, #3
   1e130:	df02      	svc	2
   1e132:	e7ba      	b.n	1e0aa <isr_done+0x12>
   1e134:	2000357c 	.word	0x2000357c
   1e138:	20003408 	.word	0x20003408
   1e13c:	2000357d 	.word	0x2000357d
   1e140:	0002cee8 	.word	0x0002cee8
   1e144:	0002c574 	.word	0x0002c574
   1e148:	0002bfdc 	.word	0x0002bfdc

0001e14c <lll_conn_init>:
{
   1e14c:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1e14e:	f000 ffd9 	bl	1f104 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e152:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1e154:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e156:	2101      	movs	r1, #1
   1e158:	f361 0201 	bfi	r2, r1, #0, #2
}
   1e15c:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e15e:	701a      	strb	r2, [r3, #0]
}
   1e160:	bd08      	pop	{r3, pc}
   1e162:	bf00      	nop

0001e164 <lll_conn_reset>:
}
   1e164:	2000      	movs	r0, #0
   1e166:	4770      	bx	lr

0001e168 <lll_conn_flush>:
}
   1e168:	4770      	bx	lr
   1e16a:	bf00      	nop

0001e16c <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1e16c:	4805      	ldr	r0, [pc, #20]	; (1e184 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1e16e:	4906      	ldr	r1, [pc, #24]	; (1e188 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1e170:	4a06      	ldr	r2, [pc, #24]	; (1e18c <lll_conn_prepare_reset+0x20>)
{
   1e172:	b410      	push	{r4}
	trx_cnt = 0U;
   1e174:	2300      	movs	r3, #0
   1e176:	4c06      	ldr	r4, [pc, #24]	; (1e190 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1e178:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1e17a:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1e17c:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1e17e:	8023      	strh	r3, [r4, #0]
}
   1e180:	bc10      	pop	{r4}
   1e182:	4770      	bx	lr
   1e184:	2000357c 	.word	0x2000357c
   1e188:	2000357b 	.word	0x2000357b
   1e18c:	2000357d 	.word	0x2000357d
   1e190:	20003408 	.word	0x20003408

0001e194 <lll_conn_abort_cb>:
{
   1e194:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1e196:	b1e8      	cbz	r0, 1e1d4 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1e198:	460d      	mov	r5, r1
   1e19a:	4604      	mov	r4, r0
   1e19c:	f7fe fe0c 	bl	1cdb8 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1e1a0:	2800      	cmp	r0, #0
   1e1a2:	db0a      	blt.n	1e1ba <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1e1a4:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1e1a6:	8923      	ldrh	r3, [r4, #8]
   1e1a8:	8a51      	ldrh	r1, [r2, #18]
   1e1aa:	3301      	adds	r3, #1
   1e1ac:	440b      	add	r3, r1
   1e1ae:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1e1b0:	4628      	mov	r0, r5
}
   1e1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1e1b6:	f7fe bb67 	b.w	1c888 <lll_done>
	LL_ASSERT(err >= 0);
   1e1ba:	4a0a      	ldr	r2, [pc, #40]	; (1e1e4 <lll_conn_abort_cb+0x50>)
   1e1bc:	490a      	ldr	r1, [pc, #40]	; (1e1e8 <lll_conn_abort_cb+0x54>)
   1e1be:	480b      	ldr	r0, [pc, #44]	; (1e1ec <lll_conn_abort_cb+0x58>)
   1e1c0:	23aa      	movs	r3, #170	; 0xaa
   1e1c2:	f006 fea0 	bl	24f06 <printk>
   1e1c6:	4040      	eors	r0, r0
   1e1c8:	f380 8811 	msr	BASEPRI, r0
   1e1cc:	f04f 0003 	mov.w	r0, #3
   1e1d0:	df02      	svc	2
   1e1d2:	e7e7      	b.n	1e1a4 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1e1d4:	4806      	ldr	r0, [pc, #24]	; (1e1f0 <lll_conn_abort_cb+0x5c>)
   1e1d6:	f000 fe45 	bl	1ee64 <radio_isr_set>
}
   1e1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1e1de:	f000 bf3d 	b.w	1f05c <radio_disable>
   1e1e2:	bf00      	nop
   1e1e4:	0002cee8 	.word	0x0002cee8
   1e1e8:	0002cd78 	.word	0x0002cd78
   1e1ec:	0002bfdc 	.word	0x0002bfdc
   1e1f0:	0001e099 	.word	0x0001e099

0001e1f4 <lll_conn_rx_pkt_set>:
{
   1e1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e1f6:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e1f8:	2001      	movs	r0, #1
   1e1fa:	f7f6 f82f 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e1fe:	4604      	mov	r4, r0
   1e200:	b348      	cbz	r0, 1e256 <lll_conn_rx_pkt_set+0x62>
	phy = lll->phy_rx;
   1e202:	f895 6045 	ldrb.w	r6, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   1e206:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   1e208:	f006 0607 	and.w	r6, r6, #7
	radio_phy_set(phy, 0);
   1e20c:	2100      	movs	r1, #0
   1e20e:	4630      	mov	r0, r6
   1e210:	f000 fe8e 	bl	1ef30 <radio_phy_set>
	} else if (lll->enc_rx) {
   1e214:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1e218:	0072      	lsls	r2, r6, #1
	} else if (lll->enc_rx) {
   1e21a:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1e21c:	b2f9      	uxtb	r1, r7
   1e21e:	f042 0201 	orr.w	r2, r2, #1
						      node_rx->pdu));
   1e222:	f104 041c 	add.w	r4, r4, #28
	} else if (lll->enc_rx) {
   1e226:	d50e      	bpl.n	1e246 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1e228:	3104      	adds	r1, #4
   1e22a:	b2c9      	uxtb	r1, r1
   1e22c:	2008      	movs	r0, #8
   1e22e:	f000 fec5 	bl	1efbc <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1e232:	4622      	mov	r2, r4
   1e234:	4631      	mov	r1, r6
   1e236:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   1e23a:	f001 f9b7 	bl	1f5ac <radio_ccm_rx_pkt_set>
}
   1e23e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1e242:	f000 bee3 	b.w	1f00c <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1e246:	2008      	movs	r0, #8
   1e248:	f000 feb8 	bl	1efbc <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1e24c:	4620      	mov	r0, r4
}
   1e24e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1e252:	f000 bedb 	b.w	1f00c <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1e256:	4a07      	ldr	r2, [pc, #28]	; (1e274 <lll_conn_rx_pkt_set+0x80>)
   1e258:	4907      	ldr	r1, [pc, #28]	; (1e278 <lll_conn_rx_pkt_set+0x84>)
   1e25a:	4808      	ldr	r0, [pc, #32]	; (1e27c <lll_conn_rx_pkt_set+0x88>)
   1e25c:	f240 235a 	movw	r3, #602	; 0x25a
   1e260:	f006 fe51 	bl	24f06 <printk>
   1e264:	4040      	eors	r0, r0
   1e266:	f380 8811 	msr	BASEPRI, r0
   1e26a:	f04f 0003 	mov.w	r0, #3
   1e26e:	df02      	svc	2
   1e270:	e7c7      	b.n	1e202 <lll_conn_rx_pkt_set+0xe>
   1e272:	bf00      	nop
   1e274:	0002cee8 	.word	0x0002cee8
   1e278:	0002ce34 	.word	0x0002ce34
   1e27c:	0002bfdc 	.word	0x0002bfdc

0001e280 <lll_conn_isr_tx>:
{
   1e280:	b538      	push	{r3, r4, r5, lr}
   1e282:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1e284:	f7fe fbc8 	bl	1ca18 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1e288:	2096      	movs	r0, #150	; 0x96
   1e28a:	f001 f86f 	bl	1f36c <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1e28e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1e292:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e296:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1e29a:	f000 0007 	and.w	r0, r0, #7
   1e29e:	f002 0207 	and.w	r2, r2, #7
   1e2a2:	2100      	movs	r1, #0
   1e2a4:	f000 ff7e 	bl	1f1a4 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1e2a8:	4620      	mov	r0, r4
   1e2aa:	f7ff ffa3 	bl	1e1f4 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1e2ae:	f000 fef5 	bl	1f09c <radio_is_ready>
   1e2b2:	bb58      	cbnz	r0, 1e30c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1e2b4:	f001 f974 	bl	1f5a0 <radio_tmr_tifs_base_get>
   1e2b8:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e2ba:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e2be:	2101      	movs	r1, #1
   1e2c0:	f000 0007 	and.w	r0, r0, #7
   1e2c4:	f000 feb8 	bl	1f038 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1e2c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1e2cc:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e2d0:	4405      	add	r5, r0
   1e2d2:	2b02      	cmp	r3, #2
   1e2d4:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1e2d8:	d016      	beq.n	1e308 <lll_conn_isr_tx+0x88>
		return 376;
   1e2da:	2b04      	cmp	r3, #4
   1e2dc:	bf14      	ite	ne
   1e2de:	2328      	movne	r3, #40	; 0x28
   1e2e0:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1e2e4:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1e2e8:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1e2ec:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1e2f0:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1e2f2:	f000 fe9d 	bl	1f030 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1e2f6:	1a28      	subs	r0, r5, r0
   1e2f8:	f001 f90a 	bl	1f510 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1e2fc:	4621      	mov	r1, r4
   1e2fe:	480a      	ldr	r0, [pc, #40]	; (1e328 <lll_conn_isr_tx+0xa8>)
}
   1e300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1e304:	f000 bdae 	b.w	1ee64 <radio_isr_set>
	switch (phy) {
   1e308:	2318      	movs	r3, #24
   1e30a:	e7eb      	b.n	1e2e4 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1e30c:	4a07      	ldr	r2, [pc, #28]	; (1e32c <lll_conn_isr_tx+0xac>)
   1e30e:	4908      	ldr	r1, [pc, #32]	; (1e330 <lll_conn_isr_tx+0xb0>)
   1e310:	4808      	ldr	r0, [pc, #32]	; (1e334 <lll_conn_isr_tx+0xb4>)
   1e312:	f240 2313 	movw	r3, #531	; 0x213
   1e316:	f006 fdf6 	bl	24f06 <printk>
   1e31a:	4040      	eors	r0, r0
   1e31c:	f380 8811 	msr	BASEPRI, r0
   1e320:	f04f 0003 	mov.w	r0, #3
   1e324:	df02      	svc	2
   1e326:	e7c5      	b.n	1e2b4 <lll_conn_isr_tx+0x34>
   1e328:	0001e471 	.word	0x0001e471
   1e32c:	0002cee8 	.word	0x0002cee8
   1e330:	0002ce3c 	.word	0x0002ce3c
   1e334:	0002bfdc 	.word	0x0002bfdc

0001e338 <lll_conn_tx_pkt_set>:
{
   1e338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e33a:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1e33c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   1e340:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   1e342:	f001 0407 	and.w	r4, r1, #7
{
   1e346:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1e348:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1e34c:	4620      	mov	r0, r4
   1e34e:	f000 fdef 	bl	1ef30 <radio_phy_set>
	} else if (lll->enc_tx) {
   1e352:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1e356:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1e358:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1e35a:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1e35e:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1e360:	d50d      	bpl.n	1e37e <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1e362:	3104      	adds	r1, #4
   1e364:	b2c9      	uxtb	r1, r1
   1e366:	2008      	movs	r0, #8
   1e368:	f000 fe28 	bl	1efbc <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1e36c:	4639      	mov	r1, r7
   1e36e:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1e372:	f001 f959 	bl	1f628 <radio_ccm_tx_pkt_set>
}
   1e376:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1e37a:	f000 be4d 	b.w	1f018 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1e37e:	2008      	movs	r0, #8
   1e380:	f000 fe1c 	bl	1efbc <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1e384:	4638      	mov	r0, r7
}
   1e386:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1e38a:	f000 be45 	b.w	1f018 <radio_pkt_tx_set>
   1e38e:	bf00      	nop

0001e390 <lll_conn_pdu_tx_prep>:
{
   1e390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e394:	4604      	mov	r4, r0
   1e396:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e398:	aa01      	add	r2, sp, #4
   1e39a:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   1e39c:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e39e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1e3a0:	f7f1 fece 	bl	10140 <memq_peek>
	if (lll->empty || !link) {
   1e3a4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e3a8:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1e3aa:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1e3ac:	d432      	bmi.n	1e414 <lll_conn_pdu_tx_prep+0x84>
   1e3ae:	2800      	cmp	r0, #0
   1e3b0:	d04e      	beq.n	1e450 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1e3b2:	9b01      	ldr	r3, [sp, #4]
   1e3b4:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1e3b8:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1e3bc:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1e3c0:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1e3c4:	b913      	cbnz	r3, 1e3cc <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1e3c6:	786b      	ldrb	r3, [r5, #1]
   1e3c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   1e3cc:	b137      	cbz	r7, 1e3dc <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1e3ce:	f818 2007 	ldrb.w	r2, [r8, r7]
   1e3d2:	2101      	movs	r1, #1
   1e3d4:	f361 0201 	bfi	r2, r1, #0, #2
   1e3d8:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1e3dc:	1bdb      	subs	r3, r3, r7
   1e3de:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1e3e0:	4620      	mov	r0, r4
   1e3e2:	f7fc f897 	bl	1a514 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1e3e6:	786b      	ldrb	r3, [r5, #1]
   1e3e8:	4283      	cmp	r3, r0
   1e3ea:	d924      	bls.n	1e436 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1e3ec:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1e3ee:	f818 3007 	ldrb.w	r3, [r8, r7]
   1e3f2:	f043 0310 	orr.w	r3, r3, #16
   1e3f6:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1e3fa:	f818 3007 	ldrb.w	r3, [r8, r7]
   1e3fe:	f36f 1347 	bfc	r3, #5, #3
   1e402:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1e406:	2300      	movs	r3, #0
   1e408:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1e40a:	f8c9 5000 	str.w	r5, [r9]
}
   1e40e:	b003      	add	sp, #12
   1e410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1e414:	f043 0304 	orr.w	r3, r3, #4
   1e418:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1e41c:	f000 fe72 	bl	1f104 <radio_pkt_empty_get>
   1e420:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1e422:	b1e6      	cbz	r6, 1e45e <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1e424:	7803      	ldrb	r3, [r0, #0]
   1e426:	f043 0310 	orr.w	r3, r3, #16
   1e42a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1e42c:	f8c9 5000 	str.w	r5, [r9]
}
   1e430:	b003      	add	sp, #12
   1e432:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1e436:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1e438:	6832      	ldr	r2, [r6, #0]
   1e43a:	429a      	cmp	r2, r3
			p->md = 1U;
   1e43c:	f818 3007 	ldrb.w	r3, [r8, r7]
   1e440:	bf14      	ite	ne
   1e442:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1e446:	f36f 1304 	bfceq	r3, #4, #1
   1e44a:	f808 3007 	strb.w	r3, [r8, r7]
   1e44e:	e7d4      	b.n	1e3fa <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1e450:	f043 0304 	orr.w	r3, r3, #4
   1e454:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1e458:	f000 fe54 	bl	1f104 <radio_pkt_empty_get>
   1e45c:	4605      	mov	r5, r0
			p->md = 0U;
   1e45e:	782b      	ldrb	r3, [r5, #0]
   1e460:	f36f 1304 	bfc	r3, #4, #1
   1e464:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1e466:	f8c9 5000 	str.w	r5, [r9]
}
   1e46a:	b003      	add	sp, #12
   1e46c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e470 <lll_conn_isr_rx>:
{
   1e470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e474:	b083      	sub	sp, #12
   1e476:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1e478:	f000 fe1a 	bl	1f0b0 <radio_is_done>
	if (trx_done) {
   1e47c:	b2c0      	uxtb	r0, r0
   1e47e:	b950      	cbnz	r0, 1e496 <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1e480:	f7fe fad2 	bl	1ca28 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1e484:	48bd      	ldr	r0, [pc, #756]	; (1e77c <lll_conn_isr_rx+0x30c>)
   1e486:	4621      	mov	r1, r4
   1e488:	f000 fcec 	bl	1ee64 <radio_isr_set>
}
   1e48c:	b003      	add	sp, #12
   1e48e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		radio_disable();
   1e492:	f000 bde3 	b.w	1f05c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1e496:	f000 fe2b 	bl	1f0f0 <radio_crc_is_valid>
   1e49a:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1e49c:	f000 ff0a 	bl	1f2b4 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1e4a0:	f7fe fac2 	bl	1ca28 <lll_isr_rx_status_reset>
	trx_cnt++;
   1e4a4:	4ab6      	ldr	r2, [pc, #728]	; (1e780 <lll_conn_isr_rx+0x310>)
   1e4a6:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e4a8:	2001      	movs	r0, #1
	trx_cnt++;
   1e4aa:	4403      	add	r3, r0
   1e4ac:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e4ae:	f7f5 fed5 	bl	1425c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e4b2:	4606      	mov	r6, r0
   1e4b4:	2800      	cmp	r0, #0
   1e4b6:	f000 80e7 	beq.w	1e688 <lll_conn_isr_rx+0x218>
	if (crc_ok) {
   1e4ba:	b9f5      	cbnz	r5, 1e4fa <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   1e4bc:	4bb1      	ldr	r3, [pc, #708]	; (1e784 <lll_conn_isr_rx+0x314>)
   1e4be:	781f      	ldrb	r7, [r3, #0]
   1e4c0:	2f00      	cmp	r7, #0
   1e4c2:	f000 8083 	beq.w	1e5cc <lll_conn_isr_rx+0x15c>
		crc_expire--;
   1e4c6:	3f01      	subs	r7, #1
   1e4c8:	b2ff      	uxtb	r7, r7
   1e4ca:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1e4cc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e4d0:	a901      	add	r1, sp, #4
   1e4d2:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1e4d4:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e4d8:	f7ff ff5a 	bl	1e390 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e4dc:	2f00      	cmp	r7, #0
   1e4de:	f040 814a 	bne.w	1e776 <lll_conn_isr_rx+0x306>
		radio_isr_set(isr_done, param);
   1e4e2:	48a6      	ldr	r0, [pc, #664]	; (1e77c <lll_conn_isr_rx+0x30c>)
   1e4e4:	4621      	mov	r1, r4
   1e4e6:	f000 fcbd 	bl	1ee64 <radio_isr_set>
		} else if (!lll->role) {
   1e4ea:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1e4ee:	2b00      	cmp	r3, #0
   1e4f0:	f280 80bc 	bge.w	1e66c <lll_conn_isr_rx+0x1fc>
			radio_switch_complete_and_disable();
   1e4f4:	f000 feb6 	bl	1f264 <radio_switch_complete_and_disable>
   1e4f8:	e07d      	b.n	1e5f6 <lll_conn_isr_rx+0x186>
	if (pdu_data_rx->nesn != lll->sn) {
   1e4fa:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e4fe:	7f32      	ldrb	r2, [r6, #28]
   1e500:	f003 0101 	and.w	r1, r3, #1
   1e504:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1e508:	4288      	cmp	r0, r1
   1e50a:	f000 80cd 	beq.w	1e6a8 <lll_conn_isr_rx+0x238>
		if (lll->role) {
   1e50e:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1e512:	f081 0101 	eor.w	r1, r1, #1
   1e516:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1e51a:	2a00      	cmp	r2, #0
		lll->sn++;
   1e51c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   1e520:	da05      	bge.n	1e52e <lll_conn_isr_rx+0xbe>
			lll->periph.latency_enabled = 1;
   1e522:	f894 3020 	ldrb.w	r3, [r4, #32]
   1e526:	f043 0304 	orr.w	r3, r3, #4
   1e52a:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   1e52e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e532:	f013 0804 	ands.w	r8, r3, #4
   1e536:	f040 80fc 	bne.w	1e732 <lll_conn_isr_rx+0x2c2>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1e53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1e53e:	aa01      	add	r2, sp, #4
   1e540:	f7f1 fdfe 	bl	10140 <memq_peek>
		if (link) {
   1e544:	4605      	mov	r5, r0
   1e546:	2800      	cmp	r0, #0
   1e548:	f000 810a 	beq.w	1e760 <lll_conn_isr_rx+0x2f0>
			pdu_data_tx = (void *)(tx->pdu +
   1e54c:	9f01      	ldr	r7, [sp, #4]
					       lll->packet_tx_head_offset);
   1e54e:	f894 905d 	ldrb.w	r9, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   1e552:	3704      	adds	r7, #4
   1e554:	eb07 0309 	add.w	r3, r7, r9
			pdu_data_tx_len = pdu_data_tx->len;
   1e558:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1e55a:	b172      	cbz	r2, 1e57a <lll_conn_isr_rx+0x10a>
				if (lll->enc_tx) {
   1e55c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e560:	06d9      	lsls	r1, r3, #27
   1e562:	d50a      	bpl.n	1e57a <lll_conn_isr_rx+0x10a>
					lll->ccm_tx.counter++;
   1e564:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1e568:	3301      	adds	r3, #1
   1e56a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1e56e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1e572:	f143 0300 	adc.w	r3, r3, #0
   1e576:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1e57a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1e57e:	444a      	add	r2, r9
   1e580:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1e582:	429a      	cmp	r2, r3
   1e584:	f0c0 80f3 	bcc.w	1e76e <lll_conn_isr_rx+0x2fe>
			} else if (offset == lll->packet_tx_head_len) {
   1e588:	f000 8135 	beq.w	1e7f6 <lll_conn_isr_rx+0x386>
				LL_ASSERT(0);
   1e58c:	4a7e      	ldr	r2, [pc, #504]	; (1e788 <lll_conn_isr_rx+0x318>)
   1e58e:	497f      	ldr	r1, [pc, #508]	; (1e78c <lll_conn_isr_rx+0x31c>)
   1e590:	487f      	ldr	r0, [pc, #508]	; (1e790 <lll_conn_isr_rx+0x320>)
   1e592:	f240 33a3 	movw	r3, #931	; 0x3a3
   1e596:	f006 fcb6 	bl	24f06 <printk>
   1e59a:	4040      	eors	r0, r0
   1e59c:	f380 8811 	msr	BASEPRI, r0
   1e5a0:	f04f 0003 	mov.w	r0, #3
   1e5a4:	df02      	svc	2
	tx_release = NULL;
   1e5a6:	2500      	movs	r5, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1e5a8:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1e5ac:	2b00      	cmp	r3, #0
   1e5ae:	f2c0 811e 	blt.w	1e7ee <lll_conn_isr_rx+0x37e>
			    !pdu_data_rx->md) {
   1e5b2:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1e5b4:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1e5b6:	bf58      	it	pl
   1e5b8:	f817 8009 	ldrbpl.w	r8, [r7, r9]
   1e5bc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e5c0:	bf5c      	itt	pl
   1e5c2:	f088 0810 	eorpl.w	r8, r8, #16
   1e5c6:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1e5ca:	e070      	b.n	1e6ae <lll_conn_isr_rx+0x23e>
		crc_expire--;
   1e5cc:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e5ce:	a901      	add	r1, sp, #4
   1e5d0:	4620      	mov	r0, r4
		crc_expire--;
   1e5d2:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e5d4:	f7ff fedc 	bl	1e390 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e5d8:	2096      	movs	r0, #150	; 0x96
   1e5da:	f000 fec7 	bl	1f36c <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1e5de:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e5e2:	f000 0007 	and.w	r0, r0, #7
   1e5e6:	f000 fd95 	bl	1f114 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1e5ea:	486a      	ldr	r0, [pc, #424]	; (1e794 <lll_conn_isr_rx+0x324>)
   1e5ec:	4621      	mov	r1, r4
   1e5ee:	f000 fc39 	bl	1ee64 <radio_isr_set>
		radio_tmr_end_capture();
   1e5f2:	f000 ffc7 	bl	1f584 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1e5f6:	9901      	ldr	r1, [sp, #4]
   1e5f8:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   1e5fc:	780b      	ldrb	r3, [r1, #0]
   1e5fe:	f023 000c 	bic.w	r0, r3, #12
   1e602:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1e606:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1e608:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1e60c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1e610:	4303      	orrs	r3, r0
   1e612:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1e614:	4620      	mov	r0, r4
   1e616:	f7ff fe8f 	bl	1e338 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1e61a:	f000 fd3f 	bl	1f09c <radio_is_ready>
   1e61e:	2800      	cmp	r0, #0
   1e620:	d16a      	bne.n	1e6f8 <lll_conn_isr_rx+0x288>
	if (!radio_tmr_aa_restore()) {
   1e622:	f000 ffa3 	bl	1f56c <radio_tmr_aa_restore>
   1e626:	b170      	cbz	r0, 1e646 <lll_conn_isr_rx+0x1d6>
	if (tx_release) {
   1e628:	b19d      	cbz	r5, 1e652 <lll_conn_isr_rx+0x1e2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1e62a:	89a0      	ldrh	r0, [r4, #12]
   1e62c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e630:	4298      	cmp	r0, r3
   1e632:	d06f      	beq.n	1e714 <lll_conn_isr_rx+0x2a4>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1e634:	4629      	mov	r1, r5
   1e636:	f7fb fd39 	bl	1a0ac <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1e63a:	b967      	cbnz	r7, 1e656 <lll_conn_isr_rx+0x1e6>
		ull_rx_sched();
   1e63c:	f7f5 fe52 	bl	142e4 <ull_rx_sched>
}
   1e640:	b003      	add	sp, #12
   1e642:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1e646:	f000 ff85 	bl	1f554 <radio_tmr_aa_get>
   1e64a:	f000 ff89 	bl	1f560 <radio_tmr_aa_save>
	if (tx_release) {
   1e64e:	2d00      	cmp	r5, #0
   1e650:	d1eb      	bne.n	1e62a <lll_conn_isr_rx+0x1ba>
	if (is_rx_enqueue) {
   1e652:	2f00      	cmp	r7, #0
   1e654:	d0f4      	beq.n	1e640 <lll_conn_isr_rx+0x1d0>
		ull_pdu_rx_alloc();
   1e656:	f7f5 fe1f 	bl	14298 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1e65a:	2303      	movs	r3, #3
   1e65c:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1e65e:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1e660:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1e662:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1e664:	4631      	mov	r1, r6
   1e666:	f7f5 fe2d 	bl	142c4 <ull_rx_put>
	if (is_ull_rx || is_iq_report) {
   1e66a:	e7e7      	b.n	1e63c <lll_conn_isr_rx+0x1cc>
			radio_disable();
   1e66c:	f000 fcf6 	bl	1f05c <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1e670:	f000 fd14 	bl	1f09c <radio_is_ready>
   1e674:	2800      	cmp	r0, #0
   1e676:	f040 80a9 	bne.w	1e7cc <lll_conn_isr_rx+0x35c>
			lll->empty = is_empty_pdu_tx_retry;
   1e67a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e67e:	f369 0382 	bfi	r3, r9, #2, #1
   1e682:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   1e686:	e7cc      	b.n	1e622 <lll_conn_isr_rx+0x1b2>
	LL_ASSERT(node_rx);
   1e688:	4a3f      	ldr	r2, [pc, #252]	; (1e788 <lll_conn_isr_rx+0x318>)
   1e68a:	4943      	ldr	r1, [pc, #268]	; (1e798 <lll_conn_isr_rx+0x328>)
   1e68c:	4840      	ldr	r0, [pc, #256]	; (1e790 <lll_conn_isr_rx+0x320>)
   1e68e:	23f2      	movs	r3, #242	; 0xf2
   1e690:	f006 fc39 	bl	24f06 <printk>
   1e694:	4040      	eors	r0, r0
   1e696:	f380 8811 	msr	BASEPRI, r0
   1e69a:	f04f 0003 	mov.w	r0, #3
   1e69e:	df02      	svc	2
	if (crc_ok) {
   1e6a0:	2d00      	cmp	r5, #0
   1e6a2:	f43f af0b 	beq.w	1e4bc <lll_conn_isr_rx+0x4c>
   1e6a6:	e728      	b.n	1e4fa <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   1e6a8:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1e6ac:	4645      	mov	r5, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1e6ae:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1e6b2:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1e6b6:	428a      	cmp	r2, r1
   1e6b8:	d076      	beq.n	1e7a8 <lll_conn_isr_rx+0x338>
	is_rx_enqueue = 0U;
   1e6ba:	2700      	movs	r7, #0
		crc_expire = 0U;
   1e6bc:	4a31      	ldr	r2, [pc, #196]	; (1e784 <lll_conn_isr_rx+0x314>)
   1e6be:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1e6c0:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1e6c4:	4b35      	ldr	r3, [pc, #212]	; (1e79c <lll_conn_isr_rx+0x32c>)
		crc_expire = 0U;
   1e6c6:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e6c8:	4620      	mov	r0, r4
		crc_valid = 1U;
   1e6ca:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e6cc:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1e6ce:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1e6d0:	f7ff fe5e 	bl	1e390 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e6d4:	f1b8 0f00 	cmp.w	r8, #0
   1e6d8:	f47f af03 	bne.w	1e4e2 <lll_conn_isr_rx+0x72>
   1e6dc:	7f33      	ldrb	r3, [r6, #28]
   1e6de:	06d9      	lsls	r1, r3, #27
   1e6e0:	f53f af7a 	bmi.w	1e5d8 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   1e6e4:	9b01      	ldr	r3, [sp, #4]
   1e6e6:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1e6e8:	06d2      	lsls	r2, r2, #27
   1e6ea:	f53f af75 	bmi.w	1e5d8 <lll_conn_isr_rx+0x168>
			      (pdu_data_tx->md == 0) &&
   1e6ee:	785b      	ldrb	r3, [r3, #1]
   1e6f0:	2b00      	cmp	r3, #0
   1e6f2:	f43f aef6 	beq.w	1e4e2 <lll_conn_isr_rx+0x72>
   1e6f6:	e76f      	b.n	1e5d8 <lll_conn_isr_rx+0x168>
	LL_ASSERT(!radio_is_ready());
   1e6f8:	4a23      	ldr	r2, [pc, #140]	; (1e788 <lll_conn_isr_rx+0x318>)
   1e6fa:	4929      	ldr	r1, [pc, #164]	; (1e7a0 <lll_conn_isr_rx+0x330>)
   1e6fc:	4824      	ldr	r0, [pc, #144]	; (1e790 <lll_conn_isr_rx+0x320>)
   1e6fe:	f240 1369 	movw	r3, #361	; 0x169
   1e702:	f006 fc00 	bl	24f06 <printk>
   1e706:	4040      	eors	r0, r0
   1e708:	f380 8811 	msr	BASEPRI, r0
   1e70c:	f04f 0003 	mov.w	r0, #3
   1e710:	df02      	svc	2
   1e712:	e786      	b.n	1e622 <lll_conn_isr_rx+0x1b2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1e714:	4a1c      	ldr	r2, [pc, #112]	; (1e788 <lll_conn_isr_rx+0x318>)
   1e716:	4923      	ldr	r1, [pc, #140]	; (1e7a4 <lll_conn_isr_rx+0x334>)
   1e718:	481d      	ldr	r0, [pc, #116]	; (1e790 <lll_conn_isr_rx+0x320>)
   1e71a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1e71e:	f006 fbf2 	bl	24f06 <printk>
   1e722:	4040      	eors	r0, r0
   1e724:	f380 8811 	msr	BASEPRI, r0
   1e728:	f04f 0003 	mov.w	r0, #3
   1e72c:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1e72e:	89a0      	ldrh	r0, [r4, #12]
   1e730:	e780      	b.n	1e634 <lll_conn_isr_rx+0x1c4>
			lll->empty = 0;
   1e732:	f36f 0382 	bfc	r3, #2, #1
   1e736:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1e73a:	f000 fce3 	bl	1f104 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1e73e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1e742:	2b00      	cmp	r3, #0
   1e744:	db0c      	blt.n	1e760 <lll_conn_isr_rx+0x2f0>
			    !pdu_data_rx->md) {
   1e746:	7f32      	ldrb	r2, [r6, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1e748:	f012 0510 	ands.w	r5, r2, #16
   1e74c:	d109      	bne.n	1e762 <lll_conn_isr_rx+0x2f2>
				*is_done = !pdu_data_tx->md;
   1e74e:	f890 8000 	ldrb.w	r8, [r0]
   1e752:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e756:	f088 0810 	eor.w	r8, r8, #16
   1e75a:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1e75e:	e7a6      	b.n	1e6ae <lll_conn_isr_rx+0x23e>
   1e760:	7f32      	ldrb	r2, [r6, #28]
   1e762:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   1e766:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1e76a:	4645      	mov	r5, r8
   1e76c:	e79f      	b.n	1e6ae <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_offset = offset;
   1e76e:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   1e772:	2500      	movs	r5, #0
   1e774:	e718      	b.n	1e5a8 <lll_conn_isr_rx+0x138>
	is_rx_enqueue = 0U;
   1e776:	462f      	mov	r7, r5
   1e778:	e72e      	b.n	1e5d8 <lll_conn_isr_rx+0x168>
   1e77a:	bf00      	nop
   1e77c:	0001e099 	.word	0x0001e099
   1e780:	20003408 	.word	0x20003408
   1e784:	2000357b 	.word	0x2000357b
   1e788:	0002cee8 	.word	0x0002cee8
   1e78c:	0002c074 	.word	0x0002c074
   1e790:	0002bfdc 	.word	0x0002bfdc
   1e794:	0001e281 	.word	0x0001e281
   1e798:	0002ce34 	.word	0x0002ce34
   1e79c:	2000357c 	.word	0x2000357c
   1e7a0:	0002ce3c 	.word	0x0002ce3c
   1e7a4:	0002cf3c 	.word	0x0002cf3c
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1e7a8:	2003      	movs	r0, #3
   1e7aa:	f7f5 fd57 	bl	1425c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1e7ae:	b1d8      	cbz	r0, 1e7e8 <lll_conn_isr_rx+0x378>
		lll->nesn++;
   1e7b0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e7b4:	f083 0302 	eor.w	r3, r3, #2
   1e7b8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   1e7bc:	7f73      	ldrb	r3, [r6, #29]
   1e7be:	b19b      	cbz	r3, 1e7e8 <lll_conn_isr_rx+0x378>
			if (lll->enc_rx) {
   1e7c0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e7c4:	0718      	lsls	r0, r3, #28
   1e7c6:	d424      	bmi.n	1e812 <lll_conn_isr_rx+0x3a2>
			*is_rx_enqueue = 1U;
   1e7c8:	2701      	movs	r7, #1
   1e7ca:	e777      	b.n	1e6bc <lll_conn_isr_rx+0x24c>
			LL_ASSERT(!radio_is_ready());
   1e7cc:	4a38      	ldr	r2, [pc, #224]	; (1e8b0 <lll_conn_isr_rx+0x440>)
   1e7ce:	4939      	ldr	r1, [pc, #228]	; (1e8b4 <lll_conn_isr_rx+0x444>)
   1e7d0:	4839      	ldr	r0, [pc, #228]	; (1e8b8 <lll_conn_isr_rx+0x448>)
   1e7d2:	f44f 7398 	mov.w	r3, #304	; 0x130
   1e7d6:	f006 fb96 	bl	24f06 <printk>
   1e7da:	4040      	eors	r0, r0
   1e7dc:	f380 8811 	msr	BASEPRI, r0
   1e7e0:	f04f 0003 	mov.w	r0, #3
   1e7e4:	df02      	svc	2
   1e7e6:	e748      	b.n	1e67a <lll_conn_isr_rx+0x20a>
   1e7e8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e7ec:	e765      	b.n	1e6ba <lll_conn_isr_rx+0x24a>
   1e7ee:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e7f2:	7f32      	ldrb	r2, [r6, #28]
   1e7f4:	e75b      	b.n	1e6ae <lll_conn_isr_rx+0x23e>
				lll->packet_tx_head_len = 0;
   1e7f6:	2200      	movs	r2, #0
   1e7f8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   1e7fc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1e7fe:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1e802:	f7f1 fca5 	bl	10150 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1e806:	9b01      	ldr	r3, [sp, #4]
   1e808:	681a      	ldr	r2, [r3, #0]
   1e80a:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1e80c:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1e80e:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   1e810:	e6ca      	b.n	1e5a8 <lll_conn_isr_rx+0x138>
				done = radio_ccm_is_done();
   1e812:	f000 ff31 	bl	1f678 <radio_ccm_is_done>
				LL_ASSERT(done);
   1e816:	2800      	cmp	r0, #0
   1e818:	d03b      	beq.n	1e892 <lll_conn_isr_rx+0x422>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1e81a:	f000 ff4f 	bl	1f6bc <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1e81e:	bb30      	cbnz	r0, 1e86e <lll_conn_isr_rx+0x3fe>
				    lll->ccm_rx.counter == 0 &&
   1e820:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   1e824:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   1e828:	4313      	orrs	r3, r2
   1e82a:	d104      	bne.n	1e836 <lll_conn_isr_rx+0x3c6>
				    (pdu_data_rx->ll_id ==
   1e82c:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1e82e:	f003 0303 	and.w	r3, r3, #3
   1e832:	2b03      	cmp	r3, #3
   1e834:	d004      	beq.n	1e840 <lll_conn_isr_rx+0x3d0>
					mic_state = LLL_CONN_MIC_FAIL;
   1e836:	4b21      	ldr	r3, [pc, #132]	; (1e8bc <lll_conn_isr_rx+0x44c>)
   1e838:	2202      	movs	r2, #2
   1e83a:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1e83c:	2700      	movs	r7, #0
   1e83e:	e6f0      	b.n	1e622 <lll_conn_isr_rx+0x1b2>
						radio_pkt_scratch_get();
   1e840:	f000 fc64 	bl	1f10c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1e844:	7843      	ldrb	r3, [r0, #1]
   1e846:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1e848:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1e84a:	d8f4      	bhi.n	1e836 <lll_conn_isr_rx+0x3c6>
						memcpy(pdu_data_rx,
   1e84c:	3303      	adds	r3, #3
   1e84e:	b2da      	uxtb	r2, r3
   1e850:	f106 001c 	add.w	r0, r6, #28
   1e854:	f00c f901 	bl	2aa5a <memcpy>
						lll->ccm_rx.counter--;
   1e858:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1e85c:	3b01      	subs	r3, #1
   1e85e:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1e862:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1e866:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1e86a:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   1e86e:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1e872:	3301      	adds	r3, #1
   1e874:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1e878:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   1e87c:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   1e880:	f143 0300 	adc.w	r3, r3, #0
   1e884:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1e886:	4b0d      	ldr	r3, [pc, #52]	; (1e8bc <lll_conn_isr_rx+0x44c>)
   1e888:	2701      	movs	r7, #1
   1e88a:	701f      	strb	r7, [r3, #0]
		if (err) {
   1e88c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1e890:	e714      	b.n	1e6bc <lll_conn_isr_rx+0x24c>
				LL_ASSERT(done);
   1e892:	4a07      	ldr	r2, [pc, #28]	; (1e8b0 <lll_conn_isr_rx+0x440>)
   1e894:	490a      	ldr	r1, [pc, #40]	; (1e8c0 <lll_conn_isr_rx+0x450>)
   1e896:	4808      	ldr	r0, [pc, #32]	; (1e8b8 <lll_conn_isr_rx+0x448>)
   1e898:	f240 33be 	movw	r3, #958	; 0x3be
   1e89c:	f006 fb33 	bl	24f06 <printk>
   1e8a0:	4040      	eors	r0, r0
   1e8a2:	f380 8811 	msr	BASEPRI, r0
   1e8a6:	f04f 0003 	mov.w	r0, #3
   1e8aa:	df02      	svc	2
   1e8ac:	e7b5      	b.n	1e81a <lll_conn_isr_rx+0x3aa>
   1e8ae:	bf00      	nop
   1e8b0:	0002cee8 	.word	0x0002cee8
   1e8b4:	0002ce3c 	.word	0x0002ce3c
   1e8b8:	0002bfdc 	.word	0x0002bfdc
   1e8bc:	2000357d 	.word	0x2000357d
   1e8c0:	0002cf34 	.word	0x0002cf34

0001e8c4 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1e8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1e8c6:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1e8c8:	89a2      	ldrh	r2, [r4, #12]
   1e8ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1e8ce:	429a      	cmp	r2, r3
{
   1e8d0:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   1e8d2:	f000 80d0 	beq.w	1ea76 <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1e8d6:	4605      	mov	r5, r0
   1e8d8:	f7ff fc48 	bl	1e16c <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e8dc:	892b      	ldrh	r3, [r5, #8]
   1e8de:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1e8e0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e8e2:	441a      	add	r2, r3
   1e8e4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1e8e6:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1e8e8:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1e8ea:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1e8ec:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1e8ee:	1c41      	adds	r1, r0, #1
   1e8f0:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1e8f2:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1e8f4:	f04f 0100 	mov.w	r1, #0
   1e8f8:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1e8fa:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1e8fe:	f100 808d 	bmi.w	1ea1c <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1e902:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1e906:	460b      	mov	r3, r1
   1e908:	7fa1      	ldrb	r1, [r4, #30]
   1e90a:	9000      	str	r0, [sp, #0]
   1e90c:	f104 001f 	add.w	r0, r4, #31
   1e910:	f7fc fb16 	bl	1af40 <lll_chan_sel_1>
   1e914:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   1e916:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   1e91a:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   1e91c:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   1e920:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   1e922:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   1e924:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   1e926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   1e928:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   1e92a:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   1e92c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   1e930:	428b      	cmp	r3, r1
   1e932:	bf28      	it	cs
   1e934:	460b      	movcs	r3, r1
	if (!lll->empty) {
   1e936:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   1e93a:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   1e93c:	f000 808d 	beq.w	1ea5a <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   1e940:	f000 fad2 	bl	1eee8 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e944:	2000      	movs	r0, #0
   1e946:	f000 fb03 	bl	1ef50 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1e94a:	4620      	mov	r0, r4
   1e94c:	f7ff fc52 	bl	1e1f4 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1e950:	1d20      	adds	r0, r4, #4
   1e952:	f000 fb1b 	bl	1ef8c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1e956:	8923      	ldrh	r3, [r4, #8]
   1e958:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1e95a:	f240 605b 	movw	r0, #1627	; 0x65b
   1e95e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1e962:	f000 fbb9 	bl	1f0d8 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   1e966:	4630      	mov	r0, r6
   1e968:	f7fe f810 	bl	1c98c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1e96c:	4621      	mov	r1, r4
   1e96e:	4846      	ldr	r0, [pc, #280]	; (1ea88 <prepare_cb+0x1c4>)
   1e970:	f000 fa78 	bl	1ee64 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1e974:	2096      	movs	r0, #150	; 0x96
   1e976:	f000 fcf9 	bl	1f36c <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1e97a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1e97e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e982:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1e986:	2100      	movs	r1, #0
   1e988:	f002 0207 	and.w	r2, r2, #7
   1e98c:	f000 0007 	and.w	r0, r0, #7
   1e990:	f000 fc08 	bl	1f1a4 <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1e994:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e996:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1e998:	4638      	mov	r0, r7
   1e99a:	f7fd ffd9 	bl	1c950 <lll_event_offset_get>
   1e99e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1e9a0:	686a      	ldr	r2, [r5, #4]
   1e9a2:	f106 0109 	add.w	r1, r6, #9
   1e9a6:	2000      	movs	r0, #0
   1e9a8:	f000 fcec 	bl	1f384 <radio_tmr_start>
   1e9ac:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1e9ae:	f000 fdbd 	bl	1f52c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1e9b2:	2000      	movs	r0, #0
   1e9b4:	f000 fdd4 	bl	1f560 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1e9b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1e9ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1e9be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1e9c0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1e9c4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e9c8:	2101      	movs	r1, #1
   1e9ca:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1e9ce:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1e9d0:	f000 fb30 	bl	1f034 <radio_rx_ready_delay_get>
   1e9d4:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1e9d6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1e9da:	f000 0007 	and.w	r0, r0, #7
   1e9de:	2802      	cmp	r0, #2
   1e9e0:	d039      	beq.n	1ea56 <prepare_cb+0x192>
		return 40;
   1e9e2:	2804      	cmp	r0, #4
   1e9e4:	bf0c      	ite	eq
   1e9e6:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1e9ea:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e9ec:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1e9ee:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1e9f0:	f000 fb22 	bl	1f038 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1e9f4:	4428      	add	r0, r5
   1e9f6:	f000 fd8b 	bl	1f510 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1e9fa:	89a1      	ldrh	r1, [r4, #12]
   1e9fc:	3105      	adds	r1, #5
   1e9fe:	4632      	mov	r2, r6
   1ea00:	b2c9      	uxtb	r1, r1
   1ea02:	4638      	mov	r0, r7
   1ea04:	f7fd ffb2 	bl	1c96c <lll_preempt_calc>
   1ea08:	b180      	cbz	r0, 1ea2c <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1ea0a:	4820      	ldr	r0, [pc, #128]	; (1ea8c <prepare_cb+0x1c8>)
   1ea0c:	4621      	mov	r1, r4
   1ea0e:	f000 fa29 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1ea12:	f000 fb23 	bl	1f05c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1ea16:	2000      	movs	r0, #0
   1ea18:	b003      	add	sp, #12
   1ea1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1ea1c:	460a      	mov	r2, r1
   1ea1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ea22:	8be1      	ldrh	r1, [r4, #30]
   1ea24:	f7fc fad0 	bl	1afc8 <lll_chan_sel_2>
   1ea28:	4606      	mov	r6, r0
   1ea2a:	e774      	b.n	1e916 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1ea2c:	4620      	mov	r0, r4
   1ea2e:	f7fd ff29 	bl	1c884 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ea32:	2800      	cmp	r0, #0
   1ea34:	d0ef      	beq.n	1ea16 <prepare_cb+0x152>
   1ea36:	4a16      	ldr	r2, [pc, #88]	; (1ea90 <prepare_cb+0x1cc>)
   1ea38:	4916      	ldr	r1, [pc, #88]	; (1ea94 <prepare_cb+0x1d0>)
   1ea3a:	4817      	ldr	r0, [pc, #92]	; (1ea98 <prepare_cb+0x1d4>)
   1ea3c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1ea40:	f006 fa61 	bl	24f06 <printk>
   1ea44:	4040      	eors	r0, r0
   1ea46:	f380 8811 	msr	BASEPRI, r0
   1ea4a:	f04f 0003 	mov.w	r0, #3
   1ea4e:	df02      	svc	2
}
   1ea50:	2000      	movs	r0, #0
   1ea52:	b003      	add	sp, #12
   1ea54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   1ea56:	2318      	movs	r3, #24
   1ea58:	e7c8      	b.n	1e9ec <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   1ea5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1ea5e:	f7f1 fb6f 	bl	10140 <memq_peek>
		if (!link) {
   1ea62:	2800      	cmp	r0, #0
   1ea64:	f47f af6c 	bne.w	1e940 <prepare_cb+0x7c>
			lll->empty = 1U;
   1ea68:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1ea6c:	f043 0304 	orr.w	r3, r3, #4
   1ea70:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   1ea74:	e764      	b.n	1e940 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   1ea76:	4809      	ldr	r0, [pc, #36]	; (1ea9c <prepare_cb+0x1d8>)
   1ea78:	4621      	mov	r1, r4
   1ea7a:	f000 f9f3 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1ea7e:	f000 faed 	bl	1f05c <radio_disable>
}
   1ea82:	2000      	movs	r0, #0
   1ea84:	b003      	add	sp, #12
   1ea86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea88:	0001e471 	.word	0x0001e471
   1ea8c:	0001cac5 	.word	0x0001cac5
   1ea90:	0002cf68 	.word	0x0002cf68
   1ea94:	0002c454 	.word	0x0002c454
   1ea98:	0002bfdc 	.word	0x0002bfdc
   1ea9c:	0001cae9 	.word	0x0001cae9

0001eaa0 <lll_periph_prepare>:
{
   1eaa0:	b510      	push	{r4, lr}
   1eaa2:	b082      	sub	sp, #8
   1eaa4:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1eaa6:	f7fe f96f 	bl	1cd88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1eaaa:	2800      	cmp	r0, #0
   1eaac:	db25      	blt.n	1eafa <lll_periph_prepare+0x5a>
	lll = p->param;
   1eaae:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1eab0:	8920      	ldrh	r0, [r4, #8]
   1eab2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   1eab4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1eab6:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   1eaba:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   1eabc:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   1eabe:	4283      	cmp	r3, r0
   1eac0:	bf28      	it	cs
   1eac2:	4603      	movcs	r3, r0
   1eac4:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1eac6:	4a13      	ldr	r2, [pc, #76]	; (1eb14 <lll_periph_prepare+0x74>)
   1eac8:	4913      	ldr	r1, [pc, #76]	; (1eb18 <lll_periph_prepare+0x78>)
   1eaca:	4814      	ldr	r0, [pc, #80]	; (1eb1c <lll_periph_prepare+0x7c>)
   1eacc:	9400      	str	r4, [sp, #0]
   1eace:	2300      	movs	r3, #0
   1ead0:	f7f5 ff00 	bl	148d4 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ead4:	b108      	cbz	r0, 1eada <lll_periph_prepare+0x3a>
   1ead6:	3077      	adds	r0, #119	; 0x77
   1ead8:	d101      	bne.n	1eade <lll_periph_prepare+0x3e>
}
   1eada:	b002      	add	sp, #8
   1eadc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1eade:	4a10      	ldr	r2, [pc, #64]	; (1eb20 <lll_periph_prepare+0x80>)
   1eae0:	4910      	ldr	r1, [pc, #64]	; (1eb24 <lll_periph_prepare+0x84>)
   1eae2:	4811      	ldr	r0, [pc, #68]	; (1eb28 <lll_periph_prepare+0x88>)
   1eae4:	235e      	movs	r3, #94	; 0x5e
   1eae6:	f006 fa0e 	bl	24f06 <printk>
   1eaea:	4040      	eors	r0, r0
   1eaec:	f380 8811 	msr	BASEPRI, r0
   1eaf0:	f04f 0003 	mov.w	r0, #3
   1eaf4:	df02      	svc	2
}
   1eaf6:	b002      	add	sp, #8
   1eaf8:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1eafa:	4a09      	ldr	r2, [pc, #36]	; (1eb20 <lll_periph_prepare+0x80>)
   1eafc:	490b      	ldr	r1, [pc, #44]	; (1eb2c <lll_periph_prepare+0x8c>)
   1eafe:	480a      	ldr	r0, [pc, #40]	; (1eb28 <lll_periph_prepare+0x88>)
   1eb00:	234d      	movs	r3, #77	; 0x4d
   1eb02:	f006 fa00 	bl	24f06 <printk>
   1eb06:	4040      	eors	r0, r0
   1eb08:	f380 8811 	msr	BASEPRI, r0
   1eb0c:	f04f 0003 	mov.w	r0, #3
   1eb10:	df02      	svc	2
   1eb12:	e7cc      	b.n	1eaae <lll_periph_prepare+0xe>
   1eb14:	0001e8c5 	.word	0x0001e8c5
   1eb18:	0001e195 	.word	0x0001e195
   1eb1c:	0001c949 	.word	0x0001c949
   1eb20:	0002cf68 	.word	0x0002cf68
   1eb24:	0002ce64 	.word	0x0002ce64
   1eb28:	0002bfdc 	.word	0x0002bfdc
   1eb2c:	0002cd78 	.word	0x0002cd78

0001eb30 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1eb32:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1eb34:	89a2      	ldrh	r2, [r4, #12]
   1eb36:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1eb3a:	429a      	cmp	r2, r3
{
   1eb3c:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1eb3e:	f000 8091 	beq.w	1ec64 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1eb42:	4605      	mov	r5, r0
   1eb44:	f7ff fb12 	bl	1e16c <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1eb48:	892b      	ldrh	r3, [r5, #8]
   1eb4a:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1eb4c:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1eb4e:	441a      	add	r2, r3
   1eb50:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1eb52:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1eb54:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1eb56:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1eb58:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1eb5a:	1c41      	adds	r1, r0, #1
   1eb5c:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1eb5e:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1eb60:	f04f 0100 	mov.w	r1, #0
   1eb64:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1eb66:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1eb6a:	d45f      	bmi.n	1ec2c <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1eb6c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1eb70:	460b      	mov	r3, r1
   1eb72:	7fa1      	ldrb	r1, [r4, #30]
   1eb74:	9000      	str	r0, [sp, #0]
   1eb76:	f104 001f 	add.w	r0, r4, #31
   1eb7a:	f7fc f9e1 	bl	1af40 <lll_chan_sel_1>
   1eb7e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1eb80:	4620      	mov	r0, r4
   1eb82:	a903      	add	r1, sp, #12
   1eb84:	f7ff fc04 	bl	1e390 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1eb88:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   1eb8c:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1eb8e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1eb92:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1eb94:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1eb98:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1eb9c:	780a      	ldrb	r2, [r1, #0]
   1eb9e:	f022 020c 	bic.w	r2, r2, #12
   1eba2:	4313      	orrs	r3, r2
   1eba4:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1eba6:	f000 f99f 	bl	1eee8 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1ebaa:	2000      	movs	r0, #0
   1ebac:	f000 f9d0 	bl	1ef50 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1ebb0:	1d20      	adds	r0, r4, #4
   1ebb2:	f000 f9eb 	bl	1ef8c <radio_aa_set>
   1ebb6:	8923      	ldrh	r3, [r4, #8]
   1ebb8:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1ebba:	f240 605b 	movw	r0, #1627	; 0x65b
   1ebbe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1ebc2:	f000 fa89 	bl	1f0d8 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1ebc6:	4630      	mov	r0, r6
   1ebc8:	f7fd fee0 	bl	1c98c <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1ebcc:	9903      	ldr	r1, [sp, #12]
   1ebce:	4620      	mov	r0, r4
   1ebd0:	f7ff fbb2 	bl	1e338 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1ebd4:	4621      	mov	r1, r4
   1ebd6:	4828      	ldr	r0, [pc, #160]	; (1ec78 <prepare_cb+0x148>)
   1ebd8:	f000 f944 	bl	1ee64 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1ebdc:	2096      	movs	r0, #150	; 0x96
   1ebde:	f000 fbc5 	bl	1f36c <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1ebe2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1ebe6:	f000 0007 	and.w	r0, r0, #7
   1ebea:	f000 fa93 	bl	1f114 <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1ebee:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1ebf0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1ebf2:	4638      	mov	r0, r7
   1ebf4:	f7fd feac 	bl	1c950 <lll_event_offset_get>
   1ebf8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1ebfa:	686a      	ldr	r2, [r5, #4]
   1ebfc:	f106 0109 	add.w	r1, r6, #9
   1ec00:	2001      	movs	r0, #1
   1ec02:	f000 fbbf 	bl	1f384 <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1ec06:	f000 fcbd 	bl	1f584 <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1ec0a:	89a1      	ldrh	r1, [r4, #12]
   1ec0c:	3105      	adds	r1, #5
   1ec0e:	4632      	mov	r2, r6
   1ec10:	b2c9      	uxtb	r1, r1
   1ec12:	4638      	mov	r0, r7
   1ec14:	f7fd feaa 	bl	1c96c <lll_preempt_calc>
   1ec18:	b180      	cbz	r0, 1ec3c <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1ec1a:	4818      	ldr	r0, [pc, #96]	; (1ec7c <prepare_cb+0x14c>)
   1ec1c:	4621      	mov	r1, r4
   1ec1e:	f000 f921 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1ec22:	f000 fa1b 	bl	1f05c <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1ec26:	2000      	movs	r0, #0
   1ec28:	b005      	add	sp, #20
   1ec2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1ec2c:	460a      	mov	r2, r1
   1ec2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ec32:	8be1      	ldrh	r1, [r4, #30]
   1ec34:	f7fc f9c8 	bl	1afc8 <lll_chan_sel_2>
   1ec38:	4606      	mov	r6, r0
   1ec3a:	e7a1      	b.n	1eb80 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   1ec3c:	4620      	mov	r0, r4
   1ec3e:	f7fd fe21 	bl	1c884 <lll_prepare_done>
		LL_ASSERT(!ret);
   1ec42:	2800      	cmp	r0, #0
   1ec44:	d0ef      	beq.n	1ec26 <prepare_cb+0xf6>
   1ec46:	4a0e      	ldr	r2, [pc, #56]	; (1ec80 <prepare_cb+0x150>)
   1ec48:	490e      	ldr	r1, [pc, #56]	; (1ec84 <prepare_cb+0x154>)
   1ec4a:	480f      	ldr	r0, [pc, #60]	; (1ec88 <prepare_cb+0x158>)
   1ec4c:	23fd      	movs	r3, #253	; 0xfd
   1ec4e:	f006 f95a 	bl	24f06 <printk>
   1ec52:	4040      	eors	r0, r0
   1ec54:	f380 8811 	msr	BASEPRI, r0
   1ec58:	f04f 0003 	mov.w	r0, #3
   1ec5c:	df02      	svc	2
}
   1ec5e:	2000      	movs	r0, #0
   1ec60:	b005      	add	sp, #20
   1ec62:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1ec64:	4809      	ldr	r0, [pc, #36]	; (1ec8c <prepare_cb+0x15c>)
   1ec66:	4621      	mov	r1, r4
   1ec68:	f000 f8fc 	bl	1ee64 <radio_isr_set>
		radio_disable();
   1ec6c:	f000 f9f6 	bl	1f05c <radio_disable>
}
   1ec70:	2000      	movs	r0, #0
   1ec72:	b005      	add	sp, #20
   1ec74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ec76:	bf00      	nop
   1ec78:	0001e281 	.word	0x0001e281
   1ec7c:	0001cac5 	.word	0x0001cac5
   1ec80:	0002cfd0 	.word	0x0002cfd0
   1ec84:	0002c454 	.word	0x0002c454
   1ec88:	0002bfdc 	.word	0x0002bfdc
   1ec8c:	0001cae9 	.word	0x0001cae9

0001ec90 <lll_central_prepare>:
{
   1ec90:	b510      	push	{r4, lr}
   1ec92:	b082      	sub	sp, #8
   1ec94:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1ec96:	f7fe f877 	bl	1cd88 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1ec9a:	2800      	cmp	r0, #0
   1ec9c:	db19      	blt.n	1ecd2 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1ec9e:	4a13      	ldr	r2, [pc, #76]	; (1ecec <lll_central_prepare+0x5c>)
   1eca0:	4913      	ldr	r1, [pc, #76]	; (1ecf0 <lll_central_prepare+0x60>)
   1eca2:	4814      	ldr	r0, [pc, #80]	; (1ecf4 <lll_central_prepare+0x64>)
   1eca4:	9400      	str	r4, [sp, #0]
   1eca6:	2300      	movs	r3, #0
   1eca8:	f7f5 fe14 	bl	148d4 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ecac:	b108      	cbz	r0, 1ecb2 <lll_central_prepare+0x22>
   1ecae:	3077      	adds	r0, #119	; 0x77
   1ecb0:	d101      	bne.n	1ecb6 <lll_central_prepare+0x26>
}
   1ecb2:	b002      	add	sp, #8
   1ecb4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ecb6:	4a10      	ldr	r2, [pc, #64]	; (1ecf8 <lll_central_prepare+0x68>)
   1ecb8:	4910      	ldr	r1, [pc, #64]	; (1ecfc <lll_central_prepare+0x6c>)
   1ecba:	4811      	ldr	r0, [pc, #68]	; (1ed00 <lll_central_prepare+0x70>)
   1ecbc:	2351      	movs	r3, #81	; 0x51
   1ecbe:	f006 f922 	bl	24f06 <printk>
   1ecc2:	4040      	eors	r0, r0
   1ecc4:	f380 8811 	msr	BASEPRI, r0
   1ecc8:	f04f 0003 	mov.w	r0, #3
   1eccc:	df02      	svc	2
}
   1ecce:	b002      	add	sp, #8
   1ecd0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1ecd2:	4a09      	ldr	r2, [pc, #36]	; (1ecf8 <lll_central_prepare+0x68>)
   1ecd4:	490b      	ldr	r1, [pc, #44]	; (1ed04 <lll_central_prepare+0x74>)
   1ecd6:	480a      	ldr	r0, [pc, #40]	; (1ed00 <lll_central_prepare+0x70>)
   1ecd8:	234c      	movs	r3, #76	; 0x4c
   1ecda:	f006 f914 	bl	24f06 <printk>
   1ecde:	4040      	eors	r0, r0
   1ece0:	f380 8811 	msr	BASEPRI, r0
   1ece4:	f04f 0003 	mov.w	r0, #3
   1ece8:	df02      	svc	2
   1ecea:	e7d8      	b.n	1ec9e <lll_central_prepare+0xe>
   1ecec:	0001eb31 	.word	0x0001eb31
   1ecf0:	0001e195 	.word	0x0001e195
   1ecf4:	0001c949 	.word	0x0001c949
   1ecf8:	0002cfd0 	.word	0x0002cfd0
   1ecfc:	0002ce64 	.word	0x0002ce64
   1ed00:	0002bfdc 	.word	0x0002bfdc
   1ed04:	0002cd78 	.word	0x0002cd78

0001ed08 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1ed08:	4b05      	ldr	r3, [pc, #20]	; (1ed20 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1ed0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1ed0e:	2100      	movs	r1, #0
   1ed10:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1ed14:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1ed18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1ed1c:	4770      	bx	lr
   1ed1e:	bf00      	nop
   1ed20:	4000b000 	.word	0x4000b000

0001ed24 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1ed24:	4b05      	ldr	r3, [pc, #20]	; (1ed3c <cntr_start+0x18>)
   1ed26:	7818      	ldrb	r0, [r3, #0]
   1ed28:	1c42      	adds	r2, r0, #1
   1ed2a:	701a      	strb	r2, [r3, #0]
   1ed2c:	b918      	cbnz	r0, 1ed36 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1ed2e:	4b04      	ldr	r3, [pc, #16]	; (1ed40 <cntr_start+0x1c>)
   1ed30:	2201      	movs	r2, #1
   1ed32:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1ed34:	4770      	bx	lr
		return 1;
   1ed36:	2001      	movs	r0, #1
}
   1ed38:	4770      	bx	lr
   1ed3a:	bf00      	nop
   1ed3c:	2000357e 	.word	0x2000357e
   1ed40:	4000b000 	.word	0x4000b000

0001ed44 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1ed44:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1ed46:	4c0d      	ldr	r4, [pc, #52]	; (1ed7c <cntr_stop+0x38>)
   1ed48:	7820      	ldrb	r0, [r4, #0]
   1ed4a:	b148      	cbz	r0, 1ed60 <cntr_stop+0x1c>

	if (--_refcount) {
   1ed4c:	3801      	subs	r0, #1
   1ed4e:	b2c0      	uxtb	r0, r0
   1ed50:	7020      	strb	r0, [r4, #0]
   1ed52:	b918      	cbnz	r0, 1ed5c <cntr_stop+0x18>
   1ed54:	4b0a      	ldr	r3, [pc, #40]	; (1ed80 <cntr_stop+0x3c>)
   1ed56:	2201      	movs	r2, #1
   1ed58:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1ed5a:	bd10      	pop	{r4, pc}
		return 1;
   1ed5c:	2001      	movs	r0, #1
}
   1ed5e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1ed60:	4a08      	ldr	r2, [pc, #32]	; (1ed84 <cntr_stop+0x40>)
   1ed62:	4909      	ldr	r1, [pc, #36]	; (1ed88 <cntr_stop+0x44>)
   1ed64:	4809      	ldr	r0, [pc, #36]	; (1ed8c <cntr_stop+0x48>)
   1ed66:	232d      	movs	r3, #45	; 0x2d
   1ed68:	f006 f8cd 	bl	24f06 <printk>
   1ed6c:	4040      	eors	r0, r0
   1ed6e:	f380 8811 	msr	BASEPRI, r0
   1ed72:	f04f 0003 	mov.w	r0, #3
   1ed76:	df02      	svc	2
	if (--_refcount) {
   1ed78:	7820      	ldrb	r0, [r4, #0]
   1ed7a:	e7e7      	b.n	1ed4c <cntr_stop+0x8>
   1ed7c:	2000357e 	.word	0x2000357e
   1ed80:	4000b000 	.word	0x4000b000
   1ed84:	0002d034 	.word	0x0002d034
   1ed88:	0002d080 	.word	0x0002d080
   1ed8c:	0002bfdc 	.word	0x0002bfdc

0001ed90 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1ed90:	4b01      	ldr	r3, [pc, #4]	; (1ed98 <cntr_cnt_get+0x8>)
   1ed92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1ed96:	4770      	bx	lr
   1ed98:	4000b000 	.word	0x4000b000

0001ed9c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1ed9c:	4b02      	ldr	r3, [pc, #8]	; (1eda8 <cntr_cmp_set+0xc>)
   1ed9e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1eda2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1eda6:	4770      	bx	lr
   1eda8:	4000b000 	.word	0x4000b000

0001edac <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1edac:	4b12      	ldr	r3, [pc, #72]	; (1edf8 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1edae:	b430      	push	{r4, r5}
   1edb0:	2101      	movs	r1, #1
   1edb2:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1edb4:	2000      	movs	r0, #0
   1edb6:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1edb8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1edbc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1edc0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1edc4:	6019      	str	r1, [r3, #0]
}
   1edc6:	e005      	b.n	1edd4 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1edc8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1edcc:	b932      	cbnz	r2, 1eddc <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1edce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1edd2:	b11a      	cbz	r2, 1eddc <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1edd4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1edd8:	2a00      	cmp	r2, #0
   1edda:	d0f5      	beq.n	1edc8 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1eddc:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1edde:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1ede2:	2a00      	cmp	r2, #0
   1ede4:	d1e7      	bne.n	1edb6 <do_ecb+0xa>
   1ede6:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1edea:	2d00      	cmp	r5, #0
   1edec:	d0e3      	beq.n	1edb6 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1edee:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1edf0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1edf4:	4770      	bx	lr
   1edf6:	bf00      	nop
   1edf8:	4000e000 	.word	0x4000e000

0001edfc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1edfc:	b570      	push	{r4, r5, r6, lr}
   1edfe:	b08c      	sub	sp, #48	; 0x30
   1ee00:	460e      	mov	r6, r1
   1ee02:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ee04:	4601      	mov	r1, r0
   1ee06:	2210      	movs	r2, #16
   1ee08:	4668      	mov	r0, sp
{
   1ee0a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1ee0c:	f7f1 f966 	bl	100dc <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1ee10:	2210      	movs	r2, #16
   1ee12:	eb0d 0002 	add.w	r0, sp, r2
   1ee16:	4631      	mov	r1, r6
   1ee18:	f7f1 f960 	bl	100dc <mem_rcopy>

	do_ecb(&ecb);
   1ee1c:	4668      	mov	r0, sp
   1ee1e:	f7ff ffc5 	bl	1edac <do_ecb>

	if (cipher_text_le) {
   1ee22:	b125      	cbz	r5, 1ee2e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1ee24:	2210      	movs	r2, #16
   1ee26:	a908      	add	r1, sp, #32
   1ee28:	4628      	mov	r0, r5
   1ee2a:	f7f1 f957 	bl	100dc <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1ee2e:	b13c      	cbz	r4, 1ee40 <ecb_encrypt+0x44>
   1ee30:	f10d 0c20 	add.w	ip, sp, #32
   1ee34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1ee38:	6020      	str	r0, [r4, #0]
   1ee3a:	6061      	str	r1, [r4, #4]
   1ee3c:	60a2      	str	r2, [r4, #8]
   1ee3e:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   1ee40:	b00c      	add	sp, #48	; 0x30
   1ee42:	bd70      	pop	{r4, r5, r6, pc}

0001ee44 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1ee44:	4b04      	ldr	r3, [pc, #16]	; (1ee58 <isr_radio+0x14>)
   1ee46:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1ee4a:	b123      	cbz	r3, 1ee56 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1ee4c:	4a03      	ldr	r2, [pc, #12]	; (1ee5c <isr_radio+0x18>)
   1ee4e:	4b04      	ldr	r3, [pc, #16]	; (1ee60 <isr_radio+0x1c>)
   1ee50:	6810      	ldr	r0, [r2, #0]
   1ee52:	681b      	ldr	r3, [r3, #0]
   1ee54:	4718      	bx	r3
}
   1ee56:	4770      	bx	lr
   1ee58:	40001000 	.word	0x40001000
   1ee5c:	200031d0 	.word	0x200031d0
   1ee60:	200031cc 	.word	0x200031cc

0001ee64 <radio_isr_set>:
{
   1ee64:	b538      	push	{r3, r4, r5, lr}
   1ee66:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1ee68:	2001      	movs	r0, #1
{
   1ee6a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1ee6c:	f7e7 fe1e 	bl	6aac <arch_irq_disable>
	isr_cb = cb;
   1ee70:	4b08      	ldr	r3, [pc, #32]	; (1ee94 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1ee72:	4a09      	ldr	r2, [pc, #36]	; (1ee98 <radio_isr_set+0x34>)
	isr_cb = cb;
   1ee74:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ee76:	4909      	ldr	r1, [pc, #36]	; (1ee9c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ee78:	4b09      	ldr	r3, [pc, #36]	; (1eea0 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1ee7a:	6015      	str	r5, [r2, #0]
   1ee7c:	2010      	movs	r0, #16
   1ee7e:	2202      	movs	r2, #2
   1ee80:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1ee84:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1ee88:	2001      	movs	r0, #1
}
   1ee8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1ee8e:	f7e7 bdfd 	b.w	6a8c <arch_irq_enable>
   1ee92:	bf00      	nop
   1ee94:	200031cc 	.word	0x200031cc
   1ee98:	200031d0 	.word	0x200031d0
   1ee9c:	40001000 	.word	0x40001000
   1eea0:	e000e100 	.word	0xe000e100

0001eea4 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1eea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eea8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1eeac:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1eeae:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1eeb2:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1eeb6:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1eeba:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1eebe:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1eec2:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1eec6:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1eeca:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1eece:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1eed2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1eed6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1eeda:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1eede:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1eee2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1eee6:	4770      	bx	lr

0001eee8 <radio_reset>:
{
   1eee8:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1eeea:	2001      	movs	r0, #1
   1eeec:	f7e7 fdde 	bl	6aac <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1eef0:	4a0d      	ldr	r2, [pc, #52]	; (1ef28 <radio_reset+0x40>)
   1eef2:	2100      	movs	r1, #0
   1eef4:	2301      	movs	r3, #1
   1eef6:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1eefa:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1eefe:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1ef02:	490a      	ldr	r1, [pc, #40]	; (1ef2c <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1ef04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1ef08:	f023 0301 	bic.w	r3, r3, #1
   1ef0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1ef10:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1ef14:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1ef18:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1ef1c:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1ef20:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1ef24:	bd10      	pop	{r4, pc}
   1ef26:	bf00      	nop
   1ef28:	40001000 	.word	0x40001000
   1ef2c:	4001f000 	.word	0x4001f000

0001ef30 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1ef30:	4b06      	ldr	r3, [pc, #24]	; (1ef4c <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1ef32:	2802      	cmp	r0, #2
   1ef34:	bf14      	ite	ne
   1ef36:	2203      	movne	r2, #3
   1ef38:	2204      	moveq	r2, #4
   1ef3a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1ef3e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1ef42:	f042 0201 	orr.w	r2, r2, #1
   1ef46:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1ef4a:	4770      	bx	lr
   1ef4c:	40001000 	.word	0x40001000

0001ef50 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1ef50:	4b01      	ldr	r3, [pc, #4]	; (1ef58 <radio_tx_power_set+0x8>)
   1ef52:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1ef56:	4770      	bx	lr
   1ef58:	40001000 	.word	0x40001000

0001ef5c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1ef5c:	4b01      	ldr	r3, [pc, #4]	; (1ef64 <radio_freq_chan_set+0x8>)
   1ef5e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1ef62:	4770      	bx	lr
   1ef64:	40001000 	.word	0x40001000

0001ef68 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1ef68:	4b07      	ldr	r3, [pc, #28]	; (1ef88 <radio_whiten_iv_set+0x20>)
   1ef6a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1ef6e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ef72:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1ef76:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1ef7a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1ef7e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1ef82:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1ef86:	4770      	bx	lr
   1ef88:	40001000 	.word	0x40001000

0001ef8c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1ef8c:	4a0a      	ldr	r2, [pc, #40]	; (1efb8 <radio_aa_set+0x2c>)
   1ef8e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1ef90:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1ef92:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1ef96:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1ef9a:	78c3      	ldrb	r3, [r0, #3]
   1ef9c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1efa0:	7843      	ldrb	r3, [r0, #1]
   1efa2:	f890 c002 	ldrb.w	ip, [r0, #2]
   1efa6:	7801      	ldrb	r1, [r0, #0]
   1efa8:	041b      	lsls	r3, r3, #16
   1efaa:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1efae:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1efb2:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1efb6:	4770      	bx	lr
   1efb8:	40001000 	.word	0x40001000

0001efbc <radio_pkt_configure>:
	switch (phy) {
   1efbc:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1efc0:	2b02      	cmp	r3, #2
   1efc2:	bf14      	ite	ne
   1efc4:	f04f 0c00 	movne.w	ip, #0
   1efc8:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1efcc:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1efce:	bf48      	it	mi
   1efd0:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1efd4:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1efd8:	4b0a      	ldr	r3, [pc, #40]	; (1f004 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1efda:	4a0b      	ldr	r2, [pc, #44]	; (1f008 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1efdc:	ea40 000c 	orr.w	r0, r0, ip
   1efe0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1efe4:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1efe8:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1efec:	4002      	ands	r2, r0
   1efee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1eff2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1eff6:	4311      	orrs	r1, r2
   1eff8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1effc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1f000:	4770      	bx	lr
   1f002:	bf00      	nop
   1f004:	40001000 	.word	0x40001000
   1f008:	fef80000 	.word	0xfef80000

0001f00c <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1f00c:	4b01      	ldr	r3, [pc, #4]	; (1f014 <radio_pkt_rx_set+0x8>)
   1f00e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1f012:	4770      	bx	lr
   1f014:	40001000 	.word	0x40001000

0001f018 <radio_pkt_tx_set>:
   1f018:	4b01      	ldr	r3, [pc, #4]	; (1f020 <radio_pkt_tx_set+0x8>)
   1f01a:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1f01e:	4770      	bx	lr
   1f020:	40001000 	.word	0x40001000

0001f024 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_2M_US;
   1f024:	2802      	cmp	r0, #2
}
   1f026:	bf14      	ite	ne
   1f028:	2029      	movne	r0, #41	; 0x29
   1f02a:	2028      	moveq	r0, #40	; 0x28
   1f02c:	4770      	bx	lr
   1f02e:	bf00      	nop

0001f030 <radio_tx_chain_delay_get>:
}
   1f030:	2001      	movs	r0, #1
   1f032:	4770      	bx	lr

0001f034 <radio_rx_ready_delay_get>:
}
   1f034:	2029      	movs	r0, #41	; 0x29
   1f036:	4770      	bx	lr

0001f038 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1f038:	2802      	cmp	r0, #2
}
   1f03a:	bf14      	ite	ne
   1f03c:	200a      	movne	r0, #10
   1f03e:	2005      	moveq	r0, #5
   1f040:	4770      	bx	lr
   1f042:	bf00      	nop

0001f044 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f044:	4b01      	ldr	r3, [pc, #4]	; (1f04c <radio_rx_enable+0x8>)
   1f046:	2201      	movs	r2, #1
   1f048:	605a      	str	r2, [r3, #4]
}
   1f04a:	4770      	bx	lr
   1f04c:	40001000 	.word	0x40001000

0001f050 <radio_tx_enable>:
   1f050:	4b01      	ldr	r3, [pc, #4]	; (1f058 <radio_tx_enable+0x8>)
   1f052:	2201      	movs	r2, #1
   1f054:	601a      	str	r2, [r3, #0]
}
   1f056:	4770      	bx	lr
   1f058:	40001000 	.word	0x40001000

0001f05c <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1f05c:	4a07      	ldr	r2, [pc, #28]	; (1f07c <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1f05e:	4908      	ldr	r1, [pc, #32]	; (1f080 <radio_disable+0x24>)
{
   1f060:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1f062:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1f064:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1f068:	2000      	movs	r0, #0
   1f06a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1f06e:	6053      	str	r3, [r2, #4]
}
   1f070:	bc10      	pop	{r4}
   1f072:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1f074:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1f078:	610b      	str	r3, [r1, #16]
}
   1f07a:	4770      	bx	lr
   1f07c:	4001f000 	.word	0x4001f000
   1f080:	40001000 	.word	0x40001000

0001f084 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1f084:	4b04      	ldr	r3, [pc, #16]	; (1f098 <radio_status_reset+0x14>)
   1f086:	2200      	movs	r2, #0
   1f088:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1f08c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1f090:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1f094:	4770      	bx	lr
   1f096:	bf00      	nop
   1f098:	40001000 	.word	0x40001000

0001f09c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1f09c:	4b03      	ldr	r3, [pc, #12]	; (1f0ac <radio_is_ready+0x10>)
   1f09e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1f0a2:	3800      	subs	r0, #0
   1f0a4:	bf18      	it	ne
   1f0a6:	2001      	movne	r0, #1
   1f0a8:	4770      	bx	lr
   1f0aa:	bf00      	nop
   1f0ac:	40001000 	.word	0x40001000

0001f0b0 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1f0b0:	4b03      	ldr	r3, [pc, #12]	; (1f0c0 <radio_is_done+0x10>)
   1f0b2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1f0b6:	3800      	subs	r0, #0
   1f0b8:	bf18      	it	ne
   1f0ba:	2001      	movne	r0, #1
   1f0bc:	4770      	bx	lr
   1f0be:	bf00      	nop
   1f0c0:	40001000 	.word	0x40001000

0001f0c4 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1f0c4:	4b03      	ldr	r3, [pc, #12]	; (1f0d4 <radio_is_idle+0x10>)
   1f0c6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1f0ca:	fab0 f080 	clz	r0, r0
   1f0ce:	0940      	lsrs	r0, r0, #5
   1f0d0:	4770      	bx	lr
   1f0d2:	bf00      	nop
   1f0d4:	40001000 	.word	0x40001000

0001f0d8 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1f0d8:	4b04      	ldr	r3, [pc, #16]	; (1f0ec <radio_crc_configure+0x14>)
   1f0da:	f240 1203 	movw	r2, #259	; 0x103
   1f0de:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1f0e2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1f0e6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1f0ea:	4770      	bx	lr
   1f0ec:	40001000 	.word	0x40001000

0001f0f0 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1f0f0:	4b03      	ldr	r3, [pc, #12]	; (1f100 <radio_crc_is_valid+0x10>)
   1f0f2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f0f6:	3800      	subs	r0, #0
   1f0f8:	bf18      	it	ne
   1f0fa:	2001      	movne	r0, #1
   1f0fc:	4770      	bx	lr
   1f0fe:	bf00      	nop
   1f100:	40001000 	.word	0x40001000

0001f104 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1f104:	4800      	ldr	r0, [pc, #0]	; (1f108 <radio_pkt_empty_get+0x4>)
   1f106:	4770      	bx	lr
   1f108:	200030c4 	.word	0x200030c4

0001f10c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1f10c:	4800      	ldr	r0, [pc, #0]	; (1f110 <radio_pkt_scratch_get+0x4>)
   1f10e:	4770      	bx	lr
   1f110:	200030c8 	.word	0x200030c8

0001f114 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1f114:	4b1d      	ldr	r3, [pc, #116]	; (1f18c <radio_switch_complete_and_rx+0x78>)
{
   1f116:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1f118:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1f11a:	4d1d      	ldr	r5, [pc, #116]	; (1f190 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1f11c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1f120:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f122:	4e1c      	ldr	r6, [pc, #112]	; (1f194 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f124:	4c1c      	ldr	r4, [pc, #112]	; (1f198 <radio_switch_complete_and_rx+0x84>)
   1f126:	4f1d      	ldr	r7, [pc, #116]	; (1f19c <radio_switch_complete_and_rx+0x88>)
   1f128:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1f12c:	f102 030c 	add.w	r3, r2, #12
   1f130:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1f132:	00d0      	lsls	r0, r2, #3
   1f134:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f136:	0091      	lsls	r1, r2, #2
   1f138:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1f13c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1f140:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1f144:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f148:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1f14c:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1f150:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f154:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f158:	4811      	ldr	r0, [pc, #68]	; (1f1a0 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f15a:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f15e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1f162:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1f166:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1f168:	bf8a      	itet	hi
   1f16a:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1f16e:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1f170:	3b2d      	subhi	r3, #45	; 0x2d
   1f172:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1f176:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1f178:	4b06      	ldr	r3, [pc, #24]	; (1f194 <radio_switch_complete_and_rx+0x80>)
   1f17a:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1f17e:	f002 0201 	and.w	r2, r2, #1
   1f182:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1f186:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f188:	bcf0      	pop	{r4, r5, r6, r7}
   1f18a:	4770      	bx	lr
   1f18c:	40001000 	.word	0x40001000
   1f190:	2000357f 	.word	0x2000357f
   1f194:	4001f000 	.word	0x4001f000
   1f198:	40009140 	.word	0x40009140
   1f19c:	4000110c 	.word	0x4000110c
   1f1a0:	40001004 	.word	0x40001004

0001f1a4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1f1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1f1a8:	4e28      	ldr	r6, [pc, #160]	; (1f24c <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1f1aa:	4c29      	ldr	r4, [pc, #164]	; (1f250 <radio_switch_complete_and_tx+0xac>)
   1f1ac:	4f29      	ldr	r7, [pc, #164]	; (1f254 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f1ae:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1f258 <radio_switch_complete_and_tx+0xb4>
   1f1b2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1f25c <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1f1b6:	2303      	movs	r3, #3
   1f1b8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1f1bc:	7821      	ldrb	r1, [r4, #0]
   1f1be:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1f1c2:	f101 030c 	add.w	r3, r1, #12
   1f1c6:	b2db      	uxtb	r3, r3
   1f1c8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1f1ca:	00cd      	lsls	r5, r1, #3
   1f1cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f1d0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1f1d4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f1d8:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1f1dc:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f1e0:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f1e4:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1f1e8:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f1ec:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1f1f0:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1f1f4:	2a02      	cmp	r2, #2
   1f1f6:	bf08      	it	eq
   1f1f8:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1f1fa:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1f1fe:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1f202:	f241 3588 	movw	r5, #5000	; 0x1388
   1f206:	2802      	cmp	r0, #2
   1f208:	bf08      	it	eq
   1f20a:	462a      	moveq	r2, r5
   1f20c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1f210:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1f214:	4413      	add	r3, r2
   1f216:	4a12      	ldr	r2, [pc, #72]	; (1f260 <radio_switch_complete_and_tx+0xbc>)
   1f218:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1f21c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1f220:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1f224:	bf85      	ittet	hi
   1f226:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1f228:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1f22c:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1f22e:	1a1b      	subhi	r3, r3, r0
   1f230:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1f234:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1f236:	4b08      	ldr	r3, [pc, #32]	; (1f258 <radio_switch_complete_and_tx+0xb4>)
   1f238:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1f23c:	f001 0101 	and.w	r1, r1, #1
   1f240:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1f244:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f24a:	bf00      	nop
   1f24c:	40001000 	.word	0x40001000
   1f250:	2000357f 	.word	0x2000357f
   1f254:	40009140 	.word	0x40009140
   1f258:	4001f000 	.word	0x4001f000
   1f25c:	4000110c 	.word	0x4000110c
   1f260:	10624dd3 	.word	0x10624dd3

0001f264 <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1f264:	4904      	ldr	r1, [pc, #16]	; (1f278 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1f266:	4b05      	ldr	r3, [pc, #20]	; (1f27c <radio_switch_complete_and_disable+0x18>)
   1f268:	2003      	movs	r0, #3
   1f26a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1f26e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1f272:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f276:	4770      	bx	lr
   1f278:	40001000 	.word	0x40001000
   1f27c:	4001f000 	.word	0x4001f000

0001f280 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   1f280:	2000      	movs	r0, #0
   1f282:	4770      	bx	lr

0001f284 <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1f284:	4a03      	ldr	r2, [pc, #12]	; (1f294 <radio_rssi_measure+0x10>)
   1f286:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f28a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1f28e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1f292:	4770      	bx	lr
   1f294:	40001000 	.word	0x40001000

0001f298 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1f298:	4b01      	ldr	r3, [pc, #4]	; (1f2a0 <radio_rssi_get+0x8>)
   1f29a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1f29e:	4770      	bx	lr
   1f2a0:	40001000 	.word	0x40001000

0001f2a4 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1f2a4:	4b02      	ldr	r3, [pc, #8]	; (1f2b0 <radio_rssi_status_reset+0xc>)
   1f2a6:	2200      	movs	r2, #0
   1f2a8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1f2ac:	4770      	bx	lr
   1f2ae:	bf00      	nop
   1f2b0:	40001000 	.word	0x40001000

0001f2b4 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1f2b4:	4b03      	ldr	r3, [pc, #12]	; (1f2c4 <radio_rssi_is_ready+0x10>)
   1f2b6:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1f2ba:	3800      	subs	r0, #0
   1f2bc:	bf18      	it	ne
   1f2be:	2001      	movne	r0, #1
   1f2c0:	4770      	bx	lr
   1f2c2:	bf00      	nop
   1f2c4:	40001000 	.word	0x40001000

0001f2c8 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1f2c8:	b410      	push	{r4}
   1f2ca:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f2ce:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1f2d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1f2d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1f2da:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1f2dc:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1f2e0:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1f2e4:	8894      	ldrh	r4, [r2, #4]
   1f2e6:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1f2ea:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1f2ee:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1f2f2:	d1ec      	bne.n	1f2ce <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1f2f4:	4b03      	ldr	r3, [pc, #12]	; (1f304 <radio_filter_configure+0x3c>)
}
   1f2f6:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1f2f8:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1f2fc:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1f300:	4770      	bx	lr
   1f302:	bf00      	nop
   1f304:	40001000 	.word	0x40001000

0001f308 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1f308:	4a03      	ldr	r2, [pc, #12]	; (1f318 <radio_filter_disable+0x10>)
   1f30a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1f30e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1f312:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1f316:	4770      	bx	lr
   1f318:	40001000 	.word	0x40001000

0001f31c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1f31c:	4b02      	ldr	r3, [pc, #8]	; (1f328 <radio_filter_status_reset+0xc>)
   1f31e:	2200      	movs	r2, #0
   1f320:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1f324:	4770      	bx	lr
   1f326:	bf00      	nop
   1f328:	40001000 	.word	0x40001000

0001f32c <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1f32c:	4b03      	ldr	r3, [pc, #12]	; (1f33c <radio_filter_has_match+0x10>)
   1f32e:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1f332:	3800      	subs	r0, #0
   1f334:	bf18      	it	ne
   1f336:	2001      	movne	r0, #1
   1f338:	4770      	bx	lr
   1f33a:	bf00      	nop
   1f33c:	40001000 	.word	0x40001000

0001f340 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1f340:	4b01      	ldr	r3, [pc, #4]	; (1f348 <radio_filter_match_get+0x8>)
   1f342:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1f346:	4770      	bx	lr
   1f348:	40001000 	.word	0x40001000

0001f34c <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   1f34c:	4904      	ldr	r1, [pc, #16]	; (1f360 <radio_tmr_status_reset+0x14>)
   1f34e:	4b05      	ldr	r3, [pc, #20]	; (1f364 <radio_tmr_status_reset+0x18>)
   1f350:	4a05      	ldr	r2, [pc, #20]	; (1f368 <radio_tmr_status_reset+0x1c>)
   1f352:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1f356:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1f35a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1f35e:	4770      	bx	lr
   1f360:	4000b000 	.word	0x4000b000
   1f364:	4001f000 	.word	0x4001f000
   1f368:	0e7000c0 	.word	0x0e7000c0

0001f36c <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1f36c:	4b03      	ldr	r3, [pc, #12]	; (1f37c <radio_tmr_tifs_set+0x10>)
   1f36e:	4a04      	ldr	r2, [pc, #16]	; (1f380 <radio_tmr_tifs_set+0x14>)
   1f370:	781b      	ldrb	r3, [r3, #0]
   1f372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1f376:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f37a:	4770      	bx	lr
   1f37c:	2000357f 	.word	0x2000357f
   1f380:	40009000 	.word	0x40009000

0001f384 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1f384:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1f388:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1f38c:	4d31      	ldr	r5, [pc, #196]	; (1f454 <radio_tmr_start+0xd0>)
   1f38e:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1f392:	42ab      	cmp	r3, r5
{
   1f394:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1f396:	d906      	bls.n	1f3a6 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1f398:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1f39c:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1f3a0:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1f3a2:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3a6:	4b2c      	ldr	r3, [pc, #176]	; (1f458 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1f3a8:	482c      	ldr	r0, [pc, #176]	; (1f45c <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1f3aa:	4d2d      	ldr	r5, [pc, #180]	; (1f460 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f3ac:	4e2d      	ldr	r6, [pc, #180]	; (1f464 <radio_tmr_start+0xe0>)
   1f3ae:	2701      	movs	r7, #1
   1f3b0:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1f3b2:	2700      	movs	r7, #0
   1f3b4:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1f3b8:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1f3bc:	2704      	movs	r7, #4
   1f3be:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1f3c2:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1f3c4:	2702      	movs	r7, #2
   1f3c6:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1f3ca:	4a27      	ldr	r2, [pc, #156]	; (1f468 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1f3cc:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1f3d0:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f3d4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1f3d8:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1f3dc:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f3de:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f3e2:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1f3e6:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1f3ea:	bb64      	cbnz	r4, 1f446 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1f3ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1f3f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1f3f4:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1f3f8:	4b1b      	ldr	r3, [pc, #108]	; (1f468 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f3fa:	4a1c      	ldr	r2, [pc, #112]	; (1f46c <radio_tmr_start+0xe8>)
   1f3fc:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1f400:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1f402:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f404:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1f470 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f408:	f8df e068 	ldr.w	lr, [pc, #104]	; 1f474 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f40c:	f8df c068 	ldr.w	ip, [pc, #104]	; 1f478 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f410:	4f1a      	ldr	r7, [pc, #104]	; (1f47c <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f412:	4e1b      	ldr	r6, [pc, #108]	; (1f480 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f414:	4d1b      	ldr	r5, [pc, #108]	; (1f484 <radio_tmr_start+0x100>)
   1f416:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1f418:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1f41c:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1f420:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1f424:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1f428:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f42a:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f42e:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f432:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f436:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f43a:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f43e:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1f442:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1f446:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1f44a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1f44e:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1f452:	e7d1      	b.n	1f3f8 <radio_tmr_start+0x74>
   1f454:	7ff0bdbf 	.word	0x7ff0bdbf
   1f458:	40008000 	.word	0x40008000
   1f45c:	431bde83 	.word	0x431bde83
   1f460:	4000b000 	.word	0x4000b000
   1f464:	4000b148 	.word	0x4000b148
   1f468:	4001f000 	.word	0x4001f000
   1f46c:	40009000 	.word	0x40009000
   1f470:	4000110c 	.word	0x4000110c
   1f474:	4000900c 	.word	0x4000900c
   1f478:	40009140 	.word	0x40009140
   1f47c:	4001f004 	.word	0x4001f004
   1f480:	40009144 	.word	0x40009144
   1f484:	4001f00c 	.word	0x4001f00c

0001f488 <radio_tmr_start_tick>:
   1f488:	4a15      	ldr	r2, [pc, #84]	; (1f4e0 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   1f48a:	b430      	push	{r4, r5}
   1f48c:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   1f48e:	4c15      	ldr	r4, [pc, #84]	; (1f4e4 <radio_tmr_start_tick+0x5c>)
   1f490:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   1f492:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   1f496:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   1f498:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f49c:	4b12      	ldr	r3, [pc, #72]	; (1f4e8 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   1f49e:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1f4a2:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   1f4a6:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f4a8:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   1f4ac:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f4b0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1f4b4:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1f4b8:	b158      	cbz	r0, 1f4d2 <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   1f4ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   1f4be:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1f4c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   1f4c6:	4a08      	ldr	r2, [pc, #32]	; (1f4e8 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   1f4c8:	2001      	movs	r0, #1
   1f4ca:	bc30      	pop	{r4, r5}
   1f4cc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   1f4d0:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   1f4d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   1f4d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   1f4da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1f4de:	e7f2      	b.n	1f4c6 <radio_tmr_start_tick+0x3e>
   1f4e0:	40008000 	.word	0x40008000
   1f4e4:	4000b000 	.word	0x4000b000
   1f4e8:	4001f000 	.word	0x4001f000

0001f4ec <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1f4ec:	4b01      	ldr	r3, [pc, #4]	; (1f4f4 <radio_tmr_start_get+0x8>)
   1f4ee:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1f4f2:	4770      	bx	lr
   1f4f4:	4000b000 	.word	0x4000b000

0001f4f8 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f4f8:	4903      	ldr	r1, [pc, #12]	; (1f508 <radio_tmr_stop+0x10>)
   1f4fa:	4a04      	ldr	r2, [pc, #16]	; (1f50c <radio_tmr_stop+0x14>)
   1f4fc:	2301      	movs	r3, #1
   1f4fe:	604b      	str	r3, [r1, #4]
   1f500:	610b      	str	r3, [r1, #16]
   1f502:	6053      	str	r3, [r2, #4]
   1f504:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1f506:	4770      	bx	lr
   1f508:	40008000 	.word	0x40008000
   1f50c:	40009000 	.word	0x40009000

0001f510 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1f510:	4904      	ldr	r1, [pc, #16]	; (1f524 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1f512:	4b05      	ldr	r3, [pc, #20]	; (1f528 <radio_tmr_hcto_configure+0x18>)
   1f514:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1f518:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1f51c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1f520:	4770      	bx	lr
   1f522:	bf00      	nop
   1f524:	40008000 	.word	0x40008000
   1f528:	4001f000 	.word	0x4001f000

0001f52c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f52c:	4b05      	ldr	r3, [pc, #20]	; (1f544 <radio_tmr_aa_capture+0x18>)
   1f52e:	4806      	ldr	r0, [pc, #24]	; (1f548 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f530:	4906      	ldr	r1, [pc, #24]	; (1f54c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1f532:	4a07      	ldr	r2, [pc, #28]	; (1f550 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1f534:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1f538:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1f53c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1f540:	4770      	bx	lr
   1f542:	bf00      	nop
   1f544:	4001f000 	.word	0x4001f000
   1f548:	40001100 	.word	0x40001100
   1f54c:	40008040 	.word	0x40008040
   1f550:	04000080 	.word	0x04000080

0001f554 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1f554:	4b01      	ldr	r3, [pc, #4]	; (1f55c <radio_tmr_aa_get+0x8>)
   1f556:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1f55a:	4770      	bx	lr
   1f55c:	40008000 	.word	0x40008000

0001f560 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1f560:	4b01      	ldr	r3, [pc, #4]	; (1f568 <radio_tmr_aa_save+0x8>)
   1f562:	6018      	str	r0, [r3, #0]
}
   1f564:	4770      	bx	lr
   1f566:	bf00      	nop
   1f568:	200031d4 	.word	0x200031d4

0001f56c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1f56c:	4b01      	ldr	r3, [pc, #4]	; (1f574 <radio_tmr_aa_restore+0x8>)
}
   1f56e:	6818      	ldr	r0, [r3, #0]
   1f570:	4770      	bx	lr
   1f572:	bf00      	nop
   1f574:	200031d4 	.word	0x200031d4

0001f578 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1f578:	4b01      	ldr	r3, [pc, #4]	; (1f580 <radio_tmr_ready_get+0x8>)
   1f57a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1f57e:	4770      	bx	lr
   1f580:	40008000 	.word	0x40008000

0001f584 <radio_tmr_end_capture>:
   1f584:	4b02      	ldr	r3, [pc, #8]	; (1f590 <radio_tmr_end_capture+0xc>)
   1f586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1f58a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   1f58e:	4770      	bx	lr
   1f590:	4001f000 	.word	0x4001f000

0001f594 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1f594:	4b01      	ldr	r3, [pc, #4]	; (1f59c <radio_tmr_end_get+0x8>)
   1f596:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1f59a:	4770      	bx	lr
   1f59c:	40008000 	.word	0x40008000

0001f5a0 <radio_tmr_tifs_base_get>:
   1f5a0:	4b01      	ldr	r3, [pc, #4]	; (1f5a8 <radio_tmr_tifs_base_get+0x8>)
   1f5a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1f5a6:	4770      	bx	lr
   1f5a8:	40008000 	.word	0x40008000

0001f5ac <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f5ac:	4b17      	ldr	r3, [pc, #92]	; (1f60c <radio_ccm_rx_pkt_set+0x60>)
{
   1f5ae:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f5b0:	2400      	movs	r4, #0
{
   1f5b2:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f5b4:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1f5b6:	4816      	ldr	r0, [pc, #88]	; (1f610 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f5b8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f5bc:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1f5c0:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1f5c4:	4e13      	ldr	r6, [pc, #76]	; (1f614 <radio_ccm_rx_pkt_set+0x68>)
   1f5c6:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1f5c8:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1f5cc:	4812      	ldr	r0, [pc, #72]	; (1f618 <radio_ccm_rx_pkt_set+0x6c>)
   1f5ce:	2902      	cmp	r1, #2
   1f5d0:	bf08      	it	eq
   1f5d2:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1f5d4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1f5d8:	4810      	ldr	r0, [pc, #64]	; (1f61c <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1f5da:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f5de:	4910      	ldr	r1, [pc, #64]	; (1f620 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1f5e0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1f5e4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1f5e8:	4a0e      	ldr	r2, [pc, #56]	; (1f624 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f5ea:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1f5ee:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1f5f2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1f5f6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1f5fa:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1f5fe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f602:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1f604:	bc70      	pop	{r4, r5, r6}
   1f606:	601a      	str	r2, [r3, #0]
   1f608:	4770      	bx	lr
   1f60a:	bf00      	nop
   1f60c:	4000f000 	.word	0x4000f000
   1f610:	40001000 	.word	0x40001000
   1f614:	01010001 	.word	0x01010001
   1f618:	01000001 	.word	0x01000001
   1f61c:	200030c8 	.word	0x200030c8
   1f620:	20002fb8 	.word	0x20002fb8
   1f624:	4001f000 	.word	0x4001f000

0001f628 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f628:	4b0f      	ldr	r3, [pc, #60]	; (1f668 <radio_ccm_tx_pkt_set+0x40>)
{
   1f62a:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f62c:	2200      	movs	r2, #0
{
   1f62e:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f630:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1f632:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1f636:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1f63a:	480c      	ldr	r0, [pc, #48]	; (1f66c <radio_ccm_tx_pkt_set+0x44>)
   1f63c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1f640:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1f644:	480a      	ldr	r0, [pc, #40]	; (1f670 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1f646:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f64a:	4c0a      	ldr	r4, [pc, #40]	; (1f674 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1f64c:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1f650:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1f652:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1f656:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1f65a:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1f65c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1f660:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1f664:	6019      	str	r1, [r3, #0]
}
   1f666:	4770      	bx	lr
   1f668:	4000f000 	.word	0x4000f000
   1f66c:	01010000 	.word	0x01010000
   1f670:	200030c8 	.word	0x200030c8
   1f674:	20002fb8 	.word	0x20002fb8

0001f678 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1f678:	4a0e      	ldr	r2, [pc, #56]	; (1f6b4 <radio_ccm_is_done+0x3c>)
   1f67a:	2302      	movs	r3, #2
   1f67c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1f680:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1f684:	b933      	cbnz	r3, 1f694 <radio_ccm_is_done+0x1c>
		__WFE();
   1f686:	bf20      	wfe
		__SEV();
   1f688:	bf40      	sev
		__WFE();
   1f68a:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1f68c:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1f690:	2b00      	cmp	r3, #0
   1f692:	d0f8      	beq.n	1f686 <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1f694:	4b07      	ldr	r3, [pc, #28]	; (1f6b4 <radio_ccm_is_done+0x3c>)
   1f696:	4a08      	ldr	r2, [pc, #32]	; (1f6b8 <radio_ccm_is_done+0x40>)
   1f698:	2002      	movs	r0, #2
   1f69a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1f69e:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1f6a2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1f6a6:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1f6aa:	fab0 f080 	clz	r0, r0
   1f6ae:	0940      	lsrs	r0, r0, #5
   1f6b0:	4770      	bx	lr
   1f6b2:	bf00      	nop
   1f6b4:	4000f000 	.word	0x4000f000
   1f6b8:	e000e100 	.word	0xe000e100

0001f6bc <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1f6bc:	4b03      	ldr	r3, [pc, #12]	; (1f6cc <radio_ccm_mic_is_valid+0x10>)
   1f6be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f6c2:	3800      	subs	r0, #0
   1f6c4:	bf18      	it	ne
   1f6c6:	2001      	movne	r0, #1
   1f6c8:	4770      	bx	lr
   1f6ca:	bf00      	nop
   1f6cc:	4000f000 	.word	0x4000f000

0001f6d0 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1f6d0:	4a15      	ldr	r2, [pc, #84]	; (1f728 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1f6d2:	4b16      	ldr	r3, [pc, #88]	; (1f72c <radio_ar_configure+0x5c>)
{
   1f6d4:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1f6d6:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1f6da:	4e15      	ldr	r6, [pc, #84]	; (1f730 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1f6dc:	2703      	movs	r7, #3
   1f6de:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1f6e2:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1f6e4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1f6e8:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1f6ea:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1f6ee:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1f6f0:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1f6f4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1f6f8:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1f6fc:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1f700:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1f704:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1f708:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1f70c:	4909      	ldr	r1, [pc, #36]	; (1f734 <radio_ar_configure+0x64>)
   1f70e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1f712:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1f716:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f71a:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1f71e:	bcf0      	pop	{r4, r5, r6, r7}
   1f720:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1f724:	4770      	bx	lr
   1f726:	bf00      	nop
   1f728:	40001000 	.word	0x40001000
   1f72c:	4000f000 	.word	0x4000f000
   1f730:	20002fb4 	.word	0x20002fb4
   1f734:	4001f000 	.word	0x4001f000

0001f738 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1f738:	4b01      	ldr	r3, [pc, #4]	; (1f740 <radio_ar_match_get+0x8>)
   1f73a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1f73e:	4770      	bx	lr
   1f740:	4000f000 	.word	0x4000f000

0001f744 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1f744:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1f746:	4807      	ldr	r0, [pc, #28]	; (1f764 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1f748:	4c07      	ldr	r4, [pc, #28]	; (1f768 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1f74a:	4a08      	ldr	r2, [pc, #32]	; (1f76c <radio_ar_status_reset+0x28>)
   1f74c:	2300      	movs	r3, #0
   1f74e:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1f752:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1f756:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1f75a:	bc10      	pop	{r4}
   1f75c:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1f760:	4770      	bx	lr
   1f762:	bf00      	nop
   1f764:	4000f000 	.word	0x4000f000
   1f768:	40001000 	.word	0x40001000
   1f76c:	4001f000 	.word	0x4001f000

0001f770 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1f770:	4b08      	ldr	r3, [pc, #32]	; (1f794 <radio_ar_has_match+0x24>)
   1f772:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1f776:	b160      	cbz	r0, 1f792 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1f778:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1f77c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1f780:	b138      	cbz	r0, 1f792 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1f782:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1f786:	b120      	cbz	r0, 1f792 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1f788:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1f78c:	fab0 f080 	clz	r0, r0
   1f790:	0940      	lsrs	r0, r0, #5
}
   1f792:	4770      	bx	lr
   1f794:	40001000 	.word	0x40001000

0001f798 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f798:	2902      	cmp	r1, #2
{
   1f79a:	b510      	push	{r4, lr}
   1f79c:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1f79e:	d00b      	beq.n	1f7b8 <mayfly_enable_cb+0x20>
   1f7a0:	4a0a      	ldr	r2, [pc, #40]	; (1f7cc <mayfly_enable_cb+0x34>)
   1f7a2:	490b      	ldr	r1, [pc, #44]	; (1f7d0 <mayfly_enable_cb+0x38>)
   1f7a4:	480b      	ldr	r0, [pc, #44]	; (1f7d4 <mayfly_enable_cb+0x3c>)
   1f7a6:	231e      	movs	r3, #30
   1f7a8:	f005 fbad 	bl	24f06 <printk>
   1f7ac:	4040      	eors	r0, r0
   1f7ae:	f380 8811 	msr	BASEPRI, r0
   1f7b2:	f04f 0003 	mov.w	r0, #3
   1f7b6:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1f7b8:	200b      	movs	r0, #11
	if (enable) {
   1f7ba:	b11c      	cbz	r4, 1f7c4 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1f7bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1f7c0:	f7e7 b964 	b.w	6a8c <arch_irq_enable>
}
   1f7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1f7c8:	f7e7 b970 	b.w	6aac <arch_irq_disable>
   1f7cc:	0002d0b0 	.word	0x0002d0b0
   1f7d0:	0002d100 	.word	0x0002d100
   1f7d4:	0002bfdc 	.word	0x0002bfdc

0001f7d8 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f7d8:	b129      	cbz	r1, 1f7e6 <mayfly_is_enabled+0xe>
   1f7da:	3901      	subs	r1, #1
   1f7dc:	2901      	cmp	r1, #1
   1f7de:	d805      	bhi.n	1f7ec <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1f7e0:	200b      	movs	r0, #11
   1f7e2:	f7e7 b977 	b.w	6ad4 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1f7e6:	2018      	movs	r0, #24
   1f7e8:	f7e7 b974 	b.w	6ad4 <arch_irq_is_enabled>
{
   1f7ec:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1f7ee:	4a07      	ldr	r2, [pc, #28]	; (1f80c <mayfly_is_enabled+0x34>)
   1f7f0:	4907      	ldr	r1, [pc, #28]	; (1f810 <mayfly_is_enabled+0x38>)
   1f7f2:	4808      	ldr	r0, [pc, #32]	; (1f814 <mayfly_is_enabled+0x3c>)
   1f7f4:	2336      	movs	r3, #54	; 0x36
   1f7f6:	f005 fb86 	bl	24f06 <printk>
   1f7fa:	4040      	eors	r0, r0
   1f7fc:	f380 8811 	msr	BASEPRI, r0
   1f800:	f04f 0003 	mov.w	r0, #3
   1f804:	df02      	svc	2
		break;
	}

	return 0;
}
   1f806:	2000      	movs	r0, #0
   1f808:	bd08      	pop	{r3, pc}
   1f80a:	bf00      	nop
   1f80c:	0002d0b0 	.word	0x0002d0b0
   1f810:	0002c074 	.word	0x0002c074
   1f814:	0002bfdc 	.word	0x0002bfdc

0001f818 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1f818:	4288      	cmp	r0, r1
   1f81a:	d00b      	beq.n	1f834 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1f81c:	2801      	cmp	r0, #1
   1f81e:	d003      	beq.n	1f828 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1f820:	2802      	cmp	r0, #2
   1f822:	d009      	beq.n	1f838 <mayfly_prio_is_equal+0x20>
   1f824:	2000      	movs	r0, #0
#endif
	       0;
}
   1f826:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1f828:	f1a1 0002 	sub.w	r0, r1, #2
   1f82c:	fab0 f080 	clz	r0, r0
   1f830:	0940      	lsrs	r0, r0, #5
   1f832:	4770      	bx	lr
   1f834:	2001      	movs	r0, #1
   1f836:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1f838:	f1a1 0001 	sub.w	r0, r1, #1
   1f83c:	fab0 f080 	clz	r0, r0
   1f840:	0940      	lsrs	r0, r0, #5
   1f842:	4770      	bx	lr

0001f844 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1f844:	2901      	cmp	r1, #1
{
   1f846:	b508      	push	{r3, lr}
	switch (callee_id) {
   1f848:	d00f      	beq.n	1f86a <mayfly_pend+0x26>
   1f84a:	2902      	cmp	r1, #2
   1f84c:	d00d      	beq.n	1f86a <mayfly_pend+0x26>
   1f84e:	b191      	cbz	r1, 1f876 <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1f850:	4a0c      	ldr	r2, [pc, #48]	; (1f884 <mayfly_pend+0x40>)
   1f852:	490d      	ldr	r1, [pc, #52]	; (1f888 <mayfly_pend+0x44>)
   1f854:	480d      	ldr	r0, [pc, #52]	; (1f88c <mayfly_pend+0x48>)
   1f856:	2367      	movs	r3, #103	; 0x67
   1f858:	f005 fb55 	bl	24f06 <printk>
   1f85c:	4040      	eors	r0, r0
   1f85e:	f380 8811 	msr	BASEPRI, r0
   1f862:	f04f 0003 	mov.w	r0, #3
   1f866:	df02      	svc	2
		break;
	}
}
   1f868:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1f86a:	4b09      	ldr	r3, [pc, #36]	; (1f890 <mayfly_pend+0x4c>)
   1f86c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1f870:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f874:	bd08      	pop	{r3, pc}
   1f876:	4b06      	ldr	r3, [pc, #24]	; (1f890 <mayfly_pend+0x4c>)
   1f878:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1f87c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1f880:	bd08      	pop	{r3, pc}
   1f882:	bf00      	nop
   1f884:	0002d0b0 	.word	0x0002d0b0
   1f888:	0002c074 	.word	0x0002c074
   1f88c:	0002bfdc 	.word	0x0002bfdc
   1f890:	e000e100 	.word	0xe000e100

0001f894 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f894:	2803      	cmp	r0, #3
{
   1f896:	b510      	push	{r4, lr}
   1f898:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f89a:	d804      	bhi.n	1f8a6 <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1f89c:	4b11      	ldr	r3, [pc, #68]	; (1f8e4 <hal_ticker_instance0_caller_id_get+0x50>)
   1f89e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1f8a0:	b18c      	cbz	r4, 1f8c6 <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1f8a2:	4620      	mov	r0, r4
   1f8a4:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1f8a6:	4a10      	ldr	r2, [pc, #64]	; (1f8e8 <hal_ticker_instance0_caller_id_get+0x54>)
   1f8a8:	4910      	ldr	r1, [pc, #64]	; (1f8ec <hal_ticker_instance0_caller_id_get+0x58>)
   1f8aa:	4811      	ldr	r0, [pc, #68]	; (1f8f0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1f8ac:	232b      	movs	r3, #43	; 0x2b
   1f8ae:	f005 fb2a 	bl	24f06 <printk>
   1f8b2:	4040      	eors	r0, r0
   1f8b4:	f380 8811 	msr	BASEPRI, r0
   1f8b8:	f04f 0003 	mov.w	r0, #3
   1f8bc:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1f8be:	4b09      	ldr	r3, [pc, #36]	; (1f8e4 <hal_ticker_instance0_caller_id_get+0x50>)
   1f8c0:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1f8c2:	2c00      	cmp	r4, #0
   1f8c4:	d1ed      	bne.n	1f8a2 <hal_ticker_instance0_caller_id_get+0xe>
   1f8c6:	4a08      	ldr	r2, [pc, #32]	; (1f8e8 <hal_ticker_instance0_caller_id_get+0x54>)
   1f8c8:	490a      	ldr	r1, [pc, #40]	; (1f8f4 <hal_ticker_instance0_caller_id_get+0x60>)
   1f8ca:	4809      	ldr	r0, [pc, #36]	; (1f8f0 <hal_ticker_instance0_caller_id_get+0x5c>)
   1f8cc:	232e      	movs	r3, #46	; 0x2e
   1f8ce:	f005 fb1a 	bl	24f06 <printk>
   1f8d2:	4040      	eors	r0, r0
   1f8d4:	f380 8811 	msr	BASEPRI, r0
   1f8d8:	f04f 0003 	mov.w	r0, #3
   1f8dc:	df02      	svc	2
}
   1f8de:	4620      	mov	r0, r4
   1f8e0:	bd10      	pop	{r4, pc}
   1f8e2:	bf00      	nop
   1f8e4:	0002d1b8 	.word	0x0002d1b8
   1f8e8:	0002d124 	.word	0x0002d124
   1f8ec:	0002d174 	.word	0x0002d174
   1f8f0:	0002bfdc 	.word	0x0002bfdc
   1f8f4:	0002d194 	.word	0x0002d194

0001f8f8 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1f8f8:	3801      	subs	r0, #1
{
   1f8fa:	b510      	push	{r4, lr}
   1f8fc:	461c      	mov	r4, r3
	switch (caller_id) {
   1f8fe:	2804      	cmp	r0, #4
   1f900:	f200 8082 	bhi.w	1fa08 <hal_ticker_instance0_sched+0x110>
   1f904:	e8df f000 	tbb	[pc, r0]
   1f908:	3f302112 	.word	0x3f302112
   1f90c:	03          	.byte	0x03
   1f90d:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1f90e:	2904      	cmp	r1, #4
   1f910:	d04a      	beq.n	1f9a8 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1f912:	4a44      	ldr	r2, [pc, #272]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1f914:	4944      	ldr	r1, [pc, #272]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1f916:	4845      	ldr	r0, [pc, #276]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1f918:	23ba      	movs	r3, #186	; 0xba
   1f91a:	f005 faf4 	bl	24f06 <printk>
   1f91e:	4040      	eors	r0, r0
   1f920:	f380 8811 	msr	BASEPRI, r0
   1f924:	f04f 0003 	mov.w	r0, #3
   1f928:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1f92a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f92c:	2904      	cmp	r1, #4
   1f92e:	d043      	beq.n	1f9b8 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1f930:	4a3c      	ldr	r2, [pc, #240]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1f932:	493d      	ldr	r1, [pc, #244]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1f934:	483d      	ldr	r0, [pc, #244]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1f936:	234e      	movs	r3, #78	; 0x4e
   1f938:	f005 fae5 	bl	24f06 <printk>
   1f93c:	4040      	eors	r0, r0
   1f93e:	f380 8811 	msr	BASEPRI, r0
   1f942:	f04f 0003 	mov.w	r0, #3
   1f946:	df02      	svc	2
}
   1f948:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f94a:	2903      	cmp	r1, #3
   1f94c:	d03c      	beq.n	1f9c8 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1f94e:	4a35      	ldr	r2, [pc, #212]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1f950:	4935      	ldr	r1, [pc, #212]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1f952:	4836      	ldr	r0, [pc, #216]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1f954:	2365      	movs	r3, #101	; 0x65
   1f956:	f005 fad6 	bl	24f06 <printk>
   1f95a:	4040      	eors	r0, r0
   1f95c:	f380 8811 	msr	BASEPRI, r0
   1f960:	f04f 0003 	mov.w	r0, #3
   1f964:	df02      	svc	2
}
   1f966:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f968:	2904      	cmp	r1, #4
   1f96a:	d035      	beq.n	1f9d8 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1f96c:	4a2d      	ldr	r2, [pc, #180]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1f96e:	492e      	ldr	r1, [pc, #184]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1f970:	482e      	ldr	r0, [pc, #184]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1f972:	237c      	movs	r3, #124	; 0x7c
   1f974:	f005 fac7 	bl	24f06 <printk>
   1f978:	4040      	eors	r0, r0
   1f97a:	f380 8811 	msr	BASEPRI, r0
   1f97e:	f04f 0003 	mov.w	r0, #3
   1f982:	df02      	svc	2
}
   1f984:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1f986:	2903      	cmp	r1, #3
   1f988:	d036      	beq.n	1f9f8 <hal_ticker_instance0_sched+0x100>
   1f98a:	2904      	cmp	r1, #4
   1f98c:	d02c      	beq.n	1f9e8 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1f98e:	4a25      	ldr	r2, [pc, #148]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1f990:	4925      	ldr	r1, [pc, #148]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1f992:	4826      	ldr	r0, [pc, #152]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1f994:	23a2      	movs	r3, #162	; 0xa2
   1f996:	f005 fab6 	bl	24f06 <printk>
   1f99a:	4040      	eors	r0, r0
   1f99c:	f380 8811 	msr	BASEPRI, r0
   1f9a0:	f04f 0003 	mov.w	r0, #3
   1f9a4:	df02      	svc	2
}
   1f9a6:	bd10      	pop	{r4, pc}
			m.param = instance;
   1f9a8:	4b21      	ldr	r3, [pc, #132]	; (1fa30 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f9aa:	2102      	movs	r1, #2
			m.param = instance;
   1f9ac:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f9ae:	2003      	movs	r0, #3
}
   1f9b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1f9b4:	f7f0 bc2e 	b.w	10214 <mayfly_enqueue>
			m.param = instance;
   1f9b8:	4b1e      	ldr	r3, [pc, #120]	; (1fa34 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1f9ba:	2102      	movs	r1, #2
			m.param = instance;
   1f9bc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1f9be:	2000      	movs	r0, #0
}
   1f9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1f9c4:	f7f0 bc26 	b.w	10214 <mayfly_enqueue>
			m.param = instance;
   1f9c8:	4b1b      	ldr	r3, [pc, #108]	; (1fa38 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1f9ca:	2101      	movs	r1, #1
			m.param = instance;
   1f9cc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1f9ce:	4608      	mov	r0, r1
}
   1f9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1f9d4:	f7f0 bc1e 	b.w	10214 <mayfly_enqueue>
			m.param = instance;
   1f9d8:	4b18      	ldr	r3, [pc, #96]	; (1fa3c <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f9da:	2102      	movs	r1, #2
			m.param = instance;
   1f9dc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f9de:	2001      	movs	r0, #1
}
   1f9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1f9e4:	f7f0 bc16 	b.w	10214 <mayfly_enqueue>
			m.param = instance;
   1f9e8:	4b15      	ldr	r3, [pc, #84]	; (1fa40 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f9ea:	2102      	movs	r1, #2
			m.param = instance;
   1f9ec:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f9ee:	4608      	mov	r0, r1
}
   1f9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f9f4:	f7f0 bc0e 	b.w	10214 <mayfly_enqueue>
			m.param = instance;
   1f9f8:	4b12      	ldr	r3, [pc, #72]	; (1fa44 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f9fa:	2101      	movs	r1, #1
			m.param = instance;
   1f9fc:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1f9fe:	2002      	movs	r0, #2
}
   1fa00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1fa04:	f7f0 bc06 	b.w	10214 <mayfly_enqueue>
		LL_ASSERT(0);
   1fa08:	4a06      	ldr	r2, [pc, #24]	; (1fa24 <hal_ticker_instance0_sched+0x12c>)
   1fa0a:	4907      	ldr	r1, [pc, #28]	; (1fa28 <hal_ticker_instance0_sched+0x130>)
   1fa0c:	4807      	ldr	r0, [pc, #28]	; (1fa2c <hal_ticker_instance0_sched+0x134>)
   1fa0e:	23c0      	movs	r3, #192	; 0xc0
   1fa10:	f005 fa79 	bl	24f06 <printk>
   1fa14:	4040      	eors	r0, r0
   1fa16:	f380 8811 	msr	BASEPRI, r0
   1fa1a:	f04f 0003 	mov.w	r0, #3
   1fa1e:	df02      	svc	2
}
   1fa20:	bd10      	pop	{r4, pc}
   1fa22:	bf00      	nop
   1fa24:	0002d124 	.word	0x0002d124
   1fa28:	0002c074 	.word	0x0002c074
   1fa2c:	0002bfdc 	.word	0x0002bfdc
   1fa30:	200006b0 	.word	0x200006b0
   1fa34:	200006a0 	.word	0x200006a0
   1fa38:	20000690 	.word	0x20000690
   1fa3c:	200006e0 	.word	0x200006e0
   1fa40:	200006c0 	.word	0x200006c0
   1fa44:	200006d0 	.word	0x200006d0

0001fa48 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1fa48:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1fa4a:	2000      	movs	r0, #0
   1fa4c:	f7ff b9a6 	b.w	1ed9c <cntr_cmp_set>

0001fa50 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1fa50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1fa54:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1fa58:	3201      	adds	r2, #1
   1fa5a:	d008      	beq.n	1fa6e <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1fa5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fa60:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fa64:	f013 0301 	ands.w	r3, r3, #1
   1fa68:	d10f      	bne.n	1fa8a <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   1fa6a:	2000      	movs	r0, #0
   1fa6c:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fa6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1fa72:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1fa76:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1fa78:	4293      	cmp	r3, r2
   1fa7a:	d0f6      	beq.n	1fa6a <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1fa7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fa80:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1fa84:	f013 0301 	ands.w	r3, r3, #1
   1fa88:	d0ef      	beq.n	1fa6a <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1fa8a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1fa8e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1fa90:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fa92:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1fa96:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fa9a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1fa9c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1fa9e:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1faa2:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1faa6:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1faa8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1faac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1fab0:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1fab2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1fab6:	3301      	adds	r3, #1
   1fab8:	d03b      	beq.n	1fb32 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1faba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1fabe:	3301      	adds	r3, #1
   1fac0:	d037      	beq.n	1fb32 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1fac2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1fac6:	3301      	adds	r3, #1
   1fac8:	d033      	beq.n	1fb32 <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1faca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1face:	3301      	adds	r3, #1
   1fad0:	d02f      	beq.n	1fb32 <hci_vendor_read_static_addr+0xe2>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1fad2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1fad6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1fad8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fada:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1fade:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fae2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1fae4:	f880 c009 	strb.w	ip, [r0, #9]
   1fae8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1faea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1faee:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1faf0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1faf2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1faf6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fafa:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1fafc:	f880 c00d 	strb.w	ip, [r0, #13]
   1fb00:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1fb02:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1fb06:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1fb08:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1fb0a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1fb0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb12:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1fb14:	73c3      	strb	r3, [r0, #15]
   1fb16:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1fb1a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1fb1e:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1fb20:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1fb22:	0a11      	lsrs	r1, r2, #8
   1fb24:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fb28:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1fb2a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1fb2c:	7541      	strb	r1, [r0, #21]
		return 1;
   1fb2e:	2001      	movs	r0, #1
}
   1fb30:	4770      	bx	lr
__ssp_bos_icheck3(memset, void *, int)
   1fb32:	2300      	movs	r3, #0
   1fb34:	f8c0 3006 	str.w	r3, [r0, #6]
   1fb38:	f8c0 300a 	str.w	r3, [r0, #10]
   1fb3c:	f8c0 300e 	str.w	r3, [r0, #14]
   1fb40:	f8c0 3012 	str.w	r3, [r0, #18]
   1fb44:	2001      	movs	r0, #1
   1fb46:	4770      	bx	lr

0001fb48 <hci_vendor_read_key_hierarchy_roots>:
   1fb48:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1fb4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1fb4e:	6003      	str	r3, [r0, #0]
   1fb50:	6043      	str	r3, [r0, #4]
   1fb52:	6083      	str	r3, [r0, #8]
   1fb54:	60c3      	str	r3, [r0, #12]
   1fb56:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1fb5a:	3301      	adds	r3, #1
   1fb5c:	d03a      	beq.n	1fbd4 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1fb5e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1fb62:	3301      	adds	r3, #1
   1fb64:	d036      	beq.n	1fbd4 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1fb66:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1fb6a:	3301      	adds	r3, #1
   1fb6c:	d032      	beq.n	1fbd4 <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1fb6e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1fb72:	3301      	adds	r3, #1
   1fb74:	d02e      	beq.n	1fbd4 <hci_vendor_read_key_hierarchy_roots+0x8c>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1fb76:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   1fb7a:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1fb7c:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1fb7e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1fb82:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb86:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   1fb88:	f881 c003 	strb.w	ip, [r1, #3]
   1fb8c:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1fb8e:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   1fb92:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1fb94:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1fb96:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1fb9a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fb9e:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   1fba0:	f881 c007 	strb.w	ip, [r1, #7]
   1fba4:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1fba6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   1fbaa:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1fbac:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   1fbae:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   1fbb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1fbb6:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   1fbb8:	724b      	strb	r3, [r1, #9]
   1fbba:	f881 c00b 	strb.w	ip, [r1, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1fbbe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   1fbc2:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1fbc4:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1fbc6:	0a10      	lsrs	r0, r2, #8
   1fbc8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fbcc:	734b      	strb	r3, [r1, #13]
	dst[0] = val;
   1fbce:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   1fbd0:	73c8      	strb	r0, [r1, #15]
}
   1fbd2:	4770      	bx	lr
   1fbd4:	2300      	movs	r3, #0
   1fbd6:	600b      	str	r3, [r1, #0]
   1fbd8:	604b      	str	r3, [r1, #4]
   1fbda:	608b      	str	r3, [r1, #8]
   1fbdc:	60cb      	str	r3, [r1, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1fbde:	4770      	bx	lr

0001fbe0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1fbe0:	4b02      	ldr	r3, [pc, #8]	; (1fbec <net_buf_pool_get+0xc>)
   1fbe2:	222c      	movs	r2, #44	; 0x2c
   1fbe4:	fb02 3000 	mla	r0, r2, r0, r3
   1fbe8:	4770      	bx	lr
   1fbea:	bf00      	nop
   1fbec:	20000c74 	.word	0x20000c74

0001fbf0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fbf0:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fbf2:	4b06      	ldr	r3, [pc, #24]	; (1fc0c <net_buf_id+0x1c>)
   1fbf4:	212c      	movs	r1, #44	; 0x2c
   1fbf6:	fb01 3302 	mla	r3, r1, r2, r3
   1fbfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fbfc:	7f1b      	ldrb	r3, [r3, #28]
   1fbfe:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fc00:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fc02:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1fc06:	fbb0 f0f3 	udiv	r0, r0, r3
   1fc0a:	4770      	bx	lr
   1fc0c:	20000c74 	.word	0x20000c74

0001fc10 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1fc10:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc12:	4b0a      	ldr	r3, [pc, #40]	; (1fc3c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fc14:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc16:	242c      	movs	r4, #44	; 0x2c
   1fc18:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1fc1c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fc20:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fc22:	6823      	ldr	r3, [r4, #0]
   1fc24:	429a      	cmp	r2, r3
   1fc26:	bf94      	ite	ls
   1fc28:	600a      	strls	r2, [r1, #0]
   1fc2a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fc2c:	f7ff ffe0 	bl	1fbf0 <net_buf_id>
   1fc30:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1fc34:	fb02 3000 	mla	r0, r2, r0, r3
   1fc38:	bd10      	pop	{r4, pc}
   1fc3a:	bf00      	nop
   1fc3c:	20000c74 	.word	0x20000c74

0001fc40 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fc40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fc44:	4605      	mov	r5, r0
   1fc46:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fc48:	4610      	mov	r0, r2
   1fc4a:	4619      	mov	r1, r3
{
   1fc4c:	4691      	mov	r9, r2
   1fc4e:	4698      	mov	r8, r3
   1fc50:	4617      	mov	r7, r2
   1fc52:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fc54:	f00a fd4a 	bl	2a6ec <sys_clock_timeout_end_calc>
   1fc58:	4682      	mov	sl, r0
   1fc5a:	468b      	mov	fp, r1
	__asm__ volatile(
   1fc5c:	f04f 0320 	mov.w	r3, #32
   1fc60:	f3ef 8111 	mrs	r1, BASEPRI
   1fc64:	f383 8812 	msr	BASEPRI_MAX, r3
   1fc68:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1fc6c:	8b6b      	ldrh	r3, [r5, #26]
   1fc6e:	2b00      	cmp	r3, #0
   1fc70:	d05a      	beq.n	1fd28 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1fc72:	8b2a      	ldrh	r2, [r5, #24]
   1fc74:	429a      	cmp	r2, r3
   1fc76:	d93e      	bls.n	1fcf6 <net_buf_alloc_len+0xb6>
   1fc78:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1fc7a:	2200      	movs	r2, #0
   1fc7c:	2300      	movs	r3, #0
   1fc7e:	4628      	mov	r0, r5
   1fc80:	f002 fbbe 	bl	22400 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1fc84:	9900      	ldr	r1, [sp, #0]
   1fc86:	4604      	mov	r4, r0
   1fc88:	2800      	cmp	r0, #0
   1fc8a:	d034      	beq.n	1fcf6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1fc8c:	f381 8811 	msr	BASEPRI, r1
   1fc90:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1fc94:	9b01      	ldr	r3, [sp, #4]
   1fc96:	2b00      	cmp	r3, #0
   1fc98:	d056      	beq.n	1fd48 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1fc9a:	ea58 0309 	orrs.w	r3, r8, r9
   1fc9e:	d00f      	beq.n	1fcc0 <net_buf_alloc_len+0x80>
   1fca0:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   1fca4:	bf08      	it	eq
   1fca6:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   1fcaa:	d009      	beq.n	1fcc0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1fcac:	f003 fa8e 	bl	231cc <sys_clock_tick_get>
   1fcb0:	ebba 0700 	subs.w	r7, sl, r0
   1fcb4:	eb6b 0601 	sbc.w	r6, fp, r1
   1fcb8:	2e00      	cmp	r6, #0
   1fcba:	bfbc      	itt	lt
   1fcbc:	2700      	movlt	r7, #0
   1fcbe:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fcc0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fcc2:	f8df 809c 	ldr.w	r8, [pc, #156]	; 1fd60 <net_buf_alloc_len+0x120>
   1fcc6:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1fcca:	fb09 8303 	mla	r3, r9, r3, r8
   1fcce:	463a      	mov	r2, r7
   1fcd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fcd2:	681b      	ldr	r3, [r3, #0]
   1fcd4:	a901      	add	r1, sp, #4
   1fcd6:	681d      	ldr	r5, [r3, #0]
   1fcd8:	4620      	mov	r0, r4
   1fcda:	4633      	mov	r3, r6
   1fcdc:	47a8      	blx	r5
   1fcde:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1fce0:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1fce2:	2800      	cmp	r0, #0
   1fce4:	d131      	bne.n	1fd4a <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   1fce6:	79a0      	ldrb	r0, [r4, #6]
   1fce8:	4621      	mov	r1, r4
   1fcea:	fb00 8009 	mla	r0, r0, r9, r8
   1fcee:	f00a fa6a 	bl	2a1c6 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1fcf2:	462c      	mov	r4, r5
}
   1fcf4:	e024      	b.n	1fd40 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   1fcf6:	8b68      	ldrh	r0, [r5, #26]
   1fcf8:	1e43      	subs	r3, r0, #1
   1fcfa:	836b      	strh	r3, [r5, #26]
   1fcfc:	f381 8811 	msr	BASEPRI, r1
   1fd00:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fd04:	7f2a      	ldrb	r2, [r5, #28]
   1fd06:	f102 0417 	add.w	r4, r2, #23
   1fd0a:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1fd0e:	8b2c      	ldrh	r4, [r5, #24]
   1fd10:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1fd12:	6aac      	ldr	r4, [r5, #40]	; 0x28
   1fd14:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1fd18:	4811      	ldr	r0, [pc, #68]	; (1fd60 <net_buf_alloc_len+0x120>)
   1fd1a:	4b12      	ldr	r3, [pc, #72]	; (1fd64 <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   1fd1c:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1fd1e:	1a2d      	subs	r5, r5, r0
   1fd20:	10ad      	asrs	r5, r5, #2
   1fd22:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1fd24:	71a5      	strb	r5, [r4, #6]
		goto success;
   1fd26:	e7b5      	b.n	1fc94 <net_buf_alloc_len+0x54>
   1fd28:	f381 8811 	msr	BASEPRI, r1
   1fd2c:	f3bf 8f6f 	isb	sy
   1fd30:	464a      	mov	r2, r9
   1fd32:	4643      	mov	r3, r8
   1fd34:	4628      	mov	r0, r5
   1fd36:	f002 fb63 	bl	22400 <z_impl_k_queue_get>
	if (!buf) {
   1fd3a:	4604      	mov	r4, r0
   1fd3c:	2800      	cmp	r0, #0
   1fd3e:	d1a9      	bne.n	1fc94 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1fd40:	4620      	mov	r0, r4
   1fd42:	b003      	add	sp, #12
   1fd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1fd48:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1fd4a:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1fd4c:	2201      	movs	r2, #1
	buf->frags = NULL;
   1fd4e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1fd50:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1fd52:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1fd54:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1fd56:	6923      	ldr	r3, [r4, #16]
   1fd58:	81e2      	strh	r2, [r4, #14]
   1fd5a:	60a3      	str	r3, [r4, #8]
	return buf;
   1fd5c:	e7f0      	b.n	1fd40 <net_buf_alloc_len+0x100>
   1fd5e:	bf00      	nop
   1fd60:	20000c74 	.word	0x20000c74
   1fd64:	ba2e8ba3 	.word	0xba2e8ba3

0001fd68 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1fd68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fd6c:	4d16      	ldr	r5, [pc, #88]	; (1fdc8 <net_buf_unref+0x60>)
   1fd6e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1fd70:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1fd72:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   1fd74:	b90c      	cbnz	r4, 1fd7a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1fd76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1fd7a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1fd7c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1fd80:	3b01      	subs	r3, #1
   1fd82:	b2db      	uxtb	r3, r3
   1fd84:	7123      	strb	r3, [r4, #4]
   1fd86:	2b00      	cmp	r3, #0
   1fd88:	d1f5      	bne.n	1fd76 <net_buf_unref+0xe>
		if (buf->__buf) {
   1fd8a:	6921      	ldr	r1, [r4, #16]
   1fd8c:	b159      	cbz	r1, 1fda6 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1fd8e:	7963      	ldrb	r3, [r4, #5]
   1fd90:	079b      	lsls	r3, r3, #30
   1fd92:	d407      	bmi.n	1fda4 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd94:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1fd96:	fb07 5303 	mla	r3, r7, r3, r5
   1fd9a:	4620      	mov	r0, r4
   1fd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1fd9e:	681b      	ldr	r3, [r3, #0]
   1fda0:	689b      	ldr	r3, [r3, #8]
   1fda2:	4798      	blx	r3
			buf->__buf = NULL;
   1fda4:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1fda6:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1fda8:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1fdaa:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1fdae:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1fdb0:	6a1b      	ldr	r3, [r3, #32]
   1fdb2:	b11b      	cbz	r3, 1fdbc <net_buf_unref+0x54>
			pool->destroy(buf);
   1fdb4:	4620      	mov	r0, r4
   1fdb6:	4798      	blx	r3
{
   1fdb8:	4644      	mov	r4, r8
   1fdba:	e7db      	b.n	1fd74 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1fdbc:	4621      	mov	r1, r4
   1fdbe:	fb00 5007 	mla	r0, r0, r7, r5
   1fdc2:	f00a fa00 	bl	2a1c6 <k_queue_prepend>
}
   1fdc6:	e7f7      	b.n	1fdb8 <net_buf_unref+0x50>
   1fdc8:	20000c74 	.word	0x20000c74

0001fdcc <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   1fdcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fdd0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   1fdd4:	4606      	mov	r6, r0
   1fdd6:	460d      	mov	r5, r1
   1fdd8:	4617      	mov	r7, r2
	while (buf->frags) {
   1fdda:	4604      	mov	r4, r0
   1fddc:	4621      	mov	r1, r4
   1fdde:	6824      	ldr	r4, [r4, #0]
   1fde0:	2c00      	cmp	r4, #0
   1fde2:	d1fb      	bne.n	1fddc <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   1fde4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   1fde8:	f101 0b08 	add.w	fp, r1, #8
   1fdec:	4658      	mov	r0, fp
   1fdee:	f009 fdf9 	bl	299e4 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   1fdf2:	4285      	cmp	r5, r0
   1fdf4:	bf2c      	ite	cs
   1fdf6:	b282      	uxthcs	r2, r0
   1fdf8:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fdfa:	4639      	mov	r1, r7
   1fdfc:	4658      	mov	r0, fp
   1fdfe:	9201      	str	r2, [sp, #4]
   1fe00:	f009 fda9 	bl	29956 <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   1fe04:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   1fe06:	1aad      	subs	r5, r5, r2
		added_len += count;
   1fe08:	4414      	add	r4, r2
		value8 += count;
   1fe0a:	4417      	add	r7, r2
		if (len == 0) {
   1fe0c:	d016      	beq.n	1fe3c <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   1fe0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1fe10:	b14b      	cbz	r3, 1fe26 <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   1fe12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1fe14:	4640      	mov	r0, r8
   1fe16:	4649      	mov	r1, r9
   1fe18:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   1fe1a:	4601      	mov	r1, r0
		}

		if (!frag) {
   1fe1c:	b170      	cbz	r0, 1fe3c <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   1fe1e:	4630      	mov	r0, r6
   1fe20:	f009 fd76 	bl	29910 <net_buf_frag_add>
	do {
   1fe24:	e7e0      	b.n	1fde8 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   1fe26:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   1fe28:	f8df c018 	ldr.w	ip, [pc, #24]	; 1fe44 <net_buf_append_bytes+0x78>
   1fe2c:	4642      	mov	r2, r8
   1fe2e:	464b      	mov	r3, r9
   1fe30:	4629      	mov	r1, r5
   1fe32:	fb00 c00a 	mla	r0, r0, sl, ip
   1fe36:	f7ff ff03 	bl	1fc40 <net_buf_alloc_len>
   1fe3a:	e7ee      	b.n	1fe1a <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   1fe3c:	4620      	mov	r0, r4
   1fe3e:	b003      	add	sp, #12
   1fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fe44:	20000c74 	.word	0x20000c74

0001fe48 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   1fe48:	4b08      	ldr	r3, [pc, #32]	; (1fe6c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1fe4a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1fe4c:	1ac3      	subs	r3, r0, r3
{
   1fe4e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1fe50:	4907      	ldr	r1, [pc, #28]	; (1fe70 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   1fe52:	109b      	asrs	r3, r3, #2
{
   1fe54:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1fe56:	4359      	muls	r1, r3
   1fe58:	4806      	ldr	r0, [pc, #24]	; (1fe74 <onoff_stop+0x2c>)
   1fe5a:	2240      	movs	r2, #64	; 0x40
   1fe5c:	f009 fde6 	bl	29a2c <stop>
	notify(mgr, res);
   1fe60:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   1fe62:	4601      	mov	r1, r0
	notify(mgr, res);
   1fe64:	4620      	mov	r0, r4
}
   1fe66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1fe6a:	4718      	bx	r3
   1fe6c:	20003218 	.word	0x20003218
   1fe70:	b6db6db7 	.word	0xb6db6db7
   1fe74:	0002b370 	.word	0x0002b370

0001fe78 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1fe78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1fe7a:	4c0c      	ldr	r4, [pc, #48]	; (1feac <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1fe7c:	4a0c      	ldr	r2, [pc, #48]	; (1feb0 <onoff_start+0x38>)
   1fe7e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   1fe80:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1fe82:	9300      	str	r3, [sp, #0]
{
   1fe84:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1fe86:	460b      	mov	r3, r1
   1fe88:	490a      	ldr	r1, [pc, #40]	; (1feb4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1fe8a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1fe8c:	4361      	muls	r1, r4
{
   1fe8e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1fe90:	4809      	ldr	r0, [pc, #36]	; (1feb8 <onoff_start+0x40>)
   1fe92:	f009 fdf8 	bl	29a86 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   1fe96:	1e01      	subs	r1, r0, #0
   1fe98:	da05      	bge.n	1fea6 <onoff_start+0x2e>
		notify(mgr, err);
   1fe9a:	4630      	mov	r0, r6
   1fe9c:	462b      	mov	r3, r5
	}
}
   1fe9e:	b002      	add	sp, #8
   1fea0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   1fea4:	4718      	bx	r3
}
   1fea6:	b002      	add	sp, #8
   1fea8:	bd70      	pop	{r4, r5, r6, pc}
   1feaa:	bf00      	nop
   1feac:	20003218 	.word	0x20003218
   1feb0:	00029af5 	.word	0x00029af5
   1feb4:	b6db6db7 	.word	0xb6db6db7
   1feb8:	0002b370 	.word	0x0002b370

0001febc <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1febc:	2200      	movs	r2, #0
{
   1febe:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fec0:	2101      	movs	r1, #1
{
   1fec2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1fec4:	4610      	mov	r0, r2
   1fec6:	f7e6 fe13 	bl	6af0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   1feca:	2000      	movs	r0, #0
   1fecc:	f7e6 fdde 	bl	6a8c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   1fed0:	480f      	ldr	r0, [pc, #60]	; (1ff10 <clk_init+0x54>)
   1fed2:	f001 f9cf 	bl	21274 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   1fed6:	4b0f      	ldr	r3, [pc, #60]	; (1ff14 <clk_init+0x58>)
   1fed8:	4298      	cmp	r0, r3
   1feda:	d115      	bne.n	1ff08 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   1fedc:	f009 ff15 	bl	29d0a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   1fee0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   1fee2:	490d      	ldr	r1, [pc, #52]	; (1ff18 <clk_init+0x5c>)
   1fee4:	4630      	mov	r0, r6
   1fee6:	f005 f877 	bl	24fd8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   1feea:	2800      	cmp	r0, #0
   1feec:	db0b      	blt.n	1ff06 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   1feee:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1fef0:	4909      	ldr	r1, [pc, #36]	; (1ff18 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1fef2:	2501      	movs	r5, #1
   1fef4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   1fef6:	f104 001c 	add.w	r0, r4, #28
   1fefa:	f005 f86d 	bl	24fd8 <onoff_manager_init>
		if (err < 0) {
   1fefe:	2800      	cmp	r0, #0
   1ff00:	db01      	blt.n	1ff06 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   1ff02:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   1ff04:	2000      	movs	r0, #0
}
   1ff06:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   1ff08:	f06f 0004 	mvn.w	r0, #4
   1ff0c:	e7fb      	b.n	1ff06 <clk_init+0x4a>
   1ff0e:	bf00      	nop
   1ff10:	0001ff51 	.word	0x0001ff51
   1ff14:	0bad0000 	.word	0x0bad0000
   1ff18:	0002d1f8 	.word	0x0002d1f8

0001ff1c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1ff1c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1ff1e:	230c      	movs	r3, #12
   1ff20:	4809      	ldr	r0, [pc, #36]	; (1ff48 <clkstarted_handle.constprop.0+0x2c>)
   1ff22:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   1ff24:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   1ff26:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   1ff28:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1ff2c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1ff2e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   1ff30:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   1ff32:	4418      	add	r0, r3
   1ff34:	f009 fd67 	bl	29a06 <set_on_state>
	if (callback) {
   1ff38:	b12d      	cbz	r5, 1ff46 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ff3a:	4632      	mov	r2, r6
   1ff3c:	462b      	mov	r3, r5
   1ff3e:	4803      	ldr	r0, [pc, #12]	; (1ff4c <clkstarted_handle.constprop.0+0x30>)
}
   1ff40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   1ff44:	4718      	bx	r3
}
   1ff46:	bd70      	pop	{r4, r5, r6, pc}
   1ff48:	20003218 	.word	0x20003218
   1ff4c:	0002b370 	.word	0x0002b370

0001ff50 <clock_event_handler>:
	switch (event) {
   1ff50:	b110      	cbz	r0, 1ff58 <clock_event_handler+0x8>
   1ff52:	2801      	cmp	r0, #1
   1ff54:	d004      	beq.n	1ff60 <clock_event_handler+0x10>
   1ff56:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   1ff58:	4b03      	ldr	r3, [pc, #12]	; (1ff68 <clock_event_handler+0x18>)
   1ff5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ff5c:	075b      	lsls	r3, r3, #29
   1ff5e:	d101      	bne.n	1ff64 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   1ff60:	f7ff bfdc 	b.w	1ff1c <clkstarted_handle.constprop.0>
}
   1ff64:	4770      	bx	lr
   1ff66:	bf00      	nop
   1ff68:	20003218 	.word	0x20003218

0001ff6c <generic_hfclk_start>:
{
   1ff6c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1ff6e:	f04f 0320 	mov.w	r3, #32
   1ff72:	f3ef 8111 	mrs	r1, BASEPRI
   1ff76:	f383 8812 	msr	BASEPRI_MAX, r3
   1ff7a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1ff7e:	4a12      	ldr	r2, [pc, #72]	; (1ffc8 <generic_hfclk_start+0x5c>)
   1ff80:	6813      	ldr	r3, [r2, #0]
   1ff82:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   1ff86:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1ff8a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1ff8c:	d00c      	beq.n	1ffa8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ff8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1ff92:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ff96:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1ff9a:	f013 0301 	ands.w	r3, r3, #1
   1ff9e:	d003      	beq.n	1ffa8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   1ffa0:	480a      	ldr	r0, [pc, #40]	; (1ffcc <generic_hfclk_start+0x60>)
   1ffa2:	f009 fd30 	bl	29a06 <set_on_state>
			already_started = true;
   1ffa6:	2301      	movs	r3, #1
	__asm__ volatile(
   1ffa8:	f381 8811 	msr	BASEPRI, r1
   1ffac:	f3bf 8f6f 	isb	sy
	if (already_started) {
   1ffb0:	b123      	cbz	r3, 1ffbc <generic_hfclk_start+0x50>
}
   1ffb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   1ffb6:	2000      	movs	r0, #0
   1ffb8:	f7ff bfb0 	b.w	1ff1c <clkstarted_handle.constprop.0>
}
   1ffbc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   1ffc0:	2001      	movs	r0, #1
   1ffc2:	f009 beac 	b.w	29d1e <nrfx_clock_start>
   1ffc6:	bf00      	nop
   1ffc8:	20003268 	.word	0x20003268
   1ffcc:	20003258 	.word	0x20003258

0001ffd0 <api_blocking_start>:
{
   1ffd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ffd2:	2200      	movs	r2, #0
   1ffd4:	2301      	movs	r3, #1
   1ffd6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1ffda:	ab04      	add	r3, sp, #16
   1ffdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ffe0:	4a09      	ldr	r2, [pc, #36]	; (20008 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ffe2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ffe6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   1ffe8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   1ffec:	f009 fd7b 	bl	29ae6 <api_start>
	if (err < 0) {
   1fff0:	2800      	cmp	r0, #0
   1fff2:	db05      	blt.n	20000 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1fff4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1fff8:	2300      	movs	r3, #0
   1fffa:	4668      	mov	r0, sp
   1fffc:	f002 fa5a 	bl	224b4 <z_impl_k_sem_take>
}
   20000:	b007      	add	sp, #28
   20002:	f85d fb04 	ldr.w	pc, [sp], #4
   20006:	bf00      	nop
   20008:	00029b13 	.word	0x00029b13

0002000c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2000c:	4b09      	ldr	r3, [pc, #36]	; (20034 <generic_hfclk_stop+0x28>)
   2000e:	f3bf 8f5b 	dmb	ish
   20012:	e853 2f00 	ldrex	r2, [r3]
   20016:	f022 0102 	bic.w	r1, r2, #2
   2001a:	e843 1000 	strex	r0, r1, [r3]
   2001e:	2800      	cmp	r0, #0
   20020:	d1f7      	bne.n	20012 <generic_hfclk_stop+0x6>
   20022:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   20026:	07d3      	lsls	r3, r2, #31
   20028:	d402      	bmi.n	20030 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2002a:	2001      	movs	r0, #1
   2002c:	f001 b932 	b.w	21294 <nrfx_clock_stop>
}
   20030:	4770      	bx	lr
   20032:	bf00      	nop
   20034:	20003268 	.word	0x20003268

00020038 <z_nrf_clock_control_get_onoff>:
}
   20038:	4a02      	ldr	r2, [pc, #8]	; (20044 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   2003a:	b2c3      	uxtb	r3, r0
}
   2003c:	201c      	movs	r0, #28
   2003e:	fb03 2000 	mla	r0, r3, r0, r2
   20042:	4770      	bx	lr
   20044:	20003218 	.word	0x20003218

00020048 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20048:	4b09      	ldr	r3, [pc, #36]	; (20070 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   2004a:	f3bf 8f5b 	dmb	ish
   2004e:	e853 2f00 	ldrex	r2, [r3]
   20052:	f042 0101 	orr.w	r1, r2, #1
   20056:	e843 1000 	strex	r0, r1, [r3]
   2005a:	2800      	cmp	r0, #0
   2005c:	d1f7      	bne.n	2004e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   2005e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   20062:	0793      	lsls	r3, r2, #30
   20064:	d402      	bmi.n	2006c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20066:	2001      	movs	r0, #1
   20068:	f009 be59 	b.w	29d1e <nrfx_clock_start>
}
   2006c:	4770      	bx	lr
   2006e:	bf00      	nop
   20070:	20003268 	.word	0x20003268

00020074 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20074:	4b09      	ldr	r3, [pc, #36]	; (2009c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   20076:	f3bf 8f5b 	dmb	ish
   2007a:	e853 2f00 	ldrex	r2, [r3]
   2007e:	f022 0101 	bic.w	r1, r2, #1
   20082:	e843 1000 	strex	r0, r1, [r3]
   20086:	2800      	cmp	r0, #0
   20088:	d1f7      	bne.n	2007a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   2008a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   2008e:	0793      	lsls	r3, r2, #30
   20090:	d402      	bmi.n	20098 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20092:	2001      	movs	r0, #1
   20094:	f001 b8fe 	b.w	21294 <nrfx_clock_stop>
}
   20098:	4770      	bx	lr
   2009a:	bf00      	nop
   2009c:	20003268 	.word	0x20003268

000200a0 <z_nrf_clock_control_lf_on>:
{
   200a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   200a4:	4939      	ldr	r1, [pc, #228]	; (2018c <z_nrf_clock_control_lf_on+0xec>)
   200a6:	f3bf 8f5b 	dmb	ish
   200aa:	4607      	mov	r7, r0
   200ac:	2201      	movs	r2, #1
   200ae:	e851 3f00 	ldrex	r3, [r1]
   200b2:	e841 2000 	strex	r0, r2, [r1]
   200b6:	2800      	cmp	r0, #0
   200b8:	d1f9      	bne.n	200ae <z_nrf_clock_control_lf_on+0xe>
   200ba:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   200be:	b933      	cbnz	r3, 200ce <z_nrf_clock_control_lf_on+0x2e>
   200c0:	4933      	ldr	r1, [pc, #204]	; (20190 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   200c2:	4834      	ldr	r0, [pc, #208]	; (20194 <z_nrf_clock_control_lf_on+0xf4>)
   200c4:	604b      	str	r3, [r1, #4]
   200c6:	60cb      	str	r3, [r1, #12]
   200c8:	608a      	str	r2, [r1, #8]
   200ca:	f004 ff98 	bl	24ffe <onoff_request>
	switch (start_mode) {
   200ce:	1e7b      	subs	r3, r7, #1
   200d0:	2b01      	cmp	r3, #1
   200d2:	d82f      	bhi.n	20134 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   200d4:	2f01      	cmp	r7, #1
   200d6:	d107      	bne.n	200e8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   200d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   200dc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   200e0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   200e4:	2b01      	cmp	r3, #1
   200e6:	d025      	beq.n	20134 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   200e8:	f009 ffa3 	bl	2a032 <k_is_in_isr>
   200ec:	4604      	mov	r4, r0
   200ee:	b918      	cbnz	r0, 200f8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   200f0:	4b29      	ldr	r3, [pc, #164]	; (20198 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   200f2:	781b      	ldrb	r3, [r3, #0]
   200f4:	2b00      	cmp	r3, #0
   200f6:	d141      	bne.n	2017c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   200f8:	f04f 0320 	mov.w	r3, #32
   200fc:	f3ef 8611 	mrs	r6, BASEPRI
   20100:	f383 8812 	msr	BASEPRI_MAX, r3
   20104:	f3bf 8f6f 	isb	sy
   20108:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2010a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2019c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2010e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   20112:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20116:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   2011a:	03d2      	lsls	r2, r2, #15
   2011c:	d50c      	bpl.n	20138 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2011e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20122:	2b01      	cmp	r3, #1
   20124:	d001      	beq.n	2012a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20126:	2f01      	cmp	r7, #1
   20128:	d106      	bne.n	20138 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   2012a:	b30c      	cbz	r4, 20170 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   2012c:	f386 8811 	msr	BASEPRI, r6
   20130:	f3bf 8f6f 	isb	sy
}
   20134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20138:	b1ac      	cbz	r4, 20166 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2013a:	4630      	mov	r0, r6
   2013c:	f7e6 fc36 	bl	69ac <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20140:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20144:	2b00      	cmp	r3, #0
   20146:	d1e4      	bne.n	20112 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20148:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   2014c:	2a00      	cmp	r2, #0
   2014e:	d0e0      	beq.n	20112 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20150:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20154:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20158:	2301      	movs	r3, #1
   2015a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   2015e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20162:	60ab      	str	r3, [r5, #8]
}
   20164:	e7d5      	b.n	20112 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   20166:	2100      	movs	r1, #0
   20168:	2021      	movs	r0, #33	; 0x21
   2016a:	f002 fe61 	bl	22e30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   2016e:	e7e7      	b.n	20140 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   20170:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20174:	2202      	movs	r2, #2
   20176:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2017a:	e7db      	b.n	20134 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   2017c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20180:	2202      	movs	r2, #2
   20182:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   20186:	4606      	mov	r6, r0
}
   20188:	e7bf      	b.n	2010a <z_nrf_clock_control_lf_on+0x6a>
   2018a:	bf00      	nop
   2018c:	2000326c 	.word	0x2000326c
   20190:	20003208 	.word	0x20003208
   20194:	20003234 	.word	0x20003234
   20198:	20003991 	.word	0x20003991
   2019c:	e000e100 	.word	0xe000e100

000201a0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   201a0:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   201a2:	4c04      	ldr	r4, [pc, #16]	; (201b4 <rtt_console_init+0x14>)
   201a4:	4620      	mov	r0, r4
   201a6:	f7e4 fd01 	bl	4bac <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   201aa:	4620      	mov	r0, r4
   201ac:	f7e7 f94c 	bl	7448 <__stdout_hook_install>

	return 0;
}
   201b0:	2000      	movs	r0, #0
   201b2:	bd10      	pop	{r4, pc}
   201b4:	000201b9 	.word	0x000201b9

000201b8 <rtt_console_out>:
{
   201b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   201bc:	f8df 805c 	ldr.w	r8, [pc, #92]	; 2021c <rtt_console_out+0x64>
   201c0:	4e17      	ldr	r6, [pc, #92]	; (20220 <rtt_console_out+0x68>)
	char c = (char)character;
   201c2:	f88d 0007 	strb.w	r0, [sp, #7]
{
   201c6:	4604      	mov	r4, r0
	char c = (char)character;
   201c8:	2503      	movs	r5, #3
   201ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   201ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   201d2:	4640      	mov	r0, r8
   201d4:	f002 f85a 	bl	2228c <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   201d8:	2201      	movs	r2, #1
   201da:	f10d 0107 	add.w	r1, sp, #7
   201de:	2000      	movs	r0, #0
   201e0:	f001 fcaa 	bl	21b38 <SEGGER_RTT_WriteNoLock>
   201e4:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   201e6:	4640      	mov	r0, r8
   201e8:	f002 f8c8 	bl	2237c <z_impl_k_mutex_unlock>
		if (cnt) {
   201ec:	b12f      	cbz	r7, 201fa <rtt_console_out+0x42>
			host_present = true;
   201ee:	2301      	movs	r3, #1
   201f0:	7033      	strb	r3, [r6, #0]
}
   201f2:	4620      	mov	r0, r4
   201f4:	b002      	add	sp, #8
   201f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   201fa:	7833      	ldrb	r3, [r6, #0]
   201fc:	2b00      	cmp	r3, #0
   201fe:	d0f8      	beq.n	201f2 <rtt_console_out+0x3a>
			if (max_cnt) {
   20200:	3d01      	subs	r5, #1
   20202:	d008      	beq.n	20216 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   20204:	f009 ff15 	bl	2a032 <k_is_in_isr>
   20208:	2800      	cmp	r0, #0
   2020a:	d1de      	bne.n	201ca <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   2020c:	2100      	movs	r1, #0
   2020e:	2042      	movs	r0, #66	; 0x42
   20210:	f002 fe0e 	bl	22e30 <z_impl_k_sleep>
   20214:	e7d9      	b.n	201ca <rtt_console_out+0x12>
				host_present = false;
   20216:	7035      	strb	r5, [r6, #0]
   20218:	e7eb      	b.n	201f2 <rtt_console_out+0x3a>
   2021a:	bf00      	nop
   2021c:	20000b70 	.word	0x20000b70
   20220:	20003580 	.word	0x20003580

00020224 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20224:	b530      	push	{r4, r5, lr}
	return port->config;
   20226:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20228:	7b04      	ldrb	r4, [r0, #12]
   2022a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   2022e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20232:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   20236:	b085      	sub	sp, #20
   20238:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   2023c:	d104      	bne.n	20248 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   2023e:	4628      	mov	r0, r5
   20240:	f001 fad6 	bl	217f0 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   20244:	2000      	movs	r0, #0
   20246:	e032      	b.n	202ae <gpio_nrfx_pin_interrupt_configure+0x8a>
	if (mode == GPIO_INT_MODE_LEVEL) {
   20248:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   2024c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20250:	d12f      	bne.n	202b2 <gpio_nrfx_pin_interrupt_configure+0x8e>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20252:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   20256:	bf0c      	ite	eq
   20258:	2304      	moveq	r3, #4
   2025a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   2025c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20260:	6883      	ldr	r3, [r0, #8]
   20262:	fa23 f101 	lsr.w	r1, r3, r1
   20266:	07c9      	lsls	r1, r1, #31
   20268:	d42f      	bmi.n	202ca <gpio_nrfx_pin_interrupt_configure+0xa6>
   2026a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   2026e:	d12c      	bne.n	202ca <gpio_nrfx_pin_interrupt_configure+0xa6>
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   20270:	096a      	lsrs	r2, r5, #5
        case 1: return NRF_P1;
   20272:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   20274:	f005 031f 	and.w	r3, r5, #31
        case 1: return NRF_P1;
   20278:	4a1c      	ldr	r2, [pc, #112]	; (202ec <gpio_nrfx_pin_interrupt_configure+0xc8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   2027a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
        case 1: return NRF_P1;
   2027e:	bf18      	it	ne
   20280:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20288:	07db      	lsls	r3, r3, #31
   2028a:	d41e      	bmi.n	202ca <gpio_nrfx_pin_interrupt_configure+0xa6>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   2028c:	f10d 0407 	add.w	r4, sp, #7
   20290:	4621      	mov	r1, r4
   20292:	4628      	mov	r0, r5
   20294:	f001 fa10 	bl	216b8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20298:	4b15      	ldr	r3, [pc, #84]	; (202f0 <gpio_nrfx_pin_interrupt_configure+0xcc>)
   2029a:	4298      	cmp	r0, r3
   2029c:	d114      	bne.n	202c8 <gpio_nrfx_pin_interrupt_configure+0xa4>
			err = nrfx_gpiote_channel_alloc(&ch);
   2029e:	4620      	mov	r0, r4
   202a0:	f001 fa58 	bl	21754 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   202a4:	4b13      	ldr	r3, [pc, #76]	; (202f4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   202a6:	4298      	cmp	r0, r3
   202a8:	d00e      	beq.n	202c8 <gpio_nrfx_pin_interrupt_configure+0xa4>
				return -ENOMEM;
   202aa:	f06f 000b 	mvn.w	r0, #11
}
   202ae:	b005      	add	sp, #20
   202b0:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   202b2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   202b6:	d005      	beq.n	202c4 <gpio_nrfx_pin_interrupt_configure+0xa0>
   202b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   202bc:	bf0c      	ite	eq
   202be:	2302      	moveq	r3, #2
   202c0:	2301      	movne	r3, #1
   202c2:	e7cb      	b.n	2025c <gpio_nrfx_pin_interrupt_configure+0x38>
   202c4:	2303      	movs	r3, #3
   202c6:	e7c9      	b.n	2025c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   202c8:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   202ca:	2300      	movs	r3, #0
   202cc:	4619      	mov	r1, r3
   202ce:	aa02      	add	r2, sp, #8
   202d0:	4628      	mov	r0, r5
   202d2:	f001 f8cb 	bl	2146c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   202d6:	4b07      	ldr	r3, [pc, #28]	; (202f4 <gpio_nrfx_pin_interrupt_configure+0xd0>)
   202d8:	4298      	cmp	r0, r3
   202da:	d104      	bne.n	202e6 <gpio_nrfx_pin_interrupt_configure+0xc2>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   202dc:	2101      	movs	r1, #1
   202de:	4628      	mov	r0, r5
   202e0:	f001 fa3e 	bl	21760 <nrfx_gpiote_trigger_enable>
   202e4:	e7ae      	b.n	20244 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   202e6:	f06f 0004 	mvn.w	r0, #4
   202ea:	e7e0      	b.n	202ae <gpio_nrfx_pin_interrupt_configure+0x8a>
   202ec:	50000300 	.word	0x50000300
   202f0:	0bad0004 	.word	0x0bad0004
   202f4:	0bad0000 	.word	0x0bad0000

000202f8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   202f8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   202fa:	f001 fa1b 	bl	21734 <nrfx_gpiote_is_init>
   202fe:	4604      	mov	r4, r0
   20300:	b968      	cbnz	r0, 2031e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20302:	f001 f9ef 	bl	216e4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20306:	4b08      	ldr	r3, [pc, #32]	; (20328 <gpio_nrfx_init+0x30>)
   20308:	4298      	cmp	r0, r3
   2030a:	d10a      	bne.n	20322 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   2030c:	4807      	ldr	r0, [pc, #28]	; (2032c <gpio_nrfx_init+0x34>)
   2030e:	4621      	mov	r1, r4
   20310:	f001 f9cc 	bl	216ac <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20314:	4622      	mov	r2, r4
   20316:	2105      	movs	r1, #5
   20318:	2006      	movs	r0, #6
   2031a:	f7e6 fbe9 	bl	6af0 <z_arm_irq_priority_set>
		return 0;
   2031e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20320:	bd10      	pop	{r4, pc}
		return -EIO;
   20322:	f06f 0004 	mvn.w	r0, #4
   20326:	e7fb      	b.n	20320 <gpio_nrfx_init+0x28>
   20328:	0bad0000 	.word	0x0bad0000
   2032c:	00020331 	.word	0x00020331

00020330 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20330:	0942      	lsrs	r2, r0, #5
{
   20332:	b570      	push	{r4, r5, r6, lr}
   20334:	4603      	mov	r3, r0
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20336:	d002      	beq.n	2033e <nrfx_gpio_handler+0xe>
   20338:	2a01      	cmp	r2, #1
   2033a:	d015      	beq.n	20368 <nrfx_gpio_handler+0x38>
}
   2033c:	bd70      	pop	{r4, r5, r6, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   2033e:	4e0b      	ldr	r6, [pc, #44]	; (2036c <nrfx_gpio_handler+0x3c>)
	gpio_fire_callbacks(list, port, BIT(pin));
   20340:	6932      	ldr	r2, [r6, #16]
   20342:	6851      	ldr	r1, [r2, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20344:	2900      	cmp	r1, #0
   20346:	d0f9      	beq.n	2033c <nrfx_gpio_handler+0xc>
    *p_pin = pin_number & 0x1F;
   20348:	f003 031f 	and.w	r3, r3, #31
   2034c:	2501      	movs	r5, #1
   2034e:	680c      	ldr	r4, [r1, #0]
   20350:	409d      	lsls	r5, r3
		if (cb->pin_mask & pins) {
   20352:	688a      	ldr	r2, [r1, #8]
   20354:	402a      	ands	r2, r5
   20356:	d002      	beq.n	2035e <nrfx_gpio_handler+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   20358:	684b      	ldr	r3, [r1, #4]
   2035a:	4630      	mov	r0, r6
   2035c:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2035e:	2c00      	cmp	r4, #0
   20360:	d0ec      	beq.n	2033c <nrfx_gpio_handler+0xc>
   20362:	4621      	mov	r1, r4
   20364:	6824      	ldr	r4, [r4, #0]
   20366:	e7f4      	b.n	20352 <nrfx_gpio_handler+0x22>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20368:	4e01      	ldr	r6, [pc, #4]	; (20370 <nrfx_gpio_handler+0x40>)
   2036a:	e7e9      	b.n	20340 <nrfx_gpio_handler+0x10>
   2036c:	0002b388 	.word	0x0002b388
   20370:	0002b3a0 	.word	0x0002b3a0

00020374 <gpio_nrfx_pin_configure>:
{
   20374:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   20378:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2037a:	7b3b      	ldrb	r3, [r7, #12]
   2037c:	f001 051f 	and.w	r5, r1, #31
{
   20380:	b085      	sub	sp, #20
   20382:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20384:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   20388:	4614      	mov	r4, r2
   2038a:	b9ca      	cbnz	r2, 203c0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   2038c:	a902      	add	r1, sp, #8
   2038e:	4628      	mov	r0, r5
   20390:	f001 f992 	bl	216b8 <nrfx_gpiote_channel_get>
   20394:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   20396:	4628      	mov	r0, r5
   20398:	f001 fa52 	bl	21840 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2039c:	4b48      	ldr	r3, [pc, #288]	; (204c0 <gpio_nrfx_pin_configure+0x14c>)
   2039e:	4298      	cmp	r0, r3
   203a0:	d004      	beq.n	203ac <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   203a2:	f06f 0004 	mvn.w	r0, #4
}
   203a6:	b005      	add	sp, #20
   203a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   203ac:	4284      	cmp	r4, r0
   203ae:	d105      	bne.n	203bc <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   203b0:	f89d 0008 	ldrb.w	r0, [sp, #8]
   203b4:	f001 f9c8 	bl	21748 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   203b8:	42a0      	cmp	r0, r4
   203ba:	d1f2      	bne.n	203a2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   203bc:	2000      	movs	r0, #0
   203be:	e7f2      	b.n	203a6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   203c0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   203c4:	f10d 0103 	add.w	r1, sp, #3
   203c8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   203ca:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   203ce:	f001 f973 	bl	216b8 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   203d2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   203d4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   203d6:	aa02      	add	r2, sp, #8
   203d8:	4649      	mov	r1, r9
   203da:	4628      	mov	r0, r5
   203dc:	f001 f846 	bl	2146c <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   203e0:	4b37      	ldr	r3, [pc, #220]	; (204c0 <gpio_nrfx_pin_configure+0x14c>)
   203e2:	4298      	cmp	r0, r3
   203e4:	d002      	beq.n	203ec <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   203e6:	f06f 0015 	mvn.w	r0, #21
   203ea:	e7dc      	b.n	203a6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   203ec:	4580      	cmp	r8, r0
   203ee:	d103      	bne.n	203f8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   203f0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   203f4:	f001 f9a8 	bl	21748 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   203f8:	05a3      	lsls	r3, r4, #22
   203fa:	d54e      	bpl.n	2049a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   203fc:	4b31      	ldr	r3, [pc, #196]	; (204c4 <gpio_nrfx_pin_configure+0x150>)
   203fe:	4a32      	ldr	r2, [pc, #200]	; (204c8 <gpio_nrfx_pin_configure+0x154>)
   20400:	4023      	ands	r3, r4
   20402:	4293      	cmp	r3, r2
   20404:	d03a      	beq.n	2047c <gpio_nrfx_pin_configure+0x108>
   20406:	d80c      	bhi.n	20422 <gpio_nrfx_pin_configure+0xae>
   20408:	2b06      	cmp	r3, #6
   2040a:	d014      	beq.n	20436 <gpio_nrfx_pin_configure+0xc2>
   2040c:	d804      	bhi.n	20418 <gpio_nrfx_pin_configure+0xa4>
   2040e:	b193      	cbz	r3, 20436 <gpio_nrfx_pin_configure+0xc2>
   20410:	2b02      	cmp	r3, #2
   20412:	d1e8      	bne.n	203e6 <gpio_nrfx_pin_configure+0x72>
   20414:	2304      	movs	r3, #4
   20416:	e00e      	b.n	20436 <gpio_nrfx_pin_configure+0xc2>
   20418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2041c:	d1e3      	bne.n	203e6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   2041e:	2301      	movs	r3, #1
   20420:	e009      	b.n	20436 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20422:	4a2a      	ldr	r2, [pc, #168]	; (204cc <gpio_nrfx_pin_configure+0x158>)
   20424:	4293      	cmp	r3, r2
   20426:	d02b      	beq.n	20480 <gpio_nrfx_pin_configure+0x10c>
   20428:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2042c:	d02a      	beq.n	20484 <gpio_nrfx_pin_configure+0x110>
   2042e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   20432:	d1d8      	bne.n	203e6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   20434:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   20436:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2043a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   2043e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   20442:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20444:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   20448:	bf54      	ite	pl
   2044a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2044e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20450:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   20452:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20456:	d517      	bpl.n	20488 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20458:	687b      	ldr	r3, [r7, #4]
   2045a:	2101      	movs	r1, #1
   2045c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   20460:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20464:	2200      	movs	r2, #0
   20466:	a901      	add	r1, sp, #4
   20468:	4628      	mov	r0, r5
   2046a:	f001 f8ad 	bl	215c8 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2046e:	4b14      	ldr	r3, [pc, #80]	; (204c0 <gpio_nrfx_pin_configure+0x14c>)
   20470:	4298      	cmp	r0, r3
   20472:	bf14      	ite	ne
   20474:	f06f 0015 	mvnne.w	r0, #21
   20478:	2000      	moveq	r0, #0
   2047a:	e794      	b.n	203a6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   2047c:	2307      	movs	r3, #7
   2047e:	e7da      	b.n	20436 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   20480:	2305      	movs	r3, #5
   20482:	e7d8      	b.n	20436 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   20484:	2303      	movs	r3, #3
   20486:	e7d6      	b.n	20436 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20488:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2048a:	bf41      	itttt	mi
   2048c:	687b      	ldrmi	r3, [r7, #4]
   2048e:	2101      	movmi	r1, #1
   20490:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   20494:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   20498:	e7e4      	b.n	20464 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   2049a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2049c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   204a0:	bf54      	ite	pl
   204a2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   204a6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   204a8:	461a      	mov	r2, r3
   204aa:	a901      	add	r1, sp, #4
   204ac:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   204ae:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   204b2:	f000 ffdb 	bl	2146c <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   204b6:	4b02      	ldr	r3, [pc, #8]	; (204c0 <gpio_nrfx_pin_configure+0x14c>)
   204b8:	4298      	cmp	r0, r3
   204ba:	f43f af7f 	beq.w	203bc <gpio_nrfx_pin_configure+0x48>
   204be:	e792      	b.n	203e6 <gpio_nrfx_pin_configure+0x72>
   204c0:	0bad0000 	.word	0x0bad0000
   204c4:	00f00006 	.word	0x00f00006
   204c8:	00100006 	.word	0x00100006
   204cc:	00400002 	.word	0x00400002

000204d0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   204d0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   204d2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   204d6:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   204d8:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   204da:	6002      	str	r2, [r0, #0]
}
   204dc:	4802      	ldr	r0, [pc, #8]	; (204e8 <nrf_gpio_pin_port_decode+0x18>)
   204de:	bf18      	it	ne
   204e0:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   204e4:	4770      	bx	lr
   204e6:	bf00      	nop
   204e8:	50000300 	.word	0x50000300

000204ec <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   204ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   204ee:	794b      	ldrb	r3, [r1, #5]
   204f0:	2b01      	cmp	r3, #1
   204f2:	d026      	beq.n	20542 <uarte_nrfx_configure+0x56>
   204f4:	2b03      	cmp	r3, #3
   204f6:	d121      	bne.n	2053c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   204f8:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   204fa:	798b      	ldrb	r3, [r1, #6]
   204fc:	2b03      	cmp	r3, #3
   204fe:	d11d      	bne.n	2053c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20500:	79cc      	ldrb	r4, [r1, #7]
   20502:	b10c      	cbz	r4, 20508 <uarte_nrfx_configure+0x1c>
   20504:	2c01      	cmp	r4, #1
   20506:	d119      	bne.n	2053c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20508:	790a      	ldrb	r2, [r1, #4]
   2050a:	b112      	cbz	r2, 20512 <uarte_nrfx_configure+0x26>
   2050c:	2a02      	cmp	r2, #2
   2050e:	d115      	bne.n	2053c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20510:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20512:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20514:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   20516:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   2051a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2051c:	d065      	beq.n	205ea <uarte_nrfx_configure+0xfe>
   2051e:	d82d      	bhi.n	2057c <uarte_nrfx_configure+0x90>
   20520:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20524:	d064      	beq.n	205f0 <uarte_nrfx_configure+0x104>
   20526:	d816      	bhi.n	20556 <uarte_nrfx_configure+0x6a>
   20528:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2052c:	d062      	beq.n	205f4 <uarte_nrfx_configure+0x108>
   2052e:	d80a      	bhi.n	20546 <uarte_nrfx_configure+0x5a>
   20530:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20534:	d061      	beq.n	205fa <uarte_nrfx_configure+0x10e>
   20536:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   2053a:	d061      	beq.n	20600 <uarte_nrfx_configure+0x114>
   2053c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20540:	e052      	b.n	205e8 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   20542:	2600      	movs	r6, #0
   20544:	e7d9      	b.n	204fa <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   20546:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   2054a:	d05c      	beq.n	20606 <uarte_nrfx_configure+0x11a>
   2054c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20550:	d1f4      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20552:	4b37      	ldr	r3, [pc, #220]	; (20630 <uarte_nrfx_configure+0x144>)
   20554:	e03c      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20556:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   2055a:	d057      	beq.n	2060c <uarte_nrfx_configure+0x120>
   2055c:	d807      	bhi.n	2056e <uarte_nrfx_configure+0x82>
   2055e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20562:	d055      	beq.n	20610 <uarte_nrfx_configure+0x124>
   20564:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20568:	d1e8      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   2056a:	4b32      	ldr	r3, [pc, #200]	; (20634 <uarte_nrfx_configure+0x148>)
   2056c:	e030      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2056e:	f647 2712 	movw	r7, #31250	; 0x7a12
   20572:	42bb      	cmp	r3, r7
   20574:	d1e2      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20576:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   2057a:	e029      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   2057c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20580:	d048      	beq.n	20614 <uarte_nrfx_configure+0x128>
   20582:	d813      	bhi.n	205ac <uarte_nrfx_configure+0xc0>
   20584:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20588:	d047      	beq.n	2061a <uarte_nrfx_configure+0x12e>
   2058a:	d809      	bhi.n	205a0 <uarte_nrfx_configure+0xb4>
   2058c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   20590:	42bb      	cmp	r3, r7
   20592:	d044      	beq.n	2061e <uarte_nrfx_configure+0x132>
   20594:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20598:	d1d0      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   2059a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   2059e:	e017      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   205a0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   205a4:	d1ca      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   205a6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   205aa:	e011      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   205ac:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   205b0:	d038      	beq.n	20624 <uarte_nrfx_configure+0x138>
   205b2:	d808      	bhi.n	205c6 <uarte_nrfx_configure+0xda>
   205b4:	4f20      	ldr	r7, [pc, #128]	; (20638 <uarte_nrfx_configure+0x14c>)
   205b6:	42bb      	cmp	r3, r7
   205b8:	d037      	beq.n	2062a <uarte_nrfx_configure+0x13e>
   205ba:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   205be:	d1bd      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   205c0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   205c4:	e004      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   205c6:	4f1d      	ldr	r7, [pc, #116]	; (2063c <uarte_nrfx_configure+0x150>)
   205c8:	42bb      	cmp	r3, r7
   205ca:	d1b7      	bne.n	2053c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   205cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   205d0:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   205d2:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   205d6:	1d03      	adds	r3, r0, #4
   205d8:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   205da:	4334      	orrs	r4, r6
   205dc:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   205de:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   205e2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   205e6:	2000      	movs	r0, #0
}
   205e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   205ea:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   205ee:	e7ef      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   205f0:	4b13      	ldr	r3, [pc, #76]	; (20640 <uarte_nrfx_configure+0x154>)
   205f2:	e7ed      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   205f4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   205f8:	e7ea      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   205fa:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   205fe:	e7e7      	b.n	205d0 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   20600:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20604:	e7e4      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20606:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   2060a:	e7e1      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   2060c:	4b0d      	ldr	r3, [pc, #52]	; (20644 <uarte_nrfx_configure+0x158>)
   2060e:	e7df      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20610:	4b0d      	ldr	r3, [pc, #52]	; (20648 <uarte_nrfx_configure+0x15c>)
   20612:	e7dd      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20614:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20618:	e7da      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   2061a:	4b0c      	ldr	r3, [pc, #48]	; (2064c <uarte_nrfx_configure+0x160>)
   2061c:	e7d8      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   2061e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20622:	e7d5      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20624:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20628:	e7d2      	b.n	205d0 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   2062a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   2062e:	e7cf      	b.n	205d0 <uarte_nrfx_configure+0xe4>
   20630:	0013b000 	.word	0x0013b000
   20634:	004ea000 	.word	0x004ea000
   20638:	0003d090 	.word	0x0003d090
   2063c:	000f4240 	.word	0x000f4240
   20640:	00275000 	.word	0x00275000
   20644:	0075c000 	.word	0x0075c000
   20648:	003af000 	.word	0x003af000
   2064c:	013a9000 	.word	0x013a9000

00020650 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   20650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   20652:	6906      	ldr	r6, [r0, #16]
{
   20654:	4605      	mov	r5, r0
   20656:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20658:	f009 fceb 	bl	2a032 <k_is_in_isr>
   2065c:	b910      	cbnz	r0, 20664 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2065e:	4b2c      	ldr	r3, [pc, #176]	; (20710 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   20660:	781b      	ldrb	r3, [r3, #0]
   20662:	b983      	cbnz	r3, 20686 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   20664:	f04f 0320 	mov.w	r3, #32
   20668:	f3ef 8411 	mrs	r4, BASEPRI
   2066c:	f383 8812 	msr	BASEPRI_MAX, r3
   20670:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   20674:	6868      	ldr	r0, [r5, #4]
   20676:	f009 fad0 	bl	29c1a <is_tx_ready.isra.0>
   2067a:	bb28      	cbnz	r0, 206c8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   2067c:	f384 8811 	msr	BASEPRI, r4
   20680:	f3bf 8f6f 	isb	sy
}
   20684:	e7ee      	b.n	20664 <uarte_nrfx_poll_out+0x14>
{
   20686:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   20688:	6868      	ldr	r0, [r5, #4]
   2068a:	f009 fac6 	bl	29c1a <is_tx_ready.isra.0>
   2068e:	b970      	cbnz	r0, 206ae <uarte_nrfx_poll_out+0x5e>
   20690:	2001      	movs	r0, #1
   20692:	f009 fb38 	bl	29d06 <nrfx_busy_wait>
   20696:	3c01      	subs	r4, #1
   20698:	d1f6      	bne.n	20688 <uarte_nrfx_poll_out+0x38>
   2069a:	2100      	movs	r1, #0
   2069c:	2021      	movs	r0, #33	; 0x21
   2069e:	f002 fbc7 	bl	22e30 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   206a2:	e7f0      	b.n	20686 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   206a4:	f384 8811 	msr	BASEPRI, r4
   206a8:	f3bf 8f6f 	isb	sy
}
   206ac:	e7f5      	b.n	2069a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   206ae:	f04f 0320 	mov.w	r3, #32
   206b2:	f3ef 8411 	mrs	r4, BASEPRI
   206b6:	f383 8812 	msr	BASEPRI_MAX, r3
   206ba:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   206be:	6868      	ldr	r0, [r5, #4]
   206c0:	f009 faab 	bl	29c1a <is_tx_ready.isra.0>
   206c4:	2800      	cmp	r0, #0
   206c6:	d0ed      	beq.n	206a4 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   206c8:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   206cc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   206ce:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   206d0:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   206d2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   206d6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   206da:	2200      	movs	r2, #0
   206dc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   206e0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   206e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   206e8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   206ec:	684a      	ldr	r2, [r1, #4]
   206ee:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   206f0:	bf41      	itttt	mi
   206f2:	2208      	movmi	r2, #8
   206f4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   206f8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   206fc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20700:	2201      	movs	r2, #1
   20702:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   20704:	f384 8811 	msr	BASEPRI, r4
   20708:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   2070c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2070e:	bf00      	nop
   20710:	20003991 	.word	0x20003991

00020714 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   20714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uarte_nrfx_config *config = dev->config;
   20718:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
   2071c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
   2071e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   20722:	2300      	movs	r3, #0
   20724:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = dev->config;

	nrf_uarte_disable(uarte);

	data->dev = dev;
   20728:	6030      	str	r0, [r6, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
   2072a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2072c:	68eb      	ldr	r3, [r5, #12]
   2072e:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
   20730:	b088      	sub	sp, #32
   20732:	4607      	mov	r7, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20734:	d013      	beq.n	2075e <uarte_instance_init.constprop.0+0x4a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20736:	a802      	add	r0, sp, #8
   20738:	9302      	str	r3, [sp, #8]
   2073a:	f7ff fec9 	bl	204d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2073e:	9a02      	ldr	r2, [sp, #8]
   20740:	2301      	movs	r3, #1
   20742:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   20744:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   20748:	68eb      	ldr	r3, [r5, #12]
   2074a:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2074c:	a802      	add	r0, sp, #8
   2074e:	f7ff febf 	bl	204d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20752:	9b02      	ldr	r3, [sp, #8]
   20754:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20758:	2203      	movs	r2, #3
   2075a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2075e:	6928      	ldr	r0, [r5, #16]
   20760:	1c43      	adds	r3, r0, #1
   20762:	d006      	beq.n	20772 <uarte_instance_init.constprop.0+0x5e>
			nrf_gpio_cfg_input(cfg->rx_pin,
   20764:	7f2b      	ldrb	r3, [r5, #28]
   20766:	2b00      	cmp	r3, #0
   20768:	bf14      	ite	ne
   2076a:	2103      	movne	r1, #3
   2076c:	2100      	moveq	r1, #0
   2076e:	f009 fa46 	bl	29bfe <nrf_gpio_cfg_input>
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   20772:	696b      	ldr	r3, [r5, #20]
   20774:	1c5a      	adds	r2, r3, #1
   20776:	d013      	beq.n	207a0 <uarte_instance_init.constprop.0+0x8c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   20778:	a802      	add	r0, sp, #8
   2077a:	9302      	str	r3, [sp, #8]
   2077c:	f7ff fea8 	bl	204d0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   20780:	9a02      	ldr	r2, [sp, #8]
   20782:	2301      	movs	r3, #1
   20784:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   20786:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   2078a:	696b      	ldr	r3, [r5, #20]
   2078c:	9302      	str	r3, [sp, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2078e:	a802      	add	r0, sp, #8
   20790:	f7ff fe9e 	bl	204d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   20794:	9b02      	ldr	r3, [sp, #8]
   20796:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2079a:	2203      	movs	r2, #3
   2079c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   207a0:	69a8      	ldr	r0, [r5, #24]
   207a2:	1c43      	adds	r3, r0, #1
   207a4:	d006      	beq.n	207b4 <uarte_instance_init.constprop.0+0xa0>
			nrf_gpio_cfg_input(cfg->cts_pin,
   207a6:	7f6b      	ldrb	r3, [r5, #29]
   207a8:	2b00      	cmp	r3, #0
   207aa:	bf14      	ite	ne
   207ac:	2103      	movne	r1, #3
   207ae:	2100      	moveq	r1, #0
   207b0:	f009 fa25 	bl	29bfe <nrf_gpio_cfg_input>
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   207b4:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   207b8:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   207ba:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   207be:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   207c2:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
   207c6:	4638      	mov	r0, r7
    p_reg->PSEL.RTS = pselrts;
   207c8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
   207cc:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   207d0:	1d31      	adds	r1, r6, #4
   207d2:	f7ff fe8b 	bl	204ec <uarte_nrfx_configure>
	if (err) {
   207d6:	4605      	mov	r5, r0
   207d8:	b9c0      	cbnz	r0, 2080c <uarte_instance_init.constprop.0+0xf8>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   207da:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   207de:	0799      	lsls	r1, r3, #30
   207e0:	d52b      	bpl.n	2083a <uarte_instance_init.constprop.0+0x126>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   207e2:	f106 0012 	add.w	r0, r6, #18
   207e6:	f001 f925 	bl	21a34 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   207ea:	4b29      	ldr	r3, [pc, #164]	; (20890 <uarte_instance_init.constprop.0+0x17c>)
   207ec:	4298      	cmp	r0, r3
   207ee:	d011      	beq.n	20814 <uarte_instance_init.constprop.0+0x100>
		LOG_ERR("Failed to allocate PPI Channel");
   207f0:	4b28      	ldr	r3, [pc, #160]	; (20894 <uarte_instance_init.constprop.0+0x180>)
   207f2:	9306      	str	r3, [sp, #24]
   207f4:	2302      	movs	r3, #2
   207f6:	9301      	str	r3, [sp, #4]
   207f8:	9305      	str	r3, [sp, #20]
   207fa:	4827      	ldr	r0, [pc, #156]	; (20898 <uarte_instance_init.constprop.0+0x184>)
   207fc:	462b      	mov	r3, r5
   207fe:	aa05      	add	r2, sp, #20
   20800:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   20804:	f06f 0504 	mvn.w	r5, #4
   20808:	f005 f8d5 	bl	259b6 <z_impl_z_log_msg2_static_create>

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   2080c:	4628      	mov	r0, r5
   2080e:	b008      	add	sp, #32
   20810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   20814:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20816:	00c3      	lsls	r3, r0, #3
   20818:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2081c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   20820:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   20824:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20828:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2082c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   20830:	4a1a      	ldr	r2, [pc, #104]	; (2089c <uarte_instance_init.constprop.0+0x188>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   20832:	2301      	movs	r3, #1
   20834:	4083      	lsls	r3, r0
   20836:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2083a:	2308      	movs	r3, #8
   2083c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   20840:	f898 3008 	ldrb.w	r3, [r8, #8]
   20844:	b95b      	cbnz	r3, 2085e <uarte_instance_init.constprop.0+0x14a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20846:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2084a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2084e:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   20852:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   20856:	2301      	movs	r3, #1
   20858:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2085c:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   2085e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   20862:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   20864:	bf5c      	itt	pl
   20866:	f44f 7280 	movpl.w	r2, #256	; 0x100
   2086a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2086e:	06db      	lsls	r3, r3, #27
   20870:	bf44      	itt	mi
   20872:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   20876:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2087a:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
   2087c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2087e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   20882:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20886:	2301      	movs	r3, #1
   20888:	60a3      	str	r3, [r4, #8]
   2088a:	60e3      	str	r3, [r4, #12]
	return 0;
   2088c:	e7be      	b.n	2080c <uarte_instance_init.constprop.0+0xf8>
   2088e:	bf00      	nop
   20890:	0bad0000 	.word	0x0bad0000
   20894:	0002f1de 	.word	0x0002f1de
   20898:	0002b734 	.word	0x0002b734
   2089c:	4001f000 	.word	0x4001f000

000208a0 <random_byte_get>:
	__asm__ volatile(
   208a0:	f04f 0320 	mov.w	r3, #32
   208a4:	f3ef 8211 	mrs	r2, BASEPRI
   208a8:	f383 8812 	msr	BASEPRI_MAX, r3
   208ac:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   208b0:	4b09      	ldr	r3, [pc, #36]	; (208d8 <random_byte_get+0x38>)
   208b2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   208b6:	b161      	cbz	r1, 208d2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   208b8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   208ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   208be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   208c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   208c6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   208c8:	f382 8811 	msr	BASEPRI, r2
   208cc:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   208d0:	4770      	bx	lr
	int retval = -EAGAIN;
   208d2:	f06f 000a 	mvn.w	r0, #10
   208d6:	e7f7      	b.n	208c8 <random_byte_get+0x28>
   208d8:	4000d000 	.word	0x4000d000

000208dc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   208dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   208de:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   208e0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   208e2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   208e4:	f04f 0020 	mov.w	r0, #32
   208e8:	f3ef 8e11 	mrs	lr, BASEPRI
   208ec:	f380 8812 	msr	BASEPRI_MAX, r0
   208f0:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   208f4:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   208f6:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   208fa:	1ba4      	subs	r4, r4, r6
   208fc:	403c      	ands	r4, r7
	if (available < len) {
   208fe:	42a2      	cmp	r2, r4
		len = available;
   20900:	bf88      	it	hi
   20902:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   20904:	18b0      	adds	r0, r6, r2
   20906:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   20908:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2090a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   2090c:	f38e 8811 	msr	BASEPRI, lr
   20910:	f3bf 8f6f 	isb	sy
   20914:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   20916:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   20918:	4290      	cmp	r0, r2
   2091a:	d119      	bne.n	20950 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2091c:	4566      	cmp	r6, ip
   2091e:	d10d      	bne.n	2093c <rng_pool_get+0x60>
	__asm__ volatile(
   20920:	f04f 0520 	mov.w	r5, #32
   20924:	f3ef 8011 	mrs	r0, BASEPRI
   20928:	f385 8812 	msr	BASEPRI_MAX, r5
   2092c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   20930:	781d      	ldrb	r5, [r3, #0]
   20932:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   20934:	f380 8811 	msr	BASEPRI, r0
   20938:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   2093c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   2093e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   20940:	b290      	uxth	r0, r2
	available = available - len;
   20942:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   20944:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20946:	bf22      	ittt	cs
   20948:	4b06      	ldrcs	r3, [pc, #24]	; (20964 <rng_pool_get+0x88>)
   2094a:	2201      	movcs	r2, #1
   2094c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2094e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   20950:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   20954:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   20956:	f89e e005 	ldrb.w	lr, [lr, #5]
   2095a:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   2095e:	403d      	ands	r5, r7
   20960:	e7da      	b.n	20918 <rng_pool_get+0x3c>
   20962:	bf00      	nop
   20964:	4000d000 	.word	0x4000d000

00020968 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20968:	43db      	mvns	r3, r3
{
   2096a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2096e:	f013 0501 	ands.w	r5, r3, #1
{
   20972:	460e      	mov	r6, r1
   20974:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   20976:	d004      	beq.n	20982 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   20978:	4821      	ldr	r0, [pc, #132]	; (20a00 <entropy_nrf5_get_entropy_isr+0x98>)
   2097a:	f7ff ffaf 	bl	208dc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2097e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   20982:	b3a2      	cbz	r2, 209ee <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   20984:	f04f 0320 	mov.w	r3, #32
   20988:	f3ef 8811 	mrs	r8, BASEPRI
   2098c:	f383 8812 	msr	BASEPRI_MAX, r3
   20990:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   20994:	200d      	movs	r0, #13
   20996:	f7e6 f89d 	bl	6ad4 <arch_irq_is_enabled>
   2099a:	4607      	mov	r7, r0
		irq_disable(IRQN);
   2099c:	200d      	movs	r0, #13
   2099e:	f7e6 f885 	bl	6aac <arch_irq_disable>
	__asm__ volatile(
   209a2:	f388 8811 	msr	BASEPRI, r8
   209a6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   209aa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 20a04 <entropy_nrf5_get_entropy_isr+0x9c>
   209ae:	f8df 9058 	ldr.w	r9, [pc, #88]	; 20a08 <entropy_nrf5_get_entropy_isr+0xa0>
   209b2:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   209b6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   209ba:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   209be:	2301      	movs	r3, #1
   209c0:	f8c8 3000 	str.w	r3, [r8]
   209c4:	4625      	mov	r5, r4
   209c6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   209ca:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   209ce:	b183      	cbz	r3, 209f2 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   209d0:	f7ff ff66 	bl	208a0 <random_byte_get>
			if (byte < 0) {
   209d4:	1e03      	subs	r3, r0, #0
   209d6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   209da:	dbf6      	blt.n	209ca <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   209dc:	3d01      	subs	r5, #1
   209de:	b2ad      	uxth	r5, r5
   209e0:	5573      	strb	r3, [r6, r5]
		} while (len);
   209e2:	2d00      	cmp	r5, #0
   209e4:	d1f1      	bne.n	209ca <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   209e6:	b117      	cbz	r7, 209ee <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   209e8:	200d      	movs	r0, #13
   209ea:	f7e6 f84f 	bl	6a8c <arch_irq_enable>
	return cnt;
   209ee:	4620      	mov	r0, r4
   209f0:	e7c5      	b.n	2097e <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   209f2:	f3bf 8f4f 	dsb	sy
				__WFE();
   209f6:	bf20      	wfe
				__SEV();
   209f8:	bf40      	sev
				__WFE();
   209fa:	bf20      	wfe
   209fc:	e7e5      	b.n	209ca <entropy_nrf5_get_entropy_isr+0x62>
   209fe:	bf00      	nop
   20a00:	200032b8 	.word	0x200032b8
   20a04:	4000d000 	.word	0x4000d000
   20a08:	e000e100 	.word	0xe000e100

00020a0c <entropy_nrf5_get_entropy>:
{
   20a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   20a10:	4f13      	ldr	r7, [pc, #76]	; (20a60 <entropy_nrf5_get_entropy+0x54>)
   20a12:	460d      	mov	r5, r1
   20a14:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20a16:	f107 0845 	add.w	r8, r7, #69	; 0x45
   20a1a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   20a1e:	b914      	cbnz	r4, 20a26 <entropy_nrf5_get_entropy+0x1a>
}
   20a20:	4620      	mov	r0, r4
   20a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   20a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a2e:	4638      	mov	r0, r7
   20a30:	f001 fd40 	bl	224b4 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   20a34:	4622      	mov	r2, r4
   20a36:	4629      	mov	r1, r5
   20a38:	4640      	mov	r0, r8
   20a3a:	f7ff ff4f 	bl	208dc <rng_pool_get>
   20a3e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   20a40:	4638      	mov	r0, r7
   20a42:	f001 fd11 	bl	22468 <z_impl_k_sem_give>
		if (bytes == 0U) {
   20a46:	b93e      	cbnz	r6, 20a58 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   20a48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20a50:	4648      	mov	r0, r9
   20a52:	f001 fd2f 	bl	224b4 <z_impl_k_sem_take>
			continue;
   20a56:	e7e2      	b.n	20a1e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   20a58:	1ba4      	subs	r4, r4, r6
   20a5a:	b2a4      	uxth	r4, r4
		buf += bytes;
   20a5c:	4435      	add	r5, r6
   20a5e:	e7de      	b.n	20a1e <entropy_nrf5_get_entropy+0x12>
   20a60:	20003288 	.word	0x20003288

00020a64 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   20a64:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   20a66:	4c19      	ldr	r4, [pc, #100]	; (20acc <entropy_nrf5_init+0x68>)
   20a68:	2201      	movs	r2, #1
   20a6a:	4611      	mov	r1, r2
   20a6c:	4620      	mov	r0, r4
   20a6e:	f009 fbf0 	bl	2a252 <z_impl_k_sem_init>
   20a72:	2201      	movs	r2, #1
   20a74:	2100      	movs	r1, #0
   20a76:	f104 0018 	add.w	r0, r4, #24
   20a7a:	f009 fbea 	bl	2a252 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   20a7e:	f240 4307 	movw	r3, #1031	; 0x407
   20a82:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   20a86:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20a8a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   20a8c:	230c      	movs	r3, #12
   20a8e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   20a92:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   20a94:	4b0e      	ldr	r3, [pc, #56]	; (20ad0 <entropy_nrf5_init+0x6c>)
   20a96:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   20a9a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   20a9e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   20aa2:	f042 0201 	orr.w	r2, r2, #1
   20aa6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   20aaa:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   20aac:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   20ab0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   20ab4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   20ab8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   20aba:	6019      	str	r1, [r3, #0]
   20abc:	200d      	movs	r0, #13
   20abe:	f7e6 f817 	bl	6af0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   20ac2:	200d      	movs	r0, #13
   20ac4:	f7e5 ffe2 	bl	6a8c <arch_irq_enable>

	return 0;
}
   20ac8:	4628      	mov	r0, r5
   20aca:	bd38      	pop	{r3, r4, r5, pc}
   20acc:	20003288 	.word	0x20003288
   20ad0:	4000d000 	.word	0x4000d000

00020ad4 <isr>:
{
   20ad4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   20ad6:	f7ff fee3 	bl	208a0 <random_byte_get>
	if (byte < 0) {
   20ada:	2800      	cmp	r0, #0
   20adc:	db20      	blt.n	20b20 <isr+0x4c>
	uint8_t last  = rngp->last;
   20ade:	4b17      	ldr	r3, [pc, #92]	; (20b3c <isr+0x68>)
   20ae0:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   20ae4:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   20ae8:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   20aec:	1a51      	subs	r1, r2, r1
   20aee:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   20af2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   20af4:	d10d      	bne.n	20b12 <isr+0x3e>
	uint8_t last  = rngp->last;
   20af6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   20afa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   20afe:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   20b02:	1a51      	subs	r1, r2, r1
   20b04:	ea34 0101 	bics.w	r1, r4, r1
   20b08:	d10b      	bne.n	20b22 <isr+0x4e>
   20b0a:	4b0d      	ldr	r3, [pc, #52]	; (20b40 <isr+0x6c>)
   20b0c:	2201      	movs	r2, #1
   20b0e:	605a      	str	r2, [r3, #4]
}
   20b10:	e00e      	b.n	20b30 <isr+0x5c>
	rngp->buffer[last] = byte;
   20b12:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   20b14:	3201      	adds	r2, #1
   20b16:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   20b18:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   20b1c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   20b20:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   20b22:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   20b24:	3201      	adds	r2, #1
   20b26:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   20b28:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   20b2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   20b30:	4804      	ldr	r0, [pc, #16]	; (20b44 <isr+0x70>)
}
   20b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20b36:	f001 bc97 	b.w	22468 <z_impl_k_sem_give>
   20b3a:	bf00      	nop
   20b3c:	20003288 	.word	0x20003288
   20b40:	4000d000 	.word	0x4000d000
   20b44:	200032a0 	.word	0x200032a0

00020b48 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   20b48:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   20b4a:	2301      	movs	r3, #1
   20b4c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20b4e:	4a11      	ldr	r2, [pc, #68]	; (20b94 <compare_int_lock+0x4c>)
   20b50:	f3bf 8f5b 	dmb	ish
   20b54:	43dc      	mvns	r4, r3
   20b56:	e852 1f00 	ldrex	r1, [r2]
   20b5a:	ea01 0c04 	and.w	ip, r1, r4
   20b5e:	e842 ce00 	strex	lr, ip, [r2]
   20b62:	f1be 0f00 	cmp.w	lr, #0
   20b66:	d1f6      	bne.n	20b56 <compare_int_lock+0xe>
   20b68:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20b6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   20b70:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   20b74:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   20b78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   20b7c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   20b80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   20b84:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   20b88:	420b      	tst	r3, r1
}
   20b8a:	bf14      	ite	ne
   20b8c:	2001      	movne	r0, #1
   20b8e:	2000      	moveq	r0, #0
   20b90:	bd10      	pop	{r4, pc}
   20b92:	bf00      	nop
   20b94:	200032e0 	.word	0x200032e0

00020b98 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   20b98:	4919      	ldr	r1, [pc, #100]	; (20c00 <sys_clock_timeout_handler+0x68>)
{
   20b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20b9c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   20b9e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   20ba2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   20ba4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   20ba8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   20bac:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   20bae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   20bb2:	d222      	bcs.n	20bfa <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   20bb4:	4b13      	ldr	r3, [pc, #76]	; (20c04 <sys_clock_timeout_handler+0x6c>)
   20bb6:	681b      	ldr	r3, [r3, #0]
   20bb8:	0a1a      	lsrs	r2, r3, #8
   20bba:	061b      	lsls	r3, r3, #24
   20bbc:	195e      	adds	r6, r3, r5
   20bbe:	4b12      	ldr	r3, [pc, #72]	; (20c08 <sys_clock_timeout_handler+0x70>)
   20bc0:	f142 0700 	adc.w	r7, r2, #0
   20bc4:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   20bc8:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   20bca:	f002 faa3 	bl	23114 <sys_clock_announce>
    return p_reg->CC[ch];
   20bce:	00a3      	lsls	r3, r4, #2
   20bd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   20bd4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   20bd8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   20bdc:	42aa      	cmp	r2, r5
   20bde:	d10b      	bne.n	20bf8 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   20be0:	b91e      	cbnz	r6, 20bea <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   20be2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   20be6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   20bea:	4b08      	ldr	r3, [pc, #32]	; (20c0c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20bec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   20bf0:	fa00 f404 	lsl.w	r4, r0, r4
   20bf4:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   20bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   20bfa:	2600      	movs	r6, #0
   20bfc:	e7e5      	b.n	20bca <sys_clock_timeout_handler+0x32>
   20bfe:	bf00      	nop
   20c00:	20001c60 	.word	0x20001c60
   20c04:	200032e4 	.word	0x200032e4
   20c08:	20001c48 	.word	0x20001c48
   20c0c:	40011000 	.word	0x40011000

00020c10 <compare_int_unlock>:
	if (key) {
   20c10:	b319      	cbz	r1, 20c5a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20c12:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   20c16:	2301      	movs	r3, #1
   20c18:	4a10      	ldr	r2, [pc, #64]	; (20c5c <compare_int_unlock+0x4c>)
   20c1a:	4083      	lsls	r3, r0
   20c1c:	e852 1f00 	ldrex	r1, [r2]
   20c20:	4319      	orrs	r1, r3
   20c22:	e842 1c00 	strex	ip, r1, [r2]
   20c26:	f1bc 0f00 	cmp.w	ip, #0
   20c2a:	d1f7      	bne.n	20c1c <compare_int_unlock+0xc>
   20c2c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   20c30:	4a0b      	ldr	r2, [pc, #44]	; (20c60 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20c32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20c36:	4083      	lsls	r3, r0
   20c38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20c3c:	4b09      	ldr	r3, [pc, #36]	; (20c64 <compare_int_unlock+0x54>)
   20c3e:	f3bf 8f5b 	dmb	ish
   20c42:	681b      	ldr	r3, [r3, #0]
   20c44:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   20c48:	fa23 f000 	lsr.w	r0, r3, r0
   20c4c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20c4e:	bf42      	ittt	mi
   20c50:	4b05      	ldrmi	r3, [pc, #20]	; (20c68 <compare_int_unlock+0x58>)
   20c52:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   20c56:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   20c5a:	4770      	bx	lr
   20c5c:	200032e0 	.word	0x200032e0
   20c60:	40011000 	.word	0x40011000
   20c64:	200032dc 	.word	0x200032dc
   20c68:	e000e100 	.word	0xe000e100

00020c6c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   20c6c:	4b0d      	ldr	r3, [pc, #52]	; (20ca4 <z_nrf_rtc_timer_read+0x38>)
   20c6e:	6818      	ldr	r0, [r3, #0]
   20c70:	0a01      	lsrs	r1, r0, #8
   20c72:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   20c74:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   20c78:	4b0b      	ldr	r3, [pc, #44]	; (20ca8 <z_nrf_rtc_timer_read+0x3c>)
   20c7a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   20c7e:	1818      	adds	r0, r3, r0
   20c80:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   20c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20c88:	d20a      	bcs.n	20ca0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   20c8a:	4b08      	ldr	r3, [pc, #32]	; (20cac <z_nrf_rtc_timer_read+0x40>)
   20c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   20c90:	4290      	cmp	r0, r2
   20c92:	eb71 0303 	sbcs.w	r3, r1, r3
   20c96:	d203      	bcs.n	20ca0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   20c98:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   20c9c:	f141 0100 	adc.w	r1, r1, #0
}
   20ca0:	4770      	bx	lr
   20ca2:	bf00      	nop
   20ca4:	200032e4 	.word	0x200032e4
   20ca8:	40011000 	.word	0x40011000
   20cac:	20001c48 	.word	0x20001c48

00020cb0 <compare_set>:
{
   20cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cb4:	b085      	sub	sp, #20
   20cb6:	4616      	mov	r6, r2
   20cb8:	4698      	mov	r8, r3
   20cba:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   20cbc:	f7ff ff44 	bl	20b48 <compare_int_lock>
   20cc0:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   20cc2:	f7ff ffd3 	bl	20c6c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   20cc6:	42b0      	cmp	r0, r6
   20cc8:	eb71 0308 	sbcs.w	r3, r1, r8
   20ccc:	d278      	bcs.n	20dc0 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   20cce:	4b46      	ldr	r3, [pc, #280]	; (20de8 <compare_set+0x138>)
   20cd0:	1a30      	subs	r0, r6, r0
   20cd2:	eb68 0101 	sbc.w	r1, r8, r1
   20cd6:	4298      	cmp	r0, r3
   20cd8:	f171 0300 	sbcs.w	r3, r1, #0
   20cdc:	f080 8081 	bcs.w	20de2 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   20ce0:	4b42      	ldr	r3, [pc, #264]	; (20dec <compare_set+0x13c>)
   20ce2:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   20ce6:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   20cea:	45d8      	cmp	r8, fp
   20cec:	bf08      	it	eq
   20cee:	4556      	cmpeq	r6, sl
   20cf0:	d051      	beq.n	20d96 <compare_set+0xe6>
   20cf2:	ea4f 0985 	mov.w	r9, r5, lsl #2
   20cf6:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   20cfa:	f105 0750 	add.w	r7, r5, #80	; 0x50
   20cfe:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   20d02:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20d04:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   20d08:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20d0c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   20d0e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   20d12:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   20d16:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   20d18:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   20d1c:	4b34      	ldr	r3, [pc, #208]	; (20df0 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20d1e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   20d22:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   20d24:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   20d28:	1a40      	subs	r0, r0, r1
   20d2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20d2e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   20d32:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   20d34:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   20d38:	d107      	bne.n	20d4a <compare_set+0x9a>
   20d3a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   20d3e:	2013      	movs	r0, #19
   20d40:	f009 fcd0 	bl	2a6e4 <z_impl_k_busy_wait>
   20d44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   20d48:	4b29      	ldr	r3, [pc, #164]	; (20df0 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   20d4a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   20d4e:	eba4 000c 	sub.w	r0, r4, ip
   20d52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   20d56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20d5a:	bf88      	it	hi
   20d5c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20d5e:	2000      	movs	r0, #0
   20d60:	6038      	str	r0, [r7, #0]
   20d62:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   20d64:	9801      	ldr	r0, [sp, #4]
   20d66:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   20d6a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   20d6e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   20d72:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   20d76:	4281      	cmp	r1, r0
   20d78:	d006      	beq.n	20d88 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   20d7a:	1a20      	subs	r0, r4, r0
   20d7c:	3802      	subs	r0, #2
   20d7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   20d82:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20d86:	d819      	bhi.n	20dbc <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   20d88:	1aa4      	subs	r4, r4, r2
   20d8a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   20d8e:	eb14 0a06 	adds.w	sl, r4, r6
   20d92:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   20d96:	4915      	ldr	r1, [pc, #84]	; (20dec <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   20d98:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   20d9a:	012b      	lsls	r3, r5, #4
   20d9c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   20da0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   20da4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   20da6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   20da8:	6053      	str	r3, [r2, #4]
	return ret;
   20daa:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   20dac:	4628      	mov	r0, r5
   20dae:	9900      	ldr	r1, [sp, #0]
   20db0:	f7ff ff2e 	bl	20c10 <compare_int_unlock>
}
   20db4:	4620      	mov	r0, r4
   20db6:	b005      	add	sp, #20
   20db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dbc:	4620      	mov	r0, r4
   20dbe:	e7b1      	b.n	20d24 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   20dc0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20dc2:	4a0c      	ldr	r2, [pc, #48]	; (20df4 <compare_set+0x144>)
   20dc4:	f3bf 8f5b 	dmb	ish
   20dc8:	40ab      	lsls	r3, r5
   20dca:	e852 1f00 	ldrex	r1, [r2]
   20dce:	4319      	orrs	r1, r3
   20dd0:	e842 1000 	strex	r0, r1, [r2]
   20dd4:	2800      	cmp	r0, #0
   20dd6:	d1f8      	bne.n	20dca <compare_set+0x11a>
   20dd8:	f3bf 8f5b 	dmb	ish
   20ddc:	46b2      	mov	sl, r6
   20dde:	46c3      	mov	fp, r8
   20de0:	e7d9      	b.n	20d96 <compare_set+0xe6>
			return -EINVAL;
   20de2:	f06f 0415 	mvn.w	r4, #21
   20de6:	e7e1      	b.n	20dac <compare_set+0xfc>
   20de8:	01000001 	.word	0x01000001
   20dec:	20001c50 	.word	0x20001c50
   20df0:	40011000 	.word	0x40011000
   20df4:	200032dc 	.word	0x200032dc

00020df8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   20df8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   20dfa:	4b19      	ldr	r3, [pc, #100]	; (20e60 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   20dfc:	4d19      	ldr	r5, [pc, #100]	; (20e64 <sys_clock_driver_init+0x6c>)
   20dfe:	2400      	movs	r4, #0
   20e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   20e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20e08:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   20e0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   20e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20e14:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20e18:	4b13      	ldr	r3, [pc, #76]	; (20e68 <sys_clock_driver_init+0x70>)
   20e1a:	2602      	movs	r6, #2
   20e1c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   20e20:	2101      	movs	r1, #1
   20e22:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   20e26:	2011      	movs	r0, #17
   20e28:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   20e2c:	4622      	mov	r2, r4
   20e2e:	f7e5 fe5f 	bl	6af0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   20e32:	2011      	movs	r0, #17
   20e34:	f7e5 fe2a 	bl	6a8c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   20e38:	4a0c      	ldr	r2, [pc, #48]	; (20e6c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   20e3a:	2301      	movs	r3, #1
   20e3c:	60ab      	str	r3, [r5, #8]
   20e3e:	602b      	str	r3, [r5, #0]
   20e40:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   20e42:	4b0b      	ldr	r3, [pc, #44]	; (20e70 <sys_clock_driver_init+0x78>)
   20e44:	4a0b      	ldr	r2, [pc, #44]	; (20e74 <sys_clock_driver_init+0x7c>)
   20e46:	9300      	str	r3, [sp, #0]
   20e48:	9401      	str	r4, [sp, #4]
   20e4a:	2300      	movs	r3, #0
   20e4c:	4620      	mov	r0, r4
   20e4e:	f7ff ff2f 	bl	20cb0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   20e52:	4630      	mov	r0, r6
   20e54:	f7ff f924 	bl	200a0 <z_nrf_clock_control_lf_on>

	return 0;
}
   20e58:	4620      	mov	r0, r4
   20e5a:	b002      	add	sp, #8
   20e5c:	bd70      	pop	{r4, r5, r6, pc}
   20e5e:	bf00      	nop
   20e60:	20001c50 	.word	0x20001c50
   20e64:	40011000 	.word	0x40011000
   20e68:	e000e100 	.word	0xe000e100
   20e6c:	200032e0 	.word	0x200032e0
   20e70:	00020b99 	.word	0x00020b99
   20e74:	007fffff 	.word	0x007fffff

00020e78 <rtc_nrf_isr>:
{
   20e78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   20e7c:	4c35      	ldr	r4, [pc, #212]	; (20f54 <rtc_nrf_isr+0xdc>)
   20e7e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   20e82:	079a      	lsls	r2, r3, #30
   20e84:	d50b      	bpl.n	20e9e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20e86:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20e8a:	b143      	cbz	r3, 20e9e <rtc_nrf_isr+0x26>
		overflow_cnt++;
   20e8c:	4a32      	ldr	r2, [pc, #200]	; (20f58 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20e8e:	2300      	movs	r3, #0
   20e90:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   20e94:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   20e98:	6813      	ldr	r3, [r2, #0]
   20e9a:	3301      	adds	r3, #1
   20e9c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   20e9e:	f04f 0320 	mov.w	r3, #32
   20ea2:	f3ef 8211 	mrs	r2, BASEPRI
   20ea6:	f383 8812 	msr	BASEPRI_MAX, r3
   20eaa:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   20eae:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   20eb2:	03db      	lsls	r3, r3, #15
   20eb4:	d512      	bpl.n	20edc <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20eb6:	f3bf 8f5b 	dmb	ish
   20eba:	4b28      	ldr	r3, [pc, #160]	; (20f5c <rtc_nrf_isr+0xe4>)
   20ebc:	e853 1f00 	ldrex	r1, [r3]
   20ec0:	f021 0001 	bic.w	r0, r1, #1
   20ec4:	e843 0600 	strex	r6, r0, [r3]
   20ec8:	2e00      	cmp	r6, #0
   20eca:	d1f7      	bne.n	20ebc <rtc_nrf_isr+0x44>
   20ecc:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   20ed0:	2900      	cmp	r1, #0
   20ed2:	d136      	bne.n	20f42 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   20ed4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   20ed8:	2b00      	cmp	r3, #0
   20eda:	d132      	bne.n	20f42 <rtc_nrf_isr+0xca>
{
   20edc:	2300      	movs	r3, #0
	__asm__ volatile(
   20ede:	f382 8811 	msr	BASEPRI, r2
   20ee2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   20ee6:	b34b      	cbz	r3, 20f3c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   20ee8:	f7ff fec0 	bl	20c6c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   20eec:	f04f 0320 	mov.w	r3, #32
   20ef0:	f3ef 8c11 	mrs	ip, BASEPRI
   20ef4:	f383 8812 	msr	BASEPRI_MAX, r3
   20ef8:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   20efc:	4b18      	ldr	r3, [pc, #96]	; (20f60 <rtc_nrf_isr+0xe8>)
   20efe:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   20f02:	42b0      	cmp	r0, r6
   20f04:	eb71 0207 	sbcs.w	r2, r1, r7
   20f08:	f04f 0200 	mov.w	r2, #0
   20f0c:	d320      	bcc.n	20f50 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   20f0e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   20f12:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   20f16:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   20f1a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   20f1e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   20f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   20f24:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   20f28:	f38c 8811 	msr	BASEPRI, ip
   20f2c:	f3bf 8f6f 	isb	sy
		if (handler) {
   20f30:	b121      	cbz	r1, 20f3c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   20f32:	9500      	str	r5, [sp, #0]
   20f34:	4632      	mov	r2, r6
   20f36:	463b      	mov	r3, r7
   20f38:	2000      	movs	r0, #0
   20f3a:	4788      	blx	r1
}
   20f3c:	b003      	add	sp, #12
   20f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   20f42:	2300      	movs	r3, #0
   20f44:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   20f48:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   20f4c:	2301      	movs	r3, #1
}
   20f4e:	e7c6      	b.n	20ede <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   20f50:	4611      	mov	r1, r2
   20f52:	e7e9      	b.n	20f28 <rtc_nrf_isr+0xb0>
   20f54:	40011000 	.word	0x40011000
   20f58:	200032e4 	.word	0x200032e4
   20f5c:	200032dc 	.word	0x200032dc
   20f60:	20001c50 	.word	0x20001c50

00020f64 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20f64:	1c43      	adds	r3, r0, #1
{
   20f66:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20f68:	d021      	beq.n	20fae <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   20f6a:	2801      	cmp	r0, #1
   20f6c:	dd21      	ble.n	20fb2 <sys_clock_set_timeout+0x4e>
   20f6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20f72:	da20      	bge.n	20fb6 <sys_clock_set_timeout+0x52>
   20f74:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   20f76:	f7ff fe79 	bl	20c6c <z_nrf_rtc_timer_read>
   20f7a:	4b10      	ldr	r3, [pc, #64]	; (20fbc <sys_clock_set_timeout+0x58>)
   20f7c:	e9d3 1300 	ldrd	r1, r3, [r3]
   20f80:	1a40      	subs	r0, r0, r1
		ticks = 0;
   20f82:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   20f86:	bf28      	it	cs
   20f88:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   20f8a:	3001      	adds	r0, #1
   20f8c:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   20f8e:	480c      	ldr	r0, [pc, #48]	; (20fc0 <sys_clock_set_timeout+0x5c>)
   20f90:	4282      	cmp	r2, r0
   20f92:	bf28      	it	cs
   20f94:	4602      	movcs	r2, r0
   20f96:	1852      	adds	r2, r2, r1
   20f98:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   20f9c:	4909      	ldr	r1, [pc, #36]	; (20fc4 <sys_clock_set_timeout+0x60>)
   20f9e:	9001      	str	r0, [sp, #4]
   20fa0:	9100      	str	r1, [sp, #0]
   20fa2:	f143 0300 	adc.w	r3, r3, #0
   20fa6:	f7ff fe83 	bl	20cb0 <compare_set>
}
   20faa:	b002      	add	sp, #8
   20fac:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   20fae:	4804      	ldr	r0, [pc, #16]	; (20fc0 <sys_clock_set_timeout+0x5c>)
   20fb0:	e7e0      	b.n	20f74 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   20fb2:	2400      	movs	r4, #0
   20fb4:	e7df      	b.n	20f76 <sys_clock_set_timeout+0x12>
   20fb6:	4c02      	ldr	r4, [pc, #8]	; (20fc0 <sys_clock_set_timeout+0x5c>)
   20fb8:	e7dd      	b.n	20f76 <sys_clock_set_timeout+0x12>
   20fba:	bf00      	nop
   20fbc:	20001c60 	.word	0x20001c60
   20fc0:	007fffff 	.word	0x007fffff
   20fc4:	00020b99 	.word	0x00020b99

00020fc8 <sys_clock_elapsed>:
{
   20fc8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   20fca:	f7ff fe4f 	bl	20c6c <z_nrf_rtc_timer_read>
   20fce:	4b02      	ldr	r3, [pc, #8]	; (20fd8 <sys_clock_elapsed+0x10>)
   20fd0:	681b      	ldr	r3, [r3, #0]
}
   20fd2:	1ac0      	subs	r0, r0, r3
   20fd4:	bd08      	pop	{r3, pc}
   20fd6:	bf00      	nop
   20fd8:	20001c60 	.word	0x20001c60

00020fdc <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   20fdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   20fe0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   20fe4:	2a08      	cmp	r2, #8
   20fe6:	d106      	bne.n	20ff6 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   20fe8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   20fec:	2b05      	cmp	r3, #5
   20fee:	d802      	bhi.n	20ff6 <nrf52_errata_103+0x1a>
   20ff0:	4a02      	ldr	r2, [pc, #8]	; (20ffc <nrf52_errata_103+0x20>)
   20ff2:	5cd0      	ldrb	r0, [r2, r3]
   20ff4:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   20ff6:	2000      	movs	r0, #0
    #endif
}
   20ff8:	4770      	bx	lr
   20ffa:	bf00      	nop
   20ffc:	0002f225 	.word	0x0002f225

00021000 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   21000:	4a02      	ldr	r2, [pc, #8]	; (2100c <nvmc_wait+0xc>)
   21002:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   21006:	2b00      	cmp	r3, #0
   21008:	d0fb      	beq.n	21002 <nvmc_wait+0x2>
}
   2100a:	4770      	bx	lr
   2100c:	4001e000 	.word	0x4001e000

00021010 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   21010:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   21012:	f008 fe6e 	bl	29cf2 <nrf52_errata_136>
   21016:	b140      	cbz	r0, 2102a <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   21018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2101c:	2200      	movs	r2, #0
   2101e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   21022:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   21026:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   2102a:	f008 fe62 	bl	29cf2 <nrf52_errata_136>
   2102e:	2800      	cmp	r0, #0
   21030:	d046      	beq.n	210c0 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   21032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   21036:	4b60      	ldr	r3, [pc, #384]	; (211b8 <SystemInit+0x1a8>)
   21038:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2103c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   21040:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   21044:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   21048:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2104c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   21050:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   21054:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   21058:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2105c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   21060:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   21064:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   21068:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2106c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   21070:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   21074:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   21078:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2107c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   21080:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   21084:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   21088:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2108c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   21090:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   21094:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   21098:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2109c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   210a0:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   210a4:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   210a8:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   210ac:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   210b0:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   210b4:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   210b8:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   210bc:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   210c0:	f7ff ff8c 	bl	20fdc <nrf52_errata_103>
   210c4:	b118      	cbz	r0, 210ce <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   210c6:	4b3d      	ldr	r3, [pc, #244]	; (211bc <SystemInit+0x1ac>)
   210c8:	4a3d      	ldr	r2, [pc, #244]	; (211c0 <SystemInit+0x1b0>)
   210ca:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   210ce:	f7ff ff85 	bl	20fdc <nrf52_errata_103>
   210d2:	b118      	cbz	r0, 210dc <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   210d4:	4b3b      	ldr	r3, [pc, #236]	; (211c4 <SystemInit+0x1b4>)
   210d6:	22fb      	movs	r2, #251	; 0xfb
   210d8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   210dc:	f7ff ff7e 	bl	20fdc <nrf52_errata_103>
   210e0:	b170      	cbz	r0, 21100 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   210e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   210e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   210ea:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   210ee:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   210f2:	f022 020f 	bic.w	r2, r2, #15
   210f6:	f003 030f 	and.w	r3, r3, #15
   210fa:	4313      	orrs	r3, r2
   210fc:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   21100:	f7ff ff6c 	bl	20fdc <nrf52_errata_103>
   21104:	b120      	cbz	r0, 21110 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   21106:	4b30      	ldr	r3, [pc, #192]	; (211c8 <SystemInit+0x1b8>)
   21108:	f44f 7200 	mov.w	r2, #512	; 0x200
   2110c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   21110:	f008 fdef 	bl	29cf2 <nrf52_errata_136>
   21114:	b148      	cbz	r0, 2112a <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   21116:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2111a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   2111e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   21120:	bf44      	itt	mi
   21122:	f06f 0201 	mvnmi.w	r2, #1
   21126:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2112a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   2112e:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   21132:	2a08      	cmp	r2, #8
   21134:	d10e      	bne.n	21154 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   21136:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   2113a:	2b05      	cmp	r3, #5
   2113c:	d802      	bhi.n	21144 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2113e:	4a23      	ldr	r2, [pc, #140]	; (211cc <SystemInit+0x1bc>)
   21140:	5cd3      	ldrb	r3, [r2, r3]
   21142:	b13b      	cbz	r3, 21154 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   21144:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21148:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   2114c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21150:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21154:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   21158:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2115c:	2a00      	cmp	r2, #0
   2115e:	db03      	blt.n	21168 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   21160:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   21164:	2b00      	cmp	r3, #0
   21166:	da22      	bge.n	211ae <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21168:	4919      	ldr	r1, [pc, #100]	; (211d0 <SystemInit+0x1c0>)
   2116a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2116c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   21170:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   21174:	2412      	movs	r4, #18
    nvmc_wait();
   21176:	f7ff ff43 	bl	21000 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2117a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2117e:	f7ff ff3f 	bl	21000 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   21182:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   21186:	f7ff ff3b 	bl	21000 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2118a:	2300      	movs	r3, #0
   2118c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   21190:	f7ff ff36 	bl	21000 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   21194:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   21198:	490e      	ldr	r1, [pc, #56]	; (211d4 <SystemInit+0x1c4>)
   2119a:	4b0f      	ldr	r3, [pc, #60]	; (211d8 <SystemInit+0x1c8>)
   2119c:	68ca      	ldr	r2, [r1, #12]
   2119e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   211a2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   211a4:	60cb      	str	r3, [r1, #12]
   211a6:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   211aa:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   211ac:	e7fd      	b.n	211aa <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   211ae:	4b0b      	ldr	r3, [pc, #44]	; (211dc <SystemInit+0x1cc>)
   211b0:	4a0b      	ldr	r2, [pc, #44]	; (211e0 <SystemInit+0x1d0>)
   211b2:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   211b4:	bd10      	pop	{r4, pc}
   211b6:	bf00      	nop
   211b8:	4000c000 	.word	0x4000c000
   211bc:	40005000 	.word	0x40005000
   211c0:	00038148 	.word	0x00038148
   211c4:	4000f000 	.word	0x4000f000
   211c8:	40029000 	.word	0x40029000
   211cc:	0002f21f 	.word	0x0002f21f
   211d0:	4001e000 	.word	0x4001e000
   211d4:	e000ed00 	.word	0xe000ed00
   211d8:	05fa0004 	.word	0x05fa0004
   211dc:	20000718 	.word	0x20000718
   211e0:	03d09000 	.word	0x03d09000

000211e4 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   211e4:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   211e6:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   211e8:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   211ea:	fab2 f382 	clz	r3, r2
   211ee:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   211f2:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   211f4:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   211f6:	d014      	beq.n	21222 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   211f8:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   211fc:	fa05 f303 	lsl.w	r3, r5, r3
   21200:	ea22 0303 	bic.w	r3, r2, r3
   21204:	e850 6f00 	ldrex	r6, [r0]
   21208:	4296      	cmp	r6, r2
   2120a:	d104      	bne.n	21216 <nrfx_flag32_alloc+0x32>
   2120c:	e840 3c00 	strex	ip, r3, [r0]
   21210:	f1bc 0f00 	cmp.w	ip, #0
   21214:	d1f6      	bne.n	21204 <nrfx_flag32_alloc+0x20>
   21216:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   2121a:	d1e5      	bne.n	211e8 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   2121c:	4802      	ldr	r0, [pc, #8]	; (21228 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   2121e:	700c      	strb	r4, [r1, #0]
}
   21220:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   21222:	4802      	ldr	r0, [pc, #8]	; (2122c <nrfx_flag32_alloc+0x48>)
   21224:	e7fc      	b.n	21220 <nrfx_flag32_alloc+0x3c>
   21226:	bf00      	nop
   21228:	0bad0000 	.word	0x0bad0000
   2122c:	0bad0002 	.word	0x0bad0002

00021230 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   21230:	6803      	ldr	r3, [r0, #0]
   21232:	40cb      	lsrs	r3, r1
   21234:	07db      	lsls	r3, r3, #31
{
   21236:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   21238:	d415      	bmi.n	21266 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   2123a:	2301      	movs	r3, #1
   2123c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   21240:	6803      	ldr	r3, [r0, #0]
   21242:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   21246:	ea41 0203 	orr.w	r2, r1, r3
   2124a:	e850 4f00 	ldrex	r4, [r0]
   2124e:	429c      	cmp	r4, r3
   21250:	d104      	bne.n	2125c <nrfx_flag32_free+0x2c>
   21252:	e840 2c00 	strex	ip, r2, [r0]
   21256:	f1bc 0f00 	cmp.w	ip, #0
   2125a:	d1f6      	bne.n	2124a <nrfx_flag32_free+0x1a>
   2125c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   21260:	d1ee      	bne.n	21240 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   21262:	4802      	ldr	r0, [pc, #8]	; (2126c <nrfx_flag32_free+0x3c>)
}
   21264:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21266:	4802      	ldr	r0, [pc, #8]	; (21270 <nrfx_flag32_free+0x40>)
   21268:	e7fc      	b.n	21264 <nrfx_flag32_free+0x34>
   2126a:	bf00      	nop
   2126c:	0bad0000 	.word	0x0bad0000
   21270:	0bad0004 	.word	0x0bad0004

00021274 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   21274:	4b04      	ldr	r3, [pc, #16]	; (21288 <nrfx_clock_init+0x14>)
   21276:	791a      	ldrb	r2, [r3, #4]
   21278:	b922      	cbnz	r2, 21284 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   2127a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   2127c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   2127e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   21280:	4802      	ldr	r0, [pc, #8]	; (2128c <nrfx_clock_init+0x18>)
   21282:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   21284:	4802      	ldr	r0, [pc, #8]	; (21290 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   21286:	4770      	bx	lr
   21288:	200032e8 	.word	0x200032e8
   2128c:	0bad0000 	.word	0x0bad0000
   21290:	0bad000c 	.word	0x0bad000c

00021294 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   21294:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   21296:	b110      	cbz	r0, 2129e <nrfx_clock_stop+0xa>
   21298:	2801      	cmp	r0, #1
   2129a:	d017      	beq.n	212cc <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   2129c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   2129e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   212a2:	2302      	movs	r3, #2
   212a4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212a8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   212ac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212b0:	2301      	movs	r3, #1
   212b2:	60e3      	str	r3, [r4, #12]
   212b4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   212b8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   212bc:	03db      	lsls	r3, r3, #15
   212be:	d5ed      	bpl.n	2129c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   212c0:	2001      	movs	r0, #1
   212c2:	f008 fd20 	bl	29d06 <nrfx_busy_wait>
   212c6:	3d01      	subs	r5, #1
   212c8:	d1f6      	bne.n	212b8 <nrfx_clock_stop+0x24>
   212ca:	e7e7      	b.n	2129c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   212cc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212d0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   212d2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212d6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   212da:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212de:	6060      	str	r0, [r4, #4]
   212e0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   212e4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   212e8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   212ec:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   212ee:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   212f2:	d505      	bpl.n	21300 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   212f4:	b123      	cbz	r3, 21300 <nrfx_clock_stop+0x6c>
   212f6:	2001      	movs	r0, #1
   212f8:	f008 fd05 	bl	29d06 <nrfx_busy_wait>
   212fc:	3d01      	subs	r5, #1
   212fe:	d1f1      	bne.n	212e4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   21300:	4b01      	ldr	r3, [pc, #4]	; (21308 <nrfx_clock_stop+0x74>)
   21302:	2200      	movs	r2, #0
   21304:	715a      	strb	r2, [r3, #5]
   21306:	e7c9      	b.n	2129c <nrfx_clock_stop+0x8>
   21308:	200032e8 	.word	0x200032e8

0002130c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2130c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   21310:	b510      	push	{r4, lr}
   21312:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   21316:	b16a      	cbz	r2, 21334 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21318:	2200      	movs	r2, #0
   2131a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2131e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   21322:	2201      	movs	r2, #1
   21324:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   21328:	4b11      	ldr	r3, [pc, #68]	; (21370 <nrfx_power_clock_irq_handler+0x64>)
   2132a:	7958      	ldrb	r0, [r3, #5]
   2132c:	b910      	cbnz	r0, 21334 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   2132e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   21330:	681b      	ldr	r3, [r3, #0]
   21332:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21338:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   2133c:	b172      	cbz	r2, 2135c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2133e:	2200      	movs	r2, #0
   21340:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   21344:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   21348:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2134c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   21350:	0792      	lsls	r2, r2, #30
   21352:	d104      	bne.n	2135e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   21354:	2201      	movs	r2, #1
   21356:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2135a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   2135c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   2135e:	2202      	movs	r2, #2
   21360:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   21364:	4b02      	ldr	r3, [pc, #8]	; (21370 <nrfx_power_clock_irq_handler+0x64>)
}
   21366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2136a:	681b      	ldr	r3, [r3, #0]
   2136c:	2001      	movs	r0, #1
   2136e:	4718      	bx	r3
   21370:	200032e8 	.word	0x200032e8

00021374 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   21374:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   21376:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   2137a:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   2137c:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   2137e:	6002      	str	r2, [r0, #0]
}
   21380:	4802      	ldr	r0, [pc, #8]	; (2138c <nrf_gpio_pin_port_decode+0x18>)
   21382:	bf18      	it	ne
   21384:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   21388:	4770      	bx	lr
   2138a:	bf00      	nop
   2138c:	50000300 	.word	0x50000300

00021390 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   21390:	4b03      	ldr	r3, [pc, #12]	; (213a0 <pin_in_use_by_te+0x10>)
   21392:	3008      	adds	r0, #8
   21394:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   21398:	f3c0 1040 	ubfx	r0, r0, #5, #1
   2139c:	4770      	bx	lr
   2139e:	bf00      	nop
   213a0:	2000071c 	.word	0x2000071c

000213a4 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   213a4:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   213a6:	f100 0308 	add.w	r3, r0, #8
   213aa:	4c0c      	ldr	r4, [pc, #48]	; (213dc <call_handler+0x38>)
   213ac:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   213b0:	05da      	lsls	r2, r3, #23
{
   213b2:	4605      	mov	r5, r0
   213b4:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   213b6:	d507      	bpl.n	213c8 <call_handler+0x24>
   213b8:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   213bc:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   213c0:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   213c4:	6852      	ldr	r2, [r2, #4]
   213c6:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   213c8:	68a3      	ldr	r3, [r4, #8]
   213ca:	b12b      	cbz	r3, 213d8 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   213cc:	68e2      	ldr	r2, [r4, #12]
   213ce:	4631      	mov	r1, r6
   213d0:	4628      	mov	r0, r5
    }
}
   213d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   213d6:	4718      	bx	r3
}
   213d8:	bd70      	pop	{r4, r5, r6, pc}
   213da:	bf00      	nop
   213dc:	2000071c 	.word	0x2000071c

000213e0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   213e0:	4a12      	ldr	r2, [pc, #72]	; (2142c <release_handler+0x4c>)
   213e2:	3008      	adds	r0, #8
{
   213e4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   213e6:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   213ea:	05d9      	lsls	r1, r3, #23
   213ec:	d51b      	bpl.n	21426 <release_handler+0x46>
   213ee:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   213f2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   213f6:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   213fa:	f102 0410 	add.w	r4, r2, #16
   213fe:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   21400:	f834 3b02 	ldrh.w	r3, [r4], #2
   21404:	f413 7f80 	tst.w	r3, #256	; 0x100
   21408:	d003      	beq.n	21412 <release_handler+0x32>
   2140a:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2140e:	4299      	cmp	r1, r3
   21410:	d009      	beq.n	21426 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   21412:	3001      	adds	r0, #1
   21414:	2830      	cmp	r0, #48	; 0x30
   21416:	d1f3      	bne.n	21400 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   21418:	2300      	movs	r3, #0
   2141a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2141e:	4804      	ldr	r0, [pc, #16]	; (21430 <release_handler+0x50>)
}
   21420:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   21422:	f7ff bf05 	b.w	21230 <nrfx_flag32_free>
}
   21426:	bc10      	pop	{r4}
   21428:	4770      	bx	lr
   2142a:	bf00      	nop
   2142c:	2000071c 	.word	0x2000071c
   21430:	20000790 	.word	0x20000790

00021434 <pin_handler_trigger_uninit>:
{
   21434:	b538      	push	{r3, r4, r5, lr}
   21436:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   21438:	f7ff ffaa 	bl	21390 <pin_in_use_by_te>
   2143c:	4c09      	ldr	r4, [pc, #36]	; (21464 <pin_handler_trigger_uninit+0x30>)
   2143e:	f102 0508 	add.w	r5, r2, #8
   21442:	b140      	cbz	r0, 21456 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21444:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   21448:	4907      	ldr	r1, [pc, #28]	; (21468 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   2144a:	0b5b      	lsrs	r3, r3, #13
   2144c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   21450:	2000      	movs	r0, #0
   21452:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   21456:	4610      	mov	r0, r2
   21458:	f7ff ffc2 	bl	213e0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   2145c:	2300      	movs	r3, #0
   2145e:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   21462:	bd38      	pop	{r3, r4, r5, pc}
   21464:	2000071c 	.word	0x2000071c
   21468:	40006000 	.word	0x40006000

0002146c <nrfx_gpiote_input_configure>:
{
   2146c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21470:	4604      	mov	r4, r0
   21472:	4617      	mov	r7, r2
   21474:	461d      	mov	r5, r3
    if (p_input_config)
   21476:	b321      	cbz	r1, 214c2 <nrfx_gpiote_input_configure+0x56>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21478:	4e4e      	ldr	r6, [pc, #312]	; (215b4 <nrfx_gpiote_input_configure+0x148>)
   2147a:	f100 0808 	add.w	r8, r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   2147e:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   21482:	079b      	lsls	r3, r3, #30
   21484:	d506      	bpl.n	21494 <nrfx_gpiote_input_configure+0x28>
   21486:	f7ff ff83 	bl	21390 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   2148a:	b118      	cbz	r0, 21494 <nrfx_gpiote_input_configure+0x28>
                return NRFX_ERROR_INVALID_PARAM;
   2148c:	484a      	ldr	r0, [pc, #296]	; (215b8 <nrfx_gpiote_input_configure+0x14c>)
}
   2148e:	b004      	add	sp, #16
   21490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   21494:	2300      	movs	r3, #0
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   21496:	e9cd 3300 	strd	r3, r3, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   2149a:	f88d 300e 	strb.w	r3, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   2149e:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   214a2:	f10d 020f 	add.w	r2, sp, #15
   214a6:	460b      	mov	r3, r1
   214a8:	4620      	mov	r0, r4
   214aa:	f10d 010e 	add.w	r1, sp, #14
   214ae:	f008 fc62 	bl	29d76 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   214b2:	f836 3018 	ldrh.w	r3, [r6, r8, lsl #1]
   214b6:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   214ba:	f043 0301 	orr.w	r3, r3, #1
   214be:	f826 3018 	strh.w	r3, [r6, r8, lsl #1]
    if (p_trigger_config)
   214c2:	b197      	cbz	r7, 214ea <nrfx_gpiote_input_configure+0x7e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   214c4:	4b3b      	ldr	r3, [pc, #236]	; (215b4 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   214c6:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   214c8:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   214ca:	f104 0008 	add.w	r0, r4, #8
   214ce:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   214d2:	078f      	lsls	r7, r1, #30
   214d4:	d50c      	bpl.n	214f0 <nrfx_gpiote_input_configure+0x84>
            if (use_evt)
   214d6:	2a00      	cmp	r2, #0
   214d8:	d1d8      	bne.n	2148c <nrfx_gpiote_input_configure+0x20>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   214da:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   214de:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   214e2:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   214e6:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   214ea:	bbcd      	cbnz	r5, 21560 <nrfx_gpiote_input_configure+0xf4>
    return NRFX_SUCCESS;
   214ec:	4833      	ldr	r0, [pc, #204]	; (215bc <nrfx_gpiote_input_configure+0x150>)
   214ee:	e7ce      	b.n	2148e <nrfx_gpiote_input_configure+0x22>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   214f0:	f021 0120 	bic.w	r1, r1, #32
   214f4:	04c9      	lsls	r1, r1, #19
   214f6:	0cc9      	lsrs	r1, r1, #19
   214f8:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   214fc:	2a00      	cmp	r2, #0
   214fe:	d0ec      	beq.n	214da <nrfx_gpiote_input_configure+0x6e>
                if (!edge)
   21500:	2e03      	cmp	r6, #3
   21502:	d8c3      	bhi.n	2148c <nrfx_gpiote_input_configure+0x20>
                uint8_t ch = *p_trigger_config->p_in_channel;
   21504:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   21506:	b92e      	cbnz	r6, 21514 <nrfx_gpiote_input_configure+0xa8>
   21508:	4a2d      	ldr	r2, [pc, #180]	; (215c0 <nrfx_gpiote_input_configure+0x154>)
   2150a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   2150e:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   21512:	e7e2      	b.n	214da <nrfx_gpiote_input_configure+0x6e>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   21514:	00ba      	lsls	r2, r7, #2
   21516:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2151a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2151e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   21522:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   21526:	f02c 0c03 	bic.w	ip, ip, #3
   2152a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   2152e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   21532:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   21536:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2153a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2153e:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   21542:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   21546:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   2154a:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   2154e:	ea4c 0c0e 	orr.w	ip, ip, lr
   21552:	f041 0120 	orr.w	r1, r1, #32
   21556:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2155a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   2155e:	e7bc      	b.n	214da <nrfx_gpiote_input_configure+0x6e>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   21560:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   21564:	4620      	mov	r0, r4
   21566:	f7ff ff3b 	bl	213e0 <release_handler>
    if (!handler)
   2156a:	2e00      	cmp	r6, #0
   2156c:	d0be      	beq.n	214ec <nrfx_gpiote_input_configure+0x80>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   2156e:	4d11      	ldr	r5, [pc, #68]	; (215b4 <nrfx_gpiote_input_configure+0x148>)
   21570:	682b      	ldr	r3, [r5, #0]
   21572:	429e      	cmp	r6, r3
   21574:	d104      	bne.n	21580 <nrfx_gpiote_input_configure+0x114>
   21576:	686b      	ldr	r3, [r5, #4]
   21578:	429f      	cmp	r7, r3
   2157a:	d101      	bne.n	21580 <nrfx_gpiote_input_configure+0x114>
   2157c:	2200      	movs	r2, #0
   2157e:	e00a      	b.n	21596 <nrfx_gpiote_input_configure+0x12a>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   21580:	4810      	ldr	r0, [pc, #64]	; (215c4 <nrfx_gpiote_input_configure+0x158>)
   21582:	f10d 010f 	add.w	r1, sp, #15
   21586:	f7ff fe2d 	bl	211e4 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   2158a:	4b0c      	ldr	r3, [pc, #48]	; (215bc <nrfx_gpiote_input_configure+0x150>)
   2158c:	4298      	cmp	r0, r3
   2158e:	f47f af7e 	bne.w	2148e <nrfx_gpiote_input_configure+0x22>
        handler_id = (int32_t)id;
   21592:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   21596:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   2159a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   2159e:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   215a0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   215a2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   215a6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   215aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   215ae:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   215b2:	e79b      	b.n	214ec <nrfx_gpiote_input_configure+0x80>
   215b4:	2000071c 	.word	0x2000071c
   215b8:	0bad0004 	.word	0x0bad0004
   215bc:	0bad0000 	.word	0x0bad0000
   215c0:	40006000 	.word	0x40006000
   215c4:	20000790 	.word	0x20000790

000215c8 <nrfx_gpiote_output_configure>:
{
   215c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   215ca:	4604      	mov	r4, r0
   215cc:	b085      	sub	sp, #20
   215ce:	4615      	mov	r5, r2
    if (p_config)
   215d0:	b319      	cbz	r1, 2161a <nrfx_gpiote_output_configure+0x52>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   215d2:	4e33      	ldr	r6, [pc, #204]	; (216a0 <nrfx_gpiote_output_configure+0xd8>)
   215d4:	f100 0708 	add.w	r7, r0, #8
   215d8:	f836 2017 	ldrh.w	r2, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   215dc:	0793      	lsls	r3, r2, #30
   215de:	d403      	bmi.n	215e8 <nrfx_gpiote_output_configure+0x20>
   215e0:	f7ff fed6 	bl	21390 <pin_in_use_by_te>
   215e4:	2800      	cmp	r0, #0
   215e6:	d158      	bne.n	2169a <nrfx_gpiote_output_configure+0xd2>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   215e8:	f012 0f1c 	tst.w	r2, #28
   215ec:	d002      	beq.n	215f4 <nrfx_gpiote_output_configure+0x2c>
   215ee:	784b      	ldrb	r3, [r1, #1]
   215f0:	2b01      	cmp	r3, #1
   215f2:	d052      	beq.n	2169a <nrfx_gpiote_output_configure+0xd2>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   215f4:	2301      	movs	r3, #1
   215f6:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   215fa:	2300      	movs	r3, #0
   215fc:	e9cd 1300 	strd	r1, r3, [sp]
   21600:	1c4a      	adds	r2, r1, #1
   21602:	1c8b      	adds	r3, r1, #2
   21604:	4620      	mov	r0, r4
   21606:	f10d 010f 	add.w	r1, sp, #15
   2160a:	f008 fbb4 	bl	29d76 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   2160e:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   21612:	f043 0303 	orr.w	r3, r3, #3
   21616:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2161a:	b915      	cbnz	r5, 21622 <nrfx_gpiote_output_configure+0x5a>
    return NRFX_SUCCESS;
   2161c:	4821      	ldr	r0, [pc, #132]	; (216a4 <nrfx_gpiote_output_configure+0xdc>)
}
   2161e:	b005      	add	sp, #20
   21620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21622:	4e1f      	ldr	r6, [pc, #124]	; (216a0 <nrfx_gpiote_output_configure+0xd8>)
   21624:	f104 0708 	add.w	r7, r4, #8
   21628:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   2162c:	0783      	lsls	r3, r0, #30
   2162e:	d534      	bpl.n	2169a <nrfx_gpiote_output_configure+0xd2>
        uint32_t ch = p_task_config->task_ch;
   21630:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   21634:	4661      	mov	r1, ip
   21636:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   21638:	f020 0020 	bic.w	r0, r0, #32
   2163c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   21640:	04c0      	lsls	r0, r0, #19
   21642:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   21646:	0cc0      	lsrs	r0, r0, #19
   21648:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   2164c:	2300      	movs	r3, #0
   2164e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   21652:	786a      	ldrb	r2, [r5, #1]
   21654:	2a00      	cmp	r2, #0
   21656:	d0e1      	beq.n	2161c <nrfx_gpiote_output_configure+0x54>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   21658:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   2165c:	78ad      	ldrb	r5, [r5, #2]
   2165e:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   21662:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   21666:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2166a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   2166e:	0223      	lsls	r3, r4, #8
   21670:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   21674:	0412      	lsls	r2, r2, #16
   21676:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2167a:	ea43 030e 	orr.w	r3, r3, lr
   2167e:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   21680:	052a      	lsls	r2, r5, #20
   21682:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   21686:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2168a:	4313      	orrs	r3, r2
   2168c:	f040 0020 	orr.w	r0, r0, #32
   21690:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   21694:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   21698:	e7c0      	b.n	2161c <nrfx_gpiote_output_configure+0x54>
            return NRFX_ERROR_INVALID_PARAM;
   2169a:	4803      	ldr	r0, [pc, #12]	; (216a8 <nrfx_gpiote_output_configure+0xe0>)
   2169c:	e7bf      	b.n	2161e <nrfx_gpiote_output_configure+0x56>
   2169e:	bf00      	nop
   216a0:	2000071c 	.word	0x2000071c
   216a4:	0bad0000 	.word	0x0bad0000
   216a8:	0bad0004 	.word	0x0bad0004

000216ac <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   216ac:	4b01      	ldr	r3, [pc, #4]	; (216b4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   216ae:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   216b2:	4770      	bx	lr
   216b4:	2000071c 	.word	0x2000071c

000216b8 <nrfx_gpiote_channel_get>:
{
   216b8:	b508      	push	{r3, lr}
   216ba:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   216bc:	f7ff fe68 	bl	21390 <pin_in_use_by_te>
   216c0:	b138      	cbz	r0, 216d2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   216c2:	4b05      	ldr	r3, [pc, #20]	; (216d8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   216c4:	4805      	ldr	r0, [pc, #20]	; (216dc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   216c6:	3208      	adds	r2, #8
   216c8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   216cc:	0b5b      	lsrs	r3, r3, #13
   216ce:	700b      	strb	r3, [r1, #0]
}
   216d0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   216d2:	4803      	ldr	r0, [pc, #12]	; (216e0 <nrfx_gpiote_channel_get+0x28>)
   216d4:	e7fc      	b.n	216d0 <nrfx_gpiote_channel_get+0x18>
   216d6:	bf00      	nop
   216d8:	2000071c 	.word	0x2000071c
   216dc:	0bad0000 	.word	0x0bad0000
   216e0:	0bad0004 	.word	0x0bad0004

000216e4 <nrfx_gpiote_init>:
{
   216e4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   216e6:	4c0f      	ldr	r4, [pc, #60]	; (21724 <nrfx_gpiote_init+0x40>)
   216e8:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   216ec:	b9bd      	cbnz	r5, 2171e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   216ee:	2260      	movs	r2, #96	; 0x60
   216f0:	4629      	mov	r1, r5
   216f2:	f104 0010 	add.w	r0, r4, #16
   216f6:	f009 f9d1 	bl	2aa9c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   216fa:	2006      	movs	r0, #6
   216fc:	f7e5 f9c6 	bl	6a8c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21700:	4b09      	ldr	r3, [pc, #36]	; (21728 <nrfx_gpiote_init+0x44>)
    return err_code;
   21702:	480a      	ldr	r0, [pc, #40]	; (2172c <nrfx_gpiote_init+0x48>)
   21704:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   21708:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2170c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   21710:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   21714:	2301      	movs	r3, #1
   21716:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2171a:	6763      	str	r3, [r4, #116]	; 0x74
}
   2171c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2171e:	4804      	ldr	r0, [pc, #16]	; (21730 <nrfx_gpiote_init+0x4c>)
   21720:	e7fc      	b.n	2171c <nrfx_gpiote_init+0x38>
   21722:	bf00      	nop
   21724:	2000071c 	.word	0x2000071c
   21728:	40006000 	.word	0x40006000
   2172c:	0bad0000 	.word	0x0bad0000
   21730:	0bad0005 	.word	0x0bad0005

00021734 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   21734:	4b03      	ldr	r3, [pc, #12]	; (21744 <nrfx_gpiote_is_init+0x10>)
   21736:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   2173a:	3800      	subs	r0, #0
   2173c:	bf18      	it	ne
   2173e:	2001      	movne	r0, #1
   21740:	4770      	bx	lr
   21742:	bf00      	nop
   21744:	2000071c 	.word	0x2000071c

00021748 <nrfx_gpiote_channel_free>:
{
   21748:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2174a:	4801      	ldr	r0, [pc, #4]	; (21750 <nrfx_gpiote_channel_free+0x8>)
   2174c:	f7ff bd70 	b.w	21230 <nrfx_flag32_free>
   21750:	2000078c 	.word	0x2000078c

00021754 <nrfx_gpiote_channel_alloc>:
{
   21754:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   21756:	4801      	ldr	r0, [pc, #4]	; (2175c <nrfx_gpiote_channel_alloc+0x8>)
   21758:	f7ff bd44 	b.w	211e4 <nrfx_flag32_alloc>
   2175c:	2000078c 	.word	0x2000078c

00021760 <nrfx_gpiote_trigger_enable>:
{
   21760:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21762:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21764:	f7ff fe14 	bl	21390 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   21768:	f104 0208 	add.w	r2, r4, #8
   2176c:	4b1e      	ldr	r3, [pc, #120]	; (217e8 <nrfx_gpiote_trigger_enable+0x88>)
   2176e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21772:	b1e8      	cbz	r0, 217b0 <nrfx_gpiote_trigger_enable+0x50>
   21774:	f013 0502 	ands.w	r5, r3, #2
   21778:	d11a      	bne.n	217b0 <nrfx_gpiote_trigger_enable+0x50>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2177a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2177c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   2177e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   21782:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   21786:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2178a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   2178e:	6005      	str	r5, [r0, #0]
   21790:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   21792:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   21796:	f040 0001 	orr.w	r0, r0, #1
   2179a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   2179e:	b129      	cbz	r1, 217ac <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   217a0:	2201      	movs	r2, #1
   217a2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   217a6:	4a11      	ldr	r2, [pc, #68]	; (217ec <nrfx_gpiote_trigger_enable+0x8c>)
   217a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   217ac:	b003      	add	sp, #12
   217ae:	bd30      	pop	{r4, r5, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   217b0:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   217b4:	2b04      	cmp	r3, #4
   217b6:	d012      	beq.n	217de <nrfx_gpiote_trigger_enable+0x7e>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   217b8:	2b05      	cmp	r3, #5
   217ba:	d012      	beq.n	217e2 <nrfx_gpiote_trigger_enable+0x82>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   217bc:	a801      	add	r0, sp, #4
   217be:	9401      	str	r4, [sp, #4]
   217c0:	f7ff fdd8 	bl	21374 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   217c4:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   217c6:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   217ca:	40d9      	lsrs	r1, r3
   217cc:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   217d0:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   217d2:	4620      	mov	r0, r4
}
   217d4:	b003      	add	sp, #12
   217d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   217da:	f008 bb13 	b.w	29e04 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   217de:	2103      	movs	r1, #3
   217e0:	e7f7      	b.n	217d2 <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   217e2:	2102      	movs	r1, #2
   217e4:	e7f5      	b.n	217d2 <nrfx_gpiote_trigger_enable+0x72>
   217e6:	bf00      	nop
   217e8:	2000071c 	.word	0x2000071c
   217ec:	40006000 	.word	0x40006000

000217f0 <nrfx_gpiote_trigger_disable>:
{
   217f0:	b508      	push	{r3, lr}
   217f2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   217f4:	f7ff fdcc 	bl	21390 <pin_in_use_by_te>
   217f8:	b1c0      	cbz	r0, 2182c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   217fa:	f102 0108 	add.w	r1, r2, #8
   217fe:	4b0e      	ldr	r3, [pc, #56]	; (21838 <nrfx_gpiote_trigger_disable+0x48>)
   21800:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   21804:	0799      	lsls	r1, r3, #30
   21806:	d411      	bmi.n	2182c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   21808:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2180a:	2201      	movs	r2, #1
   2180c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   2180e:	009b      	lsls	r3, r3, #2
   21810:	490a      	ldr	r1, [pc, #40]	; (2183c <nrfx_gpiote_trigger_disable+0x4c>)
   21812:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21816:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2181a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2181e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   21822:	f022 0203 	bic.w	r2, r2, #3
   21826:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2182a:	bd08      	pop	{r3, pc}
   2182c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   21830:	2100      	movs	r1, #0
   21832:	4610      	mov	r0, r2
   21834:	f008 bae6 	b.w	29e04 <nrf_gpio_cfg_sense_set>
   21838:	2000071c 	.word	0x2000071c
   2183c:	40006000 	.word	0x40006000

00021840 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21840:	4b0e      	ldr	r3, [pc, #56]	; (2187c <nrfx_gpiote_pin_uninit+0x3c>)
   21842:	f100 0208 	add.w	r2, r0, #8
{
   21846:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   21848:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   2184c:	07db      	lsls	r3, r3, #31
{
   2184e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   21850:	d511      	bpl.n	21876 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   21852:	f7ff ffcd 	bl	217f0 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   21856:	4620      	mov	r0, r4
   21858:	f7ff fdec 	bl	21434 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2185c:	a801      	add	r0, sp, #4
   2185e:	9401      	str	r4, [sp, #4]
   21860:	f7ff fd88 	bl	21374 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21864:	9b01      	ldr	r3, [sp, #4]
   21866:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2186a:	2202      	movs	r2, #2
   2186c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   21870:	4803      	ldr	r0, [pc, #12]	; (21880 <nrfx_gpiote_pin_uninit+0x40>)
}
   21872:	b002      	add	sp, #8
   21874:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   21876:	4803      	ldr	r0, [pc, #12]	; (21884 <nrfx_gpiote_pin_uninit+0x44>)
   21878:	e7fb      	b.n	21872 <nrfx_gpiote_pin_uninit+0x32>
   2187a:	bf00      	nop
   2187c:	2000071c 	.word	0x2000071c
   21880:	0bad0000 	.word	0x0bad0000
   21884:	0bad0004 	.word	0x0bad0004

00021888 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   21888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2188c:	4b64      	ldr	r3, [pc, #400]	; (21a20 <nrfx_gpiote_irq_handler+0x198>)
    return p_reg->INTENSET & mask;
   2188e:	4865      	ldr	r0, [pc, #404]	; (21a24 <nrfx_gpiote_irq_handler+0x19c>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   21890:	4965      	ldr	r1, [pc, #404]	; (21a28 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t status = 0;
   21892:	2600      	movs	r6, #0
{
   21894:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   21896:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   21898:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2189a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   2189c:	b135      	cbz	r5, 218ac <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2189e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
   218a2:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   218a4:	bf1e      	ittt	ne
   218a6:	601c      	strne	r4, [r3, #0]
   218a8:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   218aa:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   218ac:	3304      	adds	r3, #4
   218ae:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   218b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   218b4:	d1f1      	bne.n	2189a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   218b6:	f8df 816c 	ldr.w	r8, [pc, #364]	; 21a24 <nrfx_gpiote_irq_handler+0x19c>
   218ba:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   218be:	2b00      	cmp	r3, #0
   218c0:	f000 8091 	beq.w	219e6 <nrfx_gpiote_irq_handler+0x15e>
        *p_masks = gpio_regs[i]->LATCH;
   218c4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   218c8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   218cc:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   218ce:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   218d2:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
   218d6:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   218d8:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   218dc:	2700      	movs	r7, #0
            while (latch[i])
   218de:	f10d 0910 	add.w	r9, sp, #16
   218e2:	017b      	lsls	r3, r7, #5
   218e4:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   218e6:	f04f 0a01 	mov.w	sl, #1
   218ea:	e049      	b.n	21980 <nrfx_gpiote_irq_handler+0xf8>
                pin += 32 * i;
   218ec:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   218ee:	4a4f      	ldr	r2, [pc, #316]	; (21a2c <nrfx_gpiote_irq_handler+0x1a4>)
                uint32_t pin = NRF_CTZ(latch[i]);
   218f0:	fa94 f4a4 	rbit	r4, r4
   218f4:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
   218f8:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   218fa:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   218fe:	08e0      	lsrs	r0, r4, #3
   21900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   21904:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
   21906:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2190a:	fa0a fc02 	lsl.w	ip, sl, r2
   2190e:	f819 2000 	ldrb.w	r2, [r9, r0]
   21912:	ea22 020c 	bic.w	r2, r2, ip
   21916:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2191a:	a803      	add	r0, sp, #12
   2191c:	f3c3 0582 	ubfx	r5, r3, #2, #3
   21920:	0899      	lsrs	r1, r3, #2
   21922:	f7ff fd27 	bl	21374 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   21926:	9a03      	ldr	r2, [sp, #12]
   21928:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    if (is_level(trigger))
   2192c:	074b      	lsls	r3, r1, #29
   2192e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   21932:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   21934:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   21938:	d529      	bpl.n	2198e <nrfx_gpiote_irq_handler+0x106>
        call_handler(pin, trigger);
   2193a:	4620      	mov	r0, r4
   2193c:	4659      	mov	r1, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2193e:	b2d5      	uxtb	r5, r2
   21940:	f7ff fd30 	bl	213a4 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21944:	a803      	add	r0, sp, #12
   21946:	9403      	str	r4, [sp, #12]
   21948:	f7ff fd14 	bl	21374 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   2194c:	9b03      	ldr	r3, [sp, #12]
   2194e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21952:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   21956:	f3c3 4301 	ubfx	r3, r3, #16, #2
   2195a:	429d      	cmp	r5, r3
   2195c:	d107      	bne.n	2196e <nrfx_gpiote_irq_handler+0xe6>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2195e:	2100      	movs	r1, #0
   21960:	4620      	mov	r0, r4
   21962:	f008 fa4f 	bl	29e04 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   21966:	4629      	mov	r1, r5
   21968:	4620      	mov	r0, r4
   2196a:	f008 fa4b 	bl	29e04 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2196e:	a803      	add	r0, sp, #12
   21970:	9403      	str	r4, [sp, #12]
   21972:	f7ff fcff 	bl	21374 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   21976:	9b03      	ldr	r3, [sp, #12]
   21978:	fa0a f303 	lsl.w	r3, sl, r3
   2197c:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
   21980:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
   21984:	2c00      	cmp	r4, #0
   21986:	d1b1      	bne.n	218ec <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   21988:	b9cf      	cbnz	r7, 219be <nrfx_gpiote_irq_handler+0x136>
   2198a:	2701      	movs	r7, #1
   2198c:	e7a9      	b.n	218e2 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2198e:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   21990:	bf0c      	ite	eq
   21992:	2103      	moveq	r1, #3
   21994:	2102      	movne	r1, #2
   21996:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   21998:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
   2199a:	f008 fa33 	bl	29e04 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2199e:	2d03      	cmp	r5, #3
   219a0:	d004      	beq.n	219ac <nrfx_gpiote_irq_handler+0x124>
   219a2:	9a01      	ldr	r2, [sp, #4]
   219a4:	2a02      	cmp	r2, #2
   219a6:	d106      	bne.n	219b6 <nrfx_gpiote_irq_handler+0x12e>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   219a8:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   219aa:	d1e0      	bne.n	2196e <nrfx_gpiote_irq_handler+0xe6>
            call_handler(pin, trigger);
   219ac:	4659      	mov	r1, fp
   219ae:	4620      	mov	r0, r4
   219b0:	f7ff fcf8 	bl	213a4 <call_handler>
   219b4:	e7db      	b.n	2196e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   219b6:	2a03      	cmp	r2, #3
   219b8:	d1d9      	bne.n	2196e <nrfx_gpiote_irq_handler+0xe6>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   219ba:	2d02      	cmp	r5, #2
   219bc:	e7f5      	b.n	219aa <nrfx_gpiote_irq_handler+0x122>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   219be:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
   219c2:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   219c6:	491a      	ldr	r1, [pc, #104]	; (21a30 <nrfx_gpiote_irq_handler+0x1a8>)
   219c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   219cc:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   219d0:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
   219d2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   219d6:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
   219da:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
   219dc:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   219e0:	4313      	orrs	r3, r2
   219e2:	f47f af7b 	bne.w	218dc <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
   219e6:	2401      	movs	r4, #1
    while (mask)
   219e8:	b916      	cbnz	r6, 219f0 <nrfx_gpiote_irq_handler+0x168>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   219ea:	b007      	add	sp, #28
   219ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
   219f0:	fa96 f3a6 	rbit	r3, r6
   219f4:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   219f8:	fa04 f203 	lsl.w	r2, r4, r3
   219fc:	009b      	lsls	r3, r3, #2
   219fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   21a02:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   21a06:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   21a0a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   21a0e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   21a12:	f3c0 2005 	ubfx	r0, r0, #8, #6
   21a16:	f3c1 4101 	ubfx	r1, r1, #16, #2
   21a1a:	f7ff fcc3 	bl	213a4 <call_handler>
   21a1e:	e7e3      	b.n	219e8 <nrfx_gpiote_irq_handler+0x160>
   21a20:	40006100 	.word	0x40006100
   21a24:	40006000 	.word	0x40006000
   21a28:	40006120 	.word	0x40006120
   21a2c:	2000071c 	.word	0x2000071c
   21a30:	50000300 	.word	0x50000300

00021a34 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   21a34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   21a36:	4801      	ldr	r0, [pc, #4]	; (21a3c <nrfx_ppi_channel_alloc+0x8>)
   21a38:	f7ff bbd4 	b.w	211e4 <nrfx_flag32_alloc>
   21a3c:	20000798 	.word	0x20000798

00021a40 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   21a40:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21a42:	4c11      	ldr	r4, [pc, #68]	; (21a88 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   21a44:	4a11      	ldr	r2, [pc, #68]	; (21a8c <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   21a46:	4912      	ldr	r1, [pc, #72]	; (21a90 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   21a48:	2303      	movs	r3, #3
   21a4a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   21a4c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21a4e:	4b11      	ldr	r3, [pc, #68]	; (21a94 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   21a50:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   21a52:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   21a54:	f44f 6380 	mov.w	r3, #1024	; 0x400
   21a58:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   21a5a:	2300      	movs	r3, #0
   21a5c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   21a5e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21a60:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   21a62:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   21a64:	4a0c      	ldr	r2, [pc, #48]	; (21a98 <_DoInit+0x58>)
   21a66:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   21a68:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   21a6a:	2210      	movs	r2, #16
   21a6c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   21a6e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   21a70:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   21a72:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   21a74:	f009 f93f 	bl	2acf6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   21a78:	4908      	ldr	r1, [pc, #32]	; (21a9c <_DoInit+0x5c>)
   21a7a:	4620      	mov	r0, r4
   21a7c:	f009 f93b 	bl	2acf6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   21a80:	2320      	movs	r3, #32
   21a82:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   21a84:	bd10      	pop	{r4, pc}
   21a86:	bf00      	nop
   21a88:	200032f0 	.word	0x200032f0
   21a8c:	0002f22b 	.word	0x0002f22b
   21a90:	0002f234 	.word	0x0002f234
   21a94:	20003591 	.word	0x20003591
   21a98:	20003581 	.word	0x20003581
   21a9c:	0002f238 	.word	0x0002f238

00021aa0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   21aa4:	4f23      	ldr	r7, [pc, #140]	; (21b34 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   21aa6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21aaa:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   21aac:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21ab0:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   21ab2:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   21ab4:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   21ab6:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21ab8:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   21aba:	d834      	bhi.n	21b26 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   21abc:	f8d2 a020 	ldr.w	sl, [r2, #32]
   21ac0:	ebaa 0905 	sub.w	r9, sl, r5
   21ac4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   21ac8:	4294      	cmp	r4, r2
   21aca:	d811      	bhi.n	21af0 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   21acc:	f04f 0918 	mov.w	r9, #24
   21ad0:	fb06 9309 	mla	r3, r6, r9, r9
   21ad4:	443b      	add	r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21ad6:	4622      	mov	r2, r4
   21ad8:	6858      	ldr	r0, [r3, #4]
   21ada:	4641      	mov	r1, r8
   21adc:	4428      	add	r0, r5
   21ade:	f008 ffbc 	bl	2aa5a <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   21ae2:	fb09 7606 	mla	r6, r9, r6, r7
   21ae6:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   21ae8:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   21aea:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   21aec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   21af0:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   21af2:	429c      	cmp	r4, r3
   21af4:	d81b      	bhi.n	21b2e <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   21af6:	fb00 bb0b 	mla	fp, r0, fp, fp
   21afa:	44bb      	add	fp, r7
   21afc:	464a      	mov	r2, r9
   21afe:	f8db 0004 	ldr.w	r0, [fp, #4]
   21b02:	442c      	add	r4, r5
   21b04:	4428      	add	r0, r5
   21b06:	f008 ffa8 	bl	2aa5a <memcpy>
      if (NumBytes) {
   21b0a:	ebb4 040a 	subs.w	r4, r4, sl
   21b0e:	d006      	beq.n	21b1e <SEGGER_RTT_WriteSkipNoLock+0x7e>
   21b10:	f8db 0004 	ldr.w	r0, [fp, #4]
   21b14:	4622      	mov	r2, r4
   21b16:	eb08 0109 	add.w	r1, r8, r9
   21b1a:	f008 ff9e 	bl	2aa5a <memcpy>
      pRing->WrOff = NumBytes;
   21b1e:	2018      	movs	r0, #24
   21b20:	fb00 7606 	mla	r6, r0, r6, r7
   21b24:	e7e0      	b.n	21ae8 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   21b26:	3b01      	subs	r3, #1
   21b28:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   21b2a:	42a3      	cmp	r3, r4
   21b2c:	d2ce      	bcs.n	21acc <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   21b2e:	2000      	movs	r0, #0
   21b30:	e7dc      	b.n	21aec <SEGGER_RTT_WriteSkipNoLock+0x4c>
   21b32:	bf00      	nop
   21b34:	200032f0 	.word	0x200032f0

00021b38 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21b38:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   21b3a:	4b16      	ldr	r3, [pc, #88]	; (21b94 <SEGGER_RTT_WriteNoLock+0x5c>)
   21b3c:	2418      	movs	r4, #24
   21b3e:	fb00 4504 	mla	r5, r0, r4, r4
   21b42:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   21b44:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   21b48:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   21b4a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   21b4c:	2c01      	cmp	r4, #1
   21b4e:	d00e      	beq.n	21b6e <SEGGER_RTT_WriteNoLock+0x36>
   21b50:	2c02      	cmp	r4, #2
   21b52:	d018      	beq.n	21b86 <SEGGER_RTT_WriteNoLock+0x4e>
   21b54:	b9e4      	cbnz	r4, 21b90 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   21b56:	4628      	mov	r0, r5
   21b58:	f008 f963 	bl	29e22 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   21b5c:	4286      	cmp	r6, r0
   21b5e:	d804      	bhi.n	21b6a <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   21b60:	4632      	mov	r2, r6
   21b62:	4628      	mov	r0, r5
   21b64:	f008 f966 	bl	29e34 <_WriteNoCheck>
   21b68:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   21b6a:	4620      	mov	r0, r4
   21b6c:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   21b6e:	4628      	mov	r0, r5
   21b70:	f008 f957 	bl	29e22 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   21b74:	4286      	cmp	r6, r0
   21b76:	4634      	mov	r4, r6
   21b78:	bf28      	it	cs
   21b7a:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   21b7c:	4622      	mov	r2, r4
   21b7e:	4628      	mov	r0, r5
   21b80:	f008 f958 	bl	29e34 <_WriteNoCheck>
    break;
   21b84:	e7f1      	b.n	21b6a <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   21b86:	4628      	mov	r0, r5
}
   21b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   21b8c:	f008 b96f 	b.w	29e6e <_WriteBlocking>
  switch (pRing->Flags) {
   21b90:	2400      	movs	r4, #0
  return Status;
   21b92:	e7ea      	b.n	21b6a <SEGGER_RTT_WriteNoLock+0x32>
   21b94:	200032f0 	.word	0x200032f0

00021b98 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   21b98:	4b03      	ldr	r3, [pc, #12]	; (21ba8 <SEGGER_RTT_HasDataUp+0x10>)
   21b9a:	2218      	movs	r2, #24
   21b9c:	fb02 3300 	mla	r3, r2, r0, r3
   21ba0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   21ba2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   21ba4:	1a80      	subs	r0, r0, r2
   21ba6:	4770      	bx	lr
   21ba8:	200032f0 	.word	0x200032f0

00021bac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21bac:	4b0e      	ldr	r3, [pc, #56]	; (21be8 <z_sys_init_run_level+0x3c>)
{
   21bae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21bb0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   21bb4:	3001      	adds	r0, #1
   21bb6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   21bba:	42a6      	cmp	r6, r4
   21bbc:	d800      	bhi.n	21bc0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   21bbe:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   21bc0:	e9d4 3500 	ldrd	r3, r5, [r4]
   21bc4:	4628      	mov	r0, r5
   21bc6:	4798      	blx	r3
		if (dev != NULL) {
   21bc8:	b165      	cbz	r5, 21be4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   21bca:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   21bcc:	b130      	cbz	r0, 21bdc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   21bce:	2800      	cmp	r0, #0
   21bd0:	bfb8      	it	lt
   21bd2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   21bd4:	28ff      	cmp	r0, #255	; 0xff
   21bd6:	bfa8      	it	ge
   21bd8:	20ff      	movge	r0, #255	; 0xff
   21bda:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   21bdc:	785a      	ldrb	r2, [r3, #1]
   21bde:	f042 0201 	orr.w	r2, r2, #1
   21be2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   21be4:	3408      	adds	r4, #8
   21be6:	e7e8      	b.n	21bba <z_sys_init_run_level+0xe>
   21be8:	0002d2a4 	.word	0x0002d2a4

00021bec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   21bec:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   21bee:	4605      	mov	r5, r0
   21bf0:	b910      	cbnz	r0, 21bf8 <z_impl_device_get_binding+0xc>
		return NULL;
   21bf2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   21bf4:	4620      	mov	r0, r4
   21bf6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   21bf8:	7803      	ldrb	r3, [r0, #0]
   21bfa:	2b00      	cmp	r3, #0
   21bfc:	d0f9      	beq.n	21bf2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   21bfe:	4c0e      	ldr	r4, [pc, #56]	; (21c38 <z_impl_device_get_binding+0x4c>)
   21c00:	4e0e      	ldr	r6, [pc, #56]	; (21c3c <z_impl_device_get_binding+0x50>)
   21c02:	42b4      	cmp	r4, r6
   21c04:	d108      	bne.n	21c18 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c06:	4c0c      	ldr	r4, [pc, #48]	; (21c38 <z_impl_device_get_binding+0x4c>)
   21c08:	42b4      	cmp	r4, r6
   21c0a:	d0f2      	beq.n	21bf2 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21c0c:	4620      	mov	r0, r4
   21c0e:	f008 f95f 	bl	29ed0 <z_device_is_ready>
   21c12:	b950      	cbnz	r0, 21c2a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c14:	3418      	adds	r4, #24
   21c16:	e7f7      	b.n	21c08 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   21c18:	4620      	mov	r0, r4
   21c1a:	f008 f959 	bl	29ed0 <z_device_is_ready>
   21c1e:	b110      	cbz	r0, 21c26 <z_impl_device_get_binding+0x3a>
   21c20:	6823      	ldr	r3, [r4, #0]
   21c22:	42ab      	cmp	r3, r5
   21c24:	d0e6      	beq.n	21bf4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   21c26:	3418      	adds	r4, #24
   21c28:	e7eb      	b.n	21c02 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   21c2a:	6821      	ldr	r1, [r4, #0]
   21c2c:	4628      	mov	r0, r5
   21c2e:	f7df f8d8 	bl	de2 <strcmp>
   21c32:	2800      	cmp	r0, #0
   21c34:	d1ee      	bne.n	21c14 <z_impl_device_get_binding+0x28>
   21c36:	e7dd      	b.n	21bf4 <z_impl_device_get_binding+0x8>
   21c38:	0002b370 	.word	0x0002b370
   21c3c:	0002b400 	.word	0x0002b400

00021c40 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   21c40:	b510      	push	{r4, lr}
   21c42:	4604      	mov	r4, r0
   21c44:	b088      	sub	sp, #32
	z_impl_log_panic();
   21c46:	f7e4 f91f 	bl	5e88 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   21c4a:	4b07      	ldr	r3, [pc, #28]	; (21c68 <k_sys_fatal_error_handler+0x28>)
   21c4c:	9306      	str	r3, [sp, #24]
   21c4e:	2302      	movs	r3, #2
   21c50:	9301      	str	r3, [sp, #4]
   21c52:	9305      	str	r3, [sp, #20]
   21c54:	4805      	ldr	r0, [pc, #20]	; (21c6c <k_sys_fatal_error_handler+0x2c>)
   21c56:	2300      	movs	r3, #0
   21c58:	aa05      	add	r2, sp, #20
   21c5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21c5e:	f003 feaa 	bl	259b6 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   21c62:	4620      	mov	r0, r4
   21c64:	f008 f94d 	bl	29f02 <arch_system_halt>
   21c68:	0002f23f 	.word	0x0002f23f
   21c6c:	0002b71c 	.word	0x0002b71c

00021c70 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   21c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c74:	4605      	mov	r5, r0
   21c76:	b08e      	sub	sp, #56	; 0x38
   21c78:	460e      	mov	r6, r1
	__asm__ volatile(
   21c7a:	f04f 0320 	mov.w	r3, #32
   21c7e:	f3ef 8811 	mrs	r8, BASEPRI
   21c82:	f383 8812 	msr	BASEPRI_MAX, r3
   21c86:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   21c8a:	f001 f8eb 	bl	22e64 <z_impl_z_current_get>
   21c8e:	2d04      	cmp	r5, #4
   21c90:	bf96      	itet	ls
   21c92:	4b22      	ldrls	r3, [pc, #136]	; (21d1c <z_fatal_error+0xac>)
   21c94:	4b22      	ldrhi	r3, [pc, #136]	; (21d20 <z_fatal_error+0xb0>)
   21c96:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   21c9a:	4922      	ldr	r1, [pc, #136]	; (21d24 <z_fatal_error+0xb4>)
   21c9c:	9502      	str	r5, [sp, #8]
   21c9e:	2700      	movs	r7, #0
   21ca0:	e9cd 3703 	strd	r3, r7, [sp, #12]
   21ca4:	4b20      	ldr	r3, [pc, #128]	; (21d28 <z_fatal_error+0xb8>)
   21ca6:	4604      	mov	r4, r0
   21ca8:	e9cd 7300 	strd	r7, r3, [sp]
   21cac:	2201      	movs	r2, #1
   21cae:	463b      	mov	r3, r7
   21cb0:	4638      	mov	r0, r7
   21cb2:	f008 f917 	bl	29ee4 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   21cb6:	b17e      	cbz	r6, 21cd8 <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   21cb8:	69f3      	ldr	r3, [r6, #28]
   21cba:	f3c3 0308 	ubfx	r3, r3, #0, #9
   21cbe:	b15b      	cbz	r3, 21cd8 <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
   21cc0:	4b1a      	ldr	r3, [pc, #104]	; (21d2c <z_fatal_error+0xbc>)
   21cc2:	930c      	str	r3, [sp, #48]	; 0x30
   21cc4:	2302      	movs	r3, #2
   21cc6:	9307      	str	r3, [sp, #28]
   21cc8:	930b      	str	r3, [sp, #44]	; 0x2c
   21cca:	4816      	ldr	r0, [pc, #88]	; (21d24 <z_fatal_error+0xb4>)
   21ccc:	463b      	mov	r3, r7
   21cce:	aa0b      	add	r2, sp, #44	; 0x2c
   21cd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21cd4:	f003 fe6f 	bl	259b6 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   21cd8:	b12c      	cbz	r4, 21ce6 <z_fatal_error+0x76>
   21cda:	4620      	mov	r0, r4
   21cdc:	f008 f9b2 	bl	2a044 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   21ce0:	b108      	cbz	r0, 21ce6 <z_fatal_error+0x76>
   21ce2:	7803      	ldrb	r3, [r0, #0]
   21ce4:	b903      	cbnz	r3, 21ce8 <z_fatal_error+0x78>
		thread_name = "unknown";
   21ce6:	4812      	ldr	r0, [pc, #72]	; (21d30 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   21ce8:	4b12      	ldr	r3, [pc, #72]	; (21d34 <z_fatal_error+0xc4>)
   21cea:	9301      	str	r3, [sp, #4]
   21cec:	2300      	movs	r3, #0
   21cee:	e9cd 4002 	strd	r4, r0, [sp, #8]
   21cf2:	9300      	str	r3, [sp, #0]
   21cf4:	4618      	mov	r0, r3
   21cf6:	2201      	movs	r2, #1
   21cf8:	490a      	ldr	r1, [pc, #40]	; (21d24 <z_fatal_error+0xb4>)
   21cfa:	f008 f8f3 	bl	29ee4 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   21cfe:	4631      	mov	r1, r6
   21d00:	4628      	mov	r0, r5
   21d02:	f7ff ff9d 	bl	21c40 <k_sys_fatal_error_handler>
	__asm__ volatile(
   21d06:	f388 8811 	msr	BASEPRI, r8
   21d0a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   21d0e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   21d10:	b00e      	add	sp, #56	; 0x38
   21d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21d16:	f7e5 bacd 	b.w	72b4 <z_impl_k_thread_abort>
   21d1a:	bf00      	nop
   21d1c:	0002d2bc 	.word	0x0002d2bc
   21d20:	0002f24e 	.word	0x0002f24e
   21d24:	0002b71c 	.word	0x0002b71c
   21d28:	0002f264 	.word	0x0002f264
   21d2c:	0002f28c 	.word	0x0002f28c
   21d30:	0002f25c 	.word	0x0002f25c
   21d34:	0002f2ad 	.word	0x0002f2ad

00021d38 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   21d38:	b510      	push	{r4, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   21d3a:	2300      	movs	r3, #0
{
   21d3c:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
   21d3e:	2201      	movs	r2, #1
   21d40:	e9cd 2304 	strd	r2, r3, [sp, #16]
   21d44:	220f      	movs	r2, #15
   21d46:	e9cd 3202 	strd	r3, r2, [sp, #8]
   21d4a:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   21d4c:	4c0b      	ldr	r4, [pc, #44]	; (21d7c <init_idle_thread+0x44>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21d4e:	4b0c      	ldr	r3, [pc, #48]	; (21d80 <init_idle_thread+0x48>)
	z_setup_new_thread(thread, stack,
   21d50:	490c      	ldr	r1, [pc, #48]	; (21d84 <init_idle_thread+0x4c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21d52:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   21d54:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   21d58:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   21d5c:	f44f 72a0 	mov.w	r2, #320	; 0x140
   21d60:	9300      	str	r3, [sp, #0]
   21d62:	fb02 1100 	mla	r1, r2, r0, r1
   21d66:	4b08      	ldr	r3, [pc, #32]	; (21d88 <init_idle_thread+0x50>)
   21d68:	4620      	mov	r0, r4
   21d6a:	f000 f90b 	bl	21f84 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   21d6e:	7b63      	ldrb	r3, [r4, #13]
   21d70:	f023 0304 	bic.w	r3, r3, #4
   21d74:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   21d76:	b006      	add	sp, #24
   21d78:	bd10      	pop	{r4, pc}
   21d7a:	bf00      	nop
   21d7c:	20001c68 	.word	0x20001c68
   21d80:	20003398 	.word	0x20003398
   21d84:	20005c18 	.word	0x20005c18
   21d88:	000220f5 	.word	0x000220f5

00021d8c <bg_thread_main>:
{
   21d8c:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   21d8e:	4b0a      	ldr	r3, [pc, #40]	; (21db8 <bg_thread_main+0x2c>)
   21d90:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21d92:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   21d94:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   21d96:	f7ff ff09 	bl	21bac <z_sys_init_run_level>
	boot_banner();
   21d9a:	f001 fb6b 	bl	23474 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   21d9e:	2003      	movs	r0, #3
   21da0:	f7ff ff04 	bl	21bac <z_sys_init_run_level>
	z_init_static_threads();
   21da4:	f000 f94a 	bl	2203c <z_init_static_threads>
	main();
   21da8:	f003 f82f 	bl	24e0a <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   21dac:	4a03      	ldr	r2, [pc, #12]	; (21dbc <bg_thread_main+0x30>)
   21dae:	7b13      	ldrb	r3, [r2, #12]
   21db0:	f023 0301 	bic.w	r3, r3, #1
   21db4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   21db6:	bd08      	pop	{r3, pc}
   21db8:	20003991 	.word	0x20003991
   21dbc:	20001ce8 	.word	0x20001ce8

00021dc0 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   21dc0:	4802      	ldr	r0, [pc, #8]	; (21dcc <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   21dc2:	4a03      	ldr	r2, [pc, #12]	; (21dd0 <z_bss_zero+0x10>)
   21dc4:	2100      	movs	r1, #0
   21dc6:	1a12      	subs	r2, r2, r0
   21dc8:	f008 be68 	b.w	2aa9c <memset>
   21dcc:	20000d80 	.word	0x20000d80
   21dd0:	20003994 	.word	0x20003994

00021dd4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   21dd4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   21dd6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 21ea0 <z_cstart+0xcc>
   21dda:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   21ddc:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   21de0:	4d30      	ldr	r5, [pc, #192]	; (21ea4 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   21de2:	4e31      	ldr	r6, [pc, #196]	; (21ea8 <z_cstart+0xd4>)
   21de4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21de6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 21eac <z_cstart+0xd8>
   21dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   21dee:	2400      	movs	r4, #0
   21df0:	616b      	str	r3, [r5, #20]
   21df2:	23e0      	movs	r3, #224	; 0xe0
   21df4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   21df8:	77ec      	strb	r4, [r5, #31]
   21dfa:	762c      	strb	r4, [r5, #24]
   21dfc:	766c      	strb	r4, [r5, #25]
   21dfe:	76ac      	strb	r4, [r5, #26]
   21e00:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   21e04:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   21e06:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   21e0a:	626b      	str	r3, [r5, #36]	; 0x24
   21e0c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   21e10:	f7e5 fa1a 	bl	7248 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   21e14:	f7e4 fdb6 	bl	6984 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   21e18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21e1c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   21e1e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   21e20:	f7e5 fae2 	bl	73e8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   21e24:	f7e5 fa58 	bl	72d8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   21e28:	f7e3 ff38 	bl	5c9c <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   21e2c:	f240 1301 	movw	r3, #257	; 0x101
   21e30:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   21e34:	ab06      	add	r3, sp, #24
   21e36:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   21e38:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   21e3c:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   21e3e:	f008 f846 	bl	29ece <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   21e42:	4620      	mov	r0, r4
   21e44:	f7ff feb2 	bl	21bac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21e48:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   21e4a:	4d19      	ldr	r5, [pc, #100]	; (21eb0 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   21e4c:	f7ff feae 	bl	21bac <z_sys_init_run_level>
	z_sched_init();
   21e50:	f000 ff5a 	bl	22d08 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21e54:	4b17      	ldr	r3, [pc, #92]	; (21eb4 <z_cstart+0xe0>)
   21e56:	9305      	str	r3, [sp, #20]
   21e58:	2301      	movs	r3, #1
   21e5a:	4917      	ldr	r1, [pc, #92]	; (21eb8 <z_cstart+0xe4>)
   21e5c:	9400      	str	r4, [sp, #0]
   21e5e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   21e62:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21e66:	464b      	mov	r3, r9
   21e68:	e9cd 4401 	strd	r4, r4, [sp, #4]
   21e6c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   21e6e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   21e70:	f000 f888 	bl	21f84 <z_setup_new_thread>
   21e74:	7b6a      	ldrb	r2, [r5, #13]
   21e76:	4607      	mov	r7, r0
   21e78:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   21e7c:	4628      	mov	r0, r5
   21e7e:	736a      	strb	r2, [r5, #13]
   21e80:	f008 fb34 	bl	2a4ec <z_ready_thread>
		init_idle_thread(i);
   21e84:	4620      	mov	r0, r4
   21e86:	f7ff ff57 	bl	21d38 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   21e8a:	4b0c      	ldr	r3, [pc, #48]	; (21ebc <z_cstart+0xe8>)
   21e8c:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21e8e:	464a      	mov	r2, r9
   21e90:	4639      	mov	r1, r7
   21e92:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   21e94:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   21e96:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   21e9a:	f7e4 fee1 	bl	6c60 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   21e9e:	bf00      	nop
   21ea0:	20006558 	.word	0x20006558
   21ea4:	e000ed00 	.word	0xe000ed00
   21ea8:	20003398 	.word	0x20003398
   21eac:	00021d8d 	.word	0x00021d8d
   21eb0:	20001ce8 	.word	0x20001ce8
   21eb4:	0002f30f 	.word	0x0002f30f
   21eb8:	20005818 	.word	0x20005818
   21ebc:	20001c68 	.word	0x20001c68

00021ec0 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   21ec0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21ec2:	4c06      	ldr	r4, [pc, #24]	; (21edc <statics_init+0x1c>)
   21ec4:	4d06      	ldr	r5, [pc, #24]	; (21ee0 <statics_init+0x20>)
   21ec6:	42ac      	cmp	r4, r5
   21ec8:	d301      	bcc.n	21ece <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   21eca:	2000      	movs	r0, #0
   21ecc:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   21ece:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   21ed2:	4620      	mov	r0, r4
   21ed4:	f008 f81e 	bl	29f14 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   21ed8:	3414      	adds	r4, #20
   21eda:	e7f4      	b.n	21ec6 <statics_init+0x6>
   21edc:	20000b34 	.word	0x20000b34
   21ee0:	20000b34 	.word	0x20000b34

00021ee4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   21ee4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21ee6:	4b0e      	ldr	r3, [pc, #56]	; (21f20 <init_mem_slab_module+0x3c>)
   21ee8:	4c0e      	ldr	r4, [pc, #56]	; (21f24 <init_mem_slab_module+0x40>)
   21eea:	42a3      	cmp	r3, r4
   21eec:	d301      	bcc.n	21ef2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   21eee:	2000      	movs	r0, #0
	return rc;
}
   21ef0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   21ef2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   21ef6:	ea41 0200 	orr.w	r2, r1, r0
   21efa:	f012 0203 	ands.w	r2, r2, #3
   21efe:	d10b      	bne.n	21f18 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   21f00:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   21f02:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f04:	42aa      	cmp	r2, r5
   21f06:	d101      	bne.n	21f0c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   21f08:	331c      	adds	r3, #28
   21f0a:	e7ee      	b.n	21eea <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   21f0c:	695e      	ldr	r6, [r3, #20]
   21f0e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   21f10:	3201      	adds	r2, #1
		slab->free_list = p;
   21f12:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   21f14:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   21f16:	e7f5      	b.n	21f04 <init_mem_slab_module+0x20>
	return rc;
   21f18:	f06f 0015 	mvn.w	r0, #21
   21f1c:	e7e8      	b.n	21ef0 <init_mem_slab_module+0xc>
   21f1e:	bf00      	nop
   21f20:	20000ae0 	.word	0x20000ae0
   21f24:	20000b34 	.word	0x20000b34

00021f28 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   21f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   21f2a:	460c      	mov	r4, r1
	__asm__ volatile(
   21f2c:	f04f 0520 	mov.w	r5, #32
   21f30:	f3ef 8111 	mrs	r1, BASEPRI
   21f34:	f385 8812 	msr	BASEPRI_MAX, r5
   21f38:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   21f3c:	6945      	ldr	r5, [r0, #20]
   21f3e:	b15d      	cbz	r5, 21f58 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   21f40:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   21f42:	682b      	ldr	r3, [r5, #0]
   21f44:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   21f46:	6983      	ldr	r3, [r0, #24]
   21f48:	3301      	adds	r3, #1
   21f4a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   21f4c:	2000      	movs	r0, #0
	__asm__ volatile(
   21f4e:	f381 8811 	msr	BASEPRI, r1
   21f52:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   21f56:	e011      	b.n	21f7c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   21f58:	ea52 0c03 	orrs.w	ip, r2, r3
   21f5c:	d103      	bne.n	21f66 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   21f5e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   21f60:	f06f 000b 	mvn.w	r0, #11
   21f64:	e7f3      	b.n	21f4e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   21f66:	e9cd 2300 	strd	r2, r3, [sp]
   21f6a:	4602      	mov	r2, r0
   21f6c:	3008      	adds	r0, #8
   21f6e:	f000 fe21 	bl	22bb4 <z_pend_curr>
		if (result == 0) {
   21f72:	b918      	cbnz	r0, 21f7c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   21f74:	4b02      	ldr	r3, [pc, #8]	; (21f80 <k_mem_slab_alloc+0x58>)
   21f76:	689b      	ldr	r3, [r3, #8]
   21f78:	695b      	ldr	r3, [r3, #20]
   21f7a:	6023      	str	r3, [r4, #0]
}
   21f7c:	b003      	add	sp, #12
   21f7e:	bd30      	pop	{r4, r5, pc}
   21f80:	20003398 	.word	0x20003398

00021f84 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   21f84:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   21f88:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   21f8a:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   21f8c:	2604      	movs	r6, #4
   21f8e:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   21f90:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   21f92:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   21f94:	f100 0558 	add.w	r5, r0, #88	; 0x58
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21f98:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   21f9a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21f9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   21fa0:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   21fa2:	f026 0607 	bic.w	r6, r6, #7
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   21fa6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   21faa:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   21fae:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   21fb0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   21fb2:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21fb4:	9202      	str	r2, [sp, #8]
   21fb6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   21fb8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   21fba:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   21fc0:	9200      	str	r2, [sp, #0]
   21fc2:	4642      	mov	r2, r8
{
   21fc4:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   21fc6:	f7e4 fe2f 	bl	6c28 <arch_new_thread>
	if (!_current) {
   21fca:	4b05      	ldr	r3, [pc, #20]	; (21fe0 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
   21fcc:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   21fce:	689b      	ldr	r3, [r3, #8]
   21fd0:	b103      	cbz	r3, 21fd4 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   21fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   21fd4:	6763      	str	r3, [r4, #116]	; 0x74
}
   21fd6:	4640      	mov	r0, r8
   21fd8:	b004      	add	sp, #16
   21fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21fde:	bf00      	nop
   21fe0:	20003398 	.word	0x20003398

00021fe4 <z_impl_k_thread_create>:
{
   21fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   21fe6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21fe8:	2700      	movs	r7, #0
   21fea:	9705      	str	r7, [sp, #20]
   21fec:	9f10      	ldr	r7, [sp, #64]	; 0x40
   21fee:	9704      	str	r7, [sp, #16]
   21ff0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   21ff2:	9703      	str	r7, [sp, #12]
   21ff4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   21ff6:	9702      	str	r7, [sp, #8]
{
   21ff8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   21ffc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   21ffe:	9701      	str	r7, [sp, #4]
   22000:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   22002:	9700      	str	r7, [sp, #0]
{
   22004:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   22006:	f7ff ffbd 	bl	21f84 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   2200a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2200e:	bf08      	it	eq
   22010:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   22014:	d005      	beq.n	22022 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   22016:	ea55 0306 	orrs.w	r3, r5, r6
   2201a:	d105      	bne.n	22028 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   2201c:	4620      	mov	r0, r4
   2201e:	f000 fd6d 	bl	22afc <z_sched_start>
}
   22022:	4620      	mov	r0, r4
   22024:	b007      	add	sp, #28
   22026:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22028:	4903      	ldr	r1, [pc, #12]	; (22038 <z_impl_k_thread_create+0x54>)
   2202a:	4632      	mov	r2, r6
   2202c:	462b      	mov	r3, r5
   2202e:	f104 0018 	add.w	r0, r4, #24
   22032:	f000 fff5 	bl	23020 <z_add_timeout>
   22036:	e7f4      	b.n	22022 <z_impl_k_thread_create+0x3e>
   22038:	0002a50d 	.word	0x0002a50d

0002203c <z_init_static_threads>:
{
   2203c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22040:	4c29      	ldr	r4, [pc, #164]	; (220e8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   22042:	4d2a      	ldr	r5, [pc, #168]	; (220ec <z_init_static_threads+0xb0>)
{
   22044:	b087      	sub	sp, #28
   22046:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   22048:	42ae      	cmp	r6, r5
   2204a:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2204e:	d30f      	bcc.n	22070 <z_init_static_threads+0x34>
	k_sched_lock();
   22050:	f000 fc70 	bl	22934 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   22054:	4c24      	ldr	r4, [pc, #144]	; (220e8 <z_init_static_threads+0xac>)
   22056:	f8df 9098 	ldr.w	r9, [pc, #152]	; 220f0 <z_init_static_threads+0xb4>
   2205a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2205e:	f240 37e7 	movw	r7, #999	; 0x3e7
   22062:	42ac      	cmp	r4, r5
   22064:	d320      	bcc.n	220a8 <z_init_static_threads+0x6c>
}
   22066:	b007      	add	sp, #28
   22068:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2206c:	f000 be30 	b.w	22cd0 <k_sched_unlock>
		z_setup_new_thread(
   22070:	f854 3c04 	ldr.w	r3, [r4, #-4]
   22074:	9305      	str	r3, [sp, #20]
   22076:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2207a:	9304      	str	r3, [sp, #16]
   2207c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   22080:	9303      	str	r3, [sp, #12]
   22082:	f854 3c18 	ldr.w	r3, [r4, #-24]
   22086:	9302      	str	r3, [sp, #8]
   22088:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2208c:	9301      	str	r3, [sp, #4]
   2208e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   22092:	9300      	str	r3, [sp, #0]
   22094:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   22098:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2209c:	f7ff ff72 	bl	21f84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   220a0:	f854 3c30 	ldr.w	r3, [r4, #-48]
   220a4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   220a6:	e7ce      	b.n	22046 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   220a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   220aa:	1c5a      	adds	r2, r3, #1
   220ac:	d00d      	beq.n	220ca <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   220ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   220b2:	2100      	movs	r1, #0
   220b4:	4638      	mov	r0, r7
   220b6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   220ba:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   220be:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   220c2:	d104      	bne.n	220ce <z_init_static_threads+0x92>
	z_sched_start(thread);
   220c4:	4640      	mov	r0, r8
   220c6:	f000 fd19 	bl	22afc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   220ca:	3430      	adds	r4, #48	; 0x30
   220cc:	e7c9      	b.n	22062 <z_init_static_threads+0x26>
   220ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   220d2:	2300      	movs	r3, #0
   220d4:	f7de fc52 	bl	97c <__aeabi_uldivmod>
   220d8:	4602      	mov	r2, r0
   220da:	460b      	mov	r3, r1
   220dc:	f108 0018 	add.w	r0, r8, #24
   220e0:	4649      	mov	r1, r9
   220e2:	f000 ff9d 	bl	23020 <z_add_timeout>
   220e6:	e7f0      	b.n	220ca <z_init_static_threads+0x8e>
   220e8:	20000a50 	.word	0x20000a50
   220ec:	20000ae0 	.word	0x20000ae0
   220f0:	0002a50d 	.word	0x0002a50d

000220f4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   220f4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   220f6:	4c0b      	ldr	r4, [pc, #44]	; (22124 <idle+0x30>)
	return !z_sys_post_kernel;
   220f8:	4d0b      	ldr	r5, [pc, #44]	; (22128 <idle+0x34>)
	__asm__ volatile(
   220fa:	f04f 0220 	mov.w	r2, #32
   220fe:	f3ef 8311 	mrs	r3, BASEPRI
   22102:	f382 8812 	msr	BASEPRI_MAX, r2
   22106:	f3bf 8f6f 	isb	sy
   2210a:	f008 fabb 	bl	2a684 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2210e:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   22110:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   22112:	b913      	cbnz	r3, 2211a <idle+0x26>
	arch_cpu_idle();
   22114:	f7e4 fc3c 	bl	6990 <arch_cpu_idle>
}
   22118:	e7ef      	b.n	220fa <idle+0x6>
   2211a:	f7e4 fa33 	bl	6584 <pm_system_suspend>
   2211e:	2800      	cmp	r0, #0
   22120:	d1eb      	bne.n	220fa <idle+0x6>
   22122:	e7f7      	b.n	22114 <idle+0x20>
   22124:	20003398 	.word	0x20003398
   22128:	20003991 	.word	0x20003991

0002212c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   2212c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22130:	4604      	mov	r4, r0
   22132:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   22134:	f100 0808 	add.w	r8, r0, #8
   22138:	f04f 0120 	mov.w	r1, #32
   2213c:	f3ef 8711 	mrs	r7, BASEPRI
   22140:	f381 8812 	msr	BASEPRI_MAX, r1
   22144:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   22148:	6a05      	ldr	r5, [r0, #32]
   2214a:	68c1      	ldr	r1, [r0, #12]
   2214c:	428d      	cmp	r5, r1
   2214e:	d22f      	bcs.n	221b0 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22150:	f008 fa3d 	bl	2a5ce <z_unpend_first_thread>
		if (pending_thread != NULL) {
   22154:	68a2      	ldr	r2, [r4, #8]
   22156:	4605      	mov	r5, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22158:	4631      	mov	r1, r6
   2215a:	b178      	cbz	r0, 2217c <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   2215c:	2400      	movs	r4, #0
   2215e:	6940      	ldr	r0, [r0, #20]
   22160:	f008 fc7b 	bl	2aa5a <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22164:	4628      	mov	r0, r5
   22166:	67ec      	str	r4, [r5, #124]	; 0x7c
   22168:	f008 f9c0 	bl	2a4ec <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2216c:	4640      	mov	r0, r8
   2216e:	4639      	mov	r1, r7
   22170:	f000 fbce 	bl	22910 <z_reschedule>
			return 0;
   22174:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22176:	b002      	add	sp, #8
   22178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2217c:	69e0      	ldr	r0, [r4, #28]
   2217e:	f008 fc6c 	bl	2aa5a <memcpy>
			msgq->write_ptr += msgq->msg_size;
   22182:	69e3      	ldr	r3, [r4, #28]
   22184:	68a2      	ldr	r2, [r4, #8]
   22186:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22188:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   2218a:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   2218c:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   2218e:	bf04      	itt	eq
   22190:	6923      	ldreq	r3, [r4, #16]
   22192:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   22194:	6a23      	ldr	r3, [r4, #32]
   22196:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   22198:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   2219c:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   2219e:	2110      	movs	r1, #16
   221a0:	f008 fc36 	bl	2aa10 <z_handle_obj_poll_events>
		result = 0;
   221a4:	2000      	movs	r0, #0
	__asm__ volatile(
   221a6:	f387 8811 	msr	BASEPRI, r7
   221aa:	f3bf 8f6f 	isb	sy
	return result;
   221ae:	e7e2      	b.n	22176 <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   221b0:	ea52 0103 	orrs.w	r1, r2, r3
   221b4:	d00a      	beq.n	221cc <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   221b6:	4907      	ldr	r1, [pc, #28]	; (221d4 <z_impl_k_msgq_put+0xa8>)
   221b8:	6889      	ldr	r1, [r1, #8]
   221ba:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   221bc:	e9cd 2300 	strd	r2, r3, [sp]
   221c0:	4639      	mov	r1, r7
   221c2:	4602      	mov	r2, r0
   221c4:	4640      	mov	r0, r8
   221c6:	f000 fcf5 	bl	22bb4 <z_pend_curr>
		return result;
   221ca:	e7d4      	b.n	22176 <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   221cc:	f06f 0022 	mvn.w	r0, #34	; 0x22
   221d0:	e7e9      	b.n	221a6 <z_impl_k_msgq_put+0x7a>
   221d2:	bf00      	nop
   221d4:	20003398 	.word	0x20003398

000221d8 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   221d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   221da:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   221dc:	f104 0708 	add.w	r7, r4, #8
{
   221e0:	4608      	mov	r0, r1
	__asm__ volatile(
   221e2:	f04f 0120 	mov.w	r1, #32
   221e6:	f3ef 8611 	mrs	r6, BASEPRI
   221ea:	f381 8812 	msr	BASEPRI_MAX, r1
   221ee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   221f2:	6a21      	ldr	r1, [r4, #32]
   221f4:	2900      	cmp	r1, #0
   221f6:	d031      	beq.n	2225c <z_impl_k_msgq_get+0x84>
   221f8:	68a2      	ldr	r2, [r4, #8]
   221fa:	69a1      	ldr	r1, [r4, #24]
   221fc:	f008 fc2d 	bl	2aa5a <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   22200:	69a3      	ldr	r3, [r4, #24]
   22202:	68a2      	ldr	r2, [r4, #8]
   22204:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   22206:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   22208:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   2220a:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   2220c:	bf04      	itt	eq
   2220e:	6923      	ldreq	r3, [r4, #16]
   22210:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   22212:	6a23      	ldr	r3, [r4, #32]
   22214:	3b01      	subs	r3, #1
   22216:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   22218:	4620      	mov	r0, r4
   2221a:	f008 f9d8 	bl	2a5ce <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2221e:	4605      	mov	r5, r0
   22220:	b360      	cbz	r0, 2227c <z_impl_k_msgq_get+0xa4>
   22222:	6941      	ldr	r1, [r0, #20]
   22224:	68a2      	ldr	r2, [r4, #8]
   22226:	69e0      	ldr	r0, [r4, #28]
   22228:	f008 fc17 	bl	2aa5a <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2222c:	69e3      	ldr	r3, [r4, #28]
   2222e:	68a2      	ldr	r2, [r4, #8]
   22230:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   22232:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   22234:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   22236:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   22238:	bf04      	itt	eq
   2223a:	6923      	ldreq	r3, [r4, #16]
   2223c:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   2223e:	6a23      	ldr	r3, [r4, #32]
   22240:	3301      	adds	r3, #1
   22242:	6223      	str	r3, [r4, #32]
   22244:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   22246:	4628      	mov	r0, r5
   22248:	67ec      	str	r4, [r5, #124]	; 0x7c
   2224a:	f008 f94f 	bl	2a4ec <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2224e:	4638      	mov	r0, r7
   22250:	4631      	mov	r1, r6
   22252:	f000 fb5d 	bl	22910 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   22256:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   22258:	b003      	add	sp, #12
   2225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2225c:	ea52 0103 	orrs.w	r1, r2, r3
   22260:	d00a      	beq.n	22278 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   22262:	4909      	ldr	r1, [pc, #36]	; (22288 <z_impl_k_msgq_get+0xb0>)
   22264:	6889      	ldr	r1, [r1, #8]
   22266:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   22268:	e9cd 2300 	strd	r2, r3, [sp]
   2226c:	4631      	mov	r1, r6
   2226e:	4622      	mov	r2, r4
   22270:	4638      	mov	r0, r7
   22272:	f000 fc9f 	bl	22bb4 <z_pend_curr>
		return result;
   22276:	e7ef      	b.n	22258 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   22278:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   2227c:	f386 8811 	msr	BASEPRI, r6
   22280:	f3bf 8f6f 	isb	sy
	return result;
   22284:	e7e8      	b.n	22258 <z_impl_k_msgq_get+0x80>
   22286:	bf00      	nop
   22288:	20003398 	.word	0x20003398

0002228c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2228c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   22290:	4604      	mov	r4, r0
   22292:	4617      	mov	r7, r2
   22294:	461e      	mov	r6, r3
	__asm__ volatile(
   22296:	f04f 0320 	mov.w	r3, #32
   2229a:	f3ef 8811 	mrs	r8, BASEPRI
   2229e:	f383 8812 	msr	BASEPRI_MAX, r3
   222a2:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   222a6:	68c3      	ldr	r3, [r0, #12]
   222a8:	4a32      	ldr	r2, [pc, #200]	; (22374 <z_impl_k_mutex_lock+0xe8>)
   222aa:	b16b      	cbz	r3, 222c8 <z_impl_k_mutex_lock+0x3c>
   222ac:	6880      	ldr	r0, [r0, #8]
   222ae:	6891      	ldr	r1, [r2, #8]
   222b0:	4288      	cmp	r0, r1
   222b2:	d019      	beq.n	222e8 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   222b4:	ea57 0306 	orrs.w	r3, r7, r6
   222b8:	d118      	bne.n	222ec <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   222ba:	f388 8811 	msr	BASEPRI, r8
   222be:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   222c2:	f06f 000f 	mvn.w	r0, #15
   222c6:	e00c      	b.n	222e2 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   222c8:	6891      	ldr	r1, [r2, #8]
   222ca:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   222ce:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   222d0:	3301      	adds	r3, #1
   222d2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   222d4:	6893      	ldr	r3, [r2, #8]
   222d6:	60a3      	str	r3, [r4, #8]
   222d8:	f388 8811 	msr	BASEPRI, r8
   222dc:	f3bf 8f6f 	isb	sy
		return 0;
   222e0:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   222e2:	b002      	add	sp, #8
   222e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   222e8:	6921      	ldr	r1, [r4, #16]
   222ea:	e7f0      	b.n	222ce <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   222ec:	f991 100e 	ldrsb.w	r1, [r1, #14]
   222f0:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   222f4:	4299      	cmp	r1, r3
   222f6:	bfa8      	it	ge
   222f8:	4619      	movge	r1, r3
   222fa:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   222fe:	4291      	cmp	r1, r2
   22300:	bfb8      	it	lt
   22302:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   22304:	428b      	cmp	r3, r1
   22306:	dd2e      	ble.n	22366 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   22308:	f007 fec7 	bl	2a09a <adjust_owner_prio.isra.0>
   2230c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2230e:	e9cd 7600 	strd	r7, r6, [sp]
   22312:	4819      	ldr	r0, [pc, #100]	; (22378 <z_impl_k_mutex_lock+0xec>)
   22314:	4622      	mov	r2, r4
   22316:	4641      	mov	r1, r8
   22318:	f000 fc4c 	bl	22bb4 <z_pend_curr>
	if (got_mutex == 0) {
   2231c:	2800      	cmp	r0, #0
   2231e:	d0e0      	beq.n	222e2 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   22320:	f04f 0320 	mov.w	r3, #32
   22324:	f3ef 8611 	mrs	r6, BASEPRI
   22328:	f383 8812 	msr	BASEPRI_MAX, r3
   2232c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   22330:	6823      	ldr	r3, [r4, #0]
   22332:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22334:	429c      	cmp	r4, r3
   22336:	d00a      	beq.n	2234e <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   22338:	b14b      	cbz	r3, 2234e <z_impl_k_mutex_lock+0xc2>
   2233a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2233e:	4299      	cmp	r1, r3
   22340:	bfa8      	it	ge
   22342:	4619      	movge	r1, r3
   22344:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   22348:	4299      	cmp	r1, r3
   2234a:	bfb8      	it	lt
   2234c:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2234e:	68a0      	ldr	r0, [r4, #8]
   22350:	f007 fea3 	bl	2a09a <adjust_owner_prio.isra.0>
   22354:	b900      	cbnz	r0, 22358 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   22356:	b145      	cbz	r5, 2236a <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   22358:	4807      	ldr	r0, [pc, #28]	; (22378 <z_impl_k_mutex_lock+0xec>)
   2235a:	4631      	mov	r1, r6
   2235c:	f000 fad8 	bl	22910 <z_reschedule>
	return -EAGAIN;
   22360:	f06f 000a 	mvn.w	r0, #10
   22364:	e7bd      	b.n	222e2 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   22366:	2500      	movs	r5, #0
   22368:	e7d1      	b.n	2230e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   2236a:	f386 8811 	msr	BASEPRI, r6
   2236e:	f3bf 8f6f 	isb	sy
   22372:	e7f5      	b.n	22360 <z_impl_k_mutex_lock+0xd4>
   22374:	20003398 	.word	0x20003398
   22378:	20003992 	.word	0x20003992

0002237c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2237c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   2237e:	6883      	ldr	r3, [r0, #8]
{
   22380:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   22382:	2b00      	cmp	r3, #0
   22384:	d032      	beq.n	223ec <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   22386:	4a1c      	ldr	r2, [pc, #112]	; (223f8 <z_impl_k_mutex_unlock+0x7c>)
   22388:	6892      	ldr	r2, [r2, #8]
   2238a:	4293      	cmp	r3, r2
   2238c:	d131      	bne.n	223f2 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   2238e:	7bda      	ldrb	r2, [r3, #15]
   22390:	3a01      	subs	r2, #1
   22392:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   22394:	68c3      	ldr	r3, [r0, #12]
   22396:	2b01      	cmp	r3, #1
   22398:	d905      	bls.n	223a6 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   2239a:	3b01      	subs	r3, #1
   2239c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2239e:	f000 fc97 	bl	22cd0 <k_sched_unlock>

	return 0;
   223a2:	2000      	movs	r0, #0
}
   223a4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   223a6:	f04f 0320 	mov.w	r3, #32
   223aa:	f3ef 8511 	mrs	r5, BASEPRI
   223ae:	f383 8812 	msr	BASEPRI_MAX, r3
   223b2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   223b6:	6901      	ldr	r1, [r0, #16]
   223b8:	6880      	ldr	r0, [r0, #8]
   223ba:	f007 fe6e 	bl	2a09a <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   223be:	4620      	mov	r0, r4
   223c0:	f008 f905 	bl	2a5ce <z_unpend_first_thread>
	mutex->owner = new_owner;
   223c4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   223c6:	b158      	cbz	r0, 223e0 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   223c8:	f990 200e 	ldrsb.w	r2, [r0, #14]
   223cc:	6122      	str	r2, [r4, #16]
   223ce:	2200      	movs	r2, #0
   223d0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   223d2:	f008 f88b 	bl	2a4ec <z_ready_thread>
		z_reschedule(&lock, key);
   223d6:	4809      	ldr	r0, [pc, #36]	; (223fc <z_impl_k_mutex_unlock+0x80>)
   223d8:	4629      	mov	r1, r5
   223da:	f000 fa99 	bl	22910 <z_reschedule>
   223de:	e7de      	b.n	2239e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   223e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   223e2:	f385 8811 	msr	BASEPRI, r5
   223e6:	f3bf 8f6f 	isb	sy
   223ea:	e7d8      	b.n	2239e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   223ec:	f06f 0015 	mvn.w	r0, #21
   223f0:	e7d8      	b.n	223a4 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   223f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   223f6:	e7d5      	b.n	223a4 <z_impl_k_mutex_unlock+0x28>
   223f8:	20003398 	.word	0x20003398
   223fc:	20003992 	.word	0x20003992

00022400 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   22400:	b537      	push	{r0, r1, r2, r4, r5, lr}
   22402:	4611      	mov	r1, r2
	__asm__ volatile(
   22404:	f04f 0220 	mov.w	r2, #32
   22408:	f3ef 8511 	mrs	r5, BASEPRI
   2240c:	f382 8812 	msr	BASEPRI_MAX, r2
   22410:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   22414:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   22416:	b19c      	cbz	r4, 22440 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   22418:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   2241a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2241c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   22420:	4294      	cmp	r4, r2
	list->head = node;
   22422:	6003      	str	r3, [r0, #0]
	list->tail = node;
   22424:	bf08      	it	eq
   22426:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   22428:	2101      	movs	r1, #1
   2242a:	4620      	mov	r0, r4
   2242c:	f007 fea8 	bl	2a180 <z_queue_node_peek>
   22430:	4604      	mov	r4, r0
	__asm__ volatile(
   22432:	f385 8811 	msr	BASEPRI, r5
   22436:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   2243a:	4620      	mov	r0, r4
   2243c:	b003      	add	sp, #12
   2243e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   22440:	ea51 0203 	orrs.w	r2, r1, r3
   22444:	d0f5      	beq.n	22432 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   22446:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   2244a:	e9cd 1300 	strd	r1, r3, [sp]
   2244e:	4610      	mov	r0, r2
   22450:	4629      	mov	r1, r5
   22452:	f000 fbaf 	bl	22bb4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   22456:	2800      	cmp	r0, #0
   22458:	d1ef      	bne.n	2243a <z_impl_k_queue_get+0x3a>
   2245a:	4b02      	ldr	r3, [pc, #8]	; (22464 <z_impl_k_queue_get+0x64>)
   2245c:	689b      	ldr	r3, [r3, #8]
   2245e:	695c      	ldr	r4, [r3, #20]
   22460:	e7eb      	b.n	2243a <z_impl_k_queue_get+0x3a>
   22462:	bf00      	nop
   22464:	20003398 	.word	0x20003398

00022468 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   22468:	b538      	push	{r3, r4, r5, lr}
   2246a:	4604      	mov	r4, r0
	__asm__ volatile(
   2246c:	f04f 0320 	mov.w	r3, #32
   22470:	f3ef 8511 	mrs	r5, BASEPRI
   22474:	f383 8812 	msr	BASEPRI_MAX, r3
   22478:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   2247c:	f008 f8a7 	bl	2a5ce <z_unpend_first_thread>

	if (thread != NULL) {
   22480:	b148      	cbz	r0, 22496 <z_impl_k_sem_give+0x2e>
   22482:	2200      	movs	r2, #0
   22484:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   22486:	f008 f831 	bl	2a4ec <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   2248a:	4629      	mov	r1, r5
   2248c:	4808      	ldr	r0, [pc, #32]	; (224b0 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   2248e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   22492:	f000 ba3d 	b.w	22910 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   22496:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   2249a:	429a      	cmp	r2, r3
   2249c:	bf18      	it	ne
   2249e:	3301      	addne	r3, #1
   224a0:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   224a2:	2102      	movs	r1, #2
   224a4:	f104 0010 	add.w	r0, r4, #16
   224a8:	f008 fab2 	bl	2aa10 <z_handle_obj_poll_events>
}
   224ac:	e7ed      	b.n	2248a <z_impl_k_sem_give+0x22>
   224ae:	bf00      	nop
   224b0:	20003992 	.word	0x20003992

000224b4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   224b4:	b513      	push	{r0, r1, r4, lr}
   224b6:	f04f 0420 	mov.w	r4, #32
   224ba:	f3ef 8111 	mrs	r1, BASEPRI
   224be:	f384 8812 	msr	BASEPRI_MAX, r4
   224c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   224c6:	6884      	ldr	r4, [r0, #8]
   224c8:	b144      	cbz	r4, 224dc <z_impl_k_sem_take+0x28>
		sem->count--;
   224ca:	3c01      	subs	r4, #1
   224cc:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   224ce:	f381 8811 	msr	BASEPRI, r1
   224d2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   224d6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   224d8:	b002      	add	sp, #8
   224da:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   224dc:	ea52 0403 	orrs.w	r4, r2, r3
   224e0:	d106      	bne.n	224f0 <z_impl_k_sem_take+0x3c>
   224e2:	f381 8811 	msr	BASEPRI, r1
   224e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   224ea:	f06f 000f 	mvn.w	r0, #15
   224ee:	e7f3      	b.n	224d8 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   224f0:	e9cd 2300 	strd	r2, r3, [sp]
   224f4:	4602      	mov	r2, r0
   224f6:	4802      	ldr	r0, [pc, #8]	; (22500 <z_impl_k_sem_take+0x4c>)
   224f8:	f000 fb5c 	bl	22bb4 <z_pend_curr>
	return ret;
   224fc:	e7ec      	b.n	224d8 <z_impl_k_sem_take+0x24>
   224fe:	bf00      	nop
   22500:	20003992 	.word	0x20003992

00022504 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   22504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   22506:	4b09      	ldr	r3, [pc, #36]	; (2252c <k_sys_work_q_init+0x28>)
   22508:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   2250a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   2250c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   2250e:	9300      	str	r3, [sp, #0]
   22510:	4907      	ldr	r1, [pc, #28]	; (22530 <k_sys_work_q_init+0x2c>)
   22512:	4808      	ldr	r0, [pc, #32]	; (22534 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   22514:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   22518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2251c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22520:	f000 f914 	bl	2274c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   22524:	4620      	mov	r0, r4
   22526:	b004      	add	sp, #16
   22528:	bd10      	pop	{r4, pc}
   2252a:	bf00      	nop
   2252c:	0002f317 	.word	0x0002f317
   22530:	20006558 	.word	0x20006558
   22534:	20001d68 	.word	0x20001d68

00022538 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   22538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   2253c:	4e47      	ldr	r6, [pc, #284]	; (2265c <work_queue_main+0x124>)
   2253e:	b085      	sub	sp, #20
   22540:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   22542:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   22546:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   2254a:	f04f 0320 	mov.w	r3, #32
   2254e:	f3ef 8711 	mrs	r7, BASEPRI
   22552:	f383 8812 	msr	BASEPRI_MAX, r3
   22556:	f3bf 8f6f 	isb	sy
   2255a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   2255e:	b98d      	cbnz	r5, 22584 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   22560:	2102      	movs	r1, #2
   22562:	f104 0098 	add.w	r0, r4, #152	; 0x98
   22566:	f007 fe84 	bl	2a272 <flag_test_and_clear>
   2256a:	2800      	cmp	r0, #0
   2256c:	d135      	bne.n	225da <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   2256e:	2300      	movs	r3, #0
   22570:	e9cd 8900 	strd	r8, r9, [sp]
   22574:	9302      	str	r3, [sp, #8]
   22576:	f104 0288 	add.w	r2, r4, #136	; 0x88
   2257a:	4639      	mov	r1, r7
   2257c:	4838      	ldr	r0, [pc, #224]	; (22660 <work_queue_main+0x128>)
   2257e:	f000 fcd9 	bl	22f34 <z_sched_wait>
			continue;
   22582:	e7e2      	b.n	2254a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   22584:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   22588:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   2258a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2258e:	4295      	cmp	r5, r2
   22590:	d101      	bne.n	22596 <work_queue_main+0x5e>
	list->tail = node;
   22592:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   22596:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   2259a:	f043 0302 	orr.w	r3, r3, #2
   2259e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   225a2:	68eb      	ldr	r3, [r5, #12]
   225a4:	f023 0304 	bic.w	r3, r3, #4
   225a8:	f043 0301 	orr.w	r3, r3, #1
   225ac:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   225ae:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   225b0:	f387 8811 	msr	BASEPRI, r7
   225b4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   225b8:	4628      	mov	r0, r5
   225ba:	4798      	blx	r3
	__asm__ volatile(
   225bc:	f04f 0320 	mov.w	r3, #32
   225c0:	f3ef 8b11 	mrs	fp, BASEPRI
   225c4:	f383 8812 	msr	BASEPRI_MAX, r3
   225c8:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   225cc:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   225ce:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   225d0:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   225d4:	d40b      	bmi.n	225ee <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   225d6:	60ea      	str	r2, [r5, #12]
   225d8:	e00e      	b.n	225f8 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   225da:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   225de:	2200      	movs	r2, #0
   225e0:	2101      	movs	r1, #1
   225e2:	4628      	mov	r0, r5
   225e4:	f008 f81b 	bl	2a61e <z_sched_wake>
   225e8:	2800      	cmp	r0, #0
   225ea:	d1f8      	bne.n	225de <work_queue_main+0xa6>
   225ec:	e7bf      	b.n	2256e <work_queue_main+0x36>
	return list->head;
   225ee:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   225f0:	f023 0303 	bic.w	r3, r3, #3
   225f4:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   225f6:	b970      	cbnz	r0, 22616 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   225f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   225fc:	f023 0302 	bic.w	r3, r3, #2
   22600:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   22604:	f38b 8811 	msr	BASEPRI, fp
   22608:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2260c:	05d8      	lsls	r0, r3, #23
   2260e:	d49c      	bmi.n	2254a <work_queue_main+0x12>
	z_impl_k_yield();
   22610:	f000 fb86 	bl	22d20 <z_impl_k_yield>
}
   22614:	e799      	b.n	2254a <work_queue_main+0x12>
	return node->next;
   22616:	2700      	movs	r7, #0
   22618:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   2261c:	463b      	mov	r3, r7
		if (wc->work == work) {
   2261e:	6842      	ldr	r2, [r0, #4]
   22620:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   22622:	4601      	mov	r1, r0
		if (wc->work == work) {
   22624:	d10c      	bne.n	22640 <work_queue_main+0x108>
	return node->next;
   22626:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   22628:	b997      	cbnz	r7, 22650 <work_queue_main+0x118>
   2262a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   2262c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   2262e:	4282      	cmp	r2, r0
   22630:	d100      	bne.n	22634 <work_queue_main+0xfc>
	list->tail = node;
   22632:	6071      	str	r1, [r6, #4]
	parent->next = child;
   22634:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   22638:	f7ff ff16 	bl	22468 <z_impl_k_sem_give>
}
   2263c:	4639      	mov	r1, r7
   2263e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   22640:	f1ba 0f00 	cmp.w	sl, #0
   22644:	d0d8      	beq.n	225f8 <work_queue_main+0xc0>
	return node->next;
   22646:	4650      	mov	r0, sl
   22648:	460f      	mov	r7, r1
   2264a:	f8da a000 	ldr.w	sl, [sl]
   2264e:	e7e6      	b.n	2261e <work_queue_main+0xe6>
	return list->tail;
   22650:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   22652:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   22654:	4290      	cmp	r0, r2
	list->tail = node;
   22656:	bf08      	it	eq
   22658:	6077      	streq	r7, [r6, #4]
}
   2265a:	e7eb      	b.n	22634 <work_queue_main+0xfc>
   2265c:	200033c0 	.word	0x200033c0
   22660:	20003992 	.word	0x20003992

00022664 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   22664:	68c3      	ldr	r3, [r0, #12]
{
   22666:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   22668:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   2266c:	079b      	lsls	r3, r3, #30
{
   2266e:	4605      	mov	r5, r0
   22670:	460c      	mov	r4, r1
	if (ret) {
   22672:	d50d      	bpl.n	22690 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   22674:	2201      	movs	r2, #1
   22676:	2100      	movs	r1, #0
   22678:	f104 0008 	add.w	r0, r4, #8
   2267c:	f007 fde9 	bl	2a252 <z_impl_k_sem_init>
	parent->next = child;
   22680:	2300      	movs	r3, #0
   22682:	6023      	str	r3, [r4, #0]
	return list->tail;
   22684:	4b05      	ldr	r3, [pc, #20]	; (2269c <cancel_sync_locked+0x38>)
	canceler->work = work;
   22686:	6065      	str	r5, [r4, #4]
   22688:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   2268a:	b91a      	cbnz	r2, 22694 <cancel_sync_locked+0x30>
	list->head = node;
   2268c:	e9c3 4400 	strd	r4, r4, [r3]
}
   22690:	4630      	mov	r0, r6
   22692:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   22694:	6014      	str	r4, [r2, #0]
	list->tail = node;
   22696:	605c      	str	r4, [r3, #4]
}
   22698:	e7fa      	b.n	22690 <cancel_sync_locked+0x2c>
   2269a:	bf00      	nop
   2269c:	200033c0 	.word	0x200033c0

000226a0 <submit_to_queue_locked>:
{
   226a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   226a2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   226a4:	079a      	lsls	r2, r3, #30
{
   226a6:	4604      	mov	r4, r0
   226a8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   226aa:	f3c3 0540 	ubfx	r5, r3, #1, #1
   226ae:	d41f      	bmi.n	226f0 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   226b0:	075f      	lsls	r7, r3, #29
   226b2:	d41f      	bmi.n	226f4 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   226b4:	680a      	ldr	r2, [r1, #0]
   226b6:	b90a      	cbnz	r2, 226bc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   226b8:	6882      	ldr	r2, [r0, #8]
   226ba:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   226bc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   226be:	bf44      	itt	mi
   226c0:	68a3      	ldrmi	r3, [r4, #8]
   226c2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   226c4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   226c6:	bf4c      	ite	mi
   226c8:	2502      	movmi	r5, #2
		ret = 1;
   226ca:	2501      	movpl	r5, #1
	if (queue == NULL) {
   226cc:	b37f      	cbz	r7, 2272e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   226ce:	4b1b      	ldr	r3, [pc, #108]	; (2273c <submit_to_queue_locked+0x9c>)
   226d0:	689b      	ldr	r3, [r3, #8]
   226d2:	42bb      	cmp	r3, r7
   226d4:	d111      	bne.n	226fa <submit_to_queue_locked+0x5a>
   226d6:	f007 fcac 	bl	2a032 <k_is_in_isr>
   226da:	f080 0001 	eor.w	r0, r0, #1
   226de:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   226e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   226e4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   226e6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   226ea:	d523      	bpl.n	22734 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   226ec:	b13a      	cbz	r2, 226fe <submit_to_queue_locked+0x5e>
   226ee:	b940      	cbnz	r0, 22702 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   226f0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   226f4:	2300      	movs	r3, #0
   226f6:	6033      	str	r3, [r6, #0]
	return ret;
   226f8:	e013      	b.n	22722 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   226fa:	2000      	movs	r0, #0
   226fc:	e7f0      	b.n	226e0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   226fe:	071b      	lsls	r3, r3, #28
   22700:	d4f6      	bmi.n	226f0 <submit_to_queue_locked+0x50>
	parent->next = child;
   22702:	2300      	movs	r3, #0
   22704:	6023      	str	r3, [r4, #0]
	return list->tail;
   22706:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   2270a:	b963      	cbnz	r3, 22726 <submit_to_queue_locked+0x86>
	list->head = node;
   2270c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   22710:	4638      	mov	r0, r7
   22712:	f007 fdc7 	bl	2a2a4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   22716:	68e3      	ldr	r3, [r4, #12]
   22718:	f043 0304 	orr.w	r3, r3, #4
   2271c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   2271e:	6833      	ldr	r3, [r6, #0]
   22720:	60a3      	str	r3, [r4, #8]
}
   22722:	4628      	mov	r0, r5
   22724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   22726:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22728:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   2272c:	e7f0      	b.n	22710 <submit_to_queue_locked+0x70>
		return -EINVAL;
   2272e:	f06f 0515 	mvn.w	r5, #21
   22732:	e7df      	b.n	226f4 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   22734:	f06f 0512 	mvn.w	r5, #18
   22738:	e7dc      	b.n	226f4 <submit_to_queue_locked+0x54>
   2273a:	bf00      	nop
   2273c:	20003398 	.word	0x20003398

00022740 <k_work_submit>:
{
   22740:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   22742:	4801      	ldr	r0, [pc, #4]	; (22748 <k_work_submit+0x8>)
   22744:	f007 be0e 	b.w	2a364 <k_work_submit_to_queue>
   22748:	20001d68 	.word	0x20001d68

0002274c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   2274c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2274e:	b089      	sub	sp, #36	; 0x24
   22750:	4604      	mov	r4, r0
	list->head = NULL;
   22752:	2000      	movs	r0, #0
	list->tail = NULL;
   22754:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   22758:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2275a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   2275e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   22762:	f104 0090 	add.w	r0, r4, #144	; 0x90
   22766:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   2276a:	b31d      	cbz	r5, 227b4 <k_work_queue_start+0x68>
   2276c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2276e:	2800      	cmp	r0, #0
   22770:	f240 1001 	movw	r0, #257	; 0x101
   22774:	bf08      	it	eq
   22776:	2001      	moveq	r0, #1
	*flagp = flags;
   22778:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2277c:	2000      	movs	r0, #0
   2277e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   22782:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22786:	e9cd 3003 	strd	r3, r0, [sp, #12]
   2278a:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2278e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   22792:	4b09      	ldr	r3, [pc, #36]	; (227b8 <k_work_queue_start+0x6c>)
   22794:	9400      	str	r4, [sp, #0]
   22796:	4620      	mov	r0, r4
   22798:	f7ff fc24 	bl	21fe4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   2279c:	b125      	cbz	r5, 227a8 <k_work_queue_start+0x5c>
   2279e:	6829      	ldr	r1, [r5, #0]
   227a0:	b111      	cbz	r1, 227a8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   227a2:	4620      	mov	r0, r4
   227a4:	f007 fc4b 	bl	2a03e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   227a8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   227aa:	b009      	add	sp, #36	; 0x24
   227ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   227b0:	f007 bc4a 	b.w	2a048 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   227b4:	2001      	movs	r0, #1
   227b6:	e7df      	b.n	22778 <k_work_queue_start+0x2c>
   227b8:	00022539 	.word	0x00022539

000227bc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   227bc:	b513      	push	{r0, r1, r4, lr}
   227be:	9001      	str	r0, [sp, #4]
   227c0:	4608      	mov	r0, r1
	__asm__ volatile(
   227c2:	f04f 0120 	mov.w	r1, #32
   227c6:	f3ef 8411 	mrs	r4, BASEPRI
   227ca:	f381 8812 	msr	BASEPRI_MAX, r1
   227ce:	f3bf 8f6f 	isb	sy
	return *flagp;
   227d2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   227d4:	f011 0f0e 	tst.w	r1, #14
   227d8:	d116      	bne.n	22808 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   227da:	ea53 0c02 	orrs.w	ip, r3, r2
   227de:	d108      	bne.n	227f2 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   227e0:	a901      	add	r1, sp, #4
   227e2:	f7ff ff5d 	bl	226a0 <submit_to_queue_locked>
	__asm__ volatile(
   227e6:	f384 8811 	msr	BASEPRI, r4
   227ea:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   227ee:	b002      	add	sp, #8
   227f0:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   227f2:	f041 0108 	orr.w	r1, r1, #8
   227f6:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   227f8:	9901      	ldr	r1, [sp, #4]
   227fa:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   227fc:	3010      	adds	r0, #16
   227fe:	4903      	ldr	r1, [pc, #12]	; (2280c <k_work_schedule_for_queue+0x50>)
   22800:	f000 fc0e 	bl	23020 <z_add_timeout>
	return ret;
   22804:	2001      	movs	r0, #1
   22806:	e7ee      	b.n	227e6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   22808:	2000      	movs	r0, #0
   2280a:	e7ec      	b.n	227e6 <k_work_schedule_for_queue+0x2a>
   2280c:	0002a315 	.word	0x0002a315

00022810 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   22810:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   22812:	4801      	ldr	r0, [pc, #4]	; (22818 <k_work_schedule+0x8>)
   22814:	f7ff bfd2 	b.w	227bc <k_work_schedule_for_queue>
   22818:	20001d68 	.word	0x20001d68

0002281c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   2281c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2281e:	460c      	mov	r4, r1
   22820:	9001      	str	r0, [sp, #4]
   22822:	4616      	mov	r6, r2
   22824:	461d      	mov	r5, r3
	__asm__ volatile(
   22826:	f04f 0320 	mov.w	r3, #32
   2282a:	f3ef 8711 	mrs	r7, BASEPRI
   2282e:	f383 8812 	msr	BASEPRI_MAX, r3
   22832:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   22836:	4608      	mov	r0, r1
   22838:	f007 fd26 	bl	2a288 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2283c:	ea55 0306 	orrs.w	r3, r5, r6
   22840:	d109      	bne.n	22856 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   22842:	a901      	add	r1, sp, #4
   22844:	4620      	mov	r0, r4
   22846:	f7ff ff2b 	bl	226a0 <submit_to_queue_locked>
	__asm__ volatile(
   2284a:	f387 8811 	msr	BASEPRI, r7
   2284e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   22852:	b003      	add	sp, #12
   22854:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   22856:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22858:	4906      	ldr	r1, [pc, #24]	; (22874 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   2285a:	f043 0308 	orr.w	r3, r3, #8
   2285e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   22860:	9b01      	ldr	r3, [sp, #4]
   22862:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   22864:	f104 0010 	add.w	r0, r4, #16
   22868:	4632      	mov	r2, r6
   2286a:	462b      	mov	r3, r5
   2286c:	f000 fbd8 	bl	23020 <z_add_timeout>
	return ret;
   22870:	2001      	movs	r0, #1
   22872:	e7ea      	b.n	2284a <k_work_reschedule_for_queue+0x2e>
   22874:	0002a315 	.word	0x0002a315

00022878 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   22878:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   2287a:	4801      	ldr	r0, [pc, #4]	; (22880 <k_work_reschedule+0x8>)
   2287c:	f7ff bfce 	b.w	2281c <k_work_reschedule_for_queue>
   22880:	20001d68 	.word	0x20001d68

00022884 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   22884:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   22886:	4c08      	ldr	r4, [pc, #32]	; (228a8 <z_reset_time_slice+0x24>)
   22888:	6823      	ldr	r3, [r4, #0]
   2288a:	b15b      	cbz	r3, 228a4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2288c:	f7fe fb9c 	bl	20fc8 <sys_clock_elapsed>
   22890:	4603      	mov	r3, r0
   22892:	6820      	ldr	r0, [r4, #0]
   22894:	4a05      	ldr	r2, [pc, #20]	; (228ac <z_reset_time_slice+0x28>)
   22896:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   22898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   2289c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   2289e:	2100      	movs	r1, #0
   228a0:	f007 bf00 	b.w	2a6a4 <z_set_timeout_expiry>
}
   228a4:	bd10      	pop	{r4, pc}
   228a6:	bf00      	nop
   228a8:	200033d0 	.word	0x200033d0
   228ac:	20003398 	.word	0x20003398

000228b0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   228b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   228b2:	4604      	mov	r4, r0
   228b4:	460d      	mov	r5, r1
	__asm__ volatile(
   228b6:	f04f 0320 	mov.w	r3, #32
   228ba:	f3ef 8611 	mrs	r6, BASEPRI
   228be:	f383 8812 	msr	BASEPRI_MAX, r3
   228c2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   228c6:	4b0f      	ldr	r3, [pc, #60]	; (22904 <k_sched_time_slice_set+0x54>)
   228c8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   228ca:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   228ce:	f240 30e7 	movw	r0, #999	; 0x3e7
   228d2:	6119      	str	r1, [r3, #16]
   228d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   228d8:	2300      	movs	r3, #0
   228da:	fbe4 0107 	umlal	r0, r1, r4, r7
   228de:	f7de f84d 	bl	97c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   228e2:	2c00      	cmp	r4, #0
   228e4:	4b08      	ldr	r3, [pc, #32]	; (22908 <k_sched_time_slice_set+0x58>)
   228e6:	dc09      	bgt.n	228fc <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   228e8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   228ea:	4b08      	ldr	r3, [pc, #32]	; (2290c <k_sched_time_slice_set+0x5c>)
   228ec:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   228ee:	f7ff ffc9 	bl	22884 <z_reset_time_slice>
	__asm__ volatile(
   228f2:	f386 8811 	msr	BASEPRI, r6
   228f6:	f3bf 8f6f 	isb	sy
	}
}
   228fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   228fc:	2802      	cmp	r0, #2
   228fe:	bfb8      	it	lt
   22900:	2002      	movlt	r0, #2
   22902:	e7f1      	b.n	228e8 <k_sched_time_slice_set+0x38>
   22904:	20003398 	.word	0x20003398
   22908:	200033d0 	.word	0x200033d0
   2290c:	200033cc 	.word	0x200033cc

00022910 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   22910:	b949      	cbnz	r1, 22926 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   22912:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   22916:	b930      	cbnz	r0, 22926 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   22918:	4b05      	ldr	r3, [pc, #20]	; (22930 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   2291a:	69da      	ldr	r2, [r3, #28]
   2291c:	689b      	ldr	r3, [r3, #8]
   2291e:	429a      	cmp	r2, r3
   22920:	d001      	beq.n	22926 <z_reschedule+0x16>
	ret = arch_swap(key);
   22922:	f7e4 b933 	b.w	6b8c <arch_swap>
   22926:	f381 8811 	msr	BASEPRI, r1
   2292a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2292e:	4770      	bx	lr
   22930:	20003398 	.word	0x20003398

00022934 <k_sched_lock>:
	__asm__ volatile(
   22934:	f04f 0320 	mov.w	r3, #32
   22938:	f3ef 8111 	mrs	r1, BASEPRI
   2293c:	f383 8812 	msr	BASEPRI_MAX, r3
   22940:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   22944:	4b04      	ldr	r3, [pc, #16]	; (22958 <k_sched_lock+0x24>)
   22946:	689a      	ldr	r2, [r3, #8]
   22948:	7bd3      	ldrb	r3, [r2, #15]
   2294a:	3b01      	subs	r3, #1
   2294c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2294e:	f381 8811 	msr	BASEPRI, r1
   22952:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   22956:	4770      	bx	lr
   22958:	20003398 	.word	0x20003398

0002295c <update_cache>:
{
   2295c:	b538      	push	{r3, r4, r5, lr}
   2295e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   22960:	480c      	ldr	r0, [pc, #48]	; (22994 <update_cache+0x38>)
   22962:	4d0d      	ldr	r5, [pc, #52]	; (22998 <update_cache+0x3c>)
   22964:	f007 fdbc 	bl	2a4e0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   22968:	4604      	mov	r4, r0
   2296a:	b900      	cbnz	r0, 2296e <update_cache+0x12>
   2296c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2296e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   22970:	b94a      	cbnz	r2, 22986 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   22972:	7b5a      	ldrb	r2, [r3, #13]
   22974:	06d2      	lsls	r2, r2, #27
   22976:	d106      	bne.n	22986 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   22978:	69a2      	ldr	r2, [r4, #24]
   2297a:	b922      	cbnz	r2, 22986 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   2297c:	89da      	ldrh	r2, [r3, #14]
   2297e:	2a7f      	cmp	r2, #127	; 0x7f
   22980:	d901      	bls.n	22986 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   22982:	61eb      	str	r3, [r5, #28]
}
   22984:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   22986:	429c      	cmp	r4, r3
   22988:	d001      	beq.n	2298e <update_cache+0x32>
			z_reset_time_slice();
   2298a:	f7ff ff7b 	bl	22884 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2298e:	61ec      	str	r4, [r5, #28]
}
   22990:	e7f8      	b.n	22984 <update_cache+0x28>
   22992:	bf00      	nop
   22994:	200033b8 	.word	0x200033b8
   22998:	20003398 	.word	0x20003398

0002299c <move_thread_to_end_of_prio_q>:
{
   2299c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   2299e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   229a2:	7b43      	ldrb	r3, [r0, #13]
   229a4:	2a00      	cmp	r2, #0
{
   229a6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   229a8:	da04      	bge.n	229b4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   229aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   229ae:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   229b0:	f007 fd41 	bl	2a436 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   229b4:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   229b6:	4a15      	ldr	r2, [pc, #84]	; (22a0c <move_thread_to_end_of_prio_q+0x70>)
   229b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   229bc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   229be:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   229c2:	f102 0520 	add.w	r5, r2, #32
   229c6:	42ab      	cmp	r3, r5
   229c8:	d01b      	beq.n	22a02 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   229ca:	b1d3      	cbz	r3, 22a02 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   229cc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   229d0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   229d4:	4286      	cmp	r6, r0
   229d6:	d00f      	beq.n	229f8 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   229d8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   229da:	2800      	cmp	r0, #0
   229dc:	dd0c      	ble.n	229f8 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   229de:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   229e0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   229e4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   229e6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   229e8:	6890      	ldr	r0, [r2, #8]
   229ea:	1a43      	subs	r3, r0, r1
   229ec:	4258      	negs	r0, r3
}
   229ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   229f2:	4158      	adcs	r0, r3
   229f4:	f7ff bfb2 	b.w	2295c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   229f8:	42a3      	cmp	r3, r4
   229fa:	d002      	beq.n	22a02 <move_thread_to_end_of_prio_q+0x66>
   229fc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   229fe:	2b00      	cmp	r3, #0
   22a00:	d1e6      	bne.n	229d0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   22a02:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   22a06:	6021      	str	r1, [r4, #0]
	list->tail = node;
   22a08:	6251      	str	r1, [r2, #36]	; 0x24
}
   22a0a:	e7ed      	b.n	229e8 <move_thread_to_end_of_prio_q+0x4c>
   22a0c:	20003398 	.word	0x20003398

00022a10 <z_time_slice>:
{
   22a10:	b538      	push	{r3, r4, r5, lr}
   22a12:	4601      	mov	r1, r0
	__asm__ volatile(
   22a14:	f04f 0320 	mov.w	r3, #32
   22a18:	f3ef 8411 	mrs	r4, BASEPRI
   22a1c:	f383 8812 	msr	BASEPRI_MAX, r3
   22a20:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   22a24:	4b15      	ldr	r3, [pc, #84]	; (22a7c <z_time_slice+0x6c>)
   22a26:	4a16      	ldr	r2, [pc, #88]	; (22a80 <z_time_slice+0x70>)
   22a28:	6898      	ldr	r0, [r3, #8]
   22a2a:	6815      	ldr	r5, [r2, #0]
   22a2c:	42a8      	cmp	r0, r5
   22a2e:	d106      	bne.n	22a3e <z_time_slice+0x2e>
			z_reset_time_slice();
   22a30:	f7ff ff28 	bl	22884 <z_reset_time_slice>
	__asm__ volatile(
   22a34:	f384 8811 	msr	BASEPRI, r4
   22a38:	f3bf 8f6f 	isb	sy
}
   22a3c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   22a3e:	2500      	movs	r5, #0
   22a40:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   22a42:	4a10      	ldr	r2, [pc, #64]	; (22a84 <z_time_slice+0x74>)
   22a44:	6812      	ldr	r2, [r2, #0]
   22a46:	b1ba      	cbz	r2, 22a78 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   22a48:	89c2      	ldrh	r2, [r0, #14]
   22a4a:	2a7f      	cmp	r2, #127	; 0x7f
   22a4c:	d814      	bhi.n	22a78 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   22a4e:	7b42      	ldrb	r2, [r0, #13]
   22a50:	06d2      	lsls	r2, r2, #27
   22a52:	d111      	bne.n	22a78 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   22a54:	4a0c      	ldr	r2, [pc, #48]	; (22a88 <z_time_slice+0x78>)
   22a56:	f990 500e 	ldrsb.w	r5, [r0, #14]
   22a5a:	6812      	ldr	r2, [r2, #0]
   22a5c:	4295      	cmp	r5, r2
   22a5e:	db0b      	blt.n	22a78 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   22a60:	4a0a      	ldr	r2, [pc, #40]	; (22a8c <z_time_slice+0x7c>)
   22a62:	4290      	cmp	r0, r2
   22a64:	d008      	beq.n	22a78 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   22a66:	691a      	ldr	r2, [r3, #16]
   22a68:	428a      	cmp	r2, r1
   22a6a:	dc02      	bgt.n	22a72 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   22a6c:	f7ff ff96 	bl	2299c <move_thread_to_end_of_prio_q>
   22a70:	e7de      	b.n	22a30 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   22a72:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   22a74:	611a      	str	r2, [r3, #16]
   22a76:	e7dd      	b.n	22a34 <z_time_slice+0x24>
   22a78:	2200      	movs	r2, #0
   22a7a:	e7fb      	b.n	22a74 <z_time_slice+0x64>
   22a7c:	20003398 	.word	0x20003398
   22a80:	200033c8 	.word	0x200033c8
   22a84:	200033d0 	.word	0x200033d0
   22a88:	200033cc 	.word	0x200033cc
   22a8c:	20001c68 	.word	0x20001c68

00022a90 <ready_thread>:
{
   22a90:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   22a92:	f990 200d 	ldrsb.w	r2, [r0, #13]
   22a96:	7b43      	ldrb	r3, [r0, #13]
   22a98:	2a00      	cmp	r2, #0
   22a9a:	db2a      	blt.n	22af2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22a9c:	06da      	lsls	r2, r3, #27
   22a9e:	d128      	bne.n	22af2 <ready_thread+0x62>
   22aa0:	6982      	ldr	r2, [r0, #24]
   22aa2:	bb32      	cbnz	r2, 22af2 <ready_thread+0x62>
	return list->head == list;
   22aa4:	4a14      	ldr	r2, [pc, #80]	; (22af8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   22aa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22aaa:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   22aac:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ab0:	f102 0520 	add.w	r5, r2, #32
   22ab4:	42ab      	cmp	r3, r5
   22ab6:	d017      	beq.n	22ae8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22ab8:	b1b3      	cbz	r3, 22ae8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   22aba:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   22abe:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   22ac2:	428e      	cmp	r6, r1
   22ac4:	d00b      	beq.n	22ade <ready_thread+0x4e>
		return b2 - b1;
   22ac6:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22ac8:	2900      	cmp	r1, #0
   22aca:	dd08      	ble.n	22ade <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   22acc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22ace:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   22ad2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   22ad4:	6058      	str	r0, [r3, #4]
}
   22ad6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   22ad8:	2000      	movs	r0, #0
   22ada:	f7ff bf3f 	b.w	2295c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   22ade:	42a3      	cmp	r3, r4
   22ae0:	d002      	beq.n	22ae8 <ready_thread+0x58>
   22ae2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22ae4:	2b00      	cmp	r3, #0
   22ae6:	d1ea      	bne.n	22abe <ready_thread+0x2e>
	node->prev = tail;
   22ae8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   22aec:	6020      	str	r0, [r4, #0]
	list->tail = node;
   22aee:	6250      	str	r0, [r2, #36]	; 0x24
}
   22af0:	e7f1      	b.n	22ad6 <ready_thread+0x46>
}
   22af2:	bc70      	pop	{r4, r5, r6}
   22af4:	4770      	bx	lr
   22af6:	bf00      	nop
   22af8:	20003398 	.word	0x20003398

00022afc <z_sched_start>:
{
   22afc:	b510      	push	{r4, lr}
	__asm__ volatile(
   22afe:	f04f 0220 	mov.w	r2, #32
   22b02:	f3ef 8411 	mrs	r4, BASEPRI
   22b06:	f382 8812 	msr	BASEPRI_MAX, r2
   22b0a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   22b0e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   22b10:	0751      	lsls	r1, r2, #29
   22b12:	d404      	bmi.n	22b1e <z_sched_start+0x22>
	__asm__ volatile(
   22b14:	f384 8811 	msr	BASEPRI, r4
   22b18:	f3bf 8f6f 	isb	sy
}
   22b1c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   22b1e:	f022 0204 	bic.w	r2, r2, #4
   22b22:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   22b24:	f7ff ffb4 	bl	22a90 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   22b28:	4621      	mov	r1, r4
   22b2a:	4802      	ldr	r0, [pc, #8]	; (22b34 <z_sched_start+0x38>)
}
   22b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   22b30:	f7ff beee 	b.w	22910 <z_reschedule>
   22b34:	20003992 	.word	0x20003992

00022b38 <unready_thread>:
{
   22b38:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   22b3a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   22b3e:	7b43      	ldrb	r3, [r0, #13]
   22b40:	2a00      	cmp	r2, #0
{
   22b42:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   22b44:	da04      	bge.n	22b50 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22b46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22b4a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22b4c:	f007 fc73 	bl	2a436 <sys_dlist_remove>
	update_cache(thread == _current);
   22b50:	4b04      	ldr	r3, [pc, #16]	; (22b64 <unready_thread+0x2c>)
   22b52:	6898      	ldr	r0, [r3, #8]
   22b54:	1a43      	subs	r3, r0, r1
   22b56:	4258      	negs	r0, r3
   22b58:	4158      	adcs	r0, r3
}
   22b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   22b5e:	f7ff befd 	b.w	2295c <update_cache>
   22b62:	bf00      	nop
   22b64:	20003398 	.word	0x20003398

00022b68 <pend>:
{
   22b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22b6c:	4606      	mov	r6, r0
   22b6e:	4615      	mov	r5, r2
   22b70:	461c      	mov	r4, r3
	__asm__ volatile(
   22b72:	f04f 0320 	mov.w	r3, #32
   22b76:	f3ef 8711 	mrs	r7, BASEPRI
   22b7a:	f383 8812 	msr	BASEPRI_MAX, r3
   22b7e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   22b82:	f007 fce5 	bl	2a550 <add_to_waitq_locked>
	__asm__ volatile(
   22b86:	f387 8811 	msr	BASEPRI, r7
   22b8a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22b8e:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   22b92:	bf08      	it	eq
   22b94:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   22b98:	d008      	beq.n	22bac <pend+0x44>
   22b9a:	462a      	mov	r2, r5
   22b9c:	4623      	mov	r3, r4
   22b9e:	f106 0018 	add.w	r0, r6, #24
   22ba2:	4903      	ldr	r1, [pc, #12]	; (22bb0 <pend+0x48>)
}
   22ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   22ba8:	f000 ba3a 	b.w	23020 <z_add_timeout>
   22bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22bb0:	0002a50d 	.word	0x0002a50d

00022bb4 <z_pend_curr>:
{
   22bb4:	b510      	push	{r4, lr}
	pending_current = _current;
   22bb6:	4b07      	ldr	r3, [pc, #28]	; (22bd4 <z_pend_curr+0x20>)
   22bb8:	6898      	ldr	r0, [r3, #8]
   22bba:	4b07      	ldr	r3, [pc, #28]	; (22bd8 <z_pend_curr+0x24>)
{
   22bbc:	460c      	mov	r4, r1
	pending_current = _current;
   22bbe:	6018      	str	r0, [r3, #0]
{
   22bc0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   22bc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   22bc6:	f7ff ffcf 	bl	22b68 <pend>
   22bca:	4620      	mov	r0, r4
}
   22bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22bd0:	f7e3 bfdc 	b.w	6b8c <arch_swap>
   22bd4:	20003398 	.word	0x20003398
   22bd8:	200033c8 	.word	0x200033c8

00022bdc <z_set_prio>:
{
   22bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22bde:	4604      	mov	r4, r0
	__asm__ volatile(
   22be0:	f04f 0320 	mov.w	r3, #32
   22be4:	f3ef 8611 	mrs	r6, BASEPRI
   22be8:	f383 8812 	msr	BASEPRI_MAX, r3
   22bec:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   22bf0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   22bf2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   22bf4:	b249      	sxtb	r1, r1
   22bf6:	d133      	bne.n	22c60 <z_set_prio+0x84>
		if (need_sched) {
   22bf8:	6982      	ldr	r2, [r0, #24]
   22bfa:	bb8a      	cbnz	r2, 22c60 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22bfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22c00:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22c02:	f007 fc18 	bl	2a436 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   22c06:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   22c08:	4a17      	ldr	r2, [pc, #92]	; (22c68 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   22c0a:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   22c0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   22c10:	7343      	strb	r3, [r0, #13]
   22c12:	4610      	mov	r0, r2
   22c14:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22c18:	4283      	cmp	r3, r0
   22c1a:	d01b      	beq.n	22c54 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22c1c:	b1d3      	cbz	r3, 22c54 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   22c1e:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   22c20:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   22c24:	42a9      	cmp	r1, r5
   22c26:	d010      	beq.n	22c4a <z_set_prio+0x6e>
		return b2 - b1;
   22c28:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   22c2a:	2d00      	cmp	r5, #0
   22c2c:	dd0d      	ble.n	22c4a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   22c2e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   22c30:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   22c34:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   22c36:	605c      	str	r4, [r3, #4]
			update_cache(1);
   22c38:	2001      	movs	r0, #1
   22c3a:	f7ff fe8f 	bl	2295c <update_cache>
   22c3e:	2001      	movs	r0, #1
	__asm__ volatile(
   22c40:	f386 8811 	msr	BASEPRI, r6
   22c44:	f3bf 8f6f 	isb	sy
}
   22c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   22c4a:	42bb      	cmp	r3, r7
   22c4c:	d002      	beq.n	22c54 <z_set_prio+0x78>
   22c4e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22c50:	2b00      	cmp	r3, #0
   22c52:	d1e5      	bne.n	22c20 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   22c54:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   22c56:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   22c5a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   22c5c:	6254      	str	r4, [r2, #36]	; 0x24
}
   22c5e:	e7eb      	b.n	22c38 <z_set_prio+0x5c>
			thread->base.prio = prio;
   22c60:	73a1      	strb	r1, [r4, #14]
   22c62:	2000      	movs	r0, #0
   22c64:	e7ec      	b.n	22c40 <z_set_prio+0x64>
   22c66:	bf00      	nop
   22c68:	20003398 	.word	0x20003398

00022c6c <z_impl_k_thread_suspend>:
{
   22c6c:	b570      	push	{r4, r5, r6, lr}
   22c6e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   22c70:	3018      	adds	r0, #24
   22c72:	f007 fcf1 	bl	2a658 <z_abort_timeout>
	__asm__ volatile(
   22c76:	f04f 0320 	mov.w	r3, #32
   22c7a:	f3ef 8611 	mrs	r6, BASEPRI
   22c7e:	f383 8812 	msr	BASEPRI_MAX, r3
   22c82:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   22c86:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   22c8a:	7b63      	ldrb	r3, [r4, #13]
   22c8c:	2a00      	cmp	r2, #0
   22c8e:	da05      	bge.n	22c9c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22c90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22c94:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22c96:	4620      	mov	r0, r4
   22c98:	f007 fbcd 	bl	2a436 <sys_dlist_remove>
		update_cache(thread == _current);
   22c9c:	4d0b      	ldr	r5, [pc, #44]	; (22ccc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   22c9e:	7b63      	ldrb	r3, [r4, #13]
   22ca0:	68a8      	ldr	r0, [r5, #8]
   22ca2:	f043 0310 	orr.w	r3, r3, #16
   22ca6:	7363      	strb	r3, [r4, #13]
   22ca8:	1b03      	subs	r3, r0, r4
   22caa:	4258      	negs	r0, r3
   22cac:	4158      	adcs	r0, r3
   22cae:	f7ff fe55 	bl	2295c <update_cache>
	__asm__ volatile(
   22cb2:	f386 8811 	msr	BASEPRI, r6
   22cb6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   22cba:	68ab      	ldr	r3, [r5, #8]
   22cbc:	42a3      	cmp	r3, r4
   22cbe:	d103      	bne.n	22cc8 <z_impl_k_thread_suspend+0x5c>
}
   22cc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   22cc4:	f007 bc02 	b.w	2a4cc <z_reschedule_unlocked>
}
   22cc8:	bd70      	pop	{r4, r5, r6, pc}
   22cca:	bf00      	nop
   22ccc:	20003398 	.word	0x20003398

00022cd0 <k_sched_unlock>:
{
   22cd0:	b510      	push	{r4, lr}
	__asm__ volatile(
   22cd2:	f04f 0320 	mov.w	r3, #32
   22cd6:	f3ef 8411 	mrs	r4, BASEPRI
   22cda:	f383 8812 	msr	BASEPRI_MAX, r3
   22cde:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   22ce2:	4b08      	ldr	r3, [pc, #32]	; (22d04 <k_sched_unlock+0x34>)
   22ce4:	689a      	ldr	r2, [r3, #8]
   22ce6:	7bd3      	ldrb	r3, [r2, #15]
   22ce8:	3301      	adds	r3, #1
   22cea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   22cec:	2000      	movs	r0, #0
   22cee:	f7ff fe35 	bl	2295c <update_cache>
	__asm__ volatile(
   22cf2:	f384 8811 	msr	BASEPRI, r4
   22cf6:	f3bf 8f6f 	isb	sy
}
   22cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   22cfe:	f007 bbe5 	b.w	2a4cc <z_reschedule_unlocked>
   22d02:	bf00      	nop
   22d04:	20003398 	.word	0x20003398

00022d08 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   22d08:	4b04      	ldr	r3, [pc, #16]	; (22d1c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   22d0a:	2100      	movs	r1, #0
   22d0c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   22d10:	e9c3 2208 	strd	r2, r2, [r3, #32]
   22d14:	4608      	mov	r0, r1
   22d16:	f7ff bdcb 	b.w	228b0 <k_sched_time_slice_set>
   22d1a:	bf00      	nop
   22d1c:	20003398 	.word	0x20003398

00022d20 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   22d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22d22:	f04f 0320 	mov.w	r3, #32
   22d26:	f3ef 8511 	mrs	r5, BASEPRI
   22d2a:	f383 8812 	msr	BASEPRI_MAX, r3
   22d2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   22d32:	491a      	ldr	r1, [pc, #104]	; (22d9c <z_impl_k_yield+0x7c>)
   22d34:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22d36:	7b43      	ldrb	r3, [r0, #13]
   22d38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   22d3c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22d3e:	f007 fb7a 	bl	2a436 <sys_dlist_remove>
	}
	queue_thread(_current);
   22d42:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   22d44:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   22d46:	4608      	mov	r0, r1
   22d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
   22d4c:	735a      	strb	r2, [r3, #13]
   22d4e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22d52:	4282      	cmp	r2, r0
   22d54:	d01c      	beq.n	22d90 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22d56:	b1da      	cbz	r2, 22d90 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   22d58:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   22d5a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   22d5e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   22d62:	42a6      	cmp	r6, r4
   22d64:	d00f      	beq.n	22d86 <z_impl_k_yield+0x66>
		return b2 - b1;
   22d66:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   22d68:	2c00      	cmp	r4, #0
   22d6a:	dd0c      	ble.n	22d86 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   22d6c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   22d6e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   22d72:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   22d74:	6053      	str	r3, [r2, #4]
	update_cache(1);
   22d76:	2001      	movs	r0, #1
   22d78:	f7ff fdf0 	bl	2295c <update_cache>
   22d7c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   22d7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   22d82:	f7e3 bf03 	b.w	6b8c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   22d86:	42ba      	cmp	r2, r7
   22d88:	d002      	beq.n	22d90 <z_impl_k_yield+0x70>
   22d8a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   22d8c:	2a00      	cmp	r2, #0
   22d8e:	d1e6      	bne.n	22d5e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   22d90:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   22d92:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   22d96:	6013      	str	r3, [r2, #0]
	list->tail = node;
   22d98:	624b      	str	r3, [r1, #36]	; 0x24
}
   22d9a:	e7ec      	b.n	22d76 <z_impl_k_yield+0x56>
   22d9c:	20003398 	.word	0x20003398

00022da0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   22da0:	ea50 0301 	orrs.w	r3, r0, r1
{
   22da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22da8:	4605      	mov	r5, r0
   22daa:	460e      	mov	r6, r1
	if (ticks == 0) {
   22dac:	d103      	bne.n	22db6 <z_tick_sleep+0x16>
	z_impl_k_yield();
   22dae:	f7ff ffb7 	bl	22d20 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   22db2:	2000      	movs	r0, #0
   22db4:	e033      	b.n	22e1e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   22db6:	f06f 0401 	mvn.w	r4, #1
   22dba:	1a24      	subs	r4, r4, r0
   22dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22dc0:	eb63 0301 	sbc.w	r3, r3, r1
   22dc4:	2c01      	cmp	r4, #1
   22dc6:	f173 0300 	sbcs.w	r3, r3, #0
   22dca:	da02      	bge.n	22dd2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   22dcc:	f007 fc84 	bl	2a6d8 <sys_clock_tick_get_32>
   22dd0:	1944      	adds	r4, r0, r5
   22dd2:	f04f 0320 	mov.w	r3, #32
   22dd6:	f3ef 8811 	mrs	r8, BASEPRI
   22dda:	f383 8812 	msr	BASEPRI_MAX, r3
   22dde:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   22de2:	4f10      	ldr	r7, [pc, #64]	; (22e24 <z_tick_sleep+0x84>)
   22de4:	4b10      	ldr	r3, [pc, #64]	; (22e28 <z_tick_sleep+0x88>)
   22de6:	68b8      	ldr	r0, [r7, #8]
   22de8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   22dea:	f7ff fea5 	bl	22b38 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   22dee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   22df0:	490e      	ldr	r1, [pc, #56]	; (22e2c <z_tick_sleep+0x8c>)
   22df2:	462a      	mov	r2, r5
   22df4:	4633      	mov	r3, r6
   22df6:	3018      	adds	r0, #24
   22df8:	f000 f912 	bl	23020 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   22dfc:	68ba      	ldr	r2, [r7, #8]
   22dfe:	7b53      	ldrb	r3, [r2, #13]
   22e00:	f043 0310 	orr.w	r3, r3, #16
   22e04:	7353      	strb	r3, [r2, #13]
   22e06:	4640      	mov	r0, r8
   22e08:	f7e3 fec0 	bl	6b8c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   22e0c:	f007 fc64 	bl	2a6d8 <sys_clock_tick_get_32>
   22e10:	1a20      	subs	r0, r4, r0
   22e12:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   22e16:	2801      	cmp	r0, #1
   22e18:	f173 0300 	sbcs.w	r3, r3, #0
   22e1c:	dbc9      	blt.n	22db2 <z_tick_sleep+0x12>
}
   22e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   22e22:	bf00      	nop
   22e24:	20003398 	.word	0x20003398
   22e28:	200033c8 	.word	0x200033c8
   22e2c:	0002a50d 	.word	0x0002a50d

00022e30 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e30:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   22e34:	bf08      	it	eq
   22e36:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   22e3a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   22e3c:	d106      	bne.n	22e4c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   22e3e:	4b08      	ldr	r3, [pc, #32]	; (22e60 <z_impl_k_sleep+0x30>)
   22e40:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   22e42:	f7ff ff13 	bl	22c6c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   22e46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   22e4a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   22e4c:	f7ff ffa8 	bl	22da0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   22e50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   22e54:	fb80 0303 	smull	r0, r3, r0, r3
   22e58:	0bc0      	lsrs	r0, r0, #15
   22e5a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   22e5e:	e7f4      	b.n	22e4a <z_impl_k_sleep+0x1a>
   22e60:	20003398 	.word	0x20003398

00022e64 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   22e64:	4b01      	ldr	r3, [pc, #4]	; (22e6c <z_impl_z_current_get+0x8>)
   22e66:	6898      	ldr	r0, [r3, #8]
   22e68:	4770      	bx	lr
   22e6a:	bf00      	nop
   22e6c:	20003398 	.word	0x20003398

00022e70 <z_impl_k_is_preempt_thread>:
   22e70:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   22e74:	b93b      	cbnz	r3, 22e86 <z_impl_k_is_preempt_thread+0x16>
   22e76:	4b05      	ldr	r3, [pc, #20]	; (22e8c <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   22e78:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   22e7a:	89d8      	ldrh	r0, [r3, #14]
   22e7c:	287f      	cmp	r0, #127	; 0x7f
   22e7e:	bf8c      	ite	hi
   22e80:	2000      	movhi	r0, #0
   22e82:	2001      	movls	r0, #1
   22e84:	4770      	bx	lr
   22e86:	2000      	movs	r0, #0
}
   22e88:	4770      	bx	lr
   22e8a:	bf00      	nop
   22e8c:	20003398 	.word	0x20003398

00022e90 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   22e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22e94:	4604      	mov	r4, r0
   22e96:	f04f 0320 	mov.w	r3, #32
   22e9a:	f3ef 8611 	mrs	r6, BASEPRI
   22e9e:	f383 8812 	msr	BASEPRI_MAX, r3
   22ea2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   22ea6:	7b43      	ldrb	r3, [r0, #13]
   22ea8:	071a      	lsls	r2, r3, #28
   22eaa:	d505      	bpl.n	22eb8 <z_thread_abort+0x28>
	__asm__ volatile(
   22eac:	f386 8811 	msr	BASEPRI, r6
   22eb0:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   22eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22eb8:	f023 0220 	bic.w	r2, r3, #32
   22ebc:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   22ec0:	09d2      	lsrs	r2, r2, #7
   22ec2:	d120      	bne.n	22f06 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   22ec4:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   22ec6:	68a3      	ldr	r3, [r4, #8]
   22ec8:	b113      	cbz	r3, 22ed0 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   22eca:	4620      	mov	r0, r4
   22ecc:	f007 fabb 	bl	2a446 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   22ed0:	f104 0018 	add.w	r0, r4, #24
   22ed4:	f007 fbc0 	bl	2a658 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   22ed8:	f104 0758 	add.w	r7, r4, #88	; 0x58
   22edc:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   22ee0:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22ee2:	42bd      	cmp	r5, r7
   22ee4:	d000      	beq.n	22ee8 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   22ee6:	b9b5      	cbnz	r5, 22f16 <z_thread_abort+0x86>
		update_cache(1);
   22ee8:	2001      	movs	r0, #1
   22eea:	f7ff fd37 	bl	2295c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   22eee:	4b10      	ldr	r3, [pc, #64]	; (22f30 <z_thread_abort+0xa0>)
   22ef0:	689b      	ldr	r3, [r3, #8]
   22ef2:	42a3      	cmp	r3, r4
   22ef4:	d1da      	bne.n	22eac <z_thread_abort+0x1c>
   22ef6:	f3ef 8305 	mrs	r3, IPSR
   22efa:	2b00      	cmp	r3, #0
   22efc:	d1d6      	bne.n	22eac <z_thread_abort+0x1c>
   22efe:	4630      	mov	r0, r6
   22f00:	f7e3 fe44 	bl	6b8c <arch_swap>
	return ret;
   22f04:	e7d2      	b.n	22eac <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   22f06:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   22f0a:	f043 0308 	orr.w	r3, r3, #8
   22f0e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   22f10:	f007 fa91 	bl	2a436 <sys_dlist_remove>
}
   22f14:	e7d7      	b.n	22ec6 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   22f16:	4628      	mov	r0, r5
   22f18:	f007 fa95 	bl	2a446 <unpend_thread_no_timeout>
   22f1c:	f105 0018 	add.w	r0, r5, #24
   22f20:	f007 fb9a 	bl	2a658 <z_abort_timeout>
   22f24:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   22f28:	4628      	mov	r0, r5
   22f2a:	f7ff fdb1 	bl	22a90 <ready_thread>
   22f2e:	e7d7      	b.n	22ee0 <z_thread_abort+0x50>
   22f30:	20003398 	.word	0x20003398

00022f34 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   22f34:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22f36:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   22f3a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   22f3c:	e9cd 6700 	strd	r6, r7, [sp]
   22f40:	f7ff fe38 	bl	22bb4 <z_pend_curr>

	if (data != NULL) {
   22f44:	b11c      	cbz	r4, 22f4e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   22f46:	4b03      	ldr	r3, [pc, #12]	; (22f54 <z_sched_wait+0x20>)
   22f48:	689b      	ldr	r3, [r3, #8]
   22f4a:	695b      	ldr	r3, [r3, #20]
   22f4c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   22f4e:	b002      	add	sp, #8
   22f50:	bdd0      	pop	{r4, r6, r7, pc}
   22f52:	bf00      	nop
   22f54:	20003398 	.word	0x20003398

00022f58 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   22f58:	b508      	push	{r3, lr}
   22f5a:	4806      	ldr	r0, [pc, #24]	; (22f74 <z_data_copy+0x1c>)
   22f5c:	4a06      	ldr	r2, [pc, #24]	; (22f78 <z_data_copy+0x20>)
   22f5e:	4907      	ldr	r1, [pc, #28]	; (22f7c <z_data_copy+0x24>)
   22f60:	1a12      	subs	r2, r2, r0
   22f62:	f007 fd7a 	bl	2aa5a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   22f66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   22f6a:	4a05      	ldr	r2, [pc, #20]	; (22f80 <z_data_copy+0x28>)
   22f6c:	4905      	ldr	r1, [pc, #20]	; (22f84 <z_data_copy+0x2c>)
   22f6e:	4806      	ldr	r0, [pc, #24]	; (22f88 <z_data_copy+0x30>)
   22f70:	f007 bd73 	b.w	2aa5a <memcpy>
   22f74:	20000000 	.word	0x20000000
   22f78:	20000d7c 	.word	0x20000d7c
   22f7c:	0002f5c4 	.word	0x0002f5c4
   22f80:	00000000 	.word	0x00000000
   22f84:	0002f5c4 	.word	0x0002f5c4
   22f88:	20000000 	.word	0x20000000

00022f8c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   22f8c:	4b03      	ldr	r3, [pc, #12]	; (22f9c <elapsed+0x10>)
   22f8e:	681b      	ldr	r3, [r3, #0]
   22f90:	b90b      	cbnz	r3, 22f96 <elapsed+0xa>
   22f92:	f7fe b819 	b.w	20fc8 <sys_clock_elapsed>
}
   22f96:	2000      	movs	r0, #0
   22f98:	4770      	bx	lr
   22f9a:	bf00      	nop
   22f9c:	200033d4 	.word	0x200033d4

00022fa0 <next_timeout>:
	return list->head == list;
   22fa0:	4b10      	ldr	r3, [pc, #64]	; (22fe4 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   22fa2:	b510      	push	{r4, lr}
   22fa4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   22fa6:	429c      	cmp	r4, r3
   22fa8:	bf08      	it	eq
   22faa:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   22fac:	f7ff ffee 	bl	22f8c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   22fb0:	b1a4      	cbz	r4, 22fdc <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   22fb2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   22fb6:	1a1b      	subs	r3, r3, r0
   22fb8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   22fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   22fc0:	f170 0200 	sbcs.w	r2, r0, #0
   22fc4:	da0a      	bge.n	22fdc <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   22fc6:	2800      	cmp	r0, #0
   22fc8:	bfac      	ite	ge
   22fca:	4618      	movge	r0, r3
   22fcc:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   22fce:	4b06      	ldr	r3, [pc, #24]	; (22fe8 <next_timeout+0x48>)
   22fd0:	691b      	ldr	r3, [r3, #16]
   22fd2:	b113      	cbz	r3, 22fda <next_timeout+0x3a>
   22fd4:	4298      	cmp	r0, r3
   22fd6:	bfa8      	it	ge
   22fd8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   22fda:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   22fdc:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   22fe0:	e7f5      	b.n	22fce <next_timeout+0x2e>
   22fe2:	bf00      	nop
   22fe4:	2000079c 	.word	0x2000079c
   22fe8:	20003398 	.word	0x20003398

00022fec <remove_timeout>:
{
   22fec:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   22fee:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   22ff0:	b168      	cbz	r0, 2300e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   22ff2:	4a0a      	ldr	r2, [pc, #40]	; (2301c <remove_timeout+0x30>)
   22ff4:	6852      	ldr	r2, [r2, #4]
   22ff6:	4290      	cmp	r0, r2
   22ff8:	d009      	beq.n	2300e <remove_timeout+0x22>
	if (next(t) != NULL) {
   22ffa:	b143      	cbz	r3, 2300e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   22ffc:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   23000:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   23004:	1912      	adds	r2, r2, r4
   23006:	eb41 0105 	adc.w	r1, r1, r5
   2300a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   2300e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   23010:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23012:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   23014:	2300      	movs	r3, #0
	node->prev = NULL;
   23016:	e9c0 3300 	strd	r3, r3, [r0]
}
   2301a:	bd30      	pop	{r4, r5, pc}
   2301c:	2000079c 	.word	0x2000079c

00023020 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23024:	bf08      	it	eq
   23026:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   2302a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2302c:	4604      	mov	r4, r0
   2302e:	461f      	mov	r7, r3
   23030:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   23032:	d067      	beq.n	23104 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   23034:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   23036:	f04f 0320 	mov.w	r3, #32
   2303a:	f3ef 8611 	mrs	r6, BASEPRI
   2303e:	f383 8812 	msr	BASEPRI_MAX, r3
   23042:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   23046:	f06f 0201 	mvn.w	r2, #1
   2304a:	1b53      	subs	r3, r2, r5
   2304c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   23050:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   23054:	2b00      	cmp	r3, #0
   23056:	db1b      	blt.n	23090 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   23058:	4b2b      	ldr	r3, [pc, #172]	; (23108 <z_add_timeout+0xe8>)
   2305a:	e9d3 1300 	ldrd	r1, r3, [r3]
   2305e:	1a52      	subs	r2, r2, r1
   23060:	eb6c 0303 	sbc.w	r3, ip, r3
   23064:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   23066:	eb63 0307 	sbc.w	r3, r3, r7
   2306a:	2d01      	cmp	r5, #1
   2306c:	f173 0200 	sbcs.w	r2, r3, #0
   23070:	bfbc      	itt	lt
   23072:	2501      	movlt	r5, #1
   23074:	2300      	movlt	r3, #0
   23076:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   2307a:	4824      	ldr	r0, [pc, #144]	; (2310c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   2307c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23080:	4283      	cmp	r3, r0
   23082:	d118      	bne.n	230b6 <z_add_timeout+0x96>
	node->prev = tail;
   23084:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   23088:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   2308c:	6044      	str	r4, [r0, #4]
}
   2308e:	e026      	b.n	230de <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   23090:	f7ff ff7c 	bl	22f8c <elapsed>
   23094:	3501      	adds	r5, #1
   23096:	f147 0700 	adc.w	r7, r7, #0
   2309a:	182d      	adds	r5, r5, r0
   2309c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   230a0:	e9c4 5704 	strd	r5, r7, [r4, #16]
   230a4:	e7e9      	b.n	2307a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   230a6:	1a52      	subs	r2, r2, r1
   230a8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   230ac:	459c      	cmp	ip, r3
   230ae:	e9c4 2504 	strd	r2, r5, [r4, #16]
   230b2:	d0e7      	beq.n	23084 <z_add_timeout+0x64>
   230b4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   230b6:	2b00      	cmp	r3, #0
   230b8:	d0e4      	beq.n	23084 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   230ba:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   230be:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   230c2:	428a      	cmp	r2, r1
   230c4:	eb75 0e07 	sbcs.w	lr, r5, r7
   230c8:	daed      	bge.n	230a6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   230ca:	1a8a      	subs	r2, r1, r2
   230cc:	eb67 0505 	sbc.w	r5, r7, r5
   230d0:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   230d4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   230d6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   230da:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   230dc:	605c      	str	r4, [r3, #4]
	return list->head == list;
   230de:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   230e0:	4283      	cmp	r3, r0
   230e2:	d00b      	beq.n	230fc <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   230e4:	429c      	cmp	r4, r3
   230e6:	d109      	bne.n	230fc <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   230e8:	f7ff ff5a 	bl	22fa0 <next_timeout>

			if (next_time == 0 ||
   230ec:	b118      	cbz	r0, 230f6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   230ee:	4b08      	ldr	r3, [pc, #32]	; (23110 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   230f0:	691b      	ldr	r3, [r3, #16]
   230f2:	4283      	cmp	r3, r0
   230f4:	d002      	beq.n	230fc <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   230f6:	2100      	movs	r1, #0
   230f8:	f7fd ff34 	bl	20f64 <sys_clock_set_timeout>
	__asm__ volatile(
   230fc:	f386 8811 	msr	BASEPRI, r6
   23100:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   23104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23106:	bf00      	nop
   23108:	20001e08 	.word	0x20001e08
   2310c:	2000079c 	.word	0x2000079c
   23110:	20003398 	.word	0x20003398

00023114 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   23114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23118:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2311a:	f7ff fc79 	bl	22a10 <z_time_slice>
	__asm__ volatile(
   2311e:	f04f 0320 	mov.w	r3, #32
   23122:	f3ef 8411 	mrs	r4, BASEPRI
   23126:	f383 8812 	msr	BASEPRI_MAX, r3
   2312a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   2312e:	4e24      	ldr	r6, [pc, #144]	; (231c0 <sys_clock_announce+0xac>)
	return list->head == list;
   23130:	f8df 8090 	ldr.w	r8, [pc, #144]	; 231c4 <sys_clock_announce+0xb0>
   23134:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   23136:	4d24      	ldr	r5, [pc, #144]	; (231c8 <sys_clock_announce+0xb4>)
   23138:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2313c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2313e:	4540      	cmp	r0, r8
		curr_tick += dt;
   23140:	e9d5 1e00 	ldrd	r1, lr, [r5]
   23144:	ea4f 77e2 	mov.w	r7, r2, asr #31
   23148:	d00b      	beq.n	23162 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2314a:	b150      	cbz	r0, 23162 <sys_clock_announce+0x4e>
   2314c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   23150:	429a      	cmp	r2, r3
   23152:	eb77 090c 	sbcs.w	r9, r7, ip
   23156:	da16      	bge.n	23186 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   23158:	1a9b      	subs	r3, r3, r2
   2315a:	eb6c 0c07 	sbc.w	ip, ip, r7
   2315e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   23162:	1852      	adds	r2, r2, r1
   23164:	eb4e 0707 	adc.w	r7, lr, r7
   23168:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   2316c:	2500      	movs	r5, #0
   2316e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   23170:	f7ff ff16 	bl	22fa0 <next_timeout>
   23174:	4629      	mov	r1, r5
   23176:	f7fd fef5 	bl	20f64 <sys_clock_set_timeout>
	__asm__ volatile(
   2317a:	f384 8811 	msr	BASEPRI, r4
   2317e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   23182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   23186:	1859      	adds	r1, r3, r1
   23188:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   2318c:	1ad3      	subs	r3, r2, r3
   2318e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   23190:	2200      	movs	r2, #0
   23192:	2300      	movs	r3, #0
   23194:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   23198:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   2319c:	f7ff ff26 	bl	22fec <remove_timeout>
   231a0:	f384 8811 	msr	BASEPRI, r4
   231a4:	f3bf 8f6f 	isb	sy
		t->fn(t);
   231a8:	6883      	ldr	r3, [r0, #8]
   231aa:	4798      	blx	r3
	__asm__ volatile(
   231ac:	f04f 0320 	mov.w	r3, #32
   231b0:	f3ef 8411 	mrs	r4, BASEPRI
   231b4:	f383 8812 	msr	BASEPRI_MAX, r3
   231b8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   231bc:	e7bc      	b.n	23138 <sys_clock_announce+0x24>
   231be:	bf00      	nop
   231c0:	200033d4 	.word	0x200033d4
   231c4:	2000079c 	.word	0x2000079c
   231c8:	20001e08 	.word	0x20001e08

000231cc <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   231cc:	b510      	push	{r4, lr}
   231ce:	f04f 0320 	mov.w	r3, #32
   231d2:	f3ef 8411 	mrs	r4, BASEPRI
   231d6:	f383 8812 	msr	BASEPRI_MAX, r3
   231da:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   231de:	f7fd fef3 	bl	20fc8 <sys_clock_elapsed>
   231e2:	4a05      	ldr	r2, [pc, #20]	; (231f8 <sys_clock_tick_get+0x2c>)
   231e4:	e9d2 3100 	ldrd	r3, r1, [r2]
   231e8:	18c0      	adds	r0, r0, r3
   231ea:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   231ee:	f384 8811 	msr	BASEPRI, r4
   231f2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   231f6:	bd10      	pop	{r4, pc}
   231f8:	20001e08 	.word	0x20001e08

000231fc <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   231fc:	b570      	push	{r4, r5, r6, lr}
   231fe:	4604      	mov	r4, r0
	__asm__ volatile(
   23200:	f04f 0320 	mov.w	r3, #32
   23204:	f3ef 8511 	mrs	r5, BASEPRI
   23208:	f383 8812 	msr	BASEPRI_MAX, r3
   2320c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   23210:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   23214:	3301      	adds	r3, #1
   23216:	f142 0200 	adc.w	r2, r2, #0
   2321a:	2b02      	cmp	r3, #2
   2321c:	f172 0300 	sbcs.w	r3, r2, #0
   23220:	d304      	bcc.n	2322c <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23222:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   23226:	4917      	ldr	r1, [pc, #92]	; (23284 <z_timer_expiration_handler+0x88>)
   23228:	f7ff fefa 	bl	23020 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   2322c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2322e:	3301      	adds	r3, #1
   23230:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   23232:	6a23      	ldr	r3, [r4, #32]
   23234:	b173      	cbz	r3, 23254 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   23236:	f385 8811 	msr	BASEPRI, r5
   2323a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   2323e:	6a23      	ldr	r3, [r4, #32]
   23240:	4620      	mov	r0, r4
   23242:	4798      	blx	r3
	__asm__ volatile(
   23244:	f04f 0320 	mov.w	r3, #32
   23248:	f3ef 8511 	mrs	r5, BASEPRI
   2324c:	f383 8812 	msr	BASEPRI_MAX, r3
   23250:	f3bf 8f6f 	isb	sy
	return list->head == list;
   23254:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   23258:	42a6      	cmp	r6, r4
   2325a:	d000      	beq.n	2325e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2325c:	b926      	cbnz	r6, 23268 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   2325e:	f385 8811 	msr	BASEPRI, r5
   23262:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   23266:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   23268:	4630      	mov	r0, r6
   2326a:	f007 f8ff 	bl	2a46c <z_unpend_thread_no_timeout>
   2326e:	2300      	movs	r3, #0
   23270:	67f3      	str	r3, [r6, #124]	; 0x7c
   23272:	f385 8811 	msr	BASEPRI, r5
   23276:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   2327a:	4630      	mov	r0, r6
}
   2327c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   23280:	f007 b934 	b.w	2a4ec <z_ready_thread>
   23284:	000231fd 	.word	0x000231fd

00023288 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   23288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2328c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2328e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   23292:	bf08      	it	eq
   23294:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   23298:	4606      	mov	r6, r0
   2329a:	461c      	mov	r4, r3
   2329c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   232a0:	4689      	mov	r9, r1
   232a2:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   232a4:	d03e      	beq.n	23324 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   232a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   232aa:	bf08      	it	eq
   232ac:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   232b0:	4615      	mov	r5, r2
   232b2:	4607      	mov	r7, r0
   232b4:	d014      	beq.n	232e0 <z_impl_k_timer_start+0x58>
   232b6:	ea50 0302 	orrs.w	r3, r0, r2
   232ba:	d011      	beq.n	232e0 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   232bc:	f06f 0301 	mvn.w	r3, #1
   232c0:	1a9b      	subs	r3, r3, r2
   232c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   232c6:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   232ca:	2b00      	cmp	r3, #0
   232cc:	da08      	bge.n	232e0 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   232ce:	2a02      	cmp	r2, #2
   232d0:	f170 0300 	sbcs.w	r3, r0, #0
   232d4:	bfbc      	itt	lt
   232d6:	2502      	movlt	r5, #2
   232d8:	2700      	movlt	r7, #0
   232da:	3d01      	subs	r5, #1
   232dc:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   232e0:	f06f 0301 	mvn.w	r3, #1
   232e4:	1a5b      	subs	r3, r3, r1
   232e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   232ea:	eb63 0304 	sbc.w	r3, r3, r4
   232ee:	2b00      	cmp	r3, #0
   232f0:	da09      	bge.n	23306 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   232f2:	2901      	cmp	r1, #1
   232f4:	f174 0300 	sbcs.w	r3, r4, #0
   232f8:	bfbc      	itt	lt
   232fa:	2101      	movlt	r1, #1
   232fc:	2400      	movlt	r4, #0
   232fe:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   23302:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   23306:	4630      	mov	r0, r6
   23308:	f007 f9a6 	bl	2a658 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   2330c:	2300      	movs	r3, #0
   2330e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   23310:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23314:	464a      	mov	r2, r9
   23316:	4643      	mov	r3, r8
   23318:	4630      	mov	r0, r6
   2331a:	4903      	ldr	r1, [pc, #12]	; (23328 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   2331c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   23320:	f7ff be7e 	b.w	23020 <z_add_timeout>
}
   23324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23328:	000231fd 	.word	0x000231fd

0002332c <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   2332c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   23330:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   23332:	4b29      	ldr	r3, [pc, #164]	; (233d8 <z_impl_k_poll+0xac>)
   23334:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   23336:	2301      	movs	r3, #1
   23338:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   2333c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   23340:	ea52 0305 	orrs.w	r3, r2, r5
{
   23344:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   23346:	bf0c      	ite	eq
   23348:	2301      	moveq	r3, #1
   2334a:	2300      	movne	r3, #0
   2334c:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   23350:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   23352:	f007 fa4e 	bl	2a7f2 <register_events>
   23356:	4681      	mov	r9, r0
	__asm__ volatile(
   23358:	f04f 0320 	mov.w	r3, #32
   2335c:	f3ef 8a11 	mrs	sl, BASEPRI
   23360:	f383 8812 	msr	BASEPRI_MAX, r3
   23364:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   23368:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   2336c:	b964      	cbnz	r4, 23388 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2336e:	4601      	mov	r1, r0
   23370:	4652      	mov	r2, sl
   23372:	4640      	mov	r0, r8
   23374:	f007 fb0e 	bl	2a994 <clear_event_registrations>
	__asm__ volatile(
   23378:	f38a 8811 	msr	BASEPRI, sl
   2337c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   23380:	4620      	mov	r0, r4
   23382:	b002      	add	sp, #8
   23384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   23388:	2300      	movs	r3, #0
   2338a:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2338e:	ea56 0305 	orrs.w	r3, r6, r5
   23392:	d106      	bne.n	233a2 <z_impl_k_poll+0x76>
   23394:	f38a 8811 	msr	BASEPRI, sl
   23398:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   2339c:	f06f 040a 	mvn.w	r4, #10
   233a0:	e7ee      	b.n	23380 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   233a2:	e9cd 6500 	strd	r6, r5, [sp]
   233a6:	4a0d      	ldr	r2, [pc, #52]	; (233dc <z_impl_k_poll+0xb0>)
   233a8:	480d      	ldr	r0, [pc, #52]	; (233e0 <z_impl_k_poll+0xb4>)
   233aa:	4651      	mov	r1, sl
   233ac:	f7ff fc02 	bl	22bb4 <z_pend_curr>
   233b0:	4604      	mov	r4, r0
	__asm__ volatile(
   233b2:	f04f 0320 	mov.w	r3, #32
   233b6:	f3ef 8511 	mrs	r5, BASEPRI
   233ba:	f383 8812 	msr	BASEPRI_MAX, r3
   233be:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   233c2:	462a      	mov	r2, r5
   233c4:	4649      	mov	r1, r9
   233c6:	4640      	mov	r0, r8
   233c8:	f007 fae4 	bl	2a994 <clear_event_registrations>
	__asm__ volatile(
   233cc:	f385 8811 	msr	BASEPRI, r5
   233d0:	f3bf 8f6f 	isb	sy
	return swap_rc;
   233d4:	e7d4      	b.n	23380 <z_impl_k_poll+0x54>
   233d6:	bf00      	nop
   233d8:	20003398 	.word	0x20003398
   233dc:	200007a4 	.word	0x200007a4
   233e0:	20003992 	.word	0x20003992

000233e4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   233e4:	b538      	push	{r3, r4, r5, lr}
   233e6:	4603      	mov	r3, r0
	__asm__ volatile(
   233e8:	f04f 0220 	mov.w	r2, #32
   233ec:	f3ef 8511 	mrs	r5, BASEPRI
   233f0:	f382 8812 	msr	BASEPRI_MAX, r2
   233f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   233f8:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   233fa:	2101      	movs	r1, #1
   233fc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   233fe:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   23400:	4283      	cmp	r3, r0
   23402:	d106      	bne.n	23412 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   23404:	f385 8811 	msr	BASEPRI, r5
   23408:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   2340c:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   2340e:	4620      	mov	r0, r4
   23410:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   23412:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   23416:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   23418:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2341a:	2300      	movs	r3, #0
	node->prev = NULL;
   2341c:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23420:	f007 fa5e 	bl	2a8e0 <signal_poll_event>
	z_reschedule(&lock, key);
   23424:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   23426:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   23428:	4801      	ldr	r0, [pc, #4]	; (23430 <z_impl_k_poll_signal_raise+0x4c>)
   2342a:	f7ff fa71 	bl	22910 <z_reschedule>
	return rc;
   2342e:	e7ee      	b.n	2340e <z_impl_k_poll_signal_raise+0x2a>
   23430:	20003992 	.word	0x20003992

00023434 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   23434:	b573      	push	{r0, r1, r4, r5, r6, lr}
   23436:	4606      	mov	r6, r0
   23438:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   2343a:	f006 fdfa 	bl	2a032 <k_is_in_isr>
   2343e:	b978      	cbnz	r0, 23460 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   23440:	4b0b      	ldr	r3, [pc, #44]	; (23470 <z_thread_aligned_alloc+0x3c>)
   23442:	689b      	ldr	r3, [r3, #8]
   23444:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   23446:	b17c      	cbz	r4, 23468 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   23448:	1d2a      	adds	r2, r5, #4
   2344a:	d209      	bcs.n	23460 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2344c:	2000      	movs	r0, #0
   2344e:	2100      	movs	r1, #0
   23450:	e9cd 0100 	strd	r0, r1, [sp]
   23454:	f046 0104 	orr.w	r1, r6, #4
   23458:	4620      	mov	r0, r4
   2345a:	f006 fd63 	bl	29f24 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2345e:	b908      	cbnz	r0, 23464 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   23460:	2400      	movs	r4, #0
	}

	return ret;
   23462:	e001      	b.n	23468 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   23464:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   23466:	1d04      	adds	r4, r0, #4
}
   23468:	4620      	mov	r0, r4
   2346a:	b002      	add	sp, #8
   2346c:	bd70      	pop	{r4, r5, r6, pc}
   2346e:	bf00      	nop
   23470:	20003398 	.word	0x20003398

00023474 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   23474:	4a02      	ldr	r2, [pc, #8]	; (23480 <boot_banner+0xc>)
   23476:	4903      	ldr	r1, [pc, #12]	; (23484 <boot_banner+0x10>)
   23478:	4803      	ldr	r0, [pc, #12]	; (23488 <boot_banner+0x14>)
   2347a:	f001 bd44 	b.w	24f06 <printk>
   2347e:	bf00      	nop
   23480:	0002d61f 	.word	0x0002d61f
   23484:	0002f320 	.word	0x0002f320
   23488:	0002f32e 	.word	0x0002f32e

0002348c <malloc>:
   2348c:	4b02      	ldr	r3, [pc, #8]	; (23498 <malloc+0xc>)
   2348e:	4601      	mov	r1, r0
   23490:	6818      	ldr	r0, [r3, #0]
   23492:	f000 b84d 	b.w	23530 <_malloc_r>
   23496:	bf00      	nop
   23498:	200007ac 	.word	0x200007ac

0002349c <_free_r>:
   2349c:	b538      	push	{r3, r4, r5, lr}
   2349e:	4605      	mov	r5, r0
   234a0:	2900      	cmp	r1, #0
   234a2:	d041      	beq.n	23528 <_free_r+0x8c>
   234a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
   234a8:	1f0c      	subs	r4, r1, #4
   234aa:	2b00      	cmp	r3, #0
   234ac:	bfb8      	it	lt
   234ae:	18e4      	addlt	r4, r4, r3
   234b0:	f000 fc2a 	bl	23d08 <__malloc_lock>
   234b4:	4a1d      	ldr	r2, [pc, #116]	; (2352c <_free_r+0x90>)
   234b6:	6813      	ldr	r3, [r2, #0]
   234b8:	b933      	cbnz	r3, 234c8 <_free_r+0x2c>
   234ba:	6063      	str	r3, [r4, #4]
   234bc:	6014      	str	r4, [r2, #0]
   234be:	4628      	mov	r0, r5
   234c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   234c4:	f000 bc26 	b.w	23d14 <__malloc_unlock>
   234c8:	42a3      	cmp	r3, r4
   234ca:	d908      	bls.n	234de <_free_r+0x42>
   234cc:	6820      	ldr	r0, [r4, #0]
   234ce:	1821      	adds	r1, r4, r0
   234d0:	428b      	cmp	r3, r1
   234d2:	bf01      	itttt	eq
   234d4:	6819      	ldreq	r1, [r3, #0]
   234d6:	685b      	ldreq	r3, [r3, #4]
   234d8:	1809      	addeq	r1, r1, r0
   234da:	6021      	streq	r1, [r4, #0]
   234dc:	e7ed      	b.n	234ba <_free_r+0x1e>
   234de:	461a      	mov	r2, r3
   234e0:	685b      	ldr	r3, [r3, #4]
   234e2:	b10b      	cbz	r3, 234e8 <_free_r+0x4c>
   234e4:	42a3      	cmp	r3, r4
   234e6:	d9fa      	bls.n	234de <_free_r+0x42>
   234e8:	6811      	ldr	r1, [r2, #0]
   234ea:	1850      	adds	r0, r2, r1
   234ec:	42a0      	cmp	r0, r4
   234ee:	d10b      	bne.n	23508 <_free_r+0x6c>
   234f0:	6820      	ldr	r0, [r4, #0]
   234f2:	4401      	add	r1, r0
   234f4:	1850      	adds	r0, r2, r1
   234f6:	4283      	cmp	r3, r0
   234f8:	6011      	str	r1, [r2, #0]
   234fa:	d1e0      	bne.n	234be <_free_r+0x22>
   234fc:	6818      	ldr	r0, [r3, #0]
   234fe:	685b      	ldr	r3, [r3, #4]
   23500:	6053      	str	r3, [r2, #4]
   23502:	4401      	add	r1, r0
   23504:	6011      	str	r1, [r2, #0]
   23506:	e7da      	b.n	234be <_free_r+0x22>
   23508:	d902      	bls.n	23510 <_free_r+0x74>
   2350a:	230c      	movs	r3, #12
   2350c:	602b      	str	r3, [r5, #0]
   2350e:	e7d6      	b.n	234be <_free_r+0x22>
   23510:	6820      	ldr	r0, [r4, #0]
   23512:	1821      	adds	r1, r4, r0
   23514:	428b      	cmp	r3, r1
   23516:	bf04      	itt	eq
   23518:	6819      	ldreq	r1, [r3, #0]
   2351a:	685b      	ldreq	r3, [r3, #4]
   2351c:	6063      	str	r3, [r4, #4]
   2351e:	bf04      	itt	eq
   23520:	1809      	addeq	r1, r1, r0
   23522:	6021      	streq	r1, [r4, #0]
   23524:	6054      	str	r4, [r2, #4]
   23526:	e7ca      	b.n	234be <_free_r+0x22>
   23528:	bd38      	pop	{r3, r4, r5, pc}
   2352a:	bf00      	nop
   2352c:	200033d8 	.word	0x200033d8

00023530 <_malloc_r>:
   23530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23532:	1ccd      	adds	r5, r1, #3
   23534:	f025 0503 	bic.w	r5, r5, #3
   23538:	3508      	adds	r5, #8
   2353a:	2d0c      	cmp	r5, #12
   2353c:	bf38      	it	cc
   2353e:	250c      	movcc	r5, #12
   23540:	2d00      	cmp	r5, #0
   23542:	4606      	mov	r6, r0
   23544:	db01      	blt.n	2354a <_malloc_r+0x1a>
   23546:	42a9      	cmp	r1, r5
   23548:	d903      	bls.n	23552 <_malloc_r+0x22>
   2354a:	230c      	movs	r3, #12
   2354c:	6033      	str	r3, [r6, #0]
   2354e:	2000      	movs	r0, #0
   23550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23552:	f000 fbd9 	bl	23d08 <__malloc_lock>
   23556:	4921      	ldr	r1, [pc, #132]	; (235dc <_malloc_r+0xac>)
   23558:	680a      	ldr	r2, [r1, #0]
   2355a:	4614      	mov	r4, r2
   2355c:	b99c      	cbnz	r4, 23586 <_malloc_r+0x56>
   2355e:	4f20      	ldr	r7, [pc, #128]	; (235e0 <_malloc_r+0xb0>)
   23560:	683b      	ldr	r3, [r7, #0]
   23562:	b923      	cbnz	r3, 2356e <_malloc_r+0x3e>
   23564:	4621      	mov	r1, r4
   23566:	4630      	mov	r0, r6
   23568:	f000 fb8c 	bl	23c84 <_sbrk_r>
   2356c:	6038      	str	r0, [r7, #0]
   2356e:	4629      	mov	r1, r5
   23570:	4630      	mov	r0, r6
   23572:	f000 fb87 	bl	23c84 <_sbrk_r>
   23576:	1c43      	adds	r3, r0, #1
   23578:	d123      	bne.n	235c2 <_malloc_r+0x92>
   2357a:	230c      	movs	r3, #12
   2357c:	6033      	str	r3, [r6, #0]
   2357e:	4630      	mov	r0, r6
   23580:	f000 fbc8 	bl	23d14 <__malloc_unlock>
   23584:	e7e3      	b.n	2354e <_malloc_r+0x1e>
   23586:	6823      	ldr	r3, [r4, #0]
   23588:	1b5b      	subs	r3, r3, r5
   2358a:	d417      	bmi.n	235bc <_malloc_r+0x8c>
   2358c:	2b0b      	cmp	r3, #11
   2358e:	d903      	bls.n	23598 <_malloc_r+0x68>
   23590:	6023      	str	r3, [r4, #0]
   23592:	441c      	add	r4, r3
   23594:	6025      	str	r5, [r4, #0]
   23596:	e004      	b.n	235a2 <_malloc_r+0x72>
   23598:	6863      	ldr	r3, [r4, #4]
   2359a:	42a2      	cmp	r2, r4
   2359c:	bf0c      	ite	eq
   2359e:	600b      	streq	r3, [r1, #0]
   235a0:	6053      	strne	r3, [r2, #4]
   235a2:	4630      	mov	r0, r6
   235a4:	f000 fbb6 	bl	23d14 <__malloc_unlock>
   235a8:	f104 000b 	add.w	r0, r4, #11
   235ac:	1d23      	adds	r3, r4, #4
   235ae:	f020 0007 	bic.w	r0, r0, #7
   235b2:	1ac2      	subs	r2, r0, r3
   235b4:	d0cc      	beq.n	23550 <_malloc_r+0x20>
   235b6:	1a1b      	subs	r3, r3, r0
   235b8:	50a3      	str	r3, [r4, r2]
   235ba:	e7c9      	b.n	23550 <_malloc_r+0x20>
   235bc:	4622      	mov	r2, r4
   235be:	6864      	ldr	r4, [r4, #4]
   235c0:	e7cc      	b.n	2355c <_malloc_r+0x2c>
   235c2:	1cc4      	adds	r4, r0, #3
   235c4:	f024 0403 	bic.w	r4, r4, #3
   235c8:	42a0      	cmp	r0, r4
   235ca:	d0e3      	beq.n	23594 <_malloc_r+0x64>
   235cc:	1a21      	subs	r1, r4, r0
   235ce:	4630      	mov	r0, r6
   235d0:	f000 fb58 	bl	23c84 <_sbrk_r>
   235d4:	3001      	adds	r0, #1
   235d6:	d1dd      	bne.n	23594 <_malloc_r+0x64>
   235d8:	e7cf      	b.n	2357a <_malloc_r+0x4a>
   235da:	bf00      	nop
   235dc:	200033d8 	.word	0x200033d8
   235e0:	200033dc 	.word	0x200033dc

000235e4 <_printf_float>:
   235e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235e8:	b091      	sub	sp, #68	; 0x44
   235ea:	460c      	mov	r4, r1
   235ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   235f0:	4616      	mov	r6, r2
   235f2:	461f      	mov	r7, r3
   235f4:	4605      	mov	r5, r0
   235f6:	f000 fb83 	bl	23d00 <_localeconv_r>
   235fa:	6803      	ldr	r3, [r0, #0]
   235fc:	9309      	str	r3, [sp, #36]	; 0x24
   235fe:	4618      	mov	r0, r3
   23600:	f7dd fbf9 	bl	df6 <strlen>
   23604:	2300      	movs	r3, #0
   23606:	930e      	str	r3, [sp, #56]	; 0x38
   23608:	f8d8 3000 	ldr.w	r3, [r8]
   2360c:	900a      	str	r0, [sp, #40]	; 0x28
   2360e:	3307      	adds	r3, #7
   23610:	f023 0307 	bic.w	r3, r3, #7
   23614:	f103 0208 	add.w	r2, r3, #8
   23618:	f894 9018 	ldrb.w	r9, [r4, #24]
   2361c:	f8d4 b000 	ldr.w	fp, [r4]
   23620:	f8c8 2000 	str.w	r2, [r8]
   23624:	e9d3 2300 	ldrd	r2, r3, [r3]
   23628:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   2362c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   23630:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   23634:	930b      	str	r3, [sp, #44]	; 0x2c
   23636:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23638:	4b9c      	ldr	r3, [pc, #624]	; (238ac <_printf_float+0x2c8>)
   2363a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2363e:	4640      	mov	r0, r8
   23640:	f7dd fa3e 	bl	ac0 <__aeabi_dcmpun>
   23644:	bb70      	cbnz	r0, 236a4 <_printf_float+0xc0>
   23646:	4b99      	ldr	r3, [pc, #612]	; (238ac <_printf_float+0x2c8>)
   23648:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2364a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2364e:	4640      	mov	r0, r8
   23650:	f7dd fa18 	bl	a84 <__aeabi_dcmple>
   23654:	bb30      	cbnz	r0, 236a4 <_printf_float+0xc0>
   23656:	2200      	movs	r2, #0
   23658:	2300      	movs	r3, #0
   2365a:	4640      	mov	r0, r8
   2365c:	4651      	mov	r1, sl
   2365e:	f7dd fa07 	bl	a70 <__aeabi_dcmplt>
   23662:	b110      	cbz	r0, 2366a <_printf_float+0x86>
   23664:	232d      	movs	r3, #45	; 0x2d
   23666:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2366a:	4b91      	ldr	r3, [pc, #580]	; (238b0 <_printf_float+0x2cc>)
   2366c:	4891      	ldr	r0, [pc, #580]	; (238b4 <_printf_float+0x2d0>)
   2366e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   23672:	bf94      	ite	ls
   23674:	4698      	movls	r8, r3
   23676:	4680      	movhi	r8, r0
   23678:	2303      	movs	r3, #3
   2367a:	6123      	str	r3, [r4, #16]
   2367c:	f02b 0304 	bic.w	r3, fp, #4
   23680:	6023      	str	r3, [r4, #0]
   23682:	f04f 0a00 	mov.w	sl, #0
   23686:	9700      	str	r7, [sp, #0]
   23688:	4633      	mov	r3, r6
   2368a:	aa0f      	add	r2, sp, #60	; 0x3c
   2368c:	4621      	mov	r1, r4
   2368e:	4628      	mov	r0, r5
   23690:	f007 faaa 	bl	2abe8 <_printf_common>
   23694:	3001      	adds	r0, #1
   23696:	f040 808f 	bne.w	237b8 <_printf_float+0x1d4>
   2369a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2369e:	b011      	add	sp, #68	; 0x44
   236a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   236a4:	4642      	mov	r2, r8
   236a6:	4653      	mov	r3, sl
   236a8:	4640      	mov	r0, r8
   236aa:	4651      	mov	r1, sl
   236ac:	f7dd fa08 	bl	ac0 <__aeabi_dcmpun>
   236b0:	b140      	cbz	r0, 236c4 <_printf_float+0xe0>
   236b2:	f1ba 0f00 	cmp.w	sl, #0
   236b6:	bfbc      	itt	lt
   236b8:	232d      	movlt	r3, #45	; 0x2d
   236ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   236be:	487e      	ldr	r0, [pc, #504]	; (238b8 <_printf_float+0x2d4>)
   236c0:	4b7e      	ldr	r3, [pc, #504]	; (238bc <_printf_float+0x2d8>)
   236c2:	e7d4      	b.n	2366e <_printf_float+0x8a>
   236c4:	6863      	ldr	r3, [r4, #4]
   236c6:	1c5a      	adds	r2, r3, #1
   236c8:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   236cc:	d142      	bne.n	23754 <_printf_float+0x170>
   236ce:	2306      	movs	r3, #6
   236d0:	6063      	str	r3, [r4, #4]
   236d2:	2200      	movs	r2, #0
   236d4:	9206      	str	r2, [sp, #24]
   236d6:	aa0e      	add	r2, sp, #56	; 0x38
   236d8:	e9cd 9204 	strd	r9, r2, [sp, #16]
   236dc:	aa0d      	add	r2, sp, #52	; 0x34
   236de:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   236e2:	9203      	str	r2, [sp, #12]
   236e4:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   236e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
   236ec:	6023      	str	r3, [r4, #0]
   236ee:	6863      	ldr	r3, [r4, #4]
   236f0:	9300      	str	r3, [sp, #0]
   236f2:	4642      	mov	r2, r8
   236f4:	4653      	mov	r3, sl
   236f6:	4628      	mov	r0, r5
   236f8:	910b      	str	r1, [sp, #44]	; 0x2c
   236fa:	f007 f9d7 	bl	2aaac <__cvt>
   236fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   23700:	2947      	cmp	r1, #71	; 0x47
   23702:	4680      	mov	r8, r0
   23704:	990d      	ldr	r1, [sp, #52]	; 0x34
   23706:	d108      	bne.n	2371a <_printf_float+0x136>
   23708:	1cc8      	adds	r0, r1, #3
   2370a:	db02      	blt.n	23712 <_printf_float+0x12e>
   2370c:	6863      	ldr	r3, [r4, #4]
   2370e:	4299      	cmp	r1, r3
   23710:	dd40      	ble.n	23794 <_printf_float+0x1b0>
   23712:	f1a9 0902 	sub.w	r9, r9, #2
   23716:	fa5f f989 	uxtb.w	r9, r9
   2371a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2371e:	d81f      	bhi.n	23760 <_printf_float+0x17c>
   23720:	3901      	subs	r1, #1
   23722:	464a      	mov	r2, r9
   23724:	f104 0050 	add.w	r0, r4, #80	; 0x50
   23728:	910d      	str	r1, [sp, #52]	; 0x34
   2372a:	f007 fa1f 	bl	2ab6c <__exponent>
   2372e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23730:	1813      	adds	r3, r2, r0
   23732:	2a01      	cmp	r2, #1
   23734:	4682      	mov	sl, r0
   23736:	6123      	str	r3, [r4, #16]
   23738:	dc02      	bgt.n	23740 <_printf_float+0x15c>
   2373a:	6822      	ldr	r2, [r4, #0]
   2373c:	07d2      	lsls	r2, r2, #31
   2373e:	d501      	bpl.n	23744 <_printf_float+0x160>
   23740:	3301      	adds	r3, #1
   23742:	6123      	str	r3, [r4, #16]
   23744:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   23748:	2b00      	cmp	r3, #0
   2374a:	d09c      	beq.n	23686 <_printf_float+0xa2>
   2374c:	232d      	movs	r3, #45	; 0x2d
   2374e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23752:	e798      	b.n	23686 <_printf_float+0xa2>
   23754:	2947      	cmp	r1, #71	; 0x47
   23756:	d1bc      	bne.n	236d2 <_printf_float+0xee>
   23758:	2b00      	cmp	r3, #0
   2375a:	d1ba      	bne.n	236d2 <_printf_float+0xee>
   2375c:	2301      	movs	r3, #1
   2375e:	e7b7      	b.n	236d0 <_printf_float+0xec>
   23760:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   23764:	d118      	bne.n	23798 <_printf_float+0x1b4>
   23766:	2900      	cmp	r1, #0
   23768:	6863      	ldr	r3, [r4, #4]
   2376a:	dd0b      	ble.n	23784 <_printf_float+0x1a0>
   2376c:	6121      	str	r1, [r4, #16]
   2376e:	b913      	cbnz	r3, 23776 <_printf_float+0x192>
   23770:	6822      	ldr	r2, [r4, #0]
   23772:	07d0      	lsls	r0, r2, #31
   23774:	d502      	bpl.n	2377c <_printf_float+0x198>
   23776:	3301      	adds	r3, #1
   23778:	440b      	add	r3, r1
   2377a:	6123      	str	r3, [r4, #16]
   2377c:	65a1      	str	r1, [r4, #88]	; 0x58
   2377e:	f04f 0a00 	mov.w	sl, #0
   23782:	e7df      	b.n	23744 <_printf_float+0x160>
   23784:	b913      	cbnz	r3, 2378c <_printf_float+0x1a8>
   23786:	6822      	ldr	r2, [r4, #0]
   23788:	07d2      	lsls	r2, r2, #31
   2378a:	d501      	bpl.n	23790 <_printf_float+0x1ac>
   2378c:	3302      	adds	r3, #2
   2378e:	e7f4      	b.n	2377a <_printf_float+0x196>
   23790:	2301      	movs	r3, #1
   23792:	e7f2      	b.n	2377a <_printf_float+0x196>
   23794:	f04f 0967 	mov.w	r9, #103	; 0x67
   23798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2379a:	4299      	cmp	r1, r3
   2379c:	db05      	blt.n	237aa <_printf_float+0x1c6>
   2379e:	6823      	ldr	r3, [r4, #0]
   237a0:	6121      	str	r1, [r4, #16]
   237a2:	07d8      	lsls	r0, r3, #31
   237a4:	d5ea      	bpl.n	2377c <_printf_float+0x198>
   237a6:	1c4b      	adds	r3, r1, #1
   237a8:	e7e7      	b.n	2377a <_printf_float+0x196>
   237aa:	2900      	cmp	r1, #0
   237ac:	bfd4      	ite	le
   237ae:	f1c1 0202 	rsble	r2, r1, #2
   237b2:	2201      	movgt	r2, #1
   237b4:	4413      	add	r3, r2
   237b6:	e7e0      	b.n	2377a <_printf_float+0x196>
   237b8:	6823      	ldr	r3, [r4, #0]
   237ba:	055a      	lsls	r2, r3, #21
   237bc:	d407      	bmi.n	237ce <_printf_float+0x1ea>
   237be:	6923      	ldr	r3, [r4, #16]
   237c0:	4642      	mov	r2, r8
   237c2:	4631      	mov	r1, r6
   237c4:	4628      	mov	r0, r5
   237c6:	47b8      	blx	r7
   237c8:	3001      	adds	r0, #1
   237ca:	d12b      	bne.n	23824 <_printf_float+0x240>
   237cc:	e765      	b.n	2369a <_printf_float+0xb6>
   237ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   237d2:	f240 80dc 	bls.w	2398e <_printf_float+0x3aa>
   237d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   237da:	2200      	movs	r2, #0
   237dc:	2300      	movs	r3, #0
   237de:	f7dd f93d 	bl	a5c <__aeabi_dcmpeq>
   237e2:	2800      	cmp	r0, #0
   237e4:	d033      	beq.n	2384e <_printf_float+0x26a>
   237e6:	4a36      	ldr	r2, [pc, #216]	; (238c0 <_printf_float+0x2dc>)
   237e8:	2301      	movs	r3, #1
   237ea:	4631      	mov	r1, r6
   237ec:	4628      	mov	r0, r5
   237ee:	47b8      	blx	r7
   237f0:	3001      	adds	r0, #1
   237f2:	f43f af52 	beq.w	2369a <_printf_float+0xb6>
   237f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   237fa:	429a      	cmp	r2, r3
   237fc:	db02      	blt.n	23804 <_printf_float+0x220>
   237fe:	6823      	ldr	r3, [r4, #0]
   23800:	07d8      	lsls	r0, r3, #31
   23802:	d50f      	bpl.n	23824 <_printf_float+0x240>
   23804:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   23808:	4631      	mov	r1, r6
   2380a:	4628      	mov	r0, r5
   2380c:	47b8      	blx	r7
   2380e:	3001      	adds	r0, #1
   23810:	f43f af43 	beq.w	2369a <_printf_float+0xb6>
   23814:	f04f 0800 	mov.w	r8, #0
   23818:	f104 091a 	add.w	r9, r4, #26
   2381c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2381e:	3b01      	subs	r3, #1
   23820:	4543      	cmp	r3, r8
   23822:	dc09      	bgt.n	23838 <_printf_float+0x254>
   23824:	6823      	ldr	r3, [r4, #0]
   23826:	079b      	lsls	r3, r3, #30
   23828:	f100 8101 	bmi.w	23a2e <_printf_float+0x44a>
   2382c:	68e0      	ldr	r0, [r4, #12]
   2382e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23830:	4298      	cmp	r0, r3
   23832:	bfb8      	it	lt
   23834:	4618      	movlt	r0, r3
   23836:	e732      	b.n	2369e <_printf_float+0xba>
   23838:	2301      	movs	r3, #1
   2383a:	464a      	mov	r2, r9
   2383c:	4631      	mov	r1, r6
   2383e:	4628      	mov	r0, r5
   23840:	47b8      	blx	r7
   23842:	3001      	adds	r0, #1
   23844:	f43f af29 	beq.w	2369a <_printf_float+0xb6>
   23848:	f108 0801 	add.w	r8, r8, #1
   2384c:	e7e6      	b.n	2381c <_printf_float+0x238>
   2384e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   23850:	2b00      	cmp	r3, #0
   23852:	dc37      	bgt.n	238c4 <_printf_float+0x2e0>
   23854:	4a1a      	ldr	r2, [pc, #104]	; (238c0 <_printf_float+0x2dc>)
   23856:	2301      	movs	r3, #1
   23858:	4631      	mov	r1, r6
   2385a:	4628      	mov	r0, r5
   2385c:	47b8      	blx	r7
   2385e:	3001      	adds	r0, #1
   23860:	f43f af1b 	beq.w	2369a <_printf_float+0xb6>
   23864:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   23868:	4313      	orrs	r3, r2
   2386a:	d102      	bne.n	23872 <_printf_float+0x28e>
   2386c:	6823      	ldr	r3, [r4, #0]
   2386e:	07d9      	lsls	r1, r3, #31
   23870:	d5d8      	bpl.n	23824 <_printf_float+0x240>
   23872:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   23876:	4631      	mov	r1, r6
   23878:	4628      	mov	r0, r5
   2387a:	47b8      	blx	r7
   2387c:	3001      	adds	r0, #1
   2387e:	f43f af0c 	beq.w	2369a <_printf_float+0xb6>
   23882:	f04f 0900 	mov.w	r9, #0
   23886:	f104 0a1a 	add.w	sl, r4, #26
   2388a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2388c:	425b      	negs	r3, r3
   2388e:	454b      	cmp	r3, r9
   23890:	dc01      	bgt.n	23896 <_printf_float+0x2b2>
   23892:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   23894:	e794      	b.n	237c0 <_printf_float+0x1dc>
   23896:	2301      	movs	r3, #1
   23898:	4652      	mov	r2, sl
   2389a:	4631      	mov	r1, r6
   2389c:	4628      	mov	r0, r5
   2389e:	47b8      	blx	r7
   238a0:	3001      	adds	r0, #1
   238a2:	f43f aefa 	beq.w	2369a <_printf_float+0xb6>
   238a6:	f109 0901 	add.w	r9, r9, #1
   238aa:	e7ee      	b.n	2388a <_printf_float+0x2a6>
   238ac:	7fefffff 	.word	0x7fefffff
   238b0:	0002f456 	.word	0x0002f456
   238b4:	0002d684 	.word	0x0002d684
   238b8:	0002f45e 	.word	0x0002f45e
   238bc:	0002f45a 	.word	0x0002f45a
   238c0:	0002de50 	.word	0x0002de50
   238c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   238c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
   238c8:	429a      	cmp	r2, r3
   238ca:	bfa8      	it	ge
   238cc:	461a      	movge	r2, r3
   238ce:	2a00      	cmp	r2, #0
   238d0:	4691      	mov	r9, r2
   238d2:	dc37      	bgt.n	23944 <_printf_float+0x360>
   238d4:	f04f 0b00 	mov.w	fp, #0
   238d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   238dc:	f104 021a 	add.w	r2, r4, #26
   238e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   238e4:	ebaa 0309 	sub.w	r3, sl, r9
   238e8:	455b      	cmp	r3, fp
   238ea:	dc33      	bgt.n	23954 <_printf_float+0x370>
   238ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   238f0:	429a      	cmp	r2, r3
   238f2:	db3b      	blt.n	2396c <_printf_float+0x388>
   238f4:	6823      	ldr	r3, [r4, #0]
   238f6:	07da      	lsls	r2, r3, #31
   238f8:	d438      	bmi.n	2396c <_printf_float+0x388>
   238fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   238fc:	990d      	ldr	r1, [sp, #52]	; 0x34
   238fe:	eba3 020a 	sub.w	r2, r3, sl
   23902:	eba3 0901 	sub.w	r9, r3, r1
   23906:	4591      	cmp	r9, r2
   23908:	bfa8      	it	ge
   2390a:	4691      	movge	r9, r2
   2390c:	f1b9 0f00 	cmp.w	r9, #0
   23910:	dc34      	bgt.n	2397c <_printf_float+0x398>
   23912:	f04f 0800 	mov.w	r8, #0
   23916:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   2391a:	f104 0a1a 	add.w	sl, r4, #26
   2391e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   23922:	1a9b      	subs	r3, r3, r2
   23924:	eba3 0309 	sub.w	r3, r3, r9
   23928:	4543      	cmp	r3, r8
   2392a:	f77f af7b 	ble.w	23824 <_printf_float+0x240>
   2392e:	2301      	movs	r3, #1
   23930:	4652      	mov	r2, sl
   23932:	4631      	mov	r1, r6
   23934:	4628      	mov	r0, r5
   23936:	47b8      	blx	r7
   23938:	3001      	adds	r0, #1
   2393a:	f43f aeae 	beq.w	2369a <_printf_float+0xb6>
   2393e:	f108 0801 	add.w	r8, r8, #1
   23942:	e7ec      	b.n	2391e <_printf_float+0x33a>
   23944:	4613      	mov	r3, r2
   23946:	4631      	mov	r1, r6
   23948:	4642      	mov	r2, r8
   2394a:	4628      	mov	r0, r5
   2394c:	47b8      	blx	r7
   2394e:	3001      	adds	r0, #1
   23950:	d1c0      	bne.n	238d4 <_printf_float+0x2f0>
   23952:	e6a2      	b.n	2369a <_printf_float+0xb6>
   23954:	2301      	movs	r3, #1
   23956:	4631      	mov	r1, r6
   23958:	4628      	mov	r0, r5
   2395a:	920b      	str	r2, [sp, #44]	; 0x2c
   2395c:	47b8      	blx	r7
   2395e:	3001      	adds	r0, #1
   23960:	f43f ae9b 	beq.w	2369a <_printf_float+0xb6>
   23964:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23966:	f10b 0b01 	add.w	fp, fp, #1
   2396a:	e7b9      	b.n	238e0 <_printf_float+0x2fc>
   2396c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   23970:	4631      	mov	r1, r6
   23972:	4628      	mov	r0, r5
   23974:	47b8      	blx	r7
   23976:	3001      	adds	r0, #1
   23978:	d1bf      	bne.n	238fa <_printf_float+0x316>
   2397a:	e68e      	b.n	2369a <_printf_float+0xb6>
   2397c:	464b      	mov	r3, r9
   2397e:	eb08 020a 	add.w	r2, r8, sl
   23982:	4631      	mov	r1, r6
   23984:	4628      	mov	r0, r5
   23986:	47b8      	blx	r7
   23988:	3001      	adds	r0, #1
   2398a:	d1c2      	bne.n	23912 <_printf_float+0x32e>
   2398c:	e685      	b.n	2369a <_printf_float+0xb6>
   2398e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   23990:	2a01      	cmp	r2, #1
   23992:	dc01      	bgt.n	23998 <_printf_float+0x3b4>
   23994:	07db      	lsls	r3, r3, #31
   23996:	d537      	bpl.n	23a08 <_printf_float+0x424>
   23998:	2301      	movs	r3, #1
   2399a:	4642      	mov	r2, r8
   2399c:	4631      	mov	r1, r6
   2399e:	4628      	mov	r0, r5
   239a0:	47b8      	blx	r7
   239a2:	3001      	adds	r0, #1
   239a4:	f43f ae79 	beq.w	2369a <_printf_float+0xb6>
   239a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   239ac:	4631      	mov	r1, r6
   239ae:	4628      	mov	r0, r5
   239b0:	47b8      	blx	r7
   239b2:	3001      	adds	r0, #1
   239b4:	f43f ae71 	beq.w	2369a <_printf_float+0xb6>
   239b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   239bc:	2200      	movs	r2, #0
   239be:	2300      	movs	r3, #0
   239c0:	f7dd f84c 	bl	a5c <__aeabi_dcmpeq>
   239c4:	b9d8      	cbnz	r0, 239fe <_printf_float+0x41a>
   239c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   239c8:	f108 0201 	add.w	r2, r8, #1
   239cc:	3b01      	subs	r3, #1
   239ce:	4631      	mov	r1, r6
   239d0:	4628      	mov	r0, r5
   239d2:	47b8      	blx	r7
   239d4:	3001      	adds	r0, #1
   239d6:	d10e      	bne.n	239f6 <_printf_float+0x412>
   239d8:	e65f      	b.n	2369a <_printf_float+0xb6>
   239da:	2301      	movs	r3, #1
   239dc:	464a      	mov	r2, r9
   239de:	4631      	mov	r1, r6
   239e0:	4628      	mov	r0, r5
   239e2:	47b8      	blx	r7
   239e4:	3001      	adds	r0, #1
   239e6:	f43f ae58 	beq.w	2369a <_printf_float+0xb6>
   239ea:	f108 0801 	add.w	r8, r8, #1
   239ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   239f0:	3b01      	subs	r3, #1
   239f2:	4543      	cmp	r3, r8
   239f4:	dcf1      	bgt.n	239da <_printf_float+0x3f6>
   239f6:	4653      	mov	r3, sl
   239f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
   239fc:	e6e1      	b.n	237c2 <_printf_float+0x1de>
   239fe:	f04f 0800 	mov.w	r8, #0
   23a02:	f104 091a 	add.w	r9, r4, #26
   23a06:	e7f2      	b.n	239ee <_printf_float+0x40a>
   23a08:	2301      	movs	r3, #1
   23a0a:	4642      	mov	r2, r8
   23a0c:	e7df      	b.n	239ce <_printf_float+0x3ea>
   23a0e:	2301      	movs	r3, #1
   23a10:	464a      	mov	r2, r9
   23a12:	4631      	mov	r1, r6
   23a14:	4628      	mov	r0, r5
   23a16:	47b8      	blx	r7
   23a18:	3001      	adds	r0, #1
   23a1a:	f43f ae3e 	beq.w	2369a <_printf_float+0xb6>
   23a1e:	f108 0801 	add.w	r8, r8, #1
   23a22:	68e3      	ldr	r3, [r4, #12]
   23a24:	990f      	ldr	r1, [sp, #60]	; 0x3c
   23a26:	1a5b      	subs	r3, r3, r1
   23a28:	4543      	cmp	r3, r8
   23a2a:	dcf0      	bgt.n	23a0e <_printf_float+0x42a>
   23a2c:	e6fe      	b.n	2382c <_printf_float+0x248>
   23a2e:	f04f 0800 	mov.w	r8, #0
   23a32:	f104 0919 	add.w	r9, r4, #25
   23a36:	e7f4      	b.n	23a22 <_printf_float+0x43e>

00023a38 <_printf_i>:
   23a38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   23a3c:	7e0f      	ldrb	r7, [r1, #24]
   23a3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   23a40:	2f78      	cmp	r7, #120	; 0x78
   23a42:	4691      	mov	r9, r2
   23a44:	4680      	mov	r8, r0
   23a46:	460c      	mov	r4, r1
   23a48:	469a      	mov	sl, r3
   23a4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
   23a4e:	d807      	bhi.n	23a60 <_printf_i+0x28>
   23a50:	2f62      	cmp	r7, #98	; 0x62
   23a52:	d80a      	bhi.n	23a6a <_printf_i+0x32>
   23a54:	2f00      	cmp	r7, #0
   23a56:	f000 80d8 	beq.w	23c0a <_printf_i+0x1d2>
   23a5a:	2f58      	cmp	r7, #88	; 0x58
   23a5c:	f000 80a3 	beq.w	23ba6 <_printf_i+0x16e>
   23a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
   23a64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   23a68:	e03a      	b.n	23ae0 <_printf_i+0xa8>
   23a6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   23a6e:	2b15      	cmp	r3, #21
   23a70:	d8f6      	bhi.n	23a60 <_printf_i+0x28>
   23a72:	a101      	add	r1, pc, #4	; (adr r1, 23a78 <_printf_i+0x40>)
   23a74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   23a78:	00023ad1 	.word	0x00023ad1
   23a7c:	00023ae5 	.word	0x00023ae5
   23a80:	00023a61 	.word	0x00023a61
   23a84:	00023a61 	.word	0x00023a61
   23a88:	00023a61 	.word	0x00023a61
   23a8c:	00023a61 	.word	0x00023a61
   23a90:	00023ae5 	.word	0x00023ae5
   23a94:	00023a61 	.word	0x00023a61
   23a98:	00023a61 	.word	0x00023a61
   23a9c:	00023a61 	.word	0x00023a61
   23aa0:	00023a61 	.word	0x00023a61
   23aa4:	00023bf1 	.word	0x00023bf1
   23aa8:	00023b15 	.word	0x00023b15
   23aac:	00023bd3 	.word	0x00023bd3
   23ab0:	00023a61 	.word	0x00023a61
   23ab4:	00023a61 	.word	0x00023a61
   23ab8:	00023c13 	.word	0x00023c13
   23abc:	00023a61 	.word	0x00023a61
   23ac0:	00023b15 	.word	0x00023b15
   23ac4:	00023a61 	.word	0x00023a61
   23ac8:	00023a61 	.word	0x00023a61
   23acc:	00023bdb 	.word	0x00023bdb
   23ad0:	682b      	ldr	r3, [r5, #0]
   23ad2:	1d1a      	adds	r2, r3, #4
   23ad4:	681b      	ldr	r3, [r3, #0]
   23ad6:	602a      	str	r2, [r5, #0]
   23ad8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   23adc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   23ae0:	2301      	movs	r3, #1
   23ae2:	e0a3      	b.n	23c2c <_printf_i+0x1f4>
   23ae4:	6820      	ldr	r0, [r4, #0]
   23ae6:	6829      	ldr	r1, [r5, #0]
   23ae8:	0606      	lsls	r6, r0, #24
   23aea:	f101 0304 	add.w	r3, r1, #4
   23aee:	d50a      	bpl.n	23b06 <_printf_i+0xce>
   23af0:	680e      	ldr	r6, [r1, #0]
   23af2:	602b      	str	r3, [r5, #0]
   23af4:	2e00      	cmp	r6, #0
   23af6:	da03      	bge.n	23b00 <_printf_i+0xc8>
   23af8:	232d      	movs	r3, #45	; 0x2d
   23afa:	4276      	negs	r6, r6
   23afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23b00:	485e      	ldr	r0, [pc, #376]	; (23c7c <_printf_i+0x244>)
   23b02:	230a      	movs	r3, #10
   23b04:	e019      	b.n	23b3a <_printf_i+0x102>
   23b06:	680e      	ldr	r6, [r1, #0]
   23b08:	602b      	str	r3, [r5, #0]
   23b0a:	f010 0f40 	tst.w	r0, #64	; 0x40
   23b0e:	bf18      	it	ne
   23b10:	b236      	sxthne	r6, r6
   23b12:	e7ef      	b.n	23af4 <_printf_i+0xbc>
   23b14:	682b      	ldr	r3, [r5, #0]
   23b16:	6820      	ldr	r0, [r4, #0]
   23b18:	1d19      	adds	r1, r3, #4
   23b1a:	6029      	str	r1, [r5, #0]
   23b1c:	0601      	lsls	r1, r0, #24
   23b1e:	d501      	bpl.n	23b24 <_printf_i+0xec>
   23b20:	681e      	ldr	r6, [r3, #0]
   23b22:	e002      	b.n	23b2a <_printf_i+0xf2>
   23b24:	0646      	lsls	r6, r0, #25
   23b26:	d5fb      	bpl.n	23b20 <_printf_i+0xe8>
   23b28:	881e      	ldrh	r6, [r3, #0]
   23b2a:	4854      	ldr	r0, [pc, #336]	; (23c7c <_printf_i+0x244>)
   23b2c:	2f6f      	cmp	r7, #111	; 0x6f
   23b2e:	bf0c      	ite	eq
   23b30:	2308      	moveq	r3, #8
   23b32:	230a      	movne	r3, #10
   23b34:	2100      	movs	r1, #0
   23b36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   23b3a:	6865      	ldr	r5, [r4, #4]
   23b3c:	60a5      	str	r5, [r4, #8]
   23b3e:	2d00      	cmp	r5, #0
   23b40:	bfa2      	ittt	ge
   23b42:	6821      	ldrge	r1, [r4, #0]
   23b44:	f021 0104 	bicge.w	r1, r1, #4
   23b48:	6021      	strge	r1, [r4, #0]
   23b4a:	b90e      	cbnz	r6, 23b50 <_printf_i+0x118>
   23b4c:	2d00      	cmp	r5, #0
   23b4e:	d04d      	beq.n	23bec <_printf_i+0x1b4>
   23b50:	4615      	mov	r5, r2
   23b52:	fbb6 f1f3 	udiv	r1, r6, r3
   23b56:	fb03 6711 	mls	r7, r3, r1, r6
   23b5a:	5dc7      	ldrb	r7, [r0, r7]
   23b5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
   23b60:	4637      	mov	r7, r6
   23b62:	42bb      	cmp	r3, r7
   23b64:	460e      	mov	r6, r1
   23b66:	d9f4      	bls.n	23b52 <_printf_i+0x11a>
   23b68:	2b08      	cmp	r3, #8
   23b6a:	d10b      	bne.n	23b84 <_printf_i+0x14c>
   23b6c:	6823      	ldr	r3, [r4, #0]
   23b6e:	07de      	lsls	r6, r3, #31
   23b70:	d508      	bpl.n	23b84 <_printf_i+0x14c>
   23b72:	6923      	ldr	r3, [r4, #16]
   23b74:	6861      	ldr	r1, [r4, #4]
   23b76:	4299      	cmp	r1, r3
   23b78:	bfde      	ittt	le
   23b7a:	2330      	movle	r3, #48	; 0x30
   23b7c:	f805 3c01 	strble.w	r3, [r5, #-1]
   23b80:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   23b84:	1b52      	subs	r2, r2, r5
   23b86:	6122      	str	r2, [r4, #16]
   23b88:	f8cd a000 	str.w	sl, [sp]
   23b8c:	464b      	mov	r3, r9
   23b8e:	aa03      	add	r2, sp, #12
   23b90:	4621      	mov	r1, r4
   23b92:	4640      	mov	r0, r8
   23b94:	f007 f828 	bl	2abe8 <_printf_common>
   23b98:	3001      	adds	r0, #1
   23b9a:	d14c      	bne.n	23c36 <_printf_i+0x1fe>
   23b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   23ba0:	b004      	add	sp, #16
   23ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23ba6:	4835      	ldr	r0, [pc, #212]	; (23c7c <_printf_i+0x244>)
   23ba8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   23bac:	6829      	ldr	r1, [r5, #0]
   23bae:	6823      	ldr	r3, [r4, #0]
   23bb0:	f851 6b04 	ldr.w	r6, [r1], #4
   23bb4:	6029      	str	r1, [r5, #0]
   23bb6:	061d      	lsls	r5, r3, #24
   23bb8:	d514      	bpl.n	23be4 <_printf_i+0x1ac>
   23bba:	07df      	lsls	r7, r3, #31
   23bbc:	bf44      	itt	mi
   23bbe:	f043 0320 	orrmi.w	r3, r3, #32
   23bc2:	6023      	strmi	r3, [r4, #0]
   23bc4:	b91e      	cbnz	r6, 23bce <_printf_i+0x196>
   23bc6:	6823      	ldr	r3, [r4, #0]
   23bc8:	f023 0320 	bic.w	r3, r3, #32
   23bcc:	6023      	str	r3, [r4, #0]
   23bce:	2310      	movs	r3, #16
   23bd0:	e7b0      	b.n	23b34 <_printf_i+0xfc>
   23bd2:	6823      	ldr	r3, [r4, #0]
   23bd4:	f043 0320 	orr.w	r3, r3, #32
   23bd8:	6023      	str	r3, [r4, #0]
   23bda:	2378      	movs	r3, #120	; 0x78
   23bdc:	4828      	ldr	r0, [pc, #160]	; (23c80 <_printf_i+0x248>)
   23bde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   23be2:	e7e3      	b.n	23bac <_printf_i+0x174>
   23be4:	0659      	lsls	r1, r3, #25
   23be6:	bf48      	it	mi
   23be8:	b2b6      	uxthmi	r6, r6
   23bea:	e7e6      	b.n	23bba <_printf_i+0x182>
   23bec:	4615      	mov	r5, r2
   23bee:	e7bb      	b.n	23b68 <_printf_i+0x130>
   23bf0:	682b      	ldr	r3, [r5, #0]
   23bf2:	6826      	ldr	r6, [r4, #0]
   23bf4:	6961      	ldr	r1, [r4, #20]
   23bf6:	1d18      	adds	r0, r3, #4
   23bf8:	6028      	str	r0, [r5, #0]
   23bfa:	0635      	lsls	r5, r6, #24
   23bfc:	681b      	ldr	r3, [r3, #0]
   23bfe:	d501      	bpl.n	23c04 <_printf_i+0x1cc>
   23c00:	6019      	str	r1, [r3, #0]
   23c02:	e002      	b.n	23c0a <_printf_i+0x1d2>
   23c04:	0670      	lsls	r0, r6, #25
   23c06:	d5fb      	bpl.n	23c00 <_printf_i+0x1c8>
   23c08:	8019      	strh	r1, [r3, #0]
   23c0a:	2300      	movs	r3, #0
   23c0c:	6123      	str	r3, [r4, #16]
   23c0e:	4615      	mov	r5, r2
   23c10:	e7ba      	b.n	23b88 <_printf_i+0x150>
   23c12:	682b      	ldr	r3, [r5, #0]
   23c14:	1d1a      	adds	r2, r3, #4
   23c16:	602a      	str	r2, [r5, #0]
   23c18:	681d      	ldr	r5, [r3, #0]
   23c1a:	6862      	ldr	r2, [r4, #4]
   23c1c:	2100      	movs	r1, #0
   23c1e:	4628      	mov	r0, r5
   23c20:	f7dc fa6e 	bl	100 <memchr>
   23c24:	b108      	cbz	r0, 23c2a <_printf_i+0x1f2>
   23c26:	1b40      	subs	r0, r0, r5
   23c28:	6060      	str	r0, [r4, #4]
   23c2a:	6863      	ldr	r3, [r4, #4]
   23c2c:	6123      	str	r3, [r4, #16]
   23c2e:	2300      	movs	r3, #0
   23c30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   23c34:	e7a8      	b.n	23b88 <_printf_i+0x150>
   23c36:	6923      	ldr	r3, [r4, #16]
   23c38:	462a      	mov	r2, r5
   23c3a:	4649      	mov	r1, r9
   23c3c:	4640      	mov	r0, r8
   23c3e:	47d0      	blx	sl
   23c40:	3001      	adds	r0, #1
   23c42:	d0ab      	beq.n	23b9c <_printf_i+0x164>
   23c44:	6823      	ldr	r3, [r4, #0]
   23c46:	079b      	lsls	r3, r3, #30
   23c48:	d413      	bmi.n	23c72 <_printf_i+0x23a>
   23c4a:	68e0      	ldr	r0, [r4, #12]
   23c4c:	9b03      	ldr	r3, [sp, #12]
   23c4e:	4298      	cmp	r0, r3
   23c50:	bfb8      	it	lt
   23c52:	4618      	movlt	r0, r3
   23c54:	e7a4      	b.n	23ba0 <_printf_i+0x168>
   23c56:	2301      	movs	r3, #1
   23c58:	4632      	mov	r2, r6
   23c5a:	4649      	mov	r1, r9
   23c5c:	4640      	mov	r0, r8
   23c5e:	47d0      	blx	sl
   23c60:	3001      	adds	r0, #1
   23c62:	d09b      	beq.n	23b9c <_printf_i+0x164>
   23c64:	3501      	adds	r5, #1
   23c66:	68e3      	ldr	r3, [r4, #12]
   23c68:	9903      	ldr	r1, [sp, #12]
   23c6a:	1a5b      	subs	r3, r3, r1
   23c6c:	42ab      	cmp	r3, r5
   23c6e:	dcf2      	bgt.n	23c56 <_printf_i+0x21e>
   23c70:	e7eb      	b.n	23c4a <_printf_i+0x212>
   23c72:	2500      	movs	r5, #0
   23c74:	f104 0619 	add.w	r6, r4, #25
   23c78:	e7f5      	b.n	23c66 <_printf_i+0x22e>
   23c7a:	bf00      	nop
   23c7c:	0002f462 	.word	0x0002f462
   23c80:	0002f473 	.word	0x0002f473

00023c84 <_sbrk_r>:
   23c84:	b538      	push	{r3, r4, r5, lr}
   23c86:	4d06      	ldr	r5, [pc, #24]	; (23ca0 <_sbrk_r+0x1c>)
   23c88:	2300      	movs	r3, #0
   23c8a:	4604      	mov	r4, r0
   23c8c:	4608      	mov	r0, r1
   23c8e:	602b      	str	r3, [r5, #0]
   23c90:	f7e3 fc14 	bl	74bc <_sbrk>
   23c94:	1c43      	adds	r3, r0, #1
   23c96:	d102      	bne.n	23c9e <_sbrk_r+0x1a>
   23c98:	682b      	ldr	r3, [r5, #0]
   23c9a:	b103      	cbz	r3, 23c9e <_sbrk_r+0x1a>
   23c9c:	6023      	str	r3, [r4, #0]
   23c9e:	bd38      	pop	{r3, r4, r5, pc}
   23ca0:	200033e0 	.word	0x200033e0

00023ca4 <vsniprintf>:
   23ca4:	b507      	push	{r0, r1, r2, lr}
   23ca6:	9300      	str	r3, [sp, #0]
   23ca8:	4613      	mov	r3, r2
   23caa:	460a      	mov	r2, r1
   23cac:	4601      	mov	r1, r0
   23cae:	4803      	ldr	r0, [pc, #12]	; (23cbc <vsniprintf+0x18>)
   23cb0:	6800      	ldr	r0, [r0, #0]
   23cb2:	f007 f834 	bl	2ad1e <_vsniprintf_r>
   23cb6:	b003      	add	sp, #12
   23cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   23cbc:	200007ac 	.word	0x200007ac

00023cc0 <_vsiprintf_r>:
   23cc0:	b500      	push	{lr}
   23cc2:	b09b      	sub	sp, #108	; 0x6c
   23cc4:	9100      	str	r1, [sp, #0]
   23cc6:	9104      	str	r1, [sp, #16]
   23cc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   23ccc:	9105      	str	r1, [sp, #20]
   23cce:	9102      	str	r1, [sp, #8]
   23cd0:	4905      	ldr	r1, [pc, #20]	; (23ce8 <_vsiprintf_r+0x28>)
   23cd2:	9103      	str	r1, [sp, #12]
   23cd4:	4669      	mov	r1, sp
   23cd6:	f000 fb37 	bl	24348 <_svfiprintf_r>
   23cda:	9b00      	ldr	r3, [sp, #0]
   23cdc:	2200      	movs	r2, #0
   23cde:	701a      	strb	r2, [r3, #0]
   23ce0:	b01b      	add	sp, #108	; 0x6c
   23ce2:	f85d fb04 	ldr.w	pc, [sp], #4
   23ce6:	bf00      	nop
   23ce8:	ffff0208 	.word	0xffff0208

00023cec <vsiprintf>:
   23cec:	4613      	mov	r3, r2
   23cee:	460a      	mov	r2, r1
   23cf0:	4601      	mov	r1, r0
   23cf2:	4802      	ldr	r0, [pc, #8]	; (23cfc <vsiprintf+0x10>)
   23cf4:	6800      	ldr	r0, [r0, #0]
   23cf6:	f7ff bfe3 	b.w	23cc0 <_vsiprintf_r>
   23cfa:	bf00      	nop
   23cfc:	200007ac 	.word	0x200007ac

00023d00 <_localeconv_r>:
   23d00:	4800      	ldr	r0, [pc, #0]	; (23d04 <_localeconv_r+0x4>)
   23d02:	4770      	bx	lr
   23d04:	20000900 	.word	0x20000900

00023d08 <__malloc_lock>:
   23d08:	4801      	ldr	r0, [pc, #4]	; (23d10 <__malloc_lock+0x8>)
   23d0a:	f002 bfba 	b.w	26c82 <__retarget_lock_acquire_recursive>
   23d0e:	bf00      	nop
   23d10:	20000b34 	.word	0x20000b34

00023d14 <__malloc_unlock>:
   23d14:	4801      	ldr	r0, [pc, #4]	; (23d1c <__malloc_unlock+0x8>)
   23d16:	f002 bfba 	b.w	26c8e <__retarget_lock_release_recursive>
   23d1a:	bf00      	nop
   23d1c:	20000b34 	.word	0x20000b34

00023d20 <_Balloc>:
   23d20:	b570      	push	{r4, r5, r6, lr}
   23d22:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23d24:	4604      	mov	r4, r0
   23d26:	460d      	mov	r5, r1
   23d28:	b976      	cbnz	r6, 23d48 <_Balloc+0x28>
   23d2a:	2010      	movs	r0, #16
   23d2c:	f7ff fbae 	bl	2348c <malloc>
   23d30:	4602      	mov	r2, r0
   23d32:	6260      	str	r0, [r4, #36]	; 0x24
   23d34:	b920      	cbnz	r0, 23d40 <_Balloc+0x20>
   23d36:	4b18      	ldr	r3, [pc, #96]	; (23d98 <_Balloc+0x78>)
   23d38:	4818      	ldr	r0, [pc, #96]	; (23d9c <_Balloc+0x7c>)
   23d3a:	2166      	movs	r1, #102	; 0x66
   23d3c:	f000 fc04 	bl	24548 <__assert_func>
   23d40:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23d44:	6006      	str	r6, [r0, #0]
   23d46:	60c6      	str	r6, [r0, #12]
   23d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
   23d4a:	68f3      	ldr	r3, [r6, #12]
   23d4c:	b183      	cbz	r3, 23d70 <_Balloc+0x50>
   23d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d50:	68db      	ldr	r3, [r3, #12]
   23d52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   23d56:	b9b8      	cbnz	r0, 23d88 <_Balloc+0x68>
   23d58:	2101      	movs	r1, #1
   23d5a:	fa01 f605 	lsl.w	r6, r1, r5
   23d5e:	1d72      	adds	r2, r6, #5
   23d60:	0092      	lsls	r2, r2, #2
   23d62:	4620      	mov	r0, r4
   23d64:	f007 f8f5 	bl	2af52 <_calloc_r>
   23d68:	b160      	cbz	r0, 23d84 <_Balloc+0x64>
   23d6a:	e9c0 5601 	strd	r5, r6, [r0, #4]
   23d6e:	e00e      	b.n	23d8e <_Balloc+0x6e>
   23d70:	2221      	movs	r2, #33	; 0x21
   23d72:	2104      	movs	r1, #4
   23d74:	4620      	mov	r0, r4
   23d76:	f007 f8ec 	bl	2af52 <_calloc_r>
   23d7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   23d7c:	60f0      	str	r0, [r6, #12]
   23d7e:	68db      	ldr	r3, [r3, #12]
   23d80:	2b00      	cmp	r3, #0
   23d82:	d1e4      	bne.n	23d4e <_Balloc+0x2e>
   23d84:	2000      	movs	r0, #0
   23d86:	bd70      	pop	{r4, r5, r6, pc}
   23d88:	6802      	ldr	r2, [r0, #0]
   23d8a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   23d8e:	2300      	movs	r3, #0
   23d90:	e9c0 3303 	strd	r3, r3, [r0, #12]
   23d94:	e7f7      	b.n	23d86 <_Balloc+0x66>
   23d96:	bf00      	nop
   23d98:	0002f491 	.word	0x0002f491
   23d9c:	0002f513 	.word	0x0002f513

00023da0 <_Bfree>:
   23da0:	b570      	push	{r4, r5, r6, lr}
   23da2:	6a46      	ldr	r6, [r0, #36]	; 0x24
   23da4:	4605      	mov	r5, r0
   23da6:	460c      	mov	r4, r1
   23da8:	b976      	cbnz	r6, 23dc8 <_Bfree+0x28>
   23daa:	2010      	movs	r0, #16
   23dac:	f7ff fb6e 	bl	2348c <malloc>
   23db0:	4602      	mov	r2, r0
   23db2:	6268      	str	r0, [r5, #36]	; 0x24
   23db4:	b920      	cbnz	r0, 23dc0 <_Bfree+0x20>
   23db6:	4b09      	ldr	r3, [pc, #36]	; (23ddc <_Bfree+0x3c>)
   23db8:	4809      	ldr	r0, [pc, #36]	; (23de0 <_Bfree+0x40>)
   23dba:	218a      	movs	r1, #138	; 0x8a
   23dbc:	f000 fbc4 	bl	24548 <__assert_func>
   23dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
   23dc4:	6006      	str	r6, [r0, #0]
   23dc6:	60c6      	str	r6, [r0, #12]
   23dc8:	b13c      	cbz	r4, 23dda <_Bfree+0x3a>
   23dca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   23dcc:	6862      	ldr	r2, [r4, #4]
   23dce:	68db      	ldr	r3, [r3, #12]
   23dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   23dd4:	6021      	str	r1, [r4, #0]
   23dd6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   23dda:	bd70      	pop	{r4, r5, r6, pc}
   23ddc:	0002f491 	.word	0x0002f491
   23de0:	0002f513 	.word	0x0002f513

00023de4 <__multadd>:
   23de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23de8:	690d      	ldr	r5, [r1, #16]
   23dea:	4607      	mov	r7, r0
   23dec:	460c      	mov	r4, r1
   23dee:	461e      	mov	r6, r3
   23df0:	f101 0c14 	add.w	ip, r1, #20
   23df4:	2000      	movs	r0, #0
   23df6:	f8dc 3000 	ldr.w	r3, [ip]
   23dfa:	b299      	uxth	r1, r3
   23dfc:	fb02 6101 	mla	r1, r2, r1, r6
   23e00:	0c1e      	lsrs	r6, r3, #16
   23e02:	0c0b      	lsrs	r3, r1, #16
   23e04:	fb02 3306 	mla	r3, r2, r6, r3
   23e08:	b289      	uxth	r1, r1
   23e0a:	3001      	adds	r0, #1
   23e0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   23e10:	4285      	cmp	r5, r0
   23e12:	f84c 1b04 	str.w	r1, [ip], #4
   23e16:	ea4f 4613 	mov.w	r6, r3, lsr #16
   23e1a:	dcec      	bgt.n	23df6 <__multadd+0x12>
   23e1c:	b30e      	cbz	r6, 23e62 <__multadd+0x7e>
   23e1e:	68a3      	ldr	r3, [r4, #8]
   23e20:	42ab      	cmp	r3, r5
   23e22:	dc19      	bgt.n	23e58 <__multadd+0x74>
   23e24:	6861      	ldr	r1, [r4, #4]
   23e26:	4638      	mov	r0, r7
   23e28:	3101      	adds	r1, #1
   23e2a:	f7ff ff79 	bl	23d20 <_Balloc>
   23e2e:	4680      	mov	r8, r0
   23e30:	b928      	cbnz	r0, 23e3e <__multadd+0x5a>
   23e32:	4602      	mov	r2, r0
   23e34:	4b0c      	ldr	r3, [pc, #48]	; (23e68 <__multadd+0x84>)
   23e36:	480d      	ldr	r0, [pc, #52]	; (23e6c <__multadd+0x88>)
   23e38:	21b5      	movs	r1, #181	; 0xb5
   23e3a:	f000 fb85 	bl	24548 <__assert_func>
   23e3e:	6922      	ldr	r2, [r4, #16]
   23e40:	3202      	adds	r2, #2
   23e42:	f104 010c 	add.w	r1, r4, #12
   23e46:	0092      	lsls	r2, r2, #2
   23e48:	300c      	adds	r0, #12
   23e4a:	f006 fe06 	bl	2aa5a <memcpy>
   23e4e:	4621      	mov	r1, r4
   23e50:	4638      	mov	r0, r7
   23e52:	f7ff ffa5 	bl	23da0 <_Bfree>
   23e56:	4644      	mov	r4, r8
   23e58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   23e5c:	3501      	adds	r5, #1
   23e5e:	615e      	str	r6, [r3, #20]
   23e60:	6125      	str	r5, [r4, #16]
   23e62:	4620      	mov	r0, r4
   23e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23e68:	0002f502 	.word	0x0002f502
   23e6c:	0002f513 	.word	0x0002f513

00023e70 <__i2b>:
   23e70:	b510      	push	{r4, lr}
   23e72:	460c      	mov	r4, r1
   23e74:	2101      	movs	r1, #1
   23e76:	f7ff ff53 	bl	23d20 <_Balloc>
   23e7a:	4602      	mov	r2, r0
   23e7c:	b928      	cbnz	r0, 23e8a <__i2b+0x1a>
   23e7e:	4b05      	ldr	r3, [pc, #20]	; (23e94 <__i2b+0x24>)
   23e80:	4805      	ldr	r0, [pc, #20]	; (23e98 <__i2b+0x28>)
   23e82:	f44f 71a0 	mov.w	r1, #320	; 0x140
   23e86:	f000 fb5f 	bl	24548 <__assert_func>
   23e8a:	2301      	movs	r3, #1
   23e8c:	6144      	str	r4, [r0, #20]
   23e8e:	6103      	str	r3, [r0, #16]
   23e90:	bd10      	pop	{r4, pc}
   23e92:	bf00      	nop
   23e94:	0002f502 	.word	0x0002f502
   23e98:	0002f513 	.word	0x0002f513

00023e9c <__multiply>:
   23e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ea0:	4691      	mov	r9, r2
   23ea2:	690a      	ldr	r2, [r1, #16]
   23ea4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   23ea8:	429a      	cmp	r2, r3
   23eaa:	bfb8      	it	lt
   23eac:	460b      	movlt	r3, r1
   23eae:	460c      	mov	r4, r1
   23eb0:	bfbc      	itt	lt
   23eb2:	464c      	movlt	r4, r9
   23eb4:	4699      	movlt	r9, r3
   23eb6:	6927      	ldr	r7, [r4, #16]
   23eb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
   23ebc:	68a3      	ldr	r3, [r4, #8]
   23ebe:	6861      	ldr	r1, [r4, #4]
   23ec0:	eb07 060a 	add.w	r6, r7, sl
   23ec4:	42b3      	cmp	r3, r6
   23ec6:	b085      	sub	sp, #20
   23ec8:	bfb8      	it	lt
   23eca:	3101      	addlt	r1, #1
   23ecc:	f7ff ff28 	bl	23d20 <_Balloc>
   23ed0:	b930      	cbnz	r0, 23ee0 <__multiply+0x44>
   23ed2:	4602      	mov	r2, r0
   23ed4:	4b43      	ldr	r3, [pc, #268]	; (23fe4 <__multiply+0x148>)
   23ed6:	4844      	ldr	r0, [pc, #272]	; (23fe8 <__multiply+0x14c>)
   23ed8:	f240 115d 	movw	r1, #349	; 0x15d
   23edc:	f000 fb34 	bl	24548 <__assert_func>
   23ee0:	f100 0514 	add.w	r5, r0, #20
   23ee4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   23ee8:	462b      	mov	r3, r5
   23eea:	2200      	movs	r2, #0
   23eec:	4543      	cmp	r3, r8
   23eee:	d321      	bcc.n	23f34 <__multiply+0x98>
   23ef0:	f104 0314 	add.w	r3, r4, #20
   23ef4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   23ef8:	f109 0314 	add.w	r3, r9, #20
   23efc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   23f00:	9202      	str	r2, [sp, #8]
   23f02:	1b3a      	subs	r2, r7, r4
   23f04:	3a15      	subs	r2, #21
   23f06:	f022 0203 	bic.w	r2, r2, #3
   23f0a:	3204      	adds	r2, #4
   23f0c:	f104 0115 	add.w	r1, r4, #21
   23f10:	428f      	cmp	r7, r1
   23f12:	bf38      	it	cc
   23f14:	2204      	movcc	r2, #4
   23f16:	9201      	str	r2, [sp, #4]
   23f18:	9a02      	ldr	r2, [sp, #8]
   23f1a:	9303      	str	r3, [sp, #12]
   23f1c:	429a      	cmp	r2, r3
   23f1e:	d80c      	bhi.n	23f3a <__multiply+0x9e>
   23f20:	2e00      	cmp	r6, #0
   23f22:	dd03      	ble.n	23f2c <__multiply+0x90>
   23f24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   23f28:	2b00      	cmp	r3, #0
   23f2a:	d059      	beq.n	23fe0 <__multiply+0x144>
   23f2c:	6106      	str	r6, [r0, #16]
   23f2e:	b005      	add	sp, #20
   23f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23f34:	f843 2b04 	str.w	r2, [r3], #4
   23f38:	e7d8      	b.n	23eec <__multiply+0x50>
   23f3a:	f8b3 a000 	ldrh.w	sl, [r3]
   23f3e:	f1ba 0f00 	cmp.w	sl, #0
   23f42:	d023      	beq.n	23f8c <__multiply+0xf0>
   23f44:	f104 0e14 	add.w	lr, r4, #20
   23f48:	46a9      	mov	r9, r5
   23f4a:	f04f 0c00 	mov.w	ip, #0
   23f4e:	f85e 2b04 	ldr.w	r2, [lr], #4
   23f52:	f8d9 1000 	ldr.w	r1, [r9]
   23f56:	fa1f fb82 	uxth.w	fp, r2
   23f5a:	b289      	uxth	r1, r1
   23f5c:	fb0a 110b 	mla	r1, sl, fp, r1
   23f60:	4461      	add	r1, ip
   23f62:	f8d9 c000 	ldr.w	ip, [r9]
   23f66:	0c12      	lsrs	r2, r2, #16
   23f68:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   23f6c:	fb0a c202 	mla	r2, sl, r2, ip
   23f70:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   23f74:	b289      	uxth	r1, r1
   23f76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   23f7a:	4577      	cmp	r7, lr
   23f7c:	f849 1b04 	str.w	r1, [r9], #4
   23f80:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   23f84:	d8e3      	bhi.n	23f4e <__multiply+0xb2>
   23f86:	9a01      	ldr	r2, [sp, #4]
   23f88:	f845 c002 	str.w	ip, [r5, r2]
   23f8c:	9a03      	ldr	r2, [sp, #12]
   23f8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   23f92:	3304      	adds	r3, #4
   23f94:	f1b9 0f00 	cmp.w	r9, #0
   23f98:	d020      	beq.n	23fdc <__multiply+0x140>
   23f9a:	6829      	ldr	r1, [r5, #0]
   23f9c:	f104 0c14 	add.w	ip, r4, #20
   23fa0:	46ae      	mov	lr, r5
   23fa2:	f04f 0a00 	mov.w	sl, #0
   23fa6:	f8bc b000 	ldrh.w	fp, [ip]
   23faa:	f8be 2002 	ldrh.w	r2, [lr, #2]
   23fae:	fb09 220b 	mla	r2, r9, fp, r2
   23fb2:	4492      	add	sl, r2
   23fb4:	b289      	uxth	r1, r1
   23fb6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   23fba:	f84e 1b04 	str.w	r1, [lr], #4
   23fbe:	f85c 2b04 	ldr.w	r2, [ip], #4
   23fc2:	f8be 1000 	ldrh.w	r1, [lr]
   23fc6:	0c12      	lsrs	r2, r2, #16
   23fc8:	fb09 1102 	mla	r1, r9, r2, r1
   23fcc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   23fd0:	4567      	cmp	r7, ip
   23fd2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   23fd6:	d8e6      	bhi.n	23fa6 <__multiply+0x10a>
   23fd8:	9a01      	ldr	r2, [sp, #4]
   23fda:	50a9      	str	r1, [r5, r2]
   23fdc:	3504      	adds	r5, #4
   23fde:	e79b      	b.n	23f18 <__multiply+0x7c>
   23fe0:	3e01      	subs	r6, #1
   23fe2:	e79d      	b.n	23f20 <__multiply+0x84>
   23fe4:	0002f502 	.word	0x0002f502
   23fe8:	0002f513 	.word	0x0002f513

00023fec <__pow5mult>:
   23fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ff0:	4615      	mov	r5, r2
   23ff2:	f012 0203 	ands.w	r2, r2, #3
   23ff6:	4606      	mov	r6, r0
   23ff8:	460f      	mov	r7, r1
   23ffa:	d007      	beq.n	2400c <__pow5mult+0x20>
   23ffc:	4c25      	ldr	r4, [pc, #148]	; (24094 <__pow5mult+0xa8>)
   23ffe:	3a01      	subs	r2, #1
   24000:	2300      	movs	r3, #0
   24002:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   24006:	f7ff feed 	bl	23de4 <__multadd>
   2400a:	4607      	mov	r7, r0
   2400c:	10ad      	asrs	r5, r5, #2
   2400e:	d03d      	beq.n	2408c <__pow5mult+0xa0>
   24010:	6a74      	ldr	r4, [r6, #36]	; 0x24
   24012:	b97c      	cbnz	r4, 24034 <__pow5mult+0x48>
   24014:	2010      	movs	r0, #16
   24016:	f7ff fa39 	bl	2348c <malloc>
   2401a:	4602      	mov	r2, r0
   2401c:	6270      	str	r0, [r6, #36]	; 0x24
   2401e:	b928      	cbnz	r0, 2402c <__pow5mult+0x40>
   24020:	4b1d      	ldr	r3, [pc, #116]	; (24098 <__pow5mult+0xac>)
   24022:	481e      	ldr	r0, [pc, #120]	; (2409c <__pow5mult+0xb0>)
   24024:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   24028:	f000 fa8e 	bl	24548 <__assert_func>
   2402c:	e9c0 4401 	strd	r4, r4, [r0, #4]
   24030:	6004      	str	r4, [r0, #0]
   24032:	60c4      	str	r4, [r0, #12]
   24034:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   24038:	f8d8 4008 	ldr.w	r4, [r8, #8]
   2403c:	b94c      	cbnz	r4, 24052 <__pow5mult+0x66>
   2403e:	f240 2171 	movw	r1, #625	; 0x271
   24042:	4630      	mov	r0, r6
   24044:	f7ff ff14 	bl	23e70 <__i2b>
   24048:	2300      	movs	r3, #0
   2404a:	f8c8 0008 	str.w	r0, [r8, #8]
   2404e:	4604      	mov	r4, r0
   24050:	6003      	str	r3, [r0, #0]
   24052:	f04f 0900 	mov.w	r9, #0
   24056:	07eb      	lsls	r3, r5, #31
   24058:	d50a      	bpl.n	24070 <__pow5mult+0x84>
   2405a:	4639      	mov	r1, r7
   2405c:	4622      	mov	r2, r4
   2405e:	4630      	mov	r0, r6
   24060:	f7ff ff1c 	bl	23e9c <__multiply>
   24064:	4639      	mov	r1, r7
   24066:	4680      	mov	r8, r0
   24068:	4630      	mov	r0, r6
   2406a:	f7ff fe99 	bl	23da0 <_Bfree>
   2406e:	4647      	mov	r7, r8
   24070:	106d      	asrs	r5, r5, #1
   24072:	d00b      	beq.n	2408c <__pow5mult+0xa0>
   24074:	6820      	ldr	r0, [r4, #0]
   24076:	b938      	cbnz	r0, 24088 <__pow5mult+0x9c>
   24078:	4622      	mov	r2, r4
   2407a:	4621      	mov	r1, r4
   2407c:	4630      	mov	r0, r6
   2407e:	f7ff ff0d 	bl	23e9c <__multiply>
   24082:	6020      	str	r0, [r4, #0]
   24084:	f8c0 9000 	str.w	r9, [r0]
   24088:	4604      	mov	r4, r0
   2408a:	e7e4      	b.n	24056 <__pow5mult+0x6a>
   2408c:	4638      	mov	r0, r7
   2408e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   24092:	bf00      	nop
   24094:	0002d2d4 	.word	0x0002d2d4
   24098:	0002f491 	.word	0x0002f491
   2409c:	0002f513 	.word	0x0002f513

000240a0 <__lshift>:
   240a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   240a4:	460c      	mov	r4, r1
   240a6:	6849      	ldr	r1, [r1, #4]
   240a8:	6923      	ldr	r3, [r4, #16]
   240aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
   240ae:	68a3      	ldr	r3, [r4, #8]
   240b0:	4607      	mov	r7, r0
   240b2:	4691      	mov	r9, r2
   240b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   240b8:	f108 0601 	add.w	r6, r8, #1
   240bc:	42b3      	cmp	r3, r6
   240be:	db0b      	blt.n	240d8 <__lshift+0x38>
   240c0:	4638      	mov	r0, r7
   240c2:	f7ff fe2d 	bl	23d20 <_Balloc>
   240c6:	4605      	mov	r5, r0
   240c8:	b948      	cbnz	r0, 240de <__lshift+0x3e>
   240ca:	4602      	mov	r2, r0
   240cc:	4b2a      	ldr	r3, [pc, #168]	; (24178 <__lshift+0xd8>)
   240ce:	482b      	ldr	r0, [pc, #172]	; (2417c <__lshift+0xdc>)
   240d0:	f240 11d9 	movw	r1, #473	; 0x1d9
   240d4:	f000 fa38 	bl	24548 <__assert_func>
   240d8:	3101      	adds	r1, #1
   240da:	005b      	lsls	r3, r3, #1
   240dc:	e7ee      	b.n	240bc <__lshift+0x1c>
   240de:	2300      	movs	r3, #0
   240e0:	f100 0114 	add.w	r1, r0, #20
   240e4:	f100 0210 	add.w	r2, r0, #16
   240e8:	4618      	mov	r0, r3
   240ea:	4553      	cmp	r3, sl
   240ec:	db37      	blt.n	2415e <__lshift+0xbe>
   240ee:	6920      	ldr	r0, [r4, #16]
   240f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   240f4:	f104 0314 	add.w	r3, r4, #20
   240f8:	f019 091f 	ands.w	r9, r9, #31
   240fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   24100:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   24104:	d02f      	beq.n	24166 <__lshift+0xc6>
   24106:	f1c9 0e20 	rsb	lr, r9, #32
   2410a:	468a      	mov	sl, r1
   2410c:	f04f 0c00 	mov.w	ip, #0
   24110:	681a      	ldr	r2, [r3, #0]
   24112:	fa02 f209 	lsl.w	r2, r2, r9
   24116:	ea42 020c 	orr.w	r2, r2, ip
   2411a:	f84a 2b04 	str.w	r2, [sl], #4
   2411e:	f853 2b04 	ldr.w	r2, [r3], #4
   24122:	4298      	cmp	r0, r3
   24124:	fa22 fc0e 	lsr.w	ip, r2, lr
   24128:	d8f2      	bhi.n	24110 <__lshift+0x70>
   2412a:	1b03      	subs	r3, r0, r4
   2412c:	3b15      	subs	r3, #21
   2412e:	f023 0303 	bic.w	r3, r3, #3
   24132:	3304      	adds	r3, #4
   24134:	f104 0215 	add.w	r2, r4, #21
   24138:	4290      	cmp	r0, r2
   2413a:	bf38      	it	cc
   2413c:	2304      	movcc	r3, #4
   2413e:	f841 c003 	str.w	ip, [r1, r3]
   24142:	f1bc 0f00 	cmp.w	ip, #0
   24146:	d001      	beq.n	2414c <__lshift+0xac>
   24148:	f108 0602 	add.w	r6, r8, #2
   2414c:	3e01      	subs	r6, #1
   2414e:	4638      	mov	r0, r7
   24150:	612e      	str	r6, [r5, #16]
   24152:	4621      	mov	r1, r4
   24154:	f7ff fe24 	bl	23da0 <_Bfree>
   24158:	4628      	mov	r0, r5
   2415a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2415e:	f842 0f04 	str.w	r0, [r2, #4]!
   24162:	3301      	adds	r3, #1
   24164:	e7c1      	b.n	240ea <__lshift+0x4a>
   24166:	3904      	subs	r1, #4
   24168:	f853 2b04 	ldr.w	r2, [r3], #4
   2416c:	f841 2f04 	str.w	r2, [r1, #4]!
   24170:	4298      	cmp	r0, r3
   24172:	d8f9      	bhi.n	24168 <__lshift+0xc8>
   24174:	e7ea      	b.n	2414c <__lshift+0xac>
   24176:	bf00      	nop
   24178:	0002f502 	.word	0x0002f502
   2417c:	0002f513 	.word	0x0002f513

00024180 <__mdiff>:
   24180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24184:	460d      	mov	r5, r1
   24186:	4607      	mov	r7, r0
   24188:	4611      	mov	r1, r2
   2418a:	4628      	mov	r0, r5
   2418c:	4614      	mov	r4, r2
   2418e:	f006 fec5 	bl	2af1c <__mcmp>
   24192:	1e06      	subs	r6, r0, #0
   24194:	d111      	bne.n	241ba <__mdiff+0x3a>
   24196:	4631      	mov	r1, r6
   24198:	4638      	mov	r0, r7
   2419a:	f7ff fdc1 	bl	23d20 <_Balloc>
   2419e:	4602      	mov	r2, r0
   241a0:	b928      	cbnz	r0, 241ae <__mdiff+0x2e>
   241a2:	4b39      	ldr	r3, [pc, #228]	; (24288 <__mdiff+0x108>)
   241a4:	f240 2132 	movw	r1, #562	; 0x232
   241a8:	4838      	ldr	r0, [pc, #224]	; (2428c <__mdiff+0x10c>)
   241aa:	f000 f9cd 	bl	24548 <__assert_func>
   241ae:	2301      	movs	r3, #1
   241b0:	e9c0 3604 	strd	r3, r6, [r0, #16]
   241b4:	4610      	mov	r0, r2
   241b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   241ba:	bfa4      	itt	ge
   241bc:	4623      	movge	r3, r4
   241be:	462c      	movge	r4, r5
   241c0:	4638      	mov	r0, r7
   241c2:	6861      	ldr	r1, [r4, #4]
   241c4:	bfa6      	itte	ge
   241c6:	461d      	movge	r5, r3
   241c8:	2600      	movge	r6, #0
   241ca:	2601      	movlt	r6, #1
   241cc:	f7ff fda8 	bl	23d20 <_Balloc>
   241d0:	4602      	mov	r2, r0
   241d2:	b918      	cbnz	r0, 241dc <__mdiff+0x5c>
   241d4:	4b2c      	ldr	r3, [pc, #176]	; (24288 <__mdiff+0x108>)
   241d6:	f44f 7110 	mov.w	r1, #576	; 0x240
   241da:	e7e5      	b.n	241a8 <__mdiff+0x28>
   241dc:	6927      	ldr	r7, [r4, #16]
   241de:	60c6      	str	r6, [r0, #12]
   241e0:	692e      	ldr	r6, [r5, #16]
   241e2:	f104 0014 	add.w	r0, r4, #20
   241e6:	f105 0914 	add.w	r9, r5, #20
   241ea:	f102 0e14 	add.w	lr, r2, #20
   241ee:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
   241f2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   241f6:	3410      	adds	r4, #16
   241f8:	46f2      	mov	sl, lr
   241fa:	2100      	movs	r1, #0
   241fc:	f859 3b04 	ldr.w	r3, [r9], #4
   24200:	f854 bf04 	ldr.w	fp, [r4, #4]!
   24204:	fa1f f883 	uxth.w	r8, r3
   24208:	fa11 f18b 	uxtah	r1, r1, fp
   2420c:	0c1b      	lsrs	r3, r3, #16
   2420e:	eba1 0808 	sub.w	r8, r1, r8
   24212:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   24216:	eb03 4328 	add.w	r3, r3, r8, asr #16
   2421a:	fa1f f888 	uxth.w	r8, r8
   2421e:	1419      	asrs	r1, r3, #16
   24220:	454e      	cmp	r6, r9
   24222:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   24226:	f84a 3b04 	str.w	r3, [sl], #4
   2422a:	d8e7      	bhi.n	241fc <__mdiff+0x7c>
   2422c:	1b73      	subs	r3, r6, r5
   2422e:	3b15      	subs	r3, #21
   24230:	f023 0303 	bic.w	r3, r3, #3
   24234:	3304      	adds	r3, #4
   24236:	3515      	adds	r5, #21
   24238:	42ae      	cmp	r6, r5
   2423a:	bf38      	it	cc
   2423c:	2304      	movcc	r3, #4
   2423e:	4418      	add	r0, r3
   24240:	4473      	add	r3, lr
   24242:	469e      	mov	lr, r3
   24244:	4606      	mov	r6, r0
   24246:	4566      	cmp	r6, ip
   24248:	d30e      	bcc.n	24268 <__mdiff+0xe8>
   2424a:	f10c 0103 	add.w	r1, ip, #3
   2424e:	1a09      	subs	r1, r1, r0
   24250:	f021 0103 	bic.w	r1, r1, #3
   24254:	3803      	subs	r0, #3
   24256:	4584      	cmp	ip, r0
   24258:	bf38      	it	cc
   2425a:	2100      	movcc	r1, #0
   2425c:	4419      	add	r1, r3
   2425e:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   24262:	b17b      	cbz	r3, 24284 <__mdiff+0x104>
   24264:	6117      	str	r7, [r2, #16]
   24266:	e7a5      	b.n	241b4 <__mdiff+0x34>
   24268:	f856 8b04 	ldr.w	r8, [r6], #4
   2426c:	fa11 f488 	uxtah	r4, r1, r8
   24270:	1425      	asrs	r5, r4, #16
   24272:	eb05 4518 	add.w	r5, r5, r8, lsr #16
   24276:	b2a4      	uxth	r4, r4
   24278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   2427c:	f84e 4b04 	str.w	r4, [lr], #4
   24280:	1429      	asrs	r1, r5, #16
   24282:	e7e0      	b.n	24246 <__mdiff+0xc6>
   24284:	3f01      	subs	r7, #1
   24286:	e7ea      	b.n	2425e <__mdiff+0xde>
   24288:	0002f502 	.word	0x0002f502
   2428c:	0002f513 	.word	0x0002f513

00024290 <__d2b>:
   24290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24294:	2101      	movs	r1, #1
   24296:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   2429a:	4690      	mov	r8, r2
   2429c:	461d      	mov	r5, r3
   2429e:	f7ff fd3f 	bl	23d20 <_Balloc>
   242a2:	4604      	mov	r4, r0
   242a4:	b930      	cbnz	r0, 242b4 <__d2b+0x24>
   242a6:	4602      	mov	r2, r0
   242a8:	4b25      	ldr	r3, [pc, #148]	; (24340 <__d2b+0xb0>)
   242aa:	4826      	ldr	r0, [pc, #152]	; (24344 <__d2b+0xb4>)
   242ac:	f240 310a 	movw	r1, #778	; 0x30a
   242b0:	f000 f94a 	bl	24548 <__assert_func>
   242b4:	f3c5 0313 	ubfx	r3, r5, #0, #20
   242b8:	f3c5 550a 	ubfx	r5, r5, #20, #11
   242bc:	bb2d      	cbnz	r5, 2430a <__d2b+0x7a>
   242be:	9301      	str	r3, [sp, #4]
   242c0:	f1b8 0300 	subs.w	r3, r8, #0
   242c4:	d026      	beq.n	24314 <__d2b+0x84>
   242c6:	4668      	mov	r0, sp
   242c8:	9300      	str	r3, [sp, #0]
   242ca:	f006 fdfa 	bl	2aec2 <__lo0bits>
   242ce:	9900      	ldr	r1, [sp, #0]
   242d0:	b1f0      	cbz	r0, 24310 <__d2b+0x80>
   242d2:	9a01      	ldr	r2, [sp, #4]
   242d4:	f1c0 0320 	rsb	r3, r0, #32
   242d8:	fa02 f303 	lsl.w	r3, r2, r3
   242dc:	430b      	orrs	r3, r1
   242de:	40c2      	lsrs	r2, r0
   242e0:	6163      	str	r3, [r4, #20]
   242e2:	9201      	str	r2, [sp, #4]
   242e4:	9b01      	ldr	r3, [sp, #4]
   242e6:	61a3      	str	r3, [r4, #24]
   242e8:	2b00      	cmp	r3, #0
   242ea:	bf14      	ite	ne
   242ec:	2102      	movne	r1, #2
   242ee:	2101      	moveq	r1, #1
   242f0:	6121      	str	r1, [r4, #16]
   242f2:	b1c5      	cbz	r5, 24326 <__d2b+0x96>
   242f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   242f8:	4405      	add	r5, r0
   242fa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   242fe:	603d      	str	r5, [r7, #0]
   24300:	6030      	str	r0, [r6, #0]
   24302:	4620      	mov	r0, r4
   24304:	b002      	add	sp, #8
   24306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2430a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   2430e:	e7d6      	b.n	242be <__d2b+0x2e>
   24310:	6161      	str	r1, [r4, #20]
   24312:	e7e7      	b.n	242e4 <__d2b+0x54>
   24314:	a801      	add	r0, sp, #4
   24316:	f006 fdd4 	bl	2aec2 <__lo0bits>
   2431a:	9b01      	ldr	r3, [sp, #4]
   2431c:	6163      	str	r3, [r4, #20]
   2431e:	2101      	movs	r1, #1
   24320:	6121      	str	r1, [r4, #16]
   24322:	3020      	adds	r0, #32
   24324:	e7e5      	b.n	242f2 <__d2b+0x62>
   24326:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   2432a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2432e:	6038      	str	r0, [r7, #0]
   24330:	6918      	ldr	r0, [r3, #16]
   24332:	f006 fda6 	bl	2ae82 <__hi0bits>
   24336:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   2433a:	6031      	str	r1, [r6, #0]
   2433c:	e7e1      	b.n	24302 <__d2b+0x72>
   2433e:	bf00      	nop
   24340:	0002f502 	.word	0x0002f502
   24344:	0002f513 	.word	0x0002f513

00024348 <_svfiprintf_r>:
   24348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2434c:	4698      	mov	r8, r3
   2434e:	898b      	ldrh	r3, [r1, #12]
   24350:	061b      	lsls	r3, r3, #24
   24352:	b09d      	sub	sp, #116	; 0x74
   24354:	4607      	mov	r7, r0
   24356:	460d      	mov	r5, r1
   24358:	4614      	mov	r4, r2
   2435a:	d50e      	bpl.n	2437a <_svfiprintf_r+0x32>
   2435c:	690b      	ldr	r3, [r1, #16]
   2435e:	b963      	cbnz	r3, 2437a <_svfiprintf_r+0x32>
   24360:	2140      	movs	r1, #64	; 0x40
   24362:	f7ff f8e5 	bl	23530 <_malloc_r>
   24366:	6028      	str	r0, [r5, #0]
   24368:	6128      	str	r0, [r5, #16]
   2436a:	b920      	cbnz	r0, 24376 <_svfiprintf_r+0x2e>
   2436c:	230c      	movs	r3, #12
   2436e:	603b      	str	r3, [r7, #0]
   24370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24374:	e0d1      	b.n	2451a <_svfiprintf_r+0x1d2>
   24376:	2340      	movs	r3, #64	; 0x40
   24378:	616b      	str	r3, [r5, #20]
   2437a:	2300      	movs	r3, #0
   2437c:	9309      	str	r3, [sp, #36]	; 0x24
   2437e:	2320      	movs	r3, #32
   24380:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   24384:	f8cd 800c 	str.w	r8, [sp, #12]
   24388:	2330      	movs	r3, #48	; 0x30
   2438a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 24534 <_svfiprintf_r+0x1ec>
   2438e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   24392:	f04f 0901 	mov.w	r9, #1
   24396:	4623      	mov	r3, r4
   24398:	469a      	mov	sl, r3
   2439a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2439e:	b10a      	cbz	r2, 243a4 <_svfiprintf_r+0x5c>
   243a0:	2a25      	cmp	r2, #37	; 0x25
   243a2:	d1f9      	bne.n	24398 <_svfiprintf_r+0x50>
   243a4:	ebba 0b04 	subs.w	fp, sl, r4
   243a8:	d00b      	beq.n	243c2 <_svfiprintf_r+0x7a>
   243aa:	465b      	mov	r3, fp
   243ac:	4622      	mov	r2, r4
   243ae:	4629      	mov	r1, r5
   243b0:	4638      	mov	r0, r7
   243b2:	f006 fddc 	bl	2af6e <__ssputs_r>
   243b6:	3001      	adds	r0, #1
   243b8:	f000 80aa 	beq.w	24510 <_svfiprintf_r+0x1c8>
   243bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   243be:	445a      	add	r2, fp
   243c0:	9209      	str	r2, [sp, #36]	; 0x24
   243c2:	f89a 3000 	ldrb.w	r3, [sl]
   243c6:	2b00      	cmp	r3, #0
   243c8:	f000 80a2 	beq.w	24510 <_svfiprintf_r+0x1c8>
   243cc:	2300      	movs	r3, #0
   243ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   243d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
   243d6:	f10a 0a01 	add.w	sl, sl, #1
   243da:	9304      	str	r3, [sp, #16]
   243dc:	9307      	str	r3, [sp, #28]
   243de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   243e2:	931a      	str	r3, [sp, #104]	; 0x68
   243e4:	4654      	mov	r4, sl
   243e6:	2205      	movs	r2, #5
   243e8:	f814 1b01 	ldrb.w	r1, [r4], #1
   243ec:	4851      	ldr	r0, [pc, #324]	; (24534 <_svfiprintf_r+0x1ec>)
   243ee:	f7db fe87 	bl	100 <memchr>
   243f2:	9a04      	ldr	r2, [sp, #16]
   243f4:	b9d8      	cbnz	r0, 2442e <_svfiprintf_r+0xe6>
   243f6:	06d0      	lsls	r0, r2, #27
   243f8:	bf44      	itt	mi
   243fa:	2320      	movmi	r3, #32
   243fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   24400:	0711      	lsls	r1, r2, #28
   24402:	bf44      	itt	mi
   24404:	232b      	movmi	r3, #43	; 0x2b
   24406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2440a:	f89a 3000 	ldrb.w	r3, [sl]
   2440e:	2b2a      	cmp	r3, #42	; 0x2a
   24410:	d015      	beq.n	2443e <_svfiprintf_r+0xf6>
   24412:	9a07      	ldr	r2, [sp, #28]
   24414:	4654      	mov	r4, sl
   24416:	2000      	movs	r0, #0
   24418:	f04f 0c0a 	mov.w	ip, #10
   2441c:	4621      	mov	r1, r4
   2441e:	f811 3b01 	ldrb.w	r3, [r1], #1
   24422:	3b30      	subs	r3, #48	; 0x30
   24424:	2b09      	cmp	r3, #9
   24426:	d94e      	bls.n	244c6 <_svfiprintf_r+0x17e>
   24428:	b1b0      	cbz	r0, 24458 <_svfiprintf_r+0x110>
   2442a:	9207      	str	r2, [sp, #28]
   2442c:	e014      	b.n	24458 <_svfiprintf_r+0x110>
   2442e:	eba0 0308 	sub.w	r3, r0, r8
   24432:	fa09 f303 	lsl.w	r3, r9, r3
   24436:	4313      	orrs	r3, r2
   24438:	9304      	str	r3, [sp, #16]
   2443a:	46a2      	mov	sl, r4
   2443c:	e7d2      	b.n	243e4 <_svfiprintf_r+0x9c>
   2443e:	9b03      	ldr	r3, [sp, #12]
   24440:	1d19      	adds	r1, r3, #4
   24442:	681b      	ldr	r3, [r3, #0]
   24444:	9103      	str	r1, [sp, #12]
   24446:	2b00      	cmp	r3, #0
   24448:	bfbb      	ittet	lt
   2444a:	425b      	neglt	r3, r3
   2444c:	f042 0202 	orrlt.w	r2, r2, #2
   24450:	9307      	strge	r3, [sp, #28]
   24452:	9307      	strlt	r3, [sp, #28]
   24454:	bfb8      	it	lt
   24456:	9204      	strlt	r2, [sp, #16]
   24458:	7823      	ldrb	r3, [r4, #0]
   2445a:	2b2e      	cmp	r3, #46	; 0x2e
   2445c:	d10c      	bne.n	24478 <_svfiprintf_r+0x130>
   2445e:	7863      	ldrb	r3, [r4, #1]
   24460:	2b2a      	cmp	r3, #42	; 0x2a
   24462:	d135      	bne.n	244d0 <_svfiprintf_r+0x188>
   24464:	9b03      	ldr	r3, [sp, #12]
   24466:	1d1a      	adds	r2, r3, #4
   24468:	681b      	ldr	r3, [r3, #0]
   2446a:	9203      	str	r2, [sp, #12]
   2446c:	2b00      	cmp	r3, #0
   2446e:	bfb8      	it	lt
   24470:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   24474:	3402      	adds	r4, #2
   24476:	9305      	str	r3, [sp, #20]
   24478:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 24538 <_svfiprintf_r+0x1f0>
   2447c:	7821      	ldrb	r1, [r4, #0]
   2447e:	2203      	movs	r2, #3
   24480:	4650      	mov	r0, sl
   24482:	f7db fe3d 	bl	100 <memchr>
   24486:	b140      	cbz	r0, 2449a <_svfiprintf_r+0x152>
   24488:	2340      	movs	r3, #64	; 0x40
   2448a:	eba0 000a 	sub.w	r0, r0, sl
   2448e:	fa03 f000 	lsl.w	r0, r3, r0
   24492:	9b04      	ldr	r3, [sp, #16]
   24494:	4303      	orrs	r3, r0
   24496:	3401      	adds	r4, #1
   24498:	9304      	str	r3, [sp, #16]
   2449a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2449e:	4827      	ldr	r0, [pc, #156]	; (2453c <_svfiprintf_r+0x1f4>)
   244a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   244a4:	2206      	movs	r2, #6
   244a6:	f7db fe2b 	bl	100 <memchr>
   244aa:	2800      	cmp	r0, #0
   244ac:	d038      	beq.n	24520 <_svfiprintf_r+0x1d8>
   244ae:	4b24      	ldr	r3, [pc, #144]	; (24540 <_svfiprintf_r+0x1f8>)
   244b0:	bb1b      	cbnz	r3, 244fa <_svfiprintf_r+0x1b2>
   244b2:	9b03      	ldr	r3, [sp, #12]
   244b4:	3307      	adds	r3, #7
   244b6:	f023 0307 	bic.w	r3, r3, #7
   244ba:	3308      	adds	r3, #8
   244bc:	9303      	str	r3, [sp, #12]
   244be:	9b09      	ldr	r3, [sp, #36]	; 0x24
   244c0:	4433      	add	r3, r6
   244c2:	9309      	str	r3, [sp, #36]	; 0x24
   244c4:	e767      	b.n	24396 <_svfiprintf_r+0x4e>
   244c6:	fb0c 3202 	mla	r2, ip, r2, r3
   244ca:	460c      	mov	r4, r1
   244cc:	2001      	movs	r0, #1
   244ce:	e7a5      	b.n	2441c <_svfiprintf_r+0xd4>
   244d0:	2300      	movs	r3, #0
   244d2:	3401      	adds	r4, #1
   244d4:	9305      	str	r3, [sp, #20]
   244d6:	4619      	mov	r1, r3
   244d8:	f04f 0c0a 	mov.w	ip, #10
   244dc:	4620      	mov	r0, r4
   244de:	f810 2b01 	ldrb.w	r2, [r0], #1
   244e2:	3a30      	subs	r2, #48	; 0x30
   244e4:	2a09      	cmp	r2, #9
   244e6:	d903      	bls.n	244f0 <_svfiprintf_r+0x1a8>
   244e8:	2b00      	cmp	r3, #0
   244ea:	d0c5      	beq.n	24478 <_svfiprintf_r+0x130>
   244ec:	9105      	str	r1, [sp, #20]
   244ee:	e7c3      	b.n	24478 <_svfiprintf_r+0x130>
   244f0:	fb0c 2101 	mla	r1, ip, r1, r2
   244f4:	4604      	mov	r4, r0
   244f6:	2301      	movs	r3, #1
   244f8:	e7f0      	b.n	244dc <_svfiprintf_r+0x194>
   244fa:	ab03      	add	r3, sp, #12
   244fc:	9300      	str	r3, [sp, #0]
   244fe:	462a      	mov	r2, r5
   24500:	4b10      	ldr	r3, [pc, #64]	; (24544 <_svfiprintf_r+0x1fc>)
   24502:	a904      	add	r1, sp, #16
   24504:	4638      	mov	r0, r7
   24506:	f7ff f86d 	bl	235e4 <_printf_float>
   2450a:	1c42      	adds	r2, r0, #1
   2450c:	4606      	mov	r6, r0
   2450e:	d1d6      	bne.n	244be <_svfiprintf_r+0x176>
   24510:	89ab      	ldrh	r3, [r5, #12]
   24512:	065b      	lsls	r3, r3, #25
   24514:	f53f af2c 	bmi.w	24370 <_svfiprintf_r+0x28>
   24518:	9809      	ldr	r0, [sp, #36]	; 0x24
   2451a:	b01d      	add	sp, #116	; 0x74
   2451c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24520:	ab03      	add	r3, sp, #12
   24522:	9300      	str	r3, [sp, #0]
   24524:	462a      	mov	r2, r5
   24526:	4b07      	ldr	r3, [pc, #28]	; (24544 <_svfiprintf_r+0x1fc>)
   24528:	a904      	add	r1, sp, #16
   2452a:	4638      	mov	r0, r7
   2452c:	f7ff fa84 	bl	23a38 <_printf_i>
   24530:	e7eb      	b.n	2450a <_svfiprintf_r+0x1c2>
   24532:	bf00      	nop
   24534:	0002f56e 	.word	0x0002f56e
   24538:	0002f574 	.word	0x0002f574
   2453c:	0002f578 	.word	0x0002f578
   24540:	000235e5 	.word	0x000235e5
   24544:	0002af6f 	.word	0x0002af6f

00024548 <__assert_func>:
   24548:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2454a:	4614      	mov	r4, r2
   2454c:	461a      	mov	r2, r3
   2454e:	4b09      	ldr	r3, [pc, #36]	; (24574 <__assert_func+0x2c>)
   24550:	681b      	ldr	r3, [r3, #0]
   24552:	4605      	mov	r5, r0
   24554:	68d8      	ldr	r0, [r3, #12]
   24556:	b14c      	cbz	r4, 2456c <__assert_func+0x24>
   24558:	4b07      	ldr	r3, [pc, #28]	; (24578 <__assert_func+0x30>)
   2455a:	9100      	str	r1, [sp, #0]
   2455c:	e9cd 3401 	strd	r3, r4, [sp, #4]
   24560:	4906      	ldr	r1, [pc, #24]	; (2457c <__assert_func+0x34>)
   24562:	462b      	mov	r3, r5
   24564:	f000 f80e 	bl	24584 <fiprintf>
   24568:	f006 fde2 	bl	2b130 <abort>
   2456c:	4b04      	ldr	r3, [pc, #16]	; (24580 <__assert_func+0x38>)
   2456e:	461c      	mov	r4, r3
   24570:	e7f3      	b.n	2455a <__assert_func+0x12>
   24572:	bf00      	nop
   24574:	200007ac 	.word	0x200007ac
   24578:	0002f57f 	.word	0x0002f57f
   2457c:	0002f58c 	.word	0x0002f58c
   24580:	0002d61f 	.word	0x0002d61f

00024584 <fiprintf>:
   24584:	b40e      	push	{r1, r2, r3}
   24586:	b503      	push	{r0, r1, lr}
   24588:	4601      	mov	r1, r0
   2458a:	ab03      	add	r3, sp, #12
   2458c:	4805      	ldr	r0, [pc, #20]	; (245a4 <fiprintf+0x20>)
   2458e:	f853 2b04 	ldr.w	r2, [r3], #4
   24592:	6800      	ldr	r0, [r0, #0]
   24594:	9301      	str	r3, [sp, #4]
   24596:	f000 f807 	bl	245a8 <_vfiprintf_r>
   2459a:	b002      	add	sp, #8
   2459c:	f85d eb04 	ldr.w	lr, [sp], #4
   245a0:	b003      	add	sp, #12
   245a2:	4770      	bx	lr
   245a4:	200007ac 	.word	0x200007ac

000245a8 <_vfiprintf_r>:
   245a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   245ac:	460d      	mov	r5, r1
   245ae:	b09d      	sub	sp, #116	; 0x74
   245b0:	4614      	mov	r4, r2
   245b2:	4698      	mov	r8, r3
   245b4:	4606      	mov	r6, r0
   245b6:	b118      	cbz	r0, 245c0 <_vfiprintf_r+0x18>
   245b8:	6983      	ldr	r3, [r0, #24]
   245ba:	b90b      	cbnz	r3, 245c0 <_vfiprintf_r+0x18>
   245bc:	f000 fae4 	bl	24b88 <__sinit>
   245c0:	4b89      	ldr	r3, [pc, #548]	; (247e8 <_vfiprintf_r+0x240>)
   245c2:	429d      	cmp	r5, r3
   245c4:	d11b      	bne.n	245fe <_vfiprintf_r+0x56>
   245c6:	6875      	ldr	r5, [r6, #4]
   245c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   245ca:	07d9      	lsls	r1, r3, #31
   245cc:	d405      	bmi.n	245da <_vfiprintf_r+0x32>
   245ce:	89ab      	ldrh	r3, [r5, #12]
   245d0:	059a      	lsls	r2, r3, #22
   245d2:	d402      	bmi.n	245da <_vfiprintf_r+0x32>
   245d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   245d6:	f002 fb54 	bl	26c82 <__retarget_lock_acquire_recursive>
   245da:	89ab      	ldrh	r3, [r5, #12]
   245dc:	071b      	lsls	r3, r3, #28
   245de:	d501      	bpl.n	245e4 <_vfiprintf_r+0x3c>
   245e0:	692b      	ldr	r3, [r5, #16]
   245e2:	b9eb      	cbnz	r3, 24620 <_vfiprintf_r+0x78>
   245e4:	4629      	mov	r1, r5
   245e6:	4630      	mov	r0, r6
   245e8:	f000 f960 	bl	248ac <__swsetup_r>
   245ec:	b1c0      	cbz	r0, 24620 <_vfiprintf_r+0x78>
   245ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   245f0:	07dc      	lsls	r4, r3, #31
   245f2:	d50e      	bpl.n	24612 <_vfiprintf_r+0x6a>
   245f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   245f8:	b01d      	add	sp, #116	; 0x74
   245fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   245fe:	4b7b      	ldr	r3, [pc, #492]	; (247ec <_vfiprintf_r+0x244>)
   24600:	429d      	cmp	r5, r3
   24602:	d101      	bne.n	24608 <_vfiprintf_r+0x60>
   24604:	68b5      	ldr	r5, [r6, #8]
   24606:	e7df      	b.n	245c8 <_vfiprintf_r+0x20>
   24608:	4b79      	ldr	r3, [pc, #484]	; (247f0 <_vfiprintf_r+0x248>)
   2460a:	429d      	cmp	r5, r3
   2460c:	bf08      	it	eq
   2460e:	68f5      	ldreq	r5, [r6, #12]
   24610:	e7da      	b.n	245c8 <_vfiprintf_r+0x20>
   24612:	89ab      	ldrh	r3, [r5, #12]
   24614:	0598      	lsls	r0, r3, #22
   24616:	d4ed      	bmi.n	245f4 <_vfiprintf_r+0x4c>
   24618:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2461a:	f002 fb38 	bl	26c8e <__retarget_lock_release_recursive>
   2461e:	e7e9      	b.n	245f4 <_vfiprintf_r+0x4c>
   24620:	2300      	movs	r3, #0
   24622:	9309      	str	r3, [sp, #36]	; 0x24
   24624:	2320      	movs	r3, #32
   24626:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2462a:	f8cd 800c 	str.w	r8, [sp, #12]
   2462e:	2330      	movs	r3, #48	; 0x30
   24630:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 247f4 <_vfiprintf_r+0x24c>
   24634:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   24638:	f04f 0901 	mov.w	r9, #1
   2463c:	4623      	mov	r3, r4
   2463e:	469a      	mov	sl, r3
   24640:	f813 2b01 	ldrb.w	r2, [r3], #1
   24644:	b10a      	cbz	r2, 2464a <_vfiprintf_r+0xa2>
   24646:	2a25      	cmp	r2, #37	; 0x25
   24648:	d1f9      	bne.n	2463e <_vfiprintf_r+0x96>
   2464a:	ebba 0b04 	subs.w	fp, sl, r4
   2464e:	d00b      	beq.n	24668 <_vfiprintf_r+0xc0>
   24650:	465b      	mov	r3, fp
   24652:	4622      	mov	r2, r4
   24654:	4629      	mov	r1, r5
   24656:	4630      	mov	r0, r6
   24658:	f006 fd4b 	bl	2b0f2 <__sfputs_r>
   2465c:	3001      	adds	r0, #1
   2465e:	f000 80aa 	beq.w	247b6 <_vfiprintf_r+0x20e>
   24662:	9a09      	ldr	r2, [sp, #36]	; 0x24
   24664:	445a      	add	r2, fp
   24666:	9209      	str	r2, [sp, #36]	; 0x24
   24668:	f89a 3000 	ldrb.w	r3, [sl]
   2466c:	2b00      	cmp	r3, #0
   2466e:	f000 80a2 	beq.w	247b6 <_vfiprintf_r+0x20e>
   24672:	2300      	movs	r3, #0
   24674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   24678:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2467c:	f10a 0a01 	add.w	sl, sl, #1
   24680:	9304      	str	r3, [sp, #16]
   24682:	9307      	str	r3, [sp, #28]
   24684:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   24688:	931a      	str	r3, [sp, #104]	; 0x68
   2468a:	4654      	mov	r4, sl
   2468c:	2205      	movs	r2, #5
   2468e:	f814 1b01 	ldrb.w	r1, [r4], #1
   24692:	4858      	ldr	r0, [pc, #352]	; (247f4 <_vfiprintf_r+0x24c>)
   24694:	f7db fd34 	bl	100 <memchr>
   24698:	9a04      	ldr	r2, [sp, #16]
   2469a:	b9d8      	cbnz	r0, 246d4 <_vfiprintf_r+0x12c>
   2469c:	06d1      	lsls	r1, r2, #27
   2469e:	bf44      	itt	mi
   246a0:	2320      	movmi	r3, #32
   246a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   246a6:	0713      	lsls	r3, r2, #28
   246a8:	bf44      	itt	mi
   246aa:	232b      	movmi	r3, #43	; 0x2b
   246ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   246b0:	f89a 3000 	ldrb.w	r3, [sl]
   246b4:	2b2a      	cmp	r3, #42	; 0x2a
   246b6:	d015      	beq.n	246e4 <_vfiprintf_r+0x13c>
   246b8:	9a07      	ldr	r2, [sp, #28]
   246ba:	4654      	mov	r4, sl
   246bc:	2000      	movs	r0, #0
   246be:	f04f 0c0a 	mov.w	ip, #10
   246c2:	4621      	mov	r1, r4
   246c4:	f811 3b01 	ldrb.w	r3, [r1], #1
   246c8:	3b30      	subs	r3, #48	; 0x30
   246ca:	2b09      	cmp	r3, #9
   246cc:	d94e      	bls.n	2476c <_vfiprintf_r+0x1c4>
   246ce:	b1b0      	cbz	r0, 246fe <_vfiprintf_r+0x156>
   246d0:	9207      	str	r2, [sp, #28]
   246d2:	e014      	b.n	246fe <_vfiprintf_r+0x156>
   246d4:	eba0 0308 	sub.w	r3, r0, r8
   246d8:	fa09 f303 	lsl.w	r3, r9, r3
   246dc:	4313      	orrs	r3, r2
   246de:	9304      	str	r3, [sp, #16]
   246e0:	46a2      	mov	sl, r4
   246e2:	e7d2      	b.n	2468a <_vfiprintf_r+0xe2>
   246e4:	9b03      	ldr	r3, [sp, #12]
   246e6:	1d19      	adds	r1, r3, #4
   246e8:	681b      	ldr	r3, [r3, #0]
   246ea:	9103      	str	r1, [sp, #12]
   246ec:	2b00      	cmp	r3, #0
   246ee:	bfbb      	ittet	lt
   246f0:	425b      	neglt	r3, r3
   246f2:	f042 0202 	orrlt.w	r2, r2, #2
   246f6:	9307      	strge	r3, [sp, #28]
   246f8:	9307      	strlt	r3, [sp, #28]
   246fa:	bfb8      	it	lt
   246fc:	9204      	strlt	r2, [sp, #16]
   246fe:	7823      	ldrb	r3, [r4, #0]
   24700:	2b2e      	cmp	r3, #46	; 0x2e
   24702:	d10c      	bne.n	2471e <_vfiprintf_r+0x176>
   24704:	7863      	ldrb	r3, [r4, #1]
   24706:	2b2a      	cmp	r3, #42	; 0x2a
   24708:	d135      	bne.n	24776 <_vfiprintf_r+0x1ce>
   2470a:	9b03      	ldr	r3, [sp, #12]
   2470c:	1d1a      	adds	r2, r3, #4
   2470e:	681b      	ldr	r3, [r3, #0]
   24710:	9203      	str	r2, [sp, #12]
   24712:	2b00      	cmp	r3, #0
   24714:	bfb8      	it	lt
   24716:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   2471a:	3402      	adds	r4, #2
   2471c:	9305      	str	r3, [sp, #20]
   2471e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 247f8 <_vfiprintf_r+0x250>
   24722:	7821      	ldrb	r1, [r4, #0]
   24724:	2203      	movs	r2, #3
   24726:	4650      	mov	r0, sl
   24728:	f7db fcea 	bl	100 <memchr>
   2472c:	b140      	cbz	r0, 24740 <_vfiprintf_r+0x198>
   2472e:	2340      	movs	r3, #64	; 0x40
   24730:	eba0 000a 	sub.w	r0, r0, sl
   24734:	fa03 f000 	lsl.w	r0, r3, r0
   24738:	9b04      	ldr	r3, [sp, #16]
   2473a:	4303      	orrs	r3, r0
   2473c:	3401      	adds	r4, #1
   2473e:	9304      	str	r3, [sp, #16]
   24740:	f814 1b01 	ldrb.w	r1, [r4], #1
   24744:	482d      	ldr	r0, [pc, #180]	; (247fc <_vfiprintf_r+0x254>)
   24746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2474a:	2206      	movs	r2, #6
   2474c:	f7db fcd8 	bl	100 <memchr>
   24750:	2800      	cmp	r0, #0
   24752:	d03f      	beq.n	247d4 <_vfiprintf_r+0x22c>
   24754:	4b2a      	ldr	r3, [pc, #168]	; (24800 <_vfiprintf_r+0x258>)
   24756:	bb1b      	cbnz	r3, 247a0 <_vfiprintf_r+0x1f8>
   24758:	9b03      	ldr	r3, [sp, #12]
   2475a:	3307      	adds	r3, #7
   2475c:	f023 0307 	bic.w	r3, r3, #7
   24760:	3308      	adds	r3, #8
   24762:	9303      	str	r3, [sp, #12]
   24764:	9b09      	ldr	r3, [sp, #36]	; 0x24
   24766:	443b      	add	r3, r7
   24768:	9309      	str	r3, [sp, #36]	; 0x24
   2476a:	e767      	b.n	2463c <_vfiprintf_r+0x94>
   2476c:	fb0c 3202 	mla	r2, ip, r2, r3
   24770:	460c      	mov	r4, r1
   24772:	2001      	movs	r0, #1
   24774:	e7a5      	b.n	246c2 <_vfiprintf_r+0x11a>
   24776:	2300      	movs	r3, #0
   24778:	3401      	adds	r4, #1
   2477a:	9305      	str	r3, [sp, #20]
   2477c:	4619      	mov	r1, r3
   2477e:	f04f 0c0a 	mov.w	ip, #10
   24782:	4620      	mov	r0, r4
   24784:	f810 2b01 	ldrb.w	r2, [r0], #1
   24788:	3a30      	subs	r2, #48	; 0x30
   2478a:	2a09      	cmp	r2, #9
   2478c:	d903      	bls.n	24796 <_vfiprintf_r+0x1ee>
   2478e:	2b00      	cmp	r3, #0
   24790:	d0c5      	beq.n	2471e <_vfiprintf_r+0x176>
   24792:	9105      	str	r1, [sp, #20]
   24794:	e7c3      	b.n	2471e <_vfiprintf_r+0x176>
   24796:	fb0c 2101 	mla	r1, ip, r1, r2
   2479a:	4604      	mov	r4, r0
   2479c:	2301      	movs	r3, #1
   2479e:	e7f0      	b.n	24782 <_vfiprintf_r+0x1da>
   247a0:	ab03      	add	r3, sp, #12
   247a2:	9300      	str	r3, [sp, #0]
   247a4:	462a      	mov	r2, r5
   247a6:	4b17      	ldr	r3, [pc, #92]	; (24804 <_vfiprintf_r+0x25c>)
   247a8:	a904      	add	r1, sp, #16
   247aa:	4630      	mov	r0, r6
   247ac:	f7fe ff1a 	bl	235e4 <_printf_float>
   247b0:	4607      	mov	r7, r0
   247b2:	1c78      	adds	r0, r7, #1
   247b4:	d1d6      	bne.n	24764 <_vfiprintf_r+0x1bc>
   247b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   247b8:	07d9      	lsls	r1, r3, #31
   247ba:	d405      	bmi.n	247c8 <_vfiprintf_r+0x220>
   247bc:	89ab      	ldrh	r3, [r5, #12]
   247be:	059a      	lsls	r2, r3, #22
   247c0:	d402      	bmi.n	247c8 <_vfiprintf_r+0x220>
   247c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   247c4:	f002 fa63 	bl	26c8e <__retarget_lock_release_recursive>
   247c8:	89ab      	ldrh	r3, [r5, #12]
   247ca:	065b      	lsls	r3, r3, #25
   247cc:	f53f af12 	bmi.w	245f4 <_vfiprintf_r+0x4c>
   247d0:	9809      	ldr	r0, [sp, #36]	; 0x24
   247d2:	e711      	b.n	245f8 <_vfiprintf_r+0x50>
   247d4:	ab03      	add	r3, sp, #12
   247d6:	9300      	str	r3, [sp, #0]
   247d8:	462a      	mov	r2, r5
   247da:	4b0a      	ldr	r3, [pc, #40]	; (24804 <_vfiprintf_r+0x25c>)
   247dc:	a904      	add	r1, sp, #16
   247de:	4630      	mov	r0, r6
   247e0:	f7ff f92a 	bl	23a38 <_printf_i>
   247e4:	e7e4      	b.n	247b0 <_vfiprintf_r+0x208>
   247e6:	bf00      	nop
   247e8:	0002d300 	.word	0x0002d300
   247ec:	0002d320 	.word	0x0002d320
   247f0:	0002d2e0 	.word	0x0002d2e0
   247f4:	0002f56e 	.word	0x0002f56e
   247f8:	0002f574 	.word	0x0002f574
   247fc:	0002f578 	.word	0x0002f578
   24800:	000235e5 	.word	0x000235e5
   24804:	0002b0f3 	.word	0x0002b0f3

00024808 <__swbuf_r>:
   24808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2480a:	460e      	mov	r6, r1
   2480c:	4614      	mov	r4, r2
   2480e:	4605      	mov	r5, r0
   24810:	b118      	cbz	r0, 2481a <__swbuf_r+0x12>
   24812:	6983      	ldr	r3, [r0, #24]
   24814:	b90b      	cbnz	r3, 2481a <__swbuf_r+0x12>
   24816:	f000 f9b7 	bl	24b88 <__sinit>
   2481a:	4b21      	ldr	r3, [pc, #132]	; (248a0 <__swbuf_r+0x98>)
   2481c:	429c      	cmp	r4, r3
   2481e:	d12b      	bne.n	24878 <__swbuf_r+0x70>
   24820:	686c      	ldr	r4, [r5, #4]
   24822:	69a3      	ldr	r3, [r4, #24]
   24824:	60a3      	str	r3, [r4, #8]
   24826:	89a3      	ldrh	r3, [r4, #12]
   24828:	071a      	lsls	r2, r3, #28
   2482a:	d52f      	bpl.n	2488c <__swbuf_r+0x84>
   2482c:	6923      	ldr	r3, [r4, #16]
   2482e:	b36b      	cbz	r3, 2488c <__swbuf_r+0x84>
   24830:	6923      	ldr	r3, [r4, #16]
   24832:	6820      	ldr	r0, [r4, #0]
   24834:	1ac0      	subs	r0, r0, r3
   24836:	6963      	ldr	r3, [r4, #20]
   24838:	b2f6      	uxtb	r6, r6
   2483a:	4283      	cmp	r3, r0
   2483c:	4637      	mov	r7, r6
   2483e:	dc04      	bgt.n	2484a <__swbuf_r+0x42>
   24840:	4621      	mov	r1, r4
   24842:	4628      	mov	r0, r5
   24844:	f000 f922 	bl	24a8c <_fflush_r>
   24848:	bb30      	cbnz	r0, 24898 <__swbuf_r+0x90>
   2484a:	68a3      	ldr	r3, [r4, #8]
   2484c:	3b01      	subs	r3, #1
   2484e:	60a3      	str	r3, [r4, #8]
   24850:	6823      	ldr	r3, [r4, #0]
   24852:	1c5a      	adds	r2, r3, #1
   24854:	6022      	str	r2, [r4, #0]
   24856:	701e      	strb	r6, [r3, #0]
   24858:	6963      	ldr	r3, [r4, #20]
   2485a:	3001      	adds	r0, #1
   2485c:	4283      	cmp	r3, r0
   2485e:	d004      	beq.n	2486a <__swbuf_r+0x62>
   24860:	89a3      	ldrh	r3, [r4, #12]
   24862:	07db      	lsls	r3, r3, #31
   24864:	d506      	bpl.n	24874 <__swbuf_r+0x6c>
   24866:	2e0a      	cmp	r6, #10
   24868:	d104      	bne.n	24874 <__swbuf_r+0x6c>
   2486a:	4621      	mov	r1, r4
   2486c:	4628      	mov	r0, r5
   2486e:	f000 f90d 	bl	24a8c <_fflush_r>
   24872:	b988      	cbnz	r0, 24898 <__swbuf_r+0x90>
   24874:	4638      	mov	r0, r7
   24876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24878:	4b0a      	ldr	r3, [pc, #40]	; (248a4 <__swbuf_r+0x9c>)
   2487a:	429c      	cmp	r4, r3
   2487c:	d101      	bne.n	24882 <__swbuf_r+0x7a>
   2487e:	68ac      	ldr	r4, [r5, #8]
   24880:	e7cf      	b.n	24822 <__swbuf_r+0x1a>
   24882:	4b09      	ldr	r3, [pc, #36]	; (248a8 <__swbuf_r+0xa0>)
   24884:	429c      	cmp	r4, r3
   24886:	bf08      	it	eq
   24888:	68ec      	ldreq	r4, [r5, #12]
   2488a:	e7ca      	b.n	24822 <__swbuf_r+0x1a>
   2488c:	4621      	mov	r1, r4
   2488e:	4628      	mov	r0, r5
   24890:	f000 f80c 	bl	248ac <__swsetup_r>
   24894:	2800      	cmp	r0, #0
   24896:	d0cb      	beq.n	24830 <__swbuf_r+0x28>
   24898:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2489c:	e7ea      	b.n	24874 <__swbuf_r+0x6c>
   2489e:	bf00      	nop
   248a0:	0002d300 	.word	0x0002d300
   248a4:	0002d320 	.word	0x0002d320
   248a8:	0002d2e0 	.word	0x0002d2e0

000248ac <__swsetup_r>:
   248ac:	4b32      	ldr	r3, [pc, #200]	; (24978 <__swsetup_r+0xcc>)
   248ae:	b570      	push	{r4, r5, r6, lr}
   248b0:	681d      	ldr	r5, [r3, #0]
   248b2:	4606      	mov	r6, r0
   248b4:	460c      	mov	r4, r1
   248b6:	b125      	cbz	r5, 248c2 <__swsetup_r+0x16>
   248b8:	69ab      	ldr	r3, [r5, #24]
   248ba:	b913      	cbnz	r3, 248c2 <__swsetup_r+0x16>
   248bc:	4628      	mov	r0, r5
   248be:	f000 f963 	bl	24b88 <__sinit>
   248c2:	4b2e      	ldr	r3, [pc, #184]	; (2497c <__swsetup_r+0xd0>)
   248c4:	429c      	cmp	r4, r3
   248c6:	d10f      	bne.n	248e8 <__swsetup_r+0x3c>
   248c8:	686c      	ldr	r4, [r5, #4]
   248ca:	89a3      	ldrh	r3, [r4, #12]
   248cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   248d0:	0719      	lsls	r1, r3, #28
   248d2:	d42c      	bmi.n	2492e <__swsetup_r+0x82>
   248d4:	06dd      	lsls	r5, r3, #27
   248d6:	d411      	bmi.n	248fc <__swsetup_r+0x50>
   248d8:	2309      	movs	r3, #9
   248da:	6033      	str	r3, [r6, #0]
   248dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   248e0:	81a3      	strh	r3, [r4, #12]
   248e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248e6:	e03e      	b.n	24966 <__swsetup_r+0xba>
   248e8:	4b25      	ldr	r3, [pc, #148]	; (24980 <__swsetup_r+0xd4>)
   248ea:	429c      	cmp	r4, r3
   248ec:	d101      	bne.n	248f2 <__swsetup_r+0x46>
   248ee:	68ac      	ldr	r4, [r5, #8]
   248f0:	e7eb      	b.n	248ca <__swsetup_r+0x1e>
   248f2:	4b24      	ldr	r3, [pc, #144]	; (24984 <__swsetup_r+0xd8>)
   248f4:	429c      	cmp	r4, r3
   248f6:	bf08      	it	eq
   248f8:	68ec      	ldreq	r4, [r5, #12]
   248fa:	e7e6      	b.n	248ca <__swsetup_r+0x1e>
   248fc:	0758      	lsls	r0, r3, #29
   248fe:	d512      	bpl.n	24926 <__swsetup_r+0x7a>
   24900:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24902:	b141      	cbz	r1, 24916 <__swsetup_r+0x6a>
   24904:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24908:	4299      	cmp	r1, r3
   2490a:	d002      	beq.n	24912 <__swsetup_r+0x66>
   2490c:	4630      	mov	r0, r6
   2490e:	f7fe fdc5 	bl	2349c <_free_r>
   24912:	2300      	movs	r3, #0
   24914:	6363      	str	r3, [r4, #52]	; 0x34
   24916:	89a3      	ldrh	r3, [r4, #12]
   24918:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   2491c:	81a3      	strh	r3, [r4, #12]
   2491e:	2300      	movs	r3, #0
   24920:	6063      	str	r3, [r4, #4]
   24922:	6923      	ldr	r3, [r4, #16]
   24924:	6023      	str	r3, [r4, #0]
   24926:	89a3      	ldrh	r3, [r4, #12]
   24928:	f043 0308 	orr.w	r3, r3, #8
   2492c:	81a3      	strh	r3, [r4, #12]
   2492e:	6923      	ldr	r3, [r4, #16]
   24930:	b94b      	cbnz	r3, 24946 <__swsetup_r+0x9a>
   24932:	89a3      	ldrh	r3, [r4, #12]
   24934:	f403 7320 	and.w	r3, r3, #640	; 0x280
   24938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2493c:	d003      	beq.n	24946 <__swsetup_r+0x9a>
   2493e:	4621      	mov	r1, r4
   24940:	4630      	mov	r0, r6
   24942:	f000 f99f 	bl	24c84 <__smakebuf_r>
   24946:	89a0      	ldrh	r0, [r4, #12]
   24948:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   2494c:	f010 0301 	ands.w	r3, r0, #1
   24950:	d00a      	beq.n	24968 <__swsetup_r+0xbc>
   24952:	2300      	movs	r3, #0
   24954:	60a3      	str	r3, [r4, #8]
   24956:	6963      	ldr	r3, [r4, #20]
   24958:	425b      	negs	r3, r3
   2495a:	61a3      	str	r3, [r4, #24]
   2495c:	6923      	ldr	r3, [r4, #16]
   2495e:	b943      	cbnz	r3, 24972 <__swsetup_r+0xc6>
   24960:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   24964:	d1ba      	bne.n	248dc <__swsetup_r+0x30>
   24966:	bd70      	pop	{r4, r5, r6, pc}
   24968:	0781      	lsls	r1, r0, #30
   2496a:	bf58      	it	pl
   2496c:	6963      	ldrpl	r3, [r4, #20]
   2496e:	60a3      	str	r3, [r4, #8]
   24970:	e7f4      	b.n	2495c <__swsetup_r+0xb0>
   24972:	2000      	movs	r0, #0
   24974:	e7f7      	b.n	24966 <__swsetup_r+0xba>
   24976:	bf00      	nop
   24978:	200007ac 	.word	0x200007ac
   2497c:	0002d300 	.word	0x0002d300
   24980:	0002d320 	.word	0x0002d320
   24984:	0002d2e0 	.word	0x0002d2e0

00024988 <__sflush_r>:
   24988:	898a      	ldrh	r2, [r1, #12]
   2498a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2498c:	4605      	mov	r5, r0
   2498e:	0710      	lsls	r0, r2, #28
   24990:	460c      	mov	r4, r1
   24992:	d457      	bmi.n	24a44 <__sflush_r+0xbc>
   24994:	684b      	ldr	r3, [r1, #4]
   24996:	2b00      	cmp	r3, #0
   24998:	dc04      	bgt.n	249a4 <__sflush_r+0x1c>
   2499a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   2499c:	2b00      	cmp	r3, #0
   2499e:	dc01      	bgt.n	249a4 <__sflush_r+0x1c>
   249a0:	2000      	movs	r0, #0
   249a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   249a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   249a6:	2e00      	cmp	r6, #0
   249a8:	d0fa      	beq.n	249a0 <__sflush_r+0x18>
   249aa:	2300      	movs	r3, #0
   249ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   249b0:	682f      	ldr	r7, [r5, #0]
   249b2:	602b      	str	r3, [r5, #0]
   249b4:	d032      	beq.n	24a1c <__sflush_r+0x94>
   249b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
   249b8:	89a3      	ldrh	r3, [r4, #12]
   249ba:	075a      	lsls	r2, r3, #29
   249bc:	d505      	bpl.n	249ca <__sflush_r+0x42>
   249be:	6863      	ldr	r3, [r4, #4]
   249c0:	1ac0      	subs	r0, r0, r3
   249c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   249c4:	b10b      	cbz	r3, 249ca <__sflush_r+0x42>
   249c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   249c8:	1ac0      	subs	r0, r0, r3
   249ca:	2300      	movs	r3, #0
   249cc:	4602      	mov	r2, r0
   249ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   249d0:	6a21      	ldr	r1, [r4, #32]
   249d2:	4628      	mov	r0, r5
   249d4:	47b0      	blx	r6
   249d6:	1c43      	adds	r3, r0, #1
   249d8:	89a3      	ldrh	r3, [r4, #12]
   249da:	d106      	bne.n	249ea <__sflush_r+0x62>
   249dc:	6829      	ldr	r1, [r5, #0]
   249de:	291d      	cmp	r1, #29
   249e0:	d82c      	bhi.n	24a3c <__sflush_r+0xb4>
   249e2:	4a29      	ldr	r2, [pc, #164]	; (24a88 <__sflush_r+0x100>)
   249e4:	40ca      	lsrs	r2, r1
   249e6:	07d6      	lsls	r6, r2, #31
   249e8:	d528      	bpl.n	24a3c <__sflush_r+0xb4>
   249ea:	2200      	movs	r2, #0
   249ec:	6062      	str	r2, [r4, #4]
   249ee:	04d9      	lsls	r1, r3, #19
   249f0:	6922      	ldr	r2, [r4, #16]
   249f2:	6022      	str	r2, [r4, #0]
   249f4:	d504      	bpl.n	24a00 <__sflush_r+0x78>
   249f6:	1c42      	adds	r2, r0, #1
   249f8:	d101      	bne.n	249fe <__sflush_r+0x76>
   249fa:	682b      	ldr	r3, [r5, #0]
   249fc:	b903      	cbnz	r3, 24a00 <__sflush_r+0x78>
   249fe:	6560      	str	r0, [r4, #84]	; 0x54
   24a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
   24a02:	602f      	str	r7, [r5, #0]
   24a04:	2900      	cmp	r1, #0
   24a06:	d0cb      	beq.n	249a0 <__sflush_r+0x18>
   24a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
   24a0c:	4299      	cmp	r1, r3
   24a0e:	d002      	beq.n	24a16 <__sflush_r+0x8e>
   24a10:	4628      	mov	r0, r5
   24a12:	f7fe fd43 	bl	2349c <_free_r>
   24a16:	2000      	movs	r0, #0
   24a18:	6360      	str	r0, [r4, #52]	; 0x34
   24a1a:	e7c2      	b.n	249a2 <__sflush_r+0x1a>
   24a1c:	6a21      	ldr	r1, [r4, #32]
   24a1e:	2301      	movs	r3, #1
   24a20:	4628      	mov	r0, r5
   24a22:	47b0      	blx	r6
   24a24:	1c41      	adds	r1, r0, #1
   24a26:	d1c7      	bne.n	249b8 <__sflush_r+0x30>
   24a28:	682b      	ldr	r3, [r5, #0]
   24a2a:	2b00      	cmp	r3, #0
   24a2c:	d0c4      	beq.n	249b8 <__sflush_r+0x30>
   24a2e:	2b1d      	cmp	r3, #29
   24a30:	d001      	beq.n	24a36 <__sflush_r+0xae>
   24a32:	2b16      	cmp	r3, #22
   24a34:	d101      	bne.n	24a3a <__sflush_r+0xb2>
   24a36:	602f      	str	r7, [r5, #0]
   24a38:	e7b2      	b.n	249a0 <__sflush_r+0x18>
   24a3a:	89a3      	ldrh	r3, [r4, #12]
   24a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24a40:	81a3      	strh	r3, [r4, #12]
   24a42:	e7ae      	b.n	249a2 <__sflush_r+0x1a>
   24a44:	690f      	ldr	r7, [r1, #16]
   24a46:	2f00      	cmp	r7, #0
   24a48:	d0aa      	beq.n	249a0 <__sflush_r+0x18>
   24a4a:	0793      	lsls	r3, r2, #30
   24a4c:	680e      	ldr	r6, [r1, #0]
   24a4e:	bf08      	it	eq
   24a50:	694b      	ldreq	r3, [r1, #20]
   24a52:	600f      	str	r7, [r1, #0]
   24a54:	bf18      	it	ne
   24a56:	2300      	movne	r3, #0
   24a58:	1bf6      	subs	r6, r6, r7
   24a5a:	608b      	str	r3, [r1, #8]
   24a5c:	2e00      	cmp	r6, #0
   24a5e:	dd9f      	ble.n	249a0 <__sflush_r+0x18>
   24a60:	6a21      	ldr	r1, [r4, #32]
   24a62:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   24a66:	4633      	mov	r3, r6
   24a68:	463a      	mov	r2, r7
   24a6a:	4628      	mov	r0, r5
   24a6c:	47e0      	blx	ip
   24a6e:	2800      	cmp	r0, #0
   24a70:	dc06      	bgt.n	24a80 <__sflush_r+0xf8>
   24a72:	89a3      	ldrh	r3, [r4, #12]
   24a74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24a78:	81a3      	strh	r3, [r4, #12]
   24a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24a7e:	e790      	b.n	249a2 <__sflush_r+0x1a>
   24a80:	4407      	add	r7, r0
   24a82:	1a36      	subs	r6, r6, r0
   24a84:	e7ea      	b.n	24a5c <__sflush_r+0xd4>
   24a86:	bf00      	nop
   24a88:	20400001 	.word	0x20400001

00024a8c <_fflush_r>:
   24a8c:	b538      	push	{r3, r4, r5, lr}
   24a8e:	690b      	ldr	r3, [r1, #16]
   24a90:	4605      	mov	r5, r0
   24a92:	460c      	mov	r4, r1
   24a94:	b913      	cbnz	r3, 24a9c <_fflush_r+0x10>
   24a96:	2500      	movs	r5, #0
   24a98:	4628      	mov	r0, r5
   24a9a:	bd38      	pop	{r3, r4, r5, pc}
   24a9c:	b118      	cbz	r0, 24aa6 <_fflush_r+0x1a>
   24a9e:	6983      	ldr	r3, [r0, #24]
   24aa0:	b90b      	cbnz	r3, 24aa6 <_fflush_r+0x1a>
   24aa2:	f000 f871 	bl	24b88 <__sinit>
   24aa6:	4b14      	ldr	r3, [pc, #80]	; (24af8 <_fflush_r+0x6c>)
   24aa8:	429c      	cmp	r4, r3
   24aaa:	d11b      	bne.n	24ae4 <_fflush_r+0x58>
   24aac:	686c      	ldr	r4, [r5, #4]
   24aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24ab2:	2b00      	cmp	r3, #0
   24ab4:	d0ef      	beq.n	24a96 <_fflush_r+0xa>
   24ab6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   24ab8:	07d0      	lsls	r0, r2, #31
   24aba:	d404      	bmi.n	24ac6 <_fflush_r+0x3a>
   24abc:	0599      	lsls	r1, r3, #22
   24abe:	d402      	bmi.n	24ac6 <_fflush_r+0x3a>
   24ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24ac2:	f002 f8de 	bl	26c82 <__retarget_lock_acquire_recursive>
   24ac6:	4628      	mov	r0, r5
   24ac8:	4621      	mov	r1, r4
   24aca:	f7ff ff5d 	bl	24988 <__sflush_r>
   24ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
   24ad0:	07da      	lsls	r2, r3, #31
   24ad2:	4605      	mov	r5, r0
   24ad4:	d4e0      	bmi.n	24a98 <_fflush_r+0xc>
   24ad6:	89a3      	ldrh	r3, [r4, #12]
   24ad8:	059b      	lsls	r3, r3, #22
   24ada:	d4dd      	bmi.n	24a98 <_fflush_r+0xc>
   24adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   24ade:	f002 f8d6 	bl	26c8e <__retarget_lock_release_recursive>
   24ae2:	e7d9      	b.n	24a98 <_fflush_r+0xc>
   24ae4:	4b05      	ldr	r3, [pc, #20]	; (24afc <_fflush_r+0x70>)
   24ae6:	429c      	cmp	r4, r3
   24ae8:	d101      	bne.n	24aee <_fflush_r+0x62>
   24aea:	68ac      	ldr	r4, [r5, #8]
   24aec:	e7df      	b.n	24aae <_fflush_r+0x22>
   24aee:	4b04      	ldr	r3, [pc, #16]	; (24b00 <_fflush_r+0x74>)
   24af0:	429c      	cmp	r4, r3
   24af2:	bf08      	it	eq
   24af4:	68ec      	ldreq	r4, [r5, #12]
   24af6:	e7da      	b.n	24aae <_fflush_r+0x22>
   24af8:	0002d300 	.word	0x0002d300
   24afc:	0002d320 	.word	0x0002d320
   24b00:	0002d2e0 	.word	0x0002d2e0

00024b04 <std>:
   24b04:	2300      	movs	r3, #0
   24b06:	b510      	push	{r4, lr}
   24b08:	4604      	mov	r4, r0
   24b0a:	e9c0 3300 	strd	r3, r3, [r0]
   24b0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   24b12:	6083      	str	r3, [r0, #8]
   24b14:	8181      	strh	r1, [r0, #12]
   24b16:	6643      	str	r3, [r0, #100]	; 0x64
   24b18:	81c2      	strh	r2, [r0, #14]
   24b1a:	6183      	str	r3, [r0, #24]
   24b1c:	4619      	mov	r1, r3
   24b1e:	2208      	movs	r2, #8
   24b20:	305c      	adds	r0, #92	; 0x5c
   24b22:	f005 ffbb 	bl	2aa9c <memset>
   24b26:	4b05      	ldr	r3, [pc, #20]	; (24b3c <std+0x38>)
   24b28:	6263      	str	r3, [r4, #36]	; 0x24
   24b2a:	4b05      	ldr	r3, [pc, #20]	; (24b40 <std+0x3c>)
   24b2c:	62a3      	str	r3, [r4, #40]	; 0x28
   24b2e:	4b05      	ldr	r3, [pc, #20]	; (24b44 <std+0x40>)
   24b30:	62e3      	str	r3, [r4, #44]	; 0x2c
   24b32:	4b05      	ldr	r3, [pc, #20]	; (24b48 <std+0x44>)
   24b34:	6224      	str	r4, [r4, #32]
   24b36:	6323      	str	r3, [r4, #48]	; 0x30
   24b38:	bd10      	pop	{r4, pc}
   24b3a:	bf00      	nop
   24b3c:	0002b257 	.word	0x0002b257
   24b40:	0002b279 	.word	0x0002b279
   24b44:	0002b2b1 	.word	0x0002b2b1
   24b48:	0002b2d5 	.word	0x0002b2d5

00024b4c <_cleanup_r>:
   24b4c:	4901      	ldr	r1, [pc, #4]	; (24b54 <_cleanup_r+0x8>)
   24b4e:	f006 bb0c 	b.w	2b16a <_fwalk_reent>
   24b52:	bf00      	nop
   24b54:	00024a8d 	.word	0x00024a8d

00024b58 <__sfp_lock_acquire>:
   24b58:	4801      	ldr	r0, [pc, #4]	; (24b60 <__sfp_lock_acquire+0x8>)
   24b5a:	f002 b892 	b.w	26c82 <__retarget_lock_acquire_recursive>
   24b5e:	bf00      	nop
   24b60:	20000b48 	.word	0x20000b48

00024b64 <__sfp_lock_release>:
   24b64:	4801      	ldr	r0, [pc, #4]	; (24b6c <__sfp_lock_release+0x8>)
   24b66:	f002 b892 	b.w	26c8e <__retarget_lock_release_recursive>
   24b6a:	bf00      	nop
   24b6c:	20000b48 	.word	0x20000b48

00024b70 <__sinit_lock_acquire>:
   24b70:	4801      	ldr	r0, [pc, #4]	; (24b78 <__sinit_lock_acquire+0x8>)
   24b72:	f002 b886 	b.w	26c82 <__retarget_lock_acquire_recursive>
   24b76:	bf00      	nop
   24b78:	20000b5c 	.word	0x20000b5c

00024b7c <__sinit_lock_release>:
   24b7c:	4801      	ldr	r0, [pc, #4]	; (24b84 <__sinit_lock_release+0x8>)
   24b7e:	f002 b886 	b.w	26c8e <__retarget_lock_release_recursive>
   24b82:	bf00      	nop
   24b84:	20000b5c 	.word	0x20000b5c

00024b88 <__sinit>:
   24b88:	b510      	push	{r4, lr}
   24b8a:	4604      	mov	r4, r0
   24b8c:	f7ff fff0 	bl	24b70 <__sinit_lock_acquire>
   24b90:	69a3      	ldr	r3, [r4, #24]
   24b92:	b11b      	cbz	r3, 24b9c <__sinit+0x14>
   24b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   24b98:	f7ff bff0 	b.w	24b7c <__sinit_lock_release>
   24b9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   24ba0:	6523      	str	r3, [r4, #80]	; 0x50
   24ba2:	4b13      	ldr	r3, [pc, #76]	; (24bf0 <__sinit+0x68>)
   24ba4:	4a13      	ldr	r2, [pc, #76]	; (24bf4 <__sinit+0x6c>)
   24ba6:	681b      	ldr	r3, [r3, #0]
   24ba8:	62a2      	str	r2, [r4, #40]	; 0x28
   24baa:	42a3      	cmp	r3, r4
   24bac:	bf04      	itt	eq
   24bae:	2301      	moveq	r3, #1
   24bb0:	61a3      	streq	r3, [r4, #24]
   24bb2:	4620      	mov	r0, r4
   24bb4:	f000 f820 	bl	24bf8 <__sfp>
   24bb8:	6060      	str	r0, [r4, #4]
   24bba:	4620      	mov	r0, r4
   24bbc:	f000 f81c 	bl	24bf8 <__sfp>
   24bc0:	60a0      	str	r0, [r4, #8]
   24bc2:	4620      	mov	r0, r4
   24bc4:	f000 f818 	bl	24bf8 <__sfp>
   24bc8:	2200      	movs	r2, #0
   24bca:	60e0      	str	r0, [r4, #12]
   24bcc:	2104      	movs	r1, #4
   24bce:	6860      	ldr	r0, [r4, #4]
   24bd0:	f7ff ff98 	bl	24b04 <std>
   24bd4:	68a0      	ldr	r0, [r4, #8]
   24bd6:	2201      	movs	r2, #1
   24bd8:	2109      	movs	r1, #9
   24bda:	f7ff ff93 	bl	24b04 <std>
   24bde:	68e0      	ldr	r0, [r4, #12]
   24be0:	2202      	movs	r2, #2
   24be2:	2112      	movs	r1, #18
   24be4:	f7ff ff8e 	bl	24b04 <std>
   24be8:	2301      	movs	r3, #1
   24bea:	61a3      	str	r3, [r4, #24]
   24bec:	e7d2      	b.n	24b94 <__sinit+0xc>
   24bee:	bf00      	nop
   24bf0:	0002d2d0 	.word	0x0002d2d0
   24bf4:	00024b4d 	.word	0x00024b4d

00024bf8 <__sfp>:
   24bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24bfa:	4607      	mov	r7, r0
   24bfc:	f7ff ffac 	bl	24b58 <__sfp_lock_acquire>
   24c00:	4b1e      	ldr	r3, [pc, #120]	; (24c7c <__sfp+0x84>)
   24c02:	681e      	ldr	r6, [r3, #0]
   24c04:	69b3      	ldr	r3, [r6, #24]
   24c06:	b913      	cbnz	r3, 24c0e <__sfp+0x16>
   24c08:	4630      	mov	r0, r6
   24c0a:	f7ff ffbd 	bl	24b88 <__sinit>
   24c0e:	3648      	adds	r6, #72	; 0x48
   24c10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   24c14:	3b01      	subs	r3, #1
   24c16:	d503      	bpl.n	24c20 <__sfp+0x28>
   24c18:	6833      	ldr	r3, [r6, #0]
   24c1a:	b30b      	cbz	r3, 24c60 <__sfp+0x68>
   24c1c:	6836      	ldr	r6, [r6, #0]
   24c1e:	e7f7      	b.n	24c10 <__sfp+0x18>
   24c20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   24c24:	b9d5      	cbnz	r5, 24c5c <__sfp+0x64>
   24c26:	4b16      	ldr	r3, [pc, #88]	; (24c80 <__sfp+0x88>)
   24c28:	60e3      	str	r3, [r4, #12]
   24c2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
   24c2e:	6665      	str	r5, [r4, #100]	; 0x64
   24c30:	f002 f81d 	bl	26c6e <__retarget_lock_init_recursive>
   24c34:	f7ff ff96 	bl	24b64 <__sfp_lock_release>
   24c38:	e9c4 5501 	strd	r5, r5, [r4, #4]
   24c3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
   24c40:	6025      	str	r5, [r4, #0]
   24c42:	61a5      	str	r5, [r4, #24]
   24c44:	2208      	movs	r2, #8
   24c46:	4629      	mov	r1, r5
   24c48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   24c4c:	f005 ff26 	bl	2aa9c <memset>
   24c50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   24c54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   24c58:	4620      	mov	r0, r4
   24c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24c5c:	3468      	adds	r4, #104	; 0x68
   24c5e:	e7d9      	b.n	24c14 <__sfp+0x1c>
   24c60:	2104      	movs	r1, #4
   24c62:	4638      	mov	r0, r7
   24c64:	f006 fa6b 	bl	2b13e <__sfmoreglue>
   24c68:	4604      	mov	r4, r0
   24c6a:	6030      	str	r0, [r6, #0]
   24c6c:	2800      	cmp	r0, #0
   24c6e:	d1d5      	bne.n	24c1c <__sfp+0x24>
   24c70:	f7ff ff78 	bl	24b64 <__sfp_lock_release>
   24c74:	230c      	movs	r3, #12
   24c76:	603b      	str	r3, [r7, #0]
   24c78:	e7ee      	b.n	24c58 <__sfp+0x60>
   24c7a:	bf00      	nop
   24c7c:	0002d2d0 	.word	0x0002d2d0
   24c80:	ffff0001 	.word	0xffff0001

00024c84 <__smakebuf_r>:
   24c84:	898b      	ldrh	r3, [r1, #12]
   24c86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   24c88:	079d      	lsls	r5, r3, #30
   24c8a:	4606      	mov	r6, r0
   24c8c:	460c      	mov	r4, r1
   24c8e:	d507      	bpl.n	24ca0 <__smakebuf_r+0x1c>
   24c90:	f104 0347 	add.w	r3, r4, #71	; 0x47
   24c94:	6023      	str	r3, [r4, #0]
   24c96:	6123      	str	r3, [r4, #16]
   24c98:	2301      	movs	r3, #1
   24c9a:	6163      	str	r3, [r4, #20]
   24c9c:	b002      	add	sp, #8
   24c9e:	bd70      	pop	{r4, r5, r6, pc}
   24ca0:	ab01      	add	r3, sp, #4
   24ca2:	466a      	mov	r2, sp
   24ca4:	f006 fa80 	bl	2b1a8 <__swhatbuf_r>
   24ca8:	9900      	ldr	r1, [sp, #0]
   24caa:	4605      	mov	r5, r0
   24cac:	4630      	mov	r0, r6
   24cae:	f7fe fc3f 	bl	23530 <_malloc_r>
   24cb2:	b948      	cbnz	r0, 24cc8 <__smakebuf_r+0x44>
   24cb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   24cb8:	059a      	lsls	r2, r3, #22
   24cba:	d4ef      	bmi.n	24c9c <__smakebuf_r+0x18>
   24cbc:	f023 0303 	bic.w	r3, r3, #3
   24cc0:	f043 0302 	orr.w	r3, r3, #2
   24cc4:	81a3      	strh	r3, [r4, #12]
   24cc6:	e7e3      	b.n	24c90 <__smakebuf_r+0xc>
   24cc8:	4b0d      	ldr	r3, [pc, #52]	; (24d00 <__smakebuf_r+0x7c>)
   24cca:	62b3      	str	r3, [r6, #40]	; 0x28
   24ccc:	89a3      	ldrh	r3, [r4, #12]
   24cce:	6020      	str	r0, [r4, #0]
   24cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   24cd4:	81a3      	strh	r3, [r4, #12]
   24cd6:	9b00      	ldr	r3, [sp, #0]
   24cd8:	6163      	str	r3, [r4, #20]
   24cda:	9b01      	ldr	r3, [sp, #4]
   24cdc:	6120      	str	r0, [r4, #16]
   24cde:	b15b      	cbz	r3, 24cf8 <__smakebuf_r+0x74>
   24ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   24ce4:	4630      	mov	r0, r6
   24ce6:	f000 f85b 	bl	24da0 <_isatty_r>
   24cea:	b128      	cbz	r0, 24cf8 <__smakebuf_r+0x74>
   24cec:	89a3      	ldrh	r3, [r4, #12]
   24cee:	f023 0303 	bic.w	r3, r3, #3
   24cf2:	f043 0301 	orr.w	r3, r3, #1
   24cf6:	81a3      	strh	r3, [r4, #12]
   24cf8:	89a0      	ldrh	r0, [r4, #12]
   24cfa:	4305      	orrs	r5, r0
   24cfc:	81a5      	strh	r5, [r4, #12]
   24cfe:	e7cd      	b.n	24c9c <__smakebuf_r+0x18>
   24d00:	00024b4d 	.word	0x00024b4d

00024d04 <raise>:
   24d04:	4b02      	ldr	r3, [pc, #8]	; (24d10 <raise+0xc>)
   24d06:	4601      	mov	r1, r0
   24d08:	6818      	ldr	r0, [r3, #0]
   24d0a:	f006 ba7a 	b.w	2b202 <_raise_r>
   24d0e:	bf00      	nop
   24d10:	200007ac 	.word	0x200007ac

00024d14 <_kill_r>:
   24d14:	b538      	push	{r3, r4, r5, lr}
   24d16:	4d07      	ldr	r5, [pc, #28]	; (24d34 <_kill_r+0x20>)
   24d18:	2300      	movs	r3, #0
   24d1a:	4604      	mov	r4, r0
   24d1c:	4608      	mov	r0, r1
   24d1e:	4611      	mov	r1, r2
   24d20:	602b      	str	r3, [r5, #0]
   24d22:	f001 ff9b 	bl	26c5c <_kill>
   24d26:	1c43      	adds	r3, r0, #1
   24d28:	d102      	bne.n	24d30 <_kill_r+0x1c>
   24d2a:	682b      	ldr	r3, [r5, #0]
   24d2c:	b103      	cbz	r3, 24d30 <_kill_r+0x1c>
   24d2e:	6023      	str	r3, [r4, #0]
   24d30:	bd38      	pop	{r3, r4, r5, pc}
   24d32:	bf00      	nop
   24d34:	200033e0 	.word	0x200033e0

00024d38 <_write_r>:
   24d38:	b538      	push	{r3, r4, r5, lr}
   24d3a:	4d07      	ldr	r5, [pc, #28]	; (24d58 <_write_r+0x20>)
   24d3c:	4604      	mov	r4, r0
   24d3e:	4608      	mov	r0, r1
   24d40:	4611      	mov	r1, r2
   24d42:	2200      	movs	r2, #0
   24d44:	602a      	str	r2, [r5, #0]
   24d46:	461a      	mov	r2, r3
   24d48:	f001 ff7a 	bl	26c40 <_write>
   24d4c:	1c43      	adds	r3, r0, #1
   24d4e:	d102      	bne.n	24d56 <_write_r+0x1e>
   24d50:	682b      	ldr	r3, [r5, #0]
   24d52:	b103      	cbz	r3, 24d56 <_write_r+0x1e>
   24d54:	6023      	str	r3, [r4, #0]
   24d56:	bd38      	pop	{r3, r4, r5, pc}
   24d58:	200033e0 	.word	0x200033e0

00024d5c <_close_r>:
   24d5c:	b538      	push	{r3, r4, r5, lr}
   24d5e:	4d06      	ldr	r5, [pc, #24]	; (24d78 <_close_r+0x1c>)
   24d60:	2300      	movs	r3, #0
   24d62:	4604      	mov	r4, r0
   24d64:	4608      	mov	r0, r1
   24d66:	602b      	str	r3, [r5, #0]
   24d68:	f001 ff6e 	bl	26c48 <_close>
   24d6c:	1c43      	adds	r3, r0, #1
   24d6e:	d102      	bne.n	24d76 <_close_r+0x1a>
   24d70:	682b      	ldr	r3, [r5, #0]
   24d72:	b103      	cbz	r3, 24d76 <_close_r+0x1a>
   24d74:	6023      	str	r3, [r4, #0]
   24d76:	bd38      	pop	{r3, r4, r5, pc}
   24d78:	200033e0 	.word	0x200033e0

00024d7c <_fstat_r>:
   24d7c:	b538      	push	{r3, r4, r5, lr}
   24d7e:	4d07      	ldr	r5, [pc, #28]	; (24d9c <_fstat_r+0x20>)
   24d80:	2300      	movs	r3, #0
   24d82:	4604      	mov	r4, r0
   24d84:	4608      	mov	r0, r1
   24d86:	4611      	mov	r1, r2
   24d88:	602b      	str	r3, [r5, #0]
   24d8a:	f001 ff6b 	bl	26c64 <_fstat>
   24d8e:	1c43      	adds	r3, r0, #1
   24d90:	d102      	bne.n	24d98 <_fstat_r+0x1c>
   24d92:	682b      	ldr	r3, [r5, #0]
   24d94:	b103      	cbz	r3, 24d98 <_fstat_r+0x1c>
   24d96:	6023      	str	r3, [r4, #0]
   24d98:	bd38      	pop	{r3, r4, r5, pc}
   24d9a:	bf00      	nop
   24d9c:	200033e0 	.word	0x200033e0

00024da0 <_isatty_r>:
   24da0:	b538      	push	{r3, r4, r5, lr}
   24da2:	4d06      	ldr	r5, [pc, #24]	; (24dbc <_isatty_r+0x1c>)
   24da4:	2300      	movs	r3, #0
   24da6:	4604      	mov	r4, r0
   24da8:	4608      	mov	r0, r1
   24daa:	602b      	str	r3, [r5, #0]
   24dac:	f001 ff51 	bl	26c52 <_isatty>
   24db0:	1c43      	adds	r3, r0, #1
   24db2:	d102      	bne.n	24dba <_isatty_r+0x1a>
   24db4:	682b      	ldr	r3, [r5, #0]
   24db6:	b103      	cbz	r3, 24dba <_isatty_r+0x1a>
   24db8:	6023      	str	r3, [r4, #0]
   24dba:	bd38      	pop	{r3, r4, r5, pc}
   24dbc:	200033e0 	.word	0x200033e0

00024dc0 <_lseek_r>:
   24dc0:	b538      	push	{r3, r4, r5, lr}
   24dc2:	4d07      	ldr	r5, [pc, #28]	; (24de0 <_lseek_r+0x20>)
   24dc4:	4604      	mov	r4, r0
   24dc6:	4608      	mov	r0, r1
   24dc8:	4611      	mov	r1, r2
   24dca:	2200      	movs	r2, #0
   24dcc:	602a      	str	r2, [r5, #0]
   24dce:	461a      	mov	r2, r3
   24dd0:	f001 ff3d 	bl	26c4e <_lseek>
   24dd4:	1c43      	adds	r3, r0, #1
   24dd6:	d102      	bne.n	24dde <_lseek_r+0x1e>
   24dd8:	682b      	ldr	r3, [r5, #0]
   24dda:	b103      	cbz	r3, 24dde <_lseek_r+0x1e>
   24ddc:	6023      	str	r3, [r4, #0]
   24dde:	bd38      	pop	{r3, r4, r5, pc}
   24de0:	200033e0 	.word	0x200033e0

00024de4 <_read_r>:
   24de4:	b538      	push	{r3, r4, r5, lr}
   24de6:	4d07      	ldr	r5, [pc, #28]	; (24e04 <_read_r+0x20>)
   24de8:	4604      	mov	r4, r0
   24dea:	4608      	mov	r0, r1
   24dec:	4611      	mov	r1, r2
   24dee:	2200      	movs	r2, #0
   24df0:	602a      	str	r2, [r5, #0]
   24df2:	461a      	mov	r2, r3
   24df4:	f001 ff20 	bl	26c38 <_read>
   24df8:	1c43      	adds	r3, r0, #1
   24dfa:	d102      	bne.n	24e02 <_read_r+0x1e>
   24dfc:	682b      	ldr	r3, [r5, #0]
   24dfe:	b103      	cbz	r3, 24e02 <_read_r+0x1e>
   24e00:	6023      	str	r3, [r4, #0]
   24e02:	bd38      	pop	{r3, r4, r5, pc}
   24e04:	200033e0 	.word	0x200033e0

00024e08 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   24e08:	4770      	bx	lr

00024e0a <main>:
    // init_buzzer();
    // init_hts();
    // init_lps();
    // init_ccs();
    // init_lis();
   24e0a:	4770      	bx	lr

00024e0c <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   24e0c:	4601      	mov	r1, r0
   24e0e:	f240 30e7 	movw	r0, #999	; 0x3e7
   24e12:	b508      	push	{r3, lr}
   24e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24e18:	2300      	movs	r3, #0
   24e1a:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   24e1e:	1449      	asrs	r1, r1, #17
   24e20:	f7db fdac 	bl	97c <__aeabi_uldivmod>
}
   24e24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   24e28:	f7fe b802 	b.w	22e30 <z_impl_k_sleep>

00024e2c <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   24e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24e30:	4607      	mov	r7, r0
   24e32:	460e      	mov	r6, r1
   24e34:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   24e36:	461d      	mov	r5, r3
   24e38:	b1fb      	cbz	r3, 24e7a <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   24e3a:	7818      	ldrb	r0, [r3, #0]
   24e3c:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   24e3e:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   24e42:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   24e46:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   24e48:	f04f 0900 	mov.w	r9, #0
   24e4c:	45d1      	cmp	r9, sl
   24e4e:	d308      	bcc.n	24e62 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   24e50:	686a      	ldr	r2, [r5, #4]
   24e52:	f105 0308 	add.w	r3, r5, #8
   24e56:	4641      	mov	r1, r8
   24e58:	4638      	mov	r0, r7
   24e5a:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   24e5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   24e60:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   24e62:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   24e66:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   24e6a:	4620      	mov	r0, r4
   24e6c:	f7db ffc3 	bl	df6 <strlen>
   24e70:	3001      	adds	r0, #1
   24e72:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   24e74:	f109 0901 	add.w	r9, r9, #1
   24e78:	e7e8      	b.n	24e4c <cbpprintf_external+0x20>
}
   24e7a:	f06f 0015 	mvn.w	r0, #21
   24e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00024e82 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   24e82:	4603      	mov	r3, r0
   24e84:	b140      	cbz	r0, 24e98 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24e86:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24e88:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   24e8c:	2a02      	cmp	r2, #2
   24e8e:	d006      	beq.n	24e9e <sys_notify_validate+0x1c>
   24e90:	2a03      	cmp	r2, #3
   24e92:	d004      	beq.n	24e9e <sys_notify_validate+0x1c>
   24e94:	2a01      	cmp	r2, #1
   24e96:	d005      	beq.n	24ea4 <sys_notify_validate+0x22>
		return -EINVAL;
   24e98:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   24e9c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   24e9e:	681a      	ldr	r2, [r3, #0]
   24ea0:	2a00      	cmp	r2, #0
   24ea2:	d0f9      	beq.n	24e98 <sys_notify_validate+0x16>
		notify->result = 0;
   24ea4:	2000      	movs	r0, #0
   24ea6:	6098      	str	r0, [r3, #8]
   24ea8:	4770      	bx	lr

00024eaa <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   24eaa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   24eac:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   24eb0:	2a02      	cmp	r2, #2
{
   24eb2:	b510      	push	{r4, lr}
   24eb4:	4603      	mov	r3, r0
	notify->result = res;
   24eb6:	6081      	str	r1, [r0, #8]
	switch (method) {
   24eb8:	d00a      	beq.n	24ed0 <sys_notify_finalize+0x26>
   24eba:	2a03      	cmp	r2, #3
   24ebc:	d10b      	bne.n	24ed6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   24ebe:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   24ec0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   24ec2:	2200      	movs	r2, #0
   24ec4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   24ec6:	b108      	cbz	r0, 24ecc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   24ec8:	f7fe fa8c 	bl	233e4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   24ecc:	4620      	mov	r0, r4
   24ece:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   24ed0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   24ed2:	2400      	movs	r4, #0
		break;
   24ed4:	e7f5      	b.n	24ec2 <sys_notify_finalize+0x18>
	switch (method) {
   24ed6:	2400      	movs	r4, #0
   24ed8:	4620      	mov	r0, r4
   24eda:	e7f2      	b.n	24ec2 <sys_notify_finalize+0x18>

00024edc <arch_printk_char_out>:
}
   24edc:	2000      	movs	r0, #0
   24ede:	4770      	bx	lr

00024ee0 <str_out>:
{
   24ee0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24ee2:	688a      	ldr	r2, [r1, #8]
   24ee4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   24ee6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   24ee8:	b114      	cbz	r4, 24ef0 <str_out+0x10>
   24eea:	684b      	ldr	r3, [r1, #4]
   24eec:	4293      	cmp	r3, r2
   24eee:	dc01      	bgt.n	24ef4 <str_out+0x14>
		ctx->count++;
   24ef0:	608d      	str	r5, [r1, #8]
}
   24ef2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   24ef4:	3b01      	subs	r3, #1
   24ef6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   24ef8:	bf08      	it	eq
   24efa:	2200      	moveq	r2, #0
   24efc:	608d      	str	r5, [r1, #8]
   24efe:	bf0c      	ite	eq
   24f00:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   24f02:	54a0      	strbne	r0, [r4, r2]
   24f04:	e7f5      	b.n	24ef2 <str_out+0x12>

00024f06 <printk>:
{
   24f06:	b40f      	push	{r0, r1, r2, r3}
   24f08:	b507      	push	{r0, r1, r2, lr}
   24f0a:	a904      	add	r1, sp, #16
   24f0c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   24f10:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   24f12:	f000 fcdd 	bl	258d0 <z_log_vprintk>
}
   24f16:	b003      	add	sp, #12
   24f18:	f85d eb04 	ldr.w	lr, [sp], #4
   24f1c:	b004      	add	sp, #16
   24f1e:	4770      	bx	lr

00024f20 <snprintk>:
{
   24f20:	b40c      	push	{r2, r3}
   24f22:	b507      	push	{r0, r1, r2, lr}
   24f24:	ab04      	add	r3, sp, #16
   24f26:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   24f2a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   24f2c:	f7df fe44 	bl	4bb8 <vsnprintk>
}
   24f30:	b003      	add	sp, #12
   24f32:	f85d eb04 	ldr.w	lr, [sp], #4
   24f36:	b002      	add	sp, #8
   24f38:	4770      	bx	lr

00024f3a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   24f3a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   24f3c:	f013 0307 	ands.w	r3, r3, #7
   24f40:	d105      	bne.n	24f4e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   24f42:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   24f44:	2b00      	cmp	r3, #0
   24f46:	bf0c      	ite	eq
   24f48:	2000      	moveq	r0, #0
   24f4a:	2003      	movne	r0, #3
   24f4c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   24f4e:	2b02      	cmp	r3, #2
   24f50:	d105      	bne.n	24f5e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   24f52:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   24f54:	2b00      	cmp	r3, #0
   24f56:	bf14      	ite	ne
   24f58:	2000      	movne	r0, #0
   24f5a:	2004      	moveq	r0, #4
   24f5c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   24f5e:	2b01      	cmp	r3, #1
   24f60:	d105      	bne.n	24f6e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   24f62:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   24f64:	2b00      	cmp	r3, #0
   24f66:	bf0c      	ite	eq
   24f68:	2000      	moveq	r0, #0
   24f6a:	2005      	movne	r0, #5
   24f6c:	4770      	bx	lr
	int evt = EVT_NOP;
   24f6e:	2000      	movs	r0, #0
}
   24f70:	4770      	bx	lr

00024f72 <notify_one>:
{
   24f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24f76:	460d      	mov	r5, r1
   24f78:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24f7a:	4619      	mov	r1, r3
   24f7c:	1d28      	adds	r0, r5, #4
{
   24f7e:	4690      	mov	r8, r2
   24f80:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   24f82:	f7ff ff92 	bl	24eaa <sys_notify_finalize>
	if (cb) {
   24f86:	4604      	mov	r4, r0
   24f88:	b138      	cbz	r0, 24f9a <notify_one+0x28>
		cb(mgr, cli, state, res);
   24f8a:	4633      	mov	r3, r6
   24f8c:	4642      	mov	r2, r8
   24f8e:	4629      	mov	r1, r5
   24f90:	4638      	mov	r0, r7
   24f92:	46a4      	mov	ip, r4
}
   24f94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   24f98:	4760      	bx	ip
}
   24f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00024f9e <transition_complete>:
{
   24f9e:	b410      	push	{r4}
	__asm__ volatile(
   24fa0:	f04f 0420 	mov.w	r4, #32
   24fa4:	f3ef 8211 	mrs	r2, BASEPRI
   24fa8:	f384 8812 	msr	BASEPRI_MAX, r4
   24fac:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   24fb0:	6141      	str	r1, [r0, #20]
}
   24fb2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   24fb4:	2101      	movs	r1, #1
   24fb6:	f7df be13 	b.w	4be0 <process_event>

00024fba <validate_args>:
{
   24fba:	b510      	push	{r4, lr}
   24fbc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   24fbe:	b140      	cbz	r0, 24fd2 <validate_args+0x18>
   24fc0:	b139      	cbz	r1, 24fd2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   24fc2:	1d08      	adds	r0, r1, #4
   24fc4:	f7ff ff5d 	bl	24e82 <sys_notify_validate>
	if ((rv == 0)
   24fc8:	b928      	cbnz	r0, 24fd6 <validate_args+0x1c>
	    && ((cli->notify.flags
   24fca:	68a3      	ldr	r3, [r4, #8]
   24fcc:	f033 0303 	bics.w	r3, r3, #3
   24fd0:	d001      	beq.n	24fd6 <validate_args+0x1c>
		rv = -EINVAL;
   24fd2:	f06f 0015 	mvn.w	r0, #21
}
   24fd6:	bd10      	pop	{r4, pc}

00024fd8 <onoff_manager_init>:
{
   24fd8:	b538      	push	{r3, r4, r5, lr}
   24fda:	460c      	mov	r4, r1
	if ((mgr == NULL)
   24fdc:	4605      	mov	r5, r0
   24fde:	b158      	cbz	r0, 24ff8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   24fe0:	b151      	cbz	r1, 24ff8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   24fe2:	680b      	ldr	r3, [r1, #0]
   24fe4:	b143      	cbz	r3, 24ff8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   24fe6:	684b      	ldr	r3, [r1, #4]
   24fe8:	b133      	cbz	r3, 24ff8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   24fea:	221c      	movs	r2, #28
   24fec:	2100      	movs	r1, #0
   24fee:	f005 fd55 	bl	2aa9c <memset>
   24ff2:	612c      	str	r4, [r5, #16]
	return 0;
   24ff4:	2000      	movs	r0, #0
}
   24ff6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   24ff8:	f06f 0015 	mvn.w	r0, #21
   24ffc:	e7fb      	b.n	24ff6 <onoff_manager_init+0x1e>

00024ffe <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   24ffe:	b570      	push	{r4, r5, r6, lr}
   25000:	4604      	mov	r4, r0
   25002:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   25004:	f7ff ffd9 	bl	24fba <validate_args>

	if (rv < 0) {
   25008:	1e05      	subs	r5, r0, #0
   2500a:	db31      	blt.n	25070 <onoff_request+0x72>
   2500c:	f04f 0320 	mov.w	r3, #32
   25010:	f3ef 8111 	mrs	r1, BASEPRI
   25014:	f383 8812 	msr	BASEPRI_MAX, r3
   25018:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   2501c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2501e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   25020:	f64f 75ff 	movw	r5, #65535	; 0xffff
   25024:	42ab      	cmp	r3, r5
   25026:	f000 0207 	and.w	r2, r0, #7
   2502a:	d02e      	beq.n	2508a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   2502c:	2a02      	cmp	r2, #2
   2502e:	d10e      	bne.n	2504e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   25030:	3301      	adds	r3, #1
   25032:	8363      	strh	r3, [r4, #26]
	rv = state;
   25034:	4615      	mov	r5, r2
		notify = true;
   25036:	2301      	movs	r3, #1
	__asm__ volatile(
   25038:	f381 8811 	msr	BASEPRI, r1
   2503c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   25040:	b1b3      	cbz	r3, 25070 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   25042:	2300      	movs	r3, #0
   25044:	4631      	mov	r1, r6
   25046:	4620      	mov	r0, r4
   25048:	f7ff ff93 	bl	24f72 <notify_one>
   2504c:	e010      	b.n	25070 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   2504e:	0783      	lsls	r3, r0, #30
   25050:	d001      	beq.n	25056 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   25052:	2a06      	cmp	r2, #6
   25054:	d10e      	bne.n	25074 <onoff_request+0x76>
	parent->next = child;
   25056:	2300      	movs	r3, #0
   25058:	6033      	str	r3, [r6, #0]
	return list->tail;
   2505a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   2505c:	b993      	cbnz	r3, 25084 <onoff_request+0x86>
	list->head = node;
   2505e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   25062:	4615      	mov	r5, r2
   25064:	b962      	cbnz	r2, 25080 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   25066:	460a      	mov	r2, r1
   25068:	4620      	mov	r0, r4
   2506a:	2102      	movs	r1, #2
   2506c:	f7df fdb8 	bl	4be0 <process_event>
		}
	}

	return rv;
}
   25070:	4628      	mov	r0, r5
   25072:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   25074:	2a05      	cmp	r2, #5
   25076:	bf0c      	ite	eq
   25078:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2507c:	f06f 0504 	mvnne.w	r5, #4
   25080:	2300      	movs	r3, #0
   25082:	e7d9      	b.n	25038 <onoff_request+0x3a>
	parent->next = child;
   25084:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25086:	6066      	str	r6, [r4, #4]
}
   25088:	e7eb      	b.n	25062 <onoff_request+0x64>
		rv = -EAGAIN;
   2508a:	f06f 050a 	mvn.w	r5, #10
   2508e:	e7f7      	b.n	25080 <onoff_request+0x82>

00025090 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   25090:	b510      	push	{r4, lr}
	__asm__ volatile(
   25092:	f04f 0320 	mov.w	r3, #32
   25096:	f3ef 8211 	mrs	r2, BASEPRI
   2509a:	f383 8812 	msr	BASEPRI_MAX, r3
   2509e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   250a2:	8b04      	ldrh	r4, [r0, #24]
   250a4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   250a8:	2c02      	cmp	r4, #2
   250aa:	d00a      	beq.n	250c2 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   250ac:	2c01      	cmp	r4, #1
   250ae:	bf0c      	ite	eq
   250b0:	f06f 0004 	mvneq.w	r0, #4
   250b4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   250b8:	f382 8811 	msr	BASEPRI, r2
   250bc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   250c0:	e008      	b.n	250d4 <onoff_release+0x44>
	mgr->refs -= 1U;
   250c2:	8b43      	ldrh	r3, [r0, #26]
   250c4:	3b01      	subs	r3, #1
   250c6:	b29b      	uxth	r3, r3
   250c8:	8343      	strh	r3, [r0, #26]
	if (stop) {
   250ca:	b923      	cbnz	r3, 250d6 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   250cc:	4621      	mov	r1, r4
   250ce:	f7df fd87 	bl	4be0 <process_event>
	int rv = state;
   250d2:	4620      	mov	r0, r4
}
   250d4:	bd10      	pop	{r4, pc}
	int rv = state;
   250d6:	4620      	mov	r0, r4
   250d8:	e7ee      	b.n	250b8 <onoff_release+0x28>

000250da <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   250da:	4604      	mov	r4, r0
   250dc:	b508      	push	{r3, lr}
   250de:	4608      	mov	r0, r1
   250e0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   250e2:	461a      	mov	r2, r3
   250e4:	47a0      	blx	r4
	return z_impl_z_current_get();
   250e6:	f7fd febd 	bl	22e64 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   250ea:	f7e2 f8e3 	bl	72b4 <z_impl_k_thread_abort>

000250ee <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   250ee:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   250f2:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   250f4:	0840      	lsrs	r0, r0, #1
   250f6:	4770      	bx	lr

000250f8 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   250f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   250fa:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   250fc:	f7ff fff7 	bl	250ee <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   25100:	fab0 f080 	clz	r0, r0
   25104:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   25108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   2510c:	00ca      	lsls	r2, r1, #3
   2510e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   25112:	1d17      	adds	r7, r2, #4
{
   25114:	460c      	mov	r4, r1
   25116:	3206      	adds	r2, #6
   25118:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   2511a:	b956      	cbnz	r6, 25132 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2511c:	2101      	movs	r1, #1
   2511e:	fa01 f000 	lsl.w	r0, r1, r0
   25122:	68d9      	ldr	r1, [r3, #12]
   25124:	4301      	orrs	r1, r0
   25126:	60d9      	str	r1, [r3, #12]
		b->next = c;
   25128:	f8cc 4010 	str.w	r4, [ip, #16]
   2512c:	53dd      	strh	r5, [r3, r7]
   2512e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   25130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   25132:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   25134:	3104      	adds	r1, #4
   25136:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   25138:	53d8      	strh	r0, [r3, r7]
   2513a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2513e:	529e      	strh	r6, [r3, r2]
   25140:	80c5      	strh	r5, [r0, #6]
   25142:	525d      	strh	r5, [r3, r1]
   25144:	e7f4      	b.n	25130 <free_list_add+0x38>

00025146 <free_list_remove_bidx>:
{
   25146:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   25148:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2514c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2514e:	4299      	cmp	r1, r3
   25150:	f102 0104 	add.w	r1, r2, #4
   25154:	d10a      	bne.n	2516c <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   25156:	2301      	movs	r3, #1
   25158:	fa03 f202 	lsl.w	r2, r3, r2
   2515c:	68c3      	ldr	r3, [r0, #12]
   2515e:	ea23 0302 	bic.w	r3, r3, r2
   25162:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   25164:	2300      	movs	r3, #0
   25166:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2516a:	bd10      	pop	{r4, pc}
   2516c:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2516e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   25172:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   25176:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2517a:	80cb      	strh	r3, [r1, #6]
   2517c:	8082      	strh	r2, [r0, #4]
}
   2517e:	e7f4      	b.n	2516a <free_list_remove_bidx+0x24>

00025180 <free_list_remove>:
{
   25180:	b508      	push	{r3, lr}
   25182:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   25184:	f7ff ffb3 	bl	250ee <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   25188:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   2518c:	f1c2 021f 	rsb	r2, r2, #31
   25190:	4618      	mov	r0, r3
}
   25192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   25196:	f7ff bfd6 	b.w	25146 <free_list_remove_bidx>

0002519a <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   2519a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2519e:	fab1 f581 	clz	r5, r1
   251a2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   251a6:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   251aa:	4603      	mov	r3, r0
	if (b->next) {
   251ac:	693a      	ldr	r2, [r7, #16]
{
   251ae:	460e      	mov	r6, r1
	if (b->next) {
   251b0:	b1c2      	cbz	r2, 251e4 <alloc_chunk+0x4a>
   251b2:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   251b6:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   251b8:	4618      	mov	r0, r3
   251ba:	4621      	mov	r1, r4
   251bc:	f7ff ff97 	bl	250ee <chunk_size>
   251c0:	42b0      	cmp	r0, r6
   251c2:	d306      	bcc.n	251d2 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   251c4:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   251c6:	4618      	mov	r0, r3
   251c8:	f7ff ffbd 	bl	25146 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   251cc:	4620      	mov	r0, r4
   251ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   251d2:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   251d6:	f1b8 0801 	subs.w	r8, r8, #1
   251da:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   251dc:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   251de:	d001      	beq.n	251e4 <alloc_chunk+0x4a>
   251e0:	4282      	cmp	r2, r0
   251e2:	d1e8      	bne.n	251b6 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   251e4:	f1c5 0220 	rsb	r2, r5, #32
   251e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   251ec:	4094      	lsls	r4, r2
   251ee:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   251f0:	4014      	ands	r4, r2
   251f2:	d0eb      	beq.n	251cc <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   251f4:	fa94 f2a4 	rbit	r2, r4
   251f8:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   251fc:	1d11      	adds	r1, r2, #4
   251fe:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   25202:	4621      	mov	r1, r4
   25204:	e7df      	b.n	251c6 <alloc_chunk+0x2c>

00025206 <merge_chunks>:
{
   25206:	b538      	push	{r3, r4, r5, lr}
   25208:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2520a:	f7ff ff70 	bl	250ee <chunk_size>
{
   2520e:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   25210:	4604      	mov	r4, r0
   25212:	4611      	mov	r1, r2
   25214:	4618      	mov	r0, r3
   25216:	f7ff ff6a 	bl	250ee <chunk_size>
		((uint16_t *)cmem)[f] = val;
   2521a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   2521e:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25220:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   25222:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   25224:	4618      	mov	r0, r3
   25226:	f7ff ff62 	bl	250ee <chunk_size>
	void *cmem = &buf[c];
   2522a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2522c:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   25230:	bd38      	pop	{r3, r4, r5, pc}

00025232 <split_chunks>:
{
   25232:	b538      	push	{r3, r4, r5, lr}
   25234:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   25236:	f7ff ff5a 	bl	250ee <chunk_size>
{
   2523a:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   2523c:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   2523e:	1a51      	subs	r1, r2, r1
   25240:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   25244:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25246:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   25248:	8060      	strh	r0, [r4, #2]
   2524a:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2524e:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   25250:	8044      	strh	r4, [r0, #2]
   25252:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   25256:	4618      	mov	r0, r3
   25258:	4611      	mov	r1, r2
   2525a:	f7ff ff48 	bl	250ee <chunk_size>
	void *cmem = &buf[c];
   2525e:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   25260:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   25264:	bd38      	pop	{r3, r4, r5, pc}

00025266 <free_chunk>:
{
   25266:	b538      	push	{r3, r4, r5, lr}
   25268:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   2526a:	f7ff ff40 	bl	250ee <chunk_size>
   2526e:	460c      	mov	r4, r1
   25270:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   25272:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   25276:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   25278:	07da      	lsls	r2, r3, #31
   2527a:	d40a      	bmi.n	25292 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2527c:	4628      	mov	r0, r5
   2527e:	f7ff ff7f 	bl	25180 <free_list_remove>
	return c + chunk_size(h, c);
   25282:	4621      	mov	r1, r4
   25284:	4628      	mov	r0, r5
   25286:	f7ff ff32 	bl	250ee <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2528a:	1822      	adds	r2, r4, r0
   2528c:	4628      	mov	r0, r5
   2528e:	f7ff ffba 	bl	25206 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   25292:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   25296:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   25298:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2529c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2529e:	07db      	lsls	r3, r3, #31
   252a0:	d40c      	bmi.n	252bc <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   252a2:	4628      	mov	r0, r5
   252a4:	f7ff ff6c 	bl	25180 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   252a8:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   252ac:	4622      	mov	r2, r4
   252ae:	1a61      	subs	r1, r4, r1
   252b0:	4628      	mov	r0, r5
   252b2:	f7ff ffa8 	bl	25206 <merge_chunks>
   252b6:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   252ba:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   252bc:	4621      	mov	r1, r4
   252be:	4628      	mov	r0, r5
}
   252c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   252c4:	f7ff bf18 	b.w	250f8 <free_list_add>

000252c8 <sys_heap_free>:
	if (mem == NULL) {
   252c8:	b161      	cbz	r1, 252e4 <sys_heap_free+0x1c>
   252ca:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   252cc:	3904      	subs	r1, #4
   252ce:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   252d0:	f021 0307 	bic.w	r3, r1, #7
   252d4:	4403      	add	r3, r0
	free_chunk(h, c);
   252d6:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   252d8:	885a      	ldrh	r2, [r3, #2]
   252da:	f022 0201 	bic.w	r2, r2, #1
   252de:	805a      	strh	r2, [r3, #2]
   252e0:	f7ff bfc1 	b.w	25266 <free_chunk>
}
   252e4:	4770      	bx	lr

000252e6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   252e6:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   252e8:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   252ea:	b909      	cbnz	r1, 252f0 <sys_heap_alloc+0xa>
		return NULL;
   252ec:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   252ee:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   252f0:	68ab      	ldr	r3, [r5, #8]
   252f2:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   252f6:	d9f9      	bls.n	252ec <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   252f8:	310b      	adds	r1, #11
   252fa:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   252fc:	4621      	mov	r1, r4
   252fe:	4628      	mov	r0, r5
   25300:	f7ff ff4b 	bl	2519a <alloc_chunk>
	if (c == 0U) {
   25304:	4606      	mov	r6, r0
   25306:	2800      	cmp	r0, #0
   25308:	d0f0      	beq.n	252ec <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2530a:	4601      	mov	r1, r0
   2530c:	4628      	mov	r0, r5
   2530e:	f7ff feee 	bl	250ee <chunk_size>
   25312:	42a0      	cmp	r0, r4
   25314:	d907      	bls.n	25326 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   25316:	1932      	adds	r2, r6, r4
   25318:	4628      	mov	r0, r5
   2531a:	f7ff ff8a 	bl	25232 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2531e:	4611      	mov	r1, r2
   25320:	4628      	mov	r0, r5
   25322:	f7ff fee9 	bl	250f8 <free_list_add>
	void *cmem = &buf[c];
   25326:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2532a:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2532c:	8853      	ldrh	r3, [r2, #2]
   2532e:	f043 0301 	orr.w	r3, r3, #1
   25332:	8053      	strh	r3, [r2, #2]
   25334:	3004      	adds	r0, #4
	return mem;
   25336:	e7da      	b.n	252ee <sys_heap_alloc+0x8>

00025338 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   25338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2533c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   2533e:	424a      	negs	r2, r1
   25340:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   25344:	ea31 0202 	bics.w	r2, r1, r2
{
   25348:	4603      	mov	r3, r0
	if (align != rew) {
   2534a:	d00a      	beq.n	25362 <sys_heap_aligned_alloc+0x2a>
		return false;
   2534c:	2f04      	cmp	r7, #4
   2534e:	463a      	mov	r2, r7
   25350:	46b9      	mov	r9, r7
   25352:	bf28      	it	cs
   25354:	2204      	movcs	r2, #4
		align -= rew;
   25356:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   25358:	b974      	cbnz	r4, 25378 <sys_heap_aligned_alloc+0x40>
		return NULL;
   2535a:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   2535c:	4628      	mov	r0, r5
   2535e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   25362:	2904      	cmp	r1, #4
   25364:	d804      	bhi.n	25370 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   25366:	4621      	mov	r1, r4
}
   25368:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   2536c:	f7ff bfbb 	b.w	252e6 <sys_heap_alloc>
		rew = 0;
   25370:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   25374:	2204      	movs	r2, #4
   25376:	e7ef      	b.n	25358 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   25378:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   2537a:	68b3      	ldr	r3, [r6, #8]
   2537c:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   25380:	d9eb      	bls.n	2535a <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25382:	f104 010b 	add.w	r1, r4, #11
   25386:	4439      	add	r1, r7
   25388:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   2538a:	08c9      	lsrs	r1, r1, #3
   2538c:	4630      	mov	r0, r6
   2538e:	f7ff ff04 	bl	2519a <alloc_chunk>
	if (c0 == 0) {
   25392:	4680      	mov	r8, r0
   25394:	2800      	cmp	r0, #0
   25396:	d0e0      	beq.n	2535a <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   25398:	f109 0504 	add.w	r5, r9, #4
   2539c:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   253a0:	1e7b      	subs	r3, r7, #1
   253a2:	4435      	add	r5, r6
   253a4:	441d      	add	r5, r3
   253a6:	427f      	negs	r7, r7
   253a8:	403d      	ands	r5, r7
   253aa:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   253ae:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   253b0:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   253b2:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   253b4:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   253b6:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   253ba:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   253bc:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   253c0:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   253c4:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   253c8:	d208      	bcs.n	253dc <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   253ca:	4601      	mov	r1, r0
   253cc:	463a      	mov	r2, r7
   253ce:	4630      	mov	r0, r6
   253d0:	f7ff ff2f 	bl	25232 <split_chunks>
		free_list_add(h, c0);
   253d4:	4641      	mov	r1, r8
   253d6:	4630      	mov	r0, r6
   253d8:	f7ff fe8e 	bl	250f8 <free_list_add>
	return c + chunk_size(h, c);
   253dc:	4639      	mov	r1, r7
   253de:	4630      	mov	r0, r6
   253e0:	f7ff fe85 	bl	250ee <chunk_size>
   253e4:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   253e6:	4284      	cmp	r4, r0
   253e8:	d207      	bcs.n	253fa <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   253ea:	4630      	mov	r0, r6
   253ec:	4622      	mov	r2, r4
   253ee:	f7ff ff20 	bl	25232 <split_chunks>
		free_list_add(h, c_end);
   253f2:	4621      	mov	r1, r4
   253f4:	4630      	mov	r0, r6
   253f6:	f7ff fe7f 	bl	250f8 <free_list_add>
	void *cmem = &buf[c];
   253fa:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   253fe:	8873      	ldrh	r3, [r6, #2]
   25400:	f043 0301 	orr.w	r3, r3, #1
   25404:	8073      	strh	r3, [r6, #2]
   25406:	e7a9      	b.n	2535c <sys_heap_aligned_alloc+0x24>

00025408 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   25408:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2540a:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2540c:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2540e:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   25412:	f021 0107 	bic.w	r1, r1, #7
{
   25416:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   25418:	1acd      	subs	r5, r1, r3
   2541a:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   2541c:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   2541e:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   25422:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   25426:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   25428:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   2542a:	2600      	movs	r6, #0
   2542c:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2542e:	f1c0 0020 	rsb	r0, r0, #32
   25432:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   25436:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   25438:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2543a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   2543e:	4284      	cmp	r4, r0
   25440:	d118      	bne.n	25474 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25442:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25444:	f040 0001 	orr.w	r0, r0, #1
   25448:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   2544a:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2544e:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   25450:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   25452:	801e      	strh	r6, [r3, #0]
   25454:	8067      	strh	r7, [r4, #2]
   25456:	195c      	adds	r4, r3, r5
   25458:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   2545c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   25460:	8066      	strh	r6, [r4, #2]
   25462:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   25464:	8850      	ldrh	r0, [r2, #2]
   25466:	f040 0001 	orr.w	r0, r0, #1
   2546a:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   2546c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   2546e:	4618      	mov	r0, r3
   25470:	f7ff be42 	b.w	250f8 <free_list_add>
		h->buckets[i].next = 0;
   25474:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   25478:	e7e1      	b.n	2543e <sys_heap_init+0x36>

0002547a <_ldiv5>:
	uint32_t v_lo = *v;
   2547a:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   2547e:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   25480:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   25484:	fba2 2403 	umull	r2, r4, r2, r3
   25488:	18d5      	adds	r5, r2, r3
   2548a:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   2548e:	fba1 1303 	umull	r1, r3, r1, r3
   25492:	1852      	adds	r2, r2, r1
   25494:	eb44 0403 	adc.w	r4, r4, r3
   25498:	1952      	adds	r2, r2, r5
   2549a:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   2549e:	1889      	adds	r1, r1, r2
   254a0:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   254a4:	e9c0 1300 	strd	r1, r3, [r0]
}
   254a8:	bd30      	pop	{r4, r5, pc}

000254aa <_get_digit>:
	if (*digit_count > 0) {
   254aa:	680a      	ldr	r2, [r1, #0]
   254ac:	2a00      	cmp	r2, #0
{
   254ae:	b510      	push	{r4, lr}
   254b0:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   254b2:	dd0f      	ble.n	254d4 <_get_digit+0x2a>
		--*digit_count;
   254b4:	3a01      	subs	r2, #1
   254b6:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   254b8:	681a      	ldr	r2, [r3, #0]
   254ba:	6844      	ldr	r4, [r0, #4]
   254bc:	200a      	movs	r0, #10
   254be:	fba2 1200 	umull	r1, r2, r2, r0
   254c2:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   254c6:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   254c8:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   254cc:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   254d0:	3030      	adds	r0, #48	; 0x30
}
   254d2:	bd10      	pop	{r4, pc}
		rval = '0';
   254d4:	2030      	movs	r0, #48	; 0x30
   254d6:	e7fc      	b.n	254d2 <_get_digit+0x28>

000254d8 <outs>:
{
   254d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   254dc:	4607      	mov	r7, r0
   254de:	4688      	mov	r8, r1
   254e0:	4615      	mov	r5, r2
   254e2:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   254e4:	4614      	mov	r4, r2
   254e6:	42b4      	cmp	r4, r6
   254e8:	eba4 0005 	sub.w	r0, r4, r5
   254ec:	d302      	bcc.n	254f4 <outs+0x1c>
   254ee:	b93e      	cbnz	r6, 25500 <outs+0x28>
   254f0:	7823      	ldrb	r3, [r4, #0]
   254f2:	b12b      	cbz	r3, 25500 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   254f4:	f814 0b01 	ldrb.w	r0, [r4], #1
   254f8:	4641      	mov	r1, r8
   254fa:	47b8      	blx	r7
		if (rc < 0) {
   254fc:	2800      	cmp	r0, #0
   254fe:	daf2      	bge.n	254e6 <outs+0xe>
}
   25500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025504 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   25504:	4602      	mov	r2, r0
   25506:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   25508:	68c0      	ldr	r0, [r0, #12]
   2550a:	6814      	ldr	r4, [r2, #0]
   2550c:	42a0      	cmp	r0, r4
   2550e:	d904      	bls.n	2551a <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   25510:	3801      	subs	r0, #1
   25512:	1b00      	subs	r0, r0, r4
   25514:	6008      	str	r0, [r1, #0]

		return false;
   25516:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   25518:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2551a:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   2551c:	b918      	cbnz	r0, 25526 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   2551e:	3b01      	subs	r3, #1
   25520:	1b1b      	subs	r3, r3, r4
   25522:	600b      	str	r3, [r1, #0]
		return false;
   25524:	e7f8      	b.n	25518 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   25526:	1b1b      	subs	r3, r3, r4
   25528:	600b      	str	r3, [r1, #0]
	return true;
   2552a:	2001      	movs	r0, #1
   2552c:	e7f4      	b.n	25518 <free_space+0x14>

0002552e <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   2552e:	b510      	push	{r4, lr}
   25530:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   25532:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25534:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   25536:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   25538:	07d2      	lsls	r2, r2, #31
   2553a:	d502      	bpl.n	25542 <idx_inc+0x14>
		return i & (buffer->size - 1);
   2553c:	3b01      	subs	r3, #1
   2553e:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   25540:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   25542:	4298      	cmp	r0, r3
   25544:	bf28      	it	cs
   25546:	1ac0      	subcs	r0, r0, r3
   25548:	e7fa      	b.n	25540 <idx_inc+0x12>

0002554a <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   2554a:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2554c:	69c2      	ldr	r2, [r0, #28]
{
   2554e:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   25550:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25552:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   25554:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   25558:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2555c:	462a      	mov	r2, r5
   2555e:	6801      	ldr	r1, [r0, #0]
{
   25560:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25562:	f7ff ffe4 	bl	2552e <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   25566:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   25568:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2556a:	462a      	mov	r2, r5
   2556c:	4620      	mov	r0, r4
   2556e:	f7ff ffde 	bl	2552e <idx_inc>
   25572:	6060      	str	r0, [r4, #4]
}
   25574:	bd38      	pop	{r3, r4, r5, pc}

00025576 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   25576:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   2557a:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   2557e:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   25582:	461f      	mov	r7, r3
	*user_packet = false;
   25584:	2300      	movs	r3, #0
   25586:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   25588:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   2558c:	f003 0303 	and.w	r3, r3, #3
   25590:	2b02      	cmp	r3, #2
{
   25592:	4604      	mov	r4, r0
   25594:	468b      	mov	fp, r1
   25596:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   25598:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   2559c:	d103      	bne.n	255a6 <drop_item_locked+0x30>
		return item->skip.len;
   2559e:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   255a2:	08ad      	lsrs	r5, r5, #2
   255a4:	d12e      	bne.n	25604 <drop_item_locked+0x8e>
   255a6:	69a3      	ldr	r3, [r4, #24]
   255a8:	4630      	mov	r0, r6
   255aa:	4798      	blx	r3
   255ac:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   255ae:	f1b8 0f00 	cmp.w	r8, #0
   255b2:	d036      	beq.n	25622 <drop_item_locked+0xac>
		if (item->hdr.busy) {
   255b4:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   255b8:	079b      	lsls	r3, r3, #30
   255ba:	d52f      	bpl.n	2561c <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   255bc:	f10b 0101 	add.w	r1, fp, #1
   255c0:	4620      	mov	r0, r4
   255c2:	f7ff ffc2 	bl	2554a <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   255c6:	6861      	ldr	r1, [r4, #4]
   255c8:	462a      	mov	r2, r5
   255ca:	4620      	mov	r0, r4
   255cc:	f7ff ffaf 	bl	2552e <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   255d0:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   255d2:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   255d4:	462a      	mov	r2, r5
   255d6:	4620      	mov	r0, r4
   255d8:	f7ff ffa9 	bl	2552e <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   255dc:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   255de:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   255e0:	68e1      	ldr	r1, [r4, #12]
   255e2:	4620      	mov	r0, r4
   255e4:	f7ff ffa3 	bl	2552e <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   255e8:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   255ea:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   255ee:	f002 0203 	and.w	r2, r2, #3
   255f2:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   255f4:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   255f8:	d10c      	bne.n	25614 <drop_item_locked+0x9e>
		return item->skip.len;
   255fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   255fe:	089b      	lsrs	r3, r3, #2
   25600:	d008      	beq.n	25614 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   25602:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   25604:	68e1      	ldr	r1, [r4, #12]
   25606:	462a      	mov	r2, r5
   25608:	4620      	mov	r0, r4
   2560a:	f7ff ff90 	bl	2552e <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   2560e:	e9c4 0002 	strd	r0, r0, [r4, #8]
   25612:	e007      	b.n	25624 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   25614:	69a3      	ldr	r3, [r4, #24]
   25616:	4630      	mov	r0, r6
   25618:	4798      	blx	r3
   2561a:	4405      	add	r5, r0
			*user_packet = true;
   2561c:	2301      	movs	r3, #1
   2561e:	703b      	strb	r3, [r7, #0]
   25620:	e7f0      	b.n	25604 <drop_item_locked+0x8e>
		item = NULL;
   25622:	4646      	mov	r6, r8
	}

	return item;
}
   25624:	4630      	mov	r0, r6
   25626:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002562a <mpsc_pbuf_init>:
{
   2562a:	b538      	push	{r3, r4, r5, lr}
   2562c:	460d      	mov	r5, r1
   2562e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   25630:	221c      	movs	r2, #28
   25632:	2100      	movs	r1, #0
   25634:	f005 fa32 	bl	2aa9c <memset>
	buffer->get_wlen = cfg->get_wlen;
   25638:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   2563a:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   2563c:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   2563e:	68ab      	ldr	r3, [r5, #8]
   25640:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   25642:	682b      	ldr	r3, [r5, #0]
   25644:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   25646:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   25648:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   2564a:	b122      	cbz	r2, 25656 <mpsc_pbuf_init+0x2c>
   2564c:	1e51      	subs	r1, r2, #1
   2564e:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   25650:	bf08      	it	eq
   25652:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   25656:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   25658:	2201      	movs	r2, #1
   2565a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2565e:	2100      	movs	r1, #0
}
   25660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25664:	f004 bdf5 	b.w	2a252 <z_impl_k_sem_init>

00025668 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   25668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2566c:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   2566e:	6a03      	ldr	r3, [r0, #32]
   25670:	3b01      	subs	r3, #1
   25672:	428b      	cmp	r3, r1
{
   25674:	b085      	sub	sp, #20
   25676:	4604      	mov	r4, r0
   25678:	460f      	mov	r7, r1
   2567a:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   2567c:	d364      	bcc.n	25748 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   2567e:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   25680:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   25682:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   25686:	f04f 0320 	mov.w	r3, #32
   2568a:	f3ef 8611 	mrs	r6, BASEPRI
   2568e:	f383 8812 	msr	BASEPRI_MAX, r3
   25692:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   25696:	a903      	add	r1, sp, #12
   25698:	4620      	mov	r0, r4
   2569a:	f7ff ff33 	bl	25504 <free_space>
		if (free_wlen >= wlen) {
   2569e:	9903      	ldr	r1, [sp, #12]
   256a0:	42b9      	cmp	r1, r7
   256a2:	d321      	bcc.n	256e8 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   256a4:	6821      	ldr	r1, [r4, #0]
			item =
   256a6:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   256a8:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   256ac:	f022 0203 	bic.w	r2, r2, #3
   256b0:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   256b4:	4620      	mov	r0, r4
   256b6:	463a      	mov	r2, r7
			item =
   256b8:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   256bc:	f7ff ff37 	bl	2552e <idx_inc>
		cont = false;
   256c0:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   256c2:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   256c4:	f386 8811 	msr	BASEPRI, r6
   256c8:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   256cc:	2b00      	cmp	r3, #0
   256ce:	d03d      	beq.n	2574c <mpsc_pbuf_alloc+0xe4>
   256d0:	2d00      	cmp	r5, #0
   256d2:	d0d8      	beq.n	25686 <mpsc_pbuf_alloc+0x1e>
   256d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   256d8:	2b00      	cmp	r3, #0
   256da:	d0d4      	beq.n	25686 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   256dc:	4629      	mov	r1, r5
   256de:	6963      	ldr	r3, [r4, #20]
   256e0:	4620      	mov	r0, r4
   256e2:	4798      	blx	r3
			dropped_item = NULL;
   256e4:	2500      	movs	r5, #0
   256e6:	e7ce      	b.n	25686 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   256e8:	b128      	cbz	r0, 256f6 <mpsc_pbuf_alloc+0x8e>
   256ea:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   256ec:	4620      	mov	r0, r4
   256ee:	f7ff ff2c 	bl	2554a <add_skip_item>
			cont = true;
   256f2:	9b01      	ldr	r3, [sp, #4]
   256f4:	e7e6      	b.n	256c4 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   256f6:	ea58 0309 	orrs.w	r3, r8, r9
   256fa:	d017      	beq.n	2572c <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   256fc:	f004 fc99 	bl	2a032 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   25700:	b9a0      	cbnz	r0, 2572c <mpsc_pbuf_alloc+0xc4>
   25702:	f386 8811 	msr	BASEPRI, r6
   25706:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   2570a:	4642      	mov	r2, r8
   2570c:	464b      	mov	r3, r9
   2570e:	4658      	mov	r0, fp
   25710:	f7fc fed0 	bl	224b4 <z_impl_k_sem_take>
	__asm__ volatile(
   25714:	f04f 0320 	mov.w	r3, #32
   25718:	f3ef 8611 	mrs	r6, BASEPRI
   2571c:	f383 8812 	msr	BASEPRI_MAX, r3
   25720:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   25724:	fab0 f380 	clz	r3, r0
   25728:	095b      	lsrs	r3, r3, #5
   2572a:	e7cb      	b.n	256c4 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   2572c:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   2572e:	9903      	ldr	r1, [sp, #12]
   25730:	f10d 030b 	add.w	r3, sp, #11
   25734:	f3c2 0240 	ubfx	r2, r2, #1, #1
   25738:	4620      	mov	r0, r4
   2573a:	f7ff ff1c 	bl	25576 <drop_item_locked>
			cont = dropped_item != NULL;
   2573e:	1e03      	subs	r3, r0, #0
   25740:	4605      	mov	r5, r0
   25742:	bf18      	it	ne
   25744:	2301      	movne	r3, #1
   25746:	e7bd      	b.n	256c4 <mpsc_pbuf_alloc+0x5c>
		return NULL;
   25748:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   2574c:	4650      	mov	r0, sl
   2574e:	b005      	add	sp, #20
   25750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00025754 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   25754:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   25756:	6983      	ldr	r3, [r0, #24]
{
   25758:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2575a:	4608      	mov	r0, r1
{
   2575c:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2575e:	4798      	blx	r3
   25760:	4602      	mov	r2, r0
   25762:	f04f 0320 	mov.w	r3, #32
   25766:	f3ef 8611 	mrs	r6, BASEPRI
   2576a:	f383 8812 	msr	BASEPRI_MAX, r3
   2576e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   25772:	782b      	ldrb	r3, [r5, #0]
   25774:	f043 0301 	orr.w	r3, r3, #1
   25778:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   2577a:	6861      	ldr	r1, [r4, #4]
   2577c:	4620      	mov	r0, r4
   2577e:	f7ff fed6 	bl	2552e <idx_inc>
   25782:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   25784:	f386 8811 	msr	BASEPRI, r6
   25788:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   2578c:	bd70      	pop	{r4, r5, r6, pc}

0002578e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   2578e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25792:	4604      	mov	r4, r0
	__asm__ volatile(
   25794:	f04f 0320 	mov.w	r3, #32
   25798:	f3ef 8611 	mrs	r6, BASEPRI
   2579c:	f383 8812 	msr	BASEPRI_MAX, r3
   257a0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   257a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   257a8:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   257aa:	bf88      	it	hi
   257ac:	6a23      	ldrhi	r3, [r4, #32]
   257ae:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   257b0:	b1f3      	cbz	r3, 257f0 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   257b2:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   257b4:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   257b8:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   257bc:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   257c0:	d016      	beq.n	257f0 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   257c2:	2b02      	cmp	r3, #2
   257c4:	d103      	bne.n	257ce <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   257c6:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   257ca:	08ad      	lsrs	r5, r5, #2
   257cc:	d115      	bne.n	257fa <mpsc_pbuf_claim+0x6c>
   257ce:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   257d0:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   257d2:	d50f      	bpl.n	257f4 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   257d4:	f042 0202 	orr.w	r2, r2, #2
   257d8:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   257dc:	4640      	mov	r0, r8
   257de:	4798      	blx	r3
   257e0:	4639      	mov	r1, r7
   257e2:	4602      	mov	r2, r0
   257e4:	4620      	mov	r0, r4
   257e6:	f7ff fea2 	bl	2552e <idx_inc>
		cont = false;
   257ea:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   257ec:	60a0      	str	r0, [r4, #8]
   257ee:	e011      	b.n	25814 <mpsc_pbuf_claim+0x86>
			item = NULL;
   257f0:	4698      	mov	r8, r3
   257f2:	e00f      	b.n	25814 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   257f4:	4640      	mov	r0, r8
   257f6:	4798      	blx	r3
   257f8:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   257fa:	68a1      	ldr	r1, [r4, #8]
   257fc:	462a      	mov	r2, r5
   257fe:	4620      	mov	r0, r4
   25800:	f7ff fe95 	bl	2552e <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   25804:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   25806:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   25808:	462a      	mov	r2, r5
   2580a:	4620      	mov	r0, r4
   2580c:	f7ff fe8f 	bl	2552e <idx_inc>
				cont = true;
   25810:	2301      	movs	r3, #1
				buffer->rd_idx =
   25812:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25814:	f386 8811 	msr	BASEPRI, r6
   25818:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   2581c:	2b00      	cmp	r3, #0
   2581e:	d1b9      	bne.n	25794 <mpsc_pbuf_claim+0x6>

	return item;
}
   25820:	4640      	mov	r0, r8
   25822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025826 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   25826:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   25828:	6983      	ldr	r3, [r0, #24]
{
   2582a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   2582c:	4608      	mov	r0, r1
{
   2582e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   25830:	4798      	blx	r3
   25832:	4602      	mov	r2, r0
	__asm__ volatile(
   25834:	f04f 0320 	mov.w	r3, #32
   25838:	f3ef 8611 	mrs	r6, BASEPRI
   2583c:	f383 8812 	msr	BASEPRI_MAX, r3
   25840:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   25844:	782b      	ldrb	r3, [r5, #0]
   25846:	f36f 0300 	bfc	r3, #0, #1
   2584a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2584c:	6923      	ldr	r3, [r4, #16]
   2584e:	079b      	lsls	r3, r3, #30
   25850:	d505      	bpl.n	2585e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   25852:	68e1      	ldr	r1, [r4, #12]
   25854:	69e3      	ldr	r3, [r4, #28]
   25856:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   2585a:	429d      	cmp	r5, r3
   2585c:	d112      	bne.n	25884 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   2585e:	782b      	ldrb	r3, [r5, #0]
   25860:	f36f 0341 	bfc	r3, #1, #1
   25864:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   25866:	68e1      	ldr	r1, [r4, #12]
   25868:	4620      	mov	r0, r4
   2586a:	f7ff fe60 	bl	2552e <idx_inc>
   2586e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   25870:	f386 8811 	msr	BASEPRI, r6
   25874:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   25878:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   2587c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   25880:	f7fc bdf2 	b.w	22468 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   25884:	682b      	ldr	r3, [r5, #0]
   25886:	f360 039f 	bfi	r3, r0, #2, #30
   2588a:	602b      	str	r3, [r5, #0]
   2588c:	e7f0      	b.n	25870 <mpsc_pbuf_free+0x4a>

0002588e <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2588e:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   25892:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   25894:	bf8a      	itet	hi
   25896:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   25898:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   2589a:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   2589c:	1e18      	subs	r0, r3, #0
   2589e:	bf18      	it	ne
   258a0:	2001      	movne	r0, #1
   258a2:	4770      	bx	lr

000258a4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   258a4:	4770      	bx	lr

000258a6 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   258a6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   258a8:	075b      	lsls	r3, r3, #29
   258aa:	d40b      	bmi.n	258c4 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   258ac:	6803      	ldr	r3, [r0, #0]
   258ae:	8840      	ldrh	r0, [r0, #2]
   258b0:	f3c3 2349 	ubfx	r3, r3, #9, #10
   258b4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   258b8:	4418      	add	r0, r3
   258ba:	3013      	adds	r0, #19
   258bc:	f020 0007 	bic.w	r0, r0, #7
   258c0:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   258c2:	4770      	bx	lr
	return 0;
   258c4:	2000      	movs	r0, #0
}
   258c6:	4770      	bx	lr

000258c8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   258c8:	f004 ba0f 	b.w	29cea <sys_clock_cycle_get_32>

000258cc <dummy_timestamp>:
   258cc:	2000      	movs	r0, #0
   258ce:	4770      	bx	lr

000258d0 <z_log_vprintk>:
{
   258d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   258d2:	2300      	movs	r3, #0
   258d4:	e9cd 0101 	strd	r0, r1, [sp, #4]
   258d8:	9300      	str	r3, [sp, #0]
   258da:	461a      	mov	r2, r3
   258dc:	4619      	mov	r1, r3
   258de:	4618      	mov	r0, r3
   258e0:	f7e0 fd00 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
   258e4:	b005      	add	sp, #20
   258e6:	f85d fb04 	ldr.w	pc, [sp], #4

000258ea <notify_drop>:
	z_log_dropped(true);
   258ea:	2001      	movs	r0, #1
   258ec:	f7e0 b984 	b.w	5bf8 <z_log_dropped>

000258f0 <get_msg>:
{
   258f0:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   258f2:	f7e0 f9f5 	bl	5ce0 <z_log_msg2_claim>
}
   258f6:	bd08      	pop	{r3, pc}

000258f8 <z_log_get_tag>:
}
   258f8:	2000      	movs	r0, #0
   258fa:	4770      	bx	lr

000258fc <buffer_write>:
{
   258fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258fe:	4606      	mov	r6, r0
   25900:	460d      	mov	r5, r1
   25902:	4614      	mov	r4, r2
   25904:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   25906:	4621      	mov	r1, r4
   25908:	4628      	mov	r0, r5
   2590a:	463a      	mov	r2, r7
   2590c:	47b0      	blx	r6
	} while (len != 0);
   2590e:	1a24      	subs	r4, r4, r0
		buf += processed;
   25910:	4405      	add	r5, r0
	} while (len != 0);
   25912:	d1f8      	bne.n	25906 <buffer_write+0xa>
}
   25914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025916 <log_output_flush>:
		     output->control_block->offset,
   25916:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   25918:	6881      	ldr	r1, [r0, #8]
{
   2591a:	b510      	push	{r4, lr}
   2591c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2591e:	e9d2 2300 	ldrd	r2, r3, [r2]
   25922:	6800      	ldr	r0, [r0, #0]
   25924:	f7ff ffea 	bl	258fc <buffer_write>
	output->control_block->offset = 0;
   25928:	6863      	ldr	r3, [r4, #4]
   2592a:	2200      	movs	r2, #0
   2592c:	601a      	str	r2, [r3, #0]
}
   2592e:	bd10      	pop	{r4, pc}

00025930 <out_func>:
{
   25930:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   25932:	684b      	ldr	r3, [r1, #4]
   25934:	681a      	ldr	r2, [r3, #0]
   25936:	68cb      	ldr	r3, [r1, #12]
   25938:	429a      	cmp	r2, r3
{
   2593a:	4605      	mov	r5, r0
   2593c:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   2593e:	d102      	bne.n	25946 <out_func+0x16>
		log_output_flush(out_ctx);
   25940:	4608      	mov	r0, r1
   25942:	f7ff ffe8 	bl	25916 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   25946:	6863      	ldr	r3, [r4, #4]
   25948:	f3bf 8f5b 	dmb	ish
   2594c:	e853 2f00 	ldrex	r2, [r3]
   25950:	1c51      	adds	r1, r2, #1
   25952:	e843 1000 	strex	r0, r1, [r3]
   25956:	2800      	cmp	r0, #0
   25958:	d1f8      	bne.n	2594c <out_func+0x1c>
   2595a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   2595e:	68a3      	ldr	r3, [r4, #8]
   25960:	549d      	strb	r5, [r3, r2]
}
   25962:	2000      	movs	r0, #0
   25964:	bd38      	pop	{r3, r4, r5, pc}

00025966 <cr_out_func>:
{
   25966:	b538      	push	{r3, r4, r5, lr}
   25968:	4605      	mov	r5, r0
   2596a:	460c      	mov	r4, r1
	out_func(c, ctx);
   2596c:	f7ff ffe0 	bl	25930 <out_func>
	if (c == '\n') {
   25970:	2d0a      	cmp	r5, #10
   25972:	d103      	bne.n	2597c <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   25974:	4621      	mov	r1, r4
   25976:	200d      	movs	r0, #13
   25978:	f7ff ffda 	bl	25930 <out_func>
}
   2597c:	2000      	movs	r0, #0
   2597e:	bd38      	pop	{r3, r4, r5, pc}

00025980 <z_log_msg2_finalize>:
{
   25980:	b570      	push	{r4, r5, r6, lr}
   25982:	460e      	mov	r6, r1
   25984:	4615      	mov	r5, r2
   25986:	4619      	mov	r1, r3
	if (!msg) {
   25988:	4604      	mov	r4, r0
   2598a:	b918      	cbnz	r0, 25994 <z_log_msg2_finalize+0x14>
}
   2598c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   25990:	f7e0 b932 	b.w	5bf8 <z_log_dropped>
	if (data) {
   25994:	b143      	cbz	r3, 259a8 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   25996:	f100 030c 	add.w	r3, r0, #12
   2599a:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2599e:	4418      	add	r0, r3
   259a0:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   259a4:	f005 f859 	bl	2aa5a <memcpy>
	msg->hdr.source = source;
   259a8:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   259ac:	4620      	mov	r0, r4
}
   259ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   259b2:	f7e0 ba57 	b.w	5e64 <z_log_msg2_commit>

000259b6 <z_impl_z_log_msg2_static_create>:
{
   259b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   259ba:	f3c1 2949 	ubfx	r9, r1, #9, #10
   259be:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   259c2:	444c      	add	r4, r9
   259c4:	3413      	adds	r4, #19
   259c6:	f024 0407 	bic.w	r4, r4, #7
   259ca:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   259cc:	08a0      	lsrs	r0, r4, #2
{
   259ce:	460d      	mov	r5, r1
   259d0:	4690      	mov	r8, r2
   259d2:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   259d4:	f7e0 f97c 	bl	5cd0 <z_log_msg2_alloc>
	if (msg) {
   259d8:	4604      	mov	r4, r0
   259da:	b120      	cbz	r0, 259e6 <z_impl_z_log_msg2_static_create+0x30>
   259dc:	464a      	mov	r2, r9
   259de:	4641      	mov	r1, r8
   259e0:	300c      	adds	r0, #12
   259e2:	f005 f83a 	bl	2aa5a <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   259e6:	463b      	mov	r3, r7
   259e8:	462a      	mov	r2, r5
   259ea:	4631      	mov	r1, r6
   259ec:	4620      	mov	r0, r4
}
   259ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   259f2:	f7ff bfc5 	b.w	25980 <z_log_msg2_finalize>

000259f6 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   259f6:	b538      	push	{r3, r4, r5, lr}
   259f8:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   259fa:	42ab      	cmp	r3, r5
{
   259fc:	4611      	mov	r1, r2
   259fe:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   25a00:	d804      	bhi.n	25a0c <_copy+0x16>
   25a02:	461a      	mov	r2, r3
   25a04:	f005 f829 	bl	2aa5a <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   25a08:	4620      	mov	r0, r4
   25a0a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   25a0c:	2400      	movs	r4, #0
   25a0e:	e7fb      	b.n	25a08 <_copy+0x12>

00025a10 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   25a10:	f005 b844 	b.w	2aa9c <memset>

00025a14 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   25a14:	09c3      	lsrs	r3, r0, #7
   25a16:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   25a1a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   25a1e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   25a22:	b2c0      	uxtb	r0, r0
   25a24:	4770      	bx	lr

00025a26 <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   25a26:	b510      	push	{r4, lr}
   25a28:	460a      	mov	r2, r1
   25a2a:	2100      	movs	r1, #0
   25a2c:	4604      	mov	r4, r0
   25a2e:	f005 f835 	bl	2aa9c <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   25a32:	bd10      	pop	{r4, pc}

00025a34 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   25a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25a38:	4605      	mov	r5, r0
   25a3a:	b0a8      	sub	sp, #160	; 0xa0
   25a3c:	460f      	mov	r7, r1
   25a3e:	4614      	mov	r4, r2
   25a40:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   25a42:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   25a46:	f7e0 fe75 	bl	6734 <uECC_get_rng>
		if (!rng_function ||
   25a4a:	4603      	mov	r3, r0
   25a4c:	2800      	cmp	r0, #0
   25a4e:	d03c      	beq.n	25aca <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   25a50:	2140      	movs	r1, #64	; 0x40
   25a52:	a808      	add	r0, sp, #32
   25a54:	4798      	blx	r3
		if (!rng_function ||
   25a56:	b3c0      	cbz	r0, 25aca <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   25a58:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   25a5c:	f112 031f 	adds.w	r3, r2, #31
   25a60:	bf48      	it	mi
   25a62:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   25a66:	a908      	add	r1, sp, #32
   25a68:	4642      	mov	r2, r8
   25a6a:	4668      	mov	r0, sp
   25a6c:	f343 1347 	sbfx	r3, r3, #5, #8
   25a70:	f000 f9ea 	bl	25e48 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   25a74:	4622      	mov	r2, r4
   25a76:	4669      	mov	r1, sp
   25a78:	a818      	add	r0, sp, #96	; 0x60
   25a7a:	f000 fdff 	bl	2667c <EccPoint_compute_public_key>
   25a7e:	b310      	cbz	r0, 25ac6 <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   25a80:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   25a84:	1dd9      	adds	r1, r3, #7
   25a86:	bf48      	it	mi
   25a88:	f103 010e 	addmi.w	r1, r3, #14
   25a8c:	466a      	mov	r2, sp
   25a8e:	10c9      	asrs	r1, r1, #3
   25a90:	4638      	mov	r0, r7
   25a92:	f000 fe1b 	bl	266cc <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   25a96:	f994 1001 	ldrsb.w	r1, [r4, #1]
   25a9a:	aa18      	add	r2, sp, #96	; 0x60
   25a9c:	4628      	mov	r0, r5
   25a9e:	f000 fe15 	bl	266cc <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   25aa2:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   25aa6:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   25aaa:	ab18      	add	r3, sp, #96	; 0x60
   25aac:	1868      	adds	r0, r5, r1
   25aae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25ab2:	f000 fe0b 	bl	266cc <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   25ab6:	4668      	mov	r0, sp
   25ab8:	2120      	movs	r1, #32
   25aba:	f7ff ffb4 	bl	25a26 <_set_secure.constprop.0>

      			return 1;
   25abe:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   25ac0:	b028      	add	sp, #160	; 0xa0
   25ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   25ac6:	3e01      	subs	r6, #1
   25ac8:	d1bd      	bne.n	25a46 <uECC_make_key+0x12>
        		return 0;
   25aca:	2000      	movs	r0, #0
   25acc:	e7f8      	b.n	25ac0 <uECC_make_key+0x8c>

00025ace <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   25ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ad2:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   25ad4:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   25ad8:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   25adc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   25ae0:	b0a4      	sub	sp, #144	; 0x90
   25ae2:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   25ae4:	1dda      	adds	r2, r3, #7
   25ae6:	bf48      	it	mi
   25ae8:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   25aec:	ad04      	add	r5, sp, #16
{
   25aee:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   25af0:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   25af2:	4628      	mov	r0, r5
   25af4:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   25af6:	9502      	str	r5, [sp, #8]
   25af8:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   25afa:	f000 fdfb 	bl	266f4 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   25afe:	4632      	mov	r2, r6
   25b00:	4649      	mov	r1, r9
   25b02:	a814      	add	r0, sp, #80	; 0x50
   25b04:	f000 fdf6 	bl	266f4 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   25b08:	ab14      	add	r3, sp, #80	; 0x50
   25b0a:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   25b0e:	4632      	mov	r2, r6
   25b10:	eb09 0106 	add.w	r1, r9, r6
   25b14:	f000 fdee 	bl	266f4 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   25b18:	4623      	mov	r3, r4
   25b1a:	463a      	mov	r2, r7
   25b1c:	4629      	mov	r1, r5
   25b1e:	4628      	mov	r0, r5
   25b20:	f000 fd80 	bl	26624 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   25b24:	fab0 f380 	clz	r3, r0
   25b28:	9401      	str	r4, [sp, #4]
   25b2a:	aa24      	add	r2, sp, #144	; 0x90
   25b2c:	095b      	lsrs	r3, r3, #5
   25b2e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   25b32:	8863      	ldrh	r3, [r4, #2]
   25b34:	3301      	adds	r3, #1
   25b36:	b21b      	sxth	r3, r3
   25b38:	9300      	str	r3, [sp, #0]
   25b3a:	f851 2c88 	ldr.w	r2, [r1, #-136]
   25b3e:	a914      	add	r1, sp, #80	; 0x50
   25b40:	2300      	movs	r3, #0
   25b42:	4608      	mov	r0, r1
   25b44:	f000 fca1 	bl	2648a <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   25b48:	aa14      	add	r2, sp, #80	; 0x50
   25b4a:	4631      	mov	r1, r6
   25b4c:	4640      	mov	r0, r8
   25b4e:	f000 fdbd 	bl	266cc <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   25b52:	4621      	mov	r1, r4
   25b54:	a814      	add	r0, sp, #80	; 0x50
   25b56:	f000 fc0d 	bl	26374 <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   25b5a:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   25b5c:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   25b5e:	eb0d 0001 	add.w	r0, sp, r1
   25b62:	f7ff ff60 	bl	25a26 <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   25b66:	4638      	mov	r0, r7
   25b68:	2120      	movs	r1, #32
   25b6a:	f7ff ff5c 	bl	25a26 <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   25b6e:	4628      	mov	r0, r5
   25b70:	2120      	movs	r1, #32
   25b72:	f7ff ff58 	bl	25a26 <_set_secure.constprop.0>

	return r;
}
   25b76:	fab4 f084 	clz	r0, r4
   25b7a:	0940      	lsrs	r0, r0, #5
   25b7c:	b024      	add	sp, #144	; 0x90
   25b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00025b82 <uECC_vli_add>:
{
   25b82:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   25b84:	2400      	movs	r4, #0
{
   25b86:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   25b88:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   25b8a:	b265      	sxtb	r5, r4
   25b8c:	42ab      	cmp	r3, r5
   25b8e:	dc00      	bgt.n	25b92 <uECC_vli_add+0x10>
}
   25b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   25b92:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   25b96:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   25b9a:	443d      	add	r5, r7
   25b9c:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   25b9e:	42af      	cmp	r7, r5
   25ba0:	f000 0001 	and.w	r0, r0, #1
   25ba4:	bf18      	it	ne
   25ba6:	2000      	movne	r0, #0
		result[i] = sum;
   25ba8:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   25bac:	bf88      	it	hi
   25bae:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   25bb2:	3401      	adds	r4, #1
   25bb4:	e7e9      	b.n	25b8a <uECC_vli_add+0x8>

00025bb6 <uECC_vli_rshift1>:
	vli += num_words;
   25bb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   25bba:	2300      	movs	r3, #0
	while (vli-- > end) {
   25bbc:	4288      	cmp	r0, r1
   25bbe:	d300      	bcc.n	25bc2 <uECC_vli_rshift1+0xc>
}
   25bc0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   25bc2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   25bc6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   25bca:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   25bcc:	07d3      	lsls	r3, r2, #31
   25bce:	e7f5      	b.n	25bbc <uECC_vli_rshift1+0x6>

00025bd0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   25bd0:	6803      	ldr	r3, [r0, #0]
{
   25bd2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   25bd4:	f013 0601 	ands.w	r6, r3, #1
{
   25bd8:	4605      	mov	r5, r0
   25bda:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   25bdc:	d005      	beq.n	25bea <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   25bde:	4613      	mov	r3, r2
   25be0:	460a      	mov	r2, r1
   25be2:	4601      	mov	r1, r0
   25be4:	f7ff ffcd 	bl	25b82 <uECC_vli_add>
   25be8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   25bea:	4621      	mov	r1, r4
   25bec:	4628      	mov	r0, r5
   25bee:	f7ff ffe2 	bl	25bb6 <uECC_vli_rshift1>
	if (carry) {
   25bf2:	b146      	cbz	r6, 25c06 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   25bf4:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   25bf8:	3a01      	subs	r2, #1
   25bfa:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   25bfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   25c02:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   25c06:	bd70      	pop	{r4, r5, r6, pc}

00025c08 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   25c08:	f04f 0c00 	mov.w	ip, #0
{
   25c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   25c10:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   25c12:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   25c14:	fa4f f98c 	sxtb.w	r9, ip
   25c18:	454b      	cmp	r3, r9
   25c1a:	dc16      	bgt.n	25c4a <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   25c1c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   25c20:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   25c24:	9601      	str	r6, [sp, #4]
   25c26:	f04f 0800 	mov.w	r8, #0
   25c2a:	9f01      	ldr	r7, [sp, #4]
   25c2c:	fa53 fe88 	uxtab	lr, r3, r8
   25c30:	fa4f fe8e 	sxtb.w	lr, lr
   25c34:	45be      	cmp	lr, r7
   25c36:	fa5f f688 	uxtb.w	r6, r8
   25c3a:	db26      	blt.n	25c8a <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   25c3c:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   25c40:	f840 4c04 	str.w	r4, [r0, #-4]
}
   25c44:	b003      	add	sp, #12
   25c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   25c4a:	f04f 0e00 	mov.w	lr, #0
   25c4e:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   25c52:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   25c54:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25c58:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   25c5c:	fba6 6707 	umull	r6, r7, r6, r7
   25c60:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   25c62:	f10e 0e01 	add.w	lr, lr, #1
   25c66:	417d      	adcs	r5, r7
   25c68:	fa4f f68e 	sxtb.w	r6, lr
   25c6c:	f04f 0b00 	mov.w	fp, #0
   25c70:	bf28      	it	cs
   25c72:	f04f 0b01 	movcs.w	fp, #1
   25c76:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   25c78:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   25c7a:	ddeb      	ble.n	25c54 <uECC_vli_mult+0x4c>
		result[k] = r0;
   25c7c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   25c80:	462c      	mov	r4, r5
   25c82:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   25c86:	4645      	mov	r5, r8
   25c88:	e7c4      	b.n	25c14 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25c8a:	3601      	adds	r6, #1
   25c8c:	46a9      	mov	r9, r5
   25c8e:	b276      	sxtb	r6, r6
   25c90:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   25c94:	2500      	movs	r5, #0
   25c96:	b277      	sxtb	r7, r6
   25c98:	42bb      	cmp	r3, r7
   25c9a:	dc05      	bgt.n	25ca8 <uECC_vli_mult+0xa0>
		result[k] = r0;
   25c9c:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   25ca0:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   25ca4:	464c      	mov	r4, r9
   25ca6:	e7c0      	b.n	25c2a <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   25ca8:	f06f 0703 	mvn.w	r7, #3
   25cac:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   25cae:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   25cb2:	f85a 7007 	ldr.w	r7, [sl, r7]
   25cb6:	fba7 7c0c 	umull	r7, ip, r7, ip
   25cba:	193c      	adds	r4, r7, r4
   25cbc:	eb5c 0909 	adcs.w	r9, ip, r9
   25cc0:	f04f 0b00 	mov.w	fp, #0
   25cc4:	bf28      	it	cs
   25cc6:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   25cca:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   25ccc:	3601      	adds	r6, #1
   25cce:	e7e2      	b.n	25c96 <uECC_vli_mult+0x8e>

00025cd0 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   25cd0:	2300      	movs	r3, #0
{
   25cd2:	b510      	push	{r4, lr}
		 vli[i] = 0;
   25cd4:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   25cd6:	b25a      	sxtb	r2, r3
   25cd8:	4291      	cmp	r1, r2
   25cda:	dc00      	bgt.n	25cde <uECC_vli_clear+0xe>
}
   25cdc:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   25cde:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   25ce2:	3301      	adds	r3, #1
   25ce4:	e7f7      	b.n	25cd6 <uECC_vli_clear+0x6>

00025ce6 <uECC_vli_isZero>:
{
   25ce6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   25ce8:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   25cea:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   25cec:	b25c      	sxtb	r4, r3
   25cee:	42a1      	cmp	r1, r4
   25cf0:	dc03      	bgt.n	25cfa <uECC_vli_isZero+0x14>
}
   25cf2:	fab2 f082 	clz	r0, r2
   25cf6:	0940      	lsrs	r0, r0, #5
   25cf8:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   25cfa:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   25cfe:	3301      	adds	r3, #1
   25d00:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   25d02:	e7f3      	b.n	25cec <uECC_vli_isZero+0x6>

00025d04 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25d04:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25d06:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   25d08:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   25d0c:	f001 011f 	and.w	r1, r1, #31
   25d10:	fa03 f101 	lsl.w	r1, r3, r1
}
   25d14:	4008      	ands	r0, r1
   25d16:	4770      	bx	lr

00025d18 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25d18:	3901      	subs	r1, #1
{
   25d1a:	b510      	push	{r4, lr}
   25d1c:	4602      	mov	r2, r0
   25d1e:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   25d20:	1d04      	adds	r4, r0, #4
   25d22:	0608      	lsls	r0, r1, #24
   25d24:	b2cb      	uxtb	r3, r1
   25d26:	d404      	bmi.n	25d32 <uECC_vli_numBits+0x1a>
   25d28:	3901      	subs	r1, #1
   25d2a:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   25d2e:	2800      	cmp	r0, #0
   25d30:	d0f7      	beq.n	25d22 <uECC_vli_numBits+0xa>
	return (i + 1);
   25d32:	3301      	adds	r3, #1
   25d34:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   25d36:	b150      	cbz	r0, 25d4e <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   25d38:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   25d3c:	3b01      	subs	r3, #1
   25d3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   25d42:	2300      	movs	r3, #0
   25d44:	b922      	cbnz	r2, 25d50 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   25d46:	3801      	subs	r0, #1
   25d48:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   25d4c:	b200      	sxth	r0, r0
}
   25d4e:	bd10      	pop	{r4, pc}
		digit >>= 1;
   25d50:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   25d52:	3301      	adds	r3, #1
   25d54:	e7f6      	b.n	25d44 <uECC_vli_numBits+0x2c>

00025d56 <uECC_vli_set>:
{
   25d56:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   25d58:	2300      	movs	r3, #0
   25d5a:	b25c      	sxtb	r4, r3
   25d5c:	42a2      	cmp	r2, r4
   25d5e:	dc00      	bgt.n	25d62 <uECC_vli_set+0xc>
}
   25d60:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   25d62:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   25d66:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   25d6a:	3301      	adds	r3, #1
   25d6c:	e7f5      	b.n	25d5a <uECC_vli_set+0x4>

00025d6e <uECC_vli_cmp_unsafe>:
{
   25d6e:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   25d70:	3a01      	subs	r2, #1
   25d72:	b252      	sxtb	r2, r2
   25d74:	0613      	lsls	r3, r2, #24
   25d76:	d501      	bpl.n	25d7c <uECC_vli_cmp_unsafe+0xe>
	return 0;
   25d78:	2000      	movs	r0, #0
}
   25d7a:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   25d7c:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   25d80:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   25d84:	429c      	cmp	r4, r3
   25d86:	d805      	bhi.n	25d94 <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   25d88:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   25d8c:	d2f2      	bcs.n	25d74 <uECC_vli_cmp_unsafe+0x6>
			return -1;
   25d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25d92:	e7f2      	b.n	25d7a <uECC_vli_cmp_unsafe+0xc>
			return 1;
   25d94:	2001      	movs	r0, #1
   25d96:	e7f0      	b.n	25d7a <uECC_vli_cmp_unsafe+0xc>

00025d98 <uECC_vli_equal>:
{
   25d98:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   25d9a:	3a01      	subs	r2, #1
   25d9c:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   25d9e:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   25da0:	0614      	lsls	r4, r2, #24
   25da2:	d503      	bpl.n	25dac <uECC_vli_equal+0x14>
}
   25da4:	1e18      	subs	r0, r3, #0
   25da6:	bf18      	it	ne
   25da8:	2001      	movne	r0, #1
   25daa:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   25dac:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   25db0:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   25db4:	406c      	eors	r4, r5
   25db6:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   25db8:	3a01      	subs	r2, #1
   25dba:	e7f1      	b.n	25da0 <uECC_vli_equal+0x8>

00025dbc <uECC_vli_sub>:
{
   25dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   25dbe:	2400      	movs	r4, #0
{
   25dc0:	4606      	mov	r6, r0
   25dc2:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   25dc4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   25dc6:	b265      	sxtb	r5, r4
   25dc8:	4565      	cmp	r5, ip
   25dca:	db00      	blt.n	25dce <uECC_vli_sub+0x12>
}
   25dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   25dce:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   25dd2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   25dd6:	1a3d      	subs	r5, r7, r0
   25dd8:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   25dda:	42af      	cmp	r7, r5
   25ddc:	f000 0001 	and.w	r0, r0, #1
   25de0:	bf18      	it	ne
   25de2:	2000      	movne	r0, #0
		result[i] = diff;
   25de4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   25de8:	bf38      	it	cc
   25dea:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   25dee:	3401      	adds	r4, #1
   25df0:	e7e9      	b.n	25dc6 <uECC_vli_sub+0xa>

00025df2 <uECC_vli_modAdd>:
{
   25df2:	b570      	push	{r4, r5, r6, lr}
   25df4:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25df8:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25dfa:	4633      	mov	r3, r6
{
   25dfc:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   25dfe:	f7ff fec0 	bl	25b82 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   25e02:	b930      	cbnz	r0, 25e12 <uECC_vli_modAdd+0x20>
   25e04:	4632      	mov	r2, r6
   25e06:	4621      	mov	r1, r4
   25e08:	4628      	mov	r0, r5
   25e0a:	f7ff ffb0 	bl	25d6e <uECC_vli_cmp_unsafe>
   25e0e:	2801      	cmp	r0, #1
   25e10:	d007      	beq.n	25e22 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   25e12:	4633      	mov	r3, r6
   25e14:	462a      	mov	r2, r5
   25e16:	4621      	mov	r1, r4
   25e18:	4620      	mov	r0, r4
}
   25e1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   25e1e:	f7ff bfcd 	b.w	25dbc <uECC_vli_sub>
}
   25e22:	bd70      	pop	{r4, r5, r6, pc}

00025e24 <uECC_vli_modSub>:
{
   25e24:	b570      	push	{r4, r5, r6, lr}
   25e26:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   25e2a:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25e2c:	4633      	mov	r3, r6
{
   25e2e:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   25e30:	f7ff ffc4 	bl	25dbc <uECC_vli_sub>
	if (l_borrow) {
   25e34:	b138      	cbz	r0, 25e46 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   25e36:	4633      	mov	r3, r6
   25e38:	462a      	mov	r2, r5
   25e3a:	4621      	mov	r1, r4
   25e3c:	4620      	mov	r0, r4
}
   25e3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   25e42:	f7ff be9e 	b.w	25b82 <uECC_vli_add>
}
   25e46:	bd70      	pop	{r4, r5, r6, pc}

00025e48 <uECC_vli_mmod>:
{
   25e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e4c:	b0a5      	sub	sp, #148	; 0x94
   25e4e:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   25e50:	ab14      	add	r3, sp, #80	; 0x50
   25e52:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   25e56:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   25e58:	4629      	mov	r1, r5
   25e5a:	4610      	mov	r0, r2
{
   25e5c:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   25e5e:	f7ff ff5b 	bl	25d18 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   25e62:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   25e66:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25e68:	2c00      	cmp	r4, #0
   25e6a:	4621      	mov	r1, r4
   25e6c:	bfb8      	it	lt
   25e6e:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25e72:	4263      	negs	r3, r4
   25e74:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   25e78:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25e7c:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   25e80:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   25e82:	bf58      	it	pl
   25e84:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   25e86:	f7ff ff23 	bl	25cd0 <uECC_vli_clear>
	if (bit_shift > 0) {
   25e8a:	2e00      	cmp	r6, #0
   25e8c:	b208      	sxth	r0, r1
   25e8e:	dd2b      	ble.n	25ee8 <uECC_vli_mmod+0xa0>
   25e90:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   25e92:	2200      	movs	r2, #0
   25e94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25e98:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25e9c:	4613      	mov	r3, r2
   25e9e:	429d      	cmp	r5, r3
   25ea0:	d817      	bhi.n	25ed2 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   25ea2:	006b      	lsls	r3, r5, #1
   25ea4:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25ea6:	ab04      	add	r3, sp, #16
   25ea8:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25eac:	1e6f      	subs	r7, r5, #1
   25eae:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25eb0:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25eb2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   25eb6:	2c00      	cmp	r4, #0
   25eb8:	da54      	bge.n	25f64 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   25eba:	ab24      	add	r3, sp, #144	; 0x90
   25ebc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   25ec0:	462a      	mov	r2, r5
   25ec2:	f856 1c88 	ldr.w	r1, [r6, #-136]
   25ec6:	4640      	mov	r0, r8
   25ec8:	f7ff ff45 	bl	25d56 <uECC_vli_set>
}
   25ecc:	b025      	add	sp, #148	; 0x94
   25ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   25ed2:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   25ed6:	fa0c f106 	lsl.w	r1, ip, r6
   25eda:	430a      	orrs	r2, r1
   25edc:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25ee0:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   25ee2:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   25ee6:	e7da      	b.n	25e9e <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   25ee8:	ab04      	add	r3, sp, #16
   25eea:	462a      	mov	r2, r5
   25eec:	4639      	mov	r1, r7
   25eee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   25ef2:	f7ff ff30 	bl	25d56 <uECC_vli_set>
   25ef6:	e7d4      	b.n	25ea2 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25ef8:	fa0f fe82 	sxth.w	lr, r2
   25efc:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   25f00:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   25f04:	ab24      	add	r3, sp, #144	; 0x90
   25f06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   25f0a:	3001      	adds	r0, #1
   25f0c:	f852 3c80 	ldr.w	r3, [r2, #-128]
   25f10:	440b      	add	r3, r1
   25f12:	ebbb 0303 	subs.w	r3, fp, r3
   25f16:	bf34      	ite	cc
   25f18:	2201      	movcc	r2, #1
   25f1a:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   25f1c:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   25f1e:	bf18      	it	ne
   25f20:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   25f22:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   25f26:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   25f2a:	9b01      	ldr	r3, [sp, #4]
   25f2c:	b242      	sxtb	r2, r0
   25f2e:	429a      	cmp	r2, r3
   25f30:	dbe2      	blt.n	25ef8 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   25f32:	1a73      	subs	r3, r6, r1
   25f34:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25f36:	4629      	mov	r1, r5
   25f38:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   25f3a:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   25f3c:	f7ff fe3b 	bl	25bb6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25f40:	ab24      	add	r3, sp, #144	; 0x90
   25f42:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25f46:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   25f48:	f853 2c80 	ldr.w	r2, [r3, #-128]
   25f4c:	f857 3c80 	ldr.w	r3, [r7, #-128]
   25f50:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   25f54:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   25f58:	4648      	mov	r0, r9
   25f5a:	3c01      	subs	r4, #1
   25f5c:	f7ff fe2b 	bl	25bb6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   25f60:	b224      	sxth	r4, r4
   25f62:	e7a8      	b.n	25eb6 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25f64:	ab24      	add	r3, sp, #144	; 0x90
   25f66:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   25f68:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   25f6c:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   25f6e:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   25f72:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   25f76:	e7d8      	b.n	25f2a <uECC_vli_mmod+0xe2>

00025f78 <uECC_vli_modMult_fast>:
{
   25f78:	b530      	push	{r4, r5, lr}
   25f7a:	461c      	mov	r4, r3
   25f7c:	b091      	sub	sp, #68	; 0x44
   25f7e:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   25f80:	f993 3000 	ldrsb.w	r3, [r3]
   25f84:	4668      	mov	r0, sp
   25f86:	f7ff fe3f 	bl	25c08 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   25f8a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   25f8e:	4669      	mov	r1, sp
   25f90:	4628      	mov	r0, r5
   25f92:	4798      	blx	r3
}
   25f94:	b011      	add	sp, #68	; 0x44
   25f96:	bd30      	pop	{r4, r5, pc}

00025f98 <uECC_vli_modSquare_fast>:
{
   25f98:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   25f9a:	460a      	mov	r2, r1
   25f9c:	f7ff bfec 	b.w	25f78 <uECC_vli_modMult_fast>

00025fa0 <double_jacobian_default>:
{
   25fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   25fa4:	f993 6000 	ldrsb.w	r6, [r3]
{
   25fa8:	b092      	sub	sp, #72	; 0x48
   25faa:	4604      	mov	r4, r0
   25fac:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   25fae:	4610      	mov	r0, r2
   25fb0:	4631      	mov	r1, r6
{
   25fb2:	4615      	mov	r5, r2
   25fb4:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   25fb6:	f7ff fe96 	bl	25ce6 <uECC_vli_isZero>
   25fba:	2800      	cmp	r0, #0
   25fbc:	f040 8091 	bne.w	260e2 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   25fc0:	463a      	mov	r2, r7
   25fc2:	4649      	mov	r1, r9
   25fc4:	a802      	add	r0, sp, #8
   25fc6:	f7ff ffe7 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   25fca:	463b      	mov	r3, r7
   25fcc:	aa02      	add	r2, sp, #8
   25fce:	4621      	mov	r1, r4
   25fd0:	a80a      	add	r0, sp, #40	; 0x28
   25fd2:	f7ff ffd1 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   25fd6:	a902      	add	r1, sp, #8
   25fd8:	4608      	mov	r0, r1
   25fda:	463a      	mov	r2, r7
   25fdc:	f7ff ffdc 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   25fe0:	463b      	mov	r3, r7
   25fe2:	462a      	mov	r2, r5
   25fe4:	4649      	mov	r1, r9
   25fe6:	4648      	mov	r0, r9
   25fe8:	f7ff ffc6 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25fec:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   25ff0:	463a      	mov	r2, r7
   25ff2:	4629      	mov	r1, r5
   25ff4:	4628      	mov	r0, r5
   25ff6:	f7ff ffcf 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   25ffa:	4643      	mov	r3, r8
   25ffc:	462a      	mov	r2, r5
   25ffe:	4621      	mov	r1, r4
   26000:	4620      	mov	r0, r4
   26002:	9600      	str	r6, [sp, #0]
   26004:	f7ff fef5 	bl	25df2 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   26008:	4643      	mov	r3, r8
   2600a:	462a      	mov	r2, r5
   2600c:	4629      	mov	r1, r5
   2600e:	4628      	mov	r0, r5
   26010:	9600      	str	r6, [sp, #0]
   26012:	f7ff feee 	bl	25df2 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   26016:	4643      	mov	r3, r8
   26018:	462a      	mov	r2, r5
   2601a:	4621      	mov	r1, r4
   2601c:	4628      	mov	r0, r5
   2601e:	9600      	str	r6, [sp, #0]
   26020:	f7ff ff00 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   26024:	463b      	mov	r3, r7
   26026:	462a      	mov	r2, r5
   26028:	4621      	mov	r1, r4
   2602a:	4620      	mov	r0, r4
   2602c:	f7ff ffa4 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   26030:	4643      	mov	r3, r8
   26032:	4622      	mov	r2, r4
   26034:	4621      	mov	r1, r4
   26036:	4628      	mov	r0, r5
   26038:	9600      	str	r6, [sp, #0]
   2603a:	f7ff feda 	bl	25df2 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   2603e:	4643      	mov	r3, r8
   26040:	9600      	str	r6, [sp, #0]
   26042:	462a      	mov	r2, r5
   26044:	4621      	mov	r1, r4
   26046:	4620      	mov	r0, r4
   26048:	f7ff fed3 	bl	25df2 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2604c:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   2604e:	07db      	lsls	r3, r3, #31
   26050:	d54a      	bpl.n	260e8 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   26052:	4633      	mov	r3, r6
   26054:	4642      	mov	r2, r8
   26056:	4621      	mov	r1, r4
   26058:	4620      	mov	r0, r4
   2605a:	f7ff fd92 	bl	25b82 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   2605e:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   26060:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   26062:	4620      	mov	r0, r4
   26064:	f7ff fda7 	bl	25bb6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   26068:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   2606c:	3b01      	subs	r3, #1
   2606e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   26072:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   26076:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   2607a:	463a      	mov	r2, r7
   2607c:	4621      	mov	r1, r4
   2607e:	4628      	mov	r0, r5
   26080:	f7ff ff8a 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   26084:	4643      	mov	r3, r8
   26086:	aa0a      	add	r2, sp, #40	; 0x28
   26088:	4629      	mov	r1, r5
   2608a:	4628      	mov	r0, r5
   2608c:	9600      	str	r6, [sp, #0]
   2608e:	f7ff fec9 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   26092:	4643      	mov	r3, r8
   26094:	aa0a      	add	r2, sp, #40	; 0x28
   26096:	4629      	mov	r1, r5
   26098:	4628      	mov	r0, r5
   2609a:	9600      	str	r6, [sp, #0]
   2609c:	f7ff fec2 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   260a0:	a90a      	add	r1, sp, #40	; 0x28
   260a2:	4608      	mov	r0, r1
   260a4:	4643      	mov	r3, r8
   260a6:	462a      	mov	r2, r5
   260a8:	9600      	str	r6, [sp, #0]
   260aa:	f7ff febb 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   260ae:	463b      	mov	r3, r7
   260b0:	aa0a      	add	r2, sp, #40	; 0x28
   260b2:	4621      	mov	r1, r4
   260b4:	4620      	mov	r0, r4
   260b6:	f7ff ff5f 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   260ba:	aa02      	add	r2, sp, #8
   260bc:	4643      	mov	r3, r8
   260be:	4610      	mov	r0, r2
   260c0:	4621      	mov	r1, r4
   260c2:	9600      	str	r6, [sp, #0]
   260c4:	f7ff feae 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   260c8:	4632      	mov	r2, r6
   260ca:	4629      	mov	r1, r5
   260cc:	4620      	mov	r0, r4
   260ce:	f7ff fe42 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   260d2:	4649      	mov	r1, r9
   260d4:	4628      	mov	r0, r5
   260d6:	f7ff fe3e 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   260da:	a902      	add	r1, sp, #8
   260dc:	4648      	mov	r0, r9
   260de:	f7ff fe3a 	bl	25d56 <uECC_vli_set>
}
   260e2:	b012      	add	sp, #72	; 0x48
   260e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   260e8:	4631      	mov	r1, r6
   260ea:	4620      	mov	r0, r4
   260ec:	f7ff fd63 	bl	25bb6 <uECC_vli_rshift1>
   260f0:	e7c3      	b.n	2607a <double_jacobian_default+0xda>

000260f2 <x_side_default>:
{
   260f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   260f6:	4615      	mov	r5, r2
   260f8:	b08a      	sub	sp, #40	; 0x28
   260fa:	4604      	mov	r4, r0
   260fc:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   260fe:	221c      	movs	r2, #28
   26100:	2100      	movs	r1, #0
   26102:	a803      	add	r0, sp, #12
   26104:	f004 fcca 	bl	2aa9c <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   26108:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   2610a:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2610e:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   26110:	462a      	mov	r2, r5
   26112:	4631      	mov	r1, r6
   26114:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   26116:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   26118:	f7ff ff3e 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2611c:	463b      	mov	r3, r7
   2611e:	aa02      	add	r2, sp, #8
   26120:	4621      	mov	r1, r4
   26122:	4620      	mov	r0, r4
   26124:	f8cd 8000 	str.w	r8, [sp]
   26128:	f7ff fe7c 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   2612c:	462b      	mov	r3, r5
   2612e:	4632      	mov	r2, r6
   26130:	4621      	mov	r1, r4
   26132:	4620      	mov	r0, r4
   26134:	f7ff ff20 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   26138:	f8cd 8000 	str.w	r8, [sp]
   2613c:	463b      	mov	r3, r7
   2613e:	f105 0284 	add.w	r2, r5, #132	; 0x84
   26142:	4621      	mov	r1, r4
   26144:	4620      	mov	r0, r4
   26146:	f7ff fe54 	bl	25df2 <uECC_vli_modAdd>
}
   2614a:	b00a      	add	sp, #40	; 0x28
   2614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00026150 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   26150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26154:	b09a      	sub	sp, #104	; 0x68
   26156:	4616      	mov	r6, r2
   26158:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   2615c:	4644      	mov	r4, r8
{
   2615e:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   26160:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   26164:	9500      	str	r5, [sp, #0]
{
   26166:	4607      	mov	r7, r0
   26168:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2616a:	4623      	mov	r3, r4
   2616c:	4602      	mov	r2, r0
   2616e:	4631      	mov	r1, r6
   26170:	a802      	add	r0, sp, #8
   26172:	f7ff fe57 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   26176:	a902      	add	r1, sp, #8
   26178:	4642      	mov	r2, r8
   2617a:	4608      	mov	r0, r1
   2617c:	f7ff ff0c 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   26180:	4643      	mov	r3, r8
   26182:	aa02      	add	r2, sp, #8
   26184:	4639      	mov	r1, r7
   26186:	4638      	mov	r0, r7
   26188:	f7ff fef6 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2618c:	4643      	mov	r3, r8
   2618e:	aa02      	add	r2, sp, #8
   26190:	4631      	mov	r1, r6
   26192:	4630      	mov	r0, r6
   26194:	f7ff fef0 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   26198:	4623      	mov	r3, r4
   2619a:	4652      	mov	r2, sl
   2619c:	4649      	mov	r1, r9
   2619e:	a802      	add	r0, sp, #8
   261a0:	9500      	str	r5, [sp, #0]
   261a2:	f7ff fe26 	bl	25df2 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   261a6:	4623      	mov	r3, r4
   261a8:	4652      	mov	r2, sl
   261aa:	4649      	mov	r1, r9
   261ac:	4648      	mov	r0, r9
   261ae:	9500      	str	r5, [sp, #0]
   261b0:	f7ff fe38 	bl	25e24 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   261b4:	4623      	mov	r3, r4
   261b6:	463a      	mov	r2, r7
   261b8:	4631      	mov	r1, r6
   261ba:	a80a      	add	r0, sp, #40	; 0x28
   261bc:	9500      	str	r5, [sp, #0]
   261be:	f7ff fe31 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   261c2:	4643      	mov	r3, r8
   261c4:	aa0a      	add	r2, sp, #40	; 0x28
   261c6:	4651      	mov	r1, sl
   261c8:	4650      	mov	r0, sl
   261ca:	f7ff fed5 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   261ce:	4623      	mov	r3, r4
   261d0:	4632      	mov	r2, r6
   261d2:	4639      	mov	r1, r7
   261d4:	a80a      	add	r0, sp, #40	; 0x28
   261d6:	9500      	str	r5, [sp, #0]
   261d8:	f7ff fe0b 	bl	25df2 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   261dc:	4642      	mov	r2, r8
   261de:	4649      	mov	r1, r9
   261e0:	4630      	mov	r0, r6
   261e2:	f7ff fed9 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   261e6:	4623      	mov	r3, r4
   261e8:	aa0a      	add	r2, sp, #40	; 0x28
   261ea:	4631      	mov	r1, r6
   261ec:	4630      	mov	r0, r6
   261ee:	9500      	str	r5, [sp, #0]
   261f0:	f7ff fe18 	bl	25e24 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   261f4:	4623      	mov	r3, r4
   261f6:	4632      	mov	r2, r6
   261f8:	4639      	mov	r1, r7
   261fa:	a812      	add	r0, sp, #72	; 0x48
   261fc:	9500      	str	r5, [sp, #0]
   261fe:	f7ff fe11 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   26202:	4643      	mov	r3, r8
   26204:	aa12      	add	r2, sp, #72	; 0x48
   26206:	4649      	mov	r1, r9
   26208:	4648      	mov	r0, r9
   2620a:	f7ff feb5 	bl	25f78 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   2620e:	4623      	mov	r3, r4
   26210:	4652      	mov	r2, sl
   26212:	4649      	mov	r1, r9
   26214:	4648      	mov	r0, r9
   26216:	9500      	str	r5, [sp, #0]
   26218:	f7ff fe04 	bl	25e24 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   2621c:	4642      	mov	r2, r8
   2621e:	a902      	add	r1, sp, #8
   26220:	a812      	add	r0, sp, #72	; 0x48
   26222:	f7ff feb9 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   26226:	a912      	add	r1, sp, #72	; 0x48
   26228:	4623      	mov	r3, r4
   2622a:	aa0a      	add	r2, sp, #40	; 0x28
   2622c:	4608      	mov	r0, r1
   2622e:	9500      	str	r5, [sp, #0]
   26230:	f7ff fdf8 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   26234:	4623      	mov	r3, r4
   26236:	463a      	mov	r2, r7
   26238:	a912      	add	r1, sp, #72	; 0x48
   2623a:	a80a      	add	r0, sp, #40	; 0x28
   2623c:	9500      	str	r5, [sp, #0]
   2623e:	f7ff fdf1 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   26242:	a90a      	add	r1, sp, #40	; 0x28
   26244:	4643      	mov	r3, r8
   26246:	aa02      	add	r2, sp, #8
   26248:	4608      	mov	r0, r1
   2624a:	f7ff fe95 	bl	25f78 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   2624e:	4623      	mov	r3, r4
   26250:	4652      	mov	r2, sl
   26252:	a90a      	add	r1, sp, #40	; 0x28
   26254:	4650      	mov	r0, sl
   26256:	9500      	str	r5, [sp, #0]
   26258:	f7ff fde4 	bl	25e24 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   2625c:	462a      	mov	r2, r5
   2625e:	a912      	add	r1, sp, #72	; 0x48
   26260:	4638      	mov	r0, r7
   26262:	f7ff fd78 	bl	25d56 <uECC_vli_set>
}
   26266:	b01a      	add	sp, #104	; 0x68
   26268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002626c <uECC_vli_modInv>:
{
   2626c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2626e:	460f      	mov	r7, r1
   26270:	b0a1      	sub	sp, #132	; 0x84
   26272:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   26274:	4619      	mov	r1, r3
   26276:	4638      	mov	r0, r7
{
   26278:	4615      	mov	r5, r2
   2627a:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   2627c:	f7ff fd33 	bl	25ce6 <uECC_vli_isZero>
   26280:	b128      	cbz	r0, 2628e <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   26282:	4630      	mov	r0, r6
}
   26284:	b021      	add	sp, #132	; 0x84
   26286:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   2628a:	f7ff bd21 	b.w	25cd0 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   2628e:	4622      	mov	r2, r4
   26290:	4639      	mov	r1, r7
   26292:	4668      	mov	r0, sp
   26294:	f7ff fd5f 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   26298:	4629      	mov	r1, r5
   2629a:	a808      	add	r0, sp, #32
   2629c:	f7ff fd5b 	bl	25d56 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   262a0:	a810      	add	r0, sp, #64	; 0x40
   262a2:	4621      	mov	r1, r4
   262a4:	f7ff fd14 	bl	25cd0 <uECC_vli_clear>
	u[0] = 1;
   262a8:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   262aa:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   262ac:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   262ae:	f7ff fd0f 	bl	25cd0 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   262b2:	4622      	mov	r2, r4
   262b4:	a908      	add	r1, sp, #32
   262b6:	4668      	mov	r0, sp
   262b8:	f7ff fd59 	bl	25d6e <uECC_vli_cmp_unsafe>
   262bc:	b930      	cbnz	r0, 262cc <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   262be:	4622      	mov	r2, r4
   262c0:	a910      	add	r1, sp, #64	; 0x40
   262c2:	4630      	mov	r0, r6
   262c4:	f7ff fd47 	bl	25d56 <uECC_vli_set>
}
   262c8:	b021      	add	sp, #132	; 0x84
   262ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   262cc:	9b00      	ldr	r3, [sp, #0]
   262ce:	07da      	lsls	r2, r3, #31
   262d0:	d409      	bmi.n	262e6 <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   262d2:	4621      	mov	r1, r4
   262d4:	4668      	mov	r0, sp
   262d6:	f7ff fc6e 	bl	25bb6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   262da:	4622      	mov	r2, r4
   262dc:	4629      	mov	r1, r5
   262de:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   262e0:	f7ff fc76 	bl	25bd0 <vli_modInv_update>
   262e4:	e7e5      	b.n	262b2 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   262e6:	9b08      	ldr	r3, [sp, #32]
   262e8:	07db      	lsls	r3, r3, #31
   262ea:	d407      	bmi.n	262fc <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   262ec:	4621      	mov	r1, r4
   262ee:	a808      	add	r0, sp, #32
   262f0:	f7ff fc61 	bl	25bb6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   262f4:	4622      	mov	r2, r4
   262f6:	4629      	mov	r1, r5
   262f8:	a818      	add	r0, sp, #96	; 0x60
   262fa:	e7f1      	b.n	262e0 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   262fc:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   262fe:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   26300:	dd1c      	ble.n	2633c <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   26302:	aa08      	add	r2, sp, #32
   26304:	4669      	mov	r1, sp
   26306:	4668      	mov	r0, sp
   26308:	f7ff fd58 	bl	25dbc <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   2630c:	4621      	mov	r1, r4
   2630e:	4668      	mov	r0, sp
   26310:	f7ff fc51 	bl	25bb6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   26314:	4622      	mov	r2, r4
   26316:	a918      	add	r1, sp, #96	; 0x60
   26318:	a810      	add	r0, sp, #64	; 0x40
   2631a:	f7ff fd28 	bl	25d6e <uECC_vli_cmp_unsafe>
   2631e:	2800      	cmp	r0, #0
   26320:	da05      	bge.n	2632e <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   26322:	a910      	add	r1, sp, #64	; 0x40
   26324:	4623      	mov	r3, r4
   26326:	462a      	mov	r2, r5
   26328:	4608      	mov	r0, r1
   2632a:	f7ff fc2a 	bl	25b82 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   2632e:	a910      	add	r1, sp, #64	; 0x40
   26330:	4623      	mov	r3, r4
   26332:	aa18      	add	r2, sp, #96	; 0x60
   26334:	4608      	mov	r0, r1
   26336:	f7ff fd41 	bl	25dbc <uECC_vli_sub>
   2633a:	e7ce      	b.n	262da <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   2633c:	466a      	mov	r2, sp
   2633e:	a808      	add	r0, sp, #32
   26340:	f7ff fd3c 	bl	25dbc <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   26344:	4621      	mov	r1, r4
   26346:	a808      	add	r0, sp, #32
   26348:	f7ff fc35 	bl	25bb6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   2634c:	4622      	mov	r2, r4
   2634e:	a910      	add	r1, sp, #64	; 0x40
   26350:	a818      	add	r0, sp, #96	; 0x60
   26352:	f7ff fd0c 	bl	25d6e <uECC_vli_cmp_unsafe>
   26356:	2800      	cmp	r0, #0
   26358:	da05      	bge.n	26366 <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   2635a:	a918      	add	r1, sp, #96	; 0x60
   2635c:	4623      	mov	r3, r4
   2635e:	462a      	mov	r2, r5
   26360:	4608      	mov	r0, r1
   26362:	f7ff fc0e 	bl	25b82 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   26366:	a918      	add	r1, sp, #96	; 0x60
   26368:	4623      	mov	r3, r4
   2636a:	aa10      	add	r2, sp, #64	; 0x40
   2636c:	4608      	mov	r0, r1
   2636e:	f7ff fd25 	bl	25dbc <uECC_vli_sub>
   26372:	e7bf      	b.n	262f4 <uECC_vli_modInv+0x88>

00026374 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   26374:	7809      	ldrb	r1, [r1, #0]
   26376:	0049      	lsls	r1, r1, #1
   26378:	b249      	sxtb	r1, r1
   2637a:	f7ff bcb4 	b.w	25ce6 <uECC_vli_isZero>

0002637e <apply_z>:
{
   2637e:	b5f0      	push	{r4, r5, r6, r7, lr}
   26380:	4615      	mov	r5, r2
   26382:	b089      	sub	sp, #36	; 0x24
   26384:	461c      	mov	r4, r3
   26386:	4607      	mov	r7, r0
   26388:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   2638a:	461a      	mov	r2, r3
   2638c:	4629      	mov	r1, r5
   2638e:	4668      	mov	r0, sp
   26390:	f7ff fe02 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   26394:	4623      	mov	r3, r4
   26396:	466a      	mov	r2, sp
   26398:	4639      	mov	r1, r7
   2639a:	4638      	mov	r0, r7
   2639c:	f7ff fdec 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   263a0:	4623      	mov	r3, r4
   263a2:	462a      	mov	r2, r5
   263a4:	4669      	mov	r1, sp
   263a6:	4668      	mov	r0, sp
   263a8:	f7ff fde6 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   263ac:	4623      	mov	r3, r4
   263ae:	466a      	mov	r2, sp
   263b0:	4631      	mov	r1, r6
   263b2:	4630      	mov	r0, r6
   263b4:	f7ff fde0 	bl	25f78 <uECC_vli_modMult_fast>
}
   263b8:	b009      	add	sp, #36	; 0x24
   263ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000263bc <XYcZ_add>:
{
   263bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   263c0:	b08a      	sub	sp, #40	; 0x28
   263c2:	4614      	mov	r4, r2
   263c4:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   263c8:	4655      	mov	r5, sl
{
   263ca:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   263cc:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   263d0:	9600      	str	r6, [sp, #0]
{
   263d2:	4680      	mov	r8, r0
   263d4:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   263d6:	462b      	mov	r3, r5
   263d8:	4602      	mov	r2, r0
   263da:	4621      	mov	r1, r4
   263dc:	a802      	add	r0, sp, #8
   263de:	f7ff fd21 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   263e2:	a902      	add	r1, sp, #8
   263e4:	4652      	mov	r2, sl
   263e6:	4608      	mov	r0, r1
   263e8:	f7ff fdd6 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   263ec:	4653      	mov	r3, sl
   263ee:	aa02      	add	r2, sp, #8
   263f0:	4641      	mov	r1, r8
   263f2:	4640      	mov	r0, r8
   263f4:	f7ff fdc0 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   263f8:	4653      	mov	r3, sl
   263fa:	aa02      	add	r2, sp, #8
   263fc:	4621      	mov	r1, r4
   263fe:	4620      	mov	r0, r4
   26400:	f7ff fdba 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   26404:	462b      	mov	r3, r5
   26406:	464a      	mov	r2, r9
   26408:	4639      	mov	r1, r7
   2640a:	4638      	mov	r0, r7
   2640c:	9600      	str	r6, [sp, #0]
   2640e:	f7ff fd09 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   26412:	4652      	mov	r2, sl
   26414:	4639      	mov	r1, r7
   26416:	a802      	add	r0, sp, #8
   26418:	f7ff fdbe 	bl	25f98 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   2641c:	a902      	add	r1, sp, #8
   2641e:	462b      	mov	r3, r5
   26420:	4642      	mov	r2, r8
   26422:	4608      	mov	r0, r1
   26424:	9600      	str	r6, [sp, #0]
   26426:	f7ff fcfd 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2642a:	a902      	add	r1, sp, #8
   2642c:	462b      	mov	r3, r5
   2642e:	4622      	mov	r2, r4
   26430:	4608      	mov	r0, r1
   26432:	9600      	str	r6, [sp, #0]
   26434:	f7ff fcf6 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   26438:	462b      	mov	r3, r5
   2643a:	4642      	mov	r2, r8
   2643c:	4621      	mov	r1, r4
   2643e:	4620      	mov	r0, r4
   26440:	9600      	str	r6, [sp, #0]
   26442:	f7ff fcef 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   26446:	4653      	mov	r3, sl
   26448:	4622      	mov	r2, r4
   2644a:	4649      	mov	r1, r9
   2644c:	4648      	mov	r0, r9
   2644e:	f7ff fd93 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   26452:	462b      	mov	r3, r5
   26454:	aa02      	add	r2, sp, #8
   26456:	4641      	mov	r1, r8
   26458:	4620      	mov	r0, r4
   2645a:	9600      	str	r6, [sp, #0]
   2645c:	f7ff fce2 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   26460:	4653      	mov	r3, sl
   26462:	4622      	mov	r2, r4
   26464:	4639      	mov	r1, r7
   26466:	4638      	mov	r0, r7
   26468:	f7ff fd86 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   2646c:	462b      	mov	r3, r5
   2646e:	464a      	mov	r2, r9
   26470:	4639      	mov	r1, r7
   26472:	4638      	mov	r0, r7
   26474:	9600      	str	r6, [sp, #0]
   26476:	f7ff fcd5 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   2647a:	4632      	mov	r2, r6
   2647c:	a902      	add	r1, sp, #8
   2647e:	4620      	mov	r0, r4
   26480:	f7ff fc69 	bl	25d56 <uECC_vli_set>
}
   26484:	b00a      	add	sp, #40	; 0x28
   26486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002648a <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   2648a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2648e:	b0b1      	sub	sp, #196	; 0xc4
   26490:	e9cd 0103 	strd	r0, r1, [sp, #12]
   26494:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   26496:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   2649a:	a818      	add	r0, sp, #96	; 0x60
{
   2649c:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   2649e:	463a      	mov	r2, r7
{
   264a0:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   264a2:	f7ff fc58 	bl	25d56 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   264a6:	00bb      	lsls	r3, r7, #2
   264a8:	9305      	str	r3, [sp, #20]
   264aa:	9b04      	ldr	r3, [sp, #16]
   264ac:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   264b0:	4619      	mov	r1, r3
   264b2:	a828      	add	r0, sp, #160	; 0xa0
   264b4:	9302      	str	r3, [sp, #8]
   264b6:	f7ff fc4e 	bl	25d56 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   264ba:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   264be:	2d00      	cmp	r5, #0
   264c0:	f000 8086 	beq.w	265d0 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   264c4:	4632      	mov	r2, r6
   264c6:	4629      	mov	r1, r5
   264c8:	a808      	add	r0, sp, #32
   264ca:	f7ff fc44 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   264ce:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   264d2:	4632      	mov	r2, r6
   264d4:	a918      	add	r1, sp, #96	; 0x60
   264d6:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   264d8:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   264dc:	f7ff fc3b 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   264e0:	a928      	add	r1, sp, #160	; 0xa0
   264e2:	4648      	mov	r0, r9
   264e4:	f7ff fc37 	bl	25d56 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   264e8:	4623      	mov	r3, r4
   264ea:	aa08      	add	r2, sp, #32
   264ec:	a818      	add	r0, sp, #96	; 0x60
   264ee:	f7ff ff46 	bl	2637e <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   264f2:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   264f6:	4623      	mov	r3, r4
   264f8:	aa08      	add	r2, sp, #32
   264fa:	a928      	add	r1, sp, #160	; 0xa0
   264fc:	a818      	add	r0, sp, #96	; 0x60
   264fe:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   26500:	4623      	mov	r3, r4
   26502:	aa08      	add	r2, sp, #32
   26504:	4649      	mov	r1, r9
   26506:	4640      	mov	r0, r8
   26508:	f7ff ff39 	bl	2637e <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   2650c:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   26510:	3d02      	subs	r5, #2
   26512:	b22d      	sxth	r5, r5
   26514:	2d00      	cmp	r5, #0
   26516:	dc62      	bgt.n	265de <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   26518:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2651c:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2651e:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   26522:	ab10      	add	r3, sp, #64	; 0x40
   26524:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   26528:	43ed      	mvns	r5, r5
   2652a:	ab20      	add	r3, sp, #128	; 0x80
   2652c:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   26530:	f005 0501 	and.w	r5, r5, #1
   26534:	ab10      	add	r3, sp, #64	; 0x40
   26536:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   2653a:	ab20      	add	r3, sp, #128	; 0x80
   2653c:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   26540:	462b      	mov	r3, r5
   26542:	464a      	mov	r2, r9
   26544:	4631      	mov	r1, r6
   26546:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   26548:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   2654c:	f7ff fe00 	bl	26150 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   26550:	4653      	mov	r3, sl
   26552:	aa10      	add	r2, sp, #64	; 0x40
   26554:	a918      	add	r1, sp, #96	; 0x60
   26556:	a808      	add	r0, sp, #32
   26558:	9700      	str	r7, [sp, #0]
   2655a:	f7ff fc63 	bl	25e24 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   2655e:	a908      	add	r1, sp, #32
   26560:	4623      	mov	r3, r4
   26562:	4632      	mov	r2, r6
   26564:	4608      	mov	r0, r1
   26566:	f7ff fd07 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   2656a:	a908      	add	r1, sp, #32
   2656c:	9a04      	ldr	r2, [sp, #16]
   2656e:	4623      	mov	r3, r4
   26570:	4608      	mov	r0, r1
   26572:	f7ff fd01 	bl	25f78 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   26576:	a908      	add	r1, sp, #32
   26578:	463b      	mov	r3, r7
   2657a:	4652      	mov	r2, sl
   2657c:	4608      	mov	r0, r1
   2657e:	f7ff fe75 	bl	2626c <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   26582:	a908      	add	r1, sp, #32
   26584:	9a02      	ldr	r2, [sp, #8]
   26586:	4623      	mov	r3, r4
   26588:	4608      	mov	r0, r1
   2658a:	f7ff fcf5 	bl	25f78 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   2658e:	a908      	add	r1, sp, #32
   26590:	4623      	mov	r3, r4
   26592:	4642      	mov	r2, r8
   26594:	4608      	mov	r0, r1
   26596:	f7ff fcef 	bl	25f78 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2659a:	4633      	mov	r3, r6
   2659c:	4642      	mov	r2, r8
   2659e:	4629      	mov	r1, r5
   265a0:	4648      	mov	r0, r9
   265a2:	9400      	str	r4, [sp, #0]
   265a4:	f7ff ff0a 	bl	263bc <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   265a8:	4623      	mov	r3, r4
   265aa:	aa08      	add	r2, sp, #32
   265ac:	a920      	add	r1, sp, #128	; 0x80
   265ae:	a810      	add	r0, sp, #64	; 0x40
   265b0:	f7ff fee5 	bl	2637e <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   265b4:	9803      	ldr	r0, [sp, #12]
   265b6:	463a      	mov	r2, r7
   265b8:	a910      	add	r1, sp, #64	; 0x40
   265ba:	f7ff fbcc 	bl	25d56 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   265be:	9803      	ldr	r0, [sp, #12]
   265c0:	9b05      	ldr	r3, [sp, #20]
   265c2:	a920      	add	r1, sp, #128	; 0x80
   265c4:	4418      	add	r0, r3
   265c6:	f7ff fbc6 	bl	25d56 <uECC_vli_set>
}
   265ca:	b031      	add	sp, #196	; 0xc4
   265cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   265d0:	4631      	mov	r1, r6
   265d2:	a808      	add	r0, sp, #32
   265d4:	f7ff fb7c 	bl	25cd0 <uECC_vli_clear>
		z[0] = 1;
   265d8:	2301      	movs	r3, #1
   265da:	9308      	str	r3, [sp, #32]
   265dc:	e777      	b.n	264ce <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   265de:	4629      	mov	r1, r5
   265e0:	4650      	mov	r0, sl
   265e2:	f7ff fb8f 	bl	25d04 <uECC_vli_testBit>
   265e6:	fab0 f680 	clz	r6, r0
   265ea:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   265ec:	f1c6 0101 	rsb	r1, r6, #1
   265f0:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   265f4:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   265f8:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   265fc:	4633      	mov	r3, r6
   265fe:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   26602:	465a      	mov	r2, fp
   26604:	9400      	str	r4, [sp, #0]
   26606:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2660a:	f7ff fda1 	bl	26150 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   2660e:	9907      	ldr	r1, [sp, #28]
   26610:	9806      	ldr	r0, [sp, #24]
   26612:	9400      	str	r4, [sp, #0]
   26614:	460b      	mov	r3, r1
   26616:	4602      	mov	r2, r0
   26618:	4631      	mov	r1, r6
   2661a:	4658      	mov	r0, fp
   2661c:	f7ff fece 	bl	263bc <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   26620:	3d01      	subs	r5, #1
   26622:	e776      	b.n	26512 <EccPoint_mult+0x88>

00026624 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   26624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   26628:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   2662c:	f119 081f 	adds.w	r8, r9, #31
{
   26630:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   26632:	bf48      	it	mi
   26634:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   26638:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   2663a:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2663e:	3524      	adds	r5, #36	; 0x24
   26640:	4601      	mov	r1, r0
{
   26642:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   26644:	4643      	mov	r3, r8
   26646:	462a      	mov	r2, r5
   26648:	4630      	mov	r0, r6
   2664a:	f7ff fa9a 	bl	25b82 <uECC_vli_add>
   2664e:	4604      	mov	r4, r0
   26650:	b990      	cbnz	r0, 26678 <regularize_k+0x54>
   26652:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   26656:	da06      	bge.n	26666 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   26658:	4649      	mov	r1, r9
   2665a:	4630      	mov	r0, r6
   2665c:	f7ff fb52 	bl	25d04 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   26660:	1e04      	subs	r4, r0, #0
   26662:	bf18      	it	ne
   26664:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   26666:	4643      	mov	r3, r8
   26668:	462a      	mov	r2, r5
   2666a:	4631      	mov	r1, r6
   2666c:	4638      	mov	r0, r7
   2666e:	f7ff fa88 	bl	25b82 <uECC_vli_add>

	return carry;
}
   26672:	4620      	mov	r0, r4
   26674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   26678:	2401      	movs	r4, #1
   2667a:	e7f4      	b.n	26666 <regularize_k+0x42>

0002667c <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   2667c:	b530      	push	{r4, r5, lr}
   2667e:	4614      	mov	r4, r2
   26680:	b095      	sub	sp, #84	; 0x54
   26682:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   26684:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   26686:	4623      	mov	r3, r4
{
   26688:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2668a:	a904      	add	r1, sp, #16
   2668c:	9102      	str	r1, [sp, #8]
   2668e:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   26690:	f7ff ffc8 	bl	26624 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   26694:	fab0 f380 	clz	r3, r0
   26698:	095b      	lsrs	r3, r3, #5
   2669a:	aa14      	add	r2, sp, #80	; 0x50
   2669c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   266a0:	8863      	ldrh	r3, [r4, #2]
   266a2:	9401      	str	r4, [sp, #4]
   266a4:	3301      	adds	r3, #1
   266a6:	b21b      	sxth	r3, r3
   266a8:	9300      	str	r3, [sp, #0]
   266aa:	f852 2c48 	ldr.w	r2, [r2, #-72]
   266ae:	2300      	movs	r3, #0
   266b0:	f104 0144 	add.w	r1, r4, #68	; 0x44
   266b4:	4628      	mov	r0, r5
   266b6:	f7ff fee8 	bl	2648a <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   266ba:	4621      	mov	r1, r4
   266bc:	4628      	mov	r0, r5
   266be:	f7ff fe59 	bl	26374 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   266c2:	fab0 f080 	clz	r0, r0
   266c6:	0940      	lsrs	r0, r0, #5
   266c8:	b015      	add	sp, #84	; 0x54
   266ca:	bd30      	pop	{r4, r5, pc}

000266cc <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   266cc:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   266ce:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   266d0:	1e4f      	subs	r7, r1, #1
   266d2:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   266d4:	428c      	cmp	r4, r1
   266d6:	f105 0501 	add.w	r5, r5, #1
   266da:	db00      	blt.n	266de <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   266dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   266de:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   266e0:	f023 0603 	bic.w	r6, r3, #3
   266e4:	f003 0303 	and.w	r3, r3, #3
   266e8:	5996      	ldr	r6, [r2, r6]
   266ea:	00db      	lsls	r3, r3, #3
   266ec:	fa26 f303 	lsr.w	r3, r6, r3
   266f0:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   266f2:	e7ee      	b.n	266d2 <uECC_vli_nativeToBytes+0x6>

000266f4 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   266f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   266f6:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   266f8:	1cd1      	adds	r1, r2, #3
   266fa:	bf48      	it	mi
   266fc:	1d91      	addmi	r1, r2, #6
   266fe:	f341 0187 	sbfx	r1, r1, #2, #8
{
   26702:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   26704:	f7ff fae4 	bl	25cd0 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   26708:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   2670a:	1e67      	subs	r7, r4, #1
   2670c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   2670e:	42a2      	cmp	r2, r4
   26710:	f105 0501 	add.w	r5, r5, #1
   26714:	db00      	blt.n	26718 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   26716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   26718:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   2671a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   2671e:	5cb2      	ldrb	r2, [r6, r2]
   26720:	f003 0303 	and.w	r3, r3, #3
   26724:	00db      	lsls	r3, r3, #3
   26726:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   2672a:	5842      	ldr	r2, [r0, r1]
   2672c:	431a      	orrs	r2, r3
   2672e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   26730:	e7ec      	b.n	2670c <uECC_vli_bytesToNative+0x18>

00026732 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   26732:	b5f0      	push	{r4, r5, r6, r7, lr}
   26734:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   26736:	f991 6000 	ldrsb.w	r6, [r1]
{
   2673a:	4605      	mov	r5, r0
   2673c:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   2673e:	f7ff fe19 	bl	26374 <EccPoint_isZero>
   26742:	bb28      	cbnz	r0, 26790 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   26744:	1d27      	adds	r7, r4, #4
   26746:	4632      	mov	r2, r6
   26748:	4629      	mov	r1, r5
   2674a:	4638      	mov	r0, r7
   2674c:	f7ff fb0f 	bl	25d6e <uECC_vli_cmp_unsafe>
   26750:	2801      	cmp	r0, #1
   26752:	d120      	bne.n	26796 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   26754:	4632      	mov	r2, r6
   26756:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   2675a:	4638      	mov	r0, r7
   2675c:	f7ff fb07 	bl	25d6e <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   26760:	2801      	cmp	r0, #1
   26762:	d118      	bne.n	26796 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   26764:	4622      	mov	r2, r4
   26766:	4668      	mov	r0, sp
   26768:	f7ff fc16 	bl	25f98 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   2676c:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   26770:	4622      	mov	r2, r4
   26772:	4629      	mov	r1, r5
   26774:	a808      	add	r0, sp, #32
   26776:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   26778:	4632      	mov	r2, r6
   2677a:	a908      	add	r1, sp, #32
   2677c:	4668      	mov	r0, sp
   2677e:	f7ff fb0b 	bl	25d98 <uECC_vli_equal>
		return -3;
   26782:	2800      	cmp	r0, #0
   26784:	bf0c      	ite	eq
   26786:	2000      	moveq	r0, #0
   26788:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   2678c:	b011      	add	sp, #68	; 0x44
   2678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   26790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26794:	e7fa      	b.n	2678c <uECC_valid_point+0x5a>
		return -2;
   26796:	f06f 0001 	mvn.w	r0, #1
   2679a:	e7f7      	b.n	2678c <uECC_valid_point+0x5a>

0002679c <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   2679c:	b570      	push	{r4, r5, r6, lr}
   2679e:	460c      	mov	r4, r1
   267a0:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   267a2:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   267a4:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   267a8:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   267aa:	4601      	mov	r1, r0
   267ac:	4668      	mov	r0, sp
   267ae:	f7ff ffa1 	bl	266f4 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   267b2:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   267b6:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   267ba:	18a9      	adds	r1, r5, r2
   267bc:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   267c0:	f7ff ff98 	bl	266f4 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   267c4:	2210      	movs	r2, #16
   267c6:	4631      	mov	r1, r6
   267c8:	4668      	mov	r0, sp
   267ca:	f7ff fad0 	bl	25d6e <uECC_vli_cmp_unsafe>
   267ce:	b128      	cbz	r0, 267dc <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   267d0:	4621      	mov	r1, r4
   267d2:	4668      	mov	r0, sp
   267d4:	f7ff ffad 	bl	26732 <uECC_valid_point>
}
   267d8:	b010      	add	sp, #64	; 0x40
   267da:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   267dc:	f06f 0003 	mvn.w	r0, #3
   267e0:	e7fa      	b.n	267d8 <uECC_valid_public_key+0x3c>

000267e2 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   267e2:	78cb      	ldrb	r3, [r1, #3]
   267e4:	7802      	ldrb	r2, [r0, #0]
   267e6:	4053      	eors	r3, r2
   267e8:	7003      	strb	r3, [r0, #0]
   267ea:	884b      	ldrh	r3, [r1, #2]
   267ec:	7842      	ldrb	r2, [r0, #1]
   267ee:	4053      	eors	r3, r2
   267f0:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   267f2:	680a      	ldr	r2, [r1, #0]
   267f4:	7883      	ldrb	r3, [r0, #2]
   267f6:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   267fa:	7083      	strb	r3, [r0, #2]
   267fc:	680a      	ldr	r2, [r1, #0]
   267fe:	78c3      	ldrb	r3, [r0, #3]
   26800:	4053      	eors	r3, r2
   26802:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   26804:	79cb      	ldrb	r3, [r1, #7]
   26806:	7902      	ldrb	r2, [r0, #4]
   26808:	4053      	eors	r3, r2
   2680a:	7103      	strb	r3, [r0, #4]
   2680c:	88cb      	ldrh	r3, [r1, #6]
   2680e:	7942      	ldrb	r2, [r0, #5]
   26810:	4053      	eors	r3, r2
   26812:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   26814:	684a      	ldr	r2, [r1, #4]
   26816:	7983      	ldrb	r3, [r0, #6]
   26818:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2681c:	7183      	strb	r3, [r0, #6]
   2681e:	684a      	ldr	r2, [r1, #4]
   26820:	79c3      	ldrb	r3, [r0, #7]
   26822:	4053      	eors	r3, r2
   26824:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   26826:	7acb      	ldrb	r3, [r1, #11]
   26828:	7a02      	ldrb	r2, [r0, #8]
   2682a:	4053      	eors	r3, r2
   2682c:	7203      	strb	r3, [r0, #8]
   2682e:	7a42      	ldrb	r2, [r0, #9]
   26830:	894b      	ldrh	r3, [r1, #10]
   26832:	4053      	eors	r3, r2
   26834:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   26836:	688a      	ldr	r2, [r1, #8]
   26838:	7a83      	ldrb	r3, [r0, #10]
   2683a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2683e:	7283      	strb	r3, [r0, #10]
   26840:	688a      	ldr	r2, [r1, #8]
   26842:	7ac3      	ldrb	r3, [r0, #11]
   26844:	4053      	eors	r3, r2
   26846:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   26848:	7bcb      	ldrb	r3, [r1, #15]
   2684a:	7b02      	ldrb	r2, [r0, #12]
   2684c:	4053      	eors	r3, r2
   2684e:	7303      	strb	r3, [r0, #12]
   26850:	89cb      	ldrh	r3, [r1, #14]
   26852:	7b42      	ldrb	r2, [r0, #13]
   26854:	4053      	eors	r3, r2
   26856:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   26858:	68ca      	ldr	r2, [r1, #12]
   2685a:	7b83      	ldrb	r3, [r0, #14]
   2685c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   26860:	7383      	strb	r3, [r0, #14]
   26862:	68ca      	ldr	r2, [r1, #12]
   26864:	7bc3      	ldrb	r3, [r0, #15]
   26866:	4053      	eors	r3, r2
   26868:	73c3      	strb	r3, [r0, #15]
}
   2686a:	4770      	bx	lr

0002686c <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   2686c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2686e:	7802      	ldrb	r2, [r0, #0]
   26870:	f88d 2000 	strb.w	r2, [sp]
   26874:	7942      	ldrb	r2, [r0, #5]
   26876:	f88d 2001 	strb.w	r2, [sp, #1]
   2687a:	7a82      	ldrb	r2, [r0, #10]
   2687c:	f88d 2002 	strb.w	r2, [sp, #2]
   26880:	7bc2      	ldrb	r2, [r0, #15]
   26882:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   26886:	7902      	ldrb	r2, [r0, #4]
   26888:	f88d 2004 	strb.w	r2, [sp, #4]
   2688c:	7a42      	ldrb	r2, [r0, #9]
   2688e:	f88d 2005 	strb.w	r2, [sp, #5]
   26892:	7b82      	ldrb	r2, [r0, #14]
   26894:	f88d 2006 	strb.w	r2, [sp, #6]
   26898:	78c2      	ldrb	r2, [r0, #3]
   2689a:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2689e:	7a02      	ldrb	r2, [r0, #8]
   268a0:	f88d 2008 	strb.w	r2, [sp, #8]
   268a4:	7b42      	ldrb	r2, [r0, #13]
   268a6:	f88d 2009 	strb.w	r2, [sp, #9]
   268aa:	7882      	ldrb	r2, [r0, #2]
   268ac:	f88d 200a 	strb.w	r2, [sp, #10]
   268b0:	79c2      	ldrb	r2, [r0, #7]
   268b2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   268b6:	7b02      	ldrb	r2, [r0, #12]
   268b8:	f88d 200c 	strb.w	r2, [sp, #12]
   268bc:	7842      	ldrb	r2, [r0, #1]
   268be:	7ac3      	ldrb	r3, [r0, #11]
   268c0:	f88d 200d 	strb.w	r2, [sp, #13]
   268c4:	7982      	ldrb	r2, [r0, #6]
   268c6:	f88d 200e 	strb.w	r2, [sp, #14]
   268ca:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   268ce:	2310      	movs	r3, #16
   268d0:	466a      	mov	r2, sp
   268d2:	4619      	mov	r1, r3
   268d4:	f7ff f88f 	bl	259f6 <_copy>
}
   268d8:	b005      	add	sp, #20
   268da:	f85d fb04 	ldr.w	pc, [sp], #4

000268de <mult_row_column>:
{
   268de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   268e0:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   268e2:	7808      	ldrb	r0, [r1, #0]
{
   268e4:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   268e6:	f7ff f895 	bl	25a14 <_double_byte>
   268ea:	4605      	mov	r5, r0
   268ec:	7860      	ldrb	r0, [r4, #1]
   268ee:	f7ff f891 	bl	25a14 <_double_byte>
   268f2:	78a2      	ldrb	r2, [r4, #2]
   268f4:	7863      	ldrb	r3, [r4, #1]
   268f6:	4053      	eors	r3, r2
   268f8:	78e2      	ldrb	r2, [r4, #3]
   268fa:	4053      	eors	r3, r2
   268fc:	405d      	eors	r5, r3
   268fe:	4045      	eors	r5, r0
   26900:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   26902:	7860      	ldrb	r0, [r4, #1]
   26904:	7827      	ldrb	r7, [r4, #0]
   26906:	f7ff f885 	bl	25a14 <_double_byte>
   2690a:	4605      	mov	r5, r0
   2690c:	78a0      	ldrb	r0, [r4, #2]
   2690e:	f7ff f881 	bl	25a14 <_double_byte>
   26912:	78a3      	ldrb	r3, [r4, #2]
   26914:	405f      	eors	r7, r3
   26916:	78e3      	ldrb	r3, [r4, #3]
   26918:	405f      	eors	r7, r3
   2691a:	407d      	eors	r5, r7
   2691c:	4045      	eors	r5, r0
   2691e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   26920:	78a0      	ldrb	r0, [r4, #2]
   26922:	7865      	ldrb	r5, [r4, #1]
   26924:	7827      	ldrb	r7, [r4, #0]
   26926:	f7ff f875 	bl	25a14 <_double_byte>
   2692a:	406f      	eors	r7, r5
   2692c:	4605      	mov	r5, r0
   2692e:	78e0      	ldrb	r0, [r4, #3]
   26930:	f7ff f870 	bl	25a14 <_double_byte>
   26934:	78e3      	ldrb	r3, [r4, #3]
   26936:	405f      	eors	r7, r3
   26938:	407d      	eors	r5, r7
   2693a:	4045      	eors	r5, r0
   2693c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2693e:	7820      	ldrb	r0, [r4, #0]
   26940:	f7ff f868 	bl	25a14 <_double_byte>
   26944:	7863      	ldrb	r3, [r4, #1]
   26946:	7825      	ldrb	r5, [r4, #0]
   26948:	405d      	eors	r5, r3
   2694a:	78a3      	ldrb	r3, [r4, #2]
   2694c:	405d      	eors	r5, r3
   2694e:	4045      	eors	r5, r0
   26950:	78e0      	ldrb	r0, [r4, #3]
   26952:	f7ff f85f 	bl	25a14 <_double_byte>
   26956:	b2ed      	uxtb	r5, r5
   26958:	4045      	eors	r5, r0
   2695a:	70f5      	strb	r5, [r6, #3]
}
   2695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002695e <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   2695e:	b570      	push	{r4, r5, r6, lr}
   26960:	4614      	mov	r4, r2
   26962:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   26964:	4605      	mov	r5, r0
   26966:	2800      	cmp	r0, #0
   26968:	d049      	beq.n	269fe <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   2696a:	2900      	cmp	r1, #0
   2696c:	d049      	beq.n	26a02 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   2696e:	2a00      	cmp	r2, #0
   26970:	d049      	beq.n	26a06 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   26972:	2310      	movs	r3, #16
   26974:	460a      	mov	r2, r1
   26976:	4668      	mov	r0, sp
   26978:	4619      	mov	r1, r3
   2697a:	f7ff f83c 	bl	259f6 <_copy>
	add_round_key(state, s->words);
   2697e:	4621      	mov	r1, r4
   26980:	4668      	mov	r0, sp
   26982:	f7ff ff2e 	bl	267e2 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   26986:	3410      	adds	r4, #16
   26988:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   2698c:	4668      	mov	r0, sp
   2698e:	f7df ff9b 	bl	68c8 <sub_bytes>
		shift_rows(state);
   26992:	4668      	mov	r0, sp
   26994:	f7ff ff6a 	bl	2686c <shift_rows>
	mult_row_column(t, s);
   26998:	4669      	mov	r1, sp
   2699a:	a804      	add	r0, sp, #16
   2699c:	f7ff ff9f 	bl	268de <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   269a0:	a901      	add	r1, sp, #4
   269a2:	a805      	add	r0, sp, #20
   269a4:	f7ff ff9b 	bl	268de <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   269a8:	a902      	add	r1, sp, #8
   269aa:	a806      	add	r0, sp, #24
   269ac:	f7ff ff97 	bl	268de <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   269b0:	a903      	add	r1, sp, #12
   269b2:	a807      	add	r0, sp, #28
   269b4:	f7ff ff93 	bl	268de <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   269b8:	2310      	movs	r3, #16
   269ba:	4619      	mov	r1, r3
   269bc:	eb0d 0203 	add.w	r2, sp, r3
   269c0:	4668      	mov	r0, sp
   269c2:	f7ff f818 	bl	259f6 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   269c6:	4621      	mov	r1, r4
   269c8:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   269ca:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   269cc:	f7ff ff09 	bl	267e2 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   269d0:	42a6      	cmp	r6, r4
   269d2:	d1db      	bne.n	2698c <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   269d4:	f7df ff78 	bl	68c8 <sub_bytes>
	shift_rows(state);
   269d8:	4668      	mov	r0, sp
   269da:	f7ff ff47 	bl	2686c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   269de:	4631      	mov	r1, r6
   269e0:	4668      	mov	r0, sp
   269e2:	f7ff fefe 	bl	267e2 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   269e6:	2310      	movs	r3, #16
   269e8:	4619      	mov	r1, r3
   269ea:	466a      	mov	r2, sp
   269ec:	4628      	mov	r0, r5
   269ee:	f7ff f802 	bl	259f6 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   269f2:	4668      	mov	r0, sp
   269f4:	2210      	movs	r2, #16
   269f6:	2100      	movs	r1, #0
   269f8:	f7ff f80a 	bl	25a10 <_set>

	return TC_CRYPTO_SUCCESS;
   269fc:	2001      	movs	r0, #1
}
   269fe:	b008      	add	sp, #32
   26a00:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26a02:	4608      	mov	r0, r1
   26a04:	e7fb      	b.n	269fe <tc_aes_encrypt+0xa0>
   26a06:	4610      	mov	r0, r2
   26a08:	e7f9      	b.n	269fe <tc_aes_encrypt+0xa0>

00026a0a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   26a0a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26a0c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   26a0e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   26a10:	f912 3b10 	ldrsb.w	r3, [r2], #16
   26a14:	2b00      	cmp	r3, #0
   26a16:	bfb4      	ite	lt
   26a18:	2387      	movlt	r3, #135	; 0x87
   26a1a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   26a1c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   26a20:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   26a24:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   26a26:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   26a2a:	d002      	beq.n	26a32 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   26a2c:	7813      	ldrb	r3, [r2, #0]
   26a2e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   26a30:	e7f4      	b.n	26a1c <gf_double+0x12>
	}
}
   26a32:	bd10      	pop	{r4, pc}

00026a34 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   26a34:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   26a36:	b120      	cbz	r0, 26a42 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   26a38:	2258      	movs	r2, #88	; 0x58
   26a3a:	2100      	movs	r1, #0
   26a3c:	f7fe ffe8 	bl	25a10 <_set>
   26a40:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26a42:	bd08      	pop	{r3, pc}

00026a44 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   26a44:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26a46:	4604      	mov	r4, r0
   26a48:	b188      	cbz	r0, 26a6e <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26a4a:	2210      	movs	r2, #16
   26a4c:	2100      	movs	r1, #0
   26a4e:	f7fe ffdf 	bl	25a10 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   26a52:	2210      	movs	r2, #16
   26a54:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26a58:	2100      	movs	r1, #0
   26a5a:	f7fe ffd9 	bl	25a10 <_set>
	s->leftover_offset = 0;
   26a5e:	2300      	movs	r3, #0
   26a60:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   26a62:	2200      	movs	r2, #0
   26a64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   26a68:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   26a6c:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   26a6e:	bd10      	pop	{r4, pc}

00026a70 <tc_cmac_setup>:
{
   26a70:	b570      	push	{r4, r5, r6, lr}
   26a72:	460d      	mov	r5, r1
   26a74:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   26a76:	4604      	mov	r4, r0
   26a78:	b310      	cbz	r0, 26ac0 <tc_cmac_setup+0x50>
   26a7a:	b311      	cbz	r1, 26ac2 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   26a7c:	2258      	movs	r2, #88	; 0x58
   26a7e:	2100      	movs	r1, #0
   26a80:	f7fe ffc6 	bl	25a10 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   26a84:	4629      	mov	r1, r5
	s->sched = sched;
   26a86:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   26a88:	4630      	mov	r0, r6
   26a8a:	f7df ff29 	bl	68e0 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   26a8e:	2210      	movs	r2, #16
   26a90:	2100      	movs	r1, #0
   26a92:	4620      	mov	r0, r4
   26a94:	f7fe ffbc 	bl	25a10 <_set>
	gf_double (s->K1, s->iv);
   26a98:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   26a9c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26a9e:	4621      	mov	r1, r4
   26aa0:	4620      	mov	r0, r4
   26aa2:	f7ff ff5c 	bl	2695e <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   26aa6:	4621      	mov	r1, r4
   26aa8:	4628      	mov	r0, r5
   26aaa:	f7ff ffae 	bl	26a0a <gf_double>
	gf_double (s->K2, s->K1);
   26aae:	4629      	mov	r1, r5
   26ab0:	f104 0020 	add.w	r0, r4, #32
   26ab4:	f7ff ffa9 	bl	26a0a <gf_double>
	tc_cmac_init(s);
   26ab8:	4620      	mov	r0, r4
   26aba:	f7ff ffc3 	bl	26a44 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   26abe:	2001      	movs	r0, #1
}
   26ac0:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   26ac2:	4608      	mov	r0, r1
   26ac4:	e7fc      	b.n	26ac0 <tc_cmac_setup+0x50>

00026ac6 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   26ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26aca:	460d      	mov	r5, r1
   26acc:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   26ace:	4604      	mov	r4, r0
   26ad0:	2800      	cmp	r0, #0
   26ad2:	d061      	beq.n	26b98 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   26ad4:	b912      	cbnz	r2, 26adc <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   26ad6:	2001      	movs	r0, #1
}
   26ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   26adc:	2900      	cmp	r1, #0
   26ade:	d05b      	beq.n	26b98 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   26ae0:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   26ae4:	ea53 0102 	orrs.w	r1, r3, r2
   26ae8:	d056      	beq.n	26b98 <tc_cmac_update+0xd2>
	s->countdown--;
   26aea:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   26aec:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   26af0:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   26af4:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   26af8:	f1b8 0f00 	cmp.w	r8, #0
   26afc:	d02a      	beq.n	26b54 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   26afe:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26b02:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   26b06:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26b08:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   26b0a:	d208      	bcs.n	26b1e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   26b0c:	462a      	mov	r2, r5
   26b0e:	4633      	mov	r3, r6
   26b10:	4631      	mov	r1, r6
   26b12:	f7fe ff70 	bl	259f6 <_copy>
			s->leftover_offset += data_length;
   26b16:	6c62      	ldr	r2, [r4, #68]	; 0x44
   26b18:	4432      	add	r2, r6
   26b1a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   26b1c:	e7db      	b.n	26ad6 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   26b1e:	463b      	mov	r3, r7
   26b20:	462a      	mov	r2, r5
   26b22:	4639      	mov	r1, r7
   26b24:	f7fe ff67 	bl	259f6 <_copy>
		data_length -= remaining_space;
   26b28:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   26b2a:	2300      	movs	r3, #0
   26b2c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   26b2e:	4446      	add	r6, r8
		data += remaining_space;
   26b30:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b32:	1e63      	subs	r3, r4, #1
   26b34:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   26b38:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26b3c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b40:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   26b42:	ea82 0200 	eor.w	r2, r2, r0
   26b46:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b48:	d1f6      	bne.n	26b38 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26b4a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26b4c:	4621      	mov	r1, r4
   26b4e:	4620      	mov	r0, r4
   26b50:	f7ff ff05 	bl	2695e <tc_aes_encrypt>
   26b54:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   26b58:	2e10      	cmp	r6, #16
   26b5a:	d80a      	bhi.n	26b72 <tc_cmac_update+0xac>
	if (data_length > 0) {
   26b5c:	2e00      	cmp	r6, #0
   26b5e:	d0ba      	beq.n	26ad6 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   26b60:	4633      	mov	r3, r6
   26b62:	462a      	mov	r2, r5
   26b64:	4631      	mov	r1, r6
   26b66:	f104 0030 	add.w	r0, r4, #48	; 0x30
   26b6a:	f7fe ff44 	bl	259f6 <_copy>
		s->leftover_offset = data_length;
   26b6e:	6466      	str	r6, [r4, #68]	; 0x44
   26b70:	e7b1      	b.n	26ad6 <tc_cmac_update+0x10>
   26b72:	1e63      	subs	r3, r4, #1
   26b74:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   26b76:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26b7a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b7e:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   26b80:	ea82 0200 	eor.w	r2, r2, r0
   26b84:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26b86:	d1f6      	bne.n	26b76 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   26b88:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26b8a:	4621      	mov	r1, r4
   26b8c:	4620      	mov	r0, r4
   26b8e:	f7ff fee6 	bl	2695e <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   26b92:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   26b94:	3e10      	subs	r6, #16
   26b96:	e7df      	b.n	26b58 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   26b98:	2000      	movs	r0, #0
   26b9a:	e79d      	b.n	26ad8 <tc_cmac_update+0x12>

00026b9c <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   26b9c:	b570      	push	{r4, r5, r6, lr}
   26b9e:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   26ba0:	4605      	mov	r5, r0
   26ba2:	b1e8      	cbz	r0, 26be0 <tc_cmac_final+0x44>
   26ba4:	b369      	cbz	r1, 26c02 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   26ba6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   26ba8:	2a10      	cmp	r2, #16
   26baa:	d11a      	bne.n	26be2 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   26bac:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26bae:	1e63      	subs	r3, r4, #1
   26bb0:	3901      	subs	r1, #1
   26bb2:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26bb6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   26bba:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   26bbe:	4072      	eors	r2, r6
   26bc0:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26bc4:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   26bc6:	ea82 0206 	eor.w	r2, r2, r6
   26bca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   26bcc:	d1f3      	bne.n	26bb6 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   26bce:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   26bd0:	4621      	mov	r1, r4
   26bd2:	4628      	mov	r0, r5
   26bd4:	f7ff fec3 	bl	2695e <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   26bd8:	4620      	mov	r0, r4
   26bda:	f7ff ff2b 	bl	26a34 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   26bde:	2001      	movs	r0, #1
}
   26be0:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   26be2:	f102 0030 	add.w	r0, r2, #48	; 0x30
   26be6:	2100      	movs	r1, #0
   26be8:	f1c2 0210 	rsb	r2, r2, #16
   26bec:	4420      	add	r0, r4
   26bee:	f7fe ff0f 	bl	25a10 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   26bf2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   26bf4:	4423      	add	r3, r4
   26bf6:	2280      	movs	r2, #128	; 0x80
   26bf8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   26bfc:	f104 0120 	add.w	r1, r4, #32
   26c00:	e7d5      	b.n	26bae <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   26c02:	4608      	mov	r0, r1
   26c04:	e7ec      	b.n	26be0 <tc_cmac_final+0x44>

00026c06 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   26c06:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   26c08:	6800      	ldr	r0, [r0, #0]
   26c0a:	f7df bed9 	b.w	69c0 <z_arm_fatal_error>

00026c0e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   26c0e:	2100      	movs	r1, #0
   26c10:	2001      	movs	r0, #1
   26c12:	f7df bed5 	b.w	69c0 <z_arm_fatal_error>

00026c16 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   26c16:	b508      	push	{r3, lr}
	handler();
   26c18:	f7df ff90 	bl	6b3c <z_SysNmiOnReset>
	z_arm_int_exit();
}
   26c1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   26c20:	f7e0 b850 	b.w	6cc4 <z_arm_exc_exit>

00026c24 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   26c24:	2300      	movs	r3, #0
   26c26:	f7fe bec6 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00026c2a <malloc_prepare>:
}
   26c2a:	2000      	movs	r0, #0
   26c2c:	4770      	bx	lr

00026c2e <_stdout_hook_default>:
}
   26c2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26c32:	4770      	bx	lr

00026c34 <_stdin_hook_default>:
}
   26c34:	2000      	movs	r0, #0
   26c36:	4770      	bx	lr

00026c38 <_read>:
{
   26c38:	4608      	mov	r0, r1
   26c3a:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   26c3c:	f7e0 bc0a 	b.w	7454 <z_impl_zephyr_read_stdin>

00026c40 <_write>:
{
   26c40:	4608      	mov	r0, r1
   26c42:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   26c44:	f7e0 bc1a 	b.w	747c <z_impl_zephyr_write_stdout>

00026c48 <_close>:
   26c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26c4c:	4770      	bx	lr

00026c4e <_lseek>:
}
   26c4e:	2000      	movs	r0, #0
   26c50:	4770      	bx	lr

00026c52 <_isatty>:
}
   26c52:	2802      	cmp	r0, #2
   26c54:	bfcc      	ite	gt
   26c56:	2000      	movgt	r0, #0
   26c58:	2001      	movle	r0, #1
   26c5a:	4770      	bx	lr

00026c5c <_kill>:
}
   26c5c:	2000      	movs	r0, #0
   26c5e:	4770      	bx	lr

00026c60 <_getpid>:
}
   26c60:	2000      	movs	r0, #0
   26c62:	4770      	bx	lr

00026c64 <_fstat>:
	st->st_mode = S_IFCHR;
   26c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   26c68:	604b      	str	r3, [r1, #4]
}
   26c6a:	2000      	movs	r0, #0
   26c6c:	4770      	bx	lr

00026c6e <__retarget_lock_init_recursive>:
{
   26c6e:	b510      	push	{r4, lr}
   26c70:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   26c72:	2014      	movs	r0, #20
   26c74:	f7fc fc0a 	bl	2348c <malloc>
   26c78:	6020      	str	r0, [r4, #0]
}
   26c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   26c7e:	f003 ba14 	b.w	2a0aa <z_impl_k_mutex_init>

00026c82 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   26c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c8a:	f7fb baff 	b.w	2228c <z_impl_k_mutex_lock>

00026c8e <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   26c8e:	f7fb bb75 	b.w	2237c <z_impl_k_mutex_unlock>

00026c92 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   26c92:	b084      	sub	sp, #16
   26c94:	ab04      	add	r3, sp, #16
   26c96:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   26c9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   26c9e:	2b06      	cmp	r3, #6
   26ca0:	d108      	bne.n	26cb4 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   26ca2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26ca6:	2201      	movs	r2, #1
   26ca8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   26cac:	f3bf 8f4f 	dsb	sy
        __WFE();
   26cb0:	bf20      	wfe
    while (true)
   26cb2:	e7fd      	b.n	26cb0 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   26cb4:	b004      	add	sp, #16
   26cb6:	4770      	bx	lr

00026cb8 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   26cb8:	b084      	sub	sp, #16
   26cba:	ab04      	add	r3, sp, #16
   26cbc:	e903 0007 	stmdb	r3, {r0, r1, r2}
   26cc0:	2300      	movs	r3, #0
   26cc2:	f383 8811 	msr	BASEPRI, r3
   26cc6:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   26cca:	b004      	add	sp, #16
   26ccc:	4770      	bx	lr

00026cce <z_impl_gpio_pin_configure.isra.0>:
 */
__syscall int gpio_pin_configure(const struct device *port,
				 gpio_pin_t pin,
				 gpio_flags_t flags);

static inline int z_impl_gpio_pin_configure(const struct device *port,
   26cce:	b4f0      	push	{r4, r5, r6, r7}
   26cd0:	4613      	mov	r3, r2
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   26cd2:	6906      	ldr	r6, [r0, #16]
	const struct gpio_driver_api *api =
   26cd4:	6887      	ldr	r7, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26cd6:	6834      	ldr	r4, [r6, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   26cd8:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   26cda:	bf48      	it	mi
   26cdc:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26ce0:	2501      	movs	r5, #1
   26ce2:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   26ce4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   26ce8:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   26cea:	bf4c      	ite	mi
   26cec:	432c      	orrmi	r4, r5
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   26cee:	43ac      	bicpl	r4, r5
	}

	return api->pin_configure(port, pin, flags);
   26cf0:	683b      	ldr	r3, [r7, #0]
   26cf2:	6034      	str	r4, [r6, #0]
}
   26cf4:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
   26cf6:	4718      	bx	r3

00026cf8 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   26cf8:	b530      	push	{r4, r5, lr}
   26cfa:	b085      	sub	sp, #20
   26cfc:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   26cfe:	880a      	ldrh	r2, [r1, #0]
   26d00:	788b      	ldrb	r3, [r1, #2]
   26d02:	f8ad 2000 	strh.w	r2, [sp]
{
   26d06:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   26d08:	220d      	movs	r2, #13
   26d0a:	2100      	movs	r1, #0
   26d0c:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   26d10:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   26d14:	f003 fec2 	bl	2aa9c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   26d18:	466a      	mov	r2, sp
   26d1a:	4669      	mov	r1, sp
   26d1c:	4628      	mov	r0, r5
   26d1e:	f7ec fbe5 	bl	134ec <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   26d22:	b928      	cbnz	r0, 26d30 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   26d24:	f8bd 2000 	ldrh.w	r2, [sp]
   26d28:	f89d 3002 	ldrb.w	r3, [sp, #2]
   26d2c:	8022      	strh	r2, [r4, #0]
   26d2e:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   26d30:	b005      	add	sp, #20
   26d32:	bd30      	pop	{r4, r5, pc}

00026d34 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   26d34:	b513      	push	{r0, r1, r4, lr}
   26d36:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   26d38:	aa01      	add	r2, sp, #4
   26d3a:	3103      	adds	r1, #3
   26d3c:	f7ff ffdc 	bl	26cf8 <ah>
	if (err) {
   26d40:	b948      	cbnz	r0, 26d56 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   26d42:	2203      	movs	r2, #3
   26d44:	a901      	add	r1, sp, #4
   26d46:	4620      	mov	r0, r4
   26d48:	f003 fe77 	bl	2aa3a <memcmp>
   26d4c:	fab0 f080 	clz	r0, r0
   26d50:	0940      	lsrs	r0, r0, #5
}
   26d52:	b002      	add	sp, #8
   26d54:	bd10      	pop	{r4, pc}
		return false;
   26d56:	2000      	movs	r0, #0
   26d58:	e7fb      	b.n	26d52 <bt_rpa_irk_matches+0x1e>

00026d5a <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   26d5a:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   26d5c:	1cce      	adds	r6, r1, #3
{
   26d5e:	4605      	mov	r5, r0
   26d60:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   26d62:	4630      	mov	r0, r6
   26d64:	2103      	movs	r1, #3
   26d66:	f7ec fbbf 	bl	134e8 <bt_rand>
	if (err) {
   26d6a:	b960      	cbnz	r0, 26d86 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   26d6c:	7963      	ldrb	r3, [r4, #5]
   26d6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   26d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   26d76:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   26d78:	4622      	mov	r2, r4
   26d7a:	4631      	mov	r1, r6
   26d7c:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   26d7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   26d82:	f7ff bfb9 	b.w	26cf8 <ah>
}
   26d86:	bd70      	pop	{r4, r5, r6, pc}

00026d88 <send_cmd_status>:
{
   26d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   26d90:	4606      	mov	r6, r0
   26d92:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   26d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26d98:	2100      	movs	r1, #0
   26d9a:	200f      	movs	r0, #15
   26d9c:	f7e0 fe82 	bl	7aa4 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   26da0:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   26da2:	f100 0808 	add.w	r8, r0, #8
   26da6:	4604      	mov	r4, r0
   26da8:	7507      	strb	r7, [r0, #20]
   26daa:	2102      	movs	r1, #2
   26dac:	4640      	mov	r0, r8
   26dae:	f002 fdcc 	bl	2994a <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26db2:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   26db4:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   26db6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   26db8:	7041      	strb	r1, [r0, #1]
   26dba:	4640      	mov	r0, r8
   26dbc:	f002 fdc5 	bl	2994a <net_buf_simple_add>
	evt->ncmd = 1U;
   26dc0:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   26dc2:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   26dc4:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   26dc6:	4620      	mov	r0, r4
}
   26dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   26dcc:	f7e2 b8ca 	b.w	8f64 <bt_recv_prio>

00026dd0 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   26dd0:	f101 0320 	add.w	r3, r1, #32
   26dd4:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   26dd6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   26dda:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   26dde:	428b      	cmp	r3, r1
   26de0:	d1f9      	bne.n	26dd6 <sys_memcpy_swap.constprop.0+0x6>
}
   26de2:	4770      	bx	lr

00026de4 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   26de4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   26de8:	f043 0306 	orr.w	r3, r3, #6
   26dec:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   26df0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   26df4:	f043 0304 	orr.w	r3, r3, #4
   26df8:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   26dfc:	4770      	bx	lr

00026dfe <default_CSPRNG>:
{
   26dfe:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   26e00:	f7ec fb72 	bl	134e8 <bt_rand>
}
   26e04:	fab0 f080 	clz	r0, r0
   26e08:	0940      	lsrs	r0, r0, #5
   26e0a:	bd08      	pop	{r3, pc}

00026e0c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   26e0c:	b510      	push	{r4, lr}
   26e0e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   26e10:	7801      	ldrb	r1, [r0, #0]
   26e12:	7822      	ldrb	r2, [r4, #0]
   26e14:	428a      	cmp	r2, r1
{
   26e16:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   26e18:	d00f      	beq.n	26e3a <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   26e1a:	4669      	mov	r1, sp
   26e1c:	f7e0 fddc 	bl	79d8 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   26e20:	a905      	add	r1, sp, #20
   26e22:	4620      	mov	r0, r4
   26e24:	f7e0 fdd8 	bl	79d8 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   26e28:	2210      	movs	r2, #16
   26e2a:	f10d 0115 	add.w	r1, sp, #21
   26e2e:	f10d 0001 	add.w	r0, sp, #1
   26e32:	f003 fe02 	bl	2aa3a <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   26e36:	b00a      	add	sp, #40	; 0x28
   26e38:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   26e3a:	2a01      	cmp	r2, #1
   26e3c:	d006      	beq.n	26e4c <bt_uuid_cmp+0x40>
   26e3e:	2a02      	cmp	r2, #2
   26e40:	d007      	beq.n	26e52 <bt_uuid_cmp+0x46>
   26e42:	b972      	cbnz	r2, 26e62 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   26e44:	8840      	ldrh	r0, [r0, #2]
   26e46:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   26e48:	1ac0      	subs	r0, r0, r3
   26e4a:	e7f4      	b.n	26e36 <bt_uuid_cmp+0x2a>
   26e4c:	6840      	ldr	r0, [r0, #4]
   26e4e:	6863      	ldr	r3, [r4, #4]
   26e50:	e7fa      	b.n	26e48 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26e52:	2210      	movs	r2, #16
   26e54:	1c61      	adds	r1, r4, #1
   26e56:	3001      	adds	r0, #1
}
   26e58:	b00a      	add	sp, #40	; 0x28
   26e5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   26e5e:	f003 bdec 	b.w	2aa3a <memcmp>
	switch (u1->type) {
   26e62:	f06f 0015 	mvn.w	r0, #21
   26e66:	e7e6      	b.n	26e36 <bt_uuid_cmp+0x2a>

00026e68 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   26e68:	2a04      	cmp	r2, #4
   26e6a:	d00a      	beq.n	26e82 <bt_uuid_create+0x1a>
   26e6c:	2a10      	cmp	r2, #16
   26e6e:	d00d      	beq.n	26e8c <bt_uuid_create+0x24>
   26e70:	2a02      	cmp	r2, #2
   26e72:	f04f 0300 	mov.w	r3, #0
   26e76:	d115      	bne.n	26ea4 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   26e78:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   26e7a:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   26e7c:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   26e7e:	2001      	movs	r0, #1
		break;
   26e80:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   26e82:	2301      	movs	r3, #1
   26e84:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   26e86:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   26e88:	6042      	str	r2, [r0, #4]
		break;
   26e8a:	e7f8      	b.n	26e7e <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   26e8c:	2302      	movs	r3, #2
   26e8e:	f800 3b01 	strb.w	r3, [r0], #1
   26e92:	f101 0310 	add.w	r3, r1, #16
   26e96:	f851 2b04 	ldr.w	r2, [r1], #4
   26e9a:	f840 2b04 	str.w	r2, [r0], #4
   26e9e:	4299      	cmp	r1, r3
   26ea0:	d1f9      	bne.n	26e96 <bt_uuid_create+0x2e>
   26ea2:	e7ec      	b.n	26e7e <bt_uuid_create+0x16>
	switch (data_len) {
   26ea4:	4618      	mov	r0, r3
}
   26ea6:	4770      	bx	lr

00026ea8 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   26ea8:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   26eaa:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   26eac:	2106      	movs	r1, #6
{
   26eae:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   26eb0:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   26eb4:	f7ec fb18 	bl	134e8 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   26eb8:	b918      	cbnz	r0, 26ec2 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   26eba:	79a3      	ldrb	r3, [r4, #6]
   26ebc:	f063 033f 	orn	r3, r3, #63	; 0x3f
   26ec0:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   26ec2:	bd10      	pop	{r4, pc}

00026ec4 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   26ec4:	280f      	cmp	r0, #15
   26ec6:	d806      	bhi.n	26ed6 <bt_hci_evt_get_flags+0x12>
   26ec8:	280d      	cmp	r0, #13
   26eca:	d80b      	bhi.n	26ee4 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   26ecc:	2805      	cmp	r0, #5
   26ece:	bf14      	ite	ne
   26ed0:	2002      	movne	r0, #2
   26ed2:	2003      	moveq	r0, #3
   26ed4:	4770      	bx	lr
	switch (evt) {
   26ed6:	2813      	cmp	r0, #19
   26ed8:	d004      	beq.n	26ee4 <bt_hci_evt_get_flags+0x20>
   26eda:	281a      	cmp	r0, #26
   26edc:	bf14      	ite	ne
   26ede:	2002      	movne	r0, #2
   26ee0:	2001      	moveq	r0, #1
   26ee2:	4770      	bx	lr
   26ee4:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   26ee6:	4770      	bx	lr

00026ee8 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   26ee8:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   26eec:	b193      	cbz	r3, 26f14 <update_sec_level+0x2c>
   26eee:	7b5a      	ldrb	r2, [r3, #13]
   26ef0:	07d1      	lsls	r1, r2, #31
   26ef2:	d50f      	bpl.n	26f14 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   26ef4:	06d2      	lsls	r2, r2, #27
   26ef6:	d50b      	bpl.n	26f10 <update_sec_level+0x28>
   26ef8:	7b1b      	ldrb	r3, [r3, #12]
   26efa:	2b10      	cmp	r3, #16
   26efc:	d108      	bne.n	26f10 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   26efe:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   26f00:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   26f02:	7a82      	ldrb	r2, [r0, #10]
   26f04:	7a40      	ldrb	r0, [r0, #9]
}
   26f06:	4282      	cmp	r2, r0
   26f08:	bf8c      	ite	hi
   26f0a:	2000      	movhi	r0, #0
   26f0c:	2001      	movls	r0, #1
   26f0e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   26f10:	2303      	movs	r3, #3
   26f12:	e7f5      	b.n	26f00 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   26f14:	2302      	movs	r3, #2
   26f16:	e7f3      	b.n	26f00 <update_sec_level+0x18>

00026f18 <atomic_and>:
{
   26f18:	4603      	mov	r3, r0
}
   26f1a:	f3bf 8f5b 	dmb	ish
   26f1e:	e853 0f00 	ldrex	r0, [r3]
   26f22:	ea00 0201 	and.w	r2, r0, r1
   26f26:	e843 2c00 	strex	ip, r2, [r3]
   26f2a:	f1bc 0f00 	cmp.w	ip, #0
   26f2e:	d1f6      	bne.n	26f1e <atomic_and+0x6>
   26f30:	f3bf 8f5b 	dmb	ish
   26f34:	4770      	bx	lr

00026f36 <atomic_or>:
{
   26f36:	4603      	mov	r3, r0
}
   26f38:	f3bf 8f5b 	dmb	ish
   26f3c:	e853 0f00 	ldrex	r0, [r3]
   26f40:	ea40 0201 	orr.w	r2, r0, r1
   26f44:	e843 2c00 	strex	ip, r2, [r3]
   26f48:	f1bc 0f00 	cmp.w	ip, #0
   26f4c:	d1f6      	bne.n	26f3c <atomic_or+0x6>
   26f4e:	f3bf 8f5b 	dmb	ish
   26f52:	4770      	bx	lr

00026f54 <bt_addr_le_copy>:
   26f54:	680b      	ldr	r3, [r1, #0]
   26f56:	6003      	str	r3, [r0, #0]
   26f58:	888b      	ldrh	r3, [r1, #4]
   26f5a:	8083      	strh	r3, [r0, #4]
   26f5c:	798b      	ldrb	r3, [r1, #6]
   26f5e:	7183      	strb	r3, [r0, #6]
}
   26f60:	4770      	bx	lr

00026f62 <bt_addr_copy>:
   26f62:	680b      	ldr	r3, [r1, #0]
   26f64:	6003      	str	r3, [r0, #0]
   26f66:	888b      	ldrh	r3, [r1, #4]
   26f68:	8083      	strh	r3, [r0, #4]
}
   26f6a:	4770      	bx	lr

00026f6c <z_log_msg2_static_create.constprop.0>:
   26f6c:	2300      	movs	r3, #0
   26f6e:	f7fe bd22 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00026f72 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   26f72:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   26f74:	ab0a      	add	r3, sp, #40	; 0x28
   26f76:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   26f78:	9302      	str	r3, [sp, #8]
   26f7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26f7c:	9301      	str	r3, [sp, #4]
   26f7e:	2300      	movs	r3, #0
   26f80:	9300      	str	r3, [sp, #0]
   26f82:	4618      	mov	r0, r3
   26f84:	f7df f9ae 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
   26f88:	b007      	add	sp, #28
   26f8a:	f85d fb04 	ldr.w	pc, [sp], #4

00026f8e <sys_put_le64>:
	dst[1] = val >> 8;
   26f8e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   26f92:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   26f94:	0e00      	lsrs	r0, r0, #24
   26f96:	7053      	strb	r3, [r2, #1]
   26f98:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   26f9a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   26f9c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   26fa0:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   26fa2:	7093      	strb	r3, [r2, #2]
   26fa4:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   26fa6:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   26fa8:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   26faa:	71d1      	strb	r1, [r2, #7]
}
   26fac:	4770      	bx	lr

00026fae <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   26fae:	f7e1 bb75 	b.w	869c <bt_le_create_conn_legacy>

00026fb2 <bt_hci_disconnect>:
{
   26fb2:	b570      	push	{r4, r5, r6, lr}
   26fb4:	4606      	mov	r6, r0
   26fb6:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   26fb8:	f240 4006 	movw	r0, #1030	; 0x406
   26fbc:	2103      	movs	r1, #3
   26fbe:	f7e1 f95b 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   26fc2:	4604      	mov	r4, r0
   26fc4:	b168      	cbz	r0, 26fe2 <bt_hci_disconnect+0x30>
   26fc6:	2103      	movs	r1, #3
   26fc8:	3008      	adds	r0, #8
   26fca:	f002 fcbe 	bl	2994a <net_buf_simple_add>
	disconn->reason = reason;
   26fce:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   26fd0:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26fd2:	4621      	mov	r1, r4
   26fd4:	2200      	movs	r2, #0
}
   26fd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   26fda:	f240 4006 	movw	r0, #1030	; 0x406
   26fde:	f7e1 bab3 	b.w	8548 <bt_hci_cmd_send_sync>
}
   26fe2:	f06f 0068 	mvn.w	r0, #104	; 0x68
   26fe6:	bd70      	pop	{r4, r5, r6, pc}

00026fe8 <bt_le_set_data_len>:
{
   26fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26fea:	4607      	mov	r7, r0
   26fec:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26fee:	f242 0022 	movw	r0, #8226	; 0x2022
   26ff2:	2106      	movs	r1, #6
{
   26ff4:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   26ff6:	f7e1 f93f 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   26ffa:	4604      	mov	r4, r0
   26ffc:	b170      	cbz	r0, 2701c <bt_le_set_data_len+0x34>
   26ffe:	2106      	movs	r1, #6
   27000:	3008      	adds	r0, #8
   27002:	f002 fca2 	bl	2994a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27006:	883b      	ldrh	r3, [r7, #0]
   27008:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2700a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2700c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2700e:	4621      	mov	r1, r4
   27010:	f242 0022 	movw	r0, #8226	; 0x2022
}
   27014:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   27018:	f7e1 b968 	b.w	82ec <bt_hci_cmd_send>
}
   2701c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027022 <bt_le_set_phy>:
{
   27022:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27026:	4680      	mov	r8, r0
   27028:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2702a:	f242 0032 	movw	r0, #8242	; 0x2032
   2702e:	2107      	movs	r1, #7
{
   27030:	f89d 9020 	ldrb.w	r9, [sp, #32]
   27034:	4616      	mov	r6, r2
   27036:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   27038:	f7e1 f91e 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   2703c:	4604      	mov	r4, r0
   2703e:	b190      	cbz	r0, 27066 <bt_le_set_phy+0x44>
   27040:	2107      	movs	r1, #7
   27042:	3008      	adds	r0, #8
   27044:	f002 fc81 	bl	2994a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27048:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2704c:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2704e:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   27050:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   27052:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   27054:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   27058:	4621      	mov	r1, r4
   2705a:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2705e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   27062:	f7e1 b943 	b.w	82ec <bt_hci_cmd_send>
}
   27066:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2706a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002706e <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2706e:	6880      	ldr	r0, [r0, #8]
   27070:	f7e1 bc74 	b.w	895c <bt_hci_le_enh_conn_complete>

00027074 <le_legacy_conn_complete>:
{
   27074:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   27076:	6881      	ldr	r1, [r0, #8]
{
   27078:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2707a:	780b      	ldrb	r3, [r1, #0]
   2707c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   27080:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   27084:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   27088:	78cb      	ldrb	r3, [r1, #3]
   2708a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2708e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   27092:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   27096:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2709a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2709e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   270a2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   270a6:	7c4b      	ldrb	r3, [r1, #17]
   270a8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   270ac:	a803      	add	r0, sp, #12
   270ae:	3104      	adds	r1, #4
   270b0:	f7ff ff50 	bl	26f54 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   270b4:	4669      	mov	r1, sp
   270b6:	2200      	movs	r2, #0
   270b8:	f10d 0013 	add.w	r0, sp, #19
   270bc:	9200      	str	r2, [sp, #0]
   270be:	f8ad 2004 	strh.w	r2, [sp, #4]
   270c2:	f7ff ff4e 	bl	26f62 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   270c6:	9200      	str	r2, [sp, #0]
   270c8:	f10d 0019 	add.w	r0, sp, #25
   270cc:	808a      	strh	r2, [r1, #4]
   270ce:	f7ff ff48 	bl	26f62 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   270d2:	a802      	add	r0, sp, #8
   270d4:	f7e1 fc42 	bl	895c <bt_hci_le_enh_conn_complete>
}
   270d8:	b00b      	add	sp, #44	; 0x2c
   270da:	f85d fb04 	ldr.w	pc, [sp], #4

000270de <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   270de:	8803      	ldrh	r3, [r0, #0]
   270e0:	8842      	ldrh	r2, [r0, #2]
   270e2:	4293      	cmp	r3, r2
{
   270e4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   270e6:	d819      	bhi.n	2711c <bt_le_conn_params_valid+0x3e>
   270e8:	2b05      	cmp	r3, #5
   270ea:	d917      	bls.n	2711c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   270ec:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   270f0:	d814      	bhi.n	2711c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   270f2:	8883      	ldrh	r3, [r0, #4]
   270f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   270f8:	d210      	bcs.n	2711c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   270fa:	88c0      	ldrh	r0, [r0, #6]
   270fc:	f1a0 010a 	sub.w	r1, r0, #10
   27100:	b289      	uxth	r1, r1
   27102:	f640 4476 	movw	r4, #3190	; 0xc76
   27106:	42a1      	cmp	r1, r4
   27108:	d808      	bhi.n	2711c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2710a:	3301      	adds	r3, #1
   2710c:	b29b      	uxth	r3, r3
   2710e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   27110:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   27114:	bf34      	ite	cc
   27116:	2001      	movcc	r0, #1
   27118:	2000      	movcs	r0, #0
}
   2711a:	bd10      	pop	{r4, pc}
		return false;
   2711c:	2000      	movs	r0, #0
   2711e:	e7fc      	b.n	2711a <bt_le_conn_params_valid+0x3c>

00027120 <bt_send>:
		return bt_hci_ecc_send(buf);
   27120:	f7e0 bbc8 	b.w	78b4 <bt_hci_ecc_send>

00027124 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   27124:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   27126:	f7e8 ff6d 	bl	10004 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2712a:	b118      	cbz	r0, 27134 <bt_addr_le_is_bonded+0x10>
   2712c:	89c0      	ldrh	r0, [r0, #14]
   2712e:	3800      	subs	r0, #0
   27130:	bf18      	it	ne
   27132:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   27134:	bd08      	pop	{r3, pc}

00027136 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   27136:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   27138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2713c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2713e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27142:	2100      	movs	r1, #0
{
   27144:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   27146:	f7e0 fcad 	bl	7aa4 <bt_buf_get_evt>
   2714a:	2102      	movs	r1, #2
   2714c:	4604      	mov	r4, r0
   2714e:	3008      	adds	r0, #8
   27150:	f002 fbfb 	bl	2994a <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   27154:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   27156:	7045      	strb	r5, [r0, #1]

	return buf;
}
   27158:	4620      	mov	r0, r4
   2715a:	bd70      	pop	{r4, r5, r6, pc}

0002715c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2715c:	3103      	adds	r1, #3
{
   2715e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   27160:	b2c9      	uxtb	r1, r1
{
   27162:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   27164:	200e      	movs	r0, #14
   27166:	f7ff ffe6 	bl	27136 <bt_hci_evt_create>
   2716a:	2103      	movs	r1, #3
   2716c:	4604      	mov	r4, r0
   2716e:	3008      	adds	r0, #8
   27170:	f002 fbeb 	bl	2994a <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   27174:	2301      	movs	r3, #1
   27176:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   27178:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   2717c:	4620      	mov	r0, r4
   2717e:	bd38      	pop	{r3, r4, r5, pc}

00027180 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   27180:	b570      	push	{r4, r5, r6, lr}
   27182:	4605      	mov	r5, r0
   27184:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   27186:	200f      	movs	r0, #15
   27188:	2104      	movs	r1, #4
   2718a:	f7ff ffd4 	bl	27136 <bt_hci_evt_create>
   2718e:	2104      	movs	r1, #4
   27190:	4604      	mov	r4, r0
   27192:	3008      	adds	r0, #8
   27194:	f002 fbd9 	bl	2994a <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   27198:	2201      	movs	r2, #1
	cs->status = status;
   2719a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   2719c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2719e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   271a0:	4620      	mov	r0, r4
   271a2:	bd70      	pop	{r4, r5, r6, pc}

000271a4 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   271a4:	f3bf 8f5b 	dmb	ish
   271a8:	6800      	ldr	r0, [r0, #0]
   271aa:	f3bf 8f5b 	dmb	ish
}
   271ae:	4770      	bx	lr

000271b0 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   271b0:	f100 0310 	add.w	r3, r0, #16
   271b4:	f3bf 8f5b 	dmb	ish
   271b8:	e853 2f00 	ldrex	r2, [r3]
   271bc:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   271c0:	e843 1c00 	strex	ip, r1, [r3]
   271c4:	f1bc 0f00 	cmp.w	ip, #0
   271c8:	d1f6      	bne.n	271b8 <adv_unpause_enabled+0x8>
   271ca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   271ce:	0453      	lsls	r3, r2, #17
   271d0:	d502      	bpl.n	271d8 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   271d2:	2101      	movs	r1, #1
   271d4:	f000 b9b7 	b.w	27546 <bt_le_adv_set_enable>
}
   271d8:	4770      	bx	lr

000271da <bt_addr_copy>:
   271da:	680b      	ldr	r3, [r1, #0]
   271dc:	6003      	str	r3, [r0, #0]
   271de:	888b      	ldrh	r3, [r1, #4]
   271e0:	8083      	strh	r3, [r0, #4]
   271e2:	4770      	bx	lr

000271e4 <bt_addr_le_copy>:
   271e4:	680b      	ldr	r3, [r1, #0]
   271e6:	6003      	str	r3, [r0, #0]
   271e8:	888b      	ldrh	r3, [r1, #4]
   271ea:	8083      	strh	r3, [r0, #4]
   271ec:	798b      	ldrb	r3, [r1, #6]
   271ee:	7183      	strb	r3, [r0, #6]
}
   271f0:	4770      	bx	lr

000271f2 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   271f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   271f4:	4607      	mov	r7, r0
   271f6:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   271f8:	f242 0027 	movw	r0, #8231	; 0x2027
   271fc:	2127      	movs	r1, #39	; 0x27
   271fe:	f7e1 f83b 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   27202:	4605      	mov	r5, r0
   27204:	b1f8      	cbz	r0, 27246 <hci_id_add.constprop.0+0x54>
   27206:	2127      	movs	r1, #39	; 0x27
   27208:	3008      	adds	r0, #8
   2720a:	f002 fb9e 	bl	2994a <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2720e:	4639      	mov	r1, r7
   27210:	f7ff ffe8 	bl	271e4 <bt_addr_le_copy>
   27214:	4606      	mov	r6, r0
   27216:	4621      	mov	r1, r4
   27218:	1dc3      	adds	r3, r0, #7
   2721a:	f104 0210 	add.w	r2, r4, #16
   2721e:	f851 0b04 	ldr.w	r0, [r1], #4
   27222:	f843 0b04 	str.w	r0, [r3], #4
   27226:	4291      	cmp	r1, r2
   27228:	d1f9      	bne.n	2721e <hci_id_add.constprop.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   2722a:	2210      	movs	r2, #16
   2722c:	2100      	movs	r1, #0
   2722e:	f106 0017 	add.w	r0, r6, #23
   27232:	f003 fc33 	bl	2aa9c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   27236:	4629      	mov	r1, r5
   27238:	2200      	movs	r2, #0
}
   2723a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2723e:	f242 0027 	movw	r0, #8231	; 0x2027
   27242:	f7e1 b981 	b.w	8548 <bt_hci_cmd_send_sync>
}
   27246:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2724a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002724c <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2724c:	7a03      	ldrb	r3, [r0, #8]
   2724e:	075b      	lsls	r3, r3, #29
   27250:	d504      	bpl.n	2725c <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   27252:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   27256:	3001      	adds	r0, #1
   27258:	f7ff bfcb 	b.w	271f2 <hci_id_add.constprop.0>
}
   2725c:	4770      	bx	lr

0002725e <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2725e:	2300      	movs	r3, #0
   27260:	f7fe bba9 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00027264 <addr_res_enable>:
{
   27264:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   27266:	2101      	movs	r1, #1
{
   27268:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2726a:	f242 002d 	movw	r0, #8237	; 0x202d
   2726e:	f7e1 f803 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   27272:	4604      	mov	r4, r0
   27274:	b158      	cbz	r0, 2728e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   27276:	4629      	mov	r1, r5
   27278:	3008      	adds	r0, #8
   2727a:	f002 fb75 	bl	29968 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2727e:	4621      	mov	r1, r4
   27280:	2200      	movs	r2, #0
}
   27282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   27286:	f242 002d 	movw	r0, #8237	; 0x202d
   2728a:	f7e1 b95d 	b.w	8548 <bt_hci_cmd_send_sync>
}
   2728e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27292:	bd38      	pop	{r3, r4, r5, pc}

00027294 <is_adv_using_rand_addr>:
{
   27294:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   27296:	f7e2 fc65 	bl	9b64 <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   2729a:	b120      	cbz	r0, 272a6 <is_adv_using_rand_addr+0x12>
   2729c:	3010      	adds	r0, #16
   2729e:	f7ff ff81 	bl	271a4 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   272a2:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   272a6:	bd08      	pop	{r3, pc}

000272a8 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   272a8:	f100 0210 	add.w	r2, r0, #16
{
   272ac:	b508      	push	{r3, lr}
   272ae:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   272b0:	4610      	mov	r0, r2
   272b2:	f7ff ff77 	bl	271a4 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   272b6:	0641      	lsls	r1, r0, #25
   272b8:	d511      	bpl.n	272de <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   272ba:	f3bf 8f5b 	dmb	ish
   272be:	e852 1f00 	ldrex	r1, [r2]
   272c2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   272c6:	e842 1000 	strex	r0, r1, [r2]
   272ca:	2800      	cmp	r0, #0
   272cc:	d1f7      	bne.n	272be <adv_pause_enabled+0x16>
   272ce:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   272d2:	4618      	mov	r0, r3
   272d4:	2100      	movs	r1, #0
}
   272d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   272da:	f000 b934 	b.w	27546 <bt_le_adv_set_enable>
}
   272de:	bd08      	pop	{r3, pc}

000272e0 <bt_lookup_id_addr>:
{
   272e0:	b510      	push	{r4, lr}
   272e2:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   272e4:	f7e8 fe54 	bl	ff90 <bt_keys_find_irk>
		if (keys) {
   272e8:	b100      	cbz	r0, 272ec <bt_lookup_id_addr+0xc>
			return &keys->addr;
   272ea:	1c44      	adds	r4, r0, #1
}
   272ec:	4620      	mov	r0, r4
   272ee:	bd10      	pop	{r4, pc}

000272f0 <bt_id_set_private_addr>:
{
   272f0:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   272f2:	2106      	movs	r1, #6
   272f4:	4668      	mov	r0, sp
   272f6:	f7ec f8f7 	bl	134e8 <bt_rand>
	if (err) {
   272fa:	b940      	cbnz	r0, 2730e <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   272fc:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   27300:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   27302:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   27306:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2730a:	f7e1 ffcb 	bl	92a4 <set_random_address>
}
   2730e:	b003      	add	sp, #12
   27310:	f85d fb04 	ldr.w	pc, [sp], #4

00027314 <bt_id_set_adv_private_addr>:
{
   27314:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   27316:	2106      	movs	r1, #6
   27318:	4668      	mov	r0, sp
   2731a:	f7ec f8e5 	bl	134e8 <bt_rand>
	if (err) {
   2731e:	b940      	cbnz	r0, 27332 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   27320:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   27324:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   27326:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2732a:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2732e:	f7e1 ffb9 	bl	92a4 <set_random_address>
}
   27332:	b003      	add	sp, #12
   27334:	f85d fb04 	ldr.w	pc, [sp], #4

00027338 <bt_id_scan_random_addr_check>:
{
   27338:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   2733a:	f7e2 fc13 	bl	9b64 <bt_le_adv_lookup_legacy>
	if (!adv) {
   2733e:	b110      	cbz	r0, 27346 <bt_id_scan_random_addr_check+0xe>
   27340:	3010      	adds	r0, #16
   27342:	f7ff ff2f 	bl	271a4 <atomic_get>
}
   27346:	2001      	movs	r0, #1
   27348:	bd08      	pop	{r3, pc}

0002734a <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2734a:	7a03      	ldrb	r3, [r0, #8]
   2734c:	07d9      	lsls	r1, r3, #31
   2734e:	d504      	bpl.n	2735a <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   27350:	f023 0301 	bic.w	r3, r3, #1
   27354:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   27356:	f7e2 b829 	b.w	93ac <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2735a:	0799      	lsls	r1, r3, #30
   2735c:	d504      	bpl.n	27368 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2735e:	f023 0302 	bic.w	r3, r3, #2
   27362:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   27364:	f7e2 b83a 	b.w	93dc <bt_id_del>
}
   27368:	4770      	bx	lr

0002736a <get_adv_channel_map>:
{
   2736a:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2736c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   27370:	bf0c      	ite	eq
   27372:	2007      	moveq	r0, #7
   27374:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   27376:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   27378:	bf48      	it	mi
   2737a:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2737e:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   27380:	bf48      	it	mi
   27382:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   27386:	4770      	bx	lr

00027388 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   27388:	f3bf 8f5b 	dmb	ish
   2738c:	6800      	ldr	r0, [r0, #0]
   2738e:	f3bf 8f5b 	dmb	ish
}
   27392:	4770      	bx	lr

00027394 <atomic_and>:
{
   27394:	4603      	mov	r3, r0
}
   27396:	f3bf 8f5b 	dmb	ish
   2739a:	e853 0f00 	ldrex	r0, [r3]
   2739e:	ea00 0201 	and.w	r2, r0, r1
   273a2:	e843 2c00 	strex	ip, r2, [r3]
   273a6:	f1bc 0f00 	cmp.w	ip, #0
   273aa:	d1f6      	bne.n	2739a <atomic_and+0x6>
   273ac:	f3bf 8f5b 	dmb	ish
   273b0:	4770      	bx	lr

000273b2 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   273b2:	680b      	ldr	r3, [r1, #0]
   273b4:	6003      	str	r3, [r0, #0]
   273b6:	888b      	ldrh	r3, [r1, #4]
   273b8:	8083      	strh	r3, [r0, #4]
   273ba:	798b      	ldrb	r3, [r1, #6]
   273bc:	7183      	strb	r3, [r0, #6]
   273be:	4770      	bx	lr

000273c0 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   273c0:	2301      	movs	r3, #1
{
   273c2:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   273c4:	fa03 f101 	lsl.w	r1, r3, r1
{
   273c8:	4604      	mov	r4, r0
	if (val) {
   273ca:	b162      	cbz	r2, 273e6 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   273cc:	f3bf 8f5b 	dmb	ish
   273d0:	e854 3f00 	ldrex	r3, [r4]
   273d4:	430b      	orrs	r3, r1
   273d6:	e844 3200 	strex	r2, r3, [r4]
   273da:	2a00      	cmp	r2, #0
   273dc:	d1f8      	bne.n	273d0 <atomic_set_bit_to+0x10>
   273de:	f3bf 8f5b 	dmb	ish
	}
}
   273e2:	bc10      	pop	{r4}
   273e4:	4770      	bx	lr
   273e6:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   273e8:	43c9      	mvns	r1, r1
   273ea:	f7ff bfd3 	b.w	27394 <atomic_and>

000273ee <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   273ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273f2:	b087      	sub	sp, #28
   273f4:	4605      	mov	r5, r0
   273f6:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   273fa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   273fe:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   27402:	460c      	mov	r4, r1
   27404:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   27406:	2100      	movs	r1, #0
   27408:	2210      	movs	r2, #16
   2740a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2740c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2740e:	f003 fb45 	bl	2aa9c <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   27412:	b186      	cbz	r6, 27436 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   27414:	f7e1 fe5c 	bl	90d0 <bt_get_name>
   27418:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2741a:	2c00      	cmp	r4, #0
   2741c:	d139      	bne.n	27492 <le_adv_update.constprop.0+0xa4>
   2741e:	2f00      	cmp	r7, #0
   27420:	d142      	bne.n	274a8 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   27422:	4658      	mov	r0, fp
   27424:	f7d9 fce7 	bl	df6 <strlen>
   27428:	2309      	movs	r3, #9
   2742a:	f88d 3000 	strb.w	r3, [sp]
   2742e:	f88d 0001 	strb.w	r0, [sp, #1]
   27432:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   27436:	2e01      	cmp	r6, #1
			d_len = 2;
   27438:	bf0c      	ite	eq
   2743a:	2202      	moveq	r2, #2
		d_len = 1;
   2743c:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2743e:	a902      	add	r1, sp, #8
   27440:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   27444:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   27448:	bf04      	itt	eq
   2744a:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2744e:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   27450:	f7e2 facc 	bl	99ec <hci_set_ad>
		if (err) {
   27454:	4604      	mov	r4, r0
   27456:	b978      	cbnz	r0, 27478 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   27458:	f1ba 0f00 	cmp.w	sl, #0
   2745c:	d126      	bne.n	274ac <le_adv_update.constprop.0+0xbe>
   2745e:	3510      	adds	r5, #16
   27460:	f3bf 8f5b 	dmb	ish
   27464:	e855 3f00 	ldrex	r3, [r5]
   27468:	f043 0304 	orr.w	r3, r3, #4
   2746c:	e845 3200 	strex	r2, r3, [r5]
   27470:	2a00      	cmp	r2, #0
   27472:	d1f7      	bne.n	27464 <le_adv_update.constprop.0+0x76>
   27474:	f3bf 8f5b 	dmb	ish
}
   27478:	4620      	mov	r0, r4
   2747a:	b007      	add	sp, #28
   2747c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27480:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   27484:	3a08      	subs	r2, #8
   27486:	2a01      	cmp	r2, #1
   27488:	d925      	bls.n	274d6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2748a:	3301      	adds	r3, #1
   2748c:	4598      	cmp	r8, r3
   2748e:	d1f7      	bne.n	27480 <le_adv_update.constprop.0+0x92>
   27490:	e7c5      	b.n	2741e <le_adv_update.constprop.0+0x30>
   27492:	2300      	movs	r3, #0
   27494:	e7fa      	b.n	2748c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   27496:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2749a:	3a08      	subs	r2, #8
   2749c:	2a01      	cmp	r2, #1
   2749e:	d91a      	bls.n	274d6 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   274a0:	3301      	adds	r3, #1
   274a2:	4599      	cmp	r9, r3
   274a4:	d1f7      	bne.n	27496 <le_adv_update.constprop.0+0xa8>
   274a6:	e7bc      	b.n	27422 <le_adv_update.constprop.0+0x34>
   274a8:	2300      	movs	r3, #0
   274aa:	e7fa      	b.n	274a2 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   274ac:	2e02      	cmp	r6, #2
   274ae:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   274b2:	bf08      	it	eq
   274b4:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   274b6:	a902      	add	r1, sp, #8
			d_len = 2;
   274b8:	bf08      	it	eq
   274ba:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   274bc:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   274c0:	bf08      	it	eq
   274c2:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   274c6:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   274ca:	f7e2 fa8f 	bl	99ec <hci_set_ad>
		if (err) {
   274ce:	2800      	cmp	r0, #0
   274d0:	d0c5      	beq.n	2745e <le_adv_update.constprop.0+0x70>
   274d2:	4604      	mov	r4, r0
   274d4:	e7d0      	b.n	27478 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   274d6:	f06f 0415 	mvn.w	r4, #21
   274da:	e7cd      	b.n	27478 <le_adv_update.constprop.0+0x8a>

000274dc <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   274dc:	6843      	ldr	r3, [r0, #4]
   274de:	f013 0008 	ands.w	r0, r3, #8
   274e2:	d00a      	beq.n	274fa <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   274e4:	035a      	lsls	r2, r3, #13
   274e6:	d407      	bmi.n	274f8 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   274e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   274ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   274f0:	bf0c      	ite	eq
   274f2:	2001      	moveq	r0, #1
   274f4:	2002      	movne	r0, #2
   274f6:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   274f8:	2001      	movs	r0, #1
}
   274fa:	4770      	bx	lr

000274fc <bt_le_adv_set_enable_legacy>:
{
   274fc:	b570      	push	{r4, r5, r6, lr}
   274fe:	4606      	mov	r6, r0
   27500:	b086      	sub	sp, #24
   27502:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   27504:	f242 000a 	movw	r0, #8202	; 0x200a
   27508:	2101      	movs	r1, #1
   2750a:	f7e0 feb5 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   2750e:	4604      	mov	r4, r0
   27510:	b1b0      	cbz	r0, 27540 <bt_le_adv_set_enable_legacy+0x44>
   27512:	3008      	adds	r0, #8
	if (enable) {
   27514:	b195      	cbz	r5, 2753c <bt_le_adv_set_enable_legacy+0x40>
   27516:	2101      	movs	r1, #1
   27518:	f002 fa26 	bl	29968 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2751c:	f106 0210 	add.w	r2, r6, #16
   27520:	a903      	add	r1, sp, #12
   27522:	4620      	mov	r0, r4
   27524:	9500      	str	r5, [sp, #0]
   27526:	2306      	movs	r3, #6
   27528:	f7e0 fe94 	bl	8254 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2752c:	2200      	movs	r2, #0
   2752e:	4621      	mov	r1, r4
   27530:	f242 000a 	movw	r0, #8202	; 0x200a
   27534:	f7e1 f808 	bl	8548 <bt_hci_cmd_send_sync>
}
   27538:	b006      	add	sp, #24
   2753a:	bd70      	pop	{r4, r5, r6, pc}
   2753c:	4629      	mov	r1, r5
   2753e:	e7eb      	b.n	27518 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   27540:	f06f 0068 	mvn.w	r0, #104	; 0x68
   27544:	e7f8      	b.n	27538 <bt_le_adv_set_enable_legacy+0x3c>

00027546 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   27546:	f7ff bfd9 	b.w	274fc <bt_le_adv_set_enable_legacy>

0002754a <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2754a:	3018      	adds	r0, #24
   2754c:	f002 bf33 	b.w	2a3b6 <k_work_cancel_delayable>

00027550 <atomic_and>:
{
   27550:	4603      	mov	r3, r0
}
   27552:	f3bf 8f5b 	dmb	ish
   27556:	e853 0f00 	ldrex	r0, [r3]
   2755a:	ea00 0201 	and.w	r2, r0, r1
   2755e:	e843 2c00 	strex	ip, r2, [r3]
   27562:	f1bc 0f00 	cmp.w	ip, #0
   27566:	d1f6      	bne.n	27556 <atomic_and+0x6>
   27568:	f3bf 8f5b 	dmb	ish
   2756c:	4770      	bx	lr

0002756e <bt_addr_le_copy>:
   2756e:	680b      	ldr	r3, [r1, #0]
   27570:	6003      	str	r3, [r0, #0]
   27572:	888b      	ldrh	r3, [r1, #4]
   27574:	8083      	strh	r3, [r0, #4]
   27576:	798b      	ldrb	r3, [r1, #6]
   27578:	7183      	strb	r3, [r0, #6]
   2757a:	4770      	bx	lr

0002757c <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2757c:	f7e2 bd18 	b.w	9fb0 <bt_le_scan_set_enable_legacy>

00027580 <atomic_and>:
{
   27580:	4603      	mov	r3, r0
}
   27582:	f3bf 8f5b 	dmb	ish
   27586:	e853 0f00 	ldrex	r0, [r3]
   2758a:	ea00 0201 	and.w	r2, r0, r1
   2758e:	e843 2c00 	strex	ip, r2, [r3]
   27592:	f1bc 0f00 	cmp.w	ip, #0
   27596:	d1f6      	bne.n	27586 <atomic_and+0x6>
   27598:	f3bf 8f5b 	dmb	ish
   2759c:	4770      	bx	lr

0002759e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2759e:	f3bf 8f5b 	dmb	ish
   275a2:	6800      	ldr	r0, [r0, #0]
   275a4:	f3bf 8f5b 	dmb	ish
}
   275a8:	4770      	bx	lr

000275aa <atomic_or>:
{
   275aa:	4603      	mov	r3, r0
}
   275ac:	f3bf 8f5b 	dmb	ish
   275b0:	e853 0f00 	ldrex	r0, [r3]
   275b4:	ea40 0201 	orr.w	r2, r0, r1
   275b8:	e843 2c00 	strex	ip, r2, [r3]
   275bc:	f1bc 0f00 	cmp.w	ip, #0
   275c0:	d1f6      	bne.n	275b0 <atomic_or+0x6>
   275c2:	f3bf 8f5b 	dmb	ish
   275c6:	4770      	bx	lr

000275c8 <bt_addr_le_copy>:
   275c8:	680b      	ldr	r3, [r1, #0]
   275ca:	6003      	str	r3, [r0, #0]
   275cc:	888b      	ldrh	r3, [r1, #4]
   275ce:	8083      	strh	r3, [r0, #4]
   275d0:	798b      	ldrb	r3, [r1, #6]
   275d2:	7183      	strb	r3, [r0, #6]
   275d4:	4770      	bx	lr

000275d6 <z_log_msg2_static_create.constprop.0>:
   275d6:	2300      	movs	r3, #0
   275d8:	f7fe b9ed 	b.w	259b6 <z_impl_z_log_msg2_static_create>

000275dc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   275dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   275de:	ab0a      	add	r3, sp, #40	; 0x28
   275e0:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   275e2:	9302      	str	r3, [sp, #8]
   275e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   275e6:	9301      	str	r3, [sp, #4]
   275e8:	2300      	movs	r3, #0
   275ea:	9300      	str	r3, [sp, #0]
   275ec:	2202      	movs	r2, #2
   275ee:	4618      	mov	r0, r3
   275f0:	f7de fe78 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
   275f4:	b007      	add	sp, #28
   275f6:	f85d fb04 	ldr.w	pc, [sp], #4

000275fa <tx_notify>:
{
   275fa:	b570      	push	{r4, r5, r6, lr}
   275fc:	4604      	mov	r4, r0
	__asm__ volatile(
   275fe:	f04f 0220 	mov.w	r2, #32
   27602:	f3ef 8311 	mrs	r3, BASEPRI
   27606:	f382 8812 	msr	BASEPRI_MAX, r2
   2760a:	f3bf 8f6f 	isb	sy
	return list->head;
   2760e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   27610:	b920      	cbnz	r0, 2761c <tx_notify+0x22>
	__asm__ volatile(
   27612:	f383 8811 	msr	BASEPRI, r3
   27616:	f3bf 8f6f 	isb	sy
}
   2761a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2761c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2761e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27620:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27622:	4288      	cmp	r0, r1
	list->tail = node;
   27624:	bf08      	it	eq
   27626:	6262      	streq	r2, [r4, #36]	; 0x24
   27628:	f383 8811 	msr	BASEPRI, r3
   2762c:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   27630:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   27634:	f7e2 ffd4 	bl	a5e0 <tx_free>
		cb(conn, user_data);
   27638:	4631      	mov	r1, r6
   2763a:	4620      	mov	r0, r4
   2763c:	47a8      	blx	r5
	while (1) {
   2763e:	e7de      	b.n	275fe <tx_notify+0x4>

00027640 <tx_complete_work>:
	tx_notify(conn);
   27640:	3828      	subs	r0, #40	; 0x28
   27642:	f7ff bfda 	b.w	275fa <tx_notify>

00027646 <bt_conn_reset_rx_state>:
{
   27646:	b510      	push	{r4, lr}
   27648:	4604      	mov	r4, r0
	if (!conn->rx) {
   2764a:	6900      	ldr	r0, [r0, #16]
   2764c:	b118      	cbz	r0, 27656 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2764e:	f7f8 fb8b 	bl	1fd68 <net_buf_unref>
	conn->rx = NULL;
   27652:	2300      	movs	r3, #0
   27654:	6123      	str	r3, [r4, #16]
}
   27656:	bd10      	pop	{r4, pc}

00027658 <conn_cleanup>:
{
   27658:	b570      	push	{r4, r5, r6, lr}
   2765a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2765c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   27660:	2200      	movs	r2, #0
   27662:	2300      	movs	r3, #0
   27664:	4630      	mov	r0, r6
   27666:	f002 f90d 	bl	29884 <net_buf_get>
   2766a:	4605      	mov	r5, r0
   2766c:	b950      	cbnz	r0, 27684 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2766e:	4620      	mov	r0, r4
   27670:	f7ff ffe9 	bl	27646 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   27674:	f104 0058 	add.w	r0, r4, #88	; 0x58
   27678:	2200      	movs	r2, #0
}
   2767a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2767e:	2300      	movs	r3, #0
   27680:	f7fb b8fa 	b.w	22878 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   27684:	6968      	ldr	r0, [r5, #20]
   27686:	b108      	cbz	r0, 2768c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   27688:	f7e2 ffaa 	bl	a5e0 <tx_free>
		net_buf_unref(buf);
   2768c:	4628      	mov	r0, r5
   2768e:	f7f8 fb6b 	bl	1fd68 <net_buf_unref>
   27692:	e7e5      	b.n	27660 <conn_cleanup+0x8>

00027694 <bt_conn_ref>:
{
   27694:	b510      	push	{r4, lr}
   27696:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   27698:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2769c:	4610      	mov	r0, r2
   2769e:	f7ff ff7e 	bl	2759e <atomic_get>
		if (!old) {
   276a2:	b180      	cbz	r0, 276c6 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   276a4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   276a8:	1c41      	adds	r1, r0, #1
   276aa:	e852 4f00 	ldrex	r4, [r2]
   276ae:	4284      	cmp	r4, r0
   276b0:	d104      	bne.n	276bc <bt_conn_ref+0x28>
   276b2:	e842 1c00 	strex	ip, r1, [r2]
   276b6:	f1bc 0f00 	cmp.w	ip, #0
   276ba:	d1f6      	bne.n	276aa <bt_conn_ref+0x16>
   276bc:	f3bf 8f5b 	dmb	ish
   276c0:	d1ec      	bne.n	2769c <bt_conn_ref+0x8>
}
   276c2:	4618      	mov	r0, r3
   276c4:	bd10      	pop	{r4, pc}
			return NULL;
   276c6:	4603      	mov	r3, r0
   276c8:	e7fb      	b.n	276c2 <bt_conn_ref+0x2e>

000276ca <bt_conn_unref>:
{
   276ca:	b508      	push	{r3, lr}
   276cc:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   276ce:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   276d0:	f3bf 8f5b 	dmb	ish
   276d4:	e850 2f00 	ldrex	r2, [r0]
   276d8:	3a01      	subs	r2, #1
   276da:	e840 2100 	strex	r1, r2, [r0]
   276de:	2900      	cmp	r1, #0
   276e0:	d1f8      	bne.n	276d4 <bt_conn_unref+0xa>
   276e2:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   276e6:	789b      	ldrb	r3, [r3, #2]
   276e8:	2b01      	cmp	r3, #1
   276ea:	d106      	bne.n	276fa <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   276ec:	f7ff ff57 	bl	2759e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   276f0:	b918      	cbnz	r0, 276fa <bt_conn_unref+0x30>
}
   276f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   276f6:	f7e2 bc11 	b.w	9f1c <bt_le_adv_resume>
}
   276fa:	bd08      	pop	{r3, pc}

000276fc <conn_lookup_handle>:
{
   276fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27700:	4607      	mov	r7, r0
   27702:	460e      	mov	r6, r1
   27704:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   27706:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27708:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2770c:	42b4      	cmp	r4, r6
   2770e:	d103      	bne.n	27718 <conn_lookup_handle+0x1c>
	return NULL;
   27710:	2300      	movs	r3, #0
}
   27712:	4618      	mov	r0, r3
   27714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   27718:	fb09 7004 	mla	r0, r9, r4, r7
   2771c:	f7ff ffba 	bl	27694 <bt_conn_ref>
   27720:	4603      	mov	r3, r0
		if (!conn) {
   27722:	b158      	cbz	r0, 2773c <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   27724:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   27726:	2d01      	cmp	r5, #1
   27728:	d002      	beq.n	27730 <conn_lookup_handle+0x34>
   2772a:	3d07      	subs	r5, #7
   2772c:	2d01      	cmp	r5, #1
   2772e:	d803      	bhi.n	27738 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   27730:	881a      	ldrh	r2, [r3, #0]
   27732:	4542      	cmp	r2, r8
   27734:	d0ed      	beq.n	27712 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   27736:	4618      	mov	r0, r3
   27738:	f7ff ffc7 	bl	276ca <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2773c:	3401      	adds	r4, #1
   2773e:	e7e5      	b.n	2770c <conn_lookup_handle+0x10>

00027740 <bt_conn_connected>:
{
   27740:	b510      	push	{r4, lr}
   27742:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   27744:	f7e3 fe7e 	bl	b444 <bt_l2cap_connected>
	notify_connected(conn);
   27748:	4620      	mov	r0, r4
}
   2774a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2774e:	f7e2 bf51 	b.w	a5f4 <notify_connected>

00027752 <bt_conn_le_start_encryption>:
{
   27752:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27756:	4681      	mov	r9, r0
   27758:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2775a:	f242 0019 	movw	r0, #8217	; 0x2019
   2775e:	211c      	movs	r1, #28
{
   27760:	9e08      	ldr	r6, [sp, #32]
   27762:	4690      	mov	r8, r2
   27764:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   27766:	f7e0 fd87 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   2776a:	4605      	mov	r5, r0
   2776c:	b338      	cbz	r0, 277be <bt_conn_le_start_encryption+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2776e:	211c      	movs	r1, #28
   27770:	3008      	adds	r0, #8
   27772:	f002 f8ea 	bl	2994a <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   27776:	4603      	mov	r3, r0
   27778:	f8b9 2000 	ldrh.w	r2, [r9]
   2777c:	f823 2b02 	strh.w	r2, [r3], #2
   27780:	6822      	ldr	r2, [r4, #0]
   27782:	f8c0 2002 	str.w	r2, [r0, #2]
   27786:	6862      	ldr	r2, [r4, #4]
   27788:	605a      	str	r2, [r3, #4]
   2778a:	f8b8 3000 	ldrh.w	r3, [r8]
   2778e:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
   27790:	f100 040c 	add.w	r4, r0, #12
   27794:	4632      	mov	r2, r6
   27796:	4639      	mov	r1, r7
   27798:	4620      	mov	r0, r4
   2779a:	f003 f95e 	bl	2aa5a <memcpy>
	if (len < sizeof(cp->ltk)) {
   2779e:	2e0f      	cmp	r6, #15
   277a0:	d805      	bhi.n	277ae <bt_conn_le_start_encryption+0x5c>
__ssp_bos_icheck3(memset, void *, int)
   277a2:	f1c6 0210 	rsb	r2, r6, #16
   277a6:	2100      	movs	r1, #0
   277a8:	19a0      	adds	r0, r4, r6
   277aa:	f003 f977 	bl	2aa9c <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   277ae:	4629      	mov	r1, r5
   277b0:	2200      	movs	r2, #0
}
   277b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   277b6:	f242 0019 	movw	r0, #8217	; 0x2019
   277ba:	f7e0 bec5 	b.w	8548 <bt_hci_cmd_send_sync>
}
   277be:	f06f 0068 	mvn.w	r0, #104	; 0x68
   277c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000277c6 <bt_conn_set_security>:
{
   277c6:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   277c8:	7b43      	ldrb	r3, [r0, #13]
   277ca:	2b07      	cmp	r3, #7
{
   277cc:	4604      	mov	r4, r0
   277ce:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   277d0:	d11c      	bne.n	2780c <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   277d2:	7a43      	ldrb	r3, [r0, #9]
   277d4:	428b      	cmp	r3, r1
   277d6:	d21c      	bcs.n	27812 <bt_conn_set_security+0x4c>
   277d8:	7a83      	ldrb	r3, [r0, #10]
   277da:	428b      	cmp	r3, r1
   277dc:	d219      	bcs.n	27812 <bt_conn_set_security+0x4c>
	if (val) {
   277de:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   277e0:	f100 0004 	add.w	r0, r0, #4
   277e4:	d50d      	bpl.n	27802 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   277e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
   277ea:	f7ff fede 	bl	275aa <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   277ee:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   277f2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   277f4:	4620      	mov	r0, r4
   277f6:	f001 fea9 	bl	2954c <bt_smp_start_security>
	if (err) {
   277fa:	b108      	cbz	r0, 27800 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   277fc:	7a63      	ldrb	r3, [r4, #9]
   277fe:	72a3      	strb	r3, [r4, #10]
}
   27800:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27802:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   27806:	f7ff febb 	bl	27580 <atomic_and>
   2780a:	e7f0      	b.n	277ee <bt_conn_set_security+0x28>
		return -ENOTCONN;
   2780c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   27810:	e7f6      	b.n	27800 <bt_conn_set_security+0x3a>
		return 0;
   27812:	2000      	movs	r0, #0
   27814:	e7f4      	b.n	27800 <bt_conn_set_security+0x3a>

00027816 <bt_conn_get_security>:
}
   27816:	7a40      	ldrb	r0, [r0, #9]
   27818:	4770      	bx	lr

0002781a <bt_conn_is_peer_addr_le>:
{
   2781a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2781c:	7a03      	ldrb	r3, [r0, #8]
   2781e:	428b      	cmp	r3, r1
{
   27820:	4604      	mov	r4, r0
   27822:	4615      	mov	r5, r2
	if (id != conn->id) {
   27824:	d115      	bne.n	27852 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   27826:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2782a:	2207      	movs	r2, #7
   2782c:	4628      	mov	r0, r5
   2782e:	f003 f904 	bl	2aa3a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   27832:	b180      	cbz	r0, 27856 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   27834:	78e3      	ldrb	r3, [r4, #3]
   27836:	2207      	movs	r2, #7
   27838:	b943      	cbnz	r3, 2784c <bt_conn_is_peer_addr_le+0x32>
   2783a:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2783e:	4628      	mov	r0, r5
   27840:	f003 f8fb 	bl	2aa3a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   27844:	fab0 f080 	clz	r0, r0
   27848:	0940      	lsrs	r0, r0, #5
}
   2784a:	bd38      	pop	{r3, r4, r5, pc}
   2784c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   27850:	e7f5      	b.n	2783e <bt_conn_is_peer_addr_le+0x24>
		return false;
   27852:	2000      	movs	r0, #0
   27854:	e7f9      	b.n	2784a <bt_conn_is_peer_addr_le+0x30>
		return true;
   27856:	2001      	movs	r0, #1
   27858:	e7f7      	b.n	2784a <bt_conn_is_peer_addr_le+0x30>

0002785a <bt_conn_get_dst>:
}
   2785a:	3088      	adds	r0, #136	; 0x88
   2785c:	4770      	bx	lr

0002785e <bt_conn_disconnect>:
{
   2785e:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   27860:	7883      	ldrb	r3, [r0, #2]
   27862:	2b01      	cmp	r3, #1
{
   27864:	4604      	mov	r4, r0
   27866:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   27868:	d103      	bne.n	27872 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2786a:	2100      	movs	r1, #0
   2786c:	3088      	adds	r0, #136	; 0x88
   2786e:	f7e3 fb8f 	bl	af90 <bt_le_set_auto_conn>
	switch (conn->state) {
   27872:	7b63      	ldrb	r3, [r4, #13]
   27874:	3b02      	subs	r3, #2
   27876:	2b06      	cmp	r3, #6
   27878:	d805      	bhi.n	27886 <bt_conn_disconnect+0x28>
   2787a:	e8df f003 	tbb	[pc, r3]
   2787e:	0408      	.short	0x0408
   27880:	1a120404 	.word	0x1a120404
   27884:	10          	.byte	0x10
   27885:	00          	.byte	0x00
   27886:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2788a:	4628      	mov	r0, r5
   2788c:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2788e:	4620      	mov	r0, r4
		conn->err = reason;
   27890:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   27892:	2100      	movs	r1, #0
   27894:	f7e3 f8e0 	bl	aa58 <bt_conn_set_state>
			bt_le_scan_update(false);
   27898:	2000      	movs	r0, #0
   2789a:	f7e2 fc0b 	bl	a0b4 <bt_le_scan_update>
		return 0;
   2789e:	2500      	movs	r5, #0
   278a0:	e7f3      	b.n	2788a <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   278a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
   278a6:	f002 fd86 	bl	2a3b6 <k_work_cancel_delayable>
}
   278aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   278ae:	f7e0 bf53 	b.w	8758 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   278b2:	4629      	mov	r1, r5
   278b4:	8820      	ldrh	r0, [r4, #0]
   278b6:	f7ff fb7c 	bl	26fb2 <bt_hci_disconnect>
	if (err) {
   278ba:	4605      	mov	r5, r0
   278bc:	2800      	cmp	r0, #0
   278be:	d1e4      	bne.n	2788a <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   278c0:	7b63      	ldrb	r3, [r4, #13]
   278c2:	2b07      	cmp	r3, #7
   278c4:	d1e1      	bne.n	2788a <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   278c6:	2108      	movs	r1, #8
   278c8:	4620      	mov	r0, r4
   278ca:	f7e3 f8c5 	bl	aa58 <bt_conn_set_state>
   278ce:	e7dc      	b.n	2788a <bt_conn_disconnect+0x2c>

000278d0 <bt_conn_le_conn_update>:
{
   278d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278d2:	4607      	mov	r7, r0
   278d4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   278d6:	f242 0013 	movw	r0, #8211	; 0x2013
   278da:	210e      	movs	r1, #14
   278dc:	f7e0 fccc 	bl	8278 <bt_hci_cmd_create>
	if (!buf) {
   278e0:	4606      	mov	r6, r0
   278e2:	b1d0      	cbz	r0, 2791a <bt_conn_le_conn_update+0x4a>
   278e4:	210e      	movs	r1, #14
   278e6:	3008      	adds	r0, #8
   278e8:	f002 f82f 	bl	2994a <net_buf_simple_add>
   278ec:	220e      	movs	r2, #14
   278ee:	4604      	mov	r4, r0
   278f0:	2100      	movs	r1, #0
   278f2:	f003 f8d3 	bl	2aa9c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   278f6:	883b      	ldrh	r3, [r7, #0]
   278f8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   278fa:	882b      	ldrh	r3, [r5, #0]
   278fc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   278fe:	886b      	ldrh	r3, [r5, #2]
   27900:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   27902:	88ab      	ldrh	r3, [r5, #4]
   27904:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   27906:	88eb      	ldrh	r3, [r5, #6]
   27908:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2790a:	4631      	mov	r1, r6
   2790c:	2200      	movs	r2, #0
}
   2790e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   27912:	f242 0013 	movw	r0, #8211	; 0x2013
   27916:	f7e0 be17 	b.w	8548 <bt_hci_cmd_send_sync>
}
   2791a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2791e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00027920 <bt_conn_le_param_update>:
	if (conn->le.interval >= param->interval_min &&
   27920:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
{
   27924:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
   27926:	8808      	ldrh	r0, [r1, #0]
   27928:	4290      	cmp	r0, r2
{
   2792a:	b510      	push	{r4, lr}
	if (conn->le.interval >= param->interval_min &&
   2792c:	d814      	bhi.n	27958 <bt_conn_le_param_update+0x38>
   2792e:	8848      	ldrh	r0, [r1, #2]
   27930:	4290      	cmp	r0, r2
   27932:	d311      	bcc.n	27958 <bt_conn_le_param_update+0x38>
	    conn->le.interval <= param->interval_max &&
   27934:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
   27938:	888a      	ldrh	r2, [r1, #4]
   2793a:	4290      	cmp	r0, r2
   2793c:	d10c      	bne.n	27958 <bt_conn_le_param_update+0x38>
	    conn->le.latency == param->latency &&
   2793e:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
   27942:	88ca      	ldrh	r2, [r1, #6]
   27944:	4290      	cmp	r0, r2
   27946:	d107      	bne.n	27958 <bt_conn_le_param_update+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   27948:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2794c:	1d18      	adds	r0, r3, #4
   2794e:	f7ff fe17 	bl	27580 <atomic_and>
		return -EALREADY;
   27952:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   27956:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   27958:	78da      	ldrb	r2, [r3, #3]
   2795a:	b922      	cbnz	r2, 27966 <bt_conn_le_param_update+0x46>
}
   2795c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return send_conn_le_param_update(conn, param);
   27960:	4618      	mov	r0, r3
   27962:	f7e3 bb79 	b.w	b058 <send_conn_le_param_update>
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   27966:	1d1a      	adds	r2, r3, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   27968:	4610      	mov	r0, r2
   2796a:	f7ff fe18 	bl	2759e <atomic_get>
   2796e:	f3c0 2400 	ubfx	r4, r0, #8, #1
   27972:	05c0      	lsls	r0, r0, #23
   27974:	d4f2      	bmi.n	2795c <bt_conn_le_param_update+0x3c>
		conn->le.interval_min = param->interval_min;
   27976:	8808      	ldrh	r0, [r1, #0]
   27978:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   2797c:	8848      	ldrh	r0, [r1, #2]
   2797e:	f8a3 00a2 	strh.w	r0, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   27982:	8888      	ldrh	r0, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   27984:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   27986:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   2798a:	f8a3 10aa 	strh.w	r1, [r3, #170]	; 0xaa
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2798e:	4610      	mov	r0, r2
   27990:	f44f 7100 	mov.w	r1, #512	; 0x200
   27994:	f7ff fe09 	bl	275aa <atomic_or>
	return 0;
   27998:	4620      	mov	r0, r4
}
   2799a:	e7dc      	b.n	27956 <bt_conn_le_param_update+0x36>

0002799c <l2cap_connected>:
}
   2799c:	4770      	bx	lr

0002799e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2799e:	3010      	adds	r0, #16
   279a0:	f002 bd09 	b.w	2a3b6 <k_work_cancel_delayable>

000279a4 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   279a4:	2300      	movs	r3, #0
   279a6:	f7fe b806 	b.w	259b6 <z_impl_z_log_msg2_static_create>

000279aa <bt_l2cap_chan_remove>:
	return list->head;
   279aa:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   279ac:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   279ae:	b173      	cbz	r3, 279ce <bt_l2cap_chan_remove+0x24>
   279b0:	3b08      	subs	r3, #8
   279b2:	2500      	movs	r5, #0
	return node->next;
   279b4:	461a      	mov	r2, r3
		if (chan == ch) {
   279b6:	4299      	cmp	r1, r3
   279b8:	f852 4f08 	ldr.w	r4, [r2, #8]!
   279bc:	d10d      	bne.n	279da <bt_l2cap_chan_remove+0x30>
	return list->tail;
   279be:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   279c0:	b935      	cbnz	r5, 279d0 <bt_l2cap_chan_remove+0x26>
   279c2:	4291      	cmp	r1, r2
	list->head = node;
   279c4:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   279c6:	d100      	bne.n	279ca <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   279c8:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   279ca:	2200      	movs	r2, #0
   279cc:	609a      	str	r2, [r3, #8]
}
   279ce:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   279d0:	4291      	cmp	r1, r2
	parent->next = child;
   279d2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   279d4:	bf08      	it	eq
   279d6:	6545      	streq	r5, [r0, #84]	; 0x54
}
   279d8:	e7f7      	b.n	279ca <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   279da:	2c00      	cmp	r4, #0
   279dc:	d0f7      	beq.n	279ce <bt_l2cap_chan_remove+0x24>
   279de:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   279e2:	4615      	mov	r5, r2
   279e4:	e7e6      	b.n	279b4 <bt_l2cap_chan_remove+0xa>

000279e6 <bt_l2cap_chan_del>:
{
   279e6:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   279e8:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   279ec:	4604      	mov	r4, r0
	if (!chan->conn) {
   279ee:	b123      	cbz	r3, 279fa <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   279f0:	686b      	ldr	r3, [r5, #4]
   279f2:	b103      	cbz	r3, 279f6 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   279f4:	4798      	blx	r3
	chan->conn = NULL;
   279f6:	2300      	movs	r3, #0
   279f8:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   279fa:	68e3      	ldr	r3, [r4, #12]
   279fc:	b10b      	cbz	r3, 27a02 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   279fe:	4620      	mov	r0, r4
   27a00:	4798      	blx	r3
	if (ops->released) {
   27a02:	69eb      	ldr	r3, [r5, #28]
   27a04:	b11b      	cbz	r3, 27a0e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   27a06:	4620      	mov	r0, r4
}
   27a08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   27a0c:	4718      	bx	r3
}
   27a0e:	bd70      	pop	{r4, r5, r6, pc}

00027a10 <bt_l2cap_disconnected>:
	return list->head;
   27a10:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   27a12:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27a14:	b160      	cbz	r0, 27a30 <bt_l2cap_disconnected+0x20>
	return node->next;
   27a16:	f850 4908 	ldr.w	r4, [r0], #-8
   27a1a:	b104      	cbz	r4, 27a1e <bt_l2cap_disconnected+0xe>
   27a1c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   27a1e:	f7ff ffe2 	bl	279e6 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27a22:	b12c      	cbz	r4, 27a30 <bt_l2cap_disconnected+0x20>
   27a24:	68a3      	ldr	r3, [r4, #8]
   27a26:	b103      	cbz	r3, 27a2a <bt_l2cap_disconnected+0x1a>
   27a28:	3b08      	subs	r3, #8
{
   27a2a:	4620      	mov	r0, r4
   27a2c:	461c      	mov	r4, r3
   27a2e:	e7f6      	b.n	27a1e <bt_l2cap_disconnected+0xe>
}
   27a30:	bd10      	pop	{r4, pc}

00027a32 <bt_l2cap_security_changed>:
	return list->head;
   27a32:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   27a34:	b538      	push	{r3, r4, r5, lr}
   27a36:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27a38:	b178      	cbz	r0, 27a5a <bt_l2cap_security_changed+0x28>
	return node->next;
   27a3a:	f850 4908 	ldr.w	r4, [r0], #-8
   27a3e:	b104      	cbz	r4, 27a42 <bt_l2cap_security_changed+0x10>
   27a40:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   27a42:	6843      	ldr	r3, [r0, #4]
   27a44:	689b      	ldr	r3, [r3, #8]
   27a46:	b10b      	cbz	r3, 27a4c <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   27a48:	4629      	mov	r1, r5
   27a4a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   27a4c:	b12c      	cbz	r4, 27a5a <bt_l2cap_security_changed+0x28>
   27a4e:	68a3      	ldr	r3, [r4, #8]
   27a50:	b103      	cbz	r3, 27a54 <bt_l2cap_security_changed+0x22>
   27a52:	3b08      	subs	r3, #8
{
   27a54:	4620      	mov	r0, r4
   27a56:	461c      	mov	r4, r3
   27a58:	e7f3      	b.n	27a42 <bt_l2cap_security_changed+0x10>
}
   27a5a:	bd38      	pop	{r3, r4, r5, pc}

00027a5c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   27a5c:	3104      	adds	r1, #4
   27a5e:	f7e3 b91b 	b.w	ac98 <bt_conn_create_pdu_timeout>

00027a62 <bt_l2cap_send_cb>:
{
   27a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a66:	4614      	mov	r4, r2
   27a68:	4605      	mov	r5, r0
   27a6a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   27a6c:	f102 0008 	add.w	r0, r2, #8
   27a70:	2104      	movs	r1, #4
   27a72:	461e      	mov	r6, r3
   27a74:	f8dd 8018 	ldr.w	r8, [sp, #24]
   27a78:	f001 ff88 	bl	2998c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27a7c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   27a7e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   27a80:	3a04      	subs	r2, #4
   27a82:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27a84:	4643      	mov	r3, r8
   27a86:	4632      	mov	r2, r6
   27a88:	4621      	mov	r1, r4
   27a8a:	4628      	mov	r0, r5
}
   27a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   27a90:	f7e2 bf40 	b.w	a914 <bt_conn_send_cb>

00027a94 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   27a94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   27a96:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   27a98:	2202      	movs	r2, #2
   27a9a:	2001      	movs	r0, #1
   27a9c:	f7e3 fc64 	bl	b368 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   27aa0:	4604      	mov	r4, r0
   27aa2:	b198      	cbz	r0, 27acc <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   27aa4:	2102      	movs	r1, #2
   27aa6:	3008      	adds	r0, #8
   27aa8:	f001 ff4f 	bl	2994a <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   27aac:	2300      	movs	r3, #0
   27aae:	7003      	strb	r3, [r0, #0]
   27ab0:	7043      	strb	r3, [r0, #1]
   27ab2:	4622      	mov	r2, r4
   27ab4:	9300      	str	r3, [sp, #0]
   27ab6:	2105      	movs	r1, #5
   27ab8:	4628      	mov	r0, r5
   27aba:	f7ff ffd2 	bl	27a62 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   27abe:	b128      	cbz	r0, 27acc <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   27ac0:	4620      	mov	r0, r4
}
   27ac2:	b003      	add	sp, #12
   27ac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   27ac8:	f7f8 b94e 	b.w	1fd68 <net_buf_unref>
}
   27acc:	b003      	add	sp, #12
   27ace:	bd30      	pop	{r4, r5, pc}

00027ad0 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   27ad0:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27ad2:	b138      	cbz	r0, 27ae4 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27ad4:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   27ad8:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27ada:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   27ade:	d001      	beq.n	27ae4 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   27ae0:	6880      	ldr	r0, [r0, #8]
   27ae2:	e7f6      	b.n	27ad2 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   27ae4:	4770      	bx	lr

00027ae6 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   27ae6:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27ae8:	b138      	cbz	r0, 27afa <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27aea:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   27aee:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   27af0:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   27af4:	d001      	beq.n	27afa <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   27af6:	6880      	ldr	r0, [r0, #8]
   27af8:	e7f6      	b.n	27ae8 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   27afa:	4770      	bx	lr

00027afc <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   27afc:	4770      	bx	lr

00027afe <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   27afe:	4603      	mov	r3, r0
	return list->head;
   27b00:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   27b02:	b128      	cbz	r0, 27b10 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27b04:	6859      	ldr	r1, [r3, #4]
	return node->next;
   27b06:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   27b08:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   27b0a:	4288      	cmp	r0, r1
	list->tail = node;
   27b0c:	bf08      	it	eq
   27b0e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   27b10:	4770      	bx	lr

00027b12 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   27b12:	4603      	mov	r3, r0
	size_t bytes = 0;
   27b14:	2000      	movs	r0, #0

	while (buf) {
   27b16:	b903      	cbnz	r3, 27b1a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   27b18:	4770      	bx	lr
		bytes += buf->len;
   27b1a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   27b1c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   27b1e:	4410      	add	r0, r2
		buf = buf->frags;
   27b20:	e7f9      	b.n	27b16 <net_buf_frags_len+0x4>

00027b22 <att_sent>:
	if (chan->ops->sent) {
   27b22:	684b      	ldr	r3, [r1, #4]
   27b24:	695b      	ldr	r3, [r3, #20]
{
   27b26:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   27b28:	b103      	cbz	r3, 27b2c <att_sent+0xa>
		chan->ops->sent(chan);
   27b2a:	4718      	bx	r3
}
   27b2c:	4770      	bx	lr

00027b2e <attr_read_type_cb>:
{
   27b2e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   27b30:	68d4      	ldr	r4, [r2, #12]
   27b32:	7823      	ldrb	r3, [r4, #0]
   27b34:	3102      	adds	r1, #2
   27b36:	b913      	cbnz	r3, 27b3e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   27b38:	7021      	strb	r1, [r4, #0]
	return true;
   27b3a:	2001      	movs	r0, #1
   27b3c:	e006      	b.n	27b4c <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   27b3e:	428b      	cmp	r3, r1
   27b40:	d0fb      	beq.n	27b3a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   27b42:	8983      	ldrh	r3, [r0, #12]
   27b44:	3b02      	subs	r3, #2
   27b46:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   27b48:	2000      	movs	r0, #0
   27b4a:	6110      	str	r0, [r2, #16]
}
   27b4c:	bd10      	pop	{r4, pc}

00027b4e <att_prepare_write_req>:
}
   27b4e:	2006      	movs	r0, #6
   27b50:	4770      	bx	lr

00027b52 <att_op_get_type>:
	switch (op) {
   27b52:	281e      	cmp	r0, #30
   27b54:	d816      	bhi.n	27b84 <att_op_get_type+0x32>
   27b56:	b308      	cbz	r0, 27b9c <att_op_get_type+0x4a>
   27b58:	1e43      	subs	r3, r0, #1
   27b5a:	2b1d      	cmp	r3, #29
   27b5c:	d81e      	bhi.n	27b9c <att_op_get_type+0x4a>
   27b5e:	e8df f003 	tbb	[pc, r3]
   27b62:	2317      	.short	0x2317
   27b64:	23172317 	.word	0x23172317
   27b68:	23172317 	.word	0x23172317
   27b6c:	23172317 	.word	0x23172317
   27b70:	23172317 	.word	0x23172317
   27b74:	231d1d17 	.word	0x231d1d17
   27b78:	1d172317 	.word	0x1d172317
   27b7c:	0f1b1d19 	.word	0x0f1b1d19
   27b80:	2004      	movs	r0, #4
   27b82:	4770      	bx	lr
   27b84:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   27b88:	2b52      	cmp	r3, #82	; 0x52
   27b8a:	d107      	bne.n	27b9c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   27b8c:	2000      	movs	r0, #0
}
   27b8e:	4770      	bx	lr
		return ATT_RESPONSE;
   27b90:	2002      	movs	r0, #2
   27b92:	4770      	bx	lr
		return ATT_NOTIFICATION;
   27b94:	2003      	movs	r0, #3
   27b96:	4770      	bx	lr
		return ATT_INDICATION;
   27b98:	2005      	movs	r0, #5
   27b9a:	4770      	bx	lr
		return ATT_COMMAND;
   27b9c:	f010 0f40 	tst.w	r0, #64	; 0x40
   27ba0:	bf0c      	ite	eq
   27ba2:	2006      	moveq	r0, #6
   27ba4:	2000      	movne	r0, #0
   27ba6:	4770      	bx	lr
		return ATT_REQUEST;
   27ba8:	2001      	movs	r0, #1
   27baa:	4770      	bx	lr

00027bac <att_notify_mult>:
{
   27bac:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   27bae:	6803      	ldr	r3, [r0, #0]
   27bb0:	898a      	ldrh	r2, [r1, #12]
   27bb2:	6818      	ldr	r0, [r3, #0]
   27bb4:	6889      	ldr	r1, [r1, #8]
   27bb6:	f7e6 f853 	bl	dc60 <bt_gatt_mult_notification>
}
   27bba:	2000      	movs	r0, #0
   27bbc:	bd08      	pop	{r3, pc}

00027bbe <att_notify>:
{
   27bbe:	b538      	push	{r3, r4, r5, lr}
   27bc0:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   27bc2:	f101 0008 	add.w	r0, r1, #8
   27bc6:	460c      	mov	r4, r1
   27bc8:	f001 ff00 	bl	299cc <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   27bcc:	682d      	ldr	r5, [r5, #0]
   27bce:	89a3      	ldrh	r3, [r4, #12]
   27bd0:	68a2      	ldr	r2, [r4, #8]
   27bd2:	4601      	mov	r1, r0
   27bd4:	6828      	ldr	r0, [r5, #0]
   27bd6:	f001 f89f 	bl	28d18 <bt_gatt_notification>
}
   27bda:	2000      	movs	r0, #0
   27bdc:	bd38      	pop	{r3, r4, r5, pc}

00027bde <att_chan_mtu_updated>:
{
   27bde:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   27be0:	6806      	ldr	r6, [r0, #0]
	return list->head;
   27be2:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27be4:	b1e3      	cbz	r3, 27c20 <att_chan_mtu_updated+0x42>
	return node->next;
   27be6:	681a      	ldr	r2, [r3, #0]
   27be8:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   27bec:	b10a      	cbz	r2, 27bf2 <att_chan_mtu_updated+0x14>
   27bee:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   27bf2:	2300      	movs	r3, #0
   27bf4:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   27bf6:	42a8      	cmp	r0, r5
   27bf8:	d009      	beq.n	27c0e <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   27bfa:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   27bfe:	42a1      	cmp	r1, r4
   27c00:	bf38      	it	cc
   27c02:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   27c04:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   27c08:	42a3      	cmp	r3, r4
   27c0a:	bf38      	it	cc
   27c0c:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   27c0e:	b142      	cbz	r2, 27c22 <att_chan_mtu_updated+0x44>
   27c10:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   27c14:	b10c      	cbz	r4, 27c1a <att_chan_mtu_updated+0x3c>
   27c16:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   27c1a:	4615      	mov	r5, r2
   27c1c:	4622      	mov	r2, r4
   27c1e:	e7ea      	b.n	27bf6 <att_chan_mtu_updated+0x18>
   27c20:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27c22:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   27c26:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   27c2a:	428c      	cmp	r4, r1
   27c2c:	d801      	bhi.n	27c32 <att_chan_mtu_updated+0x54>
   27c2e:	429a      	cmp	r2, r3
   27c30:	d909      	bls.n	27c46 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27c32:	429a      	cmp	r2, r3
   27c34:	bf38      	it	cc
   27c36:	461a      	movcc	r2, r3
   27c38:	42a1      	cmp	r1, r4
   27c3a:	6830      	ldr	r0, [r6, #0]
   27c3c:	bf38      	it	cc
   27c3e:	4621      	movcc	r1, r4
}
   27c40:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   27c42:	f7e6 b8b5 	b.w	ddb0 <bt_gatt_att_max_mtu_changed>
}
   27c46:	bc70      	pop	{r4, r5, r6}
   27c48:	4770      	bx	lr

00027c4a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   27c4a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   27c4c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   27c50:	2300      	movs	r3, #0
   27c52:	9300      	str	r3, [sp, #0]
   27c54:	461a      	mov	r2, r3
   27c56:	f7e5 f84d 	bl	ccf4 <bt_gatt_foreach_attr_type>
				  user_data);
}
   27c5a:	b005      	add	sp, #20
   27c5c:	f85d fb04 	ldr.w	pc, [sp], #4

00027c60 <attr_read_group_cb>:
	if (!data->rsp->len) {
   27c60:	68d0      	ldr	r0, [r2, #12]
   27c62:	7803      	ldrb	r3, [r0, #0]
   27c64:	3104      	adds	r1, #4
   27c66:	b913      	cbnz	r3, 27c6e <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   27c68:	7001      	strb	r1, [r0, #0]
	return true;
   27c6a:	2001      	movs	r0, #1
}
   27c6c:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   27c6e:	428b      	cmp	r3, r1
   27c70:	d0fb      	beq.n	27c6a <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   27c72:	6891      	ldr	r1, [r2, #8]
   27c74:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   27c76:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   27c78:	3b04      	subs	r3, #4
   27c7a:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   27c7c:	6110      	str	r0, [r2, #16]
		return false;
   27c7e:	4770      	bx	lr

00027c80 <chan_req_sent>:
	if (chan->req) {
   27c80:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   27c84:	b133      	cbz	r3, 27c94 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   27c86:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   27c8a:	2300      	movs	r3, #0
   27c8c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   27c90:	f7fa bdf2 	b.w	22878 <k_work_reschedule>
}
   27c94:	4770      	bx	lr

00027c96 <write_cb>:
{
   27c96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   27c98:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   27c9a:	4601      	mov	r1, r0
{
   27c9c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   27c9e:	222a      	movs	r2, #42	; 0x2a
   27ca0:	6820      	ldr	r0, [r4, #0]
   27ca2:	f000 ff1e 	bl	28ae2 <bt_gatt_check_perm>
   27ca6:	4605      	mov	r5, r0
   27ca8:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   27caa:	bb20      	cbnz	r0, 27cf6 <write_cb+0x60>
	if (!data->req) {
   27cac:	7a23      	ldrb	r3, [r4, #8]
   27cae:	b1ab      	cbz	r3, 27cdc <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   27cb0:	2b18      	cmp	r3, #24
   27cb2:	bf14      	ite	ne
   27cb4:	2300      	movne	r3, #0
   27cb6:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   27cb8:	9301      	str	r3, [sp, #4]
   27cba:	8a63      	ldrh	r3, [r4, #18]
   27cbc:	9300      	str	r3, [sp, #0]
   27cbe:	68b7      	ldr	r7, [r6, #8]
   27cc0:	8a23      	ldrh	r3, [r4, #16]
   27cc2:	68e2      	ldr	r2, [r4, #12]
   27cc4:	6820      	ldr	r0, [r4, #0]
   27cc6:	4631      	mov	r1, r6
   27cc8:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   27cca:	1e03      	subs	r3, r0, #0
   27ccc:	db08      	blt.n	27ce0 <write_cb+0x4a>
   27cce:	8a22      	ldrh	r2, [r4, #16]
   27cd0:	4293      	cmp	r3, r2
   27cd2:	d10e      	bne.n	27cf2 <write_cb+0x5c>
	data->err = 0U;
   27cd4:	2300      	movs	r3, #0
   27cd6:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   27cd8:	2501      	movs	r5, #1
   27cda:	e007      	b.n	27cec <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   27cdc:	2302      	movs	r3, #2
   27cde:	e7eb      	b.n	27cb8 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   27ce0:	f113 0fff 	cmn.w	r3, #255	; 0xff
   27ce4:	d305      	bcc.n	27cf2 <write_cb+0x5c>
		return -err;
   27ce6:	425b      	negs	r3, r3
   27ce8:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   27cea:	7523      	strb	r3, [r4, #20]
}
   27cec:	4628      	mov	r0, r5
   27cee:	b003      	add	sp, #12
   27cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   27cf2:	230e      	movs	r3, #14
   27cf4:	e7f9      	b.n	27cea <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   27cf6:	2500      	movs	r5, #0
   27cf8:	e7f8      	b.n	27cec <write_cb+0x56>

00027cfa <find_info_cb>:
{
   27cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   27cfc:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   27cfe:	6816      	ldr	r6, [r2, #0]
{
   27d00:	4605      	mov	r5, r0
   27d02:	460f      	mov	r7, r1
   27d04:	4614      	mov	r4, r2
	if (!data->rsp) {
   27d06:	b963      	cbnz	r3, 27d22 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   27d08:	6850      	ldr	r0, [r2, #4]
   27d0a:	2101      	movs	r1, #1
   27d0c:	3008      	adds	r0, #8
   27d0e:	f001 fe1c 	bl	2994a <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27d12:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   27d14:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   27d16:	781b      	ldrb	r3, [r3, #0]
   27d18:	2b00      	cmp	r3, #0
   27d1a:	bf0c      	ite	eq
   27d1c:	2301      	moveq	r3, #1
   27d1e:	2302      	movne	r3, #2
   27d20:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   27d22:	68a3      	ldr	r3, [r4, #8]
   27d24:	781b      	ldrb	r3, [r3, #0]
   27d26:	2b01      	cmp	r3, #1
   27d28:	d003      	beq.n	27d32 <find_info_cb+0x38>
   27d2a:	2b02      	cmp	r3, #2
   27d2c:	d019      	beq.n	27d62 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   27d2e:	2000      	movs	r0, #0
   27d30:	e016      	b.n	27d60 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   27d32:	682b      	ldr	r3, [r5, #0]
   27d34:	781b      	ldrb	r3, [r3, #0]
   27d36:	2b00      	cmp	r3, #0
   27d38:	d1f9      	bne.n	27d2e <find_info_cb+0x34>
   27d3a:	6860      	ldr	r0, [r4, #4]
   27d3c:	2104      	movs	r1, #4
   27d3e:	3008      	adds	r0, #8
   27d40:	f001 fe03 	bl	2994a <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27d44:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   27d46:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   27d48:	885b      	ldrh	r3, [r3, #2]
   27d4a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   27d4c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   27d4e:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   27d50:	899b      	ldrh	r3, [r3, #12]
   27d52:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   27d56:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27d58:	2804      	cmp	r0, #4
   27d5a:	bf94      	ite	ls
   27d5c:	2000      	movls	r0, #0
   27d5e:	2001      	movhi	r0, #1
}
   27d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   27d62:	682b      	ldr	r3, [r5, #0]
   27d64:	781b      	ldrb	r3, [r3, #0]
   27d66:	2b02      	cmp	r3, #2
   27d68:	d1e1      	bne.n	27d2e <find_info_cb+0x34>
   27d6a:	6860      	ldr	r0, [r4, #4]
   27d6c:	2112      	movs	r1, #18
   27d6e:	3008      	adds	r0, #8
   27d70:	f001 fdeb 	bl	2994a <net_buf_simple_add>
   27d74:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   27d76:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   27d78:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   27d7a:	f823 7b02 	strh.w	r7, [r3], #2
   27d7e:	1c51      	adds	r1, r2, #1
   27d80:	3211      	adds	r2, #17
   27d82:	f851 0b04 	ldr.w	r0, [r1], #4
   27d86:	f843 0b04 	str.w	r0, [r3], #4
   27d8a:	4291      	cmp	r1, r2
   27d8c:	d1f9      	bne.n	27d82 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   27d8e:	6863      	ldr	r3, [r4, #4]
   27d90:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   27d94:	899b      	ldrh	r3, [r3, #12]
   27d96:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   27d98:	2812      	cmp	r0, #18
   27d9a:	e7de      	b.n	27d5a <find_info_cb+0x60>

00027d9c <z_log_msg2_static_create.constprop.0>:
   27d9c:	2300      	movs	r3, #0
   27d9e:	f7fd be0a 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00027da2 <att_chan_read>:
{
   27da2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27da6:	4680      	mov	r8, r0
   27da8:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27daa:	4610      	mov	r0, r2
{
   27dac:	4699      	mov	r9, r3
   27dae:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27db0:	f7ff feaf 	bl	27b12 <net_buf_frags_len>
   27db4:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   27db8:	4283      	cmp	r3, r0
{
   27dba:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   27dbc:	d97a      	bls.n	27eb4 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   27dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   27dc2:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   27dc4:	4630      	mov	r0, r6
   27dc6:	f001 fd92 	bl	298ee <net_buf_frag_last>
	size_t len, total = 0;
   27dca:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   27dce:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27dd0:	4630      	mov	r0, r6
   27dd2:	f7ff fe9e 	bl	27b12 <net_buf_frags_len>
   27dd6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   27dda:	f105 0708 	add.w	r7, r5, #8
   27dde:	1a24      	subs	r4, r4, r0
   27de0:	4638      	mov	r0, r7
   27de2:	f001 fdff 	bl	299e4 <net_buf_simple_tailroom>
   27de6:	4284      	cmp	r4, r0
   27de8:	d211      	bcs.n	27e0e <att_chan_read+0x6c>
   27dea:	4630      	mov	r0, r6
   27dec:	f7ff fe91 	bl	27b12 <net_buf_frags_len>
   27df0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   27df4:	1a24      	subs	r4, r4, r0
		if (!len) {
   27df6:	bb34      	cbnz	r4, 27e46 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   27df8:	79b0      	ldrb	r0, [r6, #6]
   27dfa:	f7f7 fef1 	bl	1fbe0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   27dfe:	2200      	movs	r2, #0
   27e00:	2300      	movs	r3, #0
   27e02:	f001 fd3a 	bl	2987a <net_buf_alloc_fixed>
			if (!frag) {
   27e06:	4605      	mov	r5, r0
   27e08:	b930      	cbnz	r0, 27e18 <att_chan_read+0x76>
	return total;
   27e0a:	4657      	mov	r7, sl
   27e0c:	e02c      	b.n	27e68 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   27e0e:	4638      	mov	r0, r7
   27e10:	f001 fde8 	bl	299e4 <net_buf_simple_tailroom>
   27e14:	4604      	mov	r4, r0
   27e16:	e7ee      	b.n	27df6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   27e18:	4601      	mov	r1, r0
   27e1a:	4630      	mov	r0, r6
   27e1c:	f001 fd78 	bl	29910 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   27e20:	4630      	mov	r0, r6
   27e22:	f7ff fe76 	bl	27b12 <net_buf_frags_len>
   27e26:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   27e2a:	f105 0708 	add.w	r7, r5, #8
   27e2e:	1a24      	subs	r4, r4, r0
   27e30:	4638      	mov	r0, r7
   27e32:	f001 fdd7 	bl	299e4 <net_buf_simple_tailroom>
   27e36:	4284      	cmp	r4, r0
   27e38:	d21a      	bcs.n	27e70 <att_chan_read+0xce>
   27e3a:	4630      	mov	r0, r6
   27e3c:	f7ff fe69 	bl	27b12 <net_buf_frags_len>
   27e40:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   27e44:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   27e46:	68a9      	ldr	r1, [r5, #8]
   27e48:	89aa      	ldrh	r2, [r5, #12]
   27e4a:	f8db 7004 	ldr.w	r7, [fp, #4]
   27e4e:	9803      	ldr	r0, [sp, #12]
   27e50:	f8cd 9000 	str.w	r9, [sp]
   27e54:	440a      	add	r2, r1
   27e56:	b2a3      	uxth	r3, r4
   27e58:	4659      	mov	r1, fp
   27e5a:	47b8      	blx	r7
		if (read < 0) {
   27e5c:	1e07      	subs	r7, r0, #0
   27e5e:	da0c      	bge.n	27e7a <att_chan_read+0xd8>
				return total;
   27e60:	f1ba 0f00 	cmp.w	sl, #0
   27e64:	bf18      	it	ne
   27e66:	4657      	movne	r7, sl
}
   27e68:	4638      	mov	r0, r7
   27e6a:	b005      	add	sp, #20
   27e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27e70:	4638      	mov	r0, r7
   27e72:	f001 fdb7 	bl	299e4 <net_buf_simple_tailroom>
   27e76:	4604      	mov	r4, r0
   27e78:	e7e5      	b.n	27e46 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   27e7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27e7c:	b993      	cbnz	r3, 27ea4 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   27e7e:	4639      	mov	r1, r7
   27e80:	f105 0008 	add.w	r0, r5, #8
   27e84:	f001 fd61 	bl	2994a <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e88:	4630      	mov	r0, r6
   27e8a:	f7ff fe42 	bl	27b12 <net_buf_frags_len>
   27e8e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   27e92:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e94:	4283      	cmp	r3, r0
		total += read;
   27e96:	44ba      	add	sl, r7
		offset += read;
   27e98:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   27e9c:	d9b5      	bls.n	27e0a <att_chan_read+0x68>
   27e9e:	42a7      	cmp	r7, r4
   27ea0:	d096      	beq.n	27dd0 <att_chan_read+0x2e>
   27ea2:	e7b2      	b.n	27e0a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   27ea4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   27ea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   27ea8:	4639      	mov	r1, r7
   27eaa:	4628      	mov	r0, r5
   27eac:	4798      	blx	r3
   27eae:	2800      	cmp	r0, #0
   27eb0:	d1e5      	bne.n	27e7e <att_chan_read+0xdc>
   27eb2:	e7aa      	b.n	27e0a <att_chan_read+0x68>
		return 0;
   27eb4:	2700      	movs	r7, #0
   27eb6:	e7d7      	b.n	27e68 <att_chan_read+0xc6>

00027eb8 <chan_req_send>:
{
   27eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27eba:	688f      	ldr	r7, [r1, #8]
{
   27ebc:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27ebe:	4638      	mov	r0, r7
   27ec0:	f7ff fe27 	bl	27b12 <net_buf_frags_len>
   27ec4:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   27ec8:	4283      	cmp	r3, r0
{
   27eca:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   27ecc:	d30d      	bcc.n	27eea <chan_req_send+0x32>
	req->buf = NULL;
   27ece:	2600      	movs	r6, #0
	chan->req = req;
   27ed0:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   27ed4:	4632      	mov	r2, r6
	req->buf = NULL;
   27ed6:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   27ed8:	4620      	mov	r0, r4
   27eda:	4639      	mov	r1, r7
   27edc:	f7e3 fdec 	bl	bab8 <chan_send>
	if (err) {
   27ee0:	b110      	cbz	r0, 27ee8 <chan_req_send+0x30>
		req->buf = buf;
   27ee2:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   27ee4:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   27ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   27eea:	f06f 0079 	mvn.w	r0, #121	; 0x79
   27eee:	e7fb      	b.n	27ee8 <chan_req_send+0x30>

00027ef0 <process_queue>:
{
   27ef0:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   27ef2:	2200      	movs	r2, #0
{
   27ef4:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   27ef6:	2300      	movs	r3, #0
   27ef8:	4608      	mov	r0, r1
{
   27efa:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   27efc:	f001 fcc2 	bl	29884 <net_buf_get>
	if (buf) {
   27f00:	4605      	mov	r5, r0
   27f02:	b160      	cbz	r0, 27f1e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   27f04:	4601      	mov	r1, r0
   27f06:	2200      	movs	r2, #0
   27f08:	4620      	mov	r0, r4
   27f0a:	f7e3 fdd5 	bl	bab8 <chan_send>
		if (err) {
   27f0e:	4604      	mov	r4, r0
   27f10:	b118      	cbz	r0, 27f1a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   27f12:	4629      	mov	r1, r5
   27f14:	4630      	mov	r0, r6
   27f16:	f002 f956 	bl	2a1c6 <k_queue_prepend>
}
   27f1a:	4620      	mov	r0, r4
   27f1c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   27f1e:	f06f 0401 	mvn.w	r4, #1
   27f22:	e7fa      	b.n	27f1a <process_queue+0x2a>

00027f24 <bt_att_chan_send_rsp>:
{
   27f24:	b538      	push	{r3, r4, r5, lr}
   27f26:	4604      	mov	r4, r0
   27f28:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   27f2a:	f7e3 fdc5 	bl	bab8 <chan_send>
	if (err) {
   27f2e:	b130      	cbz	r0, 27f3e <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   27f30:	4629      	mov	r1, r5
   27f32:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   27f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   27f3a:	f001 bcc7 	b.w	298cc <net_buf_put>
}
   27f3e:	bd38      	pop	{r3, r4, r5, pc}

00027f40 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f40:	b510      	push	{r4, lr}
	return list->head;
   27f42:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f44:	2200      	movs	r2, #0
   27f46:	b153      	cbz	r3, 27f5e <sys_slist_find_and_remove.isra.0+0x1e>
   27f48:	428b      	cmp	r3, r1
   27f4a:	d10e      	bne.n	27f6a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   27f4c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   27f4e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   27f50:	b932      	cbnz	r2, 27f60 <sys_slist_find_and_remove.isra.0+0x20>
   27f52:	42a1      	cmp	r1, r4
	list->head = node;
   27f54:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   27f56:	d100      	bne.n	27f5a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   27f58:	6043      	str	r3, [r0, #4]
	parent->next = child;
   27f5a:	2300      	movs	r3, #0
   27f5c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f5e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   27f60:	42a1      	cmp	r1, r4
	parent->next = child;
   27f62:	6013      	str	r3, [r2, #0]
	list->tail = node;
   27f64:	bf08      	it	eq
   27f66:	6042      	streq	r2, [r0, #4]
}
   27f68:	e7f7      	b.n	27f5a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   27f6a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   27f6c:	681b      	ldr	r3, [r3, #0]
   27f6e:	e7ea      	b.n	27f46 <sys_slist_find_and_remove.isra.0+0x6>

00027f70 <att_exec_write_req>:
   27f70:	2006      	movs	r0, #6
   27f72:	4770      	bx	lr

00027f74 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27f74:	30f0      	adds	r0, #240	; 0xf0
   27f76:	f3bf 8f5b 	dmb	ish
   27f7a:	e850 3f00 	ldrex	r3, [r0]
   27f7e:	f023 0301 	bic.w	r3, r3, #1
   27f82:	e840 3200 	strex	r2, r3, [r0]
   27f86:	2a00      	cmp	r2, #0
   27f88:	d1f7      	bne.n	27f7a <chan_rsp_sent+0x6>
   27f8a:	f3bf 8f5b 	dmb	ish
}
   27f8e:	4770      	bx	lr

00027f90 <chan_cfm_sent>:
   27f90:	30f0      	adds	r0, #240	; 0xf0
   27f92:	f3bf 8f5b 	dmb	ish
   27f96:	e850 3f00 	ldrex	r3, [r0]
   27f9a:	f023 0302 	bic.w	r3, r3, #2
   27f9e:	e840 3200 	strex	r2, r3, [r0]
   27fa2:	2a00      	cmp	r2, #0
   27fa4:	d1f7      	bne.n	27f96 <chan_cfm_sent+0x6>
   27fa6:	f3bf 8f5b 	dmb	ish
}
   27faa:	4770      	bx	lr

00027fac <read_cb>:
{
   27fac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   27fb0:	f8d2 8000 	ldr.w	r8, [r2]
{
   27fb4:	4606      	mov	r6, r0
	data->err = 0x00;
   27fb6:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   27fb8:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   27fbc:	7317      	strb	r7, [r2, #12]
{
   27fbe:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   27fc0:	4631      	mov	r1, r6
   27fc2:	2215      	movs	r2, #21
   27fc4:	f000 fd8d 	bl	28ae2 <bt_gatt_check_perm>
   27fc8:	4604      	mov	r4, r0
   27fca:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   27fcc:	b9a0      	cbnz	r0, 27ff8 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   27fce:	e9cd 0000 	strd	r0, r0, [sp]
   27fd2:	88ab      	ldrh	r3, [r5, #4]
   27fd4:	68aa      	ldr	r2, [r5, #8]
   27fd6:	4631      	mov	r1, r6
   27fd8:	4640      	mov	r0, r8
   27fda:	f7ff fee2 	bl	27da2 <att_chan_read>
	if (ret < 0) {
   27fde:	1e03      	subs	r3, r0, #0
   27fe0:	da0c      	bge.n	27ffc <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   27fe2:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   27fe6:	bf26      	itte	cs
   27fe8:	425b      	negcs	r3, r3
   27fea:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   27fec:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   27fee:	732b      	strb	r3, [r5, #12]
}
   27ff0:	4620      	mov	r0, r4
   27ff2:	b002      	add	sp, #8
   27ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   27ff8:	463c      	mov	r4, r7
   27ffa:	e7f9      	b.n	27ff0 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   27ffc:	2401      	movs	r4, #1
   27ffe:	e7f7      	b.n	27ff0 <read_cb+0x44>

00028000 <bt_att_sent>:
{
   28000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   28002:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   28006:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2800a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2800c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   28010:	b10b      	cbz	r3, 28016 <bt_att_sent+0x16>
		chan->sent(chan);
   28012:	4638      	mov	r0, r7
   28014:	4798      	blx	r3
   28016:	f3bf 8f5b 	dmb	ish
   2801a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2801e:	e853 2f00 	ldrex	r2, [r3]
   28022:	f022 0210 	bic.w	r2, r2, #16
   28026:	e843 2100 	strex	r1, r2, [r3]
   2802a:	2900      	cmp	r1, #0
   2802c:	d1f7      	bne.n	2801e <bt_att_sent+0x1e>
   2802e:	f3bf 8f5b 	dmb	ish
	if (!att) {
   28032:	b30c      	cbz	r4, 28078 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   28034:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   28038:	b98b      	cbnz	r3, 2805e <bt_att_sent+0x5e>
   2803a:	6863      	ldr	r3, [r4, #4]
   2803c:	b17b      	cbz	r3, 2805e <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2803e:	1d20      	adds	r0, r4, #4
   28040:	f7ff fd5d 	bl	27afe <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28044:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   28046:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   28048:	4638      	mov	r0, r7
   2804a:	f7ff ff35 	bl	27eb8 <chan_req_send>
   2804e:	2800      	cmp	r0, #0
   28050:	da12      	bge.n	28078 <bt_att_sent+0x78>
	parent->next = child;
   28052:	6863      	ldr	r3, [r4, #4]
   28054:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   28056:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   28058:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2805a:	b903      	cbnz	r3, 2805e <bt_att_sent+0x5e>
	list->tail = node;
   2805c:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2805e:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   28062:	4638      	mov	r0, r7
   28064:	f7ff ff44 	bl	27ef0 <process_queue>
	if (!err) {
   28068:	b130      	cbz	r0, 28078 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2806a:	f104 010c 	add.w	r1, r4, #12
   2806e:	4638      	mov	r0, r7
}
   28070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   28074:	f7ff bf3c 	b.w	27ef0 <process_queue>
}
   28078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002807a <att_req_send_process>:
{
   2807a:	b570      	push	{r4, r5, r6, lr}
   2807c:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2807e:	3004      	adds	r0, #4
   28080:	f7ff fd3d 	bl	27afe <sys_slist_get>
	if (!node) {
   28084:	4605      	mov	r5, r0
   28086:	b1b8      	cbz	r0, 280b8 <att_req_send_process+0x3e>
	return list->head;
   28088:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2808a:	b14b      	cbz	r3, 280a0 <att_req_send_process+0x26>
	return node->next;
   2808c:	681e      	ldr	r6, [r3, #0]
   2808e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   28092:	b10e      	cbz	r6, 28098 <att_req_send_process+0x1e>
   28094:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   28098:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2809c:	b13b      	cbz	r3, 280ae <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2809e:	b966      	cbnz	r6, 280ba <att_req_send_process+0x40>
	parent->next = child;
   280a0:	6863      	ldr	r3, [r4, #4]
   280a2:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   280a4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   280a6:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   280a8:	b933      	cbnz	r3, 280b8 <att_req_send_process+0x3e>
	list->tail = node;
   280aa:	60a5      	str	r5, [r4, #8]
}
   280ac:	e004      	b.n	280b8 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   280ae:	4629      	mov	r1, r5
   280b0:	f7ff ff02 	bl	27eb8 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   280b4:	2800      	cmp	r0, #0
   280b6:	dbf2      	blt.n	2809e <att_req_send_process+0x24>
}
   280b8:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   280ba:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   280be:	b10b      	cbz	r3, 280c4 <att_req_send_process+0x4a>
   280c0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   280c4:	4630      	mov	r0, r6
   280c6:	461e      	mov	r6, r3
   280c8:	e7e6      	b.n	28098 <att_req_send_process+0x1e>

000280ca <bt_att_status>:
{
   280ca:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   280cc:	f3bf 8f5b 	dmb	ish
   280d0:	680b      	ldr	r3, [r1, #0]
   280d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   280d6:	07db      	lsls	r3, r3, #31
{
   280d8:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   280da:	d519      	bpl.n	28110 <bt_att_status+0x46>
	if (!chan->att) {
   280dc:	f850 0c08 	ldr.w	r0, [r0, #-8]
   280e0:	b1b0      	cbz	r0, 28110 <bt_att_status+0x46>
	if (chan->req) {
   280e2:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   280e6:	b99b      	cbnz	r3, 28110 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   280e8:	3004      	adds	r0, #4
   280ea:	f7ff fd08 	bl	27afe <sys_slist_get>
	if (!node) {
   280ee:	4604      	mov	r4, r0
   280f0:	b170      	cbz	r0, 28110 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   280f2:	4601      	mov	r1, r0
   280f4:	f1a5 0008 	sub.w	r0, r5, #8
   280f8:	f7ff fede 	bl	27eb8 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   280fc:	2800      	cmp	r0, #0
   280fe:	da07      	bge.n	28110 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   28100:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   28104:	685a      	ldr	r2, [r3, #4]
   28106:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   28108:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2810a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2810c:	b902      	cbnz	r2, 28110 <bt_att_status+0x46>
	list->tail = node;
   2810e:	609c      	str	r4, [r3, #8]
}
   28110:	bd38      	pop	{r3, r4, r5, pc}

00028112 <att_write_req>:
{
   28112:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28114:	460c      	mov	r4, r1
   28116:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   28118:	f101 0008 	add.w	r0, r1, #8
   2811c:	f001 fc56 	bl	299cc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   28120:	89a2      	ldrh	r2, [r4, #12]
   28122:	9201      	str	r2, [sp, #4]
   28124:	68a2      	ldr	r2, [r4, #8]
   28126:	9200      	str	r2, [sp, #0]
   28128:	4603      	mov	r3, r0
   2812a:	2213      	movs	r2, #19
   2812c:	2112      	movs	r1, #18
   2812e:	4628      	mov	r0, r5
   28130:	f7e3 ff04 	bl	bf3c <att_write_rsp.constprop.0>
}
   28134:	b003      	add	sp, #12
   28136:	bd30      	pop	{r4, r5, pc}

00028138 <att_write_cmd>:
{
   28138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2813a:	460c      	mov	r4, r1
   2813c:	4605      	mov	r5, r0
   2813e:	f101 0008 	add.w	r0, r1, #8
   28142:	f001 fc43 	bl	299cc <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   28146:	89a2      	ldrh	r2, [r4, #12]
   28148:	9201      	str	r2, [sp, #4]
   2814a:	68a2      	ldr	r2, [r4, #8]
   2814c:	9200      	str	r2, [sp, #0]
   2814e:	2200      	movs	r2, #0
   28150:	4603      	mov	r3, r0
   28152:	4611      	mov	r1, r2
   28154:	4628      	mov	r0, r5
   28156:	f7e3 fef1 	bl	bf3c <att_write_rsp.constprop.0>
}
   2815a:	b003      	add	sp, #12
   2815c:	bd30      	pop	{r4, r5, pc}

0002815e <att_read_blob_req>:
{
   2815e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   28160:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   28162:	8813      	ldrh	r3, [r2, #0]
   28164:	8852      	ldrh	r2, [r2, #2]
   28166:	9200      	str	r2, [sp, #0]
   28168:	210c      	movs	r1, #12
   2816a:	220d      	movs	r2, #13
   2816c:	f7e4 f854 	bl	c218 <att_read_rsp>
}
   28170:	b003      	add	sp, #12
   28172:	f85d fb04 	ldr.w	pc, [sp], #4

00028176 <att_read_req>:
{
   28176:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   28178:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2817a:	2200      	movs	r2, #0
   2817c:	881b      	ldrh	r3, [r3, #0]
   2817e:	9200      	str	r2, [sp, #0]
   28180:	210a      	movs	r1, #10
   28182:	220b      	movs	r2, #11
   28184:	f7e4 f848 	bl	c218 <att_read_rsp>
}
   28188:	b003      	add	sp, #12
   2818a:	f85d fb04 	ldr.w	pc, [sp], #4

0002818e <bt_att_init>:
	bt_gatt_init();
   2818e:	f7e4 bd2b 	b.w	cbe8 <bt_gatt_init>

00028192 <bt_att_get_mtu>:
{
   28192:	b508      	push	{r3, lr}
	att = att_get(conn);
   28194:	f7e3 fba0 	bl	b8d8 <att_get>
	if (!att) {
   28198:	b1b0      	cbz	r0, 281c8 <bt_att_get_mtu+0x36>
	return list->head;
   2819a:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2819c:	b1a0      	cbz	r0, 281c8 <bt_att_get_mtu+0x36>
	return node->next;
   2819e:	6803      	ldr	r3, [r0, #0]
   281a0:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   281a4:	b10b      	cbz	r3, 281aa <bt_att_get_mtu+0x18>
   281a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   281aa:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   281ac:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   281b0:	4290      	cmp	r0, r2
   281b2:	bf38      	it	cc
   281b4:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   281b6:	b13b      	cbz	r3, 281c8 <bt_att_get_mtu+0x36>
   281b8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   281bc:	b10a      	cbz	r2, 281c2 <bt_att_get_mtu+0x30>
   281be:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   281c2:	4619      	mov	r1, r3
   281c4:	4613      	mov	r3, r2
   281c6:	e7f1      	b.n	281ac <bt_att_get_mtu+0x1a>
}
   281c8:	bd08      	pop	{r3, pc}

000281ca <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   281ca:	898a      	ldrh	r2, [r1, #12]
   281cc:	6889      	ldr	r1, [r1, #8]
   281ce:	2300      	movs	r3, #0
   281d0:	f7e4 b9e6 	b.w	c5a0 <att_handle_rsp>

000281d4 <att_handle_find_type_rsp>:
   281d4:	f7ff bff9 	b.w	281ca <att_handle_find_info_rsp>

000281d8 <att_handle_read_type_rsp>:
   281d8:	f7ff bff7 	b.w	281ca <att_handle_find_info_rsp>

000281dc <att_handle_read_rsp>:
   281dc:	f7ff bff5 	b.w	281ca <att_handle_find_info_rsp>

000281e0 <att_handle_read_blob_rsp>:
   281e0:	f7ff bff3 	b.w	281ca <att_handle_find_info_rsp>

000281e4 <att_handle_read_mult_rsp>:
   281e4:	f7ff bff1 	b.w	281ca <att_handle_find_info_rsp>

000281e8 <att_handle_read_group_rsp>:
   281e8:	f7ff bfef 	b.w	281ca <att_handle_find_info_rsp>

000281ec <att_handle_write_rsp>:
   281ec:	f7ff bfed 	b.w	281ca <att_handle_find_info_rsp>

000281f0 <att_handle_prepare_write_rsp>:
   281f0:	f7ff bfeb 	b.w	281ca <att_handle_find_info_rsp>

000281f4 <att_handle_exec_write_rsp>:
   281f4:	f7ff bfe9 	b.w	281ca <att_handle_find_info_rsp>

000281f8 <att_confirm>:
   281f8:	f7ff bfe7 	b.w	281ca <att_handle_find_info_rsp>

000281fc <att_mtu_rsp>:
{
   281fc:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   281fe:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   28200:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   28202:	2b16      	cmp	r3, #22
{
   28204:	4604      	mov	r4, r0
   28206:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   28208:	d806      	bhi.n	28218 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2820a:	2200      	movs	r2, #0
   2820c:	2304      	movs	r3, #4
   2820e:	4611      	mov	r1, r2
}
   28210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   28214:	f7e4 b9c4 	b.w	c5a0 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   28218:	2b41      	cmp	r3, #65	; 0x41
   2821a:	bf28      	it	cs
   2821c:	2341      	movcs	r3, #65	; 0x41
   2821e:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   28222:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   28226:	f7ff fcda 	bl	27bde <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2822a:	89aa      	ldrh	r2, [r5, #12]
   2822c:	2300      	movs	r3, #0
   2822e:	4631      	mov	r1, r6
   28230:	4620      	mov	r0, r4
   28232:	e7ed      	b.n	28210 <att_mtu_rsp+0x14>

00028234 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   28234:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   28238:	b570      	push	{r4, r5, r6, lr}
   2823a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2823c:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   28240:	2b00      	cmp	r3, #0
   28242:	d037      	beq.n	282b4 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   28244:	b171      	cbz	r1, 28264 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   28246:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2824a:	2b00      	cmp	r3, #0
   2824c:	d032      	beq.n	282b4 <bt_att_encrypt_change+0x80>
   2824e:	7c1b      	ldrb	r3, [r3, #16]
   28250:	07da      	lsls	r2, r3, #31
   28252:	d52f      	bpl.n	282b4 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   28254:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   28256:	2200      	movs	r2, #0
   28258:	4630      	mov	r0, r6
   2825a:	4611      	mov	r1, r2
}
   2825c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   28260:	f7e4 b99e 	b.w	c5a0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   28264:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   28266:	4628      	mov	r0, r5
   28268:	f7e5 fdb6 	bl	ddd8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2826c:	7a6b      	ldrb	r3, [r5, #9]
   2826e:	2b01      	cmp	r3, #1
   28270:	d020      	beq.n	282b4 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   28272:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   28276:	b1ec      	cbz	r4, 282b4 <bt_att_encrypt_change+0x80>
   28278:	7c23      	ldrb	r3, [r4, #16]
   2827a:	07db      	lsls	r3, r3, #31
   2827c:	d51a      	bpl.n	282b4 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2827e:	68e3      	ldr	r3, [r4, #12]
   28280:	2b00      	cmp	r3, #0
   28282:	d0e7      	beq.n	28254 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   28284:	6962      	ldr	r2, [r4, #20]
   28286:	7c61      	ldrb	r1, [r4, #17]
   28288:	4630      	mov	r0, r6
   2828a:	f7e3 fd0b 	bl	bca4 <bt_att_chan_create_pdu>
	if (!buf) {
   2828e:	4605      	mov	r5, r0
   28290:	b140      	cbz	r0, 282a4 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   28292:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   28296:	68e3      	ldr	r3, [r4, #12]
   28298:	4798      	blx	r3
   2829a:	4602      	mov	r2, r0
   2829c:	b120      	cbz	r0, 282a8 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2829e:	4628      	mov	r0, r5
   282a0:	f7f7 fd62 	bl	1fd68 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   282a4:	230e      	movs	r3, #14
   282a6:	e7d6      	b.n	28256 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   282a8:	4629      	mov	r1, r5
   282aa:	4630      	mov	r0, r6
   282ac:	f7e3 fc04 	bl	bab8 <chan_send>
   282b0:	2800      	cmp	r0, #0
   282b2:	d1f4      	bne.n	2829e <bt_att_encrypt_change+0x6a>
}
   282b4:	bd70      	pop	{r4, r5, r6, pc}

000282b6 <bt_att_send>:
{
   282b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   282ba:	4607      	mov	r7, r0
   282bc:	460d      	mov	r5, r1
   282be:	4616      	mov	r6, r2
   282c0:	4698      	mov	r8, r3
	att = att_get(conn);
   282c2:	f7e3 fb09 	bl	b8d8 <att_get>
	if (!att) {
   282c6:	4604      	mov	r4, r0
   282c8:	b938      	cbnz	r0, 282da <bt_att_send+0x24>
		net_buf_unref(buf);
   282ca:	4628      	mov	r0, r5
   282cc:	f7f7 fd4c 	bl	1fd68 <net_buf_unref>
		return -ENOTCONN;
   282d0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   282d4:	b002      	add	sp, #8
   282d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   282da:	b146      	cbz	r6, 282ee <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   282dc:	f8cd 8000 	str.w	r8, [sp]
   282e0:	4633      	mov	r3, r6
   282e2:	462a      	mov	r2, r5
   282e4:	2104      	movs	r1, #4
   282e6:	4638      	mov	r0, r7
   282e8:	f7ff fbbb 	bl	27a62 <bt_l2cap_send_cb>
   282ec:	e7f2      	b.n	282d4 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   282ee:	f100 060c 	add.w	r6, r0, #12
   282f2:	4629      	mov	r1, r5
   282f4:	4630      	mov	r0, r6
   282f6:	f001 fae9 	bl	298cc <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   282fa:	2200      	movs	r2, #0
   282fc:	2300      	movs	r3, #0
   282fe:	4630      	mov	r0, r6
   28300:	f001 fac0 	bl	29884 <net_buf_get>
	if (!buf) {
   28304:	4605      	mov	r5, r0
   28306:	b908      	cbnz	r0, 2830c <bt_att_send+0x56>
	return 0;
   28308:	2000      	movs	r0, #0
   2830a:	e7e3      	b.n	282d4 <bt_att_send+0x1e>
	return list->head;
   2830c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2830e:	b1a3      	cbz	r3, 2833a <bt_att_send+0x84>
	return node->next;
   28310:	681c      	ldr	r4, [r3, #0]
   28312:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   28316:	b10c      	cbz	r4, 2831c <bt_att_send+0x66>
   28318:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2831c:	2200      	movs	r2, #0
   2831e:	4629      	mov	r1, r5
   28320:	f7e3 fbca 	bl	bab8 <chan_send>
		if (err >= 0) {
   28324:	2800      	cmp	r0, #0
   28326:	daef      	bge.n	28308 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   28328:	b13c      	cbz	r4, 2833a <bt_att_send+0x84>
   2832a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2832e:	b10b      	cbz	r3, 28334 <bt_att_send+0x7e>
   28330:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   28334:	4620      	mov	r0, r4
   28336:	461c      	mov	r4, r3
   28338:	e7f0      	b.n	2831c <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2833a:	4629      	mov	r1, r5
   2833c:	4630      	mov	r0, r6
   2833e:	f001 ff42 	bl	2a1c6 <k_queue_prepend>
   28342:	e7e1      	b.n	28308 <bt_att_send+0x52>

00028344 <bt_att_req_send>:
{
   28344:	b510      	push	{r4, lr}
   28346:	460c      	mov	r4, r1
	att = att_get(conn);
   28348:	f7e3 fac6 	bl	b8d8 <att_get>
	if (!att) {
   2834c:	b160      	cbz	r0, 28368 <bt_att_req_send+0x24>
	parent->next = child;
   2834e:	2300      	movs	r3, #0
   28350:	6023      	str	r3, [r4, #0]
	return list->tail;
   28352:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   28354:	b92b      	cbnz	r3, 28362 <bt_att_req_send+0x1e>
	list->head = node;
   28356:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   2835a:	f7ff fe8e 	bl	2807a <att_req_send_process>
	return 0;
   2835e:	2000      	movs	r0, #0
}
   28360:	bd10      	pop	{r4, pc}
	parent->next = child;
   28362:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28364:	6084      	str	r4, [r0, #8]
}
   28366:	e7f8      	b.n	2835a <bt_att_req_send+0x16>
		return -ENOTCONN;
   28368:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2836c:	e7f8      	b.n	28360 <bt_att_req_send+0x1c>

0002836e <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2836e:	b510      	push	{r4, lr}
   28370:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   28372:	f7e3 fab1 	bl	b8d8 <att_get>
	if (!att) {
   28376:	b198      	cbz	r0, 283a0 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   28378:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2837a:	b14b      	cbz	r3, 28390 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2837c:	f853 2c50 	ldr.w	r2, [r3, #-80]
   28380:	6991      	ldr	r1, [r2, #24]
   28382:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   28384:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   28388:	d009      	beq.n	2839e <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2838a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2838e:	e7f4      	b.n	2837a <bt_att_find_req_by_user_data+0xc>
	return list->head;
   28390:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   28392:	b128      	cbz	r0, 283a0 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   28394:	6983      	ldr	r3, [r0, #24]
   28396:	42a3      	cmp	r3, r4
   28398:	d002      	beq.n	283a0 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2839a:	6800      	ldr	r0, [r0, #0]
   2839c:	e7f9      	b.n	28392 <bt_att_find_req_by_user_data+0x24>
   2839e:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   283a0:	bd10      	pop	{r4, pc}

000283a2 <gatt_ccc_changed>:
{
   283a2:	460b      	mov	r3, r1
   283a4:	8909      	ldrh	r1, [r1, #8]
   283a6:	8a5a      	ldrh	r2, [r3, #18]
   283a8:	4291      	cmp	r1, r2
   283aa:	bf38      	it	cc
   283ac:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   283ae:	8a9a      	ldrh	r2, [r3, #20]
   283b0:	428a      	cmp	r2, r1
   283b2:	d003      	beq.n	283bc <gatt_ccc_changed+0x1a>
		ccc->value = value;
   283b4:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   283b6:	699b      	ldr	r3, [r3, #24]
   283b8:	b103      	cbz	r3, 283bc <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   283ba:	4718      	bx	r3
}
   283bc:	4770      	bx	lr

000283be <gatt_indicate_rsp>:
{
   283be:	b510      	push	{r4, lr}
   283c0:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   283c2:	68a3      	ldr	r3, [r4, #8]
{
   283c4:	460a      	mov	r2, r1
	if (params->func) {
   283c6:	b10b      	cbz	r3, 283cc <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   283c8:	4621      	mov	r1, r4
   283ca:	4798      	blx	r3
	params->_ref--;
   283cc:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   283ce:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   283d0:	3b01      	subs	r3, #1
   283d2:	b2db      	uxtb	r3, r3
   283d4:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   283d6:	b122      	cbz	r2, 283e2 <gatt_indicate_rsp+0x24>
   283d8:	b91b      	cbnz	r3, 283e2 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   283da:	4620      	mov	r0, r4
}
   283dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   283e0:	4710      	bx	r2
}
   283e2:	bd10      	pop	{r4, pc}

000283e4 <match_uuid>:
	data->attr = attr;
   283e4:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   283e6:	8091      	strh	r1, [r2, #4]
}
   283e8:	2000      	movs	r0, #0
   283ea:	4770      	bx	lr

000283ec <gatt_write_rsp>:
{
   283ec:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   283ee:	6813      	ldr	r3, [r2, #0]
   283f0:	4718      	bx	r3

000283f2 <atomic_get>:
   283f2:	f3bf 8f5b 	dmb	ish
   283f6:	6800      	ldr	r0, [r0, #0]
   283f8:	f3bf 8f5b 	dmb	ish
}
   283fc:	4770      	bx	lr

000283fe <gen_hash_m>:
{
   283fe:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   28400:	6807      	ldr	r7, [r0, #0]
   28402:	783d      	ldrb	r5, [r7, #0]
{
   28404:	b089      	sub	sp, #36	; 0x24
   28406:	4606      	mov	r6, r0
   28408:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2840a:	b10d      	cbz	r5, 28410 <gen_hash_m+0x12>
	switch (u16->val) {
   2840c:	2501      	movs	r5, #1
   2840e:	e014      	b.n	2843a <gen_hash_m+0x3c>
   28410:	887b      	ldrh	r3, [r7, #2]
   28412:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   28416:	d004      	beq.n	28422 <gen_hash_m+0x24>
   28418:	d812      	bhi.n	28440 <gen_hash_m+0x42>
   2841a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2841e:	2b03      	cmp	r3, #3
   28420:	d8f4      	bhi.n	2840c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   28422:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28426:	2202      	movs	r2, #2
   28428:	f10d 010a 	add.w	r1, sp, #10
   2842c:	4620      	mov	r0, r4
   2842e:	f7fe fb4a 	bl	26ac6 <tc_cmac_update>
   28432:	b9e0      	cbnz	r0, 2846e <gen_hash_m+0x70>
			state->err = -EINVAL;
   28434:	f06f 0315 	mvn.w	r3, #21
   28438:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2843a:	4628      	mov	r0, r5
   2843c:	b009      	add	sp, #36	; 0x24
   2843e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   28440:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   28444:	33ff      	adds	r3, #255	; 0xff
   28446:	b29b      	uxth	r3, r3
   28448:	2b04      	cmp	r3, #4
   2844a:	d8df      	bhi.n	2840c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2844c:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28450:	2202      	movs	r2, #2
   28452:	f10d 010a 	add.w	r1, sp, #10
   28456:	4620      	mov	r0, r4
   28458:	f7fe fb35 	bl	26ac6 <tc_cmac_update>
   2845c:	2800      	cmp	r0, #0
   2845e:	d0e9      	beq.n	28434 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   28460:	887b      	ldrh	r3, [r7, #2]
   28462:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28466:	2202      	movs	r2, #2
   28468:	f10d 010a 	add.w	r1, sp, #10
   2846c:	e016      	b.n	2849c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2846e:	887b      	ldrh	r3, [r7, #2]
   28470:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   28474:	2202      	movs	r2, #2
   28476:	f10d 010a 	add.w	r1, sp, #10
   2847a:	4620      	mov	r0, r4
   2847c:	f7fe fb23 	bl	26ac6 <tc_cmac_update>
   28480:	2800      	cmp	r0, #0
   28482:	d0d7      	beq.n	28434 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   28484:	2000      	movs	r0, #0
   28486:	aa03      	add	r2, sp, #12
   28488:	6877      	ldr	r7, [r6, #4]
   2848a:	9000      	str	r0, [sp, #0]
   2848c:	2313      	movs	r3, #19
   2848e:	4631      	mov	r1, r6
   28490:	47b8      	blx	r7
		if (len < 0) {
   28492:	1e02      	subs	r2, r0, #0
   28494:	da01      	bge.n	2849a <gen_hash_m+0x9c>
			state->err = len;
   28496:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   28498:	e7cf      	b.n	2843a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2849a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2849c:	4620      	mov	r0, r4
   2849e:	f7fe fb12 	bl	26ac6 <tc_cmac_update>
   284a2:	2800      	cmp	r0, #0
   284a4:	d1b2      	bne.n	2840c <gen_hash_m+0xe>
   284a6:	e7c5      	b.n	28434 <gen_hash_m+0x36>

000284a8 <bt_addr_le_cmp>:
   284a8:	2207      	movs	r2, #7
   284aa:	f002 bac6 	b.w	2aa3a <memcmp>

000284ae <find_ccc_cfg>:
{
   284ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   284b0:	1c4a      	adds	r2, r1, #1
{
   284b2:	460c      	mov	r4, r1
		if (conn) {
   284b4:	4605      	mov	r5, r0
   284b6:	b948      	cbnz	r0, 284cc <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   284b8:	9000      	str	r0, [sp, #0]
   284ba:	4669      	mov	r1, sp
   284bc:	f8cd 0003 	str.w	r0, [sp, #3]
   284c0:	4610      	mov	r0, r2
   284c2:	f7ff fff1 	bl	284a8 <bt_addr_le_cmp>
   284c6:	b930      	cbnz	r0, 284d6 <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   284c8:	4626      	mov	r6, r4
   284ca:	e00e      	b.n	284ea <find_ccc_cfg+0x3c>
   284cc:	7809      	ldrb	r1, [r1, #0]
   284ce:	f7ff f9a4 	bl	2781a <bt_conn_is_peer_addr_le>
   284d2:	2800      	cmp	r0, #0
   284d4:	d1f8      	bne.n	284c8 <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   284d6:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   284da:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   284de:	b13d      	cbz	r5, 284f0 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   284e0:	7aa1      	ldrb	r1, [r4, #10]
   284e2:	4628      	mov	r0, r5
   284e4:	f7ff f999 	bl	2781a <bt_conn_is_peer_addr_le>
   284e8:	b158      	cbz	r0, 28502 <find_ccc_cfg+0x54>
}
   284ea:	4630      	mov	r0, r6
   284ec:	b002      	add	sp, #8
   284ee:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   284f0:	4669      	mov	r1, sp
   284f2:	4610      	mov	r0, r2
   284f4:	9500      	str	r5, [sp, #0]
   284f6:	f8cd 5003 	str.w	r5, [sp, #3]
   284fa:	f7ff ffd5 	bl	284a8 <bt_addr_le_cmp>
   284fe:	2800      	cmp	r0, #0
   28500:	d0f3      	beq.n	284ea <find_ccc_cfg+0x3c>
	return NULL;
   28502:	2600      	movs	r6, #0
   28504:	e7f1      	b.n	284ea <find_ccc_cfg+0x3c>

00028506 <gatt_req_send>:
{
   28506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2850a:	4606      	mov	r6, r0
   2850c:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2850e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   28512:	2100      	movs	r1, #0
{
   28514:	f89d a020 	ldrb.w	sl, [sp, #32]
   28518:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2851c:	4617      	mov	r7, r2
   2851e:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   28520:	f7e4 f80a 	bl	c538 <bt_att_req_alloc>
	if (!req) {
   28524:	4604      	mov	r4, r0
   28526:	b920      	cbnz	r0, 28532 <gatt_req_send+0x2c>
		return -ENOMEM;
   28528:	f06f 050b 	mvn.w	r5, #11
}
   2852c:	4628      	mov	r0, r5
   2852e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   28532:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   28536:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   2853a:	60c5      	str	r5, [r0, #12]
	req->func = func;
   2853c:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   28540:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   28542:	4642      	mov	r2, r8
   28544:	4651      	mov	r1, sl
   28546:	4630      	mov	r0, r6
   28548:	f7e3 fd5c 	bl	c004 <bt_att_create_pdu>
	if (!buf) {
   2854c:	b918      	cbnz	r0, 28556 <gatt_req_send+0x50>
		bt_att_req_free(req);
   2854e:	4620      	mov	r0, r4
   28550:	f7e4 f814 	bl	c57c <bt_att_req_free>
   28554:	e7e8      	b.n	28528 <gatt_req_send+0x22>
	req->buf = buf;
   28556:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   28558:	463a      	mov	r2, r7
   2855a:	4641      	mov	r1, r8
   2855c:	47a8      	blx	r5
	if (err) {
   2855e:	4605      	mov	r5, r0
   28560:	b118      	cbz	r0, 2856a <gatt_req_send+0x64>
		bt_att_req_free(req);
   28562:	4620      	mov	r0, r4
   28564:	f7e4 f80a 	bl	c57c <bt_att_req_free>
   28568:	e7e0      	b.n	2852c <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   2856a:	4621      	mov	r1, r4
   2856c:	4630      	mov	r0, r6
   2856e:	f7ff fee9 	bl	28344 <bt_att_req_send>
	if (err) {
   28572:	4605      	mov	r5, r0
   28574:	2800      	cmp	r0, #0
   28576:	d0d9      	beq.n	2852c <gatt_req_send+0x26>
   28578:	e7f3      	b.n	28562 <gatt_req_send+0x5c>

0002857a <read_included_uuid_encode>:
{
   2857a:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   2857c:	2102      	movs	r1, #2
   2857e:	3008      	adds	r0, #8
   28580:	4614      	mov	r4, r2
   28582:	f001 f9e2 	bl	2994a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   28586:	8963      	ldrh	r3, [r4, #10]
   28588:	8003      	strh	r3, [r0, #0]
}
   2858a:	2000      	movs	r0, #0
   2858c:	bd10      	pop	{r4, pc}

0002858e <gatt_find_info_encode>:
{
   2858e:	b510      	push	{r4, lr}
   28590:	2104      	movs	r1, #4
   28592:	3008      	adds	r0, #8
   28594:	4614      	mov	r4, r2
   28596:	f001 f9d8 	bl	2994a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2859a:	8923      	ldrh	r3, [r4, #8]
   2859c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2859e:	89e3      	ldrh	r3, [r4, #14]
   285a0:	8043      	strh	r3, [r0, #2]
}
   285a2:	2000      	movs	r0, #0
   285a4:	bd10      	pop	{r4, pc}

000285a6 <gatt_cancel_encode>:
{
   285a6:	b508      	push	{r3, lr}
   285a8:	2101      	movs	r1, #1
   285aa:	3008      	adds	r0, #8
   285ac:	f001 f9cd 	bl	2994a <net_buf_simple_add>
   285b0:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   285b2:	2000      	movs	r0, #0
   285b4:	7018      	strb	r0, [r3, #0]
}
   285b6:	bd08      	pop	{r3, pc}

000285b8 <gatt_exec_encode>:
{
   285b8:	b508      	push	{r3, lr}
   285ba:	2101      	movs	r1, #1
   285bc:	3008      	adds	r0, #8
   285be:	f001 f9c4 	bl	2994a <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   285c2:	2301      	movs	r3, #1
   285c4:	7003      	strb	r3, [r0, #0]
}
   285c6:	2000      	movs	r0, #0
   285c8:	bd08      	pop	{r3, pc}

000285ca <gatt_read_group_encode>:
{
   285ca:	b538      	push	{r3, r4, r5, lr}
   285cc:	f100 0408 	add.w	r4, r0, #8
   285d0:	2104      	movs	r1, #4
   285d2:	4620      	mov	r0, r4
   285d4:	4615      	mov	r5, r2
   285d6:	f001 f9b8 	bl	2994a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   285da:	892b      	ldrh	r3, [r5, #8]
   285dc:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   285de:	89eb      	ldrh	r3, [r5, #14]
   285e0:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   285e2:	7c2b      	ldrb	r3, [r5, #16]
   285e4:	b933      	cbnz	r3, 285f4 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   285e6:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   285ea:	4620      	mov	r0, r4
   285ec:	f001 f9c4 	bl	29978 <net_buf_simple_add_le16>
}
   285f0:	2000      	movs	r0, #0
   285f2:	bd38      	pop	{r3, r4, r5, pc}
   285f4:	f642 0101 	movw	r1, #10241	; 0x2801
   285f8:	e7f7      	b.n	285ea <gatt_read_group_encode+0x20>

000285fa <gatt_read_type_encode>:
{
   285fa:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   285fc:	f100 0408 	add.w	r4, r0, #8
   28600:	2104      	movs	r1, #4
   28602:	4620      	mov	r0, r4
   28604:	4615      	mov	r5, r2
   28606:	f001 f9a0 	bl	2994a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2860a:	892b      	ldrh	r3, [r5, #8]
   2860c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2860e:	89eb      	ldrh	r3, [r5, #14]
   28610:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   28612:	7c2b      	ldrb	r3, [r5, #16]
   28614:	2b02      	cmp	r3, #2
   28616:	d004      	beq.n	28622 <gatt_read_type_encode+0x28>
   28618:	2b03      	cmp	r3, #3
   2861a:	d009      	beq.n	28630 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2861c:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2861e:	8859      	ldrh	r1, [r3, #2]
   28620:	e001      	b.n	28626 <gatt_read_type_encode+0x2c>
   28622:	f642 0102 	movw	r1, #10242	; 0x2802
   28626:	4620      	mov	r0, r4
   28628:	f001 f9a6 	bl	29978 <net_buf_simple_add_le16>
}
   2862c:	2000      	movs	r0, #0
   2862e:	bd38      	pop	{r3, r4, r5, pc}
   28630:	f642 0103 	movw	r1, #10243	; 0x2803
   28634:	e7f7      	b.n	28626 <gatt_read_type_encode+0x2c>

00028636 <gatt_write_encode>:
{
   28636:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   28638:	2102      	movs	r1, #2
   2863a:	b085      	sub	sp, #20
   2863c:	4605      	mov	r5, r0
   2863e:	3008      	adds	r0, #8
   28640:	4614      	mov	r4, r2
   28642:	f001 f982 	bl	2994a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   28646:	88a3      	ldrh	r3, [r4, #4]
   28648:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2864a:	2300      	movs	r3, #0
   2864c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   28650:	2200      	movs	r2, #0
   28652:	2300      	movs	r3, #0
   28654:	e9cd 2300 	strd	r2, r3, [sp]
   28658:	89a1      	ldrh	r1, [r4, #12]
   2865a:	68a2      	ldr	r2, [r4, #8]
   2865c:	4628      	mov	r0, r5
   2865e:	f7f7 fbb5 	bl	1fdcc <net_buf_append_bytes>
	if (write != params->length) {
   28662:	89a3      	ldrh	r3, [r4, #12]
		return -ENOMEM;
   28664:	4283      	cmp	r3, r0
}
   28666:	bf14      	ite	ne
   28668:	f06f 000b 	mvnne.w	r0, #11
   2866c:	2000      	moveq	r0, #0
   2866e:	b005      	add	sp, #20
   28670:	bd30      	pop	{r4, r5, pc}

00028672 <gatt_prepare_write_encode>:
{
   28672:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   28674:	4606      	mov	r6, r0
   28676:	460c      	mov	r4, r1
   28678:	3008      	adds	r0, #8
   2867a:	2104      	movs	r1, #4
   2867c:	4615      	mov	r5, r2
   2867e:	f001 f964 	bl	2994a <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   28682:	88ab      	ldrh	r3, [r5, #4]
   28684:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   28686:	88eb      	ldrh	r3, [r5, #6]
   28688:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2868a:	2300      	movs	r3, #0
   2868c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   28690:	3c04      	subs	r4, #4
   28692:	2300      	movs	r3, #0
   28694:	2200      	movs	r2, #0
   28696:	e9cd 2300 	strd	r2, r3, [sp]
   2869a:	4621      	mov	r1, r4
   2869c:	68aa      	ldr	r2, [r5, #8]
   2869e:	4630      	mov	r0, r6
   286a0:	f7f7 fb94 	bl	1fdcc <net_buf_append_bytes>
		return -ENOMEM;
   286a4:	4284      	cmp	r4, r0
}
   286a6:	bf14      	ite	ne
   286a8:	f06f 000b 	mvnne.w	r0, #11
   286ac:	2000      	moveq	r0, #0
   286ae:	b004      	add	sp, #16
   286b0:	bd70      	pop	{r4, r5, r6, pc}

000286b2 <bt_addr_le_copy>:
   286b2:	680b      	ldr	r3, [r1, #0]
   286b4:	6003      	str	r3, [r0, #0]
   286b6:	888b      	ldrh	r3, [r1, #4]
   286b8:	8083      	strh	r3, [r0, #4]
   286ba:	798b      	ldrb	r3, [r1, #6]
   286bc:	7183      	strb	r3, [r0, #6]
}
   286be:	4770      	bx	lr

000286c0 <gatt_sub_free>:
{
   286c0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   286c2:	2300      	movs	r3, #0
   286c4:	4669      	mov	r1, sp
   286c6:	3001      	adds	r0, #1
   286c8:	9300      	str	r3, [sp, #0]
   286ca:	f8cd 3003 	str.w	r3, [sp, #3]
   286ce:	f7ff fff0 	bl	286b2 <bt_addr_le_copy>
}
   286d2:	b003      	add	sp, #12
   286d4:	f85d fb04 	ldr.w	pc, [sp], #4

000286d8 <gatt_sub_remove>:
{
   286d8:	b570      	push	{r4, r5, r6, lr}
   286da:	460c      	mov	r4, r1
	if (params) {
   286dc:	4619      	mov	r1, r3
   286de:	b16b      	cbz	r3, 286fc <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   286e0:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   286e4:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   286e6:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   286e8:	b97a      	cbnz	r2, 2870a <gatt_sub_remove+0x32>
   286ea:	42ae      	cmp	r6, r5
	list->head = node;
   286ec:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   286ee:	d100      	bne.n	286f2 <gatt_sub_remove+0x1a>
	list->tail = node;
   286f0:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   286f2:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   286f4:	680d      	ldr	r5, [r1, #0]
   286f6:	614b      	str	r3, [r1, #20]
   286f8:	461a      	mov	r2, r3
   286fa:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   286fc:	68a3      	ldr	r3, [r4, #8]
   286fe:	b94b      	cbnz	r3, 28714 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   28700:	4620      	mov	r0, r4
}
   28702:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   28706:	f7ff bfdb 	b.w	286c0 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   2870a:	42ae      	cmp	r6, r5
	parent->next = child;
   2870c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2870e:	bf08      	it	eq
   28710:	60e2      	streq	r2, [r4, #12]
}
   28712:	e7ee      	b.n	286f2 <gatt_sub_remove+0x1a>
}
   28714:	bd70      	pop	{r4, r5, r6, pc}

00028716 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   28716:	2300      	movs	r3, #0
   28718:	6003      	str	r3, [r0, #0]
   2871a:	6043      	str	r3, [r0, #4]
   2871c:	6083      	str	r3, [r0, #8]
}
   2871e:	4770      	bx	lr

00028720 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   28720:	b538      	push	{r3, r4, r5, lr}
   28722:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   28726:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   28728:	460c      	mov	r4, r1
   2872a:	4611      	mov	r1, r2
	if (offset > value_len) {
   2872c:	d30a      	bcc.n	28744 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2872e:	1aad      	subs	r5, r5, r2
   28730:	42a5      	cmp	r5, r4
   28732:	bfa8      	it	ge
   28734:	4625      	movge	r5, r4
   28736:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28738:	462a      	mov	r2, r5
   2873a:	4419      	add	r1, r3
   2873c:	f002 f98d 	bl	2aa5a <memcpy>
}
   28740:	4628      	mov	r0, r5
   28742:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28744:	f06f 0506 	mvn.w	r5, #6
   28748:	e7fa      	b.n	28740 <bt_gatt_attr_read.constprop.0+0x20>

0002874a <bt_gatt_attr_read_ccc>:
{
   2874a:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2874c:	68c9      	ldr	r1, [r1, #12]
{
   2874e:	b085      	sub	sp, #20
   28750:	4614      	mov	r4, r2
   28752:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   28754:	f7ff feab 	bl	284ae <find_ccc_cfg>
	if (cfg) {
   28758:	b100      	cbz	r0, 2875c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2875a:	8900      	ldrh	r0, [r0, #8]
   2875c:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   28760:	2302      	movs	r3, #2
   28762:	9300      	str	r3, [sp, #0]
   28764:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   28768:	f10d 030e 	add.w	r3, sp, #14
   2876c:	4629      	mov	r1, r5
   2876e:	4620      	mov	r0, r4
   28770:	f7ff ffd6 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   28774:	b005      	add	sp, #20
   28776:	bd30      	pop	{r4, r5, pc}

00028778 <bt_gatt_attr_read_service>:
{
   28778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2877a:	460c      	mov	r4, r1
   2877c:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2877e:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   28780:	781c      	ldrb	r4, [r3, #0]
{
   28782:	4610      	mov	r0, r2
   28784:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   28788:	b13c      	cbz	r4, 2879a <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2878a:	2410      	movs	r4, #16
   2878c:	3301      	adds	r3, #1
   2878e:	9406      	str	r4, [sp, #24]
}
   28790:	b004      	add	sp, #16
   28792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   28796:	f7ff bfc3 	b.w	28720 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2879a:	885b      	ldrh	r3, [r3, #2]
   2879c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   287a0:	2302      	movs	r3, #2
   287a2:	9300      	str	r3, [sp, #0]
   287a4:	f10d 030e 	add.w	r3, sp, #14
   287a8:	f7ff ffba 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   287ac:	b004      	add	sp, #16
   287ae:	bd10      	pop	{r4, pc}

000287b0 <cf_read>:
{
   287b0:	b530      	push	{r4, r5, lr}
   287b2:	b085      	sub	sp, #20
   287b4:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   287b6:	2300      	movs	r3, #0
{
   287b8:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   287ba:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   287be:	f7e4 f809 	bl	c7d4 <find_cf_cfg>
	if (cfg) {
   287c2:	b110      	cbz	r0, 287ca <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   287c4:	7a03      	ldrb	r3, [r0, #8]
   287c6:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   287ca:	2301      	movs	r3, #1
   287cc:	9300      	str	r3, [sp, #0]
   287ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   287d2:	ab03      	add	r3, sp, #12
   287d4:	4629      	mov	r1, r5
   287d6:	4620      	mov	r0, r4
   287d8:	f7ff ffa2 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   287dc:	b005      	add	sp, #20
   287de:	bd30      	pop	{r4, r5, pc}

000287e0 <read_name>:
{
   287e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   287e4:	4614      	mov	r4, r2
   287e6:	461d      	mov	r5, r3
   287e8:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   287ec:	f7e0 fc70 	bl	90d0 <bt_get_name>
   287f0:	4606      	mov	r6, r0
				 strlen(name));
   287f2:	f7d8 fb00 	bl	df6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   287f6:	b280      	uxth	r0, r0
   287f8:	9006      	str	r0, [sp, #24]
   287fa:	4633      	mov	r3, r6
   287fc:	463a      	mov	r2, r7
   287fe:	4629      	mov	r1, r5
   28800:	4620      	mov	r0, r4
}
   28802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   28806:	f7ff bf8b 	b.w	28720 <bt_gatt_attr_read.constprop.0>

0002880a <read_appearance>:
{
   2880a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2880c:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2880e:	2300      	movs	r3, #0
   28810:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   28814:	2302      	movs	r3, #2
   28816:	9300      	str	r3, [sp, #0]
{
   28818:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2881a:	f10d 030e 	add.w	r3, sp, #14
   2881e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   28822:	f7ff ff7d 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   28826:	b005      	add	sp, #20
   28828:	f85d fb04 	ldr.w	pc, [sp], #4

0002882c <read_ppcp>:
{
   2882c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2882e:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   28830:	2318      	movs	r3, #24
   28832:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   28836:	2328      	movs	r3, #40	; 0x28
   28838:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2883c:	2300      	movs	r3, #0
   2883e:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   28842:	232a      	movs	r3, #42	; 0x2a
   28844:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   28848:	2308      	movs	r3, #8
   2884a:	9300      	str	r3, [sp, #0]
{
   2884c:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2884e:	446b      	add	r3, sp
   28850:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   28854:	f7ff ff64 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   28858:	b005      	add	sp, #20
   2885a:	f85d fb04 	ldr.w	pc, [sp], #4

0002885e <z_log_msg2_static_create.constprop.0>:
   2885e:	2300      	movs	r3, #0
   28860:	f7fd b8a9 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00028864 <sc_clear>:
{
   28864:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   28866:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2886a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2886c:	4629      	mov	r1, r5
   2886e:	7a00      	ldrb	r0, [r0, #8]
   28870:	f7fe fc58 	bl	27124 <bt_addr_le_is_bonded>
   28874:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   28876:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   28878:	f7e3 ffda 	bl	c830 <find_sc_cfg>
		if (cfg) {
   2887c:	b118      	cbz	r0, 28886 <sc_clear+0x22>
}
   2887e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   28882:	f7ff bf48 	b.w	28716 <clear_sc_cfg>
}
   28886:	bd38      	pop	{r3, r4, r5, pc}

00028888 <clear_cf_cfg>:
{
   28888:	b513      	push	{r0, r1, r4, lr}
   2888a:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2888c:	2400      	movs	r4, #0
   2888e:	4669      	mov	r1, sp
   28890:	3001      	adds	r0, #1
   28892:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   28894:	320c      	adds	r2, #12
   28896:	f8cd 4003 	str.w	r4, [sp, #3]
   2889a:	f7ff ff0a 	bl	286b2 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2889e:	f802 4c04 	strb.w	r4, [r2, #-4]
   288a2:	f3bf 8f5b 	dmb	ish
   288a6:	e852 3f00 	ldrex	r3, [r2]
   288aa:	e842 4100 	strex	r1, r4, [r2]
   288ae:	2900      	cmp	r1, #0
   288b0:	d1f9      	bne.n	288a6 <clear_cf_cfg+0x1e>
   288b2:	f3bf 8f5b 	dmb	ish
}
   288b6:	b002      	add	sp, #8
   288b8:	bd10      	pop	{r4, pc}

000288ba <gatt_find_type_encode>:
{
   288ba:	b538      	push	{r3, r4, r5, lr}
   288bc:	f100 0508 	add.w	r5, r0, #8
   288c0:	2106      	movs	r1, #6
   288c2:	4628      	mov	r0, r5
   288c4:	4614      	mov	r4, r2
   288c6:	f001 f840 	bl	2994a <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   288ca:	8923      	ldrh	r3, [r4, #8]
   288cc:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   288ce:	89e3      	ldrh	r3, [r4, #14]
   288d0:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   288d2:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   288d4:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   288d6:	2b00      	cmp	r3, #0
   288d8:	f642 0301 	movw	r3, #10241	; 0x2801
   288dc:	bf08      	it	eq
   288de:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   288e2:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   288e4:	780b      	ldrb	r3, [r1, #0]
   288e6:	b11b      	cbz	r3, 288f0 <gatt_find_type_encode+0x36>
   288e8:	2b02      	cmp	r3, #2
   288ea:	d006      	beq.n	288fa <gatt_find_type_encode+0x40>
}
   288ec:	2000      	movs	r0, #0
   288ee:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   288f0:	8849      	ldrh	r1, [r1, #2]
   288f2:	4628      	mov	r0, r5
   288f4:	f001 f840 	bl	29978 <net_buf_simple_add_le16>
}
   288f8:	e7f8      	b.n	288ec <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   288fa:	2210      	movs	r2, #16
   288fc:	3101      	adds	r1, #1
   288fe:	4628      	mov	r0, r5
   28900:	f001 f829 	bl	29956 <net_buf_simple_add_mem>
   28904:	e7f2      	b.n	288ec <gatt_find_type_encode+0x32>

00028906 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   28906:	2a02      	cmp	r2, #2
{
   28908:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2890a:	d108      	bne.n	2891e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2890c:	2300      	movs	r3, #0
   2890e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   28912:	461a      	mov	r2, r3
   28914:	7a00      	ldrb	r0, [r0, #8]
   28916:	f7e4 f851 	bl	c9bc <sc_save>
}
   2891a:	2002      	movs	r0, #2
   2891c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2891e:	f7ff ffa1 	bl	28864 <sc_clear>
   28922:	e7fa      	b.n	2891a <sc_ccc_cfg_write+0x14>

00028924 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28924:	2301      	movs	r3, #1
   28926:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   28928:	f3bf 8f5b 	dmb	ish
   2892c:	e850 2f00 	ldrex	r2, [r0]
   28930:	431a      	orrs	r2, r3
   28932:	e840 2100 	strex	r1, r2, [r0]
   28936:	2900      	cmp	r1, #0
   28938:	d1f8      	bne.n	2892c <atomic_set_bit+0x8>
   2893a:	f3bf 8f5b 	dmb	ish
}
   2893e:	4770      	bx	lr

00028940 <sc_restore_rsp>:
{
   28940:	b538      	push	{r3, r4, r5, lr}
   28942:	4605      	mov	r5, r0
   28944:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   28946:	f7e3 ff45 	bl	c7d4 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2894a:	b130      	cbz	r0, 2895a <sc_restore_rsp+0x1a>
   2894c:	7a03      	ldrb	r3, [r0, #8]
   2894e:	07db      	lsls	r3, r3, #31
   28950:	d503      	bpl.n	2895a <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   28952:	2100      	movs	r1, #0
   28954:	300c      	adds	r0, #12
   28956:	f7ff ffe5 	bl	28924 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2895a:	b934      	cbnz	r4, 2896a <sc_restore_rsp+0x2a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2895c:	7a28      	ldrb	r0, [r5, #8]
   2895e:	f105 0188 	add.w	r1, r5, #136	; 0x88
   28962:	f7e3 ff65 	bl	c830 <find_sc_cfg>
		if (sc_cfg) {
   28966:	b100      	cbz	r0, 2896a <sc_restore_rsp+0x2a>
   28968:	6084      	str	r4, [r0, #8]
}
   2896a:	bd38      	pop	{r3, r4, r5, pc}

0002896c <gatt_write_ccc_buf>:
{
   2896c:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2896e:	f100 0508 	add.w	r5, r0, #8
   28972:	2102      	movs	r1, #2
   28974:	4628      	mov	r0, r5
   28976:	4614      	mov	r4, r2
   28978:	f000 ffe7 	bl	2994a <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2897c:	8963      	ldrh	r3, [r4, #10]
   2897e:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   28980:	89a1      	ldrh	r1, [r4, #12]
   28982:	4628      	mov	r0, r5
   28984:	f000 fff8 	bl	29978 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   28988:	f104 0010 	add.w	r0, r4, #16
   2898c:	2102      	movs	r1, #2
   2898e:	f7ff ffc9 	bl	28924 <atomic_set_bit>
}
   28992:	2000      	movs	r0, #0
   28994:	bd38      	pop	{r3, r4, r5, pc}

00028996 <gatt_write_ccc_rsp>:
{
   28996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2899a:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2899c:	f3bf 8f5b 	dmb	ish
   289a0:	4606      	mov	r6, r0
   289a2:	460d      	mov	r5, r1
   289a4:	f104 0310 	add.w	r3, r4, #16
   289a8:	e853 2f00 	ldrex	r2, [r3]
   289ac:	f022 0204 	bic.w	r2, r2, #4
   289b0:	e843 2100 	strex	r1, r2, [r3]
   289b4:	2900      	cmp	r1, #0
   289b6:	d1f7      	bne.n	289a8 <gatt_write_ccc_rsp+0x12>
   289b8:	f3bf 8f5b 	dmb	ish
	if (err) {
   289bc:	b1dd      	cbz	r5, 289f6 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   289be:	f7e3 ff57 	bl	c870 <gatt_sub_find>
		if (!sub) {
   289c2:	4601      	mov	r1, r0
   289c4:	b300      	cbz	r0, 28a08 <gatt_write_ccc_rsp+0x72>
	return list->head;
   289c6:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   289c8:	b143      	cbz	r3, 289dc <gatt_write_ccc_rsp+0x46>
	return node->next;
   289ca:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   289cc:	f104 0014 	add.w	r0, r4, #20
   289d0:	4283      	cmp	r3, r0
   289d2:	d10b      	bne.n	289ec <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   289d4:	4623      	mov	r3, r4
   289d6:	4630      	mov	r0, r6
   289d8:	f7ff fe7e 	bl	286d8 <gatt_sub_remove>
	if (params->write) {
   289dc:	6863      	ldr	r3, [r4, #4]
   289de:	b19b      	cbz	r3, 28a08 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   289e0:	4629      	mov	r1, r5
   289e2:	4630      	mov	r0, r6
   289e4:	2200      	movs	r2, #0
}
   289e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   289ea:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   289ec:	2a00      	cmp	r2, #0
   289ee:	d0f5      	beq.n	289dc <gatt_write_ccc_rsp+0x46>
	return node->next;
   289f0:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   289f2:	6812      	ldr	r2, [r2, #0]
   289f4:	e7ec      	b.n	289d0 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   289f6:	89a3      	ldrh	r3, [r4, #12]
   289f8:	2b00      	cmp	r3, #0
   289fa:	d1ef      	bne.n	289dc <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   289fc:	6827      	ldr	r7, [r4, #0]
   289fe:	462b      	mov	r3, r5
   28a00:	462a      	mov	r2, r5
   28a02:	4621      	mov	r1, r4
   28a04:	47b8      	blx	r7
   28a06:	e7e9      	b.n	289dc <gatt_write_ccc_rsp+0x46>
}
   28a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028a0c <bt_gatt_attr_read>:
{
   28a0c:	b538      	push	{r3, r4, r5, lr}
   28a0e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   28a12:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   28a16:	428d      	cmp	r5, r1
{
   28a18:	4610      	mov	r0, r2
	if (offset > value_len) {
   28a1a:	d30b      	bcc.n	28a34 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   28a1c:	1a6d      	subs	r5, r5, r1
   28a1e:	429d      	cmp	r5, r3
   28a20:	bfa8      	it	ge
   28a22:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28a24:	9b05      	ldr	r3, [sp, #20]
   28a26:	b2ad      	uxth	r5, r5
   28a28:	462a      	mov	r2, r5
   28a2a:	4419      	add	r1, r3
   28a2c:	f002 f815 	bl	2aa5a <memcpy>
}
   28a30:	4628      	mov	r0, r5
   28a32:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   28a34:	f06f 0506 	mvn.w	r5, #6
   28a38:	e7fa      	b.n	28a30 <bt_gatt_attr_read+0x24>

00028a3a <bt_gatt_attr_value_handle>:
{
   28a3a:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28a3c:	4604      	mov	r4, r0
   28a3e:	b910      	cbnz	r0, 28a46 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   28a40:	2000      	movs	r0, #0
}
   28a42:	b002      	add	sp, #8
   28a44:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   28a46:	2300      	movs	r3, #0
   28a48:	f88d 3004 	strb.w	r3, [sp, #4]
   28a4c:	6800      	ldr	r0, [r0, #0]
   28a4e:	f642 0303 	movw	r3, #10243	; 0x2803
   28a52:	a901      	add	r1, sp, #4
   28a54:	f8ad 3006 	strh.w	r3, [sp, #6]
   28a58:	f7fe f9d8 	bl	26e0c <bt_uuid_cmp>
   28a5c:	2800      	cmp	r0, #0
   28a5e:	d1ef      	bne.n	28a40 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   28a60:	68e3      	ldr	r3, [r4, #12]
   28a62:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   28a64:	2800      	cmp	r0, #0
   28a66:	d1ec      	bne.n	28a42 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   28a68:	4620      	mov	r0, r4
   28a6a:	f7e4 f913 	bl	cc94 <bt_gatt_attr_get_handle>
   28a6e:	3001      	adds	r0, #1
   28a70:	b280      	uxth	r0, r0
	return handle;
   28a72:	e7e6      	b.n	28a42 <bt_gatt_attr_value_handle+0x8>

00028a74 <bt_gatt_attr_read_chrc>:
{
   28a74:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   28a76:	68cc      	ldr	r4, [r1, #12]
{
   28a78:	b088      	sub	sp, #32
   28a7a:	4608      	mov	r0, r1
   28a7c:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   28a7e:	79a3      	ldrb	r3, [r4, #6]
   28a80:	f88d 300c 	strb.w	r3, [sp, #12]
{
   28a84:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28a86:	f7ff ffd8 	bl	28a3a <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28a8a:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   28a8c:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   28a90:	7823      	ldrb	r3, [r4, #0]
   28a92:	b96b      	cbnz	r3, 28ab0 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   28a94:	8863      	ldrh	r3, [r4, #2]
   28a96:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   28a9a:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   28a9c:	9300      	str	r3, [sp, #0]
   28a9e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   28aa2:	ab03      	add	r3, sp, #12
   28aa4:	4631      	mov	r1, r6
   28aa6:	4628      	mov	r0, r5
   28aa8:	f7ff fe3a 	bl	28720 <bt_gatt_attr_read.constprop.0>
}
   28aac:	b008      	add	sp, #32
   28aae:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   28ab0:	1c63      	adds	r3, r4, #1
   28ab2:	f10d 020f 	add.w	r2, sp, #15
   28ab6:	3411      	adds	r4, #17
   28ab8:	f853 1b04 	ldr.w	r1, [r3], #4
   28abc:	f842 1b04 	str.w	r1, [r2], #4
   28ac0:	42a3      	cmp	r3, r4
   28ac2:	d1f9      	bne.n	28ab8 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   28ac4:	2313      	movs	r3, #19
   28ac6:	e7e9      	b.n	28a9c <bt_gatt_attr_read_chrc+0x28>

00028ac8 <bt_gatt_foreach_attr>:
{
   28ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   28aca:	e9cd 2301 	strd	r2, r3, [sp, #4]
   28ace:	2300      	movs	r3, #0
   28ad0:	9300      	str	r3, [sp, #0]
   28ad2:	461a      	mov	r2, r3
   28ad4:	f7e4 f90e 	bl	ccf4 <bt_gatt_foreach_attr_type>
}
   28ad8:	b005      	add	sp, #20
   28ada:	f85d fb04 	ldr.w	pc, [sp], #4

00028ade <db_hash_process>:
	db_hash_gen(true);
   28ade:	f7e4 b963 	b.w	cda8 <db_hash_gen.constprop.0>

00028ae2 <bt_gatt_check_perm>:
{
   28ae2:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   28ae4:	07d4      	lsls	r4, r2, #31
{
   28ae6:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28ae8:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   28aea:	d504      	bpl.n	28af6 <bt_gatt_check_perm+0x14>
   28aec:	f010 0f15 	tst.w	r0, #21
   28af0:	d01e      	beq.n	28b30 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   28af2:	684b      	ldr	r3, [r1, #4]
   28af4:	b1e3      	cbz	r3, 28b30 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   28af6:	0793      	lsls	r3, r2, #30
   28af8:	d504      	bpl.n	28b04 <bt_gatt_check_perm+0x22>
   28afa:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   28afe:	d019      	beq.n	28b34 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   28b00:	688b      	ldr	r3, [r1, #8]
   28b02:	b1bb      	cbz	r3, 28b34 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   28b04:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   28b08:	f014 0f30 	tst.w	r4, #48	; 0x30
   28b0c:	d103      	bne.n	28b16 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   28b0e:	f014 000c 	ands.w	r0, r4, #12
   28b12:	d107      	bne.n	28b24 <bt_gatt_check_perm+0x42>
}
   28b14:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   28b16:	4628      	mov	r0, r5
   28b18:	f7fe fe7d 	bl	27816 <bt_conn_get_security>
   28b1c:	2802      	cmp	r0, #2
   28b1e:	d8f6      	bhi.n	28b0e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   28b20:	2005      	movs	r0, #5
   28b22:	e7f7      	b.n	28b14 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   28b24:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   28b26:	2b00      	cmp	r3, #0
   28b28:	bf14      	ite	ne
   28b2a:	2000      	movne	r0, #0
   28b2c:	200f      	moveq	r0, #15
   28b2e:	e7f1      	b.n	28b14 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   28b30:	2002      	movs	r0, #2
   28b32:	e7ef      	b.n	28b14 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   28b34:	2003      	movs	r0, #3
   28b36:	e7ed      	b.n	28b14 <bt_gatt_check_perm+0x32>

00028b38 <gatt_discover_next>:
{
   28b38:	b570      	push	{r4, r5, r6, lr}
   28b3a:	4605      	mov	r5, r0
   28b3c:	4614      	mov	r4, r2
	if (!last_handle)
   28b3e:	b929      	cbnz	r1, 28b4c <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   28b40:	4621      	mov	r1, r4
   28b42:	4628      	mov	r0, r5
   28b44:	f7e4 fc12 	bl	d36c <bt_gatt_discover>
   28b48:	b928      	cbnz	r0, 28b56 <gatt_discover_next+0x1e>
}
   28b4a:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   28b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   28b50:	4291      	cmp	r1, r2
   28b52:	d107      	bne.n	28b64 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   28b54:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   28b56:	6863      	ldr	r3, [r4, #4]
   28b58:	4622      	mov	r2, r4
   28b5a:	4628      	mov	r0, r5
   28b5c:	2100      	movs	r1, #0
}
   28b5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   28b62:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   28b64:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   28b66:	1c4b      	adds	r3, r1, #1
   28b68:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   28b6a:	429a      	cmp	r2, r3
		params->start_handle++;
   28b6c:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   28b6e:	d2e7      	bcs.n	28b40 <gatt_discover_next+0x8>
   28b70:	e7f1      	b.n	28b56 <gatt_discover_next+0x1e>

00028b72 <gatt_find_type_rsp>:
{
   28b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28b76:	b088      	sub	sp, #32
   28b78:	4607      	mov	r7, r0
   28b7a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   28b7e:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   28b80:	b911      	cbnz	r1, 28b88 <gatt_find_type_rsp+0x16>
   28b82:	f013 0803 	ands.w	r8, r3, #3
   28b86:	d008      	beq.n	28b9a <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   28b88:	f8d9 3004 	ldr.w	r3, [r9, #4]
   28b8c:	464a      	mov	r2, r9
   28b8e:	2100      	movs	r1, #0
   28b90:	4638      	mov	r0, r7
}
   28b92:	b008      	add	sp, #32
   28b94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   28b98:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   28b9a:	f3c3 0387 	ubfx	r3, r3, #2, #8
   28b9e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   28ba2:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   28ba4:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   28ba8:	42ac      	cmp	r4, r5
   28baa:	d107      	bne.n	28bbc <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   28bac:	464a      	mov	r2, r9
   28bae:	4641      	mov	r1, r8
   28bb0:	4638      	mov	r0, r7
}
   28bb2:	b008      	add	sp, #32
   28bb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   28bb8:	f7ff bfbe 	b.w	28b38 <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   28bbc:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   28bbe:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   28bc2:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   28bc6:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   28bc8:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   28bcc:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   28bd0:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   28bd2:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   28bd4:	bf0c      	ite	eq
   28bd6:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   28bda:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   28bdc:	ab01      	add	r3, sp, #4
   28bde:	f8ad 1002 	strh.w	r1, [sp, #2]
   28be2:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   28be4:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   28be8:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   28bec:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   28bf0:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   28bf4:	f8cd d00c 	str.w	sp, [sp, #12]
   28bf8:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   28bfc:	464a      	mov	r2, r9
   28bfe:	a903      	add	r1, sp, #12
   28c00:	4638      	mov	r0, r7
   28c02:	4798      	blx	r3
   28c04:	3404      	adds	r4, #4
   28c06:	2800      	cmp	r0, #0
   28c08:	d1ce      	bne.n	28ba8 <gatt_find_type_rsp+0x36>
}
   28c0a:	b008      	add	sp, #32
   28c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028c10 <bt_gatt_cancel>:
{
   28c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   28c12:	4604      	mov	r4, r0
   28c14:	460d      	mov	r5, r1
	k_sched_lock();
   28c16:	f7f9 fe8d 	bl	22934 <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   28c1a:	4629      	mov	r1, r5
   28c1c:	4620      	mov	r0, r4
   28c1e:	f7ff fba6 	bl	2836e <bt_att_find_req_by_user_data>
	if (req) {
   28c22:	4601      	mov	r1, r0
   28c24:	b920      	cbnz	r0, 28c30 <bt_gatt_cancel+0x20>
}
   28c26:	b002      	add	sp, #8
   28c28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   28c2c:	f7fa b850 	b.w	22cd0 <k_sched_unlock>
		func = req->func;
   28c30:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   28c32:	4620      	mov	r0, r4
   28c34:	f7e3 fda0 	bl	c778 <bt_att_req_cancel>
	k_sched_unlock();
   28c38:	f7fa f84a 	bl	22cd0 <k_sched_unlock>
	if (func) {
   28c3c:	b12e      	cbz	r6, 28c4a <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   28c3e:	2300      	movs	r3, #0
   28c40:	9500      	str	r5, [sp, #0]
   28c42:	461a      	mov	r2, r3
   28c44:	210e      	movs	r1, #14
   28c46:	4620      	mov	r0, r4
   28c48:	47b0      	blx	r6
}
   28c4a:	b002      	add	sp, #8
   28c4c:	bd70      	pop	{r4, r5, r6, pc}

00028c4e <bt_gatt_unsubscribe>:
{
   28c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   28c52:	7b43      	ldrb	r3, [r0, #13]
   28c54:	2b07      	cmp	r3, #7
{
   28c56:	4680      	mov	r8, r0
   28c58:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   28c5a:	d155      	bne.n	28d08 <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   28c5c:	f7e3 fe08 	bl	c870 <gatt_sub_find>
	if (!sub) {
   28c60:	4606      	mov	r6, r0
   28c62:	2800      	cmp	r0, #0
   28c64:	d053      	beq.n	28d0e <bt_gatt_unsubscribe+0xc0>
	return list->head;
   28c66:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   28c68:	b104      	cbz	r4, 28c6c <bt_gatt_unsubscribe+0x1e>
   28c6a:	3c14      	subs	r4, #20
			has_subscription = true;
   28c6c:	2300      	movs	r3, #0
   28c6e:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   28c70:	bb5c      	cbnz	r4, 28cca <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   28c72:	2b00      	cmp	r3, #0
   28c74:	d04b      	beq.n	28d0e <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   28c76:	2f00      	cmp	r7, #0
   28c78:	d035      	beq.n	28ce6 <bt_gatt_unsubscribe+0x98>
   28c7a:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   28c7c:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28c80:	b15b      	cbz	r3, 28c9a <bt_gatt_unsubscribe+0x4c>
   28c82:	429a      	cmp	r2, r3
   28c84:	d13d      	bne.n	28d02 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   28c86:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   28c88:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   28c8a:	2c00      	cmp	r4, #0
   28c8c:	d134      	bne.n	28cf8 <bt_gatt_unsubscribe+0xaa>
   28c8e:	428a      	cmp	r2, r1
	list->head = node;
   28c90:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   28c92:	d100      	bne.n	28c96 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   28c94:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   28c96:	2300      	movs	r3, #0
   28c98:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   28c9a:	f105 0010 	add.w	r0, r5, #16
   28c9e:	f7ff fba8 	bl	283f2 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   28ca2:	0743      	lsls	r3, r0, #29
   28ca4:	d503      	bpl.n	28cae <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   28ca6:	4629      	mov	r1, r5
   28ca8:	4640      	mov	r0, r8
   28caa:	f7ff ffb1 	bl	28c10 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   28cae:	68b3      	ldr	r3, [r6, #8]
   28cb0:	b913      	cbnz	r3, 28cb8 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   28cb2:	4630      	mov	r0, r6
   28cb4:	f7ff fd04 	bl	286c0 <gatt_sub_free>
	if (has_subscription) {
   28cb8:	b367      	cbz	r7, 28d14 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   28cba:	2300      	movs	r3, #0
   28cbc:	682c      	ldr	r4, [r5, #0]
   28cbe:	461a      	mov	r2, r3
   28cc0:	4629      	mov	r1, r5
   28cc2:	4640      	mov	r0, r8
   28cc4:	47a0      	blx	r4
	return 0;
   28cc6:	2000      	movs	r0, #0
   28cc8:	e014      	b.n	28cf4 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   28cca:	42ac      	cmp	r4, r5
   28ccc:	d009      	beq.n	28ce2 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   28cce:	8921      	ldrh	r1, [r4, #8]
   28cd0:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   28cd2:	4291      	cmp	r1, r2
   28cd4:	bf08      	it	eq
   28cd6:	2701      	moveq	r7, #1
	return node->next;
   28cd8:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   28cda:	2c00      	cmp	r4, #0
   28cdc:	d0c9      	beq.n	28c72 <bt_gatt_unsubscribe+0x24>
   28cde:	3c14      	subs	r4, #20
   28ce0:	e7c6      	b.n	28c70 <bt_gatt_unsubscribe+0x22>
			found = true;
   28ce2:	2301      	movs	r3, #1
   28ce4:	e7f8      	b.n	28cd8 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   28ce6:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   28ce8:	4629      	mov	r1, r5
   28cea:	4640      	mov	r0, r8
   28cec:	f7e3 fdee 	bl	c8cc <gatt_write_ccc>
		if (err) {
   28cf0:	2800      	cmp	r0, #0
   28cf2:	d0c2      	beq.n	28c7a <bt_gatt_unsubscribe+0x2c>
}
   28cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   28cf8:	428a      	cmp	r2, r1
	parent->next = child;
   28cfa:	6023      	str	r3, [r4, #0]
	list->tail = node;
   28cfc:	bf08      	it	eq
   28cfe:	60f4      	streq	r4, [r6, #12]
}
   28d00:	e7c9      	b.n	28c96 <bt_gatt_unsubscribe+0x48>
	return node->next;
   28d02:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   28d04:	681b      	ldr	r3, [r3, #0]
   28d06:	e7bb      	b.n	28c80 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   28d08:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   28d0c:	e7f2      	b.n	28cf4 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   28d0e:	f06f 0015 	mvn.w	r0, #21
   28d12:	e7ef      	b.n	28cf4 <bt_gatt_unsubscribe+0xa6>
	return 0;
   28d14:	4638      	mov	r0, r7
   28d16:	e7ed      	b.n	28cf4 <bt_gatt_unsubscribe+0xa6>

00028d18 <bt_gatt_notification>:
{
   28d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28d1c:	4606      	mov	r6, r0
   28d1e:	460f      	mov	r7, r1
   28d20:	4690      	mov	r8, r2
   28d22:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   28d24:	f7e3 fda4 	bl	c870 <gatt_sub_find>
	if (!sub) {
   28d28:	b300      	cbz	r0, 28d6c <bt_gatt_notification+0x54>
	return list->head;
   28d2a:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   28d2c:	b1f4      	cbz	r4, 28d6c <bt_gatt_notification+0x54>
	return node->next;
   28d2e:	f854 a914 	ldr.w	sl, [r4], #-20
   28d32:	f1ba 0f00 	cmp.w	sl, #0
   28d36:	d001      	beq.n	28d3c <bt_gatt_notification+0x24>
   28d38:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   28d3c:	8923      	ldrh	r3, [r4, #8]
   28d3e:	42bb      	cmp	r3, r7
   28d40:	d10a      	bne.n	28d58 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   28d42:	6825      	ldr	r5, [r4, #0]
   28d44:	464b      	mov	r3, r9
   28d46:	4642      	mov	r2, r8
   28d48:	4621      	mov	r1, r4
   28d4a:	4630      	mov	r0, r6
   28d4c:	47a8      	blx	r5
   28d4e:	b918      	cbnz	r0, 28d58 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   28d50:	4621      	mov	r1, r4
   28d52:	4630      	mov	r0, r6
   28d54:	f7ff ff7b 	bl	28c4e <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   28d58:	f1ba 0f00 	cmp.w	sl, #0
   28d5c:	d006      	beq.n	28d6c <bt_gatt_notification+0x54>
   28d5e:	f8da 5014 	ldr.w	r5, [sl, #20]
   28d62:	b105      	cbz	r5, 28d66 <bt_gatt_notification+0x4e>
   28d64:	3d14      	subs	r5, #20
{
   28d66:	4654      	mov	r4, sl
   28d68:	46aa      	mov	sl, r5
   28d6a:	e7e7      	b.n	28d3c <bt_gatt_notification+0x24>
}
   28d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028d70 <bt_gatt_change_aware>:
{
   28d70:	b510      	push	{r4, lr}
   28d72:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   28d74:	f7e3 fd2e 	bl	c7d4 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28d78:	b910      	cbnz	r0, 28d80 <bt_gatt_change_aware+0x10>
		return true;
   28d7a:	2401      	movs	r4, #1
}
   28d7c:	4620      	mov	r0, r4
   28d7e:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   28d80:	7a03      	ldrb	r3, [r0, #8]
   28d82:	07d9      	lsls	r1, r3, #31
   28d84:	d5f9      	bpl.n	28d7a <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   28d86:	f100 030c 	add.w	r3, r0, #12
   28d8a:	4618      	mov	r0, r3
   28d8c:	f7ff fb31 	bl	283f2 <atomic_get>
   28d90:	f010 0101 	ands.w	r1, r0, #1
   28d94:	d1f1      	bne.n	28d7a <bt_gatt_change_aware+0xa>
	if (!req) {
   28d96:	2c00      	cmp	r4, #0
   28d98:	d0f0      	beq.n	28d7c <bt_gatt_change_aware+0xc>
   28d9a:	4618      	mov	r0, r3
   28d9c:	f7ff fb29 	bl	283f2 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   28da0:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   28da2:	f3c0 0440 	ubfx	r4, r0, #1, #1
   28da6:	d50f      	bpl.n	28dc8 <bt_gatt_change_aware+0x58>
   28da8:	f3bf 8f5b 	dmb	ish
   28dac:	e853 2f00 	ldrex	r2, [r3]
   28db0:	f022 0202 	bic.w	r2, r2, #2
   28db4:	e843 2000 	strex	r0, r2, [r3]
   28db8:	2800      	cmp	r0, #0
   28dba:	d1f7      	bne.n	28dac <bt_gatt_change_aware+0x3c>
   28dbc:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   28dc0:	4618      	mov	r0, r3
   28dc2:	f7ff fdaf 	bl	28924 <atomic_set_bit>
	return false;
   28dc6:	e7d9      	b.n	28d7c <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   28dc8:	2101      	movs	r1, #1
   28dca:	e7f9      	b.n	28dc0 <bt_gatt_change_aware+0x50>

00028dcc <sys_memcpy_swap>:
	psrc += length - 1;
   28dcc:	1e53      	subs	r3, r2, #1
   28dce:	4419      	add	r1, r3
	for (; length > 0; length--) {
   28dd0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   28dd2:	f811 3901 	ldrb.w	r3, [r1], #-1
   28dd6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   28dda:	4290      	cmp	r0, r2
   28ddc:	d1f9      	bne.n	28dd2 <sys_memcpy_swap+0x6>
}
   28dde:	4770      	bx	lr

00028de0 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   28de0:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   28de2:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   28de4:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28de8:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   28dea:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   28dee:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   28df2:	b928      	cbnz	r0, 28e00 <le_sc_oob_config_set+0x20>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   28df4:	b952      	cbnz	r2, 28e0c <le_sc_oob_config_set+0x2c>
				     BT_CONN_OOB_BOTH_PEERS :
   28df6:	2b00      	cmp	r3, #0
   28df8:	bf0c      	ite	eq
   28dfa:	2303      	moveq	r3, #3
   28dfc:	2300      	movne	r3, #0
   28dfe:	e009      	b.n	28e14 <le_sc_oob_config_set+0x34>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   28e00:	b952      	cbnz	r2, 28e18 <le_sc_oob_config_set+0x38>
				     BT_CONN_OOB_BOTH_PEERS :
   28e02:	2b00      	cmp	r3, #0
   28e04:	bf0c      	ite	eq
   28e06:	2303      	moveq	r3, #3
   28e08:	2301      	movne	r3, #1
   28e0a:	e003      	b.n	28e14 <le_sc_oob_config_set+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
   28e0c:	2b00      	cmp	r3, #0
   28e0e:	bf0c      	ite	eq
   28e10:	2301      	moveq	r3, #1
   28e12:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   28e14:	704b      	strb	r3, [r1, #1]
}
   28e16:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   28e18:	005b      	lsls	r3, r3, #1
   28e1a:	e7fb      	b.n	28e14 <le_sc_oob_config_set+0x34>

00028e1c <smp_signing_info>:
}
   28e1c:	2007      	movs	r0, #7
   28e1e:	4770      	bx	lr

00028e20 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   28e20:	2301      	movs	r3, #1
   28e22:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   28e24:	43db      	mvns	r3, r3
   28e26:	f3bf 8f5b 	dmb	ish
   28e2a:	e850 2f00 	ldrex	r2, [r0]
   28e2e:	401a      	ands	r2, r3
   28e30:	e840 2100 	strex	r1, r2, [r0]
   28e34:	2900      	cmp	r1, #0
   28e36:	d1f8      	bne.n	28e2a <atomic_clear_bit+0xa>
   28e38:	f3bf 8f5b 	dmb	ish
}
   28e3c:	4770      	bx	lr

00028e3e <bt_addr_le_copy>:
   28e3e:	680b      	ldr	r3, [r1, #0]
   28e40:	6003      	str	r3, [r0, #0]
   28e42:	888b      	ldrh	r3, [r1, #4]
   28e44:	8083      	strh	r3, [r0, #4]
   28e46:	798b      	ldrb	r3, [r1, #6]
   28e48:	7183      	strb	r3, [r0, #6]
   28e4a:	4770      	bx	lr

00028e4c <smp_s1>:
{
   28e4c:	b410      	push	{r4}
   28e4e:	4614      	mov	r4, r2
   28e50:	461a      	mov	r2, r3
   28e52:	6823      	ldr	r3, [r4, #0]
   28e54:	6013      	str	r3, [r2, #0]
   28e56:	6863      	ldr	r3, [r4, #4]
   28e58:	6053      	str	r3, [r2, #4]
   28e5a:	680b      	ldr	r3, [r1, #0]
   28e5c:	6093      	str	r3, [r2, #8]
   28e5e:	684b      	ldr	r3, [r1, #4]
}
   28e60:	bc10      	pop	{r4}
   28e62:	60d3      	str	r3, [r2, #12]
	return bt_encrypt_le(k, out, out);
   28e64:	4611      	mov	r1, r2
   28e66:	f7ea bb41 	b.w	134ec <bt_encrypt_le>

00028e6a <bt_smp_aes_cmac>:
{
   28e6a:	b570      	push	{r4, r5, r6, lr}
   28e6c:	b0c2      	sub	sp, #264	; 0x108
   28e6e:	460d      	mov	r5, r1
   28e70:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28e72:	4601      	mov	r1, r0
   28e74:	aa16      	add	r2, sp, #88	; 0x58
   28e76:	4668      	mov	r0, sp
{
   28e78:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   28e7a:	f7fd fdf9 	bl	26a70 <tc_cmac_setup>
   28e7e:	b150      	cbz	r0, 28e96 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   28e80:	4632      	mov	r2, r6
   28e82:	4629      	mov	r1, r5
   28e84:	4668      	mov	r0, sp
   28e86:	f7fd fe1e 	bl	26ac6 <tc_cmac_update>
   28e8a:	b120      	cbz	r0, 28e96 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   28e8c:	4669      	mov	r1, sp
   28e8e:	4620      	mov	r0, r4
   28e90:	f7fd fe84 	bl	26b9c <tc_cmac_final>
   28e94:	b918      	cbnz	r0, 28e9e <bt_smp_aes_cmac+0x34>
		return -EIO;
   28e96:	f06f 0004 	mvn.w	r0, #4
}
   28e9a:	b042      	add	sp, #264	; 0x108
   28e9c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   28e9e:	2000      	movs	r0, #0
   28ea0:	e7fb      	b.n	28e9a <bt_smp_aes_cmac+0x30>

00028ea2 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28ea2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   28ea4:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28ea6:	2200      	movs	r2, #0
   28ea8:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   28eaa:	4604      	mov	r4, r0
   28eac:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   28eae:	460a      	mov	r2, r1
   28eb0:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   28eb4:	2106      	movs	r1, #6
   28eb6:	f7fe fdd4 	bl	27a62 <bt_l2cap_send_cb>
   28eba:	b128      	cbz	r0, 28ec8 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   28ebc:	4628      	mov	r0, r5
}
   28ebe:	b003      	add	sp, #12
   28ec0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   28ec4:	f7f6 bf50 	b.w	1fd68 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28ec8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   28ecc:	2300      	movs	r3, #0
   28ece:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   28ed2:	b003      	add	sp, #12
   28ed4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   28ed8:	f7f9 bcce 	b.w	22878 <k_work_reschedule>

00028edc <z_log_msg2_static_create.constprop.0>:
   28edc:	2300      	movs	r3, #0
   28ede:	f7fc bd6a 	b.w	259b6 <z_impl_z_log_msg2_static_create>

00028ee2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   28ee2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   28ee4:	ab0a      	add	r3, sp, #40	; 0x28
   28ee6:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   28ee8:	9302      	str	r3, [sp, #8]
   28eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28eec:	9301      	str	r3, [sp, #4]
   28eee:	2300      	movs	r3, #0
   28ef0:	9300      	str	r3, [sp, #0]
   28ef2:	2201      	movs	r2, #1
   28ef4:	4618      	mov	r0, r3
   28ef6:	f7dd f9f5 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
   28efa:	b007      	add	sp, #28
   28efc:	f85d fb04 	ldr.w	pc, [sp], #4

00028f00 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   28f00:	b510      	push	{r4, lr}
   28f02:	1e43      	subs	r3, r0, #1
   28f04:	f100 0210 	add.w	r2, r0, #16
   28f08:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   28f0a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   28f0e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28f12:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   28f14:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   28f16:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   28f18:	d1f7      	bne.n	28f0a <sys_mem_swap.constprop.0+0xa>
	}
}
   28f1a:	bd10      	pop	{r4, pc}

00028f1c <smp_f6>:
{
   28f1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   28f20:	b097      	sub	sp, #92	; 0x5c
   28f22:	4604      	mov	r4, r0
   28f24:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   28f26:	a805      	add	r0, sp, #20
   28f28:	2210      	movs	r2, #16
{
   28f2a:	461d      	mov	r5, r3
   28f2c:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   28f30:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   28f32:	f7ff ff4b 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   28f36:	2210      	movs	r2, #16
   28f38:	4631      	mov	r1, r6
   28f3a:	a809      	add	r0, sp, #36	; 0x24
   28f3c:	f7ff ff46 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   28f40:	2210      	movs	r2, #16
   28f42:	4629      	mov	r1, r5
   28f44:	a80d      	add	r0, sp, #52	; 0x34
   28f46:	f7ff ff41 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   28f4a:	991e      	ldr	r1, [sp, #120]	; 0x78
   28f4c:	2203      	movs	r2, #3
   28f4e:	a811      	add	r0, sp, #68	; 0x44
   28f50:	f7ff ff3c 	bl	28dcc <sys_memcpy_swap>
	m[51] = a1->type;
   28f54:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   28f56:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   28f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
   28f5e:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   28f62:	9012      	str	r0, [sp, #72]	; 0x48
   28f64:	888b      	ldrh	r3, [r1, #4]
   28f66:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   28f6a:	2206      	movs	r2, #6
   28f6c:	a812      	add	r0, sp, #72	; 0x48
   28f6e:	f7ff ff2d 	bl	28dcc <sys_memcpy_swap>
	m[58] = a2->type;
   28f72:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28f74:	2206      	movs	r2, #6
	m[58] = a2->type;
   28f76:	f811 3b01 	ldrb.w	r3, [r1], #1
   28f7a:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   28f7e:	f8d8 3001 	ldr.w	r3, [r8, #1]
   28f82:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28f86:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   28f8a:	888b      	ldrh	r3, [r1, #4]
   28f8c:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   28f90:	f7ff ff1c 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   28f94:	4621      	mov	r1, r4
   28f96:	2210      	movs	r2, #16
   28f98:	a801      	add	r0, sp, #4
   28f9a:	f7ff ff17 	bl	28dcc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   28f9e:	463b      	mov	r3, r7
   28fa0:	2241      	movs	r2, #65	; 0x41
   28fa2:	a905      	add	r1, sp, #20
   28fa4:	a801      	add	r0, sp, #4
   28fa6:	f7ff ff60 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
   28faa:	4604      	mov	r4, r0
   28fac:	b910      	cbnz	r0, 28fb4 <smp_f6+0x98>
	sys_mem_swap(check, 16);
   28fae:	4638      	mov	r0, r7
   28fb0:	f7ff ffa6 	bl	28f00 <sys_mem_swap.constprop.0>
}
   28fb4:	4620      	mov	r0, r4
   28fb6:	b017      	add	sp, #92	; 0x5c
   28fb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00028fbc <smp_f4>:
{
   28fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   28fbe:	b097      	sub	sp, #92	; 0x5c
   28fc0:	4614      	mov	r4, r2
   28fc2:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   28fc4:	2220      	movs	r2, #32
   28fc6:	4601      	mov	r1, r0
   28fc8:	a805      	add	r0, sp, #20
{
   28fca:	461d      	mov	r5, r3
   28fcc:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   28fce:	f7ff fefd 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   28fd2:	2220      	movs	r2, #32
   28fd4:	4631      	mov	r1, r6
   28fd6:	a80d      	add	r0, sp, #52	; 0x34
   28fd8:	f7ff fef8 	bl	28dcc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   28fdc:	4621      	mov	r1, r4
   28fde:	2210      	movs	r2, #16
   28fe0:	a801      	add	r0, sp, #4
	m[64] = z;
   28fe2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   28fe6:	f7ff fef1 	bl	28dcc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   28fea:	463b      	mov	r3, r7
   28fec:	2241      	movs	r2, #65	; 0x41
   28fee:	a905      	add	r1, sp, #20
   28ff0:	a801      	add	r0, sp, #4
   28ff2:	f7ff ff3a 	bl	28e6a <bt_smp_aes_cmac>
	if (err) {
   28ff6:	4604      	mov	r4, r0
   28ff8:	b910      	cbnz	r0, 29000 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   28ffa:	4638      	mov	r0, r7
   28ffc:	f7ff ff80 	bl	28f00 <sys_mem_swap.constprop.0>
}
   29000:	4620      	mov	r0, r4
   29002:	b017      	add	sp, #92	; 0x5c
   29004:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029006 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29006:	f3bf 8f5b 	dmb	ish
   2900a:	6800      	ldr	r0, [r0, #0]
   2900c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   29010:	4108      	asrs	r0, r1
}
   29012:	f000 0001 	and.w	r0, r0, #1
   29016:	4770      	bx	lr

00029018 <smp_keys_check>:
{
   29018:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2901a:	210b      	movs	r1, #11
{
   2901c:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2901e:	3004      	adds	r0, #4
   29020:	f7ff fff1 	bl	29006 <atomic_test_bit>
   29024:	b108      	cbz	r0, 2902a <smp_keys_check+0x12>
		return false;
   29026:	2000      	movs	r0, #0
}
   29028:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   2902a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2902e:	b983      	cbnz	r3, 29052 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   29030:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   29034:	7a21      	ldrb	r1, [r4, #8]
   29036:	462a      	mov	r2, r5
   29038:	2020      	movs	r0, #32
   2903a:	f7e6 ff93 	bl	ff64 <bt_keys_find>
   2903e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   29042:	b930      	cbnz	r0, 29052 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   29044:	7a21      	ldrb	r1, [r4, #8]
   29046:	462a      	mov	r2, r5
   29048:	2004      	movs	r0, #4
   2904a:	f7e6 ff8b 	bl	ff64 <bt_keys_find>
   2904e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   29052:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   29056:	2b00      	cmp	r3, #0
   29058:	d0e5      	beq.n	29026 <smp_keys_check+0xe>
   2905a:	89da      	ldrh	r2, [r3, #14]
   2905c:	f002 0224 	and.w	r2, r2, #36	; 0x24
   29060:	2a00      	cmp	r2, #0
   29062:	d0e0      	beq.n	29026 <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   29064:	7aa2      	ldrb	r2, [r4, #10]
   29066:	2a02      	cmp	r2, #2
   29068:	d902      	bls.n	29070 <smp_keys_check+0x58>
   2906a:	7b5b      	ldrb	r3, [r3, #13]
   2906c:	07db      	lsls	r3, r3, #31
   2906e:	d5da      	bpl.n	29026 <smp_keys_check+0xe>
	return true;
   29070:	2001      	movs	r0, #1
   29072:	e7d9      	b.n	29028 <smp_keys_check+0x10>

00029074 <update_keys_check>:
{
   29074:	b510      	push	{r4, lr}
   29076:	4603      	mov	r3, r0
	if (!keys ||
   29078:	b1d9      	cbz	r1, 290b2 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2907a:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2907c:	f010 0f24 	tst.w	r0, #36	; 0x24
   29080:	d017      	beq.n	290b2 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   29082:	7d1a      	ldrb	r2, [r3, #20]
   29084:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   29086:	7b09      	ldrb	r1, [r1, #12]
   29088:	42a2      	cmp	r2, r4
   2908a:	bf28      	it	cs
   2908c:	4622      	movcs	r2, r4
   2908e:	4291      	cmp	r1, r2
   29090:	d901      	bls.n	29096 <update_keys_check+0x22>
		return false;
   29092:	2000      	movs	r0, #0
}
   29094:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   29096:	0682      	lsls	r2, r0, #26
   29098:	d404      	bmi.n	290a4 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2909a:	7a18      	ldrb	r0, [r3, #8]
   2909c:	3800      	subs	r0, #0
   2909e:	bf18      	it	ne
   290a0:	2001      	movne	r0, #1
   290a2:	e7f7      	b.n	29094 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   290a4:	2105      	movs	r1, #5
   290a6:	1d18      	adds	r0, r3, #4
   290a8:	f7ff ffad 	bl	29006 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   290ac:	2800      	cmp	r0, #0
   290ae:	d1f4      	bne.n	2909a <update_keys_check+0x26>
   290b0:	e7ef      	b.n	29092 <update_keys_check+0x1e>
		return true;
   290b2:	2001      	movs	r0, #1
   290b4:	e7ee      	b.n	29094 <update_keys_check+0x20>

000290b6 <remote_sec_level_reachable>:
{
   290b6:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   290b8:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   290bc:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   290be:	2a03      	cmp	r2, #3
{
   290c0:	4603      	mov	r3, r0
	switch (sec) {
   290c2:	d014      	beq.n	290ee <remote_sec_level_reachable+0x38>
   290c4:	d805      	bhi.n	290d2 <remote_sec_level_reachable+0x1c>
   290c6:	3a01      	subs	r2, #1
   290c8:	2a01      	cmp	r2, #1
   290ca:	bf94      	ite	ls
   290cc:	2000      	movls	r0, #0
   290ce:	2008      	movhi	r0, #8
}
   290d0:	bd08      	pop	{r3, pc}
	switch (sec) {
   290d2:	2a04      	cmp	r2, #4
   290d4:	d10f      	bne.n	290f6 <remote_sec_level_reachable+0x40>
	return MIN(req->max_key_size, rsp->max_key_size);
   290d6:	7d02      	ldrb	r2, [r0, #20]
   290d8:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   290da:	428a      	cmp	r2, r1
   290dc:	bf28      	it	cs
   290de:	460a      	movcs	r2, r1
   290e0:	2a10      	cmp	r2, #16
   290e2:	d10a      	bne.n	290fa <remote_sec_level_reachable+0x44>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   290e4:	2105      	movs	r1, #5
   290e6:	3004      	adds	r0, #4
   290e8:	f7ff ff8d 	bl	29006 <atomic_test_bit>
   290ec:	b108      	cbz	r0, 290f2 <remote_sec_level_reachable+0x3c>
		if (smp->method == JUST_WORKS) {
   290ee:	7a1b      	ldrb	r3, [r3, #8]
   290f0:	b92b      	cbnz	r3, 290fe <remote_sec_level_reachable+0x48>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   290f2:	2003      	movs	r0, #3
   290f4:	e7ec      	b.n	290d0 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   290f6:	2008      	movs	r0, #8
   290f8:	e7ea      	b.n	290d0 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   290fa:	2006      	movs	r0, #6
   290fc:	e7e8      	b.n	290d0 <remote_sec_level_reachable+0x1a>
		return 0;
   290fe:	2000      	movs	r0, #0
   29100:	e7e6      	b.n	290d0 <remote_sec_level_reachable+0x1a>

00029102 <atomic_test_and_clear_bit>:
{
   29102:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   29104:	2301      	movs	r3, #1
   29106:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2910a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2910c:	f3bf 8f5b 	dmb	ish
   29110:	e850 3f00 	ldrex	r3, [r0]
   29114:	ea03 0c02 	and.w	ip, r3, r2
   29118:	e840 ce00 	strex	lr, ip, [r0]
   2911c:	f1be 0f00 	cmp.w	lr, #0
   29120:	d1f6      	bne.n	29110 <atomic_test_and_clear_bit+0xe>
   29122:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   29126:	420b      	tst	r3, r1
}
   29128:	bf14      	ite	ne
   2912a:	2001      	movne	r0, #1
   2912c:	2000      	moveq	r0, #0
   2912e:	f85d fb04 	ldr.w	pc, [sp], #4

00029132 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29132:	2301      	movs	r3, #1
   29134:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29136:	f3bf 8f5b 	dmb	ish
   2913a:	e850 2f00 	ldrex	r2, [r0]
   2913e:	431a      	orrs	r2, r3
   29140:	e840 2100 	strex	r1, r2, [r0]
   29144:	2900      	cmp	r1, #0
   29146:	d1f8      	bne.n	2913a <atomic_set_bit+0x8>
   29148:	f3bf 8f5b 	dmb	ish
}
   2914c:	4770      	bx	lr

0002914e <smp_keypress_notif>:
{
   2914e:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   29150:	210e      	movs	r1, #14
   29152:	f7ff ffee 	bl	29132 <atomic_set_bit>
}
   29156:	2000      	movs	r0, #0
   29158:	bd08      	pop	{r3, pc}

0002915a <generate_dhkey>:
{
   2915a:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2915c:	2107      	movs	r1, #7
{
   2915e:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   29160:	3004      	adds	r0, #4
   29162:	f7ff ffe6 	bl	29132 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   29166:	2008      	movs	r0, #8
   29168:	f7e5 f86e 	bl	e248 <smp_find>
   2916c:	b920      	cbnz	r0, 29178 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   2916e:	4620      	mov	r0, r4
}
   29170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   29174:	f7e5 b908 	b.w	e388 <smp_dhkey_generate>
}
   29178:	2000      	movs	r0, #0
   2917a:	bd10      	pop	{r4, pc}

0002917c <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2917c:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2917e:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   29180:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   29182:	4628      	mov	r0, r5
   29184:	2104      	movs	r1, #4
   29186:	f7ff ff3e 	bl	29006 <atomic_test_bit>
   2918a:	b970      	cbnz	r0, 291aa <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2918c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29190:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   29192:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   29194:	4608      	mov	r0, r1
   29196:	f7fe fc61 	bl	27a5c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2919a:	4604      	mov	r4, r0
   2919c:	b938      	cbnz	r0, 291ae <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2919e:	2104      	movs	r1, #4
   291a0:	4628      	mov	r0, r5
   291a2:	f7ff ffc6 	bl	29132 <atomic_set_bit>
}
   291a6:	4620      	mov	r0, r4
   291a8:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   291aa:	2200      	movs	r2, #0
   291ac:	e7f0      	b.n	29190 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   291ae:	2101      	movs	r1, #1
   291b0:	3008      	adds	r0, #8
   291b2:	f000 fbca 	bl	2994a <net_buf_simple_add>
	hdr->code = op;
   291b6:	7006      	strb	r6, [r0, #0]
	return buf;
   291b8:	e7f5      	b.n	291a6 <smp_create_pdu.constprop.0+0x2a>

000291ba <send_pairing_rsp>:
{
   291ba:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   291bc:	2102      	movs	r1, #2
{
   291be:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   291c0:	f7ff ffdc 	bl	2917c <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   291c4:	4605      	mov	r5, r0
   291c6:	b180      	cbz	r0, 291ea <send_pairing_rsp+0x30>
   291c8:	2106      	movs	r1, #6
   291ca:	3008      	adds	r0, #8
   291cc:	f000 fbbd 	bl	2994a <net_buf_simple_add>
   291d0:	f8d4 3011 	ldr.w	r3, [r4, #17]
   291d4:	6003      	str	r3, [r0, #0]
   291d6:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   291da:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   291dc:	2200      	movs	r2, #0
   291de:	4620      	mov	r0, r4
   291e0:	4629      	mov	r1, r5
   291e2:	f7ff fe5e 	bl	28ea2 <smp_send.constprop.0>
	return 0;
   291e6:	2000      	movs	r0, #0
}
   291e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   291ea:	2008      	movs	r0, #8
   291ec:	e7fc      	b.n	291e8 <send_pairing_rsp+0x2e>

000291ee <smp_send_pairing_random>:
{
   291ee:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   291f0:	2104      	movs	r1, #4
{
   291f2:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   291f4:	f7ff ffc2 	bl	2917c <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   291f8:	4605      	mov	r5, r0
   291fa:	b1a0      	cbz	r0, 29226 <smp_send_pairing_random+0x38>
   291fc:	2110      	movs	r1, #16
   291fe:	3008      	adds	r0, #8
   29200:	f000 fba3 	bl	2994a <net_buf_simple_add>
   29204:	f104 0327 	add.w	r3, r4, #39	; 0x27
   29208:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2920c:	f853 1b04 	ldr.w	r1, [r3], #4
   29210:	f840 1b04 	str.w	r1, [r0], #4
   29214:	4293      	cmp	r3, r2
   29216:	d1f9      	bne.n	2920c <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   29218:	4620      	mov	r0, r4
   2921a:	2200      	movs	r2, #0
   2921c:	4629      	mov	r1, r5
   2921e:	f7ff fe40 	bl	28ea2 <smp_send.constprop.0>
	return 0;
   29222:	2000      	movs	r0, #0
}
   29224:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29226:	2008      	movs	r0, #8
   29228:	e7fc      	b.n	29224 <smp_send_pairing_random+0x36>

0002922a <sc_smp_send_dhkey_check>:
{
   2922a:	b570      	push	{r4, r5, r6, lr}
   2922c:	460c      	mov	r4, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2922e:	210d      	movs	r1, #13
{
   29230:	4606      	mov	r6, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   29232:	f7ff ffa3 	bl	2917c <smp_create_pdu.constprop.0>
	if (!buf) {
   29236:	4605      	mov	r5, r0
   29238:	b198      	cbz	r0, 29262 <sc_smp_send_dhkey_check+0x38>
   2923a:	2110      	movs	r1, #16
   2923c:	3008      	adds	r0, #8
   2923e:	f000 fb84 	bl	2994a <net_buf_simple_add>
   29242:	4621      	mov	r1, r4
   29244:	f104 0310 	add.w	r3, r4, #16
   29248:	f851 2b04 	ldr.w	r2, [r1], #4
   2924c:	f840 2b04 	str.w	r2, [r0], #4
   29250:	4299      	cmp	r1, r3
   29252:	d1f9      	bne.n	29248 <sc_smp_send_dhkey_check+0x1e>
	smp_send(smp, buf, NULL, NULL);
   29254:	4630      	mov	r0, r6
   29256:	2200      	movs	r2, #0
   29258:	4629      	mov	r1, r5
   2925a:	f7ff fe22 	bl	28ea2 <smp_send.constprop.0>
	return 0;
   2925e:	2000      	movs	r0, #0
}
   29260:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   29262:	2008      	movs	r0, #8
   29264:	e7fc      	b.n	29260 <sc_smp_send_dhkey_check+0x36>

00029266 <smp_reset>:
{
   29266:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29268:	1d03      	adds	r3, r0, #4
   2926a:	4604      	mov	r4, r0
   2926c:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2926e:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   29272:	f3bf 8f5b 	dmb	ish
   29276:	e853 2f00 	ldrex	r2, [r3]
   2927a:	e843 5100 	strex	r1, r5, [r3]
   2927e:	2900      	cmp	r1, #0
   29280:	d1f9      	bne.n	29276 <smp_reset+0x10>
   29282:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   29286:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2928a:	f001 f894 	bl	2a3b6 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2928e:	7225      	strb	r5, [r4, #8]
   29290:	f3bf 8f5b 	dmb	ish
   29294:	e854 3f00 	ldrex	r3, [r4]
   29298:	e844 5200 	strex	r2, r5, [r4]
   2929c:	2a00      	cmp	r2, #0
   2929e:	d1f9      	bne.n	29294 <smp_reset+0x2e>
   292a0:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   292a4:	78f3      	ldrb	r3, [r6, #3]
   292a6:	b92b      	cbnz	r3, 292b4 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   292a8:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   292aa:	4620      	mov	r0, r4
}
   292ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   292b0:	f7ff bf3f 	b.w	29132 <atomic_set_bit>
   292b4:	2101      	movs	r1, #1
   292b6:	e7f8      	b.n	292aa <smp_reset+0x44>

000292b8 <smp_c1>:
{
   292b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   292ba:	b089      	sub	sp, #36	; 0x24
   292bc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   292c0:	4605      	mov	r5, r0
	p1[0] = ia->type;
   292c2:	7830      	ldrb	r0, [r6, #0]
   292c4:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   292c8:	7838      	ldrb	r0, [r7, #0]
   292ca:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   292ce:	6810      	ldr	r0, [r2, #0]
   292d0:	f8cd 0002 	str.w	r0, [sp, #2]
   292d4:	8890      	ldrh	r0, [r2, #4]
   292d6:	7992      	ldrb	r2, [r2, #6]
{
   292d8:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   292da:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   292de:	681a      	ldr	r2, [r3, #0]
   292e0:	f8cd 2009 	str.w	r2, [sp, #9]
   292e4:	889a      	ldrh	r2, [r3, #4]
   292e6:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   292e8:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   292ec:	f8ad 200d 	strh.w	r2, [sp, #13]
   292f0:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   292f4:	f101 0c10 	add.w	ip, r1, #16
   292f8:	4620      	mov	r0, r4
   292fa:	466a      	mov	r2, sp
   292fc:	458c      	cmp	ip, r1
   292fe:	d124      	bne.n	2934a <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   29300:	4622      	mov	r2, r4
   29302:	4621      	mov	r1, r4
   29304:	4628      	mov	r0, r5
   29306:	f7ea f8f1 	bl	134ec <bt_encrypt_le>
	if (err) {
   2930a:	4603      	mov	r3, r0
   2930c:	bb70      	cbnz	r0, 2936c <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2930e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   29312:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   29316:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2931a:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   2931e:	f8cd 2016 	str.w	r2, [sp, #22]
   29322:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   29326:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   29328:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   2932a:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   2932e:	f104 0010 	add.w	r0, r4, #16
   29332:	4623      	mov	r3, r4
   29334:	a904      	add	r1, sp, #16
   29336:	4283      	cmp	r3, r0
   29338:	d110      	bne.n	2935c <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2933a:	4622      	mov	r2, r4
   2933c:	4621      	mov	r1, r4
   2933e:	4628      	mov	r0, r5
}
   29340:	b009      	add	sp, #36	; 0x24
   29342:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   29346:	f7ea b8d1 	b.w	134ec <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2934a:	f811 3b01 	ldrb.w	r3, [r1], #1
   2934e:	f812 eb01 	ldrb.w	lr, [r2], #1
   29352:	ea83 030e 	eor.w	r3, r3, lr
   29356:	f800 3b01 	strb.w	r3, [r0], #1
   2935a:	e7cf      	b.n	292fc <smp_c1+0x44>
   2935c:	f813 2b01 	ldrb.w	r2, [r3], #1
   29360:	f811 6b01 	ldrb.w	r6, [r1], #1
   29364:	4072      	eors	r2, r6
   29366:	f803 2c01 	strb.w	r2, [r3, #-1]
   2936a:	e7e4      	b.n	29336 <smp_c1+0x7e>
}
   2936c:	b009      	add	sp, #36	; 0x24
   2936e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029370 <legacy_send_pairing_confirm>:
{
   29370:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   29372:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   29374:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   29378:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2937a:	f7ff feff 	bl	2917c <smp_create_pdu.constprop.0>
	if (!buf) {
   2937e:	4606      	mov	r6, r0
   29380:	b1c0      	cbz	r0, 293b4 <legacy_send_pairing_confirm+0x44>
   29382:	2110      	movs	r1, #16
   29384:	3008      	adds	r0, #8
   29386:	f000 fae0 	bl	2994a <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2938a:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2938e:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   29390:	9002      	str	r0, [sp, #8]
   29392:	9301      	str	r3, [sp, #4]
   29394:	9400      	str	r4, [sp, #0]
   29396:	f105 0310 	add.w	r3, r5, #16
   2939a:	f105 0209 	add.w	r2, r5, #9
   2939e:	f105 0127 	add.w	r1, r5, #39	; 0x27
   293a2:	f105 0047 	add.w	r0, r5, #71	; 0x47
   293a6:	f7ff ff87 	bl	292b8 <smp_c1>
   293aa:	4604      	mov	r4, r0
   293ac:	b120      	cbz	r0, 293b8 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   293ae:	4630      	mov	r0, r6
   293b0:	f7f6 fcda 	bl	1fd68 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   293b4:	2008      	movs	r0, #8
   293b6:	e009      	b.n	293cc <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   293b8:	4602      	mov	r2, r0
   293ba:	4631      	mov	r1, r6
   293bc:	4628      	mov	r0, r5
   293be:	f7ff fd70 	bl	28ea2 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   293c2:	1d28      	adds	r0, r5, #4
   293c4:	4621      	mov	r1, r4
   293c6:	f7ff fd2b 	bl	28e20 <atomic_clear_bit>
	return 0;
   293ca:	4620      	mov	r0, r4
}
   293cc:	b004      	add	sp, #16
   293ce:	bd70      	pop	{r4, r5, r6, pc}

000293d0 <legacy_pairing_confirm>:
{
   293d0:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   293d2:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   293d6:	78d2      	ldrb	r2, [r2, #3]
{
   293d8:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   293da:	b932      	cbnz	r2, 293ea <legacy_pairing_confirm+0x1a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   293dc:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   293de:	f7ff fea8 	bl	29132 <atomic_set_bit>
}
   293e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return legacy_send_pairing_confirm(smp);
   293e6:	f7ff bfc3 	b.w	29370 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   293ea:	1d02      	adds	r2, r0, #4
   293ec:	210a      	movs	r1, #10
   293ee:	4610      	mov	r0, r2
   293f0:	f7ff fe09 	bl	29006 <atomic_test_bit>
   293f4:	b910      	cbnz	r0, 293fc <legacy_pairing_confirm+0x2c>
			atomic_set_bit(smp->allowed_cmds,
   293f6:	2104      	movs	r1, #4
   293f8:	4618      	mov	r0, r3
   293fa:	e7f0      	b.n	293de <legacy_pairing_confirm+0xe>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   293fc:	4610      	mov	r0, r2
   293fe:	2100      	movs	r1, #0
   29400:	f7ff fe97 	bl	29132 <atomic_set_bit>
}
   29404:	2000      	movs	r0, #0
   29406:	bd08      	pop	{r3, pc}

00029408 <bt_smp_request_ltk>:
{
   29408:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2940c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   29410:	e9cd 2300 	strd	r2, r3, [sp]
   29414:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   29416:	f7e4 fe15 	bl	e044 <smp_chan_get>
	if (!smp) {
   2941a:	4605      	mov	r5, r0
   2941c:	2800      	cmp	r0, #0
   2941e:	f000 8090 	beq.w	29542 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   29422:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29426:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   29428:	f1b9 0f00 	cmp.w	r9, #0
   2942c:	d12a      	bne.n	29484 <bt_smp_request_ltk+0x7c>
   2942e:	e9dd 2300 	ldrd	r2, r3, [sp]
   29432:	4313      	orrs	r3, r2
   29434:	d126      	bne.n	29484 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29436:	2103      	movs	r1, #3
   29438:	4638      	mov	r0, r7
   2943a:	f7ff fde4 	bl	29006 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2943e:	b308      	cbz	r0, 29484 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29440:	2101      	movs	r1, #1
   29442:	4638      	mov	r0, r7
   29444:	f7ff fddf 	bl	29006 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   29448:	4606      	mov	r6, r0
   2944a:	b1d8      	cbz	r0, 29484 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2944c:	7d2c      	ldrb	r4, [r5, #20]
   2944e:	7b6b      	ldrb	r3, [r5, #13]
   29450:	429c      	cmp	r4, r3
   29452:	bf28      	it	cs
   29454:	461c      	movcs	r4, r3
   29456:	4622      	mov	r2, r4
   29458:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2945c:	4640      	mov	r0, r8
   2945e:	f001 fafc 	bl	2aa5a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   29462:	2c0f      	cmp	r4, #15
   29464:	d806      	bhi.n	29474 <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   29466:	f1c4 0210 	rsb	r2, r4, #16
   2946a:	4649      	mov	r1, r9
   2946c:	eb08 0004 	add.w	r0, r8, r4
   29470:	f001 fb14 	bl	2aa9c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   29474:	2101      	movs	r1, #1
   29476:	4638      	mov	r0, r7
   29478:	f7ff fe5b 	bl	29132 <atomic_set_bit>
}
   2947c:	4630      	mov	r0, r6
   2947e:	b003      	add	sp, #12
   29480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   29484:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   29488:	b983      	cbnz	r3, 294ac <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2948a:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2948e:	7a21      	ldrb	r1, [r4, #8]
   29490:	4632      	mov	r2, r6
   29492:	2020      	movs	r0, #32
   29494:	f7e6 fd66 	bl	ff64 <bt_keys_find>
   29498:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2949c:	b930      	cbnz	r0, 294ac <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2949e:	7a21      	ldrb	r1, [r4, #8]
   294a0:	4632      	mov	r2, r6
   294a2:	2001      	movs	r0, #1
   294a4:	f7e6 fd5e 	bl	ff64 <bt_keys_find>
   294a8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   294ac:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   294b0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   294b4:	b9ee      	cbnz	r6, 294f2 <bt_smp_request_ltk+0xea>
   294b6:	e9dd 2300 	ldrd	r2, r3, [sp]
   294ba:	4313      	orrs	r3, r2
   294bc:	d119      	bne.n	294f2 <bt_smp_request_ltk+0xea>
   294be:	b388      	cbz	r0, 29524 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   294c0:	89c3      	ldrh	r3, [r0, #14]
   294c2:	069a      	lsls	r2, r3, #26
   294c4:	d516      	bpl.n	294f4 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   294c6:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   294c8:	f100 011a 	add.w	r1, r0, #26
   294cc:	4622      	mov	r2, r4
   294ce:	4640      	mov	r0, r8
   294d0:	f001 fac3 	bl	2aa5a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   294d4:	2c0f      	cmp	r4, #15
   294d6:	d806      	bhi.n	294e6 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   294d8:	f1c4 0210 	rsb	r2, r4, #16
   294dc:	4631      	mov	r1, r6
   294de:	eb08 0004 	add.w	r0, r8, r4
   294e2:	f001 fadb 	bl	2aa9c <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   294e6:	2101      	movs	r1, #1
   294e8:	4638      	mov	r0, r7
   294ea:	f7ff fe22 	bl	29132 <atomic_set_bit>
		return true;
   294ee:	2601      	movs	r6, #1
   294f0:	e7c4      	b.n	2947c <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   294f2:	b1b8      	cbz	r0, 29524 <bt_smp_request_ltk+0x11c>
   294f4:	89c3      	ldrh	r3, [r0, #14]
   294f6:	07db      	lsls	r3, r3, #31
   294f8:	d514      	bpl.n	29524 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   294fa:	2208      	movs	r2, #8
   294fc:	4669      	mov	r1, sp
   294fe:	3040      	adds	r0, #64	; 0x40
   29500:	f001 fa9b 	bl	2aa3a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   29504:	b970      	cbnz	r0, 29524 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   29506:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2950a:	2202      	movs	r2, #2
   2950c:	a90a      	add	r1, sp, #40	; 0x28
   2950e:	3048      	adds	r0, #72	; 0x48
   29510:	f001 fa93 	bl	2aa3a <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   29514:	4606      	mov	r6, r0
   29516:	b928      	cbnz	r0, 29524 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   29518:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2951c:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2951e:	314a      	adds	r1, #74	; 0x4a
   29520:	4622      	mov	r2, r4
   29522:	e7d4      	b.n	294ce <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   29524:	210f      	movs	r1, #15
   29526:	4638      	mov	r0, r7
   29528:	f7ff fd6d 	bl	29006 <atomic_test_bit>
   2952c:	b120      	cbz	r0, 29538 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2952e:	2202      	movs	r2, #2
   29530:	2106      	movs	r1, #6
   29532:	4620      	mov	r0, r4
   29534:	f7e1 fc7e 	bl	ae34 <bt_conn_security_changed>
	smp_reset(smp);
   29538:	4628      	mov	r0, r5
   2953a:	f7ff fe94 	bl	29266 <smp_reset>
	return false;
   2953e:	2600      	movs	r6, #0
   29540:	e79c      	b.n	2947c <bt_smp_request_ltk+0x74>
		return false;
   29542:	4606      	mov	r6, r0
   29544:	e79a      	b.n	2947c <bt_smp_request_ltk+0x74>

00029546 <bt_smp_sign>:
   29546:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2954a:	4770      	bx	lr

0002954c <bt_smp_start_security>:
{
   2954c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   29550:	78c6      	ldrb	r6, [r0, #3]
{
   29552:	4604      	mov	r4, r0
	switch (conn->role) {
   29554:	b126      	cbz	r6, 29560 <bt_smp_start_security+0x14>
   29556:	2e01      	cmp	r6, #1
   29558:	d03d      	beq.n	295d6 <bt_smp_start_security+0x8a>
		return -EINVAL;
   2955a:	f06f 0415 	mvn.w	r4, #21
   2955e:	e005      	b.n	2956c <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   29560:	f7e4 fd70 	bl	e044 <smp_chan_get>
		if (!smp) {
   29564:	4605      	mov	r5, r0
   29566:	b928      	cbnz	r0, 29574 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   29568:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   2956c:	4620      	mov	r0, r4
   2956e:	b003      	add	sp, #12
   29570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   29574:	1d06      	adds	r6, r0, #4
   29576:	2103      	movs	r1, #3
   29578:	4630      	mov	r0, r6
   2957a:	f7ff fd44 	bl	29006 <atomic_test_bit>
   2957e:	b110      	cbz	r0, 29586 <bt_smp_start_security+0x3a>
			return -EBUSY;
   29580:	f06f 040f 	mvn.w	r4, #15
   29584:	e7f2      	b.n	2956c <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   29586:	2101      	movs	r1, #1
   29588:	4630      	mov	r0, r6
   2958a:	f7ff fd3c 	bl	29006 <atomic_test_bit>
   2958e:	2800      	cmp	r0, #0
   29590:	d1f6      	bne.n	29580 <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   29592:	4620      	mov	r0, r4
   29594:	f7ff fd40 	bl	29018 <smp_keys_check>
   29598:	b928      	cbnz	r0, 295a6 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   2959a:	4620      	mov	r0, r4
}
   2959c:	b003      	add	sp, #12
   2959e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   295a2:	f7e5 b8b3 	b.w	e70c <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   295a6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   295aa:	7b0b      	ldrb	r3, [r1, #12]
   295ac:	9300      	str	r3, [sp, #0]
   295ae:	f101 0218 	add.w	r2, r1, #24
   295b2:	f101 031a 	add.w	r3, r1, #26
   295b6:	4620      	mov	r0, r4
   295b8:	3110      	adds	r1, #16
   295ba:	f7fe f8ca 	bl	27752 <bt_conn_le_start_encryption>
		if (err) {
   295be:	4604      	mov	r4, r0
   295c0:	2800      	cmp	r0, #0
   295c2:	d1d3      	bne.n	2956c <bt_smp_start_security+0x20>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   295c4:	210b      	movs	r1, #11
   295c6:	4628      	mov	r0, r5
   295c8:	f7ff fdb3 	bl	29132 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   295cc:	2101      	movs	r1, #1
   295ce:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   295d0:	f7ff fdaf 	bl	29132 <atomic_set_bit>
	return 0;
   295d4:	e7ca      	b.n	2956c <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   295d6:	f7e4 fd35 	bl	e044 <smp_chan_get>
	if (!smp) {
   295da:	4605      	mov	r5, r0
   295dc:	2800      	cmp	r0, #0
   295de:	d0c3      	beq.n	29568 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   295e0:	f100 0804 	add.w	r8, r0, #4
   295e4:	2104      	movs	r1, #4
   295e6:	4640      	mov	r0, r8
   295e8:	f7ff fd0d 	bl	29006 <atomic_test_bit>
   295ec:	2800      	cmp	r0, #0
   295ee:	d150      	bne.n	29692 <bt_smp_start_security+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   295f0:	2103      	movs	r1, #3
   295f2:	4640      	mov	r0, r8
   295f4:	f7ff fd07 	bl	29006 <atomic_test_bit>
   295f8:	2800      	cmp	r0, #0
   295fa:	d1c1      	bne.n	29580 <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   295fc:	4631      	mov	r1, r6
   295fe:	4640      	mov	r0, r8
   29600:	f7ff fd01 	bl	29006 <atomic_test_bit>
   29604:	2800      	cmp	r0, #0
   29606:	d1bb      	bne.n	29580 <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   29608:	7aa0      	ldrb	r0, [r4, #10]
   2960a:	f7e4 fded 	bl	e1e8 <sec_level_reachable.isra.0>
   2960e:	b168      	cbz	r0, 2962c <bt_smp_start_security+0xe0>
	if (!conn->le.keys) {
   29610:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   29614:	b983      	cbnz	r3, 29638 <bt_smp_start_security+0xec>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   29616:	7a20      	ldrb	r0, [r4, #8]
   29618:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2961c:	f7e6 fc64 	bl	fee8 <bt_keys_get_addr>
   29620:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   29624:	b940      	cbnz	r0, 29638 <bt_smp_start_security+0xec>
			return -ENOMEM;
   29626:	f06f 040b 	mvn.w	r4, #11
   2962a:	e79f      	b.n	2956c <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2962c:	4620      	mov	r0, r4
   2962e:	f7ff fcf3 	bl	29018 <smp_keys_check>
   29632:	2800      	cmp	r0, #0
   29634:	d1ec      	bne.n	29610 <bt_smp_start_security+0xc4>
   29636:	e790      	b.n	2955a <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   29638:	4628      	mov	r0, r5
   2963a:	f7e4 fe89 	bl	e350 <smp_init>
   2963e:	4607      	mov	r7, r0
   29640:	b110      	cbz	r0, 29648 <bt_smp_start_security+0xfc>
		return -ENOBUFS;
   29642:	f06f 0468 	mvn.w	r4, #104	; 0x68
   29646:	e791      	b.n	2956c <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   29648:	210b      	movs	r1, #11
   2964a:	4628      	mov	r0, r5
   2964c:	f7ff fd96 	bl	2917c <smp_create_pdu.constprop.0>
	if (!req_buf) {
   29650:	4606      	mov	r6, r0
   29652:	2800      	cmp	r0, #0
   29654:	d0f5      	beq.n	29642 <bt_smp_start_security+0xf6>
   29656:	2101      	movs	r1, #1
   29658:	3008      	adds	r0, #8
   2965a:	f000 f976 	bl	2994a <net_buf_simple_add>
   2965e:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   29660:	2009      	movs	r0, #9
   29662:	f7e4 fcab 	bl	dfbc <get_auth.constprop.0>
   29666:	463b      	mov	r3, r7
   29668:	f889 0000 	strb.w	r0, [r9]
   2966c:	4632      	mov	r2, r6
   2966e:	4620      	mov	r0, r4
   29670:	9700      	str	r7, [sp, #0]
   29672:	2106      	movs	r1, #6
   29674:	f7fe f9f5 	bl	27a62 <bt_l2cap_send_cb>
	if (err) {
   29678:	4604      	mov	r4, r0
   2967a:	b118      	cbz	r0, 29684 <bt_smp_start_security+0x138>
		net_buf_unref(req_buf);
   2967c:	4630      	mov	r0, r6
   2967e:	f7f6 fb73 	bl	1fd68 <net_buf_unref>
		return err;
   29682:	e773      	b.n	2956c <bt_smp_start_security+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   29684:	210f      	movs	r1, #15
   29686:	4640      	mov	r0, r8
   29688:	f7ff fd53 	bl	29132 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2968c:	2101      	movs	r1, #1
   2968e:	4628      	mov	r0, r5
   29690:	e79e      	b.n	295d0 <bt_smp_start_security+0x84>
		return -EIO;
   29692:	f06f 0404 	mvn.w	r4, #4
   29696:	e769      	b.n	2956c <bt_smp_start_security+0x20>

00029698 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   29698:	1d03      	adds	r3, r0, #4
{
   2969a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2969c:	4605      	mov	r5, r0
   2969e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   296a0:	4618      	mov	r0, r3
   296a2:	2103      	movs	r1, #3
   296a4:	f7ff fcaf 	bl	29006 <atomic_test_bit>
   296a8:	b1f0      	cbz	r0, 296e8 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   296aa:	4631      	mov	r1, r6
   296ac:	4628      	mov	r0, r5
   296ae:	f7e6 f859 	bl	f764 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   296b2:	2105      	movs	r1, #5
   296b4:	4628      	mov	r0, r5
   296b6:	f7ff fd61 	bl	2917c <smp_create_pdu.constprop.0>
	if (!buf) {
   296ba:	4604      	mov	r4, r0
   296bc:	b308      	cbz	r0, 29702 <smp_error+0x6a>
   296be:	2101      	movs	r1, #1
   296c0:	3008      	adds	r0, #8
   296c2:	f000 f942 	bl	2994a <net_buf_simple_add>
	rsp->reason = reason;
   296c6:	7006      	strb	r6, [r0, #0]
   296c8:	2600      	movs	r6, #0
   296ca:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   296ce:	9600      	str	r6, [sp, #0]
   296d0:	4633      	mov	r3, r6
   296d2:	4622      	mov	r2, r4
   296d4:	2106      	movs	r1, #6
   296d6:	f7fe f9c4 	bl	27a62 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   296da:	b118      	cbz	r0, 296e4 <smp_error+0x4c>
		net_buf_unref(buf);
   296dc:	4620      	mov	r0, r4
   296de:	f7f6 fb43 	bl	1fd68 <net_buf_unref>
	return 0;
   296e2:	4630      	mov	r0, r6
}
   296e4:	b002      	add	sp, #8
   296e6:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   296e8:	2101      	movs	r1, #1
   296ea:	4618      	mov	r0, r3
   296ec:	f7ff fc8b 	bl	29006 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   296f0:	2800      	cmp	r0, #0
   296f2:	d1da      	bne.n	296aa <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   296f4:	210f      	movs	r1, #15
   296f6:	4618      	mov	r0, r3
   296f8:	f7ff fc85 	bl	29006 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   296fc:	2800      	cmp	r0, #0
   296fe:	d1d4      	bne.n	296aa <smp_error+0x12>
   29700:	e7d7      	b.n	296b2 <smp_error+0x1a>
		return -ENOBUFS;
   29702:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29706:	e7ed      	b.n	296e4 <smp_error+0x4c>

00029708 <bt_smp_dhkey_ready>:
{
   29708:	b570      	push	{r4, r5, r6, lr}
   2970a:	4605      	mov	r5, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2970c:	2008      	movs	r0, #8
   2970e:	f7e4 fd9b 	bl	e248 <smp_find>
	if (smp) {
   29712:	4604      	mov	r4, r0
   29714:	b1e8      	cbz	r0, 29752 <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   29716:	1d06      	adds	r6, r0, #4
   29718:	2108      	movs	r1, #8
   2971a:	4630      	mov	r0, r6
   2971c:	f7ff fb80 	bl	28e20 <atomic_clear_bit>
	if (!dhkey) {
   29720:	2d00      	cmp	r5, #0
   29722:	d03d      	beq.n	297a0 <bt_smp_dhkey_ready+0x98>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   29724:	2107      	movs	r1, #7
   29726:	f7ff fb7b 	bl	28e20 <atomic_clear_bit>
   2972a:	4628      	mov	r0, r5
   2972c:	f104 0397 	add.w	r3, r4, #151	; 0x97
   29730:	f105 0220 	add.w	r2, r5, #32
   29734:	f850 1b04 	ldr.w	r1, [r0], #4
   29738:	f843 1b04 	str.w	r1, [r3], #4
   2973c:	4290      	cmp	r0, r2
   2973e:	d1f9      	bne.n	29734 <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   29740:	210a      	movs	r1, #10
   29742:	4630      	mov	r0, r6
   29744:	f7ff fc5f 	bl	29006 <atomic_test_bit>
   29748:	b168      	cbz	r0, 29766 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2974a:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2974c:	4630      	mov	r0, r6
   2974e:	f7ff fcf0 	bl	29132 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   29752:	2007      	movs	r0, #7
   29754:	f7e4 fd78 	bl	e248 <smp_find>
		if (smp) {
   29758:	4604      	mov	r4, r0
   2975a:	b118      	cbz	r0, 29764 <bt_smp_dhkey_ready+0x5c>
			err = smp_dhkey_generate(smp);
   2975c:	f7e4 fe14 	bl	e388 <smp_dhkey_generate>
			if (err) {
   29760:	4601      	mov	r1, r0
   29762:	b9b0      	cbnz	r0, 29792 <bt_smp_dhkey_ready+0x8a>
}
   29764:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29766:	2110      	movs	r1, #16
   29768:	4630      	mov	r0, r6
   2976a:	f7ff fc4c 	bl	29006 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2976e:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   29770:	2800      	cmp	r0, #0
   29772:	d1eb      	bne.n	2974c <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   29774:	4630      	mov	r0, r6
   29776:	f7ff fc46 	bl	29006 <atomic_test_bit>
   2977a:	2800      	cmp	r0, #0
   2977c:	d0e9      	beq.n	29752 <bt_smp_dhkey_ready+0x4a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2977e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   29782:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   29784:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   29786:	b943      	cbnz	r3, 2979a <bt_smp_dhkey_ready+0x92>
			return compute_and_send_central_dhcheck(smp);
   29788:	f7e5 fb74 	bl	ee74 <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2978c:	4601      	mov	r1, r0
		if (err) {
   2978e:	2800      	cmp	r0, #0
   29790:	d0df      	beq.n	29752 <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   29792:	4620      	mov	r0, r4
   29794:	f7ff ff80 	bl	29698 <smp_error>
   29798:	e7db      	b.n	29752 <bt_smp_dhkey_ready+0x4a>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2979a:	f7e5 fbe7 	bl	ef6c <compute_and_check_and_send_periph_dhcheck>
   2979e:	e7f5      	b.n	2978c <bt_smp_dhkey_ready+0x84>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   297a0:	210b      	movs	r1, #11
   297a2:	e7f6      	b.n	29792 <bt_smp_dhkey_ready+0x8a>

000297a4 <bt_smp_disconnected>:
{
   297a4:	b570      	push	{r4, r5, r6, lr}
   297a6:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   297a8:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   297ac:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   297b0:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   297b2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   297b6:	f000 fdfe 	bl	2a3b6 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   297ba:	2103      	movs	r1, #3
   297bc:	4620      	mov	r0, r4
   297be:	f7ff fc22 	bl	29006 <atomic_test_bit>
   297c2:	b1a0      	cbz	r0, 297ee <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   297c4:	2108      	movs	r1, #8
   297c6:	4630      	mov	r0, r6
   297c8:	f7e5 ffcc 	bl	f764 <smp_pairing_complete>
	if (keys) {
   297cc:	b13d      	cbz	r5, 297de <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   297ce:	89eb      	ldrh	r3, [r5, #14]
   297d0:	b113      	cbz	r3, 297d8 <bt_smp_disconnected+0x34>
   297d2:	7b6b      	ldrb	r3, [r5, #13]
   297d4:	079b      	lsls	r3, r3, #30
   297d6:	d502      	bpl.n	297de <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   297d8:	4628      	mov	r0, r5
   297da:	f000 f83f 	bl	2985c <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   297de:	4630      	mov	r0, r6
   297e0:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   297e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   297e8:	2100      	movs	r1, #0
   297ea:	f001 b957 	b.w	2aa9c <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   297ee:	2101      	movs	r1, #1
   297f0:	4620      	mov	r0, r4
   297f2:	f7ff fc08 	bl	29006 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   297f6:	2800      	cmp	r0, #0
   297f8:	d1e4      	bne.n	297c4 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   297fa:	210f      	movs	r1, #15
   297fc:	4620      	mov	r0, r4
   297fe:	f7ff fc02 	bl	29006 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   29802:	2800      	cmp	r0, #0
   29804:	d1de      	bne.n	297c4 <bt_smp_disconnected+0x20>
   29806:	e7e1      	b.n	297cc <bt_smp_disconnected+0x28>

00029808 <smp_ident_sent>:
{
   29808:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2980a:	7883      	ldrb	r3, [r0, #2]
   2980c:	2b01      	cmp	r3, #1
   2980e:	d110      	bne.n	29832 <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   29810:	2106      	movs	r1, #6
   29812:	f7fe f95d 	bl	27ad0 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   29816:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2981a:	f023 0301 	bic.w	r3, r3, #1
   2981e:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   29822:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   29826:	b921      	cbnz	r1, 29832 <smp_ident_sent+0x2a>
}
   29828:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2982c:	38f0      	subs	r0, #240	; 0xf0
   2982e:	f7e5 bf99 	b.w	f764 <smp_pairing_complete>
}
   29832:	bd08      	pop	{r3, pc}

00029834 <bt_keys_get_type>:
{
   29834:	b570      	push	{r4, r5, r6, lr}
   29836:	4604      	mov	r4, r0
   29838:	460d      	mov	r5, r1
   2983a:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2983c:	f7e6 fb92 	bl	ff64 <bt_keys_find>
	if (keys) {
   29840:	b938      	cbnz	r0, 29852 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   29842:	4631      	mov	r1, r6
   29844:	4628      	mov	r0, r5
   29846:	f7e6 fb4f 	bl	fee8 <bt_keys_get_addr>
	if (!keys) {
   2984a:	b110      	cbz	r0, 29852 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2984c:	89c3      	ldrh	r3, [r0, #14]
   2984e:	431c      	orrs	r4, r3
   29850:	81c4      	strh	r4, [r0, #14]
}
   29852:	bd70      	pop	{r4, r5, r6, pc}

00029854 <bt_keys_add_type>:
	keys->keys |= type;
   29854:	89c3      	ldrh	r3, [r0, #14]
   29856:	4319      	orrs	r1, r3
   29858:	81c1      	strh	r1, [r0, #14]
}
   2985a:	4770      	bx	lr

0002985c <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2985c:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2985e:	7a03      	ldrb	r3, [r0, #8]
   29860:	075b      	lsls	r3, r3, #29
{
   29862:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   29864:	d501      	bpl.n	2986a <bt_keys_clear+0xe>
		bt_id_del(keys);
   29866:	f7df fdb9 	bl	93dc <bt_id_del>
   2986a:	4620      	mov	r0, r4
   2986c:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2986e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29872:	2100      	movs	r1, #0
   29874:	f001 b912 	b.w	2aa9c <memset>

00029878 <fixed_data_unref>:
}
   29878:	4770      	bx	lr

0002987a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2987a:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2987c:	6849      	ldr	r1, [r1, #4]
   2987e:	6809      	ldr	r1, [r1, #0]
   29880:	f7f6 b9de 	b.w	1fc40 <net_buf_alloc_len>

00029884 <net_buf_get>:
{
   29884:	b570      	push	{r4, r5, r6, lr}
   29886:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   29888:	f7f8 fdba 	bl	22400 <z_impl_k_queue_get>
	if (!buf) {
   2988c:	4605      	mov	r5, r0
   2988e:	b128      	cbz	r0, 2989c <net_buf_get+0x18>
   29890:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   29892:	7963      	ldrb	r3, [r4, #5]
   29894:	f013 0301 	ands.w	r3, r3, #1
   29898:	d102      	bne.n	298a0 <net_buf_get+0x1c>
	frag->frags = NULL;
   2989a:	6023      	str	r3, [r4, #0]
}
   2989c:	4628      	mov	r0, r5
   2989e:	bd70      	pop	{r4, r5, r6, pc}
   298a0:	2300      	movs	r3, #0
   298a2:	2200      	movs	r2, #0
   298a4:	4630      	mov	r0, r6
   298a6:	f7f8 fdab 	bl	22400 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   298aa:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   298ac:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   298ae:	f023 0301 	bic.w	r3, r3, #1
   298b2:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   298b4:	4604      	mov	r4, r0
   298b6:	e7ec      	b.n	29892 <net_buf_get+0xe>

000298b8 <net_buf_simple_init_with_data>:
	buf->size  = size;
   298b8:	b292      	uxth	r2, r2
	buf->__buf = data;
   298ba:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   298bc:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   298be:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   298c0:	8082      	strh	r2, [r0, #4]
}
   298c2:	4770      	bx	lr

000298c4 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   298c4:	6883      	ldr	r3, [r0, #8]
   298c6:	440b      	add	r3, r1
   298c8:	6003      	str	r3, [r0, #0]
}
   298ca:	4770      	bx	lr

000298cc <net_buf_put>:
{
   298cc:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   298ce:	460a      	mov	r2, r1
   298d0:	6814      	ldr	r4, [r2, #0]
   298d2:	b914      	cbnz	r4, 298da <net_buf_put+0xe>
}
   298d4:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   298d6:	f000 bc80 	b.w	2a1da <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   298da:	7953      	ldrb	r3, [r2, #5]
   298dc:	f043 0301 	orr.w	r3, r3, #1
   298e0:	7153      	strb	r3, [r2, #5]
   298e2:	4622      	mov	r2, r4
   298e4:	e7f4      	b.n	298d0 <net_buf_put+0x4>

000298e6 <net_buf_ref>:
	buf->ref++;
   298e6:	7902      	ldrb	r2, [r0, #4]
   298e8:	3201      	adds	r2, #1
   298ea:	7102      	strb	r2, [r0, #4]
}
   298ec:	4770      	bx	lr

000298ee <net_buf_frag_last>:
{
   298ee:	4603      	mov	r3, r0
	while (buf->frags) {
   298f0:	4618      	mov	r0, r3
   298f2:	681b      	ldr	r3, [r3, #0]
   298f4:	2b00      	cmp	r3, #0
   298f6:	d1fb      	bne.n	298f0 <net_buf_frag_last+0x2>
}
   298f8:	4770      	bx	lr

000298fa <net_buf_frag_insert>:
	if (parent->frags) {
   298fa:	6802      	ldr	r2, [r0, #0]
{
   298fc:	b510      	push	{r4, lr}
	if (parent->frags) {
   298fe:	b12a      	cbz	r2, 2990c <net_buf_frag_insert+0x12>
   29900:	460b      	mov	r3, r1
	while (buf->frags) {
   29902:	461c      	mov	r4, r3
   29904:	681b      	ldr	r3, [r3, #0]
   29906:	2b00      	cmp	r3, #0
   29908:	d1fb      	bne.n	29902 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2990a:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   2990c:	6001      	str	r1, [r0, #0]
}
   2990e:	bd10      	pop	{r4, pc}

00029910 <net_buf_frag_add>:
{
   29910:	b510      	push	{r4, lr}
	if (!head) {
   29912:	4604      	mov	r4, r0
   29914:	b920      	cbnz	r0, 29920 <net_buf_frag_add+0x10>
	buf->ref++;
   29916:	790b      	ldrb	r3, [r1, #4]
   29918:	3301      	adds	r3, #1
   2991a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2991c:	4608      	mov	r0, r1
}
   2991e:	bd10      	pop	{r4, pc}
   29920:	4603      	mov	r3, r0
	while (buf->frags) {
   29922:	4618      	mov	r0, r3
   29924:	681b      	ldr	r3, [r3, #0]
   29926:	2b00      	cmp	r3, #0
   29928:	d1fb      	bne.n	29922 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2992a:	f7ff ffe6 	bl	298fa <net_buf_frag_insert>
   2992e:	4620      	mov	r0, r4
   29930:	e7f5      	b.n	2991e <net_buf_frag_add+0xe>

00029932 <net_buf_frag_del>:
{
   29932:	b510      	push	{r4, lr}
	if (parent) {
   29934:	b108      	cbz	r0, 2993a <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   29936:	680b      	ldr	r3, [r1, #0]
   29938:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   2993a:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   2993c:	2300      	movs	r3, #0
	net_buf_unref(frag);
   2993e:	4608      	mov	r0, r1
	frag->frags = NULL;
   29940:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   29942:	f7f6 fa11 	bl	1fd68 <net_buf_unref>
}
   29946:	4620      	mov	r0, r4
   29948:	bd10      	pop	{r4, pc}

0002994a <net_buf_simple_add>:
	return buf->data + buf->len;
   2994a:	8883      	ldrh	r3, [r0, #4]
   2994c:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2994e:	4419      	add	r1, r3
   29950:	8081      	strh	r1, [r0, #4]
	return tail;
}
   29952:	18d0      	adds	r0, r2, r3
   29954:	4770      	bx	lr

00029956 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   29956:	b430      	push	{r4, r5}
   29958:	8884      	ldrh	r4, [r0, #4]
   2995a:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2995c:	18a3      	adds	r3, r4, r2
   2995e:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29960:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   29962:	bc30      	pop	{r4, r5}
   29964:	f001 b879 	b.w	2aa5a <memcpy>

00029968 <net_buf_simple_add_u8>:
   29968:	8883      	ldrh	r3, [r0, #4]
   2996a:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2996c:	b510      	push	{r4, lr}
	buf->len += len;
   2996e:	1c5c      	adds	r4, r3, #1
   29970:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   29972:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   29974:	18d0      	adds	r0, r2, r3
   29976:	bd10      	pop	{r4, pc}

00029978 <net_buf_simple_add_le16>:
   29978:	8883      	ldrh	r3, [r0, #4]
   2997a:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2997c:	b530      	push	{r4, r5, lr}
   2997e:	18d4      	adds	r4, r2, r3
	buf->len += len;
   29980:	1c9d      	adds	r5, r3, #2
   29982:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   29984:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   29986:	0a09      	lsrs	r1, r1, #8
   29988:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2998a:	bd30      	pop	{r4, r5, pc}

0002998c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2998c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2998e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   29990:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   29992:	1a40      	subs	r0, r0, r1
	buf->len += len;
   29994:	4411      	add	r1, r2
	buf->data -= len;
   29996:	6018      	str	r0, [r3, #0]
	buf->len += len;
   29998:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2999a:	4770      	bx	lr

0002999c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2999c:	8882      	ldrh	r2, [r0, #4]
   2999e:	1a52      	subs	r2, r2, r1
{
   299a0:	4603      	mov	r3, r0
	buf->len -= len;
   299a2:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   299a4:	6800      	ldr	r0, [r0, #0]
   299a6:	4408      	add	r0, r1
   299a8:	6018      	str	r0, [r3, #0]
}
   299aa:	4770      	bx	lr

000299ac <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   299ac:	4603      	mov	r3, r0
	void *data = buf->data;
   299ae:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   299b0:	889a      	ldrh	r2, [r3, #4]
   299b2:	1a52      	subs	r2, r2, r1
	buf->data += len;
   299b4:	4401      	add	r1, r0
	buf->len -= len;
   299b6:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   299b8:	6019      	str	r1, [r3, #0]

	return data;
}
   299ba:	4770      	bx	lr

000299bc <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   299bc:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   299be:	6803      	ldr	r3, [r0, #0]
   299c0:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   299c2:	2101      	movs	r1, #1
   299c4:	f7ff ffea 	bl	2999c <net_buf_simple_pull>

	return val;
}
   299c8:	4620      	mov	r0, r4
   299ca:	bd10      	pop	{r4, pc}

000299cc <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   299cc:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   299ce:	6803      	ldr	r3, [r0, #0]
   299d0:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   299d2:	2102      	movs	r1, #2
   299d4:	f7ff ffe2 	bl	2999c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   299d8:	4620      	mov	r0, r4
   299da:	bd10      	pop	{r4, pc}

000299dc <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   299dc:	6802      	ldr	r2, [r0, #0]
   299de:	6880      	ldr	r0, [r0, #8]
}
   299e0:	1a10      	subs	r0, r2, r0
   299e2:	4770      	bx	lr

000299e4 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   299e4:	8883      	ldrh	r3, [r0, #4]
   299e6:	88c2      	ldrh	r2, [r0, #6]
   299e8:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   299ea:	6803      	ldr	r3, [r0, #0]
   299ec:	6880      	ldr	r0, [r0, #8]
   299ee:	1a18      	subs	r0, r3, r0
}
   299f0:	1a10      	subs	r0, r2, r0
   299f2:	4770      	bx	lr

000299f4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   299f4:	6903      	ldr	r3, [r0, #16]
   299f6:	b2c9      	uxtb	r1, r1
   299f8:	220c      	movs	r2, #12
   299fa:	fb01 3302 	mla	r3, r1, r2, r3
   299fe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   29a00:	f000 0007 	and.w	r0, r0, #7
   29a04:	4770      	bx	lr

00029a06 <set_on_state>:
	__asm__ volatile(
   29a06:	f04f 0320 	mov.w	r3, #32
   29a0a:	f3ef 8211 	mrs	r2, BASEPRI
   29a0e:	f383 8812 	msr	BASEPRI_MAX, r3
   29a12:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   29a16:	6803      	ldr	r3, [r0, #0]
   29a18:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   29a1c:	f043 0302 	orr.w	r3, r3, #2
   29a20:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   29a22:	f382 8811 	msr	BASEPRI, r2
   29a26:	f3bf 8f6f 	isb	sy
}
   29a2a:	4770      	bx	lr

00029a2c <stop>:
{
   29a2c:	4603      	mov	r3, r0
   29a2e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   29a30:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   29a32:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29a34:	f04f 0420 	mov.w	r4, #32
   29a38:	f3ef 8611 	mrs	r6, BASEPRI
   29a3c:	f384 8812 	msr	BASEPRI_MAX, r4
   29a40:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29a44:	250c      	movs	r5, #12
   29a46:	fb05 0401 	mla	r4, r5, r1, r0
   29a4a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   29a4c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   29a50:	d001      	beq.n	29a56 <stop+0x2a>
   29a52:	42a2      	cmp	r2, r4
   29a54:	d111      	bne.n	29a7a <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   29a56:	fb05 0001 	mla	r0, r5, r1, r0
   29a5a:	2201      	movs	r2, #1
   29a5c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   29a5e:	2000      	movs	r0, #0
	__asm__ volatile(
   29a60:	f386 8811 	msr	BASEPRI, r6
   29a64:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   29a68:	b930      	cbnz	r0, 29a78 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   29a6a:	685b      	ldr	r3, [r3, #4]
   29a6c:	220c      	movs	r2, #12
   29a6e:	fb02 3101 	mla	r1, r2, r1, r3
   29a72:	684b      	ldr	r3, [r1, #4]
   29a74:	4798      	blx	r3
	return 0;
   29a76:	2000      	movs	r0, #0
}
   29a78:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   29a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29a7e:	e7ef      	b.n	29a60 <stop+0x34>

00029a80 <api_stop>:
	return stop(dev, subsys, CTX_API);
   29a80:	2280      	movs	r2, #128	; 0x80
   29a82:	f7ff bfd3 	b.w	29a2c <stop>

00029a86 <async_start>:
{
   29a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a88:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   29a8a:	6904      	ldr	r4, [r0, #16]
{
   29a8c:	4605      	mov	r5, r0
   29a8e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   29a90:	f04f 0020 	mov.w	r0, #32
   29a94:	f3ef 8c11 	mrs	ip, BASEPRI
   29a98:	f380 8812 	msr	BASEPRI_MAX, r0
   29a9c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   29aa0:	260c      	movs	r6, #12
   29aa2:	fb06 4601 	mla	r6, r6, r1, r4
   29aa6:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   29aa8:	f000 0e07 	and.w	lr, r0, #7
   29aac:	f1be 0f01 	cmp.w	lr, #1
   29ab0:	d110      	bne.n	29ad4 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   29ab2:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   29ab4:	2600      	movs	r6, #0
	__asm__ volatile(
   29ab6:	f38c 8811 	msr	BASEPRI, ip
   29aba:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   29abe:	b93e      	cbnz	r6, 29ad0 <async_start+0x4a>
	subdata->cb = cb;
   29ac0:	200c      	movs	r0, #12
   29ac2:	4341      	muls	r1, r0
   29ac4:	440c      	add	r4, r1
	subdata->user_data = user_data;
   29ac6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   29aca:	686b      	ldr	r3, [r5, #4]
   29acc:	585b      	ldr	r3, [r3, r1]
   29ace:	4798      	blx	r3
}
   29ad0:	4630      	mov	r0, r6
   29ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   29ad4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   29ad8:	4287      	cmp	r7, r0
   29ada:	bf14      	ite	ne
   29adc:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   29ae0:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   29ae4:	e7e7      	b.n	29ab6 <async_start+0x30>

00029ae6 <api_start>:
{
   29ae6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   29ae8:	2480      	movs	r4, #128	; 0x80
   29aea:	9400      	str	r4, [sp, #0]
   29aec:	f7ff ffcb 	bl	29a86 <async_start>
}
   29af0:	b002      	add	sp, #8
   29af2:	bd10      	pop	{r4, pc}

00029af4 <onoff_started_callback>:
	return &data->mgr[type];
   29af4:	6900      	ldr	r0, [r0, #16]
{
   29af6:	b410      	push	{r4}
	return &data->mgr[type];
   29af8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   29afa:	241c      	movs	r4, #28
   29afc:	fb03 0004 	mla	r0, r3, r4, r0
   29b00:	2100      	movs	r1, #0
}
   29b02:	bc10      	pop	{r4}
	notify(mgr, 0);
   29b04:	4710      	bx	r2

00029b06 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   29b06:	2000      	movs	r0, #0
   29b08:	f000 b909 	b.w	29d1e <nrfx_clock_start>

00029b0c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   29b0c:	2000      	movs	r0, #0
   29b0e:	f7f7 bbc1 	b.w	21294 <nrfx_clock_stop>

00029b12 <blocking_start_callback>:
{
   29b12:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   29b14:	f7f8 bca8 	b.w	22468 <z_impl_k_sem_give>

00029b18 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29b18:	6843      	ldr	r3, [r0, #4]
   29b1a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   29b1c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   29b20:	600b      	str	r3, [r1, #0]
}
   29b22:	2000      	movs	r0, #0
   29b24:	4770      	bx	lr

00029b26 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29b26:	6843      	ldr	r3, [r0, #4]
   29b28:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   29b2a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   29b2e:	4042      	eors	r2, r0
   29b30:	400a      	ands	r2, r1
   29b32:	4042      	eors	r2, r0
    p_reg->OUT = value;
   29b34:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   29b38:	2000      	movs	r0, #0
   29b3a:	4770      	bx	lr

00029b3c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29b3c:	6843      	ldr	r3, [r0, #4]
   29b3e:	685b      	ldr	r3, [r3, #4]
}
   29b40:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   29b42:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   29b46:	4770      	bx	lr

00029b48 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29b48:	6843      	ldr	r3, [r0, #4]
   29b4a:	685b      	ldr	r3, [r3, #4]
}
   29b4c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   29b4e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   29b52:	4770      	bx	lr

00029b54 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   29b54:	6843      	ldr	r3, [r0, #4]
   29b56:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   29b58:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   29b5c:	404b      	eors	r3, r1
    p_reg->OUT = value;
   29b5e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   29b62:	2000      	movs	r0, #0
   29b64:	4770      	bx	lr

00029b66 <gpio_nrfx_manage_callback>:
	return port->data;
   29b66:	6903      	ldr	r3, [r0, #16]
	return list->head;
   29b68:	6858      	ldr	r0, [r3, #4]
{
   29b6a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   29b6c:	b158      	cbz	r0, 29b86 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29b6e:	2400      	movs	r4, #0
   29b70:	4281      	cmp	r1, r0
   29b72:	d112      	bne.n	29b9a <gpio_nrfx_manage_callback+0x34>
	return node->next;
   29b74:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   29b76:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   29b78:	b954      	cbnz	r4, 29b90 <gpio_nrfx_manage_callback+0x2a>
   29b7a:	428d      	cmp	r5, r1
	list->head = node;
   29b7c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   29b7e:	d100      	bne.n	29b82 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   29b80:	6098      	str	r0, [r3, #8]
	parent->next = child;
   29b82:	2000      	movs	r0, #0
   29b84:	6008      	str	r0, [r1, #0]
	if (set) {
   29b86:	b96a      	cbnz	r2, 29ba4 <gpio_nrfx_manage_callback+0x3e>
	return 0;
   29b88:	2000      	movs	r0, #0
}
   29b8a:	bd30      	pop	{r4, r5, pc}
   29b8c:	4628      	mov	r0, r5
   29b8e:	e7ef      	b.n	29b70 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   29b90:	428d      	cmp	r5, r1
	parent->next = child;
   29b92:	6020      	str	r0, [r4, #0]
	list->tail = node;
   29b94:	bf08      	it	eq
   29b96:	609c      	streq	r4, [r3, #8]
}
   29b98:	e7f3      	b.n	29b82 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   29b9a:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29b9c:	4604      	mov	r4, r0
   29b9e:	2d00      	cmp	r5, #0
   29ba0:	d1f4      	bne.n	29b8c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   29ba2:	b13a      	cbz	r2, 29bb4 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   29ba4:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   29ba6:	685a      	ldr	r2, [r3, #4]
   29ba8:	600a      	str	r2, [r1, #0]
	list->head = node;
   29baa:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29bac:	2800      	cmp	r0, #0
   29bae:	d1eb      	bne.n	29b88 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   29bb0:	6099      	str	r1, [r3, #8]
}
   29bb2:	e7ea      	b.n	29b8a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   29bb4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   29bb8:	e7e7      	b.n	29b8a <gpio_nrfx_manage_callback+0x24>

00029bba <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   29bba:	6902      	ldr	r2, [r0, #16]
{
   29bbc:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   29bbe:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   29bc2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   29bc6:	2000      	movs	r0, #0
   29bc8:	4770      	bx	lr

00029bca <uarte_nrfx_err_check>:
	return config->uarte_regs;
   29bca:	6843      	ldr	r3, [r0, #4]
   29bcc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   29bce:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   29bd2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   29bd6:	4770      	bx	lr

00029bd8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   29bd8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   29bda:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   29bdc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29bde:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   29be2:	b148      	cbz	r0, 29bf8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   29be4:	7c52      	ldrb	r2, [r2, #17]
   29be6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29be8:	2000      	movs	r0, #0
   29bea:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   29bee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29bf2:	2201      	movs	r2, #1
   29bf4:	601a      	str	r2, [r3, #0]
	return 0;
   29bf6:	4770      	bx	lr
		return -1;
   29bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   29bfc:	4770      	bx	lr

00029bfe <nrf_gpio_cfg_input>:
{
   29bfe:	b507      	push	{r0, r1, r2, lr}
   29c00:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29c02:	a801      	add	r0, sp, #4
   29c04:	f7f6 fc64 	bl	204d0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   29c08:	9b01      	ldr	r3, [sp, #4]
   29c0a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   29c0e:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
   29c10:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
}
   29c14:	b003      	add	sp, #12
   29c16:	f85d fb04 	ldr.w	pc, [sp], #4

00029c1a <is_tx_ready.isra.0>:
	return config->uarte_regs;
   29c1a:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   29c1c:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29c1e:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   29c22:	b940      	cbnz	r0, 29c36 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   29c24:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   29c26:	079b      	lsls	r3, r3, #30
   29c28:	d406      	bmi.n	29c38 <is_tx_ready.isra.0+0x1e>
   29c2a:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   29c2e:	3800      	subs	r0, #0
   29c30:	bf18      	it	ne
   29c32:	2001      	movne	r0, #1
   29c34:	4770      	bx	lr
   29c36:	2001      	movs	r0, #1
}
   29c38:	4770      	bx	lr

00029c3a <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   29c3a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   29c3c:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   29c3e:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   29c42:	05c9      	lsls	r1, r1, #23
   29c44:	d518      	bpl.n	29c78 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29c46:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   29c4a:	b1a9      	cbz	r1, 29c78 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   29c4c:	f04f 0020 	mov.w	r0, #32
   29c50:	f3ef 8111 	mrs	r1, BASEPRI
   29c54:	f380 8812 	msr	BASEPRI_MAX, r0
   29c58:	f3bf 8f6f 	isb	sy
   29c5c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   29c60:	b130      	cbz	r0, 29c70 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29c62:	2000      	movs	r0, #0
   29c64:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   29c68:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29c6c:	2001      	movs	r0, #1
   29c6e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   29c70:	f381 8811 	msr	BASEPRI, r1
   29c74:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   29c78:	6852      	ldr	r2, [r2, #4]
   29c7a:	06d2      	lsls	r2, r2, #27
   29c7c:	d515      	bpl.n	29caa <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   29c7e:	f04f 0120 	mov.w	r1, #32
   29c82:	f3ef 8211 	mrs	r2, BASEPRI
   29c86:	f381 8812 	msr	BASEPRI_MAX, r1
   29c8a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   29c8e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   29c92:	b111      	cbz	r1, 29c9a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   29c94:	2100      	movs	r1, #0
   29c96:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   29c9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   29c9e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   29ca2:	f382 8811 	msr	BASEPRI, r2
   29ca6:	f3bf 8f6f 	isb	sy
}
   29caa:	4770      	bx	lr

00029cac <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   29cac:	b510      	push	{r4, lr}
   29cae:	2200      	movs	r2, #0
   29cb0:	4604      	mov	r4, r0
   29cb2:	2101      	movs	r1, #1
   29cb4:	2028      	movs	r0, #40	; 0x28
   29cb6:	f7dc ff1b 	bl	6af0 <z_arm_irq_priority_set>
   29cba:	2028      	movs	r0, #40	; 0x28
   29cbc:	f7dc fee6 	bl	6a8c <arch_irq_enable>
   29cc0:	4620      	mov	r0, r4
   29cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29cc6:	f7f6 bd25 	b.w	20714 <uarte_instance_init.constprop.0>

00029cca <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   29cca:	b510      	push	{r4, lr}
   29ccc:	2200      	movs	r2, #0
   29cce:	4604      	mov	r4, r0
   29cd0:	2101      	movs	r1, #1
   29cd2:	2002      	movs	r0, #2
   29cd4:	f7dc ff0c 	bl	6af0 <z_arm_irq_priority_set>
   29cd8:	2002      	movs	r0, #2
   29cda:	f7dc fed7 	bl	6a8c <arch_irq_enable>
   29cde:	4620      	mov	r0, r4
   29ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   29ce4:	f7f6 bd16 	b.w	20714 <uarte_instance_init.constprop.0>

00029ce8 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   29ce8:	4770      	bx	lr

00029cea <sys_clock_cycle_get_32>:
{
   29cea:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   29cec:	f7f6 ffbe 	bl	20c6c <z_nrf_rtc_timer_read>
}
   29cf0:	bd08      	pop	{r3, pc}

00029cf2 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   29cf2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   29cf6:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   29cfa:	f1a0 0308 	sub.w	r3, r0, #8
   29cfe:	4258      	negs	r0, r3
   29d00:	4158      	adcs	r0, r3
   29d02:	4770      	bx	lr

00029d04 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   29d04:	4700      	bx	r0

00029d06 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   29d06:	f000 bced 	b.w	2a6e4 <z_impl_k_busy_wait>

00029d0a <nrfx_clock_enable>:
{
   29d0a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   29d0c:	2000      	movs	r0, #0
   29d0e:	f7dc fee1 	bl	6ad4 <arch_irq_is_enabled>
   29d12:	b918      	cbnz	r0, 29d1c <nrfx_clock_enable+0x12>
}
   29d14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   29d18:	f7dc beb8 	b.w	6a8c <arch_irq_enable>
   29d1c:	bd08      	pop	{r3, pc}

00029d1e <nrfx_clock_start>:
    switch (domain)
   29d1e:	b110      	cbz	r0, 29d26 <nrfx_clock_start+0x8>
   29d20:	2801      	cmp	r0, #1
   29d22:	d01d      	beq.n	29d60 <nrfx_clock_start+0x42>
   29d24:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   29d26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29d2a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   29d2e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   29d32:	03c9      	lsls	r1, r1, #15
   29d34:	d512      	bpl.n	29d5c <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   29d36:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   29d3a:	2a01      	cmp	r2, #1
   29d3c:	d10e      	bne.n	29d5c <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   29d3e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29d42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29d46:	2200      	movs	r2, #0
   29d48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   29d4c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   29d50:	2202      	movs	r2, #2
   29d52:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29d56:	2201      	movs	r2, #1
   29d58:	609a      	str	r2, [r3, #8]
}
   29d5a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   29d5c:	2200      	movs	r2, #0
   29d5e:	e7ee      	b.n	29d3e <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   29d60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29d64:	2200      	movs	r2, #0
   29d66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   29d6a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   29d6e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   29d72:	6018      	str	r0, [r3, #0]
}
   29d74:	4770      	bx	lr

00029d76 <nrf_gpio_reconfigure>:
{
   29d76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29d78:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29d7a:	a801      	add	r0, sp, #4
{
   29d7c:	e9dd 4608 	ldrd	r4, r6, [sp, #32]
   29d80:	4617      	mov	r7, r2
   29d82:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   29d84:	f7f7 faf6 	bl	21374 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29d88:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29d8a:	2f00      	cmp	r7, #0
   29d8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   29d90:	bf14      	ite	ne
   29d92:	2302      	movne	r3, #2
   29d94:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29d96:	2900      	cmp	r1, #0
   29d98:	bf18      	it	ne
   29d9a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29d9e:	2d00      	cmp	r5, #0
   29da0:	bf14      	ite	ne
   29da2:	f04f 0c0c 	movne.w	ip, #12
   29da6:	f04f 0c00 	moveq.w	ip, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29daa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   29dac:	ea43 030c 	orr.w	r3, r3, ip
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   29db0:	bf14      	ite	ne
   29db2:	f44f 6ce0 	movne.w	ip, #1792	; 0x700
   29db6:	f04f 0c00 	moveq.w	ip, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29dba:	2e00      	cmp	r6, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   29dbc:	ea43 030c 	orr.w	r3, r3, ip
    uint32_t cnf = reg->PIN_CNF[pin_number];
   29dc0:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   29dc4:	bf14      	ite	ne
   29dc6:	f44f 3c40 	movne.w	ip, #196608	; 0x30000
   29dca:	f04f 0c00 	moveq.w	ip, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   29dce:	ea43 030c 	orr.w	r3, r3, ip
    cnf &= ~to_update;
   29dd2:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29dd6:	b101      	cbz	r1, 29dda <nrf_gpio_reconfigure+0x64>
   29dd8:	7809      	ldrb	r1, [r1, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   29dda:	b10f      	cbz	r7, 29de0 <nrf_gpio_reconfigure+0x6a>
   29ddc:	783f      	ldrb	r7, [r7, #0]
   29dde:	007f      	lsls	r7, r7, #1
   29de0:	4319      	orrs	r1, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   29de2:	b10d      	cbz	r5, 29de8 <nrf_gpio_reconfigure+0x72>
   29de4:	782d      	ldrb	r5, [r5, #0]
   29de6:	00ad      	lsls	r5, r5, #2
   29de8:	4339      	orrs	r1, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   29dea:	b10c      	cbz	r4, 29df0 <nrf_gpio_reconfigure+0x7a>
   29dec:	7822      	ldrb	r2, [r4, #0]
   29dee:	0214      	lsls	r4, r2, #8
   29df0:	430d      	orrs	r5, r1
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   29df2:	b10e      	cbz	r6, 29df8 <nrf_gpio_reconfigure+0x82>
   29df4:	7836      	ldrb	r6, [r6, #0]
   29df6:	0436      	lsls	r6, r6, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   29df8:	432c      	orrs	r4, r5
   29dfa:	4334      	orrs	r4, r6
    reg->PIN_CNF[pin_number] = cnf;
   29dfc:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   29e00:	b003      	add	sp, #12
   29e02:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029e04 <nrf_gpio_cfg_sense_set>:
{
   29e04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29e06:	f10d 030f 	add.w	r3, sp, #15
   29e0a:	9301      	str	r3, [sp, #4]
   29e0c:	2300      	movs	r3, #0
{
   29e0e:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   29e12:	9300      	str	r3, [sp, #0]
   29e14:	461a      	mov	r2, r3
   29e16:	4619      	mov	r1, r3
   29e18:	f7ff ffad 	bl	29d76 <nrf_gpio_reconfigure>
}
   29e1c:	b005      	add	sp, #20
   29e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00029e22 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   29e22:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   29e24:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   29e26:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   29e28:	bf9c      	itt	ls
   29e2a:	6880      	ldrls	r0, [r0, #8]
   29e2c:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   29e2e:	3b01      	subs	r3, #1
   29e30:	1a98      	subs	r0, r3, r2
}
   29e32:	4770      	bx	lr

00029e34 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e38:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   29e3a:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e3e:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   29e42:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   29e46:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   29e48:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   29e4c:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e4e:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   29e50:	d904      	bls.n	29e5c <_WriteNoCheck+0x28>
   29e52:	f000 fe02 	bl	2aa5a <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   29e56:	60e5      	str	r5, [r4, #12]
}
   29e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29e5c:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   29e5e:	eba5 0508 	sub.w	r5, r5, r8
   29e62:	f000 fdfa 	bl	2aa5a <memcpy>
   29e66:	6860      	ldr	r0, [r4, #4]
   29e68:	462a      	mov	r2, r5
   29e6a:	19b9      	adds	r1, r7, r6
   29e6c:	e7f1      	b.n	29e52 <_WriteNoCheck+0x1e>

00029e6e <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   29e6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   29e72:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   29e74:	4606      	mov	r6, r0
   29e76:	4689      	mov	r9, r1
   29e78:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   29e7a:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   29e7e:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29e80:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   29e82:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   29e84:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   29e86:	bf28      	it	cs
   29e88:	18e4      	addcs	r4, r4, r3
   29e8a:	3c01      	subs	r4, #1
   29e8c:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   29e8e:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   29e90:	42bc      	cmp	r4, r7
   29e92:	bf28      	it	cs
   29e94:	463c      	movcs	r4, r7
   29e96:	4294      	cmp	r4, r2
   29e98:	bf28      	it	cs
   29e9a:	4614      	movcs	r4, r2
   29e9c:	4649      	mov	r1, r9
   29e9e:	4428      	add	r0, r5
   29ea0:	4622      	mov	r2, r4
   29ea2:	f000 fdda 	bl	2aa5a <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   29ea6:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   29ea8:	4425      	add	r5, r4
      WrOff = 0u;
   29eaa:	42ab      	cmp	r3, r5
   29eac:	bf08      	it	eq
   29eae:	2500      	moveq	r5, #0
  } while (NumBytes);
   29eb0:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   29eb2:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   29eb4:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   29eb6:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   29eb8:	d1e1      	bne.n	29e7e <_WriteBlocking+0x10>
}
   29eba:	4640      	mov	r0, r8
   29ebc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00029ec0 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   29ec0:	f7f7 bdbe 	b.w	21a40 <_DoInit>

00029ec4 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   29ec4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   29ec6:	f7ff fffb 	bl	29ec0 <SEGGER_RTT_Init>

	return 0;
}
   29eca:	2000      	movs	r0, #0
   29ecc:	bd08      	pop	{r3, pc}

00029ece <z_device_state_init>:
}
   29ece:	4770      	bx	lr

00029ed0 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   29ed0:	b138      	cbz	r0, 29ee2 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   29ed2:	68c3      	ldr	r3, [r0, #12]
   29ed4:	8818      	ldrh	r0, [r3, #0]
   29ed6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   29eda:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   29ede:	4258      	negs	r0, r3
   29ee0:	4158      	adcs	r0, r3
}
   29ee2:	4770      	bx	lr

00029ee4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   29ee4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   29ee6:	ab0a      	add	r3, sp, #40	; 0x28
   29ee8:	9305      	str	r3, [sp, #20]
   29eea:	9302      	str	r3, [sp, #8]
   29eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   29eee:	9301      	str	r3, [sp, #4]
   29ef0:	2300      	movs	r3, #0
   29ef2:	9300      	str	r3, [sp, #0]
   29ef4:	2201      	movs	r2, #1
   29ef6:	4618      	mov	r0, r3
   29ef8:	f7dc f9f4 	bl	62e4 <z_impl_z_log_msg2_runtime_vcreate>
}
   29efc:	b007      	add	sp, #28
   29efe:	f85d fb04 	ldr.w	pc, [sp], #4

00029f02 <arch_system_halt>:
	__asm__ volatile(
   29f02:	f04f 0220 	mov.w	r2, #32
   29f06:	f3ef 8311 	mrs	r3, BASEPRI
   29f0a:	f382 8812 	msr	BASEPRI_MAX, r2
   29f0e:	f3bf 8f6f 	isb	sy
	for (;;) {
   29f12:	e7fe      	b.n	29f12 <arch_system_halt+0x10>

00029f14 <k_heap_init>:
{
   29f14:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   29f16:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   29f1a:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   29f1e:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   29f20:	f7fb ba72 	b.w	25408 <sys_heap_init>

00029f24 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   29f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f28:	b085      	sub	sp, #20
   29f2a:	4606      	mov	r6, r0
   29f2c:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29f2e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   29f32:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29f34:	f000 fbda 	bl	2a6ec <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   29f38:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   29f3c:	4605      	mov	r5, r0
   29f3e:	460f      	mov	r7, r1
   29f40:	f04f 0320 	mov.w	r3, #32
   29f44:	f3ef 8411 	mrs	r4, BASEPRI
   29f48:	f383 8812 	msr	BASEPRI_MAX, r3
   29f4c:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29f50:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   29f54:	464a      	mov	r2, r9
   29f56:	4641      	mov	r1, r8
   29f58:	4630      	mov	r0, r6
   29f5a:	f7fb f9ed 	bl	25338 <sys_heap_aligned_alloc>
   29f5e:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   29f60:	f7f9 f934 	bl	231cc <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   29f64:	9b03      	ldr	r3, [sp, #12]
   29f66:	b13b      	cbz	r3, 29f78 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   29f68:	f384 8811 	msr	BASEPRI, r4
   29f6c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   29f70:	4618      	mov	r0, r3
   29f72:	b005      	add	sp, #20
   29f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   29f78:	1a28      	subs	r0, r5, r0
   29f7a:	eb67 0101 	sbc.w	r1, r7, r1
   29f7e:	2801      	cmp	r0, #1
   29f80:	f171 0200 	sbcs.w	r2, r1, #0
   29f84:	dbf0      	blt.n	29f68 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   29f86:	e9cd 0100 	strd	r0, r1, [sp]
   29f8a:	465a      	mov	r2, fp
   29f8c:	4621      	mov	r1, r4
   29f8e:	4650      	mov	r0, sl
   29f90:	f7f8 fe10 	bl	22bb4 <z_pend_curr>
	__asm__ volatile(
   29f94:	f04f 0320 	mov.w	r3, #32
   29f98:	f3ef 8411 	mrs	r4, BASEPRI
   29f9c:	f383 8812 	msr	BASEPRI_MAX, r3
   29fa0:	f3bf 8f6f 	isb	sy
   29fa4:	e7d6      	b.n	29f54 <k_heap_aligned_alloc+0x30>

00029fa6 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   29fa6:	b538      	push	{r3, r4, r5, lr}
   29fa8:	4604      	mov	r4, r0
   29faa:	f04f 0320 	mov.w	r3, #32
   29fae:	f3ef 8511 	mrs	r5, BASEPRI
   29fb2:	f383 8812 	msr	BASEPRI_MAX, r3
   29fb6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   29fba:	f7fb f985 	bl	252c8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   29fbe:	f104 000c 	add.w	r0, r4, #12
   29fc2:	f000 fb1c 	bl	2a5fe <z_unpend_all>
   29fc6:	b130      	cbz	r0, 29fd6 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   29fc8:	4629      	mov	r1, r5
   29fca:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   29fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   29fd2:	f7f8 bc9d 	b.w	22910 <z_reschedule>
	__asm__ volatile(
   29fd6:	f385 8811 	msr	BASEPRI, r5
   29fda:	f3bf 8f6f 	isb	sy
}
   29fde:	bd38      	pop	{r3, r4, r5, pc}

00029fe0 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   29fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29fe2:	4604      	mov	r4, r0
   29fe4:	460d      	mov	r5, r1
	__asm__ volatile(
   29fe6:	f04f 0320 	mov.w	r3, #32
   29fea:	f3ef 8611 	mrs	r6, BASEPRI
   29fee:	f383 8812 	msr	BASEPRI_MAX, r3
   29ff2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   29ff6:	6947      	ldr	r7, [r0, #20]
   29ff8:	b977      	cbnz	r7, 2a018 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   29ffa:	f000 fae8 	bl	2a5ce <z_unpend_first_thread>

		if (pending_thread != NULL) {
   29ffe:	b158      	cbz	r0, 2a018 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2a000:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a002:	6142      	str	r2, [r0, #20]
   2a004:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2a006:	f000 fa71 	bl	2a4ec <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2a00a:	4631      	mov	r1, r6
   2a00c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2a010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2a014:	f7f8 bc7c 	b.w	22910 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2a018:	682b      	ldr	r3, [r5, #0]
   2a01a:	6962      	ldr	r2, [r4, #20]
   2a01c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2a01e:	682b      	ldr	r3, [r5, #0]
   2a020:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2a022:	69a3      	ldr	r3, [r4, #24]
   2a024:	3b01      	subs	r3, #1
   2a026:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2a028:	f386 8811 	msr	BASEPRI, r6
   2a02c:	f3bf 8f6f 	isb	sy
}
   2a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a032 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a032:	f3ef 8005 	mrs	r0, IPSR
}
   2a036:	3800      	subs	r0, #0
   2a038:	bf18      	it	ne
   2a03a:	2001      	movne	r0, #1
   2a03c:	4770      	bx	lr

0002a03e <z_impl_k_thread_name_set>:
}
   2a03e:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2a042:	4770      	bx	lr

0002a044 <k_thread_name_get>:
}
   2a044:	2000      	movs	r0, #0
   2a046:	4770      	bx	lr

0002a048 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a048:	f7f8 bd58 	b.w	22afc <z_sched_start>

0002a04c <z_pm_save_idle_exit>:
{
   2a04c:	b508      	push	{r3, lr}
	pm_system_resume();
   2a04e:	f7dc fa55 	bl	64fc <pm_system_resume>
}
   2a052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2a056:	f7ff be47 	b.w	29ce8 <sys_clock_idle_exit>

0002a05a <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   2a05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a05c:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   2a05e:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2a062:	f04f 0320 	mov.w	r3, #32
   2a066:	f3ef 8611 	mrs	r6, BASEPRI
   2a06a:	f383 8812 	msr	BASEPRI_MAX, r3
   2a06e:	f3bf 8f6f 	isb	sy
   2a072:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   2a076:	4620      	mov	r0, r4
   2a078:	f000 faa9 	bl	2a5ce <z_unpend_first_thread>
   2a07c:	4603      	mov	r3, r0
   2a07e:	b940      	cbnz	r0, 2a092 <z_impl_k_msgq_purge+0x38>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   2a080:	69e3      	ldr	r3, [r4, #28]
	msgq->used_msgs = 0;
   2a082:	6220      	str	r0, [r4, #32]
	msgq->read_ptr = msgq->write_ptr;
   2a084:	61a3      	str	r3, [r4, #24]

	z_reschedule(&msgq->lock, key);
   2a086:	4631      	mov	r1, r6
   2a088:	4628      	mov	r0, r5
}
   2a08a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   2a08e:	f7f8 bc3f 	b.w	22910 <z_reschedule>
   2a092:	67df      	str	r7, [r3, #124]	; 0x7c
		z_ready_thread(pending_thread);
   2a094:	f000 fa2a 	bl	2a4ec <z_ready_thread>
   2a098:	e7ed      	b.n	2a076 <z_impl_k_msgq_purge+0x1c>

0002a09a <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2a09a:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2a09e:	428b      	cmp	r3, r1
   2a0a0:	d001      	beq.n	2a0a6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2a0a2:	f7f8 bd9b 	b.w	22bdc <z_set_prio>
}
   2a0a6:	2000      	movs	r0, #0
   2a0a8:	4770      	bx	lr

0002a0aa <z_impl_k_mutex_init>:
{
   2a0aa:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2a0ac:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2a0ae:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2a0b2:	e9c3 3300 	strd	r3, r3, [r3]
}
   2a0b6:	4770      	bx	lr

0002a0b8 <queue_insert>:
{
   2a0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a0bc:	4699      	mov	r9, r3
   2a0be:	4604      	mov	r4, r0
   2a0c0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2a0c4:	460d      	mov	r5, r1
   2a0c6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a0c8:	f100 0608 	add.w	r6, r0, #8
   2a0cc:	f04f 0220 	mov.w	r2, #32
   2a0d0:	f3ef 8711 	mrs	r7, BASEPRI
   2a0d4:	f382 8812 	msr	BASEPRI_MAX, r2
   2a0d8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2a0dc:	b103      	cbz	r3, 2a0e0 <queue_insert+0x28>
	return list->tail;
   2a0de:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2a0e0:	4630      	mov	r0, r6
   2a0e2:	f000 fa74 	bl	2a5ce <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2a0e6:	b158      	cbz	r0, 2a100 <queue_insert+0x48>
   2a0e8:	2400      	movs	r4, #0
   2a0ea:	67c4      	str	r4, [r0, #124]	; 0x7c
   2a0ec:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2a0f0:	f000 f9fc 	bl	2a4ec <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2a0f4:	4630      	mov	r0, r6
   2a0f6:	4639      	mov	r1, r7
   2a0f8:	f7f8 fc0a 	bl	22910 <z_reschedule>
	return 0;
   2a0fc:	2000      	movs	r0, #0
   2a0fe:	e00c      	b.n	2a11a <queue_insert+0x62>
	if (alloc) {
   2a100:	f1b9 0f00 	cmp.w	r9, #0
   2a104:	d01b      	beq.n	2a13e <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2a106:	2108      	movs	r1, #8
   2a108:	f7f9 f994 	bl	23434 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2a10c:	b938      	cbnz	r0, 2a11e <queue_insert+0x66>
	__asm__ volatile(
   2a10e:	f387 8811 	msr	BASEPRI, r7
   2a112:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a116:	f06f 000b 	mvn.w	r0, #11
}
   2a11a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2a11e:	2301      	movs	r3, #1
		anode->data = data;
   2a120:	f8c0 8004 	str.w	r8, [r0, #4]
   2a124:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a126:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a128:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2a12c:	b95d      	cbnz	r5, 2a146 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a12e:	6823      	ldr	r3, [r4, #0]
   2a130:	4313      	orrs	r3, r2
   2a132:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a134:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2a136:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a138:	b973      	cbnz	r3, 2a158 <queue_insert+0xa0>
	list->tail = node;
   2a13a:	6060      	str	r0, [r4, #4]
}
   2a13c:	e00c      	b.n	2a158 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2a13e:	f8c8 9000 	str.w	r9, [r8]
}
   2a142:	4640      	mov	r0, r8
   2a144:	e7ef      	b.n	2a126 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a146:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2a148:	f033 0303 	bics.w	r3, r3, #3
   2a14c:	d110      	bne.n	2a170 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a14e:	6002      	str	r2, [r0, #0]
	return list->tail;
   2a150:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2a152:	b93a      	cbnz	r2, 2a164 <queue_insert+0xac>
	list->head = node;
   2a154:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a158:	2104      	movs	r1, #4
   2a15a:	f104 0010 	add.w	r0, r4, #16
   2a15e:	f000 fc57 	bl	2aa10 <z_handle_obj_poll_events>
   2a162:	e7c7      	b.n	2a0f4 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a164:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a166:	f003 0303 	and.w	r3, r3, #3
   2a16a:	4303      	orrs	r3, r0
   2a16c:	6013      	str	r3, [r2, #0]
   2a16e:	e7e4      	b.n	2a13a <queue_insert+0x82>
   2a170:	4313      	orrs	r3, r2
   2a172:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a174:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a176:	f003 0303 	and.w	r3, r3, #3
   2a17a:	4303      	orrs	r3, r0
   2a17c:	602b      	str	r3, [r5, #0]
}
   2a17e:	e7eb      	b.n	2a158 <queue_insert+0xa0>

0002a180 <z_queue_node_peek>:
{
   2a180:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a182:	4604      	mov	r4, r0
   2a184:	b130      	cbz	r0, 2a194 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a186:	6802      	ldr	r2, [r0, #0]
   2a188:	0793      	lsls	r3, r2, #30
   2a18a:	d003      	beq.n	2a194 <z_queue_node_peek+0x14>
		ret = anode->data;
   2a18c:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a18e:	b109      	cbz	r1, 2a194 <z_queue_node_peek+0x14>
			k_free(anode);
   2a190:	f000 fc4c 	bl	2aa2c <k_free>
}
   2a194:	4620      	mov	r0, r4
   2a196:	bd10      	pop	{r4, pc}

0002a198 <z_impl_k_queue_init>:
	list->head = NULL;
   2a198:	2300      	movs	r3, #0
	list->tail = NULL;
   2a19a:	e9c0 3300 	strd	r3, r3, [r0]
   2a19e:	f100 0308 	add.w	r3, r0, #8
   2a1a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2a1a6:	f100 0310 	add.w	r3, r0, #16
   2a1aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2a1ae:	4770      	bx	lr

0002a1b0 <k_queue_append>:
{
   2a1b0:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a1b2:	2301      	movs	r3, #1
   2a1b4:	9300      	str	r3, [sp, #0]
   2a1b6:	2300      	movs	r3, #0
{
   2a1b8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a1ba:	4619      	mov	r1, r3
   2a1bc:	f7ff ff7c 	bl	2a0b8 <queue_insert>
}
   2a1c0:	b003      	add	sp, #12
   2a1c2:	f85d fb04 	ldr.w	pc, [sp], #4

0002a1c6 <k_queue_prepend>:
{
   2a1c6:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2a1c8:	2300      	movs	r3, #0
{
   2a1ca:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2a1cc:	9300      	str	r3, [sp, #0]
   2a1ce:	4619      	mov	r1, r3
   2a1d0:	f7ff ff72 	bl	2a0b8 <queue_insert>
}
   2a1d4:	b003      	add	sp, #12
   2a1d6:	f85d fb04 	ldr.w	pc, [sp], #4

0002a1da <k_queue_append_list>:
{
   2a1da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a1de:	4605      	mov	r5, r0
   2a1e0:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2a1e2:	460c      	mov	r4, r1
   2a1e4:	b391      	cbz	r1, 2a24c <k_queue_append_list+0x72>
   2a1e6:	b38a      	cbz	r2, 2a24c <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a1e8:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2a1ec:	f04f 0320 	mov.w	r3, #32
   2a1f0:	f3ef 8811 	mrs	r8, BASEPRI
   2a1f4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a1f8:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2a1fc:	4638      	mov	r0, r7
   2a1fe:	f000 f9e6 	bl	2a5ce <z_unpend_first_thread>
   2a202:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2a206:	b920      	cbnz	r0, 2a212 <k_queue_append_list+0x38>
	return list->tail;
   2a208:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a20a:	b9ca      	cbnz	r2, 2a240 <k_queue_append_list+0x66>
	list->head = node;
   2a20c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2a20e:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a210:	e00a      	b.n	2a228 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2a212:	6144      	str	r4, [r0, #20]
   2a214:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2a218:	f000 f968 	bl	2a4ec <z_ready_thread>
		head = *(void **)head;
   2a21c:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2a21e:	4638      	mov	r0, r7
   2a220:	f000 f9d5 	bl	2a5ce <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2a224:	2c00      	cmp	r4, #0
   2a226:	d1ee      	bne.n	2a206 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a228:	2104      	movs	r1, #4
   2a22a:	f105 0010 	add.w	r0, r5, #16
   2a22e:	f000 fbef 	bl	2aa10 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2a232:	4638      	mov	r0, r7
   2a234:	4641      	mov	r1, r8
   2a236:	f7f8 fb6b 	bl	22910 <z_reschedule>
	return 0;
   2a23a:	2000      	movs	r0, #0
}
   2a23c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a240:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a242:	f003 0303 	and.w	r3, r3, #3
   2a246:	431c      	orrs	r4, r3
   2a248:	6014      	str	r4, [r2, #0]
}
   2a24a:	e7e0      	b.n	2a20e <k_queue_append_list+0x34>
		return -EINVAL;
   2a24c:	f06f 0015 	mvn.w	r0, #21
   2a250:	e7f4      	b.n	2a23c <k_queue_append_list+0x62>

0002a252 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a252:	b15a      	cbz	r2, 2a26c <z_impl_k_sem_init+0x1a>
   2a254:	428a      	cmp	r2, r1
   2a256:	d309      	bcc.n	2a26c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a258:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a25c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2a260:	e9c0 0000 	strd	r0, r0, [r0]
   2a264:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a268:	2000      	movs	r0, #0
   2a26a:	4770      	bx	lr
		return -EINVAL;
   2a26c:	f06f 0015 	mvn.w	r0, #21
}
   2a270:	4770      	bx	lr

0002a272 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2a272:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2a274:	2301      	movs	r3, #1
   2a276:	408b      	lsls	r3, r1
   2a278:	ea22 0303 	bic.w	r3, r2, r3
   2a27c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2a27e:	fa22 f001 	lsr.w	r0, r2, r1
}
   2a282:	f000 0001 	and.w	r0, r0, #1
   2a286:	4770      	bx	lr

0002a288 <unschedule_locked>:
{
   2a288:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a28a:	2103      	movs	r1, #3
{
   2a28c:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a28e:	300c      	adds	r0, #12
   2a290:	f7ff ffef 	bl	2a272 <flag_test_and_clear>
   2a294:	4604      	mov	r4, r0
   2a296:	b118      	cbz	r0, 2a2a0 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2a298:	f105 0010 	add.w	r0, r5, #16
   2a29c:	f000 f9dc 	bl	2a658 <z_abort_timeout>
}
   2a2a0:	4620      	mov	r0, r4
   2a2a2:	bd38      	pop	{r3, r4, r5, pc}

0002a2a4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2a2a4:	b120      	cbz	r0, 2a2b0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2a2a6:	2200      	movs	r2, #0
   2a2a8:	4611      	mov	r1, r2
   2a2aa:	3088      	adds	r0, #136	; 0x88
   2a2ac:	f000 b9b7 	b.w	2a61e <z_sched_wake>
}
   2a2b0:	4770      	bx	lr

0002a2b2 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2a2b2:	68c3      	ldr	r3, [r0, #12]
{
   2a2b4:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a2b6:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2a2ba:	079b      	lsls	r3, r3, #30
{
   2a2bc:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a2be:	d416      	bmi.n	2a2ee <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2a2c0:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a2c2:	2102      	movs	r1, #2
   2a2c4:	300c      	adds	r0, #12
   2a2c6:	f7ff ffd4 	bl	2a272 <flag_test_and_clear>
   2a2ca:	b180      	cbz	r0, 2a2ee <cancel_async_locked+0x3c>
	return list->head;
   2a2cc:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a2d0:	b16a      	cbz	r2, 2a2ee <cancel_async_locked+0x3c>
   2a2d2:	4294      	cmp	r4, r2
   2a2d4:	d11b      	bne.n	2a30e <cancel_async_locked+0x5c>
	return node->next;
   2a2d6:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2a2d8:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2a2dc:	b98d      	cbnz	r5, 2a302 <cancel_async_locked+0x50>
   2a2de:	428c      	cmp	r4, r1
	list->head = node;
   2a2e0:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2a2e4:	d101      	bne.n	2a2ea <cancel_async_locked+0x38>
	list->tail = node;
   2a2e6:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2a2ea:	2300      	movs	r3, #0
   2a2ec:	6023      	str	r3, [r4, #0]
	return *flagp;
   2a2ee:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2a2f0:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2a2f4:	bf1e      	ittt	ne
   2a2f6:	f043 0302 	orrne.w	r3, r3, #2
   2a2fa:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a2fc:	f003 000f 	andne.w	r0, r3, #15
}
   2a300:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a302:	428c      	cmp	r4, r1
	parent->next = child;
   2a304:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a306:	bf08      	it	eq
   2a308:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2a30c:	e7ed      	b.n	2a2ea <cancel_async_locked+0x38>
	return node->next;
   2a30e:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a310:	6812      	ldr	r2, [r2, #0]
   2a312:	e7dd      	b.n	2a2d0 <cancel_async_locked+0x1e>

0002a314 <work_timeout>:
{
   2a314:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a316:	4604      	mov	r4, r0
   2a318:	f04f 0320 	mov.w	r3, #32
   2a31c:	f3ef 8511 	mrs	r5, BASEPRI
   2a320:	f383 8812 	msr	BASEPRI_MAX, r3
   2a324:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a328:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a32a:	f1a0 0610 	sub.w	r6, r0, #16
   2a32e:	2103      	movs	r1, #3
   2a330:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2a332:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a334:	f7ff ff9d 	bl	2a272 <flag_test_and_clear>
   2a338:	b128      	cbz	r0, 2a346 <work_timeout+0x32>
		queue = dw->queue;
   2a33a:	69a3      	ldr	r3, [r4, #24]
   2a33c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a33e:	a901      	add	r1, sp, #4
   2a340:	4630      	mov	r0, r6
   2a342:	f7f8 f9ad 	bl	226a0 <submit_to_queue_locked>
	__asm__ volatile(
   2a346:	f385 8811 	msr	BASEPRI, r5
   2a34a:	f3bf 8f6f 	isb	sy
}
   2a34e:	b002      	add	sp, #8
   2a350:	bd70      	pop	{r4, r5, r6, pc}

0002a352 <k_work_init>:
{
   2a352:	b538      	push	{r3, r4, r5, lr}
   2a354:	4604      	mov	r4, r0
   2a356:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2a358:	2210      	movs	r2, #16
   2a35a:	2100      	movs	r1, #0
   2a35c:	f000 fb9e 	bl	2aa9c <memset>
   2a360:	6065      	str	r5, [r4, #4]
}
   2a362:	bd38      	pop	{r3, r4, r5, pc}

0002a364 <k_work_submit_to_queue>:
{
   2a364:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a366:	9001      	str	r0, [sp, #4]
   2a368:	4608      	mov	r0, r1
	__asm__ volatile(
   2a36a:	f04f 0320 	mov.w	r3, #32
   2a36e:	f3ef 8511 	mrs	r5, BASEPRI
   2a372:	f383 8812 	msr	BASEPRI_MAX, r3
   2a376:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a37a:	a901      	add	r1, sp, #4
   2a37c:	f7f8 f990 	bl	226a0 <submit_to_queue_locked>
   2a380:	4604      	mov	r4, r0
	__asm__ volatile(
   2a382:	f385 8811 	msr	BASEPRI, r5
   2a386:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2a38a:	2800      	cmp	r0, #0
   2a38c:	dd04      	ble.n	2a398 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2a38e:	f7f8 fd6f 	bl	22e70 <z_impl_k_is_preempt_thread>
   2a392:	b108      	cbz	r0, 2a398 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2a394:	f7f8 fcc4 	bl	22d20 <z_impl_k_yield>
}
   2a398:	4620      	mov	r0, r4
   2a39a:	b003      	add	sp, #12
   2a39c:	bd30      	pop	{r4, r5, pc}

0002a39e <k_work_init_delayable>:
{
   2a39e:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2a3a0:	2230      	movs	r2, #48	; 0x30
{
   2a3a2:	4604      	mov	r4, r0
   2a3a4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2a3a6:	2100      	movs	r1, #0
   2a3a8:	f000 fb78 	bl	2aa9c <memset>
   2a3ac:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a3b0:	6065      	str	r5, [r4, #4]
   2a3b2:	60e3      	str	r3, [r4, #12]
}
   2a3b4:	bd38      	pop	{r3, r4, r5, pc}

0002a3b6 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a3b6:	b538      	push	{r3, r4, r5, lr}
   2a3b8:	4604      	mov	r4, r0
	__asm__ volatile(
   2a3ba:	f04f 0320 	mov.w	r3, #32
   2a3be:	f3ef 8511 	mrs	r5, BASEPRI
   2a3c2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3c6:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2a3ca:	f7ff ff5d 	bl	2a288 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a3ce:	4620      	mov	r0, r4
   2a3d0:	f7ff ff6f 	bl	2a2b2 <cancel_async_locked>
	__asm__ volatile(
   2a3d4:	f385 8811 	msr	BASEPRI, r5
   2a3d8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a3dc:	bd38      	pop	{r3, r4, r5, pc}

0002a3de <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a3de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a3e0:	4604      	mov	r4, r0
   2a3e2:	460d      	mov	r5, r1
	__asm__ volatile(
   2a3e4:	f04f 0320 	mov.w	r3, #32
   2a3e8:	f3ef 8711 	mrs	r7, BASEPRI
   2a3ec:	f383 8812 	msr	BASEPRI_MAX, r3
   2a3f0:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2a3f4:	68c3      	ldr	r3, [r0, #12]
   2a3f6:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a3fa:	2b00      	cmp	r3, #0
   2a3fc:	bf14      	ite	ne
   2a3fe:	2601      	movne	r6, #1
   2a400:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2a402:	d009      	beq.n	2a418 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2a404:	f7ff ff40 	bl	2a288 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a408:	4620      	mov	r0, r4
   2a40a:	f7ff ff52 	bl	2a2b2 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a40e:	4629      	mov	r1, r5
   2a410:	4620      	mov	r0, r4
   2a412:	f7f8 f927 	bl	22664 <cancel_sync_locked>
   2a416:	4603      	mov	r3, r0
	__asm__ volatile(
   2a418:	f387 8811 	msr	BASEPRI, r7
   2a41c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a420:	b13b      	cbz	r3, 2a432 <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2a422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a42a:	f105 0008 	add.w	r0, r5, #8
   2a42e:	f7f8 f841 	bl	224b4 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2a432:	4630      	mov	r0, r6
   2a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a436 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2a436:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2a43a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2a43c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2a43e:	2300      	movs	r3, #0
	node->prev = NULL;
   2a440:	e9c0 3300 	strd	r3, r3, [r0]
}
   2a444:	4770      	bx	lr

0002a446 <unpend_thread_no_timeout>:
{
   2a446:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2a448:	f7ff fff5 	bl	2a436 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a44c:	7b43      	ldrb	r3, [r0, #13]
   2a44e:	f023 0302 	bic.w	r3, r3, #2
   2a452:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2a454:	2300      	movs	r3, #0
   2a456:	6083      	str	r3, [r0, #8]
}
   2a458:	bd08      	pop	{r3, pc}

0002a45a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2a45a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2a45e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2a462:	4283      	cmp	r3, r0
		return b2 - b1;
   2a464:	bf14      	ite	ne
   2a466:	1ac0      	subne	r0, r0, r3
	return 0;
   2a468:	2000      	moveq	r0, #0
}
   2a46a:	4770      	bx	lr

0002a46c <z_unpend_thread_no_timeout>:
{
   2a46c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2a46e:	f04f 0320 	mov.w	r3, #32
   2a472:	f3ef 8111 	mrs	r1, BASEPRI
   2a476:	f383 8812 	msr	BASEPRI_MAX, r3
   2a47a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2a47e:	f7ff ffe2 	bl	2a446 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a482:	f381 8811 	msr	BASEPRI, r1
   2a486:	f3bf 8f6f 	isb	sy
}
   2a48a:	bd08      	pop	{r3, pc}

0002a48c <z_unpend_thread>:
{
   2a48c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a48e:	f04f 0320 	mov.w	r3, #32
   2a492:	f3ef 8411 	mrs	r4, BASEPRI
   2a496:	f383 8812 	msr	BASEPRI_MAX, r3
   2a49a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2a49e:	f7ff ffd2 	bl	2a446 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a4a2:	f384 8811 	msr	BASEPRI, r4
   2a4a6:	f3bf 8f6f 	isb	sy
}
   2a4aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a4ae:	3018      	adds	r0, #24
   2a4b0:	f000 b8d2 	b.w	2a658 <z_abort_timeout>

0002a4b4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2a4b4:	4603      	mov	r3, r0
   2a4b6:	b920      	cbnz	r0, 2a4c2 <z_reschedule_irqlock+0xe>
   2a4b8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2a4bc:	b90a      	cbnz	r2, 2a4c2 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2a4be:	f7dc bb65 	b.w	6b8c <arch_swap>
   2a4c2:	f383 8811 	msr	BASEPRI, r3
   2a4c6:	f3bf 8f6f 	isb	sy
}
   2a4ca:	4770      	bx	lr

0002a4cc <z_reschedule_unlocked>:
	__asm__ volatile(
   2a4cc:	f04f 0320 	mov.w	r3, #32
   2a4d0:	f3ef 8011 	mrs	r0, BASEPRI
   2a4d4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4d8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a4dc:	f7ff bfea 	b.w	2a4b4 <z_reschedule_irqlock>

0002a4e0 <z_priq_dumb_best>:
{
   2a4e0:	4603      	mov	r3, r0
	return list->head == list;
   2a4e2:	6800      	ldr	r0, [r0, #0]
}
   2a4e4:	4283      	cmp	r3, r0
   2a4e6:	bf08      	it	eq
   2a4e8:	2000      	moveq	r0, #0
   2a4ea:	4770      	bx	lr

0002a4ec <z_ready_thread>:
{
   2a4ec:	b510      	push	{r4, lr}
   2a4ee:	f04f 0320 	mov.w	r3, #32
   2a4f2:	f3ef 8411 	mrs	r4, BASEPRI
   2a4f6:	f383 8812 	msr	BASEPRI_MAX, r3
   2a4fa:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2a4fe:	f7f8 fac7 	bl	22a90 <ready_thread>
	__asm__ volatile(
   2a502:	f384 8811 	msr	BASEPRI, r4
   2a506:	f3bf 8f6f 	isb	sy
}
   2a50a:	bd10      	pop	{r4, pc}

0002a50c <z_thread_timeout>:
{
   2a50c:	b510      	push	{r4, lr}
   2a50e:	4601      	mov	r1, r0
	__asm__ volatile(
   2a510:	f04f 0320 	mov.w	r3, #32
   2a514:	f3ef 8411 	mrs	r4, BASEPRI
   2a518:	f383 8812 	msr	BASEPRI_MAX, r3
   2a51c:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2a520:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2a524:	f013 0f28 	tst.w	r3, #40	; 0x28
   2a528:	d10d      	bne.n	2a546 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2a52a:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2a52e:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2a530:	b10b      	cbz	r3, 2a536 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2a532:	f7ff ff88 	bl	2a446 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2a536:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2a53a:	f023 0314 	bic.w	r3, r3, #20
   2a53e:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2a542:	f7f8 faa5 	bl	22a90 <ready_thread>
	__asm__ volatile(
   2a546:	f384 8811 	msr	BASEPRI, r4
   2a54a:	f3bf 8f6f 	isb	sy
}
   2a54e:	bd10      	pop	{r4, pc}

0002a550 <add_to_waitq_locked>:
{
   2a550:	b538      	push	{r3, r4, r5, lr}
   2a552:	4604      	mov	r4, r0
   2a554:	460d      	mov	r5, r1
	unready_thread(thread);
   2a556:	f7f8 faef 	bl	22b38 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2a55a:	7b63      	ldrb	r3, [r4, #13]
   2a55c:	f043 0302 	orr.w	r3, r3, #2
   2a560:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2a562:	b195      	cbz	r5, 2a58a <add_to_waitq_locked+0x3a>
   2a564:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2a566:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a568:	429d      	cmp	r5, r3
   2a56a:	d015      	beq.n	2a598 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a56c:	b1a3      	cbz	r3, 2a598 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2a56e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2a572:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2a576:	4291      	cmp	r1, r2
   2a578:	d008      	beq.n	2a58c <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2a57a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2a57c:	2a00      	cmp	r2, #0
   2a57e:	dd05      	ble.n	2a58c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2a580:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2a582:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2a586:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2a588:	605c      	str	r4, [r3, #4]
}
   2a58a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2a58c:	686a      	ldr	r2, [r5, #4]
   2a58e:	4293      	cmp	r3, r2
   2a590:	d002      	beq.n	2a598 <add_to_waitq_locked+0x48>
   2a592:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2a594:	2b00      	cmp	r3, #0
   2a596:	d1ec      	bne.n	2a572 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2a598:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2a59a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2a59e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2a5a0:	606c      	str	r4, [r5, #4]
}
   2a5a2:	e7f2      	b.n	2a58a <add_to_waitq_locked+0x3a>

0002a5a4 <z_unpend1_no_timeout>:
{
   2a5a4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a5a6:	f04f 0320 	mov.w	r3, #32
   2a5aa:	f3ef 8411 	mrs	r4, BASEPRI
   2a5ae:	f383 8812 	msr	BASEPRI_MAX, r3
   2a5b2:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a5b6:	f7ff ff93 	bl	2a4e0 <z_priq_dumb_best>
		if (thread != NULL) {
   2a5ba:	4601      	mov	r1, r0
   2a5bc:	b108      	cbz	r0, 2a5c2 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2a5be:	f7ff ff42 	bl	2a446 <unpend_thread_no_timeout>
	__asm__ volatile(
   2a5c2:	f384 8811 	msr	BASEPRI, r4
   2a5c6:	f3bf 8f6f 	isb	sy
}
   2a5ca:	4608      	mov	r0, r1
   2a5cc:	bd10      	pop	{r4, pc}

0002a5ce <z_unpend_first_thread>:
{
   2a5ce:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a5d0:	f04f 0320 	mov.w	r3, #32
   2a5d4:	f3ef 8511 	mrs	r5, BASEPRI
   2a5d8:	f383 8812 	msr	BASEPRI_MAX, r3
   2a5dc:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a5e0:	f7ff ff7e 	bl	2a4e0 <z_priq_dumb_best>
		if (thread != NULL) {
   2a5e4:	4604      	mov	r4, r0
   2a5e6:	b120      	cbz	r0, 2a5f2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2a5e8:	f7ff ff2d 	bl	2a446 <unpend_thread_no_timeout>
   2a5ec:	3018      	adds	r0, #24
   2a5ee:	f000 f833 	bl	2a658 <z_abort_timeout>
	__asm__ volatile(
   2a5f2:	f385 8811 	msr	BASEPRI, r5
   2a5f6:	f3bf 8f6f 	isb	sy
}
   2a5fa:	4620      	mov	r0, r4
   2a5fc:	bd38      	pop	{r3, r4, r5, pc}

0002a5fe <z_unpend_all>:
{
   2a5fe:	b538      	push	{r3, r4, r5, lr}
   2a600:	4605      	mov	r5, r0
	int need_sched = 0;
   2a602:	2000      	movs	r0, #0
	return list->head == list;
   2a604:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a606:	42a5      	cmp	r5, r4
   2a608:	d000      	beq.n	2a60c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2a60a:	b904      	cbnz	r4, 2a60e <z_unpend_all+0x10>
}
   2a60c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2a60e:	4620      	mov	r0, r4
   2a610:	f7ff ff3c 	bl	2a48c <z_unpend_thread>
		z_ready_thread(thread);
   2a614:	4620      	mov	r0, r4
   2a616:	f7ff ff69 	bl	2a4ec <z_ready_thread>
		need_sched = 1;
   2a61a:	2001      	movs	r0, #1
   2a61c:	e7f2      	b.n	2a604 <z_unpend_all+0x6>

0002a61e <z_sched_wake>:
{
   2a61e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2a620:	f04f 0320 	mov.w	r3, #32
   2a624:	f3ef 8511 	mrs	r5, BASEPRI
   2a628:	f383 8812 	msr	BASEPRI_MAX, r3
   2a62c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2a630:	f7ff ff56 	bl	2a4e0 <z_priq_dumb_best>
		if (thread != NULL) {
   2a634:	4604      	mov	r4, r0
   2a636:	b150      	cbz	r0, 2a64e <z_sched_wake+0x30>
   2a638:	67c1      	str	r1, [r0, #124]	; 0x7c
   2a63a:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2a63c:	f7ff ff03 	bl	2a446 <unpend_thread_no_timeout>
   2a640:	3018      	adds	r0, #24
   2a642:	f000 f809 	bl	2a658 <z_abort_timeout>
			ready_thread(thread);
   2a646:	4620      	mov	r0, r4
   2a648:	f7f8 fa22 	bl	22a90 <ready_thread>
			ret = true;
   2a64c:	2001      	movs	r0, #1
	__asm__ volatile(
   2a64e:	f385 8811 	msr	BASEPRI, r5
   2a652:	f3bf 8f6f 	isb	sy
}
   2a656:	bd38      	pop	{r3, r4, r5, pc}

0002a658 <z_abort_timeout>:
{
   2a658:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a65a:	f04f 0220 	mov.w	r2, #32
   2a65e:	f3ef 8411 	mrs	r4, BASEPRI
   2a662:	f382 8812 	msr	BASEPRI_MAX, r2
   2a666:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2a66a:	6803      	ldr	r3, [r0, #0]
   2a66c:	b13b      	cbz	r3, 2a67e <z_abort_timeout+0x26>
			remove_timeout(to);
   2a66e:	f7f8 fcbd 	bl	22fec <remove_timeout>
			ret = 0;
   2a672:	2000      	movs	r0, #0
	__asm__ volatile(
   2a674:	f384 8811 	msr	BASEPRI, r4
   2a678:	f3bf 8f6f 	isb	sy
}
   2a67c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2a67e:	f06f 0015 	mvn.w	r0, #21
   2a682:	e7f7      	b.n	2a674 <z_abort_timeout+0x1c>

0002a684 <z_get_next_timeout_expiry>:
{
   2a684:	b510      	push	{r4, lr}
	__asm__ volatile(
   2a686:	f04f 0320 	mov.w	r3, #32
   2a68a:	f3ef 8411 	mrs	r4, BASEPRI
   2a68e:	f383 8812 	msr	BASEPRI_MAX, r3
   2a692:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2a696:	f7f8 fc83 	bl	22fa0 <next_timeout>
	__asm__ volatile(
   2a69a:	f384 8811 	msr	BASEPRI, r4
   2a69e:	f3bf 8f6f 	isb	sy
}
   2a6a2:	bd10      	pop	{r4, pc}

0002a6a4 <z_set_timeout_expiry>:
{
   2a6a4:	b570      	push	{r4, r5, r6, lr}
   2a6a6:	4604      	mov	r4, r0
   2a6a8:	460d      	mov	r5, r1
	__asm__ volatile(
   2a6aa:	f04f 0320 	mov.w	r3, #32
   2a6ae:	f3ef 8611 	mrs	r6, BASEPRI
   2a6b2:	f383 8812 	msr	BASEPRI_MAX, r3
   2a6b6:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2a6ba:	f7f8 fc71 	bl	22fa0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2a6be:	2801      	cmp	r0, #1
   2a6c0:	dd05      	ble.n	2a6ce <z_set_timeout_expiry+0x2a>
   2a6c2:	42a0      	cmp	r0, r4
   2a6c4:	db03      	blt.n	2a6ce <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2a6c6:	4629      	mov	r1, r5
   2a6c8:	4620      	mov	r0, r4
   2a6ca:	f7f6 fc4b 	bl	20f64 <sys_clock_set_timeout>
	__asm__ volatile(
   2a6ce:	f386 8811 	msr	BASEPRI, r6
   2a6d2:	f3bf 8f6f 	isb	sy
}
   2a6d6:	bd70      	pop	{r4, r5, r6, pc}

0002a6d8 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2a6d8:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2a6da:	f7f8 fd77 	bl	231cc <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2a6de:	bd08      	pop	{r3, pc}

0002a6e0 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2a6e0:	f7f8 bd74 	b.w	231cc <sys_clock_tick_get>

0002a6e4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2a6e4:	b108      	cbz	r0, 2a6ea <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2a6e6:	f7dc bf23 	b.w	7530 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2a6ea:	4770      	bx	lr

0002a6ec <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a6ec:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a6f0:	bf08      	it	eq
   2a6f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2a6f6:	b538      	push	{r3, r4, r5, lr}
   2a6f8:	4605      	mov	r5, r0
   2a6fa:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2a6fc:	d01d      	beq.n	2a73a <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2a6fe:	ea51 0300 	orrs.w	r3, r1, r0
   2a702:	d103      	bne.n	2a70c <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2a704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2a708:	f7f8 bd60 	b.w	231cc <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2a70c:	f06f 0301 	mvn.w	r3, #1
   2a710:	1a18      	subs	r0, r3, r0
   2a712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a716:	eb63 0101 	sbc.w	r1, r3, r1
   2a71a:	2900      	cmp	r1, #0
   2a71c:	da0c      	bge.n	2a738 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2a71e:	f7f8 fd55 	bl	231cc <sys_clock_tick_get>
   2a722:	2d01      	cmp	r5, #1
   2a724:	4622      	mov	r2, r4
   2a726:	f174 0400 	sbcs.w	r4, r4, #0
   2a72a:	462b      	mov	r3, r5
   2a72c:	bfbc      	itt	lt
   2a72e:	2301      	movlt	r3, #1
   2a730:	2200      	movlt	r2, #0
   2a732:	1818      	adds	r0, r3, r0
   2a734:	eb41 0102 	adc.w	r1, r1, r2
}
   2a738:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2a73a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a73e:	4601      	mov	r1, r0
   2a740:	e7fa      	b.n	2a738 <sys_clock_timeout_end_calc+0x4c>

0002a742 <k_timer_init>:
	timer->status = 0U;
   2a742:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2a744:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2a748:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2a74c:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2a750:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2a754:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2a756:	6343      	str	r3, [r0, #52]	; 0x34
}
   2a758:	4770      	bx	lr

0002a75a <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2a75a:	b510      	push	{r4, lr}
   2a75c:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2a75e:	f7ff ff7b 	bl	2a658 <z_abort_timeout>

	if (inactive) {
   2a762:	b9b0      	cbnz	r0, 2a792 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2a764:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a766:	b10b      	cbz	r3, 2a76c <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2a768:	4620      	mov	r0, r4
   2a76a:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2a76c:	f104 0018 	add.w	r0, r4, #24
   2a770:	f7ff ff18 	bl	2a5a4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2a774:	b168      	cbz	r0, 2a792 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2a776:	f7ff feb9 	bl	2a4ec <z_ready_thread>
	__asm__ volatile(
   2a77a:	f04f 0320 	mov.w	r3, #32
   2a77e:	f3ef 8011 	mrs	r0, BASEPRI
   2a782:	f383 8812 	msr	BASEPRI_MAX, r3
   2a786:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2a78a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2a78e:	f7ff be91 	b.w	2a4b4 <z_reschedule_irqlock>
   2a792:	bd10      	pop	{r4, pc}

0002a794 <add_event>:
{
   2a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a796:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a798:	e9d0 1300 	ldrd	r1, r3, [r0]
   2a79c:	4288      	cmp	r0, r1
   2a79e:	4604      	mov	r4, r0
   2a7a0:	d00d      	beq.n	2a7be <add_event+0x2a>
	if ((pending == NULL) ||
   2a7a2:	b163      	cbz	r3, 2a7be <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a7a4:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a7a6:	b100      	cbz	r0, 2a7aa <add_event+0x16>
   2a7a8:	3860      	subs	r0, #96	; 0x60
   2a7aa:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2a7ae:	4639      	mov	r1, r7
   2a7b0:	f7ff fe53 	bl	2a45a <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2a7b4:	2800      	cmp	r0, #0
   2a7b6:	dc02      	bgt.n	2a7be <add_event+0x2a>
	return list->head == list;
   2a7b8:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a7ba:	42b4      	cmp	r4, r6
   2a7bc:	d109      	bne.n	2a7d2 <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2a7be:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2a7c0:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2a7c4:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2a7c6:	6065      	str	r5, [r4, #4]
}
   2a7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2a7ca:	6863      	ldr	r3, [r4, #4]
   2a7cc:	42b3      	cmp	r3, r6
   2a7ce:	d0f6      	beq.n	2a7be <add_event+0x2a>
   2a7d0:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2a7d2:	2e00      	cmp	r6, #0
   2a7d4:	d0f3      	beq.n	2a7be <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2a7d6:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a7d8:	b101      	cbz	r1, 2a7dc <add_event+0x48>
   2a7da:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2a7dc:	4638      	mov	r0, r7
   2a7de:	f7ff fe3c 	bl	2a45a <z_sched_prio_cmp>
   2a7e2:	2800      	cmp	r0, #0
   2a7e4:	ddf1      	ble.n	2a7ca <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2a7e6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2a7e8:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2a7ec:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2a7ee:	6075      	str	r5, [r6, #4]
			return;
   2a7f0:	e7ea      	b.n	2a7c8 <add_event+0x34>

0002a7f2 <register_events>:
{
   2a7f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2a7f6:	2500      	movs	r5, #0
{
   2a7f8:	468b      	mov	fp, r1
   2a7fa:	4614      	mov	r4, r2
   2a7fc:	461f      	mov	r7, r3
   2a7fe:	4682      	mov	sl, r0
	int events_registered = 0;
   2a800:	462e      	mov	r6, r5
	event->poller = NULL;
   2a802:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2a804:	455d      	cmp	r5, fp
   2a806:	db02      	blt.n	2a80e <register_events+0x1c>
}
   2a808:	4630      	mov	r0, r6
   2a80a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a80e:	f04f 0320 	mov.w	r3, #32
   2a812:	f3ef 8911 	mrs	r9, BASEPRI
   2a816:	f383 8812 	msr	BASEPRI_MAX, r3
   2a81a:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2a81e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a822:	f003 031f 	and.w	r3, r3, #31
   2a826:	3b01      	subs	r3, #1
   2a828:	2b07      	cmp	r3, #7
   2a82a:	d80f      	bhi.n	2a84c <register_events+0x5a>
   2a82c:	e8df f003 	tbb	[pc, r3]
   2a830:	0a0e041e 	.word	0x0a0e041e
   2a834:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2a838:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a83c:	689b      	ldr	r3, [r3, #8]
   2a83e:	b12b      	cbz	r3, 2a84c <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2a840:	2302      	movs	r3, #2
   2a842:	e020      	b.n	2a886 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2a844:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a848:	681b      	ldr	r3, [r3, #0]
   2a84a:	bb8b      	cbnz	r3, 2a8b0 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2a84c:	bb47      	cbnz	r7, 2a8a0 <register_events+0xae>
   2a84e:	7823      	ldrb	r3, [r4, #0]
   2a850:	b333      	cbz	r3, 2a8a0 <register_events+0xae>
	switch (event->type) {
   2a852:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2a856:	f003 031f 	and.w	r3, r3, #31
   2a85a:	3b01      	subs	r3, #1
   2a85c:	2b07      	cmp	r3, #7
   2a85e:	d830      	bhi.n	2a8c2 <register_events+0xd0>
   2a860:	e8df f003 	tbb	[pc, r3]
   2a864:	282f2833 	.word	0x282f2833
   2a868:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2a86c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a870:	689b      	ldr	r3, [r3, #8]
   2a872:	2b00      	cmp	r3, #0
   2a874:	d0ea      	beq.n	2a84c <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2a876:	2301      	movs	r3, #1
   2a878:	e005      	b.n	2a886 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2a87a:	f8da 3010 	ldr.w	r3, [sl, #16]
   2a87e:	6a1b      	ldr	r3, [r3, #32]
   2a880:	2b00      	cmp	r3, #0
   2a882:	d0e3      	beq.n	2a84c <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2a884:	2310      	movs	r3, #16
	event->state |= state;
   2a886:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2a88a:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2a88e:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2a892:	430b      	orrs	r3, r1
   2a894:	f363 3252 	bfi	r2, r3, #13, #6
   2a898:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2a89c:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2a8a0:	f389 8811 	msr	BASEPRI, r9
   2a8a4:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2a8a8:	3501      	adds	r5, #1
   2a8aa:	f10a 0a14 	add.w	sl, sl, #20
   2a8ae:	e7a9      	b.n	2a804 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2a8b0:	2304      	movs	r3, #4
   2a8b2:	e7e8      	b.n	2a886 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2a8b4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a8b8:	4622      	mov	r2, r4
   2a8ba:	4651      	mov	r1, sl
   2a8bc:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2a8be:	f7ff ff69 	bl	2a794 <add_event>
	event->poller = poller;
   2a8c2:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2a8c6:	3601      	adds	r6, #1
   2a8c8:	e7ea      	b.n	2a8a0 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2a8ca:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a8ce:	4622      	mov	r2, r4
   2a8d0:	4651      	mov	r1, sl
   2a8d2:	e7f4      	b.n	2a8be <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2a8d4:	f8da 0010 	ldr.w	r0, [sl, #16]
   2a8d8:	4622      	mov	r2, r4
   2a8da:	4651      	mov	r1, sl
   2a8dc:	3024      	adds	r0, #36	; 0x24
   2a8de:	e7ee      	b.n	2a8be <register_events+0xcc>

0002a8e0 <signal_poll_event>:
{
   2a8e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2a8e4:	6884      	ldr	r4, [r0, #8]
{
   2a8e6:	4605      	mov	r5, r0
   2a8e8:	460e      	mov	r6, r1
	if (poller != NULL) {
   2a8ea:	b144      	cbz	r4, 2a8fe <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2a8ec:	7863      	ldrb	r3, [r4, #1]
   2a8ee:	2b01      	cmp	r3, #1
   2a8f0:	d136      	bne.n	2a960 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2a8f2:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a8f6:	f013 0302 	ands.w	r3, r3, #2
   2a8fa:	d10a      	bne.n	2a912 <signal_poll_event+0x32>
		poller->is_polling = false;
   2a8fc:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2a8fe:	68eb      	ldr	r3, [r5, #12]
   2a900:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2a904:	430e      	orrs	r6, r1
	event->poller = NULL;
   2a906:	2000      	movs	r0, #0
	event->state |= state;
   2a908:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2a90c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2a90e:	60eb      	str	r3, [r5, #12]
	return retcode;
   2a910:	e00b      	b.n	2a92a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2a912:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2a916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a91a:	bf08      	it	eq
   2a91c:	f112 0f02 	cmneq.w	r2, #2
   2a920:	d105      	bne.n	2a92e <signal_poll_event+0x4e>
		poller->is_polling = false;
   2a922:	2300      	movs	r3, #0
   2a924:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2a926:	f06f 000a 	mvn.w	r0, #10
}
   2a92a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2a92e:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2a932:	4640      	mov	r0, r8
   2a934:	f7ff fdaa 	bl	2a48c <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2a938:	2e08      	cmp	r6, #8
   2a93a:	bf0c      	ite	eq
   2a93c:	f06f 0303 	mvneq.w	r3, #3
   2a940:	2300      	movne	r3, #0
   2a942:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2a944:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2a948:	06db      	lsls	r3, r3, #27
   2a94a:	d102      	bne.n	2a952 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2a94c:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2a950:	b10f      	cbz	r7, 2a956 <signal_poll_event+0x76>
		poller->is_polling = false;
   2a952:	2300      	movs	r3, #0
   2a954:	e7d2      	b.n	2a8fc <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2a956:	4640      	mov	r0, r8
   2a958:	f7ff fdc8 	bl	2a4ec <z_ready_thread>
		poller->is_polling = false;
   2a95c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2a95e:	e7ce      	b.n	2a8fe <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2a960:	2b02      	cmp	r3, #2
   2a962:	d1f6      	bne.n	2a952 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2a964:	7823      	ldrb	r3, [r4, #0]
   2a966:	2b00      	cmp	r3, #0
   2a968:	d0c9      	beq.n	2a8fe <signal_poll_event+0x1e>
   2a96a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2a96e:	2f00      	cmp	r7, #0
   2a970:	d0f4      	beq.n	2a95c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2a972:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2a976:	f1a4 0914 	sub.w	r9, r4, #20
   2a97a:	f104 0014 	add.w	r0, r4, #20
   2a97e:	f7ff fe6b 	bl	2a658 <z_abort_timeout>
		twork->poll_result = 0;
   2a982:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2a986:	4649      	mov	r1, r9
   2a988:	4638      	mov	r0, r7
   2a98a:	f7ff fceb 	bl	2a364 <k_work_submit_to_queue>
		poller->is_polling = false;
   2a98e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2a992:	e7b4      	b.n	2a8fe <signal_poll_event+0x1e>

0002a994 <clear_event_registrations>:
	while (num_events--) {
   2a994:	2314      	movs	r3, #20
{
   2a996:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a998:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2a99c:	2400      	movs	r4, #0
   2a99e:	2601      	movs	r6, #1
	while (num_events--) {
   2a9a0:	b901      	cbnz	r1, 2a9a4 <clear_event_registrations+0x10>
}
   2a9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2a9a4:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2a9a8:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2a9ac:	f003 031f 	and.w	r3, r3, #31
   2a9b0:	2b08      	cmp	r3, #8
   2a9b2:	f1a0 0714 	sub.w	r7, r0, #20
   2a9b6:	d80d      	bhi.n	2a9d4 <clear_event_registrations+0x40>
   2a9b8:	fa06 f303 	lsl.w	r3, r6, r3
   2a9bc:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2a9c0:	d008      	beq.n	2a9d4 <clear_event_registrations+0x40>
	return node->next != NULL;
   2a9c2:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2a9c6:	b12b      	cbz	r3, 2a9d4 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2a9c8:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2a9cc:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2a9ce:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2a9d0:	e940 4405 	strd	r4, r4, [r0, #-20]
   2a9d4:	f382 8811 	msr	BASEPRI, r2
   2a9d8:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2a9dc:	f04f 0320 	mov.w	r3, #32
   2a9e0:	f3ef 8211 	mrs	r2, BASEPRI
   2a9e4:	f383 8812 	msr	BASEPRI_MAX, r3
   2a9e8:	f3bf 8f6f 	isb	sy
   2a9ec:	3901      	subs	r1, #1
   2a9ee:	4638      	mov	r0, r7
   2a9f0:	e7d6      	b.n	2a9a0 <clear_event_registrations+0xc>

0002a9f2 <k_poll_event_init>:
{
   2a9f2:	b510      	push	{r4, lr}
	event->type = type;
   2a9f4:	04d2      	lsls	r2, r2, #19
   2a9f6:	0209      	lsls	r1, r1, #8
   2a9f8:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2a9fc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2aa00:	430a      	orrs	r2, r1
   2aa02:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2aa04:	2400      	movs	r4, #0
	event->type = type;
   2aa06:	430a      	orrs	r2, r1
	event->obj = obj;
   2aa08:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2aa0c:	6084      	str	r4, [r0, #8]
}
   2aa0e:	bd10      	pop	{r4, pc}

0002aa10 <z_handle_obj_poll_events>:
{
   2aa10:	4603      	mov	r3, r0
	return list->head == list;
   2aa12:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2aa14:	4283      	cmp	r3, r0
   2aa16:	d008      	beq.n	2aa2a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2aa18:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2aa1c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2aa1e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2aa20:	2300      	movs	r3, #0
	node->prev = NULL;
   2aa22:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2aa26:	f7ff bf5b 	b.w	2a8e0 <signal_poll_event>
}
   2aa2a:	4770      	bx	lr

0002aa2c <k_free>:
	if (ptr != NULL) {
   2aa2c:	b120      	cbz	r0, 2aa38 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2aa2e:	1f01      	subs	r1, r0, #4
   2aa30:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2aa34:	f7ff bab7 	b.w	29fa6 <k_heap_free>
}
   2aa38:	4770      	bx	lr

0002aa3a <memcmp>:
   2aa3a:	b510      	push	{r4, lr}
   2aa3c:	3901      	subs	r1, #1
   2aa3e:	4402      	add	r2, r0
   2aa40:	4290      	cmp	r0, r2
   2aa42:	d101      	bne.n	2aa48 <memcmp+0xe>
   2aa44:	2000      	movs	r0, #0
   2aa46:	e005      	b.n	2aa54 <memcmp+0x1a>
   2aa48:	7803      	ldrb	r3, [r0, #0]
   2aa4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2aa4e:	42a3      	cmp	r3, r4
   2aa50:	d001      	beq.n	2aa56 <memcmp+0x1c>
   2aa52:	1b18      	subs	r0, r3, r4
   2aa54:	bd10      	pop	{r4, pc}
   2aa56:	3001      	adds	r0, #1
   2aa58:	e7f2      	b.n	2aa40 <memcmp+0x6>

0002aa5a <memcpy>:
   2aa5a:	440a      	add	r2, r1
   2aa5c:	4291      	cmp	r1, r2
   2aa5e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2aa62:	d100      	bne.n	2aa66 <memcpy+0xc>
   2aa64:	4770      	bx	lr
   2aa66:	b510      	push	{r4, lr}
   2aa68:	f811 4b01 	ldrb.w	r4, [r1], #1
   2aa6c:	f803 4f01 	strb.w	r4, [r3, #1]!
   2aa70:	4291      	cmp	r1, r2
   2aa72:	d1f9      	bne.n	2aa68 <memcpy+0xe>
   2aa74:	bd10      	pop	{r4, pc}

0002aa76 <__memcpy_chk>:
   2aa76:	429a      	cmp	r2, r3
   2aa78:	b508      	push	{r3, lr}
   2aa7a:	d901      	bls.n	2aa80 <__memcpy_chk+0xa>
   2aa7c:	f7dc fd32 	bl	74e4 <__chk_fail>
   2aa80:	4281      	cmp	r1, r0
   2aa82:	d804      	bhi.n	2aa8e <__memcpy_chk+0x18>
   2aa84:	188b      	adds	r3, r1, r2
   2aa86:	4298      	cmp	r0, r3
   2aa88:	d3f8      	bcc.n	2aa7c <__memcpy_chk+0x6>
   2aa8a:	4281      	cmp	r1, r0
   2aa8c:	d102      	bne.n	2aa94 <__memcpy_chk+0x1e>
   2aa8e:	1883      	adds	r3, r0, r2
   2aa90:	4299      	cmp	r1, r3
   2aa92:	d3f3      	bcc.n	2aa7c <__memcpy_chk+0x6>
   2aa94:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2aa98:	f7ff bfdf 	b.w	2aa5a <memcpy>

0002aa9c <memset>:
   2aa9c:	4402      	add	r2, r0
   2aa9e:	4603      	mov	r3, r0
   2aaa0:	4293      	cmp	r3, r2
   2aaa2:	d100      	bne.n	2aaa6 <memset+0xa>
   2aaa4:	4770      	bx	lr
   2aaa6:	f803 1b01 	strb.w	r1, [r3], #1
   2aaaa:	e7f9      	b.n	2aaa0 <memset+0x4>

0002aaac <__cvt>:
   2aaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2aab0:	b088      	sub	sp, #32
   2aab2:	2b00      	cmp	r3, #0
   2aab4:	461f      	mov	r7, r3
   2aab6:	4614      	mov	r4, r2
   2aab8:	bfb8      	it	lt
   2aaba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2aabe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2aac0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2aac2:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2aac6:	bfb6      	itet	lt
   2aac8:	461f      	movlt	r7, r3
   2aaca:	2300      	movge	r3, #0
   2aacc:	232d      	movlt	r3, #45	; 0x2d
   2aace:	7013      	strb	r3, [r2, #0]
   2aad0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2aad2:	f023 0820 	bic.w	r8, r3, #32
   2aad6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2aada:	d005      	beq.n	2aae8 <__cvt+0x3c>
   2aadc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   2aae0:	d100      	bne.n	2aae4 <__cvt+0x38>
   2aae2:	3501      	adds	r5, #1
   2aae4:	2302      	movs	r3, #2
   2aae6:	e000      	b.n	2aaea <__cvt+0x3e>
   2aae8:	2303      	movs	r3, #3
   2aaea:	aa07      	add	r2, sp, #28
   2aaec:	9204      	str	r2, [sp, #16]
   2aaee:	aa06      	add	r2, sp, #24
   2aaf0:	e9cd a202 	strd	sl, r2, [sp, #8]
   2aaf4:	e9cd 3500 	strd	r3, r5, [sp]
   2aaf8:	4622      	mov	r2, r4
   2aafa:	463b      	mov	r3, r7
   2aafc:	f7d8 fd7c 	bl	35f8 <_dtoa_r>
   2ab00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2ab04:	4606      	mov	r6, r0
   2ab06:	d102      	bne.n	2ab0e <__cvt+0x62>
   2ab08:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2ab0a:	07db      	lsls	r3, r3, #31
   2ab0c:	d522      	bpl.n	2ab54 <__cvt+0xa8>
   2ab0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2ab12:	eb06 0905 	add.w	r9, r6, r5
   2ab16:	d110      	bne.n	2ab3a <__cvt+0x8e>
   2ab18:	7833      	ldrb	r3, [r6, #0]
   2ab1a:	2b30      	cmp	r3, #48	; 0x30
   2ab1c:	d10a      	bne.n	2ab34 <__cvt+0x88>
   2ab1e:	2200      	movs	r2, #0
   2ab20:	2300      	movs	r3, #0
   2ab22:	4620      	mov	r0, r4
   2ab24:	4639      	mov	r1, r7
   2ab26:	f7d5 ff99 	bl	a5c <__aeabi_dcmpeq>
   2ab2a:	b918      	cbnz	r0, 2ab34 <__cvt+0x88>
   2ab2c:	f1c5 0501 	rsb	r5, r5, #1
   2ab30:	f8ca 5000 	str.w	r5, [sl]
   2ab34:	f8da 3000 	ldr.w	r3, [sl]
   2ab38:	4499      	add	r9, r3
   2ab3a:	2200      	movs	r2, #0
   2ab3c:	2300      	movs	r3, #0
   2ab3e:	4620      	mov	r0, r4
   2ab40:	4639      	mov	r1, r7
   2ab42:	f7d5 ff8b 	bl	a5c <__aeabi_dcmpeq>
   2ab46:	b108      	cbz	r0, 2ab4c <__cvt+0xa0>
   2ab48:	f8cd 901c 	str.w	r9, [sp, #28]
   2ab4c:	2230      	movs	r2, #48	; 0x30
   2ab4e:	9b07      	ldr	r3, [sp, #28]
   2ab50:	454b      	cmp	r3, r9
   2ab52:	d307      	bcc.n	2ab64 <__cvt+0xb8>
   2ab54:	9b07      	ldr	r3, [sp, #28]
   2ab56:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2ab58:	1b9b      	subs	r3, r3, r6
   2ab5a:	4630      	mov	r0, r6
   2ab5c:	6013      	str	r3, [r2, #0]
   2ab5e:	b008      	add	sp, #32
   2ab60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ab64:	1c59      	adds	r1, r3, #1
   2ab66:	9107      	str	r1, [sp, #28]
   2ab68:	701a      	strb	r2, [r3, #0]
   2ab6a:	e7f0      	b.n	2ab4e <__cvt+0xa2>

0002ab6c <__exponent>:
   2ab6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ab6e:	4603      	mov	r3, r0
   2ab70:	2900      	cmp	r1, #0
   2ab72:	bfb8      	it	lt
   2ab74:	4249      	neglt	r1, r1
   2ab76:	f803 2b02 	strb.w	r2, [r3], #2
   2ab7a:	bfb4      	ite	lt
   2ab7c:	222d      	movlt	r2, #45	; 0x2d
   2ab7e:	222b      	movge	r2, #43	; 0x2b
   2ab80:	2909      	cmp	r1, #9
   2ab82:	7042      	strb	r2, [r0, #1]
   2ab84:	dd2a      	ble.n	2abdc <__exponent+0x70>
   2ab86:	f10d 0407 	add.w	r4, sp, #7
   2ab8a:	46a4      	mov	ip, r4
   2ab8c:	270a      	movs	r7, #10
   2ab8e:	46a6      	mov	lr, r4
   2ab90:	460a      	mov	r2, r1
   2ab92:	fb91 f6f7 	sdiv	r6, r1, r7
   2ab96:	fb07 1516 	mls	r5, r7, r6, r1
   2ab9a:	3530      	adds	r5, #48	; 0x30
   2ab9c:	2a63      	cmp	r2, #99	; 0x63
   2ab9e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2aba2:	f80e 5c01 	strb.w	r5, [lr, #-1]
   2aba6:	4631      	mov	r1, r6
   2aba8:	dcf1      	bgt.n	2ab8e <__exponent+0x22>
   2abaa:	3130      	adds	r1, #48	; 0x30
   2abac:	f1ae 0502 	sub.w	r5, lr, #2
   2abb0:	f804 1c01 	strb.w	r1, [r4, #-1]
   2abb4:	1c44      	adds	r4, r0, #1
   2abb6:	4629      	mov	r1, r5
   2abb8:	4561      	cmp	r1, ip
   2abba:	d30a      	bcc.n	2abd2 <__exponent+0x66>
   2abbc:	f10d 0209 	add.w	r2, sp, #9
   2abc0:	eba2 020e 	sub.w	r2, r2, lr
   2abc4:	4565      	cmp	r5, ip
   2abc6:	bf88      	it	hi
   2abc8:	2200      	movhi	r2, #0
   2abca:	4413      	add	r3, r2
   2abcc:	1a18      	subs	r0, r3, r0
   2abce:	b003      	add	sp, #12
   2abd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2abd2:	f811 2b01 	ldrb.w	r2, [r1], #1
   2abd6:	f804 2f01 	strb.w	r2, [r4, #1]!
   2abda:	e7ed      	b.n	2abb8 <__exponent+0x4c>
   2abdc:	2330      	movs	r3, #48	; 0x30
   2abde:	3130      	adds	r1, #48	; 0x30
   2abe0:	7083      	strb	r3, [r0, #2]
   2abe2:	70c1      	strb	r1, [r0, #3]
   2abe4:	1d03      	adds	r3, r0, #4
   2abe6:	e7f1      	b.n	2abcc <__exponent+0x60>

0002abe8 <_printf_common>:
   2abe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2abec:	4616      	mov	r6, r2
   2abee:	4699      	mov	r9, r3
   2abf0:	688a      	ldr	r2, [r1, #8]
   2abf2:	690b      	ldr	r3, [r1, #16]
   2abf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2abf8:	4293      	cmp	r3, r2
   2abfa:	bfb8      	it	lt
   2abfc:	4613      	movlt	r3, r2
   2abfe:	6033      	str	r3, [r6, #0]
   2ac00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2ac04:	4607      	mov	r7, r0
   2ac06:	460c      	mov	r4, r1
   2ac08:	b10a      	cbz	r2, 2ac0e <_printf_common+0x26>
   2ac0a:	3301      	adds	r3, #1
   2ac0c:	6033      	str	r3, [r6, #0]
   2ac0e:	6823      	ldr	r3, [r4, #0]
   2ac10:	0699      	lsls	r1, r3, #26
   2ac12:	bf42      	ittt	mi
   2ac14:	6833      	ldrmi	r3, [r6, #0]
   2ac16:	3302      	addmi	r3, #2
   2ac18:	6033      	strmi	r3, [r6, #0]
   2ac1a:	6825      	ldr	r5, [r4, #0]
   2ac1c:	f015 0506 	ands.w	r5, r5, #6
   2ac20:	d106      	bne.n	2ac30 <_printf_common+0x48>
   2ac22:	f104 0a19 	add.w	sl, r4, #25
   2ac26:	68e3      	ldr	r3, [r4, #12]
   2ac28:	6832      	ldr	r2, [r6, #0]
   2ac2a:	1a9b      	subs	r3, r3, r2
   2ac2c:	42ab      	cmp	r3, r5
   2ac2e:	dc26      	bgt.n	2ac7e <_printf_common+0x96>
   2ac30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2ac34:	1e13      	subs	r3, r2, #0
   2ac36:	6822      	ldr	r2, [r4, #0]
   2ac38:	bf18      	it	ne
   2ac3a:	2301      	movne	r3, #1
   2ac3c:	0692      	lsls	r2, r2, #26
   2ac3e:	d42b      	bmi.n	2ac98 <_printf_common+0xb0>
   2ac40:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ac44:	4649      	mov	r1, r9
   2ac46:	4638      	mov	r0, r7
   2ac48:	47c0      	blx	r8
   2ac4a:	3001      	adds	r0, #1
   2ac4c:	d01e      	beq.n	2ac8c <_printf_common+0xa4>
   2ac4e:	6823      	ldr	r3, [r4, #0]
   2ac50:	68e5      	ldr	r5, [r4, #12]
   2ac52:	6832      	ldr	r2, [r6, #0]
   2ac54:	f003 0306 	and.w	r3, r3, #6
   2ac58:	2b04      	cmp	r3, #4
   2ac5a:	bf08      	it	eq
   2ac5c:	1aad      	subeq	r5, r5, r2
   2ac5e:	68a3      	ldr	r3, [r4, #8]
   2ac60:	6922      	ldr	r2, [r4, #16]
   2ac62:	bf0c      	ite	eq
   2ac64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2ac68:	2500      	movne	r5, #0
   2ac6a:	4293      	cmp	r3, r2
   2ac6c:	bfc4      	itt	gt
   2ac6e:	1a9b      	subgt	r3, r3, r2
   2ac70:	18ed      	addgt	r5, r5, r3
   2ac72:	2600      	movs	r6, #0
   2ac74:	341a      	adds	r4, #26
   2ac76:	42b5      	cmp	r5, r6
   2ac78:	d11a      	bne.n	2acb0 <_printf_common+0xc8>
   2ac7a:	2000      	movs	r0, #0
   2ac7c:	e008      	b.n	2ac90 <_printf_common+0xa8>
   2ac7e:	2301      	movs	r3, #1
   2ac80:	4652      	mov	r2, sl
   2ac82:	4649      	mov	r1, r9
   2ac84:	4638      	mov	r0, r7
   2ac86:	47c0      	blx	r8
   2ac88:	3001      	adds	r0, #1
   2ac8a:	d103      	bne.n	2ac94 <_printf_common+0xac>
   2ac8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ac90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ac94:	3501      	adds	r5, #1
   2ac96:	e7c6      	b.n	2ac26 <_printf_common+0x3e>
   2ac98:	18e1      	adds	r1, r4, r3
   2ac9a:	1c5a      	adds	r2, r3, #1
   2ac9c:	2030      	movs	r0, #48	; 0x30
   2ac9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2aca2:	4422      	add	r2, r4
   2aca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2aca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2acac:	3302      	adds	r3, #2
   2acae:	e7c7      	b.n	2ac40 <_printf_common+0x58>
   2acb0:	2301      	movs	r3, #1
   2acb2:	4622      	mov	r2, r4
   2acb4:	4649      	mov	r1, r9
   2acb6:	4638      	mov	r0, r7
   2acb8:	47c0      	blx	r8
   2acba:	3001      	adds	r0, #1
   2acbc:	d0e6      	beq.n	2ac8c <_printf_common+0xa4>
   2acbe:	3601      	adds	r6, #1
   2acc0:	e7d9      	b.n	2ac76 <_printf_common+0x8e>

0002acc2 <__sprintf_chk>:
   2acc2:	b408      	push	{r3}
   2acc4:	b517      	push	{r0, r1, r2, r4, lr}
   2acc6:	ab05      	add	r3, sp, #20
   2acc8:	1e14      	subs	r4, r2, #0
   2acca:	f853 1b04 	ldr.w	r1, [r3], #4
   2acce:	9301      	str	r3, [sp, #4]
   2acd0:	da07      	bge.n	2ace2 <__sprintf_chk+0x20>
   2acd2:	461a      	mov	r2, r3
   2acd4:	f7f9 f80a 	bl	23cec <vsiprintf>
   2acd8:	b003      	add	sp, #12
   2acda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2acde:	b001      	add	sp, #4
   2ace0:	4770      	bx	lr
   2ace2:	460a      	mov	r2, r1
   2ace4:	4621      	mov	r1, r4
   2ace6:	f7f8 ffdd 	bl	23ca4 <vsniprintf>
   2acea:	2800      	cmp	r0, #0
   2acec:	dbf4      	blt.n	2acd8 <__sprintf_chk+0x16>
   2acee:	42a0      	cmp	r0, r4
   2acf0:	d3f2      	bcc.n	2acd8 <__sprintf_chk+0x16>
   2acf2:	f7dc fbf7 	bl	74e4 <__chk_fail>

0002acf6 <strcpy>:
   2acf6:	4603      	mov	r3, r0
   2acf8:	f811 2b01 	ldrb.w	r2, [r1], #1
   2acfc:	f803 2b01 	strb.w	r2, [r3], #1
   2ad00:	2a00      	cmp	r2, #0
   2ad02:	d1f9      	bne.n	2acf8 <strcpy+0x2>
   2ad04:	4770      	bx	lr

0002ad06 <strnlen>:
   2ad06:	b510      	push	{r4, lr}
   2ad08:	4602      	mov	r2, r0
   2ad0a:	4401      	add	r1, r0
   2ad0c:	428a      	cmp	r2, r1
   2ad0e:	4613      	mov	r3, r2
   2ad10:	d003      	beq.n	2ad1a <strnlen+0x14>
   2ad12:	781c      	ldrb	r4, [r3, #0]
   2ad14:	3201      	adds	r2, #1
   2ad16:	2c00      	cmp	r4, #0
   2ad18:	d1f8      	bne.n	2ad0c <strnlen+0x6>
   2ad1a:	1a18      	subs	r0, r3, r0
   2ad1c:	bd10      	pop	{r4, pc}

0002ad1e <_vsniprintf_r>:
   2ad1e:	b530      	push	{r4, r5, lr}
   2ad20:	4614      	mov	r4, r2
   2ad22:	2c00      	cmp	r4, #0
   2ad24:	b09b      	sub	sp, #108	; 0x6c
   2ad26:	4605      	mov	r5, r0
   2ad28:	461a      	mov	r2, r3
   2ad2a:	da05      	bge.n	2ad38 <_vsniprintf_r+0x1a>
   2ad2c:	238b      	movs	r3, #139	; 0x8b
   2ad2e:	6003      	str	r3, [r0, #0]
   2ad30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ad34:	b01b      	add	sp, #108	; 0x6c
   2ad36:	bd30      	pop	{r4, r5, pc}
   2ad38:	f44f 7302 	mov.w	r3, #520	; 0x208
   2ad3c:	f8ad 300c 	strh.w	r3, [sp, #12]
   2ad40:	bf14      	ite	ne
   2ad42:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2ad46:	4623      	moveq	r3, r4
   2ad48:	9302      	str	r3, [sp, #8]
   2ad4a:	9305      	str	r3, [sp, #20]
   2ad4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2ad50:	9100      	str	r1, [sp, #0]
   2ad52:	9104      	str	r1, [sp, #16]
   2ad54:	f8ad 300e 	strh.w	r3, [sp, #14]
   2ad58:	4669      	mov	r1, sp
   2ad5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2ad5c:	f7f9 faf4 	bl	24348 <_svfiprintf_r>
   2ad60:	1c43      	adds	r3, r0, #1
   2ad62:	bfbc      	itt	lt
   2ad64:	238b      	movlt	r3, #139	; 0x8b
   2ad66:	602b      	strlt	r3, [r5, #0]
   2ad68:	2c00      	cmp	r4, #0
   2ad6a:	d0e3      	beq.n	2ad34 <_vsniprintf_r+0x16>
   2ad6c:	9b00      	ldr	r3, [sp, #0]
   2ad6e:	2200      	movs	r2, #0
   2ad70:	701a      	strb	r2, [r3, #0]
   2ad72:	e7df      	b.n	2ad34 <_vsniprintf_r+0x16>

0002ad74 <quorem>:
   2ad74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad78:	6903      	ldr	r3, [r0, #16]
   2ad7a:	690c      	ldr	r4, [r1, #16]
   2ad7c:	42a3      	cmp	r3, r4
   2ad7e:	4607      	mov	r7, r0
   2ad80:	db7d      	blt.n	2ae7e <quorem+0x10a>
   2ad82:	3c01      	subs	r4, #1
   2ad84:	f101 0814 	add.w	r8, r1, #20
   2ad88:	f100 0514 	add.w	r5, r0, #20
   2ad8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2ad90:	9301      	str	r3, [sp, #4]
   2ad92:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2ad96:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2ad9a:	3301      	adds	r3, #1
   2ad9c:	429a      	cmp	r2, r3
   2ad9e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   2ada2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2ada6:	fbb2 f6f3 	udiv	r6, r2, r3
   2adaa:	d32e      	bcc.n	2ae0a <quorem+0x96>
   2adac:	f04f 0e00 	mov.w	lr, #0
   2adb0:	4640      	mov	r0, r8
   2adb2:	46ac      	mov	ip, r5
   2adb4:	46f2      	mov	sl, lr
   2adb6:	f850 2b04 	ldr.w	r2, [r0], #4
   2adba:	b293      	uxth	r3, r2
   2adbc:	fb06 e303 	mla	r3, r6, r3, lr
   2adc0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   2adc4:	0c12      	lsrs	r2, r2, #16
   2adc6:	b29b      	uxth	r3, r3
   2adc8:	fb06 e202 	mla	r2, r6, r2, lr
   2adcc:	ebaa 0303 	sub.w	r3, sl, r3
   2add0:	f8dc a000 	ldr.w	sl, [ip]
   2add4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2add8:	b292      	uxth	r2, r2
   2adda:	fa13 f38a 	uxtah	r3, r3, sl
   2adde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   2ade2:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2ade6:	b29b      	uxth	r3, r3
   2ade8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2adec:	4581      	cmp	r9, r0
   2adee:	f84c 3b04 	str.w	r3, [ip], #4
   2adf2:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2adf6:	d2de      	bcs.n	2adb6 <quorem+0x42>
   2adf8:	f855 300b 	ldr.w	r3, [r5, fp]
   2adfc:	b92b      	cbnz	r3, 2ae0a <quorem+0x96>
   2adfe:	9b01      	ldr	r3, [sp, #4]
   2ae00:	3b04      	subs	r3, #4
   2ae02:	429d      	cmp	r5, r3
   2ae04:	461a      	mov	r2, r3
   2ae06:	d32e      	bcc.n	2ae66 <quorem+0xf2>
   2ae08:	613c      	str	r4, [r7, #16]
   2ae0a:	4638      	mov	r0, r7
   2ae0c:	f000 f886 	bl	2af1c <__mcmp>
   2ae10:	2800      	cmp	r0, #0
   2ae12:	db24      	blt.n	2ae5e <quorem+0xea>
   2ae14:	3601      	adds	r6, #1
   2ae16:	4628      	mov	r0, r5
   2ae18:	f04f 0c00 	mov.w	ip, #0
   2ae1c:	f858 2b04 	ldr.w	r2, [r8], #4
   2ae20:	f8d0 e000 	ldr.w	lr, [r0]
   2ae24:	b293      	uxth	r3, r2
   2ae26:	ebac 0303 	sub.w	r3, ip, r3
   2ae2a:	0c12      	lsrs	r2, r2, #16
   2ae2c:	fa13 f38e 	uxtah	r3, r3, lr
   2ae30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2ae34:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2ae38:	b29b      	uxth	r3, r3
   2ae3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2ae3e:	45c1      	cmp	r9, r8
   2ae40:	f840 3b04 	str.w	r3, [r0], #4
   2ae44:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2ae48:	d2e8      	bcs.n	2ae1c <quorem+0xa8>
   2ae4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2ae4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2ae52:	b922      	cbnz	r2, 2ae5e <quorem+0xea>
   2ae54:	3b04      	subs	r3, #4
   2ae56:	429d      	cmp	r5, r3
   2ae58:	461a      	mov	r2, r3
   2ae5a:	d30a      	bcc.n	2ae72 <quorem+0xfe>
   2ae5c:	613c      	str	r4, [r7, #16]
   2ae5e:	4630      	mov	r0, r6
   2ae60:	b003      	add	sp, #12
   2ae62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ae66:	6812      	ldr	r2, [r2, #0]
   2ae68:	3b04      	subs	r3, #4
   2ae6a:	2a00      	cmp	r2, #0
   2ae6c:	d1cc      	bne.n	2ae08 <quorem+0x94>
   2ae6e:	3c01      	subs	r4, #1
   2ae70:	e7c7      	b.n	2ae02 <quorem+0x8e>
   2ae72:	6812      	ldr	r2, [r2, #0]
   2ae74:	3b04      	subs	r3, #4
   2ae76:	2a00      	cmp	r2, #0
   2ae78:	d1f0      	bne.n	2ae5c <quorem+0xe8>
   2ae7a:	3c01      	subs	r4, #1
   2ae7c:	e7eb      	b.n	2ae56 <quorem+0xe2>
   2ae7e:	2000      	movs	r0, #0
   2ae80:	e7ee      	b.n	2ae60 <quorem+0xec>

0002ae82 <__hi0bits>:
   2ae82:	0c02      	lsrs	r2, r0, #16
   2ae84:	0412      	lsls	r2, r2, #16
   2ae86:	4603      	mov	r3, r0
   2ae88:	b9ca      	cbnz	r2, 2aebe <__hi0bits+0x3c>
   2ae8a:	0403      	lsls	r3, r0, #16
   2ae8c:	2010      	movs	r0, #16
   2ae8e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2ae92:	bf04      	itt	eq
   2ae94:	021b      	lsleq	r3, r3, #8
   2ae96:	3008      	addeq	r0, #8
   2ae98:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2ae9c:	bf04      	itt	eq
   2ae9e:	011b      	lsleq	r3, r3, #4
   2aea0:	3004      	addeq	r0, #4
   2aea2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2aea6:	bf04      	itt	eq
   2aea8:	009b      	lsleq	r3, r3, #2
   2aeaa:	3002      	addeq	r0, #2
   2aeac:	2b00      	cmp	r3, #0
   2aeae:	db05      	blt.n	2aebc <__hi0bits+0x3a>
   2aeb0:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2aeb4:	f100 0001 	add.w	r0, r0, #1
   2aeb8:	bf08      	it	eq
   2aeba:	2020      	moveq	r0, #32
   2aebc:	4770      	bx	lr
   2aebe:	2000      	movs	r0, #0
   2aec0:	e7e5      	b.n	2ae8e <__hi0bits+0xc>

0002aec2 <__lo0bits>:
   2aec2:	6803      	ldr	r3, [r0, #0]
   2aec4:	4602      	mov	r2, r0
   2aec6:	f013 0007 	ands.w	r0, r3, #7
   2aeca:	d00b      	beq.n	2aee4 <__lo0bits+0x22>
   2aecc:	07d9      	lsls	r1, r3, #31
   2aece:	d421      	bmi.n	2af14 <__lo0bits+0x52>
   2aed0:	0798      	lsls	r0, r3, #30
   2aed2:	bf49      	itett	mi
   2aed4:	085b      	lsrmi	r3, r3, #1
   2aed6:	089b      	lsrpl	r3, r3, #2
   2aed8:	2001      	movmi	r0, #1
   2aeda:	6013      	strmi	r3, [r2, #0]
   2aedc:	bf5c      	itt	pl
   2aede:	6013      	strpl	r3, [r2, #0]
   2aee0:	2002      	movpl	r0, #2
   2aee2:	4770      	bx	lr
   2aee4:	b299      	uxth	r1, r3
   2aee6:	b909      	cbnz	r1, 2aeec <__lo0bits+0x2a>
   2aee8:	0c1b      	lsrs	r3, r3, #16
   2aeea:	2010      	movs	r0, #16
   2aeec:	b2d9      	uxtb	r1, r3
   2aeee:	b909      	cbnz	r1, 2aef4 <__lo0bits+0x32>
   2aef0:	3008      	adds	r0, #8
   2aef2:	0a1b      	lsrs	r3, r3, #8
   2aef4:	0719      	lsls	r1, r3, #28
   2aef6:	bf04      	itt	eq
   2aef8:	091b      	lsreq	r3, r3, #4
   2aefa:	3004      	addeq	r0, #4
   2aefc:	0799      	lsls	r1, r3, #30
   2aefe:	bf04      	itt	eq
   2af00:	089b      	lsreq	r3, r3, #2
   2af02:	3002      	addeq	r0, #2
   2af04:	07d9      	lsls	r1, r3, #31
   2af06:	d403      	bmi.n	2af10 <__lo0bits+0x4e>
   2af08:	085b      	lsrs	r3, r3, #1
   2af0a:	f100 0001 	add.w	r0, r0, #1
   2af0e:	d003      	beq.n	2af18 <__lo0bits+0x56>
   2af10:	6013      	str	r3, [r2, #0]
   2af12:	4770      	bx	lr
   2af14:	2000      	movs	r0, #0
   2af16:	4770      	bx	lr
   2af18:	2020      	movs	r0, #32
   2af1a:	4770      	bx	lr

0002af1c <__mcmp>:
   2af1c:	690a      	ldr	r2, [r1, #16]
   2af1e:	4603      	mov	r3, r0
   2af20:	6900      	ldr	r0, [r0, #16]
   2af22:	1a80      	subs	r0, r0, r2
   2af24:	b530      	push	{r4, r5, lr}
   2af26:	d10d      	bne.n	2af44 <__mcmp+0x28>
   2af28:	3314      	adds	r3, #20
   2af2a:	3114      	adds	r1, #20
   2af2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2af30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2af34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2af38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2af3c:	4295      	cmp	r5, r2
   2af3e:	d002      	beq.n	2af46 <__mcmp+0x2a>
   2af40:	d304      	bcc.n	2af4c <__mcmp+0x30>
   2af42:	2001      	movs	r0, #1
   2af44:	bd30      	pop	{r4, r5, pc}
   2af46:	42a3      	cmp	r3, r4
   2af48:	d3f4      	bcc.n	2af34 <__mcmp+0x18>
   2af4a:	e7fb      	b.n	2af44 <__mcmp+0x28>
   2af4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2af50:	e7f8      	b.n	2af44 <__mcmp+0x28>

0002af52 <_calloc_r>:
   2af52:	b538      	push	{r3, r4, r5, lr}
   2af54:	fb02 f501 	mul.w	r5, r2, r1
   2af58:	4629      	mov	r1, r5
   2af5a:	f7f8 fae9 	bl	23530 <_malloc_r>
   2af5e:	4604      	mov	r4, r0
   2af60:	b118      	cbz	r0, 2af6a <_calloc_r+0x18>
   2af62:	462a      	mov	r2, r5
   2af64:	2100      	movs	r1, #0
   2af66:	f7ff fd99 	bl	2aa9c <memset>
   2af6a:	4620      	mov	r0, r4
   2af6c:	bd38      	pop	{r3, r4, r5, pc}

0002af6e <__ssputs_r>:
   2af6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2af72:	688e      	ldr	r6, [r1, #8]
   2af74:	429e      	cmp	r6, r3
   2af76:	4682      	mov	sl, r0
   2af78:	460c      	mov	r4, r1
   2af7a:	4690      	mov	r8, r2
   2af7c:	461f      	mov	r7, r3
   2af7e:	d838      	bhi.n	2aff2 <__ssputs_r+0x84>
   2af80:	898a      	ldrh	r2, [r1, #12]
   2af82:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2af86:	d032      	beq.n	2afee <__ssputs_r+0x80>
   2af88:	6825      	ldr	r5, [r4, #0]
   2af8a:	6909      	ldr	r1, [r1, #16]
   2af8c:	eba5 0901 	sub.w	r9, r5, r1
   2af90:	6965      	ldr	r5, [r4, #20]
   2af92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2af96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2af9a:	3301      	adds	r3, #1
   2af9c:	444b      	add	r3, r9
   2af9e:	106d      	asrs	r5, r5, #1
   2afa0:	429d      	cmp	r5, r3
   2afa2:	bf38      	it	cc
   2afa4:	461d      	movcc	r5, r3
   2afa6:	0553      	lsls	r3, r2, #21
   2afa8:	d531      	bpl.n	2b00e <__ssputs_r+0xa0>
   2afaa:	4629      	mov	r1, r5
   2afac:	f7f8 fac0 	bl	23530 <_malloc_r>
   2afb0:	4606      	mov	r6, r0
   2afb2:	b950      	cbnz	r0, 2afca <__ssputs_r+0x5c>
   2afb4:	230c      	movs	r3, #12
   2afb6:	f8ca 3000 	str.w	r3, [sl]
   2afba:	89a3      	ldrh	r3, [r4, #12]
   2afbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2afc0:	81a3      	strh	r3, [r4, #12]
   2afc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2afc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2afca:	6921      	ldr	r1, [r4, #16]
   2afcc:	464a      	mov	r2, r9
   2afce:	f7ff fd44 	bl	2aa5a <memcpy>
   2afd2:	89a3      	ldrh	r3, [r4, #12]
   2afd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2afd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2afdc:	81a3      	strh	r3, [r4, #12]
   2afde:	6126      	str	r6, [r4, #16]
   2afe0:	6165      	str	r5, [r4, #20]
   2afe2:	444e      	add	r6, r9
   2afe4:	eba5 0509 	sub.w	r5, r5, r9
   2afe8:	6026      	str	r6, [r4, #0]
   2afea:	60a5      	str	r5, [r4, #8]
   2afec:	463e      	mov	r6, r7
   2afee:	42be      	cmp	r6, r7
   2aff0:	d900      	bls.n	2aff4 <__ssputs_r+0x86>
   2aff2:	463e      	mov	r6, r7
   2aff4:	6820      	ldr	r0, [r4, #0]
   2aff6:	4632      	mov	r2, r6
   2aff8:	4641      	mov	r1, r8
   2affa:	f000 f825 	bl	2b048 <memmove>
   2affe:	68a3      	ldr	r3, [r4, #8]
   2b000:	1b9b      	subs	r3, r3, r6
   2b002:	60a3      	str	r3, [r4, #8]
   2b004:	6823      	ldr	r3, [r4, #0]
   2b006:	4433      	add	r3, r6
   2b008:	6023      	str	r3, [r4, #0]
   2b00a:	2000      	movs	r0, #0
   2b00c:	e7db      	b.n	2afc6 <__ssputs_r+0x58>
   2b00e:	462a      	mov	r2, r5
   2b010:	f000 f834 	bl	2b07c <_realloc_r>
   2b014:	4606      	mov	r6, r0
   2b016:	2800      	cmp	r0, #0
   2b018:	d1e1      	bne.n	2afde <__ssputs_r+0x70>
   2b01a:	6921      	ldr	r1, [r4, #16]
   2b01c:	4650      	mov	r0, sl
   2b01e:	f7f8 fa3d 	bl	2349c <_free_r>
   2b022:	e7c7      	b.n	2afb4 <__ssputs_r+0x46>

0002b024 <__ascii_mbtowc>:
   2b024:	b082      	sub	sp, #8
   2b026:	b901      	cbnz	r1, 2b02a <__ascii_mbtowc+0x6>
   2b028:	a901      	add	r1, sp, #4
   2b02a:	b142      	cbz	r2, 2b03e <__ascii_mbtowc+0x1a>
   2b02c:	b14b      	cbz	r3, 2b042 <__ascii_mbtowc+0x1e>
   2b02e:	7813      	ldrb	r3, [r2, #0]
   2b030:	600b      	str	r3, [r1, #0]
   2b032:	7812      	ldrb	r2, [r2, #0]
   2b034:	1e10      	subs	r0, r2, #0
   2b036:	bf18      	it	ne
   2b038:	2001      	movne	r0, #1
   2b03a:	b002      	add	sp, #8
   2b03c:	4770      	bx	lr
   2b03e:	4610      	mov	r0, r2
   2b040:	e7fb      	b.n	2b03a <__ascii_mbtowc+0x16>
   2b042:	f06f 0001 	mvn.w	r0, #1
   2b046:	e7f8      	b.n	2b03a <__ascii_mbtowc+0x16>

0002b048 <memmove>:
   2b048:	4288      	cmp	r0, r1
   2b04a:	b510      	push	{r4, lr}
   2b04c:	eb01 0402 	add.w	r4, r1, r2
   2b050:	d902      	bls.n	2b058 <memmove+0x10>
   2b052:	4284      	cmp	r4, r0
   2b054:	4623      	mov	r3, r4
   2b056:	d807      	bhi.n	2b068 <memmove+0x20>
   2b058:	1e43      	subs	r3, r0, #1
   2b05a:	42a1      	cmp	r1, r4
   2b05c:	d008      	beq.n	2b070 <memmove+0x28>
   2b05e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2b062:	f803 2f01 	strb.w	r2, [r3, #1]!
   2b066:	e7f8      	b.n	2b05a <memmove+0x12>
   2b068:	4402      	add	r2, r0
   2b06a:	4601      	mov	r1, r0
   2b06c:	428a      	cmp	r2, r1
   2b06e:	d100      	bne.n	2b072 <memmove+0x2a>
   2b070:	bd10      	pop	{r4, pc}
   2b072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2b076:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2b07a:	e7f7      	b.n	2b06c <memmove+0x24>

0002b07c <_realloc_r>:
   2b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b07e:	4607      	mov	r7, r0
   2b080:	4614      	mov	r4, r2
   2b082:	460e      	mov	r6, r1
   2b084:	b921      	cbnz	r1, 2b090 <_realloc_r+0x14>
   2b086:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2b08a:	4611      	mov	r1, r2
   2b08c:	f7f8 ba50 	b.w	23530 <_malloc_r>
   2b090:	b922      	cbnz	r2, 2b09c <_realloc_r+0x20>
   2b092:	f7f8 fa03 	bl	2349c <_free_r>
   2b096:	4625      	mov	r5, r4
   2b098:	4628      	mov	r0, r5
   2b09a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2b09c:	f000 f8a9 	bl	2b1f2 <_malloc_usable_size_r>
   2b0a0:	42a0      	cmp	r0, r4
   2b0a2:	d20f      	bcs.n	2b0c4 <_realloc_r+0x48>
   2b0a4:	4621      	mov	r1, r4
   2b0a6:	4638      	mov	r0, r7
   2b0a8:	f7f8 fa42 	bl	23530 <_malloc_r>
   2b0ac:	4605      	mov	r5, r0
   2b0ae:	2800      	cmp	r0, #0
   2b0b0:	d0f2      	beq.n	2b098 <_realloc_r+0x1c>
   2b0b2:	4631      	mov	r1, r6
   2b0b4:	4622      	mov	r2, r4
   2b0b6:	f7ff fcd0 	bl	2aa5a <memcpy>
   2b0ba:	4631      	mov	r1, r6
   2b0bc:	4638      	mov	r0, r7
   2b0be:	f7f8 f9ed 	bl	2349c <_free_r>
   2b0c2:	e7e9      	b.n	2b098 <_realloc_r+0x1c>
   2b0c4:	4635      	mov	r5, r6
   2b0c6:	e7e7      	b.n	2b098 <_realloc_r+0x1c>

0002b0c8 <__sfputc_r>:
   2b0c8:	6893      	ldr	r3, [r2, #8]
   2b0ca:	3b01      	subs	r3, #1
   2b0cc:	2b00      	cmp	r3, #0
   2b0ce:	b410      	push	{r4}
   2b0d0:	6093      	str	r3, [r2, #8]
   2b0d2:	da07      	bge.n	2b0e4 <__sfputc_r+0x1c>
   2b0d4:	6994      	ldr	r4, [r2, #24]
   2b0d6:	42a3      	cmp	r3, r4
   2b0d8:	db01      	blt.n	2b0de <__sfputc_r+0x16>
   2b0da:	290a      	cmp	r1, #10
   2b0dc:	d102      	bne.n	2b0e4 <__sfputc_r+0x1c>
   2b0de:	bc10      	pop	{r4}
   2b0e0:	f7f9 bb92 	b.w	24808 <__swbuf_r>
   2b0e4:	6813      	ldr	r3, [r2, #0]
   2b0e6:	1c58      	adds	r0, r3, #1
   2b0e8:	6010      	str	r0, [r2, #0]
   2b0ea:	7019      	strb	r1, [r3, #0]
   2b0ec:	4608      	mov	r0, r1
   2b0ee:	bc10      	pop	{r4}
   2b0f0:	4770      	bx	lr

0002b0f2 <__sfputs_r>:
   2b0f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2b0f4:	4606      	mov	r6, r0
   2b0f6:	460f      	mov	r7, r1
   2b0f8:	4614      	mov	r4, r2
   2b0fa:	18d5      	adds	r5, r2, r3
   2b0fc:	42ac      	cmp	r4, r5
   2b0fe:	d101      	bne.n	2b104 <__sfputs_r+0x12>
   2b100:	2000      	movs	r0, #0
   2b102:	e007      	b.n	2b114 <__sfputs_r+0x22>
   2b104:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b108:	463a      	mov	r2, r7
   2b10a:	4630      	mov	r0, r6
   2b10c:	f7ff ffdc 	bl	2b0c8 <__sfputc_r>
   2b110:	1c43      	adds	r3, r0, #1
   2b112:	d1f3      	bne.n	2b0fc <__sfputs_r+0xa>
   2b114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b116 <__ascii_wctomb>:
   2b116:	4603      	mov	r3, r0
   2b118:	4608      	mov	r0, r1
   2b11a:	b141      	cbz	r1, 2b12e <__ascii_wctomb+0x18>
   2b11c:	2aff      	cmp	r2, #255	; 0xff
   2b11e:	d904      	bls.n	2b12a <__ascii_wctomb+0x14>
   2b120:	228a      	movs	r2, #138	; 0x8a
   2b122:	601a      	str	r2, [r3, #0]
   2b124:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b128:	4770      	bx	lr
   2b12a:	700a      	strb	r2, [r1, #0]
   2b12c:	2001      	movs	r0, #1
   2b12e:	4770      	bx	lr

0002b130 <abort>:
   2b130:	b508      	push	{r3, lr}
   2b132:	2006      	movs	r0, #6
   2b134:	f7f9 fde6 	bl	24d04 <raise>
   2b138:	2001      	movs	r0, #1
   2b13a:	f7dc f9b7 	bl	74ac <_exit>

0002b13e <__sfmoreglue>:
   2b13e:	b570      	push	{r4, r5, r6, lr}
   2b140:	2268      	movs	r2, #104	; 0x68
   2b142:	1e4d      	subs	r5, r1, #1
   2b144:	4355      	muls	r5, r2
   2b146:	460e      	mov	r6, r1
   2b148:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2b14c:	f7f8 f9f0 	bl	23530 <_malloc_r>
   2b150:	4604      	mov	r4, r0
   2b152:	b140      	cbz	r0, 2b166 <__sfmoreglue+0x28>
   2b154:	2100      	movs	r1, #0
   2b156:	e9c0 1600 	strd	r1, r6, [r0]
   2b15a:	300c      	adds	r0, #12
   2b15c:	60a0      	str	r0, [r4, #8]
   2b15e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2b162:	f7ff fc9b 	bl	2aa9c <memset>
   2b166:	4620      	mov	r0, r4
   2b168:	bd70      	pop	{r4, r5, r6, pc}

0002b16a <_fwalk_reent>:
   2b16a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2b16e:	4606      	mov	r6, r0
   2b170:	4688      	mov	r8, r1
   2b172:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2b176:	2700      	movs	r7, #0
   2b178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2b17c:	f1b9 0901 	subs.w	r9, r9, #1
   2b180:	d505      	bpl.n	2b18e <_fwalk_reent+0x24>
   2b182:	6824      	ldr	r4, [r4, #0]
   2b184:	2c00      	cmp	r4, #0
   2b186:	d1f7      	bne.n	2b178 <_fwalk_reent+0xe>
   2b188:	4638      	mov	r0, r7
   2b18a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2b18e:	89ab      	ldrh	r3, [r5, #12]
   2b190:	2b01      	cmp	r3, #1
   2b192:	d907      	bls.n	2b1a4 <_fwalk_reent+0x3a>
   2b194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2b198:	3301      	adds	r3, #1
   2b19a:	d003      	beq.n	2b1a4 <_fwalk_reent+0x3a>
   2b19c:	4629      	mov	r1, r5
   2b19e:	4630      	mov	r0, r6
   2b1a0:	47c0      	blx	r8
   2b1a2:	4307      	orrs	r7, r0
   2b1a4:	3568      	adds	r5, #104	; 0x68
   2b1a6:	e7e9      	b.n	2b17c <_fwalk_reent+0x12>

0002b1a8 <__swhatbuf_r>:
   2b1a8:	b570      	push	{r4, r5, r6, lr}
   2b1aa:	460e      	mov	r6, r1
   2b1ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b1b0:	2900      	cmp	r1, #0
   2b1b2:	b096      	sub	sp, #88	; 0x58
   2b1b4:	4614      	mov	r4, r2
   2b1b6:	461d      	mov	r5, r3
   2b1b8:	da08      	bge.n	2b1cc <__swhatbuf_r+0x24>
   2b1ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   2b1be:	2200      	movs	r2, #0
   2b1c0:	602a      	str	r2, [r5, #0]
   2b1c2:	061a      	lsls	r2, r3, #24
   2b1c4:	d410      	bmi.n	2b1e8 <__swhatbuf_r+0x40>
   2b1c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2b1ca:	e00e      	b.n	2b1ea <__swhatbuf_r+0x42>
   2b1cc:	466a      	mov	r2, sp
   2b1ce:	f7f9 fdd5 	bl	24d7c <_fstat_r>
   2b1d2:	2800      	cmp	r0, #0
   2b1d4:	dbf1      	blt.n	2b1ba <__swhatbuf_r+0x12>
   2b1d6:	9a01      	ldr	r2, [sp, #4]
   2b1d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2b1dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2b1e0:	425a      	negs	r2, r3
   2b1e2:	415a      	adcs	r2, r3
   2b1e4:	602a      	str	r2, [r5, #0]
   2b1e6:	e7ee      	b.n	2b1c6 <__swhatbuf_r+0x1e>
   2b1e8:	2340      	movs	r3, #64	; 0x40
   2b1ea:	2000      	movs	r0, #0
   2b1ec:	6023      	str	r3, [r4, #0]
   2b1ee:	b016      	add	sp, #88	; 0x58
   2b1f0:	bd70      	pop	{r4, r5, r6, pc}

0002b1f2 <_malloc_usable_size_r>:
   2b1f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2b1f6:	1f18      	subs	r0, r3, #4
   2b1f8:	2b00      	cmp	r3, #0
   2b1fa:	bfbc      	itt	lt
   2b1fc:	580b      	ldrlt	r3, [r1, r0]
   2b1fe:	18c0      	addlt	r0, r0, r3
   2b200:	4770      	bx	lr

0002b202 <_raise_r>:
   2b202:	291f      	cmp	r1, #31
   2b204:	b538      	push	{r3, r4, r5, lr}
   2b206:	4604      	mov	r4, r0
   2b208:	460d      	mov	r5, r1
   2b20a:	d904      	bls.n	2b216 <_raise_r+0x14>
   2b20c:	2316      	movs	r3, #22
   2b20e:	6003      	str	r3, [r0, #0]
   2b210:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b214:	bd38      	pop	{r3, r4, r5, pc}
   2b216:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2b218:	b112      	cbz	r2, 2b220 <_raise_r+0x1e>
   2b21a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2b21e:	b94b      	cbnz	r3, 2b234 <_raise_r+0x32>
   2b220:	4620      	mov	r0, r4
   2b222:	f000 f816 	bl	2b252 <_getpid_r>
   2b226:	462a      	mov	r2, r5
   2b228:	4601      	mov	r1, r0
   2b22a:	4620      	mov	r0, r4
   2b22c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2b230:	f7f9 bd70 	b.w	24d14 <_kill_r>
   2b234:	2b01      	cmp	r3, #1
   2b236:	d00a      	beq.n	2b24e <_raise_r+0x4c>
   2b238:	1c59      	adds	r1, r3, #1
   2b23a:	d103      	bne.n	2b244 <_raise_r+0x42>
   2b23c:	2316      	movs	r3, #22
   2b23e:	6003      	str	r3, [r0, #0]
   2b240:	2001      	movs	r0, #1
   2b242:	e7e7      	b.n	2b214 <_raise_r+0x12>
   2b244:	2400      	movs	r4, #0
   2b246:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   2b24a:	4628      	mov	r0, r5
   2b24c:	4798      	blx	r3
   2b24e:	2000      	movs	r0, #0
   2b250:	e7e0      	b.n	2b214 <_raise_r+0x12>

0002b252 <_getpid_r>:
   2b252:	f7fb bd05 	b.w	26c60 <_getpid>

0002b256 <__sread>:
   2b256:	b510      	push	{r4, lr}
   2b258:	460c      	mov	r4, r1
   2b25a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b25e:	f7f9 fdc1 	bl	24de4 <_read_r>
   2b262:	2800      	cmp	r0, #0
   2b264:	bfab      	itete	ge
   2b266:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2b268:	89a3      	ldrhlt	r3, [r4, #12]
   2b26a:	181b      	addge	r3, r3, r0
   2b26c:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2b270:	bfac      	ite	ge
   2b272:	6563      	strge	r3, [r4, #84]	; 0x54
   2b274:	81a3      	strhlt	r3, [r4, #12]
   2b276:	bd10      	pop	{r4, pc}

0002b278 <__swrite>:
   2b278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b27c:	461f      	mov	r7, r3
   2b27e:	898b      	ldrh	r3, [r1, #12]
   2b280:	05db      	lsls	r3, r3, #23
   2b282:	4605      	mov	r5, r0
   2b284:	460c      	mov	r4, r1
   2b286:	4616      	mov	r6, r2
   2b288:	d505      	bpl.n	2b296 <__swrite+0x1e>
   2b28a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b28e:	2302      	movs	r3, #2
   2b290:	2200      	movs	r2, #0
   2b292:	f7f9 fd95 	bl	24dc0 <_lseek_r>
   2b296:	89a3      	ldrh	r3, [r4, #12]
   2b298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2b29c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2b2a0:	81a3      	strh	r3, [r4, #12]
   2b2a2:	4632      	mov	r2, r6
   2b2a4:	463b      	mov	r3, r7
   2b2a6:	4628      	mov	r0, r5
   2b2a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b2ac:	f7f9 bd44 	b.w	24d38 <_write_r>

0002b2b0 <__sseek>:
   2b2b0:	b510      	push	{r4, lr}
   2b2b2:	460c      	mov	r4, r1
   2b2b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b2b8:	f7f9 fd82 	bl	24dc0 <_lseek_r>
   2b2bc:	1c43      	adds	r3, r0, #1
   2b2be:	89a3      	ldrh	r3, [r4, #12]
   2b2c0:	bf15      	itete	ne
   2b2c2:	6560      	strne	r0, [r4, #84]	; 0x54
   2b2c4:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2b2c8:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2b2cc:	81a3      	strheq	r3, [r4, #12]
   2b2ce:	bf18      	it	ne
   2b2d0:	81a3      	strhne	r3, [r4, #12]
   2b2d2:	bd10      	pop	{r4, pc}

0002b2d4 <__sclose>:
   2b2d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2b2d8:	f7f9 bd40 	b.w	24d5c <_close_r>

0002b2dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2b2dc:	f7f5 be98 	b.w	21010 <SystemInit>
