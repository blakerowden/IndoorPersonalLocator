
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	c0 73 00 20 c5 7e 00 00 bd 9d 02 00 99 7e 00 00     .s. .~.......~..
  10:	99 7e 00 00 99 7e 00 00 99 7e 00 00 00 00 00 00     .~...~...~......
	...
  2c:	e1 77 00 00 99 7e 00 00 00 00 00 00 8d 77 00 00     .w...~.......w..
  3c:	99 7e 00 00                                         .~..

00000040 <_irq_vector_table>:
  40:	91 78 00 00 2d cf 01 00 91 78 00 00 91 78 00 00     .x..-....x...x..
  50:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  60:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  70:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  80:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  90:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  a0:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  b0:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  c0:	91 78 00 00 91 78 00 00 91 78 00 00 91 78 00 00     .x...x...x...x..
  d0:	91 78 00 00 91 78 00 00 91 78 00 00                 .x...x...x..

Disassembly of section text:

000000e0 <memchr>:
      e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
      e4:	2a10      	cmp	r2, #16
      e6:	db2b      	blt.n	140 <CONFIG_IDLE_STACK_SIZE>
      e8:	f010 0f07 	tst.w	r0, #7
      ec:	d008      	beq.n	100 <CONFIG_KOBJECT_TEXT_AREA>
      ee:	f810 3b01 	ldrb.w	r3, [r0], #1
      f2:	3a01      	subs	r2, #1
      f4:	428b      	cmp	r3, r1
      f6:	d02d      	beq.n	154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
      f8:	f010 0f07 	tst.w	r0, #7
      fc:	b342      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
      fe:	d1f6      	bne.n	ee <memchr+0xe>
     100:	b4f0      	push	{r4, r5, r6, r7}
     102:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     106:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     10a:	f022 0407 	bic.w	r4, r2, #7
     10e:	f07f 0700 	mvns.w	r7, #0
     112:	2300      	movs	r3, #0
     114:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     118:	3c08      	subs	r4, #8
     11a:	ea85 0501 	eor.w	r5, r5, r1
     11e:	ea86 0601 	eor.w	r6, r6, r1
     122:	fa85 f547 	uadd8	r5, r5, r7
     126:	faa3 f587 	sel	r5, r3, r7
     12a:	fa86 f647 	uadd8	r6, r6, r7
     12e:	faa5 f687 	sel	r6, r5, r7
     132:	b98e      	cbnz	r6, 158 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xe>
     134:	d1ee      	bne.n	114 <CONFIG_KOBJECT_TEXT_AREA+0x14>
     136:	bcf0      	pop	{r4, r5, r6, r7}
     138:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     13c:	f002 0207 	and.w	r2, r2, #7
     140:	b132      	cbz	r2, 150 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6>
     142:	f810 3b01 	ldrb.w	r3, [r0], #1
     146:	3a01      	subs	r2, #1
     148:	ea83 0301 	eor.w	r3, r3, r1
     14c:	b113      	cbz	r3, 154 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa>
     14e:	d1f8      	bne.n	142 <CONFIG_IDLE_STACK_SIZE+0x2>
     150:	2000      	movs	r0, #0
     152:	4770      	bx	lr
     154:	3801      	subs	r0, #1
     156:	4770      	bx	lr
     158:	2d00      	cmp	r5, #0
     15a:	bf06      	itte	eq
     15c:	4635      	moveq	r5, r6
     15e:	3803      	subeq	r0, #3
     160:	3807      	subne	r0, #7
     162:	f015 0f01 	tst.w	r5, #1
     166:	d107      	bne.n	178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>
     168:	3001      	adds	r0, #1
     16a:	f415 7f80 	tst.w	r5, #256	; 0x100
     16e:	bf02      	ittt	eq
     170:	3001      	addeq	r0, #1
     172:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     176:	3001      	addeq	r0, #1
     178:	bcf0      	pop	{r4, r5, r6, r7}
     17a:	3801      	subs	r0, #1
     17c:	4770      	bx	lr
     17e:	bf00      	nop

00000180 <__aeabi_drsub>:
     180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     184:	e002      	b.n	18c <__adddf3>
     186:	bf00      	nop

00000188 <__aeabi_dsub>:
     188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000018c <__adddf3>:
     18c:	b530      	push	{r4, r5, lr}
     18e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     192:	ea4f 0543 	mov.w	r5, r3, lsl #1
     196:	ea94 0f05 	teq	r4, r5
     19a:	bf08      	it	eq
     19c:	ea90 0f02 	teqeq	r0, r2
     1a0:	bf1f      	itttt	ne
     1a2:	ea54 0c00 	orrsne.w	ip, r4, r0
     1a6:	ea55 0c02 	orrsne.w	ip, r5, r2
     1aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     1ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     1b2:	f000 80e2 	beq.w	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     1b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
     1ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     1be:	bfb8      	it	lt
     1c0:	426d      	neglt	r5, r5
     1c2:	dd0c      	ble.n	1de <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1e>
     1c4:	442c      	add	r4, r5
     1c6:	ea80 0202 	eor.w	r2, r0, r2
     1ca:	ea81 0303 	eor.w	r3, r1, r3
     1ce:	ea82 0000 	eor.w	r0, r2, r0
     1d2:	ea83 0101 	eor.w	r1, r3, r1
     1d6:	ea80 0202 	eor.w	r2, r0, r2
     1da:	ea81 0303 	eor.w	r3, r1, r3
     1de:	2d36      	cmp	r5, #54	; 0x36
     1e0:	bf88      	it	hi
     1e2:	bd30      	pophi	{r4, r5, pc}
     1e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     1e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     1ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     1f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     1f4:	d002      	beq.n	1fc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x3c>
     1f6:	4240      	negs	r0, r0
     1f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     200:	ea4f 3303 	mov.w	r3, r3, lsl #12
     204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     208:	d002      	beq.n	210 <CONFIG_FLASH_SIZE+0x10>
     20a:	4252      	negs	r2, r2
     20c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     210:	ea94 0f05 	teq	r4, r5
     214:	f000 80a7 	beq.w	366 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x66>
     218:	f1a4 0401 	sub.w	r4, r4, #1
     21c:	f1d5 0e20 	rsbs	lr, r5, #32
     220:	db0d      	blt.n	23e <CONFIG_FLASH_SIZE+0x3e>
     222:	fa02 fc0e 	lsl.w	ip, r2, lr
     226:	fa22 f205 	lsr.w	r2, r2, r5
     22a:	1880      	adds	r0, r0, r2
     22c:	f141 0100 	adc.w	r1, r1, #0
     230:	fa03 f20e 	lsl.w	r2, r3, lr
     234:	1880      	adds	r0, r0, r2
     236:	fa43 f305 	asr.w	r3, r3, r5
     23a:	4159      	adcs	r1, r3
     23c:	e00e      	b.n	25c <CONFIG_FLASH_SIZE+0x5c>
     23e:	f1a5 0520 	sub.w	r5, r5, #32
     242:	f10e 0e20 	add.w	lr, lr, #32
     246:	2a01      	cmp	r2, #1
     248:	fa03 fc0e 	lsl.w	ip, r3, lr
     24c:	bf28      	it	cs
     24e:	f04c 0c02 	orrcs.w	ip, ip, #2
     252:	fa43 f305 	asr.w	r3, r3, r5
     256:	18c0      	adds	r0, r0, r3
     258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     25c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     260:	d507      	bpl.n	272 <CONFIG_FLASH_SIZE+0x72>
     262:	f04f 0e00 	mov.w	lr, #0
     266:	f1dc 0c00 	rsbs	ip, ip, #0
     26a:	eb7e 0000 	sbcs.w	r0, lr, r0
     26e:	eb6e 0101 	sbc.w	r1, lr, r1
     272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     276:	d31b      	bcc.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     27c:	d30c      	bcc.n	298 <CONFIG_FLASH_SIZE+0x98>
     27e:	0849      	lsrs	r1, r1, #1
     280:	ea5f 0030 	movs.w	r0, r0, rrx
     284:	ea4f 0c3c 	mov.w	ip, ip, rrx
     288:	f104 0401 	add.w	r4, r4, #1
     28c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     294:	f080 809a 	bcs.w	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     29c:	bf08      	it	eq
     29e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     2a2:	f150 0000 	adcs.w	r0, r0, #0
     2a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     2aa:	ea41 0105 	orr.w	r1, r1, r5
     2ae:	bd30      	pop	{r4, r5, pc}
     2b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     2b4:	4140      	adcs	r0, r0
     2b6:	eb41 0101 	adc.w	r1, r1, r1
     2ba:	3c01      	subs	r4, #1
     2bc:	bf28      	it	cs
     2be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     2c2:	d2e9      	bcs.n	298 <CONFIG_FLASH_SIZE+0x98>
     2c4:	f091 0f00 	teq	r1, #0
     2c8:	bf04      	itt	eq
     2ca:	4601      	moveq	r1, r0
     2cc:	2000      	moveq	r0, #0
     2ce:	fab1 f381 	clz	r3, r1
     2d2:	bf08      	it	eq
     2d4:	3320      	addeq	r3, #32
     2d6:	f1a3 030b 	sub.w	r3, r3, #11
     2da:	f1b3 0220 	subs.w	r2, r3, #32
     2de:	da0c      	bge.n	2fa <CONFIG_FLASH_SIZE+0xfa>
     2e0:	320c      	adds	r2, #12
     2e2:	dd08      	ble.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2e4:	f102 0c14 	add.w	ip, r2, #20
     2e8:	f1c2 020c 	rsb	r2, r2, #12
     2ec:	fa01 f00c 	lsl.w	r0, r1, ip
     2f0:	fa21 f102 	lsr.w	r1, r1, r2
     2f4:	e00c      	b.n	310 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x10>
     2f6:	f102 0214 	add.w	r2, r2, #20
     2fa:	bfd8      	it	le
     2fc:	f1c2 0c20 	rsble	ip, r2, #32
     300:	fa01 f102 	lsl.w	r1, r1, r2
     304:	fa20 fc0c 	lsr.w	ip, r0, ip
     308:	bfdc      	itt	le
     30a:	ea41 010c 	orrle.w	r1, r1, ip
     30e:	4090      	lslle	r0, r2
     310:	1ae4      	subs	r4, r4, r3
     312:	bfa2      	ittt	ge
     314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     318:	4329      	orrge	r1, r5
     31a:	bd30      	popge	{r4, r5, pc}
     31c:	ea6f 0404 	mvn.w	r4, r4
     320:	3c1f      	subs	r4, #31
     322:	da1c      	bge.n	35e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x5e>
     324:	340c      	adds	r4, #12
     326:	dc0e      	bgt.n	346 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x46>
     328:	f104 0414 	add.w	r4, r4, #20
     32c:	f1c4 0220 	rsb	r2, r4, #32
     330:	fa20 f004 	lsr.w	r0, r0, r4
     334:	fa01 f302 	lsl.w	r3, r1, r2
     338:	ea40 0003 	orr.w	r0, r0, r3
     33c:	fa21 f304 	lsr.w	r3, r1, r4
     340:	ea45 0103 	orr.w	r1, r5, r3
     344:	bd30      	pop	{r4, r5, pc}
     346:	f1c4 040c 	rsb	r4, r4, #12
     34a:	f1c4 0220 	rsb	r2, r4, #32
     34e:	fa20 f002 	lsr.w	r0, r0, r2
     352:	fa01 f304 	lsl.w	r3, r1, r4
     356:	ea40 0003 	orr.w	r0, r0, r3
     35a:	4629      	mov	r1, r5
     35c:	bd30      	pop	{r4, r5, pc}
     35e:	fa21 f004 	lsr.w	r0, r1, r4
     362:	4629      	mov	r1, r5
     364:	bd30      	pop	{r4, r5, pc}
     366:	f094 0f00 	teq	r4, #0
     36a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     36e:	bf06      	itte	eq
     370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     374:	3401      	addeq	r4, #1
     376:	3d01      	subne	r5, #1
     378:	e74e      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     37a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     37e:	bf18      	it	ne
     380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     384:	d029      	beq.n	3da <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xda>
     386:	ea94 0f05 	teq	r4, r5
     38a:	bf08      	it	eq
     38c:	ea90 0f02 	teqeq	r0, r2
     390:	d005      	beq.n	39e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9e>
     392:	ea54 0c00 	orrs.w	ip, r4, r0
     396:	bf04      	itt	eq
     398:	4619      	moveq	r1, r3
     39a:	4610      	moveq	r0, r2
     39c:	bd30      	pop	{r4, r5, pc}
     39e:	ea91 0f03 	teq	r1, r3
     3a2:	bf1e      	ittt	ne
     3a4:	2100      	movne	r1, #0
     3a6:	2000      	movne	r0, #0
     3a8:	bd30      	popne	{r4, r5, pc}
     3aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     3ae:	d105      	bne.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     3b0:	0040      	lsls	r0, r0, #1
     3b2:	4149      	adcs	r1, r1
     3b4:	bf28      	it	cs
     3b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     3ba:	bd30      	pop	{r4, r5, pc}
     3bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     3c0:	bf3c      	itt	cc
     3c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     3c6:	bd30      	popcc	{r4, r5, pc}
     3c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     3cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     3d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     3d4:	f04f 0000 	mov.w	r0, #0
     3d8:	bd30      	pop	{r4, r5, pc}
     3da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     3de:	bf1a      	itte	ne
     3e0:	4619      	movne	r1, r3
     3e2:	4610      	movne	r0, r2
     3e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     3e8:	bf1c      	itt	ne
     3ea:	460b      	movne	r3, r1
     3ec:	4602      	movne	r2, r0
     3ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     3f2:	bf06      	itte	eq
     3f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     3f8:	ea91 0f03 	teqeq	r1, r3
     3fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     400:	bd30      	pop	{r4, r5, pc}
     402:	bf00      	nop

00000404 <__aeabi_ui2d>:
     404:	f090 0f00 	teq	r0, #0
     408:	bf04      	itt	eq
     40a:	2100      	moveq	r1, #0
     40c:	4770      	bxeq	lr
     40e:	b530      	push	{r4, r5, lr}
     410:	f44f 6480 	mov.w	r4, #1024	; 0x400
     414:	f104 0432 	add.w	r4, r4, #50	; 0x32
     418:	f04f 0500 	mov.w	r5, #0
     41c:	f04f 0100 	mov.w	r1, #0
     420:	e750      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     422:	bf00      	nop

00000424 <__aeabi_i2d>:
     424:	f090 0f00 	teq	r0, #0
     428:	bf04      	itt	eq
     42a:	2100      	moveq	r1, #0
     42c:	4770      	bxeq	lr
     42e:	b530      	push	{r4, r5, lr}
     430:	f44f 6480 	mov.w	r4, #1024	; 0x400
     434:	f104 0432 	add.w	r4, r4, #50	; 0x32
     438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     43c:	bf48      	it	mi
     43e:	4240      	negmi	r0, r0
     440:	f04f 0100 	mov.w	r1, #0
     444:	e73e      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     446:	bf00      	nop

00000448 <__aeabi_f2d>:
     448:	0042      	lsls	r2, r0, #1
     44a:	ea4f 01e2 	mov.w	r1, r2, asr #3
     44e:	ea4f 0131 	mov.w	r1, r1, rrx
     452:	ea4f 7002 	mov.w	r0, r2, lsl #28
     456:	bf1f      	itttt	ne
     458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     45c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     464:	4770      	bxne	lr
     466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     46a:	bf08      	it	eq
     46c:	4770      	bxeq	lr
     46e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     472:	bf04      	itt	eq
     474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     478:	4770      	bxeq	lr
     47a:	b530      	push	{r4, r5, lr}
     47c:	f44f 7460 	mov.w	r4, #896	; 0x380
     480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     488:	e71c      	b.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     48a:	bf00      	nop

0000048c <__aeabi_ul2d>:
     48c:	ea50 0201 	orrs.w	r2, r0, r1
     490:	bf08      	it	eq
     492:	4770      	bxeq	lr
     494:	b530      	push	{r4, r5, lr}
     496:	f04f 0500 	mov.w	r5, #0
     49a:	e00a      	b.n	4b2 <__aeabi_l2d+0x16>

0000049c <__aeabi_l2d>:
     49c:	ea50 0201 	orrs.w	r2, r0, r1
     4a0:	bf08      	it	eq
     4a2:	4770      	bxeq	lr
     4a4:	b530      	push	{r4, r5, lr}
     4a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     4aa:	d502      	bpl.n	4b2 <__aeabi_l2d+0x16>
     4ac:	4240      	negs	r0, r0
     4ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     4b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     4ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     4be:	f43f aed8 	beq.w	272 <CONFIG_FLASH_SIZE+0x72>
     4c2:	f04f 0203 	mov.w	r2, #3
     4c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4ca:	bf18      	it	ne
     4cc:	3203      	addne	r2, #3
     4ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     4d2:	bf18      	it	ne
     4d4:	3203      	addne	r2, #3
     4d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     4da:	f1c2 0320 	rsb	r3, r2, #32
     4de:	fa00 fc03 	lsl.w	ip, r0, r3
     4e2:	fa20 f002 	lsr.w	r0, r0, r2
     4e6:	fa01 fe03 	lsl.w	lr, r1, r3
     4ea:	ea40 000e 	orr.w	r0, r0, lr
     4ee:	fa21 f102 	lsr.w	r1, r1, r2
     4f2:	4414      	add	r4, r2
     4f4:	e6bd      	b.n	272 <CONFIG_FLASH_SIZE+0x72>
     4f6:	bf00      	nop

000004f8 <__aeabi_dmul>:
     4f8:	b570      	push	{r4, r5, r6, lr}
     4fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
     4fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     506:	bf1d      	ittte	ne
     508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     50c:	ea94 0f0c 	teqne	r4, ip
     510:	ea95 0f0c 	teqne	r5, ip
     514:	f000 f8de 	bleq	6d4 <CONFIG_BT_COMPANY_ID+0xe3>
     518:	442c      	add	r4, r5
     51a:	ea81 0603 	eor.w	r6, r1, r3
     51e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     52a:	bf18      	it	ne
     52c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     538:	d038      	beq.n	5ac <__aeabi_dmul+0xb4>
     53a:	fba0 ce02 	umull	ip, lr, r0, r2
     53e:	f04f 0500 	mov.w	r5, #0
     542:	fbe1 e502 	umlal	lr, r5, r1, r2
     546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     54a:	fbe0 e503 	umlal	lr, r5, r0, r3
     54e:	f04f 0600 	mov.w	r6, #0
     552:	fbe1 5603 	umlal	r5, r6, r1, r3
     556:	f09c 0f00 	teq	ip, #0
     55a:	bf18      	it	ne
     55c:	f04e 0e01 	orrne.w	lr, lr, #1
     560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     56c:	d204      	bcs.n	578 <__aeabi_dmul+0x80>
     56e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     572:	416d      	adcs	r5, r5
     574:	eb46 0606 	adc.w	r6, r6, r6
     578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     57c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     58c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     590:	bf88      	it	hi
     592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     596:	d81e      	bhi.n	5d6 <__aeabi_dmul+0xde>
     598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     59c:	bf08      	it	eq
     59e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     5a2:	f150 0000 	adcs.w	r0, r0, #0
     5a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     5b0:	ea46 0101 	orr.w	r1, r6, r1
     5b4:	ea40 0002 	orr.w	r0, r0, r2
     5b8:	ea81 0103 	eor.w	r1, r1, r3
     5bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     5c0:	bfc2      	ittt	gt
     5c2:	ebd4 050c 	rsbsgt	r5, r4, ip
     5c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     5ca:	bd70      	popgt	{r4, r5, r6, pc}
     5cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     5d0:	f04f 0e00 	mov.w	lr, #0
     5d4:	3c01      	subs	r4, #1
     5d6:	f300 80ab 	bgt.w	730 <CONFIG_BT_COMPANY_ID+0x13f>
     5da:	f114 0f36 	cmn.w	r4, #54	; 0x36
     5de:	bfde      	ittt	le
     5e0:	2000      	movle	r0, #0
     5e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     5e6:	bd70      	pople	{r4, r5, r6, pc}
     5e8:	f1c4 0400 	rsb	r4, r4, #0
     5ec:	3c20      	subs	r4, #32
     5ee:	da35      	bge.n	65c <CONFIG_BT_COMPANY_ID+0x6b>
     5f0:	340c      	adds	r4, #12
     5f2:	dc1b      	bgt.n	62c <CONFIG_BT_COMPANY_ID+0x3b>
     5f4:	f104 0414 	add.w	r4, r4, #20
     5f8:	f1c4 0520 	rsb	r5, r4, #32
     5fc:	fa00 f305 	lsl.w	r3, r0, r5
     600:	fa20 f004 	lsr.w	r0, r0, r4
     604:	fa01 f205 	lsl.w	r2, r1, r5
     608:	ea40 0002 	orr.w	r0, r0, r2
     60c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     618:	fa21 f604 	lsr.w	r6, r1, r4
     61c:	eb42 0106 	adc.w	r1, r2, r6
     620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     624:	bf08      	it	eq
     626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     62a:	bd70      	pop	{r4, r5, r6, pc}
     62c:	f1c4 040c 	rsb	r4, r4, #12
     630:	f1c4 0520 	rsb	r5, r4, #32
     634:	fa00 f304 	lsl.w	r3, r0, r4
     638:	fa20 f005 	lsr.w	r0, r0, r5
     63c:	fa01 f204 	lsl.w	r2, r1, r4
     640:	ea40 0002 	orr.w	r0, r0, r2
     644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     64c:	f141 0100 	adc.w	r1, r1, #0
     650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     654:	bf08      	it	eq
     656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     65a:	bd70      	pop	{r4, r5, r6, pc}
     65c:	f1c4 0520 	rsb	r5, r4, #32
     660:	fa00 f205 	lsl.w	r2, r0, r5
     664:	ea4e 0e02 	orr.w	lr, lr, r2
     668:	fa20 f304 	lsr.w	r3, r0, r4
     66c:	fa01 f205 	lsl.w	r2, r1, r5
     670:	ea43 0302 	orr.w	r3, r3, r2
     674:	fa21 f004 	lsr.w	r0, r1, r4
     678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     67c:	fa21 f204 	lsr.w	r2, r1, r4
     680:	ea20 0002 	bic.w	r0, r0, r2
     684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     68c:	bf08      	it	eq
     68e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f094 0f00 	teq	r4, #0
     698:	d10f      	bne.n	6ba <CONFIG_BT_COMPANY_ID+0xc9>
     69a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     69e:	0040      	lsls	r0, r0, #1
     6a0:	eb41 0101 	adc.w	r1, r1, r1
     6a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     6a8:	bf08      	it	eq
     6aa:	3c01      	subeq	r4, #1
     6ac:	d0f7      	beq.n	69e <CONFIG_BT_COMPANY_ID+0xad>
     6ae:	ea41 0106 	orr.w	r1, r1, r6
     6b2:	f095 0f00 	teq	r5, #0
     6b6:	bf18      	it	ne
     6b8:	4770      	bxne	lr
     6ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     6be:	0052      	lsls	r2, r2, #1
     6c0:	eb43 0303 	adc.w	r3, r3, r3
     6c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     6c8:	bf08      	it	eq
     6ca:	3d01      	subeq	r5, #1
     6cc:	d0f7      	beq.n	6be <CONFIG_BT_COMPANY_ID+0xcd>
     6ce:	ea43 0306 	orr.w	r3, r3, r6
     6d2:	4770      	bx	lr
     6d4:	ea94 0f0c 	teq	r4, ip
     6d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     6dc:	bf18      	it	ne
     6de:	ea95 0f0c 	teqne	r5, ip
     6e2:	d00c      	beq.n	6fe <CONFIG_BT_COMPANY_ID+0x10d>
     6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     6e8:	bf18      	it	ne
     6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     6ee:	d1d1      	bne.n	694 <CONFIG_BT_COMPANY_ID+0xa3>
     6f0:	ea81 0103 	eor.w	r1, r1, r3
     6f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6f8:	f04f 0000 	mov.w	r0, #0
     6fc:	bd70      	pop	{r4, r5, r6, pc}
     6fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     702:	bf06      	itte	eq
     704:	4610      	moveq	r0, r2
     706:	4619      	moveq	r1, r3
     708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     70c:	d019      	beq.n	742 <CONFIG_BT_COMPANY_ID+0x151>
     70e:	ea94 0f0c 	teq	r4, ip
     712:	d102      	bne.n	71a <CONFIG_BT_COMPANY_ID+0x129>
     714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     718:	d113      	bne.n	742 <CONFIG_BT_COMPANY_ID+0x151>
     71a:	ea95 0f0c 	teq	r5, ip
     71e:	d105      	bne.n	72c <CONFIG_BT_COMPANY_ID+0x13b>
     720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     724:	bf1c      	itt	ne
     726:	4610      	movne	r0, r2
     728:	4619      	movne	r1, r3
     72a:	d10a      	bne.n	742 <CONFIG_BT_COMPANY_ID+0x151>
     72c:	ea81 0103 	eor.w	r1, r1, r3
     730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     73c:	f04f 0000 	mov.w	r0, #0
     740:	bd70      	pop	{r4, r5, r6, pc}
     742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     74a:	bd70      	pop	{r4, r5, r6, pc}

0000074c <__aeabi_ddiv>:
     74c:	b570      	push	{r4, r5, r6, lr}
     74e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     75a:	bf1d      	ittte	ne
     75c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     760:	ea94 0f0c 	teqne	r4, ip
     764:	ea95 0f0c 	teqne	r5, ip
     768:	f000 f8a7 	bleq	8ba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xba>
     76c:	eba4 0405 	sub.w	r4, r4, r5
     770:	ea81 0e03 	eor.w	lr, r1, r3
     774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     778:	ea4f 3101 	mov.w	r1, r1, lsl #12
     77c:	f000 8088 	beq.w	890 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x90>
     780:	ea4f 3303 	mov.w	r3, r3, lsl #12
     784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     78c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     790:	ea4f 2202 	mov.w	r2, r2, lsl #8
     794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     79c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     7a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     7a4:	429d      	cmp	r5, r3
     7a6:	bf08      	it	eq
     7a8:	4296      	cmpeq	r6, r2
     7aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     7ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
     7b2:	d202      	bcs.n	7ba <__aeabi_ddiv+0x6e>
     7b4:	085b      	lsrs	r3, r3, #1
     7b6:	ea4f 0232 	mov.w	r2, r2, rrx
     7ba:	1ab6      	subs	r6, r6, r2
     7bc:	eb65 0503 	sbc.w	r5, r5, r3
     7c0:	085b      	lsrs	r3, r3, #1
     7c2:	ea4f 0232 	mov.w	r2, r2, rrx
     7c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     7ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     7ce:	ebb6 0e02 	subs.w	lr, r6, r2
     7d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     7d6:	bf22      	ittt	cs
     7d8:	1ab6      	subcs	r6, r6, r2
     7da:	4675      	movcs	r5, lr
     7dc:	ea40 000c 	orrcs.w	r0, r0, ip
     7e0:	085b      	lsrs	r3, r3, #1
     7e2:	ea4f 0232 	mov.w	r2, r2, rrx
     7e6:	ebb6 0e02 	subs.w	lr, r6, r2
     7ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     7ee:	bf22      	ittt	cs
     7f0:	1ab6      	subcs	r6, r6, r2
     7f2:	4675      	movcs	r5, lr
     7f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     7f8:	085b      	lsrs	r3, r3, #1
     7fa:	ea4f 0232 	mov.w	r2, r2, rrx
     7fe:	ebb6 0e02 	subs.w	lr, r6, r2
     802:	eb75 0e03 	sbcs.w	lr, r5, r3
     806:	bf22      	ittt	cs
     808:	1ab6      	subcs	r6, r6, r2
     80a:	4675      	movcs	r5, lr
     80c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     810:	085b      	lsrs	r3, r3, #1
     812:	ea4f 0232 	mov.w	r2, r2, rrx
     816:	ebb6 0e02 	subs.w	lr, r6, r2
     81a:	eb75 0e03 	sbcs.w	lr, r5, r3
     81e:	bf22      	ittt	cs
     820:	1ab6      	subcs	r6, r6, r2
     822:	4675      	movcs	r5, lr
     824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     828:	ea55 0e06 	orrs.w	lr, r5, r6
     82c:	d018      	beq.n	860 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x60>
     82e:	ea4f 1505 	mov.w	r5, r5, lsl #4
     832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     836:	ea4f 1606 	mov.w	r6, r6, lsl #4
     83a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     83e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     84a:	d1c0      	bne.n	7ce <__aeabi_ddiv+0x82>
     84c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     850:	d10b      	bne.n	86a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6a>
     852:	ea41 0100 	orr.w	r1, r1, r0
     856:	f04f 0000 	mov.w	r0, #0
     85a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     85e:	e7b6      	b.n	7ce <__aeabi_ddiv+0x82>
     860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     864:	bf04      	itt	eq
     866:	4301      	orreq	r1, r0
     868:	2000      	moveq	r0, #0
     86a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     86e:	bf88      	it	hi
     870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     874:	f63f aeaf 	bhi.w	5d6 <__aeabi_dmul+0xde>
     878:	ebb5 0c03 	subs.w	ip, r5, r3
     87c:	bf04      	itt	eq
     87e:	ebb6 0c02 	subseq.w	ip, r6, r2
     882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     886:	f150 0000 	adcs.w	r0, r0, #0
     88a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     88e:	bd70      	pop	{r4, r5, r6, pc}
     890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     89c:	bfc2      	ittt	gt
     89e:	ebd4 050c 	rsbsgt	r5, r4, ip
     8a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     8a6:	bd70      	popgt	{r4, r5, r6, pc}
     8a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     8ac:	f04f 0e00 	mov.w	lr, #0
     8b0:	3c01      	subs	r4, #1
     8b2:	e690      	b.n	5d6 <__aeabi_dmul+0xde>
     8b4:	ea45 0e06 	orr.w	lr, r5, r6
     8b8:	e68d      	b.n	5d6 <__aeabi_dmul+0xde>
     8ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     8be:	ea94 0f0c 	teq	r4, ip
     8c2:	bf08      	it	eq
     8c4:	ea95 0f0c 	teqeq	r5, ip
     8c8:	f43f af3b 	beq.w	742 <CONFIG_BT_COMPANY_ID+0x151>
     8cc:	ea94 0f0c 	teq	r4, ip
     8d0:	d10a      	bne.n	8e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe8>
     8d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     8d6:	f47f af34 	bne.w	742 <CONFIG_BT_COMPANY_ID+0x151>
     8da:	ea95 0f0c 	teq	r5, ip
     8de:	f47f af25 	bne.w	72c <CONFIG_BT_COMPANY_ID+0x13b>
     8e2:	4610      	mov	r0, r2
     8e4:	4619      	mov	r1, r3
     8e6:	e72c      	b.n	742 <CONFIG_BT_COMPANY_ID+0x151>
     8e8:	ea95 0f0c 	teq	r5, ip
     8ec:	d106      	bne.n	8fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfc>
     8ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     8f2:	f43f aefd 	beq.w	6f0 <CONFIG_BT_COMPANY_ID+0xff>
     8f6:	4610      	mov	r0, r2
     8f8:	4619      	mov	r1, r3
     8fa:	e722      	b.n	742 <CONFIG_BT_COMPANY_ID+0x151>
     8fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     900:	bf18      	it	ne
     902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     906:	f47f aec5 	bne.w	694 <CONFIG_BT_COMPANY_ID+0xa3>
     90a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     90e:	f47f af0d 	bne.w	72c <CONFIG_BT_COMPANY_ID+0x13b>
     912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     916:	f47f aeeb 	bne.w	6f0 <CONFIG_BT_COMPANY_ID+0xff>
     91a:	e712      	b.n	742 <CONFIG_BT_COMPANY_ID+0x151>

0000091c <__aeabi_d2uiz>:
     91c:	004a      	lsls	r2, r1, #1
     91e:	d211      	bcs.n	944 <__aeabi_d2uiz+0x28>
     920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     924:	d211      	bcs.n	94a <__aeabi_d2uiz+0x2e>
     926:	d50d      	bpl.n	944 <__aeabi_d2uiz+0x28>
     928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     92c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     930:	d40e      	bmi.n	950 <__aeabi_d2uiz+0x34>
     932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     93a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     93e:	fa23 f002 	lsr.w	r0, r3, r2
     942:	4770      	bx	lr
     944:	f04f 0000 	mov.w	r0, #0
     948:	4770      	bx	lr
     94a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     94e:	d102      	bne.n	956 <__aeabi_d2uiz+0x3a>
     950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     954:	4770      	bx	lr
     956:	f04f 0000 	mov.w	r0, #0
     95a:	4770      	bx	lr

0000095c <__aeabi_frsub>:
     95c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     960:	e002      	b.n	968 <__addsf3>
     962:	bf00      	nop

00000964 <__aeabi_fsub>:
     964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000968 <__addsf3>:
     968:	0042      	lsls	r2, r0, #1
     96a:	bf1f      	itttt	ne
     96c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     970:	ea92 0f03 	teqne	r2, r3
     974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     97c:	d06a      	beq.n	a54 <__addsf3+0xec>
     97e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     986:	bfc1      	itttt	gt
     988:	18d2      	addgt	r2, r2, r3
     98a:	4041      	eorgt	r1, r0
     98c:	4048      	eorgt	r0, r1
     98e:	4041      	eorgt	r1, r0
     990:	bfb8      	it	lt
     992:	425b      	neglt	r3, r3
     994:	2b19      	cmp	r3, #25
     996:	bf88      	it	hi
     998:	4770      	bxhi	lr
     99a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     99e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     9a6:	bf18      	it	ne
     9a8:	4240      	negne	r0, r0
     9aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     9b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     9b6:	bf18      	it	ne
     9b8:	4249      	negne	r1, r1
     9ba:	ea92 0f03 	teq	r2, r3
     9be:	d03f      	beq.n	a40 <__addsf3+0xd8>
     9c0:	f1a2 0201 	sub.w	r2, r2, #1
     9c4:	fa41 fc03 	asr.w	ip, r1, r3
     9c8:	eb10 000c 	adds.w	r0, r0, ip
     9cc:	f1c3 0320 	rsb	r3, r3, #32
     9d0:	fa01 f103 	lsl.w	r1, r1, r3
     9d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     9d8:	d502      	bpl.n	9e0 <__addsf3+0x78>
     9da:	4249      	negs	r1, r1
     9dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     9e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     9e4:	d313      	bcc.n	a0e <__addsf3+0xa6>
     9e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     9ea:	d306      	bcc.n	9fa <__addsf3+0x92>
     9ec:	0840      	lsrs	r0, r0, #1
     9ee:	ea4f 0131 	mov.w	r1, r1, rrx
     9f2:	f102 0201 	add.w	r2, r2, #1
     9f6:	2afe      	cmp	r2, #254	; 0xfe
     9f8:	d251      	bcs.n	a9e <__addsf3+0x136>
     9fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     9fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a02:	bf08      	it	eq
     a04:	f020 0001 	biceq.w	r0, r0, #1
     a08:	ea40 0003 	orr.w	r0, r0, r3
     a0c:	4770      	bx	lr
     a0e:	0049      	lsls	r1, r1, #1
     a10:	eb40 0000 	adc.w	r0, r0, r0
     a14:	3a01      	subs	r2, #1
     a16:	bf28      	it	cs
     a18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a1c:	d2ed      	bcs.n	9fa <__addsf3+0x92>
     a1e:	fab0 fc80 	clz	ip, r0
     a22:	f1ac 0c08 	sub.w	ip, ip, #8
     a26:	ebb2 020c 	subs.w	r2, r2, ip
     a2a:	fa00 f00c 	lsl.w	r0, r0, ip
     a2e:	bfaa      	itet	ge
     a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     a34:	4252      	neglt	r2, r2
     a36:	4318      	orrge	r0, r3
     a38:	bfbc      	itt	lt
     a3a:	40d0      	lsrlt	r0, r2
     a3c:	4318      	orrlt	r0, r3
     a3e:	4770      	bx	lr
     a40:	f092 0f00 	teq	r2, #0
     a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     a48:	bf06      	itte	eq
     a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     a4e:	3201      	addeq	r2, #1
     a50:	3b01      	subne	r3, #1
     a52:	e7b5      	b.n	9c0 <__addsf3+0x58>
     a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
     a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     a5c:	bf18      	it	ne
     a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a62:	d021      	beq.n	aa8 <__addsf3+0x140>
     a64:	ea92 0f03 	teq	r2, r3
     a68:	d004      	beq.n	a74 <__addsf3+0x10c>
     a6a:	f092 0f00 	teq	r2, #0
     a6e:	bf08      	it	eq
     a70:	4608      	moveq	r0, r1
     a72:	4770      	bx	lr
     a74:	ea90 0f01 	teq	r0, r1
     a78:	bf1c      	itt	ne
     a7a:	2000      	movne	r0, #0
     a7c:	4770      	bxne	lr
     a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     a82:	d104      	bne.n	a8e <__addsf3+0x126>
     a84:	0040      	lsls	r0, r0, #1
     a86:	bf28      	it	cs
     a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     a8c:	4770      	bx	lr
     a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     a92:	bf3c      	itt	cc
     a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     a98:	4770      	bxcc	lr
     a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     aa6:	4770      	bx	lr
     aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
     aac:	bf16      	itet	ne
     aae:	4608      	movne	r0, r1
     ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ab4:	4601      	movne	r1, r0
     ab6:	0242      	lsls	r2, r0, #9
     ab8:	bf06      	itte	eq
     aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     abe:	ea90 0f01 	teqeq	r0, r1
     ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     ac6:	4770      	bx	lr

00000ac8 <__aeabi_ui2f>:
     ac8:	f04f 0300 	mov.w	r3, #0
     acc:	e004      	b.n	ad8 <__aeabi_i2f+0x8>
     ace:	bf00      	nop

00000ad0 <__aeabi_i2f>:
     ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     ad4:	bf48      	it	mi
     ad6:	4240      	negmi	r0, r0
     ad8:	ea5f 0c00 	movs.w	ip, r0
     adc:	bf08      	it	eq
     ade:	4770      	bxeq	lr
     ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     ae4:	4601      	mov	r1, r0
     ae6:	f04f 0000 	mov.w	r0, #0
     aea:	e01c      	b.n	b26 <__aeabi_l2f+0x2a>

00000aec <__aeabi_ul2f>:
     aec:	ea50 0201 	orrs.w	r2, r0, r1
     af0:	bf08      	it	eq
     af2:	4770      	bxeq	lr
     af4:	f04f 0300 	mov.w	r3, #0
     af8:	e00a      	b.n	b10 <__aeabi_l2f+0x14>
     afa:	bf00      	nop

00000afc <__aeabi_l2f>:
     afc:	ea50 0201 	orrs.w	r2, r0, r1
     b00:	bf08      	it	eq
     b02:	4770      	bxeq	lr
     b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b08:	d502      	bpl.n	b10 <__aeabi_l2f+0x14>
     b0a:	4240      	negs	r0, r0
     b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b10:	ea5f 0c01 	movs.w	ip, r1
     b14:	bf02      	ittt	eq
     b16:	4684      	moveq	ip, r0
     b18:	4601      	moveq	r1, r0
     b1a:	2000      	moveq	r0, #0
     b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b20:	bf08      	it	eq
     b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b2a:	fabc f28c 	clz	r2, ip
     b2e:	3a08      	subs	r2, #8
     b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     b34:	db10      	blt.n	b58 <__aeabi_l2f+0x5c>
     b36:	fa01 fc02 	lsl.w	ip, r1, r2
     b3a:	4463      	add	r3, ip
     b3c:	fa00 fc02 	lsl.w	ip, r0, r2
     b40:	f1c2 0220 	rsb	r2, r2, #32
     b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     b48:	fa20 f202 	lsr.w	r2, r0, r2
     b4c:	eb43 0002 	adc.w	r0, r3, r2
     b50:	bf08      	it	eq
     b52:	f020 0001 	biceq.w	r0, r0, #1
     b56:	4770      	bx	lr
     b58:	f102 0220 	add.w	r2, r2, #32
     b5c:	fa01 fc02 	lsl.w	ip, r1, r2
     b60:	f1c2 0220 	rsb	r2, r2, #32
     b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     b68:	fa21 f202 	lsr.w	r2, r1, r2
     b6c:	eb43 0002 	adc.w	r0, r3, r2
     b70:	bf08      	it	eq
     b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b76:	4770      	bx	lr

00000b78 <__aeabi_ldivmod>:
     b78:	b97b      	cbnz	r3, b9a <__aeabi_ldivmod+0x22>
     b7a:	b972      	cbnz	r2, b9a <__aeabi_ldivmod+0x22>
     b7c:	2900      	cmp	r1, #0
     b7e:	bfbe      	ittt	lt
     b80:	2000      	movlt	r0, #0
     b82:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     b86:	e006      	blt.n	b96 <__aeabi_ldivmod+0x1e>
     b88:	bf08      	it	eq
     b8a:	2800      	cmpeq	r0, #0
     b8c:	bf1c      	itt	ne
     b8e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     b92:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     b96:	f000 b857 	b.w	c48 <__aeabi_idiv0>
     b9a:	f1ad 0c08 	sub.w	ip, sp, #8
     b9e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ba2:	2900      	cmp	r1, #0
     ba4:	db09      	blt.n	bba <__aeabi_ldivmod+0x42>
     ba6:	2b00      	cmp	r3, #0
     ba8:	db1a      	blt.n	be0 <__aeabi_ldivmod+0x68>
     baa:	f000 f915 	bl	dd8 <__udivmoddi4>
     bae:	f8dd e004 	ldr.w	lr, [sp, #4]
     bb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bb6:	b004      	add	sp, #16
     bb8:	4770      	bx	lr
     bba:	4240      	negs	r0, r0
     bbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bc0:	2b00      	cmp	r3, #0
     bc2:	db1b      	blt.n	bfc <__aeabi_ldivmod+0x84>
     bc4:	f000 f908 	bl	dd8 <__udivmoddi4>
     bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
     bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bd0:	b004      	add	sp, #16
     bd2:	4240      	negs	r0, r0
     bd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bd8:	4252      	negs	r2, r2
     bda:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     bde:	4770      	bx	lr
     be0:	4252      	negs	r2, r2
     be2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     be6:	f000 f8f7 	bl	dd8 <__udivmoddi4>
     bea:	f8dd e004 	ldr.w	lr, [sp, #4]
     bee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     bf2:	b004      	add	sp, #16
     bf4:	4240      	negs	r0, r0
     bf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     bfa:	4770      	bx	lr
     bfc:	4252      	negs	r2, r2
     bfe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c02:	f000 f8e9 	bl	dd8 <__udivmoddi4>
     c06:	f8dd e004 	ldr.w	lr, [sp, #4]
     c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c0e:	b004      	add	sp, #16
     c10:	4252      	negs	r2, r2
     c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c16:	4770      	bx	lr

00000c18 <__aeabi_uldivmod>:
     c18:	b953      	cbnz	r3, c30 <__aeabi_uldivmod+0x18>
     c1a:	b94a      	cbnz	r2, c30 <__aeabi_uldivmod+0x18>
     c1c:	2900      	cmp	r1, #0
     c1e:	bf08      	it	eq
     c20:	2800      	cmpeq	r0, #0
     c22:	bf1c      	itt	ne
     c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     c2c:	f000 b80c 	b.w	c48 <__aeabi_idiv0>
     c30:	f1ad 0c08 	sub.w	ip, sp, #8
     c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     c38:	f000 f8ce 	bl	dd8 <__udivmoddi4>
     c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
     c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     c44:	b004      	add	sp, #16
     c46:	4770      	bx	lr

00000c48 <__aeabi_idiv0>:
     c48:	4770      	bx	lr
     c4a:	bf00      	nop

00000c4c <__gedf2>:
     c4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     c50:	e006      	b.n	c60 <__cmpdf2+0x4>
     c52:	bf00      	nop

00000c54 <__ledf2>:
     c54:	f04f 0c01 	mov.w	ip, #1
     c58:	e002      	b.n	c60 <__cmpdf2+0x4>
     c5a:	bf00      	nop

00000c5c <__cmpdf2>:
     c5c:	f04f 0c01 	mov.w	ip, #1
     c60:	f84d cd04 	str.w	ip, [sp, #-4]!
     c64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     c68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     c6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     c70:	bf18      	it	ne
     c72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     c76:	d01b      	beq.n	cb0 <__cmpdf2+0x54>
     c78:	b001      	add	sp, #4
     c7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     c7e:	bf0c      	ite	eq
     c80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     c84:	ea91 0f03 	teqne	r1, r3
     c88:	bf02      	ittt	eq
     c8a:	ea90 0f02 	teqeq	r0, r2
     c8e:	2000      	moveq	r0, #0
     c90:	4770      	bxeq	lr
     c92:	f110 0f00 	cmn.w	r0, #0
     c96:	ea91 0f03 	teq	r1, r3
     c9a:	bf58      	it	pl
     c9c:	4299      	cmppl	r1, r3
     c9e:	bf08      	it	eq
     ca0:	4290      	cmpeq	r0, r2
     ca2:	bf2c      	ite	cs
     ca4:	17d8      	asrcs	r0, r3, #31
     ca6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     caa:	f040 0001 	orr.w	r0, r0, #1
     cae:	4770      	bx	lr
     cb0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     cb4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     cb8:	d102      	bne.n	cc0 <__cmpdf2+0x64>
     cba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     cbe:	d107      	bne.n	cd0 <__cmpdf2+0x74>
     cc0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     cc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     cc8:	d1d6      	bne.n	c78 <__cmpdf2+0x1c>
     cca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     cce:	d0d3      	beq.n	c78 <__cmpdf2+0x1c>
     cd0:	f85d 0b04 	ldr.w	r0, [sp], #4
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop

00000cd8 <__aeabi_cdrcmple>:
     cd8:	4684      	mov	ip, r0
     cda:	4610      	mov	r0, r2
     cdc:	4662      	mov	r2, ip
     cde:	468c      	mov	ip, r1
     ce0:	4619      	mov	r1, r3
     ce2:	4663      	mov	r3, ip
     ce4:	e000      	b.n	ce8 <__aeabi_cdcmpeq>
     ce6:	bf00      	nop

00000ce8 <__aeabi_cdcmpeq>:
     ce8:	b501      	push	{r0, lr}
     cea:	f7ff ffb7 	bl	c5c <__cmpdf2>
     cee:	2800      	cmp	r0, #0
     cf0:	bf48      	it	mi
     cf2:	f110 0f00 	cmnmi.w	r0, #0
     cf6:	bd01      	pop	{r0, pc}

00000cf8 <__aeabi_dcmpeq>:
     cf8:	f84d ed08 	str.w	lr, [sp, #-8]!
     cfc:	f7ff fff4 	bl	ce8 <__aeabi_cdcmpeq>
     d00:	bf0c      	ite	eq
     d02:	2001      	moveq	r0, #1
     d04:	2000      	movne	r0, #0
     d06:	f85d fb08 	ldr.w	pc, [sp], #8
     d0a:	bf00      	nop

00000d0c <__aeabi_dcmplt>:
     d0c:	f84d ed08 	str.w	lr, [sp, #-8]!
     d10:	f7ff ffea 	bl	ce8 <__aeabi_cdcmpeq>
     d14:	bf34      	ite	cc
     d16:	2001      	movcc	r0, #1
     d18:	2000      	movcs	r0, #0
     d1a:	f85d fb08 	ldr.w	pc, [sp], #8
     d1e:	bf00      	nop

00000d20 <__aeabi_dcmple>:
     d20:	f84d ed08 	str.w	lr, [sp, #-8]!
     d24:	f7ff ffe0 	bl	ce8 <__aeabi_cdcmpeq>
     d28:	bf94      	ite	ls
     d2a:	2001      	movls	r0, #1
     d2c:	2000      	movhi	r0, #0
     d2e:	f85d fb08 	ldr.w	pc, [sp], #8
     d32:	bf00      	nop

00000d34 <__aeabi_dcmpge>:
     d34:	f84d ed08 	str.w	lr, [sp, #-8]!
     d38:	f7ff ffce 	bl	cd8 <__aeabi_cdrcmple>
     d3c:	bf94      	ite	ls
     d3e:	2001      	movls	r0, #1
     d40:	2000      	movhi	r0, #0
     d42:	f85d fb08 	ldr.w	pc, [sp], #8
     d46:	bf00      	nop

00000d48 <__aeabi_dcmpgt>:
     d48:	f84d ed08 	str.w	lr, [sp, #-8]!
     d4c:	f7ff ffc4 	bl	cd8 <__aeabi_cdrcmple>
     d50:	bf34      	ite	cc
     d52:	2001      	movcc	r0, #1
     d54:	2000      	movcs	r0, #0
     d56:	f85d fb08 	ldr.w	pc, [sp], #8
     d5a:	bf00      	nop

00000d5c <__aeabi_dcmpun>:
     d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     d64:	d102      	bne.n	d6c <__aeabi_dcmpun+0x10>
     d66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     d6a:	d10a      	bne.n	d82 <__aeabi_dcmpun+0x26>
     d6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     d70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     d74:	d102      	bne.n	d7c <__aeabi_dcmpun+0x20>
     d76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     d7a:	d102      	bne.n	d82 <__aeabi_dcmpun+0x26>
     d7c:	f04f 0000 	mov.w	r0, #0
     d80:	4770      	bx	lr
     d82:	f04f 0001 	mov.w	r0, #1
     d86:	4770      	bx	lr

00000d88 <__aeabi_d2iz>:
     d88:	ea4f 0241 	mov.w	r2, r1, lsl #1
     d8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     d90:	d215      	bcs.n	dbe <__aeabi_d2iz+0x36>
     d92:	d511      	bpl.n	db8 <__aeabi_d2iz+0x30>
     d94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     d98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     d9c:	d912      	bls.n	dc4 <__aeabi_d2iz+0x3c>
     d9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     da2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     da6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     daa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     dae:	fa23 f002 	lsr.w	r0, r3, r2
     db2:	bf18      	it	ne
     db4:	4240      	negne	r0, r0
     db6:	4770      	bx	lr
     db8:	f04f 0000 	mov.w	r0, #0
     dbc:	4770      	bx	lr
     dbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     dc2:	d105      	bne.n	dd0 <__aeabi_d2iz+0x48>
     dc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     dc8:	bf08      	it	eq
     dca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     dce:	4770      	bx	lr
     dd0:	f04f 0000 	mov.w	r0, #0
     dd4:	4770      	bx	lr
     dd6:	bf00      	nop

00000dd8 <__udivmoddi4>:
     dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ddc:	4607      	mov	r7, r0
     dde:	468c      	mov	ip, r1
     de0:	4608      	mov	r0, r1
     de2:	9e09      	ldr	r6, [sp, #36]	; 0x24
     de4:	4615      	mov	r5, r2
     de6:	463c      	mov	r4, r7
     de8:	4619      	mov	r1, r3
     dea:	2b00      	cmp	r3, #0
     dec:	f040 80c6 	bne.w	f7c <__udivmoddi4+0x1a4>
     df0:	4282      	cmp	r2, r0
     df2:	fab2 f782 	clz	r7, r2
     df6:	d946      	bls.n	e86 <__udivmoddi4+0xae>
     df8:	b14f      	cbz	r7, e0e <__udivmoddi4+0x36>
     dfa:	f1c7 0e20 	rsb	lr, r7, #32
     dfe:	fa24 fe0e 	lsr.w	lr, r4, lr
     e02:	fa00 f307 	lsl.w	r3, r0, r7
     e06:	40bd      	lsls	r5, r7
     e08:	ea4e 0c03 	orr.w	ip, lr, r3
     e0c:	40bc      	lsls	r4, r7
     e0e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     e12:	fa1f fe85 	uxth.w	lr, r5
     e16:	fbbc f9f8 	udiv	r9, ip, r8
     e1a:	0c22      	lsrs	r2, r4, #16
     e1c:	fb08 c319 	mls	r3, r8, r9, ip
     e20:	fb09 fa0e 	mul.w	sl, r9, lr
     e24:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     e28:	459a      	cmp	sl, r3
     e2a:	d928      	bls.n	e7e <__udivmoddi4+0xa6>
     e2c:	18eb      	adds	r3, r5, r3
     e2e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     e32:	d204      	bcs.n	e3e <__udivmoddi4+0x66>
     e34:	459a      	cmp	sl, r3
     e36:	d902      	bls.n	e3e <__udivmoddi4+0x66>
     e38:	f1a9 0002 	sub.w	r0, r9, #2
     e3c:	442b      	add	r3, r5
     e3e:	eba3 030a 	sub.w	r3, r3, sl
     e42:	b2a4      	uxth	r4, r4
     e44:	fbb3 f2f8 	udiv	r2, r3, r8
     e48:	fb08 3312 	mls	r3, r8, r2, r3
     e4c:	fb02 fe0e 	mul.w	lr, r2, lr
     e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e54:	45a6      	cmp	lr, r4
     e56:	d914      	bls.n	e82 <__udivmoddi4+0xaa>
     e58:	192c      	adds	r4, r5, r4
     e5a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     e5e:	d203      	bcs.n	e68 <__udivmoddi4+0x90>
     e60:	45a6      	cmp	lr, r4
     e62:	d901      	bls.n	e68 <__udivmoddi4+0x90>
     e64:	1e93      	subs	r3, r2, #2
     e66:	442c      	add	r4, r5
     e68:	eba4 040e 	sub.w	r4, r4, lr
     e6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     e70:	b11e      	cbz	r6, e7a <__udivmoddi4+0xa2>
     e72:	40fc      	lsrs	r4, r7
     e74:	2300      	movs	r3, #0
     e76:	6034      	str	r4, [r6, #0]
     e78:	6073      	str	r3, [r6, #4]
     e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e7e:	4648      	mov	r0, r9
     e80:	e7dd      	b.n	e3e <__udivmoddi4+0x66>
     e82:	4613      	mov	r3, r2
     e84:	e7f0      	b.n	e68 <__udivmoddi4+0x90>
     e86:	b902      	cbnz	r2, e8a <__udivmoddi4+0xb2>
     e88:	deff      	udf	#255	; 0xff
     e8a:	bb87      	cbnz	r7, eee <__udivmoddi4+0x116>
     e8c:	1a83      	subs	r3, r0, r2
     e8e:	2101      	movs	r1, #1
     e90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     e94:	b2aa      	uxth	r2, r5
     e96:	fbb3 fcfe 	udiv	ip, r3, lr
     e9a:	0c20      	lsrs	r0, r4, #16
     e9c:	fb0e 331c 	mls	r3, lr, ip, r3
     ea0:	fb0c f802 	mul.w	r8, ip, r2
     ea4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     ea8:	4598      	cmp	r8, r3
     eaa:	d963      	bls.n	f74 <__udivmoddi4+0x19c>
     eac:	18eb      	adds	r3, r5, r3
     eae:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     eb2:	d204      	bcs.n	ebe <__udivmoddi4+0xe6>
     eb4:	4598      	cmp	r8, r3
     eb6:	d902      	bls.n	ebe <__udivmoddi4+0xe6>
     eb8:	f1ac 0002 	sub.w	r0, ip, #2
     ebc:	442b      	add	r3, r5
     ebe:	eba3 0308 	sub.w	r3, r3, r8
     ec2:	b2a4      	uxth	r4, r4
     ec4:	fbb3 fcfe 	udiv	ip, r3, lr
     ec8:	fb0e 331c 	mls	r3, lr, ip, r3
     ecc:	fb0c f202 	mul.w	r2, ip, r2
     ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     ed4:	42a2      	cmp	r2, r4
     ed6:	d94f      	bls.n	f78 <__udivmoddi4+0x1a0>
     ed8:	192c      	adds	r4, r5, r4
     eda:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     ede:	d204      	bcs.n	eea <__udivmoddi4+0x112>
     ee0:	42a2      	cmp	r2, r4
     ee2:	d902      	bls.n	eea <__udivmoddi4+0x112>
     ee4:	f1ac 0302 	sub.w	r3, ip, #2
     ee8:	442c      	add	r4, r5
     eea:	1aa4      	subs	r4, r4, r2
     eec:	e7be      	b.n	e6c <__udivmoddi4+0x94>
     eee:	f1c7 0c20 	rsb	ip, r7, #32
     ef2:	fa20 f80c 	lsr.w	r8, r0, ip
     ef6:	fa00 f307 	lsl.w	r3, r0, r7
     efa:	fa24 fc0c 	lsr.w	ip, r4, ip
     efe:	40bd      	lsls	r5, r7
     f00:	ea4c 0203 	orr.w	r2, ip, r3
     f04:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     f08:	b2ab      	uxth	r3, r5
     f0a:	fbb8 fcfe 	udiv	ip, r8, lr
     f0e:	0c11      	lsrs	r1, r2, #16
     f10:	fb0e 801c 	mls	r0, lr, ip, r8
     f14:	fb0c f903 	mul.w	r9, ip, r3
     f18:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     f1c:	4581      	cmp	r9, r0
     f1e:	fa04 f407 	lsl.w	r4, r4, r7
     f22:	d923      	bls.n	f6c <__udivmoddi4+0x194>
     f24:	1828      	adds	r0, r5, r0
     f26:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     f2a:	d204      	bcs.n	f36 <__udivmoddi4+0x15e>
     f2c:	4581      	cmp	r9, r0
     f2e:	d902      	bls.n	f36 <__udivmoddi4+0x15e>
     f30:	f1ac 0102 	sub.w	r1, ip, #2
     f34:	4428      	add	r0, r5
     f36:	eba0 0009 	sub.w	r0, r0, r9
     f3a:	b292      	uxth	r2, r2
     f3c:	fbb0 fcfe 	udiv	ip, r0, lr
     f40:	fb0e 001c 	mls	r0, lr, ip, r0
     f44:	fb0c f803 	mul.w	r8, ip, r3
     f48:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     f4c:	4598      	cmp	r8, r3
     f4e:	d90f      	bls.n	f70 <__udivmoddi4+0x198>
     f50:	18eb      	adds	r3, r5, r3
     f52:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     f56:	d204      	bcs.n	f62 <__udivmoddi4+0x18a>
     f58:	4598      	cmp	r8, r3
     f5a:	d902      	bls.n	f62 <__udivmoddi4+0x18a>
     f5c:	f1ac 0202 	sub.w	r2, ip, #2
     f60:	442b      	add	r3, r5
     f62:	eba3 0308 	sub.w	r3, r3, r8
     f66:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     f6a:	e791      	b.n	e90 <__udivmoddi4+0xb8>
     f6c:	4661      	mov	r1, ip
     f6e:	e7e2      	b.n	f36 <__udivmoddi4+0x15e>
     f70:	4662      	mov	r2, ip
     f72:	e7f6      	b.n	f62 <__udivmoddi4+0x18a>
     f74:	4660      	mov	r0, ip
     f76:	e7a2      	b.n	ebe <__udivmoddi4+0xe6>
     f78:	4663      	mov	r3, ip
     f7a:	e7b6      	b.n	eea <__udivmoddi4+0x112>
     f7c:	4283      	cmp	r3, r0
     f7e:	d905      	bls.n	f8c <__udivmoddi4+0x1b4>
     f80:	b10e      	cbz	r6, f86 <__udivmoddi4+0x1ae>
     f82:	e9c6 7000 	strd	r7, r0, [r6]
     f86:	2100      	movs	r1, #0
     f88:	4608      	mov	r0, r1
     f8a:	e776      	b.n	e7a <__udivmoddi4+0xa2>
     f8c:	fab3 f183 	clz	r1, r3
     f90:	b981      	cbnz	r1, fb4 <__udivmoddi4+0x1dc>
     f92:	4283      	cmp	r3, r0
     f94:	d301      	bcc.n	f9a <__udivmoddi4+0x1c2>
     f96:	42ba      	cmp	r2, r7
     f98:	d80a      	bhi.n	fb0 <__udivmoddi4+0x1d8>
     f9a:	1abc      	subs	r4, r7, r2
     f9c:	eb60 0303 	sbc.w	r3, r0, r3
     fa0:	2001      	movs	r0, #1
     fa2:	469c      	mov	ip, r3
     fa4:	2e00      	cmp	r6, #0
     fa6:	d068      	beq.n	107a <__udivmoddi4+0x2a2>
     fa8:	e9c6 4c00 	strd	r4, ip, [r6]
     fac:	2100      	movs	r1, #0
     fae:	e764      	b.n	e7a <__udivmoddi4+0xa2>
     fb0:	4608      	mov	r0, r1
     fb2:	e7f7      	b.n	fa4 <__udivmoddi4+0x1cc>
     fb4:	f1c1 0c20 	rsb	ip, r1, #32
     fb8:	408b      	lsls	r3, r1
     fba:	fa22 f40c 	lsr.w	r4, r2, ip
     fbe:	431c      	orrs	r4, r3
     fc0:	fa02 f501 	lsl.w	r5, r2, r1
     fc4:	fa00 f301 	lsl.w	r3, r0, r1
     fc8:	fa27 f20c 	lsr.w	r2, r7, ip
     fcc:	fa20 fb0c 	lsr.w	fp, r0, ip
     fd0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     fd4:	4313      	orrs	r3, r2
     fd6:	fbbb f8f9 	udiv	r8, fp, r9
     fda:	fa1f fe84 	uxth.w	lr, r4
     fde:	fb09 bb18 	mls	fp, r9, r8, fp
     fe2:	0c1a      	lsrs	r2, r3, #16
     fe4:	fb08 fa0e 	mul.w	sl, r8, lr
     fe8:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     fec:	4592      	cmp	sl, r2
     fee:	fa07 f701 	lsl.w	r7, r7, r1
     ff2:	d93e      	bls.n	1072 <__udivmoddi4+0x29a>
     ff4:	18a2      	adds	r2, r4, r2
     ff6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     ffa:	d204      	bcs.n	1006 <__udivmoddi4+0x22e>
     ffc:	4592      	cmp	sl, r2
     ffe:	d902      	bls.n	1006 <__udivmoddi4+0x22e>
    1000:	f1a8 0002 	sub.w	r0, r8, #2
    1004:	4422      	add	r2, r4
    1006:	eba2 020a 	sub.w	r2, r2, sl
    100a:	b29b      	uxth	r3, r3
    100c:	fbb2 f8f9 	udiv	r8, r2, r9
    1010:	fb09 2218 	mls	r2, r9, r8, r2
    1014:	fb08 fe0e 	mul.w	lr, r8, lr
    1018:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
    101c:	4596      	cmp	lr, r2
    101e:	d92a      	bls.n	1076 <__udivmoddi4+0x29e>
    1020:	18a2      	adds	r2, r4, r2
    1022:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
    1026:	d204      	bcs.n	1032 <__udivmoddi4+0x25a>
    1028:	4596      	cmp	lr, r2
    102a:	d902      	bls.n	1032 <__udivmoddi4+0x25a>
    102c:	f1a8 0302 	sub.w	r3, r8, #2
    1030:	4422      	add	r2, r4
    1032:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    1036:	fba0 9305 	umull	r9, r3, r0, r5
    103a:	eba2 020e 	sub.w	r2, r2, lr
    103e:	429a      	cmp	r2, r3
    1040:	46ce      	mov	lr, r9
    1042:	4698      	mov	r8, r3
    1044:	d302      	bcc.n	104c <__udivmoddi4+0x274>
    1046:	d106      	bne.n	1056 <__udivmoddi4+0x27e>
    1048:	454f      	cmp	r7, r9
    104a:	d204      	bcs.n	1056 <__udivmoddi4+0x27e>
    104c:	ebb9 0e05 	subs.w	lr, r9, r5
    1050:	eb63 0804 	sbc.w	r8, r3, r4
    1054:	3801      	subs	r0, #1
    1056:	b186      	cbz	r6, 107a <__udivmoddi4+0x2a2>
    1058:	ebb7 030e 	subs.w	r3, r7, lr
    105c:	eb62 0708 	sbc.w	r7, r2, r8
    1060:	fa07 fc0c 	lsl.w	ip, r7, ip
    1064:	40cb      	lsrs	r3, r1
    1066:	ea4c 0303 	orr.w	r3, ip, r3
    106a:	40cf      	lsrs	r7, r1
    106c:	e9c6 3700 	strd	r3, r7, [r6]
    1070:	e79c      	b.n	fac <__udivmoddi4+0x1d4>
    1072:	4640      	mov	r0, r8
    1074:	e7c7      	b.n	1006 <__udivmoddi4+0x22e>
    1076:	4643      	mov	r3, r8
    1078:	e7db      	b.n	1032 <__udivmoddi4+0x25a>
    107a:	4631      	mov	r1, r6
    107c:	e6fd      	b.n	e7a <__udivmoddi4+0xa2>

0000107e <strcmp>:
    107e:	f810 2b01 	ldrb.w	r2, [r0], #1
    1082:	f811 3b01 	ldrb.w	r3, [r1], #1
    1086:	2a01      	cmp	r2, #1
    1088:	bf28      	it	cs
    108a:	429a      	cmpcs	r2, r3
    108c:	d0f7      	beq.n	107e <strcmp>
    108e:	1ad0      	subs	r0, r2, r3
    1090:	4770      	bx	lr

00001092 <strlen>:
    1092:	4603      	mov	r3, r0
    1094:	f813 2b01 	ldrb.w	r2, [r3], #1
    1098:	2a00      	cmp	r2, #0
    109a:	d1fb      	bne.n	1094 <strlen+0x2>
    109c:	1a18      	subs	r0, r3, r0
    109e:	3801      	subs	r0, #1
    10a0:	4770      	bx	lr
    10a2:	0000      	movs	r0, r0
    10a4:	0000      	movs	r0, r0
	...

000010a8 <read_hts>:
        }
    }
}

double read_hts(int sensor)
{
    10a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    struct sensor_value temp, hum;
    if (sensor_sample_fetch(hts) < 0)
    10aa:	4d1f      	ldr	r5, [pc, #124]	; (1128 <read_hts+0x80>)
{
    10ac:	4604      	mov	r4, r0
    if (sensor_sample_fetch(hts) < 0)
    10ae:	6828      	ldr	r0, [r5, #0]
    10b0:	f026 feda 	bl	27e68 <sensor_sample_fetch>
    10b4:	2800      	cmp	r0, #0
    10b6:	da04      	bge.n	10c2 <read_hts+0x1a>
    {
        printk("Sensor sample update error\n");
    10b8:	481c      	ldr	r0, [pc, #112]	; (112c <read_hts+0x84>)
        printk("Cannot read HTS221 temperature channel\n");
        return;
    }
    if (sensor_channel_get(hts, SENSOR_CHAN_HUMIDITY, &hum) < 0)
    {
        printk("Cannot read HTS221 humidity channel\n");
    10ba:	f026 ff75 	bl	27fa8 <printk>
    }
    else if (sensor == 0x02)
    {
        return hum_value;
    }
}
    10be:	b004      	add	sp, #16
    10c0:	bd70      	pop	{r4, r5, r6, pc}
    if (sensor_channel_get(hts, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0)
    10c2:	6828      	ldr	r0, [r5, #0]
    10c4:	466a      	mov	r2, sp
    10c6:	210d      	movs	r1, #13
    10c8:	f026 fed2 	bl	27e70 <sensor_channel_get>
    10cc:	2800      	cmp	r0, #0
    10ce:	da01      	bge.n	10d4 <read_hts+0x2c>
        printk("Cannot read HTS221 temperature channel\n");
    10d0:	4817      	ldr	r0, [pc, #92]	; (1130 <read_hts+0x88>)
    10d2:	e7f2      	b.n	10ba <read_hts+0x12>
    if (sensor_channel_get(hts, SENSOR_CHAN_HUMIDITY, &hum) < 0)
    10d4:	6828      	ldr	r0, [r5, #0]
    10d6:	aa02      	add	r2, sp, #8
    10d8:	2110      	movs	r1, #16
    10da:	f026 fec9 	bl	27e70 <sensor_channel_get>
    10de:	2800      	cmp	r0, #0
    10e0:	da01      	bge.n	10e6 <read_hts+0x3e>
        printk("Cannot read HTS221 humidity channel\n");
    10e2:	4814      	ldr	r0, [pc, #80]	; (1134 <read_hts+0x8c>)
    10e4:	e7e9      	b.n	10ba <read_hts+0x12>
    if (sensor == 0x01)
    10e6:	2c01      	cmp	r4, #1
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(const struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    10e8:	e9dd 6000 	ldrd	r6, r0, [sp]
    10ec:	d003      	beq.n	10f6 <read_hts+0x4e>
    else if (sensor == 0x02)
    10ee:	2c02      	cmp	r4, #2
    10f0:	e9dd 6002 	ldrd	r6, r0, [sp, #8]
    10f4:	d1e3      	bne.n	10be <read_hts+0x16>
    10f6:	f7ff f995 	bl	424 <__aeabi_i2d>
    10fa:	a309      	add	r3, pc, #36	; (adr r3, 1120 <read_hts+0x78>)
    10fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    1100:	f7ff fb24 	bl	74c <__aeabi_ddiv>
    1104:	4604      	mov	r4, r0
    1106:	4630      	mov	r0, r6
    1108:	460d      	mov	r5, r1
    110a:	f7ff f98b 	bl	424 <__aeabi_i2d>
    110e:	4602      	mov	r2, r0
    1110:	460b      	mov	r3, r1
    1112:	4620      	mov	r0, r4
    1114:	4629      	mov	r1, r5
    1116:	f7ff f839 	bl	18c <__adddf3>
    111a:	e7d0      	b.n	10be <read_hts+0x16>
    111c:	f3af 8000 	nop.w
    1120:	00000000 	.word	0x00000000
    1124:	412e8480 	.word	0x412e8480
    1128:	200021b8 	.word	0x200021b8
    112c:	000316e1 	.word	0x000316e1
    1130:	000316fd 	.word	0x000316fd
    1134:	00031725 	.word	0x00031725

00001138 <read_lps>:
{
    lps = device_get_binding(DT_LABEL(DT_INST(0, st_lps22hb_press)));
}

double read_lps(void)
{
    1138:	b530      	push	{r4, r5, lr}
    struct sensor_value pressure, temp;

    if (sensor_sample_fetch(lps) < 0)
    113a:	4c1b      	ldr	r4, [pc, #108]	; (11a8 <read_lps+0x70>)
{
    113c:	b085      	sub	sp, #20
    if (sensor_sample_fetch(lps) < 0)
    113e:	6820      	ldr	r0, [r4, #0]
    1140:	f026 fe92 	bl	27e68 <sensor_sample_fetch>
    1144:	2800      	cmp	r0, #0
    1146:	da04      	bge.n	1152 <read_lps+0x1a>
    {
        printk("Sensor sample update error\n");
    1148:	4818      	ldr	r0, [pc, #96]	; (11ac <read_lps+0x74>)
        return;
    }

    if (sensor_channel_get(lps, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0)
    {
        printk("Cannot read LPS22HB temperature channel\n");
    114a:	f026 ff2d 	bl	27fa8 <printk>
        return;
    }

    double pressure_value = sensor_value_to_double(&pressure);
    return pressure_value;
}
    114e:	b005      	add	sp, #20
    1150:	bd30      	pop	{r4, r5, pc}
    if (sensor_channel_get(lps, SENSOR_CHAN_PRESS, &pressure) < 0)
    1152:	6820      	ldr	r0, [r4, #0]
    1154:	466a      	mov	r2, sp
    1156:	210e      	movs	r1, #14
    1158:	f026 fe8a 	bl	27e70 <sensor_channel_get>
    115c:	2800      	cmp	r0, #0
    115e:	da01      	bge.n	1164 <read_lps+0x2c>
        printk("Cannot read LPS22HB pressure channel\n");
    1160:	4813      	ldr	r0, [pc, #76]	; (11b0 <read_lps+0x78>)
    1162:	e7f2      	b.n	114a <read_lps+0x12>
    if (sensor_channel_get(lps, SENSOR_CHAN_AMBIENT_TEMP, &temp) < 0)
    1164:	6820      	ldr	r0, [r4, #0]
    1166:	aa02      	add	r2, sp, #8
    1168:	210d      	movs	r1, #13
    116a:	f026 fe81 	bl	27e70 <sensor_channel_get>
    116e:	2800      	cmp	r0, #0
    1170:	da01      	bge.n	1176 <read_lps+0x3e>
        printk("Cannot read LPS22HB temperature channel\n");
    1172:	4810      	ldr	r0, [pc, #64]	; (11b4 <read_lps+0x7c>)
    1174:	e7e9      	b.n	114a <read_lps+0x12>
    1176:	9801      	ldr	r0, [sp, #4]
    1178:	f7ff f954 	bl	424 <__aeabi_i2d>
    117c:	a308      	add	r3, pc, #32	; (adr r3, 11a0 <read_lps+0x68>)
    117e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1182:	f7ff fae3 	bl	74c <__aeabi_ddiv>
    1186:	4604      	mov	r4, r0
    1188:	9800      	ldr	r0, [sp, #0]
    118a:	460d      	mov	r5, r1
    118c:	f7ff f94a 	bl	424 <__aeabi_i2d>
    1190:	4602      	mov	r2, r0
    1192:	460b      	mov	r3, r1
    1194:	4620      	mov	r0, r4
    1196:	4629      	mov	r1, r5
    1198:	f7fe fff8 	bl	18c <__adddf3>
    return pressure_value;
    119c:	e7d7      	b.n	114e <read_lps+0x16>
    119e:	bf00      	nop
    11a0:	00000000 	.word	0x00000000
    11a4:	412e8480 	.word	0x412e8480
    11a8:	200021c0 	.word	0x200021c0
    11ac:	000316e1 	.word	0x000316e1
    11b0:	00031752 	.word	0x00031752
    11b4:	00031778 	.word	0x00031778

000011b8 <read_ccs>:
        app_fw_2 = (cfgver.fw_app_version >> 8) > 0x11;
    }
}

double read_ccs(void)
{
    11b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    struct sensor_value tvoc;
    int rc = 0;
    if (rc == 0)
    {
        rc = sensor_sample_fetch(ccs);
    11ba:	4c13      	ldr	r4, [pc, #76]	; (1208 <read_ccs+0x50>)
    11bc:	6820      	ldr	r0, [r4, #0]
    11be:	f026 fe53 	bl	27e68 <sensor_sample_fetch>
    }

    const struct ccs811_result_type *rp = ccs811_result(ccs);
    11c2:	6820      	ldr	r0, [r4, #0]
    11c4:	f02c f816 	bl	2d1f4 <ccs811_result>

    sensor_channel_get(ccs, SENSOR_CHAN_VOC, &tvoc);
    11c8:	466a      	mov	r2, sp
    11ca:	6820      	ldr	r0, [r4, #0]
    11cc:	211c      	movs	r1, #28
    11ce:	f026 fe4f 	bl	27e70 <sensor_channel_get>
    11d2:	9801      	ldr	r0, [sp, #4]
    11d4:	f7ff f926 	bl	424 <__aeabi_i2d>
    11d8:	a309      	add	r3, pc, #36	; (adr r3, 1200 <read_ccs+0x48>)
    11da:	e9d3 2300 	ldrd	r2, r3, [r3]
    11de:	f7ff fab5 	bl	74c <__aeabi_ddiv>
    11e2:	4604      	mov	r4, r0
    11e4:	9800      	ldr	r0, [sp, #0]
    11e6:	460d      	mov	r5, r1
    11e8:	f7ff f91c 	bl	424 <__aeabi_i2d>
    11ec:	4602      	mov	r2, r0
    11ee:	460b      	mov	r3, r1
    11f0:	4620      	mov	r0, r4
    11f2:	4629      	mov	r1, r5
    11f4:	f7fe ffca 	bl	18c <__adddf3>

    double voc_value = sensor_value_to_double(&tvoc);
    return voc_value;
}
    11f8:	b003      	add	sp, #12
    11fa:	bd30      	pop	{r4, r5, pc}
    11fc:	f3af 8000 	nop.w
    1200:	00000000 	.word	0x00000000
    1204:	412e8480 	.word	0x412e8480
    1208:	200021b4 	.word	0x200021b4
    120c:	00000000 	.word	0x00000000

00001210 <read_lis>:
        return;
    }
}

double read_lis(int sensor)
{
    1210:	b570      	push	{r4, r5, r6, lr}
    printk("readin\n");
    struct sensor_value accel[3];
    const char *overrun = "";
    int rc = sensor_sample_fetch(lis);
    1212:	4e2f      	ldr	r6, [pc, #188]	; (12d0 <read_lis+0xc0>)
{
    1214:	b086      	sub	sp, #24
    1216:	4604      	mov	r4, r0
    printk("readin\n");
    1218:	482e      	ldr	r0, [pc, #184]	; (12d4 <read_lis+0xc4>)
    121a:	f026 fec5 	bl	27fa8 <printk>
    int rc = sensor_sample_fetch(lis);
    121e:	6830      	ldr	r0, [r6, #0]
    1220:	f026 fe22 	bl	27e68 <sensor_sample_fetch>
    1224:	4605      	mov	r5, r0
    printk("oop");
    1226:	482c      	ldr	r0, [pc, #176]	; (12d8 <read_lis+0xc8>)
    1228:	f026 febe 	bl	27fa8 <printk>
    if (rc == -EBADMSG)
    122c:	f115 0f4d 	cmn.w	r5, #77	; 0x4d
    1230:	d000      	beq.n	1234 <read_lis+0x24>
        {
            overrun = "[OVERRUN] ";
        }
        rc = 0;
    }
    if (rc == 0)
    1232:	b925      	cbnz	r5, 123e <read_lis+0x2e>
    {
        rc = sensor_channel_get(lis,
    1234:	6830      	ldr	r0, [r6, #0]
    1236:	466a      	mov	r2, sp
    1238:	2103      	movs	r1, #3
    123a:	f026 fe19 	bl	27e70 <sensor_channel_get>
    }

    double x_value = sensor_value_to_double(&accel[0]);
    double y_value = sensor_value_to_double(&accel[1]);
    double z_value = sensor_value_to_double(&accel[2]);
    if (sensor == 0x05)
    123e:	2c05      	cmp	r4, #5
    1240:	d11b      	bne.n	127a <read_lis+0x6a>
    1242:	9801      	ldr	r0, [sp, #4]
    1244:	f7ff f8ee 	bl	424 <__aeabi_i2d>
    1248:	a31f      	add	r3, pc, #124	; (adr r3, 12c8 <read_lis+0xb8>)
    124a:	e9d3 2300 	ldrd	r2, r3, [r3]
    124e:	f7ff fa7d 	bl	74c <__aeabi_ddiv>
    1252:	4604      	mov	r4, r0
    1254:	9800      	ldr	r0, [sp, #0]
    1256:	460d      	mov	r5, r1
    1258:	f7ff f8e4 	bl	424 <__aeabi_i2d>
    125c:	4602      	mov	r2, r0
    125e:	460b      	mov	r3, r1
    1260:	4620      	mov	r0, r4
    1262:	4629      	mov	r1, r5
    1264:	f7fe ff92 	bl	18c <__adddf3>
    1268:	4604      	mov	r4, r0
    {
        printk("am x\n");
    126a:	481c      	ldr	r0, [pc, #112]	; (12dc <read_lis+0xcc>)
    126c:	460d      	mov	r5, r1
    126e:	f026 fe9b 	bl	27fa8 <printk>
    }
    else if (sensor == 0x07)
    {
        return z_value;
    }
    1272:	4620      	mov	r0, r4
    1274:	4629      	mov	r1, r5
    1276:	b006      	add	sp, #24
    1278:	bd70      	pop	{r4, r5, r6, pc}
    else if (sensor == 0x06)
    127a:	2c06      	cmp	r4, #6
    127c:	d017      	beq.n	12ae <read_lis+0x9e>
    else if (sensor == 0x07)
    127e:	2c07      	cmp	r4, #7
    1280:	d1f7      	bne.n	1272 <read_lis+0x62>
    1282:	9805      	ldr	r0, [sp, #20]
    1284:	f7ff f8ce 	bl	424 <__aeabi_i2d>
    1288:	a30f      	add	r3, pc, #60	; (adr r3, 12c8 <read_lis+0xb8>)
    128a:	e9d3 2300 	ldrd	r2, r3, [r3]
    128e:	f7ff fa5d 	bl	74c <__aeabi_ddiv>
    1292:	4604      	mov	r4, r0
    1294:	9804      	ldr	r0, [sp, #16]
    1296:	460d      	mov	r5, r1
    1298:	f7ff f8c4 	bl	424 <__aeabi_i2d>
    129c:	4602      	mov	r2, r0
    129e:	460b      	mov	r3, r1
    12a0:	4620      	mov	r0, r4
    12a2:	4629      	mov	r1, r5
    12a4:	f7fe ff72 	bl	18c <__adddf3>
    12a8:	4604      	mov	r4, r0
    12aa:	460d      	mov	r5, r1
    12ac:	e7e1      	b.n	1272 <read_lis+0x62>
    12ae:	9803      	ldr	r0, [sp, #12]
    12b0:	f7ff f8b8 	bl	424 <__aeabi_i2d>
    12b4:	a304      	add	r3, pc, #16	; (adr r3, 12c8 <read_lis+0xb8>)
    12b6:	e9d3 2300 	ldrd	r2, r3, [r3]
    12ba:	f7ff fa47 	bl	74c <__aeabi_ddiv>
    12be:	4604      	mov	r4, r0
    12c0:	460d      	mov	r5, r1
    12c2:	9802      	ldr	r0, [sp, #8]
    12c4:	e7e8      	b.n	1298 <read_lis+0x88>
    12c6:	bf00      	nop
    12c8:	00000000 	.word	0x00000000
    12cc:	412e8480 	.word	0x412e8480
    12d0:	200021bc 	.word	0x200021bc
    12d4:	000317ec 	.word	0x000317ec
    12d8:	000317f4 	.word	0x000317f4
    12dc:	000317f8 	.word	0x000317f8

000012e0 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    12e0:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    12e2:	4d49      	ldr	r5, [pc, #292]	; (1408 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80>)
    12e4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    12e8:	6899      	ldr	r1, [r3, #8]
    12ea:	f011 0101 	ands.w	r1, r1, #1
{
    12ee:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    12f0:	d123      	bne.n	133a <bt_init+0x5a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    12f2:	aa02      	add	r2, sp, #8
    12f4:	f640 4003 	movw	r0, #3075	; 0xc03
    12f8:	f007 ff72 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    12fc:	4604      	mov	r4, r0
    12fe:	2800      	cmp	r0, #0
    1300:	d17f      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	uint8_t status = buf->data[0];
    1302:	9b02      	ldr	r3, [sp, #8]
    1304:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1306:	781b      	ldrb	r3, [r3, #0]
    1308:	b9a3      	cbnz	r3, 1334 <bt_init+0x54>
		bt_scan_reset();
    130a:	f009 fd19 	bl	ad40 <bt_scan_reset>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    130e:	f3bf 8f5b 	dmb	ish
    1312:	462b      	mov	r3, r5
    1314:	f853 2fcc 	ldr.w	r2, [r3, #204]!
    1318:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    131c:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1320:	f3bf 8f5b 	dmb	ish
    1324:	e853 1f00 	ldrex	r1, [r3]
    1328:	e843 2000 	strex	r0, r2, [r3]
    132c:	2800      	cmp	r0, #0
    132e:	d1f9      	bne.n	1324 <bt_init+0x44>
    1330:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    1334:	9802      	ldr	r0, [sp, #8]
    1336:	f01f fb7b 	bl	20a30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    133a:	aa02      	add	r2, sp, #8
    133c:	2100      	movs	r1, #0
    133e:	f241 0003 	movw	r0, #4099	; 0x1003
    1342:	f007 ff4d 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    1346:	4604      	mov	r4, r0
    1348:	2800      	cmp	r0, #0
    134a:	d15a      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	read_local_features_complete(rsp);
    134c:	9b02      	ldr	r3, [sp, #8]
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    134e:	4e2f      	ldr	r6, [pc, #188]	; (140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>)
    1350:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1352:	f8d2 0001 	ldr.w	r0, [r2, #1]
    1356:	f8d2 1005 	ldr.w	r1, [r2, #5]
    135a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    135c:	4618      	mov	r0, r3
    135e:	f01f fb67 	bl	20a30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1362:	4621      	mov	r1, r4
    1364:	aa02      	add	r2, sp, #8
    1366:	f241 0001 	movw	r0, #4097	; 0x1001
    136a:	f007 ff39 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    136e:	4604      	mov	r4, r0
    1370:	2800      	cmp	r0, #0
    1372:	d146      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	read_local_ver_complete(rsp);
    1374:	9802      	ldr	r0, [sp, #8]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    1376:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    1378:	785a      	ldrb	r2, [r3, #1]
    137a:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    137e:	78d9      	ldrb	r1, [r3, #3]
    1380:	789a      	ldrb	r2, [r3, #2]
    1382:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1386:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
    138a:	791a      	ldrb	r2, [r3, #4]
    138c:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    1390:	7a19      	ldrb	r1, [r3, #8]
    1392:	79da      	ldrb	r2, [r3, #7]
    1394:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1398:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    139c:	795a      	ldrb	r2, [r3, #5]
    139e:	799b      	ldrb	r3, [r3, #6]
    13a0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    13a4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
    13a8:	f01f fb42 	bl	20a30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    13ac:	4621      	mov	r1, r4
    13ae:	aa02      	add	r2, sp, #8
    13b0:	f241 0002 	movw	r0, #4098	; 0x1002
    13b4:	f007 ff14 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    13b8:	4604      	mov	r4, r0
    13ba:	bb10      	cbnz	r0, 1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    13bc:	9b02      	ldr	r3, [sp, #8]
    13be:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    13c0:	1c53      	adds	r3, r2, #1
    13c2:	3241      	adds	r2, #65	; 0x41
    13c4:	6818      	ldr	r0, [r3, #0]
    13c6:	6859      	ldr	r1, [r3, #4]
    13c8:	4634      	mov	r4, r6
    13ca:	c403      	stmia	r4!, {r0, r1}
    13cc:	3308      	adds	r3, #8
    13ce:	4293      	cmp	r3, r2
    13d0:	4626      	mov	r6, r4
    13d2:	d1f7      	bne.n	13c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
    13d4:	480e      	ldr	r0, [pc, #56]	; (1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    13d6:	f028 fdc5 	bl	29f64 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
    13da:	9802      	ldr	r0, [sp, #8]
    13dc:	f01f fb28 	bl	20a30 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    13e0:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
    13e4:	065a      	lsls	r2, r3, #25
    13e6:	d419      	bmi.n	141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>
		BT_ERR("Non-LE capable controller detected!");
    13e8:	4b0a      	ldr	r3, [pc, #40]	; (1414 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8c>)
    13ea:	9306      	str	r3, [sp, #24]
    13ec:	480a      	ldr	r0, [pc, #40]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    13ee:	2302      	movs	r3, #2
    13f0:	aa05      	add	r2, sp, #20
    13f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    13f6:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("Non-LE capable controller detected!");
    13fa:	9301      	str	r3, [sp, #4]
    13fc:	9305      	str	r3, [sp, #20]
    13fe:	f028 fe75 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    1402:	4620      	mov	r0, r4
    1404:	b008      	add	sp, #32
    1406:	bd70      	pop	{r4, r5, r6, pc}
    1408:	20000000 	.word	0x20000000
    140c:	20000070 	.word	0x20000070
    1410:	20000078 	.word	0x20000078
    1414:	00032432 	.word	0x00032432
    1418:	0002f4d4 	.word	0x0002f4d4
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    141c:	aa02      	add	r2, sp, #8
    141e:	2100      	movs	r1, #0
    1420:	f242 0003 	movw	r0, #8195	; 0x2003
    1424:	f007 fedc 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    1428:	4604      	mov	r4, r0
    142a:	2800      	cmp	r0, #0
    142c:	d1e9      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	read_le_features_complete(rsp);
    142e:	9b02      	ldr	r3, [sp, #8]
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    1430:	4ec1      	ldr	r6, [pc, #772]	; (1738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b0>)
    1432:	689a      	ldr	r2, [r3, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    1434:	f8d2 0001 	ldr.w	r0, [r2, #1]
    1438:	f8d2 1005 	ldr.w	r1, [r2, #5]
    143c:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
    143e:	4618      	mov	r0, r3
    1440:	f01f faf6 	bl	20a30 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1444:	4621      	mov	r1, r4
    1446:	aa02      	add	r2, sp, #8
    1448:	f242 0002 	movw	r0, #8194	; 0x2002
    144c:	f007 fec8 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    1450:	4604      	mov	r4, r0
    1452:	2800      	cmp	r0, #0
    1454:	d1d5      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    1456:	9b02      	ldr	r3, [sp, #8]
    1458:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    145a:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    145e:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
    1462:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    1464:	b129      	cbz	r1, 1472 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xea>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1466:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1468:	4611      	mov	r1, r2
    146a:	f106 0028 	add.w	r0, r6, #40	; 0x28
    146e:	f02c fc76 	bl	2dd5e <z_impl_k_sem_init>
		net_buf_unref(rsp);
    1472:	9802      	ldr	r0, [sp, #8]
    1474:	f01f fadc 	bl	20a30 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1478:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
    147c:	f016 0620 	ands.w	r6, r6, #32
    1480:	f000 80f9 	beq.w	1676 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ee>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1484:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
    1488:	071b      	lsls	r3, r3, #28
    148a:	d512      	bpl.n	14b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    148c:	aa02      	add	r2, sp, #8
    148e:	2100      	movs	r1, #0
    1490:	f242 001c 	movw	r0, #8220	; 0x201c
    1494:	f007 fea4 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    1498:	4604      	mov	r4, r0
    149a:	2800      	cmp	r0, #0
    149c:	d1b1      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		le_read_supp_states_complete(rsp);
    149e:	9802      	ldr	r0, [sp, #8]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    14a0:	6883      	ldr	r3, [r0, #8]
    14a2:	f8d3 2001 	ldr.w	r2, [r3, #1]
    14a6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    14aa:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
    14ae:	f01f fabf 	bl	20a30 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    14b2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    14b6:	069e      	lsls	r6, r3, #26
    14b8:	d522      	bpl.n	1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    14ba:	a901      	add	r1, sp, #4
    14bc:	4668      	mov	r0, sp
    14be:	f007 ff0f 	bl	92e0 <hci_le_read_max_data_len>
		if (err) {
    14c2:	4604      	mov	r4, r0
    14c4:	2800      	cmp	r0, #0
    14c6:	d19c      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    14c8:	2104      	movs	r1, #4
    14ca:	f242 0024 	movw	r0, #8228	; 0x2024
    14ce:	f007 fd1f 	bl	8f10 <bt_hci_cmd_create>
		if (!buf) {
    14d2:	4606      	mov	r6, r0
    14d4:	2800      	cmp	r0, #0
    14d6:	f000 80d5 	beq.w	1684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fc>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    14da:	2104      	movs	r1, #4
    14dc:	3008      	adds	r0, #8
    14de:	f02b faf4 	bl	2caca <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    14e2:	f8bd 3000 	ldrh.w	r3, [sp]
    14e6:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    14e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    14ec:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    14ee:	4622      	mov	r2, r4
    14f0:	4631      	mov	r1, r6
    14f2:	f242 0024 	movw	r0, #8228	; 0x2024
    14f6:	f007 fe73 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    14fa:	4604      	mov	r4, r0
    14fc:	2800      	cmp	r0, #0
    14fe:	d180      	bne.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1500:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    1504:	065c      	lsls	r4, r3, #25
    1506:	d510      	bpl.n	152a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a2>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1508:	aa02      	add	r2, sp, #8
    150a:	2100      	movs	r1, #0
    150c:	f242 002a 	movw	r0, #8234	; 0x202a
    1510:	f007 fe66 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    1514:	4604      	mov	r4, r0
    1516:	2800      	cmp	r0, #0
    1518:	f47f af73 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		le_read_resolving_list_size_complete(rsp);
    151c:	9802      	ldr	r0, [sp, #8]
	bt_dev.le.rl_size = rp->rl_size;
    151e:	6883      	ldr	r3, [r0, #8]
    1520:	785b      	ldrb	r3, [r3, #1]
    1522:	f885 3118 	strb.w	r3, [r5, #280]	; 0x118
		net_buf_unref(rsp);
    1526:	f01f fa83 	bl	20a30 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    152a:	2108      	movs	r1, #8
    152c:	f242 0001 	movw	r0, #8193	; 0x2001
    1530:	f007 fcee 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    1534:	4604      	mov	r4, r0
    1536:	2800      	cmp	r0, #0
    1538:	f000 80a4 	beq.w	1684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fc>
    153c:	2108      	movs	r1, #8
    153e:	4408      	add	r0, r1
    1540:	f02b fac3 	bl	2caca <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    1544:	f895 10d0 	ldrb.w	r1, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1548:	f011 0f40 	tst.w	r1, #64	; 0x40
    154c:	4602      	mov	r2, r0
    154e:	f240 2302 	movw	r3, #514	; 0x202
    1552:	bf08      	it	eq
    1554:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    1556:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1558:	bf4c      	ite	mi
    155a:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    155e:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    1562:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1564:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1568:	bf48      	it	mi
    156a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    156e:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1572:	f895 309a 	ldrb.w	r3, [r5, #154]	; 0x9a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    1576:	bf18      	it	ne
    1578:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    157c:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1580:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    1582:	bf48      	it	mi
    1584:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1588:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    158a:	bf08      	it	eq
    158c:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1590:	2100      	movs	r1, #0
    1592:	f028 fdbc 	bl	2a10e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1596:	4621      	mov	r1, r4
    1598:	2200      	movs	r2, #0
    159a:	f242 0001 	movw	r0, #8193	; 0x2001
    159e:	f007 fe1f 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    15a2:	4604      	mov	r4, r0
    15a4:	2800      	cmp	r0, #0
    15a6:	f47f af2c 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    15aa:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
	if (bt_dev.le.acl_mtu) {
    15ae:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
	if (BT_FEAT_BREDR(bt_dev.features)) {
    15b2:	0698      	lsls	r0, r3, #26
    15b4:	d47b      	bmi.n	16ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x326>
	if (bt_dev.le.acl_mtu) {
    15b6:	b9d9      	cbnz	r1, 15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    15b8:	aa02      	add	r2, sp, #8
    15ba:	f241 0005 	movw	r0, #4101	; 0x1005
    15be:	f007 fe0f 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    15c2:	4604      	mov	r4, r0
    15c4:	2800      	cmp	r0, #0
    15c6:	f47f af1c 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	if (bt_dev.le.acl_mtu) {
    15ca:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
    15ce:	b963      	cbnz	r3, 15ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x262>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    15d0:	9b02      	ldr	r3, [sp, #8]
    15d2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    15d4:	785a      	ldrb	r2, [r3, #1]
    15d6:	7899      	ldrb	r1, [r3, #2]
    15d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    15dc:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    15e0:	889a      	ldrh	r2, [r3, #4]
    15e2:	4856      	ldr	r0, [pc, #344]	; (173c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b4>)
    15e4:	4611      	mov	r1, r2
    15e6:	f02c fbba 	bl	2dd5e <z_impl_k_sem_init>
	net_buf_unref(rsp);
    15ea:	9802      	ldr	r0, [sp, #8]
    15ec:	f01f fa20 	bl	20a30 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    15f0:	2108      	movs	r1, #8
    15f2:	f640 4001 	movw	r0, #3073	; 0xc01
    15f6:	f007 fc8b 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    15fa:	4604      	mov	r4, r0
    15fc:	2800      	cmp	r0, #0
    15fe:	d041      	beq.n	1684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2fc>
    1600:	2108      	movs	r1, #8
    1602:	4408      	add	r0, r1
    1604:	f02b fa61 	bl	2caca <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1608:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    160c:	07d9      	lsls	r1, r3, #31
    160e:	4602      	mov	r2, r0
    1610:	d55d      	bpl.n	16ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x346>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    1612:	a147      	add	r1, pc, #284	; (adr r1, 1730 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a8>)
    1614:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1618:	f028 fd79 	bl	2a10e <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    161c:	4621      	mov	r1, r4
    161e:	2200      	movs	r2, #0
    1620:	f640 4001 	movw	r0, #3073	; 0xc01
    1624:	f007 fddc 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    1628:	4604      	mov	r4, r0
    162a:	2800      	cmp	r0, #0
    162c:	f47f aee9 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1630:	4601      	mov	r1, r0
    1632:	466a      	mov	r2, sp
    1634:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1638:	f007 fdd2 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    163c:	4604      	mov	r4, r0
    163e:	2800      	cmp	r0, #0
    1640:	d049      	beq.n	16d6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34e>
		BT_WARN("Vendor HCI extensions not available");
    1642:	4b3f      	ldr	r3, [pc, #252]	; (1740 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3b8>)
			BT_WARN("Failed to read supported vendor features");
    1644:	9306      	str	r3, [sp, #24]
    1646:	483f      	ldr	r0, [pc, #252]	; (1744 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3bc>)
    1648:	2302      	movs	r3, #2
    164a:	aa05      	add	r2, sp, #20
    164c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    1650:	9301      	str	r3, [sp, #4]
    1652:	9305      	str	r3, [sp, #20]
    1654:	f028 fd4a 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	err = bt_id_init();
    1658:	f008 ff9e 	bl	a598 <bt_id_init>
	if (err) {
    165c:	4604      	mov	r4, r0
    165e:	2800      	cmp	r0, #0
    1660:	f47f aecf 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		err = bt_conn_init();
    1664:	f00a fc98 	bl	bf98 <bt_conn_init>
		if (err) {
    1668:	4604      	mov	r4, r0
    166a:	2800      	cmp	r0, #0
    166c:	f47f aec9 	bne.w	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	bt_finalize_init();
    1670:	f008 faf6 	bl	9c60 <bt_finalize_init>
	return 0;
    1674:	e6c5      	b.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    1676:	2102      	movs	r1, #2
    1678:	f640 406d 	movw	r0, #3181	; 0xc6d
    167c:	f007 fc48 	bl	8f10 <bt_hci_cmd_create>
		if (!buf) {
    1680:	4604      	mov	r4, r0
    1682:	b910      	cbnz	r0, 168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
		return -ENOBUFS;
    1684:	f06f 0468 	mvn.w	r4, #104	; 0x68
    1688:	e6bb      	b.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
    168a:	2102      	movs	r1, #2
    168c:	3008      	adds	r0, #8
    168e:	f02b fa1c 	bl	2caca <net_buf_simple_add>
		cp_le->le = 0x01;
    1692:	2301      	movs	r3, #1
    1694:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    1696:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1698:	4621      	mov	r1, r4
    169a:	4632      	mov	r2, r6
    169c:	f640 406d 	movw	r0, #3181	; 0xc6d
    16a0:	f007 fd9e 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    16a4:	4604      	mov	r4, r0
    16a6:	2800      	cmp	r0, #0
    16a8:	f43f aeec 	beq.w	1484 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xfc>
    16ac:	e6a9      	b.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
	else if (!bt_dev.le.acl_mtu) {
    16ae:	2900      	cmp	r1, #0
    16b0:	d19e      	bne.n	15f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x268>
		BT_ERR("ACL BR/EDR buffers not initialized");
    16b2:	4b25      	ldr	r3, [pc, #148]	; (1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>)
    16b4:	9306      	str	r3, [sp, #24]
    16b6:	4823      	ldr	r0, [pc, #140]	; (1744 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3bc>)
    16b8:	2302      	movs	r3, #2
    16ba:	aa05      	add	r2, sp, #20
    16bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    16c0:	9301      	str	r3, [sp, #4]
    16c2:	9305      	str	r3, [sp, #20]
		return -EIO;
    16c4:	f06f 0404 	mvn.w	r4, #4
		BT_ERR("ACL BR/EDR buffers not initialized");
    16c8:	f028 fd10 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	if (err) {
    16cc:	e699      	b.n	1402 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7a>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    16ce:	481f      	ldr	r0, [pc, #124]	; (174c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c4>)
    16d0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    16d4:	e7a0      	b.n	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
	net_buf_unref(rsp);
    16d6:	9800      	ldr	r0, [sp, #0]
    16d8:	f01f f9aa 	bl	20a30 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    16dc:	4621      	mov	r1, r4
    16de:	466a      	mov	r2, sp
    16e0:	f64f 4002 	movw	r0, #64514	; 0xfc02
    16e4:	f007 fd7c 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    16e8:	4604      	mov	r4, r0
    16ea:	b108      	cbz	r0, 16f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x368>
		BT_WARN("Failed to read supported vendor commands");
    16ec:	4b18      	ldr	r3, [pc, #96]	; (1750 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c8>)
    16ee:	e7a9      	b.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
	rp.cmds = (void *)rsp->data;
    16f0:	9800      	ldr	r0, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    16f2:	6883      	ldr	r3, [r0, #8]
    16f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
    16f8:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
    16fc:	f01f f998 	bl	20a30 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    1700:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
    1704:	075b      	lsls	r3, r3, #29
    1706:	d5a7      	bpl.n	1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1708:	466a      	mov	r2, sp
    170a:	4621      	mov	r1, r4
    170c:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1710:	f007 fd66 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    1714:	b108      	cbz	r0, 171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
			BT_WARN("Failed to read supported vendor features");
    1716:	4b0f      	ldr	r3, [pc, #60]	; (1754 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3cc>)
    1718:	e794      	b.n	1644 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2bc>
		rp.feat = (void *)rsp->data;
    171a:	9800      	ldr	r0, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
    171c:	6883      	ldr	r3, [r0, #8]
    171e:	785b      	ldrb	r3, [r3, #1]
    1720:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
    1724:	f01f f984 	bl	20a30 <net_buf_unref>
    1728:	e796      	b.n	1658 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2d0>
    172a:	bf00      	nop
    172c:	f3af 8000 	nop.w
    1730:	02008890 	.word	0x02008890
    1734:	20008000 	.word	0x20008000
    1738:	200000d0 	.word	0x200000d0
    173c:	20000100 	.word	0x20000100
    1740:	00032479 	.word	0x00032479
    1744:	0002f4d4 	.word	0x0002f4d4
    1748:	00032456 	.word	0x00032456
    174c:	02008810 	.word	0x02008810
    1750:	0003249d 	.word	0x0003249d
    1754:	000324c6 	.word	0x000324c6

00001758 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    175c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1760:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1762:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1764:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1766:	42a6      	cmp	r6, r4
{
    1768:	4688      	mov	r8, r1
    176a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    176c:	d818      	bhi.n	17a0 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    176e:	4d1c      	ldr	r5, [pc, #112]	; (17e0 <ull_drift_ticks_get+0x88>)
    1770:	fba3 0105 	umull	r0, r1, r3, r5
    1774:	a318      	add	r3, pc, #96	; (adr r3, 17d8 <ull_drift_ticks_get+0x80>)
    1776:	e9d3 2300 	ldrd	r2, r3, [r3]
    177a:	f7ff fa4d 	bl	c18 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    177e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1780:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1784:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1788:	a313      	add	r3, pc, #76	; (adr r3, 17d8 <ull_drift_ticks_get+0x80>)
    178a:	e9d3 2300 	ldrd	r2, r3, [r3]
    178e:	fba4 0105 	umull	r0, r1, r4, r5
    1792:	f7ff fa41 	bl	c18 <__aeabi_uldivmod>
    1796:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    179a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    17a0:	4c0f      	ldr	r4, [pc, #60]	; (17e0 <ull_drift_ticks_get+0x88>)
    17a2:	a30d      	add	r3, pc, #52	; (adr r3, 17d8 <ull_drift_ticks_get+0x80>)
    17a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    17a8:	fba6 0104 	umull	r0, r1, r6, r4
    17ac:	f7ff fa34 	bl	c18 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    17b0:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    17b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    17b8:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    17bc:	a306      	add	r3, pc, #24	; (adr r3, 17d8 <ull_drift_ticks_get+0x80>)
    17be:	e9d3 2300 	ldrd	r2, r3, [r3]
    17c2:	fba1 0104 	umull	r0, r1, r1, r4
    17c6:	f7ff fa27 	bl	c18 <__aeabi_uldivmod>
    17ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    17ce:	6038      	str	r0, [r7, #0]
}
    17d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17d4:	f3af 8000 	nop.w
    17d8:	1afd498d 	.word	0x1afd498d
    17dc:	00000007 	.word	0x00000007
    17e0:	3b9aca00 	.word	0x3b9aca00
    17e4:	00000000 	.word	0x00000000

000017e8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    17e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    17ec:	4cac      	ldr	r4, [pc, #688]	; (1aa0 <ll_adv_enable+0x2b8>)
{
    17ee:	b08f      	sub	sp, #60	; 0x3c
	if (!adv || !adv->is_enabled) {
    17f0:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
	if (!enable) {
    17f4:	2800      	cmp	r0, #0
    17f6:	f000 8139 	beq.w	1a6c <ll_adv_enable+0x284>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    17fa:	f012 0701 	ands.w	r7, r2, #1
    17fe:	f040 8137 	bne.w	1a70 <ll_adv_enable+0x288>
	ull_filter_adv_update(lll->filter_policy);
    1802:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
    1806:	23ff      	movs	r3, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1808:	f000 0003 	and.w	r0, r0, #3
	lll->rl_idx = FILTER_IDX_NONE;
    180c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
    1810:	f01a ff1e 	bl	1c650 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1814:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    1818:	0741      	lsls	r1, r0, #29
    181a:	d42d      	bmi.n	1878 <ll_adv_enable+0x90>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    181c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1820:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1824:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1828:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    182c:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1830:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		pdu_adv_to_update = pdu;
	}

	if (pdu_adv_to_update) {
    1834:	f1b8 0f00 	cmp.w	r8, #0
    1838:	d011      	beq.n	185e <ll_adv_enable+0x76>
		const uint8_t *adv_addr;

		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    183a:	4899      	ldr	r0, [pc, #612]	; (1aa0 <ll_adv_enable+0x2b8>)
    183c:	4641      	mov	r1, r8
    183e:	f014 fb3b 	bl	15eb8 <ull_adv_pdu_update_addrs>

		/* In case the local IRK was not set or no match was
		 * found the fallback address was used instead, check
		 * that a valid address has been set.
		 */
		if (pdu_adv_to_update->tx_addr &&
    1842:	f898 3000 	ldrb.w	r3, [r8]
    1846:	065a      	lsls	r2, r3, #25
    1848:	d505      	bpl.n	1856 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    184a:	2106      	movs	r1, #6
    184c:	f00f faa0 	bl	10d90 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1850:	2800      	cmp	r0, #0
    1852:	f000 81ce 	beq.w	1bf2 <ll_adv_enable+0x40a>
		if ((pdu->type != PDU_ADV_TYPE_EXT_IND) ||
		    (pdu->adv_ext_ind.adv_mode & BT_HCI_LE_ADV_PROP_SCAN)) {
#else
		if (1) {
#endif
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1856:	4892      	ldr	r0, [pc, #584]	; (1aa0 <ll_adv_enable+0x2b8>)
    1858:	4649      	mov	r1, r9
    185a:	f014 fb2d 	bl	15eb8 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    185e:	f898 3000 	ldrb.w	r3, [r8]
    1862:	f013 0f0e 	tst.w	r3, #14
    1866:	f040 80ee 	bne.w	1a46 <ll_adv_enable+0x25e>
		if (lll->conn) {
    186a:	6a23      	ldr	r3, [r4, #32]
    186c:	b19b      	cbz	r3, 1896 <ll_adv_enable+0xae>
	return BT_HCI_ERR_CMD_DISALLOWED;
    186e:	270c      	movs	r7, #12
}
    1870:	4638      	mov	r0, r7
    1872:	b00f      	add	sp, #60	; 0x3c
    1874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    1878:	463a      	mov	r2, r7
    187a:	f104 016b 	add.w	r1, r4, #107	; 0x6b
    187e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1882:	f01b f877 	bl	1c974 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1886:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
    1888:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
    188c:	d0c6      	beq.n	181c <ll_adv_enable+0x34>
			ull_filter_rpa_update(false);
    188e:	4638      	mov	r0, r7
    1890:	f01a ff24 	bl	1c6dc <ull_filter_rpa_update>
    1894:	e7c2      	b.n	181c <ll_adv_enable+0x34>
		link = ll_rx_link_alloc();
    1896:	f013 f9b9 	bl	14c0c <ll_rx_link_alloc>
		if (!link) {
    189a:	4682      	mov	sl, r0
    189c:	2800      	cmp	r0, #0
    189e:	f000 81b2 	beq.w	1c06 <ll_adv_enable+0x41e>
		node_rx = ll_rx_alloc();
    18a2:	f013 f9bf 	bl	14c24 <ll_rx_alloc>
		if (!node_rx) {
    18a6:	4683      	mov	fp, r0
    18a8:	2800      	cmp	r0, #0
    18aa:	f000 81b1 	beq.w	1c10 <ll_adv_enable+0x428>
		conn = ll_conn_acquire();
    18ae:	f015 fbaf 	bl	17010 <ll_conn_acquire>
		if (!conn) {
    18b2:	4605      	mov	r5, r0
    18b4:	2800      	cmp	r0, #0
    18b6:	f000 81a8 	beq.w	1c0a <ll_adv_enable+0x422>
		if (!conn_lll->link_tx_free) {
    18ba:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
    18bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    18c0:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
    18c2:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    18c6:	2800      	cmp	r0, #0
    18c8:	f000 8199 	beq.w	1bfe <ll_adv_enable+0x416>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    18cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
    18d0:	f105 0164 	add.w	r1, r5, #100	; 0x64
    18d4:	930b      	str	r3, [sp, #44]	; 0x2c
    18d6:	f00f fa67 	bl	10da8 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    18da:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    18de:	4b71      	ldr	r3, [pc, #452]	; (1aa4 <ll_adv_enable+0x2bc>)
			conn_lll->phy_tx = PHY_1M;
    18e0:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    18e4:	f022 0207 	bic.w	r2, r2, #7
    18e8:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    18ec:	f042 0201 	orr.w	r2, r2, #1
    18f0:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
    18f4:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
    18f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    18fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1900:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
    1904:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
    1908:	f022 0207 	bic.w	r2, r2, #7
    190c:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->periph.initiated = 0;
    1910:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
    1914:	f022 0207 	bic.w	r2, r2, #7
    1918:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
    191c:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
    1920:	f022 0207 	bic.w	r2, r2, #7
    1924:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1928:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
    192c:	2600      	movs	r6, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    192e:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
    1932:	2206      	movs	r2, #6
    1934:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->periph.window_widening_event_us = 0;
    1938:	e9c5 6612 	strd	r6, r6, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
    193c:	676e      	str	r6, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
    193e:	f8a5 6078 	strh.w	r6, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
    1942:	85ee      	strh	r6, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
    1944:	632e      	str	r6, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
    1946:	f885 603b 	strb.w	r6, [r5, #59]	; 0x3b
		conn_lll->periph.window_size_prepare_us = 0;
    194a:	652e      	str	r6, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
    194c:	f8a5 60c4 	strh.w	r6, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
    1950:	f8a5 60c8 	strh.w	r6, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
    1954:	f8a5 60d0 	strh.w	r6, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
    1958:	f8a5 60cc 	strh.w	r6, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    195c:	f8a5 60e4 	strh.w	r6, [r5, #228]	; 0xe4
    1960:	f885 60e6 	strb.w	r6, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
    1964:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1968:	f8a5 610c 	strh.w	r6, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    196c:	f8a5 6120 	strh.w	r6, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
    1970:	f012 fc0e 	bl	14190 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1974:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1978:	f8a5 6138 	strh.w	r6, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    197c:	f022 0203 	bic.w	r2, r2, #3
    1980:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    1984:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
    1988:	f8a5 6140 	strh.w	r6, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    198c:	f022 0218 	bic.w	r2, r2, #24
    1990:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1994:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
    1998:	f885 6143 	strb.w	r6, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    199c:	f022 0207 	bic.w	r2, r2, #7
    19a0:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
    19a4:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
    19a8:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
    19ac:	f366 1245 	bfi	r2, r6, #5, #1
    19b0:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
    19b4:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    19b8:	f8a5 6164 	strh.w	r6, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
    19bc:	f366 02c3 	bfi	r2, r6, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
    19c0:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
    19c4:	2100      	movs	r1, #0
    19c6:	2000      	movs	r0, #0
    19c8:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
    19cc:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->periph.llcp_type = 0U;
    19d0:	f885 60d9 	strb.w	r6, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
    19d4:	f8a5 6184 	strh.w	r6, [r5, #388]	; 0x184
		conn->periph.ticks_to_offset = 0;
    19d8:	f8c5 60e0 	str.w	r6, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    19dc:	f8a5 61ac 	strh.w	r6, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
    19e0:	f8a5 61b8 	strh.w	r6, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    19e4:	f015 fe5c 	bl	176a0 <ull_conn_default_tx_octets_get>
    19e8:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
    19ec:	f015 fe5e 	bl	176ac <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    19f0:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
    19f4:	4a2c      	ldr	r2, [pc, #176]	; (1aa8 <ll_adv_enable+0x2c0>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    19f6:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    19fa:	400a      	ands	r2, r1
    19fc:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1a00:	f015 fe5a 	bl	176b8 <ull_conn_default_phy_tx_get>
    1a04:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
    1a08:	f360 0202 	bfi	r2, r0, #0, #3
    1a0c:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a10:	f015 fe58 	bl	176c4 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1a14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1a16:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a18:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1a1c:	f8c5 61c4 	str.w	r6, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a20:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
    1a24:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
    1a28:	e9c5 6674 	strd	r6, r6, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1a2c:	e9c5 6672 	strd	r6, r6, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1a30:	e9c5 6605 	strd	r6, r6, [r5, #20]
	hdr->ref = 0U;
    1a34:	702e      	strb	r6, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
    1a36:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1a38:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
    1a3c:	f01b ffd4 	bl	1d9e8 <lll_clock_wait>
		if (err) {
    1a40:	2800      	cmp	r0, #0
    1a42:	f040 80d8 	bne.w	1bf6 <ll_adv_enable+0x40e>
	uint8_t ch_map = lll->chan_map;
    1a46:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1a4a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1a4c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1a50:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1a54:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1a58:	f00f fb26 	bl	110a8 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1a5c:	bb30      	cbnz	r0, 1aac <ll_adv_enable+0x2c4>
	if (adv->lll.conn) {
    1a5e:	6a23      	ldr	r3, [r4, #32]
    1a60:	2b00      	cmp	r3, #0
    1a62:	f43f af04 	beq.w	186e <ll_adv_enable+0x86>
		conn_release(adv);
    1a66:	f013 fee9 	bl	1583c <conn_release.constprop.0>
    1a6a:	e700      	b.n	186e <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
    1a6c:	07d5      	lsls	r5, r2, #31
    1a6e:	d404      	bmi.n	1a7a <ll_adv_enable+0x292>
			return 0;
    1a70:	2700      	movs	r7, #0
}
    1a72:	4638      	mov	r0, r7
    1a74:	b00f      	add	sp, #60	; 0x3c
    1a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (adv->lll.conn) {
    1a7a:	6a23      	ldr	r3, [r4, #32]
    1a7c:	b15b      	cbz	r3, 1a96 <ll_adv_enable+0x2ae>
		adv->lll.conn->periph.cancelled = 1U;
    1a7e:	f893 2020 	ldrb.w	r2, [r3, #32]
    1a82:	f042 0202 	orr.w	r2, r2, #2
    1a86:	f883 2020 	strb.w	r2, [r3, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
    1a8a:	6a23      	ldr	r3, [r4, #32]
    1a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
    1a90:	07d8      	lsls	r0, r3, #31
    1a92:	f53f aeec 	bmi.w	186e <ll_adv_enable+0x86>
}
    1a96:	b00f      	add	sp, #60	; 0x3c
    1a98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a9c:	f013 bf10 	b.w	158c0 <disable.part.0>
    1aa0:	20002d10 	.word	0x20002d10
    1aa4:	01480148 	.word	0x01480148
    1aa8:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy,
    1aac:	f899 1001 	ldrb.w	r1, [r9, #1]
    1ab0:	4602      	mov	r2, r0
    1ab2:	4640      	mov	r0, r8
    1ab4:	f013 ffb4 	bl	15a20 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1ab8:	495b      	ldr	r1, [pc, #364]	; (1c28 <ll_adv_enable+0x440>)
	uint16_t interval = adv->interval;
    1aba:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	adv->ull.ticks_prepare_to_start =
    1abe:	2331      	movs	r3, #49	; 0x31
    1ac0:	2500      	movs	r5, #0
    1ac2:	60a3      	str	r3, [r4, #8]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1ac4:	fba0 0101 	umull	r0, r1, r0, r1
    1ac8:	a355      	add	r3, pc, #340	; (adr r3, 1c20 <ll_adv_enable+0x438>)
    1aca:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1ace:	e9c4 5505 	strd	r5, r5, [r4, #20]
	hdr->ref = 0U;
    1ad2:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
    1ad4:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
    1ad6:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
    1ad8:	f7ff f89e 	bl	c18 <__aeabi_uldivmod>
    1adc:	6120      	str	r0, [r4, #16]
	ticks_anchor = ticker_ticks_now_get();
    1ade:	f010 fcdb 	bl	12498 <ticker_ticks_now_get>
    1ae2:	4606      	mov	r6, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1ae4:	f1b9 0f00 	cmp.w	r9, #0
    1ae8:	d108      	bne.n	1afc <ll_adv_enable+0x314>
    1aea:	f898 5000 	ldrb.w	r5, [r8]
    1aee:	f005 050f 	and.w	r5, r5, #15
    1af2:	f1a5 0501 	sub.w	r5, r5, #1
    1af6:	fab5 f585 	clz	r5, r5
    1afa:	096d      	lsrs	r5, r5, #5
    1afc:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
				   (adv->ull.ticks_slot + ticks_slot_overhead),
    1b00:	6923      	ldr	r3, [r4, #16]
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1b02:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1b06:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1b0a:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
    1b0e:	d031      	beq.n	1b74 <ll_adv_enable+0x38c>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b10:	2000      	movs	r0, #0
    1b12:	4a46      	ldr	r2, [pc, #280]	; (1c2c <ll_adv_enable+0x444>)
    1b14:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1c30 <ll_adv_enable+0x448>
    1b18:	9304      	str	r3, [sp, #16]
		ret_cb = TICKER_STATUS_BUSY;
    1b1a:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b1c:	f10d 0834 	add.w	r8, sp, #52	; 0x34
    1b20:	9301      	str	r3, [sp, #4]
    1b22:	9205      	str	r2, [sp, #20]
    1b24:	2103      	movs	r1, #3
    1b26:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1b2a:	9406      	str	r4, [sp, #24]
    1b2c:	4633      	mov	r3, r6
    1b2e:	9000      	str	r0, [sp, #0]
    1b30:	f8cd 8020 	str.w	r8, [sp, #32]
    1b34:	f8cd 901c 	str.w	r9, [sp, #28]
    1b38:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1b3a:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b3c:	f010 fb82 	bl	12244 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1b40:	4641      	mov	r1, r8
    1b42:	f013 f8f3 	bl	14d2c <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1b46:	2800      	cmp	r0, #0
    1b48:	d189      	bne.n	1a5e <ll_adv_enable+0x276>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b4a:	4a3a      	ldr	r2, [pc, #232]	; (1c34 <ll_adv_enable+0x44c>)
    1b4c:	9205      	str	r2, [sp, #20]
    1b4e:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1b52:	9200      	str	r2, [sp, #0]
    1b54:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1b58:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1b5c:	f8cd 901c 	str.w	r9, [sp, #28]
    1b60:	f8cd 8020 	str.w	r8, [sp, #32]
    1b64:	9406      	str	r4, [sp, #24]
    1b66:	4633      	mov	r3, r6
    1b68:	2201      	movs	r2, #1
    1b6a:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1b6c:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1b6e:	f010 fb69 	bl	12244 <ticker_start>
    1b72:	e029      	b.n	1bc8 <ll_adv_enable+0x3e0>
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1b74:	4a30      	ldr	r2, [pc, #192]	; (1c38 <ll_adv_enable+0x450>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1b76:	4831      	ldr	r0, [pc, #196]	; (1c3c <ll_adv_enable+0x454>)
		ret = ticker_start_ext(
    1b78:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1b7a:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1b7e:	fba9 0100 	umull	r0, r1, r9, r0
		ret = ticker_start_ext(
    1b82:	9406      	str	r4, [sp, #24]
    1b84:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1b86:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1b88:	2391      	movs	r3, #145	; 0x91
    1b8a:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
    1b8e:	4b28      	ldr	r3, [pc, #160]	; (1c30 <ll_adv_enable+0x448>)
    1b90:	9307      	str	r3, [sp, #28]
    1b92:	4b26      	ldr	r3, [pc, #152]	; (1c2c <ll_adv_enable+0x444>)
    1b94:	9305      	str	r3, [sp, #20]
    1b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1b9a:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1b9c:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    1ba0:	9303      	str	r3, [sp, #12]
    1ba2:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1ba6:	a31e      	add	r3, pc, #120	; (adr r3, 1c20 <ll_adv_enable+0x438>)
    1ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1bac:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    1bb0:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1bb4:	f7ff f830 	bl	c18 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1bb8:	4633      	mov	r3, r6
    1bba:	e9cd 5000 	strd	r5, r0, [sp]
    1bbe:	464a      	mov	r2, r9
    1bc0:	4628      	mov	r0, r5
    1bc2:	2103      	movs	r1, #3
    1bc4:	f010 fae8 	bl	12198 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1bc8:	4641      	mov	r1, r8
    1bca:	f013 f8af 	bl	14d2c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1bce:	2800      	cmp	r0, #0
    1bd0:	f47f af45 	bne.w	1a5e <ll_adv_enable+0x276>
	adv->is_enabled = 1;
    1bd4:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    1bd8:	f043 0301 	orr.w	r3, r3, #1
    1bdc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
    1be0:	f014 fb5a 	bl	16298 <ull_scan_is_enabled_get>
    1be4:	2800      	cmp	r0, #0
    1be6:	f47f af43 	bne.w	1a70 <ll_adv_enable+0x288>
		ull_filter_adv_scan_state_cb(BIT(0));
    1bea:	2001      	movs	r0, #1
    1bec:	f01a fd12 	bl	1c614 <ull_filter_adv_scan_state_cb>
    1bf0:	e63e      	b.n	1870 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
    1bf2:	2712      	movs	r7, #18
    1bf4:	e63c      	b.n	1870 <ll_adv_enable+0x88>
			conn_release(adv);
    1bf6:	f013 fe21 	bl	1583c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1bfa:	2703      	movs	r7, #3
    1bfc:	e638      	b.n	1870 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1bfe:	f105 006c 	add.w	r0, r5, #108	; 0x6c
    1c02:	6768      	str	r0, [r5, #116]	; 0x74
    1c04:	e662      	b.n	18cc <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1c06:	2707      	movs	r7, #7
    1c08:	e632      	b.n	1870 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1c0a:	4658      	mov	r0, fp
    1c0c:	f013 f810 	bl	14c30 <ll_rx_release>
			ll_rx_link_release(link);
    1c10:	4650      	mov	r0, sl
    1c12:	f013 f801 	bl	14c18 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1c16:	2707      	movs	r7, #7
    1c18:	e62a      	b.n	1870 <ll_adv_enable+0x88>
    1c1a:	bf00      	nop
    1c1c:	f3af 8000 	nop.w
    1c20:	1afd498d 	.word	0x1afd498d
    1c24:	00000007 	.word	0x00000007
    1c28:	3b9aca00 	.word	0x3b9aca00
    1c2c:	00015a91 	.word	0x00015a91
    1c30:	0001425d 	.word	0x0001425d
    1c34:	000155cd 	.word	0x000155cd
    1c38:	20002d84 	.word	0x20002d84
    1c3c:	84e72a00 	.word	0x84e72a00

00001c40 <ull_adv_time_update>:
{
    1c40:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
    1c42:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
    1c46:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
    1c48:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
    1c4c:	460d      	mov	r5, r1
    1c4e:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1c50:	2101      	movs	r1, #1
    1c52:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
    1c56:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
    1c58:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1c5c:	f00f fa24 	bl	110a8 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1c60:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
    1c62:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, phy, phy_flags);
    1c64:	4628      	mov	r0, r5
    1c66:	f013 fedb 	bl	15a20 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1c6a:	491d      	ldr	r1, [pc, #116]	; (1ce0 <ull_adv_time_update+0xa0>)
    1c6c:	a31a      	add	r3, pc, #104	; (adr r3, 1cd8 <ull_adv_time_update+0x98>)
    1c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c72:	fba0 0101 	umull	r0, r1, r0, r1
    1c76:	f7fe ffcf 	bl	c18 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
    1c7a:	6923      	ldr	r3, [r4, #16]
    1c7c:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
    1c7e:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
    1c80:	d220      	bcs.n	1cc4 <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
    1c82:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
    1c84:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1c86:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1c88:	4a16      	ldr	r2, [pc, #88]	; (1ce4 <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1c8a:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1c8c:	4b16      	ldr	r3, [pc, #88]	; (1ce8 <ull_adv_time_update+0xa8>)
    1c8e:	1aa2      	subs	r2, r4, r2
    1c90:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
    1c94:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    1c96:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1c98:	2300      	movs	r3, #0
    1c9a:	440a      	add	r2, r1
    1c9c:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
    1c9e:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    1ca0:	4912      	ldr	r1, [pc, #72]	; (1cec <ull_adv_time_update+0xac>)
    1ca2:	9105      	str	r1, [sp, #20]
    1ca4:	e9cd 3303 	strd	r3, r3, [sp, #12]
    1ca8:	2103      	movs	r1, #3
    1caa:	b2d2      	uxtb	r2, r2
    1cac:	9606      	str	r6, [sp, #24]
    1cae:	9300      	str	r3, [sp, #0]
    1cb0:	4618      	mov	r0, r3
    1cb2:	f010 fb39 	bl	12328 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1cb6:	4631      	mov	r1, r6
    1cb8:	f013 f838 	bl	14d2c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1cbc:	b948      	cbnz	r0, 1cd2 <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
    1cbe:	6125      	str	r5, [r4, #16]
}
    1cc0:	b00a      	add	sp, #40	; 0x28
    1cc2:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
    1cc4:	d902      	bls.n	1ccc <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
    1cc6:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
    1cc8:	2300      	movs	r3, #0
    1cca:	e7dc      	b.n	1c86 <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
    1ccc:	2000      	movs	r0, #0
}
    1cce:	b00a      	add	sp, #40	; 0x28
    1cd0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1cd2:	200c      	movs	r0, #12
}
    1cd4:	b00a      	add	sp, #40	; 0x28
    1cd6:	bd70      	pop	{r4, r5, r6, pc}
    1cd8:	1afd498d 	.word	0x1afd498d
    1cdc:	00000007 	.word	0x00000007
    1ce0:	3b9aca00 	.word	0x3b9aca00
    1ce4:	20002d10 	.word	0x20002d10
    1ce8:	8d3dcb09 	.word	0x8d3dcb09
    1cec:	0001425d 	.word	0x0001425d

00001cf0 <ll_scan_params_set>:

static struct ll_scan_set ll_scan[BT_CTLR_SCAN_SET];

uint8_t ll_scan_params_set(uint8_t type, uint16_t interval, uint16_t window,
			uint8_t own_addr_type, uint8_t filter_policy)
{
    1cf0:	b538      	push	{r3, r4, r5, lr}
struct ll_scan_set *ull_scan_is_disabled_get(uint8_t handle)
{
	struct ll_scan_set *scan;

	scan = ull_scan_set_get(handle);
	if (!scan || scan->is_enabled) {
    1cf2:	4c19      	ldr	r4, [pc, #100]	; (1d58 <ll_scan_params_set+0x68>)
{
    1cf4:	f89d e010 	ldrb.w	lr, [sp, #16]
	if (!scan || scan->is_enabled) {
    1cf8:	f894 c044 	ldrb.w	ip, [r4, #68]	; 0x44
    1cfc:	f01c 0501 	ands.w	r5, ip, #1
    1d00:	d122      	bne.n	1d48 <ll_scan_params_set+0x58>
	scan->own_addr_type = own_addr_type;
    1d02:	f363 0c42 	bfi	ip, r3, #1, #2
	lll->filter_policy = filter_policy;
    1d06:	0140      	lsls	r0, r0, #5
    1d08:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	lll->interval = interval;
    1d0c:	87a1      	strh	r1, [r4, #60]	; 0x3c
	lll->filter_policy = filter_policy;
    1d0e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
    1d12:	f00e 0e18 	and.w	lr, lr, #24
    1d16:	f000 0020 	and.w	r0, r0, #32
    1d1a:	ea40 000e 	orr.w	r0, r0, lr
    1d1e:	f023 0338 	bic.w	r3, r3, #56	; 0x38
    1d22:	4303      	orrs	r3, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d24:	480d      	ldr	r0, [pc, #52]	; (1d5c <ll_scan_params_set+0x6c>)
	lll->filter_policy = filter_policy;
    1d26:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d2a:	fba2 0100 	umull	r0, r1, r2, r0
    1d2e:	2391      	movs	r3, #145	; 0x91
    1d30:	fb03 1102 	mla	r1, r3, r2, r1
    1d34:	a306      	add	r3, pc, #24	; (adr r3, 1d50 <ll_scan_params_set+0x60>)
    1d36:	e9d3 2300 	ldrd	r2, r3, [r3]
	scan->own_addr_type = own_addr_type;
    1d3a:	f884 c044 	strb.w	ip, [r4, #68]	; 0x44
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d3e:	f7fe ff6b 	bl	c18 <__aeabi_uldivmod>
    1d42:	6420      	str	r0, [r4, #64]	; 0x40
}
    1d44:	4628      	mov	r0, r5
    1d46:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1d48:	250c      	movs	r5, #12
}
    1d4a:	4628      	mov	r0, r5
    1d4c:	bd38      	pop	{r3, r4, r5, pc}
    1d4e:	bf00      	nop
    1d50:	1afd498d 	.word	0x1afd498d
    1d54:	00000007 	.word	0x00000007
    1d58:	20002da8 	.word	0x20002da8
    1d5c:	84e72a00 	.word	0x84e72a00

00001d60 <ull_scan_params_set>:
{
    1d60:	b510      	push	{r4, lr}
    1d62:	f89d c008 	ldrb.w	ip, [sp, #8]
    1d66:	4604      	mov	r4, r0
	lll->filter_policy = filter_policy;
    1d68:	0149      	lsls	r1, r1, #5
    1d6a:	ea4f 00cc 	mov.w	r0, ip, lsl #3
    1d6e:	f000 0018 	and.w	r0, r0, #24
    1d72:	f001 0c20 	and.w	ip, r1, #32
    1d76:	7da1      	ldrb	r1, [r4, #22]
	lll->interval = interval;
    1d78:	8422      	strh	r2, [r4, #32]
	lll->filter_policy = filter_policy;
    1d7a:	ea4c 0c00 	orr.w	ip, ip, r0
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d7e:	480c      	ldr	r0, [pc, #48]	; (1db0 <ull_scan_params_set+0x50>)
	lll->filter_policy = filter_policy;
    1d80:	f021 0138 	bic.w	r1, r1, #56	; 0x38
    1d84:	ea4c 0c01 	orr.w	ip, ip, r1
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d88:	2291      	movs	r2, #145	; 0x91
    1d8a:	fba3 0100 	umull	r0, r1, r3, r0
    1d8e:	fb02 1103 	mla	r1, r2, r3, r1
	lll->filter_policy = filter_policy;
    1d92:	f884 c016 	strb.w	ip, [r4, #22]
	lll->ticks_window = HAL_TICKER_US_TO_TICKS((uint64_t)window *
    1d96:	a304      	add	r3, pc, #16	; (adr r3, 1da8 <ull_scan_params_set+0x48>)
    1d98:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d9c:	f7fe ff3c 	bl	c18 <__aeabi_uldivmod>
    1da0:	6260      	str	r0, [r4, #36]	; 0x24
}
    1da2:	bd10      	pop	{r4, pc}
    1da4:	f3af 8000 	nop.w
    1da8:	1afd498d 	.word	0x1afd498d
    1dac:	00000007 	.word	0x00000007
    1db0:	84e72a00 	.word	0x84e72a00
    1db4:	00000000 	.word	0x00000000

00001db8 <ull_scan_enable>:
{
    1db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1dbc:	4604      	mov	r4, r0
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1dbe:	f100 0135 	add.w	r1, r0, #53	; 0x35
	lll->init_addr_type = scan->own_addr_type;
    1dc2:	f890 0044 	ldrb.w	r0, [r0, #68]	; 0x44
    1dc6:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
    1dca:	f3c0 0040 	ubfx	r0, r0, #1, #1
    1dce:	f360 1386 	bfi	r3, r0, #6, #1
{
    1dd2:	b08c      	sub	sp, #48	; 0x30
	lll->init_addr_type = scan->own_addr_type;
    1dd4:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	(void)ll_addr_read(lll->init_addr_type, lll->init_addr);
    1dd8:	f010 fb96 	bl	12508 <ll_addr_read>
	lll->chan = 0U;
    1ddc:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1de0:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    1de2:	484d      	ldr	r0, [pc, #308]	; (1f18 <ull_scan_enable+0x160>)
    1de4:	61e4      	str	r4, [r4, #28]
	lll->chan = 0U;
    1de6:	f002 0279 	and.w	r2, r2, #121	; 0x79
    1dea:	2500      	movs	r5, #0
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1dec:	fba3 0100 	umull	r0, r1, r3, r0
	lll->chan = 0U;
    1df0:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1df4:	2291      	movs	r2, #145	; 0x91
    1df6:	fb02 1103 	mla	r1, r2, r3, r1
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1dfa:	e9c4 5505 	strd	r5, r5, [r4, #20]
    1dfe:	a344      	add	r3, pc, #272	; (adr r3, 1f10 <ull_scan_enable+0x158>)
    1e00:	e9d3 2300 	ldrd	r2, r3, [r3]
	hdr->ref = 0U;
    1e04:	7025      	strb	r5, [r4, #0]
    1e06:	f7fe ff07 	bl	c18 <__aeabi_uldivmod>
	scan->ull.ticks_prepare_to_start =
    1e0a:	2331      	movs	r3, #49	; 0x31
    1e0c:	e9c4 5301 	strd	r5, r3, [r4, #4]
	if ((lll->ticks_window +
    1e10:	6c23      	ldr	r3, [r4, #64]	; 0x40
	scan->ull.ticks_preempt_to_start =
    1e12:	60e5      	str	r5, [r4, #12]
	if ((lll->ticks_window +
    1e14:	3309      	adds	r3, #9
	    (ticks_interval -
    1e16:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
	if ((lll->ticks_window +
    1e1a:	4293      	cmp	r3, r2
		scan->ull.ticks_slot =
    1e1c:	bf32      	itee	cc
    1e1e:	6123      	strcc	r3, [r4, #16]
			scan->ull.ticks_slot = ticks_interval -
    1e20:	6122      	strcs	r2, [r4, #16]
		lll->ticks_window = 0U;
    1e22:	6425      	strcs	r5, [r4, #64]	; 0x40
	ticks_interval = HAL_TICKER_US_TO_TICKS((uint64_t)lll->interval *
    1e24:	4606      	mov	r6, r0
	ticks_anchor = ticker_ticks_now_get();
    1e26:	f010 fb37 	bl	12498 <ticker_ticks_now_get>
	if (!lll->conn) {
    1e2a:	6a23      	ldr	r3, [r4, #32]
	ticks_anchor = ticker_ticks_now_get();
    1e2c:	4607      	mov	r7, r0
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1e2e:	f10d 082c 	add.w	r8, sp, #44	; 0x2c
	if (!lll->conn) {
    1e32:	2b00      	cmp	r3, #0
    1e34:	d04c      	beq.n	1ed0 <ull_scan_enable+0x118>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1e36:	4d39      	ldr	r5, [pc, #228]	; (1f1c <ull_scan_enable+0x164>)
    1e38:	4b39      	ldr	r3, [pc, #228]	; (1f20 <ull_scan_enable+0x168>)
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e3a:	f8cd 8020 	str.w	r8, [sp, #32]
    1e3e:	9406      	str	r4, [sp, #24]
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1e40:	1b65      	subs	r5, r4, r5
    1e42:	fba3 3505 	umull	r3, r5, r3, r5
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1e46:	4834      	ldr	r0, [pc, #208]	; (1f18 <ull_scan_enable+0x160>)
    1e48:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e4a:	f04f 0a00 	mov.w	sl, #0
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1e4e:	fba3 0100 	umull	r0, r1, r3, r0
    1e52:	2291      	movs	r2, #145	; 0x91
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e54:	f8cd a00c 	str.w	sl, [sp, #12]
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1e58:	fb02 1103 	mla	r1, r2, r3, r1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e5c:	6923      	ldr	r3, [r4, #16]
    1e5e:	9304      	str	r3, [sp, #16]
    1e60:	4b30      	ldr	r3, [pc, #192]	; (1f24 <ull_scan_enable+0x16c>)
    1e62:	9307      	str	r3, [sp, #28]
    1e64:	4b30      	ldr	r3, [pc, #192]	; (1f28 <ull_scan_enable+0x170>)
    1e66:	9305      	str	r3, [sp, #20]
	ret_cb = TICKER_STATUS_BUSY;
    1e68:	f04f 0902 	mov.w	r9, #2
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1e6c:	a328      	add	r3, pc, #160	; (adr r3, 1f10 <ull_scan_enable+0x158>)
    1e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ret_cb = TICKER_STATUS_BUSY;
    1e72:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
			   HAL_TICKER_REMAINDER((uint64_t)lll->interval *
    1e76:	f7fe fecf 	bl	c18 <__aeabi_uldivmod>
    1e7a:	4610      	mov	r0, r2
    1e7c:	4619      	mov	r1, r3
    1e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1e82:	2300      	movs	r3, #0
    1e84:	f7fe fec8 	bl	c18 <__aeabi_uldivmod>
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
    1e88:	092d      	lsrs	r5, r5, #4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e8a:	3504      	adds	r5, #4
    1e8c:	b2ed      	uxtb	r5, r5
    1e8e:	462a      	mov	r2, r5
    1e90:	e9cd 6001 	strd	r6, r0, [sp, #4]
    1e94:	463b      	mov	r3, r7
    1e96:	2103      	movs	r1, #3
    1e98:	f8cd a000 	str.w	sl, [sp]
    1e9c:	4650      	mov	r0, sl
    1e9e:	f010 f9d1 	bl	12244 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1ea2:	4641      	mov	r1, r8
    1ea4:	f012 ff42 	bl	14d2c <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1ea8:	4605      	mov	r5, r0
    1eaa:	b968      	cbnz	r0, 1ec8 <ull_scan_enable+0x110>
	scan->is_enabled = 1U;
    1eac:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
    1eb0:	f043 0301 	orr.w	r3, r3, #1
    1eb4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
    1eb8:	f013 ffd4 	bl	15e64 <ull_adv_is_enabled_get>
    1ebc:	4604      	mov	r4, r0
    1ebe:	b1f8      	cbz	r0, 1f00 <ull_scan_enable+0x148>
	return 0;
    1ec0:	4628      	mov	r0, r5
}
    1ec2:	b00c      	add	sp, #48	; 0x30
    1ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
    1ec8:	200c      	movs	r0, #12
}
    1eca:	b00c      	add	sp, #48	; 0x30
    1ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t offset_us = 0U;
    1ed0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
		ull_sched_after_mstr_slot_get(TICKER_USER_ID_THREAD,
    1ed4:	6921      	ldr	r1, [r4, #16]
    1ed6:	4643      	mov	r3, r8
    1ed8:	aa0a      	add	r2, sp, #40	; 0x28
    1eda:	2003      	movs	r0, #3
    1edc:	f001 f974 	bl	31c8 <ull_sched_after_mstr_slot_get>
		if (offset_us) {
    1ee0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    1ee2:	2900      	cmp	r1, #0
    1ee4:	d0a7      	beq.n	1e36 <ull_scan_enable+0x7e>
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1ee6:	4811      	ldr	r0, [pc, #68]	; (1f2c <ull_scan_enable+0x174>)
    1ee8:	a309      	add	r3, pc, #36	; (adr r3, 1f10 <ull_scan_enable+0x158>)
    1eea:	e9d3 2300 	ldrd	r2, r3, [r3]
    1eee:	fba1 0100 	umull	r0, r1, r1, r0
    1ef2:	f7fe fe91 	bl	c18 <__aeabi_uldivmod>
			ticks_anchor = ticks_ref +
    1ef6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
				       HAL_TICKER_US_TO_TICKS(offset_us);
    1ef8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_anchor = ticks_ref +
    1efc:	4407      	add	r7, r0
    1efe:	e79a      	b.n	1e36 <ull_scan_enable+0x7e>
		ull_filter_adv_scan_state_cb(BIT(1));
    1f00:	4648      	mov	r0, r9
    1f02:	f01a fb87 	bl	1c614 <ull_filter_adv_scan_state_cb>
	return 0;
    1f06:	4620      	mov	r0, r4
}
    1f08:	b00c      	add	sp, #48	; 0x30
    1f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f0e:	bf00      	nop
    1f10:	1afd498d 	.word	0x1afd498d
    1f14:	00000007 	.word	0x00000007
    1f18:	84e72a00 	.word	0x84e72a00
    1f1c:	20002da8 	.word	0x20002da8
    1f20:	38e38e39 	.word	0x38e38e39
    1f24:	0001425d 	.word	0x0001425d
    1f28:	00016095 	.word	0x00016095
    1f2c:	3b9aca00 	.word	0x3b9aca00

00001f30 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f34:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
    1f36:	8e45      	ldrh	r5, [r0, #50]	; 0x32
    1f38:	441d      	add	r5, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f3a:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f3e:	b2ad      	uxth	r5, r5
    1f40:	4429      	add	r1, r5
{
    1f42:	4616      	mov	r6, r2
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f44:	f013 0207 	ands.w	r2, r3, #7
{
    1f48:	b08b      	sub	sp, #44	; 0x2c
    1f4a:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1f4c:	b289      	uxth	r1, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1f4e:	d00a      	beq.n	1f66 <event_conn_upd_prep+0x36>
		static memq_link_t s_link;
		static struct mayfly s_mfy_sched_offset = {0, 0,
			&s_link, 0, 0 };
		void (*fp_mfy_select_or_use)(void *) = NULL;

		switch (conn->llcp_cu.state) {
    1f50:	1e53      	subs	r3, r2, #1
    1f52:	2b04      	cmp	r3, #4
    1f54:	f200 8370 	bhi.w	2638 <event_conn_upd_prep+0x708>
    1f58:	e8df f013 	tbh	[pc, r3, lsl #1]
    1f5c:	023701c6 	.word	0x023701c6
    1f60:	015001a1 	.word	0x015001a1
    1f64:	023a      	.short	0x023a
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1f66:	f8b0 70e8 	ldrh.w	r7, [r0, #232]	; 0xe8
    1f6a:	1bc9      	subs	r1, r1, r7
    1f6c:	fa1f f881 	uxth.w	r8, r1
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1f70:	0409      	lsls	r1, r1, #16
    1f72:	f100 816e 	bmi.w	2252 <event_conn_upd_prep+0x322>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    1f76:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    1f7a:	2b00      	cmp	r3, #0
    1f7c:	f2c0 826a 	blt.w	2454 <event_conn_upd_prep+0x524>
			conn->periph.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1f80:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
    1f84:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1f88:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
    1f8c:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1f90:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
    1f94:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1f98:	4293      	cmp	r3, r2
    1f9a:	d00a      	beq.n	1fb2 <event_conn_upd_prep+0x82>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1f9c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1fa0:	f003 030f 	and.w	r3, r3, #15
    1fa4:	2b06      	cmp	r3, #6
    1fa6:	d104      	bne.n	1fb2 <event_conn_upd_prep+0x82>
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    1fa8:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1faa:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1fae:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn == conn_upd_curr) {
    1fb2:	4bbf      	ldr	r3, [pc, #764]	; (22b0 <event_conn_upd_prep+0x380>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1fb4:	f8d4 9108 	ldr.w	r9, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
    1fb8:	681a      	ldr	r2, [r3, #0]
    1fba:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
    1fbc:	bf04      	itt	eq
    1fbe:	2200      	moveq	r2, #0
    1fc0:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
    1fc2:	f1b9 0f00 	cmp.w	r9, #0
    1fc6:	f000 815a 	beq.w	227e <event_conn_upd_prep+0x34e>
    1fca:	f8d9 0000 	ldr.w	r0, [r9]
    1fce:	2800      	cmp	r0, #0
    1fd0:	f000 8155 	beq.w	227e <event_conn_upd_prep+0x34e>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fd4:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    1fd8:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
		conn->llcp_rx = rx->hdr.link->mem;
    1fdc:	6842      	ldr	r2, [r0, #4]
    1fde:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fe2:	4563      	cmp	r3, ip
		    (conn->llcp_cu.latency != lll->latency) ||
    1fe4:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1fe8:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    1fec:	f000 823a 	beq.w	2464 <event_conn_upd_prep+0x534>
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1ff0:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1ff4:	f8a9 301e 	strh.w	r3, [r9, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1ff8:	2318      	movs	r3, #24
    1ffa:	f889 3004 	strb.w	r3, [r9, #4]
			cu->status = 0x00;
    1ffe:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    2000:	f8a9 c006 	strh.w	ip, [r9, #6]
			cu->latency = conn->llcp_cu.latency;
    2004:	f8a9 2020 	strh.w	r2, [r9, #32]
			cu->timeout = conn->llcp_cu.timeout;
    2008:	f8a9 1022 	strh.w	r1, [r9, #34]	; 0x22
			cu->status = 0x00;
    200c:	f889 301c 	strb.w	r3, [r9, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    2010:	4649      	mov	r1, r9
    2012:	f012 fe13 	bl	14c3c <ll_rx_put>
		ll_rx_sched();
    2016:	f012 fe1b 	bl	14c50 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    201a:	68a3      	ldr	r3, [r4, #8]
    201c:	2b00      	cmp	r3, #0
    201e:	da09      	bge.n	2034 <event_conn_upd_prep+0x104>
			uint32_t ticks_prepare_to_start =
    2020:	68e1      	ldr	r1, [r4, #12]
    2022:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
    2024:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    2028:	4291      	cmp	r1, r2
    202a:	bf2c      	ite	cs
    202c:	1876      	addcs	r6, r6, r1
    202e:	18b6      	addcc	r6, r6, r2
    2030:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
    2032:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    2034:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
    2036:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
    203a:	fb10 f008 	smulbb	r0, r0, r8
    203e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    2040:	fbb0 f1f9 	udiv	r1, r0, r9
		conn_interval_new = latency * conn->llcp_cu.interval;
    2044:	fb19 f301 	smulbb	r3, r9, r1
    2048:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    204a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    204c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    2050:	f080 8104 	bcs.w	225c <event_conn_upd_prep+0x32c>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    2054:	1a1b      	subs	r3, r3, r0
    2056:	f240 41e2 	movw	r1, #1250	; 0x4e2
    205a:	4896      	ldr	r0, [pc, #600]	; (22b4 <event_conn_upd_prep+0x384>)
    205c:	fb03 f101 	mul.w	r1, r3, r1
    2060:	fba1 0100 	umull	r0, r1, r1, r0
    2064:	a390      	add	r3, pc, #576	; (adr r3, 22a8 <event_conn_upd_prep+0x378>)
    2066:	e9d3 2300 	ldrd	r2, r3, [r3]
    206a:	f7fe fdd5 	bl	c18 <__aeabi_uldivmod>
    206e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2072:	4406      	add	r6, r0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
		lll->latency_prepare -= (instant_latency - latency);
    2074:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    2076:	441f      	add	r7, r3
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    2078:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
    207c:	1b7d      	subs	r5, r7, r5
    207e:	4455      	add	r5, sl
		conn_interval_us = conn->llcp_cu.interval *
    2080:	f240 4be2 	movw	fp, #1250	; 0x4e2
		} else if (lll->role) {
    2084:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    2086:	85e5      	strh	r5, [r4, #46]	; 0x2e
		conn_interval_us = conn->llcp_cu.interval *
    2088:	fb0b f709 	mul.w	r7, fp, r9
		} else if (lll->role) {
    208c:	f2c0 820c 	blt.w	24a8 <event_conn_upd_prep+0x578>
			periodic_us -= lll->periph.window_widening_periodic_us;
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
		} else if (!lll->role) {
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2090:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
    2094:	4887      	ldr	r0, [pc, #540]	; (22b4 <event_conn_upd_prep+0x384>)
    2096:	a384      	add	r3, pc, #528	; (adr r3, 22a8 <event_conn_upd_prep+0x378>)
    2098:	e9d3 2300 	ldrd	r2, r3, [r3]
    209c:	fba1 0100 	umull	r0, r1, r1, r0
    20a0:	f7fe fdba 	bl	c18 <__aeabi_uldivmod>
    20a4:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
		periodic_us = conn_interval_us;
    20a8:	463d      	mov	r5, r7

			/* Workaround: Due to the missing remainder param in
			 * ticker_start function for first interval; add a
			 * tick so as to use the ceiled value.
			 */
			ticks_win_offset += 1U;
    20aa:	f108 0801 	add.w	r8, r8, #1

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20ae:	4a82      	ldr	r2, [pc, #520]	; (22b8 <event_conn_upd_prep+0x388>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20b0:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		lll->latency = conn->llcp_cu.latency;
    20b4:	f8b4 0112 	ldrh.w	r0, [r4, #274]	; 0x112

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20b8:	4980      	ldr	r1, [pc, #512]	; (22bc <event_conn_upd_prep+0x38c>)
		lll->interval = conn->llcp_cu.interval;
    20ba:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    20be:	443a      	add	r2, r7
    20c0:	fbb2 f2f7 	udiv	r2, r2, r7
    20c4:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20c8:	f242 7210 	movw	r2, #10000	; 0x2710
    20cc:	fb02 7303 	mla	r3, r2, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20d0:	4439      	add	r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20d2:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20d4:	fbb1 f1f7 	udiv	r1, r1, r7
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20d8:	fbb3 f7f7 	udiv	r7, r3, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20dc:	b28a      	uxth	r2, r1
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20de:	1d83      	adds	r3, r0, #6
    20e0:	429a      	cmp	r2, r3
		lll->latency = conn->llcp_cu.latency;
    20e2:	85a0      	strh	r0, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    20e4:	f8a4 70c2 	strh.w	r7, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    20e8:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20ec:	dd04      	ble.n	20f8 <event_conn_upd_prep+0x1c8>
    20ee:	f5c0 437f 	rsb	r3, r0, #65280	; 0xff00
    20f2:	33fa      	adds	r3, #250	; 0xfa
    20f4:	441a      	add	r2, r3
    20f6:	b292      	uxth	r2, r2
				     (conn->apto_reload - (lll->latency + 6)) :
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    20f8:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    20fc:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
		if (conn->llcp_cu.cmd) {
    2100:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    2102:	bf44      	itt	mi
    2104:	2300      	movmi	r3, #0
    2106:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    210a:	2102      	movs	r1, #2
    210c:	2001      	movs	r0, #1
    210e:	f01e f9c7 	bl	204a0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2112:	2200      	movs	r2, #0
    2114:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2116:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2118:	2001      	movs	r0, #1
    211a:	f00e fe95 	bl	10e48 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    211e:	4968      	ldr	r1, [pc, #416]	; (22c0 <event_conn_upd_prep+0x390>)
    2120:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    2124:	4620      	mov	r0, r4
    2126:	f00e fe1f 	bl	10d68 <mem_index_get>
			      0);
#endif

		/* start peripheral/central with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    212a:	f100 0a05 	add.w	sl, r0, #5
    212e:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2132:	4b64      	ldr	r3, [pc, #400]	; (22c4 <event_conn_upd_prep+0x394>)
    2134:	9400      	str	r4, [sp, #0]
    2136:	4652      	mov	r2, sl
    2138:	2101      	movs	r1, #1
    213a:	2000      	movs	r0, #0
    213c:	f010 f90c 	bl	12358 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2140:	f030 0302 	bics.w	r3, r0, #2
    2144:	d00c      	beq.n	2160 <event_conn_upd_prep+0x230>
    2146:	4a60      	ldr	r2, [pc, #384]	; (22c8 <event_conn_upd_prep+0x398>)
    2148:	4960      	ldr	r1, [pc, #384]	; (22cc <event_conn_upd_prep+0x39c>)
    214a:	4861      	ldr	r0, [pc, #388]	; (22d0 <event_conn_upd_prep+0x3a0>)
    214c:	f640 43cb 	movw	r3, #3275	; 0xccb
    2150:	f025 ff2a 	bl	27fa8 <printk>
    2154:	4040      	eors	r0, r0
    2156:	f380 8811 	msr	BASEPRI, r0
    215a:	f04f 0003 	mov.w	r0, #3
    215e:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2160:	4f54      	ldr	r7, [pc, #336]	; (22b4 <event_conn_upd_prep+0x384>)
    2162:	fba5 7b07 	umull	r7, fp, r5, r7
    2166:	a350      	add	r3, pc, #320	; (adr r3, 22a8 <event_conn_upd_prep+0x378>)
    2168:	e9d3 2300 	ldrd	r2, r3, [r3]
    216c:	4638      	mov	r0, r7
    216e:	4659      	mov	r1, fp
    2170:	f7fe fd52 	bl	c18 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2174:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
				     HAL_TICKER_REMAINDER(periodic_us),
    2178:	4856      	ldr	r0, [pc, #344]	; (22d4 <event_conn_upd_prep+0x3a4>)
    217a:	2307      	movs	r3, #7
    217c:	fba5 0100 	umull	r0, r1, r5, r0
    2180:	1a38      	subs	r0, r7, r0
    2182:	fb03 1105 	mla	r1, r3, r5, r1
    2186:	eb6b 0101 	sbc.w	r1, fp, r1
    218a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    218e:	2300      	movs	r3, #0
    2190:	f7fe fd42 	bl	c18 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2194:	e9cd 5001 	strd	r5, r0, [sp, #4]
    2198:	9408      	str	r4, [sp, #32]
    219a:	9406      	str	r4, [sp, #24]
    219c:	f8cd 8000 	str.w	r8, [sp]
				     TICKER_NULL_LAZY,
#else
				     TICKER_LAZY_MUST_EXPIRE_KEEP,
#endif /* CONFIG_BT_TICKER_LOW_LAT */
				     (ticks_slot_overhead +
				      conn->ull.ticks_slot),
    21a0:	6921      	ldr	r1, [r4, #16]
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    21a2:	f994 5039 	ldrsb.w	r5, [r4, #57]	; 0x39
    21a6:	484c      	ldr	r0, [pc, #304]	; (22d8 <event_conn_upd_prep+0x3a8>)
    21a8:	9104      	str	r1, [sp, #16]
    21aa:	494c      	ldr	r1, [pc, #304]	; (22dc <event_conn_upd_prep+0x3ac>)
    21ac:	4c4c      	ldr	r4, [pc, #304]	; (22e0 <event_conn_upd_prep+0x3b0>)
    21ae:	9407      	str	r4, [sp, #28]
    21b0:	ea11 0125 	ands.w	r1, r1, r5, asr #32
    21b4:	bf38      	it	cc
    21b6:	4601      	movcc	r1, r0
    21b8:	9105      	str	r1, [sp, #20]
    21ba:	f64f 71fe 	movw	r1, #65534	; 0xfffe
    21be:	4633      	mov	r3, r6
    21c0:	9103      	str	r1, [sp, #12]
    21c2:	4652      	mov	r2, sl
    21c4:	2101      	movs	r1, #1
    21c6:	2000      	movs	r0, #0
    21c8:	f010 f83c 	bl	12244 <ticker_start>
#else
				     ull_central_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    21cc:	f030 0302 	bics.w	r3, r0, #2
    21d0:	d00c      	beq.n	21ec <event_conn_upd_prep+0x2bc>
    21d2:	4a3d      	ldr	r2, [pc, #244]	; (22c8 <event_conn_upd_prep+0x398>)
    21d4:	493d      	ldr	r1, [pc, #244]	; (22cc <event_conn_upd_prep+0x39c>)
    21d6:	483e      	ldr	r0, [pc, #248]	; (22d0 <event_conn_upd_prep+0x3a0>)
    21d8:	f640 43e5 	movw	r3, #3301	; 0xce5
    21dc:	f025 fee4 	bl	27fa8 <printk>
    21e0:	4040      	eors	r0, r0
    21e2:	f380 8811 	msr	BASEPRI, r0
    21e6:	f04f 0003 	mov.w	r0, #3
    21ea:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    21ec:	f1b9 0f00 	cmp.w	r9, #0
    21f0:	f040 8154 	bne.w	249c <event_conn_upd_prep+0x56c>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    21f4:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    21f6:	b00b      	add	sp, #44	; 0x2c
    21f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						      conn->lll.latency + 6;
    21fc:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    21fe:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    2202:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
						      conn->lll.latency + 6;
    2206:	3206      	adds	r2, #6
    2208:	4411      	add	r1, r2
	    conn->tx_head &&
    220a:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
						      conn->lll.latency + 6;
    220e:	b289      	uxth	r1, r1
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2210:	f36f 0502 	bfc	r5, #0, #3
			conn->llcp.conn_upd.instant = event_counter +
    2214:	f8a0 10e8 	strh.w	r1, [r0, #232]	; 0xe8
			pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2218:	8119      	strh	r1, [r3, #8]
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    221a:	f1a3 0009 	sub.w	r0, r3, #9
		if (!conn->tx_ctrl) {
    221e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2222:	f884 510e 	strb.w	r5, [r4, #270]	; 0x10e
	if (
    2226:	b122      	cbz	r2, 2232 <event_conn_upd_prep+0x302>
	    !conn->llcp_enc.pause_tx &&
    2228:	f894 5166 	ldrb.w	r5, [r4, #358]	; 0x166
	    conn->tx_head &&
    222c:	07ae      	lsls	r6, r5, #30
    222e:	f140 8189 	bpl.w	2544 <event_conn_upd_prep+0x614>
		if (!conn->tx_ctrl) {
    2232:	2900      	cmp	r1, #0
    2234:	f000 819d 	beq.w	2572 <event_conn_upd_prep+0x642>
	tx->next = conn->tx_ctrl_last->next;
    2238:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
    223c:	6811      	ldr	r1, [r2, #0]
    223e:	f843 1c09 	str.w	r1, [r3, #-9]
	conn->tx_ctrl_last->next = tx;
    2242:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    2244:	f853 2c09 	ldr.w	r2, [r3, #-9]
	conn->tx_ctrl_last = tx;
    2248:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    224c:	2a00      	cmp	r2, #0
    224e:	f000 818d 	beq.w	256c <event_conn_upd_prep+0x63c>
			return -EINPROGRESS;
    2252:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2256:	b00b      	add	sp, #44	; 0x2c
    2258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    225c:	fb09 0111 	mls	r1, r9, r1, r0
    2260:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2264:	4813      	ldr	r0, [pc, #76]	; (22b4 <event_conn_upd_prep+0x384>)
    2266:	b289      	uxth	r1, r1
    2268:	fb03 f101 	mul.w	r1, r3, r1
    226c:	fba1 0100 	umull	r0, r1, r1, r0
    2270:	a30d      	add	r3, pc, #52	; (adr r3, 22a8 <event_conn_upd_prep+0x378>)
    2272:	e9d3 2300 	ldrd	r2, r3, [r3]
    2276:	f7fe fccf 	bl	c18 <__aeabi_uldivmod>
    227a:	1a36      	subs	r6, r6, r0
    227c:	e6fa      	b.n	2074 <event_conn_upd_prep+0x144>
		LL_ASSERT(rx && rx->hdr.link);
    227e:	4a12      	ldr	r2, [pc, #72]	; (22c8 <event_conn_upd_prep+0x398>)
    2280:	4918      	ldr	r1, [pc, #96]	; (22e4 <event_conn_upd_prep+0x3b4>)
    2282:	4813      	ldr	r0, [pc, #76]	; (22d0 <event_conn_upd_prep+0x3a0>)
    2284:	f44f 6342 	mov.w	r3, #3104	; 0xc20
    2288:	f025 fe8e 	bl	27fa8 <printk>
    228c:	4040      	eors	r0, r0
    228e:	f380 8811 	msr	BASEPRI, r0
    2292:	f04f 0003 	mov.w	r0, #3
    2296:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2298:	f8d9 0000 	ldr.w	r0, [r9]
    229c:	e69a      	b.n	1fd4 <event_conn_upd_prep+0xa4>
		switch (conn->llcp_cu.state) {
    229e:	f06f 000f 	mvn.w	r0, #15
}
    22a2:	b00b      	add	sp, #44	; 0x2c
    22a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    22a8:	1afd498d 	.word	0x1afd498d
    22ac:	00000007 	.word	0x00000007
    22b0:	20002e04 	.word	0x20002e04
    22b4:	3b9aca00 	.word	0x3b9aca00
    22b8:	026259ff 	.word	0x026259ff
    22bc:	01c9c37f 	.word	0x01c9c37f
    22c0:	20001ca0 	.word	0x20001ca0
    22c4:	00016781 	.word	0x00016781
    22c8:	000305cc 	.word	0x000305cc
    22cc:	000306ac 	.word	0x000306ac
    22d0:	0002fedc 	.word	0x0002fedc
    22d4:	1afd498d 	.word	0x1afd498d
    22d8:	0001b499 	.word	0x0001b499
    22dc:	0001b299 	.word	0x0001b299
    22e0:	00016729 	.word	0x00016729
    22e4:	00030698 	.word	0x00030698
			fp_mfy_select_or_use = ull_sched_mfy_win_offset_use;
    22e8:	f8df 8314 	ldr.w	r8, [pc, #788]	; 2600 <event_conn_upd_prep+0x6d0>
		rx = ll_pdu_rx_alloc_peek(1);
    22ec:	2001      	movs	r0, #1
    22ee:	f012 fcb5 	bl	14c5c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    22f2:	4607      	mov	r7, r0
    22f4:	2800      	cmp	r0, #0
    22f6:	f000 814d 	beq.w	2594 <event_conn_upd_prep+0x664>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    22fa:	48c2      	ldr	r0, [pc, #776]	; (2604 <event_conn_upd_prep+0x6d4>)
    22fc:	f00e fd02 	bl	10d04 <mem_acquire>
		if (!tx) {
    2300:	4605      	mov	r5, r0
    2302:	2800      	cmp	r0, #0
    2304:	f000 8146 	beq.w	2594 <event_conn_upd_prep+0x664>
	if (!conn_upd_curr) {
    2308:	4bbf      	ldr	r3, [pc, #764]	; (2608 <event_conn_upd_prep+0x6d8>)
    230a:	681a      	ldr	r2, [r3, #0]
    230c:	2a00      	cmp	r2, #0
    230e:	f000 8117 	beq.w	2540 <event_conn_upd_prep+0x610>
		(void)ll_pdu_rx_alloc();
    2312:	f012 fcc1 	bl	14c98 <ll_pdu_rx_alloc>
		rx->hdr.link->mem = conn->llcp_rx;
    2316:	683b      	ldr	r3, [r7, #0]
    2318:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    231c:	605a      	str	r2, [r3, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    231e:	792b      	ldrb	r3, [r5, #4]
		conn->llcp_rx = rx;
    2320:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2324:	f043 0303 	orr.w	r3, r3, #3
    2328:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    232a:	230c      	movs	r3, #12
    232c:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    232e:	2300      	movs	r3, #0
    2330:	71eb      	strb	r3, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    2332:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    2336:	722b      	strb	r3, [r5, #8]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2338:	4ab4      	ldr	r2, [pc, #720]	; (260c <event_conn_upd_prep+0x6dc>)
    233a:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
    233e:	fba2 2303 	umull	r2, r3, r2, r3
    2342:	0a9b      	lsrs	r3, r3, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2344:	f8a5 3009 	strh.w	r3, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2348:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    234c:	f8a5 300b 	strh.w	r3, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2350:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
    2354:	f8a5 300d 	strh.w	r3, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2358:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    235c:	f8a5 300f 	strh.w	r3, [r5, #15]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    2360:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
    2364:	f8c4 60f0 	str.w	r6, [r4, #240]	; 0xf0
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_REQ;
    2368:	2203      	movs	r2, #3
    236a:	f362 0302 	bfi	r3, r2, #0, #3
    236e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
    2372:	68a3      	ldr	r3, [r4, #8]
    2374:	2b00      	cmp	r3, #0
    2376:	da0a      	bge.n	238e <event_conn_upd_prep+0x45e>
			uint32_t ticks_prepare_to_start =
    2378:	68e1      	ldr	r1, [r4, #12]
    237a:	6862      	ldr	r2, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
    237c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp.conn_upd.ticks_anchor -=
    2380:	4291      	cmp	r1, r2
    2382:	bf2c      	ite	cs
    2384:	1876      	addcs	r6, r6, r1
    2386:	18b6      	addcc	r6, r6, r2
    2388:	1af3      	subs	r3, r6, r3
    238a:	f8c4 30f0 	str.w	r3, [r4, #240]	; 0xf0
		mfy_sched_offset->fp = fp_mfy_select_or_use;
    238e:	4ba0      	ldr	r3, [pc, #640]	; (2610 <event_conn_upd_prep+0x6e0>)
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2390:	2201      	movs	r2, #1
		win_offs = &pdu_ctrl_tx->llctrl.conn_update_ind.win_offset;
    2392:	3509      	adds	r5, #9
		conn->llcp.conn_upd.pdu_win_offset = win_offs;
    2394:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    2398:	2102      	movs	r1, #2
    239a:	4610      	mov	r0, r2
		mfy_sched_offset->param = (void *)conn;
    239c:	e9c3 4802 	strd	r4, r8, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    23a0:	f00e fd84 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!retval);
    23a4:	2800      	cmp	r0, #0
    23a6:	f43f af54 	beq.w	2252 <event_conn_upd_prep+0x322>
    23aa:	4a9a      	ldr	r2, [pc, #616]	; (2614 <event_conn_upd_prep+0x6e4>)
    23ac:	499a      	ldr	r1, [pc, #616]	; (2618 <event_conn_upd_prep+0x6e8>)
    23ae:	489b      	ldr	r0, [pc, #620]	; (261c <event_conn_upd_prep+0x6ec>)
    23b0:	f640 3373 	movw	r3, #2931	; 0xb73
    23b4:	f025 fdf8 	bl	27fa8 <printk>
    23b8:	4040      	eors	r0, r0
    23ba:	f380 8811 	msr	BASEPRI, r0
    23be:	f04f 0003 	mov.w	r0, #3
    23c2:	df02      	svc	2
	return -EINPROGRESS;
    23c4:	f06f 0076 	mvn.w	r0, #118	; 0x76
    23c8:	e715      	b.n	21f6 <event_conn_upd_prep+0x2c6>
		switch (conn->llcp_cu.state) {
    23ca:	f8df 8254 	ldr.w	r8, [pc, #596]	; 2620 <event_conn_upd_prep+0x6f0>
    23ce:	e78d      	b.n	22ec <event_conn_upd_prep+0x3bc>
				CONTAINER_OF(conn->llcp.conn_upd.pdu_win_offset,
    23d0:	f8d0 20ec 	ldr.w	r2, [r0, #236]	; 0xec
	    conn->tx_head &&
    23d4:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
			conn->llcp_ack = conn->llcp_req;
    23d8:	f890 00e4 	ldrb.w	r0, [r0, #228]	; 0xe4
    23dc:	f884 00e5 	strb.w	r0, [r4, #229]	; 0xe5
			conn->llcp_cu.ack = conn->llcp_cu.req;
    23e0:	f894 010c 	ldrb.w	r0, [r4, #268]	; 0x10c
	conn_upd_curr = NULL;
    23e4:	4988      	ldr	r1, [pc, #544]	; (2608 <event_conn_upd_prep+0x6d8>)
			conn->llcp_cu.ack = conn->llcp_cu.req;
    23e6:	f884 010d 	strb.w	r0, [r4, #269]	; 0x10d
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    23ea:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
    23ee:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
    23f2:	2000      	movs	r0, #0
    23f4:	6008      	str	r0, [r1, #0]
		if (!conn->tx_ctrl) {
    23f6:	f8d4 01c8 	ldr.w	r0, [r4, #456]	; 0x1c8
			tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
    23fa:	f1a2 0109 	sub.w	r1, r2, #9
	if (
    23fe:	b1b3      	cbz	r3, 242e <event_conn_upd_prep+0x4fe>
	    !conn->llcp_enc.pause_tx &&
    2400:	f894 5166 	ldrb.w	r5, [r4, #358]	; 0x166
	    conn->tx_head &&
    2404:	07ad      	lsls	r5, r5, #30
    2406:	d412      	bmi.n	242e <event_conn_upd_prep+0x4fe>
	    !conn->llcp_phy.pause_tx &&
    2408:	f894 51bf 	ldrb.w	r5, [r4, #447]	; 0x1bf
    240c:	07ef      	lsls	r7, r5, #31
    240e:	d40e      	bmi.n	242e <event_conn_upd_prep+0x4fe>
		if (conn->tx_head == conn->tx_data) {
    2410:	f8d4 51d0 	ldr.w	r5, [r4, #464]	; 0x1d0
    2414:	42ab      	cmp	r3, r5
    2416:	f000 80d7 	beq.w	25c8 <event_conn_upd_prep+0x698>
		} else if (!conn->tx_ctrl) {
    241a:	b958      	cbnz	r0, 2434 <event_conn_upd_prep+0x504>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    241c:	7918      	ldrb	r0, [r3, #4]
    241e:	f000 0003 	and.w	r0, r0, #3
    2422:	2803      	cmp	r0, #3
    2424:	f000 80df 	beq.w	25e6 <event_conn_upd_prep+0x6b6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2428:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    242c:	e004      	b.n	2438 <event_conn_upd_prep+0x508>
		if (!conn->tx_ctrl) {
    242e:	2800      	cmp	r0, #0
    2430:	f000 80a9 	beq.w	2586 <event_conn_upd_prep+0x656>
	tx->next = conn->tx_ctrl_last->next;
    2434:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    2438:	6818      	ldr	r0, [r3, #0]
    243a:	f842 0c09 	str.w	r0, [r2, #-9]
	conn->tx_ctrl_last->next = tx;
    243e:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    2440:	f852 3c09 	ldr.w	r3, [r2, #-9]
	conn->tx_ctrl_last = tx;
    2444:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
    2448:	2b00      	cmp	r3, #0
    244a:	f000 80a6 	beq.w	259a <event_conn_upd_prep+0x66a>
			return -ECANCELED;
    244e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    2452:	e6d0      	b.n	21f6 <event_conn_upd_prep+0x2c6>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
    2454:	f890 30d9 	ldrb.w	r3, [r0, #217]	; 0xd9
    2458:	2b00      	cmp	r3, #0
    245a:	f43f ad91 	beq.w	1f80 <event_conn_upd_prep+0x50>
			conn->periph.llcp_type = LLCP_NONE;
    245e:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
    2462:	e591      	b.n	1f88 <event_conn_upd_prep+0x58>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2464:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
    2468:	4594      	cmp	ip, r2
    246a:	f47f adc1 	bne.w	1ff0 <event_conn_upd_prep+0xc0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    246e:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    2472:	fb0c fe03 	mul.w	lr, ip, r3
    2476:	f242 7c10 	movw	ip, #10000	; 0x2710
    247a:	fb0c ec01 	mla	ip, ip, r1, lr
    247e:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    2482:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2486:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    248a:	fa1f fc8c 	uxth.w	ip, ip
    248e:	45e6      	cmp	lr, ip
    2490:	f47f adae 	bne.w	1ff0 <event_conn_upd_prep+0xc0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2494:	2301      	movs	r3, #1
    2496:	f889 3004 	strb.w	r3, [r9, #4]
    249a:	e5b9      	b.n	2010 <event_conn_upd_prep+0xe0>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    249c:	2201      	movs	r2, #1
    249e:	2102      	movs	r1, #2
    24a0:	4610      	mov	r0, r2
    24a2:	f00e fcd1 	bl	10e48 <mayfly_enable>
    24a6:	e6a5      	b.n	21f4 <event_conn_upd_prep+0x2c4>
				lll->periph.window_widening_periodic_us *
    24a8:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->periph.window_widening_prepare_us -=
    24aa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    24ac:	fb02 3318 	mls	r3, r2, r8, r3
    24b0:	64a3      	str	r3, [r4, #72]	; 0x48
				ceiling_fraction(((lll_clock_ppm_local_get() +
    24b2:	f01b faed 	bl	1da90 <lll_clock_ppm_local_get>
    24b6:	4605      	mov	r5, r0
    24b8:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    24bc:	f8df 8164 	ldr.w	r8, [pc, #356]	; 2624 <event_conn_upd_prep+0x6f4>
				ceiling_fraction(((lll_clock_ppm_local_get() +
    24c0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    24c4:	f01b fae6 	bl	1da94 <lll_clock_ppm_get>
    24c8:	4405      	add	r5, r0
    24ca:	fb07 f505 	mul.w	r5, r7, r5
    24ce:	4b56      	ldr	r3, [pc, #344]	; (2628 <event_conn_upd_prep+0x6f8>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    24d0:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				ceiling_fraction(((lll_clock_ppm_local_get() +
    24d4:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    24d8:	f205 253f 	addw	r5, r5, #575	; 0x23f
    24dc:	fba3 3505 	umull	r3, r5, r3, r5
    24e0:	0cad      	lsrs	r5, r5, #18
			lll->periph.window_widening_prepare_us +=
    24e2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->periph.window_widening_periodic_us =
    24e4:	6425      	str	r5, [r4, #64]	; 0x40
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    24e6:	fb0b f202 	mul.w	r2, fp, r2
				lll->periph.window_widening_periodic_us *
    24ea:	fb05 f00a 	mul.w	r0, r5, sl
			lll->periph.window_size_prepare_us =
    24ee:	6522      	str	r2, [r4, #80]	; 0x50
				(conn_interval_us >> 1) - EVENT_IFS_US;
    24f0:	087a      	lsrs	r2, r7, #1
			lll->periph.window_widening_prepare_us +=
    24f2:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    24f4:	3a96      	subs	r2, #150	; 0x96
			lll->periph.window_widening_prepare_us +=
    24f6:	4293      	cmp	r3, r2
    24f8:	bf28      	it	cs
    24fa:	4613      	movcs	r3, r2
    24fc:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->periph.ticks_to_offset = 0U;
    2500:	2300      	movs	r3, #0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2502:	fba0 0108 	umull	r0, r1, r0, r8
			conn->periph.ticks_to_offset = 0U;
    2506:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    250a:	a33b      	add	r3, pc, #236	; (adr r3, 25f8 <event_conn_upd_prep+0x6c8>)
    250c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2510:	f7fe fb82 	bl	c18 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2514:	4b3d      	ldr	r3, [pc, #244]	; (260c <event_conn_upd_prep+0x6dc>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2516:	1a36      	subs	r6, r6, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2518:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    251c:	fba3 3000 	umull	r3, r0, r3, r0
    2520:	0a80      	lsrs	r0, r0, #10
    2522:	fb0b f000 	mul.w	r0, fp, r0
    2526:	fba0 0108 	umull	r0, r1, r0, r8
    252a:	a333      	add	r3, pc, #204	; (adr r3, 25f8 <event_conn_upd_prep+0x6c8>)
    252c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2530:	f7fe fb72 	bl	c18 <__aeabi_uldivmod>
			periodic_us -= lll->periph.window_widening_periodic_us;
    2534:	1b7d      	subs	r5, r7, r5
		lll->interval = conn->llcp_cu.interval;
    2536:	f8b4 9110 	ldrh.w	r9, [r4, #272]	; 0x110
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    253a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->periph.window_widening_periodic_us;
    253e:	e5b6      	b.n	20ae <event_conn_upd_prep+0x17e>
		conn_upd_curr = conn;
    2540:	601c      	str	r4, [r3, #0]
    2542:	e6e6      	b.n	2312 <event_conn_upd_prep+0x3e2>
	    !conn->llcp_phy.pause_tx &&
    2544:	f894 51bf 	ldrb.w	r5, [r4, #447]	; 0x1bf
    2548:	07ed      	lsls	r5, r5, #31
    254a:	f53f ae72 	bmi.w	2232 <event_conn_upd_prep+0x302>
		if (conn->tx_head == conn->tx_data) {
    254e:	f8d4 51d0 	ldr.w	r5, [r4, #464]	; 0x1d0
    2552:	42aa      	cmp	r2, r5
    2554:	d026      	beq.n	25a4 <event_conn_upd_prep+0x674>
		} else if (!conn->tx_ctrl) {
    2556:	2900      	cmp	r1, #0
    2558:	f47f ae6e 	bne.w	2238 <event_conn_upd_prep+0x308>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    255c:	7911      	ldrb	r1, [r2, #4]
    255e:	f001 0103 	and.w	r1, r1, #3
    2562:	2903      	cmp	r1, #3
    2564:	d062      	beq.n	262c <event_conn_upd_prep+0x6fc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    2566:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
    256a:	e667      	b.n	223c <event_conn_upd_prep+0x30c>
		conn->tx_data_last = tx;
    256c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
    2570:	e66f      	b.n	2252 <event_conn_upd_prep+0x322>
			tx->next = conn->tx_head;
    2572:	f843 2c09 	str.w	r2, [r3, #-9]
				conn->tx_ctrl = tx;
    2576:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    257a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
    257e:	2a00      	cmp	r2, #0
    2580:	f47f ae67 	bne.w	2252 <event_conn_upd_prep+0x322>
    2584:	e7f2      	b.n	256c <event_conn_upd_prep+0x63c>
			tx->next = conn->tx_head;
    2586:	f842 3c09 	str.w	r3, [r2, #-9]
				conn->tx_ctrl = tx;
    258a:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    258e:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
    2592:	e759      	b.n	2448 <event_conn_upd_prep+0x518>
			return -ENOBUFS;
    2594:	f06f 0068 	mvn.w	r0, #104	; 0x68
    2598:	e62d      	b.n	21f6 <event_conn_upd_prep+0x2c6>
		conn->tx_data_last = tx;
    259a:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
			return -ECANCELED;
    259e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    25a2:	e628      	b.n	21f6 <event_conn_upd_prep+0x2c6>
			conn->tx_data = conn->tx_data->next;
    25a4:	6815      	ldr	r5, [r2, #0]
    25a6:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    25aa:	2900      	cmp	r1, #0
    25ac:	f47f ae44 	bne.w	2238 <event_conn_upd_prep+0x308>
			tx->next = conn->tx_head->next;
    25b0:	6811      	ldr	r1, [r2, #0]
    25b2:	f843 1c09 	str.w	r1, [r3, #-9]
			conn->tx_head->next = tx;
    25b6:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
    25b8:	f853 2c09 	ldr.w	r2, [r3, #-9]
				conn->tx_ctrl_last = tx;
    25bc:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
    25c0:	2a00      	cmp	r2, #0
    25c2:	f47f ae46 	bne.w	2252 <event_conn_upd_prep+0x322>
    25c6:	e7d1      	b.n	256c <event_conn_upd_prep+0x63c>
			conn->tx_data = conn->tx_data->next;
    25c8:	681d      	ldr	r5, [r3, #0]
    25ca:	f8c4 51d0 	str.w	r5, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    25ce:	2800      	cmp	r0, #0
    25d0:	f47f af30 	bne.w	2434 <event_conn_upd_prep+0x504>
			tx->next = conn->tx_head->next;
    25d4:	6818      	ldr	r0, [r3, #0]
    25d6:	f842 0c09 	str.w	r0, [r2, #-9]
			conn->tx_head->next = tx;
    25da:	6019      	str	r1, [r3, #0]
	if (!tx->next) {
    25dc:	f852 3c09 	ldr.w	r3, [r2, #-9]
				conn->tx_ctrl_last = tx;
    25e0:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
    25e4:	e730      	b.n	2448 <event_conn_upd_prep+0x518>
	    ((pdu_data_tx->llctrl.opcode !=
    25e6:	79d8      	ldrb	r0, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    25e8:	2803      	cmp	r0, #3
    25ea:	d0f3      	beq.n	25d4 <event_conn_upd_prep+0x6a4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    25ec:	280a      	cmp	r0, #10
    25ee:	f47f af1b 	bne.w	2428 <event_conn_upd_prep+0x4f8>
    25f2:	e7ef      	b.n	25d4 <event_conn_upd_prep+0x6a4>
    25f4:	f3af 8000 	nop.w
    25f8:	1afd498d 	.word	0x1afd498d
    25fc:	00000007 	.word	0x00000007
    2600:	0001baf9 	.word	0x0001baf9
    2604:	20002e98 	.word	0x20002e98
    2608:	20002e04 	.word	0x20002e04
    260c:	d1b71759 	.word	0xd1b71759
    2610:	20000608 	.word	0x20000608
    2614:	000305cc 	.word	0x000305cc
    2618:	0003037c 	.word	0x0003037c
    261c:	0002fedc 	.word	0x0002fedc
    2620:	00003391 	.word	0x00003391
    2624:	3b9aca00 	.word	0x3b9aca00
    2628:	431bde83 	.word	0x431bde83
	    ((pdu_data_tx->llctrl.opcode !=
    262c:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    262e:	2903      	cmp	r1, #3
    2630:	d0be      	beq.n	25b0 <event_conn_upd_prep+0x680>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    2632:	290a      	cmp	r1, #10
    2634:	d197      	bne.n	2566 <event_conn_upd_prep+0x636>
    2636:	e7bb      	b.n	25b0 <event_conn_upd_prep+0x680>
			LL_ASSERT(0);
    2638:	4a07      	ldr	r2, [pc, #28]	; (2658 <event_conn_upd_prep+0x728>)
    263a:	4908      	ldr	r1, [pc, #32]	; (265c <event_conn_upd_prep+0x72c>)
    263c:	4808      	ldr	r0, [pc, #32]	; (2660 <event_conn_upd_prep+0x730>)
    263e:	f640 33c7 	movw	r3, #3015	; 0xbc7
    2642:	f025 fcb1 	bl	27fa8 <printk>
    2646:	4040      	eors	r0, r0
    2648:	f380 8811 	msr	BASEPRI, r0
    264c:	f04f 0003 	mov.w	r0, #3
    2650:	df02      	svc	2
		void (*fp_mfy_select_or_use)(void *) = NULL;
    2652:	f04f 0800 	mov.w	r8, #0
			break;
    2656:	e649      	b.n	22ec <event_conn_upd_prep+0x3bc>
    2658:	000305cc 	.word	0x000305cc
    265c:	0002ff74 	.word	0x0002ff74
    2660:	0002fedc 	.word	0x0002fedc
    2664:	00000000 	.word	0x00000000

00002668 <ull_periph_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_periph_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    2668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;
	void *node;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    266c:	680b      	ldr	r3, [r1, #0]

	peer_addr_type = pdu_adv->tx_addr;
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    266e:	f891 9011 	ldrb.w	r9, [r1, #17]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2672:	681b      	ldr	r3, [r3, #0]
	conn = lll->hdr.parent;
    2674:	f8d2 a000 	ldr.w	sl, [r2]
{
    2678:	b097      	sub	sp, #92	; 0x5c
    267a:	4605      	mov	r5, r0
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    267c:	930b      	str	r3, [sp, #44]	; 0x2c
	peer_addr_type = pdu_adv->tx_addr;
    267e:	7f03      	ldrb	r3, [r0, #28]
    2680:	f8d0 001e 	ldr.w	r0, [r0, #30]
    2684:	9014      	str	r0, [sp, #80]	; 0x50
    2686:	f3c3 1380 	ubfx	r3, r3, #6, #1
    268a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47

	if (rl_idx != FILTER_IDX_NONE) {
    268e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2692:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    2694:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
{
    2698:	460c      	mov	r4, r1
    269a:	4617      	mov	r7, r2
    269c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
	if (rl_idx != FILTER_IDX_NONE) {
    26a0:	d14b      	bne.n	273a <ull_periph_setup+0xd2>
		peer_addr_type += 2;
	} else {
#else /* CONFIG_BT_CTLR_PRIVACY */
	if (1) {
#endif /* CONFIG_BT_CTLR_PRIVACY */
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    26a2:	e898 0003 	ldmia.w	r8, {r0, r1}
    26a6:	9012      	str	r0, [sp, #72]	; 0x48
    26a8:	f8ad 104c 	strh.w	r1, [sp, #76]	; 0x4c
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    26ac:	462b      	mov	r3, r5
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    26ae:	8dea      	ldrh	r2, [r5, #46]	; 0x2e
    26b0:	f853 bb2e 	ldr.w	fp, [r3], #46
    26b4:	789b      	ldrb	r3, [r3, #2]
    26b6:	72bb      	strb	r3, [r7, #10]
    26b8:	813a      	strh	r2, [r7, #8]
    26ba:	f8d5 302a 	ldr.w	r3, [r5, #42]	; 0x2a
    26be:	607b      	str	r3, [r7, #4]
    26c0:	f8d5 303a 	ldr.w	r3, [r5, #58]	; 0x3a
    26c4:	61bb      	str	r3, [r7, #24]
		     sizeof(conn->own_id_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    26c6:	f107 0018 	add.w	r0, r7, #24
    26ca:	f895 303e 	ldrb.w	r3, [r5, #62]	; 0x3e
    26ce:	7103      	strb	r3, [r0, #4]
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    26d0:	2105      	movs	r1, #5
    26d2:	f00e fce9 	bl	110a8 <util_ones_count_get>
    26d6:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26d8:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    26dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    26e0:	f360 0305 	bfi	r3, r0, #0, #6
    26e4:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26e6:	f3c2 0304 	ubfx	r3, r2, #0, #5
    26ea:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    26ec:	8eae      	ldrh	r6, [r5, #52]	; 0x34
    26ee:	81fe      	strh	r6, [r7, #14]
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    26f0:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    26f2:	b2b6      	uxth	r6, r6
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    26f4:	f002 031f 	and.w	r3, r2, #31
	if ((lll->data_chan_count < CHM_USED_COUNT_MIN) ||
    26f8:	d905      	bls.n	2706 <ull_periph_setup+0x9e>
    26fa:	331b      	adds	r3, #27
    26fc:	f003 031f 	and.w	r3, r3, #31
    2700:	2b0b      	cmp	r3, #11
    2702:	d800      	bhi.n	2706 <ull_periph_setup+0x9e>
	    (lll->data_chan_hop < CHM_HOP_COUNT_MIN) ||
	    (lll->data_chan_hop > CHM_HOP_COUNT_MAX) ||
    2704:	bb2e      	cbnz	r6, 2752 <ull_periph_setup+0xea>

static void invalid_release(struct ull_hdr *hdr, struct lll_conn *lll,
			    memq_link_t *link, struct node_rx_hdr *rx)
{
	/* Reset the advertising disabled callback */
	hdr->disabled_cb = NULL;
    2706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		struct node_rx_pdu *rx_csa;

		/* pick the rx node instance stored within the
		 * connection rx node.
		 */
		rx_csa = rx->rx_ftr.extra;
    2708:	68ec      	ldr	r4, [r5, #12]
	hdr->disabled_cb = NULL;
    270a:	2200      	movs	r2, #0
    270c:	615a      	str	r2, [r3, #20]
	lll->periph.initiated = 0U;
    270e:	f897 3020 	ldrb.w	r3, [r7, #32]
	rx->type = NODE_RX_TYPE_RELEASE;
    2712:	2601      	movs	r6, #1
	lll->periph.initiated = 0U;
    2714:	f362 0300 	bfi	r3, r2, #0, #1
    2718:	f887 3020 	strb.w	r3, [r7, #32]

		/* Enqueue the connection event to be release */
		ll_rx_put(link, rx);
    271c:	4658      	mov	r0, fp
    271e:	4629      	mov	r1, r5
	rx->type = NODE_RX_TYPE_RELEASE;
    2720:	712e      	strb	r6, [r5, #4]
		ll_rx_put(link, rx);
    2722:	f012 fa8b 	bl	14c3c <ll_rx_put>
		/* Mark for buffer for release */
		rx->type = NODE_RX_TYPE_RELEASE;
	}

	/* Enqueue connection or CSA event to be release */
	ll_rx_put(link, rx);
    2726:	6820      	ldr	r0, [r4, #0]
		rx->type = NODE_RX_TYPE_RELEASE;
    2728:	7126      	strb	r6, [r4, #4]
	ll_rx_put(link, rx);
    272a:	4621      	mov	r1, r4
    272c:	f012 fa86 	bl	14c3c <ll_rx_put>
	ll_rx_sched();
    2730:	f012 fa8e 	bl	14c50 <ll_rx_sched>
}
    2734:	b017      	add	sp, #92	; 0x5c
    2736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    273a:	aa12      	add	r2, sp, #72	; 0x48
    273c:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    2740:	4648      	mov	r0, r9
    2742:	f019 fc8d 	bl	1c060 <ll_rl_id_addr_get>
		peer_addr_type += 2;
    2746:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    274a:	3302      	adds	r3, #2
    274c:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
    2750:	e7ac      	b.n	26ac <ull_periph_setup+0x44>
	((struct lll_adv *)ftr->param)->conn = NULL;
    2752:	6823      	ldr	r3, [r4, #0]
    2754:	2100      	movs	r1, #0
    2756:	6059      	str	r1, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2758:	f895 1037 	ldrb.w	r1, [r5, #55]	; 0x37
    275c:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    2760:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    2764:	823b      	strh	r3, [r7, #16]
	conn->periph.sca = pdu_adv->connect_ind.sca;
    2766:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    276a:	0952      	lsrs	r2, r2, #5
    276c:	f362 03c5 	bfi	r3, r2, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2770:	8e6a      	ldrh	r2, [r5, #50]	; 0x32
    2772:	920d      	str	r2, [sp, #52]	; 0x34
	conn->periph.sca = pdu_adv->connect_ind.sca;
    2774:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    2778:	f240 42e2 	movw	r2, #1250	; 0x4e2
    277c:	fb02 f606 	mul.w	r6, r2, r6
		ceiling_fraction(((lll_clock_ppm_local_get() +
    2780:	f01b f986 	bl	1da90 <lll_clock_ppm_local_get>
    2784:	900c      	str	r0, [sp, #48]	; 0x30
    2786:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
    278a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    278e:	f01b f981 	bl	1da94 <lll_clock_ppm_get>
    2792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2794:	49c2      	ldr	r1, [pc, #776]	; (2aa0 <ull_periph_setup+0x438>)
    2796:	4403      	add	r3, r0
    2798:	fb06 f303 	mul.w	r3, r6, r3
    279c:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    27a0:	f203 233f 	addw	r3, r3, #575	; 0x23f
    27a4:	fba1 2303 	umull	r2, r3, r1, r3
    27a8:	0c9b      	lsrs	r3, r3, #18
	lll->periph.window_widening_periodic_us =
    27aa:	627b      	str	r3, [r7, #36]	; 0x24
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    27ac:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    27b0:	8a39      	ldrh	r1, [r7, #16]
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    27b2:	f240 42e2 	movw	r2, #1250	; 0x4e2
    27b6:	fb03 f202 	mul.w	r2, r3, r2
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    27ba:	0873      	lsrs	r3, r6, #1
    27bc:	3b96      	subs	r3, #150	; 0x96
	lll->periph.window_size_event_us = pdu_adv->connect_ind.win_size *
    27be:	63ba      	str	r2, [r7, #56]	; 0x38
	lll->periph.window_widening_max_us = (conn_interval_us >> 1) -
    27c0:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    27c2:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    27c4:	4ab7      	ldr	r2, [pc, #732]	; (2aa4 <ull_periph_setup+0x43c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    27c6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    27ca:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    27cc:	4432      	add	r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    27ce:	4bb6      	ldr	r3, [pc, #728]	; (2aa8 <ull_periph_setup+0x440>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    27d0:	fbb2 f2f6 	udiv	r2, r2, r6
    27d4:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    27d8:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    27da:	f242 7010 	movw	r0, #10000	; 0x2710
    27de:	fb00 6202 	mla	r2, r0, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    27e2:	4433      	add	r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    27e4:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    27e6:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    27e8:	fbb2 f2f6 	udiv	r2, r2, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    27ec:	fbb3 f3f6 	udiv	r3, r3, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    27f0:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    27f4:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    27f6:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    27f8:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    27fc:	dd04      	ble.n	2808 <ull_periph_setup+0x1a0>
    27fe:	f5c1 417f 	rsb	r1, r1, #65280	; 0xff00
    2802:	31fa      	adds	r1, #250	; 0xfa
    2804:	440a      	add	r2, r1
    2806:	b292      	uxth	r2, r2
    2808:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
    280c:	687b      	ldr	r3, [r7, #4]
    280e:	f8ca 30dc 	str.w	r3, [sl, #220]	; 0xdc
		chan_sel = pdu_adv->chan_sel;
    2812:	462b      	mov	r3, r5
    2814:	f813 2f1c 	ldrb.w	r2, [r3, #28]!
    2818:	f3c2 1140 	ubfx	r1, r2, #5, #1
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    281c:	07da      	lsls	r2, r3, #31
		chan_sel = pdu_adv->chan_sel;
    281e:	910f      	str	r1, [sp, #60]	; 0x3c
    2820:	910c      	str	r1, [sp, #48]	; 0x30
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2822:	f100 8117 	bmi.w	2a54 <ull_periph_setup+0x3ec>
	cc->status = 0U;
    2826:	f44f 7380 	mov.w	r3, #256	; 0x100
    282a:	83ab      	strh	r3, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    282c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    282e:	f893 0026 	ldrb.w	r0, [r3, #38]	; 0x26
    2832:	f01a f9c5 	bl	1cbc0 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2836:	f105 032b 	add.w	r3, r5, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    283a:	2800      	cmp	r0, #0
    283c:	f000 80ed 	beq.w	2a1a <ull_periph_setup+0x3b2>
    2840:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2842:	f8c5 202b 	str.w	r2, [r5, #43]	; 0x2b
    2846:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
    2848:	809a      	strh	r2, [r3, #4]
	if (rl_idx != FILTER_IDX_NONE) {
    284a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    284e:	f000 80e8 	beq.w	2a22 <ull_periph_setup+0x3ba>
    2852:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    2856:	9814      	ldr	r0, [sp, #80]	; 0x50
    2858:	f8a5 3029 	strh.w	r3, [r5, #41]	; 0x29
    285c:	f8c5 0025 	str.w	r0, [r5, #37]	; 0x25
	cc->peer_addr_type = peer_addr_type;
    2860:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    2864:	77ab      	strb	r3, [r5, #30]
    2866:	9812      	ldr	r0, [sp, #72]	; 0x48
    2868:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    286c:	f8c5 001f 	str.w	r0, [r5, #31]
    2870:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
	cc->sca = conn->periph.sca;
    2874:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
    2878:	89fa      	ldrh	r2, [r7, #14]
    287a:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    287c:	8a3a      	ldrh	r2, [r7, #16]
    287e:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->periph.sca;
    2880:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    2884:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->periph.sca;
    2888:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    288c:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    288e:	4650      	mov	r0, sl
    2890:	f014 fbca 	bl	17028 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2894:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    2896:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    2898:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    289a:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    289c:	4658      	mov	r0, fp
    289e:	f012 f9cd 	bl	14c3c <ll_rx_put>
		rx->handle = lll->handle;
    28a2:	89bb      	ldrh	r3, [r7, #12]
    28a4:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    28a6:	231b      	movs	r3, #27
    28a8:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    28aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    28ac:	f8d5 8000 	ldr.w	r8, [r5]
		if (chan_sel) {
    28b0:	2b00      	cmp	r3, #0
    28b2:	f040 80bc 	bne.w	2a2e <ull_periph_setup+0x3c6>
			cs->csa = 0x00;
    28b6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    28ba:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    28bc:	4629      	mov	r1, r5
    28be:	4640      	mov	r0, r8
    28c0:	f012 f9bc 	bl	14c3c <ll_rx_put>
	ll_rx_sched();
    28c4:	f012 f9c4 	bl	14c50 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    28c8:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    28cc:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    28d0:	f8b7 8042 	ldrh.w	r8, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    28d4:	2101      	movs	r1, #1
    28d6:	f000 0007 	and.w	r0, r0, #7
    28da:	f01a fee7 	bl	1d6ac <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28de:	44a8      	add	r8, r5
    28e0:	f508 78e1 	add.w	r8, r8, #450	; 0x1c2
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    28e4:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28e6:	eb08 0100 	add.w	r1, r8, r0
    28ea:	4870      	ldr	r0, [pc, #448]	; (2aac <ull_periph_setup+0x444>)
	conn->ull.ticks_active_to_start = 0U;
    28ec:	f04f 0900 	mov.w	r9, #0
	conn->ull.ticks_prepare_to_start =
    28f0:	2331      	movs	r3, #49	; 0x31
    28f2:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    28f6:	fba1 0100 	umull	r0, r1, r1, r0
    28fa:	a367      	add	r3, pc, #412	; (adr r3, 2a98 <ull_periph_setup+0x430>)
    28fc:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    2900:	f8ca 9004 	str.w	r9, [sl, #4]
	conn->ull.ticks_preempt_to_start =
    2904:	f8ca 900c 	str.w	r9, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2908:	f7fe f986 	bl	c18 <__aeabi_uldivmod>
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    290c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    290e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    2910:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->periph.window_widening_periodic_us;
    2916:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2918:	f240 43e2 	movw	r3, #1250	; 0x4e2
    291c:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2920:	2102      	movs	r1, #2
    2922:	464a      	mov	r2, r9
	conn->ull.ticks_slot =
    2924:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2928:	2001      	movs	r0, #1
    292a:	f00e fa8d 	bl	10e48 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    292e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    2930:	4638      	mov	r0, r7
    2932:	f013 fa7d 	bl	15e30 <ull_adv_handle_get>
    2936:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2938:	4b5d      	ldr	r3, [pc, #372]	; (2ab0 <ull_periph_setup+0x448>)
    293a:	9700      	str	r7, [sp, #0]
    293c:	b2d2      	uxtb	r2, r2
    293e:	4648      	mov	r0, r9
    2940:	2101      	movs	r1, #1
    2942:	f00f fd09 	bl	12358 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    2946:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    294a:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    294c:	eba5 050b 	sub.w	r5, r5, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2950:	f000 808d 	beq.w	2a6e <ull_periph_setup+0x406>
	if (adv->lll.is_hdcd) {
    2954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2956:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    295a:	07db      	lsls	r3, r3, #31
    295c:	d472      	bmi.n	2a44 <ull_periph_setup+0x3dc>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    295e:	4650      	mov	r0, sl
    2960:	f014 fb62 	bl	17028 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2964:	f8df 9144 	ldr.w	r9, [pc, #324]	; 2aac <ull_periph_setup+0x444>
    2968:	fba6 8609 	umull	r8, r6, r6, r9
    296c:	a34a      	add	r3, pc, #296	; (adr r3, 2a98 <ull_periph_setup+0x430>)
    296e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2972:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2974:	4631      	mov	r1, r6
    2976:	4640      	mov	r0, r8
    2978:	f7fe f94e 	bl	c18 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    297c:	68a3      	ldr	r3, [r4, #8]
    297e:	f8cd a018 	str.w	sl, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2982:	f10b 0405 	add.w	r4, fp, #5
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2986:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    298a:	4b4a      	ldr	r3, [pc, #296]	; (2ab4 <ull_periph_setup+0x44c>)
    298c:	9307      	str	r3, [sp, #28]
    298e:	4b4a      	ldr	r3, [pc, #296]	; (2ab8 <ull_periph_setup+0x450>)
    2990:	9305      	str	r3, [sp, #20]
    2992:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
    2996:	9308      	str	r3, [sp, #32]
    2998:	f8da 3010 	ldr.w	r3, [sl, #16]
    299c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    299e:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    29a2:	4846      	ldr	r0, [pc, #280]	; (2abc <ull_periph_setup+0x454>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29a4:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    29a6:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29aa:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    29ac:	2307      	movs	r3, #7
    29ae:	ebb8 0000 	subs.w	r0, r8, r0
    29b2:	fb03 1107 	mla	r1, r3, r7, r1
    29b6:	eb66 0101 	sbc.w	r1, r6, r1
    29ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29be:	2300      	movs	r3, #0
    29c0:	f7fe f92a 	bl	c18 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29c4:	a334      	add	r3, pc, #208	; (adr r3, 2a98 <ull_periph_setup+0x430>)
    29c6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29ca:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    29ce:	fba5 0109 	umull	r0, r1, r5, r9
    29d2:	f7fe f921 	bl	c18 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    29d6:	b2e4      	uxtb	r4, r4
    29d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    29dc:	9000      	str	r0, [sp, #0]
    29de:	465b      	mov	r3, fp
    29e0:	4622      	mov	r2, r4
    29e2:	2101      	movs	r1, #1
    29e4:	2000      	movs	r0, #0
    29e6:	f00f fc2d 	bl	12244 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    29ea:	f030 0302 	bics.w	r3, r0, #2
    29ee:	d00c      	beq.n	2a0a <ull_periph_setup+0x3a2>
    29f0:	4a33      	ldr	r2, [pc, #204]	; (2ac0 <ull_periph_setup+0x458>)
    29f2:	4934      	ldr	r1, [pc, #208]	; (2ac4 <ull_periph_setup+0x45c>)
    29f4:	4834      	ldr	r0, [pc, #208]	; (2ac8 <ull_periph_setup+0x460>)
    29f6:	f240 13c9 	movw	r3, #457	; 0x1c9
    29fa:	f025 fad5 	bl	27fa8 <printk>
    29fe:	4040      	eors	r0, r0
    2a00:	f380 8811 	msr	BASEPRI, r0
    2a04:	f04f 0003 	mov.w	r0, #3
    2a08:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2a0a:	2201      	movs	r2, #1
    2a0c:	2102      	movs	r1, #2
    2a0e:	4610      	mov	r0, r2
    2a10:	f00e fa1a 	bl	10e48 <mayfly_enable>
}
    2a14:	b017      	add	sp, #92	; 0x5c
    2a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
    2a1a:	f8c5 002b 	str.w	r0, [r5, #43]	; 0x2b
    2a1e:	8098      	strh	r0, [r3, #4]
    2a20:	e713      	b.n	284a <ull_periph_setup+0x1e2>
    2a22:	2200      	movs	r2, #0
    2a24:	f8c5 2025 	str.w	r2, [r5, #37]	; 0x25
    2a28:	f8a5 2029 	strh.w	r2, [r5, #41]	; 0x29
    2a2c:	e718      	b.n	2860 <ull_periph_setup+0x1f8>
			lll->data_chan_sel = 1;
    2a2e:	7f7b      	ldrb	r3, [r7, #29]
    2a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2a34:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2a36:	1d38      	adds	r0, r7, #4
    2a38:	f019 f90e 	bl	1bc58 <lll_chan_id>
			cs->csa = 0x01;
    2a3c:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    2a3e:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    2a40:	772b      	strb	r3, [r5, #28]
    2a42:	e73b      	b.n	28bc <ull_periph_setup+0x254>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2a44:	2300      	movs	r3, #0
    2a46:	2201      	movs	r2, #1
    2a48:	9300      	str	r3, [sp, #0]
    2a4a:	4618      	mov	r0, r3
    2a4c:	4611      	mov	r1, r2
    2a4e:	f00f fc83 	bl	12358 <ticker_stop>
    2a52:	e784      	b.n	295e <ull_periph_setup+0x2f6>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2a54:	4a1a      	ldr	r2, [pc, #104]	; (2ac0 <ull_periph_setup+0x458>)
    2a56:	491d      	ldr	r1, [pc, #116]	; (2acc <ull_periph_setup+0x464>)
    2a58:	481b      	ldr	r0, [pc, #108]	; (2ac8 <ull_periph_setup+0x460>)
    2a5a:	23f1      	movs	r3, #241	; 0xf1
    2a5c:	f025 faa4 	bl	27fa8 <printk>
    2a60:	4040      	eors	r0, r0
    2a62:	f380 8811 	msr	BASEPRI, r0
    2a66:	f04f 0003 	mov.w	r0, #3
    2a6a:	df02      	svc	2
    2a6c:	e6db      	b.n	2826 <ull_periph_setup+0x1be>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2a6e:	f012 f99b 	bl	14da8 <ull_disable_mark_get>
    2a72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2a74:	4283      	cmp	r3, r0
    2a76:	f43f af6d 	beq.w	2954 <ull_periph_setup+0x2ec>
    2a7a:	4a11      	ldr	r2, [pc, #68]	; (2ac0 <ull_periph_setup+0x458>)
    2a7c:	4914      	ldr	r1, [pc, #80]	; (2ad0 <ull_periph_setup+0x468>)
    2a7e:	4812      	ldr	r0, [pc, #72]	; (2ac8 <ull_periph_setup+0x460>)
    2a80:	f240 239f 	movw	r3, #671	; 0x29f
    2a84:	f025 fa90 	bl	27fa8 <printk>
    2a88:	4040      	eors	r0, r0
    2a8a:	f380 8811 	msr	BASEPRI, r0
    2a8e:	f04f 0003 	mov.w	r0, #3
    2a92:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    2a94:	e75e      	b.n	2954 <ull_periph_setup+0x2ec>
    2a96:	bf00      	nop
    2a98:	1afd498d 	.word	0x1afd498d
    2a9c:	00000007 	.word	0x00000007
    2aa0:	431bde83 	.word	0x431bde83
    2aa4:	026259ff 	.word	0x026259ff
    2aa8:	01c9c37f 	.word	0x01c9c37f
    2aac:	3b9aca00 	.word	0x3b9aca00
    2ab0:	0001b25d 	.word	0x0001b25d
    2ab4:	0001b22d 	.word	0x0001b22d
    2ab8:	0001b299 	.word	0x0001b299
    2abc:	1afd498d 	.word	0x1afd498d
    2ac0:	000307c8 	.word	0x000307c8
    2ac4:	000306ac 	.word	0x000306ac
    2ac8:	0002fedc 	.word	0x0002fedc
    2acc:	00030108 	.word	0x00030108
    2ad0:	00030824 	.word	0x00030824
    2ad4:	00000000 	.word	0x00000000

00002ad8 <ll_create_connection>:
uint8_t ll_create_connection(uint16_t scan_interval, uint16_t scan_window,
			  uint8_t filter_policy, uint8_t peer_addr_type,
			  uint8_t const *const peer_addr, uint8_t own_addr_type,
			  uint16_t interval, uint16_t latency, uint16_t timeout)
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
{
    2ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2adc:	b08b      	sub	sp, #44	; 0x2c
    2ade:	460f      	mov	r7, r1
    2ae0:	9304      	str	r3, [sp, #16]
    2ae2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
    2ae6:	9005      	str	r0, [sp, #20]
    2ae8:	9306      	str	r3, [sp, #24]
	uint16_t max_rx_time;
	memq_link_t *link;
	uint8_t hop;
	int err;

	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2aea:	2000      	movs	r0, #0
{
    2aec:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
    2af0:	f89d 9054 	ldrb.w	r9, [sp, #84]	; 0x54
    2af4:	f8bd b05c 	ldrh.w	fp, [sp, #92]	; 0x5c
    2af8:	9303      	str	r3, [sp, #12]
    2afa:	4616      	mov	r6, r2
	scan = ull_scan_is_disabled_get(SCAN_HANDLE_1M);
    2afc:	f013 fbda 	bl	162b4 <ull_scan_is_disabled_get>
	if (!scan) {
    2b00:	2800      	cmp	r0, #0
    2b02:	f000 819d 	beq.w	2e40 <ll_create_connection+0x368>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	/* Check if random address has been set */
	own_id_addr_type = (own_addr_type & 0x01);
    2b06:	f009 0a01 	and.w	sl, r9, #1
	own_id_addr = ll_addr_get(own_id_addr_type);
    2b0a:	4605      	mov	r5, r0
    2b0c:	4650      	mov	r0, sl
    2b0e:	f00f fceb 	bl	124e8 <ll_addr_get>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    2b12:	f1ba 0f00 	cmp.w	sl, #0
    2b16:	d16a      	bne.n	2bee <ll_create_connection+0x116>

#else /* !CONFIG_BT_CTLR_ADV_EXT */
	lll = &scan->lll;
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	if (lll->conn) {
    2b18:	6a2b      	ldr	r3, [r5, #32]
	lll = &scan->lll;
    2b1a:	f105 021c 	add.w	r2, r5, #28
    2b1e:	9207      	str	r2, [sp, #28]
	if (lll->conn) {
    2b20:	2b00      	cmp	r3, #0
    2b22:	d06b      	beq.n	2bfc <ll_create_connection+0x124>
		conn_lll = lll->conn;
    2b24:	f8d5 8020 	ldr.w	r8, [r5, #32]
		conn = HDR_LLL2ULL(conn_lll);
    2b28:	f8d8 4000 	ldr.w	r4, [r8]
	lll_hdr_init(&conn->lll, conn);

conn_is_valid:
#if defined(CONFIG_BT_CTLR_PHY)
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
						      conn_lll->phy_flags);
    2b2c:	f898 0044 	ldrb.w	r0, [r8, #68]	; 0x44
	ready_delay_us = lll_radio_tx_ready_delay_get(conn_lll->phy_tx,
    2b30:	f3c0 01c0 	ubfx	r1, r0, #3, #1
    2b34:	f000 0007 	and.w	r0, r0, #7
    2b38:	f01a fdb6 	bl	1d6a8 <lll_radio_tx_ready_delay_get>
	max_rx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
#endif /* CONFIG_BT_LL_SW_LLCP_LEGACY */

	conn->ull.ticks_slot =
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2b3c:	f8b8 1040 	ldrh.w	r1, [r8, #64]	; 0x40
    2b40:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
    2b44:	4401      	add	r1, r0
    2b46:	f8b8 0042 	ldrh.w	r0, [r8, #66]	; 0x42
    2b4a:	4401      	add	r1, r0
    2b4c:	48c6      	ldr	r0, [pc, #792]	; (2e68 <ll_create_connection+0x390>)
    2b4e:	a3c4      	add	r3, pc, #784	; (adr r3, 2e60 <ll_create_connection+0x388>)
    2b50:	e9d3 2300 	ldrd	r2, r3, [r3]
    2b54:	fba1 0100 	umull	r0, r1, r1, r0
    2b58:	f7fe f85e 	bl	c18 <__aeabi_uldivmod>
    2b5c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn->ull.ticks_slot =
    2b60:	6120      	str	r0, [r4, #16]
				       max_tx_time +
				       EVENT_IFS_US +
				       max_rx_time);

#if defined(CONFIG_BT_CTLR_PRIVACY)
	ull_filter_scan_update(filter_policy);
    2b62:	4630      	mov	r0, r6
    2b64:	f019 fd96 	bl	1c694 <ull_filter_scan_update>

	lll->rl_idx = FILTER_IDX_NONE;
	lll->rpa_gen = 0;
    2b68:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2b6c:	f36f 0341 	bfc	r3, #1, #1
    2b70:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	lll->rl_idx = FILTER_IDX_NONE;
    2b74:	23ff      	movs	r3, #255	; 0xff
    2b76:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    2b7a:	b366      	cbz	r6, 2bd6 <ll_create_connection+0xfe>
		/* Look up the resolving list */
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
						 NULL);
	}

	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    2b7c:	f1a9 0302 	sub.w	r3, r9, #2
    2b80:	2b01      	cmp	r3, #1
    2b82:	f240 8161 	bls.w	2e48 <ll_create_connection+0x370>
		own_addr_type &= 0x1;
		lll->rpa_gen = 1;
	}
#endif

	scan->own_addr_type = own_addr_type;
    2b86:	f895 1044 	ldrb.w	r1, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    2b8a:	9c04      	ldr	r4, [sp, #16]
	memcpy(lll->adv_addr, peer_addr, BDADDR_SIZE);
	lll->conn_timeout = timeout;

	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    2b8c:	9a05      	ldr	r2, [sp, #20]
	scan->own_addr_type = own_addr_type;
    2b8e:	f369 0142 	bfi	r1, r9, #1, #2
    2b92:	f885 1044 	strb.w	r1, [r5, #68]	; 0x44
	lll->adv_addr_type = peer_addr_type;
    2b96:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
    2b9a:	f364 0100 	bfi	r1, r4, #0, #1
    2b9e:	f885 1033 	strb.w	r1, [r5, #51]	; 0x33
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2ba2:	9914      	ldr	r1, [sp, #80]	; 0x50
    2ba4:	6809      	ldr	r1, [r1, #0]
    2ba6:	6269      	str	r1, [r5, #36]	; 0x24
    2ba8:	9914      	ldr	r1, [sp, #80]	; 0x50
    2baa:	8889      	ldrh	r1, [r1, #4]
    2bac:	8529      	strh	r1, [r5, #40]	; 0x28
	lll->conn_timeout = timeout;
    2bae:	9903      	ldr	r1, [sp, #12]
    2bb0:	8629      	strh	r1, [r5, #48]	; 0x30
	ull_scan_params_set(lll, 0, scan_interval, scan_window, filter_policy);
    2bb2:	463b      	mov	r3, r7
    2bb4:	f105 001c 	add.w	r0, r5, #28
    2bb8:	2100      	movs	r1, #0
    2bba:	9600      	str	r6, [sp, #0]
    2bbc:	f7ff f8d0 	bl	1d60 <ull_scan_params_set>

#if defined(CONFIG_BT_CTLR_ADV_EXT)
	return 0;
#else /* !CONFIG_BT_CTLR_ADV_EXT */
	/* wait for stable clocks */
	err = lll_clock_wait();
    2bc0:	f01a ff12 	bl	1d9e8 <lll_clock_wait>
	if (err) {
    2bc4:	2800      	cmp	r0, #0
    2bc6:	f040 815b 	bne.w	2e80 <ll_create_connection+0x3a8>
		conn_release(scan);

		return BT_HCI_ERR_HW_FAILURE;
	}

	return ull_scan_enable(scan);
    2bca:	4628      	mov	r0, r5
    2bcc:	f7ff f8f4 	bl	1db8 <ull_scan_enable>
#endif /* !CONFIG_BT_CTLR_ADV_EXT */
}
    2bd0:	b00b      	add	sp, #44	; 0x2c
    2bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!filter_policy && ull_filter_lll_rl_enabled()) {
    2bd6:	f01a f9a1 	bl	1cf1c <ull_filter_lll_rl_enabled>
    2bda:	2800      	cmp	r0, #0
    2bdc:	d0ce      	beq.n	2b7c <ll_create_connection+0xa4>
		lll->rl_idx = ull_filter_rl_find(peer_addr_type, peer_addr,
    2bde:	9914      	ldr	r1, [sp, #80]	; 0x50
    2be0:	9804      	ldr	r0, [sp, #16]
    2be2:	4632      	mov	r2, r6
    2be4:	f019 fec6 	bl	1c974 <ull_filter_rl_find>
    2be8:	f885 0034 	strb.w	r0, [r5, #52]	; 0x34
    2bec:	e7c6      	b.n	2b7c <ll_create_connection+0xa4>
	if (own_id_addr_type && !mem_nz((void *)own_id_addr, BDADDR_SIZE)) {
    2bee:	2106      	movs	r1, #6
    2bf0:	f00e f8ce 	bl	10d90 <mem_nz>
    2bf4:	2800      	cmp	r0, #0
    2bf6:	d18f      	bne.n	2b18 <ll_create_connection+0x40>
		return BT_HCI_ERR_INVALID_PARAM;
    2bf8:	2012      	movs	r0, #18
    2bfa:	e7e9      	b.n	2bd0 <ll_create_connection+0xf8>
	link = ll_rx_link_alloc();
    2bfc:	f012 f806 	bl	14c0c <ll_rx_link_alloc>
	if (!link) {
    2c00:	9007      	str	r0, [sp, #28]
    2c02:	2800      	cmp	r0, #0
    2c04:	f000 8173 	beq.w	2eee <ll_create_connection+0x416>
	conn = ll_conn_acquire();
    2c08:	f014 fa02 	bl	17010 <ll_conn_acquire>
	if (!conn) {
    2c0c:	4604      	mov	r4, r0
    2c0e:	2800      	cmp	r0, #0
    2c10:	f000 818f 	beq.w	2f32 <ll_create_connection+0x45a>
	err = util_aa_le32(conn_lll->access_addr);
    2c14:	3020      	adds	r0, #32
    2c16:	f00e fa5b 	bl	110d0 <util_aa_le32>
	conn_lll = &conn->lll;
    2c1a:	f104 081c 	add.w	r8, r4, #28
	LL_ASSERT(!err);
    2c1e:	2800      	cmp	r0, #0
    2c20:	f040 8158 	bne.w	2ed4 <ll_create_connection+0x3fc>
	lll_csrand_get(conn_lll->crc_init, sizeof(conn_lll->crc_init));
    2c24:	2103      	movs	r1, #3
    2c26:	f104 0024 	add.w	r0, r4, #36	; 0x24
    2c2a:	f01a fbeb 	bl	1d404 <lll_csrand_get>
	conn_lll->interval = interval;
    2c2e:	9b06      	ldr	r3, [sp, #24]
	if (!conn_lll->link_tx_free) {
    2c30:	6f60      	ldr	r0, [r4, #116]	; 0x74
	conn_lll->interval = interval;
    2c32:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn_lll->handle = 0xFFFF;
    2c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
	conn_lll->latency = latency;
    2c38:	f8a4 b02c 	strh.w	fp, [r4, #44]	; 0x2c
	conn_lll->handle = 0xFFFF;
    2c3c:	8523      	strh	r3, [r4, #40]	; 0x28
	if (!conn_lll->link_tx_free) {
    2c3e:	2800      	cmp	r0, #0
    2c40:	f000 8157 	beq.w	2ef2 <ll_create_connection+0x41a>
	memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    2c44:	f104 0164 	add.w	r1, r4, #100	; 0x64
    2c48:	f104 0268 	add.w	r2, r4, #104	; 0x68
    2c4c:	f00e f8ac 	bl	10da8 <memq_init>
	conn_lll->phy_tx = PHY_1M;
    2c50:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2c54:	4a85      	ldr	r2, [pc, #532]	; (2e6c <ll_create_connection+0x394>)
	conn_lll->phy_tx = PHY_1M;
    2c56:	f423 63ef 	bic.w	r3, r3, #1912	; 0x778
    2c5a:	f023 0307 	bic.w	r3, r3, #7
    2c5e:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    2c62:	f043 0301 	orr.w	r3, r3, #1
    2c66:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn_lll->sn = 0;
    2c6a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
    2c6e:	f023 0307 	bic.w	r3, r3, #7
	conn_lll->link_tx_free = NULL;
    2c72:	f04f 0b00 	mov.w	fp, #0
	conn_lll->sn = 0;
    2c76:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    2c7a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
    2c7e:	e9c4 3216 	strd	r3, r2, [r4, #88]	; 0x58
	conn_lll->link_tx_free = NULL;
    2c82:	f8c4 b074 	str.w	fp, [r4, #116]	; 0x74
	conn_lll->packet_tx_head_len = 0;
    2c86:	f8a4 b078 	strh.w	fp, [r4, #120]	; 0x78
	conn_lll->latency_prepare = 0;
    2c8a:	f8a4 b02e 	strh.w	fp, [r4, #46]	; 0x2e
	conn_lll->latency_event = 0;
    2c8e:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2c92:	f104 0034 	add.w	r0, r4, #52	; 0x34
    2c96:	f018 ff91 	bl	1bbbc <ull_chan_map_get>
    2c9a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
    2c9e:	f360 0305 	bfi	r3, r0, #0, #6
	lll_csrand_get(&hop, sizeof(uint8_t));
    2ca2:	2101      	movs	r1, #1
	conn_lll->data_chan_count = ull_chan_map_get(conn_lll->data_chan_map);
    2ca4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	lll_csrand_get(&hop, sizeof(uint8_t));
    2ca8:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    2cac:	f01a fbaa 	bl	1d404 <lll_csrand_get>
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2cb0:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
    2cb4:	4b6e      	ldr	r3, [pc, #440]	; (2e70 <ll_create_connection+0x398>)
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2cb6:	f8dd c00c 	ldr.w	ip, [sp, #12]
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2cba:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	conn_lll->data_chan_use = 0;
    2cbc:	f884 b03b 	strb.w	fp, [r4, #59]	; 0x3b
	conn_lll->data_chan_hop = 5 + (hop % 12);
    2cc0:	fba3 1302 	umull	r1, r3, r3, r2
    2cc4:	08db      	lsrs	r3, r3, #3
    2cc6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2cca:	eba2 0383 	sub.w	r3, r2, r3, lsl #2
    2cce:	3305      	adds	r3, #5
    2cd0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	conn_lll->data_chan_sel = 0;
    2cd4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2cd8:	9906      	ldr	r1, [sp, #24]
	conn->supervision_expire = 0U;
    2cda:	f8a4 b0c4 	strh.w	fp, [r4, #196]	; 0xc4
	conn_lll->data_chan_sel = 0;
    2cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2ce2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	conn_lll->central.initiated = 0;
    2ce6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
	conn->procedure_expire = 0U;
    2cea:	f8a4 b0c8 	strh.w	fp, [r4, #200]	; 0xc8
	conn_lll->central.initiated = 0;
    2cee:	f023 0303 	bic.w	r3, r3, #3
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2cf2:	f240 42e2 	movw	r2, #1250	; 0x4e2
	conn_lll->central.initiated = 0;
    2cf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2cfa:	4b5e      	ldr	r3, [pc, #376]	; (2e74 <ll_create_connection+0x39c>)
	conn->apto_expire = 0U;
    2cfc:	f8a4 b0d0 	strh.w	fp, [r4, #208]	; 0xd0
	conn_interval_us = (uint32_t)interval * CONN_INT_UNIT_US;
    2d00:	fb02 f101 	mul.w	r1, r2, r1
    2d04:	460a      	mov	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2d06:	440b      	add	r3, r1
    2d08:	fbb3 f3f1 	udiv	r3, r3, r1
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2d0c:	495a      	ldr	r1, [pc, #360]	; (2e78 <ll_create_connection+0x3a0>)
	conn->appto_expire = 0U;
    2d0e:	f8a4 b0cc 	strh.w	fp, [r4, #204]	; 0xcc
	conn->procedure_reload = RADIO_CONN_EVENTS(40000000,
    2d12:	4411      	add	r1, r2
    2d14:	fbb1 f1f2 	udiv	r1, r1, r2
    2d18:	f8a4 10c6 	strh.w	r1, [r4, #198]	; 0xc6
	conn->supervision_reload = RADIO_CONN_EVENTS(timeout * 10000U,
    2d1c:	f242 7110 	movw	r1, #10000	; 0x2710
    2d20:	fb01 210c 	mla	r1, r1, ip, r2
    2d24:	3901      	subs	r1, #1
    2d26:	fbb1 f2f2 	udiv	r2, r1, r2
    2d2a:	f8a4 20c2 	strh.w	r2, [r4, #194]	; 0xc2
	conn->connect_expire = CONN_ESTAB_COUNTDOWN;
    2d2e:	2206      	movs	r2, #6
    2d30:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2d34:	1d81      	adds	r1, r0, #6
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2d36:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2d38:	428a      	cmp	r2, r1
	conn->apto_reload = RADIO_CONN_EVENTS((30000000), conn_interval_us);
    2d3a:	f8a4 20ce 	strh.w	r2, [r4, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2d3e:	dd02      	ble.n	2d46 <ll_create_connection+0x26e>
    2d40:	3a06      	subs	r2, #6
    2d42:	1a12      	subs	r2, r2, r0
    2d44:	b292      	uxth	r2, r2
	conn->common.fex_valid = 0U;
    2d46:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->appto_reload = (conn->apto_reload > (conn_lll->latency + 6)) ?
    2d4a:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2d4e:	f04f 0b00 	mov.w	fp, #0
	conn->common.fex_valid = 0U;
    2d52:	f023 0307 	bic.w	r3, r3, #7
    2d56:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0U;
    2d5a:	f8a4 b0e4 	strh.w	fp, [r4, #228]	; 0xe4
    2d5e:	f884 b0e6 	strb.w	fp, [r4, #230]	; 0xe6
	conn->llcp_rx = NULL;
    2d62:	f8c4 b108 	str.w	fp, [r4, #264]	; 0x108
	conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    2d66:	f8a4 b10c 	strh.w	fp, [r4, #268]	; 0x10c
	conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    2d6a:	f8a4 b120 	strh.w	fp, [r4, #288]	; 0x120
	conn->llcp_feature.features_conn = ll_feat_get();
    2d6e:	f011 fa0f 	bl	14190 <ll_feat_get>
	conn->llcp_terminate.node_rx.hdr.link = link;
    2d72:	9b07      	ldr	r3, [sp, #28]
    2d74:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2d78:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.req = conn->llcp_version.ack = 0;
    2d7c:	f8a4 b138 	strh.w	fp, [r4, #312]	; 0x138
	conn->llcp_version.tx = conn->llcp_version.rx = 0U;
    2d80:	f023 0303 	bic.w	r3, r3, #3
    2d84:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    2d88:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_terminate.req = conn->llcp_terminate.ack = 0U;
    2d8c:	f8a4 b140 	strh.w	fp, [r4, #320]	; 0x140
	conn_lll->enc_rx = conn_lll->enc_tx = 0U;
    2d90:	f023 0318 	bic.w	r3, r3, #24
    2d94:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2d98:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	conn->llcp_terminate.reason_final = 0U;
    2d9c:	f884 b143 	strb.w	fp, [r4, #323]	; 0x143
	conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    2da0:	f023 0307 	bic.w	r3, r3, #7
    2da4:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->llcp_conn_param.disabled = 0U;
    2da8:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    2dac:	f8a4 b164 	strh.w	fp, [r4, #356]	; 0x164
	conn->llcp_conn_param.disabled = 0U;
    2db0:	f36b 1345 	bfi	r3, fp, #5, #1
    2db4:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	conn->llcp_length.disabled = 0U;
    2db8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_conn_param.req = 0U;
    2dbc:	f8a4 b184 	strh.w	fp, [r4, #388]	; 0x184
	conn->llcp_length.disabled = 0U;
    2dc0:	f36b 03c3 	bfi	r3, fp, #3, #1
	conn->llcp_feature.features_peer = 0;
    2dc4:	2200      	movs	r2, #0
	conn->llcp_length.disabled = 0U;
    2dc6:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
	conn->llcp_feature.features_peer = 0;
    2dca:	2300      	movs	r3, #0
	conn->llcp_feature.features_conn = ll_feat_get();
    2dcc:	e9c4 014a 	strd	r0, r1, [r4, #296]	; 0x128
	conn->llcp_feature.features_peer = 0;
    2dd0:	e9c4 234c 	strd	r2, r3, [r4, #304]	; 0x130
	conn->llcp_length.req = conn->llcp_length.ack = 0U;
    2dd4:	f8a4 b1ac 	strh.w	fp, [r4, #428]	; 0x1ac
	conn->llcp_length.cache.tx_octets = 0U;
    2dd8:	f8a4 b1b8 	strh.w	fp, [r4, #440]	; 0x1b8
	conn->default_tx_octets = ull_conn_default_tx_octets_get();
    2ddc:	f014 fc60 	bl	176a0 <ull_conn_default_tx_octets_get>
    2de0:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
	conn->default_tx_time = ull_conn_default_tx_time_get();
    2de4:	f014 fc62 	bl	176ac <ull_conn_default_tx_time_get>
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    2de8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2dec:	4b23      	ldr	r3, [pc, #140]	; (2e7c <ll_create_connection+0x3a4>)
	conn->default_tx_time = ull_conn_default_tx_time_get();
    2dee:	f8a4 00d4 	strh.w	r0, [r4, #212]	; 0xd4
	conn->llcp_phy.req = conn->llcp_phy.ack = 0U;
    2df2:	4013      	ands	r3, r2
    2df4:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    2df8:	f014 fc5e 	bl	176b8 <ull_conn_default_phy_tx_get>
    2dfc:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
    2e00:	f360 0302 	bfi	r3, r0, #0, #3
    2e04:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2e08:	f014 fc5c 	bl	176c4 <ull_conn_default_phy_rx_get>
    2e0c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2e10:	f8c4 b1c4 	str.w	fp, [r4, #452]	; 0x1c4
	conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    2e14:	f360 03c5 	bfi	r3, r0, #3, #3
    2e18:	f884 31c0 	strb.w	r3, [r4, #448]	; 0x1c0
	conn->ull.ticks_prepare_to_start =
    2e1c:	2331      	movs	r3, #49	; 0x31
	conn->tx_data = conn->tx_data_last = 0;
    2e1e:	e9c4 bb74 	strd	fp, fp, [r4, #464]	; 0x1d0
	conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    2e22:	e9c4 bb72 	strd	fp, fp, [r4, #456]	; 0x1c8
	conn->ull.ticks_active_to_start = 0U;
    2e26:	f8c4 b004 	str.w	fp, [r4, #4]
	conn->ull.ticks_preempt_to_start =
    2e2a:	f8c4 b00c 	str.w	fp, [r4, #12]
	conn->ull.ticks_prepare_to_start =
    2e2e:	60a3      	str	r3, [r4, #8]
	lll->conn = conn_lll;
    2e30:	f8c5 8020 	str.w	r8, [r5, #32]
	hdr->disabled_cb = hdr->disabled_param = NULL;
    2e34:	e9c4 bb05 	strd	fp, fp, [r4, #20]
	hdr->ref = 0U;
    2e38:	f884 b000 	strb.w	fp, [r4]
    2e3c:	61e4      	str	r4, [r4, #28]

#if defined(CONFIG_BT_CTLR_JIT_SCHEDULING)
	hdr->score = 0U;
	hdr->latency = 0U;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */
}
    2e3e:	e675      	b.n	2b2c <ll_create_connection+0x54>
		return BT_HCI_ERR_CMD_DISALLOWED;
    2e40:	200c      	movs	r0, #12
}
    2e42:	b00b      	add	sp, #44	; 0x2c
    2e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ull_filter_rpa_update(false);
    2e48:	2000      	movs	r0, #0
    2e4a:	f019 fc47 	bl	1c6dc <ull_filter_rpa_update>
		lll->rpa_gen = 1;
    2e4e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    2e52:	f043 0302 	orr.w	r3, r3, #2
	own_id_addr_type = (own_addr_type & 0x01);
    2e56:	46d1      	mov	r9, sl
		lll->rpa_gen = 1;
    2e58:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
    2e5c:	e693      	b.n	2b86 <ll_create_connection+0xae>
    2e5e:	bf00      	nop
    2e60:	1afd498d 	.word	0x1afd498d
    2e64:	00000007 	.word	0x00000007
    2e68:	3b9aca00 	.word	0x3b9aca00
    2e6c:	01480148 	.word	0x01480148
    2e70:	aaaaaaab 	.word	0xaaaaaaab
    2e74:	01c9c37f 	.word	0x01c9c37f
    2e78:	026259ff 	.word	0x026259ff
    2e7c:	f6ff0000 	.word	0xf6ff0000
	struct node_rx_pdu *cc;
	struct lll_conn *lll;
	struct ll_conn *conn;
	memq_link_t *link;

	lll = scan->lll.conn;
    2e80:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(!lll->link_tx_free);
    2e82:	6da3      	ldr	r3, [r4, #88]	; 0x58
    2e84:	b163      	cbz	r3, 2ea0 <ll_create_connection+0x3c8>
    2e86:	4a2d      	ldr	r2, [pc, #180]	; (2f3c <ll_create_connection+0x464>)
    2e88:	492d      	ldr	r1, [pc, #180]	; (2f40 <ll_create_connection+0x468>)
    2e8a:	482e      	ldr	r0, [pc, #184]	; (2f44 <ll_create_connection+0x46c>)
    2e8c:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
    2e90:	f025 f88a 	bl	27fa8 <printk>
    2e94:	4040      	eors	r0, r0
    2e96:	f380 8811 	msr	BASEPRI, r0
    2e9a:	f04f 0003 	mov.w	r0, #3
    2e9e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    2ea0:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    2ea4:	f104 0048 	add.w	r0, r4, #72	; 0x48
    2ea8:	f00d ff82 	bl	10db0 <memq_deinit>
	LL_ASSERT(link);
    2eac:	4606      	mov	r6, r0
    2eae:	2800      	cmp	r0, #0
    2eb0:	d031      	beq.n	2f16 <ll_create_connection+0x43e>
	lll->link_tx_free = link;

	conn = HDR_LLL2ULL(lll);
    2eb2:	6827      	ldr	r7, [r4, #0]
	lll->link_tx_free = link;
    2eb4:	65a6      	str	r6, [r4, #88]	; 0x58

	cc = (void *)&conn->llcp_terminate.node_rx;
	link = cc->hdr.link;
    2eb6:	f8d7 4144 	ldr.w	r4, [r7, #324]	; 0x144
	LL_ASSERT(link);
    2eba:	b1f4      	cbz	r4, 2efa <ll_create_connection+0x422>

	ll_rx_link_release(link);
    2ebc:	4620      	mov	r0, r4
    2ebe:	f011 feab 	bl	14c18 <ll_rx_link_release>

	ll_conn_release(conn);
    2ec2:	4638      	mov	r0, r7
    2ec4:	f014 f8aa 	bl	1701c <ll_conn_release>
	scan->lll.conn = NULL;
    2ec8:	2300      	movs	r3, #0
		return BT_HCI_ERR_HW_FAILURE;
    2eca:	2003      	movs	r0, #3
	scan->lll.conn = NULL;
    2ecc:	622b      	str	r3, [r5, #32]
}
    2ece:	b00b      	add	sp, #44	; 0x2c
    2ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LL_ASSERT(!err);
    2ed4:	4a19      	ldr	r2, [pc, #100]	; (2f3c <ll_create_connection+0x464>)
    2ed6:	491c      	ldr	r1, [pc, #112]	; (2f48 <ll_create_connection+0x470>)
    2ed8:	481a      	ldr	r0, [pc, #104]	; (2f44 <ll_create_connection+0x46c>)
    2eda:	23bf      	movs	r3, #191	; 0xbf
    2edc:	f025 f864 	bl	27fa8 <printk>
    2ee0:	4040      	eors	r0, r0
    2ee2:	f380 8811 	msr	BASEPRI, r0
    2ee6:	f04f 0003 	mov.w	r0, #3
    2eea:	df02      	svc	2
    2eec:	e69a      	b.n	2c24 <ll_create_connection+0x14c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2eee:	2007      	movs	r0, #7
    2ef0:	e66e      	b.n	2bd0 <ll_create_connection+0xf8>
		conn_lll->link_tx_free = &conn_lll->link_tx;
    2ef2:	f104 006c 	add.w	r0, r4, #108	; 0x6c
    2ef6:	6760      	str	r0, [r4, #116]	; 0x74
    2ef8:	e6a4      	b.n	2c44 <ll_create_connection+0x16c>
	LL_ASSERT(link);
    2efa:	4a10      	ldr	r2, [pc, #64]	; (2f3c <ll_create_connection+0x464>)
    2efc:	4913      	ldr	r1, [pc, #76]	; (2f4c <ll_create_connection+0x474>)
    2efe:	4811      	ldr	r0, [pc, #68]	; (2f44 <ll_create_connection+0x46c>)
    2f00:	f240 43c1 	movw	r3, #1217	; 0x4c1
    2f04:	f025 f850 	bl	27fa8 <printk>
    2f08:	4040      	eors	r0, r0
    2f0a:	f380 8811 	msr	BASEPRI, r0
    2f0e:	f04f 0003 	mov.w	r0, #3
    2f12:	df02      	svc	2
    2f14:	e7d2      	b.n	2ebc <ll_create_connection+0x3e4>
	LL_ASSERT(link);
    2f16:	4a09      	ldr	r2, [pc, #36]	; (2f3c <ll_create_connection+0x464>)
    2f18:	490c      	ldr	r1, [pc, #48]	; (2f4c <ll_create_connection+0x474>)
    2f1a:	480a      	ldr	r0, [pc, #40]	; (2f44 <ll_create_connection+0x46c>)
    2f1c:	f240 43ba 	movw	r3, #1210	; 0x4ba
    2f20:	f025 f842 	bl	27fa8 <printk>
    2f24:	4040      	eors	r0, r0
    2f26:	f380 8811 	msr	BASEPRI, r0
    2f2a:	f04f 0003 	mov.w	r0, #3
    2f2e:	df02      	svc	2
    2f30:	e7bf      	b.n	2eb2 <ll_create_connection+0x3da>
		ll_rx_link_release(link);
    2f32:	9807      	ldr	r0, [sp, #28]
    2f34:	f011 fe70 	bl	14c18 <ll_rx_link_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    2f38:	2007      	movs	r0, #7
    2f3a:	e649      	b.n	2bd0 <ll_create_connection+0xf8>
    2f3c:	00030868 	.word	0x00030868
    2f40:	000304d4 	.word	0x000304d4
    2f44:	0002fedc 	.word	0x0002fedc
    2f48:	00030254 	.word	0x00030254
    2f4c:	00030624 	.word	0x00030624

00002f50 <ull_central_setup>:
{
    2f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2f54:	4604      	mov	r4, r0
	peer_addr_type = pdu_tx->rx_addr;
    2f56:	f890 801c 	ldrb.w	r8, [r0, #28]
    2f5a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2f5c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
    2f5e:	b08d      	sub	sp, #52	; 0x34
	chan_sel = pdu_tx->chan_sel;
    2f60:	f3c8 1b40 	ubfx	fp, r8, #5, #1
    2f64:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2f68:	07e3      	lsls	r3, r4, #31
	peer_addr_type = pdu_tx->rx_addr;
    2f6a:	f3c8 16c0 	ubfx	r6, r8, #7, #1
{
    2f6e:	4689      	mov	r9, r1
    2f70:	4615      	mov	r5, r2
    2f72:	900a      	str	r0, [sp, #40]	; 0x28
	chan_sel = pdu_tx->chan_sel;
    2f74:	46d8      	mov	r8, fp
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    2f76:	f100 80f9 	bmi.w	316c <ull_central_setup+0x21c>
	cc->status = 0U;
    2f7a:	2300      	movs	r3, #0
    2f7c:	83a3      	strh	r3, [r4, #28]
	if (ftr->lrpa_used) {
    2f7e:	f899 3012 	ldrb.w	r3, [r9, #18]
	uint8_t rl_idx = ftr->rl_idx;
    2f82:	f899 0011 	ldrb.w	r0, [r9, #17]
	if (ftr->lrpa_used) {
    2f86:	f013 0301 	ands.w	r3, r3, #1
    2f8a:	bf1c      	itt	ne
    2f8c:	f8d4 301e 	ldrne.w	r3, [r4, #30]
    2f90:	f8c4 302b 	strne.w	r3, [r4, #43]	; 0x2b
		memcpy(&cc->local_rpa[0], &pdu_tx->connect_ind.init_addr[0],
    2f94:	f104 022b 	add.w	r2, r4, #43	; 0x2b
    2f98:	bf14      	ite	ne
    2f9a:	8c63      	ldrhne	r3, [r4, #34]	; 0x22
__ssp_bos_icheck3(memset, void *, int)
    2f9c:	f8c4 302b 	streq.w	r3, [r4, #43]	; 0x2b
	if (rl_idx != FILTER_IDX_NONE) {
    2fa0:	28ff      	cmp	r0, #255	; 0xff
    2fa2:	8093      	strh	r3, [r2, #4]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2fa4:	f104 0725 	add.w	r7, r4, #37	; 0x25
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2fa8:	f104 021f 	add.w	r2, r4, #31
	if (rl_idx != FILTER_IDX_NONE) {
    2fac:	f040 80d0 	bne.w	3150 <ull_central_setup+0x200>
    2fb0:	2300      	movs	r3, #0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2fb2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    2fb6:	980a      	ldr	r0, [sp, #40]	; 0x28
__ssp_bos_icheck3(memset, void *, int)
    2fb8:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
    2fbc:	80bb      	strh	r3, [r7, #4]
		cc->peer_addr_type = peer_addr_type;
    2fbe:	77a6      	strb	r6, [r4, #30]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    2fc0:	f8c4 001f 	str.w	r0, [r4, #31]
    2fc4:	8091      	strh	r1, [r2, #4]
	scan = HDR_LLL2ULL(ftr->param);
    2fc6:	f8d9 3000 	ldr.w	r3, [r9]
    2fca:	f8d3 a000 	ldr.w	sl, [r3]
	cc->interval = lll->interval;
    2fce:	89eb      	ldrh	r3, [r5, #14]
    2fd0:	8663      	strh	r3, [r4, #50]	; 0x32
	cc->latency = lll->latency;
    2fd2:	8a2b      	ldrh	r3, [r5, #16]
    2fd4:	86a3      	strh	r3, [r4, #52]	; 0x34
	cc->timeout = scan->lll.conn_timeout;
    2fd6:	f8ba 3030 	ldrh.w	r3, [sl, #48]	; 0x30
    2fda:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = lll_clock_sca_local_get();
    2fdc:	f01a fd56 	bl	1da8c <lll_clock_sca_local_get>
    2fe0:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
	conn = lll->hdr.parent;
    2fe4:	682e      	ldr	r6, [r5, #0]
	lll->handle = ll_conn_handle_get(conn);
    2fe6:	4630      	mov	r0, r6
    2fe8:	f014 f81e 	bl	17028 <ll_conn_handle_get>
		rx_csa = (void *)ftr->extra;
    2fec:	f8d9 7004 	ldr.w	r7, [r9, #4]
	lll->handle = ll_conn_handle_get(conn);
    2ff0:	81a8      	strh	r0, [r5, #12]
		ll_rx_put(link, rx);
    2ff2:	4621      	mov	r1, r4
	rx->handle = lll->handle;
    2ff4:	80e0      	strh	r0, [r4, #6]
		ll_rx_put(link, rx);
    2ff6:	6820      	ldr	r0, [r4, #0]
    2ff8:	f011 fe20 	bl	14c3c <ll_rx_put>
		rx->handle = lll->handle;
    2ffc:	89ab      	ldrh	r3, [r5, #12]
    2ffe:	80fb      	strh	r3, [r7, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3000:	231b      	movs	r3, #27
		link = rx->link;
    3002:	683c      	ldr	r4, [r7, #0]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    3004:	713b      	strb	r3, [r7, #4]
		if (chan_sel) {
    3006:	f1b8 0f00 	cmp.w	r8, #0
    300a:	f040 80bd 	bne.w	3188 <ull_central_setup+0x238>
			cs->csa = 0x00;
    300e:	f887 b01c 	strb.w	fp, [r7, #28]
	ll_rx_put(link, rx);
    3012:	4639      	mov	r1, r7
    3014:	4620      	mov	r0, r4
    3016:	f011 fe11 	bl	14c3c <ll_rx_put>
	ll_rx_sched();
    301a:	f011 fe19 	bl	14c50 <ll_rx_sched>
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    301e:	6873      	ldr	r3, [r6, #4]
    3020:	68b7      	ldr	r7, [r6, #8]
						      lll->phy_flags);
    3022:	f895 0044 	ldrb.w	r0, [r5, #68]	; 0x44
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3026:	f8b5 b00e 	ldrh.w	fp, [r5, #14]
	conn_offset_us = ftr->radio_end_us;
    302a:	f8d9 400c 	ldr.w	r4, [r9, #12]
	ticks_slot_offset = MAX(conn->ull.ticks_active_to_start,
    302e:	429f      	cmp	r7, r3
    3030:	bf38      	it	cc
    3032:	461f      	movcc	r7, r3
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3034:	f3c0 01c0 	ubfx	r1, r0, #3, #1
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3038:	f240 43e2 	movw	r3, #1250	; 0x4e2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    303c:	f000 0007 	and.w	r0, r0, #7
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    3040:	fb03 fb0b 	mul.w	fp, r3, fp
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    3044:	f01a fb30 	bl	1d6a8 <lll_radio_tx_ready_delay_get>
	conn_offset_us += EVENT_TICKER_RES_MARGIN_US;
    3048:	3420      	adds	r4, #32
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    304a:	2200      	movs	r2, #0
    304c:	2102      	movs	r1, #2
	conn_offset_us -= lll_radio_tx_ready_delay_get(lll->phy_tx,
    304e:	1a24      	subs	r4, r4, r0
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3050:	2001      	movs	r0, #1
    3052:	f00d fef9 	bl	10e48 <mayfly_enable>
	ticker_id_scan = TICKER_ID_SCAN_BASE + ull_scan_handle_get(scan);
    3056:	4650      	mov	r0, sl
    3058:	f013 f904 	bl	16264 <ull_scan_handle_get>
    305c:	1d02      	adds	r2, r0, #4
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    305e:	4b52      	ldr	r3, [pc, #328]	; (31a8 <ull_central_setup+0x258>)
    3060:	f8cd a000 	str.w	sl, [sp]
    3064:	b2d2      	uxtb	r2, r2
    3066:	2101      	movs	r1, #1
    3068:	2000      	movs	r0, #0
    306a:	f00f f975 	bl	12358 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    306e:	f030 0302 	bics.w	r3, r0, #2
    3072:	d00c      	beq.n	308e <ull_central_setup+0x13e>
    3074:	4a4d      	ldr	r2, [pc, #308]	; (31ac <ull_central_setup+0x25c>)
    3076:	494e      	ldr	r1, [pc, #312]	; (31b0 <ull_central_setup+0x260>)
    3078:	484e      	ldr	r0, [pc, #312]	; (31b4 <ull_central_setup+0x264>)
    307a:	f240 33c9 	movw	r3, #969	; 0x3c9
    307e:	f024 ff93 	bl	27fa8 <printk>
    3082:	4040      	eors	r0, r0
    3084:	f380 8811 	msr	BASEPRI, r0
    3088:	f04f 0003 	mov.w	r0, #3
    308c:	df02      	svc	2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    308e:	2500      	movs	r5, #0
    3090:	462b      	mov	r3, r5
    3092:	2203      	movs	r2, #3
    3094:	2101      	movs	r1, #1
    3096:	9500      	str	r5, [sp, #0]
    3098:	4628      	mov	r0, r5
    309a:	f00f f95d 	bl	12358 <ticker_stop>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    309e:	4630      	mov	r0, r6
    30a0:	f013 ffc2 	bl	17028 <ll_conn_handle_get>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    30a4:	f8d9 3008 	ldr.w	r3, [r9, #8]
    30a8:	9606      	str	r6, [sp, #24]
    30aa:	f1a3 0809 	sub.w	r8, r3, #9
    30ae:	4b42      	ldr	r3, [pc, #264]	; (31b8 <ull_central_setup+0x268>)
    30b0:	9307      	str	r3, [sp, #28]
    30b2:	4b42      	ldr	r3, [pc, #264]	; (31bc <ull_central_setup+0x26c>)
    30b4:	9305      	str	r3, [sp, #20]
    30b6:	f240 33f9 	movw	r3, #1017	; 0x3f9
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    30ba:	f8df 9104 	ldr.w	r9, [pc, #260]	; 31c0 <ull_central_setup+0x270>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    30be:	9308      	str	r3, [sp, #32]
    30c0:	6933      	ldr	r3, [r6, #16]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    30c2:	fbab b609 	umull	fp, r6, fp, r9
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    30c6:	e9cd 5303 	strd	r5, r3, [sp, #12]
    30ca:	eba8 0807 	sub.w	r8, r8, r7
				     HAL_TICKER_REMAINDER(conn_interval_us),
    30ce:	a334      	add	r3, pc, #208	; (adr r3, 31a0 <ull_central_setup+0x250>)
    30d0:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    30d4:	1d47      	adds	r7, r0, #5
				     HAL_TICKER_REMAINDER(conn_interval_us),
    30d6:	4631      	mov	r1, r6
    30d8:	4658      	mov	r0, fp
    30da:	f7fd fd9d 	bl	c18 <__aeabi_uldivmod>
    30de:	4610      	mov	r0, r2
    30e0:	4619      	mov	r1, r3
    30e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    30e6:	2300      	movs	r3, #0
    30e8:	f7fd fd96 	bl	c18 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    30ec:	a32c      	add	r3, pc, #176	; (adr r3, 31a0 <ull_central_setup+0x250>)
    30ee:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    30f2:	9002      	str	r0, [sp, #8]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    30f4:	4631      	mov	r1, r6
    30f6:	4658      	mov	r0, fp
    30f8:	f7fd fd8e 	bl	c18 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    30fc:	a328      	add	r3, pc, #160	; (adr r3, 31a0 <ull_central_setup+0x250>)
    30fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3102:	9001      	str	r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3104:	fba4 0109 	umull	r0, r1, r4, r9
    3108:	f7fd fd86 	bl	c18 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    310c:	b2ff      	uxtb	r7, r7
    310e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3112:	9000      	str	r0, [sp, #0]
    3114:	4643      	mov	r3, r8
    3116:	463a      	mov	r2, r7
    3118:	2101      	movs	r1, #1
    311a:	4628      	mov	r0, r5
    311c:	f00f f892 	bl	12244 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    3120:	f030 0302 	bics.w	r3, r0, #2
    3124:	d00c      	beq.n	3140 <ull_central_setup+0x1f0>
    3126:	4a21      	ldr	r2, [pc, #132]	; (31ac <ull_central_setup+0x25c>)
    3128:	4921      	ldr	r1, [pc, #132]	; (31b0 <ull_central_setup+0x260>)
    312a:	4822      	ldr	r0, [pc, #136]	; (31b4 <ull_central_setup+0x264>)
    312c:	f240 33fa 	movw	r3, #1018	; 0x3fa
    3130:	f024 ff3a 	bl	27fa8 <printk>
    3134:	4040      	eors	r0, r0
    3136:	f380 8811 	msr	BASEPRI, r0
    313a:	f04f 0003 	mov.w	r0, #3
    313e:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    3140:	2201      	movs	r2, #1
    3142:	2102      	movs	r1, #2
    3144:	4610      	mov	r0, r2
}
    3146:	b00d      	add	sp, #52	; 0x34
    3148:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    314c:	f00d be7c 	b.w	10e48 <mayfly_enable>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3150:	f104 011e 	add.w	r1, r4, #30
    3154:	f018 ff84 	bl	1c060 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    3158:	7fa3      	ldrb	r3, [r4, #30]
    315a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    315e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3160:	f8c4 0025 	str.w	r0, [r4, #37]	; 0x25
    3164:	3302      	adds	r3, #2
    3166:	77a3      	strb	r3, [r4, #30]
    3168:	80ba      	strh	r2, [r7, #4]
    316a:	e72c      	b.n	2fc6 <ull_central_setup+0x76>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
    316c:	4a0f      	ldr	r2, [pc, #60]	; (31ac <ull_central_setup+0x25c>)
    316e:	4915      	ldr	r1, [pc, #84]	; (31c4 <ull_central_setup+0x274>)
    3170:	4810      	ldr	r0, [pc, #64]	; (31b4 <ull_central_setup+0x264>)
    3172:	f44f 7352 	mov.w	r3, #840	; 0x348
    3176:	f024 ff17 	bl	27fa8 <printk>
    317a:	4040      	eors	r0, r0
    317c:	f380 8811 	msr	BASEPRI, r0
    3180:	f04f 0003 	mov.w	r0, #3
    3184:	df02      	svc	2
    3186:	e6f8      	b.n	2f7a <ull_central_setup+0x2a>
			lll->data_chan_sel = 1;
    3188:	7f6b      	ldrb	r3, [r5, #29]
    318a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    318e:	776b      	strb	r3, [r5, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3190:	1d28      	adds	r0, r5, #4
    3192:	f018 fd61 	bl	1bc58 <lll_chan_id>
			cs->csa = 0x01;
    3196:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    3198:	83e8      	strh	r0, [r5, #30]
			cs->csa = 0x01;
    319a:	773b      	strb	r3, [r7, #28]
    319c:	e739      	b.n	3012 <ull_central_setup+0xc2>
    319e:	bf00      	nop
    31a0:	1afd498d 	.word	0x1afd498d
    31a4:	00000007 	.word	0x00000007
    31a8:	0001b465 	.word	0x0001b465
    31ac:	00030868 	.word	0x00030868
    31b0:	000306ac 	.word	0x000306ac
    31b4:	0002fedc 	.word	0x0002fedc
    31b8:	0001b469 	.word	0x0001b469
    31bc:	0001b499 	.word	0x0001b499
    31c0:	3b9aca00 	.word	0x3b9aca00
    31c4:	00030108 	.word	0x00030108

000031c8 <ull_sched_after_mstr_slot_get>:
}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

void ull_sched_after_mstr_slot_get(uint8_t user_id, uint32_t ticks_slot_abs,
				   uint32_t *ticks_anchor, uint32_t *us_offset)
{
    31c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    31cc:	b08f      	sub	sp, #60	; 0x3c
    31ce:	461e      	mov	r6, r3
    31d0:	9309      	str	r3, [sp, #36]	; 0x24
    31d2:	4615      	mov	r5, r2
	uint8_t ticker_id_prev;
	uint8_t ticker_id;

	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);

	ticker_id = ticker_id_prev = 0xff;
    31d4:	23ff      	movs	r3, #255	; 0xff
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    31d6:	1d0a      	adds	r2, r1, #4
    31d8:	f8df 8104 	ldr.w	r8, [pc, #260]	; 32e0 <ull_sched_after_mstr_slot_get+0x118>
						 user_id);
			}
		}

		success = (ret_cb == TICKER_STATUS_SUCCESS);
		LL_ASSERT(success);
    31dc:	f8df b104 	ldr.w	fp, [pc, #260]	; 32e4 <ull_sched_after_mstr_slot_get+0x11c>
    31e0:	f8df a104 	ldr.w	sl, [pc, #260]	; 32e8 <ull_sched_after_mstr_slot_get+0x120>
    31e4:	f8df 9104 	ldr.w	r9, [pc, #260]	; 32ec <ull_sched_after_mstr_slot_get+0x124>
	ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US << 3);
    31e8:	9208      	str	r2, [sp, #32]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    31ea:	2100      	movs	r1, #0
    31ec:	6031      	str	r1, [r6, #0]
{
    31ee:	4604      	mov	r4, r0
	ticker_id = ticker_id_prev = 0xff;
    31f0:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    31f4:	9304      	str	r3, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    31f6:	910c      	str	r1, [sp, #48]	; 0x30
	ticks_slot_abs_prev = 0U;
    31f8:	9105      	str	r1, [sp, #20]
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0U;
    31fa:	9106      	str	r1, [sp, #24]
    31fc:	af0d      	add	r7, sp, #52	; 0x34
    31fe:	ae0c      	add	r6, sp, #48	; 0x30
		ret_cb = TICKER_STATUS_BUSY;
    3200:	2302      	movs	r3, #2
    3202:	930d      	str	r3, [sp, #52]	; 0x34
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR, user_id,
    3204:	e9cd 8701 	strd	r8, r7, [sp, #4]
    3208:	9600      	str	r6, [sp, #0]
    320a:	462b      	mov	r3, r5
    320c:	f10d 022f 	add.w	r2, sp, #47	; 0x2f
    3210:	4621      	mov	r1, r4
    3212:	2000      	movs	r0, #0
    3214:	f00f f8e2 	bl	123dc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
    3218:	2802      	cmp	r0, #2
    321a:	d02d      	beq.n	3278 <ull_sched_after_mstr_slot_get+0xb0>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    321c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    321e:	2b00      	cmp	r3, #0
    3220:	d130      	bne.n	3284 <ull_sched_after_mstr_slot_get+0xbc>

		if (ticker_id == 0xff) {
    3222:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    3226:	2bff      	cmp	r3, #255	; 0xff
    3228:	d03c      	beq.n	32a4 <ull_sched_after_mstr_slot_get+0xdc>
			break;
		}

#if !defined(CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH)
		if ((ticker_id < TICKER_ID_CONN_BASE) ||
    322a:	2b05      	cmp	r3, #5
    322c:	d1e8      	bne.n	3200 <ull_sched_after_mstr_slot_get+0x38>
		    (ticker_id > TICKER_ID_CONN_LAST)) {
			continue;
		}
#endif /* CONFIG_BT_TICKER_NEXT_SLOT_GET_MATCH */

		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
    322e:	2000      	movs	r0, #0
    3230:	f013 ff02 	bl	17038 <ll_conn_get>
		if (conn && !conn->lll.role) {
    3234:	2800      	cmp	r0, #0
    3236:	d0e3      	beq.n	3200 <ull_sched_after_mstr_slot_get+0x38>
    3238:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
    323c:	2b00      	cmp	r3, #0
    323e:	dbdf      	blt.n	3200 <ull_sched_after_mstr_slot_get+0x38>
			}
#endif

			ticks_slot_abs_curr += conn->ull.ticks_slot;

			if ((ticker_id_prev != 0xff) &&
    3240:	9904      	ldr	r1, [sp, #16]
			ticks_slot_abs_curr += conn->ull.ticks_slot;
    3242:	6902      	ldr	r2, [r0, #16]
			uint32_t ticks_to_expire_normal = ticks_to_expire;
    3244:	9b0c      	ldr	r3, [sp, #48]	; 0x30
			if ((ticker_id_prev != 0xff) &&
    3246:	29ff      	cmp	r1, #255	; 0xff
    3248:	d00c      	beq.n	3264 <ull_sched_after_mstr_slot_get+0x9c>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
    324a:	9906      	ldr	r1, [sp, #24]
    324c:	9207      	str	r2, [sp, #28]
    324e:	4618      	mov	r0, r3
    3250:	9304      	str	r3, [sp, #16]
    3252:	f00f f923 	bl	1249c <ticker_ticks_diff_get>
						   ticks_to_expire_prev) >
			     (ticks_slot_abs_prev + ticks_slot_abs))) {
    3256:	9b05      	ldr	r3, [sp, #20]
    3258:	9a08      	ldr	r2, [sp, #32]
    325a:	1899      	adds	r1, r3, r2
			if ((ticker_id_prev != 0xff) &&
    325c:	4288      	cmp	r0, r1
    325e:	9b04      	ldr	r3, [sp, #16]
    3260:	9a07      	ldr	r2, [sp, #28]
    3262:	d822      	bhi.n	32aa <ull_sched_after_mstr_slot_get+0xe2>
				break;
			}

			ticker_id_prev = ticker_id;
			ticks_to_expire_prev = ticks_to_expire_normal;
    3264:	e9cd 2305 	strd	r2, r3, [sp, #20]
			ticker_id_prev = ticker_id;
    3268:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    326c:	9304      	str	r3, [sp, #16]
			ticks_slot_abs_prev = ticks_slot_abs_curr;
    326e:	e7c7      	b.n	3200 <ull_sched_after_mstr_slot_get+0x38>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
    3270:	4621      	mov	r1, r4
    3272:	2000      	movs	r0, #0
    3274:	f00f f8f8 	bl	12468 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
    3278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    327a:	2b02      	cmp	r3, #2
    327c:	d0f8      	beq.n	3270 <ull_sched_after_mstr_slot_get+0xa8>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
    327e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		LL_ASSERT(success);
    3280:	2b00      	cmp	r3, #0
    3282:	d0ce      	beq.n	3222 <ull_sched_after_mstr_slot_get+0x5a>
    3284:	2373      	movs	r3, #115	; 0x73
    3286:	465a      	mov	r2, fp
    3288:	4651      	mov	r1, sl
    328a:	4648      	mov	r0, r9
    328c:	f024 fe8c 	bl	27fa8 <printk>
    3290:	4040      	eors	r0, r0
    3292:	f380 8811 	msr	BASEPRI, r0
    3296:	f04f 0003 	mov.w	r0, #3
    329a:	df02      	svc	2
		if (ticker_id == 0xff) {
    329c:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
    32a0:	2bff      	cmp	r3, #255	; 0xff
    32a2:	d1c2      	bne.n	322a <ull_sched_after_mstr_slot_get+0x62>
		}
	}

	if (ticker_id_prev != 0xff) {
    32a4:	9b04      	ldr	r3, [sp, #16]
    32a6:	2bff      	cmp	r3, #255	; 0xff
    32a8:	d010      	beq.n	32cc <ull_sched_after_mstr_slot_get+0x104>
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    32aa:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
    32ae:	4810      	ldr	r0, [pc, #64]	; (32f0 <ull_sched_after_mstr_slot_get+0x128>)
    32b0:	4413      	add	r3, r2
    32b2:	fba3 0100 	umull	r0, r1, r3, r0
    32b6:	2207      	movs	r2, #7
    32b8:	fb02 1103 	mla	r1, r2, r3, r1
    32bc:	a306      	add	r3, pc, #24	; (adr r3, 32d8 <ull_sched_after_mstr_slot_get+0x110>)
    32be:	e9d3 2300 	ldrd	r2, r3, [r3]
    32c2:	f7fd fca9 	bl	c18 <__aeabi_uldivmod>
    32c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
						    ticks_slot_abs_prev) +
    32c8:	3080      	adds	r0, #128	; 0x80
		*us_offset = HAL_TICKER_TICKS_TO_US(ticks_to_expire_prev +
    32ca:	6018      	str	r0, [r3, #0]
						    (EVENT_JITTER_US << 3);
	}
}
    32cc:	b00f      	add	sp, #60	; 0x3c
    32ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32d2:	bf00      	nop
    32d4:	f3af 8000 	nop.w
    32d8:	3b9aca00 	.word	0x3b9aca00
    32dc:	00000000 	.word	0x00000000
    32e0:	0001b841 	.word	0x0001b841
    32e4:	000308c0 	.word	0x000308c0
    32e8:	00030904 	.word	0x00030904
    32ec:	0002fedc 	.word	0x0002fedc
    32f0:	1afd498d 	.word	0x1afd498d
    32f4:	00000000 	.word	0x00000000

000032f8 <after_mstr_offset_get>:
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

static void after_mstr_offset_get(uint16_t conn_interval, uint32_t ticks_slot,
				  uint32_t ticks_anchor,
				  uint32_t *win_offset_us)
{
    32f8:	b570      	push	{r4, r5, r6, lr}
    32fa:	b082      	sub	sp, #8
    32fc:	461c      	mov	r4, r3
	uint32_t ticks_anchor_offset = ticks_anchor;
    32fe:	9201      	str	r2, [sp, #4]
{
    3300:	4615      	mov	r5, r2
    3302:	4606      	mov	r6, r0

	ull_sched_after_mstr_slot_get(TICKER_USER_ID_ULL_LOW, ticks_slot,
    3304:	aa01      	add	r2, sp, #4
    3306:	2002      	movs	r0, #2
    3308:	f7ff ff5e 	bl	31c8 <ull_sched_after_mstr_slot_get>
				      &ticks_anchor_offset, win_offset_us);

	if (!*win_offset_us) {
    330c:	6823      	ldr	r3, [r4, #0]
    330e:	b30b      	cbz	r3, 3354 <after_mstr_offset_get+0x5c>
		return;
	}

	if ((ticks_anchor_offset - ticks_anchor) & BIT(HAL_TICKER_CNTR_MSBIT)) {
    3310:	9801      	ldr	r0, [sp, #4]
    3312:	1b43      	subs	r3, r0, r5
    3314:	021b      	lsls	r3, r3, #8
    3316:	d41f      	bmi.n	3358 <after_mstr_offset_get+0x60>
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
			ticker_ticks_diff_get(ticks_anchor,
					      ticks_anchor_offset));
	} else {
		*win_offset_us += HAL_TICKER_TICKS_TO_US(
    3318:	4629      	mov	r1, r5
    331a:	f00f f8bf 	bl	1249c <ticker_ticks_diff_get>
    331e:	4a1a      	ldr	r2, [pc, #104]	; (3388 <after_mstr_offset_get+0x90>)
    3320:	4603      	mov	r3, r0
    3322:	2107      	movs	r1, #7
    3324:	fba0 0202 	umull	r0, r2, r0, r2
    3328:	fb01 2103 	mla	r1, r1, r3, r2
    332c:	a314      	add	r3, pc, #80	; (adr r3, 3380 <after_mstr_offset_get+0x88>)
    332e:	e9d3 2300 	ldrd	r2, r3, [r3]
    3332:	f7fd fc71 	bl	c18 <__aeabi_uldivmod>
    3336:	6822      	ldr	r2, [r4, #0]
    3338:	4402      	add	r2, r0
    333a:	6022      	str	r2, [r4, #0]
			ticker_ticks_diff_get(ticks_anchor_offset,
					      ticks_anchor));
	}

	if ((*win_offset_us & BIT(31)) == 0) {
    333c:	2a00      	cmp	r2, #0
    333e:	db09      	blt.n	3354 <after_mstr_offset_get+0x5c>
		uint32_t conn_interval_us = conn_interval * CONN_INT_UNIT_US;
    3340:	f240 40e2 	movw	r0, #1250	; 0x4e2
    3344:	fb06 f000 	mul.w	r0, r6, r0

		while (*win_offset_us > conn_interval_us) {
    3348:	4290      	cmp	r0, r2
    334a:	d203      	bcs.n	3354 <after_mstr_offset_get+0x5c>
			*win_offset_us -= conn_interval_us;
    334c:	1a12      	subs	r2, r2, r0
		while (*win_offset_us > conn_interval_us) {
    334e:	4282      	cmp	r2, r0
    3350:	d8fc      	bhi.n	334c <after_mstr_offset_get+0x54>
    3352:	6022      	str	r2, [r4, #0]
		}
	}
}
    3354:	b002      	add	sp, #8
    3356:	bd70      	pop	{r4, r5, r6, pc}
		*win_offset_us -= HAL_TICKER_TICKS_TO_US(
    3358:	4601      	mov	r1, r0
    335a:	4628      	mov	r0, r5
    335c:	f00f f89e 	bl	1249c <ticker_ticks_diff_get>
    3360:	4a09      	ldr	r2, [pc, #36]	; (3388 <after_mstr_offset_get+0x90>)
    3362:	4603      	mov	r3, r0
    3364:	2107      	movs	r1, #7
    3366:	fba0 0202 	umull	r0, r2, r0, r2
    336a:	fb01 2103 	mla	r1, r1, r3, r2
    336e:	a304      	add	r3, pc, #16	; (adr r3, 3380 <after_mstr_offset_get+0x88>)
    3370:	e9d3 2300 	ldrd	r2, r3, [r3]
    3374:	f7fd fc50 	bl	c18 <__aeabi_uldivmod>
    3378:	6822      	ldr	r2, [r4, #0]
    337a:	1a12      	subs	r2, r2, r0
    337c:	6022      	str	r2, [r4, #0]
    337e:	e7dd      	b.n	333c <after_mstr_offset_get+0x44>
    3380:	3b9aca00 	.word	0x3b9aca00
    3384:	00000000 	.word	0x00000000
    3388:	1afd498d 	.word	0x1afd498d
    338c:	00000000 	.word	0x00000000

00003390 <ull_sched_mfy_win_offset_select>:
{
    3390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    3394:	f8b0 1194 	ldrh.w	r1, [r0, #404]	; 0x194
{
    3398:	b088      	sub	sp, #32
    339a:	4604      	mov	r4, r0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    339c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    33a0:	4847      	ldr	r0, [pc, #284]	; (34c0 <ull_sched_mfy_win_offset_select+0x130>)
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    33a2:	2600      	movs	r6, #0
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    33a4:	fb03 f101 	mul.w	r1, r3, r1
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    33a8:	ad05      	add	r5, sp, #20
	uint8_t offset_m_max = OFFSET_M_MAX;
    33aa:	2306      	movs	r3, #6
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    33ac:	e9c5 6601 	strd	r6, r6, [r5, #4]
	uint8_t offset_m_max = OFFSET_M_MAX;
    33b0:	f88d 300f 	strb.w	r3, [sp, #15]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    33b4:	fba1 0100 	umull	r0, r1, r1, r0
    33b8:	a33f      	add	r3, pc, #252	; (adr r3, 34b8 <ull_sched_mfy_win_offset_select+0x128>)
    33ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	uint16_t win_offset_m[OFFSET_M_MAX] = {0, };
    33be:	9605      	str	r6, [sp, #20]
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    33c0:	f7fd fc2a 	bl	c18 <__aeabi_uldivmod>
	win_offset_calc(conn, 1, &ticks_to_offset,
    33c4:	f10d 030f 	add.w	r3, sp, #15
    33c8:	9501      	str	r5, [sp, #4]
    33ca:	9300      	str	r3, [sp, #0]
    33cc:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset = HAL_TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 *
    33d0:	9004      	str	r0, [sp, #16]
	win_offset_calc(conn, 1, &ticks_to_offset,
    33d2:	aa04      	add	r2, sp, #16
    33d4:	4620      	mov	r0, r4
    33d6:	2101      	movs	r1, #1
    33d8:	f018 fa34 	bl	1b844 <win_offset_calc.constprop.0>
		while (offset_index_m < offset_m_max) {
    33dc:	f89d 800f 	ldrb.w	r8, [sp, #15]
    33e0:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
    33e4:	fa5f fc8c 	uxtb.w	ip, ip
    33e8:	f10d 0316 	add.w	r3, sp, #22
	uint8_t has_offset_s = 0U;
    33ec:	4630      	mov	r0, r6
    33ee:	f504 77ca 	add.w	r7, r4, #404	; 0x194
    33f2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
    33f6:	f504 76d0 	add.w	r6, r4, #416	; 0x1a0
			if (win_offset_s != 0xffff) {
    33fa:	f64f 7eff 	movw	lr, #65535	; 0xffff
	return ((uint16_t)src[1] << 8) | src[0];
    33fe:	883a      	ldrh	r2, [r7, #0]
		while (offset_index_m < offset_m_max) {
    3400:	f1b8 0f00 	cmp.w	r8, #0
    3404:	d00a      	beq.n	341c <ull_sched_mfy_win_offset_select+0x8c>
    3406:	462b      	mov	r3, r5
			if (win_offset_s != 0xffff) {
    3408:	4572      	cmp	r2, lr
    340a:	d004      	beq.n	3416 <ull_sched_mfy_win_offset_select+0x86>
				if (win_offset_s ==
    340c:	8819      	ldrh	r1, [r3, #0]
    340e:	4291      	cmp	r1, r2
				has_offset_s = 1U;
    3410:	f04f 0001 	mov.w	r0, #1
				if (win_offset_s ==
    3414:	d01d      	beq.n	3452 <ull_sched_mfy_win_offset_select+0xc2>
		while (offset_index_m < offset_m_max) {
    3416:	3302      	adds	r3, #2
    3418:	459c      	cmp	ip, r3
    341a:	d1f5      	bne.n	3408 <ull_sched_mfy_win_offset_select+0x78>
	while (offset_index_s < OFFSET_S_MAX) {
    341c:	3702      	adds	r7, #2
    341e:	42be      	cmp	r6, r7
    3420:	d1ed      	bne.n	33fe <ull_sched_mfy_win_offset_select+0x6e>
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3422:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	} else if (!has_offset_s) {
    3426:	bb48      	cbnz	r0, 347c <ull_sched_mfy_win_offset_select+0xec>
		conn->llcp_cu.win_offset_us = win_offset_m[0] *
    3428:	f8bd 2014 	ldrh.w	r2, [sp, #20]
    342c:	f240 41e2 	movw	r1, #1250	; 0x4e2
    3430:	fb02 f101 	mul.w	r1, r2, r1
	dst[1] = val >> 8;
    3434:	0a10      	lsrs	r0, r2, #8
    3436:	f8c4 1118 	str.w	r1, [r4, #280]	; 0x118
	dst[0] = val;
    343a:	701a      	strb	r2, [r3, #0]
	dst[1] = val >> 8;
    343c:	7058      	strb	r0, [r3, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    343e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    3442:	2204      	movs	r2, #4
    3444:	f362 0302 	bfi	r3, r2, #0, #3
    3448:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    344c:	b008      	add	sp, #32
    344e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			     (void *)conn->llcp.conn_upd.pdu_win_offset);
    3452:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
		conn->llcp_cu.win_offset_us = win_offset_s * CONN_INT_UNIT_US;
    3456:	f240 43e2 	movw	r3, #1250	; 0x4e2
    345a:	fb02 f303 	mul.w	r3, r2, r3
    345e:	0a10      	lsrs	r0, r2, #8
    3460:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
	dst[0] = val;
    3464:	700a      	strb	r2, [r1, #0]
	dst[1] = val >> 8;
    3466:	7048      	strb	r0, [r1, #1]
		conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
    3468:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
    346c:	2204      	movs	r2, #4
    346e:	f362 0302 	bfi	r3, r2, #0, #3
    3472:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
    3476:	b008      	add	sp, #32
    3478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_ctrl_tx->len =
    347c:	2203      	movs	r2, #3
    347e:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3482:	f813 2c05 	ldrb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    3486:	f894 110e 	ldrb.w	r1, [r4, #270]	; 0x10e
    348a:	2505      	movs	r5, #5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    348c:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    3490:	2011      	movs	r0, #17
    3492:	f803 0c02 	strb.w	r0, [r3, #-2]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    3496:	f803 2c05 	strb.w	r2, [r3, #-5]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    349a:	f365 0102 	bfi	r1, r5, #0, #3
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    349e:	200f      	movs	r0, #15
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    34a0:	2220      	movs	r2, #32
		pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode =
    34a2:	f803 0c01 	strb.w	r0, [r3, #-1]
		pdu_ctrl_tx->llctrl.reject_ext_ind.error_code =
    34a6:	701a      	strb	r2, [r3, #0]
		conn->llcp_cu.state = LLCP_CUI_STATE_REJECT;
    34a8:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
}
    34ac:	b008      	add	sp, #32
    34ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    34b2:	bf00      	nop
    34b4:	f3af 8000 	nop.w
    34b8:	1afd498d 	.word	0x1afd498d
    34bc:	00000007 	.word	0x00000007
    34c0:	3b9aca00 	.word	0x3b9aca00
    34c4:	00000000 	.word	0x00000000

000034c8 <isr_window>:
	 */
	radio_tmr_end_capture();
}

static void isr_window(void *param)
{
    34c8:	b538      	push	{r3, r4, r5, lr}
    34ca:	4604      	mov	r4, r0
	uint32_t remainder_us;
	struct lll_scan *lll;

	isr_common_done(param);
    34cc:	f01b f96e 	bl	1e7ac <isr_common_done>

	lll = param;

	/* Next radio channel to scan, round-robin 37, 38, and 39. */
	if (++lll->chan == ADV_CHAN_MAX) {
    34d0:	7da2      	ldrb	r2, [r4, #22]
    34d2:	f3c2 0341 	ubfx	r3, r2, #1, #2
    34d6:	3301      	adds	r3, #1
    34d8:	f003 0303 	and.w	r3, r3, #3
    34dc:	2b03      	cmp	r3, #3
    34de:	d034      	beq.n	354a <isr_window+0x82>
    34e0:	f363 0242 	bfi	r2, r3, #1, #2
    34e4:	75a2      	strb	r2, [r4, #22]
		lll->chan = 0U;
	}
	lll_chan_set(37 + lll->chan);
    34e6:	f103 0025 	add.w	r0, r3, #37	; 0x25
    34ea:	f01a f89b 	bl	1d624 <lll_chan_set>

#if defined(CONFIG_BT_CENTRAL)
	bool is_sched_advanced = IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) &&
				 lll->conn && lll->conn_win_offset_us;
    34ee:	6863      	ldr	r3, [r4, #4]
    34f0:	b30b      	cbz	r3, 3536 <isr_window+0x6e>
    34f2:	6923      	ldr	r3, [r4, #16]
    34f4:	b1fb      	cbz	r3, 3536 <isr_window+0x6e>
		 * a new central event was last calculated at the start of the
		 * initiator window. This can be either the previous full window
		 * start or remainder resume start of the continuous initiator
		 * after it was preempted.
		 */
		ticks_anchor_prev = radio_tmr_start_get();
    34f6:	f01c fe65 	bl	201c4 <radio_tmr_start_get>
    34fa:	4605      	mov	r5, r0
	} else {
		ticks_anchor_prev = 0U;
	}

	ticks_at_start = ticker_ticks_now_get() +
    34fc:	f00e ffcc 	bl	12498 <ticker_ticks_now_get>
			 HAL_TICKER_CNTR_CMP_OFFSET_MIN;
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    3500:	1cc1      	adds	r1, r0, #3
    3502:	2000      	movs	r0, #0
    3504:	f01c fe2c 	bl	20160 <radio_tmr_start_tick>
#endif /* !CONFIG_BT_CENTRAL */

	/* capture end of Rx-ed PDU, for initiator to calculate first
	 * central event.
	 */
	radio_tmr_end_capture();
    3508:	f01c fea8 	bl	2025c <radio_tmr_end_capture>

		/* Calculation to reduce the conn_win_offset_us, as a new
		 * window is started here and the reference ticks_anchor is
		 * now at the start of this new window.
		 */
		ticks_anchor_new = radio_tmr_start_get();
    350c:	f01c fe5a 	bl	201c4 <radio_tmr_start_get>
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3510:	4629      	mov	r1, r5
    3512:	f00e ffc3 	bl	1249c <ticker_ticks_diff_get>
						    ticks_anchor_prev);
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    3516:	4912      	ldr	r1, [pc, #72]	; (3560 <isr_window+0x98>)
		ticks_delta = ticker_ticks_diff_get(ticks_anchor_new,
    3518:	4603      	mov	r3, r0
		ticks_delta_us = HAL_TICKER_TICKS_TO_US(ticks_delta);
    351a:	2207      	movs	r2, #7
    351c:	fba0 0101 	umull	r0, r1, r0, r1
    3520:	fb02 1103 	mla	r1, r2, r3, r1
    3524:	a30c      	add	r3, pc, #48	; (adr r3, 3558 <isr_window+0x90>)
    3526:	e9d3 2300 	ldrd	r2, r3, [r3]
    352a:	f7fd fb75 	bl	c18 <__aeabi_uldivmod>

		/* Underflow is accepted, as it will be corrected at the time of
		 * connection establishment by incrementing it in connection
		 * interval units until it is in the future.
		 */
		lll->conn_win_offset_us -= ticks_delta_us;
    352e:	6923      	ldr	r3, [r4, #16]
    3530:	1a1b      	subs	r3, r3, r0
    3532:	6123      	str	r3, [r4, #16]
	}
#endif /* CONFIG_BT_CENTRAL */
}
    3534:	bd38      	pop	{r3, r4, r5, pc}
	ticks_at_start = ticker_ticks_now_get() +
    3536:	f00e ffaf 	bl	12498 <ticker_ticks_now_get>
	remainder_us = radio_tmr_start_tick(0, ticks_at_start);
    353a:	1cc1      	adds	r1, r0, #3
    353c:	2000      	movs	r0, #0
    353e:	f01c fe0f 	bl	20160 <radio_tmr_start_tick>
}
    3542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_tmr_end_capture();
    3546:	f01c be89 	b.w	2025c <radio_tmr_end_capture>
		lll->chan = 0U;
    354a:	f36f 0242 	bfc	r2, #1, #2
    354e:	75a2      	strb	r2, [r4, #22]
    3550:	2025      	movs	r0, #37	; 0x25
    3552:	e7ca      	b.n	34ea <isr_window+0x22>
    3554:	f3af 8000 	nop.w
    3558:	3b9aca00 	.word	0x3b9aca00
    355c:	00000000 	.word	0x00000000
    3560:	1afd498d 	.word	0x1afd498d
    3564:	00000000 	.word	0x00000000

00003568 <isr_rx>:
{
    3568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    356c:	b087      	sub	sp, #28
    356e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
    3570:	f01c fc06 	bl	1fd80 <radio_is_done>
	if (trx_done) {
    3574:	b2c0      	uxtb	r0, r0
    3576:	b950      	cbnz	r0, 358e <isr_rx+0x26>
	lll_isr_status_reset();
    3578:	f01a f8ac 	bl	1d6d4 <lll_isr_status_reset>
	radio_isr_set(isr_done, lll);
    357c:	48be      	ldr	r0, [pc, #760]	; (3878 <isr_rx+0x310>)
    357e:	4621      	mov	r1, r4
    3580:	f01c fad8 	bl	1fb34 <radio_isr_set>
}
    3584:	b007      	add	sp, #28
    3586:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	radio_disable();
    358a:	f01c bbcf 	b.w	1fd2c <radio_disable>
		crc_ok = radio_crc_is_valid();
    358e:	f01c fc17 	bl	1fdc0 <radio_crc_is_valid>
    3592:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
    3594:	f01c fd36 	bl	20004 <radio_filter_has_match>
    3598:	4683      	mov	fp, r0
		devmatch_id = radio_filter_match_get();
    359a:	f01c fd3d 	bl	20018 <radio_filter_match_get>
    359e:	4681      	mov	r9, r0
		irkmatch_ok = radio_ar_has_match();
    35a0:	f01c ff4a 	bl	20438 <radio_ar_has_match>
    35a4:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
    35a6:	f01c ff2b 	bl	20400 <radio_ar_match_get>
    35aa:	4682      	mov	sl, r0
		rssi_ready = radio_rssi_is_ready();
    35ac:	f01c fcee 	bl	1ff8c <radio_rssi_is_ready>
	if (!trx_done || !crc_ok) {
    35b0:	b2ed      	uxtb	r5, r5
		rssi_ready = radio_rssi_is_ready();
    35b2:	4680      	mov	r8, r0
		phy_flags_rx = radio_phy_flags_rx_get();
    35b4:	f01c fcd0 	bl	1ff58 <radio_phy_flags_rx_get>
	lll_isr_status_reset();
    35b8:	f01a f88c 	bl	1d6d4 <lll_isr_status_reset>
	if (!trx_done || !crc_ok) {
    35bc:	2d00      	cmp	r5, #0
    35be:	d0dd      	beq.n	357c <isr_rx+0x14>
	node_rx = ull_pdu_rx_alloc_peek(1);
    35c0:	2001      	movs	r0, #1
    35c2:	f011 fc97 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
    35c6:	4605      	mov	r5, r0
    35c8:	2800      	cmp	r0, #0
    35ca:	f000 8191 	beq.w	38f0 <isr_rx+0x388>
	rl_idx = devmatch_ok ?
    35ce:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
		irkmatch_ok = radio_ar_has_match();
    35d2:	b2f6      	uxtb	r6, r6
	rl_idx = devmatch_ok ?
    35d4:	f040 8183 	bne.w	38de <isr_rx+0x376>
    35d8:	2e00      	cmp	r6, #0
    35da:	f040 80e0 	bne.w	379e <isr_rx+0x236>
    35de:	27ff      	movs	r7, #255	; 0xff
	    !lll_scan_isr_rx_check(lll, irkmatch_ok, devmatch_ok, rl_idx)) {
    35e0:	465a      	mov	r2, fp
    35e2:	463b      	mov	r3, r7
    35e4:	4631      	mov	r1, r6
    35e6:	4620      	mov	r0, r4
    35e8:	f01b fb0e 	bl	1ec08 <lll_scan_isr_rx_check>
	if (has_adva &&
    35ec:	2800      	cmp	r0, #0
    35ee:	d0c5      	beq.n	357c <isr_rx+0x14>
	/* Initiator */
	/* Note: connectable ADV_EXT_IND is handled as any other ADV_EXT_IND
	 *       because we need to receive AUX_ADV_IND anyway.
	 */
	} else if (lll->conn && !lll->conn->central.cancelled &&
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    35f0:	7f2b      	ldrb	r3, [r5, #28]
	} else if (lll->conn && !lll->conn->central.cancelled &&
    35f2:	6862      	ldr	r2, [r4, #4]
	bool dir_report = false;
    35f4:	2100      	movs	r1, #0
    35f6:	f88d 1013 	strb.w	r1, [sp, #19]
		rssi_ready = radio_rssi_is_ready();
    35fa:	fa5f f888 	uxtb.w	r8, r8
		   (pdu_adv_rx->type != PDU_ADV_TYPE_EXT_IND) &&
    35fe:	f003 010f 	and.w	r1, r3, #15
	} else if (lll->conn && !lll->conn->central.cancelled &&
    3602:	2a00      	cmp	r2, #0
    3604:	f000 80e7 	beq.w	37d6 <isr_rx+0x26e>
    3608:	6862      	ldr	r2, [r4, #4]
    360a:	f892 2020 	ldrb.w	r2, [r2, #32]
    360e:	0790      	lsls	r0, r2, #30
    3610:	f100 80e1 	bmi.w	37d6 <isr_rx+0x26e>
    3614:	2907      	cmp	r1, #7
    3616:	d0b1      	beq.n	357c <isr_rx+0x14>
#if defined(CONFIG_BT_CENTRAL)
static inline bool isr_scan_init_check(const struct lll_scan *lll,
				       const struct pdu_adv *pdu,
				       uint8_t rl_idx)
{
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3618:	7da2      	ldrb	r2, [r4, #22]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
				    rl_idx)) &&
    361a:	0712      	lsls	r2, r2, #28
    361c:	f140 8176 	bpl.w	390c <isr_rx+0x3a4>
    3620:	2900      	cmp	r1, #0
    3622:	f040 80c2 	bne.w	37aa <isr_rx+0x242>
		(((pdu->type == PDU_ADV_TYPE_ADV_IND) &&
    3626:	7f6b      	ldrb	r3, [r5, #29]
    3628:	2b25      	cmp	r3, #37	; 0x25
    362a:	f200 8136 	bhi.w	389a <isr_rx+0x332>
			rx = ull_pdu_rx_alloc_peek(4);
    362e:	2004      	movs	r0, #4
    3630:	f011 fc60 	bl	14ef4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
    3634:	2800      	cmp	r0, #0
    3636:	d0a1      	beq.n	357c <isr_rx+0x14>
		pdu_end_us = radio_tmr_end_get();
    3638:	f01c fe18 	bl	2026c <radio_tmr_end_get>
		if (!lll->ticks_window) {
    363c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		pdu_end_us = radio_tmr_end_get();
    363e:	4680      	mov	r8, r0
		if (!lll->ticks_window) {
    3640:	b943      	cbnz	r3, 3654 <isr_rx+0xec>
			scan_interval_us = lll->interval * SCAN_INT_UNIT_US;
    3642:	8c23      	ldrh	r3, [r4, #32]
    3644:	f240 2271 	movw	r2, #625	; 0x271
    3648:	fb02 f303 	mul.w	r3, r2, r3
			pdu_end_us %= scan_interval_us;
    364c:	fbb0 f2f3 	udiv	r2, r0, r3
    3650:	fb03 0812 	mls	r8, r3, r2, r0
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    3654:	6823      	ldr	r3, [r4, #0]
    3656:	691a      	ldr	r2, [r3, #16]
    3658:	4b88      	ldr	r3, [pc, #544]	; (387c <isr_rx+0x314>)
    365a:	2107      	movs	r1, #7
    365c:	fba2 0303 	umull	r0, r3, r2, r3
    3660:	fb01 3102 	mla	r1, r1, r2, r3
    3664:	a382      	add	r3, pc, #520	; (adr r3, 3870 <isr_rx+0x308>)
    3666:	e9d3 2300 	ldrd	r2, r3, [r3]
    366a:	f7fd fad5 	bl	c18 <__aeabi_uldivmod>
				  EVENT_IFS_US - 352 - EVENT_OVERHEAD_START_US -
    366e:	f2a0 3342 	subw	r3, r0, #834	; 0x342
		if (pdu_end_us > (HAL_TICKER_TICKS_TO_US(ull->ticks_slot) -
    3672:	4543      	cmp	r3, r8
    3674:	d382      	bcc.n	357c <isr_rx+0x14>
		radio_switch_complete_and_disable();
    3676:	f01c fc61 	bl	1ff3c <radio_switch_complete_and_disable>
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    367a:	4638      	mov	r0, r7
		lll_conn = lll->conn;
    367c:	6863      	ldr	r3, [r4, #4]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    367e:	f019 faad 	bl	1cbdc <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    3682:	7de3      	ldrb	r3, [r4, #23]
    3684:	079b      	lsls	r3, r3, #30
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    3686:	4681      	mov	r9, r0
		if (lll->rpa_gen && lrpa) {
    3688:	f140 81e2 	bpl.w	3a50 <isr_rx+0x4e8>
    368c:	2800      	cmp	r0, #0
    368e:	f000 81df 	beq.w	3a50 <isr_rx+0x4e8>
			init_addr = lrpa->val;
    3692:	4683      	mov	fp, r0
			init_tx_addr = 1;
    3694:	f04f 0a01 	mov.w	sl, #1
		pdu_tx = (void *)radio_pkt_scratch_get();
    3698:	f01c fba0 	bl	1fddc <radio_pkt_scratch_get>
					     pdu_adv_rx->tx_addr,
    369c:	7f2b      	ldrb	r3, [r5, #28]
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    369e:	aa05      	add	r2, sp, #20
    36a0:	9203      	str	r2, [sp, #12]
					     pdu_adv_rx->adv_ind.addr,
    36a2:	f105 021e 	add.w	r2, r5, #30
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    36a6:	4601      	mov	r1, r0
		pdu_tx = (void *)radio_pkt_scratch_get();
    36a8:	4680      	mov	r8, r0
		lll_scan_prepare_connect_req(lll, pdu_tx, PHY_LEGACY,
    36aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
    36ae:	9200      	str	r2, [sp, #0]
    36b0:	4620      	mov	r0, r4
    36b2:	2200      	movs	r2, #0
    36b4:	e9cd ab01 	strd	sl, fp, [sp, #4]
    36b8:	f01b fac0 	bl	1ec3c <lll_scan_prepare_connect_req>
		radio_pkt_tx_set(pdu_tx);
    36bc:	4640      	mov	r0, r8
    36be:	f01c fb13 	bl	1fce8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    36c2:	f01c fb53 	bl	1fd6c <radio_is_ready>
    36c6:	2800      	cmp	r0, #0
    36c8:	f040 81dc 	bne.w	3a84 <isr_rx+0x51c>
		radio_isr_set(isr_done_cleanup, lll);
    36cc:	486c      	ldr	r0, [pc, #432]	; (3880 <isr_rx+0x318>)
    36ce:	4621      	mov	r1, r4
    36d0:	f01c fa30 	bl	1fb34 <radio_isr_set>
		lll->conn->central.initiated = 1U;
    36d4:	6861      	ldr	r1, [r4, #4]
		lll->is_stop = 1U;
    36d6:	7da3      	ldrb	r3, [r4, #22]
		lll->conn->central.initiated = 1U;
    36d8:	f891 2020 	ldrb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    36dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
		lll->conn->central.initiated = 1U;
    36e0:	f042 0201 	orr.w	r2, r2, #1
    36e4:	f881 2020 	strb.w	r2, [r1, #32]
		lll->is_stop = 1U;
    36e8:	75a3      	strb	r3, [r4, #22]
		rx = ull_pdu_rx_alloc();
    36ea:	f011 fc21 	bl	14f30 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    36ee:	2216      	movs	r2, #22
    36f0:	7102      	strb	r2, [r0, #4]
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    36f2:	f895 e01c 	ldrb.w	lr, [r5, #28]
		rx->hdr.handle = 0xffff;
    36f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    36fa:	4643      	mov	r3, r8
    36fc:	80c2      	strh	r2, [r0, #6]
		rx = ull_pdu_rx_alloc();
    36fe:	4682      	mov	sl, r0
		uint8_t pdu_adv_rx_chan_sel = pdu_adv_rx->chan_sel;
    3700:	f3ce 1e40 	ubfx	lr, lr, #5, #1
    3704:	f100 021c 	add.w	r2, r0, #28
    3708:	f108 0820 	add.w	r8, r8, #32
    370c:	681d      	ldr	r5, [r3, #0]
    370e:	6858      	ldr	r0, [r3, #4]
    3710:	6899      	ldr	r1, [r3, #8]
    3712:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    3716:	f8c2 c00c 	str.w	ip, [r2, #12]
    371a:	3310      	adds	r3, #16
    371c:	4543      	cmp	r3, r8
    371e:	6015      	str	r5, [r2, #0]
    3720:	6050      	str	r0, [r2, #4]
    3722:	6091      	str	r1, [r2, #8]
    3724:	f102 0210 	add.w	r2, r2, #16
    3728:	d1f0      	bne.n	370c <isr_rx+0x1a4>
    372a:	681b      	ldr	r3, [r3, #0]
    372c:	6013      	str	r3, [r2, #0]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    372e:	f89a 301c 	ldrb.w	r3, [sl, #28]
		ftr->param = lll;
    3732:	f8ca 4008 	str.w	r4, [sl, #8]
		pdu_adv_rx->chan_sel = pdu_adv_rx_chan_sel;
    3736:	f36e 1345 	bfi	r3, lr, #5, #1
    373a:	f88a 301c 	strb.w	r3, [sl, #28]
		ftr->ticks_anchor = radio_tmr_start_get();
    373e:	f01c fd41 	bl	201c4 <radio_tmr_start_get>
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3742:	2100      	movs	r1, #0
		ftr->ticks_anchor = radio_tmr_start_get();
    3744:	f8ca 0010 	str.w	r0, [sl, #16]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    3748:	2001      	movs	r0, #1
		ftr->radio_end_us = conn_space_us -
    374a:	9d05      	ldr	r5, [sp, #20]
				    radio_rx_chain_delay_get(PHY_1M, 0);
    374c:	f01c fadc 	bl	1fd08 <radio_rx_chain_delay_get>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3750:	2e00      	cmp	r6, #0
    3752:	bf08      	it	eq
    3754:	27ff      	moveq	r7, #255	; 0xff
    3756:	f88a 7019 	strb.w	r7, [sl, #25]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    375a:	7de3      	ldrb	r3, [r4, #23]
		ftr->radio_end_us = conn_space_us -
    375c:	1a2d      	subs	r5, r5, r0
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    375e:	f013 0302 	ands.w	r3, r3, #2
		ftr->radio_end_us = conn_space_us -
    3762:	f8ca 5014 	str.w	r5, [sl, #20]
		ftr->lrpa_used = lll->rpa_gen && lrpa;
    3766:	f000 817a 	beq.w	3a5e <isr_rx+0x4f6>
    376a:	f1b9 0900 	subs.w	r9, r9, #0
    376e:	bf18      	it	ne
    3770:	f04f 0901 	movne.w	r9, #1
    3774:	f89a 301a 	ldrb.w	r3, [sl, #26]
    3778:	f369 0300 	bfi	r3, r9, #0, #1
    377c:	f88a 301a 	strb.w	r3, [sl, #26]
			ftr->extra = ull_pdu_rx_alloc();
    3780:	f011 fbd6 	bl	14f30 <ull_pdu_rx_alloc>
    3784:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
    3786:	4651      	mov	r1, sl
    3788:	f8da 0000 	ldr.w	r0, [sl]
			ftr->extra = ull_pdu_rx_alloc();
    378c:	f8ca 300c 	str.w	r3, [sl, #12]
		ull_rx_put(rx->hdr.link, rx);
    3790:	f011 fbe4 	bl	14f5c <ull_rx_put>
		ull_rx_sched();
    3794:	f011 fbf2 	bl	14f7c <ull_rx_sched>
}
    3798:	b007      	add	sp, #28
    379a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
    379e:	fa5f f08a 	uxtb.w	r0, sl
    37a2:	f019 faa9 	bl	1ccf8 <ull_filter_lll_rl_irk_idx>
    37a6:	4607      	mov	r7, r0
    37a8:	e71a      	b.n	35e0 <isr_rx+0x78>
		  (pdu->len <= sizeof(struct pdu_adv_adv_ind))) ||
    37aa:	2901      	cmp	r1, #1
    37ac:	d115      	bne.n	37da <isr_rx+0x272>
		 ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
    37ae:	7f6b      	ldrb	r3, [r5, #29]
    37b0:	2b0c      	cmp	r3, #12
    37b2:	f47f aee3 	bne.w	357c <isr_rx+0x14>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
		  (/* allow directed adv packets addressed to this device */
			  isr_scan_tgta_check(lll, true, pdu->rx_addr,
    37b6:	7f2a      	ldrb	r2, [r5, #28]
    37b8:	9700      	str	r7, [sp, #0]
    37ba:	2300      	movs	r3, #0
    37bc:	9301      	str	r3, [sp, #4]
    37be:	09d2      	lsrs	r2, r2, #7
    37c0:	f105 0324 	add.w	r3, r5, #36	; 0x24
    37c4:	4620      	mov	r0, r4
    37c6:	f01b f971 	bl	1eaac <isr_scan_tgta_check>
		  (pdu->len == sizeof(struct pdu_adv_direct_ind)) &&
    37ca:	2800      	cmp	r0, #0
    37cc:	f47f af2f 	bne.w	362e <isr_rx+0xc6>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    37d0:	7f29      	ldrb	r1, [r5, #28]
    37d2:	f001 010f 	and.w	r1, r1, #15
    37d6:	2900      	cmp	r1, #0
    37d8:	d054      	beq.n	3884 <isr_rx+0x31c>
    37da:	2906      	cmp	r1, #6
    37dc:	d052      	beq.n	3884 <isr_rx+0x31c>
	else if (((((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    37de:	2902      	cmp	r1, #2
    37e0:	f000 80a7 	beq.w	3932 <isr_rx+0x3ca>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    37e4:	2901      	cmp	r1, #1
    37e6:	d158      	bne.n	389a <isr_rx+0x332>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
    37e8:	7f6b      	ldrb	r3, [r5, #29]
    37ea:	2b0c      	cmp	r3, #12
    37ec:	f47f aec6 	bne.w	357c <isr_rx+0x14>
		    isr_scan_tgta_check(lll, false, pdu_adv_rx->rx_addr,
    37f0:	7f2a      	ldrb	r2, [r5, #28]
    37f2:	9700      	str	r7, [sp, #0]
    37f4:	f10d 0313 	add.w	r3, sp, #19
    37f8:	9301      	str	r3, [sp, #4]
    37fa:	09d2      	lsrs	r2, r2, #7
    37fc:	f105 0324 	add.w	r3, r5, #36	; 0x24
    3800:	2100      	movs	r1, #0
    3802:	4620      	mov	r0, r4
    3804:	f01b f952 	bl	1eaac <isr_scan_tgta_check>
		   (pdu_adv_rx->len == sizeof(struct pdu_adv_direct_ind)) &&
    3808:	2800      	cmp	r0, #0
    380a:	d046      	beq.n	389a <isr_rx+0x332>
		 (pdu_adv_rx->len != 0) &&
    380c:	7f6b      	ldrb	r3, [r5, #29]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
    380e:	2b00      	cmp	r3, #0
    3810:	f43f aeb4 	beq.w	357c <isr_rx+0x14>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    3814:	6863      	ldr	r3, [r4, #4]
		 (pdu_adv_rx->len != 0) &&
    3816:	b12b      	cbz	r3, 3824 <isr_rx+0x2bc>
		   (!lll->conn || (pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND))) {
    3818:	7f2b      	ldrb	r3, [r5, #28]
    381a:	f003 030f 	and.w	r3, r3, #15
    381e:	2b07      	cmp	r3, #7
    3820:	f47f aeac 	bne.w	357c <isr_rx+0x14>
			      uint8_t rl_idx, bool dir_report)
{
	struct node_rx_pdu *node_rx;
	int err = 0;

	node_rx = ull_pdu_rx_alloc_peek(3);
    3824:	2003      	movs	r0, #3
		err = isr_rx_scan_report(lll, rssi_ready, phy_flags_rx,
    3826:	f89d 9013 	ldrb.w	r9, [sp, #19]
	node_rx = ull_pdu_rx_alloc_peek(3);
    382a:	f011 fb63 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    382e:	4605      	mov	r5, r0
    3830:	2800      	cmp	r0, #0
    3832:	f43f aea3 	beq.w	357c <isr_rx+0x14>
		return -ENOBUFS;
	}
	ull_pdu_rx_alloc();
    3836:	f011 fb7b 	bl	14f30 <ull_pdu_rx_alloc>

	/* Prepare the report (adv or scan resp) */
	node_rx->hdr.handle = 0xffff;
    383a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    383e:	80eb      	strh	r3, [r5, #6]
			}
			break;
		}
#endif /* CONFIG_BT_CTLR_ADV_EXT */
	} else {
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    3840:	2305      	movs	r3, #5
    3842:	712b      	strb	r3, [r5, #4]
	}

	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3844:	f1b8 0f00 	cmp.w	r8, #0
    3848:	d16f      	bne.n	392a <isr_rx+0x3c2>
    384a:	207f      	movs	r0, #127	; 0x7f
#endif /* CONFIG_BT_CTLR_ADV_EXT */
#endif /* CONFIG_BT_CTLR_PRIVACY */

#if defined(CONFIG_BT_CTLR_EXT_SCAN_FP)
	/* save the directed adv report flag */
	node_rx->hdr.rx_ftr.direct = dir_report;
    384c:	7eab      	ldrb	r3, [r5, #26]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    384e:	7628      	strb	r0, [r5, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3850:	2e00      	cmp	r6, #0
    3852:	bf08      	it	eq
    3854:	27ff      	moveq	r7, #255	; 0xff
	node_rx->hdr.rx_ftr.direct = dir_report;
    3856:	f369 0341 	bfi	r3, r9, #1, #1
		node_rx->hdr.rx_ftr.chan = _radio.scanner.chan - 1;
		node_rx->hdr.rx_ftr.ticks_anchor = _radio.ticks_anchor;
	}
#endif /* CONFIG_BT_CTLR_EXT_SCAN_FP */

	ull_rx_put(node_rx->hdr.link, node_rx);
    385a:	6828      	ldr	r0, [r5, #0]
	node_rx->hdr.rx_ftr.direct = dir_report;
    385c:	76ab      	strb	r3, [r5, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    385e:	4629      	mov	r1, r5
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3860:	766f      	strb	r7, [r5, #25]
	ull_rx_put(node_rx->hdr.link, node_rx);
    3862:	f011 fb7b 	bl	14f5c <ull_rx_put>
	ull_rx_sched();
    3866:	f011 fb89 	bl	14f7c <ull_rx_sched>
	if (!err) {
    386a:	e687      	b.n	357c <isr_rx+0x14>
    386c:	f3af 8000 	nop.w
    3870:	3b9aca00 	.word	0x3b9aca00
    3874:	00000000 	.word	0x00000000
    3878:	0001e865 	.word	0x0001e865
    387c:	1afd498d 	.word	0x1afd498d
    3880:	0001ea5d 	.word	0x0001ea5d
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3884:	7f6b      	ldrb	r3, [r5, #29]
    3886:	2b25      	cmp	r3, #37	; 0x25
    3888:	d807      	bhi.n	389a <isr_rx+0x332>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind)) &&
    388a:	7da2      	ldrb	r2, [r4, #22]
    388c:	0692      	lsls	r2, r2, #26
    388e:	d502      	bpl.n	3896 <isr_rx+0x32e>
		   !lll->conn) {
    3890:	6862      	ldr	r2, [r4, #4]
		   lll->type &&
    3892:	2a00      	cmp	r2, #0
    3894:	d04f      	beq.n	3936 <isr_rx+0x3ce>
		    (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
    3896:	2b25      	cmp	r3, #37	; 0x25
    3898:	d9b9      	bls.n	380e <isr_rx+0x2a6>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    389a:	7f2b      	ldrb	r3, [r5, #28]
    389c:	f003 030f 	and.w	r3, r3, #15
					rl_idx, &dir_report))) ||
    38a0:	2b04      	cmp	r3, #4
    38a2:	f47f ae6b 	bne.w	357c <isr_rx+0x14>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
    38a6:	7f6b      	ldrb	r3, [r5, #29]
    38a8:	2b25      	cmp	r3, #37	; 0x25
    38aa:	f63f ae67 	bhi.w	357c <isr_rx+0x14>
		   (lll->state != 0U) &&
    38ae:	7da3      	ldrb	r3, [r4, #22]
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_scan_rsp)) &&
    38b0:	07d9      	lsls	r1, r3, #31
    38b2:	f57f ae63 	bpl.w	357c <isr_rx+0x14>
	struct pdu_adv *sreq = (void *)radio_pkt_scratch_get();
    38b6:	f01c fa91 	bl	1fddc <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    38ba:	7f2b      	ldrb	r3, [r5, #28]
    38bc:	7802      	ldrb	r2, [r0, #0]
    38be:	f3c3 1380 	ubfx	r3, r3, #6, #1
    38c2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
    38c6:	f47f ae59 	bne.w	357c <isr_rx+0x14>
		(memcmp(&sreq->scan_req.adv_addr[0],
    38ca:	3008      	adds	r0, #8
    38cc:	2206      	movs	r2, #6
    38ce:	f105 011e 	add.w	r1, r5, #30
    38d2:	f02a fe38 	bl	2e546 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
    38d6:	2800      	cmp	r0, #0
    38d8:	f47f ae50 	bne.w	357c <isr_rx+0x14>
    38dc:	e796      	b.n	380c <isr_rx+0x2a4>
		 ull_filter_lll_rl_idx(((lll->filter_policy &
    38de:	7da0      	ldrb	r0, [r4, #22]
    38e0:	fa5f f189 	uxtb.w	r1, r9
    38e4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    38e8:	f019 f99c 	bl	1cc24 <ull_filter_lll_rl_idx>
    38ec:	4607      	mov	r7, r0
    38ee:	e677      	b.n	35e0 <isr_rx+0x78>
	LL_ASSERT(node_rx);
    38f0:	4a72      	ldr	r2, [pc, #456]	; (3abc <isr_rx+0x554>)
    38f2:	4973      	ldr	r1, [pc, #460]	; (3ac0 <isr_rx+0x558>)
    38f4:	4873      	ldr	r0, [pc, #460]	; (3ac4 <isr_rx+0x55c>)
    38f6:	f240 23c3 	movw	r3, #707	; 0x2c3
    38fa:	f024 fb55 	bl	27fa8 <printk>
    38fe:	4040      	eors	r0, r0
    3900:	f380 8811 	msr	BASEPRI, r0
    3904:	f04f 0003 	mov.w	r0, #3
    3908:	df02      	svc	2
    390a:	e660      	b.n	35ce <isr_rx+0x66>
	if (rl_idx != FILTER_IDX_NONE) {
    390c:	2fff      	cmp	r7, #255	; 0xff
    390e:	f88d 7014 	strb.w	r7, [sp, #20]
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3912:	f3c3 1980 	ubfx	r9, r3, #6, #1
	if (rl_idx != FILTER_IDX_NONE) {
    3916:	d077      	beq.n	3a08 <isr_rx+0x4a0>
		return (rl_idx == lll->rl_idx);
    3918:	7e23      	ldrb	r3, [r4, #24]
    391a:	1bdb      	subs	r3, r3, r7
    391c:	fab3 f383 	clz	r3, r3
    3920:	095b      	lsrs	r3, r3, #5
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3922:	2b00      	cmp	r3, #0
    3924:	f47f ae7c 	bne.w	3620 <isr_rx+0xb8>
    3928:	e755      	b.n	37d6 <isr_rx+0x26e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    392a:	f01c fb21 	bl	1ff70 <radio_rssi_get>
    392e:	b2c0      	uxtb	r0, r0
    3930:	e78c      	b.n	384c <isr_rx+0x2e4>
		   (pdu_adv_rx->len <= sizeof(struct pdu_adv_adv_ind))) ||
    3932:	7f6b      	ldrb	r3, [r5, #29]
    3934:	e7af      	b.n	3896 <isr_rx+0x32e>
		radio_tmr_tifs_set(EVENT_IFS_US);
    3936:	2096      	movs	r0, #150	; 0x96
    3938:	f01c fb84 	bl	20044 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
    393c:	2000      	movs	r0, #0
    393e:	f01c fa55 	bl	1fdec <radio_switch_complete_and_rx>
	node_rx = ull_pdu_rx_alloc_peek(3);
    3942:	2003      	movs	r0, #3
    3944:	f011 fad6 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	if (!node_rx) {
    3948:	4681      	mov	r9, r0
    394a:	2800      	cmp	r0, #0
    394c:	f43f ae16 	beq.w	357c <isr_rx+0x14>
	ull_pdu_rx_alloc();
    3950:	f011 faee 	bl	14f30 <ull_pdu_rx_alloc>
	node_rx->hdr.handle = 0xffff;
    3954:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3958:	f8a9 3006 	strh.w	r3, [r9, #6]
		node_rx->hdr.type = NODE_RX_TYPE_REPORT;
    395c:	2305      	movs	r3, #5
    395e:	f889 3004 	strb.w	r3, [r9, #4]
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3962:	f1b8 0f00 	cmp.w	r8, #0
    3966:	d16f      	bne.n	3a48 <isr_rx+0x4e0>
    3968:	237f      	movs	r3, #127	; 0x7f
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    396a:	2e00      	cmp	r6, #0
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    396c:	f889 3018 	strb.w	r3, [r9, #24]
	node_rx->hdr.rx_ftr.rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
    3970:	bf14      	ite	ne
    3972:	463b      	movne	r3, r7
    3974:	23ff      	moveq	r3, #255	; 0xff
    3976:	f889 3019 	strb.w	r3, [r9, #25]
	node_rx->hdr.rx_ftr.direct = dir_report;
    397a:	f899 301a 	ldrb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    397e:	f8d9 0000 	ldr.w	r0, [r9]
	node_rx->hdr.rx_ftr.direct = dir_report;
    3982:	f36f 0341 	bfc	r3, #1, #1
    3986:	f889 301a 	strb.w	r3, [r9, #26]
	ull_rx_put(node_rx->hdr.link, node_rx);
    398a:	4649      	mov	r1, r9
    398c:	f011 fae6 	bl	14f5c <ull_rx_put>
	ull_rx_sched();
    3990:	f011 faf4 	bl	14f7c <ull_rx_sched>
		pdu_tx = (void *)radio_pkt_scratch_get();
    3994:	f01c fa22 	bl	1fddc <radio_pkt_scratch_get>
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    3998:	7f2b      	ldrb	r3, [r5, #28]
		pdu_tx = (void *)radio_pkt_scratch_get();
    399a:	4606      	mov	r6, r0
		pdu_tx->rx_addr = pdu_adv_rx->tx_addr;
    399c:	f3c3 1380 	ubfx	r3, r3, #6, #1
		pdu_tx->type = PDU_ADV_TYPE_SCAN_REQ;
    39a0:	7832      	ldrb	r2, [r6, #0]
    39a2:	01db      	lsls	r3, r3, #7
    39a4:	f002 0270 	and.w	r2, r2, #112	; 0x70
    39a8:	f043 0303 	orr.w	r3, r3, #3
    39ac:	4313      	orrs	r3, r2
    39ae:	7033      	strb	r3, [r6, #0]
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    39b0:	230c      	movs	r3, #12
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    39b2:	4638      	mov	r0, r7
		pdu_tx->len = sizeof(struct pdu_adv_scan_req);
    39b4:	7073      	strb	r3, [r6, #1]
		lrpa = ull_filter_lll_lrpa_get(rl_idx);
    39b6:	f019 f911 	bl	1cbdc <ull_filter_lll_lrpa_get>
		if (lll->rpa_gen && lrpa) {
    39ba:	7de3      	ldrb	r3, [r4, #23]
    39bc:	079f      	lsls	r7, r3, #30
    39be:	d550      	bpl.n	3a62 <isr_rx+0x4fa>
    39c0:	2800      	cmp	r0, #0
    39c2:	d04e      	beq.n	3a62 <isr_rx+0x4fa>
			pdu_tx->tx_addr = 1;
    39c4:	7832      	ldrb	r2, [r6, #0]
    39c6:	4633      	mov	r3, r6
    39c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    39cc:	f803 2b02 	strb.w	r2, [r3], #2
    39d0:	6802      	ldr	r2, [r0, #0]
    39d2:	f8c6 2002 	str.w	r2, [r6, #2]
    39d6:	8882      	ldrh	r2, [r0, #4]
    39d8:	809a      	strh	r2, [r3, #4]
    39da:	f8d5 301e 	ldr.w	r3, [r5, #30]
    39de:	60b3      	str	r3, [r6, #8]
    39e0:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
    39e2:	81b3      	strh	r3, [r6, #12]
		radio_pkt_tx_set(pdu_tx);
    39e4:	4630      	mov	r0, r6
    39e6:	f01c f97f 	bl	1fce8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
    39ea:	f01c f9bf 	bl	1fd6c <radio_is_ready>
    39ee:	2800      	cmp	r0, #0
    39f0:	d156      	bne.n	3aa0 <isr_rx+0x538>
		radio_tmr_end_capture();
    39f2:	f01c fc33 	bl	2025c <radio_tmr_end_capture>
		lll->state = 1U;
    39f6:	7da3      	ldrb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    39f8:	4833      	ldr	r0, [pc, #204]	; (3ac8 <isr_rx+0x560>)
		lll->state = 1U;
    39fa:	f043 0301 	orr.w	r3, r3, #1
    39fe:	75a3      	strb	r3, [r4, #22]
		radio_isr_set(isr_tx, lll);
    3a00:	4621      	mov	r1, r4
    3a02:	f01c f897 	bl	1fb34 <radio_isr_set>
	if (!err) {
    3a06:	e6c7      	b.n	3798 <isr_rx+0x230>
		lll_scan_adva_check(lll, pdu->tx_addr, pdu->adv_ind.addr,
    3a08:	f105 0a1e 	add.w	sl, r5, #30
	} else if (!ull_filter_lll_rl_addr_allowed(addr_type, addr, &rl_idx)) {
    3a0c:	aa05      	add	r2, sp, #20
    3a0e:	4651      	mov	r1, sl
    3a10:	4648      	mov	r0, r9
    3a12:	f019 fa27 	bl	1ce64 <ull_filter_lll_rl_addr_allowed>
    3a16:	2800      	cmp	r0, #0
    3a18:	f43f aeda 	beq.w	37d0 <isr_rx+0x268>
	return ((lll->adv_addr_type == addr_type) &&
    3a1c:	7de3      	ldrb	r3, [r4, #23]
    3a1e:	f003 0301 	and.w	r3, r3, #1
    3a22:	454b      	cmp	r3, r9
    3a24:	f47f aed4 	bne.w	37d0 <isr_rx+0x268>
		!memcmp(lll->adv_addr, addr, BDADDR_SIZE));
    3a28:	4651      	mov	r1, sl
    3a2a:	2206      	movs	r2, #6
    3a2c:	f104 0008 	add.w	r0, r4, #8
    3a30:	f02a fd89 	bl	2e546 <memcmp>
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3a34:	7f29      	ldrb	r1, [r5, #28]
	return ((lll->adv_addr_type == addr_type) &&
    3a36:	fab0 f380 	clz	r3, r0
    3a3a:	095b      	lsrs	r3, r3, #5
	} else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
    3a3c:	f001 010f 	and.w	r1, r1, #15
	return ((((lll->filter_policy & SCAN_FP_FILTER) != 0U) ||
    3a40:	2b00      	cmp	r3, #0
    3a42:	f47f aded 	bne.w	3620 <isr_rx+0xb8>
    3a46:	e6c6      	b.n	37d6 <isr_rx+0x26e>
	node_rx->hdr.rx_ftr.rssi = (rssi_ready) ? radio_rssi_get() :
    3a48:	f01c fa92 	bl	1ff70 <radio_rssi_get>
    3a4c:	b2c3      	uxtb	r3, r0
    3a4e:	e78c      	b.n	396a <isr_rx+0x402>
			init_tx_addr = lll->init_addr_type;
    3a50:	f894 a016 	ldrb.w	sl, [r4, #22]
			init_addr = lll->init_addr;
    3a54:	f104 0b19 	add.w	fp, r4, #25
			init_tx_addr = lll->init_addr_type;
    3a58:	f3ca 1a80 	ubfx	sl, sl, #6, #1
			init_addr = lll->init_addr;
    3a5c:	e61c      	b.n	3698 <isr_rx+0x130>
    3a5e:	4699      	mov	r9, r3
    3a60:	e688      	b.n	3774 <isr_rx+0x20c>
			pdu_tx->tx_addr = lll->init_addr_type;
    3a62:	7da3      	ldrb	r3, [r4, #22]
    3a64:	7832      	ldrb	r2, [r6, #0]
    3a66:	f3c3 1380 	ubfx	r3, r3, #6, #1
    3a6a:	f363 1286 	bfi	r2, r3, #6, #1
    3a6e:	4633      	mov	r3, r6
    3a70:	f803 2b02 	strb.w	r2, [r3], #2
    3a74:	f8d4 2019 	ldr.w	r2, [r4, #25]
    3a78:	f8c6 2002 	str.w	r2, [r6, #2]
    3a7c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
    3a80:	809a      	strh	r2, [r3, #4]
    3a82:	e7aa      	b.n	39da <isr_rx+0x472>
		LL_ASSERT(!radio_is_ready());
    3a84:	4a0d      	ldr	r2, [pc, #52]	; (3abc <isr_rx+0x554>)
    3a86:	4911      	ldr	r1, [pc, #68]	; (3acc <isr_rx+0x564>)
    3a88:	480e      	ldr	r0, [pc, #56]	; (3ac4 <isr_rx+0x55c>)
    3a8a:	f240 4391 	movw	r3, #1169	; 0x491
    3a8e:	f024 fa8b 	bl	27fa8 <printk>
    3a92:	4040      	eors	r0, r0
    3a94:	f380 8811 	msr	BASEPRI, r0
    3a98:	f04f 0003 	mov.w	r0, #3
    3a9c:	df02      	svc	2
    3a9e:	e615      	b.n	36cc <isr_rx+0x164>
		LL_ASSERT(!radio_is_ready());
    3aa0:	4a06      	ldr	r2, [pc, #24]	; (3abc <isr_rx+0x554>)
    3aa2:	490a      	ldr	r1, [pc, #40]	; (3acc <isr_rx+0x564>)
    3aa4:	4807      	ldr	r0, [pc, #28]	; (3ac4 <isr_rx+0x55c>)
    3aa6:	f240 5316 	movw	r3, #1302	; 0x516
    3aaa:	f024 fa7d 	bl	27fa8 <printk>
    3aae:	4040      	eors	r0, r0
    3ab0:	f380 8811 	msr	BASEPRI, r0
    3ab4:	f04f 0003 	mov.w	r0, #3
    3ab8:	df02      	svc	2
    3aba:	e79a      	b.n	39f2 <isr_rx+0x48a>
    3abc:	00030d88 	.word	0x00030d88
    3ac0:	00030d34 	.word	0x00030d34
    3ac4:	0002fedc 	.word	0x0002fedc
    3ac8:	0001e879 	.word	0x0001e879
    3acc:	00030d3c 	.word	0x00030d3c

00003ad0 <lis2dh_attr_set>:
}

static int lis2dh_attr_set(const struct device *dev, enum sensor_channel chan,
			   enum sensor_attribute attr,
			   const struct sensor_value *val)
{
    3ad0:	b570      	push	{r4, r5, r6, lr}
	switch (chan) {
    3ad2:	2903      	cmp	r1, #3
{
    3ad4:	4614      	mov	r4, r2
    3ad6:	b088      	sub	sp, #32
    3ad8:	4605      	mov	r5, r0
    3ada:	461a      	mov	r2, r3
	switch (chan) {
    3adc:	d86d      	bhi.n	3bba <lis2dh_attr_set+0xea>
	switch (attr) {
    3ade:	2c00      	cmp	r4, #0
    3ae0:	d03c      	beq.n	3b5c <lis2dh_attr_set+0x8c>
    3ae2:	2c07      	cmp	r4, #7
    3ae4:	d158      	bne.n	3b98 <lis2dh_attr_set+0xc8>
	int64_t micro_ms2 = ms2->val1 * 1000000LL + ms2->val2;
    3ae6:	685b      	ldr	r3, [r3, #4]
    3ae8:	6810      	ldr	r0, [r2, #0]
    3aea:	4a3d      	ldr	r2, [pc, #244]	; (3be0 <lis2dh_attr_set+0x110>)
    3aec:	17d9      	asrs	r1, r3, #31
    3aee:	fbc0 3102 	smlal	r3, r1, r0, r2
	if (micro_ms2 > 0) {
    3af2:	2b01      	cmp	r3, #1
    3af4:	f171 0200 	sbcs.w	r2, r1, #0
    3af8:	db22      	blt.n	3b40 <lis2dh_attr_set+0x70>
		return (micro_ms2 + SENSOR_G / 2) / SENSOR_G;
    3afa:	483a      	ldr	r0, [pc, #232]	; (3be4 <lis2dh_attr_set+0x114>)
    3afc:	1818      	adds	r0, r3, r0
    3afe:	a336      	add	r3, pc, #216	; (adr r3, 3bd8 <lis2dh_attr_set+0x108>)
    3b00:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b04:	f141 0100 	adc.w	r1, r1, #0
		return (micro_ms2 - SENSOR_G / 2) / SENSOR_G;
    3b08:	f7fd f836 	bl	b78 <__aeabi_ldivmod>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    3b0c:	b280      	uxth	r0, r0
    3b0e:	2802      	cmp	r0, #2
    3b10:	d01e      	beq.n	3b50 <lis2dh_attr_set+0x80>
    3b12:	2804      	cmp	r0, #4
    3b14:	d01e      	beq.n	3b54 <lis2dh_attr_set+0x84>
    3b16:	2808      	cmp	r0, #8
    3b18:	d01e      	beq.n	3b58 <lis2dh_attr_set+0x88>
    3b1a:	2810      	cmp	r0, #16
    3b1c:	d132      	bne.n	3b84 <lis2dh_attr_set+0xb4>
    3b1e:	2303      	movs	r3, #3
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    3b20:	4931      	ldr	r1, [pc, #196]	; (3be8 <lis2dh_attr_set+0x118>)
	struct lis2dh_data *lis2dh = dev->data;
    3b22:	692a      	ldr	r2, [r5, #16]
	lis2dh->scale = lis2dh_reg_val_to_scale[fs];
    3b24:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    3b28:	6111      	str	r1, [r2, #16]
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    3b2a:	6852      	ldr	r2, [r2, #4]
    3b2c:	6914      	ldr	r4, [r2, #16]
    3b2e:	011b      	lsls	r3, r3, #4
    3b30:	2230      	movs	r2, #48	; 0x30
    3b32:	2123      	movs	r1, #35	; 0x23
    3b34:	4628      	mov	r0, r5
    3b36:	46a4      	mov	ip, r4
		LOG_WRN("attr_set() not supported on this channel.");
		return -ENOTSUP;
	}

	return 0;
}
    3b38:	b008      	add	sp, #32
    3b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL4,
    3b3e:	4760      	bx	ip
    3b40:	482a      	ldr	r0, [pc, #168]	; (3bec <lis2dh_attr_set+0x11c>)
    3b42:	1818      	adds	r0, r3, r0
    3b44:	f161 0100 	sbc.w	r1, r1, #0
    3b48:	a323      	add	r3, pc, #140	; (adr r3, 3bd8 <lis2dh_attr_set+0x108>)
    3b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3b4e:	e7db      	b.n	3b08 <lis2dh_attr_set+0x38>
	for (i = 0; i < LIS2DH_NUM_RANGES; i++) {
    3b50:	2300      	movs	r3, #0
    3b52:	e7e5      	b.n	3b20 <lis2dh_attr_set+0x50>
		if (range == LIS2DH_RANGE_IDX_TO_VALUE(i)) {
    3b54:	2301      	movs	r3, #1
    3b56:	e7e3      	b.n	3b20 <lis2dh_attr_set+0x50>
    3b58:	2302      	movs	r3, #2
    3b5a:	e7e1      	b.n	3b20 <lis2dh_attr_set+0x50>
		return lis2dh_acc_odr_set(dev, val->val1);
    3b5c:	881a      	ldrh	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    3b5e:	4b24      	ldr	r3, [pc, #144]	; (3bf0 <lis2dh_attr_set+0x120>)
		if (freq == lis2dh_odr_map[i]) {
    3b60:	f833 1b02 	ldrh.w	r1, [r3], #2
    3b64:	428a      	cmp	r2, r1
    3b66:	d10a      	bne.n	3b7e <lis2dh_attr_set+0xae>
	struct lis2dh_data *data = dev->data;
    3b68:	692e      	ldr	r6, [r5, #16]
	status = data->hw_tf->read_reg(dev, LIS2DH_REG_CTRL1, &value);
    3b6a:	6873      	ldr	r3, [r6, #4]
    3b6c:	aa02      	add	r2, sp, #8
    3b6e:	689b      	ldr	r3, [r3, #8]
    3b70:	2120      	movs	r1, #32
    3b72:	4628      	mov	r0, r5
    3b74:	4798      	blx	r3
	if (status < 0) {
    3b76:	2800      	cmp	r0, #0
    3b78:	da07      	bge.n	3b8a <lis2dh_attr_set+0xba>
}
    3b7a:	b008      	add	sp, #32
    3b7c:	bd70      	pop	{r4, r5, r6, pc}
	for (i = 0; i < ARRAY_SIZE(lis2dh_odr_map); i++) {
    3b7e:	3401      	adds	r4, #1
    3b80:	2c0b      	cmp	r4, #11
    3b82:	d1ed      	bne.n	3b60 <lis2dh_attr_set+0x90>
	return -EINVAL;
    3b84:	f06f 0015 	mvn.w	r0, #21
    3b88:	e7f7      	b.n	3b7a <lis2dh_attr_set+0xaa>
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    3b8a:	f89d 2008 	ldrb.w	r2, [sp, #8]
    3b8e:	0711      	lsls	r1, r2, #28
			return i;
    3b90:	4623      	mov	r3, r4
	if ((value & LIS2DH_LP_EN_BIT_MASK) == 0U && odr == LIS2DH_ODR_8) {
    3b92:	d404      	bmi.n	3b9e <lis2dh_attr_set+0xce>
    3b94:	2c08      	cmp	r4, #8
    3b96:	d105      	bne.n	3ba4 <lis2dh_attr_set+0xd4>
	switch (attr) {
    3b98:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3b9c:	e7ed      	b.n	3b7a <lis2dh_attr_set+0xaa>
		odr--;
    3b9e:	2c0a      	cmp	r4, #10
    3ba0:	bf08      	it	eq
    3ba2:	2309      	moveq	r3, #9
				      (value & ~LIS2DH_ODR_MASK) |
    3ba4:	f002 020f 	and.w	r2, r2, #15
	return data->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
    3ba8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    3bac:	6873      	ldr	r3, [r6, #4]
    3bae:	b2d2      	uxtb	r2, r2
    3bb0:	68db      	ldr	r3, [r3, #12]
    3bb2:	2120      	movs	r1, #32
    3bb4:	4628      	mov	r0, r5
    3bb6:	4798      	blx	r3
    3bb8:	e7df      	b.n	3b7a <lis2dh_attr_set+0xaa>
		LOG_WRN("attr_set() not supported on this channel.");
    3bba:	4b0e      	ldr	r3, [pc, #56]	; (3bf4 <lis2dh_attr_set+0x124>)
    3bbc:	9306      	str	r3, [sp, #24]
    3bbe:	2302      	movs	r3, #2
    3bc0:	9301      	str	r3, [sp, #4]
    3bc2:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke4(*(uintptr_t *)&source, *(uintptr_t *)&desc, *(uintptr_t *)&package, *(uintptr_t *)&data, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    3bc4:	480c      	ldr	r0, [pc, #48]	; (3bf8 <lis2dh_attr_set+0x128>)
    3bc6:	2300      	movs	r3, #0
    3bc8:	aa05      	add	r2, sp, #20
    3bca:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    3bce:	f024 ff6f 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -ENOTSUP;
    3bd2:	e7e1      	b.n	3b98 <lis2dh_attr_set+0xc8>
    3bd4:	f3af 8000 	nop.w
    3bd8:	0095a33a 	.word	0x0095a33a
    3bdc:	00000000 	.word	0x00000000
    3be0:	000f4240 	.word	0x000f4240
    3be4:	004ad19d 	.word	0x004ad19d
    3be8:	200007c0 	.word	0x200007c0
    3bec:	ffb52e63 	.word	0xffb52e63
    3bf0:	000313d8 	.word	0x000313d8
    3bf4:	00033b2e 	.word	0x00033b2e
    3bf8:	0002f52c 	.word	0x0002f52c
    3bfc:	00000000 	.word	0x00000000

00003c00 <_dtoa_r>:
    3c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3c04:	6a44      	ldr	r4, [r0, #36]	; 0x24
    3c06:	b099      	sub	sp, #100	; 0x64
    3c08:	4616      	mov	r6, r2
    3c0a:	461f      	mov	r7, r3
    3c0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
    3c10:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    3c14:	4605      	mov	r5, r0
    3c16:	b974      	cbnz	r4, 3c36 <_dtoa_r+0x36>
    3c18:	2010      	movs	r0, #16
    3c1a:	f022 f863 	bl	25ce4 <malloc>
    3c1e:	4602      	mov	r2, r0
    3c20:	6268      	str	r0, [r5, #36]	; 0x24
    3c22:	b920      	cbnz	r0, 3c2e <_dtoa_r+0x2e>
    3c24:	4ba8      	ldr	r3, [pc, #672]	; (3ec8 <_dtoa_r+0x2c8>)
    3c26:	21ea      	movs	r1, #234	; 0xea
    3c28:	48a8      	ldr	r0, [pc, #672]	; (3ecc <_dtoa_r+0x2cc>)
    3c2a:	f023 fce1 	bl	275f0 <__assert_func>
    3c2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
    3c32:	6004      	str	r4, [r0, #0]
    3c34:	60c4      	str	r4, [r0, #12]
    3c36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c38:	6819      	ldr	r1, [r3, #0]
    3c3a:	b151      	cbz	r1, 3c52 <_dtoa_r+0x52>
    3c3c:	685a      	ldr	r2, [r3, #4]
    3c3e:	604a      	str	r2, [r1, #4]
    3c40:	2301      	movs	r3, #1
    3c42:	4093      	lsls	r3, r2
    3c44:	608b      	str	r3, [r1, #8]
    3c46:	4628      	mov	r0, r5
    3c48:	f022 fd34 	bl	266b4 <_Bfree>
    3c4c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3c4e:	2200      	movs	r2, #0
    3c50:	601a      	str	r2, [r3, #0]
    3c52:	1e3b      	subs	r3, r7, #0
    3c54:	bfb9      	ittee	lt
    3c56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
    3c5a:	9305      	strlt	r3, [sp, #20]
    3c5c:	2300      	movge	r3, #0
    3c5e:	f8c8 3000 	strge.w	r3, [r8]
    3c62:	f8dd 9014 	ldr.w	r9, [sp, #20]
    3c66:	4b9a      	ldr	r3, [pc, #616]	; (3ed0 <_dtoa_r+0x2d0>)
    3c68:	bfbc      	itt	lt
    3c6a:	2201      	movlt	r2, #1
    3c6c:	f8c8 2000 	strlt.w	r2, [r8]
    3c70:	ea33 0309 	bics.w	r3, r3, r9
    3c74:	d119      	bne.n	3caa <_dtoa_r+0xaa>
    3c76:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3c78:	f242 730f 	movw	r3, #9999	; 0x270f
    3c7c:	6013      	str	r3, [r2, #0]
    3c7e:	f3c9 0313 	ubfx	r3, r9, #0, #20
    3c82:	4333      	orrs	r3, r6
    3c84:	f000 8580 	beq.w	4788 <_dtoa_r+0xb88>
    3c88:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3c8a:	b953      	cbnz	r3, 3ca2 <_dtoa_r+0xa2>
    3c8c:	4b91      	ldr	r3, [pc, #580]	; (3ed4 <_dtoa_r+0x2d4>)
    3c8e:	e022      	b.n	3cd6 <_dtoa_r+0xd6>
    3c90:	4b91      	ldr	r3, [pc, #580]	; (3ed8 <_dtoa_r+0x2d8>)
    3c92:	9303      	str	r3, [sp, #12]
    3c94:	3308      	adds	r3, #8
    3c96:	9a26      	ldr	r2, [sp, #152]	; 0x98
    3c98:	6013      	str	r3, [r2, #0]
    3c9a:	9803      	ldr	r0, [sp, #12]
    3c9c:	b019      	add	sp, #100	; 0x64
    3c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3ca2:	4b8c      	ldr	r3, [pc, #560]	; (3ed4 <_dtoa_r+0x2d4>)
    3ca4:	9303      	str	r3, [sp, #12]
    3ca6:	3303      	adds	r3, #3
    3ca8:	e7f5      	b.n	3c96 <_dtoa_r+0x96>
    3caa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    3cae:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    3cb2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3cb6:	2200      	movs	r2, #0
    3cb8:	2300      	movs	r3, #0
    3cba:	f7fd f81d 	bl	cf8 <__aeabi_dcmpeq>
    3cbe:	4680      	mov	r8, r0
    3cc0:	b158      	cbz	r0, 3cda <_dtoa_r+0xda>
    3cc2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    3cc4:	2301      	movs	r3, #1
    3cc6:	6013      	str	r3, [r2, #0]
    3cc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    3cca:	2b00      	cmp	r3, #0
    3ccc:	f000 8559 	beq.w	4782 <_dtoa_r+0xb82>
    3cd0:	4882      	ldr	r0, [pc, #520]	; (3edc <_dtoa_r+0x2dc>)
    3cd2:	6018      	str	r0, [r3, #0]
    3cd4:	1e43      	subs	r3, r0, #1
    3cd6:	9303      	str	r3, [sp, #12]
    3cd8:	e7df      	b.n	3c9a <_dtoa_r+0x9a>
    3cda:	ab16      	add	r3, sp, #88	; 0x58
    3cdc:	9301      	str	r3, [sp, #4]
    3cde:	ab17      	add	r3, sp, #92	; 0x5c
    3ce0:	9300      	str	r3, [sp, #0]
    3ce2:	4628      	mov	r0, r5
    3ce4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
    3ce8:	f022 ff5c 	bl	26ba4 <__d2b>
    3cec:	f3c9 540a 	ubfx	r4, r9, #20, #11
    3cf0:	4683      	mov	fp, r0
    3cf2:	2c00      	cmp	r4, #0
    3cf4:	d07e      	beq.n	3df4 <_dtoa_r+0x1f4>
    3cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    3cf8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    3cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    3d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3d04:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    3d08:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    3d0c:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    3d10:	4b73      	ldr	r3, [pc, #460]	; (3ee0 <_dtoa_r+0x2e0>)
    3d12:	2200      	movs	r2, #0
    3d14:	f7fc fa38 	bl	188 <__aeabi_dsub>
    3d18:	a365      	add	r3, pc, #404	; (adr r3, 3eb0 <_dtoa_r+0x2b0>)
    3d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d1e:	f7fc fbeb 	bl	4f8 <__aeabi_dmul>
    3d22:	a365      	add	r3, pc, #404	; (adr r3, 3eb8 <_dtoa_r+0x2b8>)
    3d24:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d28:	f7fc fa30 	bl	18c <__adddf3>
    3d2c:	4606      	mov	r6, r0
    3d2e:	4620      	mov	r0, r4
    3d30:	460f      	mov	r7, r1
    3d32:	f7fc fb77 	bl	424 <__aeabi_i2d>
    3d36:	a362      	add	r3, pc, #392	; (adr r3, 3ec0 <_dtoa_r+0x2c0>)
    3d38:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d3c:	f7fc fbdc 	bl	4f8 <__aeabi_dmul>
    3d40:	4602      	mov	r2, r0
    3d42:	460b      	mov	r3, r1
    3d44:	4630      	mov	r0, r6
    3d46:	4639      	mov	r1, r7
    3d48:	f7fc fa20 	bl	18c <__adddf3>
    3d4c:	4606      	mov	r6, r0
    3d4e:	460f      	mov	r7, r1
    3d50:	f7fd f81a 	bl	d88 <__aeabi_d2iz>
    3d54:	2200      	movs	r2, #0
    3d56:	4682      	mov	sl, r0
    3d58:	2300      	movs	r3, #0
    3d5a:	4630      	mov	r0, r6
    3d5c:	4639      	mov	r1, r7
    3d5e:	f7fc ffd5 	bl	d0c <__aeabi_dcmplt>
    3d62:	b148      	cbz	r0, 3d78 <_dtoa_r+0x178>
    3d64:	4650      	mov	r0, sl
    3d66:	f7fc fb5d 	bl	424 <__aeabi_i2d>
    3d6a:	4632      	mov	r2, r6
    3d6c:	463b      	mov	r3, r7
    3d6e:	f7fc ffc3 	bl	cf8 <__aeabi_dcmpeq>
    3d72:	b908      	cbnz	r0, 3d78 <_dtoa_r+0x178>
    3d74:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3d78:	f1ba 0f16 	cmp.w	sl, #22
    3d7c:	d857      	bhi.n	3e2e <_dtoa_r+0x22e>
    3d7e:	4b59      	ldr	r3, [pc, #356]	; (3ee4 <_dtoa_r+0x2e4>)
    3d80:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    3d84:	e9d3 2300 	ldrd	r2, r3, [r3]
    3d88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3d8c:	f7fc ffbe 	bl	d0c <__aeabi_dcmplt>
    3d90:	2800      	cmp	r0, #0
    3d92:	d04e      	beq.n	3e32 <_dtoa_r+0x232>
    3d94:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    3d98:	2300      	movs	r3, #0
    3d9a:	930f      	str	r3, [sp, #60]	; 0x3c
    3d9c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    3d9e:	1b1c      	subs	r4, r3, r4
    3da0:	1e63      	subs	r3, r4, #1
    3da2:	9309      	str	r3, [sp, #36]	; 0x24
    3da4:	bf45      	ittet	mi
    3da6:	f1c4 0301 	rsbmi	r3, r4, #1
    3daa:	9306      	strmi	r3, [sp, #24]
    3dac:	2300      	movpl	r3, #0
    3dae:	2300      	movmi	r3, #0
    3db0:	bf4c      	ite	mi
    3db2:	9309      	strmi	r3, [sp, #36]	; 0x24
    3db4:	9306      	strpl	r3, [sp, #24]
    3db6:	f1ba 0f00 	cmp.w	sl, #0
    3dba:	db3c      	blt.n	3e36 <_dtoa_r+0x236>
    3dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3dbe:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
    3dc2:	4453      	add	r3, sl
    3dc4:	9309      	str	r3, [sp, #36]	; 0x24
    3dc6:	2300      	movs	r3, #0
    3dc8:	930a      	str	r3, [sp, #40]	; 0x28
    3dca:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3dcc:	2b09      	cmp	r3, #9
    3dce:	f200 808d 	bhi.w	3eec <_dtoa_r+0x2ec>
    3dd2:	2b05      	cmp	r3, #5
    3dd4:	bfc4      	itt	gt
    3dd6:	3b04      	subgt	r3, #4
    3dd8:	9322      	strgt	r3, [sp, #136]	; 0x88
    3dda:	9b22      	ldr	r3, [sp, #136]	; 0x88
    3ddc:	f1a3 0302 	sub.w	r3, r3, #2
    3de0:	bfcc      	ite	gt
    3de2:	2400      	movgt	r4, #0
    3de4:	2401      	movle	r4, #1
    3de6:	2b03      	cmp	r3, #3
    3de8:	f200 808c 	bhi.w	3f04 <_dtoa_r+0x304>
    3dec:	e8df f003 	tbb	[pc, r3]
    3df0:	5b4d4f2d 	.word	0x5b4d4f2d
    3df4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
    3df8:	441c      	add	r4, r3
    3dfa:	f204 4332 	addw	r3, r4, #1074	; 0x432
    3dfe:	2b20      	cmp	r3, #32
    3e00:	bfc3      	ittte	gt
    3e02:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
    3e06:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
    3e0a:	fa09 f303 	lslgt.w	r3, r9, r3
    3e0e:	f1c3 0320 	rsble	r3, r3, #32
    3e12:	bfc6      	itte	gt
    3e14:	fa26 f000 	lsrgt.w	r0, r6, r0
    3e18:	4318      	orrgt	r0, r3
    3e1a:	fa06 f003 	lslle.w	r0, r6, r3
    3e1e:	f7fc faf1 	bl	404 <__aeabi_ui2d>
    3e22:	2301      	movs	r3, #1
    3e24:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    3e28:	3c01      	subs	r4, #1
    3e2a:	9313      	str	r3, [sp, #76]	; 0x4c
    3e2c:	e770      	b.n	3d10 <_dtoa_r+0x110>
    3e2e:	2301      	movs	r3, #1
    3e30:	e7b3      	b.n	3d9a <_dtoa_r+0x19a>
    3e32:	900f      	str	r0, [sp, #60]	; 0x3c
    3e34:	e7b2      	b.n	3d9c <_dtoa_r+0x19c>
    3e36:	9b06      	ldr	r3, [sp, #24]
    3e38:	eba3 030a 	sub.w	r3, r3, sl
    3e3c:	9306      	str	r3, [sp, #24]
    3e3e:	f1ca 0300 	rsb	r3, sl, #0
    3e42:	930a      	str	r3, [sp, #40]	; 0x28
    3e44:	2300      	movs	r3, #0
    3e46:	930e      	str	r3, [sp, #56]	; 0x38
    3e48:	e7bf      	b.n	3dca <_dtoa_r+0x1ca>
    3e4a:	2300      	movs	r3, #0
    3e4c:	930b      	str	r3, [sp, #44]	; 0x2c
    3e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3e50:	2b00      	cmp	r3, #0
    3e52:	dc5a      	bgt.n	3f0a <_dtoa_r+0x30a>
    3e54:	f04f 0901 	mov.w	r9, #1
    3e58:	f8cd 9020 	str.w	r9, [sp, #32]
    3e5c:	464b      	mov	r3, r9
    3e5e:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
    3e62:	6a68      	ldr	r0, [r5, #36]	; 0x24
    3e64:	2200      	movs	r2, #0
    3e66:	6042      	str	r2, [r0, #4]
    3e68:	2204      	movs	r2, #4
    3e6a:	f102 0614 	add.w	r6, r2, #20
    3e6e:	429e      	cmp	r6, r3
    3e70:	6841      	ldr	r1, [r0, #4]
    3e72:	d950      	bls.n	3f16 <_dtoa_r+0x316>
    3e74:	4628      	mov	r0, r5
    3e76:	f022 fbdd 	bl	26634 <_Balloc>
    3e7a:	9003      	str	r0, [sp, #12]
    3e7c:	2800      	cmp	r0, #0
    3e7e:	d14e      	bne.n	3f1e <_dtoa_r+0x31e>
    3e80:	4b19      	ldr	r3, [pc, #100]	; (3ee8 <_dtoa_r+0x2e8>)
    3e82:	4602      	mov	r2, r0
    3e84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3e88:	e6ce      	b.n	3c28 <_dtoa_r+0x28>
    3e8a:	2301      	movs	r3, #1
    3e8c:	e7de      	b.n	3e4c <_dtoa_r+0x24c>
    3e8e:	2300      	movs	r3, #0
    3e90:	930b      	str	r3, [sp, #44]	; 0x2c
    3e92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    3e94:	eb0a 0903 	add.w	r9, sl, r3
    3e98:	f109 0301 	add.w	r3, r9, #1
    3e9c:	2b01      	cmp	r3, #1
    3e9e:	9308      	str	r3, [sp, #32]
    3ea0:	bfb8      	it	lt
    3ea2:	2301      	movlt	r3, #1
    3ea4:	e7dd      	b.n	3e62 <_dtoa_r+0x262>
    3ea6:	2301      	movs	r3, #1
    3ea8:	e7f2      	b.n	3e90 <_dtoa_r+0x290>
    3eaa:	bf00      	nop
    3eac:	f3af 8000 	nop.w
    3eb0:	636f4361 	.word	0x636f4361
    3eb4:	3fd287a7 	.word	0x3fd287a7
    3eb8:	8b60c8b3 	.word	0x8b60c8b3
    3ebc:	3fc68a28 	.word	0x3fc68a28
    3ec0:	509f79fb 	.word	0x509f79fb
    3ec4:	3fd34413 	.word	0x3fd34413
    3ec8:	00033edc 	.word	0x00033edc
    3ecc:	00033ef3 	.word	0x00033ef3
    3ed0:	7ff00000 	.word	0x7ff00000
    3ed4:	00033ed8 	.word	0x00033ed8
    3ed8:	00033ecf 	.word	0x00033ecf
    3edc:	00032123 	.word	0x00032123
    3ee0:	3ff80000 	.word	0x3ff80000
    3ee4:	0002f770 	.word	0x0002f770
    3ee8:	00033f4d 	.word	0x00033f4d
    3eec:	2401      	movs	r4, #1
    3eee:	2300      	movs	r3, #0
    3ef0:	9322      	str	r3, [sp, #136]	; 0x88
    3ef2:	940b      	str	r4, [sp, #44]	; 0x2c
    3ef4:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    3ef8:	2200      	movs	r2, #0
    3efa:	f8cd 9020 	str.w	r9, [sp, #32]
    3efe:	2312      	movs	r3, #18
    3f00:	9223      	str	r2, [sp, #140]	; 0x8c
    3f02:	e7ae      	b.n	3e62 <_dtoa_r+0x262>
    3f04:	2301      	movs	r3, #1
    3f06:	930b      	str	r3, [sp, #44]	; 0x2c
    3f08:	e7f4      	b.n	3ef4 <_dtoa_r+0x2f4>
    3f0a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
    3f0e:	f8cd 9020 	str.w	r9, [sp, #32]
    3f12:	464b      	mov	r3, r9
    3f14:	e7a5      	b.n	3e62 <_dtoa_r+0x262>
    3f16:	3101      	adds	r1, #1
    3f18:	6041      	str	r1, [r0, #4]
    3f1a:	0052      	lsls	r2, r2, #1
    3f1c:	e7a5      	b.n	3e6a <_dtoa_r+0x26a>
    3f1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3f20:	9a03      	ldr	r2, [sp, #12]
    3f22:	601a      	str	r2, [r3, #0]
    3f24:	9b08      	ldr	r3, [sp, #32]
    3f26:	2b0e      	cmp	r3, #14
    3f28:	f200 80a8 	bhi.w	407c <_dtoa_r+0x47c>
    3f2c:	2c00      	cmp	r4, #0
    3f2e:	f000 80a5 	beq.w	407c <_dtoa_r+0x47c>
    3f32:	f1ba 0f00 	cmp.w	sl, #0
    3f36:	dd34      	ble.n	3fa2 <_dtoa_r+0x3a2>
    3f38:	4a9a      	ldr	r2, [pc, #616]	; (41a4 <_dtoa_r+0x5a4>)
    3f3a:	f00a 030f 	and.w	r3, sl, #15
    3f3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3f42:	e9d3 3400 	ldrd	r3, r4, [r3]
    3f46:	f41a 7f80 	tst.w	sl, #256	; 0x100
    3f4a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    3f4e:	ea4f 142a 	mov.w	r4, sl, asr #4
    3f52:	d016      	beq.n	3f82 <_dtoa_r+0x382>
    3f54:	4b94      	ldr	r3, [pc, #592]	; (41a8 <_dtoa_r+0x5a8>)
    3f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3f5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    3f5e:	f7fc fbf5 	bl	74c <__aeabi_ddiv>
    3f62:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3f66:	f004 040f 	and.w	r4, r4, #15
    3f6a:	2703      	movs	r7, #3
    3f6c:	4e8e      	ldr	r6, [pc, #568]	; (41a8 <_dtoa_r+0x5a8>)
    3f6e:	b954      	cbnz	r4, 3f86 <_dtoa_r+0x386>
    3f70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    3f74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    3f78:	f7fc fbe8 	bl	74c <__aeabi_ddiv>
    3f7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3f80:	e029      	b.n	3fd6 <_dtoa_r+0x3d6>
    3f82:	2702      	movs	r7, #2
    3f84:	e7f2      	b.n	3f6c <_dtoa_r+0x36c>
    3f86:	07e1      	lsls	r1, r4, #31
    3f88:	d508      	bpl.n	3f9c <_dtoa_r+0x39c>
    3f8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3f8e:	e9d6 2300 	ldrd	r2, r3, [r6]
    3f92:	f7fc fab1 	bl	4f8 <__aeabi_dmul>
    3f96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    3f9a:	3701      	adds	r7, #1
    3f9c:	1064      	asrs	r4, r4, #1
    3f9e:	3608      	adds	r6, #8
    3fa0:	e7e5      	b.n	3f6e <_dtoa_r+0x36e>
    3fa2:	f000 80a5 	beq.w	40f0 <_dtoa_r+0x4f0>
    3fa6:	f1ca 0400 	rsb	r4, sl, #0
    3faa:	4b7e      	ldr	r3, [pc, #504]	; (41a4 <_dtoa_r+0x5a4>)
    3fac:	4e7e      	ldr	r6, [pc, #504]	; (41a8 <_dtoa_r+0x5a8>)
    3fae:	f004 020f 	and.w	r2, r4, #15
    3fb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
    3fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    3fbe:	f7fc fa9b 	bl	4f8 <__aeabi_dmul>
    3fc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    3fc6:	1124      	asrs	r4, r4, #4
    3fc8:	2300      	movs	r3, #0
    3fca:	2702      	movs	r7, #2
    3fcc:	2c00      	cmp	r4, #0
    3fce:	f040 8084 	bne.w	40da <_dtoa_r+0x4da>
    3fd2:	2b00      	cmp	r3, #0
    3fd4:	d1d2      	bne.n	3f7c <_dtoa_r+0x37c>
    3fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    3fd8:	2b00      	cmp	r3, #0
    3fda:	f000 808b 	beq.w	40f4 <_dtoa_r+0x4f4>
    3fde:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
    3fe2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
    3fe6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    3fea:	4b70      	ldr	r3, [pc, #448]	; (41ac <_dtoa_r+0x5ac>)
    3fec:	2200      	movs	r2, #0
    3fee:	f7fc fe8d 	bl	d0c <__aeabi_dcmplt>
    3ff2:	2800      	cmp	r0, #0
    3ff4:	d07e      	beq.n	40f4 <_dtoa_r+0x4f4>
    3ff6:	9b08      	ldr	r3, [sp, #32]
    3ff8:	2b00      	cmp	r3, #0
    3ffa:	d07b      	beq.n	40f4 <_dtoa_r+0x4f4>
    3ffc:	f1b9 0f00 	cmp.w	r9, #0
    4000:	dd38      	ble.n	4074 <_dtoa_r+0x474>
    4002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    4006:	4b6a      	ldr	r3, [pc, #424]	; (41b0 <_dtoa_r+0x5b0>)
    4008:	2200      	movs	r2, #0
    400a:	f7fc fa75 	bl	4f8 <__aeabi_dmul>
    400e:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4012:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
    4016:	3701      	adds	r7, #1
    4018:	464c      	mov	r4, r9
    401a:	4638      	mov	r0, r7
    401c:	f7fc fa02 	bl	424 <__aeabi_i2d>
    4020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4024:	f7fc fa68 	bl	4f8 <__aeabi_dmul>
    4028:	4b62      	ldr	r3, [pc, #392]	; (41b4 <_dtoa_r+0x5b4>)
    402a:	2200      	movs	r2, #0
    402c:	f7fc f8ae 	bl	18c <__adddf3>
    4030:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
    4034:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    4038:	9611      	str	r6, [sp, #68]	; 0x44
    403a:	2c00      	cmp	r4, #0
    403c:	d15d      	bne.n	40fa <_dtoa_r+0x4fa>
    403e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4042:	4b5d      	ldr	r3, [pc, #372]	; (41b8 <_dtoa_r+0x5b8>)
    4044:	2200      	movs	r2, #0
    4046:	f7fc f89f 	bl	188 <__aeabi_dsub>
    404a:	4602      	mov	r2, r0
    404c:	460b      	mov	r3, r1
    404e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    4052:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4054:	4633      	mov	r3, r6
    4056:	f7fc fe77 	bl	d48 <__aeabi_dcmpgt>
    405a:	2800      	cmp	r0, #0
    405c:	f040 829c 	bne.w	4598 <_dtoa_r+0x998>
    4060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4064:	9a10      	ldr	r2, [sp, #64]	; 0x40
    4066:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
    406a:	f7fc fe4f 	bl	d0c <__aeabi_dcmplt>
    406e:	2800      	cmp	r0, #0
    4070:	f040 8290 	bne.w	4594 <_dtoa_r+0x994>
    4074:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
    4078:	e9cd 3404 	strd	r3, r4, [sp, #16]
    407c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    407e:	2b00      	cmp	r3, #0
    4080:	f2c0 8152 	blt.w	4328 <_dtoa_r+0x728>
    4084:	f1ba 0f0e 	cmp.w	sl, #14
    4088:	f300 814e 	bgt.w	4328 <_dtoa_r+0x728>
    408c:	4b45      	ldr	r3, [pc, #276]	; (41a4 <_dtoa_r+0x5a4>)
    408e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
    4092:	e9d3 3400 	ldrd	r3, r4, [r3]
    4096:	e9cd 3406 	strd	r3, r4, [sp, #24]
    409a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    409c:	2b00      	cmp	r3, #0
    409e:	f280 80db 	bge.w	4258 <_dtoa_r+0x658>
    40a2:	9b08      	ldr	r3, [sp, #32]
    40a4:	2b00      	cmp	r3, #0
    40a6:	f300 80d7 	bgt.w	4258 <_dtoa_r+0x658>
    40aa:	f040 8272 	bne.w	4592 <_dtoa_r+0x992>
    40ae:	4b42      	ldr	r3, [pc, #264]	; (41b8 <_dtoa_r+0x5b8>)
    40b0:	2200      	movs	r2, #0
    40b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    40b6:	f7fc fa1f 	bl	4f8 <__aeabi_dmul>
    40ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    40be:	f7fc fe39 	bl	d34 <__aeabi_dcmpge>
    40c2:	9c08      	ldr	r4, [sp, #32]
    40c4:	4626      	mov	r6, r4
    40c6:	2800      	cmp	r0, #0
    40c8:	f040 8248 	bne.w	455c <_dtoa_r+0x95c>
    40cc:	9f03      	ldr	r7, [sp, #12]
    40ce:	2331      	movs	r3, #49	; 0x31
    40d0:	f807 3b01 	strb.w	r3, [r7], #1
    40d4:	f10a 0a01 	add.w	sl, sl, #1
    40d8:	e244      	b.n	4564 <_dtoa_r+0x964>
    40da:	07e2      	lsls	r2, r4, #31
    40dc:	d505      	bpl.n	40ea <_dtoa_r+0x4ea>
    40de:	e9d6 2300 	ldrd	r2, r3, [r6]
    40e2:	f7fc fa09 	bl	4f8 <__aeabi_dmul>
    40e6:	3701      	adds	r7, #1
    40e8:	2301      	movs	r3, #1
    40ea:	1064      	asrs	r4, r4, #1
    40ec:	3608      	adds	r6, #8
    40ee:	e76d      	b.n	3fcc <_dtoa_r+0x3cc>
    40f0:	2702      	movs	r7, #2
    40f2:	e770      	b.n	3fd6 <_dtoa_r+0x3d6>
    40f4:	9c08      	ldr	r4, [sp, #32]
    40f6:	46d0      	mov	r8, sl
    40f8:	e78f      	b.n	401a <_dtoa_r+0x41a>
    40fa:	9903      	ldr	r1, [sp, #12]
    40fc:	4b29      	ldr	r3, [pc, #164]	; (41a4 <_dtoa_r+0x5a4>)
    40fe:	4421      	add	r1, r4
    4100:	9112      	str	r1, [sp, #72]	; 0x48
    4102:	990b      	ldr	r1, [sp, #44]	; 0x2c
    4104:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    4108:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
    410c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    4110:	2900      	cmp	r1, #0
    4112:	d055      	beq.n	41c0 <_dtoa_r+0x5c0>
    4114:	4929      	ldr	r1, [pc, #164]	; (41bc <_dtoa_r+0x5bc>)
    4116:	2000      	movs	r0, #0
    4118:	f7fc fb18 	bl	74c <__aeabi_ddiv>
    411c:	463b      	mov	r3, r7
    411e:	4632      	mov	r2, r6
    4120:	f7fc f832 	bl	188 <__aeabi_dsub>
    4124:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    4128:	9f03      	ldr	r7, [sp, #12]
    412a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    412e:	f7fc fe2b 	bl	d88 <__aeabi_d2iz>
    4132:	4604      	mov	r4, r0
    4134:	f7fc f976 	bl	424 <__aeabi_i2d>
    4138:	4602      	mov	r2, r0
    413a:	460b      	mov	r3, r1
    413c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4140:	f7fc f822 	bl	188 <__aeabi_dsub>
    4144:	3430      	adds	r4, #48	; 0x30
    4146:	4602      	mov	r2, r0
    4148:	460b      	mov	r3, r1
    414a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    414e:	f807 4b01 	strb.w	r4, [r7], #1
    4152:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    4156:	f7fc fdd9 	bl	d0c <__aeabi_dcmplt>
    415a:	2800      	cmp	r0, #0
    415c:	d174      	bne.n	4248 <_dtoa_r+0x648>
    415e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4162:	4912      	ldr	r1, [pc, #72]	; (41ac <_dtoa_r+0x5ac>)
    4164:	2000      	movs	r0, #0
    4166:	f7fc f80f 	bl	188 <__aeabi_dsub>
    416a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    416e:	f7fc fdcd 	bl	d0c <__aeabi_dcmplt>
    4172:	2800      	cmp	r0, #0
    4174:	f040 80b7 	bne.w	42e6 <_dtoa_r+0x6e6>
    4178:	9b12      	ldr	r3, [sp, #72]	; 0x48
    417a:	429f      	cmp	r7, r3
    417c:	f43f af7a 	beq.w	4074 <_dtoa_r+0x474>
    4180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    4184:	4b0a      	ldr	r3, [pc, #40]	; (41b0 <_dtoa_r+0x5b0>)
    4186:	2200      	movs	r2, #0
    4188:	f7fc f9b6 	bl	4f8 <__aeabi_dmul>
    418c:	4b08      	ldr	r3, [pc, #32]	; (41b0 <_dtoa_r+0x5b0>)
    418e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    4192:	2200      	movs	r2, #0
    4194:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    4198:	f7fc f9ae 	bl	4f8 <__aeabi_dmul>
    419c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    41a0:	e7c3      	b.n	412a <_dtoa_r+0x52a>
    41a2:	bf00      	nop
    41a4:	0002f770 	.word	0x0002f770
    41a8:	0002f748 	.word	0x0002f748
    41ac:	3ff00000 	.word	0x3ff00000
    41b0:	40240000 	.word	0x40240000
    41b4:	401c0000 	.word	0x401c0000
    41b8:	40140000 	.word	0x40140000
    41bc:	3fe00000 	.word	0x3fe00000
    41c0:	4630      	mov	r0, r6
    41c2:	4639      	mov	r1, r7
    41c4:	f7fc f998 	bl	4f8 <__aeabi_dmul>
    41c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
    41cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    41ce:	9c03      	ldr	r4, [sp, #12]
    41d0:	9314      	str	r3, [sp, #80]	; 0x50
    41d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    41d6:	f7fc fdd7 	bl	d88 <__aeabi_d2iz>
    41da:	9015      	str	r0, [sp, #84]	; 0x54
    41dc:	f7fc f922 	bl	424 <__aeabi_i2d>
    41e0:	4602      	mov	r2, r0
    41e2:	460b      	mov	r3, r1
    41e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    41e8:	f7fb ffce 	bl	188 <__aeabi_dsub>
    41ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
    41ee:	3330      	adds	r3, #48	; 0x30
    41f0:	f804 3b01 	strb.w	r3, [r4], #1
    41f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
    41f6:	429c      	cmp	r4, r3
    41f8:	4606      	mov	r6, r0
    41fa:	460f      	mov	r7, r1
    41fc:	f04f 0200 	mov.w	r2, #0
    4200:	d124      	bne.n	424c <_dtoa_r+0x64c>
    4202:	4ba4      	ldr	r3, [pc, #656]	; (4494 <_dtoa_r+0x894>)
    4204:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    4208:	f7fb ffc0 	bl	18c <__adddf3>
    420c:	4602      	mov	r2, r0
    420e:	460b      	mov	r3, r1
    4210:	4630      	mov	r0, r6
    4212:	4639      	mov	r1, r7
    4214:	f7fc fd98 	bl	d48 <__aeabi_dcmpgt>
    4218:	2800      	cmp	r0, #0
    421a:	d163      	bne.n	42e4 <_dtoa_r+0x6e4>
    421c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    4220:	499c      	ldr	r1, [pc, #624]	; (4494 <_dtoa_r+0x894>)
    4222:	2000      	movs	r0, #0
    4224:	f7fb ffb0 	bl	188 <__aeabi_dsub>
    4228:	4602      	mov	r2, r0
    422a:	460b      	mov	r3, r1
    422c:	4630      	mov	r0, r6
    422e:	4639      	mov	r1, r7
    4230:	f7fc fd6c 	bl	d0c <__aeabi_dcmplt>
    4234:	2800      	cmp	r0, #0
    4236:	f43f af1d 	beq.w	4074 <_dtoa_r+0x474>
    423a:	9f14      	ldr	r7, [sp, #80]	; 0x50
    423c:	1e7b      	subs	r3, r7, #1
    423e:	9314      	str	r3, [sp, #80]	; 0x50
    4240:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    4244:	2b30      	cmp	r3, #48	; 0x30
    4246:	d0f8      	beq.n	423a <_dtoa_r+0x63a>
    4248:	46c2      	mov	sl, r8
    424a:	e03b      	b.n	42c4 <_dtoa_r+0x6c4>
    424c:	4b92      	ldr	r3, [pc, #584]	; (4498 <_dtoa_r+0x898>)
    424e:	f7fc f953 	bl	4f8 <__aeabi_dmul>
    4252:	e9cd 0104 	strd	r0, r1, [sp, #16]
    4256:	e7bc      	b.n	41d2 <_dtoa_r+0x5d2>
    4258:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
    425c:	9f03      	ldr	r7, [sp, #12]
    425e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4262:	4640      	mov	r0, r8
    4264:	4649      	mov	r1, r9
    4266:	f7fc fa71 	bl	74c <__aeabi_ddiv>
    426a:	f7fc fd8d 	bl	d88 <__aeabi_d2iz>
    426e:	4604      	mov	r4, r0
    4270:	f7fc f8d8 	bl	424 <__aeabi_i2d>
    4274:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    4278:	f7fc f93e 	bl	4f8 <__aeabi_dmul>
    427c:	f104 0630 	add.w	r6, r4, #48	; 0x30
    4280:	4602      	mov	r2, r0
    4282:	460b      	mov	r3, r1
    4284:	4640      	mov	r0, r8
    4286:	4649      	mov	r1, r9
    4288:	f7fb ff7e 	bl	188 <__aeabi_dsub>
    428c:	f807 6b01 	strb.w	r6, [r7], #1
    4290:	9e03      	ldr	r6, [sp, #12]
    4292:	f8dd c020 	ldr.w	ip, [sp, #32]
    4296:	1bbe      	subs	r6, r7, r6
    4298:	45b4      	cmp	ip, r6
    429a:	4602      	mov	r2, r0
    429c:	460b      	mov	r3, r1
    429e:	d136      	bne.n	430e <_dtoa_r+0x70e>
    42a0:	f7fb ff74 	bl	18c <__adddf3>
    42a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    42a8:	4680      	mov	r8, r0
    42aa:	4689      	mov	r9, r1
    42ac:	f7fc fd4c 	bl	d48 <__aeabi_dcmpgt>
    42b0:	bb58      	cbnz	r0, 430a <_dtoa_r+0x70a>
    42b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    42b6:	4640      	mov	r0, r8
    42b8:	4649      	mov	r1, r9
    42ba:	f7fc fd1d 	bl	cf8 <__aeabi_dcmpeq>
    42be:	b108      	cbz	r0, 42c4 <_dtoa_r+0x6c4>
    42c0:	07e1      	lsls	r1, r4, #31
    42c2:	d422      	bmi.n	430a <_dtoa_r+0x70a>
    42c4:	4628      	mov	r0, r5
    42c6:	4659      	mov	r1, fp
    42c8:	f022 f9f4 	bl	266b4 <_Bfree>
    42cc:	2300      	movs	r3, #0
    42ce:	703b      	strb	r3, [r7, #0]
    42d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    42d2:	f10a 0001 	add.w	r0, sl, #1
    42d6:	6018      	str	r0, [r3, #0]
    42d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
    42da:	2b00      	cmp	r3, #0
    42dc:	f43f acdd 	beq.w	3c9a <_dtoa_r+0x9a>
    42e0:	601f      	str	r7, [r3, #0]
    42e2:	e4da      	b.n	3c9a <_dtoa_r+0x9a>
    42e4:	4627      	mov	r7, r4
    42e6:	463b      	mov	r3, r7
    42e8:	461f      	mov	r7, r3
    42ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    42ee:	2a39      	cmp	r2, #57	; 0x39
    42f0:	d107      	bne.n	4302 <_dtoa_r+0x702>
    42f2:	9a03      	ldr	r2, [sp, #12]
    42f4:	429a      	cmp	r2, r3
    42f6:	d1f7      	bne.n	42e8 <_dtoa_r+0x6e8>
    42f8:	9903      	ldr	r1, [sp, #12]
    42fa:	2230      	movs	r2, #48	; 0x30
    42fc:	f108 0801 	add.w	r8, r8, #1
    4300:	700a      	strb	r2, [r1, #0]
    4302:	781a      	ldrb	r2, [r3, #0]
    4304:	3201      	adds	r2, #1
    4306:	701a      	strb	r2, [r3, #0]
    4308:	e79e      	b.n	4248 <_dtoa_r+0x648>
    430a:	46d0      	mov	r8, sl
    430c:	e7eb      	b.n	42e6 <_dtoa_r+0x6e6>
    430e:	4b62      	ldr	r3, [pc, #392]	; (4498 <_dtoa_r+0x898>)
    4310:	2200      	movs	r2, #0
    4312:	f7fc f8f1 	bl	4f8 <__aeabi_dmul>
    4316:	2200      	movs	r2, #0
    4318:	2300      	movs	r3, #0
    431a:	4680      	mov	r8, r0
    431c:	4689      	mov	r9, r1
    431e:	f7fc fceb 	bl	cf8 <__aeabi_dcmpeq>
    4322:	2800      	cmp	r0, #0
    4324:	d09b      	beq.n	425e <_dtoa_r+0x65e>
    4326:	e7cd      	b.n	42c4 <_dtoa_r+0x6c4>
    4328:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    432a:	2a00      	cmp	r2, #0
    432c:	f000 80d0 	beq.w	44d0 <_dtoa_r+0x8d0>
    4330:	9a22      	ldr	r2, [sp, #136]	; 0x88
    4332:	2a01      	cmp	r2, #1
    4334:	f300 80b2 	bgt.w	449c <_dtoa_r+0x89c>
    4338:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    433a:	2a00      	cmp	r2, #0
    433c:	f000 80a6 	beq.w	448c <_dtoa_r+0x88c>
    4340:	f203 4333 	addw	r3, r3, #1075	; 0x433
    4344:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4346:	9f06      	ldr	r7, [sp, #24]
    4348:	9a06      	ldr	r2, [sp, #24]
    434a:	441a      	add	r2, r3
    434c:	9206      	str	r2, [sp, #24]
    434e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4350:	2101      	movs	r1, #1
    4352:	441a      	add	r2, r3
    4354:	4628      	mov	r0, r5
    4356:	9209      	str	r2, [sp, #36]	; 0x24
    4358:	f022 fa14 	bl	26784 <__i2b>
    435c:	4606      	mov	r6, r0
    435e:	2f00      	cmp	r7, #0
    4360:	dd0c      	ble.n	437c <_dtoa_r+0x77c>
    4362:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4364:	2b00      	cmp	r3, #0
    4366:	dd09      	ble.n	437c <_dtoa_r+0x77c>
    4368:	42bb      	cmp	r3, r7
    436a:	9a06      	ldr	r2, [sp, #24]
    436c:	bfa8      	it	ge
    436e:	463b      	movge	r3, r7
    4370:	1ad2      	subs	r2, r2, r3
    4372:	9206      	str	r2, [sp, #24]
    4374:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4376:	1aff      	subs	r7, r7, r3
    4378:	1ad3      	subs	r3, r2, r3
    437a:	9309      	str	r3, [sp, #36]	; 0x24
    437c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    437e:	b1f3      	cbz	r3, 43be <_dtoa_r+0x7be>
    4380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4382:	2b00      	cmp	r3, #0
    4384:	f000 80a8 	beq.w	44d8 <_dtoa_r+0x8d8>
    4388:	2c00      	cmp	r4, #0
    438a:	dd10      	ble.n	43ae <_dtoa_r+0x7ae>
    438c:	4631      	mov	r1, r6
    438e:	4622      	mov	r2, r4
    4390:	4628      	mov	r0, r5
    4392:	f022 fab5 	bl	26900 <__pow5mult>
    4396:	465a      	mov	r2, fp
    4398:	4601      	mov	r1, r0
    439a:	4606      	mov	r6, r0
    439c:	4628      	mov	r0, r5
    439e:	f022 fa07 	bl	267b0 <__multiply>
    43a2:	4659      	mov	r1, fp
    43a4:	4680      	mov	r8, r0
    43a6:	4628      	mov	r0, r5
    43a8:	f022 f984 	bl	266b4 <_Bfree>
    43ac:	46c3      	mov	fp, r8
    43ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    43b0:	1b1a      	subs	r2, r3, r4
    43b2:	d004      	beq.n	43be <_dtoa_r+0x7be>
    43b4:	4659      	mov	r1, fp
    43b6:	4628      	mov	r0, r5
    43b8:	f022 faa2 	bl	26900 <__pow5mult>
    43bc:	4683      	mov	fp, r0
    43be:	2101      	movs	r1, #1
    43c0:	4628      	mov	r0, r5
    43c2:	f022 f9df 	bl	26784 <__i2b>
    43c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    43c8:	2b00      	cmp	r3, #0
    43ca:	4604      	mov	r4, r0
    43cc:	f340 8086 	ble.w	44dc <_dtoa_r+0x8dc>
    43d0:	461a      	mov	r2, r3
    43d2:	4601      	mov	r1, r0
    43d4:	4628      	mov	r0, r5
    43d6:	f022 fa93 	bl	26900 <__pow5mult>
    43da:	9b22      	ldr	r3, [sp, #136]	; 0x88
    43dc:	2b01      	cmp	r3, #1
    43de:	4604      	mov	r4, r0
    43e0:	dd7f      	ble.n	44e2 <_dtoa_r+0x8e2>
    43e2:	f04f 0800 	mov.w	r8, #0
    43e6:	6923      	ldr	r3, [r4, #16]
    43e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    43ec:	6918      	ldr	r0, [r3, #16]
    43ee:	f02a fb13 	bl	2ea18 <__hi0bits>
    43f2:	f1c0 0020 	rsb	r0, r0, #32
    43f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43f8:	4418      	add	r0, r3
    43fa:	f010 001f 	ands.w	r0, r0, #31
    43fe:	f000 8092 	beq.w	4526 <_dtoa_r+0x926>
    4402:	f1c0 0320 	rsb	r3, r0, #32
    4406:	2b04      	cmp	r3, #4
    4408:	f340 808a 	ble.w	4520 <_dtoa_r+0x920>
    440c:	f1c0 001c 	rsb	r0, r0, #28
    4410:	9b06      	ldr	r3, [sp, #24]
    4412:	4403      	add	r3, r0
    4414:	9306      	str	r3, [sp, #24]
    4416:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4418:	4403      	add	r3, r0
    441a:	4407      	add	r7, r0
    441c:	9309      	str	r3, [sp, #36]	; 0x24
    441e:	9b06      	ldr	r3, [sp, #24]
    4420:	2b00      	cmp	r3, #0
    4422:	dd05      	ble.n	4430 <_dtoa_r+0x830>
    4424:	4659      	mov	r1, fp
    4426:	461a      	mov	r2, r3
    4428:	4628      	mov	r0, r5
    442a:	f022 fac3 	bl	269b4 <__lshift>
    442e:	4683      	mov	fp, r0
    4430:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4432:	2b00      	cmp	r3, #0
    4434:	dd05      	ble.n	4442 <_dtoa_r+0x842>
    4436:	4621      	mov	r1, r4
    4438:	461a      	mov	r2, r3
    443a:	4628      	mov	r0, r5
    443c:	f022 faba 	bl	269b4 <__lshift>
    4440:	4604      	mov	r4, r0
    4442:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4444:	2b00      	cmp	r3, #0
    4446:	d070      	beq.n	452a <_dtoa_r+0x92a>
    4448:	4621      	mov	r1, r4
    444a:	4658      	mov	r0, fp
    444c:	f02a fb31 	bl	2eab2 <__mcmp>
    4450:	2800      	cmp	r0, #0
    4452:	da6a      	bge.n	452a <_dtoa_r+0x92a>
    4454:	2300      	movs	r3, #0
    4456:	4659      	mov	r1, fp
    4458:	220a      	movs	r2, #10
    445a:	4628      	mov	r0, r5
    445c:	f022 f94c 	bl	266f8 <__multadd>
    4460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4462:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    4466:	4683      	mov	fp, r0
    4468:	2b00      	cmp	r3, #0
    446a:	f000 8194 	beq.w	4796 <_dtoa_r+0xb96>
    446e:	4631      	mov	r1, r6
    4470:	2300      	movs	r3, #0
    4472:	220a      	movs	r2, #10
    4474:	4628      	mov	r0, r5
    4476:	f022 f93f 	bl	266f8 <__multadd>
    447a:	f1b9 0f00 	cmp.w	r9, #0
    447e:	4606      	mov	r6, r0
    4480:	f300 8093 	bgt.w	45aa <_dtoa_r+0x9aa>
    4484:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4486:	2b02      	cmp	r3, #2
    4488:	dc57      	bgt.n	453a <_dtoa_r+0x93a>
    448a:	e08e      	b.n	45aa <_dtoa_r+0x9aa>
    448c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    448e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    4492:	e757      	b.n	4344 <_dtoa_r+0x744>
    4494:	3fe00000 	.word	0x3fe00000
    4498:	40240000 	.word	0x40240000
    449c:	9b08      	ldr	r3, [sp, #32]
    449e:	1e5c      	subs	r4, r3, #1
    44a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    44a2:	42a3      	cmp	r3, r4
    44a4:	bfbf      	itttt	lt
    44a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
    44a8:	940a      	strlt	r4, [sp, #40]	; 0x28
    44aa:	1ae2      	sublt	r2, r4, r3
    44ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
    44ae:	bfb6      	itet	lt
    44b0:	189b      	addlt	r3, r3, r2
    44b2:	1b1c      	subge	r4, r3, r4
    44b4:	930e      	strlt	r3, [sp, #56]	; 0x38
    44b6:	9b08      	ldr	r3, [sp, #32]
    44b8:	bfb8      	it	lt
    44ba:	2400      	movlt	r4, #0
    44bc:	2b00      	cmp	r3, #0
    44be:	bfb9      	ittee	lt
    44c0:	9b06      	ldrlt	r3, [sp, #24]
    44c2:	9a08      	ldrlt	r2, [sp, #32]
    44c4:	9f06      	ldrge	r7, [sp, #24]
    44c6:	9b08      	ldrge	r3, [sp, #32]
    44c8:	bfbc      	itt	lt
    44ca:	1a9f      	sublt	r7, r3, r2
    44cc:	2300      	movlt	r3, #0
    44ce:	e73b      	b.n	4348 <_dtoa_r+0x748>
    44d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    44d2:	9f06      	ldr	r7, [sp, #24]
    44d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    44d6:	e742      	b.n	435e <_dtoa_r+0x75e>
    44d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    44da:	e76b      	b.n	43b4 <_dtoa_r+0x7b4>
    44dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
    44de:	2b01      	cmp	r3, #1
    44e0:	dc19      	bgt.n	4516 <_dtoa_r+0x916>
    44e2:	9b04      	ldr	r3, [sp, #16]
    44e4:	b9bb      	cbnz	r3, 4516 <_dtoa_r+0x916>
    44e6:	9b05      	ldr	r3, [sp, #20]
    44e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    44ec:	b99b      	cbnz	r3, 4516 <_dtoa_r+0x916>
    44ee:	9b05      	ldr	r3, [sp, #20]
    44f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    44f4:	0d1b      	lsrs	r3, r3, #20
    44f6:	051b      	lsls	r3, r3, #20
    44f8:	b183      	cbz	r3, 451c <_dtoa_r+0x91c>
    44fa:	9b06      	ldr	r3, [sp, #24]
    44fc:	3301      	adds	r3, #1
    44fe:	9306      	str	r3, [sp, #24]
    4500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4502:	3301      	adds	r3, #1
    4504:	9309      	str	r3, [sp, #36]	; 0x24
    4506:	f04f 0801 	mov.w	r8, #1
    450a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    450c:	2b00      	cmp	r3, #0
    450e:	f47f af6a 	bne.w	43e6 <_dtoa_r+0x7e6>
    4512:	2001      	movs	r0, #1
    4514:	e76f      	b.n	43f6 <_dtoa_r+0x7f6>
    4516:	f04f 0800 	mov.w	r8, #0
    451a:	e7f6      	b.n	450a <_dtoa_r+0x90a>
    451c:	4698      	mov	r8, r3
    451e:	e7f4      	b.n	450a <_dtoa_r+0x90a>
    4520:	f43f af7d 	beq.w	441e <_dtoa_r+0x81e>
    4524:	4618      	mov	r0, r3
    4526:	301c      	adds	r0, #28
    4528:	e772      	b.n	4410 <_dtoa_r+0x810>
    452a:	9b08      	ldr	r3, [sp, #32]
    452c:	2b00      	cmp	r3, #0
    452e:	dc36      	bgt.n	459e <_dtoa_r+0x99e>
    4530:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4532:	2b02      	cmp	r3, #2
    4534:	dd33      	ble.n	459e <_dtoa_r+0x99e>
    4536:	f8dd 9020 	ldr.w	r9, [sp, #32]
    453a:	f1b9 0f00 	cmp.w	r9, #0
    453e:	d10d      	bne.n	455c <_dtoa_r+0x95c>
    4540:	4621      	mov	r1, r4
    4542:	464b      	mov	r3, r9
    4544:	2205      	movs	r2, #5
    4546:	4628      	mov	r0, r5
    4548:	f022 f8d6 	bl	266f8 <__multadd>
    454c:	4601      	mov	r1, r0
    454e:	4604      	mov	r4, r0
    4550:	4658      	mov	r0, fp
    4552:	f02a faae 	bl	2eab2 <__mcmp>
    4556:	2800      	cmp	r0, #0
    4558:	f73f adb8 	bgt.w	40cc <_dtoa_r+0x4cc>
    455c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    455e:	9f03      	ldr	r7, [sp, #12]
    4560:	ea6f 0a03 	mvn.w	sl, r3
    4564:	f04f 0800 	mov.w	r8, #0
    4568:	4621      	mov	r1, r4
    456a:	4628      	mov	r0, r5
    456c:	f022 f8a2 	bl	266b4 <_Bfree>
    4570:	2e00      	cmp	r6, #0
    4572:	f43f aea7 	beq.w	42c4 <_dtoa_r+0x6c4>
    4576:	f1b8 0f00 	cmp.w	r8, #0
    457a:	d005      	beq.n	4588 <_dtoa_r+0x988>
    457c:	45b0      	cmp	r8, r6
    457e:	d003      	beq.n	4588 <_dtoa_r+0x988>
    4580:	4641      	mov	r1, r8
    4582:	4628      	mov	r0, r5
    4584:	f022 f896 	bl	266b4 <_Bfree>
    4588:	4631      	mov	r1, r6
    458a:	4628      	mov	r0, r5
    458c:	f022 f892 	bl	266b4 <_Bfree>
    4590:	e698      	b.n	42c4 <_dtoa_r+0x6c4>
    4592:	2400      	movs	r4, #0
    4594:	4626      	mov	r6, r4
    4596:	e7e1      	b.n	455c <_dtoa_r+0x95c>
    4598:	46c2      	mov	sl, r8
    459a:	4626      	mov	r6, r4
    459c:	e596      	b.n	40cc <_dtoa_r+0x4cc>
    459e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    45a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
    45a4:	2b00      	cmp	r3, #0
    45a6:	f000 80fd 	beq.w	47a4 <_dtoa_r+0xba4>
    45aa:	2f00      	cmp	r7, #0
    45ac:	dd05      	ble.n	45ba <_dtoa_r+0x9ba>
    45ae:	4631      	mov	r1, r6
    45b0:	463a      	mov	r2, r7
    45b2:	4628      	mov	r0, r5
    45b4:	f022 f9fe 	bl	269b4 <__lshift>
    45b8:	4606      	mov	r6, r0
    45ba:	f1b8 0f00 	cmp.w	r8, #0
    45be:	d05c      	beq.n	467a <_dtoa_r+0xa7a>
    45c0:	6871      	ldr	r1, [r6, #4]
    45c2:	4628      	mov	r0, r5
    45c4:	f022 f836 	bl	26634 <_Balloc>
    45c8:	4607      	mov	r7, r0
    45ca:	b928      	cbnz	r0, 45d8 <_dtoa_r+0x9d8>
    45cc:	4b80      	ldr	r3, [pc, #512]	; (47d0 <_dtoa_r+0xbd0>)
    45ce:	4602      	mov	r2, r0
    45d0:	f240 21ea 	movw	r1, #746	; 0x2ea
    45d4:	f7ff bb28 	b.w	3c28 <_dtoa_r+0x28>
    45d8:	6932      	ldr	r2, [r6, #16]
    45da:	3202      	adds	r2, #2
    45dc:	0092      	lsls	r2, r2, #2
    45de:	f106 010c 	add.w	r1, r6, #12
    45e2:	300c      	adds	r0, #12
    45e4:	f029 ffbf 	bl	2e566 <memcpy>
    45e8:	2201      	movs	r2, #1
    45ea:	4639      	mov	r1, r7
    45ec:	4628      	mov	r0, r5
    45ee:	f022 f9e1 	bl	269b4 <__lshift>
    45f2:	9b03      	ldr	r3, [sp, #12]
    45f4:	3301      	adds	r3, #1
    45f6:	9308      	str	r3, [sp, #32]
    45f8:	9b03      	ldr	r3, [sp, #12]
    45fa:	444b      	add	r3, r9
    45fc:	930a      	str	r3, [sp, #40]	; 0x28
    45fe:	9b04      	ldr	r3, [sp, #16]
    4600:	f003 0301 	and.w	r3, r3, #1
    4604:	46b0      	mov	r8, r6
    4606:	9309      	str	r3, [sp, #36]	; 0x24
    4608:	4606      	mov	r6, r0
    460a:	9b08      	ldr	r3, [sp, #32]
    460c:	4621      	mov	r1, r4
    460e:	3b01      	subs	r3, #1
    4610:	4658      	mov	r0, fp
    4612:	9304      	str	r3, [sp, #16]
    4614:	f02a f979 	bl	2e90a <quorem>
    4618:	4603      	mov	r3, r0
    461a:	3330      	adds	r3, #48	; 0x30
    461c:	9006      	str	r0, [sp, #24]
    461e:	4641      	mov	r1, r8
    4620:	4658      	mov	r0, fp
    4622:	930b      	str	r3, [sp, #44]	; 0x2c
    4624:	f02a fa45 	bl	2eab2 <__mcmp>
    4628:	4632      	mov	r2, r6
    462a:	4681      	mov	r9, r0
    462c:	4621      	mov	r1, r4
    462e:	4628      	mov	r0, r5
    4630:	f022 fa30 	bl	26a94 <__mdiff>
    4634:	68c2      	ldr	r2, [r0, #12]
    4636:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4638:	4607      	mov	r7, r0
    463a:	bb02      	cbnz	r2, 467e <_dtoa_r+0xa7e>
    463c:	4601      	mov	r1, r0
    463e:	4658      	mov	r0, fp
    4640:	f02a fa37 	bl	2eab2 <__mcmp>
    4644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4646:	4602      	mov	r2, r0
    4648:	4639      	mov	r1, r7
    464a:	4628      	mov	r0, r5
    464c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
    4650:	f022 f830 	bl	266b4 <_Bfree>
    4654:	9b22      	ldr	r3, [sp, #136]	; 0x88
    4656:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4658:	9f08      	ldr	r7, [sp, #32]
    465a:	ea43 0102 	orr.w	r1, r3, r2
    465e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4660:	430b      	orrs	r3, r1
    4662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4664:	d10d      	bne.n	4682 <_dtoa_r+0xa82>
    4666:	2b39      	cmp	r3, #57	; 0x39
    4668:	d029      	beq.n	46be <_dtoa_r+0xabe>
    466a:	f1b9 0f00 	cmp.w	r9, #0
    466e:	dd01      	ble.n	4674 <_dtoa_r+0xa74>
    4670:	9b06      	ldr	r3, [sp, #24]
    4672:	3331      	adds	r3, #49	; 0x31
    4674:	9a04      	ldr	r2, [sp, #16]
    4676:	7013      	strb	r3, [r2, #0]
    4678:	e776      	b.n	4568 <_dtoa_r+0x968>
    467a:	4630      	mov	r0, r6
    467c:	e7b9      	b.n	45f2 <_dtoa_r+0x9f2>
    467e:	2201      	movs	r2, #1
    4680:	e7e2      	b.n	4648 <_dtoa_r+0xa48>
    4682:	f1b9 0f00 	cmp.w	r9, #0
    4686:	db06      	blt.n	4696 <_dtoa_r+0xa96>
    4688:	9922      	ldr	r1, [sp, #136]	; 0x88
    468a:	ea41 0909 	orr.w	r9, r1, r9
    468e:	9909      	ldr	r1, [sp, #36]	; 0x24
    4690:	ea59 0101 	orrs.w	r1, r9, r1
    4694:	d120      	bne.n	46d8 <_dtoa_r+0xad8>
    4696:	2a00      	cmp	r2, #0
    4698:	ddec      	ble.n	4674 <_dtoa_r+0xa74>
    469a:	4659      	mov	r1, fp
    469c:	2201      	movs	r2, #1
    469e:	4628      	mov	r0, r5
    46a0:	9308      	str	r3, [sp, #32]
    46a2:	f022 f987 	bl	269b4 <__lshift>
    46a6:	4621      	mov	r1, r4
    46a8:	4683      	mov	fp, r0
    46aa:	f02a fa02 	bl	2eab2 <__mcmp>
    46ae:	2800      	cmp	r0, #0
    46b0:	9b08      	ldr	r3, [sp, #32]
    46b2:	dc02      	bgt.n	46ba <_dtoa_r+0xaba>
    46b4:	d1de      	bne.n	4674 <_dtoa_r+0xa74>
    46b6:	07da      	lsls	r2, r3, #31
    46b8:	d5dc      	bpl.n	4674 <_dtoa_r+0xa74>
    46ba:	2b39      	cmp	r3, #57	; 0x39
    46bc:	d1d8      	bne.n	4670 <_dtoa_r+0xa70>
    46be:	9a04      	ldr	r2, [sp, #16]
    46c0:	2339      	movs	r3, #57	; 0x39
    46c2:	7013      	strb	r3, [r2, #0]
    46c4:	463b      	mov	r3, r7
    46c6:	461f      	mov	r7, r3
    46c8:	3b01      	subs	r3, #1
    46ca:	f817 2c01 	ldrb.w	r2, [r7, #-1]
    46ce:	2a39      	cmp	r2, #57	; 0x39
    46d0:	d050      	beq.n	4774 <_dtoa_r+0xb74>
    46d2:	3201      	adds	r2, #1
    46d4:	701a      	strb	r2, [r3, #0]
    46d6:	e747      	b.n	4568 <_dtoa_r+0x968>
    46d8:	2a00      	cmp	r2, #0
    46da:	dd03      	ble.n	46e4 <_dtoa_r+0xae4>
    46dc:	2b39      	cmp	r3, #57	; 0x39
    46de:	d0ee      	beq.n	46be <_dtoa_r+0xabe>
    46e0:	3301      	adds	r3, #1
    46e2:	e7c7      	b.n	4674 <_dtoa_r+0xa74>
    46e4:	9a08      	ldr	r2, [sp, #32]
    46e6:	990a      	ldr	r1, [sp, #40]	; 0x28
    46e8:	f802 3c01 	strb.w	r3, [r2, #-1]
    46ec:	428a      	cmp	r2, r1
    46ee:	d02a      	beq.n	4746 <_dtoa_r+0xb46>
    46f0:	4659      	mov	r1, fp
    46f2:	2300      	movs	r3, #0
    46f4:	220a      	movs	r2, #10
    46f6:	4628      	mov	r0, r5
    46f8:	f021 fffe 	bl	266f8 <__multadd>
    46fc:	45b0      	cmp	r8, r6
    46fe:	4683      	mov	fp, r0
    4700:	f04f 0300 	mov.w	r3, #0
    4704:	f04f 020a 	mov.w	r2, #10
    4708:	4641      	mov	r1, r8
    470a:	4628      	mov	r0, r5
    470c:	d107      	bne.n	471e <_dtoa_r+0xb1e>
    470e:	f021 fff3 	bl	266f8 <__multadd>
    4712:	4680      	mov	r8, r0
    4714:	4606      	mov	r6, r0
    4716:	9b08      	ldr	r3, [sp, #32]
    4718:	3301      	adds	r3, #1
    471a:	9308      	str	r3, [sp, #32]
    471c:	e775      	b.n	460a <_dtoa_r+0xa0a>
    471e:	f021 ffeb 	bl	266f8 <__multadd>
    4722:	4631      	mov	r1, r6
    4724:	4680      	mov	r8, r0
    4726:	2300      	movs	r3, #0
    4728:	220a      	movs	r2, #10
    472a:	4628      	mov	r0, r5
    472c:	f021 ffe4 	bl	266f8 <__multadd>
    4730:	4606      	mov	r6, r0
    4732:	e7f0      	b.n	4716 <_dtoa_r+0xb16>
    4734:	f1b9 0f00 	cmp.w	r9, #0
    4738:	9a03      	ldr	r2, [sp, #12]
    473a:	bfcc      	ite	gt
    473c:	464f      	movgt	r7, r9
    473e:	2701      	movle	r7, #1
    4740:	4417      	add	r7, r2
    4742:	f04f 0800 	mov.w	r8, #0
    4746:	4659      	mov	r1, fp
    4748:	2201      	movs	r2, #1
    474a:	4628      	mov	r0, r5
    474c:	9308      	str	r3, [sp, #32]
    474e:	f022 f931 	bl	269b4 <__lshift>
    4752:	4621      	mov	r1, r4
    4754:	4683      	mov	fp, r0
    4756:	f02a f9ac 	bl	2eab2 <__mcmp>
    475a:	2800      	cmp	r0, #0
    475c:	dcb2      	bgt.n	46c4 <_dtoa_r+0xac4>
    475e:	d102      	bne.n	4766 <_dtoa_r+0xb66>
    4760:	9b08      	ldr	r3, [sp, #32]
    4762:	07db      	lsls	r3, r3, #31
    4764:	d4ae      	bmi.n	46c4 <_dtoa_r+0xac4>
    4766:	463b      	mov	r3, r7
    4768:	461f      	mov	r7, r3
    476a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    476e:	2a30      	cmp	r2, #48	; 0x30
    4770:	d0fa      	beq.n	4768 <_dtoa_r+0xb68>
    4772:	e6f9      	b.n	4568 <_dtoa_r+0x968>
    4774:	9a03      	ldr	r2, [sp, #12]
    4776:	429a      	cmp	r2, r3
    4778:	d1a5      	bne.n	46c6 <_dtoa_r+0xac6>
    477a:	f10a 0a01 	add.w	sl, sl, #1
    477e:	2331      	movs	r3, #49	; 0x31
    4780:	e779      	b.n	4676 <_dtoa_r+0xa76>
    4782:	4b14      	ldr	r3, [pc, #80]	; (47d4 <_dtoa_r+0xbd4>)
    4784:	f7ff baa7 	b.w	3cd6 <_dtoa_r+0xd6>
    4788:	9b26      	ldr	r3, [sp, #152]	; 0x98
    478a:	2b00      	cmp	r3, #0
    478c:	f47f aa80 	bne.w	3c90 <_dtoa_r+0x90>
    4790:	4b11      	ldr	r3, [pc, #68]	; (47d8 <_dtoa_r+0xbd8>)
    4792:	f7ff baa0 	b.w	3cd6 <_dtoa_r+0xd6>
    4796:	f1b9 0f00 	cmp.w	r9, #0
    479a:	dc03      	bgt.n	47a4 <_dtoa_r+0xba4>
    479c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    479e:	2b02      	cmp	r3, #2
    47a0:	f73f aecb 	bgt.w	453a <_dtoa_r+0x93a>
    47a4:	9f03      	ldr	r7, [sp, #12]
    47a6:	4621      	mov	r1, r4
    47a8:	4658      	mov	r0, fp
    47aa:	f02a f8ae 	bl	2e90a <quorem>
    47ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
    47b2:	f807 3b01 	strb.w	r3, [r7], #1
    47b6:	9a03      	ldr	r2, [sp, #12]
    47b8:	1aba      	subs	r2, r7, r2
    47ba:	4591      	cmp	r9, r2
    47bc:	ddba      	ble.n	4734 <_dtoa_r+0xb34>
    47be:	4659      	mov	r1, fp
    47c0:	2300      	movs	r3, #0
    47c2:	220a      	movs	r2, #10
    47c4:	4628      	mov	r0, r5
    47c6:	f021 ff97 	bl	266f8 <__multadd>
    47ca:	4683      	mov	fp, r0
    47cc:	e7eb      	b.n	47a6 <_dtoa_r+0xba6>
    47ce:	bf00      	nop
    47d0:	00033f4d 	.word	0x00033f4d
    47d4:	00032122 	.word	0x00032122
    47d8:	00033ecf 	.word	0x00033ecf

000047dc <gatt_write>:

    // SET_FLAG(flag_write_complete);
}

static void gatt_write(uint16_t handle, char packet[14])
{
    47dc:	b530      	push	{r4, r5, lr}
    47de:	b087      	sub	sp, #28
    static struct bt_gatt_write_params write_params;
    // int err;

    printk("%u,%u,%u,%c%c%c%c%c%c\n", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], packet[8]);
    47e0:	7a0b      	ldrb	r3, [r1, #8]
    47e2:	9305      	str	r3, [sp, #20]
    47e4:	79cb      	ldrb	r3, [r1, #7]
    47e6:	9304      	str	r3, [sp, #16]
    47e8:	798b      	ldrb	r3, [r1, #6]
    47ea:	9303      	str	r3, [sp, #12]
    47ec:	794b      	ldrb	r3, [r1, #5]
    47ee:	9302      	str	r3, [sp, #8]
    47f0:	790b      	ldrb	r3, [r1, #4]
    47f2:	9301      	str	r3, [sp, #4]
    47f4:	78cb      	ldrb	r3, [r1, #3]
    47f6:	9300      	str	r3, [sp, #0]
    47f8:	788b      	ldrb	r3, [r1, #2]
    47fa:	784a      	ldrb	r2, [r1, #1]
{
    47fc:	4605      	mov	r5, r0
    47fe:	460c      	mov	r4, r1
    printk("%u,%u,%u,%c%c%c%c%c%c\n", packet[0], packet[1], packet[2], packet[3], packet[4], packet[5], packet[6], packet[7], packet[8]);
    4800:	480b      	ldr	r0, [pc, #44]	; (4830 <gatt_write+0x54>)
    4802:	7809      	ldrb	r1, [r1, #0]
    4804:	f023 fbd0 	bl	27fa8 <printk>

    // printk("Writing to ahu\n");
    write_params.data = packet;
    4808:	490a      	ldr	r1, [pc, #40]	; (4834 <gatt_write+0x58>)
    write_params.length = 14 * sizeof(char);
    480a:	230e      	movs	r3, #14
    480c:	818b      	strh	r3, [r1, #12]

    write_params.func = gatt_write_cb;
    480e:	4b0a      	ldr	r3, [pc, #40]	; (4838 <gatt_write+0x5c>)
    4810:	600b      	str	r3, [r1, #0]
    write_params.handle = handle;

    // UNSET_FLAG(flag_write_complete);

    if (bt_gatt_write(g_conn, &write_params) != 0)
    4812:	4b0a      	ldr	r3, [pc, #40]	; (483c <gatt_write+0x60>)
    write_params.data = packet;
    4814:	608c      	str	r4, [r1, #8]
    if (bt_gatt_write(g_conn, &write_params) != 0)
    4816:	6818      	ldr	r0, [r3, #0]
    write_params.handle = handle;
    4818:	808d      	strh	r5, [r1, #4]
    if (bt_gatt_write(g_conn, &write_params) != 0)
    481a:	f009 ffd9 	bl	e7d0 <bt_gatt_write>
    481e:	b128      	cbz	r0, 482c <gatt_write+0x50>
    {
        printk("fail\n");
    4820:	4807      	ldr	r0, [pc, #28]	; (4840 <gatt_write+0x64>)
    }
}
    4822:	b007      	add	sp, #28
    4824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("fail\n");
    4828:	f023 bbbe 	b.w	27fa8 <printk>
}
    482c:	b007      	add	sp, #28
    482e:	bd30      	pop	{r4, r5, pc}
    4830:	0003142c 	.word	0x0003142c
    4834:	200021a4 	.word	0x200021a4
    4838:	000048f9 	.word	0x000048f9
    483c:	200021a0 	.word	0x200021a0
    4840:	00031443 	.word	0x00031443

00004844 <read_ahu_ch>:
{
    4844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset,
    4846:	240e      	movs	r4, #14
    4848:	9402      	str	r4, [sp, #8]
    484a:	4c04      	ldr	r4, [pc, #16]	; (485c <read_ahu_ch+0x18>)
    484c:	9401      	str	r4, [sp, #4]
    484e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    4852:	9400      	str	r4, [sp, #0]
    4854:	f027 f99a 	bl	2bb8c <bt_gatt_attr_read>
}
    4858:	b004      	add	sp, #16
    485a:	bd10      	pop	{r4, pc}
    485c:	20003990 	.word	0x20003990

00004860 <bt_ready>:
{
    4860:	b570      	push	{r4, r5, r6, lr}
    err = bt_enable(NULL);
    4862:	2000      	movs	r0, #0
{
    4864:	b088      	sub	sp, #32
    err = bt_enable(NULL);
    4866:	f005 fa13 	bl	9c90 <bt_enable>
    if (err)
    486a:	4606      	mov	r6, r0
    486c:	b130      	cbz	r0, 487c <bt_ready+0x1c>
        printk("Bluetooth init failed (err %d)\n", err);
    486e:	4601      	mov	r1, r0
    4870:	4810      	ldr	r0, [pc, #64]	; (48b4 <bt_ready+0x54>)
}
    4872:	b008      	add	sp, #32
    4874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Bluetooth init failed (err %d)\n", err);
    4878:	f023 bb96 	b.w	27fa8 <printk>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    487c:	4d0e      	ldr	r5, [pc, #56]	; (48b8 <bt_ready+0x58>)
    printk("Bluetooth initialized\n");
    487e:	480f      	ldr	r0, [pc, #60]	; (48bc <bt_ready+0x5c>)
    4880:	f023 fb92 	bl	27fa8 <printk>
    err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    4884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    4886:	ac03      	add	r4, sp, #12
    4888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    488a:	682b      	ldr	r3, [r5, #0]
    488c:	6023      	str	r3, [r4, #0]
    488e:	490c      	ldr	r1, [pc, #48]	; (48c0 <bt_ready+0x60>)
    4890:	9600      	str	r6, [sp, #0]
    4892:	4633      	mov	r3, r6
    4894:	2202      	movs	r2, #2
    4896:	a803      	add	r0, sp, #12
    4898:	f006 f8e2 	bl	aa60 <bt_le_adv_start>
    if (err)
    489c:	4601      	mov	r1, r0
    489e:	b120      	cbz	r0, 48aa <bt_ready+0x4a>
        printk("Advertising failed to start (err %d)\n", err);
    48a0:	4808      	ldr	r0, [pc, #32]	; (48c4 <bt_ready+0x64>)
    48a2:	f023 fb81 	bl	27fa8 <printk>
}
    48a6:	b008      	add	sp, #32
    48a8:	bd70      	pop	{r4, r5, r6, pc}
    printk("Advertising successfully started\n");
    48aa:	4807      	ldr	r0, [pc, #28]	; (48c8 <bt_ready+0x68>)
    48ac:	f023 fb7c 	bl	27fa8 <printk>
    48b0:	e7f9      	b.n	48a6 <bt_ready+0x46>
    48b2:	bf00      	nop
    48b4:	00031449 	.word	0x00031449
    48b8:	0002f650 	.word	0x0002f650
    48bc:	00031469 	.word	0x00031469
    48c0:	0002f838 	.word	0x0002f838
    48c4:	00031480 	.word	0x00031480
    48c8:	000314a6 	.word	0x000314a6

000048cc <disconnected>:
{
    48cc:	b508      	push	{r3, lr}
    printk("Disconnected (reason 0x%02x)\n", reason);
    48ce:	4807      	ldr	r0, [pc, #28]	; (48ec <disconnected+0x20>)
    48d0:	f023 fb6a 	bl	27fa8 <printk>
    ble_connected = false;
    48d4:	4b06      	ldr	r3, [pc, #24]	; (48f0 <disconnected+0x24>)
    48d6:	2200      	movs	r2, #0
    48d8:	701a      	strb	r2, [r3, #0]
    bt_ready();
    48da:	f7ff ffc1 	bl	4860 <bt_ready>
    bt_conn_unref(g_conn);
    48de:	4b05      	ldr	r3, [pc, #20]	; (48f4 <disconnected+0x28>)
    48e0:	6818      	ldr	r0, [r3, #0]
}
    48e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bt_conn_unref(g_conn);
    48e6:	f025 bfb0 	b.w	2a84a <bt_conn_unref>
    48ea:	bf00      	nop
    48ec:	000314c8 	.word	0x000314c8
    48f0:	2000399e 	.word	0x2000399e
    48f4:	200021a0 	.word	0x200021a0

000048f8 <gatt_write_cb>:
{
    48f8:	b510      	push	{r4, lr}
    48fa:	4614      	mov	r4, r2
    if (err != BT_ATT_ERR_SUCCESS)
    48fc:	b111      	cbz	r1, 4904 <gatt_write_cb+0xc>
        printk("Write failed: 0x%02X\n", err);
    48fe:	4805      	ldr	r0, [pc, #20]	; (4914 <gatt_write_cb+0x1c>)
    4900:	f023 fb52 	bl	27fa8 <printk>
__ssp_bos_icheck3(memset, void *, int)
    4904:	4620      	mov	r0, r4
    4906:	2210      	movs	r2, #16
}
    4908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    490c:	2100      	movs	r1, #0
    490e:	f029 be4b 	b.w	2e5a8 <memset>
    4912:	bf00      	nop
    4914:	000314e6 	.word	0x000314e6

00004918 <discover_func>:
{
    4918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    491c:	4680      	mov	r8, r0
    491e:	b08b      	sub	sp, #44	; 0x2c
    4920:	4614      	mov	r4, r2
    if (attr == NULL)
    4922:	460d      	mov	r5, r1
    4924:	b979      	cbnz	r1, 4946 <discover_func+0x2e>
        if (ahu_handle == 0)
    4926:	4b37      	ldr	r3, [pc, #220]	; (4a04 <discover_func+0xec>)
    4928:	881b      	ldrh	r3, [r3, #0]
    492a:	b913      	cbnz	r3, 4932 <discover_func+0x1a>
            printk("Did not discover ahu (%x)", ahu_handle);
    492c:	4836      	ldr	r0, [pc, #216]	; (4a08 <discover_func+0xf0>)
    492e:	f023 fb3b 	bl	27fa8 <printk>
    4932:	2214      	movs	r2, #20
    4934:	2100      	movs	r1, #0
    4936:	4620      	mov	r0, r4
    4938:	f029 fe36 	bl	2e5a8 <memset>
        return BT_GATT_ITER_STOP;
    493c:	2600      	movs	r6, #0
}
    493e:	4630      	mov	r0, r6
    4940:	b00b      	add	sp, #44	; 0x2c
    4942:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    4946:	4b31      	ldr	r3, [pc, #196]	; (4a0c <discover_func+0xf4>)
    4948:	f3bf 8f5b 	dmb	ish
    494c:	2201      	movs	r2, #1
    494e:	e853 1f00 	ldrex	r1, [r3]
    4952:	e843 2000 	strex	r0, r2, [r3]
    4956:	2800      	cmp	r0, #0
    4958:	d1f9      	bne.n	494e <discover_func+0x36>
    495a:	f3bf 8f5b 	dmb	ish
    printk("[ATTRIBUTE] handle %u\n", attr->handle);
    495e:	482c      	ldr	r0, [pc, #176]	; (4a10 <discover_func+0xf8>)
    4960:	8a29      	ldrh	r1, [r5, #16]
    4962:	f023 fb21 	bl	27fa8 <printk>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    4966:	7c26      	ldrb	r6, [r4, #16]
    4968:	bb56      	cbnz	r6, 49c0 <discover_func+0xa8>
        bt_uuid_cmp(params->uuid, AHU_UUID) == 0)
    496a:	4b2a      	ldr	r3, [pc, #168]	; (4a14 <discover_func+0xfc>)
    496c:	f8d4 c000 	ldr.w	ip, [r4]
    4970:	466a      	mov	r2, sp
    4972:	f103 0910 	add.w	r9, r3, #16
    4976:	4696      	mov	lr, r2
    4978:	6818      	ldr	r0, [r3, #0]
    497a:	6859      	ldr	r1, [r3, #4]
    497c:	4617      	mov	r7, r2
    497e:	c703      	stmia	r7!, {r0, r1}
    4980:	3308      	adds	r3, #8
    4982:	454b      	cmp	r3, r9
    4984:	463a      	mov	r2, r7
    4986:	d1f7      	bne.n	4978 <discover_func+0x60>
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	703b      	strb	r3, [r7, #0]
    498c:	4671      	mov	r1, lr
    498e:	4660      	mov	r0, ip
    4990:	f025 fafc 	bl	29f8c <bt_uuid_cmp>
    if (params->type == BT_GATT_DISCOVER_PRIMARY &&
    4994:	4607      	mov	r7, r0
    4996:	b998      	cbnz	r0, 49c0 <discover_func+0xa8>
        printk("Found test service\n");
    4998:	481f      	ldr	r0, [pc, #124]	; (4a18 <discover_func+0x100>)
    499a:	f023 fb05 	bl	27fa8 <printk>
        params->start_handle = attr->handle + 1;
    499e:	8a2b      	ldrh	r3, [r5, #16]
        params->uuid = NULL;
    49a0:	6027      	str	r7, [r4, #0]
        params->start_handle = attr->handle + 1;
    49a2:	3301      	adds	r3, #1
    49a4:	8123      	strh	r3, [r4, #8]
        params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    49a6:	2303      	movs	r3, #3
        err = bt_gatt_discover(conn, params);
    49a8:	4621      	mov	r1, r4
        params->type = BT_GATT_DISCOVER_CHARACTERISTIC;
    49aa:	7423      	strb	r3, [r4, #16]
        err = bt_gatt_discover(conn, params);
    49ac:	4640      	mov	r0, r8
    49ae:	f009 fb29 	bl	e004 <bt_gatt_discover>
        if (err != 0)
    49b2:	4601      	mov	r1, r0
    49b4:	2800      	cmp	r0, #0
    49b6:	d0c2      	beq.n	493e <discover_func+0x26>
            printk("Discover failed (err %d)\n", err);
    49b8:	4818      	ldr	r0, [pc, #96]	; (4a1c <discover_func+0x104>)
    49ba:	f023 faf5 	bl	27fa8 <printk>
        return BT_GATT_ITER_STOP;
    49be:	e7be      	b.n	493e <discover_func+0x26>
    else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC)
    49c0:	7c23      	ldrb	r3, [r4, #16]
    49c2:	2b03      	cmp	r3, #3
    49c4:	d11b      	bne.n	49fe <discover_func+0xe6>
        struct bt_gatt_chrc *chrc = (struct bt_gatt_chrc *)attr->user_data;
    49c6:	68ed      	ldr	r5, [r5, #12]
        if (bt_uuid_cmp(chrc->uuid, ACU_CH_UUID) == 0)
    49c8:	4b15      	ldr	r3, [pc, #84]	; (4a20 <discover_func+0x108>)
    49ca:	682e      	ldr	r6, [r5, #0]
    49cc:	aa05      	add	r2, sp, #20
    49ce:	f103 0c10 	add.w	ip, r3, #16
    49d2:	4617      	mov	r7, r2
    49d4:	6818      	ldr	r0, [r3, #0]
    49d6:	6859      	ldr	r1, [r3, #4]
    49d8:	4614      	mov	r4, r2
    49da:	c403      	stmia	r4!, {r0, r1}
    49dc:	3308      	adds	r3, #8
    49de:	4563      	cmp	r3, ip
    49e0:	4622      	mov	r2, r4
    49e2:	d1f7      	bne.n	49d4 <discover_func+0xbc>
    49e4:	781b      	ldrb	r3, [r3, #0]
    49e6:	7023      	strb	r3, [r4, #0]
    49e8:	4639      	mov	r1, r7
    49ea:	4630      	mov	r0, r6
    49ec:	f025 face 	bl	29f8c <bt_uuid_cmp>
    49f0:	b928      	cbnz	r0, 49fe <discover_func+0xe6>
            printk("Found chrc\n");
    49f2:	480c      	ldr	r0, [pc, #48]	; (4a24 <discover_func+0x10c>)
    49f4:	f023 fad8 	bl	27fa8 <printk>
            ahu_handle = chrc->value_handle;
    49f8:	4b02      	ldr	r3, [pc, #8]	; (4a04 <discover_func+0xec>)
    49fa:	88aa      	ldrh	r2, [r5, #4]
    49fc:	801a      	strh	r2, [r3, #0]
    return BT_GATT_ITER_CONTINUE;
    49fe:	2601      	movs	r6, #1
    4a00:	e79d      	b.n	493e <discover_func+0x26>
    4a02:	bf00      	nop
    4a04:	20003958 	.word	0x20003958
    4a08:	000314fc 	.word	0x000314fc
    4a0c:	2000219c 	.word	0x2000219c
    4a10:	00031516 	.word	0x00031516
    4a14:	0002f664 	.word	0x0002f664
    4a18:	0003152d 	.word	0x0003152d
    4a1c:	00031541 	.word	0x00031541
    4a20:	0002f675 	.word	0x0002f675
    4a24:	0003155b 	.word	0x0003155b

00004a28 <auth_passkey_display>:
{
    4a28:	b570      	push	{r4, r5, r6, lr}
    4a2a:	b092      	sub	sp, #72	; 0x48
    4a2c:	460e      	mov	r6, r1
    bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    4a2e:	f025 ffd4 	bl	2a9da <bt_conn_get_dst>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    4a32:	7803      	ldrb	r3, [r0, #0]
    4a34:	4604      	mov	r4, r0
    4a36:	ad07      	add	r5, sp, #28
    4a38:	2b03      	cmp	r3, #3
    4a3a:	d825      	bhi.n	4a88 <auth_passkey_display+0x60>
    4a3c:	e8df f003 	tbb	[pc, r3]
    4a40:	22201e02 	.word	0x22201e02
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    4a44:	4913      	ldr	r1, [pc, #76]	; (4a94 <auth_passkey_display+0x6c>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    4a46:	4628      	mov	r0, r5
    4a48:	f029 ff20 	bl	2e88c <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    4a4c:	79a3      	ldrb	r3, [r4, #6]
    4a4e:	9505      	str	r5, [sp, #20]
    4a50:	7862      	ldrb	r2, [r4, #1]
    4a52:	9204      	str	r2, [sp, #16]
    4a54:	78a2      	ldrb	r2, [r4, #2]
    4a56:	9203      	str	r2, [sp, #12]
    4a58:	78e2      	ldrb	r2, [r4, #3]
    4a5a:	9202      	str	r2, [sp, #8]
    4a5c:	7922      	ldrb	r2, [r4, #4]
    4a5e:	9201      	str	r2, [sp, #4]
    4a60:	7962      	ldrb	r2, [r4, #5]
    4a62:	9200      	str	r2, [sp, #0]
    4a64:	211e      	movs	r1, #30
    4a66:	4a0c      	ldr	r2, [pc, #48]	; (4a98 <auth_passkey_display+0x70>)
    4a68:	a80a      	add	r0, sp, #40	; 0x28
    4a6a:	f023 faaa 	bl	27fc2 <snprintk>
    printk("Passkey for %s: %06u\n", addr, passkey);
    4a6e:	480b      	ldr	r0, [pc, #44]	; (4a9c <auth_passkey_display+0x74>)
    4a70:	4632      	mov	r2, r6
    4a72:	a90a      	add	r1, sp, #40	; 0x28
    4a74:	f023 fa98 	bl	27fa8 <printk>
}
    4a78:	b012      	add	sp, #72	; 0x48
    4a7a:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    4a7c:	4908      	ldr	r1, [pc, #32]	; (4aa0 <auth_passkey_display+0x78>)
    4a7e:	e7e2      	b.n	4a46 <auth_passkey_display+0x1e>
		strcpy(type, "public-id");
    4a80:	4908      	ldr	r1, [pc, #32]	; (4aa4 <auth_passkey_display+0x7c>)
    4a82:	e7e0      	b.n	4a46 <auth_passkey_display+0x1e>
		strcpy(type, "random-id");
    4a84:	4908      	ldr	r1, [pc, #32]	; (4aa8 <auth_passkey_display+0x80>)
    4a86:	e7de      	b.n	4a46 <auth_passkey_display+0x1e>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    4a88:	4a08      	ldr	r2, [pc, #32]	; (4aac <auth_passkey_display+0x84>)
    4a8a:	210a      	movs	r1, #10
    4a8c:	4628      	mov	r0, r5
    4a8e:	f023 fa98 	bl	27fc2 <snprintk>
		break;
    4a92:	e7db      	b.n	4a4c <auth_passkey_display+0x24>
    4a94:	00031567 	.word	0x00031567
    4a98:	00031589 	.word	0x00031589
    4a9c:	000315ac 	.word	0x000315ac
    4aa0:	0003156e 	.word	0x0003156e
    4aa4:	00031575 	.word	0x00031575
    4aa8:	0003157f 	.word	0x0003157f
    4aac:	000333a9 	.word	0x000333a9

00004ab0 <connected>:
{
    4ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    4ab2:	4d14      	ldr	r5, [pc, #80]	; (4b04 <connected+0x54>)
    4ab4:	4604      	mov	r4, r0
    if (err)
    4ab6:	b131      	cbz	r1, 4ac6 <connected+0x16>
        printk("Connection failed (err 0x%02x)\n", err);
    4ab8:	4813      	ldr	r0, [pc, #76]	; (4b08 <connected+0x58>)
    4aba:	f023 fa75 	bl	27fa8 <printk>
        ble_connected = false;
    4abe:	2300      	movs	r3, #0
    4ac0:	702b      	strb	r3, [r5, #0]
}
    4ac2:	b003      	add	sp, #12
    4ac4:	bd30      	pop	{r4, r5, pc}
        printk("BLE Connected to Device\n");
    4ac6:	4811      	ldr	r0, [pc, #68]	; (4b0c <connected+0x5c>)
    4ac8:	f023 fa6e 	bl	27fa8 <printk>
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    4acc:	4a10      	ldr	r2, [pc, #64]	; (4b10 <connected+0x60>)
        ble_connected = true;
    4ace:	2301      	movs	r3, #1
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    4ad0:	f8d2 0036 	ldr.w	r0, [r2, #54]	; 0x36
    4ad4:	f8d2 103a 	ldr.w	r1, [r2, #58]	; 0x3a
        ble_connected = true;
    4ad8:	702b      	strb	r3, [r5, #0]
        struct bt_le_conn_param *param = BT_LE_CONN_PARAM(6, 6, 0, 400);
    4ada:	466b      	mov	r3, sp
    4adc:	c303      	stmia	r3!, {r0, r1}
        g_conn = bt_conn_ref(conn);
    4ade:	4620      	mov	r0, r4
    4ae0:	f025 fe98 	bl	2a814 <bt_conn_ref>
    4ae4:	4b0b      	ldr	r3, [pc, #44]	; (4b14 <connected+0x64>)
        if (bt_conn_le_param_update(conn, param) < 0)
    4ae6:	4669      	mov	r1, sp
        g_conn = bt_conn_ref(conn);
    4ae8:	6018      	str	r0, [r3, #0]
        if (bt_conn_le_param_update(conn, param) < 0)
    4aea:	4620      	mov	r0, r4
    4aec:	f025 ffd8 	bl	2aaa0 <bt_conn_le_param_update>
    4af0:	2800      	cmp	r0, #0
    4af2:	dae6      	bge.n	4ac2 <connected+0x12>
                printk("Connection Update Error\n");
    4af4:	4c08      	ldr	r4, [pc, #32]	; (4b18 <connected+0x68>)
    4af6:	4620      	mov	r0, r4
    4af8:	f023 fa56 	bl	27fa8 <printk>
                k_msleep(10);
    4afc:	200a      	movs	r0, #10
    4afe:	f023 f9a3 	bl	27e48 <k_msleep.isra.0>
            while (1)
    4b02:	e7f8      	b.n	4af6 <connected+0x46>
    4b04:	2000399e 	.word	0x2000399e
    4b08:	000315c2 	.word	0x000315c2
    4b0c:	000315e2 	.word	0x000315e2
    4b10:	0002f650 	.word	0x0002f650
    4b14:	200021a0 	.word	0x200021a0
    4b18:	000315fb 	.word	0x000315fb

00004b1c <receive_ahu>:

static ssize_t receive_ahu(struct bt_conn *conn,
                           const struct bt_gatt_attr *attr,
                           const void *buf, uint16_t len,
                           uint16_t offset, uint8_t flags)
{
    4b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    4b1e:	b085      	sub	sp, #20
    4b20:	461c      	mov	r4, r3
    printk("FIRST\n");
    4b22:	482b      	ldr	r0, [pc, #172]	; (4bd0 <receive_ahu+0xb4>)
{
    4b24:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
    4b28:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
    4b2c:	4616      	mov	r6, r2
    printk("FIRST\n");
    4b2e:	f023 fa3b 	bl	27fa8 <printk>
    if (len > sizeof(ahu_packet))
    4b32:	2c0e      	cmp	r4, #14
    4b34:	d907      	bls.n	4b46 <receive_ahu+0x2a>
    {
        printk("Invalid chrc length\n");
    4b36:	4827      	ldr	r0, [pc, #156]	; (4bd4 <receive_ahu+0xb8>)
    4b38:	f023 fa36 	bl	27fa8 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    4b3c:	f06f 040c 	mvn.w	r4, #12
    {
        printk("add to queue %u\n", data.id);
    }

    return len;
}
    4b40:	4620      	mov	r0, r4
    4b42:	b005      	add	sp, #20
    4b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (offset + len > sizeof(ahu_packet))
    4b46:	193b      	adds	r3, r7, r4
    4b48:	2b0e      	cmp	r3, #14
    4b4a:	dd05      	ble.n	4b58 <receive_ahu+0x3c>
        printk("Invalid chrc offset and length\n");
    4b4c:	4822      	ldr	r0, [pc, #136]	; (4bd8 <receive_ahu+0xbc>)
    4b4e:	f023 fa2b 	bl	27fa8 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    4b52:	f06f 0406 	mvn.w	r4, #6
    4b56:	e7f3      	b.n	4b40 <receive_ahu+0x24>
    if (flags != 0)
    4b58:	b12d      	cbz	r5, 4b66 <receive_ahu+0x4a>
        printk("Invalid flags");
    4b5a:	4820      	ldr	r0, [pc, #128]	; (4bdc <receive_ahu+0xc0>)
    4b5c:	f023 fa24 	bl	27fa8 <printk>
        return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    4b60:	f06f 040d 	mvn.w	r4, #13
    4b64:	e7ec      	b.n	4b40 <receive_ahu+0x24>
    (void)memcpy(ahu_packet + offset, buf, len);
    4b66:	4d1e      	ldr	r5, [pc, #120]	; (4be0 <receive_ahu+0xc4>)
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    4b68:	4622      	mov	r2, r4
    4b6a:	4631      	mov	r1, r6
    4b6c:	19e8      	adds	r0, r5, r7
    4b6e:	f029 fcfa 	bl	2e566 <memcpy>
    data.preamble = ahu_packet[0];
    4b72:	782b      	ldrb	r3, [r5, #0]
    4b74:	f88d 3000 	strb.w	r3, [sp]
    data.typelen = ahu_packet[1];
    4b78:	786b      	ldrb	r3, [r5, #1]
    4b7a:	f88d 3001 	strb.w	r3, [sp, #1]
    data.id = ahu_packet[2];
    4b7e:	78ab      	ldrb	r3, [r5, #2]
    4b80:	f88d 3002 	strb.w	r3, [sp, #2]
    memcpy(data.data, &ahu_packet[3], 11 * sizeof(char));
    4b84:	f8d5 3003 	ldr.w	r3, [r5, #3]
    4b88:	f8cd 3003 	str.w	r3, [sp, #3]
    4b8c:	f8d5 3007 	ldr.w	r3, [r5, #7]
    4b90:	f8cd 3007 	str.w	r3, [sp, #7]
    4b94:	f8b5 300b 	ldrh.w	r3, [r5, #11]
    4b98:	f8ad 300b 	strh.w	r3, [sp, #11]
    printk("%s\n", data.data);
    4b9c:	4811      	ldr	r0, [pc, #68]	; (4be4 <receive_ahu+0xc8>)
    4b9e:	7b6b      	ldrb	r3, [r5, #13]
    4ba0:	f88d 300d 	strb.w	r3, [sp, #13]
    4ba4:	f10d 0103 	add.w	r1, sp, #3
    4ba8:	f023 f9fe 	bl	27fa8 <printk>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_PUT);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_put(msgq, data, timeout);
    4bac:	480e      	ldr	r0, [pc, #56]	; (4be8 <receive_ahu+0xcc>)
    4bae:	2200      	movs	r2, #0
    4bb0:	2300      	movs	r3, #0
    4bb2:	4669      	mov	r1, sp
    4bb4:	f01f fee6 	bl	24984 <z_impl_k_msgq_put>
    if (k_msgq_put(&command_msgq, &data, K_NO_WAIT) != 0)
    4bb8:	b118      	cbz	r0, 4bc2 <receive_ahu+0xa6>
        k_msgq_purge(&lps_msgq);
    4bba:	480c      	ldr	r0, [pc, #48]	; (4bec <receive_ahu+0xd0>)
    4bbc:	f023 f942 	bl	27e44 <k_msgq_purge>
    4bc0:	e7be      	b.n	4b40 <receive_ahu+0x24>
        printk("add to queue %u\n", data.id);
    4bc2:	f89d 1002 	ldrb.w	r1, [sp, #2]
    4bc6:	480a      	ldr	r0, [pc, #40]	; (4bf0 <receive_ahu+0xd4>)
    4bc8:	f023 f9ee 	bl	27fa8 <printk>
    return len;
    4bcc:	e7b8      	b.n	4b40 <receive_ahu+0x24>
    4bce:	bf00      	nop
    4bd0:	00031614 	.word	0x00031614
    4bd4:	0003161b 	.word	0x0003161b
    4bd8:	00031630 	.word	0x00031630
    4bdc:	00031650 	.word	0x00031650
    4be0:	20003990 	.word	0x20003990
    4be4:	0003401d 	.word	0x0003401d
    4be8:	20000cc4 	.word	0x20000cc4
    4bec:	20000cf4 	.word	0x20000cf4
    4bf0:	0003165e 	.word	0x0003165e

00004bf4 <process_hts221>:
{
    4bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    packet.preamble = 0xAA;
    4bf6:	f242 53aa 	movw	r3, #9642	; 0x25aa
    4bfa:	f8ad 3000 	strh.w	r3, [sp]
    packet.id = ht;
    4bfe:	f88d 0002 	strb.w	r0, [sp, #2]
    packet.data = read_hts(ht);
    4c02:	f7fc fa51 	bl	10a8 <read_hts>
    4c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4c0a:	4806      	ldr	r0, [pc, #24]	; (4c24 <process_hts221+0x30>)
    4c0c:	2200      	movs	r2, #0
    4c0e:	2300      	movs	r3, #0
    4c10:	4669      	mov	r1, sp
    4c12:	f01f feb7 	bl	24984 <z_impl_k_msgq_put>
    if (k_msgq_put(&tosend_msgq, &packet, K_NO_WAIT) != 0)
    4c16:	b110      	cbz	r0, 4c1e <process_hts221+0x2a>
        k_msgq_purge(&tosend_msgq);
    4c18:	4802      	ldr	r0, [pc, #8]	; (4c24 <process_hts221+0x30>)
    4c1a:	f023 f913 	bl	27e44 <k_msgq_purge>
}
    4c1e:	b005      	add	sp, #20
    4c20:	f85d fb04 	ldr.w	pc, [sp], #4
    4c24:	20000d24 	.word	0x20000d24

00004c28 <process_rgb>:
{
    4c28:	b530      	push	{r4, r5, lr}
    4c2a:	b089      	sub	sp, #36	; 0x24
    4c2c:	466c      	mov	r4, sp
    4c2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (rgb_data[0])
    4c32:	f89d 0003 	ldrb.w	r0, [sp, #3]
    rgb_data[1] = data.data[1];
    4c36:	f89d 5004 	ldrb.w	r5, [sp, #4]
    rgb_data[2] = data.data[2];
    4c3a:	f89d 4005 	ldrb.w	r4, [sp, #5]
    if (rgb_data[0])
    4c3e:	b110      	cbz	r0, 4c46 <process_rgb+0x1e>
        ret = toggle_rgb(RGB_RED);
    4c40:	2000      	movs	r0, #0
    4c42:	f000 fa7d 	bl	5140 <toggle_rgb>
    if (rgb_data[1])
    4c46:	b12d      	cbz	r5, 4c54 <process_rgb+0x2c>
        printk("hi green");
    4c48:	4811      	ldr	r0, [pc, #68]	; (4c90 <process_rgb+0x68>)
    4c4a:	f023 f9ad 	bl	27fa8 <printk>
        ret = toggle_rgb(RGB_GREEN);
    4c4e:	2001      	movs	r0, #1
    4c50:	f000 fa76 	bl	5140 <toggle_rgb>
    if (rgb_data[2])
    4c54:	b114      	cbz	r4, 4c5c <process_rgb+0x34>
        ret = toggle_rgb(RGB_BLUE);
    4c56:	2002      	movs	r0, #2
    4c58:	f000 fa72 	bl	5140 <toggle_rgb>
    packet.preamble = 0xAA;
    4c5c:	f642 33aa 	movw	r3, #11178	; 0x2baa
    4c60:	f8ad 3010 	strh.w	r3, [sp, #16]
    packet.id = DEVICE_RGB;
    4c64:	2308      	movs	r3, #8
    4c66:	f88d 3012 	strb.w	r3, [sp, #18]
    packet.data = (float)ret;
    4c6a:	f7fb ff31 	bl	ad0 <__aeabi_i2f>
    4c6e:	f7fb fbeb 	bl	448 <__aeabi_f2d>
    4c72:	e9cd 0106 	strd	r0, r1, [sp, #24]
    4c76:	4807      	ldr	r0, [pc, #28]	; (4c94 <process_rgb+0x6c>)
    4c78:	2200      	movs	r2, #0
    4c7a:	2300      	movs	r3, #0
    4c7c:	a904      	add	r1, sp, #16
    4c7e:	f01f fe81 	bl	24984 <z_impl_k_msgq_put>
    if (k_msgq_put(&tosend_msgq, &packet, K_NO_WAIT) != 0)
    4c82:	b110      	cbz	r0, 4c8a <process_rgb+0x62>
        k_msgq_purge(&tosend_msgq);
    4c84:	4803      	ldr	r0, [pc, #12]	; (4c94 <process_rgb+0x6c>)
    4c86:	f023 f8dd 	bl	27e44 <k_msgq_purge>
}
    4c8a:	b009      	add	sp, #36	; 0x24
    4c8c:	bd30      	pop	{r4, r5, pc}
    4c8e:	bf00      	nop
    4c90:	0003166f 	.word	0x0003166f
    4c94:	20000d24 	.word	0x20000d24

00004c98 <process_button>:
{
    4c98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    packet.preamble = 0xAA;
    4c9a:	f642 33aa 	movw	r3, #11178	; 0x2baa
    4c9e:	f8ad 3000 	strh.w	r3, [sp]
    packet.id = DEVICE_PBN;
    4ca2:	230a      	movs	r3, #10
    4ca4:	f88d 3002 	strb.w	r3, [sp, #2]
    packet.data = (float)button_get();
    4ca8:	f000 fae6 	bl	5278 <button_get>
    4cac:	f7fb ff10 	bl	ad0 <__aeabi_i2f>
    4cb0:	f7fb fbca 	bl	448 <__aeabi_f2d>
    4cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    4cb8:	4806      	ldr	r0, [pc, #24]	; (4cd4 <process_button+0x3c>)
    4cba:	2200      	movs	r2, #0
    4cbc:	2300      	movs	r3, #0
    4cbe:	4669      	mov	r1, sp
    4cc0:	f01f fe60 	bl	24984 <z_impl_k_msgq_put>
    if (k_msgq_put(&tosend_msgq, &packet, K_NO_WAIT) != 0)
    4cc4:	b110      	cbz	r0, 4ccc <process_button+0x34>
        k_msgq_purge(&tosend_msgq);
    4cc6:	4803      	ldr	r0, [pc, #12]	; (4cd4 <process_button+0x3c>)
    4cc8:	f023 f8bc 	bl	27e44 <k_msgq_purge>
}
    4ccc:	b005      	add	sp, #20
    4cce:	f85d fb04 	ldr.w	pc, [sp], #4
    4cd2:	bf00      	nop
    4cd4:	20000d24 	.word	0x20000d24

00004cd8 <thread_get_message>:

void thread_get_message(void)
{
    4cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&msgq, *(uintptr_t *)&data, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MSGQ_GET);
	}
#endif
	compiler_barrier();
	return z_impl_k_msgq_get(msgq, data, timeout);
    4cda:	4f37      	ldr	r7, [pc, #220]	; (4db8 <thread_get_message+0xe0>)
                {
                    process_button();
                }
                else if (device == DUTY)
                {
                    gatt_write(ahu_handle, ahu_packet);
    4cdc:	4d37      	ldr	r5, [pc, #220]	; (4dbc <thread_get_message+0xe4>)
    4cde:	4e38      	ldr	r6, [pc, #224]	; (4dc0 <thread_get_message+0xe8>)
{
    4ce0:	b089      	sub	sp, #36	; 0x24
    4ce2:	466c      	mov	r4, sp
    4ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4cec:	4621      	mov	r1, r4
    4cee:	4638      	mov	r0, r7
    4cf0:	f01f fe9e 	bl	24a30 <z_impl_k_msgq_get>
        if (k_msgq_get(&command_msgq, &data, K_FOREVER) == 0)
    4cf4:	4603      	mov	r3, r0
    4cf6:	2800      	cmp	r0, #0
    4cf8:	d1f3      	bne.n	4ce2 <thread_get_message+0xa>
            if (data.preamble == 0xAA)
    4cfa:	f89d 2000 	ldrb.w	r2, [sp]
    4cfe:	2aaa      	cmp	r2, #170	; 0xaa
    4d00:	d1ef      	bne.n	4ce2 <thread_get_message+0xa>
                uint8_t device = data.id;
    4d02:	f89d 0002 	ldrb.w	r0, [sp, #2]
                if (device == DEVICE_TEM || device == DEVICE_HUM)
    4d06:	1e42      	subs	r2, r0, #1
    4d08:	2a01      	cmp	r2, #1
    4d0a:	d802      	bhi.n	4d12 <thread_get_message+0x3a>
                    process_hts221(device);
    4d0c:	f7ff ff72 	bl	4bf4 <process_hts221>
    4d10:	e7e7      	b.n	4ce2 <thread_get_message+0xa>
                else if (device == DEVICE_AIR)
    4d12:	2803      	cmp	r0, #3
    4d14:	d115      	bne.n	4d42 <thread_get_message+0x6a>
    packet.preamble = 0xAA;
    4d16:	f242 53aa 	movw	r3, #9642	; 0x25aa
    4d1a:	f8ad 3010 	strh.w	r3, [sp, #16]
    packet.id = DEVICE_AIR;
    4d1e:	f88d 0012 	strb.w	r0, [sp, #18]
    packet.data = read_lps();
    4d22:	f7fc fa09 	bl	1138 <read_lps>
    packet.data = read_lis(axis);
    4d26:	e9cd 0106 	strd	r0, r1, [sp, #24]
	return z_impl_k_msgq_put(msgq, data, timeout);
    4d2a:	4826      	ldr	r0, [pc, #152]	; (4dc4 <thread_get_message+0xec>)
    4d2c:	2200      	movs	r2, #0
    4d2e:	2300      	movs	r3, #0
    4d30:	a904      	add	r1, sp, #16
    4d32:	f01f fe27 	bl	24984 <z_impl_k_msgq_put>
    if (k_msgq_put(&tosend_msgq, &packet, K_NO_WAIT) != 0)
    4d36:	2800      	cmp	r0, #0
    4d38:	d0d3      	beq.n	4ce2 <thread_get_message+0xa>
        k_msgq_purge(&tosend_msgq);
    4d3a:	4822      	ldr	r0, [pc, #136]	; (4dc4 <thread_get_message+0xec>)
    4d3c:	f023 f882 	bl	27e44 <k_msgq_purge>
}
    4d40:	e7cf      	b.n	4ce2 <thread_get_message+0xa>
                else if (device == DEVICE_VOC)
    4d42:	2804      	cmp	r0, #4
    4d44:	d108      	bne.n	4d58 <thread_get_message+0x80>
    packet.preamble = 0xAA;
    4d46:	f242 53aa 	movw	r3, #9642	; 0x25aa
    4d4a:	f8ad 3010 	strh.w	r3, [sp, #16]
    packet.id = DEVICE_VOC;
    4d4e:	f88d 0012 	strb.w	r0, [sp, #18]
    packet.data = read_ccs();
    4d52:	f7fc fa31 	bl	11b8 <read_ccs>
    4d56:	e7e6      	b.n	4d26 <thread_get_message+0x4e>
                else if (device == DEVICE_ACX || device == DEVICE_ACY || device == DEVICE_ACZ)
    4d58:	1f42      	subs	r2, r0, #5
    4d5a:	2a02      	cmp	r2, #2
    4d5c:	d808      	bhi.n	4d70 <thread_get_message+0x98>
    packet.preamble = 0xAA;
    4d5e:	f242 53aa 	movw	r3, #9642	; 0x25aa
    4d62:	f8ad 3010 	strh.w	r3, [sp, #16]
    packet.id = axis;
    4d66:	f88d 0012 	strb.w	r0, [sp, #18]
    packet.data = read_lis(axis);
    4d6a:	f7fc fa51 	bl	1210 <read_lis>
    4d6e:	e7da      	b.n	4d26 <thread_get_message+0x4e>
                else if (device == DEVICE_RGB)
    4d70:	2808      	cmp	r0, #8
    4d72:	d104      	bne.n	4d7e <thread_get_message+0xa6>
                    process_rgb(data);
    4d74:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    4d78:	f7ff ff56 	bl	4c28 <process_rgb>
    4d7c:	e7b1      	b.n	4ce2 <thread_get_message+0xa>
                else if (device == DEVICE_BUZ)
    4d7e:	2809      	cmp	r0, #9
    4d80:	d10e      	bne.n	4da0 <thread_get_message+0xc8>
                    sscanf(data.data, "%d", &freq);
    4d82:	aa04      	add	r2, sp, #16
    4d84:	4910      	ldr	r1, [pc, #64]	; (4dc8 <thread_get_message+0xf0>)
                    int freq = 0;
    4d86:	9304      	str	r3, [sp, #16]
                    sscanf(data.data, "%d", &freq);
    4d88:	f10d 0003 	add.w	r0, sp, #3
    4d8c:	f021 fbb6 	bl	264fc <siscanf>
                    printk("%d", freq);
    4d90:	9904      	ldr	r1, [sp, #16]
    4d92:	480d      	ldr	r0, [pc, #52]	; (4dc8 <thread_get_message+0xf0>)
    4d94:	f023 f908 	bl	27fa8 <printk>
                    process_buzzer(freq);
    4d98:	9804      	ldr	r0, [sp, #16]
    4d9a:	f000 fa9d 	bl	52d8 <process_buzzer>
    4d9e:	e7a0      	b.n	4ce2 <thread_get_message+0xa>
                else if (device == DEVICE_PBN)
    4da0:	280a      	cmp	r0, #10
    4da2:	d102      	bne.n	4daa <thread_get_message+0xd2>
                    process_button();
    4da4:	f7ff ff78 	bl	4c98 <process_button>
    4da8:	e79b      	b.n	4ce2 <thread_get_message+0xa>
                else if (device == DUTY)
    4daa:	280b      	cmp	r0, #11
    4dac:	d199      	bne.n	4ce2 <thread_get_message+0xa>
                    gatt_write(ahu_handle, ahu_packet);
    4dae:	8828      	ldrh	r0, [r5, #0]
    4db0:	4631      	mov	r1, r6
    4db2:	f7ff fd13 	bl	47dc <gatt_write>
        if (k_msgq_get(&command_msgq, &data, K_FOREVER) == 0)
    4db6:	e794      	b.n	4ce2 <thread_get_message+0xa>
    4db8:	20000cc4 	.word	0x20000cc4
    4dbc:	20003958 	.word	0x20003958
    4dc0:	20003990 	.word	0x20003990
    4dc4:	20000d24 	.word	0x20000d24
    4dc8:	00033be4 	.word	0x00033be4

00004dcc <thread_send_message>:
        }
    }
}

void thread_send_message(void)
{
    4dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
    4dce:	4d31      	ldr	r5, [pc, #196]	; (4e94 <thread_send_message+0xc8>)

            char scu_packet[14] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, '\0'};
            scu_packet[0] = data.preamble;
            scu_packet[1] = data.typelen;
            scu_packet[2] = data.id;
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    4dd0:	4c31      	ldr	r4, [pc, #196]	; (4e98 <thread_send_message+0xcc>)
                int value = (uint8_t)data.data;
                sprintf(reading, "%-9d", value);
            }
            memcpy(&scu_packet[3], &reading, 10 * sizeof(char));

            gatt_write(ahu_handle, scu_packet);
    4dd2:	4e32      	ldr	r6, [pc, #200]	; (4e9c <thread_send_message+0xd0>)
{
    4dd4:	b08f      	sub	sp, #60	; 0x3c
    4dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4dda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dde:	a90a      	add	r1, sp, #40	; 0x28
    4de0:	4628      	mov	r0, r5
    4de2:	f01f fe25 	bl	24a30 <z_impl_k_msgq_get>
        if (k_msgq_get(&tosend_msgq, &data, K_FOREVER) == 0)
    4de6:	2800      	cmp	r0, #0
    4de8:	d144      	bne.n	4e74 <thread_send_message+0xa8>
            char scu_packet[14] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, '\0'};
    4dea:	4b2d      	ldr	r3, [pc, #180]	; (4ea0 <thread_send_message+0xd4>)
    4dec:	aa06      	add	r2, sp, #24
    4dee:	f103 0e08 	add.w	lr, r3, #8
    4df2:	4617      	mov	r7, r2
    4df4:	6818      	ldr	r0, [r3, #0]
    4df6:	6859      	ldr	r1, [r3, #4]
    4df8:	4694      	mov	ip, r2
    4dfa:	e8ac 0003 	stmia.w	ip!, {r0, r1}
    4dfe:	3308      	adds	r3, #8
    4e00:	4573      	cmp	r3, lr
    4e02:	4662      	mov	r2, ip
    4e04:	d1f6      	bne.n	4df4 <thread_send_message+0x28>
    4e06:	6818      	ldr	r0, [r3, #0]
    4e08:	889b      	ldrh	r3, [r3, #4]
    4e0a:	f8cc 0000 	str.w	r0, [ip]
    4e0e:	f8ac 3004 	strh.w	r3, [ip, #4]
            scu_packet[0] = data.preamble;
    4e12:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    4e16:	6820      	ldr	r0, [r4, #0]
    4e18:	6861      	ldr	r1, [r4, #4]
            scu_packet[0] = data.preamble;
    4e1a:	f88d 3018 	strb.w	r3, [sp, #24]
            scu_packet[1] = data.typelen;
    4e1e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
            scu_packet[2] = data.id;
    4e22:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
            scu_packet[1] = data.typelen;
    4e26:	f88d 3019 	strb.w	r3, [sp, #25]
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    4e2a:	ab03      	add	r3, sp, #12
    4e2c:	c303      	stmia	r3!, {r0, r1}
            scu_packet[2] = data.id;
    4e2e:	f88d 201a 	strb.w	r2, [sp, #26]
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    4e32:	3a08      	subs	r2, #8
            char reading[10] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    4e34:	8921      	ldrh	r1, [r4, #8]
    4e36:	8019      	strh	r1, [r3, #0]
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    4e38:	2a02      	cmp	r2, #2
                sprintf(reading, "%-9.1f", data.data);
    4e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
            if (data.id != 0x08 && data.id != 0x09 && data.id != 0x0A)
    4e3e:	d91d      	bls.n	4e7c <thread_send_message+0xb0>
                sprintf(reading, "%-9.1f", data.data);
    4e40:	e9cd 0100 	strd	r0, r1, [sp]
    4e44:	4b17      	ldr	r3, [pc, #92]	; (4ea4 <thread_send_message+0xd8>)
    4e46:	220a      	movs	r2, #10
    4e48:	2100      	movs	r1, #0
    4e4a:	a803      	add	r0, sp, #12
    4e4c:	f029 fcbf 	bl	2e7ce <__sprintf_chk>
            memcpy(&scu_packet[3], &reading, 10 * sizeof(char));
    4e50:	ab03      	add	r3, sp, #12
    4e52:	cb03      	ldmia	r3!, {r0, r1}
    4e54:	881b      	ldrh	r3, [r3, #0]
    4e56:	f8cd 001b 	str.w	r0, [sp, #27]
    4e5a:	f8cd 101f 	str.w	r1, [sp, #31]
            gatt_write(ahu_handle, scu_packet);
    4e5e:	8830      	ldrh	r0, [r6, #0]
    4e60:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
    4e64:	4639      	mov	r1, r7
    4e66:	f7ff fcb9 	bl	47dc <gatt_write>

            memset(&data, 0, sizeof(struct return_packet));
    4e6a:	2210      	movs	r2, #16
    4e6c:	2100      	movs	r1, #0
    4e6e:	a80a      	add	r0, sp, #40	; 0x28
    4e70:	f029 fb9a 	bl	2e5a8 <memset>
        }
        k_msleep(100);
    4e74:	2064      	movs	r0, #100	; 0x64
    4e76:	f022 ffe7 	bl	27e48 <k_msleep.isra.0>
        if (k_msgq_get(&tosend_msgq, &data, K_FOREVER) == 0)
    4e7a:	e7ac      	b.n	4dd6 <thread_send_message+0xa>
                int value = (uint8_t)data.data;
    4e7c:	f7fb fd4e 	bl	91c <__aeabi_d2uiz>
    4e80:	b2c0      	uxtb	r0, r0
    4e82:	9000      	str	r0, [sp, #0]
                sprintf(reading, "%-9d", value);
    4e84:	4b08      	ldr	r3, [pc, #32]	; (4ea8 <thread_send_message+0xdc>)
    4e86:	220a      	movs	r2, #10
    4e88:	2100      	movs	r1, #0
    4e8a:	a803      	add	r0, sp, #12
    4e8c:	f029 fc9f 	bl	2e7ce <__sprintf_chk>
    4e90:	e7de      	b.n	4e50 <thread_send_message+0x84>
    4e92:	bf00      	nop
    4e94:	20000d24 	.word	0x20000d24
    4e98:	0002f69c 	.word	0x0002f69c
    4e9c:	20003958 	.word	0x20003958
    4ea0:	0002f68e 	.word	0x0002f68e
    4ea4:	00031678 	.word	0x00031678
    4ea8:	0003167f 	.word	0x0003167f

00004eac <thread_ble_connect>:
 * @brief Enabled bluetooth, and sets connection callback handler, awaits
 *          central to connect to peripheral (mobile)
 *
 */
void thread_ble_connect(void)
{
    4eac:	b508      	push	{r3, lr}

    bt_ready();
    4eae:	f7ff fcd7 	bl	4860 <bt_ready>

    bt_conn_cb_register(&conn_callbacks);
    4eb2:	4805      	ldr	r0, [pc, #20]	; (4ec8 <thread_ble_connect+0x1c>)
    4eb4:	f006 fe30 	bl	bb18 <bt_conn_cb_register>
    bt_conn_auth_cb_register(&auth_cb_display);
    4eb8:	4804      	ldr	r0, [pc, #16]	; (4ecc <thread_ble_connect+0x20>)
    4eba:	f007 f851 	bl	bf60 <bt_conn_auth_cb_register>

    while (1)
    {
        k_msleep(SHORT_SLEEP_MS);
    4ebe:	2032      	movs	r0, #50	; 0x32
    4ec0:	f022 ffc2 	bl	27e48 <k_msleep.isra.0>
    while (1)
    4ec4:	e7fb      	b.n	4ebe <thread_ble_connect+0x12>
    4ec6:	bf00      	nop
    4ec8:	20000194 	.word	0x20000194
    4ecc:	20000170 	.word	0x20000170

00004ed0 <thread_ble_discover>:
    }
}

void thread_ble_discover(void *arg1, void *arg2, void *arg3)
{
    4ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int flag = 0;
    while (1)
    {
        while (!ble_connected)
    4ed4:	4f1e      	ldr	r7, [pc, #120]	; (4f50 <thread_ble_discover+0x80>)
    printk("Discovering services and characteristics\n");
    4ed6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4f54 <thread_ble_discover+0x84>
    discover_params.uuid = scu_svc_uuid;
    4eda:	4c1f      	ldr	r4, [pc, #124]	; (4f58 <thread_ble_discover+0x88>)
    int flag = 0;
    4edc:	2500      	movs	r5, #0
        while (!ble_connected)
    4ede:	783e      	ldrb	r6, [r7, #0]
    4ee0:	b35e      	cbz	r6, 4f3a <thread_ble_discover+0x6a>
        {
            flag = 0;
            k_msleep(1000);
        }
        if (flag == 0)
    4ee2:	bb2d      	cbnz	r5, 4f30 <thread_ble_discover+0x60>
    printk("Discovering services and characteristics\n");
    4ee4:	4640      	mov	r0, r8
    4ee6:	f023 f85f 	bl	27fa8 <printk>
    discover_params.uuid = scu_svc_uuid;
    4eea:	4b1c      	ldr	r3, [pc, #112]	; (4f5c <thread_ble_discover+0x8c>)
    4eec:	6023      	str	r3, [r4, #0]
    discover_params.func = discover_func;
    4eee:	4b1c      	ldr	r3, [pc, #112]	; (4f60 <thread_ble_discover+0x90>)
    4ef0:	6063      	str	r3, [r4, #4]
    discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
    4ef2:	2301      	movs	r3, #1
    4ef4:	8123      	strh	r3, [r4, #8]
    discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
    4ef6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    4efa:	81e3      	strh	r3, [r4, #14]
    err = bt_gatt_discover(g_conn, &discover_params);
    4efc:	4b19      	ldr	r3, [pc, #100]	; (4f64 <thread_ble_discover+0x94>)
    4efe:	4916      	ldr	r1, [pc, #88]	; (4f58 <thread_ble_discover+0x88>)
    4f00:	6818      	ldr	r0, [r3, #0]
    discover_params.type = BT_GATT_DISCOVER_PRIMARY;
    4f02:	7425      	strb	r5, [r4, #16]
    err = bt_gatt_discover(g_conn, &discover_params);
    4f04:	f009 f87e 	bl	e004 <bt_gatt_discover>
    if (err != 0)
    4f08:	4601      	mov	r1, r0
    4f0a:	b110      	cbz	r0, 4f12 <thread_ble_discover+0x42>
        printk("Discover failed(err %d)\n", err);
    4f0c:	4816      	ldr	r0, [pc, #88]	; (4f68 <thread_ble_discover+0x98>)
    4f0e:	f023 f84b 	bl	27fa8 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f12:	4d16      	ldr	r5, [pc, #88]	; (4f6c <thread_ble_discover+0x9c>)
    4f14:	f3bf 8f5b 	dmb	ish
    4f18:	682b      	ldr	r3, [r5, #0]
    4f1a:	f3bf 8f5b 	dmb	ish
    WAIT_FOR_FLAG(flag_discover_complete);
    4f1e:	b193      	cbz	r3, 4f46 <thread_ble_discover+0x76>
    printk("Discover complete\n");
    4f20:	4813      	ldr	r0, [pc, #76]	; (4f70 <thread_ble_discover+0xa0>)
    4f22:	f023 f841 	bl	27fa8 <printk>
    printk("%x\n", ahu_handle);
    4f26:	4b13      	ldr	r3, [pc, #76]	; (4f74 <thread_ble_discover+0xa4>)
    4f28:	4813      	ldr	r0, [pc, #76]	; (4f78 <thread_ble_discover+0xa8>)
    4f2a:	8819      	ldrh	r1, [r3, #0]
    4f2c:	f023 f83c 	bl	27fa8 <printk>
        {
            gatt_discover();
            flag = 1;
        }
        k_msleep(100);
    4f30:	2064      	movs	r0, #100	; 0x64
    4f32:	f022 ff89 	bl	27e48 <k_msleep.isra.0>
        while (!ble_connected)
    4f36:	2501      	movs	r5, #1
    4f38:	e7d1      	b.n	4ede <thread_ble_discover+0xe>
            k_msleep(1000);
    4f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    4f3e:	f022 ff83 	bl	27e48 <k_msleep.isra.0>
            flag = 0;
    4f42:	4635      	mov	r5, r6
    4f44:	e7cb      	b.n	4ede <thread_ble_discover+0xe>
	return z_impl_k_sleep(timeout);
    4f46:	2100      	movs	r1, #0
    4f48:	2021      	movs	r0, #33	; 0x21
    4f4a:	f020 fb9d 	bl	25688 <z_impl_k_sleep>
    4f4e:	e7e1      	b.n	4f14 <thread_ble_discover+0x44>
    4f50:	2000399e 	.word	0x2000399e
    4f54:	00031684 	.word	0x00031684
    4f58:	20002188 	.word	0x20002188
    4f5c:	20000aae 	.word	0x20000aae
    4f60:	00004919 	.word	0x00004919
    4f64:	200021a0 	.word	0x200021a0
    4f68:	000316ae 	.word	0x000316ae
    4f6c:	2000219c 	.word	0x2000219c
    4f70:	000316c7 	.word	0x000316c7
    4f74:	20003958 	.word	0x20003958
    4f78:	00031e2e 	.word	0x00031e2e

00004f7c <init_hts>:
{
    4f7c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    4f7e:	4803      	ldr	r0, [pc, #12]	; (4f8c <init_hts+0x10>)
    4f80:	f01f fa56 	bl	24430 <z_impl_device_get_binding>
    hts = device_get_binding("HTS221");
    4f84:	4b02      	ldr	r3, [pc, #8]	; (4f90 <init_hts+0x14>)
    4f86:	6018      	str	r0, [r3, #0]
}
    4f88:	bd08      	pop	{r3, pc}
    4f8a:	bf00      	nop
    4f8c:	000316da 	.word	0x000316da
    4f90:	200021b8 	.word	0x200021b8

00004f94 <init_lps>:
{
    4f94:	b508      	push	{r3, lr}
    4f96:	4803      	ldr	r0, [pc, #12]	; (4fa4 <init_lps+0x10>)
    4f98:	f01f fa4a 	bl	24430 <z_impl_device_get_binding>
    lps = device_get_binding(DT_LABEL(DT_INST(0, st_lps22hb_press)));
    4f9c:	4b02      	ldr	r3, [pc, #8]	; (4fa8 <init_lps+0x14>)
    4f9e:	6018      	str	r0, [r3, #0]
}
    4fa0:	bd08      	pop	{r3, pc}
    4fa2:	bf00      	nop
    4fa4:	0003174a 	.word	0x0003174a
    4fa8:	200021c0 	.word	0x200021c0

00004fac <init_ccs>:
{
    4fac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4fae:	480c      	ldr	r0, [pc, #48]	; (4fe0 <init_ccs+0x34>)
    4fb0:	f01f fa3e 	bl	24430 <z_impl_device_get_binding>
    ccs = device_get_binding(DT_LABEL(DT_INST(0, ams_ccs811)));
    4fb4:	4b0b      	ldr	r3, [pc, #44]	; (4fe4 <init_ccs+0x38>)
    rc = ccs811_configver_fetch(ccs, &cfgver);
    4fb6:	a902      	add	r1, sp, #8
    ccs = device_get_binding(DT_LABEL(DT_INST(0, ams_ccs811)));
    4fb8:	6018      	str	r0, [r3, #0]
    rc = ccs811_configver_fetch(ccs, &cfgver);
    4fba:	f01c fe53 	bl	21c64 <ccs811_configver_fetch>
    if (rc == 0)
    4fbe:	b958      	cbnz	r0, 4fd8 <init_ccs+0x2c>
        printk("HW %02x; FW Boot %04x App %04x ; mode %02x\n",
    4fc0:	f89d 300d 	ldrb.w	r3, [sp, #13]
    4fc4:	9300      	str	r3, [sp, #0]
    4fc6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    4fca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    4fce:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4fd2:	4805      	ldr	r0, [pc, #20]	; (4fe8 <init_ccs+0x3c>)
    4fd4:	f022 ffe8 	bl	27fa8 <printk>
}
    4fd8:	b005      	add	sp, #20
    4fda:	f85d fb04 	ldr.w	pc, [sp], #4
    4fde:	bf00      	nop
    4fe0:	000317a1 	.word	0x000317a1
    4fe4:	200021b4 	.word	0x200021b4
    4fe8:	000317a8 	.word	0x000317a8

00004fec <init_lis>:
{
    4fec:	b510      	push	{r4, lr}
    lis = DEVICE_DT_GET_ANY(st_lis2dh);
    4fee:	4c07      	ldr	r4, [pc, #28]	; (500c <init_lis+0x20>)
    4ff0:	4807      	ldr	r0, [pc, #28]	; (5010 <init_lis+0x24>)
    4ff2:	6020      	str	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    4ff4:	f028 fcf2 	bl	2d9dc <z_device_is_ready>
    if (!device_is_ready(lis))
    4ff8:	b930      	cbnz	r0, 5008 <init_lis+0x1c>
        printk("Device %s is not ready\n", lis->name);
    4ffa:	6823      	ldr	r3, [r4, #0]
    4ffc:	4805      	ldr	r0, [pc, #20]	; (5014 <init_lis+0x28>)
    4ffe:	6819      	ldr	r1, [r3, #0]
}
    5000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        printk("Device %s is not ready\n", lis->name);
    5004:	f022 bfd0 	b.w	27fa8 <printk>
}
    5008:	bd10      	pop	{r4, pc}
    500a:	bf00      	nop
    500c:	200021bc 	.word	0x200021bc
    5010:	0002f218 	.word	0x0002f218
    5014:	000317d4 	.word	0x000317d4

00005018 <button_pressed>:
// #define SW0_NODE	DT_ALIAS(sw0)
// static const struct gpio_dt_spec button = GPIO_DT_SPEC_GET_OR(SW0_NODE, gpios, {0});
// static struct gpio_callback button_cb_data;

void button_pressed(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    5018:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    501a:	f028 fbf2 	bl	2d802 <sys_clock_cycle_get_32>
    printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
}
    501e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5022:	4601      	mov	r1, r0
    printk("Button pressed at %" PRIu32 "\n", k_cycle_get_32());
    5024:	4801      	ldr	r0, [pc, #4]	; (502c <button_pressed+0x14>)
    5026:	f022 bfbf 	b.w	27fa8 <printk>
    502a:	bf00      	nop
    502c:	000317fe 	.word	0x000317fe

00005030 <led_rgb_set.part.0>:
    else if (rgb == RGB_GREEN)
    5030:	2801      	cmp	r0, #1
int led_rgb_set(int rgb, int mode)
    5032:	b510      	push	{r4, lr}
    5034:	460c      	mov	r4, r1
    else if (rgb == RGB_GREEN)
    5036:	d113      	bne.n	5060 <led_rgb_set.part.0+0x30>
        if (gpio_pin_set(device_get_binding(LEDG), PING, mode) == 0)
    5038:	4814      	ldr	r0, [pc, #80]	; (508c <led_rgb_set.part.0+0x5c>)
    503a:	f022 ff46 	bl	27eca <device_get_binding>
    503e:	4622      	mov	r2, r4
    5040:	2105      	movs	r1, #5
    5042:	f022 ff32 	bl	27eaa <gpio_pin_set>
    5046:	b950      	cbnz	r0, 505e <led_rgb_set.part.0+0x2e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5048:	f3bf 8f5b 	dmb	ish
    504c:	4b10      	ldr	r3, [pc, #64]	; (5090 <led_rgb_set.part.0+0x60>)
    504e:	e853 2f00 	ldrex	r2, [r3]
    5052:	e843 4100 	strex	r1, r4, [r3]
    5056:	2900      	cmp	r1, #0
    5058:	d1f9      	bne.n	504e <led_rgb_set.part.0+0x1e>
    505a:	f3bf 8f5b 	dmb	ish
}
    505e:	bd10      	pop	{r4, pc}
    else if (rgb == RGB_BLUE)
    5060:	2802      	cmp	r0, #2
    5062:	d1fc      	bne.n	505e <led_rgb_set.part.0+0x2e>
        if (gpio_pin_set(device_get_binding(LEDB), PINB, mode) == 0)
    5064:	4809      	ldr	r0, [pc, #36]	; (508c <led_rgb_set.part.0+0x5c>)
    5066:	f022 ff30 	bl	27eca <device_get_binding>
    506a:	4622      	mov	r2, r4
    506c:	2106      	movs	r1, #6
    506e:	f022 ff1c 	bl	27eaa <gpio_pin_set>
    5072:	2800      	cmp	r0, #0
    5074:	d1f3      	bne.n	505e <led_rgb_set.part.0+0x2e>
    5076:	f3bf 8f5b 	dmb	ish
    507a:	4b06      	ldr	r3, [pc, #24]	; (5094 <led_rgb_set.part.0+0x64>)
    507c:	e853 2f00 	ldrex	r2, [r3]
    5080:	e843 4100 	strex	r1, r4, [r3]
    5084:	2900      	cmp	r1, #0
    5086:	d0e8      	beq.n	505a <led_rgb_set.part.0+0x2a>
    5088:	e7f8      	b.n	507c <led_rgb_set.part.0+0x4c>
    508a:	bf00      	nop
    508c:	00031814 	.word	0x00031814
    5090:	200021d8 	.word	0x200021d8
    5094:	200021d4 	.word	0x200021d4

00005098 <led_gpio_enable>:
{
    5098:	b510      	push	{r4, lr}
    gpio_pin_configure(device_get_binding(LEDR), PINR, GPIO_OUTPUT_ACTIVE | FLAGSR);
    509a:	4c18      	ldr	r4, [pc, #96]	; (50fc <led_gpio_enable+0x64>)
    509c:	4620      	mov	r0, r4
    509e:	f022 ff14 	bl	27eca <device_get_binding>
    50a2:	f641 2201 	movw	r2, #6657	; 0x1a01
    50a6:	2107      	movs	r1, #7
    50a8:	f022 fee5 	bl	27e76 <gpio_pin_configure>
    gpio_pin_configure(device_get_binding(LEDG), PING, GPIO_OUTPUT_ACTIVE | FLAGSG);
    50ac:	4620      	mov	r0, r4
    50ae:	f022 ff0c 	bl	27eca <device_get_binding>
    50b2:	f641 2201 	movw	r2, #6657	; 0x1a01
    50b6:	2105      	movs	r1, #5
    50b8:	f022 fedd 	bl	27e76 <gpio_pin_configure>
    gpio_pin_configure(device_get_binding(LEDB), PINB, GPIO_OUTPUT_ACTIVE | FLAGSB);
    50bc:	4620      	mov	r0, r4
    50be:	f022 ff04 	bl	27eca <device_get_binding>
    50c2:	f641 2201 	movw	r2, #6657	; 0x1a01
    50c6:	2106      	movs	r1, #6
    50c8:	f022 fed5 	bl	27e76 <gpio_pin_configure>
    gpio_pin_set(device_get_binding(LEDR), PINR, 0);
    50cc:	4620      	mov	r0, r4
    50ce:	f022 fefc 	bl	27eca <device_get_binding>
    50d2:	2200      	movs	r2, #0
    50d4:	2107      	movs	r1, #7
    50d6:	f022 fee8 	bl	27eaa <gpio_pin_set>
    gpio_pin_set(device_get_binding(LEDG), PING, 0);
    50da:	4620      	mov	r0, r4
    50dc:	f022 fef5 	bl	27eca <device_get_binding>
    50e0:	2200      	movs	r2, #0
    50e2:	2105      	movs	r1, #5
    50e4:	f022 fee1 	bl	27eaa <gpio_pin_set>
    gpio_pin_set(device_get_binding(LEDB), PINB, 0);
    50e8:	4620      	mov	r0, r4
    50ea:	f022 feee 	bl	27eca <device_get_binding>
}
    50ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    gpio_pin_set(device_get_binding(LEDB), PINB, 0);
    50f2:	2200      	movs	r2, #0
    50f4:	2106      	movs	r1, #6
    50f6:	f022 bed8 	b.w	27eaa <gpio_pin_set>
    50fa:	bf00      	nop
    50fc:	00031814 	.word	0x00031814

00005100 <led_rgb_set>:
{
    5100:	b510      	push	{r4, lr}
    5102:	460c      	mov	r4, r1
    if (rgb == RGB_RED)
    5104:	b9a0      	cbnz	r0, 5130 <led_rgb_set+0x30>
        if (gpio_pin_set(device_get_binding(LEDR), PINR, mode) == 0)
    5106:	480c      	ldr	r0, [pc, #48]	; (5138 <led_rgb_set+0x38>)
    5108:	f022 fedf 	bl	27eca <device_get_binding>
    510c:	4622      	mov	r2, r4
    510e:	2107      	movs	r1, #7
    5110:	f022 fecb 	bl	27eaa <gpio_pin_set>
    5114:	b950      	cbnz	r0, 512c <led_rgb_set+0x2c>
    5116:	f3bf 8f5b 	dmb	ish
    511a:	4b08      	ldr	r3, [pc, #32]	; (513c <led_rgb_set+0x3c>)
    511c:	e853 2f00 	ldrex	r2, [r3]
    5120:	e843 4100 	strex	r1, r4, [r3]
    5124:	2900      	cmp	r1, #0
    5126:	d1f9      	bne.n	511c <led_rgb_set+0x1c>
    5128:	f3bf 8f5b 	dmb	ish
}
    512c:	2001      	movs	r0, #1
    512e:	bd10      	pop	{r4, pc}
    5130:	f7ff ff7e 	bl	5030 <led_rgb_set.part.0>
    5134:	e7fa      	b.n	512c <led_rgb_set+0x2c>
    5136:	bf00      	nop
    5138:	00031814 	.word	0x00031814
    513c:	200021dc 	.word	0x200021dc

00005140 <toggle_rgb>:
{
    5140:	b510      	push	{r4, lr}
    if (rgb == RGB_RED)
    5142:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5144:	f3bf 8f5b 	dmb	ish
    5148:	b960      	cbnz	r0, 5164 <toggle_rgb+0x24>
    514a:	4b0e      	ldr	r3, [pc, #56]	; (5184 <toggle_rgb+0x44>)
    514c:	6819      	ldr	r1, [r3, #0]
    514e:	f3bf 8f5b 	dmb	ish
        if (led_rgb_set(rgb, !val) != 0)
    5152:	fab1 f181 	clz	r1, r1
    5156:	0949      	lsrs	r1, r1, #5
    5158:	f7ff ffd2 	bl	5100 <led_rgb_set>
    515c:	1e04      	subs	r4, r0, #0
    515e:	bf18      	it	ne
    5160:	2401      	movne	r4, #1
    5162:	e00a      	b.n	517a <toggle_rgb+0x3a>
    else if (rgb == RGB_GREEN)
    5164:	2801      	cmp	r0, #1
    5166:	d10a      	bne.n	517e <toggle_rgb+0x3e>
    5168:	4b07      	ldr	r3, [pc, #28]	; (5188 <toggle_rgb+0x48>)
    516a:	6819      	ldr	r1, [r3, #0]
    516c:	f3bf 8f5b 	dmb	ish
    if (rgb == RGB_RED)
    5170:	fab1 f181 	clz	r1, r1
    5174:	0949      	lsrs	r1, r1, #5
    5176:	f7ff ff5b 	bl	5030 <led_rgb_set.part.0>
}
    517a:	4620      	mov	r0, r4
    517c:	bd10      	pop	{r4, pc}
    517e:	4b03      	ldr	r3, [pc, #12]	; (518c <toggle_rgb+0x4c>)
    5180:	e7e4      	b.n	514c <toggle_rgb+0xc>
    5182:	bf00      	nop
    5184:	200021dc 	.word	0x200021dc
    5188:	200021d8 	.word	0x200021d8
    518c:	200021d4 	.word	0x200021d4

00005190 <init_button>:

void init_button(void)
{
    5190:	b570      	push	{r4, r5, r6, lr}
    5192:	4c1f      	ldr	r4, [pc, #124]	; (5210 <init_button+0x80>)
    5194:	4620      	mov	r0, r4
    5196:	f028 fc21 	bl	2d9dc <z_device_is_ready>
    int ret = 0;
    if (!device_is_ready(button.port))
    519a:	b928      	cbnz	r0, 51a8 <init_button+0x18>
    {
        printk("Error: button device %s is not ready\n",
    519c:	6821      	ldr	r1, [r4, #0]
    519e:	481d      	ldr	r0, [pc, #116]	; (5214 <init_button+0x84>)
        return;
    }

    gpio_init_callback(&button_cb_data, button_pressed, BIT(button.pin));
    gpio_add_callback(button.port, &button_cb_data);
}
    51a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: button device %s is not ready\n",
    51a4:	f022 bf00 	b.w	27fa8 <printk>
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    51a8:	210b      	movs	r1, #11
    51aa:	f240 1211 	movw	r2, #273	; 0x111
    51ae:	4620      	mov	r0, r4
    51b0:	f022 fe61 	bl	27e76 <gpio_pin_configure>
    if (ret != 0)
    51b4:	4601      	mov	r1, r0
    51b6:	b130      	cbz	r0, 51c6 <init_button+0x36>
        printk("Error %d: failed to configure %s pin %d\n",
    51b8:	6822      	ldr	r2, [r4, #0]
    51ba:	4817      	ldr	r0, [pc, #92]	; (5218 <init_button+0x88>)
    51bc:	230b      	movs	r3, #11
}
    51be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    51c2:	f022 bef1 	b.w	27fa8 <printk>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    51c6:	6923      	ldr	r3, [r4, #16]
	const struct gpio_driver_api *api =
    51c8:	68a5      	ldr	r5, [r4, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    51ca:	681b      	ldr	r3, [r3, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
    51cc:	69ae      	ldr	r6, [r5, #24]
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    51ce:	f413 6f00 	tst.w	r3, #2048	; 0x800
	return api->pin_interrupt_configure(port, pin, mode, trig);
    51d2:	f04f 010b 	mov.w	r1, #11
    51d6:	bf0c      	ite	eq
    51d8:	f44f 2380 	moveq.w	r3, #262144	; 0x40000
    51dc:	f44f 3300 	movne.w	r3, #131072	; 0x20000
    51e0:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    51e4:	4620      	mov	r0, r4
    51e6:	47b0      	blx	r6
    if (ret != 0)
    51e8:	4601      	mov	r1, r0
    51ea:	b118      	cbz	r0, 51f4 <init_button+0x64>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    51ec:	6822      	ldr	r2, [r4, #0]
    51ee:	480b      	ldr	r0, [pc, #44]	; (521c <init_button+0x8c>)
    51f0:	230b      	movs	r3, #11
    51f2:	e7e4      	b.n	51be <init_button+0x2e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    51f4:	490a      	ldr	r1, [pc, #40]	; (5220 <init_button+0x90>)
    51f6:	4b0b      	ldr	r3, [pc, #44]	; (5224 <init_button+0x94>)
    51f8:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    51fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
    51fe:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    5200:	69eb      	ldr	r3, [r5, #28]
    5202:	b123      	cbz	r3, 520e <init_button+0x7e>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    5204:	4620      	mov	r0, r4
    5206:	2201      	movs	r2, #1
}
    5208:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    520c:	4718      	bx	r3
    520e:	bd70      	pop	{r4, r5, r6, pc}
    5210:	0002f098 	.word	0x0002f098
    5214:	0003181c 	.word	0x0003181c
    5218:	00031842 	.word	0x00031842
    521c:	0003186b 	.word	0x0003186b
    5220:	200021c4 	.word	0x200021c4
    5224:	00005019 	.word	0x00005019

00005228 <thread_read_button>:

void thread_read_button(void)
{
    5228:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct gpio_driver_data *const data =
    522a:	4c11      	ldr	r4, [pc, #68]	; (5270 <thread_read_button+0x48>)
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    522c:	4d11      	ldr	r5, [pc, #68]	; (5274 <thread_read_button+0x4c>)

    init_button();
    522e:	f7ff ffaf 	bl	5190 <init_button>
    5232:	6926      	ldr	r6, [r4, #16]
	return api->port_get_raw(port, value);
    5234:	68a3      	ldr	r3, [r4, #8]
    5236:	480e      	ldr	r0, [pc, #56]	; (5270 <thread_read_button+0x48>)
    5238:	685b      	ldr	r3, [r3, #4]
    523a:	a901      	add	r1, sp, #4
    523c:	4798      	blx	r3
	if (ret == 0) {
    523e:	2800      	cmp	r0, #0
    5240:	d113      	bne.n	526a <thread_read_button+0x42>
		*value ^= data->invert;
    5242:	6833      	ldr	r3, [r6, #0]
    5244:	9801      	ldr	r0, [sp, #4]
    5246:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    5248:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    524c:	f3bf 8f5b 	dmb	ish
    5250:	e855 3f00 	ldrex	r3, [r5]
    5254:	e845 0200 	strex	r2, r0, [r5]
    5258:	2a00      	cmp	r2, #0
    525a:	d1f9      	bne.n	5250 <thread_read_button+0x28>
    525c:	f3bf 8f5b 	dmb	ish
    5260:	2100      	movs	r1, #0
    5262:	20a4      	movs	r0, #164	; 0xa4
    5264:	f020 fa10 	bl	25688 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    5268:	e7e4      	b.n	5234 <thread_read_button+0xc>
    while (1)
    {
        /* If we have an LED, match its state to the button's. */
        int val = gpio_pin_get_dt(&button);

        if (val >= 0)
    526a:	dbf9      	blt.n	5260 <thread_read_button+0x38>
    526c:	e7ee      	b.n	524c <thread_read_button+0x24>
    526e:	bf00      	nop
    5270:	0002f098 	.word	0x0002f098
    5274:	200021d0 	.word	0x200021d0

00005278 <button_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5278:	4b03      	ldr	r3, [pc, #12]	; (5288 <button_get+0x10>)
    527a:	f3bf 8f5b 	dmb	ish
    527e:	6818      	ldr	r0, [r3, #0]
    5280:	f3bf 8f5b 	dmb	ish
}

int button_get(void)
{
    return atomic_get(&flag_button);
}
    5284:	4770      	bx	lr
    5286:	bf00      	nop
    5288:	200021d0 	.word	0x200021d0

0000528c <init_buzzer>:
#define PWM_CHANNEL DT_PWMS_CHANNEL(DT_ALIAS(pwmsound))

struct device *pwm_dev;

void init_buzzer(void)
{
    528c:	b507      	push	{r0, r1, r2, lr}
    // struct device *pwm_dev;
    uint64_t cycles;
    pwm_dev = device_get_binding("PWM_0");
    528e:	480e      	ldr	r0, [pc, #56]	; (52c8 <init_buzzer+0x3c>)
    5290:	f022 fe1b 	bl	27eca <device_get_binding>
    5294:	4a0d      	ldr	r2, [pc, #52]	; (52cc <init_buzzer+0x40>)
    5296:	6010      	str	r0, [r2, #0]
    if (!pwm_dev)
    5298:	b930      	cbnz	r0, 52a8 <init_buzzer+0x1c>
    {
        printk("Cannot find %s!\n", "PWM_0");
    529a:	490b      	ldr	r1, [pc, #44]	; (52c8 <init_buzzer+0x3c>)
    529c:	480c      	ldr	r0, [pc, #48]	; (52d0 <init_buzzer+0x44>)
        return;
    }
    struct onoff_client *clientChecker;

    int pwr = regulator_enable(speakerPower, clientChecker);
}
    529e:	b003      	add	sp, #12
    52a0:	f85d eb04 	ldr.w	lr, [sp], #4
        printk("Cannot find %s!\n", "PWM_0");
    52a4:	f022 be80 	b.w	27fa8 <printk>
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
    52a8:	6883      	ldr	r3, [r0, #8]
    52aa:	466a      	mov	r2, sp
    52ac:	685b      	ldr	r3, [r3, #4]
    52ae:	211b      	movs	r1, #27
    52b0:	4798      	blx	r3
    const struct device *speakerPower = device_get_binding("spk-pwr-ctrl");
    52b2:	4808      	ldr	r0, [pc, #32]	; (52d4 <init_buzzer+0x48>)
    52b4:	f022 fe09 	bl	27eca <device_get_binding>
    if (speakerPower == NULL)
    52b8:	b118      	cbz	r0, 52c2 <init_buzzer+0x36>
				   struct onoff_client *cli)
{
	const struct regulator_driver_api *api =
		(const struct regulator_driver_api *)reg->api;

	return api->enable(reg, cli);
    52ba:	6883      	ldr	r3, [r0, #8]
    52bc:	2100      	movs	r1, #0
    52be:	681b      	ldr	r3, [r3, #0]
    52c0:	4798      	blx	r3
}
    52c2:	b003      	add	sp, #12
    52c4:	f85d fb04 	ldr.w	pc, [sp], #4
    52c8:	000318a1 	.word	0x000318a1
    52cc:	200021e0 	.word	0x200021e0
    52d0:	000318a7 	.word	0x000318a7
    52d4:	000318b8 	.word	0x000318b8

000052d8 <process_buzzer>:

void process_buzzer(int freq)
{
    52d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int period = (int)(1000000 / (freq + 1));
    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, period, 500 / 2U, PWM_FLAGS);
    52dc:	4b1e      	ldr	r3, [pc, #120]	; (5358 <process_buzzer+0x80>)
    int period = (int)(1000000 / (freq + 1));
    52de:	4e1f      	ldr	r6, [pc, #124]	; (535c <process_buzzer+0x84>)
    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, period, 500 / 2U, PWM_FLAGS);
    52e0:	681d      	ldr	r5, [r3, #0]
    int period = (int)(1000000 / (freq + 1));
    52e2:	3001      	adds	r0, #1
{
    52e4:	b087      	sub	sp, #28
    int period = (int)(1000000 / (freq + 1));
    52e6:	fb96 f6f0 	sdiv	r6, r6, r0
    52ea:	68ab      	ldr	r3, [r5, #8]
    52ec:	aa04      	add	r2, sp, #16
    52ee:	685b      	ldr	r3, [r3, #4]
    52f0:	211b      	movs	r1, #27
    52f2:	4628      	mov	r0, r5
    52f4:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    52f6:	4607      	mov	r7, r0
    52f8:	bb58      	cbnz	r0, 5352 <process_buzzer+0x7a>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    52fa:	e9dd 4a04 	ldrd	r4, sl, [sp, #16]
    52fe:	fba6 b004 	umull	fp, r0, r6, r4
    5302:	fb06 060a 	mla	r6, r6, sl, r0
    5306:	2300      	movs	r3, #0
    5308:	4a14      	ldr	r2, [pc, #80]	; (535c <process_buzzer+0x84>)
	if (period_cycles >= ((uint64_t)1 << 32)) {
    530a:	f8df 8054 	ldr.w	r8, [pc, #84]	; 5360 <process_buzzer+0x88>
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    530e:	4658      	mov	r0, fp
    5310:	4631      	mov	r1, r6
    5312:	f7fb fc81 	bl	c18 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
    5316:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    531a:	45d9      	cmp	r9, fp
    531c:	eb78 0306 	sbcs.w	r3, r8, r6
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    5320:	9003      	str	r0, [sp, #12]
	if (period_cycles >= ((uint64_t)1 << 32)) {
    5322:	d316      	bcc.n	5352 <process_buzzer+0x7a>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    5324:	23fa      	movs	r3, #250	; 0xfa
    5326:	fba4 6403 	umull	r6, r4, r4, r3
    532a:	fb03 4a0a 	mla	sl, r3, sl, r4
    532e:	4a0b      	ldr	r2, [pc, #44]	; (535c <process_buzzer+0x84>)
    5330:	2300      	movs	r3, #0
    5332:	4630      	mov	r0, r6
    5334:	4651      	mov	r1, sl
    5336:	f7fb fc6f 	bl	c18 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    533a:	45b1      	cmp	r9, r6
    533c:	eb78 020a 	sbcs.w	r2, r8, sl
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    5340:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    5342:	d306      	bcc.n	5352 <process_buzzer+0x7a>
	return api->pin_set(dev, pwm, period, pulse, flags);
    5344:	68aa      	ldr	r2, [r5, #8]
    5346:	9700      	str	r7, [sp, #0]
    5348:	6814      	ldr	r4, [r2, #0]
    534a:	9a03      	ldr	r2, [sp, #12]
    534c:	211b      	movs	r1, #27
    534e:	4628      	mov	r0, r5
    5350:	47a0      	blx	r4
}
    5352:	b007      	add	sp, #28
    5354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5358:	200021e0 	.word	0x200021e0
    535c:	000f4240 	.word	0x000f4240
    5360:	000f423f 	.word	0x000f423f

00005364 <cbvprintf_package>:

#endif

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    5364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5368:	4605      	mov	r5, r0
    536a:	b08b      	sub	sp, #44	; 0x2c
    536c:	4618      	mov	r0, r3
	unsigned int i;
	const char *s;
	bool parsing = false;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    536e:	f015 0303 	ands.w	r3, r5, #3
    5372:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
{
    5376:	9203      	str	r2, [sp, #12]
    5378:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    537a:	9301      	str	r3, [sp, #4]
    537c:	f040 81f5 	bne.w	576a <cbvprintf_package+0x406>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    5380:	1d2c      	adds	r4, r5, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    5382:	2d00      	cmp	r5, #0
    5384:	f040 81f4 	bne.w	5770 <cbvprintf_package+0x40c>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    5388:	f001 0607 	and.w	r6, r1, #7
    538c:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    538e:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    5392:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    5396:	2704      	movs	r7, #4
	s = fmt--;
    5398:	1e41      	subs	r1, r0, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    539a:	f8cd a008 	str.w	sl, [sp, #8]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    539e:	f8cd a000 	str.w	sl, [sp]
	bool parsing = false;
    53a2:	4652      	mov	r2, sl
	size = sizeof(char *);
    53a4:	46b9      	mov	r9, r7

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    53a6:	b105      	cbz	r5, 53aa <cbvprintf_package+0x46>
				*(const char **)buf = s;
    53a8:	6020      	str	r0, [r4, #0]
			}

			bool is_ro = ptr_in_rodata(s);
			bool do_all = !!(flags & CBPRINTF_PACKAGE_ADD_STRING_IDXS);
    53aa:	9b03      	ldr	r3, [sp, #12]
    53ac:	f003 0e01 	and.w	lr, r3, #1
	return ((addr >= (const char *)RO_START) &&
    53b0:	4bce      	ldr	r3, [pc, #824]	; (56ec <cbvprintf_package+0x388>)
    53b2:	4298      	cmp	r0, r3
    53b4:	f0c0 812a 	bcc.w	560c <cbvprintf_package+0x2a8>

			if (is_ro && !do_all) {
    53b8:	4bcd      	ldr	r3, [pc, #820]	; (56f0 <cbvprintf_package+0x38c>)
    53ba:	4298      	cmp	r0, r3
    53bc:	f080 8126 	bcs.w	560c <cbvprintf_package+0x2a8>
    53c0:	f1be 0f00 	cmp.w	lr, #0
    53c4:	f000 813c 	beq.w	5640 <cbvprintf_package+0x2dc>
	return ((addr >= (const char *)RO_START) &&
    53c8:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    53cc:	eba4 0b05 	sub.w	fp, r4, r5
				 * In the do_all case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_all && s_ptr_idx > STR_POS_MASK) {
    53d0:	f1be 0f00 	cmp.w	lr, #0
    53d4:	f000 811d 	beq.w	5612 <cbvprintf_package+0x2ae>
    53d8:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    53dc:	f0c0 8119 	bcc.w	5612 <cbvprintf_package+0x2ae>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
    53e0:	f06f 0015 	mvn.w	r0, #21
    53e4:	e0f5      	b.n	55d2 <cbvprintf_package+0x26e>
		if (!parsing) {
    53e6:	b932      	cbnz	r2, 53f6 <cbvprintf_package+0x92>
			if (*fmt == '%') {
    53e8:	2b25      	cmp	r3, #37	; 0x25
    53ea:	f040 812c 	bne.w	5646 <cbvprintf_package+0x2e2>
				parsing = true;
    53ee:	2201      	movs	r2, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    53f0:	2704      	movs	r7, #4
			size = sizeof(intmax_t);
    53f2:	46b9      	mov	r9, r7
    53f4:	e127      	b.n	5646 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    53f6:	2b2b      	cmp	r3, #43	; 0x2b
    53f8:	d824      	bhi.n	5444 <cbvprintf_package+0xe0>
    53fa:	2b1f      	cmp	r3, #31
    53fc:	d801      	bhi.n	5402 <cbvprintf_package+0x9e>
			parsing = false;
    53fe:	2200      	movs	r2, #0
    5400:	e121      	b.n	5646 <cbvprintf_package+0x2e2>
		switch (*fmt) {
    5402:	f1a3 0020 	sub.w	r0, r3, #32
    5406:	280b      	cmp	r0, #11
    5408:	d8f9      	bhi.n	53fe <cbvprintf_package+0x9a>
    540a:	f20f 0c08 	addw	ip, pc, #8
    540e:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    5412:	bf00      	nop
    5414:	00005647 	.word	0x00005647
    5418:	000053ff 	.word	0x000053ff
    541c:	000053ff 	.word	0x000053ff
    5420:	00005647 	.word	0x00005647
    5424:	000053ff 	.word	0x000053ff
    5428:	000053ff 	.word	0x000053ff
    542c:	000053ff 	.word	0x000053ff
    5430:	000053ff 	.word	0x000053ff
    5434:	000053ff 	.word	0x000053ff
    5438:	000053ff 	.word	0x000053ff
    543c:	000055eb 	.word	0x000055eb
    5440:	00005647 	.word	0x00005647
    5444:	f1a3 002d 	sub.w	r0, r3, #45	; 0x2d
    5448:	fa5f fc80 	uxtb.w	ip, r0
    544c:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    5450:	d8d5      	bhi.n	53fe <cbvprintf_package+0x9a>
    5452:	284d      	cmp	r0, #77	; 0x4d
    5454:	d8d3      	bhi.n	53fe <cbvprintf_package+0x9a>
    5456:	f20f 0c08 	addw	ip, pc, #8
    545a:	f85c f020 	ldr.w	pc, [ip, r0, lsl #2]
    545e:	bf00      	nop
    5460:	00005647 	.word	0x00005647
    5464:	00005647 	.word	0x00005647
    5468:	000053ff 	.word	0x000053ff
    546c:	00005647 	.word	0x00005647
    5470:	00005647 	.word	0x00005647
    5474:	00005647 	.word	0x00005647
    5478:	00005647 	.word	0x00005647
    547c:	00005647 	.word	0x00005647
    5480:	00005647 	.word	0x00005647
    5484:	00005647 	.word	0x00005647
    5488:	00005647 	.word	0x00005647
    548c:	00005647 	.word	0x00005647
    5490:	00005647 	.word	0x00005647
    5494:	000053ff 	.word	0x000053ff
    5498:	000053ff 	.word	0x000053ff
    549c:	000053ff 	.word	0x000053ff
    54a0:	000053ff 	.word	0x000053ff
    54a4:	000053ff 	.word	0x000053ff
    54a8:	000053ff 	.word	0x000053ff
    54ac:	000053ff 	.word	0x000053ff
    54b0:	000055b3 	.word	0x000055b3
    54b4:	000053ff 	.word	0x000053ff
    54b8:	000053ff 	.word	0x000053ff
    54bc:	000053ff 	.word	0x000053ff
    54c0:	000055b3 	.word	0x000055b3
    54c4:	000055b3 	.word	0x000055b3
    54c8:	000055b3 	.word	0x000055b3
    54cc:	000053ff 	.word	0x000053ff
    54d0:	000053ff 	.word	0x000053ff
    54d4:	000053ff 	.word	0x000053ff
    54d8:	000053ff 	.word	0x000053ff
    54dc:	00005647 	.word	0x00005647
    54e0:	000053ff 	.word	0x000053ff
    54e4:	000053ff 	.word	0x000053ff
    54e8:	000053ff 	.word	0x000053ff
    54ec:	000053ff 	.word	0x000053ff
    54f0:	000053ff 	.word	0x000053ff
    54f4:	000053ff 	.word	0x000053ff
    54f8:	000053ff 	.word	0x000053ff
    54fc:	000053ff 	.word	0x000053ff
    5500:	000053ff 	.word	0x000053ff
    5504:	000053ff 	.word	0x000053ff
    5508:	000053ff 	.word	0x000053ff
    550c:	00005599 	.word	0x00005599
    5510:	000053ff 	.word	0x000053ff
    5514:	000053ff 	.word	0x000053ff
    5518:	000053ff 	.word	0x000053ff
    551c:	000053ff 	.word	0x000053ff
    5520:	000053ff 	.word	0x000053ff
    5524:	000053ff 	.word	0x000053ff
    5528:	000053ff 	.word	0x000053ff
    552c:	000053ff 	.word	0x000053ff
    5530:	000055b3 	.word	0x000055b3
    5534:	000053ff 	.word	0x000053ff
    5538:	00005599 	.word	0x00005599
    553c:	00005599 	.word	0x00005599
    5540:	000055b3 	.word	0x000055b3
    5544:	000055b3 	.word	0x000055b3
    5548:	000055b3 	.word	0x000055b3
    554c:	00005647 	.word	0x00005647
    5550:	00005599 	.word	0x00005599
    5554:	000055e1 	.word	0x000055e1
    5558:	000053ff 	.word	0x000053ff
    555c:	00005647 	.word	0x00005647
    5560:	000053ff 	.word	0x000053ff
    5564:	000055e5 	.word	0x000055e5
    5568:	00005599 	.word	0x00005599
    556c:	000055e5 	.word	0x000055e5
    5570:	000053ff 	.word	0x000053ff
    5574:	000053ff 	.word	0x000053ff
    5578:	000055e5 	.word	0x000055e5
    557c:	000053f1 	.word	0x000053f1
    5580:	00005599 	.word	0x00005599
    5584:	000053ff 	.word	0x000053ff
    5588:	000053ff 	.word	0x000053ff
    558c:	00005599 	.word	0x00005599
    5590:	000053ff 	.word	0x000053ff
    5594:	000053f1 	.word	0x000053f1
			if (fmt[-1] == 'l') {
    5598:	f811 2c01 	ldrb.w	r2, [r1, #-1]
    559c:	2a6c      	cmp	r2, #108	; 0x6c
    559e:	d123      	bne.n	55e8 <cbvprintf_package+0x284>
				if (fmt[-2] == 'l') {
    55a0:	f811 2c02 	ldrb.w	r2, [r1, #-2]
    55a4:	2a6c      	cmp	r2, #108	; 0x6c
			parsing = false;
    55a6:	f04f 0200 	mov.w	r2, #0
				if (fmt[-2] == 'l') {
    55aa:	d02d      	beq.n	5608 <cbvprintf_package+0x2a4>
			align = VA_STACK_ALIGN(void *);
    55ac:	2704      	movs	r7, #4
					size = sizeof(long long);
    55ae:	46b9      	mov	r9, r7
    55b0:	e01b      	b.n	55ea <cbvprintf_package+0x286>
				v.ld = va_arg(ap, long double);
    55b2:	f108 0807 	add.w	r8, r8, #7
    55b6:	f028 0807 	bic.w	r8, r8, #7
			buf = (void *) ROUND_UP(buf, align);
    55ba:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    55bc:	e8f8 2302 	ldrd	r2, r3, [r8], #8
			buf = (void *) ROUND_UP(buf, align);
    55c0:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    55c4:	b155      	cbz	r5, 55dc <cbvprintf_package+0x278>
				if (BUF_OFFSET + size > len) {
    55c6:	eb0e 0004 	add.w	r0, lr, r4
    55ca:	42b0      	cmp	r0, r6
    55cc:	d904      	bls.n	55d8 <cbvprintf_package+0x274>
					return -ENOSPC;
    55ce:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    55d2:	b00b      	add	sp, #44	; 0x2c
    55d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    55d8:	e9c4 2300 	strd	r2, r3, [r4]
			buf += size;
    55dc:	3408      	adds	r4, #8
			parsing = false;
    55de:	2200      	movs	r2, #0
			align = VA_STACK_ALIGN(intmax_t);
    55e0:	2708      	movs	r7, #8
    55e2:	e706      	b.n	53f2 <cbvprintf_package+0x8e>
			parsing = false;
    55e4:	2200      	movs	r2, #0
    55e6:	e7e1      	b.n	55ac <cbvprintf_package+0x248>
			parsing = false;
    55e8:	2200      	movs	r2, #0
		buf = (void *) ROUND_UP(buf, align);
    55ea:	3c01      	subs	r4, #1
    55ec:	443c      	add	r4, r7
    55ee:	4278      	negs	r0, r7
    55f0:	4004      	ands	r4, r0
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    55f2:	b125      	cbz	r5, 55fe <cbvprintf_package+0x29a>
    55f4:	eba9 0005 	sub.w	r0, r9, r5
    55f8:	4420      	add	r0, r4
    55fa:	4286      	cmp	r6, r0
    55fc:	d3e7      	bcc.n	55ce <cbvprintf_package+0x26a>
		if (*fmt == 's') {
    55fe:	2b73      	cmp	r3, #115	; 0x73
    5600:	d143      	bne.n	568a <cbvprintf_package+0x326>
			s = va_arg(ap, char *);
    5602:	f858 0b04 	ldr.w	r0, [r8], #4
    5606:	e6ce      	b.n	53a6 <cbvprintf_package+0x42>
					align = VA_STACK_ALIGN(long long);
    5608:	2708      	movs	r7, #8
    560a:	e7d0      	b.n	55ae <cbvprintf_package+0x24a>
	return ((addr >= (const char *)RO_START) &&
    560c:	f04f 0c00 	mov.w	ip, #0
    5610:	e6dc      	b.n	53cc <cbvprintf_package+0x68>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    5612:	9b00      	ldr	r3, [sp, #0]
    5614:	2b0f      	cmp	r3, #15
    5616:	f63f aee3 	bhi.w	53e0 <cbvprintf_package+0x7c>
				if (buf0 != NULL) {
    561a:	b345      	cbz	r5, 566e <cbvprintf_package+0x30a>
					str_ptr_pos[s_idx] = s_ptr_idx;
    561c:	f8dd e000 	ldr.w	lr, [sp]
    5620:	a80a      	add	r0, sp, #40	; 0x28
    5622:	f3cb 0387 	ubfx	r3, fp, #2, #8
					if (is_ro) {
    5626:	4470      	add	r0, lr
    5628:	f1bc 0f00 	cmp.w	ip, #0
    562c:	d019      	beq.n	5662 <cbvprintf_package+0x2fe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    562e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5632:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_ro_cnt++;
    5636:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    563a:	9b00      	ldr	r3, [sp, #0]
    563c:	3301      	adds	r3, #1
    563e:	9300      	str	r3, [sp, #0]
			buf += sizeof(char *);
    5640:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    5642:	f1c5 0e08 	rsb	lr, r5, #8
	while (*++fmt != '\0') {
    5646:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    564a:	2b00      	cmp	r3, #0
    564c:	f47f aecb 	bne.w	53e6 <cbvprintf_package+0x82>
	if (BUF_OFFSET / sizeof(int) > 255) {
    5650:	1b60      	subs	r0, r4, r5
    5652:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
    5656:	f4bf aec3 	bcs.w	53e0 <cbvprintf_package+0x7c>
	if (buf0 == NULL) {
    565a:	bb9d      	cbnz	r5, 56c4 <cbvprintf_package+0x360>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    565c:	3e08      	subs	r6, #8
    565e:	4430      	add	r0, r6
    5660:	e7b7      	b.n	55d2 <cbvprintf_package+0x26e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    5662:	f800 3c10 	strb.w	r3, [r0, #-16]
						s_rw_cnt++;
    5666:	9b02      	ldr	r3, [sp, #8]
    5668:	3301      	adds	r3, #1
    566a:	9302      	str	r3, [sp, #8]
    566c:	e7e5      	b.n	563a <cbvprintf_package+0x2d6>
				} else if (is_ro) {
    566e:	f1bc 0f00 	cmp.w	ip, #0
    5672:	d001      	beq.n	5678 <cbvprintf_package+0x314>
					len += 1;
    5674:	3601      	adds	r6, #1
    5676:	e7e0      	b.n	563a <cbvprintf_package+0x2d6>
    5678:	e9cd 1204 	strd	r1, r2, [sp, #16]
					len += strlen(s) + 1 + 1;
    567c:	f7fb fd09 	bl	1092 <strlen>
    5680:	3602      	adds	r6, #2
    5682:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    5686:	4406      	add	r6, r0
    5688:	e7d7      	b.n	563a <cbvprintf_package+0x2d6>
		} else if (size == sizeof(int)) {
    568a:	f1b9 0f04 	cmp.w	r9, #4
    568e:	d108      	bne.n	56a2 <cbvprintf_package+0x33e>
			int v = va_arg(ap, int);
    5690:	f108 0004 	add.w	r0, r8, #4
			if (buf0 != NULL) {
    5694:	b115      	cbz	r5, 569c <cbvprintf_package+0x338>
			int v = va_arg(ap, int);
    5696:	f8d8 3000 	ldr.w	r3, [r8]
				*(int *)buf = v;
    569a:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    569c:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    569e:	4680      	mov	r8, r0
    56a0:	e7d1      	b.n	5646 <cbvprintf_package+0x2e2>
		} else if (size == sizeof(long long)) {
    56a2:	f1b9 0f08 	cmp.w	r9, #8
    56a6:	f47f ae9b 	bne.w	53e0 <cbvprintf_package+0x7c>
			long long v = va_arg(ap, long long);
    56aa:	f108 0307 	add.w	r3, r8, #7
    56ae:	f023 0307 	bic.w	r3, r3, #7
    56b2:	f103 0808 	add.w	r8, r3, #8
			if (buf0 != NULL) {
    56b6:	b11d      	cbz	r5, 56c0 <cbvprintf_package+0x35c>
			long long v = va_arg(ap, long long);
    56b8:	e9d3 bc00 	ldrd	fp, ip, [r3]
    56bc:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    56c0:	3408      	adds	r4, #8
    56c2:	e7c0      	b.n	5646 <cbvprintf_package+0x2e2>
	buf0[1] = s_rw_cnt;
    56c4:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    56c6:	602b      	str	r3, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    56c8:	0880      	lsrs	r0, r0, #2
    56ca:	7028      	strb	r0, [r5, #0]
	buf0[1] = s_rw_cnt;
    56cc:	706a      	strb	r2, [r5, #1]
	buf0[2] = s_ro_cnt;
    56ce:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    56d2:	f1ba 0f00 	cmp.w	sl, #0
    56d6:	d005      	beq.n	56e4 <cbvprintf_package+0x380>
    56d8:	a906      	add	r1, sp, #24
			if (BUF_OFFSET + 1 > len) {
    56da:	f1c5 0001 	rsb	r0, r5, #1
		for (i = 0; i < s_idx; i++) {
    56de:	9a00      	ldr	r2, [sp, #0]
    56e0:	429a      	cmp	r2, r3
    56e2:	d107      	bne.n	56f4 <cbvprintf_package+0x390>
		if (BUF_OFFSET + 1 + size > len) {
    56e4:	f1c5 0901 	rsb	r9, r5, #1
    56e8:	e039      	b.n	575e <cbvprintf_package+0x3fa>
    56ea:	bf00      	nop
    56ec:	0002ef98 	.word	0x0002ef98
    56f0:	00034028 	.word	0x00034028
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    56f4:	f811 2b01 	ldrb.w	r2, [r1], #1
    56f8:	0617      	lsls	r7, r2, #24
    56fa:	d507      	bpl.n	570c <cbvprintf_package+0x3a8>
			if (BUF_OFFSET + 1 > len) {
    56fc:	1827      	adds	r7, r4, r0
    56fe:	42be      	cmp	r6, r7
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    5700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    5704:	f4ff af63 	bcc.w	55ce <cbvprintf_package+0x26a>
			*buf++ = pos;
    5708:	f804 2b01 	strb.w	r2, [r4], #1
		for (i = 0; i < s_idx; i++) {
    570c:	3301      	adds	r3, #1
    570e:	e7e6      	b.n	56de <cbvprintf_package+0x37a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    5710:	9b01      	ldr	r3, [sp, #4]
    5712:	aa06      	add	r2, sp, #24
    5714:	f812 8003 	ldrb.w	r8, [r2, r3]
    5718:	f1ba 0f00 	cmp.w	sl, #0
    571c:	d002      	beq.n	5724 <cbvprintf_package+0x3c0>
    571e:	f018 0f80 	tst.w	r8, #128	; 0x80
    5722:	d119      	bne.n	5758 <cbvprintf_package+0x3f4>
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    5724:	fa0f f288 	sxth.w	r2, r8
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    5728:	2300      	movs	r3, #0
		s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    572a:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
		*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    572e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
		size = strlen(s) + 1;
    5732:	4608      	mov	r0, r1
    5734:	9102      	str	r1, [sp, #8]
    5736:	f7fb fcac 	bl	1092 <strlen>
		if (BUF_OFFSET + 1 + size > len) {
    573a:	eb04 0209 	add.w	r2, r4, r9
		size = strlen(s) + 1;
    573e:	1c47      	adds	r7, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    5740:	443a      	add	r2, r7
    5742:	4296      	cmp	r6, r2
    5744:	f4ff af43 	bcc.w	55ce <cbvprintf_package+0x26a>
		*buf++ = str_ptr_pos[i];
    5748:	f804 8b01 	strb.w	r8, [r4], #1
    574c:	9902      	ldr	r1, [sp, #8]
    574e:	4620      	mov	r0, r4
    5750:	463a      	mov	r2, r7
    5752:	f028 ff08 	bl	2e566 <memcpy>
		buf += size;
    5756:	443c      	add	r4, r7
	for (i = 0; i < s_idx; i++) {
    5758:	9b01      	ldr	r3, [sp, #4]
    575a:	3301      	adds	r3, #1
    575c:	9301      	str	r3, [sp, #4]
    575e:	e9dd 2300 	ldrd	r2, r3, [sp]
    5762:	429a      	cmp	r2, r3
    5764:	d1d4      	bne.n	5710 <cbvprintf_package+0x3ac>
	return BUF_OFFSET;
    5766:	1b60      	subs	r0, r4, r5
    5768:	e733      	b.n	55d2 <cbvprintf_package+0x26e>
		return -EFAULT;
    576a:	f06f 000d 	mvn.w	r0, #13
    576e:	e730      	b.n	55d2 <cbvprintf_package+0x26e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    5770:	2907      	cmp	r1, #7
    5772:	f63f ae0e 	bhi.w	5392 <cbvprintf_package+0x2e>
    5776:	e72a      	b.n	55ce <cbvprintf_package+0x26a>

00005778 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    5778:	4b01      	ldr	r3, [pc, #4]	; (5780 <__printk_hook_install+0x8>)
    577a:	6018      	str	r0, [r3, #0]
}
    577c:	4770      	bx	lr
    577e:	bf00      	nop
    5780:	200001b0 	.word	0x200001b0

00005784 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    5784:	b530      	push	{r4, r5, lr}
    5786:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    5788:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    578c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    578e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    5790:	a901      	add	r1, sp, #4
    5792:	4805      	ldr	r0, [pc, #20]	; (57a8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    5794:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    5796:	f000 f949 	bl	5a2c <cbvprintf>

	if (ctx.count < ctx.max) {
    579a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    579e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    57a0:	bfb8      	it	lt
    57a2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    57a4:	b005      	add	sp, #20
    57a6:	bd30      	pop	{r4, r5, pc}
    57a8:	00027f83 	.word	0x00027f83

000057ac <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    57ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    57b0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    57b4:	f019 0808 	ands.w	r8, r9, #8
{
    57b8:	4604      	mov	r4, r0
    57ba:	4693      	mov	fp, r2
	if (processing) {
    57bc:	d00d      	beq.n	57da <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    57be:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    57c0:	bf0c      	ite	eq
    57c2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    57c6:	f049 0920 	orrne.w	r9, r9, #32
    57ca:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    57ce:	f38b 8811 	msr	BASEPRI, fp
    57d2:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    57d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    57da:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    57de:	2902      	cmp	r1, #2
    57e0:	d107      	bne.n	57f2 <process_event+0x46>
			evt = process_recheck(mgr);
    57e2:	4620      	mov	r0, r4
    57e4:	f022 fbfa 	bl	27fdc <process_recheck>
		if (evt == EVT_NOP) {
    57e8:	2800      	cmp	r0, #0
    57ea:	d0f0      	beq.n	57ce <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    57ec:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    57ee:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    57f0:	d14e      	bne.n	5890 <process_event+0xe4>
			res = mgr->last_res;
    57f2:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    57f4:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    57f6:	2f00      	cmp	r7, #0
    57f8:	da15      	bge.n	5826 <process_event+0x7a>
		*clients = mgr->clients;
    57fa:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    57fc:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    5800:	e9c4 8800 	strd	r8, r8, [r4]
    5804:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5808:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    580a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    580c:	8b21      	ldrh	r1, [r4, #24]
    580e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    5812:	45ca      	cmp	sl, r9
    5814:	d002      	beq.n	581c <process_event+0x70>
		if (do_monitors
    5816:	68a3      	ldr	r3, [r4, #8]
    5818:	2b00      	cmp	r3, #0
    581a:	d15a      	bne.n	58d2 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    581c:	b90d      	cbnz	r5, 5822 <process_event+0x76>
		    || (transit != NULL)) {
    581e:	2e00      	cmp	r6, #0
    5820:	d071      	beq.n	5906 <process_event+0x15a>
    5822:	2300      	movs	r3, #0
    5824:	e056      	b.n	58d4 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    5826:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    582a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    582c:	2a01      	cmp	r2, #1
    582e:	d81e      	bhi.n	586e <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5830:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    5834:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    5836:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5838:	b289      	uxth	r1, r1
    583a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    583e:	d10a      	bne.n	5856 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    5840:	b13d      	cbz	r5, 5852 <process_event+0xa6>
    5842:	8b63      	ldrh	r3, [r4, #26]
    5844:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    5846:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    5848:	3301      	adds	r3, #1
    584a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    584c:	2a00      	cmp	r2, #0
    584e:	d1fa      	bne.n	5846 <process_event+0x9a>
    5850:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5852:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    5856:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    5858:	4620      	mov	r0, r4
    585a:	f022 fbbf 	bl	27fdc <process_recheck>
    585e:	4606      	mov	r6, r0
    5860:	2800      	cmp	r0, #0
    5862:	d0d3      	beq.n	580c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5864:	8b23      	ldrh	r3, [r4, #24]
    5866:	f043 0320 	orr.w	r3, r3, #32
    586a:	8323      	strh	r3, [r4, #24]
    586c:	e7cd      	b.n	580a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    586e:	2b04      	cmp	r3, #4
    5870:	d10c      	bne.n	588c <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5872:	f021 0107 	bic.w	r1, r1, #7
    5876:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    5878:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    587a:	4620      	mov	r0, r4
    587c:	f022 fbae 	bl	27fdc <process_recheck>
    5880:	4605      	mov	r5, r0
    5882:	2800      	cmp	r0, #0
    5884:	d0c1      	beq.n	580a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    5886:	f041 0120 	orr.w	r1, r1, #32
    588a:	8321      	strh	r1, [r4, #24]
    588c:	2500      	movs	r5, #0
    588e:	e7bc      	b.n	580a <process_event+0x5e>
		} else if (evt == EVT_START) {
    5890:	2803      	cmp	r0, #3
    5892:	d109      	bne.n	58a8 <process_event+0xfc>
			transit = mgr->transitions->start;
    5894:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    5896:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    589a:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    589c:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    58a0:	8323      	strh	r3, [r4, #24]
}
    58a2:	2500      	movs	r5, #0
		res = 0;
    58a4:	462f      	mov	r7, r5
    58a6:	e7b1      	b.n	580c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    58a8:	2804      	cmp	r0, #4
    58aa:	d106      	bne.n	58ba <process_event+0x10e>
			transit = mgr->transitions->stop;
    58ac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    58ae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    58b2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    58b4:	f043 0304 	orr.w	r3, r3, #4
    58b8:	e7f2      	b.n	58a0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    58ba:	2805      	cmp	r0, #5
    58bc:	d106      	bne.n	58cc <process_event+0x120>
			transit = mgr->transitions->reset;
    58be:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    58c0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    58c4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    58c6:	f043 0305 	orr.w	r3, r3, #5
    58ca:	e7e9      	b.n	58a0 <process_event+0xf4>
    58cc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    58ce:	462e      	mov	r6, r5
    58d0:	e7e8      	b.n	58a4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    58d2:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    58d4:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    58d8:	8321      	strh	r1, [r4, #24]
    58da:	f38b 8811 	msr	BASEPRI, fp
    58de:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    58e2:	b9fb      	cbnz	r3, 5924 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    58e4:	bb85      	cbnz	r5, 5948 <process_event+0x19c>
			if (transit != NULL) {
    58e6:	b116      	cbz	r6, 58ee <process_event+0x142>
				transit(mgr, transition_complete);
    58e8:	491f      	ldr	r1, [pc, #124]	; (5968 <process_event+0x1bc>)
    58ea:	4620      	mov	r0, r4
    58ec:	47b0      	blx	r6
	__asm__ volatile(
    58ee:	f04f 0320 	mov.w	r3, #32
    58f2:	f3ef 8b11 	mrs	fp, BASEPRI
    58f6:	f383 8812 	msr	BASEPRI_MAX, r3
    58fa:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    58fe:	8b23      	ldrh	r3, [r4, #24]
    5900:	f023 0308 	bic.w	r3, r3, #8
    5904:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    5906:	8b23      	ldrh	r3, [r4, #24]
    5908:	06da      	lsls	r2, r3, #27
    590a:	d525      	bpl.n	5958 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    590c:	f023 0310 	bic.w	r3, r3, #16
    5910:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    5912:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    5914:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    5918:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    591c:	2900      	cmp	r1, #0
    591e:	f47f af5e 	bne.w	57de <process_event+0x32>
out:
    5922:	e754      	b.n	57ce <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    5924:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    5926:	2900      	cmp	r1, #0
    5928:	d0dc      	beq.n	58e4 <process_event+0x138>
	return node->next;
    592a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    592e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    5932:	463b      	mov	r3, r7
    5934:	4652      	mov	r2, sl
    5936:	4620      	mov	r0, r4
    5938:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    593a:	f1b9 0f00 	cmp.w	r9, #0
    593e:	d0d1      	beq.n	58e4 <process_event+0x138>
    5940:	4649      	mov	r1, r9
    5942:	f8d9 9000 	ldr.w	r9, [r9]
    5946:	e7f2      	b.n	592e <process_event+0x182>
    5948:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    594a:	463b      	mov	r3, r7
    594c:	4652      	mov	r2, sl
    594e:	4620      	mov	r0, r4
    5950:	682d      	ldr	r5, [r5, #0]
    5952:	f022 fb5f 	bl	28014 <notify_one>
    5956:	e7c5      	b.n	58e4 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    5958:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    595c:	bf1e      	ittt	ne
    595e:	f023 0320 	bicne.w	r3, r3, #32
    5962:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    5964:	2102      	movne	r1, #2
    5966:	e7d5      	b.n	5914 <process_event+0x168>
    5968:	00028041 	.word	0x00028041

0000596c <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
    596c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
    596e:	4e08      	ldr	r6, [pc, #32]	; (5990 <extract_decimal+0x24>)
    5970:	6802      	ldr	r2, [r0, #0]
{
    5972:	4603      	mov	r3, r0
		val = 10U * val + *sp++ - '0';
    5974:	270a      	movs	r7, #10
	size_t val = 0;
    5976:	2000      	movs	r0, #0
    5978:	4611      	mov	r1, r2
	while (isdigit((int)(unsigned char)*sp)) {
    597a:	3201      	adds	r2, #1
    597c:	780c      	ldrb	r4, [r1, #0]
    597e:	5da5      	ldrb	r5, [r4, r6]
    5980:	076d      	lsls	r5, r5, #29
    5982:	d401      	bmi.n	5988 <extract_decimal+0x1c>
	}
	*str = sp;
    5984:	6019      	str	r1, [r3, #0]
	return val;
}
    5986:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
    5988:	fb07 4000 	mla	r0, r7, r0, r4
    598c:	3830      	subs	r0, #48	; 0x30
    598e:	e7f3      	b.n	5978 <extract_decimal+0xc>
    5990:	00033da1 	.word	0x00033da1

00005994 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
    5994:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5998:	4615      	mov	r5, r2
    599a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    599c:	78d3      	ldrb	r3, [r2, #3]
    599e:	4a22      	ldr	r2, [pc, #136]	; (5a28 <encode_uint+0x94>)
    59a0:	f813 b002 	ldrb.w	fp, [r3, r2]
	switch (specifier) {
    59a4:	2b6f      	cmp	r3, #111	; 0x6f
{
    59a6:	4680      	mov	r8, r0
    59a8:	460f      	mov	r7, r1
    59aa:	f00b 0b03 	and.w	fp, fp, #3
	switch (specifier) {
    59ae:	d029      	beq.n	5a04 <encode_uint+0x70>
    59b0:	d824      	bhi.n	59fc <encode_uint+0x68>
		return 16;
    59b2:	2b58      	cmp	r3, #88	; 0x58
    59b4:	bf14      	ite	ne
    59b6:	260a      	movne	r6, #10
    59b8:	2610      	moveq	r6, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
    59ba:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28

	do {
		unsigned int lsv = (unsigned int)(value % radix);
    59be:	4632      	mov	r2, r6
    59c0:	2300      	movs	r3, #0
    59c2:	4640      	mov	r0, r8
    59c4:	4639      	mov	r1, r7
    59c6:	f7fb f927 	bl	c18 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
    59ca:	2a09      	cmp	r2, #9
    59cc:	b2d4      	uxtb	r4, r2
    59ce:	d81e      	bhi.n	5a0e <encode_uint+0x7a>
    59d0:	3430      	adds	r4, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
    59d2:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59d4:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    59d6:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    59da:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    59de:	d301      	bcc.n	59e4 <encode_uint+0x50>
    59e0:	45d1      	cmp	r9, sl
    59e2:	d811      	bhi.n	5a08 <encode_uint+0x74>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
    59e4:	782b      	ldrb	r3, [r5, #0]
    59e6:	069b      	lsls	r3, r3, #26
    59e8:	d505      	bpl.n	59f6 <encode_uint+0x62>
		if (radix == 8) {
    59ea:	2e08      	cmp	r6, #8
    59ec:	d115      	bne.n	5a1a <encode_uint+0x86>
			conv->altform_0 = true;
    59ee:	78ab      	ldrb	r3, [r5, #2]
    59f0:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
    59f4:	70ab      	strb	r3, [r5, #2]
			;
		}
	}

	return bp;
}
    59f6:	4648      	mov	r0, r9
    59f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    59fc:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    5a00:	2b70      	cmp	r3, #112	; 0x70
    5a02:	e7d7      	b.n	59b4 <encode_uint+0x20>
	switch (specifier) {
    5a04:	2608      	movs	r6, #8
    5a06:	e7d8      	b.n	59ba <encode_uint+0x26>
		value /= radix;
    5a08:	4680      	mov	r8, r0
    5a0a:	460f      	mov	r7, r1
    5a0c:	e7d7      	b.n	59be <encode_uint+0x2a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    5a0e:	f1bb 0f01 	cmp.w	fp, #1
    5a12:	bf0c      	ite	eq
    5a14:	3437      	addeq	r4, #55	; 0x37
    5a16:	3457      	addne	r4, #87	; 0x57
    5a18:	e7db      	b.n	59d2 <encode_uint+0x3e>
		} else if (radix == 16) {
    5a1a:	2e10      	cmp	r6, #16
    5a1c:	d1eb      	bne.n	59f6 <encode_uint+0x62>
			conv->altform_0c = true;
    5a1e:	78ab      	ldrb	r3, [r5, #2]
    5a20:	f043 0310 	orr.w	r3, r3, #16
    5a24:	e7e6      	b.n	59f4 <encode_uint+0x60>
    5a26:	bf00      	nop
    5a28:	00033da1 	.word	0x00033da1

00005a2c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    5a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a30:	4681      	mov	r9, r0
    5a32:	b09b      	sub	sp, #108	; 0x6c
    5a34:	468a      	mov	sl, r1
    5a36:	4615      	mov	r5, r2
    5a38:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    5a3a:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    5a3c:	7828      	ldrb	r0, [r5, #0]
    5a3e:	b910      	cbnz	r0, 5a46 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    5a40:	4630      	mov	r0, r6
    5a42:	f000 bdc5 	b.w	65d0 <cbvprintf+0xba4>
			OUTC(*fp++);
    5a46:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    5a48:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    5a4a:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    5a4c:	d006      	beq.n	5a5c <cbvprintf+0x30>
			OUTC(*fp++);
    5a4e:	4651      	mov	r1, sl
			OUTC('%');
    5a50:	47c8      	blx	r9
    5a52:	2800      	cmp	r0, #0
    5a54:	f2c0 85bc 	blt.w	65d0 <cbvprintf+0xba4>
    5a58:	3601      	adds	r6, #1
		if (bps == NULL) {
    5a5a:	e226      	b.n	5eaa <cbvprintf+0x47e>
		} state = {
    5a5c:	2218      	movs	r2, #24
    5a5e:	2100      	movs	r1, #0
    5a60:	a80c      	add	r0, sp, #48	; 0x30
    5a62:	f028 fda1 	bl	2e5a8 <memset>
	if (*sp == '%') {
    5a66:	786b      	ldrb	r3, [r5, #1]
    5a68:	2b25      	cmp	r3, #37	; 0x25
    5a6a:	d059      	beq.n	5b20 <cbvprintf+0xf4>
    5a6c:	1c6a      	adds	r2, r5, #1
    5a6e:	4617      	mov	r7, r2
		switch (*sp) {
    5a70:	f812 3b01 	ldrb.w	r3, [r2], #1
    5a74:	2b2b      	cmp	r3, #43	; 0x2b
    5a76:	f000 808b 	beq.w	5b90 <cbvprintf+0x164>
    5a7a:	d879      	bhi.n	5b70 <cbvprintf+0x144>
    5a7c:	2b20      	cmp	r3, #32
    5a7e:	f000 808c 	beq.w	5b9a <cbvprintf+0x16e>
    5a82:	2b23      	cmp	r3, #35	; 0x23
    5a84:	f000 808e 	beq.w	5ba4 <cbvprintf+0x178>
	if (conv->flag_zero && conv->flag_dash) {
    5a88:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5a8c:	f003 0244 	and.w	r2, r3, #68	; 0x44
    5a90:	2a44      	cmp	r2, #68	; 0x44
    5a92:	d103      	bne.n	5a9c <cbvprintf+0x70>
		conv->flag_zero = false;
    5a94:	f36f 1386 	bfc	r3, #6, #1
    5a98:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
    5a9c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5aa0:	970a      	str	r7, [sp, #40]	; 0x28
    5aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    5aa6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
    5aaa:	783b      	ldrb	r3, [r7, #0]
    5aac:	2b2a      	cmp	r3, #42	; 0x2a
    5aae:	d17e      	bne.n	5bae <cbvprintf+0x182>
		conv->width_star = true;
    5ab0:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5ab4:	f043 0301 	orr.w	r3, r3, #1
    5ab8:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
    5abc:	1c7b      	adds	r3, r7, #1
	sp = extract_prec(conv, sp);
    5abe:	930a      	str	r3, [sp, #40]	; 0x28
	conv->prec_present = (*sp == '.');
    5ac0:	781a      	ldrb	r2, [r3, #0]
    5ac2:	2a2e      	cmp	r2, #46	; 0x2e
    5ac4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5ac8:	bf0c      	ite	eq
    5aca:	2101      	moveq	r1, #1
    5acc:	2100      	movne	r1, #0
    5ace:	f361 0241 	bfi	r2, r1, #1, #1
    5ad2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    5ad6:	d10b      	bne.n	5af0 <cbvprintf+0xc4>
	++sp;
    5ad8:	1c5a      	adds	r2, r3, #1
    5ada:	920a      	str	r2, [sp, #40]	; 0x28
	if (*sp == '*') {
    5adc:	785a      	ldrb	r2, [r3, #1]
    5ade:	2a2a      	cmp	r2, #42	; 0x2a
    5ae0:	d17b      	bne.n	5bda <cbvprintf+0x1ae>
		conv->prec_star = true;
    5ae2:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5ae6:	f042 0204 	orr.w	r2, r2, #4
    5aea:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    5aee:	3302      	adds	r3, #2
	switch (*sp) {
    5af0:	461a      	mov	r2, r3
    5af2:	f812 0b01 	ldrb.w	r0, [r2], #1
    5af6:	286c      	cmp	r0, #108	; 0x6c
    5af8:	f000 80cf 	beq.w	5c9a <cbvprintf+0x26e>
    5afc:	d87d      	bhi.n	5bfa <cbvprintf+0x1ce>
    5afe:	2868      	cmp	r0, #104	; 0x68
    5b00:	f000 8084 	beq.w	5c0c <cbvprintf+0x1e0>
    5b04:	286a      	cmp	r0, #106	; 0x6a
    5b06:	f000 80d2 	beq.w	5cae <cbvprintf+0x282>
    5b0a:	284c      	cmp	r0, #76	; 0x4c
    5b0c:	f000 80d6 	beq.w	5cbc <cbvprintf+0x290>
		conv->length_mod = LENGTH_NONE;
    5b10:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    5b14:	f36f 02c6 	bfc	r2, #3, #4
    5b18:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
    5b1c:	461a      	mov	r2, r3
    5b1e:	e080      	b.n	5c22 <cbvprintf+0x1f6>
		conv->specifier = *sp++;
    5b20:	1caa      	adds	r2, r5, #2
    5b22:	9202      	str	r2, [sp, #8]
    5b24:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    5b28:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5b2c:	07df      	lsls	r7, r3, #31
    5b2e:	f140 8170 	bpl.w	5e12 <cbvprintf+0x3e6>
			width = va_arg(ap, int);
    5b32:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    5b36:	f1bb 0f00 	cmp.w	fp, #0
    5b3a:	da07      	bge.n	5b4c <cbvprintf+0x120>
				conv->flag_dash = true;
    5b3c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5b40:	f042 0204 	orr.w	r2, r2, #4
    5b44:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    5b48:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    5b4c:	0758      	lsls	r0, r3, #29
    5b4e:	f140 8169 	bpl.w	5e24 <cbvprintf+0x3f8>
			int arg = va_arg(ap, int);
    5b52:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    5b56:	f1b8 0f00 	cmp.w	r8, #0
    5b5a:	f280 8168 	bge.w	5e2e <cbvprintf+0x402>
				conv->prec_present = false;
    5b5e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5b62:	f36f 0341 	bfc	r3, #1, #1
    5b66:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    5b6a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    5b6e:	e15e      	b.n	5e2e <cbvprintf+0x402>
		switch (*sp) {
    5b70:	2b2d      	cmp	r3, #45	; 0x2d
    5b72:	d006      	beq.n	5b82 <cbvprintf+0x156>
    5b74:	2b30      	cmp	r3, #48	; 0x30
    5b76:	d187      	bne.n	5a88 <cbvprintf+0x5c>
			conv->flag_zero = true;
    5b78:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5b80:	e003      	b.n	5b8a <cbvprintf+0x15e>
			conv->flag_dash = true;
    5b82:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5b86:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
    5b8a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
    5b8e:	e76e      	b.n	5a6e <cbvprintf+0x42>
			conv->flag_plus = true;
    5b90:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5b94:	f043 0308 	orr.w	r3, r3, #8
    5b98:	e7f7      	b.n	5b8a <cbvprintf+0x15e>
			conv->flag_space = true;
    5b9a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5b9e:	f043 0310 	orr.w	r3, r3, #16
    5ba2:	e7f2      	b.n	5b8a <cbvprintf+0x15e>
			conv->flag_hash = true;
    5ba4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5ba8:	f043 0320 	orr.w	r3, r3, #32
    5bac:	e7ed      	b.n	5b8a <cbvprintf+0x15e>
	size_t width = extract_decimal(&sp);
    5bae:	a80a      	add	r0, sp, #40	; 0x28
    5bb0:	f7ff fedc 	bl	596c <extract_decimal>
	if (sp != wp) {
    5bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5bb6:	42bb      	cmp	r3, r7
    5bb8:	d081      	beq.n	5abe <cbvprintf+0x92>
		conv->unsupported |= ((conv->width_value < 0)
    5bba:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    5bbe:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
    5bc0:	f3c1 0240 	ubfx	r2, r1, #1, #1
    5bc4:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
    5bc8:	0052      	lsls	r2, r2, #1
    5bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5bce:	f001 017d 	and.w	r1, r1, #125	; 0x7d
    5bd2:	430a      	orrs	r2, r1
    5bd4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    5bd8:	e771      	b.n	5abe <cbvprintf+0x92>
	size_t prec = extract_decimal(&sp);
    5bda:	a80a      	add	r0, sp, #40	; 0x28
    5bdc:	f7ff fec6 	bl	596c <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
    5be0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
    5be4:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    5be6:	f3c3 0240 	ubfx	r2, r3, #1, #1
    5bea:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
    5bee:	f360 0341 	bfi	r3, r0, #1, #1
    5bf2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
    5bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    5bf8:	e77a      	b.n	5af0 <cbvprintf+0xc4>
	switch (*sp) {
    5bfa:	2874      	cmp	r0, #116	; 0x74
    5bfc:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5c00:	d059      	beq.n	5cb6 <cbvprintf+0x28a>
    5c02:	287a      	cmp	r0, #122	; 0x7a
    5c04:	d184      	bne.n	5b10 <cbvprintf+0xe4>
		conv->length_mod = LENGTH_Z;
    5c06:	460b      	mov	r3, r1
    5c08:	2106      	movs	r1, #6
    5c0a:	e041      	b.n	5c90 <cbvprintf+0x264>
		if (*++sp == 'h') {
    5c0c:	7859      	ldrb	r1, [r3, #1]
    5c0e:	2968      	cmp	r1, #104	; 0x68
    5c10:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5c14:	d13a      	bne.n	5c8c <cbvprintf+0x260>
			conv->length_mod = LENGTH_HH;
    5c16:	2201      	movs	r2, #1
			conv->length_mod = LENGTH_LL;
    5c18:	f362 01c6 	bfi	r1, r2, #3, #4
    5c1c:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
			++sp;
    5c20:	1c9a      	adds	r2, r3, #2
	conv->specifier = *sp++;
    5c22:	4613      	mov	r3, r2
    5c24:	f813 2b01 	ldrb.w	r2, [r3], #1
    5c28:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    5c2a:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    5c2c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    5c30:	f200 80c5 	bhi.w	5dbe <cbvprintf+0x392>
    5c34:	2a57      	cmp	r2, #87	; 0x57
    5c36:	d84e      	bhi.n	5cd6 <cbvprintf+0x2aa>
    5c38:	2a41      	cmp	r2, #65	; 0x41
    5c3a:	d004      	beq.n	5c46 <cbvprintf+0x21a>
    5c3c:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5c40:	2b02      	cmp	r3, #2
    5c42:	f200 80bc 	bhi.w	5dbe <cbvprintf+0x392>
		conv->specifier_cat = SPECIFIER_FP;
    5c46:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5c4a:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    5c4e:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    5c50:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    5c54:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    5c58:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    5c5c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    5c60:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    5c64:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    5c68:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    5c6c:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    5c6e:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    5c72:	b2cb      	uxtb	r3, r1
    5c74:	f100 80cb 	bmi.w	5e0e <cbvprintf+0x3e2>
		if (conv->length_mod == LENGTH_L) {
    5c78:	f003 0278 	and.w	r2, r3, #120	; 0x78
    5c7c:	2a18      	cmp	r2, #24
    5c7e:	f040 809b 	bne.w	5db8 <cbvprintf+0x38c>
			conv->length_mod = LENGTH_NONE;
    5c82:	f36f 03c6 	bfc	r3, #3, #4
    5c86:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    5c8a:	e082      	b.n	5d92 <cbvprintf+0x366>
			conv->length_mod = LENGTH_H;
    5c8c:	460b      	mov	r3, r1
    5c8e:	2102      	movs	r1, #2
			conv->length_mod = LENGTH_L;
    5c90:	f361 03c6 	bfi	r3, r1, #3, #4
    5c94:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    5c98:	e7c3      	b.n	5c22 <cbvprintf+0x1f6>
		if (*++sp == 'l') {
    5c9a:	7859      	ldrb	r1, [r3, #1]
    5c9c:	296c      	cmp	r1, #108	; 0x6c
    5c9e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5ca2:	d101      	bne.n	5ca8 <cbvprintf+0x27c>
			conv->length_mod = LENGTH_LL;
    5ca4:	2204      	movs	r2, #4
    5ca6:	e7b7      	b.n	5c18 <cbvprintf+0x1ec>
			conv->length_mod = LENGTH_L;
    5ca8:	460b      	mov	r3, r1
    5caa:	2103      	movs	r1, #3
    5cac:	e7f0      	b.n	5c90 <cbvprintf+0x264>
		conv->length_mod = LENGTH_J;
    5cae:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5cb2:	2105      	movs	r1, #5
    5cb4:	e7ec      	b.n	5c90 <cbvprintf+0x264>
		conv->length_mod = LENGTH_T;
    5cb6:	460b      	mov	r3, r1
    5cb8:	2107      	movs	r1, #7
    5cba:	e7e9      	b.n	5c90 <cbvprintf+0x264>
		conv->unsupported = true;
    5cbc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    5cc0:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    5cc4:	f023 0302 	bic.w	r3, r3, #2
    5cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    5ccc:	f043 0302 	orr.w	r3, r3, #2
    5cd0:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    5cd4:	e7a5      	b.n	5c22 <cbvprintf+0x1f6>
	switch (conv->specifier) {
    5cd6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    5cda:	2b20      	cmp	r3, #32
    5cdc:	d86f      	bhi.n	5dbe <cbvprintf+0x392>
    5cde:	a101      	add	r1, pc, #4	; (adr r1, 5ce4 <cbvprintf+0x2b8>)
    5ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    5ce4:	00005d97 	.word	0x00005d97
    5ce8:	00005dbf 	.word	0x00005dbf
    5cec:	00005dbf 	.word	0x00005dbf
    5cf0:	00005dbf 	.word	0x00005dbf
    5cf4:	00005dbf 	.word	0x00005dbf
    5cf8:	00005dbf 	.word	0x00005dbf
    5cfc:	00005dbf 	.word	0x00005dbf
    5d00:	00005dbf 	.word	0x00005dbf
    5d04:	00005dbf 	.word	0x00005dbf
    5d08:	00005c47 	.word	0x00005c47
    5d0c:	00005dbf 	.word	0x00005dbf
    5d10:	00005d97 	.word	0x00005d97
    5d14:	00005d69 	.word	0x00005d69
    5d18:	00005c47 	.word	0x00005c47
    5d1c:	00005c47 	.word	0x00005c47
    5d20:	00005c47 	.word	0x00005c47
    5d24:	00005dbf 	.word	0x00005dbf
    5d28:	00005d69 	.word	0x00005d69
    5d2c:	00005dbf 	.word	0x00005dbf
    5d30:	00005dbf 	.word	0x00005dbf
    5d34:	00005dbf 	.word	0x00005dbf
    5d38:	00005dbf 	.word	0x00005dbf
    5d3c:	00005dcd 	.word	0x00005dcd
    5d40:	00005d97 	.word	0x00005d97
    5d44:	00005df1 	.word	0x00005df1
    5d48:	00005dbf 	.word	0x00005dbf
    5d4c:	00005dbf 	.word	0x00005dbf
    5d50:	00005df1 	.word	0x00005df1
    5d54:	00005dbf 	.word	0x00005dbf
    5d58:	00005d97 	.word	0x00005d97
    5d5c:	00005dbf 	.word	0x00005dbf
    5d60:	00005dbf 	.word	0x00005dbf
    5d64:	00005d97 	.word	0x00005d97
		conv->specifier_cat = SPECIFIER_SINT;
    5d68:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5d6c:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    5d6e:	f361 0302 	bfi	r3, r1, #0, #3
    5d72:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5d76:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5d7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5d7e:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    5d80:	bf02      	ittt	eq
    5d82:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    5d86:	f041 0101 	orreq.w	r1, r1, #1
    5d8a:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    5d8e:	2a63      	cmp	r2, #99	; 0x63
    5d90:	d005      	beq.n	5d9e <cbvprintf+0x372>
	bool unsupported = false;
    5d92:	2300      	movs	r3, #0
    5d94:	e006      	b.n	5da4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_UINT;
    5d96:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5d9a:	2102      	movs	r1, #2
    5d9c:	e7e7      	b.n	5d6e <cbvprintf+0x342>
			unsupported = (conv->length_mod != LENGTH_NONE);
    5d9e:	3b00      	subs	r3, #0
    5da0:	bf18      	it	ne
    5da2:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    5da4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    5da8:	f3c2 0140 	ubfx	r1, r2, #1, #1
    5dac:	430b      	orrs	r3, r1
    5dae:	f363 0241 	bfi	r2, r3, #1, #1
    5db2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    5db6:	e6b7      	b.n	5b28 <cbvprintf+0xfc>
		} else if ((conv->length_mod != LENGTH_NONE)
    5db8:	f013 0f38 	tst.w	r3, #56	; 0x38
    5dbc:	d0e9      	beq.n	5d92 <cbvprintf+0x366>
			conv->invalid = true;
    5dbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    5dc2:	f043 0301 	orr.w	r3, r3, #1
    5dc6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    5dca:	e7e2      	b.n	5d92 <cbvprintf+0x366>
		conv->specifier_cat = SPECIFIER_PTR;
    5dcc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5dd0:	2203      	movs	r2, #3
    5dd2:	f362 0302 	bfi	r3, r2, #0, #3
    5dd6:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    5dda:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5dde:	f003 0378 	and.w	r3, r3, #120	; 0x78
    5de2:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    5de6:	f1dc 0300 	rsbs	r3, ip, #0
    5dea:	eb43 030c 	adc.w	r3, r3, ip
    5dee:	e7d9      	b.n	5da4 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    5df0:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    5df4:	2203      	movs	r2, #3
    5df6:	f362 0302 	bfi	r3, r2, #0, #3
    5dfa:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    5dfe:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    5e02:	f013 0f78 	tst.w	r3, #120	; 0x78
    5e06:	bf14      	ite	ne
    5e08:	2301      	movne	r3, #1
    5e0a:	2300      	moveq	r3, #0
    5e0c:	e7ca      	b.n	5da4 <cbvprintf+0x378>
			unsupported = true;
    5e0e:	2301      	movs	r3, #1
    5e10:	e7c8      	b.n	5da4 <cbvprintf+0x378>
		} else if (conv->width_present) {
    5e12:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    5e16:	2a00      	cmp	r2, #0
			width = conv->width_value;
    5e18:	bfb4      	ite	lt
    5e1a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    5e1e:	f04f 3bff 	movge.w	fp, #4294967295	; 0xffffffff
    5e22:	e693      	b.n	5b4c <cbvprintf+0x120>
		} else if (conv->prec_present) {
    5e24:	0799      	lsls	r1, r3, #30
    5e26:	f57f aea0 	bpl.w	5b6a <cbvprintf+0x13e>
			precision = conv->prec_value;
    5e2a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    5e2e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    5e32:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    5e34:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    5e38:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    5e3c:	f003 0207 	and.w	r2, r3, #7
    5e40:	2a04      	cmp	r2, #4
    5e42:	d109      	bne.n	5e58 <cbvprintf+0x42c>
		    && !conv->prec_present) {
    5e44:	078a      	lsls	r2, r1, #30
    5e46:	d407      	bmi.n	5e58 <cbvprintf+0x42c>
			if (conv->specifier_a) {
    5e48:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    5e4c:	2a00      	cmp	r2, #0
    5e4e:	bfb4      	ite	lt
    5e50:	f04f 080d 	movlt.w	r8, #13
    5e54:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    5e58:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    5e5c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    5e5e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    5e62:	d137      	bne.n	5ed4 <cbvprintf+0x4a8>
			switch (length_mod) {
    5e64:	1ecb      	subs	r3, r1, #3
    5e66:	2b04      	cmp	r3, #4
    5e68:	d821      	bhi.n	5eae <cbvprintf+0x482>
    5e6a:	e8df f003 	tbb	[pc, r3]
    5e6e:	0903      	.short	0x0903
    5e70:	2009      	.short	0x2009
    5e72:	20          	.byte	0x20
    5e73:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    5e74:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    5e78:	17da      	asrs	r2, r3, #31
    5e7a:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    5e7e:	e006      	b.n	5e8e <cbvprintf+0x462>
					(sint_value_type)va_arg(ap, intmax_t);
    5e80:	3407      	adds	r4, #7
    5e82:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    5e86:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    5e8a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    5e8e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5e92:	07bb      	lsls	r3, r7, #30
    5e94:	d056      	beq.n	5f44 <cbvprintf+0x518>
			OUTS(sp, fp);
    5e96:	9b02      	ldr	r3, [sp, #8]
    5e98:	462a      	mov	r2, r5
    5e9a:	4651      	mov	r1, sl
    5e9c:	4648      	mov	r0, r9
    5e9e:	f022 fb98 	bl	285d2 <outs>
    5ea2:	2800      	cmp	r0, #0
    5ea4:	f2c0 8394 	blt.w	65d0 <cbvprintf+0xba4>
    5ea8:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    5eaa:	9d02      	ldr	r5, [sp, #8]
    5eac:	e5c6      	b.n	5a3c <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5eae:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    5eb2:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    5eb4:	ea4f 72e3 	mov.w	r2, r3, asr #31
    5eb8:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5ebc:	d105      	bne.n	5eca <cbvprintf+0x49e>
				value->uint = (unsigned char)value->uint;
    5ebe:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    5ec2:	930c      	str	r3, [sp, #48]	; 0x30
    5ec4:	2300      	movs	r3, #0
    5ec6:	930d      	str	r3, [sp, #52]	; 0x34
    5ec8:	e7e1      	b.n	5e8e <cbvprintf+0x462>
			} else if (length_mod == LENGTH_H) {
    5eca:	2902      	cmp	r1, #2
    5ecc:	d1df      	bne.n	5e8e <cbvprintf+0x462>
				value->sint = (short)value->sint;
    5ece:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    5ed2:	e7d1      	b.n	5e78 <cbvprintf+0x44c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    5ed4:	2b02      	cmp	r3, #2
    5ed6:	d123      	bne.n	5f20 <cbvprintf+0x4f4>
			switch (length_mod) {
    5ed8:	1ecb      	subs	r3, r1, #3
    5eda:	2b04      	cmp	r3, #4
    5edc:	d813      	bhi.n	5f06 <cbvprintf+0x4da>
    5ede:	e8df f003 	tbb	[pc, r3]
    5ee2:	0a03      	.short	0x0a03
    5ee4:	120a      	.short	0x120a
    5ee6:	12          	.byte	0x12
    5ee7:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    5ee8:	6822      	ldr	r2, [r4, #0]
    5eea:	920c      	str	r2, [sp, #48]	; 0x30
    5eec:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    5eee:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    5ef0:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    5ef2:	4604      	mov	r4, r0
    5ef4:	e7cb      	b.n	5e8e <cbvprintf+0x462>
					(uint_value_type)va_arg(ap,
    5ef6:	1de0      	adds	r0, r4, #7
    5ef8:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    5efc:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    5f00:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    5f04:	e7f5      	b.n	5ef2 <cbvprintf+0x4c6>
					(uint_value_type)va_arg(ap, size_t);
    5f06:	f854 3b04 	ldr.w	r3, [r4], #4
    5f0a:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    5f0c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    5f0e:	f04f 0300 	mov.w	r3, #0
    5f12:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    5f14:	d0d3      	beq.n	5ebe <cbvprintf+0x492>
			} else if (length_mod == LENGTH_H) {
    5f16:	2902      	cmp	r1, #2
    5f18:	d1b9      	bne.n	5e8e <cbvprintf+0x462>
				value->uint = (unsigned short)value->uint;
    5f1a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    5f1e:	e7d0      	b.n	5ec2 <cbvprintf+0x496>
		} else if (specifier_cat == SPECIFIER_FP) {
    5f20:	2b04      	cmp	r3, #4
    5f22:	d109      	bne.n	5f38 <cbvprintf+0x50c>
					(sint_value_type)va_arg(ap, long long);
    5f24:	1de3      	adds	r3, r4, #7
    5f26:	f023 0307 	bic.w	r3, r3, #7
    5f2a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    5f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    5f32:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    5f36:	e7aa      	b.n	5e8e <cbvprintf+0x462>
		} else if (specifier_cat == SPECIFIER_PTR) {
    5f38:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    5f3a:	bf04      	itt	eq
    5f3c:	f854 3b04 	ldreq.w	r3, [r4], #4
    5f40:	930c      	streq	r3, [sp, #48]	; 0x30
    5f42:	e7a4      	b.n	5e8e <cbvprintf+0x462>
		switch (conv->specifier) {
    5f44:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    5f48:	2a78      	cmp	r2, #120	; 0x78
    5f4a:	d8ae      	bhi.n	5eaa <cbvprintf+0x47e>
    5f4c:	2a57      	cmp	r2, #87	; 0x57
    5f4e:	f200 808c 	bhi.w	606a <cbvprintf+0x63e>
    5f52:	2a25      	cmp	r2, #37	; 0x25
    5f54:	f000 80d4 	beq.w	6100 <cbvprintf+0x6d4>
    5f58:	2a24      	cmp	r2, #36	; 0x24
    5f5a:	d9a6      	bls.n	5eaa <cbvprintf+0x47e>
    5f5c:	2a41      	cmp	r2, #65	; 0x41
    5f5e:	d003      	beq.n	5f68 <cbvprintf+0x53c>
    5f60:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    5f64:	2b02      	cmp	r3, #2
    5f66:	d8a0      	bhi.n	5eaa <cbvprintf+0x47e>
	} u = {
    5f68:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	f2c0 81b7 	blt.w	62e0 <cbvprintf+0x8b4>
	} else if (conv->flag_plus) {
    5f72:	0738      	lsls	r0, r7, #28
    5f74:	f100 81b6 	bmi.w	62e4 <cbvprintf+0x8b8>
		*sign = ' ';
    5f78:	f017 0710 	ands.w	r7, r7, #16
    5f7c:	bf18      	it	ne
    5f7e:	2720      	movne	r7, #32
	int expo = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    5f80:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    5f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5f88:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (expo == 0) && (fract != 0);
    5f8c:	2d00      	cmp	r5, #0
    5f8e:	f040 81ab 	bne.w	62e8 <cbvprintf+0x8bc>
    5f92:	ea51 0003 	orrs.w	r0, r1, r3
    5f96:	bf14      	ite	ne
    5f98:	2001      	movne	r0, #1
    5f9a:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    5f9c:	02db      	lsls	r3, r3, #11
    5f9e:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    5fa2:	02c9      	lsls	r1, r1, #11
		c = 'f';
    5fa4:	2a46      	cmp	r2, #70	; 0x46
	if ((expo | fract) != 0) {
    5fa6:	ea45 0e01 	orr.w	lr, r5, r1
    5faa:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    5fae:	bf08      	it	eq
    5fb0:	2266      	moveq	r2, #102	; 0x66
	if ((expo | fract) != 0) {
    5fb2:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    5fb6:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((expo | fract) != 0) {
    5fba:	f000 8203 	beq.w	63c4 <cbvprintf+0x998>
		if (is_subnormal) {
    5fbe:	2800      	cmp	r0, #0
    5fc0:	f040 81cb 	bne.w	635a <cbvprintf+0x92e>
		fract |= BIT_63;
    5fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    5fc8:	f04f 0c00 	mov.w	ip, #0
    5fcc:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		expo -= (1023 - 1);	/* +1 since .1 vs 1. */
    5fd0:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    5fd4:	9109      	str	r1, [sp, #36]	; 0x24
    5fd6:	4663      	mov	r3, ip
		fract *= 5U;
    5fd8:	f04f 0e05 	mov.w	lr, #5
	while (expo < -2) {
    5fdc:	f115 0f02 	cmn.w	r5, #2
    5fe0:	f2c0 81c2 	blt.w	6368 <cbvprintf+0x93c>
    5fe4:	f1bc 0f00 	cmp.w	ip, #0
    5fe8:	d001      	beq.n	5fee <cbvprintf+0x5c2>
    5fea:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (expo > 0) {
    5fee:	2d00      	cmp	r5, #0
		fract += 2;
    5ff0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (expo > 0) {
    5ff4:	f300 81cd 	bgt.w	6392 <cbvprintf+0x966>
	fract >>= (4 - expo);
    5ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
    5ffa:	9908      	ldr	r1, [sp, #32]
    5ffc:	f1c5 0c04 	rsb	ip, r5, #4
    6000:	351c      	adds	r5, #28
    6002:	fa00 f505 	lsl.w	r5, r0, r5
    6006:	f1ac 0e20 	sub.w	lr, ip, #32
    600a:	fa21 f10c 	lsr.w	r1, r1, ip
    600e:	fa20 fe0e 	lsr.w	lr, r0, lr
    6012:	4329      	orrs	r1, r5
    6014:	ea41 010e 	orr.w	r1, r1, lr
    6018:	fa20 f00c 	lsr.w	r0, r0, ip
    601c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    6020:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    6024:	2947      	cmp	r1, #71	; 0x47
    6026:	f040 81d4 	bne.w	63d2 <cbvprintf+0x9a6>
		if (decexp < (-4 + 1) || decexp > precision) {
    602a:	1cdd      	adds	r5, r3, #3
    602c:	db02      	blt.n	6034 <cbvprintf+0x608>
    602e:	4598      	cmp	r8, r3
    6030:	f280 81cb 	bge.w	63ca <cbvprintf+0x99e>
			c += 'e' - 'g';  /* e or E */
    6034:	3a02      	subs	r2, #2
			if (precision > 0) {
    6036:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    603a:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    603c:	dd01      	ble.n	6042 <cbvprintf+0x616>
				precision--;
    603e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		if (!conv->flag_hash && (precision > 0)) {
    6042:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6046:	0688      	lsls	r0, r1, #26
    6048:	f100 81c3 	bmi.w	63d2 <cbvprintf+0x9a6>
    604c:	f1b8 0f00 	cmp.w	r8, #0
    6050:	bfd4      	ite	le
    6052:	2100      	movle	r1, #0
    6054:	2101      	movgt	r1, #1
	if (c == 'f') {
    6056:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    6058:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    605a:	f040 81bc 	bne.w	63d6 <cbvprintf+0x9aa>
		if (decimals < 0) {
    605e:	eb13 0508 	adds.w	r5, r3, r8
    6062:	f140 81ba 	bpl.w	63da <cbvprintf+0x9ae>
			decimals = 0;
    6066:	2500      	movs	r5, #0
    6068:	e1ba      	b.n	63e0 <cbvprintf+0x9b4>
		switch (conv->specifier) {
    606a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    606e:	2b20      	cmp	r3, #32
    6070:	f63f af1b 	bhi.w	5eaa <cbvprintf+0x47e>
    6074:	a001      	add	r0, pc, #4	; (adr r0, 607c <cbvprintf+0x650>)
    6076:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    607a:	bf00      	nop
    607c:	00006283 	.word	0x00006283
    6080:	00005eab 	.word	0x00005eab
    6084:	00005eab 	.word	0x00005eab
    6088:	00005eab 	.word	0x00005eab
    608c:	00005eab 	.word	0x00005eab
    6090:	00005eab 	.word	0x00005eab
    6094:	00005eab 	.word	0x00005eab
    6098:	00005eab 	.word	0x00005eab
    609c:	00005eab 	.word	0x00005eab
    60a0:	00005f69 	.word	0x00005f69
    60a4:	00005eab 	.word	0x00005eab
    60a8:	0000612d 	.word	0x0000612d
    60ac:	00006223 	.word	0x00006223
    60b0:	00005f69 	.word	0x00005f69
    60b4:	00005f69 	.word	0x00005f69
    60b8:	00005f69 	.word	0x00005f69
    60bc:	00005eab 	.word	0x00005eab
    60c0:	00006223 	.word	0x00006223
    60c4:	00005eab 	.word	0x00005eab
    60c8:	00005eab 	.word	0x00005eab
    60cc:	00005eab 	.word	0x00005eab
    60d0:	00005eab 	.word	0x00005eab
    60d4:	000062b9 	.word	0x000062b9
    60d8:	00006283 	.word	0x00006283
    60dc:	00006287 	.word	0x00006287
    60e0:	00005eab 	.word	0x00005eab
    60e4:	00005eab 	.word	0x00005eab
    60e8:	00006107 	.word	0x00006107
    60ec:	00005eab 	.word	0x00005eab
    60f0:	00006283 	.word	0x00006283
    60f4:	00005eab 	.word	0x00005eab
    60f8:	00005eab 	.word	0x00005eab
    60fc:	00006283 	.word	0x00006283
			OUTC('%');
    6100:	4651      	mov	r1, sl
    6102:	4610      	mov	r0, r2
    6104:	e4a4      	b.n	5a50 <cbvprintf+0x24>
			if (precision >= 0) {
    6106:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    610a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    610c:	db09      	blt.n	6122 <cbvprintf+0x6f6>
				len = strnlen(bps, precision);
    610e:	4641      	mov	r1, r8
    6110:	4610      	mov	r0, r2
    6112:	9203      	str	r2, [sp, #12]
    6114:	f028 fbc2 	bl	2e89c <strnlen>
				len = strlen(bps);
    6118:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    611a:	2700      	movs	r7, #0
			bpe = bps + len;
    611c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    611e:	b962      	cbnz	r2, 613a <cbvprintf+0x70e>
    6120:	e6c3      	b.n	5eaa <cbvprintf+0x47e>
				len = strlen(bps);
    6122:	4610      	mov	r0, r2
    6124:	9203      	str	r2, [sp, #12]
    6126:	f7fa ffb4 	bl	1092 <strlen>
    612a:	e7f5      	b.n	6118 <cbvprintf+0x6ec>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    612c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    612e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    6132:	2700      	movs	r7, #0
			bpe = buf + 1;
    6134:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    6138:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    613a:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    613c:	b107      	cbz	r7, 6140 <cbvprintf+0x714>
			nj_len += 1U;
    613e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    6140:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    6144:	06c1      	lsls	r1, r0, #27
    6146:	f140 8237 	bpl.w	65b8 <cbvprintf+0xb8c>
			nj_len += 2U;
    614a:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    614c:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    614e:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    6150:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    6152:	bf44      	itt	mi
    6154:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    6156:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    6158:	f1bb 0f00 	cmp.w	fp, #0
    615c:	dd23      	ble.n	61a6 <cbvprintf+0x77a>
			width -= (int)nj_len;
    615e:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    6162:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    6166:	0759      	lsls	r1, r3, #29
    6168:	f3c3 0880 	ubfx	r8, r3, #2, #1
    616c:	d41b      	bmi.n	61a6 <cbvprintf+0x77a>
				if (conv->flag_zero) {
    616e:	0658      	lsls	r0, r3, #25
    6170:	f140 8236 	bpl.w	65e0 <cbvprintf+0xbb4>
					if (sign != 0) {
    6174:	2f00      	cmp	r7, #0
    6176:	f000 8236 	beq.w	65e6 <cbvprintf+0xbba>
						OUTC(sign);
    617a:	4651      	mov	r1, sl
    617c:	4638      	mov	r0, r7
    617e:	9203      	str	r2, [sp, #12]
    6180:	47c8      	blx	r9
    6182:	2800      	cmp	r0, #0
    6184:	f2c0 8224 	blt.w	65d0 <cbvprintf+0xba4>
    6188:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    618a:	4647      	mov	r7, r8
						OUTC(sign);
    618c:	3601      	adds	r6, #1
					pad = '0';
    618e:	f04f 0830 	mov.w	r8, #48	; 0x30
    6192:	445e      	add	r6, fp
    6194:	465b      	mov	r3, fp
				while (width-- > 0) {
    6196:	2b00      	cmp	r3, #0
    6198:	eba6 000b 	sub.w	r0, r6, fp
    619c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    61a0:	f300 820e 	bgt.w	65c0 <cbvprintf+0xb94>
    61a4:	4606      	mov	r6, r0
		if (sign != 0) {
    61a6:	b147      	cbz	r7, 61ba <cbvprintf+0x78e>
			OUTC(sign);
    61a8:	4651      	mov	r1, sl
    61aa:	4638      	mov	r0, r7
    61ac:	9203      	str	r2, [sp, #12]
    61ae:	47c8      	blx	r9
    61b0:	2800      	cmp	r0, #0
    61b2:	f2c0 820d 	blt.w	65d0 <cbvprintf+0xba4>
    61b6:	9a03      	ldr	r2, [sp, #12]
    61b8:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    61ba:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    61be:	0659      	lsls	r1, r3, #25
    61c0:	f140 8265 	bpl.w	668e <cbvprintf+0xc62>
			if (conv->specifier_a) {
    61c4:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    61c8:	2b00      	cmp	r3, #0
    61ca:	eba6 0602 	sub.w	r6, r6, r2
    61ce:	f280 8219 	bge.w	6604 <cbvprintf+0xbd8>
    61d2:	4617      	mov	r7, r2
    61d4:	46b8      	mov	r8, r7
    61d6:	19f3      	adds	r3, r6, r7
				while (*cp != 'p') {
    61d8:	f817 0b01 	ldrb.w	r0, [r7], #1
    61dc:	2870      	cmp	r0, #112	; 0x70
    61de:	f040 8205 	bne.w	65ec <cbvprintf+0xbc0>
			while (pad_len-- > 0) {
    61e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
    61e4:	461e      	mov	r6, r3
    61e6:	441f      	add	r7, r3
    61e8:	1bbb      	subs	r3, r7, r6
    61ea:	2b00      	cmp	r3, #0
    61ec:	f300 8248 	bgt.w	6680 <cbvprintf+0xc54>
			OUTS(cp, bpe);
    61f0:	462b      	mov	r3, r5
    61f2:	4642      	mov	r2, r8
			OUTS(bps, bpe);
    61f4:	4651      	mov	r1, sl
    61f6:	4648      	mov	r0, r9
    61f8:	f022 f9eb 	bl	285d2 <outs>
    61fc:	2800      	cmp	r0, #0
    61fe:	f2c0 81e7 	blt.w	65d0 <cbvprintf+0xba4>
    6202:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    6204:	4606      	mov	r6, r0
    6206:	4483      	add	fp, r0
		while (width > 0) {
    6208:	ebab 0306 	sub.w	r3, fp, r6
    620c:	2b00      	cmp	r3, #0
    620e:	f77f ae4c 	ble.w	5eaa <cbvprintf+0x47e>
			OUTC(' ');
    6212:	4651      	mov	r1, sl
    6214:	2020      	movs	r0, #32
    6216:	47c8      	blx	r9
    6218:	2800      	cmp	r0, #0
    621a:	f2c0 81d9 	blt.w	65d0 <cbvprintf+0xba4>
    621e:	3601      	adds	r6, #1
			--width;
    6220:	e7f2      	b.n	6208 <cbvprintf+0x7dc>
			if (conv->flag_plus) {
    6222:	073d      	lsls	r5, r7, #28
    6224:	d42b      	bmi.n	627e <cbvprintf+0x852>
				sign = ' ';
    6226:	f017 0710 	ands.w	r7, r7, #16
    622a:	bf18      	it	ne
    622c:	2720      	movne	r7, #32
			sint = value->sint;
    622e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    6232:	2b00      	cmp	r3, #0
    6234:	da05      	bge.n	6242 <cbvprintf+0x816>
				value->uint = (uint_value_type)-sint;
    6236:	4252      	negs	r2, r2
    6238:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    623c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    6240:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    6242:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6246:	9300      	str	r3, [sp, #0]
    6248:	aa0e      	add	r2, sp, #56	; 0x38
    624a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    624e:	ab13      	add	r3, sp, #76	; 0x4c
    6250:	f7ff fba0 	bl	5994 <encode_uint>
    6254:	4602      	mov	r2, r0
			if (precision >= 0) {
    6256:	f1b8 0f00 	cmp.w	r8, #0
    625a:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    625e:	f6ff af5e 	blt.w	611e <cbvprintf+0x6f2>
				conv->flag_zero = false;
    6262:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    6266:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    6268:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    626c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    626e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    6272:	f67f af54 	bls.w	611e <cbvprintf+0x6f2>
					conv->pad0_value = precision - (int)len;
    6276:	eba8 0303 	sub.w	r3, r8, r3
    627a:	930f      	str	r3, [sp, #60]	; 0x3c
    627c:	e74f      	b.n	611e <cbvprintf+0x6f2>
				sign = '+';
    627e:	272b      	movs	r7, #43	; 0x2b
    6280:	e7d5      	b.n	622e <cbvprintf+0x802>
		switch (conv->specifier) {
    6282:	2700      	movs	r7, #0
    6284:	e7dd      	b.n	6242 <cbvprintf+0x816>
			if (value->ptr != NULL) {
    6286:	980c      	ldr	r0, [sp, #48]	; 0x30
    6288:	2800      	cmp	r0, #0
    628a:	f000 8191 	beq.w	65b0 <cbvprintf+0xb84>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    628e:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    6292:	9300      	str	r3, [sp, #0]
    6294:	aa0e      	add	r2, sp, #56	; 0x38
    6296:	ab13      	add	r3, sp, #76	; 0x4c
    6298:	2100      	movs	r1, #0
    629a:	f7ff fb7b 	bl	5994 <encode_uint>
				conv->altform_0c = true;
    629e:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    62a2:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    62a6:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    62aa:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    62ae:	4602      	mov	r2, r0
				conv->altform_0c = true;
    62b0:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    62b4:	2700      	movs	r7, #0
				goto prec_int_pad0;
    62b6:	e7ce      	b.n	6256 <cbvprintf+0x82a>
				store_count(conv, value->ptr, count);
    62b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    62ba:	2907      	cmp	r1, #7
    62bc:	f63f adf5 	bhi.w	5eaa <cbvprintf+0x47e>
    62c0:	e8df f001 	tbb	[pc, r1]
    62c4:	0c06040c 	.word	0x0c06040c
    62c8:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    62cc:	701e      	strb	r6, [r3, #0]
		break;
    62ce:	e5ec      	b.n	5eaa <cbvprintf+0x47e>
		*(short *)dp = (short)count;
    62d0:	801e      	strh	r6, [r3, #0]
		break;
    62d2:	e5ea      	b.n	5eaa <cbvprintf+0x47e>
		*(intmax_t *)dp = (intmax_t)count;
    62d4:	17f2      	asrs	r2, r6, #31
    62d6:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    62da:	e5e6      	b.n	5eaa <cbvprintf+0x47e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    62dc:	601e      	str	r6, [r3, #0]
		break;
    62de:	e5e4      	b.n	5eaa <cbvprintf+0x47e>
		*sign = '-';
    62e0:	272d      	movs	r7, #45	; 0x2d
    62e2:	e64d      	b.n	5f80 <cbvprintf+0x554>
		*sign = '+';
    62e4:	272b      	movs	r7, #43	; 0x2b
    62e6:	e64b      	b.n	5f80 <cbvprintf+0x554>
	if (expo == BIT_MASK(EXPONENT_BITS)) {
    62e8:	f240 70ff 	movw	r0, #2047	; 0x7ff
    62ec:	4285      	cmp	r5, r0
    62ee:	d131      	bne.n	6354 <cbvprintf+0x928>
			if (isupper((int)c)) {
    62f0:	3201      	adds	r2, #1
    62f2:	48b9      	ldr	r0, [pc, #740]	; (65d8 <cbvprintf+0xbac>)
    62f4:	b2d2      	uxtb	r2, r2
		if (fract == 0) {
    62f6:	430b      	orrs	r3, r1
    62f8:	5c12      	ldrb	r2, [r2, r0]
    62fa:	f002 0203 	and.w	r2, r2, #3
    62fe:	d11b      	bne.n	6338 <cbvprintf+0x90c>
			if (isupper((int)c)) {
    6300:	2a01      	cmp	r2, #1
    6302:	d111      	bne.n	6328 <cbvprintf+0x8fc>
				*buf++ = 'I';
    6304:	2349      	movs	r3, #73	; 0x49
    6306:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    630a:	234e      	movs	r3, #78	; 0x4e
    630c:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    6310:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    6312:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    6316:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    631a:	f36f 1386 	bfc	r3, #6, #1
    631e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    6322:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    6326:	e707      	b.n	6138 <cbvprintf+0x70c>
				*buf++ = 'i';
    6328:	2369      	movs	r3, #105	; 0x69
    632a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    632e:	236e      	movs	r3, #110	; 0x6e
    6330:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    6334:	2366      	movs	r3, #102	; 0x66
    6336:	e7ec      	b.n	6312 <cbvprintf+0x8e6>
			if (isupper((int)c)) {
    6338:	2a01      	cmp	r2, #1
				*buf++ = 'N';
    633a:	bf07      	ittee	eq
    633c:	234e      	moveq	r3, #78	; 0x4e
				*buf++ = 'A';
    633e:	2241      	moveq	r2, #65	; 0x41
				*buf++ = 'n';
    6340:	236e      	movne	r3, #110	; 0x6e
				*buf++ = 'a';
    6342:	2261      	movne	r2, #97	; 0x61
				*buf++ = 'N';
    6344:	bf0c      	ite	eq
    6346:	f88d 304c 	strbeq.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    634a:	f88d 304c 	strbne.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    634e:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    6352:	e7de      	b.n	6312 <cbvprintf+0x8e6>
	bool is_subnormal = (expo == 0) && (fract != 0);
    6354:	2000      	movs	r0, #0
    6356:	e621      	b.n	5f9c <cbvprintf+0x570>
				expo--;
    6358:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    635a:	1849      	adds	r1, r1, r1
    635c:	415b      	adcs	r3, r3
    635e:	2b00      	cmp	r3, #0
    6360:	dafa      	bge.n	6358 <cbvprintf+0x92c>
    6362:	e9cd 1308 	strd	r1, r3, [sp, #32]
    6366:	e62d      	b.n	5fc4 <cbvprintf+0x598>
			fract >>= 1;
    6368:	0840      	lsrs	r0, r0, #1
    636a:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    636e:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    6370:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    6374:	46ac      	mov	ip, r5
			expo++;
    6376:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    637a:	d2f5      	bcs.n	6368 <cbvprintf+0x93c>
		fract *= 5U;
    637c:	fb0e f501 	mul.w	r5, lr, r1
    6380:	fba0 010e 	umull	r0, r1, r0, lr
    6384:	4429      	add	r1, r5
		decexp--;
    6386:	3b01      	subs	r3, #1
		expo++;
    6388:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    638c:	f04f 0c01 	mov.w	ip, #1
    6390:	e624      	b.n	5fdc <cbvprintf+0x5b0>
		fract += 2;
    6392:	3102      	adds	r1, #2
    6394:	f140 0000 	adc.w	r0, r0, #0
    6398:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    639c:	a808      	add	r0, sp, #32
    639e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    63a2:	f022 f8e7 	bl	28574 <_ldiv5>
		decexp++;
    63a6:	9b04      	ldr	r3, [sp, #16]
    63a8:	9a03      	ldr	r2, [sp, #12]
    63aa:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		expo--;
    63ae:	3d01      	subs	r5, #1
		decexp++;
    63b0:	3301      	adds	r3, #1
			fract <<= 1;
    63b2:	1849      	adds	r1, r1, r1
    63b4:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    63b6:	2800      	cmp	r0, #0
			expo--;
    63b8:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		} while (!(fract & BIT_63));
    63bc:	daf9      	bge.n	63b2 <cbvprintf+0x986>
    63be:	e9cd 1008 	strd	r1, r0, [sp, #32]
    63c2:	e614      	b.n	5fee <cbvprintf+0x5c2>
    63c4:	2300      	movs	r3, #0
    63c6:	461d      	mov	r5, r3
    63c8:	e616      	b.n	5ff8 <cbvprintf+0x5cc>
			precision -= decexp;
    63ca:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    63ce:	2266      	movs	r2, #102	; 0x66
    63d0:	e637      	b.n	6042 <cbvprintf+0x616>
	bool prune_zero = false;
    63d2:	2100      	movs	r1, #0
    63d4:	e63f      	b.n	6056 <cbvprintf+0x62a>
		decimals = precision + 1;
    63d6:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    63da:	2d10      	cmp	r5, #16
    63dc:	bfa8      	it	ge
    63de:	2510      	movge	r5, #16
    63e0:	2110      	movs	r1, #16
    63e2:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    63e4:	2000      	movs	r0, #0
    63e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    63ea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    63ee:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    63f2:	b9a5      	cbnz	r5, 641e <cbvprintf+0x9f2>
	fract += round;
    63f4:	9d08      	ldr	r5, [sp, #32]
    63f6:	1949      	adds	r1, r1, r5
    63f8:	9d09      	ldr	r5, [sp, #36]	; 0x24
    63fa:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    63fe:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    6402:	d21b      	bcs.n	643c <cbvprintf+0xa10>
	fract += round;
    6404:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    6408:	2a66      	cmp	r2, #102	; 0x66
    640a:	f040 8099 	bne.w	6540 <cbvprintf+0xb14>
		if (decexp > 0) {
    640e:	2b00      	cmp	r3, #0
    6410:	dc23      	bgt.n	645a <cbvprintf+0xa2e>
			*buf++ = '0';
    6412:	2130      	movs	r1, #48	; 0x30
    6414:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    6418:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    641c:	e02f      	b.n	647e <cbvprintf+0xa52>
	*v >>= 1;
    641e:	0849      	lsrs	r1, r1, #1
    6420:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    6424:	0840      	lsrs	r0, r0, #1
    6426:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    642a:	a80a      	add	r0, sp, #40	; 0x28
    642c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6430:	3d01      	subs	r5, #1
    6432:	f022 f89f 	bl	28574 <_ldiv5>
    6436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    643a:	e7d8      	b.n	63ee <cbvprintf+0x9c2>
	*v >>= 1;
    643c:	0849      	lsrs	r1, r1, #1
    643e:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    6442:	a808      	add	r0, sp, #32
	*v >>= 1;
    6444:	086d      	lsrs	r5, r5, #1
    6446:	e9cd 2304 	strd	r2, r3, [sp, #16]
    644a:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    644e:	f022 f891 	bl	28574 <_ldiv5>
		decexp++;
    6452:	9b05      	ldr	r3, [sp, #20]
    6454:	9a04      	ldr	r2, [sp, #16]
    6456:	3301      	adds	r3, #1
    6458:	e7d6      	b.n	6408 <cbvprintf+0x9dc>
	char *buf = bps;
    645a:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    645c:	9907      	ldr	r1, [sp, #28]
    645e:	2900      	cmp	r1, #0
    6460:	dd0b      	ble.n	647a <cbvprintf+0xa4e>
				*buf++ = _get_digit(&fract, &digit_count);
    6462:	a907      	add	r1, sp, #28
    6464:	a808      	add	r0, sp, #32
    6466:	e9cd 2304 	strd	r2, r3, [sp, #16]
    646a:	f022 f89b 	bl	285a4 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    646e:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    6470:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    6474:	3b01      	subs	r3, #1
    6476:	9a04      	ldr	r2, [sp, #16]
    6478:	d1f0      	bne.n	645c <cbvprintf+0xa30>
			conv->pad0_value = decexp;
    647a:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    647c:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    647e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    6482:	0689      	lsls	r1, r1, #26
    6484:	d402      	bmi.n	648c <cbvprintf+0xa60>
    6486:	f1b8 0f00 	cmp.w	r8, #0
    648a:	dd1d      	ble.n	64c8 <cbvprintf+0xa9c>
			*buf++ = '.';
    648c:	212e      	movs	r1, #46	; 0x2e
    648e:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    6492:	b19b      	cbz	r3, 64bc <cbvprintf+0xa90>
    6494:	f1b8 0f00 	cmp.w	r8, #0
    6498:	dd16      	ble.n	64c8 <cbvprintf+0xa9c>
			conv->pad0_value = -decexp;
    649a:	4259      	negs	r1, r3
    649c:	4541      	cmp	r1, r8
    649e:	bfa8      	it	ge
    64a0:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    64a2:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    64a6:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    64a8:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    64aa:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    64ae:	bfd4      	ite	le
    64b0:	2100      	movle	r1, #0
    64b2:	2101      	movgt	r1, #1
    64b4:	f361 1045 	bfi	r0, r1, #5, #1
    64b8:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    64bc:	f1b8 0f00 	cmp.w	r8, #0
    64c0:	dd02      	ble.n	64c8 <cbvprintf+0xa9c>
    64c2:	9907      	ldr	r1, [sp, #28]
    64c4:	2900      	cmp	r1, #0
    64c6:	dc56      	bgt.n	6576 <cbvprintf+0xb4a>
	if (prune_zero) {
    64c8:	9903      	ldr	r1, [sp, #12]
    64ca:	2900      	cmp	r1, #0
    64cc:	d163      	bne.n	6596 <cbvprintf+0xb6a>
	conv->pad0_pre_exp = precision;
    64ce:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    64d2:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    64d6:	2945      	cmp	r1, #69	; 0x45
    64d8:	d121      	bne.n	651e <cbvprintf+0xaf2>
		if (decexp < 0) {
    64da:	2b00      	cmp	r3, #0
		*buf++ = c;
    64dc:	4629      	mov	r1, r5
			decexp = -decexp;
    64de:	bfb8      	it	lt
    64e0:	425b      	neglt	r3, r3
		*buf++ = c;
    64e2:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    64e6:	bfb4      	ite	lt
    64e8:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    64ea:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    64ec:	2b63      	cmp	r3, #99	; 0x63
    64ee:	706a      	strb	r2, [r5, #1]
    64f0:	dd09      	ble.n	6506 <cbvprintf+0xada>
			*buf++ = (decexp / 100) + '0';
    64f2:	2064      	movs	r0, #100	; 0x64
    64f4:	fbb3 f2f0 	udiv	r2, r3, r0
    64f8:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    64fc:	1ce9      	adds	r1, r5, #3
    64fe:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    6502:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    6506:	200a      	movs	r0, #10
    6508:	460d      	mov	r5, r1
    650a:	fbb3 f2f0 	udiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    650e:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    6512:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    6516:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    6518:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    651c:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    651e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6520:	2b00      	cmp	r3, #0
    6522:	dc43      	bgt.n	65ac <cbvprintf+0xb80>
    6524:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6526:	2b00      	cmp	r3, #0
    6528:	bfd4      	ite	le
    652a:	2300      	movle	r3, #0
    652c:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    652e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    6532:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    6536:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    6538:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    653c:	702b      	strb	r3, [r5, #0]
	return bps;
    653e:	e5fb      	b.n	6138 <cbvprintf+0x70c>
		*buf = _get_digit(&fract, &digit_count);
    6540:	a907      	add	r1, sp, #28
    6542:	a808      	add	r0, sp, #32
    6544:	e9cd 2304 	strd	r2, r3, [sp, #16]
    6548:	f022 f82c 	bl	285a4 <_get_digit>
		if (*buf++ != '0') {
    654c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    6550:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    6554:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    6558:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    655a:	bf18      	it	ne
    655c:	f103 33ff 	addne.w	r3, r3, #4294967295	; 0xffffffff
		if (conv->flag_hash || (precision > 0)) {
    6560:	0688      	lsls	r0, r1, #26
    6562:	d402      	bmi.n	656a <cbvprintf+0xb3e>
    6564:	f1b8 0f00 	cmp.w	r8, #0
    6568:	dd12      	ble.n	6590 <cbvprintf+0xb64>
			*buf++ = '.';
    656a:	212e      	movs	r1, #46	; 0x2e
    656c:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    6570:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    6574:	e7a2      	b.n	64bc <cbvprintf+0xa90>
		*buf++ = _get_digit(&fract, &digit_count);
    6576:	a907      	add	r1, sp, #28
    6578:	a808      	add	r0, sp, #32
    657a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    657e:	f022 f811 	bl	285a4 <_get_digit>
		precision--;
    6582:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    6586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    658a:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    658e:	e795      	b.n	64bc <cbvprintf+0xa90>
		if (*buf++ != '0') {
    6590:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    6594:	e798      	b.n	64c8 <cbvprintf+0xa9c>
		conv->pad0_pre_exp = 0;
    6596:	2100      	movs	r1, #0
    6598:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    659a:	4628      	mov	r0, r5
    659c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    65a0:	2930      	cmp	r1, #48	; 0x30
    65a2:	d0fa      	beq.n	659a <cbvprintf+0xb6e>
		if (*buf != '.') {
    65a4:	292e      	cmp	r1, #46	; 0x2e
    65a6:	bf18      	it	ne
    65a8:	4605      	movne	r5, r0
    65aa:	e792      	b.n	64d2 <cbvprintf+0xaa6>
		|| (conv->pad0_pre_exp > 0);
    65ac:	2301      	movs	r3, #1
    65ae:	e7be      	b.n	652e <cbvprintf+0xb02>
			bpe = bps + 5;
    65b0:	4d0a      	ldr	r5, [pc, #40]	; (65dc <cbvprintf+0xbb0>)
		char sign = 0;
    65b2:	4607      	mov	r7, r0
			bps = "(nil)";
    65b4:	1f6a      	subs	r2, r5, #5
    65b6:	e5c0      	b.n	613a <cbvprintf+0x70e>
		} else if (conv->altform_0) {
    65b8:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    65ba:	bf48      	it	mi
    65bc:	3301      	addmi	r3, #1
    65be:	e5c5      	b.n	614c <cbvprintf+0x720>
					OUTC(pad);
    65c0:	4651      	mov	r1, sl
    65c2:	4640      	mov	r0, r8
    65c4:	9203      	str	r2, [sp, #12]
    65c6:	47c8      	blx	r9
    65c8:	2800      	cmp	r0, #0
    65ca:	9a03      	ldr	r2, [sp, #12]
    65cc:	f6bf ade2 	bge.w	6194 <cbvprintf+0x768>
#undef OUTS
#undef OUTC
}
    65d0:	b01b      	add	sp, #108	; 0x6c
    65d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65d6:	bf00      	nop
    65d8:	00033da0 	.word	0x00033da0
    65dc:	000318ca 	.word	0x000318ca
				char pad = ' ';
    65e0:	f04f 0820 	mov.w	r8, #32
    65e4:	e5d5      	b.n	6192 <cbvprintf+0x766>
					pad = '0';
    65e6:	f04f 0830 	mov.w	r8, #48	; 0x30
    65ea:	e5d2      	b.n	6192 <cbvprintf+0x766>
					OUTC(*cp++);
    65ec:	4651      	mov	r1, sl
    65ee:	47c8      	blx	r9
    65f0:	2800      	cmp	r0, #0
    65f2:	f6bf adef 	bge.w	61d4 <cbvprintf+0x7a8>
    65f6:	e7eb      	b.n	65d0 <cbvprintf+0xba4>
					OUTC(*cp++);
    65f8:	4651      	mov	r1, sl
    65fa:	9203      	str	r2, [sp, #12]
    65fc:	47c8      	blx	r9
    65fe:	2800      	cmp	r0, #0
    6600:	9a03      	ldr	r2, [sp, #12]
    6602:	dbe5      	blt.n	65d0 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    6604:	7810      	ldrb	r0, [r2, #0]
    6606:	4b37      	ldr	r3, [pc, #220]	; (66e4 <cbvprintf+0xcb8>)
    6608:	5cc3      	ldrb	r3, [r0, r3]
    660a:	075b      	lsls	r3, r3, #29
    660c:	4617      	mov	r7, r2
    660e:	eb06 0802 	add.w	r8, r6, r2
    6612:	f102 0201 	add.w	r2, r2, #1
    6616:	d4ef      	bmi.n	65f8 <cbvprintf+0xbcc>
				if (!conv->pad_postdp) {
    6618:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    661c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    661e:	0699      	lsls	r1, r3, #26
    6620:	d407      	bmi.n	6632 <cbvprintf+0xc06>
    6622:	44b0      	add	r8, r6
					while (pad_len-- > 0) {
    6624:	2e00      	cmp	r6, #0
    6626:	eba8 0206 	sub.w	r2, r8, r6
    662a:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
    662e:	dc0f      	bgt.n	6650 <cbvprintf+0xc24>
    6630:	4690      	mov	r8, r2
				if (*cp == '.') {
    6632:	7838      	ldrb	r0, [r7, #0]
    6634:	282e      	cmp	r0, #46	; 0x2e
    6636:	d108      	bne.n	664a <cbvprintf+0xc1e>
					OUTC(*cp++);
    6638:	4651      	mov	r1, sl
    663a:	47c8      	blx	r9
						OUTC('0');
    663c:	2800      	cmp	r0, #0
    663e:	dbc7      	blt.n	65d0 <cbvprintf+0xba4>
					while (pad_len-- > 0) {
    6640:	2e00      	cmp	r6, #0
						OUTC('0');
    6642:	f108 0801 	add.w	r8, r8, #1
					while (pad_len-- > 0) {
    6646:	dc09      	bgt.n	665c <cbvprintf+0xc30>
					OUTC(*cp++);
    6648:	3701      	adds	r7, #1
    664a:	eba8 0607 	sub.w	r6, r8, r7
    664e:	e00e      	b.n	666e <cbvprintf+0xc42>
						OUTC('0');
    6650:	4651      	mov	r1, sl
    6652:	2030      	movs	r0, #48	; 0x30
    6654:	47c8      	blx	r9
    6656:	2800      	cmp	r0, #0
    6658:	dae4      	bge.n	6624 <cbvprintf+0xbf8>
    665a:	e7b9      	b.n	65d0 <cbvprintf+0xba4>
						OUTC('0');
    665c:	4651      	mov	r1, sl
    665e:	2030      	movs	r0, #48	; 0x30
    6660:	47c8      	blx	r9
    6662:	3e01      	subs	r6, #1
    6664:	e7ea      	b.n	663c <cbvprintf+0xc10>
					OUTC(*cp++);
    6666:	4651      	mov	r1, sl
    6668:	47c8      	blx	r9
    666a:	2800      	cmp	r0, #0
    666c:	dbb0      	blt.n	65d0 <cbvprintf+0xba4>
				while (isdigit((int)*cp)) {
    666e:	4a1d      	ldr	r2, [pc, #116]	; (66e4 <cbvprintf+0xcb8>)
    6670:	46b8      	mov	r8, r7
    6672:	19f3      	adds	r3, r6, r7
    6674:	f817 0b01 	ldrb.w	r0, [r7], #1
    6678:	5c12      	ldrb	r2, [r2, r0]
    667a:	0752      	lsls	r2, r2, #29
    667c:	d4f3      	bmi.n	6666 <cbvprintf+0xc3a>
    667e:	e5b0      	b.n	61e2 <cbvprintf+0x7b6>
				OUTC('0');
    6680:	4651      	mov	r1, sl
    6682:	2030      	movs	r0, #48	; 0x30
    6684:	47c8      	blx	r9
    6686:	2800      	cmp	r0, #0
    6688:	dba2      	blt.n	65d0 <cbvprintf+0xba4>
    668a:	3601      	adds	r6, #1
    668c:	e5ac      	b.n	61e8 <cbvprintf+0x7bc>
			if (conv->altform_0c | conv->altform_0) {
    668e:	06d8      	lsls	r0, r3, #27
    6690:	d401      	bmi.n	6696 <cbvprintf+0xc6a>
    6692:	0719      	lsls	r1, r3, #28
    6694:	d507      	bpl.n	66a6 <cbvprintf+0xc7a>
				OUTC('0');
    6696:	4651      	mov	r1, sl
    6698:	2030      	movs	r0, #48	; 0x30
    669a:	9203      	str	r2, [sp, #12]
    669c:	47c8      	blx	r9
    669e:	2800      	cmp	r0, #0
    66a0:	db96      	blt.n	65d0 <cbvprintf+0xba4>
    66a2:	9a03      	ldr	r2, [sp, #12]
    66a4:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    66a6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    66aa:	06db      	lsls	r3, r3, #27
    66ac:	d508      	bpl.n	66c0 <cbvprintf+0xc94>
				OUTC(conv->specifier);
    66ae:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    66b2:	9203      	str	r2, [sp, #12]
    66b4:	4651      	mov	r1, sl
    66b6:	47c8      	blx	r9
    66b8:	2800      	cmp	r0, #0
    66ba:	db89      	blt.n	65d0 <cbvprintf+0xba4>
    66bc:	9a03      	ldr	r2, [sp, #12]
    66be:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    66c0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    66c2:	4437      	add	r7, r6
    66c4:	1bbb      	subs	r3, r7, r6
    66c6:	2b00      	cmp	r3, #0
    66c8:	dc01      	bgt.n	66ce <cbvprintf+0xca2>
			OUTS(bps, bpe);
    66ca:	462b      	mov	r3, r5
    66cc:	e592      	b.n	61f4 <cbvprintf+0x7c8>
				OUTC('0');
    66ce:	4651      	mov	r1, sl
    66d0:	2030      	movs	r0, #48	; 0x30
    66d2:	9203      	str	r2, [sp, #12]
    66d4:	47c8      	blx	r9
    66d6:	2800      	cmp	r0, #0
    66d8:	f6ff af7a 	blt.w	65d0 <cbvprintf+0xba4>
    66dc:	9a03      	ldr	r2, [sp, #12]
    66de:	3601      	adds	r6, #1
    66e0:	e7f0      	b.n	66c4 <cbvprintf+0xc98>
    66e2:	bf00      	nop
    66e4:	00033da1 	.word	0x00033da1

000066e8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    66e8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    66ea:	4910      	ldr	r1, [pc, #64]	; (672c <enable_logger+0x44>)
    66ec:	4810      	ldr	r0, [pc, #64]	; (6730 <enable_logger+0x48>)
{
    66ee:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    66f0:	2200      	movs	r2, #0
    66f2:	f027 fdac 	bl	2e24e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    66f6:	4d0f      	ldr	r5, [pc, #60]	; (6734 <enable_logger+0x4c>)
    66f8:	490f      	ldr	r1, [pc, #60]	; (6738 <enable_logger+0x50>)
    66fa:	2200      	movs	r2, #0
    66fc:	2300      	movs	r3, #0
    66fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
    6702:	2400      	movs	r4, #0
    6704:	230e      	movs	r3, #14
    6706:	e9cd 3403 	strd	r3, r4, [sp, #12]
    670a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    670e:	4b0b      	ldr	r3, [pc, #44]	; (673c <enable_logger+0x54>)
    6710:	9400      	str	r4, [sp, #0]
    6712:	f44f 7240 	mov.w	r2, #768	; 0x300
    6716:	4628      	mov	r0, r5
    6718:	f01e f890 	bl	2483c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    671c:	4908      	ldr	r1, [pc, #32]	; (6740 <enable_logger+0x58>)
    671e:	4628      	mov	r0, r5
    6720:	f027 fa13 	bl	2db4a <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    6724:	4620      	mov	r0, r4
    6726:	b009      	add	sp, #36	; 0x24
    6728:	bd30      	pop	{r4, r5, pc}
    672a:	bf00      	nop
    672c:	00006745 	.word	0x00006745
    6730:	20001570 	.word	0x20001570
    6734:	200015a8 	.word	0x200015a8
    6738:	20005de0 	.word	0x20005de0
    673c:	0000695d 	.word	0x0000695d
    6740:	000318cb 	.word	0x000318cb

00006744 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
    6744:	4801      	ldr	r0, [pc, #4]	; (674c <log_process_thread_timer_expiry_fn+0x8>)
    6746:	f01e babb 	b.w	24cc0 <z_impl_k_sem_give>
    674a:	bf00      	nop
    674c:	20000d6c 	.word	0x20000d6c

00006750 <log_init>:
{
    6750:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6752:	4b12      	ldr	r3, [pc, #72]	; (679c <log_init+0x4c>)
    6754:	f3bf 8f5b 	dmb	ish
    6758:	e853 5f00 	ldrex	r5, [r3]
    675c:	1c6a      	adds	r2, r5, #1
    675e:	e843 2100 	strex	r1, r2, [r3]
    6762:	2900      	cmp	r1, #0
    6764:	d1f8      	bne.n	6758 <log_init+0x8>
    6766:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    676a:	b92d      	cbnz	r5, 6778 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    676c:	4c0c      	ldr	r4, [pc, #48]	; (67a0 <log_init+0x50>)
    676e:	4e0d      	ldr	r6, [pc, #52]	; (67a4 <log_init+0x54>)
    6770:	1b36      	subs	r6, r6, r4
    6772:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    6774:	42b5      	cmp	r5, r6
    6776:	db00      	blt.n	677a <log_init+0x2a>
}
    6778:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    677a:	7b23      	ldrb	r3, [r4, #12]
    677c:	b153      	cbz	r3, 6794 <log_init+0x44>
			if (backend->api->init != NULL) {
    677e:	6823      	ldr	r3, [r4, #0]
    6780:	699b      	ldr	r3, [r3, #24]
    6782:	b10b      	cbz	r3, 6788 <log_init+0x38>
				backend->api->init(backend);
    6784:	4620      	mov	r0, r4
    6786:	4798      	blx	r3
			log_backend_enable(backend,
    6788:	6863      	ldr	r3, [r4, #4]
    678a:	2204      	movs	r2, #4
    678c:	6819      	ldr	r1, [r3, #0]
    678e:	4620      	mov	r0, r4
    6790:	f000 f992 	bl	6ab8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    6794:	3501      	adds	r5, #1
    6796:	3410      	adds	r4, #16
    6798:	e7ec      	b.n	6774 <log_init+0x24>
    679a:	bf00      	nop
    679c:	200021ec 	.word	0x200021ec
    67a0:	0002f584 	.word	0x0002f584
    67a4:	0002f594 	.word	0x0002f594

000067a8 <z_log_notify_backend_enabled>:
{
    67a8:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    67aa:	4c04      	ldr	r4, [pc, #16]	; (67bc <z_log_notify_backend_enabled+0x14>)
    67ac:	7823      	ldrb	r3, [r4, #0]
    67ae:	b913      	cbnz	r3, 67b6 <z_log_notify_backend_enabled+0xe>
    67b0:	4803      	ldr	r0, [pc, #12]	; (67c0 <z_log_notify_backend_enabled+0x18>)
    67b2:	f01e fa85 	bl	24cc0 <z_impl_k_sem_give>
	backend_attached = true;
    67b6:	2301      	movs	r3, #1
    67b8:	7023      	strb	r3, [r4, #0]
}
    67ba:	bd10      	pop	{r4, pc}
    67bc:	2000399f 	.word	0x2000399f
    67c0:	20000d6c 	.word	0x20000d6c

000067c4 <z_log_dropped>:
    67c4:	4b0c      	ldr	r3, [pc, #48]	; (67f8 <z_log_dropped+0x34>)
    67c6:	f3bf 8f5b 	dmb	ish
    67ca:	e853 2f00 	ldrex	r2, [r3]
    67ce:	3201      	adds	r2, #1
    67d0:	e843 2100 	strex	r1, r2, [r3]
    67d4:	2900      	cmp	r1, #0
    67d6:	d1f8      	bne.n	67ca <z_log_dropped+0x6>
    67d8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    67dc:	b158      	cbz	r0, 67f6 <z_log_dropped+0x32>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    67de:	f3bf 8f5b 	dmb	ish
    67e2:	4b06      	ldr	r3, [pc, #24]	; (67fc <z_log_dropped+0x38>)
    67e4:	e853 2f00 	ldrex	r2, [r3]
    67e8:	3a01      	subs	r2, #1
    67ea:	e843 2100 	strex	r1, r2, [r3]
    67ee:	2900      	cmp	r1, #0
    67f0:	d1f8      	bne.n	67e4 <z_log_dropped+0x20>
    67f2:	f3bf 8f5b 	dmb	ish
}
    67f6:	4770      	bx	lr
    67f8:	200021e8 	.word	0x200021e8
    67fc:	200021e4 	.word	0x200021e4

00006800 <z_log_dropped_read_and_clear>:
}
    6800:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6802:	4b06      	ldr	r3, [pc, #24]	; (681c <z_log_dropped_read_and_clear+0x1c>)
    6804:	f3bf 8f5b 	dmb	ish
    6808:	4602      	mov	r2, r0
    680a:	e853 0f00 	ldrex	r0, [r3]
    680e:	e843 2100 	strex	r1, r2, [r3]
    6812:	2900      	cmp	r1, #0
    6814:	d1f9      	bne.n	680a <z_log_dropped_read_and_clear+0xa>
    6816:	f3bf 8f5b 	dmb	ish
    681a:	4770      	bx	lr
    681c:	200021e8 	.word	0x200021e8

00006820 <dropped_notify>:
{
    6820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    6822:	f7ff ffed 	bl	6800 <z_log_dropped_read_and_clear>
    6826:	4c0a      	ldr	r4, [pc, #40]	; (6850 <dropped_notify+0x30>)
    6828:	4d0a      	ldr	r5, [pc, #40]	; (6854 <dropped_notify+0x34>)
    682a:	1b2d      	subs	r5, r5, r4
    682c:	4607      	mov	r7, r0
    682e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6830:	2600      	movs	r6, #0
    6832:	42ae      	cmp	r6, r5
    6834:	db00      	blt.n	6838 <dropped_notify+0x18>
}
    6836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    6838:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    683a:	795b      	ldrb	r3, [r3, #5]
    683c:	b12b      	cbz	r3, 684a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    683e:	6823      	ldr	r3, [r4, #0]
    6840:	691b      	ldr	r3, [r3, #16]
    6842:	b113      	cbz	r3, 684a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    6844:	4639      	mov	r1, r7
    6846:	4620      	mov	r0, r4
    6848:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    684a:	3601      	adds	r6, #1
    684c:	3410      	adds	r4, #16
    684e:	e7f0      	b.n	6832 <dropped_notify+0x12>
    6850:	0002f584 	.word	0x0002f584
    6854:	0002f594 	.word	0x0002f594

00006858 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    6858:	4901      	ldr	r1, [pc, #4]	; (6860 <z_log_msg2_init+0x8>)
    685a:	4802      	ldr	r0, [pc, #8]	; (6864 <z_log_msg2_init+0xc>)
    685c:	f021 bf62 	b.w	28724 <mpsc_pbuf_init>
    6860:	0002f884 	.word	0x0002f884
    6864:	200021f0 	.word	0x200021f0

00006868 <log_core_init>:
	panic_mode = false;
    6868:	4a08      	ldr	r2, [pc, #32]	; (688c <log_core_init+0x24>)
{
    686a:	b508      	push	{r3, lr}
	panic_mode = false;
    686c:	2300      	movs	r3, #0
    686e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    6870:	4a07      	ldr	r2, [pc, #28]	; (6890 <log_core_init+0x28>)
    6872:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    6874:	4b07      	ldr	r3, [pc, #28]	; (6894 <log_core_init+0x2c>)
    6876:	4a08      	ldr	r2, [pc, #32]	; (6898 <log_core_init+0x30>)
    6878:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    687a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    687e:	f000 faff 	bl	6e80 <log_output_timestamp_freq_set>
}
    6882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    6886:	f7ff bfe7 	b.w	6858 <z_log_msg2_init>
    688a:	bf00      	nop
    688c:	200039a0 	.word	0x200039a0
    6890:	200021e8 	.word	0x200021e8
    6894:	200001b4 	.word	0x200001b4
    6898:	000289c3 	.word	0x000289c3

0000689c <z_log_msg2_alloc>:
{
    689c:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    689e:	2200      	movs	r2, #0
    68a0:	4801      	ldr	r0, [pc, #4]	; (68a8 <z_log_msg2_alloc+0xc>)
    68a2:	2300      	movs	r3, #0
    68a4:	f021 bf5d 	b.w	28762 <mpsc_pbuf_alloc>
    68a8:	200021f0 	.word	0x200021f0

000068ac <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    68ac:	4801      	ldr	r0, [pc, #4]	; (68b4 <z_log_msg2_claim+0x8>)
    68ae:	f021 bfeb 	b.w	28888 <mpsc_pbuf_claim>
    68b2:	bf00      	nop
    68b4:	200021f0 	.word	0x200021f0

000068b8 <z_log_msg2_free>:
{
    68b8:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    68ba:	4801      	ldr	r0, [pc, #4]	; (68c0 <z_log_msg2_free+0x8>)
    68bc:	f022 b830 	b.w	28920 <mpsc_pbuf_free>
    68c0:	200021f0 	.word	0x200021f0

000068c4 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    68c4:	4801      	ldr	r0, [pc, #4]	; (68cc <z_log_msg2_pending+0x8>)
    68c6:	f022 b85f 	b.w	28988 <mpsc_pbuf_is_pending>
    68ca:	bf00      	nop
    68cc:	200021f0 	.word	0x200021f0

000068d0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    68d0:	4b1d      	ldr	r3, [pc, #116]	; (6948 <z_impl_log_process+0x78>)
    68d2:	781b      	ldrb	r3, [r3, #0]
{
    68d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68d8:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    68da:	b903      	cbnz	r3, 68de <z_impl_log_process+0xe>
    68dc:	b388      	cbz	r0, 6942 <z_impl_log_process+0x72>
	msg = get_msg();
    68de:	f022 f884 	bl	289ea <get_msg>
	if (msg.msg) {
    68e2:	4606      	mov	r6, r0
    68e4:	b118      	cbz	r0, 68ee <z_impl_log_process+0x1e>
		if (!bypass) {
    68e6:	b16d      	cbz	r5, 6904 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    68e8:	4630      	mov	r0, r6
    68ea:	f7ff ffe5 	bl	68b8 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    68ee:	b92d      	cbnz	r5, 68fc <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    68f0:	4b16      	ldr	r3, [pc, #88]	; (694c <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    68f2:	681b      	ldr	r3, [r3, #0]
    68f4:	2b00      	cmp	r3, #0
    68f6:	dd01      	ble.n	68fc <z_impl_log_process+0x2c>
		dropped_notify();
    68f8:	f7ff ff92 	bl	6820 <dropped_notify>
}
    68fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    6900:	f7ff bfe0 	b.w	68c4 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    6904:	4b12      	ldr	r3, [pc, #72]	; (6950 <z_impl_log_process+0x80>)
    6906:	f3bf 8f5b 	dmb	ish
    690a:	e853 2f00 	ldrex	r2, [r3]
    690e:	3a01      	subs	r2, #1
    6910:	e843 2100 	strex	r1, r2, [r3]
    6914:	2900      	cmp	r1, #0
    6916:	d1f8      	bne.n	690a <z_impl_log_process+0x3a>
    6918:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    691c:	4c0d      	ldr	r4, [pc, #52]	; (6954 <z_impl_log_process+0x84>)
    691e:	4f0e      	ldr	r7, [pc, #56]	; (6958 <z_impl_log_process+0x88>)
    6920:	1b3f      	subs	r7, r7, r4
    6922:	113f      	asrs	r7, r7, #4
    6924:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    6926:	45b8      	cmp	r8, r7
    6928:	dade      	bge.n	68e8 <z_impl_log_process+0x18>
	return backend->cb->active;
    692a:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    692c:	795b      	ldrb	r3, [r3, #5]
    692e:	b123      	cbz	r3, 693a <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    6930:	6823      	ldr	r3, [r4, #0]
    6932:	4631      	mov	r1, r6
    6934:	681b      	ldr	r3, [r3, #0]
    6936:	4620      	mov	r0, r4
    6938:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    693a:	f108 0801 	add.w	r8, r8, #1
    693e:	3410      	adds	r4, #16
    6940:	e7f1      	b.n	6926 <z_impl_log_process+0x56>
}
    6942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6946:	bf00      	nop
    6948:	2000399f 	.word	0x2000399f
    694c:	200021e8 	.word	0x200021e8
    6950:	200021e4 	.word	0x200021e4
    6954:	0002f584 	.word	0x0002f584
    6958:	0002f594 	.word	0x0002f594

0000695c <log_process_thread_func>:
{
    695c:	b510      	push	{r4, lr}
	log_init();
    695e:	f7ff fef7 	bl	6750 <log_init>
	return z_impl_z_current_get();
    6962:	f01e feab 	bl	256bc <z_impl_z_current_get>
	proc_tid = process_tid;
    6966:	4b0c      	ldr	r3, [pc, #48]	; (6998 <log_process_thread_func+0x3c>)
    6968:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    696a:	b130      	cbz	r0, 697a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    696c:	4b0b      	ldr	r3, [pc, #44]	; (699c <log_process_thread_func+0x40>)
	    process_tid &&
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	2b09      	cmp	r3, #9
    6972:	dd02      	ble.n	697a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    6974:	480a      	ldr	r0, [pc, #40]	; (69a0 <log_process_thread_func+0x44>)
    6976:	f01e f9a3 	bl	24cc0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    697a:	4c09      	ldr	r4, [pc, #36]	; (69a0 <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    697c:	2000      	movs	r0, #0
    697e:	f7ff ffa7 	bl	68d0 <z_impl_log_process>
		if (log_process(false) == false) {
    6982:	2800      	cmp	r0, #0
    6984:	d1fa      	bne.n	697c <log_process_thread_func+0x20>
    6986:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    698a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    698e:	4620      	mov	r0, r4
    6990:	f01e f9bc 	bl	24d0c <z_impl_k_sem_take>
    6994:	e7f2      	b.n	697c <log_process_thread_func+0x20>
    6996:	bf00      	nop
    6998:	2000222c 	.word	0x2000222c
    699c:	200021e4 	.word	0x200021e4
    69a0:	20000d6c 	.word	0x20000d6c

000069a4 <z_log_msg_post_finalize>:
{
    69a4:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    69a6:	4b1d      	ldr	r3, [pc, #116]	; (6a1c <z_log_msg_post_finalize+0x78>)
    69a8:	f3bf 8f5b 	dmb	ish
    69ac:	e853 2f00 	ldrex	r2, [r3]
    69b0:	1c51      	adds	r1, r2, #1
    69b2:	e843 1000 	strex	r0, r1, [r3]
    69b6:	2800      	cmp	r0, #0
    69b8:	d1f8      	bne.n	69ac <z_log_msg_post_finalize+0x8>
    69ba:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    69be:	4b18      	ldr	r3, [pc, #96]	; (6a20 <z_log_msg_post_finalize+0x7c>)
    69c0:	781b      	ldrb	r3, [r3, #0]
    69c2:	b183      	cbz	r3, 69e6 <z_log_msg_post_finalize+0x42>
    69c4:	f04f 0320 	mov.w	r3, #32
    69c8:	f3ef 8411 	mrs	r4, BASEPRI
    69cc:	f383 8812 	msr	BASEPRI_MAX, r3
    69d0:	f3bf 8f6f 	isb	sy
    69d4:	2000      	movs	r0, #0
    69d6:	f7ff ff7b 	bl	68d0 <z_impl_log_process>
	__asm__ volatile(
    69da:	f384 8811 	msr	BASEPRI, r4
    69de:	f3bf 8f6f 	isb	sy
}
    69e2:	b002      	add	sp, #8
    69e4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    69e6:	4b0f      	ldr	r3, [pc, #60]	; (6a24 <z_log_msg_post_finalize+0x80>)
    69e8:	681b      	ldr	r3, [r3, #0]
    69ea:	2b00      	cmp	r3, #0
    69ec:	d0f9      	beq.n	69e2 <z_log_msg_post_finalize+0x3e>
    69ee:	b952      	cbnz	r2, 6a06 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    69f0:	2200      	movs	r2, #0
    69f2:	2300      	movs	r3, #0
    69f4:	e9cd 2300 	strd	r2, r3, [sp]
    69f8:	480b      	ldr	r0, [pc, #44]	; (6a28 <z_log_msg_post_finalize+0x84>)
    69fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    69fe:	2300      	movs	r3, #0
    6a00:	f01f f86e 	bl	25ae0 <z_impl_k_timer_start>
    6a04:	e7ed      	b.n	69e2 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    6a06:	2a0a      	cmp	r2, #10
    6a08:	d1eb      	bne.n	69e2 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    6a0a:	4807      	ldr	r0, [pc, #28]	; (6a28 <z_log_msg_post_finalize+0x84>)
    6a0c:	f027 fc2b 	bl	2e266 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    6a10:	4806      	ldr	r0, [pc, #24]	; (6a2c <z_log_msg_post_finalize+0x88>)
}
    6a12:	b002      	add	sp, #8
    6a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6a18:	f01e b952 	b.w	24cc0 <z_impl_k_sem_give>
    6a1c:	200021e4 	.word	0x200021e4
    6a20:	200039a0 	.word	0x200039a0
    6a24:	2000222c 	.word	0x2000222c
    6a28:	20001570 	.word	0x20001570
    6a2c:	20000d6c 	.word	0x20000d6c

00006a30 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    6a30:	4b06      	ldr	r3, [pc, #24]	; (6a4c <z_log_msg2_commit+0x1c>)
{
    6a32:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    6a34:	681b      	ldr	r3, [r3, #0]
{
    6a36:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    6a38:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6a3a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    6a3c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    6a3e:	4804      	ldr	r0, [pc, #16]	; (6a50 <z_log_msg2_commit+0x20>)
    6a40:	f021 ff05 	bl	2884e <mpsc_pbuf_commit>
}
    6a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    6a48:	f7ff bfac 	b.w	69a4 <z_log_msg_post_finalize>
    6a4c:	200001b4 	.word	0x200001b4
    6a50:	200021f0 	.word	0x200021f0

00006a54 <z_impl_log_panic>:
{
    6a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    6a56:	4f0e      	ldr	r7, [pc, #56]	; (6a90 <z_impl_log_panic+0x3c>)
    6a58:	783d      	ldrb	r5, [r7, #0]
    6a5a:	b975      	cbnz	r5, 6a7a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    6a5c:	4c0d      	ldr	r4, [pc, #52]	; (6a94 <z_impl_log_panic+0x40>)
    6a5e:	4e0e      	ldr	r6, [pc, #56]	; (6a98 <z_impl_log_panic+0x44>)
	log_init();
    6a60:	f7ff fe76 	bl	6750 <log_init>
    6a64:	1b36      	subs	r6, r6, r4
    6a66:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    6a68:	42b5      	cmp	r5, r6
    6a6a:	db07      	blt.n	6a7c <z_impl_log_panic+0x28>
    6a6c:	2000      	movs	r0, #0
    6a6e:	f7ff ff2f 	bl	68d0 <z_impl_log_process>
		while (log_process(false) == true) {
    6a72:	2800      	cmp	r0, #0
    6a74:	d1fa      	bne.n	6a6c <z_impl_log_panic+0x18>
	panic_mode = true;
    6a76:	2301      	movs	r3, #1
    6a78:	703b      	strb	r3, [r7, #0]
}
    6a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    6a7c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    6a7e:	795b      	ldrb	r3, [r3, #5]
    6a80:	b11b      	cbz	r3, 6a8a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    6a82:	6823      	ldr	r3, [r4, #0]
    6a84:	4620      	mov	r0, r4
    6a86:	695b      	ldr	r3, [r3, #20]
    6a88:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    6a8a:	3501      	adds	r5, #1
    6a8c:	3410      	adds	r4, #16
    6a8e:	e7eb      	b.n	6a68 <z_impl_log_panic+0x14>
    6a90:	200039a0 	.word	0x200039a0
    6a94:	0002f584 	.word	0x0002f584
    6a98:	0002f594 	.word	0x0002f594

00006a9c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    6a9c:	4a04      	ldr	r2, [pc, #16]	; (6ab0 <log_source_name_get+0x14>)
    6a9e:	4b05      	ldr	r3, [pc, #20]	; (6ab4 <log_source_name_get+0x18>)
    6aa0:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    6aa2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    6aa6:	bf34      	ite	cc
    6aa8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    6aac:	2000      	movcs	r0, #0
}
    6aae:	4770      	bx	lr
    6ab0:	0002f3bc 	.word	0x0002f3bc
    6ab4:	0002f584 	.word	0x0002f584

00006ab8 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    6ab8:	4a05      	ldr	r2, [pc, #20]	; (6ad0 <log_backend_enable+0x18>)
	backend->cb->id = id;
    6aba:	6843      	ldr	r3, [r0, #4]
    6abc:	1a80      	subs	r0, r0, r2
    6abe:	1100      	asrs	r0, r0, #4
    6ac0:	3001      	adds	r0, #1
	backend->cb->active = true;
    6ac2:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    6ac4:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    6ac6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    6ac8:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    6aca:	f7ff be6d 	b.w	67a8 <z_log_notify_backend_enabled>
    6ace:	bf00      	nop
    6ad0:	0002f584 	.word	0x0002f584

00006ad4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    6ad4:	b40e      	push	{r1, r2, r3}
    6ad6:	b503      	push	{r0, r1, lr}
    6ad8:	ab03      	add	r3, sp, #12
    6ada:	4601      	mov	r1, r0
    6adc:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    6ae0:	4804      	ldr	r0, [pc, #16]	; (6af4 <print_formatted+0x20>)
	va_start(args, fmt);
    6ae2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    6ae4:	f7fe ffa2 	bl	5a2c <cbvprintf>
	va_end(args);

	return length;
}
    6ae8:	b002      	add	sp, #8
    6aea:	f85d eb04 	ldr.w	lr, [sp], #4
    6aee:	b003      	add	sp, #12
    6af0:	4770      	bx	lr
    6af2:	bf00      	nop
    6af4:	00028a2b 	.word	0x00028a2b

00006af8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    6af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6afc:	461d      	mov	r5, r3
    6afe:	9b08      	ldr	r3, [sp, #32]
    6b00:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6b02:	06da      	lsls	r2, r3, #27
{
    6b04:	4604      	mov	r4, r0
    6b06:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6b08:	d405      	bmi.n	6b16 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    6b0a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    6b0c:	bf4c      	ite	mi
    6b0e:	492b      	ldrmi	r1, [pc, #172]	; (6bbc <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
    6b10:	492b      	ldrpl	r1, [pc, #172]	; (6bc0 <hexdump_line_print+0xc8>)
    6b12:	f7ff ffdf 	bl	6ad4 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    6b16:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 6bc4 <hexdump_line_print+0xcc>
{
    6b1a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    6b1e:	45a8      	cmp	r8, r5
    6b20:	db2d      	blt.n	6b7e <hexdump_line_print+0x86>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    6b22:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 6bc8 <hexdump_line_print+0xd0>
			print_formatted(output, "%02x ", data[i]);
    6b26:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 6bcc <hexdump_line_print+0xd4>
			print_formatted(output, " ");
    6b2a:	f8df a098 	ldr.w	sl, [pc, #152]	; 6bc4 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6b2e:	2500      	movs	r5, #0
		if (i < length) {
    6b30:	42bd      	cmp	r5, r7
    6b32:	d232      	bcs.n	6b9a <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
    6b34:	5d72      	ldrb	r2, [r6, r5]
    6b36:	4649      	mov	r1, r9
    6b38:	4620      	mov	r0, r4
    6b3a:	f7ff ffcb 	bl	6ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6b3e:	3501      	adds	r5, #1
    6b40:	2d10      	cmp	r5, #16
    6b42:	d123      	bne.n	6b8c <hexdump_line_print+0x94>
		}
	}

	print_formatted(output, "|");
    6b44:	4922      	ldr	r1, [pc, #136]	; (6bd0 <hexdump_line_print+0xd8>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    6b46:	f8df 807c 	ldr.w	r8, [pc, #124]	; 6bc4 <hexdump_line_print+0xcc>
			      isprint((int)c) ? c : '.');
    6b4a:	f8df 9088 	ldr.w	r9, [pc, #136]	; 6bd4 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
    6b4e:	f8df a088 	ldr.w	sl, [pc, #136]	; 6bd8 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
    6b52:	4620      	mov	r0, r4
    6b54:	f7ff ffbe 	bl	6ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6b58:	2500      	movs	r5, #0
		if (i < length) {
    6b5a:	42af      	cmp	r7, r5
    6b5c:	d929      	bls.n	6bb2 <hexdump_line_print+0xba>
			char c = (char)data[i];
    6b5e:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
    6b60:	f812 3009 	ldrb.w	r3, [r2, r9]
    6b64:	f013 0f97 	tst.w	r3, #151	; 0x97
    6b68:	bf08      	it	eq
    6b6a:	222e      	moveq	r2, #46	; 0x2e
    6b6c:	4651      	mov	r1, sl
    6b6e:	4620      	mov	r0, r4
    6b70:	f7ff ffb0 	bl	6ad4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    6b74:	3501      	adds	r5, #1
    6b76:	2d10      	cmp	r5, #16
    6b78:	d114      	bne.n	6ba4 <hexdump_line_print+0xac>
		}
	}
}
    6b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    6b7e:	4649      	mov	r1, r9
    6b80:	4620      	mov	r0, r4
    6b82:	f7ff ffa7 	bl	6ad4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    6b86:	f108 0801 	add.w	r8, r8, #1
    6b8a:	e7c8      	b.n	6b1e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    6b8c:	076a      	lsls	r2, r5, #29
    6b8e:	d1cf      	bne.n	6b30 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    6b90:	4651      	mov	r1, sl
    6b92:	4620      	mov	r0, r4
    6b94:	f7ff ff9e 	bl	6ad4 <print_formatted>
    6b98:	e7ca      	b.n	6b30 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    6b9a:	4641      	mov	r1, r8
    6b9c:	4620      	mov	r0, r4
    6b9e:	f7ff ff99 	bl	6ad4 <print_formatted>
    6ba2:	e7cc      	b.n	6b3e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    6ba4:	076b      	lsls	r3, r5, #29
    6ba6:	d1d8      	bne.n	6b5a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    6ba8:	4641      	mov	r1, r8
    6baa:	4620      	mov	r0, r4
    6bac:	f7ff ff92 	bl	6ad4 <print_formatted>
    6bb0:	e7d3      	b.n	6b5a <hexdump_line_print+0x62>
			print_formatted(output, " ");
    6bb2:	4641      	mov	r1, r8
    6bb4:	4620      	mov	r0, r4
    6bb6:	f7ff ff8d 	bl	6ad4 <print_formatted>
    6bba:	e7db      	b.n	6b74 <hexdump_line_print+0x7c>
    6bbc:	000318d8 	.word	0x000318d8
    6bc0:	000318d7 	.word	0x000318d7
    6bc4:	000318e2 	.word	0x000318e2
    6bc8:	000318e0 	.word	0x000318e0
    6bcc:	000318da 	.word	0x000318da
    6bd0:	000318e4 	.word	0x000318e4
    6bd4:	00033da1 	.word	0x00033da1
    6bd8:	000318e6 	.word	0x000318e6

00006bdc <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    6bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6be0:	b087      	sub	sp, #28
    6be2:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6be4:	f001 0301 	and.w	r3, r1, #1
{
    6be8:	9205      	str	r2, [sp, #20]
    6bea:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    6bee:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    6bf2:	9304      	str	r3, [sp, #16]
{
    6bf4:	4607      	mov	r7, r0
    6bf6:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    6bf8:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    6bfc:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    6c00:	f021 fef7 	bl	289f2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    6c04:	4602      	mov	r2, r0
    6c06:	2800      	cmp	r0, #0
    6c08:	d044      	beq.n	6c94 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    6c0a:	493a      	ldr	r1, [pc, #232]	; (6cf4 <prefix_print+0x118>)
    6c0c:	4638      	mov	r0, r7
    6c0e:	f7ff ff61 	bl	6ad4 <print_formatted>
    6c12:	4605      	mov	r5, r0
	}

	if (stamp) {
    6c14:	f1bb 0f00 	cmp.w	fp, #0
    6c18:	d008      	beq.n	6c2c <prefix_print+0x50>
	if (!format) {
    6c1a:	f018 0f44 	tst.w	r8, #68	; 0x44
    6c1e:	d13b      	bne.n	6c98 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    6c20:	4935      	ldr	r1, [pc, #212]	; (6cf8 <prefix_print+0x11c>)
    6c22:	4622      	mov	r2, r4
    6c24:	4638      	mov	r0, r7
    6c26:	f7ff ff55 	bl	6ad4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    6c2a:	4405      	add	r5, r0
	if (color) {
    6c2c:	9b04      	ldr	r3, [sp, #16]
    6c2e:	b153      	cbz	r3, 6c46 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    6c30:	4b32      	ldr	r3, [pc, #200]	; (6cfc <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    6c32:	4933      	ldr	r1, [pc, #204]	; (6d00 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    6c34:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    6c38:	4b32      	ldr	r3, [pc, #200]	; (6d04 <prefix_print+0x128>)
    6c3a:	4638      	mov	r0, r7
    6c3c:	2a00      	cmp	r2, #0
    6c3e:	bf08      	it	eq
    6c40:	461a      	moveq	r2, r3
    6c42:	f7ff ff47 	bl	6ad4 <print_formatted>
	if (level_on) {
    6c46:	b13e      	cbz	r6, 6c58 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    6c48:	4b2f      	ldr	r3, [pc, #188]	; (6d08 <prefix_print+0x12c>)
    6c4a:	4930      	ldr	r1, [pc, #192]	; (6d0c <prefix_print+0x130>)
    6c4c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    6c50:	4638      	mov	r0, r7
    6c52:	f7ff ff3f 	bl	6ad4 <print_formatted>
    6c56:	4606      	mov	r6, r0
	if (source_id >= 0) {
    6c58:	f1ba 0f00 	cmp.w	sl, #0
    6c5c:	db16      	blt.n	6c8c <prefix_print+0xb0>
		total += print_formatted(output,
    6c5e:	9b05      	ldr	r3, [sp, #20]
    6c60:	2b00      	cmp	r3, #0
    6c62:	d045      	beq.n	6cf0 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    6c64:	2301      	movs	r3, #1
    6c66:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    6c6a:	4b29      	ldr	r3, [pc, #164]	; (6d10 <prefix_print+0x134>)
    6c6c:	4c29      	ldr	r4, [pc, #164]	; (6d14 <prefix_print+0x138>)
    6c6e:	f019 0f10 	tst.w	r9, #16
    6c72:	bf18      	it	ne
    6c74:	461c      	movne	r4, r3
    6c76:	4651      	mov	r1, sl
    6c78:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    6c7c:	f7ff ff0e 	bl	6a9c <log_source_name_get>
    6c80:	4621      	mov	r1, r4
    6c82:	4602      	mov	r2, r0
    6c84:	4638      	mov	r0, r7
    6c86:	f7ff ff25 	bl	6ad4 <print_formatted>
    6c8a:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    6c8c:	1970      	adds	r0, r6, r5
    6c8e:	b007      	add	sp, #28
    6c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    6c94:	4605      	mov	r5, r0
    6c96:	e7bd      	b.n	6c14 <prefix_print+0x38>
	} else if (freq != 0U) {
    6c98:	4b1f      	ldr	r3, [pc, #124]	; (6d18 <prefix_print+0x13c>)
    6c9a:	6818      	ldr	r0, [r3, #0]
    6c9c:	2800      	cmp	r0, #0
    6c9e:	d0c4      	beq.n	6c2a <prefix_print+0x4e>
		timestamp /= timestamp_div;
    6ca0:	4b1e      	ldr	r3, [pc, #120]	; (6d1c <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    6ca2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    6ca6:	681b      	ldr	r3, [r3, #0]
    6ca8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    6cac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    6cb0:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    6cb4:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    6cb8:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    6cbc:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    6cc0:	fbb3 f2f1 	udiv	r2, r3, r1
    6cc4:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6cc8:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    6ccc:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6cd0:	fb00 441e 	mls	r4, r0, lr, r4
			length = print_formatted(output,
    6cd4:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6cd8:	fb08 f404 	mul.w	r4, r8, r4
			length = print_formatted(output,
    6cdc:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    6cde:	fbb4 f0f0 	udiv	r0, r4, r0
			length = print_formatted(output,
    6ce2:	490f      	ldr	r1, [pc, #60]	; (6d20 <prefix_print+0x144>)
    6ce4:	e9cd e001 	strd	lr, r0, [sp, #4]
    6ce8:	4638      	mov	r0, r7
    6cea:	f7ff fef3 	bl	6ad4 <print_formatted>
    6cee:	e79c      	b.n	6c2a <prefix_print+0x4e>
		total += print_formatted(output,
    6cf0:	4c08      	ldr	r4, [pc, #32]	; (6d14 <prefix_print+0x138>)
    6cf2:	e7c0      	b.n	6c76 <prefix_print+0x9a>
    6cf4:	000318f3 	.word	0x000318f3
    6cf8:	000318f7 	.word	0x000318f7
    6cfc:	0002f898 	.word	0x0002f898
    6d00:	00033a63 	.word	0x00033a63
    6d04:	000318e9 	.word	0x000318e9
    6d08:	0002f8ac 	.word	0x0002f8ac
    6d0c:	0003191c 	.word	0x0003191c
    6d10:	0003398a 	.word	0x0003398a
    6d14:	000318ee 	.word	0x000318ee
    6d18:	20002230 	.word	0x20002230
    6d1c:	20002234 	.word	0x20002234
    6d20:	00031900 	.word	0x00031900

00006d24 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    6d24:	b538      	push	{r3, r4, r5, lr}
    6d26:	460c      	mov	r4, r1
	if (color) {
    6d28:	07e1      	lsls	r1, r4, #31
{
    6d2a:	4605      	mov	r5, r0
	if (color) {
    6d2c:	d503      	bpl.n	6d36 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    6d2e:	4a08      	ldr	r2, [pc, #32]	; (6d50 <postfix_print+0x2c>)
    6d30:	4908      	ldr	r1, [pc, #32]	; (6d54 <postfix_print+0x30>)
    6d32:	f7ff fecf 	bl	6ad4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    6d36:	06e2      	lsls	r2, r4, #27
    6d38:	d408      	bmi.n	6d4c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    6d3a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    6d3c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    6d3e:	bf4c      	ite	mi
    6d40:	4905      	ldrmi	r1, [pc, #20]	; (6d58 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    6d42:	4906      	ldrpl	r1, [pc, #24]	; (6d5c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    6d44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    6d48:	f7ff bec4 	b.w	6ad4 <print_formatted>
}
    6d4c:	bd38      	pop	{r3, r4, r5, pc}
    6d4e:	bf00      	nop
    6d50:	000318e9 	.word	0x000318e9
    6d54:	00033a63 	.word	0x00033a63
    6d58:	000318d8 	.word	0x000318d8
    6d5c:	000318d7 	.word	0x000318d7

00006d60 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    6d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    6d64:	880b      	ldrh	r3, [r1, #0]
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYST) {
		log_output_msg2_syst_process(output, msg, flags);
		return;
	}

	if (!raw_string) {
    6d66:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    6d6a:	4606      	mov	r6, r0
    6d6c:	460c      	mov	r4, r1
    6d6e:	4690      	mov	r8, r2
    6d70:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    6d74:	d04d      	beq.n	6e12 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    6d76:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    6d78:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    6d7a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    6d7e:	2b00      	cmp	r3, #0
    6d80:	d044      	beq.n	6e0c <log_output_msg2_process+0xac>
    6d82:	4925      	ldr	r1, [pc, #148]	; (6e18 <log_output_msg2_process+0xb8>)
    6d84:	1a5b      	subs	r3, r3, r1
    6d86:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    6d8a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    6d8e:	f8cd 9000 	str.w	r9, [sp]
    6d92:	68a3      	ldr	r3, [r4, #8]
    6d94:	2200      	movs	r2, #0
    6d96:	4641      	mov	r1, r8
    6d98:	4630      	mov	r0, r6
    6d9a:	f7ff ff1f 	bl	6bdc <prefix_print>
    6d9e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    6da0:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    6da2:	f855 3b0c 	ldr.w	r3, [r5], #12
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    6da6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6daa:	b153      	cbz	r3, 6dc2 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    6dac:	4f1b      	ldr	r7, [pc, #108]	; (6e1c <log_output_msg2_process+0xbc>)
    6dae:	481c      	ldr	r0, [pc, #112]	; (6e20 <log_output_msg2_process+0xc0>)
    6db0:	491c      	ldr	r1, [pc, #112]	; (6e24 <log_output_msg2_process+0xc4>)
    6db2:	462b      	mov	r3, r5
    6db4:	4632      	mov	r2, r6
    6db6:	f1b9 0f00 	cmp.w	r9, #0
    6dba:	bf08      	it	eq
    6dbc:	4638      	moveq	r0, r7
    6dbe:	f021 f886 	bl	27ece <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    6dc2:	8867      	ldrh	r7, [r4, #2]
    6dc4:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    6dc8:	b197      	cbz	r7, 6df0 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    6dca:	6823      	ldr	r3, [r4, #0]
    6dcc:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6dd0:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    6dd2:	2f10      	cmp	r7, #16
    6dd4:	463c      	mov	r4, r7
    6dd6:	bf28      	it	cs
    6dd8:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    6dda:	4629      	mov	r1, r5
    6ddc:	f8cd 8000 	str.w	r8, [sp]
    6de0:	4653      	mov	r3, sl
    6de2:	4622      	mov	r2, r4
    6de4:	4630      	mov	r0, r6
    6de6:	f7ff fe87 	bl	6af8 <hexdump_line_print>
	} while (len);
    6dea:	1b3f      	subs	r7, r7, r4
		data += length;
    6dec:	4425      	add	r5, r4
	} while (len);
    6dee:	d1f0      	bne.n	6dd2 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    6df0:	f1b9 0f00 	cmp.w	r9, #0
    6df4:	d004      	beq.n	6e00 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    6df6:	464a      	mov	r2, r9
    6df8:	4641      	mov	r1, r8
    6dfa:	4630      	mov	r0, r6
    6dfc:	f7ff ff92 	bl	6d24 <postfix_print>
	}

	log_output_flush(output);
    6e00:	4630      	mov	r0, r6
}
    6e02:	b004      	add	sp, #16
    6e04:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    6e08:	f021 be02 	b.w	28a10 <log_output_flush>
		int16_t source_id = source ?
    6e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e10:	e7bb      	b.n	6d8a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    6e12:	46ca      	mov	sl, r9
    6e14:	e7c4      	b.n	6da0 <log_output_msg2_process+0x40>
    6e16:	bf00      	nop
    6e18:	0002f3bc 	.word	0x0002f3bc
    6e1c:	00028a61 	.word	0x00028a61
    6e20:	00028a2b 	.word	0x00028a2b
    6e24:	00005a2d 	.word	0x00005a2d

00006e28 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    6e28:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6e2a:	f242 730f 	movw	r3, #9999	; 0x270f
    6e2e:	428b      	cmp	r3, r1
    6e30:	bf28      	it	cs
    6e32:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    6e34:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6e36:	4a0f      	ldr	r2, [pc, #60]	; (6e74 <log_output_dropped_process+0x4c>)
{
    6e38:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6e3a:	2105      	movs	r1, #5
    6e3c:	4668      	mov	r0, sp
    6e3e:	f021 f8c0 	bl	27fc2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6e42:	6863      	ldr	r3, [r4, #4]
    6e44:	490c      	ldr	r1, [pc, #48]	; (6e78 <log_output_dropped_process+0x50>)
    6e46:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    6e48:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    6e4a:	220b      	movs	r2, #11
    6e4c:	4628      	mov	r0, r5
    6e4e:	f021 fdd2 	bl	289f6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    6e52:	6863      	ldr	r3, [r4, #4]
    6e54:	4632      	mov	r2, r6
    6e56:	4669      	mov	r1, sp
    6e58:	4628      	mov	r0, r5
    6e5a:	685b      	ldr	r3, [r3, #4]
    6e5c:	f021 fdcb 	bl	289f6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    6e60:	6863      	ldr	r3, [r4, #4]
    6e62:	4906      	ldr	r1, [pc, #24]	; (6e7c <log_output_dropped_process+0x54>)
    6e64:	685b      	ldr	r3, [r3, #4]
    6e66:	221b      	movs	r2, #27
    6e68:	4628      	mov	r0, r5
    6e6a:	f021 fdc4 	bl	289f6 <buffer_write>
		     output->control_block->ctx);
}
    6e6e:	b002      	add	sp, #8
    6e70:	bd70      	pop	{r4, r5, r6, pc}
    6e72:	bf00      	nop
    6e74:	00033be4 	.word	0x00033be4
    6e78:	0003195e 	.word	0x0003195e
    6e7c:	00031942 	.word	0x00031942

00006e80 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    6e80:	4a08      	ldr	r2, [pc, #32]	; (6ea4 <log_output_timestamp_freq_set+0x24>)
{
    6e82:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    6e84:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    6e86:	4c08      	ldr	r4, [pc, #32]	; (6ea8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    6e88:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    6e8a:	2100      	movs	r1, #0
    6e8c:	42a0      	cmp	r0, r4
    6e8e:	d804      	bhi.n	6e9a <log_output_timestamp_freq_set+0x1a>
    6e90:	b101      	cbz	r1, 6e94 <log_output_timestamp_freq_set+0x14>
    6e92:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    6e94:	4b05      	ldr	r3, [pc, #20]	; (6eac <log_output_timestamp_freq_set+0x2c>)
    6e96:	6018      	str	r0, [r3, #0]
}
    6e98:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    6e9a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    6e9c:	005b      	lsls	r3, r3, #1
    6e9e:	2101      	movs	r1, #1
    6ea0:	e7f4      	b.n	6e8c <log_output_timestamp_freq_set+0xc>
    6ea2:	bf00      	nop
    6ea4:	20002234 	.word	0x20002234
    6ea8:	000f4240 	.word	0x000f4240
    6eac:	20002230 	.word	0x20002230

00006eb0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				const char *fmt, va_list ap)
{
    6eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6eb4:	b085      	sub	sp, #20
    6eb6:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	; 0x38
    6eba:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    6ebe:	4605      	mov	r5, r0
    6ec0:	4688      	mov	r8, r1
    6ec2:	4614      	mov	r4, r2
    6ec4:	4699      	mov	r9, r3
	int plen;

	if (fmt) {
    6ec6:	f1bb 0f00 	cmp.w	fp, #0
    6eca:	d037      	beq.n	6f3c <z_impl_z_log_msg2_runtime_vcreate+0x8c>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6ecc:	2200      	movs	r2, #0
    6ece:	f8cd a000 	str.w	sl, [sp]
    6ed2:	465b      	mov	r3, fp
    6ed4:	210c      	movs	r1, #12
    6ed6:	4610      	mov	r0, r2
		va_copy(ap2, ap);
    6ed8:	f8cd a00c 	str.w	sl, [sp, #12]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET, 0,
    6edc:	f7fe fa42 	bl	5364 <cbvprintf_package>
    6ee0:	4607      	mov	r7, r0
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	struct log_msg2_desc desc =
    6ee2:	f004 0207 	and.w	r2, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6ee6:	f106 0013 	add.w	r0, r6, #19
	struct log_msg2_desc desc =
    6eea:	f005 0407 	and.w	r4, r5, #7
    6eee:	4d14      	ldr	r5, [pc, #80]	; (6f40 <z_impl_z_log_msg2_runtime_vcreate+0x90>)
    6ef0:	4b14      	ldr	r3, [pc, #80]	; (6f44 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    6ef2:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6ef4:	4438      	add	r0, r7
	struct log_msg2_desc desc =
    6ef6:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    6efa:	ea05 2547 	and.w	r5, r5, r7, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    6efe:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    6f02:	432c      	orrs	r4, r5
    6f04:	ea03 43c6 	and.w	r3, r3, r6, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		msg = alloca(msg_wlen * sizeof(int));
	} else {
		msg = z_log_msg2_alloc(msg_wlen);
    6f08:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    6f0a:	431c      	orrs	r4, r3
		msg = z_log_msg2_alloc(msg_wlen);
    6f0c:	f7ff fcc6 	bl	689c <z_log_msg2_alloc>
	}

	if (msg && fmt) {
    6f10:	4605      	mov	r5, r0
    6f12:	b150      	cbz	r0, 6f2a <z_impl_z_log_msg2_runtime_vcreate+0x7a>
    6f14:	f1bb 0f00 	cmp.w	fp, #0
    6f18:	d007      	beq.n	6f2a <z_impl_z_log_msg2_runtime_vcreate+0x7a>
		plen = cbvprintf_package(msg->data, (size_t)plen, 0, fmt, ap);
    6f1a:	f8cd a000 	str.w	sl, [sp]
    6f1e:	465b      	mov	r3, fp
    6f20:	2200      	movs	r2, #0
    6f22:	4639      	mov	r1, r7
    6f24:	300c      	adds	r0, #12
    6f26:	f7fe fa1d 	bl	5364 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
	}

	z_log_msg2_finalize(msg, source, desc, data);
    6f2a:	464b      	mov	r3, r9
    6f2c:	4622      	mov	r2, r4
    6f2e:	4641      	mov	r1, r8
    6f30:	4628      	mov	r0, r5
}
    6f32:	b005      	add	sp, #20
    6f34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, desc, data);
    6f38:	f021 bd9f 	b.w	28a7a <z_log_msg2_finalize>
		plen = 0;
    6f3c:	465f      	mov	r7, fp
    6f3e:	e7d0      	b.n	6ee2 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    6f40:	0007fe00 	.word	0x0007fe00
    6f44:	7ff80000 	.word	0x7ff80000

00006f48 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    6f48:	4b01      	ldr	r3, [pc, #4]	; (6f50 <log_backend_rtt_init+0x8>)
    6f4a:	2201      	movs	r2, #1
    6f4c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    6f4e:	4770      	bx	lr
    6f50:	200039b1 	.word	0x200039b1

00006f54 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    6f54:	4b02      	ldr	r3, [pc, #8]	; (6f60 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    6f56:	4803      	ldr	r0, [pc, #12]	; (6f64 <panic+0x10>)
    6f58:	2201      	movs	r2, #1
    6f5a:	701a      	strb	r2, [r3, #0]
    6f5c:	f021 bd58 	b.w	28a10 <log_output_flush>
    6f60:	200039b2 	.word	0x200039b2
    6f64:	0002f8dc 	.word	0x0002f8dc

00006f68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    6f68:	4801      	ldr	r0, [pc, #4]	; (6f70 <dropped+0x8>)
    6f6a:	f7ff bf5d 	b.w	6e28 <log_output_dropped_process>
    6f6e:	bf00      	nop
    6f70:	0002f8dc 	.word	0x0002f8dc

00006f74 <process>:
{
	uint32_t flags = log_backend_std_get_flags();

	flags |= IS_ENABLED(CONFIG_LOG_BACKEND_RTT_SYST_ENABLE) ? LOG_OUTPUT_FLAG_FORMAT_SYST : 0;

	log_output_msg2_process(&log_output_rtt, &msg->log, flags);
    6f74:	4801      	ldr	r0, [pc, #4]	; (6f7c <process+0x8>)
    6f76:	220f      	movs	r2, #15
    6f78:	f7ff bef2 	b.w	6d60 <log_output_msg2_process>
    6f7c:	0002f8dc 	.word	0x0002f8dc

00006f80 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    6f80:	4b05      	ldr	r3, [pc, #20]	; (6f98 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    6f82:	781b      	ldrb	r3, [r3, #0]
    6f84:	b11b      	cbz	r3, 6f8e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    6f86:	f241 3088 	movw	r0, #5000	; 0x1388
    6f8a:	f027 b931 	b.w	2e1f0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    6f8e:	20a4      	movs	r0, #164	; 0xa4
    6f90:	2100      	movs	r1, #0
    6f92:	f01e bb79 	b.w	25688 <z_impl_k_sleep>
    6f96:	bf00      	nop
    6f98:	200039b2 	.word	0x200039b2

00006f9c <data_out_block_mode>:
{
    6f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    6fa0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7030 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    6fa4:	f8df a08c 	ldr.w	sl, [pc, #140]	; 7034 <data_out_block_mode+0x98>
{
    6fa8:	4680      	mov	r8, r0
    6faa:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    6fac:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    6fae:	f899 5000 	ldrb.w	r5, [r9]
    6fb2:	b9cd      	cbnz	r5, 6fe8 <data_out_block_mode+0x4c>
    6fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6fbc:	4650      	mov	r0, sl
    6fbe:	f01d fd91 	bl	24ae4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6fc2:	463a      	mov	r2, r7
    6fc4:	4641      	mov	r1, r8
    6fc6:	4628      	mov	r0, r5
    6fc8:	f01d f98c 	bl	242e4 <SEGGER_RTT_WriteSkipNoLock>
    6fcc:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    6fce:	4650      	mov	r0, sl
    6fd0:	f01d fe00 	bl	24bd4 <z_impl_k_mutex_unlock>
		if (ret) {
    6fd4:	4d18      	ldr	r5, [pc, #96]	; (7038 <data_out_block_mode+0x9c>)
    6fd6:	b1fe      	cbz	r6, 7018 <data_out_block_mode+0x7c>
	host_present = true;
    6fd8:	2301      	movs	r3, #1
    6fda:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    6fdc:	f899 3000 	ldrb.w	r3, [r9]
    6fe0:	b96b      	cbnz	r3, 6ffe <data_out_block_mode+0x62>
}
    6fe2:	4638      	mov	r0, r7
    6fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    6fe8:	463a      	mov	r2, r7
    6fea:	4641      	mov	r1, r8
    6fec:	2000      	movs	r0, #0
    6fee:	f01d f979 	bl	242e4 <SEGGER_RTT_WriteSkipNoLock>
    6ff2:	4606      	mov	r6, r0
    6ff4:	e7ee      	b.n	6fd4 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    6ff6:	b95c      	cbnz	r4, 7010 <data_out_block_mode+0x74>
		host_present = false;
    6ff8:	702c      	strb	r4, [r5, #0]
    6ffa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    6ffe:	2000      	movs	r0, #0
    7000:	f01d f9ec 	bl	243dc <SEGGER_RTT_HasDataUp>
    7004:	2800      	cmp	r0, #0
    7006:	d0ec      	beq.n	6fe2 <data_out_block_mode+0x46>
    7008:	782b      	ldrb	r3, [r5, #0]
    700a:	2b00      	cmp	r3, #0
    700c:	d1f3      	bne.n	6ff6 <data_out_block_mode+0x5a>
    700e:	e7e8      	b.n	6fe2 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    7010:	3c01      	subs	r4, #1
    7012:	f7ff ffb5 	bl	6f80 <on_failed_write.part.0>
    7016:	e7f2      	b.n	6ffe <data_out_block_mode+0x62>
		} else if (host_present) {
    7018:	782b      	ldrb	r3, [r5, #0]
    701a:	b113      	cbz	r3, 7022 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    701c:	3c01      	subs	r4, #1
    701e:	d104      	bne.n	702a <data_out_block_mode+0x8e>
		host_present = false;
    7020:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    7022:	782b      	ldrb	r3, [r5, #0]
    7024:	2b00      	cmp	r3, #0
    7026:	d1c2      	bne.n	6fae <data_out_block_mode+0x12>
    7028:	e7db      	b.n	6fe2 <data_out_block_mode+0x46>
    702a:	f7ff ffa9 	bl	6f80 <on_failed_write.part.0>
    702e:	e7f8      	b.n	7022 <data_out_block_mode+0x86>
    7030:	200039b2 	.word	0x200039b2
    7034:	20000cb0 	.word	0x20000cb0
    7038:	200039b1 	.word	0x200039b1

0000703c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7040:	4605      	mov	r5, r0
	__asm__ volatile(
    7042:	f04f 0320 	mov.w	r3, #32
    7046:	f3ef 8611 	mrs	r6, BASEPRI
    704a:	f383 8812 	msr	BASEPRI_MAX, r3
    704e:	f3bf 8f6f 	isb	sy
	return list->head;
    7052:	4b0e      	ldr	r3, [pc, #56]	; (708c <pm_state_notify+0x50>)
    7054:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    7056:	b19c      	cbz	r4, 7080 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    7058:	4f0d      	ldr	r7, [pc, #52]	; (7090 <pm_state_notify+0x54>)
    705a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 7094 <pm_state_notify+0x58>
    705e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    7062:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    7066:	2d00      	cmp	r5, #0
    7068:	bf08      	it	eq
    706a:	4613      	moveq	r3, r2
		if (callback) {
    706c:	b12b      	cbz	r3, 707a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    706e:	f898 2014 	ldrb.w	r2, [r8, #20]
    7072:	fb09 f202 	mul.w	r2, r9, r2
    7076:	5cb8      	ldrb	r0, [r7, r2]
    7078:	4798      	blx	r3
	return node->next;
    707a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    707c:	2c00      	cmp	r4, #0
    707e:	d1f0      	bne.n	7062 <pm_state_notify+0x26>
	__asm__ volatile(
    7080:	f386 8811 	msr	BASEPRI, r6
    7084:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    7088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    708c:	2000224c 	.word	0x2000224c
    7090:	20002254 	.word	0x20002254
    7094:	2000390c 	.word	0x2000390c

00007098 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7098:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    709a:	2301      	movs	r3, #1
    709c:	f000 001f 	and.w	r0, r0, #31
    70a0:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    70a4:	4b07      	ldr	r3, [pc, #28]	; (70c4 <atomic_clear_bit.constprop.0+0x2c>)
    70a6:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    70aa:	43c0      	mvns	r0, r0
    70ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    70b0:	e853 2f00 	ldrex	r2, [r3]
    70b4:	4002      	ands	r2, r0
    70b6:	e843 2100 	strex	r1, r2, [r3]
    70ba:	2900      	cmp	r1, #0
    70bc:	d1f8      	bne.n	70b0 <atomic_clear_bit.constprop.0+0x18>
    70be:	f3bf 8f5b 	dmb	ish
}
    70c2:	4770      	bx	lr
    70c4:	20002260 	.word	0x20002260

000070c8 <pm_system_resume>:

void pm_system_resume(void)
{
    70c8:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    70ca:	4b1d      	ldr	r3, [pc, #116]	; (7140 <pm_system_resume+0x78>)
    70cc:	7d1c      	ldrb	r4, [r3, #20]
    70ce:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    70d2:	f004 031f 	and.w	r3, r4, #31
    70d6:	2201      	movs	r2, #1
    70d8:	409a      	lsls	r2, r3
    70da:	4b1a      	ldr	r3, [pc, #104]	; (7144 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    70dc:	0961      	lsrs	r1, r4, #5
{
    70de:	b085      	sub	sp, #20
    70e0:	43d0      	mvns	r0, r2
    70e2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    70e6:	e853 1f00 	ldrex	r1, [r3]
    70ea:	ea01 0500 	and.w	r5, r1, r0
    70ee:	e843 5c00 	strex	ip, r5, [r3]
    70f2:	f1bc 0f00 	cmp.w	ip, #0
    70f6:	d1f6      	bne.n	70e6 <pm_system_resume+0x1e>
    70f8:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    70fc:	4211      	tst	r1, r2
    70fe:	d017      	beq.n	7130 <pm_system_resume+0x68>
		exit_pos_ops(z_cpus_pm_state[id]);
    7100:	4d11      	ldr	r5, [pc, #68]	; (7148 <pm_system_resume+0x80>)
    7102:	220c      	movs	r2, #12
    7104:	fb02 5204 	mla	r2, r2, r4, r5
    7108:	ca07      	ldmia	r2, {r0, r1, r2}
    710a:	ab01      	add	r3, sp, #4
    710c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    7110:	4a0e      	ldr	r2, [pc, #56]	; (714c <pm_system_resume+0x84>)
    7112:	b17a      	cbz	r2, 7134 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    7114:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7118:	f022 fea3 	bl	29e62 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    711c:	2000      	movs	r0, #0
    711e:	f7ff ff8d 	bl	703c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    7122:	230c      	movs	r3, #12
    7124:	435c      	muls	r4, r3
    7126:	192a      	adds	r2, r5, r4
    7128:	2300      	movs	r3, #0
    712a:	512b      	str	r3, [r5, r4]
    712c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    7130:	b005      	add	sp, #20
    7132:	bd30      	pop	{r4, r5, pc}
    7134:	f382 8811 	msr	BASEPRI, r2
    7138:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    713c:	e7ee      	b.n	711c <pm_system_resume+0x54>
    713e:	bf00      	nop
    7140:	2000390c 	.word	0x2000390c
    7144:	20002264 	.word	0x20002264
    7148:	20002254 	.word	0x20002254
    714c:	00029e63 	.word	0x00029e63

00007150 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    7150:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    7154:	4b35      	ldr	r3, [pc, #212]	; (722c <pm_system_suspend+0xdc>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7156:	4a36      	ldr	r2, [pc, #216]	; (7230 <pm_system_suspend+0xe0>)
    7158:	7d1c      	ldrb	r4, [r3, #20]
    715a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    715e:	0963      	lsrs	r3, r4, #5
    7160:	ea4f 0983 	mov.w	r9, r3, lsl #2
    7164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    7168:	4d32      	ldr	r5, [pc, #200]	; (7234 <pm_system_suspend+0xe4>)
    716a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    716e:	f004 081f 	and.w	r8, r4, #31
    7172:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    7176:	f013 0f01 	tst.w	r3, #1
{
    717a:	b085      	sub	sp, #20
    717c:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    717e:	d10a      	bne.n	7196 <pm_system_suspend+0x46>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    7180:	4601      	mov	r1, r0
    7182:	4620      	mov	r0, r4
    7184:	f000 f876 	bl	7274 <pm_policy_next_state>
		if (info != NULL) {
    7188:	b128      	cbz	r0, 7196 <pm_system_suspend+0x46>
			z_cpus_pm_state[id] = *info;
    718a:	c807      	ldmia	r0, {r0, r1, r2}
    718c:	230c      	movs	r3, #12
    718e:	fb03 5304 	mla	r3, r3, r4, r5
    7192:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    7196:	230c      	movs	r3, #12
    7198:	4363      	muls	r3, r4
    719a:	18ea      	adds	r2, r5, r3
    719c:	5cee      	ldrb	r6, [r5, r3]
    719e:	b936      	cbnz	r6, 71ae <pm_system_suspend+0x5e>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    71a0:	4620      	mov	r0, r4
    71a2:	f7ff ff79 	bl	7098 <atomic_clear_bit.constprop.0>
		ret = false;
    71a6:	4630      	mov	r0, r6
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    71a8:	b005      	add	sp, #20
    71aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    71ae:	1c7b      	adds	r3, r7, #1
    71b0:	d00f      	beq.n	71d2 <pm_system_suspend+0x82>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    71b2:	f8d2 c008 	ldr.w	ip, [r2, #8]
    71b6:	4820      	ldr	r0, [pc, #128]	; (7238 <pm_system_suspend+0xe8>)
    71b8:	4a20      	ldr	r2, [pc, #128]	; (723c <pm_system_suspend+0xec>)
    71ba:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    71be:	2100      	movs	r1, #0
    71c0:	2300      	movs	r3, #0
    71c2:	fbec 0106 	umlal	r0, r1, ip, r6
    71c6:	f7f9 fd27 	bl	c18 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    71ca:	2101      	movs	r1, #1
    71cc:	1a38      	subs	r0, r7, r0
    71ce:	f026 ffef 	bl	2e1b0 <z_set_timeout_expiry>
	k_sched_lock();
    71d2:	f01d ffdb 	bl	2518c <k_sched_lock>
	pm_state_notify(true);
    71d6:	2001      	movs	r0, #1
    71d8:	f7ff ff30 	bl	703c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    71dc:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    71e0:	2301      	movs	r3, #1
    71e2:	fa03 f808 	lsl.w	r8, r3, r8
    71e6:	4b16      	ldr	r3, [pc, #88]	; (7240 <pm_system_suspend+0xf0>)
    71e8:	4499      	add	r9, r3
    71ea:	e859 3f00 	ldrex	r3, [r9]
    71ee:	ea43 0308 	orr.w	r3, r3, r8
    71f2:	e849 3200 	strex	r2, r3, [r9]
    71f6:	2a00      	cmp	r2, #0
    71f8:	d1f7      	bne.n	71ea <pm_system_suspend+0x9a>
    71fa:	f3bf 8f5b 	dmb	ish
	pm_state_set(z_cpus_pm_state[id]);
    71fe:	230c      	movs	r3, #12
    7200:	fb03 5504 	mla	r5, r3, r4, r5
    7204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    7208:	ab01      	add	r3, sp, #4
    720a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    720e:	4a0d      	ldr	r2, [pc, #52]	; (7244 <pm_system_suspend+0xf4>)
    7210:	b11a      	cbz	r2, 721a <pm_system_suspend+0xca>
		pm_power_state_set(info);
    7212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    7216:	f022 fe11 	bl	29e3c <pm_power_state_set>
	pm_system_resume();
    721a:	f7ff ff55 	bl	70c8 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    721e:	4620      	mov	r0, r4
    7220:	f7ff ff3a 	bl	7098 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    7224:	f01e f980 	bl	25528 <k_sched_unlock>
	bool ret = true;
    7228:	2001      	movs	r0, #1
    722a:	e7bd      	b.n	71a8 <pm_system_suspend+0x58>
    722c:	2000390c 	.word	0x2000390c
    7230:	20002260 	.word	0x20002260
    7234:	20002254 	.word	0x20002254
    7238:	000f423f 	.word	0x000f423f
    723c:	000f4240 	.word	0x000f4240
    7240:	20002264 	.word	0x20002264
    7244:	00029e3d 	.word	0x00029e3d

00007248 <pm_constraint_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7248:	4b05      	ldr	r3, [pc, #20]	; (7260 <pm_constraint_get+0x18>)
    724a:	f3bf 8f5b 	dmb	ish
    724e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    7252:	f3bf 8f5b 	dmb	ish
__weak bool pm_constraint_get(enum pm_state state)
{
	__ASSERT(state < PM_STATE_COUNT, "Invalid power state!");

	return (atomic_get(&power_state_disable_count[state]) == 0);
}
    7256:	fab0 f080 	clz	r0, r0
    725a:	0940      	lsrs	r0, r0, #5
    725c:	4770      	bx	lr
    725e:	bf00      	nop
    7260:	20002268 	.word	0x20002268

00007264 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    7264:	b908      	cbnz	r0, 726a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    7266:	4b02      	ldr	r3, [pc, #8]	; (7270 <pm_state_cpu_get_all+0xc>)
    7268:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    726a:	2000      	movs	r0, #0
    726c:	4770      	bx	lr
    726e:	bf00      	nop
    7270:	0002f8ec 	.word	0x0002f8ec

00007274 <pm_policy_next_state>:

#include <logging/log.h>
LOG_MODULE_DECLARE(pm, CONFIG_PM_LOG_LEVEL);

const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    7274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7278:	b085      	sub	sp, #20
    727a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    727c:	a903      	add	r1, sp, #12
    727e:	f7ff fff1 	bl	7264 <pm_state_cpu_get_all>
    7282:	f8df a074 	ldr.w	sl, [pc, #116]	; 72f8 <pm_policy_next_state+0x84>
    7286:	f8df 8074 	ldr.w	r8, [pc, #116]	; 72fc <pm_policy_next_state+0x88>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    728a:	1e44      	subs	r4, r0, #1
    728c:	b224      	sxth	r4, r4
    728e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    7292:	f04f 0900 	mov.w	r9, #0
    7296:	1c63      	adds	r3, r4, #1
    7298:	d104      	bne.n	72a4 <pm_policy_next_state+0x30>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    729a:	2500      	movs	r5, #0
}
    729c:	4628      	mov	r0, r5
    729e:	b005      	add	sp, #20
    72a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    72a4:	9a03      	ldr	r2, [sp, #12]
    72a6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    72aa:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		if (!pm_constraint_get(state->state)) {
    72ae:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    72b2:	f7ff ffc9 	bl	7248 <pm_constraint_get>
    72b6:	b1e0      	cbz	r0, 72f2 <pm_policy_next_state+0x7e>
    72b8:	6868      	ldr	r0, [r5, #4]
    72ba:	f04f 0b00 	mov.w	fp, #0
    72be:	46d4      	mov	ip, sl
    72c0:	4659      	mov	r1, fp
    72c2:	fbe0 c107 	umlal	ip, r1, r0, r7
    72c6:	4642      	mov	r2, r8
    72c8:	464b      	mov	r3, r9
    72ca:	4660      	mov	r0, ip
    72cc:	f7f9 fca4 	bl	c18 <__aeabi_uldivmod>
    72d0:	9001      	str	r0, [sp, #4]
    72d2:	68a8      	ldr	r0, [r5, #8]
    72d4:	46d4      	mov	ip, sl
    72d6:	4659      	mov	r1, fp
    72d8:	fbe0 c107 	umlal	ip, r1, r0, r7
    72dc:	4642      	mov	r2, r8
    72de:	464b      	mov	r3, r9
    72e0:	4660      	mov	r0, ip
    72e2:	f7f9 fc99 	bl	c18 <__aeabi_uldivmod>
		if ((ticks == K_TICKS_FOREVER) ||
    72e6:	1c72      	adds	r2, r6, #1
    72e8:	d0d8      	beq.n	729c <pm_policy_next_state+0x28>
		    (ticks >= (min_residency + exit_latency))) {
    72ea:	9b01      	ldr	r3, [sp, #4]
    72ec:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    72ee:	42b0      	cmp	r0, r6
    72f0:	d9d4      	bls.n	729c <pm_policy_next_state+0x28>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    72f2:	3c01      	subs	r4, #1
    72f4:	b224      	sxth	r4, r4
    72f6:	e7ce      	b.n	7296 <pm_policy_next_state+0x22>
    72f8:	000f423f 	.word	0x000f423f
    72fc:	000f4240 	.word	0x000f4240

00007300 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    7300:	4b01      	ldr	r3, [pc, #4]	; (7308 <uECC_get_rng+0x8>)
    7302:	6818      	ldr	r0, [r3, #0]
    7304:	4770      	bx	lr
    7306:	bf00      	nop
    7308:	200001b8 	.word	0x200001b8

0000730c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    730c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    730e:	2208      	movs	r2, #8
{
    7310:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7312:	f021 fdf3 	bl	28efc <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    7316:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7318:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    731a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    731c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    731e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7320:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    7322:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7324:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    7326:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7328:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    732a:	4613      	mov	r3, r2
    732c:	466a      	mov	r2, sp
{
    732e:	460c      	mov	r4, r1
    7330:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    7332:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7334:	4611      	mov	r1, r2
    7336:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    7338:	e9cd 7701 	strd	r7, r7, [sp, #4]
    733c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    733e:	f021 fcf3 	bl	28d28 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7342:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7344:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7346:	4630      	mov	r0, r6
    7348:	f021 fcee 	bl	28d28 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    734c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    734e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    7350:	6b61      	ldr	r1, [r4, #52]	; 0x34
    7352:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    7354:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7356:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    7358:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    735a:	4405      	add	r5, r0
	tmp[7] = 0;
    735c:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7360:	4610      	mov	r0, r2
    7362:	4611      	mov	r1, r2
    7364:	f021 fce0 	bl	28d28 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7368:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    736a:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    736c:	4630      	mov	r0, r6
    736e:	f021 fcdb 	bl	28d28 <uECC_vli_add>
    7372:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    7374:	6a20      	ldr	r0, [r4, #32]
    7376:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    7378:	6a60      	ldr	r0, [r4, #36]	; 0x24
    737a:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    737c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    737e:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    7380:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    7382:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    7384:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7386:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7388:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    738a:	e9cd 7704 	strd	r7, r7, [sp, #16]
    738e:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7390:	f021 fcca 	bl	28d28 <uECC_vli_add>
    7394:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    7396:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7398:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    739a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    739c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    73a0:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    73a2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    73a4:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    73a6:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    73aa:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    73ac:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    73b0:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    73b2:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    73b6:	6a20      	ldr	r0, [r4, #32]
    73b8:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73ba:	4630      	mov	r0, r6
    73bc:	f021 fcb4 	bl	28d28 <uECC_vli_add>
    73c0:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    73c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    73c4:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    73c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    73c8:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    73ca:	6b60      	ldr	r0, [r4, #52]	; 0x34
    73cc:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    73ce:	6a20      	ldr	r0, [r4, #32]
    73d0:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    73d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73d4:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73d6:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    73d8:	e9cd 7704 	strd	r7, r7, [sp, #16]
    73dc:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73de:	f021 fdc0 	bl	28f62 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    73e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    73e4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    73e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    73e8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    73ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73ec:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    73ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    73f0:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    73f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73f4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    73f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    73f8:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73fa:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73fc:	2308      	movs	r3, #8
    73fe:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    7400:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7404:	f021 fdad 	bl	28f62 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    7408:	6b63      	ldr	r3, [r4, #52]	; 0x34
    740a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    740c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    740e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    7410:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7412:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    7414:	6a23      	ldr	r3, [r4, #32]
    7416:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    7418:	6a63      	ldr	r3, [r4, #36]	; 0x24
    741a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    741c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    741e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    7422:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7424:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7426:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7428:	2308      	movs	r3, #8
    742a:	4630      	mov	r0, r6
    742c:	f021 fd99 	bl	28f62 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    7430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7432:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    7434:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    7436:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    743a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    743c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    743e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7440:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    7442:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    7444:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    7448:	6b63      	ldr	r3, [r4, #52]	; 0x34
    744a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    744c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    744e:	2308      	movs	r3, #8
    7450:	4630      	mov	r0, r6
    7452:	f021 fd86 	bl	28f62 <uECC_vli_sub>

	if (carry < 0) {
    7456:	1a2d      	subs	r5, r5, r0
    7458:	d410      	bmi.n	747c <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    745a:	4c0d      	ldr	r4, [pc, #52]	; (7490 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    745c:	b935      	cbnz	r5, 746c <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    745e:	2208      	movs	r2, #8
    7460:	4631      	mov	r1, r6
    7462:	4620      	mov	r0, r4
    7464:	f021 fd56 	bl	28f14 <uECC_vli_cmp_unsafe>
		while (carry || 
    7468:	2801      	cmp	r0, #1
    746a:	d00f      	beq.n	748c <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    746c:	2308      	movs	r3, #8
    746e:	4622      	mov	r2, r4
    7470:	4631      	mov	r1, r6
    7472:	4630      	mov	r0, r6
    7474:	f021 fd75 	bl	28f62 <uECC_vli_sub>
    7478:	1a2d      	subs	r5, r5, r0
    747a:	e7ef      	b.n	745c <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    747c:	4a04      	ldr	r2, [pc, #16]	; (7490 <vli_mmod_fast_secp256r1+0x184>)
    747e:	2308      	movs	r3, #8
    7480:	4631      	mov	r1, r6
    7482:	4630      	mov	r0, r6
    7484:	f021 fc50 	bl	28d28 <uECC_vli_add>
		while (carry < 0);
    7488:	182d      	adds	r5, r5, r0
    748a:	d4f8      	bmi.n	747e <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    748c:	b009      	add	sp, #36	; 0x24
    748e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7490:	0002f8f0 	.word	0x0002f8f0

00007494 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    7494:	4904      	ldr	r1, [pc, #16]	; (74a8 <sub_bytes+0x14>)
    7496:	1e43      	subs	r3, r0, #1
    7498:	300f      	adds	r0, #15
    749a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    749e:	5c8a      	ldrb	r2, [r1, r2]
    74a0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    74a2:	4283      	cmp	r3, r0
    74a4:	d1f9      	bne.n	749a <sub_bytes+0x6>
	}
}
    74a6:	4770      	bx	lr
    74a8:	0003197d 	.word	0x0003197d

000074ac <tc_aes128_set_encrypt_key>:
{
    74ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    74ae:	4e26      	ldr	r6, [pc, #152]	; (7548 <tc_aes128_set_encrypt_key+0x9c>)
{
    74b0:	4607      	mov	r7, r0
    74b2:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    74b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    74b6:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    74b8:	ad01      	add	r5, sp, #4
    74ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    74bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    74be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    74c0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    74c4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    74c8:	4638      	mov	r0, r7
    74ca:	2f00      	cmp	r7, #0
    74cc:	d038      	beq.n	7540 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    74ce:	2c00      	cmp	r4, #0
    74d0:	d038      	beq.n	7544 <tc_aes128_set_encrypt_key+0x98>
    74d2:	1f38      	subs	r0, r7, #4
    74d4:	4621      	mov	r1, r4
    74d6:	4602      	mov	r2, r0
    74d8:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    74da:	784b      	ldrb	r3, [r1, #1]
    74dc:	780d      	ldrb	r5, [r1, #0]
    74de:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    74e0:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    74e4:	78cd      	ldrb	r5, [r1, #3]
    74e6:	432b      	orrs	r3, r5
    74e8:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    74ea:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    74ec:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    74f0:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    74f2:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    74f6:	d1f0      	bne.n	74da <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    74f8:	4c14      	ldr	r4, [pc, #80]	; (754c <tc_aes128_set_encrypt_key+0xa0>)
    74fa:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    74fc:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    74fe:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    7500:	d116      	bne.n	7530 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7502:	f3c3 4207 	ubfx	r2, r3, #16, #8
    7506:	5ca5      	ldrb	r5, [r4, r2]
    7508:	0e1a      	lsrs	r2, r3, #24
    750a:	5ca2      	ldrb	r2, [r4, r2]
    750c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    7510:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7514:	b2db      	uxtb	r3, r3
    7516:	5d65      	ldrb	r5, [r4, r5]
    7518:	5ce3      	ldrb	r3, [r4, r3]
    751a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    751e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7522:	ad0c      	add	r5, sp, #48	; 0x30
    7524:	f021 0303 	bic.w	r3, r1, #3
    7528:	442b      	add	r3, r5
    752a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    752e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    7530:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    7534:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7536:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7538:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    753a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    753c:	d1de      	bne.n	74fc <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    753e:	2001      	movs	r0, #1
}
    7540:	b00d      	add	sp, #52	; 0x34
    7542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7544:	4620      	mov	r0, r4
    7546:	e7fb      	b.n	7540 <tc_aes128_set_encrypt_key+0x94>
    7548:	0002f6a8 	.word	0x0002f6a8
    754c:	0003197d 	.word	0x0003197d

00007550 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7550:	4901      	ldr	r1, [pc, #4]	; (7558 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7552:	2210      	movs	r2, #16
	str	r2, [r1]
    7554:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7556:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7558:	e000ed10 	.word	0xe000ed10

0000755c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    755c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    755e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7560:	f380 8811 	msr	BASEPRI, r0
	isb
    7564:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7568:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    756c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    756e:	b662      	cpsie	i
	isb
    7570:	f3bf 8f6f 	isb	sy

	bx	lr
    7574:	4770      	bx	lr
    7576:	bf00      	nop

00007578 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7578:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    757a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    757c:	f381 8811 	msr	BASEPRI, r1

	wfe
    7580:	bf20      	wfe

	msr	BASEPRI, r0
    7582:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7586:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7588:	4770      	bx	lr
    758a:	bf00      	nop

0000758c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    758c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7590:	b088      	sub	sp, #32
    7592:	4681      	mov	r9, r0
    7594:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    7596:	460c      	mov	r4, r1
    7598:	2900      	cmp	r1, #0
    759a:	d04b      	beq.n	7634 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    759c:	46ea      	mov	sl, sp
    759e:	b088      	sub	sp, #32
    75a0:	466d      	mov	r5, sp
    75a2:	e9d1 1200 	ldrd	r1, r2, [r1]
    75a6:	68a3      	ldr	r3, [r4, #8]
    75a8:	4826      	ldr	r0, [pc, #152]	; (7644 <z_arm_fatal_error+0xb8>)
    75aa:	462e      	mov	r6, r5
    75ac:	f04f 0805 	mov.w	r8, #5
    75b0:	e9c5 0104 	strd	r0, r1, [r5, #16]
    75b4:	e9c5 2306 	strd	r2, r3, [r5, #24]
    75b8:	f8c7 8008 	str.w	r8, [r7, #8]
    75bc:	f846 8f0c 	str.w	r8, [r6, #12]!
    75c0:	4821      	ldr	r0, [pc, #132]	; (7648 <z_arm_fatal_error+0xbc>)
    75c2:	4632      	mov	r2, r6
    75c4:	2300      	movs	r3, #0
    75c6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    75ca:	f021 fa71 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    75ce:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    75d2:	6963      	ldr	r3, [r4, #20]
    75d4:	481d      	ldr	r0, [pc, #116]	; (764c <z_arm_fatal_error+0xc0>)
    75d6:	f8c7 8008 	str.w	r8, [r7, #8]
    75da:	46d5      	mov	sp, sl
    75dc:	e9c5 0104 	strd	r0, r1, [r5, #16]
    75e0:	e9c5 2306 	strd	r2, r3, [r5, #24]
    75e4:	46ad      	mov	sp, r5
    75e6:	f8c5 800c 	str.w	r8, [r5, #12]
    75ea:	4817      	ldr	r0, [pc, #92]	; (7648 <z_arm_fatal_error+0xbc>)
    75ec:	4632      	mov	r2, r6
    75ee:	2300      	movs	r3, #0
    75f0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    75f4:	f021 fa5c 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    75f8:	4a15      	ldr	r2, [pc, #84]	; (7650 <z_arm_fatal_error+0xc4>)
    75fa:	69e3      	ldr	r3, [r4, #28]
    75fc:	2503      	movs	r5, #3
    75fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    7602:	46d5      	mov	sp, sl
    7604:	607d      	str	r5, [r7, #4]
    7606:	617d      	str	r5, [r7, #20]
    7608:	480f      	ldr	r0, [pc, #60]	; (7648 <z_arm_fatal_error+0xbc>)
    760a:	f107 0214 	add.w	r2, r7, #20
    760e:	2300      	movs	r3, #0
    7610:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7614:	f021 fa4c 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7618:	4a0e      	ldr	r2, [pc, #56]	; (7654 <z_arm_fatal_error+0xc8>)
    761a:	69a3      	ldr	r3, [r4, #24]
    761c:	607d      	str	r5, [r7, #4]
    761e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    7622:	617d      	str	r5, [r7, #20]
    7624:	4808      	ldr	r0, [pc, #32]	; (7648 <z_arm_fatal_error+0xbc>)
    7626:	2300      	movs	r3, #0
    7628:	f107 0214 	add.w	r2, r7, #20
    762c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7630:	f021 fa3e 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    7634:	4621      	mov	r1, r4
    7636:	4648      	mov	r0, r9
    7638:	f01c ff42 	bl	244c0 <z_fatal_error>
}
    763c:	3720      	adds	r7, #32
    763e:	46bd      	mov	sp, r7
    7640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7644:	00031a7d 	.word	0x00031a7d
    7648:	0002f54c 	.word	0x0002f54c
    764c:	00031aac 	.word	0x00031aac
    7650:	00031adb 	.word	0x00031adb
    7654:	00031aea 	.word	0x00031aea

00007658 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    7658:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    765a:	2b00      	cmp	r3, #0
    765c:	db08      	blt.n	7670 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    765e:	2201      	movs	r2, #1
    7660:	f000 001f 	and.w	r0, r0, #31
    7664:	fa02 f000 	lsl.w	r0, r2, r0
    7668:	095b      	lsrs	r3, r3, #5
    766a:	4a02      	ldr	r2, [pc, #8]	; (7674 <arch_irq_enable+0x1c>)
    766c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7670:	4770      	bx	lr
    7672:	bf00      	nop
    7674:	e000e100 	.word	0xe000e100

00007678 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    7678:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    767a:	2b00      	cmp	r3, #0
    767c:	db0d      	blt.n	769a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    767e:	2201      	movs	r2, #1
    7680:	095b      	lsrs	r3, r3, #5
    7682:	f000 001f 	and.w	r0, r0, #31
    7686:	fa02 f000 	lsl.w	r0, r2, r0
    768a:	3320      	adds	r3, #32
    768c:	4a03      	ldr	r2, [pc, #12]	; (769c <arch_irq_disable+0x24>)
    768e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7692:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7696:	f3bf 8f6f 	isb	sy
}
    769a:	4770      	bx	lr
    769c:	e000e100 	.word	0xe000e100

000076a0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    76a0:	4b05      	ldr	r3, [pc, #20]	; (76b8 <arch_irq_is_enabled+0x18>)
    76a2:	0942      	lsrs	r2, r0, #5
    76a4:	f000 001f 	and.w	r0, r0, #31
    76a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    76ac:	2301      	movs	r3, #1
    76ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    76b2:	4010      	ands	r0, r2
    76b4:	4770      	bx	lr
    76b6:	bf00      	nop
    76b8:	e000e100 	.word	0xe000e100

000076bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    76bc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    76be:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76c0:	bfa8      	it	ge
    76c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    76c6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76ca:	bfb8      	it	lt
    76cc:	4b06      	ldrlt	r3, [pc, #24]	; (76e8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    76d2:	bfac      	ite	ge
    76d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76dc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76de:	bfb4      	ite	lt
    76e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    76e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    76e6:	4770      	bx	lr
    76e8:	e000ed14 	.word	0xe000ed14

000076ec <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    76ec:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    76ee:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    76f0:	4b04      	ldr	r3, [pc, #16]	; (7704 <_arch_isr_direct_pm+0x18>)
    76f2:	699a      	ldr	r2, [r3, #24]
    76f4:	b11a      	cbz	r2, 76fe <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    76f6:	2200      	movs	r2, #0
    76f8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    76fa:	f026 fa2d 	bl	2db58 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    76fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    7700:	bd08      	pop	{r3, pc}
    7702:	bf00      	nop
    7704:	2000390c 	.word	0x2000390c

00007708 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7708:	bf30      	wfi
    b z_SysNmiOnReset
    770a:	f7ff bffd 	b.w	7708 <z_SysNmiOnReset>
    770e:	bf00      	nop

00007710 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7710:	4a0f      	ldr	r2, [pc, #60]	; (7750 <z_arm_prep_c+0x40>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    7712:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7714:	4b0f      	ldr	r3, [pc, #60]	; (7754 <z_arm_prep_c+0x44>)
    7716:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    771a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    771c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7720:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    7724:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7728:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    772c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 */
__STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7730:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    7734:	f023 0304 	bic.w	r3, r3, #4
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7738:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb 0xF":::"memory");
    773c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7740:	f01c ff68 	bl	24614 <z_bss_zero>
	z_data_copy();
    7744:	f01e f834 	bl	257b0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7748:	f000 fbb0 	bl	7eac <z_arm_interrupt_init>
	z_cstart();
    774c:	f01c ff6c 	bl	24628 <z_cstart>
    7750:	00000000 	.word	0x00000000
    7754:	e000ed00 	.word	0xe000ed00

00007758 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    7758:	4a09      	ldr	r2, [pc, #36]	; (7780 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    775a:	490a      	ldr	r1, [pc, #40]	; (7784 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    775c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    775e:	6809      	ldr	r1, [r1, #0]
    7760:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7762:	4909      	ldr	r1, [pc, #36]	; (7788 <arch_swap+0x30>)
	_current->arch.basepri = key;
    7764:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7766:	684b      	ldr	r3, [r1, #4]
    7768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    776c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    776e:	2300      	movs	r3, #0
    7770:	f383 8811 	msr	BASEPRI, r3
    7774:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    7778:	6893      	ldr	r3, [r2, #8]
}
    777a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    777c:	4770      	bx	lr
    777e:	bf00      	nop
    7780:	2000390c 	.word	0x2000390c
    7784:	00031350 	.word	0x00031350
    7788:	e000ed00 	.word	0xe000ed00

0000778c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    778c:	4912      	ldr	r1, [pc, #72]	; (77d8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    778e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7790:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    7794:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    7796:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    779a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    779e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    77a0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    77a4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    77a8:	4f0c      	ldr	r7, [pc, #48]	; (77dc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    77aa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    77ae:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    77b0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    77b2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    77b4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    77b6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    77b8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    77ba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    77be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    77c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    77c2:	f000 fbb5 	bl	7f30 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    77c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    77ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    77ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    77d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    77d6:	4770      	bx	lr
    ldr r1, =_kernel
    77d8:	2000390c 	.word	0x2000390c
    ldr v4, =_SCS_ICSR
    77dc:	e000ed04 	.word	0xe000ed04

000077e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    77e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    77e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    77e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    77ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    77ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    77f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    77f4:	2902      	cmp	r1, #2
    beq _oops
    77f6:	d0ff      	beq.n	77f8 <_oops>

000077f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    77f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    77fa:	f022 fad7 	bl	29dac <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    77fe:	bd01      	pop	{r0, pc}

00007800 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    7800:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7804:	9b00      	ldr	r3, [sp, #0]
    7806:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    780a:	490a      	ldr	r1, [pc, #40]	; (7834 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    780c:	9b01      	ldr	r3, [sp, #4]
    780e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    7812:	9b02      	ldr	r3, [sp, #8]
    7814:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    7818:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    781c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    7820:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7824:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    7828:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    782a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    782c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    782e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    7830:	4770      	bx	lr
    7832:	bf00      	nop
    7834:	000281d5 	.word	0x000281d5

00007838 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    7838:	4a09      	ldr	r2, [pc, #36]	; (7860 <z_check_thread_stack_fail+0x28>)
{
    783a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    783c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    783e:	b170      	cbz	r0, 785e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    7840:	f113 0f16 	cmn.w	r3, #22
    7844:	6e80      	ldr	r0, [r0, #104]	; 0x68
    7846:	d005      	beq.n	7854 <z_check_thread_stack_fail+0x1c>
    7848:	f1a0 0220 	sub.w	r2, r0, #32
    784c:	429a      	cmp	r2, r3
    784e:	d805      	bhi.n	785c <z_check_thread_stack_fail+0x24>
    7850:	4283      	cmp	r3, r0
    7852:	d203      	bcs.n	785c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    7854:	4281      	cmp	r1, r0
    7856:	bf28      	it	cs
    7858:	2000      	movcs	r0, #0
    785a:	4770      	bx	lr
    785c:	2000      	movs	r0, #0
}
    785e:	4770      	bx	lr
    7860:	2000390c 	.word	0x2000390c

00007864 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    7864:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7866:	4b09      	ldr	r3, [pc, #36]	; (788c <arch_switch_to_main_thread+0x28>)
    7868:	6098      	str	r0, [r3, #8]
{
    786a:	460d      	mov	r5, r1
    786c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    786e:	f000 fb5f 	bl	7f30 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7872:	4620      	mov	r0, r4
    7874:	f385 8809 	msr	PSP, r5
    7878:	2100      	movs	r1, #0
    787a:	b663      	cpsie	if
    787c:	f381 8811 	msr	BASEPRI, r1
    7880:	f3bf 8f6f 	isb	sy
    7884:	2200      	movs	r2, #0
    7886:	2300      	movs	r3, #0
    7888:	f020 fca4 	bl	281d4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    788c:	2000390c 	.word	0x2000390c

00007890 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7890:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    7892:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7894:	4a0b      	ldr	r2, [pc, #44]	; (78c4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7896:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    7898:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    789a:	bf1e      	ittt	ne
	movne	r1, #0
    789c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    789e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    78a0:	f026 f95a 	blne	2db58 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    78a4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    78a6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    78aa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    78ae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    78b2:	4905      	ldr	r1, [pc, #20]	; (78c8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    78b4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    78b6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    78b8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    78ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    78be:	4903      	ldr	r1, [pc, #12]	; (78cc <_isr_wrapper+0x3c>)
	bx r1
    78c0:	4708      	bx	r1
    78c2:	0000      	.short	0x0000
	ldr r2, =_kernel
    78c4:	2000390c 	.word	0x2000390c
	ldr r1, =_sw_isr_table
    78c8:	0002f248 	.word	0x0002f248
	ldr r1, =z_arm_int_exit
    78cc:	000078d1 	.word	0x000078d1

000078d0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    78d0:	4b04      	ldr	r3, [pc, #16]	; (78e4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    78d2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    78d4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    78d6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    78d8:	d003      	beq.n	78e2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    78da:	4903      	ldr	r1, [pc, #12]	; (78e8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    78dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    78e0:	600a      	str	r2, [r1, #0]

000078e2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    78e2:	4770      	bx	lr
	ldr r3, =_kernel
    78e4:	2000390c 	.word	0x2000390c
	ldr r1, =_SCS_ICSR
    78e8:	e000ed04 	.word	0xe000ed04

000078ec <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    78ec:	b570      	push	{r4, r5, r6, lr}
    78ee:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    78f0:	4b3c      	ldr	r3, [pc, #240]	; (79e4 <bus_fault.constprop.0+0xf8>)
    78f2:	9306      	str	r3, [sp, #24]
    78f4:	2402      	movs	r4, #2
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    78f6:	4606      	mov	r6, r0
    78f8:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    78fa:	483b      	ldr	r0, [pc, #236]	; (79e8 <bus_fault.constprop.0+0xfc>)
    78fc:	9401      	str	r4, [sp, #4]
    78fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7902:	aa05      	add	r2, sp, #20
    7904:	9405      	str	r4, [sp, #20]
    7906:	f022 fa60 	bl	29dca <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    790a:	4b38      	ldr	r3, [pc, #224]	; (79ec <bus_fault.constprop.0+0x100>)
    790c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    790e:	04d9      	lsls	r1, r3, #19
    7910:	d509      	bpl.n	7926 <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    7912:	4b37      	ldr	r3, [pc, #220]	; (79f0 <bus_fault.constprop.0+0x104>)
    7914:	4834      	ldr	r0, [pc, #208]	; (79e8 <bus_fault.constprop.0+0xfc>)
    7916:	9306      	str	r3, [sp, #24]
    7918:	aa05      	add	r2, sp, #20
    791a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    791e:	9401      	str	r4, [sp, #4]
    7920:	9405      	str	r4, [sp, #20]
    7922:	f022 fa52 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7926:	4b31      	ldr	r3, [pc, #196]	; (79ec <bus_fault.constprop.0+0x100>)
    7928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    792a:	051a      	lsls	r2, r3, #20
    792c:	d50a      	bpl.n	7944 <bus_fault.constprop.0+0x58>
		PR_FAULT_INFO("  Unstacking error");
    792e:	4b31      	ldr	r3, [pc, #196]	; (79f4 <bus_fault.constprop.0+0x108>)
    7930:	9306      	str	r3, [sp, #24]
    7932:	482d      	ldr	r0, [pc, #180]	; (79e8 <bus_fault.constprop.0+0xfc>)
    7934:	2302      	movs	r3, #2
    7936:	aa05      	add	r2, sp, #20
    7938:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    793c:	9301      	str	r3, [sp, #4]
    793e:	9305      	str	r3, [sp, #20]
    7940:	f022 fa43 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7944:	4c29      	ldr	r4, [pc, #164]	; (79ec <bus_fault.constprop.0+0x100>)
    7946:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7948:	059b      	lsls	r3, r3, #22
    794a:	d51f      	bpl.n	798c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Precise data bus error");
    794c:	4b2a      	ldr	r3, [pc, #168]	; (79f8 <bus_fault.constprop.0+0x10c>)
    794e:	4826      	ldr	r0, [pc, #152]	; (79e8 <bus_fault.constprop.0+0xfc>)
    7950:	9306      	str	r3, [sp, #24]
    7952:	aa05      	add	r2, sp, #20
    7954:	2302      	movs	r3, #2
    7956:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    795a:	9301      	str	r3, [sp, #4]
    795c:	9305      	str	r3, [sp, #20]
    795e:	f022 fa34 	bl	29dca <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    7962:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7964:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    7966:	0410      	lsls	r0, r2, #16
    7968:	d510      	bpl.n	798c <bus_fault.constprop.0+0xa0>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    796a:	4a24      	ldr	r2, [pc, #144]	; (79fc <bus_fault.constprop.0+0x110>)
    796c:	481e      	ldr	r0, [pc, #120]	; (79e8 <bus_fault.constprop.0+0xfc>)
    796e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7972:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7976:	2303      	movs	r3, #3
    7978:	aa05      	add	r2, sp, #20
    797a:	9301      	str	r3, [sp, #4]
    797c:	9305      	str	r3, [sp, #20]
    797e:	f022 fa24 	bl	29dca <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    7982:	b11e      	cbz	r6, 798c <bus_fault.constprop.0+0xa0>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7984:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7986:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    798a:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    798c:	4b17      	ldr	r3, [pc, #92]	; (79ec <bus_fault.constprop.0+0x100>)
    798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7990:	0559      	lsls	r1, r3, #21
    7992:	d50a      	bpl.n	79aa <bus_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Imprecise data bus error");
    7994:	4b1a      	ldr	r3, [pc, #104]	; (7a00 <bus_fault.constprop.0+0x114>)
    7996:	9306      	str	r3, [sp, #24]
    7998:	4813      	ldr	r0, [pc, #76]	; (79e8 <bus_fault.constprop.0+0xfc>)
    799a:	2302      	movs	r3, #2
    799c:	aa05      	add	r2, sp, #20
    799e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    79a2:	9301      	str	r3, [sp, #4]
    79a4:	9305      	str	r3, [sp, #20]
    79a6:	f022 fa10 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    79aa:	4b10      	ldr	r3, [pc, #64]	; (79ec <bus_fault.constprop.0+0x100>)
    79ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    79ae:	05d2      	lsls	r2, r2, #23
    79b0:	d513      	bpl.n	79da <bus_fault.constprop.0+0xee>
		PR_FAULT_INFO("  Instruction bus error");
    79b2:	4b14      	ldr	r3, [pc, #80]	; (7a04 <bus_fault.constprop.0+0x118>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    79b4:	9306      	str	r3, [sp, #24]
    79b6:	480c      	ldr	r0, [pc, #48]	; (79e8 <bus_fault.constprop.0+0xfc>)
    79b8:	2302      	movs	r3, #2
    79ba:	aa05      	add	r2, sp, #20
    79bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    79c0:	9301      	str	r3, [sp, #4]
    79c2:	9305      	str	r3, [sp, #20]
    79c4:	f022 fa01 	bl	29dca <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    79c8:	4a08      	ldr	r2, [pc, #32]	; (79ec <bus_fault.constprop.0+0x100>)
    79ca:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    79cc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    79ce:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    79d2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    79d4:	7028      	strb	r0, [r5, #0]

	return reason;
}
    79d6:	b008      	add	sp, #32
    79d8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    79da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    79dc:	049b      	lsls	r3, r3, #18
    79de:	d5f3      	bpl.n	79c8 <bus_fault.constprop.0+0xdc>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    79e0:	4b09      	ldr	r3, [pc, #36]	; (7a08 <bus_fault.constprop.0+0x11c>)
    79e2:	e7e7      	b.n	79b4 <bus_fault.constprop.0+0xc8>
    79e4:	00031b18 	.word	0x00031b18
    79e8:	0002f54c 	.word	0x0002f54c
    79ec:	e000ed00 	.word	0xe000ed00
    79f0:	00031b2e 	.word	0x00031b2e
    79f4:	00031b3f 	.word	0x00031b3f
    79f8:	00031b52 	.word	0x00031b52
    79fc:	00031b6b 	.word	0x00031b6b
    7a00:	00031b80 	.word	0x00031b80
    7a04:	00031b9b 	.word	0x00031b9b
    7a08:	00031bb3 	.word	0x00031bb3

00007a0c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7a0c:	b510      	push	{r4, lr}
    7a0e:	b088      	sub	sp, #32
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    7a10:	4b36      	ldr	r3, [pc, #216]	; (7aec <usage_fault.constprop.0+0xe0>)
    7a12:	4837      	ldr	r0, [pc, #220]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7a14:	9306      	str	r3, [sp, #24]
    7a16:	2402      	movs	r4, #2
    7a18:	aa05      	add	r2, sp, #20
    7a1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a1e:	9401      	str	r4, [sp, #4]
    7a20:	9405      	str	r4, [sp, #20]
    7a22:	f022 f9d2 	bl	29dca <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7a26:	4b33      	ldr	r3, [pc, #204]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a2a:	019b      	lsls	r3, r3, #6
    7a2c:	d509      	bpl.n	7a42 <usage_fault.constprop.0+0x36>
		PR_FAULT_INFO("  Division by zero");
    7a2e:	4b32      	ldr	r3, [pc, #200]	; (7af8 <usage_fault.constprop.0+0xec>)
    7a30:	482f      	ldr	r0, [pc, #188]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7a32:	9306      	str	r3, [sp, #24]
    7a34:	aa05      	add	r2, sp, #20
    7a36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a3a:	9401      	str	r4, [sp, #4]
    7a3c:	9405      	str	r4, [sp, #20]
    7a3e:	f022 f9c4 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7a42:	4b2c      	ldr	r3, [pc, #176]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a46:	01dc      	lsls	r4, r3, #7
    7a48:	d50a      	bpl.n	7a60 <usage_fault.constprop.0+0x54>
		PR_FAULT_INFO("  Unaligned memory access");
    7a4a:	4b2c      	ldr	r3, [pc, #176]	; (7afc <usage_fault.constprop.0+0xf0>)
    7a4c:	9306      	str	r3, [sp, #24]
    7a4e:	4828      	ldr	r0, [pc, #160]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7a50:	2302      	movs	r3, #2
    7a52:	aa05      	add	r2, sp, #20
    7a54:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a58:	9301      	str	r3, [sp, #4]
    7a5a:	9305      	str	r3, [sp, #20]
    7a5c:	f022 f9b5 	bl	29dca <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7a60:	4b24      	ldr	r3, [pc, #144]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a64:	0318      	lsls	r0, r3, #12
    7a66:	d50a      	bpl.n	7a7e <usage_fault.constprop.0+0x72>
		PR_FAULT_INFO("  No coprocessor instructions");
    7a68:	4b25      	ldr	r3, [pc, #148]	; (7b00 <usage_fault.constprop.0+0xf4>)
    7a6a:	9306      	str	r3, [sp, #24]
    7a6c:	4820      	ldr	r0, [pc, #128]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7a6e:	2302      	movs	r3, #2
    7a70:	aa05      	add	r2, sp, #20
    7a72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a76:	9301      	str	r3, [sp, #4]
    7a78:	9305      	str	r3, [sp, #20]
    7a7a:	f022 f9a6 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7a7e:	4b1d      	ldr	r3, [pc, #116]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a82:	0359      	lsls	r1, r3, #13
    7a84:	d50a      	bpl.n	7a9c <usage_fault.constprop.0+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7a86:	4b1f      	ldr	r3, [pc, #124]	; (7b04 <usage_fault.constprop.0+0xf8>)
    7a88:	9306      	str	r3, [sp, #24]
    7a8a:	4819      	ldr	r0, [pc, #100]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7a8c:	2302      	movs	r3, #2
    7a8e:	aa05      	add	r2, sp, #20
    7a90:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7a94:	9301      	str	r3, [sp, #4]
    7a96:	9305      	str	r3, [sp, #20]
    7a98:	f022 f997 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7a9c:	4b15      	ldr	r3, [pc, #84]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7aa0:	039a      	lsls	r2, r3, #14
    7aa2:	d50a      	bpl.n	7aba <usage_fault.constprop.0+0xae>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7aa4:	4b18      	ldr	r3, [pc, #96]	; (7b08 <usage_fault.constprop.0+0xfc>)
    7aa6:	9306      	str	r3, [sp, #24]
    7aa8:	4811      	ldr	r0, [pc, #68]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7aaa:	2302      	movs	r3, #2
    7aac:	aa05      	add	r2, sp, #20
    7aae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7ab2:	9301      	str	r3, [sp, #4]
    7ab4:	9305      	str	r3, [sp, #20]
    7ab6:	f022 f988 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7aba:	4b0e      	ldr	r3, [pc, #56]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7abe:	03db      	lsls	r3, r3, #15
    7ac0:	d50a      	bpl.n	7ad8 <usage_fault.constprop.0+0xcc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7ac2:	4b12      	ldr	r3, [pc, #72]	; (7b0c <usage_fault.constprop.0+0x100>)
    7ac4:	9306      	str	r3, [sp, #24]
    7ac6:	480a      	ldr	r0, [pc, #40]	; (7af0 <usage_fault.constprop.0+0xe4>)
    7ac8:	2302      	movs	r3, #2
    7aca:	aa05      	add	r2, sp, #20
    7acc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7ad0:	9301      	str	r3, [sp, #4]
    7ad2:	9305      	str	r3, [sp, #20]
    7ad4:	f022 f979 	bl	29dca <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7ad8:	4a06      	ldr	r2, [pc, #24]	; (7af4 <usage_fault.constprop.0+0xe8>)
    7ada:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7adc:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7ae0:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    7ae4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7ae6:	6293      	str	r3, [r2, #40]	; 0x28
}
    7ae8:	b008      	add	sp, #32
    7aea:	bd10      	pop	{r4, pc}
    7aec:	00031be2 	.word	0x00031be2
    7af0:	0002f54c 	.word	0x0002f54c
    7af4:	e000ed00 	.word	0xe000ed00
    7af8:	00031bfa 	.word	0x00031bfa
    7afc:	00031c0d 	.word	0x00031c0d
    7b00:	00031c27 	.word	0x00031c27
    7b04:	00031c45 	.word	0x00031c45
    7b08:	00031c6a 	.word	0x00031c6a
    7b0c:	00031c84 	.word	0x00031c84

00007b10 <mem_manage_fault>:
{
    7b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b14:	b088      	sub	sp, #32
	PR_FAULT_INFO("***** MPU FAULT *****");
    7b16:	4b48      	ldr	r3, [pc, #288]	; (7c38 <mem_manage_fault+0x128>)
    7b18:	9306      	str	r3, [sp, #24]
    7b1a:	2402      	movs	r4, #2
{
    7b1c:	4607      	mov	r7, r0
    7b1e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    7b20:	4846      	ldr	r0, [pc, #280]	; (7c3c <mem_manage_fault+0x12c>)
    7b22:	9401      	str	r4, [sp, #4]
{
    7b24:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    7b26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7b2a:	aa05      	add	r2, sp, #20
    7b2c:	9405      	str	r4, [sp, #20]
    7b2e:	f022 f94c 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7b32:	4b43      	ldr	r3, [pc, #268]	; (7c40 <mem_manage_fault+0x130>)
    7b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b36:	06d8      	lsls	r0, r3, #27
    7b38:	d509      	bpl.n	7b4e <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    7b3a:	4b42      	ldr	r3, [pc, #264]	; (7c44 <mem_manage_fault+0x134>)
    7b3c:	483f      	ldr	r0, [pc, #252]	; (7c3c <mem_manage_fault+0x12c>)
    7b3e:	9306      	str	r3, [sp, #24]
    7b40:	aa05      	add	r2, sp, #20
    7b42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7b46:	9401      	str	r4, [sp, #4]
    7b48:	9405      	str	r4, [sp, #20]
    7b4a:	f022 f93e 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7b4e:	4b3c      	ldr	r3, [pc, #240]	; (7c40 <mem_manage_fault+0x130>)
    7b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b52:	0719      	lsls	r1, r3, #28
    7b54:	d50a      	bpl.n	7b6c <mem_manage_fault+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    7b56:	4b3c      	ldr	r3, [pc, #240]	; (7c48 <mem_manage_fault+0x138>)
    7b58:	9306      	str	r3, [sp, #24]
    7b5a:	4838      	ldr	r0, [pc, #224]	; (7c3c <mem_manage_fault+0x12c>)
    7b5c:	2302      	movs	r3, #2
    7b5e:	aa05      	add	r2, sp, #20
    7b60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7b64:	9301      	str	r3, [sp, #4]
    7b66:	9305      	str	r3, [sp, #20]
    7b68:	f022 f92f 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7b6c:	4c34      	ldr	r4, [pc, #208]	; (7c40 <mem_manage_fault+0x130>)
    7b6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7b70:	079a      	lsls	r2, r3, #30
    7b72:	d431      	bmi.n	7bd8 <mem_manage_fault+0xc8>
	uint32_t mmfar = -EINVAL;
    7b74:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7b78:	4b31      	ldr	r3, [pc, #196]	; (7c40 <mem_manage_fault+0x130>)
    7b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b7c:	07dc      	lsls	r4, r3, #31
    7b7e:	d50a      	bpl.n	7b96 <mem_manage_fault+0x86>
		PR_FAULT_INFO("  Instruction Access Violation");
    7b80:	4b32      	ldr	r3, [pc, #200]	; (7c4c <mem_manage_fault+0x13c>)
    7b82:	9306      	str	r3, [sp, #24]
    7b84:	482d      	ldr	r0, [pc, #180]	; (7c3c <mem_manage_fault+0x12c>)
    7b86:	2302      	movs	r3, #2
    7b88:	aa05      	add	r2, sp, #20
    7b8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7b8e:	9301      	str	r3, [sp, #4]
    7b90:	9305      	str	r3, [sp, #20]
    7b92:	f022 f91a 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7b96:	4b2a      	ldr	r3, [pc, #168]	; (7c40 <mem_manage_fault+0x130>)
    7b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7b9a:	0698      	lsls	r0, r3, #26
    7b9c:	d50a      	bpl.n	7bb4 <mem_manage_fault+0xa4>
		PR_FAULT_INFO(
    7b9e:	4b2c      	ldr	r3, [pc, #176]	; (7c50 <mem_manage_fault+0x140>)
    7ba0:	9306      	str	r3, [sp, #24]
    7ba2:	4826      	ldr	r0, [pc, #152]	; (7c3c <mem_manage_fault+0x12c>)
    7ba4:	2302      	movs	r3, #2
    7ba6:	aa05      	add	r2, sp, #20
    7ba8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7bac:	9301      	str	r3, [sp, #4]
    7bae:	9305      	str	r3, [sp, #20]
    7bb0:	f022 f90b 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7bb4:	4b22      	ldr	r3, [pc, #136]	; (7c40 <mem_manage_fault+0x130>)
    7bb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7bb8:	06d1      	lsls	r1, r2, #27
    7bba:	d430      	bmi.n	7c1e <mem_manage_fault+0x10e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7bbe:	0792      	lsls	r2, r2, #30
    7bc0:	d42d      	bmi.n	7c1e <mem_manage_fault+0x10e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7bc2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7bc4:	4a1e      	ldr	r2, [pc, #120]	; (7c40 <mem_manage_fault+0x130>)
    7bc6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7bc8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7bcc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    7bce:	2300      	movs	r3, #0
    7bd0:	702b      	strb	r3, [r5, #0]
}
    7bd2:	b008      	add	sp, #32
    7bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7bd8:	4b1e      	ldr	r3, [pc, #120]	; (7c54 <mem_manage_fault+0x144>)
    7bda:	9306      	str	r3, [sp, #24]
    7bdc:	4817      	ldr	r0, [pc, #92]	; (7c3c <mem_manage_fault+0x12c>)
    7bde:	2302      	movs	r3, #2
    7be0:	aa05      	add	r2, sp, #20
    7be2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7be6:	9301      	str	r3, [sp, #4]
    7be8:	9305      	str	r3, [sp, #20]
    7bea:	f022 f8ee 	bl	29dca <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    7bee:	6b66      	ldr	r6, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7bf0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7bf2:	061b      	lsls	r3, r3, #24
    7bf4:	d5be      	bpl.n	7b74 <mem_manage_fault+0x64>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7bf6:	4b18      	ldr	r3, [pc, #96]	; (7c58 <mem_manage_fault+0x148>)
    7bf8:	4810      	ldr	r0, [pc, #64]	; (7c3c <mem_manage_fault+0x12c>)
    7bfa:	e9cd 3606 	strd	r3, r6, [sp, #24]
    7bfe:	aa05      	add	r2, sp, #20
    7c00:	2303      	movs	r3, #3
    7c02:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7c06:	9301      	str	r3, [sp, #4]
    7c08:	9305      	str	r3, [sp, #20]
    7c0a:	f022 f8de 	bl	29dca <z_log_msg2_static_create.constprop.0>
			if (from_hard_fault != 0) {
    7c0e:	f1b8 0f00 	cmp.w	r8, #0
    7c12:	d0b1      	beq.n	7b78 <mem_manage_fault+0x68>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7c14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7c1a:	62a3      	str	r3, [r4, #40]	; 0x28
    7c1c:	e7ac      	b.n	7b78 <mem_manage_fault+0x68>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7c1e:	685b      	ldr	r3, [r3, #4]
    7c20:	051b      	lsls	r3, r3, #20
    7c22:	d5ce      	bpl.n	7bc2 <mem_manage_fault+0xb2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7c24:	4639      	mov	r1, r7
    7c26:	4630      	mov	r0, r6
    7c28:	f7ff fe06 	bl	7838 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    7c2c:	2800      	cmp	r0, #0
    7c2e:	d0c8      	beq.n	7bc2 <mem_manage_fault+0xb2>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7c30:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7c34:	2002      	movs	r0, #2
    7c36:	e7c5      	b.n	7bc4 <mem_manage_fault+0xb4>
    7c38:	00031caf 	.word	0x00031caf
    7c3c:	0002f54c 	.word	0x0002f54c
    7c40:	e000ed00 	.word	0xe000ed00
    7c44:	00031cc5 	.word	0x00031cc5
    7c48:	00031b3f 	.word	0x00031b3f
    7c4c:	00031d26 	.word	0x00031d26
    7c50:	00031bb3 	.word	0x00031bb3
    7c54:	00031cf8 	.word	0x00031cf8
    7c58:	00031d10 	.word	0x00031d10

00007c5c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    7c5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    7c5e:	ab0a      	add	r3, sp, #40	; 0x28
    7c60:	9305      	str	r3, [sp, #20]
		arch_syscall_invoke6(*(uintptr_t *)&domain_id, *(uintptr_t *)&source, *(uintptr_t *)&level, *(uintptr_t *)&data, *(uintptr_t *)&dlen, (uintptr_t) &more, K_SYSCALL_Z_LOG_MSG2_RUNTIME_VCREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
    7c62:	9302      	str	r3, [sp, #8]
    7c64:	4b05      	ldr	r3, [pc, #20]	; (7c7c <z_log_msg2_runtime_create.constprop.0+0x20>)
    7c66:	9301      	str	r3, [sp, #4]
    7c68:	2300      	movs	r3, #0
    7c6a:	9300      	str	r3, [sp, #0]
    7c6c:	2201      	movs	r2, #1
    7c6e:	4618      	mov	r0, r3
    7c70:	f7ff f91e 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
    7c74:	b007      	add	sp, #28
    7c76:	f85d fb04 	ldr.w	pc, [sp], #4
    7c7a:	bf00      	nop
    7c7c:	00031d45 	.word	0x00031d45

00007c80 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7c80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7c84:	4b74      	ldr	r3, [pc, #464]	; (7e58 <z_arm_fault+0x1d8>)
    7c86:	685f      	ldr	r7, [r3, #4]
{
    7c88:	b08f      	sub	sp, #60	; 0x3c
    7c8a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7c8c:	f3c7 0408 	ubfx	r4, r7, #0, #9
    7c90:	2600      	movs	r6, #0
    7c92:	f386 8811 	msr	BASEPRI, r6
    7c96:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7c9a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7c9e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7ca2:	d10e      	bne.n	7cc2 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7ca4:	f002 030c 	and.w	r3, r2, #12
    7ca8:	2b08      	cmp	r3, #8
    7caa:	d10c      	bne.n	7cc6 <z_arm_fault+0x46>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7cac:	4b6b      	ldr	r3, [pc, #428]	; (7e5c <z_arm_fault+0x1dc>)
    7cae:	930a      	str	r3, [sp, #40]	; 0x28
    7cb0:	486b      	ldr	r0, [pc, #428]	; (7e60 <z_arm_fault+0x1e0>)
    7cb2:	2302      	movs	r3, #2
    7cb4:	aa09      	add	r2, sp, #36	; 0x24
    7cb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7cba:	9305      	str	r3, [sp, #20]
    7cbc:	9309      	str	r3, [sp, #36]	; 0x24
    7cbe:	f022 f884 	bl	29dca <z_log_msg2_static_create.constprop.0>
		return NULL;
    7cc2:	4635      	mov	r5, r6
    7cc4:	e003      	b.n	7cce <z_arm_fault+0x4e>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7cc6:	0712      	lsls	r2, r2, #28
    7cc8:	d401      	bmi.n	7cce <z_arm_fault+0x4e>
			ptr_esf = (z_arch_esf_t *)msp;
    7cca:	4605      	mov	r5, r0
			*nested_exc = true;
    7ccc:	2601      	movs	r6, #1
	*recoverable = false;
    7cce:	2300      	movs	r3, #0
    7cd0:	f88d 3013 	strb.w	r3, [sp, #19]
	switch (fault) {
    7cd4:	1ee3      	subs	r3, r4, #3
    7cd6:	2b09      	cmp	r3, #9
    7cd8:	f200 80a4 	bhi.w	7e24 <z_arm_fault+0x1a4>
    7cdc:	e8df f003 	tbb	[pc, r3]
    7ce0:	91989405 	.word	0x91989405
    7ce4:	a2a2a2a2 	.word	0xa2a2a2a2
    7ce8:	9ca2      	.short	0x9ca2
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7cea:	f8df 816c 	ldr.w	r8, [pc, #364]	; 7e58 <z_arm_fault+0x1d8>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7cee:	4b5d      	ldr	r3, [pc, #372]	; (7e64 <z_arm_fault+0x1e4>)
    7cf0:	485b      	ldr	r0, [pc, #364]	; (7e60 <z_arm_fault+0x1e0>)
    7cf2:	930a      	str	r3, [sp, #40]	; 0x28
    7cf4:	2702      	movs	r7, #2
    7cf6:	aa09      	add	r2, sp, #36	; 0x24
    7cf8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7cfc:	9705      	str	r7, [sp, #20]
    7cfe:	9709      	str	r7, [sp, #36]	; 0x24
    7d00:	f022 f863 	bl	29dca <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d04:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    7d08:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d0c:	403c      	ands	r4, r7
	*recoverable = false;
    7d0e:	f88d 9013 	strb.w	r9, [sp, #19]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d12:	d00b      	beq.n	7d2c <z_arm_fault+0xac>
		PR_EXC("  Bus fault on vector table read");
    7d14:	4b54      	ldr	r3, [pc, #336]	; (7e68 <z_arm_fault+0x1e8>)
    7d16:	930a      	str	r3, [sp, #40]	; 0x28
    7d18:	9705      	str	r7, [sp, #20]
    7d1a:	9709      	str	r7, [sp, #36]	; 0x24
	PR_FAULT_INFO(
    7d1c:	4850      	ldr	r0, [pc, #320]	; (7e60 <z_arm_fault+0x1e0>)
    7d1e:	aa09      	add	r2, sp, #36	; 0x24
    7d20:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7d24:	f022 f851 	bl	29dca <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7d28:	2400      	movs	r4, #0
}
    7d2a:	e00d      	b.n	7d48 <z_arm_fault+0xc8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    7d2c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7d30:	2b00      	cmp	r3, #0
    7d32:	da29      	bge.n	7d88 <z_arm_fault+0x108>
		PR_EXC("  Debug event");
    7d34:	4b4d      	ldr	r3, [pc, #308]	; (7e6c <z_arm_fault+0x1ec>)
    7d36:	484a      	ldr	r0, [pc, #296]	; (7e60 <z_arm_fault+0x1e0>)
    7d38:	930a      	str	r3, [sp, #40]	; 0x28
    7d3a:	aa09      	add	r2, sp, #36	; 0x24
    7d3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7d40:	9705      	str	r7, [sp, #20]
    7d42:	9709      	str	r7, [sp, #36]	; 0x24
    7d44:	f022 f841 	bl	29dca <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7d48:	f89d 3013 	ldrb.w	r3, [sp, #19]
    7d4c:	b9cb      	cbnz	r3, 7d82 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7d4e:	aa06      	add	r2, sp, #24
    7d50:	f105 0720 	add.w	r7, r5, #32
    7d54:	6828      	ldr	r0, [r5, #0]
    7d56:	6869      	ldr	r1, [r5, #4]
    7d58:	4613      	mov	r3, r2
    7d5a:	c303      	stmia	r3!, {r0, r1}
    7d5c:	3508      	adds	r5, #8
    7d5e:	42bd      	cmp	r5, r7
    7d60:	461a      	mov	r2, r3
    7d62:	d1f7      	bne.n	7d54 <z_arm_fault+0xd4>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7d64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7d66:	2e00      	cmp	r6, #0
    7d68:	d070      	beq.n	7e4c <z_arm_fault+0x1cc>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7d6e:	b922      	cbnz	r2, 7d7a <z_arm_fault+0xfa>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7d70:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7d74:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7d78:	930d      	str	r3, [sp, #52]	; 0x34
	}

	z_arm_fatal_error(reason, &esf_copy);
    7d7a:	a906      	add	r1, sp, #24
    7d7c:	4620      	mov	r0, r4
    7d7e:	f7ff fc05 	bl	758c <z_arm_fatal_error>
}
    7d82:	b00f      	add	sp, #60	; 0x3c
    7d84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7d88:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7d8c:	005b      	lsls	r3, r3, #1
    7d8e:	d5db      	bpl.n	7d48 <z_arm_fault+0xc8>
		PR_EXC("  Fault escalation (see below)");
    7d90:	4b37      	ldr	r3, [pc, #220]	; (7e70 <z_arm_fault+0x1f0>)
    7d92:	4833      	ldr	r0, [pc, #204]	; (7e60 <z_arm_fault+0x1e0>)
    7d94:	930a      	str	r3, [sp, #40]	; 0x28
    7d96:	aa09      	add	r2, sp, #36	; 0x24
    7d98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7d9c:	9705      	str	r7, [sp, #20]
    7d9e:	9709      	str	r7, [sp, #36]	; 0x24
    7da0:	f022 f813 	bl	29dca <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    7da4:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    7da6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    7daa:	f64d 7302 	movw	r3, #57090	; 0xdf02
    7dae:	429a      	cmp	r2, r3
    7db0:	d00a      	beq.n	7dc8 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    7db2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    7db6:	b1b3      	cbz	r3, 7de6 <z_arm_fault+0x166>
			reason = mem_manage_fault(esf, 1, recoverable);
    7db8:	f10d 0213 	add.w	r2, sp, #19
    7dbc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7dbe:	4628      	mov	r0, r5
    7dc0:	f7ff fea6 	bl	7b10 <mem_manage_fault>
    7dc4:	4604      	mov	r4, r0
		break;
    7dc6:	e7bf      	b.n	7d48 <z_arm_fault+0xc8>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    7dc8:	682b      	ldr	r3, [r5, #0]
    7dca:	4a2a      	ldr	r2, [pc, #168]	; (7e74 <z_arm_fault+0x1f4>)
    7dcc:	4824      	ldr	r0, [pc, #144]	; (7e60 <z_arm_fault+0x1e0>)
    7dce:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    7dd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7dd6:	2303      	movs	r3, #3
    7dd8:	aa09      	add	r2, sp, #36	; 0x24
    7dda:	9305      	str	r3, [sp, #20]
    7ddc:	9309      	str	r3, [sp, #36]	; 0x24
    7dde:	f021 fff4 	bl	29dca <z_log_msg2_static_create.constprop.0>
			reason = esf->basic.r0;
    7de2:	682c      	ldr	r4, [r5, #0]
    7de4:	e7b0      	b.n	7d48 <z_arm_fault+0xc8>
		} else if (SCB_BFSR != 0) {
    7de6:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    7dea:	b12b      	cbz	r3, 7df8 <z_arm_fault+0x178>
			reason = bus_fault(esf, 1, recoverable);
    7dec:	f10d 0113 	add.w	r1, sp, #19
    7df0:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7df2:	f7ff fd7b 	bl	78ec <bus_fault.constprop.0>
    7df6:	e7e5      	b.n	7dc4 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    7df8:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    7dfc:	b29b      	uxth	r3, r3
    7dfe:	2b00      	cmp	r3, #0
    7e00:	d0a2      	beq.n	7d48 <z_arm_fault+0xc8>
		reason = usage_fault(esf);
    7e02:	f7ff fe03 	bl	7a0c <usage_fault.constprop.0>
    7e06:	e7dd      	b.n	7dc4 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    7e08:	f10d 0213 	add.w	r2, sp, #19
    7e0c:	2100      	movs	r1, #0
    7e0e:	e7d6      	b.n	7dbe <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    7e10:	f10d 0113 	add.w	r1, sp, #19
    7e14:	2000      	movs	r0, #0
    7e16:	e7ec      	b.n	7df2 <z_arm_fault+0x172>
	PR_FAULT_INFO(
    7e18:	4b17      	ldr	r3, [pc, #92]	; (7e78 <z_arm_fault+0x1f8>)
    7e1a:	930a      	str	r3, [sp, #40]	; 0x28
    7e1c:	2302      	movs	r3, #2
    7e1e:	9305      	str	r3, [sp, #20]
    7e20:	9309      	str	r3, [sp, #36]	; 0x24
    7e22:	e77b      	b.n	7d1c <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    7e24:	4a15      	ldr	r2, [pc, #84]	; (7e7c <z_arm_fault+0x1fc>)
    7e26:	4b16      	ldr	r3, [pc, #88]	; (7e80 <z_arm_fault+0x200>)
    7e28:	490d      	ldr	r1, [pc, #52]	; (7e60 <z_arm_fault+0x1e0>)
    7e2a:	f417 7ff8 	tst.w	r7, #496	; 0x1f0
    7e2e:	bf18      	it	ne
    7e30:	4613      	movne	r3, r2
    7e32:	3c10      	subs	r4, #16
    7e34:	e9cd 3402 	strd	r3, r4, [sp, #8]
    7e38:	2400      	movs	r4, #0
    7e3a:	4b12      	ldr	r3, [pc, #72]	; (7e84 <z_arm_fault+0x204>)
    7e3c:	9301      	str	r3, [sp, #4]
    7e3e:	9400      	str	r4, [sp, #0]
    7e40:	4623      	mov	r3, r4
    7e42:	2201      	movs	r2, #1
    7e44:	4620      	mov	r0, r4
    7e46:	f7ff ff09 	bl	7c5c <z_log_msg2_runtime_create.constprop.0>
}
    7e4a:	e77d      	b.n	7d48 <z_arm_fault+0xc8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7e4c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7e50:	f023 0301 	bic.w	r3, r3, #1
    7e54:	e790      	b.n	7d78 <z_arm_fault+0xf8>
    7e56:	bf00      	nop
    7e58:	e000ed00 	.word	0xe000ed00
    7e5c:	00031d86 	.word	0x00031d86
    7e60:	0002f54c 	.word	0x0002f54c
    7e64:	00031db1 	.word	0x00031db1
    7e68:	00031dc8 	.word	0x00031dc8
    7e6c:	00031de9 	.word	0x00031de9
    7e70:	00031df7 	.word	0x00031df7
    7e74:	00031e16 	.word	0x00031e16
    7e78:	00031e32 	.word	0x00031e32
    7e7c:	00031d6d 	.word	0x00031d6d
    7e80:	00031d58 	.word	0x00031d58
    7e84:	00031d45 	.word	0x00031d45

00007e88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7e88:	4a02      	ldr	r2, [pc, #8]	; (7e94 <z_arm_fault_init+0xc>)
    7e8a:	6953      	ldr	r3, [r2, #20]
    7e8c:	f043 0310 	orr.w	r3, r3, #16
    7e90:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7e92:	4770      	bx	lr
    7e94:	e000ed00 	.word	0xe000ed00

00007e98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7e98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7e9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7ea0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7ea2:	4672      	mov	r2, lr
	bl z_arm_fault
    7ea4:	f7ff feec 	bl	7c80 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7ea8:	bd01      	pop	{r0, pc}
    7eaa:	bf00      	nop

00007eac <z_arm_interrupt_init>:
    7eac:	4804      	ldr	r0, [pc, #16]	; (7ec0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7eae:	2300      	movs	r3, #0
    7eb0:	2120      	movs	r1, #32
    7eb2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7eb4:	3301      	adds	r3, #1
    7eb6:	2b27      	cmp	r3, #39	; 0x27
    7eb8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7ebc:	d1f9      	bne.n	7eb2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7ebe:	4770      	bx	lr
    7ec0:	e000e100 	.word	0xe000e100

00007ec4 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    7ec4:	f027 f862 	bl	2ef8c <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7ec8:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7eca:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7ece:	4808      	ldr	r0, [pc, #32]	; (7ef0 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7ed0:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    7ed4:	1840      	adds	r0, r0, r1
    msr PSP, r0
    7ed6:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    7eda:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7ede:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7ee0:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7ee2:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    7ee6:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    7eea:	f7ff fc11 	bl	7710 <z_arm_prep_c>
    7eee:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7ef0:	20007540 	.word	0x20007540

00007ef4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    7ef4:	4b06      	ldr	r3, [pc, #24]	; (7f10 <z_impl_k_thread_abort+0x1c>)
    7ef6:	689b      	ldr	r3, [r3, #8]
    7ef8:	4283      	cmp	r3, r0
    7efa:	d107      	bne.n	7f0c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7efc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7f00:	b123      	cbz	r3, 7f0c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7f02:	4a04      	ldr	r2, [pc, #16]	; (7f14 <z_impl_k_thread_abort+0x20>)
    7f04:	6853      	ldr	r3, [r2, #4]
    7f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7f0a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    7f0c:	f01d bbec 	b.w	256e8 <z_thread_abort>
    7f10:	2000390c 	.word	0x2000390c
    7f14:	e000ed00 	.word	0xe000ed00

00007f18 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7f18:	4b02      	ldr	r3, [pc, #8]	; (7f24 <z_arm_configure_static_mpu_regions+0xc>)
    7f1a:	4a03      	ldr	r2, [pc, #12]	; (7f28 <z_arm_configure_static_mpu_regions+0x10>)
    7f1c:	4803      	ldr	r0, [pc, #12]	; (7f2c <z_arm_configure_static_mpu_regions+0x14>)
    7f1e:	2101      	movs	r1, #1
    7f20:	f000 b888 	b.w	8034 <arm_core_mpu_configure_static_mpu_regions>
    7f24:	20010000 	.word	0x20010000
    7f28:	20000000 	.word	0x20000000
    7f2c:	0002f99c 	.word	0x0002f99c

00007f30 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7f30:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7f32:	4b05      	ldr	r3, [pc, #20]	; (7f48 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7f34:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7f36:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7f38:	4a04      	ldr	r2, [pc, #16]	; (7f4c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7f3a:	2120      	movs	r1, #32
    7f3c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7f40:	4618      	mov	r0, r3
    7f42:	2101      	movs	r1, #1
    7f44:	f000 b880 	b.w	8048 <arm_core_mpu_configure_dynamic_mpu_regions>
    7f48:	20002284 	.word	0x20002284
    7f4c:	150b0000 	.word	0x150b0000

00007f50 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7f50:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    7f52:	4f29      	ldr	r7, [pc, #164]	; (7ff8 <mpu_configure_regions+0xa8>)
    7f54:	b089      	sub	sp, #36	; 0x24
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7f56:	2600      	movs	r6, #0
    7f58:	428e      	cmp	r6, r1
    7f5a:	da17      	bge.n	7f8c <mpu_configure_regions+0x3c>
		if (regions[i].size == 0U) {
    7f5c:	6844      	ldr	r4, [r0, #4]
    7f5e:	2c00      	cmp	r4, #0
    7f60:	d046      	beq.n	7ff0 <mpu_configure_regions+0xa0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7f62:	b1e3      	cbz	r3, 7f9e <mpu_configure_regions+0x4e>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7f64:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7f68:	ea14 0f0c 	tst.w	r4, ip
    7f6c:	d011      	beq.n	7f92 <mpu_configure_regions+0x42>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7f6e:	4b23      	ldr	r3, [pc, #140]	; (7ffc <mpu_configure_regions+0xac>)
    7f70:	e9cd 3606 	strd	r3, r6, [sp, #24]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7f74:	2303      	movs	r3, #3
    7f76:	9301      	str	r3, [sp, #4]
    7f78:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    7f7a:	4821      	ldr	r0, [pc, #132]	; (8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>)
    7f7c:	aa05      	add	r2, sp, #20
    7f7e:	2300      	movs	r3, #0
    7f80:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7f84:	f020 fd94 	bl	28ab0 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7f88:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7f8c:	4610      	mov	r0, r2
    7f8e:	b009      	add	sp, #36	; 0x24
    7f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    7f92:	2c1f      	cmp	r4, #31
    7f94:	d9eb      	bls.n	7f6e <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7f96:	6805      	ldr	r5, [r0, #0]
		&&
    7f98:	ea1c 0f05 	tst.w	ip, r5
    7f9c:	d1e7      	bne.n	7f6e <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7f9e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    7fa0:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7fa2:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7fa6:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    7fa8:	d910      	bls.n	7fcc <mpu_configure_regions+0x7c>
	if (size > (1UL << 31)) {
    7faa:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7fae:	d80f      	bhi.n	7fd0 <mpu_configure_regions+0x80>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7fb0:	3c01      	subs	r4, #1
    7fb2:	fab4 f484 	clz	r4, r4
    7fb6:	f1c4 041f 	rsb	r4, r4, #31
    7fba:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7fbc:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7fbe:	ea4c 0404 	orr.w	r4, ip, r4
    7fc2:	d907      	bls.n	7fd4 <mpu_configure_regions+0x84>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7fc4:	4b0f      	ldr	r3, [pc, #60]	; (8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>)
    7fc6:	e9cd 3206 	strd	r3, r2, [sp, #24]
    7fca:	e7d3      	b.n	7f74 <mpu_configure_regions+0x24>
		return REGION_32B;
    7fcc:	2408      	movs	r4, #8
    7fce:	e7f5      	b.n	7fbc <mpu_configure_regions+0x6c>
		return REGION_4G;
    7fd0:	243e      	movs	r4, #62	; 0x3e
    7fd2:	e7f3      	b.n	7fbc <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7fd4:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    7fd8:	4315      	orrs	r5, r2
    7fda:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7fde:	f044 0401 	orr.w	r4, r4, #1
    7fe2:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7fe6:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    7fea:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7fec:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    7ff0:	3601      	adds	r6, #1
    7ff2:	300c      	adds	r0, #12
    7ff4:	e7b0      	b.n	7f58 <mpu_configure_regions+0x8>
    7ff6:	bf00      	nop
    7ff8:	e000ed00 	.word	0xe000ed00
    7ffc:	00031e5a 	.word	0x00031e5a
    8000:	0002f53c 	.word	0x0002f53c
    8004:	00031e7d 	.word	0x00031e7d

00008008 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    8008:	4b04      	ldr	r3, [pc, #16]	; (801c <arm_core_mpu_enable+0x14>)
    800a:	2205      	movs	r2, #5
    800c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    8010:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8014:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    8018:	4770      	bx	lr
    801a:	bf00      	nop
    801c:	e000ed00 	.word	0xe000ed00

00008020 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    8020:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    8024:	4b02      	ldr	r3, [pc, #8]	; (8030 <arm_core_mpu_disable+0x10>)
    8026:	2200      	movs	r2, #0
    8028:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    802c:	4770      	bx	lr
    802e:	bf00      	nop
    8030:	e000ed00 	.word	0xe000ed00

00008034 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    8034:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    8036:	4c03      	ldr	r4, [pc, #12]	; (8044 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    8038:	2301      	movs	r3, #1
    803a:	7822      	ldrb	r2, [r4, #0]
    803c:	f7ff ff88 	bl	7f50 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8040:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    8042:	bd10      	pop	{r4, pc}
    8044:	200039b3 	.word	0x200039b3

00008048 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    8048:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    804a:	4a09      	ldr	r2, [pc, #36]	; (8070 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    804c:	2300      	movs	r3, #0
    804e:	7812      	ldrb	r2, [r2, #0]
    8050:	f7ff ff7e 	bl	7f50 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    8054:	f110 0f16 	cmn.w	r0, #22
    8058:	d003      	beq.n	8062 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    805a:	4b06      	ldr	r3, [pc, #24]	; (8074 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    805c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    805e:	2807      	cmp	r0, #7
    8060:	dd00      	ble.n	8064 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    8062:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    8064:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    8068:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    806c:	3001      	adds	r0, #1
    806e:	e7f6      	b.n	805e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    8070:	200039b3 	.word	0x200039b3
    8074:	e000ed00 	.word	0xe000ed00

00008078 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    8078:	4914      	ldr	r1, [pc, #80]	; (80cc <z_arm_mpu_init+0x54>)
    807a:	6808      	ldr	r0, [r1, #0]
    807c:	2808      	cmp	r0, #8
{
    807e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    8080:	d821      	bhi.n	80c6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    8082:	f7ff ffcd 	bl	8020 <arm_core_mpu_disable>
    8086:	4c12      	ldr	r4, [pc, #72]	; (80d0 <z_arm_mpu_init+0x58>)
    8088:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    808a:	2200      	movs	r2, #0
    808c:	4290      	cmp	r0, r2
    808e:	f101 010c 	add.w	r1, r1, #12
    8092:	d105      	bne.n	80a0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    8094:	4b0f      	ldr	r3, [pc, #60]	; (80d4 <z_arm_mpu_init+0x5c>)
    8096:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    8098:	f7ff ffb6 	bl	8008 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    809c:	2000      	movs	r0, #0
}
    809e:	bd10      	pop	{r4, pc}
    80a0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    80a4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    80a8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    80ac:	4313      	orrs	r3, r2
    80ae:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    80b2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    80b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
    80ba:	f043 0301 	orr.w	r3, r3, #1
    80be:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    80c2:	3201      	adds	r2, #1
    80c4:	e7e2      	b.n	808c <z_arm_mpu_init+0x14>
		return -1;
    80c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    80ca:	e7e8      	b.n	809e <z_arm_mpu_init+0x26>
    80cc:	0002f9a8 	.word	0x0002f9a8
    80d0:	e000ed00 	.word	0xe000ed00
    80d4:	200039b3 	.word	0x200039b3

000080d8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    80d8:	4b01      	ldr	r3, [pc, #4]	; (80e0 <__stdout_hook_install+0x8>)
    80da:	6018      	str	r0, [r3, #0]
}
    80dc:	4770      	bx	lr
    80de:	bf00      	nop
    80e0:	200001c0 	.word	0x200001c0

000080e4 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
    80e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
    80e6:	4f08      	ldr	r7, [pc, #32]	; (8108 <z_impl_zephyr_read_stdin+0x24>)
{
    80e8:	4606      	mov	r6, r0
    80ea:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
    80ec:	2400      	movs	r4, #0
    80ee:	42ac      	cmp	r4, r5
    80f0:	da08      	bge.n	8104 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
    80f2:	683b      	ldr	r3, [r7, #0]
    80f4:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    80f6:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
    80f8:	5530      	strb	r0, [r6, r4]
	for (i = 0; i < nbytes; i++) {
    80fa:	f104 0401 	add.w	r4, r4, #1
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
    80fe:	d001      	beq.n	8104 <z_impl_zephyr_read_stdin+0x20>
    8100:	280d      	cmp	r0, #13
    8102:	d1f4      	bne.n	80ee <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
    8104:	4620      	mov	r0, r4
    8106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8108:	200001bc 	.word	0x200001bc

0000810c <z_impl_zephyr_write_stdout>:
}
#include <syscalls/zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
    810c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    810e:	4f0a      	ldr	r7, [pc, #40]	; (8138 <z_impl_zephyr_write_stdout+0x2c>)
    8110:	460d      	mov	r5, r1
    8112:	1e46      	subs	r6, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
    8114:	f1c0 0401 	rsb	r4, r0, #1
    8118:	19a3      	adds	r3, r4, r6
    811a:	429d      	cmp	r5, r3
    811c:	dc01      	bgt.n	8122 <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
    811e:	4628      	mov	r0, r5
    8120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
    8122:	7873      	ldrb	r3, [r6, #1]
    8124:	2b0a      	cmp	r3, #10
    8126:	d102      	bne.n	812e <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
    8128:	683b      	ldr	r3, [r7, #0]
    812a:	200d      	movs	r0, #13
    812c:	4798      	blx	r3
		_stdout_hook(*(buf + i));
    812e:	683b      	ldr	r3, [r7, #0]
    8130:	f816 0f01 	ldrb.w	r0, [r6, #1]!
    8134:	4798      	blx	r3
	for (i = 0; i < nbytes; i++) {
    8136:	e7ef      	b.n	8118 <z_impl_zephyr_write_stdout+0xc>
    8138:	200001c0 	.word	0x200001c0

0000813c <_exit>:
	return 0;
}
__weak FUNC_ALIAS(_fstat, fstat, int);

__weak void _exit(int status)
{
    813c:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&buf, *(uintptr_t *)&nbytes, K_SYSCALL_ZEPHYR_WRITE_STDOUT);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_write_stdout(buf, nbytes);
    813e:	4802      	ldr	r0, [pc, #8]	; (8148 <_exit+0xc>)
    8140:	2105      	movs	r1, #5
    8142:	f7ff ffe3 	bl	810c <z_impl_zephyr_write_stdout>
	_write(1, "exit\n", 5);
	while (1) {
    8146:	e7fe      	b.n	8146 <_exit+0xa>
    8148:	00031ea3 	.word	0x00031ea3

0000814c <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
    814c:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
    814e:	4c07      	ldr	r4, [pc, #28]	; (816c <_sbrk+0x20>)
    8150:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    8152:	18c2      	adds	r2, r0, r3
    8154:	4806      	ldr	r0, [pc, #24]	; (8170 <_sbrk+0x24>)
    8156:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
    815a:	f501 3180 	add.w	r1, r1, #65536	; 0x10000
    815e:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
    8160:	bf3a      	itte	cc
    8162:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
    8164:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
    8166:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
	}

	return ret;
}
    816a:	bd10      	pop	{r4, pc}
    816c:	20002290 	.word	0x20002290
    8170:	2000890a 	.word	0x2000890a

00008174 <__chk_fail>:
/* This function gets called if static buffer overflow detection is enabled
 * on stdlib side (Newlib here), in case such an overflow is detected. Newlib
 * provides an implementation not suitable for us, so we override it here.
 */
__weak FUNC_NORETURN void __chk_fail(void)
{
    8174:	b508      	push	{r3, lr}
    8176:	211d      	movs	r1, #29
    8178:	4804      	ldr	r0, [pc, #16]	; (818c <__chk_fail+0x18>)
    817a:	f7ff ffc7 	bl	810c <z_impl_zephyr_write_stdout>
	static const char chk_fail_msg[] = "* buffer overflow detected *\n";
	_write(2, chk_fail_msg, sizeof(chk_fail_msg) - 1);
	k_oops();
    817e:	4040      	eors	r0, r0
    8180:	f380 8811 	msr	BASEPRI, r0
    8184:	f04f 0003 	mov.w	r0, #3
    8188:	df02      	svc	2
	CODE_UNREACHABLE;
    818a:	bf00      	nop
    818c:	00031ea9 	.word	0x00031ea9

00008190 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    8190:	f04f 0220 	mov.w	r2, #32
    8194:	f3ef 8311 	mrs	r3, BASEPRI
    8198:	f382 8812 	msr	BASEPRI_MAX, r2
    819c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    81a0:	4a04      	ldr	r2, [pc, #16]	; (81b4 <nordicsemi_nrf52_init+0x24>)
    81a2:	2101      	movs	r1, #1
    81a4:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
    81a8:	f383 8811 	msr	BASEPRI, r3
    81ac:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    81b0:	2000      	movs	r0, #0
    81b2:	4770      	bx	lr
    81b4:	4001e000 	.word	0x4001e000

000081b8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    81b8:	b120      	cbz	r0, 81c4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    81ba:	4b03      	ldr	r3, [pc, #12]	; (81c8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    81bc:	0180      	lsls	r0, r0, #6
    81be:	f043 0301 	orr.w	r3, r3, #1
    81c2:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    81c4:	4770      	bx	lr
    81c6:	bf00      	nop
    81c8:	0002f740 	.word	0x0002f740

000081cc <pwr_ctrl_init>:
	const char *port;
	uint32_t pin;
};

static int pwr_ctrl_init(const struct device *dev)
{
    81cc:	b538      	push	{r3, r4, r5, lr}
	const struct pwr_ctrl_cfg *cfg = dev->config;
    81ce:	6844      	ldr	r4, [r0, #4]
	const struct device *gpio;

	gpio = device_get_binding(cfg->port);
    81d0:	6820      	ldr	r0, [r4, #0]
    81d2:	f01c f92d 	bl	24430 <z_impl_device_get_binding>
	if (!gpio) {
    81d6:	b930      	cbnz	r0, 81e6 <pwr_ctrl_init+0x1a>
		printk("Could not bind device \"%s\"\n", cfg->port);
    81d8:	480d      	ldr	r0, [pc, #52]	; (8210 <pwr_ctrl_init+0x44>)
    81da:	6821      	ldr	r1, [r4, #0]
    81dc:	f01f fee4 	bl	27fa8 <printk>
		return -ENODEV;
    81e0:	f06f 0012 	mvn.w	r0, #18
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);

	k_sleep(K_MSEC(1)); /* Wait for the rail to come up and stabilize */

	return 0;
}
    81e4:	bd38      	pop	{r3, r4, r5, pc}
	gpio_pin_configure(gpio, cfg->pin, GPIO_OUTPUT_HIGH);
    81e6:	6861      	ldr	r1, [r4, #4]
	struct gpio_driver_data *data =
    81e8:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
    81ea:	6885      	ldr	r5, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    81ec:	b2c9      	uxtb	r1, r1
    81ee:	2301      	movs	r3, #1
    81f0:	fa03 f201 	lsl.w	r2, r3, r1
    81f4:	6823      	ldr	r3, [r4, #0]
    81f6:	ea23 0302 	bic.w	r3, r3, r2
    81fa:	6023      	str	r3, [r4, #0]
	return api->pin_configure(port, pin, flags);
    81fc:	f44f 6220 	mov.w	r2, #2560	; 0xa00
    8200:	682b      	ldr	r3, [r5, #0]
    8202:	4798      	blx	r3
	return z_impl_k_sleep(timeout);
    8204:	2021      	movs	r0, #33	; 0x21
    8206:	2100      	movs	r1, #0
    8208:	f01d fa3e 	bl	25688 <z_impl_k_sleep>
	return 0;
    820c:	2000      	movs	r0, #0
    820e:	e7e9      	b.n	81e4 <pwr_ctrl_init+0x18>
    8210:	00031eda 	.word	0x00031eda

00008214 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    8214:	4b0e      	ldr	r3, [pc, #56]	; (8250 <bt_hex_real+0x3c>)
    8216:	2940      	cmp	r1, #64	; 0x40
{
    8218:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    821a:	bf28      	it	cs
    821c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    821e:	4c0d      	ldr	r4, [pc, #52]	; (8254 <bt_hex_real+0x40>)
    8220:	1846      	adds	r6, r0, r1
    8222:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    8224:	42b0      	cmp	r0, r6
    8226:	f103 0302 	add.w	r3, r3, #2
    822a:	d104      	bne.n	8236 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    822c:	2300      	movs	r3, #0
    822e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    8232:	4807      	ldr	r0, [pc, #28]	; (8250 <bt_hex_real+0x3c>)
    8234:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    8236:	7802      	ldrb	r2, [r0, #0]
    8238:	0912      	lsrs	r2, r2, #4
    823a:	5ca2      	ldrb	r2, [r4, r2]
    823c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    8240:	f810 2b01 	ldrb.w	r2, [r0], #1
    8244:	f002 020f 	and.w	r2, r2, #15
    8248:	5ca2      	ldrb	r2, [r4, r2]
    824a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    824e:	e7e9      	b.n	8224 <bt_hex_real+0x10>
    8250:	200039d2 	.word	0x200039d2
    8254:	00031efd 	.word	0x00031efd

00008258 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    8258:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    825a:	7803      	ldrb	r3, [r0, #0]
    825c:	b08b      	sub	sp, #44	; 0x2c
    825e:	4604      	mov	r4, r0
    8260:	ad07      	add	r5, sp, #28
    8262:	2b03      	cmp	r3, #3
    8264:	d821      	bhi.n	82aa <bt_addr_le_str_real+0x52>
    8266:	e8df f003 	tbb	[pc, r3]
    826a:	1a02      	.short	0x1a02
    826c:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    826e:	4912      	ldr	r1, [pc, #72]	; (82b8 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    8270:	4628      	mov	r0, r5
    8272:	f026 fb0b 	bl	2e88c <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8276:	7863      	ldrb	r3, [r4, #1]
    8278:	9304      	str	r3, [sp, #16]
    827a:	78a3      	ldrb	r3, [r4, #2]
    827c:	9303      	str	r3, [sp, #12]
    827e:	78e3      	ldrb	r3, [r4, #3]
    8280:	9302      	str	r3, [sp, #8]
    8282:	7923      	ldrb	r3, [r4, #4]
    8284:	9301      	str	r3, [sp, #4]
    8286:	7963      	ldrb	r3, [r4, #5]
    8288:	9300      	str	r3, [sp, #0]
    828a:	4a0c      	ldr	r2, [pc, #48]	; (82bc <bt_addr_le_str_real+0x64>)
    828c:	79a3      	ldrb	r3, [r4, #6]
    828e:	9505      	str	r5, [sp, #20]
    8290:	211e      	movs	r1, #30
    8292:	480b      	ldr	r0, [pc, #44]	; (82c0 <bt_addr_le_str_real+0x68>)
    8294:	f01f fe95 	bl	27fc2 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8298:	4809      	ldr	r0, [pc, #36]	; (82c0 <bt_addr_le_str_real+0x68>)
    829a:	b00b      	add	sp, #44	; 0x2c
    829c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    829e:	4909      	ldr	r1, [pc, #36]	; (82c4 <bt_addr_le_str_real+0x6c>)
    82a0:	e7e6      	b.n	8270 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    82a2:	4909      	ldr	r1, [pc, #36]	; (82c8 <bt_addr_le_str_real+0x70>)
    82a4:	e7e4      	b.n	8270 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    82a6:	4909      	ldr	r1, [pc, #36]	; (82cc <bt_addr_le_str_real+0x74>)
    82a8:	e7e2      	b.n	8270 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    82aa:	4a09      	ldr	r2, [pc, #36]	; (82d0 <bt_addr_le_str_real+0x78>)
    82ac:	210a      	movs	r1, #10
    82ae:	4628      	mov	r0, r5
    82b0:	f01f fe87 	bl	27fc2 <snprintk>
		break;
    82b4:	e7df      	b.n	8276 <bt_addr_le_str_real+0x1e>
    82b6:	bf00      	nop
    82b8:	00031567 	.word	0x00031567
    82bc:	00031589 	.word	0x00031589
    82c0:	200039b4 	.word	0x200039b4
    82c4:	0003156e 	.word	0x0003156e
    82c8:	00031575 	.word	0x00031575
    82cc:	0003157f 	.word	0x0003157f
    82d0:	000333a9 	.word	0x000333a9

000082d4 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    82d4:	b570      	push	{r4, r5, r6, lr}
    82d6:	4c21      	ldr	r4, [pc, #132]	; (835c <le_gen_dhkey+0x88>)
    82d8:	f3bf 8f5b 	dmb	ish
    82dc:	6823      	ldr	r3, [r4, #0]
    82de:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    82e2:	07da      	lsls	r2, r3, #31
{
    82e4:	4606      	mov	r6, r0
    82e6:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    82e8:	d501      	bpl.n	82ee <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    82ea:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    82ec:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    82ee:	2901      	cmp	r1, #1
    82f0:	d831      	bhi.n	8356 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    82f2:	f3bf 8f5b 	dmb	ish
    82f6:	e854 3f00 	ldrex	r3, [r4]
    82fa:	f043 0202 	orr.w	r2, r3, #2
    82fe:	e844 2100 	strex	r1, r2, [r4]
    8302:	2900      	cmp	r1, #0
    8304:	d1f7      	bne.n	82f6 <le_gen_dhkey+0x22>
    8306:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    830a:	079b      	lsls	r3, r3, #30
    830c:	d4ed      	bmi.n	82ea <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, BT_PUB_KEY_COORD_LEN);
    830e:	4814      	ldr	r0, [pc, #80]	; (8360 <le_gen_dhkey+0x8c>)
    8310:	4631      	mov	r1, r6
    8312:	f021 fe1d 	bl	29f50 <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[BT_PUB_KEY_COORD_LEN], &key[BT_PUB_KEY_COORD_LEN],
    8316:	4813      	ldr	r0, [pc, #76]	; (8364 <le_gen_dhkey+0x90>)
    8318:	f106 0120 	add.w	r1, r6, #32
    831c:	f021 fe18 	bl	29f50 <sys_memcpy_swap.constprop.0>
    8320:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    8324:	b175      	cbz	r5, 8344 <le_gen_dhkey+0x70>
    8326:	e854 3f00 	ldrex	r3, [r4]
    832a:	f043 0304 	orr.w	r3, r3, #4
    832e:	e844 3200 	strex	r2, r3, [r4]
    8332:	2a00      	cmp	r2, #0
    8334:	d1f7      	bne.n	8326 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8336:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    833a:	480b      	ldr	r0, [pc, #44]	; (8368 <le_gen_dhkey+0x94>)
    833c:	f01c fcc0 	bl	24cc0 <z_impl_k_sem_give>
    8340:	2000      	movs	r0, #0
    8342:	e7d3      	b.n	82ec <le_gen_dhkey+0x18>
    8344:	e854 3f00 	ldrex	r3, [r4]
    8348:	f023 0304 	bic.w	r3, r3, #4
    834c:	e844 3200 	strex	r2, r3, [r4]
    8350:	2a00      	cmp	r2, #0
    8352:	d0f0      	beq.n	8336 <le_gen_dhkey+0x62>
    8354:	e7f6      	b.n	8344 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    8356:	2012      	movs	r0, #18
    8358:	e7c8      	b.n	82ec <le_gen_dhkey+0x18>
    835a:	bf00      	nop
    835c:	20002294 	.word	0x20002294
    8360:	20003a73 	.word	0x20003a73
    8364:	20003a93 	.word	0x20003a93
    8368:	20000d54 	.word	0x20000d54

0000836c <ecc_thread>:
{
    836c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8370:	4e6d      	ldr	r6, [pc, #436]	; (8528 <ecc_thread+0x1bc>)
	return z_impl_k_sem_take(sem, timeout);
    8372:	4f6e      	ldr	r7, [pc, #440]	; (852c <ecc_thread+0x1c0>)
    8374:	b089      	sub	sp, #36	; 0x24
    8376:	4635      	mov	r5, r6
    8378:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    837c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8380:	4638      	mov	r0, r7
    8382:	f01c fcc3 	bl	24d0c <z_impl_k_sem_take>
    8386:	f3bf 8f5b 	dmb	ish
    838a:	6834      	ldr	r4, [r6, #0]
    838c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8390:	f014 0401 	ands.w	r4, r4, #1
    8394:	d062      	beq.n	845c <ecc_thread+0xf0>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    8396:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8530 <ecc_thread+0x1c4>
    839a:	4c66      	ldr	r4, [pc, #408]	; (8534 <ecc_thread+0x1c8>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    839c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8538 <ecc_thread+0x1cc>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    83a0:	4866      	ldr	r0, [pc, #408]	; (853c <ecc_thread+0x1d0>)
    83a2:	464a      	mov	r2, r9
    83a4:	4621      	mov	r1, r4
    83a6:	f020 fc18 	bl	28bda <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    83aa:	4603      	mov	r3, r0
    83ac:	2800      	cmp	r0, #0
    83ae:	d142      	bne.n	8436 <ecc_thread+0xca>
			BT_ERR("Failed to create ECC public/private pair");
    83b0:	4a63      	ldr	r2, [pc, #396]	; (8540 <ecc_thread+0x1d4>)
    83b2:	9206      	str	r2, [sp, #24]
    83b4:	2202      	movs	r2, #2
    83b6:	9201      	str	r2, [sp, #4]
    83b8:	9205      	str	r2, [sp, #20]
    83ba:	4862      	ldr	r0, [pc, #392]	; (8544 <ecc_thread+0x1d8>)
    83bc:	aa05      	add	r2, sp, #20
    83be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return BT_HCI_ERR_UNSPECIFIED;
    83c2:	f04f 091f 	mov.w	r9, #31
    83c6:	f020 fb73 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    83ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    83ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83d2:	2001      	movs	r0, #1
    83d4:	f000 f988 	bl	86e8 <bt_buf_get_rx>
    83d8:	f100 0808 	add.w	r8, r0, #8
    83dc:	2102      	movs	r1, #2
    83de:	4604      	mov	r4, r0
    83e0:	4640      	mov	r0, r8
    83e2:	f024 fb72 	bl	2caca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    83e6:	233e      	movs	r3, #62	; 0x3e
    83e8:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    83ea:	2342      	movs	r3, #66	; 0x42
    83ec:	7043      	strb	r3, [r0, #1]
    83ee:	2101      	movs	r1, #1
    83f0:	4640      	mov	r0, r8
    83f2:	f024 fb6a 	bl	2caca <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    83f6:	2308      	movs	r3, #8
    83f8:	7003      	strb	r3, [r0, #0]
    83fa:	2141      	movs	r1, #65	; 0x41
    83fc:	4640      	mov	r0, r8
    83fe:	f024 fb64 	bl	2caca <net_buf_simple_add>
    8402:	4680      	mov	r8, r0
	evt->status = status;
    8404:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    8408:	f1b9 0f00 	cmp.w	r9, #0
    840c:	d01d      	beq.n	844a <ecc_thread+0xde>
__ssp_bos_icheck3(memset, void *, int)
    840e:	2240      	movs	r2, #64	; 0x40
    8410:	2100      	movs	r1, #0
    8412:	f026 f8c9 	bl	2e5a8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8416:	f3bf 8f5b 	dmb	ish
    841a:	e855 3f00 	ldrex	r3, [r5]
    841e:	f023 0301 	bic.w	r3, r3, #1
    8422:	e845 3200 	strex	r2, r3, [r5]
    8426:	2a00      	cmp	r2, #0
    8428:	d1f7      	bne.n	841a <ecc_thread+0xae>
    842a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    842e:	4620      	mov	r0, r4
	bt_recv(buf);
    8430:	f001 fb28 	bl	9a84 <bt_recv>
	while (true) {
    8434:	e7a0      	b.n	8378 <ecc_thread+0xc>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, BT_PRIV_KEY_LEN) == 0);
    8436:	2220      	movs	r2, #32
    8438:	4641      	mov	r1, r8
    843a:	4620      	mov	r0, r4
    843c:	f026 f883 	bl	2e546 <memcmp>
    8440:	2800      	cmp	r0, #0
    8442:	d0ad      	beq.n	83a0 <ecc_thread+0x34>
	return 0;
    8444:	f04f 0900 	mov.w	r9, #0
    8448:	e7bf      	b.n	83ca <ecc_thread+0x5e>
		sys_memcpy_swap(evt->key, ecc.public_key_be, BT_PUB_KEY_COORD_LEN);
    844a:	493c      	ldr	r1, [pc, #240]	; (853c <ecc_thread+0x1d0>)
    844c:	f021 fd80 	bl	29f50 <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[BT_PUB_KEY_COORD_LEN],
    8450:	3120      	adds	r1, #32
    8452:	f108 0021 	add.w	r0, r8, #33	; 0x21
    8456:	f021 fd7b 	bl	29f50 <sys_memcpy_swap.constprop.0>
    845a:	e7dc      	b.n	8416 <ecc_thread+0xaa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    845c:	f3bf 8f5b 	dmb	ish
    8460:	6833      	ldr	r3, [r6, #0]
    8462:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8466:	079b      	lsls	r3, r3, #30
    8468:	d586      	bpl.n	8378 <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    846a:	4931      	ldr	r1, [pc, #196]	; (8530 <ecc_thread+0x1c4>)
    846c:	4833      	ldr	r0, [pc, #204]	; (853c <ecc_thread+0x1d0>)
    846e:	f021 fa68 	bl	29942 <uECC_valid_public_key>
	if (ret < 0) {
    8472:	2800      	cmp	r0, #0
    8474:	da3f      	bge.n	84f6 <ecc_thread+0x18a>
		BT_ERR("public key is not valid (ret %d)", ret);
    8476:	4b34      	ldr	r3, [pc, #208]	; (8548 <ecc_thread+0x1dc>)
    8478:	e9cd 3006 	strd	r3, r0, [sp, #24]
    847c:	2303      	movs	r3, #3
    847e:	9301      	str	r3, [sp, #4]
    8480:	9305      	str	r3, [sp, #20]
    8482:	4830      	ldr	r0, [pc, #192]	; (8544 <ecc_thread+0x1d8>)
    8484:	4623      	mov	r3, r4
    8486:	aa05      	add	r2, sp, #20
    8488:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    848c:	f020 fb10 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8490:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8498:	2001      	movs	r0, #1
    849a:	f000 f925 	bl	86e8 <bt_buf_get_rx>
    849e:	f100 0908 	add.w	r9, r0, #8
    84a2:	2102      	movs	r1, #2
    84a4:	4680      	mov	r8, r0
    84a6:	4648      	mov	r0, r9
    84a8:	f024 fb0f 	bl	2caca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    84ac:	233e      	movs	r3, #62	; 0x3e
    84ae:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    84b0:	2322      	movs	r3, #34	; 0x22
    84b2:	7043      	strb	r3, [r0, #1]
    84b4:	2101      	movs	r1, #1
    84b6:	4648      	mov	r0, r9
    84b8:	f024 fb07 	bl	2caca <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    84bc:	2309      	movs	r3, #9
    84be:	7003      	strb	r3, [r0, #0]
    84c0:	2121      	movs	r1, #33	; 0x21
    84c2:	4648      	mov	r0, r9
    84c4:	f024 fb01 	bl	2caca <net_buf_simple_add>
    84c8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    84ca:	3001      	adds	r0, #1
    84cc:	bb34      	cbnz	r4, 851c <ecc_thread+0x1b0>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    84ce:	221f      	movs	r2, #31
    84d0:	701a      	strb	r2, [r3, #0]
    84d2:	21ff      	movs	r1, #255	; 0xff
    84d4:	2220      	movs	r2, #32
    84d6:	f026 f867 	bl	2e5a8 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    84da:	f3bf 8f5b 	dmb	ish
    84de:	e855 3f00 	ldrex	r3, [r5]
    84e2:	f023 0302 	bic.w	r3, r3, #2
    84e6:	e845 3200 	strex	r2, r3, [r5]
    84ea:	2a00      	cmp	r2, #0
    84ec:	d1f7      	bne.n	84de <ecc_thread+0x172>
    84ee:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    84f2:	4640      	mov	r0, r8
    84f4:	e79c      	b.n	8430 <ecc_thread+0xc4>
		ret = uECC_shared_secret(ecc.public_key_be,
    84f6:	490f      	ldr	r1, [pc, #60]	; (8534 <ecc_thread+0x1c8>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    84f8:	f3bf 8f5b 	dmb	ish
    84fc:	6833      	ldr	r3, [r6, #0]
    84fe:	480e      	ldr	r0, [pc, #56]	; (8538 <ecc_thread+0x1cc>)
    8500:	f3bf 8f5b 	dmb	ish
    8504:	f013 0f04 	tst.w	r3, #4
    8508:	f101 0220 	add.w	r2, r1, #32
    850c:	4b08      	ldr	r3, [pc, #32]	; (8530 <ecc_thread+0x1c4>)
    850e:	bf18      	it	ne
    8510:	4601      	movne	r1, r0
    8512:	4610      	mov	r0, r2
    8514:	f020 fbae 	bl	28c74 <uECC_shared_secret>
    8518:	4604      	mov	r4, r0
    851a:	e7b9      	b.n	8490 <ecc_thread+0x124>
		evt->status = 0U;
    851c:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    851e:	4907      	ldr	r1, [pc, #28]	; (853c <ecc_thread+0x1d0>)
		evt->status = 0U;
    8520:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8522:	f021 fd15 	bl	29f50 <sys_memcpy_swap.constprop.0>
    8526:	e7d8      	b.n	84da <ecc_thread+0x16e>
    8528:	20002294 	.word	0x20002294
    852c:	20000d54 	.word	0x20000d54
    8530:	0002f9d8 	.word	0x0002f9d8
    8534:	20003a53 	.word	0x20003a53
    8538:	00031f71 	.word	0x00031f71
    853c:	20003a73 	.word	0x20003a73
    8540:	00031f15 	.word	0x00031f15
    8544:	0002f4dc 	.word	0x0002f4dc
    8548:	00031f3e 	.word	0x00031f3e

0000854c <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    854c:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    854e:	7d06      	ldrb	r6, [r0, #20]
    8550:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    8552:	b976      	cbnz	r6, 8572 <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    8554:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    8556:	881d      	ldrh	r5, [r3, #0]
    8558:	f242 0226 	movw	r2, #8230	; 0x2026
    855c:	4295      	cmp	r5, r2
    855e:	d045      	beq.n	85ec <bt_hci_ecc_send+0xa0>
    8560:	d80f      	bhi.n	8582 <bt_hci_ecc_send+0x36>
    8562:	f242 0201 	movw	r2, #8193	; 0x2001
    8566:	4295      	cmp	r5, r2
    8568:	d04f      	beq.n	860a <bt_hci_ecc_send+0xbe>
    856a:	f242 0325 	movw	r3, #8229	; 0x2025
    856e:	429d      	cmp	r5, r3
    8570:	d013      	beq.n	859a <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    8572:	4b2a      	ldr	r3, [pc, #168]	; (861c <bt_hci_ecc_send+0xd0>)
    8574:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
    8578:	4620      	mov	r0, r4
    857a:	691b      	ldr	r3, [r3, #16]
}
    857c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    8580:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    8582:	f242 035e 	movw	r3, #8286	; 0x205e
    8586:	429d      	cmp	r5, r3
    8588:	d1f3      	bne.n	8572 <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    858a:	2103      	movs	r1, #3
    858c:	3008      	adds	r0, #8
    858e:	f024 fac5 	bl	2cb1c <net_buf_simple_pull>
	cmd = (void *)buf->data;
    8592:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    8594:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    8598:	e02e      	b.n	85f8 <bt_hci_ecc_send+0xac>
    859a:	2103      	movs	r1, #3
    859c:	3008      	adds	r0, #8
    859e:	f024 fabd 	bl	2cb1c <net_buf_simple_pull>
	net_buf_unref(buf);
    85a2:	4620      	mov	r0, r4
    85a4:	f018 fa44 	bl	20a30 <net_buf_unref>
    85a8:	f3bf 8f5b 	dmb	ish
    85ac:	4b1c      	ldr	r3, [pc, #112]	; (8620 <bt_hci_ecc_send+0xd4>)
    85ae:	681a      	ldr	r2, [r3, #0]
    85b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    85b4:	0792      	lsls	r2, r2, #30
    85b6:	d507      	bpl.n	85c8 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    85b8:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    85ba:	4631      	mov	r1, r6
    85bc:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    85c0:	f021 fca2 	bl	29f08 <send_cmd_status>
}
    85c4:	2000      	movs	r0, #0
    85c6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    85c8:	f3bf 8f5b 	dmb	ish
    85cc:	e853 2f00 	ldrex	r2, [r3]
    85d0:	f042 0101 	orr.w	r1, r2, #1
    85d4:	e843 1000 	strex	r0, r1, [r3]
    85d8:	2800      	cmp	r0, #0
    85da:	d1f7      	bne.n	85cc <bt_hci_ecc_send+0x80>
    85dc:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    85e0:	07d3      	lsls	r3, r2, #31
    85e2:	d4e9      	bmi.n	85b8 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    85e4:	480f      	ldr	r0, [pc, #60]	; (8624 <bt_hci_ecc_send+0xd8>)
    85e6:	f01c fb6b 	bl	24cc0 <z_impl_k_sem_give>
}
    85ea:	e7e6      	b.n	85ba <bt_hci_ecc_send+0x6e>
    85ec:	2103      	movs	r1, #3
    85ee:	3008      	adds	r0, #8
    85f0:	f024 fa94 	bl	2cb1c <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    85f4:	68a0      	ldr	r0, [r4, #8]
    85f6:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    85f8:	f7ff fe6c 	bl	82d4 <le_gen_dhkey>
    85fc:	4606      	mov	r6, r0
	net_buf_unref(buf);
    85fe:	4620      	mov	r0, r4
    8600:	f018 fa16 	bl	20a30 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    8604:	4631      	mov	r1, r6
    8606:	4628      	mov	r0, r5
    8608:	e7da      	b.n	85c0 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    860a:	78da      	ldrb	r2, [r3, #3]
    860c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    8610:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    8612:	791a      	ldrb	r2, [r3, #4]
    8614:	f022 0201 	bic.w	r2, r2, #1
    8618:	711a      	strb	r2, [r3, #4]
}
    861a:	e7aa      	b.n	8572 <bt_hci_ecc_send+0x26>
    861c:	20000000 	.word	0x20000000
    8620:	20002294 	.word	0x20002294
    8624:	20000d54 	.word	0x20000d54

00008628 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8628:	b510      	push	{r4, lr}
    862a:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    862c:	4c0c      	ldr	r4, [pc, #48]	; (8660 <bt_hci_ecc_init+0x38>)
    862e:	490d      	ldr	r1, [pc, #52]	; (8664 <bt_hci_ecc_init+0x3c>)
    8630:	2200      	movs	r2, #0
    8632:	2300      	movs	r3, #0
    8634:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8638:	2300      	movs	r3, #0
    863a:	220a      	movs	r2, #10
    863c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    8640:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8644:	9300      	str	r3, [sp, #0]
    8646:	f44f 628f 	mov.w	r2, #1144	; 0x478
    864a:	4b07      	ldr	r3, [pc, #28]	; (8668 <bt_hci_ecc_init+0x40>)
    864c:	4620      	mov	r0, r4
    864e:	f01c f8f5 	bl	2483c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    8652:	4906      	ldr	r1, [pc, #24]	; (866c <bt_hci_ecc_init+0x44>)
    8654:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8656:	b008      	add	sp, #32
    8658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    865c:	f025 ba75 	b.w	2db4a <z_impl_k_thread_name_set>
    8660:	20001628 	.word	0x20001628
    8664:	20006100 	.word	0x20006100
    8668:	0000836d 	.word	0x0000836d
    866c:	00031f5f 	.word	0x00031f5f

00008670 <uuid_to_uuid128>:
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
	switch (src->type) {
    8670:	7803      	ldrb	r3, [r0, #0]
    8672:	2b01      	cmp	r3, #1
{
    8674:	b530      	push	{r4, r5, lr}
	switch (src->type) {
    8676:	d013      	beq.n	86a0 <uuid_to_uuid128+0x30>
    8678:	2b02      	cmp	r3, #2
    867a:	d027      	beq.n	86cc <uuid_to_uuid128+0x5c>
    867c:	b97b      	cbnz	r3, 869e <uuid_to_uuid128+0x2e>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    867e:	4b19      	ldr	r3, [pc, #100]	; (86e4 <uuid_to_uuid128+0x74>)
    8680:	460a      	mov	r2, r1
    8682:	f103 0410 	add.w	r4, r3, #16
    8686:	f853 5b04 	ldr.w	r5, [r3], #4
    868a:	f842 5b04 	str.w	r5, [r2], #4
    868e:	42a3      	cmp	r3, r4
    8690:	d1f9      	bne.n	8686 <uuid_to_uuid128+0x16>
    8692:	781b      	ldrb	r3, [r3, #0]
    8694:	7013      	strb	r3, [r2, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    8696:	8843      	ldrh	r3, [r0, #2]
	dst[0] = val;
    8698:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    869a:	0a1b      	lsrs	r3, r3, #8
    869c:	738b      	strb	r3, [r1, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    869e:	bd30      	pop	{r4, r5, pc}
		*dst = uuid128_base;
    86a0:	4b10      	ldr	r3, [pc, #64]	; (86e4 <uuid_to_uuid128+0x74>)
    86a2:	460a      	mov	r2, r1
    86a4:	f103 0410 	add.w	r4, r3, #16
    86a8:	f853 5b04 	ldr.w	r5, [r3], #4
    86ac:	f842 5b04 	str.w	r5, [r2], #4
    86b0:	42a3      	cmp	r3, r4
    86b2:	d1f9      	bne.n	86a8 <uuid_to_uuid128+0x38>
    86b4:	781b      	ldrb	r3, [r3, #0]
    86b6:	7013      	strb	r3, [r2, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    86b8:	6843      	ldr	r3, [r0, #4]
	dst[0] = val;
    86ba:	734b      	strb	r3, [r1, #13]
	dst[1] = val >> 8;
    86bc:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    86c0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    86c2:	73cb      	strb	r3, [r1, #15]
	dst[1] = val >> 8;
    86c4:	0a1b      	lsrs	r3, r3, #8
    86c6:	738a      	strb	r2, [r1, #14]
    86c8:	740b      	strb	r3, [r1, #16]
}
    86ca:	e7e8      	b.n	869e <uuid_to_uuid128+0x2e>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    86cc:	f100 0310 	add.w	r3, r0, #16
    86d0:	f850 2b04 	ldr.w	r2, [r0], #4
    86d4:	f841 2b04 	str.w	r2, [r1], #4
    86d8:	4298      	cmp	r0, r3
    86da:	d1f9      	bne.n	86d0 <uuid_to_uuid128+0x60>
    86dc:	7803      	ldrb	r3, [r0, #0]
    86de:	700b      	strb	r3, [r1, #0]
    86e0:	e7dd      	b.n	869e <uuid_to_uuid128+0x2e>
    86e2:	bf00      	nop
    86e4:	00031f91 	.word	0x00031f91

000086e8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    86e8:	b538      	push	{r3, r4, r5, lr}
    86ea:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    86ec:	4805      	ldr	r0, [pc, #20]	; (8704 <bt_buf_get_rx+0x1c>)
    86ee:	f024 f984 	bl	2c9fa <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    86f2:	4604      	mov	r4, r0
    86f4:	b120      	cbz	r0, 8700 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    86f6:	2100      	movs	r1, #0
    86f8:	3008      	adds	r0, #8
    86fa:	f024 f9a3 	bl	2ca44 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    86fe:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8700:	4620      	mov	r0, r4
    8702:	bd38      	pop	{r3, r4, r5, pc}
    8704:	20000e94 	.word	0x20000e94

00008708 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8708:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
    870a:	490b      	ldr	r1, [pc, #44]	; (8738 <bt_buf_get_cmd_complete+0x30>)
{
    870c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
    870e:	f8d1 0138 	ldr.w	r0, [r1, #312]	; 0x138
{
    8712:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
    8714:	b920      	cbnz	r0, 8720 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    8716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    871a:	2001      	movs	r0, #1
    871c:	f7ff bfe4 	b.w	86e8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
    8720:	f024 f9a1 	bl	2ca66 <net_buf_ref>
    8724:	2301      	movs	r3, #1
		buf->len = 0U;
    8726:	2100      	movs	r1, #0
    8728:	7503      	strb	r3, [r0, #20]
    872a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
    872c:	4604      	mov	r4, r0
    872e:	3008      	adds	r0, #8
    8730:	f024 f988 	bl	2ca44 <net_buf_simple_reserve>
}
    8734:	4620      	mov	r0, r4
    8736:	bd10      	pop	{r4, pc}
    8738:	20000000 	.word	0x20000000

0000873c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    873c:	b570      	push	{r4, r5, r6, lr}
    873e:	4604      	mov	r4, r0
	switch (evt) {
    8740:	2c0f      	cmp	r4, #15
{
    8742:	460d      	mov	r5, r1
    8744:	4610      	mov	r0, r2
    8746:	4619      	mov	r1, r3
	switch (evt) {
    8748:	d805      	bhi.n	8756 <bt_buf_get_evt+0x1a>
    874a:	2c0d      	cmp	r4, #13
    874c:	d912      	bls.n	8774 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    874e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    8752:	f7ff bfd9 	b.w	8708 <bt_buf_get_cmd_complete>
	switch (evt) {
    8756:	2c13      	cmp	r4, #19
    8758:	d10c      	bne.n	8774 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    875a:	480b      	ldr	r0, [pc, #44]	; (8788 <bt_buf_get_evt+0x4c>)
    875c:	f024 f94d 	bl	2c9fa <net_buf_alloc_fixed>
			if (buf) {
    8760:	4604      	mov	r4, r0
    8762:	b128      	cbz	r0, 8770 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    8764:	2100      	movs	r1, #0
    8766:	3008      	adds	r0, #8
    8768:	f024 f96c 	bl	2ca44 <net_buf_simple_reserve>
    876c:	2301      	movs	r3, #1
    876e:	7523      	strb	r3, [r4, #20]
}
    8770:	4620      	mov	r0, r4
    8772:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    8774:	4602      	mov	r2, r0
    8776:	460b      	mov	r3, r1
		if (discardable) {
    8778:	b10d      	cbz	r5, 877e <bt_buf_get_evt+0x42>
    877a:	4804      	ldr	r0, [pc, #16]	; (878c <bt_buf_get_evt+0x50>)
    877c:	e7ee      	b.n	875c <bt_buf_get_evt+0x20>
}
    877e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8782:	2001      	movs	r0, #1
    8784:	f7ff bfb0 	b.w	86e8 <bt_buf_get_rx>
    8788:	20000ec0 	.word	0x20000ec0
    878c:	20000e10 	.word	0x20000e10

00008790 <hci_disconn_complete_prio>:
{
    8790:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8792:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8794:	781a      	ldrb	r2, [r3, #0]
    8796:	b972      	cbnz	r2, 87b6 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8798:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    879c:	4620      	mov	r0, r4
    879e:	f002 ff9f 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    87a2:	4605      	mov	r5, r0
    87a4:	b940      	cbnz	r0, 87b8 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    87a6:	4b08      	ldr	r3, [pc, #32]	; (87c8 <hci_disconn_complete_prio+0x38>)
    87a8:	881a      	ldrh	r2, [r3, #0]
    87aa:	b922      	cbnz	r2, 87b6 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    87ac:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    87b0:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    87b4:	8018      	strh	r0, [r3, #0]
}
    87b6:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    87b8:	2101      	movs	r1, #1
    87ba:	f002 ff99 	bl	b6f0 <bt_conn_set_state>
	bt_conn_unref(conn);
    87be:	4628      	mov	r0, r5
}
    87c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    87c4:	f022 b841 	b.w	2a84a <bt_conn_unref>
    87c8:	2000395a 	.word	0x2000395a

000087cc <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    87cc:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    87ce:	4c0c      	ldr	r4, [pc, #48]	; (8800 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    87d0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    87d2:	2205      	movs	r2, #5
    87d4:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
    87d8:	f003 fa04 	bl	bbe4 <bt_conn_lookup_state_le>
		if (!conn) {
    87dc:	b970      	cbnz	r0, 87fc <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    87de:	4b09      	ldr	r3, [pc, #36]	; (8804 <find_pending_connect.part.0+0x38>)
    87e0:	6818      	ldr	r0, [r3, #0]
    87e2:	889a      	ldrh	r2, [r3, #4]
    87e4:	9000      	str	r0, [sp, #0]
    87e6:	799b      	ldrb	r3, [r3, #6]
    87e8:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    87ec:	f894 0067 	ldrb.w	r0, [r4, #103]	; 0x67
						       BT_ADDR_LE_NONE,
    87f0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    87f4:	2204      	movs	r2, #4
    87f6:	4669      	mov	r1, sp
    87f8:	f003 f9f4 	bl	bbe4 <bt_conn_lookup_state_le>
}
    87fc:	b002      	add	sp, #8
    87fe:	bd10      	pop	{r4, pc}
    8800:	20000000 	.word	0x20000000
    8804:	0002f6f8 	.word	0x0002f6f8

00008808 <hci_data_buf_overflow>:
{
    8808:	b500      	push	{lr}
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    880a:	6883      	ldr	r3, [r0, #8]
    880c:	4a07      	ldr	r2, [pc, #28]	; (882c <hci_data_buf_overflow+0x24>)
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	4807      	ldr	r0, [pc, #28]	; (8830 <hci_data_buf_overflow+0x28>)
{
    8812:	b089      	sub	sp, #36	; 0x24
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8814:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8818:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    881c:	2303      	movs	r3, #3
    881e:	aa05      	add	r2, sp, #20
    8820:	9305      	str	r3, [sp, #20]
    8822:	f021 fc63 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    8826:	b009      	add	sp, #36	; 0x24
    8828:	f85d fb04 	ldr.w	pc, [sp], #4
    882c:	00031fa9 	.word	0x00031fa9
    8830:	0002f4d4 	.word	0x0002f4d4

00008834 <le_conn_update_complete>:
{
    8834:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8836:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8838:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    883c:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    883e:	4630      	mov	r0, r6
    8840:	f002 ff4e 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    8844:	4604      	mov	r4, r0
    8846:	b968      	cbnz	r0, 8864 <le_conn_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8848:	4b25      	ldr	r3, [pc, #148]	; (88e0 <le_conn_update_complete+0xac>)
    884a:	4826      	ldr	r0, [pc, #152]	; (88e4 <le_conn_update_complete+0xb0>)
    884c:	e9cd 3606 	strd	r3, r6, [sp, #24]
    8850:	aa05      	add	r2, sp, #20
    8852:	2303      	movs	r3, #3
    8854:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8858:	9301      	str	r3, [sp, #4]
    885a:	9305      	str	r3, [sp, #20]
    885c:	f021 fc46 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    8860:	b008      	add	sp, #32
    8862:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    8864:	782b      	ldrb	r3, [r5, #0]
    8866:	b9cb      	cbnz	r3, 889c <le_conn_update_complete+0x68>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8868:	792a      	ldrb	r2, [r5, #4]
    886a:	78eb      	ldrb	r3, [r5, #3]
    886c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8870:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8874:	79aa      	ldrb	r2, [r5, #6]
    8876:	796b      	ldrb	r3, [r5, #5]
    8878:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    887c:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8880:	79eb      	ldrb	r3, [r5, #7]
    8882:	7a2a      	ldrb	r2, [r5, #8]
    8884:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8888:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    888c:	f003 f874 	bl	b978 <notify_le_param_updated>
	bt_conn_unref(conn);
    8890:	4620      	mov	r0, r4
}
    8892:	b008      	add	sp, #32
    8894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8898:	f021 bfd7 	b.w	2a84a <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    889c:	2b1a      	cmp	r3, #26
    889e:	d1f7      	bne.n	8890 <le_conn_update_complete+0x5c>
    88a0:	78c3      	ldrb	r3, [r0, #3]
    88a2:	2b01      	cmp	r3, #1
    88a4:	d1f4      	bne.n	8890 <le_conn_update_complete+0x5c>
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    88a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    88aa:	3004      	adds	r0, #4
    88ac:	f021 fc03 	bl	2a0b6 <atomic_or>
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
    88b0:	0543      	lsls	r3, r0, #21
    88b2:	d4ed      	bmi.n	8890 <le_conn_update_complete+0x5c>
		param.interval_min = conn->le.interval_min;
    88b4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    88b8:	f8ad 3008 	strh.w	r3, [sp, #8]
		param.interval_max = conn->le.interval_max;
    88bc:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    88c0:	f8ad 300a 	strh.w	r3, [sp, #10]
		param.latency = conn->le.pending_latency;
    88c4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    88c8:	f8ad 300c 	strh.w	r3, [sp, #12]
		bt_l2cap_update_conn_param(conn, &param);
    88cc:	a902      	add	r1, sp, #8
		param.timeout = conn->le.pending_timeout;
    88ce:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    88d2:	f8ad 300e 	strh.w	r3, [sp, #14]
		bt_l2cap_update_conn_param(conn, &param);
    88d6:	4620      	mov	r0, r4
    88d8:	f003 fd44 	bl	c364 <bt_l2cap_update_conn_param>
    88dc:	e7d8      	b.n	8890 <le_conn_update_complete+0x5c>
    88de:	bf00      	nop
    88e0:	00031fd1 	.word	0x00031fd1
    88e4:	0002f4d4 	.word	0x0002f4d4

000088e8 <hci_hardware_error>:
{
    88e8:	b500      	push	{lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    88ea:	2101      	movs	r1, #1
    88ec:	b089      	sub	sp, #36	; 0x24
    88ee:	3008      	adds	r0, #8
    88f0:	f024 f91c 	bl	2cb2c <net_buf_simple_pull_mem>
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    88f4:	4a07      	ldr	r2, [pc, #28]	; (8914 <hci_hardware_error+0x2c>)
    88f6:	7803      	ldrb	r3, [r0, #0]
    88f8:	4807      	ldr	r0, [pc, #28]	; (8918 <hci_hardware_error+0x30>)
    88fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    88fe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8902:	2303      	movs	r3, #3
    8904:	aa05      	add	r2, sp, #20
    8906:	9305      	str	r3, [sp, #20]
    8908:	f021 fbf0 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    890c:	b009      	add	sp, #36	; 0x24
    890e:	f85d fb04 	ldr.w	pc, [sp], #4
    8912:	bf00      	nop
    8914:	00031ff5 	.word	0x00031ff5
    8918:	0002f4d4 	.word	0x0002f4d4

0000891c <le_data_len_change>:
{
    891c:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    891e:	6883      	ldr	r3, [r0, #8]
    8920:	881c      	ldrh	r4, [r3, #0]
{
    8922:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    8924:	4620      	mov	r0, r4
    8926:	f002 fedb 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    892a:	b968      	cbnz	r0, 8948 <le_data_len_change+0x2c>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    892c:	4b09      	ldr	r3, [pc, #36]	; (8954 <le_data_len_change+0x38>)
    892e:	480a      	ldr	r0, [pc, #40]	; (8958 <le_data_len_change+0x3c>)
    8930:	e9cd 3406 	strd	r3, r4, [sp, #24]
    8934:	aa05      	add	r2, sp, #20
    8936:	2303      	movs	r3, #3
    8938:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    893c:	9301      	str	r3, [sp, #4]
    893e:	9305      	str	r3, [sp, #20]
    8940:	f021 fbd4 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    8944:	b008      	add	sp, #32
    8946:	bd10      	pop	{r4, pc}
    8948:	b008      	add	sp, #32
    894a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    894e:	f021 bf7c 	b.w	2a84a <bt_conn_unref>
    8952:	bf00      	nop
    8954:	00031fd1 	.word	0x00031fd1
    8958:	0002f4d4 	.word	0x0002f4d4

0000895c <hci_vendor_event>:
{
    895c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    895e:	8981      	ldrh	r1, [r0, #12]
    8960:	6880      	ldr	r0, [r0, #8]
    8962:	f7ff fc57 	bl	8214 <bt_hex_real>
    8966:	4b06      	ldr	r3, [pc, #24]	; (8980 <hci_vendor_event+0x24>)
    8968:	9301      	str	r3, [sp, #4]
    896a:	2300      	movs	r3, #0
    896c:	9002      	str	r0, [sp, #8]
    896e:	4905      	ldr	r1, [pc, #20]	; (8984 <hci_vendor_event+0x28>)
    8970:	9300      	str	r3, [sp, #0]
    8972:	2202      	movs	r2, #2
    8974:	4618      	mov	r0, r3
    8976:	f021 fbbc 	bl	2a0f2 <z_log_msg2_runtime_create.constprop.0>
}
    897a:	b005      	add	sp, #20
    897c:	f85d fb04 	ldr.w	pc, [sp], #4
    8980:	00032017 	.word	0x00032017
    8984:	0002f4d4 	.word	0x0002f4d4

00008988 <handle_event>:
{
    8988:	b5b0      	push	{r4, r5, r7, lr}
    898a:	b088      	sub	sp, #32
    898c:	4604      	mov	r4, r0
    898e:	af06      	add	r7, sp, #24
    8990:	4608      	mov	r0, r1
	for (i = 0; i < num_handlers; i++) {
    8992:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
		if (handler->event != event) {
    8996:	7811      	ldrb	r1, [r2, #0]
    8998:	42a1      	cmp	r1, r4
    899a:	d014      	beq.n	89c6 <handle_event+0x3e>
	for (i = 0; i < num_handlers; i++) {
    899c:	3208      	adds	r2, #8
    899e:	429a      	cmp	r2, r3
    89a0:	d1f9      	bne.n	8996 <handle_event+0xe>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    89a2:	8985      	ldrh	r5, [r0, #12]
    89a4:	6880      	ldr	r0, [r0, #8]
    89a6:	4629      	mov	r1, r5
    89a8:	f7ff fc34 	bl	8214 <bt_hex_real>
    89ac:	4b13      	ldr	r3, [pc, #76]	; (89fc <handle_event+0x74>)
    89ae:	9301      	str	r3, [sp, #4]
    89b0:	2300      	movs	r3, #0
    89b2:	e9cd 5003 	strd	r5, r0, [sp, #12]
    89b6:	4912      	ldr	r1, [pc, #72]	; (8a00 <handle_event+0x78>)
    89b8:	9402      	str	r4, [sp, #8]
    89ba:	9300      	str	r3, [sp, #0]
    89bc:	2202      	movs	r2, #2
    89be:	4618      	mov	r0, r3
    89c0:	f021 fb97 	bl	2a0f2 <z_log_msg2_runtime_create.constprop.0>
    89c4:	e014      	b.n	89f0 <handle_event+0x68>
		if (buf->len < handler->min_len) {
    89c6:	8983      	ldrh	r3, [r0, #12]
    89c8:	7851      	ldrb	r1, [r2, #1]
    89ca:	4299      	cmp	r1, r3
    89cc:	d913      	bls.n	89f6 <handle_event+0x6e>
			BT_ERR("Too small (%u bytes) event 0x%02x",
    89ce:	490d      	ldr	r1, [pc, #52]	; (8a04 <handle_event+0x7c>)
    89d0:	480b      	ldr	r0, [pc, #44]	; (8a00 <handle_event+0x78>)
    89d2:	466d      	mov	r5, sp
    89d4:	b088      	sub	sp, #32
    89d6:	aa06      	add	r2, sp, #24
    89d8:	e9c2 1304 	strd	r1, r3, [r2, #16]
    89dc:	2304      	movs	r3, #4
    89de:	6194      	str	r4, [r2, #24]
    89e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    89e4:	f842 3f0c 	str.w	r3, [r2, #12]!
    89e8:	607b      	str	r3, [r7, #4]
    89ea:	f021 fb7f 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
    89ee:	46ad      	mov	sp, r5
}
    89f0:	3708      	adds	r7, #8
    89f2:	46bd      	mov	sp, r7
    89f4:	bdb0      	pop	{r4, r5, r7, pc}
		handler->handler(buf);
    89f6:	6853      	ldr	r3, [r2, #4]
    89f8:	4798      	blx	r3
		return;
    89fa:	e7f9      	b.n	89f0 <handle_event+0x68>
    89fc:	0003205d 	.word	0x0003205d
    8a00:	0002f4d4 	.word	0x0002f4d4
    8a04:	0003203b 	.word	0x0003203b

00008a08 <hci_le_meta_event>:
{
    8a08:	b510      	push	{r4, lr}
    8a0a:	2101      	movs	r1, #1
    8a0c:	4604      	mov	r4, r0
    8a0e:	3008      	adds	r0, #8
    8a10:	f024 f88c 	bl	2cb2c <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8a14:	4621      	mov	r1, r4
    8a16:	4a03      	ldr	r2, [pc, #12]	; (8a24 <hci_le_meta_event+0x1c>)
    8a18:	7800      	ldrb	r0, [r0, #0]
}
    8a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8a1e:	230b      	movs	r3, #11
    8a20:	f7ff bfb2 	b.w	8988 <handle_event>
    8a24:	0002fab8 	.word	0x0002fab8

00008a28 <hci_cmd_done>:
{
    8a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a2c:	b082      	sub	sp, #8
    8a2e:	4680      	mov	r8, r0
    8a30:	af00      	add	r7, sp, #0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8a32:	7990      	ldrb	r0, [r2, #6]
    8a34:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8b68 <hci_cmd_done+0x140>
{
    8a38:	460e      	mov	r6, r1
    8a3a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8a3c:	f017 ff34 	bl	208a8 <net_buf_pool_get>
    8a40:	4581      	cmp	r9, r0
    8a42:	d020      	beq.n	8a86 <hci_cmd_done+0x5e>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8a44:	79a0      	ldrb	r0, [r4, #6]
    8a46:	f017 ff2f 	bl	208a8 <net_buf_pool_get>
    8a4a:	466e      	mov	r6, sp
    8a4c:	b08a      	sub	sp, #40	; 0x28
    8a4e:	466d      	mov	r5, sp
    8a50:	4b46      	ldr	r3, [pc, #280]	; (8b6c <hci_cmd_done+0x144>)
    8a52:	79a0      	ldrb	r0, [r4, #6]
    8a54:	61a8      	str	r0, [r5, #24]
    8a56:	e9c5 3804 	strd	r3, r8, [r5, #16]
    8a5a:	f017 ff25 	bl	208a8 <net_buf_pool_get>
    8a5e:	79a0      	ldrb	r0, [r4, #6]
    8a60:	f017 ff22 	bl	208a8 <net_buf_pool_get>
    8a64:	462a      	mov	r2, r5
    8a66:	2306      	movs	r3, #6
    8a68:	e9c5 0907 	strd	r0, r9, [r5, #28]
    8a6c:	f44f 5142 	mov.w	r1, #12416	; 0x3080
    8a70:	f842 3f0c 	str.w	r3, [r2, #12]!
    8a74:	483e      	ldr	r0, [pc, #248]	; (8b70 <hci_cmd_done+0x148>)
    8a76:	607b      	str	r3, [r7, #4]
    8a78:	f021 fb38 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
    8a7c:	46b5      	mov	sp, r6
}
    8a7e:	3708      	adds	r7, #8
    8a80:	46bd      	mov	sp, r7
    8a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (cmd(buf)->opcode != opcode) {
    8a86:	4620      	mov	r0, r4
    8a88:	f017 ff16 	bl	208b8 <net_buf_id>
    8a8c:	4d39      	ldr	r5, [pc, #228]	; (8b74 <hci_cmd_done+0x14c>)
    8a8e:	f04f 0a0c 	mov.w	sl, #12
    8a92:	fb0a 5000 	mla	r0, sl, r0, r5
    8a96:	8843      	ldrh	r3, [r0, #2]
    8a98:	4543      	cmp	r3, r8
    8a9a:	d01e      	beq.n	8ada <hci_cmd_done+0xb2>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    8a9c:	4620      	mov	r0, r4
    8a9e:	f017 ff0b 	bl	208b8 <net_buf_id>
    8aa2:	46e9      	mov	r9, sp
    8aa4:	4b34      	ldr	r3, [pc, #208]	; (8b78 <hci_cmd_done+0x150>)
    8aa6:	b088      	sub	sp, #32
    8aa8:	466e      	mov	r6, sp
    8aaa:	e9c6 3804 	strd	r3, r8, [r6, #16]
    8aae:	4620      	mov	r0, r4
    8ab0:	f017 ff02 	bl	208b8 <net_buf_id>
    8ab4:	4620      	mov	r0, r4
    8ab6:	f017 feff 	bl	208b8 <net_buf_id>
    8aba:	fb0a 5500 	mla	r5, sl, r0, r5
    8abe:	4632      	mov	r2, r6
    8ac0:	886b      	ldrh	r3, [r5, #2]
    8ac2:	61b3      	str	r3, [r6, #24]
    8ac4:	2304      	movs	r3, #4
    8ac6:	f842 3f0c 	str.w	r3, [r2, #12]!
    8aca:	4829      	ldr	r0, [pc, #164]	; (8b70 <hci_cmd_done+0x148>)
    8acc:	607b      	str	r3, [r7, #4]
    8ace:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    8ad2:	f021 fb0b 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
    8ad6:	46cd      	mov	sp, r9
		return;
    8ad8:	e7d1      	b.n	8a7e <hci_cmd_done+0x56>
	if (bt_dev.sent_cmd) {
    8ada:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8b7c <hci_cmd_done+0x154>
    8ade:	f8d8 0138 	ldr.w	r0, [r8, #312]	; 0x138
    8ae2:	b120      	cbz	r0, 8aee <hci_cmd_done+0xc6>
		net_buf_unref(bt_dev.sent_cmd);
    8ae4:	f017 ffa4 	bl	20a30 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8ae8:	2300      	movs	r3, #0
    8aea:	f8c8 3138 	str.w	r3, [r8, #312]	; 0x138
	if (cmd(buf)->state && !status) {
    8aee:	4620      	mov	r0, r4
    8af0:	f017 fee2 	bl	208b8 <net_buf_id>
    8af4:	f04f 080c 	mov.w	r8, #12
    8af8:	fb08 5000 	mla	r0, r8, r0, r5
    8afc:	6843      	ldr	r3, [r0, #4]
    8afe:	b1a3      	cbz	r3, 8b2a <hci_cmd_done+0x102>
    8b00:	b99e      	cbnz	r6, 8b2a <hci_cmd_done+0x102>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    8b02:	4620      	mov	r0, r4
    8b04:	f017 fed8 	bl	208b8 <net_buf_id>
    8b08:	fb08 5000 	mla	r0, r8, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    8b0c:	2101      	movs	r1, #1
    8b0e:	6842      	ldr	r2, [r0, #4]
    8b10:	e9d2 0300 	ldrd	r0, r3, [r2]
	if (val) {
    8b14:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    8b16:	f003 0c1f 	and.w	ip, r3, #31
    8b1a:	fa01 f10c 	lsl.w	r1, r1, ip
	if (val) {
    8b1e:	095b      	lsrs	r3, r3, #5
    8b20:	b1e2      	cbz	r2, 8b5c <hci_cmd_done+0x134>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8b22:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8b26:	f021 fac6 	bl	2a0b6 <atomic_or>
	if (cmd(buf)->sync) {
    8b2a:	4620      	mov	r0, r4
    8b2c:	f017 fec4 	bl	208b8 <net_buf_id>
    8b30:	f04f 080c 	mov.w	r8, #12
    8b34:	fb08 5000 	mla	r0, r8, r0, r5
    8b38:	6883      	ldr	r3, [r0, #8]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d09f      	beq.n	8a7e <hci_cmd_done+0x56>
		cmd(buf)->status = status;
    8b3e:	4620      	mov	r0, r4
    8b40:	f017 feba 	bl	208b8 <net_buf_id>
    8b44:	fb08 f000 	mul.w	r0, r8, r0
    8b48:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    8b4a:	4620      	mov	r0, r4
    8b4c:	f017 feb4 	bl	208b8 <net_buf_id>
    8b50:	fb08 5500 	mla	r5, r8, r0, r5
    8b54:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    8b56:	f01c f8b3 	bl	24cc0 <z_impl_k_sem_give>
}
    8b5a:	e790      	b.n	8a7e <hci_cmd_done+0x56>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8b5c:	43c9      	mvns	r1, r1
    8b5e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    8b62:	f021 fa99 	bl	2a098 <atomic_and>
    8b66:	e7e0      	b.n	8b2a <hci_cmd_done+0x102>
    8b68:	20000e68 	.word	0x20000e68
    8b6c:	0003207f 	.word	0x0003207f
    8b70:	0002f4d4 	.word	0x0002f4d4
    8b74:	2000229c 	.word	0x2000229c
    8b78:	000320b4 	.word	0x000320b4
    8b7c:	20000000 	.word	0x20000000

00008b80 <hci_cmd_status>:
{
    8b80:	b538      	push	{r3, r4, r5, lr}
    8b82:	2104      	movs	r1, #4
    8b84:	4604      	mov	r4, r0
    8b86:	3008      	adds	r0, #8
    8b88:	f023 ffd0 	bl	2cb2c <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8b8c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    8b8e:	7801      	ldrb	r1, [r0, #0]
    8b90:	8840      	ldrh	r0, [r0, #2]
    8b92:	4622      	mov	r2, r4
    8b94:	f7ff ff48 	bl	8a28 <hci_cmd_done>
	if (ncmd) {
    8b98:	b125      	cbz	r5, 8ba4 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
    8b9a:	4803      	ldr	r0, [pc, #12]	; (8ba8 <hci_cmd_status+0x28>)
}
    8b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8ba0:	f01c b88e 	b.w	24cc0 <z_impl_k_sem_give>
    8ba4:	bd38      	pop	{r3, r4, r5, pc}
    8ba6:	bf00      	nop
    8ba8:	20000120 	.word	0x20000120

00008bac <hci_cmd_complete>:
{
    8bac:	b538      	push	{r3, r4, r5, lr}
    8bae:	2103      	movs	r1, #3
    8bb0:	4604      	mov	r4, r0
    8bb2:	3008      	adds	r0, #8
    8bb4:	f023 ffba 	bl	2cb2c <net_buf_simple_pull_mem>
	status = buf->data[0];
    8bb8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8bba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8bbc:	7819      	ldrb	r1, [r3, #0]
    8bbe:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    8bc2:	4622      	mov	r2, r4
    8bc4:	f7ff ff30 	bl	8a28 <hci_cmd_done>
	if (ncmd) {
    8bc8:	b125      	cbz	r5, 8bd4 <hci_cmd_complete+0x28>
    8bca:	4803      	ldr	r0, [pc, #12]	; (8bd8 <hci_cmd_complete+0x2c>)
}
    8bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8bd0:	f01c b876 	b.w	24cc0 <z_impl_k_sem_give>
    8bd4:	bd38      	pop	{r3, r4, r5, pc}
    8bd6:	bf00      	nop
    8bd8:	20000120 	.word	0x20000120

00008bdc <hci_tx_thread>:
{
    8bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    8be0:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8d3c <hci_tx_thread+0x160>
		BT_ASSERT(err == 0);
    8be4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8d40 <hci_tx_thread+0x164>
{
    8be8:	b089      	sub	sp, #36	; 0x24
			ev_count += bt_conn_prepare_events(&events[1]);
    8bea:	f108 0a14 	add.w	sl, r8, #20
		events[0].state = K_POLL_STATE_NOT_READY;
    8bee:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8bf2:	4650      	mov	r0, sl
		events[0].state = K_POLL_STATE_NOT_READY;
    8bf4:	f36f 3352 	bfc	r3, #13, #6
    8bf8:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8bfc:	f002 fd3c 	bl	b678 <bt_conn_prepare_events>
    8c00:	1c46      	adds	r6, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    8c02:	484e      	ldr	r0, [pc, #312]	; (8d3c <hci_tx_thread+0x160>)
    8c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c0c:	4631      	mov	r1, r6
    8c0e:	f01c ffb9 	bl	25b84 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    8c12:	b160      	cbz	r0, 8c2e <hci_tx_thread+0x52>
    8c14:	494b      	ldr	r1, [pc, #300]	; (8d44 <hci_tx_thread+0x168>)
    8c16:	484c      	ldr	r0, [pc, #304]	; (8d48 <hci_tx_thread+0x16c>)
    8c18:	f640 1393 	movw	r3, #2451	; 0x993
    8c1c:	464a      	mov	r2, r9
    8c1e:	f01f f9c3 	bl	27fa8 <printk>
    8c22:	4040      	eors	r0, r0
    8c24:	f380 8811 	msr	BASEPRI, r0
    8c28:	f04f 0003 	mov.w	r0, #3
    8c2c:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8c2e:	4d47      	ldr	r5, [pc, #284]	; (8d4c <hci_tx_thread+0x170>)
{
    8c30:	4f42      	ldr	r7, [pc, #264]	; (8d3c <hci_tx_thread+0x160>)
    8c32:	f505 7b90 	add.w	fp, r5, #288	; 0x120
	for (; count; ev++, count--) {
    8c36:	b916      	cbnz	r6, 8c3e <hci_tx_thread+0x62>
	z_impl_k_yield();
    8c38:	f01c fc9e 	bl	25578 <z_impl_k_yield>
	while (1) {
    8c3c:	e7d7      	b.n	8bee <hci_tx_thread+0x12>
		switch (ev->state) {
    8c3e:	68fb      	ldr	r3, [r7, #12]
    8c40:	f3c3 3345 	ubfx	r3, r3, #13, #6
    8c44:	2b01      	cmp	r3, #1
    8c46:	d962      	bls.n	8d0e <hci_tx_thread+0x132>
    8c48:	2b04      	cmp	r3, #4
    8c4a:	d16a      	bne.n	8d22 <hci_tx_thread+0x146>
			if (ev->tag == BT_EVENT_CMD_TX) {
    8c4c:	7b3b      	ldrb	r3, [r7, #12]
    8c4e:	2b00      	cmp	r3, #0
    8c50:	d160      	bne.n	8d14 <hci_tx_thread+0x138>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    8c52:	483f      	ldr	r0, [pc, #252]	; (8d50 <hci_tx_thread+0x174>)
    8c54:	2200      	movs	r2, #0
    8c56:	2300      	movs	r3, #0
    8c58:	f023 fed4 	bl	2ca04 <net_buf_get>
	BT_ASSERT(buf);
    8c5c:	4604      	mov	r4, r0
    8c5e:	b960      	cbnz	r0, 8c7a <hci_tx_thread+0x9e>
    8c60:	493c      	ldr	r1, [pc, #240]	; (8d54 <hci_tx_thread+0x178>)
    8c62:	4839      	ldr	r0, [pc, #228]	; (8d48 <hci_tx_thread+0x16c>)
    8c64:	f640 132a 	movw	r3, #2346	; 0x92a
    8c68:	464a      	mov	r2, r9
    8c6a:	f01f f99d 	bl	27fa8 <printk>
    8c6e:	4040      	eors	r0, r0
    8c70:	f380 8811 	msr	BASEPRI, r0
    8c74:	f04f 0003 	mov.w	r0, #3
    8c78:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    8c7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8c7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8c82:	4658      	mov	r0, fp
    8c84:	f01c f842 	bl	24d0c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    8c88:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
    8c8c:	b18b      	cbz	r3, 8cb2 <hci_tx_thread+0xd6>
		BT_ERR("Uncleared pending sent_cmd");
    8c8e:	4b32      	ldr	r3, [pc, #200]	; (8d58 <hci_tx_thread+0x17c>)
    8c90:	4832      	ldr	r0, [pc, #200]	; (8d5c <hci_tx_thread+0x180>)
    8c92:	9306      	str	r3, [sp, #24]
    8c94:	aa05      	add	r2, sp, #20
    8c96:	2302      	movs	r3, #2
    8c98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8c9c:	9301      	str	r3, [sp, #4]
    8c9e:	9305      	str	r3, [sp, #20]
    8ca0:	f021 fa24 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		net_buf_unref(bt_dev.sent_cmd);
    8ca4:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    8ca8:	f017 fec2 	bl	20a30 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8cac:	2300      	movs	r3, #0
    8cae:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
	bt_dev.sent_cmd = net_buf_ref(buf);
    8cb2:	4620      	mov	r0, r4
    8cb4:	f023 fed7 	bl	2ca66 <net_buf_ref>
    8cb8:	f8c5 0138 	str.w	r0, [r5, #312]	; 0x138
		return bt_hci_ecc_send(buf);
    8cbc:	4620      	mov	r0, r4
    8cbe:	f7ff fc45 	bl	854c <bt_hci_ecc_send>
	if (err) {
    8cc2:	b320      	cbz	r0, 8d0e <hci_tx_thread+0x132>
		BT_ERR("Unable to send to driver (err %d)", err);
    8cc4:	4b26      	ldr	r3, [pc, #152]	; (8d60 <hci_tx_thread+0x184>)
    8cc6:	aa05      	add	r2, sp, #20
    8cc8:	e9cd 3006 	strd	r3, r0, [sp, #24]
    8ccc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8cd0:	2303      	movs	r3, #3
    8cd2:	4822      	ldr	r0, [pc, #136]	; (8d5c <hci_tx_thread+0x180>)
    8cd4:	9301      	str	r3, [sp, #4]
    8cd6:	9305      	str	r3, [sp, #20]
    8cd8:	f021 fa08 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	z_impl_k_sem_give(sem);
    8cdc:	4821      	ldr	r0, [pc, #132]	; (8d64 <hci_tx_thread+0x188>)
    8cde:	f01b ffef 	bl	24cc0 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    8ce2:	4620      	mov	r0, r4
    8ce4:	f017 fde8 	bl	208b8 <net_buf_id>
    8ce8:	4b1f      	ldr	r3, [pc, #124]	; (8d68 <hci_tx_thread+0x18c>)
    8cea:	220c      	movs	r2, #12
    8cec:	fb02 3000 	mla	r0, r2, r0, r3
    8cf0:	211f      	movs	r1, #31
    8cf2:	8840      	ldrh	r0, [r0, #2]
    8cf4:	4622      	mov	r2, r4
    8cf6:	f7ff fe97 	bl	8a28 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    8cfa:	f8d5 0138 	ldr.w	r0, [r5, #312]	; 0x138
    8cfe:	f017 fe97 	bl	20a30 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    8d02:	2300      	movs	r3, #0
		net_buf_unref(buf);
    8d04:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    8d06:	f8c5 3138 	str.w	r3, [r5, #312]	; 0x138
		net_buf_unref(buf);
    8d0a:	f017 fe91 	bl	20a30 <net_buf_unref>
	for (; count; ev++, count--) {
    8d0e:	3714      	adds	r7, #20
    8d10:	3e01      	subs	r6, #1
    8d12:	e790      	b.n	8c36 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    8d14:	2b01      	cmp	r3, #1
    8d16:	d1fa      	bne.n	8d0e <hci_tx_thread+0x132>
					conn = CONTAINER_OF(ev->fifo,
    8d18:	6938      	ldr	r0, [r7, #16]
					bt_conn_process_tx(conn);
    8d1a:	3838      	subs	r0, #56	; 0x38
    8d1c:	f003 f8c0 	bl	bea0 <bt_conn_process_tx>
    8d20:	e7f5      	b.n	8d0e <hci_tx_thread+0x132>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8d22:	4a12      	ldr	r2, [pc, #72]	; (8d6c <hci_tx_thread+0x190>)
    8d24:	480d      	ldr	r0, [pc, #52]	; (8d5c <hci_tx_thread+0x180>)
		switch (ev->state) {
    8d26:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    8d2a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8d2e:	2303      	movs	r3, #3
    8d30:	aa05      	add	r2, sp, #20
    8d32:	9301      	str	r3, [sp, #4]
    8d34:	9305      	str	r3, [sp, #20]
    8d36:	f021 f9d9 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
			break;
    8d3a:	e7e8      	b.n	8d0e <hci_tx_thread+0x132>
    8d3c:	200001c4 	.word	0x200001c4
    8d40:	000320e7 	.word	0x000320e7
    8d44:	0003211b 	.word	0x0003211b
    8d48:	00032124 	.word	0x00032124
    8d4c:	20000000 	.word	0x20000000
    8d50:	2000013c 	.word	0x2000013c
    8d54:	00031fa5 	.word	0x00031fa5
    8d58:	00032141 	.word	0x00032141
    8d5c:	0002f4d4 	.word	0x0002f4d4
    8d60:	0003215c 	.word	0x0003215c
    8d64:	20000120 	.word	0x20000120
    8d68:	2000229c 	.word	0x2000229c
    8d6c:	0003217e 	.word	0x0003217e

00008d70 <hci_num_completed_packets>:
{
    8d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    8d74:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    8d76:	6887      	ldr	r7, [r0, #8]
				BT_ERR("packets count mismatch");
    8d78:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8e68 <hci_num_completed_packets+0xf8>
{
    8d7c:	b088      	sub	sp, #32
			tx->pending_no_cb = 0U;
    8d7e:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    8d80:	783b      	ldrb	r3, [r7, #0]
    8d82:	429d      	cmp	r5, r3
    8d84:	db02      	blt.n	8d8c <hci_num_completed_packets+0x1c>
}
    8d86:	b008      	add	sp, #32
    8d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    8d8c:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    8d90:	f8b3 a001 	ldrh.w	sl, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    8d94:	f8b3 6003 	ldrh.w	r6, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    8d98:	4650      	mov	r0, sl
    8d9a:	f002 fca1 	bl	b6e0 <bt_conn_lookup_handle>
		if (!conn) {
    8d9e:	4604      	mov	r4, r0
    8da0:	b1d8      	cbz	r0, 8dda <hci_num_completed_packets+0x6a>
			k_work_submit(&conn->tx_complete_work);
    8da2:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    8da6:	2e00      	cmp	r6, #0
    8da8:	d03d      	beq.n	8e26 <hci_num_completed_packets+0xb6>
	__asm__ volatile(
    8daa:	f04f 0320 	mov.w	r3, #32
    8dae:	f3ef 8211 	mrs	r2, BASEPRI
    8db2:	f383 8812 	msr	BASEPRI_MAX, r3
    8db6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    8dba:	69e3      	ldr	r3, [r4, #28]
    8dbc:	b1db      	cbz	r3, 8df6 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    8dbe:	3b01      	subs	r3, #1
    8dc0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    8dc2:	f382 8811 	msr	BASEPRI, r2
    8dc6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    8dca:	4620      	mov	r0, r4
    8dcc:	f002 fb1c 	bl	b408 <bt_conn_get_pkts>
    8dd0:	3e01      	subs	r6, #1
    8dd2:	f01b ff75 	bl	24cc0 <z_impl_k_sem_give>
    8dd6:	b2b6      	uxth	r6, r6
    8dd8:	e7e5      	b.n	8da6 <hci_num_completed_packets+0x36>
			BT_ERR("No connection for handle %u", handle);
    8dda:	4b24      	ldr	r3, [pc, #144]	; (8e6c <hci_num_completed_packets+0xfc>)
    8ddc:	4824      	ldr	r0, [pc, #144]	; (8e70 <hci_num_completed_packets+0x100>)
    8dde:	e9cd 3a06 	strd	r3, sl, [sp, #24]
    8de2:	aa05      	add	r2, sp, #20
    8de4:	2303      	movs	r3, #3
    8de6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8dea:	9301      	str	r3, [sp, #4]
    8dec:	9305      	str	r3, [sp, #20]
    8dee:	f021 f97d 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < evt->num_handles; i++) {
    8df2:	3501      	adds	r5, #1
    8df4:	e7c4      	b.n	8d80 <hci_num_completed_packets+0x10>
	return list->head;
    8df6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8df8:	b12b      	cbz	r3, 8e06 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8dfa:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    8dfc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    8dfe:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8e00:	428b      	cmp	r3, r1
	list->tail = node;
    8e02:	bf08      	it	eq
    8e04:	61a0      	streq	r0, [r4, #24]
    8e06:	f382 8811 	msr	BASEPRI, r2
    8e0a:	f3bf 8f6f 	isb	sy
			if (!node) {
    8e0e:	b973      	cbnz	r3, 8e2e <hci_num_completed_packets+0xbe>
				BT_ERR("packets count mismatch");
    8e10:	2302      	movs	r3, #2
    8e12:	4817      	ldr	r0, [pc, #92]	; (8e70 <hci_num_completed_packets+0x100>)
    8e14:	f8cd 9018 	str.w	r9, [sp, #24]
    8e18:	aa05      	add	r2, sp, #20
    8e1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8e1e:	9301      	str	r3, [sp, #4]
    8e20:	9305      	str	r3, [sp, #20]
    8e22:	f021 f963 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		bt_conn_unref(conn);
    8e26:	4620      	mov	r0, r4
    8e28:	f021 fd0f 	bl	2a84a <bt_conn_unref>
    8e2c:	e7e1      	b.n	8df2 <hci_num_completed_packets+0x82>
	__asm__ volatile(
    8e2e:	f04f 0220 	mov.w	r2, #32
    8e32:	f3ef 8111 	mrs	r1, BASEPRI
    8e36:	f382 8812 	msr	BASEPRI_MAX, r2
    8e3a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    8e3e:	68da      	ldr	r2, [r3, #12]
    8e40:	61e2      	str	r2, [r4, #28]
	return list->tail;
    8e42:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    8e44:	f8c3 800c 	str.w	r8, [r3, #12]
	parent->next = child;
    8e48:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    8e4c:	b94a      	cbnz	r2, 8e62 <hci_num_completed_packets+0xf2>
	list->head = node;
    8e4e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    8e52:	f381 8811 	msr	BASEPRI, r1
    8e56:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    8e5a:	4650      	mov	r0, sl
    8e5c:	f01c f89c 	bl	24f98 <k_work_submit>
    8e60:	e7b3      	b.n	8dca <hci_num_completed_packets+0x5a>
	parent->next = child;
    8e62:	6013      	str	r3, [r2, #0]
	list->tail = node;
    8e64:	6263      	str	r3, [r4, #36]	; 0x24
}
    8e66:	e7f4      	b.n	8e52 <hci_num_completed_packets+0xe2>
    8e68:	000321bb 	.word	0x000321bb
    8e6c:	0003219f 	.word	0x0003219f
    8e70:	0002f4d4 	.word	0x0002f4d4

00008e74 <hci_disconn_complete>:
{
    8e74:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8e76:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8e78:	7835      	ldrb	r5, [r6, #0]
{
    8e7a:	b089      	sub	sp, #36	; 0x24
	if (evt->status) {
    8e7c:	b995      	cbnz	r5, 8ea4 <hci_disconn_complete+0x30>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8e7e:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8e82:	4638      	mov	r0, r7
    8e84:	f002 fc2c 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    8e88:	4604      	mov	r4, r0
    8e8a:	b968      	cbnz	r0, 8ea8 <hci_disconn_complete+0x34>
		BT_ERR("Unable to look up conn with handle %u", handle);
    8e8c:	4b15      	ldr	r3, [pc, #84]	; (8ee4 <hci_disconn_complete+0x70>)
    8e8e:	4816      	ldr	r0, [pc, #88]	; (8ee8 <hci_disconn_complete+0x74>)
    8e90:	e9cd 3706 	strd	r3, r7, [sp, #24]
    8e94:	aa05      	add	r2, sp, #20
    8e96:	2303      	movs	r3, #3
    8e98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8e9c:	9301      	str	r3, [sp, #4]
    8e9e:	9305      	str	r3, [sp, #20]
    8ea0:	f021 f924 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    8ea4:	b009      	add	sp, #36	; 0x24
    8ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn->err = evt->reason;
    8ea8:	78f3      	ldrb	r3, [r6, #3]
    8eaa:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8eac:	4629      	mov	r1, r5
    8eae:	f002 fc1f 	bl	b6f0 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
    8eb2:	78a3      	ldrb	r3, [r4, #2]
    8eb4:	2b01      	cmp	r3, #1
    8eb6:	d005      	beq.n	8ec4 <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
    8eb8:	4620      	mov	r0, r4
}
    8eba:	b009      	add	sp, #36	; 0x24
    8ebc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8ec0:	f021 bcc3 	b.w	2a84a <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8ec4:	f3bf 8f5b 	dmb	ish
    8ec8:	6863      	ldr	r3, [r4, #4]
    8eca:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    8ece:	07db      	lsls	r3, r3, #31
    8ed0:	d5f2      	bpl.n	8eb8 <hci_disconn_complete+0x44>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    8ed2:	4620      	mov	r0, r4
    8ed4:	2102      	movs	r1, #2
    8ed6:	f002 fc0b 	bl	b6f0 <bt_conn_set_state>
		bt_le_scan_update(false);
    8eda:	4628      	mov	r0, r5
    8edc:	f001 ff36 	bl	ad4c <bt_le_scan_update>
    8ee0:	e7ea      	b.n	8eb8 <hci_disconn_complete+0x44>
    8ee2:	bf00      	nop
    8ee4:	000321d2 	.word	0x000321d2
    8ee8:	0002f4d4 	.word	0x0002f4d4

00008eec <bt_hci_cmd_state_set_init>:
{
    8eec:	b510      	push	{r4, lr}
	state->bit = bit;
    8eee:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    8ef2:	f89d 3008 	ldrb.w	r3, [sp, #8]
    8ef6:	720b      	strb	r3, [r1, #8]
{
    8ef8:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    8efa:	f017 fcdd 	bl	208b8 <net_buf_id>
    8efe:	4b03      	ldr	r3, [pc, #12]	; (8f0c <bt_hci_cmd_state_set_init+0x20>)
    8f00:	220c      	movs	r2, #12
    8f02:	fb02 3300 	mla	r3, r2, r0, r3
    8f06:	605c      	str	r4, [r3, #4]
}
    8f08:	bd10      	pop	{r4, pc}
    8f0a:	bf00      	nop
    8f0c:	2000229c 	.word	0x2000229c

00008f10 <bt_hci_cmd_create>:
{
    8f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    8f14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8f18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8f1c:	4606      	mov	r6, r0
    8f1e:	4817      	ldr	r0, [pc, #92]	; (8f7c <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    8f20:	4d17      	ldr	r5, [pc, #92]	; (8f80 <bt_hci_cmd_create+0x70>)
{
    8f22:	460f      	mov	r7, r1
    8f24:	f023 fd69 	bl	2c9fa <net_buf_alloc_fixed>
    8f28:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    8f2a:	f100 0a08 	add.w	sl, r0, #8
    8f2e:	2100      	movs	r1, #0
    8f30:	f04f 0800 	mov.w	r8, #0
    8f34:	4650      	mov	r0, sl
    8f36:	f023 fd85 	bl	2ca44 <net_buf_simple_reserve>
    8f3a:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    8f3e:	4620      	mov	r0, r4
    8f40:	f017 fcba 	bl	208b8 <net_buf_id>
    8f44:	f04f 090c 	mov.w	r9, #12
    8f48:	fb09 5000 	mla	r0, r9, r0, r5
    8f4c:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    8f4e:	4620      	mov	r0, r4
    8f50:	f017 fcb2 	bl	208b8 <net_buf_id>
    8f54:	fb09 5000 	mla	r0, r9, r0, r5
    8f58:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    8f5c:	4620      	mov	r0, r4
    8f5e:	f017 fcab 	bl	208b8 <net_buf_id>
    8f62:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    8f66:	2103      	movs	r1, #3
    8f68:	f8c5 8004 	str.w	r8, [r5, #4]
    8f6c:	4650      	mov	r0, sl
    8f6e:	f023 fdac 	bl	2caca <net_buf_simple_add>
	hdr->param_len = param_len;
    8f72:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    8f74:	8006      	strh	r6, [r0, #0]
}
    8f76:	4620      	mov	r0, r4
    8f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8f7c:	20000e68 	.word	0x20000e68
    8f80:	2000229c 	.word	0x2000229c

00008f84 <bt_hci_cmd_send>:
{
    8f84:	b530      	push	{r4, r5, lr}
    8f86:	4605      	mov	r5, r0
    8f88:	b089      	sub	sp, #36	; 0x24
	if (!buf) {
    8f8a:	460c      	mov	r4, r1
    8f8c:	b919      	cbnz	r1, 8f96 <bt_hci_cmd_send+0x12>
		buf = bt_hci_cmd_create(opcode, 0);
    8f8e:	f7ff ffbf 	bl	8f10 <bt_hci_cmd_create>
		if (!buf) {
    8f92:	4604      	mov	r4, r0
    8f94:	b300      	cbz	r0, 8fd8 <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    8f96:	f640 4335 	movw	r3, #3125	; 0xc35
    8f9a:	429d      	cmp	r5, r3
    8f9c:	d116      	bne.n	8fcc <bt_hci_cmd_send+0x48>
		return bt_hci_ecc_send(buf);
    8f9e:	4620      	mov	r0, r4
    8fa0:	f7ff fad4 	bl	854c <bt_hci_ecc_send>
		if (err) {
    8fa4:	4605      	mov	r5, r0
    8fa6:	b170      	cbz	r0, 8fc6 <bt_hci_cmd_send+0x42>
			BT_ERR("Unable to send to driver (err %d)", err);
    8fa8:	4b0d      	ldr	r3, [pc, #52]	; (8fe0 <bt_hci_cmd_send+0x5c>)
    8faa:	aa05      	add	r2, sp, #20
    8fac:	e9cd 3006 	strd	r3, r0, [sp, #24]
    8fb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8fb4:	2303      	movs	r3, #3
    8fb6:	480b      	ldr	r0, [pc, #44]	; (8fe4 <bt_hci_cmd_send+0x60>)
    8fb8:	9301      	str	r3, [sp, #4]
    8fba:	9305      	str	r3, [sp, #20]
    8fbc:	f021 f896 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    8fc0:	4620      	mov	r0, r4
    8fc2:	f017 fd35 	bl	20a30 <net_buf_unref>
}
    8fc6:	4628      	mov	r0, r5
    8fc8:	b009      	add	sp, #36	; 0x24
    8fca:	bd30      	pop	{r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    8fcc:	4806      	ldr	r0, [pc, #24]	; (8fe8 <bt_hci_cmd_send+0x64>)
    8fce:	4621      	mov	r1, r4
    8fd0:	f023 fd3c 	bl	2ca4c <net_buf_put>
	return 0;
    8fd4:	2500      	movs	r5, #0
    8fd6:	e7f6      	b.n	8fc6 <bt_hci_cmd_send+0x42>
			return -ENOBUFS;
    8fd8:	f06f 0568 	mvn.w	r5, #104	; 0x68
    8fdc:	e7f3      	b.n	8fc6 <bt_hci_cmd_send+0x42>
    8fde:	bf00      	nop
    8fe0:	0003215c 	.word	0x0003215c
    8fe4:	0002f4d4 	.word	0x0002f4d4
    8fe8:	2000013c 	.word	0x2000013c

00008fec <le_ltk_request>:
{
    8fec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    8fee:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8ff0:	882f      	ldrh	r7, [r5, #0]
    8ff2:	b2bc      	uxth	r4, r7
{
    8ff4:	b08f      	sub	sp, #60	; 0x3c
	conn = bt_conn_lookup_handle(handle);
    8ff6:	4620      	mov	r0, r4
    8ff8:	f002 fb72 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    8ffc:	4606      	mov	r6, r0
    8ffe:	b968      	cbnz	r0, 901c <le_ltk_request+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9000:	4b2b      	ldr	r3, [pc, #172]	; (90b0 <le_ltk_request+0xc4>)
    9002:	482c      	ldr	r0, [pc, #176]	; (90b4 <le_ltk_request+0xc8>)
    9004:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    9008:	aa0b      	add	r2, sp, #44	; 0x2c
    900a:	2303      	movs	r3, #3
    900c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9010:	9304      	str	r3, [sp, #16]
    9012:	930b      	str	r3, [sp, #44]	; 0x2c
    9014:	f021 f86a 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    9018:	b00f      	add	sp, #60	; 0x3c
    901a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    901c:	ac04      	add	r4, sp, #16
    901e:	f8d5 2002 	ldr.w	r2, [r5, #2]
    9022:	f8d5 3006 	ldr.w	r3, [r5, #6]
    9026:	9401      	str	r4, [sp, #4]
    9028:	8969      	ldrh	r1, [r5, #10]
    902a:	9100      	str	r1, [sp, #0]
    902c:	f023 faac 	bl	2c588 <bt_smp_request_ltk>
    9030:	b368      	cbz	r0, 908e <le_ltk_request+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    9032:	2112      	movs	r1, #18
    9034:	f242 001a 	movw	r0, #8218	; 0x201a
    9038:	f7ff ff6a 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    903c:	4605      	mov	r5, r0
    903e:	b970      	cbnz	r0, 905e <le_ltk_request+0x72>
		BT_ERR("Out of command buffers");
    9040:	4b1d      	ldr	r3, [pc, #116]	; (90b8 <le_ltk_request+0xcc>)
    9042:	930c      	str	r3, [sp, #48]	; 0x30
    9044:	481b      	ldr	r0, [pc, #108]	; (90b4 <le_ltk_request+0xc8>)
    9046:	2302      	movs	r3, #2
    9048:	aa0b      	add	r2, sp, #44	; 0x2c
    904a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    904e:	9303      	str	r3, [sp, #12]
    9050:	930b      	str	r3, [sp, #44]	; 0x2c
    9052:	f021 f84b 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	bt_conn_unref(conn);
    9056:	4630      	mov	r0, r6
    9058:	f021 fbf7 	bl	2a84a <bt_conn_unref>
    905c:	e7dc      	b.n	9018 <le_ltk_request+0x2c>
    905e:	2112      	movs	r1, #18
    9060:	3008      	adds	r0, #8
    9062:	f023 fd32 	bl	2caca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    9066:	4603      	mov	r3, r0
    9068:	4622      	mov	r2, r4
    906a:	f823 7b02 	strh.w	r7, [r3], #2
    906e:	af08      	add	r7, sp, #32
    9070:	4614      	mov	r4, r2
    9072:	cc03      	ldmia	r4!, {r0, r1}
    9074:	42bc      	cmp	r4, r7
    9076:	6018      	str	r0, [r3, #0]
    9078:	6059      	str	r1, [r3, #4]
    907a:	4622      	mov	r2, r4
    907c:	f103 0308 	add.w	r3, r3, #8
    9080:	d1f6      	bne.n	9070 <le_ltk_request+0x84>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    9082:	4629      	mov	r1, r5
    9084:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9088:	f7ff ff7c 	bl	8f84 <bt_hci_cmd_send>
    908c:	e7e3      	b.n	9056 <le_ltk_request+0x6a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    908e:	2102      	movs	r1, #2
    9090:	f242 001b 	movw	r0, #8219	; 0x201b
    9094:	f7ff ff3c 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    9098:	4604      	mov	r4, r0
    909a:	2800      	cmp	r0, #0
    909c:	d0d0      	beq.n	9040 <le_ltk_request+0x54>
    909e:	2102      	movs	r1, #2
    90a0:	3008      	adds	r0, #8
    90a2:	f023 fd12 	bl	2caca <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    90a6:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    90a8:	8007      	strh	r7, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    90aa:	f242 001b 	movw	r0, #8219	; 0x201b
    90ae:	e7eb      	b.n	9088 <le_ltk_request+0x9c>
    90b0:	00031fd1 	.word	0x00031fd1
    90b4:	0002f4d4 	.word	0x0002f4d4
    90b8:	000321f8 	.word	0x000321f8

000090bc <le_conn_param_neg_reply>:
{
    90bc:	b570      	push	{r4, r5, r6, lr}
    90be:	4606      	mov	r6, r0
    90c0:	b088      	sub	sp, #32
    90c2:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    90c4:	f242 0021 	movw	r0, #8225	; 0x2021
    90c8:	2103      	movs	r1, #3
    90ca:	f7ff ff21 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    90ce:	4604      	mov	r4, r0
    90d0:	b960      	cbnz	r0, 90ec <le_conn_param_neg_reply+0x30>
		BT_ERR("Unable to allocate buffer");
    90d2:	4b0d      	ldr	r3, [pc, #52]	; (9108 <le_conn_param_neg_reply+0x4c>)
    90d4:	9306      	str	r3, [sp, #24]
    90d6:	480d      	ldr	r0, [pc, #52]	; (910c <le_conn_param_neg_reply+0x50>)
    90d8:	2302      	movs	r3, #2
    90da:	aa05      	add	r2, sp, #20
    90dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    90e0:	9301      	str	r3, [sp, #4]
    90e2:	9305      	str	r3, [sp, #20]
    90e4:	f021 f802 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    90e8:	b008      	add	sp, #32
    90ea:	bd70      	pop	{r4, r5, r6, pc}
    90ec:	2103      	movs	r1, #3
    90ee:	3008      	adds	r0, #8
    90f0:	f023 fceb 	bl	2caca <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    90f4:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
    90f6:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    90f8:	7085      	strb	r5, [r0, #2]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    90fa:	f242 0021 	movw	r0, #8225	; 0x2021
}
    90fe:	b008      	add	sp, #32
    9100:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9104:	f7ff bf3e 	b.w	8f84 <bt_hci_cmd_send>
    9108:	0003220f 	.word	0x0003220f
    910c:	0002f4d4 	.word	0x0002f4d4

00009110 <le_conn_param_req>:
{
    9110:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    9112:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9114:	78d9      	ldrb	r1, [r3, #3]
    9116:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9118:	881f      	ldrh	r7, [r3, #0]
{
    911a:	b08b      	sub	sp, #44	; 0x2c
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    911c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9120:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    9124:	7959      	ldrb	r1, [r3, #5]
    9126:	791a      	ldrb	r2, [r3, #4]
    9128:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    912c:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(evt->latency);
    9130:	799a      	ldrb	r2, [r3, #6]
    9132:	79d9      	ldrb	r1, [r3, #7]
    9134:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9138:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    913c:	7a1a      	ldrb	r2, [r3, #8]
    913e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    9140:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9142:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    9146:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9148:	f8ad 300e 	strh.w	r3, [sp, #14]
	conn = bt_conn_lookup_handle(handle);
    914c:	f002 fac8 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    9150:	4606      	mov	r6, r0
    9152:	b988      	cbnz	r0, 9178 <le_conn_param_req+0x68>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9154:	4b20      	ldr	r3, [pc, #128]	; (91d8 <le_conn_param_req+0xc8>)
    9156:	4821      	ldr	r0, [pc, #132]	; (91dc <le_conn_param_req+0xcc>)
    9158:	e9cd 3408 	strd	r3, r4, [sp, #32]
    915c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9160:	2303      	movs	r3, #3
    9162:	aa07      	add	r2, sp, #28
    9164:	9301      	str	r3, [sp, #4]
    9166:	9307      	str	r3, [sp, #28]
    9168:	f020 ffc0 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    916c:	2102      	movs	r1, #2
    916e:	4620      	mov	r0, r4
    9170:	f7ff ffa4 	bl	90bc <le_conn_param_neg_reply>
}
    9174:	b00b      	add	sp, #44	; 0x2c
    9176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    9178:	a902      	add	r1, sp, #8
    917a:	f002 fc3f 	bl	b9fc <le_param_req>
    917e:	b938      	cbnz	r0, 9190 <le_conn_param_req+0x80>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    9180:	211e      	movs	r1, #30
    9182:	4620      	mov	r0, r4
    9184:	f7ff ff9a 	bl	90bc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    9188:	4630      	mov	r0, r6
    918a:	f021 fb5e 	bl	2a84a <bt_conn_unref>
    918e:	e7f1      	b.n	9174 <le_conn_param_req+0x64>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    9190:	210e      	movs	r1, #14
    9192:	f242 0020 	movw	r0, #8224	; 0x2020
    9196:	f7ff febb 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    919a:	4605      	mov	r5, r0
    919c:	2800      	cmp	r0, #0
    919e:	d0f3      	beq.n	9188 <le_conn_param_req+0x78>
    91a0:	210e      	movs	r1, #14
    91a2:	3008      	adds	r0, #8
    91a4:	f023 fc91 	bl	2caca <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    91a8:	220e      	movs	r2, #14
    91aa:	4604      	mov	r4, r0
    91ac:	2100      	movs	r1, #0
    91ae:	f025 f9fb 	bl	2e5a8 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    91b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    91b6:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    91b8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    91bc:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    91be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    91c2:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    91c4:	f8bd 300e 	ldrh.w	r3, [sp, #14]
	cp->handle = sys_cpu_to_le16(handle);
    91c8:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    91ca:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    91cc:	4629      	mov	r1, r5
    91ce:	f242 0020 	movw	r0, #8224	; 0x2020
    91d2:	f7ff fed7 	bl	8f84 <bt_hci_cmd_send>
    91d6:	e7d7      	b.n	9188 <le_conn_param_req+0x78>
    91d8:	00031fd1 	.word	0x00031fd1
    91dc:	0002f4d4 	.word	0x0002f4d4

000091e0 <bt_hci_cmd_send_sync>:
{
    91e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    91e4:	b089      	sub	sp, #36	; 0x24
    91e6:	4680      	mov	r8, r0
    91e8:	af00      	add	r7, sp, #0
    91ea:	4615      	mov	r5, r2
	if (!buf) {
    91ec:	460c      	mov	r4, r1
    91ee:	b921      	cbnz	r1, 91fa <bt_hci_cmd_send_sync+0x1a>
		buf = bt_hci_cmd_create(opcode, 0);
    91f0:	f7ff fe8e 	bl	8f10 <bt_hci_cmd_create>
		if (!buf) {
    91f4:	4604      	mov	r4, r0
    91f6:	2800      	cmp	r0, #0
    91f8:	d05e      	beq.n	92b8 <bt_hci_cmd_send_sync+0xd8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    91fa:	f107 0608 	add.w	r6, r7, #8
    91fe:	2201      	movs	r2, #1
    9200:	2100      	movs	r1, #0
    9202:	4630      	mov	r0, r6
    9204:	f024 fdab 	bl	2dd5e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    9208:	4620      	mov	r0, r4
    920a:	f017 fb55 	bl	208b8 <net_buf_id>
    920e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 92c0 <bt_hci_cmd_send_sync+0xe0>
    9212:	230c      	movs	r3, #12
    9214:	fb03 9000 	mla	r0, r3, r0, r9
    9218:	6086      	str	r6, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    921a:	4620      	mov	r0, r4
    921c:	f023 fc23 	bl	2ca66 <net_buf_ref>
    9220:	4601      	mov	r1, r0
    9222:	4828      	ldr	r0, [pc, #160]	; (92c4 <bt_hci_cmd_send_sync+0xe4>)
    9224:	f023 fc12 	bl	2ca4c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    9228:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    922c:	4630      	mov	r0, r6
    922e:	2300      	movs	r3, #0
    9230:	f01b fd6c 	bl	24d0c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    9234:	4606      	mov	r6, r0
    9236:	b180      	cbz	r0, 925a <bt_hci_cmd_send_sync+0x7a>
    9238:	4a23      	ldr	r2, [pc, #140]	; (92c8 <bt_hci_cmd_send_sync+0xe8>)
    923a:	4924      	ldr	r1, [pc, #144]	; (92cc <bt_hci_cmd_send_sync+0xec>)
    923c:	4824      	ldr	r0, [pc, #144]	; (92d0 <bt_hci_cmd_send_sync+0xf0>)
    923e:	f240 1331 	movw	r3, #305	; 0x131
    9242:	f01e feb1 	bl	27fa8 <printk>
    9246:	4823      	ldr	r0, [pc, #140]	; (92d4 <bt_hci_cmd_send_sync+0xf4>)
    9248:	4631      	mov	r1, r6
    924a:	f01e fead 	bl	27fa8 <printk>
    924e:	4040      	eors	r0, r0
    9250:	f380 8811 	msr	BASEPRI, r0
    9254:	f04f 0003 	mov.w	r0, #3
    9258:	df02      	svc	2
	status = cmd(buf)->status;
    925a:	4620      	mov	r0, r4
    925c:	f017 fb2c 	bl	208b8 <net_buf_id>
    9260:	230c      	movs	r3, #12
    9262:	4358      	muls	r0, r3
    9264:	f819 6000 	ldrb.w	r6, [r9, r0]
	if (status) {
    9268:	b1ee      	cbz	r6, 92a6 <bt_hci_cmd_send_sync+0xc6>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    926a:	4b1b      	ldr	r3, [pc, #108]	; (92d8 <bt_hci_cmd_send_sync+0xf8>)
    926c:	481b      	ldr	r0, [pc, #108]	; (92dc <bt_hci_cmd_send_sync+0xfc>)
    926e:	466d      	mov	r5, sp
    9270:	b088      	sub	sp, #32
    9272:	466a      	mov	r2, sp
    9274:	e9c2 3804 	strd	r3, r8, [r2, #16]
    9278:	2304      	movs	r3, #4
    927a:	6196      	str	r6, [r2, #24]
    927c:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    9280:	f842 3f0c 	str.w	r3, [r2, #12]!
    9284:	607b      	str	r3, [r7, #4]
    9286:	f020 ff31 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    928a:	4620      	mov	r0, r4
    928c:	46ad      	mov	sp, r5
    928e:	f017 fbcf 	bl	20a30 <net_buf_unref>
			return -EIO;
    9292:	2e09      	cmp	r6, #9
    9294:	bf0c      	ite	eq
    9296:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    929a:	f06f 0004 	mvnne.w	r0, #4
}
    929e:	3724      	adds	r7, #36	; 0x24
    92a0:	46bd      	mov	sp, r7
    92a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (rsp) {
    92a6:	b115      	cbz	r5, 92ae <bt_hci_cmd_send_sync+0xce>
		*rsp = buf;
    92a8:	602c      	str	r4, [r5, #0]
	return 0;
    92aa:	4630      	mov	r0, r6
    92ac:	e7f7      	b.n	929e <bt_hci_cmd_send_sync+0xbe>
		net_buf_unref(buf);
    92ae:	4620      	mov	r0, r4
    92b0:	f017 fbbe 	bl	20a30 <net_buf_unref>
	return 0;
    92b4:	4628      	mov	r0, r5
    92b6:	e7f2      	b.n	929e <bt_hci_cmd_send_sync+0xbe>
			return -ENOBUFS;
    92b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    92bc:	e7ef      	b.n	929e <bt_hci_cmd_send_sync+0xbe>
    92be:	bf00      	nop
    92c0:	2000229c 	.word	0x2000229c
    92c4:	2000013c 	.word	0x2000013c
    92c8:	000320e7 	.word	0x000320e7
    92cc:	0003211b 	.word	0x0003211b
    92d0:	00032124 	.word	0x00032124
    92d4:	00032229 	.word	0x00032229
    92d8:	00032249 	.word	0x00032249
    92dc:	0002f4d4 	.word	0x0002f4d4

000092e0 <hci_le_read_max_data_len>:
{
    92e0:	b570      	push	{r4, r5, r6, lr}
    92e2:	b088      	sub	sp, #32
    92e4:	4606      	mov	r6, r0
    92e6:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    92e8:	466a      	mov	r2, sp
    92ea:	2100      	movs	r1, #0
    92ec:	f242 002f 	movw	r0, #8239	; 0x202f
    92f0:	f7ff ff76 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    92f4:	4604      	mov	r4, r0
    92f6:	b168      	cbz	r0, 9314 <hci_le_read_max_data_len+0x34>
		BT_ERR("Failed to read DLE max data len");
    92f8:	4b0c      	ldr	r3, [pc, #48]	; (932c <hci_le_read_max_data_len+0x4c>)
    92fa:	9306      	str	r3, [sp, #24]
    92fc:	480c      	ldr	r0, [pc, #48]	; (9330 <hci_le_read_max_data_len+0x50>)
    92fe:	2302      	movs	r3, #2
    9300:	aa05      	add	r2, sp, #20
    9302:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9306:	9301      	str	r3, [sp, #4]
    9308:	9305      	str	r3, [sp, #20]
    930a:	f020 feef 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    930e:	4620      	mov	r0, r4
    9310:	b008      	add	sp, #32
    9312:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9314:	9800      	ldr	r0, [sp, #0]
    9316:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    9318:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    931c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    931e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    9322:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    9324:	f017 fb84 	bl	20a30 <net_buf_unref>
	return 0;
    9328:	e7f1      	b.n	930e <hci_le_read_max_data_len+0x2e>
    932a:	bf00      	nop
    932c:	00032265 	.word	0x00032265
    9330:	0002f4d4 	.word	0x0002f4d4

00009334 <bt_le_create_conn_legacy>:
{
    9334:	b5f0      	push	{r4, r5, r6, r7, lr}
    9336:	b087      	sub	sp, #28
    9338:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
    933a:	f10d 010b 	add.w	r1, sp, #11
    933e:	2000      	movs	r0, #0
    9340:	f001 f884 	bl	a44c <bt_id_set_create_conn_own_addr>
	if (err) {
    9344:	4605      	mov	r5, r0
    9346:	2800      	cmp	r0, #0
    9348:	d145      	bne.n	93d6 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    934a:	2119      	movs	r1, #25
    934c:	f242 000d 	movw	r0, #8205	; 0x200d
    9350:	f7ff fdde 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    9354:	4607      	mov	r7, r0
    9356:	2800      	cmp	r0, #0
    9358:	d043      	beq.n	93e2 <bt_le_create_conn_legacy+0xae>
    935a:	2119      	movs	r1, #25
    935c:	3008      	adds	r0, #8
    935e:	f023 fbb4 	bl	2caca <net_buf_simple_add>
    9362:	2219      	movs	r2, #25
    9364:	4604      	mov	r4, r0
    9366:	4629      	mov	r1, r5
    9368:	f025 f91e 	bl	2e5a8 <memset>
	cp->own_addr_type = own_addr_type;
    936c:	f89d 300b 	ldrb.w	r3, [sp, #11]
		if (!bt_dev.le.rl_size ||
    9370:	4a1d      	ldr	r2, [pc, #116]	; (93e8 <bt_le_create_conn_legacy+0xb4>)
	cp->own_addr_type = own_addr_type;
    9372:	7323      	strb	r3, [r4, #12]
		if (!bt_dev.le.rl_size ||
    9374:	f892 3118 	ldrb.w	r3, [r2, #280]	; 0x118
    9378:	b383      	cbz	r3, 93dc <bt_le_create_conn_legacy+0xa8>
    937a:	f892 1119 	ldrb.w	r1, [r2, #281]	; 0x119
    937e:	4299      	cmp	r1, r3
    9380:	d82c      	bhi.n	93dc <bt_le_create_conn_legacy+0xa8>
		const bt_addr_le_t *peer_addr = &conn->le.dst;
    9382:	f106 0188 	add.w	r1, r6, #136	; 0x88
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    9386:	2500      	movs	r5, #0
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
    9388:	1d60      	adds	r0, r4, #5
    938a:	f020 fea3 	bl	2a0d4 <bt_addr_le_copy>
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
    938e:	7125      	strb	r5, [r4, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
    9390:	8993      	ldrh	r3, [r2, #12]
    9392:	8023      	strh	r3, [r4, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
    9394:	89d3      	ldrh	r3, [r2, #14]
    9396:	8063      	strh	r3, [r4, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    9398:	f8b6 30a0 	ldrh.w	r3, [r6, #160]	; 0xa0
    939c:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    93a0:	f8b6 30a2 	ldrh.w	r3, [r6, #162]	; 0xa2
    93a4:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    93a8:	f8b6 30a4 	ldrh.w	r3, [r6, #164]	; 0xa4
    93ac:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    93b0:	f8b6 30a6 	ldrh.w	r3, [r6, #166]	; 0xa6
    93b4:	f8a4 3013 	strh.w	r3, [r4, #19]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    93b8:	2301      	movs	r3, #1
    93ba:	4a0c      	ldr	r2, [pc, #48]	; (93ec <bt_le_create_conn_legacy+0xb8>)
    93bc:	9300      	str	r3, [sp, #0]
    93be:	a903      	add	r1, sp, #12
    93c0:	230b      	movs	r3, #11
    93c2:	4638      	mov	r0, r7
    93c4:	f7ff fd92 	bl	8eec <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    93c8:	462a      	mov	r2, r5
    93ca:	4639      	mov	r1, r7
    93cc:	f242 000d 	movw	r0, #8205	; 0x200d
    93d0:	f7ff ff06 	bl	91e0 <bt_hci_cmd_send_sync>
    93d4:	4605      	mov	r5, r0
}
    93d6:	4628      	mov	r0, r5
    93d8:	b007      	add	sp, #28
    93da:	bdf0      	pop	{r4, r5, r6, r7, pc}
			peer_addr = &conn->le.resp_addr;
    93dc:	f106 0196 	add.w	r1, r6, #150	; 0x96
    93e0:	e7d1      	b.n	9386 <bt_le_create_conn_legacy+0x52>
		return -ENOBUFS;
    93e2:	f06f 0568 	mvn.w	r5, #104	; 0x68
    93e6:	e7f6      	b.n	93d6 <bt_le_create_conn_legacy+0xa2>
    93e8:	20000000 	.word	0x20000000
    93ec:	200000cc 	.word	0x200000cc

000093f0 <bt_le_create_conn_cancel>:
{
    93f0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    93f2:	2100      	movs	r1, #0
{
    93f4:	b087      	sub	sp, #28
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    93f6:	f242 000e 	movw	r0, #8206	; 0x200e
    93fa:	f7ff fd89 	bl	8f10 <bt_hci_cmd_create>
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    93fe:	2500      	movs	r5, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
    9400:	4604      	mov	r4, r0
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags,
    9402:	230b      	movs	r3, #11
    9404:	a903      	add	r1, sp, #12
    9406:	4a06      	ldr	r2, [pc, #24]	; (9420 <bt_le_create_conn_cancel+0x30>)
    9408:	9500      	str	r5, [sp, #0]
    940a:	f7ff fd6f 	bl	8eec <bt_hci_cmd_state_set_init>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
    940e:	462a      	mov	r2, r5
    9410:	4621      	mov	r1, r4
    9412:	f242 000e 	movw	r0, #8206	; 0x200e
    9416:	f7ff fee3 	bl	91e0 <bt_hci_cmd_send_sync>
}
    941a:	b007      	add	sp, #28
    941c:	bd30      	pop	{r4, r5, pc}
    941e:	bf00      	nop
    9420:	200000cc 	.word	0x200000cc

00009424 <conn_auto_initiate>:
{
    9424:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9426:	7b43      	ldrb	r3, [r0, #13]
    9428:	2b07      	cmp	r3, #7
{
    942a:	b08a      	sub	sp, #40	; 0x28
    942c:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    942e:	d170      	bne.n	9512 <conn_auto_initiate+0xee>
    9430:	f3bf 8f5b 	dmb	ish
    9434:	6843      	ldr	r3, [r0, #4]
    9436:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    943a:	049b      	lsls	r3, r3, #18
    943c:	f100 0604 	add.w	r6, r0, #4
    9440:	d41b      	bmi.n	947a <conn_auto_initiate+0x56>
    9442:	78c3      	ldrb	r3, [r0, #3]
    9444:	b123      	cbz	r3, 9450 <conn_auto_initiate+0x2c>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
    9446:	4b34      	ldr	r3, [pc, #208]	; (9518 <conn_auto_initiate+0xf4>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
    9448:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    944c:	071d      	lsls	r5, r3, #28
    944e:	d514      	bpl.n	947a <conn_auto_initiate+0x56>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9450:	2102      	movs	r1, #2
    9452:	f242 0016 	movw	r0, #8214	; 0x2016
    9456:	f7ff fd5b 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    945a:	4605      	mov	r5, r0
    945c:	b168      	cbz	r0, 947a <conn_auto_initiate+0x56>
    945e:	2102      	movs	r1, #2
    9460:	3008      	adds	r0, #8
    9462:	f023 fb32 	bl	2caca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9466:	8823      	ldrh	r3, [r4, #0]
    9468:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    946a:	4629      	mov	r1, r5
    946c:	f242 0016 	movw	r0, #8214	; 0x2016
}
    9470:	b00a      	add	sp, #40	; 0x28
    9472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9476:	f7ff bd85 	b.w	8f84 <bt_hci_cmd_send>
    947a:	f3bf 8f5b 	dmb	ish
    947e:	6863      	ldr	r3, [r4, #4]
    9480:	4d25      	ldr	r5, [pc, #148]	; (9518 <conn_auto_initiate+0xf4>)
    9482:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9486:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    948a:	f3c3 3100 	ubfx	r1, r3, #12, #1
    948e:	d11d      	bne.n	94cc <conn_auto_initiate+0xa8>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9490:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
    9494:	07d8      	lsls	r0, r3, #31
    9496:	d519      	bpl.n	94cc <conn_auto_initiate+0xa8>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    9498:	2302      	movs	r3, #2
    949a:	9100      	str	r1, [sp, #0]
    949c:	461a      	mov	r2, r3
    949e:	4620      	mov	r0, r4
    94a0:	f020 fe7f 	bl	2a1a2 <bt_le_set_phy>
		if (!err) {
    94a4:	b930      	cbnz	r0, 94b4 <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    94a6:	2180      	movs	r1, #128	; 0x80
    94a8:	4630      	mov	r0, r6
}
    94aa:	b00a      	add	sp, #40	; 0x28
    94ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    94b0:	f020 be01 	b.w	2a0b6 <atomic_or>
		BT_ERR("Failed to set LE PHY (%d)", err);
    94b4:	4b19      	ldr	r3, [pc, #100]	; (951c <conn_auto_initiate+0xf8>)
    94b6:	aa07      	add	r2, sp, #28
    94b8:	e9cd 3008 	strd	r3, r0, [sp, #32]
    94bc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    94c0:	2303      	movs	r3, #3
    94c2:	4817      	ldr	r0, [pc, #92]	; (9520 <conn_auto_initiate+0xfc>)
    94c4:	9303      	str	r3, [sp, #12]
    94c6:	9307      	str	r3, [sp, #28]
    94c8:	f020 fe10 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    94cc:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
    94d0:	069a      	lsls	r2, r3, #26
    94d2:	d51e      	bpl.n	9512 <conn_auto_initiate+0xee>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    94d4:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    94d8:	689b      	ldr	r3, [r3, #8]
    94da:	079b      	lsls	r3, r3, #30
    94dc:	d519      	bpl.n	9512 <conn_auto_initiate+0xee>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    94de:	f10d 010a 	add.w	r1, sp, #10
    94e2:	a802      	add	r0, sp, #8
    94e4:	f7ff fefc 	bl	92e0 <hci_le_read_max_data_len>
			if (!err) {
    94e8:	b998      	cbnz	r0, 9512 <conn_auto_initiate+0xee>
				err = bt_le_set_data_len(conn,
    94ea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
    94ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    94f2:	4620      	mov	r0, r4
    94f4:	f020 fe38 	bl	2a168 <bt_le_set_data_len>
				if (err) {
    94f8:	b158      	cbz	r0, 9512 <conn_auto_initiate+0xee>
					BT_ERR("Failed to set data len (%d)", err);
    94fa:	4b0a      	ldr	r3, [pc, #40]	; (9524 <conn_auto_initiate+0x100>)
    94fc:	aa07      	add	r2, sp, #28
    94fe:	e9cd 3008 	strd	r3, r0, [sp, #32]
    9502:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9506:	2303      	movs	r3, #3
    9508:	4805      	ldr	r0, [pc, #20]	; (9520 <conn_auto_initiate+0xfc>)
    950a:	9303      	str	r3, [sp, #12]
    950c:	9307      	str	r3, [sp, #28]
    950e:	f020 fded 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    9512:	b00a      	add	sp, #40	; 0x28
    9514:	bd70      	pop	{r4, r5, r6, pc}
    9516:	bf00      	nop
    9518:	20000000 	.word	0x20000000
    951c:	00032285 	.word	0x00032285
    9520:	0002f4d4 	.word	0x0002f4d4
    9524:	0003229f 	.word	0x0003229f

00009528 <le_phy_update_complete>:
{
    9528:	b530      	push	{r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    952a:	6883      	ldr	r3, [r0, #8]
    952c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
{
    9530:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    9532:	4628      	mov	r0, r5
    9534:	f002 f8d4 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    9538:	4604      	mov	r4, r0
    953a:	b968      	cbnz	r0, 9558 <le_phy_update_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    953c:	4b11      	ldr	r3, [pc, #68]	; (9584 <le_phy_update_complete+0x5c>)
    953e:	4812      	ldr	r0, [pc, #72]	; (9588 <le_phy_update_complete+0x60>)
    9540:	e9cd 3506 	strd	r3, r5, [sp, #24]
    9544:	aa05      	add	r2, sp, #20
    9546:	2303      	movs	r3, #3
    9548:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    954c:	9301      	str	r3, [sp, #4]
    954e:	9305      	str	r3, [sp, #20]
    9550:	f020 fdcc 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    9554:	b009      	add	sp, #36	; 0x24
    9556:	bd30      	pop	{r4, r5, pc}
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9558:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    955a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    955e:	4628      	mov	r0, r5
    9560:	f020 fd9a 	bl	2a098 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9564:	0603      	lsls	r3, r0, #24
    9566:	d507      	bpl.n	9578 <le_phy_update_complete+0x50>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9568:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    956c:	4628      	mov	r0, r5
    956e:	f020 fda2 	bl	2a0b6 <atomic_or>
		conn_auto_initiate(conn);
    9572:	4620      	mov	r0, r4
    9574:	f7ff ff56 	bl	9424 <conn_auto_initiate>
	bt_conn_unref(conn);
    9578:	4620      	mov	r0, r4
}
    957a:	b009      	add	sp, #36	; 0x24
    957c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_conn_unref(conn);
    9580:	f021 b963 	b.w	2a84a <bt_conn_unref>
    9584:	00031fd1 	.word	0x00031fd1
    9588:	0002f4d4 	.word	0x0002f4d4

0000958c <le_remote_feat_complete>:
{
    958c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    958e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9590:	f8b5 6001 	ldrh.w	r6, [r5, #1]
{
    9594:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    9596:	4630      	mov	r0, r6
    9598:	f002 f8a2 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    959c:	4604      	mov	r4, r0
    959e:	b968      	cbnz	r0, 95bc <le_remote_feat_complete+0x30>
		BT_ERR("Unable to lookup conn for handle %u", handle);
    95a0:	4b12      	ldr	r3, [pc, #72]	; (95ec <le_remote_feat_complete+0x60>)
    95a2:	4813      	ldr	r0, [pc, #76]	; (95f0 <le_remote_feat_complete+0x64>)
    95a4:	e9cd 3606 	strd	r3, r6, [sp, #24]
    95a8:	aa05      	add	r2, sp, #20
    95aa:	2303      	movs	r3, #3
    95ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    95b0:	9301      	str	r3, [sp, #4]
    95b2:	9305      	str	r3, [sp, #20]
    95b4:	f020 fd9a 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    95b8:	b008      	add	sp, #32
    95ba:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    95bc:	782b      	ldrb	r3, [r5, #0]
    95be:	b93b      	cbnz	r3, 95d0 <le_remote_feat_complete+0x44>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    95c0:	f8d5 3003 	ldr.w	r3, [r5, #3]
    95c4:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
    95c8:	f8d5 3007 	ldr.w	r3, [r5, #7]
    95cc:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
    95d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    95d4:	1d20      	adds	r0, r4, #4
    95d6:	f020 fd6e 	bl	2a0b6 <atomic_or>
	conn_auto_initiate(conn);
    95da:	4620      	mov	r0, r4
    95dc:	f7ff ff22 	bl	9424 <conn_auto_initiate>
	bt_conn_unref(conn);
    95e0:	4620      	mov	r0, r4
}
    95e2:	b008      	add	sp, #32
    95e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    95e8:	f021 b92f 	b.w	2a84a <bt_conn_unref>
    95ec:	00031fd1 	.word	0x00031fd1
    95f0:	0002f4d4 	.word	0x0002f4d4

000095f4 <bt_hci_le_enh_conn_complete>:
{
    95f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    95f8:	f8b0 7001 	ldrh.w	r7, [r0, #1]
		if (disconnected_handles[i] == handle) {
    95fc:	4a97      	ldr	r2, [pc, #604]	; (985c <bt_hci_le_enh_conn_complete+0x268>)
	handle |= ~BT_ACL_HANDLE_MASK;
    95fe:	ea6f 5307 	mvn.w	r3, r7, lsl #20
		if (disconnected_handles[i] == handle) {
    9602:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    9604:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    9608:	b29b      	uxth	r3, r3
    960a:	4299      	cmp	r1, r3
{
    960c:	4605      	mov	r5, r0
    960e:	f04f 0600 	mov.w	r6, #0
			disconnected_handles[i] = 0;
    9612:	bf08      	it	eq
    9614:	8016      	strheq	r6, [r2, #0]
{
    9616:	b08c      	sub	sp, #48	; 0x30
			return true;
    9618:	bf08      	it	eq
    961a:	2601      	moveq	r6, #1
	bt_id_pending_keys_update();
    961c:	f000 fcf8 	bl	a010 <bt_id_pending_keys_update>
	if (evt->status) {
    9620:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9622:	fa1f f887 	uxth.w	r8, r7
	if (evt->status) {
    9626:	2c00      	cmp	r4, #0
    9628:	d059      	beq.n	96de <bt_hci_le_enh_conn_complete+0xea>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    962a:	2c3c      	cmp	r4, #60	; 0x3c
    962c:	d121      	bne.n	9672 <bt_hci_le_enh_conn_complete+0x7e>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    962e:	f001 f8e5 	bl	a7fc <bt_le_adv_lookup_legacy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9632:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9636:	3010      	adds	r0, #16
    9638:	f020 fd2e 	bl	2a098 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    963c:	2000      	movs	r0, #0
    963e:	f7ff f8c5 	bl	87cc <find_pending_connect.part.0>
		if (!conn) {
    9642:	4605      	mov	r5, r0
    9644:	b958      	cbnz	r0, 965e <bt_hci_le_enh_conn_complete+0x6a>
			BT_ERR("No pending peripheral connection");
    9646:	4b86      	ldr	r3, [pc, #536]	; (9860 <bt_hci_le_enh_conn_complete+0x26c>)
    9648:	930a      	str	r3, [sp, #40]	; 0x28
    964a:	2302      	movs	r3, #2
    964c:	9304      	str	r3, [sp, #16]
    964e:	9309      	str	r3, [sp, #36]	; 0x24
    9650:	aa09      	add	r2, sp, #36	; 0x24
    9652:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Unexpected status 0x%02x", evt->status);
    9656:	4883      	ldr	r0, [pc, #524]	; (9864 <bt_hci_le_enh_conn_complete+0x270>)
    9658:	f020 fd48 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		return;
    965c:	e01f      	b.n	969e <bt_hci_le_enh_conn_complete+0xaa>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    965e:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9660:	2100      	movs	r1, #0
    9662:	f002 f845 	bl	b6f0 <bt_conn_set_state>
		bt_conn_unref(conn);
    9666:	4628      	mov	r0, r5
}
    9668:	b00c      	add	sp, #48	; 0x30
    966a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		bt_conn_unref(conn);
    966e:	f021 b8ec 	b.w	2a84a <bt_conn_unref>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9672:	2c02      	cmp	r4, #2
    9674:	d129      	bne.n	96ca <bt_hci_le_enh_conn_complete+0xd6>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9676:	2100      	movs	r1, #0
    9678:	2206      	movs	r2, #6
    967a:	4608      	mov	r0, r1
    967c:	f002 fab2 	bl	bbe4 <bt_conn_lookup_state_le>
	if (!conn) {
    9680:	4605      	mov	r5, r0
    9682:	b978      	cbnz	r0, 96a4 <bt_hci_le_enh_conn_complete+0xb0>
		BT_ERR("No pending central connection");
    9684:	4b78      	ldr	r3, [pc, #480]	; (9868 <bt_hci_le_enh_conn_complete+0x274>)
    9686:	4877      	ldr	r0, [pc, #476]	; (9864 <bt_hci_le_enh_conn_complete+0x270>)
    9688:	930a      	str	r3, [sp, #40]	; 0x28
    968a:	aa09      	add	r2, sp, #36	; 0x24
    968c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9690:	9404      	str	r4, [sp, #16]
    9692:	9409      	str	r4, [sp, #36]	; 0x24
    9694:	f020 fd2a 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
			bt_le_scan_update(false);
    9698:	2000      	movs	r0, #0
    969a:	f001 fb57 	bl	ad4c <bt_le_scan_update>
}
    969e:	b00c      	add	sp, #48	; 0x30
    96a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
    96a4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    96a6:	2100      	movs	r1, #0
    96a8:	f002 f822 	bl	b6f0 <bt_conn_set_state>
    96ac:	f3bf 8f5b 	dmb	ish
    96b0:	686b      	ldr	r3, [r5, #4]
    96b2:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    96b6:	07da      	lsls	r2, r3, #31
    96b8:	d503      	bpl.n	96c2 <bt_hci_le_enh_conn_complete+0xce>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    96ba:	4621      	mov	r1, r4
    96bc:	4628      	mov	r0, r5
    96be:	f002 f817 	bl	b6f0 <bt_conn_set_state>
	bt_conn_unref(conn);
    96c2:	4628      	mov	r0, r5
    96c4:	f021 f8c1 	bl	2a84a <bt_conn_unref>
    96c8:	e7e6      	b.n	9698 <bt_hci_le_enh_conn_complete+0xa4>
		BT_WARN("Unexpected status 0x%02x", evt->status);
    96ca:	4b68      	ldr	r3, [pc, #416]	; (986c <bt_hci_le_enh_conn_complete+0x278>)
    96cc:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
    96d0:	2303      	movs	r3, #3
    96d2:	9304      	str	r3, [sp, #16]
    96d4:	9309      	str	r3, [sp, #36]	; 0x24
    96d6:	aa09      	add	r2, sp, #36	; 0x24
    96d8:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    96dc:	e7bb      	b.n	9656 <bt_hci_le_enh_conn_complete+0x62>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    96de:	792b      	ldrb	r3, [r5, #4]
    96e0:	3b02      	subs	r3, #2
    96e2:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    96e4:	f105 0904 	add.w	r9, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    96e8:	d841      	bhi.n	976e <bt_hci_le_enh_conn_complete+0x17a>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    96ea:	4649      	mov	r1, r9
    96ec:	a806      	add	r0, sp, #24
    96ee:	f020 fcf1 	bl	2a0d4 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    96f2:	f89d 3018 	ldrb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    96f6:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    96fa:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    96fc:	f10d 0011 	add.w	r0, sp, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9700:	f88d 3018 	strb.w	r3, [sp, #24]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9704:	f020 fced 	bl	2a0e2 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9708:	2301      	movs	r3, #1
    970a:	f88d 3010 	strb.w	r3, [sp, #16]
	conn = find_pending_connect(evt->role, &id_addr);
    970e:	78e8      	ldrb	r0, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
    9710:	2800      	cmp	r0, #0
    9712:	d13f      	bne.n	9794 <bt_hci_le_enh_conn_complete+0x1a0>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
    9714:	2206      	movs	r2, #6
    9716:	a906      	add	r1, sp, #24
    9718:	f002 fa64 	bl	bbe4 <bt_conn_lookup_state_le>
    971c:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    971e:	78eb      	ldrb	r3, [r5, #3]
    9720:	2b01      	cmp	r3, #1
    9722:	d10a      	bne.n	973a <bt_hci_le_enh_conn_complete+0x146>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    9724:	f001 f86a 	bl	a7fc <bt_le_adv_lookup_legacy>
    9728:	f06f 0140 	mvn.w	r1, #64	; 0x40
    972c:	4682      	mov	sl, r0
    972e:	3010      	adds	r0, #16
    9730:	f020 fcb2 	bl	2a098 <atomic_and>
		(void)bt_le_lim_adv_cancel_timeout(adv);
    9734:	4650      	mov	r0, sl
    9736:	f020 ffc8 	bl	2a6ca <bt_le_lim_adv_cancel_timeout>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    973a:	78eb      	ldrb	r3, [r5, #3]
    973c:	b923      	cbnz	r3, 9748 <bt_hci_le_enh_conn_complete+0x154>
    973e:	484c      	ldr	r0, [pc, #304]	; (9870 <bt_hci_le_enh_conn_complete+0x27c>)
    9740:	f46f 6100 	mvn.w	r1, #2048	; 0x800
    9744:	f020 fca8 	bl	2a098 <atomic_and>
	if (!conn) {
    9748:	bb64      	cbnz	r4, 97a4 <bt_hci_le_enh_conn_complete+0x1b0>
		BT_ERR("No pending conn for peer %s",
    974a:	4648      	mov	r0, r9
    974c:	f7fe fd84 	bl	8258 <bt_addr_le_str_real>
    9750:	4b48      	ldr	r3, [pc, #288]	; (9874 <bt_hci_le_enh_conn_complete+0x280>)
    9752:	9002      	str	r0, [sp, #8]
    9754:	e9cd 4300 	strd	r4, r3, [sp]
    9758:	4620      	mov	r0, r4
    975a:	4942      	ldr	r1, [pc, #264]	; (9864 <bt_hci_le_enh_conn_complete+0x270>)
    975c:	4623      	mov	r3, r4
    975e:	2201      	movs	r2, #1
    9760:	f020 fcc7 	bl	2a0f2 <z_log_msg2_runtime_create.constprop.0>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    9764:	211f      	movs	r1, #31
    9766:	4640      	mov	r0, r8
    9768:	f020 fce3 	bl	2a132 <bt_hci_disconnect>
		return;
    976c:	e797      	b.n	969e <bt_hci_le_enh_conn_complete+0xaa>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
    976e:	78eb      	ldrb	r3, [r5, #3]
    9770:	2b01      	cmp	r3, #1
    9772:	bf04      	itt	eq
    9774:	4b40      	ldreq	r3, [pc, #256]	; (9878 <bt_hci_le_enh_conn_complete+0x284>)
    9776:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
    977a:	4649      	mov	r1, r9
    977c:	4620      	mov	r0, r4
    977e:	f020 fe6f 	bl	2a460 <bt_lookup_id_addr>
    9782:	4601      	mov	r1, r0
    9784:	a806      	add	r0, sp, #24
    9786:	f020 fca5 	bl	2a0d4 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    978a:	4649      	mov	r1, r9
    978c:	a804      	add	r0, sp, #16
    978e:	f020 fca1 	bl	2a0d4 <bt_addr_le_copy>
    9792:	e7bc      	b.n	970e <bt_hci_le_enh_conn_complete+0x11a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_PERIPHERAL) {
    9794:	2801      	cmp	r0, #1
    9796:	d103      	bne.n	97a0 <bt_hci_le_enh_conn_complete+0x1ac>
    9798:	a806      	add	r0, sp, #24
    979a:	f7ff f817 	bl	87cc <find_pending_connect.part.0>
    979e:	e7bd      	b.n	971c <bt_hci_le_enh_conn_complete+0x128>
	return NULL;
    97a0:	2400      	movs	r4, #0
    97a2:	e7bc      	b.n	971e <bt_hci_le_enh_conn_complete+0x12a>
	conn->handle = handle;
    97a4:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    97a6:	a906      	add	r1, sp, #24
	conn->handle = handle;
    97a8:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    97ac:	f020 fc92 	bl	2a0d4 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    97b0:	7e2a      	ldrb	r2, [r5, #24]
    97b2:	7deb      	ldrb	r3, [r5, #23]
    97b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    97b8:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    97bc:	7eaa      	ldrb	r2, [r5, #26]
    97be:	7e6b      	ldrb	r3, [r5, #25]
    97c0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    97c4:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    97c8:	7f2a      	ldrb	r2, [r5, #28]
    97ca:	7eeb      	ldrb	r3, [r5, #27]
    97cc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    97d0:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
    97d4:	78eb      	ldrb	r3, [r5, #3]
    97d6:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
    97d8:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    97da:	2b01      	cmp	r3, #1
	conn->err = 0U;
    97dc:	7322      	strb	r2, [r4, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    97de:	d115      	bne.n	980c <bt_hci_le_enh_conn_complete+0x218>
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    97e0:	a904      	add	r1, sp, #16
    97e2:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    97e6:	f020 fc75 	bl	2a0d4 <bt_addr_le_copy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    97ea:	f001 f807 	bl	a7fc <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    97ee:	7a21      	ldrb	r1, [r4, #8]
    97f0:	4a21      	ldr	r2, [pc, #132]	; (9878 <bt_hci_le_enh_conn_complete+0x284>)
    97f2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    97f6:	4411      	add	r1, r2
    97f8:	f104 0096 	add.w	r0, r4, #150	; 0x96
    97fc:	f020 fc6a 	bl	2a0d4 <bt_addr_le_copy>
		if (BT_LE_STATES_PER_CONN_ADV(bt_dev.le.states)) {
    9800:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
    9804:	065b      	lsls	r3, r3, #25
    9806:	d501      	bpl.n	980c <bt_hci_le_enh_conn_complete+0x218>
			bt_le_adv_resume();
    9808:	f001 f9d4 	bl	abb4 <bt_le_adv_resume>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    980c:	78e3      	ldrb	r3, [r4, #3]
    980e:	b96b      	cbnz	r3, 982c <bt_hci_le_enh_conn_complete+0x238>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
    9810:	a904      	add	r1, sp, #16
    9812:	f104 0096 	add.w	r0, r4, #150	; 0x96
    9816:	f020 fc5d 	bl	2a0d4 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
    981a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
    981c:	4b16      	ldr	r3, [pc, #88]	; (9878 <bt_hci_le_enh_conn_complete+0x284>)
					&bt_dev.id_addr[conn->id]);
    981e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
    9822:	4419      	add	r1, r3
    9824:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    9828:	f020 fc54 	bl	2a0d4 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    982c:	2107      	movs	r1, #7
    982e:	4620      	mov	r0, r4
    9830:	f001 ff5e 	bl	b6f0 <bt_conn_set_state>
	if (is_disconnected) {
    9834:	b11e      	cbz	r6, 983e <bt_hci_le_enh_conn_complete+0x24a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    9836:	2101      	movs	r1, #1
    9838:	4620      	mov	r0, r4
    983a:	f001 ff59 	bl	b6f0 <bt_conn_set_state>
	bt_conn_connected(conn);
    983e:	4620      	mov	r0, r4
    9840:	f021 f83e 	bl	2a8c0 <bt_conn_connected>
	conn_auto_initiate(conn);
    9844:	4620      	mov	r0, r4
    9846:	f7ff fded 	bl	9424 <conn_auto_initiate>
	bt_conn_unref(conn);
    984a:	4620      	mov	r0, r4
    984c:	f020 fffd 	bl	2a84a <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    9850:	78e3      	ldrb	r3, [r4, #3]
    9852:	2b00      	cmp	r3, #0
    9854:	f47f af23 	bne.w	969e <bt_hci_le_enh_conn_complete+0xaa>
    9858:	e71e      	b.n	9698 <bt_hci_le_enh_conn_complete+0xa4>
    985a:	bf00      	nop
    985c:	2000395a 	.word	0x2000395a
    9860:	000322bb 	.word	0x000322bb
    9864:	0002f4d4 	.word	0x0002f4d4
    9868:	000322dc 	.word	0x000322dc
    986c:	000322fa 	.word	0x000322fa
    9870:	200000cc 	.word	0x200000cc
    9874:	00032313 	.word	0x00032313
    9878:	20000000 	.word	0x20000000

0000987c <bt_security_err_get>:
	switch (hci_err) {
    987c:	2829      	cmp	r0, #41	; 0x29
    987e:	bf9a      	itte	ls
    9880:	4b01      	ldrls	r3, [pc, #4]	; (9888 <bt_security_err_get+0xc>)
    9882:	5c18      	ldrbls	r0, [r3, r0]
{
    9884:	2009      	movhi	r0, #9
}
    9886:	4770      	bx	lr
    9888:	0003253d 	.word	0x0003253d

0000988c <hci_encrypt_key_refresh_complete>:
{
    988c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    988e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9890:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    9894:	781d      	ldrb	r5, [r3, #0]
{
    9896:	b088      	sub	sp, #32
	conn = bt_conn_lookup_handle(handle);
    9898:	4630      	mov	r0, r6
    989a:	f001 ff21 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    989e:	4604      	mov	r4, r0
    98a0:	b968      	cbnz	r0, 98be <hci_encrypt_key_refresh_complete+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    98a2:	4b21      	ldr	r3, [pc, #132]	; (9928 <hci_encrypt_key_refresh_complete+0x9c>)
    98a4:	4821      	ldr	r0, [pc, #132]	; (992c <hci_encrypt_key_refresh_complete+0xa0>)
    98a6:	e9cd 3606 	strd	r3, r6, [sp, #24]
    98aa:	aa05      	add	r2, sp, #20
    98ac:	2303      	movs	r3, #3
    98ae:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    98b2:	9301      	str	r3, [sp, #4]
    98b4:	9305      	str	r3, [sp, #20]
    98b6:	f020 fc19 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    98ba:	b008      	add	sp, #32
    98bc:	bd70      	pop	{r4, r5, r6, pc}
	if (status) {
    98be:	b16d      	cbz	r5, 98dc <hci_encrypt_key_refresh_complete+0x50>
		bt_conn_security_changed(conn, status,
    98c0:	4628      	mov	r0, r5
    98c2:	f7ff ffdb 	bl	987c <bt_security_err_get>
    98c6:	4629      	mov	r1, r5
    98c8:	4602      	mov	r2, r0
    98ca:	4620      	mov	r0, r4
    98cc:	f002 f8fe 	bl	bacc <bt_conn_security_changed>
	bt_conn_unref(conn);
    98d0:	4620      	mov	r0, r4
}
    98d2:	b008      	add	sp, #32
    98d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    98d8:	f020 bfb7 	b.w	2a84a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    98dc:	7883      	ldrb	r3, [r0, #2]
    98de:	2b01      	cmp	r3, #1
    98e0:	d107      	bne.n	98f2 <hci_encrypt_key_refresh_complete+0x66>
		bt_smp_update_keys(conn);
    98e2:	f007 f8af 	bl	10a44 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    98e6:	4620      	mov	r0, r4
    98e8:	f020 fbbe 	bl	2a068 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    98ec:	2800      	cmp	r0, #0
    98ee:	bf08      	it	eq
    98f0:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    98f2:	4628      	mov	r0, r5
    98f4:	f7ff ffc2 	bl	987c <bt_security_err_get>
    98f8:	4629      	mov	r1, r5
    98fa:	4602      	mov	r2, r0
    98fc:	4620      	mov	r0, r4
    98fe:	f002 f8e5 	bl	bacc <bt_conn_security_changed>
	if (status) {
    9902:	2d00      	cmp	r5, #0
    9904:	d0e4      	beq.n	98d0 <hci_encrypt_key_refresh_complete+0x44>
		BT_ERR("Failed to set required security level");
    9906:	4b0a      	ldr	r3, [pc, #40]	; (9930 <hci_encrypt_key_refresh_complete+0xa4>)
    9908:	9306      	str	r3, [sp, #24]
    990a:	4808      	ldr	r0, [pc, #32]	; (992c <hci_encrypt_key_refresh_complete+0xa0>)
    990c:	2302      	movs	r3, #2
    990e:	aa05      	add	r2, sp, #20
    9910:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9914:	9301      	str	r3, [sp, #4]
    9916:	9305      	str	r3, [sp, #20]
    9918:	f020 fbe8 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    991c:	4629      	mov	r1, r5
    991e:	4620      	mov	r0, r4
    9920:	f021 f85d 	bl	2a9de <bt_conn_disconnect>
    9924:	e7d4      	b.n	98d0 <hci_encrypt_key_refresh_complete+0x44>
    9926:	bf00      	nop
    9928:	000321d2 	.word	0x000321d2
    992c:	0002f4d4 	.word	0x0002f4d4
    9930:	0003232f 	.word	0x0003232f

00009934 <hci_encrypt_change>:
{
    9934:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    9936:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9938:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    993c:	7835      	ldrb	r5, [r6, #0]
{
    993e:	b089      	sub	sp, #36	; 0x24
	conn = bt_conn_lookup_handle(handle);
    9940:	4638      	mov	r0, r7
    9942:	f001 fecd 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    9946:	4604      	mov	r4, r0
    9948:	b968      	cbnz	r0, 9966 <hci_encrypt_change+0x32>
		BT_ERR("Unable to look up conn with handle %u", handle);
    994a:	4b22      	ldr	r3, [pc, #136]	; (99d4 <hci_encrypt_change+0xa0>)
    994c:	4822      	ldr	r0, [pc, #136]	; (99d8 <hci_encrypt_change+0xa4>)
    994e:	e9cd 3706 	strd	r3, r7, [sp, #24]
    9952:	aa05      	add	r2, sp, #20
    9954:	2303      	movs	r3, #3
    9956:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    995a:	9301      	str	r3, [sp, #4]
    995c:	9305      	str	r3, [sp, #20]
    995e:	f020 fbc5 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
}
    9962:	b009      	add	sp, #36	; 0x24
    9964:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (status) {
    9966:	b16d      	cbz	r5, 9984 <hci_encrypt_change+0x50>
		bt_conn_security_changed(conn, status,
    9968:	4628      	mov	r0, r5
    996a:	f7ff ff87 	bl	987c <bt_security_err_get>
    996e:	4629      	mov	r1, r5
    9970:	4602      	mov	r2, r0
    9972:	4620      	mov	r0, r4
    9974:	f002 f8aa 	bl	bacc <bt_conn_security_changed>
	bt_conn_unref(conn);
    9978:	4620      	mov	r0, r4
}
    997a:	b009      	add	sp, #36	; 0x24
    997c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9980:	f020 bf63 	b.w	2a84a <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9984:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    9986:	78f3      	ldrb	r3, [r6, #3]
    9988:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    998a:	2a01      	cmp	r2, #1
    998c:	d108      	bne.n	99a0 <hci_encrypt_change+0x6c>
		if (conn->encrypt) {
    998e:	b10b      	cbz	r3, 9994 <hci_encrypt_change+0x60>
			bt_smp_update_keys(conn);
    9990:	f007 f858 	bl	10a44 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9994:	4620      	mov	r0, r4
    9996:	f020 fb67 	bl	2a068 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    999a:	2800      	cmp	r0, #0
    999c:	bf08      	it	eq
    999e:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    99a0:	4628      	mov	r0, r5
    99a2:	f7ff ff6b 	bl	987c <bt_security_err_get>
    99a6:	4629      	mov	r1, r5
    99a8:	4602      	mov	r2, r0
    99aa:	4620      	mov	r0, r4
    99ac:	f002 f88e 	bl	bacc <bt_conn_security_changed>
	if (status) {
    99b0:	2d00      	cmp	r5, #0
    99b2:	d0e1      	beq.n	9978 <hci_encrypt_change+0x44>
		BT_ERR("Failed to set required security level");
    99b4:	4b09      	ldr	r3, [pc, #36]	; (99dc <hci_encrypt_change+0xa8>)
    99b6:	9306      	str	r3, [sp, #24]
    99b8:	4807      	ldr	r0, [pc, #28]	; (99d8 <hci_encrypt_change+0xa4>)
    99ba:	2302      	movs	r3, #2
    99bc:	aa05      	add	r2, sp, #20
    99be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    99c2:	9301      	str	r3, [sp, #4]
    99c4:	9305      	str	r3, [sp, #20]
    99c6:	f020 fb91 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		bt_conn_disconnect(conn, status);
    99ca:	4629      	mov	r1, r5
    99cc:	4620      	mov	r0, r4
    99ce:	f021 f806 	bl	2a9de <bt_conn_disconnect>
    99d2:	e7d1      	b.n	9978 <hci_encrypt_change+0x44>
    99d4:	000321d2 	.word	0x000321d2
    99d8:	0002f4d4 	.word	0x0002f4d4
    99dc:	0003232f 	.word	0x0003232f

000099e0 <hci_event_prio>:
{
    99e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99e4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    99e6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    99ea:	4630      	mov	r0, r6
    99ec:	f023 f8b6 	bl	2cb5c <net_buf_simple_headroom>
	state->len = buf->len;
    99f0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    99f4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    99f8:	4605      	mov	r5, r0
    99fa:	d80c      	bhi.n	9a16 <hci_event_prio+0x36>
    99fc:	4a1c      	ldr	r2, [pc, #112]	; (9a70 <hci_event_prio+0x90>)
    99fe:	491d      	ldr	r1, [pc, #116]	; (9a74 <hci_event_prio+0x94>)
    9a00:	481d      	ldr	r0, [pc, #116]	; (9a78 <hci_event_prio+0x98>)
    9a02:	f640 532f 	movw	r3, #3375	; 0xd2f
    9a06:	f01e facf 	bl	27fa8 <printk>
    9a0a:	4040      	eors	r0, r0
    9a0c:	f380 8811 	msr	BASEPRI, r0
    9a10:	f04f 0003 	mov.w	r0, #3
    9a14:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9a16:	4630      	mov	r0, r6
    9a18:	2102      	movs	r1, #2
    9a1a:	f023 f887 	bl	2cb2c <net_buf_simple_pull_mem>
    9a1e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9a20:	7800      	ldrb	r0, [r0, #0]
    9a22:	f020 fb0f 	bl	2a044 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9a26:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    9a28:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    9a2a:	d40c      	bmi.n	9a46 <hci_event_prio+0x66>
    9a2c:	4a10      	ldr	r2, [pc, #64]	; (9a70 <hci_event_prio+0x90>)
    9a2e:	4913      	ldr	r1, [pc, #76]	; (9a7c <hci_event_prio+0x9c>)
    9a30:	4811      	ldr	r0, [pc, #68]	; (9a78 <hci_event_prio+0x98>)
    9a32:	f640 5333 	movw	r3, #3379	; 0xd33
    9a36:	f01e fab7 	bl	27fa8 <printk>
    9a3a:	4040      	eors	r0, r0
    9a3c:	f380 8811 	msr	BASEPRI, r0
    9a40:	f04f 0003 	mov.w	r0, #3
    9a44:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    9a46:	2305      	movs	r3, #5
    9a48:	4a0d      	ldr	r2, [pc, #52]	; (9a80 <hci_event_prio+0xa0>)
    9a4a:	7838      	ldrb	r0, [r7, #0]
    9a4c:	4621      	mov	r1, r4
    9a4e:	f7fe ff9b 	bl	8988 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    9a52:	07b3      	lsls	r3, r6, #30
    9a54:	d507      	bpl.n	9a66 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    9a56:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    9a58:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    9a5c:	fa10 f585 	uxtah	r5, r0, r5
    9a60:	60a5      	str	r5, [r4, #8]
}
    9a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    9a66:	4620      	mov	r0, r4
}
    9a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    9a6c:	f016 bfe0 	b.w	20a30 <net_buf_unref>
    9a70:	000320e7 	.word	0x000320e7
    9a74:	00032355 	.word	0x00032355
    9a78:	00032124 	.word	0x00032124
    9a7c:	0003236e 	.word	0x0003236e
    9a80:	0002fb50 	.word	0x0002fb50

00009a84 <bt_recv>:
{
    9a84:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (bt_recv_thread_id == NULL) {
    9a86:	4d53      	ldr	r5, [pc, #332]	; (9bd4 <bt_recv+0x150>)
{
    9a88:	b089      	sub	sp, #36	; 0x24
	if (bt_recv_thread_id == NULL) {
    9a8a:	682b      	ldr	r3, [r5, #0]
{
    9a8c:	af00      	add	r7, sp, #0
    9a8e:	4604      	mov	r4, r0
	if (bt_recv_thread_id == NULL) {
    9a90:	b913      	cbnz	r3, 9a98 <bt_recv+0x14>
	return z_impl_z_current_get();
    9a92:	f01b fe13 	bl	256bc <z_impl_z_current_get>
		bt_recv_thread_id = k_current_get();
    9a96:	6028      	str	r0, [r5, #0]
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    9a98:	7d23      	ldrb	r3, [r4, #20]
	switch (bt_buf_get_type(buf)) {
    9a9a:	2b01      	cmp	r3, #1
    9a9c:	d058      	beq.n	9b50 <bt_recv+0xcc>
    9a9e:	2b03      	cmp	r3, #3
    9aa0:	f040 8085 	bne.w	9bae <bt_recv+0x12a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9aa4:	89a3      	ldrh	r3, [r4, #12]
    9aa6:	2b03      	cmp	r3, #3
    9aa8:	d80c      	bhi.n	9ac4 <bt_recv+0x40>
    9aaa:	4a4b      	ldr	r2, [pc, #300]	; (9bd8 <bt_recv+0x154>)
    9aac:	494b      	ldr	r1, [pc, #300]	; (9bdc <bt_recv+0x158>)
    9aae:	484c      	ldr	r0, [pc, #304]	; (9be0 <bt_recv+0x15c>)
    9ab0:	f240 13b5 	movw	r3, #437	; 0x1b5
    9ab4:	f01e fa78 	bl	27fa8 <printk>
    9ab8:	4040      	eors	r0, r0
    9aba:	f380 8811 	msr	BASEPRI, r0
    9abe:	f04f 0003 	mov.w	r0, #3
    9ac2:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    9ac4:	2104      	movs	r1, #4
    9ac6:	f104 0008 	add.w	r0, r4, #8
    9aca:	f023 f82f 	bl	2cb2c <net_buf_simple_pull_mem>
	if (buf->len != len) {
    9ace:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    9ad0:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    9ad2:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9ad4:	22ff      	movs	r2, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    9ad6:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    9ada:	428b      	cmp	r3, r1
	acl(buf)->handle = bt_acl_handle(handle);
    9adc:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    9ade:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    9ae0:	d014      	beq.n	9b0c <bt_recv+0x88>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    9ae2:	466d      	mov	r5, sp
    9ae4:	b088      	sub	sp, #32
    9ae6:	466a      	mov	r2, sp
    9ae8:	483e      	ldr	r0, [pc, #248]	; (9be4 <bt_recv+0x160>)
    9aea:	6193      	str	r3, [r2, #24]
    9aec:	2304      	movs	r3, #4
    9aee:	e9c2 0104 	strd	r0, r1, [r2, #16]
    9af2:	f842 3f0c 	str.w	r3, [r2, #12]!
    9af6:	483c      	ldr	r0, [pc, #240]	; (9be8 <bt_recv+0x164>)
    9af8:	60bb      	str	r3, [r7, #8]
    9afa:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    9afe:	f020 faf5 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
    9b02:	46ad      	mov	sp, r5
	net_buf_unref(buf);
    9b04:	4620      	mov	r0, r4
    9b06:	f016 ff93 	bl	20a30 <net_buf_unref>
    9b0a:	e01d      	b.n	9b48 <bt_recv+0xc4>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    9b0c:	f001 fde8 	bl	b6e0 <bt_conn_lookup_handle>
	if (!conn) {
    9b10:	4605      	mov	r5, r0
    9b12:	b970      	cbnz	r0, 9b32 <bt_recv+0xae>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    9b14:	8ae3      	ldrh	r3, [r4, #22]
    9b16:	4a35      	ldr	r2, [pc, #212]	; (9bec <bt_recv+0x168>)
    9b18:	4833      	ldr	r0, [pc, #204]	; (9be8 <bt_recv+0x164>)
    9b1a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    9b1e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9b22:	2303      	movs	r3, #3
    9b24:	f107 0214 	add.w	r2, r7, #20
    9b28:	607b      	str	r3, [r7, #4]
    9b2a:	617b      	str	r3, [r7, #20]
    9b2c:	f020 fade 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    9b30:	e7e8      	b.n	9b04 <bt_recv+0x80>
	acl(buf)->index = bt_conn_index(conn);
    9b32:	f001 fef1 	bl	b918 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    9b36:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    9b38:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    9b3a:	4621      	mov	r1, r4
    9b3c:	4628      	mov	r0, r5
    9b3e:	f001 fc9b 	bl	b478 <bt_conn_recv>
	bt_conn_unref(conn);
    9b42:	4628      	mov	r0, r5
    9b44:	f020 fe81 	bl	2a84a <bt_conn_unref>
		return 0;
    9b48:	2000      	movs	r0, #0
}
    9b4a:	3724      	adds	r7, #36	; 0x24
    9b4c:	46bd      	mov	sp, r7
    9b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    9b50:	89a3      	ldrh	r3, [r4, #12]
    9b52:	2b01      	cmp	r3, #1
    9b54:	d80c      	bhi.n	9b70 <bt_recv+0xec>
    9b56:	4a20      	ldr	r2, [pc, #128]	; (9bd8 <bt_recv+0x154>)
    9b58:	4920      	ldr	r1, [pc, #128]	; (9bdc <bt_recv+0x158>)
    9b5a:	4821      	ldr	r0, [pc, #132]	; (9be0 <bt_recv+0x15c>)
    9b5c:	f640 1317 	movw	r3, #2327	; 0x917
    9b60:	f01e fa22 	bl	27fa8 <printk>
    9b64:	4040      	eors	r0, r0
    9b66:	f380 8811 	msr	BASEPRI, r0
    9b6a:	f04f 0003 	mov.w	r0, #3
    9b6e:	df02      	svc	2
    9b70:	2102      	movs	r1, #2
    9b72:	f104 0008 	add.w	r0, r4, #8
    9b76:	f022 ffd9 	bl	2cb2c <net_buf_simple_pull_mem>
    9b7a:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    9b7c:	7800      	ldrb	r0, [r0, #0]
    9b7e:	f020 fa61 	bl	2a044 <bt_hci_evt_get_flags>
    9b82:	0783      	lsls	r3, r0, #30
    9b84:	d40c      	bmi.n	9ba0 <bt_recv+0x11c>
    9b86:	4a14      	ldr	r2, [pc, #80]	; (9bd8 <bt_recv+0x154>)
    9b88:	4919      	ldr	r1, [pc, #100]	; (9bf0 <bt_recv+0x16c>)
    9b8a:	4815      	ldr	r0, [pc, #84]	; (9be0 <bt_recv+0x15c>)
    9b8c:	f640 131b 	movw	r3, #2331	; 0x91b
    9b90:	f01e fa0a 	bl	27fa8 <printk>
    9b94:	4040      	eors	r0, r0
    9b96:	f380 8811 	msr	BASEPRI, r0
    9b9a:	f04f 0003 	mov.w	r0, #3
    9b9e:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    9ba0:	4a14      	ldr	r2, [pc, #80]	; (9bf4 <bt_recv+0x170>)
    9ba2:	7828      	ldrb	r0, [r5, #0]
    9ba4:	2306      	movs	r3, #6
    9ba6:	4621      	mov	r1, r4
    9ba8:	f7fe feee 	bl	8988 <handle_event>
    9bac:	e7aa      	b.n	9b04 <bt_recv+0x80>
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9bae:	4a12      	ldr	r2, [pc, #72]	; (9bf8 <bt_recv+0x174>)
    9bb0:	480d      	ldr	r0, [pc, #52]	; (9be8 <bt_recv+0x164>)
	switch (bt_buf_get_type(buf)) {
    9bb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    9bb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9bba:	2303      	movs	r3, #3
    9bbc:	f107 0214 	add.w	r2, r7, #20
    9bc0:	607b      	str	r3, [r7, #4]
    9bc2:	617b      	str	r3, [r7, #20]
    9bc4:	f020 fa92 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		net_buf_unref(buf);
    9bc8:	4620      	mov	r0, r4
    9bca:	f016 ff31 	bl	20a30 <net_buf_unref>
		return -EINVAL;
    9bce:	f06f 0015 	mvn.w	r0, #21
    9bd2:	e7ba      	b.n	9b4a <bt_recv+0xc6>
    9bd4:	20002298 	.word	0x20002298
    9bd8:	000320e7 	.word	0x000320e7
    9bdc:	00032355 	.word	0x00032355
    9be0:	00032124 	.word	0x00032124
    9be4:	00032387 	.word	0x00032387
    9be8:	0002f4d4 	.word	0x0002f4d4
    9bec:	000323ab 	.word	0x000323ab
    9bf0:	000323cd 	.word	0x000323cd
    9bf4:	0002fb20 	.word	0x0002fb20
    9bf8:	000323fb 	.word	0x000323fb

00009bfc <bt_recv_prio>:
{
    9bfc:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9bfe:	7d03      	ldrb	r3, [r0, #20]
    9c00:	2b01      	cmp	r3, #1
{
    9c02:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    9c04:	d00c      	beq.n	9c20 <bt_recv_prio+0x24>
    9c06:	4a09      	ldr	r2, [pc, #36]	; (9c2c <bt_recv_prio+0x30>)
    9c08:	4909      	ldr	r1, [pc, #36]	; (9c30 <bt_recv_prio+0x34>)
    9c0a:	480a      	ldr	r0, [pc, #40]	; (9c34 <bt_recv_prio+0x38>)
    9c0c:	f640 537c 	movw	r3, #3452	; 0xd7c
    9c10:	f01e f9ca 	bl	27fa8 <printk>
    9c14:	4040      	eors	r0, r0
    9c16:	f380 8811 	msr	BASEPRI, r0
    9c1a:	f04f 0003 	mov.w	r0, #3
    9c1e:	df02      	svc	2
	hci_event_prio(buf);
    9c20:	4620      	mov	r0, r4
    9c22:	f7ff fedd 	bl	99e0 <hci_event_prio>
}
    9c26:	2000      	movs	r0, #0
    9c28:	bd10      	pop	{r4, pc}
    9c2a:	bf00      	nop
    9c2c:	000320e7 	.word	0x000320e7
    9c30:	0003240f 	.word	0x0003240f
    9c34:	00032124 	.word	0x00032124

00009c38 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    9c38:	4a08      	ldr	r2, [pc, #32]	; (9c5c <bt_hci_driver_register+0x24>)
{
    9c3a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    9c3c:	f8d2 0154 	ldr.w	r0, [r2, #340]	; 0x154
    9c40:	b930      	cbnz	r0, 9c50 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    9c42:	68d9      	ldr	r1, [r3, #12]
    9c44:	b139      	cbz	r1, 9c56 <bt_hci_driver_register+0x1e>
    9c46:	6919      	ldr	r1, [r3, #16]
    9c48:	b129      	cbz	r1, 9c56 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    9c4a:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
	return 0;
    9c4e:	4770      	bx	lr
		return -EALREADY;
    9c50:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9c54:	4770      	bx	lr
		return -EINVAL;
    9c56:	f06f 0015 	mvn.w	r0, #21
}
    9c5a:	4770      	bx	lr
    9c5c:	20000000 	.word	0x20000000

00009c60 <bt_finalize_init>:
{
    9c60:	b508      	push	{r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9c62:	4804      	ldr	r0, [pc, #16]	; (9c74 <bt_finalize_init+0x14>)
    9c64:	2102      	movs	r1, #2
    9c66:	f020 fa26 	bl	2a0b6 <atomic_or>
}
    9c6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_scan_update(false);
    9c6e:	2000      	movs	r0, #0
    9c70:	f001 b86c 	b.w	ad4c <bt_le_scan_update>
    9c74:	200000cc 	.word	0x200000cc

00009c78 <init_work>:

static void init_work(struct k_work *work)
{
    9c78:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    9c7a:	f7f7 fb31 	bl	12e0 <bt_init>
	if (ready_cb) {
    9c7e:	4b03      	ldr	r3, [pc, #12]	; (9c8c <init_work+0x14>)
    9c80:	681b      	ldr	r3, [r3, #0]
    9c82:	b113      	cbz	r3, 9c8a <init_work+0x12>
		ready_cb(err);
	}
}
    9c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    9c88:	4718      	bx	r3
}
    9c8a:	bd10      	pop	{r4, pc}
    9c8c:	200022b4 	.word	0x200022b4

00009c90 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
    9c90:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
    9c92:	4d2c      	ldr	r5, [pc, #176]	; (9d44 <bt_enable+0xb4>)
    9c94:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
{
    9c98:	b090      	sub	sp, #64	; 0x40
    9c9a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    9c9c:	b97b      	cbnz	r3, 9cbe <bt_enable+0x2e>
		BT_ERR("No HCI driver registered");
    9c9e:	4b2a      	ldr	r3, [pc, #168]	; (9d48 <bt_enable+0xb8>)
    9ca0:	930e      	str	r3, [sp, #56]	; 0x38
    9ca2:	482a      	ldr	r0, [pc, #168]	; (9d4c <bt_enable+0xbc>)
    9ca4:	2302      	movs	r3, #2
    9ca6:	aa0d      	add	r2, sp, #52	; 0x34
    9ca8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    9cac:	f06f 0412 	mvn.w	r4, #18
		BT_ERR("No HCI driver registered");
    9cb0:	9309      	str	r3, [sp, #36]	; 0x24
    9cb2:	930d      	str	r3, [sp, #52]	; 0x34
    9cb4:	f020 fa1a 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
    9cb8:	4620      	mov	r0, r4
    9cba:	b010      	add	sp, #64	; 0x40
    9cbc:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    9cbe:	2101      	movs	r1, #1
    9cc0:	f105 00cc 	add.w	r0, r5, #204	; 0xcc
    9cc4:	f020 f9f7 	bl	2a0b6 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    9cc8:	ea10 0301 	ands.w	r3, r0, r1
    9ccc:	d137      	bne.n	9d3e <bt_enable+0xae>
	ready_cb = cb;
    9cce:	4a20      	ldr	r2, [pc, #128]	; (9d50 <bt_enable+0xc0>)
    9cd0:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    9cd2:	2000      	movs	r0, #0
    9cd4:	2100      	movs	r1, #0
    9cd6:	f06f 0208 	mvn.w	r2, #8
    9cda:	e9cd 0106 	strd	r0, r1, [sp, #24]
    9cde:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9ce2:	e9cd 3300 	strd	r3, r3, [sp]
    9ce6:	9304      	str	r3, [sp, #16]
    9ce8:	491a      	ldr	r1, [pc, #104]	; (9d54 <bt_enable+0xc4>)
    9cea:	4b1b      	ldr	r3, [pc, #108]	; (9d58 <bt_enable+0xc8>)
    9cec:	481b      	ldr	r0, [pc, #108]	; (9d5c <bt_enable+0xcc>)
    9cee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9cf2:	f01a fda3 	bl	2483c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    9cf6:	491a      	ldr	r1, [pc, #104]	; (9d60 <bt_enable+0xd0>)
    9cf8:	4818      	ldr	r0, [pc, #96]	; (9d5c <bt_enable+0xcc>)
    9cfa:	f023 ff26 	bl	2db4a <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    9cfe:	f7fe fc93 	bl	8628 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    9d02:	f8d5 3154 	ldr.w	r3, [r5, #340]	; 0x154
    9d06:	68db      	ldr	r3, [r3, #12]
    9d08:	4798      	blx	r3
	if (err) {
    9d0a:	4604      	mov	r4, r0
    9d0c:	b160      	cbz	r0, 9d28 <bt_enable+0x98>
		BT_ERR("HCI driver open failed (%d)", err);
    9d0e:	4b15      	ldr	r3, [pc, #84]	; (9d64 <bt_enable+0xd4>)
    9d10:	aa0d      	add	r2, sp, #52	; 0x34
    9d12:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
    9d16:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    9d1a:	2303      	movs	r3, #3
    9d1c:	480b      	ldr	r0, [pc, #44]	; (9d4c <bt_enable+0xbc>)
    9d1e:	9309      	str	r3, [sp, #36]	; 0x24
    9d20:	930d      	str	r3, [sp, #52]	; 0x34
    9d22:	f020 f9e3 	bl	2a0ec <z_log_msg2_static_create.constprop.0>
		return err;
    9d26:	e7c7      	b.n	9cb8 <bt_enable+0x28>
	if (!cb) {
    9d28:	b926      	cbnz	r6, 9d34 <bt_enable+0xa4>
}
    9d2a:	b010      	add	sp, #64	; 0x40
    9d2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    9d30:	f7f7 bad6 	b.w	12e0 <bt_init>
	k_work_submit(&bt_dev.init);
    9d34:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    9d38:	f01b f92e 	bl	24f98 <k_work_submit>
	return 0;
    9d3c:	e7bc      	b.n	9cb8 <bt_enable+0x28>
		return -EALREADY;
    9d3e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    9d42:	e7b9      	b.n	9cb8 <bt_enable+0x28>
    9d44:	20000000 	.word	0x20000000
    9d48:	000324ef 	.word	0x000324ef
    9d4c:	0002f4d4 	.word	0x0002f4d4
    9d50:	200022b4 	.word	0x200022b4
    9d54:	200065a0 	.word	0x200065a0
    9d58:	00008bdd 	.word	0x00008bdd
    9d5c:	200016a8 	.word	0x200016a8
    9d60:	00032508 	.word	0x00032508
    9d64:	0003250e 	.word	0x0003250e

00009d68 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    9d68:	4800      	ldr	r0, [pc, #0]	; (9d6c <bt_get_name+0x4>)
    9d6a:	4770      	bx	lr
    9d6c:	0003252a 	.word	0x0003252a

00009d70 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    9d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    9d72:	4f0b      	ldr	r7, [pc, #44]	; (9da0 <id_find+0x30>)
{
    9d74:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    9d76:	2500      	movs	r5, #0
    9d78:	79fb      	ldrb	r3, [r7, #7]
    9d7a:	b2ec      	uxtb	r4, r5
    9d7c:	42a3      	cmp	r3, r4
    9d7e:	d802      	bhi.n	9d86 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    9d80:	f06f 0401 	mvn.w	r4, #1
    9d84:	e009      	b.n	9d9a <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    9d86:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    9d8a:	2207      	movs	r2, #7
    9d8c:	4439      	add	r1, r7
    9d8e:	4630      	mov	r0, r6
    9d90:	f024 fbd9 	bl	2e546 <memcmp>
    9d94:	3501      	adds	r5, #1
    9d96:	2800      	cmp	r0, #0
    9d98:	d1ee      	bne.n	9d78 <id_find+0x8>
}
    9d9a:	4620      	mov	r0, r4
    9d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9d9e:	bf00      	nop
    9da0:	20000000 	.word	0x20000000

00009da4 <bt_id_add.part.0>:
void bt_id_add(struct bt_keys *keys)
    9da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9da8:	2100      	movs	r1, #0
void bt_id_add(struct bt_keys *keys)
    9daa:	b088      	sub	sp, #32
    9dac:	4604      	mov	r4, r0
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9dae:	2206      	movs	r2, #6
    9db0:	4608      	mov	r0, r1
    9db2:	f001 ff17 	bl	bbe4 <bt_conn_lookup_state_le>
	if (conn) {
    9db6:	4605      	mov	r5, r0
    9db8:	b1a8      	cbz	r0, 9de6 <bt_id_add.part.0+0x42>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9dba:	f3bf 8f5b 	dmb	ish
    9dbe:	4b54      	ldr	r3, [pc, #336]	; (9f10 <bt_id_add.part.0+0x16c>)
    9dc0:	e853 2f00 	ldrex	r2, [r3]
    9dc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    9dc8:	e843 2100 	strex	r1, r2, [r3]
    9dcc:	2900      	cmp	r1, #0
    9dce:	d1f7      	bne.n	9dc0 <bt_id_add.part.0+0x1c>
    9dd0:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    9dd4:	7a23      	ldrb	r3, [r4, #8]
    9dd6:	f043 0301 	orr.w	r3, r3, #1
    9dda:	7223      	strb	r3, [r4, #8]
}
    9ddc:	b008      	add	sp, #32
    9dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    9de2:	f020 bd32 	b.w	2a84a <bt_conn_unref>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9de6:	484a      	ldr	r0, [pc, #296]	; (9f10 <bt_id_add.part.0+0x16c>)
    9de8:	f020 fa9c 	bl	2a324 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    9dec:	4629      	mov	r1, r5
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9dee:	f3c0 1640 	ubfx	r6, r0, #5, #1
    9df2:	4848      	ldr	r0, [pc, #288]	; (9f14 <bt_id_add.part.0+0x170>)
    9df4:	f000 fcfc 	bl	a7f0 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    9df8:	b116      	cbz	r6, 9e00 <bt_id_add.part.0+0x5c>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    9dfa:	4628      	mov	r0, r5
    9dfc:	f020 fc7e 	bl	2a6fc <bt_le_scan_set_enable>
	if (bt_dev.le.rl_entries) {
    9e00:	4d45      	ldr	r5, [pc, #276]	; (9f18 <bt_id_add.part.0+0x174>)
    9e02:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    9e06:	b17b      	cbz	r3, 9e28 <bt_id_add.part.0+0x84>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9e08:	2000      	movs	r0, #0
    9e0a:	f020 faeb 	bl	2a3e4 <addr_res_enable>
		if (err) {
    9e0e:	b158      	cbz	r0, 9e28 <bt_id_add.part.0+0x84>
			BT_WARN("Failed to disable address resolution");
    9e10:	4b42      	ldr	r3, [pc, #264]	; (9f1c <bt_id_add.part.0+0x178>)
		BT_WARN("Set privacy mode command is not supported");
    9e12:	9306      	str	r3, [sp, #24]
    9e14:	2302      	movs	r3, #2
    9e16:	9301      	str	r3, [sp, #4]
    9e18:	9305      	str	r3, [sp, #20]
    9e1a:	aa05      	add	r2, sp, #20
    9e1c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9e20:	483f      	ldr	r0, [pc, #252]	; (9f20 <bt_id_add.part.0+0x17c>)
    9e22:	f020 fadc 	bl	2a3de <z_log_msg2_static_create.constprop.0>
	if (err) {
    9e26:	e028      	b.n	9e7a <bt_id_add.part.0+0xd6>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9e28:	f895 2119 	ldrb.w	r2, [r5, #281]	; 0x119
    9e2c:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
    9e30:	429a      	cmp	r2, r3
    9e32:	d130      	bne.n	9e96 <bt_id_add.part.0+0xf2>
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9e34:	4b3b      	ldr	r3, [pc, #236]	; (9f24 <bt_id_add.part.0+0x180>)
    9e36:	483a      	ldr	r0, [pc, #232]	; (9f20 <bt_id_add.part.0+0x17c>)
    9e38:	9306      	str	r3, [sp, #24]
    9e3a:	2702      	movs	r7, #2
    9e3c:	aa05      	add	r2, sp, #20
    9e3e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    9e42:	9701      	str	r7, [sp, #4]
    9e44:	9705      	str	r7, [sp, #20]
    9e46:	f020 faca 	bl	2a3de <z_log_msg2_static_create.constprop.0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    9e4a:	2200      	movs	r2, #0
    9e4c:	4611      	mov	r1, r2
    9e4e:	f242 0029 	movw	r0, #8233	; 0x2029
    9e52:	f7ff f9c5 	bl	91e0 <bt_hci_cmd_send_sync>
		if (err) {
    9e56:	b138      	cbz	r0, 9e68 <bt_id_add.part.0+0xc4>
			BT_ERR("Failed to clear resolution list");
    9e58:	4b33      	ldr	r3, [pc, #204]	; (9f28 <bt_id_add.part.0+0x184>)
    9e5a:	9306      	str	r3, [sp, #24]
    9e5c:	9701      	str	r7, [sp, #4]
    9e5e:	9705      	str	r7, [sp, #20]
		BT_ERR("Failed to set privacy mode");
    9e60:	aa05      	add	r2, sp, #20
    9e62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9e66:	e7db      	b.n	9e20 <bt_id_add.part.0+0x7c>
		bt_dev.le.rl_entries++;
    9e68:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    9e6c:	3301      	adds	r3, #1
    9e6e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    9e72:	7a23      	ldrb	r3, [r4, #8]
    9e74:	f043 0304 	orr.w	r3, r3, #4
    9e78:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9e7a:	2001      	movs	r0, #1
    9e7c:	f020 fab2 	bl	2a3e4 <addr_res_enable>
	if (scan_enabled) {
    9e80:	b116      	cbz	r6, 9e88 <bt_id_add.part.0+0xe4>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    9e82:	2001      	movs	r0, #1
    9e84:	f020 fc3a 	bl	2a6fc <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    9e88:	4828      	ldr	r0, [pc, #160]	; (9f2c <bt_id_add.part.0+0x188>)
    9e8a:	2100      	movs	r1, #0
}
    9e8c:	b008      	add	sp, #32
    9e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    9e92:	f000 bcad 	b.w	a7f0 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    9e96:	f104 0801 	add.w	r8, r4, #1
    9e9a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    9e9e:	4640      	mov	r0, r8
    9ea0:	f020 fa67 	bl	2a372 <hci_id_add.constprop.0>
	if (err) {
    9ea4:	4607      	mov	r7, r0
    9ea6:	b128      	cbz	r0, 9eb4 <bt_id_add.part.0+0x110>
		BT_ERR("Failed to add IRK to controller");
    9ea8:	4b21      	ldr	r3, [pc, #132]	; (9f30 <bt_id_add.part.0+0x18c>)
		BT_ERR("Failed to set privacy mode");
    9eaa:	9306      	str	r3, [sp, #24]
    9eac:	2302      	movs	r3, #2
    9eae:	9301      	str	r3, [sp, #4]
    9eb0:	9305      	str	r3, [sp, #20]
    9eb2:	e7d5      	b.n	9e60 <bt_id_add.part.0+0xbc>
	bt_dev.le.rl_entries++;
    9eb4:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    9eb8:	3301      	adds	r3, #1
    9eba:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state |= BT_KEYS_ID_ADDED;
    9ebe:	7a23      	ldrb	r3, [r4, #8]
    9ec0:	f043 0304 	orr.w	r3, r3, #4
    9ec4:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    9ec6:	f895 309f 	ldrb.w	r3, [r5, #159]	; 0x9f
    9eca:	075b      	lsls	r3, r3, #29
    9ecc:	d401      	bmi.n	9ed2 <bt_id_add.part.0+0x12e>
		BT_WARN("Set privacy mode command is not supported");
    9ece:	4b19      	ldr	r3, [pc, #100]	; (9f34 <bt_id_add.part.0+0x190>)
    9ed0:	e79f      	b.n	9e12 <bt_id_add.part.0+0x6e>
	bt_addr_le_copy(&cp.id_addr, addr);
    9ed2:	4641      	mov	r1, r8
    9ed4:	a802      	add	r0, sp, #8
    9ed6:	f020 fa45 	bl	2a364 <bt_addr_le_copy>
	cp.mode = mode;
    9eda:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9edc:	2108      	movs	r1, #8
    9ede:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9ee2:	f88d 300f 	strb.w	r3, [sp, #15]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9ee6:	f7ff f813 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    9eea:	4604      	mov	r4, r0
    9eec:	b908      	cbnz	r0, 9ef2 <bt_id_add.part.0+0x14e>
		BT_ERR("Failed to set privacy mode");
    9eee:	4b12      	ldr	r3, [pc, #72]	; (9f38 <bt_id_add.part.0+0x194>)
    9ef0:	e7db      	b.n	9eaa <bt_id_add.part.0+0x106>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9ef2:	2208      	movs	r2, #8
    9ef4:	eb0d 0102 	add.w	r1, sp, r2
    9ef8:	4410      	add	r0, r2
    9efa:	f022 fdec 	bl	2cad6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    9efe:	463a      	mov	r2, r7
    9f00:	4621      	mov	r1, r4
    9f02:	f242 004e 	movw	r0, #8270	; 0x204e
    9f06:	f7ff f96b 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    9f0a:	2800      	cmp	r0, #0
    9f0c:	d0b5      	beq.n	9e7a <bt_id_add.part.0+0xd6>
    9f0e:	e7ee      	b.n	9eee <bt_id_add.part.0+0x14a>
    9f10:	200000cc 	.word	0x200000cc
    9f14:	0002a429 	.word	0x0002a429
    9f18:	20000000 	.word	0x20000000
    9f1c:	00032567 	.word	0x00032567
    9f20:	0002f4e4 	.word	0x0002f4e4
    9f24:	0003258c 	.word	0x0003258c
    9f28:	000325bd 	.word	0x000325bd
    9f2c:	0002a331 	.word	0x0002a331
    9f30:	000325dd 	.word	0x000325dd
    9f34:	000325fd 	.word	0x000325fd
    9f38:	00032627 	.word	0x00032627

00009f3c <set_random_address>:
{
    9f3c:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    9f3e:	2206      	movs	r2, #6
    9f40:	4912      	ldr	r1, [pc, #72]	; (9f8c <set_random_address+0x50>)
    9f42:	4605      	mov	r5, r0
    9f44:	f024 faff 	bl	2e546 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9f48:	4602      	mov	r2, r0
    9f4a:	b1d0      	cbz	r0, 9f82 <set_random_address+0x46>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9f4c:	2106      	movs	r1, #6
    9f4e:	f242 0005 	movw	r0, #8197	; 0x2005
    9f52:	f7fe ffdd 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    9f56:	4604      	mov	r4, r0
    9f58:	b1a8      	cbz	r0, 9f86 <set_random_address+0x4a>
    9f5a:	2206      	movs	r2, #6
    9f5c:	4629      	mov	r1, r5
    9f5e:	3008      	adds	r0, #8
    9f60:	f022 fdb9 	bl	2cad6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9f64:	2200      	movs	r2, #0
    9f66:	4621      	mov	r1, r4
    9f68:	f242 0005 	movw	r0, #8197	; 0x2005
    9f6c:	f7ff f938 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    9f70:	4602      	mov	r2, r0
    9f72:	b930      	cbnz	r0, 9f82 <set_random_address+0x46>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    9f74:	4805      	ldr	r0, [pc, #20]	; (9f8c <set_random_address+0x50>)
    9f76:	4629      	mov	r1, r5
    9f78:	f020 f9ef 	bl	2a35a <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9f7c:	2301      	movs	r3, #1
    9f7e:	f800 3c01 	strb.w	r3, [r0, #-1]
}
    9f82:	4610      	mov	r0, r2
    9f84:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    9f86:	f06f 0268 	mvn.w	r2, #104	; 0x68
    9f8a:	e7fa      	b.n	9f82 <set_random_address+0x46>
    9f8c:	20000061 	.word	0x20000061

00009f90 <id_create.constprop.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    9f90:	b530      	push	{r4, r5, lr}
    9f92:	4604      	mov	r4, r0
    9f94:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    9f96:	460d      	mov	r5, r1
    9f98:	b199      	cbz	r1, 9fc2 <id_create.constprop.0+0x32>
    9f9a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    9f9c:	2207      	movs	r2, #7
    9f9e:	a902      	add	r1, sp, #8
    9fa0:	4628      	mov	r0, r5
    9fa2:	9302      	str	r3, [sp, #8]
    9fa4:	f8cd 300b 	str.w	r3, [sp, #11]
    9fa8:	f024 facd 	bl	2e546 <memcmp>
    9fac:	b148      	cbz	r0, 9fc2 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    9fae:	4810      	ldr	r0, [pc, #64]	; (9ff0 <id_create.constprop.0+0x60>)
    9fb0:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9fb4:	4629      	mov	r1, r5
    9fb6:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9fb8:	f020 f9d4 	bl	2a364 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
    9fbc:	2000      	movs	r0, #0
}
    9fbe:	b005      	add	sp, #20
    9fc0:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
    9fc2:	4668      	mov	r0, sp
    9fc4:	f020 f830 	bl	2a028 <bt_addr_le_create_static>
			if (err) {
    9fc8:	2800      	cmp	r0, #0
    9fca:	d1f8      	bne.n	9fbe <id_create.constprop.0+0x2e>
		} while (id_find(&new_addr) >= 0);
    9fcc:	4668      	mov	r0, sp
    9fce:	f7ff fecf 	bl	9d70 <id_find>
    9fd2:	2800      	cmp	r0, #0
    9fd4:	daf5      	bge.n	9fc2 <id_create.constprop.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    9fd6:	4806      	ldr	r0, [pc, #24]	; (9ff0 <id_create.constprop.0+0x60>)
    9fd8:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    9fdc:	4420      	add	r0, r4
    9fde:	4669      	mov	r1, sp
    9fe0:	f020 f9c0 	bl	2a364 <bt_addr_le_copy>
		if (addr) {
    9fe4:	2d00      	cmp	r5, #0
    9fe6:	d0e9      	beq.n	9fbc <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    9fe8:	4601      	mov	r1, r0
    9fea:	4628      	mov	r0, r5
    9fec:	e7e4      	b.n	9fb8 <id_create.constprop.0+0x28>
    9fee:	bf00      	nop
    9ff0:	20000000 	.word	0x20000000

00009ff4 <bt_id_adv_random_addr_check>:
{
    9ff4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9ff6:	4805      	ldr	r0, [pc, #20]	; (a00c <bt_id_adv_random_addr_check+0x18>)
    9ff8:	f020 f994 	bl	2a324 <atomic_get>
	if (!(atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING) ||
    9ffc:	0503      	lsls	r3, r0, #20
    9ffe:	d402      	bmi.n	a006 <bt_id_adv_random_addr_check+0x12>
    a000:	4802      	ldr	r0, [pc, #8]	; (a00c <bt_id_adv_random_addr_check+0x18>)
    a002:	f020 f98f 	bl	2a324 <atomic_get>
}
    a006:	2001      	movs	r0, #1
    a008:	bd08      	pop	{r3, pc}
    a00a:	bf00      	nop
    a00c:	200000cc 	.word	0x200000cc

0000a010 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a010:	4b0a      	ldr	r3, [pc, #40]	; (a03c <bt_id_pending_keys_update+0x2c>)
    a012:	f3bf 8f5b 	dmb	ish
    a016:	e853 2f00 	ldrex	r2, [r3]
    a01a:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    a01e:	e843 1000 	strex	r0, r1, [r3]
    a022:	2800      	cmp	r0, #0
    a024:	d1f7      	bne.n	a016 <bt_id_pending_keys_update+0x6>
    a026:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    a02a:	0493      	lsls	r3, r2, #18
    a02c:	d504      	bpl.n	a038 <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    a02e:	4904      	ldr	r1, [pc, #16]	; (a040 <bt_id_pending_keys_update+0x30>)
    a030:	2200      	movs	r2, #0
    a032:	2002      	movs	r0, #2
    a034:	f006 bdd4 	b.w	10be0 <bt_keys_foreach>
}
    a038:	4770      	bx	lr
    a03a:	bf00      	nop
    a03c:	200000cc 	.word	0x200000cc
    a040:	0002a4cb 	.word	0x0002a4cb

0000a044 <bt_id_add>:
{
    a044:	b410      	push	{r4}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a046:	490a      	ldr	r1, [pc, #40]	; (a070 <bt_id_add+0x2c>)
    a048:	f891 4118 	ldrb.w	r4, [r1, #280]	; 0x118
    a04c:	f891 2119 	ldrb.w	r2, [r1, #281]	; 0x119
{
    a050:	4603      	mov	r3, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a052:	b10c      	cbz	r4, a058 <bt_id_add+0x14>
    a054:	4294      	cmp	r4, r2
    a056:	d208      	bcs.n	a06a <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    a058:	3201      	adds	r2, #1
    a05a:	f881 2119 	strb.w	r2, [r1, #281]	; 0x119
		keys->state |= BT_KEYS_ID_ADDED;
    a05e:	7a1a      	ldrb	r2, [r3, #8]
}
    a060:	bc10      	pop	{r4}
		keys->state |= BT_KEYS_ID_ADDED;
    a062:	f042 0204 	orr.w	r2, r2, #4
    a066:	721a      	strb	r2, [r3, #8]
}
    a068:	4770      	bx	lr
    a06a:	bc10      	pop	{r4}
    a06c:	f7ff be9a 	b.w	9da4 <bt_id_add.part.0>
    a070:	20000000 	.word	0x20000000

0000a074 <bt_id_del>:
{
    a074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!bt_dev.le.rl_size ||
    a078:	4d51      	ldr	r5, [pc, #324]	; (a1c0 <bt_id_del+0x14c>)
    a07a:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a07e:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
{
    a082:	b089      	sub	sp, #36	; 0x24
    a084:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    a086:	b112      	cbz	r2, a08e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a088:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    a08a:	4293      	cmp	r3, r2
    a08c:	dd09      	ble.n	a0a2 <bt_id_del+0x2e>
		bt_dev.le.rl_entries--;
    a08e:	3b01      	subs	r3, #1
    a090:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    a094:	7a23      	ldrb	r3, [r4, #8]
    a096:	f023 0304 	bic.w	r3, r3, #4
    a09a:	7223      	strb	r3, [r4, #8]
}
    a09c:	b009      	add	sp, #36	; 0x24
    a09e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a0a2:	2100      	movs	r1, #0
    a0a4:	2206      	movs	r2, #6
    a0a6:	4608      	mov	r0, r1
    a0a8:	f001 fd9c 	bl	bbe4 <bt_conn_lookup_state_le>
	if (conn) {
    a0ac:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
    a0b0:	4606      	mov	r6, r0
    a0b2:	b1a0      	cbz	r0, a0de <bt_id_del+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a0b4:	f3bf 8f5b 	dmb	ish
    a0b8:	e853 2f00 	ldrex	r2, [r3]
    a0bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a0c0:	e843 2100 	strex	r1, r2, [r3]
    a0c4:	2900      	cmp	r1, #0
    a0c6:	d1f7      	bne.n	a0b8 <bt_id_del+0x44>
    a0c8:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    a0cc:	7a23      	ldrb	r3, [r4, #8]
    a0ce:	f043 0302 	orr.w	r3, r3, #2
    a0d2:	7223      	strb	r3, [r4, #8]
}
    a0d4:	b009      	add	sp, #36	; 0x24
    a0d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    a0da:	f020 bbb6 	b.w	2a84a <bt_conn_unref>
    a0de:	4618      	mov	r0, r3
    a0e0:	f020 f920 	bl	2a324 <atomic_get>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    a0e4:	4631      	mov	r1, r6
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a0e6:	f3c0 1840 	ubfx	r8, r0, #5, #1
    a0ea:	4836      	ldr	r0, [pc, #216]	; (a1c4 <bt_id_del+0x150>)
    a0ec:	f000 fb80 	bl	a7f0 <bt_le_ext_adv_foreach>
	if (scan_enabled) {
    a0f0:	f1b8 0f00 	cmp.w	r8, #0
    a0f4:	d002      	beq.n	a0fc <bt_id_del+0x88>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    a0f6:	4630      	mov	r0, r6
    a0f8:	f020 fb00 	bl	2a6fc <bt_le_scan_set_enable>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a0fc:	2000      	movs	r0, #0
    a0fe:	f020 f971 	bl	2a3e4 <addr_res_enable>
	if (err) {
    a102:	4606      	mov	r6, r0
    a104:	b160      	cbz	r0, a120 <bt_id_del+0xac>
		BT_ERR("Disabling address resolution failed (err %d)", err);
    a106:	4b30      	ldr	r3, [pc, #192]	; (a1c8 <bt_id_del+0x154>)
    a108:	e9cd 3006 	strd	r3, r0, [sp, #24]
    a10c:	2303      	movs	r3, #3
    a10e:	9301      	str	r3, [sp, #4]
    a110:	9305      	str	r3, [sp, #20]
    a112:	aa05      	add	r2, sp, #20
    a114:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Failed to remove IRK from controller");
    a118:	482c      	ldr	r0, [pc, #176]	; (a1cc <bt_id_del+0x158>)
    a11a:	f020 f960 	bl	2a3de <z_log_msg2_static_create.constprop.0>
		goto done;
    a11e:	e011      	b.n	a144 <bt_id_del+0xd0>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a120:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    a124:	f895 2118 	ldrb.w	r2, [r5, #280]	; 0x118
    a128:	429a      	cmp	r2, r3
    a12a:	d21e      	bcs.n	a16a <bt_id_del+0xf6>
		bt_dev.le.rl_entries--;
    a12c:	3b01      	subs	r3, #1
    a12e:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
		keys->state &= ~BT_KEYS_ID_ADDED;
    a132:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a134:	4926      	ldr	r1, [pc, #152]	; (a1d0 <bt_id_del+0x15c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    a136:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a13a:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    a13c:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a13e:	2002      	movs	r0, #2
    a140:	f006 fd4e 	bl	10be0 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    a144:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    a148:	b113      	cbz	r3, a150 <bt_id_del+0xdc>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a14a:	2001      	movs	r0, #1
    a14c:	f020 f94a 	bl	2a3e4 <addr_res_enable>
	if (scan_enabled) {
    a150:	f1b8 0f00 	cmp.w	r8, #0
    a154:	d002      	beq.n	a15c <bt_id_del+0xe8>
		bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    a156:	2001      	movs	r0, #1
    a158:	f020 fad0 	bl	2a6fc <bt_le_scan_set_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    a15c:	481d      	ldr	r0, [pc, #116]	; (a1d4 <bt_id_del+0x160>)
    a15e:	2100      	movs	r1, #0
}
    a160:	b009      	add	sp, #36	; 0x24
    a162:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    a166:	f000 bb43 	b.w	a7f0 <bt_le_ext_adv_foreach>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    a16a:	2107      	movs	r1, #7
    a16c:	f242 0028 	movw	r0, #8232	; 0x2028
    a170:	f7fe fece 	bl	8f10 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    a174:	f104 0901 	add.w	r9, r4, #1
	if (!buf) {
    a178:	4607      	mov	r7, r0
    a17a:	b940      	cbnz	r0, a18e <bt_id_del+0x11a>
		BT_ERR("Failed to remove IRK from controller");
    a17c:	4b16      	ldr	r3, [pc, #88]	; (a1d8 <bt_id_del+0x164>)
    a17e:	9306      	str	r3, [sp, #24]
    a180:	2302      	movs	r3, #2
    a182:	9301      	str	r3, [sp, #4]
    a184:	9305      	str	r3, [sp, #20]
    a186:	aa05      	add	r2, sp, #20
    a188:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a18c:	e7c4      	b.n	a118 <bt_id_del+0xa4>
	return net_buf_simple_add(&buf->b, len);
    a18e:	2107      	movs	r1, #7
    a190:	3008      	adds	r0, #8
    a192:	f022 fc9a 	bl	2caca <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    a196:	4649      	mov	r1, r9
    a198:	f020 f8e4 	bl	2a364 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    a19c:	4632      	mov	r2, r6
    a19e:	4639      	mov	r1, r7
    a1a0:	f242 0028 	movw	r0, #8232	; 0x2028
    a1a4:	f7ff f81c 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    a1a8:	2800      	cmp	r0, #0
    a1aa:	d1e7      	bne.n	a17c <bt_id_del+0x108>
	bt_dev.le.rl_entries--;
    a1ac:	f895 3119 	ldrb.w	r3, [r5, #281]	; 0x119
    a1b0:	3b01      	subs	r3, #1
    a1b2:	f885 3119 	strb.w	r3, [r5, #281]	; 0x119
	keys->state &= ~BT_KEYS_ID_ADDED;
    a1b6:	7a23      	ldrb	r3, [r4, #8]
    a1b8:	f023 0304 	bic.w	r3, r3, #4
    a1bc:	7223      	strb	r3, [r4, #8]
    a1be:	e7c1      	b.n	a144 <bt_id_del+0xd0>
    a1c0:	20000000 	.word	0x20000000
    a1c4:	0002a429 	.word	0x0002a429
    a1c8:	00032642 	.word	0x00032642
    a1cc:	0002f4e4 	.word	0x0002f4e4
    a1d0:	0002a3cd 	.word	0x0002a3cd
    a1d4:	0002a331 	.word	0x0002a331
    a1d8:	0003266f 	.word	0x0003266f

0000a1dc <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    a1dc:	b570      	push	{r4, r5, r6, lr}
    a1de:	460c      	mov	r4, r1
    a1e0:	b08a      	sub	sp, #40	; 0x28
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a1e2:	4605      	mov	r5, r0
    a1e4:	b918      	cbnz	r0, a1ee <bt_id_create+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    a1e6:	b34c      	cbz	r4, a23c <bt_id_create+0x60>
		return -EINVAL;
    a1e8:	f06f 0015 	mvn.w	r0, #21
    a1ec:	e024      	b.n	a238 <bt_id_create+0x5c>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a1ee:	2300      	movs	r3, #0
    a1f0:	2207      	movs	r2, #7
    a1f2:	a902      	add	r1, sp, #8
    a1f4:	9302      	str	r3, [sp, #8]
    a1f6:	f8cd 300b 	str.w	r3, [sp, #11]
    a1fa:	f024 f9a4 	bl	2e546 <memcmp>
    a1fe:	2800      	cmp	r0, #0
    a200:	d0f1      	beq.n	a1e6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a202:	782b      	ldrb	r3, [r5, #0]
    a204:	2b01      	cmp	r3, #1
    a206:	d104      	bne.n	a212 <bt_id_create+0x36>
    a208:	79ab      	ldrb	r3, [r5, #6]
    a20a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a20e:	2bc0      	cmp	r3, #192	; 0xc0
    a210:	d00b      	beq.n	a22a <bt_id_create+0x4e>
			BT_ERR("Only static random identity address supported");
    a212:	4b1c      	ldr	r3, [pc, #112]	; (a284 <bt_id_create+0xa8>)
    a214:	9308      	str	r3, [sp, #32]
    a216:	481c      	ldr	r0, [pc, #112]	; (a288 <bt_id_create+0xac>)
    a218:	2302      	movs	r3, #2
    a21a:	aa07      	add	r2, sp, #28
    a21c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a220:	9301      	str	r3, [sp, #4]
    a222:	9307      	str	r3, [sp, #28]
    a224:	f020 f8db 	bl	2a3de <z_log_msg2_static_create.constprop.0>
			return -EINVAL;
    a228:	e7de      	b.n	a1e8 <bt_id_create+0xc>
		if (id_find(addr) >= 0) {
    a22a:	4628      	mov	r0, r5
    a22c:	f7ff fda0 	bl	9d70 <id_find>
    a230:	2800      	cmp	r0, #0
    a232:	dbd8      	blt.n	a1e6 <bt_id_create+0xa>
			return -EALREADY;
    a234:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
    a238:	b00a      	add	sp, #40	; 0x28
    a23a:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a23c:	4e13      	ldr	r6, [pc, #76]	; (a28c <bt_id_create+0xb0>)
    a23e:	79f3      	ldrb	r3, [r6, #7]
    a240:	2b01      	cmp	r3, #1
    a242:	d01c      	beq.n	a27e <bt_id_create+0xa2>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a244:	f106 00cc 	add.w	r0, r6, #204	; 0xcc
    a248:	f020 f86c 	bl	2a324 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a24c:	07c3      	lsls	r3, r0, #31
    a24e:	d40b      	bmi.n	a268 <bt_id_create+0x8c>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    a250:	2d00      	cmp	r5, #0
    a252:	d0c9      	beq.n	a1e8 <bt_id_create+0xc>
    a254:	2207      	movs	r2, #7
    a256:	a904      	add	r1, sp, #16
    a258:	4628      	mov	r0, r5
    a25a:	9404      	str	r4, [sp, #16]
    a25c:	f8cd 4013 	str.w	r4, [sp, #19]
    a260:	f024 f971 	bl	2e546 <memcmp>
    a264:	2800      	cmp	r0, #0
    a266:	d0bf      	beq.n	a1e8 <bt_id_create+0xc>
	new_id = bt_dev.id_count++;
    a268:	79f4      	ldrb	r4, [r6, #7]
	err = id_create(new_id, addr, irk);
    a26a:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    a26c:	1c63      	adds	r3, r4, #1
	err = id_create(new_id, addr, irk);
    a26e:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    a270:	71f3      	strb	r3, [r6, #7]
	err = id_create(new_id, addr, irk);
    a272:	f7ff fe8d 	bl	9f90 <id_create.constprop.0>
	new_id = bt_dev.id_count++;
    a276:	2800      	cmp	r0, #0
    a278:	bf08      	it	eq
    a27a:	4620      	moveq	r0, r4
    a27c:	e7dc      	b.n	a238 <bt_id_create+0x5c>
		return -ENOMEM;
    a27e:	f06f 000b 	mvn.w	r0, #11
    a282:	e7d9      	b.n	a238 <bt_id_create+0x5c>
    a284:	00032694 	.word	0x00032694
    a288:	0002f4e4 	.word	0x0002f4e4
    a28c:	20000000 	.word	0x20000000

0000a290 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    a290:	b570      	push	{r4, r5, r6, lr}
    a292:	b08a      	sub	sp, #40	; 0x28
    a294:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a296:	aa01      	add	r2, sp, #4
    a298:	2100      	movs	r1, #0
    a29a:	f241 0009 	movw	r0, #4105	; 0x1009
    a29e:	f7fe ff9f 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    a2a2:	4604      	mov	r4, r0
    a2a4:	b168      	cbz	r0, a2c2 <bt_id_read_public_addr+0x32>
		BT_WARN("Failed to read public address");
    a2a6:	4b1e      	ldr	r3, [pc, #120]	; (a320 <bt_id_read_public_addr+0x90>)
    a2a8:	9308      	str	r3, [sp, #32]
    a2aa:	481e      	ldr	r0, [pc, #120]	; (a324 <bt_id_read_public_addr+0x94>)
    a2ac:	2302      	movs	r3, #2
    a2ae:	aa07      	add	r2, sp, #28
    a2b0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a2b4:	9302      	str	r3, [sp, #8]
    a2b6:	9307      	str	r3, [sp, #28]
    a2b8:	f020 f891 	bl	2a3de <z_log_msg2_static_create.constprop.0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    a2bc:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    a2be:	b00a      	add	sp, #40	; 0x28
    a2c0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a2c2:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a2c4:	689d      	ldr	r5, [r3, #8]
    a2c6:	9002      	str	r0, [sp, #8]
    a2c8:	3501      	adds	r5, #1
    a2ca:	f8ad 000c 	strh.w	r0, [sp, #12]
	return memcmp(a, b, sizeof(*a));
    a2ce:	2206      	movs	r2, #6
    a2d0:	a902      	add	r1, sp, #8
    a2d2:	4628      	mov	r0, r5
    a2d4:	f024 f937 	bl	2e546 <memcmp>
    a2d8:	b918      	cbnz	r0, a2e2 <bt_id_read_public_addr+0x52>
		net_buf_unref(rsp);
    a2da:	9801      	ldr	r0, [sp, #4]
    a2dc:	f016 fba8 	bl	20a30 <net_buf_unref>
    a2e0:	e7ec      	b.n	a2bc <bt_id_read_public_addr+0x2c>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a2e2:	23ff      	movs	r3, #255	; 0xff
    a2e4:	2206      	movs	r2, #6
    a2e6:	a904      	add	r1, sp, #16
    a2e8:	4628      	mov	r0, r5
    a2ea:	f88d 3010 	strb.w	r3, [sp, #16]
    a2ee:	f88d 3011 	strb.w	r3, [sp, #17]
    a2f2:	f88d 3012 	strb.w	r3, [sp, #18]
    a2f6:	f88d 3013 	strb.w	r3, [sp, #19]
    a2fa:	f88d 3014 	strb.w	r3, [sp, #20]
    a2fe:	f88d 3015 	strb.w	r3, [sp, #21]
    a302:	f024 f920 	bl	2e546 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a306:	2800      	cmp	r0, #0
    a308:	d0e7      	beq.n	a2da <bt_id_read_public_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a30a:	4629      	mov	r1, r5
    a30c:	1c70      	adds	r0, r6, #1
    a30e:	f020 f824 	bl	2a35a <bt_addr_copy>
	net_buf_unref(rsp);
    a312:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a314:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    a316:	f016 fb8b 	bl	20a30 <net_buf_unref>
	return 1U;
    a31a:	2001      	movs	r0, #1
    a31c:	e7cf      	b.n	a2be <bt_id_read_public_addr+0x2e>
    a31e:	bf00      	nop
    a320:	000326c2 	.word	0x000326c2
    a324:	0002f4e4 	.word	0x0002f4e4

0000a328 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
    a328:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    a32a:	4668      	mov	r0, sp
    a32c:	f7ff ffb0 	bl	a290 <bt_id_read_public_addr>
    a330:	4b04      	ldr	r3, [pc, #16]	; (a344 <bt_setup_public_id_addr+0x1c>)
    a332:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    a334:	b118      	cbz	r0, a33e <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
    a336:	4669      	mov	r1, sp
    a338:	2000      	movs	r0, #0
    a33a:	f7ff fe29 	bl	9f90 <id_create.constprop.0>
}
    a33e:	b003      	add	sp, #12
    a340:	f85d fb04 	ldr.w	pc, [sp], #4
    a344:	20000000 	.word	0x20000000

0000a348 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    a348:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a34a:	4b25      	ldr	r3, [pc, #148]	; (a3e0 <bt_read_static_addr+0x98>)
    a34c:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
    a350:	f014 0401 	ands.w	r4, r4, #1
{
    a354:	b089      	sub	sp, #36	; 0x24
    a356:	4605      	mov	r5, r0
    a358:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a35a:	d10b      	bne.n	a374 <bt_read_static_addr+0x2c>
		BT_WARN("Read Static Addresses command not available");
    a35c:	4b21      	ldr	r3, [pc, #132]	; (a3e4 <bt_read_static_addr+0x9c>)
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    a35e:	9306      	str	r3, [sp, #24]
    a360:	4821      	ldr	r0, [pc, #132]	; (a3e8 <bt_read_static_addr+0xa0>)
    a362:	2302      	movs	r3, #2
    a364:	aa05      	add	r2, sp, #20
    a366:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    a36a:	9301      	str	r3, [sp, #4]
    a36c:	9305      	str	r3, [sp, #20]
    a36e:	f020 f836 	bl	2a3de <z_log_msg2_static_create.constprop.0>
    a372:	e013      	b.n	a39c <bt_read_static_addr+0x54>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a374:	466a      	mov	r2, sp
    a376:	2100      	movs	r1, #0
    a378:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a37c:	f7fe ff30 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    a380:	4603      	mov	r3, r0
    a382:	b170      	cbz	r0, a3a2 <bt_read_static_addr+0x5a>
		BT_WARN("Failed to read static addresses");
    a384:	4b19      	ldr	r3, [pc, #100]	; (a3ec <bt_read_static_addr+0xa4>)
    a386:	9306      	str	r3, [sp, #24]
    a388:	4817      	ldr	r0, [pc, #92]	; (a3e8 <bt_read_static_addr+0xa0>)
    a38a:	2302      	movs	r3, #2
    a38c:	aa05      	add	r2, sp, #20
    a38e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return 0;
    a392:	2400      	movs	r4, #0
		BT_WARN("Failed to read static addresses");
    a394:	9301      	str	r3, [sp, #4]
    a396:	9305      	str	r3, [sp, #20]
    a398:	f020 f821 	bl	2a3de <z_log_msg2_static_create.constprop.0>
	}

	return cnt;
}
    a39c:	4620      	mov	r0, r4
    a39e:	b009      	add	sp, #36	; 0x24
    a3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    a3a2:	9800      	ldr	r0, [sp, #0]
    a3a4:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
    a3a6:	7854      	ldrb	r4, [r2, #1]
    a3a8:	f04f 0c16 	mov.w	ip, #22
    a3ac:	42b4      	cmp	r4, r6
    a3ae:	bf28      	it	cs
    a3b0:	4634      	movcs	r4, r6
    a3b2:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
    a3b6:	429c      	cmp	r4, r3
    a3b8:	dc05      	bgt.n	a3c6 <bt_read_static_addr+0x7e>
	net_buf_unref(rsp);
    a3ba:	f016 fb39 	bl	20a30 <net_buf_unref>
	if (!cnt) {
    a3be:	2c00      	cmp	r4, #0
    a3c0:	d1ec      	bne.n	a39c <bt_read_static_addr+0x54>
		BT_WARN("No static addresses stored in controller");
    a3c2:	4b0b      	ldr	r3, [pc, #44]	; (a3f0 <bt_read_static_addr+0xa8>)
    a3c4:	e7cb      	b.n	a35e <bt_read_static_addr+0x16>
    a3c6:	1c96      	adds	r6, r2, #2
    a3c8:	fb0c 5103 	mla	r1, ip, r3, r5
    a3cc:	f856 eb04 	ldr.w	lr, [r6], #4
    a3d0:	f841 eb04 	str.w	lr, [r1], #4
    a3d4:	42be      	cmp	r6, r7
    a3d6:	d1f9      	bne.n	a3cc <bt_read_static_addr+0x84>
    a3d8:	883e      	ldrh	r6, [r7, #0]
    a3da:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
    a3dc:	3301      	adds	r3, #1
    a3de:	e7ea      	b.n	a3b6 <bt_read_static_addr+0x6e>
    a3e0:	20000000 	.word	0x20000000
    a3e4:	000326e0 	.word	0x000326e0
    a3e8:	0002f4e4 	.word	0x0002f4e4
    a3ec:	0003270c 	.word	0x0003270c
    a3f0:	0003272c 	.word	0x0003272c

0000a3f4 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    a3f4:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    a3f6:	4d14      	ldr	r5, [pc, #80]	; (a448 <bt_setup_random_id_addr+0x54>)
    a3f8:	79ec      	ldrb	r4, [r5, #7]
{
    a3fa:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
    a3fc:	b9ec      	cbnz	r4, a43a <bt_setup_random_id_addr+0x46>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a3fe:	2101      	movs	r1, #1
    a400:	a802      	add	r0, sp, #8
    a402:	f7ff ffa1 	bl	a348 <bt_read_static_addr>
    a406:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    a408:	b1b8      	cbz	r0, a43a <bt_setup_random_id_addr+0x46>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a40a:	2616      	movs	r6, #22
    a40c:	ab02      	add	r3, sp, #8
    a40e:	b2e2      	uxtb	r2, r4
    a410:	fb06 3102 	mla	r1, r6, r2, r3
    a414:	f10d 0001 	add.w	r0, sp, #1
    a418:	f01f ff9f 	bl	2a35a <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    a41c:	2301      	movs	r3, #1

				err = id_create(i, &addr, irk);
    a41e:	4669      	mov	r1, sp
    a420:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
    a422:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
    a426:	f7ff fdb3 	bl	9f90 <id_create.constprop.0>
				if (err) {
    a42a:	b920      	cbnz	r0, a436 <bt_setup_random_id_addr+0x42>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a42c:	79ea      	ldrb	r2, [r5, #7]
    a42e:	3401      	adds	r4, #1
    a430:	b2e3      	uxtb	r3, r4
    a432:	429a      	cmp	r2, r3
    a434:	d8ea      	bhi.n	a40c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    a436:	b008      	add	sp, #32
    a438:	bd70      	pop	{r4, r5, r6, pc}
	return bt_id_create(NULL, NULL);
    a43a:	2100      	movs	r1, #0
    a43c:	4608      	mov	r0, r1
}
    a43e:	b008      	add	sp, #32
    a440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_id_create(NULL, NULL);
    a444:	f7ff beca 	b.w	a1dc <bt_id_create>
    a448:	20000000 	.word	0x20000000

0000a44c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
    a44c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
    a44e:	4c07      	ldr	r4, [pc, #28]	; (a46c <bt_id_set_create_conn_own_addr+0x20>)
    a450:	7823      	ldrb	r3, [r4, #0]
    a452:	2b01      	cmp	r3, #1
{
    a454:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
    a456:	d003      	beq.n	a460 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
    a458:	7823      	ldrb	r3, [r4, #0]
    a45a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
    a45c:	2000      	movs	r0, #0
}
    a45e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
    a460:	1c60      	adds	r0, r4, #1
    a462:	f7ff fd6b 	bl	9f3c <set_random_address>
			if (err) {
    a466:	2800      	cmp	r0, #0
    a468:	d0f6      	beq.n	a458 <bt_id_set_create_conn_own_addr+0xc>
    a46a:	e7f8      	b.n	a45e <bt_id_set_create_conn_own_addr+0x12>
    a46c:	20000000 	.word	0x20000000

0000a470 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
    a470:	b570      	push	{r4, r5, r6, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
    a472:	4b11      	ldr	r3, [pc, #68]	; (a4b8 <bt_id_set_scan_own_addr+0x48>)
    a474:	781b      	ldrb	r3, [r3, #0]
    a476:	700b      	strb	r3, [r1, #0]
{
    a478:	b088      	sub	sp, #32
    a47a:	4606      	mov	r6, r0
    a47c:	460d      	mov	r5, r1
		/* Use NRPA unless identity has been explicitly requested
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
    a47e:	f01f ffc9 	bl	2a414 <is_adv_using_rand_addr>
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
    a482:	b9a8      	cbnz	r0, a4b0 <bt_id_set_scan_own_addr+0x40>
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
    a484:	f01f fff4 	bl	2a470 <bt_id_set_private_addr>
			if (err) {
    a488:	4604      	mov	r4, r0
    a48a:	b178      	cbz	r0, a4ac <bt_id_set_scan_own_addr+0x3c>
				if (active_scan || !is_adv_using_rand_addr()) {
    a48c:	b98e      	cbnz	r6, a4b2 <bt_id_set_scan_own_addr+0x42>
    a48e:	f01f ffc1 	bl	2a414 <is_adv_using_rand_addr>
    a492:	b170      	cbz	r0, a4b2 <bt_id_set_scan_own_addr+0x42>
					return err;
				}

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
    a494:	4b09      	ldr	r3, [pc, #36]	; (a4bc <bt_id_set_scan_own_addr+0x4c>)
    a496:	480a      	ldr	r0, [pc, #40]	; (a4c0 <bt_id_set_scan_own_addr+0x50>)
    a498:	e9cd 3406 	strd	r3, r4, [sp, #24]
    a49c:	aa05      	add	r2, sp, #20
    a49e:	2303      	movs	r3, #3
    a4a0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    a4a4:	9301      	str	r3, [sp, #4]
    a4a6:	9305      	str	r3, [sp, #20]
    a4a8:	f01f ff99 	bl	2a3de <z_log_msg2_static_create.constprop.0>
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
    a4ac:	2301      	movs	r3, #1
    a4ae:	702b      	strb	r3, [r5, #0]
				return err;
			}
		}
	}

	return 0;
    a4b0:	2400      	movs	r4, #0
}
    a4b2:	4620      	mov	r0, r4
    a4b4:	b008      	add	sp, #32
    a4b6:	bd70      	pop	{r4, r5, r6, pc}
    a4b8:	20000000 	.word	0x20000000
    a4bc:	00032755 	.word	0x00032755
    a4c0:	0002f4e4 	.word	0x0002f4e4

0000a4c4 <bt_id_set_adv_own_addr>:
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    a4c8:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    a4cc:	7806      	ldrb	r6, [r0, #0]
{
    a4ce:	4680      	mov	r8, r0
    a4d0:	460d      	mov	r5, r1
    a4d2:	4691      	mov	r9, r2
    a4d4:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    a4d6:	d02b      	beq.n	a530 <bt_id_set_adv_own_addr+0x6c>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    a4d8:	f8df 80b4 	ldr.w	r8, [pc, #180]	; a590 <bt_id_set_adv_own_addr+0xcc>
    a4dc:	b12a      	cbz	r2, a4ea <bt_id_set_adv_own_addr+0x26>
    a4de:	0688      	lsls	r0, r1, #26
    a4e0:	d503      	bpl.n	a4ea <bt_id_set_adv_own_addr+0x26>
    a4e2:	f898 30d0 	ldrb.w	r3, [r8, #208]	; 0xd0
    a4e6:	0659      	lsls	r1, r3, #25
    a4e8:	d54f      	bpl.n	a58a <bt_id_set_adv_own_addr+0xc6>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a4ea:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    a4ee:	ea4f 0ac6 	mov.w	sl, r6, lsl #3
    a4f2:	f818 3003 	ldrb.w	r3, [r8, r3]
    a4f6:	2b01      	cmp	r3, #1
    a4f8:	d009      	beq.n	a50e <bt_id_set_adv_own_addr+0x4a>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    a4fa:	ebaa 0606 	sub.w	r6, sl, r6
    a4fe:	f818 3006 	ldrb.w	r3, [r8, r6]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    a502:	f1b9 0f00 	cmp.w	r9, #0
    a506:	d10e      	bne.n	a526 <bt_id_set_adv_own_addr+0x62>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    a508:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    a50a:	2400      	movs	r4, #0
    a50c:	e008      	b.n	a520 <bt_id_set_adv_own_addr+0x5c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a50e:	2007      	movs	r0, #7
    a510:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    a514:	4440      	add	r0, r8
    a516:	f7ff fd11 	bl	9f3c <set_random_address>
				if (err) {
    a51a:	4604      	mov	r4, r0
    a51c:	2800      	cmp	r0, #0
    a51e:	d0ec      	beq.n	a4fa <bt_id_set_adv_own_addr+0x36>
}
    a520:	4620      	mov	r0, r4
    a522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    a526:	06aa      	lsls	r2, r5, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    a528:	bf48      	it	mi
    a52a:	f043 0302 	orrmi.w	r3, r3, #2
    a52e:	e7eb      	b.n	a508 <bt_id_set_adv_own_addr+0x44>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    a530:	f011 0504 	ands.w	r5, r1, #4
    a534:	d014      	beq.n	a560 <bt_id_set_adv_own_addr+0x9c>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    a536:	f8df 8058 	ldr.w	r8, [pc, #88]	; a590 <bt_id_set_adv_own_addr+0xcc>
    a53a:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    a53e:	00f5      	lsls	r5, r6, #3
    a540:	f818 3003 	ldrb.w	r3, [r8, r3]
    a544:	2b01      	cmp	r3, #1
    a546:	d106      	bne.n	a556 <bt_id_set_adv_own_addr+0x92>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    a548:	2007      	movs	r0, #7
    a54a:	fb10 3006 	smlabb	r0, r0, r6, r3
		return set_random_address(addr);
    a54e:	4440      	add	r0, r8
    a550:	f7ff fcf4 	bl	9f3c <set_random_address>
    a554:	4604      	mov	r4, r0
			*own_addr_type = id_addr->type;
    a556:	1bad      	subs	r5, r5, r6
    a558:	f818 3005 	ldrb.w	r3, [r8, r5]
    a55c:	703b      	strb	r3, [r7, #0]
    a55e:	e7df      	b.n	a520 <bt_id_set_adv_own_addr+0x5c>
    a560:	480c      	ldr	r0, [pc, #48]	; (a594 <bt_id_set_adv_own_addr+0xd0>)
    a562:	f01f fedf 	bl	2a324 <atomic_get>
			if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a566:	0683      	lsls	r3, r0, #26
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a568:	f3c0 1640 	ubfx	r6, r0, #5, #1
    a56c:	d502      	bpl.n	a574 <bt_id_set_adv_own_addr+0xb0>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    a56e:	4628      	mov	r0, r5
    a570:	f020 f8c4 	bl	2a6fc <bt_le_scan_set_enable>
			err = bt_id_set_adv_private_addr(adv);
    a574:	4640      	mov	r0, r8
    a576:	f01f ff8d 	bl	2a494 <bt_id_set_adv_private_addr>
    a57a:	4604      	mov	r4, r0
			*own_addr_type = BT_ADDR_LE_RANDOM;
    a57c:	2001      	movs	r0, #1
    a57e:	7038      	strb	r0, [r7, #0]
			if (scan_enabled) {
    a580:	2e00      	cmp	r6, #0
    a582:	d0cd      	beq.n	a520 <bt_id_set_adv_own_addr+0x5c>
				bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    a584:	f020 f8ba 	bl	2a6fc <bt_le_scan_set_enable>
		if (err) {
    a588:	e7ca      	b.n	a520 <bt_id_set_adv_own_addr+0x5c>
			return -ENOTSUP;
    a58a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    a58e:	e7c7      	b.n	a520 <bt_id_set_adv_own_addr+0x5c>
    a590:	20000000 	.word	0x20000000
    a594:	200000cc 	.word	0x200000cc

0000a598 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    a598:	b530      	push	{r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a59a:	4d14      	ldr	r5, [pc, #80]	; (a5ec <bt_id_init+0x54>)
    a59c:	79eb      	ldrb	r3, [r5, #7]
{
    a59e:	b089      	sub	sp, #36	; 0x24
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a5a0:	b11b      	cbz	r3, a5aa <bt_id_init+0x12>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    a5a2:	2400      	movs	r4, #0
}
    a5a4:	4620      	mov	r0, r4
    a5a6:	b009      	add	sp, #36	; 0x24
    a5a8:	bd30      	pop	{r4, r5, pc}
		err = bt_setup_public_id_addr();
    a5aa:	f7ff febd 	bl	a328 <bt_setup_public_id_addr>
		if (err) {
    a5ae:	4604      	mov	r4, r0
    a5b0:	b158      	cbz	r0, a5ca <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
    a5b2:	4b0f      	ldr	r3, [pc, #60]	; (a5f0 <bt_id_init+0x58>)
			BT_ERR("Unable to set random address");
    a5b4:	9306      	str	r3, [sp, #24]
    a5b6:	480f      	ldr	r0, [pc, #60]	; (a5f4 <bt_id_init+0x5c>)
    a5b8:	2302      	movs	r3, #2
    a5ba:	aa05      	add	r2, sp, #20
    a5bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a5c0:	9301      	str	r3, [sp, #4]
    a5c2:	9305      	str	r3, [sp, #20]
    a5c4:	f01f ff0b 	bl	2a3de <z_log_msg2_static_create.constprop.0>
			return err;
    a5c8:	e7ec      	b.n	a5a4 <bt_id_init+0xc>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    a5ca:	79eb      	ldrb	r3, [r5, #7]
    a5cc:	2b00      	cmp	r3, #0
    a5ce:	d1e8      	bne.n	a5a2 <bt_id_init+0xa>
		err = bt_setup_random_id_addr();
    a5d0:	f7ff ff10 	bl	a3f4 <bt_setup_random_id_addr>
		if (err) {
    a5d4:	4604      	mov	r4, r0
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d1eb      	bne.n	a5b2 <bt_id_init+0x1a>
		err = set_random_address(&bt_dev.id_addr[0].a);
    a5da:	1c68      	adds	r0, r5, #1
    a5dc:	f7ff fcae 	bl	9f3c <set_random_address>
		if (err) {
    a5e0:	4604      	mov	r4, r0
    a5e2:	2800      	cmp	r0, #0
    a5e4:	d0de      	beq.n	a5a4 <bt_id_init+0xc>
			BT_ERR("Unable to set random address");
    a5e6:	4b04      	ldr	r3, [pc, #16]	; (a5f8 <bt_id_init+0x60>)
    a5e8:	e7e4      	b.n	a5b4 <bt_id_init+0x1c>
    a5ea:	bf00      	nop
    a5ec:	20000000 	.word	0x20000000
    a5f0:	0003278b 	.word	0x0003278b
    a5f4:	0002f4e4 	.word	0x0002f4e4
    a5f8:	000327aa 	.word	0x000327aa

0000a5fc <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    a5fc:	6843      	ldr	r3, [r0, #4]
{
    a5fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a600:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    a602:	0558      	lsls	r0, r3, #21
    a604:	d502      	bpl.n	a60c <valid_adv_param+0x10>
		return false;
    a606:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    a608:	b003      	add	sp, #12
    a60a:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a60c:	6922      	ldr	r2, [r4, #16]
    a60e:	b10a      	cbz	r2, a614 <valid_adv_param+0x18>
    a610:	07d9      	lsls	r1, r3, #31
    a612:	d5f8      	bpl.n	a606 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    a614:	4d1a      	ldr	r5, [pc, #104]	; (a680 <valid_adv_param+0x84>)
    a616:	7820      	ldrb	r0, [r4, #0]
    a618:	79eb      	ldrb	r3, [r5, #7]
    a61a:	4283      	cmp	r3, r0
    a61c:	d9f3      	bls.n	a606 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    a61e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    a622:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    a624:	2207      	movs	r2, #7
    a626:	4669      	mov	r1, sp
    a628:	4428      	add	r0, r5
    a62a:	9300      	str	r3, [sp, #0]
    a62c:	f8cd 3003 	str.w	r3, [sp, #3]
    a630:	f023 ff89 	bl	2e546 <memcmp>
	if (param->id >= bt_dev.id_count ||
    a634:	2800      	cmp	r0, #0
    a636:	d0e6      	beq.n	a606 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a638:	6860      	ldr	r0, [r4, #4]
    a63a:	07c2      	lsls	r2, r0, #31
    a63c:	d406      	bmi.n	a64c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    a63e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    a642:	2b08      	cmp	r3, #8
    a644:	d802      	bhi.n	a64c <valid_adv_param+0x50>
    a646:	68a3      	ldr	r3, [r4, #8]
    a648:	2b9f      	cmp	r3, #159	; 0x9f
    a64a:	d9dc      	bls.n	a606 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    a64c:	f010 0f30 	tst.w	r0, #48	; 0x30
    a650:	d002      	beq.n	a658 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    a652:	6923      	ldr	r3, [r4, #16]
    a654:	2b00      	cmp	r3, #0
    a656:	d0d6      	beq.n	a606 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    a658:	06c3      	lsls	r3, r0, #27
    a65a:	d401      	bmi.n	a660 <valid_adv_param+0x64>
    a65c:	6923      	ldr	r3, [r4, #16]
    a65e:	b943      	cbnz	r3, a672 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    a660:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    a664:	429a      	cmp	r2, r3
    a666:	d8ce      	bhi.n	a606 <valid_adv_param+0xa>
    a668:	2a1f      	cmp	r2, #31
    a66a:	d9cc      	bls.n	a606 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    a66c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    a670:	d8c9      	bhi.n	a606 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    a672:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    a676:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    a67a:	bf18      	it	ne
    a67c:	2001      	movne	r0, #1
    a67e:	e7c3      	b.n	a608 <valid_adv_param+0xc>
    a680:	20000000 	.word	0x20000000

0000a684 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    a684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a688:	460c      	mov	r4, r1
    a68a:	b08b      	sub	sp, #44	; 0x2c
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    a68c:	2120      	movs	r1, #32
{
    a68e:	4682      	mov	sl, r0
    a690:	4616      	mov	r6, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    a692:	f7fe fc3d 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    a696:	4605      	mov	r5, r0
    a698:	2800      	cmp	r0, #0
    a69a:	d05e      	beq.n	a75a <hci_set_ad+0xd6>
    a69c:	2120      	movs	r1, #32
    a69e:	3008      	adds	r0, #8
    a6a0:	f022 fa13 	bl	2caca <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
    a6a4:	2220      	movs	r2, #32
    a6a6:	2100      	movs	r1, #0
    a6a8:	4681      	mov	r9, r0
    a6aa:	f023 ff7d 	bl	2e5a8 <memset>
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));

	err = set_data_add_complete(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    a6ae:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
    a6b2:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    a6b6:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    a6b8:	2600      	movs	r6, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    a6ba:	f8d4 8000 	ldr.w	r8, [r4]
    a6be:	2300      	movs	r3, #0
    a6c0:	6862      	ldr	r2, [r4, #4]
    a6c2:	4293      	cmp	r3, r2
    a6c4:	d30d      	bcc.n	a6e2 <hci_set_ad+0x5e>
	for (size_t i = 0; i < ad_len; i++) {
    a6c6:	9b00      	ldr	r3, [sp, #0]
    a6c8:	3408      	adds	r4, #8
    a6ca:	42a3      	cmp	r3, r4
    a6cc:	d1f5      	bne.n	a6ba <hci_set_ad+0x36>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    a6ce:	2200      	movs	r2, #0
    a6d0:	4629      	mov	r1, r5
    a6d2:	4650      	mov	r0, sl
	*data_len = set_data_len;
    a6d4:	f889 6000 	strb.w	r6, [r9]
}
    a6d8:	b00b      	add	sp, #44	; 0x2c
    a6da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    a6de:	f7fe bd7f 	b.w	91e0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    a6e2:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    a6e6:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    a6ea:	1cb0      	adds	r0, r6, #2
    a6ec:	1811      	adds	r1, r2, r0
    a6ee:	291f      	cmp	r1, #31
    a6f0:	d91c      	bls.n	a72c <hci_set_ad+0xa8>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    a6f2:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    a6f6:	f1c0 021f 	rsb	r2, r0, #31
				if (!(type == BT_DATA_NAME_COMPLETE &&
    a6fa:	d101      	bne.n	a700 <hci_set_ad+0x7c>
    a6fc:	2a00      	cmp	r2, #0
    a6fe:	dc13      	bgt.n	a728 <hci_set_ad+0xa4>
					BT_ERR("Too big advertising data");
    a700:	4b17      	ldr	r3, [pc, #92]	; (a760 <hci_set_ad+0xdc>)
    a702:	9308      	str	r3, [sp, #32]
    a704:	2302      	movs	r3, #2
    a706:	9303      	str	r3, [sp, #12]
    a708:	9307      	str	r3, [sp, #28]
    a70a:	4816      	ldr	r0, [pc, #88]	; (a764 <hci_set_ad+0xe0>)
    a70c:	2300      	movs	r3, #0
    a70e:	aa07      	add	r2, sp, #28
    a710:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a714:	f01e f9cc 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		net_buf_unref(buf);
    a718:	4628      	mov	r0, r5
    a71a:	f016 f989 	bl	20a30 <net_buf_unref>
					return -EINVAL;
    a71e:	f06f 0015 	mvn.w	r0, #21
}
    a722:	b00b      	add	sp, #44	; 0x2c
    a724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    a728:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    a72c:	b2d7      	uxtb	r7, r2
    a72e:	1c79      	adds	r1, r7, #1
    a730:	f80b 1006 	strb.w	r1, [fp, r6]
    a734:	1c71      	adds	r1, r6, #1
			set_data[set_data_len++] = type;
    a736:	b2c9      	uxtb	r1, r1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    a738:	fa5b f080 	uxtab	r0, fp, r0
    a73c:	f80b c001 	strb.w	ip, [fp, r1]
    a740:	f8d8 1004 	ldr.w	r1, [r8, #4]
    a744:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    a746:	3702      	adds	r7, #2
    a748:	f023 ff0d 	bl	2e566 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    a74c:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    a74e:	443e      	add	r6, r7
    a750:	b2f6      	uxtb	r6, r6
		for (size_t j = 0; j < ad[i].len; j++) {
    a752:	3301      	adds	r3, #1
    a754:	f108 0808 	add.w	r8, r8, #8
    a758:	e7b2      	b.n	a6c0 <hci_set_ad+0x3c>
		return -ENOBUFS;
    a75a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    a75e:	e7e0      	b.n	a722 <hci_set_ad+0x9e>
    a760:	000327cd 	.word	0x000327cd
    a764:	0002f3d4 	.word	0x0002f3d4

0000a768 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    a768:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    a76a:	4606      	mov	r6, r0
    a76c:	4b1e      	ldr	r3, [pc, #120]	; (a7e8 <le_adv_start_add_conn+0x80>)
    a76e:	f816 2b09 	ldrb.w	r2, [r6], #9
    a772:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
{
    a776:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a778:	2300      	movs	r3, #0
{
    a77a:	4605      	mov	r5, r0
    a77c:	2207      	movs	r2, #7
    a77e:	460f      	mov	r7, r1
    a780:	4630      	mov	r0, r6
    a782:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    a784:	9300      	str	r3, [sp, #0]
    a786:	f8cd 3003 	str.w	r3, [sp, #3]
    a78a:	f023 fedc 	bl	2e546 <memcmp>
    a78e:	782a      	ldrb	r2, [r5, #0]
    a790:	4604      	mov	r4, r0
    a792:	b9a8      	cbnz	r0, a7c0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    a794:	4b15      	ldr	r3, [pc, #84]	; (a7ec <le_adv_start_add_conn+0x84>)
    a796:	6818      	ldr	r0, [r3, #0]
    a798:	8899      	ldrh	r1, [r3, #4]
    a79a:	9002      	str	r0, [sp, #8]
    a79c:	799b      	ldrb	r3, [r3, #6]
    a79e:	f8ad 100c 	strh.w	r1, [sp, #12]
    a7a2:	4610      	mov	r0, r2
    a7a4:	a902      	add	r1, sp, #8
    a7a6:	f88d 300e 	strb.w	r3, [sp, #14]
    a7aa:	f001 f9bd 	bl	bb28 <bt_conn_add_le>
		if (!conn) {
    a7ae:	4605      	mov	r5, r0
    a7b0:	b1b8      	cbz	r0, a7e2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    a7b2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    a7b4:	f000 ff9c 	bl	b6f0 <bt_conn_set_state>
	*out_conn = conn;
    a7b8:	603d      	str	r5, [r7, #0]
	return 0;
}
    a7ba:	4620      	mov	r0, r4
    a7bc:	b005      	add	sp, #20
    a7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    a7c0:	4631      	mov	r1, r6
    a7c2:	4610      	mov	r0, r2
    a7c4:	f001 f9ea 	bl	bb9c <bt_conn_exists_le>
    a7c8:	4604      	mov	r4, r0
    a7ca:	b938      	cbnz	r0, a7dc <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    a7cc:	7828      	ldrb	r0, [r5, #0]
    a7ce:	4631      	mov	r1, r6
    a7d0:	f001 f9aa 	bl	bb28 <bt_conn_add_le>
	if (!conn) {
    a7d4:	4605      	mov	r5, r0
    a7d6:	b120      	cbz	r0, a7e2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    a7d8:	2105      	movs	r1, #5
    a7da:	e7eb      	b.n	a7b4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    a7dc:	f06f 0415 	mvn.w	r4, #21
    a7e0:	e7eb      	b.n	a7ba <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    a7e2:	f06f 040b 	mvn.w	r4, #11
    a7e6:	e7e8      	b.n	a7ba <le_adv_start_add_conn+0x52>
    a7e8:	20000000 	.word	0x20000000
    a7ec:	0002f6ff 	.word	0x0002f6ff

0000a7f0 <bt_le_ext_adv_foreach>:
{
    a7f0:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    a7f2:	4801      	ldr	r0, [pc, #4]	; (a7f8 <bt_le_ext_adv_foreach+0x8>)
    a7f4:	4718      	bx	r3
    a7f6:	bf00      	nop
    a7f8:	20000018 	.word	0x20000018

0000a7fc <bt_le_adv_lookup_legacy>:
}
    a7fc:	4800      	ldr	r0, [pc, #0]	; (a800 <bt_le_adv_lookup_legacy+0x4>)
    a7fe:	4770      	bx	lr
    a800:	20000018 	.word	0x20000018

0000a804 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a808:	b093      	sub	sp, #76	; 0x4c
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable = false;
    a80a:	690f      	ldr	r7, [r1, #16]
{
    a80c:	9305      	str	r3, [sp, #20]
	struct bt_conn *conn = NULL;
    a80e:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable = false;
    a810:	1afc      	subs	r4, r7, r3
{
    a812:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a814:	488e      	ldr	r0, [pc, #568]	; (aa50 <bt_le_adv_start_legacy+0x24c>)
	struct bt_conn *conn = NULL;
    a816:	9306      	str	r3, [sp, #24]
	bool dir_adv = (param->peer != NULL), scannable = false;
    a818:	bf18      	it	ne
    a81a:	2401      	movne	r4, #1
    a81c:	f01f fe74 	bl	2a508 <atomic_get>
	enum adv_name_type name_type;

	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a820:	0780      	lsls	r0, r0, #30
{
    a822:	460d      	mov	r5, r1
    a824:	4693      	mov	fp, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a826:	f140 8108 	bpl.w	aa3a <bt_le_adv_start_legacy+0x236>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a82a:	4608      	mov	r0, r1
    a82c:	f7ff fee6 	bl	a5fc <valid_adv_param>
    a830:	b928      	cbnz	r0, a83e <bt_le_adv_start_legacy+0x3a>
		return -EINVAL;
    a832:	f06f 0415 	mvn.w	r4, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    a836:	4620      	mov	r0, r4
    a838:	b013      	add	sp, #76	; 0x4c
    a83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    a83e:	4628      	mov	r0, r5
    a840:	f7ff fbd8 	bl	9ff4 <bt_id_adv_random_addr_check>
    a844:	4681      	mov	r9, r0
    a846:	2800      	cmp	r0, #0
    a848:	d0f3      	beq.n	a832 <bt_le_adv_start_legacy+0x2e>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a84a:	f106 0810 	add.w	r8, r6, #16
    a84e:	4640      	mov	r0, r8
    a850:	f01f fe5a 	bl	2a508 <atomic_get>
    a854:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    a856:	f3c0 1380 	ubfx	r3, r0, #6, #1
    a85a:	f100 80f1 	bmi.w	aa40 <bt_le_adv_start_legacy+0x23c>
	(void)memset(&set_param, 0, sizeof(set_param));
    a85e:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    a862:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a866:	68ab      	ldr	r3, [r5, #8]
    a868:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a86c:	6868      	ldr	r0, [r5, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a86e:	68eb      	ldr	r3, [r5, #12]
    a870:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = get_adv_channel_map(param->options);
    a874:	f01f fe39 	bl	2a4ea <get_adv_channel_map>
	if (adv->id != param->id) {
    a878:	7832      	ldrb	r2, [r6, #0]
    a87a:	782b      	ldrb	r3, [r5, #0]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a87c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    a880:	429a      	cmp	r2, r3
    a882:	d004      	beq.n	a88e <bt_le_adv_start_legacy+0x8a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    a884:	4872      	ldr	r0, [pc, #456]	; (aa50 <bt_le_adv_start_legacy+0x24c>)
    a886:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    a88a:	f01f fe43 	bl	2a514 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    a88e:	4a71      	ldr	r2, [pc, #452]	; (aa54 <bt_le_adv_start_legacy+0x250>)
	adv->id = param->id;
    a890:	782b      	ldrb	r3, [r5, #0]
    a892:	7033      	strb	r3, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    a894:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    a898:	6869      	ldr	r1, [r5, #4]
    a89a:	4622      	mov	r2, r4
    a89c:	f10d 0325 	add.w	r3, sp, #37	; 0x25
    a8a0:	4630      	mov	r0, r6
    a8a2:	f7ff fe0f 	bl	a4c4 <bt_id_set_adv_own_addr>
	if (err) {
    a8a6:	4604      	mov	r4, r0
    a8a8:	2800      	cmp	r0, #0
    a8aa:	d1c4      	bne.n	a836 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a8ac:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    a8b0:	2f00      	cmp	r7, #0
    a8b2:	d053      	beq.n	a95c <bt_le_adv_start_legacy+0x158>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    a8b4:	6929      	ldr	r1, [r5, #16]
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a8b6:	f01f fe3c 	bl	2a532 <bt_addr_le_copy>
	name_type = get_adv_name_type_param(param);
    a8ba:	4628      	mov	r0, r5
    a8bc:	f01f fece 	bl	2a65c <get_adv_name_type_param>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a8c0:	686b      	ldr	r3, [r5, #4]
    a8c2:	07da      	lsls	r2, r3, #31
	name_type = get_adv_name_type_param(param);
    a8c4:	4682      	mov	sl, r0
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    a8c6:	d551      	bpl.n	a96c <bt_le_adv_start_legacy+0x168>
		if (dir_adv) {
    a8c8:	2f00      	cmp	r7, #0
    a8ca:	d04c      	beq.n	a966 <bt_le_adv_start_legacy+0x162>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    a8cc:	f013 0f10 	tst.w	r3, #16
    a8d0:	bf14      	ite	ne
    a8d2:	2304      	movne	r3, #4
    a8d4:	2301      	moveq	r3, #1
			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    a8d6:	6929      	ldr	r1, [r5, #16]
    a8d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a8dc:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    a8e0:	f01f fe27 	bl	2a532 <bt_addr_le_copy>
	bool dir_adv = (param->peer != NULL), scannable = false;
    a8e4:	f04f 0900 	mov.w	r9, #0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    a8e8:	210f      	movs	r1, #15
    a8ea:	f242 0006 	movw	r0, #8198	; 0x2006
    a8ee:	f7fe fb0f 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    a8f2:	4604      	mov	r4, r0
    a8f4:	2800      	cmp	r0, #0
    a8f6:	f000 80a6 	beq.w	aa46 <bt_le_adv_start_legacy+0x242>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a8fa:	220f      	movs	r2, #15
    a8fc:	a908      	add	r1, sp, #32
    a8fe:	3008      	adds	r0, #8
    a900:	f022 f8e9 	bl	2cad6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    a904:	2200      	movs	r2, #0
    a906:	4621      	mov	r1, r4
    a908:	f242 0006 	movw	r0, #8198	; 0x2006
    a90c:	f7fe fc68 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    a910:	2800      	cmp	r0, #0
    a912:	f040 809b 	bne.w	aa4c <bt_le_adv_start_legacy+0x248>
	if (!dir_adv) {
    a916:	2f00      	cmp	r7, #0
    a918:	d038      	beq.n	a98c <bt_le_adv_start_legacy+0x188>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    a91a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    a91c:	07dc      	lsls	r4, r3, #31
    a91e:	d443      	bmi.n	a9a8 <bt_le_adv_start_legacy+0x1a4>
	return bt_le_adv_set_enable_legacy(adv, enable);
    a920:	2101      	movs	r1, #1
    a922:	4630      	mov	r0, r6
    a924:	f01f feaa 	bl	2a67c <bt_le_adv_set_enable_legacy>
	if (err) {
    a928:	4604      	mov	r4, r0
    a92a:	2800      	cmp	r0, #0
    a92c:	d07e      	beq.n	aa2c <bt_le_adv_start_legacy+0x228>
		BT_ERR("Failed to start advertiser");
    a92e:	4b4a      	ldr	r3, [pc, #296]	; (aa58 <bt_le_adv_start_legacy+0x254>)
    a930:	9310      	str	r3, [sp, #64]	; 0x40
    a932:	2302      	movs	r3, #2
    a934:	9307      	str	r3, [sp, #28]
    a936:	930f      	str	r3, [sp, #60]	; 0x3c
    a938:	4848      	ldr	r0, [pc, #288]	; (aa5c <bt_le_adv_start_legacy+0x258>)
    a93a:	2300      	movs	r3, #0
    a93c:	aa0f      	add	r2, sp, #60	; 0x3c
    a93e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a942:	f01e f8b5 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    a946:	9806      	ldr	r0, [sp, #24]
    a948:	2800      	cmp	r0, #0
    a94a:	f43f af74 	beq.w	a836 <bt_le_adv_start_legacy+0x32>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    a94e:	2100      	movs	r1, #0
    a950:	f000 fece 	bl	b6f0 <bt_conn_set_state>
			bt_conn_unref(conn);
    a954:	9806      	ldr	r0, [sp, #24]
    a956:	f01f ff78 	bl	2a84a <bt_conn_unref>
    a95a:	e76c      	b.n	a836 <bt_le_adv_start_legacy+0x32>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    a95c:	970c      	str	r7, [sp, #48]	; 0x30
    a95e:	a90c      	add	r1, sp, #48	; 0x30
    a960:	f8cd 7033 	str.w	r7, [sp, #51]	; 0x33
    a964:	e7a7      	b.n	a8b6 <bt_le_adv_start_legacy+0xb2>
			set_param.type = BT_HCI_ADV_IND;
    a966:	f88d 7024 	strb.w	r7, [sp, #36]	; 0x24
    a96a:	e7bd      	b.n	a8e8 <bt_le_adv_start_legacy+0xe4>
	} else if ((param->options & BT_LE_ADV_OPT_SCANNABLE) || sd ||
    a96c:	059b      	lsls	r3, r3, #22
    a96e:	d403      	bmi.n	a978 <bt_le_adv_start_legacy+0x174>
    a970:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a972:	b90b      	cbnz	r3, a978 <bt_le_adv_start_legacy+0x174>
    a974:	2802      	cmp	r0, #2
    a976:	d103      	bne.n	a980 <bt_le_adv_start_legacy+0x17c>
		set_param.type = BT_HCI_ADV_SCAN_IND;
    a978:	2302      	movs	r3, #2
    a97a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a97e:	e7b3      	b.n	a8e8 <bt_le_adv_start_legacy+0xe4>
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    a980:	2303      	movs	r3, #3
	bool dir_adv = (param->peer != NULL), scannable = false;
    a982:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
		set_param.type = BT_HCI_ADV_NONCONN_IND;
    a986:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    a98a:	e7ad      	b.n	a8e8 <bt_le_adv_start_legacy+0xe4>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    a98c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    a98e:	9300      	str	r3, [sp, #0]
    a990:	e9cd 9a01 	strd	r9, sl, [sp, #4]
    a994:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a996:	9a05      	ldr	r2, [sp, #20]
    a998:	4659      	mov	r1, fp
    a99a:	4630      	mov	r0, r6
    a99c:	f01f fde7 	bl	2a56e <le_adv_update.constprop.0>
		if (err) {
    a9a0:	4604      	mov	r4, r0
    a9a2:	2800      	cmp	r0, #0
    a9a4:	d0b9      	beq.n	a91a <bt_le_adv_start_legacy+0x116>
    a9a6:	e746      	b.n	a836 <bt_le_adv_start_legacy+0x32>
		err = le_adv_start_add_conn(adv, &conn);
    a9a8:	a906      	add	r1, sp, #24
    a9aa:	4630      	mov	r0, r6
    a9ac:	f7ff fedc 	bl	a768 <le_adv_start_add_conn>
		if (err) {
    a9b0:	4604      	mov	r4, r0
    a9b2:	2800      	cmp	r0, #0
    a9b4:	d0b4      	beq.n	a920 <bt_le_adv_start_legacy+0x11c>
			if (err == -ENOMEM && !dir_adv &&
    a9b6:	f110 0f0c 	cmn.w	r0, #12
    a9ba:	f47f af3c 	bne.w	a836 <bt_le_adv_start_legacy+0x32>
    a9be:	2f00      	cmp	r7, #0
    a9c0:	f47f af39 	bne.w	a836 <bt_le_adv_start_legacy+0x32>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    a9c4:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    a9c6:	0798      	lsls	r0, r3, #30
    a9c8:	f53f af35 	bmi.w	a836 <bt_le_adv_start_legacy+0x32>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    a9cc:	686c      	ldr	r4, [r5, #4]
    a9ce:	f084 0402 	eor.w	r4, r4, #2
    a9d2:	f3c4 0440 	ubfx	r4, r4, #1, #1
    a9d6:	f004 0201 	and.w	r2, r4, #1
    a9da:	210d      	movs	r1, #13
    a9dc:	4640      	mov	r0, r8
    a9de:	f01f fdaf 	bl	2a540 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_AD,
    a9e2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    a9e6:	425a      	negs	r2, r3
    a9e8:	415a      	adcs	r2, r3
    a9ea:	2107      	movs	r1, #7
    a9ec:	4640      	mov	r0, r8
    a9ee:	f01f fda7 	bl	2a540 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME_SD,
    a9f2:	f1aa 0102 	sub.w	r1, sl, #2
    a9f6:	424a      	negs	r2, r1
    a9f8:	414a      	adcs	r2, r1
    a9fa:	4640      	mov	r0, r8
    a9fc:	2108      	movs	r1, #8
    a9fe:	f01f fd9f 	bl	2a540 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    aa02:	686a      	ldr	r2, [r5, #4]
    aa04:	2109      	movs	r1, #9
    aa06:	f002 0201 	and.w	r2, r2, #1
    aa0a:	4640      	mov	r0, r8
    aa0c:	f01f fd98 	bl	2a540 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    aa10:	464a      	mov	r2, r9
    aa12:	210a      	movs	r1, #10
    aa14:	4640      	mov	r0, r8
    aa16:	f01f fd93 	bl	2a540 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    aa1a:	686a      	ldr	r2, [r5, #4]
    aa1c:	210c      	movs	r1, #12
    aa1e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    aa22:	4640      	mov	r0, r8
    aa24:	f01f fd8c 	bl	2a540 <atomic_set_bit_to>
	return 0;
    aa28:	2400      	movs	r4, #0
    aa2a:	e704      	b.n	a836 <bt_le_adv_start_legacy+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    aa2c:	9806      	ldr	r0, [sp, #24]
    aa2e:	b108      	cbz	r0, aa34 <bt_le_adv_start_legacy+0x230>
		bt_conn_unref(conn);
    aa30:	f01f ff0b 	bl	2a84a <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    aa34:	2f00      	cmp	r7, #0
    aa36:	d1ce      	bne.n	a9d6 <bt_le_adv_start_legacy+0x1d2>
    aa38:	e7c8      	b.n	a9cc <bt_le_adv_start_legacy+0x1c8>
		return -EAGAIN;
    aa3a:	f06f 040a 	mvn.w	r4, #10
    aa3e:	e6fa      	b.n	a836 <bt_le_adv_start_legacy+0x32>
		return -EALREADY;
    aa40:	f06f 0477 	mvn.w	r4, #119	; 0x77
    aa44:	e6f7      	b.n	a836 <bt_le_adv_start_legacy+0x32>
		return -ENOBUFS;
    aa46:	f06f 0468 	mvn.w	r4, #104	; 0x68
    aa4a:	e6f4      	b.n	a836 <bt_le_adv_start_legacy+0x32>
    aa4c:	4604      	mov	r4, r0
    aa4e:	e6f2      	b.n	a836 <bt_le_adv_start_legacy+0x32>
    aa50:	200000cc 	.word	0x200000cc
    aa54:	20000000 	.word	0x20000000
    aa58:	000327e6 	.word	0x000327e6
    aa5c:	0002f3d4 	.word	0x0002f3d4

0000aa60 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    aa60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    aa62:	4615      	mov	r5, r2

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    aa64:	9a06      	ldr	r2, [sp, #24]
{
    aa66:	460c      	mov	r4, r1
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    aa68:	e9cd 3200 	strd	r3, r2, [sp]
    aa6c:	462b      	mov	r3, r5
    aa6e:	460a      	mov	r2, r1
    aa70:	4601      	mov	r1, r0
    aa72:	4811      	ldr	r0, [pc, #68]	; (aab8 <bt_le_adv_start+0x58>)
    aa74:	f7ff fec6 	bl	a804 <bt_le_adv_start_legacy>
    aa78:	4621      	mov	r1, r4
    aa7a:	4606      	mov	r6, r0
	for (i = 0; i < ad_len; i++) {
    aa7c:	2300      	movs	r3, #0
		if (ad[i].type == BT_DATA_FLAGS &&
    aa7e:	f240 1001 	movw	r0, #257	; 0x101
	for (i = 0; i < ad_len; i++) {
    aa82:	429d      	cmp	r5, r3
    aa84:	d102      	bne.n	aa8c <bt_le_adv_start+0x2c>
		k_work_reschedule(&adv->lim_adv_timeout_work,
				  K_SECONDS(CONFIG_BT_LIM_ADV_TIMEOUT));
	}

	return err;
}
    aa86:	4630      	mov	r0, r6
    aa88:	b002      	add	sp, #8
    aa8a:	bd70      	pop	{r4, r5, r6, pc}
		if (ad[i].type == BT_DATA_FLAGS &&
    aa8c:	880a      	ldrh	r2, [r1, #0]
    aa8e:	4282      	cmp	r2, r0
    aa90:	d104      	bne.n	aa9c <bt_le_adv_start+0x3c>
		    ad[i].data != NULL) {
    aa92:	684a      	ldr	r2, [r1, #4]
		    ad[i].data_len == sizeof(uint8_t) &&
    aa94:	b112      	cbz	r2, aa9c <bt_le_adv_start+0x3c>
			if (ad[i].data[0] & BT_LE_AD_LIMITED) {
    aa96:	7812      	ldrb	r2, [r2, #0]
    aa98:	07d2      	lsls	r2, r2, #31
    aa9a:	d402      	bmi.n	aaa2 <bt_le_adv_start+0x42>
	for (i = 0; i < ad_len; i++) {
    aa9c:	3301      	adds	r3, #1
    aa9e:	3108      	adds	r1, #8
    aaa0:	e7ef      	b.n	aa82 <bt_le_adv_start+0x22>
		k_work_init_delayable(&adv->lim_adv_timeout_work, adv_timeout);
    aaa2:	4906      	ldr	r1, [pc, #24]	; (aabc <bt_le_adv_start+0x5c>)
    aaa4:	4806      	ldr	r0, [pc, #24]	; (aac0 <bt_le_adv_start+0x60>)
    aaa6:	f023 fa00 	bl	2deaa <k_work_init_delayable>
		k_work_reschedule(&adv->lim_adv_timeout_work,
    aaaa:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    aaae:	2300      	movs	r3, #0
    aab0:	4803      	ldr	r0, [pc, #12]	; (aac0 <bt_le_adv_start+0x60>)
    aab2:	f01a fb0d 	bl	250d0 <k_work_reschedule>
    aab6:	e7e6      	b.n	aa86 <bt_le_adv_start+0x26>
    aab8:	20000018 	.word	0x20000018
    aabc:	0000ab85 	.word	0x0000ab85
    aac0:	20000030 	.word	0x20000030

0000aac4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    aac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
	int err;

	(void)bt_le_lim_adv_cancel_timeout(adv);
    aac6:	4829      	ldr	r0, [pc, #164]	; (ab6c <bt_le_adv_stop+0xa8>)
    aac8:	f01f fdff 	bl	2a6ca <bt_le_lim_adv_cancel_timeout>
    aacc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    aad0:	4827      	ldr	r0, [pc, #156]	; (ab70 <bt_le_adv_stop+0xac>)
    aad2:	f01f fd1f 	bl	2a514 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aad6:	4826      	ldr	r0, [pc, #152]	; (ab70 <bt_le_adv_stop+0xac>)
    aad8:	f01f fd16 	bl	2a508 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    aadc:	0641      	lsls	r1, r0, #25
    aade:	d403      	bmi.n	aae8 <bt_le_adv_stop+0x24>
		/* Legacy advertiser exists, but is not currently advertising.
		 * This happens when keep advertising behavior is active but
		 * no conn object is available to do connectable advertising.
		 */
		bt_le_adv_delete_legacy();
		return 0;
    aae0:	2400      	movs	r4, #0
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    aae2:	4620      	mov	r0, r4
    aae4:	b004      	add	sp, #16
    aae6:	bd10      	pop	{r4, pc}
    aae8:	4821      	ldr	r0, [pc, #132]	; (ab70 <bt_le_adv_stop+0xac>)
    aaea:	f01f fd0d 	bl	2a508 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aaee:	0582      	lsls	r2, r0, #22
    aaf0:	d521      	bpl.n	ab36 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    aaf2:	2300      	movs	r3, #0
    aaf4:	481f      	ldr	r0, [pc, #124]	; (ab74 <bt_le_adv_stop+0xb0>)
    aaf6:	9300      	str	r3, [sp, #0]
    aaf8:	2207      	movs	r2, #7
    aafa:	4669      	mov	r1, sp
    aafc:	f8cd 3003 	str.w	r3, [sp, #3]
    ab00:	f023 fd21 	bl	2e546 <memcmp>
    ab04:	4b1c      	ldr	r3, [pc, #112]	; (ab78 <bt_le_adv_stop+0xb4>)
    ab06:	bb60      	cbnz	r0, ab62 <bt_le_adv_stop+0x9e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    ab08:	4a1c      	ldr	r2, [pc, #112]	; (ab7c <bt_le_adv_stop+0xb8>)
    ab0a:	8891      	ldrh	r1, [r2, #4]
    ab0c:	6810      	ldr	r0, [r2, #0]
    ab0e:	7992      	ldrb	r2, [r2, #6]
    ab10:	f8ad 100c 	strh.w	r1, [sp, #12]
    ab14:	f88d 200e 	strb.w	r2, [sp, #14]
    ab18:	9002      	str	r0, [sp, #8]
    ab1a:	2204      	movs	r2, #4
    ab1c:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ab1e:	7e18      	ldrb	r0, [r3, #24]
    ab20:	f001 f860 	bl	bbe4 <bt_conn_lookup_state_le>
    ab24:	4604      	mov	r4, r0
	if (conn) {
    ab26:	b130      	cbz	r0, ab36 <bt_le_adv_stop+0x72>
		conn->err = status;
    ab28:	2100      	movs	r1, #0
    ab2a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ab2c:	f000 fde0 	bl	b6f0 <bt_conn_set_state>
		bt_conn_unref(conn);
    ab30:	4620      	mov	r0, r4
    ab32:	f01f fe8a 	bl	2a84a <bt_conn_unref>
		err = bt_le_adv_set_enable_legacy(adv, false);
    ab36:	480d      	ldr	r0, [pc, #52]	; (ab6c <bt_le_adv_stop+0xa8>)
    ab38:	2100      	movs	r1, #0
    ab3a:	f01f fd9f 	bl	2a67c <bt_le_adv_set_enable_legacy>
		if (err) {
    ab3e:	4604      	mov	r4, r0
    ab40:	2800      	cmp	r0, #0
    ab42:	d1ce      	bne.n	aae2 <bt_le_adv_stop+0x1e>
    ab44:	480e      	ldr	r0, [pc, #56]	; (ab80 <bt_le_adv_stop+0xbc>)
    ab46:	f01f fcdf 	bl	2a508 <atomic_get>
		if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ab4a:	0683      	lsls	r3, r0, #26
    ab4c:	d5c8      	bpl.n	aae0 <bt_le_adv_stop+0x1c>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_DISABLE);
    ab4e:	4620      	mov	r0, r4
    ab50:	f01f fdd4 	bl	2a6fc <bt_le_scan_set_enable>
			bt_id_set_private_addr(BT_ID_DEFAULT);
    ab54:	4620      	mov	r0, r4
    ab56:	f01f fc8b 	bl	2a470 <bt_id_set_private_addr>
			bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
    ab5a:	2001      	movs	r0, #1
    ab5c:	f01f fdce 	bl	2a6fc <bt_le_scan_set_enable>
    ab60:	e7bf      	b.n	aae2 <bt_le_adv_stop+0x1e>
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    ab62:	2205      	movs	r2, #5
    ab64:	f103 0121 	add.w	r1, r3, #33	; 0x21
    ab68:	e7d9      	b.n	ab1e <bt_le_adv_stop+0x5a>
    ab6a:	bf00      	nop
    ab6c:	20000018 	.word	0x20000018
    ab70:	20000028 	.word	0x20000028
    ab74:	20000021 	.word	0x20000021
    ab78:	20000000 	.word	0x20000000
    ab7c:	0002f6ff 	.word	0x0002f6ff
    ab80:	200000cc 	.word	0x200000cc

0000ab84 <adv_timeout>:
}
#endif /* defined(CONFIG_BT_EXT_ADV) */


static void adv_timeout(struct k_work *work)
{
    ab84:	b500      	push	{lr}
    ab86:	b089      	sub	sp, #36	; 0x24
		err = bt_le_adv_stop();
	} else {
		err = bt_le_ext_adv_stop(adv);
	}
#else
	err = bt_le_adv_stop();
    ab88:	f7ff ff9c 	bl	aac4 <bt_le_adv_stop>
#endif
	BT_WARN("Failed to stop advertising: %d", err);
    ab8c:	4b07      	ldr	r3, [pc, #28]	; (abac <adv_timeout+0x28>)
    ab8e:	e9cd 3006 	strd	r3, r0, [sp, #24]
    ab92:	2303      	movs	r3, #3
    ab94:	9301      	str	r3, [sp, #4]
    ab96:	9305      	str	r3, [sp, #20]
    ab98:	4805      	ldr	r0, [pc, #20]	; (abb0 <adv_timeout+0x2c>)
    ab9a:	2300      	movs	r3, #0
    ab9c:	aa05      	add	r2, sp, #20
    ab9e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    aba2:	f01d ff85 	bl	28ab0 <z_impl_z_log_msg2_static_create>
}
    aba6:	b009      	add	sp, #36	; 0x24
    aba8:	f85d fb04 	ldr.w	pc, [sp], #4
    abac:	00032801 	.word	0x00032801
    abb0:	0002f3d4 	.word	0x0002f3d4

0000abb4 <bt_le_adv_resume>:
{
    abb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    abb6:	481e      	ldr	r0, [pc, #120]	; (ac30 <bt_le_adv_resume+0x7c>)
    abb8:	4c1d      	ldr	r4, [pc, #116]	; (ac30 <bt_le_adv_resume+0x7c>)
    abba:	f01f fca5 	bl	2a508 <atomic_get>
	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    abbe:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    abc2:	d032      	beq.n	ac2a <bt_le_adv_resume+0x76>
    abc4:	4620      	mov	r0, r4
    abc6:	f01f fc9f 	bl	2a508 <atomic_get>
    abca:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    abcc:	f3c0 1580 	ubfx	r5, r0, #6, #1
    abd0:	d42b      	bmi.n	ac2a <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    abd2:	4620      	mov	r0, r4
    abd4:	f01f fc98 	bl	2a508 <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    abd8:	0583      	lsls	r3, r0, #22
    abda:	d526      	bpl.n	ac2a <bt_le_adv_resume+0x76>
	err = le_adv_start_add_conn(adv, &conn);
    abdc:	a901      	add	r1, sp, #4
    abde:	f1a4 0010 	sub.w	r0, r4, #16
    abe2:	f7ff fdc1 	bl	a768 <le_adv_start_add_conn>
	if (err) {
    abe6:	bb00      	cbnz	r0, ac2a <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    abe8:	2101      	movs	r1, #1
    abea:	f1a4 0010 	sub.w	r0, r4, #16
    abee:	f01f fd45 	bl	2a67c <bt_le_adv_set_enable_legacy>
	if (err) {
    abf2:	b150      	cbz	r0, ac0a <bt_le_adv_resume+0x56>
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    abf4:	4629      	mov	r1, r5
    abf6:	9801      	ldr	r0, [sp, #4]
    abf8:	f000 fd7a 	bl	b6f0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    abfc:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    ac00:	4620      	mov	r0, r4
    ac02:	f01f fc87 	bl	2a514 <atomic_and>
	return (old & mask) != 0;
    ac06:	f3c0 3540 	ubfx	r5, r0, #13, #1
	bt_conn_unref(conn);
    ac0a:	9801      	ldr	r0, [sp, #4]
    ac0c:	f01f fe1d 	bl	2a84a <bt_conn_unref>
	if (persist_paused) {
    ac10:	b15d      	cbz	r5, ac2a <bt_le_adv_resume+0x76>
    ac12:	f3bf 8f5b 	dmb	ish
    ac16:	e854 3f00 	ldrex	r3, [r4]
    ac1a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    ac1e:	e844 3200 	strex	r2, r3, [r4]
    ac22:	2a00      	cmp	r2, #0
    ac24:	d1f7      	bne.n	ac16 <bt_le_adv_resume+0x62>
    ac26:	f3bf 8f5b 	dmb	ish
}
    ac2a:	b003      	add	sp, #12
    ac2c:	bd30      	pop	{r4, r5, pc}
    ac2e:	bf00      	nop
    ac30:	20000028 	.word	0x20000028

0000ac34 <atomic_get.constprop.0>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ac34:	4b03      	ldr	r3, [pc, #12]	; (ac44 <atomic_get.constprop.0+0x10>)
    ac36:	f3bf 8f5b 	dmb	ish
    ac3a:	6818      	ldr	r0, [r3, #0]
    ac3c:	f3bf 8f5b 	dmb	ish
}
    ac40:	4770      	bx	lr
    ac42:	bf00      	nop
    ac44:	200000cc 	.word	0x200000cc

0000ac48 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
    ac48:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ac4a:	2102      	movs	r1, #2
{
    ac4c:	b087      	sub	sp, #28
    ac4e:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
    ac50:	f242 000c 	movw	r0, #8204	; 0x200c
    ac54:	f7fe f95c 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    ac58:	4605      	mov	r5, r0
    ac5a:	b308      	cbz	r0, aca0 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
    ac5c:	2102      	movs	r1, #2
    ac5e:	3008      	adds	r0, #8
    ac60:	f021 ff33 	bl	2caca <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
    ac64:	2c01      	cmp	r4, #1
    ac66:	4602      	mov	r2, r0
    ac68:	d117      	bne.n	ac9a <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ac6a:	f7ff ffe3 	bl	ac34 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ac6e:	f3c0 2000 	ubfx	r0, r0, #8, #1
    ac72:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    ac74:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
    ac76:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
    ac78:	425c      	negs	r4, r3
    ac7a:	415c      	adcs	r4, r3
    ac7c:	4a0a      	ldr	r2, [pc, #40]	; (aca8 <bt_le_scan_set_enable_legacy+0x60>)
    ac7e:	9400      	str	r4, [sp, #0]
    ac80:	a903      	add	r1, sp, #12
    ac82:	4628      	mov	r0, r5
    ac84:	2305      	movs	r3, #5
    ac86:	f7fe f931 	bl	8eec <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
    ac8a:	2200      	movs	r2, #0
    ac8c:	4629      	mov	r1, r5
    ac8e:	f242 000c 	movw	r0, #8204	; 0x200c
    ac92:	f7fe faa5 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
    ac96:	b007      	add	sp, #28
    ac98:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    ac9a:	2300      	movs	r3, #0
    ac9c:	7043      	strb	r3, [r0, #1]
    ac9e:	e7e9      	b.n	ac74 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
    aca0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    aca4:	e7f7      	b.n	ac96 <bt_le_scan_set_enable_legacy+0x4e>
    aca6:	bf00      	nop
    aca8:	200000cc 	.word	0x200000cc

0000acac <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
    acac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_cp_le_set_scan_param set_param;
	struct net_buf *buf;
	int err;
	bool active_scan;

	(void)memset(&set_param, 0, sizeof(set_param));
    acae:	2300      	movs	r3, #0
    acb0:	f8ad 3005 	strh.w	r3, [sp, #5]
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    acb4:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
    acb6:	f88d 0000 	strb.w	r0, [sp]
{
    acba:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    acbc:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
    acbe:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    acc2:	4158      	adcs	r0, r3
    acc4:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
    acc8:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
    accc:	f7ff fbd0 	bl	a470 <bt_id_set_scan_own_addr>
	if (err) {
    acd0:	4604      	mov	r4, r0
    acd2:	bb38      	cbnz	r0, ad24 <start_le_scan_legacy+0x78>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
    acd4:	2107      	movs	r1, #7
    acd6:	f242 000b 	movw	r0, #8203	; 0x200b
    acda:	f7fe f919 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    acde:	4606      	mov	r6, r0
    ace0:	b348      	cbz	r0, ad36 <start_le_scan_legacy+0x8a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ace2:	2207      	movs	r2, #7
    ace4:	4669      	mov	r1, sp
    ace6:	3008      	adds	r0, #8
    ace8:	f021 fef5 	bl	2cad6 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
    acec:	4622      	mov	r2, r4
    acee:	4631      	mov	r1, r6
    acf0:	f242 000b 	movw	r0, #8203	; 0x200b
    acf4:	f7fe fa74 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    acf8:	4604      	mov	r4, r0
    acfa:	b998      	cbnz	r0, ad24 <start_le_scan_legacy+0x78>
	return bt_le_scan_set_enable_legacy(enable);
    acfc:	2001      	movs	r0, #1
    acfe:	f7ff ffa3 	bl	ac48 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
    ad02:	4604      	mov	r4, r0
    ad04:	b970      	cbnz	r0, ad24 <start_le_scan_legacy+0x78>
	if (val) {
    ad06:	2d01      	cmp	r5, #1
    ad08:	d10f      	bne.n	ad2a <start_le_scan_legacy+0x7e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ad0a:	f3bf 8f5b 	dmb	ish
    ad0e:	4b0b      	ldr	r3, [pc, #44]	; (ad3c <start_le_scan_legacy+0x90>)
    ad10:	e853 2f00 	ldrex	r2, [r3]
    ad14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    ad18:	e843 2100 	strex	r1, r2, [r3]
    ad1c:	2900      	cmp	r1, #0
    ad1e:	d1f7      	bne.n	ad10 <start_le_scan_legacy+0x64>
    ad20:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
    ad24:	4620      	mov	r0, r4
    ad26:	b002      	add	sp, #8
    ad28:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad2a:	f06f 0180 	mvn.w	r1, #128	; 0x80
    ad2e:	4803      	ldr	r0, [pc, #12]	; (ad3c <start_le_scan_legacy+0x90>)
    ad30:	f01f fcce 	bl	2a6d0 <atomic_and>
    ad34:	e7f6      	b.n	ad24 <start_le_scan_legacy+0x78>
		return -ENOBUFS;
    ad36:	f06f 0468 	mvn.w	r4, #104	; 0x68
    ad3a:	e7f3      	b.n	ad24 <start_le_scan_legacy+0x78>
    ad3c:	200000cc 	.word	0x200000cc

0000ad40 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
    ad40:	4b01      	ldr	r3, [pc, #4]	; (ad48 <bt_scan_reset+0x8>)
    ad42:	2200      	movs	r2, #0
    ad44:	601a      	str	r2, [r3, #0]
}
    ad46:	4770      	bx	lr
    ad48:	200022c0 	.word	0x200022c0

0000ad4c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
    ad4c:	b538      	push	{r3, r4, r5, lr}
    ad4e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ad50:	f7ff ff70 	bl	ac34 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    ad54:	0641      	lsls	r1, r0, #25
    ad56:	f3c0 1280 	ubfx	r2, r0, #6, #1
    ad5a:	d501      	bpl.n	ad60 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
    ad5c:	2000      	movs	r0, #0
    ad5e:	e031      	b.n	adc4 <bt_le_scan_update+0x78>
    ad60:	f7ff ff68 	bl	ac34 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    ad64:	0683      	lsls	r3, r0, #26
    ad66:	d428      	bmi.n	adba <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ad68:	2100      	movs	r1, #0
    ad6a:	2206      	movs	r2, #6
    ad6c:	4608      	mov	r0, r1
    ad6e:	f000 ff39 	bl	bbe4 <bt_conn_lookup_state_le>
		if (conn) {
    ad72:	4604      	mov	r4, r0
    ad74:	bb38      	cbnz	r0, adc6 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
    ad76:	2202      	movs	r2, #2
    ad78:	4601      	mov	r1, r0
    ad7a:	f000 ff33 	bl	bbe4 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
    ad7e:	2800      	cmp	r0, #0
    ad80:	d0ec      	beq.n	ad5c <bt_le_scan_update+0x10>
    ad82:	f3bf 8f5b 	dmb	ish
    ad86:	4b11      	ldr	r3, [pc, #68]	; (adcc <bt_le_scan_update+0x80>)
    ad88:	e853 2f00 	ldrex	r2, [r3]
    ad8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ad90:	e843 2100 	strex	r1, r2, [r3]
    ad94:	2900      	cmp	r1, #0
    ad96:	d1f7      	bne.n	ad88 <bt_le_scan_update+0x3c>
    ad98:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
    ad9c:	f01f fd55 	bl	2a84a <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
    ada0:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    ada2:	4620      	mov	r0, r4
    ada4:	bf18      	it	ne
    ada6:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
    ada8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
    adac:	bf0a      	itet	eq
    adae:	2212      	moveq	r2, #18
    adb0:	2160      	movne	r1, #96	; 0x60
    adb2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
    adb6:	f7ff bf79 	b.w	acac <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
    adba:	4610      	mov	r0, r2
    adbc:	f7ff ff44 	bl	ac48 <bt_le_scan_set_enable_legacy>
		if (err) {
    adc0:	2800      	cmp	r0, #0
    adc2:	d0d1      	beq.n	ad68 <bt_le_scan_update+0x1c>
}
    adc4:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    adc6:	f01f fd40 	bl	2a84a <bt_conn_unref>
    adca:	e7c7      	b.n	ad5c <bt_le_scan_update+0x10>
    adcc:	200000cc 	.word	0x200000cc

0000add0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
    add0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
    add4:	f100 0808 	add.w	r8, r0, #8
    add8:	b08f      	sub	sp, #60	; 0x3c
    adda:	4604      	mov	r4, r0
    addc:	4640      	mov	r0, r8
    adde:	f021 fead 	bl	2cb3c <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
    ade2:	f8df a1c0 	ldr.w	sl, [pc, #448]	; afa4 <bt_hci_le_adv_report+0x1d4>
    ade6:	4606      	mov	r6, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
    ade8:	b176      	cbz	r6, ae08 <bt_hci_le_adv_report+0x38>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
    adea:	89a3      	ldrh	r3, [r4, #12]
    adec:	2b08      	cmp	r3, #8
    adee:	d80e      	bhi.n	ae0e <bt_hci_le_adv_report+0x3e>
			BT_ERR("Unexpected end of buffer");
    adf0:	4b6d      	ldr	r3, [pc, #436]	; (afa8 <bt_hci_le_adv_report+0x1d8>)
    adf2:	930c      	str	r3, [sp, #48]	; 0x30
    adf4:	2302      	movs	r3, #2
    adf6:	9306      	str	r3, [sp, #24]
    adf8:	930b      	str	r3, [sp, #44]	; 0x2c
    adfa:	486c      	ldr	r0, [pc, #432]	; (afac <bt_hci_le_adv_report+0x1dc>)
    adfc:	2300      	movs	r3, #0
    adfe:	aa0b      	add	r2, sp, #44	; 0x2c
    ae00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ae04:	f01d fe54 	bl	28ab0 <z_impl_z_log_msg2_static_create>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
    ae08:	b00f      	add	sp, #60	; 0x3c
    ae0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    ae0e:	2109      	movs	r1, #9
    ae10:	4640      	mov	r0, r8
    ae12:	f021 fe8b 	bl	2cb2c <net_buf_simple_pull_mem>
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
    ae16:	237f      	movs	r3, #127	; 0x7f
    ae18:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
    ae1c:	7a01      	ldrb	r1, [r0, #8]
    ae1e:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ae20:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
    ae22:	7a5b      	ldrb	r3, [r3, #9]
    ae24:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
    ae28:	23ff      	movs	r3, #255	; 0xff
    ae2a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
    ae2e:	2300      	movs	r3, #0
    ae30:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
    ae34:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
    ae38:	7802      	ldrb	r2, [r0, #0]
    ae3a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    ae3e:	2a04      	cmp	r2, #4
    ae40:	bf9c      	itt	ls
    ae42:	4b5b      	ldrls	r3, [pc, #364]	; (afb0 <bt_hci_le_adv_report+0x1e0>)
    ae44:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
    ae46:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
    ae4a:	b28b      	uxth	r3, r1
    ae4c:	4605      	mov	r5, r0
    ae4e:	f100 0901 	add.w	r9, r0, #1
    ae52:	9301      	str	r3, [sp, #4]
    ae54:	f7ff feee 	bl	ac34 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ae58:	0647      	lsls	r7, r0, #25
    ae5a:	d50b      	bpl.n	ae74 <bt_hci_le_adv_report+0xa4>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
    ae5c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    ae60:	0758      	lsls	r0, r3, #29
    ae62:	d507      	bpl.n	ae74 <bt_hci_le_adv_report+0xa4>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
    ae64:	7a29      	ldrb	r1, [r5, #8]
	return net_buf_simple_pull(&buf->b, len);
    ae66:	4640      	mov	r0, r8
    ae68:	3101      	adds	r1, #1
    ae6a:	3e01      	subs	r6, #1
    ae6c:	f021 fe56 	bl	2cb1c <net_buf_simple_pull>
    ae70:	b2f6      	uxtb	r6, r6
    ae72:	e7b9      	b.n	ade8 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
    ae74:	786b      	ldrb	r3, [r5, #1]
    ae76:	1e9a      	subs	r2, r3, #2
    ae78:	2a01      	cmp	r2, #1
    ae7a:	d847      	bhi.n	af0c <bt_hci_le_adv_report+0x13c>
		bt_addr_le_copy(&id_addr, addr);
    ae7c:	4649      	mov	r1, r9
    ae7e:	a804      	add	r0, sp, #16
    ae80:	f01f fc35 	bl	2a6ee <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ae84:	f89d 3010 	ldrb.w	r3, [sp, #16]
    ae88:	3b02      	subs	r3, #2
    ae8a:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
    ae8e:	ab04      	add	r3, sp, #16
    ae90:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
    ae92:	f8da 3000 	ldr.w	r3, [sl]
    ae96:	b1a3      	cbz	r3, aec2 <bt_hci_le_adv_report+0xf2>
	state->offset = net_buf_simple_headroom(buf);
    ae98:	4640      	mov	r0, r8
    ae9a:	f021 fe5f 	bl	2cb5c <net_buf_simple_headroom>
		buf->len = len;
    ae9e:	9b01      	ldr	r3, [sp, #4]
	state->len = buf->len;
    aea0:	89a7      	ldrh	r7, [r4, #12]
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    aea2:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
		buf->len = len;
    aea6:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    aea8:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
    aeaa:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
    aeae:	f8da c000 	ldr.w	ip, [sl]
    aeb2:	a804      	add	r0, sp, #16
    aeb4:	4643      	mov	r3, r8
    aeb6:	47e0      	blx	ip
	buf->data = buf->__buf + state->offset;
    aeb8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    aeba:	81a7      	strh	r7, [r4, #12]
	buf->data = buf->__buf + state->offset;
    aebc:	fa10 f08b 	uxtah	r0, r0, fp
    aec0:	60a0      	str	r0, [r4, #8]
	return list->head;
    aec2:	4b3c      	ldr	r3, [pc, #240]	; (afb4 <bt_hci_le_adv_report+0x1e4>)
    aec4:	681a      	ldr	r2, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    aec6:	2a00      	cmp	r2, #0
    aec8:	d031      	beq.n	af2e <bt_hci_le_adv_report+0x15e>
	return node->next;
    aeca:	f852 7908 	ldr.w	r7, [r2], #-8
    aece:	b107      	cbz	r7, aed2 <bt_hci_le_adv_report+0x102>
    aed0:	3f08      	subs	r7, #8
		if (listener->recv) {
    aed2:	6813      	ldr	r3, [r2, #0]
    aed4:	9203      	str	r2, [sp, #12]
    aed6:	b193      	cbz	r3, aefe <bt_hci_le_adv_report+0x12e>
	state->offset = net_buf_simple_headroom(buf);
    aed8:	4640      	mov	r0, r8
    aeda:	f021 fe3f 	bl	2cb5c <net_buf_simple_headroom>
	state->len = buf->len;
    aede:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
    aee0:	9a03      	ldr	r2, [sp, #12]
    aee2:	9302      	str	r3, [sp, #8]
			buf->len = len;
    aee4:	9b01      	ldr	r3, [sp, #4]
    aee6:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    aee8:	4683      	mov	fp, r0
			listener->recv(info, buf);
    aeea:	6812      	ldr	r2, [r2, #0]
    aeec:	a808      	add	r0, sp, #32
    aeee:	4641      	mov	r1, r8
    aef0:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
    aef2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    aef4:	9b02      	ldr	r3, [sp, #8]
    aef6:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
    aef8:	fa10 f08b 	uxtah	r0, r0, fp
    aefc:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
    aefe:	b1b7      	cbz	r7, af2e <bt_hci_le_adv_report+0x15e>
    af00:	68bb      	ldr	r3, [r7, #8]
    af02:	b103      	cbz	r3, af06 <bt_hci_le_adv_report+0x136>
    af04:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
    af06:	463a      	mov	r2, r7
    af08:	461f      	mov	r7, r3
    af0a:	e7e2      	b.n	aed2 <bt_hci_le_adv_report+0x102>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
    af0c:	2bff      	cmp	r3, #255	; 0xff
    af0e:	d108      	bne.n	af22 <bt_hci_le_adv_report+0x152>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
    af10:	2300      	movs	r3, #0
    af12:	9306      	str	r3, [sp, #24]
    af14:	a906      	add	r1, sp, #24
    af16:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
    af1a:	a804      	add	r0, sp, #16
    af1c:	f01f fbe7 	bl	2a6ee <bt_addr_le_copy>
    af20:	e7b5      	b.n	ae8e <bt_hci_le_adv_report+0xbe>
    af22:	4649      	mov	r1, r9
    af24:	2000      	movs	r0, #0
    af26:	f01f fa9b 	bl	2a460 <bt_lookup_id_addr>
    af2a:	4601      	mov	r1, r0
    af2c:	e7f5      	b.n	af1a <bt_hci_le_adv_report+0x14a>
	check_pending_conn(&id_addr, addr, info->adv_props);
    af2e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    af32:	f7ff fe7f 	bl	ac34 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    af36:	0641      	lsls	r1, r0, #25
    af38:	f3c0 1780 	ubfx	r7, r0, #6, #1
    af3c:	d492      	bmi.n	ae64 <bt_hci_le_adv_report+0x94>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
    af3e:	07d2      	lsls	r2, r2, #31
    af40:	d590      	bpl.n	ae64 <bt_hci_le_adv_report+0x94>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
    af42:	2202      	movs	r2, #2
    af44:	a904      	add	r1, sp, #16
    af46:	4638      	mov	r0, r7
    af48:	f000 fe4c 	bl	bbe4 <bt_conn_lookup_state_le>
	if (!conn) {
    af4c:	4683      	mov	fp, r0
    af4e:	2800      	cmp	r0, #0
    af50:	d088      	beq.n	ae64 <bt_hci_le_adv_report+0x94>
    af52:	f7ff fe6f 	bl	ac34 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    af56:	0683      	lsls	r3, r0, #26
    af58:	d410      	bmi.n	af7c <bt_hci_le_adv_report+0x1ac>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
    af5a:	f10b 0096 	add.w	r0, fp, #150	; 0x96
    af5e:	4649      	mov	r1, r9
    af60:	f01f fbc5 	bl	2a6ee <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
    af64:	4658      	mov	r0, fp
    af66:	f01f f8e2 	bl	2a12e <bt_le_create_conn>
    af6a:	b960      	cbnz	r0, af86 <bt_hci_le_adv_report+0x1b6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    af6c:	4658      	mov	r0, fp
    af6e:	2106      	movs	r1, #6
    af70:	f000 fbbe 	bl	b6f0 <bt_conn_set_state>
	bt_conn_unref(conn);
    af74:	4658      	mov	r0, fp
    af76:	f01f fc68 	bl	2a84a <bt_conn_unref>
	return;
    af7a:	e773      	b.n	ae64 <bt_hci_le_adv_report+0x94>
	return bt_le_scan_set_enable_legacy(enable);
    af7c:	4638      	mov	r0, r7
    af7e:	f7ff fe63 	bl	ac48 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    af82:	2800      	cmp	r0, #0
    af84:	d0e9      	beq.n	af5a <bt_hci_le_adv_report+0x18a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    af86:	231f      	movs	r3, #31
    af88:	f88b 300c 	strb.w	r3, [fp, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    af8c:	2100      	movs	r1, #0
    af8e:	4658      	mov	r0, fp
    af90:	f000 fbae 	bl	b6f0 <bt_conn_set_state>
	bt_conn_unref(conn);
    af94:	4658      	mov	r0, fp
    af96:	f01f fc58 	bl	2a84a <bt_conn_unref>
	bt_le_scan_update(false);
    af9a:	2000      	movs	r0, #0
    af9c:	f7ff fed6 	bl	ad4c <bt_le_scan_update>
    afa0:	e760      	b.n	ae64 <bt_hci_le_adv_report+0x94>
    afa2:	bf00      	nop
    afa4:	200022c0 	.word	0x200022c0
    afa8:	00032827 	.word	0x00032827
    afac:	0002f504 	.word	0x0002f504
    afb0:	00032848 	.word	0x00032848
    afb4:	200022b8 	.word	0x200022b8

0000afb8 <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    afb8:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, BT_PUB_KEY_LEN) == 0;
    afba:	4904      	ldr	r1, [pc, #16]	; (afcc <bt_pub_key_is_debug+0x14>)
    afbc:	2240      	movs	r2, #64	; 0x40
    afbe:	f023 fac2 	bl	2e546 <memcmp>
}
    afc2:	fab0 f080 	clz	r0, r0
    afc6:	0940      	lsrs	r0, r0, #5
    afc8:	bd08      	pop	{r3, pc}
    afca:	bf00      	nop
    afcc:	000328db 	.word	0x000328db

0000afd0 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    afd0:	b5f0      	push	{r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    afd2:	4b45      	ldr	r3, [pc, #276]	; (b0e8 <bt_pub_key_gen+0x118>)
    afd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
    afd8:	f003 0306 	and.w	r3, r3, #6
    afdc:	2b06      	cmp	r3, #6
{
    afde:	b089      	sub	sp, #36	; 0x24
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    afe0:	d010      	beq.n	b004 <bt_pub_key_gen+0x34>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    afe2:	4b42      	ldr	r3, [pc, #264]	; (b0ec <bt_pub_key_gen+0x11c>)
    afe4:	9306      	str	r3, [sp, #24]
    afe6:	2302      	movs	r3, #2
    afe8:	9301      	str	r3, [sp, #4]
    afea:	9305      	str	r3, [sp, #20]
    afec:	4840      	ldr	r0, [pc, #256]	; (b0f0 <bt_pub_key_gen+0x120>)
    afee:	2300      	movs	r3, #0
    aff0:	aa05      	add	r2, sp, #20
    aff2:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -ENOTSUP;
    aff6:	f06f 0585 	mvn.w	r5, #133	; 0x85
    affa:	f01d fd59 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    affe:	4628      	mov	r0, r5
    b000:	b009      	add	sp, #36	; 0x24
    b002:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!new_cb) {
    b004:	2800      	cmp	r0, #0
    b006:	d06b      	beq.n	b0e0 <bt_pub_key_gen+0x110>
	return list->head;
    b008:	4e3a      	ldr	r6, [pc, #232]	; (b0f4 <bt_pub_key_gen+0x124>)
    b00a:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b00c:	b1aa      	cbz	r2, b03a <bt_pub_key_gen+0x6a>
    b00e:	1f13      	subs	r3, r2, #4
		if (cb == new_cb) {
    b010:	4298      	cmp	r0, r3
    b012:	d10e      	bne.n	b032 <bt_pub_key_gen+0x62>
			BT_WARN("Callback already registered");
    b014:	4b38      	ldr	r3, [pc, #224]	; (b0f8 <bt_pub_key_gen+0x128>)
    b016:	9306      	str	r3, [sp, #24]
    b018:	2302      	movs	r3, #2
    b01a:	9301      	str	r3, [sp, #4]
    b01c:	9305      	str	r3, [sp, #20]
    b01e:	4834      	ldr	r0, [pc, #208]	; (b0f0 <bt_pub_key_gen+0x120>)
    b020:	2300      	movs	r3, #0
    b022:	aa05      	add	r2, sp, #20
    b024:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b028:	f01d fd42 	bl	28ab0 <z_impl_z_log_msg2_static_create>
			return -EALREADY;
    b02c:	f06f 0577 	mvn.w	r5, #119	; 0x77
    b030:	e7e5      	b.n	affe <bt_pub_key_gen+0x2e>
	return node->next;
    b032:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b034:	b10b      	cbz	r3, b03a <bt_pub_key_gen+0x6a>
    b036:	3b04      	subs	r3, #4
    b038:	e7ea      	b.n	b010 <bt_pub_key_gen+0x40>
	parent->next = child;
    b03a:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    b03c:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    b03e:	1d03      	adds	r3, r0, #4
	list->head = node;
    b040:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    b042:	b902      	cbnz	r2, b046 <bt_pub_key_gen+0x76>
	list->tail = node;
    b044:	6073      	str	r3, [r6, #4]
    b046:	4c2d      	ldr	r4, [pc, #180]	; (b0fc <bt_pub_key_gen+0x12c>)
    b048:	f3bf 8f5b 	dmb	ish
    b04c:	e854 7f00 	ldrex	r7, [r4]
    b050:	f047 0310 	orr.w	r3, r7, #16
    b054:	e844 3200 	strex	r2, r3, [r4]
    b058:	2a00      	cmp	r2, #0
    b05a:	d1f7      	bne.n	b04c <bt_pub_key_gen+0x7c>
    b05c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b060:	f017 0710 	ands.w	r7, r7, #16
    b064:	d001      	beq.n	b06a <bt_pub_key_gen+0x9a>
		return 0;
    b066:	2500      	movs	r5, #0
    b068:	e7c9      	b.n	affe <bt_pub_key_gen+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b06a:	f3bf 8f5b 	dmb	ish
    b06e:	e854 3f00 	ldrex	r3, [r4]
    b072:	f023 0308 	bic.w	r3, r3, #8
    b076:	e844 3200 	strex	r2, r3, [r4]
    b07a:	2a00      	cmp	r2, #0
    b07c:	d1f7      	bne.n	b06e <bt_pub_key_gen+0x9e>
    b07e:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    b082:	463a      	mov	r2, r7
    b084:	4639      	mov	r1, r7
    b086:	f242 0025 	movw	r0, #8229	; 0x2025
    b08a:	f7fe f8a9 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    b08e:	4605      	mov	r5, r0
    b090:	2800      	cmp	r0, #0
    b092:	d0e8      	beq.n	b066 <bt_pub_key_gen+0x96>
		BT_ERR("Sending LE P256 Public Key command failed");
    b094:	4b1a      	ldr	r3, [pc, #104]	; (b100 <bt_pub_key_gen+0x130>)
    b096:	9306      	str	r3, [sp, #24]
    b098:	2302      	movs	r3, #2
    b09a:	9301      	str	r3, [sp, #4]
    b09c:	9305      	str	r3, [sp, #20]
    b09e:	4814      	ldr	r0, [pc, #80]	; (b0f0 <bt_pub_key_gen+0x120>)
    b0a0:	463b      	mov	r3, r7
    b0a2:	aa05      	add	r2, sp, #20
    b0a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b0a8:	f01d fd02 	bl	28ab0 <z_impl_z_log_msg2_static_create>
    b0ac:	f3bf 8f5b 	dmb	ish
    b0b0:	e854 3f00 	ldrex	r3, [r4]
    b0b4:	f023 0310 	bic.w	r3, r3, #16
    b0b8:	e844 3200 	strex	r2, r3, [r4]
    b0bc:	2a00      	cmp	r2, #0
    b0be:	d1f7      	bne.n	b0b0 <bt_pub_key_gen+0xe0>
    b0c0:	f3bf 8f5b 	dmb	ish
	return list->head;
    b0c4:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b0c6:	b13c      	cbz	r4, b0d8 <bt_pub_key_gen+0x108>
			if (cb->func) {
    b0c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b0cc:	3c04      	subs	r4, #4
			if (cb->func) {
    b0ce:	b10b      	cbz	r3, b0d4 <bt_pub_key_gen+0x104>
				cb->func(NULL);
    b0d0:	2000      	movs	r0, #0
    b0d2:	4798      	blx	r3
	return node->next;
    b0d4:	6864      	ldr	r4, [r4, #4]
    b0d6:	e7f6      	b.n	b0c6 <bt_pub_key_gen+0xf6>
	list->head = NULL;
    b0d8:	2300      	movs	r3, #0
	list->tail = NULL;
    b0da:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    b0de:	e78e      	b.n	affe <bt_pub_key_gen+0x2e>
		return -EINVAL;
    b0e0:	f06f 0515 	mvn.w	r5, #21
    b0e4:	e78b      	b.n	affe <bt_pub_key_gen+0x2e>
    b0e6:	bf00      	nop
    b0e8:	20000000 	.word	0x20000000
    b0ec:	0003284d 	.word	0x0003284d
    b0f0:	0002f4c4 	.word	0x0002f4c4
    b0f4:	200022c8 	.word	0x200022c8
    b0f8:	0003286c 	.word	0x0003286c
    b0fc:	200000cc 	.word	0x200000cc
    b100:	00032888 	.word	0x00032888

0000b104 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b104:	4b05      	ldr	r3, [pc, #20]	; (b11c <bt_pub_key_get+0x18>)
    b106:	f3bf 8f5b 	dmb	ish
    b10a:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    b10c:	4804      	ldr	r0, [pc, #16]	; (b120 <bt_pub_key_get+0x1c>)
    b10e:	f3bf 8f5b 	dmb	ish
		return pub_key;
    b112:	f013 0f08 	tst.w	r3, #8
}
    b116:	bf08      	it	eq
    b118:	2000      	moveq	r0, #0
    b11a:	4770      	bx	lr
    b11c:	200000cc 	.word	0x200000cc
    b120:	20003ab3 	.word	0x20003ab3

0000b124 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[BT_PUB_KEY_LEN], bt_dh_key_cb_t cb)
{
    b124:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (dh_key_cb == cb) {
    b126:	4e28      	ldr	r6, [pc, #160]	; (b1c8 <bt_dh_key_gen+0xa4>)
    b128:	6833      	ldr	r3, [r6, #0]
    b12a:	428b      	cmp	r3, r1
{
    b12c:	b088      	sub	sp, #32
    b12e:	4604      	mov	r4, r0
	if (dh_key_cb == cb) {
    b130:	d044      	beq.n	b1bc <bt_dh_key_gen+0x98>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b132:	b123      	cbz	r3, b13e <bt_dh_key_gen+0x1a>
		return -EBUSY;
    b134:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    b138:	4620      	mov	r0, r4
    b13a:	b008      	add	sp, #32
    b13c:	bd70      	pop	{r4, r5, r6, pc}
    b13e:	4b23      	ldr	r3, [pc, #140]	; (b1cc <bt_dh_key_gen+0xa8>)
    b140:	f3bf 8f5b 	dmb	ish
    b144:	681a      	ldr	r2, [r3, #0]
    b146:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b14a:	06d2      	lsls	r2, r2, #27
    b14c:	d4f2      	bmi.n	b134 <bt_dh_key_gen+0x10>
    b14e:	f3bf 8f5b 	dmb	ish
    b152:	681b      	ldr	r3, [r3, #0]
    b154:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    b158:	071b      	lsls	r3, r3, #28
    b15a:	d532      	bpl.n	b1c2 <bt_dh_key_gen+0x9e>
	dh_key_cb = cb;
    b15c:	6031      	str	r1, [r6, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    b15e:	f242 0026 	movw	r0, #8230	; 0x2026
    b162:	2140      	movs	r1, #64	; 0x40
    b164:	f7fd fed4 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
    b168:	4605      	mov	r5, r0
    b16a:	b320      	cbz	r0, b1b6 <bt_dh_key_gen+0x92>
	return net_buf_simple_add(&buf->b, len);
    b16c:	2140      	movs	r1, #64	; 0x40
    b16e:	3008      	adds	r0, #8
    b170:	f021 fcab 	bl	2caca <net_buf_simple_add>
    b174:	4623      	mov	r3, r4
    b176:	f104 0240 	add.w	r2, r4, #64	; 0x40
    b17a:	f853 1b04 	ldr.w	r1, [r3], #4
    b17e:	f840 1b04 	str.w	r1, [r0], #4
    b182:	4293      	cmp	r3, r2
    b184:	d1f9      	bne.n	b17a <bt_dh_key_gen+0x56>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    b186:	2200      	movs	r2, #0
    b188:	4629      	mov	r1, r5
    b18a:	f242 0026 	movw	r0, #8230	; 0x2026
    b18e:	f7fe f827 	bl	91e0 <bt_hci_cmd_send_sync>
	if (err) {
    b192:	4604      	mov	r4, r0
    b194:	2800      	cmp	r0, #0
    b196:	d0cf      	beq.n	b138 <bt_dh_key_gen+0x14>
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b198:	4a0d      	ldr	r2, [pc, #52]	; (b1d0 <bt_dh_key_gen+0xac>)
		dh_key_cb = NULL;
    b19a:	2300      	movs	r3, #0
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b19c:	e9cd 2406 	strd	r2, r4, [sp, #24]
    b1a0:	2203      	movs	r2, #3
		dh_key_cb = NULL;
    b1a2:	6033      	str	r3, [r6, #0]
		BT_WARN("Failed to generate DHKey (err %d)", err);
    b1a4:	9201      	str	r2, [sp, #4]
    b1a6:	9205      	str	r2, [sp, #20]
    b1a8:	480a      	ldr	r0, [pc, #40]	; (b1d4 <bt_dh_key_gen+0xb0>)
    b1aa:	aa05      	add	r2, sp, #20
    b1ac:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b1b0:	f01d fc7e 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return err;
    b1b4:	e7c0      	b.n	b138 <bt_dh_key_gen+0x14>
		return -ENOBUFS;
    b1b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    b1ba:	e7ed      	b.n	b198 <bt_dh_key_gen+0x74>
		return -EALREADY;
    b1bc:	f06f 0477 	mvn.w	r4, #119	; 0x77
    b1c0:	e7ba      	b.n	b138 <bt_dh_key_gen+0x14>
		return -EADDRNOTAVAIL;
    b1c2:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    b1c6:	e7b7      	b.n	b138 <bt_dh_key_gen+0x14>
    b1c8:	200022c4 	.word	0x200022c4
    b1cc:	200000cc 	.word	0x200000cc
    b1d0:	000328b2 	.word	0x000328b2
    b1d4:	0002f4c4 	.word	0x0002f4c4

0000b1d8 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    b1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b1da:	4b1d      	ldr	r3, [pc, #116]	; (b250 <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    b1dc:	6885      	ldr	r5, [r0, #8]
    b1de:	f3bf 8f5b 	dmb	ish
    b1e2:	e853 2f00 	ldrex	r2, [r3]
    b1e6:	f022 0210 	bic.w	r2, r2, #16
    b1ea:	e843 2100 	strex	r1, r2, [r3]
    b1ee:	2900      	cmp	r1, #0
    b1f0:	d1f7      	bne.n	b1e2 <bt_hci_evt_le_pkey_complete+0xa>
    b1f2:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    b1f6:	782a      	ldrb	r2, [r5, #0]
    b1f8:	b9aa      	cbnz	r2, b226 <bt_hci_evt_le_pkey_complete+0x4e>
		memcpy(pub_key, evt->key, BT_PUB_KEY_LEN);
    b1fa:	4916      	ldr	r1, [pc, #88]	; (b254 <bt_hci_evt_le_pkey_complete+0x7c>)
    b1fc:	1c6a      	adds	r2, r5, #1
    b1fe:	f105 0041 	add.w	r0, r5, #65	; 0x41
    b202:	f852 4b04 	ldr.w	r4, [r2], #4
    b206:	f841 4b04 	str.w	r4, [r1], #4
    b20a:	4282      	cmp	r2, r0
    b20c:	d1f9      	bne.n	b202 <bt_hci_evt_le_pkey_complete+0x2a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b20e:	f3bf 8f5b 	dmb	ish
    b212:	e853 2f00 	ldrex	r2, [r3]
    b216:	f042 0208 	orr.w	r2, r2, #8
    b21a:	e843 2100 	strex	r1, r2, [r3]
    b21e:	2900      	cmp	r1, #0
    b220:	d1f7      	bne.n	b212 <bt_hci_evt_le_pkey_complete+0x3a>
    b222:	f3bf 8f5b 	dmb	ish
	return list->head;
    b226:	4e0c      	ldr	r6, [pc, #48]	; (b258 <bt_hci_evt_le_pkey_complete+0x80>)
    b228:	6834      	ldr	r4, [r6, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b22a:	b16c      	cbz	r4, b248 <bt_hci_evt_le_pkey_complete+0x70>
		if (cb->func) {
			cb->func(evt->status ? NULL : pub_key);
    b22c:	4f09      	ldr	r7, [pc, #36]	; (b254 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b22e:	3c04      	subs	r4, #4
		if (cb->func) {
    b230:	6823      	ldr	r3, [r4, #0]
    b232:	b12b      	cbz	r3, b240 <bt_hci_evt_le_pkey_complete+0x68>
			cb->func(evt->status ? NULL : pub_key);
    b234:	782a      	ldrb	r2, [r5, #0]
    b236:	2a00      	cmp	r2, #0
    b238:	bf0c      	ite	eq
    b23a:	4638      	moveq	r0, r7
    b23c:	2000      	movne	r0, #0
    b23e:	4798      	blx	r3
	return node->next;
    b240:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    b242:	b10c      	cbz	r4, b248 <bt_hci_evt_le_pkey_complete+0x70>
    b244:	3c04      	subs	r4, #4
    b246:	e7f3      	b.n	b230 <bt_hci_evt_le_pkey_complete+0x58>
	list->head = NULL;
    b248:	2300      	movs	r3, #0
	list->tail = NULL;
    b24a:	e9c6 3300 	strd	r3, r3, [r6]
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    b24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b250:	200000cc 	.word	0x200000cc
    b254:	20003ab3 	.word	0x20003ab3
    b258:	200022c8 	.word	0x200022c8

0000b25c <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    b25c:	4905      	ldr	r1, [pc, #20]	; (b274 <bt_hci_evt_le_dhkey_complete+0x18>)
    b25e:	680b      	ldr	r3, [r1, #0]
    b260:	b133      	cbz	r3, b270 <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    b262:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    b264:	2000      	movs	r0, #0
    b266:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    b268:	7811      	ldrb	r1, [r2, #0]
    b26a:	b901      	cbnz	r1, b26e <bt_hci_evt_le_dhkey_complete+0x12>
    b26c:	1c50      	adds	r0, r2, #1
    b26e:	4718      	bx	r3
	}
}
    b270:	4770      	bx	lr
    b272:	bf00      	nop
    b274:	200022c4 	.word	0x200022c4

0000b278 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    b278:	2300      	movs	r3, #0
	tx->user_data = NULL;
    b27a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    b27e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    b280:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    b282:	4801      	ldr	r0, [pc, #4]	; (b288 <tx_free+0x10>)
    b284:	f022 bd1a 	b.w	2dcbc <k_queue_append>
    b288:	20000db4 	.word	0x20000db4

0000b28c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    b28c:	4b0e      	ldr	r3, [pc, #56]	; (b2c8 <notify_connected+0x3c>)
{
    b28e:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    b290:	681d      	ldr	r5, [r3, #0]
{
    b292:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    b294:	b955      	cbnz	r5, b2ac <notify_connected+0x20>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b296:	4d0d      	ldr	r5, [pc, #52]	; (b2cc <notify_connected+0x40>)
    b298:	4e0d      	ldr	r6, [pc, #52]	; (b2d0 <notify_connected+0x44>)
		if (cb->connected) {
			cb->connected(conn, conn->err);
    b29a:	7b21      	ldrb	r1, [r4, #12]
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b29c:	42b5      	cmp	r5, r6
    b29e:	d30c      	bcc.n	b2ba <notify_connected+0x2e>
		}
	}

	if (!conn->err) {
    b2a0:	b989      	cbnz	r1, b2c6 <notify_connected+0x3a>
		bt_gatt_connected(conn);
    b2a2:	4620      	mov	r0, r4
	}
}
    b2a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_gatt_connected(conn);
    b2a8:	f003 bb86 	b.w	e9b8 <bt_gatt_connected>
		if (cb->connected) {
    b2ac:	682b      	ldr	r3, [r5, #0]
    b2ae:	b113      	cbz	r3, b2b6 <notify_connected+0x2a>
			cb->connected(conn, conn->err);
    b2b0:	7b21      	ldrb	r1, [r4, #12]
    b2b2:	4620      	mov	r0, r4
    b2b4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b2b6:	69ad      	ldr	r5, [r5, #24]
    b2b8:	e7ec      	b.n	b294 <notify_connected+0x8>
		if (cb->connected) {
    b2ba:	682b      	ldr	r3, [r5, #0]
    b2bc:	b10b      	cbz	r3, b2c2 <notify_connected+0x36>
			cb->connected(conn, conn->err);
    b2be:	4620      	mov	r0, r4
    b2c0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b2c2:	351c      	adds	r5, #28
    b2c4:	e7e9      	b.n	b29a <notify_connected+0xe>
}
    b2c6:	bd70      	pop	{r4, r5, r6, pc}
    b2c8:	200022d4 	.word	0x200022d4
    b2cc:	0002f3a4 	.word	0x0002f3a4
    b2d0:	0002f3a4 	.word	0x0002f3a4

0000b2d4 <send_frag>:
{
    b2d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    b2d8:	694d      	ldr	r5, [r1, #20]
{
    b2da:	b089      	sub	sp, #36	; 0x24
    b2dc:	4604      	mov	r4, r0
    b2de:	460e      	mov	r6, r1
    b2e0:	4690      	mov	r8, r2
    b2e2:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    b2e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b2e8:	4844      	ldr	r0, [pc, #272]	; (b3fc <send_frag+0x128>)
    b2ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b2ee:	f019 fd0d 	bl	24d0c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    b2f2:	7b63      	ldrb	r3, [r4, #13]
    b2f4:	2b07      	cmp	r3, #7
    b2f6:	d152      	bne.n	b39e <send_frag+0xca>
	__asm__ volatile(
    b2f8:	f04f 0320 	mov.w	r3, #32
    b2fc:	f3ef 8211 	mrs	r2, BASEPRI
    b300:	f383 8812 	msr	BASEPRI_MAX, r3
    b304:	f3bf 8f6f 	isb	sy
	if (tx) {
    b308:	69a3      	ldr	r3, [r4, #24]
    b30a:	2d00      	cmp	r5, #0
    b30c:	d05a      	beq.n	b3c4 <send_frag+0xf0>
	parent->next = child;
    b30e:	2100      	movs	r1, #0
    b310:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    b312:	2b00      	cmp	r3, #0
    b314:	d153      	bne.n	b3be <send_frag+0xea>
	list->head = node;
    b316:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    b31a:	f382 8811 	msr	BASEPRI, r2
    b31e:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    b322:	2104      	movs	r1, #4
    b324:	f106 0008 	add.w	r0, r6, #8
    b328:	f021 fbf0 	bl	2cb0c <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b32c:	8823      	ldrh	r3, [r4, #0]
    b32e:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    b332:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b336:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b338:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b33c:	3b04      	subs	r3, #4
    b33e:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b340:	2302      	movs	r3, #2
    b342:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    b344:	4630      	mov	r0, r6
    b346:	f01e ffab 	bl	2a2a0 <bt_send>
	if (err) {
    b34a:	2800      	cmp	r0, #0
    b34c:	d054      	beq.n	b3f8 <send_frag+0x124>
		BT_ERR("Unable to send to driver (err %d)", err);
    b34e:	4b2c      	ldr	r3, [pc, #176]	; (b400 <send_frag+0x12c>)
    b350:	aa05      	add	r2, sp, #20
    b352:	e9cd 3006 	strd	r3, r0, [sp, #24]
    b356:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b35a:	2303      	movs	r3, #3
    b35c:	4829      	ldr	r0, [pc, #164]	; (b404 <send_frag+0x130>)
    b35e:	9301      	str	r3, [sp, #4]
    b360:	9305      	str	r3, [sp, #20]
    b362:	f01f f9f8 	bl	2a756 <z_log_msg2_static_create.constprop.0>
	__asm__ volatile(
    b366:	f04f 0320 	mov.w	r3, #32
    b36a:	f3ef 8011 	mrs	r0, BASEPRI
    b36e:	f383 8812 	msr	BASEPRI_MAX, r3
    b372:	f3bf 8f6f 	isb	sy
		if (tx) {
    b376:	2d00      	cmp	r5, #0
    b378:	d038      	beq.n	b3ec <send_frag+0x118>
	return list->head;
    b37a:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b37c:	2200      	movs	r2, #0
    b37e:	b153      	cbz	r3, b396 <send_frag+0xc2>
    b380:	429d      	cmp	r5, r3
    b382:	d130      	bne.n	b3e6 <send_frag+0x112>
	return node->next;
    b384:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    b386:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    b388:	bb42      	cbnz	r2, b3dc <send_frag+0x108>
    b38a:	428d      	cmp	r5, r1
	list->head = node;
    b38c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    b38e:	d100      	bne.n	b392 <send_frag+0xbe>
	list->tail = node;
    b390:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    b392:	2300      	movs	r3, #0
    b394:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    b396:	f380 8811 	msr	BASEPRI, r0
    b39a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b39e:	4817      	ldr	r0, [pc, #92]	; (b3fc <send_frag+0x128>)
    b3a0:	f019 fc8e 	bl	24cc0 <z_impl_k_sem_give>
	if (tx) {
    b3a4:	b115      	cbz	r5, b3ac <send_frag+0xd8>
		tx_free(tx);
    b3a6:	4628      	mov	r0, r5
    b3a8:	f7ff ff66 	bl	b278 <tx_free>
	if (always_consume) {
    b3ac:	b11f      	cbz	r7, b3b6 <send_frag+0xe2>
		net_buf_unref(buf);
    b3ae:	4630      	mov	r0, r6
    b3b0:	f015 fb3e 	bl	20a30 <net_buf_unref>
	return false;
    b3b4:	2700      	movs	r7, #0
}
    b3b6:	4638      	mov	r0, r7
    b3b8:	b009      	add	sp, #36	; 0x24
    b3ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b3be:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b3c0:	61a5      	str	r5, [r4, #24]
}
    b3c2:	e7aa      	b.n	b31a <send_frag+0x46>
		if (tail_tx) {
    b3c4:	b133      	cbz	r3, b3d4 <send_frag+0x100>
			pending_no_cb = &tail_tx->pending_no_cb;
    b3c6:	f103 090c 	add.w	r9, r3, #12
    b3ca:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    b3cc:	3301      	adds	r3, #1
    b3ce:	f8c9 3000 	str.w	r3, [r9]
    b3d2:	e7a2      	b.n	b31a <send_frag+0x46>
			pending_no_cb = &conn->pending_no_cb;
    b3d4:	69e3      	ldr	r3, [r4, #28]
    b3d6:	f104 091c 	add.w	r9, r4, #28
    b3da:	e7f7      	b.n	b3cc <send_frag+0xf8>
Z_GENLIST_REMOVE(slist, snode)
    b3dc:	428d      	cmp	r5, r1
	parent->next = child;
    b3de:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b3e0:	bf08      	it	eq
    b3e2:	61a2      	streq	r2, [r4, #24]
}
    b3e4:	e7d5      	b.n	b392 <send_frag+0xbe>
	return node->next;
    b3e6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b3e8:	681b      	ldr	r3, [r3, #0]
    b3ea:	e7c8      	b.n	b37e <send_frag+0xaa>
			(*pending_no_cb)--;
    b3ec:	f8d9 3000 	ldr.w	r3, [r9]
    b3f0:	3b01      	subs	r3, #1
    b3f2:	f8c9 3000 	str.w	r3, [r9]
    b3f6:	e7ce      	b.n	b396 <send_frag+0xc2>
	return true;
    b3f8:	2701      	movs	r7, #1
    b3fa:	e7dc      	b.n	b3b6 <send_frag+0xe2>
    b3fc:	20000100 	.word	0x20000100
    b400:	0003215c 	.word	0x0003215c
    b404:	0002f3ec 	.word	0x0002f3ec

0000b408 <bt_conn_get_pkts>:
}
    b408:	4800      	ldr	r0, [pc, #0]	; (b40c <bt_conn_get_pkts+0x4>)
    b40a:	4770      	bx	lr
    b40c:	20000100 	.word	0x20000100

0000b410 <bt_conn_new>:
{
    b410:	b538      	push	{r3, r4, r5, lr}
    b412:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    b414:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    b416:	2501      	movs	r5, #1
    b418:	428b      	cmp	r3, r1
    b41a:	d102      	bne.n	b422 <bt_conn_new+0x12>
		return NULL;
    b41c:	2400      	movs	r4, #0
}
    b41e:	4620      	mov	r0, r4
    b420:	bd38      	pop	{r3, r4, r5, pc}
    b422:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
    b426:	f3bf 8f5b 	dmb	ish
    b42a:	e852 0f00 	ldrex	r0, [r2]
    b42e:	2800      	cmp	r0, #0
    b430:	d104      	bne.n	b43c <bt_conn_new+0x2c>
    b432:	e842 5c00 	strex	ip, r5, [r2]
    b436:	f1bc 0f00 	cmp.w	ip, #0
    b43a:	d1f6      	bne.n	b42a <bt_conn_new+0x1a>
    b43c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    b440:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
    b444:	d002      	beq.n	b44c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    b446:	3301      	adds	r3, #1
    b448:	4604      	mov	r4, r0
    b44a:	e7e5      	b.n	b418 <bt_conn_new+0x8>
	if (!conn) {
    b44c:	2c00      	cmp	r4, #0
    b44e:	d0e6      	beq.n	b41e <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
    b450:	22b8      	movs	r2, #184	; 0xb8
    b452:	2100      	movs	r1, #0
    b454:	4620      	mov	r0, r4
    b456:	f023 f8a7 	bl	2e5a8 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    b45a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b45e:	4904      	ldr	r1, [pc, #16]	; (b470 <bt_conn_new+0x60>)
    b460:	f022 fd23 	bl	2deaa <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    b464:	4903      	ldr	r1, [pc, #12]	; (b474 <bt_conn_new+0x64>)
    b466:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b46a:	f022 fcf8 	bl	2de5e <k_work_init>
	return conn;
    b46e:	e7d6      	b.n	b41e <bt_conn_new+0xe>
    b470:	0000bd59 	.word	0x0000bd59
    b474:	0002a7c1 	.word	0x0002a7c1

0000b478 <bt_conn_recv>:
{
    b478:	b5f0      	push	{r4, r5, r6, r7, lr}
    b47a:	b089      	sub	sp, #36	; 0x24
    b47c:	4616      	mov	r6, r2
    b47e:	af00      	add	r7, sp, #0
    b480:	4604      	mov	r4, r0
    b482:	460d      	mov	r5, r1
	tx_notify(conn);
    b484:	f01f f979 	bl	2a77a <tx_notify>
	switch (flags) {
    b488:	2e01      	cmp	r6, #1
    b48a:	d033      	beq.n	b4f4 <bt_conn_recv+0x7c>
    b48c:	2e02      	cmp	r6, #2
    b48e:	d16e      	bne.n	b56e <bt_conn_recv+0xf6>
		if (conn->rx) {
    b490:	6923      	ldr	r3, [r4, #16]
    b492:	b16b      	cbz	r3, b4b0 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
    b494:	4b3f      	ldr	r3, [pc, #252]	; (b594 <bt_conn_recv+0x11c>)
    b496:	4840      	ldr	r0, [pc, #256]	; (b598 <bt_conn_recv+0x120>)
    b498:	61bb      	str	r3, [r7, #24]
    b49a:	f107 0214 	add.w	r2, r7, #20
    b49e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b4a2:	607e      	str	r6, [r7, #4]
    b4a4:	617e      	str	r6, [r7, #20]
    b4a6:	f01f f956 	bl	2a756 <z_log_msg2_static_create.constprop.0>
			bt_conn_reset_rx_state(conn);
    b4aa:	4620      	mov	r0, r4
    b4ac:	f01f f98b 	bl	2a7c6 <bt_conn_reset_rx_state>
		conn->rx = buf;
    b4b0:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b4b2:	6921      	ldr	r1, [r4, #16]
    b4b4:	898a      	ldrh	r2, [r1, #12]
    b4b6:	2a01      	cmp	r2, #1
    b4b8:	d933      	bls.n	b522 <bt_conn_recv+0xaa>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b4ba:	688b      	ldr	r3, [r1, #8]
    b4bc:	881b      	ldrh	r3, [r3, #0]
    b4be:	3304      	adds	r3, #4
    b4c0:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
    b4c2:	429a      	cmp	r2, r3
    b4c4:	d32d      	bcc.n	b522 <bt_conn_recv+0xaa>
	if (conn->rx->len > acl_total_len) {
    b4c6:	d95d      	bls.n	b584 <bt_conn_recv+0x10c>
		BT_ERR("ACL len mismatch (%u > %u)",
    b4c8:	466d      	mov	r5, sp
    b4ca:	b088      	sub	sp, #32
    b4cc:	466a      	mov	r2, sp
    b4ce:	4833      	ldr	r0, [pc, #204]	; (b59c <bt_conn_recv+0x124>)
    b4d0:	6110      	str	r0, [r2, #16]
    b4d2:	8989      	ldrh	r1, [r1, #12]
    b4d4:	4830      	ldr	r0, [pc, #192]	; (b598 <bt_conn_recv+0x120>)
    b4d6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    b4da:	2304      	movs	r3, #4
    b4dc:	f842 3f0c 	str.w	r3, [r2, #12]!
    b4e0:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    b4e4:	60bb      	str	r3, [r7, #8]
    b4e6:	f01f f936 	bl	2a756 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    b4ea:	4620      	mov	r0, r4
    b4ec:	46ad      	mov	sp, r5
    b4ee:	f01f f96a 	bl	2a7c6 <bt_conn_reset_rx_state>
		return;
    b4f2:	e016      	b.n	b522 <bt_conn_recv+0xaa>
		if (!conn->rx) {
    b4f4:	6920      	ldr	r0, [r4, #16]
    b4f6:	b978      	cbnz	r0, b518 <bt_conn_recv+0xa0>
			BT_ERR("Unexpected L2CAP continuation");
    b4f8:	4b29      	ldr	r3, [pc, #164]	; (b5a0 <bt_conn_recv+0x128>)
    b4fa:	61bb      	str	r3, [r7, #24]
    b4fc:	2302      	movs	r3, #2
    b4fe:	607b      	str	r3, [r7, #4]
    b500:	617b      	str	r3, [r7, #20]
    b502:	f107 0214 	add.w	r2, r7, #20
    b506:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b50a:	4823      	ldr	r0, [pc, #140]	; (b598 <bt_conn_recv+0x120>)
    b50c:	f01f f923 	bl	2a756 <z_log_msg2_static_create.constprop.0>
		bt_conn_reset_rx_state(conn);
    b510:	4620      	mov	r0, r4
    b512:	f01f f958 	bl	2a7c6 <bt_conn_reset_rx_state>
    b516:	e001      	b.n	b51c <bt_conn_recv+0xa4>
		if (!buf->len) {
    b518:	89ae      	ldrh	r6, [r5, #12]
    b51a:	b92e      	cbnz	r6, b528 <bt_conn_recv+0xb0>
		net_buf_unref(buf);
    b51c:	4628      	mov	r0, r5
    b51e:	f015 fa87 	bl	20a30 <net_buf_unref>
}
    b522:	3724      	adds	r7, #36	; 0x24
    b524:	46bd      	mov	sp, r7
    b526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b528:	3008      	adds	r0, #8
    b52a:	f021 fb1b 	bl	2cb64 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b52e:	4286      	cmp	r6, r0
    b530:	d913      	bls.n	b55a <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
    b532:	4b1c      	ldr	r3, [pc, #112]	; (b5a4 <bt_conn_recv+0x12c>)
    b534:	4818      	ldr	r0, [pc, #96]	; (b598 <bt_conn_recv+0x120>)
    b536:	61bb      	str	r3, [r7, #24]
    b538:	f107 0214 	add.w	r2, r7, #20
    b53c:	2302      	movs	r3, #2
    b53e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b542:	607b      	str	r3, [r7, #4]
    b544:	617b      	str	r3, [r7, #20]
    b546:	f01f f906 	bl	2a756 <z_log_msg2_static_create.constprop.0>
			bt_l2cap_recv(conn, conn->rx, false);
    b54a:	2200      	movs	r2, #0
    b54c:	6921      	ldr	r1, [r4, #16]
    b54e:	4620      	mov	r0, r4
    b550:	f000 fed0 	bl	c2f4 <bt_l2cap_recv>
			conn->rx = NULL;
    b554:	2300      	movs	r3, #0
    b556:	6123      	str	r3, [r4, #16]
			net_buf_unref(buf);
    b558:	e7e0      	b.n	b51c <bt_conn_recv+0xa4>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b55a:	6920      	ldr	r0, [r4, #16]
    b55c:	89aa      	ldrh	r2, [r5, #12]
    b55e:	68a9      	ldr	r1, [r5, #8]
    b560:	3008      	adds	r0, #8
    b562:	f021 fab8 	bl	2cad6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b566:	4628      	mov	r0, r5
    b568:	f015 fa62 	bl	20a30 <net_buf_unref>
		break;
    b56c:	e7a1      	b.n	b4b2 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b56e:	4b0e      	ldr	r3, [pc, #56]	; (b5a8 <bt_conn_recv+0x130>)
	switch (flags) {
    b570:	e9c7 3606 	strd	r3, r6, [r7, #24]
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b574:	2303      	movs	r3, #3
    b576:	607b      	str	r3, [r7, #4]
    b578:	617b      	str	r3, [r7, #20]
    b57a:	f107 0214 	add.w	r2, r7, #20
    b57e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    b582:	e7c2      	b.n	b50a <bt_conn_recv+0x92>
	conn->rx = NULL;
    b584:	2300      	movs	r3, #0
    b586:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
    b588:	2201      	movs	r2, #1
    b58a:	4620      	mov	r0, r4
    b58c:	f000 feb2 	bl	c2f4 <bt_l2cap_recv>
		__ASSERT(false, "Invalid connection type %u", conn->type);
    b590:	e7c7      	b.n	b522 <bt_conn_recv+0xaa>
    b592:	bf00      	nop
    b594:	0003291b 	.word	0x0003291b
    b598:	0002f3ec 	.word	0x0002f3ec
    b59c:	0003299b 	.word	0x0003299b
    b5a0:	00032938 	.word	0x00032938
    b5a4:	00032956 	.word	0x00032956
    b5a8:	0003297d 	.word	0x0003297d

0000b5ac <bt_conn_send_cb>:
{
    b5ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b5b0:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b5b2:	7b43      	ldrb	r3, [r0, #13]
    b5b4:	2b07      	cmp	r3, #7
{
    b5b6:	b088      	sub	sp, #32
    b5b8:	4605      	mov	r5, r0
    b5ba:	460e      	mov	r6, r1
    b5bc:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    b5be:	d00d      	beq.n	b5dc <bt_conn_send_cb+0x30>
		BT_ERR("not connected!");
    b5c0:	4b27      	ldr	r3, [pc, #156]	; (b660 <bt_conn_send_cb+0xb4>)
    b5c2:	9306      	str	r3, [sp, #24]
    b5c4:	4827      	ldr	r0, [pc, #156]	; (b664 <bt_conn_send_cb+0xb8>)
    b5c6:	2302      	movs	r3, #2
    b5c8:	aa05      	add	r2, sp, #20
    b5ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b5ce:	9301      	str	r3, [sp, #4]
    b5d0:	9305      	str	r3, [sp, #20]
    b5d2:	f01f f8c0 	bl	2a756 <z_log_msg2_static_create.constprop.0>
			return -ENOTCONN;
    b5d6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    b5da:	e01e      	b.n	b61a <bt_conn_send_cb+0x6e>
	if (cb) {
    b5dc:	2a00      	cmp	r2, #0
    b5de:	d03d      	beq.n	b65c <bt_conn_send_cb+0xb0>
	return z_impl_z_current_get();
    b5e0:	f01a f86c 	bl	256bc <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    b5e4:	4b20      	ldr	r3, [pc, #128]	; (b668 <bt_conn_send_cb+0xbc>)
    b5e6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    b5e8:	4820      	ldr	r0, [pc, #128]	; (b66c <bt_conn_send_cb+0xc0>)
    b5ea:	bf07      	ittee	eq
    b5ec:	2200      	moveq	r2, #0
    b5ee:	2300      	moveq	r3, #0
    b5f0:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    b5f4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    b5f8:	f019 fb2e 	bl	24c58 <z_impl_k_queue_get>
    b5fc:	4604      	mov	r4, r0
		if (!tx) {
    b5fe:	b978      	cbnz	r0, b620 <bt_conn_send_cb+0x74>
			BT_ERR("Unable to allocate TX context");
    b600:	4b1b      	ldr	r3, [pc, #108]	; (b670 <bt_conn_send_cb+0xc4>)
    b602:	4818      	ldr	r0, [pc, #96]	; (b664 <bt_conn_send_cb+0xb8>)
    b604:	9306      	str	r3, [sp, #24]
    b606:	aa05      	add	r2, sp, #20
    b608:	2302      	movs	r3, #2
    b60a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b60e:	9301      	str	r3, [sp, #4]
    b610:	9305      	str	r3, [sp, #20]
    b612:	f01f f8a0 	bl	2a756 <z_log_msg2_static_create.constprop.0>
			return -ENOBUFS;
    b616:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b61a:	b008      	add	sp, #32
    b61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    b620:	7b6b      	ldrb	r3, [r5, #13]
    b622:	2b07      	cmp	r3, #7
    b624:	d00e      	beq.n	b644 <bt_conn_send_cb+0x98>
			BT_WARN("Disconnected while allocating context");
    b626:	4b13      	ldr	r3, [pc, #76]	; (b674 <bt_conn_send_cb+0xc8>)
    b628:	9306      	str	r3, [sp, #24]
    b62a:	480e      	ldr	r0, [pc, #56]	; (b664 <bt_conn_send_cb+0xb8>)
    b62c:	2302      	movs	r3, #2
    b62e:	aa05      	add	r2, sp, #20
    b630:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b634:	9301      	str	r3, [sp, #4]
    b636:	9305      	str	r3, [sp, #20]
    b638:	f01f f88d 	bl	2a756 <z_log_msg2_static_create.constprop.0>
			tx_free(tx);
    b63c:	4620      	mov	r0, r4
    b63e:	f7ff fe1b 	bl	b278 <tx_free>
    b642:	e7c8      	b.n	b5d6 <bt_conn_send_cb+0x2a>
		tx->pending_no_cb = 0U;
    b644:	2300      	movs	r3, #0
		tx->user_data = user_data;
    b646:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    b64a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b64c:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    b64e:	f105 0038 	add.w	r0, r5, #56	; 0x38
    b652:	4631      	mov	r1, r6
    b654:	f021 f9fa 	bl	2ca4c <net_buf_put>
	return 0;
    b658:	2000      	movs	r0, #0
    b65a:	e7de      	b.n	b61a <bt_conn_send_cb+0x6e>
		tx_data(buf)->tx = NULL;
    b65c:	614a      	str	r2, [r1, #20]
    b65e:	e7f6      	b.n	b64e <bt_conn_send_cb+0xa2>
    b660:	000329b6 	.word	0x000329b6
    b664:	0002f3ec 	.word	0x0002f3ec
    b668:	200020e0 	.word	0x200020e0
    b66c:	20000db4 	.word	0x20000db4
    b670:	000329c5 	.word	0x000329c5
    b674:	000329e3 	.word	0x000329e3

0000b678 <bt_conn_prepare_events>:
{
    b678:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    b67a:	4b16      	ldr	r3, [pc, #88]	; (b6d4 <bt_conn_prepare_events+0x5c>)
	if (!atomic_get(&conn->ref)) {
    b67c:	4c16      	ldr	r4, [pc, #88]	; (b6d8 <bt_conn_prepare_events+0x60>)
	conn_change.signaled = 0U;
    b67e:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b680:	2101      	movs	r1, #1
{
    b682:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    b684:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b686:	f022 ff3a 	bl	2e4fe <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    b68a:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
		if (!conn_prepare_events(conn, &events[ev_count])) {
    b68e:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    b692:	f01f f844 	bl	2a71e <atomic_get>
    b696:	b908      	cbnz	r0, b69c <bt_conn_prepare_events+0x24>
		conn_cleanup(conn);
    b698:	2001      	movs	r0, #1
}
    b69a:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b69c:	7b63      	ldrb	r3, [r4, #13]
    b69e:	b953      	cbnz	r3, b6b6 <bt_conn_prepare_events+0x3e>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b6a0:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b6a4:	1d20      	adds	r0, r4, #4
    b6a6:	f01f f82b 	bl	2a700 <atomic_and>
    b6aa:	0643      	lsls	r3, r0, #25
    b6ac:	d503      	bpl.n	b6b6 <bt_conn_prepare_events+0x3e>
		conn_cleanup(conn);
    b6ae:	4620      	mov	r0, r4
    b6b0:	f01f f892 	bl	2a7d8 <conn_cleanup>
    b6b4:	e7f0      	b.n	b698 <bt_conn_prepare_events+0x20>
	if (conn->state != BT_CONN_CONNECTED) {
    b6b6:	7b63      	ldrb	r3, [r4, #13]
    b6b8:	2b07      	cmp	r3, #7
    b6ba:	d1ed      	bne.n	b698 <bt_conn_prepare_events+0x20>
	k_poll_event_init(&events[0],
    b6bc:	4b07      	ldr	r3, [pc, #28]	; (b6dc <bt_conn_prepare_events+0x64>)
    b6be:	4630      	mov	r0, r6
    b6c0:	2200      	movs	r2, #0
    b6c2:	2104      	movs	r1, #4
    b6c4:	f022 ff1b 	bl	2e4fe <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    b6c8:	2301      	movs	r3, #1
    b6ca:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    b6ce:	2002      	movs	r0, #2
	return ev_count;
    b6d0:	e7e3      	b.n	b69a <bt_conn_prepare_events+0x22>
    b6d2:	bf00      	nop
    b6d4:	20000200 	.word	0x20000200
    b6d8:	20001728 	.word	0x20001728
    b6dc:	20001760 	.word	0x20001760

0000b6e0 <bt_conn_lookup_handle>:
{
    b6e0:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b6e2:	2101      	movs	r1, #1
    b6e4:	4801      	ldr	r0, [pc, #4]	; (b6ec <bt_conn_lookup_handle+0xc>)
    b6e6:	f01f b8c9 	b.w	2a87c <conn_lookup_handle>
    b6ea:	bf00      	nop
    b6ec:	20001728 	.word	0x20001728

0000b6f0 <bt_conn_set_state>:
{
    b6f0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    b6f2:	7b46      	ldrb	r6, [r0, #13]
    b6f4:	42b1      	cmp	r1, r6
{
    b6f6:	b08c      	sub	sp, #48	; 0x30
    b6f8:	4604      	mov	r4, r0
    b6fa:	460d      	mov	r5, r1
	if (conn->state == state) {
    b6fc:	d111      	bne.n	b722 <bt_conn_set_state+0x32>
	switch (state) {
    b6fe:	2908      	cmp	r1, #8
    b700:	bf96      	itet	ls
    b702:	4b7c      	ldrls	r3, [pc, #496]	; (b8f4 <bt_conn_set_state+0x204>)
	if (conn->state == state) {
    b704:	4b7c      	ldrhi	r3, [pc, #496]	; (b8f8 <bt_conn_set_state+0x208>)
    b706:	f853 3021 	ldrls.w	r3, [r3, r1, lsl #2]
		BT_WARN("no transition %s", state2str(state));
    b70a:	9302      	str	r3, [sp, #8]
    b70c:	4b7b      	ldr	r3, [pc, #492]	; (b8fc <bt_conn_set_state+0x20c>)
    b70e:	9301      	str	r3, [sp, #4]
    b710:	2300      	movs	r3, #0
    b712:	497b      	ldr	r1, [pc, #492]	; (b900 <bt_conn_set_state+0x210>)
    b714:	9300      	str	r3, [sp, #0]
    b716:	2202      	movs	r2, #2
    b718:	4618      	mov	r0, r3
    b71a:	f01f f81f 	bl	2a75c <z_log_msg2_runtime_create.constprop.0>
}
    b71e:	b00c      	add	sp, #48	; 0x30
    b720:	bd70      	pop	{r4, r5, r6, pc}
	conn->state = state;
    b722:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    b724:	b1d6      	cbz	r6, b75c <bt_conn_set_state+0x6c>
    b726:	2e06      	cmp	r6, #6
    b728:	d01e      	beq.n	b768 <bt_conn_set_state+0x78>
	switch (conn->state) {
    b72a:	7b63      	ldrb	r3, [r4, #13]
    b72c:	2b08      	cmp	r3, #8
    b72e:	f200 80df 	bhi.w	b8f0 <bt_conn_set_state+0x200>
    b732:	a201      	add	r2, pc, #4	; (adr r2, b738 <bt_conn_set_state+0x48>)
    b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b738:	0000b7dd 	.word	0x0000b7dd
    b73c:	0000b777 	.word	0x0000b777
    b740:	0000b71f 	.word	0x0000b71f
    b744:	0000b71f 	.word	0x0000b71f
    b748:	0000b71f 	.word	0x0000b71f
    b74c:	0000b71f 	.word	0x0000b71f
    b750:	0000b86f 	.word	0x0000b86f
    b754:	0000b7a7 	.word	0x0000b7a7
    b758:	0000b71f 	.word	0x0000b71f
		if (conn->type != BT_CONN_TYPE_ISO) {
    b75c:	7883      	ldrb	r3, [r0, #2]
    b75e:	2b08      	cmp	r3, #8
    b760:	d0e3      	beq.n	b72a <bt_conn_set_state+0x3a>
			bt_conn_ref(conn);
    b762:	f01f f857 	bl	2a814 <bt_conn_ref>
    b766:	e7e0      	b.n	b72a <bt_conn_set_state+0x3a>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b768:	7883      	ldrb	r3, [r0, #2]
    b76a:	2b01      	cmp	r3, #1
    b76c:	d1dd      	bne.n	b72a <bt_conn_set_state+0x3a>
			k_work_cancel_delayable(&conn->deferred_work);
    b76e:	3058      	adds	r0, #88	; 0x58
    b770:	f022 fba7 	bl	2dec2 <k_work_cancel_delayable>
    b774:	e7d9      	b.n	b72a <bt_conn_set_state+0x3a>
	z_impl_k_sem_give(sem);
    b776:	4d63      	ldr	r5, [pc, #396]	; (b904 <bt_conn_set_state+0x214>)
		tx->pending_no_cb = 0U;
    b778:	2600      	movs	r6, #0
	__asm__ volatile(
    b77a:	f04f 0320 	mov.w	r3, #32
    b77e:	f3ef 8211 	mrs	r2, BASEPRI
    b782:	f383 8812 	msr	BASEPRI_MAX, r3
    b786:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b78a:	69e3      	ldr	r3, [r4, #28]
    b78c:	2b00      	cmp	r3, #0
    b78e:	f000 808e 	beq.w	b8ae <bt_conn_set_state+0x1be>
			conn->pending_no_cb--;
    b792:	3b01      	subs	r3, #1
    b794:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    b796:	f382 8811 	msr	BASEPRI, r2
    b79a:	f3bf 8f6f 	isb	sy
    b79e:	4628      	mov	r0, r5
    b7a0:	f019 fa8e 	bl	24cc0 <z_impl_k_sem_give>
}
    b7a4:	e7e9      	b.n	b77a <bt_conn_set_state+0x8a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b7a6:	78a3      	ldrb	r3, [r4, #2]
    b7a8:	2b04      	cmp	r3, #4
    b7aa:	d0b8      	beq.n	b71e <bt_conn_set_state+0x2e>
	z_impl_k_queue_init(queue);
    b7ac:	f104 0038 	add.w	r0, r4, #56	; 0x38
    b7b0:	f022 fa78 	bl	2dca4 <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    b7b4:	4854      	ldr	r0, [pc, #336]	; (b908 <bt_conn_set_state+0x218>)
    b7b6:	2100      	movs	r1, #0
    b7b8:	f01a fa40 	bl	25c3c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b7bc:	2300      	movs	r3, #0
	list->tail = NULL;
    b7be:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b7c2:	78e3      	ldrb	r3, [r4, #3]
    b7c4:	2b01      	cmp	r3, #1
    b7c6:	d1aa      	bne.n	b71e <bt_conn_set_state+0x2e>
			k_work_schedule(&conn->deferred_work,
    b7c8:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b7cc:	2300      	movs	r3, #0
    b7ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
    b7d2:	b00c      	add	sp, #48	; 0x30
    b7d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    b7d8:	f019 bc46 	b.w	25068 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b7dc:	78a3      	ldrb	r3, [r4, #2]
    b7de:	2b04      	cmp	r3, #4
    b7e0:	d105      	bne.n	b7ee <bt_conn_set_state+0xfe>
			bt_conn_unref(conn);
    b7e2:	4620      	mov	r0, r4
}
    b7e4:	b00c      	add	sp, #48	; 0x30
    b7e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    b7ea:	f01f b82e 	b.w	2a84a <bt_conn_unref>
		switch (old_state) {
    b7ee:	2e08      	cmp	r6, #8
    b7f0:	d895      	bhi.n	b71e <bt_conn_set_state+0x2e>
    b7f2:	a301      	add	r3, pc, #4	; (adr r3, b7f8 <bt_conn_set_state+0x108>)
    b7f4:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    b7f8:	0000b855 	.word	0x0000b855
    b7fc:	0000b81d 	.word	0x0000b81d
    b800:	0000b847 	.word	0x0000b847
    b804:	0000b7e3 	.word	0x0000b7e3
    b808:	0000b7e3 	.word	0x0000b7e3
    b80c:	0000b847 	.word	0x0000b847
    b810:	0000b847 	.word	0x0000b847
    b814:	0000b855 	.word	0x0000b855
    b818:	0000b855 	.word	0x0000b855
			tx_notify(conn);
    b81c:	4620      	mov	r0, r4
    b81e:	f01e ffac 	bl	2a77a <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    b822:	78a3      	ldrb	r3, [r4, #2]
    b824:	2b01      	cmp	r3, #1
    b826:	d103      	bne.n	b830 <bt_conn_set_state+0x140>
				k_work_cancel_delayable(&conn->deferred_work);
    b828:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b82c:	f022 fb49 	bl	2dec2 <k_work_cancel_delayable>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    b830:	2140      	movs	r1, #64	; 0x40
    b832:	1d20      	adds	r0, r4, #4
    b834:	f01e ff79 	bl	2a72a <atomic_or>
    b838:	4833      	ldr	r0, [pc, #204]	; (b908 <bt_conn_set_state+0x218>)
    b83a:	2100      	movs	r1, #0
}
    b83c:	b00c      	add	sp, #48	; 0x30
    b83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b842:	f01a b9fb 	b.w	25c3c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b846:	7b23      	ldrb	r3, [r4, #12]
    b848:	2b00      	cmp	r3, #0
    b84a:	d0ca      	beq.n	b7e2 <bt_conn_set_state+0xf2>
				notify_connected(conn);
    b84c:	4620      	mov	r0, r4
    b84e:	f7ff fd1d 	bl	b28c <notify_connected>
    b852:	e7c6      	b.n	b7e2 <bt_conn_set_state+0xf2>
			BT_WARN("Invalid (%u) old state", state);
    b854:	4b2d      	ldr	r3, [pc, #180]	; (b90c <bt_conn_set_state+0x21c>)
		BT_WARN("no valid (%u) state was set", state);
    b856:	482a      	ldr	r0, [pc, #168]	; (b900 <bt_conn_set_state+0x210>)
    b858:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
    b85c:	aa09      	add	r2, sp, #36	; 0x24
    b85e:	2303      	movs	r3, #3
    b860:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    b864:	9305      	str	r3, [sp, #20]
    b866:	9309      	str	r3, [sp, #36]	; 0x24
    b868:	f01e ff75 	bl	2a756 <z_log_msg2_static_create.constprop.0>
		break;
    b86c:	e757      	b.n	b71e <bt_conn_set_state+0x2e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b86e:	78a3      	ldrb	r3, [r4, #2]
    b870:	2b01      	cmp	r3, #1
    b872:	f47f af54 	bne.w	b71e <bt_conn_set_state+0x2e>
					K_MSEC(10 * bt_dev.create_param.timeout));
    b876:	4b26      	ldr	r3, [pc, #152]	; (b910 <bt_conn_set_state+0x220>)
    b878:	8a98      	ldrh	r0, [r3, #20]
			k_work_schedule(&conn->deferred_work,
    b87a:	3458      	adds	r4, #88	; 0x58
					K_MSEC(10 * bt_dev.create_param.timeout));
    b87c:	b1a8      	cbz	r0, b8aa <bt_conn_set_state+0x1ba>
    b87e:	230a      	movs	r3, #10
    b880:	4358      	muls	r0, r3
    b882:	2100      	movs	r1, #0
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    b884:	03c9      	lsls	r1, r1, #15
    b886:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
    b88a:	f240 33e7 	movw	r3, #999	; 0x3e7
    b88e:	03c0      	lsls	r0, r0, #15
    b890:	18c0      	adds	r0, r0, r3
    b892:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b896:	f04f 0300 	mov.w	r3, #0
    b89a:	f141 0100 	adc.w	r1, r1, #0
    b89e:	f7f5 f9bb 	bl	c18 <__aeabi_uldivmod>
    b8a2:	4602      	mov	r2, r0
    b8a4:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
    b8a6:	4620      	mov	r0, r4
    b8a8:	e793      	b.n	b7d2 <bt_conn_set_state+0xe2>
					K_MSEC(10 * bt_dev.create_param.timeout));
    b8aa:	4601      	mov	r1, r0
    b8ac:	e7ea      	b.n	b884 <bt_conn_set_state+0x194>
	return list->head;
    b8ae:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b8b0:	b128      	cbz	r0, b8be <bt_conn_set_state+0x1ce>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b8b2:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    b8b4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b8b6:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b8b8:	4288      	cmp	r0, r1
	list->tail = node;
    b8ba:	bf08      	it	eq
    b8bc:	61a3      	streq	r3, [r4, #24]
    b8be:	f382 8811 	msr	BASEPRI, r2
    b8c2:	f3bf 8f6f 	isb	sy
		if (!node) {
    b8c6:	2800      	cmp	r0, #0
    b8c8:	f43f af29 	beq.w	b71e <bt_conn_set_state+0x2e>
	__asm__ volatile(
    b8cc:	f04f 0220 	mov.w	r2, #32
    b8d0:	f3ef 8311 	mrs	r3, BASEPRI
    b8d4:	f382 8812 	msr	BASEPRI_MAX, r2
    b8d8:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b8dc:	68c2      	ldr	r2, [r0, #12]
    b8de:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b8e0:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b8e2:	f383 8811 	msr	BASEPRI, r3
    b8e6:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b8ea:	f7ff fcc5 	bl	b278 <tx_free>
    b8ee:	e756      	b.n	b79e <bt_conn_set_state+0xae>
		BT_WARN("no valid (%u) state was set", state);
    b8f0:	4b08      	ldr	r3, [pc, #32]	; (b914 <bt_conn_set_state+0x224>)
    b8f2:	e7b0      	b.n	b856 <bt_conn_set_state+0x166>
    b8f4:	0002fb78 	.word	0x0002fb78
    b8f8:	00032a09 	.word	0x00032a09
    b8fc:	00032a13 	.word	0x00032a13
    b900:	0002f3ec 	.word	0x0002f3ec
    b904:	20000100 	.word	0x20000100
    b908:	20000200 	.word	0x20000200
    b90c:	00032a24 	.word	0x00032a24
    b910:	20000000 	.word	0x20000000
    b914:	00032a3b 	.word	0x00032a3b

0000b918 <bt_conn_index>:
		index = conn - acl_conns;
    b918:	4b03      	ldr	r3, [pc, #12]	; (b928 <bt_conn_index+0x10>)
    b91a:	1ac0      	subs	r0, r0, r3
    b91c:	4b03      	ldr	r3, [pc, #12]	; (b92c <bt_conn_index+0x14>)
    b91e:	1180      	asrs	r0, r0, #6
    b920:	4358      	muls	r0, r3
}
    b922:	b2c0      	uxtb	r0, r0
    b924:	4770      	bx	lr
    b926:	bf00      	nop
    b928:	20001728 	.word	0x20001728
    b92c:	aaaaaaab 	.word	0xaaaaaaab

0000b930 <bt_conn_create_pdu_timeout>:
{
    b930:	b530      	push	{r4, r5, lr}
    b932:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    b934:	490d      	ldr	r1, [pc, #52]	; (b96c <bt_conn_create_pdu_timeout+0x3c>)
    b936:	b089      	sub	sp, #36	; 0x24
    b938:	2800      	cmp	r0, #0
    b93a:	bf08      	it	eq
    b93c:	4608      	moveq	r0, r1
    b93e:	f021 f85c 	bl	2c9fa <net_buf_alloc_fixed>
	if (!buf) {
    b942:	4604      	mov	r4, r0
    b944:	b968      	cbnz	r0, b962 <bt_conn_create_pdu_timeout+0x32>
		BT_WARN("Unable to allocate buffer within timeout");
    b946:	4b0a      	ldr	r3, [pc, #40]	; (b970 <bt_conn_create_pdu_timeout+0x40>)
    b948:	9306      	str	r3, [sp, #24]
    b94a:	480a      	ldr	r0, [pc, #40]	; (b974 <bt_conn_create_pdu_timeout+0x44>)
    b94c:	2302      	movs	r3, #2
    b94e:	aa05      	add	r2, sp, #20
    b950:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    b954:	9301      	str	r3, [sp, #4]
    b956:	9305      	str	r3, [sp, #20]
    b958:	f01e fefd 	bl	2a756 <z_log_msg2_static_create.constprop.0>
}
    b95c:	4620      	mov	r0, r4
    b95e:	b009      	add	sp, #36	; 0x24
    b960:	bd30      	pop	{r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    b962:	1d29      	adds	r1, r5, #4
    b964:	3008      	adds	r0, #8
    b966:	f021 f86d 	bl	2ca44 <net_buf_simple_reserve>
	return buf;
    b96a:	e7f7      	b.n	b95c <bt_conn_create_pdu_timeout+0x2c>
    b96c:	20000de4 	.word	0x20000de4
    b970:	00032a57 	.word	0x00032a57
    b974:	0002f3ec 	.word	0x0002f3ec

0000b978 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    b978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b97a:	1d03      	adds	r3, r0, #4
{
    b97c:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b97e:	4618      	mov	r0, r3
    b980:	f01e fecd 	bl	2a71e <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b984:	0582      	lsls	r2, r0, #22
    b986:	d512      	bpl.n	b9ae <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    b988:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
    b98c:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    b990:	4291      	cmp	r1, r2
    b992:	d80c      	bhi.n	b9ae <notify_le_param_updated+0x36>
	    conn->le.interval >= conn->le.interval_min &&
    b994:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    b998:	4291      	cmp	r1, r2
    b99a:	d308      	bcc.n	b9ae <notify_le_param_updated+0x36>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    b99c:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    b9a0:	4291      	cmp	r1, r2
    b9a2:	d104      	bne.n	b9ae <notify_le_param_updated+0x36>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b9a4:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b9a8:	4618      	mov	r0, r3
    b9aa:	f01e fea9 	bl	2a700 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    b9ae:	4b10      	ldr	r3, [pc, #64]	; (b9f0 <notify_le_param_updated+0x78>)
    b9b0:	681d      	ldr	r5, [r3, #0]
    b9b2:	b925      	cbnz	r5, b9be <notify_le_param_updated+0x46>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b9b4:	4d0f      	ldr	r5, [pc, #60]	; (b9f4 <notify_le_param_updated+0x7c>)
    b9b6:	4f10      	ldr	r7, [pc, #64]	; (b9f8 <notify_le_param_updated+0x80>)
    b9b8:	42bd      	cmp	r5, r7
    b9ba:	d30c      	bcc.n	b9d6 <notify_le_param_updated+0x5e>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    b9bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->le_param_updated) {
    b9be:	68ee      	ldr	r6, [r5, #12]
    b9c0:	b13e      	cbz	r6, b9d2 <notify_le_param_updated+0x5a>
			cb->le_param_updated(conn, conn->le.interval,
    b9c2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b9c6:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b9ca:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b9ce:	4620      	mov	r0, r4
    b9d0:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    b9d2:	69ad      	ldr	r5, [r5, #24]
    b9d4:	e7ed      	b.n	b9b2 <notify_le_param_updated+0x3a>
		if (cb->le_param_updated) {
    b9d6:	68ee      	ldr	r6, [r5, #12]
    b9d8:	b13e      	cbz	r6, b9ea <notify_le_param_updated+0x72>
			cb->le_param_updated(conn, conn->le.interval,
    b9da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b9de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b9e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b9e6:	4620      	mov	r0, r4
    b9e8:	47b0      	blx	r6
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    b9ea:	351c      	adds	r5, #28
    b9ec:	e7e4      	b.n	b9b8 <notify_le_param_updated+0x40>
    b9ee:	bf00      	nop
    b9f0:	200022d4 	.word	0x200022d4
    b9f4:	0002f3a4 	.word	0x0002f3a4
    b9f8:	0002f3a4 	.word	0x0002f3a4

0000b9fc <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    b9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba00:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    ba02:	4608      	mov	r0, r1
{
    ba04:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
    ba06:	f01e fc2a 	bl	2a25e <bt_le_conn_params_valid>
    ba0a:	4605      	mov	r5, r0
    ba0c:	b918      	cbnz	r0, ba16 <le_param_req+0x1a>
		return false;
    ba0e:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    ba10:	4628      	mov	r0, r5
    ba12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    ba16:	4b13      	ldr	r3, [pc, #76]	; (ba64 <le_param_req+0x68>)
    ba18:	681e      	ldr	r6, [r3, #0]
    ba1a:	b946      	cbnz	r6, ba2e <le_param_req+0x32>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba1c:	4e12      	ldr	r6, [pc, #72]	; (ba68 <le_param_req+0x6c>)
    ba1e:	f8df 804c 	ldr.w	r8, [pc, #76]	; ba6c <le_param_req+0x70>
    ba22:	4546      	cmp	r6, r8
    ba24:	d2f4      	bcs.n	ba10 <le_param_req+0x14>
		if (!cb->le_param_req) {
    ba26:	68b3      	ldr	r3, [r6, #8]
    ba28:	b983      	cbnz	r3, ba4c <le_param_req+0x50>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba2a:	361c      	adds	r6, #28
    ba2c:	e7f9      	b.n	ba22 <le_param_req+0x26>
		if (!cb->le_param_req) {
    ba2e:	68b3      	ldr	r3, [r6, #8]
    ba30:	b90b      	cbnz	r3, ba36 <le_param_req+0x3a>
	for (cb = callback_list; cb; cb = cb->_next) {
    ba32:	69b6      	ldr	r6, [r6, #24]
    ba34:	e7f1      	b.n	ba1a <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
    ba36:	4621      	mov	r1, r4
    ba38:	4638      	mov	r0, r7
    ba3a:	4798      	blx	r3
    ba3c:	2800      	cmp	r0, #0
    ba3e:	d0e6      	beq.n	ba0e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    ba40:	4620      	mov	r0, r4
    ba42:	f01e fc0c 	bl	2a25e <bt_le_conn_params_valid>
    ba46:	2800      	cmp	r0, #0
    ba48:	d1f3      	bne.n	ba32 <le_param_req+0x36>
    ba4a:	e7e0      	b.n	ba0e <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
    ba4c:	4621      	mov	r1, r4
    ba4e:	4638      	mov	r0, r7
    ba50:	4798      	blx	r3
    ba52:	2800      	cmp	r0, #0
    ba54:	d0db      	beq.n	ba0e <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
    ba56:	4620      	mov	r0, r4
    ba58:	f01e fc01 	bl	2a25e <bt_le_conn_params_valid>
    ba5c:	2800      	cmp	r0, #0
    ba5e:	d1e4      	bne.n	ba2a <le_param_req+0x2e>
    ba60:	e7d5      	b.n	ba0e <le_param_req+0x12>
    ba62:	bf00      	nop
    ba64:	200022d4 	.word	0x200022d4
    ba68:	0002f3a4 	.word	0x0002f3a4
    ba6c:	0002f3a4 	.word	0x0002f3a4

0000ba70 <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    ba70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    ba74:	78c3      	ldrb	r3, [r0, #3]
{
    ba76:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
    ba78:	b973      	cbnz	r3, ba98 <bt_conn_identity_resolved+0x28>
		rpa = &conn->le.resp_addr;
    ba7a:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    ba7e:	4b10      	ldr	r3, [pc, #64]	; (bac0 <bt_conn_identity_resolved+0x50>)
    ba80:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ba82:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    ba86:	b955      	cbnz	r5, ba9e <bt_conn_identity_resolved+0x2e>
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba88:	4d0e      	ldr	r5, [pc, #56]	; (bac4 <bt_conn_identity_resolved+0x54>)
    ba8a:	4f0f      	ldr	r7, [pc, #60]	; (bac8 <bt_conn_identity_resolved+0x58>)
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    ba8c:	f104 0888 	add.w	r8, r4, #136	; 0x88
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    ba90:	42bd      	cmp	r5, r7
    ba92:	d30c      	bcc.n	baae <bt_conn_identity_resolved+0x3e>
		}
	}
}
    ba94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rpa = &conn->le.init_addr;
    ba98:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    ba9c:	e7ef      	b.n	ba7e <bt_conn_identity_resolved+0xe>
		if (cb->identity_resolved) {
    ba9e:	692b      	ldr	r3, [r5, #16]
    baa0:	b11b      	cbz	r3, baaa <bt_conn_identity_resolved+0x3a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    baa2:	463a      	mov	r2, r7
    baa4:	4631      	mov	r1, r6
    baa6:	4620      	mov	r0, r4
    baa8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    baaa:	69ad      	ldr	r5, [r5, #24]
    baac:	e7eb      	b.n	ba86 <bt_conn_identity_resolved+0x16>
		if (cb->identity_resolved) {
    baae:	692b      	ldr	r3, [r5, #16]
    bab0:	b11b      	cbz	r3, baba <bt_conn_identity_resolved+0x4a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    bab2:	4642      	mov	r2, r8
    bab4:	4631      	mov	r1, r6
    bab6:	4620      	mov	r0, r4
    bab8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    baba:	351c      	adds	r5, #28
    babc:	e7e8      	b.n	ba90 <bt_conn_identity_resolved+0x20>
    babe:	bf00      	nop
    bac0:	200022d4 	.word	0x200022d4
    bac4:	0002f3a4 	.word	0x0002f3a4
    bac8:	0002f3a4 	.word	0x0002f3a4

0000bacc <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    bacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	conn->required_sec_level = conn->sec_level;
    bace:	7a43      	ldrb	r3, [r0, #9]
    bad0:	7283      	strb	r3, [r0, #10]
{
    bad2:	4604      	mov	r4, r0
    bad4:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    bad6:	f01f f86c 	bl	2abb2 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    bada:	4b0c      	ldr	r3, [pc, #48]	; (bb0c <bt_conn_security_changed+0x40>)
    badc:	681d      	ldr	r5, [r3, #0]
    bade:	b925      	cbnz	r5, baea <bt_conn_security_changed+0x1e>
		if (cb->security_changed) {
			cb->security_changed(conn, conn->sec_level, err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bae0:	4d0b      	ldr	r5, [pc, #44]	; (bb10 <bt_conn_security_changed+0x44>)
    bae2:	4f0c      	ldr	r7, [pc, #48]	; (bb14 <bt_conn_security_changed+0x48>)
    bae4:	42bd      	cmp	r5, r7
    bae6:	d308      	bcc.n	bafa <bt_conn_security_changed+0x2e>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    bae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->security_changed) {
    baea:	696b      	ldr	r3, [r5, #20]
    baec:	b11b      	cbz	r3, baf6 <bt_conn_security_changed+0x2a>
			cb->security_changed(conn, conn->sec_level, err);
    baee:	7a61      	ldrb	r1, [r4, #9]
    baf0:	4632      	mov	r2, r6
    baf2:	4620      	mov	r0, r4
    baf4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    baf6:	69ad      	ldr	r5, [r5, #24]
    baf8:	e7f1      	b.n	bade <bt_conn_security_changed+0x12>
		if (cb->security_changed) {
    bafa:	696b      	ldr	r3, [r5, #20]
    bafc:	b11b      	cbz	r3, bb06 <bt_conn_security_changed+0x3a>
			cb->security_changed(conn, conn->sec_level, err);
    bafe:	7a61      	ldrb	r1, [r4, #9]
    bb00:	4632      	mov	r2, r6
    bb02:	4620      	mov	r0, r4
    bb04:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bb06:	351c      	adds	r5, #28
    bb08:	e7ec      	b.n	bae4 <bt_conn_security_changed+0x18>
    bb0a:	bf00      	nop
    bb0c:	200022d4 	.word	0x200022d4
    bb10:	0002f3a4 	.word	0x0002f3a4
    bb14:	0002f3a4 	.word	0x0002f3a4

0000bb18 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    bb18:	4b02      	ldr	r3, [pc, #8]	; (bb24 <bt_conn_cb_register+0xc>)
    bb1a:	681a      	ldr	r2, [r3, #0]
    bb1c:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    bb1e:	6018      	str	r0, [r3, #0]
}
    bb20:	4770      	bx	lr
    bb22:	bf00      	nop
    bb24:	200022d4 	.word	0x200022d4

0000bb28 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    bb28:	b538      	push	{r3, r4, r5, lr}
    bb2a:	4605      	mov	r5, r0
    bb2c:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    bb2e:	480a      	ldr	r0, [pc, #40]	; (bb58 <bt_conn_add_le+0x30>)
    bb30:	2101      	movs	r1, #1
    bb32:	f7ff fc6d 	bl	b410 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    bb36:	4602      	mov	r2, r0
    bb38:	b158      	cbz	r0, bb52 <bt_conn_add_le+0x2a>
		return NULL;
	}

	conn->id = id;
    bb3a:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
    bb3c:	4621      	mov	r1, r4
    bb3e:	3088      	adds	r0, #136	; 0x88
    bb40:	f01e fe02 	bl	2a748 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    bb44:	2301      	movs	r3, #1
    bb46:	7253      	strb	r3, [r2, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    bb48:	7293      	strb	r3, [r2, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    bb4a:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    bb4c:	4b03      	ldr	r3, [pc, #12]	; (bb5c <bt_conn_add_le+0x34>)
    bb4e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    bb52:	4610      	mov	r0, r2
    bb54:	bd38      	pop	{r3, r4, r5, pc}
    bb56:	bf00      	nop
    bb58:	20001728 	.word	0x20001728
    bb5c:	00280018 	.word	0x00280018

0000bb60 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    bb60:	b570      	push	{r4, r5, r6, lr}
    bb62:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bb64:	480c      	ldr	r0, [pc, #48]	; (bb98 <bt_conn_lookup_addr_le+0x38>)
{
    bb66:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bb68:	f01e fe54 	bl	2a814 <bt_conn_ref>

		if (!conn) {
    bb6c:	4604      	mov	r4, r0
    bb6e:	b128      	cbz	r0, bb7c <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    bb70:	7883      	ldrb	r3, [r0, #2]
    bb72:	2b01      	cmp	r3, #1
    bb74:	d004      	beq.n	bb80 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    bb76:	f01e fe68 	bl	2a84a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    bb7a:	2400      	movs	r4, #0
}
    bb7c:	4620      	mov	r0, r4
    bb7e:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    bb80:	4629      	mov	r1, r5
    bb82:	4632      	mov	r2, r6
    bb84:	f01e ff09 	bl	2a99a <bt_conn_is_peer_addr_le>
    bb88:	4605      	mov	r5, r0
    bb8a:	2800      	cmp	r0, #0
    bb8c:	d1f6      	bne.n	bb7c <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    bb8e:	4620      	mov	r0, r4
    bb90:	f01e fe5b 	bl	2a84a <bt_conn_unref>
	return NULL;
    bb94:	462c      	mov	r4, r5
			continue;
    bb96:	e7f1      	b.n	bb7c <bt_conn_lookup_addr_le+0x1c>
    bb98:	20001728 	.word	0x20001728

0000bb9c <bt_conn_exists_le>:
{
    bb9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    bb9e:	f7ff ffdf 	bl	bb60 <bt_conn_lookup_addr_le>
	if (conn) {
    bba2:	4604      	mov	r4, r0
    bba4:	b1a0      	cbz	r0, bbd0 <bt_conn_exists_le+0x34>
		BT_WARN("Found valid connection in %s state",
    bba6:	7b43      	ldrb	r3, [r0, #13]
    bba8:	490a      	ldr	r1, [pc, #40]	; (bbd4 <bt_conn_exists_le+0x38>)
    bbaa:	2b08      	cmp	r3, #8
    bbac:	bf96      	itet	ls
    bbae:	4a0a      	ldrls	r2, [pc, #40]	; (bbd8 <bt_conn_exists_le+0x3c>)
    bbb0:	4b0a      	ldrhi	r3, [pc, #40]	; (bbdc <bt_conn_exists_le+0x40>)
    bbb2:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
    bbb6:	9302      	str	r3, [sp, #8]
    bbb8:	4b09      	ldr	r3, [pc, #36]	; (bbe0 <bt_conn_exists_le+0x44>)
    bbba:	9301      	str	r3, [sp, #4]
    bbbc:	2300      	movs	r3, #0
    bbbe:	4618      	mov	r0, r3
    bbc0:	9300      	str	r3, [sp, #0]
    bbc2:	2202      	movs	r2, #2
    bbc4:	f01e fdca 	bl	2a75c <z_log_msg2_runtime_create.constprop.0>
		bt_conn_unref(conn);
    bbc8:	4620      	mov	r0, r4
    bbca:	f01e fe3e 	bl	2a84a <bt_conn_unref>
		return true;
    bbce:	2001      	movs	r0, #1
}
    bbd0:	b004      	add	sp, #16
    bbd2:	bd10      	pop	{r4, pc}
    bbd4:	0002f3ec 	.word	0x0002f3ec
    bbd8:	0002fb78 	.word	0x0002fb78
    bbdc:	00032a09 	.word	0x00032a09
    bbe0:	00032a80 	.word	0x00032a80

0000bbe4 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    bbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbe6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bbe8:	480e      	ldr	r0, [pc, #56]	; (bc24 <bt_conn_lookup_state_le+0x40>)
{
    bbea:	460e      	mov	r6, r1
    bbec:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bbee:	f01e fe11 	bl	2a814 <bt_conn_ref>

		if (!conn) {
    bbf2:	4604      	mov	r4, r0
    bbf4:	b1a0      	cbz	r0, bc20 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    bbf6:	7883      	ldrb	r3, [r0, #2]
    bbf8:	2b01      	cmp	r3, #1
    bbfa:	d003      	beq.n	bc04 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    bbfc:	f01e fe25 	bl	2a84a <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    bc00:	2400      	movs	r4, #0
			continue;
    bc02:	e00d      	b.n	bc20 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    bc04:	b136      	cbz	r6, bc14 <bt_conn_lookup_state_le+0x30>
    bc06:	4632      	mov	r2, r6
    bc08:	4629      	mov	r1, r5
    bc0a:	f01e fec6 	bl	2a99a <bt_conn_is_peer_addr_le>
    bc0e:	b908      	cbnz	r0, bc14 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    bc10:	4620      	mov	r0, r4
    bc12:	e7f3      	b.n	bbfc <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    bc14:	7b63      	ldrb	r3, [r4, #13]
    bc16:	42bb      	cmp	r3, r7
    bc18:	d1fa      	bne.n	bc10 <bt_conn_lookup_state_le+0x2c>
    bc1a:	7a23      	ldrb	r3, [r4, #8]
    bc1c:	42ab      	cmp	r3, r5
    bc1e:	d1f7      	bne.n	bc10 <bt_conn_lookup_state_le+0x2c>
}
    bc20:	4620      	mov	r0, r4
    bc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    bc24:	20001728 	.word	0x20001728

0000bc28 <bt_le_set_auto_conn>:
}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    bc28:	b570      	push	{r4, r5, r6, lr}
    bc2a:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bc2c:	482f      	ldr	r0, [pc, #188]	; (bcec <bt_le_set_auto_conn+0xc4>)
    bc2e:	f01e fd76 	bl	2a71e <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    bc32:	0780      	lsls	r0, r0, #30
{
    bc34:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    bc36:	d553      	bpl.n	bce0 <bt_le_set_auto_conn+0xb8>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
    bc38:	b929      	cbnz	r1, bc46 <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
    bc3a:	f01e fc3d 	bl	2a4b8 <bt_id_scan_random_addr_check>
    bc3e:	b940      	cbnz	r0, bc52 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
    bc40:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
    bc44:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
    bc46:	4608      	mov	r0, r1
    bc48:	f01e fb09 	bl	2a25e <bt_le_conn_params_valid>
    bc4c:	2800      	cmp	r0, #0
    bc4e:	d1f4      	bne.n	bc3a <bt_le_set_auto_conn+0x12>
    bc50:	e7f6      	b.n	bc40 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
    bc52:	4631      	mov	r1, r6
    bc54:	2000      	movs	r0, #0
    bc56:	f7ff ff83 	bl	bb60 <bt_conn_lookup_addr_le>
	if (!conn) {
    bc5a:	4604      	mov	r4, r0
    bc5c:	b928      	cbnz	r0, bc6a <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
    bc5e:	4631      	mov	r1, r6
    bc60:	f7ff ff62 	bl	bb28 <bt_conn_add_le>
		if (!conn) {
    bc64:	4604      	mov	r4, r0
    bc66:	2800      	cmp	r0, #0
    bc68:	d03d      	beq.n	bce6 <bt_le_set_auto_conn+0xbe>
		if (!atomic_test_and_set_bit(conn->flags,
    bc6a:	1d20      	adds	r0, r4, #4
	if (param) {
    bc6c:	b33d      	cbz	r5, bcbe <bt_le_set_auto_conn+0x96>
	conn->le.interval_min = param->interval_min;
    bc6e:	882b      	ldrh	r3, [r5, #0]
    bc70:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = param->interval_max;
    bc74:	886b      	ldrh	r3, [r5, #2]
    bc76:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
	conn->le.latency = param->latency;
    bc7a:	88ab      	ldrh	r3, [r5, #4]
    bc7c:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = param->timeout;
    bc80:	88eb      	ldrh	r3, [r5, #6]
    bc82:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    bc86:	2101      	movs	r1, #1
    bc88:	f01e fd4f 	bl	2a72a <atomic_or>
		if (!atomic_test_and_set_bit(conn->flags,
    bc8c:	07c1      	lsls	r1, r0, #31
    bc8e:	d402      	bmi.n	bc96 <bt_le_set_auto_conn+0x6e>
			bt_conn_ref(conn);
    bc90:	4620      	mov	r0, r4
    bc92:	f01e fdbf 	bl	2a814 <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
    bc96:	7b63      	ldrb	r3, [r4, #13]
    bc98:	b963      	cbnz	r3, bcb4 <bt_le_set_auto_conn+0x8c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bc9a:	4814      	ldr	r0, [pc, #80]	; (bcec <bt_le_set_auto_conn+0xc4>)
    bc9c:	f01e fd3f 	bl	2a71e <atomic_get>
    bca0:	0783      	lsls	r3, r0, #30
    bca2:	d507      	bpl.n	bcb4 <bt_le_set_auto_conn+0x8c>
		if (param) {
    bca4:	b11d      	cbz	r5, bcae <bt_le_set_auto_conn+0x86>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    bca6:	2102      	movs	r1, #2
    bca8:	4620      	mov	r0, r4
    bcaa:	f7ff fd21 	bl	b6f0 <bt_conn_set_state>
		bt_le_scan_update(false);
    bcae:	2000      	movs	r0, #0
    bcb0:	f7ff f84c 	bl	ad4c <bt_le_scan_update>
	bt_conn_unref(conn);
    bcb4:	4620      	mov	r0, r4
    bcb6:	f01e fdc8 	bl	2a84a <bt_conn_unref>
	return 0;
    bcba:	2000      	movs	r0, #0
    bcbc:	e7c2      	b.n	bc44 <bt_le_set_auto_conn+0x1c>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bcbe:	f06f 0101 	mvn.w	r1, #1
    bcc2:	f01e fd1d 	bl	2a700 <atomic_and>
		if (atomic_test_and_clear_bit(conn->flags,
    bcc6:	07c2      	lsls	r2, r0, #31
    bcc8:	d5e5      	bpl.n	bc96 <bt_le_set_auto_conn+0x6e>
			bt_conn_unref(conn);
    bcca:	4620      	mov	r0, r4
    bccc:	f01e fdbd 	bl	2a84a <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    bcd0:	7b63      	ldrb	r3, [r4, #13]
    bcd2:	2b02      	cmp	r3, #2
    bcd4:	d1df      	bne.n	bc96 <bt_le_set_auto_conn+0x6e>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    bcd6:	4629      	mov	r1, r5
    bcd8:	4620      	mov	r0, r4
    bcda:	f7ff fd09 	bl	b6f0 <bt_conn_set_state>
    bcde:	e7da      	b.n	bc96 <bt_le_set_auto_conn+0x6e>
		return -EAGAIN;
    bce0:	f06f 000a 	mvn.w	r0, #10
    bce4:	e7ae      	b.n	bc44 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    bce6:	f06f 000b 	mvn.w	r0, #11
    bcea:	e7ab      	b.n	bc44 <bt_le_set_auto_conn+0x1c>
    bcec:	200000cc 	.word	0x200000cc

0000bcf0 <send_conn_le_param_update>:
{
    bcf0:	b538      	push	{r3, r4, r5, lr}
    bcf2:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    bcf4:	4608      	mov	r0, r1
{
    bcf6:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    bcf8:	f01e fab1 	bl	2a25e <bt_le_conn_params_valid>
    bcfc:	b338      	cbz	r0, bd4e <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    bcfe:	4b15      	ldr	r3, [pc, #84]	; (bd54 <send_conn_le_param_update+0x64>)
    bd00:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
    bd04:	0799      	lsls	r1, r3, #30
    bd06:	d407      	bmi.n	bd18 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
    bd08:	78e3      	ldrb	r3, [r4, #3]
    bd0a:	b173      	cbz	r3, bd2a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    bd0c:	4629      	mov	r1, r5
    bd0e:	4620      	mov	r0, r4
}
    bd10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    bd14:	f000 bb26 	b.w	c364 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    bd18:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    bd1c:	079a      	lsls	r2, r3, #30
    bd1e:	d5f3      	bpl.n	bd08 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bd20:	1d20      	adds	r0, r4, #4
    bd22:	f01e fcfc 	bl	2a71e <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    bd26:	0543      	lsls	r3, r0, #21
    bd28:	d4ee      	bmi.n	bd08 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    bd2a:	4629      	mov	r1, r5
    bd2c:	4620      	mov	r0, r4
    bd2e:	f01e fe8f 	bl	2aa50 <bt_conn_le_conn_update>
		if (rc == 0) {
    bd32:	b958      	cbnz	r0, bd4c <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
    bd34:	882b      	ldrh	r3, [r5, #0]
    bd36:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
			conn->le.interval_max = param->interval_max;
    bd3a:	886b      	ldrh	r3, [r5, #2]
    bd3c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
			conn->le.pending_latency = param->latency;
    bd40:	88ab      	ldrh	r3, [r5, #4]
    bd42:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    bd46:	88eb      	ldrh	r3, [r5, #6]
    bd48:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    bd4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bd4e:	f06f 0015 	mvn.w	r0, #21
    bd52:	e7fb      	b.n	bd4c <send_conn_le_param_update+0x5c>
    bd54:	20000000 	.word	0x20000000

0000bd58 <deferred_work>:
{
    bd58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    bd5a:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    bd5e:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(dwork, struct bt_conn, deferred_work);
    bd60:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    bd64:	b9fb      	cbnz	r3, bda6 <deferred_work+0x4e>
		bt_l2cap_disconnected(conn);
    bd66:	4628      	mov	r0, r5
    bd68:	f01e ff12 	bl	2ab90 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    bd6c:	4b2a      	ldr	r3, [pc, #168]	; (be18 <deferred_work+0xc0>)
    bd6e:	681e      	ldr	r6, [r3, #0]
    bd70:	b94e      	cbnz	r6, bd86 <deferred_work+0x2e>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bd72:	4e2a      	ldr	r6, [pc, #168]	; (be1c <deferred_work+0xc4>)
    bd74:	4f2a      	ldr	r7, [pc, #168]	; (be20 <deferred_work+0xc8>)
    bd76:	42be      	cmp	r6, r7
    bd78:	d30d      	bcc.n	bd96 <deferred_work+0x3e>
		bt_conn_unref(conn);
    bd7a:	4628      	mov	r0, r5
}
    bd7c:	b003      	add	sp, #12
    bd7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    bd82:	f01e bd62 	b.w	2a84a <bt_conn_unref>
		if (cb->disconnected) {
    bd86:	6873      	ldr	r3, [r6, #4]
    bd88:	b11b      	cbz	r3, bd92 <deferred_work+0x3a>
			cb->disconnected(conn, conn->err);
    bd8a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    bd8e:	4628      	mov	r0, r5
    bd90:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    bd92:	69b6      	ldr	r6, [r6, #24]
    bd94:	e7ec      	b.n	bd70 <deferred_work+0x18>
		if (cb->disconnected) {
    bd96:	6873      	ldr	r3, [r6, #4]
    bd98:	b11b      	cbz	r3, bda2 <deferred_work+0x4a>
			cb->disconnected(conn, conn->err);
    bd9a:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    bd9e:	4628      	mov	r0, r5
    bda0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
    bda2:	361c      	adds	r6, #28
    bda4:	e7e7      	b.n	bd76 <deferred_work+0x1e>
	if (conn->type != BT_CONN_TYPE_LE) {
    bda6:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    bdaa:	2b01      	cmp	r3, #1
    bdac:	d132      	bne.n	be14 <deferred_work+0xbc>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bdae:	f810 3c55 	ldrb.w	r3, [r0, #-85]
    bdb2:	b923      	cbnz	r3, bdbe <deferred_work+0x66>
}
    bdb4:	b003      	add	sp, #12
    bdb6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_create_conn_cancel();
    bdba:	f7fd bb19 	b.w	93f0 <bt_le_create_conn_cancel>
	if (atomic_test_and_clear_bit(conn->flags,
    bdbe:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bdc2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    bdc6:	4630      	mov	r0, r6
    bdc8:	f01e fc9a 	bl	2a700 <atomic_and>
    bdcc:	0583      	lsls	r3, r0, #22
    bdce:	d51b      	bpl.n	be08 <deferred_work+0xb0>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    bdd0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    bdd4:	f8ad 3000 	strh.w	r3, [sp]
    bdd8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    bddc:	f8ad 3002 	strh.w	r3, [sp, #2]
    bde0:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    bde4:	f8ad 3004 	strh.w	r3, [sp, #4]
    bde8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    bdec:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    bdf0:	4669      	mov	r1, sp
    bdf2:	4628      	mov	r0, r5
    bdf4:	f7ff ff7c 	bl	bcf0 <send_conn_le_param_update>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    bdf8:	f44f 7180 	mov.w	r1, #256	; 0x100
    bdfc:	4630      	mov	r0, r6
}
    bdfe:	b003      	add	sp, #12
    be00:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    be04:	f01e bc91 	b.w	2a72a <atomic_or>
		param = BT_LE_CONN_PARAM(
    be08:	4a06      	ldr	r2, [pc, #24]	; (be24 <deferred_work+0xcc>)
    be0a:	6810      	ldr	r0, [r2, #0]
    be0c:	6851      	ldr	r1, [r2, #4]
    be0e:	466b      	mov	r3, sp
    be10:	c303      	stmia	r3!, {r0, r1}
    be12:	e7ed      	b.n	bdf0 <deferred_work+0x98>
}
    be14:	b003      	add	sp, #12
    be16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    be18:	200022d4 	.word	0x200022d4
    be1c:	0002f3a4 	.word	0x0002f3a4
    be20:	0002f3a4 	.word	0x0002f3a4
    be24:	0002f6f0 	.word	0x0002f6f0

0000be28 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
    be28:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    be2a:	4801      	ldr	r0, [pc, #4]	; (be30 <bt_conn_create_frag_timeout+0x8>)
    be2c:	f7ff bd80 	b.w	b930 <bt_conn_create_pdu_timeout>
    be30:	20000e3c 	.word	0x20000e3c

0000be34 <create_frag>:
{
    be34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be38:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    be3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    be3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    be42:	2000      	movs	r0, #0
{
    be44:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    be46:	f7ff ffef 	bl	be28 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    be4a:	7b73      	ldrb	r3, [r6, #13]
    be4c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    be4e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    be50:	f04f 0600 	mov.w	r6, #0
    be54:	d005      	beq.n	be62 <create_frag+0x2e>
		net_buf_unref(frag);
    be56:	f014 fdeb 	bl	20a30 <net_buf_unref>
		return NULL;
    be5a:	4635      	mov	r5, r6
}
    be5c:	4628      	mov	r0, r5
    be5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    be62:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    be64:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    be68:	4e0c      	ldr	r6, [pc, #48]	; (be9c <create_frag+0x68>)
    be6a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    be6c:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
    be70:	f020 fe78 	bl	2cb64 <net_buf_simple_tailroom>
    be74:	4580      	cmp	r8, r0
    be76:	d20c      	bcs.n	be92 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    be78:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    be7c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    be80:	4632      	mov	r2, r6
    be82:	4638      	mov	r0, r7
    be84:	f020 fe27 	bl	2cad6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    be88:	4631      	mov	r1, r6
    be8a:	4620      	mov	r0, r4
    be8c:	f020 fe46 	bl	2cb1c <net_buf_simple_pull>
    be90:	e7e4      	b.n	be5c <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    be92:	4638      	mov	r0, r7
    be94:	f020 fe66 	bl	2cb64 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    be98:	b286      	uxth	r6, r0
    be9a:	e7ef      	b.n	be7c <create_frag+0x48>
    be9c:	20000000 	.word	0x20000000

0000bea0 <bt_conn_process_tx>:
{
    bea0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    bea2:	7b43      	ldrb	r3, [r0, #13]
{
    bea4:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    bea6:	b95b      	cbnz	r3, bec0 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bea8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    beac:	3004      	adds	r0, #4
    beae:	f01e fc27 	bl	2a700 <atomic_and>
    beb2:	0643      	lsls	r3, r0, #25
    beb4:	d504      	bpl.n	bec0 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    beb6:	4620      	mov	r0, r4
}
    beb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    bebc:	f01e bc8c 	b.w	2a7d8 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    bec0:	2200      	movs	r2, #0
    bec2:	2300      	movs	r3, #0
    bec4:	f104 0038 	add.w	r0, r4, #56	; 0x38
    bec8:	f020 fd9c 	bl	2ca04 <net_buf_get>
	BT_ASSERT(buf);
    becc:	4605      	mov	r5, r0
    bece:	b960      	cbnz	r0, beea <bt_conn_process_tx+0x4a>
    bed0:	4a1f      	ldr	r2, [pc, #124]	; (bf50 <bt_conn_process_tx+0xb0>)
    bed2:	4920      	ldr	r1, [pc, #128]	; (bf54 <bt_conn_process_tx+0xb4>)
    bed4:	4820      	ldr	r0, [pc, #128]	; (bf58 <bt_conn_process_tx+0xb8>)
    bed6:	f240 23e7 	movw	r3, #743	; 0x2e7
    beda:	f01c f865 	bl	27fa8 <printk>
    bede:	4040      	eors	r0, r0
    bee0:	f380 8811 	msr	BASEPRI, r0
    bee4:	f04f 0003 	mov.w	r0, #3
    bee8:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    beea:	4e1c      	ldr	r6, [pc, #112]	; (bf5c <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    beec:	89aa      	ldrh	r2, [r5, #12]
    beee:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    bef2:	429a      	cmp	r2, r3
    bef4:	d807      	bhi.n	bf06 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    bef6:	2300      	movs	r3, #0
    bef8:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    befa:	4629      	mov	r1, r5
    befc:	4620      	mov	r0, r4
    befe:	f7ff f9e9 	bl	b2d4 <send_frag>
	if (!send_buf(conn, buf)) {
    bf02:	b130      	cbz	r0, bf12 <bt_conn_process_tx+0x72>
}
    bf04:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    bf06:	4629      	mov	r1, r5
    bf08:	4620      	mov	r0, r4
    bf0a:	f7ff ff93 	bl	be34 <create_frag>
	if (!frag) {
    bf0e:	4601      	mov	r1, r0
    bf10:	b920      	cbnz	r0, bf1c <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    bf12:	4628      	mov	r0, r5
}
    bf14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    bf18:	f014 bd8a 	b.w	20a30 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    bf1c:	2301      	movs	r3, #1
    bf1e:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bf20:	4620      	mov	r0, r4
    bf22:	f7ff f9d7 	bl	b2d4 <send_frag>
    bf26:	2800      	cmp	r0, #0
    bf28:	d0f3      	beq.n	bf12 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    bf2a:	89aa      	ldrh	r2, [r5, #12]
    bf2c:	f8b6 30fc 	ldrh.w	r3, [r6, #252]	; 0xfc
    bf30:	429a      	cmp	r2, r3
    bf32:	d802      	bhi.n	bf3a <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    bf34:	2300      	movs	r3, #0
    bf36:	2203      	movs	r2, #3
    bf38:	e7df      	b.n	befa <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    bf3a:	4629      	mov	r1, r5
    bf3c:	4620      	mov	r0, r4
    bf3e:	f7ff ff79 	bl	be34 <create_frag>
		if (!frag) {
    bf42:	4601      	mov	r1, r0
    bf44:	2800      	cmp	r0, #0
    bf46:	d0e4      	beq.n	bf12 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bf48:	2301      	movs	r3, #1
    bf4a:	461a      	mov	r2, r3
    bf4c:	e7e8      	b.n	bf20 <bt_conn_process_tx+0x80>
    bf4e:	bf00      	nop
    bf50:	00032aa3 	.word	0x00032aa3
    bf54:	00031fa5 	.word	0x00031fa5
    bf58:	00032124 	.word	0x00032124
    bf5c:	20000000 	.word	0x20000000

0000bf60 <bt_conn_auth_cb_register>:
}

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    bf60:	4b0c      	ldr	r3, [pc, #48]	; (bf94 <bt_conn_auth_cb_register+0x34>)
    bf62:	b908      	cbnz	r0, bf68 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    bf64:	6018      	str	r0, [r3, #0]
		return 0;
    bf66:	4770      	bx	lr
	}

	if (bt_auth) {
    bf68:	681a      	ldr	r2, [r3, #0]
    bf6a:	b962      	cbnz	r2, bf86 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    bf6c:	6902      	ldr	r2, [r0, #16]
    bf6e:	b93a      	cbnz	r2, bf80 <bt_conn_auth_cb_register+0x20>
    bf70:	6802      	ldr	r2, [r0, #0]
    bf72:	b95a      	cbnz	r2, bf8c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    bf74:	6842      	ldr	r2, [r0, #4]
    bf76:	b94a      	cbnz	r2, bf8c <bt_conn_auth_cb_register+0x2c>
    bf78:	6882      	ldr	r2, [r0, #8]
    bf7a:	b93a      	cbnz	r2, bf8c <bt_conn_auth_cb_register+0x2c>
    bf7c:	6942      	ldr	r2, [r0, #20]
    bf7e:	b92a      	cbnz	r2, bf8c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    bf80:	6018      	str	r0, [r3, #0]
	return 0;
    bf82:	2000      	movs	r0, #0
    bf84:	4770      	bx	lr
		return -EALREADY;
    bf86:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bf8a:	4770      	bx	lr
		return -EINVAL;
    bf8c:	f06f 0015 	mvn.w	r0, #21
}
    bf90:	4770      	bx	lr
    bf92:	bf00      	nop
    bf94:	200022d0 	.word	0x200022d0

0000bf98 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    bf98:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    bf9a:	4914      	ldr	r1, [pc, #80]	; (bfec <bt_conn_init+0x54>)
    bf9c:	4814      	ldr	r0, [pc, #80]	; (bff0 <bt_conn_init+0x58>)
    bf9e:	f021 fe8d 	bl	2dcbc <k_queue_append>
    bfa2:	4914      	ldr	r1, [pc, #80]	; (bff4 <bt_conn_init+0x5c>)
    bfa4:	4812      	ldr	r0, [pc, #72]	; (bff0 <bt_conn_init+0x58>)
    bfa6:	f021 fe89 	bl	2dcbc <k_queue_append>
    bfaa:	4913      	ldr	r1, [pc, #76]	; (bff8 <bt_conn_init+0x60>)
    bfac:	4810      	ldr	r0, [pc, #64]	; (bff0 <bt_conn_init+0x58>)
    bfae:	f021 fe85 	bl	2dcbc <k_queue_append>
	}

	bt_att_init();
    bfb2:	f01f f9ac 	bl	2b30e <bt_att_init>

	err = bt_smp_init();
    bfb6:	f004 fdcd 	bl	10b54 <bt_smp_init>
	if (err) {
    bfba:	4605      	mov	r5, r0
    bfbc:	b998      	cbnz	r0, bfe6 <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
    bfbe:	f01e fe5d 	bl	2ac7c <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    bfc2:	480e      	ldr	r0, [pc, #56]	; (bffc <bt_conn_init+0x64>)
    bfc4:	f01e fc26 	bl	2a814 <bt_conn_ref>

			if (!conn) {
    bfc8:	4604      	mov	r4, r0
    bfca:	b160      	cbz	r0, bfe6 <bt_conn_init+0x4e>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    bfcc:	3004      	adds	r0, #4
    bfce:	f01e fba6 	bl	2a71e <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
    bfd2:	07c3      	lsls	r3, r0, #31
    bfd4:	d504      	bpl.n	bfe0 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
    bfd6:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    bfd8:	2102      	movs	r1, #2
    bfda:	4620      	mov	r0, r4
    bfdc:	f7ff fb88 	bl	b6f0 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
    bfe0:	4620      	mov	r0, r4
    bfe2:	f01e fc32 	bl	2a84a <bt_conn_unref>
		}
	}

	return 0;
}
    bfe6:	4628      	mov	r0, r5
    bfe8:	bd38      	pop	{r3, r4, r5, pc}
    bfea:	bf00      	nop
    bfec:	200022d8 	.word	0x200022d8
    bff0:	20000db4 	.word	0x20000db4
    bff4:	200022e8 	.word	0x200022e8
    bff8:	200022f8 	.word	0x200022f8
    bffc:	20001728 	.word	0x20001728

0000c000 <l2cap_create_le_sig_pdu.constprop.0>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
		bt_l2cap_chan_del(chan);
	}
}

static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    c000:	b5f0      	push	{r4, r5, r6, r7, lr}

struct net_buf *bt_l2cap_create_pdu_timeout(struct net_buf_pool *pool,
					    size_t reserve,
					    k_timeout_t timeout)
{
	return bt_conn_create_pdu_timeout(pool,
    c002:	2300      	movs	r3, #0
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    c004:	b089      	sub	sp, #36	; 0x24
    c006:	4605      	mov	r5, r0
    c008:	460f      	mov	r7, r1
    c00a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    c00c:	2104      	movs	r1, #4
    c00e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    c012:	2000      	movs	r0, #0
    c014:	f7ff fc8c 	bl	b930 <bt_conn_create_pdu_timeout>
	if (!buf) {
    c018:	4604      	mov	r4, r0
    c01a:	b970      	cbnz	r0, c03a <l2cap_create_le_sig_pdu.constprop.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    c01c:	4b0b      	ldr	r3, [pc, #44]	; (c04c <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    c01e:	480c      	ldr	r0, [pc, #48]	; (c050 <l2cap_create_le_sig_pdu.constprop.0+0x50>)
    c020:	e9cd 3506 	strd	r3, r5, [sp, #24]
    c024:	aa05      	add	r2, sp, #20
    c026:	2303      	movs	r3, #3
    c028:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c02c:	9301      	str	r3, [sp, #4]
    c02e:	9305      	str	r3, [sp, #20]
    c030:	f01e fd78 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
}
    c034:	4620      	mov	r0, r4
    c036:	b009      	add	sp, #36	; 0x24
    c038:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    c03a:	2104      	movs	r1, #4
    c03c:	3008      	adds	r0, #8
    c03e:	f020 fd44 	bl	2caca <net_buf_simple_add>
	hdr->code = code;
    c042:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    c044:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    c046:	8046      	strh	r6, [r0, #2]
	return buf;
    c048:	e7f4      	b.n	c034 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    c04a:	bf00      	nop
    c04c:	00032b30 	.word	0x00032b30
    c050:	0002f4f4 	.word	0x0002f4f4

0000c054 <l2cap_accept>:
	 */
	(void)k_work_cancel_delayable(&chan->rtx_work);
}

static int l2cap_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    c054:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    c056:	4a0d      	ldr	r2, [pc, #52]	; (c08c <l2cap_accept+0x38>)
{
    c058:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    c05a:	6810      	ldr	r0, [r2, #0]
{
    c05c:	b089      	sub	sp, #36	; 0x24
		if (l2cap->chan.chan.conn) {
    c05e:	b928      	cbnz	r0, c06c <l2cap_accept+0x18>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    c060:	4b0b      	ldr	r3, [pc, #44]	; (c090 <l2cap_accept+0x3c>)
    c062:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    c064:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    c066:	b009      	add	sp, #36	; 0x24
    c068:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available L2CAP context for conn %p", conn);
    c06c:	4a09      	ldr	r2, [pc, #36]	; (c094 <l2cap_accept+0x40>)
    c06e:	480a      	ldr	r0, [pc, #40]	; (c098 <l2cap_accept+0x44>)
    c070:	e9cd 2306 	strd	r2, r3, [sp, #24]
    c074:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c078:	2303      	movs	r3, #3
    c07a:	aa05      	add	r2, sp, #20
    c07c:	9301      	str	r3, [sp, #4]
    c07e:	9305      	str	r3, [sp, #20]
    c080:	f01e fd50 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    c084:	f06f 000b 	mvn.w	r0, #11
    c088:	e7ed      	b.n	c066 <l2cap_accept+0x12>
    c08a:	bf00      	nop
    c08c:	200017e8 	.word	0x200017e8
    c090:	0002fbbc 	.word	0x0002fbbc
    c094:	00032b58 	.word	0x00032b58
    c098:	0002f4f4 	.word	0x0002f4f4

0000c09c <l2cap_rtx_timeout>:
{
    c09c:	b530      	push	{r4, r5, lr}
	struct bt_conn *conn = chan->chan.conn;
    c09e:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
    c0a0:	4b0c      	ldr	r3, [pc, #48]	; (c0d4 <l2cap_rtx_timeout+0x38>)
	struct bt_conn *conn = chan->chan.conn;
    c0a2:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    c0a6:	480c      	ldr	r0, [pc, #48]	; (c0d8 <l2cap_rtx_timeout+0x3c>)
{
    c0a8:	b089      	sub	sp, #36	; 0x24
	BT_ERR("chan %p timeout", chan);
    c0aa:	e9cd 3406 	strd	r3, r4, [sp, #24]
    c0ae:	aa05      	add	r2, sp, #20
    c0b0:	2303      	movs	r3, #3
    c0b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c0b6:	9301      	str	r3, [sp, #4]
    c0b8:	9305      	str	r3, [sp, #20]
    c0ba:	f01e fd33 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
	bt_l2cap_chan_remove(conn, &chan->chan);
    c0be:	4628      	mov	r0, r5
    c0c0:	4621      	mov	r1, r4
    c0c2:	f01e fd32 	bl	2ab2a <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    c0c6:	4620      	mov	r0, r4
}
    c0c8:	b009      	add	sp, #36	; 0x24
    c0ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    c0ce:	f01e bd4a 	b.w	2ab66 <bt_l2cap_chan_del>
    c0d2:	bf00      	nop
    c0d4:	00032b7f 	.word	0x00032b7f
    c0d8:	0002f4f4 	.word	0x0002f4f4

0000c0dc <bt_l2cap_connected>:
{
    c0dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c0e0:	4e29      	ldr	r6, [pc, #164]	; (c188 <bt_l2cap_connected+0xac>)
    c0e2:	4f2a      	ldr	r7, [pc, #168]	; (c18c <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c0e4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; c190 <bt_l2cap_connected+0xb4>
{
    c0e8:	4604      	mov	r4, r0
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c0ea:	42be      	cmp	r6, r7
    c0ec:	d302      	bcc.n	c0f4 <bt_l2cap_connected+0x18>
}
    c0ee:	b003      	add	sp, #12
    c0f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    c0f4:	6873      	ldr	r3, [r6, #4]
    c0f6:	a901      	add	r1, sp, #4
    c0f8:	4620      	mov	r0, r4
    c0fa:	4798      	blx	r3
    c0fc:	2800      	cmp	r0, #0
    c0fe:	db3d      	blt.n	c17c <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    c100:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    c102:	8833      	ldrh	r3, [r6, #0]
    c104:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    c108:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c10c:	4641      	mov	r1, r8
    c10e:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    c112:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    c116:	f021 fec8 	bl	2deaa <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c11a:	f3bf 8f5b 	dmb	ish
    c11e:	f105 0368 	add.w	r3, r5, #104	; 0x68
    c122:	2200      	movs	r2, #0
    c124:	e853 1f00 	ldrex	r1, [r3]
    c128:	e843 2000 	strex	r0, r2, [r3]
    c12c:	2800      	cmp	r0, #0
    c12e:	d1f9      	bne.n	c124 <bt_l2cap_connected+0x48>
    c130:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    c134:	60aa      	str	r2, [r5, #8]
	return list->tail;
    c136:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    c138:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    c13c:	bb02      	cbnz	r2, c180 <bt_l2cap_connected+0xa4>
	list->head = node;
    c13e:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    c142:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    c144:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    c146:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    c148:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    c14c:	681b      	ldr	r3, [r3, #0]
    c14e:	b103      	cbz	r3, c152 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    c150:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c152:	9b01      	ldr	r3, [sp, #4]
    c154:	f3bf 8f5b 	dmb	ish
    c158:	3368      	adds	r3, #104	; 0x68
    c15a:	e853 2f00 	ldrex	r2, [r3]
    c15e:	f042 0201 	orr.w	r2, r2, #1
    c162:	e843 2100 	strex	r1, r2, [r3]
    c166:	2900      	cmp	r1, #0
    c168:	d1f7      	bne.n	c15a <bt_l2cap_connected+0x7e>
    c16a:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    c16e:	9801      	ldr	r0, [sp, #4]
    c170:	6843      	ldr	r3, [r0, #4]
    c172:	699b      	ldr	r3, [r3, #24]
    c174:	b113      	cbz	r3, c17c <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    c176:	f100 0168 	add.w	r1, r0, #104	; 0x68
    c17a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    c17c:	360c      	adds	r6, #12
    c17e:	e7b4      	b.n	c0ea <bt_l2cap_connected+0xe>
	parent->next = child;
    c180:	6013      	str	r3, [r2, #0]
	list->tail = node;
    c182:	6563      	str	r3, [r4, #84]	; 0x54
}
    c184:	e7dd      	b.n	c142 <bt_l2cap_connected+0x66>
    c186:	bf00      	nop
    c188:	0002f380 	.word	0x0002f380
    c18c:	0002f3a4 	.word	0x0002f3a4
    c190:	0000c09d 	.word	0x0000c09d

0000c194 <l2cap_recv>:
{
    c194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c198:	b08a      	sub	sp, #40	; 0x28
	if (buf->len < sizeof(*hdr)) {
    c19a:	898b      	ldrh	r3, [r1, #12]
    c19c:	2b03      	cmp	r3, #3
{
    c19e:	af02      	add	r7, sp, #8
    c1a0:	4606      	mov	r6, r0
    c1a2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    c1a4:	d80c      	bhi.n	c1c0 <l2cap_recv+0x2c>
		BT_ERR("Too small L2CAP signaling PDU");
    c1a6:	4b4c      	ldr	r3, [pc, #304]	; (c2d8 <l2cap_recv+0x144>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    c1a8:	61bb      	str	r3, [r7, #24]
    c1aa:	484c      	ldr	r0, [pc, #304]	; (c2dc <l2cap_recv+0x148>)
    c1ac:	2302      	movs	r3, #2
    c1ae:	f107 0214 	add.w	r2, r7, #20
    c1b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c1b6:	607b      	str	r3, [r7, #4]
    c1b8:	617b      	str	r3, [r7, #20]
    c1ba:	f01e fcb3 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
		return 0;
    c1be:	e01a      	b.n	c1f6 <l2cap_recv+0x62>
	return net_buf_simple_pull_mem(&buf->b, len);
    c1c0:	2104      	movs	r1, #4
    c1c2:	f105 0008 	add.w	r0, r5, #8
    c1c6:	f020 fcb1 	bl	2cb2c <net_buf_simple_pull_mem>
	len = sys_le16_to_cpu(hdr->len);
    c1ca:	8843      	ldrh	r3, [r0, #2]
    c1cc:	4604      	mov	r4, r0
	if (buf->len != len) {
    c1ce:	89a8      	ldrh	r0, [r5, #12]
    c1d0:	4298      	cmp	r0, r3
    c1d2:	d015      	beq.n	c200 <l2cap_recv+0x6c>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    c1d4:	466c      	mov	r4, sp
    c1d6:	b088      	sub	sp, #32
    c1d8:	aa02      	add	r2, sp, #8
    c1da:	4941      	ldr	r1, [pc, #260]	; (c2e0 <l2cap_recv+0x14c>)
    c1dc:	6193      	str	r3, [r2, #24]
    c1de:	2304      	movs	r3, #4
    c1e0:	e9c2 1004 	strd	r1, r0, [r2, #16]
    c1e4:	f842 3f0c 	str.w	r3, [r2, #12]!
    c1e8:	483c      	ldr	r0, [pc, #240]	; (c2dc <l2cap_recv+0x148>)
    c1ea:	60bb      	str	r3, [r7, #8]
    c1ec:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    c1f0:	f01e fc98 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
    c1f4:	46a5      	mov	sp, r4
}
    c1f6:	2000      	movs	r0, #0
    c1f8:	3720      	adds	r7, #32
    c1fa:	46bd      	mov	sp, r7
    c1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!hdr->ident) {
    c200:	7861      	ldrb	r1, [r4, #1]
    c202:	b909      	cbnz	r1, c208 <l2cap_recv+0x74>
		BT_ERR("Invalid ident value in L2CAP PDU");
    c204:	4b37      	ldr	r3, [pc, #220]	; (c2e4 <l2cap_recv+0x150>)
    c206:	e7cf      	b.n	c1a8 <l2cap_recv+0x14>
	switch (hdr->code) {
    c208:	7823      	ldrb	r3, [r4, #0]
    c20a:	2b12      	cmp	r3, #18
    c20c:	d017      	beq.n	c23e <l2cap_recv+0xaa>
    c20e:	2b13      	cmp	r3, #19
    c210:	d011      	beq.n	c236 <l2cap_recv+0xa2>
    c212:	2b01      	cmp	r3, #1
    c214:	d0ef      	beq.n	c1f6 <l2cap_recv+0x62>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c216:	4a34      	ldr	r2, [pc, #208]	; (c2e8 <l2cap_recv+0x154>)
    c218:	4830      	ldr	r0, [pc, #192]	; (c2dc <l2cap_recv+0x148>)
	switch (hdr->code) {
    c21a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    c21e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c222:	2303      	movs	r3, #3
    c224:	f107 0214 	add.w	r2, r7, #20
    c228:	607b      	str	r3, [r7, #4]
    c22a:	617b      	str	r3, [r7, #20]
    c22c:	f01e fc7a 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
		l2cap_send_reject(chan->conn, hdr->ident,
    c230:	7861      	ldrb	r1, [r4, #1]
    c232:	6830      	ldr	r0, [r6, #0]
    c234:	e00e      	b.n	c254 <l2cap_recv+0xc0>
	if (buf->len < sizeof(*rsp)) {
    c236:	2801      	cmp	r0, #1
    c238:	d8dd      	bhi.n	c1f6 <l2cap_recv+0x62>
		BT_ERR("Too small LE conn param rsp");
    c23a:	4b2c      	ldr	r3, [pc, #176]	; (c2ec <l2cap_recv+0x158>)
    c23c:	e7b4      	b.n	c1a8 <l2cap_recv+0x14>
	if (buf->len < sizeof(*req)) {
    c23e:	2807      	cmp	r0, #7
    c240:	d801      	bhi.n	c246 <l2cap_recv+0xb2>
		BT_ERR("Too small LE conn update param req");
    c242:	4b2b      	ldr	r3, [pc, #172]	; (c2f0 <l2cap_recv+0x15c>)
    c244:	e7b0      	b.n	c1a8 <l2cap_recv+0x14>
    c246:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
    c248:	f896 8003 	ldrb.w	r8, [r6, #3]
    c24c:	f1b8 0f00 	cmp.w	r8, #0
    c250:	d003      	beq.n	c25a <l2cap_recv+0xc6>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    c252:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
    c254:	f01e fcde 	bl	2ac14 <l2cap_send_reject.constprop.0>
		break;
    c258:	e7cd      	b.n	c1f6 <l2cap_recv+0x62>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    c25a:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    c25c:	7850      	ldrb	r0, [r2, #1]
    c25e:	7813      	ldrb	r3, [r2, #0]
    c260:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c264:	813b      	strh	r3, [r7, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    c266:	78d0      	ldrb	r0, [r2, #3]
    c268:	7893      	ldrb	r3, [r2, #2]
    c26a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c26e:	817b      	strh	r3, [r7, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    c270:	7950      	ldrb	r0, [r2, #5]
    c272:	7913      	ldrb	r3, [r2, #4]
    c274:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    c278:	81bb      	strh	r3, [r7, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    c27a:	7993      	ldrb	r3, [r2, #6]
    c27c:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c27e:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
    c280:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c284:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
    c286:	81fb      	strh	r3, [r7, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    c288:	f7ff feba 	bl	c000 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    c28c:	4604      	mov	r4, r0
    c28e:	2800      	cmp	r0, #0
    c290:	d0b1      	beq.n	c1f6 <l2cap_recv+0x62>
	accepted = le_param_req(conn, &param);
    c292:	f107 0108 	add.w	r1, r7, #8
    c296:	4630      	mov	r0, r6
    c298:	f7ff fbb0 	bl	b9fc <le_param_req>
	return net_buf_simple_add(&buf->b, len);
    c29c:	2102      	movs	r1, #2
    c29e:	4605      	mov	r5, r0
    c2a0:	f104 0008 	add.w	r0, r4, #8
    c2a4:	f020 fc11 	bl	2caca <net_buf_simple_add>
	if (accepted) {
    c2a8:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    c2ac:	b2db      	uxtb	r3, r3
    c2ae:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    c2b0:	4622      	mov	r2, r4
    c2b2:	f8cd 8000 	str.w	r8, [sp]
    c2b6:	4643      	mov	r3, r8
    c2b8:	2105      	movs	r1, #5
    c2ba:	4630      	mov	r0, r6
    c2bc:	f01e fc91 	bl	2abe2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    c2c0:	b110      	cbz	r0, c2c8 <l2cap_recv+0x134>
		net_buf_unref(buf);
    c2c2:	4620      	mov	r0, r4
    c2c4:	f014 fbb4 	bl	20a30 <net_buf_unref>
	if (accepted) {
    c2c8:	2d00      	cmp	r5, #0
    c2ca:	d094      	beq.n	c1f6 <l2cap_recv+0x62>
		bt_conn_le_conn_update(conn, &param);
    c2cc:	f107 0108 	add.w	r1, r7, #8
    c2d0:	4630      	mov	r0, r6
    c2d2:	f01e fbbd 	bl	2aa50 <bt_conn_le_conn_update>
    c2d6:	e78e      	b.n	c1f6 <l2cap_recv+0x62>
    c2d8:	00032b8f 	.word	0x00032b8f
    c2dc:	0002f4f4 	.word	0x0002f4f4
    c2e0:	00032bad 	.word	0x00032bad
    c2e4:	00032bce 	.word	0x00032bce
    c2e8:	00032c2e 	.word	0x00032c2e
    c2ec:	00032bef 	.word	0x00032bef
    c2f0:	00032c0b 	.word	0x00032c0b

0000c2f4 <bt_l2cap_recv>:
{
    c2f4:	b530      	push	{r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    c2f6:	898b      	ldrh	r3, [r1, #12]
    c2f8:	2b03      	cmp	r3, #3
{
    c2fa:	b089      	sub	sp, #36	; 0x24
    c2fc:	4605      	mov	r5, r0
    c2fe:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    c300:	d810      	bhi.n	c324 <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
    c302:	4b15      	ldr	r3, [pc, #84]	; (c358 <bt_l2cap_recv+0x64>)
    c304:	9306      	str	r3, [sp, #24]
    c306:	2302      	movs	r3, #2
    c308:	9301      	str	r3, [sp, #4]
    c30a:	9305      	str	r3, [sp, #20]
    c30c:	aa05      	add	r2, sp, #20
    c30e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c312:	4812      	ldr	r0, [pc, #72]	; (c35c <bt_l2cap_recv+0x68>)
    c314:	f01e fc06 	bl	2ab24 <z_log_msg2_static_create.constprop.0>
	net_buf_unref(buf);
    c318:	4620      	mov	r0, r4
}
    c31a:	b009      	add	sp, #36	; 0x24
    c31c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	net_buf_unref(buf);
    c320:	f014 bb86 	b.w	20a30 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    c324:	2104      	movs	r1, #4
    c326:	f104 0008 	add.w	r0, r4, #8
    c32a:	f020 fbff 	bl	2cb2c <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    c32e:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    c330:	4628      	mov	r0, r5
    c332:	f01e fc98 	bl	2ac66 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c336:	b948      	cbnz	r0, c34c <bt_l2cap_recv+0x58>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    c338:	4b09      	ldr	r3, [pc, #36]	; (c360 <bt_l2cap_recv+0x6c>)
    c33a:	e9cd 3106 	strd	r3, r1, [sp, #24]
    c33e:	2303      	movs	r3, #3
    c340:	9301      	str	r3, [sp, #4]
    c342:	9305      	str	r3, [sp, #20]
    c344:	aa05      	add	r2, sp, #20
    c346:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c34a:	e7e2      	b.n	c312 <bt_l2cap_recv+0x1e>
	chan->ops->recv(chan, buf);
    c34c:	6843      	ldr	r3, [r0, #4]
    c34e:	4621      	mov	r1, r4
    c350:	691b      	ldr	r3, [r3, #16]
    c352:	4798      	blx	r3
    c354:	e7e0      	b.n	c318 <bt_l2cap_recv+0x24>
    c356:	bf00      	nop
    c358:	00032c4c 	.word	0x00032c4c
    c35c:	0002f4f4 	.word	0x0002f4f4
    c360:	00032c69 	.word	0x00032c69

0000c364 <bt_l2cap_update_conn_param>:
{
    c364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c366:	460d      	mov	r5, r1
	ident++;
    c368:	4916      	ldr	r1, [pc, #88]	; (c3c4 <bt_l2cap_update_conn_param+0x60>)
    c36a:	780b      	ldrb	r3, [r1, #0]
    c36c:	3301      	adds	r3, #1
	if (!ident) {
    c36e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    c372:	bf08      	it	eq
    c374:	2301      	moveq	r3, #1
    c376:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    c378:	7809      	ldrb	r1, [r1, #0]
{
    c37a:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    c37c:	2208      	movs	r2, #8
    c37e:	2012      	movs	r0, #18
    c380:	f7ff fe3e 	bl	c000 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    c384:	4604      	mov	r4, r0
    c386:	b1d0      	cbz	r0, c3be <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    c388:	2108      	movs	r1, #8
    c38a:	4408      	add	r0, r1
    c38c:	f020 fb9d 	bl	2caca <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    c390:	882b      	ldrh	r3, [r5, #0]
    c392:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    c394:	886b      	ldrh	r3, [r5, #2]
    c396:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    c398:	88ab      	ldrh	r3, [r5, #4]
    c39a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    c39c:	88eb      	ldrh	r3, [r5, #6]
    c39e:	80c3      	strh	r3, [r0, #6]
    c3a0:	2300      	movs	r3, #0
    c3a2:	9300      	str	r3, [sp, #0]
    c3a4:	4622      	mov	r2, r4
    c3a6:	2105      	movs	r1, #5
    c3a8:	4630      	mov	r0, r6
    c3aa:	f01e fc1a 	bl	2abe2 <bt_l2cap_send_cb>
	if (err) {
    c3ae:	4605      	mov	r5, r0
    c3b0:	b110      	cbz	r0, c3b8 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    c3b2:	4620      	mov	r0, r4
    c3b4:	f014 fb3c 	bl	20a30 <net_buf_unref>
}
    c3b8:	4628      	mov	r0, r5
    c3ba:	b002      	add	sp, #8
    c3bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    c3be:	f06f 050b 	mvn.w	r5, #11
    c3c2:	e7f9      	b.n	c3b8 <bt_l2cap_update_conn_param+0x54>
    c3c4:	20003af3 	.word	0x20003af3

0000c3c8 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    c3c8:	4b02      	ldr	r3, [pc, #8]	; (c3d4 <att_cfm_sent+0xc>)
    c3ca:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    c3ce:	f01e bc68 	b.w	2aca2 <att_sent>
    c3d2:	bf00      	nop
    c3d4:	0002b111 	.word	0x0002b111

0000c3d8 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    c3d8:	4b02      	ldr	r3, [pc, #8]	; (c3e4 <att_rsp_sent+0xc>)
    c3da:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    c3de:	f01e bc60 	b.w	2aca2 <att_sent>
    c3e2:	bf00      	nop
    c3e4:	0002b0f5 	.word	0x0002b0f5

0000c3e8 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    c3e8:	4b02      	ldr	r3, [pc, #8]	; (c3f4 <att_req_sent+0xc>)
    c3ea:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    c3ee:	f01e bc58 	b.w	2aca2 <att_sent>
    c3f2:	bf00      	nop
    c3f4:	0002ae01 	.word	0x0002ae01

0000c3f8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c3f8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c3fa:	3808      	subs	r0, #8
    c3fc:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c3fe:	a901      	add	r1, sp, #4
    c400:	4802      	ldr	r0, [pc, #8]	; (c40c <bt_att_released+0x14>)
    c402:	f021 fb73 	bl	2daec <k_mem_slab_free>
}
    c406:	b003      	add	sp, #12
    c408:	f85d fb04 	ldr.w	pc, [sp], #4
    c40c:	20000c3c 	.word	0x20000c3c

0000c410 <find_type_cb>:
{
    c410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    c414:	f8d2 9000 	ldr.w	r9, [r2]
{
    c418:	b099      	sub	sp, #100	; 0x64
    c41a:	4606      	mov	r6, r0
    c41c:	460f      	mov	r7, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c41e:	2500      	movs	r5, #0
    c420:	f642 0301 	movw	r3, #10241	; 0x2801
    c424:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c426:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c42a:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    c42e:	a912      	add	r1, sp, #72	; 0x48
{
    c430:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c432:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    c436:	f01d fda9 	bl	29f8c <bt_uuid_cmp>
    c43a:	2800      	cmp	r0, #0
    c43c:	d069      	beq.n	c512 <find_type_cb+0x102>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c43e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c442:	6830      	ldr	r0, [r6, #0]
    c444:	f88d 5048 	strb.w	r5, [sp, #72]	; 0x48
    c448:	a912      	add	r1, sp, #72	; 0x48
    c44a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    c44e:	f01d fd9d 	bl	29f8c <bt_uuid_cmp>
    c452:	b138      	cbz	r0, c464 <find_type_cb+0x54>
		if (data->group &&
    c454:	68a3      	ldr	r3, [r4, #8]
    c456:	b11b      	cbz	r3, c460 <find_type_cb+0x50>
    c458:	885a      	ldrh	r2, [r3, #2]
    c45a:	42ba      	cmp	r2, r7
    c45c:	d200      	bcs.n	c460 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c45e:	805f      	strh	r7, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c460:	2001      	movs	r0, #1
    c462:	e009      	b.n	c478 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c464:	6861      	ldr	r1, [r4, #4]
    c466:	4608      	mov	r0, r1
    c468:	f01e fc13 	bl	2ac92 <net_buf_frags_len>
    c46c:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    c470:	1a1b      	subs	r3, r3, r0
    c472:	2b03      	cmp	r3, #3
    c474:	d803      	bhi.n	c47e <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    c476:	2000      	movs	r0, #0
}
    c478:	b019      	add	sp, #100	; 0x64
    c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    c47e:	4608      	mov	r0, r1
    c480:	f020 faf5 	bl	2ca6e <net_buf_frag_last>
    c484:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c486:	6860      	ldr	r0, [r4, #4]
    c488:	f01e fc03 	bl	2ac92 <net_buf_frags_len>
    c48c:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
    c490:	f105 0b08 	add.w	fp, r5, #8
    c494:	ebaa 0a00 	sub.w	sl, sl, r0
    c498:	4658      	mov	r0, fp
    c49a:	f020 fb63 	bl	2cb64 <net_buf_simple_tailroom>
    c49e:	4550      	cmp	r0, sl
    c4a0:	d93a      	bls.n	c518 <find_type_cb+0x108>
    c4a2:	6860      	ldr	r0, [r4, #4]
    c4a4:	f01e fbf5 	bl	2ac92 <net_buf_frags_len>
    c4a8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
    c4ac:	1a18      	subs	r0, r3, r0
	if (!len) {
    c4ae:	b970      	cbnz	r0, c4ce <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c4b0:	6863      	ldr	r3, [r4, #4]
    c4b2:	7998      	ldrb	r0, [r3, #6]
    c4b4:	f014 f9f8 	bl	208a8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    c4b8:	2200      	movs	r2, #0
    c4ba:	2300      	movs	r3, #0
    c4bc:	f020 fa9d 	bl	2c9fa <net_buf_alloc_fixed>
		if (!frag) {
    c4c0:	4605      	mov	r5, r0
    c4c2:	2800      	cmp	r0, #0
    c4c4:	d0d7      	beq.n	c476 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    c4c6:	4601      	mov	r1, r0
    c4c8:	6860      	ldr	r0, [r4, #4]
    c4ca:	f020 fae1 	bl	2ca90 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c4ce:	2300      	movs	r3, #0
    c4d0:	9300      	str	r3, [sp, #0]
    c4d2:	2310      	movs	r3, #16
    c4d4:	f8d6 9004 	ldr.w	r9, [r6, #4]
    c4d8:	4631      	mov	r1, r6
    c4da:	eb0d 0203 	add.w	r2, sp, r3
    c4de:	4640      	mov	r0, r8
    c4e0:	47c8      	blx	r9
	if (read < 0) {
    c4e2:	1e06      	subs	r6, r0, #0
    c4e4:	db15      	blt.n	c512 <find_type_cb+0x102>
	if (read != data->value_len) {
    c4e6:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c4e8:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    c4ea:	4296      	cmp	r6, r2
    c4ec:	d035      	beq.n	c55a <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c4ee:	4601      	mov	r1, r0
    c4f0:	a80d      	add	r0, sp, #52	; 0x34
    c4f2:	f01d fd79 	bl	29fe8 <bt_uuid_create>
    c4f6:	b998      	cbnz	r0, c520 <find_type_cb+0x110>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c4f8:	7c23      	ldrb	r3, [r4, #16]
    c4fa:	4a1a      	ldr	r2, [pc, #104]	; (c564 <find_type_cb+0x154>)
    c4fc:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
    c500:	2303      	movs	r3, #3
    c502:	9308      	str	r3, [sp, #32]
			BT_WARN("Unable to create UUID: size %d", read);
    c504:	4818      	ldr	r0, [pc, #96]	; (c568 <find_type_cb+0x158>)
    c506:	9315      	str	r3, [sp, #84]	; 0x54
    c508:	aa15      	add	r2, sp, #84	; 0x54
    c50a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    c50e:	f01e fd05 	bl	2af1c <z_log_msg2_static_create.constprop.0>
	data->group = NULL;
    c512:	2300      	movs	r3, #0
    c514:	60a3      	str	r3, [r4, #8]
    c516:	e7a3      	b.n	c460 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    c518:	4658      	mov	r0, fp
    c51a:	f020 fb23 	bl	2cb64 <net_buf_simple_tailroom>
    c51e:	e7c6      	b.n	c4ae <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c520:	b2f2      	uxtb	r2, r6
    c522:	a904      	add	r1, sp, #16
    c524:	a808      	add	r0, sp, #32
    c526:	f01d fd5f 	bl	29fe8 <bt_uuid_create>
    c52a:	b928      	cbnz	r0, c538 <find_type_cb+0x128>
			BT_WARN("Unable to create UUID: size %d", read);
    c52c:	4b0f      	ldr	r3, [pc, #60]	; (c56c <find_type_cb+0x15c>)
    c52e:	e9cd 3616 	strd	r3, r6, [sp, #88]	; 0x58
    c532:	2303      	movs	r3, #3
    c534:	9303      	str	r3, [sp, #12]
    c536:	e7e5      	b.n	c504 <find_type_cb+0xf4>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c538:	a908      	add	r1, sp, #32
    c53a:	a80d      	add	r0, sp, #52	; 0x34
    c53c:	f01d fd26 	bl	29f8c <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c540:	2800      	cmp	r0, #0
    c542:	d1e6      	bne.n	c512 <find_type_cb+0x102>
	data->err = 0x00;
    c544:	2300      	movs	r3, #0
    c546:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    c548:	2104      	movs	r1, #4
    c54a:	f105 0008 	add.w	r0, r5, #8
    c54e:	f020 fabc 	bl	2caca <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    c552:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c554:	8007      	strh	r7, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c556:	8047      	strh	r7, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c558:	e782      	b.n	c460 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c55a:	4632      	mov	r2, r6
    c55c:	a904      	add	r1, sp, #16
    c55e:	f021 fff2 	bl	2e546 <memcmp>
    c562:	e7ed      	b.n	c540 <find_type_cb+0x130>
    c564:	00032ca5 	.word	0x00032ca5
    c568:	0002f3dc 	.word	0x0002f3dc
    c56c:	00032cc4 	.word	0x00032cc4

0000c570 <att_get>:
{
    c570:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    c572:	7b43      	ldrb	r3, [r0, #13]
    c574:	2b07      	cmp	r3, #7
{
    c576:	b088      	sub	sp, #32
	if (conn->state != BT_CONN_CONNECTED) {
    c578:	d00c      	beq.n	c594 <att_get+0x24>
		BT_WARN("Not connected");
    c57a:	4b16      	ldr	r3, [pc, #88]	; (c5d4 <att_get+0x64>)
		BT_WARN("ATT channel flagged as disconnected");
    c57c:	9306      	str	r3, [sp, #24]
    c57e:	4816      	ldr	r0, [pc, #88]	; (c5d8 <att_get+0x68>)
    c580:	2302      	movs	r3, #2
    c582:	aa05      	add	r2, sp, #20
    c584:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    c588:	9301      	str	r3, [sp, #4]
    c58a:	9305      	str	r3, [sp, #20]
		return NULL;
    c58c:	2400      	movs	r4, #0
		BT_WARN("ATT channel flagged as disconnected");
    c58e:	f01e fcc5 	bl	2af1c <z_log_msg2_static_create.constprop.0>
		return NULL;
    c592:	e00f      	b.n	c5b4 <att_get+0x44>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c594:	2104      	movs	r1, #4
    c596:	f01e fb66 	bl	2ac66 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c59a:	4604      	mov	r4, r0
    c59c:	b968      	cbnz	r0, c5ba <att_get+0x4a>
		BT_ERR("Unable to find ATT channel");
    c59e:	4b0f      	ldr	r3, [pc, #60]	; (c5dc <att_get+0x6c>)
    c5a0:	9306      	str	r3, [sp, #24]
    c5a2:	480d      	ldr	r0, [pc, #52]	; (c5d8 <att_get+0x68>)
    c5a4:	2302      	movs	r3, #2
    c5a6:	aa05      	add	r2, sp, #20
    c5a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c5ac:	9301      	str	r3, [sp, #4]
    c5ae:	9305      	str	r3, [sp, #20]
    c5b0:	f01e fcb4 	bl	2af1c <z_log_msg2_static_create.constprop.0>
}
    c5b4:	4620      	mov	r0, r4
    c5b6:	b008      	add	sp, #32
    c5b8:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5ba:	f3bf 8f5b 	dmb	ish
    c5be:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    c5c2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c5c6:	075b      	lsls	r3, r3, #29
    c5c8:	d501      	bpl.n	c5ce <att_get+0x5e>
		BT_WARN("ATT channel flagged as disconnected");
    c5ca:	4b05      	ldr	r3, [pc, #20]	; (c5e0 <att_get+0x70>)
    c5cc:	e7d6      	b.n	c57c <att_get+0xc>
	return att_chan->att;
    c5ce:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c5d2:	e7ef      	b.n	c5b4 <att_get+0x44>
    c5d4:	00032ce3 	.word	0x00032ce3
    c5d8:	0002f3dc 	.word	0x0002f3dc
    c5dc:	00032cf1 	.word	0x00032cf1
    c5e0:	00032d0c 	.word	0x00032d0c

0000c5e4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c5e6:	b08b      	sub	sp, #44	; 0x2c
    c5e8:	4607      	mov	r7, r0
    c5ea:	460e      	mov	r6, r1
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c5ec:	4827      	ldr	r0, [pc, #156]	; (c68c <bt_att_accept+0xa8>)
    c5ee:	2200      	movs	r2, #0
    c5f0:	2300      	movs	r3, #0
    c5f2:	a901      	add	r1, sp, #4
    c5f4:	f018 f8c2 	bl	2477c <k_mem_slab_alloc>
    c5f8:	4604      	mov	r4, r0
    c5fa:	b180      	cbz	r0, c61e <bt_att_accept+0x3a>
		BT_ERR("No available ATT context for conn %p", conn);
    c5fc:	4b24      	ldr	r3, [pc, #144]	; (c690 <bt_att_accept+0xac>)
    c5fe:	e9cd 3708 	strd	r3, r7, [sp, #32]
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c602:	2303      	movs	r3, #3
    c604:	4823      	ldr	r0, [pc, #140]	; (c694 <bt_att_accept+0xb0>)
    c606:	9303      	str	r3, [sp, #12]
    c608:	aa07      	add	r2, sp, #28
    c60a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c60e:	f06f 040b 	mvn.w	r4, #11
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c612:	9307      	str	r3, [sp, #28]
    c614:	f01e fc82 	bl	2af1c <z_log_msg2_static_create.constprop.0>
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c618:	4620      	mov	r0, r4
    c61a:	b00b      	add	sp, #44	; 0x2c
    c61c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c61e:	4601      	mov	r1, r0
    c620:	222c      	movs	r2, #44	; 0x2c
    c622:	9801      	ldr	r0, [sp, #4]
    c624:	f021 ffc0 	bl	2e5a8 <memset>
	att->conn = conn;
    c628:	9d01      	ldr	r5, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c62a:	481b      	ldr	r0, [pc, #108]	; (c698 <bt_att_accept+0xb4>)
	list->tail = NULL;
    c62c:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c62e:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    c632:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
    c636:	2200      	movs	r2, #0
    c638:	2300      	movs	r3, #0
    c63a:	a902      	add	r1, sp, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c63c:	9402      	str	r4, [sp, #8]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c63e:	f018 f89d 	bl	2477c <k_mem_slab_alloc>
    c642:	4604      	mov	r4, r0
    c644:	b120      	cbz	r0, c650 <bt_att_accept+0x6c>
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c646:	682b      	ldr	r3, [r5, #0]
    c648:	4a14      	ldr	r2, [pc, #80]	; (c69c <bt_att_accept+0xb8>)
    c64a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    c64e:	e7d8      	b.n	c602 <bt_att_accept+0x1e>
    c650:	4601      	mov	r1, r0
    c652:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c656:	9802      	ldr	r0, [sp, #8]
    c658:	f021 ffa6 	bl	2e5a8 <memset>
	chan->chan.chan.ops = &ops;
    c65c:	9802      	ldr	r0, [sp, #8]
    c65e:	4b10      	ldr	r3, [pc, #64]	; (c6a0 <bt_att_accept+0xbc>)
    c660:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    c662:	30f8      	adds	r0, #248	; 0xf8
    c664:	f021 fb1e 	bl	2dca4 <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c668:	9b02      	ldr	r3, [sp, #8]
    c66a:	f3bf 8f5b 	dmb	ish
    c66e:	33f0      	adds	r3, #240	; 0xf0
    c670:	e853 2f00 	ldrex	r2, [r3]
    c674:	e843 4100 	strex	r1, r4, [r3]
    c678:	2900      	cmp	r1, #0
    c67a:	d1f9      	bne.n	c670 <bt_att_accept+0x8c>
    c67c:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c680:	9b02      	ldr	r3, [sp, #8]
    c682:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c686:	6033      	str	r3, [r6, #0]
	return 0;
    c688:	e7c6      	b.n	c618 <bt_att_accept+0x34>
    c68a:	bf00      	nop
    c68c:	20000c20 	.word	0x20000c20
    c690:	00032d30 	.word	0x00032d30
    c694:	0002f3dc 	.word	0x0002f3dc
    c698:	20000c3c 	.word	0x20000c3c
    c69c:	00032d55 	.word	0x00032d55
    c6a0:	20000210 	.word	0x20000210

0000c6a4 <read_group_cb>:
{
    c6a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c6a8:	4605      	mov	r5, r0
    c6aa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c6ac:	f04f 0800 	mov.w	r8, #0
    c6b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c6b4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    c6b6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c6b8:	f88d 8008 	strb.w	r8, [sp, #8]
    c6bc:	a902      	add	r1, sp, #8
{
    c6be:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c6c0:	f8ad 300a 	strh.w	r3, [sp, #10]
    c6c4:	f01d fc62 	bl	29f8c <bt_uuid_cmp>
    c6c8:	b1a0      	cbz	r0, c6f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c6ca:	f642 0301 	movw	r3, #10241	; 0x2801
    c6ce:	6828      	ldr	r0, [r5, #0]
    c6d0:	f88d 800c 	strb.w	r8, [sp, #12]
    c6d4:	a903      	add	r1, sp, #12
    c6d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    c6da:	f01d fc57 	bl	29f8c <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c6de:	b148      	cbz	r0, c6f4 <read_group_cb+0x50>
		if (data->group &&
    c6e0:	6923      	ldr	r3, [r4, #16]
    c6e2:	b11b      	cbz	r3, c6ec <read_group_cb+0x48>
    c6e4:	885a      	ldrh	r2, [r3, #2]
    c6e6:	42b2      	cmp	r2, r6
    c6e8:	d200      	bcs.n	c6ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c6ea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c6ec:	2001      	movs	r0, #1
}
    c6ee:	b004      	add	sp, #16
    c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c6f4:	6861      	ldr	r1, [r4, #4]
    c6f6:	6828      	ldr	r0, [r5, #0]
    c6f8:	f01d fc48 	bl	29f8c <bt_uuid_cmp>
    c6fc:	b110      	cbz	r0, c704 <read_group_cb+0x60>
		data->group = NULL;
    c6fe:	2300      	movs	r3, #0
    c700:	6123      	str	r3, [r4, #16]
    c702:	e7f3      	b.n	c6ec <read_group_cb+0x48>
	if (data->rsp->len &&
    c704:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c706:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    c708:	781a      	ldrb	r2, [r3, #0]
    c70a:	b13a      	cbz	r2, c71c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c70c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
    c710:	8981      	ldrh	r1, [r0, #12]
    c712:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c714:	4293      	cmp	r3, r2
    c716:	da01      	bge.n	c71c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    c718:	2000      	movs	r0, #0
    c71a:	e7e8      	b.n	c6ee <read_group_cb+0x4a>
    c71c:	2104      	movs	r1, #4
    c71e:	3008      	adds	r0, #8
    c720:	f020 f9d3 	bl	2caca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c724:	4b09      	ldr	r3, [pc, #36]	; (c74c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c726:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c728:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c72a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c72c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c72e:	4629      	mov	r1, r5
    c730:	9300      	str	r3, [sp, #0]
    c732:	9401      	str	r4, [sp, #4]
    c734:	2300      	movs	r3, #0
    c736:	4638      	mov	r0, r7
    c738:	f01e fbf3 	bl	2af22 <att_chan_read>
	if (read < 0) {
    c73c:	2800      	cmp	r0, #0
    c73e:	dbeb      	blt.n	c718 <read_group_cb+0x74>
	if (!data->group) {
    c740:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c742:	3800      	subs	r0, #0
    c744:	bf18      	it	ne
    c746:	2001      	movne	r0, #1
    c748:	e7d1      	b.n	c6ee <read_group_cb+0x4a>
    c74a:	bf00      	nop
    c74c:	0002ade1 	.word	0x0002ade1

0000c750 <chan_send>:
{
    c750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c754:	688b      	ldr	r3, [r1, #8]
    c756:	781b      	ldrb	r3, [r3, #0]
    c758:	2bd2      	cmp	r3, #210	; 0xd2
{
    c75a:	b08b      	sub	sp, #44	; 0x2c
    c75c:	4606      	mov	r6, r0
    c75e:	460c      	mov	r4, r1
    c760:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c762:	d117      	bne.n	c794 <chan_send+0x44>
		err = bt_smp_sign(chan->att->conn, buf);
    c764:	6803      	ldr	r3, [r0, #0]
    c766:	6818      	ldr	r0, [r3, #0]
    c768:	f01f ffad 	bl	2c6c6 <bt_smp_sign>
		if (err) {
    c76c:	4605      	mov	r5, r0
    c76e:	b188      	cbz	r0, c794 <chan_send+0x44>
			BT_ERR("Error signing data");
    c770:	4b24      	ldr	r3, [pc, #144]	; (c804 <chan_send+0xb4>)
    c772:	4825      	ldr	r0, [pc, #148]	; (c808 <chan_send+0xb8>)
    c774:	9308      	str	r3, [sp, #32]
    c776:	aa07      	add	r2, sp, #28
    c778:	2302      	movs	r3, #2
    c77a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    c77e:	9303      	str	r3, [sp, #12]
    c780:	9307      	str	r3, [sp, #28]
    c782:	f01e fbcb 	bl	2af1c <z_log_msg2_static_create.constprop.0>
			net_buf_unref(buf);
    c786:	4620      	mov	r0, r4
    c788:	f014 f952 	bl	20a30 <net_buf_unref>
}
    c78c:	4628      	mov	r0, r5
    c78e:	b00b      	add	sp, #44	; 0x2c
    c790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    c794:	f104 0008 	add.w	r0, r4, #8
    c798:	f020 f9e0 	bl	2cb5c <net_buf_simple_headroom>
	state->len = buf->len;
    c79c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    c7a0:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    c7a2:	b957      	cbnz	r7, c7ba <chan_send+0x6a>
	switch (att_op_get_type(buf->data[0])) {
    c7a4:	68a3      	ldr	r3, [r4, #8]
    c7a6:	7818      	ldrb	r0, [r3, #0]
    c7a8:	f01e fa93 	bl	2acd2 <att_op_get_type>
    c7ac:	1e43      	subs	r3, r0, #1
    c7ae:	b2db      	uxtb	r3, r3
    c7b0:	2b04      	cmp	r3, #4
    c7b2:	bf9c      	itt	ls
    c7b4:	4a15      	ldrls	r2, [pc, #84]	; (c80c <chan_send+0xbc>)
    c7b6:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c7ba:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    c7bc:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c7c0:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    c7c2:	4b13      	ldr	r3, [pc, #76]	; (c810 <chan_send+0xc0>)
    c7c4:	429f      	cmp	r7, r3
    c7c6:	d018      	beq.n	c7fa <chan_send+0xaa>
	} else if (cb == chan_cfm_sent) {
    c7c8:	4b12      	ldr	r3, [pc, #72]	; (c814 <chan_send+0xc4>)
    c7ca:	429f      	cmp	r7, r3
    c7cc:	d017      	beq.n	c7fe <chan_send+0xae>
		return att_sent;
    c7ce:	4912      	ldr	r1, [pc, #72]	; (c818 <chan_send+0xc8>)
    c7d0:	4b12      	ldr	r3, [pc, #72]	; (c81c <chan_send+0xcc>)
    c7d2:	4a13      	ldr	r2, [pc, #76]	; (c820 <chan_send+0xd0>)
    c7d4:	428f      	cmp	r7, r1
    c7d6:	bf18      	it	ne
    c7d8:	4613      	movne	r3, r2
			       &chan->chan.chan);
    c7da:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c7dc:	9600      	str	r6, [sp, #0]
    c7de:	4622      	mov	r2, r4
    c7e0:	2104      	movs	r1, #4
    c7e2:	f01e f9fe 	bl	2abe2 <bt_l2cap_send_cb>
	if (err) {
    c7e6:	4605      	mov	r5, r0
    c7e8:	2800      	cmp	r0, #0
    c7ea:	d0cf      	beq.n	c78c <chan_send+0x3c>
	buf->data = buf->__buf + state->offset;
    c7ec:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    c7ee:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    c7f2:	fa10 f088 	uxtah	r0, r0, r8
    c7f6:	60a0      	str	r0, [r4, #8]
}
    c7f8:	e7c8      	b.n	c78c <chan_send+0x3c>
		return att_rsp_sent;
    c7fa:	4b0a      	ldr	r3, [pc, #40]	; (c824 <chan_send+0xd4>)
    c7fc:	e7ed      	b.n	c7da <chan_send+0x8a>
		return att_cfm_sent;
    c7fe:	4b0a      	ldr	r3, [pc, #40]	; (c828 <chan_send+0xd8>)
    c800:	e7eb      	b.n	c7da <chan_send+0x8a>
    c802:	bf00      	nop
    c804:	00032d7a 	.word	0x00032d7a
    c808:	0002f3dc 	.word	0x0002f3dc
    c80c:	0002fbe0 	.word	0x0002fbe0
    c810:	0002b0f5 	.word	0x0002b0f5
    c814:	0002b111 	.word	0x0002b111
    c818:	0002ae01 	.word	0x0002ae01
    c81c:	0000c3e9 	.word	0x0000c3e9
    c820:	0002aca3 	.word	0x0002aca3
    c824:	0000c3d9 	.word	0x0000c3d9
    c828:	0000c3c9 	.word	0x0000c3c9

0000c82c <read_type_cb>:
{
    c82c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    c830:	f8d2 8000 	ldr.w	r8, [r2]
{
    c834:	4606      	mov	r6, r0
    c836:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c838:	6800      	ldr	r0, [r0, #0]
    c83a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c83c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    c840:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c842:	f01d fba3 	bl	29f8c <bt_uuid_cmp>
    c846:	4607      	mov	r7, r0
    c848:	2800      	cmp	r0, #0
    c84a:	d13e      	bne.n	c8ca <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c84c:	4628      	mov	r0, r5
    c84e:	2215      	movs	r2, #21
    c850:	4631      	mov	r1, r6
    c852:	f01f fa06 	bl	2bc62 <bt_gatt_check_perm>
    c856:	4605      	mov	r5, r0
    c858:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c85a:	b148      	cbz	r0, c870 <read_type_cb+0x44>
		if (data->rsp->len) {
    c85c:	68e3      	ldr	r3, [r4, #12]
    c85e:	781b      	ldrb	r3, [r3, #0]
    c860:	b923      	cbnz	r3, c86c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    c862:	2500      	movs	r5, #0
}
    c864:	4628      	mov	r0, r5
    c866:	b003      	add	sp, #12
    c868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    c86c:	7527      	strb	r7, [r4, #20]
    c86e:	e7f8      	b.n	c862 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c870:	68a0      	ldr	r0, [r4, #8]
    c872:	f020 f8fc 	bl	2ca6e <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
    c876:	2102      	movs	r1, #2
    c878:	3008      	adds	r0, #8
    c87a:	f020 f926 	bl	2caca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c87e:	4b14      	ldr	r3, [pc, #80]	; (c8d0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c880:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c882:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    c884:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c888:	4631      	mov	r1, r6
    c88a:	9300      	str	r3, [sp, #0]
    c88c:	9401      	str	r4, [sp, #4]
    c88e:	462b      	mov	r3, r5
    c890:	4640      	mov	r0, r8
    c892:	f01e fb46 	bl	2af22 <att_chan_read>
	if (read < 0) {
    c896:	2800      	cmp	r0, #0
    c898:	da07      	bge.n	c8aa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    c89a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c89e:	bf26      	itte	cs
    c8a0:	4240      	negcs	r0, r0
    c8a2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c8a4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c8a6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c8a8:	e7dc      	b.n	c864 <read_type_cb+0x38>
	if (!data->item) {
    c8aa:	6923      	ldr	r3, [r4, #16]
    c8ac:	2b00      	cmp	r3, #0
    c8ae:	d0d8      	beq.n	c862 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c8b0:	68a0      	ldr	r0, [r4, #8]
    c8b2:	f01e f9ee 	bl	2ac92 <net_buf_frags_len>
    c8b6:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c8ba:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c8bc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c8be:	7818      	ldrb	r0, [r3, #0]
    c8c0:	4285      	cmp	r5, r0
    c8c2:	bf94      	ite	ls
    c8c4:	2500      	movls	r5, #0
    c8c6:	2501      	movhi	r5, #1
    c8c8:	e7cc      	b.n	c864 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c8ca:	2501      	movs	r5, #1
    c8cc:	e7ca      	b.n	c864 <read_type_cb+0x38>
    c8ce:	bf00      	nop
    c8d0:	0002acaf 	.word	0x0002acaf

0000c8d4 <bt_att_connected>:
{
    c8d4:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c8d6:	4606      	mov	r6, r0
{
    c8d8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c8da:	2104      	movs	r1, #4
    c8dc:	f856 0908 	ldr.w	r0, [r6], #-8
    c8e0:	f01e f9b6 	bl	2ac50 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c8e4:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c8e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    c8ea:	b91b      	cbnz	r3, c8f4 <bt_att_connected+0x20>
    c8ec:	f105 000c 	add.w	r0, r5, #12
    c8f0:	f021 f9d8 	bl	2dca4 <z_impl_k_queue_init>
	parent->next = child;
    c8f4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    c8f6:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    c8fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
    c8fc:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    c900:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
    c902:	b902      	cbnz	r2, c906 <bt_att_connected+0x32>
	list->tail = node;
    c904:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c906:	f3bf 8f5b 	dmb	ish
    c90a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    c90e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c912:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c914:	bf58      	it	pl
    c916:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    c918:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c91a:	bf5c      	itt	pl
    c91c:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c920:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    c924:	f01e fa1b 	bl	2ad5e <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    c928:	f504 7084 	add.w	r0, r4, #264	; 0x108
    c92c:	4902      	ldr	r1, [pc, #8]	; (c938 <bt_att_connected+0x64>)
}
    c92e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    c932:	f021 baba 	b.w	2deaa <k_work_init_delayable>
    c936:	bf00      	nop
    c938:	0000d3dd 	.word	0x0000d3dd

0000c93c <bt_att_chan_create_pdu>:
{
    c93c:	b5b0      	push	{r4, r5, r7, lr}
    c93e:	b088      	sub	sp, #32
    c940:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c942:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    c946:	1c53      	adds	r3, r2, #1
    c948:	428b      	cmp	r3, r1
{
    c94a:	af00      	add	r7, sp, #0
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c94c:	d915      	bls.n	c97a <bt_att_chan_create_pdu+0x3e>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c94e:	466c      	mov	r4, sp
    c950:	b088      	sub	sp, #32
    c952:	466a      	mov	r2, sp
    c954:	481d      	ldr	r0, [pc, #116]	; (c9cc <bt_att_chan_create_pdu+0x90>)
    c956:	6193      	str	r3, [r2, #24]
    c958:	2304      	movs	r3, #4
    c95a:	e9c2 0104 	strd	r0, r1, [r2, #16]
    c95e:	f842 3f0c 	str.w	r3, [r2, #12]!
    c962:	481b      	ldr	r0, [pc, #108]	; (c9d0 <bt_att_chan_create_pdu+0x94>)
    c964:	60bb      	str	r3, [r7, #8]
    c966:	f44f 5102 	mov.w	r1, #8320	; 0x2080
    c96a:	f01e fad7 	bl	2af1c <z_log_msg2_static_create.constprop.0>
    c96e:	46a5      	mov	sp, r4
		return NULL;
    c970:	2400      	movs	r4, #0
}
    c972:	4620      	mov	r0, r4
    c974:	3720      	adds	r7, #32
    c976:	46bd      	mov	sp, r7
    c978:	bdb0      	pop	{r4, r5, r7, pc}
	switch (att_op_get_type(op)) {
    c97a:	4628      	mov	r0, r5
    c97c:	f01e f9a9 	bl	2acd2 <att_op_get_type>
    c980:	2802      	cmp	r0, #2
    c982:	d001      	beq.n	c988 <bt_att_chan_create_pdu+0x4c>
    c984:	2804      	cmp	r0, #4
    c986:	d116      	bne.n	c9b6 <bt_att_chan_create_pdu+0x7a>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c988:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c98c:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c98e:	2100      	movs	r1, #0
    c990:	4608      	mov	r0, r1
    c992:	f01e f923 	bl	2abdc <bt_l2cap_create_pdu_timeout>
    c996:	4604      	mov	r4, r0
	if (!buf) {
    c998:	b990      	cbnz	r0, c9c0 <bt_att_chan_create_pdu+0x84>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c99a:	4b0e      	ldr	r3, [pc, #56]	; (c9d4 <bt_att_chan_create_pdu+0x98>)
    c99c:	480c      	ldr	r0, [pc, #48]	; (c9d0 <bt_att_chan_create_pdu+0x94>)
    c99e:	e9c7 3506 	strd	r3, r5, [r7, #24]
    c9a2:	f107 0214 	add.w	r2, r7, #20
    c9a6:	2303      	movs	r3, #3
    c9a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    c9ac:	607b      	str	r3, [r7, #4]
    c9ae:	617b      	str	r3, [r7, #20]
    c9b0:	f01e fab4 	bl	2af1c <z_log_msg2_static_create.constprop.0>
		return NULL;
    c9b4:	e7dd      	b.n	c972 <bt_att_chan_create_pdu+0x36>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c9b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c9ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    c9be:	e7e6      	b.n	c98e <bt_att_chan_create_pdu+0x52>
    c9c0:	2101      	movs	r1, #1
    c9c2:	3008      	adds	r0, #8
    c9c4:	f020 f881 	bl	2caca <net_buf_simple_add>
	hdr->code = op;
    c9c8:	7005      	strb	r5, [r0, #0]
	return buf;
    c9ca:	e7d2      	b.n	c972 <bt_att_chan_create_pdu+0x36>
    c9cc:	00032d8d 	.word	0x00032d8d
    c9d0:	0002f3dc 	.word	0x0002f3dc
    c9d4:	00032b30 	.word	0x00032b30

0000c9d8 <att_indicate>:
{
    c9d8:	b570      	push	{r4, r5, r6, lr}
    c9da:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
    c9dc:	f101 0008 	add.w	r0, r1, #8
    c9e0:	460d      	mov	r5, r1
    c9e2:	f020 f8b3 	bl	2cb4c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
    c9e6:	6826      	ldr	r6, [r4, #0]
    c9e8:	89ab      	ldrh	r3, [r5, #12]
    c9ea:	68aa      	ldr	r2, [r5, #8]
    c9ec:	4601      	mov	r1, r0
    c9ee:	6830      	ldr	r0, [r6, #0]
    c9f0:	f01f fa52 	bl	2be98 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
    c9f4:	211e      	movs	r1, #30
    c9f6:	2200      	movs	r2, #0
    c9f8:	4620      	mov	r0, r4
    c9fa:	f7ff ff9f 	bl	c93c <bt_att_chan_create_pdu>
	if (!buf) {
    c9fe:	4601      	mov	r1, r0
    ca00:	b118      	cbz	r0, ca0a <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
    ca02:	4a03      	ldr	r2, [pc, #12]	; (ca10 <att_indicate+0x38>)
    ca04:	4620      	mov	r0, r4
    ca06:	f01e fb4d 	bl	2b0a4 <bt_att_chan_send_rsp>
}
    ca0a:	2000      	movs	r0, #0
    ca0c:	bd70      	pop	{r4, r5, r6, pc}
    ca0e:	bf00      	nop
    ca10:	0002b111 	.word	0x0002b111

0000ca14 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    ca14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ca18:	4688      	mov	r8, r1
    ca1a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    ca1c:	2101      	movs	r1, #1
    ca1e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    ca20:	4605      	mov	r5, r0
    ca22:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    ca24:	f7ff ff8a 	bl	c93c <bt_att_chan_create_pdu>
	if (!buf) {
    ca28:	4604      	mov	r4, r0
    ca2a:	b178      	cbz	r0, ca4c <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
    ca2c:	2104      	movs	r1, #4
    ca2e:	3008      	adds	r0, #8
    ca30:	f020 f84b 	bl	2caca <net_buf_simple_add>
	rsp->request = req;
    ca34:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    ca38:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    ca3a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ca3e:	4621      	mov	r1, r4
    ca40:	4628      	mov	r0, r5
    ca42:	4a03      	ldr	r2, [pc, #12]	; (ca50 <send_err_rsp.part.0+0x3c>)
}
    ca44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ca48:	f01e bb2c 	b.w	2b0a4 <bt_att_chan_send_rsp>
}
    ca4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ca50:	0002b0f5 	.word	0x0002b0f5

0000ca54 <bt_att_recv>:
{
    ca54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca58:	b089      	sub	sp, #36	; 0x24
	if (buf->len < sizeof(*hdr)) {
    ca5a:	898b      	ldrh	r3, [r1, #12]
{
    ca5c:	af00      	add	r7, sp, #0
    ca5e:	4604      	mov	r4, r0
    ca60:	4689      	mov	r9, r1
	if (buf->len < sizeof(*hdr)) {
    ca62:	b983      	cbnz	r3, ca86 <bt_att_recv+0x32>
		BT_ERR("Too small ATT PDU received");
    ca64:	4b54      	ldr	r3, [pc, #336]	; (cbb8 <bt_att_recv+0x164>)
    ca66:	61bb      	str	r3, [r7, #24]
    ca68:	2302      	movs	r3, #2
    ca6a:	607b      	str	r3, [r7, #4]
    ca6c:	617b      	str	r3, [r7, #20]
    ca6e:	f107 0214 	add.w	r2, r7, #20
    ca72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			BT_WARN("Ignoring unexpected indication");
    ca76:	4851      	ldr	r0, [pc, #324]	; (cbbc <bt_att_recv+0x168>)
    ca78:	f01e fa50 	bl	2af1c <z_log_msg2_static_create.constprop.0>
}
    ca7c:	2000      	movs	r0, #0
    ca7e:	3724      	adds	r7, #36	; 0x24
    ca80:	46bd      	mov	sp, r7
    ca82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    ca86:	2101      	movs	r1, #1
    ca88:	f109 0008 	add.w	r0, r9, #8
    ca8c:	f020 f84e 	bl	2cb2c <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    ca90:	f854 3c08 	ldr.w	r3, [r4, #-8]
    ca94:	4605      	mov	r5, r0
    ca96:	2b00      	cmp	r3, #0
    ca98:	d0f0      	beq.n	ca7c <bt_att_recv+0x28>
		if (hdr->code == handlers[i].op) {
    ca9a:	7801      	ldrb	r1, [r0, #0]
    ca9c:	4a48      	ldr	r2, [pc, #288]	; (cbc0 <bt_att_recv+0x16c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ca9e:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    caa2:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    caa4:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    caa8:	4288      	cmp	r0, r1
    caaa:	d121      	bne.n	caf0 <bt_att_recv+0x9c>
		if (handler->type == ATT_REQUEST &&
    caac:	00d9      	lsls	r1, r3, #3
    caae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    cab2:	f893 8002 	ldrb.w	r8, [r3, #2]
    cab6:	f1b8 0f01 	cmp.w	r8, #1
    caba:	d139      	bne.n	cb30 <bt_att_recv+0xdc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cabc:	f3bf 8f5b 	dmb	ish
    cac0:	34e8      	adds	r4, #232	; 0xe8
    cac2:	e854 3f00 	ldrex	r3, [r4]
    cac6:	f043 0001 	orr.w	r0, r3, #1
    caca:	e844 0c00 	strex	ip, r0, [r4]
    cace:	f1bc 0f00 	cmp.w	ip, #0
    cad2:	d1f6      	bne.n	cac2 <bt_att_recv+0x6e>
    cad4:	f3bf 8f5b 	dmb	ish
    cad8:	07d8      	lsls	r0, r3, #31
    cada:	d53e      	bpl.n	cb5a <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected request");
    cadc:	4b39      	ldr	r3, [pc, #228]	; (cbc4 <bt_att_recv+0x170>)
			BT_WARN("Ignoring unexpected indication");
    cade:	61bb      	str	r3, [r7, #24]
    cae0:	2302      	movs	r3, #2
    cae2:	607b      	str	r3, [r7, #4]
    cae4:	617b      	str	r3, [r7, #20]
    cae6:	f107 0214 	add.w	r2, r7, #20
    caea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    caee:	e7c2      	b.n	ca76 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    caf0:	3301      	adds	r3, #1
    caf2:	2b1c      	cmp	r3, #28
    caf4:	d1d6      	bne.n	caa4 <bt_att_recv+0x50>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    caf6:	4b34      	ldr	r3, [pc, #208]	; (cbc8 <bt_att_recv+0x174>)
    caf8:	4830      	ldr	r0, [pc, #192]	; (cbbc <bt_att_recv+0x168>)
    cafa:	e9c7 3106 	strd	r3, r1, [r7, #24]
    cafe:	f107 0214 	add.w	r2, r7, #20
    cb02:	2303      	movs	r3, #3
    cb04:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    cb08:	607b      	str	r3, [r7, #4]
    cb0a:	617b      	str	r3, [r7, #20]
    cb0c:	f01e fa06 	bl	2af1c <z_log_msg2_static_create.constprop.0>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
    cb10:	7829      	ldrb	r1, [r5, #0]
    cb12:	4608      	mov	r0, r1
    cb14:	f01e f8dd 	bl	2acd2 <att_op_get_type>
    cb18:	2800      	cmp	r0, #0
    cb1a:	d0af      	beq.n	ca7c <bt_att_recv+0x28>
    cb1c:	2805      	cmp	r0, #5
    cb1e:	d0ad      	beq.n	ca7c <bt_att_recv+0x28>
	if (!req) {
    cb20:	2900      	cmp	r1, #0
    cb22:	d0ab      	beq.n	ca7c <bt_att_recv+0x28>
    cb24:	2306      	movs	r3, #6
    cb26:	2200      	movs	r2, #0
    cb28:	4630      	mov	r0, r6
    cb2a:	f7ff ff73 	bl	ca14 <send_err_rsp.part.0>
    cb2e:	e7a5      	b.n	ca7c <bt_att_recv+0x28>
		} else if (handler->type == ATT_INDICATION &&
    cb30:	f1b8 0f05 	cmp.w	r8, #5
    cb34:	d111      	bne.n	cb5a <bt_att_recv+0x106>
    cb36:	f3bf 8f5b 	dmb	ish
    cb3a:	34e8      	adds	r4, #232	; 0xe8
    cb3c:	e854 3f00 	ldrex	r3, [r4]
    cb40:	f043 0002 	orr.w	r0, r3, #2
    cb44:	e844 0c00 	strex	ip, r0, [r4]
    cb48:	f1bc 0f00 	cmp.w	ip, #0
    cb4c:	d1f6      	bne.n	cb3c <bt_att_recv+0xe8>
    cb4e:	f3bf 8f5b 	dmb	ish
    cb52:	079b      	lsls	r3, r3, #30
    cb54:	d501      	bpl.n	cb5a <bt_att_recv+0x106>
			BT_WARN("Ignoring unexpected indication");
    cb56:	4b1d      	ldr	r3, [pc, #116]	; (cbcc <bt_att_recv+0x178>)
    cb58:	e7c1      	b.n	cade <bt_att_recv+0x8a>
	if (buf->len < handler->expect_len) {
    cb5a:	440a      	add	r2, r1
    cb5c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
    cb60:	7851      	ldrb	r1, [r2, #1]
    cb62:	4299      	cmp	r1, r3
    cb64:	d917      	bls.n	cb96 <bt_att_recv+0x142>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    cb66:	46e9      	mov	r9, sp
    cb68:	b088      	sub	sp, #32
    cb6a:	466a      	mov	r2, sp
    cb6c:	4818      	ldr	r0, [pc, #96]	; (cbd0 <bt_att_recv+0x17c>)
    cb6e:	7829      	ldrb	r1, [r5, #0]
    cb70:	6191      	str	r1, [r2, #24]
    cb72:	2404      	movs	r4, #4
    cb74:	e9c2 0304 	strd	r0, r3, [r2, #16]
    cb78:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    cb7c:	f842 4f0c 	str.w	r4, [r2, #12]!
    cb80:	480e      	ldr	r0, [pc, #56]	; (cbbc <bt_att_recv+0x168>)
    cb82:	60bc      	str	r4, [r7, #8]
    cb84:	f01e f9ca 	bl	2af1c <z_log_msg2_static_create.constprop.0>
	if (handler->type == ATT_REQUEST && err) {
    cb88:	f1b8 0f01 	cmp.w	r8, #1
    cb8c:	46cd      	mov	sp, r9
    cb8e:	f47f af75 	bne.w	ca7c <bt_att_recv+0x28>
		err = BT_ATT_ERR_INVALID_PDU;
    cb92:	4623      	mov	r3, r4
    cb94:	e00b      	b.n	cbae <bt_att_recv+0x15a>
		err = handler->func(att_chan, buf);
    cb96:	6853      	ldr	r3, [r2, #4]
    cb98:	4649      	mov	r1, r9
    cb9a:	4630      	mov	r0, r6
    cb9c:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    cb9e:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    cba2:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    cba4:	f47f af6a 	bne.w	ca7c <bt_att_recv+0x28>
    cba8:	2800      	cmp	r0, #0
    cbaa:	f43f af67 	beq.w	ca7c <bt_att_recv+0x28>
		send_err_rsp(att_chan, hdr->code, 0, err);
    cbae:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    cbb0:	2900      	cmp	r1, #0
    cbb2:	f43f af63 	beq.w	ca7c <bt_att_recv+0x28>
    cbb6:	e7b6      	b.n	cb26 <bt_att_recv+0xd2>
    cbb8:	00032db2 	.word	0x00032db2
    cbbc:	0002f3dc 	.word	0x0002f3dc
    cbc0:	0002fbf4 	.word	0x0002fbf4
    cbc4:	00032dcd 	.word	0x00032dcd
    cbc8:	00032e27 	.word	0x00032e27
    cbcc:	00032de9 	.word	0x00032de9
    cbd0:	00032e08 	.word	0x00032e08

0000cbd4 <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    cbd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cbd8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cbda:	6803      	ldr	r3, [r0, #0]
    cbdc:	460e      	mov	r6, r1
    cbde:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    cbe0:	b087      	sub	sp, #28
    cbe2:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cbe4:	bf18      	it	ne
    cbe6:	2101      	movne	r1, #1
    cbe8:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
    cbea:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    cbec:	f01f f980 	bl	2bef0 <bt_gatt_change_aware>
    cbf0:	2800      	cmp	r0, #0
    cbf2:	d04b      	beq.n	cc8c <att_write_rsp.constprop.0+0xb8>
	if (!handle) {
    cbf4:	2f00      	cmp	r7, #0
    cbf6:	d04b      	beq.n	cc90 <att_write_rsp.constprop.0+0xbc>
	(void)memset(&data, 0, sizeof(data));
    cbf8:	2218      	movs	r2, #24
    cbfa:	2100      	movs	r1, #0
    cbfc:	4668      	mov	r0, sp
    cbfe:	f021 fcd3 	bl	2e5a8 <memset>
	if (rsp) {
    cc02:	f1b8 0f00 	cmp.w	r8, #0
    cc06:	d122      	bne.n	cc4e <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
    cc08:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cc0a:	4a22      	ldr	r2, [pc, #136]	; (cc94 <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
    cc0c:	681b      	ldr	r3, [r3, #0]
    cc0e:	9300      	str	r3, [sp, #0]
	data.value = value;
    cc10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cc12:	9303      	str	r3, [sp, #12]
	data.len = len;
    cc14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    cc18:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc1c:	2301      	movs	r3, #1
    cc1e:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
    cc22:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cc26:	466b      	mov	r3, sp
    cc28:	4639      	mov	r1, r7
    cc2a:	4638      	mov	r0, r7
	data.req = req;
    cc2c:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    cc30:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    cc34:	f01e f8c9 	bl	2adca <bt_gatt_foreach_attr>
	if (data.err) {
    cc38:	f89d 4014 	ldrb.w	r4, [sp, #20]
    cc3c:	b1f4      	cbz	r4, cc7c <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
    cc3e:	f1b8 0f00 	cmp.w	r8, #0
    cc42:	d10e      	bne.n	cc62 <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    cc44:	2400      	movs	r4, #0
}
    cc46:	4620      	mov	r0, r4
    cc48:	b007      	add	sp, #28
    cc4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    cc4e:	2200      	movs	r2, #0
    cc50:	4641      	mov	r1, r8
    cc52:	4628      	mov	r0, r5
    cc54:	f7ff fe72 	bl	c93c <bt_att_chan_create_pdu>
    cc58:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    cc5a:	2800      	cmp	r0, #0
    cc5c:	d1d4      	bne.n	cc08 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
    cc5e:	240e      	movs	r4, #14
    cc60:	e7f1      	b.n	cc46 <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
    cc62:	9801      	ldr	r0, [sp, #4]
    cc64:	f013 fee4 	bl	20a30 <net_buf_unref>
	if (!req) {
    cc68:	2e00      	cmp	r6, #0
    cc6a:	d0eb      	beq.n	cc44 <att_write_rsp.constprop.0+0x70>
    cc6c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    cc70:	463a      	mov	r2, r7
    cc72:	4631      	mov	r1, r6
    cc74:	4628      	mov	r0, r5
    cc76:	f7ff fecd 	bl	ca14 <send_err_rsp.part.0>
    cc7a:	e7e3      	b.n	cc44 <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
    cc7c:	9901      	ldr	r1, [sp, #4]
    cc7e:	2900      	cmp	r1, #0
    cc80:	d0e0      	beq.n	cc44 <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cc82:	4a05      	ldr	r2, [pc, #20]	; (cc98 <att_write_rsp.constprop.0+0xc4>)
    cc84:	4628      	mov	r0, r5
    cc86:	f01e fa0d 	bl	2b0a4 <bt_att_chan_send_rsp>
    cc8a:	e7dc      	b.n	cc46 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cc8c:	2412      	movs	r4, #18
    cc8e:	e7da      	b.n	cc46 <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
    cc90:	2401      	movs	r4, #1
    cc92:	e7d8      	b.n	cc46 <att_write_rsp.constprop.0+0x72>
    cc94:	0002ae17 	.word	0x0002ae17
    cc98:	0002b0f5 	.word	0x0002b0f5

0000cc9c <bt_att_create_pdu>:
{
    cc9c:	b570      	push	{r4, r5, r6, lr}
    cc9e:	b088      	sub	sp, #32
    cca0:	460e      	mov	r6, r1
    cca2:	4615      	mov	r5, r2
	att = att_get(conn);
    cca4:	f7ff fc64 	bl	c570 <att_get>
	if (!att) {
    cca8:	b1c8      	cbz	r0, ccde <bt_att_create_pdu+0x42>
	return list->head;
    ccaa:	6a43      	ldr	r3, [r0, #36]	; 0x24
    ccac:	1c6a      	adds	r2, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ccae:	b153      	cbz	r3, ccc6 <bt_att_create_pdu+0x2a>
    ccb0:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
	return node->next;
    ccb4:	681b      	ldr	r3, [r3, #0]
    ccb6:	b10b      	cbz	r3, ccbc <bt_att_create_pdu+0x20>
    ccb8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    ccbc:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
    ccc0:	428a      	cmp	r2, r1
    ccc2:	d90f      	bls.n	cce4 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ccc4:	b9ab      	cbnz	r3, ccf2 <bt_att_create_pdu+0x56>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    ccc6:	4b0f      	ldr	r3, [pc, #60]	; (cd04 <bt_att_create_pdu+0x68>)
    ccc8:	480f      	ldr	r0, [pc, #60]	; (cd08 <bt_att_create_pdu+0x6c>)
    ccca:	e9cd 3206 	strd	r3, r2, [sp, #24]
    ccce:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    ccd2:	2303      	movs	r3, #3
    ccd4:	aa05      	add	r2, sp, #20
    ccd6:	9301      	str	r3, [sp, #4]
    ccd8:	9305      	str	r3, [sp, #20]
    ccda:	f01e f91f 	bl	2af1c <z_log_msg2_static_create.constprop.0>
}
    ccde:	2000      	movs	r0, #0
    cce0:	b008      	add	sp, #32
    cce2:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    cce4:	462a      	mov	r2, r5
    cce6:	4631      	mov	r1, r6
}
    cce8:	b008      	add	sp, #32
    ccea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    ccee:	f7ff be25 	b.w	c93c <bt_att_chan_create_pdu>
    ccf2:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ccf6:	b10c      	cbz	r4, ccfc <bt_att_create_pdu+0x60>
    ccf8:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    ccfc:	4618      	mov	r0, r3
    ccfe:	4623      	mov	r3, r4
    cd00:	e7dc      	b.n	ccbc <bt_att_create_pdu+0x20>
    cd02:	bf00      	nop
    cd04:	00032e41 	.word	0x00032e41
    cd08:	0002f3dc 	.word	0x0002f3dc

0000cd0c <att_read_group_req>:
{
    cd0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cd10:	898c      	ldrh	r4, [r1, #12]
    cd12:	3c04      	subs	r4, #4
    cd14:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cd16:	2c02      	cmp	r4, #2
{
    cd18:	4605      	mov	r5, r0
    cd1a:	b08c      	sub	sp, #48	; 0x30
    cd1c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cd1e:	d001      	beq.n	cd24 <att_read_group_req+0x18>
    cd20:	2c10      	cmp	r4, #16
    cd22:	d16f      	bne.n	ce04 <att_read_group_req+0xf8>
    cd24:	2104      	movs	r1, #4
    cd26:	3008      	adds	r0, #8
    cd28:	f01f ff00 	bl	2cb2c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd2c:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd30:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd32:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd34:	1d01      	adds	r1, r0, #4
    cd36:	4622      	mov	r2, r4
    cd38:	4640      	mov	r0, r8
    cd3a:	f01d f955 	bl	29fe8 <bt_uuid_create>
    cd3e:	2800      	cmp	r0, #0
    cd40:	d062      	beq.n	ce08 <att_read_group_req+0xfc>
	if (!start || !end) {
    cd42:	2e00      	cmp	r6, #0
    cd44:	d03a      	beq.n	cdbc <att_read_group_req+0xb0>
    cd46:	2400      	movs	r4, #0
    cd48:	2f00      	cmp	r7, #0
    cd4a:	d036      	beq.n	cdba <att_read_group_req+0xae>
	if (start > end) {
    cd4c:	42b7      	cmp	r7, r6
    cd4e:	d335      	bcc.n	cdbc <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cd50:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cd54:	a901      	add	r1, sp, #4
    cd56:	4640      	mov	r0, r8
    cd58:	f88d 4004 	strb.w	r4, [sp, #4]
    cd5c:	f8ad 3006 	strh.w	r3, [sp, #6]
    cd60:	f01d f914 	bl	29f8c <bt_uuid_cmp>
    cd64:	2800      	cmp	r0, #0
    cd66:	d134      	bne.n	cdd2 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    cd68:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cd6a:	2214      	movs	r2, #20
    cd6c:	2100      	movs	r1, #0
    cd6e:	a807      	add	r0, sp, #28
    cd70:	f021 fc1a 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    cd74:	2201      	movs	r2, #1
    cd76:	2111      	movs	r1, #17
    cd78:	4620      	mov	r0, r4
    cd7a:	f7ff ff8f 	bl	cc9c <bt_att_create_pdu>
    cd7e:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    cd80:	2800      	cmp	r0, #0
    cd82:	d041      	beq.n	ce08 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
    cd84:	2101      	movs	r1, #1
    cd86:	3008      	adds	r0, #8
	data.uuid = uuid;
    cd88:	e9cd 5807 	strd	r5, r8, [sp, #28]
    cd8c:	f01f fe9d 	bl	2caca <net_buf_simple_add>
	data.rsp->len = 0U;
    cd90:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd94:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cd96:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    cd98:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cd9c:	4a1b      	ldr	r2, [pc, #108]	; (ce0c <att_read_group_req+0x100>)
	data.group = NULL;
    cd9e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cda2:	4639      	mov	r1, r7
    cda4:	4630      	mov	r0, r6
    cda6:	f01e f810 	bl	2adca <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    cdaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cdac:	781c      	ldrb	r4, [r3, #0]
    cdae:	bb1c      	cbnz	r4, cdf8 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    cdb0:	9809      	ldr	r0, [sp, #36]	; 0x24
    cdb2:	f013 fe3d 	bl	20a30 <net_buf_unref>
	if (!req) {
    cdb6:	230a      	movs	r3, #10
    cdb8:	e018      	b.n	cdec <att_read_group_req+0xe0>
			*err = 0U;
    cdba:	463e      	mov	r6, r7
	if (!req) {
    cdbc:	2301      	movs	r3, #1
    cdbe:	4632      	mov	r2, r6
    cdc0:	2110      	movs	r1, #16
    cdc2:	4628      	mov	r0, r5
    cdc4:	f7ff fe26 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    cdc8:	2400      	movs	r4, #0
}
    cdca:	4620      	mov	r0, r4
    cdcc:	b00c      	add	sp, #48	; 0x30
    cdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    cdd2:	f642 0301 	movw	r3, #10241	; 0x2801
    cdd6:	a907      	add	r1, sp, #28
    cdd8:	4640      	mov	r0, r8
    cdda:	f88d 401c 	strb.w	r4, [sp, #28]
    cdde:	f8ad 301e 	strh.w	r3, [sp, #30]
    cde2:	f01d f8d3 	bl	29f8c <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cde6:	2800      	cmp	r0, #0
    cde8:	d0be      	beq.n	cd68 <att_read_group_req+0x5c>
	if (!req) {
    cdea:	2310      	movs	r3, #16
    cdec:	4632      	mov	r2, r6
    cdee:	2110      	movs	r1, #16
    cdf0:	4628      	mov	r0, r5
    cdf2:	f7ff fe0f 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    cdf6:	e7e8      	b.n	cdca <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cdf8:	4a05      	ldr	r2, [pc, #20]	; (ce10 <att_read_group_req+0x104>)
    cdfa:	9909      	ldr	r1, [sp, #36]	; 0x24
    cdfc:	4628      	mov	r0, r5
    cdfe:	f01e f951 	bl	2b0a4 <bt_att_chan_send_rsp>
	return 0;
    ce02:	e7e1      	b.n	cdc8 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    ce04:	2404      	movs	r4, #4
    ce06:	e7e0      	b.n	cdca <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    ce08:	240e      	movs	r4, #14
    ce0a:	e7de      	b.n	cdca <att_read_group_req+0xbe>
    ce0c:	0000c6a5 	.word	0x0000c6a5
    ce10:	0002b0f5 	.word	0x0002b0f5

0000ce14 <att_read_mult_req>:
{
    ce14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    ce18:	6886      	ldr	r6, [r0, #8]
{
    ce1a:	b085      	sub	sp, #20
    ce1c:	4604      	mov	r4, r0
    ce1e:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    ce20:	4630      	mov	r0, r6
    ce22:	2101      	movs	r1, #1
    ce24:	f01f f864 	bl	2bef0 <bt_gatt_change_aware>
    ce28:	2800      	cmp	r0, #0
    ce2a:	d038      	beq.n	ce9e <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
    ce2c:	2210      	movs	r2, #16
    ce2e:	2100      	movs	r1, #0
    ce30:	4668      	mov	r0, sp
    ce32:	f021 fbb9 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    ce36:	2200      	movs	r2, #0
    ce38:	210f      	movs	r1, #15
    ce3a:	4630      	mov	r0, r6
    ce3c:	f7ff ff2e 	bl	cc9c <bt_att_create_pdu>
    ce40:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ce42:	b370      	cbz	r0, cea2 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ce44:	f8df 9060 	ldr.w	r9, [pc, #96]	; cea8 <att_read_mult_req+0x94>
	data.chan = chan;
    ce48:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    ce4a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    ce4e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    ce52:	89ab      	ldrh	r3, [r5, #12]
    ce54:	2b01      	cmp	r3, #1
    ce56:	d805      	bhi.n	ce64 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ce58:	4a14      	ldr	r2, [pc, #80]	; (ceac <att_read_mult_req+0x98>)
    ce5a:	9902      	ldr	r1, [sp, #8]
    ce5c:	4620      	mov	r0, r4
    ce5e:	f01e f921 	bl	2b0a4 <bt_att_chan_send_rsp>
    ce62:	e018      	b.n	ce96 <att_read_mult_req+0x82>
    ce64:	4638      	mov	r0, r7
    ce66:	f01f fe71 	bl	2cb4c <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ce6a:	466b      	mov	r3, sp
    ce6c:	464a      	mov	r2, r9
    ce6e:	4601      	mov	r1, r0
    ce70:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    ce72:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ce76:	f01d ffa8 	bl	2adca <bt_gatt_foreach_attr>
		if (data.err) {
    ce7a:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ce7e:	2b00      	cmp	r3, #0
    ce80:	d0e7      	beq.n	ce52 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
    ce82:	9802      	ldr	r0, [sp, #8]
    ce84:	f013 fdd4 	bl	20a30 <net_buf_unref>
	if (!req) {
    ce88:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ce8c:	4632      	mov	r2, r6
    ce8e:	210e      	movs	r1, #14
    ce90:	4620      	mov	r0, r4
    ce92:	f7ff fdbf 	bl	ca14 <send_err_rsp.part.0>
	return 0;
    ce96:	2000      	movs	r0, #0
}
    ce98:	b005      	add	sp, #20
    ce9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ce9e:	2012      	movs	r0, #18
    cea0:	e7fa      	b.n	ce98 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
    cea2:	200e      	movs	r0, #14
    cea4:	e7f8      	b.n	ce98 <att_read_mult_req+0x84>
    cea6:	bf00      	nop
    cea8:	0002b12d 	.word	0x0002b12d
    ceac:	0002b0f5 	.word	0x0002b0f5

0000ceb0 <att_read_rsp>:
{
    ceb0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    ceb4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    ceb8:	4605      	mov	r5, r0
    ceba:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    cebc:	4640      	mov	r0, r8
    cebe:	2101      	movs	r1, #1
{
    cec0:	4614      	mov	r4, r2
    cec2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    cec4:	f01f f814 	bl	2bef0 <bt_gatt_change_aware>
    cec8:	b390      	cbz	r0, cf30 <att_read_rsp+0x80>
	if (!handle) {
    ceca:	b39e      	cbz	r6, cf34 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    cecc:	2210      	movs	r2, #16
    cece:	2100      	movs	r1, #0
    ced0:	4668      	mov	r0, sp
    ced2:	f021 fb69 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    ced6:	2200      	movs	r2, #0
    ced8:	4621      	mov	r1, r4
    ceda:	4640      	mov	r0, r8
    cedc:	f7ff fede 	bl	cc9c <bt_att_create_pdu>
    cee0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cee2:	b348      	cbz	r0, cf38 <att_read_rsp+0x88>
	data.offset = offset;
    cee4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cee8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ceec:	2301      	movs	r3, #1
    ceee:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cef2:	4a12      	ldr	r2, [pc, #72]	; (cf3c <att_read_rsp+0x8c>)
	data.chan = chan;
    cef4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cef6:	466b      	mov	r3, sp
    cef8:	4631      	mov	r1, r6
    cefa:	4630      	mov	r0, r6
    cefc:	f01d ff65 	bl	2adca <bt_gatt_foreach_attr>
	if (data.err) {
    cf00:	f89d 400c 	ldrb.w	r4, [sp, #12]
    cf04:	b174      	cbz	r4, cf24 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    cf06:	9802      	ldr	r0, [sp, #8]
    cf08:	f013 fd92 	bl	20a30 <net_buf_unref>
	if (!req) {
    cf0c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cf10:	4632      	mov	r2, r6
    cf12:	4639      	mov	r1, r7
    cf14:	4628      	mov	r0, r5
    cf16:	f7ff fd7d 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    cf1a:	2400      	movs	r4, #0
}
    cf1c:	4620      	mov	r0, r4
    cf1e:	b004      	add	sp, #16
    cf20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cf24:	4a06      	ldr	r2, [pc, #24]	; (cf40 <att_read_rsp+0x90>)
    cf26:	9902      	ldr	r1, [sp, #8]
    cf28:	4628      	mov	r0, r5
    cf2a:	f01e f8bb 	bl	2b0a4 <bt_att_chan_send_rsp>
	return 0;
    cf2e:	e7f5      	b.n	cf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cf30:	2412      	movs	r4, #18
    cf32:	e7f3      	b.n	cf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    cf34:	2401      	movs	r4, #1
    cf36:	e7f1      	b.n	cf1c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    cf38:	240e      	movs	r4, #14
    cf3a:	e7ef      	b.n	cf1c <att_read_rsp+0x6c>
    cf3c:	0002b12d 	.word	0x0002b12d
    cf40:	0002b0f5 	.word	0x0002b0f5

0000cf44 <att_read_type_req>:
{
    cf44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cf48:	898c      	ldrh	r4, [r1, #12]
    cf4a:	3c04      	subs	r4, #4
    cf4c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cf4e:	2c02      	cmp	r4, #2
{
    cf50:	4605      	mov	r5, r0
    cf52:	b08c      	sub	sp, #48	; 0x30
    cf54:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cf56:	d001      	beq.n	cf5c <att_read_type_req+0x18>
    cf58:	2c10      	cmp	r4, #16
    cf5a:	d150      	bne.n	cffe <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
    cf5c:	2104      	movs	r1, #4
    cf5e:	3008      	adds	r0, #8
    cf60:	f01f fde4 	bl	2cb2c <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cf64:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    cf68:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cf6a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cf6c:	1d01      	adds	r1, r0, #4
    cf6e:	4622      	mov	r2, r4
    cf70:	4640      	mov	r0, r8
    cf72:	f01d f839 	bl	29fe8 <bt_uuid_create>
    cf76:	b188      	cbz	r0, cf9c <att_read_type_req+0x58>
	if (!start || !end) {
    cf78:	b19e      	cbz	r6, cfa2 <att_read_type_req+0x5e>
    cf7a:	b18f      	cbz	r7, cfa0 <att_read_type_req+0x5c>
	if (start > end) {
    cf7c:	42be      	cmp	r6, r7
    cf7e:	d810      	bhi.n	cfa2 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    cf80:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    cf82:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cf84:	2100      	movs	r1, #0
    cf86:	eb0d 0002 	add.w	r0, sp, r2
    cf8a:	f021 fb0d 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cf8e:	2201      	movs	r2, #1
    cf90:	2109      	movs	r1, #9
    cf92:	4620      	mov	r0, r4
    cf94:	f7ff fe82 	bl	cc9c <bt_att_create_pdu>
    cf98:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cf9a:	b968      	cbnz	r0, cfb8 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    cf9c:	240e      	movs	r4, #14
    cf9e:	e007      	b.n	cfb0 <att_read_type_req+0x6c>
			*err = 0U;
    cfa0:	463e      	mov	r6, r7
	if (!req) {
    cfa2:	2301      	movs	r3, #1
    cfa4:	4632      	mov	r2, r6
    cfa6:	2108      	movs	r1, #8
    cfa8:	4628      	mov	r0, r5
    cfaa:	f7ff fd33 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    cfae:	2400      	movs	r4, #0
}
    cfb0:	4620      	mov	r0, r4
    cfb2:	b00c      	add	sp, #48	; 0x30
    cfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    cfb8:	2101      	movs	r1, #1
    cfba:	3008      	adds	r0, #8
	data.uuid = uuid;
    cfbc:	e9cd 5806 	strd	r5, r8, [sp, #24]
    cfc0:	f01f fd83 	bl	2caca <net_buf_simple_add>
	data.rsp->len = 0U;
    cfc4:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cfc8:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cfca:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cfcc:	4a0d      	ldr	r2, [pc, #52]	; (d004 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    cfce:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cfd2:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cfd4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cfd8:	4630      	mov	r0, r6
    cfda:	ab06      	add	r3, sp, #24
    cfdc:	f01d fef5 	bl	2adca <bt_gatt_foreach_attr>
	if (data.err) {
    cfe0:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cfe4:	b12c      	cbz	r4, cff2 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    cfe6:	9808      	ldr	r0, [sp, #32]
    cfe8:	f013 fd22 	bl	20a30 <net_buf_unref>
	if (!req) {
    cfec:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cff0:	e7d8      	b.n	cfa4 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cff2:	4a05      	ldr	r2, [pc, #20]	; (d008 <att_read_type_req+0xc4>)
    cff4:	9908      	ldr	r1, [sp, #32]
    cff6:	4628      	mov	r0, r5
    cff8:	f01e f854 	bl	2b0a4 <bt_att_chan_send_rsp>
	return 0;
    cffc:	e7d8      	b.n	cfb0 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    cffe:	2404      	movs	r4, #4
    d000:	e7d6      	b.n	cfb0 <att_read_type_req+0x6c>
    d002:	bf00      	nop
    d004:	0000c82d 	.word	0x0000c82d
    d008:	0002b0f5 	.word	0x0002b0f5

0000d00c <att_find_type_req>:
{
    d00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d010:	4688      	mov	r8, r1
    d012:	b086      	sub	sp, #24
    d014:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    d016:	2106      	movs	r1, #6
    d018:	f108 0008 	add.w	r0, r8, #8
    d01c:	f01f fd86 	bl	2cb2c <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    d020:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    d022:	b317      	cbz	r7, d06a <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d024:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    d028:	f1b9 0f00 	cmp.w	r9, #0
    d02c:	d01c      	beq.n	d068 <att_find_type_req+0x5c>
	if (start > end) {
    d02e:	45b9      	cmp	r9, r7
    d030:	d31b      	bcc.n	d06a <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    d032:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d034:	f8ad 3002 	strh.w	r3, [sp, #2]
    d038:	2400      	movs	r4, #0
    d03a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    d03e:	a901      	add	r1, sp, #4
    d040:	4668      	mov	r0, sp
	value = buf->data;
    d042:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    d046:	f88d 4000 	strb.w	r4, [sp]
    d04a:	f88d 4004 	strb.w	r4, [sp, #4]
    d04e:	f8ad 3006 	strh.w	r3, [sp, #6]
    d052:	f01c ff9b 	bl	29f8c <bt_uuid_cmp>
    d056:	4606      	mov	r6, r0
    d058:	b190      	cbz	r0, d080 <att_find_type_req+0x74>
	if (!req) {
    d05a:	230a      	movs	r3, #10
    d05c:	463a      	mov	r2, r7
    d05e:	2106      	movs	r1, #6
    d060:	4628      	mov	r0, r5
    d062:	f7ff fcd7 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    d066:	e007      	b.n	d078 <att_find_type_req+0x6c>
			*err = 0U;
    d068:	464f      	mov	r7, r9
	if (!req) {
    d06a:	2301      	movs	r3, #1
    d06c:	463a      	mov	r2, r7
    d06e:	2106      	movs	r1, #6
    d070:	4628      	mov	r0, r5
    d072:	f7ff fccf 	bl	ca14 <send_err_rsp.part.0>
		return 0;
    d076:	2400      	movs	r4, #0
}
    d078:	4620      	mov	r0, r4
    d07a:	b006      	add	sp, #24
    d07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d080:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    d084:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    d088:	4601      	mov	r1, r0
    d08a:	2214      	movs	r2, #20
    d08c:	a801      	add	r0, sp, #4
    d08e:	f021 fa8b 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    d092:	4632      	mov	r2, r6
    d094:	2107      	movs	r1, #7
    d096:	4640      	mov	r0, r8
    d098:	f7ff fe00 	bl	cc9c <bt_att_create_pdu>
    d09c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    d09e:	b1e0      	cbz	r0, d0da <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    d0a0:	230a      	movs	r3, #10
    d0a2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d0a6:	4a0e      	ldr	r2, [pc, #56]	; (d0e0 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    d0a8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d0ac:	ab01      	add	r3, sp, #4
    d0ae:	4649      	mov	r1, r9
    d0b0:	4638      	mov	r0, r7
	data.value = value;
    d0b2:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    d0b6:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    d0b8:	f01d fe87 	bl	2adca <bt_gatt_foreach_attr>
	if (data.err) {
    d0bc:	f89d 4015 	ldrb.w	r4, [sp, #21]
    d0c0:	b12c      	cbz	r4, d0ce <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    d0c2:	9802      	ldr	r0, [sp, #8]
    d0c4:	f013 fcb4 	bl	20a30 <net_buf_unref>
	if (!req) {
    d0c8:	f89d 3015 	ldrb.w	r3, [sp, #21]
    d0cc:	e7ce      	b.n	d06c <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d0ce:	4a05      	ldr	r2, [pc, #20]	; (d0e4 <att_find_type_req+0xd8>)
    d0d0:	9902      	ldr	r1, [sp, #8]
    d0d2:	4628      	mov	r0, r5
    d0d4:	f01d ffe6 	bl	2b0a4 <bt_att_chan_send_rsp>
	return 0;
    d0d8:	e7ce      	b.n	d078 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    d0da:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    d0dc:	e7cc      	b.n	d078 <att_find_type_req+0x6c>
    d0de:	bf00      	nop
    d0e0:	0000c411 	.word	0x0000c411
    d0e4:	0002b0f5 	.word	0x0002b0f5

0000d0e8 <att_find_info_req>:
{
    d0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    d0ea:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    d0ec:	881e      	ldrh	r6, [r3, #0]
{
    d0ee:	b085      	sub	sp, #20
    d0f0:	4605      	mov	r5, r0
	if (!start || !end) {
    d0f2:	b19e      	cbz	r6, d11c <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    d0f4:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    d0f6:	b184      	cbz	r4, d11a <att_find_info_req+0x32>
	if (start > end) {
    d0f8:	42a6      	cmp	r6, r4
    d0fa:	d80f      	bhi.n	d11c <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    d0fc:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    d0fe:	2210      	movs	r2, #16
    d100:	2100      	movs	r1, #0
    d102:	4668      	mov	r0, sp
    d104:	f021 fa50 	bl	2e5a8 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    d108:	2200      	movs	r2, #0
    d10a:	2105      	movs	r1, #5
    d10c:	4638      	mov	r0, r7
    d10e:	f7ff fdc5 	bl	cc9c <bt_att_create_pdu>
    d112:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    d114:	b958      	cbnz	r0, d12e <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    d116:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    d118:	e007      	b.n	d12a <att_find_info_req+0x42>
			*err = 0U;
    d11a:	4626      	mov	r6, r4
	if (!req) {
    d11c:	2301      	movs	r3, #1
    d11e:	4632      	mov	r2, r6
    d120:	2104      	movs	r1, #4
    d122:	4628      	mov	r0, r5
    d124:	f7ff fc76 	bl	ca14 <send_err_rsp.part.0>
	return 0;
    d128:	2000      	movs	r0, #0
}
    d12a:	b005      	add	sp, #20
    d12c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d12e:	4621      	mov	r1, r4
    d130:	4a09      	ldr	r2, [pc, #36]	; (d158 <att_find_info_req+0x70>)
	data.chan = chan;
    d132:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    d134:	466b      	mov	r3, sp
    d136:	4630      	mov	r0, r6
    d138:	f01d fe47 	bl	2adca <bt_gatt_foreach_attr>
	if (!data.rsp) {
    d13c:	9c02      	ldr	r4, [sp, #8]
    d13e:	b924      	cbnz	r4, d14a <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    d140:	9801      	ldr	r0, [sp, #4]
    d142:	f013 fc75 	bl	20a30 <net_buf_unref>
	if (!req) {
    d146:	230a      	movs	r3, #10
    d148:	e7e9      	b.n	d11e <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    d14a:	4a04      	ldr	r2, [pc, #16]	; (d15c <att_find_info_req+0x74>)
    d14c:	9901      	ldr	r1, [sp, #4]
    d14e:	4628      	mov	r0, r5
    d150:	f01d ffa8 	bl	2b0a4 <bt_att_chan_send_rsp>
    d154:	e7e8      	b.n	d128 <att_find_info_req+0x40>
    d156:	bf00      	nop
    d158:	0002ae7b 	.word	0x0002ae7b
    d15c:	0002b0f5 	.word	0x0002b0f5

0000d160 <att_mtu_req>:
{
    d160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    d162:	6803      	ldr	r3, [r0, #0]
{
    d164:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
    d166:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d168:	f3bf 8f5b 	dmb	ish
    d16c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    d170:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    d174:	f3c3 05c0 	ubfx	r5, r3, #3, #1
    d178:	071b      	lsls	r3, r3, #28
    d17a:	d421      	bmi.n	d1c0 <att_mtu_req+0x60>
	mtu_client = sys_le16_to_cpu(req->mtu);
    d17c:	688b      	ldr	r3, [r1, #8]
    d17e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    d180:	2e16      	cmp	r6, #22
    d182:	d91f      	bls.n	d1c4 <att_mtu_req+0x64>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    d184:	2202      	movs	r2, #2
    d186:	2103      	movs	r1, #3
    d188:	f7ff fd88 	bl	cc9c <bt_att_create_pdu>
	if (!pdu) {
    d18c:	4607      	mov	r7, r0
    d18e:	b1d8      	cbz	r0, d1c8 <att_mtu_req+0x68>
	return net_buf_simple_add(&buf->b, len);
    d190:	2102      	movs	r1, #2
    d192:	3008      	adds	r0, #8
    d194:	f01f fc99 	bl	2caca <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d198:	2341      	movs	r3, #65	; 0x41
    d19a:	7003      	strb	r3, [r0, #0]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d19c:	4a0b      	ldr	r2, [pc, #44]	; (d1cc <att_mtu_req+0x6c>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    d19e:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    d1a0:	4639      	mov	r1, r7
    d1a2:	4620      	mov	r0, r4
    d1a4:	f01d ff7e 	bl	2b0a4 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d1a8:	2e41      	cmp	r6, #65	; 0x41
    d1aa:	bf28      	it	cs
    d1ac:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
    d1ae:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    d1b0:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    d1b4:	f8a4 608a 	strh.w	r6, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
    d1b8:	f01d fdd1 	bl	2ad5e <att_chan_mtu_updated>
	return 0;
    d1bc:	4628      	mov	r0, r5
}
    d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    d1c0:	2006      	movs	r0, #6
    d1c2:	e7fc      	b.n	d1be <att_mtu_req+0x5e>
		return BT_ATT_ERR_INVALID_PDU;
    d1c4:	2004      	movs	r0, #4
    d1c6:	e7fa      	b.n	d1be <att_mtu_req+0x5e>
		return BT_ATT_ERR_UNLIKELY;
    d1c8:	200e      	movs	r0, #14
    d1ca:	e7f8      	b.n	d1be <att_mtu_req+0x5e>
    d1cc:	0002b0f5 	.word	0x0002b0f5

0000d1d0 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    d1d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_att_req *req = NULL;
    d1d2:	2300      	movs	r3, #0
{
    d1d4:	4605      	mov	r5, r0
    d1d6:	460c      	mov	r4, r1
	struct bt_att_req *req = NULL;
    d1d8:	9301      	str	r3, [sp, #4]
	return z_impl_z_current_get();
    d1da:	f018 fa6f 	bl	256bc <z_impl_z_current_get>

	if (k_current_get() == bt_recv_thread_id) {
    d1de:	4b0b      	ldr	r3, [pc, #44]	; (d20c <bt_att_req_alloc+0x3c>)
    d1e0:	681b      	ldr	r3, [r3, #0]
    d1e2:	4283      	cmp	r3, r0
		/* No req will be fulfilled while blocking on the bt_recv thread.
		 * Blocking would cause deadlock.
		 */
		timeout = K_NO_WAIT;
    d1e4:	bf04      	itt	eq
    d1e6:	2500      	moveq	r5, #0
    d1e8:	462c      	moveq	r4, r5
	}

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    d1ea:	a901      	add	r1, sp, #4
    d1ec:	4808      	ldr	r0, [pc, #32]	; (d210 <bt_att_req_alloc+0x40>)
    d1ee:	462a      	mov	r2, r5
    d1f0:	4623      	mov	r3, r4
    d1f2:	f017 fac3 	bl	2477c <k_mem_slab_alloc>
    d1f6:	4601      	mov	r1, r0
    d1f8:	b930      	cbnz	r0, d208 <bt_att_req_alloc+0x38>
    d1fa:	9801      	ldr	r0, [sp, #4]
    d1fc:	221c      	movs	r2, #28
    d1fe:	f021 f9d3 	bl	2e5a8 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
    d202:	9801      	ldr	r0, [sp, #4]
}
    d204:	b003      	add	sp, #12
    d206:	bd30      	pop	{r4, r5, pc}
		return NULL;
    d208:	2000      	movs	r0, #0
    d20a:	e7fb      	b.n	d204 <bt_att_req_alloc+0x34>
    d20c:	20002298 	.word	0x20002298
    d210:	20000c58 	.word	0x20000c58

0000d214 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    d214:	b507      	push	{r0, r1, r2, lr}
    d216:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    d218:	6880      	ldr	r0, [r0, #8]
    d21a:	b120      	cbz	r0, d226 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    d21c:	f013 fc08 	bl	20a30 <net_buf_unref>
		req->buf = NULL;
    d220:	9b01      	ldr	r3, [sp, #4]
    d222:	2200      	movs	r2, #0
    d224:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    d226:	4803      	ldr	r0, [pc, #12]	; (d234 <bt_att_req_free+0x20>)
    d228:	a901      	add	r1, sp, #4
    d22a:	f020 fc5f 	bl	2daec <k_mem_slab_free>
}
    d22e:	b003      	add	sp, #12
    d230:	f85d fb04 	ldr.w	pc, [sp], #4
    d234:	20000c58 	.word	0x20000c58

0000d238 <att_handle_rsp>:
{
    d238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d23c:	4604      	mov	r4, r0
    d23e:	b08b      	sub	sp, #44	; 0x2c
	k_work_cancel_delayable(&chan->timeout_work);
    d240:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    d244:	4689      	mov	r9, r1
    d246:	4692      	mov	sl, r2
    d248:	4698      	mov	r8, r3
	k_work_cancel_delayable(&chan->timeout_work);
    d24a:	f020 fe3a 	bl	2dec2 <k_work_cancel_delayable>
	if (!chan->req) {
    d24e:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    d252:	b9dd      	cbnz	r5, d28c <att_handle_rsp+0x54>
		BT_WARN("No pending ATT request");
    d254:	4b17      	ldr	r3, [pc, #92]	; (d2b4 <att_handle_rsp+0x7c>)
    d256:	9308      	str	r3, [sp, #32]
    d258:	4817      	ldr	r0, [pc, #92]	; (d2b8 <att_handle_rsp+0x80>)
    d25a:	2302      	movs	r3, #2
    d25c:	aa07      	add	r2, sp, #28
    d25e:	f44f 5184 	mov.w	r1, #4224	; 0x1080
	bt_att_func_t func = NULL;
    d262:	462e      	mov	r6, r5
		BT_WARN("No pending ATT request");
    d264:	9303      	str	r3, [sp, #12]
    d266:	9307      	str	r3, [sp, #28]
    d268:	f01d fe58 	bl	2af1c <z_log_msg2_static_create.constprop.0>
	att_req_send_process(chan->att);
    d26c:	6820      	ldr	r0, [r4, #0]
    d26e:	f01d ffc4 	bl	2b1fa <att_req_send_process>
	if (func) {
    d272:	b13e      	cbz	r6, d284 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    d274:	6820      	ldr	r0, [r4, #0]
    d276:	f8cd b000 	str.w	fp, [sp]
    d27a:	6800      	ldr	r0, [r0, #0]
    d27c:	4653      	mov	r3, sl
    d27e:	464a      	mov	r2, r9
    d280:	4641      	mov	r1, r8
    d282:	47b0      	blx	r6
}
    d284:	2000      	movs	r0, #0
    d286:	b00b      	add	sp, #44	; 0x2c
    d288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    d28c:	4b0b      	ldr	r3, [pc, #44]	; (d2bc <att_handle_rsp+0x84>)
    d28e:	429d      	cmp	r5, r3
    d290:	f04f 0700 	mov.w	r7, #0
    d294:	d103      	bne.n	d29e <att_handle_rsp+0x66>
		chan->req = NULL;
    d296:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    d29a:	463e      	mov	r6, r7
		goto process;
    d29c:	e7e6      	b.n	d26c <att_handle_rsp+0x34>
	func = chan->req->func;
    d29e:	686e      	ldr	r6, [r5, #4]
	chan->req->func = NULL;
    d2a0:	606f      	str	r7, [r5, #4]
	bt_att_req_free(chan->req);
    d2a2:	4628      	mov	r0, r5
	params = chan->req->user_data;
    d2a4:	f8d5 b018 	ldr.w	fp, [r5, #24]
	bt_att_req_free(chan->req);
    d2a8:	f7ff ffb4 	bl	d214 <bt_att_req_free>
	chan->req = NULL;
    d2ac:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
    d2b0:	e7dc      	b.n	d26c <att_handle_rsp+0x34>
    d2b2:	bf00      	nop
    d2b4:	00032e5c 	.word	0x00032e5c
    d2b8:	0002f3dc 	.word	0x0002f3dc
    d2bc:	20002308 	.word	0x20002308

0000d2c0 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
    d2c0:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
{
    d2c4:	b570      	push	{r4, r5, r6, lr}
    d2c6:	4604      	mov	r4, r0
	if (!chan->req || chan->req == &cancel) {
    d2c8:	b313      	cbz	r3, d310 <att_error_rsp+0x50>
    d2ca:	4a16      	ldr	r2, [pc, #88]	; (d324 <att_error_rsp+0x64>)
    d2cc:	4293      	cmp	r3, r2
    d2ce:	d01f      	beq.n	d310 <att_error_rsp+0x50>
	err = rsp->error;
    d2d0:	688b      	ldr	r3, [r1, #8]
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d2d2:	6880      	ldr	r0, [r0, #8]
	err = rsp->error;
    d2d4:	78dd      	ldrb	r5, [r3, #3]
	switch (err) {
    d2d6:	2d05      	cmp	r5, #5
    d2d8:	d006      	beq.n	d2e8 <att_error_rsp+0x28>
    d2da:	2d0f      	cmp	r5, #15
    d2dc:	d119      	bne.n	d312 <att_error_rsp+0x52>
		if (conn->sec_level >= BT_SECURITY_L2)
    d2de:	7a43      	ldrb	r3, [r0, #9]
    d2e0:	2b01      	cmp	r3, #1
    d2e2:	d816      	bhi.n	d312 <att_error_rsp+0x52>
		sec = BT_SECURITY_L2;
    d2e4:	2102      	movs	r1, #2
    d2e6:	e007      	b.n	d2f8 <att_error_rsp+0x38>
		if (conn->sec_level < BT_SECURITY_L2) {
    d2e8:	7a43      	ldrb	r3, [r0, #9]
    d2ea:	2b01      	cmp	r3, #1
    d2ec:	d9fa      	bls.n	d2e4 <att_error_rsp+0x24>
		} else if (conn->sec_level < BT_SECURITY_L3) {
    d2ee:	2b02      	cmp	r3, #2
    d2f0:	d00c      	beq.n	d30c <att_error_rsp+0x4c>
		} else if (conn->sec_level < BT_SECURITY_L4) {
    d2f2:	2b03      	cmp	r3, #3
    d2f4:	d10d      	bne.n	d312 <att_error_rsp+0x52>
			sec = BT_SECURITY_L4;
    d2f6:	2104      	movs	r1, #4
	return bt_conn_set_security(conn, sec);
    d2f8:	f01d fb25 	bl	2a946 <bt_conn_set_security>
	if (!att_change_security(chan->chan.chan.conn, err)) {
    d2fc:	b948      	cbnz	r0, d312 <att_error_rsp+0x52>
		chan->req->retrying = true;
    d2fe:	f8d4 20f4 	ldr.w	r2, [r4, #244]	; 0xf4
    d302:	7c13      	ldrb	r3, [r2, #16]
    d304:	f043 0301 	orr.w	r3, r3, #1
    d308:	7413      	strb	r3, [r2, #16]
}
    d30a:	bd70      	pop	{r4, r5, r6, pc}
			sec = BT_SECURITY_L3;
    d30c:	2103      	movs	r1, #3
    d30e:	e7f3      	b.n	d2f8 <att_error_rsp+0x38>
		err = BT_ATT_ERR_UNLIKELY;
    d310:	250e      	movs	r5, #14
	return att_handle_rsp(chan, NULL, 0, err);
    d312:	2200      	movs	r2, #0
    d314:	462b      	mov	r3, r5
    d316:	4620      	mov	r0, r4
    d318:	4611      	mov	r1, r2
}
    d31a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, NULL, 0, err);
    d31e:	f7ff bf8b 	b.w	d238 <att_handle_rsp>
    d322:	bf00      	nop
    d324:	20002308 	.word	0x20002308

0000d328 <bt_att_disconnected>:
{
    d328:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    d32a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    d32e:	b085      	sub	sp, #20
    d330:	4604      	mov	r4, r0
	if (!att_chan->att) {
    d332:	2d00      	cmp	r5, #0
    d334:	d04d      	beq.n	d3d2 <bt_att_disconnected+0xaa>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    d336:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    d33a:	f105 0024 	add.w	r0, r5, #36	; 0x24
    d33e:	f01d febf 	bl	2b0c0 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    d342:	f1a4 0608 	sub.w	r6, r4, #8
    d346:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    d34a:	2200      	movs	r2, #0
    d34c:	2300      	movs	r3, #0
    d34e:	4638      	mov	r0, r7
    d350:	f01f fb58 	bl	2ca04 <net_buf_get>
    d354:	4602      	mov	r2, r0
    d356:	bb18      	cbnz	r0, d3a0 <bt_att_disconnected+0x78>
	if (chan->req) {
    d358:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    d35c:	b123      	cbz	r3, d368 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    d35e:	4601      	mov	r1, r0
    d360:	230e      	movs	r3, #14
    d362:	4630      	mov	r0, r6
    d364:	f7ff ff68 	bl	d238 <att_handle_rsp>
	chan->att = NULL;
    d368:	2300      	movs	r3, #0
    d36a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    d36e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d370:	2b00      	cmp	r3, #0
    d372:	d12e      	bne.n	d3d2 <bt_att_disconnected+0xaa>
	att_reset(att);
    d374:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d376:	9803      	ldr	r0, [sp, #12]
    d378:	2200      	movs	r2, #0
    d37a:	2300      	movs	r3, #0
    d37c:	300c      	adds	r0, #12
    d37e:	f01f fb41 	bl	2ca04 <net_buf_get>
    d382:	b980      	cbnz	r0, d3a6 <bt_att_disconnected+0x7e>
	while (!sys_slist_is_empty(&att->reqs)) {
    d384:	9803      	ldr	r0, [sp, #12]
	return list->head;
    d386:	6845      	ldr	r5, [r0, #4]
    d388:	b985      	cbnz	r5, d3ac <bt_att_disconnected+0x84>
	att->conn = NULL;
    d38a:	6005      	str	r5, [r0, #0]
	k_mem_slab_free(&att_slab, (void **)&att);
    d38c:	a903      	add	r1, sp, #12
    d38e:	4812      	ldr	r0, [pc, #72]	; (d3d8 <bt_att_disconnected+0xb0>)
    d390:	f020 fbac 	bl	2daec <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    d394:	6820      	ldr	r0, [r4, #0]
}
    d396:	b005      	add	sp, #20
    d398:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    d39c:	f001 bba0 	b.w	eae0 <bt_gatt_disconnected>
		net_buf_unref(buf);
    d3a0:	f013 fb46 	bl	20a30 <net_buf_unref>
    d3a4:	e7d1      	b.n	d34a <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    d3a6:	f013 fb43 	bl	20a30 <net_buf_unref>
    d3aa:	e7e4      	b.n	d376 <bt_att_disconnected+0x4e>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d3ac:	6882      	ldr	r2, [r0, #8]
		if (req->func) {
    d3ae:	686e      	ldr	r6, [r5, #4]
	return node->next;
    d3b0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    d3b2:	6043      	str	r3, [r0, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    d3b4:	4295      	cmp	r5, r2
	list->tail = node;
    d3b6:	bf08      	it	eq
    d3b8:	6083      	streq	r3, [r0, #8]
    d3ba:	b136      	cbz	r6, d3ca <bt_att_disconnected+0xa2>
			req->func(att->conn, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d3bc:	69ab      	ldr	r3, [r5, #24]
    d3be:	9300      	str	r3, [sp, #0]
    d3c0:	2300      	movs	r3, #0
    d3c2:	6800      	ldr	r0, [r0, #0]
    d3c4:	461a      	mov	r2, r3
    d3c6:	210e      	movs	r1, #14
    d3c8:	47b0      	blx	r6
		bt_att_req_free(req);
    d3ca:	4628      	mov	r0, r5
    d3cc:	f7ff ff22 	bl	d214 <bt_att_req_free>
    d3d0:	e7d8      	b.n	d384 <bt_att_disconnected+0x5c>
}
    d3d2:	b005      	add	sp, #20
    d3d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d3d6:	bf00      	nop
    d3d8:	20000c20 	.word	0x20000c20

0000d3dc <att_timeout>:
{
    d3dc:	b510      	push	{r4, lr}
    d3de:	b088      	sub	sp, #32
	BT_ERR("ATT Timeout");
    d3e0:	4b09      	ldr	r3, [pc, #36]	; (d408 <att_timeout+0x2c>)
    d3e2:	9306      	str	r3, [sp, #24]
{
    d3e4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d3e6:	2302      	movs	r3, #2
    d3e8:	4808      	ldr	r0, [pc, #32]	; (d40c <att_timeout+0x30>)
    d3ea:	9301      	str	r3, [sp, #4]
    d3ec:	aa05      	add	r2, sp, #20
    d3ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d3f2:	9305      	str	r3, [sp, #20]
    d3f4:	f01d fd92 	bl	2af1c <z_log_msg2_static_create.constprop.0>
	bt_att_disconnected(&chan->chan.chan);
    d3f8:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    d3fc:	b008      	add	sp, #32
    d3fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    d402:	f7ff bf91 	b.w	d328 <bt_att_disconnected>
    d406:	bf00      	nop
    d408:	00032e73 	.word	0x00032e73
    d40c:	0002f3dc 	.word	0x0002f3dc

0000d410 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
    d410:	b510      	push	{r4, lr}
    d412:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
    d414:	b330      	cbz	r0, d464 <bt_att_req_cancel+0x54>
    d416:	b329      	cbz	r1, d464 <bt_att_req_cancel+0x54>
		return;
	}

	att = att_get(conn);
    d418:	f7ff f8aa 	bl	c570 <att_get>
	if (!att) {
    d41c:	b310      	cbz	r0, d464 <bt_att_req_cancel+0x54>
	return list->head;
    d41e:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d420:	b153      	cbz	r3, d438 <bt_att_req_cancel+0x28>
    d422:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
	return node->next;
    d426:	681b      	ldr	r3, [r3, #0]
    d428:	b10b      	cbz	r3, d42e <bt_att_req_cancel+0x1e>
    d42a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
	if (chan->req != req) {
    d42e:	f8d1 20f4 	ldr.w	r2, [r1, #244]	; 0xf4
    d432:	4294      	cmp	r4, r2
    d434:	d006      	beq.n	d444 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d436:	b96b      	cbnz	r3, d454 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
    d438:	3004      	adds	r0, #4
    d43a:	4621      	mov	r1, r4
    d43c:	f01d fe40 	bl	2b0c0 <sys_slist_find_and_remove.isra.0>

	bt_att_req_free(req);
    d440:	4620      	mov	r0, r4
    d442:	e003      	b.n	d44c <bt_att_req_cancel+0x3c>
	chan->req = &cancel;
    d444:	4b08      	ldr	r3, [pc, #32]	; (d468 <bt_att_req_cancel+0x58>)
    d446:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
	bt_att_req_free(req);
    d44a:	4620      	mov	r0, r4
}
    d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
    d450:	f7ff bee0 	b.w	d214 <bt_att_req_free>
    d454:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d458:	b10a      	cbz	r2, d45e <bt_att_req_cancel+0x4e>
    d45a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
    d45e:	4619      	mov	r1, r3
    d460:	4613      	mov	r3, r2
    d462:	e7e4      	b.n	d42e <bt_att_req_cancel+0x1e>
}
    d464:	bd10      	pop	{r4, pc}
    d466:	bf00      	nop
    d468:	20002308 	.word	0x20002308

0000d46c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    d46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d46e:	4c15      	ldr	r4, [pc, #84]	; (d4c4 <find_cf_cfg+0x58>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
    d470:	4605      	mov	r5, r0
    d472:	b140      	cbz	r0, d486 <find_cf_cfg+0x1a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
				return cfg;
			}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d474:	4622      	mov	r2, r4
    d476:	f812 1b01 	ldrb.w	r1, [r2], #1
    d47a:	f01d fa8e 	bl	2a99a <bt_conn_is_peer_addr_le>
    d47e:	b1b0      	cbz	r0, d4ae <find_cf_cfg+0x42>
			return cfg;
		}
	}

	return NULL;
}
    d480:	4620      	mov	r0, r4
    d482:	b003      	add	sp, #12
    d484:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d486:	9000      	str	r0, [sp, #0]
    d488:	4669      	mov	r1, sp
    d48a:	f8cd 0003 	str.w	r0, [sp, #3]
    d48e:	1c60      	adds	r0, r4, #1
    d490:	f01e f8ca 	bl	2b628 <bt_addr_le_cmp>
    d494:	2800      	cmp	r0, #0
    d496:	d0f3      	beq.n	d480 <find_cf_cfg+0x14>
    d498:	4669      	mov	r1, sp
    d49a:	f104 0011 	add.w	r0, r4, #17
    d49e:	9500      	str	r5, [sp, #0]
    d4a0:	f8cd 5003 	str.w	r5, [sp, #3]
    d4a4:	f01e f8c0 	bl	2b628 <bt_addr_le_cmp>
    d4a8:	b948      	cbnz	r0, d4be <find_cf_cfg+0x52>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d4aa:	3410      	adds	r4, #16
    d4ac:	e7e8      	b.n	d480 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d4ae:	7c21      	ldrb	r1, [r4, #16]
    d4b0:	f104 0211 	add.w	r2, r4, #17
    d4b4:	4628      	mov	r0, r5
    d4b6:	f01d fa70 	bl	2a99a <bt_conn_is_peer_addr_le>
    d4ba:	2800      	cmp	r0, #0
    d4bc:	d1f5      	bne.n	d4aa <find_cf_cfg+0x3e>
	return NULL;
    d4be:	2400      	movs	r4, #0
    d4c0:	e7de      	b.n	d480 <find_cf_cfg+0x14>
    d4c2:	bf00      	nop
    d4c4:	2000232c 	.word	0x2000232c

0000d4c8 <find_sc_cfg>:
{
    d4c8:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    d4ca:	4c0d      	ldr	r4, [pc, #52]	; (d500 <find_sc_cfg+0x38>)
    d4cc:	7823      	ldrb	r3, [r4, #0]
    d4ce:	4283      	cmp	r3, r0
{
    d4d0:	4605      	mov	r5, r0
    d4d2:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    d4d4:	d009      	beq.n	d4ea <find_sc_cfg+0x22>
    d4d6:	7b23      	ldrb	r3, [r4, #12]
    d4d8:	42ab      	cmp	r3, r5
    d4da:	d10f      	bne.n	d4fc <find_sc_cfg+0x34>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    d4dc:	4809      	ldr	r0, [pc, #36]	; (d504 <find_sc_cfg+0x3c>)
    d4de:	4631      	mov	r1, r6
    d4e0:	f01e f8a2 	bl	2b628 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    d4e4:	b950      	cbnz	r0, d4fc <find_sc_cfg+0x34>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d4e6:	2001      	movs	r0, #1
    d4e8:	e004      	b.n	d4f4 <find_sc_cfg+0x2c>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
    d4ea:	1c60      	adds	r0, r4, #1
    d4ec:	f01e f89c 	bl	2b628 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
    d4f0:	2800      	cmp	r0, #0
    d4f2:	d1f0      	bne.n	d4d6 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    d4f4:	230c      	movs	r3, #12
    d4f6:	fb03 4000 	mla	r0, r3, r0, r4
    d4fa:	e000      	b.n	d4fe <find_sc_cfg+0x36>
	return NULL;
    d4fc:	2000      	movs	r0, #0
}
    d4fe:	bd70      	pop	{r4, r5, r6, pc}
    d500:	2000395e 	.word	0x2000395e
    d504:	2000396b 	.word	0x2000396b

0000d508 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
    d508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    d50a:	4c15      	ldr	r4, [pc, #84]	; (d560 <gatt_sub_find+0x58>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
    d50c:	4605      	mov	r5, r0
    d50e:	b140      	cbz	r0, d522 <gatt_sub_find+0x1a>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
				return sub;
			}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d510:	4622      	mov	r2, r4
    d512:	f812 1b01 	ldrb.w	r1, [r2], #1
    d516:	f01d fa40 	bl	2a99a <bt_conn_is_peer_addr_le>
    d51a:	b1b0      	cbz	r0, d54a <gatt_sub_find+0x42>
			return sub;
		}
	}

	return NULL;
}
    d51c:	4620      	mov	r0, r4
    d51e:	b003      	add	sp, #12
    d520:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
    d522:	9000      	str	r0, [sp, #0]
    d524:	4669      	mov	r1, sp
    d526:	f8cd 0003 	str.w	r0, [sp, #3]
    d52a:	1c60      	adds	r0, r4, #1
    d52c:	f01e f87c 	bl	2b628 <bt_addr_le_cmp>
    d530:	2800      	cmp	r0, #0
    d532:	d0f3      	beq.n	d51c <gatt_sub_find+0x14>
    d534:	4669      	mov	r1, sp
    d536:	f104 0011 	add.w	r0, r4, #17
    d53a:	9500      	str	r5, [sp, #0]
    d53c:	f8cd 5003 	str.w	r5, [sp, #3]
    d540:	f01e f872 	bl	2b628 <bt_addr_le_cmp>
    d544:	b948      	cbnz	r0, d55a <gatt_sub_find+0x52>
		struct gatt_sub *sub = &subscriptions[i];
    d546:	3410      	adds	r4, #16
    d548:	e7e8      	b.n	d51c <gatt_sub_find+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
    d54a:	7c21      	ldrb	r1, [r4, #16]
    d54c:	f104 0211 	add.w	r2, r4, #17
    d550:	4628      	mov	r0, r5
    d552:	f01d fa22 	bl	2a99a <bt_conn_is_peer_addr_le>
    d556:	2800      	cmp	r0, #0
    d558:	d1f5      	bne.n	d546 <gatt_sub_find+0x3e>
	return NULL;
    d55a:	2400      	movs	r4, #0
    d55c:	e7de      	b.n	d51c <gatt_sub_find+0x14>
    d55e:	bf00      	nop
    d560:	2000236c 	.word	0x2000236c

0000d564 <gatt_write_ccc>:
	return 0;
}

static int gatt_write_ccc(struct bt_conn *conn,
			  struct bt_gatt_subscribe_params *params)
{
    d564:	b507      	push	{r0, r1, r2, lr}
	size_t len = sizeof(struct bt_att_write_req) + sizeof(uint16_t);

	BT_DBG("handle 0x%04x value 0x%04x", params->ccc_handle, params->value);

	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    d566:	2312      	movs	r3, #18
{
    d568:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
    d56a:	2104      	movs	r1, #4
    d56c:	e9cd 3100 	strd	r3, r1, [sp]
    d570:	4b03      	ldr	r3, [pc, #12]	; (d580 <gatt_write_ccc+0x1c>)
    d572:	4904      	ldr	r1, [pc, #16]	; (d584 <gatt_write_ccc+0x20>)
    d574:	f01e f887 	bl	2b686 <gatt_req_send>
			     gatt_write_ccc_buf, BT_ATT_OP_WRITE_REQ, len);
}
    d578:	b003      	add	sp, #12
    d57a:	f85d fb04 	ldr.w	pc, [sp], #4
    d57e:	bf00      	nop
    d580:	0002baed 	.word	0x0002baed
    d584:	0002bb17 	.word	0x0002bb17

0000d588 <bt_gatt_attr_write_ccc>:
{
    d588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d58c:	b089      	sub	sp, #36	; 0x24
    d58e:	461f      	mov	r7, r3
    d590:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d594:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d598:	4606      	mov	r6, r0
    d59a:	4688      	mov	r8, r1
	if (offset) {
    d59c:	2b00      	cmp	r3, #0
    d59e:	d14f      	bne.n	d640 <bt_gatt_attr_write_ccc+0xb8>
	if (!len || len > sizeof(uint16_t)) {
    d5a0:	1e7b      	subs	r3, r7, #1
    d5a2:	2b01      	cmp	r3, #1
    d5a4:	d84f      	bhi.n	d646 <bt_gatt_attr_write_ccc+0xbe>
		value = *(uint8_t *)buf;
    d5a6:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    d5a8:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    d5aa:	4649      	mov	r1, r9
    d5ac:	bf14      	ite	ne
    d5ae:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    d5b0:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    d5b2:	f01e f83c 	bl	2b62e <find_ccc_cfg>
	if (!cfg) {
    d5b6:	4604      	mov	r4, r0
    d5b8:	b9f0      	cbnz	r0, d5f8 <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    d5ba:	b91d      	cbnz	r5, d5c4 <bt_gatt_attr_write_ccc+0x3c>
			return len;
    d5bc:	4638      	mov	r0, r7
}
    d5be:	b009      	add	sp, #36	; 0x24
    d5c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d5c4:	4649      	mov	r1, r9
    d5c6:	f01e f832 	bl	2b62e <find_ccc_cfg>
		if (!cfg) {
    d5ca:	4604      	mov	r4, r0
    d5cc:	b968      	cbnz	r0, d5ea <bt_gatt_attr_write_ccc+0x62>
			BT_WARN("No space to store CCC cfg");
    d5ce:	4b1f      	ldr	r3, [pc, #124]	; (d64c <bt_gatt_attr_write_ccc+0xc4>)
    d5d0:	481f      	ldr	r0, [pc, #124]	; (d650 <bt_gatt_attr_write_ccc+0xc8>)
    d5d2:	9306      	str	r3, [sp, #24]
    d5d4:	aa05      	add	r2, sp, #20
    d5d6:	2302      	movs	r3, #2
    d5d8:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    d5dc:	9301      	str	r3, [sp, #4]
    d5de:	9305      	str	r3, [sp, #20]
    d5e0:	f01e f9fd 	bl	2b9de <z_log_msg2_static_create.constprop.0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d5e4:	f06f 0010 	mvn.w	r0, #16
    d5e8:	e7e9      	b.n	d5be <bt_gatt_attr_write_ccc+0x36>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d5ea:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d5ee:	3001      	adds	r0, #1
    d5f0:	f01e f91f 	bl	2b832 <bt_addr_le_copy>
		cfg->id = conn->id;
    d5f4:	7a33      	ldrb	r3, [r6, #8]
    d5f6:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    d5f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
    d5fc:	b9a3      	cbnz	r3, d628 <bt_gatt_attr_write_ccc+0xa0>
	if (cfg->value != ccc->value) {
    d5fe:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    d602:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    d604:	42ab      	cmp	r3, r5
    d606:	d003      	beq.n	d610 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    d608:	4649      	mov	r1, r9
    d60a:	4640      	mov	r0, r8
    d60c:	f01d ff89 	bl	2b522 <gatt_ccc_changed>
	if (!value) {
    d610:	2d00      	cmp	r5, #0
    d612:	d1d3      	bne.n	d5bc <bt_gatt_attr_write_ccc+0x34>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d614:	a902      	add	r1, sp, #8
    d616:	1c60      	adds	r0, r4, #1
    d618:	9502      	str	r5, [sp, #8]
    d61a:	f8cd 500b 	str.w	r5, [sp, #11]
    d61e:	f01e f908 	bl	2b832 <bt_addr_le_copy>
	cfg->id = 0U;
    d622:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    d624:	8125      	strh	r5, [r4, #8]
}
    d626:	e7c9      	b.n	d5bc <bt_gatt_attr_write_ccc+0x34>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d628:	462a      	mov	r2, r5
    d62a:	4641      	mov	r1, r8
    d62c:	4630      	mov	r0, r6
    d62e:	4798      	blx	r3
		if (write < 0) {
    d630:	2800      	cmp	r0, #0
    d632:	dbc4      	blt.n	d5be <bt_gatt_attr_write_ccc+0x36>
		if (write != sizeof(value) && write != 1) {
    d634:	3801      	subs	r0, #1
    d636:	2801      	cmp	r0, #1
    d638:	d9e1      	bls.n	d5fe <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d63a:	f06f 000d 	mvn.w	r0, #13
    d63e:	e7be      	b.n	d5be <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d640:	f06f 0006 	mvn.w	r0, #6
    d644:	e7bb      	b.n	d5be <bt_gatt_attr_write_ccc+0x36>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d646:	f06f 000c 	mvn.w	r0, #12
    d64a:	e7b8      	b.n	d5be <bt_gatt_attr_write_ccc+0x36>
    d64c:	00032e86 	.word	0x00032e86
    d650:	0002f4cc 	.word	0x0002f4cc

0000d654 <sc_save>:
{
    d654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d658:	b08a      	sub	sp, #40	; 0x28
    d65a:	4680      	mov	r8, r0
    d65c:	460f      	mov	r7, r1
    d65e:	4616      	mov	r6, r2
    d660:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d662:	f7ff ff31 	bl	d4c8 <find_sc_cfg>
	if (!cfg) {
    d666:	4604      	mov	r4, r0
    d668:	b9d0      	cbnz	r0, d6a0 <sc_save+0x4c>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d66a:	a902      	add	r1, sp, #8
    d66c:	9002      	str	r0, [sp, #8]
    d66e:	f8cd 000b 	str.w	r0, [sp, #11]
    d672:	f7ff ff29 	bl	d4c8 <find_sc_cfg>
		if (!cfg) {
    d676:	4604      	mov	r4, r0
    d678:	b968      	cbnz	r0, d696 <sc_save+0x42>
			BT_ERR("unable to save SC: no cfg left");
    d67a:	4b10      	ldr	r3, [pc, #64]	; (d6bc <sc_save+0x68>)
    d67c:	9308      	str	r3, [sp, #32]
    d67e:	4810      	ldr	r0, [pc, #64]	; (d6c0 <sc_save+0x6c>)
    d680:	2302      	movs	r3, #2
    d682:	aa07      	add	r2, sp, #28
    d684:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    d688:	9301      	str	r3, [sp, #4]
    d68a:	9307      	str	r3, [sp, #28]
    d68c:	f01e f9a7 	bl	2b9de <z_log_msg2_static_create.constprop.0>
}
    d690:	b00a      	add	sp, #40	; 0x28
    d692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    d696:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d69a:	4639      	mov	r1, r7
    d69c:	f01e f8c9 	bl	2b832 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d6a0:	8922      	ldrh	r2, [r4, #8]
    d6a2:	8963      	ldrh	r3, [r4, #10]
    d6a4:	b91a      	cbnz	r2, d6ae <sc_save+0x5a>
    d6a6:	b923      	cbnz	r3, d6b2 <sc_save+0x5e>
		cfg->data.start = start;
    d6a8:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d6aa:	8165      	strh	r5, [r4, #10]
    d6ac:	e7f0      	b.n	d690 <sc_save+0x3c>
	if (new_start >= *start && new_end <= *end) {
    d6ae:	4296      	cmp	r6, r2
    d6b0:	d302      	bcc.n	d6b8 <sc_save+0x64>
    d6b2:	429d      	cmp	r5, r3
    d6b4:	d9ec      	bls.n	d690 <sc_save+0x3c>
    d6b6:	e7f8      	b.n	d6aa <sc_save+0x56>
		*start = new_start;
    d6b8:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    d6ba:	e7fa      	b.n	d6b2 <sc_save+0x5e>
    d6bc:	00032ea0 	.word	0x00032ea0
    d6c0:	0002f4cc 	.word	0x0002f4cc

0000d6c4 <cf_write>:
{
    d6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6c8:	b088      	sub	sp, #32
    d6ca:	4698      	mov	r8, r3
    d6cc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
	if (offset > sizeof(cfg->data)) {
    d6d0:	2b01      	cmp	r3, #1
{
    d6d2:	4606      	mov	r6, r0
    d6d4:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    d6d6:	d83f      	bhi.n	d758 <cf_write+0x94>
	if (offset + len > sizeof(cfg->data)) {
    d6d8:	4443      	add	r3, r8
    d6da:	2b01      	cmp	r3, #1
    d6dc:	4645      	mov	r5, r8
    d6de:	dc3e      	bgt.n	d75e <cf_write+0x9a>
	cfg = find_cf_cfg(conn);
    d6e0:	f7ff fec4 	bl	d46c <find_cf_cfg>
	if (!cfg) {
    d6e4:	4604      	mov	r4, r0
    d6e6:	b918      	cbnz	r0, d6f0 <cf_write+0x2c>
		cfg = find_cf_cfg(NULL);
    d6e8:	f7ff fec0 	bl	d46c <find_cf_cfg>
	if (!cfg) {
    d6ec:	4604      	mov	r4, r0
    d6ee:	b180      	cbz	r0, d712 <cf_write+0x4e>
{
    d6f0:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    d6f2:	f1b8 0f00 	cmp.w	r8, #0
    d6f6:	d11d      	bne.n	d734 <cf_write+0x70>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d6f8:	f106 0188 	add.w	r1, r6, #136	; 0x88
    d6fc:	1c60      	adds	r0, r4, #1
    d6fe:	f01e f898 	bl	2b832 <bt_addr_le_copy>
	cfg->id = conn->id;
    d702:	4620      	mov	r0, r4
    d704:	7a33      	ldrb	r3, [r6, #8]
    d706:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d70a:	2100      	movs	r1, #0
    d70c:	f01e f9ca 	bl	2baa4 <atomic_set_bit>
	return len;
    d710:	e00c      	b.n	d72c <cf_write+0x68>
		BT_WARN("No space to store Client Supported Features");
    d712:	4b16      	ldr	r3, [pc, #88]	; (d76c <cf_write+0xa8>)
    d714:	9306      	str	r3, [sp, #24]
    d716:	4816      	ldr	r0, [pc, #88]	; (d770 <cf_write+0xac>)
    d718:	2302      	movs	r3, #2
    d71a:	aa05      	add	r2, sp, #20
    d71c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d720:	f06f 0510 	mvn.w	r5, #16
		BT_WARN("No space to store Client Supported Features");
    d724:	9301      	str	r3, [sp, #4]
    d726:	9305      	str	r3, [sp, #20]
    d728:	f01e f959 	bl	2b9de <z_log_msg2_static_create.constprop.0>
}
    d72c:	4628      	mov	r0, r5
    d72e:	b008      	add	sp, #32
    d730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    d734:	7a20      	ldrb	r0, [r4, #8]
    d736:	fa20 f301 	lsr.w	r3, r0, r1
    d73a:	07da      	lsls	r2, r3, #31
    d73c:	d503      	bpl.n	d746 <cf_write+0x82>
		    !(value[i / 8] & BIT(i % 8))) {
    d73e:	783b      	ldrb	r3, [r7, #0]
    d740:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    d742:	07db      	lsls	r3, r3, #31
    d744:	d50e      	bpl.n	d764 <cf_write+0xa0>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    d746:	3101      	adds	r1, #1
    d748:	2903      	cmp	r1, #3
    d74a:	d1d2      	bne.n	d6f2 <cf_write+0x2e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    d74c:	783b      	ldrb	r3, [r7, #0]
    d74e:	f003 0307 	and.w	r3, r3, #7
    d752:	4318      	orrs	r0, r3
    d754:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    d756:	e7cf      	b.n	d6f8 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d758:	f06f 0506 	mvn.w	r5, #6
    d75c:	e7e6      	b.n	d72c <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d75e:	f06f 050c 	mvn.w	r5, #12
    d762:	e7e3      	b.n	d72c <cf_write+0x68>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d764:	f06f 0512 	mvn.w	r5, #18
    d768:	e7e0      	b.n	d72c <cf_write+0x68>
    d76a:	bf00      	nop
    d76c:	00032ebf 	.word	0x00032ebf
    d770:	0002f4cc 	.word	0x0002f4cc

0000d774 <sc_indicate_rsp>:
{
    d774:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d776:	4913      	ldr	r1, [pc, #76]	; (d7c4 <sc_indicate_rsp+0x50>)
    d778:	f3bf 8f5b 	dmb	ish
    d77c:	4604      	mov	r4, r0
    d77e:	e851 3f00 	ldrex	r3, [r1]
    d782:	f023 0302 	bic.w	r3, r3, #2
    d786:	e841 3200 	strex	r2, r3, [r1]
    d78a:	2a00      	cmp	r2, #0
    d78c:	d1f7      	bne.n	d77e <sc_indicate_rsp+0xa>
    d78e:	f3bf 8f5b 	dmb	ish
    d792:	4608      	mov	r0, r1
    d794:	f01d feed 	bl	2b572 <atomic_get>
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d798:	07c2      	lsls	r2, r0, #31
    d79a:	d505      	bpl.n	d7a8 <sc_indicate_rsp+0x34>
	k_work_reschedule(&gatt_sc.work, timeout);
    d79c:	2200      	movs	r2, #0
    d79e:	2300      	movs	r3, #0
    d7a0:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
    d7a4:	f017 fc94 	bl	250d0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    d7a8:	4620      	mov	r0, r4
    d7aa:	f7ff fe5f 	bl	d46c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    d7ae:	b140      	cbz	r0, d7c2 <sc_indicate_rsp+0x4e>
    d7b0:	7a03      	ldrb	r3, [r0, #8]
    d7b2:	07db      	lsls	r3, r3, #31
    d7b4:	d505      	bpl.n	d7c2 <sc_indicate_rsp+0x4e>
}
    d7b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    d7ba:	2100      	movs	r1, #0
    d7bc:	300c      	adds	r0, #12
    d7be:	f01e b971 	b.w	2baa4 <atomic_set_bit>
}
    d7c2:	bd10      	pop	{r4, pc}
    d7c4:	20001988 	.word	0x20001988

0000d7c8 <disconnected_cb>:
{
    d7c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7cc:	4b2a      	ldr	r3, [pc, #168]	; (d878 <disconnected_cb+0xb0>)
{
    d7ce:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7d0:	6882      	ldr	r2, [r0, #8]
    d7d2:	429a      	cmp	r2, r3
{
    d7d4:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7d6:	d12f      	bne.n	d838 <disconnected_cb+0x70>
	ccc = attr->user_data;
    d7d8:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    d7da:	8aab      	ldrh	r3, [r5, #20]
    d7dc:	b363      	cbz	r3, d838 <disconnected_cb+0x70>
				if (ccc == &sc_ccc) {
    d7de:	f8df b09c 	ldr.w	fp, [pc, #156]	; d87c <disconnected_cb+0xb4>
    d7e2:	1c6c      	adds	r4, r5, #1
    d7e4:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    d7e8:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d7ec:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    d7f0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d7f4:	b19b      	cbz	r3, d81e <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d7f6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    d7fa:	4622      	mov	r2, r4
    d7fc:	4630      	mov	r0, r6
    d7fe:	f01d f8cc 	bl	2a99a <bt_conn_is_peer_addr_le>
    d802:	b9e8      	cbnz	r0, d840 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d804:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    d808:	4621      	mov	r1, r4
    d80a:	f7fe f9a9 	bl	bb60 <bt_conn_lookup_addr_le>
			if (tmp) {
    d80e:	b130      	cbz	r0, d81e <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    d810:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    d812:	2b07      	cmp	r3, #7
    d814:	bf08      	it	eq
    d816:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    d81a:	f01d f816 	bl	2a84a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    d81e:	340a      	adds	r4, #10
    d820:	4554      	cmp	r4, sl
    d822:	d1e5      	bne.n	d7f0 <disconnected_cb+0x28>
	if (!value_used) {
    d824:	f1b8 0f00 	cmp.w	r8, #0
    d828:	d106      	bne.n	d838 <disconnected_cb+0x70>
		if (ccc->cfg_changed) {
    d82a:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    d82c:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    d830:	b113      	cbz	r3, d838 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    d832:	4641      	mov	r1, r8
    d834:	4638      	mov	r0, r7
    d836:	4798      	blx	r3
}
    d838:	2001      	movs	r0, #1
    d83a:	b003      	add	sp, #12
    d83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d840:	7a30      	ldrb	r0, [r6, #8]
    d842:	4649      	mov	r1, r9
    d844:	f01c fd2e 	bl	2a2a4 <bt_addr_le_is_bonded>
    d848:	b988      	cbnz	r0, d86e <disconnected_cb+0xa6>
				if (ccc == &sc_ccc) {
    d84a:	455d      	cmp	r5, fp
    d84c:	d102      	bne.n	d854 <disconnected_cb+0x8c>
					sc_clear(conn);
    d84e:	4630      	mov	r0, r6
    d850:	f01e f8c8 	bl	2b9e4 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    d854:	2200      	movs	r2, #0
    d856:	4669      	mov	r1, sp
    d858:	4620      	mov	r0, r4
    d85a:	9200      	str	r2, [sp, #0]
    d85c:	f8cd 2003 	str.w	r2, [sp, #3]
    d860:	f01d ffe7 	bl	2b832 <bt_addr_le_copy>
	cfg->id = 0U;
    d864:	f804 2c01 	strb.w	r2, [r4, #-1]
	cfg->value = 0U;
    d868:	f8a4 2007 	strh.w	r2, [r4, #7]
}
    d86c:	e7d7      	b.n	d81e <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d86e:	4649      	mov	r1, r9
    d870:	4620      	mov	r0, r4
    d872:	f01d ffde 	bl	2b832 <bt_addr_le_copy>
    d876:	e7d2      	b.n	d81e <disconnected_cb+0x56>
    d878:	0000d589 	.word	0x0000d589
    d87c:	20000264 	.word	0x20000264

0000d880 <bt_gatt_init>:
{
    d880:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d882:	4b20      	ldr	r3, [pc, #128]	; (d904 <bt_gatt_init+0x84>)
    d884:	f3bf 8f5b 	dmb	ish
    d888:	2201      	movs	r2, #1
    d88a:	e853 1f00 	ldrex	r1, [r3]
    d88e:	2900      	cmp	r1, #0
    d890:	d103      	bne.n	d89a <bt_gatt_init+0x1a>
    d892:	e843 2000 	strex	r0, r2, [r3]
    d896:	2800      	cmp	r0, #0
    d898:	d1f7      	bne.n	d88a <bt_gatt_init+0xa>
    d89a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    d89e:	d130      	bne.n	d902 <bt_gatt_init+0x82>
    d8a0:	f3bf 8f5b 	dmb	ish
    d8a4:	4b18      	ldr	r3, [pc, #96]	; (d908 <bt_gatt_init+0x88>)
    d8a6:	e853 1f00 	ldrex	r1, [r3]
    d8aa:	2900      	cmp	r1, #0
    d8ac:	d103      	bne.n	d8b6 <bt_gatt_init+0x36>
    d8ae:	e843 2000 	strex	r0, r2, [r3]
    d8b2:	2800      	cmp	r0, #0
    d8b4:	d1f7      	bne.n	d8a6 <bt_gatt_init+0x26>
    d8b6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    d8ba:	d108      	bne.n	d8ce <bt_gatt_init+0x4e>
    d8bc:	4913      	ldr	r1, [pc, #76]	; (d90c <bt_gatt_init+0x8c>)
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d8be:	4a14      	ldr	r2, [pc, #80]	; (d910 <bt_gatt_init+0x90>)
    d8c0:	880b      	ldrh	r3, [r1, #0]
    d8c2:	4c14      	ldr	r4, [pc, #80]	; (d914 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    d8c4:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d8c6:	42a2      	cmp	r2, r4
    d8c8:	d315      	bcc.n	d8f6 <bt_gatt_init+0x76>
    d8ca:	b100      	cbz	r0, d8ce <bt_gatt_init+0x4e>
    d8cc:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    d8ce:	4b12      	ldr	r3, [pc, #72]	; (d918 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    d8d0:	4912      	ldr	r1, [pc, #72]	; (d91c <bt_gatt_init+0x9c>)
    d8d2:	4813      	ldr	r0, [pc, #76]	; (d920 <bt_gatt_init+0xa0>)
    d8d4:	2200      	movs	r2, #0
	list->tail = NULL;
    d8d6:	e9c3 2200 	strd	r2, r2, [r3]
    d8da:	f020 fae6 	bl	2deaa <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    d8de:	4810      	ldr	r0, [pc, #64]	; (d920 <bt_gatt_init+0xa0>)
    d8e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d8e4:	2300      	movs	r3, #0
    d8e6:	f017 fbbf 	bl	25068 <k_work_schedule>
}
    d8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    d8ee:	490d      	ldr	r1, [pc, #52]	; (d924 <bt_gatt_init+0xa4>)
    d8f0:	480d      	ldr	r0, [pc, #52]	; (d928 <bt_gatt_init+0xa8>)
    d8f2:	f020 bada 	b.w	2deaa <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    d8f6:	6850      	ldr	r0, [r2, #4]
    d8f8:	4403      	add	r3, r0
    d8fa:	b29b      	uxth	r3, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    d8fc:	3208      	adds	r2, #8
    d8fe:	2001      	movs	r0, #1
    d900:	e7e1      	b.n	d8c6 <bt_gatt_init+0x46>
}
    d902:	bd10      	pop	{r4, pc}
    d904:	2000234c 	.word	0x2000234c
    d908:	20002368 	.word	0x20002368
    d90c:	2000395c 	.word	0x2000395c
    d910:	0002f3a4 	.word	0x0002f3a4
    d914:	0002f3bc 	.word	0x0002f3bc
    d918:	20002324 	.word	0x20002324
    d91c:	0002bc5f 	.word	0x0002bc5f
    d920:	200018e0 	.word	0x200018e0
    d924:	0000dca5 	.word	0x0000dca5
    d928:	20001958 	.word	0x20001958

0000d92c <bt_gatt_attr_get_handle>:
{
    d92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    d930:	4603      	mov	r3, r0
    d932:	b148      	cbz	r0, d948 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    d934:	8a00      	ldrh	r0, [r0, #16]
    d936:	b938      	cbnz	r0, d948 <bt_gatt_attr_get_handle+0x1c>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d938:	4912      	ldr	r1, [pc, #72]	; (d984 <bt_gatt_attr_get_handle+0x58>)
    d93a:	f8df e04c 	ldr.w	lr, [pc, #76]	; d988 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    d93e:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d940:	f04f 0c14 	mov.w	ip, #20
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d944:	4571      	cmp	r1, lr
    d946:	d301      	bcc.n	d94c <bt_gatt_attr_get_handle+0x20>
}
    d948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d94c:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    d950:	42bb      	cmp	r3, r7
    d952:	d304      	bcc.n	d95e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    d954:	fb0c 7206 	mla	r2, ip, r6, r7
    d958:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    d95a:	4293      	cmp	r3, r2
    d95c:	d90e      	bls.n	d97c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    d95e:	19a2      	adds	r2, r4, r6
    d960:	b292      	uxth	r2, r2
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d962:	3108      	adds	r1, #8
    d964:	4614      	mov	r4, r2
    d966:	e7ed      	b.n	d944 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    d968:	fb0c 7805 	mla	r8, ip, r5, r7
    d96c:	4543      	cmp	r3, r8
    d96e:	d007      	beq.n	d980 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    d970:	3501      	adds	r5, #1
    d972:	1962      	adds	r2, r4, r5
    d974:	42b5      	cmp	r5, r6
    d976:	b292      	uxth	r2, r2
    d978:	d1f6      	bne.n	d968 <bt_gatt_attr_get_handle+0x3c>
    d97a:	e7f2      	b.n	d962 <bt_gatt_attr_get_handle+0x36>
    d97c:	2500      	movs	r5, #0
    d97e:	e7f8      	b.n	d972 <bt_gatt_attr_get_handle+0x46>
    d980:	4610      	mov	r0, r2
    d982:	e7e1      	b.n	d948 <bt_gatt_attr_get_handle+0x1c>
    d984:	0002f3a4 	.word	0x0002f3a4
    d988:	0002f3bc 	.word	0x0002f3bc

0000d98c <bt_gatt_foreach_attr_type>:
{
    d98c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d990:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    d994:	9100      	str	r1, [sp, #0]
    d996:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    d998:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d99c:	2d00      	cmp	r5, #0
    d99e:	bf08      	it	eq
    d9a0:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    d9a2:	4b24      	ldr	r3, [pc, #144]	; (da34 <bt_gatt_foreach_attr_type+0xa8>)
    d9a4:	881b      	ldrh	r3, [r3, #0]
    d9a6:	4283      	cmp	r3, r0
{
    d9a8:	4607      	mov	r7, r0
    d9aa:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    d9ac:	d23c      	bcs.n	da28 <bt_gatt_foreach_attr_type+0x9c>
}
    d9ae:	b003      	add	sp, #12
    d9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    d9b4:	6873      	ldr	r3, [r6, #4]
    d9b6:	4423      	add	r3, r4
    d9b8:	42bb      	cmp	r3, r7
    d9ba:	d232      	bcs.n	da22 <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    d9bc:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    d9be:	3608      	adds	r6, #8
    d9c0:	4b1d      	ldr	r3, [pc, #116]	; (da38 <bt_gatt_foreach_attr_type+0xac>)
    d9c2:	429e      	cmp	r6, r3
    d9c4:	d3f6      	bcc.n	d9b4 <bt_gatt_foreach_attr_type+0x28>
    d9c6:	e7f2      	b.n	d9ae <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d9c8:	5889      	ldr	r1, [r1, r2]
    d9ca:	9301      	str	r3, [sp, #4]
    d9cc:	4640      	mov	r0, r8
    d9ce:	f01c fadd 	bl	29f8c <bt_uuid_cmp>
    d9d2:	9b01      	ldr	r3, [sp, #4]
    d9d4:	b190      	cbz	r0, d9fc <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    d9d6:	3401      	adds	r4, #1
    d9d8:	f10a 0a01 	add.w	sl, sl, #1
    d9dc:	b2a4      	uxth	r4, r4
    d9de:	6873      	ldr	r3, [r6, #4]
    d9e0:	4553      	cmp	r3, sl
    d9e2:	d9ec      	bls.n	d9be <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    d9e4:	9b00      	ldr	r3, [sp, #0]
    d9e6:	429c      	cmp	r4, r3
    d9e8:	d8e1      	bhi.n	d9ae <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    d9ea:	42bc      	cmp	r4, r7
    d9ec:	d3f3      	bcc.n	d9d6 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    d9ee:	6831      	ldr	r1, [r6, #0]
    d9f0:	fb0b f20a 	mul.w	r2, fp, sl
    d9f4:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    d9f6:	f1b8 0f00 	cmp.w	r8, #0
    d9fa:	d1e5      	bne.n	d9c8 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    d9fc:	f1b9 0f00 	cmp.w	r9, #0
    da00:	d10b      	bne.n	da1a <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    da02:	3d01      	subs	r5, #1
    da04:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    da06:	4618      	mov	r0, r3
    da08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    da0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da0c:	4621      	mov	r1, r4
    da0e:	4798      	blx	r3
	if (!*num_matches) {
    da10:	2d00      	cmp	r5, #0
    da12:	d0cc      	beq.n	d9ae <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    da14:	2800      	cmp	r0, #0
    da16:	d1de      	bne.n	d9d6 <bt_gatt_foreach_attr_type+0x4a>
    da18:	e7c9      	b.n	d9ae <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    da1a:	68da      	ldr	r2, [r3, #12]
    da1c:	4591      	cmp	r9, r2
    da1e:	d1da      	bne.n	d9d6 <bt_gatt_foreach_attr_type+0x4a>
    da20:	e7ef      	b.n	da02 <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    da22:	f04f 0a00 	mov.w	sl, #0
    da26:	e7da      	b.n	d9de <bt_gatt_foreach_attr_type+0x52>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    da28:	4e04      	ldr	r6, [pc, #16]	; (da3c <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    da2a:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    da2c:	f04f 0b14 	mov.w	fp, #20
    da30:	e7c6      	b.n	d9c0 <bt_gatt_foreach_attr_type+0x34>
    da32:	bf00      	nop
    da34:	2000395c 	.word	0x2000395c
    da38:	0002f3bc 	.word	0x0002f3bc
    da3c:	0002f3a4 	.word	0x0002f3a4

0000da40 <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    da40:	b510      	push	{r4, lr}
    da42:	b0d0      	sub	sp, #320	; 0x140
	uint8_t key[16] = {};
    da44:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    da46:	aa24      	add	r2, sp, #144	; 0x90
    da48:	a902      	add	r1, sp, #8
    da4a:	a80c      	add	r0, sp, #48	; 0x30
	uint8_t key[16] = {};
    da4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
    da50:	e9cd 4404 	strd	r4, r4, [sp, #16]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    da54:	f01c f8df 	bl	29c16 <tc_cmac_setup>
    da58:	b960      	cbnz	r0, da74 <db_hash_gen.constprop.0+0x34>
		BT_ERR("Unable to setup AES CMAC");
    da5a:	4b1a      	ldr	r3, [pc, #104]	; (dac4 <db_hash_gen.constprop.0+0x84>)
		BT_ERR("Unable to calculate hash");
    da5c:	930a      	str	r3, [sp, #40]	; 0x28
    da5e:	481a      	ldr	r0, [pc, #104]	; (dac8 <db_hash_gen.constprop.0+0x88>)
    da60:	2302      	movs	r3, #2
    da62:	aa09      	add	r2, sp, #36	; 0x24
    da64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    da68:	9301      	str	r3, [sp, #4]
    da6a:	9309      	str	r3, [sp, #36]	; 0x24
    da6c:	f01d ffb7 	bl	2b9de <z_log_msg2_static_create.constprop.0>
}
    da70:	b050      	add	sp, #320	; 0x140
    da72:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    da74:	f64f 71ff 	movw	r1, #65535	; 0xffff
    da78:	2001      	movs	r0, #1
    da7a:	4a14      	ldr	r2, [pc, #80]	; (dacc <db_hash_gen.constprop.0+0x8c>)
    da7c:	ab0c      	add	r3, sp, #48	; 0x30
    da7e:	f01e f8e3 	bl	2bc48 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    da82:	4813      	ldr	r0, [pc, #76]	; (dad0 <db_hash_gen.constprop.0+0x90>)
    da84:	a90c      	add	r1, sp, #48	; 0x30
    da86:	f01c f95c 	bl	29d42 <tc_cmac_final>
    da8a:	b908      	cbnz	r0, da90 <db_hash_gen.constprop.0+0x50>
		BT_ERR("Unable to calculate hash");
    da8c:	4b11      	ldr	r3, [pc, #68]	; (dad4 <db_hash_gen.constprop.0+0x94>)
    da8e:	e7e5      	b.n	da5c <db_hash_gen.constprop.0+0x1c>
    da90:	4b0f      	ldr	r3, [pc, #60]	; (dad0 <db_hash_gen.constprop.0+0x90>)
    da92:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    da96:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    da98:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    da9a:	7810      	ldrb	r0, [r2, #0]
    da9c:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    daa0:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    daa2:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
    daa6:	d1f6      	bne.n	da96 <db_hash_gen.constprop.0+0x56>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    daa8:	f3bf 8f5b 	dmb	ish
    daac:	4b0a      	ldr	r3, [pc, #40]	; (dad8 <db_hash_gen.constprop.0+0x98>)
    daae:	e853 2f00 	ldrex	r2, [r3]
    dab2:	f042 0204 	orr.w	r2, r2, #4
    dab6:	e843 2100 	strex	r1, r2, [r3]
    daba:	2900      	cmp	r1, #0
    dabc:	d1f7      	bne.n	daae <db_hash_gen.constprop.0+0x6e>
    dabe:	f3bf 8f5b 	dmb	ish
    dac2:	e7d5      	b.n	da70 <db_hash_gen.constprop.0+0x30>
    dac4:	00032eeb 	.word	0x00032eeb
    dac8:	0002f4cc 	.word	0x0002f4cc
    dacc:	0002b57f 	.word	0x0002b57f
    dad0:	200018d0 	.word	0x200018d0
    dad4:	00032f04 	.word	0x00032f04
    dad8:	20001988 	.word	0x20001988

0000dadc <gatt_indicate>:
{
    dadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dae0:	4615      	mov	r5, r2
    dae2:	b088      	sub	sp, #32
    dae4:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    dae6:	2214      	movs	r2, #20
    dae8:	6869      	ldr	r1, [r5, #4]
{
    daea:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    daec:	f01e f8b9 	bl	2bc62 <bt_gatt_check_perm>
    daf0:	4607      	mov	r7, r0
    daf2:	b180      	cbz	r0, db16 <gatt_indicate+0x3a>
		BT_WARN("Link is not encrypted");
    daf4:	4b2b      	ldr	r3, [pc, #172]	; (dba4 <gatt_indicate+0xc8>)
    daf6:	9306      	str	r3, [sp, #24]
    daf8:	482b      	ldr	r0, [pc, #172]	; (dba8 <gatt_indicate+0xcc>)
    dafa:	2302      	movs	r3, #2
    dafc:	aa05      	add	r2, sp, #20
    dafe:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		return -EPERM;
    db02:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
		BT_WARN("Link is not encrypted");
    db06:	9301      	str	r3, [sp, #4]
    db08:	9305      	str	r3, [sp, #20]
    db0a:	f01d ff68 	bl	2b9de <z_log_msg2_static_create.constprop.0>
}
    db0e:	4628      	mov	r0, r5
    db10:	b008      	add	sp, #32
    db12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    db16:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    db1a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    db1c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    db1e:	f7ff fb57 	bl	d1d0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    db22:	3602      	adds	r6, #2
	if (!req) {
    db24:	4604      	mov	r4, r0
    db26:	b910      	cbnz	r0, db2e <gatt_indicate+0x52>
		return -ENOMEM;
    db28:	f06f 050b 	mvn.w	r5, #11
    db2c:	e7ef      	b.n	db0e <gatt_indicate+0x32>
	req->func = func;
    db2e:	4b1f      	ldr	r3, [pc, #124]	; (dbac <gatt_indicate+0xd0>)
	req->len = len;
    db30:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    db32:	211d      	movs	r1, #29
    db34:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
    db36:	60c7      	str	r7, [r0, #12]
	req->func = func;
    db38:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    db3a:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    db3c:	4632      	mov	r2, r6
    db3e:	4640      	mov	r0, r8
    db40:	f7ff f8ac 	bl	cc9c <bt_att_create_pdu>
	if (!buf) {
    db44:	4606      	mov	r6, r0
    db46:	b970      	cbnz	r0, db66 <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
    db48:	4b19      	ldr	r3, [pc, #100]	; (dbb0 <gatt_indicate+0xd4>)
    db4a:	9306      	str	r3, [sp, #24]
    db4c:	4816      	ldr	r0, [pc, #88]	; (dba8 <gatt_indicate+0xcc>)
    db4e:	2302      	movs	r3, #2
    db50:	aa05      	add	r2, sp, #20
    db52:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    db56:	9301      	str	r3, [sp, #4]
    db58:	9305      	str	r3, [sp, #20]
    db5a:	f01d ff40 	bl	2b9de <z_log_msg2_static_create.constprop.0>
		bt_att_req_free(req);
    db5e:	4620      	mov	r0, r4
    db60:	f7ff fb58 	bl	d214 <bt_att_req_free>
    db64:	e7e0      	b.n	db28 <gatt_indicate+0x4c>
    db66:	f100 0a08 	add.w	sl, r0, #8
    db6a:	2102      	movs	r1, #2
    db6c:	4650      	mov	r0, sl
    db6e:	f01e ffac 	bl	2caca <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    db72:	4607      	mov	r7, r0
    db74:	8aa9      	ldrh	r1, [r5, #20]
    db76:	f827 9b02 	strh.w	r9, [r7], #2
    db7a:	4650      	mov	r0, sl
    db7c:	f01e ffa5 	bl	2caca <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    db80:	8aaa      	ldrh	r2, [r5, #20]
    db82:	6929      	ldr	r1, [r5, #16]
    db84:	4638      	mov	r0, r7
    db86:	f020 fcee 	bl	2e566 <memcpy>
	req->buf = buf;
    db8a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    db8c:	4621      	mov	r1, r4
    db8e:	4640      	mov	r0, r8
    db90:	f01d fc98 	bl	2b4c4 <bt_att_req_send>
	if (err) {
    db94:	4605      	mov	r5, r0
    db96:	2800      	cmp	r0, #0
    db98:	d0b9      	beq.n	db0e <gatt_indicate+0x32>
		bt_att_req_free(req);
    db9a:	4620      	mov	r0, r4
    db9c:	f7ff fb3a 	bl	d214 <bt_att_req_free>
    dba0:	e7b5      	b.n	db0e <gatt_indicate+0x32>
    dba2:	bf00      	nop
    dba4:	00032f1d 	.word	0x00032f1d
    dba8:	0002f4cc 	.word	0x0002f4cc
    dbac:	0002b53f 	.word	0x0002b53f
    dbb0:	00032f33 	.word	0x00032f33

0000dbb4 <bt_gatt_indicate>:
{
    dbb4:	b530      	push	{r4, r5, lr}
    dbb6:	4604      	mov	r4, r0
    dbb8:	b08b      	sub	sp, #44	; 0x2c
    dbba:	4837      	ldr	r0, [pc, #220]	; (dc98 <bt_gatt_indicate+0xe4>)
    dbbc:	f01d fcd9 	bl	2b572 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dbc0:	0782      	lsls	r2, r0, #30
{
    dbc2:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dbc4:	d561      	bpl.n	dc8a <bt_gatt_indicate+0xd6>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    dbc6:	b114      	cbz	r4, dbce <bt_gatt_indicate+0x1a>
    dbc8:	7b63      	ldrb	r3, [r4, #13]
    dbca:	2b07      	cmp	r3, #7
    dbcc:	d160      	bne.n	dc90 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    dbce:	6868      	ldr	r0, [r5, #4]
    dbd0:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dbd2:	f7ff feab 	bl	d92c <bt_gatt_attr_get_handle>
	if (params->uuid) {
    dbd6:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dbd8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
    dbdc:	b33a      	cbz	r2, dc2e <bt_gatt_indicate+0x7a>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dbde:	a905      	add	r1, sp, #20
    dbe0:	9102      	str	r1, [sp, #8]
    dbe2:	492e      	ldr	r1, [pc, #184]	; (dc9c <bt_gatt_indicate+0xe8>)
    dbe4:	9101      	str	r1, [sp, #4]
    dbe6:	2101      	movs	r1, #1
	found->attr = NULL;
    dbe8:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dbea:	9100      	str	r1, [sp, #0]
    dbec:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    dbf0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dbf2:	f7ff fecb 	bl	d98c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
    dbf6:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    dbf8:	b91b      	cbnz	r3, dc02 <bt_gatt_indicate+0x4e>
			return -ENOENT;
    dbfa:	f06f 0001 	mvn.w	r0, #1
}
    dbfe:	b00b      	add	sp, #44	; 0x2c
    dc00:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
    dc02:	606b      	str	r3, [r5, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    dc04:	9b05      	ldr	r3, [sp, #20]
    dc06:	6818      	ldr	r0, [r3, #0]
    dc08:	2300      	movs	r3, #0
    dc0a:	f88d 3010 	strb.w	r3, [sp, #16]
    dc0e:	a904      	add	r1, sp, #16
    dc10:	f642 0303 	movw	r3, #10243	; 0x2803
    dc14:	f8ad 3012 	strh.w	r3, [sp, #18]
    dc18:	f01c f9b8 	bl	29f8c <bt_uuid_cmp>
    dc1c:	b970      	cbnz	r0, dc3c <bt_gatt_indicate+0x88>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    dc1e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    dc20:	68c3      	ldr	r3, [r0, #12]
    dc22:	799b      	ldrb	r3, [r3, #6]
    dc24:	069b      	lsls	r3, r3, #26
    dc26:	d405      	bmi.n	dc34 <bt_gatt_indicate+0x80>
			return -EINVAL;
    dc28:	f06f 0015 	mvn.w	r0, #21
    dc2c:	e7e7      	b.n	dbfe <bt_gatt_indicate+0x4a>
		if (!data.handle) {
    dc2e:	2800      	cmp	r0, #0
    dc30:	d1e8      	bne.n	dc04 <bt_gatt_indicate+0x50>
    dc32:	e7e2      	b.n	dbfa <bt_gatt_indicate+0x46>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    dc34:	f01d ffc1 	bl	2bbba <bt_gatt_attr_value_handle>
    dc38:	f8ad 0018 	strh.w	r0, [sp, #24]
		return gatt_indicate(conn, data.handle, params);
    dc3c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    dc40:	b13c      	cbz	r4, dc52 <bt_gatt_indicate+0x9e>
		params->_ref = 1;
    dc42:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    dc44:	4601      	mov	r1, r0
		params->_ref = 1;
    dc46:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    dc48:	462a      	mov	r2, r5
    dc4a:	4620      	mov	r0, r4
    dc4c:	f7ff ff46 	bl	dadc <gatt_indicate>
    dc50:	e7d5      	b.n	dbfe <bt_gatt_indicate+0x4a>
	data.err = -ENOTCONN;
    dc52:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    dc56:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    dc58:	2302      	movs	r3, #2
    dc5a:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    dc5e:	f642 1302 	movw	r3, #10498	; 0x2902
    dc62:	f8ad 3012 	strh.w	r3, [sp, #18]
    dc66:	ab05      	add	r3, sp, #20
    dc68:	9302      	str	r3, [sp, #8]
    dc6a:	4b0d      	ldr	r3, [pc, #52]	; (dca0 <bt_gatt_indicate+0xec>)
    dc6c:	9301      	str	r3, [sp, #4]
    dc6e:	2301      	movs	r3, #1
    dc70:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    dc72:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    dc74:	4623      	mov	r3, r4
    dc76:	aa04      	add	r2, sp, #16
    dc78:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    dc7c:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    dc7e:	f88d 4010 	strb.w	r4, [sp, #16]
    dc82:	f7ff fe83 	bl	d98c <bt_gatt_foreach_attr_type>
	return data.err;
    dc86:	9807      	ldr	r0, [sp, #28]
    dc88:	e7b9      	b.n	dbfe <bt_gatt_indicate+0x4a>
		return -EAGAIN;
    dc8a:	f06f 000a 	mvn.w	r0, #10
    dc8e:	e7b6      	b.n	dbfe <bt_gatt_indicate+0x4a>
		return -ENOTCONN;
    dc90:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    dc94:	e7b3      	b.n	dbfe <bt_gatt_indicate+0x4a>
    dc96:	bf00      	nop
    dc98:	200000cc 	.word	0x200000cc
    dc9c:	0002b565 	.word	0x0002b565
    dca0:	0000ddb9 	.word	0x0000ddb9

0000dca4 <sc_process>:
{
    dca4:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    dca6:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    dcaa:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    dcae:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    dcb2:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    dcb6:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    dcb8:	f1a0 0120 	sub.w	r1, r0, #32
    dcbc:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    dcc0:	f3bf 8f5b 	dmb	ish
    dcc4:	e854 2f00 	ldrex	r2, [r4]
    dcc8:	f022 0201 	bic.w	r2, r2, #1
    dccc:	e844 2000 	strex	r0, r2, [r4]
    dcd0:	2800      	cmp	r0, #0
    dcd2:	d1f7      	bne.n	dcc4 <sc_process+0x20>
    dcd4:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    dcd8:	4a0c      	ldr	r2, [pc, #48]	; (dd0c <sc_process+0x68>)
    dcda:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    dcde:	4a0c      	ldr	r2, [pc, #48]	; (dd10 <sc_process+0x6c>)
    dce0:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    dce4:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    dce6:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    dce8:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    dcec:	2204      	movs	r2, #4
	sc->start = 0U;
    dcee:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    dcf2:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    dcf6:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    dcfa:	f7ff ff5b 	bl	dbb4 <bt_gatt_indicate>
    dcfe:	b918      	cbnz	r0, dd08 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    dd00:	2101      	movs	r1, #1
    dd02:	4620      	mov	r0, r4
    dd04:	f01d fece 	bl	2baa4 <atomic_set_bit>
}
    dd08:	b002      	add	sp, #8
    dd0a:	bd10      	pop	{r4, pc}
    dd0c:	0002fcfc 	.word	0x0002fcfc
    dd10:	0000d775 	.word	0x0000d775

0000dd14 <gatt_notify>:
{
    dd14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd18:	4614      	mov	r4, r2
    dd1a:	b089      	sub	sp, #36	; 0x24
    dd1c:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    dd1e:	2214      	movs	r2, #20
    dd20:	6861      	ldr	r1, [r4, #4]
{
    dd22:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    dd24:	f01d ff9d 	bl	2bc62 <bt_gatt_check_perm>
    dd28:	b178      	cbz	r0, dd4a <gatt_notify+0x36>
		BT_WARN("Link is not encrypted");
    dd2a:	4b20      	ldr	r3, [pc, #128]	; (ddac <gatt_notify+0x98>)
    dd2c:	4820      	ldr	r0, [pc, #128]	; (ddb0 <gatt_notify+0x9c>)
    dd2e:	9306      	str	r3, [sp, #24]
    dd30:	aa05      	add	r2, sp, #20
    dd32:	2302      	movs	r3, #2
    dd34:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dd38:	9301      	str	r3, [sp, #4]
    dd3a:	9305      	str	r3, [sp, #20]
    dd3c:	f01d fe4f 	bl	2b9de <z_log_msg2_static_create.constprop.0>
		return -EPERM;
    dd40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    dd44:	b009      	add	sp, #36	; 0x24
    dd46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				sizeof(*nfy) + params->len);
    dd4a:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    dd4c:	211b      	movs	r1, #27
    dd4e:	3202      	adds	r2, #2
    dd50:	4638      	mov	r0, r7
    dd52:	f7fe ffa3 	bl	cc9c <bt_att_create_pdu>
	if (!buf) {
    dd56:	4605      	mov	r5, r0
    dd58:	b968      	cbnz	r0, dd76 <gatt_notify+0x62>
		BT_WARN("No buffer available to send notification");
    dd5a:	4b16      	ldr	r3, [pc, #88]	; (ddb4 <gatt_notify+0xa0>)
    dd5c:	4814      	ldr	r0, [pc, #80]	; (ddb0 <gatt_notify+0x9c>)
    dd5e:	9306      	str	r3, [sp, #24]
    dd60:	aa05      	add	r2, sp, #20
    dd62:	2302      	movs	r3, #2
    dd64:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    dd68:	9301      	str	r3, [sp, #4]
    dd6a:	9305      	str	r3, [sp, #20]
    dd6c:	f01d fe37 	bl	2b9de <z_log_msg2_static_create.constprop.0>
		return -ENOMEM;
    dd70:	f06f 000b 	mvn.w	r0, #11
    dd74:	e7e6      	b.n	dd44 <gatt_notify+0x30>
    dd76:	f100 0908 	add.w	r9, r0, #8
    dd7a:	2102      	movs	r1, #2
    dd7c:	4648      	mov	r0, r9
    dd7e:	f01e fea4 	bl	2caca <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    dd82:	4606      	mov	r6, r0
    dd84:	89a1      	ldrh	r1, [r4, #12]
    dd86:	f826 8b02 	strh.w	r8, [r6], #2
    dd8a:	4648      	mov	r0, r9
    dd8c:	f01e fe9d 	bl	2caca <net_buf_simple_add>
    dd90:	89a2      	ldrh	r2, [r4, #12]
    dd92:	68a1      	ldr	r1, [r4, #8]
    dd94:	4630      	mov	r0, r6
    dd96:	f020 fbe6 	bl	2e566 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    dd9a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    dd9e:	4629      	mov	r1, r5
    dda0:	4638      	mov	r0, r7
}
    dda2:	b009      	add	sp, #36	; 0x24
    dda4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    dda8:	f01d bb45 	b.w	2b436 <bt_att_send>
    ddac:	00032f1d 	.word	0x00032f1d
    ddb0:	0002f4cc 	.word	0x0002f4cc
    ddb4:	00032f5a 	.word	0x00032f5a

0000ddb8 <notify_cb>:
{
    ddb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    ddbc:	4b43      	ldr	r3, [pc, #268]	; (decc <notify_cb+0x114>)
{
    ddbe:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    ddc0:	6882      	ldr	r2, [r0, #8]
    ddc2:	429a      	cmp	r2, r3
{
    ddc4:	b08b      	sub	sp, #44	; 0x2c
    ddc6:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    ddc8:	d004      	beq.n	ddd4 <notify_cb+0x1c>
		return BT_GATT_ITER_CONTINUE;
    ddca:	2701      	movs	r7, #1
}
    ddcc:	4638      	mov	r0, r7
    ddce:	b00b      	add	sp, #44	; 0x2c
    ddd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    ddd4:	f8d0 800c 	ldr.w	r8, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    ddd8:	4b3d      	ldr	r3, [pc, #244]	; (ded0 <notify_cb+0x118>)
    ddda:	4598      	cmp	r8, r3
    dddc:	d01c      	beq.n	de18 <notify_cb+0x60>
    ddde:	f108 0315 	add.w	r3, r8, #21
			BT_WARN("Link is not encrypted");
    dde2:	f8df b0f0 	ldr.w	fp, [pc, #240]	; ded4 <notify_cb+0x11c>
    dde6:	9301      	str	r3, [sp, #4]
    dde8:	f108 0501 	add.w	r5, r8, #1
		if (cfg->value != data->type) {
    ddec:	f8b5 2007 	ldrh.w	r2, [r5, #7]
    ddf0:	89a3      	ldrh	r3, [r4, #12]
    ddf2:	429a      	cmp	r2, r3
    ddf4:	d10b      	bne.n	de0e <notify_cb+0x56>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    ddf6:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    ddfa:	4629      	mov	r1, r5
    ddfc:	f7fd feb0 	bl	bb60 <bt_conn_lookup_addr_le>
		if (!conn) {
    de00:	4681      	mov	r9, r0
    de02:	b120      	cbz	r0, de0e <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    de04:	7b42      	ldrb	r2, [r0, #13]
    de06:	2a07      	cmp	r2, #7
    de08:	d02a      	beq.n	de60 <notify_cb+0xa8>
			bt_conn_unref(conn);
    de0a:	f01c fd1e 	bl	2a84a <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    de0e:	9b01      	ldr	r3, [sp, #4]
    de10:	350a      	adds	r5, #10
    de12:	429d      	cmp	r5, r3
    de14:	d0d9      	beq.n	ddca <notify_cb+0x12>
    de16:	e7e9      	b.n	ddec <notify_cb+0x34>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    de18:	2700      	movs	r7, #0
    de1a:	4d2f      	ldr	r5, [pc, #188]	; (ded8 <notify_cb+0x120>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    de1c:	46b9      	mov	r9, r7
    de1e:	a904      	add	r1, sp, #16
    de20:	4628      	mov	r0, r5
    de22:	f8cd 9010 	str.w	r9, [sp, #16]
    de26:	f8cd 9013 	str.w	r9, [sp, #19]
    de2a:	f01d fbfd 	bl	2b628 <bt_addr_le_cmp>
    de2e:	b178      	cbz	r0, de50 <notify_cb+0x98>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    de30:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    de34:	2207      	movs	r2, #7
    de36:	4629      	mov	r1, r5
    de38:	f7fd fed4 	bl	bbe4 <bt_conn_lookup_state_le>
			if (!conn) {
    de3c:	b968      	cbnz	r0, de5a <notify_cb+0xa2>
				sc = (struct sc_data *)data->ind_params->data;
    de3e:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    de40:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    de44:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    de46:	4629      	mov	r1, r5
    de48:	8853      	ldrh	r3, [r2, #2]
    de4a:	8812      	ldrh	r2, [r2, #0]
    de4c:	f7ff fc02 	bl	d654 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    de50:	350c      	adds	r5, #12
    de52:	2f00      	cmp	r7, #0
    de54:	d1c3      	bne.n	ddde <notify_cb+0x26>
    de56:	2701      	movs	r7, #1
    de58:	e7e1      	b.n	de1e <notify_cb+0x66>
			bt_conn_unref(conn);
    de5a:	f01c fcf6 	bl	2a84a <bt_conn_unref>
    de5e:	e7f7      	b.n	de50 <notify_cb+0x98>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    de60:	f8d8 2020 	ldr.w	r2, [r8, #32]
    de64:	b122      	cbz	r2, de70 <notify_cb+0xb8>
    de66:	4631      	mov	r1, r6
    de68:	4790      	blx	r2
    de6a:	b908      	cbnz	r0, de70 <notify_cb+0xb8>
			bt_conn_unref(conn);
    de6c:	4648      	mov	r0, r9
    de6e:	e7cc      	b.n	de0a <notify_cb+0x52>
		if (bt_gatt_check_perm(conn, attr,
    de70:	2214      	movs	r2, #20
    de72:	4631      	mov	r1, r6
    de74:	4648      	mov	r0, r9
    de76:	f01d fef4 	bl	2bc62 <bt_gatt_check_perm>
    de7a:	4607      	mov	r7, r0
    de7c:	b158      	cbz	r0, de96 <notify_cb+0xde>
			BT_WARN("Link is not encrypted");
    de7e:	4b17      	ldr	r3, [pc, #92]	; (dedc <notify_cb+0x124>)
    de80:	9308      	str	r3, [sp, #32]
    de82:	aa07      	add	r2, sp, #28
    de84:	2302      	movs	r3, #2
    de86:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    de8a:	4658      	mov	r0, fp
    de8c:	9303      	str	r3, [sp, #12]
    de8e:	9307      	str	r3, [sp, #28]
    de90:	f01d fda5 	bl	2b9de <z_log_msg2_static_create.constprop.0>
			continue;
    de94:	e7bb      	b.n	de0e <notify_cb+0x56>
		if (data->type == BT_GATT_CCC_INDICATE) {
    de96:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    de98:	88a1      	ldrh	r1, [r4, #4]
    de9a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    de9c:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
    de9e:	4648      	mov	r0, r9
		if (data->type == BT_GATT_CCC_INDICATE) {
    dea0:	d110      	bne.n	dec4 <notify_cb+0x10c>
			err = gatt_indicate(conn, data->handle,
    dea2:	f7ff fe1b 	bl	dadc <gatt_indicate>
			if (err == 0) {
    dea6:	4682      	mov	sl, r0
    dea8:	b918      	cbnz	r0, deb2 <notify_cb+0xfa>
				data->ind_params->_ref++;
    deaa:	6920      	ldr	r0, [r4, #16]
    deac:	7d81      	ldrb	r1, [r0, #22]
    deae:	3101      	adds	r1, #1
    deb0:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
    deb2:	4648      	mov	r0, r9
    deb4:	f01c fcc9 	bl	2a84a <bt_conn_unref>
		if (err < 0) {
    deb8:	f1ba 0f00 	cmp.w	sl, #0
    debc:	db86      	blt.n	ddcc <notify_cb+0x14>
		data->err = 0;
    debe:	2300      	movs	r3, #0
    dec0:	60a3      	str	r3, [r4, #8]
    dec2:	e7a4      	b.n	de0e <notify_cb+0x56>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    dec4:	f7ff ff26 	bl	dd14 <gatt_notify>
    dec8:	4682      	mov	sl, r0
    deca:	e7f2      	b.n	deb2 <notify_cb+0xfa>
    decc:	0000d589 	.word	0x0000d589
    ded0:	20000264 	.word	0x20000264
    ded4:	0002f4cc 	.word	0x0002f4cc
    ded8:	2000395f 	.word	0x2000395f
    dedc:	00032f1d 	.word	0x00032f1d

0000dee0 <update_ccc>:
{
    dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    dee4:	4b3f      	ldr	r3, [pc, #252]	; (dfe4 <update_ccc+0x104>)
{
    dee6:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    dee8:	6882      	ldr	r2, [r0, #8]
    deea:	429a      	cmp	r2, r3
{
    deec:	b089      	sub	sp, #36	; 0x24
    deee:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    def0:	d173      	bne.n	dfda <update_ccc+0xfa>
	ccc = attr->user_data;
    def2:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    def6:	683c      	ldr	r4, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    def8:	f8df b0ec 	ldr.w	fp, [pc, #236]	; dfe8 <update_ccc+0x108>
    defc:	f108 0601 	add.w	r6, r8, #1
    df00:	f108 0915 	add.w	r9, r8, #21
		if (!cfg->value ||
    df04:	f8b6 3007 	ldrh.w	r3, [r6, #7]
    df08:	b1cb      	cbz	r3, df3e <update_ccc+0x5e>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    df0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    df0e:	4632      	mov	r2, r6
    df10:	4620      	mov	r0, r4
    df12:	f01c fd42 	bl	2a99a <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    df16:	b190      	cbz	r0, df3e <update_ccc+0x5e>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    df18:	222a      	movs	r2, #42	; 0x2a
    df1a:	4629      	mov	r1, r5
    df1c:	4620      	mov	r0, r4
    df1e:	f01d fea0 	bl	2bc62 <bt_gatt_check_perm>
		if (err) {
    df22:	b308      	cbz	r0, df68 <update_ccc+0x88>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    df24:	2803      	cmp	r0, #3
    df26:	d10e      	bne.n	df46 <update_ccc+0x66>
				BT_WARN("CCC %p not writable", attr);
    df28:	4b30      	ldr	r3, [pc, #192]	; (dfec <update_ccc+0x10c>)
    df2a:	9001      	str	r0, [sp, #4]
    df2c:	9005      	str	r0, [sp, #20]
    df2e:	aa05      	add	r2, sp, #20
    df30:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    df34:	4658      	mov	r0, fp
    df36:	e9cd 3506 	strd	r3, r5, [sp, #24]
    df3a:	f01d fd50 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    df3e:	360a      	adds	r6, #10
    df40:	45b1      	cmp	r9, r6
    df42:	d04a      	beq.n	dfda <update_ccc+0xfa>
    df44:	e7de      	b.n	df04 <update_ccc+0x24>
				sec = BT_SECURITY_L3;
    df46:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    df48:	4620      	mov	r0, r4
				sec = BT_SECURITY_L3;
    df4a:	bf14      	ite	ne
    df4c:	f04f 0a02 	movne.w	sl, #2
    df50:	f04f 0a03 	moveq.w	sl, #3
			    bt_conn_get_security(conn) < sec) {
    df54:	f01c fd1f 	bl	2a996 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    df58:	4582      	cmp	sl, r0
    df5a:	d905      	bls.n	df68 <update_ccc+0x88>
				if (data->sec < sec) {
    df5c:	793a      	ldrb	r2, [r7, #4]
    df5e:	4552      	cmp	r2, sl
    df60:	d2ed      	bcs.n	df3e <update_ccc+0x5e>
					data->sec = sec;
    df62:	f887 a004 	strb.w	sl, [r7, #4]
    df66:	e7ea      	b.n	df3e <update_ccc+0x5e>
		gatt_ccc_changed(attr, ccc);
    df68:	4641      	mov	r1, r8
    df6a:	4628      	mov	r0, r5
    df6c:	f01d fad9 	bl	2b522 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    df70:	4b1f      	ldr	r3, [pc, #124]	; (dff0 <update_ccc+0x110>)
    df72:	4598      	cmp	r8, r3
    df74:	d131      	bne.n	dfda <update_ccc+0xfa>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    df76:	7a20      	ldrb	r0, [r4, #8]
    df78:	f104 0188 	add.w	r1, r4, #136	; 0x88
    df7c:	f7ff faa4 	bl	d4c8 <find_sc_cfg>
	if (!cfg) {
    df80:	b358      	cbz	r0, dfda <update_ccc+0xfa>
	if (!(cfg->data.start || cfg->data.end)) {
    df82:	8902      	ldrh	r2, [r0, #8]
    df84:	8943      	ldrh	r3, [r0, #10]
    df86:	ea53 0102 	orrs.w	r1, r3, r2
    df8a:	d026      	beq.n	dfda <update_ccc+0xfa>
	index = bt_conn_index(conn);
    df8c:	4620      	mov	r0, r4
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    df8e:	f8ad 2000 	strh.w	r2, [sp]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    df92:	f8ad 3002 	strh.w	r3, [sp, #2]
	index = bt_conn_index(conn);
    df96:	f7fd fcbf 	bl	b918 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    df9a:	4916      	ldr	r1, [pc, #88]	; (dff4 <update_ccc+0x114>)
    df9c:	4a16      	ldr	r2, [pc, #88]	; (dff8 <update_ccc+0x118>)
    df9e:	2318      	movs	r3, #24
    dfa0:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    dfa4:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    dfa6:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    dfa8:	4a14      	ldr	r2, [pc, #80]	; (dffc <update_ccc+0x11c>)
    dfaa:	609a      	str	r2, [r3, #8]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    dfac:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].len = sizeof(sc_range);
    dfb0:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    dfb2:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].data = &sc_range[0];
    dfb6:	f8c3 d010 	str.w	sp, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    dfba:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    dfbc:	4620      	mov	r0, r4
    dfbe:	f7ff fdf9 	bl	dbb4 <bt_gatt_indicate>
    dfc2:	b150      	cbz	r0, dfda <update_ccc+0xfa>
		BT_ERR("SC restore indication failed");
    dfc4:	4b0e      	ldr	r3, [pc, #56]	; (e000 <update_ccc+0x120>)
    dfc6:	9306      	str	r3, [sp, #24]
    dfc8:	4807      	ldr	r0, [pc, #28]	; (dfe8 <update_ccc+0x108>)
    dfca:	2302      	movs	r3, #2
    dfcc:	aa05      	add	r2, sp, #20
    dfce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    dfd2:	9301      	str	r3, [sp, #4]
    dfd4:	9305      	str	r3, [sp, #20]
    dfd6:	f01d fd02 	bl	2b9de <z_log_msg2_static_create.constprop.0>
}
    dfda:	2001      	movs	r0, #1
    dfdc:	b009      	add	sp, #36	; 0x24
    dfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dfe2:	bf00      	nop
    dfe4:	0000d589 	.word	0x0000d589
    dfe8:	0002f4cc 	.word	0x0002f4cc
    dfec:	00032f83 	.word	0x00032f83
    dff0:	20000264 	.word	0x20000264
    dff4:	20002350 	.word	0x20002350
    dff8:	0002fcfc 	.word	0x0002fcfc
    dffc:	0002bac1 	.word	0x0002bac1
    e000:	00032f97 	.word	0x00032f97

0000e004 <bt_gatt_discover>:
{
    e004:	b570      	push	{r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e006:	7b43      	ldrb	r3, [r0, #13]
    e008:	2b07      	cmp	r3, #7
{
    e00a:	b08c      	sub	sp, #48	; 0x30
    e00c:	4605      	mov	r5, r0
    e00e:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e010:	f040 80aa 	bne.w	e168 <bt_gatt_discover+0x164>
	switch (params->type) {
    e014:	7c0b      	ldrb	r3, [r1, #16]
    e016:	2b06      	cmp	r3, #6
    e018:	f200 80a4 	bhi.w	e164 <bt_gatt_discover+0x160>
    e01c:	e8df f003 	tbb	[pc, r3]
    e020:	61610404 	.word	0x61610404
    e024:	9b69      	.short	0x9b69
    e026:	2d          	.byte	0x2d
    e027:	00          	.byte	0x00
		if (params->uuid) {
    e028:	680b      	ldr	r3, [r1, #0]
    e02a:	b1f3      	cbz	r3, e06a <bt_gatt_discover+0x66>
	switch (params->uuid->type) {
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	b173      	cbz	r3, e04e <bt_gatt_discover+0x4a>
    e030:	2b02      	cmp	r3, #2
    e032:	d018      	beq.n	e066 <bt_gatt_discover+0x62>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
    e034:	4a4e      	ldr	r2, [pc, #312]	; (e170 <bt_gatt_discover+0x16c>)
		BT_ERR("Invalid discovery type: %u", params->type);
    e036:	484f      	ldr	r0, [pc, #316]	; (e174 <bt_gatt_discover+0x170>)
	switch (params->type) {
    e038:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		BT_ERR("Invalid discovery type: %u", params->type);
    e03c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e040:	2303      	movs	r3, #3
    e042:	aa09      	add	r2, sp, #36	; 0x24
    e044:	9305      	str	r3, [sp, #20]
    e046:	9309      	str	r3, [sp, #36]	; 0x24
    e048:	f01d fcc9 	bl	2b9de <z_log_msg2_static_create.constprop.0>
    e04c:	e017      	b.n	e07e <bt_gatt_discover+0x7a>
		len += BT_UUID_SIZE_16;
    e04e:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
    e050:	9301      	str	r3, [sp, #4]
    e052:	2306      	movs	r3, #6
    e054:	9300      	str	r3, [sp, #0]
    e056:	4948      	ldr	r1, [pc, #288]	; (e178 <bt_gatt_discover+0x174>)
    e058:	4b48      	ldr	r3, [pc, #288]	; (e17c <bt_gatt_discover+0x178>)
    e05a:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    e05c:	4628      	mov	r0, r5
    e05e:	f01d fb12 	bl	2b686 <gatt_req_send>
}
    e062:	b00c      	add	sp, #48	; 0x30
    e064:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
    e066:	2316      	movs	r3, #22
    e068:	e7f2      	b.n	e050 <bt_gatt_discover+0x4c>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
    e06a:	2310      	movs	r3, #16
    e06c:	2104      	movs	r1, #4
    e06e:	e9cd 3100 	strd	r3, r1, [sp]
    e072:	4622      	mov	r2, r4
    e074:	4b42      	ldr	r3, [pc, #264]	; (e180 <bt_gatt_discover+0x17c>)
    e076:	4943      	ldr	r1, [pc, #268]	; (e184 <bt_gatt_discover+0x180>)
    e078:	e7f0      	b.n	e05c <bt_gatt_discover+0x58>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e07a:	6808      	ldr	r0, [r1, #0]
    e07c:	b910      	cbnz	r0, e084 <bt_gatt_discover+0x80>
	return -EINVAL;
    e07e:	f06f 0015 	mvn.w	r0, #21
    e082:	e7ee      	b.n	e062 <bt_gatt_discover+0x5e>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e084:	7806      	ldrb	r6, [r0, #0]
    e086:	2e00      	cmp	r6, #0
    e088:	d1f9      	bne.n	e07e <bt_gatt_discover+0x7a>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    e08a:	f44f 5324 	mov.w	r3, #10496	; 0x2900
    e08e:	a903      	add	r1, sp, #12
    e090:	f88d 600c 	strb.w	r6, [sp, #12]
    e094:	f8ad 300e 	strh.w	r3, [sp, #14]
    e098:	f01b ff78 	bl	29f8c <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
    e09c:	b308      	cbz	r0, e0e2 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    e09e:	f642 1302 	movw	r3, #10498	; 0x2902
    e0a2:	6820      	ldr	r0, [r4, #0]
    e0a4:	f88d 6010 	strb.w	r6, [sp, #16]
    e0a8:	a904      	add	r1, sp, #16
    e0aa:	f8ad 3012 	strh.w	r3, [sp, #18]
    e0ae:	f01b ff6d 	bl	29f8c <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
    e0b2:	b1b0      	cbz	r0, e0e2 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    e0b4:	f642 1303 	movw	r3, #10499	; 0x2903
    e0b8:	6820      	ldr	r0, [r4, #0]
    e0ba:	f88d 6014 	strb.w	r6, [sp, #20]
    e0be:	a905      	add	r1, sp, #20
    e0c0:	f8ad 3016 	strh.w	r3, [sp, #22]
    e0c4:	f01b ff62 	bl	29f8c <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
    e0c8:	b158      	cbz	r0, e0e2 <bt_gatt_discover+0xde>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
    e0ca:	f642 1304 	movw	r3, #10500	; 0x2904
    e0ce:	6820      	ldr	r0, [r4, #0]
    e0d0:	f88d 6018 	strb.w	r6, [sp, #24]
    e0d4:	a906      	add	r1, sp, #24
    e0d6:	f8ad 301a 	strh.w	r3, [sp, #26]
    e0da:	f01b ff57 	bl	29f8c <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
    e0de:	2800      	cmp	r0, #0
    e0e0:	d1cd      	bne.n	e07e <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
    e0e2:	2308      	movs	r3, #8
    e0e4:	2204      	movs	r2, #4
    e0e6:	e9cd 3200 	strd	r3, r2, [sp]
    e0ea:	4927      	ldr	r1, [pc, #156]	; (e188 <bt_gatt_discover+0x184>)
    e0ec:	4b27      	ldr	r3, [pc, #156]	; (e18c <bt_gatt_discover+0x188>)
    e0ee:	4622      	mov	r2, r4
    e0f0:	e7b4      	b.n	e05c <bt_gatt_discover+0x58>
		if (params->uuid &&
    e0f2:	6808      	ldr	r0, [r1, #0]
    e0f4:	b378      	cbz	r0, e156 <bt_gatt_discover+0x152>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e0f6:	2600      	movs	r6, #0
    e0f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e0fc:	a903      	add	r1, sp, #12
    e0fe:	f88d 600c 	strb.w	r6, [sp, #12]
    e102:	f8ad 300e 	strh.w	r3, [sp, #14]
    e106:	f01b ff41 	bl	29f8c <bt_uuid_cmp>
		if (params->uuid &&
    e10a:	2800      	cmp	r0, #0
    e10c:	d0b7      	beq.n	e07e <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e10e:	f642 0301 	movw	r3, #10241	; 0x2801
    e112:	6820      	ldr	r0, [r4, #0]
    e114:	f88d 6010 	strb.w	r6, [sp, #16]
    e118:	a904      	add	r1, sp, #16
    e11a:	f8ad 3012 	strh.w	r3, [sp, #18]
    e11e:	f01b ff35 	bl	29f8c <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
    e122:	2800      	cmp	r0, #0
    e124:	d0ab      	beq.n	e07e <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e126:	f642 0302 	movw	r3, #10242	; 0x2802
    e12a:	6820      	ldr	r0, [r4, #0]
    e12c:	f88d 6014 	strb.w	r6, [sp, #20]
    e130:	a905      	add	r1, sp, #20
    e132:	f8ad 3016 	strh.w	r3, [sp, #22]
    e136:	f01b ff29 	bl	29f8c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
    e13a:	2800      	cmp	r0, #0
    e13c:	d09f      	beq.n	e07e <bt_gatt_discover+0x7a>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
    e13e:	f642 0303 	movw	r3, #10243	; 0x2803
    e142:	6820      	ldr	r0, [r4, #0]
    e144:	f88d 6018 	strb.w	r6, [sp, #24]
    e148:	a906      	add	r1, sp, #24
    e14a:	f8ad 301a 	strh.w	r3, [sp, #26]
    e14e:	f01b ff1d 	bl	29f8c <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
    e152:	2800      	cmp	r0, #0
    e154:	d093      	beq.n	e07e <bt_gatt_discover+0x7a>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
    e156:	2304      	movs	r3, #4
    e158:	e9cd 3300 	strd	r3, r3, [sp]
    e15c:	490c      	ldr	r1, [pc, #48]	; (e190 <bt_gatt_discover+0x18c>)
    e15e:	4b0d      	ldr	r3, [pc, #52]	; (e194 <bt_gatt_discover+0x190>)
    e160:	4622      	mov	r2, r4
    e162:	e77b      	b.n	e05c <bt_gatt_discover+0x58>
		BT_ERR("Invalid discovery type: %u", params->type);
    e164:	4a0c      	ldr	r2, [pc, #48]	; (e198 <bt_gatt_discover+0x194>)
    e166:	e766      	b.n	e036 <bt_gatt_discover+0x32>
		return -ENOTCONN;
    e168:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    e16c:	e779      	b.n	e062 <bt_gatt_discover+0x5e>
    e16e:	bf00      	nop
    e170:	00032fb4 	.word	0x00032fb4
    e174:	0002f4cc 	.word	0x0002f4cc
    e178:	0002bcf3 	.word	0x0002bcf3
    e17c:	0002ba3b 	.word	0x0002ba3b
    e180:	0002b74b 	.word	0x0002b74b
    e184:	0000e19d 	.word	0x0000e19d
    e188:	0000e2c5 	.word	0x0000e2c5
    e18c:	0002b77b 	.word	0x0002b77b
    e190:	0000e669 	.word	0x0000e669
    e194:	0002b70f 	.word	0x0002b70f
    e198:	00032fc9 	.word	0x00032fc9

0000e19c <gatt_read_group_rsp>:
{
    e19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e1a0:	b08e      	sub	sp, #56	; 0x38
    e1a2:	4607      	mov	r7, r0
    e1a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
    e1a8:	4616      	mov	r6, r2
	if (err) {
    e1aa:	b139      	cbz	r1, e1bc <gatt_read_group_rsp+0x20>
		params->func(conn, NULL, params);
    e1ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e1b0:	4642      	mov	r2, r8
    e1b2:	2100      	movs	r1, #0
}
    e1b4:	b00e      	add	sp, #56	; 0x38
    e1b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		params->func(conn, NULL, params);
    e1ba:	4718      	bx	r3
	switch (rsp->len) {
    e1bc:	7812      	ldrb	r2, [r2, #0]
    e1be:	2a06      	cmp	r2, #6
    e1c0:	d016      	beq.n	e1f0 <gatt_read_group_rsp+0x54>
    e1c2:	2a14      	cmp	r2, #20
    e1c4:	d02b      	beq.n	e21e <gatt_read_group_rsp+0x82>
		BT_ERR("Invalid data len %u", rsp->len);
    e1c6:	4b3d      	ldr	r3, [pc, #244]	; (e2bc <gatt_read_group_rsp+0x120>)
    e1c8:	483d      	ldr	r0, [pc, #244]	; (e2c0 <gatt_read_group_rsp+0x124>)
	switch (rsp->len) {
    e1ca:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
		BT_ERR("Invalid data len %u", rsp->len);
    e1ce:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e1d2:	2303      	movs	r3, #3
    e1d4:	aa0b      	add	r2, sp, #44	; 0x2c
    e1d6:	9303      	str	r3, [sp, #12]
    e1d8:	930b      	str	r3, [sp, #44]	; 0x2c
    e1da:	f01d fc00 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    e1de:	f8d8 3004 	ldr.w	r3, [r8, #4]
    e1e2:	4642      	mov	r2, r8
    e1e4:	2100      	movs	r1, #0
    e1e6:	4638      	mov	r0, r7
    e1e8:	4798      	blx	r3
}
    e1ea:	b00e      	add	sp, #56	; 0x38
    e1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		u.uuid.type = BT_UUID_TYPE_16;
    e1f0:	f88d 100c 	strb.w	r1, [sp, #12]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e1f4:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
    e1f6:	2500      	movs	r5, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e1f8:	b29c      	uxth	r4, r3
    e1fa:	f106 0901 	add.w	r9, r6, #1
		struct bt_gatt_attr attr = {};
    e1fe:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
    e200:	7833      	ldrb	r3, [r6, #0]
    e202:	42a3      	cmp	r3, r4
    e204:	d90f      	bls.n	e226 <gatt_read_group_rsp+0x8a>
	if (length == 0U && end_handle) {
    e206:	2c00      	cmp	r4, #0
    e208:	d1e9      	bne.n	e1de <gatt_read_group_rsp+0x42>
    e20a:	2d00      	cmp	r5, #0
    e20c:	d0e7      	beq.n	e1de <gatt_read_group_rsp+0x42>
	gatt_discover_next(conn, handle, params);
    e20e:	4642      	mov	r2, r8
    e210:	4629      	mov	r1, r5
    e212:	4638      	mov	r0, r7
}
    e214:	b00e      	add	sp, #56	; 0x38
    e216:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, handle, params);
    e21a:	f01d bd4d 	b.w	2bcb8 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    e21e:	2202      	movs	r2, #2
    e220:	f88d 200c 	strb.w	r2, [sp, #12]
		break;
    e224:	e7e6      	b.n	e1f4 <gatt_read_group_rsp+0x58>
		struct bt_gatt_attr attr = {};
    e226:	2214      	movs	r2, #20
    e228:	2100      	movs	r1, #0
    e22a:	a808      	add	r0, sp, #32
    e22c:	f020 f9bc 	bl	2e5a8 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
    e230:	f8b9 2000 	ldrh.w	r2, [r9]
    e234:	b293      	uxth	r3, r2
		if (!start_handle) {
    e236:	2b00      	cmp	r3, #0
    e238:	d0d1      	beq.n	e1de <gatt_read_group_rsp+0x42>
		end_handle = sys_le16_to_cpu(data->end_handle);
    e23a:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    e23e:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
    e240:	2d00      	cmp	r5, #0
    e242:	d0cc      	beq.n	e1de <gatt_read_group_rsp+0x42>
    e244:	42ab      	cmp	r3, r5
    e246:	d8ca      	bhi.n	e1de <gatt_read_group_rsp+0x42>
		switch (u.uuid.type) {
    e248:	f89d 300c 	ldrb.w	r3, [sp, #12]
    e24c:	b323      	cbz	r3, e298 <gatt_read_group_rsp+0xfc>
    e24e:	2b02      	cmp	r3, #2
    e250:	d027      	beq.n	e2a2 <gatt_read_group_rsp+0x106>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
    e252:	f898 3010 	ldrb.w	r3, [r8, #16]
		value.end_handle = end_handle;
    e256:	f8ad 1008 	strh.w	r1, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
    e25a:	2b00      	cmp	r3, #0
    e25c:	f642 0301 	movw	r3, #10241	; 0x2801
    e260:	bf08      	it	eq
    e262:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
    e266:	f8ad 3002 	strh.w	r3, [sp, #2]
		value.uuid = &u.uuid;
    e26a:	ab03      	add	r3, sp, #12
    e26c:	9301      	str	r3, [sp, #4]
		attr.user_data = &value;
    e26e:	ab01      	add	r3, sp, #4
		attr.handle = start_handle;
    e270:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
		attr.user_data = &value;
    e274:	930b      	str	r3, [sp, #44]	; 0x2c
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
    e276:	f88d a000 	strb.w	sl, [sp]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e27a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		attr.uuid = &uuid_svc.uuid;
    e27e:	f8cd d020 	str.w	sp, [sp, #32]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e282:	4642      	mov	r2, r8
    e284:	a908      	add	r1, sp, #32
    e286:	4638      	mov	r0, r7
    e288:	4798      	blx	r3
    e28a:	2800      	cmp	r0, #0
    e28c:	d0ad      	beq.n	e1ea <gatt_read_group_rsp+0x4e>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e28e:	7832      	ldrb	r2, [r6, #0]
    e290:	1aa4      	subs	r4, r4, r2
    e292:	b2a4      	uxth	r4, r4
    e294:	4491      	add	r9, r2
    e296:	e7b3      	b.n	e200 <gatt_read_group_rsp+0x64>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
    e298:	f8b9 3004 	ldrh.w	r3, [r9, #4]
    e29c:	f8ad 300e 	strh.w	r3, [sp, #14]
			break;
    e2a0:	e7d7      	b.n	e252 <gatt_read_group_rsp+0xb6>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
    e2a2:	f109 0304 	add.w	r3, r9, #4
    e2a6:	f10d 000d 	add.w	r0, sp, #13
    e2aa:	f109 0c14 	add.w	ip, r9, #20
    e2ae:	f853 eb04 	ldr.w	lr, [r3], #4
    e2b2:	f840 eb04 	str.w	lr, [r0], #4
    e2b6:	4563      	cmp	r3, ip
    e2b8:	d1f9      	bne.n	e2ae <gatt_read_group_rsp+0x112>
    e2ba:	e7ca      	b.n	e252 <gatt_read_group_rsp+0xb6>
    e2bc:	00032fe4 	.word	0x00032fe4
    e2c0:	0002f4cc 	.word	0x0002f4cc

0000e2c4 <gatt_read_type_rsp>:
{
    e2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e2c8:	b093      	sub	sp, #76	; 0x4c
    e2ca:	4680      	mov	r8, r0
    e2cc:	9d1c      	ldr	r5, [sp, #112]	; 0x70
    e2ce:	4617      	mov	r7, r2
	if (err) {
    e2d0:	b131      	cbz	r1, e2e0 <gatt_read_type_rsp+0x1c>
		params->func(conn, NULL, params);
    e2d2:	686b      	ldr	r3, [r5, #4]
    e2d4:	462a      	mov	r2, r5
    e2d6:	2100      	movs	r1, #0
}
    e2d8:	b013      	add	sp, #76	; 0x4c
    e2da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	params->func(conn, NULL, params);
    e2de:	4718      	bx	r3
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
    e2e0:	7c2a      	ldrb	r2, [r5, #16]
    e2e2:	2a02      	cmp	r2, #2
    e2e4:	f040 8088 	bne.w	e3f8 <gatt_read_type_rsp+0x134>
	switch (rsp->len) {
    e2e8:	7838      	ldrb	r0, [r7, #0]
    e2ea:	2806      	cmp	r0, #6
    e2ec:	d018      	beq.n	e320 <gatt_read_type_rsp+0x5c>
    e2ee:	2808      	cmp	r0, #8
    e2f0:	d119      	bne.n	e326 <gatt_read_type_rsp+0x62>
		u.uuid.type = BT_UUID_TYPE_16;
    e2f2:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e2f6:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    e2f8:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e2fa:	b2a4      	uxth	r4, r4
    e2fc:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
    e300:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e304:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    e306:	783b      	ldrb	r3, [r7, #0]
    e308:	42a3      	cmp	r3, r4
    e30a:	d91e      	bls.n	e34a <gatt_read_type_rsp+0x86>
	if (length == 0U && handle) {
    e30c:	b9bc      	cbnz	r4, e33e <gatt_read_type_rsp+0x7a>
    e30e:	b1b6      	cbz	r6, e33e <gatt_read_type_rsp+0x7a>
	gatt_discover_next(conn, handle, params);
    e310:	462a      	mov	r2, r5
    e312:	4631      	mov	r1, r6
    e314:	4640      	mov	r0, r8
}
    e316:	b013      	add	sp, #76	; 0x4c
    e318:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	gatt_discover_next(conn, handle, params);
    e31c:	f01d bccc 	b.w	2bcb8 <gatt_discover_next>
		u.uuid.type = BT_UUID_TYPE_128;
    e320:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    e324:	e7e7      	b.n	e2f6 <gatt_read_type_rsp+0x32>
		BT_ERR("Invalid data len %u", rsp->len);
    e326:	4b9f      	ldr	r3, [pc, #636]	; (e5a4 <gatt_read_type_rsp+0x2e0>)
	switch (rsp->len) {
    e328:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    e32c:	2303      	movs	r3, #3
    e32e:	9307      	str	r3, [sp, #28]
    e330:	930f      	str	r3, [sp, #60]	; 0x3c
		BT_ERR("Invalid data len %u", rsp->len);
    e332:	489d      	ldr	r0, [pc, #628]	; (e5a8 <gatt_read_type_rsp+0x2e4>)
    e334:	aa0f      	add	r2, sp, #60	; 0x3c
    e336:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e33a:	f01d fb50 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    e33e:	686b      	ldr	r3, [r5, #4]
    e340:	462a      	mov	r2, r5
    e342:	2100      	movs	r1, #0
    e344:	4640      	mov	r0, r8
    e346:	4798      	blx	r3
	if (!handle) {
    e348:	e03a      	b.n	e3c0 <gatt_read_type_rsp+0xfc>
		handle = sys_le16_to_cpu(data->handle);
    e34a:	f8b9 3000 	ldrh.w	r3, [r9]
    e34e:	b29e      	uxth	r6, r3
		if (!handle) {
    e350:	2e00      	cmp	r6, #0
    e352:	d0f4      	beq.n	e33e <gatt_read_type_rsp+0x7a>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
    e354:	f8b9 2002 	ldrh.w	r2, [r9, #2]
    e358:	f8ad 2018 	strh.w	r2, [sp, #24]
    e35c:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
    e35e:	f8b9 2004 	ldrh.w	r2, [r9, #4]
    e362:	f8ad 201a 	strh.w	r2, [sp, #26]
    e366:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
    e368:	f89d 201c 	ldrb.w	r2, [sp, #28]
    e36c:	b172      	cbz	r2, e38c <gatt_read_type_rsp+0xc8>
    e36e:	2a02      	cmp	r2, #2
    e370:	d017      	beq.n	e3a2 <gatt_read_type_rsp+0xde>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e372:	6829      	ldr	r1, [r5, #0]
    e374:	b339      	cbz	r1, e3c6 <gatt_read_type_rsp+0x102>
    e376:	4650      	mov	r0, sl
    e378:	9303      	str	r3, [sp, #12]
    e37a:	f01b fe07 	bl	29f8c <bt_uuid_cmp>
    e37e:	9b03      	ldr	r3, [sp, #12]
    e380:	b308      	cbz	r0, e3c6 <gatt_read_type_rsp+0x102>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e382:	783a      	ldrb	r2, [r7, #0]
    e384:	1aa4      	subs	r4, r4, r2
    e386:	b2a4      	uxth	r4, r4
    e388:	4491      	add	r9, r2
    e38a:	e7bc      	b.n	e306 <gatt_read_type_rsp+0x42>
			value.uuid = &u.uuid;
    e38c:	f8cd a014 	str.w	sl, [sp, #20]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
    e390:	f899 2006 	ldrb.w	r2, [r9, #6]
    e394:	f899 1007 	ldrb.w	r1, [r9, #7]
    e398:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e39c:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
    e3a0:	e7e7      	b.n	e372 <gatt_read_type_rsp+0xae>
	return gatt_req_send(conn, read_included_uuid_cb, params,
    e3a2:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
    e3a4:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
    e3a6:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
    e3a8:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
    e3aa:	4980      	ldr	r1, [pc, #512]	; (e5ac <gatt_read_type_rsp+0x2e8>)
    e3ac:	9201      	str	r2, [sp, #4]
    e3ae:	9300      	str	r3, [sp, #0]
    e3b0:	462a      	mov	r2, r5
    e3b2:	4b7f      	ldr	r3, [pc, #508]	; (e5b0 <gatt_read_type_rsp+0x2ec>)
    e3b4:	4640      	mov	r0, r8
    e3b6:	f01d f966 	bl	2b686 <gatt_req_send>
			return read_included_uuid(conn, params);
    e3ba:	b286      	uxth	r6, r0
	if (!handle) {
    e3bc:	2e00      	cmp	r6, #0
    e3be:	d1a7      	bne.n	e310 <gatt_read_type_rsp+0x4c>
}
    e3c0:	b013      	add	sp, #76	; 0x4c
    e3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e3c6:	f642 0202 	movw	r2, #10242	; 0x2802
    e3ca:	f8ad 2012 	strh.w	r2, [sp, #18]
    e3ce:	aa04      	add	r2, sp, #16
    e3d0:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
    e3d4:	aa05      	add	r2, sp, #20
    e3d6:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
    e3d8:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e3dc:	f88d b010 	strb.w	fp, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e3e0:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e3e2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    e3e6:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e3ea:	462a      	mov	r2, r5
    e3ec:	a90c      	add	r1, sp, #48	; 0x30
    e3ee:	4640      	mov	r0, r8
    e3f0:	4798      	blx	r3
    e3f2:	2800      	cmp	r0, #0
    e3f4:	d1c5      	bne.n	e382 <gatt_read_type_rsp+0xbe>
    e3f6:	e7e3      	b.n	e3c0 <gatt_read_type_rsp+0xfc>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
    e3f8:	2a03      	cmp	r2, #3
    e3fa:	d16c      	bne.n	e4d6 <gatt_read_type_rsp+0x212>
	switch (rsp->len) {
    e3fc:	7838      	ldrb	r0, [r7, #0]
    e3fe:	2807      	cmp	r0, #7
    e400:	d007      	beq.n	e412 <gatt_read_type_rsp+0x14e>
    e402:	2815      	cmp	r0, #21
    e404:	d02a      	beq.n	e45c <gatt_read_type_rsp+0x198>
		BT_ERR("Invalid data len %u", rsp->len);
    e406:	4b67      	ldr	r3, [pc, #412]	; (e5a4 <gatt_read_type_rsp+0x2e0>)
    e408:	9207      	str	r2, [sp, #28]
	switch (rsp->len) {
    e40a:	e9cd 3010 	strd	r3, r0, [sp, #64]	; 0x40
		BT_ERR("Invalid data len %u", rsp->len);
    e40e:	920f      	str	r2, [sp, #60]	; 0x3c
    e410:	e78f      	b.n	e332 <gatt_read_type_rsp+0x6e>
		u.uuid.type = BT_UUID_TYPE_16;
    e412:	f88d 101c 	strb.w	r1, [sp, #28]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e416:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
    e418:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
    e41a:	b2a4      	uxth	r4, r4
    e41c:	f107 0901 	add.w	r9, r7, #1
    e420:	f10d 0a1c 	add.w	sl, sp, #28
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e424:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    e426:	783b      	ldrb	r3, [r7, #0]
    e428:	42a3      	cmp	r3, r4
    e42a:	f63f af6f 	bhi.w	e30c <gatt_read_type_rsp+0x48>
		handle = sys_le16_to_cpu(data->handle);
    e42e:	f8b9 3000 	ldrh.w	r3, [r9]
    e432:	b29e      	uxth	r6, r3
		if (!handle) {
    e434:	2e00      	cmp	r6, #0
    e436:	d082      	beq.n	e33e <gatt_read_type_rsp+0x7a>
		switch (u.uuid.type) {
    e438:	f89d 201c 	ldrb.w	r2, [sp, #28]
    e43c:	b192      	cbz	r2, e464 <gatt_read_type_rsp+0x1a0>
    e43e:	2a02      	cmp	r2, #2
    e440:	d019      	beq.n	e476 <gatt_read_type_rsp+0x1b2>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e442:	6829      	ldr	r1, [r5, #0]
    e444:	b321      	cbz	r1, e490 <gatt_read_type_rsp+0x1cc>
    e446:	4650      	mov	r0, sl
    e448:	9303      	str	r3, [sp, #12]
    e44a:	f01b fd9f 	bl	29f8c <bt_uuid_cmp>
    e44e:	9b03      	ldr	r3, [sp, #12]
    e450:	b1f0      	cbz	r0, e490 <gatt_read_type_rsp+0x1cc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e452:	783a      	ldrb	r2, [r7, #0]
    e454:	1aa4      	subs	r4, r4, r2
    e456:	b2a4      	uxth	r4, r4
    e458:	4491      	add	r9, r2
    e45a:	e7e4      	b.n	e426 <gatt_read_type_rsp+0x162>
		u.uuid.type = BT_UUID_TYPE_128;
    e45c:	2202      	movs	r2, #2
    e45e:	f88d 201c 	strb.w	r2, [sp, #28]
		break;
    e462:	e7d8      	b.n	e416 <gatt_read_type_rsp+0x152>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
    e464:	f899 2005 	ldrb.w	r2, [r9, #5]
    e468:	f899 1006 	ldrb.w	r1, [r9, #6]
    e46c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    e470:	f8ad 201e 	strh.w	r2, [sp, #30]
			break;
    e474:	e7e5      	b.n	e442 <gatt_read_type_rsp+0x17e>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
    e476:	f109 0205 	add.w	r2, r9, #5
    e47a:	f10d 011d 	add.w	r1, sp, #29
    e47e:	f109 0015 	add.w	r0, r9, #21
    e482:	f852 cb04 	ldr.w	ip, [r2], #4
    e486:	f841 cb04 	str.w	ip, [r1], #4
    e48a:	4282      	cmp	r2, r0
    e48c:	d1f9      	bne.n	e482 <gatt_read_type_rsp+0x1be>
    e48e:	e7d8      	b.n	e442 <gatt_read_type_rsp+0x17e>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    e490:	f899 2002 	ldrb.w	r2, [r9, #2]
    e494:	f88d 201a 	strb.w	r2, [sp, #26]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e498:	f642 0203 	movw	r2, #10243	; 0x2803
    e49c:	f8ad 2012 	strh.w	r2, [sp, #18]
    e4a0:	aa04      	add	r2, sp, #16
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    e4a2:	f8b9 1003 	ldrh.w	r1, [r9, #3]
    e4a6:	f8ad 1018 	strh.w	r1, [sp, #24]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e4aa:	e9cd 2b0c 	strd	r2, fp, [sp, #48]	; 0x30
    e4ae:	aa05      	add	r2, sp, #20
    e4b0:	920f      	str	r2, [sp, #60]	; 0x3c
		attr.handle = handle;
    e4b2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
    e4b6:	f8cd a014 	str.w	sl, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e4ba:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e4bc:	f88d b010 	strb.w	fp, [sp, #16]
    e4c0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
    e4c4:	f88d b042 	strb.w	fp, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e4c8:	462a      	mov	r2, r5
    e4ca:	a90c      	add	r1, sp, #48	; 0x30
    e4cc:	4640      	mov	r0, r8
    e4ce:	4798      	blx	r3
    e4d0:	2800      	cmp	r0, #0
    e4d2:	d1be      	bne.n	e452 <gatt_read_type_rsp+0x18e>
    e4d4:	e774      	b.n	e3c0 <gatt_read_type_rsp+0xfc>
	if (params->uuid->type != BT_UUID_TYPE_16) {
    e4d6:	682a      	ldr	r2, [r5, #0]
    e4d8:	7816      	ldrb	r6, [r2, #0]
    e4da:	b976      	cbnz	r6, e4fa <gatt_read_type_rsp+0x236>
	uuid_val = BT_UUID_16(params->uuid)->val;
    e4dc:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
    e4de:	1e5c      	subs	r4, r3, #1
    e4e0:	b2a4      	uxth	r4, r4
    e4e2:	f107 0901 	add.w	r9, r7, #1
		switch (uuid_val) {
    e4e6:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e4ea:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
    e4ec:	783b      	ldrb	r3, [r7, #0]
    e4ee:	42a3      	cmp	r3, r4
    e4f0:	d908      	bls.n	e504 <gatt_read_type_rsp+0x240>
	if (length == 0U && handle) {
    e4f2:	b914      	cbnz	r4, e4fa <gatt_read_type_rsp+0x236>
    e4f4:	2e00      	cmp	r6, #0
    e4f6:	f47f af0b 	bne.w	e310 <gatt_read_type_rsp+0x4c>
	params->func(conn, NULL, params);
    e4fa:	686b      	ldr	r3, [r5, #4]
    e4fc:	462a      	mov	r2, r5
    e4fe:	2100      	movs	r1, #0
    e500:	4640      	mov	r0, r8
    e502:	e6e9      	b.n	e2d8 <gatt_read_type_rsp+0x14>
		handle = sys_le16_to_cpu(data->handle);
    e504:	f8b9 2000 	ldrh.w	r2, [r9]
    e508:	b296      	uxth	r6, r2
		if (!handle) {
    e50a:	2e00      	cmp	r6, #0
    e50c:	d0f5      	beq.n	e4fa <gatt_read_type_rsp+0x236>
		switch (uuid_val) {
    e50e:	f1bb 0f04 	cmp.w	fp, #4
    e512:	d8f2      	bhi.n	e4fa <gatt_read_type_rsp+0x236>
    e514:	a301      	add	r3, pc, #4	; (adr r3, e51c <gatt_read_type_rsp+0x258>)
    e516:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
    e51a:	bf00      	nop
    e51c:	0000e531 	.word	0x0000e531
    e520:	0000e4fb 	.word	0x0000e4fb
    e524:	0000e531 	.word	0x0000e531
    e528:	0000e531 	.word	0x0000e531
    e52c:	0000e569 	.word	0x0000e569
			value.scc.flags = sys_get_le16(data->value);
    e530:	f8b9 3002 	ldrh.w	r3, [r9, #2]
    e534:	f8ad 301c 	strh.w	r3, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e538:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
    e53a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e53e:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	; 0x30
    e542:	ab07      	add	r3, sp, #28
    e544:	930f      	str	r3, [sp, #60]	; 0x3c
    e546:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e54a:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e54c:	f88d a042 	strb.w	sl, [sp, #66]	; 0x42
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e550:	462a      	mov	r2, r5
    e552:	a90c      	add	r1, sp, #48	; 0x30
    e554:	4640      	mov	r0, r8
    e556:	4798      	blx	r3
    e558:	2800      	cmp	r0, #0
    e55a:	f43f af31 	beq.w	e3c0 <gatt_read_type_rsp+0xfc>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
    e55e:	783a      	ldrb	r2, [r7, #0]
    e560:	1aa4      	subs	r4, r4, r2
    e562:	b2a4      	uxth	r4, r4
    e564:	4491      	add	r9, r2
    e566:	e7c1      	b.n	e4ec <gatt_read_type_rsp+0x228>
			value.cpf.format = cpf->format;
    e568:	f899 3002 	ldrb.w	r3, [r9, #2]
    e56c:	f88d 301c 	strb.w	r3, [sp, #28]
			value.cpf.exponent = cpf->exponent;
    e570:	f899 3003 	ldrb.w	r3, [r9, #3]
    e574:	f88d 301d 	strb.w	r3, [sp, #29]
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
    e578:	f899 1005 	ldrb.w	r1, [r9, #5]
    e57c:	f899 3004 	ldrb.w	r3, [r9, #4]
    e580:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    e584:	f8ad 301e 	strh.w	r3, [sp, #30]
			value.cpf.name_space = cpf->name_space;
    e588:	f899 3006 	ldrb.w	r3, [r9, #6]
    e58c:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.description = sys_le16_to_cpu(cpf->description);
    e590:	f899 3007 	ldrb.w	r3, [r9, #7]
    e594:	f899 1008 	ldrb.w	r1, [r9, #8]
    e598:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    e59c:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			break;
    e5a0:	e7ca      	b.n	e538 <gatt_read_type_rsp+0x274>
    e5a2:	bf00      	nop
    e5a4:	00032fe4 	.word	0x00032fe4
    e5a8:	0002f4cc 	.word	0x0002f4cc
    e5ac:	0000e5b5 	.word	0x0000e5b5
    e5b0:	0002b6fb 	.word	0x0002b6fb

0000e5b4 <read_included_uuid_cb>:
{
    e5b4:	b570      	push	{r4, r5, r6, lr}
    e5b6:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
    e5b8:	2b10      	cmp	r3, #16
{
    e5ba:	9c12      	ldr	r4, [sp, #72]	; 0x48
    e5bc:	4605      	mov	r5, r0
	if (length != 16U) {
    e5be:	d013      	beq.n	e5e8 <read_included_uuid_cb+0x34>
		BT_ERR("Invalid data len %u", length);
    e5c0:	4a27      	ldr	r2, [pc, #156]	; (e660 <read_included_uuid_cb+0xac>)
    e5c2:	4828      	ldr	r0, [pc, #160]	; (e664 <read_included_uuid_cb+0xb0>)
    e5c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    e5c8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e5cc:	2303      	movs	r3, #3
    e5ce:	aa0b      	add	r2, sp, #44	; 0x2c
    e5d0:	9303      	str	r3, [sp, #12]
    e5d2:	930b      	str	r3, [sp, #44]	; 0x2c
    e5d4:	f01d fa03 	bl	2b9de <z_log_msg2_static_create.constprop.0>
		params->func(conn, NULL, params);
    e5d8:	6863      	ldr	r3, [r4, #4]
    e5da:	4622      	mov	r2, r4
    e5dc:	2100      	movs	r1, #0
    e5de:	4628      	mov	r0, r5
}
    e5e0:	b00e      	add	sp, #56	; 0x38
    e5e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		params->func(conn, NULL, params);
    e5e6:	4718      	bx	r3
	value.start_handle = params->_included.start_handle;
    e5e8:	8963      	ldrh	r3, [r4, #10]
    e5ea:	f8ad 3008 	strh.w	r3, [sp, #8]
	value.end_handle = params->_included.end_handle;
    e5ee:	89a3      	ldrh	r3, [r4, #12]
    e5f0:	f8ad 300a 	strh.w	r3, [sp, #10]
	value.uuid = &u.uuid;
    e5f4:	a803      	add	r0, sp, #12
	u.uuid.type = BT_UUID_TYPE_128;
    e5f6:	2302      	movs	r3, #2
    e5f8:	f88d 300c 	strb.w	r3, [sp, #12]
	value.uuid = &u.uuid;
    e5fc:	9001      	str	r0, [sp, #4]
	memcpy(u.u128.val, pdu, length);
    e5fe:	f10d 030d 	add.w	r3, sp, #13
    e602:	f102 0110 	add.w	r1, r2, #16
    e606:	f852 6b04 	ldr.w	r6, [r2], #4
    e60a:	f843 6b04 	str.w	r6, [r3], #4
    e60e:	428a      	cmp	r2, r1
    e610:	d1f9      	bne.n	e606 <read_included_uuid_cb+0x52>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e612:	6821      	ldr	r1, [r4, #0]
    e614:	b9c9      	cbnz	r1, e64a <read_included_uuid_cb+0x96>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e616:	2300      	movs	r3, #0
    e618:	f642 0202 	movw	r2, #10242	; 0x2802
    e61c:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    e620:	f88d 3000 	strb.w	r3, [sp]
    e624:	f8ad 2002 	strh.w	r2, [sp, #2]
    e628:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    e62c:	aa01      	add	r2, sp, #4
	attr.handle = params->_included.attr_handle;
    e62e:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e630:	920b      	str	r2, [sp, #44]	; 0x2c
	attr.handle = params->_included.attr_handle;
    e632:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e636:	f8cd d020 	str.w	sp, [sp, #32]
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e63a:	6863      	ldr	r3, [r4, #4]
    e63c:	4622      	mov	r2, r4
    e63e:	a908      	add	r1, sp, #32
    e640:	4628      	mov	r0, r5
    e642:	4798      	blx	r3
    e644:	b928      	cbnz	r0, e652 <read_included_uuid_cb+0x9e>
}
    e646:	b00e      	add	sp, #56	; 0x38
    e648:	bd70      	pop	{r4, r5, r6, pc}
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e64a:	f01b fc9f 	bl	29f8c <bt_uuid_cmp>
    e64e:	2800      	cmp	r0, #0
    e650:	d0e1      	beq.n	e616 <read_included_uuid_cb+0x62>
	gatt_discover_next(conn, params->start_handle, params);
    e652:	8921      	ldrh	r1, [r4, #8]
    e654:	4622      	mov	r2, r4
    e656:	4628      	mov	r0, r5
    e658:	f01d fb2e 	bl	2bcb8 <gatt_discover_next>
	return;
    e65c:	e7f3      	b.n	e646 <read_included_uuid_cb+0x92>
    e65e:	bf00      	nop
    e660:	00032fe4 	.word	0x00032fe4
    e664:	0002f4cc 	.word	0x0002f4cc

0000e668 <gatt_find_info_rsp>:
{
    e668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e66c:	b091      	sub	sp, #68	; 0x44
    e66e:	4680      	mov	r8, r0
    e670:	9e1a      	ldr	r6, [sp, #104]	; 0x68
	if (err) {
    e672:	b981      	cbnz	r1, e696 <gatt_find_info_rsp+0x2e>
	switch (rsp->format) {
    e674:	7810      	ldrb	r0, [r2, #0]
    e676:	2801      	cmp	r0, #1
    e678:	d013      	beq.n	e6a2 <gatt_find_info_rsp+0x3a>
    e67a:	2802      	cmp	r0, #2
    e67c:	d02a      	beq.n	e6d4 <gatt_find_info_rsp+0x6c>
		BT_ERR("Invalid format %u", rsp->format);
    e67e:	4b52      	ldr	r3, [pc, #328]	; (e7c8 <gatt_find_info_rsp+0x160>)
    e680:	aa0d      	add	r2, sp, #52	; 0x34
	switch (rsp->format) {
    e682:	e9cd 300e 	strd	r3, r0, [sp, #56]	; 0x38
		BT_ERR("Invalid format %u", rsp->format);
    e686:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    e68a:	2303      	movs	r3, #3
    e68c:	484f      	ldr	r0, [pc, #316]	; (e7cc <gatt_find_info_rsp+0x164>)
    e68e:	9305      	str	r3, [sp, #20]
    e690:	930d      	str	r3, [sp, #52]	; 0x34
    e692:	f01d f9a4 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	params->func(conn, NULL, params);
    e696:	6873      	ldr	r3, [r6, #4]
    e698:	4632      	mov	r2, r6
    e69a:	2100      	movs	r1, #0
    e69c:	4640      	mov	r0, r8
    e69e:	4798      	blx	r3
    e6a0:	e08f      	b.n	e7c2 <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_16;
    e6a2:	f88d 1014 	strb.w	r1, [sp, #20]
		len = sizeof(*info.i16);
    e6a6:	f04f 0a04 	mov.w	sl, #4
	length--;
    e6aa:	3b01      	subs	r3, #1
    e6ac:	b29b      	uxth	r3, r3
	if (length < len) {
    e6ae:	4553      	cmp	r3, sl
    e6b0:	d3f1      	bcc.n	e696 <gatt_find_info_rsp+0x2e>
	for (i = length / len, pdu = rsp->info; i != 0;
    e6b2:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
    e6b6:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
    e6ba:	9300      	str	r3, [sp, #0]
    e6bc:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
    e6be:	46cb      	mov	fp, r9
			skip = false;
    e6c0:	464d      	mov	r5, r9
    e6c2:	af05      	add	r7, sp, #20
	for (i = length / len, pdu = rsp->info; i != 0;
    e6c4:	9b00      	ldr	r3, [sp, #0]
    e6c6:	b953      	cbnz	r3, e6de <gatt_find_info_rsp+0x76>
	gatt_discover_next(conn, handle, params);
    e6c8:	4632      	mov	r2, r6
    e6ca:	4659      	mov	r1, fp
    e6cc:	4640      	mov	r0, r8
    e6ce:	f01d faf3 	bl	2bcb8 <gatt_discover_next>
	return;
    e6d2:	e076      	b.n	e7c2 <gatt_find_info_rsp+0x15a>
		u.uuid.type = BT_UUID_TYPE_128;
    e6d4:	f88d 0014 	strb.w	r0, [sp, #20]
		len = sizeof(*info.i128);
    e6d8:	f04f 0a12 	mov.w	sl, #18
		break;
    e6dc:	e7e5      	b.n	e6aa <gatt_find_info_rsp+0x42>
		handle = sys_le16_to_cpu(info.i16->handle);
    e6de:	8823      	ldrh	r3, [r4, #0]
    e6e0:	9301      	str	r3, [sp, #4]
    e6e2:	f8bd b004 	ldrh.w	fp, [sp, #4]
		if (skip) {
    e6e6:	f1b9 0f00 	cmp.w	r9, #0
    e6ea:	d156      	bne.n	e79a <gatt_find_info_rsp+0x132>
		switch (u.uuid.type) {
    e6ec:	f89d 3014 	ldrb.w	r3, [sp, #20]
    e6f0:	2b00      	cmp	r3, #0
    e6f2:	d03a      	beq.n	e76a <gatt_find_info_rsp+0x102>
    e6f4:	2b02      	cmp	r3, #2
    e6f6:	d03f      	beq.n	e778 <gatt_find_info_rsp+0x110>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e6f8:	6831      	ldr	r1, [r6, #0]
    e6fa:	2900      	cmp	r1, #0
    e6fc:	d148      	bne.n	e790 <gatt_find_info_rsp+0x128>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
    e6fe:	7c33      	ldrb	r3, [r6, #16]
    e700:	2b04      	cmp	r3, #4
    e702:	d14d      	bne.n	e7a0 <gatt_find_info_rsp+0x138>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    e704:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e708:	a903      	add	r1, sp, #12
    e70a:	4638      	mov	r0, r7
    e70c:	f88d 500c 	strb.w	r5, [sp, #12]
    e710:	f8ad 300e 	strh.w	r3, [sp, #14]
    e714:	f01b fc3a 	bl	29f8c <bt_uuid_cmp>
    e718:	b310      	cbz	r0, e760 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    e71a:	f642 0301 	movw	r3, #10241	; 0x2801
    e71e:	a904      	add	r1, sp, #16
    e720:	4638      	mov	r0, r7
    e722:	f88d 5010 	strb.w	r5, [sp, #16]
    e726:	f8ad 3012 	strh.w	r3, [sp, #18]
    e72a:	f01b fc2f 	bl	29f8c <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
    e72e:	b1b8      	cbz	r0, e760 <gatt_find_info_rsp+0xf8>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
    e730:	f642 0302 	movw	r3, #10242	; 0x2802
    e734:	a90a      	add	r1, sp, #40	; 0x28
    e736:	4638      	mov	r0, r7
    e738:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    e73c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    e740:	f01b fc24 	bl	29f8c <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
    e744:	b160      	cbz	r0, e760 <gatt_find_info_rsp+0xf8>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
    e746:	f642 0303 	movw	r3, #10243	; 0x2803
    e74a:	a90a      	add	r1, sp, #40	; 0x28
    e74c:	4638      	mov	r0, r7
    e74e:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
    e752:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    e756:	f01b fc19 	bl	29f8c <bt_uuid_cmp>
    e75a:	bb08      	cbnz	r0, e7a0 <gatt_find_info_rsp+0x138>
				skip = true;
    e75c:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
    e760:	9b00      	ldr	r3, [sp, #0]
    e762:	3b01      	subs	r3, #1
    e764:	9300      	str	r3, [sp, #0]
    e766:	4454      	add	r4, sl
    e768:	e7ac      	b.n	e6c4 <gatt_find_info_rsp+0x5c>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
    e76a:	78a3      	ldrb	r3, [r4, #2]
    e76c:	78e2      	ldrb	r2, [r4, #3]
    e76e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    e772:	f8ad 3016 	strh.w	r3, [sp, #22]
			break;
    e776:	e7bf      	b.n	e6f8 <gatt_find_info_rsp+0x90>
			memcpy(u.u128.val, info.i128->uuid, 16);
    e778:	1ca3      	adds	r3, r4, #2
    e77a:	f10d 0215 	add.w	r2, sp, #21
    e77e:	f104 0112 	add.w	r1, r4, #18
    e782:	f853 0b04 	ldr.w	r0, [r3], #4
    e786:	f842 0b04 	str.w	r0, [r2], #4
    e78a:	428b      	cmp	r3, r1
    e78c:	d1f9      	bne.n	e782 <gatt_find_info_rsp+0x11a>
    e78e:	e7b3      	b.n	e6f8 <gatt_find_info_rsp+0x90>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
    e790:	4638      	mov	r0, r7
    e792:	f01b fbfb 	bl	29f8c <bt_uuid_cmp>
    e796:	2800      	cmp	r0, #0
    e798:	d0b1      	beq.n	e6fe <gatt_find_info_rsp+0x96>
			skip = false;
    e79a:	f04f 0900 	mov.w	r9, #0
    e79e:	e7df      	b.n	e760 <gatt_find_info_rsp+0xf8>
		attr.handle = handle;
    e7a0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    e7a4:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e7a8:	e9cd 750a 	strd	r7, r5, [sp, #40]	; 0x28
    e7ac:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e7b0:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
    e7b2:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
    e7b6:	4632      	mov	r2, r6
    e7b8:	a90a      	add	r1, sp, #40	; 0x28
    e7ba:	4640      	mov	r0, r8
    e7bc:	4798      	blx	r3
    e7be:	2800      	cmp	r0, #0
    e7c0:	d1ce      	bne.n	e760 <gatt_find_info_rsp+0xf8>
}
    e7c2:	b011      	add	sp, #68	; 0x44
    e7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7c8:	00032ff8 	.word	0x00032ff8
    e7cc:	0002f4cc 	.word	0x0002f4cc

0000e7d0 <bt_gatt_write>:
{
    e7d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    e7d2:	7b43      	ldrb	r3, [r0, #13]
    e7d4:	2b07      	cmp	r3, #7
{
    e7d6:	4605      	mov	r5, r0
    e7d8:	460c      	mov	r4, r1
	if (conn->state != BT_CONN_CONNECTED) {
    e7da:	d125      	bne.n	e828 <bt_gatt_write+0x58>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    e7dc:	88cb      	ldrh	r3, [r1, #6]
    e7de:	b1ab      	cbz	r3, e80c <bt_gatt_write+0x3c>
	len = bt_att_get_mtu(conn) - req_len - 1;
    e7e0:	4628      	mov	r0, r5
    e7e2:	f01c fd96 	bl	2b312 <bt_att_get_mtu>
    e7e6:	1f43      	subs	r3, r0, #5
    e7e8:	b298      	uxth	r0, r3
	len = MIN(params->length, len);
    e7ea:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
    e7ec:	4910      	ldr	r1, [pc, #64]	; (e830 <bt_gatt_write+0x60>)
	len = MIN(params->length, len);
    e7ee:	4283      	cmp	r3, r0
    e7f0:	bf28      	it	cs
    e7f2:	4603      	movcs	r3, r0
	len += req_len;
    e7f4:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
    e7f6:	b29b      	uxth	r3, r3
    e7f8:	9301      	str	r3, [sp, #4]
    e7fa:	2316      	movs	r3, #22
    e7fc:	9300      	str	r3, [sp, #0]
    e7fe:	4b0d      	ldr	r3, [pc, #52]	; (e834 <bt_gatt_write+0x64>)
    e800:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
    e802:	4628      	mov	r0, r5
    e804:	f01c ff3f 	bl	2b686 <gatt_req_send>
}
    e808:	b002      	add	sp, #8
    e80a:	bd70      	pop	{r4, r5, r6, pc}
	len = sizeof(struct bt_att_write_req) + params->length;
    e80c:	898e      	ldrh	r6, [r1, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    e80e:	f01c fd80 	bl	2b312 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
    e812:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
    e814:	3801      	subs	r0, #1
    e816:	42b0      	cmp	r0, r6
    e818:	d3e2      	bcc.n	e7e0 <bt_gatt_write+0x10>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
    e81a:	2312      	movs	r3, #18
    e81c:	9300      	str	r3, [sp, #0]
    e81e:	4906      	ldr	r1, [pc, #24]	; (e838 <bt_gatt_write+0x68>)
    e820:	4b06      	ldr	r3, [pc, #24]	; (e83c <bt_gatt_write+0x6c>)
    e822:	9601      	str	r6, [sp, #4]
    e824:	4622      	mov	r2, r4
    e826:	e7ec      	b.n	e802 <bt_gatt_write+0x32>
		return -ENOTCONN;
    e828:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    e82c:	e7ec      	b.n	e808 <bt_gatt_write+0x38>
    e82e:	bf00      	nop
    e830:	0000e841 	.word	0x0000e841
    e834:	0002b7f3 	.word	0x0002b7f3
    e838:	0002b56d 	.word	0x0002b56d
    e83c:	0002b7b7 	.word	0x0002b7b7

0000e840 <gatt_prepare_write_rsp>:
{
    e840:	b5f0      	push	{r4, r5, r6, r7, lr}
    e842:	b08b      	sub	sp, #44	; 0x2c
    e844:	4606      	mov	r6, r0
    e846:	9c10      	ldr	r4, [sp, #64]	; 0x40
    e848:	4617      	mov	r7, r2
	if (err) {
    e84a:	b129      	cbz	r1, e858 <gatt_prepare_write_rsp+0x18>
		params->func(conn, err, params);
    e84c:	6823      	ldr	r3, [r4, #0]
    e84e:	4622      	mov	r2, r4
}
    e850:	b00b      	add	sp, #44	; 0x2c
    e852:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
    e856:	4718      	bx	r3
	len = length - sizeof(*rsp);
    e858:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
    e85a:	89a3      	ldrh	r3, [r4, #12]
    e85c:	429d      	cmp	r5, r3
    e85e:	d91a      	bls.n	e896 <gatt_prepare_write_rsp+0x56>
		BT_ERR("Incorrect length, canceling write");
    e860:	4b1f      	ldr	r3, [pc, #124]	; (e8e0 <gatt_prepare_write_rsp+0xa0>)
    e862:	9308      	str	r3, [sp, #32]
    e864:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    e868:	2302      	movs	r3, #2
    e86a:	481e      	ldr	r0, [pc, #120]	; (e8e4 <gatt_prepare_write_rsp+0xa4>)
    e86c:	9303      	str	r3, [sp, #12]
    e86e:	aa07      	add	r2, sp, #28
    e870:	9307      	str	r3, [sp, #28]
    e872:	f01d f8b4 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
    e876:	2318      	movs	r3, #24
    e878:	2101      	movs	r1, #1
    e87a:	e9cd 3100 	strd	r3, r1, [sp]
    e87e:	4b1a      	ldr	r3, [pc, #104]	; (e8e8 <gatt_prepare_write_rsp+0xa8>)
    e880:	491a      	ldr	r1, [pc, #104]	; (e8ec <gatt_prepare_write_rsp+0xac>)
    e882:	4622      	mov	r2, r4
    e884:	4630      	mov	r0, r6
    e886:	f01c fefe 	bl	2b686 <gatt_req_send>
		if (gatt_cancel_all_writes(conn, params)) {
    e88a:	b330      	cbz	r0, e8da <gatt_prepare_write_rsp+0x9a>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
    e88c:	6823      	ldr	r3, [r4, #0]
    e88e:	4622      	mov	r2, r4
    e890:	210e      	movs	r1, #14
    e892:	4630      	mov	r0, r6
    e894:	e7dc      	b.n	e850 <gatt_prepare_write_rsp+0x10>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
    e896:	462a      	mov	r2, r5
    e898:	68a0      	ldr	r0, [r4, #8]
    e89a:	1d39      	adds	r1, r7, #4
    e89c:	f01f fe53 	bl	2e546 <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
    e8a0:	88e2      	ldrh	r2, [r4, #6]
    e8a2:	887b      	ldrh	r3, [r7, #2]
    e8a4:	4293      	cmp	r3, r2
    e8a6:	d100      	bne.n	e8aa <gatt_prepare_write_rsp+0x6a>
    e8a8:	b108      	cbz	r0, e8ae <gatt_prepare_write_rsp+0x6e>
		BT_ERR("Incorrect offset or data in response, canceling write");
    e8aa:	4b11      	ldr	r3, [pc, #68]	; (e8f0 <gatt_prepare_write_rsp+0xb0>)
    e8ac:	e7d9      	b.n	e862 <gatt_prepare_write_rsp+0x22>
	params->offset += len;
    e8ae:	fa13 f385 	uxtah	r3, r3, r5
    e8b2:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
    e8b4:	68a3      	ldr	r3, [r4, #8]
    e8b6:	442b      	add	r3, r5
    e8b8:	60a3      	str	r3, [r4, #8]
	params->length -= len;
    e8ba:	89a3      	ldrh	r3, [r4, #12]
    e8bc:	1b5d      	subs	r5, r3, r5
    e8be:	b2ad      	uxth	r5, r5
    e8c0:	81a5      	strh	r5, [r4, #12]
	if (!params->length) {
    e8c2:	b92d      	cbnz	r5, e8d0 <gatt_prepare_write_rsp+0x90>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
    e8c4:	2318      	movs	r3, #24
    e8c6:	2201      	movs	r2, #1
    e8c8:	e9cd 3200 	strd	r3, r2, [sp]
    e8cc:	4b09      	ldr	r3, [pc, #36]	; (e8f4 <gatt_prepare_write_rsp+0xb4>)
    e8ce:	e7d7      	b.n	e880 <gatt_prepare_write_rsp+0x40>
	if (!bt_gatt_write(conn, params)) {
    e8d0:	4621      	mov	r1, r4
    e8d2:	4630      	mov	r0, r6
    e8d4:	f7ff ff7c 	bl	e7d0 <bt_gatt_write>
    e8d8:	e7d7      	b.n	e88a <gatt_prepare_write_rsp+0x4a>
}
    e8da:	b00b      	add	sp, #44	; 0x2c
    e8dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e8de:	bf00      	nop
    e8e0:	0003300a 	.word	0x0003300a
    e8e4:	0002f4cc 	.word	0x0002f4cc
    e8e8:	0002b727 	.word	0x0002b727
    e8ec:	0002b56d 	.word	0x0002b56d
    e8f0:	0003302c 	.word	0x0003302c
    e8f4:	0002b739 	.word	0x0002b739

0000e8f8 <bt_gatt_mult_notification>:
{
    e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8fc:	b087      	sub	sp, #28
    e8fe:	af00      	add	r7, sp, #0
    e900:	4681      	mov	r9, r0
    e902:	460c      	mov	r4, r1
    e904:	4692      	mov	sl, r2
	sub = gatt_sub_find(conn);
    e906:	f7fe fdff 	bl	d508 <gatt_sub_find>
	if (!sub) {
    e90a:	4606      	mov	r6, r0
    e90c:	b328      	cbz	r0, e95a <bt_gatt_mult_notification+0x62>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
    e90e:	4652      	mov	r2, sl
    e910:	4621      	mov	r1, r4
    e912:	f107 000c 	add.w	r0, r7, #12
    e916:	f01e f88f 	bl	2ca38 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
    e91a:	8a3b      	ldrh	r3, [r7, #16]
    e91c:	2b04      	cmp	r3, #4
    e91e:	d91c      	bls.n	e95a <bt_gatt_mult_notification+0x62>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e920:	2104      	movs	r1, #4
    e922:	f107 000c 	add.w	r0, r7, #12
    e926:	f01e f901 	bl	2cb2c <net_buf_simple_pull_mem>
		if (len > buf.len) {
    e92a:	8a39      	ldrh	r1, [r7, #16]
		len = sys_cpu_to_le16(nfy->len);
    e92c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
    e930:	4541      	cmp	r1, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
    e932:	4602      	mov	r2, r0
		if (len > buf.len) {
    e934:	d215      	bcs.n	e962 <bt_gatt_mult_notification+0x6a>
			BT_ERR("Invalid data len %u > %u", len, length);
    e936:	466c      	mov	r4, sp
    e938:	b088      	sub	sp, #32
    e93a:	466a      	mov	r2, sp
    e93c:	491c      	ldr	r1, [pc, #112]	; (e9b0 <bt_gatt_mult_notification+0xb8>)
    e93e:	f8c2 a018 	str.w	sl, [r2, #24]
    e942:	2304      	movs	r3, #4
    e944:	e9c2 1804 	strd	r1, r8, [r2, #16]
    e948:	481a      	ldr	r0, [pc, #104]	; (e9b4 <bt_gatt_mult_notification+0xbc>)
    e94a:	f842 3f0c 	str.w	r3, [r2, #12]!
    e94e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    e952:	60bb      	str	r3, [r7, #8]
    e954:	f01d f843 	bl	2b9de <z_log_msg2_static_create.constprop.0>
    e958:	46a5      	mov	sp, r4
}
    e95a:	371c      	adds	r7, #28
    e95c:	46bd      	mov	sp, r7
    e95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return list->head;
    e962:	68b4      	ldr	r4, [r6, #8]
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e964:	b1f4      	cbz	r4, e9a4 <bt_gatt_mult_notification+0xac>
	return node->next;
    e966:	f854 5914 	ldr.w	r5, [r4], #-20
    e96a:	b105      	cbz	r5, e96e <bt_gatt_mult_notification+0x76>
    e96c:	3d14      	subs	r5, #20
		handle = sys_cpu_to_le16(nfy->handle);
    e96e:	4693      	mov	fp, r2
    e970:	f83b 3b04 	ldrh.w	r3, [fp], #4
    e974:	607b      	str	r3, [r7, #4]
			if (handle != params->value_handle) {
    e976:	8921      	ldrh	r1, [r4, #8]
    e978:	687b      	ldr	r3, [r7, #4]
    e97a:	4299      	cmp	r1, r3
    e97c:	d10b      	bne.n	e996 <bt_gatt_mult_notification+0x9e>
			if (params->notify(conn, params, nfy->value, len) ==
    e97e:	f8d4 c000 	ldr.w	ip, [r4]
    e982:	4643      	mov	r3, r8
    e984:	465a      	mov	r2, fp
    e986:	4621      	mov	r1, r4
    e988:	4648      	mov	r0, r9
    e98a:	47e0      	blx	ip
    e98c:	b918      	cbnz	r0, e996 <bt_gatt_mult_notification+0x9e>
				bt_gatt_unsubscribe(conn, params);
    e98e:	4621      	mov	r1, r4
    e990:	4648      	mov	r0, r9
    e992:	f01d fa1c 	bl	2bdce <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
    e996:	b12d      	cbz	r5, e9a4 <bt_gatt_mult_notification+0xac>
    e998:	6969      	ldr	r1, [r5, #20]
    e99a:	b101      	cbz	r1, e99e <bt_gatt_mult_notification+0xa6>
    e99c:	3914      	subs	r1, #20
{
    e99e:	462c      	mov	r4, r5
    e9a0:	460d      	mov	r5, r1
    e9a2:	e7e8      	b.n	e976 <bt_gatt_mult_notification+0x7e>
		net_buf_simple_pull_mem(&buf, len);
    e9a4:	4641      	mov	r1, r8
    e9a6:	f107 000c 	add.w	r0, r7, #12
    e9aa:	f01e f8bf 	bl	2cb2c <net_buf_simple_pull_mem>
    e9ae:	e7b4      	b.n	e91a <bt_gatt_mult_notification+0x22>
    e9b0:	00033062 	.word	0x00033062
    e9b4:	0002f4cc 	.word	0x0002f4cc

0000e9b8 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    e9b8:	b570      	push	{r4, r5, r6, lr}
    e9ba:	b08a      	sub	sp, #40	; 0x28
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e9bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e9c0:	4a1e      	ldr	r2, [pc, #120]	; (ea3c <bt_gatt_connected+0x84>)
	data.conn = conn;
    e9c2:	9002      	str	r0, [sp, #8]
{
    e9c4:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e9c6:	ab02      	add	r3, sp, #8
	data.sec = BT_SECURITY_L1;
    e9c8:	2001      	movs	r0, #1
    e9ca:	f88d 000c 	strb.w	r0, [sp, #12]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e9ce:	f01d f93b 	bl	2bc48 <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_CENTRAL ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
    e9d2:	4628      	mov	r0, r5
    e9d4:	f01b ffdf 	bl	2a996 <bt_conn_get_security>
    e9d8:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e9dc:	4288      	cmp	r0, r1
    e9de:	d20f      	bcs.n	ea00 <bt_gatt_connected+0x48>
		int err = bt_conn_set_security(conn, data.sec);
    e9e0:	4628      	mov	r0, r5
    e9e2:	f01b ffb0 	bl	2a946 <bt_conn_set_security>

		if (err) {
    e9e6:	b158      	cbz	r0, ea00 <bt_gatt_connected+0x48>
			BT_WARN("Failed to set security for bonded peer (%d)",
    e9e8:	4b15      	ldr	r3, [pc, #84]	; (ea40 <bt_gatt_connected+0x88>)
    e9ea:	aa07      	add	r2, sp, #28
    e9ec:	e9cd 3008 	strd	r3, r0, [sp, #32]
    e9f0:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    e9f4:	2303      	movs	r3, #3
    e9f6:	4813      	ldr	r0, [pc, #76]	; (ea44 <bt_gatt_connected+0x8c>)
    e9f8:	9301      	str	r3, [sp, #4]
    e9fa:	9307      	str	r3, [sp, #28]
    e9fc:	f01c ffef 	bl	2b9de <z_log_msg2_static_create.constprop.0>
	sub = gatt_sub_find(conn);
    ea00:	4628      	mov	r0, r5
    ea02:	f7fe fd81 	bl	d508 <gatt_sub_find>
	if (!sub) {
    ea06:	b1b8      	cbz	r0, ea38 <bt_gatt_connected+0x80>
	return list->head;
    ea08:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    ea0a:	b1ac      	cbz	r4, ea38 <bt_gatt_connected+0x80>
    ea0c:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
    ea0e:	f105 0688 	add.w	r6, r5, #136	; 0x88
    ea12:	7a28      	ldrb	r0, [r5, #8]
    ea14:	4631      	mov	r1, r6
    ea16:	f01b fc45 	bl	2a2a4 <bt_addr_le_is_bonded>
    ea1a:	b148      	cbz	r0, ea30 <bt_gatt_connected+0x78>
    ea1c:	f104 0010 	add.w	r0, r4, #16
    ea20:	f01c fda7 	bl	2b572 <atomic_get>
    ea24:	0783      	lsls	r3, r0, #30
    ea26:	d403      	bmi.n	ea30 <bt_gatt_connected+0x78>
			gatt_write_ccc(conn, params);
    ea28:	4621      	mov	r1, r4
    ea2a:	4628      	mov	r0, r5
    ea2c:	f7fe fd9a 	bl	d564 <gatt_write_ccc>
	return node->next;
    ea30:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
    ea32:	b10c      	cbz	r4, ea38 <bt_gatt_connected+0x80>
    ea34:	3c14      	subs	r4, #20
    ea36:	e7ec      	b.n	ea12 <bt_gatt_connected+0x5a>
	 * CF storage on pairing complete.
	 */
	bt_conn_cb_register(&gatt_conn_cb);
#endif /* CONFIG_BT_SETTINGS && CONFIG_BT_SMP */
#endif /* CONFIG_BT_GATT_CLIENT */
}
    ea38:	b00a      	add	sp, #40	; 0x28
    ea3a:	bd70      	pop	{r4, r5, r6, pc}
    ea3c:	0000dee1 	.word	0x0000dee1
    ea40:	0003307b 	.word	0x0003307b
    ea44:	0002f4cc 	.word	0x0002f4cc

0000ea48 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    ea48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    ea4a:	4b08      	ldr	r3, [pc, #32]	; (ea6c <bt_gatt_att_max_mtu_changed+0x24>)
    ea4c:	681c      	ldr	r4, [r3, #0]
    ea4e:	4605      	mov	r5, r0
    ea50:	460e      	mov	r6, r1
    ea52:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ea54:	b14c      	cbz	r4, ea6a <bt_gatt_att_max_mtu_changed+0x22>
		if (cb->att_mtu_updated) {
    ea56:	f854 3c04 	ldr.w	r3, [r4, #-4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    ea5a:	3c04      	subs	r4, #4
		if (cb->att_mtu_updated) {
    ea5c:	b11b      	cbz	r3, ea66 <bt_gatt_att_max_mtu_changed+0x1e>
			cb->att_mtu_updated(conn, tx, rx);
    ea5e:	463a      	mov	r2, r7
    ea60:	4631      	mov	r1, r6
    ea62:	4628      	mov	r0, r5
    ea64:	4798      	blx	r3
	return node->next;
    ea66:	6864      	ldr	r4, [r4, #4]
    ea68:	e7f4      	b.n	ea54 <bt_gatt_att_max_mtu_changed+0xc>
		}
	}
}
    ea6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ea6c:	20002324 	.word	0x20002324

0000ea70 <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    ea70:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ea72:	4a06      	ldr	r2, [pc, #24]	; (ea8c <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    ea74:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ea76:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    ea78:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ea7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    ea7e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ea82:	f01d f8e1 	bl	2bc48 <bt_gatt_foreach_attr>
}
    ea86:	b003      	add	sp, #12
    ea88:	f85d fb04 	ldr.w	pc, [sp], #4
    ea8c:	0000dee1 	.word	0x0000dee1

0000ea90 <db_hash_read>:
{
    ea90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    ea94:	490f      	ldr	r1, [pc, #60]	; (ead4 <db_hash_read+0x44>)
{
    ea96:	f8bd 7018 	ldrh.w	r7, [sp, #24]
    ea9a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    ea9c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    eaa0:	461d      	mov	r5, r3
    eaa2:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    eaa4:	f01f fa21 	bl	2deea <k_work_cancel_delayable_sync>
    eaa8:	480b      	ldr	r0, [pc, #44]	; (ead8 <db_hash_read+0x48>)
    eaaa:	f01c fd62 	bl	2b572 <atomic_get>
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    eaae:	0743      	lsls	r3, r0, #29
    eab0:	d401      	bmi.n	eab6 <db_hash_read+0x26>
		db_hash_gen(true);
    eab2:	f7fe ffc5 	bl	da40 <db_hash_gen.constprop.0>
	(void)bt_gatt_change_aware(conn, true);
    eab6:	2101      	movs	r1, #1
    eab8:	4630      	mov	r0, r6
    eaba:	f01d fa19 	bl	2bef0 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    eabe:	2310      	movs	r3, #16
    eac0:	9306      	str	r3, [sp, #24]
    eac2:	463a      	mov	r2, r7
    eac4:	4629      	mov	r1, r5
    eac6:	4620      	mov	r0, r4
    eac8:	4b04      	ldr	r3, [pc, #16]	; (eadc <db_hash_read+0x4c>)
}
    eaca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    eace:	f01c bee7 	b.w	2b8a0 <bt_gatt_attr_read.constprop.0>
    ead2:	bf00      	nop
    ead4:	20001910 	.word	0x20001910
    ead8:	20001988 	.word	0x20001988
    eadc:	200018d0 	.word	0x200018d0

0000eae0 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    eae0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    eae4:	4a30      	ldr	r2, [pc, #192]	; (eba8 <bt_gatt_disconnected+0xc8>)
    eae6:	4603      	mov	r3, r0
{
    eae8:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    eaea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    eaee:	2001      	movs	r0, #1
    eaf0:	f01d f8aa 	bl	2bc48 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
    eaf4:	4620      	mov	r0, r4
    eaf6:	f7fe fd07 	bl	d508 <gatt_sub_find>
	if (!sub) {
    eafa:	4607      	mov	r7, r0
    eafc:	b378      	cbz	r0, eb5e <bt_gatt_disconnected+0x7e>
	return list->head;
    eafe:	6885      	ldr	r5, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    eb00:	b36d      	cbz	r5, eb5e <bt_gatt_disconnected+0x7e>
	return node->next;
    eb02:	f855 6914 	ldr.w	r6, [r5], #-20
    eb06:	b106      	cbz	r6, eb0a <bt_gatt_disconnected+0x2a>
    eb08:	3e14      	subs	r6, #20
{
    eb0a:	f04f 0800 	mov.w	r8, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    eb0e:	f104 0988 	add.w	r9, r4, #136	; 0x88
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    eb12:	f107 0a01 	add.w	sl, r7, #1
			params->value = 0U;
    eb16:	46c3      	mov	fp, r8
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    eb18:	7a20      	ldrb	r0, [r4, #8]
    eb1a:	4649      	mov	r1, r9
    eb1c:	f01b fbc2 	bl	2a2a4 <bt_addr_le_is_bonded>
    eb20:	b970      	cbnz	r0, eb40 <bt_gatt_disconnected+0x60>
			params->value = 0U;
    eb22:	f8a5 b00c 	strh.w	fp, [r5, #12]
			gatt_sub_remove(conn, sub, prev, params);
    eb26:	462b      	mov	r3, r5
    eb28:	4642      	mov	r2, r8
    eb2a:	4639      	mov	r1, r7
    eb2c:	4620      	mov	r0, r4
    eb2e:	f01c fe93 	bl	2b858 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
    eb32:	b1a6      	cbz	r6, eb5e <bt_gatt_disconnected+0x7e>
    eb34:	6973      	ldr	r3, [r6, #20]
    eb36:	b103      	cbz	r3, eb3a <bt_gatt_disconnected+0x5a>
    eb38:	3b14      	subs	r3, #20
{
    eb3a:	4635      	mov	r5, r6
    eb3c:	461e      	mov	r6, r3
    eb3e:	e7eb      	b.n	eb18 <bt_gatt_disconnected+0x38>
    eb40:	f105 0010 	add.w	r0, r5, #16
    eb44:	f01c fd15 	bl	2b572 <atomic_get>
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
    eb48:	07c3      	lsls	r3, r0, #31
    eb4a:	d4ea      	bmi.n	eb22 <bt_gatt_disconnected+0x42>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
    eb4c:	787b      	ldrb	r3, [r7, #1]
    eb4e:	b11b      	cbz	r3, eb58 <bt_gatt_disconnected+0x78>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
    eb50:	4649      	mov	r1, r9
    eb52:	4650      	mov	r0, sl
    eb54:	f01c fe6d 	bl	2b832 <bt_addr_le_copy>
			prev = &params->node;
    eb58:	f105 0814 	add.w	r8, r5, #20
    eb5c:	e7e9      	b.n	eb32 <bt_gatt_disconnected+0x52>
	cfg = find_cf_cfg(conn);
    eb5e:	4620      	mov	r0, r4
    eb60:	f7fe fc84 	bl	d46c <find_cf_cfg>
	if (!cfg) {
    eb64:	4605      	mov	r5, r0
    eb66:	b1e0      	cbz	r0, eba2 <bt_gatt_disconnected+0xc2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    eb68:	f104 0688 	add.w	r6, r4, #136	; 0x88
    eb6c:	7a20      	ldrb	r0, [r4, #8]
    eb6e:	4631      	mov	r1, r6
    eb70:	f01b fb98 	bl	2a2a4 <bt_addr_le_is_bonded>
    eb74:	b920      	cbnz	r0, eb80 <bt_gatt_disconnected+0xa0>
		clear_cf_cfg(cfg);
    eb76:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    eb78:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
    eb7c:	f01c bf44 	b.w	2ba08 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    eb80:	1c68      	adds	r0, r5, #1
    eb82:	4631      	mov	r1, r6
    eb84:	350c      	adds	r5, #12
    eb86:	f01c fe54 	bl	2b832 <bt_addr_le_copy>
    eb8a:	f3bf 8f5b 	dmb	ish
    eb8e:	e855 3f00 	ldrex	r3, [r5]
    eb92:	f023 0302 	bic.w	r3, r3, #2
    eb96:	e845 3200 	strex	r2, r3, [r5]
    eb9a:	2a00      	cmp	r2, #0
    eb9c:	d1f7      	bne.n	eb8e <bt_gatt_disconnected+0xae>
    eb9e:	f3bf 8f5b 	dmb	ish
}
    eba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eba6:	bf00      	nop
    eba8:	0000d7c9 	.word	0x0000d7c9

0000ebac <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    ebac:	4b10      	ldr	r3, [pc, #64]	; (ebf0 <get_io_capa+0x44>)
    ebae:	681b      	ldr	r3, [r3, #0]
    ebb0:	b1bb      	cbz	r3, ebe2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    ebb2:	681a      	ldr	r2, [r3, #0]
    ebb4:	b142      	cbz	r2, ebc8 <get_io_capa+0x1c>
    ebb6:	6859      	ldr	r1, [r3, #4]
    ebb8:	b131      	cbz	r1, ebc8 <get_io_capa+0x1c>
    ebba:	6899      	ldr	r1, [r3, #8]
    ebbc:	b911      	cbnz	r1, ebc4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    ebbe:	490d      	ldr	r1, [pc, #52]	; (ebf4 <get_io_capa+0x48>)
    ebc0:	7809      	ldrb	r1, [r1, #0]
    ebc2:	b939      	cbnz	r1, ebd4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    ebc4:	2004      	movs	r0, #4
    ebc6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    ebc8:	490a      	ldr	r1, [pc, #40]	; (ebf4 <get_io_capa+0x48>)
    ebca:	7809      	ldrb	r1, [r1, #0]
    ebcc:	b111      	cbz	r1, ebd4 <get_io_capa+0x28>
    ebce:	b10a      	cbz	r2, ebd4 <get_io_capa+0x28>
    ebd0:	6899      	ldr	r1, [r3, #8]
    ebd2:	b941      	cbnz	r1, ebe6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    ebd4:	685b      	ldr	r3, [r3, #4]
    ebd6:	b943      	cbnz	r3, ebea <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    ebd8:	2a00      	cmp	r2, #0
    ebda:	bf0c      	ite	eq
    ebdc:	2003      	moveq	r0, #3
    ebde:	2000      	movne	r0, #0
    ebe0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    ebe2:	2003      	movs	r0, #3
    ebe4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    ebe6:	2001      	movs	r0, #1
    ebe8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    ebea:	2002      	movs	r0, #2
	}
}
    ebec:	4770      	bx	lr
    ebee:	bf00      	nop
    ebf0:	200022d0 	.word	0x200022d0
    ebf4:	20003af5 	.word	0x20003af5

0000ebf8 <smp_g2>:
	return 0;
}

static int smp_g2(const uint8_t u[32], const uint8_t v[32],
		  const uint8_t x[16], const uint8_t y[16], uint32_t *passkey)
{
    ebf8:	b570      	push	{r4, r5, r6, lr}
    ebfa:	b098      	sub	sp, #96	; 0x60
    ebfc:	460e      	mov	r6, r1
    ebfe:	4614      	mov	r4, r2
	BT_DBG("u %s", bt_hex(u, 32));
	BT_DBG("v %s", bt_hex(v, 32));
	BT_DBG("x %s", bt_hex(x, 16));
	BT_DBG("y %s", bt_hex(y, 16));

	sys_memcpy_swap(m, u, 32);
    ec00:	4601      	mov	r1, r0
    ec02:	2220      	movs	r2, #32
    ec04:	a804      	add	r0, sp, #16
{
    ec06:	461d      	mov	r5, r3
	sys_memcpy_swap(m, u, 32);
    ec08:	f01d f9a0 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    ec0c:	2220      	movs	r2, #32
    ec0e:	4631      	mov	r1, r6
    ec10:	a80c      	add	r0, sp, #48	; 0x30
    ec12:	f01d f99b 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    ec16:	2210      	movs	r2, #16
    ec18:	4629      	mov	r1, r5
    ec1a:	a814      	add	r0, sp, #80	; 0x50
    ec1c:	f01d f996 	bl	2bf4c <sys_memcpy_swap>

	sys_memcpy_swap(xs, x, 16);
    ec20:	2210      	movs	r2, #16
    ec22:	4621      	mov	r1, r4
    ec24:	4668      	mov	r0, sp
    ec26:	f01d f991 	bl	2bf4c <sys_memcpy_swap>

	/* reuse xs (key) as buffer for result */
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    ec2a:	466b      	mov	r3, sp
    ec2c:	2250      	movs	r2, #80	; 0x50
    ec2e:	a904      	add	r1, sp, #16
    ec30:	4618      	mov	r0, r3
    ec32:	f01d f9da 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
    ec36:	b940      	cbnz	r0, ec4a <smp_g2+0x52>
    ec38:	9b03      	ldr	r3, [sp, #12]
		return err;
	}
	BT_DBG("res %s", bt_hex(xs, 16));

	memcpy(passkey, xs + 12, 4);
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ec3a:	4a05      	ldr	r2, [pc, #20]	; (ec50 <smp_g2+0x58>)
    ec3c:	ba1b      	rev	r3, r3
    ec3e:	fbb3 f1f2 	udiv	r1, r3, r2
    ec42:	fb02 3311 	mls	r3, r2, r1, r3
    ec46:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ec48:	6013      	str	r3, [r2, #0]

	BT_DBG("passkey %u", *passkey);

	return 0;
}
    ec4a:	b018      	add	sp, #96	; 0x60
    ec4c:	bd70      	pop	{r4, r5, r6, pc}
    ec4e:	bf00      	nop
    ec50:	000f4240 	.word	0x000f4240

0000ec54 <get_auth.constprop.0>:
	oobd_present = enable;
}

static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
{
	if (sc_supported) {
    ec54:	4b0c      	ldr	r3, [pc, #48]	; (ec88 <get_auth.constprop.0+0x34>)
    ec56:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    ec58:	b510      	push	{r4, lr}
	if (sc_supported) {
    ec5a:	b17b      	cbz	r3, ec7c <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    ec5c:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec60:	f7ff ffa4 	bl	ebac <get_io_capa>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
	}

	if (bondable) {
    ec64:	4b09      	ldr	r3, [pc, #36]	; (ec8c <get_auth.constprop.0+0x38>)
    ec66:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    ec68:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    ec6a:	bf0c      	ite	eq
    ec6c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    ec70:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    ec74:	b12b      	cbz	r3, ec82 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    ec76:	f044 0001 	orr.w	r0, r4, #1
	} else {
		auth &= ~BT_SMP_AUTH_BONDING;
	}

	return auth;
}
    ec7a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    ec7c:	f000 0407 	and.w	r4, r0, #7
    ec80:	e7ee      	b.n	ec60 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    ec82:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    ec86:	e7f8      	b.n	ec7a <get_auth.constprop.0+0x26>
    ec88:	20003af5 	.word	0x20003af5
    ec8c:	20000ae1 	.word	0x20000ae1

0000ec90 <bt_smp_accept>:
		conn->le.keys->flags &= ~BT_KEYS_SC;
	}
}

static int bt_smp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    ec90:	b500      	push	{lr}
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    ec92:	4b0e      	ldr	r3, [pc, #56]	; (eccc <bt_smp_accept+0x3c>)
{
    ec94:	4602      	mov	r2, r0
		if (smp->chan.chan.conn) {
    ec96:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
{
    ec9a:	b089      	sub	sp, #36	; 0x24
		if (smp->chan.chan.conn) {
    ec9c:	b938      	cbnz	r0, ecae <bt_smp_accept+0x1e>
			continue;
		}

		smp->chan.chan.ops = &ops;
    ec9e:	4a0c      	ldr	r2, [pc, #48]	; (ecd0 <bt_smp_accept+0x40>)
    eca0:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
    eca4:	33f0      	adds	r3, #240	; 0xf0
    eca6:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    eca8:	b009      	add	sp, #36	; 0x24
    ecaa:	f85d fb04 	ldr.w	pc, [sp], #4
	BT_ERR("No available SMP context for conn %p", conn);
    ecae:	4b09      	ldr	r3, [pc, #36]	; (ecd4 <bt_smp_accept+0x44>)
    ecb0:	4809      	ldr	r0, [pc, #36]	; (ecd8 <bt_smp_accept+0x48>)
    ecb2:	e9cd 3206 	strd	r3, r2, [sp, #24]
    ecb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ecba:	2303      	movs	r3, #3
    ecbc:	aa05      	add	r2, sp, #20
    ecbe:	9301      	str	r3, [sp, #4]
    ecc0:	9305      	str	r3, [sp, #20]
    ecc2:	f01d f9cb 	bl	2c05c <z_log_msg2_static_create.constprop.0>
	return -ENOMEM;
    ecc6:	f06f 000b 	mvn.w	r0, #11
    ecca:	e7ed      	b.n	eca8 <bt_smp_accept+0x18>
    eccc:	20001990 	.word	0x20001990
    ecd0:	0002fe78 	.word	0x0002fe78
    ecd4:	000330b6 	.word	0x000330b6
    ecd8:	0002f50c 	.word	0x0002f50c

0000ecdc <smp_chan_get>:
{
    ecdc:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ecde:	2106      	movs	r1, #6
{
    ece0:	b088      	sub	sp, #32
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ece2:	f01b ffc0 	bl	2ac66 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    ece6:	4604      	mov	r4, r0
    ece8:	b968      	cbnz	r0, ed06 <smp_chan_get+0x2a>
		BT_ERR("Unable to find SMP channel");
    ecea:	4b08      	ldr	r3, [pc, #32]	; (ed0c <smp_chan_get+0x30>)
    ecec:	9306      	str	r3, [sp, #24]
    ecee:	4808      	ldr	r0, [pc, #32]	; (ed10 <smp_chan_get+0x34>)
    ecf0:	2302      	movs	r3, #2
    ecf2:	aa05      	add	r2, sp, #20
    ecf4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ecf8:	9301      	str	r3, [sp, #4]
    ecfa:	9305      	str	r3, [sp, #20]
    ecfc:	f01d f9ae 	bl	2c05c <z_log_msg2_static_create.constprop.0>
}
    ed00:	4620      	mov	r0, r4
    ed02:	b008      	add	sp, #32
    ed04:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
    ed06:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    ed0a:	e7f9      	b.n	ed00 <smp_chan_get+0x24>
    ed0c:	000330db 	.word	0x000330db
    ed10:	0002f50c 	.word	0x0002f50c

0000ed14 <smp_f5>:
{
    ed14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ed18:	b09a      	sub	sp, #104	; 0x68
    ed1a:	461d      	mov	r5, r3
    ed1c:	e9dd 9723 	ldrd	r9, r7, [sp, #140]	; 0x8c
	uint8_t m[53] = { 0x00, /* counter */
    ed20:	4b2e      	ldr	r3, [pc, #184]	; (eddc <smp_f5+0xc8>)
{
    ed22:	4616      	mov	r6, r2
	uint8_t m[53] = { 0x00, /* counter */
    ed24:	aa0c      	add	r2, sp, #48	; 0x30
{
    ed26:	4684      	mov	ip, r0
    ed28:	468a      	mov	sl, r1
	uint8_t m[53] = { 0x00, /* counter */
    ed2a:	f103 0e30 	add.w	lr, r3, #48	; 0x30
    ed2e:	4690      	mov	r8, r2
    ed30:	6818      	ldr	r0, [r3, #0]
    ed32:	6859      	ldr	r1, [r3, #4]
    ed34:	4614      	mov	r4, r2
    ed36:	c403      	stmia	r4!, {r0, r1}
    ed38:	3308      	adds	r3, #8
    ed3a:	4573      	cmp	r3, lr
    ed3c:	4622      	mov	r2, r4
    ed3e:	d1f7      	bne.n	ed30 <smp_f5+0x1c>
    ed40:	6818      	ldr	r0, [r3, #0]
    ed42:	791b      	ldrb	r3, [r3, #4]
    ed44:	6020      	str	r0, [r4, #0]
    ed46:	7123      	strb	r3, [r4, #4]
	sys_memcpy_swap(ws, w, 32);
    ed48:	4661      	mov	r1, ip
    ed4a:	2220      	movs	r2, #32
    ed4c:	a804      	add	r0, sp, #16
    ed4e:	f01d f8fd 	bl	2bf4c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ed52:	4823      	ldr	r0, [pc, #140]	; (ede0 <smp_f5+0xcc>)
    ed54:	466b      	mov	r3, sp
    ed56:	2220      	movs	r2, #32
    ed58:	a904      	add	r1, sp, #16
    ed5a:	f01d f946 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
    ed5e:	4604      	mov	r4, r0
    ed60:	bbc0      	cbnz	r0, edd4 <smp_f5+0xc0>
	sys_memcpy_swap(m + 5, n1, 16);
    ed62:	2210      	movs	r2, #16
    ed64:	4651      	mov	r1, sl
    ed66:	f10d 0035 	add.w	r0, sp, #53	; 0x35
    ed6a:	f01d f8ef 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ed6e:	2210      	movs	r2, #16
    ed70:	4631      	mov	r1, r6
    ed72:	f10d 0045 	add.w	r0, sp, #69	; 0x45
    ed76:	f01d f8e9 	bl	2bf4c <sys_memcpy_swap>
	m[37] = a1->type;
    ed7a:	4629      	mov	r1, r5
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ed7c:	2206      	movs	r2, #6
	m[37] = a1->type;
    ed7e:	f811 3b01 	ldrb.w	r3, [r1], #1
    ed82:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ed86:	f10d 0056 	add.w	r0, sp, #86	; 0x56
    ed8a:	f01d f8df 	bl	2bf4c <sys_memcpy_swap>
	m[44] = a2->type;
    ed8e:	9922      	ldr	r1, [sp, #136]	; 0x88
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ed90:	2206      	movs	r2, #6
	m[44] = a2->type;
    ed92:	f811 3b01 	ldrb.w	r3, [r1], #1
    ed96:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ed9a:	f10d 005d 	add.w	r0, sp, #93	; 0x5d
    ed9e:	f01d f8d5 	bl	2bf4c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    eda2:	464b      	mov	r3, r9
    eda4:	2235      	movs	r2, #53	; 0x35
    eda6:	4641      	mov	r1, r8
    eda8:	4668      	mov	r0, sp
    edaa:	f01d f91e 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
    edae:	4604      	mov	r4, r0
    edb0:	b980      	cbnz	r0, edd4 <smp_f5+0xc0>
	sys_mem_swap(mackey, 16);
    edb2:	4648      	mov	r0, r9
    edb4:	f01d f964 	bl	2c080 <sys_mem_swap.constprop.0>
	m[0] = 0x01;
    edb8:	2301      	movs	r3, #1
    edba:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    edbe:	2235      	movs	r2, #53	; 0x35
    edc0:	463b      	mov	r3, r7
    edc2:	4641      	mov	r1, r8
    edc4:	4668      	mov	r0, sp
    edc6:	f01d f910 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
    edca:	4604      	mov	r4, r0
    edcc:	b910      	cbnz	r0, edd4 <smp_f5+0xc0>
	sys_mem_swap(ltk, 16);
    edce:	4638      	mov	r0, r7
    edd0:	f01d f956 	bl	2c080 <sys_mem_swap.constprop.0>
}
    edd4:	4620      	mov	r0, r4
    edd6:	b01a      	add	sp, #104	; 0x68
    edd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eddc:	0002f706 	.word	0x0002f706
    ede0:	00033469 	.word	0x00033469

0000ede4 <sc_smp_check_confirm>:
{
    ede4:	b530      	push	{r4, r5, lr}
	switch (smp->method) {
    ede6:	7a03      	ldrb	r3, [r0, #8]
{
    ede8:	b08f      	sub	sp, #60	; 0x3c
    edea:	4604      	mov	r4, r0
	switch (smp->method) {
    edec:	2b05      	cmp	r3, #5
    edee:	d821      	bhi.n	ee34 <sc_smp_check_confirm+0x50>
    edf0:	e8df f003 	tbb	[pc, r3]
    edf4:	2f03032f 	.word	0x2f03032f
    edf8:	3c20      	.short	0x3c20
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    edfa:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
    edfe:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
    ee02:	40d3      	lsrs	r3, r2
    ee04:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ee08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ee0c:	4918      	ldr	r1, [pc, #96]	; (ee70 <sc_smp_check_confirm+0x8c>)
    ee0e:	ad04      	add	r5, sp, #16
    ee10:	9500      	str	r5, [sp, #0]
    ee12:	6809      	ldr	r1, [r1, #0]
    ee14:	f104 0237 	add.w	r2, r4, #55	; 0x37
    ee18:	f104 0057 	add.w	r0, r4, #87	; 0x57
    ee1c:	f01d f98e 	bl	2c13c <smp_f4>
    ee20:	b1c8      	cbz	r0, ee56 <sc_smp_check_confirm+0x72>
		BT_ERR("Calculate confirm failed");
    ee22:	4b14      	ldr	r3, [pc, #80]	; (ee74 <sc_smp_check_confirm+0x90>)
    ee24:	930c      	str	r3, [sp, #48]	; 0x30
    ee26:	2302      	movs	r3, #2
    ee28:	9303      	str	r3, [sp, #12]
    ee2a:	930b      	str	r3, [sp, #44]	; 0x2c
    ee2c:	aa0b      	add	r2, sp, #44	; 0x2c
    ee2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    ee32:	e008      	b.n	ee46 <sc_smp_check_confirm+0x62>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ee34:	4a10      	ldr	r2, [pc, #64]	; (ee78 <sc_smp_check_confirm+0x94>)
	switch (smp->method) {
    ee36:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ee3a:	2303      	movs	r3, #3
    ee3c:	9304      	str	r3, [sp, #16]
    ee3e:	930b      	str	r3, [sp, #44]	; 0x2c
    ee40:	aa0b      	add	r2, sp, #44	; 0x2c
    ee42:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate confirm failed");
    ee46:	480d      	ldr	r0, [pc, #52]	; (ee7c <sc_smp_check_confirm+0x98>)
    ee48:	f01d f908 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    ee4c:	2008      	movs	r0, #8
}
    ee4e:	b00f      	add	sp, #60	; 0x3c
    ee50:	bd30      	pop	{r4, r5, pc}
	switch (smp->method) {
    ee52:	2300      	movs	r3, #0
    ee54:	e7da      	b.n	ee0c <sc_smp_check_confirm+0x28>
	if (memcmp(smp->pcnf, cfm, 16)) {
    ee56:	2210      	movs	r2, #16
    ee58:	4629      	mov	r1, r5
    ee5a:	f104 0017 	add.w	r0, r4, #23
    ee5e:	f01f fb72 	bl	2e546 <memcmp>
		return BT_SMP_ERR_CONFIRM_FAILED;
    ee62:	2800      	cmp	r0, #0
    ee64:	bf0c      	ite	eq
    ee66:	2000      	moveq	r0, #0
    ee68:	2004      	movne	r0, #4
    ee6a:	e7f0      	b.n	ee4e <sc_smp_check_confirm+0x6a>
	switch (smp->method) {
    ee6c:	2000      	movs	r0, #0
    ee6e:	e7ee      	b.n	ee4e <sc_smp_check_confirm+0x6a>
    ee70:	2000238c 	.word	0x2000238c
    ee74:	00033112 	.word	0x00033112
    ee78:	000330f6 	.word	0x000330f6
    ee7c:	0002f50c 	.word	0x0002f50c

0000ee80 <sec_level_reachable.isra.0>:
	switch (conn->required_sec_level) {
    ee80:	2803      	cmp	r0, #3
static bool sec_level_reachable(struct bt_conn *conn)
    ee82:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    ee84:	d00a      	beq.n	ee9c <sec_level_reachable.isra.0+0x1c>
    ee86:	d805      	bhi.n	ee94 <sec_level_reachable.isra.0+0x14>
    ee88:	3801      	subs	r0, #1
    ee8a:	2801      	cmp	r0, #1
    ee8c:	bf8c      	ite	hi
    ee8e:	2000      	movhi	r0, #0
    ee90:	2001      	movls	r0, #1
}
    ee92:	bd08      	pop	{r3, pc}
	switch (conn->required_sec_level) {
    ee94:	2804      	cmp	r0, #4
    ee96:	d010      	beq.n	eeba <sec_level_reachable.isra.0+0x3a>
    ee98:	2000      	movs	r0, #0
    ee9a:	e7fa      	b.n	ee92 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ee9c:	f7ff fe86 	bl	ebac <get_io_capa>
    eea0:	2803      	cmp	r0, #3
    eea2:	d108      	bne.n	eeb6 <sec_level_reachable.isra.0+0x36>
		       (bt_auth && bt_auth->oob_data_request);
    eea4:	4b0c      	ldr	r3, [pc, #48]	; (eed8 <sec_level_reachable.isra.0+0x58>)
    eea6:	6818      	ldr	r0, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eea8:	2800      	cmp	r0, #0
    eeaa:	d0f2      	beq.n	ee92 <sec_level_reachable.isra.0+0x12>
		       (bt_auth && bt_auth->oob_data_request);
    eeac:	68c0      	ldr	r0, [r0, #12]
    eeae:	3800      	subs	r0, #0
    eeb0:	bf18      	it	ne
    eeb2:	2001      	movne	r0, #1
    eeb4:	e7ed      	b.n	ee92 <sec_level_reachable.isra.0+0x12>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eeb6:	2001      	movs	r0, #1
    eeb8:	e7eb      	b.n	ee92 <sec_level_reachable.isra.0+0x12>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eeba:	f7ff fe77 	bl	ebac <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    eebe:	2803      	cmp	r0, #3
    eec0:	d104      	bne.n	eecc <sec_level_reachable.isra.0+0x4c>
    eec2:	4b05      	ldr	r3, [pc, #20]	; (eed8 <sec_level_reachable.isra.0+0x58>)
    eec4:	6818      	ldr	r0, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    eec6:	b118      	cbz	r0, eed0 <sec_level_reachable.isra.0+0x50>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    eec8:	68c0      	ldr	r0, [r0, #12]
    eeca:	b108      	cbz	r0, eed0 <sec_level_reachable.isra.0+0x50>
    eecc:	4b03      	ldr	r3, [pc, #12]	; (eedc <sec_level_reachable.isra.0+0x5c>)
    eece:	7818      	ldrb	r0, [r3, #0]
    eed0:	f000 0001 	and.w	r0, r0, #1
    eed4:	e7dd      	b.n	ee92 <sec_level_reachable.isra.0+0x12>
    eed6:	bf00      	nop
    eed8:	200022d0 	.word	0x200022d0
    eedc:	20003af5 	.word	0x20003af5

0000eee0 <smp_find>:
{
    eee0:	4601      	mov	r1, r0
    eee2:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    eee4:	4803      	ldr	r0, [pc, #12]	; (eef4 <smp_find+0x14>)
    eee6:	f01d f94e 	bl	2c186 <atomic_test_bit>
	return NULL;
    eeea:	2800      	cmp	r0, #0
}
    eeec:	4802      	ldr	r0, [pc, #8]	; (eef8 <smp_find+0x18>)
    eeee:	bf08      	it	eq
    eef0:	2000      	moveq	r0, #0
    eef2:	bd08      	pop	{r3, pc}
    eef4:	20001994 	.word	0x20001994
    eef8:	20001990 	.word	0x20001990

0000eefc <get_pair_method>:
{
    eefc:	b538      	push	{r3, r4, r5, lr}
    eefe:	4605      	mov	r5, r0
    ef00:	460c      	mov	r4, r1
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ef02:	3004      	adds	r0, #4
    ef04:	2105      	movs	r1, #5
    ef06:	f01d f93e 	bl	2c186 <atomic_test_bit>
    ef0a:	b9e8      	cbnz	r0, ef48 <get_pair_method+0x4c>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ef0c:	2c04      	cmp	r4, #4
    ef0e:	d81a      	bhi.n	ef46 <get_pair_method+0x4a>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ef10:	7aeb      	ldrb	r3, [r5, #11]
    ef12:	7caa      	ldrb	r2, [r5, #18]
    ef14:	4013      	ands	r3, r2
    ef16:	07d9      	lsls	r1, r3, #31
    ef18:	d42f      	bmi.n	ef7a <get_pair_method+0x7e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ef1a:	7ce8      	ldrb	r0, [r5, #19]
    ef1c:	7b2b      	ldrb	r3, [r5, #12]
    ef1e:	4303      	orrs	r3, r0
    ef20:	f013 0004 	ands.w	r0, r3, #4
    ef24:	d00f      	beq.n	ef46 <get_pair_method+0x4a>
	method = gen_method_legacy[remote_io][get_io_capa()];
    ef26:	f7ff fe41 	bl	ebac <get_io_capa>
    ef2a:	4b17      	ldr	r3, [pc, #92]	; (ef88 <get_pair_method+0x8c>)
    ef2c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ef30:	441c      	add	r4, r3
    ef32:	5c20      	ldrb	r0, [r4, r0]
	if (method == PASSKEY_ROLE) {
    ef34:	2804      	cmp	r0, #4
    ef36:	d106      	bne.n	ef46 <get_pair_method+0x4a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    ef38:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
    ef3c:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    ef3e:	2b00      	cmp	r3, #0
    ef40:	bf0c      	ite	eq
    ef42:	2002      	moveq	r0, #2
    ef44:	2001      	movne	r0, #1
}
    ef46:	bd38      	pop	{r3, r4, r5, pc}
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    ef48:	7b2b      	ldrb	r3, [r5, #12]
    ef4a:	7ce8      	ldrb	r0, [r5, #19]
    ef4c:	ea03 0200 	and.w	r2, r3, r0
    ef50:	0712      	lsls	r2, r2, #28
    ef52:	d504      	bpl.n	ef5e <get_pair_method+0x62>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ef54:	7aea      	ldrb	r2, [r5, #11]
    ef56:	7cad      	ldrb	r5, [r5, #18]
    ef58:	432a      	orrs	r2, r5
    ef5a:	07d2      	lsls	r2, r2, #31
    ef5c:	d40f      	bmi.n	ef7e <get_pair_method+0x82>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ef5e:	2c04      	cmp	r4, #4
    ef60:	d80f      	bhi.n	ef82 <get_pair_method+0x86>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ef62:	4318      	orrs	r0, r3
    ef64:	f010 0004 	ands.w	r0, r0, #4
    ef68:	d0ed      	beq.n	ef46 <get_pair_method+0x4a>
	return gen_method_sc[remote_io][get_io_capa()];
    ef6a:	f7ff fe1f 	bl	ebac <get_io_capa>
    ef6e:	4907      	ldr	r1, [pc, #28]	; (ef8c <get_pair_method+0x90>)
    ef70:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ef74:	440c      	add	r4, r1
    ef76:	5c20      	ldrb	r0, [r4, r0]
    ef78:	e7e5      	b.n	ef46 <get_pair_method+0x4a>
		return LEGACY_OOB;
    ef7a:	2006      	movs	r0, #6
    ef7c:	e7e3      	b.n	ef46 <get_pair_method+0x4a>
			return LE_SC_OOB;
    ef7e:	4608      	mov	r0, r1
    ef80:	e7e1      	b.n	ef46 <get_pair_method+0x4a>
		return JUST_WORKS;
    ef82:	2000      	movs	r0, #0
    ef84:	e7df      	b.n	ef46 <get_pair_method+0x4a>
    ef86:	bf00      	nop
    ef88:	00033437 	.word	0x00033437
    ef8c:	00033450 	.word	0x00033450

0000ef90 <display_passkey>:
{
    ef90:	b570      	push	{r4, r5, r6, lr}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    ef92:	2104      	movs	r1, #4
{
    ef94:	4604      	mov	r4, r0
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    ef96:	30d8      	adds	r0, #216	; 0xd8
    ef98:	f005 f8f2 	bl	14180 <bt_rand>
    ef9c:	4605      	mov	r5, r0
    ef9e:	b9e0      	cbnz	r0, efda <display_passkey+0x4a>
	if (bt_auth && bt_auth->passkey_display) {
    efa0:	4e0f      	ldr	r6, [pc, #60]	; (efe0 <display_passkey+0x50>)
		smp->passkey %= 1000000;
    efa2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    efa6:	4a0f      	ldr	r2, [pc, #60]	; (efe4 <display_passkey+0x54>)
	smp->passkey_round = 0U;
    efa8:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
    efac:	6830      	ldr	r0, [r6, #0]
		smp->passkey %= 1000000;
    efae:	fbb3 f1f2 	udiv	r1, r3, r2
    efb2:	fb02 3311 	mls	r3, r2, r1, r3
    efb6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
    efba:	b168      	cbz	r0, efd8 <display_passkey+0x48>
    efbc:	6800      	ldr	r0, [r0, #0]
    efbe:	b158      	cbz	r0, efd8 <display_passkey+0x48>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    efc0:	210b      	movs	r1, #11
    efc2:	1d20      	adds	r0, r4, #4
    efc4:	f01d f975 	bl	2c2b2 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    efc8:	6833      	ldr	r3, [r6, #0]
    efca:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    efd4:	4798      	blx	r3
	return 0;
    efd6:	4628      	mov	r0, r5
}
    efd8:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    efda:	2008      	movs	r0, #8
    efdc:	e7fc      	b.n	efd8 <display_passkey+0x48>
    efde:	bf00      	nop
    efe0:	200022d0 	.word	0x200022d0
    efe4:	000f4240 	.word	0x000f4240

0000efe8 <smp_init>:
{
    efe8:	b538      	push	{r3, r4, r5, lr}
__ssp_bos_icheck3(memset, void *, int)
    efea:	22f0      	movs	r2, #240	; 0xf0
    efec:	4605      	mov	r5, r0
    efee:	2100      	movs	r1, #0
    eff0:	f01f fada 	bl	2e5a8 <memset>
	if (bt_rand(smp->prnd, 16)) {
    eff4:	2110      	movs	r1, #16
    eff6:	f105 0027 	add.w	r0, r5, #39	; 0x27
    effa:	f005 f8c1 	bl	14180 <bt_rand>
    effe:	4604      	mov	r4, r0
    f000:	b948      	cbnz	r0, f016 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    f002:	2105      	movs	r1, #5
    f004:	4628      	mov	r0, r5
    f006:	f01d f954 	bl	2c2b2 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    f00a:	f7fc f87b 	bl	b104 <bt_pub_key_get>
    f00e:	4b03      	ldr	r3, [pc, #12]	; (f01c <smp_init+0x34>)
    f010:	6018      	str	r0, [r3, #0]
}
    f012:	4620      	mov	r0, r4
    f014:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f016:	2408      	movs	r4, #8
    f018:	e7fb      	b.n	f012 <smp_init+0x2a>
    f01a:	bf00      	nop
    f01c:	2000238c 	.word	0x2000238c

0000f020 <smp_dhkey_generate>:
{
    f020:	b530      	push	{r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f022:	1d05      	adds	r5, r0, #4
{
    f024:	b089      	sub	sp, #36	; 0x24
    f026:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f028:	2108      	movs	r1, #8
    f02a:	4628      	mov	r0, r5
    f02c:	f01d f941 	bl	2c2b2 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    f030:	490b      	ldr	r1, [pc, #44]	; (f060 <smp_dhkey_generate+0x40>)
    f032:	f104 0057 	add.w	r0, r4, #87	; 0x57
    f036:	f7fc f875 	bl	b124 <bt_dh_key_gen>
	if (err) {
    f03a:	b178      	cbz	r0, f05c <smp_dhkey_generate+0x3c>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    f03c:	2108      	movs	r1, #8
    f03e:	4628      	mov	r0, r5
    f040:	f01c ffae 	bl	2bfa0 <atomic_clear_bit>
		BT_ERR("Failed to generate DHKey");
    f044:	4b07      	ldr	r3, [pc, #28]	; (f064 <smp_dhkey_generate+0x44>)
    f046:	4808      	ldr	r0, [pc, #32]	; (f068 <smp_dhkey_generate+0x48>)
    f048:	9306      	str	r3, [sp, #24]
    f04a:	aa05      	add	r2, sp, #20
    f04c:	2302      	movs	r3, #2
    f04e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f052:	9301      	str	r3, [sp, #4]
    f054:	9305      	str	r3, [sp, #20]
    f056:	f01d f801 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f05a:	2008      	movs	r0, #8
}
    f05c:	b009      	add	sp, #36	; 0x24
    f05e:	bd30      	pop	{r4, r5, pc}
    f060:	0002c889 	.word	0x0002c889
    f064:	0003312b 	.word	0x0003312b
    f068:	0002f50c 	.word	0x0002f50c

0000f06c <legacy_request_tk>:
{
    f06c:	b570      	push	{r4, r5, r6, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f06e:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
    f072:	4605      	mov	r5, r0
    f074:	b088      	sub	sp, #32
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    f076:	7a20      	ldrb	r0, [r4, #8]
    f078:	f104 0188 	add.w	r1, r4, #136	; 0x88
    f07c:	f001 fe0e 	bl	10c9c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    f080:	7a2b      	ldrb	r3, [r5, #8]
    f082:	b180      	cbz	r0, f0a6 <legacy_request_tk+0x3a>
    f084:	7b42      	ldrb	r2, [r0, #13]
    f086:	07d2      	lsls	r2, r2, #31
    f088:	d50d      	bpl.n	f0a6 <legacy_request_tk+0x3a>
    f08a:	b963      	cbnz	r3, f0a6 <legacy_request_tk+0x3a>
		BT_ERR("JustWorks failed, authenticated keys present");
    f08c:	4b35      	ldr	r3, [pc, #212]	; (f164 <__kernel_ram_size+0x54>)
    f08e:	9306      	str	r3, [sp, #24]
    f090:	2302      	movs	r3, #2
    f092:	9301      	str	r3, [sp, #4]
    f094:	9305      	str	r3, [sp, #20]
    f096:	aa05      	add	r2, sp, #20
    f098:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f09c:	4832      	ldr	r0, [pc, #200]	; (f168 <__kernel_ram_size+0x58>)
    f09e:	f01c ffdd 	bl	2c05c <z_log_msg2_static_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
    f0a2:	2008      	movs	r0, #8
    f0a4:	e01d      	b.n	f0e2 <legacy_request_tk+0x76>
	switch (smp->method) {
    f0a6:	4618      	mov	r0, r3
    f0a8:	2b06      	cmp	r3, #6
    f0aa:	d84f      	bhi.n	f14c <__kernel_ram_size+0x3c>
    f0ac:	e8df f003 	tbb	[pc, r3]
    f0b0:	4e1b4419 	.word	0x4e1b4419
    f0b4:	4e4e      	.short	0x4e4e
    f0b6:	04          	.byte	0x04
    f0b7:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    f0b8:	4e2c      	ldr	r6, [pc, #176]	; (f16c <__kernel_ram_size+0x5c>)
    f0ba:	6833      	ldr	r3, [r6, #0]
    f0bc:	2b00      	cmp	r3, #0
    f0be:	d04f      	beq.n	f160 <__kernel_ram_size+0x50>
    f0c0:	68db      	ldr	r3, [r3, #12]
    f0c2:	2b00      	cmp	r3, #0
    f0c4:	d04c      	beq.n	f160 <__kernel_ram_size+0x50>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0c6:	210a      	movs	r1, #10
    f0c8:	1d28      	adds	r0, r5, #4
			struct bt_conn_oob_info info = {
    f0ca:	2400      	movs	r4, #0
    f0cc:	f8ad 4008 	strh.w	r4, [sp, #8]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f0d0:	f01d f8ef 	bl	2c2b2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f0d4:	6833      	ldr	r3, [r6, #0]
    f0d6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
    f0da:	68db      	ldr	r3, [r3, #12]
    f0dc:	a902      	add	r1, sp, #8
    f0de:	4798      	blx	r3
	return 0;
    f0e0:	2000      	movs	r0, #0
}
    f0e2:	b008      	add	sp, #32
    f0e4:	bd70      	pop	{r4, r5, r6, pc}
			if (bt_rand(&passkey, sizeof(passkey))) {
    f0e6:	2104      	movs	r1, #4
    f0e8:	a802      	add	r0, sp, #8
    f0ea:	f005 f849 	bl	14180 <bt_rand>
    f0ee:	2800      	cmp	r0, #0
    f0f0:	d1d7      	bne.n	f0a2 <legacy_request_tk+0x36>
			passkey %= 1000000;
    f0f2:	9b02      	ldr	r3, [sp, #8]
    f0f4:	4a1e      	ldr	r2, [pc, #120]	; (f170 <__kernel_ram_size+0x60>)
		if (bt_auth && bt_auth->passkey_display) {
    f0f6:	4e1d      	ldr	r6, [pc, #116]	; (f16c <__kernel_ram_size+0x5c>)
			passkey %= 1000000;
    f0f8:	fbb3 f1f2 	udiv	r1, r3, r2
    f0fc:	fb02 3311 	mls	r3, r2, r1, r3
    f100:	9302      	str	r3, [sp, #8]
		if (bt_auth && bt_auth->passkey_display) {
    f102:	6833      	ldr	r3, [r6, #0]
    f104:	b153      	cbz	r3, f11c <__kernel_ram_size+0xc>
    f106:	681b      	ldr	r3, [r3, #0]
    f108:	b143      	cbz	r3, f11c <__kernel_ram_size+0xc>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f10a:	210b      	movs	r1, #11
    f10c:	1d28      	adds	r0, r5, #4
    f10e:	f01d f8d0 	bl	2c2b2 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    f112:	6833      	ldr	r3, [r6, #0]
    f114:	9902      	ldr	r1, [sp, #8]
    f116:	681b      	ldr	r3, [r3, #0]
    f118:	4620      	mov	r0, r4
    f11a:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    f11c:	9b02      	ldr	r3, [sp, #8]
	dst[0] = val;
    f11e:	f885 3047 	strb.w	r3, [r5, #71]	; 0x47
	dst[1] = val >> 8;
    f122:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    f126:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    f128:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	dst[1] = val >> 8;
    f12c:	0a1b      	lsrs	r3, r3, #8
    f12e:	f885 2048 	strb.w	r2, [r5, #72]	; 0x48
    f132:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
    f136:	e7d3      	b.n	f0e0 <legacy_request_tk+0x74>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f138:	1d28      	adds	r0, r5, #4
    f13a:	210a      	movs	r1, #10
    f13c:	f01d f8b9 	bl	2c2b2 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    f140:	4b0a      	ldr	r3, [pc, #40]	; (f16c <__kernel_ram_size+0x5c>)
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	4620      	mov	r0, r4
    f146:	685b      	ldr	r3, [r3, #4]
    f148:	4798      	blx	r3
    f14a:	e7c9      	b.n	f0e0 <legacy_request_tk+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f14c:	4a09      	ldr	r2, [pc, #36]	; (f174 <__kernel_ram_size+0x64>)
	switch (smp->method) {
    f14e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f152:	2303      	movs	r3, #3
    f154:	9301      	str	r3, [sp, #4]
    f156:	9305      	str	r3, [sp, #20]
    f158:	aa05      	add	r2, sp, #20
    f15a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f15e:	e79d      	b.n	f09c <legacy_request_tk+0x30>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f160:	2002      	movs	r0, #2
    f162:	e7be      	b.n	f0e2 <legacy_request_tk+0x76>
    f164:	00033144 	.word	0x00033144
    f168:	0002f50c 	.word	0x0002f50c
    f16c:	200022d0 	.word	0x200022d0
    f170:	000f4240 	.word	0x000f4240
    f174:	000330f6 	.word	0x000330f6

0000f178 <smp_ident_info>:
{
    f178:	b5f0      	push	{r4, r5, r6, r7, lr}
    f17a:	460b      	mov	r3, r1
    f17c:	b085      	sub	sp, #20
    f17e:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f180:	210d      	movs	r1, #13
    f182:	3004      	adds	r0, #4
    f184:	f01c ffff 	bl	2c186 <atomic_test_bit>
    f188:	b328      	cbz	r0, f1d6 <smp_ident_info+0x5e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    f18a:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f18c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    f190:	f103 0788 	add.w	r7, r3, #136	; 0x88
    f194:	7a19      	ldrb	r1, [r3, #8]
    f196:	463a      	mov	r2, r7
    f198:	2002      	movs	r0, #2
    f19a:	f01d fc0b 	bl	2c9b4 <bt_keys_get_type>
		if (!keys) {
    f19e:	4604      	mov	r4, r0
    f1a0:	b978      	cbnz	r0, f1c2 <smp_ident_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    f1a2:	4638      	mov	r0, r7
    f1a4:	f7f9 f858 	bl	8258 <bt_addr_le_str_real>
    f1a8:	4b0e      	ldr	r3, [pc, #56]	; (f1e4 <smp_ident_info+0x6c>)
    f1aa:	9002      	str	r0, [sp, #8]
    f1ac:	e9cd 4300 	strd	r4, r3, [sp]
    f1b0:	4620      	mov	r0, r4
    f1b2:	490d      	ldr	r1, [pc, #52]	; (f1e8 <smp_ident_info+0x70>)
    f1b4:	4623      	mov	r3, r4
    f1b6:	2201      	movs	r2, #1
    f1b8:	f01c ff53 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f1bc:	2008      	movs	r0, #8
}
    f1be:	b005      	add	sp, #20
    f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f1c2:	462b      	mov	r3, r5
    f1c4:	342a      	adds	r4, #42	; 0x2a
    f1c6:	f105 0210 	add.w	r2, r5, #16
    f1ca:	f853 1b04 	ldr.w	r1, [r3], #4
    f1ce:	f844 1b04 	str.w	r1, [r4], #4
    f1d2:	4293      	cmp	r3, r2
    f1d4:	d1f9      	bne.n	f1ca <smp_ident_info+0x52>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    f1d6:	4630      	mov	r0, r6
    f1d8:	2109      	movs	r1, #9
    f1da:	f01d f86a 	bl	2c2b2 <atomic_set_bit>
	return 0;
    f1de:	2000      	movs	r0, #0
    f1e0:	e7ed      	b.n	f1be <smp_ident_info+0x46>
    f1e2:	bf00      	nop
    f1e4:	00033171 	.word	0x00033171
    f1e8:	0002f50c 	.word	0x0002f50c

0000f1ec <smp_encrypt_info>:
{
    f1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    f1ee:	460b      	mov	r3, r1
    f1f0:	b085      	sub	sp, #20
    f1f2:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f1f4:	210d      	movs	r1, #13
    f1f6:	3004      	adds	r0, #4
    f1f8:	f01c ffc5 	bl	2c186 <atomic_test_bit>
    f1fc:	b328      	cbz	r0, f24a <smp_encrypt_info+0x5e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    f1fe:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    f200:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    f204:	f103 0788 	add.w	r7, r3, #136	; 0x88
    f208:	7a19      	ldrb	r1, [r3, #8]
    f20a:	463a      	mov	r2, r7
    f20c:	2004      	movs	r0, #4
    f20e:	f01d fbd1 	bl	2c9b4 <bt_keys_get_type>
		if (!keys) {
    f212:	4604      	mov	r4, r0
    f214:	b978      	cbnz	r0, f236 <smp_encrypt_info+0x4a>
			BT_ERR("Unable to get keys for %s",
    f216:	4638      	mov	r0, r7
    f218:	f7f9 f81e 	bl	8258 <bt_addr_le_str_real>
    f21c:	4b0e      	ldr	r3, [pc, #56]	; (f258 <smp_encrypt_info+0x6c>)
    f21e:	9002      	str	r0, [sp, #8]
    f220:	e9cd 4300 	strd	r4, r3, [sp]
    f224:	4620      	mov	r0, r4
    f226:	490d      	ldr	r1, [pc, #52]	; (f25c <smp_encrypt_info+0x70>)
    f228:	4623      	mov	r3, r4
    f22a:	2201      	movs	r2, #1
    f22c:	f01c ff19 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    f230:	2008      	movs	r0, #8
}
    f232:	b005      	add	sp, #20
    f234:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f236:	462b      	mov	r3, r5
    f238:	341a      	adds	r4, #26
    f23a:	f105 0210 	add.w	r2, r5, #16
    f23e:	f853 1b04 	ldr.w	r1, [r3], #4
    f242:	f844 1b04 	str.w	r1, [r4], #4
    f246:	4293      	cmp	r3, r2
    f248:	d1f9      	bne.n	f23e <smp_encrypt_info+0x52>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_CENTRAL_IDENT);
    f24a:	4630      	mov	r0, r6
    f24c:	2107      	movs	r1, #7
    f24e:	f01d f830 	bl	2c2b2 <atomic_set_bit>
	return 0;
    f252:	2000      	movs	r0, #0
    f254:	e7ed      	b.n	f232 <smp_encrypt_info+0x46>
    f256:	bf00      	nop
    f258:	00033171 	.word	0x00033171
    f25c:	0002f50c 	.word	0x0002f50c

0000f260 <bt_smp_distribute_keys>:
{
    f260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f264:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    f266:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (!keys) {
    f26a:	f8d0 50b4 	ldr.w	r5, [r0, #180]	; 0xb4
{
    f26e:	b095      	sub	sp, #84	; 0x54
	if (!keys) {
    f270:	b985      	cbnz	r5, f294 <bt_smp_distribute_keys+0x34>
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    f272:	3088      	adds	r0, #136	; 0x88
    f274:	f7f8 fff0 	bl	8258 <bt_addr_le_str_real>
    f278:	4b44      	ldr	r3, [pc, #272]	; (f38c <bt_smp_distribute_keys+0x12c>)
    f27a:	9002      	str	r0, [sp, #8]
    f27c:	e9cd 5300 	strd	r5, r3, [sp]
    f280:	4628      	mov	r0, r5
    f282:	4943      	ldr	r1, [pc, #268]	; (f390 <bt_smp_distribute_keys+0x130>)
    f284:	462b      	mov	r3, r5
    f286:	2201      	movs	r2, #1
    f288:	f01c feeb 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f28c:	2008      	movs	r0, #8
}
    f28e:	b015      	add	sp, #84	; 0x54
    f290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f294:	1d27      	adds	r7, r4, #4
    f296:	2105      	movs	r1, #5
    f298:	4638      	mov	r0, r7
    f29a:	f01c ff74 	bl	2c186 <atomic_test_bit>
    f29e:	b9c8      	cbnz	r0, f2d4 <bt_smp_distribute_keys+0x74>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    f2a0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    f2a4:	f010 0001 	ands.w	r0, r0, #1
    f2a8:	d0f1      	beq.n	f28e <bt_smp_distribute_keys+0x2e>
	struct bt_keys *keys = conn->le.keys;
    f2aa:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f2ae:	211a      	movs	r1, #26
    f2b0:	a80d      	add	r0, sp, #52	; 0x34
	struct bt_keys *keys = conn->le.keys;
    f2b2:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    f2b6:	f004 ff63 	bl	14180 <bt_rand>
    f2ba:	4680      	mov	r8, r0
    f2bc:	b160      	cbz	r0, f2d8 <bt_smp_distribute_keys+0x78>
			BT_ERR("Unable to get random bytes");
    f2be:	4b35      	ldr	r3, [pc, #212]	; (f394 <bt_smp_distribute_keys+0x134>)
			BT_ERR("Unable to allocate Central Ident buffer");
    f2c0:	930a      	str	r3, [sp, #40]	; 0x28
    f2c2:	4833      	ldr	r0, [pc, #204]	; (f390 <bt_smp_distribute_keys+0x130>)
    f2c4:	2302      	movs	r3, #2
    f2c6:	aa09      	add	r2, sp, #36	; 0x24
    f2c8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f2cc:	9305      	str	r3, [sp, #20]
    f2ce:	9309      	str	r3, [sp, #36]	; 0x24
    f2d0:	f01c fec4 	bl	2c05c <z_log_msg2_static_create.constprop.0>
	return 0;
    f2d4:	2000      	movs	r0, #0
    f2d6:	e7da      	b.n	f28e <bt_smp_distribute_keys+0x2e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    f2d8:	2106      	movs	r1, #6
    f2da:	4620      	mov	r0, r4
    f2dc:	f01d f80e 	bl	2c2fc <smp_create_pdu.constprop.0>
		if (!buf) {
    f2e0:	4606      	mov	r6, r0
    f2e2:	b908      	cbnz	r0, f2e8 <bt_smp_distribute_keys+0x88>
			BT_ERR("Unable to allocate Encrypt Info buffer");
    f2e4:	4b2c      	ldr	r3, [pc, #176]	; (f398 <bt_smp_distribute_keys+0x138>)
    f2e6:	e7eb      	b.n	f2c0 <bt_smp_distribute_keys+0x60>
    f2e8:	2110      	movs	r1, #16
    f2ea:	3008      	adds	r0, #8
    f2ec:	f01d fbed 	bl	2caca <net_buf_simple_add>
    f2f0:	7b2a      	ldrb	r2, [r5, #12]
    f2f2:	a90d      	add	r1, sp, #52	; 0x34
    f2f4:	4681      	mov	r9, r0
    f2f6:	f01f f936 	bl	2e566 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    f2fa:	7b28      	ldrb	r0, [r5, #12]
    f2fc:	280f      	cmp	r0, #15
    f2fe:	d805      	bhi.n	f30c <bt_smp_distribute_keys+0xac>
__ssp_bos_icheck3(memset, void *, int)
    f300:	f1c0 0210 	rsb	r2, r0, #16
    f304:	4641      	mov	r1, r8
    f306:	4448      	add	r0, r9
    f308:	f01f f94e 	bl	2e5a8 <memset>
		smp_send(smp, buf, NULL, NULL);
    f30c:	4631      	mov	r1, r6
    f30e:	2200      	movs	r2, #0
    f310:	4620      	mov	r0, r4
    f312:	f01c fe86 	bl	2c022 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_CENTRAL_IDENT,
    f316:	2107      	movs	r1, #7
    f318:	4620      	mov	r0, r4
    f31a:	f01c ffef 	bl	2c2fc <smp_create_pdu.constprop.0>
		if (!buf) {
    f31e:	4606      	mov	r6, r0
    f320:	b908      	cbnz	r0, f326 <bt_smp_distribute_keys+0xc6>
			BT_ERR("Unable to allocate Central Ident buffer");
    f322:	4b1e      	ldr	r3, [pc, #120]	; (f39c <bt_smp_distribute_keys+0x13c>)
    f324:	e7cc      	b.n	f2c0 <bt_smp_distribute_keys+0x60>
    f326:	210a      	movs	r1, #10
    f328:	3008      	adds	r0, #8
    f32a:	f01d fbce 	bl	2caca <net_buf_simple_add>
    f32e:	aa11      	add	r2, sp, #68	; 0x44
    f330:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
    f332:	ca03      	ldmia	r2!, {r0, r1}
    f334:	f8c3 0002 	str.w	r0, [r3, #2]
    f338:	f8c3 1006 	str.w	r1, [r3, #6]
    f33c:	f8bd 204c 	ldrh.w	r2, [sp, #76]	; 0x4c
    f340:	801a      	strh	r2, [r3, #0]
		smp_send(smp, buf, smp_ident_sent, NULL);
    f342:	4620      	mov	r0, r4
    f344:	4631      	mov	r1, r6
    f346:	4a16      	ldr	r2, [pc, #88]	; (f3a0 <bt_smp_distribute_keys+0x140>)
    f348:	f01c fe6b 	bl	2c022 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f34c:	210d      	movs	r1, #13
    f34e:	4638      	mov	r0, r7
    f350:	f01c ff19 	bl	2c186 <atomic_test_bit>
    f354:	ac11      	add	r4, sp, #68	; 0x44
    f356:	2800      	cmp	r0, #0
    f358:	d0bc      	beq.n	f2d4 <bt_smp_distribute_keys+0x74>
			bt_keys_add_type(keys, BT_KEYS_PERIPH_LTK);
    f35a:	2101      	movs	r1, #1
    f35c:	4628      	mov	r0, r5
    f35e:	f01d fb39 	bl	2c9d4 <bt_keys_add_type>
    f362:	f105 064a 	add.w	r6, r5, #74	; 0x4a
    f366:	ab0d      	add	r3, sp, #52	; 0x34
    f368:	461a      	mov	r2, r3
    f36a:	ca03      	ldmia	r2!, {r0, r1}
    f36c:	42a2      	cmp	r2, r4
    f36e:	6030      	str	r0, [r6, #0]
    f370:	6071      	str	r1, [r6, #4]
    f372:	4613      	mov	r3, r2
    f374:	f106 0608 	add.w	r6, r6, #8
    f378:	d1f6      	bne.n	f368 <bt_smp_distribute_keys+0x108>
    f37a:	4623      	mov	r3, r4
    f37c:	cb03      	ldmia	r3!, {r0, r1}
    f37e:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
    f382:	6428      	str	r0, [r5, #64]	; 0x40
    f384:	6469      	str	r1, [r5, #68]	; 0x44
    f386:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
    f38a:	e7a3      	b.n	f2d4 <bt_smp_distribute_keys+0x74>
    f38c:	0003318b 	.word	0x0003318b
    f390:	0002f50c 	.word	0x0002f50c
    f394:	000331a0 	.word	0x000331a0
    f398:	000331bb 	.word	0x000331bb
    f39c:	000331e2 	.word	0x000331e2
    f3a0:	0002c989 	.word	0x0002c989

0000f3a4 <smp_send_pairing_req>:
{
    f3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f3a8:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    f3aa:	f7ff fc97 	bl	ecdc <smp_chan_get>
	if (!smp) {
    f3ae:	4606      	mov	r6, r0
    f3b0:	2800      	cmp	r0, #0
    f3b2:	d071      	beq.n	f498 <smp_send_pairing_req+0xf4>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f3b4:	1d07      	adds	r7, r0, #4
    f3b6:	2104      	movs	r1, #4
    f3b8:	4638      	mov	r0, r7
    f3ba:	f01c fee4 	bl	2c186 <atomic_test_bit>
    f3be:	4604      	mov	r4, r0
    f3c0:	2800      	cmp	r0, #0
    f3c2:	d16c      	bne.n	f49e <smp_send_pairing_req+0xfa>
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f3c4:	2102      	movs	r1, #2
    f3c6:	4638      	mov	r0, r7
    f3c8:	f01c fedd 	bl	2c186 <atomic_test_bit>
    f3cc:	b930      	cbnz	r0, f3dc <smp_send_pairing_req+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f3ce:	2103      	movs	r1, #3
    f3d0:	4638      	mov	r0, r7
    f3d2:	f01c fed8 	bl	2c186 <atomic_test_bit>
    f3d6:	b120      	cbz	r0, f3e2 <smp_send_pairing_req+0x3e>
		return -EBUSY;
    f3d8:	f06f 040f 	mvn.w	r4, #15
}
    f3dc:	4620      	mov	r0, r4
    f3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f3e2:	2101      	movs	r1, #1
    f3e4:	4638      	mov	r0, r7
    f3e6:	f01c fece 	bl	2c186 <atomic_test_bit>
    f3ea:	2800      	cmp	r0, #0
    f3ec:	d1f4      	bne.n	f3d8 <smp_send_pairing_req+0x34>
	if (!sec_level_reachable(conn)) {
    f3ee:	7aa8      	ldrb	r0, [r5, #10]
    f3f0:	f7ff fd46 	bl	ee80 <sec_level_reachable.isra.0>
    f3f4:	2800      	cmp	r0, #0
    f3f6:	d055      	beq.n	f4a4 <smp_send_pairing_req+0x100>
	if (!conn->le.keys) {
    f3f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f3fc:	b13b      	cbz	r3, f40e <smp_send_pairing_req+0x6a>
	if (smp_init(smp)) {
    f3fe:	4630      	mov	r0, r6
    f400:	f7ff fdf2 	bl	efe8 <smp_init>
    f404:	4604      	mov	r4, r0
    f406:	b170      	cbz	r0, f426 <smp_send_pairing_req+0x82>
		return -ENOBUFS;
    f408:	f06f 0468 	mvn.w	r4, #104	; 0x68
    f40c:	e7e6      	b.n	f3dc <smp_send_pairing_req+0x38>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f40e:	7a28      	ldrb	r0, [r5, #8]
    f410:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f414:	f001 fbb4 	bl	10b80 <bt_keys_get_addr>
    f418:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f41c:	2800      	cmp	r0, #0
    f41e:	d1ee      	bne.n	f3fe <smp_send_pairing_req+0x5a>
			return -ENOMEM;
    f420:	f06f 040b 	mvn.w	r4, #11
    f424:	e7da      	b.n	f3dc <smp_send_pairing_req+0x38>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    f426:	2101      	movs	r1, #1
    f428:	4630      	mov	r0, r6
    f42a:	f01c ff67 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f42e:	4680      	mov	r8, r0
    f430:	2800      	cmp	r0, #0
    f432:	d0e9      	beq.n	f408 <smp_send_pairing_req+0x64>
    f434:	2106      	movs	r1, #6
    f436:	3008      	adds	r0, #8
    f438:	f01d fb47 	bl	2caca <net_buf_simple_add>
    f43c:	4605      	mov	r5, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f43e:	2009      	movs	r0, #9
    f440:	f7ff fc08 	bl	ec54 <get_auth.constprop.0>
    f444:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    f446:	f7ff fbb1 	bl	ebac <get_io_capa>
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f44a:	4b18      	ldr	r3, [pc, #96]	; (f4ac <smp_send_pairing_req+0x108>)
	req->io_capability = get_io_capa();
    f44c:	7028      	strb	r0, [r5, #0]
	req->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f44e:	781b      	ldrb	r3, [r3, #0]
    f450:	706b      	strb	r3, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f452:	2310      	movs	r3, #16
    f454:	70eb      	strb	r3, [r5, #3]
	req->resp_key_dist = RECV_KEYS;
    f456:	f04f 0903 	mov.w	r9, #3
	req->init_key_dist = SEND_KEYS;
    f45a:	2301      	movs	r3, #1
	smp->local_dist = SEND_KEYS;
    f45c:	f240 3201 	movw	r2, #769	; 0x301
	req->init_key_dist = SEND_KEYS;
    f460:	712b      	strb	r3, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    f462:	f885 9005 	strb.w	r9, [r5, #5]
	smp->local_dist = SEND_KEYS;
    f466:	f8a6 20e8 	strh.w	r2, [r6, #232]	; 0xe8
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f46a:	7273      	strb	r3, [r6, #9]
    f46c:	682b      	ldr	r3, [r5, #0]
    f46e:	f8c6 300a 	str.w	r3, [r6, #10]
    f472:	88ab      	ldrh	r3, [r5, #4]
    f474:	81f3      	strh	r3, [r6, #14]
	smp_send(smp, req_buf, NULL, NULL);
    f476:	4622      	mov	r2, r4
    f478:	4641      	mov	r1, r8
    f47a:	4630      	mov	r0, r6
    f47c:	f01c fdd1 	bl	2c022 <smp_send.constprop.0>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    f480:	4630      	mov	r0, r6
    f482:	2102      	movs	r1, #2
    f484:	f01c ff15 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    f488:	210b      	movs	r1, #11
    f48a:	f01c ff12 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f48e:	4649      	mov	r1, r9
    f490:	4638      	mov	r0, r7
    f492:	f01c ff0e 	bl	2c2b2 <atomic_set_bit>
	return 0;
    f496:	e7a1      	b.n	f3dc <smp_send_pairing_req+0x38>
		return -ENOTCONN;
    f498:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    f49c:	e79e      	b.n	f3dc <smp_send_pairing_req+0x38>
		return -EIO;
    f49e:	f06f 0404 	mvn.w	r4, #4
    f4a2:	e79b      	b.n	f3dc <smp_send_pairing_req+0x38>
		return -EINVAL;
    f4a4:	f06f 0415 	mvn.w	r4, #21
    f4a8:	e798      	b.n	f3dc <smp_send_pairing_req+0x38>
    f4aa:	bf00      	nop
    f4ac:	20003af4 	.word	0x20003af4

0000f4b0 <smp_security_request>:
{
    f4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f4b2:	1d04      	adds	r4, r0, #4
	struct bt_conn *conn = smp->chan.chan.conn;
    f4b4:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
	struct bt_smp_security_request *req = (void *)buf->data;
    f4b8:	688b      	ldr	r3, [r1, #8]
{
    f4ba:	b08b      	sub	sp, #44	; 0x2c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f4bc:	2102      	movs	r1, #2
    f4be:	4620      	mov	r0, r4
    f4c0:	f01c fe61 	bl	2c186 <atomic_test_bit>
    f4c4:	b110      	cbz	r0, f4cc <smp_security_request+0x1c>
	return 0;
    f4c6:	2000      	movs	r0, #0
}
    f4c8:	b00b      	add	sp, #44	; 0x2c
    f4ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f4cc:	2103      	movs	r1, #3
    f4ce:	4620      	mov	r0, r4
    f4d0:	f01c fe59 	bl	2c186 <atomic_test_bit>
    f4d4:	2800      	cmp	r0, #0
    f4d6:	d1f6      	bne.n	f4c6 <smp_security_request+0x16>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f4d8:	2101      	movs	r1, #1
    f4da:	4620      	mov	r0, r4
    f4dc:	f01c fe53 	bl	2c186 <atomic_test_bit>
    f4e0:	2800      	cmp	r0, #0
    f4e2:	d1f0      	bne.n	f4c6 <smp_security_request+0x16>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    f4e4:	781e      	ldrb	r6, [r3, #0]
	if (sc_supported) {
    f4e6:	4b36      	ldr	r3, [pc, #216]	; (f5c0 <smp_security_request+0x110>)
    f4e8:	781b      	ldrb	r3, [r3, #0]
    f4ea:	b17b      	cbz	r3, f50c <smp_security_request+0x5c>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    f4ec:	f006 060f 	and.w	r6, r6, #15
	if (conn->le.keys) {
    f4f0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f4f4:	b16b      	cbz	r3, f512 <smp_security_request+0x62>
		if (!(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    f4f6:	89db      	ldrh	r3, [r3, #14]
    f4f8:	f003 0324 	and.w	r3, r3, #36	; 0x24
    f4fc:	b9d3      	cbnz	r3, f534 <smp_security_request+0x84>
	if (smp_send_pairing_req(conn) < 0) {
    f4fe:	4628      	mov	r0, r5
    f500:	f7ff ff50 	bl	f3a4 <smp_send_pairing_req>
    f504:	2800      	cmp	r0, #0
    f506:	db54      	blt.n	f5b2 <smp_security_request+0x102>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f508:	210f      	movs	r1, #15
    f50a:	e055      	b.n	f5b8 <smp_security_request+0x108>
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    f50c:	f006 0607 	and.w	r6, r6, #7
    f510:	e7ee      	b.n	f4f0 <smp_security_request+0x40>
					     &conn->le.dst);
    f512:	f105 0788 	add.w	r7, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
    f516:	7a29      	ldrb	r1, [r5, #8]
    f518:	463a      	mov	r2, r7
    f51a:	2020      	movs	r0, #32
    f51c:	f001 fb6e 	bl	10bfc <bt_keys_find>
    f520:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f524:	b930      	cbnz	r0, f534 <smp_security_request+0x84>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK, conn->id,
    f526:	7a29      	ldrb	r1, [r5, #8]
    f528:	463a      	mov	r2, r7
    f52a:	2004      	movs	r0, #4
    f52c:	f001 fb66 	bl	10bfc <bt_keys_find>
    f530:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys) {
    f534:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    f538:	2900      	cmp	r1, #0
    f53a:	d0e0      	beq.n	f4fe <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_MITM) &&
    f53c:	0777      	lsls	r7, r6, #29
    f53e:	d51c      	bpl.n	f57a <smp_security_request+0xca>
    f540:	7b4b      	ldrb	r3, [r1, #13]
    f542:	07d8      	lsls	r0, r3, #31
    f544:	d419      	bmi.n	f57a <smp_security_request+0xca>
		if (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT) {
    f546:	f7ff fb31 	bl	ebac <get_io_capa>
    f54a:	2803      	cmp	r0, #3
    f54c:	d009      	beq.n	f562 <smp_security_request+0xb2>
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    f54e:	4b1d      	ldr	r3, [pc, #116]	; (f5c4 <smp_security_request+0x114>)
    f550:	e9cd 3608 	strd	r3, r6, [sp, #32]
    f554:	2303      	movs	r3, #3
    f556:	9303      	str	r3, [sp, #12]
    f558:	9307      	str	r3, [sp, #28]
    f55a:	aa07      	add	r2, sp, #28
    f55c:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    f560:	e007      	b.n	f572 <smp_security_request+0xc2>
		BT_WARN("Unsupported auth requirements: 0x%x, repairing",
    f562:	4b19      	ldr	r3, [pc, #100]	; (f5c8 <smp_security_request+0x118>)
    f564:	9003      	str	r0, [sp, #12]
    f566:	e9cd 3608 	strd	r3, r6, [sp, #32]
    f56a:	9007      	str	r0, [sp, #28]
    f56c:	aa07      	add	r2, sp, #28
    f56e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
		BT_INFO("New auth requirements: 0x%x, repairing", auth);
    f572:	4816      	ldr	r0, [pc, #88]	; (f5cc <smp_security_request+0x11c>)
    f574:	f01c fd72 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		goto pair;
    f578:	e7c1      	b.n	f4fe <smp_security_request+0x4e>
	if ((auth & BT_SMP_AUTH_SC) &&
    f57a:	0732      	lsls	r2, r6, #28
    f57c:	d502      	bpl.n	f584 <smp_security_request+0xd4>
    f57e:	89cb      	ldrh	r3, [r1, #14]
    f580:	069b      	lsls	r3, r3, #26
    f582:	d5e4      	bpl.n	f54e <smp_security_request+0x9e>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    f584:	7b0b      	ldrb	r3, [r1, #12]
    f586:	9300      	str	r3, [sp, #0]
    f588:	f101 0218 	add.w	r2, r1, #24
    f58c:	f101 031a 	add.w	r3, r1, #26
    f590:	4628      	mov	r0, r5
    f592:	3110      	adds	r1, #16
    f594:	f01b f99d 	bl	2a8d2 <bt_conn_le_start_encryption>
    f598:	2800      	cmp	r0, #0
    f59a:	da0c      	bge.n	f5b6 <smp_security_request+0x106>
		BT_ERR("Failed to start encryption");
    f59c:	4b0c      	ldr	r3, [pc, #48]	; (f5d0 <smp_security_request+0x120>)
    f59e:	9308      	str	r3, [sp, #32]
    f5a0:	480a      	ldr	r0, [pc, #40]	; (f5cc <smp_security_request+0x11c>)
    f5a2:	2302      	movs	r3, #2
    f5a4:	aa07      	add	r2, sp, #28
    f5a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    f5aa:	9303      	str	r3, [sp, #12]
    f5ac:	9307      	str	r3, [sp, #28]
    f5ae:	f01c fd55 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f5b2:	2008      	movs	r0, #8
    f5b4:	e788      	b.n	f4c8 <smp_security_request+0x18>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f5b6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f5b8:	4620      	mov	r0, r4
    f5ba:	f01c fe7a 	bl	2c2b2 <atomic_set_bit>
    f5be:	e782      	b.n	f4c6 <smp_security_request+0x16>
    f5c0:	20003af5 	.word	0x20003af5
    f5c4:	0003320a 	.word	0x0003320a
    f5c8:	00033231 	.word	0x00033231
    f5cc:	0002f50c 	.word	0x0002f50c
    f5d0:	00033260 	.word	0x00033260

0000f5d4 <smp_send_pairing_confirm>:
{
    f5d4:	b570      	push	{r4, r5, r6, lr}
	switch (smp->method) {
    f5d6:	7a04      	ldrb	r4, [r0, #8]
    f5d8:	2c02      	cmp	r4, #2
{
    f5da:	b08a      	sub	sp, #40	; 0x28
    f5dc:	4605      	mov	r5, r0
	switch (smp->method) {
    f5de:	d823      	bhi.n	f628 <smp_send_pairing_confirm+0x54>
    f5e0:	b144      	cbz	r4, f5f4 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f5e2:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
    f5e6:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
    f5ea:	40dc      	lsrs	r4, r3
    f5ec:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    f5f0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    f5f4:	2103      	movs	r1, #3
    f5f6:	4628      	mov	r0, r5
    f5f8:	f01c fe80 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!buf) {
    f5fc:	4606      	mov	r6, r0
    f5fe:	b308      	cbz	r0, f644 <smp_send_pairing_confirm+0x70>
    f600:	2110      	movs	r1, #16
    f602:	3008      	adds	r0, #8
    f604:	f01d fa61 	bl	2caca <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f608:	9000      	str	r0, [sp, #0]
    f60a:	4816      	ldr	r0, [pc, #88]	; (f664 <smp_send_pairing_confirm+0x90>)
    f60c:	4623      	mov	r3, r4
    f60e:	6800      	ldr	r0, [r0, #0]
    f610:	f105 0227 	add.w	r2, r5, #39	; 0x27
    f614:	f105 0157 	add.w	r1, r5, #87	; 0x57
    f618:	f01c fd90 	bl	2c13c <smp_f4>
    f61c:	4604      	mov	r4, r0
    f61e:	b1a8      	cbz	r0, f64c <smp_send_pairing_confirm+0x78>
		net_buf_unref(buf);
    f620:	4630      	mov	r0, r6
    f622:	f011 fa05 	bl	20a30 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f626:	e00d      	b.n	f644 <smp_send_pairing_confirm+0x70>
	switch (smp->method) {
    f628:	2c03      	cmp	r4, #3
    f62a:	d00d      	beq.n	f648 <smp_send_pairing_confirm+0x74>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f62c:	4b0e      	ldr	r3, [pc, #56]	; (f668 <smp_send_pairing_confirm+0x94>)
    f62e:	480f      	ldr	r0, [pc, #60]	; (f66c <smp_send_pairing_confirm+0x98>)
	switch (smp->method) {
    f630:	e9cd 3408 	strd	r3, r4, [sp, #32]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f634:	aa07      	add	r2, sp, #28
    f636:	2303      	movs	r3, #3
    f638:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f63c:	9303      	str	r3, [sp, #12]
    f63e:	9307      	str	r3, [sp, #28]
    f640:	f01c fd0c 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f644:	2008      	movs	r0, #8
    f646:	e00b      	b.n	f660 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    f648:	2400      	movs	r4, #0
    f64a:	e7d3      	b.n	f5f4 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    f64c:	4602      	mov	r2, r0
    f64e:	4631      	mov	r1, r6
    f650:	4628      	mov	r0, r5
    f652:	f01c fce6 	bl	2c022 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f656:	1d28      	adds	r0, r5, #4
    f658:	4621      	mov	r1, r4
    f65a:	f01c fca1 	bl	2bfa0 <atomic_clear_bit>
	return 0;
    f65e:	4620      	mov	r0, r4
}
    f660:	b00a      	add	sp, #40	; 0x28
    f662:	bd70      	pop	{r4, r5, r6, pc}
    f664:	2000238c 	.word	0x2000238c
    f668:	000330f6 	.word	0x000330f6
    f66c:	0002f50c 	.word	0x0002f50c

0000f670 <smp_pairing_req>:
{
    f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    f674:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f676:	78fb      	ldrb	r3, [r7, #3]
    f678:	3b07      	subs	r3, #7
    f67a:	2b09      	cmp	r3, #9
{
    f67c:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    f67e:	f200 80bf 	bhi.w	f800 <smp_pairing_req+0x190>
	struct bt_conn *conn = smp->chan.chan.conn;
    f682:	f8d0 80f0 	ldr.w	r8, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
    f686:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    f68a:	b16b      	cbz	r3, f6a8 <smp_pairing_req+0x38>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    f68c:	1d26      	adds	r6, r4, #4
    f68e:	210f      	movs	r1, #15
    f690:	4630      	mov	r0, r6
    f692:	f01c fd78 	bl	2c186 <atomic_test_bit>
    f696:	b998      	cbnz	r0, f6c0 <smp_pairing_req+0x50>
		int ret = smp_init(smp);
    f698:	4620      	mov	r0, r4
    f69a:	f7ff fca5 	bl	efe8 <smp_init>
		if (ret) {
    f69e:	b178      	cbz	r0, f6c0 <smp_pairing_req+0x50>
			return ret;
    f6a0:	b2c5      	uxtb	r5, r0
}
    f6a2:	4628      	mov	r0, r5
    f6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f6a8:	f898 0008 	ldrb.w	r0, [r8, #8]
    f6ac:	f108 0188 	add.w	r1, r8, #136	; 0x88
    f6b0:	f001 fa66 	bl	10b80 <bt_keys_get_addr>
    f6b4:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
		if (!conn->le.keys) {
    f6b8:	2800      	cmp	r0, #0
    f6ba:	d1e7      	bne.n	f68c <smp_pairing_req+0x1c>
			return BT_SMP_ERR_UNSPECIFIED;
    f6bc:	2508      	movs	r5, #8
    f6be:	e7f0      	b.n	f6a2 <smp_pairing_req+0x32>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    f6c0:	2301      	movs	r3, #1
    f6c2:	7263      	strb	r3, [r4, #9]
    f6c4:	683b      	ldr	r3, [r7, #0]
    f6c6:	f8c4 300a 	str.w	r3, [r4, #10]
    f6ca:	88bb      	ldrh	r3, [r7, #4]
    f6cc:	81e3      	strh	r3, [r4, #14]
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    f6ce:	2302      	movs	r3, #2
    f6d0:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
    f6d2:	78b8      	ldrb	r0, [r7, #2]
    f6d4:	f7ff fabe 	bl	ec54 <get_auth.constprop.0>
    f6d8:	74e0      	strb	r0, [r4, #19]
    f6da:	4605      	mov	r5, r0
	rsp->io_capability = get_io_capa();
    f6dc:	f7ff fa66 	bl	ebac <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f6e0:	4b49      	ldr	r3, [pc, #292]	; (f808 <smp_pairing_req+0x198>)
	rsp->io_capability = get_io_capa();
    f6e2:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    f6e4:	781b      	ldrb	r3, [r3, #0]
    f6e6:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    f6e8:	2310      	movs	r3, #16
    f6ea:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    f6ec:	793b      	ldrb	r3, [r7, #4]
    f6ee:	f003 0303 	and.w	r3, r3, #3
    f6f2:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    f6f4:	797b      	ldrb	r3, [r7, #5]
    f6f6:	f003 0301 	and.w	r3, r3, #1
    f6fa:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    f6fc:	072b      	lsls	r3, r5, #28
    f6fe:	d50c      	bpl.n	f71a <smp_pairing_req+0xaa>
    f700:	78bb      	ldrb	r3, [r7, #2]
    f702:	071d      	lsls	r5, r3, #28
    f704:	d509      	bpl.n	f71a <smp_pairing_req+0xaa>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    f706:	2105      	movs	r1, #5
    f708:	4630      	mov	r0, r6
    f70a:	f01c fdd2 	bl	2c2b2 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    f70e:	7d63      	ldrb	r3, [r4, #21]
    f710:	f003 0302 	and.w	r3, r3, #2
    f714:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    f716:	2300      	movs	r3, #0
    f718:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    f71a:	7ce3      	ldrb	r3, [r4, #19]
    f71c:	0698      	lsls	r0, r3, #26
    f71e:	d506      	bpl.n	f72e <smp_pairing_req+0xbe>
    f720:	78bb      	ldrb	r3, [r7, #2]
    f722:	0699      	lsls	r1, r3, #26
    f724:	d503      	bpl.n	f72e <smp_pairing_req+0xbe>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    f726:	2114      	movs	r1, #20
    f728:	4630      	mov	r0, r6
    f72a:	f01c fdc2 	bl	2c2b2 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    f72e:	7da3      	ldrb	r3, [r4, #22]
    f730:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
    f734:	7d63      	ldrb	r3, [r4, #21]
    f736:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    f73a:	7ce3      	ldrb	r3, [r4, #19]
    f73c:	07da      	lsls	r2, r3, #31
    f73e:	d506      	bpl.n	f74e <smp_pairing_req+0xde>
    f740:	78bb      	ldrb	r3, [r7, #2]
    f742:	07db      	lsls	r3, r3, #31
    f744:	d503      	bpl.n	f74e <smp_pairing_req+0xde>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    f746:	210d      	movs	r1, #13
    f748:	4630      	mov	r0, r6
    f74a:	f01c fdb2 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    f74e:	2103      	movs	r1, #3
    f750:	4630      	mov	r0, r6
    f752:	f01c fdae 	bl	2c2b2 <atomic_set_bit>
	smp->method = get_pair_method(smp, req->io_capability);
    f756:	7839      	ldrb	r1, [r7, #0]
    f758:	4620      	mov	r0, r4
    f75a:	f7ff fbcf 	bl	eefc <get_pair_method>
    f75e:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
    f760:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
    f764:	4620      	mov	r0, r4
    f766:	f01c fd45 	bl	2c1f4 <update_keys_check>
    f76a:	2800      	cmp	r0, #0
    f76c:	d04a      	beq.n	f804 <smp_pairing_req+0x194>
	err = remote_sec_level_reachable(smp);
    f76e:	4620      	mov	r0, r4
    f770:	f01c fd61 	bl	2c236 <remote_sec_level_reachable>
	if (err) {
    f774:	4605      	mov	r5, r0
    f776:	2800      	cmp	r0, #0
    f778:	d193      	bne.n	f6a2 <smp_pairing_req+0x32>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f77a:	2105      	movs	r1, #5
    f77c:	4630      	mov	r0, r6
    f77e:	f01c fd02 	bl	2c186 <atomic_test_bit>
    f782:	bb30      	cbnz	r0, f7d2 <smp_pairing_req+0x162>
	ret = legacy_request_tk(smp);
    f784:	4620      	mov	r0, r4
    f786:	f7ff fc71 	bl	f06c <legacy_request_tk>
	if (ret) {
    f78a:	4605      	mov	r5, r0
    f78c:	2800      	cmp	r0, #0
    f78e:	d188      	bne.n	f6a2 <smp_pairing_req+0x32>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f790:	7a25      	ldrb	r5, [r4, #8]
    f792:	b99d      	cbnz	r5, f7bc <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f794:	210f      	movs	r1, #15
    f796:	4630      	mov	r0, r6
    f798:	f01c fcf5 	bl	2c186 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f79c:	b970      	cbnz	r0, f7bc <smp_pairing_req+0x14c>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f79e:	4f1b      	ldr	r7, [pc, #108]	; (f80c <smp_pairing_req+0x19c>)
    f7a0:	683b      	ldr	r3, [r7, #0]
    f7a2:	b15b      	cbz	r3, f7bc <smp_pairing_req+0x14c>
	    bt_auth && bt_auth->pairing_confirm) {
    f7a4:	695b      	ldr	r3, [r3, #20]
    f7a6:	b14b      	cbz	r3, f7bc <smp_pairing_req+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f7a8:	4630      	mov	r0, r6
    f7aa:	210a      	movs	r1, #10
    f7ac:	f01c fd81 	bl	2c2b2 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    f7b0:	683b      	ldr	r3, [r7, #0]
    f7b2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    f7b6:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    f7b8:	4798      	blx	r3
		return 0;
    f7ba:	e772      	b.n	f6a2 <smp_pairing_req+0x32>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f7bc:	2103      	movs	r1, #3
    f7be:	4620      	mov	r0, r4
    f7c0:	f01c fd77 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    f7c4:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f7c6:	f01c fd74 	bl	2c2b2 <atomic_set_bit>
}
    f7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    f7ce:	f01c bdb4 	b.w	2c33a <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f7d2:	7a25      	ldrb	r5, [r4, #8]
    f7d4:	b98d      	cbnz	r5, f7fa <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f7d6:	210f      	movs	r1, #15
    f7d8:	4630      	mov	r0, r6
    f7da:	f01c fcd4 	bl	2c186 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    f7de:	b960      	cbnz	r0, f7fa <smp_pairing_req+0x18a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    f7e0:	4f0a      	ldr	r7, [pc, #40]	; (f80c <smp_pairing_req+0x19c>)
    f7e2:	683b      	ldr	r3, [r7, #0]
    f7e4:	b14b      	cbz	r3, f7fa <smp_pairing_req+0x18a>
	    bt_auth && bt_auth->pairing_confirm) {
    f7e6:	695b      	ldr	r3, [r3, #20]
    f7e8:	b13b      	cbz	r3, f7fa <smp_pairing_req+0x18a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f7ea:	4630      	mov	r0, r6
    f7ec:	210a      	movs	r1, #10
    f7ee:	f01c fd60 	bl	2c2b2 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    f7f2:	683b      	ldr	r3, [r7, #0]
    f7f4:	4640      	mov	r0, r8
    f7f6:	695b      	ldr	r3, [r3, #20]
    f7f8:	e7de      	b.n	f7b8 <smp_pairing_req+0x148>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    f7fa:	210c      	movs	r1, #12
    f7fc:	4620      	mov	r0, r4
    f7fe:	e7e2      	b.n	f7c6 <smp_pairing_req+0x156>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    f800:	2506      	movs	r5, #6
    f802:	e74e      	b.n	f6a2 <smp_pairing_req+0x32>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f804:	2503      	movs	r5, #3
    f806:	e74c      	b.n	f6a2 <smp_pairing_req+0x32>
    f808:	20003af4 	.word	0x20003af4
    f80c:	200022d0 	.word	0x200022d0

0000f810 <sc_send_public_key>:
{
    f810:	b570      	push	{r4, r5, r6, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f812:	210c      	movs	r1, #12
{
    f814:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f816:	f01c fd71 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f81a:	4604      	mov	r4, r0
    f81c:	b1f8      	cbz	r0, f85e <sc_send_public_key+0x4e>
    f81e:	2140      	movs	r1, #64	; 0x40
    f820:	3008      	adds	r0, #8
    f822:	f01d f952 	bl	2caca <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f826:	4b0f      	ldr	r3, [pc, #60]	; (f864 <sc_send_public_key+0x54>)
    f828:	681b      	ldr	r3, [r3, #0]
    f82a:	4602      	mov	r2, r0
    f82c:	4601      	mov	r1, r0
    f82e:	f103 0020 	add.w	r0, r3, #32
    f832:	f853 6b04 	ldr.w	r6, [r3], #4
    f836:	f841 6b04 	str.w	r6, [r1], #4
    f83a:	4283      	cmp	r3, r0
    f83c:	d1f9      	bne.n	f832 <sc_send_public_key+0x22>
    f83e:	3220      	adds	r2, #32
    f840:	f103 0120 	add.w	r1, r3, #32
    f844:	f853 0b04 	ldr.w	r0, [r3], #4
    f848:	f842 0b04 	str.w	r0, [r2], #4
    f84c:	428b      	cmp	r3, r1
    f84e:	d1f9      	bne.n	f844 <sc_send_public_key+0x34>
	smp_send(smp, req_buf, NULL, NULL);
    f850:	4628      	mov	r0, r5
    f852:	2200      	movs	r2, #0
    f854:	4621      	mov	r1, r4
    f856:	f01c fbe4 	bl	2c022 <smp_send.constprop.0>
	return 0;
    f85a:	2000      	movs	r0, #0
}
    f85c:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    f85e:	2008      	movs	r0, #8
    f860:	e7fc      	b.n	f85c <sc_send_public_key+0x4c>
    f862:	bf00      	nop
    f864:	2000238c 	.word	0x2000238c

0000f868 <smp_public_key_periph>:
{
    f868:	b530      	push	{r4, r5, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f86a:	1d05      	adds	r5, r0, #4
{
    f86c:	b089      	sub	sp, #36	; 0x24
    f86e:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f870:	210e      	movs	r1, #14
    f872:	4628      	mov	r0, r5
    f874:	f01c fc87 	bl	2c186 <atomic_test_bit>
    f878:	b9a0      	cbnz	r0, f8a4 <smp_public_key_periph+0x3c>
	    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    f87a:	4b2d      	ldr	r3, [pc, #180]	; (f930 <smp_public_key_periph+0xc8>)
    f87c:	2220      	movs	r2, #32
    f87e:	6819      	ldr	r1, [r3, #0]
    f880:	f104 0057 	add.w	r0, r4, #87	; 0x57
    f884:	f01e fe5f 	bl	2e546 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f888:	b960      	cbnz	r0, f8a4 <smp_public_key_periph+0x3c>
		BT_WARN("Remote public key rejected");
    f88a:	4b2a      	ldr	r3, [pc, #168]	; (f934 <smp_public_key_periph+0xcc>)
    f88c:	9306      	str	r3, [sp, #24]
    f88e:	2302      	movs	r3, #2
    f890:	9301      	str	r3, [sp, #4]
    f892:	9305      	str	r3, [sp, #20]
    f894:	aa05      	add	r2, sp, #20
    f896:	f44f 5184 	mov.w	r1, #4224	; 0x1080
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f89a:	4827      	ldr	r0, [pc, #156]	; (f938 <smp_public_key_periph+0xd0>)
    f89c:	f01c fbde 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    f8a0:	2008      	movs	r0, #8
    f8a2:	e012      	b.n	f8ca <smp_public_key_periph+0x62>
	err = sc_send_public_key(smp);
    f8a4:	4620      	mov	r0, r4
    f8a6:	f7ff ffb3 	bl	f810 <sc_send_public_key>
	if (err) {
    f8aa:	b970      	cbnz	r0, f8ca <smp_public_key_periph+0x62>
	switch (smp->method) {
    f8ac:	7a23      	ldrb	r3, [r4, #8]
    f8ae:	2b05      	cmp	r3, #5
    f8b0:	d834      	bhi.n	f91c <smp_public_key_periph+0xb4>
    f8b2:	e8df f003 	tbb	[pc, r3]
    f8b6:	1903      	.short	0x1903
    f8b8:	3033030c 	.word	0x3033030c
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f8bc:	2104      	movs	r1, #4
    f8be:	4620      	mov	r0, r4
    f8c0:	f01c fcf7 	bl	2c2b2 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    f8c4:	f7ff fe86 	bl	f5d4 <smp_send_pairing_confirm>
		if (err) {
    f8c8:	b1f8      	cbz	r0, f90a <smp_public_key_periph+0xa2>
}
    f8ca:	b009      	add	sp, #36	; 0x24
    f8cc:	bd30      	pop	{r4, r5, pc}
		err = display_passkey(smp);
    f8ce:	4620      	mov	r0, r4
    f8d0:	f7ff fb5e 	bl	ef90 <display_passkey>
		if (err) {
    f8d4:	2800      	cmp	r0, #0
    f8d6:	d1f8      	bne.n	f8ca <smp_public_key_periph+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f8d8:	2103      	movs	r1, #3
    f8da:	4620      	mov	r0, r4
    f8dc:	f01c fce9 	bl	2c2b2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    f8e0:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f8e2:	f01c fce6 	bl	2c2b2 <atomic_set_bit>
		break;
    f8e6:	e010      	b.n	f90a <smp_public_key_periph+0xa2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f8e8:	4620      	mov	r0, r4
    f8ea:	2103      	movs	r1, #3
    f8ec:	f01c fce1 	bl	2c2b2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    f8f0:	210e      	movs	r1, #14
    f8f2:	f01c fcde 	bl	2c2b2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f8f6:	4628      	mov	r0, r5
    f8f8:	210a      	movs	r1, #10
    f8fa:	f01c fcda 	bl	2c2b2 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    f8fe:	4b0f      	ldr	r3, [pc, #60]	; (f93c <smp_public_key_periph+0xd4>)
    f900:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    f904:	681b      	ldr	r3, [r3, #0]
    f906:	685b      	ldr	r3, [r3, #4]
    f908:	4798      	blx	r3
	return generate_dhkey(smp);
    f90a:	4620      	mov	r0, r4
}
    f90c:	b009      	add	sp, #36	; 0x24
    f90e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	return generate_dhkey(smp);
    f912:	f01c bce2 	b.w	2c2da <generate_dhkey>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f916:	2104      	movs	r1, #4
    f918:	4620      	mov	r0, r4
    f91a:	e7e2      	b.n	f8e2 <smp_public_key_periph+0x7a>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f91c:	4a08      	ldr	r2, [pc, #32]	; (f940 <smp_public_key_periph+0xd8>)
	switch (smp->method) {
    f91e:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f922:	2303      	movs	r3, #3
    f924:	9301      	str	r3, [sp, #4]
    f926:	9305      	str	r3, [sp, #20]
    f928:	aa05      	add	r2, sp, #20
    f92a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    f92e:	e7b4      	b.n	f89a <smp_public_key_periph+0x32>
    f930:	2000238c 	.word	0x2000238c
    f934:	0003327b 	.word	0x0003327b
    f938:	0002f50c 	.word	0x0002f50c
    f93c:	200022d0 	.word	0x200022d0
    f940:	000330f6 	.word	0x000330f6

0000f944 <smp_public_key>:
{
    f944:	b5f0      	push	{r4, r5, r6, r7, lr}
    f946:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->pkey, req->x, BT_PUB_KEY_COORD_LEN);
    f948:	f100 0757 	add.w	r7, r0, #87	; 0x57
{
    f94c:	b089      	sub	sp, #36	; 0x24
    f94e:	4604      	mov	r4, r0
    f950:	463a      	mov	r2, r7
    f952:	f103 0120 	add.w	r1, r3, #32
    f956:	f853 0b04 	ldr.w	r0, [r3], #4
    f95a:	f842 0b04 	str.w	r0, [r2], #4
    f95e:	428b      	cmp	r3, r1
    f960:	d1f9      	bne.n	f956 <smp_public_key+0x12>
    f962:	f104 0277 	add.w	r2, r4, #119	; 0x77
    f966:	f103 0120 	add.w	r1, r3, #32
    f96a:	f853 0b04 	ldr.w	r0, [r3], #4
    f96e:	f842 0b04 	str.w	r0, [r2], #4
    f972:	428b      	cmp	r3, r1
    f974:	d1f9      	bne.n	f96a <smp_public_key+0x26>
	if (bt_pub_key_is_debug(smp->pkey)) {
    f976:	4638      	mov	r0, r7
    f978:	f7fb fb1e 	bl	afb8 <bt_pub_key_is_debug>
    f97c:	bb08      	cbnz	r0, f9c2 <smp_public_key+0x7e>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    f97e:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    f982:	78db      	ldrb	r3, [r3, #3]
    f984:	2b00      	cmp	r3, #0
    f986:	f040 80a2 	bne.w	face <smp_public_key+0x18a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f98a:	1d26      	adds	r6, r4, #4
    f98c:	210e      	movs	r1, #14
    f98e:	4630      	mov	r0, r6
    f990:	f01c fbf9 	bl	2c186 <atomic_test_bit>
    f994:	2800      	cmp	r0, #0
    f996:	d13e      	bne.n	fa16 <smp_public_key+0xd2>
		    memcmp(smp->pkey, sc_public_key, BT_PUB_KEY_COORD_LEN) == 0) {
    f998:	4b55      	ldr	r3, [pc, #340]	; (faf0 <smp_public_key+0x1ac>)
    f99a:	2220      	movs	r2, #32
    f99c:	6819      	ldr	r1, [r3, #0]
    f99e:	4638      	mov	r0, r7
    f9a0:	f01e fdd1 	bl	2e546 <memcmp>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f9a4:	2800      	cmp	r0, #0
    f9a6:	d136      	bne.n	fa16 <smp_public_key+0xd2>
			BT_WARN("Remote public key rejected");
    f9a8:	4b52      	ldr	r3, [pc, #328]	; (faf4 <smp_public_key+0x1b0>)
    f9aa:	9306      	str	r3, [sp, #24]
    f9ac:	2302      	movs	r3, #2
    f9ae:	9301      	str	r3, [sp, #4]
    f9b0:	9305      	str	r3, [sp, #20]
    f9b2:	aa05      	add	r2, sp, #20
    f9b4:	f44f 5184 	mov.w	r1, #4224	; 0x1080
			BT_ERR("Unknown pairing method (%u)", smp->method);
    f9b8:	484f      	ldr	r0, [pc, #316]	; (faf8 <smp_public_key+0x1b4>)
    f9ba:	f01c fb4f 	bl	2c05c <z_log_msg2_static_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
    f9be:	2008      	movs	r0, #8
    f9c0:	e027      	b.n	fa12 <smp_public_key+0xce>
		BT_INFO("Remote is using Debug Public key");
    f9c2:	4b4e      	ldr	r3, [pc, #312]	; (fafc <smp_public_key+0x1b8>)
    f9c4:	484c      	ldr	r0, [pc, #304]	; (faf8 <smp_public_key+0x1b4>)
    f9c6:	9306      	str	r3, [sp, #24]
    f9c8:	aa05      	add	r2, sp, #20
    f9ca:	2302      	movs	r3, #2
    f9cc:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    f9d0:	9301      	str	r3, [sp, #4]
    f9d2:	9305      	str	r3, [sp, #20]
    f9d4:	f01c fb42 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f9d8:	210e      	movs	r1, #14
    f9da:	1d20      	adds	r0, r4, #4
    f9dc:	f01c fc69 	bl	2c2b2 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f9e0:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
    f9e4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f9e8:	b933      	cbnz	r3, f9f8 <smp_public_key+0xb4>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f9ea:	7a28      	ldrb	r0, [r5, #8]
    f9ec:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f9f0:	f001 f8c6 	bl	10b80 <bt_keys_get_addr>
    f9f4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f9f8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f9fc:	2b00      	cmp	r3, #0
    f9fe:	d0be      	beq.n	f97e <smp_public_key+0x3a>
    fa00:	89da      	ldrh	r2, [r3, #14]
    fa02:	f002 0224 	and.w	r2, r2, #36	; 0x24
    fa06:	2a00      	cmp	r2, #0
    fa08:	d0b9      	beq.n	f97e <smp_public_key+0x3a>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    fa0a:	7b5b      	ldrb	r3, [r3, #13]
    fa0c:	079b      	lsls	r3, r3, #30
    fa0e:	d4b6      	bmi.n	f97e <smp_public_key+0x3a>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    fa10:	2003      	movs	r0, #3
}
    fa12:	b009      	add	sp, #36	; 0x24
    fa14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch (smp->method) {
    fa16:	7a23      	ldrb	r3, [r4, #8]
    fa18:	2b05      	cmp	r3, #5
    fa1a:	d84e      	bhi.n	faba <smp_public_key+0x176>
    fa1c:	e8df f003 	tbb	[pc, r3]
    fa20:	03081e03 	.word	0x03081e03
    fa24:	2a4d      	.short	0x2a4d
			atomic_set_bit(smp->allowed_cmds,
    fa26:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
    fa28:	4620      	mov	r0, r4
    fa2a:	f01c fc42 	bl	2c2b2 <atomic_set_bit>
			break;
    fa2e:	e00f      	b.n	fa50 <smp_public_key+0x10c>
			err = display_passkey(smp);
    fa30:	4620      	mov	r0, r4
    fa32:	f7ff faad 	bl	ef90 <display_passkey>
			if (err) {
    fa36:	2800      	cmp	r0, #0
    fa38:	d1eb      	bne.n	fa12 <smp_public_key+0xce>
			atomic_set_bit(smp->allowed_cmds,
    fa3a:	2103      	movs	r1, #3
    fa3c:	4620      	mov	r0, r4
    fa3e:	f01c fc38 	bl	2c2b2 <atomic_set_bit>
			atomic_set_bit(smp->allowed_cmds,
    fa42:	210e      	movs	r1, #14
    fa44:	f01c fc35 	bl	2c2b2 <atomic_set_bit>
			err = smp_send_pairing_confirm(smp);
    fa48:	f7ff fdc4 	bl	f5d4 <smp_send_pairing_confirm>
			if (err) {
    fa4c:	2800      	cmp	r0, #0
    fa4e:	d1e0      	bne.n	fa12 <smp_public_key+0xce>
		return generate_dhkey(smp);
    fa50:	4620      	mov	r0, r4
}
    fa52:	b009      	add	sp, #36	; 0x24
    fa54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		return generate_dhkey(smp);
    fa58:	f01c bc3f 	b.w	2c2da <generate_dhkey>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    fa5c:	210a      	movs	r1, #10
    fa5e:	4630      	mov	r0, r6
    fa60:	f01c fc27 	bl	2c2b2 <atomic_set_bit>
			bt_auth->passkey_entry(smp->chan.chan.conn);
    fa64:	4b26      	ldr	r3, [pc, #152]	; (fb00 <smp_public_key+0x1bc>)
    fa66:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    fa6a:	681b      	ldr	r3, [r3, #0]
    fa6c:	685b      	ldr	r3, [r3, #4]
    fa6e:	4798      	blx	r3
			atomic_set_bit(smp->allowed_cmds,
    fa70:	210e      	movs	r1, #14
    fa72:	e7d9      	b.n	fa28 <smp_public_key+0xe4>
			if (bt_rand(smp->prnd, 16)) {
    fa74:	2110      	movs	r1, #16
    fa76:	f104 0027 	add.w	r0, r4, #39	; 0x27
    fa7a:	f004 fb81 	bl	14180 <bt_rand>
    fa7e:	4605      	mov	r5, r0
    fa80:	2800      	cmp	r0, #0
    fa82:	d19c      	bne.n	f9be <smp_public_key+0x7a>
			if (bt_auth && bt_auth->oob_data_request) {
    fa84:	4f1e      	ldr	r7, [pc, #120]	; (fb00 <smp_public_key+0x1bc>)
    fa86:	683b      	ldr	r3, [r7, #0]
    fa88:	b383      	cbz	r3, faec <smp_public_key+0x1a8>
    fa8a:	68db      	ldr	r3, [r3, #12]
    fa8c:	b373      	cbz	r3, faec <smp_public_key+0x1a8>
				struct bt_conn_oob_info info = {
    fa8e:	4b1d      	ldr	r3, [pc, #116]	; (fb04 <smp_public_key+0x1c0>)
				le_sc_oob_config_set(smp, &info);
    fa90:	a902      	add	r1, sp, #8
				struct bt_conn_oob_info info = {
    fa92:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    fa96:	f8ad 3008 	strh.w	r3, [sp, #8]
				le_sc_oob_config_set(smp, &info);
    fa9a:	4620      	mov	r0, r4
    fa9c:	f01c fa60 	bl	2bf60 <le_sc_oob_config_set>
				atomic_set_bit(smp->flags,
    faa0:	4630      	mov	r0, r6
				smp->oobd_remote = NULL;
    faa2:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
				atomic_set_bit(smp->flags,
    faa6:	210c      	movs	r1, #12
    faa8:	f01c fc03 	bl	2c2b2 <atomic_set_bit>
				bt_auth->oob_data_request(smp->chan.chan.conn,
    faac:	683b      	ldr	r3, [r7, #0]
    faae:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    fab2:	68db      	ldr	r3, [r3, #12]
    fab4:	a902      	add	r1, sp, #8
    fab6:	4798      	blx	r3
			break;
    fab8:	e7ca      	b.n	fa50 <smp_public_key+0x10c>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    faba:	4a13      	ldr	r2, [pc, #76]	; (fb08 <smp_public_key+0x1c4>)
		switch (smp->method) {
    fabc:	e9cd 2306 	strd	r2, r3, [sp, #24]
			BT_ERR("Unknown pairing method (%u)", smp->method);
    fac0:	2303      	movs	r3, #3
    fac2:	9301      	str	r3, [sp, #4]
    fac4:	9305      	str	r3, [sp, #20]
    fac6:	aa05      	add	r2, sp, #20
    fac8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    facc:	e774      	b.n	f9b8 <smp_public_key+0x74>
	if (!sc_public_key) {
    face:	4b08      	ldr	r3, [pc, #32]	; (faf0 <smp_public_key+0x1ac>)
    fad0:	681d      	ldr	r5, [r3, #0]
    fad2:	b92d      	cbnz	r5, fae0 <smp_public_key+0x19c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    fad4:	1d20      	adds	r0, r4, #4
    fad6:	2106      	movs	r1, #6
    fad8:	f01c fbeb 	bl	2c2b2 <atomic_set_bit>
		return 0;
    fadc:	4628      	mov	r0, r5
    fade:	e798      	b.n	fa12 <smp_public_key+0xce>
	err = smp_public_key_periph(smp);
    fae0:	4620      	mov	r0, r4
}
    fae2:	b009      	add	sp, #36	; 0x24
    fae4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	err = smp_public_key_periph(smp);
    fae8:	f7ff bebe 	b.w	f868 <smp_public_key_periph>
				return BT_SMP_ERR_OOB_NOT_AVAIL;
    faec:	2002      	movs	r0, #2
    faee:	e790      	b.n	fa12 <smp_public_key+0xce>
    faf0:	2000238c 	.word	0x2000238c
    faf4:	0003327b 	.word	0x0003327b
    faf8:	0002f50c 	.word	0x0002f50c
    fafc:	00033296 	.word	0x00033296
    fb00:	200022d0 	.word	0x200022d0
    fb04:	0002f706 	.word	0x0002f706
    fb08:	000330f6 	.word	0x000330f6

0000fb0c <compute_and_send_central_dhcheck>:
{
    fb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fb10:	4604      	mov	r4, r0
    fb12:	b094      	sub	sp, #80	; 0x50
	(void)memset(r, 0, sizeof(r));
    fb14:	2210      	movs	r2, #16
    fb16:	2100      	movs	r1, #0
    fb18:	a80a      	add	r0, sp, #40	; 0x28
    fb1a:	f01e fd45 	bl	2e5a8 <memset>
	switch (smp->method) {
    fb1e:	7a23      	ldrb	r3, [r4, #8]
    fb20:	2b05      	cmp	r3, #5
    fb22:	d837      	bhi.n	fb94 <compute_and_send_central_dhcheck+0x88>
    fb24:	e8df f003 	tbb	[pc, r3]
    fb28:	06030306 	.word	0x06030306
    fb2c:	2636      	.short	0x2636
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    fb2e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    fb32:	930a      	str	r3, [sp, #40]	; 0x28
		   &smp->chan.chan.conn->le.init_addr,
    fb34:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
    fb38:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    fb3c:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    fb40:	e9cd 6201 	strd	r6, r2, [sp, #4]
    fb44:	f104 0727 	add.w	r7, r4, #39	; 0x27
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    fb48:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    fb4c:	f104 0837 	add.w	r8, r4, #55	; 0x37
    fb50:	9200      	str	r2, [sp, #0]
    fb52:	338f      	adds	r3, #143	; 0x8f
    fb54:	4642      	mov	r2, r8
    fb56:	4639      	mov	r1, r7
    fb58:	f104 0097 	add.w	r0, r4, #151	; 0x97
    fb5c:	f7ff f8da 	bl	ed14 <smp_f5>
    fb60:	b340      	cbz	r0, fbb4 <compute_and_send_central_dhcheck+0xa8>
		BT_ERR("Calculate LTK failed");
    fb62:	4b24      	ldr	r3, [pc, #144]	; (fbf4 <compute_and_send_central_dhcheck+0xe8>)
    fb64:	9312      	str	r3, [sp, #72]	; 0x48
    fb66:	2302      	movs	r3, #2
    fb68:	9306      	str	r3, [sp, #24]
    fb6a:	9311      	str	r3, [sp, #68]	; 0x44
    fb6c:	aa11      	add	r2, sp, #68	; 0x44
    fb6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fb72:	e018      	b.n	fba6 <compute_and_send_central_dhcheck+0x9a>
		if (smp->oobd_remote) {
    fb74:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    fb78:	2b00      	cmp	r3, #0
    fb7a:	d0db      	beq.n	fb34 <compute_and_send_central_dhcheck+0x28>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    fb7c:	ad0a      	add	r5, sp, #40	; 0x28
    fb7e:	f103 0610 	add.w	r6, r3, #16
    fb82:	6818      	ldr	r0, [r3, #0]
    fb84:	6859      	ldr	r1, [r3, #4]
    fb86:	462a      	mov	r2, r5
    fb88:	c203      	stmia	r2!, {r0, r1}
    fb8a:	3308      	adds	r3, #8
    fb8c:	42b3      	cmp	r3, r6
    fb8e:	4615      	mov	r5, r2
    fb90:	d1f7      	bne.n	fb82 <compute_and_send_central_dhcheck+0x76>
    fb92:	e7cf      	b.n	fb34 <compute_and_send_central_dhcheck+0x28>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fb94:	4a18      	ldr	r2, [pc, #96]	; (fbf8 <compute_and_send_central_dhcheck+0xec>)
	switch (smp->method) {
    fb96:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fb9a:	2303      	movs	r3, #3
    fb9c:	9306      	str	r3, [sp, #24]
    fb9e:	9311      	str	r3, [sp, #68]	; 0x44
    fba0:	aa11      	add	r2, sp, #68	; 0x44
    fba2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate LTK failed");
    fba6:	4815      	ldr	r0, [pc, #84]	; (fbfc <compute_and_send_central_dhcheck+0xf0>)
    fba8:	f01c fa58 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    fbac:	2008      	movs	r0, #8
}
    fbae:	b014      	add	sp, #80	; 0x50
    fbb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   &smp->chan.chan.conn->le.init_addr,
    fbb4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    fbb8:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    fbbc:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    fbbe:	ad06      	add	r5, sp, #24
    fbc0:	9301      	str	r3, [sp, #4]
    fbc2:	f104 030a 	add.w	r3, r4, #10
    fbc6:	9202      	str	r2, [sp, #8]
    fbc8:	9300      	str	r3, [sp, #0]
    fbca:	9503      	str	r5, [sp, #12]
    fbcc:	ab0a      	add	r3, sp, #40	; 0x28
    fbce:	4642      	mov	r2, r8
    fbd0:	4639      	mov	r1, r7
    fbd2:	4630      	mov	r0, r6
    fbd4:	f01c fa62 	bl	2c09c <smp_f6>
    fbd8:	b120      	cbz	r0, fbe4 <compute_and_send_central_dhcheck+0xd8>
		BT_ERR("Calculate local DHKey check failed");
    fbda:	4b09      	ldr	r3, [pc, #36]	; (fc00 <compute_and_send_central_dhcheck+0xf4>)
    fbdc:	9312      	str	r3, [sp, #72]	; 0x48
    fbde:	2302      	movs	r3, #2
    fbe0:	9305      	str	r3, [sp, #20]
    fbe2:	e7c2      	b.n	fb6a <compute_and_send_central_dhcheck+0x5e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    fbe4:	210d      	movs	r1, #13
    fbe6:	4620      	mov	r0, r4
    fbe8:	f01c fb63 	bl	2c2b2 <atomic_set_bit>
	return sc_smp_send_dhkey_check(smp, e);
    fbec:	4629      	mov	r1, r5
    fbee:	f01c fbdc 	bl	2c3aa <sc_smp_send_dhkey_check>
    fbf2:	e7dc      	b.n	fbae <compute_and_send_central_dhcheck+0xa2>
    fbf4:	000332b7 	.word	0x000332b7
    fbf8:	000330f6 	.word	0x000330f6
    fbfc:	0002f50c 	.word	0x0002f50c
    fc00:	000332cc 	.word	0x000332cc

0000fc04 <compute_and_check_and_send_periph_dhcheck>:
{
    fc04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fc08:	4604      	mov	r4, r0
    fc0a:	b099      	sub	sp, #100	; 0x64
	(void)memset(r, 0, sizeof(r));
    fc0c:	2210      	movs	r2, #16
    fc0e:	2100      	movs	r1, #0
    fc10:	a80e      	add	r0, sp, #56	; 0x38
    fc12:	f01e fcc9 	bl	2e5a8 <memset>
	switch (smp->method) {
    fc16:	7a23      	ldrb	r3, [r4, #8]
    fc18:	2b05      	cmp	r3, #5
    fc1a:	d837      	bhi.n	fc8c <compute_and_check_and_send_periph_dhcheck+0x88>
    fc1c:	e8df f003 	tbb	[pc, r3]
    fc20:	06030306 	.word	0x06030306
    fc24:	2636      	.short	0x2636
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    fc26:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    fc2a:	930e      	str	r3, [sp, #56]	; 0x38
		   &smp->chan.chan.conn->le.init_addr,
    fc2c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   smp->tk)) {
    fc30:	f104 0247 	add.w	r2, r4, #71	; 0x47
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    fc34:	f104 05c7 	add.w	r5, r4, #199	; 0xc7
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    fc38:	e9cd 5201 	strd	r5, r2, [sp, #4]
    fc3c:	f104 0637 	add.w	r6, r4, #55	; 0x37
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    fc40:	f103 0296 	add.w	r2, r3, #150	; 0x96
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    fc44:	f104 0727 	add.w	r7, r4, #39	; 0x27
    fc48:	9200      	str	r2, [sp, #0]
    fc4a:	338f      	adds	r3, #143	; 0x8f
    fc4c:	463a      	mov	r2, r7
    fc4e:	4631      	mov	r1, r6
    fc50:	f104 0097 	add.w	r0, r4, #151	; 0x97
    fc54:	f7ff f85e 	bl	ed14 <smp_f5>
    fc58:	b348      	cbz	r0, fcae <compute_and_check_and_send_periph_dhcheck+0xaa>
		BT_ERR("Calculate LTK failed");
    fc5a:	4b45      	ldr	r3, [pc, #276]	; (fd70 <compute_and_check_and_send_periph_dhcheck+0x16c>)
    fc5c:	9316      	str	r3, [sp, #88]	; 0x58
    fc5e:	2302      	movs	r3, #2
    fc60:	930a      	str	r3, [sp, #40]	; 0x28
		BT_ERR("Calculate remote DHKey check failed");
    fc62:	9315      	str	r3, [sp, #84]	; 0x54
    fc64:	aa15      	add	r2, sp, #84	; 0x54
    fc66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fc6a:	e018      	b.n	fc9e <compute_and_check_and_send_periph_dhcheck+0x9a>
		if (smp->oobd_remote) {
    fc6c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	; 0xe4
    fc70:	2b00      	cmp	r3, #0
    fc72:	d0db      	beq.n	fc2c <compute_and_check_and_send_periph_dhcheck+0x28>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    fc74:	ad0e      	add	r5, sp, #56	; 0x38
    fc76:	f103 0610 	add.w	r6, r3, #16
    fc7a:	6818      	ldr	r0, [r3, #0]
    fc7c:	6859      	ldr	r1, [r3, #4]
    fc7e:	462a      	mov	r2, r5
    fc80:	c203      	stmia	r2!, {r0, r1}
    fc82:	3308      	adds	r3, #8
    fc84:	42b3      	cmp	r3, r6
    fc86:	4615      	mov	r5, r2
    fc88:	d1f7      	bne.n	fc7a <compute_and_check_and_send_periph_dhcheck+0x76>
    fc8a:	e7cf      	b.n	fc2c <compute_and_check_and_send_periph_dhcheck+0x28>
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fc8c:	4a39      	ldr	r2, [pc, #228]	; (fd74 <compute_and_check_and_send_periph_dhcheck+0x170>)
	switch (smp->method) {
    fc8e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
		BT_ERR("Unknown pairing method (%u)", smp->method);
    fc92:	2303      	movs	r3, #3
    fc94:	930a      	str	r3, [sp, #40]	; 0x28
    fc96:	9315      	str	r3, [sp, #84]	; 0x54
    fc98:	aa15      	add	r2, sp, #84	; 0x54
    fc9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
		BT_ERR("Calculate remote DHKey check failed");
    fc9e:	4836      	ldr	r0, [pc, #216]	; (fd78 <compute_and_check_and_send_periph_dhcheck+0x174>)
		return BT_SMP_ERR_UNSPECIFIED;
    fca0:	2508      	movs	r5, #8
		BT_ERR("Calculate remote DHKey check failed");
    fca2:	f01c f9db 	bl	2c05c <z_log_msg2_static_create.constprop.0>
}
    fca6:	4628      	mov	r0, r5
    fca8:	b019      	add	sp, #100	; 0x64
    fcaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		   &smp->chan.chan.conn->le.resp_addr,
    fcae:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.init_addr, e)) {
    fcb2:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    fcb6:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    fcb8:	f10d 0828 	add.w	r8, sp, #40	; 0x28
    fcbc:	9301      	str	r3, [sp, #4]
    fcbe:	f104 0311 	add.w	r3, r4, #17
    fcc2:	9202      	str	r2, [sp, #8]
    fcc4:	9300      	str	r3, [sp, #0]
    fcc6:	f8cd 800c 	str.w	r8, [sp, #12]
    fcca:	ab0e      	add	r3, sp, #56	; 0x38
    fccc:	4632      	mov	r2, r6
    fcce:	4639      	mov	r1, r7
    fcd0:	4628      	mov	r0, r5
    fcd2:	f01c f9e3 	bl	2c09c <smp_f6>
    fcd6:	b120      	cbz	r0, fce2 <compute_and_check_and_send_periph_dhcheck+0xde>
		BT_ERR("Calculate local DHKey check failed");
    fcd8:	4b28      	ldr	r3, [pc, #160]	; (fd7c <compute_and_check_and_send_periph_dhcheck+0x178>)
    fcda:	9316      	str	r3, [sp, #88]	; 0x58
    fcdc:	2302      	movs	r3, #2
    fcde:	9306      	str	r3, [sp, #24]
    fce0:	e7bf      	b.n	fc62 <compute_and_check_and_send_periph_dhcheck+0x5e>
	if (smp->method == LE_SC_OOB) {
    fce2:	7a23      	ldrb	r3, [r4, #8]
    fce4:	2b05      	cmp	r3, #5
    fce6:	d10f      	bne.n	fd08 <compute_and_check_and_send_periph_dhcheck+0x104>
		if (smp->oobd_local) {
    fce8:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
    fcec:	b331      	cbz	r1, fd3c <compute_and_check_and_send_periph_dhcheck+0x138>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    fcee:	460b      	mov	r3, r1
    fcf0:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
    fcf4:	f101 0e10 	add.w	lr, r1, #16
    fcf8:	6818      	ldr	r0, [r3, #0]
    fcfa:	6859      	ldr	r1, [r3, #4]
    fcfc:	4662      	mov	r2, ip
    fcfe:	c203      	stmia	r2!, {r0, r1}
    fd00:	3308      	adds	r3, #8
    fd02:	4573      	cmp	r3, lr
    fd04:	4694      	mov	ip, r2
    fd06:	d1f7      	bne.n	fcf8 <compute_and_check_and_send_periph_dhcheck+0xf4>
		   &smp->chan.chan.conn->le.init_addr,
    fd08:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    fd0c:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    fd10:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    fd12:	f10d 0918 	add.w	r9, sp, #24
    fd16:	9301      	str	r3, [sp, #4]
    fd18:	f104 030a 	add.w	r3, r4, #10
    fd1c:	9202      	str	r2, [sp, #8]
    fd1e:	9300      	str	r3, [sp, #0]
    fd20:	f8cd 900c 	str.w	r9, [sp, #12]
    fd24:	ab0e      	add	r3, sp, #56	; 0x38
    fd26:	463a      	mov	r2, r7
    fd28:	4631      	mov	r1, r6
    fd2a:	4628      	mov	r0, r5
    fd2c:	f01c f9b6 	bl	2c09c <smp_f6>
    fd30:	b148      	cbz	r0, fd46 <compute_and_check_and_send_periph_dhcheck+0x142>
		BT_ERR("Calculate remote DHKey check failed");
    fd32:	4b13      	ldr	r3, [pc, #76]	; (fd80 <compute_and_check_and_send_periph_dhcheck+0x17c>)
    fd34:	9316      	str	r3, [sp, #88]	; 0x58
    fd36:	2302      	movs	r3, #2
    fd38:	9305      	str	r3, [sp, #20]
    fd3a:	e792      	b.n	fc62 <compute_and_check_and_send_periph_dhcheck+0x5e>
			memset(r, 0, sizeof(r));
    fd3c:	2210      	movs	r2, #16
    fd3e:	a80e      	add	r0, sp, #56	; 0x38
    fd40:	f01e fc32 	bl	2e5a8 <memset>
    fd44:	e7e0      	b.n	fd08 <compute_and_check_and_send_periph_dhcheck+0x104>
	if (memcmp(smp->e, re, 16)) {
    fd46:	2210      	movs	r2, #16
    fd48:	4649      	mov	r1, r9
    fd4a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    fd4e:	f01e fbfa 	bl	2e546 <memcmp>
    fd52:	b958      	cbnz	r0, fd6c <compute_and_check_and_send_periph_dhcheck+0x168>
	err = sc_smp_send_dhkey_check(smp, e);
    fd54:	4641      	mov	r1, r8
    fd56:	4620      	mov	r0, r4
    fd58:	f01c fb27 	bl	2c3aa <sc_smp_send_dhkey_check>
	if (err) {
    fd5c:	4605      	mov	r5, r0
    fd5e:	2800      	cmp	r0, #0
    fd60:	d1a1      	bne.n	fca6 <compute_and_check_and_send_periph_dhcheck+0xa2>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fd62:	2101      	movs	r1, #1
    fd64:	1d20      	adds	r0, r4, #4
    fd66:	f01c faa4 	bl	2c2b2 <atomic_set_bit>
	return 0;
    fd6a:	e79c      	b.n	fca6 <compute_and_check_and_send_periph_dhcheck+0xa2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    fd6c:	250b      	movs	r5, #11
    fd6e:	e79a      	b.n	fca6 <compute_and_check_and_send_periph_dhcheck+0xa2>
    fd70:	000332b7 	.word	0x000332b7
    fd74:	000330f6 	.word	0x000330f6
    fd78:	0002f50c 	.word	0x0002f50c
    fd7c:	000332cc 	.word	0x000332cc
    fd80:	000332ef 	.word	0x000332ef

0000fd84 <smp_dhkey_check>:
{
    fd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    fd88:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    fd8c:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    fd8e:	78fd      	ldrb	r5, [r7, #3]
{
    fd90:	b096      	sub	sp, #88	; 0x58
    fd92:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    fd94:	2d00      	cmp	r5, #0
    fd96:	d173      	bne.n	fe80 <smp_dhkey_check+0xfc>
		(void)memset(r, 0, sizeof(r));
    fd98:	2210      	movs	r2, #16
    fd9a:	4629      	mov	r1, r5
    fd9c:	a80c      	add	r0, sp, #48	; 0x30
    fd9e:	f01e fc03 	bl	2e5a8 <memset>
		switch (smp->method) {
    fda2:	7a23      	ldrb	r3, [r4, #8]
    fda4:	2b05      	cmp	r3, #5
    fda6:	d853      	bhi.n	fe50 <smp_dhkey_check+0xcc>
    fda8:	e8df f003 	tbb	[pc, r3]
    fdac:	06030306 	.word	0x06030306
    fdb0:	4152      	.short	0x4152
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    fdb2:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    fdb6:	930c      	str	r3, [sp, #48]	; 0x30
			   &smp->chan.chan.conn->le.init_addr, e)) {
    fdb8:	f107 038f 	add.w	r3, r7, #143	; 0x8f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    fdbc:	f10d 0820 	add.w	r8, sp, #32
    fdc0:	9302      	str	r3, [sp, #8]
			   &smp->chan.chan.conn->le.resp_addr,
    fdc2:	3796      	adds	r7, #150	; 0x96
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    fdc4:	f104 0311 	add.w	r3, r4, #17
    fdc8:	9300      	str	r3, [sp, #0]
    fdca:	f8cd 800c 	str.w	r8, [sp, #12]
    fdce:	9701      	str	r7, [sp, #4]
    fdd0:	ab0c      	add	r3, sp, #48	; 0x30
    fdd2:	f104 0227 	add.w	r2, r4, #39	; 0x27
    fdd6:	f104 0137 	add.w	r1, r4, #55	; 0x37
    fdda:	f104 00c7 	add.w	r0, r4, #199	; 0xc7
    fdde:	f01c f95d 	bl	2c09c <smp_f6>
    fde2:	2800      	cmp	r0, #0
    fde4:	d140      	bne.n	fe68 <smp_dhkey_check+0xe4>
		if (memcmp(e, req->e, 16)) {
    fde6:	2210      	movs	r2, #16
    fde8:	4631      	mov	r1, r6
    fdea:	4640      	mov	r0, r8
    fdec:	f01e fbab 	bl	2e546 <memcmp>
    fdf0:	2800      	cmp	r0, #0
    fdf2:	d143      	bne.n	fe7c <smp_dhkey_check+0xf8>
	return MIN(req->max_key_size, rsp->max_key_size);
    fdf4:	7b62      	ldrb	r2, [r4, #13]
    fdf6:	7d23      	ldrb	r3, [r4, #20]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    fdf8:	429a      	cmp	r2, r3
    fdfa:	bf94      	ite	ls
    fdfc:	9200      	strls	r2, [sp, #0]
    fdfe:	9300      	strhi	r3, [sp, #0]
		(void)memset(rand, 0, sizeof(rand));
    fe00:	e9cd 0006 	strd	r0, r0, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
    fe04:	f8ad 0010 	strh.w	r0, [sp, #16]
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, rand, ediv,
    fe08:	f104 0347 	add.w	r3, r4, #71	; 0x47
    fe0c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    fe10:	aa04      	add	r2, sp, #16
    fe12:	a906      	add	r1, sp, #24
    fe14:	f01a fd5d 	bl	2a8d2 <bt_conn_le_start_encryption>
    fe18:	2800      	cmp	r0, #0
    fe1a:	da2a      	bge.n	fe72 <smp_dhkey_check+0xee>
			BT_ERR("Failed to start encryption");
    fe1c:	4b2e      	ldr	r3, [pc, #184]	; (fed8 <smp_dhkey_check+0x154>)
    fe1e:	9314      	str	r3, [sp, #80]	; 0x50
    fe20:	2302      	movs	r3, #2
    fe22:	9305      	str	r3, [sp, #20]
    fe24:	9313      	str	r3, [sp, #76]	; 0x4c
    fe26:	aa13      	add	r2, sp, #76	; 0x4c
    fe28:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    fe2c:	e019      	b.n	fe62 <smp_dhkey_check+0xde>
			if (smp->oobd_local) {
    fe2e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    fe32:	2b00      	cmp	r3, #0
    fe34:	d0c0      	beq.n	fdb8 <smp_dhkey_check+0x34>
				memcpy(r, smp->oobd_local->r, sizeof(r));
    fe36:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    fe3a:	f103 0e10 	add.w	lr, r3, #16
    fe3e:	6818      	ldr	r0, [r3, #0]
    fe40:	6859      	ldr	r1, [r3, #4]
    fe42:	4662      	mov	r2, ip
    fe44:	c203      	stmia	r2!, {r0, r1}
    fe46:	3308      	adds	r3, #8
    fe48:	4573      	cmp	r3, lr
    fe4a:	4694      	mov	ip, r2
    fe4c:	d1f7      	bne.n	fe3e <smp_dhkey_check+0xba>
    fe4e:	e7b3      	b.n	fdb8 <smp_dhkey_check+0x34>
			BT_ERR("Unknown pairing method (%u)", smp->method);
    fe50:	4a22      	ldr	r2, [pc, #136]	; (fedc <smp_dhkey_check+0x158>)
		switch (smp->method) {
    fe52:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
			BT_ERR("Unknown pairing method (%u)", smp->method);
    fe56:	2303      	movs	r3, #3
    fe58:	9308      	str	r3, [sp, #32]
    fe5a:	9313      	str	r3, [sp, #76]	; 0x4c
    fe5c:	aa13      	add	r2, sp, #76	; 0x4c
    fe5e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
			BT_ERR("Failed to start encryption");
    fe62:	481f      	ldr	r0, [pc, #124]	; (fee0 <smp_dhkey_check+0x15c>)
    fe64:	f01c f8fa 	bl	2c05c <z_log_msg2_static_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
    fe68:	2508      	movs	r5, #8
}
    fe6a:	4628      	mov	r0, r5
    fe6c:	b016      	add	sp, #88	; 0x58
    fe6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    fe72:	2101      	movs	r1, #1
    fe74:	1d20      	adds	r0, r4, #4
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fe76:	f01c fa1c 	bl	2c2b2 <atomic_set_bit>
			return 0;
    fe7a:	e7f6      	b.n	fe6a <smp_dhkey_check+0xe6>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    fe7c:	250b      	movs	r5, #11
    fe7e:	e7f4      	b.n	fe6a <smp_dhkey_check+0xe6>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_PERIPHERAL) {
    fe80:	2d01      	cmp	r5, #1
    fe82:	d119      	bne.n	feb8 <smp_dhkey_check+0x134>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    fe84:	1d07      	adds	r7, r0, #4
    fe86:	2110      	movs	r1, #16
    fe88:	4638      	mov	r0, r7
    fe8a:	f01c f889 	bl	2bfa0 <atomic_clear_bit>
    fe8e:	4631      	mov	r1, r6
    fe90:	f104 03b7 	add.w	r3, r4, #183	; 0xb7
    fe94:	f106 0210 	add.w	r2, r6, #16
    fe98:	f851 0b04 	ldr.w	r0, [r1], #4
    fe9c:	f843 0b04 	str.w	r0, [r3], #4
    fea0:	4291      	cmp	r1, r2
    fea2:	d1f9      	bne.n	fe98 <smp_dhkey_check+0x114>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    fea4:	2107      	movs	r1, #7
    fea6:	4638      	mov	r0, r7
    fea8:	f01c f96d 	bl	2c186 <atomic_test_bit>
    feac:	4605      	mov	r5, r0
    feae:	b128      	cbz	r0, febc <smp_dhkey_check+0x138>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    feb0:	2109      	movs	r1, #9
    feb2:	4638      	mov	r0, r7
    feb4:	f01c f9fd 	bl	2c2b2 <atomic_set_bit>
	return 0;
    feb8:	2500      	movs	r5, #0
    feba:	e7d6      	b.n	fe6a <smp_dhkey_check+0xe6>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    febc:	210a      	movs	r1, #10
    febe:	4638      	mov	r0, r7
    fec0:	f01c f961 	bl	2c186 <atomic_test_bit>
    fec4:	b110      	cbz	r0, fecc <smp_dhkey_check+0x148>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    fec6:	2109      	movs	r1, #9
    fec8:	4638      	mov	r0, r7
    feca:	e7d4      	b.n	fe76 <smp_dhkey_check+0xf2>
		return compute_and_check_and_send_periph_dhcheck(smp);
    fecc:	4620      	mov	r0, r4
}
    fece:	b016      	add	sp, #88	; 0x58
    fed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return compute_and_check_and_send_periph_dhcheck(smp);
    fed4:	f7ff be96 	b.w	fc04 <compute_and_check_and_send_periph_dhcheck>
    fed8:	00033260 	.word	0x00033260
    fedc:	000330f6 	.word	0x000330f6
    fee0:	0002f50c 	.word	0x0002f50c

0000fee4 <bt_smp_connected>:
{
    fee4:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
    fee6:	4905      	ldr	r1, [pc, #20]	; (fefc <bt_smp_connected+0x18>)
    fee8:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    feec:	30e8      	adds	r0, #232	; 0xe8
    feee:	f01d ffdc 	bl	2deaa <k_work_init_delayable>
	smp_reset(smp);
    fef2:	4620      	mov	r0, r4
}
    fef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    fef8:	f01c ba75 	b.w	2c3e6 <smp_reset>
    fefc:	00010a05 	.word	0x00010a05

0000ff00 <smp_pairing_confirm>:
{
    ff00:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    ff02:	688d      	ldr	r5, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    ff04:	1d06      	adds	r6, r0, #4
{
    ff06:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    ff08:	210b      	movs	r1, #11
{
    ff0a:	b088      	sub	sp, #32
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    ff0c:	4630      	mov	r0, r6
    ff0e:	f01c f847 	bl	2bfa0 <atomic_clear_bit>
    ff12:	462b      	mov	r3, r5
    ff14:	f104 0217 	add.w	r2, r4, #23
    ff18:	f105 0110 	add.w	r1, r5, #16
    ff1c:	f853 0b04 	ldr.w	r0, [r3], #4
    ff20:	f842 0b04 	str.w	r0, [r2], #4
    ff24:	428b      	cmp	r3, r1
    ff26:	d1f9      	bne.n	ff1c <smp_pairing_confirm+0x1c>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
    ff28:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ff2c:	78db      	ldrb	r3, [r3, #3]
    ff2e:	b943      	cbnz	r3, ff42 <smp_pairing_confirm+0x42>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ff30:	2104      	movs	r1, #4
    ff32:	4620      	mov	r0, r4
    ff34:	f01c f9bd 	bl	2c2b2 <atomic_set_bit>
}
    ff38:	b008      	add	sp, #32
    ff3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_random(smp);
    ff3e:	f01c ba16 	b.w	2c36e <smp_send_pairing_random>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ff42:	2105      	movs	r1, #5
    ff44:	4630      	mov	r0, r6
    ff46:	f01c f91e 	bl	2c186 <atomic_test_bit>
    ff4a:	b928      	cbnz	r0, ff58 <smp_pairing_confirm+0x58>
		return legacy_pairing_confirm(smp);
    ff4c:	4620      	mov	r0, r4
}
    ff4e:	b008      	add	sp, #32
    ff50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    ff54:	f01c bafc 	b.w	2c550 <legacy_pairing_confirm>
	switch (smp->method) {
    ff58:	7a23      	ldrb	r3, [r4, #8]
    ff5a:	2b01      	cmp	r3, #1
    ff5c:	d00a      	beq.n	ff74 <smp_pairing_confirm+0x74>
    ff5e:	2b02      	cmp	r3, #2
    ff60:	d115      	bne.n	ff8e <smp_pairing_confirm+0x8e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ff62:	2104      	movs	r1, #4
    ff64:	4620      	mov	r0, r4
    ff66:	f01c f9a4 	bl	2c2b2 <atomic_set_bit>
}
    ff6a:	b008      	add	sp, #32
    ff6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    ff70:	f7ff bb30 	b.w	f5d4 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ff74:	210a      	movs	r1, #10
    ff76:	4630      	mov	r0, r6
    ff78:	f01c f905 	bl	2c186 <atomic_test_bit>
    ff7c:	2800      	cmp	r0, #0
    ff7e:	d0f0      	beq.n	ff62 <smp_pairing_confirm+0x62>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    ff80:	4630      	mov	r0, r6
    ff82:	2100      	movs	r1, #0
    ff84:	f01c f995 	bl	2c2b2 <atomic_set_bit>
			return 0;
    ff88:	2000      	movs	r0, #0
}
    ff8a:	b008      	add	sp, #32
    ff8c:	bd70      	pop	{r4, r5, r6, pc}
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ff8e:	4a07      	ldr	r2, [pc, #28]	; (ffac <smp_pairing_confirm+0xac>)
    ff90:	4807      	ldr	r0, [pc, #28]	; (ffb0 <smp_pairing_confirm+0xb0>)
	switch (smp->method) {
    ff92:	e9cd 2306 	strd	r2, r3, [sp, #24]
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ff96:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    ff9a:	2303      	movs	r3, #3
    ff9c:	aa05      	add	r2, sp, #20
    ff9e:	9301      	str	r3, [sp, #4]
    ffa0:	9305      	str	r3, [sp, #20]
    ffa2:	f01c f85b 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		return BT_SMP_ERR_UNSPECIFIED;
    ffa6:	2008      	movs	r0, #8
    ffa8:	e7ef      	b.n	ff8a <smp_pairing_confirm+0x8a>
    ffaa:	bf00      	nop
    ffac:	000330f6 	.word	0x000330f6
    ffb0:	0002f50c 	.word	0x0002f50c

0000ffb4 <smp_pairing_rsp>:
{
    ffb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    ffb8:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ffba:	78eb      	ldrb	r3, [r5, #3]
    ffbc:	3b07      	subs	r3, #7
    ffbe:	2b09      	cmp	r3, #9
{
    ffc0:	4604      	mov	r4, r0
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    ffc2:	f200 80ac 	bhi.w	1011e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11f>
	smp->local_dist &= rsp->init_key_dist;
    ffc6:	792a      	ldrb	r2, [r5, #4]
    ffc8:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
	struct bt_conn *conn = smp->chan.chan.conn;
    ffcc:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	smp->local_dist &= rsp->init_key_dist;
    ffd0:	4013      	ands	r3, r2
    ffd2:	f880 30e8 	strb.w	r3, [r0, #232]	; 0xe8
	smp->remote_dist &= rsp->resp_key_dist;
    ffd6:	796a      	ldrb	r2, [r5, #5]
    ffd8:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
    ffdc:	4013      	ands	r3, r2
    ffde:	f880 30e9 	strb.w	r3, [r0, #233]	; 0xe9
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ffe2:	2302      	movs	r3, #2
    ffe4:	7403      	strb	r3, [r0, #16]
    ffe6:	682b      	ldr	r3, [r5, #0]
    ffe8:	f8c0 3011 	str.w	r3, [r0, #17]
    ffec:	88ab      	ldrh	r3, [r5, #4]
    ffee:	f8a0 3015 	strh.w	r3, [r0, #21]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    fff2:	78ab      	ldrb	r3, [r5, #2]
    fff4:	071b      	lsls	r3, r3, #28
    fff6:	d506      	bpl.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
    fff8:	7b03      	ldrb	r3, [r0, #12]
    fffa:	071e      	lsls	r6, r3, #28
    fffc:	d503      	bpl.n	10006 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    fffe:	2105      	movs	r1, #5
   10000:	3004      	adds	r0, #4
   10002:	f01c f956 	bl	2c2b2 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
   10006:	78ab      	ldrb	r3, [r5, #2]
   10008:	0698      	lsls	r0, r3, #26
   1000a:	d506      	bpl.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
   1000c:	7b23      	ldrb	r3, [r4, #12]
   1000e:	0699      	lsls	r1, r3, #26
   10010:	d503      	bpl.n	1001a <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1b>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
   10012:	2114      	movs	r1, #20
   10014:	1d20      	adds	r0, r4, #4
   10016:	f01c f94c 	bl	2c2b2 <atomic_set_bit>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
   1001a:	78ab      	ldrb	r3, [r5, #2]
   1001c:	07da      	lsls	r2, r3, #31
   1001e:	d506      	bpl.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
   10020:	7b23      	ldrb	r3, [r4, #12]
   10022:	07db      	lsls	r3, r3, #31
   10024:	d503      	bpl.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
   10026:	210d      	movs	r1, #13
   10028:	1d20      	adds	r0, r4, #4
   1002a:	f01c f942 	bl	2c2b2 <atomic_set_bit>
	smp->method = get_pair_method(smp, rsp->io_capability);
   1002e:	7829      	ldrb	r1, [r5, #0]
   10030:	4620      	mov	r0, r4
   10032:	f7fe ff63 	bl	eefc <get_pair_method>
   10036:	7220      	strb	r0, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
   10038:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
   1003c:	4620      	mov	r0, r4
   1003e:	f01c f8d9 	bl	2c1f4 <update_keys_check>
   10042:	2800      	cmp	r0, #0
   10044:	d06d      	beq.n	10122 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x123>
	err = remote_sec_level_reachable(smp);
   10046:	4620      	mov	r0, r4
   10048:	f01c f8f5 	bl	2c236 <remote_sec_level_reachable>
	if (err) {
   1004c:	4605      	mov	r5, r0
   1004e:	b9f8      	cbnz	r0, 10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10050:	1d26      	adds	r6, r4, #4
   10052:	2105      	movs	r1, #5
   10054:	4630      	mov	r0, r6
   10056:	f01c f896 	bl	2c186 <atomic_test_bit>
   1005a:	bb88      	cbnz	r0, 100c0 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xc1>
	ret = legacy_request_tk(smp);
   1005c:	4620      	mov	r0, r4
   1005e:	f7ff f805 	bl	f06c <legacy_request_tk>
	if (ret) {
   10062:	4605      	mov	r5, r0
   10064:	b9a0      	cbnz	r0, 10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   10066:	7a23      	ldrb	r3, [r4, #8]
   10068:	b9ab      	cbnz	r3, 10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   1006a:	210f      	movs	r1, #15
   1006c:	4630      	mov	r0, r6
   1006e:	f01c f88a 	bl	2c186 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   10072:	b180      	cbz	r0, 10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   10074:	4f2c      	ldr	r7, [pc, #176]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
   10076:	683b      	ldr	r3, [r7, #0]
   10078:	b16b      	cbz	r3, 10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
	    bt_auth && bt_auth->pairing_confirm) {
   1007a:	695b      	ldr	r3, [r3, #20]
   1007c:	b15b      	cbz	r3, 10096 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x97>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   1007e:	4630      	mov	r0, r6
   10080:	210a      	movs	r1, #10
   10082:	f01c f916 	bl	2c2b2 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
   10086:	683b      	ldr	r3, [r7, #0]
   10088:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
   1008c:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
   1008e:	4798      	blx	r3
}
   10090:	4628      	mov	r0, r5
   10092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   10096:	210a      	movs	r1, #10
   10098:	4630      	mov	r0, r6
   1009a:	f01c f874 	bl	2c186 <atomic_test_bit>
   1009e:	b950      	cbnz	r0, 100b6 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb7>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   100a0:	4620      	mov	r0, r4
   100a2:	2103      	movs	r1, #3
   100a4:	f01c f905 	bl	2c2b2 <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   100a8:	210e      	movs	r1, #14
   100aa:	f01c f902 	bl	2c2b2 <atomic_set_bit>
}
   100ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return legacy_send_pairing_confirm(smp);
   100b2:	f01c ba1d 	b.w	2c4f0 <legacy_send_pairing_confirm>
	atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   100b6:	2100      	movs	r1, #0
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   100b8:	4630      	mov	r0, r6
   100ba:	f01c f8fa 	bl	2c2b2 <atomic_set_bit>
		return 0;
   100be:	e7e7      	b.n	10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
	smp->remote_dist &= RECV_KEYS_SC;
   100c0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	smp->local_dist &= SEND_KEYS_SC;
   100c4:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
	smp->remote_dist &= RECV_KEYS_SC;
   100c8:	f003 0302 	and.w	r3, r3, #2
   100cc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   100d0:	7a23      	ldrb	r3, [r4, #8]
   100d2:	b9a3      	cbnz	r3, 100fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xff>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   100d4:	210f      	movs	r1, #15
   100d6:	4630      	mov	r0, r6
   100d8:	f01c f855 	bl	2c186 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
   100dc:	b178      	cbz	r0, 100fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xff>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
   100de:	f8df 8048 	ldr.w	r8, [pc, #72]	; 10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>
   100e2:	f8d8 3000 	ldr.w	r3, [r8]
   100e6:	b153      	cbz	r3, 100fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xff>
	    bt_auth && bt_auth->pairing_confirm) {
   100e8:	695b      	ldr	r3, [r3, #20]
   100ea:	b143      	cbz	r3, 100fe <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xff>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   100ec:	4630      	mov	r0, r6
   100ee:	210a      	movs	r1, #10
   100f0:	f01c f8df 	bl	2c2b2 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
   100f4:	f8d8 3000 	ldr.w	r3, [r8]
   100f8:	4638      	mov	r0, r7
   100fa:	695b      	ldr	r3, [r3, #20]
   100fc:	e7c7      	b.n	1008e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x8f>
	if (!sc_public_key) {
   100fe:	4b0b      	ldr	r3, [pc, #44]	; (1012c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x12d>)
   10100:	681b      	ldr	r3, [r3, #0]
   10102:	b90b      	cbnz	r3, 10108 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x109>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
   10104:	2106      	movs	r1, #6
   10106:	e7d7      	b.n	100b8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xb9>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
   10108:	4620      	mov	r0, r4
   1010a:	210c      	movs	r1, #12
   1010c:	f01c f8d1 	bl	2c2b2 <atomic_set_bit>
	atomic_clear_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   10110:	210b      	movs	r1, #11
   10112:	f01b ff45 	bl	2bfa0 <atomic_clear_bit>
}
   10116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return sc_send_public_key(smp);
   1011a:	f7ff bb79 	b.w	f810 <sc_send_public_key>
		return BT_SMP_ERR_ENC_KEY_SIZE;
   1011e:	2506      	movs	r5, #6
   10120:	e7b6      	b.n	10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
   10122:	2503      	movs	r5, #3
   10124:	e7b4      	b.n	10090 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x91>
   10126:	bf00      	nop
   10128:	200022d0 	.word	0x200022d0
   1012c:	2000238c 	.word	0x2000238c

00010130 <smp_pairing_random>:
{
   10130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10134:	688b      	ldr	r3, [r1, #8]
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
   10136:	f100 0937 	add.w	r9, r0, #55	; 0x37
{
   1013a:	b092      	sub	sp, #72	; 0x48
   1013c:	4607      	mov	r7, r0
   1013e:	464a      	mov	r2, r9
   10140:	f103 0110 	add.w	r1, r3, #16
   10144:	f853 0b04 	ldr.w	r0, [r3], #4
   10148:	f842 0b04 	str.w	r0, [r2], #4
   1014c:	428b      	cmp	r3, r1
   1014e:	d1f9      	bne.n	10144 <smp_pairing_random+0x14>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10150:	f107 0804 	add.w	r8, r7, #4
   10154:	2105      	movs	r1, #5
   10156:	4640      	mov	r0, r8
   10158:	f01c f815 	bl	2c186 <atomic_test_bit>
   1015c:	f8d7 a0f0 	ldr.w	sl, [r7, #240]	; 0xf0
   10160:	2800      	cmp	r0, #0
   10162:	d16c      	bne.n	1023e <smp_pairing_random+0x10e>
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10164:	f10a 0396 	add.w	r3, sl, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10168:	f107 0647 	add.w	r6, r7, #71	; 0x47
   1016c:	ad08      	add	r5, sp, #32
   1016e:	9301      	str	r3, [sp, #4]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
   10170:	f10a 038f 	add.w	r3, sl, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
   10174:	9300      	str	r3, [sp, #0]
   10176:	9502      	str	r5, [sp, #8]
   10178:	f107 0310 	add.w	r3, r7, #16
   1017c:	f107 0209 	add.w	r2, r7, #9
   10180:	4649      	mov	r1, r9
   10182:	4630      	mov	r0, r6
   10184:	f01c f958 	bl	2c438 <smp_c1>
	if (err) {
   10188:	2800      	cmp	r0, #0
   1018a:	d177      	bne.n	1027c <smp_pairing_random+0x14c>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
   1018c:	2210      	movs	r2, #16
   1018e:	4629      	mov	r1, r5
   10190:	f107 0017 	add.w	r0, r7, #23
   10194:	f01e f9d7 	bl	2e546 <memcmp>
   10198:	2800      	cmp	r0, #0
   1019a:	d14b      	bne.n	10234 <smp_pairing_random+0x104>
	    conn->role == BT_HCI_ROLE_CENTRAL) {
   1019c:	f89a 4003 	ldrb.w	r4, [sl, #3]
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   101a0:	f107 0127 	add.w	r1, r7, #39	; 0x27
   101a4:	462b      	mov	r3, r5
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   101a6:	bb44      	cbnz	r4, 101fa <smp_pairing_random+0xca>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
   101a8:	460a      	mov	r2, r1
   101aa:	4630      	mov	r0, r6
   101ac:	4649      	mov	r1, r9
   101ae:	f01b ff0d 	bl	2bfcc <smp_s1>
		if (err) {
   101b2:	2800      	cmp	r0, #0
   101b4:	d162      	bne.n	1027c <smp_pairing_random+0x14c>
	return MIN(req->max_key_size, rsp->max_key_size);
   101b6:	7d3a      	ldrb	r2, [r7, #20]
   101b8:	7b7b      	ldrb	r3, [r7, #13]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   101ba:	429a      	cmp	r2, r3
   101bc:	bf94      	ite	ls
   101be:	9200      	strls	r2, [sp, #0]
   101c0:	9300      	strhi	r3, [sp, #0]
   101c2:	a906      	add	r1, sp, #24
   101c4:	462b      	mov	r3, r5
   101c6:	aa04      	add	r2, sp, #16
   101c8:	4650      	mov	r0, sl
		(void)memset(rand, 0, sizeof(rand));
   101ca:	e9cd 4406 	strd	r4, r4, [sp, #24]
		(void)memset(ediv, 0, sizeof(ediv));
   101ce:	f8ad 4010 	strh.w	r4, [sp, #16]
		if (bt_conn_le_start_encryption(conn, rand, ediv, tmp,
   101d2:	f01a fb7e 	bl	2a8d2 <bt_conn_le_start_encryption>
   101d6:	b158      	cbz	r0, 101f0 <smp_pairing_random+0xc0>
			BT_ERR("Failed to start encryption");
   101d8:	4b81      	ldr	r3, [pc, #516]	; (103e0 <smp_pairing_random+0x2b0>)
   101da:	9310      	str	r3, [sp, #64]	; 0x40
   101dc:	2302      	movs	r3, #2
   101de:	9305      	str	r3, [sp, #20]
			BT_ERR("Calculate STK failed");
   101e0:	930f      	str	r3, [sp, #60]	; 0x3c
   101e2:	aa0f      	add	r2, sp, #60	; 0x3c
   101e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_ERR("Unknown pairing method (%u)", smp->method);
   101e8:	487e      	ldr	r0, [pc, #504]	; (103e4 <smp_pairing_random+0x2b4>)
   101ea:	f01b ff37 	bl	2c05c <z_log_msg2_static_create.constprop.0>
   101ee:	e045      	b.n	1027c <smp_pairing_random+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   101f0:	2101      	movs	r1, #1
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   101f2:	4640      	mov	r0, r8
   101f4:	f01c f85d 	bl	2c2b2 <atomic_set_bit>
			return 0;
   101f8:	e01d      	b.n	10236 <smp_pairing_random+0x106>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
   101fa:	464a      	mov	r2, r9
   101fc:	4630      	mov	r0, r6
   101fe:	f01b fee5 	bl	2bfcc <smp_s1>
		if (err) {
   10202:	b120      	cbz	r0, 1020e <smp_pairing_random+0xde>
			BT_ERR("Calculate STK failed");
   10204:	4b78      	ldr	r3, [pc, #480]	; (103e8 <smp_pairing_random+0x2b8>)
   10206:	9310      	str	r3, [sp, #64]	; 0x40
   10208:	2302      	movs	r3, #2
   1020a:	9306      	str	r3, [sp, #24]
   1020c:	e7e8      	b.n	101e0 <smp_pairing_random+0xb0>
   1020e:	aa0c      	add	r2, sp, #48	; 0x30
   10210:	462b      	mov	r3, r5
   10212:	cb03      	ldmia	r3!, {r0, r1}
   10214:	4293      	cmp	r3, r2
   10216:	6030      	str	r0, [r6, #0]
   10218:	6071      	str	r1, [r6, #4]
   1021a:	461d      	mov	r5, r3
   1021c:	f106 0608 	add.w	r6, r6, #8
   10220:	d1f6      	bne.n	10210 <smp_pairing_random+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   10222:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   10224:	4640      	mov	r0, r8
   10226:	f01c f844 	bl	2c2b2 <atomic_set_bit>
	return smp_send_pairing_random(smp);
   1022a:	4638      	mov	r0, r7
   1022c:	f01c f89f 	bl	2c36e <smp_send_pairing_random>
   10230:	4604      	mov	r4, r0
   10232:	e000      	b.n	10236 <smp_pairing_random+0x106>
		return BT_SMP_ERR_CONFIRM_FAILED;
   10234:	2404      	movs	r4, #4
}
   10236:	4620      	mov	r0, r4
   10238:	b012      	add	sp, #72	; 0x48
   1023a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   1023e:	f89a 3003 	ldrb.w	r3, [sl, #3]
   10242:	2b00      	cmp	r3, #0
   10244:	d150      	bne.n	102e8 <smp_pairing_random+0x1b8>
		err = sc_smp_check_confirm(smp);
   10246:	4638      	mov	r0, r7
   10248:	f7fe fdcc 	bl	ede4 <sc_smp_check_confirm>
		if (err) {
   1024c:	4604      	mov	r4, r0
   1024e:	2800      	cmp	r0, #0
   10250:	d1f1      	bne.n	10236 <smp_pairing_random+0x106>
		switch (smp->method) {
   10252:	7a3b      	ldrb	r3, [r7, #8]
   10254:	2b05      	cmp	r3, #5
   10256:	f200 80b6 	bhi.w	103c6 <smp_pairing_random+0x296>
   1025a:	e8df f003 	tbb	[pc, r3]
   1025e:	2038      	.short	0x2038
   10260:	38b40320 	.word	0x38b40320
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
   10264:	ab0c      	add	r3, sp, #48	; 0x30
   10266:	4861      	ldr	r0, [pc, #388]	; (103ec <smp_pairing_random+0x2bc>)
   10268:	9300      	str	r3, [sp, #0]
   1026a:	6800      	ldr	r0, [r0, #0]
   1026c:	464b      	mov	r3, r9
   1026e:	f107 0227 	add.w	r2, r7, #39	; 0x27
   10272:	f107 0157 	add.w	r1, r7, #87	; 0x57
   10276:	f7fe fcbf 	bl	ebf8 <smp_g2>
   1027a:	b108      	cbz	r0, 10280 <smp_pairing_random+0x150>
		return BT_SMP_ERR_UNSPECIFIED;
   1027c:	2408      	movs	r4, #8
   1027e:	e7da      	b.n	10236 <smp_pairing_random+0x106>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10280:	210a      	movs	r1, #10
   10282:	4640      	mov	r0, r8
   10284:	f01c f815 	bl	2c2b2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   10288:	2109      	movs	r1, #9
   1028a:	f01c f812 	bl	2c2b2 <atomic_set_bit>
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1028e:	4b58      	ldr	r3, [pc, #352]	; (103f0 <smp_pairing_random+0x2c0>)
   10290:	990c      	ldr	r1, [sp, #48]	; 0x30
   10292:	681b      	ldr	r3, [r3, #0]
   10294:	689b      	ldr	r3, [r3, #8]
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   10296:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
   1029a:	4798      	blx	r3
			return 0;
   1029c:	e7cb      	b.n	10236 <smp_pairing_random+0x106>
			smp->passkey_round++;
   1029e:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
   102a2:	3301      	adds	r3, #1
   102a4:	b2db      	uxtb	r3, r3
			if (smp->passkey_round == 20U) {
   102a6:	2b14      	cmp	r3, #20
			smp->passkey_round++;
   102a8:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
			if (smp->passkey_round == 20U) {
   102ac:	d00f      	beq.n	102ce <smp_pairing_random+0x19e>
			if (bt_rand(smp->prnd, 16)) {
   102ae:	2110      	movs	r1, #16
   102b0:	f107 0027 	add.w	r0, r7, #39	; 0x27
   102b4:	f003 ff64 	bl	14180 <bt_rand>
   102b8:	2800      	cmp	r0, #0
   102ba:	d1df      	bne.n	1027c <smp_pairing_random+0x14c>
			atomic_set_bit(smp->allowed_cmds,
   102bc:	2103      	movs	r1, #3
   102be:	4638      	mov	r0, r7
   102c0:	f01b fff7 	bl	2c2b2 <atomic_set_bit>
}
   102c4:	b012      	add	sp, #72	; 0x48
   102c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return smp_send_pairing_confirm(smp);
   102ca:	f7ff b983 	b.w	f5d4 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   102ce:	2107      	movs	r1, #7
   102d0:	4640      	mov	r0, r8
   102d2:	f01b ff58 	bl	2c186 <atomic_test_bit>
   102d6:	b108      	cbz	r0, 102dc <smp_pairing_random+0x1ac>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   102d8:	2109      	movs	r1, #9
   102da:	e78a      	b.n	101f2 <smp_pairing_random+0xc2>
		return compute_and_send_central_dhcheck(smp);
   102dc:	4638      	mov	r0, r7
}
   102de:	b012      	add	sp, #72	; 0x48
   102e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		return compute_and_send_central_dhcheck(smp);
   102e4:	f7ff bc12 	b.w	fb0c <compute_and_send_central_dhcheck>
	switch (smp->method) {
   102e8:	7a3b      	ldrb	r3, [r7, #8]
   102ea:	2b05      	cmp	r3, #5
   102ec:	d86b      	bhi.n	103c6 <smp_pairing_random+0x296>
   102ee:	e8df f003 	tbb	[pc, r3]
   102f2:	211b      	.short	0x211b
   102f4:	496a0321 	.word	0x496a0321
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
   102f8:	ab0c      	add	r3, sp, #48	; 0x30
   102fa:	493c      	ldr	r1, [pc, #240]	; (103ec <smp_pairing_random+0x2bc>)
   102fc:	9300      	str	r3, [sp, #0]
   102fe:	6809      	ldr	r1, [r1, #0]
   10300:	f107 0327 	add.w	r3, r7, #39	; 0x27
   10304:	464a      	mov	r2, r9
   10306:	f107 0057 	add.w	r0, r7, #87	; 0x57
   1030a:	f7fe fc75 	bl	ebf8 <smp_g2>
   1030e:	2800      	cmp	r0, #0
   10310:	d1b4      	bne.n	1027c <smp_pairing_random+0x14c>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
   10312:	210a      	movs	r1, #10
   10314:	4640      	mov	r0, r8
   10316:	f01b ffcc 	bl	2c2b2 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
   1031a:	4b35      	ldr	r3, [pc, #212]	; (103f0 <smp_pairing_random+0x2c0>)
   1031c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1031e:	681b      	ldr	r3, [r3, #0]
   10320:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
   10324:	689b      	ldr	r3, [r3, #8]
   10326:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   10328:	210d      	movs	r1, #13
   1032a:	4638      	mov	r0, r7
   1032c:	f01b ffc1 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   10330:	2110      	movs	r1, #16
   10332:	e777      	b.n	10224 <smp_pairing_random+0xf4>
		err = sc_smp_check_confirm(smp);
   10334:	4638      	mov	r0, r7
   10336:	f7fe fd55 	bl	ede4 <sc_smp_check_confirm>
		if (err) {
   1033a:	4604      	mov	r4, r0
   1033c:	2800      	cmp	r0, #0
   1033e:	f47f af7a 	bne.w	10236 <smp_pairing_random+0x106>
		atomic_set_bit(smp->allowed_cmds,
   10342:	2103      	movs	r1, #3
   10344:	4638      	mov	r0, r7
   10346:	f01b ffb4 	bl	2c2b2 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
   1034a:	f01c f810 	bl	2c36e <smp_send_pairing_random>
		if (err) {
   1034e:	4604      	mov	r4, r0
   10350:	2800      	cmp	r0, #0
   10352:	f47f af70 	bne.w	10236 <smp_pairing_random+0x106>
		smp->passkey_round++;
   10356:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
   1035a:	3301      	adds	r3, #1
   1035c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
   1035e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
   10360:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
   10364:	d105      	bne.n	10372 <smp_pairing_random+0x242>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
   10366:	210d      	movs	r1, #13
   10368:	4638      	mov	r0, r7
   1036a:	f01b ffa2 	bl	2c2b2 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1036e:	2110      	movs	r1, #16
   10370:	e73f      	b.n	101f2 <smp_pairing_random+0xc2>
		if (bt_rand(smp->prnd, 16)) {
   10372:	2110      	movs	r1, #16
   10374:	f107 0027 	add.w	r0, r7, #39	; 0x27
   10378:	f003 ff02 	bl	14180 <bt_rand>
   1037c:	2800      	cmp	r0, #0
   1037e:	f43f af5a 	beq.w	10236 <smp_pairing_random+0x106>
   10382:	e77b      	b.n	1027c <smp_pairing_random+0x14c>
		if (bt_rand(smp->prnd, 16)) {
   10384:	2110      	movs	r1, #16
   10386:	f107 0027 	add.w	r0, r7, #39	; 0x27
   1038a:	f003 fef9 	bl	14180 <bt_rand>
   1038e:	4604      	mov	r4, r0
   10390:	2800      	cmp	r0, #0
   10392:	f47f af73 	bne.w	1027c <smp_pairing_random+0x14c>
		if (bt_auth && bt_auth->oob_data_request) {
   10396:	4d16      	ldr	r5, [pc, #88]	; (103f0 <smp_pairing_random+0x2c0>)
   10398:	682b      	ldr	r3, [r5, #0]
   1039a:	b1f3      	cbz	r3, 103da <smp_pairing_random+0x2aa>
   1039c:	68db      	ldr	r3, [r3, #12]
   1039e:	b1e3      	cbz	r3, 103da <smp_pairing_random+0x2aa>
			struct bt_conn_oob_info info = {
   103a0:	4b14      	ldr	r3, [pc, #80]	; (103f4 <smp_pairing_random+0x2c4>)
			le_sc_oob_config_set(smp, &info);
   103a2:	a90c      	add	r1, sp, #48	; 0x30
			struct bt_conn_oob_info info = {
   103a4:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
   103a8:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
			le_sc_oob_config_set(smp, &info);
   103ac:	4638      	mov	r0, r7
   103ae:	f01b fdd7 	bl	2bf60 <le_sc_oob_config_set>
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   103b2:	210c      	movs	r1, #12
			smp->oobd_remote = NULL;
   103b4:	e9c7 4438 	strd	r4, r4, [r7, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
   103b8:	4640      	mov	r0, r8
   103ba:	f01b ff7a 	bl	2c2b2 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
   103be:	682b      	ldr	r3, [r5, #0]
   103c0:	a90c      	add	r1, sp, #48	; 0x30
   103c2:	68db      	ldr	r3, [r3, #12]
   103c4:	e767      	b.n	10296 <smp_pairing_random+0x166>
		BT_ERR("Unknown pairing method (%u)", smp->method);
   103c6:	4a0c      	ldr	r2, [pc, #48]	; (103f8 <smp_pairing_random+0x2c8>)
	switch (smp->method) {
   103c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
		BT_ERR("Unknown pairing method (%u)", smp->method);
   103cc:	2303      	movs	r3, #3
   103ce:	9308      	str	r3, [sp, #32]
   103d0:	930f      	str	r3, [sp, #60]	; 0x3c
   103d2:	aa0f      	add	r2, sp, #60	; 0x3c
   103d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   103d8:	e706      	b.n	101e8 <smp_pairing_random+0xb8>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
   103da:	2402      	movs	r4, #2
   103dc:	e72b      	b.n	10236 <smp_pairing_random+0x106>
   103de:	bf00      	nop
   103e0:	00033260 	.word	0x00033260
   103e4:	0002f50c 	.word	0x0002f50c
   103e8:	00033313 	.word	0x00033313
   103ec:	2000238c 	.word	0x2000238c
   103f0:	200022d0 	.word	0x200022d0
   103f4:	0002f706 	.word	0x0002f706
   103f8:	000330f6 	.word	0x000330f6

000103fc <smp_pairing_complete>:
{
   103fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   103fe:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   10402:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   10404:	1d07      	adds	r7, r0, #4
	if (!status) {
   10406:	b9b9      	cbnz	r1, 10438 <smp_pairing_complete+0x3c>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   10408:	210d      	movs	r1, #13
		if (bt_auth && bt_auth->pairing_complete) {
   1040a:	4b28      	ldr	r3, [pc, #160]	; (104ac <smp_pairing_complete+0xb0>)
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   1040c:	4638      	mov	r0, r7
   1040e:	f01b feba 	bl	2c186 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
   10412:	681b      	ldr	r3, [r3, #0]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
   10414:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
   10416:	b11b      	cbz	r3, 10420 <smp_pairing_complete+0x24>
   10418:	699b      	ldr	r3, [r3, #24]
   1041a:	b10b      	cbz	r3, 10420 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   1041c:	4620      	mov	r0, r4
   1041e:	4798      	blx	r3
	smp_reset(smp);
   10420:	4628      	mov	r0, r5
   10422:	f01b ffe0 	bl	2c3e6 <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
   10426:	7a62      	ldrb	r2, [r4, #9]
   10428:	7aa3      	ldrb	r3, [r4, #10]
   1042a:	429a      	cmp	r2, r3
   1042c:	d03c      	beq.n	104a8 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
   1042e:	4620      	mov	r0, r4
}
   10430:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		bt_smp_start_security(conn);
   10434:	f01c b94a 	b.w	2c6cc <bt_smp_start_security>
	switch (smp_err) {
   10438:	3901      	subs	r1, #1
   1043a:	b2c9      	uxtb	r1, r1
   1043c:	290e      	cmp	r1, #14
   1043e:	bf9c      	itt	ls
   10440:	4b1b      	ldrls	r3, [pc, #108]	; (104b0 <smp_pairing_complete+0xb4>)
   10442:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
   10444:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
   10448:	bf88      	it	hi
   1044a:	2609      	movhi	r6, #9
		if (conn->le.keys &&
   1044c:	b143      	cbz	r3, 10460 <smp_pairing_complete+0x64>
   1044e:	7b1b      	ldrb	r3, [r3, #12]
   10450:	bb1b      	cbnz	r3, 1049a <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
   10452:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10456:	f01c fac1 	bl	2c9dc <bt_keys_clear>
			conn->le.keys = NULL;
   1045a:	2300      	movs	r3, #0
   1045c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   10460:	2102      	movs	r1, #2
   10462:	4638      	mov	r0, r7
   10464:	f01b fe8f 	bl	2c186 <atomic_test_bit>
   10468:	b940      	cbnz	r0, 1047c <smp_pairing_complete+0x80>
	switch (err) {
   1046a:	2e07      	cmp	r6, #7
   1046c:	bf96      	itet	ls
   1046e:	4b11      	ldrls	r3, [pc, #68]	; (104b4 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
   10470:	211f      	movhi	r1, #31
   10472:	5d99      	ldrbls	r1, [r3, r6]
			bt_conn_security_changed(conn,
   10474:	4632      	mov	r2, r6
   10476:	4620      	mov	r0, r4
   10478:	f7fb fb28 	bl	bacc <bt_conn_security_changed>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1047c:	2103      	movs	r1, #3
   1047e:	4638      	mov	r0, r7
   10480:	f01b fe81 	bl	2c186 <atomic_test_bit>
   10484:	2800      	cmp	r0, #0
   10486:	d0cb      	beq.n	10420 <smp_pairing_complete+0x24>
   10488:	4b08      	ldr	r3, [pc, #32]	; (104ac <smp_pairing_complete+0xb0>)
   1048a:	681b      	ldr	r3, [r3, #0]
   1048c:	2b00      	cmp	r3, #0
   1048e:	d0c7      	beq.n	10420 <smp_pairing_complete+0x24>
		    bt_auth && bt_auth->pairing_failed) {
   10490:	69db      	ldr	r3, [r3, #28]
   10492:	2b00      	cmp	r3, #0
   10494:	d0c4      	beq.n	10420 <smp_pairing_complete+0x24>
			bt_auth->pairing_failed(conn, security_err);
   10496:	4631      	mov	r1, r6
   10498:	e7c0      	b.n	1041c <smp_pairing_complete+0x20>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
   1049a:	2102      	movs	r1, #2
   1049c:	4638      	mov	r0, r7
   1049e:	f01b fe72 	bl	2c186 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
   104a2:	2800      	cmp	r0, #0
   104a4:	d1d5      	bne.n	10452 <smp_pairing_complete+0x56>
   104a6:	e7db      	b.n	10460 <smp_pairing_complete+0x64>
}
   104a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   104aa:	bf00      	nop
   104ac:	200022d0 	.word	0x200022d0
   104b0:	00033417 	.word	0x00033417
   104b4:	0003342f 	.word	0x0003342f

000104b8 <bt_smp_recv>:
{
   104b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   104bc:	b088      	sub	sp, #32
	if (buf->len < sizeof(*hdr)) {
   104be:	898b      	ldrh	r3, [r1, #12]
{
   104c0:	af00      	add	r7, sp, #0
   104c2:	4680      	mov	r8, r0
   104c4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   104c6:	b983      	cbnz	r3, 104ea <bt_smp_recv+0x32>
		BT_ERR("Too small SMP PDU received");
   104c8:	4b3f      	ldr	r3, [pc, #252]	; (105c8 <bt_smp_recv+0x110>)
   104ca:	61bb      	str	r3, [r7, #24]
   104cc:	2302      	movs	r3, #2
   104ce:	607b      	str	r3, [r7, #4]
   104d0:	617b      	str	r3, [r7, #20]
   104d2:	f107 0214 	add.w	r2, r7, #20
   104d6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   104da:	483c      	ldr	r0, [pc, #240]	; (105cc <bt_smp_recv+0x114>)
   104dc:	f01b fdbe 	bl	2c05c <z_log_msg2_static_create.constprop.0>
}
   104e0:	2000      	movs	r0, #0
   104e2:	3720      	adds	r7, #32
   104e4:	46bd      	mov	sp, r7
   104e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   104ea:	2101      	movs	r1, #1
   104ec:	f105 0008 	add.w	r0, r5, #8
   104f0:	f01c fb1c 	bl	2cb2c <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   104f4:	2104      	movs	r1, #4
   104f6:	4606      	mov	r6, r0
   104f8:	f1a8 00ec 	sub.w	r0, r8, #236	; 0xec
   104fc:	f01b fe43 	bl	2c186 <atomic_test_bit>
   10500:	f1a8 04f0 	sub.w	r4, r8, #240	; 0xf0
   10504:	7831      	ldrb	r1, [r6, #0]
   10506:	b150      	cbz	r0, 1051e <bt_smp_recv+0x66>
		BT_WARN("SMP command (code 0x%02x) received after timeout",
   10508:	4b31      	ldr	r3, [pc, #196]	; (105d0 <bt_smp_recv+0x118>)
   1050a:	e9c7 3106 	strd	r3, r1, [r7, #24]
   1050e:	2303      	movs	r3, #3
   10510:	607b      	str	r3, [r7, #4]
   10512:	617b      	str	r3, [r7, #20]
   10514:	f107 0214 	add.w	r2, r7, #20
   10518:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1051c:	e7dd      	b.n	104da <bt_smp_recv+0x22>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
   1051e:	290e      	cmp	r1, #14
   10520:	d901      	bls.n	10526 <bt_smp_recv+0x6e>
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
   10522:	4b2c      	ldr	r3, [pc, #176]	; (105d4 <bt_smp_recv+0x11c>)
   10524:	e7f1      	b.n	1050a <bt_smp_recv+0x52>
	if (!handlers[hdr->code].func) {
   10526:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 105d8 <bt_smp_recv+0x120>
   1052a:	f858 3031 	ldr.w	r3, [r8, r1, lsl #3]
   1052e:	b98b      	cbnz	r3, 10554 <bt_smp_recv+0x9c>
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
   10530:	4b2a      	ldr	r3, [pc, #168]	; (105dc <bt_smp_recv+0x124>)
   10532:	4826      	ldr	r0, [pc, #152]	; (105cc <bt_smp_recv+0x114>)
   10534:	e9c7 3106 	strd	r3, r1, [r7, #24]
   10538:	f107 0214 	add.w	r2, r7, #20
   1053c:	2303      	movs	r3, #3
   1053e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   10542:	607b      	str	r3, [r7, #4]
   10544:	617b      	str	r3, [r7, #20]
   10546:	f01b fd89 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
   1054a:	2107      	movs	r1, #7
		smp_error(smp, err);
   1054c:	4620      	mov	r0, r4
   1054e:	f01c f963 	bl	2c818 <smp_error>
   10552:	e7c5      	b.n	104e0 <bt_smp_recv+0x28>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
   10554:	4620      	mov	r0, r4
   10556:	f01b fe94 	bl	2c282 <atomic_test_and_clear_bit>
   1055a:	7833      	ldrb	r3, [r6, #0]
   1055c:	b988      	cbnz	r0, 10582 <bt_smp_recv+0xca>
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
   1055e:	4a20      	ldr	r2, [pc, #128]	; (105e0 <bt_smp_recv+0x128>)
   10560:	481a      	ldr	r0, [pc, #104]	; (105cc <bt_smp_recv+0x114>)
   10562:	e9c7 2306 	strd	r2, r3, [r7, #24]
   10566:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   1056a:	2303      	movs	r3, #3
   1056c:	f107 0214 	add.w	r2, r7, #20
   10570:	607b      	str	r3, [r7, #4]
   10572:	617b      	str	r3, [r7, #20]
   10574:	f01b fd72 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
   10578:	7833      	ldrb	r3, [r6, #0]
   1057a:	2b05      	cmp	r3, #5
   1057c:	d0b0      	beq.n	104e0 <bt_smp_recv+0x28>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1057e:	2108      	movs	r1, #8
   10580:	e7e4      	b.n	1054c <bt_smp_recv+0x94>
	if (buf->len != handlers[hdr->code].expect_len) {
   10582:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
   10586:	89a9      	ldrh	r1, [r5, #12]
   10588:	7912      	ldrb	r2, [r2, #4]
   1058a:	428a      	cmp	r2, r1
   1058c:	d012      	beq.n	105b4 <bt_smp_recv+0xfc>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1058e:	466d      	mov	r5, sp
   10590:	b088      	sub	sp, #32
   10592:	466a      	mov	r2, sp
   10594:	4813      	ldr	r0, [pc, #76]	; (105e4 <bt_smp_recv+0x12c>)
   10596:	6193      	str	r3, [r2, #24]
   10598:	2304      	movs	r3, #4
   1059a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   1059e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   105a2:	f842 3f0c 	str.w	r3, [r2, #12]!
   105a6:	4809      	ldr	r0, [pc, #36]	; (105cc <bt_smp_recv+0x114>)
   105a8:	60bb      	str	r3, [r7, #8]
   105aa:	f01b fd57 	bl	2c05c <z_log_msg2_static_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
   105ae:	210a      	movs	r1, #10
   105b0:	46ad      	mov	sp, r5
   105b2:	e7cb      	b.n	1054c <bt_smp_recv+0x94>
	err = handlers[hdr->code].func(smp, buf);
   105b4:	4629      	mov	r1, r5
   105b6:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
   105ba:	4620      	mov	r0, r4
   105bc:	4798      	blx	r3
	if (err) {
   105be:	4601      	mov	r1, r0
   105c0:	2800      	cmp	r0, #0
   105c2:	d08d      	beq.n	104e0 <bt_smp_recv+0x28>
   105c4:	e7c2      	b.n	1054c <bt_smp_recv+0x94>
   105c6:	bf00      	nop
   105c8:	00033328 	.word	0x00033328
   105cc:	0002f50c 	.word	0x0002f50c
   105d0:	00033343 	.word	0x00033343
   105d4:	00033374 	.word	0x00033374
   105d8:	0002fe00 	.word	0x0002fe00
   105dc:	00033396 	.word	0x00033396
   105e0:	000333b0 	.word	0x000333b0
   105e4:	00032e08 	.word	0x00032e08

000105e8 <bt_smp_pkey_ready>:
{
   105e8:	b530      	push	{r4, r5, lr}
	sc_public_key = pkey;
   105ea:	4b21      	ldr	r3, [pc, #132]	; (10670 <bt_smp_pkey_ready+0x88>)
{
   105ec:	b089      	sub	sp, #36	; 0x24
	sc_public_key = pkey;
   105ee:	6018      	str	r0, [r3, #0]
	if (!pkey) {
   105f0:	b960      	cbnz	r0, 1060c <bt_smp_pkey_ready+0x24>
		BT_WARN("Public key not available");
   105f2:	4b20      	ldr	r3, [pc, #128]	; (10674 <bt_smp_pkey_ready+0x8c>)
   105f4:	9306      	str	r3, [sp, #24]
   105f6:	4820      	ldr	r0, [pc, #128]	; (10678 <bt_smp_pkey_ready+0x90>)
   105f8:	2302      	movs	r3, #2
   105fa:	aa05      	add	r2, sp, #20
   105fc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   10600:	9301      	str	r3, [sp, #4]
   10602:	9305      	str	r3, [sp, #20]
   10604:	f01b fd2a 	bl	2c05c <z_log_msg2_static_create.constprop.0>
}
   10608:	b009      	add	sp, #36	; 0x24
   1060a:	bd30      	pop	{r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1060c:	4c1b      	ldr	r4, [pc, #108]	; (1067c <bt_smp_pkey_ready+0x94>)
	z_impl_k_sem_give(sem);
   1060e:	481c      	ldr	r0, [pc, #112]	; (10680 <bt_smp_pkey_ready+0x98>)
   10610:	f014 fb56 	bl	24cc0 <z_impl_k_sem_give>
   10614:	f3bf 8f5b 	dmb	ish
   10618:	6863      	ldr	r3, [r4, #4]
   1061a:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
   1061e:	f013 0f40 	tst.w	r3, #64	; 0x40
   10622:	4625      	mov	r5, r4
   10624:	d0f0      	beq.n	10608 <bt_smp_pkey_ready+0x20>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   10626:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1062a:	78db      	ldrb	r3, [r3, #3]
			err = sc_send_public_key(smp);
   1062c:	4620      	mov	r0, r4
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1062e:	b99b      	cbnz	r3, 10658 <bt_smp_pkey_ready+0x70>
			err = sc_send_public_key(smp);
   10630:	f7ff f8ee 	bl	f810 <sc_send_public_key>
			if (err) {
   10634:	4601      	mov	r1, r0
   10636:	b110      	cbz	r0, 1063e <bt_smp_pkey_ready+0x56>
				smp_error(smp, err);
   10638:	4620      	mov	r0, r4
   1063a:	f01c f8ed 	bl	2c818 <smp_error>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1063e:	f3bf 8f5b 	dmb	ish
   10642:	e855 3f00 	ldrex	r3, [r5]
   10646:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   1064a:	e845 3200 	strex	r2, r3, [r5]
   1064e:	2a00      	cmp	r2, #0
   10650:	d1f7      	bne.n	10642 <bt_smp_pkey_ready+0x5a>
   10652:	f3bf 8f5b 	dmb	ish
			continue;
   10656:	e7d7      	b.n	10608 <bt_smp_pkey_ready+0x20>
		err = smp_public_key_periph(smp);
   10658:	f7ff f906 	bl	f868 <smp_public_key_periph>
		if (err) {
   1065c:	4601      	mov	r1, r0
   1065e:	2800      	cmp	r0, #0
   10660:	d0d2      	beq.n	10608 <bt_smp_pkey_ready+0x20>
			smp_error(smp, err);
   10662:	4620      	mov	r0, r4
}
   10664:	b009      	add	sp, #36	; 0x24
   10666:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			smp_error(smp, err);
   1066a:	f01c b8d5 	b.w	2c818 <smp_error>
   1066e:	bf00      	nop
   10670:	2000238c 	.word	0x2000238c
   10674:	000333cb 	.word	0x000333cb
   10678:	0002f50c 	.word	0x0002f50c
   1067c:	20001990 	.word	0x20001990
   10680:	20000d84 	.word	0x20000d84

00010684 <smp_ident_addr_info>:
{
   10684:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   10688:	688f      	ldr	r7, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
   1068a:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1068e:	783b      	ldrb	r3, [r7, #0]
{
   10690:	4605      	mov	r5, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   10692:	f104 0888 	add.w	r8, r4, #136	; 0x88
   10696:	b31b      	cbz	r3, 106e0 <smp_ident_addr_info+0x5c>
	if (!bt_addr_le_is_identity(&req->addr)) {
   10698:	79bb      	ldrb	r3, [r7, #6]
   1069a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1069e:	2bc0      	cmp	r3, #192	; 0xc0
   106a0:	d01e      	beq.n	106e0 <smp_ident_addr_info+0x5c>
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
   106a2:	4638      	mov	r0, r7
   106a4:	f7f7 fdd8 	bl	8258 <bt_addr_le_str_real>
   106a8:	2400      	movs	r4, #0
   106aa:	4b4c      	ldr	r3, [pc, #304]	; (107dc <smp_ident_addr_info+0x158>)
   106ac:	494c      	ldr	r1, [pc, #304]	; (107e0 <smp_ident_addr_info+0x15c>)
   106ae:	9002      	str	r0, [sp, #8]
   106b0:	2201      	movs	r2, #1
   106b2:	9301      	str	r3, [sp, #4]
   106b4:	4620      	mov	r0, r4
   106b6:	4623      	mov	r3, r4
   106b8:	9400      	str	r4, [sp, #0]
   106ba:	f01b fcd2 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
   106be:	4640      	mov	r0, r8
   106c0:	f7f7 fdca 	bl	8258 <bt_addr_le_str_real>
   106c4:	4b47      	ldr	r3, [pc, #284]	; (107e4 <smp_ident_addr_info+0x160>)
   106c6:	9002      	str	r0, [sp, #8]
   106c8:	e9cd 4300 	strd	r4, r3, [sp]
   106cc:	4620      	mov	r0, r4
   106ce:	4944      	ldr	r1, [pc, #272]	; (107e0 <smp_ident_addr_info+0x15c>)
   106d0:	4623      	mov	r3, r4
   106d2:	2201      	movs	r2, #1
   106d4:	f01b fcc5 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
		return BT_SMP_ERR_INVALID_PARAMS;
   106d8:	200a      	movs	r0, #10
}
   106da:	b004      	add	sp, #16
   106dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
   106e0:	2207      	movs	r2, #7
   106e2:	4639      	mov	r1, r7
   106e4:	4640      	mov	r0, r8
   106e6:	f01d ff2e 	bl	2e546 <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
   106ea:	b168      	cbz	r0, 10708 <smp_ident_addr_info+0x84>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
   106ec:	7a20      	ldrb	r0, [r4, #8]
   106ee:	4639      	mov	r1, r7
   106f0:	f000 fad4 	bl	10c9c <bt_keys_find_addr>
		if (keys) {
   106f4:	4606      	mov	r6, r0
   106f6:	b138      	cbz	r0, 10708 <smp_ident_addr_info+0x84>
			if (!update_keys_check(smp, keys)) {
   106f8:	4601      	mov	r1, r0
   106fa:	4628      	mov	r0, r5
   106fc:	f01b fd7a 	bl	2c1f4 <update_keys_check>
   10700:	b1e0      	cbz	r0, 1073c <smp_ident_addr_info+0xb8>
			bt_keys_clear(keys);
   10702:	4630      	mov	r0, r6
   10704:	f01c f96a 	bl	2c9dc <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10708:	210d      	movs	r1, #13
   1070a:	1d28      	adds	r0, r5, #4
   1070c:	f01b fd3b 	bl	2c186 <atomic_test_bit>
   10710:	2800      	cmp	r0, #0
   10712:	d03e      	beq.n	10792 <smp_ident_addr_info+0x10e>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   10714:	7a21      	ldrb	r1, [r4, #8]
   10716:	4642      	mov	r2, r8
   10718:	2002      	movs	r0, #2
   1071a:	f01c f94b 	bl	2c9b4 <bt_keys_get_type>
		if (!keys) {
   1071e:	4606      	mov	r6, r0
   10720:	b970      	cbnz	r0, 10740 <smp_ident_addr_info+0xbc>
			BT_ERR("Unable to get keys for %s",
   10722:	4640      	mov	r0, r8
   10724:	f7f7 fd98 	bl	8258 <bt_addr_le_str_real>
   10728:	4b2f      	ldr	r3, [pc, #188]	; (107e8 <smp_ident_addr_info+0x164>)
   1072a:	9002      	str	r0, [sp, #8]
   1072c:	e9cd 6300 	strd	r6, r3, [sp]
   10730:	492b      	ldr	r1, [pc, #172]	; (107e0 <smp_ident_addr_info+0x15c>)
   10732:	4633      	mov	r3, r6
   10734:	2201      	movs	r2, #1
   10736:	4630      	mov	r0, r6
   10738:	f01b fc93 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
				return BT_SMP_ERR_UNSPECIFIED;
   1073c:	2008      	movs	r0, #8
   1073e:	e7cc      	b.n	106da <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   10740:	78e3      	ldrb	r3, [r4, #3]
   10742:	bbcb      	cbnz	r3, 107b8 <smp_ident_addr_info+0x134>
			dst = &conn->le.resp_addr;
   10744:	f104 0396 	add.w	r3, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   10748:	781a      	ldrb	r2, [r3, #0]
   1074a:	2a01      	cmp	r2, #1
   1074c:	d11e      	bne.n	1078c <smp_ident_addr_info+0x108>
		if (bt_addr_le_is_rpa(dst)) {
   1074e:	799a      	ldrb	r2, [r3, #6]
   10750:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   10754:	2a40      	cmp	r2, #64	; 0x40
   10756:	d119      	bne.n	1078c <smp_ident_addr_info+0x108>
   10758:	f8d3 2001 	ldr.w	r2, [r3, #1]
   1075c:	f8c6 203a 	str.w	r2, [r6, #58]	; 0x3a
   10760:	f8b3 3005 	ldrh.w	r3, [r3, #5]
   10764:	87f3      	strh	r3, [r6, #62]	; 0x3e
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   10766:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1076a:	b17b      	cbz	r3, 1078c <smp_ident_addr_info+0x108>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1076c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   10770:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10774:	2bc0      	cmp	r3, #192	; 0xc0
   10776:	d009      	beq.n	1078c <smp_ident_addr_info+0x108>
				bt_addr_le_copy(&keys->addr, &req->addr);
   10778:	4639      	mov	r1, r7
   1077a:	1c70      	adds	r0, r6, #1
   1077c:	f01b fc1f 	bl	2bfbe <bt_addr_le_copy>
				bt_addr_le_copy(&conn->le.dst, &req->addr);
   10780:	4640      	mov	r0, r8
   10782:	f01b fc1c 	bl	2bfbe <bt_addr_le_copy>
				bt_conn_identity_resolved(conn);
   10786:	4620      	mov	r0, r4
   10788:	f7fb f972 	bl	ba70 <bt_conn_identity_resolved>
		bt_id_add(keys);
   1078c:	4630      	mov	r0, r6
   1078e:	f7f9 fc59 	bl	a044 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   10792:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   10796:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1079a:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1079c:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   107a0:	d503      	bpl.n	107aa <smp_ident_addr_info+0x126>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   107a2:	210a      	movs	r1, #10
   107a4:	4628      	mov	r0, r5
   107a6:	f01b fd84 	bl	2c2b2 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   107aa:	78e3      	ldrb	r3, [r4, #3]
   107ac:	b13b      	cbz	r3, 107be <smp_ident_addr_info+0x13a>
	if (!smp->local_dist && !smp->remote_dist) {
   107ae:	f8b5 40e8 	ldrh.w	r4, [r5, #232]	; 0xe8
   107b2:	b174      	cbz	r4, 107d2 <smp_ident_addr_info+0x14e>
	return 0;
   107b4:	2000      	movs	r0, #0
   107b6:	e790      	b.n	106da <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
   107b8:	f104 038f 	add.w	r3, r4, #143	; 0x8f
   107bc:	e7c4      	b.n	10748 <smp_ident_addr_info+0xc4>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   107be:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   107c2:	2b00      	cmp	r3, #0
   107c4:	d1f3      	bne.n	107ae <smp_ident_addr_info+0x12a>
		err = bt_smp_distribute_keys(smp);
   107c6:	4628      	mov	r0, r5
   107c8:	f7fe fd4a 	bl	f260 <bt_smp_distribute_keys>
		if (err) {
   107cc:	2800      	cmp	r0, #0
   107ce:	d0ee      	beq.n	107ae <smp_ident_addr_info+0x12a>
   107d0:	e783      	b.n	106da <smp_ident_addr_info+0x56>
		smp_pairing_complete(smp, 0);
   107d2:	4621      	mov	r1, r4
   107d4:	4628      	mov	r0, r5
   107d6:	f7ff fe11 	bl	103fc <smp_pairing_complete>
   107da:	e7eb      	b.n	107b4 <smp_ident_addr_info+0x130>
   107dc:	000333e4 	.word	0x000333e4
   107e0:	0002f50c 	.word	0x0002f50c
   107e4:	00033198 	.word	0x00033198
   107e8:	00033171 	.word	0x00033171

000107ec <smp_central_ident>:
{
   107ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
   107f0:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
   107f4:	4604      	mov	r4, r0
   107f6:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   107f8:	3004      	adds	r0, #4
   107fa:	210d      	movs	r1, #13
   107fc:	f01b fcc3 	bl	2c186 <atomic_test_bit>
   10800:	b318      	cbz	r0, 1084a <smp_central_ident+0x5e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   10802:	f106 0888 	add.w	r8, r6, #136	; 0x88
   10806:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_central_ident *req = (void *)buf->data;
   10808:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1080a:	4642      	mov	r2, r8
   1080c:	2004      	movs	r0, #4
   1080e:	f01c f8d1 	bl	2c9b4 <bt_keys_get_type>
		if (!keys) {
   10812:	4605      	mov	r5, r0
   10814:	b980      	cbnz	r0, 10838 <smp_central_ident+0x4c>
			BT_ERR("Unable to get keys for %s",
   10816:	4640      	mov	r0, r8
   10818:	f7f7 fd1e 	bl	8258 <bt_addr_le_str_real>
   1081c:	4b1e      	ldr	r3, [pc, #120]	; (10898 <smp_central_ident+0xac>)
   1081e:	9002      	str	r0, [sp, #8]
   10820:	e9cd 5300 	strd	r5, r3, [sp]
   10824:	4628      	mov	r0, r5
   10826:	491d      	ldr	r1, [pc, #116]	; (1089c <smp_central_ident+0xb0>)
   10828:	462b      	mov	r3, r5
   1082a:	2201      	movs	r2, #1
   1082c:	f01b fc19 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
			return BT_SMP_ERR_UNSPECIFIED;
   10830:	2008      	movs	r0, #8
}
   10832:	b004      	add	sp, #16
   10834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10838:	463a      	mov	r2, r7
   1083a:	f832 3b02 	ldrh.w	r3, [r2], #2
   1083e:	8303      	strh	r3, [r0, #24]
   10840:	f8d7 3002 	ldr.w	r3, [r7, #2]
   10844:	6103      	str	r3, [r0, #16]
   10846:	6853      	ldr	r3, [r2, #4]
   10848:	6143      	str	r3, [r0, #20]
	smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1084a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1084e:	f023 0201 	bic.w	r2, r3, #1
   10852:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   10856:	079a      	lsls	r2, r3, #30
   10858:	d50a      	bpl.n	10870 <smp_central_ident+0x84>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1085a:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1085c:	4620      	mov	r0, r4
   1085e:	f01b fd28 	bl	2c2b2 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   10862:	78f3      	ldrb	r3, [r6, #3]
   10864:	b143      	cbz	r3, 10878 <smp_central_ident+0x8c>
	if (!smp->local_dist && !smp->remote_dist) {
   10866:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
   1086a:	b17d      	cbz	r5, 1088c <smp_central_ident+0xa0>
	return 0;
   1086c:	2000      	movs	r0, #0
   1086e:	e7e0      	b.n	10832 <smp_central_ident+0x46>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   10870:	075b      	lsls	r3, r3, #29
   10872:	d5f6      	bpl.n	10862 <smp_central_ident+0x76>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   10874:	210a      	movs	r1, #10
   10876:	e7f1      	b.n	1085c <smp_central_ident+0x70>
	    conn->role == BT_HCI_ROLE_CENTRAL && !smp->remote_dist) {
   10878:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1087c:	2b00      	cmp	r3, #0
   1087e:	d1f2      	bne.n	10866 <smp_central_ident+0x7a>
		err = bt_smp_distribute_keys(smp);
   10880:	4620      	mov	r0, r4
   10882:	f7fe fced 	bl	f260 <bt_smp_distribute_keys>
		if (err) {
   10886:	2800      	cmp	r0, #0
   10888:	d0ed      	beq.n	10866 <smp_central_ident+0x7a>
   1088a:	e7d2      	b.n	10832 <smp_central_ident+0x46>
		smp_pairing_complete(smp, 0);
   1088c:	4620      	mov	r0, r4
   1088e:	4629      	mov	r1, r5
   10890:	f7ff fdb4 	bl	103fc <smp_pairing_complete>
	return 0;
   10894:	4628      	mov	r0, r5
   10896:	e7cc      	b.n	10832 <smp_central_ident+0x46>
   10898:	00033171 	.word	0x00033171
   1089c:	0002f50c 	.word	0x0002f50c

000108a0 <smp_pairing_failed>:
{
   108a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_smp_pairing_fail *req = (void *)buf->data;
   108a2:	688d      	ldr	r5, [r1, #8]
	BT_ERR("reason 0x%x", req->reason);
   108a4:	4a16      	ldr	r2, [pc, #88]	; (10900 <smp_pairing_failed+0x60>)
   108a6:	782b      	ldrb	r3, [r5, #0]
	struct bt_conn *conn = smp->chan.chan.conn;
   108a8:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
{
   108ac:	b089      	sub	sp, #36	; 0x24
   108ae:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
   108b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
   108b4:	4813      	ldr	r0, [pc, #76]	; (10904 <smp_pairing_failed+0x64>)
   108b6:	2303      	movs	r3, #3
   108b8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   108bc:	aa05      	add	r2, sp, #20
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   108be:	1d26      	adds	r6, r4, #4
	BT_ERR("reason 0x%x", req->reason);
   108c0:	9301      	str	r3, [sp, #4]
   108c2:	9305      	str	r3, [sp, #20]
   108c4:	f01b fbca 	bl	2c05c <z_log_msg2_static_create.constprop.0>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   108c8:	210a      	movs	r1, #10
   108ca:	4630      	mov	r0, r6
   108cc:	f01b fcd9 	bl	2c282 <atomic_test_and_clear_bit>
   108d0:	b148      	cbz	r0, 108e6 <smp_pairing_failed+0x46>
		if (bt_auth && bt_auth->cancel) {
   108d2:	4b0d      	ldr	r3, [pc, #52]	; (10908 <smp_pairing_failed+0x68>)
   108d4:	681b      	ldr	r3, [r3, #0]
   108d6:	b96b      	cbnz	r3, 108f4 <smp_pairing_failed+0x54>
	smp_pairing_complete(smp, req->reason);
   108d8:	4620      	mov	r0, r4
   108da:	7829      	ldrb	r1, [r5, #0]
   108dc:	f7ff fd8e 	bl	103fc <smp_pairing_complete>
}
   108e0:	2000      	movs	r0, #0
   108e2:	b009      	add	sp, #36	; 0x24
   108e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
   108e6:	210b      	movs	r1, #11
   108e8:	4630      	mov	r0, r6
   108ea:	f01b fcca 	bl	2c282 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
   108ee:	2800      	cmp	r0, #0
   108f0:	d1ef      	bne.n	108d2 <smp_pairing_failed+0x32>
   108f2:	e7f1      	b.n	108d8 <smp_pairing_failed+0x38>
		if (bt_auth && bt_auth->cancel) {
   108f4:	691b      	ldr	r3, [r3, #16]
   108f6:	2b00      	cmp	r3, #0
   108f8:	d0ee      	beq.n	108d8 <smp_pairing_failed+0x38>
			bt_auth->cancel(conn);
   108fa:	4638      	mov	r0, r7
   108fc:	4798      	blx	r3
   108fe:	e7eb      	b.n	108d8 <smp_pairing_failed+0x38>
   10900:	000333f8 	.word	0x000333f8
   10904:	0002f50c 	.word	0x0002f50c
   10908:	200022d0 	.word	0x200022d0

0001090c <bt_smp_encrypt_change>:
{
   1090c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->conn;
   10910:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   10912:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
   10916:	4604      	mov	r4, r0
   10918:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1091a:	4630      	mov	r0, r6
   1091c:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
   1091e:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   10922:	f01b fcae 	bl	2c282 <atomic_test_and_clear_bit>
   10926:	2800      	cmp	r0, #0
   10928:	d05f      	beq.n	109ea <bt_smp_encrypt_change+0xde>
	if (hci_status) {
   1092a:	b1cf      	cbz	r7, 10960 <bt_smp_encrypt_change+0x54>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1092c:	2103      	movs	r1, #3
   1092e:	4630      	mov	r0, r6
   10930:	f01b fc29 	bl	2c186 <atomic_test_bit>
   10934:	2800      	cmp	r0, #0
   10936:	d058      	beq.n	109ea <bt_smp_encrypt_change+0xde>
			uint8_t smp_err = smp_err_get(
   10938:	4638      	mov	r0, r7
   1093a:	f7f8 ff9f 	bl	987c <bt_security_err_get>
	switch (auth_err) {
   1093e:	3801      	subs	r0, #1
   10940:	b2c0      	uxtb	r0, r0
   10942:	2808      	cmp	r0, #8
   10944:	bf9a      	itte	ls
   10946:	4b2e      	ldrls	r3, [pc, #184]	; (10a00 <bt_smp_encrypt_change+0xf4>)
   10948:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
   1094a:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   1094c:	2102      	movs	r1, #2
   1094e:	4630      	mov	r0, r6
   10950:	f01b fcaf 	bl	2c2b2 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
   10954:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
   10956:	4628      	mov	r0, r5
}
   10958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_pairing_complete(smp, 0);
   1095c:	f7ff bd4e 	b.w	103fc <smp_pairing_complete>
	if (!conn->encrypt) {
   10960:	f898 300b 	ldrb.w	r3, [r8, #11]
   10964:	2b00      	cmp	r3, #0
   10966:	d040      	beq.n	109ea <bt_smp_encrypt_change+0xde>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10968:	2103      	movs	r1, #3
   1096a:	4630      	mov	r0, r6
   1096c:	f01b fc0b 	bl	2c186 <atomic_test_bit>
   10970:	b920      	cbnz	r0, 1097c <bt_smp_encrypt_change+0x70>
		smp_reset(smp);
   10972:	4628      	mov	r0, r5
}
   10974:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_reset(smp);
   10978:	f01b bd35 	b.w	2c3e6 <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1097c:	2105      	movs	r1, #5
   1097e:	4630      	mov	r0, r6
   10980:	f01b fc01 	bl	2c186 <atomic_test_bit>
   10984:	b1b8      	cbz	r0, 109b6 <bt_smp_encrypt_change+0xaa>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
   10986:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   1098a:	071f      	lsls	r7, r3, #28
   1098c:	d507      	bpl.n	1099e <bt_smp_encrypt_change+0x92>
   1098e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   10992:	0718      	lsls	r0, r3, #28
   10994:	d503      	bpl.n	1099e <bt_smp_encrypt_change+0x92>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
   10996:	2111      	movs	r1, #17
   10998:	4630      	mov	r0, r6
   1099a:	f01b fc8a 	bl	2c2b2 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
   1099e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
   109a2:	f023 0308 	bic.w	r3, r3, #8
   109a6:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
   109aa:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   109ae:	f023 0308 	bic.w	r3, r3, #8
   109b2:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
   109b6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   109ba:	07d9      	lsls	r1, r3, #31
   109bc:	d517      	bpl.n	109ee <bt_smp_encrypt_change+0xe2>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
   109be:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   109c0:	4628      	mov	r0, r5
   109c2:	f01b fc76 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
   109c6:	2102      	movs	r1, #2
   109c8:	4630      	mov	r0, r6
   109ca:	f01b fc72 	bl	2c2b2 <atomic_set_bit>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   109ce:	f898 3003 	ldrb.w	r3, [r8, #3]
   109d2:	b913      	cbnz	r3, 109da <bt_smp_encrypt_change+0xce>
	    conn->role == BT_HCI_ROLE_CENTRAL && smp->remote_dist) {
   109d4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   109d8:	b93b      	cbnz	r3, 109ea <bt_smp_encrypt_change+0xde>
	if (bt_smp_distribute_keys(smp)) {
   109da:	4628      	mov	r0, r5
   109dc:	f7fe fc40 	bl	f260 <bt_smp_distribute_keys>
   109e0:	b918      	cbnz	r0, 109ea <bt_smp_encrypt_change+0xde>
	if (!smp->local_dist && !smp->remote_dist) {
   109e2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
   109e6:	2900      	cmp	r1, #0
   109e8:	d0b5      	beq.n	10956 <bt_smp_encrypt_change+0x4a>
}
   109ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   109ee:	079a      	lsls	r2, r3, #30
   109f0:	d501      	bpl.n	109f6 <bt_smp_encrypt_change+0xea>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   109f2:	2108      	movs	r1, #8
   109f4:	e7e4      	b.n	109c0 <bt_smp_encrypt_change+0xb4>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   109f6:	075b      	lsls	r3, r3, #29
   109f8:	d5e5      	bpl.n	109c6 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   109fa:	210a      	movs	r1, #10
   109fc:	e7e0      	b.n	109c0 <bt_smp_encrypt_change+0xb4>
   109fe:	bf00      	nop
   10a00:	00033426 	.word	0x00033426

00010a04 <smp_timeout>:
{
   10a04:	b510      	push	{r4, lr}
   10a06:	b088      	sub	sp, #32
	BT_ERR("SMP Timeout");
   10a08:	4b0c      	ldr	r3, [pc, #48]	; (10a3c <smp_timeout+0x38>)
   10a0a:	9306      	str	r3, [sp, #24]
{
   10a0c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   10a0e:	2302      	movs	r3, #2
   10a10:	aa05      	add	r2, sp, #20
   10a12:	480b      	ldr	r0, [pc, #44]	; (10a40 <smp_timeout+0x3c>)
   10a14:	9301      	str	r3, [sp, #4]
   10a16:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   10a1a:	9305      	str	r3, [sp, #20]
   10a1c:	f01b fb1e 	bl	2c05c <z_log_msg2_static_create.constprop.0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   10a20:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
   10a24:	2108      	movs	r1, #8
   10a26:	f7ff fce9 	bl	103fc <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10a2a:	2104      	movs	r1, #4
   10a2c:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
}
   10a30:	b008      	add	sp, #32
   10a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10a36:	f01b bc3c 	b.w	2c2b2 <atomic_set_bit>
   10a3a:	bf00      	nop
   10a3c:	00033404 	.word	0x00033404
   10a40:	0002f50c 	.word	0x0002f50c

00010a44 <bt_smp_update_keys>:
{
   10a44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   10a48:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10a4a:	f7fe f947 	bl	ecdc <smp_chan_get>
	if (!smp) {
   10a4e:	4605      	mov	r5, r0
   10a50:	2800      	cmp	r0, #0
   10a52:	d06d      	beq.n	10b30 <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10a54:	1d07      	adds	r7, r0, #4
   10a56:	2103      	movs	r1, #3
   10a58:	4638      	mov	r0, r7
   10a5a:	f01b fb94 	bl	2c186 <atomic_test_bit>
   10a5e:	2800      	cmp	r0, #0
   10a60:	d066      	beq.n	10b30 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   10a62:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10a66:	b108      	cbz	r0, 10a6c <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   10a68:	f01b ffb8 	bl	2c9dc <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   10a6c:	f104 0888 	add.w	r8, r4, #136	; 0x88
   10a70:	7a20      	ldrb	r0, [r4, #8]
   10a72:	4641      	mov	r1, r8
   10a74:	f000 f884 	bl	10b80 <bt_keys_get_addr>
   10a78:	4606      	mov	r6, r0
   10a7a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   10a7e:	b998      	cbnz	r0, 10aa8 <bt_smp_update_keys+0x64>
		BT_ERR("Unable to get keys for %s",
   10a80:	4640      	mov	r0, r8
   10a82:	f7f7 fbe9 	bl	8258 <bt_addr_le_str_real>
   10a86:	4b31      	ldr	r3, [pc, #196]	; (10b4c <bt_smp_update_keys+0x108>)
   10a88:	9002      	str	r0, [sp, #8]
   10a8a:	e9cd 6300 	strd	r6, r3, [sp]
   10a8e:	4630      	mov	r0, r6
   10a90:	492f      	ldr	r1, [pc, #188]	; (10b50 <bt_smp_update_keys+0x10c>)
   10a92:	4633      	mov	r3, r6
   10a94:	2201      	movs	r2, #1
   10a96:	f01b fae4 	bl	2c062 <z_log_msg2_runtime_create.constprop.0>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10a9a:	2108      	movs	r1, #8
   10a9c:	4628      	mov	r0, r5
}
   10a9e:	b004      	add	sp, #16
   10aa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10aa4:	f01b beb8 	b.w	2c818 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   10aa8:	210e      	movs	r1, #14
   10aaa:	4638      	mov	r0, r7
   10aac:	f01b fb6b 	bl	2c186 <atomic_test_bit>
   10ab0:	b128      	cbz	r0, 10abe <bt_smp_update_keys+0x7a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10ab2:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   10ab6:	7b53      	ldrb	r3, [r2, #13]
   10ab8:	f043 0302 	orr.w	r3, r3, #2
   10abc:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   10abe:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10ac0:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   10ac4:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10ac6:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   10ac8:	d835      	bhi.n	10b36 <bt_smp_update_keys+0xf2>
   10aca:	b3ba      	cbz	r2, 10b3c <bt_smp_update_keys+0xf8>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10acc:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10ad0:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   10ad2:	7d2b      	ldrb	r3, [r5, #20]
   10ad4:	7b6a      	ldrb	r2, [r5, #13]
   10ad6:	4293      	cmp	r3, r2
   10ad8:	bf28      	it	cs
   10ada:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   10adc:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10ade:	4638      	mov	r0, r7
   10ae0:	2105      	movs	r1, #5
   10ae2:	f01b fb50 	bl	2c186 <atomic_test_bit>
   10ae6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   10aea:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   10aec:	b348      	cbz	r0, 10b42 <bt_smp_update_keys+0xfe>
		conn->le.keys->flags |= BT_KEYS_SC;
   10aee:	f042 0210 	orr.w	r2, r2, #16
   10af2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10af4:	210d      	movs	r1, #13
   10af6:	4638      	mov	r0, r7
   10af8:	f01b fb45 	bl	2c186 <atomic_test_bit>
   10afc:	b1c0      	cbz	r0, 10b30 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   10afe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10b02:	2120      	movs	r1, #32
   10b04:	f01b ff66 	bl	2c9d4 <bt_keys_add_type>
   10b08:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   10b0c:	f105 0247 	add.w	r2, r5, #71	; 0x47
   10b10:	331a      	adds	r3, #26
   10b12:	3557      	adds	r5, #87	; 0x57
   10b14:	f852 1b04 	ldr.w	r1, [r2], #4
   10b18:	f843 1b04 	str.w	r1, [r3], #4
   10b1c:	42aa      	cmp	r2, r5
   10b1e:	d1f9      	bne.n	10b14 <bt_smp_update_keys+0xd0>
__ssp_bos_icheck3(memset, void *, int)
   10b20:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   10b24:	2300      	movs	r3, #0
   10b26:	6113      	str	r3, [r2, #16]
   10b28:	6153      	str	r3, [r2, #20]
   10b2a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   10b2e:	8313      	strh	r3, [r2, #24]
}
   10b30:	b004      	add	sp, #16
   10b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (smp->method) {
   10b36:	3a05      	subs	r2, #5
   10b38:	2a01      	cmp	r2, #1
   10b3a:	d9c7      	bls.n	10acc <bt_smp_update_keys+0x88>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10b3c:	f023 0301 	bic.w	r3, r3, #1
   10b40:	e7c6      	b.n	10ad0 <bt_smp_update_keys+0x8c>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   10b42:	f022 0210 	bic.w	r2, r2, #16
   10b46:	735a      	strb	r2, [r3, #13]
   10b48:	e7f2      	b.n	10b30 <bt_smp_update_keys+0xec>
   10b4a:	bf00      	nop
   10b4c:	00033171 	.word	0x00033171
   10b50:	0002f50c 	.word	0x0002f50c

00010b54 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   10b54:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   10b56:	4b07      	ldr	r3, [pc, #28]	; (10b74 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   10b58:	4807      	ldr	r0, [pc, #28]	; (10b78 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   10b5a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
   10b5e:	f003 0306 	and.w	r3, r3, #6
   10b62:	1f9a      	subs	r2, r3, #6
   10b64:	4253      	negs	r3, r2
   10b66:	4153      	adcs	r3, r2
   10b68:	4a04      	ldr	r2, [pc, #16]	; (10b7c <bt_smp_init+0x28>)
   10b6a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   10b6c:	f7fa fa30 	bl	afd0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   10b70:	2000      	movs	r0, #0
   10b72:	bd08      	pop	{r3, pc}
   10b74:	20000000 	.word	0x20000000
   10b78:	20000288 	.word	0x20000288
   10b7c:	20003af5 	.word	0x20003af5

00010b80 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   10b80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10b84:	4f14      	ldr	r7, [pc, #80]	; (10bd8 <bt_keys_get_addr+0x58>)
   10b86:	463d      	mov	r5, r7
{
   10b88:	4680      	mov	r8, r0
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10b8a:	f815 3b01 	ldrb.w	r3, [r5], #1
   10b8e:	4283      	cmp	r3, r0
{
   10b90:	460e      	mov	r6, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10b92:	d00b      	beq.n	10bac <bt_keys_get_addr+0x2c>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10b94:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
   10b96:	4811      	ldr	r0, [pc, #68]	; (10bdc <bt_keys_get_addr+0x5c>)
   10b98:	9400      	str	r4, [sp, #0]
   10b9a:	2207      	movs	r2, #7
   10b9c:	4669      	mov	r1, sp
   10b9e:	f8cd 4003 	str.w	r4, [sp, #3]
   10ba2:	f01d fcd0 	bl	2e546 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10ba6:	b158      	cbz	r0, 10bc0 <bt_keys_get_addr+0x40>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   10ba8:	4620      	mov	r0, r4
   10baa:	e006      	b.n	10bba <bt_keys_get_addr+0x3a>
   10bac:	2207      	movs	r2, #7
   10bae:	4628      	mov	r0, r5
   10bb0:	f01d fcc9 	bl	2e546 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10bb4:	2800      	cmp	r0, #0
   10bb6:	d1ed      	bne.n	10b94 <bt_keys_get_addr+0x14>
		keys = &key_pool[i];
   10bb8:	4638      	mov	r0, r7
}
   10bba:	b002      	add	sp, #8
   10bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		keys->id = id;
   10bc0:	f887 8000 	strb.w	r8, [r7]
	memcpy(dst, src, sizeof(*dst));
   10bc4:	6833      	ldr	r3, [r6, #0]
   10bc6:	f8c7 3001 	str.w	r3, [r7, #1]
   10bca:	88b3      	ldrh	r3, [r6, #4]
   10bcc:	80ab      	strh	r3, [r5, #4]
   10bce:	79b3      	ldrb	r3, [r6, #6]
		return keys;
   10bd0:	4801      	ldr	r0, [pc, #4]	; (10bd8 <bt_keys_get_addr+0x58>)
   10bd2:	71ab      	strb	r3, [r5, #6]
}
   10bd4:	e7f1      	b.n	10bba <bt_keys_get_addr+0x3a>
   10bd6:	bf00      	nop
   10bd8:	20002390 	.word	0x20002390
   10bdc:	20002391 	.word	0x20002391

00010be0 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   10be0:	460b      	mov	r3, r1
   10be2:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10be4:	4a04      	ldr	r2, [pc, #16]	; (10bf8 <bt_keys_foreach+0x18>)
{
   10be6:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   10be8:	89d4      	ldrh	r4, [r2, #14]
   10bea:	4204      	tst	r4, r0
   10bec:	d002      	beq.n	10bf4 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   10bee:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   10bf0:	4610      	mov	r0, r2
   10bf2:	4718      	bx	r3
}
   10bf4:	bc10      	pop	{r4}
   10bf6:	4770      	bx	lr
   10bf8:	20002390 	.word	0x20002390

00010bfc <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
   10bfc:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10bfe:	4c09      	ldr	r4, [pc, #36]	; (10c24 <bt_keys_find+0x28>)
{
   10c00:	460b      	mov	r3, r1
   10c02:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10c04:	89e2      	ldrh	r2, [r4, #14]
   10c06:	4202      	tst	r2, r0
   10c08:	d007      	beq.n	10c1a <bt_keys_find+0x1e>
   10c0a:	7822      	ldrb	r2, [r4, #0]
   10c0c:	429a      	cmp	r2, r3
   10c0e:	d104      	bne.n	10c1a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   10c10:	2207      	movs	r2, #7
   10c12:	1c60      	adds	r0, r4, #1
   10c14:	f01d fc97 	bl	2e546 <memcmp>
   10c18:	b108      	cbz	r0, 10c1e <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   10c1a:	2000      	movs	r0, #0
}
   10c1c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10c1e:	4620      	mov	r0, r4
   10c20:	e7fc      	b.n	10c1c <bt_keys_find+0x20>
   10c22:	bf00      	nop
   10c24:	20002390 	.word	0x20002390

00010c28 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
   10c28:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   10c2a:	780b      	ldrb	r3, [r1, #0]
   10c2c:	2b01      	cmp	r3, #1
   10c2e:	4606      	mov	r6, r0
   10c30:	460d      	mov	r5, r1
   10c32:	d001      	beq.n	10c38 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
   10c34:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
   10c36:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   10c38:	798b      	ldrb	r3, [r1, #6]
   10c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10c3e:	2b40      	cmp	r3, #64	; 0x40
   10c40:	d1f8      	bne.n	10c34 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10c42:	4c13      	ldr	r4, [pc, #76]	; (10c90 <bt_keys_find_irk+0x68>)
   10c44:	89e3      	ldrh	r3, [r4, #14]
   10c46:	079b      	lsls	r3, r3, #30
   10c48:	d5f4      	bpl.n	10c34 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   10c4a:	7823      	ldrb	r3, [r4, #0]
   10c4c:	42b3      	cmp	r3, r6
   10c4e:	d10b      	bne.n	10c68 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   10c50:	2206      	movs	r2, #6
   10c52:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   10c56:	1c68      	adds	r0, r5, #1
   10c58:	f01d fc75 	bl	2e546 <memcmp>
   10c5c:	b908      	cbnz	r0, 10c62 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   10c5e:	4620      	mov	r0, r4
   10c60:	e7e9      	b.n	10c36 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10c62:	89e3      	ldrh	r3, [r4, #14]
   10c64:	079a      	lsls	r2, r3, #30
   10c66:	d5e5      	bpl.n	10c34 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   10c68:	7823      	ldrb	r3, [r4, #0]
   10c6a:	42b3      	cmp	r3, r6
   10c6c:	d1e2      	bne.n	10c34 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   10c6e:	1c6e      	adds	r6, r5, #1
   10c70:	4808      	ldr	r0, [pc, #32]	; (10c94 <bt_keys_find_irk+0x6c>)
   10c72:	4631      	mov	r1, r6
   10c74:	f019 f91e 	bl	29eb4 <bt_rpa_irk_matches>
   10c78:	2800      	cmp	r0, #0
   10c7a:	d0db      	beq.n	10c34 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   10c7c:	f8d5 3001 	ldr.w	r3, [r5, #1]
   10c80:	4805      	ldr	r0, [pc, #20]	; (10c98 <bt_keys_find_irk+0x70>)
   10c82:	f8c4 303a 	str.w	r3, [r4, #58]	; 0x3a
   10c86:	f8b5 3005 	ldrh.w	r3, [r5, #5]
   10c8a:	8083      	strh	r3, [r0, #4]
			return &key_pool[i];
   10c8c:	383a      	subs	r0, #58	; 0x3a
}
   10c8e:	e7d2      	b.n	10c36 <bt_keys_find_irk+0xe>
   10c90:	20002390 	.word	0x20002390
   10c94:	200023ba 	.word	0x200023ba
   10c98:	200023ca 	.word	0x200023ca

00010c9c <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
   10c9c:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
   10c9e:	4c06      	ldr	r4, [pc, #24]	; (10cb8 <bt_keys_find_addr+0x1c>)
   10ca0:	7823      	ldrb	r3, [r4, #0]
   10ca2:	4283      	cmp	r3, r0
   10ca4:	d104      	bne.n	10cb0 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   10ca6:	2207      	movs	r2, #7
   10ca8:	1c60      	adds	r0, r4, #1
   10caa:	f01d fc4c 	bl	2e546 <memcmp>
   10cae:	b108      	cbz	r0, 10cb4 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
   10cb0:	2000      	movs	r0, #0
}
   10cb2:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10cb4:	4620      	mov	r0, r4
   10cb6:	e7fc      	b.n	10cb2 <bt_keys_find_addr+0x16>
   10cb8:	20002390 	.word	0x20002390

00010cbc <mem_init>:
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10cbc:	f100 0c07 	add.w	ip, r0, #7
   10cc0:	f02c 0c03 	bic.w	ip, ip, #3
{
   10cc4:	b410      	push	{r4}

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10cc6:	1e54      	subs	r4, r2, #1
	*mem_head = mem_pool;
   10cc8:	6018      	str	r0, [r3, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10cca:	b2a4      	uxth	r4, r4
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   10ccc:	f8ac 2000 	strh.w	r2, [ip]
		     sizeof(mem_pool));
	while (mem_count--) {
   10cd0:	3a02      	subs	r2, #2
   10cd2:	b293      	uxth	r3, r2
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10cd4:	fb01 f204 	mul.w	r2, r1, r4
   10cd8:	f04f 0c00 	mov.w	ip, #0
   10cdc:	f840 c002 	str.w	ip, [r0, r2]
	while (mem_count--) {
   10ce0:	b174      	cbz	r4, 10d00 <mem_init+0x44>
   10ce2:	fb03 1401 	mla	r4, r3, r1, r1
   10ce6:	fb03 f201 	mul.w	r2, r3, r1
   10cea:	4420      	add	r0, r4
   10cec:	1b12      	subs	r2, r2, r4
   10cee:	f64f 7cff 	movw	ip, #65535	; 0xffff
   10cf2:	3b01      	subs	r3, #1
   10cf4:	b29b      	uxth	r3, r3
   10cf6:	4563      	cmp	r3, ip
   10cf8:	5080      	str	r0, [r0, r2]
   10cfa:	eba0 0001 	sub.w	r0, r0, r1
   10cfe:	d1f8      	bne.n	10cf2 <mem_init+0x36>
		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
		       (void *)&next, sizeof(next));
	}
}
   10d00:	bc10      	pop	{r4}
   10d02:	4770      	bx	lr

00010d04 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   10d04:	4603      	mov	r3, r0
	if (*mem_head) {
   10d06:	6800      	ldr	r0, [r0, #0]
   10d08:	b110      	cbz	r0, 10d10 <mem_acquire+0xc>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   10d0a:	6802      	ldr	r2, [r0, #0]

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10d0c:	b90a      	cbnz	r2, 10d12 <mem_acquire+0xe>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
				free_count;
		}

		*mem_head = head;
   10d0e:	601a      	str	r2, [r3, #0]
		return mem;
	}

	return NULL;
}
   10d10:	4770      	bx	lr
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10d12:	f100 0c07 	add.w	ip, r0, #7
   10d16:	f02c 0c03 	bic.w	ip, ip, #3
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10d1a:	1dd1      	adds	r1, r2, #7
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10d1c:	f8bc c000 	ldrh.w	ip, [ip]
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10d20:	f021 0103 	bic.w	r1, r1, #3
		free_count--;
   10d24:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10d28:	f8a1 c000 	strh.w	ip, [r1]
   10d2c:	e7ef      	b.n	10d0e <mem_acquire+0xa>
   10d2e:	bf00      	nop

00010d30 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
   10d30:	b082      	sub	sp, #8
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   10d32:	680b      	ldr	r3, [r1, #0]
{
   10d34:	9001      	str	r0, [sp, #4]
   10d36:	4602      	mov	r2, r0
	if (*mem_head) {
   10d38:	b183      	cbz	r3, 10d5c <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10d3a:	3307      	adds	r3, #7
   10d3c:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   10d40:	8818      	ldrh	r0, [r3, #0]
   10d42:	3001      	adds	r0, #1
   10d44:	b280      	uxth	r0, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   10d46:	4613      	mov	r3, r2
   10d48:	f8d1 c000 	ldr.w	ip, [r1]
   10d4c:	f843 cb07 	str.w	ip, [r3], #7

	memcpy(mem, mem_head, sizeof(mem));

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   10d50:	f023 0303 	bic.w	r3, r3, #3
   10d54:	8018      	strh	r0, [r3, #0]

	*mem_head = mem;
   10d56:	600a      	str	r2, [r1, #0]
}
   10d58:	b002      	add	sp, #8
   10d5a:	4770      	bx	lr
   10d5c:	2001      	movs	r0, #1
   10d5e:	e7f2      	b.n	10d46 <mem_release+0x16>

00010d60 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   10d60:	fb02 0001 	mla	r0, r2, r1, r0
   10d64:	4770      	bx	lr
   10d66:	bf00      	nop

00010d68 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10d68:	1a40      	subs	r0, r0, r1
   10d6a:	b280      	uxth	r0, r0
}
   10d6c:	fbb0 f0f2 	udiv	r0, r0, r2
   10d70:	4770      	bx	lr
   10d72:	bf00      	nop

00010d74 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   10d74:	1e53      	subs	r3, r2, #1
	src += len;
   10d76:	4411      	add	r1, r2
	while (len--) {
   10d78:	b29b      	uxth	r3, r3
   10d7a:	b142      	cbz	r2, 10d8e <mem_rcopy+0x1a>
   10d7c:	43db      	mvns	r3, r3
   10d7e:	3801      	subs	r0, #1
   10d80:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   10d82:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   10d86:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   10d8a:	4291      	cmp	r1, r2
   10d8c:	d1f9      	bne.n	10d82 <mem_rcopy+0xe>
	}
}
   10d8e:	4770      	bx	lr

00010d90 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   10d90:	4401      	add	r1, r0
   10d92:	e002      	b.n	10d9a <mem_nz+0xa>
		if (*src++) {
   10d94:	f810 3b01 	ldrb.w	r3, [r0], #1
   10d98:	b91b      	cbnz	r3, 10da2 <mem_nz+0x12>
	while (len--) {
   10d9a:	4288      	cmp	r0, r1
   10d9c:	d1fa      	bne.n	10d94 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   10d9e:	2000      	movs	r0, #0
   10da0:	4770      	bx	lr
			return 1;
   10da2:	2001      	movs	r0, #1
}
   10da4:	4770      	bx	lr
   10da6:	bf00      	nop

00010da8 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10da8:	6010      	str	r0, [r2, #0]
   10daa:	6008      	str	r0, [r1, #0]

	return link;
}
   10dac:	4770      	bx	lr
   10dae:	bf00      	nop

00010db0 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   10db0:	680a      	ldr	r2, [r1, #0]
{
   10db2:	4603      	mov	r3, r0
	if (*head != *tail) {
   10db4:	6800      	ldr	r0, [r0, #0]
   10db6:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10db8:	bf05      	ittet	eq
   10dba:	2200      	moveq	r2, #0
   10dbc:	600a      	streq	r2, [r1, #0]
		return NULL;
   10dbe:	2000      	movne	r0, #0
	*head = *tail = NULL;
   10dc0:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   10dc2:	4770      	bx	lr

00010dc4 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   10dc4:	f8d2 c000 	ldr.w	ip, [r2]
   10dc8:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   10dcc:	f8d2 c000 	ldr.w	ip, [r2]
   10dd0:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   10dd4:	6010      	str	r0, [r2, #0]

	return link;
}
   10dd6:	4770      	bx	lr

00010dd8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10dd8:	4288      	cmp	r0, r1
   10dda:	d003      	beq.n	10de4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10ddc:	b11a      	cbz	r2, 10de6 <memq_peek+0xe>
		*mem = head->mem;
   10dde:	6843      	ldr	r3, [r0, #4]
   10de0:	6013      	str	r3, [r2, #0]
   10de2:	4770      	bx	lr
		return NULL;
   10de4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   10de6:	4770      	bx	lr

00010de8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10de8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10dea:	4283      	cmp	r3, r0
   10dec:	d009      	beq.n	10e02 <memq_dequeue+0x1a>
	if (mem) {
   10dee:	b12a      	cbz	r2, 10dfc <memq_dequeue+0x14>
		*mem = head->mem;
   10df0:	6858      	ldr	r0, [r3, #4]
   10df2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   10df4:	681a      	ldr	r2, [r3, #0]
   10df6:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10df8:	4618      	mov	r0, r3
   10dfa:	4770      	bx	lr
	if (old_head == NULL) {
   10dfc:	2b00      	cmp	r3, #0
   10dfe:	d1f9      	bne.n	10df4 <memq_dequeue+0xc>
   10e00:	e7fa      	b.n	10df8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   10e02:	2300      	movs	r3, #0
   10e04:	e7f8      	b.n	10df8 <memq_dequeue+0x10>
   10e06:	bf00      	nop

00010e08 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   10e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e0c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 10e40 <mayfly_init+0x38>
   10e10:	4e0c      	ldr	r6, [pc, #48]	; (10e44 <mayfly_init+0x3c>)
   10e12:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   10e14:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   10e18:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   10e1a:	1d22      	adds	r2, r4, #4
   10e1c:	4621      	mov	r1, r4
   10e1e:	4628      	mov	r0, r5
		while (caller_id--) {
   10e20:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   10e22:	f7ff ffc1 	bl	10da8 <memq_init>
		while (caller_id--) {
   10e26:	42b4      	cmp	r4, r6
   10e28:	f1a5 0508 	sub.w	r5, r5, #8
   10e2c:	d1f5      	bne.n	10e1a <mayfly_init+0x12>
	while (callee_id--) {
   10e2e:	3f04      	subs	r7, #4
   10e30:	1d3b      	adds	r3, r7, #4
   10e32:	f1a8 0820 	sub.w	r8, r8, #32
   10e36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   10e3a:	d1eb      	bne.n	10e14 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   10e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e40:	20002464 	.word	0x20002464
   10e44:	200024f4 	.word	0x200024f4

00010e48 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   10e48:	b410      	push	{r4}
   10e4a:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   10e4c:	4c15      	ldr	r4, [pc, #84]	; (10ea4 <mayfly_enable+0x5c>)
{
   10e4e:	468c      	mov	ip, r1
	if (enable) {
   10e50:	b192      	cbz	r2, 10e78 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   10e52:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   10e56:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   10e5a:	0100      	lsls	r0, r0, #4
   10e5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10e60:	4421      	add	r1, r4
   10e62:	7a48      	ldrb	r0, [r1, #9]
   10e64:	7a0c      	ldrb	r4, [r1, #8]
   10e66:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10e68:	bf04      	itt	eq
   10e6a:	3001      	addeq	r0, #1
   10e6c:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   10e6e:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   10e70:	4661      	mov	r1, ip
   10e72:	4618      	mov	r0, r3
   10e74:	f00f baf4 	b.w	20460 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10e78:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10e7c:	0112      	lsls	r2, r2, #4
   10e7e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   10e82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10e86:	4423      	add	r3, r4
   10e88:	7a9c      	ldrb	r4, [r3, #10]
   10e8a:	7ada      	ldrb	r2, [r3, #11]
   10e8c:	42a2      	cmp	r2, r4
   10e8e:	d001      	beq.n	10e94 <mayfly_enable+0x4c>
}
   10e90:	bc10      	pop	{r4}
   10e92:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   10e94:	3201      	adds	r2, #1
   10e96:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10e98:	4b03      	ldr	r3, [pc, #12]	; (10ea8 <mayfly_enable+0x60>)
   10e9a:	2201      	movs	r2, #1
   10e9c:	545a      	strb	r2, [r3, r1]
}
   10e9e:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   10ea0:	f00f bb34 	b.w	2050c <mayfly_pend>
   10ea4:	20002470 	.word	0x20002470
   10ea8:	2000246c 	.word	0x2000246c

00010eac <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10eac:	b570      	push	{r4, r5, r6, lr}
   10eae:	b082      	sub	sp, #8
   10eb0:	4606      	mov	r6, r0
   10eb2:	9101      	str	r1, [sp, #4]
   10eb4:	461c      	mov	r4, r3
   10eb6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   10eb8:	b32a      	cbz	r2, 10f06 <mayfly_enqueue+0x5a>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   10eba:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10ebc:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10ebe:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10ec0:	f012 0203 	ands.w	r2, r2, #3
   10ec4:	d005      	beq.n	10ed2 <mayfly_enqueue+0x26>
		if (chain) {
			if (state != 1U) {
   10ec6:	2a01      	cmp	r2, #1
   10ec8:	d042      	beq.n	10f50 <mayfly_enqueue+0xa4>
				/* mark as ready in queue */
				m->_req = ack + 1;
   10eca:	3301      	adds	r3, #1
   10ecc:	b2db      	uxtb	r3, r3
   10ece:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10ed0:	e00f      	b.n	10ef2 <mayfly_enqueue+0x46>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   10ed2:	3301      	adds	r3, #1
   10ed4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10ed6:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   10ed8:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   10eda:	2304      	movs	r3, #4
   10edc:	fb11 3105 	smlabb	r1, r1, r5, r3
   10ee0:	4a1c      	ldr	r2, [pc, #112]	; (10f54 <mayfly_enqueue+0xa8>)
   10ee2:	6860      	ldr	r0, [r4, #4]
   10ee4:	230c      	movs	r3, #12
   10ee6:	fb13 1306 	smlabb	r3, r3, r6, r1
   10eea:	441a      	add	r2, r3
   10eec:	4621      	mov	r1, r4
   10eee:	f7ff ff69 	bl	10dc4 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   10ef2:	4b19      	ldr	r3, [pc, #100]	; (10f58 <mayfly_enqueue+0xac>)
   10ef4:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   10ef6:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10ef8:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10efa:	4629      	mov	r1, r5
   10efc:	f00f fb06 	bl	2050c <mayfly_pend>

	return 0;
   10f00:	2000      	movs	r0, #0
}
   10f02:	b002      	add	sp, #8
   10f04:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10f06:	f00f faeb 	bl	204e0 <mayfly_prio_is_equal>
   10f0a:	2800      	cmp	r0, #0
   10f0c:	d0d5      	beq.n	10eba <mayfly_enqueue+0xe>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10f0e:	4629      	mov	r1, r5
   10f10:	4630      	mov	r0, r6
   10f12:	f00f fac5 	bl	204a0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   10f16:	2800      	cmp	r0, #0
   10f18:	d0cf      	beq.n	10eba <mayfly_enqueue+0xe>
		(mft[callee_id][caller_id].disable_req !=
   10f1a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10f1e:	0112      	lsls	r2, r2, #4
   10f20:	490c      	ldr	r1, [pc, #48]	; (10f54 <mayfly_enqueue+0xa8>)
   10f22:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10f26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10f2a:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   10f2c:	7a9a      	ldrb	r2, [r3, #10]
   10f2e:	7adb      	ldrb	r3, [r3, #11]
   10f30:	429a      	cmp	r2, r3
   10f32:	d1c2      	bne.n	10eba <mayfly_enqueue+0xe>
	state = (m->_req - ack) & 0x03;
   10f34:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10f36:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10f38:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10f3a:	0792      	lsls	r2, r2, #30
   10f3c:	d002      	beq.n	10f44 <mayfly_enqueue+0x98>
		m->_req = ack + 2;
   10f3e:	3302      	adds	r3, #2
   10f40:	b2db      	uxtb	r3, r3
   10f42:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   10f44:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   10f48:	4798      	blx	r3
		return 0;
   10f4a:	2000      	movs	r0, #0
}
   10f4c:	b002      	add	sp, #8
   10f4e:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10f50:	4610      	mov	r0, r2
   10f52:	e7d6      	b.n	10f02 <mayfly_enqueue+0x56>
   10f54:	20002470 	.word	0x20002470
   10f58:	2000246c 	.word	0x2000246c

00010f5c <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10f5c:	4a50      	ldr	r2, [pc, #320]	; (110a0 <mayfly_run+0x144>)
   10f5e:	5c13      	ldrb	r3, [r2, r0]
   10f60:	2b00      	cmp	r3, #0
   10f62:	f000 809b 	beq.w	1109c <mayfly_run+0x140>
{
   10f66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   10f6a:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10f6c:	4f4d      	ldr	r7, [pc, #308]	; (110a4 <mayfly_run+0x148>)
	mfp[callee_id] = 0U;
   10f6e:	5413      	strb	r3, [r2, r0]
{
   10f70:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   10f72:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10f74:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   10f78:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10f7c:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   10f80:	9303      	str	r3, [sp, #12]
   10f82:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10f86:	f10b 0804 	add.w	r8, fp, #4
   10f8a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   10f8e:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   10f92:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10f94:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10f98:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   10f9a:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   10f9c:	f7ff ff1c 	bl	10dd8 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10fa0:	f107 0624 	add.w	r6, r7, #36	; 0x24
   10fa4:	4683      	mov	fp, r0
   10fa6:	2800      	cmp	r0, #0
   10fa8:	d034      	beq.n	11014 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10faa:	9c05      	ldr	r4, [sp, #20]
   10fac:	7863      	ldrb	r3, [r4, #1]
   10fae:	7825      	ldrb	r5, [r4, #0]
   10fb0:	1aed      	subs	r5, r5, r3
   10fb2:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   10fb6:	2d01      	cmp	r5, #1
   10fb8:	d106      	bne.n	10fc8 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10fba:	3b01      	subs	r3, #1
   10fbc:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   10fbe:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   10fc2:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   10fc4:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   10fc6:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10fc8:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   10fca:	1ac3      	subs	r3, r0, r3
   10fcc:	f003 0303 	and.w	r3, r3, #3
   10fd0:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10fd2:	f04f 0200 	mov.w	r2, #0
   10fd6:	4631      	mov	r1, r6
	req = m->_req;
   10fd8:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   10fdc:	d00f      	beq.n	10ffe <mayfly_run+0xa2>
		memq_dequeue(mft[callee_id][caller_id].tail,
   10fde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   10fe0:	f7ff ff02 	bl	10de8 <memq_dequeue>
		ack = m->_ack;
   10fe4:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10fe8:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10fea:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10fee:	eba3 030c 	sub.w	r3, r3, ip
   10ff2:	f003 0303 	and.w	r3, r3, #3
   10ff6:	2b01      	cmp	r3, #1
		m->_ack = req;
   10ff8:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10ffc:	d046      	beq.n	1108c <mayfly_run+0x130>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10ffe:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   11002:	aa05      	add	r2, sp, #20
   11004:	f7ff fee8 	bl	10dd8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   11008:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   1100a:	9000      	str	r0, [sp, #0]
   1100c:	4683      	mov	fp, r0
			if (state == 1U) {
   1100e:	d02b      	beq.n	11068 <mayfly_run+0x10c>
		while (link) {
   11010:	2800      	cmp	r0, #0
   11012:	d1ca      	bne.n	10faa <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   11014:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   11018:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   1101c:	429a      	cmp	r2, r3
   1101e:	d003      	beq.n	11028 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   11020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   11024:	2301      	movs	r3, #1
   11026:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   11028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   1102c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   11030:	429a      	cmp	r2, r3
   11032:	d003      	beq.n	1103c <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   11034:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   11038:	2301      	movs	r3, #1
   1103a:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   1103c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   11040:	fa5f f989 	uxtb.w	r9, r9
   11044:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   11048:	f1a7 070c 	sub.w	r7, r7, #12
   1104c:	d1a1      	bne.n	10f92 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1104e:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   11052:	b1c3      	cbz	r3, 11086 <mayfly_run+0x12a>
   11054:	9b03      	ldr	r3, [sp, #12]
   11056:	b9b3      	cbnz	r3, 11086 <mayfly_run+0x12a>
		mayfly_enable_cb(callee_id, callee_id, 0);
   11058:	461a      	mov	r2, r3
   1105a:	4651      	mov	r1, sl
   1105c:	4650      	mov	r0, sl
	}
}
   1105e:	b007      	add	sp, #28
   11060:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   11064:	f00f b9fc 	b.w	20460 <mayfly_enable_cb>
				if (caller_id || link) {
   11068:	f1b9 0f00 	cmp.w	r9, #0
   1106c:	d101      	bne.n	11072 <mayfly_run+0x116>
   1106e:	2800      	cmp	r0, #0
   11070:	d0d0      	beq.n	11014 <mayfly_run+0xb8>
					mfp[callee_id] = 1U;
   11072:	f8dd a008 	ldr.w	sl, [sp, #8]
   11076:	4a0a      	ldr	r2, [pc, #40]	; (110a0 <mayfly_run+0x144>)
   11078:	2301      	movs	r3, #1
   1107a:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   1107e:	4651      	mov	r1, sl
   11080:	4650      	mov	r0, sl
   11082:	f00f fa43 	bl	2050c <mayfly_pend>
}
   11086:	b007      	add	sp, #28
   11088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1108c:	4642      	mov	r2, r8
   1108e:	4621      	mov	r1, r4
   11090:	4658      	mov	r0, fp
			m->_ack = ack;
   11092:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   11096:	f7ff fe95 	bl	10dc4 <memq_enqueue>
   1109a:	e7b0      	b.n	10ffe <mayfly_run+0xa2>
   1109c:	4770      	bx	lr
   1109e:	bf00      	nop
   110a0:	2000246c 	.word	0x2000246c
   110a4:	20002470 	.word	0x20002470

000110a8 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(const uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   110a8:	1e4b      	subs	r3, r1, #1
   110aa:	b2db      	uxtb	r3, r3
   110ac:	b171      	cbz	r1, 110cc <util_ones_count_get+0x24>
   110ae:	1e41      	subs	r1, r0, #1
   110b0:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   110b4:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   110b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   110ba:	b123      	cbz	r3, 110c6 <util_ones_count_get+0x1e>
			bite &= (bite - 1);
   110bc:	1e5a      	subs	r2, r3, #1
			one_count++;
   110be:	3001      	adds	r0, #1
		while (bite) {
   110c0:	4013      	ands	r3, r2
			one_count++;
   110c2:	b2c0      	uxtb	r0, r0
		while (bite) {
   110c4:	d1fa      	bne.n	110bc <util_ones_count_get+0x14>
	while (octets_len--) {
   110c6:	4561      	cmp	r1, ip
   110c8:	d1f5      	bne.n	110b6 <util_ones_count_get+0xe>
   110ca:	4770      	bx	lr
	uint8_t one_count = 0U;
   110cc:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   110ce:	4770      	bx	lr

000110d0 <util_aa_le32>:
 * - It shall have at least three ones in the least significant 8 bits.
 * - It shall have no more than eleven transitions in the least significant 16
 *   bits.
 */
int util_aa_le32(uint8_t *dst)
{
   110d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	/* It shall not be the advertising channel packets Access Address.
	 * It shall not be a sequence that differs from the advertising channel
	 * packets Access Address by only one bit.
	 */
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   110d4:	4d48      	ldr	r5, [pc, #288]	; (111f8 <util_aa_le32+0x128>)
{
   110d6:	b083      	sub	sp, #12
   110d8:	4607      	mov	r7, r0
   110da:	2603      	movs	r6, #3
	consecutive_cnt = 1U;
   110dc:	2401      	movs	r4, #1
	lll_csrand_get(dst, sizeof(uint32_t));
   110de:	2104      	movs	r1, #4
   110e0:	4638      	mov	r0, r7
   110e2:	f00c f98f 	bl	1d404 <lll_csrand_get>
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   110e6:	6838      	ldr	r0, [r7, #0]
	consecutive_bit = (aa >> bit_idx) & 0x01;
   110e8:	231e      	movs	r3, #30
   110ea:	ea4f 7cd0 	mov.w	ip, r0, lsr #31
	transitions = 0U;
   110ee:	f04f 0e00 	mov.w	lr, #0
	consecutive_cnt = 1U;
   110f2:	f04f 0901 	mov.w	r9, #1
   110f6:	e00c      	b.n	11112 <util_aa_le32+0x42>
			transitions++;
   110f8:	f10e 0101 	add.w	r1, lr, #1
		     (((bit_idx < 29) && (transitions < 1)) ||
   110fc:	2b1b      	cmp	r3, #27
			transitions++;
   110fe:	b2c9      	uxtb	r1, r1
		     (((bit_idx < 29) && (transitions < 1)) ||
   11100:	d967      	bls.n	111d2 <util_aa_le32+0x102>
				consecutive_cnt = 1U;
   11102:	f04f 0901 	mov.w	r9, #1
		if ((transitions > 24) ||
   11106:	2919      	cmp	r1, #25
   11108:	d04e      	beq.n	111a8 <util_aa_le32+0xd8>
   1110a:	468e      	mov	lr, r1
   1110c:	4694      	mov	ip, r2
	while (bit_idx--) {
   1110e:	3b01      	subs	r3, #1
   11110:	d31e      	bcc.n	11150 <util_aa_le32+0x80>
		bit = (aa >> bit_idx) & 0x01;
   11112:	fa20 f203 	lsr.w	r2, r0, r3
   11116:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   1111a:	4594      	cmp	ip, r2
   1111c:	d1ec      	bne.n	110f8 <util_aa_le32+0x28>
			consecutive_cnt++;
   1111e:	f109 0801 	add.w	r8, r9, #1
   11122:	fa5f f888 	uxtb.w	r8, r8
		if ((consecutive_cnt > 6) ||
   11126:	f1b8 0f06 	cmp.w	r8, #6
   1112a:	d90d      	bls.n	11148 <util_aa_le32+0x78>
   1112c:	4671      	mov	r1, lr
				aa &= ~BIT(bit_idx);
   1112e:	fa04 fc03 	lsl.w	ip, r4, r3
			if (consecutive_bit) {
   11132:	b3a2      	cbz	r2, 1119e <util_aa_le32+0xce>
				aa &= ~BIT(bit_idx);
   11134:	ea20 000c 	bic.w	r0, r0, ip
				consecutive_bit = 0U;
   11138:	f04f 0c00 	mov.w	ip, #0
			if (transitions != transitions_prev) {
   1113c:	4571      	cmp	r1, lr
   1113e:	d1e6      	bne.n	1110e <util_aa_le32+0x3e>
				transitions++;
   11140:	3101      	adds	r1, #1
   11142:	b2c9      	uxtb	r1, r1
   11144:	4662      	mov	r2, ip
   11146:	e7dc      	b.n	11102 <util_aa_le32+0x32>
		if ((consecutive_cnt > 6) ||
   11148:	d149      	bne.n	111de <util_aa_le32+0x10e>
		     (((bit_idx < 29) && (transitions < 1)) ||
   1114a:	46c1      	mov	r9, r8
	while (bit_idx--) {
   1114c:	3b01      	subs	r3, #1
   1114e:	d2e0      	bcs.n	11112 <util_aa_le32+0x42>
	adv_aa_check = aa ^ PDU_AC_ACCESS_ADDR;
   11150:	ea80 0305 	eor.w	r3, r0, r5
   11154:	9301      	str	r3, [sp, #4]
	while (octets_len--) {
   11156:	f10d 0c04 	add.w	ip, sp, #4
   1115a:	f10d 0e08 	add.w	lr, sp, #8
	uint8_t one_count = 0U;
   1115e:	2200      	movs	r2, #0
		bite = *octets;
   11160:	f81c 3b01 	ldrb.w	r3, [ip], #1
		while (bite) {
   11164:	b123      	cbz	r3, 11170 <util_aa_le32+0xa0>
			bite &= (bite - 1);
   11166:	1e59      	subs	r1, r3, #1
			one_count++;
   11168:	3201      	adds	r2, #1
		while (bite) {
   1116a:	400b      	ands	r3, r1
			one_count++;
   1116c:	b2d2      	uxtb	r2, r2
		while (bite) {
   1116e:	d1fa      	bne.n	11166 <util_aa_le32+0x96>
	while (octets_len--) {
   11170:	45e6      	cmp	lr, ip
   11172:	d1f5      	bne.n	11160 <util_aa_le32+0x90>
	if (util_ones_count_get((uint8_t *)&adv_aa_check,
   11174:	2a01      	cmp	r2, #1
   11176:	d909      	bls.n	1118c <util_aa_le32+0xbc>
				sizeof(adv_aa_check)) <= 1) {
		goto again;
	}

	/* It shall not have all four octets equal. */
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   11178:	b283      	uxth	r3, r0
   1117a:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1117e:	ea4f 4210 	mov.w	r2, r0, lsr #16
   11182:	d11b      	bne.n	111bc <util_aa_le32+0xec>
	    !((aa & 0xFF) ^ (aa >> 24))) {
   11184:	b2c3      	uxtb	r3, r0
	if (!((aa & 0xFFFF) ^ (aa >> 16)) &&
   11186:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   1118a:	d117      	bne.n	111bc <util_aa_le32+0xec>
	if (!retry) {
   1118c:	3e01      	subs	r6, #1
   1118e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   11192:	d1a4      	bne.n	110de <util_aa_le32+0xe>
		return -EFAULT;
   11194:	f06f 000d 	mvn.w	r0, #13
	}

	sys_put_le32(aa, dst);

	return 0;
}
   11198:	b003      	add	sp, #12
   1119a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				aa |= BIT(bit_idx);
   1119e:	ea40 000c 	orr.w	r0, r0, ip
				consecutive_bit = 1U;
   111a2:	f04f 0c01 	mov.w	ip, #1
   111a6:	e7c9      	b.n	1113c <util_aa_le32+0x6c>
				aa &= ~(BIT(bit_idx + 1) - 1);
   111a8:	3301      	adds	r3, #1
   111aa:	fa04 f303 	lsl.w	r3, r4, r3
			if (consecutive_bit) {
   111ae:	b112      	cbz	r2, 111b6 <util_aa_le32+0xe6>
				aa &= ~(BIT(bit_idx + 1) - 1);
   111b0:	425b      	negs	r3, r3
   111b2:	4018      	ands	r0, r3
   111b4:	e7cc      	b.n	11150 <util_aa_le32+0x80>
				aa |= (BIT(bit_idx + 1) - 1);
   111b6:	3b01      	subs	r3, #1
   111b8:	4318      	orrs	r0, r3
   111ba:	e7c9      	b.n	11150 <util_aa_le32+0x80>
	dst[1] = val >> 8;
   111bc:	f3c0 2107 	ubfx	r1, r0, #8, #8
   111c0:	0a13      	lsrs	r3, r2, #8
	dst[0] = val;
   111c2:	7038      	strb	r0, [r7, #0]
	return 0;
   111c4:	2000      	movs	r0, #0
	dst[1] = val >> 8;
   111c6:	7079      	strb	r1, [r7, #1]
	dst[0] = val;
   111c8:	70ba      	strb	r2, [r7, #2]
	dst[1] = val >> 8;
   111ca:	70fb      	strb	r3, [r7, #3]
}
   111cc:	b003      	add	sp, #12
   111ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			consecutive_cnt = 1U;
   111d2:	f04f 0801 	mov.w	r8, #1
		      ((bit_idx < 28) && (transitions < 2))))) {
   111d6:	2901      	cmp	r1, #1
   111d8:	d9a9      	bls.n	1112e <util_aa_le32+0x5e>
   111da:	46c1      	mov	r9, r8
   111dc:	e793      	b.n	11106 <util_aa_le32+0x36>
		    ((consecutive_cnt < 6) &&
   111de:	2b1c      	cmp	r3, #28
   111e0:	d904      	bls.n	111ec <util_aa_le32+0x11c>
		     (((bit_idx < 29) && (transitions < 1)) ||
   111e2:	2b1b      	cmp	r3, #27
   111e4:	d906      	bls.n	111f4 <util_aa_le32+0x124>
   111e6:	4694      	mov	ip, r2
   111e8:	46c1      	mov	r9, r8
   111ea:	e7af      	b.n	1114c <util_aa_le32+0x7c>
   111ec:	f1be 0f00 	cmp.w	lr, #0
   111f0:	d09c      	beq.n	1112c <util_aa_le32+0x5c>
   111f2:	e7f6      	b.n	111e2 <util_aa_le32+0x112>
   111f4:	4671      	mov	r1, lr
   111f6:	e7ee      	b.n	111d6 <util_aa_le32+0x106>
   111f8:	8e89bed6 	.word	0x8e89bed6

000111fc <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
   111fc:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
   111fe:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   11200:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
   11202:	2bff      	cmp	r3, #255	; 0xff
   11204:	d014      	beq.n	11230 <ticker_dequeue+0x34>
		ticker_current = &node[current];
   11206:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
   1120a:	428b      	cmp	r3, r1
		ticker_current = &node[current];
   1120c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
   11210:	d028      	beq.n	11264 <ticker_dequeue+0x68>
	total = 0U;
   11212:	f04f 0c00 	mov.w	ip, #0
   11216:	e001      	b.n	1121c <ticker_dequeue+0x20>
		if (current == id) {
   11218:	4299      	cmp	r1, r3
   1121a:	d00b      	beq.n	11234 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
   1121c:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
   1121e:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
   11220:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
   11222:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   11224:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   11228:	44a4      	add	ip, r4
		ticker_current = &node[current];
   1122a:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
   1122e:	d1f3      	bne.n	11218 <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
   11230:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
   11232:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
   11234:	4571      	cmp	r1, lr
   11236:	d018      	beq.n	1126a <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
   11238:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
   1123a:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
   1123c:	fa0f fe8e 	sxth.w	lr, lr
   11240:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
   11244:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   11248:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
   1124c:	7813      	ldrb	r3, [r2, #0]
   1124e:	2bff      	cmp	r3, #255	; 0xff
   11250:	d006      	beq.n	11260 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
   11252:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11256:	eb05 1503 	add.w	r5, r5, r3, lsl #4
   1125a:	68ab      	ldr	r3, [r5, #8]
   1125c:	4403      	add	r3, r0
   1125e:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
   11260:	4460      	add	r0, ip
}
   11262:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
   11264:	469e      	mov	lr, r3
	total = 0U;
   11266:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
   1126a:	7813      	ldrb	r3, [r2, #0]
   1126c:	7743      	strb	r3, [r0, #29]
   1126e:	e7e4      	b.n	1123a <ticker_dequeue+0x3e>

00011270 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   11270:	eba2 0c01 	sub.w	ip, r2, r1
   11274:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   11278:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1127a:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1127c:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   1127e:	d10a      	bne.n	11296 <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11280:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11284:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   11286:	42a3      	cmp	r3, r4
   11288:	d914      	bls.n	112b4 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   1128a:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   1128c:	2100      	movs	r1, #0
}
   1128e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   11290:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   11292:	6141      	str	r1, [r0, #20]
}
   11294:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11296:	1a89      	subs	r1, r1, r2
   11298:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   1129c:	428b      	cmp	r3, r1
   1129e:	d806      	bhi.n	112ae <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   112a0:	4421      	add	r1, r4
   112a2:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   112a4:	2300      	movs	r3, #0
}
   112a6:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   112a8:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   112aa:	6141      	str	r1, [r0, #20]
}
   112ac:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   112ae:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   112b0:	42a3      	cmp	r3, r4
   112b2:	d8ea      	bhi.n	1128a <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   112b4:	1ae1      	subs	r1, r4, r3
   112b6:	e7f5      	b.n	112a4 <ticks_to_expire_prep+0x34>

000112b8 <ticker_job_list_insert>:
{
   112b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112bc:	b087      	sub	sp, #28
   112be:	4603      	mov	r3, r0
	count_user = instance->count_user;
   112c0:	7a42      	ldrb	r2, [r0, #9]
{
   112c2:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   112c4:	6800      	ldr	r0, [r0, #0]
   112c6:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   112c8:	6858      	ldr	r0, [r3, #4]
   112ca:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   112cc:	2a00      	cmp	r2, #0
   112ce:	f000 80f4 	beq.w	114ba <ticker_job_list_insert+0x202>
   112d2:	1e53      	subs	r3, r2, #1
   112d4:	b2db      	uxtb	r3, r3
   112d6:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   112da:	460f      	mov	r7, r1
   112dc:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   112de:	9b03      	ldr	r3, [sp, #12]
   112e0:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   112e2:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   112e4:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   112e6:	2fff      	cmp	r7, #255	; 0xff
   112e8:	d05e      	beq.n	113a8 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   112ea:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   112ee:	9b02      	ldr	r3, [sp, #8]
   112f0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   112f4:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   112f6:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   112fa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   112fe:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   11300:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   11302:	f04f 09ff 	mov.w	r9, #255	; 0xff
   11306:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   1130a:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   1130e:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   11310:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11314:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   11316:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1131a:	d10f      	bne.n	1133c <ticker_job_list_insert+0x84>
   1131c:	e0c8      	b.n	114b0 <ticker_job_list_insert+0x1f8>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   1131e:	1a09      	subs	r1, r1, r0
   11320:	d106      	bne.n	11330 <ticker_job_list_insert+0x78>
   11322:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   11326:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   1132a:	45e2      	cmp	sl, ip
   1132c:	f200 8086 	bhi.w	1143c <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   11330:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   11334:	2bff      	cmp	r3, #255	; 0xff
   11336:	4691      	mov	r9, r2
   11338:	d072      	beq.n	11420 <ticker_job_list_insert+0x168>
   1133a:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   1133c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   11340:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   11344:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   11346:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1134a:	4288      	cmp	r0, r1
   1134c:	d9e7      	bls.n	1131e <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   1134e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   11352:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   11356:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   1135a:	d166      	bne.n	1142a <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   1135c:	9b01      	ldr	r3, [sp, #4]
   1135e:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   11362:	2aff      	cmp	r2, #255	; 0xff
   11364:	d008      	beq.n	11378 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   11366:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1136a:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   1136e:	f8de 3008 	ldr.w	r3, [lr, #8]
   11372:	1a5b      	subs	r3, r3, r1
   11374:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   11378:	78a3      	ldrb	r3, [r4, #2]
   1137a:	3301      	adds	r3, #1
   1137c:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   1137e:	2d00      	cmp	r5, #0
   11380:	d0b1      	beq.n	112e6 <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11382:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   11386:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   11388:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   1138a:	2200      	movs	r2, #0
   1138c:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   1138e:	b113      	cbz	r3, 11396 <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11390:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11392:	4610      	mov	r0, r2
   11394:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   11396:	6863      	ldr	r3, [r4, #4]
   11398:	2b00      	cmp	r3, #0
   1139a:	d1a4      	bne.n	112e6 <ticker_job_list_insert+0x2e>
					ticker->op_context =
   1139c:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   113a0:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   113a2:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   113a6:	d1a0      	bne.n	112ea <ticker_job_list_insert+0x32>
   113a8:	9b03      	ldr	r3, [sp, #12]
   113aa:	7898      	ldrb	r0, [r3, #2]
   113ac:	42b0      	cmp	r0, r6
   113ae:	d02f      	beq.n	11410 <ticker_job_list_insert+0x158>
   113b0:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   113b4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   113b8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				if (first == user->count_user_op) {
   113bc:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   113c0:	f819 3022 	ldrb.w	r3, [r9, r2, lsl #2]
				first = user_ops_first + 1;
   113c4:	3601      	adds	r6, #1
   113c6:	b2f6      	uxtb	r6, r6
					first = 0U;
   113c8:	42b1      	cmp	r1, r6
   113ca:	bf08      	it	eq
   113cc:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   113ce:	2b04      	cmp	r3, #4
				user_op = &user_ops[user_ops_first];
   113d0:	eb09 0582 	add.w	r5, r9, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   113d4:	d11a      	bne.n	1140c <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   113d6:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   113da:	9902      	ldr	r1, [sp, #8]
   113dc:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   113e0:	eb01 1403 	add.w	r4, r1, r3, lsl #4
   113e4:	ea4f 1a03 	mov.w	sl, r3, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   113e8:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   113ea:	7863      	ldrb	r3, [r4, #1]
   113ec:	1a5b      	subs	r3, r3, r1
   113ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   113f2:	d025      	beq.n	11440 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   113f4:	f04f 0300 	mov.w	r3, #0
   113f8:	f809 3022 	strb.w	r3, [r9, r2, lsl #2]
	if (user_op->fp_op_func) {
   113fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   113fe:	2001      	movs	r0, #1
	user_op->status = status;
   11400:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   11402:	b10b      	cbz	r3, 11408 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11404:	6b29      	ldr	r1, [r5, #48]	; 0x30
   11406:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   11408:	f89b 0002 	ldrb.w	r0, [fp, #2]
   1140c:	42b0      	cmp	r0, r6
   1140e:	d1d1      	bne.n	113b4 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   11410:	9a03      	ldr	r2, [sp, #12]
   11412:	9905      	ldr	r1, [sp, #20]
   11414:	4291      	cmp	r1, r2
   11416:	f1a2 0308 	sub.w	r3, r2, #8
   1141a:	d04e      	beq.n	114ba <ticker_job_list_insert+0x202>
   1141c:	9303      	str	r3, [sp, #12]
   1141e:	e75e      	b.n	112de <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   11420:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   11424:	f88b 3000 	strb.w	r3, [fp]
   11428:	461a      	mov	r2, r3
		node[previous].next = id;
   1142a:	fa0f f989 	sxth.w	r9, r9
   1142e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   11432:	ea4f 1909 	mov.w	r9, r9, lsl #4
   11436:	f80e 8009 	strb.w	r8, [lr, r9]
   1143a:	e792      	b.n	11362 <ticker_job_list_insert+0xaa>
   1143c:	4601      	mov	r1, r0
   1143e:	e786      	b.n	1134e <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   11440:	8aaa      	ldrh	r2, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   11442:	9901      	ldr	r1, [sp, #4]
	ticker->ext_data = start->ext_data;
   11444:	f8d5 9024 	ldr.w	r9, [r5, #36]	; 0x24
				ticker_job_op_start(ticker, user_op,
   11448:	6949      	ldr	r1, [r1, #20]
	ticker->remainder_periodic = start->remainder_periodic;
   1144a:	e9d5 ec03 	ldrd	lr, ip, [r5, #12]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   1144e:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   11452:	4282      	cmp	r2, r0
	ticker->ext_data = start->ext_data;
   11454:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   11458:	f8c4 e004 	str.w	lr, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   1145c:	f8c4 c020 	str.w	ip, [r4, #32]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   11460:	d024      	beq.n	114ac <ticker_job_list_insert+0x1f4>
		ticker->must_expire =
   11462:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11466:	1ad3      	subs	r3, r2, r3
   11468:	fab3 f383 	clz	r3, r3
   1146c:	095b      	lsrs	r3, r3, #5
   1146e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->lazy_periodic =
   11472:	f64f 73fd 	movw	r3, #65533	; 0xfffd
   11476:	429a      	cmp	r2, r3
   11478:	bf88      	it	hi
   1147a:	2200      	movhi	r2, #0
	ticker->ticks_slot = start->ticks_slot;
   1147c:	69ab      	ldr	r3, [r5, #24]
   1147e:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   11480:	69eb      	ldr	r3, [r5, #28]
   11482:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   11484:	6a2b      	ldr	r3, [r5, #32]
   11486:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   11488:	68ab      	ldr	r3, [r5, #8]
   1148a:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   1148c:	2300      	movs	r3, #0
	ticker->lazy_periodic =
   1148e:	83a2      	strh	r2, [r4, #28]
	ticker->ticks_to_expire_minus = 0U;
   11490:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11492:	686a      	ldr	r2, [r5, #4]
   11494:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   11496:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   11498:	f7ff feea 	bl	11270 <ticks_to_expire_prep>
	ticker->force = 1U;
   1149c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   114a0:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   114a4:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   114a8:	70e3      	strb	r3, [r4, #3]
}
   114aa:	e729      	b.n	11300 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   114ac:	461a      	mov	r2, r3
   114ae:	e7e5      	b.n	1147c <ticker_job_list_insert+0x1c4>
	ticker_new->next = current;
   114b0:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   114b4:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   114b8:	e75e      	b.n	11378 <ticker_job_list_insert+0xc0>
}
   114ba:	b007      	add	sp, #28
   114bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000114c0 <ticker_worker>:
{
   114c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   114c4:	7f82      	ldrb	r2, [r0, #30]
{
   114c6:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   114c8:	2301      	movs	r3, #1
	if (instance->job_guard) {
   114ca:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   114cc:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   114ce:	2a00      	cmp	r2, #0
   114d0:	d15b      	bne.n	1158a <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   114d2:	7f43      	ldrb	r3, [r0, #29]
   114d4:	2bff      	cmp	r3, #255	; 0xff
   114d6:	4681      	mov	r9, r0
   114d8:	d056      	beq.n	11588 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   114da:	f00e fac1 	bl	1fa60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114de:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   114e2:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   114e6:	f899 801d 	ldrb.w	r8, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114ea:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   114ec:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   114ee:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   114f2:	f000 813c 	beq.w	1176e <ticker_worker+0x2ae>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   114f6:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   114fa:	42bb      	cmp	r3, r7
   114fc:	bf94      	ite	ls
   114fe:	2300      	movls	r3, #0
   11500:	2301      	movhi	r3, #1
   11502:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   11504:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
	node = &instance->nodes[0];
   11508:	f8d9 b000 	ldr.w	fp, [r9]
	while (ticker_id_head != TICKER_NULL) {
   1150c:	f000 8145 	beq.w	1179a <ticker_worker+0x2da>
	ticks_expired = 0U;
   11510:	f04f 0a00 	mov.w	sl, #0
			must_expire_skip = 1U;
   11514:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   11518:	eb08 0848 	add.w	r8, r8, r8, lsl #1
   1151c:	eb0b 1408 	add.w	r4, fp, r8, lsl #4
   11520:	ea4f 1808 	mov.w	r8, r8, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   11524:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11526:	42bb      	cmp	r3, r7
   11528:	d837      	bhi.n	1159a <ticker_worker+0xda>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   1152a:	78a1      	ldrb	r1, [r4, #2]
		ticker_id_head = ticker->next;
   1152c:	f81b 8008 	ldrb.w	r8, [fp, r8]
		ticks_elapsed -= ticks_to_expire;
   11530:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
   11532:	449a      	add	sl, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   11534:	7863      	ldrb	r3, [r4, #1]
   11536:	1a5b      	subs	r3, r3, r1
   11538:	b2db      	uxtb	r3, r3
   1153a:	2b01      	cmp	r3, #1
   1153c:	d12a      	bne.n	11594 <ticker_worker+0xd4>
		if (ticker->ticks_slot != 0U &&
   1153e:	69a6      	ldr	r6, [r4, #24]
   11540:	2e00      	cmp	r6, #0
   11542:	d054      	beq.n	115ee <ticker_worker+0x12e>
   11544:	9b03      	ldr	r3, [sp, #12]
   11546:	2b00      	cmp	r3, #0
   11548:	d04c      	beq.n	115e4 <ticker_worker+0x124>
		int32_t lazy_current = ticker->lazy_current;
   1154a:	8be3      	ldrh	r3, [r4, #30]
   1154c:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   1154e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
   11550:	b13b      	cbz	r3, 11562 <ticker_worker+0xa2>
   11552:	681a      	ldr	r2, [r3, #0]
   11554:	b11a      	cbz	r2, 1155e <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
   11556:	7a1a      	ldrb	r2, [r3, #8]
   11558:	2a00      	cmp	r2, #0
   1155a:	f000 80ef 	beq.w	1173c <ticker_worker+0x27c>
				ext_data->reschedule_state =
   1155e:	2200      	movs	r2, #0
   11560:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
   11562:	9a05      	ldr	r2, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   11564:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   11568:	3201      	adds	r2, #1
   1156a:	b292      	uxth	r2, r2
   1156c:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   1156e:	b178      	cbz	r0, 11590 <ticker_worker+0xd0>
   11570:	8ba0      	ldrh	r0, [r4, #28]
   11572:	4290      	cmp	r0, r2
   11574:	d20c      	bcs.n	11590 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   11576:	2b00      	cmp	r3, #0
   11578:	f000 80fc 	beq.w	11774 <ticker_worker+0x2b4>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   1157c:	7a1a      	ldrb	r2, [r3, #8]
   1157e:	2a01      	cmp	r2, #1
   11580:	d006      	beq.n	11590 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   11582:	f04f 0c01 	mov.w	ip, #1
   11586:	e036      	b.n	115f6 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   11588:	77c2      	strb	r2, [r0, #31]
}
   1158a:	b00f      	add	sp, #60	; 0x3c
   1158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   11590:	3901      	subs	r1, #1
   11592:	70a1      	strb	r1, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   11594:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11598:	d1be      	bne.n	11518 <ticker_worker+0x58>
   1159a:	f8dd 9010 	ldr.w	r9, [sp, #16]
   1159e:	4651      	mov	r1, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   115a0:	f899 300b 	ldrb.w	r3, [r9, #11]
   115a4:	f899 200a 	ldrb.w	r2, [r9, #10]
   115a8:	429a      	cmp	r2, r3
   115aa:	d10a      	bne.n	115c2 <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   115ac:	3201      	adds	r2, #1
   115ae:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   115b0:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   115b2:	bf1c      	itt	ne
   115b4:	4613      	movne	r3, r2
   115b6:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   115b8:	9a06      	ldr	r2, [sp, #24]
   115ba:	f889 200b 	strb.w	r2, [r9, #11]
   115be:	bf08      	it	eq
   115c0:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   115c2:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   115c6:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   115ca:	60d9      	str	r1, [r3, #12]
	instance->worker_trigger = 0U;
   115cc:	2200      	movs	r2, #0
   115ce:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   115d2:	464b      	mov	r3, r9
   115d4:	2201      	movs	r2, #1
   115d6:	2104      	movs	r1, #4
   115d8:	2003      	movs	r0, #3
   115da:	46a4      	mov	ip, r4
}
   115dc:	b00f      	add	sp, #60	; 0x3c
   115de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   115e2:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   115e4:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   115e8:	9307      	str	r3, [sp, #28]
   115ea:	3380      	adds	r3, #128	; 0x80
   115ec:	d141      	bne.n	11672 <ticker_worker+0x1b2>
		if (ticker->ext_data) {
   115ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   115f0:	b1f3      	cbz	r3, 11630 <ticker_worker+0x170>
   115f2:	f04f 0c00 	mov.w	ip, #0
			ticker->ext_data->ticks_drift = 0U;
   115f6:	2200      	movs	r2, #0
			ticker->ext_data->reschedule_state =
   115f8:	721a      	strb	r2, [r3, #8]
		if (ticker->timeout_func) {
   115fa:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   115fc:	1e48      	subs	r0, r1, #1
			ticks_drift = ticker->ext_data->ticks_drift;
   115fe:	6859      	ldr	r1, [r3, #4]
			ticker->ext_data->ticks_drift = 0U;
   11600:	605a      	str	r2, [r3, #4]
		ticker->ack--;
   11602:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   11604:	2d00      	cmp	r5, #0
   11606:	d0c5      	beq.n	11594 <ticker_worker+0xd4>
					   ticks_expired -
   11608:	9b04      	ldr	r3, [sp, #16]
   1160a:	6960      	ldr	r0, [r4, #20]
   1160c:	695b      	ldr	r3, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
   1160e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11610:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   11612:	ebaa 0000 	sub.w	r0, sl, r0
   11616:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   11618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   1161c:	78e3      	ldrb	r3, [r4, #3]
			ticker->timeout_func(ticks_at_expire,
   1161e:	f1bc 0f00 	cmp.w	ip, #0
   11622:	d016      	beq.n	11652 <ticker_worker+0x192>
   11624:	e9cd 3600 	strd	r3, r6, [sp]
   11628:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1162c:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1162e:	e7b1      	b.n	11594 <ticker_worker+0xd4>
		if (ticker->timeout_func) {
   11630:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   11632:	3901      	subs	r1, #1
   11634:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   11636:	2d00      	cmp	r5, #0
   11638:	d0ac      	beq.n	11594 <ticker_worker+0xd4>
			ticks_drift = 0U;
   1163a:	4619      	mov	r1, r3
					   ticks_expired -
   1163c:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   1163e:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11640:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   11642:	ebaa 0003 	sub.w	r0, sl, r3
   11646:	9b04      	ldr	r3, [sp, #16]
   11648:	695b      	ldr	r3, [r3, #20]
   1164a:	4418      	add	r0, r3
			uint8_t next_force = (ticker_next->force > ticker->force);
   1164c:	78e3      	ldrb	r3, [r4, #3]
			ticks_at_expire = (instance->ticks_current +
   1164e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   11652:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
   11656:	e9cd 3600 	strd	r3, r6, [sp]
   1165a:	4663      	mov	r3, ip
   1165c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   1165e:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   11660:	2b00      	cmp	r3, #0
   11662:	9b03      	ldr	r3, [sp, #12]
   11664:	bf18      	it	ne
   11666:	2301      	movne	r3, #1
   11668:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   1166a:	2300      	movs	r3, #0
   1166c:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   1166e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   11670:	e790      	b.n	11594 <ticker_worker+0xd4>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   11672:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   11676:	d0ba      	beq.n	115ee <ticker_worker+0x12e>
		int32_t lazy_current = ticker->lazy_current;
   11678:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   1167a:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   1167c:	6865      	ldr	r5, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   1167e:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   11680:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   11682:	bf28      	it	cs
   11684:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   11686:	fb02 5005 	mla	r0, r2, r5, r5
   1168a:	9008      	str	r0, [sp, #32]
				(lazy_current - ticker->priority);
   1168c:	9807      	ldr	r0, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   1168e:	e9cd 170a 	strd	r1, r7, [sp, #40]	; 0x28
				(lazy_current - ticker->priority);
   11692:	1a12      	subs	r2, r2, r0
		uint32_t acc_ticks_to_expire = 0U;
   11694:	e9cd a80c 	strd	sl, r8, [sp, #48]	; 0x30
		uint32_t current_age = ticker->ticks_periodic +
   11698:	4643      	mov	r3, r8
				(lazy_current - ticker->priority);
   1169a:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   1169c:	46a0      	mov	r8, r4
   1169e:	f04f 0c00 	mov.w	ip, #0
   116a2:	462c      	mov	r4, r5
			struct ticker_node *ticker_next = &nodes[id_head];
   116a4:	b21b      	sxth	r3, r3
   116a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   116aa:	eb0b 1203 	add.w	r2, fp, r3, lsl #4
   116ae:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   116b0:	f8d2 e008 	ldr.w	lr, [r2, #8]
   116b4:	44f4      	add	ip, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   116b6:	4566      	cmp	r6, ip
   116b8:	d339      	bcc.n	1172e <ticker_worker+0x26e>
			if (ticker_next->ticks_slot == 0U) {
   116ba:	6991      	ldr	r1, [r2, #24]
   116bc:	b399      	cbz	r1, 11726 <ticker_worker+0x266>
			int32_t lazy_next = ticker_next->lazy_current;
   116be:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   116c0:	8b90      	ldrh	r0, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   116c2:	f8d2 9004 	ldr.w	r9, [r2, #4]
				ticker_next->priority;
   116c6:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   116ca:	4281      	cmp	r1, r0
			int32_t lazy_next = ticker_next->lazy_current;
   116cc:	460d      	mov	r5, r1
				lazy_next -= ticker_next->lazy_periodic;
   116ce:	bf28      	it	cs
   116d0:	1a0d      	subcs	r5, r1, r0
					  0U :
   116d2:	f1b9 0f00 	cmp.w	r9, #0
   116d6:	d03e      	beq.n	11756 <ticker_worker+0x296>
   116d8:	eba9 0e0e 	sub.w	lr, r9, lr
				(ticker->ticks_periodic == 0U) ||
   116dc:	b3bc      	cbz	r4, 1174e <ticker_worker+0x28e>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   116de:	fb09 ee05 	mla	lr, r9, r5, lr
				(ticker->ticks_periodic == 0U) ||
   116e2:	f8dd 9020 	ldr.w	r9, [sp, #32]
   116e6:	45f1      	cmp	r9, lr
   116e8:	bf8c      	ite	hi
   116ea:	f04f 0e01 	movhi.w	lr, #1
   116ee:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
   116f2:	bf34      	ite	cc
   116f4:	f04f 0901 	movcc.w	r9, #1
   116f8:	f04f 0900 	movcs.w	r9, #0
			if (!lazy_next_periodic_skip &&
   116fc:	4281      	cmp	r1, r0
			uint8_t next_force = (ticker_next->force > ticker->force);
   116fe:	f892 a003 	ldrb.w	sl, [r2, #3]
   11702:	f898 2003 	ldrb.w	r2, [r8, #3]
			if (!lazy_next_periodic_skip &&
   11706:	d30e      	bcc.n	11726 <ticker_worker+0x266>
   11708:	4592      	cmp	sl, r2
   1170a:	d829      	bhi.n	11760 <ticker_worker+0x2a0>
			    (next_force ||
   1170c:	f117 0f80 	cmn.w	r7, #128	; 0x80
   11710:	d026      	beq.n	11760 <ticker_worker+0x2a0>
			     next_is_critical ||
   11712:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   11714:	1bed      	subs	r5, r5, r7
			     next_is_critical ||
   11716:	4295      	cmp	r5, r2
   11718:	dd02      	ble.n	11720 <ticker_worker+0x260>
			     (next_has_priority && !current_is_older) ||
   1171a:	f1be 0f00 	cmp.w	lr, #0
   1171e:	d01f      	beq.n	11760 <ticker_worker+0x2a0>
   11720:	9a07      	ldr	r2, [sp, #28]
   11722:	42ba      	cmp	r2, r7
   11724:	d019      	beq.n	1175a <ticker_worker+0x29a>
			id_head = ticker_next->next;
   11726:	f81b 3003 	ldrb.w	r3, [fp, r3]
		while (id_head != TICKER_NULL) {
   1172a:	2bff      	cmp	r3, #255	; 0xff
   1172c:	d1ba      	bne.n	116a4 <ticker_worker+0x1e4>
   1172e:	4644      	mov	r4, r8
   11730:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   11734:	990a      	ldr	r1, [sp, #40]	; 0x28
   11736:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1173a:	e758      	b.n	115ee <ticker_worker+0x12e>
			    TICKER_RESCHEDULE_STATE_NONE &&
   1173c:	8ba2      	ldrh	r2, [r4, #28]
   1173e:	9805      	ldr	r0, [sp, #20]
   11740:	4282      	cmp	r2, r0
   11742:	f63f af0c 	bhi.w	1155e <ticker_worker+0x9e>
				ext_data->reschedule_state =
   11746:	f04f 0201 	mov.w	r2, #1
   1174a:	721a      	strb	r2, [r3, #8]
   1174c:	e709      	b.n	11562 <ticker_worker+0xa2>
				(ticker->ticks_periodic == 0U) ||
   1174e:	f04f 0e01 	mov.w	lr, #1
					(ticker->ticks_periodic != 0U) &&
   11752:	46a1      	mov	r9, r4
   11754:	e7d2      	b.n	116fc <ticker_worker+0x23c>
					  0U :
   11756:	46ce      	mov	lr, r9
   11758:	e7c0      	b.n	116dc <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   1175a:	f1b9 0f00 	cmp.w	r9, #0
   1175e:	d0e2      	beq.n	11726 <ticker_worker+0x266>
   11760:	4644      	mov	r4, r8
   11762:	e9dd 7a0b 	ldrd	r7, sl, [sp, #44]	; 0x2c
   11766:	990a      	ldr	r1, [sp, #40]	; 0x28
   11768:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   1176c:	e6ef      	b.n	1154e <ticker_worker+0x8e>
	uint8_t slot_reserved = 0;
   1176e:	9b06      	ldr	r3, [sp, #24]
   11770:	9303      	str	r3, [sp, #12]
   11772:	e6c7      	b.n	11504 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   11774:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   11776:	3901      	subs	r1, #1
   11778:	70a1      	strb	r1, [r4, #2]
		if (ticker->timeout_func) {
   1177a:	2d00      	cmp	r5, #0
   1177c:	f43f af0a 	beq.w	11594 <ticker_worker+0xd4>
			ticks_drift = 0U;
   11780:	4619      	mov	r1, r3
					   ticks_expired -
   11782:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   11784:	6a62      	ldr	r2, [r4, #36]	; 0x24
   11786:	6926      	ldr	r6, [r4, #16]
					   ticks_expired -
   11788:	ebaa 0003 	sub.w	r0, sl, r3
   1178c:	9b04      	ldr	r3, [sp, #16]
   1178e:	695b      	ldr	r3, [r3, #20]
   11790:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   11792:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			uint8_t next_force = (ticker_next->force > ticker->force);
   11796:	78e3      	ldrb	r3, [r4, #3]
   11798:	e744      	b.n	11624 <ticker_worker+0x164>
	ticks_expired = 0U;
   1179a:	2300      	movs	r3, #0
   1179c:	4619      	mov	r1, r3
   1179e:	e6ff      	b.n	115a0 <ticker_worker+0xe0>

000117a0 <ticker_job>:
	if (instance->worker_trigger) {
   117a0:	7fc3      	ldrb	r3, [r0, #31]
   117a2:	2b00      	cmp	r3, #0
   117a4:	f040 8431 	bne.w	1200a <ticker_job+0x86a>
{
   117a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   117ac:	7f82      	ldrb	r2, [r0, #30]
{
   117ae:	b08d      	sub	sp, #52	; 0x34
   117b0:	4683      	mov	fp, r0
	if (instance->job_guard) {
   117b2:	2a00      	cmp	r2, #0
   117b4:	f040 808c 	bne.w	118d0 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117b8:	7a83      	ldrb	r3, [r0, #10]
   117ba:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
   117bc:	2001      	movs	r0, #1
   117be:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117c2:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   117c4:	f8db 0014 	ldr.w	r0, [fp, #20]
   117c8:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   117ca:	f000 8440 	beq.w	1204e <ticker_job+0x8ae>
	uint8_t idx = *ticks_elapsed_index + 1;
   117ce:	3301      	adds	r3, #1
   117d0:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   117d2:	2b02      	cmp	r3, #2
		idx = 0U;
   117d4:	bf08      	it	eq
   117d6:	4613      	moveq	r3, r2
		ticks_elapsed =
   117d8:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   117dc:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   117e0:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   117e4:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   117e6:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
   117e8:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   117ea:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   117ec:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   117ee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   117f2:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   117f6:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   117fa:	f8db 3000 	ldr.w	r3, [fp]
   117fe:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   11800:	f8db 3004 	ldr.w	r3, [fp, #4]
   11804:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   11806:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   11808:	9206      	str	r2, [sp, #24]
	while (count_user--) {
   1180a:	b2db      	uxtb	r3, r3
   1180c:	2a00      	cmp	r2, #0
   1180e:	f000 81d5 	beq.w	11bbc <ticker_job+0x41c>
		flag_elapsed = 1U;
   11812:	2201      	movs	r2, #1
   11814:	920b      	str	r2, [sp, #44]	; 0x2c
   11816:	9a05      	ldr	r2, [sp, #20]
   11818:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   1181c:	2300      	movs	r3, #0
   1181e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   11820:	23ff      	movs	r3, #255	; 0xff
   11822:	9301      	str	r3, [sp, #4]
   11824:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
   11826:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
   1182a:	f89a c003 	ldrb.w	ip, [sl, #3]
   1182e:	f89a 7002 	ldrb.w	r7, [sl, #2]
   11832:	4567      	cmp	r7, ip
   11834:	d044      	beq.n	118c0 <ticker_job+0x120>
			if (middle == user->count_user_op) {
   11836:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
   1183a:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
   1183c:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
   1183e:	b2db      	uxtb	r3, r3
				middle = 0U;
   11840:	429a      	cmp	r2, r3
   11842:	bf08      	it	eq
   11844:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   11846:	eb06 0246 	add.w	r2, r6, r6, lsl #1
   1184a:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
   1184e:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   11852:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
   11856:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
   11858:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1185c:	d942      	bls.n	118e4 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   1185e:	2808      	cmp	r0, #8
   11860:	d842      	bhi.n	118e8 <ticker_job+0x148>
			ticker = &node[user_op->id];
   11862:	7861      	ldrb	r1, [r4, #1]
   11864:	9a00      	ldr	r2, [sp, #0]
   11866:	eb01 0541 	add.w	r5, r1, r1, lsl #1
   1186a:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
   1186e:	786a      	ldrb	r2, [r5, #1]
   11870:	f895 e002 	ldrb.w	lr, [r5, #2]
   11874:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   11878:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1187c:	d034      	beq.n	118e8 <ticker_job+0x148>
			    (state == 0U) ||
   1187e:	2805      	cmp	r0, #5
   11880:	d041      	beq.n	11906 <ticker_job+0x166>
			if (state == 1U) {
   11882:	2a01      	cmp	r2, #1
   11884:	f040 8118 	bne.w	11ab8 <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
   11888:	2806      	cmp	r0, #6
   1188a:	d006      	beq.n	1189a <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
   1188c:	4658      	mov	r0, fp
   1188e:	f7ff fcb5 	bl	111fc <ticker_dequeue>
			ticker->req = ticker->ack;
   11892:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
   11894:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
   11896:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11898:	7861      	ldrb	r1, [r4, #1]
   1189a:	f89b 301c 	ldrb.w	r3, [fp, #28]
   1189e:	428b      	cmp	r3, r1
   118a0:	f000 80d9 	beq.w	11a56 <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   118a4:	2000      	movs	r0, #0
   118a6:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   118aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
   118ac:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   118ae:	b10b      	cbz	r3, 118b4 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   118b0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   118b2:	4798      	blx	r3
		while (user->middle != user->last) {
   118b4:	f89a c003 	ldrb.w	ip, [sl, #3]
   118b8:	f89a 7002 	ldrb.w	r7, [sl, #2]
   118bc:	4567      	cmp	r7, ip
   118be:	d1ba      	bne.n	11836 <ticker_job+0x96>
	while (count_user--) {
   118c0:	9a05      	ldr	r2, [sp, #20]
   118c2:	4552      	cmp	r2, sl
   118c4:	f1aa 0308 	sub.w	r3, sl, #8
   118c8:	f000 8107 	beq.w	11ada <ticker_job+0x33a>
   118cc:	469a      	mov	sl, r3
   118ce:	e7aa      	b.n	11826 <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   118d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   118d2:	2104      	movs	r1, #4
   118d4:	4603      	mov	r3, r0
   118d6:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118d8:	2004      	movs	r0, #4
   118da:	46a4      	mov	ip, r4
}
   118dc:	b00d      	add	sp, #52	; 0x34
   118de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   118e2:	4760      	bx	ip
   118e4:	461f      	mov	r7, r3
   118e6:	e7a4      	b.n	11832 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   118e8:	2200      	movs	r2, #0
   118ea:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
   118ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
   118f0:	2001      	movs	r0, #1
   118f2:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
   118f4:	2a00      	cmp	r2, #0
   118f6:	d0f5      	beq.n	118e4 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   118f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   118fa:	4790      	blx	r2
		while (user->middle != user->last) {
   118fc:	f89a c003 	ldrb.w	ip, [sl, #3]
   11900:	f89a 7002 	ldrb.w	r7, [sl, #2]
   11904:	e795      	b.n	11832 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   11906:	6860      	ldr	r0, [r4, #4]
   11908:	b948      	cbnz	r0, 1191e <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   1190a:	68a0      	ldr	r0, [r4, #8]
   1190c:	b938      	cbnz	r0, 1191e <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1190e:	68e0      	ldr	r0, [r4, #12]
   11910:	b928      	cbnz	r0, 1191e <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   11912:	6920      	ldr	r0, [r4, #16]
   11914:	b918      	cbnz	r0, 1191e <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
   11916:	6960      	ldr	r0, [r4, #20]
   11918:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   1191c:	d0e4      	beq.n	118e8 <ticker_job+0x148>
			if (state == 1U) {
   1191e:	2a01      	cmp	r2, #1
   11920:	f040 80ca 	bne.w	11ab8 <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11924:	4658      	mov	r0, fp
   11926:	f7ff fc69 	bl	111fc <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1192a:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   1192e:	60a8      	str	r0, [r5, #8]
   11930:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11932:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
   11934:	f00e f894 	bl	1fa60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11938:	9b02      	ldr	r3, [sp, #8]
   1193a:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1193c:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1193e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11942:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   11944:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
   11946:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
   11948:	f240 80af 	bls.w	11aaa <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
   1194c:	696b      	ldr	r3, [r5, #20]
   1194e:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
   11950:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
   11952:	f8d5 c004 	ldr.w	ip, [r5, #4]
   11956:	f1bc 0f00 	cmp.w	ip, #0
   1195a:	d051      	beq.n	11a00 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
   1195c:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
   1195e:	2b00      	cmp	r3, #0
   11960:	d04e      	beq.n	11a00 <ticker_job+0x260>
		user_op->params.update.lazy--;
   11962:	3b01      	subs	r3, #1
   11964:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11966:	4594      	cmp	ip, r2
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11968:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
   1196a:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1196c:	d223      	bcs.n	119b6 <ticker_job+0x216>
   1196e:	f10c 0e01 	add.w	lr, ip, #1
   11972:	f8cd 8018 	str.w	r8, [sp, #24]
   11976:	940a      	str	r4, [sp, #40]	; 0x28
   11978:	e018      	b.n	119ac <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
   1197a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1197c:	f8df 8228 	ldr.w	r8, [pc, #552]	; 11ba8 <ticker_job+0x408>
   11980:	4c8a      	ldr	r4, [pc, #552]	; (11bac <ticker_job+0x40c>)
   11982:	4488      	add	r8, r1
   11984:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11986:	bf84      	itt	hi
   11988:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1198c:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   11990:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
   11992:	6a2c      	ldr	r4, [r5, #32]
   11994:	bf94      	ite	ls
   11996:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11998:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1199c:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1199e:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   119a0:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
   119a2:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   119a4:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   119a6:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
   119a8:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   119aa:	d201      	bcs.n	119b0 <ticker_job+0x210>
   119ac:	429f      	cmp	r7, r3
   119ae:	d3e4      	bcc.n	1197a <ticker_job+0x1da>
   119b0:	f8dd 8018 	ldr.w	r8, [sp, #24]
   119b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119b6:	42bb      	cmp	r3, r7
   119b8:	d221      	bcs.n	119fe <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
   119ba:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   119be:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
   119c2:	9006      	str	r0, [sp, #24]
   119c4:	940a      	str	r4, [sp, #40]	; 0x28
   119c6:	e005      	b.n	119d4 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119c8:	3301      	adds	r3, #1
   119ca:	b29b      	uxth	r3, r3
   119cc:	4660      	mov	r0, ip
   119ce:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
   119d0:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119d2:	d011      	beq.n	119f8 <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
   119d4:	4874      	ldr	r0, [pc, #464]	; (11ba8 <ticker_job+0x408>)
   119d6:	4c75      	ldr	r4, [pc, #468]	; (11bac <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
   119d8:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
   119da:	1808      	adds	r0, r1, r0
   119dc:	42a0      	cmp	r0, r4
   119de:	d8f3      	bhi.n	119c8 <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119e0:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   119e2:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119e4:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119e8:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119ea:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119ee:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   119f0:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   119f4:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   119f6:	d1ed      	bne.n	119d4 <ticker_job+0x234>
   119f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   119fa:	6269      	str	r1, [r5, #36]	; 0x24
   119fc:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   119fe:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
   11a00:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
   11a02:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11a04:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
   11a06:	440a      	add	r2, r1
   11a08:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   11a0a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   11a0c:	4403      	add	r3, r0
   11a0e:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   11a10:	b11a      	cbz	r2, 11a1a <ticker_job+0x27a>
   11a12:	6813      	ldr	r3, [r2, #0]
   11a14:	b10b      	cbz	r3, 11a1a <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
   11a16:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   11a18:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11a1a:	464a      	mov	r2, r9
   11a1c:	9902      	ldr	r1, [sp, #8]
   11a1e:	4628      	mov	r0, r5
   11a20:	f7ff fc26 	bl	11270 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11a24:	68e2      	ldr	r2, [r4, #12]
   11a26:	69ab      	ldr	r3, [r5, #24]
   11a28:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11a2a:	6922      	ldr	r2, [r4, #16]
   11a2c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11a2e:	bf8c      	ite	hi
   11a30:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   11a32:	2300      	movls	r3, #0
   11a34:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
   11a36:	7da3      	ldrb	r3, [r4, #22]
   11a38:	b103      	cbz	r3, 11a3c <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
   11a3a:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
   11a3c:	7de3      	ldrb	r3, [r4, #23]
   11a3e:	b113      	cbz	r3, 11a46 <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   11a40:	3b01      	subs	r3, #1
   11a42:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
   11a46:	9b01      	ldr	r3, [sp, #4]
   11a48:	702b      	strb	r3, [r5, #0]
		ticker->req++;
   11a4a:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
   11a4c:	7862      	ldrb	r2, [r4, #1]
   11a4e:	9201      	str	r2, [sp, #4]
		ticker->req++;
   11a50:	3301      	adds	r3, #1
   11a52:	706b      	strb	r3, [r5, #1]
   11a54:	e726      	b.n	118a4 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
   11a56:	23ff      	movs	r3, #255	; 0xff
   11a58:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
   11a5c:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
   11a60:	2b06      	cmp	r3, #6
   11a62:	d013      	beq.n	11a8c <ticker_job+0x2ec>
   11a64:	2b08      	cmp	r3, #8
   11a66:	d011      	beq.n	11a8c <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
   11a68:	f00d fffa 	bl	1fa60 <cntr_cnt_get>
			ticks_current = instance->ticks_current;
   11a6c:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   11a70:	1a83      	subs	r3, r0, r2
   11a72:	021d      	lsls	r5, r3, #8
   11a74:	d410      	bmi.n	11a98 <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
   11a76:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   11a7c:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   11a7e:	f8db 2018 	ldr.w	r2, [fp, #24]
   11a82:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   11a84:	bf88      	it	hi
   11a86:	f8cb 3018 	strhi.w	r3, [fp, #24]
   11a8a:	e70b      	b.n	118a4 <ticker_job+0x104>
				ticks_at_yield =
   11a8c:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
   11a8e:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
   11a92:	1a83      	subs	r3, r0, r2
   11a94:	021d      	lsls	r5, r3, #8
   11a96:	d5ee      	bpl.n	11a76 <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11a98:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
   11a9a:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11a9c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   11aa0:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   11aa2:	bf34      	ite	cc
   11aa4:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   11aa6:	2300      	movcs	r3, #0
   11aa8:	e7e9      	b.n	11a7e <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   11aaa:	696b      	ldr	r3, [r5, #20]
   11aac:	1bda      	subs	r2, r3, r7
   11aae:	1853      	adds	r3, r2, r1
   11ab0:	9304      	str	r3, [sp, #16]
   11ab2:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
   11ab4:	2200      	movs	r2, #0
   11ab6:	e74c      	b.n	11952 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11ab8:	2104      	movs	r1, #4
   11aba:	465b      	mov	r3, fp
   11abc:	2201      	movs	r2, #1
   11abe:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11ac2:	4608      	mov	r0, r1
   11ac4:	47a0      	blx	r4
	while (count_user--) {
   11ac6:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   11ac8:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
   11acc:	2301      	movs	r3, #1
	while (count_user--) {
   11ace:	4552      	cmp	r2, sl
				pending = 1U;
   11ad0:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   11ad2:	f1aa 0308 	sub.w	r3, sl, #8
   11ad6:	f47f aef9 	bne.w	118cc <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11ada:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   11ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11ae0:	1a9b      	subs	r3, r3, r2
   11ae2:	bf18      	it	ne
   11ae4:	2301      	movne	r3, #1
   11ae6:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
   11ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11aea:	2b00      	cmp	r3, #0
   11aec:	d16a      	bne.n	11bc4 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
   11aee:	9901      	ldr	r1, [sp, #4]
   11af0:	4658      	mov	r0, fp
   11af2:	f7ff fbe1 	bl	112b8 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11af6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11afa:	9300      	str	r3, [sp, #0]
   11afc:	9b00      	ldr	r3, [sp, #0]
   11afe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b00:	4293      	cmp	r3, r2
   11b02:	f000 826c 	beq.w	11fde <ticker_job+0x83e>
	if (!pending) {
   11b06:	9b08      	ldr	r3, [sp, #32]
   11b08:	2b00      	cmp	r3, #0
   11b0a:	f000 81e6 	beq.w	11eda <ticker_job+0x73a>
	if (instance->ticker_id_head == TICKER_NULL) {
   11b0e:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11b12:	9300      	str	r3, [sp, #0]
   11b14:	9b00      	ldr	r3, [sp, #0]
   11b16:	2bff      	cmp	r3, #255	; 0xff
   11b18:	f000 82c4 	beq.w	120a4 <ticker_job+0x904>
	if (ticker_id_old_head == TICKER_NULL) {
   11b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11b1e:	2bff      	cmp	r3, #255	; 0xff
   11b20:	f000 82cb 	beq.w	120ba <ticker_job+0x91a>
	ticker = &instance->nodes[instance->ticker_id_head];
   11b24:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
   11b26:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   11b2a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 11bb0 <ticker_job+0x410>
   11b2e:	f8df 8084 	ldr.w	r8, [pc, #132]	; 11bb4 <ticker_job+0x414>
   11b32:	4f21      	ldr	r7, [pc, #132]	; (11bb8 <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
   11b34:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   11b38:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   11b3c:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   11b3e:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   11b40:	f00d ff8e 	bl	1fa60 <cntr_cnt_get>
		cc = instance->ticks_current;
   11b44:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11b48:	1b03      	subs	r3, r0, r4
   11b4a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11b4e:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   11b50:	42b3      	cmp	r3, r6
   11b52:	bf2c      	ite	cs
   11b54:	18e4      	addcs	r4, r4, r3
   11b56:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   11b58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   11b5c:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   11b60:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   11b62:	4620      	mov	r0, r4
   11b64:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11b66:	f00d ff7b 	bl	1fa60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11b6a:	eba0 030a 	sub.w	r3, r0, sl
   11b6e:	eba4 040a 	sub.w	r4, r4, sl
   11b72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   11b76:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11b78:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   11b7c:	42a3      	cmp	r3, r4
		i--;
   11b7e:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   11b82:	f240 8233 	bls.w	11fec <ticker_job+0x84c>
		LL_ASSERT(i);
   11b86:	2d00      	cmp	r5, #0
   11b88:	d1da      	bne.n	11b40 <ticker_job+0x3a0>
   11b8a:	f640 133e 	movw	r3, #2366	; 0x93e
   11b8e:	464a      	mov	r2, r9
   11b90:	4641      	mov	r1, r8
   11b92:	4638      	mov	r0, r7
   11b94:	f016 fa08 	bl	27fa8 <printk>
   11b98:	4040      	eors	r0, r0
   11b9a:	f380 8811 	msr	BASEPRI, r0
   11b9e:	f04f 0003 	mov.w	r0, #3
   11ba2:	df02      	svc	2
   11ba4:	e7cc      	b.n	11b40 <ticker_job+0x3a0>
   11ba6:	bf00      	nop
   11ba8:	ff172b5a 	.word	0xff172b5a
   11bac:	7f172b59 	.word	0x7f172b59
   11bb0:	0002fe9c 	.word	0x0002fe9c
   11bb4:	0002ffa0 	.word	0x0002ffa0
   11bb8:	0002fedc 	.word	0x0002fedc
	pending = 0U;
   11bbc:	9b06      	ldr	r3, [sp, #24]
   11bbe:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   11bc0:	23ff      	movs	r3, #255	; 0xff
   11bc2:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
   11bc4:	f00d ff4c 	bl	1fa60 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11bc8:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   11bca:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11bce:	1ac3      	subs	r3, r0, r3
   11bd0:	f023 4a7f 	bic.w	sl, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   11bd4:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
   11bd6:	f8db 3000 	ldr.w	r3, [fp]
   11bda:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
   11bdc:	d050      	beq.n	11c80 <ticker_job+0x4e0>
	ticks_expired = 0U;
   11bde:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   11be0:	f8df 8290 	ldr.w	r8, [pc, #656]	; 11e74 <ticker_job+0x6d4>
   11be4:	f8df 9290 	ldr.w	r9, [pc, #656]	; 11e78 <ticker_job+0x6d8>
	while (instance->ticker_id_head != TICKER_NULL) {
   11be8:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
   11bea:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   11bec:	9a00      	ldr	r2, [sp, #0]
   11bee:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   11bf2:	eb02 1403 	add.w	r4, r2, r3, lsl #4
   11bf6:	011b      	lsls	r3, r3, #4
   11bf8:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
   11bfa:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11bfc:	429f      	cmp	r7, r3
   11bfe:	f0c0 8243 	bcc.w	12088 <ticker_job+0x8e8>
		ticks_expired += ticks_to_expire;
   11c02:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   11c04:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		instance->ticker_id_head = ticker->next;
   11c08:	f8dd c010 	ldr.w	ip, [sp, #16]
		ticks_expired += ticks_to_expire;
   11c0c:	441a      	add	r2, r3
   11c0e:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11c10:	f8db 2018 	ldr.w	r2, [fp, #24]
   11c14:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11c16:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
   11c1a:	ebaa 0a03 	sub.w	sl, sl, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11c1e:	bf25      	ittet	cs
   11c20:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   11c24:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   11c28:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   11c2a:	2300      	movcs	r3, #0
   11c2c:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11c30:	78a2      	ldrb	r2, [r4, #2]
   11c32:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11c34:	69a0      	ldr	r0, [r4, #24]
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11c36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
		if ((ticker->ticks_periodic != 0U) ||
   11c38:	6865      	ldr	r5, [r4, #4]
		state = (ticker->req - ticker->ack) & 0xff;
   11c3a:	1a9b      	subs	r3, r3, r2
   11c3c:	b2db      	uxtb	r3, r3
   11c3e:	9305      	str	r3, [sp, #20]
		instance->ticker_id_head = ticker->next;
   11c40:	9b00      	ldr	r3, [sp, #0]
   11c42:	f813 c00c 	ldrb.w	ip, [r3, ip]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11c46:	b118      	cbz	r0, 11c50 <ticker_job+0x4b0>
   11c48:	9b05      	ldr	r3, [sp, #20]
   11c4a:	2b02      	cmp	r3, #2
   11c4c:	f000 8135 	beq.w	11eba <ticker_job+0x71a>
		ticker->ticks_to_expire = 0U;
   11c50:	2300      	movs	r3, #0
   11c52:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11c54:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11c58:	2d00      	cmp	r5, #0
   11c5a:	f040 80da 	bne.w	11e12 <ticker_job+0x672>
   11c5e:	b119      	cbz	r1, 11c68 <ticker_job+0x4c8>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   11c60:	7a09      	ldrb	r1, [r1, #8]
   11c62:	2901      	cmp	r1, #1
   11c64:	f000 8111 	beq.w	11e8a <ticker_job+0x6ea>
			if (state && ((state == 1U) || skip_collision) &&
   11c68:	9b05      	ldr	r3, [sp, #20]
   11c6a:	b123      	cbz	r3, 11c76 <ticker_job+0x4d6>
   11c6c:	2b01      	cmp	r3, #1
   11c6e:	d045      	beq.n	11cfc <ticker_job+0x55c>
   11c70:	f1be 0f00 	cmp.w	lr, #0
   11c74:	d142      	bne.n	11cfc <ticker_job+0x55c>
			ticker->req = ticker->ack;
   11c76:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   11c78:	f89b 601d 	ldrb.w	r6, [fp, #29]
   11c7c:	2eff      	cmp	r6, #255	; 0xff
   11c7e:	d1b5      	bne.n	11bec <ticker_job+0x44c>
			flag_compare_update = 1U;
   11c80:	9b06      	ldr	r3, [sp, #24]
   11c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   11c84:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
   11c86:	4296      	cmp	r6, r2
   11c88:	bf18      	it	ne
   11c8a:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   11c8c:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   11c8e:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
   11c90:	f7ff fb12 	bl	112b8 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   11c94:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   11c98:	f8db a000 	ldr.w	sl, [fp]
	while (rescheduling) {
   11c9c:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
   11ca0:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   11ca2:	9b00      	ldr	r3, [sp, #0]
   11ca4:	2bff      	cmp	r3, #255	; 0xff
   11ca6:	d00f      	beq.n	11cc8 <ticker_job+0x528>
   11ca8:	9e00      	ldr	r6, [sp, #0]
			ticker = &nodes[ticker_id_head];
   11caa:	b233      	sxth	r3, r6
   11cac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11cb0:	eb0a 1503 	add.w	r5, sl, r3, lsl #4
   11cb4:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   11cb6:	6aaf      	ldr	r7, [r5, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11cb8:	b117      	cbz	r7, 11cc0 <ticker_job+0x520>
   11cba:	7a39      	ldrb	r1, [r7, #8]
   11cbc:	2901      	cmp	r1, #1
   11cbe:	d025      	beq.n	11d0c <ticker_job+0x56c>
			ticker_id_head = ticker->next;
   11cc0:	f81a 6003 	ldrb.w	r6, [sl, r3]
		while (ticker_id_head != TICKER_NULL) {
   11cc4:	2eff      	cmp	r6, #255	; 0xff
   11cc6:	d1f0      	bne.n	11caa <ticker_job+0x50a>
	return rescheduled;
   11cc8:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   11ccc:	2a00      	cmp	r2, #0
   11cce:	f43f af15 	beq.w	11afc <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11cd2:	9b00      	ldr	r3, [sp, #0]
   11cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   11cd6:	428b      	cmp	r3, r1
   11cd8:	f47f af15 	bne.w	11b06 <ticker_job+0x366>
	if (!pending) {
   11cdc:	9b08      	ldr	r3, [sp, #32]
   11cde:	2b00      	cmp	r3, #0
   11ce0:	f47f af18 	bne.w	11b14 <ticker_job+0x374>
	users = &instance->users[0];
   11ce4:	f8db 3004 	ldr.w	r3, [fp, #4]
   11ce8:	9301      	str	r3, [sp, #4]
	count_user = instance->count_user;
   11cea:	f89b 3009 	ldrb.w	r3, [fp, #9]
	while (count_user--) {
   11cee:	1e5f      	subs	r7, r3, #1
   11cf0:	b2ff      	uxtb	r7, r7
   11cf2:	2b00      	cmp	r3, #0
   11cf4:	f43f af0e 	beq.w	11b14 <ticker_job+0x374>
			flag_compare_update = 1U;
   11cf8:	9206      	str	r2, [sp, #24]
   11cfa:	e0fa      	b.n	11ef2 <ticker_job+0x752>
			    ticker->fp_op_func) {
   11cfc:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   11cfe:	2b00      	cmp	r3, #0
   11d00:	d0b9      	beq.n	11c76 <ticker_job+0x4d6>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   11d02:	6a61      	ldr	r1, [r4, #36]	; 0x24
   11d04:	2001      	movs	r0, #1
   11d06:	4798      	blx	r3
			ticker->req = ticker->ack;
   11d08:	78a2      	ldrb	r2, [r4, #2]
   11d0a:	e7b4      	b.n	11c76 <ticker_job+0x4d6>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11d0c:	9b01      	ldr	r3, [sp, #4]
   11d0e:	7f1b      	ldrb	r3, [r3, #28]
   11d10:	2bff      	cmp	r3, #255	; 0xff
   11d12:	d04b      	beq.n	11dac <ticker_job+0x60c>
			instance->ticks_slot_previous > ticks_elapsed) {
   11d14:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11d16:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
   11d18:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11d1a:	4293      	cmp	r3, r2
   11d1c:	d946      	bls.n	11dac <ticker_job+0x60c>
			window_start_ticks = instance->ticks_slot_previous -
   11d1e:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11d22:	687a      	ldr	r2, [r7, #4]
   11d24:	68ab      	ldr	r3, [r5, #8]
		ticker_id_iter = nodes[ticker_id_head].next;
   11d26:	f895 b000 	ldrb.w	fp, [r5]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11d2a:	1ad3      	subs	r3, r2, r3
   11d2c:	9302      	str	r3, [sp, #8]
   11d2e:	683b      	ldr	r3, [r7, #0]
   11d30:	429a      	cmp	r2, r3
   11d32:	f080 80bd 	bcs.w	11eb0 <ticker_job+0x710>
		while (ticker_id_iter != TICKER_NULL &&
   11d36:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   11d3a:	eba3 0802 	sub.w	r8, r3, r2
		while (ticker_id_iter != TICKER_NULL &&
   11d3e:	f000 80b7 	beq.w	11eb0 <ticker_job+0x710>
		       ticks_start_offset + ticker->ticks_slot <=
   11d42:	f8d5 e018 	ldr.w	lr, [r5, #24]
		while (ticker_id_iter != TICKER_NULL &&
   11d46:	45f0      	cmp	r8, lr
   11d48:	f04f 0300 	mov.w	r3, #0
   11d4c:	d331      	bcc.n	11db2 <ticker_job+0x612>
   11d4e:	46f1      	mov	r9, lr
   11d50:	465a      	mov	r2, fp
   11d52:	461c      	mov	r4, r3
   11d54:	e01c      	b.n	11d90 <ticker_job+0x5f0>
			if (node->ticks_to_expire >
   11d56:	6881      	ldr	r1, [r0, #8]
					MIN(ticks_slot_window,
   11d58:	1f0b      	subs	r3, r1, #4
			if (node->ticks_to_expire >
   11d5a:	2904      	cmp	r1, #4
					MIN(ticks_slot_window,
   11d5c:	4423      	add	r3, r4
			if (node->ticks_to_expire >
   11d5e:	d909      	bls.n	11d74 <ticker_job+0x5d4>
				window_end_ticks =
   11d60:	4543      	cmp	r3, r8
   11d62:	bf28      	it	cs
   11d64:	4643      	movcs	r3, r8
			if (window_end_ticks > ticks_start_offset +
   11d66:	4599      	cmp	r9, r3
   11d68:	d204      	bcs.n	11d74 <ticker_job+0x5d4>
			if (ticks_to_expire != 0U &&
   11d6a:	ebb3 030e 	subs.w	r3, r3, lr
   11d6e:	d001      	beq.n	11d74 <ticker_job+0x5d4>
   11d70:	459c      	cmp	ip, r3
   11d72:	d91e      	bls.n	11db2 <ticker_job+0x612>
			window_start_ticks  = node->ticks_to_expire +
   11d74:	6983      	ldr	r3, [r0, #24]
			ticker_id_iter = node->next;
   11d76:	f81a 2002 	ldrb.w	r2, [sl, r2]
			window_start_ticks  = node->ticks_to_expire +
   11d7a:	eb01 0c03 	add.w	ip, r1, r3
			ticks_start_offset += node->ticks_to_expire;
   11d7e:	440c      	add	r4, r1
			ticks_to_expire     = ticks_slot_window -
   11d80:	eba8 030e 	sub.w	r3, r8, lr
		while (ticker_id_iter != TICKER_NULL &&
   11d84:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   11d86:	eb04 090e 	add.w	r9, r4, lr
		while (ticker_id_iter != TICKER_NULL &&
   11d8a:	d012      	beq.n	11db2 <ticker_job+0x612>
   11d8c:	45c8      	cmp	r8, r9
   11d8e:	d310      	bcc.n	11db2 <ticker_job+0x612>
			node = &nodes[ticker_id_iter];
   11d90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11d94:	eb0a 1002 	add.w	r0, sl, r2, lsl #4
   11d98:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   11d9a:	6a81      	ldr	r1, [r0, #40]	; 0x28
   11d9c:	2900      	cmp	r1, #0
   11d9e:	d0da      	beq.n	11d56 <ticker_job+0x5b6>
   11da0:	7a09      	ldrb	r1, [r1, #8]
   11da2:	2901      	cmp	r1, #1
   11da4:	d1d7      	bne.n	11d56 <ticker_job+0x5b6>
				ticker_id_iter = node->next;
   11da6:	f81a 2002 	ldrb.w	r2, [sl, r2]
				continue;
   11daa:	e7eb      	b.n	11d84 <ticker_job+0x5e4>
		window_start_ticks = 0U;
   11dac:	f04f 0c00 	mov.w	ip, #0
   11db0:	e7b7      	b.n	11d22 <ticker_job+0x582>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   11db2:	9a02      	ldr	r2, [sp, #8]
   11db4:	441a      	add	r2, r3
   11db6:	607a      	str	r2, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   11db8:	465c      	mov	r4, fp
   11dba:	60ab      	str	r3, [r5, #8]
   11dbc:	f04f 0eff 	mov.w	lr, #255	; 0xff
   11dc0:	e000      	b.n	11dc4 <ticker_job+0x624>
   11dc2:	4614      	mov	r4, r2
			node = &nodes[ticker_id_iter];
   11dc4:	b221      	sxth	r1, r4
   11dc6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   11dca:	eb0a 1c02 	add.w	ip, sl, r2, lsl #4
   11dce:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   11dd0:	f8dc 0008 	ldr.w	r0, [ip, #8]
   11dd4:	4298      	cmp	r0, r3
   11dd6:	f080 814d 	bcs.w	12074 <ticker_job+0x8d4>
				ticker->ticks_to_expire -=
   11dda:	1a1b      	subs	r3, r3, r0
   11ddc:	60ab      	str	r3, [r5, #8]
			ticker_id_iter = node->next;
   11dde:	f81a 2002 	ldrb.w	r2, [sl, r2]
		while (ticker_id_iter != TICKER_NULL) {
   11de2:	2aff      	cmp	r2, #255	; 0xff
   11de4:	46a6      	mov	lr, r4
   11de6:	d1ec      	bne.n	11dc2 <ticker_job+0x622>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11de8:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
   11dea:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11dee:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11df2:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11df4:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11df8:	f81a 3001 	ldrb.w	r3, [sl, r1]
   11dfc:	702b      	strb	r3, [r5, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11dfe:	f80a 6001 	strb.w	r6, [sl, r1]
		ticker->lazy_current--;
   11e02:	8beb      	ldrh	r3, [r5, #30]
   11e04:	3b01      	subs	r3, #1
   11e06:	83eb      	strh	r3, [r5, #30]
		ext_data->reschedule_state =
   11e08:	f04f 0302 	mov.w	r3, #2
   11e0c:	723b      	strb	r3, [r7, #8]
		rescheduled  = 1U;
   11e0e:	2201      	movs	r2, #1
   11e10:	e747      	b.n	11ca2 <ticker_job+0x502>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   11e12:	b111      	cbz	r1, 11e1a <ticker_job+0x67a>
   11e14:	7a0b      	ldrb	r3, [r1, #8]
   11e16:	2b01      	cmp	r3, #1
   11e18:	d037      	beq.n	11e8a <ticker_job+0x6ea>
				if (!ticker->lazy_current) {
   11e1a:	f1be 0f00 	cmp.w	lr, #0
   11e1e:	d159      	bne.n	11ed4 <ticker_job+0x734>
					lazy_periodic = ticker->lazy_periodic;
   11e20:	f8b4 e01c 	ldrh.w	lr, [r4, #28]
   11e24:	4672      	mov	r2, lr
				while (count--) {
   11e26:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   11e28:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   11e2c:	2100      	movs	r1, #0
   11e2e:	9005      	str	r0, [sp, #20]
   11e30:	e004      	b.n	11e3c <ticker_job+0x69c>
   11e32:	4628      	mov	r0, r5
				while (count--) {
   11e34:	3a01      	subs	r2, #1
					ticks_to_expire +=
   11e36:	4401      	add	r1, r0
				while (count--) {
   11e38:	1c50      	adds	r0, r2, #1
   11e3a:	d00f      	beq.n	11e5c <ticker_job+0x6bc>
	ticker->remainder_current += ticker->remainder_periodic;
   11e3c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11e3e:	eb03 0008 	add.w	r0, r3, r8
   11e42:	4548      	cmp	r0, r9
   11e44:	d8f5      	bhi.n	11e32 <ticker_job+0x692>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11e46:	9805      	ldr	r0, [sp, #20]
   11e48:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   11e4c:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11e4e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   11e52:	4401      	add	r1, r0
				while (count--) {
   11e54:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11e56:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   11e5a:	d1ef      	bne.n	11e3c <ticker_job+0x69c>
				} else if (!ticker->must_expire) {
   11e5c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   11e60:	6263      	str	r3, [r4, #36]	; 0x24
   11e62:	2a00      	cmp	r2, #0
   11e64:	f000 80d2 	beq.w	1200c <ticker_job+0x86c>
				lazy = 0U;
   11e68:	2200      	movs	r2, #0
				ticker->lazy_current += (lazy_periodic + lazy);
   11e6a:	4472      	add	r2, lr
				ticker->ticks_to_expire = ticks_to_expire;
   11e6c:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   11e6e:	83e2      	strh	r2, [r4, #30]
   11e70:	e00d      	b.n	11e8e <ticker_job+0x6ee>
   11e72:	bf00      	nop
   11e74:	ff172b5a 	.word	0xff172b5a
   11e78:	7f172b59 	.word	0x7f172b59
		ticker->ticks_to_expire = 0U;
   11e7c:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11e80:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11e84:	2d00      	cmp	r5, #0
   11e86:	f43f aeeb 	beq.w	11c60 <ticker_job+0x4c0>
				ticker->req = ticker->ack;
   11e8a:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   11e8c:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11e8e:	9b07      	ldr	r3, [sp, #28]
   11e90:	9a02      	ldr	r2, [sp, #8]
   11e92:	f8db 1014 	ldr.w	r1, [fp, #20]
   11e96:	189a      	adds	r2, r3, r2
   11e98:	4620      	mov	r0, r4
   11e9a:	f7ff f9e9 	bl	11270 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   11e9e:	9a00      	ldr	r2, [sp, #0]
   11ea0:	9904      	ldr	r1, [sp, #16]
   11ea2:	9b01      	ldr	r3, [sp, #4]
   11ea4:	5453      	strb	r3, [r2, r1]
			ticker->req++;
   11ea6:	7863      	ldrb	r3, [r4, #1]
   11ea8:	9601      	str	r6, [sp, #4]
   11eaa:	3301      	adds	r3, #1
   11eac:	7063      	strb	r3, [r4, #1]
   11eae:	e6e3      	b.n	11c78 <ticker_job+0x4d8>
		ticker->ext_data->ticks_drift += ticks_to_expire -
   11eb0:	9b02      	ldr	r3, [sp, #8]
   11eb2:	607b      	str	r3, [r7, #4]
		ticker->ticks_to_expire = ticks_to_expire;
   11eb4:	2300      	movs	r3, #0
   11eb6:	60ab      	str	r3, [r5, #8]
		while (ticker_id_iter != TICKER_NULL) {
   11eb8:	e7a3      	b.n	11e02 <ticker_job+0x662>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11eba:	f1be 0f00 	cmp.w	lr, #0
   11ebe:	f47f aec7 	bne.w	11c50 <ticker_job+0x4b0>
   11ec2:	b111      	cbz	r1, 11eca <ticker_job+0x72a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11ec4:	7a0b      	ldrb	r3, [r1, #8]
   11ec6:	2b01      	cmp	r3, #1
   11ec8:	d0d8      	beq.n	11e7c <ticker_job+0x6dc>
			instance->ticks_slot_previous = ticker->ticks_slot;
   11eca:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   11ece:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   11ed2:	e6bd      	b.n	11c50 <ticker_job+0x4b0>
					ticker->req = ticker->ack;
   11ed4:	7062      	strb	r2, [r4, #1]
   11ed6:	2200      	movs	r2, #0
   11ed8:	e7a5      	b.n	11e26 <ticker_job+0x686>
	count_user = instance->count_user;
   11eda:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11ede:	f8db 2004 	ldr.w	r2, [fp, #4]
   11ee2:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   11ee4:	1e5f      	subs	r7, r3, #1
   11ee6:	b2ff      	uxtb	r7, r7
   11ee8:	2b00      	cmp	r3, #0
   11eea:	f43f ae10 	beq.w	11b0e <ticker_job+0x36e>
		flag_compare_update = 1U;
   11eee:	2301      	movs	r3, #1
   11ef0:	9306      	str	r3, [sp, #24]
   11ef2:	9b01      	ldr	r3, [sp, #4]
		uop->status = TICKER_STATUS_SUCCESS;
   11ef4:	2600      	movs	r6, #0
   11ef6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
			uop->status = TICKER_STATUS_FAILURE;
   11efa:	f04f 0a01 	mov.w	sl, #1
		while (user->first != user->last) {
   11efe:	787b      	ldrb	r3, [r7, #1]
   11f00:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
   11f02:	687d      	ldr	r5, [r7, #4]
		while (user->first != user->last) {
   11f04:	429a      	cmp	r2, r3
   11f06:	d10c      	bne.n	11f22 <ticker_job+0x782>
   11f08:	e05b      	b.n	11fc2 <ticker_job+0x822>
	switch (uop->op) {
   11f0a:	2b01      	cmp	r3, #1
   11f0c:	d053      	beq.n	11fb6 <ticker_job+0x816>
			first = user->first + 1;
   11f0e:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
   11f10:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
   11f12:	3301      	adds	r3, #1
   11f14:	b2db      	uxtb	r3, r3
				first = 0U;
   11f16:	4299      	cmp	r1, r3
   11f18:	bf08      	it	eq
   11f1a:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11f1c:	429a      	cmp	r2, r3
			user->first = first;
   11f1e:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
   11f20:	d04f      	beq.n	11fc2 <ticker_job+0x822>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   11f22:	b21b      	sxth	r3, r3
   11f24:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11f28:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11f2c:	eb05 0083 	add.w	r0, r5, r3, lsl #2
	switch (uop->op) {
   11f30:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
   11f34:	2b02      	cmp	r3, #2
   11f36:	d017      	beq.n	11f68 <ticker_job+0x7c8>
   11f38:	2b03      	cmp	r3, #3
   11f3a:	d1e6      	bne.n	11f0a <ticker_job+0x76a>
		if (uop->id < instance->count_node) {
   11f3c:	7843      	ldrb	r3, [r0, #1]
   11f3e:	f89b 2008 	ldrb.w	r2, [fp, #8]
   11f42:	429a      	cmp	r2, r3
   11f44:	d93a      	bls.n	11fbc <ticker_job+0x81c>
			node[uop->id].priority =
   11f46:	f8db 2000 	ldr.w	r2, [fp]
   11f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11f4e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   11f52:	7902      	ldrb	r2, [r0, #4]
   11f54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   11f58:	6286      	str	r6, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   11f5a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
   11f5c:	b113      	cbz	r3, 11f64 <ticker_job+0x7c4>
		fp_op_func(uop->status, uop->op_context);
   11f5e:	6b01      	ldr	r1, [r0, #48]	; 0x30
   11f60:	6a80      	ldr	r0, [r0, #40]	; 0x28
   11f62:	4798      	blx	r3
   11f64:	78fa      	ldrb	r2, [r7, #3]
   11f66:	e7d2      	b.n	11f0e <ticker_job+0x76e>
		ticker_by_next_slot_get(instance,
   11f68:	e9d0 c101 	ldrd	ip, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
   11f6c:	f89c 2000 	ldrb.w	r2, [ip]
		ticker_by_next_slot_get(instance,
   11f70:	f8d0 e00c 	ldr.w	lr, [r0, #12]
	node = instance->nodes;
   11f74:	f8db 4000 	ldr.w	r4, [fp]
	    (*ticks_current != instance->ticks_current)) {
   11f78:	f8db 3014 	ldr.w	r3, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11f7c:	2aff      	cmp	r2, #255	; 0xff
   11f7e:	d003      	beq.n	11f88 <ticker_job+0x7e8>
   11f80:	f8d1 8000 	ldr.w	r8, [r1]
   11f84:	4598      	cmp	r8, r3
   11f86:	d023      	beq.n	11fd0 <ticker_job+0x830>
		_ticker_id_head = instance->ticker_id_head;
   11f88:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   11f8c:	600b      	str	r3, [r1, #0]
		_ticks_to_expire = 0U;
   11f8e:	f04f 0800 	mov.w	r8, #0
   11f92:	e00a      	b.n	11faa <ticker_job+0x80a>
		ticker = &node[_ticker_id_head];
   11f94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   11f98:	eb04 1103 	add.w	r1, r4, r3, lsl #4
   11f9c:	011b      	lsls	r3, r3, #4
		_ticks_to_expire += ticker->ticks_to_expire;
   11f9e:	f8d1 9008 	ldr.w	r9, [r1, #8]
			if (ticker->ticks_slot) {
   11fa2:	6989      	ldr	r1, [r1, #24]
		_ticks_to_expire += ticker->ticks_to_expire;
   11fa4:	44c8      	add	r8, r9
			if (ticker->ticks_slot) {
   11fa6:	b911      	cbnz	r1, 11fae <ticker_job+0x80e>
		_ticker_id_head = ticker->next;
   11fa8:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   11faa:	2aff      	cmp	r2, #255	; 0xff
   11fac:	d1f2      	bne.n	11f94 <ticker_job+0x7f4>
	*ticker_id_head = _ticker_id_head;
   11fae:	f88c 2000 	strb.w	r2, [ip]
	*ticks_to_expire = _ticks_to_expire;
   11fb2:	f8ce 8000 	str.w	r8, [lr]
		fp_op_func = uop->fp_op_func;
   11fb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11fb8:	6286      	str	r6, [r0, #40]	; 0x28
		break;
   11fba:	e7cf      	b.n	11f5c <ticker_job+0x7bc>
			uop->status = TICKER_STATUS_FAILURE;
   11fbc:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
   11fc0:	e7cb      	b.n	11f5a <ticker_job+0x7ba>
	while (count_user--) {
   11fc2:	9a01      	ldr	r2, [sp, #4]
   11fc4:	42ba      	cmp	r2, r7
   11fc6:	f1a7 0308 	sub.w	r3, r7, #8
   11fca:	d00b      	beq.n	11fe4 <ticker_job+0x844>
   11fcc:	461f      	mov	r7, r3
   11fce:	e796      	b.n	11efe <ticker_job+0x75e>
		ticker = &node[_ticker_id_head];
   11fd0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11fd4:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   11fd6:	f8de 8000 	ldr.w	r8, [lr]
		_ticker_id_head = ticker->next;
   11fda:	5ce2      	ldrb	r2, [r4, r3]
	while (_ticker_id_head != TICKER_NULL) {
   11fdc:	e7e5      	b.n	11faa <ticker_job+0x80a>
	if (!pending) {
   11fde:	9b08      	ldr	r3, [sp, #32]
   11fe0:	2b00      	cmp	r3, #0
   11fe2:	d054      	beq.n	1208e <ticker_job+0x8ee>
	if (flag_compare_update) {
   11fe4:	9b06      	ldr	r3, [sp, #24]
   11fe6:	2b00      	cmp	r3, #0
   11fe8:	f47f ad91 	bne.w	11b0e <ticker_job+0x36e>
	if (instance->worker_trigger) {
   11fec:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
   11ff0:	2200      	movs	r2, #0
   11ff2:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
   11ff6:	b12b      	cbz	r3, 12004 <ticker_job+0x864>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   11ff8:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   11ffc:	465b      	mov	r3, fp
   11ffe:	2201      	movs	r2, #1
   12000:	2103      	movs	r1, #3
   12002:	e469      	b.n	118d8 <ticker_job+0x138>
}
   12004:	b00d      	add	sp, #52	; 0x34
   12006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1200a:	4770      	bx	lr
					while (ticks_to_expire <
   1200c:	458a      	cmp	sl, r1
   1200e:	f67f af2c 	bls.w	11e6a <ticker_job+0x6ca>
   12012:	1c68      	adds	r0, r5, #1
   12014:	9405      	str	r4, [sp, #20]
   12016:	4604      	mov	r4, r0
   12018:	e005      	b.n	12026 <ticker_job+0x886>
   1201a:	4628      	mov	r0, r5
						ticks_to_expire +=
   1201c:	4401      	add	r1, r0
						lazy++;
   1201e:	3201      	adds	r2, #1
					while (ticks_to_expire <
   12020:	458a      	cmp	sl, r1
						lazy++;
   12022:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   12024:	d910      	bls.n	12048 <ticker_job+0x8a8>
	ticker->remainder_current += ticker->remainder_periodic;
   12026:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   12028:	eb03 0008 	add.w	r0, r3, r8
   1202c:	4548      	cmp	r0, r9
   1202e:	d8f4      	bhi.n	1201a <ticker_job+0x87a>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12030:	4620      	mov	r0, r4
   12032:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   12036:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12038:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   1203c:	3201      	adds	r2, #1
					while (ticks_to_expire <
   1203e:	458a      	cmp	sl, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   12040:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   12044:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   12046:	d8ee      	bhi.n	12026 <ticker_job+0x886>
   12048:	9c05      	ldr	r4, [sp, #20]
   1204a:	6263      	str	r3, [r4, #36]	; 0x24
   1204c:	e70d      	b.n	11e6a <ticker_job+0x6ca>
	ticker_id_old_head = instance->ticker_id_head;
   1204e:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   12052:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   12056:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
   12058:	f8db 3000 	ldr.w	r3, [fp]
   1205c:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
   1205e:	f8db 3004 	ldr.w	r3, [fp, #4]
   12062:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   12064:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   12066:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   12068:	b2db      	uxtb	r3, r3
   1206a:	b3a1      	cbz	r1, 120d6 <ticker_job+0x936>
		flag_elapsed = 0U;
   1206c:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
   1206e:	9203      	str	r2, [sp, #12]
   12070:	f7ff bbd1 	b.w	11816 <ticker_job+0x76>
				node->ticks_to_expire -=
   12074:	1ac3      	subs	r3, r0, r3
		if (ticker_id_prev != TICKER_NULL) {
   12076:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
   1207a:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1207e:	f43f aec0 	beq.w	11e02 <ticker_job+0x662>
   12082:	fa0f f18e 	sxth.w	r1, lr
   12086:	e6af      	b.n	11de8 <ticker_job+0x648>
			ticker->ticks_to_expire -= ticks_elapsed;
   12088:	1bdb      	subs	r3, r3, r7
   1208a:	60a3      	str	r3, [r4, #8]
			break;
   1208c:	e5f8      	b.n	11c80 <ticker_job+0x4e0>
	count_user = instance->count_user;
   1208e:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   12092:	f8db 2004 	ldr.w	r2, [fp, #4]
   12096:	9201      	str	r2, [sp, #4]
	while (count_user--) {
   12098:	1e5f      	subs	r7, r3, #1
   1209a:	b2ff      	uxtb	r7, r7
   1209c:	2b00      	cmp	r3, #0
   1209e:	f47f af28 	bne.w	11ef2 <ticker_job+0x752>
   120a2:	e79f      	b.n	11fe4 <ticker_job+0x844>
		if (cntr_stop() == 0) {
   120a4:	f00d fcb6 	bl	1fa14 <cntr_stop>
   120a8:	2800      	cmp	r0, #0
   120aa:	d19f      	bne.n	11fec <ticker_job+0x84c>
			instance->ticks_slot_previous = 0U;
   120ac:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   120b0:	f00d fcd6 	bl	1fa60 <cntr_cnt_get>
   120b4:	f8cb 0014 	str.w	r0, [fp, #20]
   120b8:	e798      	b.n	11fec <ticker_job+0x84c>
		ticks_current = cntr_cnt_get();
   120ba:	f00d fcd1 	bl	1fa60 <cntr_cnt_get>
   120be:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   120c0:	f00d fc98 	bl	1f9f4 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   120c4:	f89b 301d 	ldrb.w	r3, [fp, #29]
   120c8:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
   120ca:	2800      	cmp	r0, #0
   120cc:	f47f ad2a 	bne.w	11b24 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
   120d0:	f8cb 4014 	str.w	r4, [fp, #20]
   120d4:	e526      	b.n	11b24 <ticker_job+0x384>
	insert_head = TICKER_NULL;
   120d6:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
   120d8:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
   120da:	9301      	str	r3, [sp, #4]
   120dc:	e507      	b.n	11aee <ticker_job+0x34e>
   120de:	bf00      	nop

000120e0 <ticker_init>:
{
   120e0:	b4f0      	push	{r4, r5, r6, r7}
   120e2:	9d04      	ldr	r5, [sp, #16]
   120e4:	f89d 7014 	ldrb.w	r7, [sp, #20]
   120e8:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   120ea:	2800      	cmp	r0, #0
   120ec:	d137      	bne.n	1215e <ticker_init+0x7e>
	instance->count_node = count_node;
   120ee:	4e1d      	ldr	r6, [pc, #116]	; (12164 <ticker_init+0x84>)
	while (count_node--) {
   120f0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   120f4:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   120f6:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   120f8:	fa5f fc8c 	uxtb.w	ip, ip
   120fc:	b149      	cbz	r1, 12112 <ticker_init+0x32>
   120fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   12102:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   12106:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   12108:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   1210c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   12110:	d1f9      	bne.n	12106 <ticker_init+0x26>
	while (count_user--) {
   12112:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   12114:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   12116:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   12118:	b2d2      	uxtb	r2, r2
   1211a:	b183      	cbz	r3, 1213e <ticker_init+0x5e>
   1211c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   12120:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   12122:	4610      	mov	r0, r2
   12124:	f812 3908 	ldrb.w	r3, [r2], #-8
   12128:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1212c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   12130:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   12132:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   12136:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   1213a:	b2df      	uxtb	r7, r3
	while (count_user--) {
   1213c:	d1f0      	bne.n	12120 <ticker_init+0x40>
	if (count_op) {
   1213e:	b977      	cbnz	r7, 1215e <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   12140:	9a07      	ldr	r2, [sp, #28]
   12142:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   12144:	9a08      	ldr	r2, [sp, #32]
   12146:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   12148:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   1214c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1214e:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   12150:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   12152:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   12156:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   12158:	8177      	strh	r7, [r6, #10]
}
   1215a:	bcf0      	pop	{r4, r5, r6, r7}
   1215c:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   1215e:	2001      	movs	r0, #1
}
   12160:	bcf0      	pop	{r4, r5, r6, r7}
   12162:	4770      	bx	lr
   12164:	20002530 	.word	0x20002530

00012168 <ticker_trigger>:
	if (instance->sched_cb) {
   12168:	4b0a      	ldr	r3, [pc, #40]	; (12194 <ticker_trigger+0x2c>)
   1216a:	222c      	movs	r2, #44	; 0x2c
   1216c:	fb02 3200 	mla	r2, r2, r0, r3
{
   12170:	b410      	push	{r4}
	if (instance->sched_cb) {
   12172:	6a54      	ldr	r4, [r2, #36]	; 0x24
   12174:	b15c      	cbz	r4, 1218e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   12176:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1217a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1217e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   12182:	46a4      	mov	ip, r4
   12184:	2201      	movs	r2, #1
}
   12186:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   12188:	2103      	movs	r1, #3
   1218a:	2002      	movs	r0, #2
   1218c:	4760      	bx	ip
}
   1218e:	bc10      	pop	{r4}
   12190:	4770      	bx	lr
   12192:	bf00      	nop
   12194:	20002530 	.word	0x20002530

00012198 <ticker_start_ext>:
{
   12198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1219c:	4e28      	ldr	r6, [pc, #160]	; (12240 <ticker_start_ext+0xa8>)
{
   1219e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   121a2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   121a4:	252c      	movs	r5, #44	; 0x2c
   121a6:	fb05 6504 	mla	r5, r5, r4, r6
{
   121aa:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   121ac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   121b0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   121b4:	6869      	ldr	r1, [r5, #4]
   121b6:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   121ba:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   121be:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   121c2:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   121c6:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   121c8:	f10e 0c01 	add.w	ip, lr, #1
   121cc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   121d0:	4564      	cmp	r4, ip
   121d2:	bf98      	it	ls
   121d4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   121d8:	4561      	cmp	r1, ip
   121da:	d02e      	beq.n	1223a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   121dc:	6879      	ldr	r1, [r7, #4]
   121de:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   121e2:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   121e6:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   121ea:	f04f 0904 	mov.w	r9, #4
   121ee:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   121f2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   121f4:	9b08      	ldr	r3, [sp, #32]
   121f6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   121f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   121fa:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   121fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   121fe:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   12200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12202:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   12204:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12206:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   12208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1220a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   1220c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1220e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   12210:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   12212:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   12214:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12216:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   12218:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1221a:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   1221c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   1221e:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   12222:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12226:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   1222a:	4798      	blx	r3
   1222c:	4633      	mov	r3, r6
   1222e:	4649      	mov	r1, r9
   12230:	2200      	movs	r2, #0
   12232:	47a8      	blx	r5
	return user_op->status;
   12234:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   12236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1223a:	2001      	movs	r0, #1
}
   1223c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   12240:	20002530 	.word	0x20002530

00012244 <ticker_start>:
{
   12244:	b510      	push	{r4, lr}
   12246:	b08a      	sub	sp, #40	; 0x28
   12248:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1224a:	9400      	str	r4, [sp, #0]
{
   1224c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1224e:	9401      	str	r4, [sp, #4]
{
   12250:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12252:	9402      	str	r4, [sp, #8]
{
   12254:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12258:	9403      	str	r4, [sp, #12]
{
   1225a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1225c:	9404      	str	r4, [sp, #16]
{
   1225e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12260:	9405      	str	r4, [sp, #20]
{
   12262:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12264:	9406      	str	r4, [sp, #24]
{
   12266:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   12268:	9407      	str	r4, [sp, #28]
{
   1226a:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1226c:	9408      	str	r4, [sp, #32]
   1226e:	2400      	movs	r4, #0
   12270:	9409      	str	r4, [sp, #36]	; 0x24
   12272:	f7ff ff91 	bl	12198 <ticker_start_ext>
}
   12276:	b00a      	add	sp, #40	; 0x28
   12278:	bd10      	pop	{r4, pc}
   1227a:	bf00      	nop

0001227c <ticker_update_ext>:
{
   1227c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   12280:	4d28      	ldr	r5, [pc, #160]	; (12324 <ticker_update_ext+0xa8>)
{
   12282:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   12286:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1228a:	4604      	mov	r4, r0
   1228c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   1228e:	212c      	movs	r1, #44	; 0x2c
   12290:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   12294:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   12298:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   1229c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   122a0:	684c      	ldr	r4, [r1, #4]
   122a2:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   122a6:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   122aa:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   122ae:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   122b0:	f10e 0c01 	add.w	ip, lr, #1
   122b4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   122b8:	45e1      	cmp	r9, ip
   122ba:	bf98      	it	ls
   122bc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   122c0:	4564      	cmp	r4, ip
{
   122c2:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   122c6:	d02a      	beq.n	1231e <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   122c8:	f8d6 a004 	ldr.w	sl, [r6, #4]
   122cc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   122d0:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   122d4:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   122d8:	f04f 0b05 	mov.w	fp, #5
   122dc:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   122e0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   122e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   122e4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   122e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   122e8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   122ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   122ec:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   122ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   122f0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   122f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   122f4:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   122f6:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   122f8:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   122fa:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   122fc:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   122fe:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   12302:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   12306:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1230a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1230e:	4798      	blx	r3
   12310:	462b      	mov	r3, r5
   12312:	2200      	movs	r2, #0
   12314:	2104      	movs	r1, #4
   12316:	47b0      	blx	r6
	return user_op->status;
   12318:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1231a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   1231e:	2001      	movs	r0, #1
}
   12320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12324:	20002530 	.word	0x20002530

00012328 <ticker_update>:
{
   12328:	b510      	push	{r4, lr}
   1232a:	b088      	sub	sp, #32
   1232c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1232e:	9400      	str	r4, [sp, #0]
{
   12330:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   12332:	9401      	str	r4, [sp, #4]
{
   12334:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   12336:	9402      	str	r4, [sp, #8]
{
   12338:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1233c:	9403      	str	r4, [sp, #12]
{
   1233e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   12342:	9404      	str	r4, [sp, #16]
{
   12344:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   12346:	9405      	str	r4, [sp, #20]
{
   12348:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1234a:	9406      	str	r4, [sp, #24]
   1234c:	2400      	movs	r4, #0
   1234e:	9407      	str	r4, [sp, #28]
   12350:	f7ff ff94 	bl	1227c <ticker_update_ext>
}
   12354:	b008      	add	sp, #32
   12356:	bd10      	pop	{r4, pc}

00012358 <ticker_stop>:
{
   12358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1235c:	4c1e      	ldr	r4, [pc, #120]	; (123d8 <ticker_stop+0x80>)
{
   1235e:	4684      	mov	ip, r0
   12360:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   12362:	212c      	movs	r1, #44	; 0x2c
   12364:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   12368:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   1236c:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   12370:	684d      	ldr	r5, [r1, #4]
   12372:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   12376:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   1237a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   1237e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   12380:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   12384:	f10e 0c01 	add.w	ip, lr, #1
   12388:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   1238c:	4567      	cmp	r7, ip
   1238e:	bf98      	it	ls
   12390:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   12394:	4565      	cmp	r5, ip
   12396:	d01c      	beq.n	123d2 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   12398:	6877      	ldr	r7, [r6, #4]
   1239a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   1239e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   123a2:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   123a6:	f04f 0807 	mov.w	r8, #7
   123aa:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   123ae:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   123b0:	9b06      	ldr	r3, [sp, #24]
   123b2:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   123b4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   123b6:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   123b8:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   123ba:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   123be:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   123c2:	4798      	blx	r3
   123c4:	4623      	mov	r3, r4
   123c6:	2200      	movs	r2, #0
   123c8:	2104      	movs	r1, #4
   123ca:	47b0      	blx	r6
	return user_op->status;
   123cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   123ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   123d2:	2001      	movs	r0, #1
}
   123d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123d8:	20002530 	.word	0x20002530

000123dc <ticker_next_slot_get>:
{
   123dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   123e0:	4d20      	ldr	r5, [pc, #128]	; (12464 <ticker_next_slot_get+0x88>)
{
   123e2:	4684      	mov	ip, r0
   123e4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   123e6:	212c      	movs	r1, #44	; 0x2c
   123e8:	fb01 510c 	mla	r1, r1, ip, r5
	struct ticker_instance *instance = &_instance[instance_index];
   123ec:	eb0c 048c 	add.w	r4, ip, ip, lsl #2
   123f0:	eb0c 0c44 	add.w	ip, ip, r4, lsl #1
	user = &instance->users[user_id];
   123f4:	684c      	ldr	r4, [r1, #4]
   123f6:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   123fa:	f814 7030 	ldrb.w	r7, [r4, r0, lsl #3]
	last = user->last + 1;
   123fe:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   12402:	7874      	ldrb	r4, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   12404:	eb05 058c 	add.w	r5, r5, ip, lsl #2
	last = user->last + 1;
   12408:	f10e 0c01 	add.w	ip, lr, #1
   1240c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   12410:	4567      	cmp	r7, ip
   12412:	bf98      	it	ls
   12414:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   12418:	4564      	cmp	r4, ip
   1241a:	d020      	beq.n	1245e <ticker_next_slot_get+0x82>
	user_op = &user->user_op[user->last];
   1241c:	6877      	ldr	r7, [r6, #4]
   1241e:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   12422:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   12426:	eb07 048e 	add.w	r4, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   1242a:	f64f 7802 	movw	r8, #65282	; 0xff02
   1242e:	f827 802e 	strh.w	r8, [r7, lr, lsl #2]
	user_op->params.slot_get.ticks_current = ticks_current;
   12432:	e9c4 2301 	strd	r2, r3, [r4, #4]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   12436:	9b06      	ldr	r3, [sp, #24]
   12438:	60e3      	str	r3, [r4, #12]
	user_op->fp_op_func = fp_op_func;
   1243a:	9b07      	ldr	r3, [sp, #28]
   1243c:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   1243e:	9b08      	ldr	r3, [sp, #32]
   12440:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   12442:	2302      	movs	r3, #2
   12444:	62a3      	str	r3, [r4, #40]	; 0x28
	user->last = last;
   12446:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1244a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   1244e:	4798      	blx	r3
   12450:	462b      	mov	r3, r5
   12452:	2200      	movs	r2, #0
   12454:	2104      	movs	r1, #4
   12456:	47b0      	blx	r6
	return user_op->status;
   12458:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1245a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1245e:	2001      	movs	r0, #1
}
   12460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12464:	20002530 	.word	0x20002530

00012468 <ticker_job_sched>:
{
   12468:	b570      	push	{r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1246a:	4d0a      	ldr	r5, [pc, #40]	; (12494 <ticker_job_sched+0x2c>)
   1246c:	222c      	movs	r2, #44	; 0x2c
   1246e:	fb02 5200 	mla	r2, r2, r0, r5
   12472:	e9d2 3608 	ldrd	r3, r6, [r2, #32]
{
   12476:	4604      	mov	r4, r0
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12478:	4608      	mov	r0, r1
   1247a:	4798      	blx	r3
	struct ticker_instance *instance = &_instance[instance_index];
   1247c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   12480:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12484:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   12488:	46b4      	mov	ip, r6
   1248a:	2200      	movs	r2, #0
}
   1248c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   12490:	2104      	movs	r1, #4
   12492:	4760      	bx	ip
   12494:	20002530 	.word	0x20002530

00012498 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   12498:	f00d bae2 	b.w	1fa60 <cntr_cnt_get>

0001249c <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1249c:	1a40      	subs	r0, r0, r1
}
   1249e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   124a2:	4770      	bx	lr

000124a4 <ll_addr_set>:

static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   124a4:	b538      	push	{r3, r4, r5, lr}
   124a6:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   124a8:	2000      	movs	r0, #0
{
   124aa:	460d      	mov	r5, r1
		if (ull_adv_is_enabled(0)) {
   124ac:	f003 fce8 	bl	15e80 <ull_adv_is_enabled>
   124b0:	b998      	cbnz	r0, 124da <ll_addr_set+0x36>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}

	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
   124b2:	f003 ff0b 	bl	162cc <ull_scan_is_enabled>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
   124b6:	f010 0306 	ands.w	r3, r0, #6
   124ba:	d10e      	bne.n	124da <ll_addr_set+0x36>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   124bc:	b134      	cbz	r4, 124cc <ll_addr_set+0x28>
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   124be:	4a08      	ldr	r2, [pc, #32]	; (124e0 <ll_addr_set+0x3c>)
   124c0:	6828      	ldr	r0, [r5, #0]
   124c2:	6010      	str	r0, [r2, #0]
   124c4:	88a9      	ldrh	r1, [r5, #4]
   124c6:	8091      	strh	r1, [r2, #4]
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   124c8:	4618      	mov	r0, r3
}
   124ca:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   124cc:	4b05      	ldr	r3, [pc, #20]	; (124e4 <ll_addr_set+0x40>)
   124ce:	6828      	ldr	r0, [r5, #0]
   124d0:	6018      	str	r0, [r3, #0]
   124d2:	88aa      	ldrh	r2, [r5, #4]
   124d4:	809a      	strh	r2, [r3, #4]
	return 0;
   124d6:	4620      	mov	r0, r4
}
   124d8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   124da:	200c      	movs	r0, #12
}
   124dc:	bd38      	pop	{r3, r4, r5, pc}
   124de:	bf00      	nop
   124e0:	20002564 	.word	0x20002564
   124e4:	2000255c 	.word	0x2000255c

000124e8 <ll_addr_get>:

uint8_t *ll_addr_get(uint8_t addr_type)
{
	if (addr_type > BT_ADDR_LE_RANDOM) {
   124e8:	2801      	cmp	r0, #1
{
   124ea:	4603      	mov	r3, r0
	if (addr_type > BT_ADDR_LE_RANDOM) {
   124ec:	d805      	bhi.n	124fa <ll_addr_get+0x12>
		return NULL;
	}

	if (addr_type) {
		return rnd_addr;
   124ee:	4a04      	ldr	r2, [pc, #16]	; (12500 <ll_addr_get+0x18>)
   124f0:	4804      	ldr	r0, [pc, #16]	; (12504 <ll_addr_get+0x1c>)
   124f2:	2b00      	cmp	r3, #0
   124f4:	bf18      	it	ne
   124f6:	4610      	movne	r0, r2
   124f8:	4770      	bx	lr
		return NULL;
   124fa:	2000      	movs	r0, #0
	}

	return pub_addr;
}
   124fc:	4770      	bx	lr
   124fe:	bf00      	nop
   12500:	20002564 	.word	0x20002564
   12504:	2000255c 	.word	0x2000255c

00012508 <ll_addr_read>:
	if (addr_type > BT_ADDR_LE_RANDOM) {
   12508:	2801      	cmp	r0, #1
   1250a:	d80a      	bhi.n	12522 <ll_addr_read+0x1a>
		return rnd_addr;
   1250c:	4a06      	ldr	r2, [pc, #24]	; (12528 <ll_addr_read+0x20>)
   1250e:	4b07      	ldr	r3, [pc, #28]	; (1252c <ll_addr_read+0x24>)
   12510:	2800      	cmp	r0, #0
   12512:	bf18      	it	ne
   12514:	4613      	movne	r3, r2
   12516:	6818      	ldr	r0, [r3, #0]
   12518:	6008      	str	r0, [r1, #0]
   1251a:	889a      	ldrh	r2, [r3, #4]
   1251c:	808a      	strh	r2, [r1, #4]
	if (addr) {
		memcpy(bdaddr, addr, BDADDR_SIZE);
	}

	return addr;
}
   1251e:	4618      	mov	r0, r3
   12520:	4770      	bx	lr
		return NULL;
   12522:	2300      	movs	r3, #0
}
   12524:	4618      	mov	r0, r3
   12526:	4770      	bx	lr
   12528:	20002564 	.word	0x20002564
   1252c:	2000255c 	.word	0x2000255c

00012530 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   12530:	2802      	cmp	r0, #2
   12532:	d001      	beq.n	12538 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   12534:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   12536:	4770      	bx	lr
{
   12538:	b538      	push	{r3, r4, r5, lr}
   1253a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   1253c:	4608      	mov	r0, r1
   1253e:	461d      	mov	r5, r3
   12540:	f004 fd82 	bl	17048 <ll_connected_get>
			if (!conn) {
   12544:	b110      	cbz	r0, 1254c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   12546:	2000      	movs	r0, #0
   12548:	7028      	strb	r0, [r5, #0]
}
   1254a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1254c:	4620      	mov	r0, r4
}
   1254e:	bd38      	pop	{r3, r4, r5, pc}

00012550 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   12550:	2300      	movs	r3, #0
   12552:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   12554:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   12556:	4770      	bx	lr

00012558 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   12558:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   1255a:	4802      	ldr	r0, [pc, #8]	; (12564 <hci_driver_init+0xc>)
   1255c:	f7f7 fb6c 	bl	9c38 <bt_hci_driver_register>

	return 0;
}
   12560:	2000      	movs	r0, #0
   12562:	bd08      	pop	{r3, pc}
   12564:	0002ffcc 	.word	0x0002ffcc

00012568 <hci_driver_send>:
{
   12568:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   1256a:	8983      	ldrh	r3, [r0, #12]
{
   1256c:	b089      	sub	sp, #36	; 0x24
	if (!buf->len) {
   1256e:	2b00      	cmp	r3, #0
   12570:	d03c      	beq.n	125ec <hci_driver_send+0x84>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   12572:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   12574:	4604      	mov	r4, r0
   12576:	b32b      	cbz	r3, 125c4 <hci_driver_send+0x5c>
   12578:	2b02      	cmp	r3, #2
   1257a:	d011      	beq.n	125a0 <hci_driver_send+0x38>
		BT_ERR("Unknown HCI type %u", type);
   1257c:	4922      	ldr	r1, [pc, #136]	; (12608 <hci_driver_send+0xa0>)
   1257e:	2203      	movs	r2, #3
	switch (type) {
   12580:	e9cd 1306 	strd	r1, r3, [sp, #24]
		BT_ERR("Unknown HCI type %u", type);
   12584:	9201      	str	r2, [sp, #4]
   12586:	9205      	str	r2, [sp, #20]
   12588:	4820      	ldr	r0, [pc, #128]	; (1260c <hci_driver_send+0xa4>)
   1258a:	2300      	movs	r3, #0
   1258c:	aa05      	add	r2, sp, #20
   1258e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   12592:	f016 fa8d 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   12596:	f06f 0515 	mvn.w	r5, #21
}
   1259a:	4628      	mov	r0, r5
   1259c:	b009      	add	sp, #36	; 0x24
   1259e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   125a0:	a902      	add	r1, sp, #8
   125a2:	f001 f83f 	bl	13624 <hci_acl_handle>
	if (evt) {
   125a6:	9b02      	ldr	r3, [sp, #8]
	err = hci_acl_handle(buf, &evt);
   125a8:	4605      	mov	r5, r0
	if (evt) {
   125aa:	b113      	cbz	r3, 125b2 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   125ac:	4618      	mov	r0, r3
   125ae:	f7f7 fb25 	bl	9bfc <bt_recv_prio>
	if (!err) {
   125b2:	2d00      	cmp	r5, #0
   125b4:	d1f1      	bne.n	1259a <hci_driver_send+0x32>
		net_buf_unref(buf);
   125b6:	4620      	mov	r0, r4
   125b8:	f00e fa3a 	bl	20a30 <net_buf_unref>
   125bc:	2500      	movs	r5, #0
}
   125be:	4628      	mov	r0, r5
   125c0:	b009      	add	sp, #36	; 0x24
   125c2:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   125c4:	a902      	add	r1, sp, #8
	struct node_rx_pdu *node_rx = NULL;
   125c6:	9302      	str	r3, [sp, #8]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   125c8:	f000 faec 	bl	12ba4 <hci_cmd_handle>
	if (evt) {
   125cc:	2800      	cmp	r0, #0
   125ce:	d0f2      	beq.n	125b6 <hci_driver_send+0x4e>
		bt_recv_prio(evt);
   125d0:	f7f7 fb14 	bl	9bfc <bt_recv_prio>
		if (node_rx) {
   125d4:	9d02      	ldr	r5, [sp, #8]
   125d6:	2d00      	cmp	r5, #0
   125d8:	d0ed      	beq.n	125b6 <hci_driver_send+0x4e>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   125da:	4628      	mov	r0, r5
   125dc:	f001 fd94 	bl	14108 <hci_get_class>
   125e0:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   125e2:	9902      	ldr	r1, [sp, #8]
   125e4:	480a      	ldr	r0, [pc, #40]	; (12610 <hci_driver_send+0xa8>)
   125e6:	f01b fb69 	bl	2dcbc <k_queue_append>
	if (!err) {
   125ea:	e7e4      	b.n	125b6 <hci_driver_send+0x4e>
		BT_ERR("Empty HCI packet");
   125ec:	2202      	movs	r2, #2
   125ee:	4909      	ldr	r1, [pc, #36]	; (12614 <hci_driver_send+0xac>)
   125f0:	9106      	str	r1, [sp, #24]
   125f2:	9201      	str	r2, [sp, #4]
   125f4:	9205      	str	r2, [sp, #20]
   125f6:	4805      	ldr	r0, [pc, #20]	; (1260c <hci_driver_send+0xa4>)
   125f8:	aa05      	add	r2, sp, #20
   125fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   125fe:	f016 fa57 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   12602:	f06f 0515 	mvn.w	r5, #21
   12606:	e7c8      	b.n	1259a <hci_driver_send+0x32>
   12608:	0002ff20 	.word	0x0002ff20
   1260c:	0002f424 	.word	0x0002f424
   12610:	20000dcc 	.word	0x20000dcc
   12614:	0002ff0c 	.word	0x0002ff0c

00012618 <recv_thread>:
{
   12618:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   1261a:	4e41      	ldr	r6, [pc, #260]	; (12720 <recv_thread+0x108>)
		LL_ASSERT(0);
   1261c:	4f41      	ldr	r7, [pc, #260]	; (12724 <recv_thread+0x10c>)
{
   1261e:	b083      	sub	sp, #12
   12620:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12628:	4630      	mov	r0, r6
   1262a:	f012 fb15 	bl	24c58 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1262e:	2800      	cmp	r0, #0
   12630:	d0f6      	beq.n	12620 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   12632:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   12634:	9001      	str	r0, [sp, #4]
	switch (class) {
   12636:	2b04      	cmp	r3, #4
   12638:	d821      	bhi.n	1267e <recv_thread+0x66>
   1263a:	2b00      	cmp	r3, #0
   1263c:	d14b      	bne.n	126d6 <recv_thread+0xbe>
		LL_ASSERT(0);
   1263e:	493a      	ldr	r1, [pc, #232]	; (12728 <recv_thread+0x110>)
   12640:	483a      	ldr	r0, [pc, #232]	; (1272c <recv_thread+0x114>)
   12642:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   12646:	463a      	mov	r2, r7
   12648:	f015 fcae 	bl	27fa8 <printk>
   1264c:	4040      	eors	r0, r0
   1264e:	f380 8811 	msr	BASEPRI, r0
   12652:	f04f 0003 	mov.w	r0, #3
   12656:	df02      	svc	2
	node_rx->hdr.next = NULL;
   12658:	9b01      	ldr	r3, [sp, #4]
   1265a:	2200      	movs	r2, #0
   1265c:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1265e:	a801      	add	r0, sp, #4
   12660:	f002 f9fc 	bl	14a5c <ll_rx_mem_release>
   12664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1266c:	4630      	mov	r0, r6
   1266e:	f012 faf3 	bl	24c58 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   12672:	2800      	cmp	r0, #0
   12674:	d0d4      	beq.n	12620 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   12676:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   12678:	9001      	str	r0, [sp, #4]
	switch (class) {
   1267a:	2b04      	cmp	r3, #4
   1267c:	d9dd      	bls.n	1263a <recv_thread+0x22>
   1267e:	2b05      	cmp	r3, #5
   12680:	d1dd      	bne.n	1263e <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   12682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12686:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1268a:	2003      	movs	r0, #3
   1268c:	f7f6 f82c 	bl	86e8 <bt_buf_get_rx>
   12690:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   12692:	4621      	mov	r1, r4
   12694:	9801      	ldr	r0, [sp, #4]
   12696:	f001 f88f 	bl	137b8 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1269a:	9b01      	ldr	r3, [sp, #4]
   1269c:	2200      	movs	r2, #0
   1269e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   126a0:	a801      	add	r0, sp, #4
   126a2:	f002 f9db 	bl	14a5c <ll_rx_mem_release>
		while (buf) {
   126a6:	2c00      	cmp	r4, #0
   126a8:	d0ba      	beq.n	12620 <recv_thread+0x8>
			frag = net_buf_ref(buf);
   126aa:	4620      	mov	r0, r4
   126ac:	f01a f9db 	bl	2ca66 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
   126b0:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
   126b2:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
   126b4:	2000      	movs	r0, #0
   126b6:	f01a f9fc 	bl	2cab2 <net_buf_frag_del>
			if (frag->len) {
   126ba:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
   126bc:	4604      	mov	r4, r0
				bt_recv(frag);
   126be:	4628      	mov	r0, r5
			if (frag->len) {
   126c0:	b133      	cbz	r3, 126d0 <recv_thread+0xb8>
				bt_recv(frag);
   126c2:	f7f7 f9df 	bl	9a84 <bt_recv>
	z_impl_k_yield();
   126c6:	f012 ff57 	bl	25578 <z_impl_k_yield>
		while (buf) {
   126ca:	2c00      	cmp	r4, #0
   126cc:	d1ed      	bne.n	126aa <recv_thread+0x92>
   126ce:	e7a7      	b.n	12620 <recv_thread+0x8>
				net_buf_unref(frag);
   126d0:	f00e f9ae 	bl	20a30 <net_buf_unref>
   126d4:	e7f7      	b.n	126c6 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   126d6:	2b02      	cmp	r3, #2
   126d8:	d013      	beq.n	12702 <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   126da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   126de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   126e2:	2001      	movs	r0, #1
   126e4:	f7f6 f800 	bl	86e8 <bt_buf_get_rx>
   126e8:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   126ea:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   126ec:	b19c      	cbz	r4, 12716 <recv_thread+0xfe>
			hci_evt_encode(node_rx, buf);
   126ee:	4621      	mov	r1, r4
   126f0:	f001 f89c 	bl	1382c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   126f4:	9b01      	ldr	r3, [sp, #4]
   126f6:	2200      	movs	r2, #0
   126f8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   126fa:	a801      	add	r0, sp, #4
   126fc:	f002 f9ae 	bl	14a5c <ll_rx_mem_release>
		while (buf) {
   12700:	e7d3      	b.n	126aa <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   12702:	2200      	movs	r2, #0
   12704:	2300      	movs	r3, #0
   12706:	2101      	movs	r1, #1
   12708:	2000      	movs	r0, #0
   1270a:	f7f6 f817 	bl	873c <bt_buf_get_evt>
   1270e:	4604      	mov	r4, r0
			hci_evt_encode(node_rx, buf);
   12710:	9801      	ldr	r0, [sp, #4]
		if (buf) {
   12712:	2c00      	cmp	r4, #0
   12714:	d1eb      	bne.n	126ee <recv_thread+0xd6>
	node_rx->hdr.next = NULL;
   12716:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   12718:	a801      	add	r0, sp, #4
   1271a:	f002 f99f 	bl	14a5c <ll_rx_mem_release>
		while (buf) {
   1271e:	e77f      	b.n	12620 <recv_thread+0x8>
   12720:	20000dcc 	.word	0x20000dcc
   12724:	0002ff34 	.word	0x0002ff34
   12728:	0002ff74 	.word	0x0002ff74
   1272c:	0002fedc 	.word	0x0002fedc

00012730 <prio_recv_thread>:
{
   12730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   12734:	4f2e      	ldr	r7, [pc, #184]	; (127f0 <prio_recv_thread+0xc0>)
				k_fifo_put(&recv_fifo, node_rx);
   12736:	4e2f      	ldr	r6, [pc, #188]	; (127f4 <prio_recv_thread+0xc4>)
{
   12738:	b082      	sub	sp, #8
   1273a:	e00c      	b.n	12756 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   1273c:	f7f5 fffe 	bl	873c <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12740:	4622      	mov	r2, r4
   12742:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12746:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   12748:	f001 fcc6 	bl	140d8 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1274c:	4620      	mov	r0, r4
   1274e:	f7f7 fa55 	bl	9bfc <bt_recv_prio>
	z_impl_k_yield();
   12752:	f012 ff11 	bl	25578 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12756:	f10d 0102 	add.w	r1, sp, #2
   1275a:	a801      	add	r0, sp, #4
   1275c:	f001 ffce 	bl	146fc <ll_rx_get>
   12760:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   12762:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12766:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1276a:	2100      	movs	r1, #0
   1276c:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1276e:	2c00      	cmp	r4, #0
   12770:	d1e4      	bne.n	1273c <prio_recv_thread+0xc>
		if (node_rx) {
   12772:	9b01      	ldr	r3, [sp, #4]
   12774:	b1b3      	cbz	r3, 127a4 <prio_recv_thread+0x74>
			ll_rx_dequeue();
   12776:	f002 f8a3 	bl	148c0 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1277a:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1277e:	4640      	mov	r0, r8
   12780:	f001 fcc2 	bl	14108 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   12784:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   12786:	f888 0005 	strb.w	r0, [r8, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   1278a:	796b      	ldrb	r3, [r5, #5]
   1278c:	2b03      	cmp	r3, #3
   1278e:	d102      	bne.n	12796 <prio_recv_thread+0x66>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   12790:	792b      	ldrb	r3, [r5, #4]
   12792:	2b17      	cmp	r3, #23
   12794:	d00e      	beq.n	127b4 <prio_recv_thread+0x84>
				k_fifo_put(&recv_fifo, node_rx);
   12796:	4629      	mov	r1, r5
   12798:	4630      	mov	r0, r6
   1279a:	f01b fa8f 	bl	2dcbc <k_queue_append>
		if (iso_received || node_rx) {
   1279e:	9b01      	ldr	r3, [sp, #4]
   127a0:	2b00      	cmp	r3, #0
   127a2:	d1d8      	bne.n	12756 <prio_recv_thread+0x26>
	return z_impl_k_sem_take(sem, timeout);
   127a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127ac:	4638      	mov	r0, r7
   127ae:	f012 faad 	bl	24d0c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   127b2:	e7d0      	b.n	12756 <prio_recv_thread+0x26>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   127b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   127b8:	4621      	mov	r1, r4
   127ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   127be:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   127c0:	f8b5 8006 	ldrh.w	r8, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   127c4:	f7f5 ffba 	bl	873c <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   127c8:	4641      	mov	r1, r8
   127ca:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   127cc:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   127ce:	f105 001c 	add.w	r0, r5, #28
   127d2:	f000 ffc9 	bl	13768 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   127d6:	4640      	mov	r0, r8
   127d8:	f000 ffe6 	bl	137a8 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   127dc:	4620      	mov	r0, r4
			if (buf) {
   127de:	b124      	cbz	r4, 127ea <prio_recv_thread+0xba>
				bt_recv_prio(buf);
   127e0:	f7f7 fa0c 	bl	9bfc <bt_recv_prio>
					net_buf_unref(buf);
   127e4:	4620      	mov	r0, r4
   127e6:	f00e f923 	bl	20a30 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   127ea:	9d01      	ldr	r5, [sp, #4]
   127ec:	e7d3      	b.n	12796 <prio_recv_thread+0x66>
   127ee:	bf00      	nop
   127f0:	20000d9c 	.word	0x20000d9c
   127f4:	20000dcc 	.word	0x20000dcc

000127f8 <hci_driver_open>:
{
   127f8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   127fa:	4822      	ldr	r0, [pc, #136]	; (12884 <hci_driver_open+0x8c>)
{
   127fc:	b090      	sub	sp, #64	; 0x40
	err = ll_init(&sem_prio_recv);
   127fe:	f002 fd95 	bl	1532c <ll_init>
	if (err) {
   12802:	4604      	mov	r4, r0
   12804:	bb70      	cbnz	r0, 12864 <hci_driver_open+0x6c>
	hci_init(NULL);
   12806:	f001 fc95 	bl	14134 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   1280a:	2600      	movs	r6, #0
   1280c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1280e:	f06f 0209 	mvn.w	r2, #9
   12812:	e9cd 2403 	strd	r2, r4, [sp, #12]
   12816:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1281a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1281e:	4b1a      	ldr	r3, [pc, #104]	; (12888 <hci_driver_open+0x90>)
   12820:	491a      	ldr	r1, [pc, #104]	; (1288c <hci_driver_open+0x94>)
   12822:	9400      	str	r4, [sp, #0]
   12824:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   12828:	4819      	ldr	r0, [pc, #100]	; (12890 <hci_driver_open+0x98>)
   1282a:	f012 f807 	bl	2483c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   1282e:	4919      	ldr	r1, [pc, #100]	; (12894 <hci_driver_open+0x9c>)
   12830:	4817      	ldr	r0, [pc, #92]	; (12890 <hci_driver_open+0x98>)
   12832:	f01b f98a 	bl	2db4a <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12836:	f06f 0207 	mvn.w	r2, #7
   1283a:	e9cd 2403 	strd	r2, r4, [sp, #12]
   1283e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   12842:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12846:	4b14      	ldr	r3, [pc, #80]	; (12898 <hci_driver_open+0xa0>)
   12848:	4914      	ldr	r1, [pc, #80]	; (1289c <hci_driver_open+0xa4>)
   1284a:	9400      	str	r4, [sp, #0]
   1284c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   12850:	4813      	ldr	r0, [pc, #76]	; (128a0 <hci_driver_open+0xa8>)
   12852:	f011 fff3 	bl	2483c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   12856:	4913      	ldr	r1, [pc, #76]	; (128a4 <hci_driver_open+0xac>)
   12858:	4811      	ldr	r0, [pc, #68]	; (128a0 <hci_driver_open+0xa8>)
   1285a:	f01b f976 	bl	2db4a <z_impl_k_thread_name_set>
}
   1285e:	4620      	mov	r0, r4
   12860:	b010      	add	sp, #64	; 0x40
   12862:	bdd0      	pop	{r4, r6, r7, pc}
		BT_ERR("LL initialization failed: %d", err);
   12864:	4a10      	ldr	r2, [pc, #64]	; (128a8 <hci_driver_open+0xb0>)
   12866:	2303      	movs	r3, #3
   12868:	e9cd 200e 	strd	r2, r0, [sp, #56]	; 0x38
   1286c:	9309      	str	r3, [sp, #36]	; 0x24
   1286e:	930d      	str	r3, [sp, #52]	; 0x34
   12870:	480e      	ldr	r0, [pc, #56]	; (128ac <hci_driver_open+0xb4>)
   12872:	2300      	movs	r3, #0
   12874:	aa0d      	add	r2, sp, #52	; 0x34
   12876:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   1287a:	f016 f919 	bl	28ab0 <z_impl_z_log_msg2_static_create>
}
   1287e:	4620      	mov	r0, r4
   12880:	b010      	add	sp, #64	; 0x40
   12882:	bdd0      	pop	{r4, r6, r7, pc}
   12884:	20000d9c 	.word	0x20000d9c
   12888:	00012731 	.word	0x00012731
   1288c:	200069c0 	.word	0x200069c0
   12890:	20001b98 	.word	0x20001b98
   12894:	0002ff98 	.word	0x0002ff98
   12898:	00012619 	.word	0x00012619
   1289c:	20006ba0 	.word	0x20006ba0
   128a0:	20001c18 	.word	0x20001c18
   128a4:	0002ffa4 	.word	0x0002ffa4
   128a8:	0002ff78 	.word	0x0002ff78
   128ac:	0002f424 	.word	0x0002f424

000128b0 <dup_found.part.0>:
	}

	return true;
}

static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   128b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT((adv_mode < ARRAY_SIZE(dup_filter[0].adv_mode)),
			 "adv_mode index out-of-bound");
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		/* find for existing entry and update if changed */
		for (int32_t i = 0; i < dup_count; i++) {
   128b4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 1297c <dup_found.part.0+0xcc>
   128b8:	f8d9 3000 	ldr.w	r3, [r9]
   128bc:	2b00      	cmp	r3, #0
static bool dup_found(uint8_t adv_type, uint8_t addr_type, const uint8_t *addr,
   128be:	4607      	mov	r7, r0
   128c0:	4688      	mov	r8, r1
   128c2:	4616      	mov	r6, r2
		for (int32_t i = 0; i < dup_count; i++) {
   128c4:	dd41      	ble.n	1294a <dup_found.part.0+0x9a>
   128c6:	4c2e      	ldr	r4, [pc, #184]	; (12980 <dup_found.part.0+0xd0>)
   128c8:	2500      	movs	r5, #0
			dup = &dup_filter[i];
			if (memcmp(addr, &dup->addr.a.val[0],
   128ca:	4621      	mov	r1, r4
   128cc:	2206      	movs	r2, #6
   128ce:	4630      	mov	r0, r6
   128d0:	f01b fe39 	bl	2e546 <memcmp>
   128d4:	b918      	cbnz	r0, 128de <dup_found.part.0+0x2e>
				   sizeof(bt_addr_t)) ||
   128d6:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   128da:	4543      	cmp	r3, r8
   128dc:	d024      	beq.n	12928 <dup_found.part.0+0x78>
		for (int32_t i = 0; i < dup_count; i++) {
   128de:	f8d9 3000 	ldr.w	r3, [r9]
   128e2:	3501      	adds	r5, #1
   128e4:	429d      	cmp	r5, r3
   128e6:	f104 0408 	add.w	r4, r4, #8
   128ea:	dbee      	blt.n	128ca <dup_found.part.0+0x1a>
			return is_dup_or_update(dup, adv_type, adv_mode, adi,
						data_status);
		}

		/* insert into the duplicate filter */
		dup = &dup_filter[dup_curr];
   128ec:	4d25      	ldr	r5, [pc, #148]	; (12984 <dup_found.part.0+0xd4>)
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   128ee:	4826      	ldr	r0, [pc, #152]	; (12988 <dup_found.part.0+0xd8>)
		dup = &dup_filter[dup_curr];
   128f0:	682a      	ldr	r2, [r5, #0]
   128f2:	f8d6 c000 	ldr.w	ip, [r6]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   128f6:	00d1      	lsls	r1, r2, #3
   128f8:	1c4c      	adds	r4, r1, #1
		dup->addr.type = addr_type;
		dup->mask = BIT(adv_type);
   128fa:	4401      	add	r1, r0
   128fc:	f840 c004 	str.w	ip, [r0, r4]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   12900:	4404      	add	r4, r0
   12902:	88b6      	ldrh	r6, [r6, #4]
   12904:	80a6      	strh	r6, [r4, #4]
		dup->addr.type = addr_type;
   12906:	f800 8032 	strb.w	r8, [r0, r2, lsl #3]
		dup->mask = BIT(adv_type);
   1290a:	2001      	movs	r0, #1
   1290c:	fa00 f707 	lsl.w	r7, r0, r7
		dup_ext_adv_mode_reset(dup->adv_mode);
		dup_ext_adv_adi_store(&dup->adv_mode[adv_mode], adi,
				      data_status);
#endif /* CONFIG_BT_CTLR_ADV_EXT */

		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12910:	2b0f      	cmp	r3, #15
		dup->mask = BIT(adv_type);
   12912:	71cf      	strb	r7, [r1, #7]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12914:	dd2c      	ble.n	12970 <dup_found.part.0+0xc0>
			dup_count++;
			dup_curr = dup_count;
		} else {
			dup_curr++;
   12916:	3201      	adds	r2, #1
   12918:	602a      	str	r2, [r5, #0]
		}

		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   1291a:	2a10      	cmp	r2, #16
			dup_curr = 0U;
   1291c:	f04f 0000 	mov.w	r0, #0
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
   12920:	d100      	bne.n	12924 <dup_found.part.0+0x74>
			dup_curr = 0U;
   12922:	6028      	str	r0, [r5, #0]
		}
	}

	return false;
}
   12924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!(dup->mask & BIT(adv_type))) {
   12928:	4b17      	ldr	r3, [pc, #92]	; (12988 <dup_found.part.0+0xd8>)
   1292a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
		dup->mask |= BIT(adv_type);
   1292e:	2001      	movs	r0, #1
	if (!(dup->mask & BIT(adv_type))) {
   12930:	79ea      	ldrb	r2, [r5, #7]
   12932:	fa22 f307 	lsr.w	r3, r2, r7
   12936:	f013 0301 	ands.w	r3, r3, #1
   1293a:	d1f3      	bne.n	12924 <dup_found.part.0+0x74>
		dup->mask |= BIT(adv_type);
   1293c:	fa00 f707 	lsl.w	r7, r0, r7
   12940:	433a      	orrs	r2, r7
   12942:	71ea      	strb	r2, [r5, #7]
		return false;
   12944:	4618      	mov	r0, r3
}
   12946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		dup = &dup_filter[dup_curr];
   1294a:	4d0e      	ldr	r5, [pc, #56]	; (12984 <dup_found.part.0+0xd4>)
   1294c:	f8d2 c000 	ldr.w	ip, [r2]
   12950:	682c      	ldr	r4, [r5, #0]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   12952:	490d      	ldr	r1, [pc, #52]	; (12988 <dup_found.part.0+0xd8>)
   12954:	00e2      	lsls	r2, r4, #3
   12956:	1c50      	adds	r0, r2, #1
		dup->mask = BIT(adv_type);
   12958:	440a      	add	r2, r1
   1295a:	f841 c000 	str.w	ip, [r1, r0]
		(void)memcpy(&dup->addr.a.val[0], addr, sizeof(bt_addr_t));
   1295e:	4408      	add	r0, r1
   12960:	88b6      	ldrh	r6, [r6, #4]
   12962:	8086      	strh	r6, [r0, #4]
		dup->addr.type = addr_type;
   12964:	f801 8034 	strb.w	r8, [r1, r4, lsl #3]
		dup->mask = BIT(adv_type);
   12968:	2101      	movs	r1, #1
   1296a:	fa01 f707 	lsl.w	r7, r1, r7
   1296e:	71d7      	strb	r7, [r2, #7]
			dup_count++;
   12970:	3301      	adds	r3, #1
			dup_curr = dup_count;
   12972:	461a      	mov	r2, r3
			dup_count++;
   12974:	f8c9 3000 	str.w	r3, [r9]
			dup_curr = dup_count;
   12978:	602b      	str	r3, [r5, #0]
   1297a:	e7ce      	b.n	1291a <dup_found.part.0+0x6a>
   1297c:	20002570 	.word	0x20002570
   12980:	20002579 	.word	0x20002579
   12984:	20002574 	.word	0x20002574
   12988:	20002578 	.word	0x20002578

0001298c <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   1298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12990:	4c1a      	ldr	r4, [pc, #104]	; (129fc <le_remote_feat_complete+0x70>)
   12992:	6864      	ldr	r4, [r4, #4]
   12994:	00a4      	lsls	r4, r4, #2
   12996:	d504      	bpl.n	129a2 <le_remote_feat_complete+0x16>
   12998:	4616      	mov	r6, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   1299a:	4a19      	ldr	r2, [pc, #100]	; (12a00 <le_remote_feat_complete+0x74>)
   1299c:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1299e:	0712      	lsls	r2, r2, #28
   129a0:	d401      	bmi.n	129a6 <le_remote_feat_complete+0x1a>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   129a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   129a6:	f103 0408 	add.w	r4, r3, #8
   129aa:	4605      	mov	r5, r0
   129ac:	460f      	mov	r7, r1
   129ae:	4620      	mov	r0, r4
   129b0:	2102      	movs	r1, #2
   129b2:	f01a f88a 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   129b6:	233e      	movs	r3, #62	; 0x3e
   129b8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   129ba:	230c      	movs	r3, #12
   129bc:	7043      	strb	r3, [r0, #1]
   129be:	2101      	movs	r1, #1
   129c0:	4620      	mov	r0, r4
   129c2:	f01a f882 	bl	2caca <net_buf_simple_add>
   129c6:	4603      	mov	r3, r0
	me->subevent = subevt;
   129c8:	2204      	movs	r2, #4
   129ca:	4620      	mov	r0, r4
   129cc:	701a      	strb	r2, [r3, #0]
   129ce:	210b      	movs	r1, #11
   129d0:	f01a f87b 	bl	2caca <net_buf_simple_add>
	sep->status = status;
   129d4:	7005      	strb	r5, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   129d6:	f8a0 6001 	strh.w	r6, [r0, #1]
	if (!status) {
   129da:	b93d      	cbnz	r5, 129ec <le_remote_feat_complete+0x60>
   129dc:	687b      	ldr	r3, [r7, #4]
   129de:	68ba      	ldr	r2, [r7, #8]
   129e0:	f8c0 2007 	str.w	r2, [r0, #7]
   129e4:	f8c0 3003 	str.w	r3, [r0, #3]
}
   129e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
__ssp_bos_icheck3(memset, void *, int)
   129ec:	f04f 0800 	mov.w	r8, #0
   129f0:	f8c0 8003 	str.w	r8, [r0, #3]
   129f4:	f8c0 8007 	str.w	r8, [r0, #7]
   129f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   129fc:	20000158 	.word	0x20000158
   12a00:	20000160 	.word	0x20000160

00012a04 <hci_vendor_cmd_handle_common>:
{
   12a04:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (ocf) {
   12a06:	3801      	subs	r0, #1
{
   12a08:	b087      	sub	sp, #28
   12a0a:	4614      	mov	r4, r2
	switch (ocf) {
   12a0c:	2809      	cmp	r0, #9
   12a0e:	d806      	bhi.n	12a1e <hci_vendor_cmd_handle_common+0x1a>
   12a10:	e8df f000 	tbb	[pc, r0]
   12a14:	054c320a 	.word	0x054c320a
   12a18:	77056105 	.word	0x77056105
   12a1c:	af99      	.short	0xaf99
   12a1e:	f06f 0c15 	mvn.w	ip, #21
}
   12a22:	4660      	mov	r0, ip
   12a24:	b007      	add	sp, #28
   12a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a28:	4b5c      	ldr	r3, [pc, #368]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12a2a:	210d      	movs	r1, #13
   12a2c:	8818      	ldrh	r0, [r3, #0]
   12a2e:	f017 fc55 	bl	2a2dc <bt_hci_cmd_complete_create>
   12a32:	210d      	movs	r1, #13
   12a34:	6020      	str	r0, [r4, #0]
   12a36:	3008      	adds	r0, #8
   12a38:	f01a f847 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12a3c:	f04f 0c00 	mov.w	ip, #0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12a40:	2302      	movs	r3, #2
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12a42:	2203      	movs	r2, #3
	rp->status = 0x00;
   12a44:	f880 c000 	strb.w	ip, [r0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12a48:	7043      	strb	r3, [r0, #1]
   12a4a:	f880 c002 	strb.w	ip, [r0, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12a4e:	70c3      	strb	r3, [r0, #3]
   12a50:	f880 c004 	strb.w	ip, [r0, #4]
	rp->fw_variant = 0U;
   12a54:	f880 c005 	strb.w	ip, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   12a58:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   12a5a:	f880 c007 	strb.w	ip, [r0, #7]
   12a5e:	f880 c008 	strb.w	ip, [r0, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   12a62:	f880 c009 	strb.w	ip, [r0, #9]
   12a66:	f880 c00a 	strb.w	ip, [r0, #10]
   12a6a:	f880 c00b 	strb.w	ip, [r0, #11]
   12a6e:	f880 c00c 	strb.w	ip, [r0, #12]
}
   12a72:	4660      	mov	r0, ip
   12a74:	b007      	add	sp, #28
   12a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a78:	4b48      	ldr	r3, [pc, #288]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12a7a:	2141      	movs	r1, #65	; 0x41
   12a7c:	8818      	ldrh	r0, [r3, #0]
   12a7e:	f017 fc2d 	bl	2a2dc <bt_hci_cmd_complete_create>
   12a82:	2141      	movs	r1, #65	; 0x41
   12a84:	6020      	str	r0, [r4, #0]
   12a86:	3008      	adds	r0, #8
   12a88:	f01a f81f 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12a8c:	2400      	movs	r4, #0
   12a8e:	4605      	mov	r5, r0
   12a90:	2240      	movs	r2, #64	; 0x40
   12a92:	f800 4b01 	strb.w	r4, [r0], #1
   12a96:	4621      	mov	r1, r4
   12a98:	f01b fd86 	bl	2e5a8 <memset>
	return 0;
   12a9c:	46a4      	mov	ip, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   12a9e:	22a7      	movs	r2, #167	; 0xa7
	rp->commands[1] |= BIT(0) | BIT(1);
   12aa0:	2303      	movs	r3, #3
}
   12aa2:	4660      	mov	r0, ip
	rp->commands[0] |= BIT(5) | BIT(7);
   12aa4:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12aa6:	70ab      	strb	r3, [r5, #2]
}
   12aa8:	b007      	add	sp, #28
   12aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12aac:	4b3b      	ldr	r3, [pc, #236]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12aae:	2109      	movs	r1, #9
   12ab0:	8818      	ldrh	r0, [r3, #0]
   12ab2:	f017 fc13 	bl	2a2dc <bt_hci_cmd_complete_create>
   12ab6:	2109      	movs	r1, #9
   12ab8:	6020      	str	r0, [r4, #0]
   12aba:	3008      	adds	r0, #8
   12abc:	f01a f805 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12ac0:	4602      	mov	r2, r0
   12ac2:	2300      	movs	r3, #0
   12ac4:	f802 3b01 	strb.w	r3, [r2], #1
	return 0;
   12ac8:	469c      	mov	ip, r3
   12aca:	f8c0 3001 	str.w	r3, [r0, #1]
}
   12ace:	4660      	mov	r0, ip
   12ad0:	6053      	str	r3, [r2, #4]
   12ad2:	b007      	add	sp, #28
   12ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   12ad6:	6889      	ldr	r1, [r1, #8]
   12ad8:	2000      	movs	r0, #0
   12ada:	f7ff fce3 	bl	124a4 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12ade:	4b2f      	ldr	r3, [pc, #188]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12ae0:	2101      	movs	r1, #1
   12ae2:	8818      	ldrh	r0, [r3, #0]
   12ae4:	f017 fbfa 	bl	2a2dc <bt_hci_cmd_complete_create>
   12ae8:	2101      	movs	r1, #1
   12aea:	4605      	mov	r5, r0
   12aec:	3008      	adds	r0, #8
   12aee:	f019 ffec 	bl	2caca <net_buf_simple_add>
	ccst->status = status;
   12af2:	f04f 0c00 	mov.w	ip, #0
   12af6:	f880 c000 	strb.w	ip, [r0]
}
   12afa:	4660      	mov	r0, ip
	*evt = cmd_complete_status(0x00);
   12afc:	6025      	str	r5, [r4, #0]
}
   12afe:	b007      	add	sp, #28
   12b00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   12b02:	4e27      	ldr	r6, [pc, #156]	; (12ba0 <hci_vendor_cmd_handle_common+0x19c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b04:	4f25      	ldr	r7, [pc, #148]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   12b06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12b08:	ad01      	add	r5, sp, #4
   12b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12b0c:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b0e:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   12b10:	702b      	strb	r3, [r5, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b12:	2112      	movs	r1, #18
   12b14:	f017 fbe2 	bl	2a2dc <bt_hci_cmd_complete_create>
   12b18:	2112      	movs	r1, #18
   12b1a:	6020      	str	r0, [r4, #0]
   12b1c:	3008      	adds	r0, #8
   12b1e:	f019 ffd4 	bl	2caca <net_buf_simple_add>
   12b22:	ae01      	add	r6, sp, #4
	rp->status = 0x00;
   12b24:	4604      	mov	r4, r0
   12b26:	4686      	mov	lr, r0
   12b28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12b2a:	f04f 0c00 	mov.w	ip, #0
   12b2e:	f804 cb01 	strb.w	ip, [r4], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12b32:	782d      	ldrb	r5, [r5, #0]
   12b34:	f8ce 0001 	str.w	r0, [lr, #1]
}
   12b38:	4660      	mov	r0, ip
   12b3a:	6061      	str	r1, [r4, #4]
   12b3c:	60a2      	str	r2, [r4, #8]
   12b3e:	60e3      	str	r3, [r4, #12]
   12b40:	7425      	strb	r5, [r4, #16]
   12b42:	b007      	add	sp, #28
   12b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b46:	4b15      	ldr	r3, [pc, #84]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12b48:	2118      	movs	r1, #24
   12b4a:	8818      	ldrh	r0, [r3, #0]
   12b4c:	f017 fbc6 	bl	2a2dc <bt_hci_cmd_complete_create>
   12b50:	2118      	movs	r1, #24
   12b52:	6020      	str	r0, [r4, #0]
   12b54:	3008      	adds	r0, #8
   12b56:	f019 ffb8 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12b5a:	2400      	movs	r4, #0
   12b5c:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12b5e:	2101      	movs	r1, #1
	rp->status = 0x00;
   12b60:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12b64:	f00d fdd8 	bl	20718 <hci_vendor_read_static_addr>
	return 0;
   12b68:	46a4      	mov	ip, r4
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12b6a:	7068      	strb	r0, [r5, #1]
}
   12b6c:	4660      	mov	r0, ip
   12b6e:	b007      	add	sp, #28
   12b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b72:	4b0a      	ldr	r3, [pc, #40]	; (12b9c <hci_vendor_cmd_handle_common+0x198>)
   12b74:	2121      	movs	r1, #33	; 0x21
   12b76:	8818      	ldrh	r0, [r3, #0]
   12b78:	f017 fbb0 	bl	2a2dc <bt_hci_cmd_complete_create>
   12b7c:	2121      	movs	r1, #33	; 0x21
   12b7e:	6020      	str	r0, [r4, #0]
   12b80:	3008      	adds	r0, #8
   12b82:	f019 ffa2 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12b86:	4601      	mov	r1, r0
   12b88:	2400      	movs	r4, #0
   12b8a:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   12b8e:	3001      	adds	r0, #1
   12b90:	f00d fe3e 	bl	20810 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   12b94:	46a4      	mov	ip, r4
}
   12b96:	4660      	mov	r0, ip
   12b98:	b007      	add	sp, #28
   12b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12b9c:	20003976 	.word	0x20003976
   12ba0:	0002ffe0 	.word	0x0002ffe0

00012ba4 <hci_cmd_handle>:
{
   12ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12ba6:	8983      	ldrh	r3, [r0, #12]
{
   12ba8:	b091      	sub	sp, #68	; 0x44
	struct net_buf *evt = NULL;
   12baa:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   12bac:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   12bae:	9408      	str	r4, [sp, #32]
	if (cmd->len < sizeof(*chdr)) {
   12bb0:	f240 8122 	bls.w	12df8 <hci_cmd_handle+0x254>
	return net_buf_simple_pull_mem(&buf->b, len);
   12bb4:	4605      	mov	r5, r0
   12bb6:	460e      	mov	r6, r1
   12bb8:	3008      	adds	r0, #8
   12bba:	2103      	movs	r1, #3
   12bbc:	f019 ffb6 	bl	2cb2c <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   12bc0:	89aa      	ldrh	r2, [r5, #12]
   12bc2:	7883      	ldrb	r3, [r0, #2]
   12bc4:	429a      	cmp	r2, r3
   12bc6:	f0c0 8158 	bcc.w	12e7a <hci_cmd_handle+0x2d6>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12bca:	8802      	ldrh	r2, [r0, #0]
   12bcc:	4fc0      	ldr	r7, [pc, #768]	; (12ed0 <hci_cmd_handle+0x32c>)
	switch (BT_OGF(_opcode)) {
   12bce:	f3c2 2385 	ubfx	r3, r2, #10, #6
   12bd2:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12bd4:	fa1f fc82 	uxth.w	ip, r2
   12bd8:	803a      	strh	r2, [r7, #0]
	ocf = BT_OCF(_opcode);
   12bda:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   12bde:	d809      	bhi.n	12bf4 <hci_cmd_handle+0x50>
   12be0:	b1ab      	cbz	r3, 12c0e <hci_cmd_handle+0x6a>
   12be2:	3b01      	subs	r3, #1
   12be4:	2b07      	cmp	r3, #7
   12be6:	d812      	bhi.n	12c0e <hci_cmd_handle+0x6a>
   12be8:	e8df f003 	tbb	[pc, r3]
   12bec:	ecca1119 	.word	0xecca1119
   12bf0:	28111111 	.word	0x28111111
   12bf4:	2b3f      	cmp	r3, #63	; 0x3f
   12bf6:	d10a      	bne.n	12c0e <hci_cmd_handle+0x6a>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12bf8:	aa08      	add	r2, sp, #32
   12bfa:	4629      	mov	r1, r5
   12bfc:	4620      	mov	r0, r4
   12bfe:	f7ff ff01 	bl	12a04 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   12c02:	3016      	adds	r0, #22
	return evt;
   12c04:	bf18      	it	ne
   12c06:	9e08      	ldrne	r6, [sp, #32]
	if (err == -EINVAL) {
   12c08:	d106      	bne.n	12c18 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   12c0a:	f8b7 c000 	ldrh.w	ip, [r7]
   12c0e:	2101      	movs	r1, #1
   12c10:	4660      	mov	r0, ip
   12c12:	f017 fb75 	bl	2a300 <bt_hci_cmd_status_create>
   12c16:	4606      	mov	r6, r0
}
   12c18:	4630      	mov	r0, r6
   12c1a:	b011      	add	sp, #68	; 0x44
   12c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12c1e:	2c06      	cmp	r4, #6
   12c20:	f000 8493 	beq.w	1354a <hci_cmd_handle+0x9a6>
   12c24:	2c1d      	cmp	r4, #29
   12c26:	d1f2      	bne.n	12c0e <hci_cmd_handle+0x6a>
	handle = sys_le16_to_cpu(cmd->handle);
   12c28:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   12c2a:	8818      	ldrh	r0, [r3, #0]
   12c2c:	f004 fb9a 	bl	17364 <ll_version_ind_send>
   12c30:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12c32:	8838      	ldrh	r0, [r7, #0]
   12c34:	f017 fb64 	bl	2a300 <bt_hci_cmd_status_create>
   12c38:	4606      	mov	r6, r0
}
   12c3a:	e7ed      	b.n	12c18 <hci_cmd_handle+0x74>
	switch (ocf) {
   12c3c:	1e62      	subs	r2, r4, #1
   12c3e:	2a4d      	cmp	r2, #77	; 0x4d
   12c40:	d8e5      	bhi.n	12c0e <hci_cmd_handle+0x6a>
   12c42:	a301      	add	r3, pc, #4	; (adr r3, 12c48 <hci_cmd_handle+0xa4>)
   12c44:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   12c48:	00013205 	.word	0x00013205
   12c4c:	00013287 	.word	0x00013287
   12c50:	0001323b 	.word	0x0001323b
   12c54:	00012c0f 	.word	0x00012c0f
   12c58:	00013231 	.word	0x00013231
   12c5c:	00013215 	.word	0x00013215
   12c60:	00013353 	.word	0x00013353
   12c64:	00013347 	.word	0x00013347
   12c68:	0001333b 	.word	0x0001333b
   12c6c:	00013331 	.word	0x00013331
   12c70:	00013319 	.word	0x00013319
   12c74:	000132e9 	.word	0x000132e9
   12c78:	000132b5 	.word	0x000132b5
   12c7c:	000132ad 	.word	0x000132ad
   12c80:	00013525 	.word	0x00013525
   12c84:	00013513 	.word	0x00013513
   12c88:	0001350b 	.word	0x0001350b
   12c8c:	00013503 	.word	0x00013503
   12c90:	000134db 	.word	0x000134db
   12c94:	000134d3 	.word	0x000134d3
   12c98:	000134a5 	.word	0x000134a5
   12c9c:	0001348f 	.word	0x0001348f
   12ca0:	0001344f 	.word	0x0001344f
   12ca4:	00013429 	.word	0x00013429
   12ca8:	00013409 	.word	0x00013409
   12cac:	000133ff 	.word	0x000133ff
   12cb0:	000133ef 	.word	0x000133ef
   12cb4:	000133bd 	.word	0x000133bd
   12cb8:	00012c0f 	.word	0x00012c0f
   12cbc:	00012c0f 	.word	0x00012c0f
   12cc0:	00012c0f 	.word	0x00012c0f
   12cc4:	000133a7 	.word	0x000133a7
   12cc8:	00013371 	.word	0x00013371
   12ccc:	000131f5 	.word	0x000131f5
   12cd0:	000131bf 	.word	0x000131bf
   12cd4:	000131b3 	.word	0x000131b3
   12cd8:	00012c0f 	.word	0x00012c0f
   12cdc:	00012c0f 	.word	0x00012c0f
   12ce0:	000131a5 	.word	0x000131a5
   12ce4:	0001319d 	.word	0x0001319d
   12ce8:	00013197 	.word	0x00013197
   12cec:	00013173 	.word	0x00013173
   12cf0:	0001313d 	.word	0x0001313d
   12cf4:	00013107 	.word	0x00013107
   12cf8:	000130fd 	.word	0x000130fd
   12cfc:	000130ef 	.word	0x000130ef
   12d00:	000130a3 	.word	0x000130a3
   12d04:	00013047 	.word	0x00013047
   12d08:	00013029 	.word	0x00013029
   12d0c:	00012fcf 	.word	0x00012fcf
   12d10:	00012c0f 	.word	0x00012c0f
   12d14:	00012c0f 	.word	0x00012c0f
   12d18:	00012c0f 	.word	0x00012c0f
   12d1c:	00012c0f 	.word	0x00012c0f
   12d20:	00012c0f 	.word	0x00012c0f
   12d24:	00012c0f 	.word	0x00012c0f
   12d28:	00012c0f 	.word	0x00012c0f
   12d2c:	00012c0f 	.word	0x00012c0f
   12d30:	00012c0f 	.word	0x00012c0f
   12d34:	00012c0f 	.word	0x00012c0f
   12d38:	00012c0f 	.word	0x00012c0f
   12d3c:	00012c0f 	.word	0x00012c0f
   12d40:	00012c0f 	.word	0x00012c0f
   12d44:	00012c0f 	.word	0x00012c0f
   12d48:	00012c0f 	.word	0x00012c0f
   12d4c:	00012c0f 	.word	0x00012c0f
   12d50:	00012c0f 	.word	0x00012c0f
   12d54:	00012c0f 	.word	0x00012c0f
   12d58:	00012c0f 	.word	0x00012c0f
   12d5c:	00012c0f 	.word	0x00012c0f
   12d60:	00012c0f 	.word	0x00012c0f
   12d64:	00012c0f 	.word	0x00012c0f
   12d68:	00012c0f 	.word	0x00012c0f
   12d6c:	00012c0f 	.word	0x00012c0f
   12d70:	00012fa9 	.word	0x00012fa9
   12d74:	00012c0f 	.word	0x00012c0f
   12d78:	00012c0f 	.word	0x00012c0f
   12d7c:	00012f89 	.word	0x00012f89
	switch (ocf) {
   12d80:	2c63      	cmp	r4, #99	; 0x63
   12d82:	f000 83ee 	beq.w	13562 <hci_cmd_handle+0x9be>
   12d86:	d85c      	bhi.n	12e42 <hci_cmd_handle+0x29e>
   12d88:	2c03      	cmp	r4, #3
   12d8a:	f000 83ed 	beq.w	13568 <hci_cmd_handle+0x9c4>
   12d8e:	2c2d      	cmp	r4, #45	; 0x2d
   12d90:	d142      	bne.n	12e18 <hci_cmd_handle+0x274>
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
   12d92:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12d94:	4660      	mov	r0, ip
   12d96:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12d98:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   12d9a:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12d9c:	f017 fa9e 	bl	2a2dc <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   12da0:	2104      	movs	r1, #4
   12da2:	9008      	str	r0, [sp, #32]
   12da4:	3008      	adds	r0, #8
   12da6:	f019 fe90 	bl	2caca <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   12daa:	b2ae      	uxth	r6, r5
   12dac:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12dae:	1cc3      	adds	r3, r0, #3
   12db0:	4631      	mov	r1, r6
   12db2:	463a      	mov	r2, r7
   12db4:	2002      	movs	r0, #2
   12db6:	f7ff fbbb 	bl	12530 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12dba:	7020      	strb	r0, [r4, #0]
	return evt;
   12dbc:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   12dbe:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   12dc2:	e729      	b.n	12c18 <hci_cmd_handle+0x74>
	switch (ocf) {
   12dc4:	1e62      	subs	r2, r4, #1
   12dc6:	2a08      	cmp	r2, #8
   12dc8:	f63f af21 	bhi.w	12c0e <hci_cmd_handle+0x6a>
   12dcc:	a301      	add	r3, pc, #4	; (adr r3, 12dd4 <hci_cmd_handle+0x230>)
   12dce:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   12dd2:	bf00      	nop
   12dd4:	00012f51 	.word	0x00012f51
   12dd8:	00012ee5 	.word	0x00012ee5
   12ddc:	00012ea5 	.word	0x00012ea5
   12de0:	00012c0f 	.word	0x00012c0f
   12de4:	00012c0f 	.word	0x00012c0f
   12de8:	00012c0f 	.word	0x00012c0f
   12dec:	00012c0f 	.word	0x00012c0f
   12df0:	00012c0f 	.word	0x00012c0f
   12df4:	00012e81 	.word	0x00012e81
		BT_ERR("No HCI Command header");
   12df8:	4a36      	ldr	r2, [pc, #216]	; (12ed4 <hci_cmd_handle+0x330>)
   12dfa:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI CMD packet length");
   12dfc:	920e      	str	r2, [sp, #56]	; 0x38
   12dfe:	9309      	str	r3, [sp, #36]	; 0x24
   12e00:	930d      	str	r3, [sp, #52]	; 0x34
   12e02:	4835      	ldr	r0, [pc, #212]	; (12ed8 <hci_cmd_handle+0x334>)
   12e04:	4623      	mov	r3, r4
   12e06:	aa0d      	add	r2, sp, #52	; 0x34
   12e08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   12e0c:	f015 fe50 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return NULL;
   12e10:	4626      	mov	r6, r4
}
   12e12:	4630      	mov	r0, r6
   12e14:	b011      	add	sp, #68	; 0x44
   12e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12e18:	2c01      	cmp	r4, #1
   12e1a:	f47f aef8 	bne.w	12c0e <hci_cmd_handle+0x6a>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12e1e:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   12e20:	4b2e      	ldr	r3, [pc, #184]	; (12edc <hci_cmd_handle+0x338>)
   12e22:	6811      	ldr	r1, [r2, #0]
   12e24:	6852      	ldr	r2, [r2, #4]
   12e26:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12e28:	4660      	mov	r0, ip
   12e2a:	4621      	mov	r1, r4
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12e2c:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12e2e:	f017 fa55 	bl	2a2dc <bt_hci_cmd_complete_create>
   12e32:	2101      	movs	r1, #1
   12e34:	4606      	mov	r6, r0
   12e36:	3008      	adds	r0, #8
   12e38:	f019 fe47 	bl	2caca <net_buf_simple_add>
	ccst->status = status;
   12e3c:	2300      	movs	r3, #0
   12e3e:	7003      	strb	r3, [r0, #0]
}
   12e40:	e6ea      	b.n	12c18 <hci_cmd_handle+0x74>
	switch (ocf) {
   12e42:	2c7b      	cmp	r4, #123	; 0x7b
   12e44:	f000 83b6 	beq.w	135b4 <hci_cmd_handle+0xa10>
   12e48:	2c7c      	cmp	r4, #124	; 0x7c
   12e4a:	f47f aee0 	bne.w	12c0e <hci_cmd_handle+0x6a>
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
   12e4e:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12e50:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   12e52:	8859      	ldrh	r1, [r3, #2]
   12e54:	b2a8      	uxth	r0, r5
   12e56:	f004 fbbf 	bl	175d8 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12e5a:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e5c:	2103      	movs	r1, #3
   12e5e:	8838      	ldrh	r0, [r7, #0]
   12e60:	f017 fa3c 	bl	2a2dc <bt_hci_cmd_complete_create>
   12e64:	2103      	movs	r1, #3
   12e66:	4603      	mov	r3, r0
   12e68:	3008      	adds	r0, #8
   12e6a:	9308      	str	r3, [sp, #32]
   12e6c:	f019 fe2d 	bl	2caca <net_buf_simple_add>
	rp->status = status;
   12e70:	7004      	strb	r4, [r0, #0]
	return evt;
   12e72:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   12e74:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   12e78:	e6ce      	b.n	12c18 <hci_cmd_handle+0x74>
		BT_ERR("Invalid HCI CMD packet length");
   12e7a:	4a19      	ldr	r2, [pc, #100]	; (12ee0 <hci_cmd_handle+0x33c>)
   12e7c:	2302      	movs	r3, #2
   12e7e:	e7bd      	b.n	12dfc <hci_cmd_handle+0x258>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12e80:	4660      	mov	r0, ip
   12e82:	2107      	movs	r1, #7
   12e84:	f017 fa2a 	bl	2a2dc <bt_hci_cmd_complete_create>
   12e88:	2107      	movs	r1, #7
   12e8a:	4603      	mov	r3, r0
   12e8c:	3008      	adds	r0, #8
   12e8e:	9308      	str	r3, [sp, #32]
   12e90:	f019 fe1b 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12e94:	4601      	mov	r1, r0
   12e96:	2000      	movs	r0, #0
   12e98:	f801 0b01 	strb.w	r0, [r1], #1
	(void)ll_addr_read(0, &rp->bdaddr.val[0]);
   12e9c:	f7ff fb34 	bl	12508 <ll_addr_read>
	return evt;
   12ea0:	9e08      	ldr	r6, [sp, #32]
}
   12ea2:	e6b9      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ea4:	2109      	movs	r1, #9
   12ea6:	4660      	mov	r0, ip
   12ea8:	f017 fa18 	bl	2a2dc <bt_hci_cmd_complete_create>
   12eac:	2109      	movs	r1, #9
   12eae:	4603      	mov	r3, r0
   12eb0:	3008      	adds	r0, #8
   12eb2:	9308      	str	r3, [sp, #32]
   12eb4:	f019 fe09 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12eb8:	4603      	mov	r3, r0
   12eba:	2200      	movs	r2, #0
   12ebc:	f803 2b01 	strb.w	r2, [r3], #1
	rp->features[4] = (1 << 5) | (1 << 6);
   12ec0:	2160      	movs	r1, #96	; 0x60
__ssp_bos_icheck3(memset, void *, int)
   12ec2:	f8c0 2001 	str.w	r2, [r0, #1]
	return evt;
   12ec6:	9e08      	ldr	r6, [sp, #32]
   12ec8:	605a      	str	r2, [r3, #4]
	rp->features[4] = (1 << 5) | (1 << 6);
   12eca:	7141      	strb	r1, [r0, #5]
}
   12ecc:	e6a4      	b.n	12c18 <hci_cmd_handle+0x74>
   12ece:	bf00      	nop
   12ed0:	20003976 	.word	0x20003976
   12ed4:	0002fff4 	.word	0x0002fff4
   12ed8:	0002f41c 	.word	0x0002f41c
   12edc:	20000158 	.word	0x20000158
   12ee0:	0003000c 	.word	0x0003000c
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ee4:	4660      	mov	r0, ip
   12ee6:	2141      	movs	r1, #65	; 0x41
   12ee8:	f017 f9f8 	bl	2a2dc <bt_hci_cmd_complete_create>
   12eec:	2141      	movs	r1, #65	; 0x41
   12eee:	4603      	mov	r3, r0
   12ef0:	3008      	adds	r0, #8
   12ef2:	9308      	str	r3, [sp, #32]
   12ef4:	f019 fde9 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12ef8:	2100      	movs	r1, #0
   12efa:	4605      	mov	r5, r0
   12efc:	2240      	movs	r2, #64	; 0x40
   12efe:	f800 1b01 	strb.w	r1, [r0], #1
   12f02:	f01b fb51 	bl	2e5a8 <memset>
	rp->commands[5] |= BIT(6) | BIT(7);
   12f06:	20c0      	movs	r0, #192	; 0xc0
   12f08:	71a8      	strb	r0, [r5, #6]
	rp->commands[14] |= BIT(3) | BIT(5);
   12f0a:	2028      	movs	r0, #40	; 0x28
   12f0c:	73e8      	strb	r0, [r5, #15]
	rp->commands[15] |= BIT(1);
   12f0e:	2002      	movs	r0, #2
	rp->commands[26] |= BIT(4) | BIT(5);
   12f10:	22ff      	movs	r2, #255	; 0xff
	rp->commands[0] |= BIT(5);
   12f12:	2120      	movs	r1, #32
	rp->commands[15] |= BIT(1);
   12f14:	7428      	strb	r0, [r5, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12f16:	20f7      	movs	r0, #247	; 0xf7
	rp->commands[0] |= BIT(5);
   12f18:	7069      	strb	r1, [r5, #1]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12f1a:	76a8      	strb	r0, [r5, #26]
	rp->commands[32] |= BIT(4) | BIT(5);
   12f1c:	2130      	movs	r1, #48	; 0x30
	rp->commands[28] |= BIT(1) | BIT(2);
   12f1e:	200f      	movs	r0, #15
	rp->commands[26] |= BIT(4) | BIT(5);
   12f20:	76ea      	strb	r2, [r5, #27]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12f22:	772a      	strb	r2, [r5, #28]
	rp->commands[33] |= BIT(6) | BIT(7);
   12f24:	22f0      	movs	r2, #240	; 0xf0
	rp->commands[10] |= BIT(2);
   12f26:	2304      	movs	r3, #4
	rp->commands[28] |= BIT(1) | BIT(2);
   12f28:	7768      	strb	r0, [r5, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   12f2a:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12f2e:	20f9      	movs	r0, #249	; 0xf9
	rp->commands[33] |= BIT(6) | BIT(7);
   12f30:	f885 2022 	strb.w	r2, [r5, #34]	; 0x22
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12f34:	217f      	movs	r1, #127	; 0x7f
	rp->commands[38] |= BIT(7);
   12f36:	2280      	movs	r2, #128	; 0x80
	return evt;
   12f38:	9e08      	ldr	r6, [sp, #32]
	rp->commands[10] |= BIT(2);
   12f3a:	72eb      	strb	r3, [r5, #11]
	rp->commands[22] |= BIT(2);
   12f3c:	75eb      	strb	r3, [r5, #23]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   12f3e:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12f42:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12f46:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12f4a:	f885 2027 	strb.w	r2, [r5, #39]	; 0x27
}
   12f4e:	e663      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12f50:	2109      	movs	r1, #9
   12f52:	4660      	mov	r0, ip
   12f54:	f017 f9c2 	bl	2a2dc <bt_hci_cmd_complete_create>
   12f58:	2109      	movs	r1, #9
   12f5a:	4603      	mov	r3, r0
   12f5c:	3008      	adds	r0, #8
   12f5e:	9308      	str	r3, [sp, #32]
   12f60:	f019 fdb3 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12f64:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   12f66:	210c      	movs	r1, #12
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   12f6c:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   12f6e:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12f70:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   12f74:	7083      	strb	r3, [r0, #2]
   12f76:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12f78:	2305      	movs	r3, #5
	return evt;
   12f7a:	9e08      	ldr	r6, [sp, #32]
	rp->lmp_version = LL_VERSION_NUMBER;
   12f7c:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12f7e:	7144      	strb	r4, [r0, #5]
   12f80:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12f82:	71c2      	strb	r2, [r0, #7]
   12f84:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   12f86:	e647      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
   12f88:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   12f8a:	79c1      	ldrb	r1, [r0, #7]
   12f8c:	f009 fa7a 	bl	1c484 <ll_priv_mode_set>
   12f90:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12f92:	8838      	ldrh	r0, [r7, #0]
   12f94:	2101      	movs	r1, #1
   12f96:	f017 f9a1 	bl	2a2dc <bt_hci_cmd_complete_create>
   12f9a:	2101      	movs	r1, #1
   12f9c:	4606      	mov	r6, r0
   12f9e:	3008      	adds	r0, #8
   12fa0:	f019 fd93 	bl	2caca <net_buf_simple_add>
	ccst->status = status;
   12fa4:	7005      	strb	r5, [r0, #0]
	if (err == -EINVAL) {
   12fa6:	e637      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12fa8:	4660      	mov	r0, ip
   12faa:	2103      	movs	r1, #3
   12fac:	f017 f996 	bl	2a2dc <bt_hci_cmd_complete_create>
   12fb0:	2103      	movs	r1, #3
   12fb2:	4603      	mov	r3, r0
   12fb4:	3008      	adds	r0, #8
   12fb6:	9308      	str	r3, [sp, #32]
   12fb8:	f019 fd87 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   12fbc:	4601      	mov	r1, r0
   12fbe:	2300      	movs	r3, #0
   12fc0:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   12fc4:	3001      	adds	r0, #1
   12fc6:	f7ff fac3 	bl	12550 <ll_tx_pwr_get>
	return evt;
   12fca:	9e08      	ldr	r6, [sp, #32]
   12fcc:	e624      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
   12fce:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12fd0:	7895      	ldrb	r5, [r2, #2]
	return ((uint16_t)src[1] << 8) | src[0];
   12fd2:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   12fd4:	8810      	ldrh	r0, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   12fd6:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12fda:	07eb      	lsls	r3, r5, #31
		cmd->tx_phys |= mask_phys;
   12fdc:	bf48      	it	mi
   12fde:	f041 0103 	orrmi.w	r1, r1, #3
   12fe2:	7913      	ldrb	r3, [r2, #4]
   12fe4:	bf48      	it	mi
   12fe6:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12fe8:	07ae      	lsls	r6, r5, #30
		cmd->rx_phys |= mask_phys;
   12fea:	bf44      	itt	mi
   12fec:	f043 0303 	orrmi.w	r3, r3, #3
   12ff0:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   12ff2:	ea41 0203 	orr.w	r2, r1, r3
   12ff6:	f032 0203 	bics.w	r2, r2, #3
   12ffa:	f040 8302 	bne.w	13602 <hci_cmd_handle+0xa5e>
	if (!(cmd->tx_phys & 0x07) ||
   12ffe:	074d      	lsls	r5, r1, #29
   13000:	f000 82f8 	beq.w	135f4 <hci_cmd_handle+0xa50>
   13004:	075a      	lsls	r2, r3, #29
   13006:	f000 82f5 	beq.w	135f4 <hci_cmd_handle+0xa50>
	if (phy_opts & 0x03) {
   1300a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1300e:	bf1c      	itt	ne
   13010:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   13014:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   13018:	f004 fa68 	bl	174ec <ll_phy_req_send>
   1301c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1301e:	8838      	ldrh	r0, [r7, #0]
   13020:	f017 f96e 	bl	2a300 <bt_hci_cmd_status_create>
   13024:	4606      	mov	r6, r0
   13026:	e5f7      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
   13028:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1302a:	781a      	ldrb	r2, [r3, #0]
   1302c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1302e:	bf4a      	itet	mi
   13030:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   13032:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   13034:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   13036:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   13038:	bf4a      	itet	mi
   1303a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1303c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1303e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   13040:	f004 fa4a 	bl	174d8 <ll_phy_default_set>
   13044:	e7a4      	b.n	12f90 <hci_cmd_handle+0x3ec>
	handle = sys_le16_to_cpu(cmd->handle);
   13046:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13048:	4660      	mov	r0, ip
   1304a:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1304c:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1304e:	f017 f945 	bl	2a2dc <bt_hci_cmd_complete_create>
   13052:	2105      	movs	r1, #5
   13054:	4603      	mov	r3, r0
   13056:	3008      	adds	r0, #8
   13058:	9308      	str	r3, [sp, #32]
   1305a:	f019 fd36 	bl	2caca <net_buf_simple_add>
   1305e:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   13060:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   13062:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   13064:	1ce1      	adds	r1, r4, #3
   13066:	f004 fa19 	bl	1749c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   1306a:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1306c:	7020      	strb	r0, [r4, #0]
   1306e:	2b00      	cmp	r3, #0
   13070:	fa93 f2a3 	rbit	r2, r3
   13074:	7923      	ldrb	r3, [r4, #4]
   13076:	fab2 f282 	clz	r2, r2
   1307a:	bf08      	it	eq
   1307c:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   13080:	2b00      	cmp	r3, #0
   13082:	fa93 f3a3 	rbit	r3, r3
   13086:	fab3 f383 	clz	r3, r3
   1308a:	f102 0201 	add.w	r2, r2, #1
   1308e:	bf08      	it	eq
   13090:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   13094:	70e2      	strb	r2, [r4, #3]
   13096:	3301      	adds	r3, #1
	return evt;
   13098:	9e08      	ldr	r6, [sp, #32]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1309a:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1309c:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   130a0:	e5ba      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   130a2:	4660      	mov	r0, ip
   130a4:	2109      	movs	r1, #9
   130a6:	f017 f919 	bl	2a2dc <bt_hci_cmd_complete_create>
   130aa:	2109      	movs	r1, #9
   130ac:	4603      	mov	r3, r0
   130ae:	3008      	adds	r0, #8
   130b0:	9308      	str	r3, [sp, #32]
   130b2:	f019 fd0a 	bl	2caca <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   130b6:	ab0a      	add	r3, sp, #40	; 0x28
   130b8:	4604      	mov	r4, r0
   130ba:	aa09      	add	r2, sp, #36	; 0x24
   130bc:	f10d 011e 	add.w	r1, sp, #30
   130c0:	a807      	add	r0, sp, #28
   130c2:	f004 f9df 	bl	17484 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   130c6:	f8bd 301e 	ldrh.w	r3, [sp, #30]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   130ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   130ce:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   130d2:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   130d6:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   130da:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   130de:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   130e0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   130e4:	7022      	strb	r2, [r4, #0]
	return evt;
   130e6:	9e08      	ldr	r6, [sp, #32]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   130e8:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   130ec:	e594      	b.n	12c18 <hci_cmd_handle+0x74>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   130ee:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   130f0:	8818      	ldrh	r0, [r3, #0]
   130f2:	f009 f9bd 	bl	1c470 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   130f6:	8838      	ldrh	r0, [r7, #0]
   130f8:	2101      	movs	r1, #1
   130fa:	e698      	b.n	12e2e <hci_cmd_handle+0x28a>
	status = ll_rl_enable(cmd->enable);
   130fc:	68ab      	ldr	r3, [r5, #8]
   130fe:	7818      	ldrb	r0, [r3, #0]
   13100:	f009 f99a 	bl	1c438 <ll_rl_enable>
   13104:	e744      	b.n	12f90 <hci_cmd_handle+0x3ec>
	memcpy(dst, src, sizeof(*dst));
   13106:	68ab      	ldr	r3, [r5, #8]
   13108:	6818      	ldr	r0, [r3, #0]
   1310a:	900a      	str	r0, [sp, #40]	; 0x28
   1310c:	889a      	ldrh	r2, [r3, #4]
   1310e:	799b      	ldrb	r3, [r3, #6]
   13110:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13114:	4660      	mov	r0, ip
   13116:	2107      	movs	r1, #7
   13118:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   1311c:	f017 f8de 	bl	2a2dc <bt_hci_cmd_complete_create>
   13120:	2107      	movs	r1, #7
   13122:	4603      	mov	r3, r0
   13124:	3008      	adds	r0, #8
   13126:	9308      	str	r3, [sp, #32]
   13128:	f019 fccf 	bl	2caca <net_buf_simple_add>
   1312c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1312e:	1c41      	adds	r1, r0, #1
   13130:	a80a      	add	r0, sp, #40	; 0x28
   13132:	f009 f94f 	bl	1c3d4 <ll_rl_lrpa_get>
   13136:	7020      	strb	r0, [r4, #0]
	return evt;
   13138:	9e08      	ldr	r6, [sp, #32]
   1313a:	e56d      	b.n	12c18 <hci_cmd_handle+0x74>
   1313c:	68ab      	ldr	r3, [r5, #8]
   1313e:	6818      	ldr	r0, [r3, #0]
   13140:	900a      	str	r0, [sp, #40]	; 0x28
   13142:	889a      	ldrh	r2, [r3, #4]
   13144:	799b      	ldrb	r3, [r3, #6]
   13146:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1314a:	4660      	mov	r0, ip
   1314c:	2107      	movs	r1, #7
   1314e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
   13152:	f017 f8c3 	bl	2a2dc <bt_hci_cmd_complete_create>
   13156:	2107      	movs	r1, #7
   13158:	4603      	mov	r3, r0
   1315a:	3008      	adds	r0, #8
   1315c:	9308      	str	r3, [sp, #32]
   1315e:	f019 fcb4 	bl	2caca <net_buf_simple_add>
   13162:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   13164:	1c41      	adds	r1, r0, #1
   13166:	a80a      	add	r0, sp, #40	; 0x28
   13168:	f009 f8fa 	bl	1c360 <ll_rl_crpa_get>
   1316c:	7020      	strb	r0, [r4, #0]
	return evt;
   1316e:	9e08      	ldr	r6, [sp, #32]
   13170:	e552      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13172:	4660      	mov	r0, ip
   13174:	2102      	movs	r1, #2
   13176:	f017 f8b1 	bl	2a2dc <bt_hci_cmd_complete_create>
   1317a:	2102      	movs	r1, #2
   1317c:	4603      	mov	r3, r0
   1317e:	3008      	adds	r0, #8
   13180:	9308      	str	r3, [sp, #32]
   13182:	f019 fca2 	bl	2caca <net_buf_simple_add>
   13186:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   13188:	f008 ffb2 	bl	1c0f0 <ll_rl_size_get>
	rp->status = 0x00;
   1318c:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1318e:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   13190:	7023      	strb	r3, [r4, #0]
	return evt;
   13192:	9e08      	ldr	r6, [sp, #32]
   13194:	e540      	b.n	12c18 <hci_cmd_handle+0x74>
	status = ll_rl_clear();
   13196:	f008 ffad 	bl	1c0f4 <ll_rl_clear>
   1319a:	e6f9      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1319c:	68a8      	ldr	r0, [r5, #8]
   1319e:	f008 ffeb 	bl	1c178 <ll_rl_remove>
   131a2:	e6f5      	b.n	12f90 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
   131a4:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   131a6:	f100 0217 	add.w	r2, r0, #23
   131aa:	1dc1      	adds	r1, r0, #7
   131ac:	f009 fc22 	bl	1c9f4 <ll_rl_add>
   131b0:	e6ee      	b.n	12f90 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
   131b2:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   131b4:	8859      	ldrh	r1, [r3, #2]
   131b6:	8818      	ldrh	r0, [r3, #0]
   131b8:	f004 f95a 	bl	17470 <ll_length_default_set>
   131bc:	e6e8      	b.n	12f90 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   131be:	4660      	mov	r0, ip
   131c0:	2105      	movs	r1, #5
   131c2:	f017 f88b 	bl	2a2dc <bt_hci_cmd_complete_create>
   131c6:	2105      	movs	r1, #5
   131c8:	4603      	mov	r3, r0
   131ca:	3008      	adds	r0, #8
   131cc:	9308      	str	r3, [sp, #32]
   131ce:	f019 fc7c 	bl	2caca <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   131d2:	a90a      	add	r1, sp, #40	; 0x28
   131d4:	4604      	mov	r4, r0
   131d6:	a809      	add	r0, sp, #36	; 0x24
   131d8:	f004 f93e 	bl	17458 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   131dc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   131e0:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   131e4:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   131e6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	rp->status = 0x00;
   131ea:	7022      	strb	r2, [r4, #0]
	return evt;
   131ec:	9e08      	ldr	r6, [sp, #32]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   131ee:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   131f2:	e511      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
   131f4:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   131f6:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   131f8:	889a      	ldrh	r2, [r3, #4]
   131fa:	8859      	ldrh	r1, [r3, #2]
   131fc:	b2a8      	uxth	r0, r5
   131fe:	f004 f8d7 	bl	173b0 <ll_length_req_send>
   13202:	e62a      	b.n	12e5a <hci_cmd_handle+0x2b6>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13204:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   13206:	4bc4      	ldr	r3, [pc, #784]	; (13518 <hci_cmd_handle+0x974>)
   13208:	6811      	ldr	r1, [r2, #0]
   1320a:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1320c:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1320e:	4660      	mov	r0, ip
   13210:	2101      	movs	r1, #1
   13212:	e60b      	b.n	12e2c <hci_cmd_handle+0x288>
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
   13214:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   13216:	7ba5      	ldrb	r5, [r4, #14]
   13218:	79a3      	ldrb	r3, [r4, #6]
   1321a:	7962      	ldrb	r2, [r4, #5]
   1321c:	7921      	ldrb	r1, [r4, #4]
   1321e:	8820      	ldrh	r0, [r4, #0]
   13220:	9502      	str	r5, [sp, #8]
   13222:	7b65      	ldrb	r5, [r4, #13]
   13224:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   13226:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   13228:	9400      	str	r4, [sp, #0]
   1322a:	f002 fccb 	bl	15bc4 <ll_adv_params_set>
   1322e:	e6af      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   13230:	68a9      	ldr	r1, [r5, #8]
   13232:	2001      	movs	r0, #1
   13234:	f7ff f936 	bl	124a4 <ll_addr_set>
   13238:	e6aa      	b.n	12f90 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1323a:	4660      	mov	r0, ip
   1323c:	2109      	movs	r1, #9
   1323e:	f017 f84d 	bl	2a2dc <bt_hci_cmd_complete_create>
   13242:	2109      	movs	r1, #9
   13244:	4603      	mov	r3, r0
   13246:	3008      	adds	r0, #8
   13248:	9308      	str	r3, [sp, #32]
   1324a:	f019 fc3e 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   1324e:	4603      	mov	r3, r0
   13250:	2200      	movs	r2, #0
   13252:	f803 2b01 	strb.w	r2, [r3], #1
   13256:	f8c0 2001 	str.w	r2, [r0, #1]
   1325a:	605a      	str	r2, [r3, #4]
   1325c:	4604      	mov	r4, r0
	sys_put_le64(ll_feat_get(), rp->features);
   1325e:	f000 ff97 	bl	14190 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   13262:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   13264:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   13268:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   1326a:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   1326c:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   1326e:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   13270:	70a5      	strb	r5, [r4, #2]
   13272:	f3c1 2007 	ubfx	r0, r1, #8, #8
   13276:	7123      	strb	r3, [r4, #4]
   13278:	0a13      	lsrs	r3, r2, #8
	return evt;
   1327a:	9e08      	ldr	r6, [sp, #32]
	dst[0] = val;
   1327c:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   1327e:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   13280:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   13282:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   13284:	e4c8      	b.n	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13286:	2104      	movs	r1, #4
   13288:	4660      	mov	r0, ip
   1328a:	f017 f827 	bl	2a2dc <bt_hci_cmd_complete_create>
   1328e:	2104      	movs	r1, #4
   13290:	4603      	mov	r3, r0
   13292:	3008      	adds	r0, #8
   13294:	9308      	str	r3, [sp, #32]
   13296:	f019 fc18 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   1329a:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1329c:	2103      	movs	r1, #3
	rp->status = 0x00;
   1329e:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   132a0:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   132a2:	70c1      	strb	r1, [r0, #3]
	return evt;
   132a4:	9e08      	ldr	r6, [sp, #32]
	rp->le_max_len = sys_cpu_to_le16(LL_LENGTH_OCTETS_TX_MAX);
   132a6:	7042      	strb	r2, [r0, #1]
   132a8:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   132aa:	e4b5      	b.n	12c18 <hci_cmd_handle+0x74>
	status = ll_connect_disable(node_rx);
   132ac:	4630      	mov	r0, r6
   132ae:	f008 f957 	bl	1b560 <ll_connect_disable>
   132b2:	e66d      	b.n	12f90 <hci_cmd_handle+0x3ec>
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
   132b4:	68ac      	ldr	r4, [r5, #8]
	status = ll_create_connection(scan_interval, scan_window,
   132b6:	f8b4 5013 	ldrh.w	r5, [r4, #19]
   132ba:	7963      	ldrb	r3, [r4, #5]
   132bc:	7922      	ldrb	r2, [r4, #4]
   132be:	8861      	ldrh	r1, [r4, #2]
   132c0:	8820      	ldrh	r0, [r4, #0]
   132c2:	9504      	str	r5, [sp, #16]
   132c4:	f8b4 5011 	ldrh.w	r5, [r4, #17]
   132c8:	9503      	str	r5, [sp, #12]
   132ca:	f8b4 500f 	ldrh.w	r5, [r4, #15]
   132ce:	9502      	str	r5, [sp, #8]
   132d0:	7b25      	ldrb	r5, [r4, #12]
   132d2:	9501      	str	r5, [sp, #4]
				      &cmd->peer_addr.a.val[0],
   132d4:	3406      	adds	r4, #6
	status = ll_create_connection(scan_interval, scan_window,
   132d6:	9400      	str	r4, [sp, #0]
   132d8:	f7ef fbfe 	bl	2ad8 <ll_create_connection>
   132dc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   132de:	8838      	ldrh	r0, [r7, #0]
   132e0:	f017 f80e 	bl	2a300 <bt_hci_cmd_status_create>
   132e4:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   132e6:	e497      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
   132e8:	68ab      	ldr	r3, [r5, #8]
	if (cmd->enable && cmd->filter_dup) {
   132ea:	7818      	ldrb	r0, [r3, #0]
   132ec:	2800      	cmp	r0, #0
   132ee:	f000 817c 	beq.w	135ea <hci_cmd_handle+0xa46>
   132f2:	785b      	ldrb	r3, [r3, #1]
   132f4:	2b00      	cmp	r3, #0
   132f6:	f000 8178 	beq.w	135ea <hci_cmd_handle+0xa46>
			dup_count = 0;
   132fa:	4988      	ldr	r1, [pc, #544]	; (1351c <hci_cmd_handle+0x978>)
			dup_curr = 0U;
   132fc:	4a88      	ldr	r2, [pc, #544]	; (13520 <hci_cmd_handle+0x97c>)
			dup_count = 0;
   132fe:	2300      	movs	r3, #0
   13300:	600b      	str	r3, [r1, #0]
			dup_curr = 0U;
   13302:	6013      	str	r3, [r2, #0]
	status = ll_scan_enable(cmd->enable);
   13304:	f002 ff34 	bl	16170 <ll_scan_enable>
		status = BT_HCI_ERR_SUCCESS;
   13308:	280c      	cmp	r0, #12
	status = ll_scan_enable(cmd->enable);
   1330a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1330c:	f04f 0101 	mov.w	r1, #1
   13310:	8838      	ldrh	r0, [r7, #0]
		status = BT_HCI_ERR_SUCCESS;
   13312:	bf08      	it	eq
   13314:	2500      	moveq	r5, #0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13316:	e63e      	b.n	12f96 <hci_cmd_handle+0x3f2>
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
   13318:	68ac      	ldr	r4, [r5, #8]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
   1331a:	7963      	ldrb	r3, [r4, #5]
   1331c:	f8b4 2003 	ldrh.w	r2, [r4, #3]
   13320:	f8b4 1001 	ldrh.w	r1, [r4, #1]
   13324:	7820      	ldrb	r0, [r4, #0]
   13326:	79a4      	ldrb	r4, [r4, #6]
   13328:	9400      	str	r4, [sp, #0]
   1332a:	f7ee fce1 	bl	1cf0 <ll_scan_params_set>
   1332e:	e62f      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_adv_enable(cmd->enable);
   13330:	68ab      	ldr	r3, [r5, #8]
   13332:	7818      	ldrb	r0, [r3, #0]
   13334:	f7ee fa58 	bl	17e8 <ll_adv_enable>
   13338:	e62a      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1333a:	68a9      	ldr	r1, [r5, #8]
   1333c:	f811 0b01 	ldrb.w	r0, [r1], #1
   13340:	f002 fe9c 	bl	1607c <ll_adv_scan_rsp_set>
   13344:	e624      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   13346:	68a9      	ldr	r1, [r5, #8]
   13348:	f811 0b01 	ldrb.w	r0, [r1], #1
   1334c:	f002 fe46 	bl	15fdc <ll_adv_data_set>
   13350:	e61e      	b.n	12f90 <hci_cmd_handle+0x3ec>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13352:	2102      	movs	r1, #2
   13354:	4660      	mov	r0, ip
   13356:	f016 ffc1 	bl	2a2dc <bt_hci_cmd_complete_create>
   1335a:	2102      	movs	r1, #2
   1335c:	4603      	mov	r3, r0
   1335e:	3008      	adds	r0, #8
   13360:	9308      	str	r3, [sp, #32]
   13362:	f019 fbb2 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   13366:	2300      	movs	r3, #0
   13368:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   1336a:	7043      	strb	r3, [r0, #1]
	return evt;
   1336c:	9e08      	ldr	r6, [sp, #32]
   1336e:	e453      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
   13370:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   13372:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   13374:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   13376:	7892      	ldrb	r2, [r2, #2]
   13378:	9300      	str	r3, [sp, #0]
   1337a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1337e:	2102      	movs	r1, #2
   13380:	b2a0      	uxth	r0, r4
   13382:	f003 fecb 	bl	1711c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13386:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   13388:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1338a:	8838      	ldrh	r0, [r7, #0]
   1338c:	f016 ffa6 	bl	2a2dc <bt_hci_cmd_complete_create>
   13390:	2103      	movs	r1, #3
   13392:	4603      	mov	r3, r0
   13394:	3008      	adds	r0, #8
   13396:	9308      	str	r3, [sp, #32]
   13398:	f019 fb97 	bl	2caca <net_buf_simple_add>
	rp->status = status;
   1339c:	7005      	strb	r5, [r0, #0]
	return evt;
   1339e:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_cpu_to_le16(handle);
   133a0:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   133a4:	e438      	b.n	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
   133a6:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   133a8:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   133aa:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   133ac:	8853      	ldrh	r3, [r2, #2]
   133ae:	9102      	str	r1, [sp, #8]
   133b0:	88d1      	ldrh	r1, [r2, #6]
   133b2:	9101      	str	r1, [sp, #4]
   133b4:	8891      	ldrh	r1, [r2, #4]
   133b6:	9100      	str	r1, [sp, #0]
   133b8:	2200      	movs	r2, #0
   133ba:	e7e0      	b.n	1337e <hci_cmd_handle+0x7da>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   133bc:	2109      	movs	r1, #9
   133be:	4660      	mov	r0, ip
   133c0:	f016 ff8c 	bl	2a2dc <bt_hci_cmd_complete_create>
   133c4:	2109      	movs	r1, #9
   133c6:	4603      	mov	r3, r0
   133c8:	3008      	adds	r0, #8
   133ca:	9308      	str	r3, [sp, #32]
   133cc:	f019 fb7d 	bl	2caca <net_buf_simple_add>
	dst[0] = val;
   133d0:	23ff      	movs	r3, #255	; 0xff
	rp->status = 0x00;
   133d2:	2200      	movs	r2, #0
   133d4:	213f      	movs	r1, #63	; 0x3f
   133d6:	70c1      	strb	r1, [r0, #3]
   133d8:	7002      	strb	r2, [r0, #0]
   133da:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
   133dc:	7083      	strb	r3, [r0, #2]
   133de:	2103      	movs	r1, #3
	return evt;
   133e0:	9e08      	ldr	r6, [sp, #32]
   133e2:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
   133e4:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
   133e6:	7181      	strb	r1, [r0, #6]
	dst[0] = val;
   133e8:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
   133ea:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   133ec:	e414      	b.n	12c18 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   133ee:	68ab      	ldr	r3, [r5, #8]
   133f0:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   133f2:	2200      	movs	r2, #0
   133f4:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   133f6:	b2a8      	uxth	r0, r5
   133f8:	f007 ffe2 	bl	1b3c0 <ll_start_enc_req_send>
   133fc:	e52d      	b.n	12e5a <hci_cmd_handle+0x2b6>
	handle = sys_le16_to_cpu(cmd->handle);
   133fe:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   13400:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   13402:	f832 5b02 	ldrh.w	r5, [r2], #2
   13406:	e7f6      	b.n	133f6 <hci_cmd_handle+0x852>
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
   13408:	68aa      	ldr	r2, [r5, #8]
				 (uint8_t *)&cmd->rand,
   1340a:	4611      	mov	r1, r2
	status = ll_enc_req_send(handle,
   1340c:	f102 030c 	add.w	r3, r2, #12
   13410:	f831 0b02 	ldrh.w	r0, [r1], #2
   13414:	320a      	adds	r2, #10
   13416:	f008 f8f1 	bl	1b5fc <ll_enc_req_send>
   1341a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1341c:	8838      	ldrh	r0, [r7, #0]
   1341e:	f016 ff6f 	bl	2a300 <bt_hci_cmd_status_create>
   13422:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   13424:	f7ff bbf8 	b.w	12c18 <hci_cmd_handle+0x74>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13428:	4660      	mov	r0, ip
   1342a:	2109      	movs	r1, #9
   1342c:	f016 ff56 	bl	2a2dc <bt_hci_cmd_complete_create>
   13430:	2109      	movs	r1, #9
   13432:	4603      	mov	r3, r0
   13434:	3008      	adds	r0, #8
   13436:	9308      	str	r3, [sp, #32]
   13438:	f019 fb47 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   1343c:	2300      	movs	r3, #0
   1343e:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   13442:	2108      	movs	r1, #8
   13444:	f009 ffde 	bl	1d404 <lll_csrand_get>
	return evt;
   13448:	9e08      	ldr	r6, [sp, #32]
   1344a:	f7ff bbe5 	b.w	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
   1344e:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   13450:	aa0a      	add	r2, sp, #40	; 0x28
   13452:	2300      	movs	r3, #0
   13454:	f100 0110 	add.w	r1, r0, #16
   13458:	f00c fb38 	bl	1facc <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1345c:	2111      	movs	r1, #17
   1345e:	8838      	ldrh	r0, [r7, #0]
   13460:	f016 ff3c 	bl	2a2dc <bt_hci_cmd_complete_create>
   13464:	2111      	movs	r1, #17
   13466:	4603      	mov	r3, r0
   13468:	3008      	adds	r0, #8
   1346a:	9308      	str	r3, [sp, #32]
   1346c:	f019 fb2d 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   13470:	4605      	mov	r5, r0
   13472:	2300      	movs	r3, #0
   13474:	f805 3b01 	strb.w	r3, [r5], #1
   13478:	ac0a      	add	r4, sp, #40	; 0x28
   1347a:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1347c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1347e:	f8c6 0001 	str.w	r0, [r6, #1]
	return evt;
   13482:	9e08      	ldr	r6, [sp, #32]
   13484:	6069      	str	r1, [r5, #4]
   13486:	60aa      	str	r2, [r5, #8]
   13488:	60eb      	str	r3, [r5, #12]
	if (err == -EINVAL) {
   1348a:	f7ff bbc5 	b.w	12c18 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   1348e:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   13490:	8818      	ldrh	r0, [r3, #0]
   13492:	f003 ff41 	bl	17318 <ll_feature_req_send>
   13496:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13498:	8838      	ldrh	r0, [r7, #0]
   1349a:	f016 ff31 	bl	2a300 <bt_hci_cmd_status_create>
   1349e:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   134a0:	f7ff bbba 	b.w	12c18 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   134a4:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   134a6:	4660      	mov	r0, ip
   134a8:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   134aa:	881d      	ldrh	r5, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   134ac:	f016 ff16 	bl	2a2dc <bt_hci_cmd_complete_create>
   134b0:	2108      	movs	r1, #8
   134b2:	4603      	mov	r3, r0
   134b4:	4408      	add	r0, r1
   134b6:	9308      	str	r3, [sp, #32]
   134b8:	f019 fb07 	bl	2caca <net_buf_simple_add>
   134bc:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   134be:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   134c0:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   134c2:	f003 febf 	bl	17244 <ll_chm_get>
	rp->status = status;
   134c6:	7020      	strb	r0, [r4, #0]
	return evt;
   134c8:	9e08      	ldr	r6, [sp, #32]
	rp->handle = sys_le16_to_cpu(handle);
   134ca:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   134ce:	f7ff bba3 	b.w	12c18 <hci_cmd_handle+0x74>
	status = ll_chm_update(&cmd->ch_map[0]);
   134d2:	68a8      	ldr	r0, [r5, #8]
   134d4:	f008 fb5c 	bl	1bb90 <ll_chm_update>
   134d8:	e55a      	b.n	12f90 <hci_cmd_handle+0x3ec>
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
   134da:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   134dc:	890a      	ldrh	r2, [r1, #8]
   134de:	884b      	ldrh	r3, [r1, #2]
   134e0:	8808      	ldrh	r0, [r1, #0]
   134e2:	9202      	str	r2, [sp, #8]
   134e4:	88ca      	ldrh	r2, [r1, #6]
   134e6:	9201      	str	r2, [sp, #4]
   134e8:	8889      	ldrh	r1, [r1, #4]
   134ea:	9100      	str	r1, [sp, #0]
   134ec:	2200      	movs	r2, #0
   134ee:	4611      	mov	r1, r2
   134f0:	f003 fe14 	bl	1711c <ll_conn_update>
   134f4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   134f6:	8838      	ldrh	r0, [r7, #0]
   134f8:	f016 ff02 	bl	2a300 <bt_hci_cmd_status_create>
   134fc:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   134fe:	f7ff bb8b 	b.w	12c18 <hci_cmd_handle+0x74>
	status = ll_fal_remove(&cmd->addr);
   13502:	68a8      	ldr	r0, [r5, #8]
   13504:	f008 fd5e 	bl	1bfc4 <ll_fal_remove>
   13508:	e542      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_fal_add(&cmd->addr);
   1350a:	68a8      	ldr	r0, [r5, #8]
   1350c:	f008 fcbe 	bl	1be8c <ll_fal_add>
   13510:	e53e      	b.n	12f90 <hci_cmd_handle+0x3ec>
	status = ll_fal_clear();
   13512:	f008 fc91 	bl	1be38 <ll_fal_clear>
   13516:	e53b      	b.n	12f90 <hci_cmd_handle+0x3ec>
   13518:	20000160 	.word	0x20000160
   1351c:	20002570 	.word	0x20002570
   13520:	20002574 	.word	0x20002574
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   13524:	4660      	mov	r0, ip
   13526:	2102      	movs	r1, #2
   13528:	f016 fed8 	bl	2a2dc <bt_hci_cmd_complete_create>
   1352c:	2102      	movs	r1, #2
   1352e:	4603      	mov	r3, r0
   13530:	3008      	adds	r0, #8
   13532:	9308      	str	r3, [sp, #32]
   13534:	f019 fac9 	bl	2caca <net_buf_simple_add>
	rp->status = 0x00;
   13538:	2300      	movs	r3, #0
   1353a:	7003      	strb	r3, [r0, #0]
   1353c:	4604      	mov	r4, r0
	rp->fal_size = ll_fal_size_get();
   1353e:	f008 fc79 	bl	1be34 <ll_fal_size_get>
   13542:	7060      	strb	r0, [r4, #1]
	return evt;
   13544:	9e08      	ldr	r6, [sp, #32]
   13546:	f7ff bb67 	b.w	12c18 <hci_cmd_handle+0x74>
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
   1354a:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1354c:	7899      	ldrb	r1, [r3, #2]
   1354e:	8818      	ldrh	r0, [r3, #0]
   13550:	f003 fe98 	bl	17284 <ll_terminate_ind_send>
   13554:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   13556:	8838      	ldrh	r0, [r7, #0]
   13558:	f016 fed2 	bl	2a300 <bt_hci_cmd_status_create>
   1355c:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   1355e:	f7ff bb5b 	b.w	12c18 <hci_cmd_handle+0x74>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   13562:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   13564:	4b2a      	ldr	r3, [pc, #168]	; (13610 <hci_cmd_handle+0xa6c>)
   13566:	e64f      	b.n	13208 <hci_cmd_handle+0x664>
	dup_count = DUP_FILTER_DISABLED;
   13568:	482a      	ldr	r0, [pc, #168]	; (13614 <hci_cmd_handle+0xa70>)
	event_mask = DEFAULT_EVENT_MASK;
   1356a:	492b      	ldr	r1, [pc, #172]	; (13618 <hci_cmd_handle+0xa74>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1356c:	4a28      	ldr	r2, [pc, #160]	; (13610 <hci_cmd_handle+0xa6c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1356e:	4b2b      	ldr	r3, [pc, #172]	; (1361c <hci_cmd_handle+0xa78>)
	dup_count = DUP_FILTER_DISABLED;
   13570:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13574:	6004      	str	r4, [r0, #0]
	event_mask = DEFAULT_EVENT_MASK;
   13576:	f641 75ff 	movw	r5, #8191	; 0x1fff
   1357a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1357e:	e9c1 4500 	strd	r4, r5, [r1]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13582:	2000      	movs	r0, #0
   13584:	2100      	movs	r1, #0
   13586:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1358a:	201f      	movs	r0, #31
   1358c:	2100      	movs	r1, #0
   1358e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   13592:	f001 ff43 	bl	1541c <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   13596:	2101      	movs	r1, #1
   13598:	8838      	ldrh	r0, [r7, #0]
   1359a:	f016 fe9f 	bl	2a2dc <bt_hci_cmd_complete_create>
   1359e:	2101      	movs	r1, #1
   135a0:	4606      	mov	r6, r0
   135a2:	3008      	adds	r0, #8
   135a4:	f019 fa91 	bl	2caca <net_buf_simple_add>
	conn_count = 0U;
   135a8:	4a1d      	ldr	r2, [pc, #116]	; (13620 <hci_cmd_handle+0xa7c>)
	ccst->status = status;
   135aa:	2300      	movs	r3, #0
   135ac:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   135ae:	6013      	str	r3, [r2, #0]
}
   135b0:	f7ff bb32 	b.w	12c18 <hci_cmd_handle+0x74>
	handle = sys_le16_to_cpu(cmd->handle);
   135b4:	68ab      	ldr	r3, [r5, #8]
   135b6:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   135b8:	a90a      	add	r1, sp, #40	; 0x28
   135ba:	b2a8      	uxth	r0, r5
   135bc:	f003 ffe8 	bl	17590 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   135c0:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   135c2:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   135c4:	8838      	ldrh	r0, [r7, #0]
   135c6:	f016 fe89 	bl	2a2dc <bt_hci_cmd_complete_create>
   135ca:	2105      	movs	r1, #5
   135cc:	4603      	mov	r3, r0
   135ce:	3008      	adds	r0, #8
   135d0:	9308      	str	r3, [sp, #32]
   135d2:	f019 fa7a 	bl	2caca <net_buf_simple_add>
	rp->status = status;
   135d6:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   135d8:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   135dc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	return evt;
   135e0:	9e08      	ldr	r6, [sp, #32]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   135e2:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   135e6:	f7ff bb17 	b.w	12c18 <hci_cmd_handle+0x74>
		dup_count = DUP_FILTER_DISABLED;
   135ea:	4b0a      	ldr	r3, [pc, #40]	; (13614 <hci_cmd_handle+0xa70>)
   135ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   135f0:	601a      	str	r2, [r3, #0]
   135f2:	e687      	b.n	13304 <hci_cmd_handle+0x760>
	return bt_hci_cmd_status_create(_opcode, status);
   135f4:	2112      	movs	r1, #18
   135f6:	4660      	mov	r0, ip
   135f8:	f016 fe82 	bl	2a300 <bt_hci_cmd_status_create>
   135fc:	4606      	mov	r6, r0
	if (err == -EINVAL) {
   135fe:	f7ff bb0b 	b.w	12c18 <hci_cmd_handle+0x74>
	return bt_hci_cmd_status_create(_opcode, status);
   13602:	2111      	movs	r1, #17
   13604:	4660      	mov	r0, ip
   13606:	f016 fe7b 	bl	2a300 <bt_hci_cmd_status_create>
   1360a:	4606      	mov	r6, r0
		return;
   1360c:	f7ff bb04 	b.w	12c18 <hci_cmd_handle+0x74>
   13610:	20001c98 	.word	0x20001c98
   13614:	20002570 	.word	0x20002570
   13618:	20000158 	.word	0x20000158
   1361c:	20000160 	.word	0x20000160
   13620:	2000256c 	.word	0x2000256c

00013624 <hci_acl_handle>:
{
   13624:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   13628:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1362a:	2400      	movs	r4, #0
	if (buf->len < sizeof(*acl)) {
   1362c:	2b03      	cmp	r3, #3
{
   1362e:	b089      	sub	sp, #36	; 0x24
	*evt = NULL;
   13630:	600c      	str	r4, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   13632:	d947      	bls.n	136c4 <hci_acl_handle+0xa0>
	return net_buf_simple_pull_mem(&buf->b, len);
   13634:	4605      	mov	r5, r0
   13636:	4688      	mov	r8, r1
   13638:	3008      	adds	r0, #8
   1363a:	2104      	movs	r1, #4
   1363c:	f019 fa76 	bl	2cb2c <net_buf_simple_pull_mem>
	if (buf->len < len) {
   13640:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   13642:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   13644:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   13648:	42b3      	cmp	r3, r6
   1364a:	d34d      	bcc.n	136e8 <hci_acl_handle+0xc4>
	if (len > LL_LENGTH_OCTETS_TX_MAX) {
   1364c:	2e1b      	cmp	r6, #27
   1364e:	d848      	bhi.n	136e2 <hci_acl_handle+0xbe>
	node_tx = ll_tx_mem_acquire();
   13650:	f003 fd0c 	bl	1706c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   13654:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   13658:	4604      	mov	r4, r0
   1365a:	2800      	cmp	r0, #0
   1365c:	d047      	beq.n	136ee <hci_acl_handle+0xca>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1365e:	08bb      	lsrs	r3, r7, #2
   13660:	d102      	bne.n	13668 <hci_acl_handle+0x44>
	switch (bt_acl_flags_pb(flags)) {
   13662:	b34f      	cbz	r7, 136b8 <hci_acl_handle+0x94>
   13664:	2f01      	cmp	r7, #1
   13666:	d004      	beq.n	13672 <hci_acl_handle+0x4e>
		return -EINVAL;
   13668:	f06f 0015 	mvn.w	r0, #21
}
   1366c:	b009      	add	sp, #36	; 0x24
   1366e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   13672:	7903      	ldrb	r3, [r0, #4]
   13674:	f367 0301 	bfi	r3, r7, #0, #2
   13678:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   1367a:	7166      	strb	r6, [r4, #5]
   1367c:	68a9      	ldr	r1, [r5, #8]
   1367e:	4632      	mov	r2, r6
   13680:	1de0      	adds	r0, r4, #7
   13682:	f01a ff70 	bl	2e566 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   13686:	4621      	mov	r1, r4
   13688:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1368c:	f003 fcfa 	bl	17084 <ll_tx_mem_enqueue>
   13690:	2800      	cmp	r0, #0
   13692:	d0eb      	beq.n	1366c <hci_acl_handle+0x48>
		BT_ERR("Invalid Tx Enqueue");
   13694:	2302      	movs	r3, #2
   13696:	4a2d      	ldr	r2, [pc, #180]	; (1374c <hci_acl_handle+0x128>)
   13698:	9206      	str	r2, [sp, #24]
   1369a:	9301      	str	r3, [sp, #4]
   1369c:	9305      	str	r3, [sp, #20]
   1369e:	482c      	ldr	r0, [pc, #176]	; (13750 <hci_acl_handle+0x12c>)
   136a0:	2300      	movs	r3, #0
   136a2:	aa05      	add	r2, sp, #20
   136a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   136a8:	f015 fa02 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		ll_tx_mem_release(node_tx);
   136ac:	4620      	mov	r0, r4
   136ae:	f003 fce3 	bl	17078 <ll_tx_mem_release>
		return -EINVAL;
   136b2:	f06f 0015 	mvn.w	r0, #21
   136b6:	e7d9      	b.n	1366c <hci_acl_handle+0x48>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   136b8:	7903      	ldrb	r3, [r0, #4]
   136ba:	2202      	movs	r2, #2
   136bc:	f362 0301 	bfi	r3, r2, #0, #2
   136c0:	7103      	strb	r3, [r0, #4]
		break;
   136c2:	e7da      	b.n	1367a <hci_acl_handle+0x56>
		BT_ERR("No HCI ACL header");
   136c4:	4a23      	ldr	r2, [pc, #140]	; (13754 <hci_acl_handle+0x130>)
   136c6:	2302      	movs	r3, #2
		BT_ERR("Invalid HCI ACL packet length");
   136c8:	9206      	str	r2, [sp, #24]
   136ca:	9301      	str	r3, [sp, #4]
   136cc:	9305      	str	r3, [sp, #20]
   136ce:	4820      	ldr	r0, [pc, #128]	; (13750 <hci_acl_handle+0x12c>)
   136d0:	4623      	mov	r3, r4
   136d2:	aa05      	add	r2, sp, #20
   136d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   136d8:	f015 f9ea 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   136dc:	f06f 0015 	mvn.w	r0, #21
   136e0:	e7c4      	b.n	1366c <hci_acl_handle+0x48>
		BT_ERR("Invalid HCI ACL Data length");
   136e2:	4a1d      	ldr	r2, [pc, #116]	; (13758 <hci_acl_handle+0x134>)
   136e4:	2302      	movs	r3, #2
   136e6:	e7ef      	b.n	136c8 <hci_acl_handle+0xa4>
		BT_ERR("Invalid HCI ACL packet length");
   136e8:	4a1c      	ldr	r2, [pc, #112]	; (1375c <hci_acl_handle+0x138>)
   136ea:	2302      	movs	r3, #2
   136ec:	e7ec      	b.n	136c8 <hci_acl_handle+0xa4>
		BT_ERR("Tx Buffer Overflow");
   136ee:	2502      	movs	r5, #2
   136f0:	4b1b      	ldr	r3, [pc, #108]	; (13760 <hci_acl_handle+0x13c>)
   136f2:	9306      	str	r3, [sp, #24]
   136f4:	9501      	str	r5, [sp, #4]
   136f6:	9505      	str	r5, [sp, #20]
   136f8:	4815      	ldr	r0, [pc, #84]	; (13750 <hci_acl_handle+0x12c>)
   136fa:	4623      	mov	r3, r4
   136fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   13700:	aa05      	add	r2, sp, #20
   13702:	f015 f9d5 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   13706:	4b17      	ldr	r3, [pc, #92]	; (13764 <hci_acl_handle+0x140>)
   13708:	681b      	ldr	r3, [r3, #0]
   1370a:	019b      	lsls	r3, r3, #6
   1370c:	d402      	bmi.n	13714 <hci_acl_handle+0xf0>
		return -ENOBUFS;
   1370e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13712:	e7ab      	b.n	1366c <hci_acl_handle+0x48>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   13714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13718:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1371c:	2001      	movs	r0, #1
   1371e:	f7f4 ffe3 	bl	86e8 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   13722:	4629      	mov	r1, r5
   13724:	f8c8 0000 	str.w	r0, [r8]
   13728:	3008      	adds	r0, #8
   1372a:	f019 f9ce 	bl	2caca <net_buf_simple_add>
	hdr->len = len;
   1372e:	2401      	movs	r4, #1
	hdr->evt = evt;
   13730:	221a      	movs	r2, #26
   13732:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13734:	7044      	strb	r4, [r0, #1]
   13736:	f8d8 0000 	ldr.w	r0, [r8]
   1373a:	4621      	mov	r1, r4
   1373c:	3008      	adds	r0, #8
   1373e:	f019 f9c4 	bl	2caca <net_buf_simple_add>
   13742:	4603      	mov	r3, r0
		return -ENOBUFS;
   13744:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   13748:	701c      	strb	r4, [r3, #0]
   1374a:	e78f      	b.n	1366c <hci_acl_handle+0x48>
   1374c:	00030090 	.word	0x00030090
   13750:	0002f41c 	.word	0x0002f41c
   13754:	0003002c 	.word	0x0003002c
   13758:	00030060 	.word	0x00030060
   1375c:	00030040 	.word	0x00030040
   13760:	0003007c 	.word	0x0003007c
   13764:	20000158 	.word	0x20000158

00013768 <hci_disconn_complete_encode>:
{
   13768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1376a:	4b0e      	ldr	r3, [pc, #56]	; (137a4 <hci_disconn_complete_encode+0x3c>)
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	06db      	lsls	r3, r3, #27
   13770:	d400      	bmi.n	13774 <hci_disconn_complete_encode+0xc>
}
   13772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13774:	f102 0408 	add.w	r4, r2, #8
   13778:	4605      	mov	r5, r0
   1377a:	460e      	mov	r6, r1
   1377c:	4620      	mov	r0, r4
   1377e:	2102      	movs	r1, #2
   13780:	f019 f9a3 	bl	2caca <net_buf_simple_add>
   13784:	4603      	mov	r3, r0
	hdr->len = len;
   13786:	2104      	movs	r1, #4
	hdr->evt = evt;
   13788:	2205      	movs	r2, #5
	hdr->len = len;
   1378a:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   1378c:	701a      	strb	r2, [r3, #0]
   1378e:	4620      	mov	r0, r4
   13790:	f019 f99b 	bl	2caca <net_buf_simple_add>
   13794:	2700      	movs	r7, #0
	ep->status = 0x00;
   13796:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13798:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1379c:	782b      	ldrb	r3, [r5, #0]
   1379e:	70c3      	strb	r3, [r0, #3]
}
   137a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137a2:	bf00      	nop
   137a4:	20000158 	.word	0x20000158

000137a8 <hci_disconn_complete_process>:
	conn_count--;
   137a8:	4a02      	ldr	r2, [pc, #8]	; (137b4 <hci_disconn_complete_process+0xc>)
   137aa:	6813      	ldr	r3, [r2, #0]
   137ac:	3b01      	subs	r3, #1
   137ae:	6013      	str	r3, [r2, #0]
}
   137b0:	4770      	bx	lr
   137b2:	bf00      	nop
   137b4:	2000256c 	.word	0x2000256c

000137b8 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   137b8:	7f03      	ldrb	r3, [r0, #28]
   137ba:	f003 0303 	and.w	r3, r3, #3
   137be:	3b01      	subs	r3, #1
   137c0:	2b01      	cmp	r3, #1
{
   137c2:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   137c4:	d90d      	bls.n	137e2 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   137c6:	4a16      	ldr	r2, [pc, #88]	; (13820 <hci_acl_encode+0x68>)
   137c8:	4916      	ldr	r1, [pc, #88]	; (13824 <hci_acl_encode+0x6c>)
   137ca:	4817      	ldr	r0, [pc, #92]	; (13828 <hci_acl_encode+0x70>)
   137cc:	f641 53bb 	movw	r3, #7611	; 0x1dbb
   137d0:	f014 fbea 	bl	27fa8 <printk>
   137d4:	4040      	eors	r0, r0
   137d6:	f380 8811 	msr	BASEPRI, r0
   137da:	f04f 0003 	mov.w	r0, #3
   137de:	df02      	svc	2
		break;
	}
}
   137e0:	bd70      	pop	{r4, r5, r6, pc}
   137e2:	4604      	mov	r4, r0
   137e4:	f101 0508 	add.w	r5, r1, #8
   137e8:	4628      	mov	r0, r5
   137ea:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   137ec:	88e6      	ldrh	r6, [r4, #6]
   137ee:	f019 f96c 	bl	2caca <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   137f2:	7f23      	ldrb	r3, [r4, #28]
   137f4:	f003 0303 	and.w	r3, r3, #3
   137f8:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   137fa:	bf0c      	ite	eq
   137fc:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   13800:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   13804:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   13806:	7f61      	ldrb	r1, [r4, #29]
   13808:	8041      	strh	r1, [r0, #2]
   1380a:	4628      	mov	r0, r5
   1380c:	f019 f95d 	bl	2caca <net_buf_simple_add>
   13810:	7f62      	ldrb	r2, [r4, #29]
   13812:	f104 011f 	add.w	r1, r4, #31
}
   13816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   1381a:	f01a bea4 	b.w	2e566 <memcpy>
   1381e:	bf00      	nop
   13820:	000300a4 	.word	0x000300a4
   13824:	0002ff74 	.word	0x0002ff74
   13828:	0002fedc 	.word	0x0002fedc

0001382c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13830:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13832:	f890 c004 	ldrb.w	ip, [r0, #4]
	handle = node_rx->hdr.handle;
   13836:	88c6      	ldrh	r6, [r0, #6]
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13838:	f1bc 0f03 	cmp.w	ip, #3
{
   1383c:	af04      	add	r7, sp, #16
   1383e:	4604      	mov	r4, r0
   13840:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   13842:	f100 081c 	add.w	r8, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13846:	d01e      	beq.n	13886 <hci_evt_encode+0x5a>
	switch (node_rx->hdr.type) {
   13848:	f1ac 0c05 	sub.w	ip, ip, #5
   1384c:	f1bc 0f17 	cmp.w	ip, #23
   13850:	d833      	bhi.n	138ba <hci_evt_encode+0x8e>
   13852:	e8df f01c 	tbh	[pc, ip, lsl #1]
   13856:	0043      	.short	0x0043
   13858:	00320032 	.word	0x00320032
   1385c:	00320032 	.word	0x00320032
   13860:	00320032 	.word	0x00320032
   13864:	00320032 	.word	0x00320032
   13868:	00320032 	.word	0x00320032
   1386c:	00320032 	.word	0x00320032
   13870:	00320032 	.word	0x00320032
   13874:	00320032 	.word	0x00320032
   13878:	012d00c6 	.word	0x012d00c6
   1387c:	01630133 	.word	0x01630133
   13880:	018d017a 	.word	0x018d017a
   13884:	01c1      	.short	0x01c1
	switch (pdu_data->llctrl.opcode) {
   13886:	7fc3      	ldrb	r3, [r0, #31]
   13888:	3b03      	subs	r3, #3
   1388a:	2b12      	cmp	r3, #18
   1388c:	f200 81d8 	bhi.w	13c40 <hci_evt_encode+0x414>
   13890:	e8df f013 	tbh	[pc, r3, lsl #1]
   13894:	01d60239 	.word	0x01d60239
   13898:	026101d6 	.word	0x026101d6
   1389c:	01d6027a 	.word	0x01d6027a
   138a0:	01d6028e 	.word	0x01d6028e
   138a4:	01d601d6 	.word	0x01d601d6
   138a8:	01d602c3 	.word	0x01d602c3
   138ac:	01d60295 	.word	0x01d60295
   138b0:	01d602ba 	.word	0x01d602ba
   138b4:	01e401d6 	.word	0x01e401d6
   138b8:	01e4      	.short	0x01e4
		LL_ASSERT(0);
   138ba:	4abe      	ldr	r2, [pc, #760]	; (13bb4 <hci_evt_encode+0x388>)
   138bc:	49be      	ldr	r1, [pc, #760]	; (13bb8 <hci_evt_encode+0x38c>)
   138be:	48bf      	ldr	r0, [pc, #764]	; (13bbc <hci_evt_encode+0x390>)
   138c0:	f641 43af 	movw	r3, #7343	; 0x1caf
   138c4:	f014 fb70 	bl	27fa8 <printk>
   138c8:	4040      	eors	r0, r0
   138ca:	f380 8811 	msr	BASEPRI, r0
   138ce:	f04f 0003 	mov.w	r0, #3
   138d2:	df02      	svc	2
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   138d4:	372c      	adds	r7, #44	; 0x2c
   138d6:	46bd      	mov	sp, r7
   138d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   138dc:	4ab8      	ldr	r2, [pc, #736]	; (13bc0 <hci_evt_encode+0x394>)
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   138de:	7e03      	ldrb	r3, [r0, #24]
	direct_report = node_rx->hdr.rx_ftr.direct;
   138e0:	7ea6      	ldrb	r6, [r4, #26]
	rl_idx = node_rx->hdr.rx_ftr.rl_idx;
   138e2:	f894 9019 	ldrb.w	r9, [r4, #25]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   138e6:	e892 0003 	ldmia.w	r2, {r0, r1}
   138ea:	0c0a      	lsrs	r2, r1, #16
   138ec:	75ba      	strb	r2, [r7, #22]
	if (adv->tx_addr) {
   138ee:	7f22      	ldrb	r2, [r4, #28]
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   138f0:	6138      	str	r0, [r7, #16]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   138f2:	425b      	negs	r3, r3
	if (adv->tx_addr) {
   138f4:	0652      	lsls	r2, r2, #25
	const uint8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
   138f6:	82b9      	strh	r1, [r7, #20]
	rssi = -(node_rx->hdr.rx_ftr.rssi);
   138f8:	fa4f f883 	sxtb.w	r8, r3
	direct_report = node_rx->hdr.rx_ftr.direct;
   138fc:	f3c6 0640 	ubfx	r6, r6, #1, #1
	if (adv->tx_addr) {
   13900:	f100 82bd 	bmi.w	13e7e <hci_evt_encode+0x652>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13904:	4baf      	ldr	r3, [pc, #700]	; (13bc4 <hci_evt_encode+0x398>)
   13906:	685b      	ldr	r3, [r3, #4]
   13908:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
	if (direct_report) {
   1390c:	2e00      	cmp	r6, #0
   1390e:	f040 82ff 	bne.w	13f10 <hci_evt_encode+0x6e4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13912:	2b00      	cmp	r3, #0
   13914:	d0de      	beq.n	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) {
   13916:	4bac      	ldr	r3, [pc, #688]	; (13bc8 <hci_evt_encode+0x39c>)
   13918:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1391a:	079e      	lsls	r6, r3, #30
   1391c:	d5da      	bpl.n	138d4 <hci_evt_encode+0xa8>
	if (dup_count >= 0) {
   1391e:	4bab      	ldr	r3, [pc, #684]	; (13bcc <hci_evt_encode+0x3a0>)
   13920:	681b      	ldr	r3, [r3, #0]
   13922:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   13924:	f104 0b1e 	add.w	fp, r4, #30
	if (dup_count >= 0) {
   13928:	db09      	blt.n	1393e <hci_evt_encode+0x112>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   1392a:	7f20      	ldrb	r0, [r4, #28]
   1392c:	465a      	mov	r2, fp
   1392e:	f3c0 1180 	ubfx	r1, r0, #6, #1
   13932:	f000 000f 	and.w	r0, r0, #15
   13936:	f7fe ffbb 	bl	128b0 <dup_found.part.0>
	if (dup_scan &&
   1393a:	2800      	cmp	r0, #0
   1393c:	d1ca      	bne.n	138d4 <hci_evt_encode+0xa8>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
   1393e:	7f23      	ldrb	r3, [r4, #28]
   13940:	f003 030f 	and.w	r3, r3, #15
   13944:	2b01      	cmp	r3, #1
   13946:	f000 83a1 	beq.w	1408c <hci_evt_encode+0x860>
		data_len = (adv->len - BDADDR_SIZE);
   1394a:	7f62      	ldrb	r2, [r4, #29]
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1394c:	f102 0a06 	add.w	sl, r2, #6
		data_len = (adv->len - BDADDR_SIZE);
   13950:	1f93      	subs	r3, r2, #6
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   13952:	fa5f f18a 	uxtb.w	r1, sl
		data_len = (adv->len - BDADDR_SIZE);
   13956:	b2db      	uxtb	r3, r3
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
   13958:	3205      	adds	r2, #5
	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1395a:	6039      	str	r1, [r7, #0]
	return net_buf_add(buf, melen);
   1395c:	fa5f fa82 	uxtb.w	sl, r2
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   13960:	461e      	mov	r6, r3
   13962:	3508      	adds	r5, #8
   13964:	2102      	movs	r1, #2
   13966:	4628      	mov	r0, r5
   13968:	607b      	str	r3, [r7, #4]
   1396a:	f019 f8ae 	bl	2caca <net_buf_simple_add>
	hdr->len = len;
   1396e:	683b      	ldr	r3, [r7, #0]
   13970:	7043      	strb	r3, [r0, #1]
	hdr->evt = evt;
   13972:	213e      	movs	r1, #62	; 0x3e
   13974:	7001      	strb	r1, [r0, #0]
   13976:	2101      	movs	r1, #1
   13978:	4628      	mov	r0, r5
   1397a:	f019 f8a6 	bl	2caca <net_buf_simple_add>
   1397e:	4684      	mov	ip, r0
	me->subevent = subevt;
   13980:	2202      	movs	r2, #2
   13982:	f88c 2000 	strb.w	r2, [ip]
   13986:	4651      	mov	r1, sl
   13988:	4628      	mov	r0, r5
   1398a:	f019 f89e 	bl	2caca <net_buf_simple_add>
	sep->num_reports = 1U;
   1398e:	2201      	movs	r2, #1
   13990:	7002      	strb	r2, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
   13992:	7f22      	ldrb	r2, [r4, #28]
   13994:	f107 0328 	add.w	r3, r7, #40	; 0x28
   13998:	f002 020f 	and.w	r2, r2, #15
   1399c:	441a      	add	r2, r3
   1399e:	4605      	mov	r5, r0
   139a0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
   139a4:	7042      	strb	r2, [r0, #1]
	if (rl_idx < ll_rl_size_get()) {
   139a6:	f008 fba3 	bl	1c0f0 <ll_rl_size_get>
   139aa:	4581      	cmp	r9, r0
   139ac:	687b      	ldr	r3, [r7, #4]
   139ae:	f0c0 8374 	bcc.w	1409a <hci_evt_encode+0x86e>
		adv_info->addr.type = adv->tx_addr;
   139b2:	7f22      	ldrb	r2, [r4, #28]
   139b4:	f3c2 1280 	ubfx	r2, r2, #6, #1
   139b8:	70aa      	strb	r2, [r5, #2]
   139ba:	f8d4 201e 	ldr.w	r2, [r4, #30]
   139be:	f8c5 2003 	str.w	r2, [r5, #3]
   139c2:	f8bb 2004 	ldrh.w	r2, [fp, #4]
   139c6:	f8a5 2007 	strh.w	r2, [r5, #7]
	memcpy(&adv_info->data[0], &adv->adv_ind.data[0], data_len);
   139ca:	f105 090a 	add.w	r9, r5, #10
	adv_info->length = data_len;
   139ce:	726b      	strb	r3, [r5, #9]
   139d0:	4632      	mov	r2, r6
   139d2:	f104 0124 	add.w	r1, r4, #36	; 0x24
   139d6:	4648      	mov	r0, r9
   139d8:	f01a fdc5 	bl	2e566 <memcpy>
	*prssi = rssi;
   139dc:	f809 8006 	strb.w	r8, [r9, r6]
   139e0:	e778      	b.n	138d4 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   139e2:	f018 0f01 	tst.w	r8, #1
   139e6:	f040 823c 	bne.w	13e62 <hci_evt_encode+0x636>
	status = cc->status;
   139ea:	f894 801c 	ldrb.w	r8, [r4, #28]
	if (!status) {
   139ee:	f1b8 0f00 	cmp.w	r8, #0
   139f2:	f000 822d 	beq.w	13e50 <hci_evt_encode+0x624>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   139f6:	4b73      	ldr	r3, [pc, #460]	; (13bc4 <hci_evt_encode+0x398>)
   139f8:	685b      	ldr	r3, [r3, #4]
   139fa:	0098      	lsls	r0, r3, #2
   139fc:	f57f af6a 	bpl.w	138d4 <hci_evt_encode+0xa8>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   13a00:	4b71      	ldr	r3, [pc, #452]	; (13bc8 <hci_evt_encode+0x39c>)
   13a02:	681b      	ldr	r3, [r3, #0]
   13a04:	f240 2201 	movw	r2, #513	; 0x201
   13a08:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   13a0a:	f403 7a00 	and.w	sl, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   13a0e:	f43f af61 	beq.w	138d4 <hci_evt_encode+0xa8>
   13a12:	3508      	adds	r5, #8
	if (!status) {
   13a14:	f1b8 0f00 	cmp.w	r8, #0
   13a18:	f040 8243 	bne.w	13ea2 <hci_evt_encode+0x676>
		conn_count++;
   13a1c:	4a6c      	ldr	r2, [pc, #432]	; (13bd0 <hci_evt_encode+0x3a4>)
   13a1e:	6813      	ldr	r3, [r2, #0]
   13a20:	3301      	adds	r3, #1
		ll_rl_crpa_set(cc->peer_addr_type,
   13a22:	f104 091f 	add.w	r9, r4, #31
		conn_count++;
   13a26:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13a28:	f1ba 0f00 	cmp.w	sl, #0
   13a2c:	f000 82cf 	beq.w	13fce <hci_evt_encode+0x7a2>
   13a30:	2102      	movs	r1, #2
   13a32:	4628      	mov	r0, r5
   13a34:	f019 f849 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13a38:	233e      	movs	r3, #62	; 0x3e
   13a3a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13a3c:	231f      	movs	r3, #31
   13a3e:	7043      	strb	r3, [r0, #1]
   13a40:	2101      	movs	r1, #1
   13a42:	4628      	mov	r0, r5
   13a44:	f019 f841 	bl	2caca <net_buf_simple_add>
   13a48:	4603      	mov	r3, r0
	me->subevent = subevt;
   13a4a:	220a      	movs	r2, #10
   13a4c:	701a      	strb	r2, [r3, #0]
   13a4e:	211e      	movs	r1, #30
   13a50:	4628      	mov	r0, r5
   13a52:	f019 f83a 	bl	2caca <net_buf_simple_add>
		leecc->status = 0x00;
   13a56:	f880 8000 	strb.w	r8, [r0]
		leecc->handle = sys_cpu_to_le16(handle);
   13a5a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   13a5e:	7f63      	ldrb	r3, [r4, #29]
   13a60:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   13a62:	7fa3      	ldrb	r3, [r4, #30]
   13a64:	7103      	strb	r3, [r0, #4]
   13a66:	f8d4 301f 	ldr.w	r3, [r4, #31]
   13a6a:	f8c0 3005 	str.w	r3, [r0, #5]
   13a6e:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   13a72:	f8a0 3009 	strh.w	r3, [r0, #9]
   13a76:	f8d4 302b 	ldr.w	r3, [r4, #43]	; 0x2b
   13a7a:	f8c0 300b 	str.w	r3, [r0, #11]
   13a7e:	f8b4 302f 	ldrh.w	r3, [r4, #47]	; 0x2f
   13a82:	f8a0 300f 	strh.w	r3, [r0, #15]
   13a86:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   13a8a:	f8c0 3011 	str.w	r3, [r0, #17]
   13a8e:	f8b4 3029 	ldrh.w	r3, [r4, #41]	; 0x29
   13a92:	f8a0 3015 	strh.w	r3, [r0, #21]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13a96:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   13a98:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   13a9a:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13a9c:	f8a0 2019 	strh.w	r2, [r0, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   13aa0:	f8a0 1017 	strh.w	r1, [r0, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13aa4:	f8a0 301b 	strh.w	r3, [r0, #27]
		leecc->clock_accuracy = cc->sca;
   13aa8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   13aac:	7743      	strb	r3, [r0, #29]
		return;
   13aae:	e711      	b.n	138d4 <hci_evt_encode+0xa8>
		hci_disconn_complete_encode(pdu_data, handle, buf);
   13ab0:	460a      	mov	r2, r1
   13ab2:	4640      	mov	r0, r8
   13ab4:	4631      	mov	r1, r6
   13ab6:	f7ff fe57 	bl	13768 <hci_disconn_complete_encode>
		break;
   13aba:	e70b      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13abc:	4b41      	ldr	r3, [pc, #260]	; (13bc4 <hci_evt_encode+0x398>)
   13abe:	685b      	ldr	r3, [r3, #4]
   13ac0:	0099      	lsls	r1, r3, #2
   13ac2:	f57f af07 	bpl.w	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   13ac6:	4b40      	ldr	r3, [pc, #256]	; (13bc8 <hci_evt_encode+0x39c>)
   13ac8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13aca:	075a      	lsls	r2, r3, #29
   13acc:	f57f af02 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13ad0:	3508      	adds	r5, #8
   13ad2:	2102      	movs	r1, #2
   13ad4:	4628      	mov	r0, r5
   13ad6:	f018 fff8 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13ada:	233e      	movs	r3, #62	; 0x3e
   13adc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13ade:	230a      	movs	r3, #10
   13ae0:	7043      	strb	r3, [r0, #1]
   13ae2:	2101      	movs	r1, #1
   13ae4:	4628      	mov	r0, r5
   13ae6:	f018 fff0 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13aea:	2303      	movs	r3, #3
   13aec:	7003      	strb	r3, [r0, #0]
   13aee:	2109      	movs	r1, #9
   13af0:	4628      	mov	r0, r5
   13af2:	f018 ffea 	bl	2caca <net_buf_simple_add>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   13af6:	f018 0f01 	tst.w	r8, #1
   13afa:	4605      	mov	r5, r0
   13afc:	f040 82b8 	bne.w	14070 <hci_evt_encode+0x844>
	sep->status = cu->status;
   13b00:	7f23      	ldrb	r3, [r4, #28]
   13b02:	702b      	strb	r3, [r5, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   13b04:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13b06:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13b08:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13b0a:	f8a5 3007 	strh.w	r3, [r5, #7]
	sep->handle = sys_cpu_to_le16(handle);
   13b0e:	f8a5 6001 	strh.w	r6, [r5, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   13b12:	f8a5 1003 	strh.w	r1, [r5, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13b16:	f8a5 2005 	strh.w	r2, [r5, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13b1a:	e6db      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   13b1c:	4b29      	ldr	r3, [pc, #164]	; (13bc4 <hci_evt_encode+0x398>)
   13b1e:	685b      	ldr	r3, [r3, #4]
   13b20:	041b      	lsls	r3, r3, #16
   13b22:	f04f 0400 	mov.w	r4, #0
   13b26:	f57f aed5 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13b2a:	3508      	adds	r5, #8
   13b2c:	2102      	movs	r1, #2
   13b2e:	4628      	mov	r0, r5
   13b30:	f018 ffcb 	bl	2caca <net_buf_simple_add>
	hdr->len = len;
   13b34:	2103      	movs	r1, #3
	hdr->evt = evt;
   13b36:	2330      	movs	r3, #48	; 0x30
   13b38:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13b3a:	7041      	strb	r1, [r0, #1]
   13b3c:	4628      	mov	r0, r5
   13b3e:	f018 ffc4 	bl	2caca <net_buf_simple_add>
	ep->status = 0x00;
   13b42:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13b44:	f8a0 6001 	strh.w	r6, [r0, #1]
   13b48:	e6c4      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   13b4a:	4b22      	ldr	r3, [pc, #136]	; (13bd4 <hci_evt_encode+0x3a8>)
   13b4c:	681b      	ldr	r3, [r3, #0]
   13b4e:	021c      	lsls	r4, r3, #8
   13b50:	f57f aec0 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13b54:	3508      	adds	r5, #8
   13b56:	2102      	movs	r1, #2
   13b58:	4628      	mov	r0, r5
   13b5a:	f018 ffb6 	bl	2caca <net_buf_simple_add>
	hdr->len = len;
   13b5e:	2102      	movs	r1, #2
	hdr->evt = evt;
   13b60:	2357      	movs	r3, #87	; 0x57
   13b62:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13b64:	7041      	strb	r1, [r0, #1]
   13b66:	4628      	mov	r0, r5
   13b68:	f018 ffaf 	bl	2caca <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   13b6c:	8006      	strh	r6, [r0, #0]
   13b6e:	e6b1      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13b70:	4b14      	ldr	r3, [pc, #80]	; (13bc4 <hci_evt_encode+0x398>)
   13b72:	685b      	ldr	r3, [r3, #4]
   13b74:	0098      	lsls	r0, r3, #2
   13b76:	f57f aead 	bpl.w	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   13b7a:	4b13      	ldr	r3, [pc, #76]	; (13bc8 <hci_evt_encode+0x39c>)
   13b7c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13b7e:	0319      	lsls	r1, r3, #12
   13b80:	f57f aea8 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13b84:	3508      	adds	r5, #8
   13b86:	2102      	movs	r1, #2
   13b88:	4628      	mov	r0, r5
   13b8a:	f018 ff9e 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13b8e:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13b90:	2304      	movs	r3, #4
	hdr->evt = evt;
   13b92:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13b94:	7043      	strb	r3, [r0, #1]
   13b96:	2101      	movs	r1, #1
   13b98:	4628      	mov	r0, r5
   13b9a:	f018 ff96 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13b9e:	2314      	movs	r3, #20
   13ba0:	7003      	strb	r3, [r0, #0]
   13ba2:	2103      	movs	r1, #3
   13ba4:	4628      	mov	r0, r5
   13ba6:	f018 ff90 	bl	2caca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13baa:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   13bac:	7f23      	ldrb	r3, [r4, #28]
   13bae:	7083      	strb	r3, [r0, #2]
   13bb0:	e690      	b.n	138d4 <hci_evt_encode+0xa8>
   13bb2:	bf00      	nop
   13bb4:	000300a4 	.word	0x000300a4
   13bb8:	0002ff74 	.word	0x0002ff74
   13bbc:	0002fedc 	.word	0x0002fedc
   13bc0:	0002f6d4 	.word	0x0002f6d4
   13bc4:	20000158 	.word	0x20000158
   13bc8:	20000160 	.word	0x20000160
   13bcc:	20002570 	.word	0x20002570
   13bd0:	2000256c 	.word	0x2000256c
   13bd4:	20001c98 	.word	0x20001c98
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13bd8:	4bc3      	ldr	r3, [pc, #780]	; (13ee8 <hci_evt_encode+0x6bc>)
   13bda:	685b      	ldr	r3, [r3, #4]
   13bdc:	009a      	lsls	r2, r3, #2
   13bde:	d503      	bpl.n	13be8 <hci_evt_encode+0x3bc>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   13be0:	4bc2      	ldr	r3, [pc, #776]	; (13eec <hci_evt_encode+0x6c0>)
   13be2:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13be4:	051b      	lsls	r3, r3, #20
   13be6:	d460      	bmi.n	13caa <hci_evt_encode+0x47e>
   13be8:	7f62      	ldrb	r2, [r4, #29]
   13bea:	7fa3      	ldrb	r3, [r4, #30]
   13bec:	2a00      	cmp	r2, #0
   13bee:	fa92 f2a2 	rbit	r2, r2
   13bf2:	fab2 f282 	clz	r2, r2
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   13bf6:	466d      	mov	r5, sp
   13bf8:	bf08      	it	eq
   13bfa:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   13bfe:	b08a      	sub	sp, #40	; 0x28
   13c00:	2b00      	cmp	r3, #0
   13c02:	f102 0101 	add.w	r1, r2, #1
   13c06:	a804      	add	r0, sp, #16
   13c08:	4ab9      	ldr	r2, [pc, #740]	; (13ef0 <hci_evt_encode+0x6c4>)
   13c0a:	9609      	str	r6, [sp, #36]	; 0x24
   13c0c:	fa93 f3a3 	rbit	r3, r3
   13c10:	7f26      	ldrb	r6, [r4, #28]
   13c12:	9208      	str	r2, [sp, #32]
   13c14:	fab3 f383 	clz	r3, r3
   13c18:	4602      	mov	r2, r0
   13c1a:	bf08      	it	eq
   13c1c:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13c20:	2406      	movs	r4, #6
   13c22:	3301      	adds	r3, #1
   13c24:	e9cd 610a 	strd	r6, r1, [sp, #40]	; 0x28
   13c28:	930c      	str	r3, [sp, #48]	; 0x30
   13c2a:	613c      	str	r4, [r7, #16]
   13c2c:	f842 4f0c 	str.w	r4, [r2, #12]!
   13c30:	48b0      	ldr	r0, [pc, #704]	; (13ef4 <hci_evt_encode+0x6c8>)
   13c32:	2300      	movs	r3, #0
   13c34:	f44f 5142 	mov.w	r1, #12416	; 0x3080
   13c38:	f014 ff3a 	bl	28ab0 <z_impl_z_log_msg2_static_create>
   13c3c:	46ad      	mov	sp, r5
		return;
   13c3e:	e649      	b.n	138d4 <hci_evt_encode+0xa8>
		LL_ASSERT(0);
   13c40:	4aad      	ldr	r2, [pc, #692]	; (13ef8 <hci_evt_encode+0x6cc>)
   13c42:	49ae      	ldr	r1, [pc, #696]	; (13efc <hci_evt_encode+0x6d0>)
   13c44:	48ae      	ldr	r0, [pc, #696]	; (13f00 <hci_evt_encode+0x6d4>)
   13c46:	f641 538f 	movw	r3, #7567	; 0x1d8f
   13c4a:	f014 f9ad 	bl	27fa8 <printk>
   13c4e:	4040      	eors	r0, r0
   13c50:	f380 8811 	msr	BASEPRI, r0
   13c54:	f04f 0003 	mov.w	r0, #3
   13c58:	df02      	svc	2
}
   13c5a:	e63b      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13c5c:	4ba2      	ldr	r3, [pc, #648]	; (13ee8 <hci_evt_encode+0x6bc>)
   13c5e:	685b      	ldr	r3, [r3, #4]
   13c60:	009a      	lsls	r2, r3, #2
   13c62:	f57f ae37 	bpl.w	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   13c66:	4ba1      	ldr	r3, [pc, #644]	; (13eec <hci_evt_encode+0x6c0>)
   13c68:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13c6a:	065b      	lsls	r3, r3, #25
   13c6c:	f57f ae32 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13c70:	3508      	adds	r5, #8
   13c72:	2102      	movs	r1, #2
   13c74:	4628      	mov	r0, r5
   13c76:	f018 ff28 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13c7a:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13c7c:	230b      	movs	r3, #11
	hdr->evt = evt;
   13c7e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13c80:	7043      	strb	r3, [r0, #1]
   13c82:	2101      	movs	r1, #1
   13c84:	4628      	mov	r0, r5
   13c86:	f018 ff20 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13c8a:	2307      	movs	r3, #7
   13c8c:	7003      	strb	r3, [r0, #0]
   13c8e:	210a      	movs	r1, #10
   13c90:	4628      	mov	r0, r5
   13c92:	f018 ff1a 	bl	2caca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13c96:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   13c98:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13c9a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   13c9c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13c9e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13ca0:	8c23      	ldrh	r3, [r4, #32]
   13ca2:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   13ca4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13ca6:	8103      	strh	r3, [r0, #8]
   13ca8:	e614      	b.n	138d4 <hci_evt_encode+0xa8>
   13caa:	3508      	adds	r5, #8
   13cac:	2102      	movs	r1, #2
   13cae:	4628      	mov	r0, r5
   13cb0:	f018 ff0b 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13cb4:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13cb6:	2306      	movs	r3, #6
	hdr->evt = evt;
   13cb8:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13cba:	7043      	strb	r3, [r0, #1]
   13cbc:	2101      	movs	r1, #1
   13cbe:	4628      	mov	r0, r5
   13cc0:	f018 ff03 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13cc4:	230c      	movs	r3, #12
   13cc6:	7003      	strb	r3, [r0, #0]
   13cc8:	2105      	movs	r1, #5
   13cca:	4628      	mov	r0, r5
   13ccc:	f018 fefd 	bl	2caca <net_buf_simple_add>
	sep->status = pu->status;
   13cd0:	7f23      	ldrb	r3, [r4, #28]
   13cd2:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   13cd4:	f8a0 6001 	strh.w	r6, [r0, #1]
   13cd8:	7f62      	ldrb	r2, [r4, #29]
   13cda:	2a00      	cmp	r2, #0
   13cdc:	fa92 f3a2 	rbit	r3, r2
   13ce0:	fab3 f383 	clz	r3, r3
   13ce4:	bf08      	it	eq
   13ce6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13cea:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   13cec:	70c3      	strb	r3, [r0, #3]
   13cee:	7fa2      	ldrb	r2, [r4, #30]
   13cf0:	fa92 f3a2 	rbit	r3, r2
   13cf4:	2a00      	cmp	r2, #0
   13cf6:	fab3 f383 	clz	r3, r3
   13cfa:	bf08      	it	eq
   13cfc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   13d00:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   13d02:	7103      	strb	r3, [r0, #4]
   13d04:	e5e6      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13d06:	4b78      	ldr	r3, [pc, #480]	; (13ee8 <hci_evt_encode+0x6bc>)
   13d08:	685b      	ldr	r3, [r3, #4]
   13d0a:	0098      	lsls	r0, r3, #2
   13d0c:	f57f ade2 	bpl.w	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   13d10:	4b76      	ldr	r3, [pc, #472]	; (13eec <hci_evt_encode+0x6c0>)
   13d12:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13d14:	06d9      	lsls	r1, r3, #27
   13d16:	f57f addd 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13d1a:	3508      	adds	r5, #8
   13d1c:	2102      	movs	r1, #2
   13d1e:	4628      	mov	r0, r5
   13d20:	f018 fed3 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13d24:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13d26:	230d      	movs	r3, #13
	hdr->evt = evt;
   13d28:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13d2a:	7043      	strb	r3, [r0, #1]
   13d2c:	2101      	movs	r1, #1
   13d2e:	4628      	mov	r0, r5
   13d30:	f018 fecb 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13d34:	2305      	movs	r3, #5
   13d36:	7003      	strb	r3, [r0, #0]
   13d38:	210c      	movs	r1, #12
   13d3a:	4628      	mov	r0, r5
   13d3c:	f018 fec5 	bl	2caca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13d40:	4603      	mov	r3, r0
   13d42:	f823 6b02 	strh.w	r6, [r3], #2
   13d46:	6a21      	ldr	r1, [r4, #32]
   13d48:	6a62      	ldr	r2, [r4, #36]	; 0x24
   13d4a:	f8c0 1002 	str.w	r1, [r0, #2]
   13d4e:	605a      	str	r2, [r3, #4]
   13d50:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   13d52:	8143      	strh	r3, [r0, #10]
   13d54:	e5be      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   13d56:	4b64      	ldr	r3, [pc, #400]	; (13ee8 <hci_evt_encode+0x6bc>)
   13d58:	681b      	ldr	r3, [r3, #0]
   13d5a:	061a      	lsls	r2, r3, #24
   13d5c:	f04f 0400 	mov.w	r4, #0
   13d60:	f57f adb8 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13d64:	3508      	adds	r5, #8
   13d66:	2102      	movs	r1, #2
   13d68:	4628      	mov	r0, r5
   13d6a:	f018 feae 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13d6e:	2308      	movs	r3, #8
	hdr->len = len;
   13d70:	2104      	movs	r1, #4
	hdr->evt = evt;
   13d72:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13d74:	7041      	strb	r1, [r0, #1]
   13d76:	4628      	mov	r0, r5
   13d78:	f018 fea7 	bl	2caca <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   13d7c:	2301      	movs	r3, #1
	ep->status = err;
   13d7e:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13d80:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   13d84:	70c3      	strb	r3, [r0, #3]
   13d86:	e5a5      	b.n	138d4 <hci_evt_encode+0xa8>
		le_unknown_rsp(pdu_data, handle, buf);
   13d88:	f890 3020 	ldrb.w	r3, [r0, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   13d8c:	2b0e      	cmp	r3, #14
   13d8e:	f000 8150 	beq.w	14032 <hci_evt_encode+0x806>
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13d92:	495c      	ldr	r1, [pc, #368]	; (13f04 <hci_evt_encode+0x6d8>)
	switch (pdu_data->llctrl.unknown_rsp.type) {
   13d94:	e9c7 1308 	strd	r1, r3, [r7, #32]
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13d98:	2203      	movs	r2, #3
   13d9a:	60fa      	str	r2, [r7, #12]
   13d9c:	61fa      	str	r2, [r7, #28]
   13d9e:	4855      	ldr	r0, [pc, #340]	; (13ef4 <hci_evt_encode+0x6c8>)
   13da0:	2300      	movs	r3, #0
   13da2:	f107 021c 	add.w	r2, r7, #28
   13da6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
   13daa:	f014 fe81 	bl	28ab0 <z_impl_z_log_msg2_static_create>
}
   13dae:	e591      	b.n	138d4 <hci_evt_encode+0xa8>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   13db0:	460b      	mov	r3, r1
   13db2:	4632      	mov	r2, r6
   13db4:	4641      	mov	r1, r8
   13db6:	2000      	movs	r0, #0
   13db8:	f7fe fde8 	bl	1298c <le_remote_feat_complete>
		break;
   13dbc:	e58a      	b.n	138d4 <hci_evt_encode+0xa8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13dbe:	4b4a      	ldr	r3, [pc, #296]	; (13ee8 <hci_evt_encode+0x6bc>)
   13dc0:	685b      	ldr	r3, [r3, #4]
   13dc2:	0098      	lsls	r0, r3, #2
   13dc4:	d563      	bpl.n	13e8e <hci_evt_encode+0x662>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   13dc6:	4b49      	ldr	r3, [pc, #292]	; (13eec <hci_evt_encode+0x6c0>)
   13dc8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13dca:	0699      	lsls	r1, r3, #26
   13dcc:	d55f      	bpl.n	13e8e <hci_evt_encode+0x662>
   13dce:	3508      	adds	r5, #8
   13dd0:	2102      	movs	r1, #2
   13dd2:	4628      	mov	r0, r5
   13dd4:	f018 fe79 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13dd8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13dda:	230b      	movs	r3, #11
	hdr->evt = evt;
   13ddc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13dde:	7043      	strb	r3, [r0, #1]
   13de0:	2101      	movs	r1, #1
   13de2:	4628      	mov	r0, r5
   13de4:	f018 fe71 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13de8:	2306      	movs	r3, #6
   13dea:	7003      	strb	r3, [r0, #0]
   13dec:	210a      	movs	r1, #10
   13dee:	4628      	mov	r0, r5
   13df0:	f018 fe6b 	bl	2caca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13df4:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   13df6:	8c23      	ldrh	r3, [r4, #32]
   13df8:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   13dfa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13dfc:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   13dfe:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13e00:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   13e02:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13e04:	8103      	strh	r3, [r0, #8]
   13e06:	e565      	b.n	138d4 <hci_evt_encode+0xa8>
	switch (pdu->llctrl.reject_ext_ind.reject_opcode) {
   13e08:	f890 2020 	ldrb.w	r2, [r0, #32]
		BT_WARN("reject opcode: 0x%02x", pdu->llctrl.reject_ext_ind.reject_opcode);
   13e0c:	493e      	ldr	r1, [pc, #248]	; (13f08 <hci_evt_encode+0x6dc>)
   13e0e:	2303      	movs	r3, #3
   13e10:	e9c7 1208 	strd	r1, r2, [r7, #32]
   13e14:	60fb      	str	r3, [r7, #12]
   13e16:	61fb      	str	r3, [r7, #28]
   13e18:	e7c1      	b.n	13d9e <hci_evt_encode+0x572>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   13e1a:	4b33      	ldr	r3, [pc, #204]	; (13ee8 <hci_evt_encode+0x6bc>)
   13e1c:	681b      	ldr	r3, [r3, #0]
   13e1e:	061b      	lsls	r3, r3, #24
   13e20:	f57f ad58 	bpl.w	138d4 <hci_evt_encode+0xa8>
   13e24:	3508      	adds	r5, #8
   13e26:	2102      	movs	r1, #2
   13e28:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   13e2a:	f894 4020 	ldrb.w	r4, [r4, #32]
   13e2e:	f018 fe4c 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13e32:	2308      	movs	r3, #8
	hdr->len = len;
   13e34:	2104      	movs	r1, #4
	hdr->evt = evt;
   13e36:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13e38:	7041      	strb	r1, [r0, #1]
   13e3a:	4628      	mov	r0, r5
   13e3c:	f018 fe45 	bl	2caca <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   13e40:	fab4 f384 	clz	r3, r4
   13e44:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   13e46:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13e48:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   13e4c:	70c3      	strb	r3, [r0, #3]
   13e4e:	e541      	b.n	138d4 <hci_evt_encode+0xa8>
		ll_rl_crpa_set(cc->peer_addr_type,
   13e50:	7fa0      	ldrb	r0, [r4, #30]
   13e52:	f104 0325 	add.w	r3, r4, #37	; 0x25
   13e56:	22ff      	movs	r2, #255	; 0xff
   13e58:	f104 011f 	add.w	r1, r4, #31
   13e5c:	f008 fa3a 	bl	1c2d4 <ll_rl_crpa_set>
   13e60:	e5c9      	b.n	139f6 <hci_evt_encode+0x1ca>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cc));
   13e62:	4a25      	ldr	r2, [pc, #148]	; (13ef8 <hci_evt_encode+0x6cc>)
   13e64:	4929      	ldr	r1, [pc, #164]	; (13f0c <hci_evt_encode+0x6e0>)
   13e66:	4826      	ldr	r0, [pc, #152]	; (13f00 <hci_evt_encode+0x6d4>)
   13e68:	f641 23f5 	movw	r3, #6901	; 0x1af5
   13e6c:	f014 f89c 	bl	27fa8 <printk>
   13e70:	4040      	eors	r0, r0
   13e72:	f380 8811 	msr	BASEPRI, r0
   13e76:	f04f 0003 	mov.w	r0, #3
   13e7a:	df02      	svc	2
   13e7c:	e5b5      	b.n	139ea <hci_evt_encode+0x1be>
		ll_rl_crpa_set(0x00, NULL, rl_idx, &adv->adv_ind.addr[0]);
   13e7e:	2100      	movs	r1, #0
   13e80:	f104 031e 	add.w	r3, r4, #30
   13e84:	464a      	mov	r2, r9
   13e86:	4608      	mov	r0, r1
   13e88:	f008 fa24 	bl	1c2d4 <ll_rl_crpa_set>
   13e8c:	e53a      	b.n	13904 <hci_evt_encode+0xd8>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   13e8e:	2300      	movs	r3, #0
   13e90:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13e94:	9300      	str	r3, [sp, #0]
   13e96:	221a      	movs	r2, #26
   13e98:	2102      	movs	r1, #2
   13e9a:	4630      	mov	r0, r6
   13e9c:	f003 f93e 	bl	1711c <ll_conn_update>
		return;
   13ea0:	e518      	b.n	138d4 <hci_evt_encode+0xa8>
   13ea2:	2102      	movs	r1, #2
   13ea4:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13ea6:	f1ba 0f00 	cmp.w	sl, #0
   13eaa:	f040 80c9 	bne.w	14040 <hci_evt_encode+0x814>
   13eae:	f018 fe0c 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13eb2:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   13eb4:	2313      	movs	r3, #19
	hdr->evt = evt;
   13eb6:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13eb8:	7043      	strb	r3, [r0, #1]
   13eba:	2101      	movs	r1, #1
   13ebc:	4628      	mov	r0, r5
   13ebe:	f018 fe04 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   13ec2:	2301      	movs	r3, #1
   13ec4:	7003      	strb	r3, [r0, #0]
   13ec6:	2112      	movs	r1, #18
   13ec8:	4628      	mov	r0, r5
   13eca:	f018 fdfe 	bl	2caca <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   13ece:	f8c0 a000 	str.w	sl, [r0]
   13ed2:	f8c0 a004 	str.w	sl, [r0, #4]
   13ed6:	f8c0 a008 	str.w	sl, [r0, #8]
   13eda:	f8c0 a00c 	str.w	sl, [r0, #12]
   13ede:	f8a0 a010 	strh.w	sl, [r0, #16]
		lecc->status = status;
   13ee2:	f880 8000 	strb.w	r8, [r0]
		return;
   13ee6:	e4f5      	b.n	138d4 <hci_evt_encode+0xa8>
   13ee8:	20000158 	.word	0x20000158
   13eec:	20000160 	.word	0x20000160
   13ef0:	00030180 	.word	0x00030180
   13ef4:	0002f41c 	.word	0x0002f41c
   13ef8:	000300a4 	.word	0x000300a4
   13efc:	0002ff74 	.word	0x0002ff74
   13f00:	0002fedc 	.word	0x0002fedc
   13f04:	000301ac 	.word	0x000301ac
   13f08:	000301bc 	.word	0x000301bc
   13f0c:	00030108 	.word	0x00030108
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f10:	2b00      	cmp	r3, #0
   13f12:	f43f acdf 	beq.w	138d4 <hci_evt_encode+0xa8>
	    !(le_event_mask & BT_EVT_MASK_LE_DIRECT_ADV_REPORT)) {
   13f16:	4b6a      	ldr	r3, [pc, #424]	; (140c0 <hci_evt_encode+0x894>)
   13f18:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13f1a:	055b      	lsls	r3, r3, #21
   13f1c:	f57f acda 	bpl.w	138d4 <hci_evt_encode+0xa8>
	LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
   13f20:	7f23      	ldrb	r3, [r4, #28]
   13f22:	f003 030f 	and.w	r3, r3, #15
   13f26:	2b01      	cmp	r3, #1
   13f28:	d00c      	beq.n	13f44 <hci_evt_encode+0x718>
   13f2a:	4a66      	ldr	r2, [pc, #408]	; (140c4 <hci_evt_encode+0x898>)
   13f2c:	4966      	ldr	r1, [pc, #408]	; (140c8 <hci_evt_encode+0x89c>)
   13f2e:	4867      	ldr	r0, [pc, #412]	; (140cc <hci_evt_encode+0x8a0>)
   13f30:	f241 435a 	movw	r3, #5210	; 0x145a
   13f34:	f014 f838 	bl	27fa8 <printk>
   13f38:	4040      	eors	r0, r0
   13f3a:	f380 8811 	msr	BASEPRI, r0
   13f3e:	f04f 0003 	mov.w	r0, #3
   13f42:	df02      	svc	2
	if (dup_count >= 0) {
   13f44:	4b62      	ldr	r3, [pc, #392]	; (140d0 <hci_evt_encode+0x8a4>)
   13f46:	681b      	ldr	r3, [r3, #0]
   13f48:	2b00      	cmp	r3, #0
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   13f4a:	f104 061e 	add.w	r6, r4, #30
	if (dup_count >= 0) {
   13f4e:	db0a      	blt.n	13f66 <hci_evt_encode+0x73a>
	    dup_found(adv->type, adv->tx_addr, adv->adv_ind.addr, 0, NULL, 0)) {
   13f50:	7f20      	ldrb	r0, [r4, #28]
   13f52:	4632      	mov	r2, r6
   13f54:	f3c0 1180 	ubfx	r1, r0, #6, #1
   13f58:	f000 000f 	and.w	r0, r0, #15
   13f5c:	f7fe fca8 	bl	128b0 <dup_found.part.0>
	if (dup_scan &&
   13f60:	2800      	cmp	r0, #0
   13f62:	f47f acb7 	bne.w	138d4 <hci_evt_encode+0xa8>
   13f66:	3508      	adds	r5, #8
   13f68:	2102      	movs	r1, #2
   13f6a:	4628      	mov	r0, r5
   13f6c:	f018 fdad 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13f70:	233e      	movs	r3, #62	; 0x3e
   13f72:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13f74:	2312      	movs	r3, #18
   13f76:	7043      	strb	r3, [r0, #1]
   13f78:	2101      	movs	r1, #1
   13f7a:	4628      	mov	r0, r5
   13f7c:	f018 fda5 	bl	2caca <net_buf_simple_add>
   13f80:	4603      	mov	r3, r0
	me->subevent = subevt;
   13f82:	220b      	movs	r2, #11
   13f84:	701a      	strb	r2, [r3, #0]
   13f86:	4628      	mov	r0, r5
   13f88:	2111      	movs	r1, #17
   13f8a:	f018 fd9e 	bl	2caca <net_buf_simple_add>
	drp->num_reports = 1U;
   13f8e:	2301      	movs	r3, #1
   13f90:	7003      	strb	r3, [r0, #0]
	dir_info->evt_type = BT_HCI_ADV_DIRECT_IND;
   13f92:	7043      	strb	r3, [r0, #1]
   13f94:	4605      	mov	r5, r0
	if (rl_idx < ll_rl_size_get()) {
   13f96:	f008 f8ab 	bl	1c0f0 <ll_rl_size_get>
   13f9a:	4581      	cmp	r9, r0
   13f9c:	f0c0 8087 	bcc.w	140ae <hci_evt_encode+0x882>
		dir_info->addr.type = adv->tx_addr;
   13fa0:	7f23      	ldrb	r3, [r4, #28]
   13fa2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   13fa6:	70ab      	strb	r3, [r5, #2]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13fa8:	f8d4 301e 	ldr.w	r3, [r4, #30]
   13fac:	f8c5 3003 	str.w	r3, [r5, #3]
   13fb0:	88b3      	ldrh	r3, [r6, #4]
   13fb2:	f8a5 3007 	strh.w	r3, [r5, #7]
	dir_info->dir_addr.type = adv->rx_addr;
   13fb6:	7f23      	ldrb	r3, [r4, #28]
   13fb8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   13fbc:	726b      	strb	r3, [r5, #9]
   13fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fc0:	f8c5 300a 	str.w	r3, [r5, #10]
   13fc4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   13fc6:	81eb      	strh	r3, [r5, #14]
	dir_info->rssi = rssi;
   13fc8:	f885 8010 	strb.w	r8, [r5, #16]
   13fcc:	e482      	b.n	138d4 <hci_evt_encode+0xa8>
   13fce:	2102      	movs	r1, #2
   13fd0:	4628      	mov	r0, r5
   13fd2:	f018 fd7a 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   13fd6:	233e      	movs	r3, #62	; 0x3e
   13fd8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13fda:	2313      	movs	r3, #19
   13fdc:	7043      	strb	r3, [r0, #1]
   13fde:	2101      	movs	r1, #1
   13fe0:	4628      	mov	r0, r5
   13fe2:	f018 fd72 	bl	2caca <net_buf_simple_add>
   13fe6:	4603      	mov	r3, r0
	me->subevent = subevt;
   13fe8:	2201      	movs	r2, #1
   13fea:	701a      	strb	r2, [r3, #0]
   13fec:	2112      	movs	r1, #18
   13fee:	4628      	mov	r0, r5
   13ff0:	f018 fd6b 	bl	2caca <net_buf_simple_add>
	lecc->status = 0x00;
   13ff4:	f880 8000 	strb.w	r8, [r0]
	lecc->handle = sys_cpu_to_le16(handle);
   13ff8:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   13ffc:	7f63      	ldrb	r3, [r4, #29]
   13ffe:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   14000:	7fa3      	ldrb	r3, [r4, #30]
   14002:	f003 0301 	and.w	r3, r3, #1
   14006:	7103      	strb	r3, [r0, #4]
   14008:	f8d4 301f 	ldr.w	r3, [r4, #31]
   1400c:	f8c0 3005 	str.w	r3, [r0, #5]
   14010:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   14014:	f8a0 3009 	strh.w	r3, [r0, #9]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   14018:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1401a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1401c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1401e:	f8a0 200d 	strh.w	r2, [r0, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   14022:	f8a0 100b 	strh.w	r1, [r0, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   14026:	f8a0 300f 	strh.w	r3, [r0, #15]
	lecc->clock_accuracy = cc->sca;
   1402a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1402e:	7443      	strb	r3, [r0, #17]
   14030:	e450      	b.n	138d4 <hci_evt_encode+0xa8>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   14032:	460b      	mov	r3, r1
   14034:	4632      	mov	r2, r6
   14036:	2100      	movs	r1, #0
   14038:	201a      	movs	r0, #26
   1403a:	f7fe fca7 	bl	1298c <le_remote_feat_complete>
		break;
   1403e:	e449      	b.n	138d4 <hci_evt_encode+0xa8>
   14040:	f018 fd43 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   14044:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   14046:	231f      	movs	r3, #31
	hdr->evt = evt;
   14048:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1404a:	7043      	strb	r3, [r0, #1]
   1404c:	2101      	movs	r1, #1
   1404e:	4628      	mov	r0, r5
   14050:	f018 fd3b 	bl	2caca <net_buf_simple_add>
	me->subevent = subevt;
   14054:	230a      	movs	r3, #10
   14056:	7003      	strb	r3, [r0, #0]
   14058:	211e      	movs	r1, #30
   1405a:	4628      	mov	r0, r5
   1405c:	f018 fd35 	bl	2caca <net_buf_simple_add>
   14060:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   14062:	221e      	movs	r2, #30
   14064:	2100      	movs	r1, #0
   14066:	f01a fa9f 	bl	2e5a8 <memset>
			leecc->status = status;
   1406a:	f884 8000 	strb.w	r8, [r4]
			return;
   1406e:	e431      	b.n	138d4 <hci_evt_encode+0xa8>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   14070:	4a14      	ldr	r2, [pc, #80]	; (140c4 <hci_evt_encode+0x898>)
   14072:	4918      	ldr	r1, [pc, #96]	; (140d4 <hci_evt_encode+0x8a8>)
   14074:	4815      	ldr	r0, [pc, #84]	; (140cc <hci_evt_encode+0x8a0>)
   14076:	f641 337a 	movw	r3, #7034	; 0x1b7a
   1407a:	f013 ff95 	bl	27fa8 <printk>
   1407e:	4040      	eors	r0, r0
   14080:	f380 8811 	msr	BASEPRI, r0
   14084:	f04f 0003 	mov.w	r0, #3
   14088:	df02      	svc	2
   1408a:	e539      	b.n	13b00 <hci_evt_encode+0x2d4>
   1408c:	230c      	movs	r3, #12
   1408e:	2600      	movs	r6, #0
   14090:	603b      	str	r3, [r7, #0]
   14092:	f04f 0a0b 	mov.w	sl, #11
		data_len = 0U;
   14096:	4633      	mov	r3, r6
   14098:	e463      	b.n	13962 <hci_evt_encode+0x136>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
   1409a:	1cea      	adds	r2, r5, #3
   1409c:	4648      	mov	r0, r9
   1409e:	1ca9      	adds	r1, r5, #2
   140a0:	f007 ffde 	bl	1c060 <ll_rl_id_addr_get>
		adv_info->addr.type += 2U;
   140a4:	78aa      	ldrb	r2, [r5, #2]
   140a6:	687b      	ldr	r3, [r7, #4]
   140a8:	3202      	adds	r2, #2
   140aa:	70aa      	strb	r2, [r5, #2]
   140ac:	e48d      	b.n	139ca <hci_evt_encode+0x19e>
		ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
   140ae:	1cea      	adds	r2, r5, #3
   140b0:	1ca9      	adds	r1, r5, #2
   140b2:	4648      	mov	r0, r9
   140b4:	f007 ffd4 	bl	1c060 <ll_rl_id_addr_get>
		dir_info->addr.type += 2U;
   140b8:	78ab      	ldrb	r3, [r5, #2]
   140ba:	3302      	adds	r3, #2
   140bc:	70ab      	strb	r3, [r5, #2]
   140be:	e77a      	b.n	13fb6 <hci_evt_encode+0x78a>
   140c0:	20000160 	.word	0x20000160
   140c4:	000300a4 	.word	0x000300a4
   140c8:	000300e0 	.word	0x000300e0
   140cc:	0002fedc 	.word	0x0002fedc
   140d0:	20002570 	.word	0x20002570
   140d4:	00030144 	.word	0x00030144

000140d8 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   140d8:	b570      	push	{r4, r5, r6, lr}
   140da:	f100 0408 	add.w	r4, r0, #8
   140de:	460e      	mov	r6, r1
   140e0:	4620      	mov	r0, r4
   140e2:	2102      	movs	r1, #2
   140e4:	4615      	mov	r5, r2
   140e6:	f018 fcf0 	bl	2caca <net_buf_simple_add>
	hdr->evt = evt;
   140ea:	2313      	movs	r3, #19
	hdr->len = len;
   140ec:	2105      	movs	r1, #5
	hdr->evt = evt;
   140ee:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   140f0:	7041      	strb	r1, [r0, #1]
   140f2:	4620      	mov	r0, r4
   140f4:	f018 fce9 	bl	2caca <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   140f8:	2301      	movs	r3, #1
   140fa:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   140fc:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   14100:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   14104:	bd70      	pop	{r4, r5, r6, pc}
   14106:	bf00      	nop

00014108 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   14108:	7903      	ldrb	r3, [r0, #4]
   1410a:	2b03      	cmp	r3, #3
   1410c:	d008      	beq.n	14120 <hci_get_class+0x18>

		switch (node_rx->hdr.type) {
   1410e:	3b05      	subs	r3, #5
   14110:	b2db      	uxtb	r3, r3
   14112:	2b17      	cmp	r3, #23
   14114:	d901      	bls.n	1411a <hci_get_class+0x12>
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   14116:	2000      	movs	r0, #0
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   14118:	4770      	bx	lr
   1411a:	4a05      	ldr	r2, [pc, #20]	; (14130 <hci_get_class+0x28>)
   1411c:	5cd0      	ldrb	r0, [r2, r3]
   1411e:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   14120:	7f03      	ldrb	r3, [r0, #28]
   14122:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   14126:	2b03      	cmp	r3, #3
   14128:	bf0c      	ite	eq
   1412a:	2004      	moveq	r0, #4
   1412c:	2005      	movne	r0, #5
   1412e:	4770      	bx	lr
   14130:	000301e0 	.word	0x000301e0

00014134 <hci_init>:
	event_mask = DEFAULT_EVENT_MASK;
   14134:	480d      	ldr	r0, [pc, #52]	; (1416c <hci_init+0x38>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   14136:	4a0e      	ldr	r2, [pc, #56]	; (14170 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14138:	490e      	ldr	r1, [pc, #56]	; (14174 <hci_init+0x40>)
	dup_count = DUP_FILTER_DISABLED;
   1413a:	4b0f      	ldr	r3, [pc, #60]	; (14178 <hci_init+0x44>)

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1413c:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1413e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   14142:	f641 75ff 	movw	r5, #8191	; 0x1fff
   14146:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1414a:	2400      	movs	r4, #0
   1414c:	2500      	movs	r5, #0
   1414e:	e9c2 4500 	strd	r4, r5, [r2]
	conn_count = 0U;
   14152:	4a0a      	ldr	r2, [pc, #40]	; (1417c <hci_init+0x48>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   14154:	241f      	movs	r4, #31
   14156:	2500      	movs	r5, #0
   14158:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1415c:	2100      	movs	r1, #0
   1415e:	6011      	str	r1, [r2, #0]
	dup_count = DUP_FILTER_DISABLED;
   14160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   14164:	bc30      	pop	{r4, r5}
	dup_count = DUP_FILTER_DISABLED;
   14166:	601a      	str	r2, [r3, #0]
}
   14168:	4770      	bx	lr
   1416a:	bf00      	nop
   1416c:	20000158 	.word	0x20000158
   14170:	20001c98 	.word	0x20001c98
   14174:	20000160 	.word	0x20000160
   14178:	20002570 	.word	0x20002570
   1417c:	2000256c 	.word	0x2000256c

00014180 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   14180:	f009 b940 	b.w	1d404 <lll_csrand_get>

00014184 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   14184:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   14186:	2300      	movs	r3, #0
   14188:	f00b fca0 	bl	1facc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1418c:	2000      	movs	r0, #0
   1418e:	bd08      	pop	{r3, pc}

00014190 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   14190:	4801      	ldr	r0, [pc, #4]	; (14198 <ll_feat_get+0x8>)
   14192:	2100      	movs	r1, #0
   14194:	4770      	bx	lr
   14196:	bf00      	nop
   14198:	000141ff 	.word	0x000141ff

0001419c <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1419c:	b510      	push	{r4, lr}
   1419e:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   141a0:	f009 f966 	bl	1d470 <lll_reset>
	LL_ASSERT(!err);
   141a4:	b970      	cbnz	r0, 141c4 <perform_lll_reset+0x28>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   141a6:	f009 fd75 	bl	1dc94 <lll_adv_reset>
	LL_ASSERT(!err);
   141aa:	b9e0      	cbnz	r0, 141e6 <perform_lll_reset+0x4a>
#endif /* CONFIG_BT_BROADCASTER */

#if defined(CONFIG_BT_OBSERVER)
	/* Reset scan state */
	err = lll_scan_reset();
   141ac:	f00a fcee 	bl	1eb8c <lll_scan_reset>
	LL_ASSERT(!err);
   141b0:	bb50      	cbnz	r0, 14208 <perform_lll_reset+0x6c>
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   141b2:	f00a fe23 	bl	1edfc <lll_conn_reset>
	LL_ASSERT(!err);
   141b6:	2800      	cmp	r0, #0
   141b8:	d137      	bne.n	1422a <perform_lll_reset+0x8e>
	z_impl_k_sem_give(sem);
   141ba:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   141bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   141c0:	f010 bd7e 	b.w	24cc0 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   141c4:	4a22      	ldr	r2, [pc, #136]	; (14250 <perform_lll_reset+0xb4>)
   141c6:	4923      	ldr	r1, [pc, #140]	; (14254 <perform_lll_reset+0xb8>)
   141c8:	4823      	ldr	r0, [pc, #140]	; (14258 <perform_lll_reset+0xbc>)
   141ca:	f640 0324 	movw	r3, #2084	; 0x824
   141ce:	f013 feeb 	bl	27fa8 <printk>
   141d2:	4040      	eors	r0, r0
   141d4:	f380 8811 	msr	BASEPRI, r0
   141d8:	f04f 0003 	mov.w	r0, #3
   141dc:	df02      	svc	2
	err = lll_adv_reset();
   141de:	f009 fd59 	bl	1dc94 <lll_adv_reset>
	LL_ASSERT(!err);
   141e2:	2800      	cmp	r0, #0
   141e4:	d0e2      	beq.n	141ac <perform_lll_reset+0x10>
   141e6:	4a1a      	ldr	r2, [pc, #104]	; (14250 <perform_lll_reset+0xb4>)
   141e8:	491a      	ldr	r1, [pc, #104]	; (14254 <perform_lll_reset+0xb8>)
   141ea:	481b      	ldr	r0, [pc, #108]	; (14258 <perform_lll_reset+0xbc>)
   141ec:	f640 0329 	movw	r3, #2089	; 0x829
   141f0:	f013 feda 	bl	27fa8 <printk>
   141f4:	4040      	eors	r0, r0
   141f6:	f380 8811 	msr	BASEPRI, r0
   141fa:	f04f 0003 	mov.w	r0, #3
   141fe:	df02      	svc	2
	err = lll_scan_reset();
   14200:	f00a fcc4 	bl	1eb8c <lll_scan_reset>
	LL_ASSERT(!err);
   14204:	2800      	cmp	r0, #0
   14206:	d0d4      	beq.n	141b2 <perform_lll_reset+0x16>
   14208:	4a11      	ldr	r2, [pc, #68]	; (14250 <perform_lll_reset+0xb4>)
   1420a:	4912      	ldr	r1, [pc, #72]	; (14254 <perform_lll_reset+0xb8>)
   1420c:	4812      	ldr	r0, [pc, #72]	; (14258 <perform_lll_reset+0xbc>)
   1420e:	f640 032f 	movw	r3, #2095	; 0x82f
   14212:	f013 fec9 	bl	27fa8 <printk>
   14216:	4040      	eors	r0, r0
   14218:	f380 8811 	msr	BASEPRI, r0
   1421c:	f04f 0003 	mov.w	r0, #3
   14220:	df02      	svc	2
	err = lll_conn_reset();
   14222:	f00a fdeb 	bl	1edfc <lll_conn_reset>
	LL_ASSERT(!err);
   14226:	2800      	cmp	r0, #0
   14228:	d0c7      	beq.n	141ba <perform_lll_reset+0x1e>
   1422a:	4a09      	ldr	r2, [pc, #36]	; (14250 <perform_lll_reset+0xb4>)
   1422c:	4909      	ldr	r1, [pc, #36]	; (14254 <perform_lll_reset+0xb8>)
   1422e:	480a      	ldr	r0, [pc, #40]	; (14258 <perform_lll_reset+0xbc>)
   14230:	f640 0335 	movw	r3, #2101	; 0x835
   14234:	f013 feb8 	bl	27fa8 <printk>
   14238:	4040      	eors	r0, r0
   1423a:	f380 8811 	msr	BASEPRI, r0
   1423e:	f04f 0003 	mov.w	r0, #3
   14242:	df02      	svc	2
   14244:	4620      	mov	r0, r4
}
   14246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1424a:	f010 bd39 	b.w	24cc0 <z_impl_k_sem_give>
   1424e:	bf00      	nop
   14250:	00030218 	.word	0x00030218
   14254:	00030254 	.word	0x00030254
   14258:	0002fedc 	.word	0x0002fedc

0001425c <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1425c:	6008      	str	r0, [r1, #0]
   1425e:	4801      	ldr	r0, [pc, #4]	; (14264 <ull_ticker_status_give+0x8>)
   14260:	f010 bd2e 	b.w	24cc0 <z_impl_k_sem_give>
   14264:	20002930 	.word	0x20002930

00014268 <disabled_cb>:
   14268:	f010 bd2a 	b.w	24cc0 <z_impl_k_sem_give>

0001426c <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1426c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   14270:	4d2c      	ldr	r5, [pc, #176]	; (14324 <tx_cmplt_get+0xb8>)
{
   14272:	460c      	mov	r4, r1
   14274:	4691      	mov	r9, r2
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   14276:	7869      	ldrb	r1, [r5, #1]
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   14278:	7822      	ldrb	r2, [r4, #0]
   1427a:	782b      	ldrb	r3, [r5, #0]
   1427c:	4291      	cmp	r1, r2
   1427e:	bf9c      	itt	ls
   14280:	78aa      	ldrbls	r2, [r5, #2]
		*idx = first;
   14282:	7022      	strbls	r2, [r4, #0]
	}

	if (*idx == last) {
   14284:	4591      	cmp	r9, r2
{
   14286:	4682      	mov	sl, r0
   14288:	d042      	beq.n	14310 <tx_cmplt_get+0xa4>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1428a:	fb12 f303 	smulbb	r3, r2, r3
	i = *idx + 1;
   1428e:	3201      	adds	r2, #1
   14290:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   14292:	4f25      	ldr	r7, [pc, #148]	; (14328 <tx_cmplt_get+0xbc>)
		i = 0U;
   14294:	4291      	cmp	r1, r2
   14296:	bf08      	it	eq
   14298:	2200      	moveq	r2, #0

	*idx = i;
   1429a:	7022      	strb	r2, [r4, #0]
				    first);
	if (!tx) {
		return 0;
	}

	*handle = tx->handle;
   1429c:	5afa      	ldrh	r2, [r7, r3]
   1429e:	8002      	strh	r2, [r0, #0]
	cmplt = 0U;
   142a0:	2600      	movs	r6, #0
	p = (void *)(fifo + (*idx) * size);
   142a2:	443b      	add	r3, r7
   142a4:	f04f 0b01 	mov.w	fp, #1
   142a8:	f04f 0802 	mov.w	r8, #2
   142ac:	e021      	b.n	142f2 <tx_cmplt_get+0x86>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   142ae:	b362      	cbz	r2, 1430a <tx_cmplt_get+0x9e>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   142b0:	7902      	ldrb	r2, [r0, #4]
   142b2:	f002 0203 	and.w	r2, r2, #3
		    (((uint32_t)node_tx & ~3) &&
   142b6:	3a01      	subs	r2, #1
   142b8:	2a01      	cmp	r2, #1
   142ba:	d92d      	bls.n	14318 <tx_cmplt_get+0xac>
   142bc:	f8c3 8004 	str.w	r8, [r3, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   142c0:	f002 feda 	bl	17078 <ll_tx_mem_release>
	if (*idx >= count) {
   142c4:	7823      	ldrb	r3, [r4, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   142c6:	7869      	ldrb	r1, [r5, #1]
   142c8:	7828      	ldrb	r0, [r5, #0]
   142ca:	4299      	cmp	r1, r3
   142cc:	bf9c      	itt	ls
   142ce:	78ab      	ldrbls	r3, [r5, #2]
		*idx = first;
   142d0:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   142d2:	454b      	cmp	r3, r9
   142d4:	d01d      	beq.n	14312 <tx_cmplt_get+0xa6>
	i = *idx + 1;
   142d6:	1c5a      	adds	r2, r3, #1
   142d8:	b2d2      	uxtb	r2, r2
		i = 0U;
   142da:	4291      	cmp	r1, r2
   142dc:	bf08      	it	eq
   142de:	2200      	moveq	r2, #0
	p = (void *)(fifo + (*idx) * size);
   142e0:	fb13 f300 	smulbb	r3, r3, r0
	*idx = i;
   142e4:	7022      	strb	r2, [r4, #0]
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   142e6:	5af9      	ldrh	r1, [r7, r3]
   142e8:	f8ba 2000 	ldrh.w	r2, [sl]
   142ec:	4291      	cmp	r1, r2
	p = (void *)(fifo + (*idx) * size);
   142ee:	443b      	add	r3, r7
   142f0:	d10f      	bne.n	14312 <tx_cmplt_get+0xa6>
		node_tx = tx->node;
   142f2:	6858      	ldr	r0, [r3, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   142f4:	2801      	cmp	r0, #1
		    (((uint32_t)node_tx & ~3) &&
   142f6:	f020 0203 	bic.w	r2, r0, #3
		if (!node_tx || (node_tx == (void *)1) ||
   142fa:	d8d8      	bhi.n	142ae <tx_cmplt_get+0x42>
			cmplt++;
   142fc:	3601      	adds	r6, #1
   142fe:	b2f6      	uxtb	r6, r6
   14300:	f8c3 b004 	str.w	fp, [r3, #4]
		if (((uint32_t)node_tx & ~3)) {
   14304:	2a00      	cmp	r2, #0
   14306:	d0dd      	beq.n	142c4 <tx_cmplt_get+0x58>
   14308:	e7da      	b.n	142c0 <tx_cmplt_get+0x54>
   1430a:	f8c3 8004 	str.w	r8, [r3, #4]
   1430e:	e7d9      	b.n	142c4 <tx_cmplt_get+0x58>
		return 0;
   14310:	2600      	movs	r6, #0

	return cmplt;
}
   14312:	4630      	mov	r0, r6
   14314:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   14318:	3601      	adds	r6, #1
   1431a:	f8c3 b004 	str.w	fp, [r3, #4]
   1431e:	b2f6      	uxtb	r6, r6
		if (((uint32_t)node_tx & ~3)) {
   14320:	e7ce      	b.n	142c0 <tx_cmplt_get+0x54>
   14322:	bf00      	nop
   14324:	200004ac 	.word	0x200004ac
   14328:	200004b0 	.word	0x200004b0

0001432c <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1432c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14330:	4e3c      	ldr	r6, [pc, #240]	; (14424 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   14332:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 14428 <ull_done+0xfc>
   14336:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1442c <ull_done+0x100>
{
   1433a:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1433c:	e9d6 0100 	ldrd	r0, r1, [r6]
   14340:	aa01      	add	r2, sp, #4
   14342:	f7fc fd49 	bl	10dd8 <memq_peek>
		if (link) {
   14346:	4604      	mov	r4, r0
   14348:	2800      	cmp	r0, #0
   1434a:	d03e      	beq.n	143ca <ull_done+0x9e>
			(void)memq_dequeue(memq_ull_done.tail,
   1434c:	6870      	ldr	r0, [r6, #4]
   1434e:	2200      	movs	r2, #0
   14350:	4631      	mov	r1, r6
   14352:	f7fc fd49 	bl	10de8 <memq_dequeue>
			rx_demux_event_done(link, done);
   14356:	9f01      	ldr	r7, [sp, #4]
	ull_hdr = done->param;
   14358:	69fd      	ldr	r5, [r7, #28]
	if (ull_hdr) {
   1435a:	b135      	cbz	r5, 1436a <ull_done+0x3e>
	return hdr->ref;
   1435c:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   1435e:	2b00      	cmp	r3, #0
   14360:	d052      	beq.n	14408 <ull_done+0xdc>
	return hdr->ref--;
   14362:	782b      	ldrb	r3, [r5, #0]
   14364:	3b01      	subs	r3, #1
   14366:	b2db      	uxtb	r3, r3
   14368:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1436a:	f897 3020 	ldrb.w	r3, [r7, #32]
   1436e:	b123      	cbz	r3, 1437a <ull_done+0x4e>
   14370:	2b01      	cmp	r3, #1
   14372:	d13b      	bne.n	143ec <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   14374:	4638      	mov	r0, r7
   14376:	f006 f9bd 	bl	1a6f4 <ull_conn_done>
		break;
	}

	/* Release done */
	done->extra.type = 0U;
	release = RXFIFO_RELEASE(done, link, done);
   1437a:	4a2d      	ldr	r2, [pc, #180]	; (14430 <ull_done+0x104>)
	last = last + 1;
   1437c:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   1437e:	f892 c001 	ldrb.w	ip, [r2, #1]
   14382:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   14384:	3301      	adds	r3, #1
	done->extra.type = 0U;
   14386:	2000      	movs	r0, #0
   14388:	b2db      	uxtb	r3, r3
		last = 0U;
   1438a:	459c      	cmp	ip, r3
   1438c:	bf08      	it	eq
   1438e:	4603      	moveq	r3, r0
	if (last == first) {
   14390:	4299      	cmp	r1, r3
   14392:	f887 0020 	strb.w	r0, [r7, #32]
   14396:	d01b      	beq.n	143d0 <ull_done+0xa4>
	release = RXFIFO_RELEASE(done, link, done);
   14398:	7811      	ldrb	r1, [r2, #0]

	if (!mfifo_enqueue_idx_get(n, f, *l, &idx)) {
		return NULL;
	}

	rx->link = link;
   1439a:	603c      	str	r4, [r7, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1439c:	78d0      	ldrb	r0, [r2, #3]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1439e:	fb00 2101 	mla	r1, r0, r1, r2
   143a2:	604f      	str	r7, [r1, #4]
	*last = idx; /* Commit: Update write index */
   143a4:	70d3      	strb	r3, [r2, #3]
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   143a6:	2d00      	cmp	r5, #0
   143a8:	d0c8      	beq.n	1433c <ull_done+0x10>
	return hdr->ref;
   143aa:	782b      	ldrb	r3, [r5, #0]
   143ac:	2b00      	cmp	r3, #0
   143ae:	d1c5      	bne.n	1433c <ull_done+0x10>
   143b0:	696b      	ldr	r3, [r5, #20]
   143b2:	2b00      	cmp	r3, #0
   143b4:	d0c2      	beq.n	1433c <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   143b6:	69a8      	ldr	r0, [r5, #24]
   143b8:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   143ba:	e9d6 0100 	ldrd	r0, r1, [r6]
   143be:	aa01      	add	r2, sp, #4
   143c0:	f7fc fd0a 	bl	10dd8 <memq_peek>
		if (link) {
   143c4:	4604      	mov	r4, r0
   143c6:	2800      	cmp	r0, #0
   143c8:	d1c0      	bne.n	1434c <ull_done+0x20>
}
   143ca:	b003      	add	sp, #12
   143cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   143d0:	4918      	ldr	r1, [pc, #96]	; (14434 <ull_done+0x108>)
   143d2:	4819      	ldr	r0, [pc, #100]	; (14438 <ull_done+0x10c>)
   143d4:	f44f 6327 	mov.w	r3, #2672	; 0xa70
   143d8:	4642      	mov	r2, r8
   143da:	f013 fde5 	bl	27fa8 <printk>
   143de:	4040      	eors	r0, r0
   143e0:	f380 8811 	msr	BASEPRI, r0
   143e4:	f04f 0003 	mov.w	r0, #3
   143e8:	df02      	svc	2
   143ea:	e7dc      	b.n	143a6 <ull_done+0x7a>
		LL_ASSERT(0);
   143ec:	4913      	ldr	r1, [pc, #76]	; (1443c <ull_done+0x110>)
   143ee:	4812      	ldr	r0, [pc, #72]	; (14438 <ull_done+0x10c>)
   143f0:	f640 2369 	movw	r3, #2665	; 0xa69
   143f4:	4642      	mov	r2, r8
   143f6:	f013 fdd7 	bl	27fa8 <printk>
   143fa:	4040      	eors	r0, r0
   143fc:	f380 8811 	msr	BASEPRI, r0
   14400:	f04f 0003 	mov.w	r0, #3
   14404:	df02      	svc	2
		break;
   14406:	e7b8      	b.n	1437a <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   14408:	480b      	ldr	r0, [pc, #44]	; (14438 <ull_done+0x10c>)
   1440a:	f640 2312 	movw	r3, #2578	; 0xa12
   1440e:	4642      	mov	r2, r8
   14410:	4649      	mov	r1, r9
   14412:	f013 fdc9 	bl	27fa8 <printk>
   14416:	4040      	eors	r0, r0
   14418:	f380 8811 	msr	BASEPRI, r0
   1441c:	f04f 0003 	mov.w	r0, #3
   14420:	df02      	svc	2
   14422:	e79e      	b.n	14362 <ull_done+0x36>
   14424:	2000291c 	.word	0x2000291c
   14428:	00030218 	.word	0x00030218
   1442c:	0003025c 	.word	0x0003025c
   14430:	20000368 	.word	0x20000368
   14434:	00030274 	.word	0x00030274
   14438:	0002fedc 	.word	0x0002fedc
   1443c:	0002ff74 	.word	0x0002ff74

00014440 <rx_alloc>:
{
   14440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   14444:	4f33      	ldr	r7, [pc, #204]	; (14514 <rx_alloc+0xd4>)
   14446:	783e      	ldrb	r6, [r7, #0]
   14448:	4286      	cmp	r6, r0
   1444a:	bf28      	it	cs
   1444c:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1444e:	b34e      	cbz	r6, 144a4 <rx_alloc+0x64>
   14450:	4d31      	ldr	r5, [pc, #196]	; (14518 <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   14452:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 1451c <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14456:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
   14458:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
   1445c:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1445e:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   14460:	3401      	adds	r4, #1
   14462:	b2e4      	uxtb	r4, r4
		last = 0U;
   14464:	42a2      	cmp	r2, r4
   14466:	bf08      	it	eq
   14468:	2400      	moveq	r4, #0
	if (last == first) {
   1446a:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   1446c:	4640      	mov	r0, r8
   1446e:	d01b      	beq.n	144a8 <rx_alloc+0x68>
   14470:	f7fc fc48 	bl	10d04 <mem_acquire>
   14474:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14476:	4648      	mov	r0, r9
		if (!link) {
   14478:	f1ba 0f00 	cmp.w	sl, #0
   1447c:	d012      	beq.n	144a4 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   1447e:	f7fc fc41 	bl	10d04 <mem_acquire>
		if (!rx) {
   14482:	2800      	cmp	r0, #0
   14484:	d03f      	beq.n	14506 <rx_alloc+0xc6>
		rx->link = link;
   14486:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1448a:	78ea      	ldrb	r2, [r5, #3]
   1448c:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1448e:	fb02 5303 	mla	r3, r2, r3, r5
   14492:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14494:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   14496:	70ec      	strb	r4, [r5, #3]
		max--;
   14498:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
   1449a:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1449c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   144a0:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   144a2:	d1db      	bne.n	1445c <rx_alloc+0x1c>
}
   144a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
   144a8:	783b      	ldrb	r3, [r7, #0]
   144aa:	2b00      	cmp	r3, #0
   144ac:	d0fa      	beq.n	144a4 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   144ae:	4d1c      	ldr	r5, [pc, #112]	; (14520 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
   144b0:	4e1c      	ldr	r6, [pc, #112]	; (14524 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   144b2:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   144b4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1451c <rx_alloc+0xdc>
		link->mem = NULL;
   144b8:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   144bc:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   144be:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   144c0:	3401      	adds	r4, #1
   144c2:	b2e4      	uxtb	r4, r4
		last = 0U;
   144c4:	42a2      	cmp	r2, r4
   144c6:	bf08      	it	eq
   144c8:	2400      	moveq	r4, #0
	if (last == first) {
   144ca:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   144cc:	4630      	mov	r0, r6
   144ce:	d0e9      	beq.n	144a4 <rx_alloc+0x64>
   144d0:	f7fc fc18 	bl	10d04 <mem_acquire>
   144d4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   144d6:	4640      	mov	r0, r8
		if (!link) {
   144d8:	f1ba 0f00 	cmp.w	sl, #0
   144dc:	d0e2      	beq.n	144a4 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
   144de:	f7fc fc11 	bl	10d04 <mem_acquire>
		if (!rx) {
   144e2:	b180      	cbz	r0, 14506 <rx_alloc+0xc6>
		link->mem = NULL;
   144e4:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   144e8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   144ec:	78ea      	ldrb	r2, [r5, #3]
   144ee:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   144f0:	fb02 5303 	mla	r3, r2, r3, r5
   144f4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   144f6:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
   144f8:	70ec      	strb	r4, [r5, #3]
   144fa:	3b01      	subs	r3, #1
   144fc:	b2db      	uxtb	r3, r3
   144fe:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
   14500:	2b00      	cmp	r3, #0
   14502:	d1db      	bne.n	144bc <rx_alloc+0x7c>
   14504:	e7ce      	b.n	144a4 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
   14506:	4650      	mov	r0, sl
   14508:	4906      	ldr	r1, [pc, #24]	; (14524 <rx_alloc+0xe4>)
}
   1450a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   1450e:	f7fc bc0f 	b.w	10d30 <mem_release>
   14512:	bf00      	nop
   14514:	20002654 	.word	0x20002654
   14518:	20000390 	.word	0x20000390
   1451c:	200026ac 	.word	0x200026ac
   14520:	20000380 	.word	0x20000380
   14524:	20002658 	.word	0x20002658

00014528 <rx_demux>:
{
   14528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1452c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 146dc <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   14530:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 146e0 <rx_demux+0x1b8>
		LL_ASSERT(0);
   14534:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 146e4 <rx_demux+0x1bc>
   14538:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 146e8 <rx_demux+0x1c0>
{
   1453c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1453e:	e9d8 0100 	ldrd	r0, r1, [r8]
   14542:	aa03      	add	r2, sp, #12
   14544:	f7fc fc48 	bl	10dd8 <memq_peek>
		if (link) {
   14548:	4605      	mov	r5, r0
   1454a:	2800      	cmp	r0, #0
   1454c:	d035      	beq.n	145ba <rx_demux+0x92>
			LL_ASSERT(rx);
   1454e:	9b03      	ldr	r3, [sp, #12]
   14550:	2b00      	cmp	r3, #0
   14552:	f000 80a6 	beq.w	146a2 <rx_demux+0x17a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   14556:	7818      	ldrb	r0, [r3, #0]
   14558:	aa04      	add	r2, sp, #16
   1455a:	a902      	add	r1, sp, #8
   1455c:	f006 fbc2 	bl	1ace4 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   14560:	4604      	mov	r4, r0
   14562:	2800      	cmp	r0, #0
   14564:	d055      	beq.n	14612 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   14566:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1456a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1456e:	780f      	ldrb	r7, [r1, #0]
   14570:	f8ad 200a 	strh.w	r2, [sp, #10]
   14574:	ae05      	add	r6, sp, #20
   14576:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   14578:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1457c:	f006 fbcc 	bl	1ad18 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   14580:	4621      	mov	r1, r4
   14582:	9a05      	ldr	r2, [sp, #20]
   14584:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14588:	f006 fc10 	bl	1adac <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1458c:	4620      	mov	r0, r4
   1458e:	f006 fb81 	bl	1ac94 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   14592:	4632      	mov	r2, r6
   14594:	4629      	mov	r1, r5
   14596:	4638      	mov	r0, r7
   14598:	f006 fba4 	bl	1ace4 <ull_conn_ack_by_last_peek>
	} while (link);
   1459c:	4604      	mov	r4, r0
   1459e:	2800      	cmp	r0, #0
   145a0:	d1ec      	bne.n	1457c <rx_demux+0x54>
	k_sem_give(sem_recv);
   145a2:	f8d9 0000 	ldr.w	r0, [r9]
   145a6:	f010 fb8b 	bl	24cc0 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   145aa:	e9d8 0100 	ldrd	r0, r1, [r8]
   145ae:	aa03      	add	r2, sp, #12
   145b0:	f7fc fc12 	bl	10dd8 <memq_peek>
		if (link) {
   145b4:	4605      	mov	r5, r0
   145b6:	2800      	cmp	r0, #0
   145b8:	d1c9      	bne.n	1454e <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   145ba:	aa04      	add	r2, sp, #16
   145bc:	a902      	add	r1, sp, #8
   145be:	f10d 0007 	add.w	r0, sp, #7
   145c2:	f006 fb73 	bl	1acac <ull_conn_ack_peek>
			if (link) {
   145c6:	4604      	mov	r4, r0
   145c8:	2800      	cmp	r0, #0
   145ca:	d067      	beq.n	1469c <rx_demux+0x174>
				rx_demux_conn_tx_ack(ack_last, handle,
   145cc:	9b04      	ldr	r3, [sp, #16]
   145ce:	9305      	str	r3, [sp, #20]
   145d0:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   145d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   145d8:	f8ad 300a 	strh.w	r3, [sp, #10]
   145dc:	ae05      	add	r6, sp, #20
   145de:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   145e2:	f006 fb99 	bl	1ad18 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   145e6:	4621      	mov	r1, r4
   145e8:	9a05      	ldr	r2, [sp, #20]
   145ea:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   145ee:	f006 fbdd 	bl	1adac <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   145f2:	4620      	mov	r0, r4
   145f4:	f006 fb4e 	bl	1ac94 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   145f8:	4632      	mov	r2, r6
   145fa:	4629      	mov	r1, r5
   145fc:	4638      	mov	r0, r7
   145fe:	f006 fb71 	bl	1ace4 <ull_conn_ack_by_last_peek>
	} while (link);
   14602:	4604      	mov	r4, r0
   14604:	2800      	cmp	r0, #0
   14606:	d1ec      	bne.n	145e2 <rx_demux+0xba>
	k_sem_give(sem_recv);
   14608:	f8d9 0000 	ldr.w	r0, [r9]
   1460c:	f010 fb58 	bl	24cc0 <z_impl_k_sem_give>
			if (nack) {
   14610:	e7cb      	b.n	145aa <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   14612:	9b03      	ldr	r3, [sp, #12]
   14614:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   14616:	791b      	ldrb	r3, [r3, #4]
   14618:	3b01      	subs	r3, #1
   1461a:	2b16      	cmp	r3, #22
   1461c:	d80d      	bhi.n	1463a <rx_demux+0x112>
   1461e:	e8df f003 	tbb	[pc, r3]
   14622:	0c1a      	.short	0x0c1a
   14624:	0c1a0c38 	.word	0x0c1a0c38
   14628:	0c0c0c0c 	.word	0x0c0c0c0c
   1462c:	0c0c0c0c 	.word	0x0c0c0c0c
   14630:	0c0c0c0c 	.word	0x0c0c0c0c
   14634:	2d0c0c0c 	.word	0x2d0c0c0c
   14638:	1a          	.byte	0x1a
   14639:	00          	.byte	0x00
		LL_ASSERT(0);
   1463a:	482c      	ldr	r0, [pc, #176]	; (146ec <rx_demux+0x1c4>)
   1463c:	f640 13ff 	movw	r3, #2559	; 0x9ff
   14640:	4652      	mov	r2, sl
   14642:	4659      	mov	r1, fp
   14644:	f013 fcb0 	bl	27fa8 <printk>
   14648:	4040      	eors	r0, r0
   1464a:	f380 8811 	msr	BASEPRI, r0
   1464e:	f04f 0003 	mov.w	r0, #3
   14652:	df02      	svc	2
			if (nack) {
   14654:	e773      	b.n	1453e <rx_demux+0x16>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   14656:	4921      	ldr	r1, [pc, #132]	; (146dc <rx_demux+0x1b4>)
   14658:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1465c:	2200      	movs	r2, #0
   1465e:	f7fc fbc3 	bl	10de8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14662:	4b23      	ldr	r3, [pc, #140]	; (146f0 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   14664:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14666:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14668:	4628      	mov	r0, r5
   1466a:	4a22      	ldr	r2, [pc, #136]	; (146f4 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1466c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1466e:	f7fc fba9 	bl	10dc4 <memq_enqueue>
	k_sem_give(sem_recv);
   14672:	f8d9 0000 	ldr.w	r0, [r9]
   14676:	f010 fb23 	bl	24cc0 <z_impl_k_sem_give>
			if (nack) {
   1467a:	e796      	b.n	145aa <rx_demux+0x82>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1467c:	4917      	ldr	r1, [pc, #92]	; (146dc <rx_demux+0x1b4>)
   1467e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   14682:	2200      	movs	r2, #0
   14684:	f7fc fbb0 	bl	10de8 <memq_dequeue>
		ull_conn_setup(link, rx);
   14688:	9905      	ldr	r1, [sp, #20]
   1468a:	4628      	mov	r0, r5
   1468c:	f003 f820 	bl	176d0 <ull_conn_setup>
			if (nack) {
   14690:	e755      	b.n	1453e <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   14692:	a905      	add	r1, sp, #20
   14694:	4628      	mov	r0, r5
   14696:	f003 f843 	bl	17720 <ull_conn_rx>
		if (nack) {
   1469a:	b188      	cbz	r0, 146c0 <rx_demux+0x198>
}
   1469c:	b007      	add	sp, #28
   1469e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   146a2:	4915      	ldr	r1, [pc, #84]	; (146f8 <rx_demux+0x1d0>)
   146a4:	4811      	ldr	r0, [pc, #68]	; (146ec <rx_demux+0x1c4>)
   146a6:	f44f 630b 	mov.w	r3, #2224	; 0x8b0
   146aa:	4652      	mov	r2, sl
   146ac:	f013 fc7c 	bl	27fa8 <printk>
   146b0:	4040      	eors	r0, r0
   146b2:	f380 8811 	msr	BASEPRI, r0
   146b6:	f04f 0003 	mov.w	r0, #3
   146ba:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   146bc:	9b03      	ldr	r3, [sp, #12]
   146be:	e74a      	b.n	14556 <rx_demux+0x2e>
		(void)memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   146c0:	4906      	ldr	r1, [pc, #24]	; (146dc <rx_demux+0x1b4>)
   146c2:	4602      	mov	r2, r0
   146c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   146c8:	f7fc fb8e 	bl	10de8 <memq_dequeue>
		if (rx) {
   146cc:	9905      	ldr	r1, [sp, #20]
   146ce:	2900      	cmp	r1, #0
   146d0:	f43f af35 	beq.w	1453e <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   146d4:	4b06      	ldr	r3, [pc, #24]	; (146f0 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   146d6:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   146d8:	78db      	ldrb	r3, [r3, #3]
   146da:	e7c6      	b.n	1466a <rx_demux+0x142>
   146dc:	20002924 	.word	0x20002924
   146e0:	2000292c 	.word	0x2000292c
   146e4:	00030218 	.word	0x00030218
   146e8:	0002ff74 	.word	0x0002ff74
   146ec:	0002fedc 	.word	0x0002fedc
   146f0:	200004ac 	.word	0x200004ac
   146f4:	20002918 	.word	0x20002918
   146f8:	00030284 	.word	0x00030284

000146fc <ll_rx_get>:
{
   146fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14700:	b085      	sub	sp, #20
   14702:	e9cd 0100 	strd	r0, r1, [sp]
   14706:	4c63      	ldr	r4, [pc, #396]	; (14894 <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
   14708:	4d63      	ldr	r5, [pc, #396]	; (14898 <ll_rx_get+0x19c>)
   1470a:	4e64      	ldr	r6, [pc, #400]	; (1489c <ll_rx_get+0x1a0>)
	*node_rx = NULL;
   1470c:	9a00      	ldr	r2, [sp, #0]
   1470e:	2300      	movs	r3, #0
   14710:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   14712:	e9d6 0100 	ldrd	r0, r1, [r6]
   14716:	aa03      	add	r2, sp, #12
   14718:	f7fc fb5e 	bl	10dd8 <memq_peek>
	if (link) {
   1471c:	4680      	mov	r8, r0
   1471e:	2800      	cmp	r0, #0
   14720:	f000 809f 	beq.w	14862 <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   14724:	9b03      	ldr	r3, [sp, #12]
   14726:	495e      	ldr	r1, [pc, #376]	; (148a0 <ll_rx_get+0x1a4>)
   14728:	781a      	ldrb	r2, [r3, #0]
   1472a:	9801      	ldr	r0, [sp, #4]
   1472c:	f7ff fd9e 	bl	1426c <tx_cmplt_get>
		if (!cmplt) {
   14730:	2800      	cmp	r0, #0
   14732:	f040 809b 	bne.w	1486c <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
   14736:	78a3      	ldrb	r3, [r4, #2]
   14738:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1473c:	78e2      	ldrb	r2, [r4, #3]
   1473e:	4607      	mov	r7, r0
   14740:	f10d 0109 	add.w	r1, sp, #9
   14744:	f10d 000a 	add.w	r0, sp, #10
   14748:	f7ff fd90 	bl	1426c <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   1474c:	ea47 0200 	orr.w	r2, r7, r0
   14750:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   14754:	d1f2      	bne.n	1473c <ll_rx_get+0x40>
			} else if (rx->type == NODE_RX_TYPE_RELEASE) {
   14756:	9b03      	ldr	r3, [sp, #12]
   14758:	7919      	ldrb	r1, [r3, #4]
   1475a:	2901      	cmp	r1, #1
   1475c:	f040 8093 	bne.w	14886 <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
   14760:	494e      	ldr	r1, [pc, #312]	; (1489c <ll_rx_get+0x1a0>)
   14762:	6870      	ldr	r0, [r6, #4]
   14764:	f7fc fb40 	bl	10de8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   14768:	494e      	ldr	r1, [pc, #312]	; (148a4 <ll_rx_get+0x1a8>)
   1476a:	4640      	mov	r0, r8
   1476c:	f7fc fae0 	bl	10d30 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14770:	782b      	ldrb	r3, [r5, #0]
   14772:	2b05      	cmp	r3, #5
   14774:	d866      	bhi.n	14844 <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
   14776:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   14778:	494b      	ldr	r1, [pc, #300]	; (148a8 <ll_rx_get+0x1ac>)
   1477a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   1477c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   1477e:	f7fc fad7 	bl	10d30 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   14782:	782b      	ldrb	r3, [r5, #0]
   14784:	2b00      	cmp	r3, #0
   14786:	d0c1      	beq.n	1470c <ll_rx_get+0x10>
   14788:	f8df 8120 	ldr.w	r8, [pc, #288]	; 148ac <ll_rx_get+0x1b0>
	last = last + 1;
   1478c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   14790:	f898 2001 	ldrb.w	r2, [r8, #1]
   14794:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   14798:	3701      	adds	r7, #1
   1479a:	b2ff      	uxtb	r7, r7
		last = 0U;
   1479c:	42ba      	cmp	r2, r7
   1479e:	bf08      	it	eq
   147a0:	2700      	moveq	r7, #0
	if (last == first) {
   147a2:	429f      	cmp	r7, r3
   147a4:	d019      	beq.n	147da <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
   147a6:	483f      	ldr	r0, [pc, #252]	; (148a4 <ll_rx_get+0x1a8>)
   147a8:	f7fc faac 	bl	10d04 <mem_acquire>
		if (!link) {
   147ac:	4681      	mov	r9, r0
   147ae:	2800      	cmp	r0, #0
   147b0:	d0ac      	beq.n	1470c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   147b2:	483d      	ldr	r0, [pc, #244]	; (148a8 <ll_rx_get+0x1ac>)
   147b4:	f7fc faa6 	bl	10d04 <mem_acquire>
		if (!rx) {
   147b8:	2800      	cmp	r0, #0
   147ba:	d05a      	beq.n	14872 <ll_rx_get+0x176>
		rx->link = link;
   147bc:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   147c0:	f898 2003 	ldrb.w	r2, [r8, #3]
   147c4:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   147c8:	fb02 8303 	mla	r3, r2, r3, r8
   147cc:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   147ce:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   147d0:	f888 7003 	strb.w	r7, [r8, #3]
   147d4:	3b01      	subs	r3, #1
   147d6:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   147d8:	e798      	b.n	1470c <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   147da:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 148b0 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
   147de:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 148a4 <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   147e2:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   147e6:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 148a8 <ll_rx_get+0x1ac>
	if (last == count) {
   147ea:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   147ee:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   147f2:	3701      	adds	r7, #1
   147f4:	b2ff      	uxtb	r7, r7
		last = 0U;
   147f6:	42ba      	cmp	r2, r7
   147f8:	bf08      	it	eq
   147fa:	2700      	moveq	r7, #0
	if (last == first) {
   147fc:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   147fe:	4648      	mov	r0, r9
   14800:	d084      	beq.n	1470c <ll_rx_get+0x10>
   14802:	f7fc fa7f 	bl	10d04 <mem_acquire>
   14806:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   14808:	4650      	mov	r0, sl
		if (!link) {
   1480a:	f1bb 0f00 	cmp.w	fp, #0
   1480e:	f43f af7d 	beq.w	1470c <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   14812:	f7fc fa77 	bl	10d04 <mem_acquire>
		if (!rx) {
   14816:	2800      	cmp	r0, #0
   14818:	d030      	beq.n	1487c <ll_rx_get+0x180>
		link->mem = NULL;
   1481a:	2300      	movs	r3, #0
   1481c:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   14820:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   14824:	f898 2003 	ldrb.w	r2, [r8, #3]
   14828:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1482c:	fb02 8303 	mla	r3, r2, r3, r8
   14830:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   14832:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   14834:	f888 7003 	strb.w	r7, [r8, #3]
   14838:	3b01      	subs	r3, #1
   1483a:	b2db      	uxtb	r3, r3
   1483c:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1483e:	2b00      	cmp	r3, #0
   14840:	d1d3      	bne.n	147ea <ll_rx_get+0xee>
   14842:	e763      	b.n	1470c <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14844:	4a1b      	ldr	r2, [pc, #108]	; (148b4 <ll_rx_get+0x1b8>)
   14846:	491c      	ldr	r1, [pc, #112]	; (148b8 <ll_rx_get+0x1bc>)
   14848:	481c      	ldr	r0, [pc, #112]	; (148bc <ll_rx_get+0x1c0>)
   1484a:	f240 6306 	movw	r3, #1542	; 0x606
   1484e:	f013 fbab 	bl	27fa8 <printk>
   14852:	4040      	eors	r0, r0
   14854:	f380 8811 	msr	BASEPRI, r0
   14858:	f04f 0003 	mov.w	r0, #3
   1485c:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1485e:	782b      	ldrb	r3, [r5, #0]
   14860:	e789      	b.n	14776 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   14862:	78e2      	ldrb	r2, [r4, #3]
   14864:	490e      	ldr	r1, [pc, #56]	; (148a0 <ll_rx_get+0x1a4>)
   14866:	9801      	ldr	r0, [sp, #4]
   14868:	f7ff fd00 	bl	1426c <tx_cmplt_get>
}
   1486c:	b005      	add	sp, #20
   1486e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   14872:	490c      	ldr	r1, [pc, #48]	; (148a4 <ll_rx_get+0x1a8>)
   14874:	4648      	mov	r0, r9
   14876:	f7fc fa5b 	bl	10d30 <mem_release>
			return;
   1487a:	e747      	b.n	1470c <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
   1487c:	4909      	ldr	r1, [pc, #36]	; (148a4 <ll_rx_get+0x1a8>)
   1487e:	4658      	mov	r0, fp
   14880:	f7fc fa56 	bl	10d30 <mem_release>
			return;
   14884:	e742      	b.n	1470c <ll_rx_get+0x10>
			*node_rx = rx;
   14886:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   14888:	4610      	mov	r0, r2
			*node_rx = rx;
   1488a:	600b      	str	r3, [r1, #0]
}
   1488c:	b005      	add	sp, #20
   1488e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14892:	bf00      	nop
   14894:	200004ac 	.word	0x200004ac
   14898:	20002654 	.word	0x20002654
   1489c:	20002914 	.word	0x20002914
   148a0:	200004ae 	.word	0x200004ae
   148a4:	20002658 	.word	0x20002658
   148a8:	200026ac 	.word	0x200026ac
   148ac:	20000390 	.word	0x20000390
   148b0:	20000380 	.word	0x20000380
   148b4:	00030218 	.word	0x00030218
   148b8:	00030288 	.word	0x00030288
   148bc:	0002fedc 	.word	0x0002fedc

000148c0 <ll_rx_dequeue>:
{
   148c0:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   148c2:	495c      	ldr	r1, [pc, #368]	; (14a34 <ll_rx_dequeue+0x174>)
{
   148c4:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   148c6:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   148c8:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   148ca:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   148cc:	aa01      	add	r2, sp, #4
   148ce:	f7fc fa8b 	bl	10de8 <memq_dequeue>
	LL_ASSERT(link);
   148d2:	4604      	mov	r4, r0
   148d4:	2800      	cmp	r0, #0
   148d6:	d062      	beq.n	1499e <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   148d8:	4957      	ldr	r1, [pc, #348]	; (14a38 <ll_rx_dequeue+0x178>)
   148da:	4620      	mov	r0, r4
   148dc:	f7fc fa28 	bl	10d30 <mem_release>
	switch (rx->type) {
   148e0:	9a01      	ldr	r2, [sp, #4]
   148e2:	7913      	ldrb	r3, [r2, #4]
   148e4:	2b1c      	cmp	r3, #28
   148e6:	d810      	bhi.n	1490a <ll_rx_dequeue+0x4a>
   148e8:	e8df f003 	tbb	[pc, r3]
   148ec:	1e0f0f1e 	.word	0x1e0f0f1e
   148f0:	0f0f1e0f 	.word	0x0f0f1e0f
   148f4:	0f0f0f0f 	.word	0x0f0f0f0f
   148f8:	0f0f0f0f 	.word	0x0f0f0f0f
   148fc:	0f0f0f0f 	.word	0x0f0f0f0f
   14900:	1e2f0f0f 	.word	0x1e2f0f0f
   14904:	1e1e1e1e 	.word	0x1e1e1e1e
   14908:	1e          	.byte	0x1e
   14909:	00          	.byte	0x00
		LL_ASSERT(0);
   1490a:	4a4c      	ldr	r2, [pc, #304]	; (14a3c <ll_rx_dequeue+0x17c>)
   1490c:	494c      	ldr	r1, [pc, #304]	; (14a40 <ll_rx_dequeue+0x180>)
   1490e:	484d      	ldr	r0, [pc, #308]	; (14a44 <ll_rx_dequeue+0x184>)
   14910:	f240 43c7 	movw	r3, #1223	; 0x4c7
   14914:	f013 fb48 	bl	27fa8 <printk>
   14918:	4040      	eors	r0, r0
   1491a:	f380 8811 	msr	BASEPRI, r0
   1491e:	f04f 0003 	mov.w	r0, #3
   14922:	df02      	svc	2
}
   14924:	b002      	add	sp, #8
   14926:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   14928:	2b00      	cmp	r3, #0
   1492a:	d1fb      	bne.n	14924 <ll_rx_dequeue+0x64>
   1492c:	4a43      	ldr	r2, [pc, #268]	; (14a3c <ll_rx_dequeue+0x17c>)
   1492e:	4946      	ldr	r1, [pc, #280]	; (14a48 <ll_rx_dequeue+0x188>)
   14930:	4844      	ldr	r0, [pc, #272]	; (14a44 <ll_rx_dequeue+0x184>)
   14932:	f240 43c3 	movw	r3, #1219	; 0x4c3
   14936:	f013 fb37 	bl	27fa8 <printk>
   1493a:	4040      	eors	r0, r0
   1493c:	f380 8811 	msr	BASEPRI, r0
   14940:	f04f 0003 	mov.w	r0, #3
   14944:	df02      	svc	2
}
   14946:	b002      	add	sp, #8
   14948:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1494a:	7f13      	ldrb	r3, [r2, #28]
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   1494c:	6895      	ldr	r5, [r2, #8]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1494e:	2b3c      	cmp	r3, #60	; 0x3c
			struct ll_scan_set *scan = HDR_LLL2ULL(ftr->param);
   14950:	682c      	ldr	r4, [r5, #0]
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   14952:	d032      	beq.n	149ba <ll_rx_dequeue+0xfa>
   14954:	7f53      	ldrb	r3, [r2, #29]
   14956:	b1d3      	cbz	r3, 1498e <ll_rx_dequeue+0xce>
				if (adv->node_rx_cc_free) {
   14958:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1495a:	b120      	cbz	r0, 14966 <ll_rx_dequeue+0xa6>
					adv->node_rx_cc_free = NULL;
   1495c:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   1495e:	493b      	ldr	r1, [pc, #236]	; (14a4c <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   14960:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
   14962:	f7fc f9e5 	bl	10d30 <mem_release>
			adv->is_enabled = 0U;
   14966:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1496a:	f36f 0300 	bfc	r3, #0, #1
   1496e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      (ull_scan_is_enabled(0) << 1)) |
   14972:	2000      	movs	r0, #0
   14974:	f001 fcaa 	bl	162cc <ull_scan_is_enabled>
   14978:	4604      	mov	r4, r0
			      ull_adv_is_enabled(0));
   1497a:	2000      	movs	r0, #0
   1497c:	f001 fa80 	bl	15e80 <ull_adv_is_enabled>
			if (!bm) {
   14980:	ea50 0044 	orrs.w	r0, r0, r4, lsl #1
   14984:	d1ce      	bne.n	14924 <ll_rx_dequeue+0x64>
				ull_filter_adv_scan_state_cb(0);
   14986:	f007 fe45 	bl	1c614 <ull_filter_adv_scan_state_cb>
}
   1498a:	b002      	add	sp, #8
   1498c:	bd70      	pop	{r4, r5, r6, pc}
			scan->is_enabled = 0U;
   1498e:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
			scan->lll.conn = NULL;
   14992:	6223      	str	r3, [r4, #32]
			scan->is_enabled = 0U;
   14994:	f363 0200 	bfi	r2, r3, #0, #1
   14998:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
   1499c:	e7e9      	b.n	14972 <ll_rx_dequeue+0xb2>
	LL_ASSERT(link);
   1499e:	4a27      	ldr	r2, [pc, #156]	; (14a3c <ll_rx_dequeue+0x17c>)
   149a0:	492b      	ldr	r1, [pc, #172]	; (14a50 <ll_rx_dequeue+0x190>)
   149a2:	4828      	ldr	r0, [pc, #160]	; (14a44 <ll_rx_dequeue+0x184>)
   149a4:	f240 33a1 	movw	r3, #929	; 0x3a1
   149a8:	f013 fafe 	bl	27fa8 <printk>
   149ac:	4040      	eors	r0, r0
   149ae:	f380 8811 	msr	BASEPRI, r0
   149b2:	f04f 0003 	mov.w	r0, #3
   149b6:	df02      	svc	2
   149b8:	e78e      	b.n	148d8 <ll_rx_dequeue+0x18>
				conn_lll = lll->conn;
   149ba:	686e      	ldr	r6, [r5, #4]
				LL_ASSERT(conn_lll);
   149bc:	b1ee      	cbz	r6, 149fa <ll_rx_dequeue+0x13a>
				LL_ASSERT(!conn_lll->link_tx_free);
   149be:	6db3      	ldr	r3, [r6, #88]	; 0x58
				lll->conn = NULL;
   149c0:	2200      	movs	r2, #0
   149c2:	606a      	str	r2, [r5, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   149c4:	b163      	cbz	r3, 149e0 <ll_rx_dequeue+0x120>
   149c6:	4a1d      	ldr	r2, [pc, #116]	; (14a3c <ll_rx_dequeue+0x17c>)
   149c8:	4922      	ldr	r1, [pc, #136]	; (14a54 <ll_rx_dequeue+0x194>)
   149ca:	481e      	ldr	r0, [pc, #120]	; (14a44 <ll_rx_dequeue+0x184>)
   149cc:	f240 431a 	movw	r3, #1050	; 0x41a
   149d0:	f013 faea 	bl	27fa8 <printk>
   149d4:	4040      	eors	r0, r0
   149d6:	f380 8811 	msr	BASEPRI, r0
   149da:	f04f 0003 	mov.w	r0, #3
   149de:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   149e0:	f106 014c 	add.w	r1, r6, #76	; 0x4c
   149e4:	f106 0048 	add.w	r0, r6, #72	; 0x48
   149e8:	f7fc f9e2 	bl	10db0 <memq_deinit>
				LL_ASSERT(link);
   149ec:	4605      	mov	r5, r0
   149ee:	b190      	cbz	r0, 14a16 <ll_rx_dequeue+0x156>
				ll_conn_release(conn);
   149f0:	6830      	ldr	r0, [r6, #0]
				conn_lll->link_tx_free = link;
   149f2:	65b5      	str	r5, [r6, #88]	; 0x58
				ll_conn_release(conn);
   149f4:	f002 fb12 	bl	1701c <ll_conn_release>
   149f8:	e7b5      	b.n	14966 <ll_rx_dequeue+0xa6>
				LL_ASSERT(conn_lll);
   149fa:	4a10      	ldr	r2, [pc, #64]	; (14a3c <ll_rx_dequeue+0x17c>)
   149fc:	4916      	ldr	r1, [pc, #88]	; (14a58 <ll_rx_dequeue+0x198>)
   149fe:	4811      	ldr	r0, [pc, #68]	; (14a44 <ll_rx_dequeue+0x184>)
   14a00:	f240 4317 	movw	r3, #1047	; 0x417
   14a04:	f013 fad0 	bl	27fa8 <printk>
   14a08:	4040      	eors	r0, r0
   14a0a:	f380 8811 	msr	BASEPRI, r0
   14a0e:	f04f 0003 	mov.w	r0, #3
   14a12:	df02      	svc	2
   14a14:	e7d3      	b.n	149be <ll_rx_dequeue+0xfe>
				LL_ASSERT(link);
   14a16:	4a09      	ldr	r2, [pc, #36]	; (14a3c <ll_rx_dequeue+0x17c>)
   14a18:	490d      	ldr	r1, [pc, #52]	; (14a50 <ll_rx_dequeue+0x190>)
   14a1a:	480a      	ldr	r0, [pc, #40]	; (14a44 <ll_rx_dequeue+0x184>)
   14a1c:	f240 431d 	movw	r3, #1053	; 0x41d
   14a20:	f013 fac2 	bl	27fa8 <printk>
   14a24:	4040      	eors	r0, r0
   14a26:	f380 8811 	msr	BASEPRI, r0
   14a2a:	f04f 0003 	mov.w	r0, #3
   14a2e:	df02      	svc	2
   14a30:	e7de      	b.n	149f0 <ll_rx_dequeue+0x130>
   14a32:	bf00      	nop
   14a34:	20002914 	.word	0x20002914
   14a38:	20002658 	.word	0x20002658
   14a3c:	00030218 	.word	0x00030218
   14a40:	0002ff74 	.word	0x0002ff74
   14a44:	0002fedc 	.word	0x0002fedc
   14a48:	000302ec 	.word	0x000302ec
   14a4c:	200026ac 	.word	0x200026ac
   14a50:	00030624 	.word	0x00030624
   14a54:	000302d4 	.word	0x000302d4
   14a58:	000302c8 	.word	0x000302c8

00014a5c <ll_rx_mem_release>:
{
   14a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   14a60:	6804      	ldr	r4, [r0, #0]
{
   14a62:	4680      	mov	r8, r0
	while (rx) {
   14a64:	b344      	cbz	r4, 14ab8 <ll_rx_mem_release+0x5c>
			LL_ASSERT(0);
   14a66:	4f5f      	ldr	r7, [pc, #380]	; (14be4 <ll_rx_mem_release+0x188>)
   14a68:	f8df 917c 	ldr.w	r9, [pc, #380]	; 14be8 <ll_rx_mem_release+0x18c>
   14a6c:	4e5f      	ldr	r6, [pc, #380]	; (14bec <ll_rx_mem_release+0x190>)
		rx = rx->next;
   14a6e:	4625      	mov	r5, r4
   14a70:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   14a72:	792b      	ldrb	r3, [r5, #4]
   14a74:	2b1c      	cmp	r3, #28
   14a76:	d810      	bhi.n	14a9a <ll_rx_mem_release+0x3e>
   14a78:	e8df f003 	tbb	[pc, r3]
   14a7c:	3a0f0f3a 	.word	0x3a0f0f3a
   14a80:	0f0f3a0f 	.word	0x0f0f3a0f
   14a84:	0f0f0f0f 	.word	0x0f0f0f0f
   14a88:	0f0f0f0f 	.word	0x0f0f0f0f
   14a8c:	0f0f0f0f 	.word	0x0f0f0f0f
   14a90:	58260f0f 	.word	0x58260f0f
   14a94:	3a3a3a3a 	.word	0x3a3a3a3a
   14a98:	3a          	.byte	0x3a
   14a99:	00          	.byte	0x00
			LL_ASSERT(0);
   14a9a:	f240 53fa 	movw	r3, #1530	; 0x5fa
   14a9e:	463a      	mov	r2, r7
   14aa0:	4649      	mov	r1, r9
   14aa2:	4630      	mov	r0, r6
   14aa4:	f013 fa80 	bl	27fa8 <printk>
   14aa8:	4040      	eors	r0, r0
   14aaa:	f380 8811 	msr	BASEPRI, r0
   14aae:	f04f 0003 	mov.w	r0, #3
   14ab2:	df02      	svc	2
	while (rx) {
   14ab4:	2c00      	cmp	r4, #0
   14ab6:	d1da      	bne.n	14a6e <ll_rx_mem_release+0x12>
	*node_rx = rx;
   14ab8:	2300      	movs	r3, #0
   14aba:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   14abe:	20ff      	movs	r0, #255	; 0xff
}
   14ac0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   14ac4:	f7ff bcbc 	b.w	14440 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   14ac8:	7f2b      	ldrb	r3, [r5, #28]
   14aca:	2b3c      	cmp	r3, #60	; 0x3c
   14acc:	d064      	beq.n	14b98 <ll_rx_mem_release+0x13c>
			} else if (cc->status == BT_HCI_ERR_UNKNOWN_CONN_ID) {
   14ace:	2b02      	cmp	r3, #2
   14ad0:	d06a      	beq.n	14ba8 <ll_rx_mem_release+0x14c>
				LL_ASSERT(!cc->status);
   14ad2:	b1db      	cbz	r3, 14b0c <ll_rx_mem_release+0xb0>
   14ad4:	4946      	ldr	r1, [pc, #280]	; (14bf0 <ll_rx_mem_release+0x194>)
   14ad6:	f240 532b 	movw	r3, #1323	; 0x52b
   14ada:	463a      	mov	r2, r7
   14adc:	4630      	mov	r0, r6
   14ade:	f013 fa63 	bl	27fa8 <printk>
   14ae2:	4040      	eors	r0, r0
   14ae4:	f380 8811 	msr	BASEPRI, r0
   14ae8:	f04f 0003 	mov.w	r0, #3
   14aec:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14aee:	792b      	ldrb	r3, [r5, #4]
   14af0:	b963      	cbnz	r3, 14b0c <ll_rx_mem_release+0xb0>
   14af2:	4940      	ldr	r1, [pc, #256]	; (14bf4 <ll_rx_mem_release+0x198>)
   14af4:	f240 537d 	movw	r3, #1405	; 0x57d
   14af8:	463a      	mov	r2, r7
   14afa:	4630      	mov	r0, r6
   14afc:	f013 fa54 	bl	27fa8 <printk>
   14b00:	4040      	eors	r0, r0
   14b02:	f380 8811 	msr	BASEPRI, r0
   14b06:	f04f 0003 	mov.w	r0, #3
   14b0a:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14b0c:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 14bf8 <ll_rx_mem_release+0x19c>
   14b10:	f89a 3000 	ldrb.w	r3, [sl]
   14b14:	2b05      	cmp	r3, #5
   14b16:	d82f      	bhi.n	14b78 <ll_rx_mem_release+0x11c>
	mem_link_rx.quota_pdu += delta;
   14b18:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   14b1a:	4938      	ldr	r1, [pc, #224]	; (14bfc <ll_rx_mem_release+0x1a0>)
	mem_link_rx.quota_pdu += delta;
   14b1c:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   14b20:	4628      	mov	r0, r5
   14b22:	f7fc f905 	bl	10d30 <mem_release>
	while (rx) {
   14b26:	2c00      	cmp	r4, #0
   14b28:	d1a1      	bne.n	14a6e <ll_rx_mem_release+0x12>
   14b2a:	e7c5      	b.n	14ab8 <ll_rx_mem_release+0x5c>
			if (IS_ACL_HANDLE(rx_free->handle)) {
   14b2c:	88e8      	ldrh	r0, [r5, #6]
   14b2e:	2800      	cmp	r0, #0
   14b30:	d1c0      	bne.n	14ab4 <ll_rx_mem_release+0x58>
				conn = ll_conn_get(rx_free->handle);
   14b32:	f002 fa81 	bl	17038 <ll_conn_get>
				LL_ASSERT(!conn->lll.link_tx_free);
   14b36:	6f43      	ldr	r3, [r0, #116]	; 0x74
				conn = ll_conn_get(rx_free->handle);
   14b38:	4605      	mov	r5, r0
				LL_ASSERT(!conn->lll.link_tx_free);
   14b3a:	b163      	cbz	r3, 14b56 <ll_rx_mem_release+0xfa>
   14b3c:	4930      	ldr	r1, [pc, #192]	; (14c00 <ll_rx_mem_release+0x1a4>)
   14b3e:	f240 53ec 	movw	r3, #1516	; 0x5ec
   14b42:	463a      	mov	r2, r7
   14b44:	4630      	mov	r0, r6
   14b46:	f013 fa2f 	bl	27fa8 <printk>
   14b4a:	4040      	eors	r0, r0
   14b4c:	f380 8811 	msr	BASEPRI, r0
   14b50:	f04f 0003 	mov.w	r0, #3
   14b54:	df02      	svc	2
				link = memq_deinit(&conn->lll.memq_tx.head,
   14b56:	f105 0168 	add.w	r1, r5, #104	; 0x68
   14b5a:	f105 0064 	add.w	r0, r5, #100	; 0x64
   14b5e:	f7fc f927 	bl	10db0 <memq_deinit>
				LL_ASSERT(link);
   14b62:	4682      	mov	sl, r0
   14b64:	b378      	cbz	r0, 14bc6 <ll_rx_mem_release+0x16a>
				conn->lll.link_tx_free = link;
   14b66:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
				ll_conn_release(conn);
   14b6a:	4628      	mov	r0, r5
   14b6c:	f002 fa56 	bl	1701c <ll_conn_release>
	while (rx) {
   14b70:	2c00      	cmp	r4, #0
   14b72:	f47f af7c 	bne.w	14a6e <ll_rx_mem_release+0x12>
   14b76:	e79f      	b.n	14ab8 <ll_rx_mem_release+0x5c>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14b78:	4922      	ldr	r1, [pc, #136]	; (14c04 <ll_rx_mem_release+0x1a8>)
   14b7a:	f240 6306 	movw	r3, #1542	; 0x606
   14b7e:	463a      	mov	r2, r7
   14b80:	4630      	mov	r0, r6
   14b82:	f013 fa11 	bl	27fa8 <printk>
   14b86:	4040      	eors	r0, r0
   14b88:	f380 8811 	msr	BASEPRI, r0
   14b8c:	f04f 0003 	mov.w	r0, #3
   14b90:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   14b92:	f89a 3000 	ldrb.w	r3, [sl]
   14b96:	e7bf      	b.n	14b18 <ll_rx_mem_release+0xbc>
				mem_release(rx_free, &mem_pdu_rx.free);
   14b98:	4918      	ldr	r1, [pc, #96]	; (14bfc <ll_rx_mem_release+0x1a0>)
   14b9a:	4628      	mov	r0, r5
   14b9c:	f7fc f8c8 	bl	10d30 <mem_release>
	while (rx) {
   14ba0:	2c00      	cmp	r4, #0
   14ba2:	f47f af64 	bne.w	14a6e <ll_rx_mem_release+0x12>
   14ba6:	e787      	b.n	14ab8 <ll_rx_mem_release+0x5c>
				ull_central_cleanup(rx_free);
   14ba8:	4628      	mov	r0, r5
   14baa:	f006 fdd3 	bl	1b754 <ull_central_cleanup>
				if (!ull_adv_is_enabled_get(0))
   14bae:	2000      	movs	r0, #0
   14bb0:	f001 f958 	bl	15e64 <ull_adv_is_enabled_get>
   14bb4:	2800      	cmp	r0, #0
   14bb6:	f47f af7d 	bne.w	14ab4 <ll_rx_mem_release+0x58>
					ull_filter_adv_scan_state_cb(0);
   14bba:	f007 fd2b 	bl	1c614 <ull_filter_adv_scan_state_cb>
	while (rx) {
   14bbe:	2c00      	cmp	r4, #0
   14bc0:	f47f af55 	bne.w	14a6e <ll_rx_mem_release+0x12>
   14bc4:	e778      	b.n	14ab8 <ll_rx_mem_release+0x5c>
				LL_ASSERT(link);
   14bc6:	4910      	ldr	r1, [pc, #64]	; (14c08 <ll_rx_mem_release+0x1ac>)
   14bc8:	f240 53ef 	movw	r3, #1519	; 0x5ef
   14bcc:	463a      	mov	r2, r7
   14bce:	4630      	mov	r0, r6
   14bd0:	f013 f9ea 	bl	27fa8 <printk>
   14bd4:	4040      	eors	r0, r0
   14bd6:	f380 8811 	msr	BASEPRI, r0
   14bda:	f04f 0003 	mov.w	r0, #3
   14bde:	df02      	svc	2
   14be0:	e7c1      	b.n	14b66 <ll_rx_mem_release+0x10a>
   14be2:	bf00      	nop
   14be4:	00030218 	.word	0x00030218
   14be8:	0002ff74 	.word	0x0002ff74
   14bec:	0002fedc 	.word	0x0002fedc
   14bf0:	0003030c 	.word	0x0003030c
   14bf4:	00030318 	.word	0x00030318
   14bf8:	20002654 	.word	0x20002654
   14bfc:	200026ac 	.word	0x200026ac
   14c00:	0003033c 	.word	0x0003033c
   14c04:	00030288 	.word	0x00030288
   14c08:	00030624 	.word	0x00030624

00014c0c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   14c0c:	4801      	ldr	r0, [pc, #4]	; (14c14 <ll_rx_link_alloc+0x8>)
   14c0e:	f7fc b879 	b.w	10d04 <mem_acquire>
   14c12:	bf00      	nop
   14c14:	20002658 	.word	0x20002658

00014c18 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   14c18:	4901      	ldr	r1, [pc, #4]	; (14c20 <ll_rx_link_release+0x8>)
   14c1a:	f7fc b889 	b.w	10d30 <mem_release>
   14c1e:	bf00      	nop
   14c20:	20002658 	.word	0x20002658

00014c24 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   14c24:	4801      	ldr	r0, [pc, #4]	; (14c2c <ll_rx_alloc+0x8>)
   14c26:	f7fc b86d 	b.w	10d04 <mem_acquire>
   14c2a:	bf00      	nop
   14c2c:	200026ac 	.word	0x200026ac

00014c30 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   14c30:	4901      	ldr	r1, [pc, #4]	; (14c38 <ll_rx_release+0x8>)
   14c32:	f7fc b87d 	b.w	10d30 <mem_release>
   14c36:	bf00      	nop
   14c38:	200026ac 	.word	0x200026ac

00014c3c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14c3c:	4b02      	ldr	r3, [pc, #8]	; (14c48 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14c3e:	4a03      	ldr	r2, [pc, #12]	; (14c4c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14c40:	78db      	ldrb	r3, [r3, #3]
   14c42:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14c44:	f7fc b8be 	b.w	10dc4 <memq_enqueue>
   14c48:	200004ac 	.word	0x200004ac
   14c4c:	20002918 	.word	0x20002918

00014c50 <ll_rx_sched>:
	k_sem_give(sem_recv);
   14c50:	4b01      	ldr	r3, [pc, #4]	; (14c58 <ll_rx_sched+0x8>)
   14c52:	6818      	ldr	r0, [r3, #0]
   14c54:	f010 b834 	b.w	24cc0 <z_impl_k_sem_give>
   14c58:	2000292c 	.word	0x2000292c

00014c5c <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14c5c:	4b0d      	ldr	r3, [pc, #52]	; (14c94 <ll_pdu_rx_alloc_peek+0x38>)
   14c5e:	7899      	ldrb	r1, [r3, #2]
   14c60:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   14c62:	4291      	cmp	r1, r2
   14c64:	d80a      	bhi.n	14c7c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   14c66:	eba2 0c01 	sub.w	ip, r2, r1
   14c6a:	fa5f fc8c 	uxtb.w	ip, ip
   14c6e:	4560      	cmp	r0, ip
   14c70:	d802      	bhi.n	14c78 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   14c72:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14c74:	7818      	ldrb	r0, [r3, #0]
   14c76:	d109      	bne.n	14c8c <ll_pdu_rx_alloc_peek+0x30>
		return NULL;
   14c78:	2000      	movs	r0, #0
}
   14c7a:	4770      	bx	lr
		return count - first + last;
   14c7c:	f893 c001 	ldrb.w	ip, [r3, #1]
   14c80:	4462      	add	r2, ip
   14c82:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14c84:	b2d2      	uxtb	r2, r2
   14c86:	4290      	cmp	r0, r2
   14c88:	d8f6      	bhi.n	14c78 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14c8a:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   14c8c:	fb01 3300 	mla	r3, r1, r0, r3
   14c90:	6858      	ldr	r0, [r3, #4]
   14c92:	4770      	bx	lr
   14c94:	20000380 	.word	0x20000380

00014c98 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14c98:	4b09      	ldr	r3, [pc, #36]	; (14cc0 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   14c9a:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   14c9c:	78da      	ldrb	r2, [r3, #3]
   14c9e:	7818      	ldrb	r0, [r3, #0]
   14ca0:	f893 c001 	ldrb.w	ip, [r3, #1]
   14ca4:	428a      	cmp	r2, r1
   14ca6:	d009      	beq.n	14cbc <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   14ca8:	1c4a      	adds	r2, r1, #1
   14caa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14cac:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   14cb0:	4594      	cmp	ip, r2
   14cb2:	bf08      	it	eq
   14cb4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14cb6:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   14cb8:	709a      	strb	r2, [r3, #2]

	return mem;
   14cba:	4770      	bx	lr
		return NULL;
   14cbc:	2000      	movs	r0, #0
}
   14cbe:	4770      	bx	lr
   14cc0:	20000380 	.word	0x20000380

00014cc4 <ll_tx_ack_put>:
{
   14cc4:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14cc6:	4a15      	ldr	r2, [pc, #84]	; (14d1c <ll_tx_ack_put+0x58>)
   14cc8:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   14ccc:	7854      	ldrb	r4, [r2, #1]
   14cce:	f892 e002 	ldrb.w	lr, [r2, #2]
   14cd2:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   14cd4:	f10c 0301 	add.w	r3, ip, #1
   14cd8:	b2db      	uxtb	r3, r3
		last = 0U;
   14cda:	429c      	cmp	r4, r3
   14cdc:	bf08      	it	eq
   14cde:	2300      	moveq	r3, #0
	if (last == first) {
   14ce0:	459e      	cmp	lr, r3
   14ce2:	d00a      	beq.n	14cfa <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14ce4:	fb1c fc05 	smulbb	ip, ip, r5
   14ce8:	f102 0e04 	add.w	lr, r2, #4
	tx->handle = handle;
   14cec:	f82e 000c 	strh.w	r0, [lr, ip]
   14cf0:	44f4      	add	ip, lr
	tx->node = node_tx;
   14cf2:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   14cf6:	70d3      	strb	r3, [r2, #3]
}
   14cf8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(tx);
   14cfa:	4a09      	ldr	r2, [pc, #36]	; (14d20 <ll_tx_ack_put+0x5c>)
   14cfc:	4909      	ldr	r1, [pc, #36]	; (14d24 <ll_tx_ack_put+0x60>)
   14cfe:	480a      	ldr	r0, [pc, #40]	; (14d28 <ll_tx_ack_put+0x64>)
   14d00:	f240 634e 	movw	r3, #1614	; 0x64e
   14d04:	f013 f950 	bl	27fa8 <printk>
   14d08:	4040      	eors	r0, r0
   14d0a:	f380 8811 	msr	BASEPRI, r0
   14d0e:	f04f 0003 	mov.w	r0, #3
   14d12:	df02      	svc	2
	tx->handle = handle;
   14d14:	2300      	movs	r3, #0
   14d16:	801b      	strh	r3, [r3, #0]
   14d18:	deff      	udf	#255	; 0xff
   14d1a:	bf00      	nop
   14d1c:	200004ac 	.word	0x200004ac
   14d20:	00030218 	.word	0x00030218
   14d24:	00030618 	.word	0x00030618
   14d28:	0002fedc 	.word	0x0002fedc

00014d2c <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14d2c:	f030 0302 	bics.w	r3, r0, #2
{
   14d30:	b510      	push	{r4, lr}
   14d32:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14d34:	d002      	beq.n	14d3c <ull_ticker_status_take+0x10>
   14d36:	680b      	ldr	r3, [r1, #0]
   14d38:	2b02      	cmp	r3, #2
   14d3a:	d008      	beq.n	14d4e <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   14d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14d40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14d44:	4809      	ldr	r0, [pc, #36]	; (14d6c <ull_ticker_status_take+0x40>)
   14d46:	f00f ffe1 	bl	24d0c <z_impl_k_sem_take>
	return *ret_cb;
   14d4a:	6820      	ldr	r0, [r4, #0]
}
   14d4c:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14d4e:	4a08      	ldr	r2, [pc, #32]	; (14d70 <ull_ticker_status_take+0x44>)
   14d50:	4908      	ldr	r1, [pc, #32]	; (14d74 <ull_ticker_status_take+0x48>)
   14d52:	4809      	ldr	r0, [pc, #36]	; (14d78 <ull_ticker_status_take+0x4c>)
   14d54:	f240 6382 	movw	r3, #1666	; 0x682
   14d58:	f013 f926 	bl	27fa8 <printk>
   14d5c:	4040      	eors	r0, r0
   14d5e:	f380 8811 	msr	BASEPRI, r0
   14d62:	f04f 0003 	mov.w	r0, #3
   14d66:	df02      	svc	2
   14d68:	e7e8      	b.n	14d3c <ull_ticker_status_take+0x10>
   14d6a:	bf00      	nop
   14d6c:	20002930 	.word	0x20002930
   14d70:	00030218 	.word	0x00030218
   14d74:	0003035c 	.word	0x0003035c
   14d78:	0002fedc 	.word	0x0002fedc

00014d7c <ull_disable_mark>:
	if (!*m) {
   14d7c:	4a03      	ldr	r2, [pc, #12]	; (14d8c <ull_disable_mark+0x10>)
{
   14d7e:	4603      	mov	r3, r0
	if (!*m) {
   14d80:	6810      	ldr	r0, [r2, #0]
   14d82:	b100      	cbz	r0, 14d86 <ull_disable_mark+0xa>
}
   14d84:	4770      	bx	lr
		*m = param;
   14d86:	6013      	str	r3, [r2, #0]
   14d88:	4618      	mov	r0, r3
}
   14d8a:	4770      	bx	lr
   14d8c:	20002620 	.word	0x20002620

00014d90 <ull_disable_unmark>:
	if (*m && *m == param) {
   14d90:	4a04      	ldr	r2, [pc, #16]	; (14da4 <ull_disable_unmark+0x14>)
   14d92:	6813      	ldr	r3, [r2, #0]
   14d94:	b123      	cbz	r3, 14da0 <ull_disable_unmark+0x10>
   14d96:	4298      	cmp	r0, r3
		*m = NULL;
   14d98:	bf06      	itte	eq
   14d9a:	2100      	moveq	r1, #0
   14d9c:	6011      	streq	r1, [r2, #0]
	return NULL;
   14d9e:	2300      	movne	r3, #0
}
   14da0:	4618      	mov	r0, r3
   14da2:	4770      	bx	lr
   14da4:	20002620 	.word	0x20002620

00014da8 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14da8:	4b01      	ldr	r3, [pc, #4]	; (14db0 <ull_disable_mark_get+0x8>)
}
   14daa:	6818      	ldr	r0, [r3, #0]
   14dac:	4770      	bx	lr
   14dae:	bf00      	nop
   14db0:	20002620 	.word	0x20002620

00014db4 <ull_update_mark>:
	if (!*m) {
   14db4:	4a03      	ldr	r2, [pc, #12]	; (14dc4 <ull_update_mark+0x10>)
{
   14db6:	4603      	mov	r3, r0
	if (!*m) {
   14db8:	6810      	ldr	r0, [r2, #0]
   14dba:	b100      	cbz	r0, 14dbe <ull_update_mark+0xa>
}
   14dbc:	4770      	bx	lr
		*m = param;
   14dbe:	6013      	str	r3, [r2, #0]
   14dc0:	4618      	mov	r0, r3
}
   14dc2:	4770      	bx	lr
   14dc4:	20002624 	.word	0x20002624

00014dc8 <ull_update_unmark>:
	if (*m && *m == param) {
   14dc8:	4a04      	ldr	r2, [pc, #16]	; (14ddc <ull_update_unmark+0x14>)
   14dca:	6813      	ldr	r3, [r2, #0]
   14dcc:	b123      	cbz	r3, 14dd8 <ull_update_unmark+0x10>
   14dce:	4298      	cmp	r0, r3
		*m = NULL;
   14dd0:	bf06      	itte	eq
   14dd2:	2100      	moveq	r1, #0
   14dd4:	6011      	streq	r1, [r2, #0]
	return NULL;
   14dd6:	2300      	movne	r3, #0
}
   14dd8:	4618      	mov	r0, r3
   14dda:	4770      	bx	lr
   14ddc:	20002624 	.word	0x20002624

00014de0 <ull_update_mark_get>:
	return mark_get(mark_update);
   14de0:	4b01      	ldr	r3, [pc, #4]	; (14de8 <ull_update_mark_get+0x8>)
}
   14de2:	6818      	ldr	r0, [r3, #0]
   14de4:	4770      	bx	lr
   14de6:	bf00      	nop
   14de8:	20002624 	.word	0x20002624

00014dec <ull_disable>:
{
   14dec:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   14dee:	6805      	ldr	r5, [r0, #0]
   14df0:	782b      	ldrb	r3, [r5, #0]
{
   14df2:	b087      	sub	sp, #28
	if (!ull_ref_get(hdr)) {
   14df4:	b353      	cbz	r3, 14e4c <ull_disable+0x60>
	compiler_barrier();
   14df6:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   14df8:	2201      	movs	r2, #1
   14dfa:	2100      	movs	r1, #0
   14dfc:	4668      	mov	r0, sp
   14dfe:	f018 ffae 	bl	2dd5e <z_impl_k_sem_init>
   14e02:	782b      	ldrb	r3, [r5, #0]
	hdr->disabled_cb = disabled_cb;
   14e04:	4a13      	ldr	r2, [pc, #76]	; (14e54 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   14e06:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14e0a:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   14e0c:	b1f3      	cbz	r3, 14e4c <ull_disable+0x60>
	mfy.param = lll;
   14e0e:	4b12      	ldr	r3, [pc, #72]	; (14e58 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14e10:	2200      	movs	r2, #0
   14e12:	4611      	mov	r1, r2
   14e14:	2003      	movs	r0, #3
	mfy.param = lll;
   14e16:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14e18:	f7fc f848 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!ret);
   14e1c:	b940      	cbnz	r0, 14e30 <ull_disable+0x44>
	return z_impl_k_sem_take(sem, timeout);
   14e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14e22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14e26:	4668      	mov	r0, sp
   14e28:	f00f ff70 	bl	24d0c <z_impl_k_sem_take>
}
   14e2c:	b007      	add	sp, #28
   14e2e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14e30:	4a0a      	ldr	r2, [pc, #40]	; (14e5c <ull_disable+0x70>)
   14e32:	490b      	ldr	r1, [pc, #44]	; (14e60 <ull_disable+0x74>)
   14e34:	480b      	ldr	r0, [pc, #44]	; (14e64 <ull_disable+0x78>)
   14e36:	f240 63ff 	movw	r3, #1791	; 0x6ff
   14e3a:	f013 f8b5 	bl	27fa8 <printk>
   14e3e:	4040      	eors	r0, r0
   14e40:	f380 8811 	msr	BASEPRI, r0
   14e44:	f04f 0003 	mov.w	r0, #3
   14e48:	df02      	svc	2
   14e4a:	e7e8      	b.n	14e1e <ull_disable+0x32>
		return -EALREADY;
   14e4c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14e50:	e7ec      	b.n	14e2c <ull_disable+0x40>
   14e52:	bf00      	nop
   14e54:	00014269 	.word	0x00014269
   14e58:	20000510 	.word	0x20000510
   14e5c:	00030218 	.word	0x00030218
   14e60:	00030354 	.word	0x00030354
   14e64:	0002fedc 	.word	0x0002fedc

00014e68 <ull_ticker_stop_with_mark>:
{
   14e68:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   14e6a:	4e20      	ldr	r6, [pc, #128]	; (14eec <ull_ticker_stop_with_mark+0x84>)
   14e6c:	6833      	ldr	r3, [r6, #0]
{
   14e6e:	b085      	sub	sp, #20
   14e70:	460c      	mov	r4, r1
   14e72:	4617      	mov	r7, r2
	if (!*m) {
   14e74:	b353      	cbz	r3, 14ecc <ull_ticker_stop_with_mark+0x64>
	if (mark != param) {
   14e76:	4299      	cmp	r1, r3
   14e78:	d113      	bne.n	14ea2 <ull_ticker_stop_with_mark+0x3a>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14e7a:	ad03      	add	r5, sp, #12
	ret_cb = TICKER_STATUS_BUSY;
   14e7c:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14e7e:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   14e80:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14e82:	9500      	str	r5, [sp, #0]
   14e84:	4b1a      	ldr	r3, [pc, #104]	; (14ef0 <ull_ticker_stop_with_mark+0x88>)
   14e86:	2103      	movs	r1, #3
   14e88:	2000      	movs	r0, #0
   14e8a:	f7fd fa65 	bl	12358 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14e8e:	4629      	mov	r1, r5
   14e90:	f7ff ff4c 	bl	14d2c <ull_ticker_status_take>
	if (ret) {
   14e94:	4605      	mov	r5, r0
   14e96:	b140      	cbz	r0, 14eaa <ull_ticker_stop_with_mark+0x42>
	if (*m && *m == param) {
   14e98:	6833      	ldr	r3, [r6, #0]
   14e9a:	b10b      	cbz	r3, 14ea0 <ull_ticker_stop_with_mark+0x38>
   14e9c:	429c      	cmp	r4, r3
   14e9e:	d017      	beq.n	14ed0 <ull_ticker_stop_with_mark+0x68>
		if (mark != param) {
   14ea0:	b304      	cbz	r4, 14ee4 <ull_ticker_stop_with_mark+0x7c>
			return -ENOLCK;
   14ea2:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   14ea6:	b005      	add	sp, #20
   14ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	err = ull_disable(lll_disable);
   14eaa:	4638      	mov	r0, r7
   14eac:	f7ff ff9e 	bl	14dec <ull_disable>
	if (*m && *m == param) {
   14eb0:	6833      	ldr	r3, [r6, #0]
   14eb2:	b10b      	cbz	r3, 14eb8 <ull_ticker_stop_with_mark+0x50>
   14eb4:	429c      	cmp	r4, r3
   14eb6:	d011      	beq.n	14edc <ull_ticker_stop_with_mark+0x74>
	if (mark != param) {
   14eb8:	2c00      	cmp	r4, #0
   14eba:	d1f2      	bne.n	14ea2 <ull_ticker_stop_with_mark+0x3a>
	if (err && (err != -EALREADY)) {
   14ebc:	2800      	cmp	r0, #0
   14ebe:	d0f2      	beq.n	14ea6 <ull_ticker_stop_with_mark+0x3e>
	return 0;
   14ec0:	f110 0f78 	cmn.w	r0, #120	; 0x78
   14ec4:	bf08      	it	eq
   14ec6:	2000      	moveq	r0, #0
}
   14ec8:	b005      	add	sp, #20
   14eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   14ecc:	6031      	str	r1, [r6, #0]
	if (mark != param) {
   14ece:	e7d4      	b.n	14e7a <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   14ed0:	2300      	movs	r3, #0
		return -EALREADY;
   14ed2:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   14ed6:	6033      	str	r3, [r6, #0]
}
   14ed8:	b005      	add	sp, #20
   14eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   14edc:	6035      	str	r5, [r6, #0]
	if (err && (err != -EALREADY)) {
   14ede:	2800      	cmp	r0, #0
   14ee0:	d0e1      	beq.n	14ea6 <ull_ticker_stop_with_mark+0x3e>
   14ee2:	e7ed      	b.n	14ec0 <ull_ticker_stop_with_mark+0x58>
		return -EALREADY;
   14ee4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14ee8:	e7dd      	b.n	14ea6 <ull_ticker_stop_with_mark+0x3e>
   14eea:	bf00      	nop
   14eec:	20002620 	.word	0x20002620
   14ef0:	0001425d 	.word	0x0001425d

00014ef4 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14ef4:	4b0d      	ldr	r3, [pc, #52]	; (14f2c <ull_pdu_rx_alloc_peek+0x38>)
   14ef6:	7899      	ldrb	r1, [r3, #2]
   14ef8:	78da      	ldrb	r2, [r3, #3]
	if (last >= first) {
   14efa:	4291      	cmp	r1, r2
   14efc:	d80a      	bhi.n	14f14 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   14efe:	eba2 0c01 	sub.w	ip, r2, r1
   14f02:	fa5f fc8c 	uxtb.w	ip, ip
   14f06:	4560      	cmp	r0, ip
   14f08:	d802      	bhi.n	14f10 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   14f0a:	4291      	cmp	r1, r2
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14f0c:	7818      	ldrb	r0, [r3, #0]
   14f0e:	d109      	bne.n	14f24 <ull_pdu_rx_alloc_peek+0x30>
		return NULL;
   14f10:	2000      	movs	r0, #0
}
   14f12:	4770      	bx	lr
		return count - first + last;
   14f14:	f893 c001 	ldrb.w	ip, [r3, #1]
   14f18:	4462      	add	r2, ip
   14f1a:	1a52      	subs	r2, r2, r1
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14f1c:	b2d2      	uxtb	r2, r2
   14f1e:	4290      	cmp	r0, r2
   14f20:	d8f6      	bhi.n	14f10 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14f22:	7818      	ldrb	r0, [r3, #0]
	return *((void **)(fifo + first * size));
   14f24:	fb01 3300 	mla	r3, r1, r0, r3
   14f28:	6858      	ldr	r0, [r3, #4]
   14f2a:	4770      	bx	lr
   14f2c:	20000390 	.word	0x20000390

00014f30 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   14f30:	4b09      	ldr	r3, [pc, #36]	; (14f58 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14f32:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14f34:	78da      	ldrb	r2, [r3, #3]
   14f36:	7818      	ldrb	r0, [r3, #0]
   14f38:	f893 c001 	ldrb.w	ip, [r3, #1]
   14f3c:	428a      	cmp	r2, r1
   14f3e:	d009      	beq.n	14f54 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   14f40:	1c4a      	adds	r2, r1, #1
   14f42:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14f44:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14f48:	4594      	cmp	ip, r2
   14f4a:	bf08      	it	eq
   14f4c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14f4e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14f50:	709a      	strb	r2, [r3, #2]
	return mem;
   14f52:	4770      	bx	lr
		return NULL;
   14f54:	2000      	movs	r0, #0
}
   14f56:	4770      	bx	lr
   14f58:	20000390 	.word	0x20000390

00014f5c <ull_rx_put>:
{
   14f5c:	b538      	push	{r3, r4, r5, lr}
   14f5e:	460c      	mov	r4, r1
   14f60:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14f62:	f005 fe9d 	bl	1aca0 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14f66:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14f68:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14f6a:	4a03      	ldr	r2, [pc, #12]	; (14f78 <ull_rx_put+0x1c>)
   14f6c:	4628      	mov	r0, r5
}
   14f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14f72:	f7fb bf27 	b.w	10dc4 <memq_enqueue>
   14f76:	bf00      	nop
   14f78:	20002928 	.word	0x20002928

00014f7c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14f7c:	2201      	movs	r2, #1
   14f7e:	4b02      	ldr	r3, [pc, #8]	; (14f88 <ull_rx_sched+0xc>)
   14f80:	4611      	mov	r1, r2
   14f82:	2000      	movs	r0, #0
   14f84:	f7fb bf92 	b.w	10eac <mayfly_enqueue>
   14f88:	20000500 	.word	0x20000500

00014f8c <ull_prepare_enqueue>:
{
   14f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14f90:	4c1a      	ldr	r4, [pc, #104]	; (14ffc <ull_prepare_enqueue+0x70>)
{
   14f92:	f89d 801c 	ldrb.w	r8, [sp, #28]
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14f96:	f894 c003 	ldrb.w	ip, [r4, #3]
   14f9a:	78a7      	ldrb	r7, [r4, #2]
{
   14f9c:	4606      	mov	r6, r0
	last = last + 1;
   14f9e:	f10c 0e01 	add.w	lr, ip, #1
	if (last == count) {
   14fa2:	7860      	ldrb	r0, [r4, #1]
	last = last + 1;
   14fa4:	fa5f fe8e 	uxtb.w	lr, lr
		last = 0U;
   14fa8:	4570      	cmp	r0, lr
   14faa:	bf08      	it	eq
   14fac:	f04f 0e00 	moveq.w	lr, #0
	if (last == first) {
   14fb0:	4577      	cmp	r7, lr
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14fb2:	7820      	ldrb	r0, [r4, #0]
   14fb4:	d01f      	beq.n	14ff6 <ull_prepare_enqueue+0x6a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14fb6:	fb1c f500 	smulbb	r5, ip, r0
   14fba:	f104 0c04 	add.w	ip, r4, #4
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   14fbe:	6810      	ldr	r0, [r2, #0]
   14fc0:	f8d2 9004 	ldr.w	r9, [r2, #4]
   14fc4:	6897      	ldr	r7, [r2, #8]
   14fc6:	68d2      	ldr	r2, [r2, #12]
   14fc8:	f84c 0005 	str.w	r0, [ip, r5]
   14fcc:	eb0c 0005 	add.w	r0, ip, r5
	e->is_abort_cb = is_abort_cb;
   14fd0:	e9c0 3604 	strd	r3, r6, [r0, #16]
	e->is_resume = is_resume;
   14fd4:	7f03      	ldrb	r3, [r0, #28]
   14fd6:	f8c0 9004 	str.w	r9, [r0, #4]
   14fda:	f008 0801 	and.w	r8, r8, #1
   14fde:	f023 0303 	bic.w	r3, r3, #3
   14fe2:	ea43 0308 	orr.w	r3, r3, r8
   14fe6:	6087      	str	r7, [r0, #8]
   14fe8:	60c2      	str	r2, [r0, #12]
	e->abort_cb = abort_cb;
   14fea:	6181      	str	r1, [r0, #24]
	e->is_resume = is_resume;
   14fec:	7703      	strb	r3, [r0, #28]
	*last = idx; /* Commit: Update write index */
   14fee:	f884 e003 	strb.w	lr, [r4, #3]
}
   14ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return NULL;
   14ff6:	2000      	movs	r0, #0
}
   14ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14ffc:	200003a8 	.word	0x200003a8

00015000 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   15000:	4b05      	ldr	r3, [pc, #20]	; (15018 <ull_prepare_dequeue_get+0x18>)
   15002:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   15004:	78da      	ldrb	r2, [r3, #3]
   15006:	7819      	ldrb	r1, [r3, #0]
   15008:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   1500a:	bf1a      	itte	ne
   1500c:	3304      	addne	r3, #4
   1500e:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   15012:	2000      	moveq	r0, #0
}
   15014:	4770      	bx	lr
   15016:	bf00      	nop
   15018:	200003a8 	.word	0x200003a8

0001501c <ull_prepare_dequeue_iter>:
{
   1501c:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1501e:	4b0d      	ldr	r3, [pc, #52]	; (15054 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   15020:	7802      	ldrb	r2, [r0, #0]
   15022:	7859      	ldrb	r1, [r3, #1]
   15024:	f893 c003 	ldrb.w	ip, [r3, #3]
   15028:	f893 e000 	ldrb.w	lr, [r3]
   1502c:	4291      	cmp	r1, r2
   1502e:	bf9c      	itt	ls
   15030:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   15032:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   15034:	4594      	cmp	ip, r2
   15036:	d00a      	beq.n	1504e <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   15038:	1c53      	adds	r3, r2, #1
   1503a:	b2db      	uxtb	r3, r3
		i = 0U;
   1503c:	4299      	cmp	r1, r3
   1503e:	bf08      	it	eq
   15040:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   15042:	4905      	ldr	r1, [pc, #20]	; (15058 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   15044:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   15046:	fb02 100e 	mla	r0, r2, lr, r1
}
   1504a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1504e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   15050:	e7fb      	b.n	1504a <ull_prepare_dequeue_iter+0x2e>
   15052:	bf00      	nop
   15054:	200003a8 	.word	0x200003a8
   15058:	200003ac 	.word	0x200003ac

0001505c <ull_prepare_dequeue>:
{
   1505c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   15060:	4c23      	ldr	r4, [pc, #140]	; (150f0 <ull_prepare_dequeue+0x94>)
   15062:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   15064:	78e1      	ldrb	r1, [r4, #3]
   15066:	7823      	ldrb	r3, [r4, #0]
   15068:	4291      	cmp	r1, r2
   1506a:	d027      	beq.n	150bc <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   1506c:	1d27      	adds	r7, r4, #4
			mfy.param = next;
   1506e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 150f4 <ull_prepare_dequeue+0x98>
			LL_ASSERT(!ret);
   15072:	f8df b084 	ldr.w	fp, [pc, #132]	; 150f8 <ull_prepare_dequeue+0x9c>
   15076:	f8df a084 	ldr.w	sl, [pc, #132]	; 150fc <ull_prepare_dequeue+0xa0>
   1507a:	4680      	mov	r8, r0
   1507c:	fb02 7003 	mla	r0, r2, r3, r7
		uint8_t is_aborted = next->is_aborted;
   15080:	7f03      	ldrb	r3, [r0, #28]
		if (!is_aborted) {
   15082:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   15084:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   15088:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   1508c:	d518      	bpl.n	150c0 <ull_prepare_dequeue+0x64>
	uint8_t _first = *first; /* Copy read-index */
   1508e:	78a2      	ldrb	r2, [r4, #2]
		MFIFO_DEQUEUE(prep);
   15090:	78e1      	ldrb	r1, [r4, #3]
   15092:	7820      	ldrb	r0, [r4, #0]
   15094:	f894 c001 	ldrb.w	ip, [r4, #1]
	_first += 1U;
   15098:	1c53      	adds	r3, r2, #1
	if (_first == last) {
   1509a:	4291      	cmp	r1, r2
	_first += 1U;
   1509c:	b2db      	uxtb	r3, r3
	if (_first == last) {
   1509e:	d00d      	beq.n	150bc <ull_prepare_dequeue+0x60>
		_first = 0U;
   150a0:	459c      	cmp	ip, r3
   150a2:	bf08      	it	eq
   150a4:	2300      	moveq	r3, #0
	if (first == last) {
   150a6:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   150a8:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   150aa:	d007      	beq.n	150bc <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   150ac:	fb03 7000 	mla	r0, r3, r0, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   150b0:	2d00      	cmp	r5, #0
   150b2:	d1e5      	bne.n	15080 <ull_prepare_dequeue+0x24>
   150b4:	b116      	cbz	r6, 150bc <ull_prepare_dequeue+0x60>
   150b6:	7f03      	ldrb	r3, [r0, #28]
   150b8:	07db      	lsls	r3, r3, #31
   150ba:	d5e1      	bpl.n	15080 <ull_prepare_dequeue+0x24>
}
   150bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   150c0:	f8c9 0008 	str.w	r0, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   150c4:	4b0b      	ldr	r3, [pc, #44]	; (150f4 <ull_prepare_dequeue+0x98>)
   150c6:	462a      	mov	r2, r5
   150c8:	4629      	mov	r1, r5
   150ca:	4640      	mov	r0, r8
   150cc:	f7fb feee 	bl	10eac <mayfly_enqueue>
			LL_ASSERT(!ret);
   150d0:	2800      	cmp	r0, #0
   150d2:	d0dc      	beq.n	1508e <ull_prepare_dequeue+0x32>
   150d4:	480a      	ldr	r0, [pc, #40]	; (15100 <ull_prepare_dequeue+0xa4>)
   150d6:	f240 7376 	movw	r3, #1910	; 0x776
   150da:	465a      	mov	r2, fp
   150dc:	4651      	mov	r1, sl
   150de:	f012 ff63 	bl	27fa8 <printk>
   150e2:	4040      	eors	r0, r0
   150e4:	f380 8811 	msr	BASEPRI, r0
   150e8:	f04f 0003 	mov.w	r0, #3
   150ec:	df02      	svc	2
   150ee:	e7ce      	b.n	1508e <ull_prepare_dequeue+0x32>
   150f0:	200003a8 	.word	0x200003a8
   150f4:	200004d0 	.word	0x200004d0
   150f8:	00030218 	.word	0x00030218
   150fc:	00030354 	.word	0x00030354
   15100:	0002fedc 	.word	0x0002fedc

00015104 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   15104:	4b06      	ldr	r3, [pc, #24]	; (15120 <ull_event_done_extra_get+0x1c>)
   15106:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   15108:	78d9      	ldrb	r1, [r3, #3]
   1510a:	7818      	ldrb	r0, [r3, #0]
   1510c:	4291      	cmp	r1, r2
   1510e:	d005      	beq.n	1511c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   15110:	fb02 3300 	mla	r3, r2, r0, r3
   15114:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   15116:	b110      	cbz	r0, 1511e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   15118:	3020      	adds	r0, #32
   1511a:	4770      	bx	lr
		return NULL;
   1511c:	2000      	movs	r0, #0
}
   1511e:	4770      	bx	lr
   15120:	20000368 	.word	0x20000368

00015124 <ull_event_done>:
{
   15124:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   15126:	4a13      	ldr	r2, [pc, #76]	; (15174 <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   15128:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1512a:	78d4      	ldrb	r4, [r2, #3]
   1512c:	7811      	ldrb	r1, [r2, #0]
   1512e:	429c      	cmp	r4, r3
{
   15130:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   15132:	7850      	ldrb	r0, [r2, #1]
   15134:	d01b      	beq.n	1516e <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   15136:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1513a:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1513c:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1513e:	b2db      	uxtb	r3, r3
		_first = 0U;
   15140:	4298      	cmp	r0, r3
   15142:	bf08      	it	eq
   15144:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   15146:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   15148:	b17c      	cbz	r4, 1516a <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1514a:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   1514c:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1514e:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   15150:	4a09      	ldr	r2, [pc, #36]	; (15178 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   15152:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   15154:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   15156:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   15158:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1515a:	f7fb fe33 	bl	10dc4 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1515e:	2201      	movs	r2, #1
   15160:	4b06      	ldr	r3, [pc, #24]	; (1517c <ull_event_done+0x58>)
   15162:	4611      	mov	r1, r2
   15164:	4628      	mov	r0, r5
   15166:	f7fb fea1 	bl	10eac <mayfly_enqueue>
}
   1516a:	4620      	mov	r0, r4
   1516c:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1516e:	2400      	movs	r4, #0
   15170:	e7fb      	b.n	1516a <ull_event_done+0x46>
   15172:	bf00      	nop
   15174:	20000368 	.word	0x20000368
   15178:	20002920 	.word	0x20002920
   1517c:	200004f0 	.word	0x200004f0

00015180 <ull_rxfifo_alloc>:
{
   15180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15184:	b083      	sub	sp, #12
   15186:	461d      	mov	r5, r3
   15188:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1518a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1518e:	e9cd 0400 	strd	r0, r4, [sp]
   15192:	e9dd a90d 	ldrd	sl, r9, [sp, #52]	; 0x34
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   15196:	b33b      	cbz	r3, 151e8 <ull_rxfifo_alloc+0x68>
   15198:	1e5c      	subs	r4, r3, #1
   1519a:	f895 b000 	ldrb.w	fp, [r5]
   1519e:	4688      	mov	r8, r1
   151a0:	4617      	mov	r7, r2
   151a2:	b2e4      	uxtb	r4, r4
	last = last + 1;
   151a4:	f10b 0301 	add.w	r3, fp, #1
   151a8:	fa5f fb83 	uxtb.w	fp, r3
		last = 0U;
   151ac:	45d8      	cmp	r8, fp
   151ae:	bf08      	it	eq
   151b0:	f04f 0b00 	moveq.w	fp, #0
	if (last == first) {
   151b4:	455f      	cmp	r7, fp
		link = mem_acquire(link_free);
   151b6:	4648      	mov	r0, r9
   151b8:	d016      	beq.n	151e8 <ull_rxfifo_alloc+0x68>
   151ba:	f7fb fda3 	bl	10d04 <mem_acquire>
   151be:	4606      	mov	r6, r0
		rx = mem_acquire(mem_free);
   151c0:	4650      	mov	r0, sl
		if (!link) {
   151c2:	b18e      	cbz	r6, 151e8 <ull_rxfifo_alloc+0x68>
		rx = mem_acquire(mem_free);
   151c4:	f7fb fd9e 	bl	10d04 <mem_acquire>
		if (!rx) {
   151c8:	b188      	cbz	r0, 151ee <ull_rxfifo_alloc+0x6e>
		link->mem = NULL;
   151ca:	2300      	movs	r3, #0
   151cc:	6073      	str	r3, [r6, #4]
		rx->link = link;
   151ce:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   151d0:	782a      	ldrb	r2, [r5, #0]
   151d2:	9b00      	ldr	r3, [sp, #0]
   151d4:	fb12 f203 	smulbb	r2, r2, r3
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   151d8:	9b01      	ldr	r3, [sp, #4]
   151da:	5098      	str	r0, [r3, r2]
	while ((max--) && mfifo_enqueue_idx_get(n, f, *l, &idx)) {
   151dc:	3c01      	subs	r4, #1
   151de:	b2e4      	uxtb	r4, r4
   151e0:	2cff      	cmp	r4, #255	; 0xff
	*last = idx; /* Commit: Update write index */
   151e2:	f885 b000 	strb.w	fp, [r5]
   151e6:	d1dd      	bne.n	151a4 <ull_rxfifo_alloc+0x24>
}
   151e8:	b003      	add	sp, #12
   151ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, link_free);
   151ee:	4649      	mov	r1, r9
   151f0:	4630      	mov	r0, r6
}
   151f2:	b003      	add	sp, #12
   151f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, link_free);
   151f8:	f7fb bd9a 	b.w	10d30 <mem_release>

000151fc <init_reset>:
{
   151fc:	b570      	push	{r4, r5, r6, lr}
	RXFIFO_INIT_ALLOC(done);
   151fe:	4c3f      	ldr	r4, [pc, #252]	; (152fc <init_reset+0x100>)
   15200:	4d3f      	ldr	r5, [pc, #252]	; (15300 <init_reset+0x104>)
   15202:	79a2      	ldrb	r2, [r4, #6]
   15204:	88a1      	ldrh	r1, [r4, #4]
   15206:	4e3f      	ldr	r6, [pc, #252]	; (15304 <init_reset+0x108>)
   15208:	2000      	movs	r0, #0
{
   1520a:	b084      	sub	sp, #16
	RXFIFO_INIT_ALLOC(done);
   1520c:	4623      	mov	r3, r4
   1520e:	8068      	strh	r0, [r5, #2]
   15210:	f104 0008 	add.w	r0, r4, #8
   15214:	f7fb fd52 	bl	10cbc <mem_init>
   15218:	79e3      	ldrb	r3, [r4, #7]
   1521a:	79a2      	ldrb	r2, [r4, #6]
   1521c:	1d30      	adds	r0, r6, #4
   1521e:	441a      	add	r2, r3
   15220:	2108      	movs	r1, #8
   15222:	4633      	mov	r3, r6
   15224:	f7fb fd4a 	bl	10cbc <mem_init>
   15228:	9602      	str	r6, [sp, #8]
   1522a:	462e      	mov	r6, r5
   1522c:	79a3      	ldrb	r3, [r4, #6]
   1522e:	f816 0b04 	ldrb.w	r0, [r6], #4
   15232:	78aa      	ldrb	r2, [r5, #2]
   15234:	7869      	ldrb	r1, [r5, #1]
   15236:	9303      	str	r3, [sp, #12]
   15238:	e9cd 6400 	strd	r6, r4, [sp]
   1523c:	1ceb      	adds	r3, r5, #3
   1523e:	f7ff ff9f 	bl	15180 <ull_rxfifo_alloc>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   15242:	4b31      	ldr	r3, [pc, #196]	; (15308 <init_reset+0x10c>)
   15244:	2209      	movs	r2, #9
   15246:	1d18      	adds	r0, r3, #4
   15248:	2144      	movs	r1, #68	; 0x44
   1524a:	f7fb fd37 	bl	10cbc <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1524e:	4b2f      	ldr	r3, [pc, #188]	; (1530c <init_reset+0x110>)
   15250:	220a      	movs	r2, #10
   15252:	1d18      	adds	r0, r3, #4
   15254:	2108      	movs	r1, #8
   15256:	f7fb fd31 	bl	10cbc <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1525a:	482c      	ldr	r0, [pc, #176]	; (1530c <init_reset+0x110>)
   1525c:	f7fb fd52 	bl	10d04 <mem_acquire>
	LL_ASSERT(link);
   15260:	4604      	mov	r4, r0
   15262:	b308      	cbz	r0, 152a8 <init_reset+0xac>
	MEMQ_INIT(ull_rx, link);
   15264:	4a2a      	ldr	r2, [pc, #168]	; (15310 <init_reset+0x114>)
   15266:	4620      	mov	r0, r4
   15268:	1f11      	subs	r1, r2, #4
   1526a:	f7fb fd9d 	bl	10da8 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   1526e:	4825      	ldr	r0, [pc, #148]	; (15304 <init_reset+0x108>)
   15270:	f7fb fd48 	bl	10d04 <mem_acquire>
	LL_ASSERT(link);
   15274:	4604      	mov	r4, r0
   15276:	b328      	cbz	r0, 152c4 <init_reset+0xc8>
	MEMQ_INIT(ull_done, link);
   15278:	4a26      	ldr	r2, [pc, #152]	; (15314 <init_reset+0x118>)
   1527a:	4620      	mov	r0, r4
   1527c:	1f11      	subs	r1, r2, #4
   1527e:	f7fb fd93 	bl	10da8 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   15282:	4822      	ldr	r0, [pc, #136]	; (1530c <init_reset+0x110>)
   15284:	f7fb fd3e 	bl	10d04 <mem_acquire>
	LL_ASSERT(link);
   15288:	4604      	mov	r4, r0
   1528a:	b348      	cbz	r0, 152e0 <init_reset+0xe4>
	MEMQ_INIT(ll_rx, link);
   1528c:	4a22      	ldr	r2, [pc, #136]	; (15318 <init_reset+0x11c>)
   1528e:	4620      	mov	r0, r4
   15290:	1f11      	subs	r1, r2, #4
   15292:	f7fb fd89 	bl	10da8 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   15296:	4b21      	ldr	r3, [pc, #132]	; (1531c <init_reset+0x120>)
   15298:	2206      	movs	r2, #6
	rx_alloc(UINT8_MAX);
   1529a:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1529c:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   1529e:	f7ff f8cf 	bl	14440 <rx_alloc>
}
   152a2:	2000      	movs	r0, #0
   152a4:	b004      	add	sp, #16
   152a6:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   152a8:	4a1d      	ldr	r2, [pc, #116]	; (15320 <init_reset+0x124>)
   152aa:	491e      	ldr	r1, [pc, #120]	; (15324 <init_reset+0x128>)
   152ac:	481e      	ldr	r0, [pc, #120]	; (15328 <init_reset+0x12c>)
   152ae:	f640 0302 	movw	r3, #2050	; 0x802
   152b2:	f012 fe79 	bl	27fa8 <printk>
   152b6:	4040      	eors	r0, r0
   152b8:	f380 8811 	msr	BASEPRI, r0
   152bc:	f04f 0003 	mov.w	r0, #3
   152c0:	df02      	svc	2
   152c2:	e7cf      	b.n	15264 <init_reset+0x68>
	LL_ASSERT(link);
   152c4:	4a16      	ldr	r2, [pc, #88]	; (15320 <init_reset+0x124>)
   152c6:	4917      	ldr	r1, [pc, #92]	; (15324 <init_reset+0x128>)
   152c8:	4817      	ldr	r0, [pc, #92]	; (15328 <init_reset+0x12c>)
   152ca:	f640 030a 	movw	r3, #2058	; 0x80a
   152ce:	f012 fe6b 	bl	27fa8 <printk>
   152d2:	4040      	eors	r0, r0
   152d4:	f380 8811 	msr	BASEPRI, r0
   152d8:	f04f 0003 	mov.w	r0, #3
   152dc:	df02      	svc	2
   152de:	e7cb      	b.n	15278 <init_reset+0x7c>
	LL_ASSERT(link);
   152e0:	4a0f      	ldr	r2, [pc, #60]	; (15320 <init_reset+0x124>)
   152e2:	4910      	ldr	r1, [pc, #64]	; (15324 <init_reset+0x128>)
   152e4:	4810      	ldr	r0, [pc, #64]	; (15328 <init_reset+0x12c>)
   152e6:	f640 0312 	movw	r3, #2066	; 0x812
   152ea:	f012 fe5d 	bl	27fa8 <printk>
   152ee:	4040      	eors	r0, r0
   152f0:	f380 8811 	msr	BASEPRI, r0
   152f4:	f04f 0003 	mov.w	r0, #3
   152f8:	df02      	svc	2
   152fa:	e7c7      	b.n	1528c <init_reset+0x90>
   152fc:	20000290 	.word	0x20000290
   15300:	20000368 	.word	0x20000368
   15304:	20002628 	.word	0x20002628
   15308:	200026ac 	.word	0x200026ac
   1530c:	20002658 	.word	0x20002658
   15310:	20002928 	.word	0x20002928
   15314:	20002920 	.word	0x20002920
   15318:	20002918 	.word	0x20002918
   1531c:	20002654 	.word	0x20002654
   15320:	00030218 	.word	0x00030218
   15324:	00030624 	.word	0x00030624
   15328:	0002fedc 	.word	0x0002fedc

0001532c <ll_init>:
{
   1532c:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   1532e:	4b30      	ldr	r3, [pc, #192]	; (153f0 <ll_init+0xc4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   15330:	4d30      	ldr	r5, [pc, #192]	; (153f4 <ll_init+0xc8>)
	sem_recv = sem_rx;
   15332:	6018      	str	r0, [r3, #0]
{
   15334:	b087      	sub	sp, #28
	cntr_init();
   15336:	f00a fb4f 	bl	1f9d8 <cntr_init>
	mayfly_init();
   1533a:	f7fb fd65 	bl	10e08 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1533e:	4a2e      	ldr	r2, [pc, #184]	; (153f8 <ll_init+0xcc>)
   15340:	4c2e      	ldr	r4, [pc, #184]	; (153fc <ll_init+0xd0>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   15342:	492f      	ldr	r1, [pc, #188]	; (15400 <ll_init+0xd4>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   15344:	e9cd 2504 	strd	r2, r5, [sp, #16]
   15348:	4a2e      	ldr	r2, [pc, #184]	; (15404 <ll_init+0xd8>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1534a:	2002      	movs	r0, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1534c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   15350:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   15352:	240c      	movs	r4, #12
   15354:	e9cd 1400 	strd	r1, r4, [sp]
   15358:	4a2b      	ldr	r2, [pc, #172]	; (15408 <ll_init+0xdc>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1535a:	7408      	strb	r0, [r1, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1535c:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1535e:	700b      	strb	r3, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   15360:	720b      	strb	r3, [r1, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   15362:	2000      	movs	r0, #0
   15364:	2106      	movs	r1, #6
   15366:	f7fc febb 	bl	120e0 <ticker_init>
	LL_ASSERT(!err);
   1536a:	2800      	cmp	r0, #0
   1536c:	d132      	bne.n	153d4 <ll_init+0xa8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1536e:	2201      	movs	r2, #1
   15370:	2100      	movs	r1, #0
   15372:	4826      	ldr	r0, [pc, #152]	; (1540c <ll_init+0xe0>)
   15374:	f018 fcf3 	bl	2dd5e <z_impl_k_sem_init>
	err = lll_init();
   15378:	f008 f810 	bl	1d39c <lll_init>
	if (err) {
   1537c:	4604      	mov	r4, r0
   1537e:	b110      	cbz	r0, 15386 <ll_init+0x5a>
}
   15380:	4620      	mov	r0, r4
   15382:	b007      	add	sp, #28
   15384:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   15386:	f7ff ff39 	bl	151fc <init_reset>
	if (err) {
   1538a:	4604      	mov	r4, r0
   1538c:	2800      	cmp	r0, #0
   1538e:	d1f7      	bne.n	15380 <ll_init+0x54>
	err = lll_adv_init();
   15390:	f008 fc68 	bl	1dc64 <lll_adv_init>
	if (err) {
   15394:	4604      	mov	r4, r0
   15396:	2800      	cmp	r0, #0
   15398:	d1f2      	bne.n	15380 <ll_init+0x54>
	err = ull_adv_init();
   1539a:	f000 fd07 	bl	15dac <ull_adv_init>
	if (err) {
   1539e:	4604      	mov	r4, r0
   153a0:	2800      	cmp	r0, #0
   153a2:	d1ed      	bne.n	15380 <ll_init+0x54>
	err = lll_scan_init();
   153a4:	f009 fbf0 	bl	1eb88 <lll_scan_init>
	if (err) {
   153a8:	4604      	mov	r4, r0
   153aa:	2800      	cmp	r0, #0
   153ac:	d1e8      	bne.n	15380 <ll_init+0x54>
	err = ull_scan_init();
   153ae:	f000 febb 	bl	16128 <ull_scan_init>
	if (err) {
   153b2:	4604      	mov	r4, r0
   153b4:	2800      	cmp	r0, #0
   153b6:	d1e3      	bne.n	15380 <ll_init+0x54>
	err = lll_conn_init();
   153b8:	f009 fd14 	bl	1ede4 <lll_conn_init>
	if (err) {
   153bc:	4604      	mov	r4, r0
   153be:	2800      	cmp	r0, #0
   153c0:	d1de      	bne.n	15380 <ll_init+0x54>
	err = ull_conn_init();
   153c2:	f002 f92b 	bl	1761c <ull_conn_init>
	if (err) {
   153c6:	4604      	mov	r4, r0
   153c8:	2800      	cmp	r0, #0
   153ca:	d1d9      	bne.n	15380 <ll_init+0x54>
		ull_filter_reset(true);
   153cc:	2001      	movs	r0, #1
   153ce:	f007 f8a1 	bl	1c514 <ull_filter_reset>
	return  0;
   153d2:	e7d5      	b.n	15380 <ll_init+0x54>
	LL_ASSERT(!err);
   153d4:	4a0e      	ldr	r2, [pc, #56]	; (15410 <ll_init+0xe4>)
   153d6:	490f      	ldr	r1, [pc, #60]	; (15414 <ll_init+0xe8>)
   153d8:	480f      	ldr	r0, [pc, #60]	; (15418 <ll_init+0xec>)
   153da:	f240 230d 	movw	r3, #525	; 0x20d
   153de:	f012 fde3 	bl	27fa8 <printk>
   153e2:	4040      	eors	r0, r0
   153e4:	f380 8811 	msr	BASEPRI, r0
   153e8:	f04f 0003 	mov.w	r0, #3
   153ec:	df02      	svc	2
   153ee:	e7be      	b.n	1536e <ll_init+0x42>
   153f0:	2000292c 	.word	0x2000292c
   153f4:	00020711 	.word	0x00020711
   153f8:	000205c1 	.word	0x000205c1
   153fc:	0002055d 	.word	0x0002055d
   15400:	20002cd8 	.word	0x20002cd8
   15404:	20002a68 	.word	0x20002a68
   15408:	20002948 	.word	0x20002948
   1540c:	20002930 	.word	0x20002930
   15410:	00030218 	.word	0x00030218
   15414:	00030254 	.word	0x00030254
   15418:	0002fedc 	.word	0x0002fedc

0001541c <ll_reset>:
{
   1541c:	b510      	push	{r4, lr}
   1541e:	b086      	sub	sp, #24
	err = ull_adv_reset();
   15420:	f000 fcd4 	bl	15dcc <ull_adv_reset>
	LL_ASSERT(!err);
   15424:	2800      	cmp	r0, #0
   15426:	d133      	bne.n	15490 <ll_reset+0x74>
	err = ull_scan_reset();
   15428:	f000 fefe 	bl	16228 <ull_scan_reset>
	LL_ASSERT(!err);
   1542c:	2800      	cmp	r0, #0
   1542e:	d140      	bne.n	154b2 <ll_reset+0x96>
	err = ull_conn_reset();
   15430:	f002 f8f6 	bl	17620 <ull_conn_reset>
	LL_ASSERT(!err);
   15434:	2800      	cmp	r0, #0
   15436:	d14d      	bne.n	154d4 <ll_reset+0xb8>
	MFIFO_INIT(tx_ack);
   15438:	4b43      	ldr	r3, [pc, #268]	; (15548 <ll_reset+0x12c>)
   1543a:	2400      	movs	r4, #0
   1543c:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1543e:	4620      	mov	r0, r4
   15440:	f007 f868 	bl	1c514 <ull_filter_reset>
	MFIFO_INIT(prep);
   15444:	4941      	ldr	r1, [pc, #260]	; (1554c <ll_reset+0x130>)
	MFIFO_INIT(pdu_rx_free);
   15446:	4a42      	ldr	r2, [pc, #264]	; (15550 <ll_reset+0x134>)
	MFIFO_INIT(ll_pdu_rx_free);
   15448:	4b42      	ldr	r3, [pc, #264]	; (15554 <ll_reset+0x138>)
	MFIFO_INIT(prep);
   1544a:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   1544c:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1544e:	805c      	strh	r4, [r3, #2]
   15450:	2201      	movs	r2, #1
   15452:	4621      	mov	r1, r4
   15454:	4668      	mov	r0, sp
   15456:	f018 fc82 	bl	2dd5e <z_impl_k_sem_init>
		mfy.param = &sem;
   1545a:	4b3f      	ldr	r3, [pc, #252]	; (15558 <ll_reset+0x13c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1545c:	4622      	mov	r2, r4
   1545e:	4621      	mov	r1, r4
   15460:	2003      	movs	r0, #3
		mfy.param = &sem;
   15462:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   15466:	f7fb fd21 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!retval);
   1546a:	2800      	cmp	r0, #0
   1546c:	d15d      	bne.n	1552a <ll_reset+0x10e>
	return z_impl_k_sem_take(sem, timeout);
   1546e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15476:	4668      	mov	r0, sp
   15478:	f00f fc48 	bl	24d0c <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   1547c:	f000 fcc0 	bl	15e00 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   15480:	2800      	cmp	r0, #0
   15482:	d144      	bne.n	1550e <ll_reset+0xf2>
	err = init_reset();
   15484:	f7ff feba 	bl	151fc <init_reset>
	LL_ASSERT(!err);
   15488:	2800      	cmp	r0, #0
   1548a:	d131      	bne.n	154f0 <ll_reset+0xd4>
}
   1548c:	b006      	add	sp, #24
   1548e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   15490:	4a32      	ldr	r2, [pc, #200]	; (1555c <ll_reset+0x140>)
   15492:	4933      	ldr	r1, [pc, #204]	; (15560 <ll_reset+0x144>)
   15494:	4833      	ldr	r0, [pc, #204]	; (15564 <ll_reset+0x148>)
   15496:	f240 23ad 	movw	r3, #685	; 0x2ad
   1549a:	f012 fd85 	bl	27fa8 <printk>
   1549e:	4040      	eors	r0, r0
   154a0:	f380 8811 	msr	BASEPRI, r0
   154a4:	f04f 0003 	mov.w	r0, #3
   154a8:	df02      	svc	2
	err = ull_scan_reset();
   154aa:	f000 febd 	bl	16228 <ull_scan_reset>
	LL_ASSERT(!err);
   154ae:	2800      	cmp	r0, #0
   154b0:	d0be      	beq.n	15430 <ll_reset+0x14>
   154b2:	4a2a      	ldr	r2, [pc, #168]	; (1555c <ll_reset+0x140>)
   154b4:	492a      	ldr	r1, [pc, #168]	; (15560 <ll_reset+0x144>)
   154b6:	482b      	ldr	r0, [pc, #172]	; (15564 <ll_reset+0x148>)
   154b8:	f240 23b3 	movw	r3, #691	; 0x2b3
   154bc:	f012 fd74 	bl	27fa8 <printk>
   154c0:	4040      	eors	r0, r0
   154c2:	f380 8811 	msr	BASEPRI, r0
   154c6:	f04f 0003 	mov.w	r0, #3
   154ca:	df02      	svc	2
	err = ull_conn_reset();
   154cc:	f002 f8a8 	bl	17620 <ull_conn_reset>
	LL_ASSERT(!err);
   154d0:	2800      	cmp	r0, #0
   154d2:	d0b1      	beq.n	15438 <ll_reset+0x1c>
   154d4:	4a21      	ldr	r2, [pc, #132]	; (1555c <ll_reset+0x140>)
   154d6:	4922      	ldr	r1, [pc, #136]	; (15560 <ll_reset+0x144>)
   154d8:	4822      	ldr	r0, [pc, #136]	; (15564 <ll_reset+0x148>)
   154da:	f240 23de 	movw	r3, #734	; 0x2de
   154de:	f012 fd63 	bl	27fa8 <printk>
   154e2:	4040      	eors	r0, r0
   154e4:	f380 8811 	msr	BASEPRI, r0
   154e8:	f04f 0003 	mov.w	r0, #3
   154ec:	df02      	svc	2
   154ee:	e7a3      	b.n	15438 <ll_reset+0x1c>
	LL_ASSERT(!err);
   154f0:	4a1a      	ldr	r2, [pc, #104]	; (1555c <ll_reset+0x140>)
   154f2:	491b      	ldr	r1, [pc, #108]	; (15560 <ll_reset+0x144>)
   154f4:	481b      	ldr	r0, [pc, #108]	; (15564 <ll_reset+0x148>)
   154f6:	f240 3327 	movw	r3, #807	; 0x327
   154fa:	f012 fd55 	bl	27fa8 <printk>
   154fe:	4040      	eors	r0, r0
   15500:	f380 8811 	msr	BASEPRI, r0
   15504:	f04f 0003 	mov.w	r0, #3
   15508:	df02      	svc	2
}
   1550a:	b006      	add	sp, #24
   1550c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1550e:	4a13      	ldr	r2, [pc, #76]	; (1555c <ll_reset+0x140>)
   15510:	4913      	ldr	r1, [pc, #76]	; (15560 <ll_reset+0x144>)
   15512:	4814      	ldr	r0, [pc, #80]	; (15564 <ll_reset+0x148>)
   15514:	f240 331a 	movw	r3, #794	; 0x31a
   15518:	f012 fd46 	bl	27fa8 <printk>
   1551c:	4040      	eors	r0, r0
   1551e:	f380 8811 	msr	BASEPRI, r0
   15522:	f04f 0003 	mov.w	r0, #3
   15526:	df02      	svc	2
   15528:	e7ac      	b.n	15484 <ll_reset+0x68>
		LL_ASSERT(!retval);
   1552a:	4a0c      	ldr	r2, [pc, #48]	; (1555c <ll_reset+0x140>)
   1552c:	490e      	ldr	r1, [pc, #56]	; (15568 <ll_reset+0x14c>)
   1552e:	480d      	ldr	r0, [pc, #52]	; (15564 <ll_reset+0x148>)
   15530:	f240 330d 	movw	r3, #781	; 0x30d
   15534:	f012 fd38 	bl	27fa8 <printk>
   15538:	4040      	eors	r0, r0
   1553a:	f380 8811 	msr	BASEPRI, r0
   1553e:	f04f 0003 	mov.w	r0, #3
   15542:	df02      	svc	2
   15544:	e793      	b.n	1546e <ll_reset+0x52>
   15546:	bf00      	nop
   15548:	200004ac 	.word	0x200004ac
   1554c:	200003a8 	.word	0x200003a8
   15550:	20000390 	.word	0x20000390
   15554:	20000380 	.word	0x20000380
   15558:	200004e0 	.word	0x200004e0
   1555c:	00030218 	.word	0x00030218
   15560:	00030254 	.word	0x00030254
   15564:	0002fedc 	.word	0x0002fedc
   15568:	0003037c 	.word	0x0003037c

0001556c <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1556c:	b510      	push	{r4, lr}
   1556e:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   15570:	2400      	movs	r4, #0
   15572:	e9cd 4400 	strd	r4, r4, [sp]
   15576:	9b04      	ldr	r3, [sp, #16]
   15578:	f008 f934 	bl	1d7e4 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1557c:	b002      	add	sp, #8
   1557e:	bd10      	pop	{r4, pc}

00015580 <lll_resume>:

void lll_resume(void *param)
{
   15580:	b510      	push	{r4, lr}
   15582:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   15584:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   15586:	691a      	ldr	r2, [r3, #16]
   15588:	6999      	ldr	r1, [r3, #24]
   1558a:	2401      	movs	r4, #1
{
   1558c:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1558e:	4020      	ands	r0, r4
   15590:	e9cd 0400 	strd	r0, r4, [sp]
   15594:	6958      	ldr	r0, [r3, #20]
   15596:	f008 f925 	bl	1d7e4 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1559a:	b108      	cbz	r0, 155a0 <lll_resume+0x20>
   1559c:	3077      	adds	r0, #119	; 0x77
   1559e:	d101      	bne.n	155a4 <lll_resume+0x24>
}
   155a0:	b002      	add	sp, #8
   155a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   155a4:	4a06      	ldr	r2, [pc, #24]	; (155c0 <lll_resume+0x40>)
   155a6:	4907      	ldr	r1, [pc, #28]	; (155c4 <lll_resume+0x44>)
   155a8:	4807      	ldr	r0, [pc, #28]	; (155c8 <lll_resume+0x48>)
   155aa:	234f      	movs	r3, #79	; 0x4f
   155ac:	f012 fcfc 	bl	27fa8 <printk>
   155b0:	4040      	eors	r0, r0
   155b2:	f380 8811 	msr	BASEPRI, r0
   155b6:	f04f 0003 	mov.w	r0, #3
   155ba:	df02      	svc	2
}
   155bc:	b002      	add	sp, #8
   155be:	bd10      	pop	{r4, pc}
   155c0:	00030390 	.word	0x00030390
   155c4:	000303d4 	.word	0x000303d4
   155c8:	0002fedc 	.word	0x0002fedc

000155cc <ticker_stop_cb>:
{
   155cc:	b530      	push	{r4, r5, lr}
   155ce:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   155d0:	4b19      	ldr	r3, [pc, #100]	; (15638 <ticker_stop_cb+0x6c>)
{
   155d2:	9d07      	ldr	r5, [sp, #28]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   155d4:	4a19      	ldr	r2, [pc, #100]	; (1563c <ticker_stop_cb+0x70>)
   155d6:	1aeb      	subs	r3, r5, r3
   155d8:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   155dc:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	handle = ull_adv_handle_get(adv);
   155e0:	f3c3 1487 	ubfx	r4, r3, #6, #8
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   155e4:	d119      	bne.n	1561a <ticker_stop_cb+0x4e>
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   155e6:	1ca2      	adds	r2, r4, #2
   155e8:	4b15      	ldr	r3, [pc, #84]	; (15640 <ticker_stop_cb+0x74>)
   155ea:	9500      	str	r5, [sp, #0]
   155ec:	b2d2      	uxtb	r2, r2
   155ee:	2101      	movs	r1, #1
   155f0:	2000      	movs	r0, #0
   155f2:	f7fc feb1 	bl	12358 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   155f6:	f030 0302 	bics.w	r3, r0, #2
   155fa:	d00c      	beq.n	15616 <ticker_stop_cb+0x4a>
   155fc:	4a11      	ldr	r2, [pc, #68]	; (15644 <ticker_stop_cb+0x78>)
   155fe:	4912      	ldr	r1, [pc, #72]	; (15648 <ticker_stop_cb+0x7c>)
   15600:	4812      	ldr	r0, [pc, #72]	; (1564c <ticker_stop_cb+0x80>)
   15602:	f640 03d2 	movw	r3, #2258	; 0x8d2
   15606:	f012 fccf 	bl	27fa8 <printk>
   1560a:	4040      	eors	r0, r0
   1560c:	f380 8811 	msr	BASEPRI, r0
   15610:	f04f 0003 	mov.w	r0, #3
   15614:	df02      	svc	2
}
   15616:	b003      	add	sp, #12
   15618:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1561a:	4a0a      	ldr	r2, [pc, #40]	; (15644 <ticker_stop_cb+0x78>)
   1561c:	490c      	ldr	r1, [pc, #48]	; (15650 <ticker_stop_cb+0x84>)
   1561e:	480b      	ldr	r0, [pc, #44]	; (1564c <ticker_stop_cb+0x80>)
   15620:	f640 03cd 	movw	r3, #2253	; 0x8cd
   15624:	f012 fcc0 	bl	27fa8 <printk>
   15628:	4040      	eors	r0, r0
   1562a:	f380 8811 	msr	BASEPRI, r0
   1562e:	f04f 0003 	mov.w	r0, #3
   15632:	df02      	svc	2
   15634:	e7d7      	b.n	155e6 <ticker_stop_cb+0x1a>
   15636:	bf00      	nop
   15638:	20002d10 	.word	0x20002d10
   1563c:	8d3dcb09 	.word	0x8d3dcb09
   15640:	00015655 	.word	0x00015655
   15644:	000303fc 	.word	0x000303fc
   15648:	00030448 	.word	0x00030448
   1564c:	0002fedc 	.word	0x0002fedc
   15650:	0003043c 	.word	0x0003043c

00015654 <ticker_stop_op_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   15654:	b100      	cbz	r0, 15658 <ticker_stop_op_cb+0x4>
   15656:	4770      	bx	lr
	mfy.param = param;
   15658:	4b0c      	ldr	r3, [pc, #48]	; (1568c <ticker_stop_op_cb+0x38>)
{
   1565a:	b510      	push	{r4, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1565c:	4602      	mov	r2, r0
   1565e:	460c      	mov	r4, r1
   15660:	2002      	movs	r0, #2
   15662:	2101      	movs	r1, #1
	mfy.param = param;
   15664:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   15666:	f7fb fc21 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!ret);
   1566a:	b900      	cbnz	r0, 1566e <ticker_stop_op_cb+0x1a>
}
   1566c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1566e:	4a08      	ldr	r2, [pc, #32]	; (15690 <ticker_stop_op_cb+0x3c>)
   15670:	4908      	ldr	r1, [pc, #32]	; (15694 <ticker_stop_op_cb+0x40>)
   15672:	4809      	ldr	r0, [pc, #36]	; (15698 <ticker_stop_op_cb+0x44>)
   15674:	f640 03ee 	movw	r3, #2286	; 0x8ee
   15678:	f012 fc96 	bl	27fa8 <printk>
   1567c:	4040      	eors	r0, r0
   1567e:	f380 8811 	msr	BASEPRI, r0
   15682:	f04f 0003 	mov.w	r0, #3
   15686:	df02      	svc	2
}
   15688:	bd10      	pop	{r4, pc}
   1568a:	bf00      	nop
   1568c:	20000540 	.word	0x20000540
   15690:	000303fc 	.word	0x000303fc
   15694:	00030354 	.word	0x00030354
   15698:	0002fedc 	.word	0x0002fedc

0001569c <disabled_cb>:
{
   1569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1569e:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   156a0:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
   156a2:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   156a4:	b1d7      	cbz	r7, 156dc <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   156a6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
   156a8:	2300      	movs	r3, #0
   156aa:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   156ac:	b34c      	cbz	r4, 15702 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   156ae:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   156b0:	2316      	movs	r3, #22
	adv->node_rx_cc_free = NULL;
   156b2:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   156b4:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   156b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   156ba:	80e3      	strh	r3, [r4, #6]
__ssp_bos_icheck3(memset, void *, int)
   156bc:	221e      	movs	r2, #30
   156be:	f104 001c 	add.w	r0, r4, #28
   156c2:	f018 ff71 	bl	2e5a8 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   156c6:	233c      	movs	r3, #60	; 0x3c
   156c8:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   156ca:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   156cc:	4621      	mov	r1, r4
   156ce:	4638      	mov	r0, r7
   156d0:	f7ff fab4 	bl	14c3c <ll_rx_put>
}
   156d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   156d8:	f7ff baba 	b.w	14c50 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   156dc:	4a10      	ldr	r2, [pc, #64]	; (15720 <disabled_cb+0x84>)
   156de:	4911      	ldr	r1, [pc, #68]	; (15724 <disabled_cb+0x88>)
   156e0:	4811      	ldr	r0, [pc, #68]	; (15728 <disabled_cb+0x8c>)
   156e2:	f640 131a 	movw	r3, #2330	; 0x91a
   156e6:	f012 fc5f 	bl	27fa8 <printk>
   156ea:	4040      	eors	r0, r0
   156ec:	f380 8811 	msr	BASEPRI, r0
   156f0:	f04f 0003 	mov.w	r0, #3
   156f4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   156f6:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
   156f8:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
   156fa:	2300      	movs	r3, #0
   156fc:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
   156fe:	2c00      	cmp	r4, #0
   15700:	d1d5      	bne.n	156ae <disabled_cb+0x12>
   15702:	4a07      	ldr	r2, [pc, #28]	; (15720 <disabled_cb+0x84>)
   15704:	4909      	ldr	r1, [pc, #36]	; (1572c <disabled_cb+0x90>)
   15706:	4808      	ldr	r0, [pc, #32]	; (15728 <disabled_cb+0x8c>)
   15708:	f640 131e 	movw	r3, #2334	; 0x91e
   1570c:	f012 fc4c 	bl	27fa8 <printk>
   15710:	4040      	eors	r0, r0
   15712:	f380 8811 	msr	BASEPRI, r0
   15716:	f04f 0003 	mov.w	r0, #3
   1571a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1571c:	6e6c      	ldr	r4, [r5, #100]	; 0x64
   1571e:	e7c6      	b.n	156ae <disabled_cb+0x12>
   15720:	000303fc 	.word	0x000303fc
   15724:	00030464 	.word	0x00030464
   15728:	0002fedc 	.word	0x0002fedc
   1572c:	00030478 	.word	0x00030478

00015730 <adv_disable>:
{
   15730:	b538      	push	{r3, r4, r5, lr}
   15732:	4604      	mov	r4, r0
   15734:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   15738:	b353      	cbz	r3, 15790 <adv_disable+0x60>
		mfy.param = &adv->lll;
   1573a:	4d17      	ldr	r5, [pc, #92]	; (15798 <adv_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1573c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &adv->lll;
   1573e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   15740:	b16b      	cbz	r3, 1575e <adv_disable+0x2e>
   15742:	4a16      	ldr	r2, [pc, #88]	; (1579c <adv_disable+0x6c>)
   15744:	4916      	ldr	r1, [pc, #88]	; (157a0 <adv_disable+0x70>)
   15746:	4817      	ldr	r0, [pc, #92]	; (157a4 <adv_disable+0x74>)
   15748:	f640 1303 	movw	r3, #2307	; 0x903
   1574c:	f012 fc2c 	bl	27fa8 <printk>
   15750:	4040      	eors	r0, r0
   15752:	f380 8811 	msr	BASEPRI, r0
   15756:	f04f 0003 	mov.w	r0, #3
   1575a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1575c:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1575e:	4912      	ldr	r1, [pc, #72]	; (157a8 <adv_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15760:	4b0d      	ldr	r3, [pc, #52]	; (15798 <adv_disable+0x68>)
   15762:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   15764:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15768:	4611      	mov	r1, r2
   1576a:	2001      	movs	r0, #1
   1576c:	f7fb fb9e 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!ret);
   15770:	b900      	cbnz	r0, 15774 <adv_disable+0x44>
}
   15772:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   15774:	4a09      	ldr	r2, [pc, #36]	; (1579c <adv_disable+0x6c>)
   15776:	490d      	ldr	r1, [pc, #52]	; (157ac <adv_disable+0x7c>)
   15778:	480a      	ldr	r0, [pc, #40]	; (157a4 <adv_disable+0x74>)
   1577a:	f640 130a 	movw	r3, #2314	; 0x90a
   1577e:	f012 fc13 	bl	27fa8 <printk>
   15782:	4040      	eors	r0, r0
   15784:	f380 8811 	msr	BASEPRI, r0
   15788:	f04f 0003 	mov.w	r0, #3
   1578c:	df02      	svc	2
}
   1578e:	bd38      	pop	{r3, r4, r5, pc}
   15790:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&adv->lll);
   15794:	f7ff bf82 	b.w	1569c <disabled_cb>
   15798:	20000530 	.word	0x20000530
   1579c:	000303fc 	.word	0x000303fc
   157a0:	00030490 	.word	0x00030490
   157a4:	0002fedc 	.word	0x0002fedc
   157a8:	0001569d 	.word	0x0001569d
   157ac:	00030354 	.word	0x00030354

000157b0 <ticker_update_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   157b0:	b900      	cbnz	r0, 157b4 <ticker_update_op_cb+0x4>
   157b2:	4770      	bx	lr
{
   157b4:	b510      	push	{r4, lr}
   157b6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   157b8:	f7ff faf6 	bl	14da8 <ull_disable_mark_get>
   157bc:	4284      	cmp	r4, r0
   157be:	d00c      	beq.n	157da <ticker_update_op_cb+0x2a>
   157c0:	4a06      	ldr	r2, [pc, #24]	; (157dc <ticker_update_op_cb+0x2c>)
   157c2:	4907      	ldr	r1, [pc, #28]	; (157e0 <ticker_update_op_cb+0x30>)
   157c4:	4807      	ldr	r0, [pc, #28]	; (157e4 <ticker_update_op_cb+0x34>)
   157c6:	f640 03bf 	movw	r3, #2239	; 0x8bf
   157ca:	f012 fbed 	bl	27fa8 <printk>
   157ce:	4040      	eors	r0, r0
   157d0:	f380 8811 	msr	BASEPRI, r0
   157d4:	f04f 0003 	mov.w	r0, #3
   157d8:	df02      	svc	2
}
   157da:	bd10      	pop	{r4, pc}
   157dc:	000303fc 	.word	0x000303fc
   157e0:	000304a4 	.word	0x000304a4
   157e4:	0002fedc 	.word	0x0002fedc

000157e8 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   157e8:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   157ea:	4b13      	ldr	r3, [pc, #76]	; (15838 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   157ec:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   157ee:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   157f2:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
   157f6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   157fa:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   157fe:	f022 0202 	bic.w	r2, r2, #2
   15802:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   15804:	f042 020e 	orr.w	r2, r2, #14
   15808:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   1580a:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   1580c:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1580e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   15812:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   15816:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1581a:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
   1581e:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   15820:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15822:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   15826:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1582a:	2204      	movs	r2, #4
   1582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   1582e:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   15830:	701a      	strb	r2, [r3, #0]
	adv->delay_remain = ULL_ADV_RANDOM_DELAY;
#endif /* ONFIG_BT_CTLR_JIT_SCHEDULING */

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   15832:	f85d fb04 	ldr.w	pc, [sp], #4
   15836:	bf00      	nop
   15838:	20002d10 	.word	0x20002d10

0001583c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   1583c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1583e:	4c1b      	ldr	r4, [pc, #108]	; (158ac <conn_release.constprop.0+0x70>)
   15840:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   15842:	6dab      	ldr	r3, [r5, #88]	; 0x58
   15844:	b163      	cbz	r3, 15860 <conn_release.constprop.0+0x24>
   15846:	4a1a      	ldr	r2, [pc, #104]	; (158b0 <conn_release.constprop.0+0x74>)
   15848:	491a      	ldr	r1, [pc, #104]	; (158b4 <conn_release.constprop.0+0x78>)
   1584a:	481b      	ldr	r0, [pc, #108]	; (158b8 <conn_release.constprop.0+0x7c>)
   1584c:	f640 1348 	movw	r3, #2376	; 0x948
   15850:	f012 fbaa 	bl	27fa8 <printk>
   15854:	4040      	eors	r0, r0
   15856:	f380 8811 	msr	BASEPRI, r0
   1585a:	f04f 0003 	mov.w	r0, #3
   1585e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   15860:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   15864:	f105 0048 	add.w	r0, r5, #72	; 0x48
   15868:	f7fb faa2 	bl	10db0 <memq_deinit>
	LL_ASSERT(link);
   1586c:	4606      	mov	r6, r0
   1586e:	b170      	cbz	r0, 1588e <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   15870:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   15872:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   15874:	f001 fbd2 	bl	1701c <ll_conn_release>
	adv->lll.conn = NULL;
   15878:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1587a:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
   1587c:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   1587e:	f7ff f9d7 	bl	14c30 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   15882:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
   15884:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
   15886:	f7ff f9c7 	bl	14c18 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1588a:	6625      	str	r5, [r4, #96]	; 0x60
}
   1588c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1588e:	4a08      	ldr	r2, [pc, #32]	; (158b0 <conn_release.constprop.0+0x74>)
   15890:	490a      	ldr	r1, [pc, #40]	; (158bc <conn_release.constprop.0+0x80>)
   15892:	4809      	ldr	r0, [pc, #36]	; (158b8 <conn_release.constprop.0+0x7c>)
   15894:	f640 134a 	movw	r3, #2378	; 0x94a
   15898:	f012 fb86 	bl	27fa8 <printk>
   1589c:	4040      	eors	r0, r0
   1589e:	f380 8811 	msr	BASEPRI, r0
   158a2:	f04f 0003 	mov.w	r0, #3
   158a6:	df02      	svc	2
   158a8:	e7e2      	b.n	15870 <conn_release.constprop.0+0x34>
   158aa:	bf00      	nop
   158ac:	20002d10 	.word	0x20002d10
   158b0:	000303fc 	.word	0x000303fc
   158b4:	000304d4 	.word	0x000304d4
   158b8:	0002fedc 	.word	0x0002fedc
   158bc:	00030624 	.word	0x00030624

000158c0 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   158c0:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   158c2:	4c50      	ldr	r4, [pc, #320]	; (15a04 <disable.part.0+0x144>)
static inline uint8_t disable(uint8_t handle)
   158c4:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   158c6:	4620      	mov	r0, r4
   158c8:	f7ff fa58 	bl	14d7c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   158cc:	4284      	cmp	r4, r0
   158ce:	d00c      	beq.n	158ea <disable.part.0+0x2a>
   158d0:	4a4d      	ldr	r2, [pc, #308]	; (15a08 <disable.part.0+0x148>)
   158d2:	494e      	ldr	r1, [pc, #312]	; (15a0c <disable.part.0+0x14c>)
   158d4:	484e      	ldr	r0, [pc, #312]	; (15a10 <disable.part.0+0x150>)
   158d6:	f640 13ff 	movw	r3, #2559	; 0x9ff
   158da:	f012 fb65 	bl	27fa8 <printk>
   158de:	4040      	eors	r0, r0
   158e0:	f380 8811 	msr	BASEPRI, r0
   158e4:	f04f 0003 	mov.w	r0, #3
   158e8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   158ea:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   158ee:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   158f0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   158f2:	d50d      	bpl.n	15910 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   158f4:	2102      	movs	r1, #2
   158f6:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   158f8:	4b46      	ldr	r3, [pc, #280]	; (15a14 <disable.part.0+0x154>)
   158fa:	9500      	str	r5, [sp, #0]
   158fc:	2103      	movs	r1, #3
   158fe:	2201      	movs	r2, #1
   15900:	2000      	movs	r0, #0
   15902:	f7fc fd29 	bl	12358 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   15906:	4629      	mov	r1, r5
   15908:	f7ff fa10 	bl	14d2c <ull_ticker_status_take>
		if (ret) {
   1590c:	2800      	cmp	r0, #0
   1590e:	d15e      	bne.n	159ce <disable.part.0+0x10e>
	ret_cb = TICKER_STATUS_BUSY;
   15910:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   15912:	2103      	movs	r1, #3
   15914:	4b3f      	ldr	r3, [pc, #252]	; (15a14 <disable.part.0+0x154>)
   15916:	9500      	str	r5, [sp, #0]
   15918:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1591a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1591c:	f7fc fd1c 	bl	12358 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   15920:	4629      	mov	r1, r5
   15922:	f7ff fa03 	bl	14d2c <ull_ticker_status_take>
	if (ret) {
   15926:	bb50      	cbnz	r0, 1597e <disable.part.0+0xbe>
	err = ull_disable(&adv->lll);
   15928:	483b      	ldr	r0, [pc, #236]	; (15a18 <disable.part.0+0x158>)
   1592a:	f7ff fa5f 	bl	14dec <ull_disable>
	LL_ASSERT(!err || (err == -EALREADY));
   1592e:	b108      	cbz	r0, 15934 <disable.part.0+0x74>
   15930:	3078      	adds	r0, #120	; 0x78
   15932:	d139      	bne.n	159a8 <disable.part.0+0xe8>
	mark = ull_disable_unmark(adv);
   15934:	4833      	ldr	r0, [pc, #204]	; (15a04 <disable.part.0+0x144>)
   15936:	f7ff fa2b 	bl	14d90 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1593a:	4284      	cmp	r4, r0
   1593c:	d00c      	beq.n	15958 <disable.part.0+0x98>
   1593e:	4a32      	ldr	r2, [pc, #200]	; (15a08 <disable.part.0+0x148>)
   15940:	4932      	ldr	r1, [pc, #200]	; (15a0c <disable.part.0+0x14c>)
   15942:	4833      	ldr	r0, [pc, #204]	; (15a10 <disable.part.0+0x150>)
   15944:	f640 2321 	movw	r3, #2593	; 0xa21
   15948:	f012 fb2e 	bl	27fa8 <printk>
   1594c:	4040      	eors	r0, r0
   1594e:	f380 8811 	msr	BASEPRI, r0
   15952:	f04f 0003 	mov.w	r0, #3
   15956:	df02      	svc	2
	if (adv->lll.conn) {
   15958:	6a23      	ldr	r3, [r4, #32]
   1595a:	b10b      	cbz	r3, 15960 <disable.part.0+0xa0>
		conn_release(adv);
   1595c:	f7ff ff6e 	bl	1583c <conn_release.constprop.0>
	adv->is_enabled = 0U;
   15960:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   15964:	f36f 0300 	bfc	r3, #0, #1
   15968:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
   1596c:	2000      	movs	r0, #0
   1596e:	f000 fc93 	bl	16298 <ull_scan_is_enabled_get>
   15972:	4604      	mov	r4, r0
   15974:	2800      	cmp	r0, #0
   15976:	d03f      	beq.n	159f8 <disable.part.0+0x138>
	return 0;
   15978:	2000      	movs	r0, #0
}
   1597a:	b005      	add	sp, #20
   1597c:	bd30      	pop	{r4, r5, pc}
		mark = ull_disable_unmark(adv);
   1597e:	4821      	ldr	r0, [pc, #132]	; (15a04 <disable.part.0+0x144>)
   15980:	f7ff fa06 	bl	14d90 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   15984:	4284      	cmp	r4, r0
   15986:	d034      	beq.n	159f2 <disable.part.0+0x132>
   15988:	4a1f      	ldr	r2, [pc, #124]	; (15a08 <disable.part.0+0x148>)
   1598a:	4920      	ldr	r1, [pc, #128]	; (15a0c <disable.part.0+0x14c>)
   1598c:	4820      	ldr	r0, [pc, #128]	; (15a10 <disable.part.0+0x150>)
   1598e:	f640 2318 	movw	r3, #2584	; 0xa18
   15992:	f012 fb09 	bl	27fa8 <printk>
   15996:	4040      	eors	r0, r0
   15998:	f380 8811 	msr	BASEPRI, r0
   1599c:	f04f 0003 	mov.w	r0, #3
   159a0:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   159a2:	200c      	movs	r0, #12
}
   159a4:	b005      	add	sp, #20
   159a6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || (err == -EALREADY));
   159a8:	4a17      	ldr	r2, [pc, #92]	; (15a08 <disable.part.0+0x148>)
   159aa:	491c      	ldr	r1, [pc, #112]	; (15a1c <disable.part.0+0x15c>)
   159ac:	4818      	ldr	r0, [pc, #96]	; (15a10 <disable.part.0+0x150>)
   159ae:	f640 231e 	movw	r3, #2590	; 0xa1e
   159b2:	f012 faf9 	bl	27fa8 <printk>
   159b6:	4040      	eors	r0, r0
   159b8:	f380 8811 	msr	BASEPRI, r0
   159bc:	f04f 0003 	mov.w	r0, #3
   159c0:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   159c2:	4810      	ldr	r0, [pc, #64]	; (15a04 <disable.part.0+0x144>)
   159c4:	f7ff f9e4 	bl	14d90 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   159c8:	4284      	cmp	r4, r0
   159ca:	d1b8      	bne.n	1593e <disable.part.0+0x7e>
   159cc:	e7c4      	b.n	15958 <disable.part.0+0x98>
			mark = ull_disable_unmark(adv);
   159ce:	480d      	ldr	r0, [pc, #52]	; (15a04 <disable.part.0+0x144>)
   159d0:	f7ff f9de 	bl	14d90 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   159d4:	4284      	cmp	r4, r0
   159d6:	d00c      	beq.n	159f2 <disable.part.0+0x132>
   159d8:	4a0b      	ldr	r2, [pc, #44]	; (15a08 <disable.part.0+0x148>)
   159da:	490c      	ldr	r1, [pc, #48]	; (15a0c <disable.part.0+0x14c>)
   159dc:	480c      	ldr	r0, [pc, #48]	; (15a10 <disable.part.0+0x150>)
   159de:	f640 230a 	movw	r3, #2570	; 0xa0a
   159e2:	f012 fae1 	bl	27fa8 <printk>
   159e6:	4040      	eors	r0, r0
   159e8:	f380 8811 	msr	BASEPRI, r0
   159ec:	f04f 0003 	mov.w	r0, #3
   159f0:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   159f2:	200c      	movs	r0, #12
}
   159f4:	b005      	add	sp, #20
   159f6:	bd30      	pop	{r4, r5, pc}
		ull_filter_adv_scan_state_cb(0);
   159f8:	f006 fe0c 	bl	1c614 <ull_filter_adv_scan_state_cb>
	return 0;
   159fc:	4620      	mov	r0, r4
}
   159fe:	b005      	add	sp, #20
   15a00:	bd30      	pop	{r4, r5, pc}
   15a02:	bf00      	nop
   15a04:	20002d10 	.word	0x20002d10
   15a08:	000303fc 	.word	0x000303fc
   15a0c:	000304e8 	.word	0x000304e8
   15a10:	0002fedc 	.word	0x0002fedc
   15a14:	0001425d 	.word	0x0001425d
   15a18:	20002d2c 	.word	0x20002d2c
   15a1c:	000304f4 	.word	0x000304f4

00015a20 <adv_time_get.constprop.0.isra.0>:
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
   15a20:	b410      	push	{r4}
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   15a22:	7804      	ldrb	r4, [r0, #0]
   15a24:	f004 040f 	and.w	r4, r4, #15
				   rxtx_turn_us * (adv_chn_cnt - 1);
   15a28:	1e53      	subs	r3, r2, #1
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   15a2a:	2c02      	cmp	r4, #2
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   15a2c:	fa1f fc83 	uxth.w	ip, r3
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
   15a30:	d01f      	beq.n	15a72 <adv_time_get.constprop.0.isra.0+0x52>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15a32:	2c01      	cmp	r4, #1
   15a34:	d009      	beq.n	15a4a <adv_time_get.constprop.0.isra.0+0x2a>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   15a36:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
   15a38:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
   15a3a:	b18c      	cbz	r4, 15a60 <adv_time_get.constprop.0.isra.0+0x40>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
   15a3c:	2c06      	cmp	r4, #6
   15a3e:	d00f      	beq.n	15a60 <adv_time_get.constprop.0.isra.0+0x40>
   15a40:	f44f 732a 	mov.w	r3, #680	; 0x2a8
   15a44:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
   15a48:	e003      	b.n	15a52 <adv_time_get.constprop.0.isra.0+0x32>
   15a4a:	f44f 6387 	mov.w	r3, #1080	; 0x438
   15a4e:	f240 2216 	movw	r2, #534	; 0x216
			time_us += (BYTES2US(adv_size, PHY_1M) +
   15a52:	fb0c 3302 	mla	r3, ip, r2, r3
   15a56:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   15a5a:	4018      	ands	r0, r3
}
   15a5c:	bc10      	pop	{r4}
   15a5e:	4770      	bx	lr
				adv_size += pdu->len;
   15a60:	7843      	ldrb	r3, [r0, #1]
   15a62:	3310      	adds	r3, #16
			time_us += (BYTES2US(adv_size, PHY_1M) +
   15a64:	00db      	lsls	r3, r3, #3
   15a66:	f501 715c 	add.w	r1, r1, #880	; 0x370
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
   15a6a:	f503 72b3 	add.w	r2, r3, #358	; 0x166
   15a6e:	440b      	add	r3, r1
   15a70:	e7ef      	b.n	15a52 <adv_time_get.constprop.0.isra.0+0x32>
			adv_size += pdu->len;
   15a72:	7840      	ldrb	r0, [r0, #1]
}
   15a74:	bc10      	pop	{r4}
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
   15a76:	eb0c 038c 	add.w	r3, ip, ip, lsl #2
   15a7a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   15a7e:	3010      	adds	r0, #16
   15a80:	005b      	lsls	r3, r3, #1
   15a82:	00c1      	lsls	r1, r0, #3
   15a84:	f503 70c8 	add.w	r0, r3, #400	; 0x190
   15a88:	fb01 0002 	mla	r0, r1, r2, r0
   15a8c:	b280      	uxth	r0, r0
}
   15a8e:	4770      	bx	lr

00015a90 <ticker_cb>:
{
   15a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a94:	461d      	mov	r5, r3
   15a96:	b08a      	sub	sp, #40	; 0x28
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   15a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a9c:	429d      	cmp	r5, r3
{
   15a9e:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   15aa2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   15aa4:	d018      	beq.n	15ad8 <ticker_cb+0x48>
	return ++hdr->ref;
   15aa6:	7823      	ldrb	r3, [r4, #0]
   15aa8:	3301      	adds	r3, #1
   15aaa:	b2db      	uxtb	r3, r3
   15aac:	4607      	mov	r7, r0
   15aae:	4616      	mov	r6, r2
   15ab0:	7023      	strb	r3, [r4, #0]
		LL_ASSERT(ref);
   15ab2:	2b00      	cmp	r3, #0
   15ab4:	d061      	beq.n	15b7a <ticker_cb+0xea>
		p.ticks_at_expire = ticks_at_expire;
   15ab6:	4938      	ldr	r1, [pc, #224]	; (15b98 <ticker_cb+0x108>)
		mfy.param = &p;
   15ab8:	4b38      	ldr	r3, [pc, #224]	; (15b9c <ticker_cb+0x10c>)
		p.lazy = lazy;
   15aba:	810d      	strh	r5, [r1, #8]
	lll = &adv->lll;
   15abc:	f104 001c 	add.w	r0, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15ac0:	2200      	movs	r2, #0
		p.param = lll;
   15ac2:	60c8      	str	r0, [r1, #12]
		p.remainder = remainder;
   15ac4:	e9c1 7600 	strd	r7, r6, [r1]
		p.force = force;
   15ac8:	f881 800a 	strb.w	r8, [r1, #10]
		mfy.param = &p;
   15acc:	6099      	str	r1, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   15ace:	2001      	movs	r0, #1
   15ad0:	4611      	mov	r1, r2
   15ad2:	f7fb f9eb 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!ret);
   15ad6:	b938      	cbnz	r0, 15ae8 <ticker_cb+0x58>
	if (!lll->is_hdcd)
   15ad8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   15adc:	f010 0501 	ands.w	r5, r0, #1
   15ae0:	d014      	beq.n	15b0c <ticker_cb+0x7c>
}
   15ae2:	b00a      	add	sp, #40	; 0x28
   15ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   15ae8:	4a2d      	ldr	r2, [pc, #180]	; (15ba0 <ticker_cb+0x110>)
   15aea:	492e      	ldr	r1, [pc, #184]	; (15ba4 <ticker_cb+0x114>)
   15aec:	482e      	ldr	r0, [pc, #184]	; (15ba8 <ticker_cb+0x118>)
   15aee:	f640 0392 	movw	r3, #2194	; 0x892
   15af2:	f012 fa59 	bl	27fa8 <printk>
   15af6:	4040      	eors	r0, r0
   15af8:	f380 8811 	msr	BASEPRI, r0
   15afc:	f04f 0003 	mov.w	r0, #3
   15b00:	df02      	svc	2
	if (!lll->is_hdcd)
   15b02:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   15b06:	f010 0501 	ands.w	r5, r0, #1
   15b0a:	d1ea      	bne.n	15ae2 <ticker_cb+0x52>
	lll_rand_isr_get(&random_delay, sizeof(random_delay));
   15b0c:	2104      	movs	r1, #4
   15b0e:	a809      	add	r0, sp, #36	; 0x24
   15b10:	f007 fc9a 	bl	1d448 <lll_rand_isr_get>
	random_delay %= ticks_delay_window;
   15b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   15b16:	4a25      	ldr	r2, [pc, #148]	; (15bac <ticker_cb+0x11c>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15b18:	9406      	str	r4, [sp, #24]
	random_delay %= ticks_delay_window;
   15b1a:	fba2 1203 	umull	r1, r2, r2, r3
   15b1e:	1a99      	subs	r1, r3, r2
   15b20:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   15b24:	0a12      	lsrs	r2, r2, #8
   15b26:	f240 1147 	movw	r1, #327	; 0x147
   15b2a:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   15b2e:	4a20      	ldr	r2, [pc, #128]	; (15bb0 <ticker_cb+0x120>)
   15b30:	4920      	ldr	r1, [pc, #128]	; (15bb4 <ticker_cb+0x124>)
   15b32:	1aa2      	subs	r2, r4, r2
   15b34:	fba1 1202 	umull	r1, r2, r1, r2
   15b38:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15b3a:	491f      	ldr	r1, [pc, #124]	; (15bb8 <ticker_cb+0x128>)
   15b3c:	3202      	adds	r2, #2
	random_delay += (ticks_delay_window_offset + 1);
   15b3e:	3301      	adds	r3, #1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15b40:	e9cd 5104 	strd	r5, r1, [sp, #16]
   15b44:	e9cd 5502 	strd	r5, r5, [sp, #8]
   15b48:	e9cd 5500 	strd	r5, r5, [sp]
   15b4c:	b2d2      	uxtb	r2, r2
   15b4e:	2101      	movs	r1, #1
   15b50:	4628      	mov	r0, r5
	random_delay += (ticks_delay_window_offset + 1);
   15b52:	9309      	str	r3, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15b54:	f7fc fbe8 	bl	12328 <ticker_update>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   15b58:	f030 0302 	bics.w	r3, r0, #2
   15b5c:	d0c1      	beq.n	15ae2 <ticker_cb+0x52>
   15b5e:	4a10      	ldr	r2, [pc, #64]	; (15ba0 <ticker_cb+0x110>)
   15b60:	4916      	ldr	r1, [pc, #88]	; (15bbc <ticker_cb+0x12c>)
   15b62:	4811      	ldr	r0, [pc, #68]	; (15ba8 <ticker_cb+0x118>)
   15b64:	f240 732c 	movw	r3, #1836	; 0x72c
   15b68:	f012 fa1e 	bl	27fa8 <printk>
   15b6c:	4040      	eors	r0, r0
   15b6e:	f380 8811 	msr	BASEPRI, r0
   15b72:	f04f 0003 	mov.w	r0, #3
   15b76:	df02      	svc	2
}
   15b78:	e7b3      	b.n	15ae2 <ticker_cb+0x52>
		LL_ASSERT(ref);
   15b7a:	4a09      	ldr	r2, [pc, #36]	; (15ba0 <ticker_cb+0x110>)
   15b7c:	4910      	ldr	r1, [pc, #64]	; (15bc0 <ticker_cb+0x130>)
   15b7e:	480a      	ldr	r0, [pc, #40]	; (15ba8 <ticker_cb+0x118>)
   15b80:	f640 0385 	movw	r3, #2181	; 0x885
   15b84:	f012 fa10 	bl	27fa8 <printk>
   15b88:	4040      	eors	r0, r0
   15b8a:	f380 8811 	msr	BASEPRI, r0
   15b8e:	f04f 0003 	mov.w	r0, #3
   15b92:	df02      	svc	2
   15b94:	e78f      	b.n	15ab6 <ticker_cb+0x26>
   15b96:	bf00      	nop
   15b98:	20002d90 	.word	0x20002d90
   15b9c:	20000520 	.word	0x20000520
   15ba0:	000303fc 	.word	0x000303fc
   15ba4:	00030354 	.word	0x00030354
   15ba8:	0002fedc 	.word	0x0002fedc
   15bac:	90d4f121 	.word	0x90d4f121
   15bb0:	20002d10 	.word	0x20002d10
   15bb4:	8d3dcb09 	.word	0x8d3dcb09
   15bb8:	000157b1 	.word	0x000157b1
   15bbc:	00030448 	.word	0x00030448
   15bc0:	0003050c 	.word	0x0003050c

00015bc4 <ll_adv_params_set>:
{
   15bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!adv || adv->is_enabled) {
   15bc8:	4c71      	ldr	r4, [pc, #452]	; (15d90 <ll_adv_params_set+0x1cc>)
{
   15bca:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15bcc:	4b71      	ldr	r3, [pc, #452]	; (15d94 <ll_adv_params_set+0x1d0>)
	if (!adv || adv->is_enabled) {
   15bce:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
   15bd2:	4686      	mov	lr, r0
   15bd4:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15bd6:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   15bda:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
   15bdc:	f016 0601 	ands.w	r6, r6, #1
{
   15be0:	4615      	mov	r5, r2
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15be2:	f88d 1004 	strb.w	r1, [sp, #4]
{
   15be6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   15bea:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   15bee:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   15bf2:	9000      	str	r0, [sp, #0]
	if (!adv || adv->is_enabled) {
   15bf4:	f040 80aa 	bne.w	15d4c <ll_adv_params_set+0x188>
	adv->lll.chan_map = chan_map;
   15bf8:	f002 0207 	and.w	r2, r2, #7
   15bfc:	f001 0103 	and.w	r1, r1, #3
   15c00:	0052      	lsls	r2, r2, #1
   15c02:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15c06:	f894 1029 	ldrb.w	r1, [r4, #41]	; 0x29
   15c0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
	pdu->type = pdu_adv_type[adv_type];
   15c0e:	ab02      	add	r3, sp, #8
   15c10:	f8d1 902c 	ldr.w	r9, [r1, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   15c14:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
   15c16:	f899 a000 	ldrb.w	sl, [r9]
		adv->interval = 0;
   15c1a:	f1bc 0f01 	cmp.w	ip, #1
	pdu->type = pdu_adv_type[adv_type];
   15c1e:	449c      	add	ip, r3
	adv->lll.chan_map = chan_map;
   15c20:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
	pdu->type = pdu_adv_type[adv_type];
   15c24:	f81c 3c08 	ldrb.w	r3, [ip, #-8]
	adv->lll.chan_map = chan_map;
   15c28:	f021 0102 	bic.w	r1, r1, #2
   15c2c:	ea42 0201 	orr.w	r2, r2, r1
		adv->interval = 0;
   15c30:	bf08      	it	eq
   15c32:	f04f 0e00 	moveq.w	lr, #0
	pdu->type = pdu_adv_type[adv_type];
   15c36:	f02a 011f 	bic.w	r1, sl, #31
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   15c3a:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   15c3e:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
   15c42:	84a2      	strh	r2, [r4, #36]	; 0x24
   15c44:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   15c48:	bf0c      	ite	eq
   15c4a:	2201      	moveq	r2, #1
   15c4c:	2200      	movne	r2, #0
   15c4e:	f362 1345 	bfi	r3, r2, #5, #1
   15c52:	f8a4 e068 	strh.w	lr, [r4, #104]	; 0x68
	pdu_type_prev = pdu->type;
   15c56:	f889 3000 	strb.w	r3, [r9]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15c5a:	f003 030f 	and.w	r3, r3, #15
   15c5e:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
   15c60:	f00a 0a0f 	and.w	sl, sl, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15c64:	d05c      	beq.n	15d20 <ll_adv_params_set+0x15c>
	adv->own_addr_type = own_addr_type;
   15c66:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   15c6a:	f365 0342 	bfi	r3, r5, #1, #2
   15c6e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   15c72:	b2da      	uxtb	r2, r3
   15c74:	075b      	lsls	r3, r3, #29
   15c76:	d50c      	bpl.n	15c92 <ll_adv_params_set+0xce>
		adv->peer_addr_type = direct_addr_type;
   15c78:	4613      	mov	r3, r2
   15c7a:	f367 03c3 	bfi	r3, r7, #3, #1
   15c7e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   15c82:	f8d8 3000 	ldr.w	r3, [r8]
   15c86:	f8c4 306b 	str.w	r3, [r4, #107]	; 0x6b
   15c8a:	4b43      	ldr	r3, [pc, #268]	; (15d98 <ll_adv_params_set+0x1d4>)
   15c8c:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   15c90:	809a      	strh	r2, [r3, #4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15c92:	f899 3000 	ldrb.w	r3, [r9]
   15c96:	f003 020f 	and.w	r2, r3, #15
   15c9a:	2a01      	cmp	r2, #1
		pdu->tx_addr = own_addr_type & 0x1;
   15c9c:	f005 0b01 	and.w	fp, r5, #1
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   15ca0:	d02c      	beq.n	15cfc <ll_adv_params_set+0x138>
	} else if (pdu->len == 0) {
   15ca2:	f899 2001 	ldrb.w	r2, [r9, #1]
   15ca6:	b9ea      	cbnz	r2, 15ce4 <ll_adv_params_set+0x120>
		pdu->tx_addr = own_addr_type & 0x1;
   15ca8:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = 0;
   15cac:	f362 13c7 	bfi	r3, r2, #7, #1
   15cb0:	f889 3000 	strb.w	r3, [r9]
		pdu->len = BDADDR_SIZE;
   15cb4:	2306      	movs	r3, #6
   15cb6:	f889 3001 	strb.w	r3, [r9, #1]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15cba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	hdr->parent = parent;
   15cbe:	61e4      	str	r4, [r4, #28]
   15cc0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15cc4:	01ad      	lsls	r5, r5, #6
   15cc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15cc8:	f005 0540 	and.w	r5, r5, #64	; 0x40
		if (pdu->len == 0) {
   15ccc:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   15cce:	f045 0504 	orr.w	r5, r5, #4
   15cd2:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   15cd4:	b912      	cbnz	r2, 15cdc <ll_adv_params_set+0x118>
			pdu->len = BDADDR_SIZE;
   15cd6:	2106      	movs	r1, #6
   15cd8:	7059      	strb	r1, [r3, #1]
	return 0;
   15cda:	4616      	mov	r6, r2
}
   15cdc:	4630      	mov	r0, r6
   15cde:	b003      	add	sp, #12
   15ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
   15ce4:	f1ba 0f01 	cmp.w	sl, #1
   15ce8:	d023      	beq.n	15d32 <ll_adv_params_set+0x16e>
		pdu->tx_addr = own_addr_type & 0x1;
   15cea:	f899 3000 	ldrb.w	r3, [r9]
   15cee:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = 0;
   15cf2:	f36f 13c7 	bfc	r3, #7, #1
   15cf6:	f889 3000 	strb.w	r3, [r9]
   15cfa:	e7de      	b.n	15cba <ll_adv_params_set+0xf6>
		pdu->rx_addr = direct_addr_type;
   15cfc:	464a      	mov	r2, r9
		pdu->tx_addr = own_addr_type & 0x1;
   15cfe:	f36b 1386 	bfi	r3, fp, #6, #1
		pdu->rx_addr = direct_addr_type;
   15d02:	f367 13c7 	bfi	r3, r7, #7, #1
   15d06:	f802 3b08 	strb.w	r3, [r2], #8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   15d0a:	f8d8 1000 	ldr.w	r1, [r8]
   15d0e:	f8c9 1008 	str.w	r1, [r9, #8]
   15d12:	f8b8 1004 	ldrh.w	r1, [r8, #4]
   15d16:	8091      	strh	r1, [r2, #4]
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   15d18:	230c      	movs	r3, #12
   15d1a:	f889 3001 	strb.w	r3, [r9, #1]
   15d1e:	e7cc      	b.n	15cba <ll_adv_params_set+0xf6>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
   15d20:	f1ba 0f01 	cmp.w	sl, #1
   15d24:	d09f      	beq.n	15c66 <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
   15d26:	f899 2001 	ldrb.w	r2, [r9, #1]
   15d2a:	b9a2      	cbnz	r2, 15d56 <ll_adv_params_set+0x192>
			adv->ad_data_backup.len = 0U;
   15d2c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
   15d30:	e799      	b.n	15c66 <ll_adv_params_set+0xa2>
   15d32:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
   15d36:	4919      	ldr	r1, [pc, #100]	; (15d9c <ll_adv_params_set+0x1d8>)
   15d38:	f109 0008 	add.w	r0, r9, #8
   15d3c:	f018 fc13 	bl	2e566 <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
   15d40:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
   15d44:	3306      	adds	r3, #6
   15d46:	f889 3001 	strb.w	r3, [r9, #1]
   15d4a:	e7ce      	b.n	15cea <ll_adv_params_set+0x126>
		return BT_HCI_ERR_CMD_DISALLOWED;
   15d4c:	260c      	movs	r6, #12
}
   15d4e:	4630      	mov	r0, r6
   15d50:	b003      	add	sp, #12
   15d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(pdu->len >=
   15d56:	2a05      	cmp	r2, #5
   15d58:	d90a      	bls.n	15d70 <ll_adv_params_set+0x1ac>
			adv->ad_data_backup.len = pdu->len -
   15d5a:	3a06      	subs	r2, #6
   15d5c:	b2d2      	uxtb	r2, r2
   15d5e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
   15d62:	2333      	movs	r3, #51	; 0x33
   15d64:	f109 0108 	add.w	r1, r9, #8
   15d68:	480c      	ldr	r0, [pc, #48]	; (15d9c <ll_adv_params_set+0x1d8>)
   15d6a:	f018 fc0a 	bl	2e582 <__memcpy_chk>
   15d6e:	e77a      	b.n	15c66 <ll_adv_params_set+0xa2>
			LL_ASSERT(pdu->len >=
   15d70:	4a0b      	ldr	r2, [pc, #44]	; (15da0 <ll_adv_params_set+0x1dc>)
   15d72:	490c      	ldr	r1, [pc, #48]	; (15da4 <ll_adv_params_set+0x1e0>)
   15d74:	480c      	ldr	r0, [pc, #48]	; (15da8 <ll_adv_params_set+0x1e4>)
   15d76:	f44f 73ce 	mov.w	r3, #412	; 0x19c
   15d7a:	f012 f915 	bl	27fa8 <printk>
   15d7e:	4040      	eors	r0, r0
   15d80:	f380 8811 	msr	BASEPRI, r0
   15d84:	f04f 0003 	mov.w	r0, #3
   15d88:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
   15d8a:	f899 2001 	ldrb.w	r2, [r9, #1]
   15d8e:	e7e4      	b.n	15d5a <ll_adv_params_set+0x196>
   15d90:	20002d10 	.word	0x20002d10
   15d94:	0002f6dc 	.word	0x0002f6dc
   15d98:	20002d7b 	.word	0x20002d7b
   15d9c:	20002d51 	.word	0x20002d51
   15da0:	000303fc 	.word	0x000303fc
   15da4:	00030510 	.word	0x00030510
   15da8:	0002fedc 	.word	0x0002fedc

00015dac <ull_adv_init>:
{
   15dac:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   15dae:	4c06      	ldr	r4, [pc, #24]	; (15dc8 <ull_adv_init+0x1c>)
   15db0:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15db4:	f007 ff86 	bl	1dcc4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   15db8:	f104 0034 	add.w	r0, r4, #52	; 0x34
   15dbc:	f007 ff82 	bl	1dcc4 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   15dc0:	f7ff fd12 	bl	157e8 <init_set.constprop.0>
}
   15dc4:	2000      	movs	r0, #0
   15dc6:	bd10      	pop	{r4, pc}
   15dc8:	20002d10 	.word	0x20002d10

00015dcc <ull_adv_reset>:
{
   15dcc:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   15dce:	4b0b      	ldr	r3, [pc, #44]	; (15dfc <ull_adv_reset+0x30>)
   15dd0:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   15dd4:	07d2      	lsls	r2, r2, #31
   15dd6:	d50e      	bpl.n	15df6 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   15dd8:	6a1a      	ldr	r2, [r3, #32]
   15dda:	b152      	cbz	r2, 15df2 <ull_adv_reset+0x26>
		adv->lll.conn->periph.cancelled = 1U;
   15ddc:	f892 1020 	ldrb.w	r1, [r2, #32]
   15de0:	f041 0102 	orr.w	r1, r1, #2
   15de4:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->periph.initiated)) {
   15de8:	6a1b      	ldr	r3, [r3, #32]
   15dea:	f893 3020 	ldrb.w	r3, [r3, #32]
   15dee:	07db      	lsls	r3, r3, #31
   15df0:	d401      	bmi.n	15df6 <ull_adv_reset+0x2a>
   15df2:	f7ff fd65 	bl	158c0 <disable.part.0>
}
   15df6:	2000      	movs	r0, #0
   15df8:	bd08      	pop	{r3, pc}
   15dfa:	bf00      	nop
   15dfc:	20002d10 	.word	0x20002d10

00015e00 <ull_adv_reset_finalize>:
{
   15e00:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   15e02:	4c0a      	ldr	r4, [pc, #40]	; (15e2c <ull_adv_reset_finalize+0x2c>)
   15e04:	f104 0528 	add.w	r5, r4, #40	; 0x28
   15e08:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   15e0a:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   15e0c:	f007 ff6a 	bl	1dce4 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   15e10:	4620      	mov	r0, r4
   15e12:	f007 ff67 	bl	1dce4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   15e16:	4628      	mov	r0, r5
   15e18:	f007 ff54 	bl	1dcc4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   15e1c:	4620      	mov	r0, r4
   15e1e:	f007 ff51 	bl	1dcc4 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   15e22:	f7ff fce1 	bl	157e8 <init_set.constprop.0>
}
   15e26:	2000      	movs	r0, #0
   15e28:	bd38      	pop	{r3, r4, r5, pc}
   15e2a:	bf00      	nop
   15e2c:	20002d10 	.word	0x20002d10

00015e30 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   15e30:	4a03      	ldr	r2, [pc, #12]	; (15e40 <ull_adv_handle_get+0x10>)
   15e32:	4b04      	ldr	r3, [pc, #16]	; (15e44 <ull_adv_handle_get+0x14>)
   15e34:	1a80      	subs	r0, r0, r2
   15e36:	fba3 3000 	umull	r3, r0, r3, r0
}
   15e3a:	f3c0 108f 	ubfx	r0, r0, #6, #16
   15e3e:	4770      	bx	lr
   15e40:	20002d10 	.word	0x20002d10
   15e44:	8d3dcb09 	.word	0x8d3dcb09

00015e48 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   15e48:	4a04      	ldr	r2, [pc, #16]	; (15e5c <ull_adv_lll_handle_get+0x14>)
   15e4a:	6800      	ldr	r0, [r0, #0]
   15e4c:	4b04      	ldr	r3, [pc, #16]	; (15e60 <ull_adv_lll_handle_get+0x18>)
   15e4e:	1a80      	subs	r0, r0, r2
   15e50:	fba3 3000 	umull	r3, r0, r3, r0
}
   15e54:	f3c0 108f 	ubfx	r0, r0, #6, #16
   15e58:	4770      	bx	lr
   15e5a:	bf00      	nop
   15e5c:	20002d10 	.word	0x20002d10
   15e60:	8d3dcb09 	.word	0x8d3dcb09

00015e64 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15e64:	b938      	cbnz	r0, 15e76 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   15e66:	4805      	ldr	r0, [pc, #20]	; (15e7c <ull_adv_is_enabled_get+0x18>)
   15e68:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   15e6c:	f013 0f01 	tst.w	r3, #1
   15e70:	bf08      	it	eq
   15e72:	2000      	moveq	r0, #0
   15e74:	4770      	bx	lr
		return NULL;
   15e76:	2000      	movs	r0, #0
}
   15e78:	4770      	bx	lr
   15e7a:	bf00      	nop
   15e7c:	20002d10 	.word	0x20002d10

00015e80 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   15e80:	b928      	cbnz	r0, 15e8e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   15e82:	4b04      	ldr	r3, [pc, #16]	; (15e94 <ull_adv_is_enabled+0x14>)
   15e84:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   15e88:	f000 0001 	and.w	r0, r0, #1
   15e8c:	4770      	bx	lr
   15e8e:	2000      	movs	r0, #0
}
   15e90:	4770      	bx	lr
   15e92:	bf00      	nop
   15e94:	20002d10 	.word	0x20002d10

00015e98 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   15e98:	b950      	cbnz	r0, 15eb0 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   15e9a:	4b06      	ldr	r3, [pc, #24]	; (15eb4 <ull_adv_filter_pol_get+0x1c>)
   15e9c:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   15ea0:	f010 0001 	ands.w	r0, r0, #1
   15ea4:	d005      	beq.n	15eb2 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   15ea6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   15eaa:	f000 0003 	and.w	r0, r0, #3
   15eae:	4770      	bx	lr
		return 0;
   15eb0:	2000      	movs	r0, #0
}
   15eb2:	4770      	bx	lr
   15eb4:	20002d10 	.word	0x20002d10

00015eb8 <ull_adv_pdu_update_addrs>:
{
   15eb8:	b570      	push	{r4, r5, r6, lr}
   15eba:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   15ebc:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
{
   15ec0:	460c      	mov	r4, r1
	const uint8_t *rpa = ull_filter_adva_get(adv->lll.rl_idx);
   15ec2:	f006 fd17 	bl	1c8f4 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   15ec6:	b318      	cbz	r0, 15f10 <ull_adv_pdu_update_addrs+0x58>
		pdu->tx_addr = 1;
   15ec8:	7823      	ldrb	r3, [r4, #0]
   15eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15ece:	7023      	strb	r3, [r4, #0]
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15ed0:	7823      	ldrb	r3, [r4, #0]
   15ed2:	6802      	ldr	r2, [r0, #0]
   15ed4:	f8c4 2002 	str.w	r2, [r4, #2]
   15ed8:	f003 030f 	and.w	r3, r3, #15
   15edc:	8882      	ldrh	r2, [r0, #4]
   15ede:	80e2      	strh	r2, [r4, #6]
   15ee0:	2b01      	cmp	r3, #1
	return pdu->adv_ind.addr;
   15ee2:	f104 0602 	add.w	r6, r4, #2
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15ee6:	d001      	beq.n	15eec <ull_adv_pdu_update_addrs+0x34>
}
   15ee8:	4630      	mov	r0, r6
   15eea:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv->lll.rl_idx);
   15eec:	f895 0026 	ldrb.w	r0, [r5, #38]	; 0x26
   15ef0:	f006 fd2e 	bl	1c950 <ull_filter_tgta_get>
	if (rx_addr) {
   15ef4:	2800      	cmp	r0, #0
   15ef6:	d0f7      	beq.n	15ee8 <ull_adv_pdu_update_addrs+0x30>
		pdu->rx_addr = 1;
   15ef8:	7822      	ldrb	r2, [r4, #0]
   15efa:	4623      	mov	r3, r4
   15efc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   15f00:	f803 2b08 	strb.w	r2, [r3], #8
   15f04:	6802      	ldr	r2, [r0, #0]
   15f06:	60a2      	str	r2, [r4, #8]
   15f08:	8882      	ldrh	r2, [r0, #4]
   15f0a:	809a      	strh	r2, [r3, #4]
}
   15f0c:	4630      	mov	r0, r6
   15f0e:	bd70      	pop	{r4, r5, r6, pc}
			own_id_addr = ll_addr_get(pdu->tx_addr);
   15f10:	7820      	ldrb	r0, [r4, #0]
   15f12:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15f16:	f7fc fae7 	bl	124e8 <ll_addr_get>
	if (rpa) {
   15f1a:	e7d9      	b.n	15ed0 <ull_adv_pdu_update_addrs+0x18>

00015f1c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   15f1c:	291f      	cmp	r1, #31
   15f1e:	d84f      	bhi.n	15fc0 <ull_adv_data_set+0xa4>
{
   15f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15f24:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   15f28:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15f2c:	b082      	sub	sp, #8
   15f2e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   15f30:	783b      	ldrb	r3, [r7, #0]
   15f32:	f003 030f 	and.w	r3, r3, #15
   15f36:	2b01      	cmp	r3, #1
   15f38:	460d      	mov	r5, r1
   15f3a:	4604      	mov	r4, r0
   15f3c:	4690      	mov	r8, r2
   15f3e:	d034      	beq.n	15faa <ull_adv_data_set+0x8e>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15f40:	f10d 0107 	add.w	r1, sp, #7
   15f44:	3028      	adds	r0, #40	; 0x28
   15f46:	f007 ff4d 	bl	1dde4 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   15f4a:	46be      	mov	lr, r7
   15f4c:	4606      	mov	r6, r0
	pdu->type = prev->type;
   15f4e:	4684      	mov	ip, r0
		pdu->chan_sel = prev->chan_sel;
   15f50:	f81e 0b02 	ldrb.w	r0, [lr], #2
   15f54:	4641      	mov	r1, r8
	pdu->type = prev->type;
   15f56:	f3c0 0303 	ubfx	r3, r0, #0, #4
		pdu->chan_sel = prev->chan_sel;
   15f5a:	f3c0 1840 	ubfx	r8, r0, #5, #1
	pdu->type = prev->type;
   15f5e:	ea43 1348 	orr.w	r3, r3, r8, lsl #5
	pdu->tx_addr = prev->tx_addr;
   15f62:	f3c0 1880 	ubfx	r8, r0, #6, #1
	pdu->type = prev->type;
   15f66:	ea43 1388 	orr.w	r3, r3, r8, lsl #6
   15f6a:	f000 0080 	and.w	r0, r0, #128	; 0x80
   15f6e:	4303      	orrs	r3, r0
   15f70:	f80c 3b02 	strb.w	r3, [ip], #2
   15f74:	f8d7 3002 	ldr.w	r3, [r7, #2]
   15f78:	f8c6 3002 	str.w	r3, [r6, #2]
   15f7c:	f8be 3004 	ldrh.w	r3, [lr, #4]
   15f80:	f8ac 3004 	strh.w	r3, [ip, #4]
   15f84:	462a      	mov	r2, r5
   15f86:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   15f8a:	3506      	adds	r5, #6
   15f8c:	f018 faeb 	bl	2e566 <memcpy>
   15f90:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   15f92:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   15f96:	07db      	lsls	r3, r3, #31
   15f98:	d414      	bmi.n	15fc4 <ull_adv_data_set+0xa8>
	pdu->last = idx;
   15f9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15f9e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   15fa2:	2000      	movs	r0, #0
}
   15fa4:	b002      	add	sp, #8
   15fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		adv->ad_data_backup.len = len;
   15faa:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
   15fae:	460a      	mov	r2, r1
   15fb0:	3041      	adds	r0, #65	; 0x41
   15fb2:	4641      	mov	r1, r8
   15fb4:	f018 fad7 	bl	2e566 <memcpy>
		return 0;
   15fb8:	2000      	movs	r0, #0
}
   15fba:	b002      	add	sp, #8
   15fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   15fc0:	2012      	movs	r0, #18
}
   15fc2:	4770      	bx	lr
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   15fc4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   15fc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   15fcc:	4631      	mov	r1, r6
   15fce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   15fd0:	4620      	mov	r0, r4
   15fd2:	f7eb fe35 	bl	1c40 <ull_adv_time_update>
		if (err) {
   15fd6:	2800      	cmp	r0, #0
   15fd8:	d0df      	beq.n	15f9a <ull_adv_data_set+0x7e>
   15fda:	e7e3      	b.n	15fa4 <ull_adv_data_set+0x88>

00015fdc <ll_adv_data_set>:
{
   15fdc:	4603      	mov	r3, r0
   15fde:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   15fe0:	4801      	ldr	r0, [pc, #4]	; (15fe8 <ll_adv_data_set+0xc>)
   15fe2:	4619      	mov	r1, r3
   15fe4:	f7ff bf9a 	b.w	15f1c <ull_adv_data_set>
   15fe8:	20002d10 	.word	0x20002d10

00015fec <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   15fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15ff0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   15ff4:	b082      	sub	sp, #8
   15ff6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   15ffa:	460e      	mov	r6, r1
   15ffc:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   15ffe:	f10d 0107 	add.w	r1, sp, #7
   16002:	3034      	adds	r0, #52	; 0x34
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   16004:	6b9f      	ldr	r7, [r3, #56]	; 0x38
   16006:	4690      	mov	r8, r2
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   16008:	f007 feec 	bl	1dde4 <lll_adv_pdu_alloc>
   1600c:	4605      	mov	r5, r0
	pdu->tx_addr = prev->tx_addr;
   1600e:	4638      	mov	r0, r7
	pdu->len = BDADDR_SIZE + len;
   16010:	f106 0c06 	add.w	ip, r6, #6
	pdu->tx_addr = prev->tx_addr;
   16014:	f810 3b02 	ldrb.w	r3, [r0], #2
	pdu->len = BDADDR_SIZE + len;
   16018:	f885 c001 	strb.w	ip, [r5, #1]
	pdu->tx_addr = prev->tx_addr;
   1601c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   16020:	019b      	lsls	r3, r3, #6
   16022:	f043 0304 	orr.w	r3, r3, #4
   16026:	702b      	strb	r3, [r5, #0]
   16028:	f8d7 3002 	ldr.w	r3, [r7, #2]
   1602c:	f8c5 3002 	str.w	r3, [r5, #2]
   16030:	8883      	ldrh	r3, [r0, #4]
   16032:	80eb      	strh	r3, [r5, #6]
   16034:	4641      	mov	r1, r8
   16036:	4632      	mov	r2, r6
   16038:	f105 0008 	add.w	r0, r5, #8
   1603c:	f018 fa93 	bl	2e566 <memcpy>
	if (adv->is_enabled) {
   16040:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   16044:	07db      	lsls	r3, r3, #31
   16046:	d50a      	bpl.n	1605e <ull_scan_rsp_set.part.0+0x72>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16048:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1604c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   16050:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   16052:	780b      	ldrb	r3, [r1, #0]
   16054:	f013 030f 	ands.w	r3, r3, #15
   16058:	d009      	beq.n	1606e <ull_scan_rsp_set.part.0+0x82>
   1605a:	2b06      	cmp	r3, #6
   1605c:	d007      	beq.n	1606e <ull_scan_rsp_set.part.0+0x82>
	pdu->last = idx;
   1605e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16062:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   16066:	2000      	movs	r0, #0
}
   16068:	b002      	add	sp, #8
   1606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   1606e:	462a      	mov	r2, r5
   16070:	4620      	mov	r0, r4
   16072:	f7eb fde5 	bl	1c40 <ull_adv_time_update>
			if (err) {
   16076:	2800      	cmp	r0, #0
   16078:	d0f1      	beq.n	1605e <ull_scan_rsp_set.part.0+0x72>
   1607a:	e7f5      	b.n	16068 <ull_scan_rsp_set.part.0+0x7c>

0001607c <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1607c:	281f      	cmp	r0, #31
{
   1607e:	4603      	mov	r3, r0
   16080:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   16082:	d803      	bhi.n	1608c <ll_adv_scan_rsp_set+0x10>
   16084:	4802      	ldr	r0, [pc, #8]	; (16090 <ll_adv_scan_rsp_set+0x14>)
   16086:	4619      	mov	r1, r3
   16088:	f7ff bfb0 	b.w	15fec <ull_scan_rsp_set.part.0>
}
   1608c:	2012      	movs	r0, #18
   1608e:	4770      	bx	lr
   16090:	20002d10 	.word	0x20002d10

00016094 <ticker_cb>:
}

static void ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
		      uint32_t remainder, uint16_t lazy, uint8_t force,
		      void *param)
{
   16094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16098:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1609a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint8_t ref;

	DEBUG_RADIO_PREPARE_O(1);

	scan = param;
	lll = &scan->lll;
   1609e:	4625      	mov	r5, r4
{
   160a0:	4680      	mov	r8, r0
   160a2:	f815 1b1c 	ldrb.w	r1, [r5], #28
   160a6:	3101      	adds	r1, #1
   160a8:	b2c9      	uxtb	r1, r1
   160aa:	4617      	mov	r7, r2
   160ac:	461e      	mov	r6, r3
   160ae:	7021      	strb	r1, [r4, #0]

	/* Increment prepare reference count */
	ref = ull_ref_inc(&scan->ull);
	LL_ASSERT(ref);
   160b0:	b181      	cbz	r1, 160d4 <ticker_cb+0x40>

	/* Append timing parameters */
	p.ticks_at_expire = ticks_at_expire;
   160b2:	4c17      	ldr	r4, [pc, #92]	; (16110 <ticker_cb+0x7c>)
	p.remainder = remainder;
	p.lazy = lazy;
	p.param = lll;
	p.force = force;
	mfy.param = &p;
   160b4:	4b17      	ldr	r3, [pc, #92]	; (16114 <ticker_cb+0x80>)
	p.lazy = lazy;
   160b6:	8126      	strh	r6, [r4, #8]

	/* Kick LLL prepare */
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   160b8:	2200      	movs	r2, #0
   160ba:	4611      	mov	r1, r2
   160bc:	2001      	movs	r0, #1
	p.remainder = remainder;
   160be:	e9c4 8700 	strd	r8, r7, [r4]
	p.param = lll;
   160c2:	60e5      	str	r5, [r4, #12]
	p.force = force;
   160c4:	f884 900a 	strb.w	r9, [r4, #10]
	mfy.param = &p;
   160c8:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   160ca:	f7fa feef 	bl	10eac <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   160ce:	b978      	cbnz	r0, 160f0 <ticker_cb+0x5c>
			  (ret == TICKER_STATUS_BUSY));
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	DEBUG_RADIO_PREPARE_O(1);
}
   160d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(ref);
   160d4:	4a10      	ldr	r2, [pc, #64]	; (16118 <ticker_cb+0x84>)
   160d6:	4911      	ldr	r1, [pc, #68]	; (1611c <ticker_cb+0x88>)
   160d8:	4811      	ldr	r0, [pc, #68]	; (16120 <ticker_cb+0x8c>)
   160da:	f240 23db 	movw	r3, #731	; 0x2db
   160de:	f011 ff63 	bl	27fa8 <printk>
   160e2:	4040      	eors	r0, r0
   160e4:	f380 8811 	msr	BASEPRI, r0
   160e8:	f04f 0003 	mov.w	r0, #3
   160ec:	df02      	svc	2
   160ee:	e7e0      	b.n	160b2 <ticker_cb+0x1e>
	LL_ASSERT(!ret);
   160f0:	4a09      	ldr	r2, [pc, #36]	; (16118 <ticker_cb+0x84>)
   160f2:	490c      	ldr	r1, [pc, #48]	; (16124 <ticker_cb+0x90>)
   160f4:	480a      	ldr	r0, [pc, #40]	; (16120 <ticker_cb+0x8c>)
   160f6:	f44f 733a 	mov.w	r3, #744	; 0x2e8
   160fa:	f011 ff55 	bl	27fa8 <printk>
   160fe:	4040      	eors	r0, r0
   16100:	f380 8811 	msr	BASEPRI, r0
   16104:	f04f 0003 	mov.w	r0, #3
   16108:	df02      	svc	2
}
   1610a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1610e:	bf00      	nop
   16110:	20002df0 	.word	0x20002df0
   16114:	20000550 	.word	0x20000550
   16118:	00030560 	.word	0x00030560
   1611c:	0003050c 	.word	0x0003050c
   16120:	0002fedc 	.word	0x0002fedc
   16124:	00030354 	.word	0x00030354

00016128 <ull_scan_init>:
}
   16128:	2000      	movs	r0, #0
   1612a:	4770      	bx	lr

0001612c <ull_scan_disable>:
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   1612c:	3004      	adds	r0, #4
{
   1612e:	b508      	push	{r3, lr}
	err = ull_ticker_stop_with_mark(TICKER_ID_SCAN_BASE + handle,
   16130:	f101 021c 	add.w	r2, r1, #28
   16134:	b2c0      	uxtb	r0, r0
   16136:	f7fe fe97 	bl	14e68 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1613a:	b110      	cbz	r0, 16142 <ull_scan_disable+0x16>
   1613c:	3078      	adds	r0, #120	; 0x78
   1613e:	d101      	bne.n	16144 <ull_scan_disable+0x18>
		return BT_HCI_ERR_CMD_DISALLOWED;
   16140:	200c      	movs	r0, #12
}
   16142:	bd08      	pop	{r3, pc}
	LL_ASSERT(err == 0 || err == -EALREADY);
   16144:	4a07      	ldr	r2, [pc, #28]	; (16164 <ull_scan_disable+0x38>)
   16146:	4908      	ldr	r1, [pc, #32]	; (16168 <ull_scan_disable+0x3c>)
   16148:	4808      	ldr	r0, [pc, #32]	; (1616c <ull_scan_disable+0x40>)
   1614a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
   1614e:	f011 ff2b 	bl	27fa8 <printk>
   16152:	4040      	eors	r0, r0
   16154:	f380 8811 	msr	BASEPRI, r0
   16158:	f04f 0003 	mov.w	r0, #3
   1615c:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1615e:	200c      	movs	r0, #12
}
   16160:	bd08      	pop	{r3, pc}
   16162:	bf00      	nop
   16164:	00030560 	.word	0x00030560
   16168:	000305a0 	.word	0x000305a0
   1616c:	0002fedc 	.word	0x0002fedc

00016170 <ll_scan_enable>:
{
   16170:	b538      	push	{r3, r4, r5, lr}
	if (!scan || !scan->is_enabled) {
   16172:	4c2c      	ldr	r4, [pc, #176]	; (16224 <ll_scan_enable+0xb4>)
   16174:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   16178:	f003 0201 	and.w	r2, r3, #1
	if (!enable) {
   1617c:	b358      	cbz	r0, 161d6 <ll_scan_enable+0x66>
	if (!scan || scan->is_enabled) {
   1617e:	bb5a      	cbnz	r2, 161d8 <ll_scan_enable+0x68>
	    (!is_coded_phy && (scan->own_addr_type & 0x1))) {
   16180:	079a      	lsls	r2, r3, #30
   16182:	f3c3 0541 	ubfx	r5, r3, #1, #2
   16186:	d50b      	bpl.n	161a0 <ll_scan_enable+0x30>
		if (!mem_nz(ll_addr_get(BT_ADDR_LE_RANDOM), BDADDR_SIZE)) {
   16188:	2001      	movs	r0, #1
   1618a:	f7fc f9ad 	bl	124e8 <ll_addr_get>
   1618e:	2106      	movs	r1, #6
   16190:	f7fa fdfe 	bl	10d90 <mem_nz>
   16194:	2800      	cmp	r0, #0
   16196:	d042      	beq.n	1621e <ll_scan_enable+0xae>
		own_addr_type = scan->own_addr_type;
   16198:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
   1619c:	f3c5 0541 	ubfx	r5, r5, #1, #2
	ull_filter_scan_update(lll->filter_policy);
   161a0:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   161a4:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   161a8:	f006 fa74 	bl	1c694 <ull_filter_scan_update>
	lll->rpa_gen = 0;
   161ac:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   161b0:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	lll->rpa_gen = 0;
   161b4:	f36f 0341 	bfc	r3, #1, #1
	lll->rl_idx = FILTER_IDX_NONE;
   161b8:	21ff      	movs	r1, #255	; 0xff
	lll->rpa_gen = 0;
   161ba:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	if ((lll->type & 0x1) &&
   161be:	0693      	lsls	r3, r2, #26
	lll->rl_idx = FILTER_IDX_NONE;
   161c0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	if ((lll->type & 0x1) &&
   161c4:	d502      	bpl.n	161cc <ll_scan_enable+0x5c>
   161c6:	3d02      	subs	r5, #2
   161c8:	2d01      	cmp	r5, #1
   161ca:	d91e      	bls.n	1620a <ll_scan_enable+0x9a>
}
   161cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		err = ull_scan_enable(scan);
   161d0:	4814      	ldr	r0, [pc, #80]	; (16224 <ll_scan_enable+0xb4>)
   161d2:	f7eb bdf1 	b.w	1db8 <ull_scan_enable>
	if (!scan || !scan->is_enabled) {
   161d6:	b912      	cbnz	r2, 161de <ll_scan_enable+0x6e>
	struct ll_scan_set *scan;
	uint8_t ret;

	scan = ull_scan_is_enabled_get(handle);
	if (!scan) {
		return BT_HCI_ERR_CMD_DISALLOWED;
   161d8:	250c      	movs	r5, #12
}
   161da:	4628      	mov	r0, r5
   161dc:	bd38      	pop	{r3, r4, r5, pc}
	}

#if defined(CONFIG_BT_CENTRAL)
	if (scan->lll.conn) {
   161de:	6a23      	ldr	r3, [r4, #32]
   161e0:	2b00      	cmp	r3, #0
   161e2:	d1f9      	bne.n	161d8 <ll_scan_enable+0x68>
		return BT_HCI_ERR_CMD_DISALLOWED;
	}
#endif

	ret = ull_scan_disable(handle, scan);
   161e4:	4621      	mov	r1, r4
   161e6:	f7ff ffa1 	bl	1612c <ull_scan_disable>
	if (ret) {
   161ea:	4605      	mov	r5, r0
   161ec:	2800      	cmp	r0, #0
   161ee:	d1f4      	bne.n	161da <ll_scan_enable+0x6a>
		return ret;
	}

	scan->is_enabled = 0U;
   161f0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   161f4:	f360 0300 	bfi	r3, r0, #0, #1
   161f8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

#if defined(CONFIG_BT_CTLR_PRIVACY)
#if defined(CONFIG_BT_BROADCASTER)
	if (!ull_adv_is_enabled_get(0))
   161fc:	f7ff fe32 	bl	15e64 <ull_adv_is_enabled_get>
   16200:	2800      	cmp	r0, #0
   16202:	d1ea      	bne.n	161da <ll_scan_enable+0x6a>
#endif
	{
		ull_filter_adv_scan_state_cb(0);
   16204:	f006 fa06 	bl	1c614 <ull_filter_adv_scan_state_cb>
   16208:	e7e7      	b.n	161da <ll_scan_enable+0x6a>
		ull_filter_rpa_update(false);
   1620a:	2000      	movs	r0, #0
   1620c:	f006 fa66 	bl	1c6dc <ull_filter_rpa_update>
		lll->rpa_gen = 1;
   16210:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   16214:	f043 0302 	orr.w	r3, r3, #2
   16218:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   1621c:	e7d6      	b.n	161cc <ll_scan_enable+0x5c>
			return BT_HCI_ERR_INVALID_PARAM;
   1621e:	2512      	movs	r5, #18
   16220:	e7db      	b.n	161da <ll_scan_enable+0x6a>
   16222:	bf00      	nop
   16224:	20002da8 	.word	0x20002da8

00016228 <ull_scan_reset>:
{
   16228:	b510      	push	{r4, lr}
	if (!scan || !scan->is_enabled) {
   1622a:	4c0d      	ldr	r4, [pc, #52]	; (16260 <ull_scan_reset+0x38>)
   1622c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   16230:	07db      	lsls	r3, r3, #31
   16232:	d501      	bpl.n	16238 <ull_scan_reset+0x10>
	if (scan->lll.conn) {
   16234:	6a20      	ldr	r0, [r4, #32]
   16236:	b108      	cbz	r0, 1623c <ull_scan_reset+0x14>
}
   16238:	2000      	movs	r0, #0
   1623a:	bd10      	pop	{r4, pc}
	ret = ull_scan_disable(handle, scan);
   1623c:	4621      	mov	r1, r4
   1623e:	f7ff ff75 	bl	1612c <ull_scan_disable>
	if (ret) {
   16242:	2800      	cmp	r0, #0
   16244:	d1f8      	bne.n	16238 <ull_scan_reset+0x10>
	scan->is_enabled = 0U;
   16246:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1624a:	f360 0200 	bfi	r2, r0, #0, #1
   1624e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
	if (!ull_adv_is_enabled_get(0))
   16252:	f7ff fe07 	bl	15e64 <ull_adv_is_enabled_get>
   16256:	2800      	cmp	r0, #0
   16258:	d1ee      	bne.n	16238 <ull_scan_reset+0x10>
		ull_filter_adv_scan_state_cb(0);
   1625a:	f006 f9db 	bl	1c614 <ull_filter_adv_scan_state_cb>
	for (handle = 0U; handle < BT_CTLR_SCAN_SET; handle++) {
   1625e:	e7eb      	b.n	16238 <ull_scan_reset+0x10>
   16260:	20002da8 	.word	0x20002da8

00016264 <ull_scan_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   16264:	4a03      	ldr	r2, [pc, #12]	; (16274 <ull_scan_handle_get+0x10>)
   16266:	4b04      	ldr	r3, [pc, #16]	; (16278 <ull_scan_handle_get+0x14>)
   16268:	1a80      	subs	r0, r0, r2
   1626a:	fba3 3000 	umull	r3, r0, r3, r0
}
   1626e:	f3c0 1007 	ubfx	r0, r0, #4, #8
   16272:	4770      	bx	lr
   16274:	20002da8 	.word	0x20002da8
   16278:	38e38e39 	.word	0x38e38e39

0001627c <ull_scan_lll_handle_get>:
	return ((uint8_t *)scan - (uint8_t *)ll_scan) / sizeof(*scan);
   1627c:	4a04      	ldr	r2, [pc, #16]	; (16290 <ull_scan_lll_handle_get+0x14>)
   1627e:	6800      	ldr	r0, [r0, #0]
   16280:	4b04      	ldr	r3, [pc, #16]	; (16294 <ull_scan_lll_handle_get+0x18>)
   16282:	1a80      	subs	r0, r0, r2
   16284:	fba3 3000 	umull	r3, r0, r3, r0
}
   16288:	f3c0 1007 	ubfx	r0, r0, #4, #8
   1628c:	4770      	bx	lr
   1628e:	bf00      	nop
   16290:	20002da8 	.word	0x20002da8
   16294:	38e38e39 	.word	0x38e38e39

00016298 <ull_scan_is_enabled_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   16298:	b938      	cbnz	r0, 162aa <ull_scan_is_enabled_get+0x12>
	if (!scan || !scan->is_enabled) {
   1629a:	4805      	ldr	r0, [pc, #20]	; (162b0 <ull_scan_is_enabled_get+0x18>)
   1629c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	return &ll_scan[handle];
   162a0:	f013 0f01 	tst.w	r3, #1
   162a4:	bf08      	it	eq
   162a6:	2000      	moveq	r0, #0
   162a8:	4770      	bx	lr
		return NULL;
   162aa:	2000      	movs	r0, #0
}
   162ac:	4770      	bx	lr
   162ae:	bf00      	nop
   162b0:	20002da8 	.word	0x20002da8

000162b4 <ull_scan_is_disabled_get>:
	if (!scan || scan->is_enabled) {
   162b4:	4a04      	ldr	r2, [pc, #16]	; (162c8 <ull_scan_is_disabled_get+0x14>)
   162b6:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   162ba:	f003 0301 	and.w	r3, r3, #1
		return NULL;
   162be:	4303      	orrs	r3, r0
}
   162c0:	bf0c      	ite	eq
   162c2:	4610      	moveq	r0, r2
   162c4:	2000      	movne	r0, #0
   162c6:	4770      	bx	lr
   162c8:	20002da8 	.word	0x20002da8

000162cc <ull_scan_is_enabled>:
	if (handle >= BT_CTLR_SCAN_SET) {
   162cc:	b990      	cbnz	r0, 162f4 <ull_scan_is_enabled+0x28>
	if (!scan || !scan->is_enabled) {
   162ce:	4a0a      	ldr	r2, [pc, #40]	; (162f8 <ull_scan_is_enabled+0x2c>)
   162d0:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
   162d4:	f013 0001 	ands.w	r0, r3, #1
   162d8:	d00d      	beq.n	162f6 <ull_scan_is_enabled+0x2a>
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   162da:	f892 0032 	ldrb.w	r0, [r2, #50]	; 0x32
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   162de:	6a12      	ldr	r2, [r2, #32]
	return (((uint32_t)scan->is_enabled << scan->lll.type) |
   162e0:	f003 0301 	and.w	r3, r3, #1
   162e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   162e8:	fa03 f000 	lsl.w	r0, r3, r0
		(scan->lll.conn ? ULL_SCAN_IS_INITIATOR : 0U) |
   162ec:	b11a      	cbz	r2, 162f6 <ull_scan_is_enabled+0x2a>
   162ee:	f040 0004 	orr.w	r0, r0, #4
   162f2:	4770      	bx	lr
		return 0U;
   162f4:	2000      	movs	r0, #0
}
   162f6:	4770      	bx	lr
   162f8:	20002da8 	.word	0x20002da8

000162fc <ull_scan_filter_pol_get>:
	if (handle >= BT_CTLR_SCAN_SET) {
   162fc:	b950      	cbnz	r0, 16314 <ull_scan_filter_pol_get+0x18>
	if (!scan || !scan->is_enabled) {
   162fe:	4b06      	ldr	r3, [pc, #24]	; (16318 <ull_scan_filter_pol_get+0x1c>)
   16300:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
   16304:	f010 0001 	ands.w	r0, r0, #1
   16308:	d005      	beq.n	16316 <ull_scan_filter_pol_get+0x1a>
	return scan->lll.filter_policy;
   1630a:	f893 0032 	ldrb.w	r0, [r3, #50]	; 0x32
   1630e:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   16312:	4770      	bx	lr
		return 0;
   16314:	2000      	movs	r0, #0
}
   16316:	4770      	bx	lr
   16318:	20002da8 	.word	0x20002da8

0001631c <init_reset>:
{
   1631c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1631e:	4b15      	ldr	r3, [pc, #84]	; (16374 <init_reset+0x58>)
   16320:	4815      	ldr	r0, [pc, #84]	; (16378 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   16322:	4c16      	ldr	r4, [pc, #88]	; (1637c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   16324:	2201      	movs	r2, #1
   16326:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1632a:	f7fa fcc7 	bl	10cbc <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   1632e:	4b14      	ldr	r3, [pc, #80]	; (16380 <init_reset+0x64>)
   16330:	2203      	movs	r2, #3
   16332:	1d18      	adds	r0, r3, #4
   16334:	2124      	movs	r1, #36	; 0x24
   16336:	f7fa fcc1 	bl	10cbc <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1633a:	4b12      	ldr	r3, [pc, #72]	; (16384 <init_reset+0x68>)
   1633c:	2204      	movs	r2, #4
   1633e:	1898      	adds	r0, r3, r2
   16340:	212c      	movs	r1, #44	; 0x2c
   16342:	f7fa fcbb 	bl	10cbc <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   16346:	4b10      	ldr	r3, [pc, #64]	; (16388 <init_reset+0x6c>)
   16348:	2207      	movs	r2, #7
   1634a:	1d18      	adds	r0, r3, #4
   1634c:	2108      	movs	r1, #8
   1634e:	f7fa fcb5 	bl	10cbc <mem_init>
	default_phy_tx |= PHY_2M;
   16352:	490e      	ldr	r1, [pc, #56]	; (1638c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   16354:	4a0e      	ldr	r2, [pc, #56]	; (16390 <init_reset+0x74>)
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   16356:	480f      	ldr	r0, [pc, #60]	; (16394 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   16358:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1635a:	f04f 0c1b 	mov.w	ip, #27
   1635e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   16362:	700b      	strb	r3, [r1, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   16364:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   16368:	7013      	strb	r3, [r2, #0]
	default_tx_time = PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1636a:	f8a0 c000 	strh.w	ip, [r0]
}
   1636e:	2000      	movs	r0, #0
   16370:	bd10      	pop	{r4, pc}
   16372:	bf00      	nop
   16374:	20002e00 	.word	0x20002e00
   16378:	20001ca0 	.word	0x20001ca0
   1637c:	20003978 	.word	0x20003978
   16380:	20002e28 	.word	0x20002e28
   16384:	20002e98 	.word	0x20002e98
   16388:	20002f4c 	.word	0x20002f4c
   1638c:	20003af7 	.word	0x20003af7
   16390:	20003af6 	.word	0x20003af6
   16394:	2000397a 	.word	0x2000397a

00016398 <ctrl_tx_pause_enqueue>:
{
   16398:	b538      	push	{r3, r4, r5, lr}
   1639a:	4604      	mov	r4, r0
		if (!conn->tx_ctrl) {
   1639c:	e9d0 3071 	ldrd	r3, r0, [r0, #452]	; 0x1c4
{
   163a0:	460d      	mov	r5, r1
	if (
   163a2:	b11b      	cbz	r3, 163ac <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   163a4:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   163a8:	0789      	lsls	r1, r1, #30
   163aa:	d50c      	bpl.n	163c6 <ctrl_tx_pause_enqueue+0x2e>
		if (!conn->tx_ctrl) {
   163ac:	b340      	cbz	r0, 16400 <ctrl_tx_pause_enqueue+0x68>
			LL_ASSERT(!pause);
   163ae:	2a00      	cmp	r2, #0
   163b0:	d130      	bne.n	16414 <ctrl_tx_pause_enqueue+0x7c>
	tx->next = conn->tx_ctrl_last->next;
   163b2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   163b6:	681a      	ldr	r2, [r3, #0]
   163b8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   163ba:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   163bc:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   163be:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   163c2:	b1d3      	cbz	r3, 163fa <ctrl_tx_pause_enqueue+0x62>
}
   163c4:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   163c6:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   163ca:	07c9      	lsls	r1, r1, #31
   163cc:	d4ee      	bmi.n	163ac <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   163ce:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   163d2:	428b      	cmp	r3, r1
   163d4:	d02c      	beq.n	16430 <ctrl_tx_pause_enqueue+0x98>
		} else if (!conn->tx_ctrl) {
   163d6:	2800      	cmp	r0, #0
   163d8:	d036      	beq.n	16448 <ctrl_tx_pause_enqueue+0xb0>
			LL_ASSERT(!pause);
   163da:	2a00      	cmp	r2, #0
   163dc:	d0e9      	beq.n	163b2 <ctrl_tx_pause_enqueue+0x1a>
   163de:	4a22      	ldr	r2, [pc, #136]	; (16468 <ctrl_tx_pause_enqueue+0xd0>)
   163e0:	4922      	ldr	r1, [pc, #136]	; (1646c <ctrl_tx_pause_enqueue+0xd4>)
   163e2:	4823      	ldr	r0, [pc, #140]	; (16470 <ctrl_tx_pause_enqueue+0xd8>)
   163e4:	f640 236e 	movw	r3, #2670	; 0xa6e
   163e8:	f011 fdde 	bl	27fa8 <printk>
   163ec:	4040      	eors	r0, r0
   163ee:	f380 8811 	msr	BASEPRI, r0
   163f2:	f04f 0003 	mov.w	r0, #3
   163f6:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   163f8:	e7db      	b.n	163b2 <ctrl_tx_pause_enqueue+0x1a>
		conn->tx_data_last = tx;
   163fa:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   163fe:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   16400:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   16402:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   16406:	2a00      	cmp	r2, #0
   16408:	d1db      	bne.n	163c2 <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   1640a:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1640e:	2b00      	cmp	r3, #0
   16410:	d1d8      	bne.n	163c4 <ctrl_tx_pause_enqueue+0x2c>
   16412:	e7f2      	b.n	163fa <ctrl_tx_pause_enqueue+0x62>
			LL_ASSERT(!pause);
   16414:	4a14      	ldr	r2, [pc, #80]	; (16468 <ctrl_tx_pause_enqueue+0xd0>)
   16416:	4915      	ldr	r1, [pc, #84]	; (1646c <ctrl_tx_pause_enqueue+0xd4>)
   16418:	4815      	ldr	r0, [pc, #84]	; (16470 <ctrl_tx_pause_enqueue+0xd8>)
   1641a:	f44f 6328 	mov.w	r3, #2688	; 0xa80
   1641e:	f011 fdc3 	bl	27fa8 <printk>
   16422:	4040      	eors	r0, r0
   16424:	f380 8811 	msr	BASEPRI, r0
   16428:	f04f 0003 	mov.w	r0, #3
   1642c:	df02      	svc	2
   1642e:	e7c0      	b.n	163b2 <ctrl_tx_pause_enqueue+0x1a>
			conn->tx_data = conn->tx_data->next;
   16430:	6819      	ldr	r1, [r3, #0]
   16432:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16436:	2800      	cmp	r0, #0
   16438:	d1cf      	bne.n	163da <ctrl_tx_pause_enqueue+0x42>
			tx->next = conn->tx_head->next;
   1643a:	6819      	ldr	r1, [r3, #0]
   1643c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1643e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   16440:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   16442:	2a00      	cmp	r2, #0
   16444:	d0e1      	beq.n	1640a <ctrl_tx_pause_enqueue+0x72>
   16446:	e7bc      	b.n	163c2 <ctrl_tx_pause_enqueue+0x2a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16448:	7919      	ldrb	r1, [r3, #4]
   1644a:	f001 0103 	and.w	r1, r1, #3
   1644e:	2903      	cmp	r1, #3
   16450:	d004      	beq.n	1645c <ctrl_tx_pause_enqueue+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16452:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   16456:	2a00      	cmp	r2, #0
   16458:	d0ab      	beq.n	163b2 <ctrl_tx_pause_enqueue+0x1a>
   1645a:	e7c0      	b.n	163de <ctrl_tx_pause_enqueue+0x46>
	    ((pdu_data_tx->llctrl.opcode !=
   1645c:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1645e:	2903      	cmp	r1, #3
   16460:	d0eb      	beq.n	1643a <ctrl_tx_pause_enqueue+0xa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16462:	290a      	cmp	r1, #10
   16464:	d1f5      	bne.n	16452 <ctrl_tx_pause_enqueue+0xba>
   16466:	e7e8      	b.n	1643a <ctrl_tx_pause_enqueue+0xa2>
   16468:	000305cc 	.word	0x000305cc
   1646c:	0003060c 	.word	0x0003060c
   16470:	0002fedc 	.word	0x0002fedc

00016474 <tx_lll_flush>:
{
   16474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   16478:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1647c:	4934      	ldr	r1, [pc, #208]	; (16550 <tx_lll_flush+0xdc>)
{
   1647e:	b083      	sub	sp, #12
   16480:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   16482:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   16486:	4640      	mov	r0, r8
   16488:	f7fa fc6e 	bl	10d68 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1648c:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   16490:	4629      	mov	r1, r5
   16492:	f008 fcb5 	bl	1ee00 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   16496:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   16498:	aa01      	add	r2, sp, #4
   1649a:	4631      	mov	r1, r6
   1649c:	f7fa fca4 	bl	10de8 <memq_dequeue>
	while (link) {
   164a0:	b328      	cbz	r0, 164ee <tx_lll_flush+0x7a>
   164a2:	4c2c      	ldr	r4, [pc, #176]	; (16554 <tx_lll_flush+0xe0>)
		lll_tx->handle = LLL_HANDLE_INVALID;
   164a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   164a8:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   164ac:	78e2      	ldrb	r2, [r4, #3]
	if (last == count) {
   164ae:	f894 c001 	ldrb.w	ip, [r4, #1]
   164b2:	78a1      	ldrb	r1, [r4, #2]
	last = last + 1;
   164b4:	1c53      	adds	r3, r2, #1
   164b6:	b2db      	uxtb	r3, r3
		last = 0U;
   164b8:	459c      	cmp	ip, r3
   164ba:	bf08      	it	eq
   164bc:	2300      	moveq	r3, #0
	if (last == first) {
   164be:	4299      	cmp	r1, r3
   164c0:	f894 c000 	ldrb.w	ip, [r4]
   164c4:	d033      	beq.n	1652e <tx_lll_flush+0xba>
		lll_tx->node = tx;
   164c6:	9901      	ldr	r1, [sp, #4]
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   164c8:	fb12 f20c 	smulbb	r2, r2, ip
   164cc:	eb09 0c02 	add.w	ip, r9, r2
		lll_tx->handle = LLL_HANDLE_INVALID;
   164d0:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   164d4:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   164d6:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   164da:	6002      	str	r2, [r0, #0]
		tx->next = link;
   164dc:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   164de:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   164e0:	70e3      	strb	r3, [r4, #3]
   164e2:	aa01      	add	r2, sp, #4
   164e4:	4631      	mov	r1, r6
   164e6:	f7fa fc7f 	bl	10de8 <memq_dequeue>
	while (link) {
   164ea:	2800      	cmp	r0, #0
   164ec:	d1de      	bne.n	164ac <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   164ee:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   164f2:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   164f6:	b150      	cbz	r0, 1650e <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   164f8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   164fa:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   164fc:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   16500:	f7fe fd2c 	bl	14f5c <ull_rx_put>
	ull_rx_sched();
   16504:	f7fe fd3a 	bl	14f7c <ull_rx_sched>
}
   16508:	b003      	add	sp, #12
   1650a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   1650e:	4a12      	ldr	r2, [pc, #72]	; (16558 <tx_lll_flush+0xe4>)
   16510:	4912      	ldr	r1, [pc, #72]	; (1655c <tx_lll_flush+0xe8>)
   16512:	4813      	ldr	r0, [pc, #76]	; (16560 <tx_lll_flush+0xec>)
   16514:	f640 13da 	movw	r3, #2522	; 0x9da
   16518:	f011 fd46 	bl	27fa8 <printk>
   1651c:	4040      	eors	r0, r0
   1651e:	f380 8811 	msr	BASEPRI, r0
   16522:	f04f 0003 	mov.w	r0, #3
   16526:	df02      	svc	2
	link = rx->hdr.link;
   16528:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   1652c:	e7e4      	b.n	164f8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   1652e:	4a0a      	ldr	r2, [pc, #40]	; (16558 <tx_lll_flush+0xe4>)
   16530:	490c      	ldr	r1, [pc, #48]	; (16564 <tx_lll_flush+0xf0>)
   16532:	480b      	ldr	r0, [pc, #44]	; (16560 <tx_lll_flush+0xec>)
   16534:	f640 13c6 	movw	r3, #2502	; 0x9c6
   16538:	f011 fd36 	bl	27fa8 <printk>
   1653c:	4040      	eors	r0, r0
   1653e:	f380 8811 	msr	BASEPRI, r0
   16542:	f04f 0003 	mov.w	r0, #3
   16546:	df02      	svc	2
		lll_tx->handle = LLL_HANDLE_INVALID;
   16548:	2300      	movs	r3, #0
   1654a:	801b      	strh	r3, [r3, #0]
   1654c:	deff      	udf	#255	; 0xff
   1654e:	bf00      	nop
   16550:	20001ca0 	.word	0x20001ca0
   16554:	20000560 	.word	0x20000560
   16558:	000305cc 	.word	0x000305cc
   1655c:	0003061c 	.word	0x0003061c
   16560:	0002fedc 	.word	0x0002fedc
   16564:	00030614 	.word	0x00030614

00016568 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   16568:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1656c:	f012 0202 	ands.w	r2, r2, #2
   16570:	d00a      	beq.n	16588 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   16572:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   16576:	b1d3      	cbz	r3, 165ae <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   16578:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   1657c:	681a      	ldr	r2, [r3, #0]
   1657e:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   16580:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   16582:	680b      	ldr	r3, [r1, #0]
   16584:	b1d3      	cbz	r3, 165bc <ctrl_tx_sec_enqueue+0x54>
   16586:	4770      	bx	lr
		if (conn->tx_head) {
   16588:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1658c:	b1cb      	cbz	r3, 165c2 <ctrl_tx_sec_enqueue+0x5a>
{
   1658e:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   16590:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   16594:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   16598:	45e6      	cmp	lr, ip
   1659a:	d004      	beq.n	165a6 <ctrl_tx_sec_enqueue+0x3e>
   1659c:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   165a0:	f1bc 0f03 	cmp.w	ip, #3
   165a4:	d010      	beq.n	165c8 <ctrl_tx_sec_enqueue+0x60>
}
   165a6:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   165aa:	f7ff bef5 	b.w	16398 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   165ae:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   165b2:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   165b4:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   165b8:	2b00      	cmp	r3, #0
   165ba:	d1e4      	bne.n	16586 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   165bc:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   165c0:	4770      	bx	lr
	bool pause = false;
   165c2:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   165c4:	f7ff bee8 	b.w	16398 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   165c8:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   165cc:	f00c 0c03 	and.w	ip, ip, #3
   165d0:	f1bc 0f03 	cmp.w	ip, #3
   165d4:	d1e7      	bne.n	165a6 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   165d6:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   165d8:	2a03      	cmp	r2, #3
   165da:	d005      	beq.n	165e8 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   165dc:	f1a2 020a 	sub.w	r2, r2, #10
   165e0:	fab2 f282 	clz	r2, r2
   165e4:	0952      	lsrs	r2, r2, #5
   165e6:	e7de      	b.n	165a6 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   165e8:	2201      	movs	r2, #1
   165ea:	e7dc      	b.n	165a6 <ctrl_tx_sec_enqueue+0x3e>

000165ec <ticker_stop_op_cb>:
{
   165ec:	b510      	push	{r4, lr}
   165ee:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   165f0:	b9b0      	cbnz	r0, 16620 <ticker_stop_op_cb+0x34>
	mfy.param = param;
   165f2:	4b12      	ldr	r3, [pc, #72]	; (1663c <ticker_stop_op_cb+0x50>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   165f4:	2200      	movs	r2, #0
   165f6:	2101      	movs	r1, #1
   165f8:	2002      	movs	r0, #2
	mfy.param = param;
   165fa:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   165fc:	f7fa fc56 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!ret);
   16600:	b900      	cbnz	r0, 16604 <ticker_stop_op_cb+0x18>
}
   16602:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   16604:	4a0e      	ldr	r2, [pc, #56]	; (16640 <ticker_stop_op_cb+0x54>)
   16606:	490f      	ldr	r1, [pc, #60]	; (16644 <ticker_stop_op_cb+0x58>)
   16608:	480f      	ldr	r0, [pc, #60]	; (16648 <ticker_stop_op_cb+0x5c>)
   1660a:	f44f 6318 	mov.w	r3, #2432	; 0x980
   1660e:	f011 fccb 	bl	27fa8 <printk>
   16612:	4040      	eors	r0, r0
   16614:	f380 8811 	msr	BASEPRI, r0
   16618:	f04f 0003 	mov.w	r0, #3
   1661c:	df02      	svc	2
}
   1661e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16620:	4a07      	ldr	r2, [pc, #28]	; (16640 <ticker_stop_op_cb+0x54>)
   16622:	490a      	ldr	r1, [pc, #40]	; (1664c <ticker_stop_op_cb+0x60>)
   16624:	4808      	ldr	r0, [pc, #32]	; (16648 <ticker_stop_op_cb+0x5c>)
   16626:	f640 137a 	movw	r3, #2426	; 0x97a
   1662a:	f011 fcbd 	bl	27fa8 <printk>
   1662e:	4040      	eors	r0, r0
   16630:	f380 8811 	msr	BASEPRI, r0
   16634:	f04f 0003 	mov.w	r0, #3
   16638:	df02      	svc	2
   1663a:	e7da      	b.n	165f2 <ticker_stop_op_cb+0x6>
   1663c:	200005f8 	.word	0x200005f8
   16640:	000305cc 	.word	0x000305cc
   16644:	00030354 	.word	0x00030354
   16648:	0002fedc 	.word	0x0002fedc
   1664c:	0003062c 	.word	0x0003062c

00016650 <disabled_cb>:
{
   16650:	b508      	push	{r3, lr}
	mfy.param = param;
   16652:	4b0b      	ldr	r3, [pc, #44]	; (16680 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16654:	2200      	movs	r2, #0
	mfy.param = param;
   16656:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   16658:	4611      	mov	r1, r2
   1665a:	2001      	movs	r0, #1
   1665c:	f7fa fc26 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!ret);
   16660:	b900      	cbnz	r0, 16664 <disabled_cb+0x14>
}
   16662:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   16664:	4a07      	ldr	r2, [pc, #28]	; (16684 <disabled_cb+0x34>)
   16666:	4908      	ldr	r1, [pc, #32]	; (16688 <disabled_cb+0x38>)
   16668:	4808      	ldr	r0, [pc, #32]	; (1668c <disabled_cb+0x3c>)
   1666a:	f640 13ac 	movw	r3, #2476	; 0x9ac
   1666e:	f011 fc9b 	bl	27fa8 <printk>
   16672:	4040      	eors	r0, r0
   16674:	f380 8811 	msr	BASEPRI, r0
   16678:	f04f 0003 	mov.w	r0, #3
   1667c:	df02      	svc	2
}
   1667e:	bd08      	pop	{r3, pc}
   16680:	200005c8 	.word	0x200005c8
   16684:	000305cc 	.word	0x000305cc
   16688:	00030354 	.word	0x00030354
   1668c:	0002fedc 	.word	0x0002fedc

00016690 <conn_disable>:
{
   16690:	b538      	push	{r3, r4, r5, lr}
   16692:	4604      	mov	r4, r0
	return hdr->ref;
   16694:	f810 3b1c 	ldrb.w	r3, [r0], #28
	if (ull_ref_get(hdr)) {
   16698:	b353      	cbz	r3, 166f0 <conn_disable+0x60>
		mfy.param = &conn->lll;
   1669a:	4d17      	ldr	r5, [pc, #92]	; (166f8 <conn_disable+0x68>)
		LL_ASSERT(!hdr->disabled_cb);
   1669c:	6963      	ldr	r3, [r4, #20]
		mfy.param = &conn->lll;
   1669e:	60a8      	str	r0, [r5, #8]
		LL_ASSERT(!hdr->disabled_cb);
   166a0:	b16b      	cbz	r3, 166be <conn_disable+0x2e>
   166a2:	4a16      	ldr	r2, [pc, #88]	; (166fc <conn_disable+0x6c>)
   166a4:	4916      	ldr	r1, [pc, #88]	; (16700 <conn_disable+0x70>)
   166a6:	4817      	ldr	r0, [pc, #92]	; (16704 <conn_disable+0x74>)
   166a8:	f640 1395 	movw	r3, #2453	; 0x995
   166ac:	f011 fc7c 	bl	27fa8 <printk>
   166b0:	4040      	eors	r0, r0
   166b2:	f380 8811 	msr	BASEPRI, r0
   166b6:	f04f 0003 	mov.w	r0, #3
   166ba:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   166bc:	68a8      	ldr	r0, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   166be:	4912      	ldr	r1, [pc, #72]	; (16708 <conn_disable+0x78>)
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   166c0:	4b0d      	ldr	r3, [pc, #52]	; (166f8 <conn_disable+0x68>)
   166c2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   166c4:	e9c4 1005 	strd	r1, r0, [r4, #20]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   166c8:	4611      	mov	r1, r2
   166ca:	2001      	movs	r0, #1
   166cc:	f7fa fbee 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!ret);
   166d0:	b900      	cbnz	r0, 166d4 <conn_disable+0x44>
}
   166d2:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   166d4:	4a09      	ldr	r2, [pc, #36]	; (166fc <conn_disable+0x6c>)
   166d6:	490d      	ldr	r1, [pc, #52]	; (1670c <conn_disable+0x7c>)
   166d8:	480a      	ldr	r0, [pc, #40]	; (16704 <conn_disable+0x74>)
   166da:	f640 139c 	movw	r3, #2460	; 0x99c
   166de:	f011 fc63 	bl	27fa8 <printk>
   166e2:	4040      	eors	r0, r0
   166e4:	f380 8811 	msr	BASEPRI, r0
   166e8:	f04f 0003 	mov.w	r0, #3
   166ec:	df02      	svc	2
}
   166ee:	bd38      	pop	{r3, r4, r5, pc}
   166f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		disabled_cb(&conn->lll);
   166f4:	f7ff bfac 	b.w	16650 <disabled_cb>
   166f8:	200005e8 	.word	0x200005e8
   166fc:	000305cc 	.word	0x000305cc
   16700:	00030490 	.word	0x00030490
   16704:	0002fedc 	.word	0x0002fedc
   16708:	00016651 	.word	0x00016651
   1670c:	00030354 	.word	0x00030354

00016710 <conn_setup_adv_scan_disabled_cb>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   16710:	6883      	ldr	r3, [r0, #8]
   16712:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   16714:	7f53      	ldrb	r3, [r2, #29]
   16716:	09db      	lsrs	r3, r3, #7
	ftr = &(rx->rx_ftr);
   16718:	f100 0108 	add.w	r1, r0, #8
	switch (lll->role) {
   1671c:	d001      	beq.n	16722 <conn_setup_adv_scan_disabled_cb+0x12>
		ull_periph_setup(rx, ftr, lll);
   1671e:	f7eb bfa3 	b.w	2668 <ull_periph_setup>
		ull_central_setup(rx, ftr, lll);
   16722:	f7ec bc15 	b.w	2f50 <ull_central_setup>
   16726:	bf00      	nop

00016728 <ticker_start_conn_op_cb>:
{
   16728:	b510      	push	{r4, lr}
   1672a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1672c:	b990      	cbnz	r0, 16754 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1672e:	4620      	mov	r0, r4
   16730:	f7fe fb4a 	bl	14dc8 <ull_update_unmark>
	LL_ASSERT(p == param);
   16734:	4284      	cmp	r4, r0
   16736:	d00c      	beq.n	16752 <ticker_start_conn_op_cb+0x2a>
   16738:	4a0d      	ldr	r2, [pc, #52]	; (16770 <ticker_start_conn_op_cb+0x48>)
   1673a:	490e      	ldr	r1, [pc, #56]	; (16774 <ticker_start_conn_op_cb+0x4c>)
   1673c:	480e      	ldr	r0, [pc, #56]	; (16778 <ticker_start_conn_op_cb+0x50>)
   1673e:	f640 03b7 	movw	r3, #2231	; 0x8b7
   16742:	f011 fc31 	bl	27fa8 <printk>
   16746:	4040      	eors	r0, r0
   16748:	f380 8811 	msr	BASEPRI, r0
   1674c:	f04f 0003 	mov.w	r0, #3
   16750:	df02      	svc	2
}
   16752:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16754:	4a06      	ldr	r2, [pc, #24]	; (16770 <ticker_start_conn_op_cb+0x48>)
   16756:	4909      	ldr	r1, [pc, #36]	; (1677c <ticker_start_conn_op_cb+0x54>)
   16758:	4807      	ldr	r0, [pc, #28]	; (16778 <ticker_start_conn_op_cb+0x50>)
   1675a:	f640 03b4 	movw	r3, #2228	; 0x8b4
   1675e:	f011 fc23 	bl	27fa8 <printk>
   16762:	4040      	eors	r0, r0
   16764:	f380 8811 	msr	BASEPRI, r0
   16768:	f04f 0003 	mov.w	r0, #3
   1676c:	df02      	svc	2
   1676e:	e7de      	b.n	1672e <ticker_start_conn_op_cb+0x6>
   16770:	000305cc 	.word	0x000305cc
   16774:	00030638 	.word	0x00030638
   16778:	0002fedc 	.word	0x0002fedc
   1677c:	0003062c 	.word	0x0003062c

00016780 <ticker_stop_conn_op_cb>:
{
   16780:	b510      	push	{r4, lr}
   16782:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16784:	b990      	cbnz	r0, 167ac <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   16786:	4620      	mov	r0, r4
   16788:	f7fe fb14 	bl	14db4 <ull_update_mark>
	LL_ASSERT(p == param);
   1678c:	4284      	cmp	r4, r0
   1678e:	d00c      	beq.n	167aa <ticker_stop_conn_op_cb+0x2a>
   16790:	4a0d      	ldr	r2, [pc, #52]	; (167c8 <ticker_stop_conn_op_cb+0x48>)
   16792:	490e      	ldr	r1, [pc, #56]	; (167cc <ticker_stop_conn_op_cb+0x4c>)
   16794:	480e      	ldr	r0, [pc, #56]	; (167d0 <ticker_stop_conn_op_cb+0x50>)
   16796:	f640 03ad 	movw	r3, #2221	; 0x8ad
   1679a:	f011 fc05 	bl	27fa8 <printk>
   1679e:	4040      	eors	r0, r0
   167a0:	f380 8811 	msr	BASEPRI, r0
   167a4:	f04f 0003 	mov.w	r0, #3
   167a8:	df02      	svc	2
}
   167aa:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   167ac:	4a06      	ldr	r2, [pc, #24]	; (167c8 <ticker_stop_conn_op_cb+0x48>)
   167ae:	4909      	ldr	r1, [pc, #36]	; (167d4 <ticker_stop_conn_op_cb+0x54>)
   167b0:	4807      	ldr	r0, [pc, #28]	; (167d0 <ticker_stop_conn_op_cb+0x50>)
   167b2:	f640 03aa 	movw	r3, #2218	; 0x8aa
   167b6:	f011 fbf7 	bl	27fa8 <printk>
   167ba:	4040      	eors	r0, r0
   167bc:	f380 8811 	msr	BASEPRI, r0
   167c0:	f04f 0003 	mov.w	r0, #3
   167c4:	df02      	svc	2
   167c6:	e7de      	b.n	16786 <ticker_stop_conn_op_cb+0x6>
   167c8:	000305cc 	.word	0x000305cc
   167cc:	00030638 	.word	0x00030638
   167d0:	0002fedc 	.word	0x0002fedc
   167d4:	0003062c 	.word	0x0003062c

000167d8 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   167d8:	b900      	cbnz	r0, 167dc <ticker_update_conn_op_cb+0x4>
   167da:	4770      	bx	lr
{
   167dc:	b510      	push	{r4, lr}
   167de:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   167e0:	f7fe fafe 	bl	14de0 <ull_update_mark_get>
   167e4:	4284      	cmp	r4, r0
   167e6:	d010      	beq.n	1680a <ticker_update_conn_op_cb+0x32>
   167e8:	f7fe fade 	bl	14da8 <ull_disable_mark_get>
   167ec:	4284      	cmp	r4, r0
   167ee:	d00c      	beq.n	1680a <ticker_update_conn_op_cb+0x32>
   167f0:	4a06      	ldr	r2, [pc, #24]	; (1680c <ticker_update_conn_op_cb+0x34>)
   167f2:	4907      	ldr	r1, [pc, #28]	; (16810 <ticker_update_conn_op_cb+0x38>)
   167f4:	4807      	ldr	r0, [pc, #28]	; (16814 <ticker_update_conn_op_cb+0x3c>)
   167f6:	f640 03a1 	movw	r3, #2209	; 0x8a1
   167fa:	f011 fbd5 	bl	27fa8 <printk>
   167fe:	4040      	eors	r0, r0
   16800:	f380 8811 	msr	BASEPRI, r0
   16804:	f04f 0003 	mov.w	r0, #3
   16808:	df02      	svc	2
}
   1680a:	bd10      	pop	{r4, pc}
   1680c:	000305cc 	.word	0x000305cc
   16810:	00030644 	.word	0x00030644
   16814:	0002fedc 	.word	0x0002fedc

00016818 <tx_ull_dequeue>:
{
   16818:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1681a:	e9d0 2471 	ldrd	r2, r4, [r0, #452]	; 0x1c4
{
   1681e:	4603      	mov	r3, r0
   16820:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   16822:	b164      	cbz	r4, 1683e <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   16824:	4294      	cmp	r4, r2
   16826:	d021      	beq.n	1686c <tx_ull_dequeue+0x54>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   16828:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   1682c:	428a      	cmp	r2, r1
   1682e:	d00b      	beq.n	16848 <tx_ull_dequeue+0x30>
		conn->tx_head = conn->tx_head->next;
   16830:	6811      	ldr	r1, [r2, #0]
   16832:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   16836:	2200      	movs	r2, #0
}
   16838:	bc10      	pop	{r4}
		tx->next = NULL;
   1683a:	6002      	str	r2, [r0, #0]
}
   1683c:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1683e:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   16842:	4291      	cmp	r1, r2
   16844:	d104      	bne.n	16850 <tx_ull_dequeue+0x38>
	if (conn->tx_head == conn->tx_ctrl) {
   16846:	b18a      	cbz	r2, 1686c <tx_ull_dequeue+0x54>
			conn->tx_data = conn->tx_data->next;
   16848:	6809      	ldr	r1, [r1, #0]
   1684a:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   1684e:	e7ef      	b.n	16830 <tx_ull_dequeue+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16850:	7911      	ldrb	r1, [r2, #4]
   16852:	f001 0103 	and.w	r1, r1, #3
   16856:	2903      	cmp	r1, #3
   16858:	d013      	beq.n	16882 <tx_ull_dequeue+0x6a>
		conn->tx_head = conn->tx_head->next;
   1685a:	6812      	ldr	r2, [r2, #0]
   1685c:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   16860:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   16862:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   16866:	bc10      	pop	{r4}
		tx->next = tx;
   16868:	6000      	str	r0, [r0, #0]
}
   1686a:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1686c:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   16870:	6812      	ldr	r2, [r2, #0]
   16872:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   16876:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   16878:	bf18      	it	ne
   1687a:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1687e:	d1f2      	bne.n	16866 <tx_ull_dequeue+0x4e>
   16880:	e7ee      	b.n	16860 <tx_ull_dequeue+0x48>
	    ((pdu_data_tx->llctrl.opcode !=
   16882:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16884:	2903      	cmp	r1, #3
   16886:	d0d3      	beq.n	16830 <tx_ull_dequeue+0x18>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16888:	290a      	cmp	r1, #10
   1688a:	d1e6      	bne.n	1685a <tx_ull_dequeue+0x42>
   1688c:	e7d0      	b.n	16830 <tx_ull_dequeue+0x18>
   1688e:	bf00      	nop

00016890 <feature_rsp_send>:

#if defined(CONFIG_BT_PERIPHERAL) || \
	(defined(CONFIG_BT_CENTRAL) && defined(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG))
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			    struct pdu_data *pdu_rx)
{
   16890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->common.txn_lock) {
   16894:	f890 60d8 	ldrb.w	r6, [r0, #216]	; 0xd8
   16898:	f016 0602 	ands.w	r6, r6, #2
{
   1689c:	460f      	mov	r7, r1
	if (conn->common.txn_lock) {
   1689e:	d16b      	bne.n	16978 <feature_rsp_send+0xe8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   168a0:	4605      	mov	r5, r0
   168a2:	4839      	ldr	r0, [pc, #228]	; (16988 <feature_rsp_send+0xf8>)
   168a4:	4690      	mov	r8, r2
   168a6:	f7fa fa2d 	bl	10d04 <mem_acquire>
	if (!tx) {
   168aa:	4604      	mov	r4, r0
   168ac:	2800      	cmp	r0, #0
   168ae:	d068      	beq.n	16982 <feature_rsp_send+0xf2>
	conn->common.txn_lock = 1U;
   168b0:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   168b4:	4935      	ldr	r1, [pc, #212]	; (1698c <feature_rsp_send+0xfc>)
	conn->common.txn_lock = 1U;
   168b6:	f043 0302 	orr.w	r3, r3, #2
   168ba:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
   168be:	f8d8 2004 	ldr.w	r2, [r8, #4]
   168c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
	feat &= LL_FEAT_BIT_MASK;
   168c6:	4311      	orrs	r1, r2
		return err;
	}

	/* AND the feature set to get Feature USED */
	req = &pdu_rx->llctrl.feature_req;
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   168c8:	f8d5 2128 	ldr.w	r2, [r5, #296]	; 0x128
   168cc:	400a      	ands	r2, r1
   168ce:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   168d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   168d6:	f8d5 212c 	ldr.w	r2, [r5, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   168da:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   168de:	4013      	ands	r3, r2
   168e0:	f8c5 312c 	str.w	r3, [r5, #300]	; 0x12c
   168e4:	f8d8 9004 	ldr.w	r9, [r8, #4]
   168e8:	f8d8 8008 	ldr.w	r8, [r8, #8]
	 * Get all the features of peer, except octet 0.
	 * Octet 0 is the actual features used on the link
	 * See BTCore V5.2, Vol. 6, Part B, chapter 5.1.4
	 */
	conn->llcp_feature.features_peer =
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   168ec:	f7fd fc50 	bl	14190 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   168f0:	4b26      	ldr	r3, [pc, #152]	; (1698c <feature_rsp_send+0xfc>)
   168f2:	ea49 0303 	orr.w	r3, r9, r3
	feat_result = feat_to_keep & feat_octet0;
   168f6:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   168f8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   168fc:	f029 09ff 	bic.w	r9, r9, #255	; 0xff
   16900:	ea43 0309 	orr.w	r3, r3, r9
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16904:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   16908:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1690c:	f8c5 3130 	str.w	r3, [r5, #304]	; 0x130

	/* features exchanged */
	conn->common.fex_valid = 1U;
   16910:	f895 30d8 	ldrb.w	r3, [r5, #216]	; 0xd8
   16914:	f043 0301 	orr.w	r3, r3, #1
   16918:	f885 30d8 	strb.w	r3, [r5, #216]	; 0xd8
	/* Enqueue feature response */
	pdu_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_tx);

	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1691c:	7923      	ldrb	r3, [r4, #4]
   1691e:	f008 08ff 	and.w	r8, r8, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16922:	f048 0210 	orr.w	r2, r8, #16
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16926:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_feature.features_peer =
   1692a:	f8c5 2134 	str.w	r2, [r5, #308]	; 0x134
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1692e:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   16930:	2309      	movs	r3, #9
   16932:	7163      	strb	r3, [r4, #5]
		sizeof(struct pdu_data_llctrl_feature_rsp);
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   16934:	71e3      	strb	r3, [r4, #7]
__ssp_bos_icheck3(memset, void *, int)
   16936:	60a6      	str	r6, [r4, #8]
   16938:	60e6      	str	r6, [r4, #12]
		     sizeof(pdu_tx->llctrl.feature_rsp.features));
	/*
	 * On feature response we send the local supported features.
	 * See BTCore V5.2 VOl 6 Part B, chapter 5.1.4
	 */
	feat = feat_land_octet0(ll_feat_get(),
   1693a:	f7fd fc29 	bl	14190 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1693e:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
	dst[0] = val;
   16942:	7321      	strb	r1, [r4, #12]
   16944:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   16946:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1694a:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
   1694e:	4303      	orrs	r3, r0
	sys_put_le16(val >> 16, &dst[2]);
   16950:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   16952:	7223      	strb	r3, [r4, #8]
   16954:	72a2      	strb	r2, [r4, #10]
	dst[1] = val >> 8;
   16956:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1695a:	0a12      	lsrs	r2, r2, #8
				conn->llcp_feature.features_conn);
	sys_put_le64(feat, pdu_tx->llctrl.feature_rsp.features);

	ctrl_tx_sec_enqueue(conn, tx);
   1695c:	4628      	mov	r0, r5
   1695e:	7263      	strb	r3, [r4, #9]
   16960:	7366      	strb	r6, [r4, #13]
	dst[0] = val;
   16962:	73a6      	strb	r6, [r4, #14]
	dst[1] = val >> 8;
   16964:	73e6      	strb	r6, [r4, #15]
   16966:	72e2      	strb	r2, [r4, #11]
   16968:	4621      	mov	r1, r4
   1696a:	f7ff fdfd 	bl	16568 <ctrl_tx_sec_enqueue>

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1696e:	2301      	movs	r3, #1
   16970:	713b      	strb	r3, [r7, #4]

	return 0;
   16972:	4630      	mov	r0, r6
}
   16974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16978:	2301      	movs	r3, #1
   1697a:	710b      	strb	r3, [r1, #4]
		*err = 0U;
   1697c:	2000      	movs	r0, #0
}
   1697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		*err = -ENOBUFS;
   16982:	f06f 0068 	mvn.w	r0, #104	; 0x68
   16986:	e7f5      	b.n	16974 <feature_rsp_send+0xe4>
   16988:	20002e98 	.word	0x20002e98
   1698c:	087830d0 	.word	0x087830d0

00016990 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   16990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16992:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   16994:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   16998:	0787      	lsls	r7, r0, #30
{
   1699a:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   1699c:	d433      	bmi.n	16a06 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1699e:	482e      	ldr	r0, [pc, #184]	; (16a58 <reject_ext_ind_send+0xc8>)
   169a0:	4617      	mov	r7, r2
   169a2:	461e      	mov	r6, r3
   169a4:	f7fa f9ae 	bl	10d04 <mem_acquire>
	if (!tx) {
   169a8:	2800      	cmp	r0, #0
   169aa:	d038      	beq.n	16a1e <reject_ext_ind_send+0x8e>
	conn->common.txn_lock = 1U;
   169ac:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   169b0:	f043 0302 	orr.w	r3, r3, #2
   169b4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_ctrl_tx = (void *)tx->pdu;

	ull_pdu_data_init(pdu_ctrl_tx);

	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   169b8:	2303      	movs	r3, #3
   169ba:	7143      	strb	r3, [r0, #5]
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   169bc:	2211      	movs	r2, #17
	    conn->tx_head &&
   169be:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   169c2:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169c4:	7902      	ldrb	r2, [r0, #4]
		if (!conn->tx_ctrl) {
   169c6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   169ca:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169cc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   169d0:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169d2:	7102      	strb	r2, [r0, #4]
	if (
   169d4:	b1db      	cbz	r3, 16a0e <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   169d6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   169da:	0796      	lsls	r6, r2, #30
   169dc:	d417      	bmi.n	16a0e <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   169de:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   169e2:	07d2      	lsls	r2, r2, #31
   169e4:	d413      	bmi.n	16a0e <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   169e6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   169ea:	4293      	cmp	r3, r2
   169ec:	d022      	beq.n	16a34 <reject_ext_ind_send+0xa4>
		} else if (!conn->tx_ctrl) {
   169ee:	b1c9      	cbz	r1, 16a24 <reject_ext_ind_send+0x94>
	tx->next = conn->tx_ctrl_last->next;
   169f0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   169f4:	681a      	ldr	r2, [r3, #0]
   169f6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   169f8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   169fa:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   169fc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16a00:	b90b      	cbnz	r3, 16a06 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   16a02:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16a06:	2301      	movs	r3, #1
   16a08:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   16a0a:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   16a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   16a0e:	2900      	cmp	r1, #0
   16a10:	d1ee      	bne.n	169f0 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   16a12:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16a14:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   16a18:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   16a1c:	e7f0      	b.n	16a00 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   16a1e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   16a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16a24:	791a      	ldrb	r2, [r3, #4]
   16a26:	f002 0203 	and.w	r2, r2, #3
   16a2a:	2a03      	cmp	r2, #3
   16a2c:	d00e      	beq.n	16a4c <reject_ext_ind_send+0xbc>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16a2e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   16a32:	e7df      	b.n	169f4 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   16a34:	681a      	ldr	r2, [r3, #0]
   16a36:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16a3a:	2900      	cmp	r1, #0
   16a3c:	d1d8      	bne.n	169f0 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   16a3e:	681a      	ldr	r2, [r3, #0]
   16a40:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16a42:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16a44:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16a46:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   16a4a:	e7d9      	b.n	16a00 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   16a4c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16a4e:	2a03      	cmp	r2, #3
   16a50:	d0f5      	beq.n	16a3e <reject_ext_ind_send+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16a52:	2a0a      	cmp	r2, #10
   16a54:	d1eb      	bne.n	16a2e <reject_ext_ind_send+0x9e>
   16a56:	e7f2      	b.n	16a3e <reject_ext_ind_send+0xae>
   16a58:	20002e98 	.word	0x20002e98

00016a5c <event_len_prep>:
{
   16a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   16a5e:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   16a62:	f003 0207 	and.w	r2, r3, #7
{
   16a66:	4604      	mov	r4, r0
	switch (conn->llcp_length.state) {
   16a68:	2a06      	cmp	r2, #6
   16a6a:	f200 80d4 	bhi.w	16c16 <event_len_prep+0x1ba>
   16a6e:	e8df f002 	tbb	[pc, r2]
   16a72:	4704      	.short	0x4704
   16a74:	48484747 	.word	0x48484747
   16a78:	47          	.byte	0x47
   16a79:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16a7a:	486e      	ldr	r0, [pc, #440]	; (16c34 <event_len_prep+0x1d8>)
   16a7c:	f7fa f942 	bl	10d04 <mem_acquire>
		if (!tx) {
   16a80:	2800      	cmp	r0, #0
   16a82:	d03d      	beq.n	16b00 <event_len_prep+0xa4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16a84:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16a88:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   16a8c:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   16a90:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16a94:	2301      	movs	r3, #1
   16a96:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   16a9a:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   16a9e:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   16aa2:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16aa4:	72c3      	strb	r3, [r0, #11]
   16aa6:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16aa8:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   16aaa:	2309      	movs	r3, #9
   16aac:	7143      	strb	r3, [r0, #5]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   16aae:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16ab0:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   16ab2:	2214      	movs	r2, #20
	    conn->tx_head &&
   16ab4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   16ab8:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16aba:	2100      	movs	r1, #0
   16abc:	221b      	movs	r2, #27
   16abe:	7241      	strb	r1, [r0, #9]
		if (!conn->tx_ctrl) {
   16ac0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   16ac4:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16ac6:	7902      	ldrb	r2, [r0, #4]
   16ac8:	f042 0203 	orr.w	r2, r2, #3
   16acc:	7102      	strb	r2, [r0, #4]
	if (
   16ace:	b13b      	cbz	r3, 16ae0 <event_len_prep+0x84>
	    !conn->llcp_enc.pause_tx &&
   16ad0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   16ad4:	0795      	lsls	r5, r2, #30
   16ad6:	d403      	bmi.n	16ae0 <event_len_prep+0x84>
	    !conn->llcp_phy.pause_tx &&
   16ad8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   16adc:	07d2      	lsls	r2, r2, #31
   16ade:	d573      	bpl.n	16bc8 <event_len_prep+0x16c>
		if (!conn->tx_ctrl) {
   16ae0:	2900      	cmp	r1, #0
   16ae2:	d07f      	beq.n	16be4 <event_len_prep+0x188>
	tx->next = conn->tx_ctrl_last->next;
   16ae4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16ae8:	681a      	ldr	r2, [r3, #0]
   16aea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16aec:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16aee:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   16af0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16af4:	2b00      	cmp	r3, #0
   16af6:	d056      	beq.n	16ba6 <event_len_prep+0x14a>
		conn->procedure_expire = conn->procedure_reload;
   16af8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   16afc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   16b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16b02:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   16b06:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   16b0a:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   16b0e:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   16b12:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   16b16:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16b1a:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   16b1c:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   16b20:	d024      	beq.n	16b6c <event_len_prep+0x110>
			conn->llcp_length.state =
   16b22:	2206      	movs	r2, #6
   16b24:	f362 0302 	bfi	r3, r2, #0, #3
   16b28:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   16b2c:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   16b30:	b335      	cbz	r5, 16b80 <event_len_prep+0x124>
   16b32:	6828      	ldr	r0, [r5, #0]
   16b34:	b320      	cbz	r0, 16b80 <event_len_prep+0x124>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16b36:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   16b38:	6842      	ldr	r2, [r0, #4]
   16b3a:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16b3e:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   16b42:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16b44:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   16b46:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   16b48:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   16b4a:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16b4c:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16b4e:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   16b50:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   16b52:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   16b56:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   16b58:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   16b5a:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16b5c:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16b5e:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   16b60:	f7fe f86c 	bl	14c3c <ll_rx_put>
}
   16b64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   16b68:	f7fe b872 	b.w	14c50 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   16b6c:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   16b70:	b9e2      	cbnz	r2, 16bac <event_len_prep+0x150>
				conn->llcp_length.ack = conn->llcp_length.req;
   16b72:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   16b76:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   16b7a:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   16b7e:	e7d5      	b.n	16b2c <event_len_prep+0xd0>
		LL_ASSERT(rx && rx->hdr.link);
   16b80:	4a2d      	ldr	r2, [pc, #180]	; (16c38 <event_len_prep+0x1dc>)
   16b82:	492e      	ldr	r1, [pc, #184]	; (16c3c <event_len_prep+0x1e0>)
   16b84:	482e      	ldr	r0, [pc, #184]	; (16c40 <event_len_prep+0x1e4>)
   16b86:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
   16b8a:	f011 fa0d 	bl	27fa8 <printk>
   16b8e:	4040      	eors	r0, r0
   16b90:	f380 8811 	msr	BASEPRI, r0
   16b94:	f04f 0003 	mov.w	r0, #3
   16b98:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   16b9a:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   16b9c:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   16ba0:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   16ba4:	e7c7      	b.n	16b36 <event_len_prep+0xda>
		conn->tx_data_last = tx;
   16ba6:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   16baa:	e7a5      	b.n	16af8 <event_len_prep+0x9c>
				conn->llcp_length.tx_octets =
   16bac:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   16bb0:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16bb2:	f362 0302 	bfi	r3, r2, #0, #3
   16bb6:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   16bba:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   16bbe:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   16bc2:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   16bc6:	e7b1      	b.n	16b2c <event_len_prep+0xd0>
		if (conn->tx_head == conn->tx_data) {
   16bc8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   16bcc:	4293      	cmp	r3, r2
   16bce:	d00f      	beq.n	16bf0 <event_len_prep+0x194>
		} else if (!conn->tx_ctrl) {
   16bd0:	2900      	cmp	r1, #0
   16bd2:	d187      	bne.n	16ae4 <event_len_prep+0x88>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16bd4:	791a      	ldrb	r2, [r3, #4]
   16bd6:	f002 0203 	and.w	r2, r2, #3
   16bda:	2a03      	cmp	r2, #3
   16bdc:	d015      	beq.n	16c0a <event_len_prep+0x1ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16bde:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   16be2:	e781      	b.n	16ae8 <event_len_prep+0x8c>
			tx->next = conn->tx_head;
   16be4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16be6:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   16bea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   16bee:	e781      	b.n	16af4 <event_len_prep+0x98>
			conn->tx_data = conn->tx_data->next;
   16bf0:	681a      	ldr	r2, [r3, #0]
   16bf2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16bf6:	2900      	cmp	r1, #0
   16bf8:	f47f af74 	bne.w	16ae4 <event_len_prep+0x88>
			tx->next = conn->tx_head->next;
   16bfc:	681a      	ldr	r2, [r3, #0]
   16bfe:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16c00:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16c02:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16c04:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   16c08:	e774      	b.n	16af4 <event_len_prep+0x98>
	    ((pdu_data_tx->llctrl.opcode !=
   16c0a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16c0c:	2a03      	cmp	r2, #3
   16c0e:	d0f5      	beq.n	16bfc <event_len_prep+0x1a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16c10:	2a0a      	cmp	r2, #10
   16c12:	d1e4      	bne.n	16bde <event_len_prep+0x182>
   16c14:	e7f2      	b.n	16bfc <event_len_prep+0x1a0>
		LL_ASSERT(0);
   16c16:	4a08      	ldr	r2, [pc, #32]	; (16c38 <event_len_prep+0x1dc>)
   16c18:	490a      	ldr	r1, [pc, #40]	; (16c44 <event_len_prep+0x1e8>)
   16c1a:	4809      	ldr	r0, [pc, #36]	; (16c40 <event_len_prep+0x1e4>)
   16c1c:	f241 03ea 	movw	r3, #4330	; 0x10ea
   16c20:	f011 f9c2 	bl	27fa8 <printk>
   16c24:	4040      	eors	r0, r0
   16c26:	f380 8811 	msr	BASEPRI, r0
   16c2a:	f04f 0003 	mov.w	r0, #3
   16c2e:	df02      	svc	2
}
   16c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16c32:	bf00      	nop
   16c34:	20002e98 	.word	0x20002e98
   16c38:	000305cc 	.word	0x000305cc
   16c3c:	00030698 	.word	0x00030698
   16c40:	0002fedc 	.word	0x0002fedc
   16c44:	0002ff74 	.word	0x0002ff74

00016c48 <event_phy_upd_ind_prep>:
{
   16c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   16c4c:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   16c50:	f013 0601 	ands.w	r6, r3, #1
{
   16c54:	4604      	mov	r4, r0
   16c56:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   16c58:	f040 8092 	bne.w	16d80 <event_phy_upd_ind_prep+0x138>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   16c5c:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   16c60:	1a69      	subs	r1, r5, r1
   16c62:	0409      	lsls	r1, r1, #16
   16c64:	f100 8093 	bmi.w	16d8e <event_phy_upd_ind_prep+0x146>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   16c68:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   16c6c:	2900      	cmp	r1, #0
   16c6e:	f2c0 8110 	blt.w	16e92 <event_phy_upd_ind_prep+0x24a>
		rx = conn->llcp_rx;
   16c72:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   16c76:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   16c78:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   16c7c:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   16c80:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   16c84:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   16c88:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   16c8c:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   16c90:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   16c94:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   16c98:	d17b      	bne.n	16d92 <event_phy_upd_ind_prep+0x14a>
		uint16_t eff_tx_time = lll->max_tx_time;
   16c9a:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   16c9e:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   16ca2:	d008      	beq.n	16cb6 <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   16ca4:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   16ca8:	095b      	lsrs	r3, r3, #5
   16caa:	f363 0102 	bfi	r1, r3, #0, #3
   16cae:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   16cb2:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   16cb6:	2d00      	cmp	r5, #0
   16cb8:	f000 80cb 	beq.w	16e52 <event_phy_upd_ind_prep+0x20a>
   16cbc:	6828      	ldr	r0, [r5, #0]
   16cbe:	2800      	cmp	r0, #0
   16cc0:	f000 80c7 	beq.w	16e52 <event_phy_upd_ind_prep+0x20a>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16cc4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   16cc8:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   16ccc:	f8d0 c004 	ldr.w	ip, [r0, #4]
   16cd0:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16cd4:	0792      	lsls	r2, r2, #30
   16cd6:	f3c3 0c02 	ubfx	ip, r3, #0, #3
		    (lll->phy_rx == old_rx)) {
   16cda:	f3c1 0e02 	ubfx	lr, r1, #0, #3
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16cde:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   16ce2:	f001 0107 	and.w	r1, r1, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16ce6:	d402      	bmi.n	16cee <event_phy_upd_ind_prep+0xa6>
   16ce8:	4599      	cmp	r9, r3
   16cea:	f000 80ee 	beq.w	16eca <event_phy_upd_ind_prep+0x282>
		rx->hdr.handle = lll->handle;
   16cee:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16cf0:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16cf2:	231c      	movs	r3, #28
   16cf4:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   16cf6:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
   16cf8:	f885 c01d 	strb.w	ip, [r5, #29]
		upd->rx = lll->phy_rx;
   16cfc:	f885 e01e 	strb.w	lr, [r5, #30]
		upd->status = 0U;
   16d00:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   16d02:	4629      	mov	r1, r5
   16d04:	f7fd ff9a 	bl	14c3c <ll_rx_put>
		rx = conn->llcp_rx;
   16d08:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   16d0c:	2d00      	cmp	r5, #0
   16d0e:	f000 80b1 	beq.w	16e74 <event_phy_upd_ind_prep+0x22c>
   16d12:	6828      	ldr	r0, [r5, #0]
   16d14:	2800      	cmp	r0, #0
   16d16:	f000 80ad 	beq.w	16e74 <event_phy_upd_ind_prep+0x22c>
		if ((eff_tx_time <= lll->max_tx_time) &&
   16d1a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   16d1e:	6842      	ldr	r2, [r0, #4]
   16d20:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   16d24:	42b3      	cmp	r3, r6
   16d26:	d30a      	bcc.n	16d3e <event_phy_upd_ind_prep+0xf6>
   16d28:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   16d2c:	d807      	bhi.n	16d3e <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   16d2e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   16d32:	42bb      	cmp	r3, r7
   16d34:	d303      	bcc.n	16d3e <event_phy_upd_ind_prep+0xf6>
		    (eff_rx_time <= lll->max_rx_time) &&
   16d36:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   16d3a:	f240 80ff 	bls.w	16f3c <event_phy_upd_ind_prep+0x2f4>
		lll->max_tx_time = eff_tx_time;
   16d3e:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   16d42:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   16d46:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   16d48:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   16d4a:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   16d4c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16d50:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16d54:	2109      	movs	r1, #9
   16d56:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16d58:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   16d5c:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   16d5e:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   16d62:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   16d64:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   16d68:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16d6a:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   16d6c:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   16d6e:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   16d70:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16d72:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   16d74:	f7fd ff62 	bl	14c3c <ll_rx_put>
}
   16d78:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   16d7c:	f7fd bf68 	b.w	14c50 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   16d80:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   16d84:	2200      	movs	r2, #0
   16d86:	f7fa f827 	bl	10dd8 <memq_peek>
   16d8a:	4606      	mov	r6, r0
   16d8c:	b150      	cbz	r0, 16da4 <event_phy_upd_ind_prep+0x15c>
}
   16d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   16d92:	f3c3 0082 	ubfx	r0, r3, #2, #3
   16d96:	f360 0102 	bfi	r1, r0, #0, #3
   16d9a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   16d9e:	f44f 76a4 	mov.w	r6, #328	; 0x148
   16da2:	e77c      	b.n	16c9e <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   16da4:	2002      	movs	r0, #2
   16da6:	f7fd ff59 	bl	14c5c <ll_pdu_rx_alloc_peek>
		if (!rx) {
   16daa:	4680      	mov	r8, r0
   16dac:	2800      	cmp	r0, #0
   16dae:	d0ee      	beq.n	16d8e <event_phy_upd_ind_prep+0x146>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16db0:	4893      	ldr	r0, [pc, #588]	; (17000 <event_phy_upd_ind_prep+0x3b8>)
   16db2:	f7f9 ffa7 	bl	10d04 <mem_acquire>
		if (!tx) {
   16db6:	4607      	mov	r7, r0
   16db8:	2800      	cmp	r0, #0
   16dba:	d0e8      	beq.n	16d8e <event_phy_upd_ind_prep+0x146>
		conn->llcp.phy_upd_ind.initiate = 0U;
   16dbc:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16dc0:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   16dc4:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   16dc8:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   16dcc:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   16dd0:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   16dd4:	b2db      	uxtb	r3, r3
   16dd6:	f040 8093 	bne.w	16f00 <event_phy_upd_ind_prep+0x2b8>
			conn->llcp_ack = conn->llcp_req;
   16dda:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   16dde:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   16de2:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   16de4:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   16de8:	f100 80ba 	bmi.w	16f60 <event_phy_upd_ind_prep+0x318>
   16dec:	4633      	mov	r3, r6
   16dee:	4632      	mov	r2, r6
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   16df0:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   16df2:	2305      	movs	r3, #5
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16df4:	723e      	strb	r6, [r7, #8]
		pdu_ctrl_tx->len =
   16df6:	717b      	strb	r3, [r7, #5]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16df8:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->llctrl.opcode =
   16dfa:	2218      	movs	r2, #24
	    conn->tx_head &&
   16dfc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		if (!conn->tx_ctrl) {
   16e00:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		pdu_ctrl_tx->llctrl.opcode =
   16e04:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16e06:	793a      	ldrb	r2, [r7, #4]
   16e08:	f042 0203 	orr.w	r2, r2, #3
   16e0c:	713a      	strb	r2, [r7, #4]
	if (
   16e0e:	2b00      	cmp	r3, #0
   16e10:	f000 809d 	beq.w	16f4e <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_enc.pause_tx &&
   16e14:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   16e18:	0795      	lsls	r5, r2, #30
   16e1a:	f100 8098 	bmi.w	16f4e <event_phy_upd_ind_prep+0x306>
	    !conn->llcp_phy.pause_tx &&
   16e1e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   16e22:	07d0      	lsls	r0, r2, #31
   16e24:	f100 8093 	bmi.w	16f4e <event_phy_upd_ind_prep+0x306>
		if (conn->tx_head == conn->tx_data) {
   16e28:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   16e2c:	4293      	cmp	r3, r2
   16e2e:	f000 80cb 	beq.w	16fc8 <event_phy_upd_ind_prep+0x380>
		} else if (!conn->tx_ctrl) {
   16e32:	2900      	cmp	r1, #0
   16e34:	f000 80d5 	beq.w	16fe2 <event_phy_upd_ind_prep+0x39a>
	tx->next = conn->tx_ctrl_last->next;
   16e38:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   16e3c:	681a      	ldr	r2, [r3, #0]
   16e3e:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   16e40:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   16e42:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   16e44:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   16e48:	2b00      	cmp	r3, #0
   16e4a:	d1a0      	bne.n	16d8e <event_phy_upd_ind_prep+0x146>
		conn->tx_data_last = tx;
   16e4c:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   16e50:	e79d      	b.n	16d8e <event_phy_upd_ind_prep+0x146>
		LL_ASSERT(rx && rx->hdr.link);
   16e52:	4a6c      	ldr	r2, [pc, #432]	; (17004 <event_phy_upd_ind_prep+0x3bc>)
   16e54:	496c      	ldr	r1, [pc, #432]	; (17008 <event_phy_upd_ind_prep+0x3c0>)
   16e56:	486d      	ldr	r0, [pc, #436]	; (1700c <event_phy_upd_ind_prep+0x3c4>)
   16e58:	f241 231a 	movw	r3, #4634	; 0x121a
   16e5c:	f011 f8a4 	bl	27fa8 <printk>
   16e60:	4040      	eors	r0, r0
   16e62:	f380 8811 	msr	BASEPRI, r0
   16e66:	f04f 0003 	mov.w	r0, #3
   16e6a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   16e6c:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16e6e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   16e72:	e727      	b.n	16cc4 <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   16e74:	4a63      	ldr	r2, [pc, #396]	; (17004 <event_phy_upd_ind_prep+0x3bc>)
   16e76:	4964      	ldr	r1, [pc, #400]	; (17008 <event_phy_upd_ind_prep+0x3c0>)
   16e78:	4864      	ldr	r0, [pc, #400]	; (1700c <event_phy_upd_ind_prep+0x3c4>)
   16e7a:	f241 2349 	movw	r3, #4681	; 0x1249
   16e7e:	f011 f893 	bl	27fa8 <printk>
   16e82:	4040      	eors	r0, r0
   16e84:	f380 8811 	msr	BASEPRI, r0
   16e88:	f04f 0003 	mov.w	r0, #3
   16e8c:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   16e8e:	6828      	ldr	r0, [r5, #0]
   16e90:	e743      	b.n	16d1a <event_phy_upd_ind_prep+0xd2>
			rx = ll_pdu_rx_alloc();
   16e92:	f7fd ff01 	bl	14c98 <ll_pdu_rx_alloc>
			if (!rx) {
   16e96:	4605      	mov	r5, r0
   16e98:	2800      	cmp	r0, #0
   16e9a:	f43f af78 	beq.w	16d8e <event_phy_upd_ind_prep+0x146>
			rx->hdr.link->mem = conn->llcp_rx;
   16e9e:	6803      	ldr	r3, [r0, #0]
   16ea0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   16ea4:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   16ea6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   16eaa:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   16eae:	2b00      	cmp	r3, #0
		if (conn->llcp.phy_upd_ind.tx) {
   16eb0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16eb4:	461a      	mov	r2, r3
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   16eb6:	f6bf aedf 	bge.w	16c78 <event_phy_upd_ind_prep+0x30>
   16eba:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   16ebe:	2900      	cmp	r1, #0
   16ec0:	f43f aeda 	beq.w	16c78 <event_phy_upd_ind_prep+0x30>
			conn->periph.llcp_type = LLCP_NONE;
   16ec4:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
   16ec8:	e6da      	b.n	16c80 <event_phy_upd_ind_prep+0x38>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   16eca:	4588      	cmp	r8, r1
   16ecc:	f47f af0f 	bne.w	16cee <event_phy_upd_ind_prep+0xa6>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16ed0:	2301      	movs	r3, #1
   16ed2:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   16ed4:	4629      	mov	r1, r5
   16ed6:	f7fd feb1 	bl	14c3c <ll_rx_put>
				rx = conn->llcp_rx;
   16eda:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   16ede:	2d00      	cmp	r5, #0
   16ee0:	d063      	beq.n	16faa <event_phy_upd_ind_prep+0x362>
   16ee2:	6828      	ldr	r0, [r5, #0]
   16ee4:	2800      	cmp	r0, #0
   16ee6:	d060      	beq.n	16faa <event_phy_upd_ind_prep+0x362>
				conn->llcp_rx = rx->hdr.link->mem;
   16ee8:	6842      	ldr	r2, [r0, #4]
   16eea:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16eee:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   16ef0:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16ef2:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   16ef4:	f7fd fea2 	bl	14c3c <ll_rx_put>
}
   16ef8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   16efc:	f7fd bea8 	b.w	14c50 <ll_rx_sched>
							 lll->latency +
   16f00:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   16f02:	1da9      	adds	r1, r5, #6
   16f04:	4419      	add	r1, r3
			conn->llcp.phy_upd_ind.instant = event_counter +
   16f06:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   16f0a:	f7fd fec5 	bl	14c98 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   16f0e:	f8d8 3000 	ldr.w	r3, [r8]
   16f12:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   16f16:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   16f18:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   16f1c:	f7fd febc 	bl	14c98 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   16f20:	6803      	ldr	r3, [r0, #0]
   16f22:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   16f26:	605a      	str	r2, [r3, #4]
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16f28:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16f2c:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   16f30:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16f34:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   16f38:	095b      	lsrs	r3, r3, #5
   16f3a:	e759      	b.n	16df0 <event_phy_upd_ind_prep+0x1a8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16f3c:	2301      	movs	r3, #1
   16f3e:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   16f40:	4629      	mov	r1, r5
   16f42:	f7fd fe7b 	bl	14c3c <ll_rx_put>
}
   16f46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   16f4a:	f7fd be81 	b.w	14c50 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   16f4e:	2900      	cmp	r1, #0
   16f50:	f47f af72 	bne.w	16e38 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head;
   16f54:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   16f56:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   16f5a:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   16f5e:	e773      	b.n	16e48 <event_phy_upd_ind_prep+0x200>
				(void)ll_pdu_rx_alloc();
   16f60:	f7fd fe9a 	bl	14c98 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   16f64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16f66:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16f6a:	231c      	movs	r3, #28
				upd->status = 0U;
   16f6c:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16f70:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   16f74:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   16f78:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   16f7c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16f80:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   16f84:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   16f88:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16f8c:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   16f90:	4641      	mov	r1, r8
   16f92:	f7fd fe53 	bl	14c3c <ll_rx_put>
				ll_rx_sched();
   16f96:	f7fd fe5b 	bl	14c50 <ll_rx_sched>
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16f9a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   16f9e:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->c_to_p_phy = conn->llcp.phy_upd_ind.tx;
   16fa2:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->p_to_c_phy = conn->llcp.phy_upd_ind.rx;
   16fa6:	095b      	lsrs	r3, r3, #5
   16fa8:	e722      	b.n	16df0 <event_phy_upd_ind_prep+0x1a8>
				LL_ASSERT(rx && rx->hdr.link);
   16faa:	4a16      	ldr	r2, [pc, #88]	; (17004 <event_phy_upd_ind_prep+0x3bc>)
   16fac:	4916      	ldr	r1, [pc, #88]	; (17008 <event_phy_upd_ind_prep+0x3c0>)
   16fae:	4817      	ldr	r0, [pc, #92]	; (1700c <event_phy_upd_ind_prep+0x3c4>)
   16fb0:	f241 232c 	movw	r3, #4652	; 0x122c
   16fb4:	f010 fff8 	bl	27fa8 <printk>
   16fb8:	4040      	eors	r0, r0
   16fba:	f380 8811 	msr	BASEPRI, r0
   16fbe:	f04f 0003 	mov.w	r0, #3
   16fc2:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   16fc4:	6828      	ldr	r0, [r5, #0]
   16fc6:	e78f      	b.n	16ee8 <event_phy_upd_ind_prep+0x2a0>
			conn->tx_data = conn->tx_data->next;
   16fc8:	681a      	ldr	r2, [r3, #0]
   16fca:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   16fce:	2900      	cmp	r1, #0
   16fd0:	f47f af32 	bne.w	16e38 <event_phy_upd_ind_prep+0x1f0>
			tx->next = conn->tx_head->next;
   16fd4:	681a      	ldr	r2, [r3, #0]
   16fd6:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   16fd8:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   16fda:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   16fdc:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   16fe0:	e732      	b.n	16e48 <event_phy_upd_ind_prep+0x200>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16fe2:	791a      	ldrb	r2, [r3, #4]
   16fe4:	f002 0203 	and.w	r2, r2, #3
   16fe8:	2a03      	cmp	r2, #3
   16fea:	d002      	beq.n	16ff2 <event_phy_upd_ind_prep+0x3aa>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   16fec:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   16ff0:	e722      	b.n	16e38 <event_phy_upd_ind_prep+0x1f0>
	    ((pdu_data_tx->llctrl.opcode !=
   16ff2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   16ff4:	2a03      	cmp	r2, #3
   16ff6:	d0ed      	beq.n	16fd4 <event_phy_upd_ind_prep+0x38c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   16ff8:	2a0a      	cmp	r2, #10
   16ffa:	d1f7      	bne.n	16fec <event_phy_upd_ind_prep+0x3a4>
   16ffc:	e7ea      	b.n	16fd4 <event_phy_upd_ind_prep+0x38c>
   16ffe:	bf00      	nop
   17000:	20002e98 	.word	0x20002e98
   17004:	000305cc 	.word	0x000305cc
   17008:	00030698 	.word	0x00030698
   1700c:	0002fedc 	.word	0x0002fedc

00017010 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   17010:	4801      	ldr	r0, [pc, #4]	; (17018 <ll_conn_acquire+0x8>)
   17012:	f7f9 be77 	b.w	10d04 <mem_acquire>
   17016:	bf00      	nop
   17018:	20002e00 	.word	0x20002e00

0001701c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1701c:	4901      	ldr	r1, [pc, #4]	; (17024 <ll_conn_release+0x8>)
   1701e:	f7f9 be87 	b.w	10d30 <mem_release>
   17022:	bf00      	nop
   17024:	20002e00 	.word	0x20002e00

00017028 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   17028:	4902      	ldr	r1, [pc, #8]	; (17034 <ll_conn_handle_get+0xc>)
   1702a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1702e:	f7f9 be9b 	b.w	10d68 <mem_index_get>
   17032:	bf00      	nop
   17034:	20001ca0 	.word	0x20001ca0

00017038 <ll_conn_get>:
{
   17038:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1703a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1703e:	4801      	ldr	r0, [pc, #4]	; (17044 <ll_conn_get+0xc>)
   17040:	f7f9 be8e 	b.w	10d60 <mem_get>
   17044:	20001ca0 	.word	0x20001ca0

00017048 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17048:	b958      	cbnz	r0, 17062 <ll_connected_get+0x1a>
{
   1704a:	b508      	push	{r3, lr}
   1704c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1704e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17052:	4805      	ldr	r0, [pc, #20]	; (17068 <ll_connected_get+0x20>)
   17054:	f7f9 fe84 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17058:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1705a:	b903      	cbnz	r3, 1705e <ll_connected_get+0x16>
}
   1705c:	bd08      	pop	{r3, pc}
		return NULL;
   1705e:	2000      	movs	r0, #0
}
   17060:	bd08      	pop	{r3, pc}
		return NULL;
   17062:	2000      	movs	r0, #0
}
   17064:	4770      	bx	lr
   17066:	bf00      	nop
   17068:	20001ca0 	.word	0x20001ca0

0001706c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1706c:	4801      	ldr	r0, [pc, #4]	; (17074 <ll_tx_mem_acquire+0x8>)
   1706e:	f7f9 be49 	b.w	10d04 <mem_acquire>
   17072:	bf00      	nop
   17074:	20002e28 	.word	0x20002e28

00017078 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   17078:	4901      	ldr	r1, [pc, #4]	; (17080 <ll_tx_mem_release+0x8>)
   1707a:	f7f9 be59 	b.w	10d30 <mem_release>
   1707e:	bf00      	nop
   17080:	20002e28 	.word	0x20002e28

00017084 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17084:	2800      	cmp	r0, #0
   17086:	d13f      	bne.n	17108 <ll_tx_mem_enqueue+0x84>
{
   17088:	b570      	push	{r4, r5, r6, lr}
   1708a:	4602      	mov	r2, r0
   1708c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1708e:	4820      	ldr	r0, [pc, #128]	; (17110 <ll_tx_mem_enqueue+0x8c>)
   17090:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17094:	f7f9 fe64 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17098:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1709a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   1709c:	bb72      	cbnz	r2, 170fc <ll_tx_mem_enqueue+0x78>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1709e:	4c1d      	ldr	r4, [pc, #116]	; (17114 <ll_tx_mem_enqueue+0x90>)
   170a0:	f894 c003 	ldrb.w	ip, [r4, #3]
	if (last == count) {
   170a4:	7861      	ldrb	r1, [r4, #1]
   170a6:	7820      	ldrb	r0, [r4, #0]
	last = last + 1;
   170a8:	f10c 0301 	add.w	r3, ip, #1
   170ac:	b2db      	uxtb	r3, r3
		last = 0U;
   170ae:	4299      	cmp	r1, r3
   170b0:	bf08      	it	eq
   170b2:	2300      	moveq	r3, #0
   170b4:	78a1      	ldrb	r1, [r4, #2]
	if (last == first) {
   170b6:	4299      	cmp	r1, r3
   170b8:	d023      	beq.n	17102 <ll_tx_mem_enqueue+0x7e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   170ba:	fb1c fc00 	smulbb	ip, ip, r0
   170be:	1d20      	adds	r0, r4, #4
	lll_tx->handle = handle;
   170c0:	f820 200c 	strh.w	r2, [r0, ip]
   170c4:	4484      	add	ip, r0
	lll_tx->node = tx;
   170c6:	f8cc 6004 	str.w	r6, [ip, #4]
	*last = idx; /* Commit: Update write index */
   170ca:	70e3      	strb	r3, [r4, #3]
   170cc:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   170ce:	b92b      	cbnz	r3, 170dc <ll_tx_mem_enqueue+0x58>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   170d0:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   170d4:	2b00      	cmp	r3, #0
   170d6:	db0b      	blt.n	170f0 <ll_tx_mem_enqueue+0x6c>
	return 0;
   170d8:	2000      	movs	r0, #0
}
   170da:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   170dc:	4b0e      	ldr	r3, [pc, #56]	; (17118 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   170de:	2101      	movs	r1, #1
   170e0:	2003      	movs	r0, #3
		mfy.param = conn;
   170e2:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   170e4:	f7f9 fee2 	bl	10eac <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   170e8:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   170ec:	2b00      	cmp	r3, #0
   170ee:	daf3      	bge.n	170d8 <ll_tx_mem_enqueue+0x54>
		ull_periph_latency_cancel(conn, handle);
   170f0:	4628      	mov	r0, r5
   170f2:	2100      	movs	r1, #0
   170f4:	f004 f92c 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   170f8:	2000      	movs	r0, #0
}
   170fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   170fc:	f06f 0015 	mvn.w	r0, #21
}
   17100:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   17102:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   17106:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   17108:	f06f 0015 	mvn.w	r0, #21
}
   1710c:	4770      	bx	lr
   1710e:	bf00      	nop
   17110:	20001ca0 	.word	0x20001ca0
   17114:	200005a4 	.word	0x200005a4
   17118:	200005d8 	.word	0x200005d8

0001711c <ll_conn_update>:
{
   1711c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17120:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   17124:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   17128:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1712c:	2800      	cmp	r0, #0
   1712e:	d155      	bne.n	171dc <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17130:	460c      	mov	r4, r1
   17132:	4615      	mov	r5, r2
   17134:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17138:	4602      	mov	r2, r0
   1713a:	4841      	ldr	r0, [pc, #260]	; (17240 <ll_conn_update+0x124>)
   1713c:	461e      	mov	r6, r3
   1713e:	f7f9 fe0f 	bl	10d60 <mem_get>
   17142:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   17144:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   17146:	2800      	cmp	r0, #0
   17148:	d148      	bne.n	171dc <ll_conn_update+0xc0>
	if (!cmd) {
   1714a:	bb3c      	cbnz	r4, 1719c <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1714c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   17150:	0699      	lsls	r1, r3, #26
   17152:	d44a      	bmi.n	171ea <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   17154:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   17158:	07da      	lsls	r2, r3, #31
   1715a:	d442      	bmi.n	171e2 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   1715c:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   17160:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   17164:	4293      	cmp	r3, r2
   17166:	d136      	bne.n	171d6 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   17168:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1716c:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   17170:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   17174:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
			conn->llcp_conn_param.req++;
   17178:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1717a:	f042 0210 	orr.w	r2, r2, #16
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1717e:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   17180:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   17184:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   17188:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   1718c:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   17190:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17194:	db4e      	blt.n	17234 <ll_conn_update+0x118>
	return 0;
   17196:	2000      	movs	r0, #0
}
   17198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1719c:	3c01      	subs	r4, #1
		if (cmd) {
   1719e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   171a2:	d0db      	beq.n	1715c <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   171a4:	f89c 2185 	ldrb.w	r2, [ip, #389]	; 0x185
   171a8:	f89c 3184 	ldrb.w	r3, [ip, #388]	; 0x184
   171ac:	429a      	cmp	r2, r3
   171ae:	d012      	beq.n	171d6 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   171b0:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   171b4:	f003 020f 	and.w	r2, r3, #15
   171b8:	2a03      	cmp	r2, #3
   171ba:	d10c      	bne.n	171d6 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   171bc:	f004 040f 	and.w	r4, r4, #15
   171c0:	f023 031f 	bic.w	r3, r3, #31
   171c4:	f044 0410 	orr.w	r4, r4, #16
   171c8:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   171ca:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   171ce:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   171d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   171d6:	200c      	movs	r0, #12
}
   171d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   171dc:	2002      	movs	r0, #2
}
   171de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   171e2:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   171e6:	079b      	lsls	r3, r3, #30
   171e8:	d4b8      	bmi.n	1715c <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   171ea:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   171ee:	2b00      	cmp	r3, #0
   171f0:	db1e      	blt.n	17230 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   171f2:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   171f6:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   171fa:	4293      	cmp	r3, r2
   171fc:	d1eb      	bne.n	171d6 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   171fe:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   17202:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   17206:	3301      	adds	r3, #1
   17208:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1720c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   17210:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17212:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   17216:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   17218:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1721c:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   17220:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17224:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   17228:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1722c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17230:	201a      	movs	r0, #26
   17232:	e7d1      	b.n	171d8 <ll_conn_update+0xbc>
				ull_periph_latency_cancel(conn, handle);
   17234:	4660      	mov	r0, ip
   17236:	2100      	movs	r1, #0
   17238:	f004 f88a 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   1723c:	2000      	movs	r0, #0
   1723e:	e7cb      	b.n	171d8 <ll_conn_update+0xbc>
   17240:	20001ca0 	.word	0x20001ca0

00017244 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17244:	b9c8      	cbnz	r0, 1727a <ll_chm_get+0x36>
{
   17246:	b538      	push	{r3, r4, r5, lr}
   17248:	4602      	mov	r2, r0
   1724a:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1724c:	480c      	ldr	r0, [pc, #48]	; (17280 <ll_chm_get+0x3c>)
   1724e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17252:	f7f9 fd85 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17256:	8d05      	ldrh	r5, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17258:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1725a:	b965      	cbnz	r5, 17276 <ll_chm_get+0x32>
		memcpy(chm, conn->lll.data_chan_map,
   1725c:	f100 0234 	add.w	r2, r0, #52	; 0x34
		conn->chm_updated = 0U;
   17260:	f883 51d8 	strb.w	r5, [r3, #472]	; 0x1d8
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   17264:	6811      	ldr	r1, [r2, #0]
   17266:	6021      	str	r1, [r4, #0]
   17268:	7911      	ldrb	r1, [r2, #4]
   1726a:	7121      	strb	r1, [r4, #4]
	} while (conn->chm_updated);
   1726c:	f893 01d8 	ldrb.w	r0, [r3, #472]	; 0x1d8
   17270:	2800      	cmp	r0, #0
   17272:	d1f5      	bne.n	17260 <ll_chm_get+0x1c>
}
   17274:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17276:	2002      	movs	r0, #2
}
   17278:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1727a:	2002      	movs	r0, #2
}
   1727c:	4770      	bx	lr
   1727e:	bf00      	nop
   17280:	20001ca0 	.word	0x20001ca0

00017284 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17284:	2800      	cmp	r0, #0
   17286:	d13e      	bne.n	17306 <ll_terminate_ind_send+0x82>
{
   17288:	b510      	push	{r4, lr}
   1728a:	4602      	mov	r2, r0
   1728c:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1728e:	4821      	ldr	r0, [pc, #132]	; (17314 <ll_terminate_ind_send+0x90>)
   17290:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17294:	f7f9 fd64 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17298:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1729a:	bb93      	cbnz	r3, 17302 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1729c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   172a0:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   172a4:	429a      	cmp	r2, r3
   172a6:	d12a      	bne.n	172fe <ll_terminate_ind_send+0x7a>
	switch (reason) {
   172a8:	2c29      	cmp	r4, #41	; 0x29
   172aa:	d819      	bhi.n	172e0 <ll_terminate_ind_send+0x5c>
   172ac:	2c04      	cmp	r4, #4
   172ae:	d919      	bls.n	172e4 <ll_terminate_ind_send+0x60>
   172b0:	1f62      	subs	r2, r4, #5
   172b2:	2a24      	cmp	r2, #36	; 0x24
   172b4:	d816      	bhi.n	172e4 <ll_terminate_ind_send+0x60>
   172b6:	e8df f002 	tbb	[pc, r2]
   172ba:	1517      	.short	0x1517
   172bc:	15151515 	.word	0x15151515
   172c0:	15151515 	.word	0x15151515
   172c4:	15151515 	.word	0x15151515
   172c8:	15171717 	.word	0x15171717
   172cc:	17151515 	.word	0x17151515
   172d0:	15151515 	.word	0x15151515
   172d4:	15151515 	.word	0x15151515
   172d8:	15151515 	.word	0x15151515
   172dc:	1515      	.short	0x1515
   172de:	17          	.byte	0x17
   172df:	00          	.byte	0x00
   172e0:	2c3b      	cmp	r4, #59	; 0x3b
   172e2:	d001      	beq.n	172e8 <ll_terminate_ind_send+0x64>
   172e4:	2012      	movs	r0, #18
}
   172e6:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   172e8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   172ec:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   172f0:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   172f2:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   172f4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   172f8:	db07      	blt.n	1730a <ll_terminate_ind_send+0x86>
	return 0;
   172fa:	2000      	movs	r0, #0
}
   172fc:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   172fe:	200c      	movs	r0, #12
}
   17300:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17302:	2002      	movs	r0, #2
}
   17304:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17306:	2002      	movs	r0, #2
}
   17308:	4770      	bx	lr
		ull_periph_latency_cancel(conn, handle);
   1730a:	2100      	movs	r1, #0
   1730c:	f004 f820 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   17310:	2000      	movs	r0, #0
}
   17312:	bd10      	pop	{r4, pc}
   17314:	20001ca0 	.word	0x20001ca0

00017318 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17318:	bb00      	cbnz	r0, 1735c <ll_feature_req_send+0x44>
{
   1731a:	b510      	push	{r4, lr}
   1731c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1731e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17322:	480f      	ldr	r0, [pc, #60]	; (17360 <ll_feature_req_send+0x48>)
   17324:	f7f9 fd1c 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17328:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1732a:	b984      	cbnz	r4, 1734e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1732c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   17330:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   17334:	428a      	cmp	r2, r1
   17336:	d108      	bne.n	1734a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17338:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1733c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1733e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   17340:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   17344:	db05      	blt.n	17352 <ll_feature_req_send+0x3a>
	return 0;
   17346:	4620      	mov	r0, r4
}
   17348:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1734a:	200c      	movs	r0, #12
}
   1734c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1734e:	2002      	movs	r0, #2
}
   17350:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   17352:	4621      	mov	r1, r4
   17354:	f003 fffc 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   17358:	4620      	mov	r0, r4
}
   1735a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1735c:	2002      	movs	r0, #2
}
   1735e:	4770      	bx	lr
   17360:	20001ca0 	.word	0x20001ca0

00017364 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17364:	bb00      	cbnz	r0, 173a8 <ll_version_ind_send+0x44>
{
   17366:	b510      	push	{r4, lr}
   17368:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1736a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1736e:	480f      	ldr	r0, [pc, #60]	; (173ac <ll_version_ind_send+0x48>)
   17370:	f7f9 fcf6 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17374:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   17376:	b984      	cbnz	r4, 1739a <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   17378:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1737c:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   17380:	428a      	cmp	r2, r1
   17382:	d108      	bne.n	17396 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17384:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   17388:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1738a:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   1738c:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17390:	db05      	blt.n	1739e <ll_version_ind_send+0x3a>
	return 0;
   17392:	4620      	mov	r0, r4
}
   17394:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17396:	200c      	movs	r0, #12
}
   17398:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1739a:	2002      	movs	r0, #2
}
   1739c:	bd10      	pop	{r4, pc}
		ull_periph_latency_cancel(conn, handle);
   1739e:	4621      	mov	r1, r4
   173a0:	f003 ffd6 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   173a4:	4620      	mov	r0, r4
}
   173a6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   173a8:	2002      	movs	r0, #2
}
   173aa:	4770      	bx	lr
   173ac:	20001ca0 	.word	0x20001ca0

000173b0 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   173b0:	2800      	cmp	r0, #0
   173b2:	d14c      	bne.n	1744e <ll_length_req_send+0x9e>
{
   173b4:	b538      	push	{r3, r4, r5, lr}
   173b6:	460d      	mov	r5, r1
   173b8:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   173ba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   173be:	4602      	mov	r2, r0
   173c0:	4824      	ldr	r0, [pc, #144]	; (17454 <ll_length_req_send+0xa4>)
   173c2:	f7f9 fccd 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   173c6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   173c8:	bbc3      	cbnz	r3, 1743c <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   173ca:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   173ce:	071a      	lsls	r2, r3, #28
   173d0:	d432      	bmi.n	17438 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   173d2:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   173d6:	07d1      	lsls	r1, r2, #31
   173d8:	d503      	bpl.n	173e2 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   173da:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   173de:	0692      	lsls	r2, r2, #26
   173e0:	d52a      	bpl.n	17438 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   173e2:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   173e6:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   173ea:	428a      	cmp	r2, r1
   173ec:	d011      	beq.n	17412 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   173ee:	f003 0307 	and.w	r3, r3, #7
   173f2:	2b03      	cmp	r3, #3
   173f4:	d004      	beq.n	17400 <ll_length_req_send+0x50>
   173f6:	3303      	adds	r3, #3
   173f8:	f003 0307 	and.w	r3, r3, #7
   173fc:	2b01      	cmp	r3, #1
   173fe:	d824      	bhi.n	1744a <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   17400:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   17404:	bb0b      	cbnz	r3, 1744a <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   17406:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   1740a:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   1740e:	4618      	mov	r0, r3
}
   17410:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17412:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   17416:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1741a:	f36f 0302 	bfc	r3, #0, #3
   1741e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17422:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   17426:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1742a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1742c:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1742e:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17432:	db05      	blt.n	17440 <ll_length_req_send+0x90>
	return 0;
   17434:	2000      	movs	r0, #0
}
   17436:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17438:	201a      	movs	r0, #26
}
   1743a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1743c:	2002      	movs	r0, #2
}
   1743e:	bd38      	pop	{r3, r4, r5, pc}
		ull_periph_latency_cancel(conn, handle);
   17440:	2100      	movs	r1, #0
   17442:	f003 ff85 	bl	1b350 <ull_periph_latency_cancel>
	return 0;
   17446:	2000      	movs	r0, #0
}
   17448:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1744a:	200c      	movs	r0, #12
}
   1744c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1744e:	2002      	movs	r0, #2
}
   17450:	4770      	bx	lr
   17452:	bf00      	nop
   17454:	20001ca0 	.word	0x20001ca0

00017458 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   17458:	4a03      	ldr	r2, [pc, #12]	; (17468 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1745a:	4b04      	ldr	r3, [pc, #16]	; (1746c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1745c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1745e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   17460:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   17462:	800b      	strh	r3, [r1, #0]
}
   17464:	4770      	bx	lr
   17466:	bf00      	nop
   17468:	20003978 	.word	0x20003978
   1746c:	2000397a 	.word	0x2000397a

00017470 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   17470:	4a02      	ldr	r2, [pc, #8]	; (1747c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   17472:	4b03      	ldr	r3, [pc, #12]	; (17480 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   17474:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   17476:	8019      	strh	r1, [r3, #0]
}
   17478:	2000      	movs	r0, #0
   1747a:	4770      	bx	lr
   1747c:	20003978 	.word	0x20003978
   17480:	2000397a 	.word	0x2000397a

00017484 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   17484:	f04f 0c1b 	mov.w	ip, #27
   17488:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   1748c:	f44f 70a4 	mov.w	r0, #328	; 0x148
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   17490:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   17494:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PDU_DC_MAX_US(LL_LENGTH_OCTETS_RX_MAX, PHY);
   17496:	8018      	strh	r0, [r3, #0]
}
   17498:	4770      	bx	lr
   1749a:	bf00      	nop

0001749c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1749c:	b9c0      	cbnz	r0, 174d0 <ll_phy_get+0x34>
{
   1749e:	b538      	push	{r3, r4, r5, lr}
   174a0:	460d      	mov	r5, r1
   174a2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   174a4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   174a8:	4602      	mov	r2, r0
   174aa:	480a      	ldr	r0, [pc, #40]	; (174d4 <ll_phy_get+0x38>)
   174ac:	f7f9 fc58 	bl	10d60 <mem_get>
   174b0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   174b2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   174b4:	b950      	cbnz	r0, 174cc <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   174b6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   174ba:	f3c2 0202 	ubfx	r2, r2, #0, #3
   174be:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   174c0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   174c4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   174c8:	7023      	strb	r3, [r4, #0]
}
   174ca:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   174cc:	2002      	movs	r0, #2
}
   174ce:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   174d0:	2002      	movs	r0, #2
}
   174d2:	4770      	bx	lr
   174d4:	20001ca0 	.word	0x20001ca0

000174d8 <ll_phy_default_set>:
	default_phy_tx = tx;
   174d8:	4a02      	ldr	r2, [pc, #8]	; (174e4 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   174da:	4b03      	ldr	r3, [pc, #12]	; (174e8 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   174dc:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   174de:	7019      	strb	r1, [r3, #0]
}
   174e0:	2000      	movs	r0, #0
   174e2:	4770      	bx	lr
   174e4:	20003af7 	.word	0x20003af7
   174e8:	20003af6 	.word	0x20003af6

000174ec <ll_phy_req_send>:
{
   174ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   174ee:	2800      	cmp	r0, #0
   174f0:	d143      	bne.n	1757a <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   174f2:	460c      	mov	r4, r1
   174f4:	4616      	mov	r6, r2
   174f6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   174fa:	4602      	mov	r2, r0
   174fc:	4823      	ldr	r0, [pc, #140]	; (1758c <ll_phy_req_send+0xa0>)
   174fe:	461f      	mov	r7, r3
   17500:	f7f9 fc2e 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   17504:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   17506:	bbc3      	cbnz	r3, 1757a <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   17508:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   1750c:	f015 0508 	ands.w	r5, r5, #8
   17510:	d130      	bne.n	17574 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   17512:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   17516:	07db      	lsls	r3, r3, #31
   17518:	d504      	bpl.n	17524 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1751a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1751e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   17522:	d027      	beq.n	17574 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   17524:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   17528:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1752c:	4299      	cmp	r1, r3
   1752e:	d11e      	bne.n	1756e <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   17530:	f004 0407 	and.w	r4, r4, #7
   17534:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   17538:	00a4      	lsls	r4, r4, #2
   1753a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1753e:	f007 0307 	and.w	r3, r7, #7
   17542:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   17546:	f006 0601 	and.w	r6, r6, #1
   1754a:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1754e:	f022 0207 	bic.w	r2, r2, #7
   17552:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   17556:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17558:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1755c:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   17560:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17562:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   17564:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   17568:	db0a      	blt.n	17580 <ll_phy_req_send+0x94>
}
   1756a:	4628      	mov	r0, r5
   1756c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1756e:	250c      	movs	r5, #12
}
   17570:	4628      	mov	r0, r5
   17572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17574:	251a      	movs	r5, #26
}
   17576:	4628      	mov	r0, r5
   17578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1757a:	2502      	movs	r5, #2
}
   1757c:	4628      	mov	r0, r5
   1757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_periph_latency_cancel(conn, handle);
   17580:	2100      	movs	r1, #0
   17582:	f003 fee5 	bl	1b350 <ull_periph_latency_cancel>
}
   17586:	4628      	mov	r0, r5
   17588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1758a:	bf00      	nop
   1758c:	20001ca0 	.word	0x20001ca0

00017590 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   17590:	b9d8      	cbnz	r0, 175ca <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17592:	4602      	mov	r2, r0
{
   17594:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17596:	480e      	ldr	r0, [pc, #56]	; (175d0 <ll_apto_get+0x40>)
   17598:	460c      	mov	r4, r1
   1759a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1759e:	f7f9 fbdf 	bl	10d60 <mem_get>
   175a2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   175a4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   175a6:	b970      	cbnz	r0, 175c6 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   175a8:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   175ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   175ae:	fb02 f303 	mul.w	r3, r2, r3
   175b2:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   175b6:	4a07      	ldr	r2, [pc, #28]	; (175d4 <ll_apto_get+0x44>)
   175b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   175bc:	fba2 2303 	umull	r2, r3, r2, r3
   175c0:	099b      	lsrs	r3, r3, #6
   175c2:	8023      	strh	r3, [r4, #0]
}
   175c4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   175c6:	2002      	movs	r0, #2
}
   175c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   175ca:	2002      	movs	r0, #2
}
   175cc:	4770      	bx	lr
   175ce:	bf00      	nop
   175d0:	20001ca0 	.word	0x20001ca0
   175d4:	10624dd3 	.word	0x10624dd3

000175d8 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   175d8:	b9e0      	cbnz	r0, 17614 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   175da:	4602      	mov	r2, r0
{
   175dc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   175de:	480e      	ldr	r0, [pc, #56]	; (17618 <ll_apto_set+0x40>)
   175e0:	460c      	mov	r4, r1
   175e2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   175e6:	f7f9 fbbb 	bl	10d60 <mem_get>
   175ea:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   175ec:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   175ee:	b978      	cbnz	r0, 17610 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   175f0:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   175f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   175f8:	fb03 fc0c 	mul.w	ip, r3, ip
   175fc:	f242 7310 	movw	r3, #10000	; 0x2710
   17600:	fb03 c304 	mla	r3, r3, r4, ip
   17604:	3b01      	subs	r3, #1
   17606:	fbb3 f3fc 	udiv	r3, r3, ip
   1760a:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   1760e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17610:	2002      	movs	r0, #2
}
   17612:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17614:	2002      	movs	r0, #2
}
   17616:	4770      	bx	lr
   17618:	20001ca0 	.word	0x20001ca0

0001761c <ull_conn_init>:
	err = init_reset();
   1761c:	f7fe be7e 	b.w	1631c <init_reset>

00017620 <ull_conn_reset>:
{
   17620:	b510      	push	{r4, lr}
	(void)ull_central_reset();
   17622:	f004 f869 	bl	1b6f8 <ull_central_reset>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17626:	2200      	movs	r2, #0
   17628:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1762c:	4815      	ldr	r0, [pc, #84]	; (17684 <ull_conn_reset+0x64>)
   1762e:	f7f9 fb97 	bl	10d60 <mem_get>
   17632:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   17634:	f100 021c 	add.w	r2, r0, #28
   17638:	4601      	mov	r1, r0
   1763a:	2005      	movs	r0, #5
   1763c:	f7fd fc14 	bl	14e68 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   17640:	b108      	cbz	r0, 17646 <ull_conn_reset+0x26>
   17642:	3078      	adds	r0, #120	; 0x78
   17644:	d10f      	bne.n	17666 <ull_conn_reset+0x46>
	MFIFO_INIT(conn_tx);
   17646:	4810      	ldr	r0, [pc, #64]	; (17688 <ull_conn_reset+0x68>)
	MFIFO_INIT(conn_ack);
   17648:	4910      	ldr	r1, [pc, #64]	; (1768c <ull_conn_reset+0x6c>)
	conn_upd_curr = NULL;
   1764a:	4a11      	ldr	r2, [pc, #68]	; (17690 <ull_conn_reset+0x70>)
	conn->lll.link_tx_free = NULL;
   1764c:	2300      	movs	r3, #0
	conn->lll.handle = LLL_HANDLE_INVALID;
   1764e:	f64f 7cff 	movw	ip, #65535	; 0xffff
	MFIFO_INIT(conn_tx);
   17652:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   17654:	804b      	strh	r3, [r1, #2]
	conn->lll.handle = LLL_HANDLE_INVALID;
   17656:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	conn->lll.link_tx_free = NULL;
   1765a:	6763      	str	r3, [r4, #116]	; 0x74
}
   1765c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   17660:	6013      	str	r3, [r2, #0]
	err = init_reset();
   17662:	f7fe be5b 	b.w	1631c <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   17666:	4a0b      	ldr	r2, [pc, #44]	; (17694 <ull_conn_reset+0x74>)
   17668:	490b      	ldr	r1, [pc, #44]	; (17698 <ull_conn_reset+0x78>)
   1766a:	480c      	ldr	r0, [pc, #48]	; (1769c <ull_conn_reset+0x7c>)
   1766c:	f640 03e3 	movw	r3, #2275	; 0x8e3
   17670:	f010 fc9a 	bl	27fa8 <printk>
   17674:	4040      	eors	r0, r0
   17676:	f380 8811 	msr	BASEPRI, r0
   1767a:	f04f 0003 	mov.w	r0, #3
   1767e:	df02      	svc	2
   17680:	e7e1      	b.n	17646 <ull_conn_reset+0x26>
   17682:	bf00      	nop
   17684:	20001ca0 	.word	0x20001ca0
   17688:	200005a4 	.word	0x200005a4
   1768c:	20000560 	.word	0x20000560
   17690:	20002e04 	.word	0x20002e04
   17694:	000305cc 	.word	0x000305cc
   17698:	000305a0 	.word	0x000305a0
   1769c:	0002fedc 	.word	0x0002fedc

000176a0 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   176a0:	4b01      	ldr	r3, [pc, #4]	; (176a8 <ull_conn_default_tx_octets_get+0x8>)
}
   176a2:	8818      	ldrh	r0, [r3, #0]
   176a4:	4770      	bx	lr
   176a6:	bf00      	nop
   176a8:	20003978 	.word	0x20003978

000176ac <ull_conn_default_tx_time_get>:
	return default_tx_time;
   176ac:	4b01      	ldr	r3, [pc, #4]	; (176b4 <ull_conn_default_tx_time_get+0x8>)
}
   176ae:	8818      	ldrh	r0, [r3, #0]
   176b0:	4770      	bx	lr
   176b2:	bf00      	nop
   176b4:	2000397a 	.word	0x2000397a

000176b8 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   176b8:	4b01      	ldr	r3, [pc, #4]	; (176c0 <ull_conn_default_phy_tx_get+0x8>)
}
   176ba:	7818      	ldrb	r0, [r3, #0]
   176bc:	4770      	bx	lr
   176be:	bf00      	nop
   176c0:	20003af7 	.word	0x20003af7

000176c4 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   176c4:	4b01      	ldr	r3, [pc, #4]	; (176cc <ull_conn_default_phy_rx_get+0x8>)
}
   176c6:	7818      	ldrb	r0, [r3, #0]
   176c8:	4770      	bx	lr
   176ca:	bf00      	nop
   176cc:	20003af6 	.word	0x20003af6

000176d0 <ull_conn_setup>:
{
   176d0:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   176d2:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   176d4:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   176d6:	681d      	ldr	r5, [r3, #0]
   176d8:	782b      	ldrb	r3, [r5, #0]
{
   176da:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   176dc:	b193      	cbz	r3, 17704 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   176de:	696b      	ldr	r3, [r5, #20]
   176e0:	b163      	cbz	r3, 176fc <ull_conn_setup+0x2c>
   176e2:	4a0b      	ldr	r2, [pc, #44]	; (17710 <ull_conn_setup+0x40>)
   176e4:	490b      	ldr	r1, [pc, #44]	; (17714 <ull_conn_setup+0x44>)
   176e6:	480c      	ldr	r0, [pc, #48]	; (17718 <ull_conn_setup+0x48>)
   176e8:	f240 33ed 	movw	r3, #1005	; 0x3ed
   176ec:	f010 fc5c 	bl	27fa8 <printk>
   176f0:	4040      	eors	r0, r0
   176f2:	f380 8811 	msr	BASEPRI, r0
   176f6:	f04f 0003 	mov.w	r0, #3
   176fa:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   176fc:	4b07      	ldr	r3, [pc, #28]	; (1771c <ull_conn_setup+0x4c>)
   176fe:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   17702:	bd38      	pop	{r3, r4, r5, pc}
   17704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   17708:	4608      	mov	r0, r1
   1770a:	f7ff b801 	b.w	16710 <conn_setup_adv_scan_disabled_cb>
   1770e:	bf00      	nop
   17710:	000305cc 	.word	0x000305cc
   17714:	00030490 	.word	0x00030490
   17718:	0002fedc 	.word	0x0002fedc
   1771c:	00016711 	.word	0x00016711

00017720 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   17720:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   17722:	88da      	ldrh	r2, [r3, #6]
   17724:	2a00      	cmp	r2, #0
   17726:	f040 80ce 	bne.w	178c6 <ull_conn_rx+0x1a6>
{
   1772a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1772e:	460e      	mov	r6, r1
   17730:	b085      	sub	sp, #20
   17732:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   17734:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   17738:	48a9      	ldr	r0, [pc, #676]	; (179e0 <ull_conn_rx+0x2c0>)
   1773a:	f7f9 fb11 	bl	10d60 <mem_get>
   1773e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   17740:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   17742:	2800      	cmp	r0, #0
   17744:	f040 80b8 	bne.w	178b8 <ull_conn_rx+0x198>
	pdu_rx = (void *)(*rx)->pdu;
   17748:	6835      	ldr	r5, [r6, #0]

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1774a:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
	switch (pdu_rx->ll_id) {
   1774e:	7f2a      	ldrb	r2, [r5, #28]
   17750:	f002 0203 	and.w	r2, r2, #3
   17754:	2a03      	cmp	r2, #3
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   17756:	f00c 0101 	and.w	r1, ip, #1
	switch (pdu_rx->ll_id) {
   1775a:	d129      	bne.n	177b0 <ull_conn_rx+0x90>
	opcode = pdu_rx->llctrl.opcode;
   1775c:	f895 801f 	ldrb.w	r8, [r5, #31]
	pdu_rx = (void *)(*rx)->pdu;
   17760:	f105 021c 	add.w	r2, r5, #28
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   17764:	b3c9      	cbz	r1, 177da <ull_conn_rx+0xba>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   17766:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1776a:	2b00      	cmp	r3, #0
		((!conn->llcp_enc.refresh &&
   1776c:	f00c 0104 	and.w	r1, ip, #4
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   17770:	f2c0 80ad 	blt.w	178ce <ull_conn_rx+0x1ae>
	return (!conn->lll.role &&
   17774:	2900      	cmp	r1, #0
   17776:	f040 80fb 	bne.w	17970 <ull_conn_rx+0x250>
		((!conn->llcp_enc.refresh &&
   1777a:	f1b8 0f02 	cmp.w	r8, #2
   1777e:	f000 8122 	beq.w	179c6 <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   17782:	f1b8 0f05 	cmp.w	r8, #5
   17786:	f000 8563 	beq.w	18250 <ull_conn_rx+0xb30>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1778a:	f1b8 0f06 	cmp.w	r8, #6
   1778e:	f000 83d1 	beq.w	17f34 <ull_conn_rx+0x814>
   17792:	f1b8 0f0d 	cmp.w	r8, #13
   17796:	f000 844e 	beq.w	18036 <ull_conn_rx+0x916>
   1779a:	f1b8 0f11 	cmp.w	r8, #17
   1779e:	f000 848e 	beq.w	180be <ull_conn_rx+0x99e>
		conn->llcp_terminate.reason_final =
   177a2:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177a4:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   177a6:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   177aa:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177ac:	712b      	strb	r3, [r5, #4]
		return 0;
   177ae:	e007      	b.n	177c0 <ull_conn_rx+0xa0>
	switch (pdu_rx->ll_id) {
   177b0:	b94a      	cbnz	r2, 177c6 <ull_conn_rx+0xa6>
		if (conn->llcp_enc.pause_rx) {
   177b2:	b111      	cbz	r1, 177ba <ull_conn_rx+0x9a>
			conn->llcp_terminate.reason_final =
   177b4:	233d      	movs	r3, #61	; 0x3d
   177b6:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177ba:	2301      	movs	r3, #1
   177bc:	712b      	strb	r3, [r5, #4]
	return 0;
   177be:	2000      	movs	r0, #0
}
   177c0:	b005      	add	sp, #20
   177c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   177c6:	2900      	cmp	r1, #0
   177c8:	d0f9      	beq.n	177be <ull_conn_rx+0x9e>
			conn->llcp_terminate.reason_final =
   177ca:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177cc:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   177ce:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177d2:	712a      	strb	r2, [r5, #4]
}
   177d4:	b005      	add	sp, #20
   177d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   177da:	f1b8 0f19 	cmp.w	r8, #25
   177de:	d81f      	bhi.n	17820 <ull_conn_rx+0x100>
   177e0:	e8df f018 	tbh	[pc, r8, lsl #1]
   177e4:	01450178 	.word	0x01450178
   177e8:	001a00f1 	.word	0x001a00f1
   177ec:	0531052a 	.word	0x0531052a
   177f0:	02a303a8 	.word	0x02a303a8
   177f4:	04ec029e 	.word	0x04ec029e
   177f8:	055004a2 	.word	0x055004a2
   177fc:	042903d4 	.word	0x042903d4
   17800:	0279028e 	.word	0x0279028e
   17804:	046d01e7 	.word	0x046d01e7
   17808:	013b0404 	.word	0x013b0404
   1780c:	01020102 	.word	0x01020102
   17810:	0340037d 	.word	0x0340037d
   17814:	02ce0304 	.word	0x02ce0304
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   17818:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1781c:	2b00      	cmp	r3, #0
   1781e:	db63      	blt.n	178e8 <ull_conn_rx+0x1c8>
	if (conn->common.txn_lock) {
   17820:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   17824:	0798      	lsls	r0, r3, #30
   17826:	d4c8      	bmi.n	177ba <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17828:	486e      	ldr	r0, [pc, #440]	; (179e4 <ull_conn_rx+0x2c4>)
   1782a:	f7f9 fa6b 	bl	10d04 <mem_acquire>
	if (!tx) {
   1782e:	2800      	cmp	r0, #0
   17830:	f000 85d1 	beq.w	183d6 <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   17834:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   17838:	f043 0302 	orr.w	r3, r3, #2
   1783c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17840:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   17842:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17846:	f043 0303 	orr.w	r3, r3, #3
   1784a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1784c:	2302      	movs	r3, #2
   1784e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   17850:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   17854:	2307      	movs	r3, #7
   17856:	71c3      	strb	r3, [r0, #7]
	if (
   17858:	b1f2      	cbz	r2, 17898 <ull_conn_rx+0x178>
	    !conn->llcp_enc.pause_tx &&
   1785a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1785e:	0799      	lsls	r1, r3, #30
   17860:	d41a      	bmi.n	17898 <ull_conn_rx+0x178>
	    !conn->llcp_phy.pause_tx &&
   17862:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   17866:	07db      	lsls	r3, r3, #31
   17868:	d416      	bmi.n	17898 <ull_conn_rx+0x178>
		if (conn->tx_head == conn->tx_data) {
   1786a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   1786e:	429a      	cmp	r2, r3
   17870:	f000 85ce 	beq.w	18410 <ull_conn_rx+0xcf0>
		} else if (!conn->tx_ctrl) {
   17874:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   17878:	2b00      	cmp	r3, #0
   1787a:	f000 8615 	beq.w	184a8 <ull_conn_rx+0xd88>
	tx->next = conn->tx_ctrl_last->next;
   1787e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   17882:	6813      	ldr	r3, [r2, #0]
   17884:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17886:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   17888:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1788a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1788e:	2a00      	cmp	r2, #0
   17890:	d193      	bne.n	177ba <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   17892:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17896:	e790      	b.n	177ba <ull_conn_rx+0x9a>
		if (!conn->tx_ctrl) {
   17898:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1789c:	2b00      	cmp	r3, #0
   1789e:	f000 8590 	beq.w	183c2 <ull_conn_rx+0xca2>
	tx->next = conn->tx_ctrl_last->next;
   178a2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   178a6:	681a      	ldr	r2, [r3, #0]
   178a8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   178aa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   178ac:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   178ae:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   178b2:	2a00      	cmp	r2, #0
   178b4:	d181      	bne.n	177ba <ull_conn_rx+0x9a>
   178b6:	e7ec      	b.n	17892 <ull_conn_rx+0x172>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   178b8:	6833      	ldr	r3, [r6, #0]
   178ba:	2201      	movs	r2, #1
		return 0;
   178bc:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   178be:	711a      	strb	r2, [r3, #4]
}
   178c0:	b005      	add	sp, #20
   178c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   178c6:	2201      	movs	r2, #1
   178c8:	711a      	strb	r2, [r3, #4]
		return 0;
   178ca:	2000      	movs	r0, #0
}
   178cc:	4770      	bx	lr
	       (conn->lll.role &&
   178ce:	2900      	cmp	r1, #0
   178d0:	d071      	beq.n	179b6 <ull_conn_rx+0x296>
		 (conn->llcp_enc.refresh &&
   178d2:	f1b8 0f02 	cmp.w	r8, #2
   178d6:	d076      	beq.n	179c6 <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   178d8:	f1b8 0f0b 	cmp.w	r8, #11
   178dc:	f000 85df 	beq.w	1849e <ull_conn_rx+0xd7e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   178e0:	f1b8 0f03 	cmp.w	r8, #3
   178e4:	f47f af51 	bne.w	1778a <ull_conn_rx+0x6a>
		if (!conn->lll.role ||
   178e8:	7f6b      	ldrb	r3, [r5, #29]
   178ea:	2b17      	cmp	r3, #23
   178ec:	d198      	bne.n	17820 <ull_conn_rx+0x100>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   178ee:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   178f2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   178f6:	1a9b      	subs	r3, r3, r2
   178f8:	f003 0303 	and.w	r3, r3, #3
   178fc:	2b02      	cmp	r3, #2
   178fe:	f001 8189 	beq.w	18c14 <ull_conn_rx+0x14f4>
   17902:	6a2b      	ldr	r3, [r5, #32]
   17904:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   17906:	f8c4 216d 	str.w	r2, [r4, #365]	; 0x16d
   1790a:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   1790e:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   17912:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   17916:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   1791a:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Enc rsp to be scheduled in central prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1791e:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17922:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   17924:	2301      	movs	r3, #1
   17926:	f363 0201 	bfi	r2, r3, #0, #2
   1792a:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1792e:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   17930:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   17934:	2203      	movs	r2, #3
		conn->llcp_ack -= 2U;
   17936:	3b02      	subs	r3, #2
   17938:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   1793c:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
   17940:	f8d5 102a 	ldr.w	r1, [r5, #42]	; 0x2a
   17944:	f8d5 202e 	ldr.w	r2, [r5, #46]	; 0x2e
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   17948:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1794c:	f8c4 20fa 	str.w	r2, [r4, #250]	; 0xfa
   17950:	f8c4 10f6 	str.w	r1, [r4, #246]	; 0xf6
   17954:	f8d5 1032 	ldr.w	r1, [r5, #50]	; 0x32

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   17958:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1795c:	f8c4 1094 	str.w	r1, [r4, #148]	; 0x94
		conn->llcp_enc.pause_rx = 1U;
   17960:	f043 0301 	orr.w	r3, r3, #1
   17964:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   17968:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	int nack = 0;
   1796c:	2000      	movs	r0, #0

		break;
   1796e:	e727      	b.n	177c0 <ull_conn_rx+0xa0>
		 (conn->llcp_enc.refresh &&
   17970:	f1b8 0f02 	cmp.w	r8, #2
   17974:	d027      	beq.n	179c6 <ull_conn_rx+0x2a6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   17976:	f1b8 0f0b 	cmp.w	r8, #11
   1797a:	f000 8530 	beq.w	183de <ull_conn_rx+0xcbe>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1797e:	f1b8 0f04 	cmp.w	r8, #4
   17982:	f47f aefe 	bne.w	17782 <ull_conn_rx+0x62>
#endif /* CONFIG_BT_PERIPHERAL */

#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_RSP:
		if (conn->lll.role ||
   17986:	7f6b      	ldrb	r3, [r5, #29]
   17988:	2b0d      	cmp	r3, #13
   1798a:	f47f af49 	bne.w	17820 <ull_conn_rx+0x100>
   1798e:	6a2b      	ldr	r3, [r5, #32]
   17990:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   17992:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   17996:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
   1799a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
		       &pdu_rx->llctrl.enc_rsp.skds[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[4],
		       &pdu_rx->llctrl.enc_rsp.ivs[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   1799c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   179a0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   179a4:	6832      	ldr	r2, [r6, #0]
		conn->llcp_enc.pause_rx = 1U;
   179a6:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   179aa:	2101      	movs	r1, #1
		conn->llcp_enc.pause_rx = 1U;
   179ac:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   179b0:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   179b2:	7111      	strb	r1, [r2, #4]

		break;
   179b4:	e704      	b.n	177c0 <ull_conn_rx+0xa0>
		((!conn->llcp_enc.refresh &&
   179b6:	f1b8 0f07 	cmp.w	r8, #7
   179ba:	f000 81b6 	beq.w	17d2a <ull_conn_rx+0x60a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   179be:	f1b8 0f02 	cmp.w	r8, #2
   179c2:	f47f aee2 	bne.w	1778a <ull_conn_rx+0x6a>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   179c6:	7f6b      	ldrb	r3, [r5, #29]
   179c8:	2b02      	cmp	r3, #2
   179ca:	f47f af29 	bne.w	17820 <ull_conn_rx+0x100>
	conn->llcp_terminate.reason_final =
   179ce:	f895 2020 	ldrb.w	r2, [r5, #32]
   179d2:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   179d6:	2301      	movs	r3, #1
	int nack = 0;
   179d8:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   179da:	712b      	strb	r3, [r5, #4]
}
   179dc:	e6f0      	b.n	177c0 <ull_conn_rx+0xa0>
   179de:	bf00      	nop
   179e0:	20001ca0 	.word	0x20001ca0
   179e4:	20002e98 	.word	0x20002e98
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   179e8:	7f6b      	ldrb	r3, [r5, #29]
   179ea:	2b09      	cmp	r3, #9
   179ec:	f47f af18 	bne.w	17820 <ull_conn_rx+0x100>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   179f0:	f1b8 0f14 	cmp.w	r8, #20
   179f4:	f000 8562 	beq.w	184bc <ull_conn_rx+0xd9c>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   179f8:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   179fc:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   17a00:	4293      	cmp	r3, r2
   17a02:	f001 812b 	beq.w	18c5c <ull_conn_rx+0x153c>
	eff_rx_octets = conn->lll.max_rx_octets;
   17a06:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   17a0a:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   17a0e:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   17a12:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   17a16:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   17a1a:	2300      	movs	r3, #0
	       tx) ||
   17a1c:	f001 0107 	and.w	r1, r1, #7
   17a20:	2902      	cmp	r1, #2
   17a22:	f000 856b 	beq.w	184fc <ull_conn_rx+0xddc>
   17a26:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   17a2a:	f1b8 0f15 	cmp.w	r8, #21
   17a2e:	f43f aec6 	beq.w	177be <ull_conn_rx+0x9e>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   17a32:	4618      	mov	r0, r3
   17a34:	49d0      	ldr	r1, [pc, #832]	; (17d78 <ull_conn_rx+0x658>)
   17a36:	f7f9 f97b 	bl	10d30 <mem_release>
			if (conn->llcp_length.state ==
   17a3a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   17a3e:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   17a42:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   17a46:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   17a4a:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   17a4c:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   17a50:	f47f aeb5 	bne.w	177be <ull_conn_rx+0x9e>
				return -EBUSY;
   17a54:	f06f 000f 	mvn.w	r0, #15
   17a58:	e6b2      	b.n	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   17a5a:	7f6a      	ldrb	r2, [r5, #29]
   17a5c:	2a01      	cmp	r2, #1
   17a5e:	f47f aedf 	bne.w	17820 <ull_conn_rx+0x100>
		conn->procedure_expire = 0U;
   17a62:	2300      	movs	r3, #0
   17a64:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   17a68:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17a6a:	712a      	strb	r2, [r5, #4]
		break;
   17a6c:	e6a8      	b.n	177c0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   17a6e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17a72:	2b00      	cmp	r3, #0
   17a74:	f6bf aed4 	bge.w	17820 <ull_conn_rx+0x100>
   17a78:	7f6b      	ldrb	r3, [r5, #29]
   17a7a:	2b08      	cmp	r3, #8
   17a7c:	f47f aed0 	bne.w	17820 <ull_conn_rx+0x100>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   17a80:	f8b5 1025 	ldrh.w	r1, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17a84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17a86:	1acb      	subs	r3, r1, r3
   17a88:	041f      	lsls	r7, r3, #16
   17a8a:	f101 8091 	bmi.w	18bb0 <ull_conn_rx+0x1490>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17a8e:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   17a92:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17a96:	1a9b      	subs	r3, r3, r2
   17a98:	f003 0303 	and.w	r3, r3, #3
   17a9c:	2b02      	cmp	r3, #2
   17a9e:	f001 80a1 	beq.w	18be4 <ull_conn_rx+0x14c4>
   17aa2:	6a2b      	ldr	r3, [r5, #32]
   17aa4:	f8c4 30e9 	str.w	r3, [r4, #233]	; 0xe9
   17aa8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   17aac:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
	conn->llcp.chan_map.initiate = 0U;
   17ab0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp.chan_map.instant = instant;
   17ab4:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   17ab8:	f36f 0300 	bfc	r3, #0, #1
   17abc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   17ac0:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_CHAN_MAP;
   17ac2:	2102      	movs	r1, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17ac4:	2301      	movs	r3, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   17ac6:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   17aca:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	int nack = 0;
   17ace:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17ad0:	712b      	strb	r3, [r5, #4]
		if (err) {
   17ad2:	e675      	b.n	177c0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   17ad4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17ad8:	2b00      	cmp	r3, #0
   17ada:	f6bf aea1 	bge.w	17820 <ull_conn_rx+0x100>
   17ade:	7f6b      	ldrb	r3, [r5, #29]
   17ae0:	2b0c      	cmp	r3, #12
   17ae2:	f47f ae9d 	bne.w	17820 <ull_conn_rx+0x100>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   17ae6:	f8b5 1029 	ldrh.w	r1, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   17aea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17aec:	1acb      	subs	r3, r1, r3
   17aee:	041b      	lsls	r3, r3, #16
   17af0:	f101 805e 	bmi.w	18bb0 <ull_conn_rx+0x1490>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17af4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17af8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   17afc:	1a9b      	subs	r3, r3, r2
   17afe:	f003 0303 	and.w	r3, r3, #3
   17b02:	2b02      	cmp	r3, #2
   17b04:	f001 806e 	beq.w	18be4 <ull_conn_rx+0x14c4>
	if (!conn_upd_curr) {
   17b08:	4b9c      	ldr	r3, [pc, #624]	; (17d7c <ull_conn_rx+0x65c>)
   17b0a:	681a      	ldr	r2, [r3, #0]
   17b0c:	2a00      	cmp	r2, #0
   17b0e:	f001 8066 	beq.w	18bde <ull_conn_rx+0x14be>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   17b12:	f895 3020 	ldrb.w	r3, [r5, #32]
   17b16:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   17b1a:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   17b1e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17b22:	fb02 f303 	mul.w	r3, r2, r3
	conn->llcp_cu.win_offset_us =
   17b26:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   17b2a:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
   17b2e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   17b32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.interval =
   17b36:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   17b3a:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
   17b3e:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   17b42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	conn->llcp_cu.latency =
   17b46:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   17b4a:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   17b4e:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
   17b52:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   17b56:	f8a4 10e8 	strh.w	r1, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   17b5a:	f023 030f 	bic.w	r3, r3, #15
   17b5e:	f043 0308 	orr.w	r3, r3, #8
   17b62:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   17b66:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   17b6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->llcp_cu.timeout =
   17b6e:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   17b72:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   17b74:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   17b78:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   17b7c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   17b7e:	6832      	ldr	r2, [r6, #0]
   17b80:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   17b82:	6832      	ldr	r2, [r6, #0]
   17b84:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   17b88:	2300      	movs	r3, #0
   17b8a:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   17b8c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   17b90:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   17b94:	4293      	cmp	r3, r2
   17b96:	d007      	beq.n	17ba8 <ull_conn_rx+0x488>
	    ((conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) ||
   17b98:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   17b9c:	f003 030e 	and.w	r3, r3, #14
   17ba0:	2b04      	cmp	r3, #4
   17ba2:	d101      	bne.n	17ba8 <ull_conn_rx+0x488>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17ba4:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   17ba8:	2300      	movs	r3, #0
   17baa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   17bae:	4618      	mov	r0, r3
		break;
   17bb0:	e606      	b.n	177c0 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   17bb2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17bb6:	2b00      	cmp	r3, #0
   17bb8:	f6ff ae32 	blt.w	17820 <ull_conn_rx+0x100>
   17bbc:	7f6b      	ldrb	r3, [r5, #29]
   17bbe:	2b18      	cmp	r3, #24
   17bc0:	f47f ae2e 	bne.w	17820 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   17bc4:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   17bc8:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   17bcc:	429a      	cmp	r2, r3
   17bce:	f43f adf4 	beq.w	177ba <ull_conn_rx+0x9a>
		    (conn->llcp_conn_param.state ==
   17bd2:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		     conn->llcp_conn_param.ack) &&
   17bd6:	f003 030f 	and.w	r3, r3, #15
   17bda:	2b04      	cmp	r3, #4
   17bdc:	f47f aded 	bne.w	177ba <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   17be0:	f8b5 c020 	ldrh.w	ip, [r5, #32]
   17be4:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17be8:	2b05      	cmp	r3, #5
   17bea:	f240 86b1 	bls.w	18950 <ull_conn_rx+0x1230>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17bee:	8c6f      	ldrh	r7, [r5, #34]	; 0x22
   17bf0:	b2b9      	uxth	r1, r7
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17bf2:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   17bf6:	f200 86ab 	bhi.w	18950 <ull_conn_rx+0x1230>
			    (interval_max > 3200) ||
   17bfa:	428b      	cmp	r3, r1
   17bfc:	f200 86a8 	bhi.w	18950 <ull_conn_rx+0x1230>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   17c00:	8cae      	ldrh	r6, [r5, #36]	; 0x24
   17c02:	b2b3      	uxth	r3, r6
			    (interval_min > interval_max) ||
   17c04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17c08:	f080 86a2 	bcs.w	18950 <ull_conn_rx+0x1230>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17c0c:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   17c0e:	fa1f fe80 	uxth.w	lr, r0
			    (latency > 499) ||
   17c12:	f1ae 020a 	sub.w	r2, lr, #10
   17c16:	f640 4876 	movw	r8, #3190	; 0xc76
   17c1a:	b292      	uxth	r2, r2
   17c1c:	4542      	cmp	r2, r8
   17c1e:	f200 8697 	bhi.w	18950 <ull_conn_rx+0x1230>
			     ((latency + 1) * interval_max)) ||
   17c22:	3301      	adds	r3, #1
   17c24:	b29b      	uxth	r3, r3
   17c26:	fb01 f303 	mul.w	r3, r1, r3
			    (timeout < 10) || (timeout > 3200) ||
   17c2a:	ebb3 0f8e 	cmp.w	r3, lr, lsl #2
   17c2e:	f080 868f 	bcs.w	18950 <ull_conn_rx+0x1230>
			     ((latency + 1) * interval_max)) ||
   17c32:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
   17c36:	4291      	cmp	r1, r2
   17c38:	f0c0 868a 	bcc.w	18950 <ull_conn_rx+0x1230>
			conn->llcp_conn_param.preferred_periodicity =
   17c3c:	f884 2190 	strb.w	r2, [r4, #400]	; 0x190
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17c40:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.interval_min = interval_min;
   17c44:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17c48:	2301      	movs	r3, #1
   17c4a:	f363 0203 	bfi	r2, r3, #0, #4
			conn->procedure_expire = 0U;
   17c4e:	2300      	movs	r3, #0
			conn->llcp_conn_param.interval_max = interval_max;
   17c50:	f8a4 718a 	strh.w	r7, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   17c54:	f8a4 618c 	strh.w	r6, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   17c58:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
			conn->procedure_expire = 0U;
   17c5c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   17c60:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
   17c64:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29
   17c68:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   17c6c:	f8a4 3192 	strh.w	r3, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   17c70:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
   17c74:	f895 302b 	ldrb.w	r3, [r5, #43]	; 0x2b
   17c78:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   17c7c:	f8a4 3194 	strh.w	r3, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   17c80:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
   17c84:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   17c88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   17c8c:	f8a4 3196 	strh.w	r3, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   17c90:	f895 1030 	ldrb.w	r1, [r5, #48]	; 0x30
   17c94:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   17c98:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   17c9c:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   17ca0:	f895 1032 	ldrb.w	r1, [r5, #50]	; 0x32
   17ca4:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
   17ca8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   17cac:	f8a4 319a 	strh.w	r3, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   17cb0:	f895 1034 	ldrb.w	r1, [r5, #52]	; 0x34
   17cb4:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   17cb8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   17cbc:	f8a4 319c 	strh.w	r3, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   17cc0:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   17cc4:	f895 1036 	ldrb.w	r1, [r5, #54]	; 0x36
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   17cc8:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset5);
   17ccc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset5 =
   17cd0:	f8a4 319e 	strh.w	r3, [r4, #414]	; 0x19e
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17cd4:	e571      	b.n	177ba <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   17cd6:	7f6b      	ldrb	r3, [r5, #29]
   17cd8:	2b18      	cmp	r3, #24
   17cda:	f47f ada1 	bne.w	17820 <ull_conn_rx+0x100>
	return conn_upd_curr && (conn_upd_curr != conn);
   17cde:	4827      	ldr	r0, [pc, #156]	; (17d7c <ull_conn_rx+0x65c>)
   17ce0:	6803      	ldr	r3, [r0, #0]
   17ce2:	2b00      	cmp	r3, #0
   17ce4:	f000 83a7 	beq.w	18436 <ull_conn_rx+0xd16>
   17ce8:	429c      	cmp	r4, r3
   17cea:	f000 83a4 	beq.w	18436 <ull_conn_rx+0xd16>
			nack = reject_ext_ind_send(conn, *rx,
   17cee:	2320      	movs	r3, #32
   17cf0:	220f      	movs	r2, #15
   17cf2:	4629      	mov	r1, r5
   17cf4:	4620      	mov	r0, r4
}
   17cf6:	b005      	add	sp, #20
   17cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   17cfc:	f7fe be48 	b.w	16990 <reject_ext_ind_send>
		if (conn->lll.role ||
   17d00:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17d04:	2b00      	cmp	r3, #0
   17d06:	f6ff ad8b 	blt.w	17820 <ull_conn_rx+0x100>
   17d0a:	7f6b      	ldrb	r3, [r5, #29]
   17d0c:	2b09      	cmp	r3, #9
   17d0e:	f47f ad87 	bne.w	17820 <ull_conn_rx+0x100>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   17d12:	4629      	mov	r1, r5
   17d14:	4620      	mov	r0, r4
}
   17d16:	b005      	add	sp, #20
   17d18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   17d1c:	f7fe bdb8 	b.w	16890 <feature_rsp_send>
		if (!conn->lll.role ||
   17d20:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17d24:	2b00      	cmp	r3, #0
   17d26:	dbf0      	blt.n	17d0a <ull_conn_rx+0x5ea>
   17d28:	e57a      	b.n	17820 <ull_conn_rx+0x100>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   17d2a:	7f6b      	ldrb	r3, [r5, #29]
   17d2c:	2b02      	cmp	r3, #2
   17d2e:	f47f ad77 	bne.w	17820 <ull_conn_rx+0x100>
			    conn->llcp_conn_param.req) &&
   17d32:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   17d36:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   17d3a:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   17d3e:	4288      	cmp	r0, r1
   17d40:	d002      	beq.n	17d48 <ull_conn_rx+0x628>
			    conn->llcp_conn_param.req) &&
   17d42:	2b0f      	cmp	r3, #15
   17d44:	f000 856b 	beq.w	1881e <ull_conn_rx+0x10fe>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   17d48:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   17d4c:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   17d50:	4291      	cmp	r1, r2
   17d52:	d002      	beq.n	17d5a <ull_conn_rx+0x63a>
   17d54:	2b14      	cmp	r3, #20
   17d56:	f000 85e6 	beq.w	18926 <ull_conn_rx+0x1206>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   17d5a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   17d5e:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   17d62:	428a      	cmp	r2, r1
   17d64:	d002      	beq.n	17d6c <ull_conn_rx+0x64c>
   17d66:	2b16      	cmp	r3, #22
   17d68:	f000 8647 	beq.w	189fa <ull_conn_rx+0x12da>
			switch (llctrl->unknown_rsp.type) {
   17d6c:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17d6e:	bf04      	itt	eq
   17d70:	2301      	moveq	r3, #1
   17d72:	712b      	strbeq	r3, [r5, #4]
				break;
   17d74:	e718      	b.n	17ba8 <ull_conn_rx+0x488>
   17d76:	bf00      	nop
   17d78:	20002e98 	.word	0x20002e98
   17d7c:	20002e04 	.word	0x20002e04
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
#if defined(CONFIG_BT_CENTRAL)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   17d80:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17d84:	2b00      	cmp	r3, #0
   17d86:	f6ff ad4b 	blt.w	17820 <ull_conn_rx+0x100>
   17d8a:	7f6b      	ldrb	r3, [r5, #29]
   17d8c:	2b03      	cmp	r3, #3
   17d8e:	f47f ad47 	bne.w	17820 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   17d92:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
					 conn->lll.phy_rx))) {
   17d96:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
			if (!(p->phys & (conn->lll.phy_tx |
   17d9a:	f895 2020 	ldrb.w	r2, [r5, #32]
   17d9e:	430b      	orrs	r3, r1
   17da0:	f003 0307 	and.w	r3, r3, #7
   17da4:	4213      	tst	r3, r2
   17da6:	f43f ad0a 	beq.w	177be <ull_conn_rx+0x9e>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   17daa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17dae:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   17db2:	1a9b      	subs	r3, r3, r2
   17db4:	f003 0303 	and.w	r3, r3, #3
   17db8:	2b02      	cmp	r3, #2
   17dba:	f43f ad00 	beq.w	177be <ull_conn_rx+0x9e>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   17dbe:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   17dc2:	f003 fefb 	bl	1bbbc <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   17dc6:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.chan_map.initiate = 1U;
   17dca:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->llcp_type = LLCP_CHAN_MAP;
   17dce:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   17dd0:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   17dd2:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   17dd6:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17dda:	6832      	ldr	r2, [r6, #0]
			conn->llcp.chan_map.initiate = 1U;
   17ddc:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17de0:	2101      	movs	r1, #1
			conn->llcp.chan_map.initiate = 1U;
   17de2:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	int nack = 0;
   17de6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17de8:	7111      	strb	r1, [r2, #4]

		break;
   17dea:	e4e9      	b.n	177c0 <ull_conn_rx+0xa0>
		if (!conn->lll.role ||
   17dec:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17df0:	2b00      	cmp	r3, #0
   17df2:	f6bf ad15 	bge.w	17820 <ull_conn_rx+0x100>
   17df6:	7f6b      	ldrb	r3, [r5, #29]
   17df8:	2b05      	cmp	r3, #5
   17dfa:	f47f ad11 	bne.w	17820 <ull_conn_rx+0x100>
	if (!((ind->c_to_p_phy | ind->p_to_c_phy) & 0x07)) {
   17dfe:	f895 2020 	ldrb.w	r2, [r5, #32]
   17e02:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17e06:	4313      	orrs	r3, r2
   17e08:	f013 0307 	ands.w	r3, r3, #7
   17e0c:	f040 8632 	bne.w	18a74 <ull_conn_rx+0x1354>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17e10:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   17e14:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   17e18:	428a      	cmp	r2, r1
   17e1a:	f43f acce 	beq.w	177ba <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   17e1e:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   17e22:	f002 0203 	and.w	r2, r2, #3
   17e26:	2a02      	cmp	r2, #2
   17e28:	f47f acc7 	bne.w	177ba <ull_conn_rx+0x9a>
		conn->llcp_phy.pause_tx = 0U;
   17e2c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17e30:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   17e34:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   17e38:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   17e3c:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   17e40:	4608      	mov	r0, r1
   17e42:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   17e46:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   17e4a:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   17e4e:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   17e52:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   17e56:	f040 871d 	bne.w	18c94 <ull_conn_rx+0x1574>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17e5a:	6833      	ldr	r3, [r6, #0]
   17e5c:	2101      	movs	r1, #1
   17e5e:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   17e60:	4610      	mov	r0, r2
   17e62:	e4ad      	b.n	177c0 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   17e64:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17e68:	2b00      	cmp	r3, #0
   17e6a:	f6ff acd9 	blt.w	17820 <ull_conn_rx+0x100>
   17e6e:	7f6b      	ldrb	r3, [r5, #29]
   17e70:	2b03      	cmp	r3, #3
   17e72:	f47f acd5 	bne.w	17820 <ull_conn_rx+0x100>
		if (!conn->lll.role &&
   17e76:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   17e7a:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
   17e7e:	429a      	cmp	r2, r3
   17e80:	f43f ac9b 	beq.w	177ba <ull_conn_rx+0x9a>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17e84:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17e88:	f002 0303 	and.w	r3, r2, #3
   17e8c:	2b02      	cmp	r3, #2
   17e8e:	f47f ac94 	bne.w	177ba <ull_conn_rx+0x9a>
			conn->llcp_phy.tx &= p->rx_phys;
   17e92:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   17e96:	f3c2 0182 	ubfx	r1, r2, #2, #3
   17e9a:	400b      	ands	r3, r1
			conn->llcp_phy.rx &= p->tx_phys;
   17e9c:	f895 1020 	ldrb.w	r1, [r5, #32]
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17ea0:	009b      	lsls	r3, r3, #2
   17ea2:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   17ea6:	ea01 1252 	and.w	r2, r1, r2, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17eaa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17eae:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   17eb2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17eb6:	d002      	beq.n	17ebe <ull_conn_rx+0x79e>
   17eb8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17ebc:	d105      	bne.n	17eca <ull_conn_rx+0x7aa>
				conn->llcp_phy.tx = 0;
   17ebe:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17ec2:	f003 0303 	and.w	r3, r3, #3
   17ec6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
			conn->llcp_phy.pause_tx = 1U;
   17eca:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   17ece:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   17ed0:	f043 0301 	orr.w	r3, r3, #1
   17ed4:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			conn->procedure_expire = 0U;
   17ed8:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17edc:	e46d      	b.n	177ba <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   17ede:	7f6b      	ldrb	r3, [r5, #29]
   17ee0:	2b03      	cmp	r3, #3
   17ee2:	f47f ac9d 	bne.w	17820 <ull_conn_rx+0x100>
		if (!conn->lll.role) {
   17ee6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   17eea:	2b00      	cmp	r3, #0
   17eec:	f2c0 83f0 	blt.w	186d0 <ull_conn_rx+0xfb0>
			if ((conn->llcp_phy.ack !=
   17ef0:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   17ef4:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   17ef8:	4291      	cmp	r1, r2
   17efa:	d007      	beq.n	17f0c <ull_conn_rx+0x7ec>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   17efc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   17f00:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   17f04:	3b01      	subs	r3, #1
   17f06:	2b02      	cmp	r3, #2
   17f08:	f240 8573 	bls.w	189f2 <ull_conn_rx+0x12d2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   17f0c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17f10:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   17f14:	1a1b      	subs	r3, r3, r0
   17f16:	f003 0303 	and.w	r3, r3, #3
   17f1a:	2b02      	cmp	r3, #2
   17f1c:	f000 84ca 	beq.w	188b4 <ull_conn_rx+0x1194>
				     LLCP_ENCRYPTION)) ||
   17f20:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
   17f24:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   17f28:	4298      	cmp	r0, r3
   17f2a:	f000 8515 	beq.w	18958 <ull_conn_rx+0x1238>
				nack = reject_ext_ind_send(conn, *rx,
   17f2e:	232a      	movs	r3, #42	; 0x2a
   17f30:	2216      	movs	r2, #22
   17f32:	e6de      	b.n	17cf2 <ull_conn_rx+0x5d2>
		if ((conn->llcp_req == conn->llcp_ack) ||
   17f34:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   17f38:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   17f3c:	429a      	cmp	r2, r3
   17f3e:	f43f ac6f 	beq.w	17820 <ull_conn_rx+0x100>
   17f42:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   17f46:	2a03      	cmp	r2, #3
   17f48:	f47f ac6a 	bne.w	17820 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   17f4c:	7f6a      	ldrb	r2, [r5, #29]
   17f4e:	2a01      	cmp	r2, #1
   17f50:	f47f ac66 	bne.w	17820 <ull_conn_rx+0x100>
		if (conn->lll.role) {
   17f54:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   17f58:	2a00      	cmp	r2, #0
   17f5a:	f2c0 8542 	blt.w	189e2 <ull_conn_rx+0x12c2>
			conn->llcp_enc.pause_rx = 0U;
   17f5e:	f894 c166 	ldrb.w	ip, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   17f62:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   17f66:	2200      	movs	r2, #0
			conn->llcp_enc.pause_rx = 0U;
   17f68:	f02c 0c03 	bic.w	ip, ip, #3
   17f6c:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   17f70:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   17f74:	f01c 0f04 	tst.w	ip, #4
   17f78:	f43f ac21 	beq.w	177be <ull_conn_rx+0x9e>
			conn->llcp_enc.refresh = 0U;
   17f7c:	f36f 0c82 	bfc	ip, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   17f80:	2319      	movs	r3, #25
			conn->llcp_enc.refresh = 0U;
   17f82:	f884 c166 	strb.w	ip, [r4, #358]	; 0x166
	int nack = 0;
   17f86:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   17f88:	712b      	strb	r3, [r5, #4]
   17f8a:	e419      	b.n	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   17f8c:	7f6e      	ldrb	r6, [r5, #29]
   17f8e:	2e06      	cmp	r6, #6
   17f90:	f47f ac46 	bne.w	17820 <ull_conn_rx+0x100>
	if (!conn->llcp_version.tx) {
   17f94:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   17f98:	07da      	lsls	r2, r3, #31
   17f9a:	f140 8496 	bpl.w	188ca <ull_conn_rx+0x11aa>
	} else if (!conn->llcp_version.rx) {
   17f9e:	f013 0302 	ands.w	r3, r3, #2
   17fa2:	f47f ac0a 	bne.w	177ba <ull_conn_rx+0x9a>
		conn->llcp_version.ack = conn->llcp_version.req;
   17fa6:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   17faa:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   17fae:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   17fb2:	f895 3020 	ldrb.w	r3, [r5, #32]
   17fb6:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   17fba:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   17fbe:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   17fc2:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   17fc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17fca:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   17fce:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   17fd2:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   17fd6:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   17fda:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   17fde:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   17fe2:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   17fe6:	2000      	movs	r0, #0
   17fe8:	f7ff bbea 	b.w	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   17fec:	7f6f      	ldrb	r7, [r5, #29]
   17fee:	2f01      	cmp	r7, #1
   17ff0:	f47f ac16 	bne.w	17820 <ull_conn_rx+0x100>
	if (conn->common.txn_lock) {
   17ff4:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   17ff8:	f010 0602 	ands.w	r6, r0, #2
   17ffc:	f040 8461 	bne.w	188c2 <ull_conn_rx+0x11a2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18000:	48d6      	ldr	r0, [pc, #856]	; (1835c <ull_conn_rx+0xc3c>)
   18002:	f7f8 fe7f 	bl	10d04 <mem_acquire>
	if (!tx) {
   18006:	4601      	mov	r1, r0
   18008:	2800      	cmp	r0, #0
   1800a:	f000 81e4 	beq.w	183d6 <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   1800e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   18012:	f043 0302 	orr.w	r3, r3, #2
   18016:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1801a:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1801c:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1801e:	f043 0303 	orr.w	r3, r3, #3
   18022:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   18024:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   18026:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   18028:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1802a:	f7fe fa9d 	bl	16568 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1802e:	712f      	strb	r7, [r5, #4]
	return 0;
   18030:	4630      	mov	r0, r6
   18032:	f7ff bbc5 	b.w	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   18036:	7f6b      	ldrb	r3, [r5, #29]
   18038:	2b02      	cmp	r3, #2
   1803a:	f47f abf1 	bne.w	17820 <ull_conn_rx+0x100>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1803e:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   18042:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   18046:	428b      	cmp	r3, r1
   18048:	d004      	beq.n	18054 <ull_conn_rx+0x934>
   1804a:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1804e:	2b03      	cmp	r3, #3
   18050:	f000 84f7 	beq.w	18a42 <ull_conn_rx+0x1322>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   18054:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   18058:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1805c:	428b      	cmp	r3, r1
   1805e:	f000 83ba 	beq.w	187d6 <ull_conn_rx+0x10b6>
		rej_ext_ind->error_code = rej_ind->error_code;
   18062:	f895 2020 	ldrb.w	r2, [r5, #32]
   18066:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1806a:	2a23      	cmp	r2, #35	; 0x23
   1806c:	d012      	beq.n	18094 <ull_conn_rx+0x974>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1806e:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   18072:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18076:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1807a:	f36f 0100 	bfc	r1, #0, #1
   1807e:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   18082:	2100      	movs	r1, #0
   18084:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   18088:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1808c:	f361 1306 	bfi	r3, r1, #4, #3
   18090:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   18094:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   18098:	075e      	lsls	r6, r3, #29
   1809a:	f57f ab8e 	bpl.w	177ba <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1809e:	231c      	movs	r3, #28
   180a0:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   180a2:	772a      	strb	r2, [r5, #28]
	p->tx = conn->lll.phy_tx;
   180a4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   180a8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   180ac:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   180ae:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   180b2:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   180b6:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   180b8:	77ab      	strb	r3, [r5, #30]
	if (err) {
   180ba:	f7ff bb81 	b.w	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   180be:	7f6b      	ldrb	r3, [r5, #29]
   180c0:	2b03      	cmp	r3, #3
   180c2:	f47f abad 	bne.w	17820 <ull_conn_rx+0x100>
	switch (rej_ext_ind->reject_opcode) {
   180c6:	f895 3020 	ldrb.w	r3, [r5, #32]
   180ca:	3b03      	subs	r3, #3
   180cc:	2b13      	cmp	r3, #19
   180ce:	f63f ab74 	bhi.w	177ba <ull_conn_rx+0x9a>
   180d2:	a101      	add	r1, pc, #4	; (adr r1, 180d8 <ull_conn_rx+0x9b8>)
   180d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   180d8:	00018369 	.word	0x00018369
   180dc:	000177bb 	.word	0x000177bb
   180e0:	000177bb 	.word	0x000177bb
   180e4:	000177bb 	.word	0x000177bb
   180e8:	000177bb 	.word	0x000177bb
   180ec:	000177bb 	.word	0x000177bb
   180f0:	000177bb 	.word	0x000177bb
   180f4:	000177bb 	.word	0x000177bb
   180f8:	000177bb 	.word	0x000177bb
   180fc:	000177bb 	.word	0x000177bb
   18100:	000177bb 	.word	0x000177bb
   18104:	000177bb 	.word	0x000177bb
   18108:	000182e5 	.word	0x000182e5
   1810c:	000177bb 	.word	0x000177bb
   18110:	000177bb 	.word	0x000177bb
   18114:	000177bb 	.word	0x000177bb
   18118:	000177bb 	.word	0x000177bb
   1811c:	000182a7 	.word	0x000182a7
   18120:	000177bb 	.word	0x000177bb
   18124:	000183a9 	.word	0x000183a9
		if (!conn->lll.role ||
   18128:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1812c:	2b00      	cmp	r3, #0
   1812e:	f6bf ab77 	bge.w	17820 <ull_conn_rx+0x100>
   18132:	7f6e      	ldrb	r6, [r5, #29]
   18134:	2e01      	cmp	r6, #1
   18136:	f47f ab73 	bne.w	17820 <ull_conn_rx+0x100>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1813a:	4888      	ldr	r0, [pc, #544]	; (1835c <ull_conn_rx+0xc3c>)
   1813c:	f7f8 fde2 	bl	10d04 <mem_acquire>
		if (!tx) {
   18140:	2800      	cmp	r0, #0
   18142:	f000 8148 	beq.w	183d6 <ull_conn_rx+0xcb6>
	conn->llcp_enc.pause_rx = 1U;
   18146:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   1814a:	f022 0205 	bic.w	r2, r2, #5
   1814e:	f042 0205 	orr.w	r2, r2, #5
   18152:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   18156:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
   1815a:	f36f 02c3 	bfc	r2, #3, #1
   1815e:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18162:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18164:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18166:	f042 0203 	orr.w	r2, r2, #3
   1816a:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   1816c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   18170:	210b      	movs	r1, #11
   18172:	71c1      	strb	r1, [r0, #7]
	if (
   18174:	2a00      	cmp	r2, #0
   18176:	f000 8187 	beq.w	18488 <ull_conn_rx+0xd68>
	    !conn->llcp_enc.pause_tx &&
   1817a:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1817e:	078e      	lsls	r6, r1, #30
   18180:	f100 8182 	bmi.w	18488 <ull_conn_rx+0xd68>
	    !conn->llcp_phy.pause_tx &&
   18184:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   18188:	07c9      	lsls	r1, r1, #31
   1818a:	f100 817d 	bmi.w	18488 <ull_conn_rx+0xd68>
		if (conn->tx_head == conn->tx_data) {
   1818e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   18192:	428a      	cmp	r2, r1
   18194:	f000 8593 	beq.w	18cbe <ull_conn_rx+0x159e>
		} else if (!conn->tx_ctrl) {
   18198:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1819c:	2900      	cmp	r1, #0
   1819e:	f000 8644 	beq.w	18e2a <ull_conn_rx+0x170a>
	tx->next = conn->tx_ctrl_last->next;
   181a2:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   181a6:	6811      	ldr	r1, [r2, #0]
   181a8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   181aa:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   181ac:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   181b0:	6802      	ldr	r2, [r0, #0]
   181b2:	2a00      	cmp	r2, #0
   181b4:	f47f ab01 	bne.w	177ba <ull_conn_rx+0x9a>
   181b8:	f7ff bb6b 	b.w	17892 <ull_conn_rx+0x172>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_PER_INIT_FEAT_XCHG) &&
   181bc:	7f6b      	ldrb	r3, [r5, #29]
   181be:	2b09      	cmp	r3, #9
   181c0:	f47f ab2e 	bne.w	17820 <ull_conn_rx+0x100>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   181c4:	6a2a      	ldr	r2, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   181c6:	4966      	ldr	r1, [pc, #408]	; (18360 <ull_conn_rx+0xc40>)
   181c8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   181ca:	4311      	orrs	r1, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   181cc:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
   181d0:	400a      	ands	r2, r1
   181d2:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   181d6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   181da:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
	feat &= LL_FEAT_BIT_MASK;
   181de:	f043 0310 	orr.w	r3, r3, #16
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   181e2:	4013      	ands	r3, r2
   181e4:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   181e8:	6a2e      	ldr	r6, [r5, #32]
   181ea:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   181ec:	f7fb ffd0 	bl	14190 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   181f0:	f005 03ff 	and.w	r3, r5, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   181f4:	f043 0310 	orr.w	r3, r3, #16
	feat &= LL_FEAT_BIT_MASK;
   181f8:	4a59      	ldr	r2, [pc, #356]	; (18360 <ull_conn_rx+0xc40>)
	conn->llcp_feature.features_peer =
   181fa:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   181fe:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   18202:	4332      	orrs	r2, r6
	conn->common.fex_valid = 1U;
   18204:	f043 0301 	orr.w	r3, r3, #1
	feat_result = feat_to_keep & feat_octet0;
   18208:	4002      	ands	r2, r0
	conn->common.fex_valid = 1U;
   1820a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1820e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   18212:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat_result &= 0xFF;
   18216:	f002 02ff 	and.w	r2, r2, #255	; 0xff
   1821a:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
   1821e:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18220:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   18224:	2300      	movs	r3, #0
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   18226:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1822a:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   1822e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   18232:	4618      	mov	r0, r3
}
   18234:	f7ff bac4 	b.w	177c0 <ull_conn_rx+0xa0>
		if (conn->lll.role ||
   18238:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1823c:	2b00      	cmp	r3, #0
   1823e:	f6bf aba2 	bge.w	17986 <ull_conn_rx+0x266>
   18242:	f7ff baed 	b.w	17820 <ull_conn_rx+0x100>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   18246:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1824a:	2b00      	cmp	r3, #0
   1824c:	f6ff aae8 	blt.w	17820 <ull_conn_rx+0x100>
   18250:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   18254:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   18258:	429a      	cmp	r2, r3
   1825a:	f43f aae1 	beq.w	17820 <ull_conn_rx+0x100>
   1825e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   18262:	2b03      	cmp	r3, #3
   18264:	f47f aadc 	bne.w	17820 <ull_conn_rx+0x100>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   18268:	7f6b      	ldrb	r3, [r5, #29]
   1826a:	2b01      	cmp	r3, #1
   1826c:	f47f aad8 	bne.w	17820 <ull_conn_rx+0x100>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   18270:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   18274:	f36f 0201 	bfc	r2, #0, #2
   18278:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
	int nack = 0;
   1827c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1827e:	712b      	strb	r3, [r5, #4]
		break;
   18280:	f7ff ba9e 	b.w	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   18284:	7f6b      	ldrb	r3, [r5, #29]
   18286:	2b01      	cmp	r3, #1
   18288:	f47f aaca 	bne.w	17820 <ull_conn_rx+0x100>
	} else if (!conn->lll.role) {
   1828c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   18290:	2b00      	cmp	r3, #0
   18292:	f280 80a8 	bge.w	183e6 <ull_conn_rx+0xcc6>
		conn->lll.enc_tx = 0;
   18296:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1829a:	f36f 1304 	bfc	r3, #4, #1
   1829e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   182a2:	f7ff ba8a 	b.w	177ba <ull_conn_rx+0x9a>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   182a6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   182aa:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   182ae:	4293      	cmp	r3, r2
   182b0:	f43f aa83 	beq.w	177ba <ull_conn_rx+0x9a>
	conn->procedure_expire = 0U;
   182b4:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   182b6:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   182b8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   182bc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   182c0:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   182c2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   182c6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   182ca:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   182cc:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   182ce:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   182d2:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   182d4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   182d8:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   182da:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   182dc:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   182de:	4618      	mov	r0, r3
   182e0:	f7ff ba6e 	b.w	177c0 <ull_conn_rx+0xa0>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   182e4:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   182e8:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
   182ec:	4299      	cmp	r1, r3
   182ee:	f43f aa64 	beq.w	177ba <ull_conn_rx+0x9a>
	if (!lll->role && (rej_ext_ind->error_code ==
   182f2:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
	return ((uint16_t)src[1] << 8) | src[0];
   182f6:	f895 1021 	ldrb.w	r1, [r5, #33]	; 0x21
   182fa:	2800      	cmp	r0, #0
   182fc:	f2c0 85ac 	blt.w	18e58 <ull_conn_rx+0x1738>
   18300:	291a      	cmp	r1, #26
   18302:	f000 85b2 	beq.w	18e6a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   18306:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   1830a:	f001 000f 	and.w	r0, r1, #15
   1830e:	2804      	cmp	r0, #4
   18310:	d106      	bne.n	18320 <ull_conn_rx+0xc00>
	conn_upd_curr = NULL;
   18312:	4814      	ldr	r0, [pc, #80]	; (18364 <ull_conn_rx+0xc44>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18314:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   18318:	2300      	movs	r3, #0
   1831a:	6003      	str	r3, [r0, #0]
		conn->procedure_expire = 0U;
   1831c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   18320:	06c8      	lsls	r0, r1, #27
   18322:	f57f aa4a 	bpl.w	177ba <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   18326:	2318      	movs	r3, #24
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18328:	07d1      	lsls	r1, r2, #31
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1832a:	712b      	strb	r3, [r5, #4]
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   1832c:	f100 8463 	bmi.w	18bf6 <ull_conn_rx+0x14d6>
	cu->status = rej_ext_ind->error_code;
   18330:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18334:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   18336:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   18338:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   1833c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1833e:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   18340:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   18342:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   18346:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   1834a:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1834c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   18350:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   18354:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   18356:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   18358:	f7ff ba32 	b.w	177c0 <ull_conn_rx+0xa0>
   1835c:	20002e98 	.word	0x20002e98
   18360:	087830d0 	.word	0x087830d0
   18364:	20002e04 	.word	0x20002e04
		if ((conn->llcp_ack != conn->llcp_req) &&
   18368:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1836c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   18370:	428b      	cmp	r3, r1
   18372:	f43f aa22 	beq.w	177ba <ull_conn_rx+0x9a>
   18376:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1837a:	2b03      	cmp	r3, #3
   1837c:	f47f aa1d 	bne.w	177ba <ull_conn_rx+0x9a>
	conn->llcp_enc.pause_rx = 0U;
   18380:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   18384:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   18388:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1838a:	f022 0203 	bic.w	r2, r2, #3
   1838e:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   18392:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   18396:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1839a:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1839e:	210d      	movs	r1, #13
   183a0:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   183a2:	4618      	mov	r0, r3
   183a4:	f7ff ba0c 	b.w	177c0 <ull_conn_rx+0xa0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   183a8:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   183ac:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   183b0:	428b      	cmp	r3, r1
   183b2:	f43f aa02 	beq.w	177ba <ull_conn_rx+0x9a>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   183b6:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   183ba:	2a23      	cmp	r2, #35	; 0x23
   183bc:	f47f ae57 	bne.w	1806e <ull_conn_rx+0x94e>
   183c0:	e668      	b.n	18094 <ull_conn_rx+0x974>
			tx->next = conn->tx_head;
   183c2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   183c4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   183c8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   183cc:	2a00      	cmp	r2, #0
   183ce:	f47f a9f4 	bne.w	177ba <ull_conn_rx+0x9a>
   183d2:	f7ff ba5e 	b.w	17892 <ull_conn_rx+0x172>
			return -ENOBUFS;
   183d6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   183da:	f7ff b9f1 	b.w	177c0 <ull_conn_rx+0xa0>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   183de:	7f6b      	ldrb	r3, [r5, #29]
   183e0:	2b01      	cmp	r3, #1
   183e2:	f47f aa1d 	bne.w	17820 <ull_conn_rx+0x100>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   183e6:	48b9      	ldr	r0, [pc, #740]	; (186cc <ull_conn_rx+0xfac>)
   183e8:	f7f8 fc8c 	bl	10d04 <mem_acquire>
		if (!tx) {
   183ec:	2800      	cmp	r0, #0
   183ee:	d0f2      	beq.n	183d6 <ull_conn_rx+0xcb6>
	conn->llcp_enc.pause_rx = 1U;
   183f0:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   183f4:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   183f8:	f041 0101 	orr.w	r1, r1, #1
	conn->lll.enc_rx = 0;
   183fc:	f022 0218 	bic.w	r2, r2, #24
	conn->llcp_enc.pause_rx = 1U;
   18400:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18404:	2101      	movs	r1, #1
	conn->lll.enc_rx = 0;
   18406:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1840a:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1840c:	7141      	strb	r1, [r0, #5]
   1840e:	e6aa      	b.n	18166 <ull_conn_rx+0xa46>
			conn->tx_data = conn->tx_data->next;
   18410:	6813      	ldr	r3, [r2, #0]
   18412:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18416:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1841a:	2b00      	cmp	r3, #0
   1841c:	f47f aa2f 	bne.w	1787e <ull_conn_rx+0x15e>
			tx->next = conn->tx_head->next;
   18420:	6813      	ldr	r3, [r2, #0]
   18422:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18424:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   18426:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   18428:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1842c:	2a00      	cmp	r2, #0
   1842e:	f47f a9c4 	bne.w	177ba <ull_conn_rx+0x9a>
   18432:	f7ff ba2e 	b.w	17892 <ull_conn_rx+0x172>
		if (!conn->lll.role) {
   18436:	f994 6039 	ldrsb.w	r6, [r4, #57]	; 0x39
			if ((conn->llcp_conn_param.req !=
   1843a:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
					conn->llcp_conn_param.ack) &&
   1843e:	f894 1185 	ldrb.w	r1, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   18442:	2e00      	cmp	r6, #0
   18444:	f2c0 80b2 	blt.w	185ac <ull_conn_rx+0xe8c>
			if ((conn->llcp_conn_param.req !=
   18448:	4291      	cmp	r1, r2
   1844a:	d00a      	beq.n	18462 <ull_conn_rx+0xd42>
			    ((conn->llcp_conn_param.state ==
   1844c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   18450:	f012 0f0b 	tst.w	r2, #11
   18454:	f000 8279 	beq.w	1894a <ull_conn_rx+0x122a>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   18458:	f002 020f 	and.w	r2, r2, #15
   1845c:	2a06      	cmp	r2, #6
   1845e:	f000 8274 	beq.w	1894a <ull_conn_rx+0x122a>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   18462:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   18466:	f894 60e5 	ldrb.w	r6, [r4, #229]	; 0xe5
   1846a:	1b92      	subs	r2, r2, r6
   1846c:	f002 0203 	and.w	r2, r2, #3
   18470:	2a02      	cmp	r2, #2
   18472:	f000 83ed 	beq.w	18c50 <ull_conn_rx+0x1530>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   18476:	f894 61bc 	ldrb.w	r6, [r4, #444]	; 0x1bc
   1847a:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   1847e:	4296      	cmp	r6, r2
   18480:	f000 8436 	beq.w	18cf0 <ull_conn_rx+0x15d0>
				nack = reject_ext_ind_send(conn, *rx,
   18484:	232a      	movs	r3, #42	; 0x2a
   18486:	e433      	b.n	17cf0 <ull_conn_rx+0x5d0>
		if (!conn->tx_ctrl) {
   18488:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1848c:	2900      	cmp	r1, #0
   1848e:	f47f ae88 	bne.w	181a2 <ull_conn_rx+0xa82>
			tx->next = conn->tx_head;
   18492:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18494:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18498:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1849c:	e688      	b.n	181b0 <ull_conn_rx+0xa90>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1849e:	7f6b      	ldrb	r3, [r5, #29]
   184a0:	2b01      	cmp	r3, #1
   184a2:	f47f a9bd 	bne.w	17820 <ull_conn_rx+0x100>
   184a6:	e6f6      	b.n	18296 <ull_conn_rx+0xb76>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   184a8:	7913      	ldrb	r3, [r2, #4]
   184aa:	f003 0303 	and.w	r3, r3, #3
   184ae:	2b03      	cmp	r3, #3
   184b0:	f000 8243 	beq.w	1893a <ull_conn_rx+0x121a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   184b4:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   184b8:	f7ff b9e3 	b.w	17882 <ull_conn_rx+0x162>
	if (conn->common.txn_lock) {
   184bc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   184c0:	079b      	lsls	r3, r3, #30
   184c2:	f53f a97a 	bmi.w	177ba <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   184c6:	4881      	ldr	r0, [pc, #516]	; (186cc <ull_conn_rx+0xfac>)
   184c8:	f7f8 fc1c 	bl	10d04 <mem_acquire>
	if (!tx) {
   184cc:	4603      	mov	r3, r0
   184ce:	2800      	cmp	r0, #0
   184d0:	d081      	beq.n	183d6 <ull_conn_rx+0xcb6>
	conn->common.txn_lock = 1U;
   184d2:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   184d6:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   184da:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   184de:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   184e2:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   184e6:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   184ea:	f042 0202 	orr.w	r2, r2, #2
   184ee:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   184f2:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   184f6:	428a      	cmp	r2, r1
   184f8:	f040 84f5 	bne.w	18ee6 <ull_conn_rx+0x17c6>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   184fc:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   184fe:	291a      	cmp	r1, #26
   18500:	f240 826d 	bls.w	189de <ull_conn_rx+0x12be>
			eff_tx_octets = MIN(max_rx_octets,
   18504:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   18508:	4281      	cmp	r1, r0
   1850a:	bf28      	it	cs
   1850c:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1850e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   18510:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   18514:	281b      	cmp	r0, #27
		if (lr_rx_time >= PDU_DC_MAX_US(PDU_DC_PAYLOAD_SIZE_MIN,
   18516:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   18518:	bf34      	ite	cc
   1851a:	46c6      	movcc	lr, r8
   1851c:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   18520:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   18524:	bf34      	ite	cc
   18526:	4658      	movcc	r0, fp
   18528:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1852c:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   18530:	bf34      	ite	cc
   18532:	46d4      	movcc	ip, sl
   18534:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   18538:	45c6      	cmp	lr, r8
   1853a:	f000 8313 	beq.w	18b64 <ull_conn_rx+0x1444>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1853e:	3a01      	subs	r2, #1
   18540:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   18544:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   18548:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   1854c:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   18550:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   18554:	2b00      	cmp	r3, #0
   18556:	f000 836b 	beq.w	18c30 <ull_conn_rx+0x1510>
				conn->llcp_length.state =
   1855a:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1855e:	2505      	movs	r5, #5
   18560:	f365 0202 	bfi	r2, r5, #0, #3
   18564:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   18568:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1856c:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   1856e:	6832      	ldr	r2, [r6, #0]
   18570:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   18572:	6832      	ldr	r2, [r6, #0]
   18574:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   18578:	2200      	movs	r2, #0
   1857a:	6032      	str	r2, [r6, #0]
	if (tx) {
   1857c:	2b00      	cmp	r3, #0
   1857e:	f43f a91e 	beq.w	177be <ull_conn_rx+0x9e>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18582:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   18584:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   18586:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1858a:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1858c:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1858e:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   18590:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   18592:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   18594:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   18598:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1859c:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1859e:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   185a0:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   185a2:	f7fd ffe1 	bl	16568 <ctrl_tx_sec_enqueue>
	return 0;
   185a6:	2000      	movs	r0, #0
}
   185a8:	f7ff b90a 	b.w	177c0 <ull_conn_rx+0xa0>
		} else if ((conn->llcp_conn_param.req ==
   185ac:	4291      	cmp	r1, r2
   185ae:	d005      	beq.n	185bc <ull_conn_rx+0xe9c>
			    conn->llcp_conn_param.ack) ||
   185b0:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   185b4:	f012 0f0b 	tst.w	r2, #11
   185b8:	f47f a8ff 	bne.w	177ba <ull_conn_rx+0x9a>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   185bc:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   185c0:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   185c4:	2a05      	cmp	r2, #5
   185c6:	d97d      	bls.n	186c4 <ull_conn_rx+0xfa4>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   185c8:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   185cc:	fa1f f689 	uxth.w	r6, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   185d0:	f5b6 6f48 	cmp.w	r6, #3200	; 0xc80
   185d4:	d876      	bhi.n	186c4 <ull_conn_rx+0xfa4>
			    (interval_max > 3200) ||
   185d6:	42b2      	cmp	r2, r6
   185d8:	d874      	bhi.n	186c4 <ull_conn_rx+0xfa4>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   185da:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   185de:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   185e2:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   185e6:	d26d      	bcs.n	186c4 <ull_conn_rx+0xfa4>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   185e8:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   185ec:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   185f0:	f1a2 070a 	sub.w	r7, r2, #10
   185f4:	f640 4b76 	movw	fp, #3190	; 0xc76
   185f8:	b2bf      	uxth	r7, r7
   185fa:	455f      	cmp	r7, fp
   185fc:	d862      	bhi.n	186c4 <ull_conn_rx+0xfa4>
			     ((latency + 1) * interval_max)) ||
   185fe:	f10c 0701 	add.w	r7, ip, #1
   18602:	b2bf      	uxth	r7, r7
   18604:	fb06 f707 	mul.w	r7, r6, r7
			    (timeout < 10) || (timeout > 3200) ||
   18608:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1860c:	d25a      	bcs.n	186c4 <ull_conn_rx+0xfa4>
			     ((latency + 1) * interval_max)) ||
   1860e:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   18612:	455e      	cmp	r6, fp
   18614:	d356      	bcc.n	186c4 <ull_conn_rx+0xfa4>
			conn->llcp_conn_param.interval_min = interval_min;
   18616:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   1861a:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   1861e:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   18622:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   18626:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1862a:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1862e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   18632:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   18636:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   1863a:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1863e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   18642:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   18646:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   1864a:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1864e:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   18652:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   18656:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   1865a:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1865e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   18662:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   18666:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   1866a:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1866e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   18672:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   18676:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   1867a:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1867e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   18682:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   18686:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   1868a:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1868e:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   18692:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   18696:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   1869a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   1869c:	42be      	cmp	r6, r7
   1869e:	f000 843d 	beq.w	18f1c <ull_conn_rx+0x17fc>
				conn->llcp_conn_param.state =
   186a2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   186a6:	2503      	movs	r5, #3
   186a8:	f365 0203 	bfi	r2, r5, #0, #4
   186ac:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   186b0:	3901      	subs	r1, #1
   186b2:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   186b6:	2b00      	cmp	r3, #0
   186b8:	f47f a881 	bne.w	177be <ull_conn_rx+0x9e>
		conn_upd_curr = conn;
   186bc:	6004      	str	r4, [r0, #0]
	int nack = 0;
   186be:	4618      	mov	r0, r3
   186c0:	f7ff b87e 	b.w	177c0 <ull_conn_rx+0xa0>
				nack = reject_ext_ind_send(conn, *rx,
   186c4:	231e      	movs	r3, #30
   186c6:	f7ff bb13 	b.w	17cf0 <ull_conn_rx+0x5d0>
   186ca:	bf00      	nop
   186cc:	20002e98 	.word	0x20002e98
	if (conn->common.txn_lock) {
   186d0:	f894 70d8 	ldrb.w	r7, [r4, #216]	; 0xd8
   186d4:	f017 0702 	ands.w	r7, r7, #2
   186d8:	f47f a86f 	bne.w	177ba <ull_conn_rx+0x9a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   186dc:	48e0      	ldr	r0, [pc, #896]	; (18a60 <ull_conn_rx+0x1340>)
   186de:	f7f8 fb11 	bl	10d04 <mem_acquire>
	if (!tx) {
   186e2:	4602      	mov	r2, r0
   186e4:	2800      	cmp	r0, #0
   186e6:	f43f ae76 	beq.w	183d6 <ull_conn_rx+0xcb6>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   186ea:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->common.txn_lock = 1U;
   186ee:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	if (conn->llcp_phy.ack ==
   186f2:	f894 e1bd 	ldrb.w	lr, [r4, #445]	; 0x1bd
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   186f6:	2002      	movs	r0, #2
   186f8:	f360 0101 	bfi	r1, r0, #0, #2
	conn->common.txn_lock = 1U;
   186fc:	f043 0302 	orr.w	r3, r3, #2
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   18700:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   18704:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
	conn->common.txn_lock = 1U;
   18708:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
			conn->phy_pref_tx;
   1870c:	f894 31c0 	ldrb.w	r3, [r4, #448]	; 0x1c0
	if (conn->llcp_phy.ack ==
   18710:	4571      	cmp	r1, lr
			conn->phy_pref_tx;
   18712:	f3c3 0602 	ubfx	r6, r3, #0, #3
   18716:	f003 0c07 	and.w	ip, r3, #7
			conn->phy_pref_rx;
   1871a:	f3c3 00c2 	ubfx	r0, r3, #3, #3
	if (conn->llcp_phy.ack ==
   1871e:	d114      	bne.n	1874a <ull_conn_rx+0x102a>
		conn->llcp_phy.ack--;
   18720:	3901      	subs	r1, #1
		conn->llcp_phy.cmd = 0U;
   18722:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack--;
   18726:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   1872a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
		conn->llcp_phy.cmd = 0U;
   1872e:	f367 0382 	bfi	r3, r7, #2, #1
		conn->llcp_phy.tx =
   18732:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.rx =
   18736:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   1873a:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->procedure_expire =
   1873e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
		conn->llcp_phy.rx =
   18742:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
		conn->procedure_expire =
   18746:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   1874a:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	conn->llcp_phy.tx &= p->rx_phys;
   1874e:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   18752:	f895 7020 	ldrb.w	r7, [r5, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   18756:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   1875a:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   1875e:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   18762:	009b      	lsls	r3, r3, #2
   18764:	f001 0103 	and.w	r1, r1, #3
   18768:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1876c:	430b      	orrs	r3, r1
   1876e:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   18772:	2303      	movs	r3, #3
   18774:	7153      	strb	r3, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   18776:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18778:	7910      	ldrb	r0, [r2, #4]
	    conn->tx_head &&
   1877a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1877e:	7216      	strb	r6, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   18780:	2117      	movs	r1, #23
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18782:	f040 0003 	orr.w	r0, r0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   18786:	71d1      	strb	r1, [r2, #7]
		if (!conn->tx_ctrl) {
   18788:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1878c:	7110      	strb	r0, [r2, #4]
	if (
   1878e:	2b00      	cmp	r3, #0
   18790:	f000 80c0 	beq.w	18914 <ull_conn_rx+0x11f4>
	    !conn->llcp_enc.pause_tx &&
   18794:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   18798:	0786      	lsls	r6, r0, #30
   1879a:	f100 80bb 	bmi.w	18914 <ull_conn_rx+0x11f4>
	    !conn->llcp_phy.pause_tx &&
   1879e:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   187a2:	07c0      	lsls	r0, r0, #31
   187a4:	f100 80b6 	bmi.w	18914 <ull_conn_rx+0x11f4>
		if (conn->tx_head == conn->tx_data) {
   187a8:	f8d4 01d0 	ldr.w	r0, [r4, #464]	; 0x1d0
   187ac:	4283      	cmp	r3, r0
   187ae:	f000 83e3 	beq.w	18f78 <ull_conn_rx+0x1858>
		} else if (!conn->tx_ctrl) {
   187b2:	2900      	cmp	r1, #0
   187b4:	f000 83d8 	beq.w	18f68 <ull_conn_rx+0x1848>
	tx->next = conn->tx_ctrl_last->next;
   187b8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   187bc:	6819      	ldr	r1, [r3, #0]
   187be:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   187c0:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   187c2:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   187c6:	6813      	ldr	r3, [r2, #0]
   187c8:	2b00      	cmp	r3, #0
   187ca:	f47e aff6 	bne.w	177ba <ull_conn_rx+0x9a>
		conn->tx_data_last = tx;
   187ce:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   187d2:	f7fe bff2 	b.w	177ba <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   187d6:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   187da:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   187de:	428b      	cmp	r3, r1
   187e0:	f43f ad61 	beq.w	182a6 <ull_conn_rx+0xb86>
		rej_ext_ind->error_code = rej_ind->error_code;
   187e4:	f895 3020 	ldrb.w	r3, [r5, #32]
   187e8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   187ec:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   187f0:	2800      	cmp	r0, #0
   187f2:	f2c0 825c 	blt.w	18cae <ull_conn_rx+0x158e>
   187f6:	2b1a      	cmp	r3, #26
   187f8:	f000 8337 	beq.w	18e6a <ull_conn_rx+0x174a>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   187fc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   18800:	f003 000f 	and.w	r0, r3, #15
   18804:	2804      	cmp	r0, #4
   18806:	d106      	bne.n	18816 <ull_conn_rx+0x10f6>
	conn_upd_curr = NULL;
   18808:	4896      	ldr	r0, [pc, #600]	; (18a64 <ull_conn_rx+0x1344>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1880a:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1880e:	2100      	movs	r1, #0
   18810:	6001      	str	r1, [r0, #0]
		conn->procedure_expire = 0U;
   18812:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   18816:	06df      	lsls	r7, r3, #27
   18818:	f57e afcf 	bpl.w	177ba <ull_conn_rx+0x9a>
   1881c:	e583      	b.n	18326 <ull_conn_rx+0xc06>
			conn->llcp_conn_param.disabled = 1U;
   1881e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   18822:	f043 0320 	orr.w	r3, r3, #32
   18826:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   1882a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1882e:	2b00      	cmp	r3, #0
   18830:	f2c0 81c6 	blt.w	18bc0 <ull_conn_rx+0x14a0>
				LL_ASSERT(conn->llcp_cu.req ==
   18834:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   18838:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1883c:	429a      	cmp	r2, r3
   1883e:	d00e      	beq.n	1885e <ull_conn_rx+0x113e>
   18840:	4a89      	ldr	r2, [pc, #548]	; (18a68 <ull_conn_rx+0x1348>)
   18842:	498a      	ldr	r1, [pc, #552]	; (18a6c <ull_conn_rx+0x134c>)
   18844:	488a      	ldr	r0, [pc, #552]	; (18a70 <ull_conn_rx+0x1350>)
   18846:	f641 33f5 	movw	r3, #7157	; 0x1bf5
   1884a:	f00f fbad 	bl	27fa8 <printk>
   1884e:	4040      	eors	r0, r0
   18850:	f380 8811 	msr	BASEPRI, r0
   18854:	f04f 0003 	mov.w	r0, #3
   18858:	df02      	svc	2
   1885a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   1885e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   18862:	2106      	movs	r1, #6
   18864:	f361 0203 	bfi	r2, r1, #0, #4
				conn->llcp_cu.ack--;
   18868:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   1886a:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   1886c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   18870:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18874:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   18876:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1887a:	f3c2 1300 	ubfx	r3, r2, #4, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1887e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   18882:	00db      	lsls	r3, r3, #3
   18884:	f022 020f 	bic.w	r2, r2, #15
   18888:	430b      	orrs	r3, r1
   1888a:	4313      	orrs	r3, r2
   1888c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   18890:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   18894:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   18898:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   1889c:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   1889e:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   188a2:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   188a6:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   188aa:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   188ae:	7129      	strb	r1, [r5, #4]
				break;
   188b0:	f7fe bf86 	b.w	177c0 <ull_conn_rx+0xa0>
				      0x03) == 0x02) &&
   188b4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   188b8:	2b03      	cmp	r3, #3
   188ba:	f47f ab38 	bne.w	17f2e <ull_conn_rx+0x80e>
   188be:	f7ff bb2f 	b.w	17f20 <ull_conn_rx+0x800>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   188c2:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   188c4:	2000      	movs	r0, #0
   188c6:	f7fe bf7b 	b.w	177c0 <ull_conn_rx+0xa0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   188ca:	4865      	ldr	r0, [pc, #404]	; (18a60 <ull_conn_rx+0x1340>)
   188cc:	f7f8 fa1a 	bl	10d04 <mem_acquire>
		if (!tx) {
   188d0:	4601      	mov	r1, r0
   188d2:	2800      	cmp	r0, #0
   188d4:	f43f ad7f 	beq.w	183d6 <ull_conn_rx+0xcb6>
		conn->llcp_version.tx = 1U;
   188d8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   188dc:	f043 0301 	orr.w	r3, r3, #1
   188e0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   188e4:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->len =
   188e6:	7146      	strb	r6, [r0, #5]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   188e8:	220c      	movs	r2, #12
   188ea:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   188ec:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   188ee:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   188f2:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   188f6:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   188f8:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   188fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   188fe:	2205      	movs	r2, #5
		v->sub_version_number =
   18900:	72c3      	strb	r3, [r0, #11]
   18902:	7303      	strb	r3, [r0, #12]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   18904:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   18906:	4620      	mov	r0, r4
   18908:	f7fd fe2e 	bl	16568 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1890c:	2301      	movs	r3, #1
   1890e:	712b      	strb	r3, [r5, #4]
   18910:	f7ff bb4f 	b.w	17fb2 <ull_conn_rx+0x892>
		if (!conn->tx_ctrl) {
   18914:	2900      	cmp	r1, #0
   18916:	f47f af4f 	bne.w	187b8 <ull_conn_rx+0x1098>
			tx->next = conn->tx_head;
   1891a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1891c:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   18920:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   18924:	e74f      	b.n	187c6 <ull_conn_rx+0x10a6>
			conn->llcp_length.disabled = 1U;
   18926:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1892a:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1892e:	f043 0308 	orr.w	r3, r3, #8
   18932:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   18936:	f7ff b937 	b.w	17ba8 <ull_conn_rx+0x488>
	    ((pdu_data_tx->llctrl.opcode !=
   1893a:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1893c:	2b03      	cmp	r3, #3
   1893e:	f43f ad6f 	beq.w	18420 <ull_conn_rx+0xd00>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18942:	2b0a      	cmp	r3, #10
   18944:	f47f adb6 	bne.w	184b4 <ull_conn_rx+0xd94>
   18948:	e56a      	b.n	18420 <ull_conn_rx+0xd00>
				nack = reject_ext_ind_send(conn, *rx,
   1894a:	2323      	movs	r3, #35	; 0x23
   1894c:	f7ff b9d0 	b.w	17cf0 <ull_conn_rx+0x5d0>
				nack = reject_ext_ind_send(conn, *rx,
   18950:	231e      	movs	r3, #30
   18952:	2210      	movs	r2, #16
   18954:	f7ff b9cd 	b.w	17cf2 <ull_conn_rx+0x5d2>
				conn->llcp_phy.state =
   18958:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1895c:	4291      	cmp	r1, r2
				conn->llcp_phy.state =
   1895e:	f043 0303 	orr.w	r3, r3, #3
   18962:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   18966:	d111      	bne.n	1898c <ull_conn_rx+0x126c>
					conn->llcp_phy.tx =
   18968:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   1896c:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   18970:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   18972:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   18976:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   1897a:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1897e:	f022 0204 	bic.w	r2, r2, #4
   18982:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   18986:	4313      	orrs	r3, r2
   18988:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   1898c:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   18990:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   18994:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   18998:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1899c:	f003 0203 	and.w	r2, r3, #3
   189a0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   189a4:	4003      	ands	r3, r0
   189a6:	009b      	lsls	r3, r3, #2
   189a8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   189ac:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   189ae:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   189b2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   189b6:	d002      	beq.n	189be <ull_conn_rx+0x129e>
   189b8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   189bc:	d105      	bne.n	189ca <ull_conn_rx+0x12aa>
					conn->llcp_phy.tx = 0;
   189be:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   189c2:	f003 0303 	and.w	r3, r3, #3
   189c6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   189ca:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   189ce:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   189d0:	4313      	orrs	r3, r2
   189d2:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   189d6:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   189d8:	712a      	strb	r2, [r5, #4]
   189da:	f7fe bef1 	b.w	177c0 <ull_conn_rx+0xa0>
   189de:	4649      	mov	r1, r9
   189e0:	e595      	b.n	1850e <ull_conn_rx+0xdee>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   189e2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   189e6:	f36f 0301 	bfc	r3, #0, #2
   189ea:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   189ee:	f7ff bac1 	b.w	17f74 <ull_conn_rx+0x854>
				nack = reject_ext_ind_send(conn, *rx,
   189f2:	2323      	movs	r3, #35	; 0x23
   189f4:	2216      	movs	r2, #22
   189f6:	f7ff b97c 	b.w	17cf2 <ull_conn_rx+0x5d2>
			lll->phy_tx_time = lll->phy_tx;
   189fa:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   189fe:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   18a02:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   18a06:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   18a0a:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   18a0c:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   18a10:	f362 1106 	bfi	r1, r2, #4, #3
   18a14:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   18a18:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   18a1c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   18a20:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18a24:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   18a26:	f000 810f 	beq.w	18c48 <ull_conn_rx+0x1528>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18a2a:	211c      	movs	r1, #28
   18a2c:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   18a2e:	2300      	movs	r3, #0
   18a30:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   18a32:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   18a34:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   18a38:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18a3c:	77ab      	strb	r3, [r5, #30]
   18a3e:	f7ff b8b3 	b.w	17ba8 <ull_conn_rx+0x488>
	conn->llcp_enc.pause_rx = 0U;
   18a42:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   18a46:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   18a4a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   18a4c:	f022 0203 	bic.w	r2, r2, #3
   18a50:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   18a54:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   18a58:	4618      	mov	r0, r3
   18a5a:	f7fe beb1 	b.w	177c0 <ull_conn_rx+0xa0>
   18a5e:	bf00      	nop
   18a60:	20002e98 	.word	0x20002e98
   18a64:	20002e04 	.word	0x20002e04
   18a68:	000305cc 	.word	0x000305cc
   18a6c:	00030700 	.word	0x00030700
   18a70:	0002fedc 	.word	0x0002fedc
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   18a74:	2101      	movs	r1, #1
   18a76:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->c_to_p_phy;
   18a7a:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   18a7e:	f7f8 fb13 	bl	110a8 <util_ones_count_get>
   18a82:	2801      	cmp	r0, #1
   18a84:	f200 80b2 	bhi.w	18bec <ull_conn_rx+0x14cc>
	phy = ind->p_to_c_phy;
   18a88:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   18a8c:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   18a90:	f10d 000f 	add.w	r0, sp, #15
   18a94:	2101      	movs	r1, #1
   18a96:	f7f8 fb07 	bl	110a8 <util_ones_count_get>
   18a9a:	2801      	cmp	r0, #1
   18a9c:	f200 80a6 	bhi.w	18bec <ull_conn_rx+0x14cc>
	instant = sys_le16_to_cpu(ind->instant);
   18aa0:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   18aa2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   18aa4:	1ad3      	subs	r3, r2, r3
   18aa6:	041b      	lsls	r3, r3, #16
   18aa8:	f100 8259 	bmi.w	18f5e <ull_conn_rx+0x183e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18aac:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   18ab0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18ab4:	1a5b      	subs	r3, r3, r1
   18ab6:	f003 0303 	and.w	r3, r3, #3
   18aba:	2b02      	cmp	r3, #2
   18abc:	f000 826e 	beq.w	18f9c <ull_conn_rx+0x187c>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   18ac0:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   18ac4:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   18ac8:	4283      	cmp	r3, r0
   18aca:	d018      	beq.n	18afe <ull_conn_rx+0x13de>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   18acc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   18ad0:	f003 0303 	and.w	r3, r3, #3
   18ad4:	2b02      	cmp	r3, #2
   18ad6:	d112      	bne.n	18afe <ull_conn_rx+0x13de>
		conn->llcp_phy.pause_tx = 0U;
   18ad8:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   18adc:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   18ae0:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18ae4:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   18ae8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18aec:	f3c3 0380 	ubfx	r3, r3, #2, #1
   18af0:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   18af4:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18af6:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   18afa:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->p_to_c_phy;
   18afe:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->c_to_p_phy;
   18b02:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   18b06:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   18b0a:	009b      	lsls	r3, r3, #2
   18b0c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   18b10:	f003 031c 	and.w	r3, r3, #28
   18b14:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   18b18:	f002 0202 	and.w	r2, r2, #2
   18b1c:	4313      	orrs	r3, r2
   18b1e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   18b22:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   18b26:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   18b28:	6833      	ldr	r3, [r6, #0]
   18b2a:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   18b2c:	6832      	ldr	r2, [r6, #0]
   18b2e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   18b32:	2300      	movs	r3, #0
   18b34:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   18b36:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   18b3a:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   18b3c:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   18b3e:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   18b42:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   18b46:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   18b4a:	f43e ae39 	beq.w	177c0 <ull_conn_rx+0xa0>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   18b4e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   18b52:	f3c2 0282 	ubfx	r2, r2, #2, #3
   18b56:	f362 1106 	bfi	r1, r2, #4, #3
   18b5a:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   18b5e:	4618      	mov	r0, r3
   18b60:	f7fe be2e 	b.w	177c0 <ull_conn_rx+0xa0>
			conn->procedure_expire = 0U;
   18b64:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18b66:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   18b68:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   18b6c:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18b70:	f000 80b4 	beq.w	18cdc <ull_conn_rx+0x15bc>
			conn->lll.max_rx_time = eff_rx_time;
   18b74:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   18b78:	2b00      	cmp	r3, #0
   18b7a:	f000 8151 	beq.w	18e20 <ull_conn_rx+0x1700>
					(conn->llcp_length.req - 1);
   18b7e:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   18b80:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   18b84:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   18b88:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   18b8c:	2603      	movs	r6, #3
   18b8e:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   18b92:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   18b96:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   18b9a:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   18b9e:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   18ba2:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   18ba6:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   18ba8:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   18bac:	84e8      	strh	r0, [r5, #38]	; 0x26
   18bae:	e4e5      	b.n	1857c <ull_conn_rx+0xe5c>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18bb0:	2301      	movs	r3, #1
   18bb2:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   18bb4:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_final = err;
   18bb6:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   18bba:	2000      	movs	r0, #0
   18bbc:	f7fe be00 	b.w	177c0 <ull_conn_rx+0xa0>
	conn_upd_curr = NULL;
   18bc0:	4bd0      	ldr	r3, [pc, #832]	; (18f04 <ull_conn_rx+0x17e4>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18bc2:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   18bc6:	2100      	movs	r1, #0
   18bc8:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   18bca:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   18bce:	f013 0310 	ands.w	r3, r3, #16
   18bd2:	d146      	bne.n	18c62 <ull_conn_rx+0x1542>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18bd4:	2201      	movs	r2, #1
   18bd6:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   18bd8:	4618      	mov	r0, r3
				break;
   18bda:	f7fe bdf1 	b.w	177c0 <ull_conn_rx+0xa0>
		conn_upd_curr = conn;
   18bde:	601c      	str	r4, [r3, #0]
   18be0:	f7fe bf97 	b.w	17b12 <ull_conn_rx+0x3f2>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   18be4:	2301      	movs	r3, #1
   18be6:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   18be8:	232a      	movs	r3, #42	; 0x2a
   18bea:	e7e4      	b.n	18bb6 <ull_conn_rx+0x1496>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18bec:	6833      	ldr	r3, [r6, #0]
   18bee:	2201      	movs	r2, #1
   18bf0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   18bf2:	231e      	movs	r3, #30
   18bf4:	e7df      	b.n	18bb6 <ull_conn_rx+0x1496>
	LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18bf6:	4ac4      	ldr	r2, [pc, #784]	; (18f08 <ull_conn_rx+0x17e8>)
   18bf8:	49c4      	ldr	r1, [pc, #784]	; (18f0c <ull_conn_rx+0x17ec>)
   18bfa:	48c5      	ldr	r0, [pc, #788]	; (18f10 <ull_conn_rx+0x17f0>)
   18bfc:	f44f 53a7 	mov.w	r3, #5344	; 0x14e0
   18c00:	f00f f9d2 	bl	27fa8 <printk>
   18c04:	4040      	eors	r0, r0
   18c06:	f380 8811 	msr	BASEPRI, r0
   18c0a:	f04f 0003 	mov.w	r0, #3
   18c0e:	df02      	svc	2
   18c10:	f7ff bb8e 	b.w	18330 <ull_conn_rx+0xc10>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   18c14:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   18c18:	3202      	adds	r2, #2
   18c1a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   18c1e:	2b00      	cmp	r3, #0
   18c20:	f040 80f0 	bne.w	18e04 <ull_conn_rx+0x16e4>
			conn->periph.llcp_type = conn->llcp_type;
   18c24:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   18c28:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   18c2c:	f7fe be69 	b.w	17902 <ull_conn_rx+0x1e2>
				conn->llcp_length.state =
   18c30:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   18c34:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   18c38:	2504      	movs	r5, #4
   18c3a:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   18c3e:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   18c42:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   18c46:	e48f      	b.n	18568 <ull_conn_rx+0xe48>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18c48:	2201      	movs	r2, #1
   18c4a:	711a      	strb	r2, [r3, #4]
   18c4c:	f7fe bfac 	b.w	17ba8 <ull_conn_rx+0x488>
				      0x03) == 0x02) &&
   18c50:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   18c54:	2a03      	cmp	r2, #3
   18c56:	f47f ac15 	bne.w	18484 <ull_conn_rx+0xd64>
   18c5a:	e40c      	b.n	18476 <ull_conn_rx+0xd56>
	struct node_tx *tx = NULL;
   18c5c:	2300      	movs	r3, #0
   18c5e:	f7fe bee4 	b.w	17a2a <ull_conn_rx+0x30a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   18c62:	2318      	movs	r3, #24
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18c64:	07d2      	lsls	r2, r2, #31
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   18c66:	712b      	strb	r3, [r5, #4]
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18c68:	f100 80e8 	bmi.w	18e3c <ull_conn_rx+0x171c>
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   18c6c:	231a      	movs	r3, #26
   18c6e:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   18c70:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   18c72:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   18c76:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   18c78:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   18c7a:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   18c7e:	227d      	movs	r2, #125	; 0x7d
   18c80:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   18c84:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   18c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18c8a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   18c8e:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   18c90:	f7fe bf8a 	b.w	17ba8 <ull_conn_rx+0x488>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   18c94:	6832      	ldr	r2, [r6, #0]
   18c96:	201c      	movs	r0, #28
   18c98:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   18c9a:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   18c9c:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   18c9e:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   18ca2:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   18ca4:	f3c2 0302 	ubfx	r3, r2, #0, #3
   18ca8:	77ab      	strb	r3, [r5, #30]
		if (err) {
   18caa:	f7fe bd89 	b.w	177c0 <ull_conn_rx+0xa0>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18cae:	2b23      	cmp	r3, #35	; 0x23
   18cb0:	f43f ada4 	beq.w	187fc <ull_conn_rx+0x10dc>
			conn->periph.ticks_to_offset =
   18cb4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   18cb8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   18cbc:	e59e      	b.n	187fc <ull_conn_rx+0x10dc>
			conn->tx_data = conn->tx_data->next;
   18cbe:	6811      	ldr	r1, [r2, #0]
   18cc0:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18cc4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18cc8:	2900      	cmp	r1, #0
   18cca:	f47f aa6a 	bne.w	181a2 <ull_conn_rx+0xa82>
			tx->next = conn->tx_head->next;
   18cce:	6811      	ldr	r1, [r2, #0]
   18cd0:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18cd2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18cd4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   18cd8:	f7ff ba6a 	b.w	181b0 <ull_conn_rx+0xa90>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   18cdc:	4558      	cmp	r0, fp
   18cde:	f47f af49 	bne.w	18b74 <ull_conn_rx+0x1454>
			    eff_rx_time == conn->lll.max_rx_time &&
   18ce2:	45d4      	cmp	ip, sl
   18ce4:	f47f af46 	bne.w	18b74 <ull_conn_rx+0x1454>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18ce8:	6832      	ldr	r2, [r6, #0]
   18cea:	2501      	movs	r5, #1
   18cec:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   18cee:	e445      	b.n	1857c <ull_conn_rx+0xe5c>
				uint16_t interval_min =
   18cf0:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   18cf4:	fa1f f289 	uxth.w	r2, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   18cf8:	2a05      	cmp	r2, #5
   18cfa:	f67f ace3 	bls.w	186c4 <ull_conn_rx+0xfa4>
				uint16_t interval_max =
   18cfe:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   18d02:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   18d06:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   18d0a:	f63f acdb 	bhi.w	186c4 <ull_conn_rx+0xfa4>
				    (interval_max > 3200) ||
   18d0e:	4572      	cmp	r2, lr
   18d10:	f63f acd8 	bhi.w	186c4 <ull_conn_rx+0xfa4>
				uint16_t latency =
   18d14:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   18d16:	b2be      	uxth	r6, r7
				    (interval_min > interval_max) ||
   18d18:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   18d1c:	f4bf acd2 	bcs.w	186c4 <ull_conn_rx+0xfa4>
				uint16_t timeout =
   18d20:	8cea      	ldrh	r2, [r5, #38]	; 0x26
   18d22:	f8ad 2006 	strh.w	r2, [sp, #6]
   18d26:	b292      	uxth	r2, r2
				    (latency > 499) ||
   18d28:	f1a2 0a0a 	sub.w	sl, r2, #10
   18d2c:	f640 4b76 	movw	fp, #3190	; 0xc76
   18d30:	fa1f fa8a 	uxth.w	sl, sl
   18d34:	45da      	cmp	sl, fp
   18d36:	f63f acc5 	bhi.w	186c4 <ull_conn_rx+0xfa4>
				     ((latency + 1) * interval_max)) ||
   18d3a:	f106 0a01 	add.w	sl, r6, #1
   18d3e:	fa1f fa8a 	uxth.w	sl, sl
   18d42:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   18d46:	ebba 0f82 	cmp.w	sl, r2, lsl #2
   18d4a:	f4bf acbb 	bcs.w	186c4 <ull_conn_rx+0xfa4>
				     ((latency + 1) * interval_max)) ||
   18d4e:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   18d52:	45de      	cmp	lr, fp
   18d54:	f4ff acb6 	bcc.w	186c4 <ull_conn_rx+0xfa4>
				conn->llcp_conn_param.latency =	latency;
   18d58:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   18d5c:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   18d60:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   18d64:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   18d68:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   18d6c:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   18d70:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   18d74:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   18d78:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   18d7c:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   18d80:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   18d84:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   18d88:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   18d8c:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   18d90:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   18d94:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   18d98:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   18d9c:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   18da0:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   18da4:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   18da8:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   18dac:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   18db0:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   18db4:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   18db8:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   18dbc:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   18dc0:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   18dc4:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   18dc8:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   18dcc:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   18dd0:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   18dd4:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   18dd8:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   18ddc:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   18de0:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   18de2:	45be      	cmp	lr, r7
   18de4:	f000 80df 	beq.w	18fa6 <ull_conn_rx+0x1886>
					if (conn->llcp_enc.pause_tx) {
   18de8:	f01c 0f02 	tst.w	ip, #2
						conn->llcp_conn_param.state =
   18dec:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   18df0:	f43f ac59 	beq.w	186a6 <ull_conn_rx+0xf86>
						conn->llcp_conn_param.state =
   18df4:	2602      	movs	r6, #2
   18df6:	f366 0203 	bfi	r2, r6, #0, #4
   18dfa:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   18dfe:	2201      	movs	r2, #1
   18e00:	712a      	strb	r2, [r5, #4]
   18e02:	e455      	b.n	186b0 <ull_conn_rx+0xf90>
			LL_ASSERT(conn->periph.llcp_type == LLCP_NONE);
   18e04:	4a40      	ldr	r2, [pc, #256]	; (18f08 <ull_conn_rx+0x17e8>)
   18e06:	4943      	ldr	r1, [pc, #268]	; (18f14 <ull_conn_rx+0x17f4>)
   18e08:	4841      	ldr	r0, [pc, #260]	; (18f10 <ull_conn_rx+0x17f0>)
   18e0a:	f641 13ad 	movw	r3, #6573	; 0x19ad
   18e0e:	f00f f8cb 	bl	27fa8 <printk>
   18e12:	4040      	eors	r0, r0
   18e14:	f380 8811 	msr	BASEPRI, r0
   18e18:	f04f 0003 	mov.w	r0, #3
   18e1c:	df02      	svc	2
   18e1e:	e701      	b.n	18c24 <ull_conn_rx+0x1504>
				conn->lll.max_tx_octets = eff_tx_octets;
   18e20:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   18e24:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   18e28:	e6bb      	b.n	18ba2 <ull_conn_rx+0x1482>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18e2a:	7911      	ldrb	r1, [r2, #4]
   18e2c:	f001 0103 	and.w	r1, r1, #3
   18e30:	2903      	cmp	r1, #3
   18e32:	d060      	beq.n	18ef6 <ull_conn_rx+0x17d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   18e34:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   18e38:	f7ff b9b3 	b.w	181a2 <ull_conn_rx+0xa82>
			LL_ASSERT(IS_PTR_ALIGNED(node, struct node_rx_cu));
   18e3c:	4a32      	ldr	r2, [pc, #200]	; (18f08 <ull_conn_rx+0x17e8>)
   18e3e:	4933      	ldr	r1, [pc, #204]	; (18f0c <ull_conn_rx+0x17ec>)
   18e40:	4833      	ldr	r0, [pc, #204]	; (18f10 <ull_conn_rx+0x17f0>)
   18e42:	f641 4322 	movw	r3, #7202	; 0x1c22
   18e46:	f00f f8af 	bl	27fa8 <printk>
   18e4a:	4040      	eors	r0, r0
   18e4c:	f380 8811 	msr	BASEPRI, r0
   18e50:	f04f 0003 	mov.w	r0, #3
   18e54:	df02      	svc	2
   18e56:	e709      	b.n	18c6c <ull_conn_rx+0x154c>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   18e58:	2923      	cmp	r1, #35	; 0x23
   18e5a:	f43f aa54 	beq.w	18306 <ull_conn_rx+0xbe6>
			conn->periph.ticks_to_offset =
   18e5e:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   18e62:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
   18e66:	f7ff ba4e 	b.w	18306 <ull_conn_rx+0xbe6>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   18e6a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   18e6e:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   18e72:	429a      	cmp	r2, r3
   18e74:	d00e      	beq.n	18e94 <ull_conn_rx+0x1774>
   18e76:	4a24      	ldr	r2, [pc, #144]	; (18f08 <ull_conn_rx+0x17e8>)
   18e78:	4927      	ldr	r1, [pc, #156]	; (18f18 <ull_conn_rx+0x17f8>)
   18e7a:	4825      	ldr	r0, [pc, #148]	; (18f10 <ull_conn_rx+0x17f0>)
   18e7c:	f241 43af 	movw	r3, #5295	; 0x14af
   18e80:	f00f f892 	bl	27fa8 <printk>
   18e84:	4040      	eors	r0, r0
   18e86:	f380 8811 	msr	BASEPRI, r0
   18e8a:	f04f 0003 	mov.w	r0, #3
   18e8e:	df02      	svc	2
   18e90:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18e94:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   18e98:	2106      	movs	r1, #6
   18e9a:	f361 0203 	bfi	r2, r1, #0, #4
		conn->llcp_cu.ack--;
   18e9e:	3b01      	subs	r3, #1
   18ea0:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18ea4:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   18ea8:	f3c2 1300 	ubfx	r3, r2, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18eac:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   18eb0:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18eb2:	00db      	lsls	r3, r3, #3
   18eb4:	430b      	orrs	r3, r1
   18eb6:	f022 020f 	bic.w	r2, r2, #15
   18eba:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   18ebc:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18ec0:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   18ec4:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   18ec8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   18ecc:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18ece:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   18ed2:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   18ed6:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18eda:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18ede:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   18ee2:	f7fe bc6a 	b.w	177ba <ull_conn_rx+0x9a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   18ee6:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   18eea:	f011 0f06 	tst.w	r1, #6
   18eee:	f43f ab05 	beq.w	184fc <ull_conn_rx+0xddc>
   18ef2:	f7fe bd93 	b.w	17a1c <ull_conn_rx+0x2fc>
	    ((pdu_data_tx->llctrl.opcode !=
   18ef6:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18ef8:	2903      	cmp	r1, #3
   18efa:	f43f aee8 	beq.w	18cce <ull_conn_rx+0x15ae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18efe:	290a      	cmp	r1, #10
   18f00:	d198      	bne.n	18e34 <ull_conn_rx+0x1714>
   18f02:	e6e4      	b.n	18cce <ull_conn_rx+0x15ae>
   18f04:	20002e04 	.word	0x20002e04
   18f08:	000305cc 	.word	0x000305cc
   18f0c:	00030144 	.word	0x00030144
   18f10:	0002fedc 	.word	0x0002fedc
   18f14:	000306dc 	.word	0x000306dc
   18f18:	00030700 	.word	0x00030700
			     lll->interval) ||
   18f1c:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   18f1e:	4567      	cmp	r7, ip
   18f20:	f47f abbf 	bne.w	186a2 <ull_conn_rx+0xf82>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18f24:	f240 47e2 	movw	r7, #1250	; 0x4e2
   18f28:	fb07 f606 	mul.w	r6, r7, r6
   18f2c:	f242 7710 	movw	r7, #10000	; 0x2710
   18f30:	fb07 6202 	mla	r2, r7, r2, r6
   18f34:	3a01      	subs	r2, #1
   18f36:	fbb2 f2f6 	udiv	r2, r2, r6
			    (conn->llcp_conn_param.latency != lll->latency) ||
   18f3a:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   18f3e:	b292      	uxth	r2, r2
   18f40:	4296      	cmp	r6, r2
   18f42:	f47f abae 	bne.w	186a2 <ull_conn_rx+0xf82>
				conn->llcp_conn_param.state =
   18f46:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   18f4a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
   18f4e:	f042 0201 	orr.w	r2, r2, #1
   18f52:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18f56:	2201      	movs	r2, #1
   18f58:	712a      	strb	r2, [r5, #4]
   18f5a:	f7ff bba9 	b.w	186b0 <ull_conn_rx+0xf90>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18f5e:	6833      	ldr	r3, [r6, #0]
   18f60:	2201      	movs	r2, #1
   18f62:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   18f64:	2328      	movs	r3, #40	; 0x28
   18f66:	e626      	b.n	18bb6 <ull_conn_rx+0x1496>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18f68:	7919      	ldrb	r1, [r3, #4]
   18f6a:	f001 0103 	and.w	r1, r1, #3
   18f6e:	2903      	cmp	r1, #3
   18f70:	d00e      	beq.n	18f90 <ull_conn_rx+0x1870>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   18f72:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   18f76:	e41f      	b.n	187b8 <ull_conn_rx+0x1098>
			conn->tx_data = conn->tx_data->next;
   18f78:	6818      	ldr	r0, [r3, #0]
   18f7a:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   18f7e:	2900      	cmp	r1, #0
   18f80:	f47f ac1a 	bne.w	187b8 <ull_conn_rx+0x1098>
			tx->next = conn->tx_head->next;
   18f84:	6819      	ldr	r1, [r3, #0]
   18f86:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   18f88:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   18f8a:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   18f8e:	e41a      	b.n	187c6 <ull_conn_rx+0x10a6>
	    ((pdu_data_tx->llctrl.opcode !=
   18f90:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   18f92:	2903      	cmp	r1, #3
   18f94:	d0f6      	beq.n	18f84 <ull_conn_rx+0x1864>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   18f96:	290a      	cmp	r1, #10
   18f98:	d1eb      	bne.n	18f72 <ull_conn_rx+0x1852>
   18f9a:	e7f3      	b.n	18f84 <ull_conn_rx+0x1864>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   18f9c:	6833      	ldr	r3, [r6, #0]
   18f9e:	2201      	movs	r2, #1
   18fa0:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   18fa2:	232a      	movs	r3, #42	; 0x2a
   18fa4:	e607      	b.n	18bb6 <ull_conn_rx+0x1496>
				     lll->interval) ||
   18fa6:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   18faa:	45b6      	cmp	lr, r6
   18fac:	f47f af1c 	bne.w	18de8 <ull_conn_rx+0x16c8>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   18fb0:	f240 46e2 	movw	r6, #1250	; 0x4e2
   18fb4:	fb07 f606 	mul.w	r6, r7, r6
   18fb8:	f242 7710 	movw	r7, #10000	; 0x2710
   18fbc:	fb07 6202 	mla	r2, r7, r2, r6
   18fc0:	3a01      	subs	r2, #1
   18fc2:	fbb2 f2f6 	udiv	r2, r2, r6
				     lll->latency) ||
   18fc6:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   18fca:	b292      	uxth	r2, r2
   18fcc:	4296      	cmp	r6, r2
   18fce:	f47f af0b 	bne.w	18de8 <ull_conn_rx+0x16c8>
   18fd2:	e7b8      	b.n	18f46 <ull_conn_rx+0x1826>

00018fd4 <ull_conn_llcp>:
{
   18fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18fd8:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   18fda:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   18fde:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   18fe2:	4298      	cmp	r0, r3
{
   18fe4:	460d      	mov	r5, r1
   18fe6:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   18fe8:	f000 8093 	beq.w	19112 <ull_conn_llcp+0x13e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18fec:	1a1b      	subs	r3, r3, r0
   18fee:	f003 0303 	and.w	r3, r3, #3
   18ff2:	2b02      	cmp	r3, #2
   18ff4:	d011      	beq.n	1901a <ull_conn_llcp+0x46>
   18ff6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   18ffa:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   18ffc:	f1bc 0f00 	cmp.w	ip, #0
   19000:	db6c      	blt.n	190dc <ull_conn_llcp+0x108>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   19002:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   19006:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1900a:	1a9b      	subs	r3, r3, r2
   1900c:	b2db      	uxtb	r3, r3
   1900e:	2b01      	cmp	r3, #1
   19010:	f000 80aa 	beq.w	19168 <ull_conn_llcp+0x194>
	return 0;
   19014:	2000      	movs	r0, #0
}
   19016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1901a:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   1901e:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   19022:	429a      	cmp	r2, r3
   19024:	d006      	beq.n	19034 <ull_conn_llcp+0x60>
			     LLCP_LENGTH_STATE_RESIZE) ||
   19026:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   1902a:	f003 0306 	and.w	r3, r3, #6
   1902e:	2b04      	cmp	r3, #4
   19030:	f000 823c 	beq.w	194ac <ull_conn_llcp+0x4d8>
		switch (conn->llcp_type) {
   19034:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   19038:	1e7b      	subs	r3, r7, #1
   1903a:	2b05      	cmp	r3, #5
   1903c:	f200 8220 	bhi.w	19480 <ull_conn_llcp+0x4ac>
   19040:	e8df f013 	tbh	[pc, r3, lsl #1]
   19044:	01bc0087 	.word	0x01bc0087
   19048:	021e0135 	.word	0x021e0135
   1904c:	00ef00fa 	.word	0x00ef00fa
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   19050:	7903      	ldrb	r3, [r0, #4]
   19052:	f043 0303 	orr.w	r3, r3, #3
   19056:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   19058:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1905c:	07db      	lsls	r3, r3, #31
   1905e:	f140 8792 	bpl.w	19f86 <ull_conn_llcp+0xfb2>
	    (conn->llcp_feature.features_conn &
   19062:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   19066:	0758      	lsls	r0, r3, #29
   19068:	f140 878d 	bpl.w	19f86 <ull_conn_llcp+0xfb2>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1906c:	2311      	movs	r3, #17
   1906e:	f889 3007 	strb.w	r3, [r9, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   19072:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   19074:	f889 8009 	strb.w	r8, [r9, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   19078:	f889 3008 	strb.w	r3, [r9, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   1907c:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   19080:	2300      	movs	r3, #0
   19082:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   19086:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1908a:	2b00      	cmp	r3, #0
   1908c:	f000 8760 	beq.w	19f50 <ull_conn_llcp+0xf7c>
	    !conn->llcp_enc.pause_tx &&
   19090:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19094:	0791      	lsls	r1, r2, #30
   19096:	f100 875b 	bmi.w	19f50 <ull_conn_llcp+0xf7c>
	    !conn->llcp_phy.pause_tx &&
   1909a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1909e:	07d2      	lsls	r2, r2, #31
   190a0:	f100 8756 	bmi.w	19f50 <ull_conn_llcp+0xf7c>
		if (conn->tx_head == conn->tx_data) {
   190a4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   190a8:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   190aa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   190ae:	f001 8151 	beq.w	1a354 <ull_conn_llcp+0x1380>
		} else if (!conn->tx_ctrl) {
   190b2:	2a00      	cmp	r2, #0
   190b4:	f001 81dd 	beq.w	1a472 <ull_conn_llcp+0x149e>
	tx->next = conn->tx_ctrl_last->next;
   190b8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   190bc:	681a      	ldr	r2, [r3, #0]
   190be:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   190c2:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   190c6:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   190ca:	f8d9 3000 	ldr.w	r3, [r9]
   190ce:	2b00      	cmp	r3, #0
   190d0:	f000 8799 	beq.w	1a006 <ull_conn_llcp+0x1032>
			conn->llcp_ack = conn->llcp_req;
   190d4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   190d8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   190dc:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   190e0:	2b00      	cmp	r3, #0
   190e2:	d08e      	beq.n	19002 <ull_conn_llcp+0x2e>
		switch (conn->periph.llcp_type) {
   190e4:	2b02      	cmp	r3, #2
   190e6:	f000 81a3 	beq.w	19430 <ull_conn_llcp+0x45c>
   190ea:	2b06      	cmp	r3, #6
   190ec:	f000 8087 	beq.w	191fe <ull_conn_llcp+0x22a>
   190f0:	2b01      	cmp	r3, #1
   190f2:	f000 808d 	beq.w	19210 <ull_conn_llcp+0x23c>
			LL_ASSERT(0);
   190f6:	4aca      	ldr	r2, [pc, #808]	; (19420 <ull_conn_llcp+0x44c>)
   190f8:	49ca      	ldr	r1, [pc, #808]	; (19424 <ull_conn_llcp+0x450>)
   190fa:	48cb      	ldr	r0, [pc, #812]	; (19428 <ull_conn_llcp+0x454>)
   190fc:	f240 5312 	movw	r3, #1298	; 0x512
   19100:	f00e ff52 	bl	27fa8 <printk>
   19104:	4040      	eors	r0, r0
   19106:	f380 8811 	msr	BASEPRI, r0
   1910a:	f04f 0003 	mov.w	r0, #3
   1910e:	df02      	svc	2
			break;
   19110:	e777      	b.n	19002 <ull_conn_llcp+0x2e>
   19112:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   19116:	2a00      	cmp	r2, #0
   19118:	4694      	mov	ip, r2
   1911a:	f2c0 81c1 	blt.w	194a0 <ull_conn_llcp+0x4cc>
	    !conn->llcp_enc.pause_rx) {
   1911e:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   19122:	f011 0801 	ands.w	r8, r1, #1
   19126:	f47f af69 	bne.w	18ffc <ull_conn_llcp+0x28>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1912a:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   1912e:	f894 710c 	ldrb.w	r7, [r4, #268]	; 0x10c
   19132:	454f      	cmp	r7, r9
   19134:	f000 82f0 	beq.w	19718 <ull_conn_llcp+0x744>
			conn->llcp_type = LLCP_CONN_UPD;
   19138:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   1913a:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   1913c:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   19140:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   19144:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   19148:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1914c:	429a      	cmp	r2, r3
   1914e:	f47f af6a 	bne.w	19026 <ull_conn_llcp+0x52>
			if (event_conn_upd_prep(conn, lazy,
   19152:	462a      	mov	r2, r5
   19154:	4631      	mov	r1, r6
   19156:	4620      	mov	r0, r4
   19158:	f7e8 feea 	bl	1f30 <event_conn_upd_prep>
   1915c:	2800      	cmp	r0, #0
   1915e:	f040 819c 	bne.w	1949a <ull_conn_llcp+0x4c6>
				return -ECANCELED;
   19162:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   19166:	e756      	b.n	19016 <ull_conn_llcp+0x42>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19168:	48b0      	ldr	r0, [pc, #704]	; (1942c <ull_conn_llcp+0x458>)
   1916a:	f7f7 fdcb 	bl	10d04 <mem_acquire>
		if (tx) {
   1916e:	2800      	cmp	r0, #0
   19170:	d038      	beq.n	191e4 <ull_conn_llcp+0x210>
			conn->llcp_terminate.ack--;
   19172:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   19176:	3b01      	subs	r3, #1
   19178:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1917c:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1917e:	2202      	movs	r2, #2
   19180:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   19182:	f043 0303 	orr.w	r3, r3, #3
   19186:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   19188:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1918a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1918e:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
		if (!conn->tx_ctrl) {
   19192:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
			pdu_tx->llctrl.terminate_ind.error_code =
   19196:	7202      	strb	r2, [r0, #8]
	if (
   19198:	b1b3      	cbz	r3, 191c8 <ull_conn_llcp+0x1f4>
	    !conn->llcp_enc.pause_tx &&
   1919a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1919e:	0795      	lsls	r5, r2, #30
   191a0:	d412      	bmi.n	191c8 <ull_conn_llcp+0x1f4>
	    !conn->llcp_phy.pause_tx &&
   191a2:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   191a6:	07d2      	lsls	r2, r2, #31
   191a8:	d40e      	bmi.n	191c8 <ull_conn_llcp+0x1f4>
		if (conn->tx_head == conn->tx_data) {
   191aa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   191ae:	4293      	cmp	r3, r2
   191b0:	f000 85ae 	beq.w	19d10 <ull_conn_llcp+0xd3c>
		} else if (!conn->tx_ctrl) {
   191b4:	b959      	cbnz	r1, 191ce <ull_conn_llcp+0x1fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   191b6:	791a      	ldrb	r2, [r3, #4]
   191b8:	f002 0203 	and.w	r2, r2, #3
   191bc:	2a03      	cmp	r2, #3
   191be:	f000 86f4 	beq.w	19faa <ull_conn_llcp+0xfd6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   191c2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   191c6:	e004      	b.n	191d2 <ull_conn_llcp+0x1fe>
		if (!conn->tx_ctrl) {
   191c8:	2900      	cmp	r1, #0
   191ca:	f000 82f5 	beq.w	197b8 <ull_conn_llcp+0x7e4>
	tx->next = conn->tx_ctrl_last->next;
   191ce:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   191d2:	681a      	ldr	r2, [r3, #0]
   191d4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   191d6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   191d8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   191da:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   191de:	2b00      	cmp	r3, #0
   191e0:	f000 8168 	beq.w	194b4 <ull_conn_llcp+0x4e0>
		if (!conn->procedure_expire) {
   191e4:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   191e8:	2800      	cmp	r0, #0
   191ea:	f47f af13 	bne.w	19014 <ull_conn_llcp+0x40>
			conn->procedure_expire = conn->supervision_reload;
   191ee:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   191f2:	2b01      	cmp	r3, #1
   191f4:	f240 82dc 	bls.w	197b0 <ull_conn_llcp+0x7dc>
			conn->procedure_expire = conn->supervision_reload;
   191f8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   191fc:	e70a      	b.n	19014 <ull_conn_llcp+0x40>
			event_counter = lll->event_counter +
   191fe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   19200:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   19202:	440a      	add	r2, r1
   19204:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   19206:	4620      	mov	r0, r4
   19208:	b291      	uxth	r1, r2
   1920a:	f7fd fd1d 	bl	16c48 <event_phy_upd_ind_prep>
		break;
   1920e:	e6f8      	b.n	19002 <ull_conn_llcp+0x2e>
			if (event_conn_upd_prep(conn, lazy,
   19210:	462a      	mov	r2, r5
   19212:	4631      	mov	r1, r6
   19214:	4620      	mov	r0, r4
   19216:	f7e8 fe8b 	bl	1f30 <event_conn_upd_prep>
   1921a:	2800      	cmp	r0, #0
   1921c:	f47f aef1 	bne.w	19002 <ull_conn_llcp+0x2e>
   19220:	e79f      	b.n	19162 <ull_conn_llcp+0x18e>
			event_counter = lll->event_counter +
   19222:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   19224:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   19226:	4419      	add	r1, r3
   19228:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1922a:	b289      	uxth	r1, r1
   1922c:	4620      	mov	r0, r4
   1922e:	f7fd fd0b 	bl	16c48 <event_phy_upd_ind_prep>
		break;
   19232:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   19236:	e6e1      	b.n	18ffc <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19238:	487c      	ldr	r0, [pc, #496]	; (1942c <ull_conn_llcp+0x458>)
   1923a:	f7f7 fd63 	bl	10d04 <mem_acquire>
	if (tx) {
   1923e:	2800      	cmp	r0, #0
   19240:	f000 812b 	beq.w	1949a <ull_conn_llcp+0x4c6>
		conn->llcp_ack = conn->llcp_req;
   19244:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   19248:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1924c:	7903      	ldrb	r3, [r0, #4]
   1924e:	f043 0303 	orr.w	r3, r3, #3
   19252:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   19254:	2301      	movs	r3, #1
   19256:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   19258:	2312      	movs	r3, #18
   1925a:	71c3      	strb	r3, [r0, #7]
		if (!conn->tx_ctrl) {
   1925c:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
	if (
   19260:	2b00      	cmp	r3, #0
   19262:	f000 82bb 	beq.w	197dc <ull_conn_llcp+0x808>
	    !conn->llcp_enc.pause_tx &&
   19266:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1926a:	078f      	lsls	r7, r1, #30
   1926c:	f100 82b6 	bmi.w	197dc <ull_conn_llcp+0x808>
	    !conn->llcp_phy.pause_tx &&
   19270:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   19274:	07c9      	lsls	r1, r1, #31
   19276:	f100 82b1 	bmi.w	197dc <ull_conn_llcp+0x808>
		if (conn->tx_head == conn->tx_data) {
   1927a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1927e:	428b      	cmp	r3, r1
   19280:	f000 8673 	beq.w	19f6a <ull_conn_llcp+0xf96>
		} else if (!conn->tx_ctrl) {
   19284:	2a00      	cmp	r2, #0
   19286:	f000 86b4 	beq.w	19ff2 <ull_conn_llcp+0x101e>
	tx->next = conn->tx_ctrl_last->next;
   1928a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1928e:	681a      	ldr	r2, [r3, #0]
   19290:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19292:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19294:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   19296:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1929a:	2b00      	cmp	r3, #0
   1929c:	f000 8435 	beq.w	19b0a <ull_conn_llcp+0xb36>
		conn->procedure_expire = conn->procedure_reload;
   192a0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   192a4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   192a8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   192ac:	e6a6      	b.n	18ffc <ull_conn_llcp+0x28>
	if (conn->llcp.encryption.state) {
   192ae:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
   192b2:	f012 0803 	ands.w	r8, r2, #3
   192b6:	f000 814b 	beq.w	19550 <ull_conn_llcp+0x57c>
		if (lll->role &&
   192ba:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   192be:	2b00      	cmp	r3, #0
   192c0:	f6bf ae9f 	bge.w	19002 <ull_conn_llcp+0x2e>
   192c4:	f1b8 0f01 	cmp.w	r8, #1
   192c8:	f47f af08 	bne.w	190dc <ull_conn_llcp+0x108>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   192cc:	4857      	ldr	r0, [pc, #348]	; (1942c <ull_conn_llcp+0x458>)
   192ce:	f7f7 fd19 	bl	10d04 <mem_acquire>
	if (!tx) {
   192d2:	4680      	mov	r8, r0
   192d4:	2800      	cmp	r0, #0
   192d6:	f000 80e0 	beq.w	1949a <ull_conn_llcp+0x4c6>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   192da:	7903      	ldrb	r3, [r0, #4]
   192dc:	f043 0303 	orr.w	r3, r3, #3
   192e0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   192e2:	230d      	movs	r3, #13
   192e4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   192e6:	2304      	movs	r3, #4
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   192e8:	eb00 0903 	add.w	r9, r0, r3
   192ec:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   192f0:	71c3      	strb	r3, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   192f2:	210c      	movs	r1, #12
   192f4:	4638      	mov	r0, r7
   192f6:	f004 f893 	bl	1d420 <lll_csrand_isr_get>
   192fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   192fe:	f8d8 200c 	ldr.w	r2, [r8, #12]
   19302:	f8c4 2102 	str.w	r2, [r4, #258]	; 0x102
   19306:	f8c4 30fe 	str.w	r3, [r4, #254]	; 0xfe
   1930a:	f8d8 3010 	ldr.w	r3, [r8, #16]
   1930e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	    conn->tx_head &&
   19312:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19316:	2b00      	cmp	r3, #0
   19318:	f000 84ed 	beq.w	19cf6 <ull_conn_llcp+0xd22>
	    !conn->llcp_enc.pause_tx &&
   1931c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19320:	0792      	lsls	r2, r2, #30
   19322:	f100 84e8 	bmi.w	19cf6 <ull_conn_llcp+0xd22>
	    !conn->llcp_phy.pause_tx &&
   19326:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1932a:	07d7      	lsls	r7, r2, #31
   1932c:	f100 84e3 	bmi.w	19cf6 <ull_conn_llcp+0xd22>
		if (conn->tx_head == conn->tx_data) {
   19330:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19334:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19338:	428b      	cmp	r3, r1
   1933a:	f000 8672 	beq.w	1a022 <ull_conn_llcp+0x104e>
		} else if (!conn->tx_ctrl) {
   1933e:	2a00      	cmp	r2, #0
   19340:	f000 86b1 	beq.w	1a0a6 <ull_conn_llcp+0x10d2>
	tx->next = conn->tx_ctrl_last->next;
   19344:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19348:	681a      	ldr	r2, [r3, #0]
   1934a:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1934e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   19352:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   19356:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1935a:	2b00      	cmp	r3, #0
   1935c:	f000 85d4 	beq.w	19f08 <ull_conn_llcp+0xf34>
			rx = ll_pdu_rx_alloc();
   19360:	f7fb fc9a 	bl	14c98 <ll_pdu_rx_alloc>
			if (!rx) {
   19364:	4601      	mov	r1, r0
   19366:	2800      	cmp	r0, #0
   19368:	f000 8097 	beq.w	1949a <ull_conn_llcp+0x4c6>
			rx->hdr.handle = conn->lll.handle;
   1936c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1936e:	80cb      	strh	r3, [r1, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   19370:	2303      	movs	r3, #3
   19372:	710b      	strb	r3, [r1, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   19374:	77cb      	strb	r3, [r1, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   19376:	7f0b      	ldrb	r3, [r1, #28]
			ll_rx_put(rx->hdr.link, rx);
   19378:	6808      	ldr	r0, [r1, #0]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1937a:	f043 0303 	orr.w	r3, r3, #3
   1937e:	770b      	strb	r3, [r1, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   19380:	2317      	movs	r3, #23
   19382:	774b      	strb	r3, [r1, #29]
   19384:	f8d4 216d 	ldr.w	r2, [r4, #365]	; 0x16d
   19388:	f8d4 3169 	ldr.w	r3, [r4, #361]	; 0x169
   1938c:	620b      	str	r3, [r1, #32]
   1938e:	624a      	str	r2, [r1, #36]	; 0x24
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   19390:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   19394:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   19398:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   1939c:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   193a0:	f7fb fc4c 	bl	14c3c <ll_rx_put>
			ll_rx_sched();
   193a4:	f7fb fc54 	bl	14c50 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   193a8:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   193ac:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   193b0:	2202      	movs	r2, #2
   193b2:	f362 0301 	bfi	r3, r2, #0, #2
   193b6:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   193ba:	e61f      	b.n	18ffc <ull_conn_llcp+0x28>
			event_counter = lll->event_counter +
   193bc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   193be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   193c0:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   193c2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   193c6:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   193c8:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   193cc:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   193ce:	d174      	bne.n	194ba <ull_conn_llcp+0x4e6>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   193d0:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   193d4:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   193d8:	1afb      	subs	r3, r7, r3
   193da:	0419      	lsls	r1, r3, #16
   193dc:	f53f ae0e 	bmi.w	18ffc <ull_conn_llcp+0x28>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   193e0:	f1bc 0f00 	cmp.w	ip, #0
   193e4:	f2c0 8389 	blt.w	19afa <ull_conn_llcp+0xb26>
			conn->llcp_ack = conn->llcp_req;
   193e8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   193ec:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
   193f0:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   193f4:	6363      	str	r3, [r4, #52]	; 0x34
		memcpy(&lll->data_chan_map[0],
   193f6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   193fa:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   193fe:	7103      	strb	r3, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   19400:	2105      	movs	r1, #5
   19402:	f7f7 fe51 	bl	110a8 <util_ones_count_get>
		lll->data_chan_count =
   19406:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1940a:	2301      	movs	r3, #1
		lll->data_chan_count =
   1940c:	f360 0c05 	bfi	ip, r0, #0, #6
   19410:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   19414:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   19418:	fa4f fc8c 	sxtb.w	ip, ip
   1941c:	e5ee      	b.n	18ffc <ull_conn_llcp+0x28>
   1941e:	bf00      	nop
   19420:	000305cc 	.word	0x000305cc
   19424:	0002ff74 	.word	0x0002ff74
   19428:	0002fedc 	.word	0x0002fedc
   1942c:	20002e98 	.word	0x20002e98
			event_counter = lll->event_counter +
   19430:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   19432:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   19434:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   19438:	440a      	add	r2, r1
   1943a:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   1943c:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   19440:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   19442:	f040 811f 	bne.w	19684 <ull_conn_llcp+0x6b0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   19446:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1944a:	1ab6      	subs	r6, r6, r2
   1944c:	0436      	lsls	r6, r6, #16
   1944e:	f53f add8 	bmi.w	19002 <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   19452:	f104 0034 	add.w	r0, r4, #52	; 0x34
   19456:	f8d4 10e9 	ldr.w	r1, [r4, #233]	; 0xe9
   1945a:	f894 20ed 	ldrb.w	r2, [r4, #237]	; 0xed
			conn->periph.llcp_type = LLCP_NONE;
   1945e:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   19462:	6361      	str	r1, [r4, #52]	; 0x34
   19464:	7102      	strb	r2, [r0, #4]
			util_ones_count_get(&lll->data_chan_map[0],
   19466:	2105      	movs	r1, #5
   19468:	f7f7 fe1e 	bl	110a8 <util_ones_count_get>
		lll->data_chan_count =
   1946c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   19470:	2201      	movs	r2, #1
		lll->data_chan_count =
   19472:	f360 0305 	bfi	r3, r0, #0, #6
   19476:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1947a:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   1947e:	e5c0      	b.n	19002 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   19480:	4ad2      	ldr	r2, [pc, #840]	; (197cc <ull_conn_llcp+0x7f8>)
   19482:	49d3      	ldr	r1, [pc, #844]	; (197d0 <ull_conn_llcp+0x7fc>)
   19484:	48d3      	ldr	r0, [pc, #844]	; (197d4 <ull_conn_llcp+0x800>)
   19486:	f240 43e1 	movw	r3, #1249	; 0x4e1
   1948a:	f00e fd8d 	bl	27fa8 <printk>
   1948e:	4040      	eors	r0, r0
   19490:	f380 8811 	msr	BASEPRI, r0
   19494:	f04f 0003 	mov.w	r0, #3
   19498:	df02      	svc	2
			break;
   1949a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1949e:	e5ad      	b.n	18ffc <ull_conn_llcp+0x28>
	    (!conn->lll.role || (conn->periph.llcp_type == LLCP_NONE)) &&
   194a0:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   194a4:	2900      	cmp	r1, #0
   194a6:	f47f ada9 	bne.w	18ffc <ull_conn_llcp+0x28>
   194aa:	e638      	b.n	1911e <ull_conn_llcp+0x14a>
				event_len_prep(conn);
   194ac:	4620      	mov	r0, r4
   194ae:	f7fd fad5 	bl	16a5c <event_len_prep>
   194b2:	e5bf      	b.n	19034 <ull_conn_llcp+0x60>
		conn->tx_data_last = tx;
   194b4:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   194b8:	e694      	b.n	191e4 <ull_conn_llcp+0x210>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   194ba:	48c7      	ldr	r0, [pc, #796]	; (197d8 <ull_conn_llcp+0x804>)
   194bc:	f7f7 fc22 	bl	10d04 <mem_acquire>
		if (tx) {
   194c0:	2800      	cmp	r0, #0
   194c2:	d0ea      	beq.n	1949a <ull_conn_llcp+0x4c6>
						      conn->lll.latency + 6;
   194c4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   194c6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
						      conn->lll.latency + 6;
   194ca:	3306      	adds	r3, #6
   194cc:	443b      	add	r3, r7
			conn->llcp.chan_map.instant = event_counter +
   194ce:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   194d2:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   194d4:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   194d8:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   194dc:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   194e0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   194e2:	2308      	movs	r3, #8
   194e4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   194e6:	2301      	movs	r3, #1
   194e8:	71c3      	strb	r3, [r0, #7]
   194ea:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   194ee:	6083      	str	r3, [r0, #8]
   194f0:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   194f4:	7303      	strb	r3, [r0, #12]
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   194f6:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   194fa:	f8a0 300d 	strh.w	r3, [r0, #13]
	    conn->tx_head &&
   194fe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19502:	2b00      	cmp	r3, #0
   19504:	f000 82e3 	beq.w	19ace <ull_conn_llcp+0xafa>
	    !conn->llcp_enc.pause_tx &&
   19508:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1950c:	0792      	lsls	r2, r2, #30
   1950e:	f100 82de 	bmi.w	19ace <ull_conn_llcp+0xafa>
	    !conn->llcp_phy.pause_tx &&
   19512:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19516:	07d7      	lsls	r7, r2, #31
   19518:	f100 82d9 	bmi.w	19ace <ull_conn_llcp+0xafa>
		if (conn->tx_head == conn->tx_data) {
   1951c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19520:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19524:	428b      	cmp	r3, r1
   19526:	f000 8548 	beq.w	19fba <ull_conn_llcp+0xfe6>
		} else if (!conn->tx_ctrl) {
   1952a:	2a00      	cmp	r2, #0
   1952c:	f000 85b1 	beq.w	1a092 <ull_conn_llcp+0x10be>
	tx->next = conn->tx_ctrl_last->next;
   19530:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19534:	681a      	ldr	r2, [r3, #0]
   19536:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19538:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1953a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1953c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19540:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   19544:	2b00      	cmp	r3, #0
   19546:	f47f ad59 	bne.w	18ffc <ull_conn_llcp+0x28>
		conn->tx_data_last = tx;
   1954a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1954e:	e555      	b.n	18ffc <ull_conn_llcp+0x28>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19550:	48a1      	ldr	r0, [pc, #644]	; (197d8 <ull_conn_llcp+0x804>)
   19552:	f7f7 fbd7 	bl	10d04 <mem_acquire>
	if (!tx) {
   19556:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1955a:	4681      	mov	r9, r0
   1955c:	2800      	cmp	r0, #0
   1955e:	f43f ad4d 	beq.w	18ffc <ull_conn_llcp+0x28>
	if (!lll->role) {
   19562:	f1bc 0f00 	cmp.w	ip, #0
   19566:	f280 833f 	bge.w	19be8 <ull_conn_llcp+0xc14>
	else if (!lll->enc_rx) {
   1956a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1956e:	071a      	lsls	r2, r3, #28
   19570:	f100 8447 	bmi.w	19e02 <ull_conn_llcp+0xe2e>
		if (conn->llcp.encryption.error_code) {
   19574:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   19578:	f1b8 0f00 	cmp.w	r8, #0
   1957c:	f47f ad68 	bne.w	19050 <ull_conn_llcp+0x7c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   19580:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   19584:	463b      	mov	r3, r7
   19586:	4642      	mov	r2, r8
   19588:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1958c:	f204 1071 	addw	r0, r4, #369	; 0x171
   19590:	f006 fa9c 	bl	1facc <ecb_encrypt>
			lll->ccm_rx.direction = 1U;
   19594:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
   19598:	f8d4 2083 	ldr.w	r2, [r4, #131]	; 0x83
   1959c:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
   195a0:	f043 0301 	orr.w	r3, r3, #1
   195a4:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   195a8:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   195ac:	f8d4 207b 	ldr.w	r2, [r4, #123]	; 0x7b
   195b0:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
   195b4:	f368 0300 	bfi	r3, r8, #0, #1
   195b8:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   195bc:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   195c0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   195c4:	f8c4 20b5 	str.w	r2, [r4, #181]	; 0xb5
   195c8:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   195cc:	f8d4 0087 	ldr.w	r0, [r4, #135]	; 0x87
   195d0:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   195d4:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
   195d8:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   195dc:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   195e0:	f043 0308 	orr.w	r3, r3, #8
   195e4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   195e8:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   195ec:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   195f0:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   195f4:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   195f8:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   195fc:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   19600:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   19604:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   19608:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1960c:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   19610:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19614:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   19618:	2301      	movs	r3, #1
   1961a:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1961e:	2305      	movs	r3, #5
   19620:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   19624:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19628:	2b00      	cmp	r3, #0
   1962a:	f000 8398 	beq.w	19d5e <ull_conn_llcp+0xd8a>
	    !conn->llcp_enc.pause_tx &&
   1962e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19632:	0797      	lsls	r7, r2, #30
   19634:	f100 8393 	bmi.w	19d5e <ull_conn_llcp+0xd8a>
	    !conn->llcp_phy.pause_tx &&
   19638:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1963c:	07d0      	lsls	r0, r2, #31
   1963e:	f100 838e 	bmi.w	19d5e <ull_conn_llcp+0xd8a>
		if (conn->tx_head == conn->tx_data) {
   19642:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19646:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1964a:	428b      	cmp	r3, r1
   1964c:	f000 853c 	beq.w	1a0c8 <ull_conn_llcp+0x10f4>
		} else if (!conn->tx_ctrl) {
   19650:	2a00      	cmp	r2, #0
   19652:	f000 866d 	beq.w	1a330 <ull_conn_llcp+0x135c>
	tx->next = conn->tx_ctrl_last->next;
   19656:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1965a:	681a      	ldr	r2, [r3, #0]
   1965c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   19660:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   19664:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19668:	f8d9 3000 	ldr.w	r3, [r9]
   1966c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   19670:	2b00      	cmp	r3, #0
   19672:	f000 8333 	beq.w	19cdc <ull_conn_llcp+0xd08>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   19676:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1967a:	f043 0303 	orr.w	r3, r3, #3
   1967e:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   19682:	e4bb      	b.n	18ffc <ull_conn_llcp+0x28>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19684:	4854      	ldr	r0, [pc, #336]	; (197d8 <ull_conn_llcp+0x804>)
   19686:	f7f7 fb3d 	bl	10d04 <mem_acquire>
		if (tx) {
   1968a:	2800      	cmp	r0, #0
   1968c:	f43f acb9 	beq.w	19002 <ull_conn_llcp+0x2e>
						      conn->lll.latency + 6;
   19690:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   19692:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19696:	7903      	ldrb	r3, [r0, #4]
						      conn->lll.latency + 6;
   19698:	3206      	adds	r2, #6
   1969a:	4432      	add	r2, r6
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1969c:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   196a0:	f36f 0100 	bfc	r1, #0, #1
			conn->llcp.chan_map.instant = event_counter +
   196a4:	f8a4 20ee 	strh.w	r2, [r4, #238]	; 0xee
			conn->llcp.chan_map.initiate = 0U;
   196a8:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   196ac:	2208      	movs	r2, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   196ae:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->llctrl.opcode =
   196b0:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   196b2:	7142      	strb	r2, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   196b4:	71c3      	strb	r3, [r0, #7]
   196b6:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
   196ba:	6083      	str	r3, [r0, #8]
   196bc:	f894 30ed 	ldrb.w	r3, [r4, #237]	; 0xed
   196c0:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   196c2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   196c6:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   196ca:	f8a0 200d 	strh.w	r2, [r0, #13]
	if (
   196ce:	2b00      	cmp	r3, #0
   196d0:	f000 8208 	beq.w	19ae4 <ull_conn_llcp+0xb10>
	    !conn->llcp_enc.pause_tx &&
   196d4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   196d8:	0792      	lsls	r2, r2, #30
   196da:	f100 8203 	bmi.w	19ae4 <ull_conn_llcp+0xb10>
	    !conn->llcp_phy.pause_tx &&
   196de:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   196e2:	07d7      	lsls	r7, r2, #31
   196e4:	f100 81fe 	bmi.w	19ae4 <ull_conn_llcp+0xb10>
		if (conn->tx_head == conn->tx_data) {
   196e8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   196ec:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   196f0:	428b      	cmp	r3, r1
   196f2:	f000 8470 	beq.w	19fd6 <ull_conn_llcp+0x1002>
		} else if (!conn->tx_ctrl) {
   196f6:	2a00      	cmp	r2, #0
   196f8:	f000 84c1 	beq.w	1a07e <ull_conn_llcp+0x10aa>
	tx->next = conn->tx_ctrl_last->next;
   196fc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19700:	681a      	ldr	r2, [r3, #0]
   19702:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19704:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19706:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   19708:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1970c:	2b00      	cmp	r3, #0
   1970e:	f47f ac78 	bne.w	19002 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   19712:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   19716:	e474      	b.n	19002 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   19718:	f894 7121 	ldrb.w	r7, [r4, #289]	; 0x121
   1971c:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   19720:	4577      	cmp	r7, lr
   19722:	d064      	beq.n	197ee <ull_conn_llcp+0x81a>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   19724:	eba7 070e 	sub.w	r7, r7, lr
   19728:	07f9      	lsls	r1, r7, #31
   1972a:	f57f ac67 	bpl.w	18ffc <ull_conn_llcp+0x28>
	if (conn->common.fex_valid) {
   1972e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   19732:	f013 0701 	ands.w	r7, r3, #1
   19736:	f000 81ec 	beq.w	19b12 <ull_conn_llcp+0xb3e>
		rx = ll_pdu_rx_alloc();
   1973a:	f7fb faad 	bl	14c98 <ll_pdu_rx_alloc>
		if (!rx) {
   1973e:	4601      	mov	r1, r0
   19740:	b388      	cbz	r0, 197a6 <ull_conn_llcp+0x7d2>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   19742:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   19746:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1974a:	2003      	movs	r0, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1974c:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   1974e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
__ssp_bos_icheck3(memset, void *, int)
   19750:	f8c1 8020 	str.w	r8, [r1, #32]
   19754:	f8c1 8024 	str.w	r8, [r1, #36]	; 0x24
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   19758:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1975a:	774b      	strb	r3, [r1, #29]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1975c:	7f08      	ldrb	r0, [r1, #28]
		rx->hdr.handle = conn->lll.handle;
   1975e:	80ca      	strh	r2, [r1, #6]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   19760:	77cb      	strb	r3, [r1, #31]
		sys_put_le64(conn->llcp_feature.features_peer,
   19762:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   19766:	f040 0003 	orr.w	r0, r0, #3
	dst[0] = val;
   1976a:	f881 2020 	strb.w	r2, [r1, #32]
   1976e:	7708      	strb	r0, [r1, #28]
	sys_put_le16(val >> 16, &dst[2]);
   19770:	0c10      	lsrs	r0, r2, #16
	dst[1] = val >> 8;
   19772:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19776:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   1977a:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1977c:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   19780:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
	dst[1] = val >> 8;
   19784:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19788:	0a00      	lsrs	r0, r0, #8
	dst[0] = val;
   1978a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
	dst[1] = val >> 8;
   1978e:	0a12      	lsrs	r2, r2, #8
   19790:	f881 0023 	strb.w	r0, [r1, #35]	; 0x23
   19794:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
   19798:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
	ll_rx_put(rx->hdr.link, rx);
   1979c:	6808      	ldr	r0, [r1, #0]
   1979e:	f7fb fa4d 	bl	14c3c <ll_rx_put>
	ll_rx_sched();
   197a2:	f7fb fa55 	bl	14c50 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   197a6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   197aa:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   197ae:	e41d      	b.n	18fec <ull_conn_llcp+0x18>
				conn->procedure_expire++;
   197b0:	3301      	adds	r3, #1
   197b2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   197b6:	e42e      	b.n	19016 <ull_conn_llcp+0x42>
			tx->next = conn->tx_head;
   197b8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   197ba:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   197be:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   197c2:	2b00      	cmp	r3, #0
   197c4:	f47f ad0e 	bne.w	191e4 <ull_conn_llcp+0x210>
   197c8:	e674      	b.n	194b4 <ull_conn_llcp+0x4e0>
   197ca:	bf00      	nop
   197cc:	000305cc 	.word	0x000305cc
   197d0:	0002ff74 	.word	0x0002ff74
   197d4:	0002fedc 	.word	0x0002fedc
   197d8:	20002e98 	.word	0x20002e98
		if (!conn->tx_ctrl) {
   197dc:	2a00      	cmp	r2, #0
   197de:	f47f ad54 	bne.w	1928a <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head;
   197e2:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   197e4:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   197e8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   197ec:	e555      	b.n	1929a <ull_conn_llcp+0x2c6>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   197ee:	f894 7139 	ldrb.w	r7, [r4, #313]	; 0x139
   197f2:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   197f6:	4577      	cmp	r7, lr
   197f8:	d038      	beq.n	1986c <ull_conn_llcp+0x898>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   197fa:	eba7 070e 	sub.w	r7, r7, lr
   197fe:	07f9      	lsls	r1, r7, #31
   19800:	f57f abfc 	bpl.w	18ffc <ull_conn_llcp+0x28>
	if (conn->llcp_version.tx == 0U) {
   19804:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   19808:	07da      	lsls	r2, r3, #31
   1980a:	f140 8330 	bpl.w	19e6e <ull_conn_llcp+0xe9a>
	} else if (conn->llcp_version.rx) {
   1980e:	079a      	lsls	r2, r3, #30
   19810:	f140 8328 	bpl.w	19e64 <ull_conn_llcp+0xe90>
		rx = ll_pdu_rx_alloc();
   19814:	f7fb fa40 	bl	14c98 <ll_pdu_rx_alloc>
		if (!rx) {
   19818:	4601      	mov	r1, r0
   1981a:	2800      	cmp	r0, #0
   1981c:	d0c3      	beq.n	197a6 <ull_conn_llcp+0x7d2>
		conn->llcp_version.ack = conn->llcp_version.req;
   1981e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   19822:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   19826:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   19828:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1982a:	2303      	movs	r3, #3
   1982c:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1982e:	7f03      	ldrb	r3, [r0, #28]
   19830:	f043 0303 	orr.w	r3, r3, #3
   19834:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   19836:	2306      	movs	r3, #6
   19838:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1983a:	230c      	movs	r3, #12
   1983c:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   1983e:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   19842:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   19846:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   1984a:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   1984e:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   19852:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   19856:	6800      	ldr	r0, [r0, #0]
   19858:	f7fb f9f0 	bl	14c3c <ll_rx_put>
		ll_rx_sched();
   1985c:	f7fb f9f8 	bl	14c50 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19860:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   19864:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   19868:	f7ff bbc0 	b.w	18fec <ull_conn_llcp+0x18>
		} else if (conn->llcp_conn_param.ack !=
   1986c:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   19870:	f894 7184 	ldrb.w	r7, [r4, #388]	; 0x184
   19874:	45be      	cmp	lr, r7
   19876:	f000 8234 	beq.w	19ce2 <ull_conn_llcp+0xd0e>
	return conn_upd_curr && (conn_upd_curr != conn);
   1987a:	4fd5      	ldr	r7, [pc, #852]	; (19bd0 <ull_conn_llcp+0xbfc>)
   1987c:	f8d7 e000 	ldr.w	lr, [r7]
   19880:	f1be 0f00 	cmp.w	lr, #0
   19884:	f000 8347 	beq.w	19f16 <ull_conn_llcp+0xf42>
   19888:	4574      	cmp	r4, lr
   1988a:	f47f abb7 	bne.w	18ffc <ull_conn_llcp+0x28>
	switch (conn->llcp_conn_param.state) {
   1988e:	f894 e186 	ldrb.w	lr, [r4, #390]	; 0x186
   19892:	f00e 0e0f 	and.w	lr, lr, #15
   19896:	f1be 0f08 	cmp.w	lr, #8
   1989a:	f200 864f 	bhi.w	1a53c <ull_conn_llcp+0x1568>
   1989e:	f20f 0808 	addw	r8, pc, #8
   198a2:	f858 f02e 	ldr.w	pc, [r8, lr, lsl #2]
   198a6:	bf00      	nop
   198a8:	00019985 	.word	0x00019985
   198ac:	00019a49 	.word	0x00019a49
   198b0:	00019935 	.word	0x00019935
   198b4:	00018fed 	.word	0x00018fed
   198b8:	00018fed 	.word	0x00018fed
   198bc:	00018fed 	.word	0x00018fed
   198c0:	00018fed 	.word	0x00018fed
   198c4:	00018fed 	.word	0x00018fed
   198c8:	000198cd 	.word	0x000198cd
			event_counter = lll->event_counter +
   198cc:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   198ce:	8e63      	ldrh	r3, [r4, #50]	; 0x32
			CONTAINER_OF(conn->llcp_conn_param.pdu_win_offset0,
   198d0:	f8d4 71a0 	ldr.w	r7, [r4, #416]	; 0x1a0
			event_counter = lll->event_counter +
   198d4:	4413      	add	r3, r2
   198d6:	4433      	add	r3, r6
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   198d8:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		pdu_ctrl_tx->llctrl.conn_param_req.reference_conn_event_count =
   198dc:	f827 3c02 	strh.w	r3, [r7, #-2]
		conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   198e0:	2304      	movs	r3, #4
   198e2:	f363 0203 	bfi	r2, r3, #0, #4
   198e6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		if (!conn->tx_ctrl) {
   198ea:	e9d4 3271 	ldrd	r3, r2, [r4, #452]	; 0x1c4
		tx = CONTAINER_OF(pdu_ctrl_tx, struct node_tx, pdu);
   198ee:	f1a7 0013 	sub.w	r0, r7, #19
	if (
   198f2:	2b00      	cmp	r3, #0
   198f4:	f000 838b 	beq.w	1a00e <ull_conn_llcp+0x103a>
	    conn->tx_head &&
   198f8:	0789      	lsls	r1, r1, #30
   198fa:	f100 8388 	bmi.w	1a00e <ull_conn_llcp+0x103a>
	    !conn->llcp_phy.pause_tx &&
   198fe:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   19902:	07c9      	lsls	r1, r1, #31
   19904:	f100 8383 	bmi.w	1a00e <ull_conn_llcp+0x103a>
		if (conn->tx_head == conn->tx_data) {
   19908:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1990c:	428b      	cmp	r3, r1
   1990e:	f000 85f0 	beq.w	1a4f2 <ull_conn_llcp+0x151e>
		} else if (!conn->tx_ctrl) {
   19912:	2a00      	cmp	r2, #0
   19914:	f000 8574 	beq.w	1a400 <ull_conn_llcp+0x142c>
	tx->next = conn->tx_ctrl_last->next;
   19918:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1991c:	681a      	ldr	r2, [r3, #0]
   1991e:	f847 2c13 	str.w	r2, [r7, #-19]
	conn->tx_ctrl_last->next = tx;
   19922:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   19924:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19928:	f857 3c13 	ldr.w	r3, [r7, #-19]
   1992c:	2b00      	cmp	r3, #0
   1992e:	f47f ab65 	bne.w	18ffc <ull_conn_llcp+0x28>
   19932:	e60a      	b.n	1954a <ull_conn_llcp+0x576>
	if (conn->llcp_enc.pause_tx) {
   19934:	0788      	lsls	r0, r1, #30
   19936:	f53f ab61 	bmi.w	18ffc <ull_conn_llcp+0x28>
	rx = ll_pdu_rx_alloc();
   1993a:	f7fb f9ad 	bl	14c98 <ll_pdu_rx_alloc>
	if (!rx) {
   1993e:	4601      	mov	r1, r0
   19940:	2800      	cmp	r0, #0
   19942:	f43f af30 	beq.w	197a6 <ull_conn_llcp+0x7d2>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   19946:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1994a:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1994c:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1994e:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   19952:	f362 0003 	bfi	r0, r2, #0, #4
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   19956:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   19958:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   1995c:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1995e:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   19960:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   19962:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   19964:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   19968:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1996a:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1996e:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   19970:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   19974:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   19976:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   1997a:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1997c:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   1997e:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   19980:	77cb      	strb	r3, [r1, #31]
   19982:	e70b      	b.n	1979c <ull_conn_llcp+0x7c8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19984:	4893      	ldr	r0, [pc, #588]	; (19bd4 <ull_conn_llcp+0xc00>)
   19986:	f7f7 f9bd 	bl	10d04 <mem_acquire>
	if (!tx) {
   1998a:	4602      	mov	r2, r0
   1998c:	2800      	cmp	r0, #0
   1998e:	f43f af0a 	beq.w	197a6 <ull_conn_llcp+0x7d2>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19992:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   19994:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19996:	f043 0303 	orr.w	r3, r3, #3
   1999a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1999c:	2318      	movs	r3, #24
   1999e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   199a0:	230f      	movs	r3, #15
   199a2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   199a4:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   199a8:	8103      	strh	r3, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   199aa:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   199ae:	8143      	strh	r3, [r0, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   199b0:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   199b4:	8183      	strh	r3, [r0, #12]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   199b6:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   199ba:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0U;
   199bc:	2300      	movs	r3, #0
   199be:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   199c0:	74c3      	strb	r3, [r0, #19]
   199c2:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   199c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   199c8:	7543      	strb	r3, [r0, #21]
   199ca:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   199cc:	75c3      	strb	r3, [r0, #23]
   199ce:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   199d0:	7643      	strb	r3, [r0, #25]
   199d2:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   199d4:	76c3      	strb	r3, [r0, #27]
   199d6:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   199d8:	7743      	strb	r3, [r0, #29]
   199da:	7783      	strb	r3, [r0, #30]
	conn->procedure_expire = conn->procedure_reload;
   199dc:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   199e0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   199e4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   199e8:	f8c4 51a4 	str.w	r5, [r4, #420]	; 0x1a4
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_REQ;
   199ec:	2107      	movs	r1, #7
   199ee:	f361 0303 	bfi	r3, r1, #0, #4
   199f2:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   199f6:	68a3      	ldr	r3, [r4, #8]
   199f8:	2b00      	cmp	r3, #0
   199fa:	da0a      	bge.n	19a12 <ull_conn_llcp+0xa3e>
			uint32_t ticks_prepare_to_start =
   199fc:	68e7      	ldr	r7, [r4, #12]
   199fe:	6860      	ldr	r0, [r4, #4]
				(conn->ull.ticks_prepare_to_start &
   19a00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			conn->llcp_conn_param.ticks_ref -=
   19a04:	4287      	cmp	r7, r0
   19a06:	bf2c      	ite	cs
   19a08:	19e9      	addcs	r1, r5, r7
   19a0a:	1829      	addcc	r1, r5, r0
   19a0c:	1acb      	subs	r3, r1, r3
   19a0e:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
		win_offs = &p->offset0;
   19a12:	3213      	adds	r2, #19
		s_mfy_sched_offset.param = (void *)conn;
   19a14:	4b70      	ldr	r3, [pc, #448]	; (19bd8 <ull_conn_llcp+0xc04>)
		conn->llcp_conn_param.pdu_win_offset0 = win_offs;
   19a16:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19a1a:	2201      	movs	r2, #1
   19a1c:	2102      	movs	r1, #2
   19a1e:	4610      	mov	r0, r2
		s_mfy_sched_offset.param = (void *)conn;
   19a20:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   19a22:	f7f7 fa43 	bl	10eac <mayfly_enqueue>
		LL_ASSERT(!retval);
   19a26:	2800      	cmp	r0, #0
   19a28:	f43f aebd 	beq.w	197a6 <ull_conn_llcp+0x7d2>
   19a2c:	4a6b      	ldr	r2, [pc, #428]	; (19bdc <ull_conn_llcp+0xc08>)
   19a2e:	496c      	ldr	r1, [pc, #432]	; (19be0 <ull_conn_llcp+0xc0c>)
   19a30:	f640 63f6 	movw	r3, #3830	; 0xef6
   19a34:	486b      	ldr	r0, [pc, #428]	; (19be4 <ull_conn_llcp+0xc10>)
   19a36:	f00e fab7 	bl	27fa8 <printk>
   19a3a:	4040      	eors	r0, r0
   19a3c:	f380 8811 	msr	BASEPRI, r0
   19a40:	f04f 0003 	mov.w	r0, #3
   19a44:	df02      	svc	2
   19a46:	e6ae      	b.n	197a6 <ull_conn_llcp+0x7d2>
	if (conn->llcp_conn_param.status) {
   19a48:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   19a4c:	2b00      	cmp	r3, #0
   19a4e:	f040 8358 	bne.w	1a102 <ull_conn_llcp+0x112e>
	if (!conn->lll.role) {
   19a52:	2a00      	cmp	r2, #0
   19a54:	f2c0 83f3 	blt.w	1a23e <ull_conn_llcp+0x126a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   19a58:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   19a5c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   19a60:	2106      	movs	r1, #6
   19a62:	f361 0203 	bfi	r2, r1, #0, #4
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   19a66:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   19a6a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   19a6e:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   19a70:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   19a74:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   19a78:	2900      	cmp	r1, #0
   19a7a:	f000 83dd 	beq.w	1a238 <ull_conn_llcp+0x1264>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   19a7e:	fbb2 f3f1 	udiv	r3, r2, r1
   19a82:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   19a86:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   19a8a:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   19a8c:	4299      	cmp	r1, r3
   19a8e:	bf98      	it	ls
   19a90:	461a      	movls	r2, r3
   19a92:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   19a96:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   19a9a:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   19a9e:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   19aa2:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   19aa6:	f3c3 1300 	ubfx	r3, r3, #4, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   19aaa:	00db      	lsls	r3, r3, #3
   19aac:	f022 020f 	bic.w	r2, r2, #15
   19ab0:	f043 0302 	orr.w	r3, r3, #2
   19ab4:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   19ab6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   19aba:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   19abe:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   19ac2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   19ac6:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   19aca:	f7ff ba9a 	b.w	19002 <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
   19ace:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19ad2:	2a00      	cmp	r2, #0
   19ad4:	f47f ad2c 	bne.w	19530 <ull_conn_llcp+0x55c>
			tx->next = conn->tx_head;
   19ad8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19ada:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19ade:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19ae2:	e52d      	b.n	19540 <ull_conn_llcp+0x56c>
		if (!conn->tx_ctrl) {
   19ae4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19ae8:	2a00      	cmp	r2, #0
   19aea:	f47f ae07 	bne.w	196fc <ull_conn_llcp+0x728>
			tx->next = conn->tx_head;
   19aee:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19af0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19af4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19af8:	e608      	b.n	1970c <ull_conn_llcp+0x738>
		if (conn->lll.role && (conn->periph.llcp_type != LLCP_NONE)) {
   19afa:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   19afe:	2b00      	cmp	r3, #0
   19b00:	f43f ac72 	beq.w	193e8 <ull_conn_llcp+0x414>
			conn->periph.llcp_type = LLCP_NONE;
   19b04:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   19b08:	e472      	b.n	193f0 <ull_conn_llcp+0x41c>
		conn->tx_data_last = tx;
   19b0a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   19b0e:	f7ff bbc7 	b.w	192a0 <ull_conn_llcp+0x2cc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19b12:	4830      	ldr	r0, [pc, #192]	; (19bd4 <ull_conn_llcp+0xc00>)
   19b14:	f7f7 f8f6 	bl	10d04 <mem_acquire>
	if (tx) {
   19b18:	2800      	cmp	r0, #0
   19b1a:	f43f ae44 	beq.w	197a6 <ull_conn_llcp+0x7d2>
		conn->llcp_feature.ack--;
   19b1e:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   19b22:	3b01      	subs	r3, #1
   19b24:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   19b28:	2309      	movs	r3, #9
   19b2a:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   19b2c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   19b30:	6087      	str	r7, [r0, #8]
   19b32:	60c7      	str	r7, [r0, #12]
   19b34:	2b00      	cmp	r3, #0
		sys_put_le64(conn->llcp_feature.features_conn,
   19b36:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   19b3a:	ea4f 4112 	mov.w	r1, r2, lsr #16
	dst[0] = val;
   19b3e:	7202      	strb	r2, [r0, #8]
	dst[1] = val >> 8;
   19b40:	f3c2 2207 	ubfx	r2, r2, #8, #8
   19b44:	7242      	strb	r2, [r0, #9]
	sys_put_le16(val >> 16, &dst[2]);
   19b46:	ea4f 4213 	mov.w	r2, r3, lsr #16
	dst[0] = val;
   19b4a:	7382      	strb	r2, [r0, #14]
	dst[1] = val >> 8;
   19b4c:	ea4f 2212 	mov.w	r2, r2, lsr #8
	dst[0] = val;
   19b50:	7303      	strb	r3, [r0, #12]
   19b52:	7281      	strb	r1, [r0, #10]
	dst[1] = val >> 8;
   19b54:	f3c3 2307 	ubfx	r3, r3, #8, #8
   19b58:	73c2      	strb	r2, [r0, #15]
   19b5a:	ea4f 2111 	mov.w	r1, r1, lsr #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   19b5e:	7902      	ldrb	r2, [r0, #4]
   19b60:	72c1      	strb	r1, [r0, #11]
   19b62:	7343      	strb	r3, [r0, #13]
   19b64:	f042 0203 	orr.w	r2, r2, #3
	    conn->tx_head &&
   19b68:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   19b6c:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
   19b6e:	bfac      	ite	ge
   19b70:	2208      	movge	r2, #8
   19b72:	220e      	movlt	r2, #14
   19b74:	71c2      	strb	r2, [r0, #7]
	if (
   19b76:	2b00      	cmp	r3, #0
   19b78:	f000 80e6 	beq.w	19d48 <ull_conn_llcp+0xd74>
	    !conn->llcp_enc.pause_tx &&
   19b7c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19b80:	0792      	lsls	r2, r2, #30
   19b82:	f100 80e1 	bmi.w	19d48 <ull_conn_llcp+0xd74>
	    !conn->llcp_phy.pause_tx &&
   19b86:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19b8a:	07d7      	lsls	r7, r2, #31
   19b8c:	f100 80dc 	bmi.w	19d48 <ull_conn_llcp+0xd74>
		if (conn->tx_head == conn->tx_data) {
   19b90:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19b94:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19b98:	428b      	cmp	r3, r1
   19b9a:	f000 8263 	beq.w	1a064 <ull_conn_llcp+0x1090>
		} else if (!conn->tx_ctrl) {
   19b9e:	2a00      	cmp	r2, #0
   19ba0:	f000 83b5 	beq.w	1a30e <ull_conn_llcp+0x133a>
	tx->next = conn->tx_ctrl_last->next;
   19ba4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19ba8:	681a      	ldr	r2, [r3, #0]
   19baa:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19bac:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19bae:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   19bb0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19bb4:	2b00      	cmp	r3, #0
   19bb6:	f000 81ab 	beq.w	19f10 <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   19bba:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   19bbe:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   19bc2:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   19bc6:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   19bca:	f7ff ba0f 	b.w	18fec <ull_conn_llcp+0x18>
   19bce:	bf00      	nop
   19bd0:	20002e04 	.word	0x20002e04
   19bd4:	20002e98 	.word	0x20002e98
   19bd8:	20000618 	.word	0x20000618
   19bdc:	000305cc 	.word	0x000305cc
   19be0:	0003037c 	.word	0x0003037c
   19be4:	0002fedc 	.word	0x0002fedc
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   19be8:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   19bec:	463b      	mov	r3, r7
   19bee:	4642      	mov	r2, r8
   19bf0:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   19bf4:	f204 1071 	addw	r0, r4, #369	; 0x171
   19bf8:	f005 ff68 	bl	1facc <ecb_encrypt>
		lll->enc_rx = 1;
   19bfc:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19c00:	f8d4 2083 	ldr.w	r2, [r4, #131]	; 0x83
   19c04:	f8c4 20a4 	str.w	r2, [r4, #164]	; 0xa4
   19c08:	f023 0318 	bic.w	r3, r3, #24
   19c0c:	f043 0318 	orr.w	r3, r3, #24
   19c10:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.direction = 0;
   19c14:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
   19c18:	f8d4 207b 	ldr.w	r2, [r4, #123]	; 0x7b
   19c1c:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
   19c20:	f368 0300 	bfi	r3, r8, #0, #1
   19c24:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   19c28:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   19c2c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   19c30:	f8c4 20b5 	str.w	r2, [r4, #181]	; 0xb5
   19c34:	f8d4 107f 	ldr.w	r1, [r4, #127]	; 0x7f
   19c38:	f8d4 0087 	ldr.w	r0, [r4, #135]	; 0x87
   19c3c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
   19c40:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
   19c44:	f8c4 10a0 	str.w	r1, [r4, #160]	; 0xa0
   19c48:	f8c4 20b9 	str.w	r2, [r4, #185]	; 0xb9
   19c4c:	f043 0301 	orr.w	r3, r3, #1
   19c50:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c54:	f899 3004 	ldrb.w	r3, [r9, #4]
		lll->ccm_rx.counter = 0;
   19c58:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c5c:	f043 0303 	orr.w	r3, r3, #3
		lll->ccm_tx.counter = 0;
   19c60:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   19c64:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
   19c68:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
   19c6c:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   19c70:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   19c74:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   19c78:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   19c7c:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19c80:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19c84:	2301      	movs	r3, #1
   19c86:	f889 3005 	strb.w	r3, [r9, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   19c8a:	2306      	movs	r3, #6
   19c8c:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   19c90:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19c94:	2b00      	cmp	r3, #0
   19c96:	d04c      	beq.n	19d32 <ull_conn_llcp+0xd5e>
	    !conn->llcp_enc.pause_tx &&
   19c98:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19c9c:	0790      	lsls	r0, r2, #30
   19c9e:	d448      	bmi.n	19d32 <ull_conn_llcp+0xd5e>
	    !conn->llcp_phy.pause_tx &&
   19ca0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19ca4:	07d1      	lsls	r1, r2, #31
   19ca6:	d444      	bmi.n	19d32 <ull_conn_llcp+0xd5e>
		if (conn->tx_head == conn->tx_data) {
   19ca8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   19cac:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   19cae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19cb2:	f000 81c7 	beq.w	1a044 <ull_conn_llcp+0x1070>
		} else if (!conn->tx_ctrl) {
   19cb6:	2a00      	cmp	r2, #0
   19cb8:	f000 835b 	beq.w	1a372 <ull_conn_llcp+0x139e>
	tx->next = conn->tx_ctrl_last->next;
   19cbc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19cc0:	681a      	ldr	r2, [r3, #0]
   19cc2:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   19cc6:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   19cca:	f8d9 3000 	ldr.w	r3, [r9]
	conn->tx_ctrl_last = tx;
   19cce:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19cd2:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   19cd6:	2b00      	cmp	r3, #0
   19cd8:	f47f accd 	bne.w	19676 <ull_conn_llcp+0x6a2>
		conn->tx_data_last = tx;
   19cdc:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   19ce0:	e4c9      	b.n	19676 <ull_conn_llcp+0x6a2>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   19ce2:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   19ce6:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   19cea:	4299      	cmp	r1, r3
   19cec:	d043      	beq.n	19d76 <ull_conn_llcp+0xda2>
			event_len_prep(conn);
   19cee:	4620      	mov	r0, r4
   19cf0:	f7fc feb4 	bl	16a5c <event_len_prep>
   19cf4:	e557      	b.n	197a6 <ull_conn_llcp+0x7d2>
		if (!conn->tx_ctrl) {
   19cf6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19cfa:	2a00      	cmp	r2, #0
   19cfc:	f47f ab22 	bne.w	19344 <ull_conn_llcp+0x370>
			tx->next = conn->tx_head;
   19d00:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   19d04:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19d08:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   19d0c:	f7ff bb25 	b.w	1935a <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   19d10:	681a      	ldr	r2, [r3, #0]
   19d12:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19d16:	2900      	cmp	r1, #0
   19d18:	f47f aa59 	bne.w	191ce <ull_conn_llcp+0x1fa>
			tx->next = conn->tx_head->next;
   19d1c:	681a      	ldr	r2, [r3, #0]
   19d1e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19d20:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19d22:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19d24:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   19d28:	2b00      	cmp	r3, #0
   19d2a:	f47f aa5b 	bne.w	191e4 <ull_conn_llcp+0x210>
   19d2e:	f7ff bbc1 	b.w	194b4 <ull_conn_llcp+0x4e0>
		if (!conn->tx_ctrl) {
   19d32:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19d36:	2a00      	cmp	r2, #0
   19d38:	d1c0      	bne.n	19cbc <ull_conn_llcp+0xce8>
			tx->next = conn->tx_head;
   19d3a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   19d3e:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19d42:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   19d46:	e7c4      	b.n	19cd2 <ull_conn_llcp+0xcfe>
		if (!conn->tx_ctrl) {
   19d48:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19d4c:	2a00      	cmp	r2, #0
   19d4e:	f47f af29 	bne.w	19ba4 <ull_conn_llcp+0xbd0>
			tx->next = conn->tx_head;
   19d52:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19d54:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19d58:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19d5c:	e72a      	b.n	19bb4 <ull_conn_llcp+0xbe0>
		if (!conn->tx_ctrl) {
   19d5e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19d62:	2a00      	cmp	r2, #0
   19d64:	f47f ac77 	bne.w	19656 <ull_conn_llcp+0x682>
			tx->next = conn->tx_head;
   19d68:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   19d6c:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19d70:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   19d74:	e478      	b.n	19668 <ull_conn_llcp+0x694>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   19d76:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   19d7a:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   19d7e:	428b      	cmp	r3, r1
   19d80:	f43f a93c 	beq.w	18ffc <ull_conn_llcp+0x28>
	switch (conn->llcp_phy.state) {
   19d84:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   19d88:	f003 0703 	and.w	r7, r3, #3
   19d8c:	2f03      	cmp	r7, #3
   19d8e:	f000 81f7 	beq.w	1a180 <ull_conn_llcp+0x11ac>
   19d92:	2f00      	cmp	r7, #0
   19d94:	f47f a931 	bne.w	18ffa <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19d98:	48c8      	ldr	r0, [pc, #800]	; (1a0bc <ull_conn_llcp+0x10e8>)
   19d9a:	f7f6 ffb3 	bl	10d04 <mem_acquire>
		if (!tx) {
   19d9e:	4601      	mov	r1, r0
   19da0:	2800      	cmp	r0, #0
   19da2:	f43f ad00 	beq.w	197a6 <ull_conn_llcp+0x7d2>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   19da6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   19daa:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   19dae:	2201      	movs	r2, #1
   19db0:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   19db4:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   19db8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   19dbc:	f3c3 0782 	ubfx	r7, r3, #2, #3
   19dc0:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   19dc4:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   19dc8:	f3c0 0040 	ubfx	r0, r0, #1, #1
   19dcc:	f360 07c3 	bfi	r7, r0, #3, #1
   19dd0:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   19dd4:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19dd8:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   19dda:	f367 02c5 	bfi	r2, r7, #3, #3
   19dde:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   19de2:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   19de6:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19de8:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   19dec:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   19dee:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19df0:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   19df2:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   19df4:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   19df6:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   19df8:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   19dfa:	4620      	mov	r0, r4
   19dfc:	f7fc facc 	bl	16398 <ctrl_tx_pause_enqueue>
   19e00:	e6db      	b.n	19bba <ull_conn_llcp+0xbe6>
	conn->lll.enc_tx = 1;
   19e02:	f043 0310 	orr.w	r3, r3, #16
   19e06:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   19e0a:	2301      	movs	r3, #1
   19e0c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   19e0e:	7903      	ldrb	r3, [r0, #4]
   19e10:	f043 0303 	orr.w	r3, r3, #3
   19e14:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   19e16:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   19e1a:	2206      	movs	r2, #6
   19e1c:	71c2      	strb	r2, [r0, #7]
	if (
   19e1e:	2b00      	cmp	r3, #0
   19e20:	d067      	beq.n	19ef2 <ull_conn_llcp+0xf1e>
	    !conn->llcp_enc.pause_tx &&
   19e22:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19e26:	0791      	lsls	r1, r2, #30
   19e28:	d463      	bmi.n	19ef2 <ull_conn_llcp+0xf1e>
	    !conn->llcp_phy.pause_tx &&
   19e2a:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19e2e:	07d2      	lsls	r2, r2, #31
   19e30:	d45f      	bmi.n	19ef2 <ull_conn_llcp+0xf1e>
		if (conn->tx_head == conn->tx_data) {
   19e32:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   19e36:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   19e38:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19e3c:	f000 8153 	beq.w	1a0e6 <ull_conn_llcp+0x1112>
		} else if (!conn->tx_ctrl) {
   19e40:	2a00      	cmp	r2, #0
   19e42:	f000 82a7 	beq.w	1a394 <ull_conn_llcp+0x13c0>
	tx->next = conn->tx_ctrl_last->next;
   19e46:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19e4a:	681a      	ldr	r2, [r3, #0]
   19e4c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   19e50:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   19e54:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19e58:	f8d9 3000 	ldr.w	r3, [r9]
   19e5c:	2b00      	cmp	r3, #0
   19e5e:	f47f ac0a 	bne.w	19676 <ull_conn_llcp+0x6a2>
   19e62:	e73b      	b.n	19cdc <ull_conn_llcp+0xd08>
		LL_ASSERT(0);
   19e64:	4a96      	ldr	r2, [pc, #600]	; (1a0c0 <ull_conn_llcp+0x10ec>)
   19e66:	4997      	ldr	r1, [pc, #604]	; (1a0c4 <ull_conn_llcp+0x10f0>)
   19e68:	f640 63a1 	movw	r3, #3745	; 0xea1
   19e6c:	e5e2      	b.n	19a34 <ull_conn_llcp+0xa60>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   19e6e:	4893      	ldr	r0, [pc, #588]	; (1a0bc <ull_conn_llcp+0x10e8>)
   19e70:	f7f6 ff48 	bl	10d04 <mem_acquire>
		if (tx) {
   19e74:	2800      	cmp	r0, #0
   19e76:	f43f ac96 	beq.w	197a6 <ull_conn_llcp+0x7d2>
			conn->llcp_version.ack--;
   19e7a:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   19e7e:	3b01      	subs	r3, #1
   19e80:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   19e84:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   19e88:	f043 0301 	orr.w	r3, r3, #1
   19e8c:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   19e90:	7903      	ldrb	r3, [r0, #4]
   19e92:	f043 0303 	orr.w	r3, r3, #3
   19e96:	7103      	strb	r3, [r0, #4]
			pdu->len =
   19e98:	2306      	movs	r3, #6
   19e9a:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   19e9c:	230c      	movs	r3, #12
   19e9e:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   19ea0:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   19ea2:	f06f 030e 	mvn.w	r3, #14
   19ea6:	7243      	strb	r3, [r0, #9]
   19ea8:	2305      	movs	r3, #5
   19eaa:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   19eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19eb0:	72c3      	strb	r3, [r0, #11]
   19eb2:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   19eb4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   19eb8:	2b00      	cmp	r3, #0
   19eba:	d06c      	beq.n	19f96 <ull_conn_llcp+0xfc2>
	    !conn->llcp_enc.pause_tx &&
   19ebc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   19ec0:	0797      	lsls	r7, r2, #30
   19ec2:	d468      	bmi.n	19f96 <ull_conn_llcp+0xfc2>
	    !conn->llcp_phy.pause_tx &&
   19ec4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   19ec8:	07d1      	lsls	r1, r2, #31
   19eca:	d464      	bmi.n	19f96 <ull_conn_llcp+0xfc2>
		if (conn->tx_head == conn->tx_data) {
   19ecc:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   19ed0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   19ed2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   19ed6:	f000 8266 	beq.w	1a3a6 <ull_conn_llcp+0x13d2>
		} else if (!conn->tx_ctrl) {
   19eda:	2a00      	cmp	r2, #0
   19edc:	f000 8319 	beq.w	1a512 <ull_conn_llcp+0x153e>
	tx->next = conn->tx_ctrl_last->next;
   19ee0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   19ee4:	681a      	ldr	r2, [r3, #0]
   19ee6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   19ee8:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   19eea:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   19eee:	6803      	ldr	r3, [r0, #0]
   19ef0:	e660      	b.n	19bb4 <ull_conn_llcp+0xbe0>
		if (!conn->tx_ctrl) {
   19ef2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19ef6:	2a00      	cmp	r2, #0
   19ef8:	d1a5      	bne.n	19e46 <ull_conn_llcp+0xe72>
			tx->next = conn->tx_head;
   19efa:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   19efe:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19f02:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   19f06:	e7a7      	b.n	19e58 <ull_conn_llcp+0xe84>
		conn->tx_data_last = tx;
   19f08:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   19f0c:	f7ff ba28 	b.w	19360 <ull_conn_llcp+0x38c>
   19f10:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   19f14:	e651      	b.n	19bba <ull_conn_llcp+0xbe6>
	switch (conn->llcp_conn_param.state) {
   19f16:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   19f1a:	f003 030f 	and.w	r3, r3, #15
   19f1e:	2b08      	cmp	r3, #8
   19f20:	f200 830c 	bhi.w	1a53c <ull_conn_llcp+0x1568>
   19f24:	a001      	add	r0, pc, #4	; (adr r0, 19f2c <ull_conn_llcp+0xf58>)
   19f26:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   19f2a:	bf00      	nop
   19f2c:	00019985 	.word	0x00019985
   19f30:	00019a49 	.word	0x00019a49
   19f34:	00019935 	.word	0x00019935
   19f38:	00018ffd 	.word	0x00018ffd
   19f3c:	00018ffd 	.word	0x00018ffd
   19f40:	00018ffd 	.word	0x00018ffd
   19f44:	00018ffd 	.word	0x00018ffd
   19f48:	00018ffd 	.word	0x00018ffd
   19f4c:	000198cd 	.word	0x000198cd
		if (!conn->tx_ctrl) {
   19f50:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19f54:	2a00      	cmp	r2, #0
   19f56:	f47f a8af 	bne.w	190b8 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head;
   19f5a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   19f5e:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19f62:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   19f66:	f7ff b8b0 	b.w	190ca <ull_conn_llcp+0xf6>
			conn->tx_data = conn->tx_data->next;
   19f6a:	6819      	ldr	r1, [r3, #0]
   19f6c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19f70:	2a00      	cmp	r2, #0
   19f72:	f47f a98a 	bne.w	1928a <ull_conn_llcp+0x2b6>
			tx->next = conn->tx_head->next;
   19f76:	681a      	ldr	r2, [r3, #0]
   19f78:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19f7a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19f7c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19f7e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19f82:	f7ff b98a 	b.w	1929a <ull_conn_llcp+0x2c6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   19f86:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   19f88:	f889 8008 	strb.w	r8, [r9, #8]
   19f8c:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   19f8e:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   19f92:	f7ff b873 	b.w	1907c <ull_conn_llcp+0xa8>
		if (!conn->tx_ctrl) {
   19f96:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   19f9a:	2a00      	cmp	r2, #0
   19f9c:	d1a0      	bne.n	19ee0 <ull_conn_llcp+0xf0c>
			tx->next = conn->tx_head;
   19f9e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   19fa0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   19fa4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   19fa8:	e7a1      	b.n	19eee <ull_conn_llcp+0xf1a>
	    ((pdu_data_tx->llctrl.opcode !=
   19faa:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19fac:	2a03      	cmp	r2, #3
   19fae:	f43f aeb5 	beq.w	19d1c <ull_conn_llcp+0xd48>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   19fb2:	2a0a      	cmp	r2, #10
   19fb4:	f47f a905 	bne.w	191c2 <ull_conn_llcp+0x1ee>
   19fb8:	e6b0      	b.n	19d1c <ull_conn_llcp+0xd48>
			conn->tx_data = conn->tx_data->next;
   19fba:	6819      	ldr	r1, [r3, #0]
   19fbc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19fc0:	2a00      	cmp	r2, #0
   19fc2:	f47f aab5 	bne.w	19530 <ull_conn_llcp+0x55c>
			tx->next = conn->tx_head->next;
   19fc6:	681a      	ldr	r2, [r3, #0]
   19fc8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19fca:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19fcc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19fce:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19fd2:	f7ff bab5 	b.w	19540 <ull_conn_llcp+0x56c>
			conn->tx_data = conn->tx_data->next;
   19fd6:	6819      	ldr	r1, [r3, #0]
   19fd8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   19fdc:	2a00      	cmp	r2, #0
   19fde:	f47f ab8d 	bne.w	196fc <ull_conn_llcp+0x728>
			tx->next = conn->tx_head->next;
   19fe2:	681a      	ldr	r2, [r3, #0]
   19fe4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   19fe6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   19fe8:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   19fea:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   19fee:	f7ff bb8d 	b.w	1970c <ull_conn_llcp+0x738>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   19ff2:	791a      	ldrb	r2, [r3, #4]
   19ff4:	f002 0203 	and.w	r2, r2, #3
   19ff8:	2a03      	cmp	r2, #3
   19ffa:	f000 8101 	beq.w	1a200 <ull_conn_llcp+0x122c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   19ffe:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a002:	f7ff b942 	b.w	1928a <ull_conn_llcp+0x2b6>
		conn->tx_data_last = tx;
   1a006:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   1a00a:	f7ff b863 	b.w	190d4 <ull_conn_llcp+0x100>
		if (!conn->tx_ctrl) {
   1a00e:	2a00      	cmp	r2, #0
   1a010:	f47f ac82 	bne.w	19918 <ull_conn_llcp+0x944>
			tx->next = conn->tx_head;
   1a014:	f847 3c13 	str.w	r3, [r7, #-19]
				conn->tx_ctrl = tx;
   1a018:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a01c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1a020:	e482      	b.n	19928 <ull_conn_llcp+0x954>
			conn->tx_data = conn->tx_data->next;
   1a022:	6819      	ldr	r1, [r3, #0]
   1a024:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a028:	2a00      	cmp	r2, #0
   1a02a:	f47f a98b 	bne.w	19344 <ull_conn_llcp+0x370>
			tx->next = conn->tx_head->next;
   1a02e:	681a      	ldr	r2, [r3, #0]
   1a030:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1a034:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1a038:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1a03c:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   1a040:	f7ff b98b 	b.w	1935a <ull_conn_llcp+0x386>
			conn->tx_data = conn->tx_data->next;
   1a044:	6819      	ldr	r1, [r3, #0]
   1a046:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a04a:	2a00      	cmp	r2, #0
   1a04c:	f47f ae36 	bne.w	19cbc <ull_conn_llcp+0xce8>
			tx->next = conn->tx_head->next;
   1a050:	681a      	ldr	r2, [r3, #0]
   1a052:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1a056:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1a05a:	f8d9 3000 	ldr.w	r3, [r9]
				conn->tx_ctrl_last = tx;
   1a05e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1a062:	e636      	b.n	19cd2 <ull_conn_llcp+0xcfe>
			conn->tx_data = conn->tx_data->next;
   1a064:	6819      	ldr	r1, [r3, #0]
   1a066:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a06a:	2a00      	cmp	r2, #0
   1a06c:	f47f ad9a 	bne.w	19ba4 <ull_conn_llcp+0xbd0>
			tx->next = conn->tx_head->next;
   1a070:	681a      	ldr	r2, [r3, #0]
   1a072:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1a074:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1a076:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1a078:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a07c:	e59a      	b.n	19bb4 <ull_conn_llcp+0xbe0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a07e:	791a      	ldrb	r2, [r3, #4]
   1a080:	f002 0203 	and.w	r2, r2, #3
   1a084:	2a03      	cmp	r2, #3
   1a086:	f000 817d 	beq.w	1a384 <ull_conn_llcp+0x13b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a08a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a08e:	f7ff bb35 	b.w	196fc <ull_conn_llcp+0x728>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a092:	791a      	ldrb	r2, [r3, #4]
   1a094:	f002 0203 	and.w	r2, r2, #3
   1a098:	2a03      	cmp	r2, #3
   1a09a:	f000 8141 	beq.w	1a320 <ull_conn_llcp+0x134c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a09e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a0a2:	f7ff ba45 	b.w	19530 <ull_conn_llcp+0x55c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a0a6:	791a      	ldrb	r2, [r3, #4]
   1a0a8:	f002 0203 	and.w	r2, r2, #3
   1a0ac:	2a03      	cmp	r2, #3
   1a0ae:	f000 8149 	beq.w	1a344 <ull_conn_llcp+0x1370>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a0b2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a0b6:	f7ff b945 	b.w	19344 <ull_conn_llcp+0x370>
   1a0ba:	bf00      	nop
   1a0bc:	20002e98 	.word	0x20002e98
   1a0c0:	000305cc 	.word	0x000305cc
   1a0c4:	0002ff74 	.word	0x0002ff74
			conn->tx_data = conn->tx_data->next;
   1a0c8:	6819      	ldr	r1, [r3, #0]
   1a0ca:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a0ce:	2a00      	cmp	r2, #0
   1a0d0:	f47f aac1 	bne.w	19656 <ull_conn_llcp+0x682>
			tx->next = conn->tx_head->next;
   1a0d4:	681a      	ldr	r2, [r3, #0]
   1a0d6:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1a0da:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1a0de:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1a0e2:	f7ff bac1 	b.w	19668 <ull_conn_llcp+0x694>
			conn->tx_data = conn->tx_data->next;
   1a0e6:	6819      	ldr	r1, [r3, #0]
   1a0e8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a0ec:	2a00      	cmp	r2, #0
   1a0ee:	f47f aeaa 	bne.w	19e46 <ull_conn_llcp+0xe72>
			tx->next = conn->tx_head->next;
   1a0f2:	681a      	ldr	r2, [r3, #0]
   1a0f4:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1a0f8:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1a0fc:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1a100:	e6aa      	b.n	19e58 <ull_conn_llcp+0xe84>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a102:	48c5      	ldr	r0, [pc, #788]	; (1a418 <ull_conn_llcp+0x1444>)
   1a104:	f7f6 fdfe 	bl	10d04 <mem_acquire>
		if (!tx) {
   1a108:	2800      	cmp	r0, #0
   1a10a:	f43f ab4c 	beq.w	197a6 <ull_conn_llcp+0x7d2>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a10e:	7902      	ldrb	r2, [r0, #4]
   1a110:	f042 0203 	orr.w	r2, r2, #3
   1a114:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1a116:	2211      	movs	r2, #17
   1a118:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1a11a:	2203      	movs	r2, #3
   1a11c:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1a11e:	220f      	movs	r2, #15
   1a120:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1a122:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   1a126:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   1a128:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1a12c:	2a00      	cmp	r2, #0
   1a12e:	f000 8150 	beq.w	1a3d2 <ull_conn_llcp+0x13fe>
	    !conn->llcp_enc.pause_tx &&
   1a132:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1a136:	078b      	lsls	r3, r1, #30
   1a138:	f100 814b 	bmi.w	1a3d2 <ull_conn_llcp+0x13fe>
	    !conn->llcp_phy.pause_tx &&
   1a13c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1a140:	07c9      	lsls	r1, r1, #31
   1a142:	f100 8146 	bmi.w	1a3d2 <ull_conn_llcp+0x13fe>
		if (conn->tx_head == conn->tx_data) {
   1a146:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1a14a:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   1a14c:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1a150:	f000 814a 	beq.w	1a3e8 <ull_conn_llcp+0x1414>
		} else if (!conn->tx_ctrl) {
   1a154:	2900      	cmp	r1, #0
   1a156:	f000 8161 	beq.w	1a41c <ull_conn_llcp+0x1448>
	tx->next = conn->tx_ctrl_last->next;
   1a15a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1a15e:	6811      	ldr	r1, [r2, #0]
   1a160:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a162:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1a164:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1a168:	6802      	ldr	r2, [r0, #0]
   1a16a:	2a00      	cmp	r2, #0
   1a16c:	f000 8151 	beq.w	1a412 <ull_conn_llcp+0x143e>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1a170:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1a174:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1a178:	2300      	movs	r3, #0
   1a17a:	603b      	str	r3, [r7, #0]
   1a17c:	f7ff bb13 	b.w	197a6 <ull_conn_llcp+0x7d2>
		if (conn->llcp_phy.tx & PHY_2M) {
   1a180:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1a182:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   1a186:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1a18a:	d54a      	bpl.n	1a222 <ull_conn_llcp+0x124e>
			conn->llcp_phy.tx = PHY_2M;
   1a18c:	2202      	movs	r2, #2
   1a18e:	f362 0384 	bfi	r3, r2, #2, #3
   1a192:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   1a196:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1a19a:	065f      	lsls	r7, r3, #25
   1a19c:	ea4f 1253 	mov.w	r2, r3, lsr #5
   1a1a0:	d536      	bpl.n	1a210 <ull_conn_llcp+0x123c>
			conn->llcp_phy.rx = PHY_2M;
   1a1a2:	2202      	movs	r2, #2
   1a1a4:	f362 1347 	bfi	r3, r2, #5, #3
   1a1a8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   1a1ac:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1a1ae:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1a1b2:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1a1b6:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   1a1ba:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1a1be:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1a1c2:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1a1c6:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1a1ca:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1a1ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1a1d2:	428f      	cmp	r7, r1
   1a1d4:	bf08      	it	eq
   1a1d6:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   1a1d8:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   1a1da:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   1a1de:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1a1e2:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1a1e6:	bf08      	it	eq
   1a1e8:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   1a1ea:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1a1ee:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   1a1f2:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   1a1f4:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   1a1f8:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1a1fc:	f7fe bf1a 	b.w	19034 <ull_conn_llcp+0x60>
	    ((pdu_data_tx->llctrl.opcode !=
   1a200:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a202:	2a03      	cmp	r2, #3
   1a204:	f43f aeb7 	beq.w	19f76 <ull_conn_llcp+0xfa2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a208:	2a0a      	cmp	r2, #10
   1a20a:	f47f aef8 	bne.w	19ffe <ull_conn_llcp+0x102a>
   1a20e:	e6b2      	b.n	19f76 <ull_conn_llcp+0xfa2>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   1a210:	07d1      	lsls	r1, r2, #31
   1a212:	f140 8165 	bpl.w	1a4e0 <ull_conn_llcp+0x150c>
			conn->llcp_phy.rx = PHY_1M;
   1a216:	2201      	movs	r2, #1
   1a218:	f362 1347 	bfi	r3, r2, #5, #3
   1a21c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1a220:	e7c4      	b.n	1a1ac <ull_conn_llcp+0x11d8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1a222:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   1a224:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   1a228:	f140 816a 	bpl.w	1a500 <ull_conn_llcp+0x152c>
			conn->llcp_phy.tx = PHY_1M;
   1a22c:	2201      	movs	r2, #1
   1a22e:	f362 0384 	bfi	r3, r2, #2, #3
   1a232:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1a236:	e7ae      	b.n	1a196 <ull_conn_llcp+0x11c2>
			conn->llcp_cu.interval = interval_max;
   1a238:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   1a23c:	e42b      	b.n	19a96 <ull_conn_llcp+0xac2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1a23e:	4876      	ldr	r0, [pc, #472]	; (1a418 <ull_conn_llcp+0x1444>)
   1a240:	f7f6 fd60 	bl	10d04 <mem_acquire>
	if (!tx) {
   1a244:	2800      	cmp	r0, #0
   1a246:	f43f aaae 	beq.w	197a6 <ull_conn_llcp+0x7d2>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1a24a:	7902      	ldrb	r2, [r0, #4]
   1a24c:	f042 0203 	orr.w	r2, r2, #3
   1a250:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   1a252:	2218      	movs	r2, #24
   1a254:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1a256:	2210      	movs	r2, #16
   1a258:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   1a25a:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   1a25e:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   1a260:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   1a264:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1a266:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   1a26a:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   1a26c:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   1a270:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   1a272:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   1a276:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   1a278:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   1a27c:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   1a280:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   1a284:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   1a288:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   1a28c:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   1a290:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   1a294:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   1a298:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   1a29c:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   1a2a0:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   1a2a4:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   1a2a8:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   1a2ac:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   1a2b0:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   1a2b4:	2a00      	cmp	r2, #0
   1a2b6:	f000 8082 	beq.w	1a3be <ull_conn_llcp+0x13ea>
	    !conn->llcp_enc.pause_tx &&
   1a2ba:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1a2be:	078b      	lsls	r3, r1, #30
   1a2c0:	d47d      	bmi.n	1a3be <ull_conn_llcp+0x13ea>
	    !conn->llcp_phy.pause_tx &&
   1a2c2:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1a2c6:	07cf      	lsls	r7, r1, #31
   1a2c8:	d479      	bmi.n	1a3be <ull_conn_llcp+0x13ea>
		if (conn->tx_head == conn->tx_data) {
   1a2ca:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1a2ce:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   1a2d0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1a2d4:	f000 80ed 	beq.w	1a4b2 <ull_conn_llcp+0x14de>
		} else if (!conn->tx_ctrl) {
   1a2d8:	2900      	cmp	r1, #0
   1a2da:	f000 80f9 	beq.w	1a4d0 <ull_conn_llcp+0x14fc>
	tx->next = conn->tx_ctrl_last->next;
   1a2de:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1a2e2:	6811      	ldr	r1, [r2, #0]
   1a2e4:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1a2e6:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   1a2e8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1a2ec:	6802      	ldr	r2, [r0, #0]
   1a2ee:	2a00      	cmp	r2, #0
   1a2f0:	f000 80eb 	beq.w	1a4ca <ull_conn_llcp+0x14f6>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   1a2f4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a2f8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD_WAIT;
   1a2fc:	2305      	movs	r3, #5
   1a2fe:	f363 0203 	bfi	r2, r3, #0, #4
   1a302:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a306:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1a30a:	f7fe be6f 	b.w	18fec <ull_conn_llcp+0x18>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a30e:	791a      	ldrb	r2, [r3, #4]
   1a310:	f002 0203 	and.w	r2, r2, #3
   1a314:	2a03      	cmp	r2, #3
   1a316:	f000 809c 	beq.w	1a452 <ull_conn_llcp+0x147e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a31a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a31e:	e441      	b.n	19ba4 <ull_conn_llcp+0xbd0>
	    ((pdu_data_tx->llctrl.opcode !=
   1a320:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a322:	2a03      	cmp	r2, #3
   1a324:	f43f ae4f 	beq.w	19fc6 <ull_conn_llcp+0xff2>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a328:	2a0a      	cmp	r2, #10
   1a32a:	f47f aeb8 	bne.w	1a09e <ull_conn_llcp+0x10ca>
   1a32e:	e64a      	b.n	19fc6 <ull_conn_llcp+0xff2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a330:	791a      	ldrb	r2, [r3, #4]
   1a332:	f002 0203 	and.w	r2, r2, #3
   1a336:	2a03      	cmp	r2, #3
   1a338:	f000 8093 	beq.w	1a462 <ull_conn_llcp+0x148e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a33c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a340:	f7ff b989 	b.w	19656 <ull_conn_llcp+0x682>
	    ((pdu_data_tx->llctrl.opcode !=
   1a344:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a346:	2a03      	cmp	r2, #3
   1a348:	f43f ae71 	beq.w	1a02e <ull_conn_llcp+0x105a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a34c:	2a0a      	cmp	r2, #10
   1a34e:	f47f aeb0 	bne.w	1a0b2 <ull_conn_llcp+0x10de>
   1a352:	e66c      	b.n	1a02e <ull_conn_llcp+0x105a>
			conn->tx_data = conn->tx_data->next;
   1a354:	6819      	ldr	r1, [r3, #0]
   1a356:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a35a:	2a00      	cmp	r2, #0
   1a35c:	f47e aeac 	bne.w	190b8 <ull_conn_llcp+0xe4>
			tx->next = conn->tx_head->next;
   1a360:	681a      	ldr	r2, [r3, #0]
   1a362:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1a366:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1a36a:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   1a36e:	f7fe beac 	b.w	190ca <ull_conn_llcp+0xf6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a372:	791a      	ldrb	r2, [r3, #4]
   1a374:	f002 0203 	and.w	r2, r2, #3
   1a378:	2a03      	cmp	r2, #3
   1a37a:	f000 8083 	beq.w	1a484 <ull_conn_llcp+0x14b0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a37e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a382:	e49b      	b.n	19cbc <ull_conn_llcp+0xce8>
	    ((pdu_data_tx->llctrl.opcode !=
   1a384:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a386:	2a03      	cmp	r2, #3
   1a388:	f43f ae2b 	beq.w	19fe2 <ull_conn_llcp+0x100e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a38c:	2a0a      	cmp	r2, #10
   1a38e:	f47f ae7c 	bne.w	1a08a <ull_conn_llcp+0x10b6>
   1a392:	e626      	b.n	19fe2 <ull_conn_llcp+0x100e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a394:	791a      	ldrb	r2, [r3, #4]
   1a396:	f002 0203 	and.w	r2, r2, #3
   1a39a:	2a03      	cmp	r2, #3
   1a39c:	f000 8081 	beq.w	1a4a2 <ull_conn_llcp+0x14ce>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a3a0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a3a4:	e54f      	b.n	19e46 <ull_conn_llcp+0xe72>
			conn->tx_data = conn->tx_data->next;
   1a3a6:	6819      	ldr	r1, [r3, #0]
   1a3a8:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a3ac:	2a00      	cmp	r2, #0
   1a3ae:	f47f ad97 	bne.w	19ee0 <ull_conn_llcp+0xf0c>
			tx->next = conn->tx_head->next;
   1a3b2:	681a      	ldr	r2, [r3, #0]
   1a3b4:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1a3b6:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1a3b8:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a3bc:	e597      	b.n	19eee <ull_conn_llcp+0xf1a>
		if (!conn->tx_ctrl) {
   1a3be:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1a3c2:	2900      	cmp	r1, #0
   1a3c4:	d18b      	bne.n	1a2de <ull_conn_llcp+0x130a>
			tx->next = conn->tx_head;
   1a3c6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1a3c8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a3cc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1a3d0:	e78c      	b.n	1a2ec <ull_conn_llcp+0x1318>
		if (!conn->tx_ctrl) {
   1a3d2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1a3d6:	2900      	cmp	r1, #0
   1a3d8:	f47f aebf 	bne.w	1a15a <ull_conn_llcp+0x1186>
			tx->next = conn->tx_head;
   1a3dc:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1a3de:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1a3e2:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1a3e6:	e6bf      	b.n	1a168 <ull_conn_llcp+0x1194>
			conn->tx_data = conn->tx_data->next;
   1a3e8:	6813      	ldr	r3, [r2, #0]
   1a3ea:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a3ee:	2900      	cmp	r1, #0
   1a3f0:	f47f aeb3 	bne.w	1a15a <ull_conn_llcp+0x1186>
			tx->next = conn->tx_head->next;
   1a3f4:	6811      	ldr	r1, [r2, #0]
   1a3f6:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1a3f8:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1a3fa:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a3fe:	e6b3      	b.n	1a168 <ull_conn_llcp+0x1194>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a400:	791a      	ldrb	r2, [r3, #4]
   1a402:	f002 0203 	and.w	r2, r2, #3
   1a406:	2a03      	cmp	r2, #3
   1a408:	d010      	beq.n	1a42c <ull_conn_llcp+0x1458>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a40a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a40e:	f7ff ba83 	b.w	19918 <ull_conn_llcp+0x944>
		conn->tx_data_last = tx;
   1a412:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1a416:	e6ab      	b.n	1a170 <ull_conn_llcp+0x119c>
   1a418:	20002e98 	.word	0x20002e98
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a41c:	7911      	ldrb	r1, [r2, #4]
   1a41e:	f001 0103 	and.w	r1, r1, #3
   1a422:	2903      	cmp	r1, #3
   1a424:	d00f      	beq.n	1a446 <ull_conn_llcp+0x1472>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a426:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1a42a:	e696      	b.n	1a15a <ull_conn_llcp+0x1186>
	    ((pdu_data_tx->llctrl.opcode !=
   1a42c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a42e:	2a03      	cmp	r2, #3
   1a430:	d001      	beq.n	1a436 <ull_conn_llcp+0x1462>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a432:	2a0a      	cmp	r2, #10
   1a434:	d1e9      	bne.n	1a40a <ull_conn_llcp+0x1436>
			tx->next = conn->tx_head->next;
   1a436:	681a      	ldr	r2, [r3, #0]
   1a438:	f847 2c13 	str.w	r2, [r7, #-19]
			conn->tx_head->next = tx;
   1a43c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1a43e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a442:	f7ff ba71 	b.w	19928 <ull_conn_llcp+0x954>
	    ((pdu_data_tx->llctrl.opcode !=
   1a446:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a448:	2903      	cmp	r1, #3
   1a44a:	d0d3      	beq.n	1a3f4 <ull_conn_llcp+0x1420>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a44c:	290a      	cmp	r1, #10
   1a44e:	d1ea      	bne.n	1a426 <ull_conn_llcp+0x1452>
   1a450:	e7d0      	b.n	1a3f4 <ull_conn_llcp+0x1420>
	    ((pdu_data_tx->llctrl.opcode !=
   1a452:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a454:	2a03      	cmp	r2, #3
   1a456:	f43f ae0b 	beq.w	1a070 <ull_conn_llcp+0x109c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a45a:	2a0a      	cmp	r2, #10
   1a45c:	f47f af5d 	bne.w	1a31a <ull_conn_llcp+0x1346>
   1a460:	e606      	b.n	1a070 <ull_conn_llcp+0x109c>
	    ((pdu_data_tx->llctrl.opcode !=
   1a462:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a464:	2a03      	cmp	r2, #3
   1a466:	f43f ae35 	beq.w	1a0d4 <ull_conn_llcp+0x1100>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a46a:	2a0a      	cmp	r2, #10
   1a46c:	f47f af66 	bne.w	1a33c <ull_conn_llcp+0x1368>
   1a470:	e630      	b.n	1a0d4 <ull_conn_llcp+0x1100>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a472:	791a      	ldrb	r2, [r3, #4]
   1a474:	f002 0203 	and.w	r2, r2, #3
   1a478:	2a03      	cmp	r2, #3
   1a47a:	d00b      	beq.n	1a494 <ull_conn_llcp+0x14c0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a47c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a480:	f7fe be1a 	b.w	190b8 <ull_conn_llcp+0xe4>
	    ((pdu_data_tx->llctrl.opcode !=
   1a484:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a486:	2a03      	cmp	r2, #3
   1a488:	f43f ade2 	beq.w	1a050 <ull_conn_llcp+0x107c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a48c:	2a0a      	cmp	r2, #10
   1a48e:	f47f af76 	bne.w	1a37e <ull_conn_llcp+0x13aa>
   1a492:	e5dd      	b.n	1a050 <ull_conn_llcp+0x107c>
	    ((pdu_data_tx->llctrl.opcode !=
   1a494:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a496:	2a03      	cmp	r2, #3
   1a498:	f43f af62 	beq.w	1a360 <ull_conn_llcp+0x138c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a49c:	2a0a      	cmp	r2, #10
   1a49e:	d1ed      	bne.n	1a47c <ull_conn_llcp+0x14a8>
   1a4a0:	e75e      	b.n	1a360 <ull_conn_llcp+0x138c>
	    ((pdu_data_tx->llctrl.opcode !=
   1a4a2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a4a4:	2a03      	cmp	r2, #3
   1a4a6:	f43f ae24 	beq.w	1a0f2 <ull_conn_llcp+0x111e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a4aa:	2a0a      	cmp	r2, #10
   1a4ac:	f47f af78 	bne.w	1a3a0 <ull_conn_llcp+0x13cc>
   1a4b0:	e61f      	b.n	1a0f2 <ull_conn_llcp+0x111e>
			conn->tx_data = conn->tx_data->next;
   1a4b2:	6813      	ldr	r3, [r2, #0]
   1a4b4:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a4b8:	2900      	cmp	r1, #0
   1a4ba:	f47f af10 	bne.w	1a2de <ull_conn_llcp+0x130a>
			tx->next = conn->tx_head->next;
   1a4be:	6811      	ldr	r1, [r2, #0]
   1a4c0:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1a4c2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1a4c4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1a4c8:	e710      	b.n	1a2ec <ull_conn_llcp+0x1318>
		conn->tx_data_last = tx;
   1a4ca:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1a4ce:	e711      	b.n	1a2f4 <ull_conn_llcp+0x1320>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a4d0:	7911      	ldrb	r1, [r2, #4]
   1a4d2:	f001 0103 	and.w	r1, r1, #3
   1a4d6:	2903      	cmp	r1, #3
   1a4d8:	d023      	beq.n	1a522 <ull_conn_llcp+0x154e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a4da:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1a4de:	e6fe      	b.n	1a2de <ull_conn_llcp+0x130a>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   1a4e0:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   1a4e4:	bf18      	it	ne
   1a4e6:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   1a4e8:	f362 1347 	bfi	r3, r2, #5, #3
   1a4ec:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1a4f0:	e65c      	b.n	1a1ac <ull_conn_llcp+0x11d8>
			conn->tx_data = conn->tx_data->next;
   1a4f2:	6819      	ldr	r1, [r3, #0]
   1a4f4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1a4f8:	2a00      	cmp	r2, #0
   1a4fa:	d09c      	beq.n	1a436 <ull_conn_llcp+0x1462>
   1a4fc:	f7ff ba0c 	b.w	19918 <ull_conn_llcp+0x944>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   1a500:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   1a504:	bf18      	it	ne
   1a506:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   1a508:	f362 0384 	bfi	r3, r2, #2, #3
   1a50c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   1a510:	e641      	b.n	1a196 <ull_conn_llcp+0x11c2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a512:	791a      	ldrb	r2, [r3, #4]
   1a514:	f002 0203 	and.w	r2, r2, #3
   1a518:	2a03      	cmp	r2, #3
   1a51a:	d008      	beq.n	1a52e <ull_conn_llcp+0x155a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1a51c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1a520:	e4de      	b.n	19ee0 <ull_conn_llcp+0xf0c>
	    ((pdu_data_tx->llctrl.opcode !=
   1a522:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a524:	2903      	cmp	r1, #3
   1a526:	d0ca      	beq.n	1a4be <ull_conn_llcp+0x14ea>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a528:	290a      	cmp	r1, #10
   1a52a:	d1d6      	bne.n	1a4da <ull_conn_llcp+0x1506>
   1a52c:	e7c7      	b.n	1a4be <ull_conn_llcp+0x14ea>
	    ((pdu_data_tx->llctrl.opcode !=
   1a52e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1a530:	2a03      	cmp	r2, #3
   1a532:	f43f af3e 	beq.w	1a3b2 <ull_conn_llcp+0x13de>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1a536:	2a0a      	cmp	r2, #10
   1a538:	d1f0      	bne.n	1a51c <ull_conn_llcp+0x1548>
   1a53a:	e73a      	b.n	1a3b2 <ull_conn_llcp+0x13de>
		LL_ASSERT(0);
   1a53c:	4a09      	ldr	r2, [pc, #36]	; (1a564 <ull_conn_llcp+0x1590>)
   1a53e:	490a      	ldr	r1, [pc, #40]	; (1a568 <ull_conn_llcp+0x1594>)
   1a540:	480a      	ldr	r0, [pc, #40]	; (1a56c <ull_conn_llcp+0x1598>)
   1a542:	f640 73e1 	movw	r3, #4065	; 0xfe1
   1a546:	f00d fd2f 	bl	27fa8 <printk>
   1a54a:	4040      	eors	r0, r0
   1a54c:	f380 8811 	msr	BASEPRI, r0
   1a550:	f04f 0003 	mov.w	r0, #3
   1a554:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1a556:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1a55a:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   1a55e:	f7fe bd45 	b.w	18fec <ull_conn_llcp+0x18>
   1a562:	bf00      	nop
   1a564:	000305cc 	.word	0x000305cc
   1a568:	0002ff74 	.word	0x0002ff74
   1a56c:	0002fedc 	.word	0x0002fedc

0001a570 <ull_conn_tx_demux>:
{
   1a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a574:	4c24      	ldr	r4, [pc, #144]	; (1a608 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a576:	4f25      	ldr	r7, [pc, #148]	; (1a60c <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a578:	78e2      	ldrb	r2, [r4, #3]
{
   1a57a:	4605      	mov	r5, r0
	return (void *)(fifo + first * size);
   1a57c:	1d26      	adds	r6, r4, #4
   1a57e:	e021      	b.n	1a5c4 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1a580:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1a584:	4638      	mov	r0, r7
   1a586:	f7f6 fbeb 	bl	10d60 <mem_get>
	if (conn->lll.handle != handle) {
   1a58a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   1a58c:	bb2a      	cbnz	r2, 1a5da <ull_conn_tx_demux+0x6a>
			struct node_tx *tx = lll_tx->node;
   1a58e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1a592:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   1a596:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   1a598:	b351      	cbz	r1, 1a5f0 <ull_conn_tx_demux+0x80>
			if (conn->tx_data_last) {
   1a59a:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   1a59e:	b102      	cbz	r2, 1a5a2 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   1a5a0:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1a5a2:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   1a5a6:	78e2      	ldrb	r2, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1a5a8:	78a3      	ldrb	r3, [r4, #2]
   1a5aa:	7861      	ldrb	r1, [r4, #1]
	if (_first == last) {
   1a5ac:	429a      	cmp	r2, r3
   1a5ae:	d005      	beq.n	1a5bc <ull_conn_tx_demux+0x4c>
	_first += 1U;
   1a5b0:	3301      	adds	r3, #1
   1a5b2:	b2db      	uxtb	r3, r3
		_first = 0U;
   1a5b4:	4299      	cmp	r1, r3
   1a5b6:	bf08      	it	eq
   1a5b8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1a5ba:	70a3      	strb	r3, [r4, #2]
	} while (--count);
   1a5bc:	3d01      	subs	r5, #1
   1a5be:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   1a5c2:	d01e      	beq.n	1a602 <ull_conn_tx_demux+0x92>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1a5c4:	78a3      	ldrb	r3, [r4, #2]
   1a5c6:	7821      	ldrb	r1, [r4, #0]
	if (first == last) {
   1a5c8:	4293      	cmp	r3, r2
   1a5ca:	d01a      	beq.n	1a602 <ull_conn_tx_demux+0x92>
	return (void *)(fifo + first * size);
   1a5cc:	fb13 f301 	smulbb	r3, r3, r1
   1a5d0:	eb06 0803 	add.w	r8, r6, r3
	if (handle >= CONFIG_BT_MAX_CONN) {
   1a5d4:	5af2      	ldrh	r2, [r6, r3]
   1a5d6:	2a00      	cmp	r2, #0
   1a5d8:	d0d2      	beq.n	1a580 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   1a5da:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   1a5de:	790b      	ldrb	r3, [r1, #4]
   1a5e0:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1a5e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   1a5e8:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(LLL_HANDLE_INVALID, tx);
   1a5ea:	f7fa fb6b 	bl	14cc4 <ll_tx_ack_put>
   1a5ee:	e7da      	b.n	1a5a6 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   1a5f0:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   1a5f4:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   1a5f8:	2a00      	cmp	r2, #0
   1a5fa:	d1ce      	bne.n	1a59a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   1a5fc:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   1a600:	e7cf      	b.n	1a5a2 <ull_conn_tx_demux+0x32>
}
   1a602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a606:	bf00      	nop
   1a608:	200005a4 	.word	0x200005a4
   1a60c:	20001ca0 	.word	0x20001ca0

0001a610 <conn_cleanup_finalize>:
{
   1a610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1a614:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   1a618:	b082      	sub	sp, #8
   1a61a:	4606      	mov	r6, r0
	while (rx) {
   1a61c:	b144      	cbz	r4, 1a630 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a61e:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   1a620:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1a622:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1a624:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1a626:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   1a628:	f7fa fb08 	bl	14c3c <ll_rx_put>
	while (rx) {
   1a62c:	2c00      	cmp	r4, #0
   1a62e:	d1f7      	bne.n	1a620 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   1a630:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1a634:	b381      	cbz	r1, 1a698 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1a636:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 1a6dc <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   1a63a:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 1a6e0 <conn_cleanup_finalize+0xd0>
   1a63e:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1a6e4 <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a642:	f106 0768 	add.w	r7, r6, #104	; 0x68
   1a646:	e007      	b.n	1a658 <conn_cleanup_finalize+0x48>
   1a648:	4629      	mov	r1, r5
   1a64a:	463a      	mov	r2, r7
   1a64c:	4620      	mov	r0, r4
   1a64e:	f7f6 fbb9 	bl	10dc4 <memq_enqueue>
	while (conn->tx_head) {
   1a652:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1a656:	b1f9      	cbz	r1, 1a698 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1a658:	4630      	mov	r0, r6
   1a65a:	f7fc f8dd 	bl	16818 <tx_ull_dequeue>
   1a65e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   1a660:	4640      	mov	r0, r8
   1a662:	f7f6 fb4f 	bl	10d04 <mem_acquire>
		LL_ASSERT(link);
   1a666:	4604      	mov	r4, r0
   1a668:	2800      	cmp	r0, #0
   1a66a:	d1ed      	bne.n	1a648 <conn_cleanup_finalize+0x38>
   1a66c:	481e      	ldr	r0, [pc, #120]	; (1a6e8 <conn_cleanup_finalize+0xd8>)
   1a66e:	f640 135e 	movw	r3, #2398	; 0x95e
   1a672:	4652      	mov	r2, sl
   1a674:	4649      	mov	r1, r9
   1a676:	f00d fc97 	bl	27fa8 <printk>
   1a67a:	4040      	eors	r0, r0
   1a67c:	f380 8811 	msr	BASEPRI, r0
   1a680:	f04f 0003 	mov.w	r0, #3
   1a684:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1a686:	4629      	mov	r1, r5
   1a688:	463a      	mov	r2, r7
   1a68a:	4620      	mov	r0, r4
   1a68c:	f7f6 fb9a 	bl	10dc4 <memq_enqueue>
	while (conn->tx_head) {
   1a690:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1a694:	2900      	cmp	r1, #0
   1a696:	d1df      	bne.n	1a658 <conn_cleanup_finalize+0x48>
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1a698:	8d32      	ldrh	r2, [r6, #40]	; 0x28
   1a69a:	4b14      	ldr	r3, [pc, #80]	; (1a6ec <conn_cleanup_finalize+0xdc>)
   1a69c:	9600      	str	r6, [sp, #0]
   1a69e:	3205      	adds	r2, #5
   1a6a0:	b2d2      	uxtb	r2, r2
   1a6a2:	2101      	movs	r1, #1
   1a6a4:	2000      	movs	r0, #0
   1a6a6:	f7f7 fe57 	bl	12358 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a6aa:	f030 0302 	bics.w	r3, r0, #2
   1a6ae:	d00c      	beq.n	1a6ca <conn_cleanup_finalize+0xba>
   1a6b0:	4a0b      	ldr	r2, [pc, #44]	; (1a6e0 <conn_cleanup_finalize+0xd0>)
   1a6b2:	490f      	ldr	r1, [pc, #60]	; (1a6f0 <conn_cleanup_finalize+0xe0>)
   1a6b4:	480c      	ldr	r0, [pc, #48]	; (1a6e8 <conn_cleanup_finalize+0xd8>)
   1a6b6:	f640 1323 	movw	r3, #2339	; 0x923
   1a6ba:	f00d fc75 	bl	27fa8 <printk>
   1a6be:	4040      	eors	r0, r0
   1a6c0:	f380 8811 	msr	BASEPRI, r0
   1a6c4:	f04f 0003 	mov.w	r0, #3
   1a6c8:	df02      	svc	2
	lll->handle = LLL_HANDLE_INVALID;
   1a6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   1a6ce:	20ff      	movs	r0, #255	; 0xff
	lll->handle = LLL_HANDLE_INVALID;
   1a6d0:	8533      	strh	r3, [r6, #40]	; 0x28
}
   1a6d2:	b002      	add	sp, #8
   1a6d4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   1a6d8:	f7ff bf4a 	b.w	1a570 <ull_conn_tx_demux>
   1a6dc:	20002f4c 	.word	0x20002f4c
   1a6e0:	000305cc 	.word	0x000305cc
   1a6e4:	00030624 	.word	0x00030624
   1a6e8:	0002fedc 	.word	0x0002fedc
   1a6ec:	000165ed 	.word	0x000165ed
   1a6f0:	000306ac 	.word	0x000306ac

0001a6f4 <ull_conn_done>:
{
   1a6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   1a6f6:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1a6f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1a6fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1a6fe:	429a      	cmp	r2, r3
{
   1a700:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == LLL_HANDLE_INVALID)) {
   1a702:	f000 808e 	beq.w	1a822 <ull_conn_done+0x12e>
	switch (done->extra.mic_state) {
   1a706:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   1a70a:	2b01      	cmp	r3, #1
   1a70c:	4605      	mov	r5, r0
   1a70e:	f000 810c 	beq.w	1a92a <ull_conn_done+0x236>
   1a712:	2b02      	cmp	r3, #2
   1a714:	f000 8087 	beq.w	1a826 <ull_conn_done+0x132>
   1a718:	2b00      	cmp	r3, #0
   1a71a:	f000 80ec 	beq.w	1a8f6 <ull_conn_done+0x202>
	reason_final = conn->llcp_terminate.reason_final;
   1a71e:	f894 3143 	ldrb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   1a722:	2b00      	cmp	r3, #0
   1a724:	f040 8082 	bne.w	1a82c <ull_conn_done+0x138>
	latency_event = lll->latency_event;
   1a728:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	ticks_drift_minus = 0U;
   1a72a:	e9cd 3308 	strd	r3, r3, [sp, #32]
	if (done->extra.trx_cnt) {
   1a72e:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1a730:	1c7e      	adds	r6, r7, #1
   1a732:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   1a734:	2b00      	cmp	r3, #0
   1a736:	f000 80ab 	beq.w	1a890 <ull_conn_done+0x19c>
		} else if (lll->role) {
   1a73a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a73e:	2b00      	cmp	r3, #0
   1a740:	f2c0 8125 	blt.w	1a98e <ull_conn_done+0x29a>
	if (done->extra.crc_valid) {
   1a744:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   1a748:	2200      	movs	r2, #0
	if (done->extra.crc_valid) {
   1a74a:	07db      	lsls	r3, r3, #31
		conn->connect_expire = 0U;
   1a74c:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   1a750:	f140 80f1 	bpl.w	1a936 <ull_conn_done+0x242>
		conn->supervision_expire = 0U;
   1a754:	2500      	movs	r5, #0
   1a756:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   1a75a:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1a75e:	b12b      	cbz	r3, 1a76c <ull_conn_done+0x78>
		if (conn->procedure_expire > elapsed_event) {
   1a760:	42b3      	cmp	r3, r6
   1a762:	f240 8150 	bls.w	1aa06 <ull_conn_done+0x312>
			conn->procedure_expire -= elapsed_event;
   1a766:	1b9b      	subs	r3, r3, r6
   1a768:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   1a76c:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1a770:	b12b      	cbz	r3, 1a77e <ull_conn_done+0x8a>
		if (conn->apto_expire > elapsed_event) {
   1a772:	42b3      	cmp	r3, r6
   1a774:	f240 8117 	bls.w	1a9a6 <ull_conn_done+0x2b2>
			conn->apto_expire -= elapsed_event;
   1a778:	1b9b      	subs	r3, r3, r6
   1a77a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   1a77e:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			    (conn->llcp_req == conn->llcp_ack)) {
   1a782:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1a786:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
	if (conn->appto_expire != 0U) {
   1a78a:	b15a      	cbz	r2, 1a7a4 <ull_conn_done+0xb0>
		if (conn->appto_expire > elapsed_event) {
   1a78c:	42b2      	cmp	r2, r6
   1a78e:	f200 80e2 	bhi.w	1a956 <ull_conn_done+0x262>
			if ((conn->procedure_expire == 0U) &&
   1a792:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   1a796:	2000      	movs	r0, #0
   1a798:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   1a79c:	b912      	cbnz	r2, 1a7a4 <ull_conn_done+0xb0>
   1a79e:	4299      	cmp	r1, r3
   1a7a0:	f000 813f 	beq.w	1aa22 <ull_conn_done+0x32e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a7a4:	1a5b      	subs	r3, r3, r1
   1a7a6:	f003 0303 	and.w	r3, r3, #3
   1a7aa:	2b02      	cmp	r3, #2
   1a7ac:	f000 80dc 	beq.w	1a968 <ull_conn_done+0x274>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   1a7b0:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1a7b4:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1a7b8:	429a      	cmp	r2, r3
   1a7ba:	f000 8108 	beq.w	1a9ce <ull_conn_done+0x2da>
		lll->latency_event = 0U;
   1a7be:	2200      	movs	r2, #0
   1a7c0:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a7c2:	e9dd 6308 	ldrd	r6, r3, [sp, #32]
	if ((force) || (latency_event != lll->latency_event)) {
   1a7c6:	b915      	cbnz	r5, 1a7ce <ull_conn_done+0xda>
   1a7c8:	42ba      	cmp	r2, r7
   1a7ca:	f000 80da 	beq.w	1a982 <ull_conn_done+0x28e>
		lazy = lll->latency_event + 1U;
   1a7ce:	3201      	adds	r2, #1
   1a7d0:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a7d2:	b913      	cbnz	r3, 1a7da <ull_conn_done+0xe6>
   1a7d4:	2e00      	cmp	r6, #0
   1a7d6:	f000 80b7 	beq.w	1a948 <ull_conn_done+0x254>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a7da:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   1a7dc:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a7de:	9504      	str	r5, [sp, #16]
   1a7e0:	2000      	movs	r0, #0
   1a7e2:	4da6      	ldr	r5, [pc, #664]	; (1aa7c <ull_conn_done+0x388>)
   1a7e4:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1a7e6:	3205      	adds	r2, #5
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1a7e8:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a7ec:	9406      	str	r4, [sp, #24]
   1a7ee:	9600      	str	r6, [sp, #0]
   1a7f0:	b2d2      	uxtb	r2, r2
   1a7f2:	2101      	movs	r1, #1
   1a7f4:	9505      	str	r5, [sp, #20]
   1a7f6:	f7f7 fd97 	bl	12328 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1a7fa:	f030 0302 	bics.w	r3, r0, #2
   1a7fe:	d010      	beq.n	1a822 <ull_conn_done+0x12e>
   1a800:	f7fa fad2 	bl	14da8 <ull_disable_mark_get>
   1a804:	4284      	cmp	r4, r0
   1a806:	d00c      	beq.n	1a822 <ull_conn_done+0x12e>
   1a808:	4a9d      	ldr	r2, [pc, #628]	; (1aa80 <ull_conn_done+0x38c>)
   1a80a:	499e      	ldr	r1, [pc, #632]	; (1aa84 <ull_conn_done+0x390>)
   1a80c:	489e      	ldr	r0, [pc, #632]	; (1aa88 <ull_conn_done+0x394>)
   1a80e:	f240 63cd 	movw	r3, #1741	; 0x6cd
   1a812:	f00d fbc9 	bl	27fa8 <printk>
   1a816:	4040      	eors	r0, r0
   1a818:	f380 8811 	msr	BASEPRI, r0
   1a81c:	f04f 0003 	mov.w	r0, #3
   1a820:	df02      	svc	2
}
   1a822:	b00b      	add	sp, #44	; 0x2c
   1a824:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_terminate.reason_final =
   1a826:	233d      	movs	r3, #61	; 0x3d
   1a828:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	if (reason_final && (
   1a82c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1a830:	2900      	cmp	r1, #0
   1a832:	db1a      	blt.n	1a86a <ull_conn_done+0x176>
			       conn->llcp_terminate.ack) & 0xFF) ==
   1a834:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
   1a838:	f894 0141 	ldrb.w	r0, [r4, #321]	; 0x141
   1a83c:	1a09      	subs	r1, r1, r0
			    lll->role ||
   1a83e:	b2c9      	uxtb	r1, r1
   1a840:	2903      	cmp	r1, #3
   1a842:	d012      	beq.n	1a86a <ull_conn_done+0x176>
			     TERM_ACKED) ||
   1a844:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
   1a848:	f011 0004 	ands.w	r0, r1, #4
   1a84c:	d10d      	bne.n	1a86a <ull_conn_done+0x176>
			    conn->central.terminate_ack ||
   1a84e:	2b3d      	cmp	r3, #61	; 0x3d
   1a850:	d00b      	beq.n	1a86a <ull_conn_done+0x176>
	latency_event = lll->latency_event;
   1a852:	8e27      	ldrh	r7, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   1a854:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   1a856:	1c7e      	adds	r6, r7, #1
	ticks_drift_minus = 0U;
   1a858:	e9cd 0008 	strd	r0, r0, [sp, #32]
	elapsed_event = latency_event + 1;
   1a85c:	b2b6      	uxth	r6, r6
	if (done->extra.trx_cnt) {
   1a85e:	b1bb      	cbz	r3, 1a890 <ull_conn_done+0x19c>
			conn->central.terminate_ack = 1;
   1a860:	f041 0104 	orr.w	r1, r1, #4
   1a864:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
   1a868:	e76c      	b.n	1a744 <ull_conn_done+0x50>
	if (conn == conn_upd_curr) {
   1a86a:	4988      	ldr	r1, [pc, #544]	; (1aa8c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   1a86c:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1a870:	6808      	ldr	r0, [r1, #0]
	*((uint8_t *)rx->pdu) = reason;
   1a872:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   1a876:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1a878:	bf04      	itt	eq
   1a87a:	2000      	moveq	r0, #0
   1a87c:	6008      	streq	r0, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a87e:	2117      	movs	r1, #23
	conn_cleanup_finalize(conn);
   1a880:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a882:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
}
   1a886:	b00b      	add	sp, #44	; 0x2c
   1a888:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	conn_cleanup_finalize(conn);
   1a88c:	f7ff bec0 	b.w	1a610 <conn_cleanup_finalize>
	if (done->extra.crc_valid) {
   1a890:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   1a894:	f013 0301 	ands.w	r3, r3, #1
   1a898:	f47f af5c 	bne.w	1a754 <ull_conn_done+0x60>
	else if (conn->connect_expire) {
   1a89c:	f8b4 10c0 	ldrh.w	r1, [r4, #192]	; 0xc0
   1a8a0:	2900      	cmp	r1, #0
   1a8a2:	d048      	beq.n	1a936 <ull_conn_done+0x242>
		if (conn->connect_expire > elapsed_event) {
   1a8a4:	42b1      	cmp	r1, r6
   1a8a6:	f240 80c3 	bls.w	1aa30 <ull_conn_done+0x33c>
			conn->connect_expire -= elapsed_event;
   1a8aa:	1b89      	subs	r1, r1, r6
	if (conn->supervision_expire) {
   1a8ac:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
			conn->connect_expire -= elapsed_event;
   1a8b0:	f8a4 10c0 	strh.w	r1, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   1a8b4:	2d00      	cmp	r5, #0
   1a8b6:	f43f af50 	beq.w	1a75a <ull_conn_done+0x66>
		if (conn->supervision_expire > elapsed_event) {
   1a8ba:	42ae      	cmp	r6, r5
   1a8bc:	f080 808f 	bcs.w	1a9de <ull_conn_done+0x2ea>
			conn->supervision_expire -= elapsed_event;
   1a8c0:	1bad      	subs	r5, r5, r6
   1a8c2:	b2ab      	uxth	r3, r5
			if (conn->supervision_expire <= 6U) {
   1a8c4:	2b06      	cmp	r3, #6
			lll->latency_event = 0U;
   1a8c6:	f04f 0500 	mov.w	r5, #0
			conn->supervision_expire -= elapsed_event;
   1a8ca:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   1a8ce:	8625      	strh	r5, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   1a8d0:	d97b      	bls.n	1a9ca <ull_conn_done+0x2d6>
			else if (lll->role) {
   1a8d2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1a8d6:	42ab      	cmp	r3, r5
   1a8d8:	f6bf af3f 	bge.w	1a75a <ull_conn_done+0x66>
				if (latency_event) {
   1a8dc:	2f00      	cmp	r7, #0
   1a8de:	d174      	bne.n	1a9ca <ull_conn_done+0x2d6>
					force = conn->periph.force & 0x01;
   1a8e0:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
					conn->periph.force >>= 1U;
   1a8e4:	086b      	lsrs	r3, r5, #1
					if (force) {
   1a8e6:	f015 0501 	ands.w	r5, r5, #1
						conn->periph.force |= BIT(31);
   1a8ea:	bf18      	it	ne
   1a8ec:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
   1a8f0:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
   1a8f4:	e731      	b.n	1a75a <ull_conn_done+0x66>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1a8f6:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1a8fa:	0718      	lsls	r0, r3, #28
   1a8fc:	d53b      	bpl.n	1a976 <ull_conn_done+0x282>
					    (lll->latency + 6)) ?
   1a8fe:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   1a900:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1a904:	1d83      	adds	r3, r0, #6
			appto_reload_new = (conn->apto_reload >
   1a906:	4299      	cmp	r1, r3
   1a908:	bfc4      	itt	gt
   1a90a:	1f8b      	subgt	r3, r1, #6
   1a90c:	1a1b      	subgt	r3, r3, r0
			if (conn->appto_reload != appto_reload_new) {
   1a90e:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   1a912:	bfcc      	ite	gt
   1a914:	b29b      	uxthgt	r3, r3
   1a916:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1a918:	4298      	cmp	r0, r3
   1a91a:	d05a      	beq.n	1a9d2 <ull_conn_done+0x2de>
				conn->appto_reload = appto_reload_new;
   1a91c:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   1a920:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1a924:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   1a928:	e6f9      	b.n	1a71e <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   1a92a:	2300      	movs	r3, #0
   1a92c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1a930:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   1a934:	e6f3      	b.n	1a71e <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   1a936:	f8b4 50c4 	ldrh.w	r5, [r4, #196]	; 0xc4
   1a93a:	2d00      	cmp	r5, #0
   1a93c:	d1bd      	bne.n	1a8ba <ull_conn_done+0x1c6>
			conn->supervision_expire = conn->supervision_reload;
   1a93e:	f8b4 50c2 	ldrh.w	r5, [r4, #194]	; 0xc2
   1a942:	f8a4 50c4 	strh.w	r5, [r4, #196]	; 0xc4
   1a946:	e7b5      	b.n	1a8b4 <ull_conn_done+0x1c0>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a948:	2900      	cmp	r1, #0
   1a94a:	f47f af46 	bne.w	1a7da <ull_conn_done+0xe6>
   1a94e:	2d00      	cmp	r5, #0
   1a950:	f47f af43 	bne.w	1a7da <ull_conn_done+0xe6>
   1a954:	e765      	b.n	1a822 <ull_conn_done+0x12e>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a956:	1a5b      	subs	r3, r3, r1
   1a958:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   1a95c:	1b92      	subs	r2, r2, r6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a95e:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   1a960:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a964:	f47f af24 	bne.w	1a7b0 <ull_conn_done+0xbc>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   1a968:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1a96c:	3b01      	subs	r3, #1
   1a96e:	2b01      	cmp	r3, #1
   1a970:	f63f af1e 	bhi.w	1a7b0 <ull_conn_done+0xbc>
   1a974:	e723      	b.n	1a7be <ull_conn_done+0xca>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1a976:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1a97a:	07d9      	lsls	r1, r3, #31
   1a97c:	f57f aecf 	bpl.w	1a71e <ull_conn_done+0x2a>
   1a980:	e7bd      	b.n	1a8fe <ull_conn_done+0x20a>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1a982:	b913      	cbnz	r3, 1a98a <ull_conn_done+0x296>
   1a984:	2e00      	cmp	r6, #0
   1a986:	f43f af4c 	beq.w	1a822 <ull_conn_done+0x12e>
	lazy = 0U;
   1a98a:	4629      	mov	r1, r5
   1a98c:	e725      	b.n	1a7da <ull_conn_done+0xe6>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1a98e:	aa08      	add	r2, sp, #32
   1a990:	a909      	add	r1, sp, #36	; 0x24
   1a992:	4628      	mov	r0, r5
   1a994:	f7e6 fee0 	bl	1758 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   1a998:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1a99c:	2b00      	cmp	r3, #0
   1a99e:	d058      	beq.n	1aa52 <ull_conn_done+0x35e>
				lll->latency_event = 0;
   1a9a0:	2300      	movs	r3, #0
   1a9a2:	8623      	strh	r3, [r4, #48]	; 0x30
   1a9a4:	e6ce      	b.n	1a744 <ull_conn_done+0x50>
			rx = ll_pdu_rx_alloc();
   1a9a6:	f7fa f977 	bl	14c98 <ll_pdu_rx_alloc>
			if (rx) {
   1a9aa:	4601      	mov	r1, r0
   1a9ac:	2800      	cmp	r0, #0
   1a9ae:	d034      	beq.n	1aa1a <ull_conn_done+0x326>
				rx->handle = lll->handle;
   1a9b0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   1a9b2:	2200      	movs	r2, #0
   1a9b4:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   1a9b8:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   1a9ba:	231a      	movs	r3, #26
   1a9bc:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   1a9be:	6800      	ldr	r0, [r0, #0]
   1a9c0:	f7fa f93c 	bl	14c3c <ll_rx_put>
				ll_rx_sched();
   1a9c4:	f7fa f944 	bl	14c50 <ll_rx_sched>
   1a9c8:	e6d9      	b.n	1a77e <ull_conn_done+0x8a>
					force = 1U;
   1a9ca:	2501      	movs	r5, #1
   1a9cc:	e6c5      	b.n	1a75a <ull_conn_done+0x66>
	if ((force) || (latency_event != lll->latency_event)) {
   1a9ce:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   1a9d0:	e6f7      	b.n	1a7c2 <ull_conn_done+0xce>
			if (conn->apto_expire == 0U) {
   1a9d2:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   1a9d6:	2800      	cmp	r0, #0
   1a9d8:	f47f aea1 	bne.w	1a71e <ull_conn_done+0x2a>
   1a9dc:	e7a0      	b.n	1a920 <ull_conn_done+0x22c>
	if (conn == conn_upd_curr) {
   1a9de:	4b2b      	ldr	r3, [pc, #172]	; (1aa8c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   1a9e0:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   1a9e2:	681a      	ldr	r2, [r3, #0]
   1a9e4:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1a9e6:	bf04      	itt	eq
   1a9e8:	2200      	moveq	r2, #0
   1a9ea:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a9ec:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1a9ee:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   1a9f0:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1a9f4:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   1a9f8:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1a9fc:	4620      	mov	r0, r4
   1a9fe:	f7ff fe07 	bl	1a610 <conn_cleanup_finalize>
}
   1aa02:	b00b      	add	sp, #44	; 0x2c
   1aa04:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn == conn_upd_curr) {
   1aa06:	4b21      	ldr	r3, [pc, #132]	; (1aa8c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   1aa08:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   1aa0a:	681a      	ldr	r2, [r3, #0]
   1aa0c:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1aa0e:	bf04      	itt	eq
   1aa10:	2200      	moveq	r2, #0
   1aa12:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1aa14:	2217      	movs	r2, #23
	*((uint8_t *)rx->pdu) = reason;
   1aa16:	2322      	movs	r3, #34	; 0x22
   1aa18:	e7ea      	b.n	1a9f0 <ull_conn_done+0x2fc>
				conn->apto_expire = 1U;
   1aa1a:	2301      	movs	r3, #1
   1aa1c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1aa20:	e6ad      	b.n	1a77e <ull_conn_done+0x8a>
				conn->llcp_type = LLCP_PING;
   1aa22:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   1aa24:	1e8b      	subs	r3, r1, #2
				conn->llcp_type = LLCP_PING;
   1aa26:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   1aa2a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1aa2e:	e6bf      	b.n	1a7b0 <ull_conn_done+0xbc>
	if (conn == conn_upd_curr) {
   1aa30:	4916      	ldr	r1, [pc, #88]	; (1aa8c <ull_conn_done+0x398>)
	rx->hdr.handle = conn->lll.handle;
   1aa32:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1aa36:	6808      	ldr	r0, [r1, #0]
   1aa38:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   1aa3a:	bf08      	it	eq
   1aa3c:	600b      	streq	r3, [r1, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1aa3e:	2117      	movs	r1, #23
	*((uint8_t *)rx->pdu) = reason;
   1aa40:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1aa42:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   1aa46:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1aa4a:	4620      	mov	r0, r4
   1aa4c:	f7ff fde0 	bl	1a610 <conn_cleanup_finalize>
}
   1aa50:	e6e7      	b.n	1a822 <ull_conn_done+0x12e>
				ull_conn_tx_demux(UINT8_MAX);
   1aa52:	20ff      	movs	r0, #255	; 0xff
   1aa54:	f7ff fd8c 	bl	1a570 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   1aa58:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   1aa5c:	2a00      	cmp	r2, #0
   1aa5e:	d19f      	bne.n	1a9a0 <ull_conn_done+0x2ac>
   1aa60:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1aa64:	f7f6 f9b8 	bl	10dd8 <memq_peek>
   1aa68:	2800      	cmp	r0, #0
   1aa6a:	d199      	bne.n	1a9a0 <ull_conn_done+0x2ac>
			} else if (lll->periph.latency_enabled) {
   1aa6c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1aa70:	075a      	lsls	r2, r3, #29
   1aa72:	f57f ae67 	bpl.w	1a744 <ull_conn_done+0x50>
				lll->latency_event = lll->latency;
   1aa76:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   1aa78:	8623      	strh	r3, [r4, #48]	; 0x30
   1aa7a:	e663      	b.n	1a744 <ull_conn_done+0x50>
   1aa7c:	000167d9 	.word	0x000167d9
   1aa80:	000305cc 	.word	0x000305cc
   1aa84:	00030728 	.word	0x00030728
   1aa88:	0002fedc 	.word	0x0002fedc
   1aa8c:	20002e04 	.word	0x20002e04

0001aa90 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1aa90:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1aa94:	2b00      	cmp	r3, #0
   1aa96:	f000 80e7 	beq.w	1ac68 <ull_conn_tx_lll_enqueue+0x1d8>
   1aa9a:	3901      	subs	r1, #1
{
   1aa9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1aaa0:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 1ac6c <ull_conn_tx_lll_enqueue+0x1dc>
		LL_ASSERT(link);
   1aaa4:	f8df a1c8 	ldr.w	sl, [pc, #456]	; 1ac70 <ull_conn_tx_lll_enqueue+0x1e0>
   1aaa8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 1ac74 <ull_conn_tx_lll_enqueue+0x1e4>
   1aaac:	4604      	mov	r4, r0
   1aaae:	b2cd      	uxtb	r5, r1
   1aab0:	e012      	b.n	1aad8 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   1aab2:	4640      	mov	r0, r8
   1aab4:	f7f6 f926 	bl	10d04 <mem_acquire>
		LL_ASSERT(link);
   1aab8:	4607      	mov	r7, r0
   1aaba:	2800      	cmp	r0, #0
   1aabc:	d066      	beq.n	1ab8c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1aabe:	f104 0268 	add.w	r2, r4, #104	; 0x68
   1aac2:	4631      	mov	r1, r6
   1aac4:	4638      	mov	r0, r7
   1aac6:	f7f6 f97d 	bl	10dc4 <memq_enqueue>
	while (conn->tx_head &&
   1aaca:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1aace:	3d01      	subs	r5, #1
   1aad0:	b2ed      	uxtb	r5, r5
   1aad2:	2b00      	cmp	r3, #0
   1aad4:	f000 8082 	beq.w	1abdc <ull_conn_tx_lll_enqueue+0x14c>
		 !conn->llcp_phy.pause_tx &&
   1aad8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   1aadc:	07d1      	lsls	r1, r2, #31
   1aade:	d403      	bmi.n	1aae8 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   1aae0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   1aae4:	0792      	lsls	r2, r2, #30
   1aae6:	d55f      	bpl.n	1aba8 <ull_conn_tx_lll_enqueue+0x118>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1aae8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1aaec:	4293      	cmp	r3, r2
   1aaee:	d175      	bne.n	1abdc <ull_conn_tx_lll_enqueue+0x14c>
   1aaf0:	2dff      	cmp	r5, #255	; 0xff
   1aaf2:	d073      	beq.n	1abdc <ull_conn_tx_lll_enqueue+0x14c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1aaf4:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   1aaf8:	4620      	mov	r0, r4
   1aafa:	f7fb fe8d 	bl	16818 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1aafe:	7903      	ldrb	r3, [r0, #4]
   1ab00:	f003 0303 	and.w	r3, r3, #3
   1ab04:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1ab06:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1ab08:	d1d3      	bne.n	1aab2 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1ab0a:	79c3      	ldrb	r3, [r0, #7]
   1ab0c:	3b03      	subs	r3, #3
   1ab0e:	2b14      	cmp	r3, #20
   1ab10:	d8cf      	bhi.n	1aab2 <ull_conn_tx_lll_enqueue+0x22>
   1ab12:	a201      	add	r2, pc, #4	; (adr r2, 1ab18 <ull_conn_tx_lll_enqueue+0x88>)
   1ab14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1ab18:	0001ab75 	.word	0x0001ab75
   1ab1c:	0001ab75 	.word	0x0001ab75
   1ab20:	0001aab3 	.word	0x0001aab3
   1ab24:	0001aab3 	.word	0x0001aab3
   1ab28:	0001aab3 	.word	0x0001aab3
   1ab2c:	0001aab3 	.word	0x0001aab3
   1ab30:	0001aab3 	.word	0x0001aab3
   1ab34:	0001ab75 	.word	0x0001ab75
   1ab38:	0001ab6d 	.word	0x0001ab6d
   1ab3c:	0001aab3 	.word	0x0001aab3
   1ab40:	0001aab3 	.word	0x0001aab3
   1ab44:	0001aab3 	.word	0x0001aab3
   1ab48:	0001aab3 	.word	0x0001aab3
   1ab4c:	0001aab3 	.word	0x0001aab3
   1ab50:	0001aab3 	.word	0x0001aab3
   1ab54:	0001aab3 	.word	0x0001aab3
   1ab58:	0001aab3 	.word	0x0001aab3
   1ab5c:	0001aab3 	.word	0x0001aab3
   1ab60:	0001aab3 	.word	0x0001aab3
   1ab64:	0001abe1 	.word	0x0001abe1
   1ab68:	0001abe1 	.word	0x0001abe1
		if (!conn->lll.role) {
   1ab6c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1ab70:	2b00      	cmp	r3, #0
   1ab72:	da9e      	bge.n	1aab2 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1ab74:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1ab78:	f043 0302 	orr.w	r3, r3, #2
   1ab7c:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   1ab80:	4640      	mov	r0, r8
   1ab82:	f7f6 f8bf 	bl	10d04 <mem_acquire>
		LL_ASSERT(link);
   1ab86:	4607      	mov	r7, r0
   1ab88:	2800      	cmp	r0, #0
   1ab8a:	d198      	bne.n	1aabe <ull_conn_tx_lll_enqueue+0x2e>
   1ab8c:	483a      	ldr	r0, [pc, #232]	; (1ac78 <ull_conn_tx_lll_enqueue+0x1e8>)
   1ab8e:	f240 7326 	movw	r3, #1830	; 0x726
   1ab92:	4652      	mov	r2, sl
   1ab94:	4649      	mov	r1, r9
   1ab96:	f00d fa07 	bl	27fa8 <printk>
   1ab9a:	4040      	eors	r0, r0
   1ab9c:	f380 8811 	msr	BASEPRI, r0
   1aba0:	f04f 0003 	mov.w	r0, #3
   1aba4:	df02      	svc	2
   1aba6:	e78a      	b.n	1aabe <ull_conn_tx_lll_enqueue+0x2e>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1aba8:	791a      	ldrb	r2, [r3, #4]
   1abaa:	f002 0203 	and.w	r2, r2, #3
   1abae:	2a03      	cmp	r2, #3
   1abb0:	d19e      	bne.n	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   1abb2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1abb4:	2a03      	cmp	r2, #3
   1abb6:	d001      	beq.n	1abbc <ull_conn_tx_lll_enqueue+0x12c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1abb8:	2a0a      	cmp	r2, #10
   1abba:	d199      	bne.n	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1abbc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1abc0:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1abc4:	428a      	cmp	r2, r1
   1abc6:	d012      	beq.n	1abee <ull_conn_tx_lll_enqueue+0x15e>
   1abc8:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   1abcc:	2a03      	cmp	r2, #3
   1abce:	d08f      	beq.n	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1abd0:	681a      	ldr	r2, [r3, #0]
   1abd2:	b11a      	cbz	r2, 1abdc <ull_conn_tx_lll_enqueue+0x14c>
   1abd4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1abd8:	428a      	cmp	r2, r1
   1abda:	d034      	beq.n	1ac46 <ull_conn_tx_lll_enqueue+0x1b6>
}
   1abdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		conn->llcp_phy.pause_tx = 1U;
   1abe0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1abe4:	f043 0301 	orr.w	r3, r3, #1
   1abe8:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   1abec:	e761      	b.n	1aab2 <ull_conn_tx_lll_enqueue+0x22>
		    ((conn->llcp_req == conn->llcp_ack) &&
   1abee:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   1abf2:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   1abf6:	4288      	cmp	r0, r1
   1abf8:	d1ea      	bne.n	1abd0 <ull_conn_tx_lll_enqueue+0x140>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1abfa:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   1abfe:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   1ac02:	4288      	cmp	r0, r1
   1ac04:	d1e4      	bne.n	1abd0 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1ac06:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   1ac0a:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1ac0e:	4288      	cmp	r0, r1
   1ac10:	d1de      	bne.n	1abd0 <ull_conn_tx_lll_enqueue+0x140>
		       conn->llcp_conn_param.req) ||
   1ac12:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   1ac16:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   1ac1a:	4288      	cmp	r0, r1
   1ac1c:	d1d8      	bne.n	1abd0 <ull_conn_tx_lll_enqueue+0x140>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1ac1e:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   1ac22:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1ac26:	4288      	cmp	r0, r1
   1ac28:	d1d2      	bne.n	1abd0 <ull_conn_tx_lll_enqueue+0x140>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1ac2a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   1ac2e:	3a02      	subs	r2, #2
   1ac30:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1ac34:	2201      	movs	r2, #1
   1ac36:	f362 0301 	bfi	r3, r2, #0, #2
   1ac3a:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   1ac3e:	2303      	movs	r3, #3
   1ac40:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1ac44:	e754      	b.n	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
				conn->tx_head = tx->next;
   1ac46:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   1ac4a:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   1ac4e:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   1ac52:	6810      	ldr	r0, [r2, #0]
   1ac54:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1ac56:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1ac58:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   1ac5c:	2900      	cmp	r1, #0
   1ac5e:	f47f af47 	bne.w	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   1ac62:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   1ac66:	e743      	b.n	1aaf0 <ull_conn_tx_lll_enqueue+0x60>
   1ac68:	4770      	bx	lr
   1ac6a:	bf00      	nop
   1ac6c:	20002f4c 	.word	0x20002f4c
   1ac70:	000305cc 	.word	0x000305cc
   1ac74:	00030624 	.word	0x00030624
   1ac78:	0002fedc 	.word	0x0002fedc

0001ac7c <tx_demux>:
{
   1ac7c:	b510      	push	{r4, lr}
   1ac7e:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   1ac80:	2001      	movs	r0, #1
   1ac82:	f7ff fc75 	bl	1a570 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1ac86:	4620      	mov	r0, r4
   1ac88:	2101      	movs	r1, #1
}
   1ac8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   1ac8e:	f7ff beff 	b.w	1aa90 <ull_conn_tx_lll_enqueue>
   1ac92:	bf00      	nop

0001ac94 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   1ac94:	4901      	ldr	r1, [pc, #4]	; (1ac9c <ull_conn_link_tx_release+0x8>)
   1ac96:	f7f6 b84b 	b.w	10d30 <mem_release>
   1ac9a:	bf00      	nop
   1ac9c:	20002f4c 	.word	0x20002f4c

0001aca0 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   1aca0:	4b01      	ldr	r3, [pc, #4]	; (1aca8 <ull_conn_ack_last_idx_get+0x8>)
}
   1aca2:	78d8      	ldrb	r0, [r3, #3]
   1aca4:	4770      	bx	lr
   1aca6:	bf00      	nop
   1aca8:	20000560 	.word	0x20000560

0001acac <ull_conn_ack_peek>:
{
   1acac:	b510      	push	{r4, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   1acae:	4b0c      	ldr	r3, [pc, #48]	; (1ace0 <ull_conn_ack_peek+0x34>)
   1acb0:	f893 c002 	ldrb.w	ip, [r3, #2]
   1acb4:	f893 e003 	ldrb.w	lr, [r3, #3]
   1acb8:	781c      	ldrb	r4, [r3, #0]
	if (first == last) {
   1acba:	45f4      	cmp	ip, lr
   1acbc:	d00d      	beq.n	1acda <ull_conn_ack_peek+0x2e>
	return (void *)(fifo + first * size);
   1acbe:	fb1c fc04 	smulbb	ip, ip, r4
   1acc2:	3304      	adds	r3, #4
   1acc4:	eb03 040c 	add.w	r4, r3, ip
	*ack_last = mfifo_conn_ack.l;
   1acc8:	f880 e000 	strb.w	lr, [r0]
	*handle = lll_tx->handle;
   1accc:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1acd0:	6863      	ldr	r3, [r4, #4]
	*handle = lll_tx->handle;
   1acd2:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1acd4:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1acd6:	6818      	ldr	r0, [r3, #0]
}
   1acd8:	bd10      	pop	{r4, pc}
		return NULL;
   1acda:	2000      	movs	r0, #0
}
   1acdc:	bd10      	pop	{r4, pc}
   1acde:	bf00      	nop
   1ace0:	20000560 	.word	0x20000560

0001ace4 <ull_conn_ack_by_last_peek>:
{
   1ace4:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1ace6:	4b0b      	ldr	r3, [pc, #44]	; (1ad14 <ull_conn_ack_by_last_peek+0x30>)
   1ace8:	f893 c002 	ldrb.w	ip, [r3, #2]
   1acec:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   1acf0:	4584      	cmp	ip, r0
   1acf2:	d00d      	beq.n	1ad10 <ull_conn_ack_by_last_peek+0x2c>
	return (void *)(fifo + first * size);
   1acf4:	3304      	adds	r3, #4
   1acf6:	fb1c fc0e 	smulbb	ip, ip, lr
   1acfa:	eb03 0e0c 	add.w	lr, r3, ip
	*handle = lll_tx->handle;
   1acfe:	f833 000c 	ldrh.w	r0, [r3, ip]
	*tx = lll_tx->node;
   1ad02:	f8de 3004 	ldr.w	r3, [lr, #4]
	*handle = lll_tx->handle;
   1ad06:	8008      	strh	r0, [r1, #0]
	*tx = lll_tx->node;
   1ad08:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1ad0a:	6818      	ldr	r0, [r3, #0]
}
   1ad0c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1ad10:	2000      	movs	r0, #0
   1ad12:	e7fb      	b.n	1ad0c <ull_conn_ack_by_last_peek+0x28>
   1ad14:	20000560 	.word	0x20000560

0001ad18 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   1ad18:	4b09      	ldr	r3, [pc, #36]	; (1ad40 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1ad1a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1ad1c:	78da      	ldrb	r2, [r3, #3]
   1ad1e:	7818      	ldrb	r0, [r3, #0]
   1ad20:	f893 c001 	ldrb.w	ip, [r3, #1]
   1ad24:	428a      	cmp	r2, r1
   1ad26:	d009      	beq.n	1ad3c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   1ad28:	1c4a      	adds	r2, r1, #1
   1ad2a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1ad2c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1ad30:	4594      	cmp	ip, r2
   1ad32:	bf08      	it	eq
   1ad34:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1ad36:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1ad38:	709a      	strb	r2, [r3, #2]
	return mem;
   1ad3a:	4770      	bx	lr
		return NULL;
   1ad3c:	2000      	movs	r0, #0
}
   1ad3e:	4770      	bx	lr
   1ad40:	20000560 	.word	0x20000560

0001ad44 <ull_conn_lll_ack_enqueue>:
{
   1ad44:	b538      	push	{r3, r4, r5, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1ad46:	4a15      	ldr	r2, [pc, #84]	; (1ad9c <ull_conn_lll_ack_enqueue+0x58>)
   1ad48:	f892 c003 	ldrb.w	ip, [r2, #3]
	if (last == count) {
   1ad4c:	7854      	ldrb	r4, [r2, #1]
   1ad4e:	f892 e002 	ldrb.w	lr, [r2, #2]
   1ad52:	7815      	ldrb	r5, [r2, #0]
	last = last + 1;
   1ad54:	f10c 0301 	add.w	r3, ip, #1
   1ad58:	b2db      	uxtb	r3, r3
		last = 0U;
   1ad5a:	429c      	cmp	r4, r3
   1ad5c:	bf08      	it	eq
   1ad5e:	2300      	moveq	r3, #0
	if (last == first) {
   1ad60:	459e      	cmp	lr, r3
   1ad62:	d00a      	beq.n	1ad7a <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1ad64:	fb1c fc05 	smulbb	ip, ip, r5
   1ad68:	f102 0e04 	add.w	lr, r2, #4
	lll_tx->handle = handle;
   1ad6c:	f82e 000c 	strh.w	r0, [lr, ip]
   1ad70:	44f4      	add	ip, lr
	lll_tx->node = tx;
   1ad72:	f8cc 1004 	str.w	r1, [ip, #4]
	*last = idx; /* Commit: Update write index */
   1ad76:	70d3      	strb	r3, [r2, #3]
}
   1ad78:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(lll_tx);
   1ad7a:	4a09      	ldr	r2, [pc, #36]	; (1ada0 <ull_conn_lll_ack_enqueue+0x5c>)
   1ad7c:	4909      	ldr	r1, [pc, #36]	; (1ada4 <ull_conn_lll_ack_enqueue+0x60>)
   1ad7e:	480a      	ldr	r0, [pc, #40]	; (1ada8 <ull_conn_lll_ack_enqueue+0x64>)
   1ad80:	f240 7376 	movw	r3, #1910	; 0x776
   1ad84:	f00d f910 	bl	27fa8 <printk>
   1ad88:	4040      	eors	r0, r0
   1ad8a:	f380 8811 	msr	BASEPRI, r0
   1ad8e:	f04f 0003 	mov.w	r0, #3
   1ad92:	df02      	svc	2
	lll_tx->handle = handle;
   1ad94:	2300      	movs	r3, #0
   1ad96:	801b      	strh	r3, [r3, #0]
   1ad98:	deff      	udf	#255	; 0xff
   1ad9a:	bf00      	nop
   1ad9c:	20000560 	.word	0x20000560
   1ada0:	000305cc 	.word	0x000305cc
   1ada4:	00030614 	.word	0x00030614
   1ada8:	0002fedc 	.word	0x0002fedc

0001adac <ull_conn_tx_ack>:
{
   1adac:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   1adae:	7953      	ldrb	r3, [r2, #5]
{
   1adb0:	b083      	sub	sp, #12
   1adb2:	4614      	mov	r4, r2
   1adb4:	4605      	mov	r5, r0
   1adb6:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   1adb8:	b37b      	cbz	r3, 1ae1a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1adba:	7923      	ldrb	r3, [r4, #4]
   1adbc:	f003 0203 	and.w	r2, r3, #3
   1adc0:	2a03      	cmp	r2, #3
   1adc2:	d00d      	beq.n	1ade0 <ull_conn_tx_ack+0x34>
	} else if (handle == LLL_HANDLE_INVALID) {
   1adc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1adc8:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   1adca:	bf04      	itt	eq
   1adcc:	f36f 0301 	bfceq	r3, #0, #2
   1add0:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1add2:	4621      	mov	r1, r4
   1add4:	4628      	mov	r0, r5
}
   1add6:	b003      	add	sp, #12
   1add8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1addc:	f7f9 bf72 	b.w	14cc4 <ll_tx_ack_put>
		if (handle != LLL_HANDLE_INVALID) {
   1ade0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1ade4:	429d      	cmp	r5, r3
   1ade6:	d126      	bne.n	1ae36 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   1ade8:	6830      	ldr	r0, [r6, #0]
   1adea:	4284      	cmp	r4, r0
   1adec:	d055      	beq.n	1ae9a <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   1adee:	2800      	cmp	r0, #0
   1adf0:	d0ef      	beq.n	1add2 <ull_conn_tx_ack+0x26>
   1adf2:	4ac1      	ldr	r2, [pc, #772]	; (1b0f8 <ull_conn_tx_ack+0x34c>)
   1adf4:	49c1      	ldr	r1, [pc, #772]	; (1b0fc <ull_conn_tx_ack+0x350>)
   1adf6:	48c2      	ldr	r0, [pc, #776]	; (1b100 <ull_conn_tx_ack+0x354>)
   1adf8:	f44f 63f4 	mov.w	r3, #1952	; 0x7a0
   1adfc:	f00d f8d4 	bl	27fa8 <printk>
   1ae00:	4040      	eors	r0, r0
   1ae02:	f380 8811 	msr	BASEPRI, r0
   1ae06:	f04f 0003 	mov.w	r0, #3
   1ae0a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   1ae0c:	4621      	mov	r1, r4
   1ae0e:	4628      	mov	r0, r5
}
   1ae10:	b003      	add	sp, #12
   1ae12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   1ae16:	f7f9 bf55 	b.w	14cc4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   1ae1a:	4ab7      	ldr	r2, [pc, #732]	; (1b0f8 <ull_conn_tx_ack+0x34c>)
   1ae1c:	49b9      	ldr	r1, [pc, #740]	; (1b104 <ull_conn_tx_ack+0x358>)
   1ae1e:	48b8      	ldr	r0, [pc, #736]	; (1b100 <ull_conn_tx_ack+0x354>)
   1ae20:	f240 7383 	movw	r3, #1923	; 0x783
   1ae24:	f00d f8c0 	bl	27fa8 <printk>
   1ae28:	4040      	eors	r0, r0
   1ae2a:	f380 8811 	msr	BASEPRI, r0
   1ae2e:	f04f 0003 	mov.w	r0, #3
   1ae32:	df02      	svc	2
   1ae34:	e7c1      	b.n	1adba <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae36:	48b4      	ldr	r0, [pc, #720]	; (1b108 <ull_conn_tx_ack+0x35c>)
   1ae38:	462a      	mov	r2, r5
   1ae3a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ae3e:	f7f5 ff8f 	bl	10d60 <mem_get>
	switch (pdu_tx->llctrl.opcode) {
   1ae42:	79e3      	ldrb	r3, [r4, #7]
   1ae44:	3b02      	subs	r3, #2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1ae46:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   1ae48:	2b16      	cmp	r3, #22
   1ae4a:	d836      	bhi.n	1aeba <ull_conn_tx_ack+0x10e>
   1ae4c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1ae50:	00ce00df 	.word	0x00ce00df
   1ae54:	003b0042 	.word	0x003b0042
   1ae58:	002e00ab 	.word	0x002e00ab
   1ae5c:	002e0035 	.word	0x002e0035
   1ae60:	0053009a 	.word	0x0053009a
   1ae64:	00490035 	.word	0x00490035
   1ae68:	00350035 	.word	0x00350035
   1ae6c:	002b0035 	.word	0x002b0035
   1ae70:	002e0035 	.word	0x002e0035
   1ae74:	011a0147 	.word	0x011a0147
   1ae78:	00eb0108 	.word	0x00eb0108
   1ae7c:	00bd      	.short	0x00bd
			LL_ASSERT(link->next);
   1ae7e:	4a9e      	ldr	r2, [pc, #632]	; (1b0f8 <ull_conn_tx_ack+0x34c>)
   1ae80:	49a2      	ldr	r1, [pc, #648]	; (1b10c <ull_conn_tx_ack+0x360>)
   1ae82:	489f      	ldr	r0, [pc, #636]	; (1b100 <ull_conn_tx_ack+0x354>)
   1ae84:	f240 7392 	movw	r3, #1938	; 0x792
   1ae88:	f00d f88e 	bl	27fa8 <printk>
   1ae8c:	4040      	eors	r0, r0
   1ae8e:	f380 8811 	msr	BASEPRI, r0
   1ae92:	f04f 0003 	mov.w	r0, #3
   1ae96:	df02      	svc	2
   1ae98:	2000      	movs	r0, #0
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1ae9a:	499d      	ldr	r1, [pc, #628]	; (1b110 <ull_conn_tx_ack+0x364>)
}
   1ae9c:	b003      	add	sp, #12
   1ae9e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1aea2:	f7f5 bf45 	b.w	10d30 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   1aea6:	7a23      	ldrb	r3, [r4, #8]
   1aea8:	2b03      	cmp	r3, #3
   1aeaa:	d01a      	beq.n	1aee2 <ull_conn_tx_ack+0x136>
			conn->common.txn_lock = 0U;
   1aeac:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
   1aeb0:	f36f 0341 	bfc	r3, #1, #1
   1aeb4:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
			break;
   1aeb8:	e796      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   1aeba:	6830      	ldr	r0, [r6, #0]
   1aebc:	42a0      	cmp	r0, r4
   1aebe:	d0ec      	beq.n	1ae9a <ull_conn_tx_ack+0xee>
		LL_ASSERT(!link->next);
   1aec0:	2800      	cmp	r0, #0
   1aec2:	d196      	bne.n	1adf2 <ull_conn_tx_ack+0x46>
   1aec4:	e785      	b.n	1add2 <ull_conn_tx_ack+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1aec6:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
   1aeca:	f043 0303 	orr.w	r3, r3, #3
   1aece:	f887 30f4 	strb.w	r3, [r7, #244]	; 0xf4
   1aed2:	e789      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   1aed4:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1aed8:	f043 0302 	orr.w	r3, r3, #2
   1aedc:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
   1aee0:	e782      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1aee2:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
   1aee6:	f023 0303 	bic.w	r3, r3, #3
   1aeea:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = 0U;
   1aeee:	2300      	movs	r3, #0
   1aef0:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		break;
   1aef4:	e778      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   1aef6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1aefa:	2b00      	cmp	r3, #0
   1aefc:	dbea      	blt.n	1aed4 <ull_conn_tx_ack+0x128>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1aefe:	7923      	ldrb	r3, [r4, #4]
   1af00:	f043 0303 	orr.w	r3, r3, #3
   1af04:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1af06:	2217      	movs	r2, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1af08:	2303      	movs	r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1af0a:	7162      	strb	r2, [r4, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1af0c:	71e3      	strb	r3, [r4, #7]
   1af0e:	f8d0 3169 	ldr.w	r3, [r0, #361]	; 0x169
   1af12:	f8d0 216d 	ldr.w	r2, [r0, #365]	; 0x16d
   1af16:	60e2      	str	r2, [r4, #12]
   1af18:	60a3      	str	r3, [r4, #8]
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1af1a:	f890 3167 	ldrb.w	r3, [r0, #359]	; 0x167
   1af1e:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1af20:	f890 3168 	ldrb.w	r3, [r0, #360]	; 0x168
   1af24:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1af26:	210c      	movs	r1, #12
   1af28:	f104 0012 	add.w	r0, r4, #18
   1af2c:	f002 fa78 	bl	1d420 <lll_csrand_isr_get>
	    conn->tx_head &&
   1af30:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
	if (
   1af34:	2b00      	cmp	r3, #0
   1af36:	f000 80f2 	beq.w	1b11e <ull_conn_tx_ack+0x372>
	    !conn->llcp_enc.pause_tx &&
   1af3a:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
	    conn->tx_head &&
   1af3e:	0791      	lsls	r1, r2, #30
   1af40:	f100 80ed 	bmi.w	1b11e <ull_conn_tx_ack+0x372>
	    !conn->llcp_phy.pause_tx &&
   1af44:	f897 21bf 	ldrb.w	r2, [r7, #447]	; 0x1bf
   1af48:	07d2      	lsls	r2, r2, #31
   1af4a:	f100 80e8 	bmi.w	1b11e <ull_conn_tx_ack+0x372>
		if (conn->tx_head == conn->tx_data) {
   1af4e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1af52:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1af56:	428b      	cmp	r3, r1
   1af58:	f000 8100 	beq.w	1b15c <ull_conn_tx_ack+0x3b0>
		} else if (!conn->tx_ctrl) {
   1af5c:	2a00      	cmp	r2, #0
   1af5e:	f000 810a 	beq.w	1b176 <ull_conn_tx_ack+0x3ca>
	tx->next = conn->tx_ctrl_last->next;
   1af62:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
   1af66:	681a      	ldr	r2, [r3, #0]
   1af68:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   1af6a:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1af6c:	6823      	ldr	r3, [r4, #0]
	conn->tx_ctrl_last = tx;
   1af6e:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
		if (link->next == (void *)tx) {
   1af72:	6832      	ldr	r2, [r6, #0]
	if (!tx->next) {
   1af74:	2b00      	cmp	r3, #0
   1af76:	f000 80cf 	beq.w	1b118 <ull_conn_tx_ack+0x36c>
		if (link->next == (void *)tx) {
   1af7a:	2a00      	cmp	r2, #0
   1af7c:	f43f af7f 	beq.w	1ae7e <ull_conn_tx_ack+0xd2>
}
   1af80:	b003      	add	sp, #12
   1af82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_enc.pause_tx = 1U;
   1af84:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1af88:	f023 0306 	bic.w	r3, r3, #6
   1af8c:	f043 0306 	orr.w	r3, r3, #6
   1af90:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
		conn->procedure_expire = conn->procedure_reload;
   1af94:	f8b7 30c6 	ldrh.w	r3, [r7, #198]	; 0xc6
   1af98:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
		conn->llcp_enc.ack = conn->llcp_enc.req;
   1af9c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
   1afa0:	f887 3165 	strb.w	r3, [r7, #357]	; 0x165
		break;
   1afa4:	e720      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1afa6:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1afaa:	2b00      	cmp	r3, #0
   1afac:	da8b      	bge.n	1aec6 <ull_conn_tx_ack+0x11a>
			conn->llcp_enc.pause_rx = 0U;
   1afae:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1afb2:	f023 0303 	bic.w	r3, r3, #3
   1afb6:	f880 3166 	strb.w	r3, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   1afba:	2300      	movs	r3, #0
   1afbc:	f8a0 30c8 	strh.w	r3, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   1afc0:	f890 30e4 	ldrb.w	r3, [r0, #228]	; 0xe4
   1afc4:	f880 30e5 	strb.w	r3, [r0, #229]	; 0xe5
   1afc8:	e70e      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1afca:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1afce:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
   1afd2:	f3c3 0382 	ubfx	r3, r3, #2, #3
			lll->phy_tx_time = phy_tx_time[phys];
   1afd6:	f363 1206 	bfi	r2, r3, #4, #3
   1afda:	f887 2060 	strb.w	r2, [r7, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1afde:	f897 31bf 	ldrb.w	r3, [r7, #447]	; 0x1bf
   1afe2:	f36f 0300 	bfc	r3, #0, #1
   1afe6:	f887 31bf 	strb.w	r3, [r7, #447]	; 0x1bf
		break;
   1afea:	e6fd      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
   1afec:	f8d4 3012 	ldr.w	r3, [r4, #18]
   1aff0:	f8d4 2016 	ldr.w	r2, [r4, #22]
   1aff4:	f8c0 20fa 	str.w	r2, [r0, #250]	; 0xfa
   1aff8:	f8c0 30f6 	str.w	r3, [r0, #246]	; 0xf6
   1affc:	f8d4 301a 	ldr.w	r3, [r4, #26]
   1b000:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
		conn->llcp_enc.pause_tx = 1U;
   1b004:	f890 3166 	ldrb.w	r3, [r0, #358]	; 0x166
   1b008:	f043 0302 	orr.w	r3, r3, #2
   1b00c:	e7c0      	b.n	1af90 <ull_conn_tx_ack+0x1e4>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   1b00e:	7a23      	ldrb	r3, [r4, #8]
			conn->llcp_terminate.reason_final =
   1b010:	2b13      	cmp	r3, #19
   1b012:	bf08      	it	eq
   1b014:	2316      	moveq	r3, #22
   1b016:	f880 3143 	strb.w	r3, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   1b01a:	f890 3141 	ldrb.w	r3, [r0, #321]	; 0x141
   1b01e:	3b01      	subs	r3, #1
   1b020:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
	break;
   1b024:	e6e0      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   1b026:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1b02a:	2b00      	cmp	r3, #0
   1b02c:	dad7      	bge.n	1afde <ull_conn_tx_ack+0x232>
				conn->common.txn_lock = 0U;
   1b02e:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1b032:	4b38      	ldr	r3, [pc, #224]	; (1b114 <ull_conn_tx_ack+0x368>)
				conn->common.txn_lock = 0U;
   1b034:	f36f 0241 	bfc	r2, #1, #1
   1b038:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1b03c:	e893 0003 	ldmia.w	r3, {r0, r1}
   1b040:	ab02      	add	r3, sp, #8
   1b042:	e903 0003 	stmdb	r3, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1b046:	f897 31be 	ldrb.w	r3, [r7, #446]	; 0x1be
   1b04a:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
   1b04e:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   1b052:	f003 0307 	and.w	r3, r3, #7
   1b056:	a902      	add	r1, sp, #8
   1b058:	440b      	add	r3, r1
   1b05a:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   1b05e:	e7ba      	b.n	1afd6 <ull_conn_tx_ack+0x22a>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1b060:	f890 31be 	ldrb.w	r3, [r0, #446]	; 0x1be
   1b064:	2202      	movs	r2, #2
   1b066:	f362 0301 	bfi	r3, r2, #0, #2
   1b06a:	f880 31be 	strb.w	r3, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   1b06e:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1b072:	2b00      	cmp	r3, #0
   1b074:	dab3      	bge.n	1afde <ull_conn_tx_ack+0x232>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1b076:	4b27      	ldr	r3, [pc, #156]	; (1b114 <ull_conn_tx_ack+0x368>)
   1b078:	e893 0003 	ldmia.w	r3, {r0, r1}
   1b07c:	ab02      	add	r3, sp, #8
   1b07e:	e903 0003 	stmdb	r3, {r0, r1}
			if (pdu_tx->llctrl.opcode ==
   1b082:	e7e0      	b.n	1b046 <ull_conn_tx_ack+0x29a>
		conn->common.txn_lock = 0U;
   1b084:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1b088:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
		conn->common.txn_lock = 0U;
   1b08c:	f36f 0341 	bfc	r3, #1, #1
   1b090:	f880 30d8 	strb.w	r3, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1b094:	f890 31ad 	ldrb.w	r3, [r0, #429]	; 0x1ad
   1b098:	428b      	cmp	r3, r1
   1b09a:	f43f aea5 	beq.w	1ade8 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1b09e:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   1b0a2:	f002 0307 	and.w	r3, r2, #7
   1b0a6:	2b03      	cmp	r3, #3
   1b0a8:	d005      	beq.n	1b0b6 <ull_conn_tx_ack+0x30a>
   1b0aa:	3303      	adds	r3, #3
   1b0ac:	f003 0307 	and.w	r3, r3, #7
   1b0b0:	2b01      	cmp	r3, #1
   1b0b2:	f63f af02 	bhi.w	1aeba <ull_conn_tx_ack+0x10e>
				conn->lll.max_tx_octets =
   1b0b6:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
   1b0ba:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
				conn->lll.max_tx_time =
   1b0be:	f8b7 31b6 	ldrh.w	r3, [r7, #438]	; 0x1b6
   1b0c2:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   1b0c6:	f002 0307 	and.w	r3, r2, #7
   1b0ca:	2b05      	cmp	r3, #5
   1b0cc:	d032      	beq.n	1b134 <ull_conn_tx_ack+0x388>
				if (!conn->llcp_length.cache.tx_octets) {
   1b0ce:	f8b7 31b8 	ldrh.w	r3, [r7, #440]	; 0x1b8
   1b0d2:	bbab      	cbnz	r3, 1b140 <ull_conn_tx_ack+0x394>
					conn->llcp_length.ack =
   1b0d4:	f887 11ad 	strb.w	r1, [r7, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   1b0d8:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
					break;
   1b0dc:	e684      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_REQ_ACK_WAIT) {
   1b0de:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1b0e2:	f003 0207 	and.w	r2, r3, #7
   1b0e6:	2a01      	cmp	r2, #1
   1b0e8:	f47f ae7e 	bne.w	1ade8 <ull_conn_tx_ack+0x3c>
			conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   1b0ec:	2202      	movs	r2, #2
   1b0ee:	f362 0302 	bfi	r3, r2, #0, #3
   1b0f2:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
   1b0f6:	e677      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
   1b0f8:	000305cc 	.word	0x000305cc
   1b0fc:	00030790 	.word	0x00030790
   1b100:	0002fedc 	.word	0x0002fedc
   1b104:	00030784 	.word	0x00030784
   1b108:	20001ca0 	.word	0x20001ca0
   1b10c:	0003079c 	.word	0x0003079c
   1b110:	20002e98 	.word	0x20002e98
   1b114:	000307a8 	.word	0x000307a8
		conn->tx_data_last = tx;
   1b118:	f8c7 41d4 	str.w	r4, [r7, #468]	; 0x1d4
   1b11c:	e72d      	b.n	1af7a <ull_conn_tx_ack+0x1ce>
		if (!conn->tx_ctrl) {
   1b11e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   1b122:	2a00      	cmp	r2, #0
   1b124:	f47f af1d 	bne.w	1af62 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head;
   1b128:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   1b12a:	e9c7 4471 	strd	r4, r4, [r7, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1b12e:	f8c7 41cc 	str.w	r4, [r7, #460]	; 0x1cc
   1b132:	e71e      	b.n	1af72 <ull_conn_tx_ack+0x1c6>
					conn->llcp_length.state =
   1b134:	2304      	movs	r3, #4
   1b136:	f363 0202 	bfi	r2, r3, #0, #3
   1b13a:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
					break;
   1b13e:	e653      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   1b140:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1b144:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1b146:	f363 0202 	bfi	r2, r3, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1b14a:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1b14e:	f8b7 31ba 	ldrh.w	r3, [r7, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1b152:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1b156:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
				break;
   1b15a:	e645      	b.n	1ade8 <ull_conn_tx_ack+0x3c>
			conn->tx_data = conn->tx_data->next;
   1b15c:	6819      	ldr	r1, [r3, #0]
   1b15e:	f8c7 11d0 	str.w	r1, [r7, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1b162:	2a00      	cmp	r2, #0
   1b164:	f47f aefd 	bne.w	1af62 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head->next;
   1b168:	681a      	ldr	r2, [r3, #0]
   1b16a:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   1b16c:	601c      	str	r4, [r3, #0]
	if (!tx->next) {
   1b16e:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1b170:	e9c7 4472 	strd	r4, r4, [r7, #456]	; 0x1c8
   1b174:	e6fd      	b.n	1af72 <ull_conn_tx_ack+0x1c6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b176:	791a      	ldrb	r2, [r3, #4]
   1b178:	f002 0203 	and.w	r2, r2, #3
   1b17c:	2a03      	cmp	r2, #3
   1b17e:	d002      	beq.n	1b186 <ull_conn_tx_ack+0x3da>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1b180:	e9c7 3372 	strd	r3, r3, [r7, #456]	; 0x1c8
   1b184:	e6ed      	b.n	1af62 <ull_conn_tx_ack+0x1b6>
	    ((pdu_data_tx->llctrl.opcode !=
   1b186:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1b188:	2a03      	cmp	r2, #3
   1b18a:	d0ed      	beq.n	1b168 <ull_conn_tx_ack+0x3bc>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1b18c:	2a0a      	cmp	r2, #10
   1b18e:	d1f7      	bne.n	1b180 <ull_conn_tx_ack+0x3d4>
   1b190:	e7ea      	b.n	1b168 <ull_conn_tx_ack+0x3bc>
   1b192:	bf00      	nop

0001b194 <ull_conn_llcp_req>:
	if (conn_hdr->llcp_req != conn_hdr->llcp_ack) {
   1b194:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1b198:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1b19c:	4293      	cmp	r3, r2
	conn_hdr->llcp_req++;
   1b19e:	bf03      	ittte	eq
   1b1a0:	3301      	addeq	r3, #1
   1b1a2:	f880 30e4 	strbeq.w	r3, [r0, #228]	; 0xe4
	return 0;
   1b1a6:	2000      	moveq	r0, #0
		return BT_HCI_ERR_CMD_DISALLOWED;
   1b1a8:	200c      	movne	r0, #12
}
   1b1aa:	4770      	bx	lr

0001b1ac <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   1b1ac:	f890 2044 	ldrb.w	r2, [r0, #68]	; 0x44
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1b1b0:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	switch (lll->phy_tx_time) {
   1b1b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   1b1b8:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1b1ba:	bf14      	ite	ne
   1b1bc:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1b1be:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   1b1c0:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	return max_tx_octets;
   1b1c4:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1b1c6:	bf14      	ite	ne
   1b1c8:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1b1ca:	3b0b      	subeq	r3, #11
   1b1cc:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1b1ce:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1b1d0:	bf44      	itt	mi
   1b1d2:	3b04      	submi	r3, #4
   1b1d4:	b29b      	uxthmi	r3, r3
}
   1b1d6:	4298      	cmp	r0, r3
   1b1d8:	bf28      	it	cs
   1b1da:	4618      	movcs	r0, r3
   1b1dc:	4770      	bx	lr
   1b1de:	bf00      	nop

0001b1e0 <ull_pdu_data_init>:
}
   1b1e0:	4770      	bx	lr
   1b1e2:	bf00      	nop

0001b1e4 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   1b1e4:	b510      	push	{r4, lr}
   1b1e6:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1b1e8:	b930      	cbnz	r0, 1b1f8 <ticker_update_latency_cancel_op_cb+0x14>

	conn->periph.latency_cancel = 0U;
   1b1ea:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b1ee:	f36f 0382 	bfc	r3, #2, #1
   1b1f2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1b1f6:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1b1f8:	4a09      	ldr	r2, [pc, #36]	; (1b220 <ticker_update_latency_cancel_op_cb+0x3c>)
   1b1fa:	490a      	ldr	r1, [pc, #40]	; (1b224 <ticker_update_latency_cancel_op_cb+0x40>)
   1b1fc:	480a      	ldr	r0, [pc, #40]	; (1b228 <ticker_update_latency_cancel_op_cb+0x44>)
   1b1fe:	f240 23af 	movw	r3, #687	; 0x2af
   1b202:	f00c fed1 	bl	27fa8 <printk>
   1b206:	4040      	eors	r0, r0
   1b208:	f380 8811 	msr	BASEPRI, r0
   1b20c:	f04f 0003 	mov.w	r0, #3
   1b210:	df02      	svc	2
	conn->periph.latency_cancel = 0U;
   1b212:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1b216:	f36f 0382 	bfc	r3, #2, #1
   1b21a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   1b21e:	bd10      	pop	{r4, pc}
   1b220:	000307c8 	.word	0x000307c8
   1b224:	00030810 	.word	0x00030810
   1b228:	0002fedc 	.word	0x0002fedc

0001b22c <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b22c:	b900      	cbnz	r0, 1b230 <ticker_op_cb+0x4>
   1b22e:	4770      	bx	lr
{
   1b230:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b232:	4a07      	ldr	r2, [pc, #28]	; (1b250 <ticker_op_cb+0x24>)
   1b234:	4907      	ldr	r1, [pc, #28]	; (1b254 <ticker_op_cb+0x28>)
   1b236:	4808      	ldr	r0, [pc, #32]	; (1b258 <ticker_op_cb+0x2c>)
   1b238:	f240 23a7 	movw	r3, #679	; 0x2a7
   1b23c:	f00c feb4 	bl	27fa8 <printk>
   1b240:	4040      	eors	r0, r0
   1b242:	f380 8811 	msr	BASEPRI, r0
   1b246:	f04f 0003 	mov.w	r0, #3
   1b24a:	df02      	svc	2
}
   1b24c:	bd08      	pop	{r3, pc}
   1b24e:	bf00      	nop
   1b250:	000307c8 	.word	0x000307c8
   1b254:	0003062c 	.word	0x0003062c
   1b258:	0002fedc 	.word	0x0002fedc

0001b25c <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b25c:	2801      	cmp	r0, #1
   1b25e:	d000      	beq.n	1b262 <ticker_op_stop_adv_cb+0x6>
   1b260:	4770      	bx	lr
{
   1b262:	b510      	push	{r4, lr}
   1b264:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1b266:	f7f9 fd9f 	bl	14da8 <ull_disable_mark_get>
   1b26a:	4284      	cmp	r4, r0
   1b26c:	d00c      	beq.n	1b288 <ticker_op_stop_adv_cb+0x2c>
   1b26e:	4a07      	ldr	r2, [pc, #28]	; (1b28c <ticker_op_stop_adv_cb+0x30>)
   1b270:	4907      	ldr	r1, [pc, #28]	; (1b290 <ticker_op_stop_adv_cb+0x34>)
   1b272:	4808      	ldr	r0, [pc, #32]	; (1b294 <ticker_op_stop_adv_cb+0x38>)
   1b274:	f240 239f 	movw	r3, #671	; 0x29f
   1b278:	f00c fe96 	bl	27fa8 <printk>
   1b27c:	4040      	eors	r0, r0
   1b27e:	f380 8811 	msr	BASEPRI, r0
   1b282:	f04f 0003 	mov.w	r0, #3
   1b286:	df02      	svc	2
}
   1b288:	bd10      	pop	{r4, pc}
   1b28a:	bf00      	nop
   1b28c:	000307c8 	.word	0x000307c8
   1b290:	00030824 	.word	0x00030824
   1b294:	0002fedc 	.word	0x0002fedc

0001b298 <ull_periph_ticker_cb>:
{
   1b298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b29c:	9c07      	ldr	r4, [sp, #28]
   1b29e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b2a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1b2a4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b2a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b2aa:	4299      	cmp	r1, r3
   1b2ac:	d026      	beq.n	1b2fc <ull_periph_ticker_cb+0x64>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1b2ae:	4606      	mov	r6, r0
   1b2b0:	4617      	mov	r7, r2
   1b2b2:	4601      	mov	r1, r0
   1b2b4:	462a      	mov	r2, r5
   1b2b6:	4620      	mov	r0, r4
   1b2b8:	f7fd fe8c 	bl	18fd4 <ull_conn_llcp>
		if (ret) {
   1b2bc:	b9f0      	cbnz	r0, 1b2fc <ull_periph_ticker_cb+0x64>
	return ++hdr->ref;
   1b2be:	7823      	ldrb	r3, [r4, #0]
   1b2c0:	3301      	adds	r3, #1
   1b2c2:	b2db      	uxtb	r3, r3
   1b2c4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1b2c6:	b34b      	cbz	r3, 1b31c <ull_periph_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   1b2c8:	491b      	ldr	r1, [pc, #108]	; (1b338 <ull_periph_ticker_cb+0xa0>)
	mfy.param = &p;
   1b2ca:	4b1c      	ldr	r3, [pc, #112]	; (1b33c <ull_periph_ticker_cb+0xa4>)
	p.lazy = lazy;
   1b2cc:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1b2ce:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b2d2:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1b2d4:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1b2d6:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1b2da:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1b2de:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b2e0:	2001      	movs	r0, #1
   1b2e2:	4611      	mov	r1, r2
   1b2e4:	f7f5 fde2 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!err);
   1b2e8:	b950      	cbnz	r0, 1b300 <ull_periph_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   1b2ea:	20ff      	movs	r0, #255	; 0xff
   1b2ec:	f7ff f940 	bl	1a570 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b2f0:	4620      	mov	r0, r4
   1b2f2:	21ff      	movs	r1, #255	; 0xff
}
   1b2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b2f8:	f7ff bbca 	b.w	1aa90 <ull_conn_tx_lll_enqueue>
}
   1b2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1b300:	4a0f      	ldr	r2, [pc, #60]	; (1b340 <ull_periph_ticker_cb+0xa8>)
   1b302:	4910      	ldr	r1, [pc, #64]	; (1b344 <ull_periph_ticker_cb+0xac>)
   1b304:	4810      	ldr	r0, [pc, #64]	; (1b348 <ull_periph_ticker_cb+0xb0>)
   1b306:	f240 232a 	movw	r3, #554	; 0x22a
   1b30a:	f00c fe4d 	bl	27fa8 <printk>
   1b30e:	4040      	eors	r0, r0
   1b310:	f380 8811 	msr	BASEPRI, r0
   1b314:	f04f 0003 	mov.w	r0, #3
   1b318:	df02      	svc	2
   1b31a:	e7e6      	b.n	1b2ea <ull_periph_ticker_cb+0x52>
	LL_ASSERT(ref);
   1b31c:	4a08      	ldr	r2, [pc, #32]	; (1b340 <ull_periph_ticker_cb+0xa8>)
   1b31e:	490b      	ldr	r1, [pc, #44]	; (1b34c <ull_periph_ticker_cb+0xb4>)
   1b320:	4809      	ldr	r0, [pc, #36]	; (1b348 <ull_periph_ticker_cb+0xb0>)
   1b322:	f240 231d 	movw	r3, #541	; 0x21d
   1b326:	f00c fe3f 	bl	27fa8 <printk>
   1b32a:	4040      	eors	r0, r0
   1b32c:	f380 8811 	msr	BASEPRI, r0
   1b330:	f04f 0003 	mov.w	r0, #3
   1b334:	df02      	svc	2
   1b336:	e7c7      	b.n	1b2c8 <ull_periph_ticker_cb+0x30>
   1b338:	20002fa0 	.word	0x20002fa0
   1b33c:	20000628 	.word	0x20000628
   1b340:	000307c8 	.word	0x000307c8
   1b344:	00030254 	.word	0x00030254
   1b348:	0002fedc 	.word	0x0002fedc
   1b34c:	0003050c 	.word	0x0003050c

0001b350 <ull_periph_latency_cancel>:
	if (conn->lll.latency_event && !conn->periph.latency_cancel) {
   1b350:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   1b352:	b123      	cbz	r3, 1b35e <ull_periph_latency_cancel+0xe>
   1b354:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   1b358:	f012 0304 	ands.w	r3, r2, #4
   1b35c:	d000      	beq.n	1b360 <ull_periph_latency_cancel+0x10>
   1b35e:	4770      	bx	lr
{
   1b360:	b510      	push	{r4, lr}
		conn->periph.latency_cancel = 1U;
   1b362:	f042 0204 	orr.w	r2, r2, #4
{
   1b366:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b368:	4c11      	ldr	r4, [pc, #68]	; (1b3b0 <ull_periph_latency_cancel+0x60>)
		conn->periph.latency_cancel = 1U;
   1b36a:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1b36e:	3105      	adds	r1, #5
   1b370:	2201      	movs	r2, #1
   1b372:	e9cd 3202 	strd	r3, r2, [sp, #8]
   1b376:	e9cd 3404 	strd	r3, r4, [sp, #16]
   1b37a:	e9cd 3300 	strd	r3, r3, [sp]
   1b37e:	9006      	str	r0, [sp, #24]
   1b380:	b2ca      	uxtb	r2, r1
   1b382:	4618      	mov	r0, r3
   1b384:	2103      	movs	r1, #3
   1b386:	f7f6 ffcf 	bl	12328 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1b38a:	f030 0302 	bics.w	r3, r0, #2
   1b38e:	d00c      	beq.n	1b3aa <ull_periph_latency_cancel+0x5a>
   1b390:	4a08      	ldr	r2, [pc, #32]	; (1b3b4 <ull_periph_latency_cancel+0x64>)
   1b392:	4909      	ldr	r1, [pc, #36]	; (1b3b8 <ull_periph_latency_cancel+0x68>)
   1b394:	4809      	ldr	r0, [pc, #36]	; (1b3bc <ull_periph_latency_cancel+0x6c>)
   1b396:	f240 13e3 	movw	r3, #483	; 0x1e3
   1b39a:	f00c fe05 	bl	27fa8 <printk>
   1b39e:	4040      	eors	r0, r0
   1b3a0:	f380 8811 	msr	BASEPRI, r0
   1b3a4:	f04f 0003 	mov.w	r0, #3
   1b3a8:	df02      	svc	2
}
   1b3aa:	b008      	add	sp, #32
   1b3ac:	bd10      	pop	{r4, pc}
   1b3ae:	bf00      	nop
   1b3b0:	0001b1e5 	.word	0x0001b1e5
   1b3b4:	000307c8 	.word	0x000307c8
   1b3b8:	000306ac 	.word	0x000306ac
   1b3bc:	0002fedc 	.word	0x0002fedc

0001b3c0 <ll_start_enc_req_send>:
{
   1b3c0:	b538      	push	{r3, r4, r5, lr}
   1b3c2:	460c      	mov	r4, r1
   1b3c4:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   1b3c6:	f7fb fe3f 	bl	17048 <ll_connected_get>
	if (!conn) {
   1b3ca:	2800      	cmp	r0, #0
   1b3cc:	d048      	beq.n	1b460 <ll_start_enc_req_send+0xa0>
	if (error_code) {
   1b3ce:	4603      	mov	r3, r0
   1b3d0:	b9fc      	cbnz	r4, 1b412 <ll_start_enc_req_send+0x52>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1b3d2:	f890 10e4 	ldrb.w	r1, [r0, #228]	; 0xe4
   1b3d6:	f890 20e5 	ldrb.w	r2, [r0, #229]	; 0xe5
   1b3da:	4291      	cmp	r1, r2
   1b3dc:	d037      	beq.n	1b44e <ll_start_enc_req_send+0x8e>
   1b3de:	f890 20e6 	ldrb.w	r2, [r0, #230]	; 0xe6
   1b3e2:	2a03      	cmp	r2, #3
   1b3e4:	d133      	bne.n	1b44e <ll_start_enc_req_send+0x8e>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b3e6:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	; 0xf4
   1b3ea:	f8d5 e000 	ldr.w	lr, [r5]
   1b3ee:	f8d5 c004 	ldr.w	ip, [r5, #4]
   1b3f2:	68a9      	ldr	r1, [r5, #8]
	return 0;
   1b3f4:	4620      	mov	r0, r4
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b3f6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
   1b3fa:	68ec      	ldr	r4, [r5, #12]
   1b3fc:	f8c3 417d 	str.w	r4, [r3, #381]	; 0x17d
   1b400:	f8c3 e171 	str.w	lr, [r3, #369]	; 0x171
   1b404:	f8c3 c175 	str.w	ip, [r3, #373]	; 0x175
   1b408:	f8c3 1179 	str.w	r1, [r3, #377]	; 0x179
   1b40c:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
}
   1b410:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1b412:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1b416:	f010 0004 	ands.w	r0, r0, #4
   1b41a:	d112      	bne.n	1b442 <ll_start_enc_req_send+0x82>
			if ((conn->llcp_req == conn->llcp_ack) ||
   1b41c:	f893 10e4 	ldrb.w	r1, [r3, #228]	; 0xe4
   1b420:	f893 20e5 	ldrb.w	r2, [r3, #229]	; 0xe5
   1b424:	4291      	cmp	r1, r2
   1b426:	d012      	beq.n	1b44e <ll_start_enc_req_send+0x8e>
   1b428:	f893 20e6 	ldrb.w	r2, [r3, #230]	; 0xe6
   1b42c:	2a03      	cmp	r2, #3
   1b42e:	d10e      	bne.n	1b44e <ll_start_enc_req_send+0x8e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b430:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   1b434:	f883 40f5 	strb.w	r4, [r3, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1b438:	f360 0201 	bfi	r2, r0, #0, #2
   1b43c:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
}
   1b440:	bd38      	pop	{r3, r4, r5, pc}
			    conn->llcp_terminate.req) {
   1b442:	f893 1140 	ldrb.w	r1, [r3, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1b446:	f893 2141 	ldrb.w	r2, [r3, #321]	; 0x141
   1b44a:	428a      	cmp	r2, r1
   1b44c:	d001      	beq.n	1b452 <ll_start_enc_req_send+0x92>
				return BT_HCI_ERR_CMD_DISALLOWED;
   1b44e:	200c      	movs	r0, #12
}
   1b450:	bd38      	pop	{r3, r4, r5, pc}
			conn->llcp_terminate.req++;
   1b452:	3201      	adds	r2, #1
			conn->llcp_terminate.reason_own = error_code;
   1b454:	f883 4142 	strb.w	r4, [r3, #322]	; 0x142
			conn->llcp_terminate.req++;
   1b458:	f883 2140 	strb.w	r2, [r3, #320]	; 0x140
	return 0;
   1b45c:	2000      	movs	r0, #0
}
   1b45e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b460:	2002      	movs	r0, #2
}
   1b462:	bd38      	pop	{r3, r4, r5, pc}

0001b464 <ticker_op_stop_scan_cb>:
}
   1b464:	4770      	bx	lr
   1b466:	bf00      	nop

0001b468 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b468:	b900      	cbnz	r0, 1b46c <ticker_op_cb+0x4>
   1b46a:	4770      	bx	lr
{
   1b46c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1b46e:	4a07      	ldr	r2, [pc, #28]	; (1b48c <ticker_op_cb+0x24>)
   1b470:	4907      	ldr	r1, [pc, #28]	; (1b490 <ticker_op_cb+0x28>)
   1b472:	4808      	ldr	r0, [pc, #32]	; (1b494 <ticker_op_cb+0x2c>)
   1b474:	f240 43ad 	movw	r3, #1197	; 0x4ad
   1b478:	f00c fd96 	bl	27fa8 <printk>
   1b47c:	4040      	eors	r0, r0
   1b47e:	f380 8811 	msr	BASEPRI, r0
   1b482:	f04f 0003 	mov.w	r0, #3
   1b486:	df02      	svc	2
}
   1b488:	bd08      	pop	{r3, pc}
   1b48a:	bf00      	nop
   1b48c:	00030868 	.word	0x00030868
   1b490:	0003062c 	.word	0x0003062c
   1b494:	0002fedc 	.word	0x0002fedc

0001b498 <ull_central_ticker_cb>:
{
   1b498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b49c:	9c07      	ldr	r4, [sp, #28]
   1b49e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b4a2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   1b4a4:	461d      	mov	r5, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   1b4a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b4aa:	4299      	cmp	r1, r3
   1b4ac:	d02d      	beq.n	1b50a <ull_central_ticker_cb+0x72>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   1b4ae:	4606      	mov	r6, r0
   1b4b0:	4617      	mov	r7, r2
   1b4b2:	4601      	mov	r1, r0
   1b4b4:	462a      	mov	r2, r5
   1b4b6:	4620      	mov	r0, r4
   1b4b8:	f7fd fd8c 	bl	18fd4 <ull_conn_llcp>
		if (ret) {
   1b4bc:	bb28      	cbnz	r0, 1b50a <ull_central_ticker_cb+0x72>
   1b4be:	7823      	ldrb	r3, [r4, #0]
   1b4c0:	3301      	adds	r3, #1
   1b4c2:	b2db      	uxtb	r3, r3
   1b4c4:	7023      	strb	r3, [r4, #0]
	LL_ASSERT(ref);
   1b4c6:	b383      	cbz	r3, 1b52a <ull_central_ticker_cb+0x92>
	ull_conn_tx_demux(2);
   1b4c8:	2002      	movs	r0, #2
   1b4ca:	f7ff f851 	bl	1a570 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, 2);
   1b4ce:	2102      	movs	r1, #2
   1b4d0:	4620      	mov	r0, r4
   1b4d2:	f7ff fadd 	bl	1aa90 <ull_conn_tx_lll_enqueue>
	p.ticks_at_expire = ticks_at_expire;
   1b4d6:	491c      	ldr	r1, [pc, #112]	; (1b548 <ull_central_ticker_cb+0xb0>)
	mfy.param = &p;
   1b4d8:	4b1c      	ldr	r3, [pc, #112]	; (1b54c <ull_central_ticker_cb+0xb4>)
	p.lazy = lazy;
   1b4da:	810d      	strh	r5, [r1, #8]
	p.param = &conn->lll;
   1b4dc:	f104 001c 	add.w	r0, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b4e0:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1b4e2:	60c8      	str	r0, [r1, #12]
	p.remainder = remainder;
   1b4e4:	e9c1 6700 	strd	r6, r7, [r1]
	p.force = force;
   1b4e8:	f881 800a 	strb.w	r8, [r1, #10]
	mfy.param = &p;
   1b4ec:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1b4ee:	2001      	movs	r0, #1
   1b4f0:	4611      	mov	r1, r2
   1b4f2:	f7f5 fcdb 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!err);
   1b4f6:	b950      	cbnz	r0, 1b50e <ull_central_ticker_cb+0x76>
	ull_conn_tx_demux(UINT8_MAX);
   1b4f8:	20ff      	movs	r0, #255	; 0xff
   1b4fa:	f7ff f839 	bl	1a570 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b4fe:	4620      	mov	r0, r4
   1b500:	21ff      	movs	r1, #255	; 0xff
}
   1b502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1b506:	f7ff bac3 	b.w	1aa90 <ull_conn_tx_lll_enqueue>
}
   1b50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   1b50e:	4a10      	ldr	r2, [pc, #64]	; (1b550 <ull_central_ticker_cb+0xb8>)
   1b510:	4910      	ldr	r1, [pc, #64]	; (1b554 <ull_central_ticker_cb+0xbc>)
   1b512:	4811      	ldr	r0, [pc, #68]	; (1b558 <ull_central_ticker_cb+0xc0>)
   1b514:	f240 434d 	movw	r3, #1101	; 0x44d
   1b518:	f00c fd46 	bl	27fa8 <printk>
   1b51c:	4040      	eors	r0, r0
   1b51e:	f380 8811 	msr	BASEPRI, r0
   1b522:	f04f 0003 	mov.w	r0, #3
   1b526:	df02      	svc	2
   1b528:	e7e6      	b.n	1b4f8 <ull_central_ticker_cb+0x60>
	LL_ASSERT(ref);
   1b52a:	4a09      	ldr	r2, [pc, #36]	; (1b550 <ull_central_ticker_cb+0xb8>)
   1b52c:	490b      	ldr	r1, [pc, #44]	; (1b55c <ull_central_ticker_cb+0xc4>)
   1b52e:	480a      	ldr	r0, [pc, #40]	; (1b558 <ull_central_ticker_cb+0xc0>)
   1b530:	f240 433a 	movw	r3, #1082	; 0x43a
   1b534:	f00c fd38 	bl	27fa8 <printk>
   1b538:	4040      	eors	r0, r0
   1b53a:	f380 8811 	msr	BASEPRI, r0
   1b53e:	f04f 0003 	mov.w	r0, #3
   1b542:	df02      	svc	2
   1b544:	e7c0      	b.n	1b4c8 <ull_central_ticker_cb+0x30>
   1b546:	bf00      	nop
   1b548:	20002fb8 	.word	0x20002fb8
   1b54c:	20000638 	.word	0x20000638
   1b550:	00030868 	.word	0x00030868
   1b554:	00030254 	.word	0x00030254
   1b558:	0002fedc 	.word	0x0002fedc
   1b55c:	0003050c 	.word	0x0003050c

0001b560 <ll_connect_disable>:
{
   1b560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b564:	4606      	mov	r6, r0
	scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1b566:	2000      	movs	r0, #0
   1b568:	f7fa fe96 	bl	16298 <ull_scan_is_enabled_get>
	if (!scan) {
   1b56c:	b368      	cbz	r0, 1b5ca <ll_connect_disable+0x6a>
	conn_lll = scan_lll->conn;
   1b56e:	6a03      	ldr	r3, [r0, #32]
	if (!conn_lll) {
   1b570:	4604      	mov	r4, r0
   1b572:	b353      	cbz	r3, 1b5ca <ll_connect_disable+0x6a>
	conn_lll->central.cancelled = 1U;
   1b574:	f893 2020 	ldrb.w	r2, [r3, #32]
   1b578:	f042 0202 	orr.w	r2, r2, #2
   1b57c:	f883 2020 	strb.w	r2, [r3, #32]
	conn_lll = scan_lll->conn;
   1b580:	6a07      	ldr	r7, [r0, #32]
	if (!conn_lll) {
   1b582:	b317      	cbz	r7, 1b5ca <ll_connect_disable+0x6a>
		err = ull_scan_disable(SCAN_HANDLE_1M, scan);
   1b584:	4601      	mov	r1, r0
   1b586:	2000      	movs	r0, #0
   1b588:	f7fa fdd0 	bl	1612c <ull_scan_disable>
	if (!err) {
   1b58c:	4605      	mov	r5, r0
   1b58e:	b9c8      	cbnz	r0, 1b5c4 <ll_connect_disable+0x64>
		conn = HDR_LLL2ULL(conn_lll);
   1b590:	683f      	ldr	r7, [r7, #0]
		link = node_rx->hdr.link;
   1b592:	f8d7 8144 	ldr.w	r8, [r7, #324]	; 0x144
		node_rx = (void *)&conn->llcp_terminate.node_rx;
   1b596:	f507 79a2 	add.w	r9, r7, #324	; 0x144
		LL_ASSERT(link);
   1b59a:	f1b8 0f00 	cmp.w	r8, #0
   1b59e:	d018      	beq.n	1b5d2 <ll_connect_disable+0x72>
		ll_rx_link_release(link);
   1b5a0:	4640      	mov	r0, r8
   1b5a2:	f7f9 fb39 	bl	14c18 <ll_rx_link_release>
		node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1b5a6:	2316      	movs	r3, #22
   1b5a8:	f887 3148 	strb.w	r3, [r7, #328]	; 0x148
		node_rx->hdr.handle = 0xffff;
   1b5ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1b5b0:	f8a7 314a 	strh.w	r3, [r7, #330]	; 0x14a
		scan_lll = &scan->lll;
   1b5b4:	341c      	adds	r4, #28
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b5b6:	2302      	movs	r3, #2
		node_rx->hdr.rx_ftr.param = scan_lll;
   1b5b8:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
		cc->status = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b5bc:	f887 3160 	strb.w	r3, [r7, #352]	; 0x160
		*rx = node_rx;
   1b5c0:	f8c6 9000 	str.w	r9, [r6]
}
   1b5c4:	4628      	mov	r0, r5
   1b5c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1b5ca:	250c      	movs	r5, #12
}
   1b5cc:	4628      	mov	r0, r5
   1b5ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(link);
   1b5d2:	4a07      	ldr	r2, [pc, #28]	; (1b5f0 <ll_connect_disable+0x90>)
   1b5d4:	4907      	ldr	r1, [pc, #28]	; (1b5f4 <ll_connect_disable+0x94>)
   1b5d6:	4808      	ldr	r0, [pc, #32]	; (1b5f8 <ll_connect_disable+0x98>)
   1b5d8:	f240 235b 	movw	r3, #603	; 0x25b
   1b5dc:	f00c fce4 	bl	27fa8 <printk>
   1b5e0:	4040      	eors	r0, r0
   1b5e2:	f380 8811 	msr	BASEPRI, r0
   1b5e6:	f04f 0003 	mov.w	r0, #3
   1b5ea:	df02      	svc	2
   1b5ec:	e7d8      	b.n	1b5a0 <ll_connect_disable+0x40>
   1b5ee:	bf00      	nop
   1b5f0:	00030868 	.word	0x00030868
   1b5f4:	00030624 	.word	0x00030624
   1b5f8:	0002fedc 	.word	0x0002fedc

0001b5fc <ll_enc_req_send>:
{
   1b5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b600:	4680      	mov	r8, r0
   1b602:	460f      	mov	r7, r1
   1b604:	4691      	mov	r9, r2
   1b606:	461e      	mov	r6, r3
	conn = ll_connected_get(handle);
   1b608:	f7fb fd1e 	bl	17048 <ll_connected_get>
	if (!conn) {
   1b60c:	2800      	cmp	r0, #0
   1b60e:	d06f      	beq.n	1b6f0 <ll_enc_req_send+0xf4>
	if ((conn->llcp_enc.req != conn->llcp_enc.ack) ||
   1b610:	f890 2164 	ldrb.w	r2, [r0, #356]	; 0x164
   1b614:	f890 3165 	ldrb.w	r3, [r0, #357]	; 0x165
   1b618:	429a      	cmp	r2, r3
   1b61a:	4604      	mov	r4, r0
   1b61c:	d148      	bne.n	1b6b0 <ll_enc_req_send+0xb4>
   1b61e:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   1b622:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1b626:	429a      	cmp	r2, r3
   1b628:	d003      	beq.n	1b632 <ll_enc_req_send+0x36>
	    ((conn->llcp_req != conn->llcp_ack) &&
   1b62a:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   1b62e:	2b03      	cmp	r3, #3
   1b630:	d03e      	beq.n	1b6b0 <ll_enc_req_send+0xb4>
	tx = ll_tx_mem_acquire();
   1b632:	f7fb fd1b 	bl	1706c <ll_tx_mem_acquire>
	if (tx) {
   1b636:	4605      	mov	r5, r0
   1b638:	b3d0      	cbz	r0, 1b6b0 <ll_enc_req_send+0xb4>
		ull_pdu_data_init(pdu_data_tx);
   1b63a:	3004      	adds	r0, #4
   1b63c:	f7ff fdd0 	bl	1b1e0 <ull_pdu_data_init>
		if (!conn->lll.enc_rx && !conn->lll.enc_tx) {
   1b640:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1b644:	6830      	ldr	r0, [r6, #0]
   1b646:	6871      	ldr	r1, [r6, #4]
   1b648:	68b2      	ldr	r2, [r6, #8]
   1b64a:	68f6      	ldr	r6, [r6, #12]
   1b64c:	f8c4 617d 	str.w	r6, [r4, #381]	; 0x17d
   1b650:	f013 0318 	ands.w	r3, r3, #24
   1b654:	f8c4 0171 	str.w	r0, [r4, #369]	; 0x171
   1b658:	f8c4 1175 	str.w	r1, [r4, #373]	; 0x175
   1b65c:	f8c4 2179 	str.w	r2, [r4, #377]	; 0x179
   1b660:	d029      	beq.n	1b6b6 <ll_enc_req_send+0xba>
		} else if (conn->lll.enc_rx && conn->lll.enc_tx) {
   1b662:	2b18      	cmp	r3, #24
   1b664:	d121      	bne.n	1b6aa <ll_enc_req_send+0xae>
   1b666:	683b      	ldr	r3, [r7, #0]
   1b668:	687a      	ldr	r2, [r7, #4]
   1b66a:	f8c4 216d 	str.w	r2, [r4, #365]	; 0x16d
   1b66e:	f8c4 3169 	str.w	r3, [r4, #361]	; 0x169
			conn->llcp_enc.ediv[0] = ediv[0];
   1b672:	f899 3000 	ldrb.w	r3, [r9]
   1b676:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
			conn->llcp_enc.ediv[1] = ediv[1];
   1b67a:	f899 3001 	ldrb.w	r3, [r9, #1]
   1b67e:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b682:	792b      	ldrb	r3, [r5, #4]
   1b684:	f043 0303 	orr.w	r3, r3, #3
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1b688:	2201      	movs	r2, #1
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b68a:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->llctrl.opcode =
   1b68c:	230a      	movs	r3, #10
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   1b68e:	716a      	strb	r2, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1b690:	71eb      	strb	r3, [r5, #7]
		if (ll_tx_mem_enqueue(handle, tx)) {
   1b692:	4629      	mov	r1, r5
   1b694:	4640      	mov	r0, r8
   1b696:	f7fb fcf5 	bl	17084 <ll_tx_mem_enqueue>
   1b69a:	b930      	cbnz	r0, 1b6aa <ll_enc_req_send+0xae>
		conn->llcp_enc.req++;
   1b69c:	f894 3164 	ldrb.w	r3, [r4, #356]	; 0x164
   1b6a0:	3301      	adds	r3, #1
   1b6a2:	f884 3164 	strb.w	r3, [r4, #356]	; 0x164
}
   1b6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ll_tx_mem_release(tx);
   1b6aa:	4628      	mov	r0, r5
   1b6ac:	f7fb fce4 	bl	17078 <ll_tx_mem_release>
			return BT_HCI_ERR_CMD_DISALLOWED;
   1b6b0:	200c      	movs	r0, #12
}
   1b6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1b6b6:	792b      	ldrb	r3, [r5, #4]
   1b6b8:	f043 0303 	orr.w	r3, r3, #3
   1b6bc:	712b      	strb	r3, [r5, #4]
			pdu_data_tx->len =
   1b6be:	2317      	movs	r3, #23
   1b6c0:	716b      	strb	r3, [r5, #5]
			pdu_data_tx->llctrl.opcode =
   1b6c2:	2303      	movs	r3, #3
   1b6c4:	71eb      	strb	r3, [r5, #7]
   1b6c6:	683b      	ldr	r3, [r7, #0]
   1b6c8:	687a      	ldr	r2, [r7, #4]
   1b6ca:	60ea      	str	r2, [r5, #12]
   1b6cc:	60ab      	str	r3, [r5, #8]
			enc_req->ediv[0] = ediv[0];
   1b6ce:	f899 3000 	ldrb.w	r3, [r9]
   1b6d2:	742b      	strb	r3, [r5, #16]
			enc_req->ediv[1] = ediv[1];
   1b6d4:	f899 3001 	ldrb.w	r3, [r9, #1]
   1b6d8:	746b      	strb	r3, [r5, #17]
			lll_csrand_get(enc_req->skdm, sizeof(enc_req->skdm));
   1b6da:	2108      	movs	r1, #8
   1b6dc:	f105 0012 	add.w	r0, r5, #18
   1b6e0:	f001 fe90 	bl	1d404 <lll_csrand_get>
			lll_csrand_get(enc_req->ivm, sizeof(enc_req->ivm));
   1b6e4:	2104      	movs	r1, #4
   1b6e6:	f105 001a 	add.w	r0, r5, #26
   1b6ea:	f001 fe8b 	bl	1d404 <lll_csrand_get>
   1b6ee:	e7d0      	b.n	1b692 <ll_enc_req_send+0x96>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1b6f0:	2002      	movs	r0, #2
}
   1b6f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b6f6:	bf00      	nop

0001b6f8 <ull_central_reset>:
{
   1b6f8:	b530      	push	{r4, r5, lr}
   1b6fa:	b083      	sub	sp, #12
	err = ll_connect_disable(&rx);
   1b6fc:	a801      	add	r0, sp, #4
   1b6fe:	f7ff ff2f 	bl	1b560 <ll_connect_disable>
	if (!err) {
   1b702:	4604      	mov	r4, r0
   1b704:	b110      	cbz	r0, 1b70c <ull_central_reset+0x14>
}
   1b706:	4620      	mov	r0, r4
   1b708:	b003      	add	sp, #12
   1b70a:	bd30      	pop	{r4, r5, pc}
		scan = ull_scan_is_enabled_get(SCAN_HANDLE_1M);
   1b70c:	f7fa fdc4 	bl	16298 <ull_scan_is_enabled_get>
		LL_ASSERT(scan);
   1b710:	4605      	mov	r5, r0
   1b712:	b150      	cbz	r0, 1b72a <ull_central_reset+0x32>
		scan->is_enabled = 0U;
   1b714:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1b718:	2200      	movs	r2, #0
		scan->is_enabled = 0U;
   1b71a:	f36f 0300 	bfc	r3, #0, #1
}
   1b71e:	4620      	mov	r0, r4
		scan->is_enabled = 0U;
   1b720:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		scan->lll.conn = NULL;
   1b724:	622a      	str	r2, [r5, #32]
}
   1b726:	b003      	add	sp, #12
   1b728:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(scan);
   1b72a:	4a07      	ldr	r2, [pc, #28]	; (1b748 <ull_central_reset+0x50>)
   1b72c:	4907      	ldr	r1, [pc, #28]	; (1b74c <ull_central_reset+0x54>)
   1b72e:	4808      	ldr	r0, [pc, #32]	; (1b750 <ull_central_reset+0x58>)
   1b730:	f240 23e9 	movw	r3, #745	; 0x2e9
   1b734:	f00c fc38 	bl	27fa8 <printk>
   1b738:	4040      	eors	r0, r0
   1b73a:	f380 8811 	msr	BASEPRI, r0
   1b73e:	f04f 0003 	mov.w	r0, #3
   1b742:	df02      	svc	2
   1b744:	e7e6      	b.n	1b714 <ull_central_reset+0x1c>
   1b746:	bf00      	nop
   1b748:	00030868 	.word	0x00030868
   1b74c:	00030de0 	.word	0x00030de0
   1b750:	0002fedc 	.word	0x0002fedc

0001b754 <ull_central_cleanup>:
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1b754:	6883      	ldr	r3, [r0, #8]
{
   1b756:	b570      	push	{r4, r5, r6, lr}
	scan = HDR_LLL2ULL(rx_free->rx_ftr.param);
   1b758:	681d      	ldr	r5, [r3, #0]
	conn_lll = scan->lll.conn;
   1b75a:	6a2c      	ldr	r4, [r5, #32]
	LL_ASSERT(conn_lll);
   1b75c:	b31c      	cbz	r4, 1b7a6 <ull_central_cleanup+0x52>
	LL_ASSERT(!conn_lll->link_tx_free);
   1b75e:	6da3      	ldr	r3, [r4, #88]	; 0x58
	scan->lll.conn = NULL;
   1b760:	2200      	movs	r2, #0
   1b762:	622a      	str	r2, [r5, #32]
	LL_ASSERT(!conn_lll->link_tx_free);
   1b764:	b163      	cbz	r3, 1b780 <ull_central_cleanup+0x2c>
   1b766:	4a1e      	ldr	r2, [pc, #120]	; (1b7e0 <ull_central_cleanup+0x8c>)
   1b768:	491e      	ldr	r1, [pc, #120]	; (1b7e4 <ull_central_cleanup+0x90>)
   1b76a:	481f      	ldr	r0, [pc, #124]	; (1b7e8 <ull_central_cleanup+0x94>)
   1b76c:	f240 3305 	movw	r3, #773	; 0x305
   1b770:	f00c fc1a 	bl	27fa8 <printk>
   1b774:	4040      	eors	r0, r0
   1b776:	f380 8811 	msr	BASEPRI, r0
   1b77a:	f04f 0003 	mov.w	r0, #3
   1b77e:	df02      	svc	2
	link = memq_deinit(&conn_lll->memq_tx.head,
   1b780:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1b784:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1b788:	f7f5 fb12 	bl	10db0 <memq_deinit>
	LL_ASSERT(link);
   1b78c:	4606      	mov	r6, r0
   1b78e:	b1c0      	cbz	r0, 1b7c2 <ull_central_cleanup+0x6e>
	ll_conn_release(conn);
   1b790:	6820      	ldr	r0, [r4, #0]
	conn_lll->link_tx_free = link;
   1b792:	65a6      	str	r6, [r4, #88]	; 0x58
	ll_conn_release(conn);
   1b794:	f7fb fc42 	bl	1701c <ll_conn_release>
	scan->is_enabled = 0U;
   1b798:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
   1b79c:	f36f 0300 	bfc	r3, #0, #1
   1b7a0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
}
   1b7a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(conn_lll);
   1b7a6:	4a0e      	ldr	r2, [pc, #56]	; (1b7e0 <ull_central_cleanup+0x8c>)
   1b7a8:	4910      	ldr	r1, [pc, #64]	; (1b7ec <ull_central_cleanup+0x98>)
   1b7aa:	480f      	ldr	r0, [pc, #60]	; (1b7e8 <ull_central_cleanup+0x94>)
   1b7ac:	f240 3302 	movw	r3, #770	; 0x302
   1b7b0:	f00c fbfa 	bl	27fa8 <printk>
   1b7b4:	4040      	eors	r0, r0
   1b7b6:	f380 8811 	msr	BASEPRI, r0
   1b7ba:	f04f 0003 	mov.w	r0, #3
   1b7be:	df02      	svc	2
   1b7c0:	e7cd      	b.n	1b75e <ull_central_cleanup+0xa>
	LL_ASSERT(link);
   1b7c2:	4a07      	ldr	r2, [pc, #28]	; (1b7e0 <ull_central_cleanup+0x8c>)
   1b7c4:	490a      	ldr	r1, [pc, #40]	; (1b7f0 <ull_central_cleanup+0x9c>)
   1b7c6:	4808      	ldr	r0, [pc, #32]	; (1b7e8 <ull_central_cleanup+0x94>)
   1b7c8:	f44f 7342 	mov.w	r3, #776	; 0x308
   1b7cc:	f00c fbec 	bl	27fa8 <printk>
   1b7d0:	4040      	eors	r0, r0
   1b7d2:	f380 8811 	msr	BASEPRI, r0
   1b7d6:	f04f 0003 	mov.w	r0, #3
   1b7da:	df02      	svc	2
   1b7dc:	e7d8      	b.n	1b790 <ull_central_cleanup+0x3c>
   1b7de:	bf00      	nop
   1b7e0:	00030868 	.word	0x00030868
   1b7e4:	000302d4 	.word	0x000302d4
   1b7e8:	0002fedc 	.word	0x0002fedc
   1b7ec:	000302c8 	.word	0x000302c8
   1b7f0:	00030624 	.word	0x00030624

0001b7f4 <ull_central_chm_update>:
{
   1b7f4:	b538      	push	{r3, r4, r5, lr}
		conn = ll_connected_get(handle);
   1b7f6:	2000      	movs	r0, #0
   1b7f8:	f7fb fc26 	bl	17048 <ll_connected_get>
		if (!conn || conn->lll.role) {
   1b7fc:	4604      	mov	r4, r0
   1b7fe:	b1d8      	cbz	r0, 1b838 <ull_central_chm_update+0x44>
   1b800:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1b804:	2b00      	cmp	r3, #0
   1b806:	db17      	blt.n	1b838 <ull_central_chm_update+0x44>
		ret = ull_conn_llcp_req(conn);
   1b808:	f7ff fcc4 	bl	1b194 <ull_conn_llcp_req>
		if (ret) {
   1b80c:	4605      	mov	r5, r0
   1b80e:	b988      	cbnz	r0, 1b834 <ull_central_chm_update+0x40>
		ull_chan_map_get(conn->llcp.chan_map.chm);
   1b810:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1b814:	f000 f9d2 	bl	1bbbc <ull_chan_map_get>
		conn->llcp.chan_map.initiate = 1U;
   1b818:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_req++;
   1b81c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
		conn->llcp.chan_map.initiate = 1U;
   1b820:	f042 0201 	orr.w	r2, r2, #1
		conn->llcp_type = LLCP_CHAN_MAP;
   1b824:	2102      	movs	r1, #2
		conn->llcp_req++;
   1b826:	3301      	adds	r3, #1
		conn->llcp.chan_map.initiate = 1U;
   1b828:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_CHAN_MAP;
   1b82c:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		conn->llcp_req++;
   1b830:	f884 30e4 	strb.w	r3, [r4, #228]	; 0xe4
}
   1b834:	4628      	mov	r0, r5
   1b836:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1b838:	2500      	movs	r5, #0
}
   1b83a:	4628      	mov	r0, r5
   1b83c:	bd38      	pop	{r3, r4, r5, pc}
   1b83e:	bf00      	nop

0001b840 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	*((uint32_t volatile *)param) = status;
   1b840:	6008      	str	r0, [r1, #0]
}
   1b842:	4770      	bx	lr

0001b844 <win_offset_calc.constprop.0>:
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1b844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b848:	b091      	sub	sp, #68	; 0x44
   1b84a:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
   1b84e:	9306      	str	r3, [sp, #24]
	if (conn_curr->lll.role) {
   1b850:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1b854:	6902      	ldr	r2, [r0, #16]
static void win_offset_calc(struct ll_conn *conn_curr, uint8_t is_select,
   1b856:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   1b858:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
   1b85c:	9007      	str	r0, [sp, #28]
	if (conn_curr->lll.role) {
   1b85e:	2b00      	cmp	r3, #0
	ticks_slot_abs += conn_curr->ull.ticks_slot;
   1b860:	920b      	str	r2, [sp, #44]	; 0x2c
	if (conn_curr->lll.role) {
   1b862:	da02      	bge.n	1b86a <win_offset_calc.constprop.0+0x26>
		ticks_slot_abs += HAL_TICKER_US_TO_TICKS(EVENT_TIES_US);
   1b864:	4613      	mov	r3, r2
   1b866:	3314      	adds	r3, #20
   1b868:	930b      	str	r3, [sp, #44]	; 0x2c
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b86a:	2600      	movs	r6, #0
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b86c:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b870:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
		LL_ASSERT(success);
   1b874:	f8df b254 	ldr.w	fp, [pc, #596]	; 1bacc <win_offset_calc.constprop.0+0x288>
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b878:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
		ticks_anchor_prev = offset_index = offset = 0U;
   1b87c:	4634      	mov	r4, r6
	ticker_id = ticker_id_prev = ticker_id_other = 0xff;
   1b87e:	f8cd 8014 	str.w	r8, [sp, #20]
		ticks_anchor_prev = offset_index = offset = 0U;
   1b882:	46b2      	mov	sl, r6
	ticks_slot_abs_prev = 0U;
   1b884:	9604      	str	r6, [sp, #16]
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1b886:	4635      	mov	r5, r6
   1b888:	e044      	b.n	1b914 <win_offset_calc.constprop.0+0xd0>
		if (ticker_id == 0xff) {
   1b88a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b88e:	2bff      	cmp	r3, #255	; 0xff
   1b890:	d064      	beq.n	1b95c <win_offset_calc.constprop.0+0x118>
		if ((ticker_id_prev != 0xff) &&
   1b892:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1b896:	d011      	beq.n	1b8bc <win_offset_calc.constprop.0+0x78>
   1b898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1b89a:	4552      	cmp	r2, sl
   1b89c:	d00e      	beq.n	1b8bc <win_offset_calc.constprop.0+0x78>
			LL_ASSERT(0);
   1b89e:	498c      	ldr	r1, [pc, #560]	; (1bad0 <win_offset_calc.constprop.0+0x28c>)
   1b8a0:	488c      	ldr	r0, [pc, #560]	; (1bad4 <win_offset_calc.constprop.0+0x290>)
   1b8a2:	f240 13c3 	movw	r3, #451	; 0x1c3
   1b8a6:	465a      	mov	r2, fp
   1b8a8:	f00c fb7e 	bl	27fa8 <printk>
   1b8ac:	4040      	eors	r0, r0
   1b8ae:	f380 8811 	msr	BASEPRI, r0
   1b8b2:	f04f 0003 	mov.w	r0, #3
   1b8b6:	df02      	svc	2
		if ((ticker_id < TICKER_ID_ADV_BASE) ||
   1b8b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b8bc:	1e9a      	subs	r2, r3, #2
   1b8be:	2a03      	cmp	r2, #3
   1b8c0:	d825      	bhi.n	1b90e <win_offset_calc.constprop.0+0xca>
		if (ticker_id < TICKER_ID_CONN_BASE) {
   1b8c2:	2b05      	cmp	r3, #5
   1b8c4:	d17f      	bne.n	1b9c6 <win_offset_calc.constprop.0+0x182>
		if (ticker_id_other != 0xff) {
   1b8c6:	9b05      	ldr	r3, [sp, #20]
   1b8c8:	2bff      	cmp	r3, #255	; 0xff
   1b8ca:	d178      	bne.n	1b9be <win_offset_calc.constprop.0+0x17a>
		conn = ll_conn_get(ticker_id - TICKER_ID_CONN_BASE);
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	f7fb fbb3 	bl	17038 <ll_conn_get>
		if ((conn != conn_curr) && (is_select || !conn->lll.role)) {
   1b8d2:	9b07      	ldr	r3, [sp, #28]
   1b8d4:	4283      	cmp	r3, r0
   1b8d6:	d01a      	beq.n	1b90e <win_offset_calc.constprop.0+0xca>
   1b8d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1b8da:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
   1b8de:	2a00      	cmp	r2, #0
   1b8e0:	f040 808a 	bne.w	1b9f8 <win_offset_calc.constprop.0+0x1b4>
   1b8e4:	2b00      	cmp	r3, #0
   1b8e6:	db12      	blt.n	1b90e <win_offset_calc.constprop.0+0xca>
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b8e8:	6903      	ldr	r3, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1b8ea:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			uint32_t ticks_slot_margin = 0U;
   1b8ee:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b8f2:	3328      	adds	r3, #40	; 0x28
   1b8f4:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1b8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b8f8:	681b      	ldr	r3, [r3, #0]
   1b8fa:	4543      	cmp	r3, r8
   1b8fc:	f0c0 808b 	bcc.w	1ba16 <win_offset_calc.constprop.0+0x1d2>
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1b900:	9b08      	ldr	r3, [sp, #32]
			ticks_anchor_prev = ticks_anchor;
   1b902:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
			ticks_slot_abs_prev = ticks_slot_abs_curr;
   1b906:	9304      	str	r3, [sp, #16]
			ticker_id_prev = ticker_id;
   1b908:	4645      	mov	r5, r8
   1b90a:	f89d 8033 	ldrb.w	r8, [sp, #51]	; 0x33
	} while (offset_index < *offset_max);
   1b90e:	783b      	ldrb	r3, [r7, #0]
   1b910:	42a3      	cmp	r3, r4
   1b912:	d95c      	bls.n	1b9ce <win_offset_calc.constprop.0+0x18a>
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b914:	ab0f      	add	r3, sp, #60	; 0x3c
   1b916:	9302      	str	r3, [sp, #8]
   1b918:	4b6f      	ldr	r3, [pc, #444]	; (1bad8 <win_offset_calc.constprop.0+0x294>)
   1b91a:	9301      	str	r3, [sp, #4]
   1b91c:	ab0d      	add	r3, sp, #52	; 0x34
   1b91e:	9300      	str	r3, [sp, #0]
		ret_cb = TICKER_STATUS_BUSY;
   1b920:	2102      	movs	r1, #2
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b922:	ab0e      	add	r3, sp, #56	; 0x38
   1b924:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   1b928:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   1b92a:	910f      	str	r1, [sp, #60]	; 0x3c
		ret = ticker_next_slot_get(TICKER_INSTANCE_ID_CTLR,
   1b92c:	f7f6 fd56 	bl	123dc <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1b930:	2802      	cmp	r0, #2
   1b932:	d056      	beq.n	1b9e2 <win_offset_calc.constprop.0+0x19e>
		success = (ret_cb == TICKER_STATUS_SUCCESS);
   1b934:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		LL_ASSERT(success);
   1b936:	2b00      	cmp	r3, #0
   1b938:	d0a7      	beq.n	1b88a <win_offset_calc.constprop.0+0x46>
   1b93a:	4968      	ldr	r1, [pc, #416]	; (1badc <win_offset_calc.constprop.0+0x298>)
   1b93c:	4865      	ldr	r0, [pc, #404]	; (1bad4 <win_offset_calc.constprop.0+0x290>)
   1b93e:	f44f 73dd 	mov.w	r3, #442	; 0x1ba
   1b942:	465a      	mov	r2, fp
   1b944:	f00c fb30 	bl	27fa8 <printk>
   1b948:	4040      	eors	r0, r0
   1b94a:	f380 8811 	msr	BASEPRI, r0
   1b94e:	f04f 0003 	mov.w	r0, #3
   1b952:	df02      	svc	2
		if (ticker_id == 0xff) {
   1b954:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b958:	2bff      	cmp	r3, #255	; 0xff
   1b95a:	d19a      	bne.n	1b892 <win_offset_calc.constprop.0+0x4e>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1b95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b95e:	681b      	ldr	r3, [r3, #0]
   1b960:	429d      	cmp	r5, r3
   1b962:	bf38      	it	cc
   1b964:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1b966:	783b      	ldrb	r3, [r7, #0]
   1b968:	42a3      	cmp	r3, r4
   1b96a:	d926      	bls.n	1b9ba <win_offset_calc.constprop.0+0x176>
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b96c:	9b04      	ldr	r3, [sp, #16]
   1b96e:	495c      	ldr	r1, [pc, #368]	; (1bae0 <win_offset_calc.constprop.0+0x29c>)
			if (offset >= conn_interval) {
   1b970:	9806      	ldr	r0, [sp, #24]
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b972:	442b      	add	r3, r5
   1b974:	fba1 2303 	umull	r2, r3, r1, r3
   1b978:	f3c3 124f 	ubfx	r2, r3, #5, #16
			if (offset >= conn_interval) {
   1b97c:	4290      	cmp	r0, r2
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b97e:	ea4f 1353 	mov.w	r3, r3, lsr #5
			if (offset >= conn_interval) {
   1b982:	f240 809a 	bls.w	1baba <win_offset_calc.constprop.0+0x276>
   1b986:	9e04      	ldr	r6, [sp, #16]
   1b988:	f8dd c018 	ldr.w	ip, [sp, #24]
   1b98c:	e002      	b.n	1b994 <win_offset_calc.constprop.0+0x150>
   1b98e:	4594      	cmp	ip, r2
   1b990:	f240 8093 	bls.w	1baba <win_offset_calc.constprop.0+0x276>
			sys_put_le16(offset, (win_offset + (sizeof(uint16_t) *
   1b994:	eb09 0044 	add.w	r0, r9, r4, lsl #1
	dst[0] = val;
   1b998:	f809 3014 	strb.w	r3, [r9, r4, lsl #1]
	dst[1] = val >> 8;
   1b99c:	0a12      	lsrs	r2, r2, #8
   1b99e:	7042      	strb	r2, [r0, #1]
		while (offset_index < *offset_max) {
   1b9a0:	7838      	ldrb	r0, [r7, #0]
			offset_index++;
   1b9a2:	3401      	adds	r4, #1
			ticks_to_expire_prev += HAL_TICKER_US_TO_TICKS(
   1b9a4:	3528      	adds	r5, #40	; 0x28
			offset_index++;
   1b9a6:	b2e4      	uxtb	r4, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b9a8:	1973      	adds	r3, r6, r5
   1b9aa:	fba1 2303 	umull	r2, r3, r1, r3
		while (offset_index < *offset_max) {
   1b9ae:	42a0      	cmp	r0, r4
			offset = (ticks_to_expire_prev + ticks_slot_abs_prev) /
   1b9b0:	f3c3 124f 	ubfx	r2, r3, #5, #16
   1b9b4:	ea4f 1353 	mov.w	r3, r3, lsr #5
		while (offset_index < *offset_max) {
   1b9b8:	d8e9      	bhi.n	1b98e <win_offset_calc.constprop.0+0x14a>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1b9ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b9bc:	601d      	str	r5, [r3, #0]
	*offset_max = offset_index;
   1b9be:	703c      	strb	r4, [r7, #0]
}
   1b9c0:	b011      	add	sp, #68	; 0x44
   1b9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9c6:	9305      	str	r3, [sp, #20]
	} while (offset_index < *offset_max);
   1b9c8:	783b      	ldrb	r3, [r7, #0]
   1b9ca:	42a3      	cmp	r3, r4
   1b9cc:	d8a2      	bhi.n	1b914 <win_offset_calc.constprop.0+0xd0>
	if (ticker_id == 0xff) {
   1b9ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1b9d2:	2bff      	cmp	r3, #255	; 0xff
   1b9d4:	d1f3      	bne.n	1b9be <win_offset_calc.constprop.0+0x17a>
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   1b9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b9d8:	681b      	ldr	r3, [r3, #0]
   1b9da:	429d      	cmp	r5, r3
   1b9dc:	bf38      	it	cc
   1b9de:	461d      	movcc	r5, r3
		while (offset_index < *offset_max) {
   1b9e0:	e7eb      	b.n	1b9ba <win_offset_calc.constprop.0+0x176>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1b9e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b9e4:	2b02      	cmp	r3, #2
   1b9e6:	d1a5      	bne.n	1b934 <win_offset_calc.constprop.0+0xf0>
				ticker_job_sched(TICKER_INSTANCE_ID_CTLR,
   1b9e8:	2102      	movs	r1, #2
   1b9ea:	2000      	movs	r0, #0
   1b9ec:	f7f6 fd3c 	bl	12468 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1b9f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1b9f2:	2b02      	cmp	r3, #2
   1b9f4:	d0f8      	beq.n	1b9e8 <win_offset_calc.constprop.0+0x1a4>
   1b9f6:	e79d      	b.n	1b934 <win_offset_calc.constprop.0+0xf0>
			if (conn->lll.role) {
   1b9f8:	2b00      	cmp	r3, #0
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1b9fa:	6901      	ldr	r1, [r0, #16]
				ticks_to_expire + ticks_prepare_reduced;
   1b9fc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
			if (conn->lll.role) {
   1ba00:	da4f      	bge.n	1baa2 <win_offset_calc.constprop.0+0x25e>
				ticks_slot_abs_curr += ticks_slot_margin;
   1ba02:	f101 033c 	add.w	r3, r1, #60	; 0x3c
   1ba06:	9308      	str	r3, [sp, #32]
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ba08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ba0a:	681b      	ldr	r3, [r3, #0]
   1ba0c:	4543      	cmp	r3, r8
				ticks_slot_margin =
   1ba0e:	f04f 0a14 	mov.w	sl, #20
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   1ba12:	f4bf af75 	bcs.w	1b900 <win_offset_calc.constprop.0+0xbc>
				if (ticks_to_expire_prev <
   1ba16:	429d      	cmp	r5, r3
   1ba18:	bf38      	it	cc
   1ba1a:	461d      	movcc	r5, r3
				while ((offset_index < *offset_max) &&
   1ba1c:	783b      	ldrb	r3, [r7, #0]
   1ba1e:	42a3      	cmp	r3, r4
   1ba20:	d930      	bls.n	1ba84 <win_offset_calc.constprop.0+0x240>
					(ticks_slot_abs_prev + ticks_slot_abs +
   1ba22:	9b04      	ldr	r3, [sp, #16]
   1ba24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ba26:	f8cd 906c 	str.w	r9, [sp, #108]	; 0x6c
   1ba2a:	4413      	add	r3, r2
   1ba2c:	449a      	add	sl, r3
   1ba2e:	46b1      	mov	r9, r6
   1ba30:	462e      	mov	r6, r5
   1ba32:	4655      	mov	r5, sl
   1ba34:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
   1ba38:	e014      	b.n	1ba64 <win_offset_calc.constprop.0+0x220>
					if (offset >= conn_interval) {
   1ba3a:	9a06      	ldr	r2, [sp, #24]
					offset = (ticks_to_expire_prev +
   1ba3c:	f3c3 194f 	ubfx	r9, r3, #5, #16
					if (offset >= conn_interval) {
   1ba40:	4591      	cmp	r9, r2
					ticks_to_expire_prev +=
   1ba42:	f106 0628 	add.w	r6, r6, #40	; 0x28
					offset_index++;
   1ba46:	f104 0001 	add.w	r0, r4, #1
						  ticks_slot_abs_prev) /
   1ba4a:	ea4f 1353 	mov.w	r3, r3, lsr #5
					if (offset >= conn_interval) {
   1ba4e:	d238      	bcs.n	1bac2 <win_offset_calc.constprop.0+0x27e>
	dst[0] = val;
   1ba50:	f80a 3014 	strb.w	r3, [sl, r4, lsl #1]
	dst[1] = val >> 8;
   1ba54:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1ba58:	f88c 3001 	strb.w	r3, [ip, #1]
				while ((offset_index < *offset_max) &&
   1ba5c:	783b      	ldrb	r3, [r7, #0]
					offset_index++;
   1ba5e:	b2c4      	uxtb	r4, r0
				while ((offset_index < *offset_max) &&
   1ba60:	42a3      	cmp	r3, r4
   1ba62:	d924      	bls.n	1baae <win_offset_calc.constprop.0+0x26a>
				       (ticker_ticks_diff_get(
   1ba64:	4631      	mov	r1, r6
   1ba66:	4640      	mov	r0, r8
   1ba68:	f7f6 fd18 	bl	1249c <ticker_ticks_diff_get>
						  ticks_slot_abs_prev) /
   1ba6c:	9b04      	ldr	r3, [sp, #16]
   1ba6e:	4a1c      	ldr	r2, [pc, #112]	; (1bae0 <win_offset_calc.constprop.0+0x29c>)
   1ba70:	4433      	add	r3, r6
				while ((offset_index < *offset_max) &&
   1ba72:	42a8      	cmp	r0, r5
					sys_put_le16(offset,
   1ba74:	eb0a 0c44 	add.w	ip, sl, r4, lsl #1
						  ticks_slot_abs_prev) /
   1ba78:	fba2 2303 	umull	r2, r3, r2, r3
				while ((offset_index < *offset_max) &&
   1ba7c:	d2dd      	bcs.n	1ba3a <win_offset_calc.constprop.0+0x1f6>
   1ba7e:	4635      	mov	r5, r6
   1ba80:	464e      	mov	r6, r9
   1ba82:	46d1      	mov	r9, sl
				*ticks_to_offset_next = ticks_to_expire_prev;
   1ba84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ba86:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1ba88:	9b06      	ldr	r3, [sp, #24]
   1ba8a:	42b3      	cmp	r3, r6
   1ba8c:	f63f af38 	bhi.w	1b900 <win_offset_calc.constprop.0+0xbc>
	if (ticker_id == 0xff) {
   1ba90:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   1ba94:	2bff      	cmp	r3, #255	; 0xff
   1ba96:	f43f af61 	beq.w	1b95c <win_offset_calc.constprop.0+0x118>
	*offset_max = offset_index;
   1ba9a:	703c      	strb	r4, [r7, #0]
}
   1ba9c:	b011      	add	sp, #68	; 0x44
   1ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_slot_abs_curr += conn->ull.ticks_slot +
   1baa2:	f101 0328 	add.w	r3, r1, #40	; 0x28
   1baa6:	9308      	str	r3, [sp, #32]
			uint32_t ticks_slot_margin = 0U;
   1baa8:	f04f 0a00 	mov.w	sl, #0
   1baac:	e723      	b.n	1b8f6 <win_offset_calc.constprop.0+0xb2>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1baae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bab0:	4635      	mov	r5, r6
   1bab2:	601d      	str	r5, [r3, #0]
   1bab4:	464e      	mov	r6, r9
   1bab6:	46d1      	mov	r9, sl
				if (offset >= conn_interval) {
   1bab8:	e722      	b.n	1b900 <win_offset_calc.constprop.0+0xbc>
		*ticks_to_offset_next = ticks_to_expire_prev;
   1baba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticks_to_expire_prev = 0U;
   1babc:	2500      	movs	r5, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   1babe:	601d      	str	r5, [r3, #0]
   1bac0:	e77d      	b.n	1b9be <win_offset_calc.constprop.0+0x17a>
				*ticks_to_offset_next = ticks_to_expire_prev;
   1bac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1bac4:	2500      	movs	r5, #0
   1bac6:	46d1      	mov	r9, sl
   1bac8:	601d      	str	r5, [r3, #0]
				if (offset >= conn_interval) {
   1baca:	e7e1      	b.n	1ba90 <win_offset_calc.constprop.0+0x24c>
   1bacc:	000308c0 	.word	0x000308c0
   1bad0:	0002ff74 	.word	0x0002ff74
   1bad4:	0002fedc 	.word	0x0002fedc
   1bad8:	0001b841 	.word	0x0001b841
   1badc:	00030904 	.word	0x00030904
   1bae0:	cccccccd 	.word	0xcccccccd

0001bae4 <ull_sched_mfy_after_mstr_offset_get>:
	struct lll_scan *lll = p->param;
   1bae4:	68c3      	ldr	r3, [r0, #12]
	after_mstr_offset_get(lll->conn->interval,
   1bae6:	6802      	ldr	r2, [r0, #0]
	conn = HDR_LLL2ULL(lll->conn);
   1bae8:	6859      	ldr	r1, [r3, #4]
	after_mstr_offset_get(lll->conn->interval,
   1baea:	6858      	ldr	r0, [r3, #4]
			      (ticks_slot_overhead + conn->ull.ticks_slot),
   1baec:	6809      	ldr	r1, [r1, #0]
	after_mstr_offset_get(lll->conn->interval,
   1baee:	89c0      	ldrh	r0, [r0, #14]
   1baf0:	6909      	ldr	r1, [r1, #16]
   1baf2:	3310      	adds	r3, #16
   1baf4:	f7e7 bc00 	b.w	32f8 <after_mstr_offset_get>

0001baf8 <ull_sched_mfy_win_offset_use>:
{
   1baf8:	b510      	push	{r4, lr}
   1bafa:	4604      	mov	r4, r0
	after_mstr_offset_get(conn->lll.interval,
   1bafc:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   1bb00:	6901      	ldr	r1, [r0, #16]
   1bb02:	f500 738c 	add.w	r3, r0, #280	; 0x118
   1bb06:	8d40      	ldrh	r0, [r0, #42]	; 0x2a
   1bb08:	f7e7 fbf6 	bl	32f8 <after_mstr_offset_get>
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1bb0c:	f8d4 3118 	ldr.w	r3, [r4, #280]	; 0x118
   1bb10:	4908      	ldr	r1, [pc, #32]	; (1bb34 <ull_sched_mfy_win_offset_use+0x3c>)
	sys_put_le16(win_offset, (void *)conn->llcp.conn_upd.pdu_win_offset);
   1bb12:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
	win_offset = conn->llcp_cu.win_offset_us / CONN_INT_UNIT_US;
   1bb16:	fba1 1303 	umull	r1, r3, r1, r3
   1bb1a:	0a9b      	lsrs	r3, r3, #10
   1bb1c:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
   1bb20:	7013      	strb	r3, [r2, #0]
	dst[1] = val >> 8;
   1bb22:	7051      	strb	r1, [r2, #1]
	conn->llcp_cu.state = LLCP_CUI_STATE_OFFS_RDY;
   1bb24:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   1bb28:	2204      	movs	r2, #4
   1bb2a:	f362 0302 	bfi	r3, r2, #0, #3
   1bb2e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
}
   1bb32:	bd10      	pop	{r4, pc}
   1bb34:	d1b71759 	.word	0xd1b71759

0001bb38 <ull_sched_mfy_free_win_offset_calc>:
{
   1bb38:	b510      	push	{r4, lr}
	if (conn->lll.role) {
   1bb3a:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	uint32_t ticks_to_offset_default = 0U;
   1bb3e:	2100      	movs	r1, #0
{
   1bb40:	b084      	sub	sp, #16
	if (conn->lll.role) {
   1bb42:	428b      	cmp	r3, r1
		conn->llcp_conn_param.ticks_to_offset_next =
   1bb44:	bfbc      	itt	lt
   1bb46:	f8d0 30e0 	ldrlt.w	r3, [r0, #224]	; 0xe0
   1bb4a:	f8c0 31a8 	strlt.w	r3, [r0, #424]	; 0x1a8
	uint8_t offset_max = 6U;
   1bb4e:	f04f 0206 	mov.w	r2, #6
{
   1bb52:	4604      	mov	r4, r0
	uint8_t offset_max = 6U;
   1bb54:	f88d 200b 	strb.w	r2, [sp, #11]
		ticks_to_offset_next =
   1bb58:	bfb8      	it	lt
   1bb5a:	f500 72d4 	addlt.w	r2, r0, #424	; 0x1a8
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1bb5e:	f8d0 01a0 	ldr.w	r0, [r0, #416]	; 0x1a0
	uint32_t ticks_to_offset_default = 0U;
   1bb62:	9103      	str	r1, [sp, #12]
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1bb64:	f10d 010b 	add.w	r1, sp, #11
   1bb68:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
	ticks_to_offset_next = &ticks_to_offset_default;
   1bb6c:	bfa8      	it	ge
   1bb6e:	aa03      	addge	r2, sp, #12
	win_offset_calc(conn, 0, ticks_to_offset_next,
   1bb70:	e9cd 1000 	strd	r1, r0, [sp]
   1bb74:	2100      	movs	r1, #0
   1bb76:	4620      	mov	r0, r4
   1bb78:	f7ff fe64 	bl	1b844 <win_offset_calc.constprop.0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_OFFS_RDY;
   1bb7c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1bb80:	2208      	movs	r2, #8
   1bb82:	f362 0303 	bfi	r3, r2, #0, #4
   1bb86:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
}
   1bb8a:	b004      	add	sp, #16
   1bb8c:	bd10      	pop	{r4, pc}
   1bb8e:	bf00      	nop

0001bb90 <ll_chm_update>:
static uint8_t count = 37U;

static void chan_map_set(uint8_t const *const chan_map);

uint8_t ll_chm_update(uint8_t const *const chm)
{
   1bb90:	b508      	push	{r3, lr}
   1bb92:	4a08      	ldr	r2, [pc, #32]	; (1bbb4 <ll_chm_update+0x24>)
   1bb94:	4603      	mov	r3, r0
	return count;
}

static void chan_map_set(uint8_t const *const chan_map)
{
	(void)memcpy(map, chan_map, sizeof(map));
   1bb96:	6800      	ldr	r0, [r0, #0]
   1bb98:	6010      	str	r0, [r2, #0]
   1bb9a:	791b      	ldrb	r3, [r3, #4]
   1bb9c:	7113      	strb	r3, [r2, #4]
	count = util_ones_count_get(map, sizeof(map));
   1bb9e:	2105      	movs	r1, #5
   1bba0:	4610      	mov	r0, r2
   1bba2:	f7f5 fa81 	bl	110a8 <util_ones_count_get>
   1bba6:	4b04      	ldr	r3, [pc, #16]	; (1bbb8 <ll_chm_update+0x28>)
   1bba8:	7018      	strb	r0, [r3, #0]
	(void)ull_central_chm_update();
   1bbaa:	f7ff fe23 	bl	1b7f4 <ull_central_chm_update>
}
   1bbae:	2000      	movs	r0, #0
   1bbb0:	bd08      	pop	{r3, pc}
   1bbb2:	bf00      	nop
   1bbb4:	20000648 	.word	0x20000648
   1bbb8:	20000ae2 	.word	0x20000ae2

0001bbbc <ull_chan_map_get>:
	(void)memcpy(chan_map, map, sizeof(map));
   1bbbc:	4a04      	ldr	r2, [pc, #16]	; (1bbd0 <ull_chan_map_get+0x14>)
	return count;
   1bbbe:	4905      	ldr	r1, [pc, #20]	; (1bbd4 <ull_chan_map_get+0x18>)
{
   1bbc0:	4603      	mov	r3, r0
   1bbc2:	6810      	ldr	r0, [r2, #0]
   1bbc4:	6018      	str	r0, [r3, #0]
   1bbc6:	7912      	ldrb	r2, [r2, #4]
}
   1bbc8:	7808      	ldrb	r0, [r1, #0]
   1bbca:	711a      	strb	r2, [r3, #4]
   1bbcc:	4770      	bx	lr
   1bbce:	bf00      	nop
   1bbd0:	20000648 	.word	0x20000648
   1bbd4:	20000ae2 	.word	0x20000ae2

0001bbd8 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   1bbd8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1bbda:	fb02 1c01 	mla	ip, r2, r1, r1
   1bbde:	7802      	ldrb	r2, [r0, #0]
   1bbe0:	491c      	ldr	r1, [pc, #112]	; (1bc54 <lll_chan_sel_1+0x7c>)
{
   1bbe2:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1bbe6:	4494      	add	ip, r2
   1bbe8:	fb81 210c 	smull	r2, r1, r1, ip
   1bbec:	4461      	add	r1, ip
   1bbee:	1149      	asrs	r1, r1, #5
   1bbf0:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1bbf4:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   1bbf8:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1bbfa:	ebac 0101 	sub.w	r1, ip, r1
   1bbfe:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   1bc00:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1bc02:	08c4      	lsrs	r4, r0, #3
   1bc04:	f001 0107 	and.w	r1, r1, #7
   1bc08:	f813 c004 	ldrb.w	ip, [r3, r4]
   1bc0c:	fa4c f101 	asr.w	r1, ip, r1
   1bc10:	f011 0101 	ands.w	r1, r1, #1
   1bc14:	d11d      	bne.n	1bc52 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1bc16:	fbb0 f2f5 	udiv	r2, r0, r5
   1bc1a:	fb05 0212 	mls	r2, r5, r2, r0
   1bc1e:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1bc20:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   1bc24:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1bc26:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1bc28:	f100 0c08 	add.w	ip, r0, #8
   1bc2c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   1bc30:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1bc34:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1bc38:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   1bc3c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1bc40:	d002      	beq.n	1bc48 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1bc42:	b132      	cbz	r2, 1bc52 <lll_chan_sel_1+0x7a>
				chan_index--;
   1bc44:	3a01      	subs	r2, #1
   1bc46:	b2d2      	uxtb	r2, r2
			chan_next++;
   1bc48:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   1bc4a:	4584      	cmp	ip, r0
   1bc4c:	d1f2      	bne.n	1bc34 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1bc4e:	45a6      	cmp	lr, r4
   1bc50:	d1ea      	bne.n	1bc28 <lll_chan_sel_1+0x50>
}
   1bc52:	bd30      	pop	{r4, r5, pc}
   1bc54:	dd67c8a7 	.word	0xdd67c8a7

0001bc58 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   1bc58:	8842      	ldrh	r2, [r0, #2]
   1bc5a:	8800      	ldrh	r0, [r0, #0]
}
   1bc5c:	4050      	eors	r0, r2
   1bc5e:	4770      	bx	lr

0001bc60 <lll_chan_sel_2>:
{
   1bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1bc62:	4d2f      	ldr	r5, [pc, #188]	; (1bd20 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1bc64:	4c2f      	ldr	r4, [pc, #188]	; (1bd24 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   1bc66:	4048      	eors	r0, r1
   1bc68:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1bc6c:	0a07      	lsrs	r7, r0, #8
   1bc6e:	b2c0      	uxtb	r0, r0
   1bc70:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   1bc74:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1bc78:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   1bc7c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1bc80:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   1bc84:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1bc88:	433e      	orrs	r6, r7
   1bc8a:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1bc8e:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1bc92:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1bc96:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1bc9a:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1bc9e:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1bca0:	f3c0 4007 	ubfx	r0, r0, #16, #8
   1bca4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1bca8:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   1bcac:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1bcb0:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1bcb2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1bcb6:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1bcb8:	d1d8      	bne.n	1bc6c <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   1bcba:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1bcbc:	481a      	ldr	r0, [pc, #104]	; (1bd28 <lll_chan_sel_2+0xc8>)
   1bcbe:	fba0 4001 	umull	r4, r0, r0, r1
   1bcc2:	1a0c      	subs	r4, r1, r0
   1bcc4:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1bcc8:	0940      	lsrs	r0, r0, #5
   1bcca:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1bcce:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1bcd2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1bcd4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1bcd8:	f000 0507 	and.w	r5, r0, #7
   1bcdc:	5d14      	ldrb	r4, [r2, r4]
   1bcde:	412c      	asrs	r4, r5
   1bce0:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   1bce2:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1bce4:	d41a      	bmi.n	1bd1c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1bce6:	fb01 f303 	mul.w	r3, r1, r3
   1bcea:	1e56      	subs	r6, r2, #1
   1bcec:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1bcf0:	3204      	adds	r2, #4
	chan_next = 0U;
   1bcf2:	4660      	mov	r0, ip
		bite = *chan_map;
   1bcf4:	f100 0508 	add.w	r5, r0, #8
   1bcf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1bcfc:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1bcfe:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1bd02:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   1bd06:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1bd0a:	d002      	beq.n	1bd12 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1bd0c:	b133      	cbz	r3, 1bd1c <lll_chan_sel_2+0xbc>
				chan_index--;
   1bd0e:	3b01      	subs	r3, #1
   1bd10:	b2db      	uxtb	r3, r3
			chan_next++;
   1bd12:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   1bd14:	42a8      	cmp	r0, r5
   1bd16:	d1f2      	bne.n	1bcfe <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   1bd18:	42b2      	cmp	r2, r6
   1bd1a:	d1eb      	bne.n	1bcf4 <lll_chan_sel_2+0x94>
}
   1bd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bd1e:	bf00      	nop
   1bd20:	00022110 	.word	0x00022110
   1bd24:	00088440 	.word	0x00088440
   1bd28:	bacf914d 	.word	0xbacf914d

0001bd2c <rl_update>:
static void rl_update(void)
{
	uint8_t i;

	/* Populate filter from rl peers */
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd2c:	491a      	ldr	r1, [pc, #104]	; (1bd98 <rl_update+0x6c>)
   1bd2e:	481b      	ldr	r0, [pc, #108]	; (1bd9c <rl_update+0x70>)
{
   1bd30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bd34:	2300      	movs	r3, #0
   1bd36:	1e46      	subs	r6, r0, #1
}

static void filter_insert(struct lll_filter *const filter, int index,
			  uint8_t addr_type, const uint8_t *const bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1bd38:	f1a1 0c02 	sub.w	ip, r1, #2
   1bd3c:	2701      	movs	r7, #1
   1bd3e:	e006      	b.n	1bd4e <rl_update+0x22>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd40:	3301      	adds	r3, #1
   1bd42:	2b08      	cmp	r3, #8
   1bd44:	f101 0106 	add.w	r1, r1, #6
   1bd48:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1bd4c:	d022      	beq.n	1bd94 <rl_update+0x68>
		if (rl[i].taken) {
   1bd4e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1bd52:	f816 2032 	ldrb.w	r2, [r6, r2, lsl #3]
   1bd56:	07d4      	lsls	r4, r2, #31
   1bd58:	d5f2      	bpl.n	1bd40 <rl_update+0x14>
	filter->enable_bitmask |= BIT(index);
   1bd5a:	f89c 5000 	ldrb.w	r5, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bd5e:	f89c e001 	ldrb.w	lr, [ip, #1]
   1bd62:	f8d0 8000 	ldr.w	r8, [r0]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1bd66:	f3c2 1280 	ubfx	r2, r2, #6, #1
	filter->enable_bitmask |= BIT(index);
   1bd6a:	fa07 f403 	lsl.w	r4, r7, r3
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bd6e:	409a      	lsls	r2, r3
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd70:	3301      	adds	r3, #1
	filter->enable_bitmask |= BIT(index);
   1bd72:	432c      	orrs	r4, r5
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bd74:	ea4e 0202 	orr.w	r2, lr, r2
   1bd78:	8885      	ldrh	r5, [r0, #4]
   1bd7a:	808d      	strh	r5, [r1, #4]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd7c:	2b08      	cmp	r3, #8
	filter->enable_bitmask |= BIT(index);
   1bd7e:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bd82:	f88c 2001 	strb.w	r2, [ip, #1]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bd86:	f101 0106 	add.w	r1, r1, #6
   1bd8a:	f841 8c06 	str.w	r8, [r1, #-6]
   1bd8e:	f100 0028 	add.w	r0, r0, #40	; 0x28
   1bd92:	d1dc      	bne.n	1bd4e <rl_update+0x22>
}
   1bd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bd98:	20003236 	.word	0x20003236
   1bd9c:	200030f5 	.word	0x200030f5

0001bda0 <fal_update>:
	for (i = 0U; i < FAL_SIZE; i++) {
   1bda0:	4820      	ldr	r0, [pc, #128]	; (1be24 <fal_update+0x84>)
   1bda2:	4a21      	ldr	r2, [pc, #132]	; (1be28 <fal_update+0x88>)
{
   1bda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1bda8:	4f20      	ldr	r7, [pc, #128]	; (1be2c <fal_update+0x8c>)
   1bdaa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1be30 <fal_update+0x90>
{
   1bdae:	2300      	movs	r3, #0
   1bdb0:	1e95      	subs	r5, r2, #2
	filter->enable_bitmask |= BIT(index);
   1bdb2:	f1a0 0c02 	sub.w	ip, r0, #2
   1bdb6:	2601      	movs	r6, #1
		if (!fal[i].taken) {
   1bdb8:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
   1bdbc:	07c9      	lsls	r1, r1, #31
	filter->enable_bitmask |= BIT(index);
   1bdbe:	fa06 f903 	lsl.w	r9, r6, r3
		if (!fal[i].taken) {
   1bdc2:	d526      	bpl.n	1be12 <fal_update+0x72>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1bdc4:	7839      	ldrb	r1, [r7, #0]
   1bdc6:	b159      	cbz	r1, 1bde0 <fal_update+0x40>
		j = fal[i].rl_idx;
   1bdc8:	f812 1c01 	ldrb.w	r1, [r2, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1bdcc:	2907      	cmp	r1, #7
   1bdce:	eb01 0481 	add.w	r4, r1, r1, lsl #2
   1bdd2:	d805      	bhi.n	1bde0 <fal_update+0x40>
   1bdd4:	f818 1034 	ldrb.w	r1, [r8, r4, lsl #3]
   1bdd8:	074c      	lsls	r4, r1, #29
   1bdda:	d501      	bpl.n	1bde0 <fal_update+0x40>
   1bddc:	06c9      	lsls	r1, r1, #27
   1bdde:	d518      	bpl.n	1be12 <fal_update+0x72>
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1bde0:	f815 1033 	ldrb.w	r1, [r5, r3, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bde4:	f89c e001 	ldrb.w	lr, [ip, #1]
	filter->enable_bitmask |= BIT(index);
   1bde8:	f89c 4000 	ldrb.w	r4, [ip]
   1bdec:	f8d2 a000 	ldr.w	sl, [r2]
			filter_insert(&fal_filter, i, fal[i].id_addr_type,
   1bdf0:	f3c1 0140 	ubfx	r1, r1, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1bdf4:	4099      	lsls	r1, r3
   1bdf6:	ea4e 0101 	orr.w	r1, lr, r1
	filter->enable_bitmask |= BIT(index);
   1bdfa:	ea44 0409 	orr.w	r4, r4, r9
   1bdfe:	f8b2 e004 	ldrh.w	lr, [r2, #4]
   1be02:	f88c 4000 	strb.w	r4, [ip]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1be06:	f88c 1001 	strb.w	r1, [ip, #1]
   1be0a:	f8a0 e004 	strh.w	lr, [r0, #4]
   1be0e:	f8c0 a000 	str.w	sl, [r0]
	for (i = 0U; i < FAL_SIZE; i++) {
   1be12:	3301      	adds	r3, #1
   1be14:	2b08      	cmp	r3, #8
   1be16:	f100 0006 	add.w	r0, r0, #6
   1be1a:	f102 0208 	add.w	r2, r2, #8
   1be1e:	d1cb      	bne.n	1bdb8 <fal_update+0x18>
}
   1be20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1be24:	2000300a 	.word	0x2000300a
   1be28:	20002fca 	.word	0x20002fca
   1be2c:	20003af9 	.word	0x20003af9
   1be30:	200030f4 	.word	0x200030f4

0001be34 <ll_fal_size_get>:
}
   1be34:	2008      	movs	r0, #8
   1be36:	4770      	bx	lr

0001be38 <ll_fal_clear>:
{
   1be38:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1be3a:	2000      	movs	r0, #0
   1be3c:	f7fa f82c 	bl	15e98 <ull_adv_filter_pol_get>
   1be40:	b9f0      	cbnz	r0, 1be80 <ll_fal_clear+0x48>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1be42:	f7fa fa5b 	bl	162fc <ull_scan_filter_pol_get>
   1be46:	f010 0001 	ands.w	r0, r0, #1
   1be4a:	d119      	bne.n	1be80 <ll_fal_clear+0x48>
   1be4c:	4a0d      	ldr	r2, [pc, #52]	; (1be84 <ll_fal_clear+0x4c>)
			rl[j].fal = 0U;
   1be4e:	4c0e      	ldr	r4, [pc, #56]	; (1be88 <ll_fal_clear+0x50>)
		uint8_t j = fal[i].rl_idx;
   1be50:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1be54:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1be56:	2b07      	cmp	r3, #7
			rl[j].fal = 0U;
   1be58:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1be5c:	d805      	bhi.n	1be6a <ll_fal_clear+0x32>
			rl[j].fal = 0U;
   1be5e:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   1be62:	f36f 1345 	bfc	r3, #5, #1
   1be66:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		fal[i].taken = 0U;
   1be6a:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1be6e:	f36f 0300 	bfc	r3, #0, #1
   1be72:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1be76:	3001      	adds	r0, #1
   1be78:	2808      	cmp	r0, #8
   1be7a:	d1e9      	bne.n	1be50 <ll_fal_clear+0x18>
	return 0;
   1be7c:	2000      	movs	r0, #0
}
   1be7e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1be80:	200c      	movs	r0, #12
}
   1be82:	bd10      	pop	{r4, pc}
   1be84:	20002fc8 	.word	0x20002fc8
   1be88:	200030f4 	.word	0x200030f4

0001be8c <ll_fal_add>:
{
   1be8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1be90:	4607      	mov	r7, r0
   1be92:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   1be94:	2000      	movs	r0, #0
   1be96:	f7f9 ffff 	bl	15e98 <ull_adv_filter_pol_get>
   1be9a:	2800      	cmp	r0, #0
   1be9c:	d172      	bne.n	1bf84 <ll_fal_add+0xf8>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1be9e:	f7fa fa2d 	bl	162fc <ull_scan_filter_pol_get>
   1bea2:	f010 0401 	ands.w	r4, r0, #1
   1bea6:	d16d      	bne.n	1bf84 <ll_fal_add+0xf8>
	if (addr->type == ADDR_TYPE_ANON) {
   1bea8:	f897 a000 	ldrb.w	sl, [r7]
   1beac:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   1beb0:	d06c      	beq.n	1bf8c <ll_fal_add+0x100>
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1beb2:	4e42      	ldr	r6, [pc, #264]	; (1bfbc <ll_fal_add+0x130>)
   1beb4:	f107 0b01 	add.w	fp, r7, #1
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1beb8:	f00a 0a01 	and.w	sl, sl, #1
		*free_idx = FILTER_IDX_NONE;
   1bebc:	f04f 09ff 	mov.w	r9, #255	; 0xff
	i = fal_find(id_addr->type, id_addr->a.val, &j);
   1bec0:	4625      	mov	r5, r4
   1bec2:	f1a6 0802 	sub.w	r8, r6, #2
   1bec6:	e009      	b.n	1bedc <ll_fal_add+0x50>
		} else if (free_idx && !fal[i].taken &&
   1bec8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   1becc:	d101      	bne.n	1bed2 <ll_fal_add+0x46>
			*free_idx = i;
   1bece:	fa5f f985 	uxtb.w	r9, r5
	for (i = 0; i < FAL_SIZE; i++) {
   1bed2:	3501      	adds	r5, #1
   1bed4:	2d08      	cmp	r5, #8
   1bed6:	f106 0608 	add.w	r6, r6, #8
   1beda:	d017      	beq.n	1bf0c <ll_fal_add+0x80>
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1bedc:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1bee0:	07d8      	lsls	r0, r3, #31
   1bee2:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1bee6:	d5ef      	bpl.n	1bec8 <ll_fal_add+0x3c>
   1bee8:	4552      	cmp	r2, sl
   1beea:	d1f2      	bne.n	1bed2 <ll_fal_add+0x46>
   1beec:	2206      	movs	r2, #6
   1beee:	4630      	mov	r0, r6
   1bef0:	4659      	mov	r1, fp
   1bef2:	f012 fb28 	bl	2e546 <memcmp>
   1bef6:	2800      	cmp	r0, #0
   1bef8:	d041      	beq.n	1bf7e <ll_fal_add+0xf2>
		} else if (free_idx && !fal[i].taken &&
   1befa:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1befe:	07d9      	lsls	r1, r3, #31
   1bf00:	d5e2      	bpl.n	1bec8 <ll_fal_add+0x3c>
	for (i = 0; i < FAL_SIZE; i++) {
   1bf02:	3501      	adds	r5, #1
   1bf04:	2d08      	cmp	r5, #8
   1bf06:	f106 0608 	add.w	r6, r6, #8
   1bf0a:	d1e7      	bne.n	1bedc <ll_fal_add+0x50>
	} else if (j >= ARRAY_SIZE(fal)) {
   1bf0c:	f1b9 0f07 	cmp.w	r9, #7
   1bf10:	d840      	bhi.n	1bf94 <ll_fal_add+0x108>
	fal[i].id_addr_type = id_addr->type & 0x1;
   1bf12:	783a      	ldrb	r2, [r7, #0]
   1bf14:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1bf18:	4e29      	ldr	r6, [pc, #164]	; (1bfc0 <ll_fal_add+0x134>)
   1bf1a:	f362 0341 	bfi	r3, r2, #1, #1
   1bf1e:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	bt_addr_copy(&fal[i].id_addr, &id_addr->a);
   1bf22:	2302      	movs	r3, #2
   1bf24:	fb15 3509 	smlabb	r5, r5, r9, r3
   1bf28:	f8d7 3001 	ldr.w	r3, [r7, #1]
   1bf2c:	f848 3005 	str.w	r3, [r8, r5]
   1bf30:	4445      	add	r5, r8
   1bf32:	f8bb 3004 	ldrh.w	r3, [fp, #4]
   1bf36:	80ab      	strh	r3, [r5, #4]
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1bf38:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bf3a:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bf3c:	f003 0301 	and.w	r3, r3, #1
   1bf40:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1bf44:	fa5f fa84 	uxtb.w	sl, r4
   1bf48:	f817 2035 	ldrb.w	r2, [r7, r5, lsl #3]
   1bf4c:	f3c2 1180 	ubfx	r1, r2, #6, #1
   1bf50:	07d2      	lsls	r2, r2, #31
   1bf52:	f104 0401 	add.w	r4, r4, #1
   1bf56:	ea4f 05c5 	mov.w	r5, r5, lsl #3
   1bf5a:	d501      	bpl.n	1bf60 <ll_fal_add+0xd4>
   1bf5c:	4299      	cmp	r1, r3
   1bf5e:	d01b      	beq.n	1bf98 <ll_fal_add+0x10c>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1bf60:	2c08      	cmp	r4, #8
   1bf62:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1bf66:	d1eb      	bne.n	1bf40 <ll_fal_add+0xb4>
		fal[i].rl_idx = FILTER_IDX_NONE;
   1bf68:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1bf6c:	22ff      	movs	r2, #255	; 0xff
   1bf6e:	705a      	strb	r2, [r3, #1]
	fal[i].taken = 1U;
   1bf70:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   1bf74:	f043 0301 	orr.w	r3, r3, #1
   1bf78:	f808 3039 	strb.w	r3, [r8, r9, lsl #3]
	return 0;
   1bf7c:	2000      	movs	r0, #0
}
   1bf7e:	b003      	add	sp, #12
   1bf80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1bf84:	200c      	movs	r0, #12
}
   1bf86:	b003      	add	sp, #12
   1bf88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
   1bf8c:	4620      	mov	r0, r4
}
   1bf8e:	b003      	add	sp, #12
   1bf90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf94:	2007      	movs	r0, #7
	return fal_add(addr);
   1bf96:	e7f2      	b.n	1bf7e <ll_fal_add+0xf2>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1bf98:	4630      	mov	r0, r6
   1bf9a:	2206      	movs	r2, #6
   1bf9c:	4659      	mov	r1, fp
   1bf9e:	9301      	str	r3, [sp, #4]
   1bfa0:	f012 fad1 	bl	2e546 <memcmp>
   1bfa4:	9b01      	ldr	r3, [sp, #4]
   1bfa6:	2800      	cmp	r0, #0
   1bfa8:	d1da      	bne.n	1bf60 <ll_fal_add+0xd4>
		rl[j].fal = 1U;
   1bfaa:	5d7b      	ldrb	r3, [r7, r5]
   1bfac:	f043 0320 	orr.w	r3, r3, #32
   1bfb0:	557b      	strb	r3, [r7, r5]
		fal[i].rl_idx = j;
   1bfb2:	eb08 03c9 	add.w	r3, r8, r9, lsl #3
   1bfb6:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].fal = 1U;
   1bfba:	e7d9      	b.n	1bf70 <ll_fal_add+0xe4>
   1bfbc:	20002fca 	.word	0x20002fca
   1bfc0:	200030f5 	.word	0x200030f5

0001bfc4 <ll_fal_remove>:
{
   1bfc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfc8:	4606      	mov	r6, r0
	if (ull_adv_filter_pol_get(0)) {
   1bfca:	2000      	movs	r0, #0
   1bfcc:	f7f9 ff64 	bl	15e98 <ull_adv_filter_pol_get>
   1bfd0:	b9f0      	cbnz	r0, 1c010 <ll_fal_remove+0x4c>
	if (ull_scan_filter_pol_get(0) & 0x1) {
   1bfd2:	f7fa f993 	bl	162fc <ull_scan_filter_pol_get>
   1bfd6:	f010 0401 	ands.w	r4, r0, #1
   1bfda:	d119      	bne.n	1c010 <ll_fal_remove+0x4c>
	if (addr->type == ADDR_TYPE_ANON) {
   1bfdc:	f896 8000 	ldrb.w	r8, [r6]
   1bfe0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1bfe4:	d035      	beq.n	1c052 <ll_fal_remove+0x8e>
	uint8_t i = fal_find(id_addr->type, id_addr->a.val, NULL);
   1bfe6:	4d1c      	ldr	r5, [pc, #112]	; (1c058 <ll_fal_remove+0x94>)
   1bfe8:	3601      	adds	r6, #1
	for (i = 0; i < FAL_SIZE; i++) {
   1bfea:	1eaf      	subs	r7, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1bfec:	f008 0801 	and.w	r8, r8, #1
   1bff0:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1bff4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1bff8:	07db      	lsls	r3, r3, #31
   1bffa:	d501      	bpl.n	1c000 <ll_fal_remove+0x3c>
   1bffc:	4542      	cmp	r2, r8
   1bffe:	d00a      	beq.n	1c016 <ll_fal_remove+0x52>
	for (i = 0; i < FAL_SIZE; i++) {
   1c000:	3401      	adds	r4, #1
   1c002:	2c08      	cmp	r4, #8
   1c004:	f105 0508 	add.w	r5, r5, #8
   1c008:	d1f2      	bne.n	1bff0 <ll_fal_remove+0x2c>
   1c00a:	2002      	movs	r0, #2
}
   1c00c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c010:	200c      	movs	r0, #12
}
   1c012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1c016:	2206      	movs	r2, #6
   1c018:	4628      	mov	r0, r5
   1c01a:	4631      	mov	r1, r6
   1c01c:	f012 fa93 	bl	2e546 <memcmp>
   1c020:	2800      	cmp	r0, #0
   1c022:	d1ed      	bne.n	1c000 <ll_fal_remove+0x3c>
		uint8_t j = fal[i].rl_idx;
   1c024:	eb07 03c4 	add.w	r3, r7, r4, lsl #3
   1c028:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1c02a:	2b07      	cmp	r3, #7
   1c02c:	d808      	bhi.n	1c040 <ll_fal_remove+0x7c>
			rl[j].fal = 0U;
   1c02e:	4a0b      	ldr	r2, [pc, #44]	; (1c05c <ll_fal_remove+0x98>)
   1c030:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1c034:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1c038:	f360 1145 	bfi	r1, r0, #5, #1
   1c03c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		fal[i].taken = 0U;
   1c040:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   1c044:	f36f 0300 	bfc	r3, #0, #1
   1c048:	f807 3034 	strb.w	r3, [r7, r4, lsl #3]
		return 0;
   1c04c:	2000      	movs	r0, #0
}
   1c04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1c052:	4620      	mov	r0, r4
}
   1c054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c058:	20002fca 	.word	0x20002fca
   1c05c:	200030f4 	.word	0x200030f4

0001c060 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1c060:	2807      	cmp	r0, #7
{
   1c062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c066:	4604      	mov	r4, r0
   1c068:	460f      	mov	r7, r1
   1c06a:	4615      	mov	r5, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1c06c:	d819      	bhi.n	1c0a2 <ll_rl_id_addr_get+0x42>
	LL_ASSERT(rl[rl_idx].taken);
   1c06e:	4e1b      	ldr	r6, [pc, #108]	; (1c0dc <ll_rl_id_addr_get+0x7c>)
   1c070:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c074:	ea4f 0884 	mov.w	r8, r4, lsl #2
   1c078:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1c07c:	07db      	lsls	r3, r3, #31
   1c07e:	d51e      	bpl.n	1c0be <ll_rl_id_addr_get+0x5e>
	*id_addr_type = rl[rl_idx].id_addr_type;
   1c080:	44a0      	add	r8, r4
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1c082:	2028      	movs	r0, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   1c084:	f816 3038 	ldrb.w	r3, [r6, r8, lsl #3]
   1c088:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1c08c:	703b      	strb	r3, [r7, #0]
	(void)memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1c08e:	2301      	movs	r3, #1
   1c090:	fb10 3404 	smlabb	r4, r0, r4, r3
   1c094:	1933      	adds	r3, r6, r4
   1c096:	5932      	ldr	r2, [r6, r4]
   1c098:	602a      	str	r2, [r5, #0]
   1c09a:	889b      	ldrh	r3, [r3, #4]
   1c09c:	80ab      	strh	r3, [r5, #4]
}
   1c09e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1c0a2:	4a0f      	ldr	r2, [pc, #60]	; (1c0e0 <ll_rl_id_addr_get+0x80>)
   1c0a4:	490f      	ldr	r1, [pc, #60]	; (1c0e4 <ll_rl_id_addr_get+0x84>)
   1c0a6:	4810      	ldr	r0, [pc, #64]	; (1c0e8 <ll_rl_id_addr_get+0x88>)
   1c0a8:	f44f 7389 	mov.w	r3, #274	; 0x112
   1c0ac:	f00b ff7c 	bl	27fa8 <printk>
   1c0b0:	4040      	eors	r0, r0
   1c0b2:	f380 8811 	msr	BASEPRI, r0
   1c0b6:	f04f 0003 	mov.w	r0, #3
   1c0ba:	df02      	svc	2
   1c0bc:	e7d7      	b.n	1c06e <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1c0be:	4a08      	ldr	r2, [pc, #32]	; (1c0e0 <ll_rl_id_addr_get+0x80>)
   1c0c0:	490a      	ldr	r1, [pc, #40]	; (1c0ec <ll_rl_id_addr_get+0x8c>)
   1c0c2:	4809      	ldr	r0, [pc, #36]	; (1c0e8 <ll_rl_id_addr_get+0x88>)
   1c0c4:	f240 1313 	movw	r3, #275	; 0x113
   1c0c8:	f00b ff6e 	bl	27fa8 <printk>
   1c0cc:	4040      	eors	r0, r0
   1c0ce:	f380 8811 	msr	BASEPRI, r0
   1c0d2:	f04f 0003 	mov.w	r0, #3
   1c0d6:	df02      	svc	2
   1c0d8:	e7d2      	b.n	1c080 <ll_rl_id_addr_get+0x20>
   1c0da:	bf00      	nop
   1c0dc:	200030f4 	.word	0x200030f4
   1c0e0:	00030934 	.word	0x00030934
   1c0e4:	00030978 	.word	0x00030978
   1c0e8:	0002fedc 	.word	0x0002fedc
   1c0ec:	00030984 	.word	0x00030984

0001c0f0 <ll_rl_size_get>:
   1c0f0:	2008      	movs	r0, #8
   1c0f2:	4770      	bx	lr

0001c0f4 <ll_rl_clear>:
{
   1c0f4:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c0f6:	2000      	movs	r0, #0
   1c0f8:	f7f9 fec2 	bl	15e80 <ull_adv_is_enabled>
		? 0 : 1;
   1c0fc:	b108      	cbz	r0, 1c102 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c0fe:	200c      	movs	r0, #12
}
   1c100:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c102:	f7fa f8e3 	bl	162cc <ull_scan_is_enabled>
		? 0 : 1;
   1c106:	f030 0001 	bics.w	r0, r0, #1
   1c10a:	d1f8      	bne.n	1c0fe <ll_rl_clear+0xa>
		rl[i].taken = 0U;
   1c10c:	4b18      	ldr	r3, [pc, #96]	; (1c170 <ll_rl_clear+0x7c>)
	peer_irk_count = 0U;
   1c10e:	4c19      	ldr	r4, [pc, #100]	; (1c174 <ll_rl_clear+0x80>)
		rl[i].taken = 0U;
   1c110:	7819      	ldrb	r1, [r3, #0]
   1c112:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   1c116:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   1c118:	f360 0100 	bfi	r1, r0, #0, #1
   1c11c:	f360 0200 	bfi	r2, r0, #0, #1
   1c120:	7019      	strb	r1, [r3, #0]
   1c122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   1c126:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   1c12a:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   1c12e:	f360 0100 	bfi	r1, r0, #0, #1
   1c132:	f360 0200 	bfi	r2, r0, #0, #1
   1c136:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   1c13a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   1c13e:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   1c142:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   1c146:	f360 0100 	bfi	r1, r0, #0, #1
   1c14a:	f360 0200 	bfi	r2, r0, #0, #1
   1c14e:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   1c152:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   1c156:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   1c15a:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1c15e:	f360 0100 	bfi	r1, r0, #0, #1
   1c162:	f360 0200 	bfi	r2, r0, #0, #1
   1c166:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   1c16a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1c16e:	bd10      	pop	{r4, pc}
   1c170:	200030f4 	.word	0x200030f4
   1c174:	20003af8 	.word	0x20003af8

0001c178 <ll_rl_remove>:
{
   1c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c17c:	b083      	sub	sp, #12
   1c17e:	4603      	mov	r3, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c180:	2000      	movs	r0, #0
{
   1c182:	9301      	str	r3, [sp, #4]
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c184:	f7f9 fe7c 	bl	15e80 <ull_adv_is_enabled>
		? 0 : 1;
   1c188:	b118      	cbz	r0, 1c192 <ll_rl_remove+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c18a:	200c      	movs	r0, #12
}
   1c18c:	b003      	add	sp, #12
   1c18e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c192:	f7fa f89b 	bl	162cc <ull_scan_is_enabled>
		? 0 : 1;
   1c196:	f030 0a01 	bics.w	sl, r0, #1
   1c19a:	d1f6      	bne.n	1c18a <ll_rl_remove+0x12>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c19c:	f8dd b004 	ldr.w	fp, [sp, #4]
   1c1a0:	f8df 8118 	ldr.w	r8, [pc, #280]	; 1c2bc <ll_rl_remove+0x144>
   1c1a4:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c1a8:	f003 0301 	and.w	r3, r3, #1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c1ac:	4654      	mov	r4, sl
   1c1ae:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
   1c1b2:	461f      	mov	r7, r3
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c1b4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c1b8:	eb06 05c2 	add.w	r5, r6, r2, lsl #3
   1c1bc:	f816 3032 	ldrb.w	r3, [r6, r2, lsl #3]
   1c1c0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c1c4:	07db      	lsls	r3, r3, #31
   1c1c6:	ea4f 0984 	mov.w	r9, r4, lsl #2
   1c1ca:	d501      	bpl.n	1c1d0 <ll_rl_remove+0x58>
   1c1cc:	42ba      	cmp	r2, r7
   1c1ce:	d008      	beq.n	1c1e2 <ll_rl_remove+0x6a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c1d0:	3401      	adds	r4, #1
   1c1d2:	2c08      	cmp	r4, #8
   1c1d4:	f108 0828 	add.w	r8, r8, #40	; 0x28
   1c1d8:	d1ec      	bne.n	1c1b4 <ll_rl_remove+0x3c>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c1da:	2002      	movs	r0, #2
}
   1c1dc:	b003      	add	sp, #12
   1c1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c1e2:	4640      	mov	r0, r8
   1c1e4:	2206      	movs	r2, #6
   1c1e6:	4659      	mov	r1, fp
   1c1e8:	f012 f9ad 	bl	2e546 <memcmp>
   1c1ec:	2800      	cmp	r0, #0
   1c1ee:	d1ef      	bne.n	1c1d0 <ll_rl_remove+0x58>
		if (rl[i].pirk) {
   1c1f0:	782b      	ldrb	r3, [r5, #0]
   1c1f2:	075b      	lsls	r3, r3, #29
   1c1f4:	4607      	mov	r7, r0
   1c1f6:	d52e      	bpl.n	1c256 <ll_rl_remove+0xde>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1c1f8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1c2c0 <ll_rl_remove+0x148>
   1c1fc:	f898 c000 	ldrb.w	ip, [r8]
   1c200:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
			if (pj && pi != pj) {
   1c204:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
   1c208:	d023      	beq.n	1c252 <ll_rl_remove+0xda>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1c20a:	f895 e017 	ldrb.w	lr, [r5, #23]
			if (pj && pi != pj) {
   1c20e:	45e6      	cmp	lr, ip
   1c210:	d01f      	beq.n	1c252 <ll_rl_remove+0xda>
				(void)memcpy(peer_irks[pi], peer_irks[pj],
   1c212:	4a2c      	ldr	r2, [pc, #176]	; (1c2c4 <ll_rl_remove+0x14c>)
   1c214:	eb02 130c 	add.w	r3, r2, ip, lsl #4
   1c218:	eb02 120e 	add.w	r2, r2, lr, lsl #4
   1c21c:	4615      	mov	r5, r2
   1c21e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c220:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1c224:	4d28      	ldr	r5, [pc, #160]	; (1c2c8 <ll_rl_remove+0x150>)
					if (rl[k].taken && rl[k].pirk &&
   1c226:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
   1c22a:	fa5f f18a 	uxtb.w	r1, sl
   1c22e:	f816 2033 	ldrb.w	r2, [r6, r3, lsl #3]
   1c232:	07d0      	lsls	r0, r2, #31
   1c234:	f10a 0a01 	add.w	sl, sl, #1
   1c238:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
   1c23c:	d504      	bpl.n	1c248 <ll_rl_remove+0xd0>
   1c23e:	0750      	lsls	r0, r2, #29
   1c240:	d502      	bpl.n	1c248 <ll_rl_remove+0xd0>
   1c242:	7dea      	ldrb	r2, [r5, #23]
   1c244:	4562      	cmp	r2, ip
   1c246:	d032      	beq.n	1c2ae <ll_rl_remove+0x136>
				for (k = 0U;
   1c248:	f1ba 0f08 	cmp.w	sl, #8
   1c24c:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c250:	d1e9      	bne.n	1c226 <ll_rl_remove+0xae>
			peer_irk_count--;
   1c252:	f888 c000 	strb.w	ip, [r8]
		j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1c256:	9b01      	ldr	r3, [sp, #4]
   1c258:	4d1c      	ldr	r5, [pc, #112]	; (1c2cc <ll_rl_remove+0x154>)
   1c25a:	f893 a000 	ldrb.w	sl, [r3]
	for (i = 0; i < FAL_SIZE; i++) {
   1c25e:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1c262:	f00a 0a01 	and.w	sl, sl, #1
   1c266:	f818 3037 	ldrb.w	r3, [r8, r7, lsl #3]
   1c26a:	07d9      	lsls	r1, r3, #31
   1c26c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   1c270:	d501      	bpl.n	1c276 <ll_rl_remove+0xfe>
   1c272:	4552      	cmp	r2, sl
   1c274:	d00f      	beq.n	1c296 <ll_rl_remove+0x11e>
	for (i = 0; i < FAL_SIZE; i++) {
   1c276:	3701      	adds	r7, #1
   1c278:	2f08      	cmp	r7, #8
   1c27a:	f105 0508 	add.w	r5, r5, #8
   1c27e:	d1f2      	bne.n	1c266 <ll_rl_remove+0xee>
		rl[i].taken = 0U;
   1c280:	444c      	add	r4, r9
		return 0;
   1c282:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1c284:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   1c288:	f36f 0300 	bfc	r3, #0, #1
   1c28c:	f806 3034 	strb.w	r3, [r6, r4, lsl #3]
}
   1c290:	b003      	add	sp, #12
   1c292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1c296:	2206      	movs	r2, #6
   1c298:	4628      	mov	r0, r5
   1c29a:	4659      	mov	r1, fp
   1c29c:	f012 f953 	bl	2e546 <memcmp>
   1c2a0:	2800      	cmp	r0, #0
   1c2a2:	d1e8      	bne.n	1c276 <ll_rl_remove+0xfe>
			fal[j].rl_idx = FILTER_IDX_NONE;
   1c2a4:	eb08 07c7 	add.w	r7, r8, r7, lsl #3
   1c2a8:	23ff      	movs	r3, #255	; 0xff
   1c2aa:	707b      	strb	r3, [r7, #1]
   1c2ac:	e7e8      	b.n	1c280 <ll_rl_remove+0x108>
						rl[k].pirk_idx = pi;
   1c2ae:	f883 e017 	strb.w	lr, [r3, #23]
						peer_irk_rl_ids[pi] = k;
   1c2b2:	4b07      	ldr	r3, [pc, #28]	; (1c2d0 <ll_rl_remove+0x158>)
   1c2b4:	f803 100e 	strb.w	r1, [r3, lr]
						break;
   1c2b8:	e7cb      	b.n	1c252 <ll_rl_remove+0xda>
   1c2ba:	bf00      	nop
   1c2bc:	200030f5 	.word	0x200030f5
   1c2c0:	20003af8 	.word	0x20003af8
   1c2c4:	20003074 	.word	0x20003074
   1c2c8:	200030f4 	.word	0x200030f4
   1c2cc:	20002fca 	.word	0x20002fca
   1c2d0:	2000306c 	.word	0x2000306c

0001c2d4 <ll_rl_crpa_set>:
{
   1c2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   1c2d8:	795c      	ldrb	r4, [r3, #5]
   1c2da:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   1c2de:	2c40      	cmp	r4, #64	; 0x40
   1c2e0:	d001      	beq.n	1c2e6 <ll_rl_crpa_set+0x12>
}
   1c2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   1c2e6:	461e      	mov	r6, r3
   1c2e8:	460f      	mov	r7, r1
   1c2ea:	b301      	cbz	r1, 1c32e <ll_rl_crpa_set+0x5a>
   1c2ec:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1c358 <ll_rl_crpa_set+0x84>
   1c2f0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c2f2:	f000 0a01 	and.w	sl, r0, #1
   1c2f6:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   1c2fa:	e003      	b.n	1c304 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c2fc:	2c08      	cmp	r4, #8
   1c2fe:	f109 0928 	add.w	r9, r9, #40	; 0x28
   1c302:	d0ee      	beq.n	1c2e2 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c304:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c308:	4625      	mov	r5, r4
   1c30a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   1c30e:	07d1      	lsls	r1, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c310:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c314:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1c318:	d5f0      	bpl.n	1c2fc <ll_rl_crpa_set+0x28>
   1c31a:	4553      	cmp	r3, sl
   1c31c:	d1ee      	bne.n	1c2fc <ll_rl_crpa_set+0x28>
   1c31e:	4648      	mov	r0, r9
   1c320:	2206      	movs	r2, #6
   1c322:	4639      	mov	r1, r7
   1c324:	f012 f90f 	bl	2e546 <memcmp>
   1c328:	2800      	cmp	r0, #0
   1c32a:	d1e7      	bne.n	1c2fc <ll_rl_crpa_set+0x28>
   1c32c:	e004      	b.n	1c338 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1c32e:	2a07      	cmp	r2, #7
   1c330:	d8d7      	bhi.n	1c2e2 <ll_rl_crpa_set+0xe>
   1c332:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1c35c <ll_rl_crpa_set+0x88>
   1c336:	4615      	mov	r5, r2
   1c338:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1c33c:	00eb      	lsls	r3, r5, #3
   1c33e:	f818 2035 	ldrb.w	r2, [r8, r5, lsl #3]
   1c342:	07d2      	lsls	r2, r2, #31
   1c344:	d5cd      	bpl.n	1c2e2 <ll_rl_crpa_set+0xe>
			(void)memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1c346:	3318      	adds	r3, #24
   1c348:	6830      	ldr	r0, [r6, #0]
   1c34a:	f848 0003 	str.w	r0, [r8, r3]
   1c34e:	4498      	add	r8, r3
   1c350:	88b3      	ldrh	r3, [r6, #4]
   1c352:	f8a8 3004 	strh.w	r3, [r8, #4]
}
   1c356:	e7c4      	b.n	1c2e2 <ll_rl_crpa_set+0xe>
   1c358:	200030f5 	.word	0x200030f5
   1c35c:	200030f4 	.word	0x200030f4

0001c360 <ll_rl_crpa_get>:
{
   1c360:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c364:	4682      	mov	sl, r0
   1c366:	4e1a      	ldr	r6, [pc, #104]	; (1c3d0 <ll_rl_crpa_get+0x70>)
   1c368:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1c36c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c36e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c370:	f008 0801 	and.w	r8, r8, #1
   1c374:	1e77      	subs	r7, r6, #1
   1c376:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c37a:	00d5      	lsls	r5, r2, #3
   1c37c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1c380:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c384:	07db      	lsls	r3, r3, #31
   1c386:	f104 0401 	add.w	r4, r4, #1
   1c38a:	d501      	bpl.n	1c390 <ll_rl_crpa_get+0x30>
   1c38c:	4542      	cmp	r2, r8
   1c38e:	d006      	beq.n	1c39e <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c390:	2c08      	cmp	r4, #8
   1c392:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1c396:	d1ee      	bne.n	1c376 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c398:	2002      	movs	r0, #2
}
   1c39a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c39e:	4630      	mov	r0, r6
   1c3a0:	2206      	movs	r2, #6
   1c3a2:	4651      	mov	r1, sl
   1c3a4:	f012 f8cf 	bl	2e546 <memcmp>
   1c3a8:	4683      	mov	fp, r0
   1c3aa:	2800      	cmp	r0, #0
   1c3ac:	d1f0      	bne.n	1c390 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1c3ae:	3518      	adds	r5, #24
   1c3b0:	197c      	adds	r4, r7, r5
   1c3b2:	2106      	movs	r1, #6
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	f7f4 fceb 	bl	10d90 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1c3ba:	2800      	cmp	r0, #0
   1c3bc:	d0ec      	beq.n	1c398 <ll_rl_crpa_get+0x38>
   1c3be:	5978      	ldr	r0, [r7, r5]
   1c3c0:	f8c9 0000 	str.w	r0, [r9]
   1c3c4:	88a3      	ldrh	r3, [r4, #4]
   1c3c6:	f8a9 3004 	strh.w	r3, [r9, #4]
		return 0;
   1c3ca:	4658      	mov	r0, fp
}
   1c3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c3d0:	200030f5 	.word	0x200030f5

0001c3d4 <ll_rl_lrpa_get>:
{
   1c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c3d8:	4681      	mov	r9, r0
   1c3da:	4e16      	ldr	r6, [pc, #88]	; (1c434 <ll_rl_lrpa_get+0x60>)
   1c3dc:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1c3e0:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c3e2:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c3e4:	f008 0801 	and.w	r8, r8, #1
   1c3e8:	1e77      	subs	r7, r6, #1
   1c3ea:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c3ee:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1c3f2:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1c3f6:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c3fa:	07db      	lsls	r3, r3, #31
   1c3fc:	f104 0401 	add.w	r4, r4, #1
   1c400:	d501      	bpl.n	1c406 <ll_rl_lrpa_get+0x32>
   1c402:	4542      	cmp	r2, r8
   1c404:	d006      	beq.n	1c414 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c406:	2c08      	cmp	r4, #8
   1c408:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1c40c:	d1ed      	bne.n	1c3ea <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c40e:	2002      	movs	r0, #2
}
   1c410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c414:	4630      	mov	r0, r6
   1c416:	2206      	movs	r2, #6
   1c418:	4649      	mov	r1, r9
   1c41a:	f012 f894 	bl	2e546 <memcmp>
   1c41e:	2800      	cmp	r0, #0
   1c420:	d1f1      	bne.n	1c406 <ll_rl_lrpa_get+0x32>
   1c422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1c424:	681a      	ldr	r2, [r3, #0]
   1c426:	f8ca 2000 	str.w	r2, [sl]
   1c42a:	889b      	ldrh	r3, [r3, #4]
   1c42c:	f8aa 3004 	strh.w	r3, [sl, #4]
}
   1c430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c434:	200030f5 	.word	0x200030f5

0001c438 <ll_rl_enable>:
{
   1c438:	b510      	push	{r4, lr}
   1c43a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c43c:	2000      	movs	r0, #0
   1c43e:	f7f9 fd1f 	bl	15e80 <ull_adv_is_enabled>
		? 0 : 1;
   1c442:	b108      	cbz	r0, 1c448 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c444:	200c      	movs	r0, #12
}
   1c446:	bd10      	pop	{r4, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c448:	f7f9 ff40 	bl	162cc <ull_scan_is_enabled>
		? 0 : 1;
   1c44c:	f030 0001 	bics.w	r0, r0, #1
   1c450:	d1f8      	bne.n	1c444 <ll_rl_enable+0xc>
	switch (enable) {
   1c452:	b134      	cbz	r4, 1c462 <ll_rl_enable+0x2a>
   1c454:	2c01      	cmp	r4, #1
   1c456:	d102      	bne.n	1c45e <ll_rl_enable+0x26>
		rl_enable = 1U;
   1c458:	4b04      	ldr	r3, [pc, #16]	; (1c46c <ll_rl_enable+0x34>)
   1c45a:	701c      	strb	r4, [r3, #0]
}
   1c45c:	bd10      	pop	{r4, pc}
	switch (enable) {
   1c45e:	2012      	movs	r0, #18
}
   1c460:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1c462:	4b02      	ldr	r3, [pc, #8]	; (1c46c <ll_rl_enable+0x34>)
   1c464:	701c      	strb	r4, [r3, #0]
	return 0;
   1c466:	4620      	mov	r0, r4
}
   1c468:	bd10      	pop	{r4, pc}
   1c46a:	bf00      	nop
   1c46c:	20003af9 	.word	0x20003af9

0001c470 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1c470:	4b03      	ldr	r3, [pc, #12]	; (1c480 <ll_rl_timeout_set+0x10>)
   1c472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c476:	fb02 f000 	mul.w	r0, r2, r0
   1c47a:	6018      	str	r0, [r3, #0]
}
   1c47c:	4770      	bx	lr
   1c47e:	bf00      	nop
   1c480:	20003268 	.word	0x20003268

0001c484 <ll_priv_mode_set>:
{
   1c484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c488:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c48a:	2000      	movs	r0, #0
{
   1c48c:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c48e:	f7f9 fcf7 	bl	15e80 <ull_adv_is_enabled>
		? 0 : 1;
   1c492:	b110      	cbz	r0, 1c49a <ll_priv_mode_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c494:	200c      	movs	r0, #12
}
   1c496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1c49a:	f7f9 ff17 	bl	162cc <ull_scan_is_enabled>
		? 0 : 1;
   1c49e:	f030 0401 	bics.w	r4, r0, #1
   1c4a2:	d1f7      	bne.n	1c494 <ll_priv_mode_set+0x10>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1c4a4:	4e1a      	ldr	r6, [pc, #104]	; (1c510 <ll_priv_mode_set+0x8c>)
   1c4a6:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c4aa:	1e77      	subs	r7, r6, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c4ac:	f009 0901 	and.w	r9, r9, #1
   1c4b0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1c4b4:	00d5      	lsls	r5, r2, #3
   1c4b6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1c4ba:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c4be:	07db      	lsls	r3, r3, #31
   1c4c0:	f104 0401 	add.w	r4, r4, #1
   1c4c4:	d501      	bpl.n	1c4ca <ll_priv_mode_set+0x46>
   1c4c6:	454a      	cmp	r2, r9
   1c4c8:	d006      	beq.n	1c4d8 <ll_priv_mode_set+0x54>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c4ca:	2c08      	cmp	r4, #8
   1c4cc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1c4d0:	d1ee      	bne.n	1c4b0 <ll_priv_mode_set+0x2c>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1c4d2:	2002      	movs	r0, #2
}
   1c4d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c4d8:	4630      	mov	r0, r6
   1c4da:	2206      	movs	r2, #6
   1c4dc:	4651      	mov	r1, sl
   1c4de:	f012 f832 	bl	2e546 <memcmp>
   1c4e2:	2800      	cmp	r0, #0
   1c4e4:	d1f1      	bne.n	1c4ca <ll_priv_mode_set+0x46>
		switch (mode) {
   1c4e6:	f1b8 0f00 	cmp.w	r8, #0
   1c4ea:	d00b      	beq.n	1c504 <ll_priv_mode_set+0x80>
   1c4ec:	f1b8 0f01 	cmp.w	r8, #1
   1c4f0:	d105      	bne.n	1c4fe <ll_priv_mode_set+0x7a>
			rl[i].dev = 1U;
   1c4f2:	5d7b      	ldrb	r3, [r7, r5]
   1c4f4:	f043 0310 	orr.w	r3, r3, #16
   1c4f8:	557b      	strb	r3, [r7, r5]
}
   1c4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1c4fe:	2012      	movs	r0, #18
}
   1c500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1c504:	5d7b      	ldrb	r3, [r7, r5]
   1c506:	f368 1304 	bfi	r3, r8, #4, #1
   1c50a:	557b      	strb	r3, [r7, r5]
	return 0;
   1c50c:	4640      	mov	r0, r8
			break;
   1c50e:	e7c2      	b.n	1c496 <ll_priv_mode_set+0x12>
   1c510:	200030f5 	.word	0x200030f5

0001c514 <ull_filter_reset>:
{
   1c514:	b4d0      	push	{r4, r6, r7}
   1c516:	4930      	ldr	r1, [pc, #192]	; (1c5d8 <ull_filter_reset+0xc4>)
   1c518:	4c30      	ldr	r4, [pc, #192]	; (1c5dc <ull_filter_reset+0xc8>)
	for (int i = 0; i < FAL_SIZE; i++) {
   1c51a:	2300      	movs	r3, #0
		uint8_t j = fal[i].rl_idx;
   1c51c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   1c520:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1c522:	2a07      	cmp	r2, #7
			rl[j].fal = 0U;
   1c524:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1c528:	d805      	bhi.n	1c536 <ull_filter_reset+0x22>
			rl[j].fal = 0U;
   1c52a:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   1c52e:	f36f 1245 	bfc	r2, #5, #1
   1c532:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		fal[i].taken = 0U;
   1c536:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   1c53a:	f36f 0200 	bfc	r2, #0, #1
   1c53e:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < FAL_SIZE; i++) {
   1c542:	3301      	adds	r3, #1
   1c544:	2b08      	cmp	r3, #8
   1c546:	d1e9      	bne.n	1c51c <ull_filter_reset+0x8>
	rl_enable = 0U;
   1c548:	4a25      	ldr	r2, [pc, #148]	; (1c5e0 <ull_filter_reset+0xcc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1c54a:	4c26      	ldr	r4, [pc, #152]	; (1c5e4 <ull_filter_reset+0xd0>)
	rl_enable = 0U;
   1c54c:	2300      	movs	r3, #0
   1c54e:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   1c550:	780a      	ldrb	r2, [r1, #0]
   1c552:	f363 0200 	bfi	r2, r3, #0, #1
   1c556:	700a      	strb	r2, [r1, #0]
   1c558:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   1c55c:	f363 0200 	bfi	r2, r3, #0, #1
   1c560:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   1c564:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   1c568:	f363 0200 	bfi	r2, r3, #0, #1
   1c56c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   1c570:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1c574:	f363 0200 	bfi	r2, r3, #0, #1
   1c578:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1c57c:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   1c580:	f363 0200 	bfi	r2, r3, #0, #1
   1c584:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   1c588:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   1c58c:	f363 0200 	bfi	r2, r3, #0, #1
   1c590:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   1c594:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   1c598:	f363 0200 	bfi	r2, r3, #0, #1
   1c59c:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   1c5a0:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   1c5a4:	f363 0200 	bfi	r2, r3, #0, #1
   1c5a8:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   1c5ac:	4a0e      	ldr	r2, [pc, #56]	; (1c5e8 <ull_filter_reset+0xd4>)
   1c5ae:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   1c5b0:	4b0e      	ldr	r3, [pc, #56]	; (1c5ec <ull_filter_reset+0xd8>)
   1c5b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c5b6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1c5ba:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1c5be:	4b0c      	ldr	r3, [pc, #48]	; (1c5f0 <ull_filter_reset+0xdc>)
   1c5c0:	6023      	str	r3, [r4, #0]
	if (init) {
   1c5c2:	b120      	cbz	r0, 1c5ce <ull_filter_reset+0xba>
}
   1c5c4:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   1c5c6:	490b      	ldr	r1, [pc, #44]	; (1c5f4 <ull_filter_reset+0xe0>)
   1c5c8:	480b      	ldr	r0, [pc, #44]	; (1c5f8 <ull_filter_reset+0xe4>)
   1c5ca:	f011 bc6e 	b.w	2deaa <k_work_init_delayable>
}
   1c5ce:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   1c5d0:	4809      	ldr	r0, [pc, #36]	; (1c5f8 <ull_filter_reset+0xe4>)
   1c5d2:	f011 bc76 	b.w	2dec2 <k_work_cancel_delayable>
   1c5d6:	bf00      	nop
   1c5d8:	200030f4 	.word	0x200030f4
   1c5dc:	20002fc8 	.word	0x20002fc8
   1c5e0:	20003af9 	.word	0x20003af9
   1c5e4:	20003268 	.word	0x20003268
   1c5e8:	20003af8 	.word	0x20003af8
   1c5ec:	20001e80 	.word	0x20001e80
   1c5f0:	000dbba0 	.word	0x000dbba0
   1c5f4:	0001c8b9 	.word	0x0001c8b9
   1c5f8:	20001e88 	.word	0x20001e88

0001c5fc <ull_filter_lll_get>:
		return &fal_filter;
   1c5fc:	4a03      	ldr	r2, [pc, #12]	; (1c60c <ull_filter_lll_get+0x10>)
   1c5fe:	4b04      	ldr	r3, [pc, #16]	; (1c610 <ull_filter_lll_get+0x14>)
}
   1c600:	2800      	cmp	r0, #0
   1c602:	bf0c      	ite	eq
   1c604:	4610      	moveq	r0, r2
   1c606:	4618      	movne	r0, r3
   1c608:	4770      	bx	lr
   1c60a:	bf00      	nop
   1c60c:	20003234 	.word	0x20003234
   1c610:	20003008 	.word	0x20003008

0001c614 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1c614:	b1a8      	cbz	r0, 1c642 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1c616:	4a0c      	ldr	r2, [pc, #48]	; (1c648 <ull_filter_adv_scan_state_cb+0x34>)
   1c618:	6812      	ldr	r2, [r2, #0]
{
   1c61a:	b510      	push	{r4, lr}
   1c61c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c620:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c624:	2100      	movs	r1, #0
   1c626:	fbe2 0103 	umlal	r0, r1, r2, r3
   1c62a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c62e:	2300      	movs	r3, #0
   1c630:	f7e4 faf2 	bl	c18 <__aeabi_uldivmod>
}
   1c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c638:	4602      	mov	r2, r0
   1c63a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1c63c:	4803      	ldr	r0, [pc, #12]	; (1c64c <ull_filter_adv_scan_state_cb+0x38>)
   1c63e:	f008 bd13 	b.w	25068 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   1c642:	4802      	ldr	r0, [pc, #8]	; (1c64c <ull_filter_adv_scan_state_cb+0x38>)
   1c644:	f011 bc3d 	b.w	2dec2 <k_work_cancel_delayable>
   1c648:	20003268 	.word	0x20003268
   1c64c:	20001e88 	.word	0x20001e88

0001c650 <ull_filter_adv_update>:
	(void)memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1c650:	4a0d      	ldr	r2, [pc, #52]	; (1c688 <ull_filter_adv_update+0x38>)
{
   1c652:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1c654:	2300      	movs	r3, #0
   1c656:	8013      	strh	r3, [r2, #0]
	if (adv_fp &&
   1c658:	b970      	cbnz	r0, 1c678 <ull_filter_adv_update+0x28>
	if (rl_enable &&
   1c65a:	4b0c      	ldr	r3, [pc, #48]	; (1c68c <ull_filter_adv_update+0x3c>)
	filter->enable_bitmask = 0;
   1c65c:	4a0c      	ldr	r2, [pc, #48]	; (1c690 <ull_filter_adv_update+0x40>)
	if (rl_enable &&
   1c65e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1c660:	2000      	movs	r0, #0
   1c662:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1c664:	b903      	cbnz	r3, 1c668 <ull_filter_adv_update+0x18>
}
   1c666:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_OBSERVER) || !ull_scan_is_enabled(0))) {
   1c668:	f7f9 fe30 	bl	162cc <ull_scan_is_enabled>
	if (rl_enable &&
   1c66c:	2800      	cmp	r0, #0
   1c66e:	d1fa      	bne.n	1c666 <ull_filter_adv_update+0x16>
}
   1c670:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1c674:	f7ff bb5a 	b.w	1bd2c <rl_update>
	     !(ull_scan_filter_pol_get(0) & 0x1))) {
   1c678:	4618      	mov	r0, r3
   1c67a:	f7f9 fe3f 	bl	162fc <ull_scan_filter_pol_get>
	if (adv_fp &&
   1c67e:	07c3      	lsls	r3, r0, #31
   1c680:	d4eb      	bmi.n	1c65a <ull_filter_adv_update+0xa>
		fal_update();
   1c682:	f7ff fb8d 	bl	1bda0 <fal_update>
   1c686:	e7e8      	b.n	1c65a <ull_filter_adv_update+0xa>
   1c688:	20003008 	.word	0x20003008
   1c68c:	20003af9 	.word	0x20003af9
   1c690:	20003234 	.word	0x20003234

0001c694 <ull_filter_scan_update>:
	filter->enable_bitmask = 0;
   1c694:	4a0e      	ldr	r2, [pc, #56]	; (1c6d0 <ull_filter_scan_update+0x3c>)
{
   1c696:	b508      	push	{r3, lr}
	filter->enable_bitmask = 0;
   1c698:	2300      	movs	r3, #0
   1c69a:	8013      	strh	r3, [r2, #0]
	if ((scan_fp & 0x1) &&
   1c69c:	07c2      	lsls	r2, r0, #31
   1c69e:	d40e      	bmi.n	1c6be <ull_filter_scan_update+0x2a>
	if (rl_enable &&
   1c6a0:	4b0c      	ldr	r3, [pc, #48]	; (1c6d4 <ull_filter_scan_update+0x40>)
	filter->enable_bitmask = 0;
   1c6a2:	4a0d      	ldr	r2, [pc, #52]	; (1c6d8 <ull_filter_scan_update+0x44>)
	if (rl_enable &&
   1c6a4:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1c6a6:	2000      	movs	r0, #0
   1c6a8:	8010      	strh	r0, [r2, #0]
	if (rl_enable &&
   1c6aa:	b903      	cbnz	r3, 1c6ae <ull_filter_scan_update+0x1a>
}
   1c6ac:	bd08      	pop	{r3, pc}
	    (!IS_ENABLED(CONFIG_BT_BROADCASTER) || !ull_adv_is_enabled(0))) {
   1c6ae:	f7f9 fbe7 	bl	15e80 <ull_adv_is_enabled>
	if (rl_enable &&
   1c6b2:	2800      	cmp	r0, #0
   1c6b4:	d1fa      	bne.n	1c6ac <ull_filter_scan_update+0x18>
}
   1c6b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1c6ba:	f7ff bb37 	b.w	1bd2c <rl_update>
	     !ull_adv_filter_pol_get(0))) {
   1c6be:	4618      	mov	r0, r3
   1c6c0:	f7f9 fbea 	bl	15e98 <ull_adv_filter_pol_get>
	if ((scan_fp & 0x1) &&
   1c6c4:	2800      	cmp	r0, #0
   1c6c6:	d1eb      	bne.n	1c6a0 <ull_filter_scan_update+0xc>
		fal_update();
   1c6c8:	f7ff fb6a 	bl	1bda0 <fal_update>
   1c6cc:	e7e8      	b.n	1c6a0 <ull_filter_scan_update+0xc>
   1c6ce:	bf00      	nop
   1c6d0:	20003008 	.word	0x20003008
   1c6d4:	20003af9 	.word	0x20003af9
   1c6d8:	20003234 	.word	0x20003234

0001c6dc <ull_filter_rpa_update>:
{
   1c6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6e0:	4683      	mov	fp, r0
   1c6e2:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1c6e4:	f011 fd82 	bl	2e1ec <z_impl_k_uptime_ticks>
   1c6e8:	014b      	lsls	r3, r1, #5
   1c6ea:	0142      	lsls	r2, r0, #5
   1c6ec:	1a12      	subs	r2, r2, r0
   1c6ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1c6f2:	eb63 0301 	sbc.w	r3, r3, r1
   1c6f6:	009b      	lsls	r3, r3, #2
   1c6f8:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1c6fc:	eb19 0900 	adds.w	r9, r9, r0
   1c700:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1c704:	eb41 0103 	adc.w	r1, r1, r3
   1c708:	00cb      	lsls	r3, r1, #3
   1c70a:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1c70e:	0bd9      	lsrs	r1, r3, #15
   1c710:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1c714:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1c718:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1c71a:	f1bb 0f00 	cmp.w	fp, #0
   1c71e:	d117      	bne.n	1c750 <ull_filter_rpa_update+0x74>
   1c720:	4a5d      	ldr	r2, [pc, #372]	; (1c898 <ull_filter_rpa_update+0x1bc>)
   1c722:	e9d2 3200 	ldrd	r3, r2, [r2]
   1c726:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1c72a:	bf08      	it	eq
   1c72c:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   1c730:	d00e      	beq.n	1c750 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1c732:	ebb9 0303 	subs.w	r3, r9, r3
   1c736:	eb61 0202 	sbc.w	r2, r1, r2
   1c73a:	4958      	ldr	r1, [pc, #352]	; (1c89c <ull_filter_rpa_update+0x1c0>)
   1c73c:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1c73e:	428b      	cmp	r3, r1
   1c740:	f172 0300 	sbcs.w	r3, r2, #0
   1c744:	bfac      	ite	ge
   1c746:	f04f 0a01 	movge.w	sl, #1
   1c74a:	f04f 0a00 	movlt.w	sl, #0
   1c74e:	e001      	b.n	1c754 <ull_filter_rpa_update+0x78>
   1c750:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c754:	4e52      	ldr	r6, [pc, #328]	; (1c8a0 <ull_filter_rpa_update+0x1c4>)
   1c756:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1c8a4 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1c75a:	2400      	movs	r4, #0
   1c75c:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1c760:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1c764:	00a5      	lsls	r5, r4, #2
   1c766:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1c76a:	07da      	lsls	r2, r3, #31
   1c76c:	d515      	bpl.n	1c79a <ull_filter_rpa_update+0xbe>
   1c76e:	f1ba 0f00 	cmp.w	sl, #0
   1c772:	d101      	bne.n	1c778 <ull_filter_rpa_update+0x9c>
   1c774:	0798      	lsls	r0, r3, #30
   1c776:	d410      	bmi.n	1c79a <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1c778:	192b      	adds	r3, r5, r4
   1c77a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1c77e:	0759      	lsls	r1, r3, #29
   1c780:	d431      	bmi.n	1c7e6 <ull_filter_rpa_update+0x10a>
			if (rl[i].lirk) {
   1c782:	192b      	adds	r3, r5, r4
   1c784:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1c788:	071a      	lsls	r2, r3, #28
   1c78a:	d41b      	bmi.n	1c7c4 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1c78c:	4425      	add	r5, r4
   1c78e:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1c792:	f043 0302 	orr.w	r3, r3, #2
   1c796:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c79a:	3401      	adds	r4, #1
   1c79c:	2c08      	cmp	r4, #8
   1c79e:	f108 0806 	add.w	r8, r8, #6
   1c7a2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1c7a6:	d1db      	bne.n	1c760 <ull_filter_rpa_update+0x84>
	if (all) {
   1c7a8:	f1ba 0f00 	cmp.w	sl, #0
   1c7ac:	d004      	beq.n	1c7b8 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1c7ae:	4b3a      	ldr	r3, [pc, #232]	; (1c898 <ull_filter_rpa_update+0x1bc>)
   1c7b0:	9a01      	ldr	r2, [sp, #4]
   1c7b2:	f8c3 9000 	str.w	r9, [r3]
   1c7b6:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1c7b8:	f1bb 0f00 	cmp.w	fp, #0
   1c7bc:	d137      	bne.n	1c82e <ull_filter_rpa_update+0x152>
}
   1c7be:	b007      	add	sp, #28
   1c7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1c7c4:	a902      	add	r1, sp, #8
   1c7c6:	f1a6 0017 	sub.w	r0, r6, #23
   1c7ca:	f00d fb86 	bl	29eda <bt_rpa_create>
				LL_ASSERT(!err);
   1c7ce:	2800      	cmp	r0, #0
   1c7d0:	d153      	bne.n	1c87a <ull_filter_rpa_update+0x19e>
   1c7d2:	9802      	ldr	r0, [sp, #8]
   1c7d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
				rl[i].local_rpa = &local_rpas[i];
   1c7d8:	f8c6 8006 	str.w	r8, [r6, #6]
   1c7dc:	f8c8 0000 	str.w	r0, [r8]
   1c7e0:	f8a8 3004 	strh.w	r3, [r8, #4]
   1c7e4:	e7d2      	b.n	1c78c <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1c7e6:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1c7ea:	4a2f      	ldr	r2, [pc, #188]	; (1c8a8 <ull_filter_rpa_update+0x1cc>)
   1c7ec:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1c7f0:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1c7f2:	f10d 0307 	add.w	r3, sp, #7
   1c7f6:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1c7fa:	f812 1901 	ldrb.w	r1, [r2], #-1
   1c7fe:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1c802:	4283      	cmp	r3, r0
   1c804:	d1f9      	bne.n	1c7fa <ull_filter_rpa_update+0x11e>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1c806:	4631      	mov	r1, r6
   1c808:	a802      	add	r0, sp, #8
   1c80a:	f00d fb66 	bl	29eda <bt_rpa_create>
				LL_ASSERT(!err);
   1c80e:	2800      	cmp	r0, #0
   1c810:	d0b7      	beq.n	1c782 <ull_filter_rpa_update+0xa6>
   1c812:	4a26      	ldr	r2, [pc, #152]	; (1c8ac <ull_filter_rpa_update+0x1d0>)
   1c814:	4926      	ldr	r1, [pc, #152]	; (1c8b0 <ull_filter_rpa_update+0x1d4>)
   1c816:	4827      	ldr	r0, [pc, #156]	; (1c8b4 <ull_filter_rpa_update+0x1d8>)
   1c818:	f240 23eb 	movw	r3, #747	; 0x2eb
   1c81c:	f00b fbc4 	bl	27fa8 <printk>
   1c820:	4040      	eors	r0, r0
   1c822:	f380 8811 	msr	BASEPRI, r0
   1c826:	f04f 0003 	mov.w	r0, #3
   1c82a:	df02      	svc	2
   1c82c:	e7a9      	b.n	1c782 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1c82e:	2000      	movs	r0, #0
   1c830:	f7f9 fb18 	bl	15e64 <ull_adv_is_enabled_get>
		if (adv) {
   1c834:	4604      	mov	r4, r0
   1c836:	2800      	cmp	r0, #0
   1c838:	d0c1      	beq.n	1c7be <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1c83a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   1c83e:	075b      	lsls	r3, r3, #29
   1c840:	d5bd      	bpl.n	1c7be <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1c842:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   1c846:	2b07      	cmp	r3, #7
   1c848:	d8b9      	bhi.n	1c7be <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c84a:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1c84e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1c852:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c854:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1c856:	3028      	adds	r0, #40	; 0x28
   1c858:	f001 fac4 	bl	1dde4 <lll_adv_pdu_alloc>
	(void)memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1c85c:	7872      	ldrb	r2, [r6, #1]
   1c85e:	4605      	mov	r5, r0
   1c860:	3202      	adds	r2, #2
   1c862:	4631      	mov	r1, r6
   1c864:	f011 fe7f 	bl	2e566 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1c868:	4629      	mov	r1, r5
   1c86a:	4620      	mov	r0, r4
   1c86c:	f7f9 fb24 	bl	15eb8 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1c870:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1c874:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   1c878:	e7a1      	b.n	1c7be <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1c87a:	4a0c      	ldr	r2, [pc, #48]	; (1c8ac <ull_filter_rpa_update+0x1d0>)
   1c87c:	490c      	ldr	r1, [pc, #48]	; (1c8b0 <ull_filter_rpa_update+0x1d4>)
   1c87e:	480d      	ldr	r0, [pc, #52]	; (1c8b4 <ull_filter_rpa_update+0x1d8>)
   1c880:	f44f 733e 	mov.w	r3, #760	; 0x2f8
   1c884:	f00b fb90 	bl	27fa8 <printk>
   1c888:	4040      	eors	r0, r0
   1c88a:	f380 8811 	msr	BASEPRI, r0
   1c88e:	f04f 0003 	mov.w	r0, #3
   1c892:	df02      	svc	2
   1c894:	e79d      	b.n	1c7d2 <ull_filter_rpa_update+0xf6>
   1c896:	bf00      	nop
   1c898:	20001e80 	.word	0x20001e80
   1c89c:	20003268 	.word	0x20003268
   1c8a0:	20003112 	.word	0x20003112
   1c8a4:	2000303c 	.word	0x2000303c
   1c8a8:	20003074 	.word	0x20003074
   1c8ac:	00030934 	.word	0x00030934
   1c8b0:	00030254 	.word	0x00030254
   1c8b4:	0002fedc 	.word	0x0002fedc

0001c8b8 <rpa_timeout>:
{
   1c8b8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1c8ba:	2001      	movs	r0, #1
   1c8bc:	f7ff ff0e 	bl	1c6dc <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1c8c0:	4a0a      	ldr	r2, [pc, #40]	; (1c8ec <rpa_timeout+0x34>)
   1c8c2:	6812      	ldr	r2, [r2, #0]
   1c8c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1c8c8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1c8cc:	2100      	movs	r1, #0
   1c8ce:	fbe2 0103 	umlal	r0, r1, r2, r3
   1c8d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c8d6:	2300      	movs	r3, #0
   1c8d8:	f7e4 f99e 	bl	c18 <__aeabi_uldivmod>
}
   1c8dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1c8e0:	4602      	mov	r2, r0
   1c8e2:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   1c8e4:	4802      	ldr	r0, [pc, #8]	; (1c8f0 <rpa_timeout+0x38>)
   1c8e6:	f008 bbbf 	b.w	25068 <k_work_schedule>
   1c8ea:	bf00      	nop
   1c8ec:	20003268 	.word	0x20003268
   1c8f0:	20001e88 	.word	0x20001e88

0001c8f4 <ull_filter_adva_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1c8f4:	2807      	cmp	r0, #7
   1c8f6:	d813      	bhi.n	1c920 <ull_filter_adva_get+0x2c>
{
   1c8f8:	b570      	push	{r4, r5, r6, lr}
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk) {
   1c8fa:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c8fe:	4d10      	ldr	r5, [pc, #64]	; (1c940 <ull_filter_adva_get+0x4c>)
   1c900:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1c904:	071a      	lsls	r2, r3, #28
   1c906:	4604      	mov	r4, r0
   1c908:	ea4f 0680 	mov.w	r6, r0, lsl #2
   1c90c:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1c910:	d505      	bpl.n	1c91e <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1c912:	079b      	lsls	r3, r3, #30
   1c914:	d506      	bpl.n	1c924 <ull_filter_adva_get+0x30>
		return rl[rl_idx].local_rpa->val;
   1c916:	4434      	add	r4, r6
   1c918:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1c91c:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1c91e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1c920:	2000      	movs	r0, #0
}
   1c922:	4770      	bx	lr
		LL_ASSERT(rl[rl_idx].rpas_ready);
   1c924:	4a07      	ldr	r2, [pc, #28]	; (1c944 <ull_filter_adva_get+0x50>)
   1c926:	4908      	ldr	r1, [pc, #32]	; (1c948 <ull_filter_adva_get+0x54>)
   1c928:	4808      	ldr	r0, [pc, #32]	; (1c94c <ull_filter_adva_get+0x58>)
   1c92a:	f44f 7347 	mov.w	r3, #796	; 0x31c
   1c92e:	f00b fb3b 	bl	27fa8 <printk>
   1c932:	4040      	eors	r0, r0
   1c934:	f380 8811 	msr	BASEPRI, r0
   1c938:	f04f 0003 	mov.w	r0, #3
   1c93c:	df02      	svc	2
   1c93e:	e7ea      	b.n	1c916 <ull_filter_adva_get+0x22>
   1c940:	200030f4 	.word	0x200030f4
   1c944:	00030934 	.word	0x00030934
   1c948:	00030998 	.word	0x00030998
   1c94c:	0002fedc 	.word	0x0002fedc

0001c950 <ull_filter_tgta_get>:
	if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].pirk) {
   1c950:	2807      	cmp	r0, #7
   1c952:	d80b      	bhi.n	1c96c <ull_filter_tgta_get+0x1c>
   1c954:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1c958:	4a05      	ldr	r2, [pc, #20]	; (1c970 <ull_filter_tgta_get+0x20>)
   1c95a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   1c95e:	074b      	lsls	r3, r1, #29
   1c960:	d504      	bpl.n	1c96c <ull_filter_tgta_get+0x1c>
		return rl[rl_idx].peer_rpa.val;
   1c962:	2328      	movs	r3, #40	; 0x28
   1c964:	fb03 2000 	mla	r0, r3, r0, r2
   1c968:	301e      	adds	r0, #30
   1c96a:	4770      	bx	lr
	return NULL;
   1c96c:	2000      	movs	r0, #0
   1c96e:	4770      	bx	lr
   1c970:	200030f4 	.word	0x200030f4

0001c974 <ull_filter_rl_find>:
{
   1c974:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c978:	468b      	mov	fp, r1
	if (free_idx) {
   1c97a:	4617      	mov	r7, r2
   1c97c:	b10a      	cbz	r2, 1c982 <ull_filter_rl_find+0xe>
		*free_idx = FILTER_IDX_NONE;
   1c97e:	23ff      	movs	r3, #255	; 0xff
   1c980:	7013      	strb	r3, [r2, #0]
   1c982:	4d1b      	ldr	r5, [pc, #108]	; (1c9f0 <ull_filter_rl_find+0x7c>)
{
   1c984:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c986:	f000 0a01 	and.w	sl, r0, #1
   1c98a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   1c98e:	e006      	b.n	1c99e <ull_filter_rl_find+0x2a>
   1c990:	4552      	cmp	r2, sl
   1c992:	d01f      	beq.n	1c9d4 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c994:	3401      	adds	r4, #1
   1c996:	2c08      	cmp	r4, #8
   1c998:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c99c:	d015      	beq.n	1c9ca <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c99e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1c9a2:	fa5f f884 	uxtb.w	r8, r4
   1c9a6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1c9aa:	07d9      	lsls	r1, r3, #31
   1c9ac:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1c9b0:	d4ee      	bmi.n	1c990 <ull_filter_rl_find+0x1c>
		} else if (free_idx && !rl[i].taken &&
   1c9b2:	2f00      	cmp	r7, #0
   1c9b4:	d0ee      	beq.n	1c994 <ull_filter_rl_find+0x20>
   1c9b6:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c9b8:	3401      	adds	r4, #1
		} else if (free_idx && !rl[i].taken &&
   1c9ba:	2bff      	cmp	r3, #255	; 0xff
			*free_idx = i;
   1c9bc:	bf08      	it	eq
   1c9be:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1c9c2:	2c08      	cmp	r4, #8
   1c9c4:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1c9c8:	d1e9      	bne.n	1c99e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1c9ca:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1c9ce:	4640      	mov	r0, r8
   1c9d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1c9d4:	4628      	mov	r0, r5
   1c9d6:	2206      	movs	r2, #6
   1c9d8:	4659      	mov	r1, fp
   1c9da:	f011 fdb4 	bl	2e546 <memcmp>
   1c9de:	2800      	cmp	r0, #0
   1c9e0:	d0f5      	beq.n	1c9ce <ull_filter_rl_find+0x5a>
		} else if (free_idx && !rl[i].taken &&
   1c9e2:	2f00      	cmp	r7, #0
   1c9e4:	d0d6      	beq.n	1c994 <ull_filter_rl_find+0x20>
   1c9e6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1c9ea:	07db      	lsls	r3, r3, #31
   1c9ec:	d4d2      	bmi.n	1c994 <ull_filter_rl_find+0x20>
   1c9ee:	e7e2      	b.n	1c9b6 <ull_filter_rl_find+0x42>
   1c9f0:	200030f5 	.word	0x200030f5

0001c9f4 <ll_rl_add>:
{
   1c9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9f8:	4680      	mov	r8, r0
   1c9fa:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1c9fc:	2000      	movs	r0, #0
{
   1c9fe:	460e      	mov	r6, r1
   1ca00:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1ca02:	f7f9 fa3d 	bl	15e80 <ull_adv_is_enabled>
		? 0 : 1;
   1ca06:	b118      	cbz	r0, 1ca10 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ca08:	200c      	movs	r0, #12
}
   1ca0a:	b005      	add	sp, #20
   1ca0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static int rl_access_check(bool check_ar)
   1ca10:	4604      	mov	r4, r0
		 (ull_scan_is_enabled(0) & ~ULL_SCAN_IS_PASSIVE)))
   1ca12:	f7f9 fc5b 	bl	162cc <ull_scan_is_enabled>
		? 0 : 1;
   1ca16:	f030 0301 	bics.w	r3, r0, #1
   1ca1a:	d1f5      	bne.n	1ca08 <ll_rl_add+0x14>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1ca1c:	46c2      	mov	sl, r8
   1ca1e:	f10d 020f 	add.w	r2, sp, #15
   1ca22:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1ca26:	4651      	mov	r1, sl
   1ca28:	f7ff ffa4 	bl	1c974 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1ca2c:	2807      	cmp	r0, #7
   1ca2e:	f240 80b8 	bls.w	1cba2 <ll_rl_add+0x1ae>
	} else if (j >= ARRAY_SIZE(rl)) {
   1ca32:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1ca36:	2f07      	cmp	r7, #7
   1ca38:	f200 80af 	bhi.w	1cb9a <ll_rl_add+0x1a6>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1ca3c:	eb07 0287 	add.w	r2, r7, r7, lsl #2
   1ca40:	00d2      	lsls	r2, r2, #3
   1ca42:	4d5a      	ldr	r5, [pc, #360]	; (1cbac <ll_rl_add+0x1b8>)
   1ca44:	f8d8 1001 	ldr.w	r1, [r8, #1]
   1ca48:	9201      	str	r2, [sp, #4]
   1ca4a:	1c53      	adds	r3, r2, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   1ca4c:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1ca50:	50e9      	str	r1, [r5, r3]
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1ca52:	442b      	add	r3, r5
   1ca54:	f8ba 1004 	ldrh.w	r1, [sl, #4]
   1ca58:	8099      	strh	r1, [r3, #4]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1ca5a:	f898 3000 	ldrb.w	r3, [r8]
   1ca5e:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1ca62:	9200      	str	r2, [sp, #0]
   1ca64:	f363 1186 	bfi	r1, r3, #6, #1
   1ca68:	54a9      	strb	r1, [r5, r2]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1ca6a:	4630      	mov	r0, r6
   1ca6c:	2110      	movs	r1, #16
   1ca6e:	f7f4 f98f 	bl	10d90 <mem_nz>
   1ca72:	9b00      	ldr	r3, [sp, #0]
   1ca74:	5ce9      	ldrb	r1, [r5, r3]
   1ca76:	f360 0182 	bfi	r1, r0, #2, #1
   1ca7a:	54e9      	strb	r1, [r5, r3]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1ca7c:	4648      	mov	r0, r9
   1ca7e:	2110      	movs	r1, #16
   1ca80:	f7f4 f986 	bl	10d90 <mem_nz>
   1ca84:	9b00      	ldr	r3, [sp, #0]
	if (rl[i].pirk) {
   1ca86:	9a01      	ldr	r2, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1ca88:	5ce9      	ldrb	r1, [r5, r3]
   1ca8a:	f000 0001 	and.w	r0, r0, #1
   1ca8e:	f360 01c3 	bfi	r1, r0, #3, #1
	if (rl[i].pirk) {
   1ca92:	f011 0f04 	tst.w	r1, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1ca96:	54e9      	strb	r1, [r5, r3]
	rl[i].id_addr_type = id_addr->type & 0x1;
   1ca98:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
   1ca9c:	ea4f 0387 	mov.w	r3, r7, lsl #2
	if (rl[i].pirk) {
   1caa0:	d01b      	beq.n	1cada <ll_rl_add+0xe6>
		rl[i].pirk_idx = peer_irk_count;
   1caa2:	f8df c10c 	ldr.w	ip, [pc, #268]	; 1cbb0 <ll_rl_add+0x1bc>
		peer_irk_rl_ids[peer_irk_count] = i;
   1caa6:	f8df e10c 	ldr.w	lr, [pc, #268]	; 1cbb4 <ll_rl_add+0x1c0>
		rl[i].pirk_idx = peer_irk_count;
   1caaa:	f89c 1000 	ldrb.w	r1, [ip]
   1caae:	f88b 1017 	strb.w	r1, [fp, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1cab2:	f80e 7001 	strb.w	r7, [lr, r1]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1cab6:	f8df e100 	ldr.w	lr, [pc, #256]	; 1cbb8 <ll_rl_add+0x1c4>
   1caba:	eb0e 1e01 	add.w	lr, lr, r1, lsl #4
   1cabe:	3101      	adds	r1, #1
   1cac0:	f88c 1000 	strb.w	r1, [ip]
	psrc += length - 1;
   1cac4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1cac8:	f106 0c0f 	add.w	ip, r6, #15
	for (; length > 0; length--) {
   1cacc:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1cace:	f81c 1901 	ldrb.w	r1, [ip], #-1
   1cad2:	f80e 1f01 	strb.w	r1, [lr, #1]!
	for (; length > 0; length--) {
   1cad6:	45b4      	cmp	ip, r6
   1cad8:	d1f9      	bne.n	1cace <ll_rl_add+0xda>
	if (rl[i].lirk) {
   1cada:	2800      	cmp	r0, #0
   1cadc:	d145      	bne.n	1cb6a <ll_rl_add+0x176>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1cade:	3218      	adds	r2, #24
__ssp_bos_icheck3(memset, void *, int)
   1cae0:	2100      	movs	r1, #0
   1cae2:	50a9      	str	r1, [r5, r2]
   1cae4:	442a      	add	r2, r5
   1cae6:	4e35      	ldr	r6, [pc, #212]	; (1cbbc <ll_rl_add+0x1c8>)
   1cae8:	8091      	strh	r1, [r2, #4]
	rl[i].dev = 0U;
   1caea:	19da      	adds	r2, r3, r7
	rl[i].rpas_ready = 0U;
   1caec:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1caf0:	f021 0112 	bic.w	r1, r1, #18
   1caf4:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = fal_find(id_addr->type, id_addr->a.val, NULL);
   1caf8:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < FAL_SIZE; i++) {
   1cafc:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1cb00:	f009 0901 	and.w	r9, r9, #1
   1cb04:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1cb08:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1cb0c:	07d2      	lsls	r2, r2, #31
   1cb0e:	d501      	bpl.n	1cb14 <ll_rl_add+0x120>
   1cb10:	4549      	cmp	r1, r9
   1cb12:	d016      	beq.n	1cb42 <ll_rl_add+0x14e>
	for (i = 0; i < FAL_SIZE; i++) {
   1cb14:	3401      	adds	r4, #1
   1cb16:	2c08      	cmp	r4, #8
   1cb18:	f106 0608 	add.w	r6, r6, #8
   1cb1c:	d1f2      	bne.n	1cb04 <ll_rl_add+0x110>
		rl[i].fal = 0U;
   1cb1e:	19da      	adds	r2, r3, r7
   1cb20:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1cb24:	f36f 1145 	bfc	r1, #5, #1
   1cb28:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1cb2c:	443b      	add	r3, r7
	return 0;
   1cb2e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1cb30:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1cb34:	f042 0201 	orr.w	r2, r2, #1
   1cb38:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1cb3c:	b005      	add	sp, #20
   1cb3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(fal, i, addr_type, addr)) {
   1cb42:	2206      	movs	r2, #6
   1cb44:	4630      	mov	r0, r6
   1cb46:	4651      	mov	r1, sl
   1cb48:	9300      	str	r3, [sp, #0]
   1cb4a:	f011 fcfc 	bl	2e546 <memcmp>
   1cb4e:	9b00      	ldr	r3, [sp, #0]
   1cb50:	2800      	cmp	r0, #0
   1cb52:	d1df      	bne.n	1cb14 <ll_rl_add+0x120>
		rl[i].fal = 1U;
   1cb54:	19da      	adds	r2, r3, r7
		fal[j].rl_idx = i;
   1cb56:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].fal = 1U;
   1cb5a:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		fal[j].rl_idx = i;
   1cb5e:	7067      	strb	r7, [r4, #1]
		rl[i].fal = 1U;
   1cb60:	f041 0120 	orr.w	r1, r1, #32
   1cb64:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1cb68:	e7e0      	b.n	1cb2c <ll_rl_add+0x138>
		(void)memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1cb6a:	1dd6      	adds	r6, r2, #7
   1cb6c:	19a8      	adds	r0, r5, r6
		rl[i].local_rpa = NULL;
   1cb6e:	19d9      	adds	r1, r3, r7
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1cb70:	f8d9 b000 	ldr.w	fp, [r9]
   1cb74:	f8d9 e004 	ldr.w	lr, [r9, #4]
   1cb78:	f8d9 c008 	ldr.w	ip, [r9, #8]
   1cb7c:	f8d9 900c 	ldr.w	r9, [r9, #12]
   1cb80:	f845 b006 	str.w	fp, [r5, r6]
   1cb84:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   1cb88:	f8c0 e004 	str.w	lr, [r0, #4]
   1cb8c:	f8c0 c008 	str.w	ip, [r0, #8]
   1cb90:	f8c0 900c 	str.w	r9, [r0, #12]
   1cb94:	2000      	movs	r0, #0
   1cb96:	6248      	str	r0, [r1, #36]	; 0x24
   1cb98:	e7a1      	b.n	1cade <ll_rl_add+0xea>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1cb9a:	2007      	movs	r0, #7
}
   1cb9c:	b005      	add	sp, #20
   1cb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1cba2:	2012      	movs	r0, #18
}
   1cba4:	b005      	add	sp, #20
   1cba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cbaa:	bf00      	nop
   1cbac:	200030f4 	.word	0x200030f4
   1cbb0:	20003af8 	.word	0x20003af8
   1cbb4:	2000306c 	.word	0x2000306c
   1cbb8:	20003074 	.word	0x20003074
   1cbbc:	20002fca 	.word	0x20002fca

0001cbc0 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1cbc0:	2807      	cmp	r0, #7
   1cbc2:	d807      	bhi.n	1cbd4 <ull_filter_lll_lrpa_used+0x14>
   1cbc4:	4b04      	ldr	r3, [pc, #16]	; (1cbd8 <ull_filter_lll_lrpa_used+0x18>)
   1cbc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1cbca:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1cbce:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1cbd2:	4770      	bx	lr
   1cbd4:	2000      	movs	r0, #0
}
   1cbd6:	4770      	bx	lr
   1cbd8:	200030f4 	.word	0x200030f4

0001cbdc <ull_filter_lll_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1cbdc:	2807      	cmp	r0, #7
   1cbde:	d812      	bhi.n	1cc06 <ull_filter_lll_lrpa_get+0x2a>
   1cbe0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1cbe4:	4a09      	ldr	r2, [pc, #36]	; (1cc0c <ull_filter_lll_lrpa_get+0x30>)
   1cbe6:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   1cbea:	f013 0f08 	tst.w	r3, #8
   1cbee:	ea4f 01c0 	mov.w	r1, r0, lsl #3
   1cbf2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1cbf6:	d007      	beq.n	1cc08 <ull_filter_lll_lrpa_get+0x2c>
   1cbf8:	f3c3 0040 	ubfx	r0, r3, #1, #1
   1cbfc:	079b      	lsls	r3, r3, #30
   1cbfe:	d503      	bpl.n	1cc08 <ull_filter_lll_lrpa_get+0x2c>
	return rl[rl_idx].local_rpa;
   1cc00:	440a      	add	r2, r1
   1cc02:	6a50      	ldr	r0, [r2, #36]	; 0x24
   1cc04:	4770      	bx	lr
		return NULL;
   1cc06:	2000      	movs	r0, #0
}
   1cc08:	4770      	bx	lr
   1cc0a:	bf00      	nop
   1cc0c:	200030f4 	.word	0x200030f4

0001cc10 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1cc10:	4b02      	ldr	r3, [pc, #8]	; (1cc1c <ull_filter_lll_irks_get+0xc>)
   1cc12:	781b      	ldrb	r3, [r3, #0]
   1cc14:	7003      	strb	r3, [r0, #0]
}
   1cc16:	4802      	ldr	r0, [pc, #8]	; (1cc20 <ull_filter_lll_irks_get+0x10>)
   1cc18:	4770      	bx	lr
   1cc1a:	bf00      	nop
   1cc1c:	20003af8 	.word	0x20003af8
   1cc20:	20003074 	.word	0x20003074

0001cc24 <ull_filter_lll_rl_idx>:
{
   1cc24:	b538      	push	{r3, r4, r5, lr}
   1cc26:	460c      	mov	r4, r1
	if (filter) {
   1cc28:	b150      	cbz	r0, 1cc40 <ull_filter_lll_rl_idx+0x1c>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1cc2a:	2907      	cmp	r1, #7
   1cc2c:	d822      	bhi.n	1cc74 <ull_filter_lll_rl_idx+0x50>
		LL_ASSERT(fal[devmatch_id].taken);
   1cc2e:	4d2a      	ldr	r5, [pc, #168]	; (1ccd8 <ull_filter_lll_rl_idx+0xb4>)
   1cc30:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1cc34:	07da      	lsls	r2, r3, #31
   1cc36:	d52f      	bpl.n	1cc98 <ull_filter_lll_rl_idx+0x74>
		i = fal[devmatch_id].rl_idx;
   1cc38:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1cc3c:	7860      	ldrb	r0, [r4, #1]
}
   1cc3e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1cc40:	2907      	cmp	r1, #7
   1cc42:	d83a      	bhi.n	1ccba <ull_filter_lll_rl_idx+0x96>
		LL_ASSERT(rl[i].taken);
   1cc44:	4b25      	ldr	r3, [pc, #148]	; (1ccdc <ull_filter_lll_rl_idx+0xb8>)
   1cc46:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1cc4a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1cc4e:	07db      	lsls	r3, r3, #31
   1cc50:	d501      	bpl.n	1cc56 <ull_filter_lll_rl_idx+0x32>
   1cc52:	4620      	mov	r0, r4
}
   1cc54:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(rl[i].taken);
   1cc56:	4a22      	ldr	r2, [pc, #136]	; (1cce0 <ull_filter_lll_rl_idx+0xbc>)
   1cc58:	4922      	ldr	r1, [pc, #136]	; (1cce4 <ull_filter_lll_rl_idx+0xc0>)
   1cc5a:	4823      	ldr	r0, [pc, #140]	; (1cce8 <ull_filter_lll_rl_idx+0xc4>)
   1cc5c:	f240 3363 	movw	r3, #867	; 0x363
   1cc60:	f00b f9a2 	bl	27fa8 <printk>
   1cc64:	4040      	eors	r0, r0
   1cc66:	f380 8811 	msr	BASEPRI, r0
   1cc6a:	f04f 0003 	mov.w	r0, #3
   1cc6e:	df02      	svc	2
   1cc70:	4620      	mov	r0, r4
}
   1cc72:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(devmatch_id < ARRAY_SIZE(fal));
   1cc74:	4a1a      	ldr	r2, [pc, #104]	; (1cce0 <ull_filter_lll_rl_idx+0xbc>)
   1cc76:	491d      	ldr	r1, [pc, #116]	; (1ccec <ull_filter_lll_rl_idx+0xc8>)
   1cc78:	481b      	ldr	r0, [pc, #108]	; (1cce8 <ull_filter_lll_rl_idx+0xc4>)
   1cc7a:	f240 335d 	movw	r3, #861	; 0x35d
   1cc7e:	f00b f993 	bl	27fa8 <printk>
   1cc82:	4040      	eors	r0, r0
   1cc84:	f380 8811 	msr	BASEPRI, r0
   1cc88:	f04f 0003 	mov.w	r0, #3
   1cc8c:	df02      	svc	2
		LL_ASSERT(fal[devmatch_id].taken);
   1cc8e:	4d12      	ldr	r5, [pc, #72]	; (1ccd8 <ull_filter_lll_rl_idx+0xb4>)
   1cc90:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   1cc94:	07da      	lsls	r2, r3, #31
   1cc96:	d4cf      	bmi.n	1cc38 <ull_filter_lll_rl_idx+0x14>
   1cc98:	4a11      	ldr	r2, [pc, #68]	; (1cce0 <ull_filter_lll_rl_idx+0xbc>)
   1cc9a:	4915      	ldr	r1, [pc, #84]	; (1ccf0 <ull_filter_lll_rl_idx+0xcc>)
   1cc9c:	4812      	ldr	r0, [pc, #72]	; (1cce8 <ull_filter_lll_rl_idx+0xc4>)
   1cc9e:	f240 335e 	movw	r3, #862	; 0x35e
   1cca2:	f00b f981 	bl	27fa8 <printk>
   1cca6:	4040      	eors	r0, r0
   1cca8:	f380 8811 	msr	BASEPRI, r0
   1ccac:	f04f 0003 	mov.w	r0, #3
   1ccb0:	df02      	svc	2
		i = fal[devmatch_id].rl_idx;
   1ccb2:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
   1ccb6:	7860      	ldrb	r0, [r4, #1]
   1ccb8:	e7c1      	b.n	1cc3e <ull_filter_lll_rl_idx+0x1a>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   1ccba:	4a09      	ldr	r2, [pc, #36]	; (1cce0 <ull_filter_lll_rl_idx+0xbc>)
   1ccbc:	490d      	ldr	r1, [pc, #52]	; (1ccf4 <ull_filter_lll_rl_idx+0xd0>)
   1ccbe:	480a      	ldr	r0, [pc, #40]	; (1cce8 <ull_filter_lll_rl_idx+0xc4>)
   1ccc0:	f240 3361 	movw	r3, #865	; 0x361
   1ccc4:	f00b f970 	bl	27fa8 <printk>
   1ccc8:	4040      	eors	r0, r0
   1ccca:	f380 8811 	msr	BASEPRI, r0
   1ccce:	f04f 0003 	mov.w	r0, #3
   1ccd2:	df02      	svc	2
   1ccd4:	e7b6      	b.n	1cc44 <ull_filter_lll_rl_idx+0x20>
   1ccd6:	bf00      	nop
   1ccd8:	20002fc8 	.word	0x20002fc8
   1ccdc:	200030f4 	.word	0x200030f4
   1cce0:	00030934 	.word	0x00030934
   1cce4:	00030b14 	.word	0x00030b14
   1cce8:	0002fedc 	.word	0x0002fedc
   1ccec:	000309b0 	.word	0x000309b0
   1ccf0:	00030a58 	.word	0x00030a58
   1ccf4:	00030a70 	.word	0x00030a70

0001ccf8 <ull_filter_lll_rl_irk_idx>:
{
   1ccf8:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1ccfa:	4b20      	ldr	r3, [pc, #128]	; (1cd7c <ull_filter_lll_rl_irk_idx+0x84>)
   1ccfc:	781b      	ldrb	r3, [r3, #0]
   1ccfe:	4283      	cmp	r3, r0
{
   1cd00:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1cd02:	d90c      	bls.n	1cd1e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1cd04:	4b1e      	ldr	r3, [pc, #120]	; (1cd80 <ull_filter_lll_rl_irk_idx+0x88>)
   1cd06:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1cd08:	2c07      	cmp	r4, #7
   1cd0a:	d819      	bhi.n	1cd40 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1cd0c:	4b1d      	ldr	r3, [pc, #116]	; (1cd84 <ull_filter_lll_rl_irk_idx+0x8c>)
   1cd0e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1cd12:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1cd16:	07db      	lsls	r3, r3, #31
   1cd18:	d520      	bpl.n	1cd5c <ull_filter_lll_rl_irk_idx+0x64>
}
   1cd1a:	4620      	mov	r0, r4
   1cd1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1cd1e:	4a1a      	ldr	r2, [pc, #104]	; (1cd88 <ull_filter_lll_rl_irk_idx+0x90>)
   1cd20:	491a      	ldr	r1, [pc, #104]	; (1cd8c <ull_filter_lll_rl_irk_idx+0x94>)
   1cd22:	481b      	ldr	r0, [pc, #108]	; (1cd90 <ull_filter_lll_rl_irk_idx+0x98>)
   1cd24:	f240 336d 	movw	r3, #877	; 0x36d
   1cd28:	f00b f93e 	bl	27fa8 <printk>
   1cd2c:	4040      	eors	r0, r0
   1cd2e:	f380 8811 	msr	BASEPRI, r0
   1cd32:	f04f 0003 	mov.w	r0, #3
   1cd36:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1cd38:	4b11      	ldr	r3, [pc, #68]	; (1cd80 <ull_filter_lll_rl_irk_idx+0x88>)
   1cd3a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1cd3c:	2c07      	cmp	r4, #7
   1cd3e:	d9e5      	bls.n	1cd0c <ull_filter_lll_rl_irk_idx+0x14>
   1cd40:	4a11      	ldr	r2, [pc, #68]	; (1cd88 <ull_filter_lll_rl_irk_idx+0x90>)
   1cd42:	4914      	ldr	r1, [pc, #80]	; (1cd94 <ull_filter_lll_rl_irk_idx+0x9c>)
   1cd44:	4812      	ldr	r0, [pc, #72]	; (1cd90 <ull_filter_lll_rl_irk_idx+0x98>)
   1cd46:	f240 336f 	movw	r3, #879	; 0x36f
   1cd4a:	f00b f92d 	bl	27fa8 <printk>
   1cd4e:	4040      	eors	r0, r0
   1cd50:	f380 8811 	msr	BASEPRI, r0
   1cd54:	f04f 0003 	mov.w	r0, #3
   1cd58:	df02      	svc	2
   1cd5a:	e7d7      	b.n	1cd0c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1cd5c:	4a0a      	ldr	r2, [pc, #40]	; (1cd88 <ull_filter_lll_rl_irk_idx+0x90>)
   1cd5e:	490e      	ldr	r1, [pc, #56]	; (1cd98 <ull_filter_lll_rl_irk_idx+0xa0>)
   1cd60:	480b      	ldr	r0, [pc, #44]	; (1cd90 <ull_filter_lll_rl_irk_idx+0x98>)
   1cd62:	f44f 735c 	mov.w	r3, #880	; 0x370
   1cd66:	f00b f91f 	bl	27fa8 <printk>
   1cd6a:	4040      	eors	r0, r0
   1cd6c:	f380 8811 	msr	BASEPRI, r0
   1cd70:	f04f 0003 	mov.w	r0, #3
   1cd74:	df02      	svc	2
}
   1cd76:	4620      	mov	r0, r4
   1cd78:	bd10      	pop	{r4, pc}
   1cd7a:	bf00      	nop
   1cd7c:	20003af8 	.word	0x20003af8
   1cd80:	2000306c 	.word	0x2000306c
   1cd84:	200030f4 	.word	0x200030f4
   1cd88:	00030934 	.word	0x00030934
   1cd8c:	00030b20 	.word	0x00030b20
   1cd90:	0002fedc 	.word	0x0002fedc
   1cd94:	00030b40 	.word	0x00030b40
   1cd98:	00030b14 	.word	0x00030b14

0001cd9c <ull_filter_lll_irk_in_fal>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1cd9c:	2807      	cmp	r0, #7
   1cd9e:	d823      	bhi.n	1cde8 <ull_filter_lll_irk_in_fal+0x4c>
{
   1cda0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1cda2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1cda6:	4e11      	ldr	r6, [pc, #68]	; (1cdec <ull_filter_lll_irk_in_fal+0x50>)
   1cda8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1cdac:	07db      	lsls	r3, r3, #31
   1cdae:	4604      	mov	r4, r0
   1cdb0:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1cdb4:	d505      	bpl.n	1cdc2 <ull_filter_lll_irk_in_fal+0x26>
	return rl[rl_idx].fal;
   1cdb6:	442c      	add	r4, r5
   1cdb8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1cdbc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1cdc0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1cdc2:	4a0b      	ldr	r2, [pc, #44]	; (1cdf0 <ull_filter_lll_irk_in_fal+0x54>)
   1cdc4:	490b      	ldr	r1, [pc, #44]	; (1cdf4 <ull_filter_lll_irk_in_fal+0x58>)
   1cdc6:	480c      	ldr	r0, [pc, #48]	; (1cdf8 <ull_filter_lll_irk_in_fal+0x5c>)
   1cdc8:	f240 337b 	movw	r3, #891	; 0x37b
   1cdcc:	f00b f8ec 	bl	27fa8 <printk>
   1cdd0:	4040      	eors	r0, r0
   1cdd2:	f380 8811 	msr	BASEPRI, r0
   1cdd6:	f04f 0003 	mov.w	r0, #3
   1cdda:	df02      	svc	2
	return rl[rl_idx].fal;
   1cddc:	442c      	add	r4, r5
   1cdde:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1cde2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1cde6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1cde8:	2000      	movs	r0, #0
}
   1cdea:	4770      	bx	lr
   1cdec:	200030f4 	.word	0x200030f4
   1cdf0:	00030934 	.word	0x00030934
   1cdf4:	00030984 	.word	0x00030984
   1cdf8:	0002fedc 	.word	0x0002fedc

0001cdfc <ull_filter_lll_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1cdfc:	4b14      	ldr	r3, [pc, #80]	; (1ce50 <ull_filter_lll_rl_idx_allowed+0x54>)
   1cdfe:	781b      	ldrb	r3, [r3, #0]
   1ce00:	b19b      	cbz	r3, 1ce2a <ull_filter_lll_rl_idx_allowed+0x2e>
   1ce02:	2907      	cmp	r1, #7
{
   1ce04:	b570      	push	{r4, r5, r6, lr}
   1ce06:	460c      	mov	r4, r1
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   1ce08:	d80d      	bhi.n	1ce26 <ull_filter_lll_rl_idx_allowed+0x2a>
   1ce0a:	b960      	cbnz	r0, 1ce26 <ull_filter_lll_rl_idx_allowed+0x2a>
	LL_ASSERT(rl[rl_idx].taken);
   1ce0c:	4e11      	ldr	r6, [pc, #68]	; (1ce54 <ull_filter_lll_rl_idx_allowed+0x58>)
   1ce0e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   1ce12:	008d      	lsls	r5, r1, #2
   1ce14:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1ce18:	07da      	lsls	r2, r3, #31
   1ce1a:	d50b      	bpl.n	1ce34 <ull_filter_lll_rl_idx_allowed+0x38>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1ce1c:	442c      	add	r4, r5
   1ce1e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1ce22:	0743      	lsls	r3, r0, #29
   1ce24:	d403      	bmi.n	1ce2e <ull_filter_lll_rl_idx_allowed+0x32>
		return true;
   1ce26:	2001      	movs	r0, #1
}
   1ce28:	bd70      	pop	{r4, r5, r6, pc}
		return true;
   1ce2a:	2001      	movs	r0, #1
}
   1ce2c:	4770      	bx	lr
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   1ce2e:	f3c0 1000 	ubfx	r0, r0, #4, #1
}
   1ce32:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1ce34:	4a08      	ldr	r2, [pc, #32]	; (1ce58 <ull_filter_lll_rl_idx_allowed+0x5c>)
   1ce36:	4909      	ldr	r1, [pc, #36]	; (1ce5c <ull_filter_lll_rl_idx_allowed+0x60>)
   1ce38:	4809      	ldr	r0, [pc, #36]	; (1ce60 <ull_filter_lll_rl_idx_allowed+0x64>)
   1ce3a:	f44f 7365 	mov.w	r3, #916	; 0x394
   1ce3e:	f00b f8b3 	bl	27fa8 <printk>
   1ce42:	4040      	eors	r0, r0
   1ce44:	f380 8811 	msr	BASEPRI, r0
   1ce48:	f04f 0003 	mov.w	r0, #3
   1ce4c:	df02      	svc	2
   1ce4e:	e7e5      	b.n	1ce1c <ull_filter_lll_rl_idx_allowed+0x20>
   1ce50:	20003af9 	.word	0x20003af9
   1ce54:	200030f4 	.word	0x200030f4
   1ce58:	00030934 	.word	0x00030934
   1ce5c:	00030984 	.word	0x00030984
   1ce60:	0002fedc 	.word	0x0002fedc

0001ce64 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   1ce64:	7813      	ldrb	r3, [r2, #0]
   1ce66:	2bff      	cmp	r3, #255	; 0xff
   1ce68:	d11b      	bne.n	1cea2 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   1ce6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce6e:	4d19      	ldr	r5, [pc, #100]	; (1ced4 <ull_filter_lll_rl_addr_allowed+0x70>)
   1ce70:	4604      	mov	r4, r0
   1ce72:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   1ce74:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1ce76:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1ce7a:	b2df      	uxtb	r7, r3
   1ce7c:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1ce80:	f01c 0001 	ands.w	r0, ip, #1
   1ce84:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1ce88:	d003      	beq.n	1ce92 <ull_filter_lll_rl_addr_allowed+0x2e>
   1ce8a:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1ce8e:	45a4      	cmp	ip, r4
   1ce90:	d009      	beq.n	1cea6 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1ce92:	3301      	adds	r3, #1
   1ce94:	2b08      	cmp	r3, #8
   1ce96:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1ce9a:	d1ec      	bne.n	1ce76 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   1ce9c:	2001      	movs	r0, #1
}
   1ce9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1cea2:	2001      	movs	r0, #1
}
   1cea4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1cea6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1ceaa:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1ceac:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1ceb0:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1ceb4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1ceb8:	45ca      	cmp	sl, r9
   1ceba:	d1ea      	bne.n	1ce92 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1cebc:	45dc      	cmp	ip, fp
   1cebe:	d1f7      	bne.n	1ceb0 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   1cec0:	4433      	add	r3, r6
				*rl_idx = i;
   1cec2:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1cec4:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1cec8:	075a      	lsls	r2, r3, #29
   1ceca:	d5e8      	bpl.n	1ce9e <ull_filter_lll_rl_addr_allowed+0x3a>
   1cecc:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1ced0:	e7e5      	b.n	1ce9e <ull_filter_lll_rl_addr_allowed+0x3a>
   1ced2:	bf00      	nop
   1ced4:	200030f4 	.word	0x200030f4

0001ced8 <ull_filter_lll_rl_addr_resolve>:
{
   1ced8:	b410      	push	{r4}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1ceda:	4b0e      	ldr	r3, [pc, #56]	; (1cf14 <ull_filter_lll_rl_addr_resolve+0x3c>)
   1cedc:	781c      	ldrb	r4, [r3, #0]
   1cede:	b17c      	cbz	r4, 1cf00 <ull_filter_lll_rl_addr_resolve+0x28>
   1cee0:	2a07      	cmp	r2, #7
   1cee2:	d80d      	bhi.n	1cf00 <ull_filter_lll_rl_addr_resolve+0x28>
   1cee4:	4c0c      	ldr	r4, [pc, #48]	; (1cf18 <ull_filter_lll_rl_addr_resolve+0x40>)
   1cee6:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
   1ceea:	f814 c03c 	ldrb.w	ip, [r4, ip, lsl #3]
   1ceee:	f01c 0f08 	tst.w	ip, #8
   1cef2:	d005      	beq.n	1cf00 <ull_filter_lll_rl_addr_resolve+0x28>
	if ((id_addr_type != 0U) && ((id_addr[5] & 0xc0) == 0x40)) {
   1cef4:	b120      	cbz	r0, 1cf00 <ull_filter_lll_rl_addr_resolve+0x28>
   1cef6:	794b      	ldrb	r3, [r1, #5]
   1cef8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cefc:	2b40      	cmp	r3, #64	; 0x40
   1cefe:	d002      	beq.n	1cf06 <ull_filter_lll_rl_addr_resolve+0x2e>
}
   1cf00:	2000      	movs	r0, #0
   1cf02:	bc10      	pop	{r4}
   1cf04:	4770      	bx	lr
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1cf06:	2028      	movs	r0, #40	; 0x28
   1cf08:	fb00 4002 	mla	r0, r0, r2, r4
   1cf0c:	3007      	adds	r0, #7
}
   1cf0e:	bc10      	pop	{r4}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   1cf10:	f00c bfd0 	b.w	29eb4 <bt_rpa_irk_matches>
   1cf14:	20003af9 	.word	0x20003af9
   1cf18:	200030f4 	.word	0x200030f4

0001cf1c <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1cf1c:	4b02      	ldr	r3, [pc, #8]	; (1cf28 <ull_filter_lll_rl_enabled+0xc>)
   1cf1e:	7818      	ldrb	r0, [r3, #0]
}
   1cf20:	3800      	subs	r0, #0
   1cf22:	bf18      	it	ne
   1cf24:	2001      	movne	r0, #1
   1cf26:	4770      	bx	lr
   1cf28:	20003af9 	.word	0x20003af9

0001cf2c <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1cf2c:	4668      	mov	r0, sp
   1cf2e:	f020 0107 	bic.w	r1, r0, #7
   1cf32:	468d      	mov	sp, r1
   1cf34:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1cf36:	f002 fded 	bl	1fb14 <isr_radio>

	ISR_DIRECT_PM();
   1cf3a:	f7ea fbd7 	bl	76ec <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   1cf3e:	f7ea fcc7 	bl	78d0 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1cf42:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1cf46:	4685      	mov	sp, r0
   1cf48:	4770      	bx	lr
   1cf4a:	bf00      	nop

0001cf4c <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1cf4c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1cf4e:	4b09      	ldr	r3, [pc, #36]	; (1cf74 <rtc0_nrf5_isr+0x28>)
   1cf50:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1cf54:	b93a      	cbnz	r2, 1cf66 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1cf56:	2001      	movs	r0, #1
   1cf58:	f7f4 f800 	bl	10f5c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1cf5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1cf60:	2002      	movs	r0, #2
   1cf62:	f7f3 bffb 	b.w	10f5c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1cf66:	2000      	movs	r0, #0
   1cf68:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1cf6c:	f7f5 f8fc 	bl	12168 <ticker_trigger>
   1cf70:	e7f1      	b.n	1cf56 <rtc0_nrf5_isr+0xa>
   1cf72:	bf00      	nop
   1cf74:	4000b000 	.word	0x4000b000

0001cf78 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1cf78:	2000      	movs	r0, #0
   1cf7a:	f7f3 bfef 	b.w	10f5c <mayfly_run>
   1cf7e:	bf00      	nop

0001cf80 <ticker_stop_op_cb>:
static uint8_t preempt_stop_ack;
static uint8_t preempt_req;
static uint8_t volatile preempt_ack;

static void ticker_stop_op_cb(uint32_t status, void *param)
{
   1cf80:	b510      	push	{r4, lr}
	ARG_UNUSED(param);
	ARG_UNUSED(status);

	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1cf82:	4b0e      	ldr	r3, [pc, #56]	; (1cfbc <ticker_stop_op_cb+0x3c>)
   1cf84:	4c0e      	ldr	r4, [pc, #56]	; (1cfc0 <ticker_stop_op_cb+0x40>)
   1cf86:	781a      	ldrb	r2, [r3, #0]
   1cf88:	7823      	ldrb	r3, [r4, #0]
   1cf8a:	429a      	cmp	r2, r3
   1cf8c:	d006      	beq.n	1cf9c <ticker_stop_op_cb+0x1c>
	preempt_stop_ack++;

	preempt_req = preempt_ack;
   1cf8e:	490d      	ldr	r1, [pc, #52]	; (1cfc4 <ticker_stop_op_cb+0x44>)
   1cf90:	4a0d      	ldr	r2, [pc, #52]	; (1cfc8 <ticker_stop_op_cb+0x48>)
   1cf92:	7809      	ldrb	r1, [r1, #0]
   1cf94:	7011      	strb	r1, [r2, #0]
	preempt_stop_ack++;
   1cf96:	3301      	adds	r3, #1
   1cf98:	7023      	strb	r3, [r4, #0]
}
   1cf9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_stop_req != preempt_stop_ack);
   1cf9c:	4a0b      	ldr	r2, [pc, #44]	; (1cfcc <ticker_stop_op_cb+0x4c>)
   1cf9e:	490c      	ldr	r1, [pc, #48]	; (1cfd0 <ticker_stop_op_cb+0x50>)
   1cfa0:	480c      	ldr	r0, [pc, #48]	; (1cfd4 <ticker_stop_op_cb+0x54>)
   1cfa2:	f240 3301 	movw	r3, #769	; 0x301
   1cfa6:	f00a ffff 	bl	27fa8 <printk>
   1cfaa:	4040      	eors	r0, r0
   1cfac:	f380 8811 	msr	BASEPRI, r0
   1cfb0:	f04f 0003 	mov.w	r0, #3
   1cfb4:	df02      	svc	2
	preempt_stop_ack++;
   1cfb6:	7823      	ldrb	r3, [r4, #0]
   1cfb8:	e7e9      	b.n	1cf8e <ticker_stop_op_cb+0xe>
   1cfba:	bf00      	nop
   1cfbc:	20003aff 	.word	0x20003aff
   1cfc0:	20003afe 	.word	0x20003afe
   1cfc4:	20003afa 	.word	0x20003afa
   1cfc8:	20003afb 	.word	0x20003afb
   1cfcc:	00030b5c 	.word	0x00030b5c
   1cfd0:	00030ba4 	.word	0x00030ba4
   1cfd4:	0002fedc 	.word	0x0002fedc

0001cfd8 <ticker_start_op_cb>:

static void ticker_start_op_cb(uint32_t status, void *param)
{
   1cfd8:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(param);
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1cfda:	b9f8      	cbnz	r0, 1d01c <ticker_start_op_cb+0x44>

	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1cfdc:	4b1e      	ldr	r3, [pc, #120]	; (1d058 <ticker_start_op_cb+0x80>)
   1cfde:	4d1f      	ldr	r5, [pc, #124]	; (1d05c <ticker_start_op_cb+0x84>)
   1cfe0:	781a      	ldrb	r2, [r3, #0]
   1cfe2:	782b      	ldrb	r3, [r5, #0]
   1cfe4:	429a      	cmp	r2, r3
   1cfe6:	d027      	beq.n	1d038 <ticker_start_op_cb+0x60>
	preempt_start_ack++;

	LL_ASSERT(preempt_req == preempt_ack);
   1cfe8:	4a1d      	ldr	r2, [pc, #116]	; (1d060 <ticker_start_op_cb+0x88>)
   1cfea:	4c1e      	ldr	r4, [pc, #120]	; (1d064 <ticker_start_op_cb+0x8c>)
   1cfec:	7812      	ldrb	r2, [r2, #0]
   1cfee:	7821      	ldrb	r1, [r4, #0]
	preempt_start_ack++;
   1cff0:	3301      	adds	r3, #1
	LL_ASSERT(preempt_req == preempt_ack);
   1cff2:	4291      	cmp	r1, r2
	preempt_start_ack++;
   1cff4:	702b      	strb	r3, [r5, #0]
	LL_ASSERT(preempt_req == preempt_ack);
   1cff6:	b2d3      	uxtb	r3, r2
   1cff8:	d00d      	beq.n	1d016 <ticker_start_op_cb+0x3e>
   1cffa:	4a1b      	ldr	r2, [pc, #108]	; (1d068 <ticker_start_op_cb+0x90>)
   1cffc:	491b      	ldr	r1, [pc, #108]	; (1d06c <ticker_start_op_cb+0x94>)
   1cffe:	481c      	ldr	r0, [pc, #112]	; (1d070 <ticker_start_op_cb+0x98>)
   1d000:	f240 330f 	movw	r3, #783	; 0x30f
   1d004:	f00a ffd0 	bl	27fa8 <printk>
   1d008:	4040      	eors	r0, r0
   1d00a:	f380 8811 	msr	BASEPRI, r0
   1d00e:	f04f 0003 	mov.w	r0, #3
   1d012:	df02      	svc	2
	preempt_req++;
   1d014:	7823      	ldrb	r3, [r4, #0]
   1d016:	3301      	adds	r3, #1
   1d018:	7023      	strb	r3, [r4, #0]
}
   1d01a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d01c:	4a12      	ldr	r2, [pc, #72]	; (1d068 <ticker_start_op_cb+0x90>)
   1d01e:	4915      	ldr	r1, [pc, #84]	; (1d074 <ticker_start_op_cb+0x9c>)
   1d020:	4813      	ldr	r0, [pc, #76]	; (1d070 <ticker_start_op_cb+0x98>)
   1d022:	f240 330a 	movw	r3, #778	; 0x30a
   1d026:	f00a ffbf 	bl	27fa8 <printk>
   1d02a:	4040      	eors	r0, r0
   1d02c:	f380 8811 	msr	BASEPRI, r0
   1d030:	f04f 0003 	mov.w	r0, #3
   1d034:	df02      	svc	2
   1d036:	e7d1      	b.n	1cfdc <ticker_start_op_cb+0x4>
	LL_ASSERT(preempt_start_req != preempt_start_ack);
   1d038:	4a0b      	ldr	r2, [pc, #44]	; (1d068 <ticker_start_op_cb+0x90>)
   1d03a:	490f      	ldr	r1, [pc, #60]	; (1d078 <ticker_start_op_cb+0xa0>)
   1d03c:	480c      	ldr	r0, [pc, #48]	; (1d070 <ticker_start_op_cb+0x98>)
   1d03e:	f44f 7343 	mov.w	r3, #780	; 0x30c
   1d042:	f00a ffb1 	bl	27fa8 <printk>
   1d046:	4040      	eors	r0, r0
   1d048:	f380 8811 	msr	BASEPRI, r0
   1d04c:	f04f 0003 	mov.w	r0, #3
   1d050:	df02      	svc	2
	preempt_start_ack++;
   1d052:	782b      	ldrb	r3, [r5, #0]
   1d054:	e7c8      	b.n	1cfe8 <ticker_start_op_cb+0x10>
   1d056:	bf00      	nop
   1d058:	20003afd 	.word	0x20003afd
   1d05c:	20003afc 	.word	0x20003afc
   1d060:	20003afa 	.word	0x20003afa
   1d064:	20003afb 	.word	0x20003afb
   1d068:	00030b5c 	.word	0x00030b5c
   1d06c:	00030bf4 	.word	0x00030bf4
   1d070:	0002fedc 	.word	0x0002fedc
   1d074:	0003062c 	.word	0x0003062c
   1d078:	00030bcc 	.word	0x00030bcc

0001d07c <isr_race>:
	radio_status_reset();
   1d07c:	f002 be6a 	b.w	1fd54 <radio_status_reset>

0001d080 <preempt_ticker_cb>:
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t ticks_drift,
			      uint32_t remainder, uint16_t lazy, uint8_t force,
			      void *param)
{
   1d080:	b510      	push	{r4, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	LL_ASSERT(preempt_ack != preempt_req);
   1d082:	4a18      	ldr	r2, [pc, #96]	; (1d0e4 <preempt_ticker_cb+0x64>)
   1d084:	4c18      	ldr	r4, [pc, #96]	; (1d0e8 <preempt_ticker_cb+0x68>)
   1d086:	7812      	ldrb	r2, [r2, #0]
   1d088:	7823      	ldrb	r3, [r4, #0]
   1d08a:	429a      	cmp	r2, r3
   1d08c:	d01b      	beq.n	1d0c6 <preempt_ticker_cb+0x46>
	preempt_ack++;
   1d08e:	7821      	ldrb	r1, [r4, #0]

	mfy.param = param;
   1d090:	4b16      	ldr	r3, [pc, #88]	; (1d0ec <preempt_ticker_cb+0x6c>)
	preempt_ack++;
   1d092:	3101      	adds	r1, #1
   1d094:	b2c9      	uxtb	r1, r1
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1d096:	2200      	movs	r2, #0
	preempt_ack++;
   1d098:	7021      	strb	r1, [r4, #0]
	mfy.param = param;
   1d09a:	9903      	ldr	r1, [sp, #12]
   1d09c:	6099      	str	r1, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1d09e:	2001      	movs	r0, #1
   1d0a0:	4611      	mov	r1, r2
   1d0a2:	f7f3 ff03 	bl	10eac <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1d0a6:	b900      	cbnz	r0, 1d0aa <preempt_ticker_cb+0x2a>
}
   1d0a8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret);
   1d0aa:	4a11      	ldr	r2, [pc, #68]	; (1d0f0 <preempt_ticker_cb+0x70>)
   1d0ac:	4911      	ldr	r1, [pc, #68]	; (1d0f4 <preempt_ticker_cb+0x74>)
   1d0ae:	4812      	ldr	r0, [pc, #72]	; (1d0f8 <preempt_ticker_cb+0x78>)
   1d0b0:	f240 3376 	movw	r3, #886	; 0x376
   1d0b4:	f00a ff78 	bl	27fa8 <printk>
   1d0b8:	4040      	eors	r0, r0
   1d0ba:	f380 8811 	msr	BASEPRI, r0
   1d0be:	f04f 0003 	mov.w	r0, #3
   1d0c2:	df02      	svc	2
}
   1d0c4:	bd10      	pop	{r4, pc}
	LL_ASSERT(preempt_ack != preempt_req);
   1d0c6:	4a0a      	ldr	r2, [pc, #40]	; (1d0f0 <preempt_ticker_cb+0x70>)
   1d0c8:	490c      	ldr	r1, [pc, #48]	; (1d0fc <preempt_ticker_cb+0x7c>)
   1d0ca:	480b      	ldr	r0, [pc, #44]	; (1d0f8 <preempt_ticker_cb+0x78>)
   1d0cc:	f44f 735c 	mov.w	r3, #880	; 0x370
   1d0d0:	f00a ff6a 	bl	27fa8 <printk>
   1d0d4:	4040      	eors	r0, r0
   1d0d6:	f380 8811 	msr	BASEPRI, r0
   1d0da:	f04f 0003 	mov.w	r0, #3
   1d0de:	df02      	svc	2
   1d0e0:	e7d5      	b.n	1d08e <preempt_ticker_cb+0xe>
   1d0e2:	bf00      	nop
   1d0e4:	20003afb 	.word	0x20003afb
   1d0e8:	20003afa 	.word	0x20003afa
   1d0ec:	20000650 	.word	0x20000650
   1d0f0:	00030b5c 	.word	0x00030b5c
   1d0f4:	00030354 	.word	0x00030354
   1d0f8:	0002fedc 	.word	0x0002fedc
   1d0fc:	00030c10 	.word	0x00030c10

0001d100 <preempt_ticker_stop>:
{
   1d100:	b510      	push	{r4, lr}
	if ((preempt_stop_req != preempt_stop_ack) ||
   1d102:	4917      	ldr	r1, [pc, #92]	; (1d160 <preempt_ticker_stop+0x60>)
   1d104:	4a17      	ldr	r2, [pc, #92]	; (1d164 <preempt_ticker_stop+0x64>)
   1d106:	780b      	ldrb	r3, [r1, #0]
   1d108:	7812      	ldrb	r2, [r2, #0]
   1d10a:	429a      	cmp	r2, r3
{
   1d10c:	b082      	sub	sp, #8
	if ((preempt_stop_req != preempt_stop_ack) ||
   1d10e:	d122      	bne.n	1d156 <preempt_ticker_stop+0x56>
	    (preempt_req == preempt_ack)) {
   1d110:	4b15      	ldr	r3, [pc, #84]	; (1d168 <preempt_ticker_stop+0x68>)
   1d112:	4a16      	ldr	r2, [pc, #88]	; (1d16c <preempt_ticker_stop+0x6c>)
   1d114:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_stop_req != preempt_stop_ack) ||
   1d116:	7812      	ldrb	r2, [r2, #0]
   1d118:	429a      	cmp	r2, r3
   1d11a:	d01c      	beq.n	1d156 <preempt_ticker_stop+0x56>
	preempt_stop_req++;
   1d11c:	7808      	ldrb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d11e:	4b14      	ldr	r3, [pc, #80]	; (1d170 <preempt_ticker_stop+0x70>)
	preempt_stop_req++;
   1d120:	3001      	adds	r0, #1
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d122:	2200      	movs	r2, #0
	preempt_stop_req++;
   1d124:	b2c0      	uxtb	r0, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d126:	9200      	str	r2, [sp, #0]
	preempt_stop_req++;
   1d128:	7008      	strb	r0, [r1, #0]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1d12a:	4611      	mov	r1, r2
   1d12c:	4610      	mov	r0, r2
   1d12e:	f7f5 f913 	bl	12358 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d132:	4604      	mov	r4, r0
   1d134:	b178      	cbz	r0, 1d156 <preempt_ticker_stop+0x56>
   1d136:	2802      	cmp	r0, #2
   1d138:	d00e      	beq.n	1d158 <preempt_ticker_stop+0x58>
   1d13a:	4a0e      	ldr	r2, [pc, #56]	; (1d174 <preempt_ticker_stop+0x74>)
   1d13c:	490e      	ldr	r1, [pc, #56]	; (1d178 <preempt_ticker_stop+0x78>)
   1d13e:	480f      	ldr	r0, [pc, #60]	; (1d17c <preempt_ticker_stop+0x7c>)
   1d140:	f240 3362 	movw	r3, #866	; 0x362
   1d144:	f00a ff30 	bl	27fa8 <printk>
   1d148:	4040      	eors	r0, r0
   1d14a:	f380 8811 	msr	BASEPRI, r0
   1d14e:	f04f 0003 	mov.w	r0, #3
   1d152:	df02      	svc	2
   1d154:	e000      	b.n	1d158 <preempt_ticker_stop+0x58>
		return TICKER_STATUS_SUCCESS;
   1d156:	2400      	movs	r4, #0
}
   1d158:	4620      	mov	r0, r4
   1d15a:	b002      	add	sp, #8
   1d15c:	bd10      	pop	{r4, pc}
   1d15e:	bf00      	nop
   1d160:	20003aff 	.word	0x20003aff
   1d164:	20003afe 	.word	0x20003afe
   1d168:	20003afa 	.word	0x20003afa
   1d16c:	20003afb 	.word	0x20003afb
   1d170:	0001cf81 	.word	0x0001cf81
   1d174:	00030b5c 	.word	0x00030b5c
   1d178:	00030448 	.word	0x00030448
   1d17c:	0002fedc 	.word	0x0002fedc

0001d180 <preempt_ticker_start>:
{
   1d180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull = HDR_LLL2ULL(p->param);
   1d184:	68cb      	ldr	r3, [r1, #12]
	preempt_anchor = p->ticks_at_expire;
   1d186:	f8d1 8000 	ldr.w	r8, [r1]
	ull = HDR_LLL2ULL(p->param);
   1d18a:	681a      	ldr	r2, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1d18c:	4b2a      	ldr	r3, [pc, #168]	; (1d238 <preempt_ticker_start+0xb8>)
   1d18e:	4f2b      	ldr	r7, [pc, #172]	; (1d23c <preempt_ticker_start+0xbc>)
	preempt_to = MAX(ull->ticks_active_to_start,
   1d190:	68d6      	ldr	r6, [r2, #12]
{
   1d192:	460d      	mov	r5, r1
   1d194:	4604      	mov	r4, r0
	if ((preempt_start_req != preempt_start_ack) ||
   1d196:	7819      	ldrb	r1, [r3, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   1d198:	6890      	ldr	r0, [r2, #8]
   1d19a:	6853      	ldr	r3, [r2, #4]
   1d19c:	4298      	cmp	r0, r3
   1d19e:	bf2c      	ite	cs
   1d1a0:	ebc6 0600 	rsbcs	r6, r6, r0
   1d1a4:	ebc6 0603 	rsbcc	r6, r6, r3
	if ((preempt_start_req != preempt_start_ack) ||
   1d1a8:	783b      	ldrb	r3, [r7, #0]
   1d1aa:	4299      	cmp	r1, r3
{
   1d1ac:	b08a      	sub	sp, #40	; 0x28
	ticks_at_preempt_new = preempt_anchor + preempt_to;
   1d1ae:	eb08 0906 	add.w	r9, r8, r6
	if ((preempt_start_req != preempt_start_ack) ||
   1d1b2:	d033      	beq.n	1d21c <preempt_ticker_start+0x9c>
		if (!prev || prev->is_aborted ||
   1d1b4:	2c00      	cmp	r4, #0
   1d1b6:	d03a      	beq.n	1d22e <preempt_ticker_start+0xae>
   1d1b8:	7f23      	ldrb	r3, [r4, #28]
   1d1ba:	079b      	lsls	r3, r3, #30
   1d1bc:	d437      	bmi.n	1d22e <preempt_ticker_start+0xae>
		diff = ticks_at_preempt_new - ticks_at_preempt;
   1d1be:	f8df a080 	ldr.w	sl, [pc, #128]	; 1d240 <preempt_ticker_start+0xc0>
   1d1c2:	f8da 0000 	ldr.w	r0, [sl]
   1d1c6:	eba9 0000 	sub.w	r0, r9, r0
		if (!prev || prev->is_aborted ||
   1d1ca:	f410 0000 	ands.w	r0, r0, #8388608	; 0x800000
   1d1ce:	d022      	beq.n	1d216 <preempt_ticker_start+0x96>
		preempt_ticker_stop();
   1d1d0:	f7ff ff96 	bl	1d100 <preempt_ticker_stop>
		prev->is_aborted = 1U;
   1d1d4:	7f23      	ldrb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1d1d6:	68e1      	ldr	r1, [r4, #12]
		ticks_at_preempt = ticks_at_preempt_new;
   1d1d8:	f8ca 9000 	str.w	r9, [sl]
		prev->is_aborted = 1U;
   1d1dc:	f043 0302 	orr.w	r3, r3, #2
   1d1e0:	7723      	strb	r3, [r4, #28]
		prev->abort_cb(&prev->prepare_param, prev->prepare_param.param);
   1d1e2:	4620      	mov	r0, r4
   1d1e4:	69a3      	ldr	r3, [r4, #24]
   1d1e6:	4798      	blx	r3
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d1e8:	4b16      	ldr	r3, [pc, #88]	; (1d244 <preempt_ticker_start+0xc4>)
	preempt_start_req++;
   1d1ea:	783c      	ldrb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d1ec:	9600      	str	r6, [sp, #0]
   1d1ee:	e9cd 3507 	strd	r3, r5, [sp, #28]
   1d1f2:	4b15      	ldr	r3, [pc, #84]	; (1d248 <preempt_ticker_start+0xc8>)
	ticks_at_preempt = ticks_at_preempt_new;
   1d1f4:	f8ca 9000 	str.w	r9, [sl]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d1f8:	2200      	movs	r2, #0
	preempt_start_req++;
   1d1fa:	3401      	adds	r4, #1
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d1fc:	e9cd 3505 	strd	r3, r5, [sp, #20]
	preempt_start_req++;
   1d200:	b2e4      	uxtb	r4, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d202:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1d206:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1d20a:	4643      	mov	r3, r8
   1d20c:	4611      	mov	r1, r2
   1d20e:	4610      	mov	r0, r2
	preempt_start_req++;
   1d210:	703c      	strb	r4, [r7, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1d212:	f7f5 f817 	bl	12244 <ticker_start>
}
   1d216:	b00a      	add	sp, #40	; 0x28
   1d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    (preempt_req != preempt_ack)) {
   1d21c:	4b0b      	ldr	r3, [pc, #44]	; (1d24c <preempt_ticker_start+0xcc>)
   1d21e:	4a0c      	ldr	r2, [pc, #48]	; (1d250 <preempt_ticker_start+0xd0>)
   1d220:	781b      	ldrb	r3, [r3, #0]
	if ((preempt_start_req != preempt_start_ack) ||
   1d222:	7812      	ldrb	r2, [r2, #0]
   1d224:	429a      	cmp	r2, r3
   1d226:	d1c5      	bne.n	1d1b4 <preempt_ticker_start+0x34>
   1d228:	f8df a014 	ldr.w	sl, [pc, #20]	; 1d240 <preempt_ticker_start+0xc0>
   1d22c:	e7dc      	b.n	1d1e8 <preempt_ticker_start+0x68>
			return TICKER_STATUS_SUCCESS;
   1d22e:	2000      	movs	r0, #0
}
   1d230:	b00a      	add	sp, #40	; 0x28
   1d232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d236:	bf00      	nop
   1d238:	20003afc 	.word	0x20003afc
   1d23c:	20003afd 	.word	0x20003afd
   1d240:	20003284 	.word	0x20003284
   1d244:	0001cfd9 	.word	0x0001cfd9
   1d248:	0001d081 	.word	0x0001d081
   1d24c:	20003afa 	.word	0x20003afa
   1d250:	20003afb 	.word	0x20003afb

0001d254 <preempt>:

static void preempt(void *param)
{
   1d254:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1d256:	4e4b      	ldr	r6, [pc, #300]	; (1d384 <preempt+0x130>)
   1d258:	68b3      	ldr	r3, [r6, #8]
{
   1d25a:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   1d25c:	b1b3      	cbz	r3, 1d28c <preempt+0x38>
   1d25e:	6833      	ldr	r3, [r6, #0]
   1d260:	b1a3      	cbz	r3, 1d28c <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   1d262:	23ff      	movs	r3, #255	; 0xff
   1d264:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1d266:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1d26a:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   1d26e:	f7f7 fed5 	bl	1501c <ull_prepare_dequeue_iter>
	if (!next) {
   1d272:	4601      	mov	r1, r0
   1d274:	b150      	cbz	r0, 1d28c <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1d276:	7f0b      	ldrb	r3, [r1, #28]
   1d278:	f013 0403 	ands.w	r4, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1d27c:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   1d280:	d006      	beq.n	1d290 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1d282:	f7f7 fecb 	bl	1501c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1d286:	4601      	mov	r1, r0
   1d288:	2800      	cmp	r0, #0
   1d28a:	d1f4      	bne.n	1d276 <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   1d28c:	b009      	add	sp, #36	; 0x24
   1d28e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   1d290:	428d      	cmp	r5, r1
   1d292:	d126      	bne.n	1d2e2 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   1d294:	6873      	ldr	r3, [r6, #4]
   1d296:	6831      	ldr	r1, [r6, #0]
   1d298:	68e8      	ldr	r0, [r5, #12]
   1d29a:	aa03      	add	r2, sp, #12
   1d29c:	4798      	blx	r3
	if (!err) {
   1d29e:	4607      	mov	r7, r0
   1d2a0:	b1b0      	cbz	r0, 1d2d0 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   1d2a2:	68b3      	ldr	r3, [r6, #8]
   1d2a4:	6831      	ldr	r1, [r6, #0]
   1d2a6:	4620      	mov	r0, r4
   1d2a8:	4798      	blx	r3
	if (err == -EAGAIN) {
   1d2aa:	f117 0f0b 	cmn.w	r7, #11
   1d2ae:	d02c      	beq.n	1d30a <preempt+0xb6>
		LL_ASSERT(err == -ECANCELED);
   1d2b0:	378c      	adds	r7, #140	; 0x8c
   1d2b2:	d0eb      	beq.n	1d28c <preempt+0x38>
   1d2b4:	4a34      	ldr	r2, [pc, #208]	; (1d388 <preempt+0x134>)
   1d2b6:	4935      	ldr	r1, [pc, #212]	; (1d38c <preempt+0x138>)
   1d2b8:	4835      	ldr	r0, [pc, #212]	; (1d390 <preempt+0x13c>)
   1d2ba:	f44f 7374 	mov.w	r3, #976	; 0x3d0
   1d2be:	f00a fe73 	bl	27fa8 <printk>
   1d2c2:	4040      	eors	r0, r0
   1d2c4:	f380 8811 	msr	BASEPRI, r0
   1d2c8:	f04f 0003 	mov.w	r0, #3
   1d2cc:	df02      	svc	2
   1d2ce:	e7dd      	b.n	1d28c <preempt+0x38>
		next->is_aborted = 1;
   1d2d0:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1d2d2:	69aa      	ldr	r2, [r5, #24]
   1d2d4:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1d2d6:	f043 0302 	orr.w	r3, r3, #2
   1d2da:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1d2dc:	4628      	mov	r0, r5
   1d2de:	4790      	blx	r2
		return;
   1d2e0:	e7d4      	b.n	1d28c <preempt+0x38>
		ret = preempt_ticker_start(NULL, next);
   1d2e2:	4620      	mov	r0, r4
   1d2e4:	f7ff ff4c 	bl	1d180 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d2e8:	f030 0302 	bics.w	r3, r0, #2
   1d2ec:	d0ce      	beq.n	1d28c <preempt+0x38>
   1d2ee:	4a26      	ldr	r2, [pc, #152]	; (1d388 <preempt+0x134>)
   1d2f0:	4928      	ldr	r1, [pc, #160]	; (1d394 <preempt+0x140>)
   1d2f2:	4827      	ldr	r0, [pc, #156]	; (1d390 <preempt+0x13c>)
   1d2f4:	f44f 7367 	mov.w	r3, #924	; 0x39c
   1d2f8:	f00a fe56 	bl	27fa8 <printk>
   1d2fc:	4040      	eors	r0, r0
   1d2fe:	f380 8811 	msr	BASEPRI, r0
   1d302:	f04f 0003 	mov.w	r0, #3
   1d306:	df02      	svc	2
   1d308:	e7c0      	b.n	1d28c <preempt+0x38>
		iter_idx = UINT8_MAX;
   1d30a:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1d30c:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   1d310:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1d314:	f7f7 fe82 	bl	1501c <ull_prepare_dequeue_iter>
		while (iter) {
   1d318:	b928      	cbnz	r0, 1d326 <preempt+0xd2>
   1d31a:	e013      	b.n	1d344 <preempt+0xf0>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1d31c:	f10d 000b 	add.w	r0, sp, #11
   1d320:	f7f7 fe7c 	bl	1501c <ull_prepare_dequeue_iter>
		while (iter) {
   1d324:	b170      	cbz	r0, 1d344 <preempt+0xf0>
			if (!iter->is_aborted &&
   1d326:	7f03      	ldrb	r3, [r0, #28]
   1d328:	079a      	lsls	r2, r3, #30
   1d32a:	d4f7      	bmi.n	1d31c <preempt+0xc8>
			    event.curr.param == iter->prepare_param.param) {
   1d32c:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1d32e:	6831      	ldr	r1, [r6, #0]
   1d330:	4291      	cmp	r1, r2
   1d332:	d1f3      	bne.n	1d31c <preempt+0xc8>
				iter->is_aborted = 1;
   1d334:	f043 0302 	orr.w	r3, r3, #2
   1d338:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   1d33a:	6983      	ldr	r3, [r0, #24]
   1d33c:	4798      	blx	r3
				iter_idx = UINT8_MAX;
   1d33e:	f88d 400b 	strb.w	r4, [sp, #11]
   1d342:	e7eb      	b.n	1d31c <preempt+0xc8>
	struct lll_prepare_param prepare_param = {0};
   1d344:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   1d346:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1d348:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1d34a:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1d34c:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1d350:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   1d352:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   1d354:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1d356:	9b03      	ldr	r3, [sp, #12]
   1d358:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1d35c:	aa04      	add	r2, sp, #16
   1d35e:	f7f7 fe15 	bl	14f8c <ull_prepare_enqueue>
		LL_ASSERT(iter);
   1d362:	2800      	cmp	r0, #0
   1d364:	d192      	bne.n	1d28c <preempt+0x38>
   1d366:	4a08      	ldr	r2, [pc, #32]	; (1d388 <preempt+0x134>)
   1d368:	490b      	ldr	r1, [pc, #44]	; (1d398 <preempt+0x144>)
   1d36a:	4809      	ldr	r0, [pc, #36]	; (1d390 <preempt+0x13c>)
   1d36c:	f240 33ce 	movw	r3, #974	; 0x3ce
   1d370:	f00a fe1a 	bl	27fa8 <printk>
   1d374:	4040      	eors	r0, r0
   1d376:	f380 8811 	msr	BASEPRI, r0
   1d37a:	f04f 0003 	mov.w	r0, #3
   1d37e:	df02      	svc	2
   1d380:	e784      	b.n	1d28c <preempt+0x38>
   1d382:	bf00      	nop
   1d384:	20003270 	.word	0x20003270
   1d388:	00030b5c 	.word	0x00030b5c
   1d38c:	00030c34 	.word	0x00030c34
   1d390:	0002fedc 	.word	0x0002fedc
   1d394:	00030448 	.word	0x00030448
   1d398:	00030c2c 	.word	0x00030c2c

0001d39c <lll_init>:
{
   1d39c:	b510      	push	{r4, lr}
   1d39e:	4816      	ldr	r0, [pc, #88]	; (1d3f8 <lll_init+0x5c>)
   1d3a0:	f007 f846 	bl	24430 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1d3a4:	4b15      	ldr	r3, [pc, #84]	; (1d3fc <lll_init+0x60>)
   1d3a6:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1d3a8:	b310      	cbz	r0, 1d3f0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1d3aa:	4b15      	ldr	r3, [pc, #84]	; (1d400 <lll_init+0x64>)
   1d3ac:	2400      	movs	r4, #0
   1d3ae:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1d3b0:	f000 fb0a 	bl	1d9c8 <lll_clock_init>
	if (err < 0) {
   1d3b4:	2800      	cmp	r0, #0
   1d3b6:	db1a      	blt.n	1d3ee <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1d3b8:	4621      	mov	r1, r4
   1d3ba:	2001      	movs	r0, #1
   1d3bc:	4622      	mov	r2, r4
   1d3be:	f7ea f97d 	bl	76bc <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1d3c2:	4622      	mov	r2, r4
   1d3c4:	200b      	movs	r0, #11
   1d3c6:	2101      	movs	r1, #1
   1d3c8:	f7ea f978 	bl	76bc <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1d3cc:	4622      	mov	r2, r4
   1d3ce:	4621      	mov	r1, r4
   1d3d0:	2018      	movs	r0, #24
   1d3d2:	f7ea f973 	bl	76bc <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1d3d6:	2001      	movs	r0, #1
   1d3d8:	f7ea f93e 	bl	7658 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1d3dc:	200b      	movs	r0, #11
   1d3de:	f7ea f93b 	bl	7658 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1d3e2:	2018      	movs	r0, #24
   1d3e4:	f7ea f938 	bl	7658 <arch_irq_enable>
	radio_setup();
   1d3e8:	f002 fbc4 	bl	1fb74 <radio_setup>
	return 0;
   1d3ec:	4620      	mov	r0, r4
}
   1d3ee:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1d3f0:	f06f 0012 	mvn.w	r0, #18
}
   1d3f4:	bd10      	pop	{r4, pc}
   1d3f6:	bf00      	nop
   1d3f8:	00030c40 	.word	0x00030c40
   1d3fc:	2000326c 	.word	0x2000326c
   1d400:	20003270 	.word	0x20003270

0001d404 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1d404:	4a05      	ldr	r2, [pc, #20]	; (1d41c <lll_csrand_get+0x18>)
{
   1d406:	b410      	push	{r4}
   1d408:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1d40a:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1d40c:	6884      	ldr	r4, [r0, #8]
   1d40e:	6824      	ldr	r4, [r4, #0]
   1d410:	b28a      	uxth	r2, r1
   1d412:	4619      	mov	r1, r3
   1d414:	4623      	mov	r3, r4
}
   1d416:	bc10      	pop	{r4}
   1d418:	4718      	bx	r3
   1d41a:	bf00      	nop
   1d41c:	2000326c 	.word	0x2000326c

0001d420 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1d420:	4b08      	ldr	r3, [pc, #32]	; (1d444 <lll_csrand_isr_get+0x24>)
{
   1d422:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1d424:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1d426:	68ab      	ldr	r3, [r5, #8]
   1d428:	685c      	ldr	r4, [r3, #4]
   1d42a:	b13c      	cbz	r4, 1d43c <lll_csrand_isr_get+0x1c>
   1d42c:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1d42e:	46a4      	mov	ip, r4
   1d430:	4601      	mov	r1, r0
   1d432:	b292      	uxth	r2, r2
   1d434:	4628      	mov	r0, r5
   1d436:	2300      	movs	r3, #0
}
   1d438:	bc30      	pop	{r4, r5}
   1d43a:	4760      	bx	ip
   1d43c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d440:	bc30      	pop	{r4, r5}
   1d442:	4770      	bx	lr
   1d444:	2000326c 	.word	0x2000326c

0001d448 <lll_rand_isr_get>:
   1d448:	4b08      	ldr	r3, [pc, #32]	; (1d46c <lll_rand_isr_get+0x24>)
   1d44a:	b430      	push	{r4, r5}
   1d44c:	681d      	ldr	r5, [r3, #0]
   1d44e:	68ab      	ldr	r3, [r5, #8]
   1d450:	685c      	ldr	r4, [r3, #4]
   1d452:	b13c      	cbz	r4, 1d464 <lll_rand_isr_get+0x1c>
   1d454:	460a      	mov	r2, r1
   1d456:	46a4      	mov	ip, r4
   1d458:	4601      	mov	r1, r0
   1d45a:	b292      	uxth	r2, r2
   1d45c:	4628      	mov	r0, r5
   1d45e:	2300      	movs	r3, #0
   1d460:	bc30      	pop	{r4, r5}
   1d462:	4760      	bx	ip
   1d464:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d468:	bc30      	pop	{r4, r5}
   1d46a:	4770      	bx	lr
   1d46c:	2000326c 	.word	0x2000326c

0001d470 <lll_reset>:
}
   1d470:	2000      	movs	r0, #0
   1d472:	4770      	bx	lr

0001d474 <lll_disable>:
{
   1d474:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   1d476:	4604      	mov	r4, r0
{
   1d478:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1d47a:	b378      	cbz	r0, 1d4dc <lll_disable+0x68>
   1d47c:	4b23      	ldr	r3, [pc, #140]	; (1d50c <lll_disable+0x98>)
   1d47e:	681a      	ldr	r2, [r3, #0]
   1d480:	4282      	cmp	r2, r0
   1d482:	d025      	beq.n	1d4d0 <lll_disable+0x5c>
		idx = UINT8_MAX;
   1d484:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1d486:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1d48a:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1d48e:	f7f7 fdc5 	bl	1501c <ull_prepare_dequeue_iter>
		while (next) {
   1d492:	b938      	cbnz	r0, 1d4a4 <lll_disable+0x30>
   1d494:	e01a      	b.n	1d4cc <lll_disable+0x58>
			    (!param || (param == next->prepare_param.param))) {
   1d496:	428c      	cmp	r4, r1
   1d498:	d00a      	beq.n	1d4b0 <lll_disable+0x3c>
			next = ull_prepare_dequeue_iter(&idx);
   1d49a:	f10d 0007 	add.w	r0, sp, #7
   1d49e:	f7f7 fdbd 	bl	1501c <ull_prepare_dequeue_iter>
		while (next) {
   1d4a2:	b198      	cbz	r0, 1d4cc <lll_disable+0x58>
			if (!next->is_aborted &&
   1d4a4:	7f03      	ldrb	r3, [r0, #28]
   1d4a6:	079b      	lsls	r3, r3, #30
   1d4a8:	d4f7      	bmi.n	1d49a <lll_disable+0x26>
			    (!param || (param == next->prepare_param.param))) {
   1d4aa:	68c1      	ldr	r1, [r0, #12]
			if (!next->is_aborted &&
   1d4ac:	2c00      	cmp	r4, #0
   1d4ae:	d1f2      	bne.n	1d496 <lll_disable+0x22>
				next->is_aborted = 1;
   1d4b0:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1d4b2:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1d4b4:	f043 0302 	orr.w	r3, r3, #2
   1d4b8:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1d4ba:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1d4bc:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   1d4c0:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   1d4c4:	f7f7 fdaa 	bl	1501c <ull_prepare_dequeue_iter>
		while (next) {
   1d4c8:	2800      	cmp	r0, #0
   1d4ca:	d1eb      	bne.n	1d4a4 <lll_disable+0x30>
}
   1d4cc:	b003      	add	sp, #12
   1d4ce:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   1d4d0:	689b      	ldr	r3, [r3, #8]
   1d4d2:	b16b      	cbz	r3, 1d4f0 <lll_disable+0x7c>
   1d4d4:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1d4d6:	2000      	movs	r0, #0
   1d4d8:	4798      	blx	r3
   1d4da:	e7d3      	b.n	1d484 <lll_disable+0x10>
		if (event.curr.abort_cb && event.curr.param) {
   1d4dc:	4a0b      	ldr	r2, [pc, #44]	; (1d50c <lll_disable+0x98>)
   1d4de:	6893      	ldr	r3, [r2, #8]
   1d4e0:	2b00      	cmp	r3, #0
   1d4e2:	d0cf      	beq.n	1d484 <lll_disable+0x10>
   1d4e4:	6811      	ldr	r1, [r2, #0]
   1d4e6:	2900      	cmp	r1, #0
   1d4e8:	d0cc      	beq.n	1d484 <lll_disable+0x10>
			event.curr.abort_cb(NULL, event.curr.param);
   1d4ea:	2000      	movs	r0, #0
   1d4ec:	4798      	blx	r3
   1d4ee:	e7c9      	b.n	1d484 <lll_disable+0x10>
			LL_ASSERT(!param);
   1d4f0:	4a07      	ldr	r2, [pc, #28]	; (1d510 <lll_disable+0x9c>)
   1d4f2:	4908      	ldr	r1, [pc, #32]	; (1d514 <lll_disable+0xa0>)
   1d4f4:	4808      	ldr	r0, [pc, #32]	; (1d518 <lll_disable+0xa4>)
   1d4f6:	23fd      	movs	r3, #253	; 0xfd
   1d4f8:	f00a fd56 	bl	27fa8 <printk>
   1d4fc:	4040      	eors	r0, r0
   1d4fe:	f380 8811 	msr	BASEPRI, r0
   1d502:	f04f 0003 	mov.w	r0, #3
   1d506:	df02      	svc	2
   1d508:	e7bc      	b.n	1d484 <lll_disable+0x10>
   1d50a:	bf00      	nop
   1d50c:	20003270 	.word	0x20003270
   1d510:	00030b5c 	.word	0x00030b5c
   1d514:	00030c44 	.word	0x00030c44
   1d518:	0002fedc 	.word	0x0002fedc

0001d51c <lll_prepare_done>:
}
   1d51c:	2000      	movs	r0, #0
   1d51e:	4770      	bx	lr

0001d520 <lll_done>:
{
   1d520:	b538      	push	{r3, r4, r5, lr}
   1d522:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1d524:	f7f7 fd6c 	bl	15000 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1d528:	b154      	cbz	r4, 1d540 <lll_done+0x20>
   1d52a:	b310      	cbz	r0, 1d572 <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   1d52c:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   1d52e:	2000      	movs	r0, #0
   1d530:	f7f7 fd94 	bl	1505c <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   1d534:	4620      	mov	r0, r4
   1d536:	f7f7 fdf5 	bl	15124 <ull_event_done>
	LL_ASSERT(evdone);
   1d53a:	b158      	cbz	r0, 1d554 <lll_done+0x34>
}
   1d53c:	2000      	movs	r0, #0
   1d53e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   1d540:	4d1a      	ldr	r5, [pc, #104]	; (1d5ac <lll_done+0x8c>)
   1d542:	68ab      	ldr	r3, [r5, #8]
   1d544:	b31b      	cbz	r3, 1d58e <lll_done+0x6e>
		param = event.curr.param;
   1d546:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   1d548:	2300      	movs	r3, #0
   1d54a:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   1d54c:	602b      	str	r3, [r5, #0]
		if (param) {
   1d54e:	2c00      	cmp	r4, #0
   1d550:	d1ec      	bne.n	1d52c <lll_done+0xc>
   1d552:	e7ec      	b.n	1d52e <lll_done+0xe>
	LL_ASSERT(evdone);
   1d554:	4a16      	ldr	r2, [pc, #88]	; (1d5b0 <lll_done+0x90>)
   1d556:	4917      	ldr	r1, [pc, #92]	; (1d5b4 <lll_done+0x94>)
   1d558:	4817      	ldr	r0, [pc, #92]	; (1d5b8 <lll_done+0x98>)
   1d55a:	f240 136d 	movw	r3, #365	; 0x16d
   1d55e:	f00a fd23 	bl	27fa8 <printk>
   1d562:	4040      	eors	r0, r0
   1d564:	f380 8811 	msr	BASEPRI, r0
   1d568:	f04f 0003 	mov.w	r0, #3
   1d56c:	df02      	svc	2
}
   1d56e:	2000      	movs	r0, #0
   1d570:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1d572:	4a0f      	ldr	r2, [pc, #60]	; (1d5b0 <lll_done+0x90>)
   1d574:	4911      	ldr	r1, [pc, #68]	; (1d5bc <lll_done+0x9c>)
   1d576:	4810      	ldr	r0, [pc, #64]	; (1d5b8 <lll_done+0x98>)
   1d578:	f240 1337 	movw	r3, #311	; 0x137
   1d57c:	f00a fd14 	bl	27fa8 <printk>
   1d580:	4040      	eors	r0, r0
   1d582:	f380 8811 	msr	BASEPRI, r0
   1d586:	f04f 0003 	mov.w	r0, #3
   1d58a:	df02      	svc	2
   1d58c:	e7ce      	b.n	1d52c <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1d58e:	4a08      	ldr	r2, [pc, #32]	; (1d5b0 <lll_done+0x90>)
   1d590:	490b      	ldr	r1, [pc, #44]	; (1d5c0 <lll_done+0xa0>)
   1d592:	4809      	ldr	r0, [pc, #36]	; (1d5b8 <lll_done+0x98>)
   1d594:	f240 133d 	movw	r3, #317	; 0x13d
   1d598:	f00a fd06 	bl	27fa8 <printk>
   1d59c:	4040      	eors	r0, r0
   1d59e:	f380 8811 	msr	BASEPRI, r0
   1d5a2:	f04f 0003 	mov.w	r0, #3
   1d5a6:	df02      	svc	2
   1d5a8:	e7cd      	b.n	1d546 <lll_done+0x26>
   1d5aa:	bf00      	nop
   1d5ac:	20003270 	.word	0x20003270
   1d5b0:	00030b5c 	.word	0x00030b5c
   1d5b4:	00030c70 	.word	0x00030c70
   1d5b8:	0002fedc 	.word	0x0002fedc
   1d5bc:	00030c4c 	.word	0x00030c4c
   1d5c0:	00030c5c 	.word	0x00030c5c

0001d5c4 <lll_is_done>:
	*is_resume = (param != event.curr.param);
   1d5c4:	4a05      	ldr	r2, [pc, #20]	; (1d5dc <lll_is_done+0x18>)
   1d5c6:	6813      	ldr	r3, [r2, #0]
	return !event.curr.abort_cb;
   1d5c8:	6892      	ldr	r2, [r2, #8]
	*is_resume = (param != event.curr.param);
   1d5ca:	1a1b      	subs	r3, r3, r0
   1d5cc:	bf18      	it	ne
   1d5ce:	2301      	movne	r3, #1
}
   1d5d0:	fab2 f082 	clz	r0, r2
	*is_resume = (param != event.curr.param);
   1d5d4:	700b      	strb	r3, [r1, #0]
}
   1d5d6:	0940      	lsrs	r0, r0, #5
   1d5d8:	4770      	bx	lr
   1d5da:	bf00      	nop
   1d5dc:	20003270 	.word	0x20003270

0001d5e0 <lll_is_abort_cb>:
}
   1d5e0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1d5e4:	4770      	bx	lr
   1d5e6:	bf00      	nop

0001d5e8 <lll_event_offset_get>:
		return MAX(ull->ticks_active_to_start,
   1d5e8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   1d5ec:	2a00      	cmp	r2, #0
   1d5ee:	db04      	blt.n	1d5fa <lll_event_offset_get+0x12>
		return MAX(ull->ticks_active_to_start,
   1d5f0:	429a      	cmp	r2, r3
   1d5f2:	bf38      	it	cc
   1d5f4:	461a      	movcc	r2, r3
   1d5f6:	4610      	mov	r0, r2
}
   1d5f8:	4770      	bx	lr
		return MAX(ull->ticks_active_to_start,
   1d5fa:	68c0      	ldr	r0, [r0, #12]
   1d5fc:	4298      	cmp	r0, r3
   1d5fe:	bf38      	it	cc
   1d600:	4618      	movcc	r0, r3
   1d602:	4770      	bx	lr

0001d604 <lll_preempt_calc>:
{
   1d604:	b510      	push	{r4, lr}
   1d606:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1d608:	f7f4 ff46 	bl	12498 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   1d60c:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   1d60e:	0203      	lsls	r3, r0, #8
   1d610:	d405      	bmi.n	1d61e <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1d612:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   1d614:	2809      	cmp	r0, #9
   1d616:	bf94      	ite	ls
   1d618:	2000      	movls	r0, #0
   1d61a:	2001      	movhi	r0, #1
}
   1d61c:	bd10      	pop	{r4, pc}
		return 0;
   1d61e:	2000      	movs	r0, #0
}
   1d620:	bd10      	pop	{r4, pc}
   1d622:	bf00      	nop

0001d624 <lll_chan_set>:
	switch (chan) {
   1d624:	2826      	cmp	r0, #38	; 0x26
{
   1d626:	b510      	push	{r4, lr}
   1d628:	4604      	mov	r4, r0
	switch (chan) {
   1d62a:	d01c      	beq.n	1d666 <lll_chan_set+0x42>
   1d62c:	2827      	cmp	r0, #39	; 0x27
   1d62e:	d012      	beq.n	1d656 <lll_chan_set+0x32>
   1d630:	2825      	cmp	r0, #37	; 0x25
   1d632:	d008      	beq.n	1d646 <lll_chan_set+0x22>
		if (chan < 11) {
   1d634:	280a      	cmp	r0, #10
   1d636:	d91e      	bls.n	1d676 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1d638:	2827      	cmp	r0, #39	; 0x27
   1d63a:	d821      	bhi.n	1d680 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1d63c:	3003      	adds	r0, #3
   1d63e:	0040      	lsls	r0, r0, #1
   1d640:	f002 faf4 	bl	1fc2c <radio_freq_chan_set>
   1d644:	e002      	b.n	1d64c <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1d646:	2002      	movs	r0, #2
   1d648:	f002 faf0 	bl	1fc2c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1d64c:	4620      	mov	r0, r4
}
   1d64e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1d652:	f002 baf1 	b.w	1fc38 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1d656:	2050      	movs	r0, #80	; 0x50
   1d658:	f002 fae8 	bl	1fc2c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1d65c:	4620      	mov	r0, r4
}
   1d65e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1d662:	f002 bae9 	b.w	1fc38 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1d666:	201a      	movs	r0, #26
   1d668:	f002 fae0 	bl	1fc2c <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1d66c:	4620      	mov	r0, r4
}
   1d66e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1d672:	f002 bae1 	b.w	1fc38 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1d676:	3002      	adds	r0, #2
   1d678:	0040      	lsls	r0, r0, #1
   1d67a:	f002 fad7 	bl	1fc2c <radio_freq_chan_set>
   1d67e:	e7e5      	b.n	1d64c <lll_chan_set+0x28>
			LL_ASSERT(0);
   1d680:	4a06      	ldr	r2, [pc, #24]	; (1d69c <lll_chan_set+0x78>)
   1d682:	4907      	ldr	r1, [pc, #28]	; (1d6a0 <lll_chan_set+0x7c>)
   1d684:	4807      	ldr	r0, [pc, #28]	; (1d6a4 <lll_chan_set+0x80>)
   1d686:	f240 13df 	movw	r3, #479	; 0x1df
   1d68a:	f00a fc8d 	bl	27fa8 <printk>
   1d68e:	4040      	eors	r0, r0
   1d690:	f380 8811 	msr	BASEPRI, r0
   1d694:	f04f 0003 	mov.w	r0, #3
   1d698:	df02      	svc	2
   1d69a:	e7d7      	b.n	1d64c <lll_chan_set+0x28>
   1d69c:	00030b5c 	.word	0x00030b5c
   1d6a0:	0002ff74 	.word	0x0002ff74
   1d6a4:	0002fedc 	.word	0x0002fedc

0001d6a8 <lll_radio_tx_ready_delay_get>:
	return radio_tx_ready_delay_get(phy, flags);
   1d6a8:	f002 bb24 	b.w	1fcf4 <radio_tx_ready_delay_get>

0001d6ac <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1d6ac:	f002 bb2a 	b.w	1fd04 <radio_rx_ready_delay_get>

0001d6b0 <lll_isr_tx_status_reset>:
{
   1d6b0:	b508      	push	{r3, lr}
	radio_status_reset();
   1d6b2:	f002 fb4f 	bl	1fd54 <radio_status_reset>
}
   1d6b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1d6ba:	f002 bcb3 	b.w	20024 <radio_tmr_status_reset>
   1d6be:	bf00      	nop

0001d6c0 <lll_isr_rx_status_reset>:
{
   1d6c0:	b508      	push	{r3, lr}
	radio_status_reset();
   1d6c2:	f002 fb47 	bl	1fd54 <radio_status_reset>
	radio_tmr_status_reset();
   1d6c6:	f002 fcad 	bl	20024 <radio_tmr_status_reset>
}
   1d6ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1d6ce:	f002 bc55 	b.w	1ff7c <radio_rssi_status_reset>
   1d6d2:	bf00      	nop

0001d6d4 <lll_isr_status_reset>:
{
   1d6d4:	b508      	push	{r3, lr}
	radio_status_reset();
   1d6d6:	f002 fb3d 	bl	1fd54 <radio_status_reset>
	radio_tmr_status_reset();
   1d6da:	f002 fca3 	bl	20024 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1d6de:	f002 fc89 	bl	1fff4 <radio_filter_status_reset>
	radio_ar_status_reset();
   1d6e2:	f002 fe93 	bl	2040c <radio_ar_status_reset>
}
   1d6e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1d6ea:	f002 bc47 	b.w	1ff7c <radio_rssi_status_reset>
   1d6ee:	bf00      	nop

0001d6f0 <lll_isr_cleanup>:
{
   1d6f0:	b508      	push	{r3, lr}
   1d6f2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1d6f4:	4815      	ldr	r0, [pc, #84]	; (1d74c <lll_isr_cleanup+0x5c>)
   1d6f6:	f002 fa1d 	bl	1fb34 <radio_isr_set>
	if (!radio_is_idle()) {
   1d6fa:	f002 fb4b 	bl	1fd94 <radio_is_idle>
   1d6fe:	b150      	cbz	r0, 1d716 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1d700:	f002 fd66 	bl	201d0 <radio_tmr_stop>
	err = lll_hfclock_off();
   1d704:	f000 f9a4 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d708:	2800      	cmp	r0, #0
   1d70a:	db0c      	blt.n	1d726 <lll_isr_cleanup+0x36>
}
   1d70c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1d710:	2000      	movs	r0, #0
   1d712:	f7ff bf05 	b.w	1d520 <lll_done>
		radio_disable();
   1d716:	f002 fb09 	bl	1fd2c <radio_disable>
	radio_tmr_stop();
   1d71a:	f002 fd59 	bl	201d0 <radio_tmr_stop>
	err = lll_hfclock_off();
   1d71e:	f000 f997 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d722:	2800      	cmp	r0, #0
   1d724:	daf2      	bge.n	1d70c <lll_isr_cleanup+0x1c>
   1d726:	4a0a      	ldr	r2, [pc, #40]	; (1d750 <lll_isr_cleanup+0x60>)
   1d728:	490a      	ldr	r1, [pc, #40]	; (1d754 <lll_isr_cleanup+0x64>)
   1d72a:	480b      	ldr	r0, [pc, #44]	; (1d758 <lll_isr_cleanup+0x68>)
   1d72c:	f240 2342 	movw	r3, #578	; 0x242
   1d730:	f00a fc3a 	bl	27fa8 <printk>
   1d734:	4040      	eors	r0, r0
   1d736:	f380 8811 	msr	BASEPRI, r0
   1d73a:	f04f 0003 	mov.w	r0, #3
   1d73e:	df02      	svc	2
	lll_done(NULL);
   1d740:	2000      	movs	r0, #0
}
   1d742:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1d746:	f7ff beeb 	b.w	1d520 <lll_done>
   1d74a:	bf00      	nop
   1d74c:	0001d07d 	.word	0x0001d07d
   1d750:	00030b5c 	.word	0x00030b5c
   1d754:	00030c78 	.word	0x00030c78
   1d758:	0002fedc 	.word	0x0002fedc

0001d75c <lll_isr_abort>:
{
   1d75c:	b510      	push	{r4, lr}
   1d75e:	4604      	mov	r4, r0
	radio_status_reset();
   1d760:	f002 faf8 	bl	1fd54 <radio_status_reset>
	radio_tmr_status_reset();
   1d764:	f002 fc5e 	bl	20024 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1d768:	f002 fc44 	bl	1fff4 <radio_filter_status_reset>
	radio_ar_status_reset();
   1d76c:	f002 fe4e 	bl	2040c <radio_ar_status_reset>
	radio_rssi_status_reset();
   1d770:	f002 fc04 	bl	1ff7c <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1d774:	4620      	mov	r0, r4
}
   1d776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1d77a:	f7ff bfb9 	b.w	1d6f0 <lll_isr_cleanup>
   1d77e:	bf00      	nop

0001d780 <lll_isr_early_abort>:
{
   1d780:	b508      	push	{r3, lr}
   1d782:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1d784:	4813      	ldr	r0, [pc, #76]	; (1d7d4 <lll_isr_early_abort+0x54>)
   1d786:	f002 f9d5 	bl	1fb34 <radio_isr_set>
	if (!radio_is_idle()) {
   1d78a:	f002 fb03 	bl	1fd94 <radio_is_idle>
   1d78e:	b140      	cbz	r0, 1d7a2 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   1d790:	f000 f95e 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d794:	2800      	cmp	r0, #0
   1d796:	db0a      	blt.n	1d7ae <lll_isr_early_abort+0x2e>
}
   1d798:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1d79c:	2000      	movs	r0, #0
   1d79e:	f7ff bebf 	b.w	1d520 <lll_done>
		radio_disable();
   1d7a2:	f002 fac3 	bl	1fd2c <radio_disable>
	err = lll_hfclock_off();
   1d7a6:	f000 f953 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1d7aa:	2800      	cmp	r0, #0
   1d7ac:	daf4      	bge.n	1d798 <lll_isr_early_abort+0x18>
   1d7ae:	4a0a      	ldr	r2, [pc, #40]	; (1d7d8 <lll_isr_early_abort+0x58>)
   1d7b0:	490a      	ldr	r1, [pc, #40]	; (1d7dc <lll_isr_early_abort+0x5c>)
   1d7b2:	480b      	ldr	r0, [pc, #44]	; (1d7e0 <lll_isr_early_abort+0x60>)
   1d7b4:	f240 2351 	movw	r3, #593	; 0x251
   1d7b8:	f00a fbf6 	bl	27fa8 <printk>
   1d7bc:	4040      	eors	r0, r0
   1d7be:	f380 8811 	msr	BASEPRI, r0
   1d7c2:	f04f 0003 	mov.w	r0, #3
   1d7c6:	df02      	svc	2
	lll_done(NULL);
   1d7c8:	2000      	movs	r0, #0
}
   1d7ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1d7ce:	f7ff bea7 	b.w	1d520 <lll_done>
   1d7d2:	bf00      	nop
   1d7d4:	0001d07d 	.word	0x0001d07d
   1d7d8:	00030b5c 	.word	0x00030b5c
   1d7dc:	00030c78 	.word	0x00030c78
   1d7e0:	0002fedc 	.word	0x0002fedc

0001d7e4 <lll_prepare_resolve>:
{
   1d7e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d7e8:	b084      	sub	sp, #16
   1d7ea:	4606      	mov	r6, r0
   1d7ec:	461d      	mov	r5, r3
	p = ull_prepare_dequeue_iter(&idx);
   1d7ee:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1d7f2:	23ff      	movs	r3, #255	; 0xff
{
   1d7f4:	f89d 9030 	ldrb.w	r9, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   1d7f8:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1d7fc:	460f      	mov	r7, r1
   1d7fe:	4690      	mov	r8, r2
	p = ull_prepare_dequeue_iter(&idx);
   1d800:	f7f7 fc0c 	bl	1501c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1d804:	4604      	mov	r4, r0
   1d806:	b920      	cbnz	r0, 1d812 <lll_prepare_resolve+0x2e>
   1d808:	e032      	b.n	1d870 <lll_prepare_resolve+0x8c>
		p = ull_prepare_dequeue_iter(&idx);
   1d80a:	f7f7 fc07 	bl	1501c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1d80e:	4604      	mov	r4, r0
   1d810:	b370      	cbz	r0, 1d870 <lll_prepare_resolve+0x8c>
   1d812:	f894 c01c 	ldrb.w	ip, [r4, #28]
   1d816:	f01c 0f03 	tst.w	ip, #3
		p = ull_prepare_dequeue_iter(&idx);
   1d81a:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1d81e:	d1f4      	bne.n	1d80a <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   1d820:	f8df a130 	ldr.w	sl, [pc, #304]	; 1d954 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1d824:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d828:	bb4b      	cbnz	r3, 1d87e <lll_prepare_resolve+0x9a>
	    (p && is_resume)) {
   1d82a:	f1b9 0f00 	cmp.w	r9, #0
   1d82e:	d048      	beq.n	1d8c2 <lll_prepare_resolve+0xde>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1d830:	f8cd 9000 	str.w	r9, [sp]
   1d834:	4643      	mov	r3, r8
   1d836:	462a      	mov	r2, r5
   1d838:	4639      	mov	r1, r7
   1d83a:	4630      	mov	r0, r6
   1d83c:	f7f7 fba6 	bl	14f8c <ull_prepare_enqueue>
		LL_ASSERT(next);
   1d840:	b980      	cbnz	r0, 1d864 <lll_prepare_resolve+0x80>
   1d842:	4a45      	ldr	r2, [pc, #276]	; (1d958 <lll_prepare_resolve+0x174>)
   1d844:	4945      	ldr	r1, [pc, #276]	; (1d95c <lll_prepare_resolve+0x178>)
   1d846:	4846      	ldr	r0, [pc, #280]	; (1d960 <lll_prepare_resolve+0x17c>)
   1d848:	f240 238d 	movw	r3, #653	; 0x28d
   1d84c:	f00a fbac 	bl	27fa8 <printk>
   1d850:	4040      	eors	r0, r0
   1d852:	f380 8811 	msr	BASEPRI, r0
   1d856:	f04f 0003 	mov.w	r0, #3
   1d85a:	df02      	svc	2
   1d85c:	2000      	movs	r0, #0
		if (is_resume) {
   1d85e:	f1b9 0f00 	cmp.w	r9, #0
   1d862:	d019      	beq.n	1d898 <lll_prepare_resolve+0xb4>
		return -EINPROGRESS;
   1d864:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   1d868:	4620      	mov	r0, r4
   1d86a:	b004      	add	sp, #16
   1d86c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    event.curr.abort_cb ||
   1d870:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 1d954 <lll_prepare_resolve+0x170>
	if ((!is_dequeue && !is_done_sync()) ||
   1d874:	f8da 3008 	ldr.w	r3, [sl, #8]
   1d878:	2b00      	cmp	r3, #0
   1d87a:	d031      	beq.n	1d8e0 <lll_prepare_resolve+0xfc>
   1d87c:	2400      	movs	r4, #0
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1d87e:	f8cd 9000 	str.w	r9, [sp]
   1d882:	4643      	mov	r3, r8
   1d884:	462a      	mov	r2, r5
   1d886:	4639      	mov	r1, r7
   1d888:	4630      	mov	r0, r6
   1d88a:	f7f7 fb7f 	bl	14f8c <ull_prepare_enqueue>
		LL_ASSERT(next);
   1d88e:	2800      	cmp	r0, #0
   1d890:	d0d7      	beq.n	1d842 <lll_prepare_resolve+0x5e>
		if (is_resume) {
   1d892:	f1b9 0f00 	cmp.w	r9, #0
   1d896:	d1e5      	bne.n	1d864 <lll_prepare_resolve+0x80>
		ret  = preempt_ticker_start(p, next);
   1d898:	4601      	mov	r1, r0
   1d89a:	4620      	mov	r0, r4
   1d89c:	f7ff fc70 	bl	1d180 <preempt_ticker_start>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d8a0:	f030 0302 	bics.w	r3, r0, #2
   1d8a4:	d0de      	beq.n	1d864 <lll_prepare_resolve+0x80>
   1d8a6:	4a2c      	ldr	r2, [pc, #176]	; (1d958 <lll_prepare_resolve+0x174>)
   1d8a8:	492e      	ldr	r1, [pc, #184]	; (1d964 <lll_prepare_resolve+0x180>)
   1d8aa:	482d      	ldr	r0, [pc, #180]	; (1d960 <lll_prepare_resolve+0x17c>)
   1d8ac:	f44f 7326 	mov.w	r3, #664	; 0x298
   1d8b0:	f00a fb7a 	bl	27fa8 <printk>
   1d8b4:	4040      	eors	r0, r0
   1d8b6:	f380 8811 	msr	BASEPRI, r0
   1d8ba:	f04f 0003 	mov.w	r0, #3
   1d8be:	df02      	svc	2
   1d8c0:	e7d0      	b.n	1d864 <lll_prepare_resolve+0x80>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   1d8c2:	42ac      	cmp	r4, r5
   1d8c4:	d00c      	beq.n	1d8e0 <lll_prepare_resolve+0xfc>
   1d8c6:	4a24      	ldr	r2, [pc, #144]	; (1d958 <lll_prepare_resolve+0x174>)
   1d8c8:	4927      	ldr	r1, [pc, #156]	; (1d968 <lll_prepare_resolve+0x184>)
   1d8ca:	4825      	ldr	r0, [pc, #148]	; (1d960 <lll_prepare_resolve+0x17c>)
   1d8cc:	f240 23be 	movw	r3, #702	; 0x2be
   1d8d0:	f00a fb6a 	bl	27fa8 <printk>
   1d8d4:	4040      	eors	r0, r0
   1d8d6:	f380 8811 	msr	BASEPRI, r0
   1d8da:	f04f 0003 	mov.w	r0, #3
   1d8de:	df02      	svc	2
	event.curr.param = prepare_param->param;
   1d8e0:	68eb      	ldr	r3, [r5, #12]
   1d8e2:	f8ca 3000 	str.w	r3, [sl]
	event.curr.abort_cb = abort_cb;
   1d8e6:	e9ca 6701 	strd	r6, r7, [sl, #4]
	err = prepare_cb(prepare_param);
   1d8ea:	4628      	mov	r0, r5
   1d8ec:	47c0      	blx	r8
   1d8ee:	4604      	mov	r4, r0
	ret = preempt_ticker_stop();
   1d8f0:	f7ff fc06 	bl	1d100 <preempt_ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d8f4:	f030 0302 	bics.w	r3, r0, #2
   1d8f8:	d11e      	bne.n	1d938 <lll_prepare_resolve+0x154>
		p = ull_prepare_dequeue_iter(&idx);
   1d8fa:	f10d 000f 	add.w	r0, sp, #15
   1d8fe:	f7f7 fb8d 	bl	1501c <ull_prepare_dequeue_iter>
		if (!p) {
   1d902:	2800      	cmp	r0, #0
   1d904:	d0b0      	beq.n	1d868 <lll_prepare_resolve+0x84>
	} while (p->is_aborted || p->is_resume);
   1d906:	7f03      	ldrb	r3, [r0, #28]
   1d908:	f013 0303 	ands.w	r3, r3, #3
   1d90c:	d1f5      	bne.n	1d8fa <lll_prepare_resolve+0x116>
	ret = preempt_ticker_start(NULL, p);
   1d90e:	4601      	mov	r1, r0
   1d910:	4618      	mov	r0, r3
   1d912:	f7ff fc35 	bl	1d180 <preempt_ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d916:	f030 0302 	bics.w	r3, r0, #2
   1d91a:	d0a5      	beq.n	1d868 <lll_prepare_resolve+0x84>
   1d91c:	4a0e      	ldr	r2, [pc, #56]	; (1d958 <lll_prepare_resolve+0x174>)
   1d91e:	4911      	ldr	r1, [pc, #68]	; (1d964 <lll_prepare_resolve+0x180>)
   1d920:	480f      	ldr	r0, [pc, #60]	; (1d960 <lll_prepare_resolve+0x17c>)
   1d922:	f44f 7336 	mov.w	r3, #728	; 0x2d8
   1d926:	f00a fb3f 	bl	27fa8 <printk>
   1d92a:	4040      	eors	r0, r0
   1d92c:	f380 8811 	msr	BASEPRI, r0
   1d930:	f04f 0003 	mov.w	r0, #3
   1d934:	df02      	svc	2
   1d936:	e797      	b.n	1d868 <lll_prepare_resolve+0x84>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1d938:	4a07      	ldr	r2, [pc, #28]	; (1d958 <lll_prepare_resolve+0x174>)
   1d93a:	490a      	ldr	r1, [pc, #40]	; (1d964 <lll_prepare_resolve+0x180>)
   1d93c:	4808      	ldr	r0, [pc, #32]	; (1d960 <lll_prepare_resolve+0x17c>)
   1d93e:	f240 23cb 	movw	r3, #715	; 0x2cb
   1d942:	f00a fb31 	bl	27fa8 <printk>
   1d946:	4040      	eors	r0, r0
   1d948:	f380 8811 	msr	BASEPRI, r0
   1d94c:	f04f 0003 	mov.w	r0, #3
   1d950:	df02      	svc	2
   1d952:	e7d2      	b.n	1d8fa <lll_prepare_resolve+0x116>
   1d954:	20003270 	.word	0x20003270
   1d958:	00030b5c 	.word	0x00030b5c
   1d95c:	00030c84 	.word	0x00030c84
   1d960:	0002fedc 	.word	0x0002fedc
   1d964:	00030448 	.word	0x00030448
   1d968:	00030c8c 	.word	0x00030c8c

0001d96c <clock_ready>:
	z_impl_k_sem_give(sem);
   1d96c:	f101 0010 	add.w	r0, r1, #16
   1d970:	f007 b9a6 	b.w	24cc0 <z_impl_k_sem_give>

0001d974 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1d974:	b570      	push	{r4, r5, r6, lr}
   1d976:	4605      	mov	r5, r0
   1d978:	b08a      	sub	sp, #40	; 0x28
   1d97a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1d97c:	2201      	movs	r2, #1
   1d97e:	2100      	movs	r1, #0
   1d980:	a804      	add	r0, sp, #16
   1d982:	f010 f9ec 	bl	2dd5e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1d986:	4b0f      	ldr	r3, [pc, #60]	; (1d9c4 <blocking_on+0x50>)
   1d988:	9301      	str	r3, [sp, #4]
   1d98a:	2600      	movs	r6, #0
   1d98c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1d98e:	4669      	mov	r1, sp
   1d990:	4628      	mov	r0, r5
   1d992:	9603      	str	r6, [sp, #12]
   1d994:	9302      	str	r3, [sp, #8]
   1d996:	f00a fb83 	bl	280a0 <onoff_request>
	if (err < 0) {
   1d99a:	2800      	cmp	r0, #0
   1d99c:	db10      	blt.n	1d9c0 <blocking_on+0x4c>
   1d99e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1d9a2:	4631      	mov	r1, r6
   1d9a4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1d9a8:	fbe4 0103 	umlal	r0, r1, r4, r3
   1d9ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1d9b0:	2300      	movs	r3, #0
   1d9b2:	f7e3 f931 	bl	c18 <__aeabi_uldivmod>
   1d9b6:	4602      	mov	r2, r0
   1d9b8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1d9ba:	a804      	add	r0, sp, #16
   1d9bc:	f007 f9a6 	bl	24d0c <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1d9c0:	b00a      	add	sp, #40	; 0x28
   1d9c2:	bd70      	pop	{r4, r5, r6, pc}
   1d9c4:	0001d96d 	.word	0x0001d96d

0001d9c8 <lll_clock_init>:

int lll_clock_init(void)
{
   1d9c8:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d9ca:	2001      	movs	r0, #1
   1d9cc:	f003 f9aa 	bl	20d24 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1d9d0:	4904      	ldr	r1, [pc, #16]	; (1d9e4 <lll_clock_init+0x1c>)
   1d9d2:	2300      	movs	r3, #0
   1d9d4:	2401      	movs	r4, #1
   1d9d6:	608c      	str	r4, [r1, #8]
   1d9d8:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1d9da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1d9de:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1d9e0:	f00a bb5e 	b.w	280a0 <onoff_request>
   1d9e4:	2000328c 	.word	0x2000328c

0001d9e8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1d9e8:	4b0c      	ldr	r3, [pc, #48]	; (1da1c <lll_clock_wait+0x34>)
   1d9ea:	781a      	ldrb	r2, [r3, #0]
   1d9ec:	b10a      	cbz	r2, 1d9f2 <lll_clock_wait+0xa>
		return 0;
   1d9ee:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1d9f0:	4770      	bx	lr
{
   1d9f2:	b510      	push	{r4, lr}
	done = true;
   1d9f4:	2001      	movs	r0, #1
   1d9f6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1d9f8:	f003 f994 	bl	20d24 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1d9fc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1da00:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1da02:	f7ff ffb7 	bl	1d974 <blocking_on>
	if (err) {
   1da06:	b938      	cbnz	r0, 1da18 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1da08:	4620      	mov	r0, r4
   1da0a:	f00a fb92 	bl	28132 <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1da0e:	2802      	cmp	r0, #2
		return 0;
   1da10:	bf0c      	ite	eq
   1da12:	2000      	moveq	r0, #0
		return -EIO;
   1da14:	f06f 0004 	mvnne.w	r0, #4
}
   1da18:	bd10      	pop	{r4, pc}
   1da1a:	bf00      	nop
   1da1c:	20003b00 	.word	0x20003b00

0001da20 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1da20:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1da22:	4b0a      	ldr	r3, [pc, #40]	; (1da4c <lll_hfclock_on+0x2c>)
   1da24:	f3bf 8f5b 	dmb	ish
   1da28:	e853 2f00 	ldrex	r2, [r3]
   1da2c:	1c51      	adds	r1, r2, #1
   1da2e:	e843 1000 	strex	r0, r1, [r3]
   1da32:	2800      	cmp	r0, #0
   1da34:	d1f8      	bne.n	1da28 <lll_hfclock_on+0x8>
   1da36:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1da3a:	2a00      	cmp	r2, #0
   1da3c:	dd01      	ble.n	1da42 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1da3e:	2000      	movs	r0, #0
   1da40:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1da42:	f003 f977 	bl	20d34 <z_nrf_clock_bt_ctlr_hf_request>
}
   1da46:	2000      	movs	r0, #0
   1da48:	bd08      	pop	{r3, pc}
   1da4a:	bf00      	nop
   1da4c:	20003288 	.word	0x20003288

0001da50 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1da50:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1da52:	4b0d      	ldr	r3, [pc, #52]	; (1da88 <lll_hfclock_off+0x38>)
   1da54:	681a      	ldr	r2, [r3, #0]
   1da56:	2a00      	cmp	r2, #0
   1da58:	dd12      	ble.n	1da80 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1da5a:	f3bf 8f5b 	dmb	ish
   1da5e:	e853 2f00 	ldrex	r2, [r3]
   1da62:	1e51      	subs	r1, r2, #1
   1da64:	e843 1000 	strex	r0, r1, [r3]
   1da68:	2800      	cmp	r0, #0
   1da6a:	d1f8      	bne.n	1da5e <lll_hfclock_off+0xe>
   1da6c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1da70:	2a01      	cmp	r2, #1
   1da72:	dd01      	ble.n	1da78 <lll_hfclock_off+0x28>
		return 0;
   1da74:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1da76:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1da78:	f003 f972 	bl	20d60 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1da7c:	2000      	movs	r0, #0
}
   1da7e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1da80:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   1da84:	bd08      	pop	{r3, pc}
   1da86:	bf00      	nop
   1da88:	20003288 	.word	0x20003288

0001da8c <lll_clock_sca_local_get>:

uint8_t lll_clock_sca_local_get(void)
{
	return CLOCK_CONTROL_NRF_K32SRC_ACCURACY;
}
   1da8c:	2005      	movs	r0, #5
   1da8e:	4770      	bx	lr

0001da90 <lll_clock_ppm_local_get>:

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1da90:	2032      	movs	r0, #50	; 0x32
   1da92:	4770      	bx	lr

0001da94 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1da94:	4b01      	ldr	r3, [pc, #4]	; (1da9c <lll_clock_ppm_get+0x8>)
}
   1da96:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1da9a:	4770      	bx	lr
   1da9c:	00030cd8 	.word	0x00030cd8

0001daa0 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1daa0:	b510      	push	{r4, lr}
   1daa2:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1daa4:	f7ff fe16 	bl	1d6d4 <lll_isr_status_reset>

	radio_filter_disable();
   1daa8:	f002 fa9a 	bl	1ffe0 <radio_filter_disable>

	lll_isr_cleanup(param);
   1daac:	4620      	mov	r0, r4
}
   1daae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1dab2:	f7ff be1d 	b.w	1d6f0 <lll_isr_cleanup>
   1dab6:	bf00      	nop

0001dab8 <isr_tx>:
{
   1dab8:	b530      	push	{r4, r5, lr}
   1daba:	b083      	sub	sp, #12
   1dabc:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1dabe:	f7ff fdf7 	bl	1d6b0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1dac2:	2096      	movs	r0, #150	; 0x96
   1dac4:	f002 fabe 	bl	20044 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, phy_flags);
   1dac8:	2300      	movs	r3, #0
   1daca:	4618      	mov	r0, r3
   1dacc:	461a      	mov	r2, r3
   1dace:	4619      	mov	r1, r3
   1dad0:	f002 f9d4 	bl	1fe7c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1dad4:	2001      	movs	r0, #1
   1dad6:	f7f7 fa0d 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1dada:	4604      	mov	r4, r0
   1dadc:	2800      	cmp	r0, #0
   1dade:	d043      	beq.n	1db68 <isr_tx+0xb0>
	radio_pkt_rx_set(node_rx->pdu);
   1dae0:	f104 001c 	add.w	r0, r4, #28
   1dae4:	f002 f8fa 	bl	1fcdc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1dae8:	f002 f940 	bl	1fd6c <radio_is_ready>
   1daec:	b9e0      	cbnz	r0, 1db28 <isr_tx+0x70>
	radio_isr_set(isr_rx, param);
   1daee:	4825      	ldr	r0, [pc, #148]	; (1db84 <isr_tx+0xcc>)
   1daf0:	4629      	mov	r1, r5
   1daf2:	f002 f81f 	bl	1fb34 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1daf6:	f7ff fa11 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1dafa:	bb50      	cbnz	r0, 1db52 <isr_tx+0x9a>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1dafc:	f002 fbbc 	bl	20278 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1db00:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1db02:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1db04:	4608      	mov	r0, r1
   1db06:	f002 f8ff 	bl	1fd08 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1db0a:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1db0c:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1db0e:	4608      	mov	r0, r1
   1db10:	f002 f8f6 	bl	1fd00 <radio_tx_chain_delay_get>
   1db14:	442c      	add	r4, r5
   1db16:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1db18:	1a20      	subs	r0, r4, r0
   1db1a:	f002 fb65 	bl	201e8 <radio_tmr_hcto_configure>
}
   1db1e:	b003      	add	sp, #12
   1db20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1db24:	f002 bb9a 	b.w	2025c <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1db28:	4a17      	ldr	r2, [pc, #92]	; (1db88 <isr_tx+0xd0>)
   1db2a:	4918      	ldr	r1, [pc, #96]	; (1db8c <isr_tx+0xd4>)
   1db2c:	4818      	ldr	r0, [pc, #96]	; (1db90 <isr_tx+0xd8>)
   1db2e:	f240 4345 	movw	r3, #1093	; 0x445
   1db32:	f00a fa39 	bl	27fa8 <printk>
   1db36:	4040      	eors	r0, r0
   1db38:	f380 8811 	msr	BASEPRI, r0
   1db3c:	f04f 0003 	mov.w	r0, #3
   1db40:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1db42:	4810      	ldr	r0, [pc, #64]	; (1db84 <isr_tx+0xcc>)
   1db44:	4629      	mov	r1, r5
   1db46:	f001 fff5 	bl	1fb34 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1db4a:	f7ff f9e7 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1db4e:	2800      	cmp	r0, #0
   1db50:	d0d4      	beq.n	1dafc <isr_tx+0x44>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1db52:	f10d 0007 	add.w	r0, sp, #7
   1db56:	f7ff f85b 	bl	1cc10 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1db5a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1db5c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1db5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1db62:	f002 fc19 	bl	20398 <radio_ar_configure>
   1db66:	e7c9      	b.n	1dafc <isr_tx+0x44>
	LL_ASSERT(node_rx);
   1db68:	4a07      	ldr	r2, [pc, #28]	; (1db88 <isr_tx+0xd0>)
   1db6a:	490a      	ldr	r1, [pc, #40]	; (1db94 <isr_tx+0xdc>)
   1db6c:	4808      	ldr	r0, [pc, #32]	; (1db90 <isr_tx+0xd8>)
   1db6e:	f240 4341 	movw	r3, #1089	; 0x441
   1db72:	f00a fa19 	bl	27fa8 <printk>
   1db76:	4040      	eors	r0, r0
   1db78:	f380 8811 	msr	BASEPRI, r0
   1db7c:	f04f 0003 	mov.w	r0, #3
   1db80:	df02      	svc	2
   1db82:	e7ad      	b.n	1dae0 <isr_tx+0x28>
   1db84:	0001e309 	.word	0x0001e309
   1db88:	00030ce8 	.word	0x00030ce8
   1db8c:	00030d3c 	.word	0x00030d3c
   1db90:	0002fedc 	.word	0x0002fedc
   1db94:	00030d34 	.word	0x00030d34

0001db98 <is_abort_cb>:
	if (next != curr) {
   1db98:	4281      	cmp	r1, r0
{
   1db9a:	b508      	push	{r3, lr}
	if (next != curr) {
   1db9c:	d00e      	beq.n	1dbbc <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   1db9e:	7a0b      	ldrb	r3, [r1, #8]
   1dba0:	07db      	lsls	r3, r3, #31
   1dba2:	d402      	bmi.n	1dbaa <is_abort_cb+0x12>
			return -ECANCELED;
   1dba4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1dba8:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1dbaa:	4b13      	ldr	r3, [pc, #76]	; (1dbf8 <is_abort_cb+0x60>)
   1dbac:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   1dbae:	f7ff ff37 	bl	1da20 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1dbb2:	2800      	cmp	r0, #0
   1dbb4:	db0f      	blt.n	1dbd6 <is_abort_cb+0x3e>
   1dbb6:	f06f 000a 	mvn.w	r0, #10
}
   1dbba:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1dbbc:	7b0b      	ldrb	r3, [r1, #12]
   1dbbe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1dbc2:	690b      	ldr	r3, [r1, #16]
   1dbc4:	781b      	ldrb	r3, [r3, #0]
   1dbc6:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1dbca:	2b01      	cmp	r3, #1
   1dbcc:	bf14      	ite	ne
   1dbce:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   1dbd2:	2000      	moveq	r0, #0
}
   1dbd4:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1dbd6:	4a09      	ldr	r2, [pc, #36]	; (1dbfc <is_abort_cb+0x64>)
   1dbd8:	4909      	ldr	r1, [pc, #36]	; (1dc00 <is_abort_cb+0x68>)
   1dbda:	480a      	ldr	r0, [pc, #40]	; (1dc04 <is_abort_cb+0x6c>)
   1dbdc:	f240 33fa 	movw	r3, #1018	; 0x3fa
   1dbe0:	f00a f9e2 	bl	27fa8 <printk>
   1dbe4:	4040      	eors	r0, r0
   1dbe6:	f380 8811 	msr	BASEPRI, r0
   1dbea:	f04f 0003 	mov.w	r0, #3
   1dbee:	df02      	svc	2
   1dbf0:	f06f 000a 	mvn.w	r0, #10
}
   1dbf4:	bd08      	pop	{r3, pc}
   1dbf6:	bf00      	nop
   1dbf8:	0001e125 	.word	0x0001e125
   1dbfc:	00030ce8 	.word	0x00030ce8
   1dc00:	00030c78 	.word	0x00030c78
   1dc04:	0002fedc 	.word	0x0002fedc

0001dc08 <abort_cb>:
{
   1dc08:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1dc0a:	b1d8      	cbz	r0, 1dc44 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1dc0c:	460c      	mov	r4, r1
   1dc0e:	f7ff ff1f 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1dc12:	2800      	cmp	r0, #0
   1dc14:	db04      	blt.n	1dc20 <abort_cb+0x18>
	lll_done(param);
   1dc16:	4620      	mov	r0, r4
}
   1dc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dc1c:	f7ff bc80 	b.w	1d520 <lll_done>
	LL_ASSERT(err >= 0);
   1dc20:	4a0c      	ldr	r2, [pc, #48]	; (1dc54 <abort_cb+0x4c>)
   1dc22:	490d      	ldr	r1, [pc, #52]	; (1dc58 <abort_cb+0x50>)
   1dc24:	480d      	ldr	r0, [pc, #52]	; (1dc5c <abort_cb+0x54>)
   1dc26:	f44f 6384 	mov.w	r3, #1056	; 0x420
   1dc2a:	f00a f9bd 	bl	27fa8 <printk>
   1dc2e:	4040      	eors	r0, r0
   1dc30:	f380 8811 	msr	BASEPRI, r0
   1dc34:	f04f 0003 	mov.w	r0, #3
   1dc38:	df02      	svc	2
	lll_done(param);
   1dc3a:	4620      	mov	r0, r4
}
   1dc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1dc40:	f7ff bc6e 	b.w	1d520 <lll_done>
		radio_isr_set(isr_abort, param);
   1dc44:	4806      	ldr	r0, [pc, #24]	; (1dc60 <abort_cb+0x58>)
   1dc46:	f001 ff75 	bl	1fb34 <radio_isr_set>
}
   1dc4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1dc4e:	f002 b86d 	b.w	1fd2c <radio_disable>
   1dc52:	bf00      	nop
   1dc54:	00030ce8 	.word	0x00030ce8
   1dc58:	00030c78 	.word	0x00030c78
   1dc5c:	0002fedc 	.word	0x0002fedc
   1dc60:	0001daa1 	.word	0x0001daa1

0001dc64 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1dc64:	4b08      	ldr	r3, [pc, #32]	; (1dc88 <lll_adv_init+0x24>)
   1dc66:	2204      	movs	r2, #4
{
   1dc68:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1dc6a:	1898      	adds	r0, r3, r2
   1dc6c:	2128      	movs	r1, #40	; 0x28
   1dc6e:	f7f3 f825 	bl	10cbc <mem_init>
	MFIFO_INIT(pdu_free);
   1dc72:	4b06      	ldr	r3, [pc, #24]	; (1dc8c <lll_adv_init+0x28>)
   1dc74:	2400      	movs	r4, #0
   1dc76:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dc78:	2202      	movs	r2, #2
   1dc7a:	4621      	mov	r1, r4
   1dc7c:	4804      	ldr	r0, [pc, #16]	; (1dc90 <lll_adv_init+0x2c>)
   1dc7e:	f010 f86e 	bl	2dd5e <z_impl_k_sem_init>
}
   1dc82:	4620      	mov	r0, r4
   1dc84:	bd10      	pop	{r4, pc}
   1dc86:	bf00      	nop
   1dc88:	2000329c 	.word	0x2000329c
   1dc8c:	20000660 	.word	0x20000660
   1dc90:	20003340 	.word	0x20003340

0001dc94 <lll_adv_reset>:
   1dc94:	4b08      	ldr	r3, [pc, #32]	; (1dcb8 <lll_adv_reset+0x24>)
   1dc96:	2204      	movs	r2, #4
   1dc98:	b510      	push	{r4, lr}
   1dc9a:	1898      	adds	r0, r3, r2
   1dc9c:	2128      	movs	r1, #40	; 0x28
   1dc9e:	f7f3 f80d 	bl	10cbc <mem_init>
   1dca2:	4b06      	ldr	r3, [pc, #24]	; (1dcbc <lll_adv_reset+0x28>)
   1dca4:	2400      	movs	r4, #0
   1dca6:	805c      	strh	r4, [r3, #2]
   1dca8:	2202      	movs	r2, #2
   1dcaa:	4621      	mov	r1, r4
   1dcac:	4804      	ldr	r0, [pc, #16]	; (1dcc0 <lll_adv_reset+0x2c>)
   1dcae:	f010 f856 	bl	2dd5e <z_impl_k_sem_init>
   1dcb2:	4620      	mov	r0, r4
   1dcb4:	bd10      	pop	{r4, pc}
   1dcb6:	bf00      	nop
   1dcb8:	2000329c 	.word	0x2000329c
   1dcbc:	20000660 	.word	0x20000660
   1dcc0:	20003340 	.word	0x20003340

0001dcc4 <lll_adv_data_init>:
{
   1dcc4:	b510      	push	{r4, lr}
   1dcc6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1dcc8:	4805      	ldr	r0, [pc, #20]	; (1dce0 <lll_adv_data_init+0x1c>)
   1dcca:	f7f3 f81b 	bl	10d04 <mem_acquire>
	if (!p) {
   1dcce:	b120      	cbz	r0, 1dcda <lll_adv_data_init+0x16>
   1dcd0:	4603      	mov	r3, r0
	p->len = 0U;
   1dcd2:	2000      	movs	r0, #0
   1dcd4:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1dcd6:	6063      	str	r3, [r4, #4]
}
   1dcd8:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1dcda:	f06f 000b 	mvn.w	r0, #11
}
   1dcde:	bd10      	pop	{r4, pc}
   1dce0:	2000329c 	.word	0x2000329c

0001dce4 <lll_adv_data_reset>:
{
   1dce4:	4603      	mov	r3, r0
	pdu->first = 0U;
   1dce6:	2000      	movs	r0, #0
   1dce8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1dcea:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1dcec:	6098      	str	r0, [r3, #8]
}
   1dcee:	4770      	bx	lr

0001dcf0 <lll_adv_pdu_alloc_pdu_adv>:
{
   1dcf0:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1dcf2:	4c35      	ldr	r4, [pc, #212]	; (1ddc8 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   1dcf4:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1dcf6:	78e1      	ldrb	r1, [r4, #3]
   1dcf8:	7823      	ldrb	r3, [r4, #0]
   1dcfa:	4291      	cmp	r1, r2
   1dcfc:	d003      	beq.n	1dd06 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   1dcfe:	fb02 4303 	mla	r3, r2, r3, r4
   1dd02:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1dd04:	b935      	cbnz	r5, 1dd14 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   1dd06:	4831      	ldr	r0, [pc, #196]	; (1ddcc <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   1dd08:	f7f2 fffc 	bl	10d04 <mem_acquire>
	if (p) {
   1dd0c:	4605      	mov	r5, r0
   1dd0e:	b1a0      	cbz	r0, 1dd3a <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   1dd10:	4628      	mov	r0, r5
   1dd12:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   1dd14:	482e      	ldr	r0, [pc, #184]	; (1ddd0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1dd16:	2200      	movs	r2, #0
   1dd18:	2300      	movs	r3, #0
   1dd1a:	f006 fff7 	bl	24d0c <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1dd1e:	bb40      	cbnz	r0, 1dd72 <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   1dd20:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1dd22:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   1dd24:	7861      	ldrb	r1, [r4, #1]
   1dd26:	429a      	cmp	r2, r3
   1dd28:	d0f2      	beq.n	1dd10 <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   1dd2a:	3301      	adds	r3, #1
   1dd2c:	b2db      	uxtb	r3, r3
		_first = 0U;
   1dd2e:	4299      	cmp	r1, r3
   1dd30:	bf08      	it	eq
   1dd32:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1dd34:	70a3      	strb	r3, [r4, #2]
}
   1dd36:	4628      	mov	r0, r5
   1dd38:	bd38      	pop	{r3, r4, r5, pc}
   1dd3a:	4825      	ldr	r0, [pc, #148]	; (1ddd0 <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   1dd3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1dd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1dd44:	f006 ffe2 	bl	24d0c <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1dd48:	2800      	cmp	r0, #0
   1dd4a:	d12e      	bne.n	1ddaa <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   1dd4c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   1dd4e:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1dd50:	7822      	ldrb	r2, [r4, #0]
   1dd52:	7860      	ldrb	r0, [r4, #1]
   1dd54:	4299      	cmp	r1, r3
   1dd56:	d01a      	beq.n	1dd8e <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   1dd58:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   1dd5c:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1dd5e:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   1dd60:	b2db      	uxtb	r3, r3
		_first = 0U;
   1dd62:	4298      	cmp	r0, r3
   1dd64:	bf08      	it	eq
   1dd66:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1dd68:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   1dd6a:	b182      	cbz	r2, 1dd8e <lll_adv_pdu_alloc_pdu_adv+0x9e>
   1dd6c:	4615      	mov	r5, r2
}
   1dd6e:	4628      	mov	r0, r5
   1dd70:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   1dd72:	4a18      	ldr	r2, [pc, #96]	; (1ddd4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1dd74:	4918      	ldr	r1, [pc, #96]	; (1ddd8 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1dd76:	4819      	ldr	r0, [pc, #100]	; (1dddc <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1dd78:	f240 1397 	movw	r3, #407	; 0x197
   1dd7c:	f00a f914 	bl	27fa8 <printk>
   1dd80:	4040      	eors	r0, r0
   1dd82:	f380 8811 	msr	BASEPRI, r0
   1dd86:	f04f 0003 	mov.w	r0, #3
   1dd8a:	df02      	svc	2
   1dd8c:	e7c8      	b.n	1dd20 <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   1dd8e:	4a11      	ldr	r2, [pc, #68]	; (1ddd4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1dd90:	4913      	ldr	r1, [pc, #76]	; (1dde0 <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   1dd92:	4812      	ldr	r0, [pc, #72]	; (1dddc <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1dd94:	f240 13ad 	movw	r3, #429	; 0x1ad
   1dd98:	f00a f906 	bl	27fa8 <printk>
   1dd9c:	4040      	eors	r0, r0
   1dd9e:	f380 8811 	msr	BASEPRI, r0
   1dda2:	f04f 0003 	mov.w	r0, #3
   1dda6:	df02      	svc	2
   1dda8:	e7b2      	b.n	1dd10 <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   1ddaa:	4a0a      	ldr	r2, [pc, #40]	; (1ddd4 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   1ddac:	490a      	ldr	r1, [pc, #40]	; (1ddd8 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   1ddae:	480b      	ldr	r0, [pc, #44]	; (1dddc <lll_adv_pdu_alloc_pdu_adv+0xec>)
   1ddb0:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   1ddb4:	f00a f8f8 	bl	27fa8 <printk>
   1ddb8:	4040      	eors	r0, r0
   1ddba:	f380 8811 	msr	BASEPRI, r0
   1ddbe:	f04f 0003 	mov.w	r0, #3
   1ddc2:	df02      	svc	2
   1ddc4:	e7c2      	b.n	1dd4c <lll_adv_pdu_alloc_pdu_adv+0x5c>
   1ddc6:	bf00      	nop
   1ddc8:	20000660 	.word	0x20000660
   1ddcc:	2000329c 	.word	0x2000329c
   1ddd0:	20003340 	.word	0x20003340
   1ddd4:	00030ce8 	.word	0x00030ce8
   1ddd8:	00030254 	.word	0x00030254
   1dddc:	0002fedc 	.word	0x0002fedc
   1dde0:	00030d50 	.word	0x00030d50

0001dde4 <lll_adv_pdu_alloc>:
{
   1dde4:	b510      	push	{r4, lr}
	first = pdu->first;
   1dde6:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1dde8:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1ddea:	429a      	cmp	r2, r3
   1ddec:	d014      	beq.n	1de18 <lll_adv_pdu_alloc+0x34>
		pdu->last = first;
   1ddee:	b2d4      	uxtb	r4, r2
   1ddf0:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1ddf2:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1ddf4:	4294      	cmp	r4, r2
   1ddf6:	d004      	beq.n	1de02 <lll_adv_pdu_alloc+0x1e>
			last++;
   1ddf8:	1c5a      	adds	r2, r3, #1
			pdu->last = last;
   1ddfa:	7043      	strb	r3, [r0, #1]
			last++;
   1ddfc:	b2d3      	uxtb	r3, r2
			if (last == DOUBLE_BUFFER_SIZE) {
   1ddfe:	2b02      	cmp	r3, #2
   1de00:	d00e      	beq.n	1de20 <lll_adv_pdu_alloc+0x3c>
	p = (void *)pdu->pdu[last];
   1de02:	461c      	mov	r4, r3
	*idx = last;
   1de04:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1de08:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1de0a:	6860      	ldr	r0, [r4, #4]
	if (p) {
   1de0c:	b100      	cbz	r0, 1de10 <lll_adv_pdu_alloc+0x2c>
}
   1de0e:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   1de10:	f7ff ff6e 	bl	1dcf0 <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   1de14:	6060      	str	r0, [r4, #4]
}
   1de16:	bd10      	pop	{r4, pc}
		last++;
   1de18:	3301      	adds	r3, #1
   1de1a:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1de1c:	2b02      	cmp	r3, #2
   1de1e:	d1f0      	bne.n	1de02 <lll_adv_pdu_alloc+0x1e>
{
   1de20:	2400      	movs	r4, #0
			last = 0U;
   1de22:	4623      	mov	r3, r4
   1de24:	e7ee      	b.n	1de04 <lll_adv_pdu_alloc+0x20>
   1de26:	bf00      	nop

0001de28 <lll_adv_pdu_latest_get>:
{
   1de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1de2a:	4604      	mov	r4, r0
	first = pdu->first;
   1de2c:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1de2e:	7840      	ldrb	r0, [r0, #1]
   1de30:	4298      	cmp	r0, r3
   1de32:	d028      	beq.n	1de86 <lll_adv_pdu_latest_get+0x5e>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1de34:	4a16      	ldr	r2, [pc, #88]	; (1de90 <lll_adv_pdu_latest_get+0x68>)
   1de36:	460e      	mov	r6, r1
   1de38:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   1de3a:	f892 c001 	ldrb.w	ip, [r2, #1]
   1de3e:	b2dd      	uxtb	r5, r3
	last = last + 1;
   1de40:	1c4b      	adds	r3, r1, #1
   1de42:	b2db      	uxtb	r3, r3
		last = 0U;
   1de44:	459c      	cmp	ip, r3
   1de46:	bf08      	it	eq
   1de48:	2300      	moveq	r3, #0
   1de4a:	f892 c002 	ldrb.w	ip, [r2, #2]
   1de4e:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	if (last == first) {
   1de52:	459c      	cmp	ip, r3
		p = pdu->pdu[pdu_idx];
   1de54:	6878      	ldr	r0, [r7, #4]
   1de56:	d009      	beq.n	1de6c <lll_adv_pdu_latest_get+0x44>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1de58:	f892 c000 	ldrb.w	ip, [r2]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1de5c:	fb0c 2101 	mla	r1, ip, r1, r2
   1de60:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1de62:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   1de64:	480b      	ldr	r0, [pc, #44]	; (1de94 <lll_adv_pdu_latest_get+0x6c>)
   1de66:	f006 ff2b 	bl	24cc0 <z_impl_k_sem_give>
			p = next;
   1de6a:	2000      	movs	r0, #0
		first += 1U;
   1de6c:	1c6b      	adds	r3, r5, #1
   1de6e:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1de70:	2b02      	cmp	r3, #2
		pdu->pdu[pdu_idx] = p;
   1de72:	6078      	str	r0, [r7, #4]
		if (first == DOUBLE_BUFFER_SIZE) {
   1de74:	bf04      	itt	eq
   1de76:	2000      	moveq	r0, #0
			first = 0U;
   1de78:	4603      	moveq	r3, r0
		*is_modified = 1U;
   1de7a:	f04f 0201 	mov.w	r2, #1
		pdu->first = first;
   1de7e:	7023      	strb	r3, [r4, #0]
	return (void *)pdu->pdu[first];
   1de80:	bf18      	it	ne
   1de82:	4618      	movne	r0, r3
		*is_modified = 1U;
   1de84:	7032      	strb	r2, [r6, #0]
	return (void *)pdu->pdu[first];
   1de86:	eb04 0480 	add.w	r4, r4, r0, lsl #2
}
   1de8a:	6860      	ldr	r0, [r4, #4]
   1de8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1de8e:	bf00      	nop
   1de90:	20000660 	.word	0x20000660
   1de94:	20003340 	.word	0x20003340

0001de98 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1de98:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1de9a:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1de9c:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1dea0:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1dea2:	4604      	mov	r4, r0
   1dea4:	fa93 f0a3 	rbit	r0, r3
   1dea8:	fab0 f080 	clz	r0, r0
   1deac:	bf08      	it	eq
   1deae:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   1deb2:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1deb4:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   1deb6:	d044      	beq.n	1df42 <chan_prepare.isra.0+0xaa>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1deb8:	7a21      	ldrb	r1, [r4, #8]
   1deba:	1e5a      	subs	r2, r3, #1
   1debc:	4013      	ands	r3, r2
   1debe:	f363 1106 	bfi	r1, r3, #4, #3

	lll_chan_set(36 + chan);
   1dec2:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1dec6:	7221      	strb	r1, [r4, #8]
	lll_chan_set(36 + chan);
   1dec8:	f7ff fbac 	bl	1d624 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1decc:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1dece:	f10d 0107 	add.w	r1, sp, #7
   1ded2:	f104 000c 	add.w	r0, r4, #12
   1ded6:	f88d 3007 	strb.w	r3, [sp, #7]
   1deda:	f7ff ffa5 	bl	1de28 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   1dede:	4605      	mov	r5, r0
   1dee0:	2800      	cmp	r0, #0
   1dee2:	d03f      	beq.n	1df64 <chan_prepare.isra.0+0xcc>

	radio_pkt_tx_set(pdu);
   1dee4:	4628      	mov	r0, r5
   1dee6:	f001 feff 	bl	1fce8 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1deea:	782b      	ldrb	r3, [r5, #0]
   1deec:	f003 030f 	and.w	r3, r3, #15
   1def0:	2b02      	cmp	r3, #2
   1def2:	d01e      	beq.n	1df32 <chan_prepare.isra.0+0x9a>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1def4:	f10d 0107 	add.w	r1, sp, #7
   1def8:	f104 0018 	add.w	r0, r4, #24
   1defc:	f7ff ff94 	bl	1de28 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   1df00:	4606      	mov	r6, r0
   1df02:	2800      	cmp	r0, #0
   1df04:	d03c      	beq.n	1df80 <chan_prepare.isra.0+0xe8>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1df06:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1df0a:	b95b      	cbnz	r3, 1df24 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1df0c:	4621      	mov	r1, r4
   1df0e:	4823      	ldr	r0, [pc, #140]	; (1df9c <chan_prepare.isra.0+0x104>)
   1df10:	f001 fe10 	bl	1fb34 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1df14:	2096      	movs	r0, #150	; 0x96
   1df16:	f002 f895 	bl	20044 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1df1a:	2000      	movs	r0, #0
   1df1c:	f001 ff66 	bl	1fdec <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1df20:	b002      	add	sp, #8
   1df22:	bd70      	pop	{r4, r5, r6, pc}
   1df24:	f8d5 3002 	ldr.w	r3, [r5, #2]
   1df28:	f8c6 3002 	str.w	r3, [r6, #2]
   1df2c:	88eb      	ldrh	r3, [r5, #6]
   1df2e:	80f3      	strh	r3, [r6, #6]
   1df30:	e7ec      	b.n	1df0c <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   1df32:	481b      	ldr	r0, [pc, #108]	; (1dfa0 <chan_prepare.isra.0+0x108>)
   1df34:	4621      	mov	r1, r4
   1df36:	f001 fdfd 	bl	1fb34 <radio_isr_set>
		radio_switch_complete_and_disable();
   1df3a:	f001 ffff 	bl	1ff3c <radio_switch_complete_and_disable>
}
   1df3e:	b002      	add	sp, #8
   1df40:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   1df42:	4a18      	ldr	r2, [pc, #96]	; (1dfa4 <chan_prepare.isra.0+0x10c>)
   1df44:	4918      	ldr	r1, [pc, #96]	; (1dfa8 <chan_prepare.isra.0+0x110>)
   1df46:	4819      	ldr	r0, [pc, #100]	; (1dfac <chan_prepare.isra.0+0x114>)
   1df48:	f240 5337 	movw	r3, #1335	; 0x537
   1df4c:	f00a f82c 	bl	27fa8 <printk>
   1df50:	4040      	eors	r0, r0
   1df52:	f380 8811 	msr	BASEPRI, r0
   1df56:	f04f 0003 	mov.w	r0, #3
   1df5a:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1df5c:	7a23      	ldrb	r3, [r4, #8]
   1df5e:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1df62:	e7a9      	b.n	1deb8 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   1df64:	4a0f      	ldr	r2, [pc, #60]	; (1dfa4 <chan_prepare.isra.0+0x10c>)
   1df66:	4912      	ldr	r1, [pc, #72]	; (1dfb0 <chan_prepare.isra.0+0x118>)
   1df68:	4810      	ldr	r0, [pc, #64]	; (1dfac <chan_prepare.isra.0+0x114>)
   1df6a:	f44f 63a8 	mov.w	r3, #1344	; 0x540
   1df6e:	f00a f81b 	bl	27fa8 <printk>
   1df72:	4040      	eors	r0, r0
   1df74:	f380 8811 	msr	BASEPRI, r0
   1df78:	f04f 0003 	mov.w	r0, #3
   1df7c:	df02      	svc	2
   1df7e:	e7b1      	b.n	1dee4 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   1df80:	4a08      	ldr	r2, [pc, #32]	; (1dfa4 <chan_prepare.isra.0+0x10c>)
   1df82:	490c      	ldr	r1, [pc, #48]	; (1dfb4 <chan_prepare.isra.0+0x11c>)
   1df84:	4809      	ldr	r0, [pc, #36]	; (1dfac <chan_prepare.isra.0+0x114>)
   1df86:	f240 534a 	movw	r3, #1354	; 0x54a
   1df8a:	f00a f80d 	bl	27fa8 <printk>
   1df8e:	4040      	eors	r0, r0
   1df90:	f380 8811 	msr	BASEPRI, r0
   1df94:	f04f 0003 	mov.w	r0, #3
   1df98:	df02      	svc	2
   1df9a:	e7b4      	b.n	1df06 <chan_prepare.isra.0+0x6e>
   1df9c:	0001dab9 	.word	0x0001dab9
   1dfa0:	0001dfb9 	.word	0x0001dfb9
   1dfa4:	00030ce8 	.word	0x00030ce8
   1dfa8:	0003092c 	.word	0x0003092c
   1dfac:	0002fedc 	.word	0x0002fedc
   1dfb0:	00030d54 	.word	0x00030d54
   1dfb4:	00030d58 	.word	0x00030d58

0001dfb8 <isr_done>:
{
   1dfb8:	b510      	push	{r4, lr}
   1dfba:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1dfbc:	f7ff fb8a 	bl	1d6d4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1dfc0:	7a23      	ldrb	r3, [r4, #8]
   1dfc2:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1dfc6:	2a01      	cmp	r2, #1
   1dfc8:	d105      	bne.n	1dfd6 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1dfca:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1dfce:	f362 1306 	bfi	r3, r2, #4, #3
   1dfd2:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   1dfd4:	b2db      	uxtb	r3, r3
   1dfd6:	f013 0f70 	tst.w	r3, #112	; 0x70
   1dfda:	d005      	beq.n	1dfe8 <isr_done+0x30>
	    (!lll->conn || !lll->conn->periph.cancelled) &&
   1dfdc:	6863      	ldr	r3, [r4, #4]
   1dfde:	b153      	cbz	r3, 1dff6 <isr_done+0x3e>
   1dfe0:	f893 3020 	ldrb.w	r3, [r3, #32]
   1dfe4:	079b      	lsls	r3, r3, #30
   1dfe6:	d506      	bpl.n	1dff6 <isr_done+0x3e>
	radio_filter_disable();
   1dfe8:	f001 fffa 	bl	1ffe0 <radio_filter_disable>
	lll_isr_cleanup(param);
   1dfec:	4620      	mov	r0, r4
}
   1dfee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1dff2:	f7ff bb7d 	b.w	1d6f0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1dff6:	4620      	mov	r0, r4
   1dff8:	f7ff ff4e 	bl	1de98 <chan_prepare.isra.0>
		radio_tx_enable();
   1dffc:	f001 fe90 	bl	1fd20 <radio_tx_enable>
}
   1e000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1e004:	f002 b92a 	b.w	2025c <radio_tmr_end_capture>

0001e008 <prepare_cb>:
{
   1e008:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1e00a:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1e00c:	6863      	ldr	r3, [r4, #4]
{
   1e00e:	b083      	sub	sp, #12
   1e010:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   1e012:	2b00      	cmp	r3, #0
   1e014:	d16d      	bne.n	1e0f2 <prepare_cb+0xea>
	radio_reset();
   1e016:	f001 fdcf 	bl	1fbb8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e01a:	2000      	movs	r0, #0
   1e01c:	f001 fe00 	bl	1fc20 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1e020:	2100      	movs	r1, #0
   1e022:	4608      	mov	r0, r1
   1e024:	f001 fdec 	bl	1fc00 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1e028:	2200      	movs	r2, #0
   1e02a:	2125      	movs	r1, #37	; 0x25
   1e02c:	2008      	movs	r0, #8
   1e02e:	f001 fe2d 	bl	1fc8c <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1e032:	4b35      	ldr	r3, [pc, #212]	; (1e108 <prepare_cb+0x100>)
   1e034:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1e036:	a801      	add	r0, sp, #4
   1e038:	f001 fe10 	bl	1fc5c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1e03c:	4933      	ldr	r1, [pc, #204]	; (1e10c <prepare_cb+0x104>)
   1e03e:	f240 605b 	movw	r0, #1627	; 0x65b
   1e042:	f001 feb1 	bl	1fda8 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1e046:	7a23      	ldrb	r3, [r4, #8]
   1e048:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1e04c:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1e050:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1e052:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   1e054:	f7ff ff20 	bl	1de98 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1e058:	f7fe ff60 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1e05c:	bb98      	cbnz	r0, 1e0c6 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1e05e:	7a63      	ldrb	r3, [r4, #9]
   1e060:	079b      	lsls	r3, r3, #30
   1e062:	d127      	bne.n	1e0b4 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   1e064:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1e066:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1e068:	4638      	mov	r0, r7
   1e06a:	f7ff fabd 	bl	1d5e8 <lll_event_offset_get>
   1e06e:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1e070:	686a      	ldr	r2, [r5, #4]
   1e072:	f106 0109 	add.w	r1, r6, #9
   1e076:	2001      	movs	r0, #1
   1e078:	f001 fff0 	bl	2005c <radio_tmr_start>
	radio_tmr_end_capture();
   1e07c:	f002 f8ee 	bl	2025c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1e080:	4620      	mov	r0, r4
   1e082:	f7f7 fee1 	bl	15e48 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   1e086:	1c81      	adds	r1, r0, #2
   1e088:	4632      	mov	r2, r6
   1e08a:	b2c9      	uxtb	r1, r1
   1e08c:	4638      	mov	r0, r7
   1e08e:	f7ff fab9 	bl	1d604 <lll_preempt_calc>
   1e092:	b930      	cbnz	r0, 1e0a2 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   1e094:	4620      	mov	r0, r4
   1e096:	f7ff fa41 	bl	1d51c <lll_prepare_done>
		LL_ASSERT(!ret);
   1e09a:	b9d0      	cbnz	r0, 1e0d2 <prepare_cb+0xca>
}
   1e09c:	2000      	movs	r0, #0
   1e09e:	b003      	add	sp, #12
   1e0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1e0a2:	481b      	ldr	r0, [pc, #108]	; (1e110 <prepare_cb+0x108>)
   1e0a4:	4621      	mov	r1, r4
   1e0a6:	f001 fd45 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1e0aa:	f001 fe3f 	bl	1fd2c <radio_disable>
}
   1e0ae:	2000      	movs	r0, #0
   1e0b0:	b003      	add	sp, #12
   1e0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1e0b4:	2001      	movs	r0, #1
   1e0b6:	f7fe faa1 	bl	1c5fc <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1e0ba:	7841      	ldrb	r1, [r0, #1]
   1e0bc:	1c82      	adds	r2, r0, #2
   1e0be:	7800      	ldrb	r0, [r0, #0]
   1e0c0:	f001 ff6e 	bl	1ffa0 <radio_filter_configure>
   1e0c4:	e7ce      	b.n	1e064 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   1e0c6:	7a60      	ldrb	r0, [r4, #9]
   1e0c8:	f010 0003 	ands.w	r0, r0, #3
   1e0cc:	bf18      	it	ne
   1e0ce:	2001      	movne	r0, #1
   1e0d0:	e7f1      	b.n	1e0b6 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   1e0d2:	4a10      	ldr	r2, [pc, #64]	; (1e114 <prepare_cb+0x10c>)
   1e0d4:	4910      	ldr	r1, [pc, #64]	; (1e118 <prepare_cb+0x110>)
   1e0d6:	4811      	ldr	r0, [pc, #68]	; (1e11c <prepare_cb+0x114>)
   1e0d8:	f240 33d1 	movw	r3, #977	; 0x3d1
   1e0dc:	f009 ff64 	bl	27fa8 <printk>
   1e0e0:	4040      	eors	r0, r0
   1e0e2:	f380 8811 	msr	BASEPRI, r0
   1e0e6:	f04f 0003 	mov.w	r0, #3
   1e0ea:	df02      	svc	2
}
   1e0ec:	2000      	movs	r0, #0
   1e0ee:	b003      	add	sp, #12
   1e0f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   1e0f2:	f893 3020 	ldrb.w	r3, [r3, #32]
   1e0f6:	079a      	lsls	r2, r3, #30
   1e0f8:	d08d      	beq.n	1e016 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   1e0fa:	4809      	ldr	r0, [pc, #36]	; (1e120 <prepare_cb+0x118>)
   1e0fc:	4621      	mov	r1, r4
   1e0fe:	f001 fd19 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1e102:	f001 fe13 	bl	1fd2c <radio_disable>
		return 0;
   1e106:	e7c9      	b.n	1e09c <prepare_cb+0x94>
   1e108:	8e89bed6 	.word	0x8e89bed6
   1e10c:	00555555 	.word	0x00555555
   1e110:	0001daa1 	.word	0x0001daa1
   1e114:	00030ce8 	.word	0x00030ce8
   1e118:	00030354 	.word	0x00030354
   1e11c:	0002fedc 	.word	0x0002fedc
   1e120:	0001d781 	.word	0x0001d781

0001e124 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1e124:	68c3      	ldr	r3, [r0, #12]
{
   1e126:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1e128:	681e      	ldr	r6, [r3, #0]
{
   1e12a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1e12c:	f7f4 f9b4 	bl	12498 <ticker_ticks_now_get>
   1e130:	4605      	mov	r5, r0
   1e132:	4630      	mov	r0, r6
   1e134:	f7ff fa58 	bl	1d5e8 <lll_event_offset_get>
	p->remainder = 0;
   1e138:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1e13a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1e13c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1e140:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1e142:	4620      	mov	r0, r4
}
   1e144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1e148:	f7ff bf5e 	b.w	1e008 <prepare_cb>

0001e14c <lll_adv_prepare>:
{
   1e14c:	b510      	push	{r4, lr}
   1e14e:	b082      	sub	sp, #8
   1e150:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1e152:	f7ff fc65 	bl	1da20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1e156:	2800      	cmp	r0, #0
   1e158:	db1a      	blt.n	1e190 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1e15a:	4a14      	ldr	r2, [pc, #80]	; (1e1ac <lll_adv_prepare+0x60>)
   1e15c:	4914      	ldr	r1, [pc, #80]	; (1e1b0 <lll_adv_prepare+0x64>)
   1e15e:	4815      	ldr	r0, [pc, #84]	; (1e1b4 <lll_adv_prepare+0x68>)
   1e160:	9400      	str	r4, [sp, #0]
   1e162:	2300      	movs	r3, #0
   1e164:	f7f7 fa02 	bl	1556c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e168:	b108      	cbz	r0, 1e16e <lll_adv_prepare+0x22>
   1e16a:	3077      	adds	r0, #119	; 0x77
   1e16c:	d101      	bne.n	1e172 <lll_adv_prepare+0x26>
}
   1e16e:	b002      	add	sp, #8
   1e170:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1e172:	4a11      	ldr	r2, [pc, #68]	; (1e1b8 <lll_adv_prepare+0x6c>)
   1e174:	4911      	ldr	r1, [pc, #68]	; (1e1bc <lll_adv_prepare+0x70>)
   1e176:	4812      	ldr	r0, [pc, #72]	; (1e1c0 <lll_adv_prepare+0x74>)
   1e178:	f240 239d 	movw	r3, #669	; 0x29d
   1e17c:	f009 ff14 	bl	27fa8 <printk>
   1e180:	4040      	eors	r0, r0
   1e182:	f380 8811 	msr	BASEPRI, r0
   1e186:	f04f 0003 	mov.w	r0, #3
   1e18a:	df02      	svc	2
}
   1e18c:	b002      	add	sp, #8
   1e18e:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1e190:	4a09      	ldr	r2, [pc, #36]	; (1e1b8 <lll_adv_prepare+0x6c>)
   1e192:	490c      	ldr	r1, [pc, #48]	; (1e1c4 <lll_adv_prepare+0x78>)
   1e194:	480a      	ldr	r0, [pc, #40]	; (1e1c0 <lll_adv_prepare+0x74>)
   1e196:	f240 239a 	movw	r3, #666	; 0x29a
   1e19a:	f009 ff05 	bl	27fa8 <printk>
   1e19e:	4040      	eors	r0, r0
   1e1a0:	f380 8811 	msr	BASEPRI, r0
   1e1a4:	f04f 0003 	mov.w	r0, #3
   1e1a8:	df02      	svc	2
   1e1aa:	e7d6      	b.n	1e15a <lll_adv_prepare+0xe>
   1e1ac:	0001e009 	.word	0x0001e009
   1e1b0:	0001dc09 	.word	0x0001dc09
   1e1b4:	0001db99 	.word	0x0001db99
   1e1b8:	00030ce8 	.word	0x00030ce8
   1e1bc:	00030d64 	.word	0x00030d64
   1e1c0:	0002fedc 	.word	0x0002fedc
   1e1c4:	00030c78 	.word	0x00030c78

0001e1c8 <lll_adv_scan_req_check>:
{
   1e1c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1e1cc:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   1e1d0:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e1d4:	f01c 0f01 	tst.w	ip, #1
{
   1e1d8:	460f      	mov	r7, r1
   1e1da:	4616      	mov	r6, r2
   1e1dc:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e1de:	d009      	beq.n	1e1f4 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1e1e0:	f1b8 0f00 	cmp.w	r8, #0
   1e1e4:	d016      	beq.n	1e214 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1e1e6:	783b      	ldrb	r3, [r7, #0]
   1e1e8:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1e1ec:	d019      	beq.n	1e222 <lll_adv_scan_req_check+0x5a>
{
   1e1ee:	2000      	movs	r0, #0
}
   1e1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e1f4:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1e1f6:	f811 0b02 	ldrb.w	r0, [r1], #2
   1e1fa:	9a07      	ldr	r2, [sp, #28]
   1e1fc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1e200:	f7fe fe30 	bl	1ce64 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) == 0) &&
   1e204:	2800      	cmp	r0, #0
   1e206:	d1ee      	bne.n	1e1e6 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1e208:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   1e20a:	07db      	lsls	r3, r3, #31
   1e20c:	d5ef      	bpl.n	1e1ee <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_SCAN_REQ) != 0) &&
   1e20e:	f1b8 0f00 	cmp.w	r8, #0
   1e212:	d1e8      	bne.n	1e1e6 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e214:	9b07      	ldr	r3, [sp, #28]
   1e216:	7818      	ldrb	r0, [r3, #0]
   1e218:	f7fe fdc0 	bl	1cd9c <ull_filter_lll_irk_in_fal>
   1e21c:	2800      	cmp	r0, #0
   1e21e:	d1e2      	bne.n	1e1e6 <lll_adv_scan_req_check+0x1e>
   1e220:	e7e5      	b.n	1e1ee <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1e222:	2206      	movs	r2, #6
   1e224:	f107 0108 	add.w	r1, r7, #8
   1e228:	4628      	mov	r0, r5
   1e22a:	f010 f98c 	bl	2e546 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1e22e:	fab0 f080 	clz	r0, r0
   1e232:	0940      	lsrs	r0, r0, #5
}
   1e234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e238 <lll_adv_connect_ind_check>:
{
   1e238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e23c:	461f      	mov	r7, r3
	if (tgt_addr) {
   1e23e:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1e240:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1e244:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1e248:	4605      	mov	r5, r0
   1e24a:	460c      	mov	r4, r1
   1e24c:	4690      	mov	r8, r2
	if (tgt_addr) {
   1e24e:	b9fb      	cbnz	r3, 1e290 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   1e250:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e252:	079a      	lsls	r2, r3, #30
   1e254:	d507      	bpl.n	1e266 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1e256:	b1a6      	cbz	r6, 1e282 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1e258:	7823      	ldrb	r3, [r4, #0]
   1e25a:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1e25e:	d03a      	beq.n	1e2d6 <lll_adv_connect_ind_check+0x9e>
   1e260:	2000      	movs	r0, #0
}
   1e262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1e266:	f811 0b02 	ldrb.w	r0, [r1], #2
   1e26a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e26c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1e270:	f7fe fdf8 	bl	1ce64 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) == 0) &&
   1e274:	2800      	cmp	r0, #0
   1e276:	d1ef      	bne.n	1e258 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1e278:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   1e27a:	079b      	lsls	r3, r3, #30
   1e27c:	d5f0      	bpl.n	1e260 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & BT_LE_ADV_FP_FILTER_CONN_IND) != 0) &&
   1e27e:	2e00      	cmp	r6, #0
   1e280:	d1ea      	bne.n	1e258 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e282:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e284:	7818      	ldrb	r0, [r3, #0]
   1e286:	f7fe fd89 	bl	1cd9c <ull_filter_lll_irk_in_fal>
   1e28a:	2800      	cmp	r0, #0
   1e28c:	d1e4      	bne.n	1e258 <lll_adv_connect_ind_check+0x20>
   1e28e:	e7e7      	b.n	1e260 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1e290:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1e292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1e294:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1e298:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1e29c:	4651      	mov	r1, sl
   1e29e:	f7fe fde1 	bl	1ce64 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1e2a2:	2800      	cmp	r0, #0
   1e2a4:	d0dc      	beq.n	1e260 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1e2a6:	7823      	ldrb	r3, [r4, #0]
   1e2a8:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1e2ac:	d1d8      	bne.n	1e260 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1e2ae:	4638      	mov	r0, r7
   1e2b0:	2206      	movs	r2, #6
   1e2b2:	f104 0108 	add.w	r1, r4, #8
   1e2b6:	f010 f946 	bl	2e546 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1e2ba:	2800      	cmp	r0, #0
   1e2bc:	d1d0      	bne.n	1e260 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1e2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1e2c0:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1e2c2:	28ff      	cmp	r0, #255	; 0xff
   1e2c4:	d011      	beq.n	1e2ea <lll_adv_connect_ind_check+0xb2>
   1e2c6:	7aab      	ldrb	r3, [r5, #10]
   1e2c8:	2bff      	cmp	r3, #255	; 0xff
   1e2ca:	d00e      	beq.n	1e2ea <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1e2cc:	1ac0      	subs	r0, r0, r3
   1e2ce:	fab0 f080 	clz	r0, r0
   1e2d2:	0940      	lsrs	r0, r0, #5
   1e2d4:	e7c5      	b.n	1e262 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1e2d6:	2206      	movs	r2, #6
   1e2d8:	f104 0108 	add.w	r1, r4, #8
   1e2dc:	4638      	mov	r0, r7
   1e2de:	f010 f932 	bl	2e546 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1e2e2:	fab0 f080 	clz	r0, r0
   1e2e6:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_in_fal(*rl_idx)))) &&
   1e2e8:	e7bb      	b.n	1e262 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1e2ea:	7823      	ldrb	r3, [r4, #0]
   1e2ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1e2f0:	454b      	cmp	r3, r9
   1e2f2:	d1b5      	bne.n	1e260 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1e2f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   1e2f6:	2206      	movs	r2, #6
   1e2f8:	4651      	mov	r1, sl
   1e2fa:	f010 f924 	bl	2e546 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1e2fe:	fab0 f080 	clz	r0, r0
   1e302:	0940      	lsrs	r0, r0, #5
   1e304:	e7ad      	b.n	1e262 <lll_adv_connect_ind_check+0x2a>
   1e306:	bf00      	nop

0001e308 <isr_rx>:
{
   1e308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e30c:	b08b      	sub	sp, #44	; 0x2c
   1e30e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1e310:	f001 fd36 	bl	1fd80 <radio_is_done>
	if (trx_done) {
   1e314:	b2c0      	uxtb	r0, r0
   1e316:	b950      	cbnz	r0, 1e32e <isr_rx+0x26>
	lll_isr_status_reset();
   1e318:	f7ff f9dc 	bl	1d6d4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1e31c:	487c      	ldr	r0, [pc, #496]	; (1e510 <isr_rx+0x208>)
   1e31e:	4621      	mov	r1, r4
   1e320:	f001 fc08 	bl	1fb34 <radio_isr_set>
}
   1e324:	b00b      	add	sp, #44	; 0x2c
   1e326:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1e32a:	f001 bcff 	b.w	1fd2c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1e32e:	f001 fd47 	bl	1fdc0 <radio_crc_is_valid>
   1e332:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1e334:	f001 fe66 	bl	20004 <radio_filter_has_match>
   1e338:	4681      	mov	r9, r0
		devmatch_id = radio_filter_match_get();
   1e33a:	f001 fe6d 	bl	20018 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1e33e:	f002 f87b 	bl	20438 <radio_ar_has_match>
   1e342:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1e344:	f002 f85c 	bl	20400 <radio_ar_match_get>
	if (crc_ok) {
   1e348:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1e34a:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1e34c:	f001 fe1e 	bl	1ff8c <radio_rssi_is_ready>
	lll_isr_status_reset();
   1e350:	f7ff f9c0 	bl	1d6d4 <lll_isr_status_reset>
	if (crc_ok) {
   1e354:	2d00      	cmp	r5, #0
   1e356:	d0e1      	beq.n	1e31c <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1e358:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1e35c:	d17a      	bne.n	1e454 <isr_rx+0x14c>
   1e35e:	23ff      	movs	r3, #255	; 0xff
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e360:	2001      	movs	r0, #1
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1e362:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e366:	f7f6 fdc5 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e36a:	4605      	mov	r5, r0
   1e36c:	2800      	cmp	r0, #0
   1e36e:	f000 80a2 	beq.w	1e4b6 <isr_rx+0x1ae>
   1e372:	7b23      	ldrb	r3, [r4, #12]
   1e374:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	pdu_rx = (void *)node_rx->pdu;
   1e378:	f105 011c 	add.w	r1, r5, #28
   1e37c:	691f      	ldr	r7, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   1e37e:	463b      	mov	r3, r7
		devmatch_ok = radio_filter_has_match();
   1e380:	fa5f f989 	uxtb.w	r9, r9
	tx_addr = pdu_adv->tx_addr;
   1e384:	f813 0b02 	ldrb.w	r0, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1e388:	f000 0c0f 	and.w	ip, r0, #15
   1e38c:	f1bc 0f01 	cmp.w	ip, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1e390:	bf08      	it	eq
   1e392:	f107 0808 	addeq.w	r8, r7, #8
	tx_addr = pdu_adv->tx_addr;
   1e396:	f3c0 1280 	ubfx	r2, r0, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1e39a:	ea4f 17d0 	mov.w	r7, r0, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e39e:	7f28      	ldrb	r0, [r5, #28]
   1e3a0:	f000 000f 	and.w	r0, r0, #15
		tgt_addr = NULL;
   1e3a4:	bf18      	it	ne
   1e3a6:	f04f 0800 	movne.w	r8, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e3aa:	2803      	cmp	r0, #3
   1e3ac:	d05a      	beq.n	1e464 <isr_rx+0x15c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1e3ae:	2805      	cmp	r0, #5
   1e3b0:	d1b4      	bne.n	1e31c <isr_rx+0x14>
   1e3b2:	7f68      	ldrb	r0, [r5, #29]
   1e3b4:	2822      	cmp	r0, #34	; 0x22
   1e3b6:	d1b1      	bne.n	1e31c <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1e3b8:	6860      	ldr	r0, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1e3ba:	2800      	cmp	r0, #0
   1e3bc:	d0ae      	beq.n	1e31c <isr_rx+0x14>
		   lll->conn && !lll->conn->periph.cancelled &&
   1e3be:	f890 0020 	ldrb.w	r0, [r0, #32]
   1e3c2:	0780      	lsls	r0, r0, #30
   1e3c4:	d4aa      	bmi.n	1e31c <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1e3c6:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1e3ca:	9003      	str	r0, [sp, #12]
   1e3cc:	e9cd 8901 	strd	r8, r9, [sp, #4]
   1e3d0:	9700      	str	r7, [sp, #0]
   1e3d2:	4620      	mov	r0, r4
   1e3d4:	f7ff ff30 	bl	1e238 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->periph.cancelled &&
   1e3d8:	2800      	cmp	r0, #0
   1e3da:	d09f      	beq.n	1e31c <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1e3dc:	2004      	movs	r0, #4
   1e3de:	f7f6 fd89 	bl	14ef4 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1e3e2:	2800      	cmp	r0, #0
   1e3e4:	d09a      	beq.n	1e31c <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1e3e6:	484b      	ldr	r0, [pc, #300]	; (1e514 <isr_rx+0x20c>)
   1e3e8:	4621      	mov	r1, r4
   1e3ea:	f001 fba3 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1e3ee:	f001 fc9d 	bl	1fd2c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1e3f2:	f001 fcbb 	bl	1fd6c <radio_is_ready>
   1e3f6:	2800      	cmp	r0, #0
   1e3f8:	d14f      	bne.n	1e49a <isr_rx+0x192>
		lll->conn->periph.initiated = 1;
   1e3fa:	6862      	ldr	r2, [r4, #4]
   1e3fc:	f892 3020 	ldrb.w	r3, [r2, #32]
   1e400:	f043 0301 	orr.w	r3, r3, #1
   1e404:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1e408:	f7f6 fd92 	bl	14f30 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1e40c:	2216      	movs	r2, #22
		rx->hdr.handle = 0xffff;
   1e40e:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1e412:	7102      	strb	r2, [r0, #4]
		rx->hdr.handle = 0xffff;
   1e414:	80c3      	strh	r3, [r0, #6]
		ftr->param = lll;
   1e416:	6084      	str	r4, [r0, #8]
		rx = ull_pdu_rx_alloc();
   1e418:	4605      	mov	r5, r0
		ftr->ticks_anchor = radio_tmr_start_get();
   1e41a:	f001 fed3 	bl	201c4 <radio_tmr_start_get>
   1e41e:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1e420:	f001 ff24 	bl	2026c <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   1e424:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1e426:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   1e428:	4608      	mov	r0, r1
   1e42a:	f001 fc6d 	bl	1fd08 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1e42e:	1a24      	subs	r4, r4, r0
   1e430:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1e432:	b1ae      	cbz	r6, 1e460 <isr_rx+0x158>
   1e434:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1e438:	766b      	strb	r3, [r5, #25]
			ftr->extra = ull_pdu_rx_alloc();
   1e43a:	f7f6 fd79 	bl	14f30 <ull_pdu_rx_alloc>
   1e43e:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1e440:	4629      	mov	r1, r5
   1e442:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1e444:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1e446:	f7f6 fd89 	bl	14f5c <ull_rx_put>
		ull_rx_sched();
   1e44a:	f7f6 fd97 	bl	14f7c <ull_rx_sched>
}
   1e44e:	b00b      	add	sp, #44	; 0x2c
   1e450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1e454:	fa5f f088 	uxtb.w	r0, r8
   1e458:	f7fe fc4e 	bl	1ccf8 <ull_filter_lll_rl_irk_idx>
   1e45c:	4603      	mov	r3, r0
   1e45e:	e77f      	b.n	1e360 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1e460:	23ff      	movs	r3, #255	; 0xff
   1e462:	e7e9      	b.n	1e438 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1e464:	7f68      	ldrb	r0, [r5, #29]
   1e466:	280c      	cmp	r0, #12
   1e468:	f47f af58 	bne.w	1e31c <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1e46c:	f1b8 0f00 	cmp.w	r8, #0
   1e470:	f47f af54 	bne.w	1e31c <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1e474:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1e478:	9001      	str	r0, [sp, #4]
   1e47a:	f8cd 9000 	str.w	r9, [sp]
   1e47e:	4620      	mov	r0, r4
   1e480:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1e484:	9105      	str	r1, [sp, #20]
   1e486:	f7ff fe9f 	bl	1e1c8 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1e48a:	bb10      	cbnz	r0, 1e4d2 <isr_rx+0x1ca>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1e48c:	7f28      	ldrb	r0, [r5, #28]
   1e48e:	9b07      	ldr	r3, [sp, #28]
   1e490:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
   1e494:	f000 000f 	and.w	r0, r0, #15
   1e498:	e789      	b.n	1e3ae <isr_rx+0xa6>
		LL_ASSERT(!radio_is_ready());
   1e49a:	4a1f      	ldr	r2, [pc, #124]	; (1e518 <isr_rx+0x210>)
   1e49c:	491f      	ldr	r1, [pc, #124]	; (1e51c <isr_rx+0x214>)
   1e49e:	4820      	ldr	r0, [pc, #128]	; (1e520 <isr_rx+0x218>)
   1e4a0:	f240 53da 	movw	r3, #1498	; 0x5da
   1e4a4:	f009 fd80 	bl	27fa8 <printk>
   1e4a8:	4040      	eors	r0, r0
   1e4aa:	f380 8811 	msr	BASEPRI, r0
   1e4ae:	f04f 0003 	mov.w	r0, #3
   1e4b2:	df02      	svc	2
   1e4b4:	e7a1      	b.n	1e3fa <isr_rx+0xf2>
	LL_ASSERT(node_rx);
   1e4b6:	4a18      	ldr	r2, [pc, #96]	; (1e518 <isr_rx+0x210>)
   1e4b8:	491a      	ldr	r1, [pc, #104]	; (1e524 <isr_rx+0x21c>)
   1e4ba:	4819      	ldr	r0, [pc, #100]	; (1e520 <isr_rx+0x218>)
   1e4bc:	f240 537a 	movw	r3, #1402	; 0x57a
   1e4c0:	f009 fd72 	bl	27fa8 <printk>
   1e4c4:	4040      	eors	r0, r0
   1e4c6:	f380 8811 	msr	BASEPRI, r0
   1e4ca:	f04f 0003 	mov.w	r0, #3
   1e4ce:	df02      	svc	2
   1e4d0:	e74f      	b.n	1e372 <isr_rx+0x6a>
		radio_isr_set(isr_done, lll);
   1e4d2:	4621      	mov	r1, r4
   1e4d4:	480e      	ldr	r0, [pc, #56]	; (1e510 <isr_rx+0x208>)
   1e4d6:	f001 fb2d 	bl	1fb34 <radio_isr_set>
		radio_switch_complete_and_disable();
   1e4da:	f001 fd2f 	bl	1ff3c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1e4de:	7e23      	ldrb	r3, [r4, #24]
   1e4e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1e4e4:	69e0      	ldr	r0, [r4, #28]
   1e4e6:	f001 fbff 	bl	1fce8 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1e4ea:	f001 fc3f 	bl	1fd6c <radio_is_ready>
   1e4ee:	2800      	cmp	r0, #0
   1e4f0:	d0ad      	beq.n	1e44e <isr_rx+0x146>
   1e4f2:	4a09      	ldr	r2, [pc, #36]	; (1e518 <isr_rx+0x210>)
   1e4f4:	4909      	ldr	r1, [pc, #36]	; (1e51c <isr_rx+0x214>)
   1e4f6:	480a      	ldr	r0, [pc, #40]	; (1e520 <isr_rx+0x218>)
   1e4f8:	f240 5393 	movw	r3, #1427	; 0x593
   1e4fc:	f009 fd54 	bl	27fa8 <printk>
   1e500:	4040      	eors	r0, r0
   1e502:	f380 8811 	msr	BASEPRI, r0
   1e506:	f04f 0003 	mov.w	r0, #3
   1e50a:	df02      	svc	2
		if (!err) {
   1e50c:	e79f      	b.n	1e44e <isr_rx+0x146>
   1e50e:	bf00      	nop
   1e510:	0001dfb9 	.word	0x0001dfb9
   1e514:	0001daa1 	.word	0x0001daa1
   1e518:	00030ce8 	.word	0x00030ce8
   1e51c:	00030d3c 	.word	0x00030d3c
   1e520:	0002fedc 	.word	0x0002fedc
   1e524:	00030d34 	.word	0x00030d34

0001e528 <common_prepare_cb>:
{
   1e528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	lll = p->param;
   1e52c:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->is_stop ||
   1e52e:	f994 3016 	ldrsb.w	r3, [r4, #22]
   1e532:	2b00      	cmp	r3, #0
{
   1e534:	b08c      	sub	sp, #48	; 0x30
	if (unlikely(lll->is_stop ||
   1e536:	f2c0 810e 	blt.w	1e756 <common_prepare_cb+0x22e>
   1e53a:	6863      	ldr	r3, [r4, #4]
   1e53c:	4605      	mov	r5, r0
   1e53e:	460f      	mov	r7, r1
   1e540:	2b00      	cmp	r3, #0
   1e542:	f040 80fd 	bne.w	1e740 <common_prepare_cb+0x218>
	lll->state = 0U;
   1e546:	7da3      	ldrb	r3, [r4, #22]
   1e548:	f36f 0300 	bfc	r3, #0, #1
   1e54c:	75a3      	strb	r3, [r4, #22]
	radio_reset();
   1e54e:	f001 fb33 	bl	1fbb8 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1e552:	2000      	movs	r0, #0
   1e554:	f001 fb64 	bl	1fc20 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1e558:	2100      	movs	r1, #0
   1e55a:	4608      	mov	r0, r1
   1e55c:	f001 fb50 	bl	1fc00 <radio_phy_set>
	radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, PDU_AC_LEG_PAYLOAD_SIZE_MAX,
   1e560:	2200      	movs	r2, #0
   1e562:	2125      	movs	r1, #37	; 0x25
   1e564:	2008      	movs	r0, #8
   1e566:	f001 fb91 	bl	1fc8c <radio_pkt_configure>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e56a:	2001      	movs	r0, #1
   1e56c:	f7f6 fcc2 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e570:	4606      	mov	r6, r0
   1e572:	2800      	cmp	r0, #0
   1e574:	f000 80d6 	beq.w	1e724 <common_prepare_cb+0x1fc>
	radio_pkt_rx_set(node_rx->pdu);
   1e578:	f106 001c 	add.w	r0, r6, #28
   1e57c:	f001 fbae 	bl	1fcdc <radio_pkt_rx_set>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1e580:	4b7a      	ldr	r3, [pc, #488]	; (1e76c <common_prepare_cb+0x244>)
   1e582:	930b      	str	r3, [sp, #44]	; 0x2c
	radio_aa_set((uint8_t *)&aa);
   1e584:	a80b      	add	r0, sp, #44	; 0x2c
   1e586:	f001 fb69 	bl	1fc5c <radio_aa_set>
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1e58a:	4979      	ldr	r1, [pc, #484]	; (1e770 <common_prepare_cb+0x248>)
   1e58c:	f240 605b 	movw	r0, #1627	; 0x65b
   1e590:	f001 fc0a 	bl	1fda8 <radio_crc_configure>
	lll_chan_set(37 + lll->chan);
   1e594:	7da0      	ldrb	r0, [r4, #22]
   1e596:	f3c0 0041 	ubfx	r0, r0, #1, #2
   1e59a:	3025      	adds	r0, #37	; 0x25
   1e59c:	f7ff f842 	bl	1d624 <lll_chan_set>
	radio_isr_set(isr_rx, lll);
   1e5a0:	4874      	ldr	r0, [pc, #464]	; (1e774 <common_prepare_cb+0x24c>)
   1e5a2:	4621      	mov	r1, r4
   1e5a4:	f001 fac6 	bl	1fb34 <radio_isr_set>
	} else if (lll->type ||
   1e5a8:	7da3      	ldrb	r3, [r4, #22]
   1e5aa:	069b      	lsls	r3, r3, #26
   1e5ac:	d403      	bmi.n	1e5b6 <common_prepare_cb+0x8e>
		   lll->conn) {
   1e5ae:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1e5b0:	2b00      	cmp	r3, #0
   1e5b2:	f000 8091 	beq.w	1e6d8 <common_prepare_cb+0x1b0>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e5b6:	2096      	movs	r0, #150	; 0x96
   1e5b8:	f001 fd44 	bl	20044 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1e5bc:	2300      	movs	r3, #0
   1e5be:	461a      	mov	r2, r3
   1e5c0:	4619      	mov	r1, r3
   1e5c2:	4618      	mov	r0, r3
   1e5c4:	f001 fc5a 	bl	1fe7c <radio_switch_complete_and_tx>
	if (ull_filter_lll_rl_enabled()) {
   1e5c8:	f7fe fca8 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1e5cc:	2800      	cmp	r0, #0
   1e5ce:	d135      	bne.n	1e63c <common_prepare_cb+0x114>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER_ACCEPT_LIST) && lll->filter_policy) {
   1e5d0:	7da3      	ldrb	r3, [r4, #22]
   1e5d2:	f013 0f18 	tst.w	r3, #24
   1e5d6:	d152      	bne.n	1e67e <common_prepare_cb+0x156>
	ull = HDR_LLL2ULL(lll);
   1e5d8:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1e5dc:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1e5de:	4640      	mov	r0, r8
   1e5e0:	f7ff f802 	bl	1d5e8 <lll_event_offset_get>
   1e5e4:	4406      	add	r6, r0
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1e5e6:	686a      	ldr	r2, [r5, #4]
   1e5e8:	f106 0109 	add.w	r1, r6, #9
   1e5ec:	2000      	movs	r0, #0
   1e5ee:	f001 fd35 	bl	2005c <radio_tmr_start>
	radio_tmr_end_capture();
   1e5f2:	f001 fe33 	bl	2025c <radio_tmr_end_capture>
	radio_rssi_measure();
   1e5f6:	f001 fcb1 	bl	1ff5c <radio_rssi_measure>
				   ull_scan_lll_handle_get(lll)),
   1e5fa:	4620      	mov	r0, r4
   1e5fc:	f7f7 fe3e 	bl	1627c <ull_scan_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_SCAN_BASE +
   1e600:	1d01      	adds	r1, r0, #4
   1e602:	b2c9      	uxtb	r1, r1
   1e604:	4640      	mov	r0, r8
   1e606:	4632      	mov	r2, r6
   1e608:	f7fe fffc 	bl	1d604 <lll_preempt_calc>
   1e60c:	bb68      	cbnz	r0, 1e66a <common_prepare_cb+0x142>
		if (!is_resume && lll->ticks_window) {
   1e60e:	b917      	cbnz	r7, 1e616 <common_prepare_cb+0xee>
   1e610:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1e612:	2b00      	cmp	r3, #0
   1e614:	d163      	bne.n	1e6de <common_prepare_cb+0x1b6>
		if (lll->conn) {
   1e616:	6863      	ldr	r3, [r4, #4]
   1e618:	b143      	cbz	r3, 1e62c <common_prepare_cb+0x104>
			mfy_after_mstr_offset_get.param = p;
   1e61a:	4b57      	ldr	r3, [pc, #348]	; (1e778 <common_prepare_cb+0x250>)
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1e61c:	2201      	movs	r2, #1
   1e61e:	2102      	movs	r1, #2
   1e620:	2000      	movs	r0, #0
			mfy_after_mstr_offset_get.param = p;
   1e622:	609d      	str	r5, [r3, #8]
			retval = mayfly_enqueue(TICKER_USER_ID_LLL,
   1e624:	f7f2 fc42 	bl	10eac <mayfly_enqueue>
			LL_ASSERT(!retval);
   1e628:	2800      	cmp	r0, #0
   1e62a:	d142      	bne.n	1e6b2 <common_prepare_cb+0x18a>
		ret = lll_prepare_done(lll);
   1e62c:	4620      	mov	r0, r4
   1e62e:	f7fe ff75 	bl	1d51c <lll_prepare_done>
		LL_ASSERT(!ret);
   1e632:	bb68      	cbnz	r0, 1e690 <common_prepare_cb+0x168>
}
   1e634:	2000      	movs	r0, #0
   1e636:	b00c      	add	sp, #48	; 0x30
   1e638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ull_filter_lll_get((lll->filter_policy &
   1e63c:	7da0      	ldrb	r0, [r4, #22]
   1e63e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1e642:	f7fd ffdb 	bl	1c5fc <ull_filter_lll_get>
   1e646:	4606      	mov	r6, r0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e648:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
   1e64c:	f7fe fae0 	bl	1cc10 <ull_filter_lll_irks_get>
		radio_filter_configure(filter->enable_bitmask,
   1e650:	7871      	ldrb	r1, [r6, #1]
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e652:	4680      	mov	r8, r0
		radio_filter_configure(filter->enable_bitmask,
   1e654:	1cb2      	adds	r2, r6, #2
   1e656:	7830      	ldrb	r0, [r6, #0]
   1e658:	f001 fca2 	bl	1ffa0 <radio_filter_configure>
		radio_ar_configure(count, irks, 0);
   1e65c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1e660:	2200      	movs	r2, #0
   1e662:	4641      	mov	r1, r8
   1e664:	f001 fe98 	bl	20398 <radio_ar_configure>
   1e668:	e7b6      	b.n	1e5d8 <common_prepare_cb+0xb0>
		radio_isr_set(isr_abort, lll);
   1e66a:	4844      	ldr	r0, [pc, #272]	; (1e77c <common_prepare_cb+0x254>)
   1e66c:	4621      	mov	r1, r4
   1e66e:	f001 fa61 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1e672:	f001 fb5b 	bl	1fd2c <radio_disable>
}
   1e676:	2000      	movs	r0, #0
   1e678:	b00c      	add	sp, #48	; 0x30
   1e67a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		struct lll_filter *fal = ull_filter_lll_get(true);
   1e67e:	2001      	movs	r0, #1
   1e680:	f7fd ffbc 	bl	1c5fc <ull_filter_lll_get>
		radio_filter_configure(fal->enable_bitmask,
   1e684:	7841      	ldrb	r1, [r0, #1]
   1e686:	1c82      	adds	r2, r0, #2
   1e688:	7800      	ldrb	r0, [r0, #0]
   1e68a:	f001 fc89 	bl	1ffa0 <radio_filter_configure>
   1e68e:	e7a3      	b.n	1e5d8 <common_prepare_cb+0xb0>
		LL_ASSERT(!ret);
   1e690:	4a3b      	ldr	r2, [pc, #236]	; (1e780 <common_prepare_cb+0x258>)
   1e692:	493c      	ldr	r1, [pc, #240]	; (1e784 <common_prepare_cb+0x25c>)
   1e694:	483c      	ldr	r0, [pc, #240]	; (1e788 <common_prepare_cb+0x260>)
   1e696:	f44f 7305 	mov.w	r3, #532	; 0x214
   1e69a:	f009 fc85 	bl	27fa8 <printk>
   1e69e:	4040      	eors	r0, r0
   1e6a0:	f380 8811 	msr	BASEPRI, r0
   1e6a4:	f04f 0003 	mov.w	r0, #3
   1e6a8:	df02      	svc	2
}
   1e6aa:	2000      	movs	r0, #0
   1e6ac:	b00c      	add	sp, #48	; 0x30
   1e6ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			LL_ASSERT(!retval);
   1e6b2:	4a33      	ldr	r2, [pc, #204]	; (1e780 <common_prepare_cb+0x258>)
   1e6b4:	4935      	ldr	r1, [pc, #212]	; (1e78c <common_prepare_cb+0x264>)
   1e6b6:	4834      	ldr	r0, [pc, #208]	; (1e788 <common_prepare_cb+0x260>)
   1e6b8:	f240 230f 	movw	r3, #527	; 0x20f
   1e6bc:	f009 fc74 	bl	27fa8 <printk>
   1e6c0:	4040      	eors	r0, r0
   1e6c2:	f380 8811 	msr	BASEPRI, r0
   1e6c6:	f04f 0003 	mov.w	r0, #3
   1e6ca:	df02      	svc	2
		ret = lll_prepare_done(lll);
   1e6cc:	4620      	mov	r0, r4
   1e6ce:	f7fe ff25 	bl	1d51c <lll_prepare_done>
		LL_ASSERT(!ret);
   1e6d2:	2800      	cmp	r0, #0
   1e6d4:	d0ae      	beq.n	1e634 <common_prepare_cb+0x10c>
   1e6d6:	e7db      	b.n	1e690 <common_prepare_cb+0x168>
		radio_switch_complete_and_disable();
   1e6d8:	f001 fc30 	bl	1ff3c <radio_switch_complete_and_disable>
   1e6dc:	e774      	b.n	1e5c8 <common_prepare_cb+0xa0>
			ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1e6de:	4a2c      	ldr	r2, [pc, #176]	; (1e790 <common_prepare_cb+0x268>)
   1e6e0:	9207      	str	r2, [sp, #28]
   1e6e2:	4a2c      	ldr	r2, [pc, #176]	; (1e794 <common_prepare_cb+0x26c>)
   1e6e4:	9205      	str	r2, [sp, #20]
   1e6e6:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
   1e6ea:	9300      	str	r3, [sp, #0]
   1e6ec:	9208      	str	r2, [sp, #32]
   1e6ee:	4633      	mov	r3, r6
   1e6f0:	e9cd 7703 	strd	r7, r7, [sp, #12]
   1e6f4:	e9cd 7701 	strd	r7, r7, [sp, #4]
   1e6f8:	9406      	str	r4, [sp, #24]
   1e6fa:	4639      	mov	r1, r7
   1e6fc:	2203      	movs	r2, #3
   1e6fe:	f7f3 fda1 	bl	12244 <ticker_start>
			LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1e702:	f030 0302 	bics.w	r3, r0, #2
   1e706:	d086      	beq.n	1e616 <common_prepare_cb+0xee>
   1e708:	4a1d      	ldr	r2, [pc, #116]	; (1e780 <common_prepare_cb+0x258>)
   1e70a:	4923      	ldr	r1, [pc, #140]	; (1e798 <common_prepare_cb+0x270>)
   1e70c:	481e      	ldr	r0, [pc, #120]	; (1e788 <common_prepare_cb+0x260>)
   1e70e:	f240 13fb 	movw	r3, #507	; 0x1fb
   1e712:	f009 fc49 	bl	27fa8 <printk>
   1e716:	4040      	eors	r0, r0
   1e718:	f380 8811 	msr	BASEPRI, r0
   1e71c:	f04f 0003 	mov.w	r0, #3
   1e720:	df02      	svc	2
   1e722:	e778      	b.n	1e616 <common_prepare_cb+0xee>
	LL_ASSERT(node_rx);
   1e724:	4a16      	ldr	r2, [pc, #88]	; (1e780 <common_prepare_cb+0x258>)
   1e726:	491d      	ldr	r1, [pc, #116]	; (1e79c <common_prepare_cb+0x274>)
   1e728:	4817      	ldr	r0, [pc, #92]	; (1e788 <common_prepare_cb+0x260>)
   1e72a:	f240 138d 	movw	r3, #397	; 0x18d
   1e72e:	f009 fc3b 	bl	27fa8 <printk>
   1e732:	4040      	eors	r0, r0
   1e734:	f380 8811 	msr	BASEPRI, r0
   1e738:	f04f 0003 	mov.w	r0, #3
   1e73c:	df02      	svc	2
   1e73e:	e71b      	b.n	1e578 <common_prepare_cb+0x50>
	if (unlikely(lll->is_stop ||
   1e740:	6863      	ldr	r3, [r4, #4]
   1e742:	f893 3020 	ldrb.w	r3, [r3, #32]
   1e746:	07d9      	lsls	r1, r3, #31
   1e748:	d405      	bmi.n	1e756 <common_prepare_cb+0x22e>
   1e74a:	6863      	ldr	r3, [r4, #4]
   1e74c:	f893 3020 	ldrb.w	r3, [r3, #32]
   1e750:	079a      	lsls	r2, r3, #30
   1e752:	f57f aef8 	bpl.w	1e546 <common_prepare_cb+0x1e>
		radio_isr_set(lll_isr_early_abort, lll);
   1e756:	4812      	ldr	r0, [pc, #72]	; (1e7a0 <common_prepare_cb+0x278>)
   1e758:	4621      	mov	r1, r4
   1e75a:	f001 f9eb 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1e75e:	f001 fae5 	bl	1fd2c <radio_disable>
}
   1e762:	2000      	movs	r0, #0
   1e764:	b00c      	add	sp, #48	; 0x30
   1e766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e76a:	bf00      	nop
   1e76c:	8e89bed6 	.word	0x8e89bed6
   1e770:	00555555 	.word	0x00555555
   1e774:	00003569 	.word	0x00003569
   1e778:	20000680 	.word	0x20000680
   1e77c:	0001e84d 	.word	0x0001e84d
   1e780:	00030d88 	.word	0x00030d88
   1e784:	00030354 	.word	0x00030354
   1e788:	0002fedc 	.word	0x0002fedc
   1e78c:	0003037c 	.word	0x0003037c
   1e790:	0001e971 	.word	0x0001e971
   1e794:	0001ea19 	.word	0x0001ea19
   1e798:	00030448 	.word	0x00030448
   1e79c:	00030d34 	.word	0x00030d34
   1e7a0:	0001d781 	.word	0x0001d781

0001e7a4 <prepare_cb>:
	return common_prepare_cb(p, false);
   1e7a4:	2100      	movs	r1, #0
   1e7a6:	f7ff bebf 	b.w	1e528 <common_prepare_cb>
   1e7aa:	bf00      	nop

0001e7ac <isr_common_done>:
{
   1e7ac:	b530      	push	{r4, r5, lr}
   1e7ae:	4604      	mov	r4, r0
   1e7b0:	b083      	sub	sp, #12
	lll_isr_status_reset();
   1e7b2:	f7fe ff8f 	bl	1d6d4 <lll_isr_status_reset>
	lll->state = 0U;
   1e7b6:	7da3      	ldrb	r3, [r4, #22]
   1e7b8:	f36f 0300 	bfc	r3, #0, #1
   1e7bc:	75a3      	strb	r3, [r4, #22]
	} else if (lll->type ||
   1e7be:	069b      	lsls	r3, r3, #26
   1e7c0:	d401      	bmi.n	1e7c6 <isr_common_done+0x1a>
		   lll->conn) {
   1e7c2:	6863      	ldr	r3, [r4, #4]
	} else if (lll->type ||
   1e7c4:	b3b3      	cbz	r3, 1e834 <isr_common_done+0x88>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1e7c6:	2096      	movs	r0, #150	; 0x96
   1e7c8:	f001 fc3c 	bl	20044 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1e7cc:	2300      	movs	r3, #0
   1e7ce:	461a      	mov	r2, r3
   1e7d0:	4619      	mov	r1, r3
   1e7d2:	4618      	mov	r0, r3
   1e7d4:	f001 fb52 	bl	1fe7c <radio_switch_complete_and_tx>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e7d8:	2001      	movs	r0, #1
   1e7da:	f7f6 fb8b 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e7de:	4605      	mov	r5, r0
   1e7e0:	b1d0      	cbz	r0, 1e818 <isr_common_done+0x6c>
	radio_pkt_rx_set(node_rx->pdu);
   1e7e2:	f105 001c 	add.w	r0, r5, #28
   1e7e6:	f001 fa79 	bl	1fcdc <radio_pkt_rx_set>
	if (ull_filter_lll_rl_enabled()) {
   1e7ea:	f7fe fb97 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1e7ee:	b940      	cbnz	r0, 1e802 <isr_common_done+0x56>
	radio_rssi_measure();
   1e7f0:	f001 fbb4 	bl	1ff5c <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1e7f4:	4811      	ldr	r0, [pc, #68]	; (1e83c <isr_common_done+0x90>)
   1e7f6:	4621      	mov	r1, r4
}
   1e7f8:	b003      	add	sp, #12
   1e7fa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_isr_set(isr_rx, param);
   1e7fe:	f001 b999 	b.w	1fb34 <radio_isr_set>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e802:	f10d 0007 	add.w	r0, sp, #7
   1e806:	f7fe fa03 	bl	1cc10 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1e80a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e80c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1e80e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e812:	f001 fdc1 	bl	20398 <radio_ar_configure>
   1e816:	e7eb      	b.n	1e7f0 <isr_common_done+0x44>
	LL_ASSERT(node_rx);
   1e818:	4a09      	ldr	r2, [pc, #36]	; (1e840 <isr_common_done+0x94>)
   1e81a:	490a      	ldr	r1, [pc, #40]	; (1e844 <isr_common_done+0x98>)
   1e81c:	480a      	ldr	r0, [pc, #40]	; (1e848 <isr_common_done+0x9c>)
   1e81e:	f44f 7352 	mov.w	r3, #840	; 0x348
   1e822:	f009 fbc1 	bl	27fa8 <printk>
   1e826:	4040      	eors	r0, r0
   1e828:	f380 8811 	msr	BASEPRI, r0
   1e82c:	f04f 0003 	mov.w	r0, #3
   1e830:	df02      	svc	2
   1e832:	e7d6      	b.n	1e7e2 <isr_common_done+0x36>
		radio_switch_complete_and_disable();
   1e834:	f001 fb82 	bl	1ff3c <radio_switch_complete_and_disable>
   1e838:	e7ce      	b.n	1e7d8 <isr_common_done+0x2c>
   1e83a:	bf00      	nop
   1e83c:	00003569 	.word	0x00003569
   1e840:	00030d88 	.word	0x00030d88
   1e844:	00030d34 	.word	0x00030d34
   1e848:	0002fedc 	.word	0x0002fedc

0001e84c <isr_abort>:
{
   1e84c:	b510      	push	{r4, lr}
   1e84e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1e850:	f7fe ff40 	bl	1d6d4 <lll_isr_status_reset>
	radio_filter_disable();
   1e854:	f001 fbc4 	bl	1ffe0 <radio_filter_disable>
	lll_isr_cleanup(param);
   1e858:	4620      	mov	r0, r4
}
   1e85a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1e85e:	f7fe bf47 	b.w	1d6f0 <lll_isr_cleanup>
   1e862:	bf00      	nop

0001e864 <isr_done>:
{
   1e864:	b508      	push	{r3, lr}
	isr_common_done(param);
   1e866:	f7ff ffa1 	bl	1e7ac <isr_common_done>
	radio_rx_enable();
   1e86a:	f001 fa53 	bl	1fd14 <radio_rx_enable>
}
   1e86e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_end_capture();
   1e872:	f001 bcf3 	b.w	2025c <radio_tmr_end_capture>
   1e876:	bf00      	nop

0001e878 <isr_tx>:
{
   1e878:	b570      	push	{r4, r5, r6, lr}
   1e87a:	b082      	sub	sp, #8
   1e87c:	4605      	mov	r5, r0
	lll_isr_tx_status_reset();
   1e87e:	f7fe ff17 	bl	1d6b0 <lll_isr_tx_status_reset>
	radio_switch_complete_and_disable();
   1e882:	f001 fb5b 	bl	1ff3c <radio_switch_complete_and_disable>
	node_rx = ull_pdu_rx_alloc_peek(1);
   1e886:	2001      	movs	r0, #1
   1e888:	f7f6 fb34 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1e88c:	4604      	mov	r4, r0
   1e88e:	2800      	cmp	r0, #0
   1e890:	d03f      	beq.n	1e912 <isr_tx+0x9a>
	radio_pkt_rx_set(node_rx->pdu);
   1e892:	f104 001c 	add.w	r0, r4, #28
   1e896:	f001 fa21 	bl	1fcdc <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1e89a:	f001 fa67 	bl	1fd6c <radio_is_ready>
   1e89e:	b9e0      	cbnz	r0, 1e8da <isr_tx+0x62>
	if (ull_filter_lll_rl_enabled()) {
   1e8a0:	f7fe fb3c 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1e8a4:	bb50      	cbnz	r0, 1e8fc <isr_tx+0x84>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1e8a6:	f001 fce7 	bl	20278 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   1e8aa:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1e8ac:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   1e8ae:	4608      	mov	r0, r1
   1e8b0:	f001 fa2a 	bl	1fd08 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   1e8b4:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   1e8b6:	4606      	mov	r6, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   1e8b8:	4608      	mov	r0, r1
   1e8ba:	f001 fa21 	bl	1fd00 <radio_tx_chain_delay_get>
   1e8be:	4434      	add	r4, r6
   1e8c0:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1e8c2:	1a20      	subs	r0, r4, r0
   1e8c4:	f001 fc90 	bl	201e8 <radio_tmr_hcto_configure>
	radio_rssi_measure();
   1e8c8:	f001 fb48 	bl	1ff5c <radio_rssi_measure>
	radio_isr_set(isr_rx, param);
   1e8cc:	4818      	ldr	r0, [pc, #96]	; (1e930 <isr_tx+0xb8>)
   1e8ce:	4629      	mov	r1, r5
}
   1e8d0:	b002      	add	sp, #8
   1e8d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	radio_isr_set(isr_rx, param);
   1e8d6:	f001 b92d 	b.w	1fb34 <radio_isr_set>
	LL_ASSERT(!radio_is_ready());
   1e8da:	4a16      	ldr	r2, [pc, #88]	; (1e934 <isr_tx+0xbc>)
   1e8dc:	4916      	ldr	r1, [pc, #88]	; (1e938 <isr_tx+0xc0>)
   1e8de:	4817      	ldr	r0, [pc, #92]	; (1e93c <isr_tx+0xc4>)
   1e8e0:	f240 3306 	movw	r3, #774	; 0x306
   1e8e4:	f009 fb60 	bl	27fa8 <printk>
   1e8e8:	4040      	eors	r0, r0
   1e8ea:	f380 8811 	msr	BASEPRI, r0
   1e8ee:	f04f 0003 	mov.w	r0, #3
   1e8f2:	df02      	svc	2
	if (ull_filter_lll_rl_enabled()) {
   1e8f4:	f7fe fb12 	bl	1cf1c <ull_filter_lll_rl_enabled>
   1e8f8:	2800      	cmp	r0, #0
   1e8fa:	d0d4      	beq.n	1e8a6 <isr_tx+0x2e>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e8fc:	f10d 0007 	add.w	r0, sp, #7
   1e900:	f7fe f986 	bl	1cc10 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1e904:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1e906:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1e908:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1e90c:	f001 fd44 	bl	20398 <radio_ar_configure>
   1e910:	e7c9      	b.n	1e8a6 <isr_tx+0x2e>
	LL_ASSERT(node_rx);
   1e912:	4a08      	ldr	r2, [pc, #32]	; (1e934 <isr_tx+0xbc>)
   1e914:	490a      	ldr	r1, [pc, #40]	; (1e940 <isr_tx+0xc8>)
   1e916:	4809      	ldr	r0, [pc, #36]	; (1e93c <isr_tx+0xc4>)
   1e918:	f240 3302 	movw	r3, #770	; 0x302
   1e91c:	f009 fb44 	bl	27fa8 <printk>
   1e920:	4040      	eors	r0, r0
   1e922:	f380 8811 	msr	BASEPRI, r0
   1e926:	f04f 0003 	mov.w	r0, #3
   1e92a:	df02      	svc	2
   1e92c:	e7b1      	b.n	1e892 <isr_tx+0x1a>
   1e92e:	bf00      	nop
   1e930:	00003569 	.word	0x00003569
   1e934:	00030d88 	.word	0x00030d88
   1e938:	00030d3c 	.word	0x00030d3c
   1e93c:	0002fedc 	.word	0x0002fedc
   1e940:	00030d34 	.word	0x00030d34

0001e944 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   1e944:	68c3      	ldr	r3, [r0, #12]
{
   1e946:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   1e948:	681e      	ldr	r6, [r3, #0]
{
   1e94a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1e94c:	f7f3 fda4 	bl	12498 <ticker_ticks_now_get>
   1e950:	4605      	mov	r5, r0
   1e952:	4630      	mov	r0, r6
   1e954:	f7fe fe48 	bl	1d5e8 <lll_event_offset_get>
	p->remainder = 0;
   1e958:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1e95a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1e95c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1e960:	8123      	strh	r3, [r4, #8]
	return common_prepare_cb(p, true);
   1e962:	4620      	mov	r0, r4
   1e964:	2101      	movs	r1, #1
}
   1e966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return common_prepare_cb(p, true);
   1e96a:	f7ff bddd 	b.w	1e528 <common_prepare_cb>
   1e96e:	bf00      	nop

0001e970 <ticker_op_start_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e970:	b900      	cbnz	r0, 1e974 <ticker_op_start_cb+0x4>
   1e972:	4770      	bx	lr
{
   1e974:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1e976:	4a07      	ldr	r2, [pc, #28]	; (1e994 <ticker_op_start_cb+0x24>)
   1e978:	4907      	ldr	r1, [pc, #28]	; (1e998 <ticker_op_start_cb+0x28>)
   1e97a:	4808      	ldr	r0, [pc, #32]	; (1e99c <ticker_op_start_cb+0x2c>)
   1e97c:	f44f 7324 	mov.w	r3, #656	; 0x290
   1e980:	f009 fb12 	bl	27fa8 <printk>
   1e984:	4040      	eors	r0, r0
   1e986:	f380 8811 	msr	BASEPRI, r0
   1e98a:	f04f 0003 	mov.w	r0, #3
   1e98e:	df02      	svc	2
}
   1e990:	bd08      	pop	{r3, pc}
   1e992:	bf00      	nop
   1e994:	00030d88 	.word	0x00030d88
   1e998:	0003062c 	.word	0x0003062c
   1e99c:	0002fedc 	.word	0x0002fedc

0001e9a0 <is_abort_cb>:
	if (next != curr) {
   1e9a0:	4281      	cmp	r1, r0
{
   1e9a2:	b508      	push	{r3, lr}
	if (next != curr) {
   1e9a4:	d00d      	beq.n	1e9c2 <is_abort_cb+0x22>
			if (!lll->ticks_window) {
   1e9a6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1e9a8:	b113      	cbz	r3, 1e9b0 <is_abort_cb+0x10>
			return -ECANCELED;
   1e9aa:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   1e9ae:	bd08      	pop	{r3, pc}
				*resume_cb = resume_prepare_cb;
   1e9b0:	4b14      	ldr	r3, [pc, #80]	; (1ea04 <is_abort_cb+0x64>)
   1e9b2:	6013      	str	r3, [r2, #0]
				err = lll_hfclock_on();
   1e9b4:	f7ff f834 	bl	1da20 <lll_hfclock_on>
				LL_ASSERT(err >= 0);
   1e9b8:	2800      	cmp	r0, #0
   1e9ba:	db12      	blt.n	1e9e2 <is_abort_cb+0x42>
   1e9bc:	f06f 000a 	mvn.w	r0, #10
}
   1e9c0:	bd08      	pop	{r3, pc}
	} else if (lll->conn && lll->conn->central.initiated) {
   1e9c2:	684b      	ldr	r3, [r1, #4]
   1e9c4:	b123      	cbz	r3, 1e9d0 <is_abort_cb+0x30>
   1e9c6:	684b      	ldr	r3, [r1, #4]
   1e9c8:	f893 3020 	ldrb.w	r3, [r3, #32]
   1e9cc:	07db      	lsls	r3, r3, #31
   1e9ce:	d406      	bmi.n	1e9de <is_abort_cb+0x3e>
		radio_isr_set(isr_window, lll);
   1e9d0:	480d      	ldr	r0, [pc, #52]	; (1ea08 <is_abort_cb+0x68>)
   1e9d2:	f001 f8af 	bl	1fb34 <radio_isr_set>
	radio_disable();
   1e9d6:	f001 f9a9 	bl	1fd2c <radio_disable>
	return 0;
   1e9da:	2000      	movs	r0, #0
}
   1e9dc:	bd08      	pop	{r3, pc}
		return 0;
   1e9de:	2000      	movs	r0, #0
}
   1e9e0:	bd08      	pop	{r3, pc}
				LL_ASSERT(err >= 0);
   1e9e2:	4a0a      	ldr	r2, [pc, #40]	; (1ea0c <is_abort_cb+0x6c>)
   1e9e4:	490a      	ldr	r1, [pc, #40]	; (1ea10 <is_abort_cb+0x70>)
   1e9e6:	480b      	ldr	r0, [pc, #44]	; (1ea14 <is_abort_cb+0x74>)
   1e9e8:	f240 2332 	movw	r3, #562	; 0x232
   1e9ec:	f009 fadc 	bl	27fa8 <printk>
   1e9f0:	4040      	eors	r0, r0
   1e9f2:	f380 8811 	msr	BASEPRI, r0
   1e9f6:	f04f 0003 	mov.w	r0, #3
   1e9fa:	df02      	svc	2
   1e9fc:	f06f 000a 	mvn.w	r0, #10
}
   1ea00:	bd08      	pop	{r3, pc}
   1ea02:	bf00      	nop
   1ea04:	0001e945 	.word	0x0001e945
   1ea08:	000034c9 	.word	0x000034c9
   1ea0c:	00030d88 	.word	0x00030d88
   1ea10:	00030c78 	.word	0x00030c78
   1ea14:	0002fedc 	.word	0x0002fedc

0001ea18 <ticker_stop_cb>:
{
   1ea18:	b508      	push	{r3, lr}
	mfy.param = param;
   1ea1a:	4b0c      	ldr	r3, [pc, #48]	; (1ea4c <ticker_stop_cb+0x34>)
{
   1ea1c:	9803      	ldr	r0, [sp, #12]
	mfy.param = param;
   1ea1e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1ea20:	2200      	movs	r2, #0
   1ea22:	4611      	mov	r1, r2
   1ea24:	2001      	movs	r0, #1
   1ea26:	f7f2 fa41 	bl	10eac <mayfly_enqueue>
	LL_ASSERT(!ret);
   1ea2a:	b900      	cbnz	r0, 1ea2e <ticker_stop_cb+0x16>
}
   1ea2c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1ea2e:	4a08      	ldr	r2, [pc, #32]	; (1ea50 <ticker_stop_cb+0x38>)
   1ea30:	4908      	ldr	r1, [pc, #32]	; (1ea54 <ticker_stop_cb+0x3c>)
   1ea32:	4809      	ldr	r0, [pc, #36]	; (1ea58 <ticker_stop_cb+0x40>)
   1ea34:	f240 2389 	movw	r3, #649	; 0x289
   1ea38:	f009 fab6 	bl	27fa8 <printk>
   1ea3c:	4040      	eors	r0, r0
   1ea3e:	f380 8811 	msr	BASEPRI, r0
   1ea42:	f04f 0003 	mov.w	r0, #3
   1ea46:	df02      	svc	2
}
   1ea48:	bd08      	pop	{r3, pc}
   1ea4a:	bf00      	nop
   1ea4c:	20000670 	.word	0x20000670
   1ea50:	00030d88 	.word	0x00030d88
   1ea54:	00030354 	.word	0x00030354
   1ea58:	0002fedc 	.word	0x0002fedc

0001ea5c <isr_done_cleanup>:
{
   1ea5c:	b530      	push	{r4, r5, lr}
   1ea5e:	4604      	mov	r4, r0
   1ea60:	b085      	sub	sp, #20
	lll_isr_status_reset();
   1ea62:	f7fe fe37 	bl	1d6d4 <lll_isr_status_reset>
	if (lll_is_done(param, &is_resume)) {
   1ea66:	f10d 010f 	add.w	r1, sp, #15
   1ea6a:	4620      	mov	r0, r4
   1ea6c:	f7fe fdaa 	bl	1d5c4 <lll_is_done>
   1ea70:	b9c8      	cbnz	r0, 1eaa6 <isr_done_cleanup+0x4a>
	radio_filter_disable();
   1ea72:	4605      	mov	r5, r0
   1ea74:	f001 fab4 	bl	1ffe0 <radio_filter_disable>
	if (++lll->chan == ADV_CHAN_MAX) {
   1ea78:	7da2      	ldrb	r2, [r4, #22]
   1ea7a:	f3c2 0341 	ubfx	r3, r2, #1, #2
   1ea7e:	3301      	adds	r3, #1
   1ea80:	f003 0303 	and.w	r3, r3, #3
   1ea84:	2b03      	cmp	r3, #3
   1ea86:	bf14      	ite	ne
   1ea88:	f363 0242 	bfine	r2, r3, #1, #2
		lll->chan = 0U;
   1ea8c:	f365 0242 	bfieq	r2, r5, #1, #2
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ea90:	2300      	movs	r3, #0
		lll->chan = 0U;
   1ea92:	75a2      	strb	r2, [r4, #22]
	ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_LLL,
   1ea94:	4619      	mov	r1, r3
   1ea96:	9300      	str	r3, [sp, #0]
   1ea98:	2203      	movs	r2, #3
   1ea9a:	4618      	mov	r0, r3
   1ea9c:	f7f3 fc5c 	bl	12358 <ticker_stop>
	lll_isr_cleanup(param);
   1eaa0:	4620      	mov	r0, r4
   1eaa2:	f7fe fe25 	bl	1d6f0 <lll_isr_cleanup>
}
   1eaa6:	b005      	add	sp, #20
   1eaa8:	bd30      	pop	{r4, r5, pc}
   1eaaa:	bf00      	nop

0001eaac <isr_scan_tgta_check>:
{
   1eaac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eab0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1eab4:	4616      	mov	r6, r2
   1eab6:	4680      	mov	r8, r0
   1eab8:	460d      	mov	r5, r1
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1eaba:	464a      	mov	r2, r9
   1eabc:	4619      	mov	r1, r3
   1eabe:	4630      	mov	r0, r6
{
   1eac0:	461f      	mov	r7, r3
	if (ull_filter_lll_rl_addr_resolve(addr_type, addr, rl_idx)) {
   1eac2:	f7fe fa09 	bl	1ced8 <ull_filter_lll_rl_addr_resolve>
   1eac6:	4604      	mov	r4, r0
   1eac8:	b9a0      	cbnz	r0, 1eaf4 <isr_scan_tgta_check+0x48>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1eaca:	b11d      	cbz	r5, 1ead4 <isr_scan_tgta_check+0x28>
   1eacc:	f898 3017 	ldrb.w	r3, [r8, #23]
   1ead0:	079a      	lsls	r2, r3, #30
   1ead2:	d41c      	bmi.n	1eb0e <isr_scan_tgta_check+0x62>
	return (((lll->init_addr_type == addr_type) &&
   1ead4:	f898 5016 	ldrb.w	r5, [r8, #22]
   1ead8:	f3c5 1380 	ubfx	r3, r5, #6, #1
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1eadc:	42b3      	cmp	r3, r6
   1eade:	d00c      	beq.n	1eafa <isr_scan_tgta_check+0x4e>
	if (((lll->filter_policy & SCAN_FP_EXT) != 0U) && (addr_type != 0U) &&
   1eae0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
   1eae4:	07ab      	lsls	r3, r5, #30
   1eae6:	d505      	bpl.n	1eaf4 <isr_scan_tgta_check+0x48>
   1eae8:	b126      	cbz	r6, 1eaf4 <isr_scan_tgta_check+0x48>
   1eaea:	797b      	ldrb	r3, [r7, #5]
   1eaec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1eaf0:	2b40      	cmp	r3, #64	; 0x40
   1eaf2:	d014      	beq.n	1eb1e <isr_scan_tgta_check+0x72>
}
   1eaf4:	4620      	mov	r0, r4
   1eaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1eafa:	2206      	movs	r2, #6
   1eafc:	4639      	mov	r1, r7
   1eafe:	f108 0019 	add.w	r0, r8, #25
   1eb02:	f00f fd20 	bl	2e546 <memcmp>
	return (((lll->init_addr_type == addr_type) &&
   1eb06:	b140      	cbz	r0, 1eb1a <isr_scan_tgta_check+0x6e>
   1eb08:	f898 5016 	ldrb.w	r5, [r8, #22]
   1eb0c:	e7e8      	b.n	1eae0 <isr_scan_tgta_check+0x34>
	} else if (init && lll->rpa_gen && ull_filter_lll_lrpa_get(rl_idx)) {
   1eb0e:	4648      	mov	r0, r9
   1eb10:	f7fe f864 	bl	1cbdc <ull_filter_lll_lrpa_get>
   1eb14:	2800      	cmp	r0, #0
   1eb16:	d1ed      	bne.n	1eaf4 <isr_scan_tgta_check+0x48>
   1eb18:	e7dc      	b.n	1ead4 <isr_scan_tgta_check+0x28>
			*dir_report = true;
   1eb1a:	2401      	movs	r4, #1
   1eb1c:	e7ea      	b.n	1eaf4 <isr_scan_tgta_check+0x48>
		if (dir_report) {
   1eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1eb20:	2b00      	cmp	r3, #0
   1eb22:	d0fa      	beq.n	1eb1a <isr_scan_tgta_check+0x6e>
			*dir_report = true;
   1eb24:	2401      	movs	r4, #1
   1eb26:	701c      	strb	r4, [r3, #0]
		 !memcmp(lll->init_addr, addr, BDADDR_SIZE))) ||
   1eb28:	e7e4      	b.n	1eaf4 <isr_scan_tgta_check+0x48>
   1eb2a:	bf00      	nop

0001eb2c <abort_cb>:
{
   1eb2c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1eb2e:	b1d8      	cbz	r0, 1eb68 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1eb30:	460c      	mov	r4, r1
   1eb32:	f7fe ff8d 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1eb36:	2800      	cmp	r0, #0
   1eb38:	db04      	blt.n	1eb44 <abort_cb+0x18>
	lll_done(param);
   1eb3a:	4620      	mov	r0, r4
}
   1eb3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1eb40:	f7fe bcee 	b.w	1d520 <lll_done>
	LL_ASSERT(err >= 0);
   1eb44:	4a0c      	ldr	r2, [pc, #48]	; (1eb78 <abort_cb+0x4c>)
   1eb46:	490d      	ldr	r1, [pc, #52]	; (1eb7c <abort_cb+0x50>)
   1eb48:	480d      	ldr	r0, [pc, #52]	; (1eb80 <abort_cb+0x54>)
   1eb4a:	f240 2379 	movw	r3, #633	; 0x279
   1eb4e:	f009 fa2b 	bl	27fa8 <printk>
   1eb52:	4040      	eors	r0, r0
   1eb54:	f380 8811 	msr	BASEPRI, r0
   1eb58:	f04f 0003 	mov.w	r0, #3
   1eb5c:	df02      	svc	2
	lll_done(param);
   1eb5e:	4620      	mov	r0, r4
}
   1eb60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1eb64:	f7fe bcdc 	b.w	1d520 <lll_done>
			radio_isr_set(isr_done_cleanup, param);
   1eb68:	4806      	ldr	r0, [pc, #24]	; (1eb84 <abort_cb+0x58>)
   1eb6a:	f000 ffe3 	bl	1fb34 <radio_isr_set>
}
   1eb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			radio_disable();
   1eb72:	f001 b8db 	b.w	1fd2c <radio_disable>
   1eb76:	bf00      	nop
   1eb78:	00030d88 	.word	0x00030d88
   1eb7c:	00030c78 	.word	0x00030c78
   1eb80:	0002fedc 	.word	0x0002fedc
   1eb84:	0001ea5d 	.word	0x0001ea5d

0001eb88 <lll_scan_init>:
}
   1eb88:	2000      	movs	r0, #0
   1eb8a:	4770      	bx	lr

0001eb8c <lll_scan_reset>:
   1eb8c:	2000      	movs	r0, #0
   1eb8e:	4770      	bx	lr

0001eb90 <lll_scan_prepare>:
{
   1eb90:	b510      	push	{r4, lr}
   1eb92:	b082      	sub	sp, #8
   1eb94:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1eb96:	f7fe ff43 	bl	1da20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1eb9a:	2800      	cmp	r0, #0
   1eb9c:	db19      	blt.n	1ebd2 <lll_scan_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1eb9e:	4a13      	ldr	r2, [pc, #76]	; (1ebec <lll_scan_prepare+0x5c>)
   1eba0:	4913      	ldr	r1, [pc, #76]	; (1ebf0 <lll_scan_prepare+0x60>)
   1eba2:	4814      	ldr	r0, [pc, #80]	; (1ebf4 <lll_scan_prepare+0x64>)
   1eba4:	9400      	str	r4, [sp, #0]
   1eba6:	2300      	movs	r3, #0
   1eba8:	f7f6 fce0 	bl	1556c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ebac:	b108      	cbz	r0, 1ebb2 <lll_scan_prepare+0x22>
   1ebae:	3077      	adds	r0, #119	; 0x77
   1ebb0:	d101      	bne.n	1ebb6 <lll_scan_prepare+0x26>
}
   1ebb2:	b002      	add	sp, #8
   1ebb4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1ebb6:	4a10      	ldr	r2, [pc, #64]	; (1ebf8 <lll_scan_prepare+0x68>)
   1ebb8:	4910      	ldr	r1, [pc, #64]	; (1ebfc <lll_scan_prepare+0x6c>)
   1ebba:	4811      	ldr	r0, [pc, #68]	; (1ec00 <lll_scan_prepare+0x70>)
   1ebbc:	238b      	movs	r3, #139	; 0x8b
   1ebbe:	f009 f9f3 	bl	27fa8 <printk>
   1ebc2:	4040      	eors	r0, r0
   1ebc4:	f380 8811 	msr	BASEPRI, r0
   1ebc8:	f04f 0003 	mov.w	r0, #3
   1ebcc:	df02      	svc	2
}
   1ebce:	b002      	add	sp, #8
   1ebd0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1ebd2:	4a09      	ldr	r2, [pc, #36]	; (1ebf8 <lll_scan_prepare+0x68>)
   1ebd4:	490b      	ldr	r1, [pc, #44]	; (1ec04 <lll_scan_prepare+0x74>)
   1ebd6:	480a      	ldr	r0, [pc, #40]	; (1ec00 <lll_scan_prepare+0x70>)
   1ebd8:	2388      	movs	r3, #136	; 0x88
   1ebda:	f009 f9e5 	bl	27fa8 <printk>
   1ebde:	4040      	eors	r0, r0
   1ebe0:	f380 8811 	msr	BASEPRI, r0
   1ebe4:	f04f 0003 	mov.w	r0, #3
   1ebe8:	df02      	svc	2
   1ebea:	e7d8      	b.n	1eb9e <lll_scan_prepare+0xe>
   1ebec:	0001e7a5 	.word	0x0001e7a5
   1ebf0:	0001eb2d 	.word	0x0001eb2d
   1ebf4:	0001e9a1 	.word	0x0001e9a1
   1ebf8:	00030d88 	.word	0x00030d88
   1ebfc:	00030d64 	.word	0x00030d64
   1ec00:	0002fedc 	.word	0x0002fedc
   1ec04:	00030c78 	.word	0x00030c78

0001ec08 <lll_scan_isr_rx_check>:
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1ec08:	f890 c016 	ldrb.w	ip, [r0, #22]
							       rl_idx))) ||
   1ec0c:	f01c 0f08 	tst.w	ip, #8
   1ec10:	d002      	beq.n	1ec18 <lll_scan_isr_rx_check+0x10>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1ec12:	b162      	cbz	r2, 1ec2e <lll_scan_isr_rx_check+0x26>
{
   1ec14:	2001      	movs	r0, #1
}
   1ec16:	4770      	bx	lr
	return (((lll->filter_policy & SCAN_FP_FILTER) == 0U) &&
   1ec18:	2a00      	cmp	r2, #0
   1ec1a:	d0fb      	beq.n	1ec14 <lll_scan_isr_rx_check+0xc>
{
   1ec1c:	b510      	push	{r4, lr}
   1ec1e:	4604      	mov	r4, r0
   1ec20:	4608      	mov	r0, r1
		(!devmatch_ok || ull_filter_lll_rl_idx_allowed(irkmatch_ok,
   1ec22:	4619      	mov	r1, r3
   1ec24:	f7fe f8ea 	bl	1cdfc <ull_filter_lll_rl_idx_allowed>
   1ec28:	b120      	cbz	r0, 1ec34 <lll_scan_isr_rx_check+0x2c>
{
   1ec2a:	2001      	movs	r0, #1
}
   1ec2c:	bd10      	pop	{r4, pc}
		(devmatch_ok || ull_filter_lll_irk_in_fal(rl_idx)));
   1ec2e:	4618      	mov	r0, r3
   1ec30:	f7fe b8b4 	b.w	1cd9c <ull_filter_lll_irk_in_fal>
	       (((lll->filter_policy & SCAN_FP_FILTER) != 0U) &&
   1ec34:	7da3      	ldrb	r3, [r4, #22]
							       rl_idx))) ||
   1ec36:	071b      	lsls	r3, r3, #28
   1ec38:	d4f7      	bmi.n	1ec2a <lll_scan_isr_rx_check+0x22>
}
   1ec3a:	bd10      	pop	{r4, pc}

0001ec3c <lll_scan_prepare_connect_req>:
{
   1ec3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ec40:	460c      	mov	r4, r1
   1ec42:	f89d 101c 	ldrb.w	r1, [sp, #28]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1ec46:	0189      	lsls	r1, r1, #6
   1ec48:	f001 0140 	and.w	r1, r1, #64	; 0x40
   1ec4c:	f041 0125 	orr.w	r1, r1, #37	; 0x25
   1ec50:	ea41 11c3 	orr.w	r1, r1, r3, lsl #7
   1ec54:	7823      	ldrb	r3, [r4, #0]
{
   1ec56:	4606      	mov	r6, r0
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1ec58:	f003 0310 	and.w	r3, r3, #16
{
   1ec5c:	4690      	mov	r8, r2
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1ec5e:	4319      	orrs	r1, r3
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1ec60:	2222      	movs	r2, #34	; 0x22
{
   1ec62:	9b08      	ldr	r3, [sp, #32]
	lll_conn = lll->conn;
   1ec64:	6877      	ldr	r7, [r6, #4]
	pdu_tx->len = sizeof(struct pdu_adv_connect_ind);
   1ec66:	7062      	strb	r2, [r4, #1]
	pdu_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1ec68:	7021      	strb	r1, [r4, #0]
   1ec6a:	681a      	ldr	r2, [r3, #0]
   1ec6c:	f8c4 2002 	str.w	r2, [r4, #2]
   1ec70:	889b      	ldrh	r3, [r3, #4]
{
   1ec72:	9806      	ldr	r0, [sp, #24]
   1ec74:	80e3      	strh	r3, [r4, #6]
   1ec76:	6803      	ldr	r3, [r0, #0]
   1ec78:	60a3      	str	r3, [r4, #8]
   1ec7a:	8883      	ldrh	r3, [r0, #4]
   1ec7c:	81a3      	strh	r3, [r4, #12]
   1ec7e:	687b      	ldr	r3, [r7, #4]
   1ec80:	f8c4 300e 	str.w	r3, [r4, #14]
   1ec84:	893b      	ldrh	r3, [r7, #8]
   1ec86:	7aba      	ldrb	r2, [r7, #10]
   1ec88:	8263      	strh	r3, [r4, #18]
	pdu_tx->connect_ind.win_size = 1;
   1ec8a:	2301      	movs	r3, #1
   1ec8c:	7522      	strb	r2, [r4, #20]
   1ec8e:	7563      	strb	r3, [r4, #21]
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1ec90:	89fd      	ldrh	r5, [r7, #14]
	conn_offset_us = radio_tmr_end_get() + EVENT_IFS_US +
   1ec92:	f001 faeb 	bl	2026c <radio_tmr_end_get>
			 PDU_AC_MAX_US(sizeof(struct pdu_adv_connect_ind),
   1ec96:	f1b8 0f00 	cmp.w	r8, #0
   1ec9a:	d043      	beq.n	1ed24 <lll_scan_prepare_connect_req+0xe8>
   1ec9c:	f008 0203 	and.w	r2, r8, #3
   1eca0:	322b      	adds	r2, #43	; 0x2b
   1eca2:	00d2      	lsls	r2, r2, #3
   1eca4:	f3c8 0840 	ubfx	r8, r8, #1, #1
   1eca8:	fa22 f808 	lsr.w	r8, r2, r8
	    lll->conn_win_offset_us == 0U) {
   1ecac:	6933      	ldr	r3, [r6, #16]
		conn_offset_us += WIN_DELAY_LEGACY;
   1ecae:	f500 62af 	add.w	r2, r0, #1400	; 0x578
   1ecb2:	4442      	add	r2, r8
	if (!IS_ENABLED(CONFIG_BT_CTLR_SCHED_ADVANCED) ||
   1ecb4:	b38b      	cbz	r3, 1ed1a <lll_scan_prepare_connect_req+0xde>
	conn_interval_us = (uint32_t)lll_conn->interval * CONN_INT_UNIT_US;
   1ecb6:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1ecba:	fb01 f505 	mul.w	r5, r1, r5
		while ((win_offset_us & ((uint32_t)1 << 31)) ||
   1ecbe:	2b00      	cmp	r3, #0
   1ecc0:	db01      	blt.n	1ecc6 <lll_scan_prepare_connect_req+0x8a>
   1ecc2:	4293      	cmp	r3, r2
   1ecc4:	d201      	bcs.n	1ecca <lll_scan_prepare_connect_req+0x8e>
			win_offset_us += conn_interval_us;
   1ecc6:	442b      	add	r3, r5
   1ecc8:	e7f9      	b.n	1ecbe <lll_scan_prepare_connect_req+0x82>
		*conn_space_us = win_offset_us;
   1ecca:	9909      	ldr	r1, [sp, #36]	; 0x24
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1eccc:	1a9a      	subs	r2, r3, r2
		*conn_space_us = win_offset_us;
   1ecce:	600b      	str	r3, [r1, #0]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1ecd0:	4b16      	ldr	r3, [pc, #88]	; (1ed2c <lll_scan_prepare_connect_req+0xf0>)
   1ecd2:	fba3 3202 	umull	r3, r2, r3, r2
		pdu_tx->connect_ind.win_size++;
   1ecd6:	7d63      	ldrb	r3, [r4, #21]
			sys_cpu_to_le16((win_offset_us - conn_offset_us) /
   1ecd8:	0a92      	lsrs	r2, r2, #10
		pdu_tx->connect_ind.win_size++;
   1ecda:	3301      	adds	r3, #1
		pdu_tx->connect_ind.win_offset =
   1ecdc:	82e2      	strh	r2, [r4, #22]
		pdu_tx->connect_ind.win_size++;
   1ecde:	7563      	strb	r3, [r4, #21]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1ece0:	8a3a      	ldrh	r2, [r7, #16]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1ece2:	8ab3      	ldrh	r3, [r6, #20]
	pdu_tx->connect_ind.interval = sys_cpu_to_le16(lll_conn->interval);
   1ece4:	89f9      	ldrh	r1, [r7, #14]
   1ece6:	8321      	strh	r1, [r4, #24]
	pdu_tx->connect_ind.latency = sys_cpu_to_le16(lll_conn->latency);
   1ece8:	8362      	strh	r2, [r4, #26]
	pdu_tx->connect_ind.timeout = sys_cpu_to_le16(lll->conn_timeout);
   1ecea:	83a3      	strh	r3, [r4, #28]
   1ecec:	69bb      	ldr	r3, [r7, #24]
   1ecee:	f8c4 301e 	str.w	r3, [r4, #30]
   1ecf2:	7f3b      	ldrb	r3, [r7, #28]
   1ecf4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	pdu_tx->connect_ind.hop = lll_conn->data_chan_hop;
   1ecf8:	7fba      	ldrb	r2, [r7, #30]
   1ecfa:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ecfe:	f362 0304 	bfi	r3, r2, #0, #5
   1ed02:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	pdu_tx->connect_ind.sca = lll_clock_sca_local_get();
   1ed06:	f7fe fec1 	bl	1da8c <lll_clock_sca_local_get>
   1ed0a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1ed0e:	f360 1347 	bfi	r3, r0, #5, #3
   1ed12:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
   1ed16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		*conn_space_us = conn_offset_us;
   1ed1a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1ed1c:	600a      	str	r2, [r1, #0]
		pdu_tx->connect_ind.win_offset = sys_cpu_to_le16(0);
   1ed1e:	75a3      	strb	r3, [r4, #22]
   1ed20:	75e3      	strb	r3, [r4, #23]
   1ed22:	e7dd      	b.n	1ece0 <lll_scan_prepare_connect_req+0xa4>
   1ed24:	f44f 78b0 	mov.w	r8, #352	; 0x160
   1ed28:	e7c0      	b.n	1ecac <lll_scan_prepare_connect_req+0x70>
   1ed2a:	bf00      	nop
   1ed2c:	d1b71759 	.word	0xd1b71759

0001ed30 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1ed30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ed32:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1ed34:	f7fe fcce 	bl	1d6d4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1ed38:	f7f6 f9e4 	bl	15104 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1ed3c:	4604      	mov	r4, r0
   1ed3e:	2800      	cmp	r0, #0
   1ed40:	d036      	beq.n	1edb0 <isr_done+0x80>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
	e->crc_valid = crc_valid;
   1ed42:	4922      	ldr	r1, [pc, #136]	; (1edcc <isr_done+0x9c>)
   1ed44:	79a2      	ldrb	r2, [r4, #6]
   1ed46:	7808      	ldrb	r0, [r1, #0]
	e->trx_cnt = trx_cnt;
   1ed48:	4b21      	ldr	r3, [pc, #132]	; (1edd0 <isr_done+0xa0>)
	e->crc_valid = crc_valid;
   1ed4a:	f360 0200 	bfi	r2, r0, #0, #1
   1ed4e:	71a2      	strb	r2, [r4, #6]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1ed50:	4a20      	ldr	r2, [pc, #128]	; (1edd4 <isr_done+0xa4>)
	e->trx_cnt = trx_cnt;
   1ed52:	881b      	ldrh	r3, [r3, #0]
	e->mic_state = mic_state;
   1ed54:	7812      	ldrb	r2, [r2, #0]
	e->trx_cnt = trx_cnt;
   1ed56:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1ed58:	2101      	movs	r1, #1
   1ed5a:	7021      	strb	r1, [r4, #0]
	e->mic_state = mic_state;
   1ed5c:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1ed5e:	b11b      	cbz	r3, 1ed68 <isr_done+0x38>
		struct lll_conn *lll = param;

		if (lll->role) {
   1ed60:	f995 301d 	ldrsb.w	r3, [r5, #29]
   1ed64:	2b00      	cmp	r3, #0
   1ed66:	db04      	blt.n	1ed72 <isr_done+0x42>
			lll->periph.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1ed68:	4628      	mov	r0, r5
}
   1ed6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1ed6e:	f7fe bcbf 	b.w	1d6f0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1ed72:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   1ed76:	f003 0307 	and.w	r3, r3, #7
 */
#define HCTO_START_DELAY_US 1U

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1ed7a:	2b02      	cmp	r3, #2
   1ed7c:	d016      	beq.n	1edac <isr_done+0x7c>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1ed7e:	2b04      	cmp	r3, #4
   1ed80:	bf14      	ite	ne
   1ed82:	2728      	movne	r7, #40	; 0x28
   1ed84:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1ed88:	f001 fa5c 	bl	20244 <radio_tmr_aa_restore>
   1ed8c:	4606      	mov	r6, r0
   1ed8e:	f001 fa5f 	bl	20250 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1ed92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1ed94:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1ed96:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1ed98:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->periph.window_widening_event_us = 0;
   1ed9c:	2300      	movs	r3, #0
   1ed9e:	632b      	str	r3, [r5, #48]	; 0x30
			lll->periph.window_size_event_us = 0;
   1eda0:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   1eda2:	4628      	mov	r0, r5
}
   1eda4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1eda8:	f7fe bca2 	b.w	1d6f0 <lll_isr_cleanup>
	switch (phy) {
   1edac:	2718      	movs	r7, #24
   1edae:	e7eb      	b.n	1ed88 <isr_done+0x58>
	LL_ASSERT(e);
   1edb0:	4a09      	ldr	r2, [pc, #36]	; (1edd8 <isr_done+0xa8>)
   1edb2:	490a      	ldr	r1, [pc, #40]	; (1eddc <isr_done+0xac>)
   1edb4:	480a      	ldr	r0, [pc, #40]	; (1ede0 <isr_done+0xb0>)
   1edb6:	f240 3317 	movw	r3, #791	; 0x317
   1edba:	f009 f8f5 	bl	27fa8 <printk>
   1edbe:	4040      	eors	r0, r0
   1edc0:	f380 8811 	msr	BASEPRI, r0
   1edc4:	f04f 0003 	mov.w	r0, #3
   1edc8:	df02      	svc	2
   1edca:	e7ba      	b.n	1ed42 <isr_done+0x12>
   1edcc:	20003b02 	.word	0x20003b02
   1edd0:	2000397c 	.word	0x2000397c
   1edd4:	20003b03 	.word	0x20003b03
   1edd8:	00030de8 	.word	0x00030de8
   1eddc:	00030474 	.word	0x00030474
   1ede0:	0002fedc 	.word	0x0002fedc

0001ede4 <lll_conn_init>:
{
   1ede4:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1ede6:	f000 fff5 	bl	1fdd4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1edea:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1edec:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1edee:	2101      	movs	r1, #1
   1edf0:	f361 0201 	bfi	r2, r1, #0, #2
}
   1edf4:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1edf6:	701a      	strb	r2, [r3, #0]
}
   1edf8:	bd08      	pop	{r3, pc}
   1edfa:	bf00      	nop

0001edfc <lll_conn_reset>:
}
   1edfc:	2000      	movs	r0, #0
   1edfe:	4770      	bx	lr

0001ee00 <lll_conn_flush>:
}
   1ee00:	4770      	bx	lr
   1ee02:	bf00      	nop

0001ee04 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1ee04:	4805      	ldr	r0, [pc, #20]	; (1ee1c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1ee06:	4906      	ldr	r1, [pc, #24]	; (1ee20 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1ee08:	4a06      	ldr	r2, [pc, #24]	; (1ee24 <lll_conn_prepare_reset+0x20>)
{
   1ee0a:	b410      	push	{r4}
	trx_cnt = 0U;
   1ee0c:	2300      	movs	r3, #0
   1ee0e:	4c06      	ldr	r4, [pc, #24]	; (1ee28 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1ee10:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1ee12:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1ee14:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1ee16:	8023      	strh	r3, [r4, #0]
}
   1ee18:	bc10      	pop	{r4}
   1ee1a:	4770      	bx	lr
   1ee1c:	20003b02 	.word	0x20003b02
   1ee20:	20003b01 	.word	0x20003b01
   1ee24:	20003b03 	.word	0x20003b03
   1ee28:	2000397c 	.word	0x2000397c

0001ee2c <lll_conn_abort_cb>:
{
   1ee2c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1ee2e:	b1e8      	cbz	r0, 1ee6c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   1ee30:	460d      	mov	r5, r1
   1ee32:	4604      	mov	r4, r0
   1ee34:	f7fe fe0c 	bl	1da50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1ee38:	2800      	cmp	r0, #0
   1ee3a:	db0a      	blt.n	1ee52 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1ee3c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1ee3e:	8923      	ldrh	r3, [r4, #8]
   1ee40:	8a51      	ldrh	r1, [r2, #18]
   1ee42:	3301      	adds	r3, #1
   1ee44:	440b      	add	r3, r1
   1ee46:	8253      	strh	r3, [r2, #18]
	lll_done(param);
   1ee48:	4628      	mov	r0, r5
}
   1ee4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1ee4e:	f7fe bb67 	b.w	1d520 <lll_done>
	LL_ASSERT(err >= 0);
   1ee52:	4a0a      	ldr	r2, [pc, #40]	; (1ee7c <lll_conn_abort_cb+0x50>)
   1ee54:	490a      	ldr	r1, [pc, #40]	; (1ee80 <lll_conn_abort_cb+0x54>)
   1ee56:	480b      	ldr	r0, [pc, #44]	; (1ee84 <lll_conn_abort_cb+0x58>)
   1ee58:	23aa      	movs	r3, #170	; 0xaa
   1ee5a:	f009 f8a5 	bl	27fa8 <printk>
   1ee5e:	4040      	eors	r0, r0
   1ee60:	f380 8811 	msr	BASEPRI, r0
   1ee64:	f04f 0003 	mov.w	r0, #3
   1ee68:	df02      	svc	2
   1ee6a:	e7e7      	b.n	1ee3c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1ee6c:	4806      	ldr	r0, [pc, #24]	; (1ee88 <lll_conn_abort_cb+0x5c>)
   1ee6e:	f000 fe61 	bl	1fb34 <radio_isr_set>
}
   1ee72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   1ee76:	f000 bf59 	b.w	1fd2c <radio_disable>
   1ee7a:	bf00      	nop
   1ee7c:	00030de8 	.word	0x00030de8
   1ee80:	00030c78 	.word	0x00030c78
   1ee84:	0002fedc 	.word	0x0002fedc
   1ee88:	0001ed31 	.word	0x0001ed31

0001ee8c <lll_conn_rx_pkt_set>:
{
   1ee8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee8e:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1ee90:	2001      	movs	r0, #1
   1ee92:	f7f6 f82f 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1ee96:	4607      	mov	r7, r0
   1ee98:	b350      	cbz	r0, 1eef0 <lll_conn_rx_pkt_set+0x64>
	phy = lll->phy_rx;
   1ee9a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   1ee9e:	8fe6      	ldrh	r6, [r4, #62]	; 0x3e
	phy = lll->phy_rx;
   1eea0:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   1eea4:	2100      	movs	r1, #0
   1eea6:	4628      	mov	r0, r5
   1eea8:	f000 feaa 	bl	1fc00 <radio_phy_set>
	} else if (lll->enc_rx) {
   1eeac:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
				    RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1eeb0:	006a      	lsls	r2, r5, #1
	} else if (lll->enc_rx) {
   1eeb2:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1eeb4:	b2f1      	uxtb	r1, r6
   1eeb6:	f042 0201 	orr.w	r2, r2, #1
	} else if (lll->enc_rx) {
   1eeba:	d510      	bpl.n	1eede <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_rx_octets + PDU_MIC_SIZE),
   1eebc:	3104      	adds	r1, #4
   1eebe:	b2c9      	uxtb	r1, r1
   1eec0:	2008      	movs	r0, #8
   1eec2:	f000 fee3 	bl	1fc8c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1eec6:	f000 ff8d 	bl	1fde4 <radio_pkt_decrypt_get>
   1eeca:	4629      	mov	r1, r5
   1eecc:	4602      	mov	r2, r0
   1eece:	f104 005f 	add.w	r0, r4, #95	; 0x5f
   1eed2:	f001 f9d7 	bl	20284 <radio_ccm_rx_pkt_set>
}
   1eed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1eeda:	f000 beff 	b.w	1fcdc <radio_pkt_rx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_rx_octets,
   1eede:	2008      	movs	r0, #8
   1eee0:	f000 fed4 	bl	1fc8c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1eee4:	f107 001c 	add.w	r0, r7, #28
}
   1eee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1eeec:	f000 bef6 	b.w	1fcdc <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1eef0:	4a06      	ldr	r2, [pc, #24]	; (1ef0c <lll_conn_rx_pkt_set+0x80>)
   1eef2:	4907      	ldr	r1, [pc, #28]	; (1ef10 <lll_conn_rx_pkt_set+0x84>)
   1eef4:	4807      	ldr	r0, [pc, #28]	; (1ef14 <lll_conn_rx_pkt_set+0x88>)
   1eef6:	f240 235a 	movw	r3, #602	; 0x25a
   1eefa:	f009 f855 	bl	27fa8 <printk>
   1eefe:	4040      	eors	r0, r0
   1ef00:	f380 8811 	msr	BASEPRI, r0
   1ef04:	f04f 0003 	mov.w	r0, #3
   1ef08:	df02      	svc	2
   1ef0a:	e7c6      	b.n	1ee9a <lll_conn_rx_pkt_set+0xe>
   1ef0c:	00030de8 	.word	0x00030de8
   1ef10:	00030d34 	.word	0x00030d34
   1ef14:	0002fedc 	.word	0x0002fedc

0001ef18 <lll_conn_isr_tx>:
{
   1ef18:	b538      	push	{r3, r4, r5, lr}
   1ef1a:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1ef1c:	f7fe fbc8 	bl	1d6b0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1ef20:	2096      	movs	r0, #150	; 0x96
   1ef22:	f001 f88f 	bl	20044 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1ef26:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1ef2a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1ef2e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1ef32:	f000 0007 	and.w	r0, r0, #7
   1ef36:	f002 0207 	and.w	r2, r2, #7
   1ef3a:	2100      	movs	r1, #0
   1ef3c:	f000 ff9e 	bl	1fe7c <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1ef40:	4620      	mov	r0, r4
   1ef42:	f7ff ffa3 	bl	1ee8c <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1ef46:	f000 ff11 	bl	1fd6c <radio_is_ready>
   1ef4a:	bb58      	cbnz	r0, 1efa4 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + (EVENT_CLOCK_JITTER_US << 1) +
   1ef4c:	f001 f994 	bl	20278 <radio_tmr_tifs_base_get>
   1ef50:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1ef52:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1ef56:	2101      	movs	r1, #1
   1ef58:	f000 0007 	and.w	r0, r0, #7
   1ef5c:	f000 fed4 	bl	1fd08 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1ef60:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   1ef64:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1ef68:	4405      	add	r5, r0
   1ef6a:	2b02      	cmp	r3, #2
   1ef6c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1ef70:	d016      	beq.n	1efa0 <lll_conn_isr_tx+0x88>
		return 376;
   1ef72:	2b04      	cmp	r3, #4
   1ef74:	bf14      	ite	ne
   1ef76:	2328      	movne	r3, #40	; 0x28
   1ef78:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1ef7c:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   1ef80:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1ef84:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1ef88:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1ef8a:	f000 feb9 	bl	1fd00 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1ef8e:	1a28      	subs	r0, r5, r0
   1ef90:	f001 f92a 	bl	201e8 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1ef94:	4621      	mov	r1, r4
   1ef96:	480a      	ldr	r0, [pc, #40]	; (1efc0 <lll_conn_isr_tx+0xa8>)
}
   1ef98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1ef9c:	f000 bdca 	b.w	1fb34 <radio_isr_set>
	switch (phy) {
   1efa0:	2318      	movs	r3, #24
   1efa2:	e7eb      	b.n	1ef7c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1efa4:	4a07      	ldr	r2, [pc, #28]	; (1efc4 <lll_conn_isr_tx+0xac>)
   1efa6:	4908      	ldr	r1, [pc, #32]	; (1efc8 <lll_conn_isr_tx+0xb0>)
   1efa8:	4808      	ldr	r0, [pc, #32]	; (1efcc <lll_conn_isr_tx+0xb4>)
   1efaa:	f240 2313 	movw	r3, #531	; 0x213
   1efae:	f008 fffb 	bl	27fa8 <printk>
   1efb2:	4040      	eors	r0, r0
   1efb4:	f380 8811 	msr	BASEPRI, r0
   1efb8:	f04f 0003 	mov.w	r0, #3
   1efbc:	df02      	svc	2
   1efbe:	e7c5      	b.n	1ef4c <lll_conn_isr_tx+0x34>
   1efc0:	0001f109 	.word	0x0001f109
   1efc4:	00030de8 	.word	0x00030de8
   1efc8:	00030d3c 	.word	0x00030d3c
   1efcc:	0002fedc 	.word	0x0002fedc

0001efd0 <lll_conn_tx_pkt_set>:
{
   1efd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1efd2:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   1efd4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   1efd8:	8f86      	ldrh	r6, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   1efda:	f001 0407 	and.w	r4, r1, #7
{
   1efde:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   1efe0:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1efe4:	4620      	mov	r0, r4
   1efe6:	f000 fe0b 	bl	1fc00 <radio_phy_set>
	} else if (lll->enc_tx) {
   1efea:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1efee:	0062      	lsls	r2, r4, #1
	} else if (lll->enc_tx) {
   1eff0:	06db      	lsls	r3, r3, #27
		pkt_flags = RADIO_PKT_CONF_FLAGS(RADIO_PKT_CONF_PDU_TYPE_DC, phy,
   1eff2:	f042 0201 	orr.w	r2, r2, #1
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1eff6:	b2f1      	uxtb	r1, r6
	} else if (lll->enc_tx) {
   1eff8:	d50d      	bpl.n	1f016 <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, (max_tx_octets + PDU_MIC_SIZE),
   1effa:	3104      	adds	r1, #4
   1effc:	b2c9      	uxtb	r1, r1
   1effe:	2008      	movs	r0, #8
   1f000:	f000 fe44 	bl	1fc8c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1f004:	4639      	mov	r1, r7
   1f006:	f105 0080 	add.w	r0, r5, #128	; 0x80
   1f00a:	f001 f971 	bl	202f0 <radio_ccm_tx_pkt_set>
}
   1f00e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx, pdu_data_tx));
   1f012:	f000 be69 	b.w	1fce8 <radio_pkt_tx_set>
		radio_pkt_configure(RADIO_PKT_CONF_LENGTH_8BIT, max_tx_octets, pkt_flags);
   1f016:	2008      	movs	r0, #8
   1f018:	f000 fe38 	bl	1fc8c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1f01c:	4638      	mov	r0, r7
}
   1f01e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1f022:	f000 be61 	b.w	1fce8 <radio_pkt_tx_set>
   1f026:	bf00      	nop

0001f028 <lll_conn_pdu_tx_prep>:
{
   1f028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f02c:	4604      	mov	r4, r0
   1f02e:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f030:	aa01      	add	r2, sp, #4
   1f032:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   1f034:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f036:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   1f038:	f7f1 fece 	bl	10dd8 <memq_peek>
	if (lll->empty || !link) {
   1f03c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f040:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1f042:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1f044:	d432      	bmi.n	1f0ac <lll_conn_pdu_tx_prep+0x84>
   1f046:	2800      	cmp	r0, #0
   1f048:	d04e      	beq.n	1f0e8 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1f04a:	9b01      	ldr	r3, [sp, #4]
   1f04c:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1f050:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1f054:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1f058:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1f05c:	b913      	cbnz	r3, 1f064 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1f05e:	786b      	ldrb	r3, [r5, #1]
   1f060:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   1f064:	b137      	cbz	r7, 1f074 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1f066:	f818 2007 	ldrb.w	r2, [r8, r7]
   1f06a:	2101      	movs	r1, #1
   1f06c:	f361 0201 	bfi	r2, r1, #0, #2
   1f070:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1f074:	1bdb      	subs	r3, r3, r7
   1f076:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1f078:	4620      	mov	r0, r4
   1f07a:	f7fc f897 	bl	1b1ac <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1f07e:	786b      	ldrb	r3, [r5, #1]
   1f080:	4283      	cmp	r3, r0
   1f082:	d924      	bls.n	1f0ce <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1f084:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1f086:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f08a:	f043 0310 	orr.w	r3, r3, #16
   1f08e:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1f092:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f096:	f36f 1347 	bfc	r3, #5, #3
   1f09a:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1f09e:	2300      	movs	r3, #0
   1f0a0:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1f0a2:	f8c9 5000 	str.w	r5, [r9]
}
   1f0a6:	b003      	add	sp, #12
   1f0a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1f0ac:	f043 0304 	orr.w	r3, r3, #4
   1f0b0:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1f0b4:	f000 fe8e 	bl	1fdd4 <radio_pkt_empty_get>
   1f0b8:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1f0ba:	b1e6      	cbz	r6, 1f0f6 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1f0bc:	7803      	ldrb	r3, [r0, #0]
   1f0be:	f043 0310 	orr.w	r3, r3, #16
   1f0c2:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1f0c4:	f8c9 5000 	str.w	r5, [r9]
}
   1f0c8:	b003      	add	sp, #12
   1f0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1f0ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1f0d0:	6832      	ldr	r2, [r6, #0]
   1f0d2:	429a      	cmp	r2, r3
			p->md = 1U;
   1f0d4:	f818 3007 	ldrb.w	r3, [r8, r7]
   1f0d8:	bf14      	ite	ne
   1f0da:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1f0de:	f36f 1304 	bfceq	r3, #4, #1
   1f0e2:	f808 3007 	strb.w	r3, [r8, r7]
   1f0e6:	e7d4      	b.n	1f092 <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1f0e8:	f043 0304 	orr.w	r3, r3, #4
   1f0ec:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   1f0f0:	f000 fe70 	bl	1fdd4 <radio_pkt_empty_get>
   1f0f4:	4605      	mov	r5, r0
			p->md = 0U;
   1f0f6:	782b      	ldrb	r3, [r5, #0]
   1f0f8:	f36f 1304 	bfc	r3, #4, #1
   1f0fc:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1f0fe:	f8c9 5000 	str.w	r5, [r9]
}
   1f102:	b003      	add	sp, #12
   1f104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001f108 <lll_conn_isr_rx>:
{
   1f108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f10c:	b082      	sub	sp, #8
   1f10e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1f110:	f000 fe36 	bl	1fd80 <radio_is_done>
	if (trx_done) {
   1f114:	b2c0      	uxtb	r0, r0
   1f116:	b950      	cbnz	r0, 1f12e <lll_conn_isr_rx+0x26>
	lll_isr_rx_status_reset();
   1f118:	f7fe fad2 	bl	1d6c0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1f11c:	48ba      	ldr	r0, [pc, #744]	; (1f408 <lll_conn_isr_rx+0x300>)
   1f11e:	4621      	mov	r1, r4
   1f120:	f000 fd08 	bl	1fb34 <radio_isr_set>
}
   1f124:	b002      	add	sp, #8
   1f126:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		radio_disable();
   1f12a:	f000 bdff 	b.w	1fd2c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1f12e:	f000 fe47 	bl	1fdc0 <radio_crc_is_valid>
   1f132:	b2c6      	uxtb	r6, r0
		rssi_ready = radio_rssi_is_ready();
   1f134:	f000 ff2a 	bl	1ff8c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1f138:	f7fe fac2 	bl	1d6c0 <lll_isr_rx_status_reset>
	trx_cnt++;
   1f13c:	4ab3      	ldr	r2, [pc, #716]	; (1f40c <lll_conn_isr_rx+0x304>)
   1f13e:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1f140:	2001      	movs	r0, #1
	trx_cnt++;
   1f142:	4403      	add	r3, r0
   1f144:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1f146:	f7f5 fed5 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1f14a:	4605      	mov	r5, r0
   1f14c:	2800      	cmp	r0, #0
   1f14e:	f000 80f2 	beq.w	1f336 <lll_conn_isr_rx+0x22e>
	if (crc_ok) {
   1f152:	b9f6      	cbnz	r6, 1f192 <lll_conn_isr_rx+0x8a>
		if (crc_expire == 0U) {
   1f154:	4bae      	ldr	r3, [pc, #696]	; (1f410 <lll_conn_isr_rx+0x308>)
   1f156:	781f      	ldrb	r7, [r3, #0]
   1f158:	2f00      	cmp	r7, #0
   1f15a:	f000 8089 	beq.w	1f270 <lll_conn_isr_rx+0x168>
		crc_expire--;
   1f15e:	3f01      	subs	r7, #1
   1f160:	b2ff      	uxtb	r7, r7
   1f162:	701f      	strb	r7, [r3, #0]
	is_empty_pdu_tx_retry = lll->empty;
   1f164:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f168:	a901      	add	r1, sp, #4
   1f16a:	4620      	mov	r0, r4
	is_empty_pdu_tx_retry = lll->empty;
   1f16c:	f3c3 0980 	ubfx	r9, r3, #2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f170:	f7ff ff5a 	bl	1f028 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f174:	2f00      	cmp	r7, #0
   1f176:	f040 817f 	bne.w	1f478 <lll_conn_isr_rx+0x370>
		radio_isr_set(isr_done, param);
   1f17a:	48a3      	ldr	r0, [pc, #652]	; (1f408 <lll_conn_isr_rx+0x300>)
   1f17c:	4621      	mov	r1, r4
   1f17e:	f000 fcd9 	bl	1fb34 <radio_isr_set>
		} else if (!lll->role) {
   1f182:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f186:	2b00      	cmp	r3, #0
   1f188:	f280 80c7 	bge.w	1f31a <lll_conn_isr_rx+0x212>
			radio_switch_complete_and_disable();
   1f18c:	f000 fed6 	bl	1ff3c <radio_switch_complete_and_disable>
   1f190:	e083      	b.n	1f29a <lll_conn_isr_rx+0x192>
	if (lll->enc_rx) {
   1f192:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f196:	0718      	lsls	r0, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   1f198:	f105 071c 	add.w	r7, r5, #28
	if (lll->enc_rx) {
   1f19c:	f100 8104 	bmi.w	1f3a8 <lll_conn_isr_rx+0x2a0>
	if (pdu_data_rx->nesn != lll->sn) {
   1f1a0:	7f2a      	ldrb	r2, [r5, #28]
   1f1a2:	f003 0101 	and.w	r1, r3, #1
   1f1a6:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1f1aa:	4288      	cmp	r0, r1
   1f1ac:	f000 80d3 	beq.w	1f356 <lll_conn_isr_rx+0x24e>
		if (lll->role) {
   1f1b0:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   1f1b4:	f081 0101 	eor.w	r1, r1, #1
   1f1b8:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1f1bc:	2a00      	cmp	r2, #0
		lll->sn++;
   1f1be:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   1f1c2:	da05      	bge.n	1f1d0 <lll_conn_isr_rx+0xc8>
			lll->periph.latency_enabled = 1;
   1f1c4:	f894 3020 	ldrb.w	r3, [r4, #32]
   1f1c8:	f043 0304 	orr.w	r3, r3, #4
   1f1cc:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   1f1d0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f1d4:	f013 0804 	ands.w	r8, r3, #4
   1f1d8:	f040 812c 	bne.w	1f434 <lll_conn_isr_rx+0x32c>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1f1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1f1e0:	aa01      	add	r2, sp, #4
   1f1e2:	f7f1 fdf9 	bl	10dd8 <memq_peek>
		if (link) {
   1f1e6:	4606      	mov	r6, r0
   1f1e8:	2800      	cmp	r0, #0
   1f1ea:	f000 813a 	beq.w	1f462 <lll_conn_isr_rx+0x35a>
			pdu_data_tx = (void *)(tx->pdu +
   1f1ee:	9b01      	ldr	r3, [sp, #4]
					       lll->packet_tx_head_offset);
   1f1f0:	f894 a05d 	ldrb.w	sl, [r4, #93]	; 0x5d
			pdu_data_tx = (void *)(tx->pdu +
   1f1f4:	f103 0904 	add.w	r9, r3, #4
   1f1f8:	eb09 030a 	add.w	r3, r9, sl
			pdu_data_tx_len = pdu_data_tx->len;
   1f1fc:	785a      	ldrb	r2, [r3, #1]
			if (pdu_data_tx_len != 0U) {
   1f1fe:	b172      	cbz	r2, 1f21e <lll_conn_isr_rx+0x116>
				if (lll->enc_tx) {
   1f200:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f204:	06d9      	lsls	r1, r3, #27
   1f206:	d50a      	bpl.n	1f21e <lll_conn_isr_rx+0x116>
					lll->ccm_tx.counter++;
   1f208:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   1f20c:	3301      	adds	r3, #1
   1f20e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   1f212:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1f216:	f143 0300 	adc.w	r3, r3, #0
   1f21a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   1f21e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1f222:	4452      	add	r2, sl
   1f224:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1f226:	429a      	cmp	r2, r3
   1f228:	f0c0 8122 	bcc.w	1f470 <lll_conn_isr_rx+0x368>
			} else if (offset == lll->packet_tx_head_len) {
   1f22c:	f000 814d 	beq.w	1f4ca <lll_conn_isr_rx+0x3c2>
				LL_ASSERT(0);
   1f230:	4a78      	ldr	r2, [pc, #480]	; (1f414 <lll_conn_isr_rx+0x30c>)
   1f232:	4979      	ldr	r1, [pc, #484]	; (1f418 <lll_conn_isr_rx+0x310>)
   1f234:	4879      	ldr	r0, [pc, #484]	; (1f41c <lll_conn_isr_rx+0x314>)
   1f236:	f240 33a3 	movw	r3, #931	; 0x3a3
   1f23a:	f008 feb5 	bl	27fa8 <printk>
   1f23e:	4040      	eors	r0, r0
   1f240:	f380 8811 	msr	BASEPRI, r0
   1f244:	f04f 0003 	mov.w	r0, #3
   1f248:	df02      	svc	2
	tx_release = NULL;
   1f24a:	2600      	movs	r6, #0
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f24c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f250:	2b00      	cmp	r3, #0
   1f252:	f2c0 8136 	blt.w	1f4c2 <lll_conn_isr_rx+0x3ba>
			    !pdu_data_rx->md) {
   1f256:	7f2a      	ldrb	r2, [r5, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f258:	06d3      	lsls	r3, r2, #27
				*is_done = !pdu_data_tx->md;
   1f25a:	bf58      	it	pl
   1f25c:	f819 800a 	ldrbpl.w	r8, [r9, sl]
   1f260:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f264:	bf5c      	itt	pl
   1f266:	f088 0810 	eorpl.w	r8, r8, #16
   1f26a:	f3c8 1800 	ubfxpl	r8, r8, #4, #1
   1f26e:	e075      	b.n	1f35c <lll_conn_isr_rx+0x254>
		crc_expire--;
   1f270:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f272:	a901      	add	r1, sp, #4
   1f274:	4620      	mov	r0, r4
		crc_expire--;
   1f276:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f278:	f7ff fed6 	bl	1f028 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1f27c:	2096      	movs	r0, #150	; 0x96
   1f27e:	f000 fee1 	bl	20044 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1f282:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1f286:	f000 0007 	and.w	r0, r0, #7
   1f28a:	f000 fdaf 	bl	1fdec <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1f28e:	4864      	ldr	r0, [pc, #400]	; (1f420 <lll_conn_isr_rx+0x318>)
   1f290:	4621      	mov	r1, r4
   1f292:	f000 fc4f 	bl	1fb34 <radio_isr_set>
		radio_tmr_end_capture();
   1f296:	f000 ffe1 	bl	2025c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1f29a:	9901      	ldr	r1, [sp, #4]
   1f29c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   1f2a0:	780b      	ldrb	r3, [r1, #0]
   1f2a2:	f023 000c 	bic.w	r0, r3, #12
   1f2a6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1f2aa:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1f2ac:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1f2b0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1f2b4:	4303      	orrs	r3, r0
   1f2b6:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1f2b8:	4620      	mov	r0, r4
   1f2ba:	f7ff fe89 	bl	1efd0 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1f2be:	f000 fd55 	bl	1fd6c <radio_is_ready>
   1f2c2:	2800      	cmp	r0, #0
   1f2c4:	d179      	bne.n	1f3ba <lll_conn_isr_rx+0x2b2>
	if (!radio_tmr_aa_restore()) {
   1f2c6:	f000 ffbd 	bl	20244 <radio_tmr_aa_restore>
   1f2ca:	b1e8      	cbz	r0, 1f308 <lll_conn_isr_rx+0x200>
	if (tx_release) {
   1f2cc:	b316      	cbz	r6, 1f314 <lll_conn_isr_rx+0x20c>
		LL_ASSERT(lll->handle != 0xFFFF);
   1f2ce:	89a0      	ldrh	r0, [r4, #12]
   1f2d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f2d4:	4298      	cmp	r0, r3
   1f2d6:	f000 8087 	beq.w	1f3e8 <lll_conn_isr_rx+0x2e0>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1f2da:	4631      	mov	r1, r6
   1f2dc:	f7fb fd32 	bl	1ad44 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1f2e0:	b16f      	cbz	r7, 1f2fe <lll_conn_isr_rx+0x1f6>
		if (lll->enc_rx) {
   1f2e2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f2e6:	071b      	lsls	r3, r3, #28
   1f2e8:	d475      	bmi.n	1f3d6 <lll_conn_isr_rx+0x2ce>
		ull_pdu_rx_alloc();
   1f2ea:	f7f5 fe21 	bl	14f30 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1f2ee:	2303      	movs	r3, #3
   1f2f0:	712b      	strb	r3, [r5, #4]
		node_rx->hdr.handle = lll->handle;
   1f2f2:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1f2f4:	6828      	ldr	r0, [r5, #0]
		node_rx->hdr.handle = lll->handle;
   1f2f6:	80eb      	strh	r3, [r5, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1f2f8:	4629      	mov	r1, r5
   1f2fa:	f7f5 fe2f 	bl	14f5c <ull_rx_put>
		ull_rx_sched();
   1f2fe:	f7f5 fe3d 	bl	14f7c <ull_rx_sched>
}
   1f302:	b002      	add	sp, #8
   1f304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1f308:	f000 ff90 	bl	2022c <radio_tmr_aa_get>
   1f30c:	f000 ff94 	bl	20238 <radio_tmr_aa_save>
	if (tx_release) {
   1f310:	2e00      	cmp	r6, #0
   1f312:	d1dc      	bne.n	1f2ce <lll_conn_isr_rx+0x1c6>
	if (is_rx_enqueue) {
   1f314:	2f00      	cmp	r7, #0
   1f316:	d1e4      	bne.n	1f2e2 <lll_conn_isr_rx+0x1da>
   1f318:	e7f3      	b.n	1f302 <lll_conn_isr_rx+0x1fa>
			radio_disable();
   1f31a:	f000 fd07 	bl	1fd2c <radio_disable>
			LL_ASSERT(!radio_is_ready());
   1f31e:	f000 fd25 	bl	1fd6c <radio_is_ready>
   1f322:	2800      	cmp	r0, #0
   1f324:	f040 80bc 	bne.w	1f4a0 <lll_conn_isr_rx+0x398>
			lll->empty = is_empty_pdu_tx_retry;
   1f328:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f32c:	f369 0382 	bfi	r3, r9, #2, #1
   1f330:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			goto lll_conn_isr_rx_exit;
   1f334:	e7c7      	b.n	1f2c6 <lll_conn_isr_rx+0x1be>
	LL_ASSERT(node_rx);
   1f336:	4a37      	ldr	r2, [pc, #220]	; (1f414 <lll_conn_isr_rx+0x30c>)
   1f338:	493a      	ldr	r1, [pc, #232]	; (1f424 <lll_conn_isr_rx+0x31c>)
   1f33a:	4838      	ldr	r0, [pc, #224]	; (1f41c <lll_conn_isr_rx+0x314>)
   1f33c:	23f2      	movs	r3, #242	; 0xf2
   1f33e:	f008 fe33 	bl	27fa8 <printk>
   1f342:	4040      	eors	r0, r0
   1f344:	f380 8811 	msr	BASEPRI, r0
   1f348:	f04f 0003 	mov.w	r0, #3
   1f34c:	df02      	svc	2
	if (crc_ok) {
   1f34e:	2e00      	cmp	r6, #0
   1f350:	f43f af00 	beq.w	1f154 <lll_conn_isr_rx+0x4c>
   1f354:	e71d      	b.n	1f192 <lll_conn_isr_rx+0x8a>
	is_done = 0U;
   1f356:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1f35a:	4646      	mov	r6, r8
	if ((pdu_data_rx->sn == lll->nesn) &&
   1f35c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1f360:	f3c3 0140 	ubfx	r1, r3, #1, #1
   1f364:	428a      	cmp	r2, r1
   1f366:	f000 8089 	beq.w	1f47c <lll_conn_isr_rx+0x374>
	is_rx_enqueue = 0U;
   1f36a:	2700      	movs	r7, #0
		crc_expire = 0U;
   1f36c:	4a28      	ldr	r2, [pc, #160]	; (1f410 <lll_conn_isr_rx+0x308>)
   1f36e:	2100      	movs	r1, #0
	is_empty_pdu_tx_retry = lll->empty;
   1f370:	f3c3 0980 	ubfx	r9, r3, #2, #1
		crc_valid = 1U;
   1f374:	4b2c      	ldr	r3, [pc, #176]	; (1f428 <lll_conn_isr_rx+0x320>)
		crc_expire = 0U;
   1f376:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f378:	4620      	mov	r0, r4
		crc_valid = 1U;
   1f37a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f37c:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1f37e:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f380:	f7ff fe52 	bl	1f028 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f384:	f1b8 0f00 	cmp.w	r8, #0
   1f388:	f47f aef7 	bne.w	1f17a <lll_conn_isr_rx+0x72>
   1f38c:	7f2b      	ldrb	r3, [r5, #28]
   1f38e:	06d9      	lsls	r1, r3, #27
   1f390:	f53f af74 	bmi.w	1f27c <lll_conn_isr_rx+0x174>
			      (pdu_data_tx->md == 0) &&
   1f394:	9b01      	ldr	r3, [sp, #4]
   1f396:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1f398:	06d2      	lsls	r2, r2, #27
   1f39a:	f53f af6f 	bmi.w	1f27c <lll_conn_isr_rx+0x174>
			      (pdu_data_tx->md == 0) &&
   1f39e:	785b      	ldrb	r3, [r3, #1]
   1f3a0:	2b00      	cmp	r3, #0
   1f3a2:	f43f aeea 	beq.w	1f17a <lll_conn_isr_rx+0x72>
   1f3a6:	e769      	b.n	1f27c <lll_conn_isr_rx+0x174>
		pkt_decrypt = radio_pkt_decrypt_get();
   1f3a8:	f000 fd1c 	bl	1fde4 <radio_pkt_decrypt_get>
   1f3ac:	7883      	ldrb	r3, [r0, #2]
   1f3ae:	8802      	ldrh	r2, [r0, #0]
   1f3b0:	83aa      	strh	r2, [r5, #28]
   1f3b2:	70bb      	strb	r3, [r7, #2]
   1f3b4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f3b8:	e6f2      	b.n	1f1a0 <lll_conn_isr_rx+0x98>
	LL_ASSERT(!radio_is_ready());
   1f3ba:	4a16      	ldr	r2, [pc, #88]	; (1f414 <lll_conn_isr_rx+0x30c>)
   1f3bc:	491b      	ldr	r1, [pc, #108]	; (1f42c <lll_conn_isr_rx+0x324>)
   1f3be:	4817      	ldr	r0, [pc, #92]	; (1f41c <lll_conn_isr_rx+0x314>)
   1f3c0:	f240 1369 	movw	r3, #361	; 0x169
   1f3c4:	f008 fdf0 	bl	27fa8 <printk>
   1f3c8:	4040      	eors	r0, r0
   1f3ca:	f380 8811 	msr	BASEPRI, r0
   1f3ce:	f04f 0003 	mov.w	r0, #3
   1f3d2:	df02      	svc	2
   1f3d4:	e777      	b.n	1f2c6 <lll_conn_isr_rx+0x1be>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   1f3d6:	f000 fd05 	bl	1fde4 <radio_pkt_decrypt_get>
   1f3da:	7f6a      	ldrb	r2, [r5, #29]
   1f3dc:	1cc1      	adds	r1, r0, #3
   1f3de:	f105 001f 	add.w	r0, r5, #31
   1f3e2:	f00f f8c0 	bl	2e566 <memcpy>
   1f3e6:	e780      	b.n	1f2ea <lll_conn_isr_rx+0x1e2>
		LL_ASSERT(lll->handle != 0xFFFF);
   1f3e8:	4a0a      	ldr	r2, [pc, #40]	; (1f414 <lll_conn_isr_rx+0x30c>)
   1f3ea:	4911      	ldr	r1, [pc, #68]	; (1f430 <lll_conn_isr_rx+0x328>)
   1f3ec:	480b      	ldr	r0, [pc, #44]	; (1f41c <lll_conn_isr_rx+0x314>)
   1f3ee:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1f3f2:	f008 fdd9 	bl	27fa8 <printk>
   1f3f6:	4040      	eors	r0, r0
   1f3f8:	f380 8811 	msr	BASEPRI, r0
   1f3fc:	f04f 0003 	mov.w	r0, #3
   1f400:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1f402:	89a0      	ldrh	r0, [r4, #12]
   1f404:	e769      	b.n	1f2da <lll_conn_isr_rx+0x1d2>
   1f406:	bf00      	nop
   1f408:	0001ed31 	.word	0x0001ed31
   1f40c:	2000397c 	.word	0x2000397c
   1f410:	20003b01 	.word	0x20003b01
   1f414:	00030de8 	.word	0x00030de8
   1f418:	0002ff74 	.word	0x0002ff74
   1f41c:	0002fedc 	.word	0x0002fedc
   1f420:	0001ef19 	.word	0x0001ef19
   1f424:	00030d34 	.word	0x00030d34
   1f428:	20003b02 	.word	0x20003b02
   1f42c:	00030d3c 	.word	0x00030d3c
   1f430:	00030e3c 	.word	0x00030e3c
			lll->empty = 0;
   1f434:	f36f 0382 	bfc	r3, #2, #1
   1f438:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1f43c:	f000 fcca 	bl	1fdd4 <radio_pkt_empty_get>
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f440:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1f444:	2b00      	cmp	r3, #0
   1f446:	db0c      	blt.n	1f462 <lll_conn_isr_rx+0x35a>
			    !pdu_data_rx->md) {
   1f448:	7f2a      	ldrb	r2, [r5, #28]
			if (IS_ENABLED(CONFIG_BT_CENTRAL) && !lll->role &&
   1f44a:	f012 0610 	ands.w	r6, r2, #16
   1f44e:	d109      	bne.n	1f464 <lll_conn_isr_rx+0x35c>
				*is_done = !pdu_data_tx->md;
   1f450:	f890 8000 	ldrb.w	r8, [r0]
   1f454:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f458:	f088 0810 	eor.w	r8, r8, #16
   1f45c:	f3c8 1800 	ubfx	r8, r8, #4, #1
   1f460:	e77c      	b.n	1f35c <lll_conn_isr_rx+0x254>
   1f462:	7f2a      	ldrb	r2, [r5, #28]
   1f464:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
	is_done = 0U;
   1f468:	f04f 0800 	mov.w	r8, #0
	tx_release = NULL;
   1f46c:	4646      	mov	r6, r8
   1f46e:	e775      	b.n	1f35c <lll_conn_isr_rx+0x254>
				lll->packet_tx_head_offset = offset;
   1f470:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
	tx_release = NULL;
   1f474:	2600      	movs	r6, #0
   1f476:	e6e9      	b.n	1f24c <lll_conn_isr_rx+0x144>
	is_rx_enqueue = 0U;
   1f478:	4637      	mov	r7, r6
   1f47a:	e6ff      	b.n	1f27c <lll_conn_isr_rx+0x174>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1f47c:	2003      	movs	r0, #3
   1f47e:	f7f5 fd39 	bl	14ef4 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1f482:	b1d8      	cbz	r0, 1f4bc <lll_conn_isr_rx+0x3b4>
		lll->nesn++;
   1f484:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f488:	f083 0302 	eor.w	r3, r3, #2
   1f48c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   1f490:	7f6b      	ldrb	r3, [r5, #29]
   1f492:	b19b      	cbz	r3, 1f4bc <lll_conn_isr_rx+0x3b4>
			if (lll->enc_rx) {
   1f494:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f498:	0718      	lsls	r0, r3, #28
   1f49a:	d424      	bmi.n	1f4e6 <lll_conn_isr_rx+0x3de>
			*is_rx_enqueue = 1U;
   1f49c:	2701      	movs	r7, #1
   1f49e:	e765      	b.n	1f36c <lll_conn_isr_rx+0x264>
			LL_ASSERT(!radio_is_ready());
   1f4a0:	4a37      	ldr	r2, [pc, #220]	; (1f580 <lll_conn_isr_rx+0x478>)
   1f4a2:	4938      	ldr	r1, [pc, #224]	; (1f584 <lll_conn_isr_rx+0x47c>)
   1f4a4:	4838      	ldr	r0, [pc, #224]	; (1f588 <lll_conn_isr_rx+0x480>)
   1f4a6:	f44f 7398 	mov.w	r3, #304	; 0x130
   1f4aa:	f008 fd7d 	bl	27fa8 <printk>
   1f4ae:	4040      	eors	r0, r0
   1f4b0:	f380 8811 	msr	BASEPRI, r0
   1f4b4:	f04f 0003 	mov.w	r0, #3
   1f4b8:	df02      	svc	2
   1f4ba:	e735      	b.n	1f328 <lll_conn_isr_rx+0x220>
   1f4bc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f4c0:	e753      	b.n	1f36a <lll_conn_isr_rx+0x262>
   1f4c2:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f4c6:	7f2a      	ldrb	r2, [r5, #28]
   1f4c8:	e748      	b.n	1f35c <lll_conn_isr_rx+0x254>
				lll->packet_tx_head_len = 0;
   1f4ca:	2200      	movs	r2, #0
   1f4cc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   1f4d0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1f4d2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   1f4d6:	f7f1 fc87 	bl	10de8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1f4da:	9b01      	ldr	r3, [sp, #4]
   1f4dc:	681a      	ldr	r2, [r3, #0]
   1f4de:	6032      	str	r2, [r6, #0]
				tx->next = link;
   1f4e0:	601e      	str	r6, [r3, #0]
				*tx_release = tx;
   1f4e2:	9e01      	ldr	r6, [sp, #4]
				FORCE_MD_CNT_SET();
   1f4e4:	e6b2      	b.n	1f24c <lll_conn_isr_rx+0x144>
				done = radio_ccm_is_done();
   1f4e6:	f000 ff2b 	bl	20340 <radio_ccm_is_done>
				LL_ASSERT(done);
   1f4ea:	2800      	cmp	r0, #0
   1f4ec:	d03a      	beq.n	1f564 <lll_conn_isr_rx+0x45c>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1f4ee:	f000 ff49 	bl	20384 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1f4f2:	bb28      	cbnz	r0, 1f540 <lll_conn_isr_rx+0x438>
				    lll->ccm_rx.counter == 0 &&
   1f4f4:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   1f4f8:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   1f4fc:	4313      	orrs	r3, r2
   1f4fe:	d104      	bne.n	1f50a <lll_conn_isr_rx+0x402>
				    (pdu_data_rx->ll_id ==
   1f500:	7f2b      	ldrb	r3, [r5, #28]
				    lll->ccm_rx.counter == 0 &&
   1f502:	f003 0303 	and.w	r3, r3, #3
   1f506:	2b03      	cmp	r3, #3
   1f508:	d004      	beq.n	1f514 <lll_conn_isr_rx+0x40c>
					mic_state = LLL_CONN_MIC_FAIL;
   1f50a:	4b20      	ldr	r3, [pc, #128]	; (1f58c <lll_conn_isr_rx+0x484>)
   1f50c:	2202      	movs	r2, #2
   1f50e:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1f510:	2700      	movs	r7, #0
   1f512:	e6d8      	b.n	1f2c6 <lll_conn_isr_rx+0x1be>
						radio_pkt_scratch_get();
   1f514:	f000 fc62 	bl	1fddc <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1f518:	7843      	ldrb	r3, [r0, #1]
   1f51a:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   1f51c:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1f51e:	d8f4      	bhi.n	1f50a <lll_conn_isr_rx+0x402>
						memcpy(pdu_data_rx,
   1f520:	3303      	adds	r3, #3
   1f522:	b2da      	uxtb	r2, r3
   1f524:	4638      	mov	r0, r7
   1f526:	f00f f81e 	bl	2e566 <memcpy>
						lll->ccm_rx.counter--;
   1f52a:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1f52e:	3b01      	subs	r3, #1
   1f530:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1f534:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1f538:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
   1f53c:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   1f540:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   1f544:	3301      	adds	r3, #1
   1f546:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   1f54a:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   1f54e:	f104 026f 	add.w	r2, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   1f552:	f143 0300 	adc.w	r3, r3, #0
   1f556:	6053      	str	r3, [r2, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1f558:	4b0c      	ldr	r3, [pc, #48]	; (1f58c <lll_conn_isr_rx+0x484>)
   1f55a:	2701      	movs	r7, #1
   1f55c:	701f      	strb	r7, [r3, #0]
		if (err) {
   1f55e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f562:	e703      	b.n	1f36c <lll_conn_isr_rx+0x264>
				LL_ASSERT(done);
   1f564:	4a06      	ldr	r2, [pc, #24]	; (1f580 <lll_conn_isr_rx+0x478>)
   1f566:	490a      	ldr	r1, [pc, #40]	; (1f590 <lll_conn_isr_rx+0x488>)
   1f568:	4807      	ldr	r0, [pc, #28]	; (1f588 <lll_conn_isr_rx+0x480>)
   1f56a:	f240 33be 	movw	r3, #958	; 0x3be
   1f56e:	f008 fd1b 	bl	27fa8 <printk>
   1f572:	4040      	eors	r0, r0
   1f574:	f380 8811 	msr	BASEPRI, r0
   1f578:	f04f 0003 	mov.w	r0, #3
   1f57c:	df02      	svc	2
   1f57e:	e7b6      	b.n	1f4ee <lll_conn_isr_rx+0x3e6>
   1f580:	00030de8 	.word	0x00030de8
   1f584:	00030d3c 	.word	0x00030d3c
   1f588:	0002fedc 	.word	0x0002fedc
   1f58c:	20003b03 	.word	0x20003b03
   1f590:	00030e34 	.word	0x00030e34

0001f594 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1f594:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1f596:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1f598:	89a2      	ldrh	r2, [r4, #12]
   1f59a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f59e:	429a      	cmp	r2, r3
{
   1f5a0:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   1f5a2:	f000 80d0 	beq.w	1f746 <prepare_cb+0x1b2>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1f5a6:	4605      	mov	r5, r0
   1f5a8:	f7ff fc2c 	bl	1ee04 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f5ac:	892b      	ldrh	r3, [r5, #8]
   1f5ae:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1f5b0:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f5b2:	441a      	add	r2, r3
   1f5b4:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1f5b6:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1f5b8:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f5ba:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1f5bc:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1f5be:	1c41      	adds	r1, r0, #1
   1f5c0:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1f5c2:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1f5c4:	f04f 0100 	mov.w	r1, #0
   1f5c8:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1f5ca:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1f5ce:	f100 808d 	bmi.w	1f6ec <prepare_cb+0x158>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1f5d2:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1f5d6:	460b      	mov	r3, r1
   1f5d8:	7fa1      	ldrb	r1, [r4, #30]
   1f5da:	9000      	str	r0, [sp, #0]
   1f5dc:	f104 001f 	add.w	r0, r4, #31
   1f5e0:	f7fc fafa 	bl	1bbd8 <lll_chan_sel_1>
   1f5e4:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->periph.window_widening_event_us +=
   1f5e6:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   1f5ea:	4419      	add	r1, r3
		lll->periph.window_widening_event_us =
			lll->periph.window_widening_max_us;
	}

	/* current window size */
	lll->periph.window_size_event_us +=
   1f5ec:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   1f5f0:	4403      	add	r3, r0
	lll->periph.window_widening_prepare_us = 0;
   1f5f2:	2200      	movs	r2, #0
	lll->periph.window_size_event_us +=
   1f5f4:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->periph.window_widening_max_us) {
   1f5f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->periph.window_widening_prepare_us = 0;
   1f5f8:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->periph.window_size_prepare_us;
	lll->periph.window_size_prepare_us = 0;
   1f5fa:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   1f5fc:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->periph.window_widening_event_us =
   1f600:	428b      	cmp	r3, r1
   1f602:	bf28      	it	cs
   1f604:	460b      	movcs	r3, r1
	if (!lll->empty) {
   1f606:	f012 0204 	ands.w	r2, r2, #4
		lll->periph.window_widening_event_us =
   1f60a:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   1f60c:	f000 808d 	beq.w	1f72a <prepare_cb+0x196>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   1f610:	f000 fad2 	bl	1fbb8 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1f614:	2000      	movs	r0, #0
   1f616:	f000 fb03 	bl	1fc20 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1f61a:	4620      	mov	r0, r4
   1f61c:	f7ff fc36 	bl	1ee8c <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1f620:	1d20      	adds	r0, r4, #4
   1f622:	f000 fb1b 	bl	1fc5c <radio_aa_set>
	return ((uint32_t)src[2] << 16) | sys_get_le16(&src[0]);
   1f626:	8923      	ldrh	r3, [r4, #8]
   1f628:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1f62a:	f240 605b 	movw	r0, #1627	; 0x65b
   1f62e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1f632:	f000 fbb9 	bl	1fda8 <radio_crc_configure>
				sys_get_le24(lll->crc_init));

	lll_chan_set(data_chan_use);
   1f636:	4630      	mov	r0, r6
   1f638:	f7fd fff4 	bl	1d624 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1f63c:	4621      	mov	r1, r4
   1f63e:	4846      	ldr	r0, [pc, #280]	; (1f758 <prepare_cb+0x1c4>)
   1f640:	f000 fa78 	bl	1fb34 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1f644:	2096      	movs	r0, #150	; 0x96
   1f646:	f000 fcfd 	bl	20044 <radio_tmr_tifs_set>
	 * - CTE RX is not enabled,
	 * - SOC does not require compensation for PHYEND event delay.
	 */
	if (!IS_ENABLED(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)) {
#if defined(CONFIG_BT_CTLR_PHY)
		radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx, lll->phy_flags);
   1f64a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
   1f64e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1f652:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1f656:	2100      	movs	r1, #0
   1f658:	f002 0207 	and.w	r2, r2, #7
   1f65c:	f000 0007 	and.w	r0, r0, #7
   1f660:	f000 fc0c 	bl	1fe7c <radio_switch_complete_and_tx>
		radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */
	}

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1f664:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1f666:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1f668:	4638      	mov	r0, r7
   1f66a:	f7fd ffbd 	bl	1d5e8 <lll_event_offset_get>
   1f66e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1f670:	686a      	ldr	r2, [r5, #4]
   1f672:	f106 0109 	add.w	r1, r6, #9
   1f676:	2000      	movs	r0, #0
   1f678:	f000 fcf0 	bl	2005c <radio_tmr_start>
   1f67c:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1f67e:	f000 fdc1 	bl	20204 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1f682:	2000      	movs	r0, #0
   1f684:	f000 fdd8 	bl	20238 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1f688:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1f68a:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1f68e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1f690:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->periph.window_widening_event_us) << 1) +
	       lll->periph.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1f694:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1f698:	2101      	movs	r1, #1
   1f69a:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1f69e:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1f6a0:	f000 fb30 	bl	1fd04 <radio_rx_ready_delay_get>
   1f6a4:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1f6a6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1f6aa:	f000 0007 	and.w	r0, r0, #7
   1f6ae:	2802      	cmp	r0, #2
   1f6b0:	d039      	beq.n	1f726 <prepare_cb+0x192>
		return 40;
   1f6b2:	2804      	cmp	r0, #4
   1f6b4:	bf0c      	ite	eq
   1f6b6:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1f6ba:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1f6bc:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1f6be:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1f6c0:	f000 fb22 	bl	1fd08 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1f6c4:	4428      	add	r0, r5
   1f6c6:	f000 fd8f 	bl	201e8 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1f6ca:	89a1      	ldrh	r1, [r4, #12]
   1f6cc:	3105      	adds	r1, #5
   1f6ce:	4632      	mov	r2, r6
   1f6d0:	b2c9      	uxtb	r1, r1
   1f6d2:	4638      	mov	r0, r7
   1f6d4:	f7fd ff96 	bl	1d604 <lll_preempt_calc>
   1f6d8:	b180      	cbz	r0, 1f6fc <prepare_cb+0x168>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1f6da:	4820      	ldr	r0, [pc, #128]	; (1f75c <prepare_cb+0x1c8>)
   1f6dc:	4621      	mov	r1, r4
   1f6de:	f000 fa29 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1f6e2:	f000 fb23 	bl	1fd2c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1f6e6:	2000      	movs	r0, #0
   1f6e8:	b003      	add	sp, #12
   1f6ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1f6ec:	460a      	mov	r2, r1
   1f6ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f6f2:	8be1      	ldrh	r1, [r4, #30]
   1f6f4:	f7fc fab4 	bl	1bc60 <lll_chan_sel_2>
   1f6f8:	4606      	mov	r6, r0
   1f6fa:	e774      	b.n	1f5e6 <prepare_cb+0x52>
		ret = lll_prepare_done(lll);
   1f6fc:	4620      	mov	r0, r4
   1f6fe:	f7fd ff0d 	bl	1d51c <lll_prepare_done>
		LL_ASSERT(!ret);
   1f702:	2800      	cmp	r0, #0
   1f704:	d0ef      	beq.n	1f6e6 <prepare_cb+0x152>
   1f706:	4a16      	ldr	r2, [pc, #88]	; (1f760 <prepare_cb+0x1cc>)
   1f708:	4916      	ldr	r1, [pc, #88]	; (1f764 <prepare_cb+0x1d0>)
   1f70a:	4817      	ldr	r0, [pc, #92]	; (1f768 <prepare_cb+0x1d4>)
   1f70c:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   1f710:	f008 fc4a 	bl	27fa8 <printk>
   1f714:	4040      	eors	r0, r0
   1f716:	f380 8811 	msr	BASEPRI, r0
   1f71a:	f04f 0003 	mov.w	r0, #3
   1f71e:	df02      	svc	2
}
   1f720:	2000      	movs	r0, #0
   1f722:	b003      	add	sp, #12
   1f724:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   1f726:	2318      	movs	r3, #24
   1f728:	e7c8      	b.n	1f6bc <prepare_cb+0x128>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   1f72a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   1f72e:	f7f1 fb53 	bl	10dd8 <memq_peek>
		if (!link) {
   1f732:	2800      	cmp	r0, #0
   1f734:	f47f af6c 	bne.w	1f610 <prepare_cb+0x7c>
			lll->empty = 1U;
   1f738:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   1f73c:	f043 0304 	orr.w	r3, r3, #4
   1f740:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   1f744:	e764      	b.n	1f610 <prepare_cb+0x7c>
		radio_isr_set(lll_isr_early_abort, lll);
   1f746:	4809      	ldr	r0, [pc, #36]	; (1f76c <prepare_cb+0x1d8>)
   1f748:	4621      	mov	r1, r4
   1f74a:	f000 f9f3 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1f74e:	f000 faed 	bl	1fd2c <radio_disable>
}
   1f752:	2000      	movs	r0, #0
   1f754:	b003      	add	sp, #12
   1f756:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f758:	0001f109 	.word	0x0001f109
   1f75c:	0001d75d 	.word	0x0001d75d
   1f760:	00030e68 	.word	0x00030e68
   1f764:	00030354 	.word	0x00030354
   1f768:	0002fedc 	.word	0x0002fedc
   1f76c:	0001d781 	.word	0x0001d781

0001f770 <lll_periph_prepare>:
{
   1f770:	b510      	push	{r4, lr}
   1f772:	b082      	sub	sp, #8
   1f774:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1f776:	f7fe f953 	bl	1da20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1f77a:	2800      	cmp	r0, #0
   1f77c:	db25      	blt.n	1f7ca <lll_periph_prepare+0x5a>
	lll = p->param;
   1f77e:	68e1      	ldr	r1, [r4, #12]
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1f780:	8920      	ldrh	r0, [r4, #8]
   1f782:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->periph.window_widening_prepare_us +=
   1f784:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->periph.window_widening_periodic_us * (p->lazy + 1);
   1f786:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->periph.window_widening_max_us) {
   1f78a:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->periph.window_widening_prepare_us +=
   1f78c:	4413      	add	r3, r2
		lll->periph.window_widening_prepare_us =
   1f78e:	4283      	cmp	r3, r0
   1f790:	bf28      	it	cs
   1f792:	4603      	movcs	r3, r0
   1f794:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1f796:	4a13      	ldr	r2, [pc, #76]	; (1f7e4 <lll_periph_prepare+0x74>)
   1f798:	4913      	ldr	r1, [pc, #76]	; (1f7e8 <lll_periph_prepare+0x78>)
   1f79a:	4814      	ldr	r0, [pc, #80]	; (1f7ec <lll_periph_prepare+0x7c>)
   1f79c:	9400      	str	r4, [sp, #0]
   1f79e:	2300      	movs	r3, #0
   1f7a0:	f7f5 fee4 	bl	1556c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f7a4:	b108      	cbz	r0, 1f7aa <lll_periph_prepare+0x3a>
   1f7a6:	3077      	adds	r0, #119	; 0x77
   1f7a8:	d101      	bne.n	1f7ae <lll_periph_prepare+0x3e>
}
   1f7aa:	b002      	add	sp, #8
   1f7ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f7ae:	4a10      	ldr	r2, [pc, #64]	; (1f7f0 <lll_periph_prepare+0x80>)
   1f7b0:	4910      	ldr	r1, [pc, #64]	; (1f7f4 <lll_periph_prepare+0x84>)
   1f7b2:	4811      	ldr	r0, [pc, #68]	; (1f7f8 <lll_periph_prepare+0x88>)
   1f7b4:	235e      	movs	r3, #94	; 0x5e
   1f7b6:	f008 fbf7 	bl	27fa8 <printk>
   1f7ba:	4040      	eors	r0, r0
   1f7bc:	f380 8811 	msr	BASEPRI, r0
   1f7c0:	f04f 0003 	mov.w	r0, #3
   1f7c4:	df02      	svc	2
}
   1f7c6:	b002      	add	sp, #8
   1f7c8:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1f7ca:	4a09      	ldr	r2, [pc, #36]	; (1f7f0 <lll_periph_prepare+0x80>)
   1f7cc:	490b      	ldr	r1, [pc, #44]	; (1f7fc <lll_periph_prepare+0x8c>)
   1f7ce:	480a      	ldr	r0, [pc, #40]	; (1f7f8 <lll_periph_prepare+0x88>)
   1f7d0:	234d      	movs	r3, #77	; 0x4d
   1f7d2:	f008 fbe9 	bl	27fa8 <printk>
   1f7d6:	4040      	eors	r0, r0
   1f7d8:	f380 8811 	msr	BASEPRI, r0
   1f7dc:	f04f 0003 	mov.w	r0, #3
   1f7e0:	df02      	svc	2
   1f7e2:	e7cc      	b.n	1f77e <lll_periph_prepare+0xe>
   1f7e4:	0001f595 	.word	0x0001f595
   1f7e8:	0001ee2d 	.word	0x0001ee2d
   1f7ec:	0001d5e1 	.word	0x0001d5e1
   1f7f0:	00030e68 	.word	0x00030e68
   1f7f4:	00030d64 	.word	0x00030d64
   1f7f8:	0002fedc 	.word	0x0002fedc
   1f7fc:	00030c78 	.word	0x00030c78

0001f800 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1f800:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint8_t cte_len;

	DEBUG_RADIO_START_M(1);

	lll = p->param;
   1f802:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1f804:	89a2      	ldrh	r2, [r4, #12]
   1f806:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f80a:	429a      	cmp	r2, r3
{
   1f80c:	b085      	sub	sp, #20
	if (unlikely(lll->handle == 0xFFFF)) {
   1f80e:	f000 8091 	beq.w	1f934 <prepare_cb+0x134>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1f812:	4605      	mov	r5, r0
   1f814:	f7ff faf6 	bl	1ee04 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f818:	892b      	ldrh	r3, [r5, #8]
   1f81a:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1f81c:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f81e:	441a      	add	r2, r3
   1f820:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   1f822:	4410      	add	r0, r2
	lll->event_counter = (event_counter + 1);

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   1f824:	7f63      	ldrb	r3, [r4, #29]
	lll->latency_event = lll->latency_prepare + p->lazy;
   1f826:	82a2      	strh	r2, [r4, #20]
	event_counter = lll->event_counter + lll->latency_event;
   1f828:	b280      	uxth	r0, r0
	lll->event_counter = (event_counter + 1);
   1f82a:	1c41      	adds	r1, r0, #1
   1f82c:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   1f82e:	065e      	lsls	r6, r3, #25
	lll->latency_prepare = 0;
   1f830:	f04f 0100 	mov.w	r1, #0
   1f834:	8261      	strh	r1, [r4, #18]
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1f836:	f104 0118 	add.w	r1, r4, #24
	if (lll->data_chan_sel) {
   1f83a:	d45f      	bmi.n	1f8fc <prepare_cb+0xfc>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1f83c:	f003 003f 	and.w	r0, r3, #63	; 0x3f
   1f840:	460b      	mov	r3, r1
   1f842:	7fa1      	ldrb	r1, [r4, #30]
   1f844:	9000      	str	r0, [sp, #0]
   1f846:	f104 001f 	add.w	r0, r4, #31
   1f84a:	f7fc f9c5 	bl	1bbd8 <lll_chan_sel_1>
   1f84e:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* Prepare the Tx PDU */
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1f850:	4620      	mov	r0, r4
   1f852:	a903      	add	r1, sp, #12
   1f854:	f7ff fbe8 	bl	1f028 <lll_conn_pdu_tx_prep>
	pdu_data_tx->sn = lll->sn;
   1f858:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
   1f85c:	9903      	ldr	r1, [sp, #12]
	pdu_data_tx->nesn = lll->nesn;
   1f85e:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1f862:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1f864:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1f868:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1f86c:	780a      	ldrb	r2, [r1, #0]
   1f86e:	f022 020c 	bic.w	r2, r2, #12
   1f872:	4313      	orrs	r3, r2
   1f874:	700b      	strb	r3, [r1, #0]

	/* Start setting up of Radio h/w */
	radio_reset();
   1f876:	f000 f99f 	bl	1fbb8 <radio_reset>
	}

#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1f87a:	2000      	movs	r0, #0
   1f87c:	f000 f9d0 	bl	1fc20 <radio_tx_power_set>
#endif

	radio_aa_set(lll->access_addr);
   1f880:	1d20      	adds	r0, r4, #4
   1f882:	f000 f9eb 	bl	1fc5c <radio_aa_set>
   1f886:	8923      	ldrh	r3, [r4, #8]
   1f888:	7aa1      	ldrb	r1, [r4, #10]
	radio_crc_configure(PDU_CRC_POLYNOMIAL,
   1f88a:	f240 605b 	movw	r0, #1627	; 0x65b
   1f88e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1f892:	f000 fa89 	bl	1fda8 <radio_crc_configure>
					sys_get_le24(lll->crc_init));
	lll_chan_set(data_chan_use);
   1f896:	4630      	mov	r0, r6
   1f898:	f7fd fec4 	bl	1d624 <lll_chan_set>

	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1f89c:	9903      	ldr	r1, [sp, #12]
   1f89e:	4620      	mov	r0, r4
   1f8a0:	f7ff fb96 	bl	1efd0 <lll_conn_tx_pkt_set>

	radio_isr_set(lll_conn_isr_tx, lll);
   1f8a4:	4621      	mov	r1, r4
   1f8a6:	4828      	ldr	r0, [pc, #160]	; (1f948 <prepare_cb+0x148>)
   1f8a8:	f000 f944 	bl	1fb34 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1f8ac:	2096      	movs	r0, #150	; 0x96
   1f8ae:	f000 fbc9 	bl	20044 <radio_tmr_tifs_set>
		}
	}
#endif /* CONFIG_BT_CTLR_DF_CONN_CTE_RX */

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_rx(lll->phy_rx);
   1f8b2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1f8b6:	f000 0007 	and.w	r0, r0, #7
   1f8ba:	f000 fa97 	bl	1fdec <radio_switch_complete_and_rx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_rx(0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   1f8be:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1f8c0:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   1f8c2:	4638      	mov	r0, r7
   1f8c4:	f7fd fe90 	bl	1d5e8 <lll_event_offset_get>
   1f8c8:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(1, ticks_at_start, remainder);
   1f8ca:	686a      	ldr	r2, [r5, #4]
   1f8cc:	f106 0109 	add.w	r1, r6, #9
   1f8d0:	2001      	movs	r0, #1
   1f8d2:	f000 fbc3 	bl	2005c <radio_tmr_start>

	/* capture end of Tx-ed PDU, used to calculate HCTO. */
	radio_tmr_end_capture();
   1f8d6:	f000 fcc1 	bl	2025c <radio_tmr_end_capture>
#endif /* !HAL_RADIO_GPIO_HAVE_PA_PIN */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   1f8da:	89a1      	ldrh	r1, [r4, #12]
   1f8dc:	3105      	adds	r1, #5
   1f8de:	4632      	mov	r2, r6
   1f8e0:	b2c9      	uxtb	r1, r1
   1f8e2:	4638      	mov	r0, r7
   1f8e4:	f7fd fe8e 	bl	1d604 <lll_preempt_calc>
   1f8e8:	b180      	cbz	r0, 1f90c <prepare_cb+0x10c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1f8ea:	4818      	ldr	r0, [pc, #96]	; (1f94c <prepare_cb+0x14c>)
   1f8ec:	4621      	mov	r1, r4
   1f8ee:	f000 f921 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1f8f2:	f000 fa1b 	bl	1fd2c <radio_disable>
	}

	DEBUG_RADIO_START_M(1);

	return 0;
}
   1f8f6:	2000      	movs	r0, #0
   1f8f8:	b005      	add	sp, #20
   1f8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1f8fc:	460a      	mov	r2, r1
   1f8fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1f902:	8be1      	ldrh	r1, [r4, #30]
   1f904:	f7fc f9ac 	bl	1bc60 <lll_chan_sel_2>
   1f908:	4606      	mov	r6, r0
   1f90a:	e7a1      	b.n	1f850 <prepare_cb+0x50>
		ret = lll_prepare_done(lll);
   1f90c:	4620      	mov	r0, r4
   1f90e:	f7fd fe05 	bl	1d51c <lll_prepare_done>
		LL_ASSERT(!ret);
   1f912:	2800      	cmp	r0, #0
   1f914:	d0ef      	beq.n	1f8f6 <prepare_cb+0xf6>
   1f916:	4a0e      	ldr	r2, [pc, #56]	; (1f950 <prepare_cb+0x150>)
   1f918:	490e      	ldr	r1, [pc, #56]	; (1f954 <prepare_cb+0x154>)
   1f91a:	480f      	ldr	r0, [pc, #60]	; (1f958 <prepare_cb+0x158>)
   1f91c:	23fd      	movs	r3, #253	; 0xfd
   1f91e:	f008 fb43 	bl	27fa8 <printk>
   1f922:	4040      	eors	r0, r0
   1f924:	f380 8811 	msr	BASEPRI, r0
   1f928:	f04f 0003 	mov.w	r0, #3
   1f92c:	df02      	svc	2
}
   1f92e:	2000      	movs	r0, #0
   1f930:	b005      	add	sp, #20
   1f932:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(lll_isr_early_abort, lll);
   1f934:	4809      	ldr	r0, [pc, #36]	; (1f95c <prepare_cb+0x15c>)
   1f936:	4621      	mov	r1, r4
   1f938:	f000 f8fc 	bl	1fb34 <radio_isr_set>
		radio_disable();
   1f93c:	f000 f9f6 	bl	1fd2c <radio_disable>
}
   1f940:	2000      	movs	r0, #0
   1f942:	b005      	add	sp, #20
   1f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f946:	bf00      	nop
   1f948:	0001ef19 	.word	0x0001ef19
   1f94c:	0001d75d 	.word	0x0001d75d
   1f950:	00030ed0 	.word	0x00030ed0
   1f954:	00030354 	.word	0x00030354
   1f958:	0002fedc 	.word	0x0002fedc
   1f95c:	0001d781 	.word	0x0001d781

0001f960 <lll_central_prepare>:
{
   1f960:	b510      	push	{r4, lr}
   1f962:	b082      	sub	sp, #8
   1f964:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1f966:	f7fe f85b 	bl	1da20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1f96a:	2800      	cmp	r0, #0
   1f96c:	db19      	blt.n	1f9a2 <lll_central_prepare+0x42>
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0,
   1f96e:	4a13      	ldr	r2, [pc, #76]	; (1f9bc <lll_central_prepare+0x5c>)
   1f970:	4913      	ldr	r1, [pc, #76]	; (1f9c0 <lll_central_prepare+0x60>)
   1f972:	4814      	ldr	r0, [pc, #80]	; (1f9c4 <lll_central_prepare+0x64>)
   1f974:	9400      	str	r4, [sp, #0]
   1f976:	2300      	movs	r3, #0
   1f978:	f7f5 fdf8 	bl	1556c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f97c:	b108      	cbz	r0, 1f982 <lll_central_prepare+0x22>
   1f97e:	3077      	adds	r0, #119	; 0x77
   1f980:	d101      	bne.n	1f986 <lll_central_prepare+0x26>
}
   1f982:	b002      	add	sp, #8
   1f984:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1f986:	4a10      	ldr	r2, [pc, #64]	; (1f9c8 <lll_central_prepare+0x68>)
   1f988:	4910      	ldr	r1, [pc, #64]	; (1f9cc <lll_central_prepare+0x6c>)
   1f98a:	4811      	ldr	r0, [pc, #68]	; (1f9d0 <lll_central_prepare+0x70>)
   1f98c:	2351      	movs	r3, #81	; 0x51
   1f98e:	f008 fb0b 	bl	27fa8 <printk>
   1f992:	4040      	eors	r0, r0
   1f994:	f380 8811 	msr	BASEPRI, r0
   1f998:	f04f 0003 	mov.w	r0, #3
   1f99c:	df02      	svc	2
}
   1f99e:	b002      	add	sp, #8
   1f9a0:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1f9a2:	4a09      	ldr	r2, [pc, #36]	; (1f9c8 <lll_central_prepare+0x68>)
   1f9a4:	490b      	ldr	r1, [pc, #44]	; (1f9d4 <lll_central_prepare+0x74>)
   1f9a6:	480a      	ldr	r0, [pc, #40]	; (1f9d0 <lll_central_prepare+0x70>)
   1f9a8:	234c      	movs	r3, #76	; 0x4c
   1f9aa:	f008 fafd 	bl	27fa8 <printk>
   1f9ae:	4040      	eors	r0, r0
   1f9b0:	f380 8811 	msr	BASEPRI, r0
   1f9b4:	f04f 0003 	mov.w	r0, #3
   1f9b8:	df02      	svc	2
   1f9ba:	e7d8      	b.n	1f96e <lll_central_prepare+0xe>
   1f9bc:	0001f801 	.word	0x0001f801
   1f9c0:	0001ee2d 	.word	0x0001ee2d
   1f9c4:	0001d5e1 	.word	0x0001d5e1
   1f9c8:	00030ed0 	.word	0x00030ed0
   1f9cc:	00030d64 	.word	0x00030d64
   1f9d0:	0002fedc 	.word	0x0002fedc
   1f9d4:	00030c78 	.word	0x00030c78

0001f9d8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1f9d8:	4b05      	ldr	r3, [pc, #20]	; (1f9f0 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   1f9da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1f9de:	2100      	movs	r1, #0
   1f9e0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1f9e4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1f9e8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1f9ec:	4770      	bx	lr
   1f9ee:	bf00      	nop
   1f9f0:	4000b000 	.word	0x4000b000

0001f9f4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1f9f4:	4b05      	ldr	r3, [pc, #20]	; (1fa0c <cntr_start+0x18>)
   1f9f6:	7818      	ldrb	r0, [r3, #0]
   1f9f8:	1c42      	adds	r2, r0, #1
   1f9fa:	701a      	strb	r2, [r3, #0]
   1f9fc:	b918      	cbnz	r0, 1fa06 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1f9fe:	4b04      	ldr	r3, [pc, #16]	; (1fa10 <cntr_start+0x1c>)
   1fa00:	2201      	movs	r2, #1
   1fa02:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1fa04:	4770      	bx	lr
		return 1;
   1fa06:	2001      	movs	r0, #1
}
   1fa08:	4770      	bx	lr
   1fa0a:	bf00      	nop
   1fa0c:	20003b04 	.word	0x20003b04
   1fa10:	4000b000 	.word	0x4000b000

0001fa14 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1fa14:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1fa16:	4c0d      	ldr	r4, [pc, #52]	; (1fa4c <cntr_stop+0x38>)
   1fa18:	7820      	ldrb	r0, [r4, #0]
   1fa1a:	b148      	cbz	r0, 1fa30 <cntr_stop+0x1c>

	if (--_refcount) {
   1fa1c:	3801      	subs	r0, #1
   1fa1e:	b2c0      	uxtb	r0, r0
   1fa20:	7020      	strb	r0, [r4, #0]
   1fa22:	b918      	cbnz	r0, 1fa2c <cntr_stop+0x18>
   1fa24:	4b0a      	ldr	r3, [pc, #40]	; (1fa50 <cntr_stop+0x3c>)
   1fa26:	2201      	movs	r2, #1
   1fa28:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1fa2a:	bd10      	pop	{r4, pc}
		return 1;
   1fa2c:	2001      	movs	r0, #1
}
   1fa2e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1fa30:	4a08      	ldr	r2, [pc, #32]	; (1fa54 <cntr_stop+0x40>)
   1fa32:	4909      	ldr	r1, [pc, #36]	; (1fa58 <cntr_stop+0x44>)
   1fa34:	4809      	ldr	r0, [pc, #36]	; (1fa5c <cntr_stop+0x48>)
   1fa36:	232d      	movs	r3, #45	; 0x2d
   1fa38:	f008 fab6 	bl	27fa8 <printk>
   1fa3c:	4040      	eors	r0, r0
   1fa3e:	f380 8811 	msr	BASEPRI, r0
   1fa42:	f04f 0003 	mov.w	r0, #3
   1fa46:	df02      	svc	2
	if (--_refcount) {
   1fa48:	7820      	ldrb	r0, [r4, #0]
   1fa4a:	e7e7      	b.n	1fa1c <cntr_stop+0x8>
   1fa4c:	20003b04 	.word	0x20003b04
   1fa50:	4000b000 	.word	0x4000b000
   1fa54:	00030f34 	.word	0x00030f34
   1fa58:	00030f80 	.word	0x00030f80
   1fa5c:	0002fedc 	.word	0x0002fedc

0001fa60 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1fa60:	4b01      	ldr	r3, [pc, #4]	; (1fa68 <cntr_cnt_get+0x8>)
   1fa62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1fa66:	4770      	bx	lr
   1fa68:	4000b000 	.word	0x4000b000

0001fa6c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1fa6c:	4b02      	ldr	r3, [pc, #8]	; (1fa78 <cntr_cmp_set+0xc>)
   1fa6e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1fa72:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1fa76:	4770      	bx	lr
   1fa78:	4000b000 	.word	0x4000b000

0001fa7c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fa7c:	4b12      	ldr	r3, [pc, #72]	; (1fac8 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1fa7e:	b430      	push	{r4, r5}
   1fa80:	2101      	movs	r1, #1
   1fa82:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1fa84:	2000      	movs	r0, #0
   1fa86:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1fa88:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1fa8c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1fa90:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1fa94:	6019      	str	r1, [r3, #0]
}
   1fa96:	e005      	b.n	1faa4 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1fa98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1fa9c:	b932      	cbnz	r2, 1faac <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1fa9e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1faa2:	b11a      	cbz	r2, 1faac <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1faa4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1faa8:	2a00      	cmp	r2, #0
   1faaa:	d0f5      	beq.n	1fa98 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1faac:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1faae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1fab2:	2a00      	cmp	r2, #0
   1fab4:	d1e7      	bne.n	1fa86 <do_ecb+0xa>
   1fab6:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1faba:	2d00      	cmp	r5, #0
   1fabc:	d0e3      	beq.n	1fa86 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1fabe:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1fac0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fac4:	4770      	bx	lr
   1fac6:	bf00      	nop
   1fac8:	4000e000 	.word	0x4000e000

0001facc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1facc:	b570      	push	{r4, r5, r6, lr}
   1face:	b08c      	sub	sp, #48	; 0x30
   1fad0:	460e      	mov	r6, r1
   1fad2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1fad4:	4601      	mov	r1, r0
   1fad6:	2210      	movs	r2, #16
   1fad8:	4668      	mov	r0, sp
{
   1fada:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1fadc:	f7f1 f94a 	bl	10d74 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1fae0:	2210      	movs	r2, #16
   1fae2:	eb0d 0002 	add.w	r0, sp, r2
   1fae6:	4631      	mov	r1, r6
   1fae8:	f7f1 f944 	bl	10d74 <mem_rcopy>

	do_ecb(&ecb);
   1faec:	4668      	mov	r0, sp
   1faee:	f7ff ffc5 	bl	1fa7c <do_ecb>

	if (cipher_text_le) {
   1faf2:	b125      	cbz	r5, 1fafe <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1faf4:	2210      	movs	r2, #16
   1faf6:	a908      	add	r1, sp, #32
   1faf8:	4628      	mov	r0, r5
   1fafa:	f7f1 f93b 	bl	10d74 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1fafe:	b13c      	cbz	r4, 1fb10 <ecb_encrypt+0x44>
   1fb00:	f10d 0c20 	add.w	ip, sp, #32
   1fb04:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   1fb08:	6020      	str	r0, [r4, #0]
   1fb0a:	6061      	str	r1, [r4, #4]
   1fb0c:	60a2      	str	r2, [r4, #8]
   1fb0e:	60e3      	str	r3, [r4, #12]
		memcpy(cipher_text_be, &ecb.cipher_text[0],
			 sizeof(ecb.cipher_text));
	}
}
   1fb10:	b00c      	add	sp, #48	; 0x30
   1fb12:	bd70      	pop	{r4, r5, r6, pc}

0001fb14 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1fb14:	4b04      	ldr	r3, [pc, #16]	; (1fb28 <isr_radio+0x14>)
   1fb16:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1fb1a:	b123      	cbz	r3, 1fb26 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1fb1c:	4a03      	ldr	r2, [pc, #12]	; (1fb2c <isr_radio+0x18>)
   1fb1e:	4b04      	ldr	r3, [pc, #16]	; (1fb30 <isr_radio+0x1c>)
   1fb20:	6810      	ldr	r0, [r2, #0]
   1fb22:	681b      	ldr	r3, [r3, #0]
   1fb24:	4718      	bx	r3
}
   1fb26:	4770      	bx	lr
   1fb28:	40001000 	.word	0x40001000
   1fb2c:	20003688 	.word	0x20003688
   1fb30:	20003684 	.word	0x20003684

0001fb34 <radio_isr_set>:
{
   1fb34:	b538      	push	{r3, r4, r5, lr}
   1fb36:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1fb38:	2001      	movs	r0, #1
{
   1fb3a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1fb3c:	f7e7 fd9c 	bl	7678 <arch_irq_disable>
	isr_cb = cb;
   1fb40:	4b08      	ldr	r3, [pc, #32]	; (1fb64 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1fb42:	4a09      	ldr	r2, [pc, #36]	; (1fb68 <radio_isr_set+0x34>)
	isr_cb = cb;
   1fb44:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1fb46:	4909      	ldr	r1, [pc, #36]	; (1fb6c <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1fb48:	4b09      	ldr	r3, [pc, #36]	; (1fb70 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1fb4a:	6015      	str	r5, [r2, #0]
   1fb4c:	2010      	movs	r0, #16
   1fb4e:	2202      	movs	r2, #2
   1fb50:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1fb54:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1fb58:	2001      	movs	r0, #1
}
   1fb5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1fb5e:	f7e7 bd7b 	b.w	7658 <arch_irq_enable>
   1fb62:	bf00      	nop
   1fb64:	20003684 	.word	0x20003684
   1fb68:	20003688 	.word	0x20003688
   1fb6c:	40001000 	.word	0x40001000
   1fb70:	e000e100 	.word	0xe000e100

0001fb74 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1fb74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1fb78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1fb7c:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1fb7e:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1fb82:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1fb86:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1fb8a:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1fb8e:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1fb92:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1fb96:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1fb9a:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1fb9e:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1fba2:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1fba6:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1fbaa:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1fbae:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1fbb2:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1fbb6:	4770      	bx	lr

0001fbb8 <radio_reset>:
{
   1fbb8:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1fbba:	2001      	movs	r0, #1
   1fbbc:	f7e7 fd5c 	bl	7678 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   1fbc0:	4a0d      	ldr	r2, [pc, #52]	; (1fbf8 <radio_reset+0x40>)
   1fbc2:	2100      	movs	r1, #0
   1fbc4:	2301      	movs	r3, #1
   1fbc6:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1fbca:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1fbce:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1fbd2:	490a      	ldr	r1, [pc, #40]	; (1fbfc <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1fbd4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1fbd8:	f023 0301 	bic.w	r3, r3, #1
   1fbdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1fbe0:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PHYEND_DELAY_COMPENSATION_PPI(0)) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1fbe4:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1fbe8:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1fbec:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1fbf0:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1fbf4:	bd10      	pop	{r4, pc}
   1fbf6:	bf00      	nop
   1fbf8:	40001000 	.word	0x40001000
   1fbfc:	4001f000 	.word	0x4001f000

0001fc00 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1fc00:	4b06      	ldr	r3, [pc, #24]	; (1fc1c <radio_phy_set+0x1c>)
	default:
		mode = RADIO_MODE_MODE_Ble_1Mbit;
		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1fc02:	2802      	cmp	r0, #2
   1fc04:	bf14      	ite	ne
   1fc06:	2203      	movne	r2, #3
   1fc08:	2204      	moveq	r2, #4
   1fc0a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1fc0e:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1fc12:	f042 0201 	orr.w	r2, r2, #1
   1fc16:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1fc1a:	4770      	bx	lr
   1fc1c:	40001000 	.word	0x40001000

0001fc20 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1fc20:	4b01      	ldr	r3, [pc, #4]	; (1fc28 <radio_tx_power_set+0x8>)
   1fc22:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1fc26:	4770      	bx	lr
   1fc28:	40001000 	.word	0x40001000

0001fc2c <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1fc2c:	4b01      	ldr	r3, [pc, #4]	; (1fc34 <radio_freq_chan_set+0x8>)
   1fc2e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1fc32:	4770      	bx	lr
   1fc34:	40001000 	.word	0x40001000

0001fc38 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1fc38:	4b07      	ldr	r3, [pc, #28]	; (1fc58 <radio_whiten_iv_set+0x20>)
   1fc3a:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1fc3e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1fc42:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1fc46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1fc4a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1fc4e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1fc52:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1fc56:	4770      	bx	lr
   1fc58:	40001000 	.word	0x40001000

0001fc5c <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1fc5c:	4a0a      	ldr	r2, [pc, #40]	; (1fc88 <radio_aa_set+0x2c>)
   1fc5e:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1fc60:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1fc62:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1fc66:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1fc6a:	78c3      	ldrb	r3, [r0, #3]
   1fc6c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1fc70:	7843      	ldrb	r3, [r0, #1]
   1fc72:	f890 c002 	ldrb.w	ip, [r0, #2]
   1fc76:	7801      	ldrb	r1, [r0, #0]
   1fc78:	041b      	lsls	r3, r3, #16
   1fc7a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1fc7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1fc82:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1fc86:	4770      	bx	lr
   1fc88:	40001000 	.word	0x40001000

0001fc8c <radio_pkt_configure>:
	switch (phy) {
   1fc8c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1fc90:	2b02      	cmp	r3, #2
   1fc92:	bf14      	ite	ne
   1fc94:	f04f 0c00 	movne.w	ip, #0
   1fc98:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (pdu_type == RADIO_PKT_CONF_PDU_TYPE_DC) {
   1fc9c:	07d3      	lsls	r3, r2, #31
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1fc9e:	bf48      	it	mi
   1fca0:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
		((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) & RADIO_PCNF0_LFLEN_Msk) |
   1fca4:	f000 000f 	and.w	r0, r0, #15
	NRF_RADIO->PCNF0 =
   1fca8:	4b0a      	ldr	r3, [pc, #40]	; (1fcd4 <radio_pkt_configure+0x48>)
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1fcaa:	4a0b      	ldr	r2, [pc, #44]	; (1fcd8 <radio_pkt_configure+0x4c>)
		((((uint32_t)bits_s1) << RADIO_PCNF0_S1LEN_Pos) & RADIO_PCNF0_S1LEN_Msk) | extra;
   1fcac:	ea40 000c 	orr.w	r0, r0, ip
   1fcb0:	f440 7080 	orr.w	r0, r0, #256	; 0x100
	NRF_RADIO->PCNF0 =
   1fcb4:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1fcb8:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
   1fcbc:	4002      	ands	r2, r0
   1fcbe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |=
   1fcc2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1fcc6:	4311      	orrs	r1, r2
   1fcc8:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1fccc:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
}
   1fcd0:	4770      	bx	lr
   1fcd2:	bf00      	nop
   1fcd4:	40001000 	.word	0x40001000
   1fcd8:	fef80000 	.word	0xfef80000

0001fcdc <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1fcdc:	4b01      	ldr	r3, [pc, #4]	; (1fce4 <radio_pkt_rx_set+0x8>)
   1fcde:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1fce2:	4770      	bx	lr
   1fce4:	40001000 	.word	0x40001000

0001fce8 <radio_pkt_tx_set>:
   1fce8:	4b01      	ldr	r3, [pc, #4]	; (1fcf0 <radio_pkt_tx_set+0x8>)
   1fcea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1fcee:	4770      	bx	lr
   1fcf0:	40001000 	.word	0x40001000

0001fcf4 <radio_tx_ready_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_TXEN_TXIDLE_TX_2M_US;
   1fcf4:	2802      	cmp	r0, #2
}
   1fcf6:	bf14      	ite	ne
   1fcf8:	2029      	movne	r0, #41	; 0x29
   1fcfa:	2028      	moveq	r0, #40	; 0x28
   1fcfc:	4770      	bx	lr
   1fcfe:	bf00      	nop

0001fd00 <radio_tx_chain_delay_get>:
}
   1fd00:	2001      	movs	r0, #1
   1fd02:	4770      	bx	lr

0001fd04 <radio_rx_ready_delay_get>:
}
   1fd04:	2029      	movs	r0, #41	; 0x29
   1fd06:	4770      	bx	lr

0001fd08 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_US;
   1fd08:	2802      	cmp	r0, #2
}
   1fd0a:	bf14      	ite	ne
   1fd0c:	200a      	movne	r0, #10
   1fd0e:	2006      	moveq	r0, #6
   1fd10:	4770      	bx	lr
   1fd12:	bf00      	nop

0001fd14 <radio_rx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fd14:	4b01      	ldr	r3, [pc, #4]	; (1fd1c <radio_rx_enable+0x8>)
   1fd16:	2201      	movs	r2, #1
   1fd18:	605a      	str	r2, [r3, #4]
}
   1fd1a:	4770      	bx	lr
   1fd1c:	40001000 	.word	0x40001000

0001fd20 <radio_tx_enable>:
   1fd20:	4b01      	ldr	r3, [pc, #4]	; (1fd28 <radio_tx_enable+0x8>)
   1fd22:	2201      	movs	r2, #1
   1fd24:	601a      	str	r2, [r3, #0]
}
   1fd26:	4770      	bx	lr
   1fd28:	40001000 	.word	0x40001000

0001fd2c <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1fd2c:	4a07      	ldr	r2, [pc, #28]	; (1fd4c <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1fd2e:	4908      	ldr	r1, [pc, #32]	; (1fd50 <radio_disable+0x24>)
{
   1fd30:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1fd32:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1fd34:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1fd38:	2000      	movs	r0, #0
   1fd3a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1fd3e:	6053      	str	r3, [r2, #4]
}
   1fd40:	bc10      	pop	{r4}
   1fd42:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1fd44:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1fd48:	610b      	str	r3, [r1, #16]
}
   1fd4a:	4770      	bx	lr
   1fd4c:	4001f000 	.word	0x4001f000
   1fd50:	40001000 	.word	0x40001000

0001fd54 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1fd54:	4b04      	ldr	r3, [pc, #16]	; (1fd68 <radio_status_reset+0x14>)
   1fd56:	2200      	movs	r2, #0
   1fd58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1fd5c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1fd60:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1fd64:	4770      	bx	lr
   1fd66:	bf00      	nop
   1fd68:	40001000 	.word	0x40001000

0001fd6c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1fd6c:	4b03      	ldr	r3, [pc, #12]	; (1fd7c <radio_is_ready+0x10>)
   1fd6e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1fd72:	3800      	subs	r0, #0
   1fd74:	bf18      	it	ne
   1fd76:	2001      	movne	r0, #1
   1fd78:	4770      	bx	lr
   1fd7a:	bf00      	nop
   1fd7c:	40001000 	.word	0x40001000

0001fd80 <radio_is_done>:
	return (NRF_RADIO->NRF_RADIO_TXRX_END_EVENT != 0);
   1fd80:	4b03      	ldr	r3, [pc, #12]	; (1fd90 <radio_is_done+0x10>)
   1fd82:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1fd86:	3800      	subs	r0, #0
   1fd88:	bf18      	it	ne
   1fd8a:	2001      	movne	r0, #1
   1fd8c:	4770      	bx	lr
   1fd8e:	bf00      	nop
   1fd90:	40001000 	.word	0x40001000

0001fd94 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1fd94:	4b03      	ldr	r3, [pc, #12]	; (1fda4 <radio_is_idle+0x10>)
   1fd96:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1fd9a:	fab0 f080 	clz	r0, r0
   1fd9e:	0940      	lsrs	r0, r0, #5
   1fda0:	4770      	bx	lr
   1fda2:	bf00      	nop
   1fda4:	40001000 	.word	0x40001000

0001fda8 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1fda8:	4b04      	ldr	r3, [pc, #16]	; (1fdbc <radio_crc_configure+0x14>)
   1fdaa:	f240 1203 	movw	r2, #259	; 0x103
   1fdae:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1fdb2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1fdb6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1fdba:	4770      	bx	lr
   1fdbc:	40001000 	.word	0x40001000

0001fdc0 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1fdc0:	4b03      	ldr	r3, [pc, #12]	; (1fdd0 <radio_crc_is_valid+0x10>)
   1fdc2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1fdc6:	3800      	subs	r0, #0
   1fdc8:	bf18      	it	ne
   1fdca:	2001      	movne	r0, #1
   1fdcc:	4770      	bx	lr
   1fdce:	bf00      	nop
   1fdd0:	40001000 	.word	0x40001000

0001fdd4 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1fdd4:	4800      	ldr	r0, [pc, #0]	; (1fdd8 <radio_pkt_empty_get+0x4>)
   1fdd6:	4770      	bx	lr
   1fdd8:	2000357c 	.word	0x2000357c

0001fddc <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1fddc:	4800      	ldr	r0, [pc, #0]	; (1fde0 <radio_pkt_scratch_get+0x4>)
   1fdde:	4770      	bx	lr
   1fde0:	20003580 	.word	0x20003580

0001fde4 <radio_pkt_decrypt_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_decrypt_get(void)
{
	return _pkt_decrypt;
}
   1fde4:	4800      	ldr	r0, [pc, #0]	; (1fde8 <radio_pkt_decrypt_get+0x4>)
   1fde6:	4770      	bx	lr
   1fde8:	20003478 	.word	0x20003478

0001fdec <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1fdec:	4b1d      	ldr	r3, [pc, #116]	; (1fe64 <radio_switch_complete_and_rx+0x78>)
{
   1fdee:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1fdf0:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1fdf2:	4d1d      	ldr	r5, [pc, #116]	; (1fe68 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1fdf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1fdf8:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1fdfa:	4e1c      	ldr	r6, [pc, #112]	; (1fe6c <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1fdfc:	4c1c      	ldr	r4, [pc, #112]	; (1fe70 <radio_switch_complete_and_rx+0x84>)
   1fdfe:	4f1d      	ldr	r7, [pc, #116]	; (1fe74 <radio_switch_complete_and_rx+0x88>)
   1fe00:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1fe04:	f102 030c 	add.w	r3, r2, #12
   1fe08:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1fe0a:	00d0      	lsls	r0, r2, #3
   1fe0c:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1fe0e:	0091      	lsls	r1, r2, #2
   1fe10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1fe14:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1fe18:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1fe1c:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1fe20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1fe24:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1fe28:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1fe2c:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1fe30:	4811      	ldr	r0, [pc, #68]	; (1fe78 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1fe32:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1fe36:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1fe3a:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   1fe3e:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1fe40:	bf8a      	itet	hi
   1fe42:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1fe46:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1fe48:	3b2d      	subhi	r3, #45	; 0x2d
   1fe4a:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1fe4e:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1fe50:	4b06      	ldr	r3, [pc, #24]	; (1fe6c <radio_switch_complete_and_rx+0x80>)
   1fe52:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1fe56:	f002 0201 	and.w	r2, r2, #1
   1fe5a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1fe5e:	702a      	strb	r2, [r5, #0]
	 *       calculations.
	 */
	sw_switch(SW_SWITCH_TX, SW_SWITCH_RX, SW_SWITCH_PHY_1M, SW_SWITCH_FLAGS_DONTCARE, phy_rx,
		  SW_SWITCH_FLAGS_DONTCARE, END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1fe60:	bcf0      	pop	{r4, r5, r6, r7}
   1fe62:	4770      	bx	lr
   1fe64:	40001000 	.word	0x40001000
   1fe68:	20003b05 	.word	0x20003b05
   1fe6c:	4001f000 	.word	0x4001f000
   1fe70:	40009140 	.word	0x40009140
   1fe74:	4000110c 	.word	0x4000110c
   1fe78:	40001004 	.word	0x40001004

0001fe7c <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   1fe7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1fe80:	4e28      	ldr	r6, [pc, #160]	; (1ff24 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1fe82:	4c29      	ldr	r4, [pc, #164]	; (1ff28 <radio_switch_complete_and_tx+0xac>)
   1fe84:	4f29      	ldr	r7, [pc, #164]	; (1ff2c <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1fe86:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1ff30 <radio_switch_complete_and_tx+0xb4>
   1fe8a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1ff34 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE;
   1fe8e:	2303      	movs	r3, #3
   1fe90:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1fe94:	7821      	ldrb	r1, [r4, #0]
   1fe96:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1fe9a:	f101 030c 	add.w	r3, r1, #12
   1fe9e:	b2db      	uxtb	r3, r3
   1fea0:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1fea2:	00cd      	lsls	r5, r1, #3
   1fea4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1fea8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1feac:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1feb0:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1feb4:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1feb8:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1febc:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   1fec0:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1fec4:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1fec8:	f24a 234e 	movw	r3, #41550	; 0xa24e
   1fecc:	2a02      	cmp	r2, #2
   1fece:	bf08      	it	eq
   1fed0:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1fed2:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   1fed6:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1feda:	f241 554a 	movw	r5, #5450	; 0x154a
   1fede:	2802      	cmp	r0, #2
   1fee0:	bf08      	it	eq
   1fee2:	462a      	moveq	r2, r5
   1fee4:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1fee8:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   1feec:	4413      	add	r3, r2
   1feee:	4a12      	ldr	r2, [pc, #72]	; (1ff38 <radio_switch_complete_and_tx+0xbc>)
   1fef0:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1fef4:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1fef8:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1fefc:	bf85      	ittet	hi
   1fefe:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   1ff00:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1ff04:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1ff06:	1a1b      	subhi	r3, r3, r0
   1ff08:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1ff0c:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1ff0e:	4b08      	ldr	r3, [pc, #32]	; (1ff30 <radio_switch_complete_and_tx+0xb4>)
   1ff10:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   1ff14:	f001 0101 	and.w	r1, r1, #1
   1ff18:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1ff1c:	7021      	strb	r1, [r4, #0]

	sw_switch(SW_SWITCH_RX, SW_SWITCH_TX, phy_rx, flags_rx, phy_tx, flags_tx,
		  END_EVT_DELAY_DISABLED);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ff1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ff22:	bf00      	nop
   1ff24:	40001000 	.word	0x40001000
   1ff28:	20003b05 	.word	0x20003b05
   1ff2c:	40009140 	.word	0x40009140
   1ff30:	4001f000 	.word	0x4001f000
   1ff34:	4000110c 	.word	0x4000110c
   1ff38:	10624dd3 	.word	0x10624dd3

0001ff3c <radio_switch_complete_and_disable>:
void radio_switch_complete_and_disable(void)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);
#else /* CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = (RADIO_SHORTS_READY_START_Msk | NRF_RADIO_SHORTS_PDU_END_DISABLE);
   1ff3c:	4904      	ldr	r1, [pc, #16]	; (1ff50 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1ff3e:	4b05      	ldr	r3, [pc, #20]	; (1ff54 <radio_switch_complete_and_disable+0x18>)
   1ff40:	2003      	movs	r0, #3
   1ff42:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1ff46:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ff4a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ff4e:	4770      	bx	lr
   1ff50:	40001000 	.word	0x40001000
   1ff54:	4001f000 	.word	0x4001f000

0001ff58 <radio_phy_flags_rx_get>:
	return 0;
#endif /* !CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#else /* !CONFIG_BT_CTLR_PHY_CODED */
	return 0;
#endif /* !CONFIG_BT_CTLR_PHY_CODED */
}
   1ff58:	2000      	movs	r0, #0
   1ff5a:	4770      	bx	lr

0001ff5c <radio_rssi_measure>:

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
   1ff5c:	4a03      	ldr	r2, [pc, #12]	; (1ff6c <radio_rssi_measure+0x10>)
   1ff5e:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1ff62:	f443 7388 	orr.w	r3, r3, #272	; 0x110
   1ff66:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	    (RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}
   1ff6a:	4770      	bx	lr
   1ff6c:	40001000 	.word	0x40001000

0001ff70 <radio_rssi_get>:

uint32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
   1ff70:	4b01      	ldr	r3, [pc, #4]	; (1ff78 <radio_rssi_get+0x8>)
   1ff72:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
   1ff76:	4770      	bx	lr
   1ff78:	40001000 	.word	0x40001000

0001ff7c <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1ff7c:	4b02      	ldr	r3, [pc, #8]	; (1ff88 <radio_rssi_status_reset+0xc>)
   1ff7e:	2200      	movs	r2, #0
   1ff80:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1ff84:	4770      	bx	lr
   1ff86:	bf00      	nop
   1ff88:	40001000 	.word	0x40001000

0001ff8c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1ff8c:	4b03      	ldr	r3, [pc, #12]	; (1ff9c <radio_rssi_is_ready+0x10>)
   1ff8e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1ff92:	3800      	subs	r0, #0
   1ff94:	bf18      	it	ne
   1ff96:	2001      	movne	r0, #1
   1ff98:	4770      	bx	lr
   1ff9a:	bf00      	nop
   1ff9c:	40001000 	.word	0x40001000

0001ffa0 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1ffa0:	b410      	push	{r4}
   1ffa2:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ffa6:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1ffaa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ffae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1ffb2:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1ffb4:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1ffb8:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1ffbc:	8894      	ldrh	r4, [r2, #4]
   1ffbe:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1ffc2:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1ffc6:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1ffca:	d1ec      	bne.n	1ffa6 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ffcc:	4b03      	ldr	r3, [pc, #12]	; (1ffdc <radio_filter_configure+0x3c>)
}
   1ffce:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ffd0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1ffd4:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1ffd8:	4770      	bx	lr
   1ffda:	bf00      	nop
   1ffdc:	40001000 	.word	0x40001000

0001ffe0 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1ffe0:	4a03      	ldr	r2, [pc, #12]	; (1fff0 <radio_filter_disable+0x10>)
   1ffe2:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1ffe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ffea:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1ffee:	4770      	bx	lr
   1fff0:	40001000 	.word	0x40001000

0001fff4 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1fff4:	4b02      	ldr	r3, [pc, #8]	; (20000 <radio_filter_status_reset+0xc>)
   1fff6:	2200      	movs	r2, #0
   1fff8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1fffc:	4770      	bx	lr
   1fffe:	bf00      	nop
   20000:	40001000 	.word	0x40001000

00020004 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   20004:	4b03      	ldr	r3, [pc, #12]	; (20014 <radio_filter_has_match+0x10>)
   20006:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   2000a:	3800      	subs	r0, #0
   2000c:	bf18      	it	ne
   2000e:	2001      	movne	r0, #1
   20010:	4770      	bx	lr
   20012:	bf00      	nop
   20014:	40001000 	.word	0x40001000

00020018 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   20018:	4b01      	ldr	r3, [pc, #4]	; (20020 <radio_filter_match_get+0x8>)
   2001a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   2001e:	4770      	bx	lr
   20020:	40001000 	.word	0x40001000

00020024 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   20024:	4904      	ldr	r1, [pc, #16]	; (20038 <radio_tmr_status_reset+0x14>)
   20026:	4b05      	ldr	r3, [pc, #20]	; (2003c <radio_tmr_status_reset+0x18>)
   20028:	4a05      	ldr	r2, [pc, #20]	; (20040 <radio_tmr_status_reset+0x1c>)
   2002a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   2002e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   20032:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#if defined(CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE)
			BIT(HAL_SW_SWITCH_TIMER_PHYEND_DELAY_COMPENSATION_DISABLE_PPI) |
#endif /* CONFIG_BT_CTLR_DF_PHYEND_OFFSET_COMPENSATION_ENABLE */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   20036:	4770      	bx	lr
   20038:	4000b000 	.word	0x4000b000
   2003c:	4001f000 	.word	0x4001f000
   20040:	0e7000c0 	.word	0x0e7000c0

00020044 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   20044:	4b03      	ldr	r3, [pc, #12]	; (20054 <radio_tmr_tifs_set+0x10>)
   20046:	4a04      	ldr	r2, [pc, #16]	; (20058 <radio_tmr_tifs_set+0x14>)
   20048:	781b      	ldrb	r3, [r3, #0]
   2004a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   2004e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   20052:	4770      	bx	lr
   20054:	20003b05 	.word	0x20003b05
   20058:	40009000 	.word	0x40009000

0002005c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   2005c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   20060:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   20064:	4d31      	ldr	r5, [pc, #196]	; (2012c <radio_tmr_start+0xd0>)
   20066:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   2006a:	42ab      	cmp	r3, r5
{
   2006c:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   2006e:	d906      	bls.n	2007e <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   20070:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   20074:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   20078:	3901      	subs	r1, #1
		remainder += 30517578UL;
   2007a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2007e:	4b2c      	ldr	r3, [pc, #176]	; (20130 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   20080:	482c      	ldr	r0, [pc, #176]	; (20134 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   20082:	4d2d      	ldr	r5, [pc, #180]	; (20138 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20084:	4e2d      	ldr	r6, [pc, #180]	; (2013c <radio_tmr_start+0xe0>)
   20086:	2701      	movs	r7, #1
   20088:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   2008a:	2700      	movs	r7, #0
   2008c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   20090:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   20094:	2704      	movs	r7, #4
   20096:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   2009a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   2009c:	2702      	movs	r7, #2
   2009e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   200a2:	4a27      	ldr	r2, [pc, #156]	; (20140 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   200a4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   200a8:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   200ac:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   200b0:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   200b4:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200b6:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200ba:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   200be:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   200c2:	bb64      	cbnz	r4, 2011e <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   200c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   200c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   200cc:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   200d0:	4b1b      	ldr	r3, [pc, #108]	; (20140 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   200d2:	4a1c      	ldr	r2, [pc, #112]	; (20144 <radio_tmr_start+0xe8>)
   200d4:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   200d8:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   200da:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200dc:	f8df 8068 	ldr.w	r8, [pc, #104]	; 20148 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200e0:	f8df e068 	ldr.w	lr, [pc, #104]	; 2014c <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200e4:	f8df c068 	ldr.w	ip, [pc, #104]	; 20150 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200e8:	4f1a      	ldr	r7, [pc, #104]	; (20154 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   200ea:	4e1b      	ldr	r6, [pc, #108]	; (20158 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   200ec:	4d1b      	ldr	r5, [pc, #108]	; (2015c <radio_tmr_start+0x100>)
   200ee:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   200f0:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   200f4:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   200f8:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   200fc:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   20100:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20102:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20106:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2010a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   2010e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20112:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20116:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   2011a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   2011e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   20122:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   20126:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   2012a:	e7d1      	b.n	200d0 <radio_tmr_start+0x74>
   2012c:	7ff0bdbf 	.word	0x7ff0bdbf
   20130:	40008000 	.word	0x40008000
   20134:	431bde83 	.word	0x431bde83
   20138:	4000b000 	.word	0x4000b000
   2013c:	4000b148 	.word	0x4000b148
   20140:	4001f000 	.word	0x4001f000
   20144:	40009000 	.word	0x40009000
   20148:	4000110c 	.word	0x4000110c
   2014c:	4000900c 	.word	0x4000900c
   20150:	40009140 	.word	0x40009140
   20154:	4001f004 	.word	0x4001f004
   20158:	40009144 	.word	0x40009144
   2015c:	4001f00c 	.word	0x4001f00c

00020160 <radio_tmr_start_tick>:
   20160:	4a15      	ldr	r2, [pc, #84]	; (201b8 <radio_tmr_start_tick+0x58>)

uint32_t radio_tmr_start_tick(uint8_t trx, uint32_t tick)
{
   20162:	b430      	push	{r4, r5}
   20164:	2301      	movs	r3, #1
    p_reg->CC[ch] = cc_val;
   20166:	4c15      	ldr	r4, [pc, #84]	; (201bc <radio_tmr_start_tick+0x5c>)
   20168:	6053      	str	r3, [r2, #4]
    p_reg->EVTENSET = mask;
   2016a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
   2016e:	60d3      	str	r3, [r2, #12]
    p_reg->CC[cc_channel] = cc_value;
   20170:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20174:	4b12      	ldr	r3, [pc, #72]	; (201c0 <radio_tmr_start_tick+0x60>)
    p_reg->CC[ch] = cc_val;
   20176:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   2017a:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
    p_reg->CHENSET = mask;
   2017e:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20180:	f504 74a4 	add.w	r4, r4, #328	; 0x148
   20184:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20188:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   2018c:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	nrf_ppi_channels_disable(
   20190:	b158      	cbz	r0, 201aa <radio_tmr_start_tick+0x4a>
    p_reg->CHENCLR = mask;
   20192:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   20196:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	nrf_ppi_channels_enable(
   2019a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   2019e:	4a08      	ldr	r2, [pc, #32]	; (201c0 <radio_tmr_start_tick+0x60>)
	hal_sw_switch_timer_clear_ppi_config();
#endif /* CONFIG_SOC_SERIES_NRF53X */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder_us;
}
   201a0:	2001      	movs	r0, #1
   201a2:	bc30      	pop	{r4, r5}
   201a4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
   201a8:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   201aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   201ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
   201b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   201b6:	e7f2      	b.n	2019e <radio_tmr_start_tick+0x3e>
   201b8:	40008000 	.word	0x40008000
   201bc:	4000b000 	.word	0x4000b000
   201c0:	4001f000 	.word	0x4001f000

000201c4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   201c4:	4b01      	ldr	r3, [pc, #4]	; (201cc <radio_tmr_start_get+0x8>)
   201c6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   201ca:	4770      	bx	lr
   201cc:	4000b000 	.word	0x4000b000

000201d0 <radio_tmr_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   201d0:	4903      	ldr	r1, [pc, #12]	; (201e0 <radio_tmr_stop+0x10>)
   201d2:	4a04      	ldr	r2, [pc, #16]	; (201e4 <radio_tmr_stop+0x14>)
   201d4:	2301      	movs	r3, #1
   201d6:	604b      	str	r3, [r1, #4]
   201d8:	610b      	str	r3, [r1, #16]
   201da:	6053      	str	r3, [r2, #4]
   201dc:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   201de:	4770      	bx	lr
   201e0:	40008000 	.word	0x40008000
   201e4:	40009000 	.word	0x40009000

000201e8 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   201e8:	4904      	ldr	r1, [pc, #16]	; (201fc <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   201ea:	4b05      	ldr	r3, [pc, #20]	; (20200 <radio_tmr_hcto_configure+0x18>)
   201ec:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   201f0:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   201f4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   201f8:	4770      	bx	lr
   201fa:	bf00      	nop
   201fc:	40008000 	.word	0x40008000
   20200:	4001f000 	.word	0x4001f000

00020204 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   20204:	4b05      	ldr	r3, [pc, #20]	; (2021c <radio_tmr_aa_capture+0x18>)
   20206:	4806      	ldr	r0, [pc, #24]	; (20220 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20208:	4906      	ldr	r1, [pc, #24]	; (20224 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   2020a:	4a07      	ldr	r2, [pc, #28]	; (20228 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2020c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   20210:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   20214:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   20218:	4770      	bx	lr
   2021a:	bf00      	nop
   2021c:	4001f000 	.word	0x4001f000
   20220:	40001100 	.word	0x40001100
   20224:	40008040 	.word	0x40008040
   20228:	04000080 	.word	0x04000080

0002022c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   2022c:	4b01      	ldr	r3, [pc, #4]	; (20234 <radio_tmr_aa_get+0x8>)
   2022e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   20232:	4770      	bx	lr
   20234:	40008000 	.word	0x40008000

00020238 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   20238:	4b01      	ldr	r3, [pc, #4]	; (20240 <radio_tmr_aa_save+0x8>)
   2023a:	6018      	str	r0, [r3, #0]
}
   2023c:	4770      	bx	lr
   2023e:	bf00      	nop
   20240:	2000368c 	.word	0x2000368c

00020244 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   20244:	4b01      	ldr	r3, [pc, #4]	; (2024c <radio_tmr_aa_restore+0x8>)
}
   20246:	6818      	ldr	r0, [r3, #0]
   20248:	4770      	bx	lr
   2024a:	bf00      	nop
   2024c:	2000368c 	.word	0x2000368c

00020250 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   20250:	4b01      	ldr	r3, [pc, #4]	; (20258 <radio_tmr_ready_get+0x8>)
   20252:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   20256:	4770      	bx	lr
   20258:	40008000 	.word	0x40008000

0002025c <radio_tmr_end_capture>:
   2025c:	4b02      	ldr	r3, [pc, #8]	; (20268 <radio_tmr_end_capture+0xc>)
   2025e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   20262:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* !CONFIG_SOC_SERIES_NRF53X ||
	* (CONFIG_SOC_SERIES_NRF53X && !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	*/
}
   20266:	4770      	bx	lr
   20268:	4001f000 	.word	0x4001f000

0002026c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   2026c:	4b01      	ldr	r3, [pc, #4]	; (20274 <radio_tmr_end_get+0x8>)
   2026e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   20272:	4770      	bx	lr
   20274:	40008000 	.word	0x40008000

00020278 <radio_tmr_tifs_base_get>:
   20278:	4b01      	ldr	r3, [pc, #4]	; (20280 <radio_tmr_tifs_base_get+0x8>)
   2027a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   2027e:	4770      	bx	lr
   20280:	40008000 	.word	0x40008000

00020284 <radio_ccm_rx_pkt_set>:
#endif /* HAL_RADIO_GPIO_HAVE_PA_PIN || HAL_RADIO_GPIO_HAVE_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   20284:	b4f0      	push	{r4, r5, r6, r7}
   20286:	4605      	mov	r5, r0
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case PHY_2M:
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   20288:	4e13      	ldr	r6, [pc, #76]	; (202d8 <radio_ccm_rx_pkt_set+0x54>)
   2028a:	4814      	ldr	r0, [pc, #80]	; (202dc <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2028c:	4b14      	ldr	r3, [pc, #80]	; (202e0 <radio_ccm_rx_pkt_set+0x5c>)

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2028e:	4f15      	ldr	r7, [pc, #84]	; (202e4 <radio_ccm_rx_pkt_set+0x60>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   20290:	2400      	movs	r4, #0
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   20292:	2902      	cmp	r1, #2
   20294:	bf08      	it	eq
   20296:	4606      	moveq	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   20298:	f04f 0c02 	mov.w	ip, #2
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   2029c:	4812      	ldr	r0, [pc, #72]	; (202e8 <radio_ccm_rx_pkt_set+0x64>)
   2029e:	4913      	ldr	r1, [pc, #76]	; (202ec <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   202a0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   202a4:	f8c3 c500 	str.w	ip, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   202a8:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   202ac:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   202b0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   202b4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   202b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   202bc:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   202c0:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   202c4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   202c8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   202cc:	f8c1 2504 	str.w	r2, [r1, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   202d0:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   202d2:	bcf0      	pop	{r4, r5, r6, r7}
   202d4:	601a      	str	r2, [r3, #0]
   202d6:	4770      	bx	lr
   202d8:	01000001 	.word	0x01000001
   202dc:	01010001 	.word	0x01010001
   202e0:	4000f000 	.word	0x4000f000
   202e4:	2000336c 	.word	0x2000336c
   202e8:	20003580 	.word	0x20003580
   202ec:	4001f000 	.word	0x4001f000

000202f0 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   202f0:	4b0f      	ldr	r3, [pc, #60]	; (20330 <radio_ccm_tx_pkt_set+0x40>)
{
   202f2:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   202f4:	2200      	movs	r2, #0
{
   202f6:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   202f8:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   202fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   202fe:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   20302:	480c      	ldr	r0, [pc, #48]	; (20334 <radio_ccm_tx_pkt_set+0x44>)
   20304:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   20308:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   2030c:	480a      	ldr	r0, [pc, #40]	; (20338 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   2030e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   20312:	4c0a      	ldr	r4, [pc, #40]	; (2033c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   20314:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   20318:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2031a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2031e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   20322:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   20324:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   20328:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2032c:	6019      	str	r1, [r3, #0]
}
   2032e:	4770      	bx	lr
   20330:	4000f000 	.word	0x4000f000
   20334:	01010000 	.word	0x01010000
   20338:	20003580 	.word	0x20003580
   2033c:	2000336c 	.word	0x2000336c

00020340 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   20340:	4a0e      	ldr	r2, [pc, #56]	; (2037c <radio_ccm_is_done+0x3c>)
   20342:	2302      	movs	r3, #2
   20344:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   20348:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   2034c:	b933      	cbnz	r3, 2035c <radio_ccm_is_done+0x1c>
		__WFE();
   2034e:	bf20      	wfe
		__SEV();
   20350:	bf40      	sev
		__WFE();
   20352:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   20354:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   20358:	2b00      	cmp	r3, #0
   2035a:	d0f8      	beq.n	2034e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2035c:	4b07      	ldr	r3, [pc, #28]	; (2037c <radio_ccm_is_done+0x3c>)
   2035e:	4a08      	ldr	r2, [pc, #32]	; (20380 <radio_ccm_is_done+0x40>)
   20360:	2002      	movs	r0, #2
   20362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   20366:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   2036a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   2036e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   20372:	fab0 f080 	clz	r0, r0
   20376:	0940      	lsrs	r0, r0, #5
   20378:	4770      	bx	lr
   2037a:	bf00      	nop
   2037c:	4000f000 	.word	0x4000f000
   20380:	e000e100 	.word	0xe000e100

00020384 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   20384:	4b03      	ldr	r3, [pc, #12]	; (20394 <radio_ccm_mic_is_valid+0x10>)
   20386:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   2038a:	3800      	subs	r0, #0
   2038c:	bf18      	it	ne
   2038e:	2001      	movne	r0, #1
   20390:	4770      	bx	lr
   20392:	bf00      	nop
   20394:	4000f000 	.word	0x4000f000

00020398 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   20398:	4a15      	ldr	r2, [pc, #84]	; (203f0 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   2039a:	4b16      	ldr	r3, [pc, #88]	; (203f4 <radio_ar_configure+0x5c>)
{
   2039c:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   2039e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   203a2:	4e15      	ldr	r6, [pc, #84]	; (203f8 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   203a4:	2703      	movs	r7, #3
   203a6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   203aa:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   203ac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   203b0:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   203b2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   203b6:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   203b8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   203bc:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   203c0:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   203c4:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   203c8:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   203cc:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   203d0:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   203d4:	4909      	ldr	r1, [pc, #36]	; (203fc <radio_ar_configure+0x64>)
   203d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   203da:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   203de:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   203e2:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   203e6:	bcf0      	pop	{r4, r5, r6, r7}
   203e8:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   203ec:	4770      	bx	lr
   203ee:	bf00      	nop
   203f0:	40001000 	.word	0x40001000
   203f4:	4000f000 	.word	0x4000f000
   203f8:	20003368 	.word	0x20003368
   203fc:	4001f000 	.word	0x4001f000

00020400 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   20400:	4b01      	ldr	r3, [pc, #4]	; (20408 <radio_ar_match_get+0x8>)
   20402:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   20406:	4770      	bx	lr
   20408:	4000f000 	.word	0x4000f000

0002040c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   2040c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2040e:	4807      	ldr	r0, [pc, #28]	; (2042c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   20410:	4c07      	ldr	r4, [pc, #28]	; (20430 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   20412:	4a08      	ldr	r2, [pc, #32]	; (20434 <radio_ar_status_reset+0x28>)
   20414:	2300      	movs	r3, #0
   20416:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2041a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2041e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   20422:	bc10      	pop	{r4}
   20424:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   20428:	4770      	bx	lr
   2042a:	bf00      	nop
   2042c:	4000f000 	.word	0x4000f000
   20430:	40001000 	.word	0x40001000
   20434:	4001f000 	.word	0x4001f000

00020438 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   20438:	4b08      	ldr	r3, [pc, #32]	; (2045c <radio_ar_has_match+0x24>)
   2043a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   2043e:	b160      	cbz	r0, 2045a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   20440:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   20444:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   20448:	b138      	cbz	r0, 2045a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   2044a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   2044e:	b120      	cbz	r0, 2045a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   20450:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   20454:	fab0 f080 	clz	r0, r0
   20458:	0940      	lsrs	r0, r0, #5
}
   2045a:	4770      	bx	lr
   2045c:	40001000 	.word	0x40001000

00020460 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   20460:	2902      	cmp	r1, #2
{
   20462:	b510      	push	{r4, lr}
   20464:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   20466:	d00b      	beq.n	20480 <mayfly_enable_cb+0x20>
   20468:	4a0a      	ldr	r2, [pc, #40]	; (20494 <mayfly_enable_cb+0x34>)
   2046a:	490b      	ldr	r1, [pc, #44]	; (20498 <mayfly_enable_cb+0x38>)
   2046c:	480b      	ldr	r0, [pc, #44]	; (2049c <mayfly_enable_cb+0x3c>)
   2046e:	231e      	movs	r3, #30
   20470:	f007 fd9a 	bl	27fa8 <printk>
   20474:	4040      	eors	r0, r0
   20476:	f380 8811 	msr	BASEPRI, r0
   2047a:	f04f 0003 	mov.w	r0, #3
   2047e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   20480:	200b      	movs	r0, #11
	if (enable) {
   20482:	b11c      	cbz	r4, 2048c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   20484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   20488:	f7e7 b8e6 	b.w	7658 <arch_irq_enable>
}
   2048c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   20490:	f7e7 b8f2 	b.w	7678 <arch_irq_disable>
   20494:	00030fb0 	.word	0x00030fb0
   20498:	00031000 	.word	0x00031000
   2049c:	0002fedc 	.word	0x0002fedc

000204a0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   204a0:	b129      	cbz	r1, 204ae <mayfly_is_enabled+0xe>
   204a2:	3901      	subs	r1, #1
   204a4:	2901      	cmp	r1, #1
   204a6:	d805      	bhi.n	204b4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   204a8:	200b      	movs	r0, #11
   204aa:	f7e7 b8f9 	b.w	76a0 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   204ae:	2018      	movs	r0, #24
   204b0:	f7e7 b8f6 	b.w	76a0 <arch_irq_is_enabled>
{
   204b4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   204b6:	4a07      	ldr	r2, [pc, #28]	; (204d4 <mayfly_is_enabled+0x34>)
   204b8:	4907      	ldr	r1, [pc, #28]	; (204d8 <mayfly_is_enabled+0x38>)
   204ba:	4808      	ldr	r0, [pc, #32]	; (204dc <mayfly_is_enabled+0x3c>)
   204bc:	2336      	movs	r3, #54	; 0x36
   204be:	f007 fd73 	bl	27fa8 <printk>
   204c2:	4040      	eors	r0, r0
   204c4:	f380 8811 	msr	BASEPRI, r0
   204c8:	f04f 0003 	mov.w	r0, #3
   204cc:	df02      	svc	2
		break;
	}

	return 0;
}
   204ce:	2000      	movs	r0, #0
   204d0:	bd08      	pop	{r3, pc}
   204d2:	bf00      	nop
   204d4:	00030fb0 	.word	0x00030fb0
   204d8:	0002ff74 	.word	0x0002ff74
   204dc:	0002fedc 	.word	0x0002fedc

000204e0 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   204e0:	4288      	cmp	r0, r1
   204e2:	d00b      	beq.n	204fc <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   204e4:	2801      	cmp	r0, #1
   204e6:	d003      	beq.n	204f0 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   204e8:	2802      	cmp	r0, #2
   204ea:	d009      	beq.n	20500 <mayfly_prio_is_equal+0x20>
   204ec:	2000      	movs	r0, #0
#endif
	       0;
}
   204ee:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   204f0:	f1a1 0002 	sub.w	r0, r1, #2
   204f4:	fab0 f080 	clz	r0, r0
   204f8:	0940      	lsrs	r0, r0, #5
   204fa:	4770      	bx	lr
   204fc:	2001      	movs	r0, #1
   204fe:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   20500:	f1a1 0001 	sub.w	r0, r1, #1
   20504:	fab0 f080 	clz	r0, r0
   20508:	0940      	lsrs	r0, r0, #5
   2050a:	4770      	bx	lr

0002050c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   2050c:	2901      	cmp	r1, #1
{
   2050e:	b508      	push	{r3, lr}
	switch (callee_id) {
   20510:	d00f      	beq.n	20532 <mayfly_pend+0x26>
   20512:	2902      	cmp	r1, #2
   20514:	d00d      	beq.n	20532 <mayfly_pend+0x26>
   20516:	b191      	cbz	r1, 2053e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   20518:	4a0c      	ldr	r2, [pc, #48]	; (2054c <mayfly_pend+0x40>)
   2051a:	490d      	ldr	r1, [pc, #52]	; (20550 <mayfly_pend+0x44>)
   2051c:	480d      	ldr	r0, [pc, #52]	; (20554 <mayfly_pend+0x48>)
   2051e:	2367      	movs	r3, #103	; 0x67
   20520:	f007 fd42 	bl	27fa8 <printk>
   20524:	4040      	eors	r0, r0
   20526:	f380 8811 	msr	BASEPRI, r0
   2052a:	f04f 0003 	mov.w	r0, #3
   2052e:	df02      	svc	2
		break;
	}
}
   20530:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20532:	4b09      	ldr	r3, [pc, #36]	; (20558 <mayfly_pend+0x4c>)
   20534:	f44f 6200 	mov.w	r2, #2048	; 0x800
   20538:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2053c:	bd08      	pop	{r3, pc}
   2053e:	4b06      	ldr	r3, [pc, #24]	; (20558 <mayfly_pend+0x4c>)
   20540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   20544:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   20548:	bd08      	pop	{r3, pc}
   2054a:	bf00      	nop
   2054c:	00030fb0 	.word	0x00030fb0
   20550:	0002ff74 	.word	0x0002ff74
   20554:	0002fedc 	.word	0x0002fedc
   20558:	e000e100 	.word	0xe000e100

0002055c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2055c:	2803      	cmp	r0, #3
{
   2055e:	b510      	push	{r4, lr}
   20560:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   20562:	d804      	bhi.n	2056e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   20564:	4b11      	ldr	r3, [pc, #68]	; (205ac <hal_ticker_instance0_caller_id_get+0x50>)
   20566:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   20568:	b18c      	cbz	r4, 2058e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   2056a:	4620      	mov	r0, r4
   2056c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2056e:	4a10      	ldr	r2, [pc, #64]	; (205b0 <hal_ticker_instance0_caller_id_get+0x54>)
   20570:	4910      	ldr	r1, [pc, #64]	; (205b4 <hal_ticker_instance0_caller_id_get+0x58>)
   20572:	4811      	ldr	r0, [pc, #68]	; (205b8 <hal_ticker_instance0_caller_id_get+0x5c>)
   20574:	232b      	movs	r3, #43	; 0x2b
   20576:	f007 fd17 	bl	27fa8 <printk>
   2057a:	4040      	eors	r0, r0
   2057c:	f380 8811 	msr	BASEPRI, r0
   20580:	f04f 0003 	mov.w	r0, #3
   20584:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   20586:	4b09      	ldr	r3, [pc, #36]	; (205ac <hal_ticker_instance0_caller_id_get+0x50>)
   20588:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   2058a:	2c00      	cmp	r4, #0
   2058c:	d1ed      	bne.n	2056a <hal_ticker_instance0_caller_id_get+0xe>
   2058e:	4a08      	ldr	r2, [pc, #32]	; (205b0 <hal_ticker_instance0_caller_id_get+0x54>)
   20590:	490a      	ldr	r1, [pc, #40]	; (205bc <hal_ticker_instance0_caller_id_get+0x60>)
   20592:	4809      	ldr	r0, [pc, #36]	; (205b8 <hal_ticker_instance0_caller_id_get+0x5c>)
   20594:	232e      	movs	r3, #46	; 0x2e
   20596:	f007 fd07 	bl	27fa8 <printk>
   2059a:	4040      	eors	r0, r0
   2059c:	f380 8811 	msr	BASEPRI, r0
   205a0:	f04f 0003 	mov.w	r0, #3
   205a4:	df02      	svc	2
}
   205a6:	4620      	mov	r0, r4
   205a8:	bd10      	pop	{r4, pc}
   205aa:	bf00      	nop
   205ac:	000310b8 	.word	0x000310b8
   205b0:	00031024 	.word	0x00031024
   205b4:	00031074 	.word	0x00031074
   205b8:	0002fedc 	.word	0x0002fedc
   205bc:	00031094 	.word	0x00031094

000205c0 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   205c0:	3801      	subs	r0, #1
{
   205c2:	b510      	push	{r4, lr}
   205c4:	461c      	mov	r4, r3
	switch (caller_id) {
   205c6:	2804      	cmp	r0, #4
   205c8:	f200 8082 	bhi.w	206d0 <hal_ticker_instance0_sched+0x110>
   205cc:	e8df f000 	tbb	[pc, r0]
   205d0:	3f302112 	.word	0x3f302112
   205d4:	03          	.byte	0x03
   205d5:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   205d6:	2904      	cmp	r1, #4
   205d8:	d04a      	beq.n	20670 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   205da:	4a44      	ldr	r2, [pc, #272]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   205dc:	4944      	ldr	r1, [pc, #272]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   205de:	4845      	ldr	r0, [pc, #276]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   205e0:	23ba      	movs	r3, #186	; 0xba
   205e2:	f007 fce1 	bl	27fa8 <printk>
   205e6:	4040      	eors	r0, r0
   205e8:	f380 8811 	msr	BASEPRI, r0
   205ec:	f04f 0003 	mov.w	r0, #3
   205f0:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   205f2:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   205f4:	2904      	cmp	r1, #4
   205f6:	d043      	beq.n	20680 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   205f8:	4a3c      	ldr	r2, [pc, #240]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   205fa:	493d      	ldr	r1, [pc, #244]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   205fc:	483d      	ldr	r0, [pc, #244]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   205fe:	234e      	movs	r3, #78	; 0x4e
   20600:	f007 fcd2 	bl	27fa8 <printk>
   20604:	4040      	eors	r0, r0
   20606:	f380 8811 	msr	BASEPRI, r0
   2060a:	f04f 0003 	mov.w	r0, #3
   2060e:	df02      	svc	2
}
   20610:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   20612:	2903      	cmp	r1, #3
   20614:	d03c      	beq.n	20690 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   20616:	4a35      	ldr	r2, [pc, #212]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   20618:	4935      	ldr	r1, [pc, #212]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   2061a:	4836      	ldr	r0, [pc, #216]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   2061c:	2365      	movs	r3, #101	; 0x65
   2061e:	f007 fcc3 	bl	27fa8 <printk>
   20622:	4040      	eors	r0, r0
   20624:	f380 8811 	msr	BASEPRI, r0
   20628:	f04f 0003 	mov.w	r0, #3
   2062c:	df02      	svc	2
}
   2062e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   20630:	2904      	cmp	r1, #4
   20632:	d035      	beq.n	206a0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   20634:	4a2d      	ldr	r2, [pc, #180]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   20636:	492e      	ldr	r1, [pc, #184]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   20638:	482e      	ldr	r0, [pc, #184]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   2063a:	237c      	movs	r3, #124	; 0x7c
   2063c:	f007 fcb4 	bl	27fa8 <printk>
   20640:	4040      	eors	r0, r0
   20642:	f380 8811 	msr	BASEPRI, r0
   20646:	f04f 0003 	mov.w	r0, #3
   2064a:	df02      	svc	2
}
   2064c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2064e:	2903      	cmp	r1, #3
   20650:	d036      	beq.n	206c0 <hal_ticker_instance0_sched+0x100>
   20652:	2904      	cmp	r1, #4
   20654:	d02c      	beq.n	206b0 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   20656:	4a25      	ldr	r2, [pc, #148]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   20658:	4925      	ldr	r1, [pc, #148]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   2065a:	4826      	ldr	r0, [pc, #152]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   2065c:	23a2      	movs	r3, #162	; 0xa2
   2065e:	f007 fca3 	bl	27fa8 <printk>
   20662:	4040      	eors	r0, r0
   20664:	f380 8811 	msr	BASEPRI, r0
   20668:	f04f 0003 	mov.w	r0, #3
   2066c:	df02      	svc	2
}
   2066e:	bd10      	pop	{r4, pc}
			m.param = instance;
   20670:	4b21      	ldr	r3, [pc, #132]	; (206f8 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   20672:	2102      	movs	r1, #2
			m.param = instance;
   20674:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   20676:	2003      	movs	r0, #3
}
   20678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   2067c:	f7f0 bc16 	b.w	10eac <mayfly_enqueue>
			m.param = instance;
   20680:	4b1e      	ldr	r3, [pc, #120]	; (206fc <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   20682:	2102      	movs	r1, #2
			m.param = instance;
   20684:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   20686:	2000      	movs	r0, #0
}
   20688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   2068c:	f7f0 bc0e 	b.w	10eac <mayfly_enqueue>
			m.param = instance;
   20690:	4b1b      	ldr	r3, [pc, #108]	; (20700 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   20692:	2101      	movs	r1, #1
			m.param = instance;
   20694:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   20696:	4608      	mov	r0, r1
}
   20698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   2069c:	f7f0 bc06 	b.w	10eac <mayfly_enqueue>
			m.param = instance;
   206a0:	4b18      	ldr	r3, [pc, #96]	; (20704 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   206a2:	2102      	movs	r1, #2
			m.param = instance;
   206a4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   206a6:	2001      	movs	r0, #1
}
   206a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   206ac:	f7f0 bbfe 	b.w	10eac <mayfly_enqueue>
			m.param = instance;
   206b0:	4b15      	ldr	r3, [pc, #84]	; (20708 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206b2:	2102      	movs	r1, #2
			m.param = instance;
   206b4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206b6:	4608      	mov	r0, r1
}
   206b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206bc:	f7f0 bbf6 	b.w	10eac <mayfly_enqueue>
			m.param = instance;
   206c0:	4b12      	ldr	r3, [pc, #72]	; (2070c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206c2:	2101      	movs	r1, #1
			m.param = instance;
   206c4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206c6:	2002      	movs	r0, #2
}
   206c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   206cc:	f7f0 bbee 	b.w	10eac <mayfly_enqueue>
		LL_ASSERT(0);
   206d0:	4a06      	ldr	r2, [pc, #24]	; (206ec <hal_ticker_instance0_sched+0x12c>)
   206d2:	4907      	ldr	r1, [pc, #28]	; (206f0 <hal_ticker_instance0_sched+0x130>)
   206d4:	4807      	ldr	r0, [pc, #28]	; (206f4 <hal_ticker_instance0_sched+0x134>)
   206d6:	23c0      	movs	r3, #192	; 0xc0
   206d8:	f007 fc66 	bl	27fa8 <printk>
   206dc:	4040      	eors	r0, r0
   206de:	f380 8811 	msr	BASEPRI, r0
   206e2:	f04f 0003 	mov.w	r0, #3
   206e6:	df02      	svc	2
}
   206e8:	bd10      	pop	{r4, pc}
   206ea:	bf00      	nop
   206ec:	00031024 	.word	0x00031024
   206f0:	0002ff74 	.word	0x0002ff74
   206f4:	0002fedc 	.word	0x0002fedc
   206f8:	200006b0 	.word	0x200006b0
   206fc:	200006a0 	.word	0x200006a0
   20700:	20000690 	.word	0x20000690
   20704:	200006e0 	.word	0x200006e0
   20708:	200006c0 	.word	0x200006c0
   2070c:	200006d0 	.word	0x200006d0

00020710 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   20710:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   20712:	2000      	movs	r0, #0
   20714:	f7ff b9aa 	b.w	1fa6c <cntr_cmp_set>

00020718 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   20718:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2071c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   20720:	3201      	adds	r2, #1
   20722:	d008      	beq.n	20736 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   20724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20728:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2072c:	f013 0301 	ands.w	r3, r3, #1
   20730:	d10f      	bne.n	20752 <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   20732:	2000      	movs	r0, #0
   20734:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   20736:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2073a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2073e:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   20740:	4293      	cmp	r3, r2
   20742:	d0f6      	beq.n	20732 <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   20744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20748:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2074c:	f013 0301 	ands.w	r3, r3, #1
   20750:	d0ef      	beq.n	20732 <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   20752:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   20756:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   20758:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   2075a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   2075e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20762:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   20764:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   20766:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   2076a:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   2076e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   20770:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   20774:	f063 033f 	orn	r3, r3, #63	; 0x3f
   20778:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   2077a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2077e:	3301      	adds	r3, #1
   20780:	d03b      	beq.n	207fa <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   20782:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   20786:	3301      	adds	r3, #1
   20788:	d037      	beq.n	207fa <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   2078a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   2078e:	3301      	adds	r3, #1
   20790:	d033      	beq.n	207fa <hci_vendor_read_static_addr+0xe2>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   20792:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   20796:	3301      	adds	r3, #1
   20798:	d02f      	beq.n	207fa <hci_vendor_read_static_addr+0xe2>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   2079a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   2079e:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   207a0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   207a2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   207a6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   207aa:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   207ac:	f880 c009 	strb.w	ip, [r0, #9]
   207b0:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   207b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   207b6:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   207b8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   207ba:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   207be:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   207c2:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   207c4:	f880 c00d 	strb.w	ip, [r0, #13]
   207c8:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   207ca:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   207ce:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   207d0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   207d2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   207d6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   207da:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   207dc:	73c3      	strb	r3, [r0, #15]
   207de:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   207e2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   207e6:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   207e8:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   207ea:	0a11      	lsrs	r1, r2, #8
   207ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
   207f0:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   207f2:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   207f4:	7541      	strb	r1, [r0, #21]
		return 1;
   207f6:	2001      	movs	r0, #1
}
   207f8:	4770      	bx	lr
__ssp_bos_icheck3(memset, void *, int)
   207fa:	2300      	movs	r3, #0
   207fc:	f8c0 3006 	str.w	r3, [r0, #6]
   20800:	f8c0 300a 	str.w	r3, [r0, #10]
   20804:	f8c0 300e 	str.w	r3, [r0, #14]
   20808:	f8c0 3012 	str.w	r3, [r0, #18]
   2080c:	2001      	movs	r0, #1
   2080e:	4770      	bx	lr

00020810 <hci_vendor_read_key_hierarchy_roots>:
   20810:	2300      	movs	r3, #0
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   20812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   20816:	6003      	str	r3, [r0, #0]
   20818:	6043      	str	r3, [r0, #4]
   2081a:	6083      	str	r3, [r0, #8]
   2081c:	60c3      	str	r3, [r0, #12]
   2081e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   20822:	3301      	adds	r3, #1
   20824:	d03a      	beq.n	2089c <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   20826:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2082a:	3301      	adds	r3, #1
   2082c:	d036      	beq.n	2089c <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2082e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   20832:	3301      	adds	r3, #1
   20834:	d032      	beq.n	2089c <hci_vendor_read_key_hierarchy_roots+0x8c>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   20836:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2083a:	3301      	adds	r3, #1
   2083c:	d02e      	beq.n	2089c <hci_vendor_read_key_hierarchy_roots+0x8c>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   2083e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
   20842:	700b      	strb	r3, [r1, #0]
	sys_put_le16(val >> 16, &dst[2]);
   20844:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   20846:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   2084a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   2084e:	7088      	strb	r0, [r1, #2]
	dst[1] = val >> 8;
   20850:	f881 c003 	strb.w	ip, [r1, #3]
   20854:	704b      	strb	r3, [r1, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   20856:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
   2085a:	710b      	strb	r3, [r1, #4]
	sys_put_le16(val >> 16, &dst[2]);
   2085c:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   2085e:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   20862:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   20866:	7188      	strb	r0, [r1, #6]
	dst[1] = val >> 8;
   20868:	f881 c007 	strb.w	ip, [r1, #7]
   2086c:	714b      	strb	r3, [r1, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   2086e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
   20872:	720b      	strb	r3, [r1, #8]
	sys_put_le16(val >> 16, &dst[2]);
   20874:	0c18      	lsrs	r0, r3, #16
	dst[1] = val >> 8;
   20876:	ea4f 2c10 	mov.w	ip, r0, lsr #8
   2087a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   2087e:	7288      	strb	r0, [r1, #10]
	dst[1] = val >> 8;
   20880:	724b      	strb	r3, [r1, #9]
   20882:	f881 c00b 	strb.w	ip, [r1, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   20886:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
   2088a:	730b      	strb	r3, [r1, #12]
	sys_put_le16(val >> 16, &dst[2]);
   2088c:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   2088e:	0a10      	lsrs	r0, r2, #8
   20890:	f3c3 2307 	ubfx	r3, r3, #8, #8
   20894:	734b      	strb	r3, [r1, #13]
	dst[0] = val;
   20896:	738a      	strb	r2, [r1, #14]
	dst[1] = val >> 8;
   20898:	73c8      	strb	r0, [r1, #15]
}
   2089a:	4770      	bx	lr
   2089c:	2300      	movs	r3, #0
   2089e:	600b      	str	r3, [r1, #0]
   208a0:	604b      	str	r3, [r1, #4]
   208a2:	608b      	str	r3, [r1, #8]
   208a4:	60cb      	str	r3, [r1, #12]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   208a6:	4770      	bx	lr

000208a8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   208a8:	4b02      	ldr	r3, [pc, #8]	; (208b4 <net_buf_pool_get+0xc>)
   208aa:	222c      	movs	r2, #44	; 0x2c
   208ac:	fb02 3000 	mla	r0, r2, r0, r3
   208b0:	4770      	bx	lr
   208b2:	bf00      	nop
   208b4:	20000de4 	.word	0x20000de4

000208b8 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   208b8:	7982      	ldrb	r2, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   208ba:	4b06      	ldr	r3, [pc, #24]	; (208d4 <net_buf_id+0x1c>)
   208bc:	212c      	movs	r1, #44	; 0x2c
   208be:	fb01 3302 	mla	r3, r1, r2, r3
   208c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   208c4:	7f1b      	ldrb	r3, [r3, #28]
   208c6:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   208c8:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   208ca:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   208ce:	fbb0 f0f3 	udiv	r0, r0, r3
   208d2:	4770      	bx	lr
   208d4:	20000de4 	.word	0x20000de4

000208d8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   208d8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208da:	4b0a      	ldr	r3, [pc, #40]	; (20904 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   208dc:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208de:	242c      	movs	r4, #44	; 0x2c
   208e0:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   208e4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   208e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   208e8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   208ea:	6823      	ldr	r3, [r4, #0]
   208ec:	429a      	cmp	r2, r3
   208ee:	bf94      	ite	ls
   208f0:	600a      	strls	r2, [r1, #0]
   208f2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   208f4:	f7ff ffe0 	bl	208b8 <net_buf_id>
   208f8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   208fc:	fb02 3000 	mla	r0, r2, r0, r3
   20900:	bd10      	pop	{r4, pc}
   20902:	bf00      	nop
   20904:	20000de4 	.word	0x20000de4

00020908 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   20908:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2090c:	4605      	mov	r5, r0
   2090e:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20910:	4610      	mov	r0, r2
   20912:	4619      	mov	r1, r3
{
   20914:	4691      	mov	r9, r2
   20916:	4698      	mov	r8, r3
   20918:	4617      	mov	r7, r2
   2091a:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   2091c:	f00d fc6c 	bl	2e1f8 <sys_clock_timeout_end_calc>
   20920:	4682      	mov	sl, r0
   20922:	468b      	mov	fp, r1
	__asm__ volatile(
   20924:	f04f 0320 	mov.w	r3, #32
   20928:	f3ef 8111 	mrs	r1, BASEPRI
   2092c:	f383 8812 	msr	BASEPRI_MAX, r3
   20930:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&pool->lock);

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20934:	8b6b      	ldrh	r3, [r5, #26]
   20936:	2b00      	cmp	r3, #0
   20938:	d05a      	beq.n	209f0 <net_buf_alloc_len+0xe8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   2093a:	8b2a      	ldrh	r2, [r5, #24]
   2093c:	429a      	cmp	r2, r3
   2093e:	d93e      	bls.n	209be <net_buf_alloc_len+0xb6>
   20940:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   20942:	2200      	movs	r2, #0
   20944:	2300      	movs	r3, #0
   20946:	4628      	mov	r0, r5
   20948:	f004 f986 	bl	24c58 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   2094c:	9900      	ldr	r1, [sp, #0]
   2094e:	4604      	mov	r4, r0
   20950:	2800      	cmp	r0, #0
   20952:	d034      	beq.n	209be <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   20954:	f381 8811 	msr	BASEPRI, r1
   20958:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   2095c:	9b01      	ldr	r3, [sp, #4]
   2095e:	2b00      	cmp	r3, #0
   20960:	d056      	beq.n	20a10 <net_buf_alloc_len+0x108>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20962:	ea58 0309 	orrs.w	r3, r8, r9
   20966:	d00f      	beq.n	20988 <net_buf_alloc_len+0x80>
   20968:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2096c:	bf08      	it	eq
   2096e:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   20972:	d009      	beq.n	20988 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   20974:	f005 f856 	bl	25a24 <sys_clock_tick_get>
   20978:	ebba 0700 	subs.w	r7, sl, r0
   2097c:	eb6b 0601 	sbc.w	r6, fp, r1
   20980:	2e00      	cmp	r6, #0
   20982:	bfbc      	itt	lt
   20984:	2700      	movlt	r7, #0
   20986:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20988:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   2098a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 20a28 <net_buf_alloc_len+0x120>
   2098e:	f04f 092c 	mov.w	r9, #44	; 0x2c
   20992:	fb09 8303 	mla	r3, r9, r3, r8
   20996:	463a      	mov	r2, r7
   20998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2099a:	681b      	ldr	r3, [r3, #0]
   2099c:	a901      	add	r1, sp, #4
   2099e:	681d      	ldr	r5, [r3, #0]
   209a0:	4620      	mov	r0, r4
   209a2:	4633      	mov	r3, r6
   209a4:	47a8      	blx	r5
   209a6:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   209a8:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   209aa:	2800      	cmp	r0, #0
   209ac:	d131      	bne.n	20a12 <net_buf_alloc_len+0x10a>
	k_lifo_put(&pool->free, buf);
   209ae:	79a0      	ldrb	r0, [r4, #6]
   209b0:	4621      	mov	r1, r4
   209b2:	fb00 8009 	mla	r0, r0, r9, r8
   209b6:	f00d f98c 	bl	2dcd2 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   209ba:	462c      	mov	r4, r5
}
   209bc:	e024      	b.n	20a08 <net_buf_alloc_len+0x100>
		uninit_count = pool->uninit_count--;
   209be:	8b68      	ldrh	r0, [r5, #26]
   209c0:	1e43      	subs	r3, r0, #1
   209c2:	836b      	strh	r3, [r5, #26]
   209c4:	f381 8811 	msr	BASEPRI, r1
   209c8:	f3bf 8f6f 	isb	sy
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   209cc:	7f2a      	ldrb	r2, [r5, #28]
   209ce:	f102 0417 	add.w	r4, r2, #23
   209d2:	f024 0303 	bic.w	r3, r4, #3
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   209d6:	8b2c      	ldrh	r4, [r5, #24]
   209d8:	1a20      	subs	r0, r4, r0
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   209da:	6aac      	ldr	r4, [r5, #40]	; 0x28
   209dc:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   209e0:	4811      	ldr	r0, [pc, #68]	; (20a28 <net_buf_alloc_len+0x120>)
   209e2:	4b12      	ldr	r3, [pc, #72]	; (20a2c <net_buf_alloc_len+0x124>)
	buf->user_data_size = pool->user_data_size;
   209e4:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   209e6:	1a2d      	subs	r5, r5, r0
   209e8:	10ad      	asrs	r5, r5, #2
   209ea:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   209ec:	71a5      	strb	r5, [r4, #6]
		goto success;
   209ee:	e7b5      	b.n	2095c <net_buf_alloc_len+0x54>
   209f0:	f381 8811 	msr	BASEPRI, r1
   209f4:	f3bf 8f6f 	isb	sy
   209f8:	464a      	mov	r2, r9
   209fa:	4643      	mov	r3, r8
   209fc:	4628      	mov	r0, r5
   209fe:	f004 f92b 	bl	24c58 <z_impl_k_queue_get>
	if (!buf) {
   20a02:	4604      	mov	r4, r0
   20a04:	2800      	cmp	r0, #0
   20a06:	d1a9      	bne.n	2095c <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20a08:	4620      	mov	r0, r4
   20a0a:	b003      	add	sp, #12
   20a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   20a10:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   20a12:	2300      	movs	r3, #0
	buf->ref   = 1U;
   20a14:	2201      	movs	r2, #1
	buf->frags = NULL;
   20a16:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   20a18:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   20a1a:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   20a1c:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   20a1e:	6923      	ldr	r3, [r4, #16]
   20a20:	81e2      	strh	r2, [r4, #14]
   20a22:	60a3      	str	r3, [r4, #8]
	return buf;
   20a24:	e7f0      	b.n	20a08 <net_buf_alloc_len+0x100>
   20a26:	bf00      	nop
   20a28:	20000de4 	.word	0x20000de4
   20a2c:	ba2e8ba3 	.word	0xba2e8ba3

00020a30 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   20a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20a34:	4d16      	ldr	r5, [pc, #88]	; (20a90 <net_buf_unref+0x60>)
   20a36:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20a38:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   20a3a:	272c      	movs	r7, #44	; 0x2c
	while (buf) {
   20a3c:	b90c      	cbnz	r4, 20a42 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   20a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   20a42:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   20a44:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   20a48:	3b01      	subs	r3, #1
   20a4a:	b2db      	uxtb	r3, r3
   20a4c:	7123      	strb	r3, [r4, #4]
   20a4e:	2b00      	cmp	r3, #0
   20a50:	d1f5      	bne.n	20a3e <net_buf_unref+0xe>
		if (buf->__buf) {
   20a52:	6921      	ldr	r1, [r4, #16]
   20a54:	b159      	cbz	r1, 20a6e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   20a56:	7963      	ldrb	r3, [r4, #5]
   20a58:	079b      	lsls	r3, r3, #30
   20a5a:	d407      	bmi.n	20a6c <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20a5c:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   20a5e:	fb07 5303 	mla	r3, r7, r3, r5
   20a62:	4620      	mov	r0, r4
   20a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   20a66:	681b      	ldr	r3, [r3, #0]
   20a68:	689b      	ldr	r3, [r3, #8]
   20a6a:	4798      	blx	r3
			buf->__buf = NULL;
   20a6c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   20a6e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   20a70:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   20a72:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   20a76:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   20a78:	6a1b      	ldr	r3, [r3, #32]
   20a7a:	b11b      	cbz	r3, 20a84 <net_buf_unref+0x54>
			pool->destroy(buf);
   20a7c:	4620      	mov	r0, r4
   20a7e:	4798      	blx	r3
{
   20a80:	4644      	mov	r4, r8
   20a82:	e7db      	b.n	20a3c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   20a84:	4621      	mov	r1, r4
   20a86:	fb00 5007 	mla	r0, r0, r7, r5
   20a8a:	f00d f922 	bl	2dcd2 <k_queue_prepend>
}
   20a8e:	e7f7      	b.n	20a80 <net_buf_unref+0x50>
   20a90:	20000de4 	.word	0x20000de4

00020a94 <net_buf_append_bytes>:
 * the buffer. It assumes that the buffer has at least one fragment.
 */
size_t net_buf_append_bytes(struct net_buf *buf, size_t len,
			    const void *value, k_timeout_t timeout,
			    net_buf_allocator_cb allocate_cb, void *user_data)
{
   20a94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20a98:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   20a9c:	4606      	mov	r6, r0
   20a9e:	460d      	mov	r5, r1
   20aa0:	4617      	mov	r7, r2
	while (buf->frags) {
   20aa2:	4604      	mov	r4, r0
   20aa4:	4621      	mov	r1, r4
   20aa6:	6824      	ldr	r4, [r4, #0]
   20aa8:	2c00      	cmp	r4, #0
   20aaa:	d1fb      	bne.n	20aa4 <net_buf_append_bytes+0x10>
	return &_net_buf_pool_list[id];
   20aac:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
	return net_buf_simple_tailroom(&buf->b);
   20ab0:	f101 0b08 	add.w	fp, r1, #8
   20ab4:	4658      	mov	r0, fp
   20ab6:	f00c f855 	bl	2cb64 <net_buf_simple_tailroom>
	struct net_buf *frag = net_buf_frag_last(buf);
	size_t added_len = 0;
	const uint8_t *value8 = value;

	do {
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   20aba:	4285      	cmp	r5, r0
   20abc:	bf2c      	ite	cs
   20abe:	b282      	uxthcs	r2, r0
   20ac0:	b2aa      	uxthcc	r2, r5
	return net_buf_simple_add_mem(&buf->b, mem, len);
   20ac2:	4639      	mov	r1, r7
   20ac4:	4658      	mov	r0, fp
   20ac6:	9201      	str	r2, [sp, #4]
   20ac8:	f00c f805 	bl	2cad6 <net_buf_simple_add_mem>

		net_buf_add_mem(frag, value8, count);
		len -= count;
		added_len += count;
   20acc:	9a01      	ldr	r2, [sp, #4]
		value8 += count;

		if (len == 0) {
   20ace:	1aad      	subs	r5, r5, r2
		added_len += count;
   20ad0:	4414      	add	r4, r2
		value8 += count;
   20ad2:	4417      	add	r7, r2
		if (len == 0) {
   20ad4:	d016      	beq.n	20b04 <net_buf_append_bytes+0x70>
			return added_len;
		}

		if (allocate_cb) {
   20ad6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   20ad8:	b14b      	cbz	r3, 20aee <net_buf_append_bytes+0x5a>
			frag = allocate_cb(timeout, user_data);
   20ada:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   20adc:	4640      	mov	r0, r8
   20ade:	4649      	mov	r1, r9
   20ae0:	4798      	blx	r3

			/* Allocate from the original pool if no callback has
			 * been provided.
			 */
			pool = net_buf_pool_get(buf->pool_id);
			frag = net_buf_alloc_len(pool, len, timeout);
   20ae2:	4601      	mov	r1, r0
		}

		if (!frag) {
   20ae4:	b170      	cbz	r0, 20b04 <net_buf_append_bytes+0x70>
			return added_len;
		}

		net_buf_frag_add(buf, frag);
   20ae6:	4630      	mov	r0, r6
   20ae8:	f00b ffd2 	bl	2ca90 <net_buf_frag_add>
	do {
   20aec:	e7e0      	b.n	20ab0 <net_buf_append_bytes+0x1c>
	return &_net_buf_pool_list[id];
   20aee:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   20af0:	f8df c018 	ldr.w	ip, [pc, #24]	; 20b0c <net_buf_append_bytes+0x78>
   20af4:	4642      	mov	r2, r8
   20af6:	464b      	mov	r3, r9
   20af8:	4629      	mov	r1, r5
   20afa:	fb00 c00a 	mla	r0, r0, sl, ip
   20afe:	f7ff ff03 	bl	20908 <net_buf_alloc_len>
   20b02:	e7ee      	b.n	20ae2 <net_buf_append_bytes+0x4e>
	} while (1);

	/* Unreachable */
	return 0;
}
   20b04:	4620      	mov	r0, r4
   20b06:	b003      	add	sp, #12
   20b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20b0c:	20000de4 	.word	0x20000de4

00020b10 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   20b10:	4b08      	ldr	r3, [pc, #32]	; (20b34 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20b12:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b14:	1ac3      	subs	r3, r0, r3
{
   20b16:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b18:	4907      	ldr	r1, [pc, #28]	; (20b38 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b1a:	109b      	asrs	r3, r3, #2
{
   20b1c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b1e:	4359      	muls	r1, r3
   20b20:	4806      	ldr	r0, [pc, #24]	; (20b3c <onoff_stop+0x2c>)
   20b22:	2240      	movs	r2, #64	; 0x40
   20b24:	f00c f842 	bl	2cbac <stop>
	notify(mgr, res);
   20b28:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   20b2a:	4601      	mov	r1, r0
	notify(mgr, res);
   20b2c:	4620      	mov	r0, r4
}
   20b2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20b32:	4718      	bx	r3
   20b34:	200036d0 	.word	0x200036d0
   20b38:	b6db6db7 	.word	0xb6db6db7
   20b3c:	0002f080 	.word	0x0002f080

00020b40 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   20b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20b42:	4c0c      	ldr	r4, [pc, #48]	; (20b74 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b44:	4a0c      	ldr	r2, [pc, #48]	; (20b78 <onoff_start+0x38>)
   20b46:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   20b48:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b4a:	9300      	str	r3, [sp, #0]
{
   20b4c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b4e:	460b      	mov	r3, r1
   20b50:	490a      	ldr	r1, [pc, #40]	; (20b7c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   20b52:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b54:	4361      	muls	r1, r4
{
   20b56:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   20b58:	4809      	ldr	r0, [pc, #36]	; (20b80 <onoff_start+0x40>)
   20b5a:	f00c f854 	bl	2cc06 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   20b5e:	1e01      	subs	r1, r0, #0
   20b60:	da05      	bge.n	20b6e <onoff_start+0x2e>
		notify(mgr, err);
   20b62:	4630      	mov	r0, r6
   20b64:	462b      	mov	r3, r5
	}
}
   20b66:	b002      	add	sp, #8
   20b68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   20b6c:	4718      	bx	r3
}
   20b6e:	b002      	add	sp, #8
   20b70:	bd70      	pop	{r4, r5, r6, pc}
   20b72:	bf00      	nop
   20b74:	200036d0 	.word	0x200036d0
   20b78:	0002cc75 	.word	0x0002cc75
   20b7c:	b6db6db7 	.word	0xb6db6db7
   20b80:	0002f080 	.word	0x0002f080

00020b84 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b84:	2200      	movs	r2, #0
{
   20b86:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b88:	2101      	movs	r1, #1
{
   20b8a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20b8c:	4610      	mov	r0, r2
   20b8e:	f7e6 fd95 	bl	76bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   20b92:	2000      	movs	r0, #0
   20b94:	f7e6 fd60 	bl	7658 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   20b98:	480f      	ldr	r0, [pc, #60]	; (20bd8 <clk_init+0x54>)
   20b9a:	f002 fb57 	bl	2324c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   20b9e:	4b0f      	ldr	r3, [pc, #60]	; (20bdc <clk_init+0x58>)
   20ba0:	4298      	cmp	r0, r3
   20ba2:	d115      	bne.n	20bd0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   20ba4:	f00c fe42 	bl	2d82c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   20ba8:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   20baa:	490d      	ldr	r1, [pc, #52]	; (20be0 <clk_init+0x5c>)
   20bac:	4630      	mov	r0, r6
   20bae:	f007 fa64 	bl	2807a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   20bb2:	2800      	cmp	r0, #0
   20bb4:	db0b      	blt.n	20bce <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   20bb6:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20bb8:	4909      	ldr	r1, [pc, #36]	; (20be0 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bba:	2501      	movs	r5, #1
   20bbc:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   20bbe:	f104 001c 	add.w	r0, r4, #28
   20bc2:	f007 fa5a 	bl	2807a <onoff_manager_init>
		if (err < 0) {
   20bc6:	2800      	cmp	r0, #0
   20bc8:	db01      	blt.n	20bce <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   20bca:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   20bcc:	2000      	movs	r0, #0
}
   20bce:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   20bd0:	f06f 0004 	mvn.w	r0, #4
   20bd4:	e7fb      	b.n	20bce <clk_init+0x4a>
   20bd6:	bf00      	nop
   20bd8:	00020c19 	.word	0x00020c19
   20bdc:	0bad0000 	.word	0x0bad0000
   20be0:	000310f8 	.word	0x000310f8

00020be4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   20be4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   20be6:	230c      	movs	r3, #12
   20be8:	4809      	ldr	r0, [pc, #36]	; (20c10 <clkstarted_handle.constprop.0+0x2c>)
   20bea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   20bec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   20bee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   20bf0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   20bf4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   20bf6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   20bf8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   20bfa:	4418      	add	r0, r3
   20bfc:	f00b ffc3 	bl	2cb86 <set_on_state>
	if (callback) {
   20c00:	b12d      	cbz	r5, 20c0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   20c02:	4632      	mov	r2, r6
   20c04:	462b      	mov	r3, r5
   20c06:	4803      	ldr	r0, [pc, #12]	; (20c14 <clkstarted_handle.constprop.0+0x30>)
}
   20c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20c0c:	4718      	bx	r3
}
   20c0e:	bd70      	pop	{r4, r5, r6, pc}
   20c10:	200036d0 	.word	0x200036d0
   20c14:	0002f080 	.word	0x0002f080

00020c18 <clock_event_handler>:
	switch (event) {
   20c18:	b110      	cbz	r0, 20c20 <clock_event_handler+0x8>
   20c1a:	2801      	cmp	r0, #1
   20c1c:	d004      	beq.n	20c28 <clock_event_handler+0x10>
   20c1e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   20c20:	4b03      	ldr	r3, [pc, #12]	; (20c30 <clock_event_handler+0x18>)
   20c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   20c24:	075b      	lsls	r3, r3, #29
   20c26:	d101      	bne.n	20c2c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20c28:	f7ff bfdc 	b.w	20be4 <clkstarted_handle.constprop.0>
}
   20c2c:	4770      	bx	lr
   20c2e:	bf00      	nop
   20c30:	200036d0 	.word	0x200036d0

00020c34 <generic_hfclk_start>:
{
   20c34:	b508      	push	{r3, lr}
	__asm__ volatile(
   20c36:	f04f 0320 	mov.w	r3, #32
   20c3a:	f3ef 8111 	mrs	r1, BASEPRI
   20c3e:	f383 8812 	msr	BASEPRI_MAX, r3
   20c42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   20c46:	4a12      	ldr	r2, [pc, #72]	; (20c90 <generic_hfclk_start+0x5c>)
   20c48:	6813      	ldr	r3, [r2, #0]
   20c4a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   20c4e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   20c52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   20c54:	d00c      	beq.n	20c70 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   20c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20c5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   20c5e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   20c62:	f013 0301 	ands.w	r3, r3, #1
   20c66:	d003      	beq.n	20c70 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   20c68:	480a      	ldr	r0, [pc, #40]	; (20c94 <generic_hfclk_start+0x60>)
   20c6a:	f00b ff8c 	bl	2cb86 <set_on_state>
			already_started = true;
   20c6e:	2301      	movs	r3, #1
	__asm__ volatile(
   20c70:	f381 8811 	msr	BASEPRI, r1
   20c74:	f3bf 8f6f 	isb	sy
	if (already_started) {
   20c78:	b123      	cbz	r3, 20c84 <generic_hfclk_start+0x50>
}
   20c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   20c7e:	2000      	movs	r0, #0
   20c80:	f7ff bfb0 	b.w	20be4 <clkstarted_handle.constprop.0>
}
   20c84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20c88:	2001      	movs	r0, #1
   20c8a:	f002 baef 	b.w	2326c <nrfx_clock_start>
   20c8e:	bf00      	nop
   20c90:	20003720 	.word	0x20003720
   20c94:	20003710 	.word	0x20003710

00020c98 <api_blocking_start>:
{
   20c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20c9a:	2200      	movs	r2, #0
   20c9c:	2301      	movs	r3, #1
   20c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   20ca2:	ab04      	add	r3, sp, #16
   20ca4:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20ca8:	4a09      	ldr	r2, [pc, #36]	; (20cd0 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20caa:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20cae:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20cb0:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20cb4:	f00b ffd7 	bl	2cc66 <api_start>
	if (err < 0) {
   20cb8:	2800      	cmp	r0, #0
   20cba:	db05      	blt.n	20cc8 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20cbc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   20cc0:	2300      	movs	r3, #0
   20cc2:	4668      	mov	r0, sp
   20cc4:	f004 f822 	bl	24d0c <z_impl_k_sem_take>
}
   20cc8:	b007      	add	sp, #28
   20cca:	f85d fb04 	ldr.w	pc, [sp], #4
   20cce:	bf00      	nop
   20cd0:	0002cc8d 	.word	0x0002cc8d

00020cd4 <lfclk_start>:
{
   20cd4:	b510      	push	{r4, lr}
	if (!once) {
   20cd6:	4c07      	ldr	r4, [pc, #28]	; (20cf4 <lfclk_start+0x20>)
   20cd8:	7823      	ldrb	r3, [r4, #0]
   20cda:	b92b      	cbnz	r3, 20ce8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
   20cdc:	f44f 70a5 	mov.w	r0, #330	; 0x14a
   20ce0:	f00d fa86 	bl	2e1f0 <z_impl_k_busy_wait>
		once = true;
   20ce4:	2301      	movs	r3, #1
   20ce6:	7023      	strb	r3, [r4, #0]
}
   20ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   20cec:	2000      	movs	r0, #0
   20cee:	f002 babd 	b.w	2326c <nrfx_clock_start>
   20cf2:	bf00      	nop
   20cf4:	20003b06 	.word	0x20003b06

00020cf8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20cf8:	4b09      	ldr	r3, [pc, #36]	; (20d20 <generic_hfclk_stop+0x28>)
   20cfa:	f3bf 8f5b 	dmb	ish
   20cfe:	e853 2f00 	ldrex	r2, [r3]
   20d02:	f022 0102 	bic.w	r1, r2, #2
   20d06:	e843 1000 	strex	r0, r1, [r3]
   20d0a:	2800      	cmp	r0, #0
   20d0c:	d1f7      	bne.n	20cfe <generic_hfclk_stop+0x6>
   20d0e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   20d12:	07d3      	lsls	r3, r2, #31
   20d14:	d402      	bmi.n	20d1c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20d16:	2001      	movs	r0, #1
   20d18:	f002 baf0 	b.w	232fc <nrfx_clock_stop>
}
   20d1c:	4770      	bx	lr
   20d1e:	bf00      	nop
   20d20:	20003720 	.word	0x20003720

00020d24 <z_nrf_clock_control_get_onoff>:
}
   20d24:	4a02      	ldr	r2, [pc, #8]	; (20d30 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   20d26:	b2c3      	uxtb	r3, r0
}
   20d28:	201c      	movs	r0, #28
   20d2a:	fb03 2000 	mla	r0, r3, r0, r2
   20d2e:	4770      	bx	lr
   20d30:	200036d0 	.word	0x200036d0

00020d34 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20d34:	4b09      	ldr	r3, [pc, #36]	; (20d5c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   20d36:	f3bf 8f5b 	dmb	ish
   20d3a:	e853 2f00 	ldrex	r2, [r3]
   20d3e:	f042 0101 	orr.w	r1, r2, #1
   20d42:	e843 1000 	strex	r0, r1, [r3]
   20d46:	2800      	cmp	r0, #0
   20d48:	d1f7      	bne.n	20d3a <z_nrf_clock_bt_ctlr_hf_request+0x6>
   20d4a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   20d4e:	0793      	lsls	r3, r2, #30
   20d50:	d402      	bmi.n	20d58 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   20d52:	2001      	movs	r0, #1
   20d54:	f002 ba8a 	b.w	2326c <nrfx_clock_start>
}
   20d58:	4770      	bx	lr
   20d5a:	bf00      	nop
   20d5c:	20003720 	.word	0x20003720

00020d60 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20d60:	4b09      	ldr	r3, [pc, #36]	; (20d88 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   20d62:	f3bf 8f5b 	dmb	ish
   20d66:	e853 2f00 	ldrex	r2, [r3]
   20d6a:	f022 0101 	bic.w	r1, r2, #1
   20d6e:	e843 1000 	strex	r0, r1, [r3]
   20d72:	2800      	cmp	r0, #0
   20d74:	d1f7      	bne.n	20d66 <z_nrf_clock_bt_ctlr_hf_release+0x6>
   20d76:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   20d7a:	0793      	lsls	r3, r2, #30
   20d7c:	d402      	bmi.n	20d84 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20d7e:	2001      	movs	r0, #1
   20d80:	f002 babc 	b.w	232fc <nrfx_clock_stop>
}
   20d84:	4770      	bx	lr
   20d86:	bf00      	nop
   20d88:	20003720 	.word	0x20003720

00020d8c <z_nrf_clock_control_lf_on>:
{
   20d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20d90:	4939      	ldr	r1, [pc, #228]	; (20e78 <z_nrf_clock_control_lf_on+0xec>)
   20d92:	f3bf 8f5b 	dmb	ish
   20d96:	4607      	mov	r7, r0
   20d98:	2201      	movs	r2, #1
   20d9a:	e851 3f00 	ldrex	r3, [r1]
   20d9e:	e841 2000 	strex	r0, r2, [r1]
   20da2:	2800      	cmp	r0, #0
   20da4:	d1f9      	bne.n	20d9a <z_nrf_clock_control_lf_on+0xe>
   20da6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   20daa:	b933      	cbnz	r3, 20dba <z_nrf_clock_control_lf_on+0x2e>
   20dac:	4933      	ldr	r1, [pc, #204]	; (20e7c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   20dae:	4834      	ldr	r0, [pc, #208]	; (20e80 <z_nrf_clock_control_lf_on+0xf4>)
   20db0:	604b      	str	r3, [r1, #4]
   20db2:	60cb      	str	r3, [r1, #12]
   20db4:	608a      	str	r2, [r1, #8]
   20db6:	f007 f973 	bl	280a0 <onoff_request>
	switch (start_mode) {
   20dba:	1e7b      	subs	r3, r7, #1
   20dbc:	2b01      	cmp	r3, #1
   20dbe:	d82f      	bhi.n	20e20 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   20dc0:	2f01      	cmp	r7, #1
   20dc2:	d107      	bne.n	20dd4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   20dc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20dc8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   20dcc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20dd0:	2b01      	cmp	r3, #1
   20dd2:	d025      	beq.n	20e20 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20dd4:	f00c feb3 	bl	2db3e <k_is_in_isr>
   20dd8:	4604      	mov	r4, r0
   20dda:	b918      	cbnz	r0, 20de4 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   20ddc:	4b29      	ldr	r3, [pc, #164]	; (20e84 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   20dde:	781b      	ldrb	r3, [r3, #0]
   20de0:	2b00      	cmp	r3, #0
   20de2:	d141      	bne.n	20e68 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   20de4:	f04f 0320 	mov.w	r3, #32
   20de8:	f3ef 8611 	mrs	r6, BASEPRI
   20dec:	f383 8812 	msr	BASEPRI_MAX, r3
   20df0:	f3bf 8f6f 	isb	sy
   20df4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   20df6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 20e88 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20dfa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   20dfe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   20e02:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   20e06:	03d2      	lsls	r2, r2, #15
   20e08:	d50c      	bpl.n	20e24 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20e0a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20e0e:	2b01      	cmp	r3, #1
   20e10:	d001      	beq.n	20e16 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   20e12:	2f01      	cmp	r7, #1
   20e14:	d106      	bne.n	20e24 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   20e16:	b30c      	cbz	r4, 20e5c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   20e18:	f386 8811 	msr	BASEPRI, r6
   20e1c:	f3bf 8f6f 	isb	sy
}
   20e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   20e24:	b1ac      	cbz	r4, 20e52 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   20e26:	4630      	mov	r0, r6
   20e28:	f7e6 fba6 	bl	7578 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20e2c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   20e30:	2b00      	cmp	r3, #0
   20e32:	d1e4      	bne.n	20dfe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20e34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   20e38:	2a00      	cmp	r2, #0
   20e3a:	d0e0      	beq.n	20dfe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20e3c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20e40:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   20e44:	2301      	movs	r3, #1
   20e46:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   20e4a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20e4e:	60ab      	str	r3, [r5, #8]
}
   20e50:	e7d5      	b.n	20dfe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   20e52:	2100      	movs	r1, #0
   20e54:	2021      	movs	r0, #33	; 0x21
   20e56:	f004 fc17 	bl	25688 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20e5a:	e7e7      	b.n	20e2c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   20e5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20e60:	2202      	movs	r2, #2
   20e62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   20e66:	e7db      	b.n	20e20 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   20e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20e6c:	2202      	movs	r2, #2
   20e6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   20e72:	4606      	mov	r6, r0
}
   20e74:	e7bf      	b.n	20df6 <z_nrf_clock_control_lf_on+0x6a>
   20e76:	bf00      	nop
   20e78:	20003724 	.word	0x20003724
   20e7c:	200036c0 	.word	0x200036c0
   20e80:	200036ec 	.word	0x200036ec
   20e84:	20003f38 	.word	0x20003f38
   20e88:	e000e100 	.word	0xe000e100

00020e8c <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
   20e8c:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
   20e8e:	4c04      	ldr	r4, [pc, #16]	; (20ea0 <rtt_console_init+0x14>)
   20e90:	4620      	mov	r0, r4
   20e92:	f7e4 fc71 	bl	5778 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
   20e96:	4620      	mov	r0, r4
   20e98:	f7e7 f91e 	bl	80d8 <__stdout_hook_install>

	return 0;
}
   20e9c:	2000      	movs	r0, #0
   20e9e:	bd10      	pop	{r4, pc}
   20ea0:	00020ea5 	.word	0x00020ea5

00020ea4 <rtt_console_out>:
{
   20ea4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   20ea8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 20f08 <rtt_console_out+0x64>
   20eac:	4e17      	ldr	r6, [pc, #92]	; (20f0c <rtt_console_out+0x68>)
	char c = (char)character;
   20eae:	f88d 0007 	strb.w	r0, [sp, #7]
{
   20eb2:	4604      	mov	r4, r0
	char c = (char)character;
   20eb4:	2503      	movs	r5, #3
   20eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   20ebe:	4640      	mov	r0, r8
   20ec0:	f003 fe10 	bl	24ae4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
   20ec4:	2201      	movs	r2, #1
   20ec6:	f10d 0107 	add.w	r1, sp, #7
   20eca:	2000      	movs	r0, #0
   20ecc:	f003 fa56 	bl	2437c <SEGGER_RTT_WriteNoLock>
   20ed0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
   20ed2:	4640      	mov	r0, r8
   20ed4:	f003 fe7e 	bl	24bd4 <z_impl_k_mutex_unlock>
		if (cnt) {
   20ed8:	b12f      	cbz	r7, 20ee6 <rtt_console_out+0x42>
			host_present = true;
   20eda:	2301      	movs	r3, #1
   20edc:	7033      	strb	r3, [r6, #0]
}
   20ede:	4620      	mov	r0, r4
   20ee0:	b002      	add	sp, #8
   20ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
   20ee6:	7833      	ldrb	r3, [r6, #0]
   20ee8:	2b00      	cmp	r3, #0
   20eea:	d0f8      	beq.n	20ede <rtt_console_out+0x3a>
			if (max_cnt) {
   20eec:	3d01      	subs	r5, #1
   20eee:	d008      	beq.n	20f02 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
   20ef0:	f00c fe25 	bl	2db3e <k_is_in_isr>
   20ef4:	2800      	cmp	r0, #0
   20ef6:	d1de      	bne.n	20eb6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
   20ef8:	2100      	movs	r1, #0
   20efa:	2042      	movs	r0, #66	; 0x42
   20efc:	f004 fbc4 	bl	25688 <z_impl_k_sleep>
   20f00:	e7d9      	b.n	20eb6 <rtt_console_out+0x12>
				host_present = false;
   20f02:	7035      	strb	r5, [r6, #0]
   20f04:	e7eb      	b.n	20ede <rtt_console_out+0x3a>
   20f06:	bf00      	nop
   20f08:	20000cb0 	.word	0x20000cb0
   20f0c:	20003b07 	.word	0x20003b07

00020f10 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
   20f10:	b530      	push	{r4, r5, lr}
	return port->config;
   20f12:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20f14:	7b04      	ldrb	r4, [r0, #12]
   20f16:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
   20f1a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20f1e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
   20f22:	b085      	sub	sp, #20
   20f24:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
   20f28:	d104      	bne.n	20f34 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
   20f2a:	4628      	mov	r0, r5
   20f2c:	f002 fc84 	bl	23838 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
   20f30:	2000      	movs	r0, #0
   20f32:	e02e      	b.n	20f92 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
   20f34:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f38:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20f3c:	d12b      	bne.n	20f96 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   20f42:	bf0c      	ite	eq
   20f44:	2304      	moveq	r3, #4
   20f46:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   20f48:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20f4c:	6883      	ldr	r3, [r0, #8]
   20f4e:	fa23 f101 	lsr.w	r1, r3, r1
   20f52:	07c9      	lsls	r1, r1, #31
   20f54:	d42b      	bmi.n	20fae <gpio_nrfx_pin_interrupt_configure+0x9e>
   20f56:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   20f5a:	d128      	bne.n	20fae <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   20f5c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20f60:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   20f64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   20f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20f6c:	07db      	lsls	r3, r3, #31
   20f6e:	d41e      	bmi.n	20fae <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20f70:	f10d 0407 	add.w	r4, sp, #7
   20f74:	4621      	mov	r1, r4
   20f76:	4628      	mov	r0, r5
   20f78:	f002 fbc6 	bl	23708 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20f7c:	4b14      	ldr	r3, [pc, #80]	; (20fd0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
   20f7e:	4298      	cmp	r0, r3
   20f80:	d114      	bne.n	20fac <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
   20f82:	4620      	mov	r0, r4
   20f84:	f002 fc0e 	bl	237a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20f88:	4b12      	ldr	r3, [pc, #72]	; (20fd4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   20f8a:	4298      	cmp	r0, r3
   20f8c:	d00e      	beq.n	20fac <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
   20f8e:	f06f 000b 	mvn.w	r0, #11
}
   20f92:	b005      	add	sp, #20
   20f94:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20f96:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   20f9a:	d005      	beq.n	20fa8 <gpio_nrfx_pin_interrupt_configure+0x98>
   20f9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   20fa0:	bf0c      	ite	eq
   20fa2:	2302      	moveq	r3, #2
   20fa4:	2301      	movne	r3, #1
   20fa6:	e7cf      	b.n	20f48 <gpio_nrfx_pin_interrupt_configure+0x38>
   20fa8:	2303      	movs	r3, #3
   20faa:	e7cd      	b.n	20f48 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
   20fac:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20fae:	2300      	movs	r3, #0
   20fb0:	4619      	mov	r1, r3
   20fb2:	aa02      	add	r2, sp, #8
   20fb4:	4628      	mov	r0, r5
   20fb6:	f002 fa7f 	bl	234b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20fba:	4b06      	ldr	r3, [pc, #24]	; (20fd4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
   20fbc:	4298      	cmp	r0, r3
   20fbe:	d104      	bne.n	20fca <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   20fc0:	2101      	movs	r1, #1
   20fc2:	4628      	mov	r0, r5
   20fc4:	f002 fbf4 	bl	237b0 <nrfx_gpiote_trigger_enable>
   20fc8:	e7b2      	b.n	20f30 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
   20fca:	f06f 0004 	mvn.w	r0, #4
   20fce:	e7e0      	b.n	20f92 <gpio_nrfx_pin_interrupt_configure+0x82>
   20fd0:	0bad0004 	.word	0x0bad0004
   20fd4:	0bad0000 	.word	0x0bad0000

00020fd8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20fd8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20fda:	f002 fbd3 	bl	23784 <nrfx_gpiote_is_init>
   20fde:	4604      	mov	r4, r0
   20fe0:	b968      	cbnz	r0, 20ffe <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20fe2:	f002 fba7 	bl	23734 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20fe6:	4b08      	ldr	r3, [pc, #32]	; (21008 <gpio_nrfx_init+0x30>)
   20fe8:	4298      	cmp	r0, r3
   20fea:	d10a      	bne.n	21002 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20fec:	4807      	ldr	r0, [pc, #28]	; (2100c <gpio_nrfx_init+0x34>)
   20fee:	4621      	mov	r1, r4
   20ff0:	f002 fb84 	bl	236fc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20ff4:	4622      	mov	r2, r4
   20ff6:	2105      	movs	r1, #5
   20ff8:	2006      	movs	r0, #6
   20ffa:	f7e6 fb5f 	bl	76bc <z_arm_irq_priority_set>
		return 0;
   20ffe:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   21000:	bd10      	pop	{r4, pc}
		return -EIO;
   21002:	f06f 0004 	mvn.w	r0, #4
   21006:	e7fb      	b.n	21000 <gpio_nrfx_init+0x28>
   21008:	0bad0000 	.word	0x0bad0000
   2100c:	00021011 	.word	0x00021011

00021010 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21010:	0943      	lsrs	r3, r0, #5
{
   21012:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21014:	d110      	bne.n	21038 <nrfx_gpio_handler+0x28>
	return list->head;
   21016:	4b09      	ldr	r3, [pc, #36]	; (2103c <nrfx_gpio_handler+0x2c>)
   21018:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2101a:	b169      	cbz	r1, 21038 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
   2101c:	2501      	movs	r5, #1
	return node->next;
   2101e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   21020:	4e07      	ldr	r6, [pc, #28]	; (21040 <nrfx_gpio_handler+0x30>)
   21022:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
   21024:	688a      	ldr	r2, [r1, #8]
   21026:	402a      	ands	r2, r5
   21028:	d002      	beq.n	21030 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
   2102a:	684b      	ldr	r3, [r1, #4]
   2102c:	4630      	mov	r0, r6
   2102e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21030:	b114      	cbz	r4, 21038 <nrfx_gpio_handler+0x28>
   21032:	4621      	mov	r1, r4
   21034:	6824      	ldr	r4, [r4, #0]
   21036:	e7f5      	b.n	21024 <nrfx_gpio_handler+0x14>
}
   21038:	bd70      	pop	{r4, r5, r6, pc}
   2103a:	bf00      	nop
   2103c:	20003728 	.word	0x20003728
   21040:	0002f098 	.word	0x0002f098

00021044 <gpio_nrfx_pin_configure>:
{
   21044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
   21048:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2104a:	7b3b      	ldrb	r3, [r7, #12]
   2104c:	f001 051f 	and.w	r5, r1, #31
{
   21050:	b085      	sub	sp, #20
   21052:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21054:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   21058:	4614      	mov	r4, r2
   2105a:	b9ca      	cbnz	r2, 21090 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   2105c:	a902      	add	r1, sp, #8
   2105e:	4628      	mov	r0, r5
   21060:	f002 fb52 	bl	23708 <nrfx_gpiote_channel_get>
   21064:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   21066:	4628      	mov	r0, r5
   21068:	f002 fc0e 	bl	23888 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   2106c:	4b48      	ldr	r3, [pc, #288]	; (21190 <gpio_nrfx_pin_configure+0x14c>)
   2106e:	4298      	cmp	r0, r3
   21070:	d004      	beq.n	2107c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   21072:	f06f 0004 	mvn.w	r0, #4
}
   21076:	b005      	add	sp, #20
   21078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   2107c:	4284      	cmp	r4, r0
   2107e:	d105      	bne.n	2108c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   21080:	f89d 0008 	ldrb.w	r0, [sp, #8]
   21084:	f002 fb88 	bl	23798 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   21088:	42a0      	cmp	r0, r4
   2108a:	d1f2      	bne.n	21072 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2108c:	2000      	movs	r0, #0
   2108e:	e7f2      	b.n	21076 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   21090:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   21094:	f10d 0103 	add.w	r1, sp, #3
   21098:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   2109a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   2109e:	f002 fb33 	bl	23708 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   210a2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   210a4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   210a6:	aa02      	add	r2, sp, #8
   210a8:	4649      	mov	r1, r9
   210aa:	4628      	mov	r0, r5
   210ac:	f002 fa04 	bl	234b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   210b0:	4b37      	ldr	r3, [pc, #220]	; (21190 <gpio_nrfx_pin_configure+0x14c>)
   210b2:	4298      	cmp	r0, r3
   210b4:	d002      	beq.n	210bc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   210b6:	f06f 0015 	mvn.w	r0, #21
   210ba:	e7dc      	b.n	21076 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   210bc:	4580      	cmp	r8, r0
   210be:	d103      	bne.n	210c8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   210c0:	f89d 0003 	ldrb.w	r0, [sp, #3]
   210c4:	f002 fb68 	bl	23798 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   210c8:	05a3      	lsls	r3, r4, #22
   210ca:	d54e      	bpl.n	2116a <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   210cc:	4b31      	ldr	r3, [pc, #196]	; (21194 <gpio_nrfx_pin_configure+0x150>)
   210ce:	4a32      	ldr	r2, [pc, #200]	; (21198 <gpio_nrfx_pin_configure+0x154>)
   210d0:	4023      	ands	r3, r4
   210d2:	4293      	cmp	r3, r2
   210d4:	d03a      	beq.n	2114c <gpio_nrfx_pin_configure+0x108>
   210d6:	d80c      	bhi.n	210f2 <gpio_nrfx_pin_configure+0xae>
   210d8:	2b06      	cmp	r3, #6
   210da:	d014      	beq.n	21106 <gpio_nrfx_pin_configure+0xc2>
   210dc:	d804      	bhi.n	210e8 <gpio_nrfx_pin_configure+0xa4>
   210de:	b193      	cbz	r3, 21106 <gpio_nrfx_pin_configure+0xc2>
   210e0:	2b02      	cmp	r3, #2
   210e2:	d1e8      	bne.n	210b6 <gpio_nrfx_pin_configure+0x72>
   210e4:	2304      	movs	r3, #4
   210e6:	e00e      	b.n	21106 <gpio_nrfx_pin_configure+0xc2>
   210e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   210ec:	d1e3      	bne.n	210b6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   210ee:	2301      	movs	r3, #1
   210f0:	e009      	b.n	21106 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   210f2:	4a2a      	ldr	r2, [pc, #168]	; (2119c <gpio_nrfx_pin_configure+0x158>)
   210f4:	4293      	cmp	r3, r2
   210f6:	d02b      	beq.n	21150 <gpio_nrfx_pin_configure+0x10c>
   210f8:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   210fc:	d02a      	beq.n	21154 <gpio_nrfx_pin_configure+0x110>
   210fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   21102:	d1d8      	bne.n	210b6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   21104:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   21106:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   2110a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   2110e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   21112:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   21114:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   21118:	bf54      	ite	pl
   2111a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   2111e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21120:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   21122:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21126:	d517      	bpl.n	21158 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   21128:	687b      	ldr	r3, [r7, #4]
   2112a:	2101      	movs	r1, #1
   2112c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   21130:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   21134:	2200      	movs	r2, #0
   21136:	a901      	add	r1, sp, #4
   21138:	4628      	mov	r0, r5
   2113a:	f002 fa67 	bl	2360c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   2113e:	4b14      	ldr	r3, [pc, #80]	; (21190 <gpio_nrfx_pin_configure+0x14c>)
   21140:	4298      	cmp	r0, r3
   21142:	bf14      	ite	ne
   21144:	f06f 0015 	mvnne.w	r0, #21
   21148:	2000      	moveq	r0, #0
   2114a:	e794      	b.n	21076 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   2114c:	2307      	movs	r3, #7
   2114e:	e7da      	b.n	21106 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   21150:	2305      	movs	r3, #5
   21152:	e7d8      	b.n	21106 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   21154:	2303      	movs	r3, #3
   21156:	e7d6      	b.n	21106 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   21158:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   2115a:	bf41      	itttt	mi
   2115c:	687b      	ldrmi	r3, [r7, #4]
   2115e:	2101      	movmi	r1, #1
   21160:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   21164:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   21168:	e7e4      	b.n	21134 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   2116a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   2116c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   21170:	bf54      	ite	pl
   21172:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   21176:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21178:	461a      	mov	r2, r3
   2117a:	a901      	add	r1, sp, #4
   2117c:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   2117e:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21182:	f002 f999 	bl	234b8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   21186:	4b02      	ldr	r3, [pc, #8]	; (21190 <gpio_nrfx_pin_configure+0x14c>)
   21188:	4298      	cmp	r0, r3
   2118a:	f43f af7f 	beq.w	2108c <gpio_nrfx_pin_configure+0x48>
   2118e:	e792      	b.n	210b6 <gpio_nrfx_pin_configure+0x72>
   21190:	0bad0000 	.word	0x0bad0000
   21194:	00f00006 	.word	0x00f00006
   21198:	00100006 	.word	0x00100006
   2119c:	00400002 	.word	0x00400002

000211a0 <sx1509b_init>:
 *
 * @param dev Device struct
 * @return 0 if successful, failed otherwise.
 */
static int sx1509b_init(const struct device *dev)
{
   211a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct sx1509b_config *cfg = dev->config;
   211a4:	6847      	ldr	r7, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   211a6:	6905      	ldr	r5, [r0, #16]
{
   211a8:	4606      	mov	r6, r0
   211aa:	b087      	sub	sp, #28
	int rc;

	drv_data->i2c_master = device_get_binding(cfg->i2c_master_dev_name);
   211ac:	6878      	ldr	r0, [r7, #4]
   211ae:	f003 f93f 	bl	24430 <z_impl_device_get_binding>
   211b2:	4603      	mov	r3, r0
   211b4:	6068      	str	r0, [r5, #4]
	if (!drv_data->i2c_master) {
   211b6:	bb00      	cbnz	r0, 211fa <sx1509b_init+0x5a>
		LOG_ERR("%s: no bus %s", dev->name,
   211b8:	687a      	ldr	r2, [r7, #4]
   211ba:	9203      	str	r2, [sp, #12]
   211bc:	6832      	ldr	r2, [r6, #0]
   211be:	9202      	str	r2, [sp, #8]
   211c0:	4a4a      	ldr	r2, [pc, #296]	; (212ec <sx1509b_init+0x14c>)
   211c2:	494b      	ldr	r1, [pc, #300]	; (212f0 <sx1509b_init+0x150>)
   211c4:	e9cd 0200 	strd	r0, r2, [sp]
   211c8:	2201      	movs	r2, #1
   211ca:	f00b fdba 	bl	2cd42 <z_log_msg2_runtime_create.constprop.0>
			cfg->i2c_master_dev_name);
		rc = -EINVAL;
   211ce:	f06f 0415 	mvn.w	r4, #21
				SX1509B_REG_MISC_FREQ);
	}

out:
	if (rc != 0) {
		LOG_ERR("%s init failed: %d", dev->name, rc);
   211d2:	6833      	ldr	r3, [r6, #0]
   211d4:	9302      	str	r3, [sp, #8]
   211d6:	4b47      	ldr	r3, [pc, #284]	; (212f4 <sx1509b_init+0x154>)
   211d8:	9301      	str	r3, [sp, #4]
   211da:	2300      	movs	r3, #0
   211dc:	4944      	ldr	r1, [pc, #272]	; (212f0 <sx1509b_init+0x150>)
   211de:	9403      	str	r4, [sp, #12]
   211e0:	9300      	str	r3, [sp, #0]
   211e2:	2201      	movs	r2, #1
   211e4:	4618      	mov	r0, r3
   211e6:	f00b fdac 	bl	2cd42 <z_log_msg2_runtime_create.constprop.0>
	z_impl_k_sem_give(sem);
   211ea:	f105 0020 	add.w	r0, r5, #32
   211ee:	f003 fd67 	bl	24cc0 <z_impl_k_sem_give>
	} else {
		LOG_INF("%s init ok", dev->name);
	}
	k_sem_give(&drv_data->lock);
	return rc;
}
   211f2:	4620      	mov	r0, r4
   211f4:	b007      	add	sp, #28
   211f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   211fa:	893b      	ldrh	r3, [r7, #8]
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   211fc:	f04f 097d 	mov.w	r9, #125	; 0x7d
   21200:	f04f 0812 	mov.w	r8, #18

	return i2c_write(dev, tx_buf, 2, dev_addr);
   21204:	2202      	movs	r2, #2
   21206:	a905      	add	r1, sp, #20
	uint8_t tx_buf[2] = {reg_addr, value};
   21208:	f88d 9014 	strb.w	r9, [sp, #20]
   2120c:	f88d 8015 	strb.w	r8, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   21210:	f00b fda7 	bl	2cd62 <i2c_write>
	if (rc != 0) {
   21214:	4604      	mov	r4, r0
   21216:	b160      	cbz	r0, 21232 <sx1509b_init+0x92>
		LOG_ERR("%s: reset m0 failed: %d\n", dev->name, rc);
   21218:	6833      	ldr	r3, [r6, #0]
   2121a:	9302      	str	r3, [sp, #8]
   2121c:	4b36      	ldr	r3, [pc, #216]	; (212f8 <sx1509b_init+0x158>)
   2121e:	9301      	str	r3, [sp, #4]
   21220:	2300      	movs	r3, #0
   21222:	9003      	str	r0, [sp, #12]
   21224:	4932      	ldr	r1, [pc, #200]	; (212f0 <sx1509b_init+0x150>)
   21226:	9300      	str	r3, [sp, #0]
   21228:	2201      	movs	r2, #1
   2122a:	4618      	mov	r0, r3
   2122c:	f00b fd89 	bl	2cd42 <z_log_msg2_runtime_create.constprop.0>
		goto out;
   21230:	e7cf      	b.n	211d2 <sx1509b_init+0x32>
	uint8_t tx_buf[2] = {reg_addr, value};
   21232:	2234      	movs	r2, #52	; 0x34
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   21234:	6868      	ldr	r0, [r5, #4]
   21236:	893b      	ldrh	r3, [r7, #8]
   21238:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   2123c:	a905      	add	r1, sp, #20
   2123e:	2202      	movs	r2, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   21240:	f88d 9014 	strb.w	r9, [sp, #20]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   21244:	f00b fd8d 	bl	2cd62 <i2c_write>
	if (rc != 0) {
   21248:	4604      	mov	r4, r0
   2124a:	2800      	cmp	r0, #0
   2124c:	d1c1      	bne.n	211d2 <sx1509b_init+0x32>
	return z_impl_k_sleep(timeout);
   2124e:	2100      	movs	r1, #0
   21250:	2063      	movs	r0, #99	; 0x63
   21252:	f004 fa19 	bl	25688 <z_impl_k_sleep>
	drv_data->pin_state = (struct sx1509b_pin_state) {
   21256:	4642      	mov	r2, r8
   21258:	4621      	mov	r1, r4
   2125a:	f105 0008 	add.w	r0, r5, #8
   2125e:	f00d f9a3 	bl	2e5a8 <memset>
   21262:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
	uint8_t tx_buf[2] = {reg_addr, value};
   21266:	221e      	movs	r2, #30
   21268:	832b      	strh	r3, [r5, #24]
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   2126a:	83ac      	strh	r4, [r5, #28]
   2126c:	77ac      	strb	r4, [r5, #30]
	rc = i2c_reg_write_byte(drv_data->i2c_master, cfg->i2c_slave_addr,
   2126e:	6868      	ldr	r0, [r5, #4]
   21270:	893b      	ldrh	r3, [r7, #8]
   21272:	f88d 2014 	strb.w	r2, [sp, #20]
   21276:	2240      	movs	r2, #64	; 0x40
   21278:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   2127c:	a905      	add	r1, sp, #20
   2127e:	2202      	movs	r2, #2
   21280:	f00b fd6f 	bl	2cd62 <i2c_write>
	drv_data->debounce_state = (struct sx1509b_debounce_state) {
   21284:	46a0      	mov	r8, r4
	if (rc == 0) {
   21286:	4604      	mov	r4, r0
   21288:	2800      	cmp	r0, #0
   2128a:	d1a2      	bne.n	211d2 <sx1509b_init+0x32>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2128c:	8b2b      	ldrh	r3, [r5, #24]
   2128e:	8939      	ldrh	r1, [r7, #8]
   21290:	6868      	ldr	r0, [r5, #4]
   21292:	2210      	movs	r2, #16
   21294:	f00b fd72 	bl	2cd7c <i2c_reg_write_word_be>
	if (rc == 0) {
   21298:	4604      	mov	r4, r0
   2129a:	2800      	cmp	r0, #0
   2129c:	d199      	bne.n	211d2 <sx1509b_init+0x32>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2129e:	8aeb      	ldrh	r3, [r5, #22]
   212a0:	8939      	ldrh	r1, [r7, #8]
   212a2:	6868      	ldr	r0, [r5, #4]
   212a4:	220e      	movs	r2, #14
   212a6:	f00b fd69 	bl	2cd7c <i2c_reg_write_word_be>
	if (rc == 0) {
   212aa:	4604      	mov	r4, r0
   212ac:	2800      	cmp	r0, #0
   212ae:	d190      	bne.n	211d2 <sx1509b_init+0x32>
	uint8_t tx_buf[3] = { reg_addr, value };
   212b0:	221f      	movs	r2, #31
		rc = i2c_reg_write_byte_be(
   212b2:	6868      	ldr	r0, [r5, #4]
   212b4:	893b      	ldrh	r3, [r7, #8]
	uint8_t tx_buf[3] = { reg_addr, value };
   212b6:	f88d 2014 	strb.w	r2, [sp, #20]
   212ba:	2298      	movs	r2, #152	; 0x98
   212bc:	f88d 2015 	strb.w	r2, [sp, #21]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   212c0:	a905      	add	r1, sp, #20
   212c2:	2202      	movs	r2, #2
	uint8_t tx_buf[3] = { reg_addr, value };
   212c4:	f88d 8016 	strb.w	r8, [sp, #22]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   212c8:	f00b fd4b 	bl	2cd62 <i2c_write>
	if (rc != 0) {
   212cc:	4604      	mov	r4, r0
   212ce:	2800      	cmp	r0, #0
   212d0:	f47f af7f 	bne.w	211d2 <sx1509b_init+0x32>
		LOG_INF("%s init ok", dev->name);
   212d4:	6833      	ldr	r3, [r6, #0]
   212d6:	9302      	str	r3, [sp, #8]
   212d8:	4b08      	ldr	r3, [pc, #32]	; (212fc <sx1509b_init+0x15c>)
   212da:	4905      	ldr	r1, [pc, #20]	; (212f0 <sx1509b_init+0x150>)
   212dc:	e9cd 0300 	strd	r0, r3, [sp]
   212e0:	2203      	movs	r2, #3
   212e2:	4603      	mov	r3, r0
   212e4:	f00b fd2d 	bl	2cd42 <z_log_msg2_runtime_create.constprop.0>
   212e8:	e77f      	b.n	211ea <sx1509b_init+0x4a>
   212ea:	bf00      	nop
   212ec:	000334a9 	.word	0x000334a9
   212f0:	0002f574 	.word	0x0002f574
   212f4:	000334d0 	.word	0x000334d0
   212f8:	000334b7 	.word	0x000334b7
   212fc:	000334e3 	.word	0x000334e3

00021300 <i2c_nrfx_twim_recover_bus>:

	return 0;
}

static int i2c_nrfx_twim_recover_bus(const struct device *dev)
{
   21300:	b508      	push	{r3, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   21302:	6903      	ldr	r3, [r0, #16]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
   21304:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
   21308:	f002 ff74 	bl	241f4 <nrfx_twi_twim_bus_recover>

	nrfx_err_t err = nrfx_twim_bus_recover(dev_data->twim_config.scl,
					       dev_data->twim_config.sda);

	return (err == NRFX_SUCCESS ? 0 : -EBUSY);
   2130c:	4b03      	ldr	r3, [pc, #12]	; (2131c <i2c_nrfx_twim_recover_bus+0x1c>)
   2130e:	4298      	cmp	r0, r3
}
   21310:	bf14      	ite	ne
   21312:	f06f 000f 	mvnne.w	r0, #15
   21316:	2000      	moveq	r0, #0
   21318:	bd08      	pop	{r3, pc}
   2131a:	bf00      	nop
   2131c:	0bad0000 	.word	0x0bad0000

00021320 <init_twim>:
{
   21320:	b530      	push	{r4, r5, lr}
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   21322:	6905      	ldr	r5, [r0, #16]
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   21324:	4a0f      	ldr	r2, [pc, #60]	; (21364 <init_twim+0x44>)
   21326:	462b      	mov	r3, r5
{
   21328:	b085      	sub	sp, #20
   2132a:	4604      	mov	r4, r0
	nrfx_err_t result = nrfx_twim_init(&dev_config->twim,
   2132c:	f105 0130 	add.w	r1, r5, #48	; 0x30
   21330:	6840      	ldr	r0, [r0, #4]
   21332:	f002 fd1d 	bl	23d70 <nrfx_twim_init>
	if (result != NRFX_SUCCESS) {
   21336:	4b0c      	ldr	r3, [pc, #48]	; (21368 <init_twim+0x48>)
   21338:	4298      	cmp	r0, r3
   2133a:	d00e      	beq.n	2135a <init_twim+0x3a>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   2133c:	6823      	ldr	r3, [r4, #0]
   2133e:	9302      	str	r3, [sp, #8]
   21340:	4b0a      	ldr	r3, [pc, #40]	; (2136c <init_twim+0x4c>)
   21342:	9301      	str	r3, [sp, #4]
   21344:	2300      	movs	r3, #0
   21346:	4618      	mov	r0, r3
   21348:	4909      	ldr	r1, [pc, #36]	; (21370 <init_twim+0x50>)
   2134a:	9300      	str	r3, [sp, #0]
   2134c:	2201      	movs	r2, #1
   2134e:	f00b fe7f 	bl	2d050 <z_log_msg2_runtime_create.constprop.0>
   21352:	f06f 0004 	mvn.w	r0, #4
}
   21356:	b005      	add	sp, #20
   21358:	bd30      	pop	{r4, r5, pc}
	dev_data->twim_initialized = true;
   2135a:	2301      	movs	r3, #1
   2135c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
	return 0;
   21360:	2000      	movs	r0, #0
   21362:	e7f8      	b.n	21356 <init_twim+0x36>
   21364:	000213e9 	.word	0x000213e9
   21368:	0bad0000 	.word	0x0bad0000
   2136c:	00033500 	.word	0x00033500
   21370:	0002f524 	.word	0x0002f524

00021374 <i2c_nrfx_twim_configure>:
{
   21374:	b530      	push	{r4, r5, lr}
	if (I2C_ADDR_10_BITS & i2c_config) {
   21376:	f011 0301 	ands.w	r3, r1, #1
{
   2137a:	b089      	sub	sp, #36	; 0x24
   2137c:	4604      	mov	r4, r0
	if (I2C_ADDR_10_BITS & i2c_config) {
   2137e:	d110      	bne.n	213a2 <i2c_nrfx_twim_configure+0x2e>
	switch (I2C_SPEED_GET(i2c_config)) {
   21380:	f3c1 0142 	ubfx	r1, r1, #1, #3
   21384:	2901      	cmp	r1, #1
   21386:	d010      	beq.n	213aa <i2c_nrfx_twim_configure+0x36>
   21388:	2902      	cmp	r1, #2
   2138a:	d024      	beq.n	213d6 <i2c_nrfx_twim_configure+0x62>
		LOG_ERR("unsupported speed");
   2138c:	4a14      	ldr	r2, [pc, #80]	; (213e0 <i2c_nrfx_twim_configure+0x6c>)
   2138e:	9206      	str	r2, [sp, #24]
   21390:	2202      	movs	r2, #2
   21392:	9201      	str	r2, [sp, #4]
   21394:	9205      	str	r2, [sp, #20]
   21396:	4813      	ldr	r0, [pc, #76]	; (213e4 <i2c_nrfx_twim_configure+0x70>)
   21398:	aa05      	add	r2, sp, #20
   2139a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2139e:	f007 fb87 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   213a2:	f06f 0015 	mvn.w	r0, #21
}
   213a6:	b009      	add	sp, #36	; 0x24
   213a8:	bd30      	pop	{r4, r5, pc}
		frequency = NRF_TWIM_FREQ_100K;
   213aa:	f04f 73cc 	mov.w	r3, #26738688	; 0x1980000
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   213ae:	6925      	ldr	r5, [r4, #16]
	if (frequency != dev_data->twim_config.frequency) {
   213b0:	6baa      	ldr	r2, [r5, #56]	; 0x38
   213b2:	4293      	cmp	r3, r2
   213b4:	d012      	beq.n	213dc <i2c_nrfx_twim_configure+0x68>
		dev_data->twim_config.frequency = frequency;
   213b6:	63ab      	str	r3, [r5, #56]	; 0x38
	if (dev_data->twim_initialized) {
   213b8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   213bc:	b12b      	cbz	r3, 213ca <i2c_nrfx_twim_configure+0x56>
		nrfx_twim_uninit(&dev_config->twim);
   213be:	6860      	ldr	r0, [r4, #4]
   213c0:	f002 fd54 	bl	23e6c <nrfx_twim_uninit>
		dev_data->twim_initialized = false;
   213c4:	2300      	movs	r3, #0
   213c6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
		return init_twim(dev);
   213ca:	4620      	mov	r0, r4
}
   213cc:	b009      	add	sp, #36	; 0x24
   213ce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return init_twim(dev);
   213d2:	f7ff bfa5 	b.w	21320 <init_twim>
	switch (I2C_SPEED_GET(i2c_config)) {
   213d6:	f04f 63c8 	mov.w	r3, #104857600	; 0x6400000
   213da:	e7e8      	b.n	213ae <i2c_nrfx_twim_configure+0x3a>
	return 0;
   213dc:	2000      	movs	r0, #0
   213de:	e7e2      	b.n	213a6 <i2c_nrfx_twim_configure+0x32>
   213e0:	00033520 	.word	0x00033520
   213e4:	0002f524 	.word	0x0002f524

000213e8 <event_handler>:
	switch (p_event->type) {
   213e8:	7803      	ldrb	r3, [r0, #0]
   213ea:	2b01      	cmp	r3, #1
   213ec:	d008      	beq.n	21400 <event_handler+0x18>
   213ee:	2b02      	cmp	r3, #2
   213f0:	d008      	beq.n	21404 <event_handler+0x1c>
   213f2:	b94b      	cbnz	r3, 21408 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   213f4:	4b05      	ldr	r3, [pc, #20]	; (2140c <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   213f6:	644b      	str	r3, [r1, #68]	; 0x44
	z_impl_k_sem_give(sem);
   213f8:	f101 0018 	add.w	r0, r1, #24
   213fc:	f003 bc60 	b.w	24cc0 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   21400:	4b03      	ldr	r3, [pc, #12]	; (21410 <event_handler+0x28>)
   21402:	e7f8      	b.n	213f6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   21404:	4b03      	ldr	r3, [pc, #12]	; (21414 <event_handler+0x2c>)
   21406:	e7f6      	b.n	213f6 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   21408:	4b03      	ldr	r3, [pc, #12]	; (21418 <event_handler+0x30>)
   2140a:	e7f4      	b.n	213f6 <event_handler+0xe>
   2140c:	0bad0000 	.word	0x0bad0000
   21410:	0bae0001 	.word	0x0bae0001
   21414:	0bae0002 	.word	0x0bae0002
   21418:	0bad0001 	.word	0x0bad0001

0002141c <i2c_nrfx_twim_transfer>:
{
   2141c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21420:	b099      	sub	sp, #100	; 0x64
	const struct i2c_nrfx_twim_config *dev_config = dev->config;
   21422:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct i2c_nrfx_twim_data *dev_data = dev->data;
   21426:	6906      	ldr	r6, [r0, #16]
{
   21428:	af06      	add	r7, sp, #24
   2142a:	461d      	mov	r5, r3
   2142c:	613a      	str	r2, [r7, #16]
	uint16_t concat_buf_size = dev_config->concat_buf_size;
   2142e:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   21432:	617b      	str	r3, [r7, #20]
{
   21434:	4680      	mov	r8, r0
   21436:	460c      	mov	r4, r1
	nrfx_twim_xfer_desc_t cur_xfer = {
   21438:	2214      	movs	r2, #20
   2143a:	2100      	movs	r1, #0
   2143c:	f107 001c 	add.w	r0, r7, #28
	uint8_t *msg_buf = dev_data->msg_buf;
   21440:	f8d6 b048 	ldr.w	fp, [r6, #72]	; 0x48
	nrfx_twim_xfer_desc_t cur_xfer = {
   21444:	f00d f8b0 	bl	2e5a8 <memset>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   21448:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
	nrfx_twim_xfer_desc_t cur_xfer = {
   2144c:	777d      	strb	r5, [r7, #29]
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   2144e:	b1d3      	cbz	r3, 21486 <i2c_nrfx_twim_transfer+0x6a>
	return z_impl_k_sem_take(sem, timeout);
   21450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   21454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   21458:	4630      	mov	r0, r6
   2145a:	f003 fc57 	bl	24d0c <z_impl_k_sem_take>
	k_sem_take(&dev_data->completion_sync, K_NO_WAIT);
   2145e:	f106 0318 	add.w	r3, r6, #24
   21462:	60fb      	str	r3, [r7, #12]
   21464:	2200      	movs	r2, #0
   21466:	2300      	movs	r3, #0
   21468:	f106 0018 	add.w	r0, r6, #24
   2146c:	f003 fc4e 	bl	24d0c <z_impl_k_sem_take>
	nrfx_twim_enable(&dev_config->twim);
   21470:	4648      	mov	r0, r9
   21472:	f002 fccd 	bl	23e10 <nrfx_twim_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   21476:	f04f 0a00 	mov.w	sl, #0
	uint16_t msg_buf_used = 0;
   2147a:	4655      	mov	r5, sl
	for (size_t i = 0; i < num_msgs; i++) {
   2147c:	693b      	ldr	r3, [r7, #16]
   2147e:	459a      	cmp	sl, r3
   21480:	d309      	bcc.n	21496 <i2c_nrfx_twim_transfer+0x7a>
   21482:	2400      	movs	r4, #0
   21484:	e037      	b.n	214f6 <i2c_nrfx_twim_transfer+0xda>
	if (!dev_data->twim_initialized && init_twim(dev) < 0) {
   21486:	4640      	mov	r0, r8
   21488:	f7ff ff4a 	bl	21320 <init_twim>
   2148c:	2800      	cmp	r0, #0
   2148e:	dadf      	bge.n	21450 <i2c_nrfx_twim_transfer+0x34>
		return -EIO;
   21490:	f06f 0404 	mvn.w	r4, #4
   21494:	e035      	b.n	21502 <i2c_nrfx_twim_transfer+0xe6>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   21496:	7a21      	ldrb	r1, [r4, #8]
   21498:	070b      	lsls	r3, r1, #28
   2149a:	f100 80e0 	bmi.w	2165e <i2c_nrfx_twim_transfer+0x242>
				&& ((msgs[i].flags & I2C_MSG_READ)
   2149e:	693a      	ldr	r2, [r7, #16]
		bool concat_next = ((i + 1) < num_msgs)
   214a0:	f10a 0301 	add.w	r3, sl, #1
				&& ((msgs[i].flags & I2C_MSG_READ)
   214a4:	4293      	cmp	r3, r2
		bool concat_next = ((i + 1) < num_msgs)
   214a6:	60bb      	str	r3, [r7, #8]
				&& ((msgs[i].flags & I2C_MSG_READ)
   214a8:	d20a      	bcs.n	214c0 <i2c_nrfx_twim_transfer+0xa4>
				&& !(msgs[i].flags & I2C_MSG_STOP)
   214aa:	0788      	lsls	r0, r1, #30
   214ac:	d408      	bmi.n	214c0 <i2c_nrfx_twim_transfer+0xa4>
				&& !(msgs[i + 1].flags & I2C_MSG_RESTART)
   214ae:	7d23      	ldrb	r3, [r4, #20]
				    == (msgs[i + 1].flags & I2C_MSG_READ));
   214b0:	ea81 0203 	eor.w	r2, r1, r3
				&& ((msgs[i].flags & I2C_MSG_READ)
   214b4:	f002 0201 	and.w	r2, r2, #1
   214b8:	f003 0304 	and.w	r3, r3, #4
   214bc:	4313      	orrs	r3, r2
   214be:	d025      	beq.n	2150c <i2c_nrfx_twim_transfer+0xf0>
		if (concat_next || (msg_buf_used != 0)) {
   214c0:	2d00      	cmp	r5, #0
   214c2:	d037      	beq.n	21534 <i2c_nrfx_twim_transfer+0x118>
				&& ((msgs[i].flags & I2C_MSG_READ)
   214c4:	2300      	movs	r3, #0
			if ((msg_buf_used + msgs[i].len) > concat_buf_size) {
   214c6:	6862      	ldr	r2, [r4, #4]
   214c8:	f8d7 c014 	ldr.w	ip, [r7, #20]
   214cc:	18a8      	adds	r0, r5, r2
   214ce:	4560      	cmp	r0, ip
   214d0:	d91e      	bls.n	21510 <i2c_nrfx_twim_transfer+0xf4>
				LOG_ERR("Need to use concatenation buffer and "
   214d2:	f8d8 3000 	ldr.w	r3, [r8]
   214d6:	9305      	str	r3, [sp, #20]
   214d8:	697b      	ldr	r3, [r7, #20]
   214da:	4962      	ldr	r1, [pc, #392]	; (21664 <i2c_nrfx_twim_transfer+0x248>)
   214dc:	9502      	str	r5, [sp, #8]
   214de:	e9cd 2303 	strd	r2, r3, [sp, #12]
   214e2:	4b61      	ldr	r3, [pc, #388]	; (21668 <i2c_nrfx_twim_transfer+0x24c>)
   214e4:	9301      	str	r3, [sp, #4]
   214e6:	2300      	movs	r3, #0
   214e8:	9300      	str	r3, [sp, #0]
   214ea:	2201      	movs	r2, #1
   214ec:	4618      	mov	r0, r3
   214ee:	f00b fdaf 	bl	2d050 <z_log_msg2_runtime_create.constprop.0>
				ret = -ENOSPC;
   214f2:	f06f 041b 	mvn.w	r4, #27
	nrfx_twim_disable(&dev_config->twim);
   214f6:	4648      	mov	r0, r9
   214f8:	f002 fc9a 	bl	23e30 <nrfx_twim_disable>
	z_impl_k_sem_give(sem);
   214fc:	4630      	mov	r0, r6
   214fe:	f003 fbdf 	bl	24cc0 <z_impl_k_sem_give>
}
   21502:	4620      	mov	r0, r4
   21504:	374c      	adds	r7, #76	; 0x4c
   21506:	46bd      	mov	sp, r7
   21508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				&& ((msgs[i].flags & I2C_MSG_READ)
   2150c:	2301      	movs	r3, #1
   2150e:	e7da      	b.n	214c6 <i2c_nrfx_twim_transfer+0xaa>
			if (!(msgs[i].flags & I2C_MSG_READ)) {
   21510:	07c9      	lsls	r1, r1, #31
   21512:	d406      	bmi.n	21522 <i2c_nrfx_twim_transfer+0x106>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   21514:	6821      	ldr	r1, [r4, #0]
   21516:	607b      	str	r3, [r7, #4]
   21518:	eb0b 0005 	add.w	r0, fp, r5
   2151c:	f00d f823 	bl	2e566 <memcpy>
   21520:	687b      	ldr	r3, [r7, #4]
			msg_buf_used += msgs[i].len;
   21522:	6862      	ldr	r2, [r4, #4]
   21524:	4415      	add	r5, r2
   21526:	b2ad      	uxth	r5, r5
		if (concat_next) {
   21528:	2b00      	cmp	r3, #0
   2152a:	d042      	beq.n	215b2 <i2c_nrfx_twim_transfer+0x196>
		bool concat_next = ((i + 1) < num_msgs)
   2152c:	f8d7 a008 	ldr.w	sl, [r7, #8]
   21530:	340c      	adds	r4, #12
   21532:	e7a3      	b.n	2147c <i2c_nrfx_twim_transfer+0x60>
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   21534:	07ca      	lsls	r2, r1, #31
   21536:	d51d      	bpl.n	21574 <i2c_nrfx_twim_transfer+0x158>
			cur_xfer.p_primary_buf = msgs[i].buf;
   21538:	6823      	ldr	r3, [r4, #0]
   2153a:	62bb      	str	r3, [r7, #40]	; 0x28
			cur_xfer.primary_length = msgs[i].len;
   2153c:	6863      	ldr	r3, [r4, #4]
   2153e:	623b      	str	r3, [r7, #32]
   21540:	2500      	movs	r5, #0
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   21542:	7a23      	ldrb	r3, [r4, #8]
			NRFX_TWIM_XFER_RX : NRFX_TWIM_XFER_TX;
   21544:	f003 0201 	and.w	r2, r3, #1
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   21548:	f013 0f02 	tst.w	r3, #2
		cur_xfer.type = (msgs[i].flags & I2C_MSG_READ) ?
   2154c:	773a      	strb	r2, [r7, #28]
		nrfx_err_t res = nrfx_twim_xfer(&dev_config->twim,
   2154e:	f107 011c 	add.w	r1, r7, #28
   21552:	bf0c      	ite	eq
   21554:	2220      	moveq	r2, #32
   21556:	2200      	movne	r2, #0
   21558:	4648      	mov	r0, r9
   2155a:	f002 fcbd 	bl	23ed8 <nrfx_twim_xfer>
		if (res != NRFX_SUCCESS) {
   2155e:	4b43      	ldr	r3, [pc, #268]	; (2166c <i2c_nrfx_twim_transfer+0x250>)
   21560:	4298      	cmp	r0, r3
   21562:	d02c      	beq.n	215be <i2c_nrfx_twim_transfer+0x1a2>
			if (res == NRFX_ERROR_BUSY) {
   21564:	330b      	adds	r3, #11
				ret = -EIO;
   21566:	4298      	cmp	r0, r3
   21568:	bf0c      	ite	eq
   2156a:	f06f 040f 	mvneq.w	r4, #15
   2156e:	f06f 0404 	mvnne.w	r4, #4
   21572:	e7c0      	b.n	214f6 <i2c_nrfx_twim_transfer+0xda>
			   !nrfx_is_in_ram(msgs[i].buf)) {
   21574:	6821      	ldr	r1, [r4, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21576:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		} else if (!(msgs[i].flags & I2C_MSG_READ) &&
   2157a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   2157e:	d0db      	beq.n	21538 <i2c_nrfx_twim_transfer+0x11c>
			if (msgs[i].len > dev_config->flash_buf_max_size) {
   21580:	6862      	ldr	r2, [r4, #4]
   21582:	f8b9 300a 	ldrh.w	r3, [r9, #10]
   21586:	4293      	cmp	r3, r2
   21588:	d20f      	bcs.n	215aa <i2c_nrfx_twim_transfer+0x18e>
				LOG_ERR("Cannot copy flash buffer of size: %u. "
   2158a:	f8d8 3000 	ldr.w	r3, [r8]
   2158e:	4935      	ldr	r1, [pc, #212]	; (21664 <i2c_nrfx_twim_transfer+0x248>)
   21590:	e9cd 2302 	strd	r2, r3, [sp, #8]
   21594:	4b36      	ldr	r3, [pc, #216]	; (21670 <i2c_nrfx_twim_transfer+0x254>)
   21596:	2201      	movs	r2, #1
   21598:	e9cd 5300 	strd	r5, r3, [sp]
   2159c:	4628      	mov	r0, r5
   2159e:	462b      	mov	r3, r5
   215a0:	f00b fd56 	bl	2d050 <z_log_msg2_runtime_create.constprop.0>
				ret = -EINVAL;
   215a4:	f06f 0415 	mvn.w	r4, #21
				break;
   215a8:	e7a5      	b.n	214f6 <i2c_nrfx_twim_transfer+0xda>
   215aa:	4658      	mov	r0, fp
   215ac:	f00c ffdb 	bl	2e566 <memcpy>
			msg_buf_used = msgs[i].len;
   215b0:	88a5      	ldrh	r5, [r4, #4]
		if (msg_buf_used == 0) {
   215b2:	2d00      	cmp	r5, #0
   215b4:	d0c0      	beq.n	21538 <i2c_nrfx_twim_transfer+0x11c>
			cur_xfer.p_primary_buf = msg_buf;
   215b6:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
			cur_xfer.primary_length = msg_buf_used;
   215ba:	623d      	str	r5, [r7, #32]
   215bc:	e7c1      	b.n	21542 <i2c_nrfx_twim_transfer+0x126>
	return z_impl_k_sem_take(sem, timeout);
   215be:	2300      	movs	r3, #0
   215c0:	68f8      	ldr	r0, [r7, #12]
   215c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   215c6:	f003 fba1 	bl	24d0c <z_impl_k_sem_take>
		if (ret != 0) {
   215ca:	4603      	mov	r3, r0
   215cc:	b1b8      	cbz	r0, 215fe <i2c_nrfx_twim_transfer+0x1e2>
			LOG_ERR("Error on I2C line occurred for message %d", i);
   215ce:	4b29      	ldr	r3, [pc, #164]	; (21674 <i2c_nrfx_twim_transfer+0x258>)
   215d0:	e9c7 3a10 	strd	r3, sl, [r7, #64]	; 0x40
   215d4:	2303      	movs	r3, #3
   215d6:	61bb      	str	r3, [r7, #24]
   215d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   215da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   215de:	4821      	ldr	r0, [pc, #132]	; (21664 <i2c_nrfx_twim_transfer+0x248>)
   215e0:	2300      	movs	r3, #0
   215e2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
   215e6:	f007 fa63 	bl	28ab0 <z_impl_z_log_msg2_static_create>
			nrfx_twim_disable(&dev_config->twim);
   215ea:	4648      	mov	r0, r9
   215ec:	f002 fc20 	bl	23e30 <nrfx_twim_disable>
   215f0:	e9d6 010c 	ldrd	r0, r1, [r6, #48]	; 0x30
   215f4:	f002 fdfe 	bl	241f4 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
   215f8:	f06f 0404 	mvn.w	r4, #4
			break;
   215fc:	e77b      	b.n	214f6 <i2c_nrfx_twim_transfer+0xda>
		res = dev_data->res;
   215fe:	6c71      	ldr	r1, [r6, #68]	; 0x44
		if (res != NRFX_SUCCESS) {
   21600:	4a1a      	ldr	r2, [pc, #104]	; (2166c <i2c_nrfx_twim_transfer+0x250>)
   21602:	4291      	cmp	r1, r2
   21604:	d012      	beq.n	2162c <i2c_nrfx_twim_transfer+0x210>
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
   21606:	481c      	ldr	r0, [pc, #112]	; (21678 <i2c_nrfx_twim_transfer+0x25c>)
   21608:	466c      	mov	r4, sp
   2160a:	b088      	sub	sp, #32
   2160c:	aa06      	add	r2, sp, #24
   2160e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   21612:	2104      	movs	r1, #4
   21614:	f8c2 a018 	str.w	sl, [r2, #24]
   21618:	6339      	str	r1, [r7, #48]	; 0x30
   2161a:	f842 1f0c 	str.w	r1, [r2, #12]!
   2161e:	4811      	ldr	r0, [pc, #68]	; (21664 <i2c_nrfx_twim_transfer+0x248>)
   21620:	f44f 5101 	mov.w	r1, #8256	; 0x2040
   21624:	f007 fa44 	bl	28ab0 <z_impl_z_log_msg2_static_create>
   21628:	46a5      	mov	sp, r4
   2162a:	e7e5      	b.n	215f8 <i2c_nrfx_twim_transfer+0x1dc>
		if ((msgs[i].flags & I2C_MSG_READ)
   2162c:	7a23      	ldrb	r3, [r4, #8]
   2162e:	07db      	lsls	r3, r3, #31
   21630:	d401      	bmi.n	21636 <i2c_nrfx_twim_transfer+0x21a>
		msg_buf_used = 0;
   21632:	2500      	movs	r5, #0
   21634:	e77a      	b.n	2152c <i2c_nrfx_twim_transfer+0x110>
		    && cur_xfer.p_primary_buf == msg_buf) {
   21636:	6abb      	ldr	r3, [r7, #40]	; 0x28
   21638:	459b      	cmp	fp, r3
   2163a:	d1fa      	bne.n	21632 <i2c_nrfx_twim_transfer+0x216>
   2163c:	46a2      	mov	sl, r4
   2163e:	e007      	b.n	21650 <i2c_nrfx_twim_transfer+0x234>
				msg_buf_used -= msgs[j].len;
   21640:	1aa9      	subs	r1, r5, r2
   21642:	b28d      	uxth	r5, r1
   21644:	f8da 000c 	ldr.w	r0, [sl, #12]
   21648:	fa1b f181 	uxtah	r1, fp, r1
   2164c:	f00c ff8b 	bl	2e566 <memcpy>
			while (msg_buf_used >= msgs[j].len) {
   21650:	f8da 2004 	ldr.w	r2, [sl, #4]
   21654:	4295      	cmp	r5, r2
   21656:	f1aa 0a0c 	sub.w	sl, sl, #12
   2165a:	d2f1      	bcs.n	21640 <i2c_nrfx_twim_transfer+0x224>
   2165c:	e7e9      	b.n	21632 <i2c_nrfx_twim_transfer+0x216>
			ret = -ENOTSUP;
   2165e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21662:	e748      	b.n	214f6 <i2c_nrfx_twim_transfer+0xda>
   21664:	0002f524 	.word	0x0002f524
   21668:	00033532 	.word	0x00033532
   2166c:	0bad0000 	.word	0x0bad0000
   21670:	000335c2 	.word	0x000335c2
   21674:	00033628 	.word	0x00033628
   21678:	00033652 	.word	0x00033652

0002167c <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
   2167c:	4802      	ldr	r0, [pc, #8]	; (21688 <pwm_nrfx_get_cycles_per_sec+0xc>)
   2167e:	2100      	movs	r1, #0
   21680:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
   21684:	2000      	movs	r0, #0
   21686:	4770      	bx	lr
   21688:	00f42400 	.word	0x00f42400

0002168c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2168c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2168e:	ab0a      	add	r3, sp, #40	; 0x28
   21690:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   21692:	9302      	str	r3, [sp, #8]
   21694:	4b05      	ldr	r3, [pc, #20]	; (216ac <z_log_msg2_runtime_create.constprop.0+0x20>)
   21696:	9301      	str	r3, [sp, #4]
   21698:	2300      	movs	r3, #0
   2169a:	9300      	str	r3, [sp, #0]
   2169c:	2201      	movs	r2, #1
   2169e:	4618      	mov	r0, r3
   216a0:	f7e5 fc06 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   216a4:	b007      	add	sp, #28
   216a6:	f85d fb04 	ldr.w	pc, [sp], #4
   216aa:	bf00      	nop
   216ac:	00033500 	.word	0x00033500

000216b0 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
   216b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   216b2:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config;
   216b4:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   216b6:	6922      	ldr	r2, [r4, #16]
   216b8:	f100 0308 	add.w	r3, r0, #8
   216bc:	3204      	adds	r2, #4
   216be:	f100 050c 	add.w	r5, r0, #12
   216c2:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
   216c4:	f913 6b01 	ldrsb.w	r6, [r3], #1
   216c8:	2e00      	cmp	r6, #0
   216ca:	bfb4      	ite	lt
   216cc:	2600      	movlt	r6, #0
   216ce:	f44f 4600 	movge.w	r6, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   216d2:	42ab      	cmp	r3, r5

		data->current[i] = value;
   216d4:	f822 6b02 	strh.w	r6, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
   216d8:	d1f4      	bne.n	216c4 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
   216da:	2300      	movs	r3, #0
   216dc:	461a      	mov	r2, r3
   216de:	f002 f9a3 	bl	23a28 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
   216e2:	4b0a      	ldr	r3, [pc, #40]	; (2170c <pwm_nrfx_init+0x5c>)
   216e4:	4298      	cmp	r0, r3
   216e6:	d00e      	beq.n	21706 <pwm_nrfx_init+0x56>
		LOG_ERR("Failed to initialize device: %s", dev->name);
   216e8:	6823      	ldr	r3, [r4, #0]
   216ea:	9302      	str	r3, [sp, #8]
   216ec:	4b08      	ldr	r3, [pc, #32]	; (21710 <pwm_nrfx_init+0x60>)
   216ee:	9301      	str	r3, [sp, #4]
   216f0:	2300      	movs	r3, #0
   216f2:	4618      	mov	r0, r3
   216f4:	4907      	ldr	r1, [pc, #28]	; (21714 <pwm_nrfx_init+0x64>)
   216f6:	9300      	str	r3, [sp, #0]
   216f8:	2201      	movs	r2, #1
   216fa:	f7ff ffc7 	bl	2168c <z_log_msg2_runtime_create.constprop.0>
   216fe:	f06f 000f 	mvn.w	r0, #15
		return -EBUSY;
	}

	return 0;
}
   21702:	b004      	add	sp, #16
   21704:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   21706:	2000      	movs	r0, #0
   21708:	e7fb      	b.n	21702 <pwm_nrfx_init+0x52>
   2170a:	bf00      	nop
   2170c:	0bad0000 	.word	0x0bad0000
   21710:	00033500 	.word	0x00033500
   21714:	0002f55c 	.word	0x0002f55c

00021718 <pwm_nrfx_pin_set>:
{
   21718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2171c:	b08b      	sub	sp, #44	; 0x2c
   2171e:	af00      	add	r7, sp, #0
	const struct pwm_nrfx_config *config = dev->config;
   21720:	f8d0 9004 	ldr.w	r9, [r0, #4]
{
   21724:	f897 4050 	ldrb.w	r4, [r7, #80]	; 0x50
	struct pwm_nrfx_data *data = dev->data;
   21728:	6906      	ldr	r6, [r0, #16]
{
   2172a:	4688      	mov	r8, r1
   2172c:	4615      	mov	r5, r2
   2172e:	469a      	mov	sl, r3
	if (flags) {
   21730:	2c00      	cmp	r4, #0
   21732:	f040 80a1 	bne.w	21878 <pwm_nrfx_pin_set+0x160>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   21736:	f109 0208 	add.w	r2, r9, #8
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
   2173a:	f812 3b01 	ldrb.w	r3, [r2], #1
   2173e:	2bff      	cmp	r3, #255	; 0xff
   21740:	d004      	beq.n	2174c <pwm_nrfx_pin_set+0x34>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
   21742:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   21746:	4598      	cmp	r8, r3
   21748:	f000 809c 	beq.w	21884 <pwm_nrfx_pin_set+0x16c>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
   2174c:	3401      	adds	r4, #1
   2174e:	b2e4      	uxtb	r4, r4
   21750:	2c04      	cmp	r4, #4
   21752:	d1f2      	bne.n	2173a <pwm_nrfx_pin_set+0x22>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   21754:	4b74      	ldr	r3, [pc, #464]	; (21928 <pwm_nrfx_pin_set+0x210>)
   21756:	e9c7 3808 	strd	r3, r8, [r7, #32]
   2175a:	e06c      	b.n	21836 <pwm_nrfx_pin_set+0x11e>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   2175c:	f04f 0b00 	mov.w	fp, #0
   21760:	e0a6      	b.n	218b0 <pwm_nrfx_pin_set+0x198>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   21762:	3301      	adds	r3, #1
   21764:	2b04      	cmp	r3, #4
   21766:	f040 80b3 	bne.w	218d0 <pwm_nrfx_pin_set+0x1b8>
   2176a:	462a      	mov	r2, r5
   2176c:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
   2176e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   21772:	b2d9      	uxtb	r1, r3
   21774:	d257      	bcs.n	21826 <pwm_nrfx_pin_set+0x10e>
			data->prescaler     = prescaler;
   21776:	73b1      	strb	r1, [r6, #14]
			nrf_pwm_configure(config->pwm.p_registers,
   21778:	f8d9 1000 	ldr.w	r1, [r9]
			data->period_cycles = period_cycles;
   2177c:	6035      	str	r5, [r6, #0]
			data->countertop    = (uint16_t)countertop;
   2177e:	81b2      	strh	r2, [r6, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
   21780:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    p_reg->MODE       = mode;
   21784:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   21788:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
   2178c:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   21790:	4555      	cmp	r5, sl
   21792:	462b      	mov	r3, r5
   21794:	bf28      	it	cs
   21796:	4653      	movcs	r3, sl
   21798:	607b      	str	r3, [r7, #4]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   2179a:	8893      	ldrh	r3, [r2, #4]
		| (pulse_cycles >> data->prescaler));
   2179c:	7bb1      	ldrb	r1, [r6, #14]
   2179e:	6878      	ldr	r0, [r7, #4]
	LOG_DBG("pin %u, pulse %u, period %u, prescaler: %u.",
   217a0:	f8c7 d000 	str.w	sp, [r7]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   217a4:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
		| (pulse_cycles >> data->prescaler));
   217a8:	40c8      	lsrs	r0, r1
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
   217aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
		| (pulse_cycles >> data->prescaler));
   217ae:	4303      	orrs	r3, r0
	LOG_DBG("pin %u, pulse %u, period %u, prescaler: %u.",
   217b0:	b08a      	sub	sp, #40	; 0x28
	data->current[channel] = (
   217b2:	8093      	strh	r3, [r2, #4]
	LOG_DBG("pin %u, pulse %u, period %u, prescaler: %u.",
   217b4:	466a      	mov	r2, sp
   217b6:	4b5d      	ldr	r3, [pc, #372]	; (2192c <pwm_nrfx_pin_set+0x214>)
   217b8:	6113      	str	r3, [r2, #16]
   217ba:	4b5d      	ldr	r3, [pc, #372]	; (21930 <pwm_nrfx_pin_set+0x218>)
   217bc:	6251      	str	r1, [r2, #36]	; 0x24
   217be:	e9c2 3805 	strd	r3, r8, [r2, #20]
   217c2:	687b      	ldr	r3, [r7, #4]
   217c4:	e9c2 3507 	strd	r3, r5, [r2, #28]
   217c8:	2307      	movs	r3, #7
   217ca:	f842 3f0c 	str.w	r3, [r2, #12]!
   217ce:	613b      	str	r3, [r7, #16]
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   217d0:	4858      	ldr	r0, [pc, #352]	; (21934 <pwm_nrfx_pin_set+0x21c>)
   217d2:	f44f 5164 	mov.w	r1, #14592	; 0x3900
   217d6:	2300      	movs	r3, #0
   217d8:	f007 f96a 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	if (!pwm_channel_is_active(channel, data)) {
   217dc:	4631      	mov	r1, r6
   217de:	f8d7 d000 	ldr.w	sp, [r7]
   217e2:	4620      	mov	r0, r4
   217e4:	f00b fc5b 	bl	2d09e <pwm_channel_is_active>
   217e8:	bbb0      	cbnz	r0, 21858 <pwm_nrfx_pin_set+0x140>
			config->initial_config.output_pins[channel]
   217ea:	eb09 0304 	add.w	r3, r9, r4
			&& !channel_inverted_state;
   217ee:	687a      	ldr	r2, [r7, #4]
   217f0:	f993 3008 	ldrsb.w	r3, [r3, #8]
		bool pulse_0_and_not_inverted =
   217f4:	f008 081f 	and.w	r8, r8, #31
			&& !channel_inverted_state;
   217f8:	2a00      	cmp	r2, #0
   217fa:	f040 808f 	bne.w	2191c <pwm_nrfx_pin_set+0x204>
			&& channel_inverted_state;
   217fe:	4555      	cmp	r5, sl
   21800:	f200 8081 	bhi.w	21906 <pwm_nrfx_pin_set+0x1ee>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21804:	2101      	movs	r1, #1
    p_reg->OUTCLR = clr_mask;
   21806:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2180a:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTCLR = clr_mask;
   2180e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   21812:	2200      	movs	r2, #0
   21814:	b2d0      	uxtb	r0, r2
		if (i != channel && pwm_channel_is_active(i, data)) {
   21816:	42a0      	cmp	r0, r4
   21818:	d016      	beq.n	21848 <pwm_nrfx_pin_set+0x130>
   2181a:	4631      	mov	r1, r6
   2181c:	f00b fc3f 	bl	2d09e <pwm_channel_is_active>
   21820:	b190      	cbz	r0, 21848 <pwm_nrfx_pin_set+0x130>
	return 0;
   21822:	2000      	movs	r0, #0
   21824:	e02a      	b.n	2187c <pwm_nrfx_pin_set+0x164>
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   21826:	3301      	adds	r3, #1
   21828:	2b08      	cmp	r3, #8
		countertop >>= 1;
   2182a:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
   2182e:	d19e      	bne.n	2176e <pwm_nrfx_pin_set+0x56>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
   21830:	4b41      	ldr	r3, [pc, #260]	; (21938 <pwm_nrfx_pin_set+0x220>)
   21832:	e9c7 3508 	strd	r3, r5, [r7, #32]
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
   21836:	2303      	movs	r3, #3
   21838:	60fb      	str	r3, [r7, #12]
   2183a:	61fb      	str	r3, [r7, #28]
   2183c:	2300      	movs	r3, #0
   2183e:	f107 021c 	add.w	r2, r7, #28
   21842:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21846:	e058      	b.n	218fa <pwm_nrfx_pin_set+0x1e2>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   21848:	3201      	adds	r2, #1
   2184a:	2a04      	cmp	r2, #4
   2184c:	d1e2      	bne.n	21814 <pwm_nrfx_pin_set+0xfc>
			nrfx_pwm_stop(&config->pwm, false);
   2184e:	2100      	movs	r1, #0
   21850:	4648      	mov	r0, r9
   21852:	f00c f826 	bl	2d8a2 <nrfx_pwm_stop>
   21856:	e7e4      	b.n	21822 <pwm_nrfx_pin_set+0x10a>
		if (was_stopped) {
   21858:	f1bb 0f00 	cmp.w	fp, #0
   2185c:	d0e1      	beq.n	21822 <pwm_nrfx_pin_set+0x10a>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
   2185e:	4648      	mov	r0, r9
   21860:	f002 f9b4 	bl	23bcc <nrfx_pwm_is_stopped>
   21864:	2800      	cmp	r0, #0
   21866:	d0fa      	beq.n	2185e <pwm_nrfx_pin_set+0x146>
			nrfx_pwm_simple_playback(&config->pwm,
   21868:	2302      	movs	r3, #2
   2186a:	2201      	movs	r2, #1
   2186c:	f109 0118 	add.w	r1, r9, #24
   21870:	4648      	mov	r0, r9
   21872:	f002 f96d 	bl	23b50 <nrfx_pwm_simple_playback>
   21876:	e7d4      	b.n	21822 <pwm_nrfx_pin_set+0x10a>
		return -ENOTSUP;
   21878:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2187c:	372c      	adds	r7, #44	; 0x2c
   2187e:	46bd      	mov	sp, r7
   21880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	was_stopped = !pwm_channel_is_active(channel, data) &&
   21884:	4631      	mov	r1, r6
   21886:	4620      	mov	r0, r4
   21888:	f00b fc09 	bl	2d09e <pwm_channel_is_active>
   2188c:	4602      	mov	r2, r0
   2188e:	2800      	cmp	r0, #0
   21890:	f47f af64 	bne.w	2175c <pwm_nrfx_pin_set+0x44>
   21894:	b2d0      	uxtb	r0, r2
		if (i != channel && pwm_channel_is_active(i, data)) {
   21896:	4284      	cmp	r4, r0
   21898:	d005      	beq.n	218a6 <pwm_nrfx_pin_set+0x18e>
   2189a:	4631      	mov	r1, r6
   2189c:	f00b fbff 	bl	2d09e <pwm_channel_is_active>
   218a0:	2800      	cmp	r0, #0
   218a2:	f47f af5b 	bne.w	2175c <pwm_nrfx_pin_set+0x44>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
   218a6:	3201      	adds	r2, #1
   218a8:	2a04      	cmp	r2, #4
   218aa:	d1f3      	bne.n	21894 <pwm_nrfx_pin_set+0x17c>
	was_stopped = !pwm_channel_is_active(channel, data) &&
   218ac:	f04f 0b01 	mov.w	fp, #1
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
   218b0:	f899 000e 	ldrb.w	r0, [r9, #14]
   218b4:	2801      	cmp	r0, #1
		period_cycles /= 2;
   218b6:	bf04      	itt	eq
   218b8:	086d      	lsreq	r5, r5, #1
		pulse_cycles /= 2;
   218ba:	ea4f 0a5a 	moveq.w	sl, sl, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
   218be:	2d00      	cmp	r5, #0
   218c0:	f43f af64 	beq.w	2178c <pwm_nrfx_pin_set+0x74>
   218c4:	6833      	ldr	r3, [r6, #0]
   218c6:	42ab      	cmp	r3, r5
   218c8:	f43f af60 	beq.w	2178c <pwm_nrfx_pin_set+0x74>
   218cc:	2300      	movs	r3, #0
				data->current[i]
   218ce:	1d31      	adds	r1, r6, #4
		if (i != channel) {
   218d0:	b2da      	uxtb	r2, r3
   218d2:	4294      	cmp	r4, r2
   218d4:	f43f af45 	beq.w	21762 <pwm_nrfx_pin_set+0x4a>
			uint16_t channel_pulse_cycle =
   218d8:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
   218dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
   218e0:	2a00      	cmp	r2, #0
   218e2:	f43f af3e 	beq.w	21762 <pwm_nrfx_pin_set+0x4a>
				LOG_ERR("Incompatible period.");
   218e6:	4b15      	ldr	r3, [pc, #84]	; (2193c <pwm_nrfx_pin_set+0x224>)
   218e8:	623b      	str	r3, [r7, #32]
   218ea:	2302      	movs	r3, #2
   218ec:	60fb      	str	r3, [r7, #12]
   218ee:	61fb      	str	r3, [r7, #28]
   218f0:	2300      	movs	r3, #0
   218f2:	f107 021c 	add.w	r2, r7, #28
   218f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   218fa:	480e      	ldr	r0, [pc, #56]	; (21934 <pwm_nrfx_pin_set+0x21c>)
   218fc:	f007 f8d8 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   21900:	f06f 0015 	mvn.w	r0, #21
   21904:	e7ba      	b.n	2187c <pwm_nrfx_pin_set+0x164>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
   21906:	2b00      	cmp	r3, #0
   21908:	f6bf af7c 	bge.w	21804 <pwm_nrfx_pin_set+0xec>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   2190c:	2101      	movs	r1, #1
    p_reg->OUTSET = set_mask;
   2190e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   21912:	fa01 f108 	lsl.w	r1, r1, r8
    p_reg->OUTSET = set_mask;
   21916:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   2191a:	e77a      	b.n	21812 <pwm_nrfx_pin_set+0xfa>
			&& channel_inverted_state;
   2191c:	4555      	cmp	r5, sl
   2191e:	d8f5      	bhi.n	2190c <pwm_nrfx_pin_set+0x1f4>
   21920:	2b00      	cmp	r3, #0
   21922:	f6ff af6f 	blt.w	21804 <pwm_nrfx_pin_set+0xec>
   21926:	e7f1      	b.n	2190c <pwm_nrfx_pin_set+0x1f4>
   21928:	000336fa 	.word	0x000336fa
   2192c:	000336ca 	.word	0x000336ca
   21930:	00033735 	.word	0x00033735
   21934:	0002f55c 	.word	0x0002f55c
   21938:	000336a0 	.word	0x000336a0
   2193c:	0003368b 	.word	0x0003368b

00021940 <ccs811_channel_get>:
{
	struct ccs811_data *drv_data = dev->data;
	const struct ccs811_result_type *rp = &drv_data->result;
	uint32_t uval;

	switch (chan) {
   21940:	391b      	subs	r1, #27
	struct ccs811_data *drv_data = dev->data;
   21942:	6903      	ldr	r3, [r0, #16]
	switch (chan) {
   21944:	2904      	cmp	r1, #4
   21946:	d820      	bhi.n	2198a <ccs811_channel_get+0x4a>
   21948:	e8df f001 	tbb	[pc, r1]
   2194c:	0a1f0803 	.word	0x0a1f0803
   21950:	19          	.byte	0x19
   21951:	00          	.byte	0x00
	case SENSOR_CHAN_CO2:
		val->val1 = rp->co2;
   21952:	8a1b      	ldrh	r3, [r3, #16]
		val->val2 = 0;

		break;
	case SENSOR_CHAN_VOC:
		val->val1 = rp->voc;
   21954:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   21956:	2000      	movs	r0, #0
   21958:	6050      	str	r0, [r2, #4]

		break;
   2195a:	4770      	bx	lr
		val->val1 = rp->voc;
   2195c:	8a5b      	ldrh	r3, [r3, #18]
   2195e:	e7f9      	b.n	21954 <ccs811_channel_get+0x14>
	case SENSOR_CHAN_VOLTAGE:
		/*
		 * Raw ADC readings are contained in least significant 10 bits
		 */
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   21960:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   21962:	480b      	ldr	r0, [pc, #44]	; (21990 <ccs811_channel_get+0x50>)
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   21964:	f240 614c 	movw	r1, #1612	; 0x64c
			>> CCS811_RAW_VOLTAGE_POS) * CCS811_RAW_VOLTAGE_SCALE;
   21968:	f3c3 0309 	ubfx	r3, r3, #0, #10
		uval = ((rp->raw & CCS811_RAW_VOLTAGE_MSK)
   2196c:	434b      	muls	r3, r1
		val->val1 = uval / 1000000U;
   2196e:	fbb3 f1f0 	udiv	r1, r3, r0
		val->val2 = uval % 1000000;
   21972:	fb00 3311 	mls	r3, r0, r1, r3
		val->val1 = uval / 1000000U;
   21976:	6011      	str	r1, [r2, #0]
		val->val2 = uval % 1000000;
   21978:	6053      	str	r3, [r2, #4]
		break;
	default:
		return -ENOTSUP;
	}

	return 0;
   2197a:	2000      	movs	r0, #0
		break;
   2197c:	4770      	bx	lr
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   2197e:	8a9b      	ldrh	r3, [r3, #20]
		val->val1 = uval / 1000000U;
   21980:	2000      	movs	r0, #0
			>> CCS811_RAW_CURRENT_POS) * CCS811_RAW_CURRENT_SCALE;
   21982:	0a9b      	lsrs	r3, r3, #10
		val->val2 = uval % 1000000;
   21984:	e9c2 0300 	strd	r0, r3, [r2]
		break;
   21988:	4770      	bx	lr
	switch (chan) {
   2198a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2198e:	4770      	bx	lr
   21990:	000f4240 	.word	0x000f4240

00021994 <fetch_status>:
{
   21994:	b530      	push	{r4, r5, lr}
   21996:	b089      	sub	sp, #36	; 0x24
   21998:	2300      	movs	r3, #0
   2199a:	f88d 3008 	strb.w	r3, [sp, #8]
	return i2c_write_read(dev, dev_addr,
   2199e:	f10d 0202 	add.w	r2, sp, #2
   219a2:	2301      	movs	r3, #1
   219a4:	a902      	add	r1, sp, #8
   219a6:	4605      	mov	r5, r0
   219a8:	f00b fb97 	bl	2d0da <i2c_write_read.constprop.0>
	if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   219ac:	2800      	cmp	r0, #0
   219ae:	da0f      	bge.n	219d0 <fetch_status+0x3c>
		LOG_ERR("Failed to read Status register");
   219b0:	4b13      	ldr	r3, [pc, #76]	; (21a00 <fetch_status+0x6c>)
			LOG_ERR("Failed to read ERROR_ID register");
   219b2:	9306      	str	r3, [sp, #24]
   219b4:	4813      	ldr	r0, [pc, #76]	; (21a04 <fetch_status+0x70>)
   219b6:	2302      	movs	r3, #2
   219b8:	aa05      	add	r2, sp, #20
   219ba:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			return -EIO;
   219be:	f06f 0404 	mvn.w	r4, #4
			LOG_ERR("Failed to read ERROR_ID register");
   219c2:	9301      	str	r3, [sp, #4]
   219c4:	9305      	str	r3, [sp, #20]
   219c6:	f00b fb76 	bl	2d0b6 <z_log_msg2_static_create.constprop.0>
}
   219ca:	4620      	mov	r0, r4
   219cc:	b009      	add	sp, #36	; 0x24
   219ce:	bd30      	pop	{r4, r5, pc}
	rv = status;
   219d0:	f89d 4002 	ldrb.w	r4, [sp, #2]
	if (status & CCS811_STATUS_ERROR) {
   219d4:	07e3      	lsls	r3, r4, #31
   219d6:	d5f8      	bpl.n	219ca <fetch_status+0x36>
		if (i2c_reg_read_byte(i2c, DT_INST_REG_ADDR(0),
   219d8:	23e0      	movs	r3, #224	; 0xe0
   219da:	f88d 3008 	strb.w	r3, [sp, #8]
   219de:	f10d 0203 	add.w	r2, sp, #3
   219e2:	2301      	movs	r3, #1
   219e4:	a902      	add	r1, sp, #8
   219e6:	4628      	mov	r0, r5
   219e8:	f00b fb77 	bl	2d0da <i2c_write_read.constprop.0>
   219ec:	2800      	cmp	r0, #0
   219ee:	da01      	bge.n	219f4 <fetch_status+0x60>
			LOG_ERR("Failed to read ERROR_ID register");
   219f0:	4b05      	ldr	r3, [pc, #20]	; (21a08 <fetch_status+0x74>)
   219f2:	e7de      	b.n	219b2 <fetch_status+0x1e>
		rv |= (error_id << 8);
   219f4:	f89d 3003 	ldrb.w	r3, [sp, #3]
   219f8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
   219fc:	e7e5      	b.n	219ca <fetch_status+0x36>
   219fe:	bf00      	nop
   21a00:	00033746 	.word	0x00033746
   21a04:	0002f3bc 	.word	0x0002f3bc
   21a08:	00033765 	.word	0x00033765

00021a0c <ccs811_init>:
}

#endif /* CONFIG_CCS811_TRIGGER */

static int ccs811_init(const struct device *dev)
{
   21a0c:	b570      	push	{r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   21a0e:	6905      	ldr	r5, [r0, #16]
{
   21a10:	b08c      	sub	sp, #48	; 0x30
	int status;
	uint16_t fw_ver;
	uint8_t cmd;
	uint8_t hw_id;

	*drv_data = (struct ccs811_data){ 0 };
   21a12:	221c      	movs	r2, #28
   21a14:	2100      	movs	r1, #0
   21a16:	4628      	mov	r0, r5
   21a18:	f00c fdc6 	bl	2e5a8 <memset>
   21a1c:	4c80      	ldr	r4, [pc, #512]	; (21c20 <ccs811_init+0x214>)
   21a1e:	4620      	mov	r0, r4
   21a20:	f002 fd06 	bl	24430 <z_impl_device_get_binding>
   21a24:	4603      	mov	r3, r0
	drv_data->i2c = device_get_binding(DT_INST_BUS_LABEL(0));
   21a26:	6028      	str	r0, [r5, #0]
	if (drv_data->i2c == NULL) {
   21a28:	b960      	cbnz	r0, 21a44 <ccs811_init+0x38>
		LOG_ERR("Failed to get pointer to %s device!",
   21a2a:	4a7e      	ldr	r2, [pc, #504]	; (21c24 <ccs811_init+0x218>)
   21a2c:	9402      	str	r4, [sp, #8]
#endif

#if DT_INST_NODE_HAS_PROP(0, irq_gpios)
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
	if (drv_data->irq_gpio == NULL) {
		LOG_ERR("Failed to get pointer to INT device: %s",
   21a2e:	e9cd 3200 	strd	r3, r2, [sp]
   21a32:	497d      	ldr	r1, [pc, #500]	; (21c28 <ccs811_init+0x21c>)
   21a34:	2201      	movs	r2, #1
   21a36:	f00b fb41 	bl	2d0bc <z_log_msg2_runtime_create.constprop.0>
			DT_INST_GPIO_LABEL(0, irq_gpios));
		return -EINVAL;
   21a3a:	f06f 0415 	mvn.w	r4, #21
#endif

out:
	set_wake(drv_data, false);
	return ret;
}
   21a3e:	4620      	mov	r0, r4
   21a40:	b00c      	add	sp, #48	; 0x30
   21a42:	bd70      	pop	{r4, r5, r6, pc}
   21a44:	4c79      	ldr	r4, [pc, #484]	; (21c2c <ccs811_init+0x220>)
   21a46:	4620      	mov	r0, r4
   21a48:	f002 fcf2 	bl	24430 <z_impl_device_get_binding>
   21a4c:	4603      	mov	r3, r0
	drv_data->wake_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, wake_gpios));
   21a4e:	60e8      	str	r0, [r5, #12]
	if (drv_data->wake_gpio == NULL) {
   21a50:	b910      	cbnz	r0, 21a58 <ccs811_init+0x4c>
		LOG_ERR("Failed to get pointer to WAKE device: %s",
   21a52:	4a77      	ldr	r2, [pc, #476]	; (21c30 <ccs811_init+0x224>)
   21a54:	9402      	str	r4, [sp, #8]
   21a56:	e7ea      	b.n	21a2e <ccs811_init+0x22>
	struct gpio_driver_data *data =
   21a58:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   21a5a:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21a5c:	6813      	ldr	r3, [r2, #0]
   21a5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   21a62:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   21a64:	680b      	ldr	r3, [r1, #0]
   21a66:	f640 2201 	movw	r2, #2561	; 0xa01
   21a6a:	210c      	movs	r1, #12
   21a6c:	4798      	blx	r3
	set_wake(drv_data, true);
   21a6e:	68e8      	ldr	r0, [r5, #12]
   21a70:	2101      	movs	r1, #1
   21a72:	f00b fb75 	bl	2d160 <set_wake.isra.0>
	k_msleep(1);
   21a76:	2001      	movs	r0, #1
   21a78:	f00b fb54 	bl	2d124 <k_msleep.isra.0>
   21a7c:	4620      	mov	r0, r4
   21a7e:	f002 fcd7 	bl	24430 <z_impl_device_get_binding>
   21a82:	4603      	mov	r3, r0
	drv_data->reset_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, reset_gpios));
   21a84:	60a8      	str	r0, [r5, #8]
	if (drv_data->reset_gpio == NULL) {
   21a86:	b910      	cbnz	r0, 21a8e <ccs811_init+0x82>
		LOG_ERR("Failed to get pointer to RESET device: %s",
   21a88:	4a6a      	ldr	r2, [pc, #424]	; (21c34 <ccs811_init+0x228>)
   21a8a:	9402      	str	r4, [sp, #8]
   21a8c:	e7cf      	b.n	21a2e <ccs811_init+0x22>
	struct gpio_driver_data *data =
   21a8e:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
   21a90:	6881      	ldr	r1, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21a92:	6813      	ldr	r3, [r2, #0]
   21a94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   21a98:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
   21a9a:	680b      	ldr	r3, [r1, #0]
   21a9c:	f240 6201 	movw	r2, #1537	; 0x601
   21aa0:	210b      	movs	r1, #11
   21aa2:	4798      	blx	r3
	k_msleep(1);
   21aa4:	2001      	movs	r0, #1
   21aa6:	f00b fb3d 	bl	2d124 <k_msleep.isra.0>
   21aaa:	4c63      	ldr	r4, [pc, #396]	; (21c38 <ccs811_init+0x22c>)
   21aac:	4620      	mov	r0, r4
   21aae:	f002 fcbf 	bl	24430 <z_impl_device_get_binding>
   21ab2:	4603      	mov	r3, r0
	drv_data->irq_gpio = device_get_binding(DT_INST_GPIO_LABEL(0, irq_gpios));
   21ab4:	6068      	str	r0, [r5, #4]
	if (drv_data->irq_gpio == NULL) {
   21ab6:	b910      	cbnz	r0, 21abe <ccs811_init+0xb2>
		LOG_ERR("Failed to get pointer to INT device: %s",
   21ab8:	4a60      	ldr	r2, [pc, #384]	; (21c3c <ccs811_init+0x230>)
   21aba:	9402      	str	r4, [sp, #8]
   21abc:	e7b7      	b.n	21a2e <ccs811_init+0x22>
	k_msleep(20);            /* t_START assuming recent power-on */
   21abe:	2014      	movs	r0, #20
   21ac0:	f00b fb30 	bl	2d124 <k_msleep.isra.0>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 1);
   21ac4:	68a8      	ldr	r0, [r5, #8]
   21ac6:	2201      	movs	r2, #1
   21ac8:	210b      	movs	r1, #11
   21aca:	f00b fb1b 	bl	2d104 <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
   21ace:	200f      	movs	r0, #15
   21ad0:	f00c fb8e 	bl	2e1f0 <z_impl_k_busy_wait>
	gpio_pin_set(drv_data->reset_gpio, RESET_PIN, 0);
   21ad4:	2200      	movs	r2, #0
   21ad6:	210b      	movs	r1, #11
   21ad8:	68a8      	ldr	r0, [r5, #8]
   21ada:	f00b fb13 	bl	2d104 <gpio_pin_set.isra.0>
	k_msleep(2);             /* t_START after reset */
   21ade:	2002      	movs	r0, #2
   21ae0:	f00b fb20 	bl	2d124 <k_msleep.isra.0>
	ret = switch_to_app_mode(drv_data->i2c);
   21ae4:	682c      	ldr	r4, [r5, #0]
	status = fetch_status(i2c);
   21ae6:	4620      	mov	r0, r4
   21ae8:	f7ff ff54 	bl	21994 <fetch_status>
	if (status < 0) {
   21aec:	2800      	cmp	r0, #0
   21aee:	da02      	bge.n	21af6 <ccs811_init+0xea>
		ret = -EIO;
   21af0:	f06f 0404 	mvn.w	r4, #4
   21af4:	e00e      	b.n	21b14 <ccs811_init+0x108>
	if (!(status & CCS811_STATUS_APP_VALID)) {
   21af6:	06c1      	lsls	r1, r0, #27
   21af8:	d411      	bmi.n	21b1e <ccs811_init+0x112>
		LOG_ERR("No Application firmware loaded");
   21afa:	4b51      	ldr	r3, [pc, #324]	; (21c40 <ccs811_init+0x234>)
		LOG_ERR("Hardware ID mismatch!");
   21afc:	930a      	str	r3, [sp, #40]	; 0x28
   21afe:	2302      	movs	r3, #2
   21b00:	9305      	str	r3, [sp, #20]
   21b02:	9309      	str	r3, [sp, #36]	; 0x24
   21b04:	aa09      	add	r2, sp, #36	; 0x24
   21b06:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21b0a:	4847      	ldr	r0, [pc, #284]	; (21c28 <ccs811_init+0x21c>)
		ret = -EINVAL;
   21b0c:	f06f 0415 	mvn.w	r4, #21
		LOG_ERR("Hardware ID mismatch!");
   21b10:	f00b fad1 	bl	2d0b6 <z_log_msg2_static_create.constprop.0>
	set_wake(drv_data, false);
   21b14:	68e8      	ldr	r0, [r5, #12]
   21b16:	2100      	movs	r1, #0
   21b18:	f00b fb22 	bl	2d160 <set_wake.isra.0>
	return ret;
   21b1c:	e78f      	b.n	21a3e <ccs811_init+0x32>
	if (status & CCS811_STATUS_FW_MODE) {
   21b1e:	0602      	lsls	r2, r0, #24
   21b20:	d422      	bmi.n	21b68 <ccs811_init+0x15c>
	buf = CCS811_REG_APP_START;
   21b22:	23f4      	movs	r3, #244	; 0xf4
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   21b24:	2201      	movs	r2, #1
   21b26:	f10d 0112 	add.w	r1, sp, #18
   21b2a:	4620      	mov	r0, r4
	buf = CCS811_REG_APP_START;
   21b2c:	f88d 3012 	strb.w	r3, [sp, #18]
	if (i2c_write(i2c, &buf, 1, DT_INST_REG_ADDR(0)) < 0) {
   21b30:	f00b fb08 	bl	2d144 <i2c_write.constprop.0>
   21b34:	2800      	cmp	r0, #0
   21b36:	da0b      	bge.n	21b50 <ccs811_init+0x144>
		LOG_ERR("Failed to set Application mode");
   21b38:	4b42      	ldr	r3, [pc, #264]	; (21c44 <ccs811_init+0x238>)
		LOG_ERR("Failed to read Hardware ID register");
   21b3a:	930a      	str	r3, [sp, #40]	; 0x28
   21b3c:	483a      	ldr	r0, [pc, #232]	; (21c28 <ccs811_init+0x21c>)
   21b3e:	2302      	movs	r3, #2
   21b40:	aa09      	add	r2, sp, #36	; 0x24
   21b42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21b46:	9305      	str	r3, [sp, #20]
   21b48:	9309      	str	r3, [sp, #36]	; 0x24
   21b4a:	f00b fab4 	bl	2d0b6 <z_log_msg2_static_create.constprop.0>
		goto out;
   21b4e:	e7cf      	b.n	21af0 <ccs811_init+0xe4>
	k_msleep(1);             /* t_APP_START */
   21b50:	2001      	movs	r0, #1
   21b52:	f00b fae7 	bl	2d124 <k_msleep.isra.0>
	status = fetch_status(i2c);
   21b56:	4620      	mov	r0, r4
   21b58:	f7ff ff1c 	bl	21994 <fetch_status>
	if (status < 0) {
   21b5c:	2800      	cmp	r0, #0
   21b5e:	dbc7      	blt.n	21af0 <ccs811_init+0xe4>
	if (!(status & CCS811_STATUS_FW_MODE)) {
   21b60:	0603      	lsls	r3, r0, #24
   21b62:	d401      	bmi.n	21b68 <ccs811_init+0x15c>
		LOG_ERR("Failed to start Application firmware");
   21b64:	4b38      	ldr	r3, [pc, #224]	; (21c48 <ccs811_init+0x23c>)
   21b66:	e7c9      	b.n	21afc <ccs811_init+0xf0>
	if (i2c_reg_read_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   21b68:	2320      	movs	r3, #32
   21b6a:	6828      	ldr	r0, [r5, #0]
   21b6c:	f88d 3018 	strb.w	r3, [sp, #24]
   21b70:	f10d 0211 	add.w	r2, sp, #17
   21b74:	2301      	movs	r3, #1
   21b76:	a906      	add	r1, sp, #24
   21b78:	f00b faaf 	bl	2d0da <i2c_write_read.constprop.0>
   21b7c:	2800      	cmp	r0, #0
   21b7e:	da01      	bge.n	21b84 <ccs811_init+0x178>
		LOG_ERR("Failed to read Hardware ID register");
   21b80:	4b32      	ldr	r3, [pc, #200]	; (21c4c <ccs811_init+0x240>)
   21b82:	e7da      	b.n	21b3a <ccs811_init+0x12e>
	if (hw_id != CCS881_HW_ID) {
   21b84:	f89d 3011 	ldrb.w	r3, [sp, #17]
   21b88:	2b81      	cmp	r3, #129	; 0x81
   21b8a:	d001      	beq.n	21b90 <ccs811_init+0x184>
		LOG_ERR("Hardware ID mismatch!");
   21b8c:	4b30      	ldr	r3, [pc, #192]	; (21c50 <ccs811_init+0x244>)
   21b8e:	e7b5      	b.n	21afc <ccs811_init+0xf0>
	cmd = CCS811_REG_FW_APP_VERSION;
   21b90:	2324      	movs	r3, #36	; 0x24
   21b92:	f88d 3010 	strb.w	r3, [sp, #16]
	if (i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   21b96:	6828      	ldr	r0, [r5, #0]
   21b98:	2302      	movs	r3, #2
   21b9a:	f10d 0212 	add.w	r2, sp, #18
   21b9e:	a904      	add	r1, sp, #16
   21ba0:	f00b fa9b 	bl	2d0da <i2c_write_read.constprop.0>
   21ba4:	2800      	cmp	r0, #0
   21ba6:	da01      	bge.n	21bac <ccs811_init+0x1a0>
		LOG_ERR("Failed to read App Firmware Version register");
   21ba8:	4b2a      	ldr	r3, [pc, #168]	; (21c54 <ccs811_init+0x248>)
   21baa:	e7c6      	b.n	21b3a <ccs811_init+0x12e>
	fw_ver = sys_be16_to_cpu(fw_ver);
   21bac:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	LOG_INF("App FW %04x", fw_ver);
   21bb0:	481d      	ldr	r0, [pc, #116]	; (21c28 <ccs811_init+0x21c>)
   21bb2:	ba5b      	rev16	r3, r3
   21bb4:	b29a      	uxth	r2, r3
	fw_ver = sys_be16_to_cpu(fw_ver);
   21bb6:	f8ad 3012 	strh.w	r3, [sp, #18]
	LOG_INF("App FW %04x", fw_ver);
   21bba:	4b27      	ldr	r3, [pc, #156]	; (21c58 <ccs811_init+0x24c>)
   21bbc:	2603      	movs	r6, #3
   21bbe:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   21bc2:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
   21bc6:	aa09      	add	r2, sp, #36	; 0x24
   21bc8:	9605      	str	r6, [sp, #20]
   21bca:	9609      	str	r6, [sp, #36]	; 0x24
   21bcc:	f00b fa73 	bl	2d0b6 <z_log_msg2_static_create.constprop.0>
	drv_data->app_fw_ver = fw_ver >> 8U;
   21bd0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   21bd4:	6828      	ldr	r0, [r5, #0]
	drv_data->app_fw_ver = fw_ver >> 8U;
   21bd6:	0a1b      	lsrs	r3, r3, #8
   21bd8:	766b      	strb	r3, [r5, #25]
	uint8_t tx_buf[2] = {reg_addr, value};
   21bda:	2410      	movs	r4, #16
   21bdc:	2301      	movs	r3, #1
	return i2c_write(dev, tx_buf, 2, dev_addr);
   21bde:	2202      	movs	r2, #2
   21be0:	a906      	add	r1, sp, #24
	uint8_t tx_buf[2] = {reg_addr, value};
   21be2:	f88d 3018 	strb.w	r3, [sp, #24]
   21be6:	f88d 4019 	strb.w	r4, [sp, #25]
	return i2c_write(dev, tx_buf, 2, dev_addr);
   21bea:	f00b faab 	bl	2d144 <i2c_write.constprop.0>
	if (i2c_reg_write_byte(drv_data->i2c, DT_INST_REG_ADDR(0),
   21bee:	2800      	cmp	r0, #0
   21bf0:	da01      	bge.n	21bf6 <ccs811_init+0x1ea>
		LOG_ERR("Failed to set Measurement mode");
   21bf2:	4b1a      	ldr	r3, [pc, #104]	; (21c5c <ccs811_init+0x250>)
   21bf4:	e7a1      	b.n	21b3a <ccs811_init+0x12e>
	status = fetch_status(drv_data->i2c);
   21bf6:	6828      	ldr	r0, [r5, #0]
	drv_data->mode = meas_mode;
   21bf8:	762c      	strb	r4, [r5, #24]
	status = fetch_status(drv_data->i2c);
   21bfa:	f7ff fecb 	bl	21994 <fetch_status>
	if (status < 0) {
   21bfe:	2800      	cmp	r0, #0
   21c00:	f6ff af76 	blt.w	21af0 <ccs811_init+0xe4>
	if (status & CCS811_STATUS_ERROR) {
   21c04:	f010 0401 	ands.w	r4, r0, #1
   21c08:	d084      	beq.n	21b14 <ccs811_init+0x108>
		LOG_ERR("CCS811 Error %02x during sensor configuration",
   21c0a:	4b15      	ldr	r3, [pc, #84]	; (21c60 <ccs811_init+0x254>)
   21c0c:	930a      	str	r3, [sp, #40]	; 0x28
   21c0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
   21c12:	900b      	str	r0, [sp, #44]	; 0x2c
   21c14:	9605      	str	r6, [sp, #20]
   21c16:	9609      	str	r6, [sp, #36]	; 0x24
   21c18:	aa09      	add	r2, sp, #36	; 0x24
   21c1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   21c1e:	e774      	b.n	21b0a <ccs811_init+0xfe>
   21c20:	000334ee 	.word	0x000334ee
   21c24:	00033786 	.word	0x00033786
   21c28:	0002f3bc 	.word	0x0002f3bc
   21c2c:	00031814 	.word	0x00031814
   21c30:	000337aa 	.word	0x000337aa
   21c34:	000337d3 	.word	0x000337d3
   21c38:	00031ef6 	.word	0x00031ef6
   21c3c:	000337fd 	.word	0x000337fd
   21c40:	00033825 	.word	0x00033825
   21c44:	00033844 	.word	0x00033844
   21c48:	00033863 	.word	0x00033863
   21c4c:	00033888 	.word	0x00033888
   21c50:	000338ac 	.word	0x000338ac
   21c54:	000338c2 	.word	0x000338c2
   21c58:	000338ef 	.word	0x000338ef
   21c5c:	000338fb 	.word	0x000338fb
   21c60:	0003391a 	.word	0x0003391a

00021c64 <ccs811_configver_fetch>:
{
   21c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c68:	b082      	sub	sp, #8
	struct ccs811_data *drv_data = dev->data;
   21c6a:	6906      	ldr	r6, [r0, #16]
{
   21c6c:	af00      	add	r7, sp, #0
	if (!ptr) {
   21c6e:	460d      	mov	r5, r1
   21c70:	2900      	cmp	r1, #0
   21c72:	d04a      	beq.n	21d0a <ccs811_configver_fetch+0xa6>
	set_wake(drv_data, true);
   21c74:	68f0      	ldr	r0, [r6, #12]
   21c76:	2101      	movs	r1, #1
   21c78:	f00b fa72 	bl	2d160 <set_wake.isra.0>
	cmd = CCS811_REG_HW_VERSION;
   21c7c:	2321      	movs	r3, #33	; 0x21
   21c7e:	70fb      	strb	r3, [r7, #3]
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   21c80:	6830      	ldr	r0, [r6, #0]
   21c82:	2301      	movs	r3, #1
   21c84:	1d2a      	adds	r2, r5, #4
   21c86:	1cf9      	adds	r1, r7, #3
   21c88:	f00b fa27 	bl	2d0da <i2c_write_read.constprop.0>
	if (rc == 0) {
   21c8c:	4604      	mov	r4, r0
   21c8e:	bb78      	cbnz	r0, 21cf0 <ccs811_configver_fetch+0x8c>
		cmd = CCS811_REG_FW_BOOT_VERSION;
   21c90:	2323      	movs	r3, #35	; 0x23
   21c92:	70fb      	strb	r3, [r7, #3]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   21c94:	6830      	ldr	r0, [r6, #0]
   21c96:	2302      	movs	r3, #2
   21c98:	462a      	mov	r2, r5
   21c9a:	1cf9      	adds	r1, r7, #3
   21c9c:	f00b fa1d 	bl	2d0da <i2c_write_read.constprop.0>
		ptr->fw_boot_version = sys_be16_to_cpu(ptr->fw_boot_version);
   21ca0:	882b      	ldrh	r3, [r5, #0]
   21ca2:	ba5b      	rev16	r3, r3
   21ca4:	802b      	strh	r3, [r5, #0]
	if (rc == 0) {
   21ca6:	4604      	mov	r4, r0
   21ca8:	bb10      	cbnz	r0, 21cf0 <ccs811_configver_fetch+0x8c>
		cmd = CCS811_REG_FW_APP_VERSION;
   21caa:	2324      	movs	r3, #36	; 0x24
   21cac:	70fb      	strb	r3, [r7, #3]
		rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   21cae:	2302      	movs	r3, #2
   21cb0:	18ea      	adds	r2, r5, r3
   21cb2:	1cf9      	adds	r1, r7, #3
   21cb4:	6830      	ldr	r0, [r6, #0]
   21cb6:	f00b fa10 	bl	2d0da <i2c_write_read.constprop.0>
		ptr->fw_app_version = sys_be16_to_cpu(ptr->fw_app_version);
   21cba:	886b      	ldrh	r3, [r5, #2]
   21cbc:	ba5b      	rev16	r3, r3
   21cbe:	b299      	uxth	r1, r3
   21cc0:	806b      	strh	r3, [r5, #2]
	if (rc == 0) {
   21cc2:	4604      	mov	r4, r0
   21cc4:	b9a0      	cbnz	r0, 21cf0 <ccs811_configver_fetch+0x8c>
		LOG_INF("HW %x FW %x APP %x",
   21cc6:	882b      	ldrh	r3, [r5, #0]
   21cc8:	7928      	ldrb	r0, [r5, #4]
   21cca:	f8df c044 	ldr.w	ip, [pc, #68]	; 21d10 <ccs811_configver_fetch+0xac>
   21cce:	46e8      	mov	r8, sp
   21cd0:	b088      	sub	sp, #32
   21cd2:	466a      	mov	r2, sp
   21cd4:	e9c2 3106 	strd	r3, r1, [r2, #24]
   21cd8:	2305      	movs	r3, #5
   21cda:	e9c2 c004 	strd	ip, r0, [r2, #16]
   21cde:	f44f 5123 	mov.w	r1, #10432	; 0x28c0
   21ce2:	f842 3f0c 	str.w	r3, [r2, #12]!
   21ce6:	480b      	ldr	r0, [pc, #44]	; (21d14 <ccs811_configver_fetch+0xb0>)
   21ce8:	607b      	str	r3, [r7, #4]
   21cea:	f00b f9e4 	bl	2d0b6 <z_log_msg2_static_create.constprop.0>
   21cee:	46c5      	mov	sp, r8
	set_wake(drv_data, false);
   21cf0:	68f0      	ldr	r0, [r6, #12]
   21cf2:	2100      	movs	r1, #0
   21cf4:	f00b fa34 	bl	2d160 <set_wake.isra.0>
	ptr->mode = drv_data->mode & CCS811_MODE_MSK;
   21cf8:	7e33      	ldrb	r3, [r6, #24]
   21cfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
   21cfe:	716b      	strb	r3, [r5, #5]
}
   21d00:	4620      	mov	r0, r4
   21d02:	3708      	adds	r7, #8
   21d04:	46bd      	mov	sp, r7
   21d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   21d0a:	f06f 0415 	mvn.w	r4, #21
   21d0e:	e7f7      	b.n	21d00 <ccs811_configver_fetch+0x9c>
   21d10:	00033948 	.word	0x00033948
   21d14:	0002f3bc 	.word	0x0002f3bc

00021d18 <hts221_channel_get>:

	/*
	 * see "Interpreting humidity and temperature readings" document
	 * for more details
	 */
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   21d18:	290d      	cmp	r1, #13
{
   21d1a:	b570      	push	{r4, r5, r6, lr}
	struct hts221_data *data = dev->data;
   21d1c:	6900      	ldr	r0, [r0, #16]
	if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   21d1e:	d120      	bne.n	21d62 <hts221_channel_get+0x4a>
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   21d20:	88c5      	ldrh	r5, [r0, #6]
			   (data->t_sample - data->t0_out) /
   21d22:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   21d26:	8903      	ldrh	r3, [r0, #8]
			   (data->t_sample - data->t0_out) /
   21d28:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
			   (data->t1_out - data->t0_out) +
   21d2c:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   21d30:	1b5b      	subs	r3, r3, r5
			   (data->t_sample - data->t0_out) /
   21d32:	1ba4      	subs	r4, r4, r6
			   (data->t1_out - data->t0_out) +
   21d34:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   21d36:	4363      	muls	r3, r4
			   (data->t_sample - data->t0_out) /
   21d38:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->t1_degc_x8 - data->t0_degc_x8) *
   21d3c:	442b      	add	r3, r5
			   data->t0_degc_x8;

		/* convert temperature x8 to degrees Celsius */
		val->val1 = conv_val / 8;
   21d3e:	2b00      	cmp	r3, #0
   21d40:	4619      	mov	r1, r3
   21d42:	bfb8      	it	lt
   21d44:	1dd9      	addlt	r1, r3, #7
   21d46:	10c9      	asrs	r1, r1, #3
   21d48:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 8) * (1000000 / 8);
   21d4a:	4259      	negs	r1, r3
   21d4c:	f001 0107 	and.w	r1, r1, #7
   21d50:	f003 0307 	and.w	r3, r3, #7
   21d54:	bf58      	it	pl
   21d56:	424b      	negpl	r3, r1
   21d58:	4911      	ldr	r1, [pc, #68]	; (21da0 <hts221_channel_get+0x88>)
			   (data->h1_t0_out - data->h0_t0_out) +
			   data->h0_rh_x2;

		/* convert humidity x2 to percent */
		val->val1 = conv_val / 2;
		val->val2 = (conv_val % 2) * 500000;
   21d5a:	434b      	muls	r3, r1
   21d5c:	6053      	str	r3, [r2, #4]
	} else {
		return -ENOTSUP;
	}

	return 0;
   21d5e:	2000      	movs	r0, #0
}
   21d60:	bd70      	pop	{r4, r5, r6, pc}
	} else if (chan == SENSOR_CHAN_HUMIDITY) {
   21d62:	2910      	cmp	r1, #16
   21d64:	d119      	bne.n	21d9a <hts221_channel_get+0x82>
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   21d66:	7905      	ldrb	r5, [r0, #4]
			   (data->rh_sample - data->h0_t0_out) /
   21d68:	f9b0 600a 	ldrsh.w	r6, [r0, #10]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   21d6c:	7943      	ldrb	r3, [r0, #5]
			   (data->rh_sample - data->h0_t0_out) /
   21d6e:	f9b0 4000 	ldrsh.w	r4, [r0]
			   (data->h1_t0_out - data->h0_t0_out) +
   21d72:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   21d76:	1b5b      	subs	r3, r3, r5
			   (data->rh_sample - data->h0_t0_out) /
   21d78:	1ba4      	subs	r4, r4, r6
			   (data->h1_t0_out - data->h0_t0_out) +
   21d7a:	1b89      	subs	r1, r1, r6
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   21d7c:	4363      	muls	r3, r4
			   (data->rh_sample - data->h0_t0_out) /
   21d7e:	fb93 f3f1 	sdiv	r3, r3, r1
		conv_val = (int32_t)(data->h1_rh_x2 - data->h0_rh_x2) *
   21d82:	442b      	add	r3, r5
		val->val1 = conv_val / 2;
   21d84:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
   21d88:	1049      	asrs	r1, r1, #1
		val->val2 = (conv_val % 2) * 500000;
   21d8a:	2b00      	cmp	r3, #0
   21d8c:	f003 0301 	and.w	r3, r3, #1
		val->val1 = conv_val / 2;
   21d90:	6011      	str	r1, [r2, #0]
		val->val2 = (conv_val % 2) * 500000;
   21d92:	bfb8      	it	lt
   21d94:	425b      	neglt	r3, r3
   21d96:	4903      	ldr	r1, [pc, #12]	; (21da4 <hts221_channel_get+0x8c>)
   21d98:	e7df      	b.n	21d5a <hts221_channel_get+0x42>
		return -ENOTSUP;
   21d9a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21d9e:	e7df      	b.n	21d60 <hts221_channel_get+0x48>
   21da0:	0001e848 	.word	0x0001e848
   21da4:	0007a120 	.word	0x0007a120

00021da8 <hts221_sample_fetch>:

static int hts221_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   21da8:	b530      	push	{r4, r5, lr}
   21daa:	b089      	sub	sp, #36	; 0x24
	struct hts221_data *data = dev->data;
   21dac:	6905      	ldr	r5, [r0, #16]
	uint8_t buf[4];
	int status;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	status = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L |
   21dae:	6840      	ldr	r0, [r0, #4]
   21db0:	2304      	movs	r3, #4
   21db2:	466a      	mov	r2, sp
   21db4:	21a8      	movs	r1, #168	; 0xa8
   21db6:	f006 fe9b 	bl	28af0 <hts221_read_reg>
				 HTS221_AUTOINCREMENT_ADDR, buf, 4);
	if (status < 0) {
   21dba:	1e04      	subs	r4, r0, #0
   21dbc:	da0e      	bge.n	21ddc <hts221_sample_fetch+0x34>
		LOG_ERR("Failed to fetch data sample.");
   21dbe:	4b0b      	ldr	r3, [pc, #44]	; (21dec <hts221_sample_fetch+0x44>)
   21dc0:	9306      	str	r3, [sp, #24]
   21dc2:	2302      	movs	r3, #2
   21dc4:	9301      	str	r3, [sp, #4]
   21dc6:	9305      	str	r3, [sp, #20]
   21dc8:	4809      	ldr	r0, [pc, #36]	; (21df0 <hts221_sample_fetch+0x48>)
   21dca:	2300      	movs	r3, #0
   21dcc:	aa05      	add	r2, sp, #20
   21dce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21dd2:	f006 fe6d 	bl	28ab0 <z_impl_z_log_msg2_static_create>

	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));

	return 0;
}
   21dd6:	4620      	mov	r0, r4
   21dd8:	b009      	add	sp, #36	; 0x24
   21dda:	bd30      	pop	{r4, r5, pc}
	data->rh_sample = sys_le16_to_cpu(buf[0] | (buf[1] << 8));
   21ddc:	f8bd 3000 	ldrh.w	r3, [sp]
   21de0:	802b      	strh	r3, [r5, #0]
	data->t_sample = sys_le16_to_cpu(buf[2] | (buf[3] << 8));
   21de2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   21de6:	806b      	strh	r3, [r5, #2]
	return 0;
   21de8:	2400      	movs	r4, #0
   21dea:	e7f4      	b.n	21dd6 <hts221_sample_fetch+0x2e>
   21dec:	0003395b 	.word	0x0003395b
   21df0:	0002f3c4 	.word	0x0002f3c4

00021df4 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   21df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   21df6:	ab0a      	add	r3, sp, #40	; 0x28
   21df8:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   21dfa:	9302      	str	r3, [sp, #8]
   21dfc:	4b05      	ldr	r3, [pc, #20]	; (21e14 <z_log_msg2_runtime_create.constprop.0+0x20>)
   21dfe:	9301      	str	r3, [sp, #4]
   21e00:	2300      	movs	r3, #0
   21e02:	9300      	str	r3, [sp, #0]
   21e04:	2201      	movs	r2, #1
   21e06:	4618      	mov	r0, r3
   21e08:	f7e5 f852 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   21e0c:	b007      	add	sp, #28
   21e0e:	f85d fb04 	ldr.w	pc, [sp], #4
   21e12:	bf00      	nop
   21e14:	00033978 	.word	0x00033978

00021e18 <hts221_init>:
	.sample_fetch = hts221_sample_fetch,
	.channel_get = hts221_channel_get,
};

int hts221_init(const struct device *dev)
{
   21e18:	b570      	push	{r4, r5, r6, lr}
	const struct hts221_config *cfg = dev->config;
	stmdev_ctx_t *ctx = (stmdev_ctx_t *)&cfg->ctx;
   21e1a:	6845      	ldr	r5, [r0, #4]
{
   21e1c:	b090      	sub	sp, #64	; 0x40
   21e1e:	4606      	mov	r6, r0
	uint8_t id, idx;
	int status;

	/* check chip ID */

	status = hts221_device_id_get(ctx, &id);
   21e20:	f10d 0113 	add.w	r1, sp, #19
   21e24:	4628      	mov	r0, r5
   21e26:	f006 fe9d 	bl	28b64 <hts221_device_id_get>
	if (status < 0) {
   21e2a:	1e04      	subs	r4, r0, #0
   21e2c:	da0c      	bge.n	21e48 <hts221_init+0x30>
		LOG_ERR("Failed to read chip ID.");
   21e2e:	4b55      	ldr	r3, [pc, #340]	; (21f84 <hts221_init+0x16c>)
		return status;
	}

	status = hts221_power_on_set(ctx, 1);
	if (status < 0) {
		LOG_ERR("Could not set PD bit");
   21e30:	930e      	str	r3, [sp, #56]	; 0x38
   21e32:	2302      	movs	r3, #2
   21e34:	9306      	str	r3, [sp, #24]
   21e36:	930d      	str	r3, [sp, #52]	; 0x34
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   21e38:	4853      	ldr	r0, [pc, #332]	; (21f88 <hts221_init+0x170>)
   21e3a:	2300      	movs	r3, #0
   21e3c:	aa0d      	add	r2, sp, #52	; 0x34
   21e3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21e42:	f006 fe35 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	k_sleep(K_MSEC(3));

	status = hts221_read_conversion_data(dev);
	if (status < 0) {
		LOG_ERR("Failed to read conversion data.");
		return status;
   21e46:	e011      	b.n	21e6c <hts221_init+0x54>
	if (id != HTS221_ID) {
   21e48:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21e4c:	2bbc      	cmp	r3, #188	; 0xbc
   21e4e:	d010      	beq.n	21e72 <hts221_init+0x5a>
		LOG_ERR("Invalid chip ID.");
   21e50:	4b4e      	ldr	r3, [pc, #312]	; (21f8c <hts221_init+0x174>)
   21e52:	930e      	str	r3, [sp, #56]	; 0x38
   21e54:	2302      	movs	r3, #2
   21e56:	9306      	str	r3, [sp, #24]
   21e58:	930d      	str	r3, [sp, #52]	; 0x34
   21e5a:	484b      	ldr	r0, [pc, #300]	; (21f88 <hts221_init+0x170>)
   21e5c:	2300      	movs	r3, #0
   21e5e:	aa0d      	add	r2, sp, #52	; 0x34
   21e60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21e64:	f006 fe24 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		return -EINVAL;
   21e68:	f06f 0415 	mvn.w	r4, #21
#else
	LOG_INF("Cannot enable trigger without drdy-gpios");
#endif

	return 0;
}
   21e6c:	4620      	mov	r0, r4
   21e6e:	b010      	add	sp, #64	; 0x40
   21e70:	bd70      	pop	{r4, r5, r6, pc}
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   21e72:	4c47      	ldr	r4, [pc, #284]	; (21f90 <hts221_init+0x178>)
   21e74:	4621      	mov	r1, r4
   21e76:	4620      	mov	r0, r4
   21e78:	f7df f901 	bl	107e <strcmp>
   21e7c:	2800      	cmp	r0, #0
   21e7e:	d074      	beq.n	21f6a <hts221_init+0x152>
   21e80:	4844      	ldr	r0, [pc, #272]	; (21f94 <hts221_init+0x17c>)
   21e82:	4621      	mov	r1, r4
   21e84:	f7df f8fb 	bl	107e <strcmp>
   21e88:	2800      	cmp	r0, #0
   21e8a:	d06d      	beq.n	21f68 <hts221_init+0x150>
   21e8c:	4842      	ldr	r0, [pc, #264]	; (21f98 <hts221_init+0x180>)
   21e8e:	4621      	mov	r1, r4
   21e90:	f7df f8f5 	bl	107e <strcmp>
   21e94:	2800      	cmp	r0, #0
   21e96:	d073      	beq.n	21f80 <hts221_init+0x168>
		LOG_ERR("Invalid ODR value %s.", CONFIG_HTS221_ODR);
   21e98:	4b40      	ldr	r3, [pc, #256]	; (21f9c <hts221_init+0x184>)
   21e9a:	9301      	str	r3, [sp, #4]
   21e9c:	2300      	movs	r3, #0
   21e9e:	493a      	ldr	r1, [pc, #232]	; (21f88 <hts221_init+0x170>)
   21ea0:	9402      	str	r4, [sp, #8]
   21ea2:	9300      	str	r3, [sp, #0]
   21ea4:	2201      	movs	r2, #1
   21ea6:	4618      	mov	r0, r3
   21ea8:	f7ff ffa4 	bl	21df4 <z_log_msg2_runtime_create.constprop.0>
   21eac:	e7dc      	b.n	21e68 <hts221_init+0x50>
	status = hts221_block_data_update_set(ctx, 1);
   21eae:	2101      	movs	r1, #1
   21eb0:	4628      	mov	r0, r5
   21eb2:	f006 fe40 	bl	28b36 <hts221_block_data_update_set>
	if (status < 0) {
   21eb6:	1e04      	subs	r4, r0, #0
   21eb8:	da01      	bge.n	21ebe <hts221_init+0xa6>
		LOG_ERR("Could not set BDU bit");
   21eba:	4b39      	ldr	r3, [pc, #228]	; (21fa0 <hts221_init+0x188>)
   21ebc:	e7b8      	b.n	21e30 <hts221_init+0x18>
	status = hts221_power_on_set(ctx, 1);
   21ebe:	2101      	movs	r1, #1
   21ec0:	4628      	mov	r0, r5
   21ec2:	f006 fe54 	bl	28b6e <hts221_power_on_set>
	if (status < 0) {
   21ec6:	1e04      	subs	r4, r0, #0
   21ec8:	da01      	bge.n	21ece <hts221_init+0xb6>
		LOG_ERR("Could not set PD bit");
   21eca:	4b36      	ldr	r3, [pc, #216]	; (21fa4 <hts221_init+0x18c>)
   21ecc:	e7b0      	b.n	21e30 <hts221_init+0x18>
	return z_impl_k_sleep(timeout);
   21ece:	2100      	movs	r1, #0
   21ed0:	2063      	movs	r0, #99	; 0x63
   21ed2:	f003 fbd9 	bl	25688 <z_impl_k_sleep>
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   21ed6:	6870      	ldr	r0, [r6, #4]
	struct hts221_data *data = dev->data;
   21ed8:	6935      	ldr	r5, [r6, #16]
	status = hts221_read_reg(ctx, HTS221_H0_RH_X2 |
   21eda:	2310      	movs	r3, #16
   21edc:	aa06      	add	r2, sp, #24
   21ede:	21b0      	movs	r1, #176	; 0xb0
   21ee0:	f006 fe06 	bl	28af0 <hts221_read_reg>
	if (status < 0) {
   21ee4:	1e04      	subs	r4, r0, #0
   21ee6:	da0f      	bge.n	21f08 <hts221_init+0xf0>
		LOG_ERR("Failed to read conversion data.");
   21ee8:	2502      	movs	r5, #2
   21eea:	4e2f      	ldr	r6, [pc, #188]	; (21fa8 <hts221_init+0x190>)
   21eec:	960e      	str	r6, [sp, #56]	; 0x38
   21eee:	9505      	str	r5, [sp, #20]
   21ef0:	950d      	str	r5, [sp, #52]	; 0x34
   21ef2:	4825      	ldr	r0, [pc, #148]	; (21f88 <hts221_init+0x170>)
   21ef4:	2300      	movs	r3, #0
   21ef6:	aa0d      	add	r2, sp, #52	; 0x34
   21ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   21efc:	f006 fdd8 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		LOG_ERR("Failed to read conversion data.");
   21f00:	960e      	str	r6, [sp, #56]	; 0x38
   21f02:	9506      	str	r5, [sp, #24]
   21f04:	950d      	str	r5, [sp, #52]	; 0x34
   21f06:	e797      	b.n	21e38 <hts221_init+0x20>
	data->h0_rh_x2 = buf[0];
   21f08:	f89d 3018 	ldrb.w	r3, [sp, #24]
   21f0c:	712b      	strb	r3, [r5, #4]
	data->h1_rh_x2 = buf[1];
   21f0e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21f12:	716b      	strb	r3, [r5, #5]
	data->t0_degc_x8 = sys_le16_to_cpu(buf[2] | ((buf[5] & 0x3) << 8));
   21f14:	f89d 301d 	ldrb.w	r3, [sp, #29]
   21f18:	021a      	lsls	r2, r3, #8
   21f1a:	f402 7140 	and.w	r1, r2, #768	; 0x300
   21f1e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   21f22:	430a      	orrs	r2, r1
   21f24:	80ea      	strh	r2, [r5, #6]
	data->t1_degc_x8 = sys_le16_to_cpu(buf[3] | ((buf[5] & 0xC) << 6));
   21f26:	f89d 201b 	ldrb.w	r2, [sp, #27]
   21f2a:	019b      	lsls	r3, r3, #6
   21f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
   21f30:	4313      	orrs	r3, r2
   21f32:	812b      	strh	r3, [r5, #8]
	data->h0_t0_out = sys_le16_to_cpu(buf[6] | (buf[7] << 8));
   21f34:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   21f38:	816b      	strh	r3, [r5, #10]
	data->h1_t0_out = sys_le16_to_cpu(buf[10] | (buf[11] << 8));
   21f3a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
   21f3e:	81ab      	strh	r3, [r5, #12]
	data->t0_out = sys_le16_to_cpu(buf[12] | (buf[13] << 8));
   21f40:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   21f44:	81eb      	strh	r3, [r5, #14]
	data->t1_out = sys_le16_to_cpu(buf[14] | (buf[15] << 8));
   21f46:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   21f4a:	822b      	strh	r3, [r5, #16]
	LOG_INF("Cannot enable trigger without drdy-gpios");
   21f4c:	4b17      	ldr	r3, [pc, #92]	; (21fac <hts221_init+0x194>)
   21f4e:	930e      	str	r3, [sp, #56]	; 0x38
   21f50:	2302      	movs	r3, #2
   21f52:	9306      	str	r3, [sp, #24]
   21f54:	930d      	str	r3, [sp, #52]	; 0x34
   21f56:	480c      	ldr	r0, [pc, #48]	; (21f88 <hts221_init+0x170>)
   21f58:	2300      	movs	r3, #0
   21f5a:	aa0d      	add	r2, sp, #52	; 0x34
   21f5c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
   21f60:	f006 fda6 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	return 0;
   21f64:	2400      	movs	r4, #0
   21f66:	e781      	b.n	21e6c <hts221_init+0x54>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   21f68:	2001      	movs	r0, #1
	status = hts221_data_rate_set(ctx, hts221_odrs[idx].odr);
   21f6a:	4b11      	ldr	r3, [pc, #68]	; (21fb0 <hts221_init+0x198>)
   21f6c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   21f70:	7901      	ldrb	r1, [r0, #4]
   21f72:	4628      	mov	r0, r5
   21f74:	f006 fdc8 	bl	28b08 <hts221_data_rate_set>
	if (status < 0) {
   21f78:	1e04      	subs	r4, r0, #0
   21f7a:	da98      	bge.n	21eae <hts221_init+0x96>
		LOG_ERR("Could not set output data rate");
   21f7c:	4b0d      	ldr	r3, [pc, #52]	; (21fb4 <hts221_init+0x19c>)
   21f7e:	e757      	b.n	21e30 <hts221_init+0x18>
		if (!strcmp(hts221_odrs[idx].str, CONFIG_HTS221_ODR)) {
   21f80:	2002      	movs	r0, #2
   21f82:	e7f2      	b.n	21f6a <hts221_init+0x152>
   21f84:	0003398e 	.word	0x0003398e
   21f88:	0002f3c4 	.word	0x0002f3c4
   21f8c:	000339a6 	.word	0x000339a6
   21f90:	000317a6 	.word	0x000317a6
   21f94:	000339b7 	.word	0x000339b7
   21f98:	000339b9 	.word	0x000339b9
   21f9c:	00033978 	.word	0x00033978
   21fa0:	000339dd 	.word	0x000339dd
   21fa4:	000339f3 	.word	0x000339f3
   21fa8:	00033a08 	.word	0x00033a08
   21fac:	00033a28 	.word	0x00033a28
   21fb0:	00031204 	.word	0x00031204
   21fb4:	000339be 	.word	0x000339be

00021fb8 <lis2dh_channel_get>:
	struct lis2dh_data *lis2dh = dev->data;
   21fb8:	2903      	cmp	r1, #3
{
   21fba:	b570      	push	{r4, r5, r6, lr}
	struct lis2dh_data *lis2dh = dev->data;
   21fbc:	6904      	ldr	r4, [r0, #16]
	switch (chan) {
   21fbe:	d81c      	bhi.n	21ffa <lis2dh_channel_get+0x42>
   21fc0:	4b0f      	ldr	r3, [pc, #60]	; (22000 <lis2dh_channel_get+0x48>)
   21fc2:	5658      	ldrsb	r0, [r3, r1]
   21fc4:	4b0f      	ldr	r3, [pc, #60]	; (22004 <lis2dh_channel_get+0x4c>)
   21fc6:	565e      	ldrsb	r6, [r3, r1]
	val->val1 = converted_val / 1000000;
   21fc8:	490f      	ldr	r1, [pc, #60]	; (22008 <lis2dh_channel_get+0x50>)
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   21fca:	42b0      	cmp	r0, r6
   21fcc:	f102 0208 	add.w	r2, r2, #8
   21fd0:	dd01      	ble.n	21fd6 <lis2dh_channel_get+0x1e>
	return 0;
   21fd2:	2000      	movs	r0, #0
}
   21fd4:	bd70      	pop	{r4, r5, r6, pc}
		lis2dh_convert(lis2dh->sample.xyz[i], lis2dh->scale, val);
   21fd6:	1d03      	adds	r3, r0, #4
   21fd8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
	converted_val = (raw_val >> 4) * scale;
   21fdc:	6925      	ldr	r5, [r4, #16]
   21fde:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
   21fe2:	111b      	asrs	r3, r3, #4
   21fe4:	436b      	muls	r3, r5
	val->val1 = converted_val / 1000000;
   21fe6:	fb93 f5f1 	sdiv	r5, r3, r1
	val->val2 = converted_val % 1000000;
   21fea:	fb01 3315 	mls	r3, r1, r5, r3
	val->val1 = converted_val / 1000000;
   21fee:	f842 5c08 	str.w	r5, [r2, #-8]
	val->val2 = converted_val % 1000000;
   21ff2:	f842 3c04 	str.w	r3, [r2, #-4]
	for (i = ofs_start; i <= ofs_end; i++, val++) {
   21ff6:	3001      	adds	r0, #1
   21ff8:	e7e7      	b.n	21fca <lis2dh_channel_get+0x12>
		return -ENOTSUP;
   21ffa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21ffe:	e7e9      	b.n	21fd4 <lis2dh_channel_get+0x1c>
   22000:	00033bae 	.word	0x00033bae
   22004:	00033bb2 	.word	0x00033bb2
   22008:	000f4240 	.word	0x000f4240

0002200c <lis2dh_init>:
	.sample_fetch = lis2dh_sample_fetch,
	.channel_get = lis2dh_channel_get,
};

int lis2dh_init(const struct device *dev)
{
   2200c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lis2dh_data *lis2dh = dev->data;
	const struct lis2dh_config *cfg = dev->config;
   22010:	6847      	ldr	r7, [r0, #4]
	struct lis2dh_data *lis2dh = dev->data;
   22012:	6906      	ldr	r6, [r0, #16]
{
   22014:	4605      	mov	r5, r0
   22016:	b092      	sub	sp, #72	; 0x48
	int status;
	uint8_t id;
	uint8_t raw[6];

	lis2dh->bus = device_get_binding(cfg->bus_name);
   22018:	6838      	ldr	r0, [r7, #0]
   2201a:	f002 fa09 	bl	24430 <z_impl_device_get_binding>
   2201e:	4603      	mov	r3, r0
   22020:	6030      	str	r0, [r6, #0]
	if (!lis2dh->bus) {
   22022:	b970      	cbnz	r0, 22042 <lis2dh_init+0x36>
		LOG_ERR("master not found: %s", cfg->bus_name);
   22024:	683a      	ldr	r2, [r7, #0]
   22026:	9202      	str	r2, [sp, #8]
   22028:	4a48      	ldr	r2, [pc, #288]	; (2214c <lis2dh_init+0x140>)
   2202a:	4949      	ldr	r1, [pc, #292]	; (22150 <lis2dh_init+0x144>)
   2202c:	e9cd 0200 	strd	r0, r2, [sp]
   22030:	2201      	movs	r2, #1
   22032:	f00b f8e2 	bl	2d1fa <z_log_msg2_runtime_create.constprop.0>
		return status;
	}

	if (id != LIS2DH_CHIP_ID) {
		LOG_ERR("Invalid chip ID: %02x\n", id);
		return -EINVAL;
   22036:	f06f 0415 	mvn.w	r4, #21

	/* enable accel measurements and set power mode and data rate */
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
					LIS2DH_ACCEL_EN_BITS | LIS2DH_LP_EN_BIT |
					LIS2DH_ODR_BITS);
}
   2203a:	4620      	mov	r0, r4
   2203c:	b012      	add	sp, #72	; 0x48
   2203e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	cfg->bus_init(dev);
   22042:	687b      	ldr	r3, [r7, #4]
   22044:	4628      	mov	r0, r5
   22046:	4798      	blx	r3
	status = lis2dh->hw_tf->read_reg(dev, LIS2DH_REG_WAI, &id);
   22048:	6873      	ldr	r3, [r6, #4]
   2204a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   2204e:	689b      	ldr	r3, [r3, #8]
   22050:	210f      	movs	r1, #15
   22052:	4628      	mov	r0, r5
   22054:	4798      	blx	r3
	if (status < 0) {
   22056:	1e04      	subs	r4, r0, #0
   22058:	da0c      	bge.n	22074 <lis2dh_init+0x68>
		LOG_ERR("Failed to read chip id.");
   2205a:	4b3e      	ldr	r3, [pc, #248]	; (22154 <lis2dh_init+0x148>)
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
   2205c:	9310      	str	r3, [sp, #64]	; 0x40
   2205e:	2302      	movs	r3, #2
   22060:	930a      	str	r3, [sp, #40]	; 0x28
   22062:	930f      	str	r3, [sp, #60]	; 0x3c
   22064:	483a      	ldr	r0, [pc, #232]	; (22150 <lis2dh_init+0x144>)
   22066:	2300      	movs	r3, #0
   22068:	aa0f      	add	r2, sp, #60	; 0x3c
   2206a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   2206e:	f006 fd1f 	bl	28ab0 <z_impl_z_log_msg2_static_create>
			return status;
   22072:	e7e2      	b.n	2203a <lis2dh_init+0x2e>
	if (id != LIS2DH_CHIP_ID) {
   22074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   22078:	2b33      	cmp	r3, #51	; 0x33
   2207a:	d00d      	beq.n	22098 <lis2dh_init+0x8c>
		LOG_ERR("Invalid chip ID: %02x\n", id);
   2207c:	4a36      	ldr	r2, [pc, #216]	; (22158 <lis2dh_init+0x14c>)
   2207e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   22082:	2303      	movs	r3, #3
   22084:	930a      	str	r3, [sp, #40]	; 0x28
   22086:	930f      	str	r3, [sp, #60]	; 0x3c
   22088:	4831      	ldr	r0, [pc, #196]	; (22150 <lis2dh_init+0x144>)
   2208a:	2300      	movs	r3, #0
   2208c:	aa0f      	add	r2, sp, #60	; 0x3c
   2208e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
   22092:	f006 fd0d 	bl	28ab0 <z_impl_z_log_msg2_static_create>
   22096:	e7ce      	b.n	22036 <lis2dh_init+0x2a>
	if (cfg->is_lsm303agr_dev) {
   22098:	7abb      	ldrb	r3, [r7, #10]
   2209a:	b15b      	cbz	r3, 220b4 <lis2dh_init+0xa8>
		lis2dh_reg_val_to_scale[0] = ACCEL_SCALE(1563);
   2209c:	4b2f      	ldr	r3, [pc, #188]	; (2215c <lis2dh_init+0x150>)
		lis2dh_reg_val_to_scale[1] = ACCEL_SCALE(3126);
   2209e:	f644 1216 	movw	r2, #18710	; 0x4916
   220a2:	f242 418b 	movw	r1, #9355	; 0x248b
   220a6:	e9c3 1200 	strd	r1, r2, [r3]
		lis2dh_reg_val_to_scale[3] = ACCEL_SCALE(18758);
   220aa:	4a2d      	ldr	r2, [pc, #180]	; (22160 <lis2dh_init+0x154>)
   220ac:	f249 202d 	movw	r0, #37421	; 0x922d
   220b0:	e9c3 0202 	strd	r0, r2, [r3, #8]
	if (cfg->disc_pull_up) {
   220b4:	7afb      	ldrb	r3, [r7, #11]
   220b6:	b153      	cbz	r3, 220ce <lis2dh_init+0xc2>
		status = lis2dh->hw_tf->update_reg(dev, LIS2DH_REG_CTRL0,
   220b8:	6873      	ldr	r3, [r6, #4]
   220ba:	691c      	ldr	r4, [r3, #16]
   220bc:	2380      	movs	r3, #128	; 0x80
   220be:	461a      	mov	r2, r3
   220c0:	211e      	movs	r1, #30
   220c2:	4628      	mov	r0, r5
   220c4:	47a0      	blx	r4
		if (status < 0) {
   220c6:	1e04      	subs	r4, r0, #0
   220c8:	da01      	bge.n	220ce <lis2dh_init+0xc2>
			LOG_ERR("Failed to disconnect SDO/SA0 pull-up.");
   220ca:	4b26      	ldr	r3, [pc, #152]	; (22164 <lis2dh_init+0x158>)
   220cc:	e7c6      	b.n	2205c <lis2dh_init+0x50>
	(void)memset(raw, 0, sizeof(raw));
   220ce:	f04f 0800 	mov.w	r8, #0
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   220d2:	2307      	movs	r3, #7
	(void)memset(raw, 0, sizeof(raw));
   220d4:	f8cd 8029 	str.w	r8, [sp, #41]	; 0x29
   220d8:	f88d 802d 	strb.w	r8, [sp, #45]	; 0x2d
	raw[0] = LIS2DH_ACCEL_EN_BITS;
   220dc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
	status = lis2dh->hw_tf->write_data(dev, LIS2DH_REG_CTRL1, raw,
   220e0:	6873      	ldr	r3, [r6, #4]
   220e2:	aa0a      	add	r2, sp, #40	; 0x28
   220e4:	685c      	ldr	r4, [r3, #4]
   220e6:	2120      	movs	r1, #32
   220e8:	2306      	movs	r3, #6
   220ea:	4628      	mov	r0, r5
   220ec:	47a0      	blx	r4
	if (status < 0) {
   220ee:	1e04      	subs	r4, r0, #0
   220f0:	da04      	bge.n	220fc <lis2dh_init+0xf0>
		LOG_ERR("Failed to reset ctrl registers.");
   220f2:	4b1d      	ldr	r3, [pc, #116]	; (22168 <lis2dh_init+0x15c>)
		LOG_ERR("Failed to set full scale ctrl register.");
   220f4:	9310      	str	r3, [sp, #64]	; 0x40
   220f6:	2302      	movs	r3, #2
   220f8:	9309      	str	r3, [sp, #36]	; 0x24
   220fa:	e7b2      	b.n	22062 <lis2dh_init+0x56>
	lis2dh->scale = lis2dh_reg_val_to_scale[LIS2DH_FS_IDX];
   220fc:	4b17      	ldr	r3, [pc, #92]	; (2215c <lis2dh_init+0x150>)
   220fe:	681b      	ldr	r3, [r3, #0]
   22100:	6133      	str	r3, [r6, #16]
	status = lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL4, LIS2DH_FS_BITS | LIS2DH_HR_BIT);
   22102:	6873      	ldr	r3, [r6, #4]
   22104:	4642      	mov	r2, r8
   22106:	68db      	ldr	r3, [r3, #12]
   22108:	2123      	movs	r1, #35	; 0x23
   2210a:	4628      	mov	r0, r5
   2210c:	4798      	blx	r3
	if (status < 0) {
   2210e:	1e04      	subs	r4, r0, #0
   22110:	da01      	bge.n	22116 <lis2dh_init+0x10a>
		LOG_ERR("Failed to set full scale ctrl register.");
   22112:	4b16      	ldr	r3, [pc, #88]	; (2216c <lis2dh_init+0x160>)
   22114:	e7ee      	b.n	220f4 <lis2dh_init+0xe8>
	LOG_INF("bus=%s fs=%d, odr=0x%x lp_en=0x%x scale=%d",
   22116:	6933      	ldr	r3, [r6, #16]
   22118:	490d      	ldr	r1, [pc, #52]	; (22150 <lis2dh_init+0x144>)
   2211a:	e9cd 8305 	strd	r8, r3, [sp, #20]
   2211e:	2204      	movs	r2, #4
   22120:	2302      	movs	r3, #2
   22122:	e9cd 3203 	strd	r3, r2, [sp, #12]
   22126:	683b      	ldr	r3, [r7, #0]
   22128:	9302      	str	r3, [sp, #8]
   2212a:	4b11      	ldr	r3, [pc, #68]	; (22170 <lis2dh_init+0x164>)
   2212c:	2203      	movs	r2, #3
   2212e:	e9cd 8300 	strd	r8, r3, [sp]
   22132:	4640      	mov	r0, r8
   22134:	4643      	mov	r3, r8
   22136:	f00b f860 	bl	2d1fa <z_log_msg2_runtime_create.constprop.0>
	return lis2dh->hw_tf->write_reg(dev, LIS2DH_REG_CTRL1,
   2213a:	6873      	ldr	r3, [r6, #4]
   2213c:	2247      	movs	r2, #71	; 0x47
   2213e:	68db      	ldr	r3, [r3, #12]
   22140:	2120      	movs	r1, #32
   22142:	4628      	mov	r0, r5
   22144:	4798      	blx	r3
   22146:	4604      	mov	r4, r0
   22148:	e777      	b.n	2203a <lis2dh_init+0x2e>
   2214a:	bf00      	nop
   2214c:	00033a51 	.word	0x00033a51
   22150:	0002f52c 	.word	0x0002f52c
   22154:	00033a66 	.word	0x00033a66
   22158:	00033a7e 	.word	0x00033a7e
   2215c:	200007c0 	.word	0x200007c0
   22160:	0001b694 	.word	0x0001b694
   22164:	00033a95 	.word	0x00033a95
   22168:	00033abb 	.word	0x00033abb
   2216c:	00033adb 	.word	0x00033adb
   22170:	00033b03 	.word	0x00033b03

00022174 <lis2dh_fetch_xyz.constprop.0>:
static int lis2dh_fetch_xyz(const struct device *dev,
   22174:	b530      	push	{r4, r5, lr}
	struct lis2dh_data *lis2dh = dev->data;
   22176:	6905      	ldr	r5, [r0, #16]
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   22178:	686b      	ldr	r3, [r5, #4]
static int lis2dh_fetch_xyz(const struct device *dev,
   2217a:	b089      	sub	sp, #36	; 0x24
	status = lis2dh->hw_tf->read_data(dev, LIS2DH_REG_STATUS,
   2217c:	681c      	ldr	r4, [r3, #0]
   2217e:	f105 0208 	add.w	r2, r5, #8
   22182:	2307      	movs	r3, #7
   22184:	2127      	movs	r1, #39	; 0x27
   22186:	47a0      	blx	r4
	if (status < 0) {
   22188:	1e04      	subs	r4, r0, #0
   2218a:	da0e      	bge.n	221aa <lis2dh_fetch_xyz.constprop.0+0x36>
		LOG_WRN("Could not read accel axis data");
   2218c:	4b0a      	ldr	r3, [pc, #40]	; (221b8 <lis2dh_fetch_xyz.constprop.0+0x44>)
   2218e:	9306      	str	r3, [sp, #24]
   22190:	2302      	movs	r3, #2
   22192:	9301      	str	r3, [sp, #4]
   22194:	9305      	str	r3, [sp, #20]
   22196:	4809      	ldr	r0, [pc, #36]	; (221bc <lis2dh_fetch_xyz.constprop.0+0x48>)
   22198:	2300      	movs	r3, #0
   2219a:	aa05      	add	r2, sp, #20
   2219c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   221a0:	f006 fc86 	bl	28ab0 <z_impl_z_log_msg2_static_create>
}
   221a4:	4620      	mov	r0, r4
   221a6:	b009      	add	sp, #36	; 0x24
   221a8:	bd30      	pop	{r4, r5, pc}
	if (lis2dh->sample.status & LIS2DH_STATUS_DRDY_MASK) {
   221aa:	7a2b      	ldrb	r3, [r5, #8]
		status = 0;
   221ac:	f013 0f0f 	tst.w	r3, #15
   221b0:	bf18      	it	ne
   221b2:	2400      	movne	r4, #0
   221b4:	e7f6      	b.n	221a4 <lis2dh_fetch_xyz.constprop.0+0x30>
   221b6:	bf00      	nop
   221b8:	00033b58 	.word	0x00033b58
   221bc:	0002f52c 	.word	0x0002f52c

000221c0 <lis2dh_sample_fetch>:
{
   221c0:	b500      	push	{lr}
	if (chan == SENSOR_CHAN_ALL) {
   221c2:	2939      	cmp	r1, #57	; 0x39
{
   221c4:	b089      	sub	sp, #36	; 0x24
	if (chan == SENSOR_CHAN_ALL) {
   221c6:	d104      	bne.n	221d2 <lis2dh_sample_fetch+0x12>
}
   221c8:	b009      	add	sp, #36	; 0x24
   221ca:	f85d eb04 	ldr.w	lr, [sp], #4
		status = lis2dh_fetch_xyz(dev, chan);
   221ce:	f7ff bfd1 	b.w	22174 <lis2dh_fetch_xyz.constprop.0>
	} else if (chan == SENSOR_CHAN_ACCEL_XYZ) {
   221d2:	2903      	cmp	r1, #3
   221d4:	d0f8      	beq.n	221c8 <lis2dh_sample_fetch+0x8>
	} else if (chan == SENSOR_CHAN_DIE_TEMP) {
   221d6:	290c      	cmp	r1, #12
   221d8:	d110      	bne.n	221fc <lis2dh_sample_fetch+0x3c>
	LOG_WRN("Temperature measurement disabled");
   221da:	4b0a      	ldr	r3, [pc, #40]	; (22204 <lis2dh_sample_fetch+0x44>)
   221dc:	9306      	str	r3, [sp, #24]
   221de:	2302      	movs	r3, #2
   221e0:	9301      	str	r3, [sp, #4]
   221e2:	9305      	str	r3, [sp, #20]
   221e4:	4808      	ldr	r0, [pc, #32]	; (22208 <lis2dh_sample_fetch+0x48>)
   221e6:	2300      	movs	r3, #0
   221e8:	aa05      	add	r2, sp, #20
   221ea:	f44f 5184 	mov.w	r1, #4224	; 0x1080
   221ee:	f006 fc5f 	bl	28ab0 <z_impl_z_log_msg2_static_create>
		status = lis2dh_sample_fetch_temp(dev);
   221f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   221f6:	b009      	add	sp, #36	; 0x24
   221f8:	f85d fb04 	ldr.w	pc, [sp], #4
	int status = -ENODATA;
   221fc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
	return status;
   22200:	e7f9      	b.n	221f6 <lis2dh_sample_fetch+0x36>
   22202:	bf00      	nop
   22204:	00033b77 	.word	0x00033b77
   22208:	0002f52c 	.word	0x0002f52c

0002220c <lis2dh_i2c_init>:

int lis2dh_i2c_init(const struct device *dev)
{
	struct lis2dh_data *data = dev->data;

	data->hw_tf = &lis2dh_i2c_transfer_fn;
   2220c:	6903      	ldr	r3, [r0, #16]
   2220e:	4a02      	ldr	r2, [pc, #8]	; (22218 <lis2dh_i2c_init+0xc>)
   22210:	605a      	str	r2, [r3, #4]

	return 0;
}
   22212:	2000      	movs	r0, #0
   22214:	4770      	bx	lr
   22216:	bf00      	nop
   22218:	0003123c 	.word	0x0003123c

0002221c <lps22hb_channel_get>:
			       enum sensor_channel chan,
			       struct sensor_value *val)
{
	struct lps22hb_data *data = dev->data;

	if (chan == SENSOR_CHAN_PRESS) {
   2221c:	290e      	cmp	r1, #14
{
   2221e:	b530      	push	{r4, r5, lr}
	struct lps22hb_data *data = dev->data;
   22220:	6903      	ldr	r3, [r0, #16]
	if (chan == SENSOR_CHAN_PRESS) {
   22222:	d111      	bne.n	22248 <lps22hb_channel_get+0x2c>
		lps22hb_press_convert(val, data->sample_press);
   22224:	6859      	ldr	r1, [r3, #4]
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   22226:	4811      	ldr	r0, [pc, #68]	; (2226c <lps22hb_channel_get+0x50>)
	val->val1 = (raw_val >> 12) / 10;
   22228:	130b      	asrs	r3, r1, #12
   2222a:	250a      	movs	r5, #10
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   2222c:	f3c1 010b 	ubfx	r1, r1, #0, #12
	val->val1 = (raw_val >> 12) / 10;
   22230:	fb93 f4f5 	sdiv	r4, r3, r5
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   22234:	fb05 3314 	mls	r3, r5, r4, r3
		(((int32_t)((raw_val) & 0x0FFF) * 100000L) >> 12);
   22238:	4341      	muls	r1, r0
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   2223a:	4343      	muls	r3, r0
	val->val1 = (raw_val >> 12) / 10;
   2223c:	6014      	str	r4, [r2, #0]
	val->val2 = (raw_val >> 12) % 10 * 100000 +
   2223e:	eb03 3311 	add.w	r3, r3, r1, lsr #12
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   22242:	6053      	str	r3, [r2, #4]
		lps22hb_temp_convert(val, data->sample_temp);
	} else {
		return -ENOTSUP;
	}

	return 0;
   22244:	2000      	movs	r0, #0
}
   22246:	bd30      	pop	{r4, r5, pc}
	} else if (chan == SENSOR_CHAN_AMBIENT_TEMP) {
   22248:	290d      	cmp	r1, #13
   2224a:	d10c      	bne.n	22266 <lps22hb_channel_get+0x4a>
		lps22hb_temp_convert(val, data->sample_temp);
   2224c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
	val->val1 = raw_val / 100;
   22250:	2064      	movs	r0, #100	; 0x64
   22252:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   22256:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = raw_val / 100;
   2225a:	6011      	str	r1, [r2, #0]
	val->val2 = ((int32_t)raw_val % 100) * 10000;
   2225c:	f242 7110 	movw	r1, #10000	; 0x2710
   22260:	fb13 f301 	smulbb	r3, r3, r1
   22264:	e7ed      	b.n	22242 <lps22hb_channel_get+0x26>
		return -ENOTSUP;
   22266:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2226a:	e7ec      	b.n	22246 <lps22hb_channel_get+0x2a>
   2226c:	000186a0 	.word	0x000186a0

00022270 <common_init.isra.0>:
 *
 * @param gpiop where to store the GPIO device pointer
 *
 * @return negative on error, otherwise zero.
 */
static int common_init(const struct device *dev)
   22270:	b5f0      	push	{r4, r5, r6, r7, lr}
   22272:	4604      	mov	r4, r0
   22274:	b085      	sub	sp, #20
{
	const struct driver_config *cfg = dev->config;
	gpio_flags_t flags;

	if (!device_is_ready(cfg->enable.port)) {
   22276:	68c0      	ldr	r0, [r0, #12]
   22278:	f00b fbb0 	bl	2d9dc <z_device_is_ready>
   2227c:	4603      	mov	r3, r0
   2227e:	b970      	cbnz	r0, 2229e <common_init.isra.0+0x2e>
		LOG_ERR("GPIO port: %s not ready", cfg->enable.port->name);
   22280:	68e2      	ldr	r2, [r4, #12]
   22282:	491c      	ldr	r1, [pc, #112]	; (222f4 <common_init.isra.0+0x84>)
   22284:	6812      	ldr	r2, [r2, #0]
   22286:	9202      	str	r2, [sp, #8]
   22288:	4a1b      	ldr	r2, [pc, #108]	; (222f8 <common_init.isra.0+0x88>)
   2228a:	e9cd 0200 	strd	r0, r2, [sp]
   2228e:	2201      	movs	r2, #1
   22290:	f00b f9c1 	bl	2d616 <z_log_msg2_runtime_create.constprop.0>
		return -ENODEV;
   22294:	f06f 0412 	mvn.w	r4, #18
		 */
		k_busy_wait(delay_us);
	}

	return rc;
}
   22298:	4620      	mov	r0, r4
   2229a:	b005      	add	sp, #20
   2229c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (on) {
   2229e:	7d25      	ldrb	r5, [r4, #20]
				  spec->dt_flags | extra_flags);
   222a0:	7c63      	ldrb	r3, [r4, #17]
	return gpio_pin_configure(spec->port,
   222a2:	68e0      	ldr	r0, [r4, #12]
   222a4:	7c21      	ldrb	r1, [r4, #16]
   222a6:	f015 0503 	ands.w	r5, r5, #3
		flags = GPIO_OUTPUT_ACTIVE;
   222aa:	bf16      	itet	ne
   222ac:	f44f 52d0 	movne.w	r2, #6656	; 0x1a00
		flags = GPIO_OUTPUT_INACTIVE;
   222b0:	f44f 52b0 	moveq.w	r2, #5632	; 0x1600
		delay_us = cfg->startup_delay_us;
   222b4:	6865      	ldrne	r5, [r4, #4]
   222b6:	4313      	orrs	r3, r2
	struct gpio_driver_data *data =
   222b8:	6907      	ldr	r7, [r0, #16]
	const struct gpio_driver_api *api =
   222ba:	f8d0 c008 	ldr.w	ip, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
   222be:	683c      	ldr	r4, [r7, #0]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   222c0:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   222c2:	bf48      	it	mi
   222c4:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   222c8:	2601      	movs	r6, #1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   222ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
		data->invert |= (gpio_port_pins_t)BIT(pin);
   222ce:	408e      	lsls	r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   222d0:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   222d2:	bf4c      	ite	mi
   222d4:	4334      	orrmi	r4, r6
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   222d6:	43b4      	bicpl	r4, r6
   222d8:	603c      	str	r4, [r7, #0]
	return api->pin_configure(port, pin, flags);
   222da:	f8dc 3000 	ldr.w	r3, [ip]
   222de:	4798      	blx	r3
	if ((rc == 0) && (delay_us > 0)) {
   222e0:	4604      	mov	r4, r0
   222e2:	2800      	cmp	r0, #0
   222e4:	d1d8      	bne.n	22298 <common_init.isra.0+0x28>
   222e6:	2d00      	cmp	r5, #0
   222e8:	d0d6      	beq.n	22298 <common_init.isra.0+0x28>
	z_impl_k_busy_wait(usec_to_wait);
   222ea:	4628      	mov	r0, r5
   222ec:	f00b ff80 	bl	2e1f0 <z_impl_k_busy_wait>
}
   222f0:	e7d2      	b.n	22298 <common_init.isra.0+0x28>
   222f2:	bf00      	nop
   222f4:	0002f564 	.word	0x0002f564
   222f8:	00033bb6 	.word	0x00033bb6

000222fc <regulator_fixed_init_onoff>:
	.enable = enable_onoff,
	.disable = disable_onoff,
};

static int regulator_fixed_init_onoff(const struct device *dev)
{
   222fc:	b530      	push	{r4, r5, lr}
	struct driver_data_onoff *data = dev->data;
   222fe:	6905      	ldr	r5, [r0, #16]
	int rc;

	data->dev = dev;
	rc = onoff_manager_init(&data->mgr, &transitions);
   22300:	4910      	ldr	r1, [pc, #64]	; (22344 <regulator_fixed_init_onoff+0x48>)
{
   22302:	4604      	mov	r4, r0
	data->dev = dev;
   22304:	4628      	mov	r0, r5
{
   22306:	b085      	sub	sp, #20
	data->dev = dev;
   22308:	f840 4b04 	str.w	r4, [r0], #4
	rc = onoff_manager_init(&data->mgr, &transitions);
   2230c:	f005 feb5 	bl	2807a <onoff_manager_init>
	__ASSERT_NO_MSG(rc == 0);

#ifdef CONFIG_MULTITHREADING
	k_work_init_delayable(&data->dwork, onoff_worker);
   22310:	490d      	ldr	r1, [pc, #52]	; (22348 <regulator_fixed_init_onoff+0x4c>)
   22312:	f105 0020 	add.w	r0, r5, #32
   22316:	f00b fdc8 	bl	2deaa <k_work_init_delayable>
#endif /* CONFIG_MULTITHREADING */

	rc = common_init(dev);
   2231a:	6860      	ldr	r0, [r4, #4]
   2231c:	f7ff ffa8 	bl	22270 <common_init.isra.0>
	if (rc >= 0) {
		rc = 0;
	}

	LOG_INF("%s onoff: %d", dev->name, rc);
   22320:	6823      	ldr	r3, [r4, #0]
   22322:	9302      	str	r3, [sp, #8]
   22324:	4b09      	ldr	r3, [pc, #36]	; (2234c <regulator_fixed_init_onoff+0x50>)
   22326:	9301      	str	r3, [sp, #4]
   22328:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   2232c:	2300      	movs	r3, #0
   2232e:	4618      	mov	r0, r3
   22330:	4907      	ldr	r1, [pc, #28]	; (22350 <regulator_fixed_init_onoff+0x54>)
   22332:	9503      	str	r5, [sp, #12]
   22334:	9300      	str	r3, [sp, #0]
   22336:	2203      	movs	r2, #3
   22338:	f00b f96d 	bl	2d616 <z_log_msg2_runtime_create.constprop.0>

	return rc;
}
   2233c:	4628      	mov	r0, r5
   2233e:	b005      	add	sp, #20
   22340:	bd30      	pop	{r4, r5, pc}
   22342:	bf00      	nop
   22344:	000312f4 	.word	0x000312f4
   22348:	0002d633 	.word	0x0002d633
   2234c:	00033bce 	.word	0x00033bce
   22350:	0002f564 	.word	0x0002f564

00022354 <regulator_fixed_init_sync>:
	.enable = enable_sync,
	.disable = disable_sync,
};

static int regulator_fixed_init_sync(const struct device *dev)
{
   22354:	b530      	push	{r4, r5, lr}
   22356:	4605      	mov	r5, r0
   22358:	b085      	sub	sp, #20
	const struct driver_config *cfg = dev->config;
	int rc = common_init(dev);
   2235a:	6840      	ldr	r0, [r0, #4]
   2235c:	f7ff ff88 	bl	22270 <common_init.isra.0>
	__ASSERT(cfg->startup_delay_us == 0,
		 "sync not valid with startup delay");
	__ASSERT(cfg->off_on_delay_us == 0,
		 "sync not valid with shutdown delay");

	LOG_INF("%s sync: %d", dev->name, rc);
   22360:	682b      	ldr	r3, [r5, #0]
   22362:	9302      	str	r3, [sp, #8]
   22364:	4b06      	ldr	r3, [pc, #24]	; (22380 <regulator_fixed_init_sync+0x2c>)
   22366:	9301      	str	r3, [sp, #4]
   22368:	2300      	movs	r3, #0
	int rc = common_init(dev);
   2236a:	4604      	mov	r4, r0
	LOG_INF("%s sync: %d", dev->name, rc);
   2236c:	9003      	str	r0, [sp, #12]
   2236e:	4905      	ldr	r1, [pc, #20]	; (22384 <regulator_fixed_init_sync+0x30>)
   22370:	9300      	str	r3, [sp, #0]
   22372:	4618      	mov	r0, r3
   22374:	2203      	movs	r2, #3
   22376:	f00b f94e 	bl	2d616 <z_log_msg2_runtime_create.constprop.0>

	return rc;
}
   2237a:	4620      	mov	r0, r4
   2237c:	b005      	add	sp, #20
   2237e:	bd30      	pop	{r4, r5, pc}
   22380:	00033bdb 	.word	0x00033bdb
   22384:	0002f564 	.word	0x0002f564

00022388 <finalize_transition>:
{
   22388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((rc >= 0) && (delay_us > 0)) {
   2238c:	1e1c      	subs	r4, r3, #0
{
   2238e:	4605      	mov	r5, r0
   22390:	460f      	mov	r7, r1
   22392:	4690      	mov	r8, r2
	if ((rc >= 0) && (delay_us > 0)) {
   22394:	db10      	blt.n	223b8 <finalize_transition+0x30>
   22396:	b17a      	cbz	r2, 223b8 <finalize_transition+0x30>
			return (uint32_t)((t * to_hz + off) / from_hz);
   22398:	ea4f 4952 	mov.w	r9, r2, lsr #17
   2239c:	03d6      	lsls	r6, r2, #15
   2239e:	2300      	movs	r3, #0
   223a0:	4a14      	ldr	r2, [pc, #80]	; (223f4 <finalize_transition+0x6c>)
   223a2:	4630      	mov	r0, r6
   223a4:	4649      	mov	r1, r9
   223a6:	f7de fc37 	bl	c18 <__aeabi_uldivmod>
		    || k_is_pre_kernel()
   223aa:	b110      	cbz	r0, 223b2 <finalize_transition+0x2a>
	return !z_sys_post_kernel;
   223ac:	4b12      	ldr	r3, [pc, #72]	; (223f8 <finalize_transition+0x70>)
   223ae:	781b      	ldrb	r3, [r3, #0]
   223b0:	b943      	cbnz	r3, 223c4 <finalize_transition+0x3c>
	z_impl_k_busy_wait(usec_to_wait);
   223b2:	4640      	mov	r0, r8
   223b4:	f00b ff1c 	bl	2e1f0 <z_impl_k_busy_wait>
	notify(&data->mgr, rc);
   223b8:	4621      	mov	r1, r4
   223ba:	1d28      	adds	r0, r5, #4
   223bc:	463b      	mov	r3, r7
}
   223be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	notify(&data->mgr, rc);
   223c2:	4718      	bx	r3
			return ((t * to_hz + off) / from_hz);
   223c4:	480d      	ldr	r0, [pc, #52]	; (223fc <finalize_transition+0x74>)
   223c6:	4a0b      	ldr	r2, [pc, #44]	; (223f4 <finalize_transition+0x6c>)
			data->notify = notify;
   223c8:	652f      	str	r7, [r5, #80]	; 0x50
   223ca:	1830      	adds	r0, r6, r0
			data->task = WORK_TASK_DELAY;
   223cc:	f04f 0303 	mov.w	r3, #3
   223d0:	f149 0100 	adc.w	r1, r9, #0
   223d4:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
   223d8:	2300      	movs	r3, #0
   223da:	f7de fc1d 	bl	c18 <__aeabi_uldivmod>
   223de:	4602      	mov	r2, r0
   223e0:	460b      	mov	r3, r1
			rc = k_work_schedule(&data->dwork, K_USEC(delay_us));
   223e2:	f105 0020 	add.w	r0, r5, #32
   223e6:	f002 fe3f 	bl	25068 <k_work_schedule>
			if (rc >= 0) {
   223ea:	1e04      	subs	r4, r0, #0
   223ec:	dbe4      	blt.n	223b8 <finalize_transition+0x30>
}
   223ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   223f2:	bf00      	nop
   223f4:	000f4240 	.word	0x000f4240
   223f8:	20003f38 	.word	0x20003f38
   223fc:	000f423f 	.word	0x000f423f

00022400 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   22400:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   22402:	794b      	ldrb	r3, [r1, #5]
   22404:	2b01      	cmp	r3, #1
   22406:	d120      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   22408:	798b      	ldrb	r3, [r1, #6]
   2240a:	2b03      	cmp	r3, #3
   2240c:	d11d      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   2240e:	79cc      	ldrb	r4, [r1, #7]
   22410:	b10c      	cbz	r4, 22416 <uarte_nrfx_configure+0x16>
   22412:	2c01      	cmp	r4, #1
   22414:	d119      	bne.n	2244a <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   22416:	790a      	ldrb	r2, [r1, #4]
   22418:	b112      	cbz	r2, 22420 <uarte_nrfx_configure+0x20>
   2241a:	2a02      	cmp	r2, #2
   2241c:	d115      	bne.n	2244a <uarte_nrfx_configure+0x4a>
   2241e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   22420:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   22422:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   22424:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   22428:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   2242a:	d062      	beq.n	224f2 <uarte_nrfx_configure+0xf2>
   2242c:	d82b      	bhi.n	22486 <uarte_nrfx_configure+0x86>
   2242e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   22432:	d061      	beq.n	224f8 <uarte_nrfx_configure+0xf8>
   22434:	d814      	bhi.n	22460 <uarte_nrfx_configure+0x60>
   22436:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   2243a:	d05f      	beq.n	224fc <uarte_nrfx_configure+0xfc>
   2243c:	d808      	bhi.n	22450 <uarte_nrfx_configure+0x50>
   2243e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   22442:	d05e      	beq.n	22502 <uarte_nrfx_configure+0x102>
   22444:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   22448:	d05e      	beq.n	22508 <uarte_nrfx_configure+0x108>
   2244a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2244e:	e04f      	b.n	224f0 <uarte_nrfx_configure+0xf0>
   22450:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   22454:	d05b      	beq.n	2250e <uarte_nrfx_configure+0x10e>
   22456:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   2245a:	d1f6      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   2245c:	4b36      	ldr	r3, [pc, #216]	; (22538 <uarte_nrfx_configure+0x138>)
   2245e:	e03c      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   22460:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   22464:	d056      	beq.n	22514 <uarte_nrfx_configure+0x114>
   22466:	d807      	bhi.n	22478 <uarte_nrfx_configure+0x78>
   22468:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   2246c:	d054      	beq.n	22518 <uarte_nrfx_configure+0x118>
   2246e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   22472:	d1ea      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   22474:	4b31      	ldr	r3, [pc, #196]	; (2253c <uarte_nrfx_configure+0x13c>)
   22476:	e030      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   22478:	f647 2612 	movw	r6, #31250	; 0x7a12
   2247c:	42b3      	cmp	r3, r6
   2247e:	d1e4      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   22480:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   22484:	e029      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   22486:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   2248a:	d047      	beq.n	2251c <uarte_nrfx_configure+0x11c>
   2248c:	d813      	bhi.n	224b6 <uarte_nrfx_configure+0xb6>
   2248e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   22492:	d046      	beq.n	22522 <uarte_nrfx_configure+0x122>
   22494:	d809      	bhi.n	224aa <uarte_nrfx_configure+0xaa>
   22496:	f64d 26c0 	movw	r6, #56000	; 0xdac0
   2249a:	42b3      	cmp	r3, r6
   2249c:	d043      	beq.n	22526 <uarte_nrfx_configure+0x126>
   2249e:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   224a2:	d1d2      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   224a4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   224a8:	e017      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   224aa:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   224ae:	d1cc      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   224b0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   224b4:	e011      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   224b6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   224ba:	d037      	beq.n	2252c <uarte_nrfx_configure+0x12c>
   224bc:	d808      	bhi.n	224d0 <uarte_nrfx_configure+0xd0>
   224be:	4e20      	ldr	r6, [pc, #128]	; (22540 <uarte_nrfx_configure+0x140>)
   224c0:	42b3      	cmp	r3, r6
   224c2:	d036      	beq.n	22532 <uarte_nrfx_configure+0x132>
   224c4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   224c8:	d1bf      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   224ca:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   224ce:	e004      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   224d0:	4e1c      	ldr	r6, [pc, #112]	; (22544 <uarte_nrfx_configure+0x144>)
   224d2:	42b3      	cmp	r3, r6
   224d4:	d1b9      	bne.n	2244a <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   224d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
   224da:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   224dc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
   224e0:	1d03      	adds	r3, r0, #4
   224e2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   224e4:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   224e6:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   224ea:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   224ee:	2000      	movs	r0, #0
}
   224f0:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   224f2:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   224f6:	e7f0      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   224f8:	4b13      	ldr	r3, [pc, #76]	; (22548 <uarte_nrfx_configure+0x148>)
   224fa:	e7ee      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   224fc:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   22500:	e7eb      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
   22502:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   22506:	e7e8      	b.n	224da <uarte_nrfx_configure+0xda>
	switch (baudrate) {
   22508:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   2250c:	e7e5      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   2250e:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   22512:	e7e2      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   22514:	4b0d      	ldr	r3, [pc, #52]	; (2254c <uarte_nrfx_configure+0x14c>)
   22516:	e7e0      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   22518:	4b0d      	ldr	r3, [pc, #52]	; (22550 <uarte_nrfx_configure+0x150>)
   2251a:	e7de      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   2251c:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   22520:	e7db      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   22522:	4b0c      	ldr	r3, [pc, #48]	; (22554 <uarte_nrfx_configure+0x154>)
   22524:	e7d9      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   22526:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   2252a:	e7d6      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   2252c:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   22530:	e7d3      	b.n	224da <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   22532:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   22536:	e7d0      	b.n	224da <uarte_nrfx_configure+0xda>
   22538:	0013b000 	.word	0x0013b000
   2253c:	004ea000 	.word	0x004ea000
   22540:	0003d090 	.word	0x0003d090
   22544:	000f4240 	.word	0x000f4240
   22548:	00275000 	.word	0x00275000
   2254c:	0075c000 	.word	0x0075c000
   22550:	003af000 	.word	0x003af000
   22554:	013a9000 	.word	0x013a9000

00022558 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   22558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
   2255a:	6906      	ldr	r6, [r0, #16]
{
   2255c:	4605      	mov	r5, r0
   2255e:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   22560:	f00b faed 	bl	2db3e <k_is_in_isr>
   22564:	b910      	cbnz	r0, 2256c <uarte_nrfx_poll_out+0x14>
   22566:	4b2c      	ldr	r3, [pc, #176]	; (22618 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   22568:	781b      	ldrb	r3, [r3, #0]
   2256a:	b983      	cbnz	r3, 2258e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   2256c:	f04f 0320 	mov.w	r3, #32
   22570:	f3ef 8411 	mrs	r4, BASEPRI
   22574:	f383 8812 	msr	BASEPRI_MAX, r3
   22578:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   2257c:	6868      	ldr	r0, [r5, #4]
   2257e:	f00b f8f6 	bl	2d76e <is_tx_ready.isra.0>
   22582:	bb28      	cbnz	r0, 225d0 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   22584:	f384 8811 	msr	BASEPRI, r4
   22588:	f3bf 8f6f 	isb	sy
}
   2258c:	e7ee      	b.n	2256c <uarte_nrfx_poll_out+0x14>
{
   2258e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22590:	6868      	ldr	r0, [r5, #4]
   22592:	f00b f8ec 	bl	2d76e <is_tx_ready.isra.0>
   22596:	b970      	cbnz	r0, 225b6 <uarte_nrfx_poll_out+0x5e>
   22598:	2001      	movs	r0, #1
   2259a:	f00b f945 	bl	2d828 <nrfx_busy_wait>
   2259e:	3c01      	subs	r4, #1
   225a0:	d1f6      	bne.n	22590 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   225a2:	2100      	movs	r1, #0
   225a4:	2021      	movs	r0, #33	; 0x21
   225a6:	f003 f86f 	bl	25688 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   225aa:	e7f0      	b.n	2258e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   225ac:	f384 8811 	msr	BASEPRI, r4
   225b0:	f3bf 8f6f 	isb	sy
}
   225b4:	e7f5      	b.n	225a2 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   225b6:	f04f 0320 	mov.w	r3, #32
   225ba:	f3ef 8411 	mrs	r4, BASEPRI
   225be:	f383 8812 	msr	BASEPRI_MAX, r3
   225c2:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   225c6:	6868      	ldr	r0, [r5, #4]
   225c8:	f00b f8d1 	bl	2d76e <is_tx_ready.isra.0>
   225cc:	2800      	cmp	r0, #0
   225ce:	d0ed      	beq.n	225ac <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   225d0:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   225d4:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   225d6:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   225d8:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   225da:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   225de:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   225e2:	2200      	movs	r2, #0
   225e4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   225e8:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   225ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   225f0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   225f4:	684a      	ldr	r2, [r1, #4]
   225f6:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   225f8:	bf41      	itttt	mi
   225fa:	2208      	movmi	r2, #8
   225fc:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   22600:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   22604:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22608:	2201      	movs	r2, #1
   2260a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   2260c:	f384 8811 	msr	BASEPRI, r4
   22610:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   22614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22616:	bf00      	nop
   22618:	20003f38 	.word	0x20003f38

0002261c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2261c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22620:	2101      	movs	r1, #1
   22622:	4606      	mov	r6, r0
   22624:	b089      	sub	sp, #36	; 0x24
   22626:	2200      	movs	r2, #0
   22628:	2002      	movs	r0, #2
   2262a:	f7e5 f847 	bl	76bc <z_arm_irq_priority_set>
   2262e:	2002      	movs	r0, #2
   22630:	f7e5 f812 	bl	7658 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
   22634:	6877      	ldr	r7, [r6, #4]
	struct uarte_nrfx_data *data = dev->data;
   22636:	6935      	ldr	r5, [r6, #16]
	return config->uarte_regs;
   22638:	683c      	ldr	r4, [r7, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2263a:	2300      	movs	r3, #0
   2263c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   22640:	602e      	str	r6, [r5, #0]
	uarte_nrfx_pins_configure(dev, false);
   22642:	6873      	ldr	r3, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   22644:	68d8      	ldr	r0, [r3, #12]
   22646:	1c41      	adds	r1, r0, #1
   22648:	d00c      	beq.n	22664 <uarte_0_init+0x48>
    *p_pin = pin_number & 0x1F;
   2264a:	f000 021f 	and.w	r2, r0, #31
    p_reg->OUTSET = set_mask;
   2264e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   22652:	2101      	movs	r1, #1
   22654:	4091      	lsls	r1, r2
    reg->PIN_CNF[pin_number] = cnf;
   22656:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   2265a:	f8cc 1508 	str.w	r1, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   2265e:	2103      	movs	r1, #3
   22660:	f84c 1022 	str.w	r1, [ip, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   22664:	6919      	ldr	r1, [r3, #16]
   22666:	1c4a      	adds	r2, r1, #1
   22668:	d010      	beq.n	2268c <uarte_0_init+0x70>
			nrf_gpio_cfg_input(cfg->rx_pin,
   2266a:	7f1a      	ldrb	r2, [r3, #28]
   2266c:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   2266e:	f001 021f 	and.w	r2, r1, #31
   22672:	bf14      	ite	ne
   22674:	f04f 0c03 	movne.w	ip, #3
   22678:	f04f 0c00 	moveq.w	ip, #0
    reg->PIN_CNF[pin_number] = cnf;
   2267c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   22680:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   22684:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   22688:	f84e c022 	str.w	ip, [lr, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2268c:	f8d3 c014 	ldr.w	ip, [r3, #20]
   22690:	f1bc 3fff 	cmp.w	ip, #4294967295	; 0xffffffff
   22694:	d00f      	beq.n	226b6 <uarte_0_init+0x9a>
    *p_pin = pin_number & 0x1F;
   22696:	f00c 021f 	and.w	r2, ip, #31
    p_reg->OUTSET = set_mask;
   2269a:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   2269e:	f04f 0e01 	mov.w	lr, #1
   226a2:	fa0e fe02 	lsl.w	lr, lr, r2
    reg->PIN_CNF[pin_number] = cnf;
   226a6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
   226aa:	f8c8 e508 	str.w	lr, [r8, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   226ae:	f04f 0e03 	mov.w	lr, #3
   226b2:	f848 e022 	str.w	lr, [r8, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   226b6:	f8d3 e018 	ldr.w	lr, [r3, #24]
   226ba:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
   226be:	d010      	beq.n	226e2 <uarte_0_init+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
   226c0:	7f5a      	ldrb	r2, [r3, #29]
   226c2:	2a00      	cmp	r2, #0
    *p_pin = pin_number & 0x1F;
   226c4:	f00e 021f 	and.w	r2, lr, #31
   226c8:	bf14      	ite	ne
   226ca:	f04f 0803 	movne.w	r8, #3
   226ce:	f04f 0800 	moveq.w	r8, #0
    reg->PIN_CNF[pin_number] = cnf;
   226d2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   226d6:	f04f 49a0 	mov.w	r9, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   226da:	ea4f 0888 	mov.w	r8, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   226de:	f849 8022 	str.w	r8, [r9, r2, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   226e2:	681b      	ldr	r3, [r3, #0]
    p_reg->PSEL.TXD = pseltxd;
   226e4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   226e8:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	err = uarte_nrfx_configure(dev, &data->uart_config);
   226ec:	4630      	mov	r0, r6
    p_reg->PSEL.RTS = pselrts;
   226ee:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
   226f2:	1d29      	adds	r1, r5, #4
    p_reg->PSEL.CTS = pselcts;
   226f4:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
   226f8:	f7ff fe82 	bl	22400 <uarte_nrfx_configure>
	if (err) {
   226fc:	4606      	mov	r6, r0
   226fe:	b9b8      	cbnz	r0, 22730 <uarte_0_init+0x114>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   22700:	687b      	ldr	r3, [r7, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   22702:	0799      	lsls	r1, r3, #30
   22704:	d52b      	bpl.n	2275e <uarte_0_init+0x142>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   22706:	f105 0012 	add.w	r0, r5, #18
   2270a:	f001 f987 	bl	23a1c <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   2270e:	4b28      	ldr	r3, [pc, #160]	; (227b0 <uarte_0_init+0x194>)
   22710:	4298      	cmp	r0, r3
   22712:	d011      	beq.n	22738 <uarte_0_init+0x11c>
		LOG_ERR("Failed to allocate PPI Channel");
   22714:	4b27      	ldr	r3, [pc, #156]	; (227b4 <uarte_0_init+0x198>)
   22716:	9306      	str	r3, [sp, #24]
   22718:	2302      	movs	r3, #2
   2271a:	9301      	str	r3, [sp, #4]
   2271c:	9305      	str	r3, [sp, #20]
   2271e:	4826      	ldr	r0, [pc, #152]	; (227b8 <uarte_0_init+0x19c>)
   22720:	4633      	mov	r3, r6
   22722:	aa05      	add	r2, sp, #20
   22724:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
   22728:	f06f 0604 	mvn.w	r6, #4
   2272c:	f006 f9c0 	bl	28ab0 <z_impl_z_log_msg2_static_create>
UART_NRF_UARTE_DEVICE(0);
   22730:	4630      	mov	r0, r6
   22732:	b009      	add	sp, #36	; 0x24
   22734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   22738:	7ca8      	ldrb	r0, [r5, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   2273a:	00c3      	lsls	r3, r0, #3
   2273c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22740:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   22744:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   22748:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2274c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   22750:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   22754:	4a19      	ldr	r2, [pc, #100]	; (227bc <uarte_0_init+0x1a0>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   22756:	2301      	movs	r3, #1
   22758:	4083      	lsls	r3, r0
   2275a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2275e:	2308      	movs	r3, #8
   22760:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   22764:	7a3b      	ldrb	r3, [r7, #8]
   22766:	b95b      	cbnz	r3, 22780 <uarte_0_init+0x164>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22768:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   2276c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   22770:	f105 0311 	add.w	r3, r5, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   22774:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   22778:	2301      	movs	r3, #1
   2277a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2277e:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   22780:	687b      	ldr	r3, [r7, #4]
   22782:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   22784:	bf5c      	itt	pl
   22786:	f44f 7280 	movpl.w	r2, #256	; 0x100
   2278a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2278e:	06db      	lsls	r3, r3, #27
   22790:	bf44      	itt	mi
   22792:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   22796:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2279a:	3510      	adds	r5, #16
    p_reg->TXD.MAXCNT = length;
   2279c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2279e:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   227a2:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   227a6:	2301      	movs	r3, #1
   227a8:	60a3      	str	r3, [r4, #8]
   227aa:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   227ac:	e7c0      	b.n	22730 <uarte_0_init+0x114>
   227ae:	bf00      	nop
   227b0:	0bad0000 	.word	0x0bad0000
   227b4:	00033c2b 	.word	0x00033c2b
   227b8:	0002f57c 	.word	0x0002f57c
   227bc:	4001f000 	.word	0x4001f000

000227c0 <random_byte_get>:
	__asm__ volatile(
   227c0:	f04f 0320 	mov.w	r3, #32
   227c4:	f3ef 8211 	mrs	r2, BASEPRI
   227c8:	f383 8812 	msr	BASEPRI_MAX, r3
   227cc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   227d0:	4b09      	ldr	r3, [pc, #36]	; (227f8 <random_byte_get+0x38>)
   227d2:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   227d6:	b161      	cbz	r1, 227f2 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   227d8:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   227da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   227de:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   227e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   227e6:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   227e8:	f382 8811 	msr	BASEPRI, r2
   227ec:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   227f0:	4770      	bx	lr
	int retval = -EAGAIN;
   227f2:	f06f 000a 	mvn.w	r0, #10
   227f6:	e7f7      	b.n	227e8 <random_byte_get+0x28>
   227f8:	4000d000 	.word	0x4000d000

000227fc <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   227fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   227fe:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   22800:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   22802:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   22804:	f04f 0020 	mov.w	r0, #32
   22808:	f3ef 8e11 	mrs	lr, BASEPRI
   2280c:	f380 8812 	msr	BASEPRI_MAX, r0
   22810:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   22814:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   22816:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   2281a:	1ba4      	subs	r4, r4, r6
   2281c:	403c      	ands	r4, r7
	if (available < len) {
   2281e:	42a2      	cmp	r2, r4
		len = available;
   22820:	bf88      	it	hi
   22822:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   22824:	18b0      	adds	r0, r6, r2
   22826:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   22828:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2282a:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   2282c:	f38e 8811 	msr	BASEPRI, lr
   22830:	f3bf 8f6f 	isb	sy
   22834:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   22836:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   22838:	4290      	cmp	r0, r2
   2283a:	d119      	bne.n	22870 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   2283c:	4566      	cmp	r6, ip
   2283e:	d10d      	bne.n	2285c <rng_pool_get+0x60>
	__asm__ volatile(
   22840:	f04f 0520 	mov.w	r5, #32
   22844:	f3ef 8011 	mrs	r0, BASEPRI
   22848:	f385 8812 	msr	BASEPRI_MAX, r5
   2284c:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   22850:	781d      	ldrb	r5, [r3, #0]
   22852:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   22854:	f380 8811 	msr	BASEPRI, r0
   22858:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   2285c:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   2285e:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   22860:	b290      	uxth	r0, r2
	available = available - len;
   22862:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   22864:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22866:	bf22      	ittt	cs
   22868:	4b06      	ldrcs	r3, [pc, #24]	; (22884 <rng_pool_get+0x88>)
   2286a:	2201      	movcs	r2, #1
   2286c:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   2286e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   22870:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   22874:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   22876:	f89e e005 	ldrb.w	lr, [lr, #5]
   2287a:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   2287e:	403d      	ands	r5, r7
   22880:	e7da      	b.n	22838 <rng_pool_get+0x3c>
   22882:	bf00      	nop
   22884:	4000d000 	.word	0x4000d000

00022888 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == dev->data);

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22888:	43db      	mvns	r3, r3
{
   2288a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2288e:	f013 0501 	ands.w	r5, r3, #1
{
   22892:	460e      	mov	r6, r1
   22894:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22896:	d004      	beq.n	228a2 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   22898:	4821      	ldr	r0, [pc, #132]	; (22920 <entropy_nrf5_get_entropy_isr+0x98>)
   2289a:	f7ff ffaf 	bl	227fc <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2289e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   228a2:	b3a2      	cbz	r2, 2290e <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   228a4:	f04f 0320 	mov.w	r3, #32
   228a8:	f3ef 8811 	mrs	r8, BASEPRI
   228ac:	f383 8812 	msr	BASEPRI_MAX, r3
   228b0:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   228b4:	200d      	movs	r0, #13
   228b6:	f7e4 fef3 	bl	76a0 <arch_irq_is_enabled>
   228ba:	4607      	mov	r7, r0
		irq_disable(IRQN);
   228bc:	200d      	movs	r0, #13
   228be:	f7e4 fedb 	bl	7678 <arch_irq_disable>
	__asm__ volatile(
   228c2:	f388 8811 	msr	BASEPRI, r8
   228c6:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   228ca:	f8df 8058 	ldr.w	r8, [pc, #88]	; 22924 <entropy_nrf5_get_entropy_isr+0x9c>
   228ce:	f8df 9058 	ldr.w	r9, [pc, #88]	; 22928 <entropy_nrf5_get_entropy_isr+0xa0>
   228d2:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   228d6:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   228da:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   228de:	2301      	movs	r3, #1
   228e0:	f8c8 3000 	str.w	r3, [r8]
   228e4:	4625      	mov	r5, r4
   228e6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   228ea:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   228ee:	b183      	cbz	r3, 22912 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   228f0:	f7ff ff66 	bl	227c0 <random_byte_get>
			if (byte < 0) {
   228f4:	1e03      	subs	r3, r0, #0
   228f6:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   228fa:	dbf6      	blt.n	228ea <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   228fc:	3d01      	subs	r5, #1
   228fe:	b2ad      	uxth	r5, r5
   22900:	5573      	strb	r3, [r6, r5]
		} while (len);
   22902:	2d00      	cmp	r5, #0
   22904:	d1f1      	bne.n	228ea <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   22906:	b117      	cbz	r7, 2290e <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   22908:	200d      	movs	r0, #13
   2290a:	f7e4 fea5 	bl	7658 <arch_irq_enable>
	return cnt;
   2290e:	4620      	mov	r0, r4
   22910:	e7c5      	b.n	2289e <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   22912:	f3bf 8f4f 	dsb	sy
				__WFE();
   22916:	bf20      	wfe
				__SEV();
   22918:	bf40      	sev
				__WFE();
   2291a:	bf20      	wfe
   2291c:	e7e5      	b.n	228ea <entropy_nrf5_get_entropy_isr+0x62>
   2291e:	bf00      	nop
   22920:	200037b8 	.word	0x200037b8
   22924:	4000d000 	.word	0x4000d000
   22928:	e000e100 	.word	0xe000e100

0002292c <entropy_nrf5_get_entropy>:
{
   2292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   22930:	4f13      	ldr	r7, [pc, #76]	; (22980 <entropy_nrf5_get_entropy+0x54>)
   22932:	460d      	mov	r5, r1
   22934:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   22936:	f107 0845 	add.w	r8, r7, #69	; 0x45
   2293a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   2293e:	b914      	cbnz	r4, 22946 <entropy_nrf5_get_entropy+0x1a>
}
   22940:	4620      	mov	r0, r4
   22942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2294a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2294e:	4638      	mov	r0, r7
   22950:	f002 f9dc 	bl	24d0c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   22954:	4622      	mov	r2, r4
   22956:	4629      	mov	r1, r5
   22958:	4640      	mov	r0, r8
   2295a:	f7ff ff4f 	bl	227fc <rng_pool_get>
   2295e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   22960:	4638      	mov	r0, r7
   22962:	f002 f9ad 	bl	24cc0 <z_impl_k_sem_give>
		if (bytes == 0U) {
   22966:	b93e      	cbnz	r6, 22978 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   22968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2296c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   22970:	4648      	mov	r0, r9
   22972:	f002 f9cb 	bl	24d0c <z_impl_k_sem_take>
			continue;
   22976:	e7e2      	b.n	2293e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   22978:	1ba4      	subs	r4, r4, r6
   2297a:	b2a4      	uxth	r4, r4
		buf += bytes;
   2297c:	4435      	add	r5, r6
   2297e:	e7de      	b.n	2293e <entropy_nrf5_get_entropy+0x12>
   22980:	20003788 	.word	0x20003788

00022984 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22984:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   22986:	4c19      	ldr	r4, [pc, #100]	; (229ec <entropy_nrf5_init+0x68>)
   22988:	2201      	movs	r2, #1
   2298a:	4611      	mov	r1, r2
   2298c:	4620      	mov	r0, r4
   2298e:	f00b f9e6 	bl	2dd5e <z_impl_k_sem_init>
   22992:	2201      	movs	r2, #1
   22994:	2100      	movs	r1, #0
   22996:	f104 0018 	add.w	r0, r4, #24
   2299a:	f00b f9e0 	bl	2dd5e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2299e:	f240 4307 	movw	r3, #1031	; 0x407
   229a2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   229a6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   229aa:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   229ac:	230c      	movs	r3, #12
   229ae:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   229b2:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   229b4:	4b0e      	ldr	r3, [pc, #56]	; (229f0 <entropy_nrf5_init+0x6c>)
   229b6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   229ba:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   229be:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   229c2:	f042 0201 	orr.w	r2, r2, #1
   229c6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   229ca:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   229cc:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   229d0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   229d4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   229d8:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   229da:	6019      	str	r1, [r3, #0]
   229dc:	200d      	movs	r0, #13
   229de:	f7e4 fe6d 	bl	76bc <z_arm_irq_priority_set>
	irq_enable(IRQN);
   229e2:	200d      	movs	r0, #13
   229e4:	f7e4 fe38 	bl	7658 <arch_irq_enable>

	return 0;
}
   229e8:	4628      	mov	r0, r5
   229ea:	bd38      	pop	{r3, r4, r5, pc}
   229ec:	20003788 	.word	0x20003788
   229f0:	4000d000 	.word	0x4000d000

000229f4 <isr>:
{
   229f4:	b510      	push	{r4, lr}
	byte = random_byte_get();
   229f6:	f7ff fee3 	bl	227c0 <random_byte_get>
	if (byte < 0) {
   229fa:	2800      	cmp	r0, #0
   229fc:	db20      	blt.n	22a40 <isr+0x4c>
	uint8_t last  = rngp->last;
   229fe:	4b17      	ldr	r3, [pc, #92]	; (22a5c <isr+0x68>)
   22a00:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   22a04:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   22a08:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   22a0c:	1a51      	subs	r1, r2, r1
   22a0e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   22a12:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   22a14:	d10d      	bne.n	22a32 <isr+0x3e>
	uint8_t last  = rngp->last;
   22a16:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   22a1a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   22a1e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   22a22:	1a51      	subs	r1, r2, r1
   22a24:	ea34 0101 	bics.w	r1, r4, r1
   22a28:	d10b      	bne.n	22a42 <isr+0x4e>
   22a2a:	4b0d      	ldr	r3, [pc, #52]	; (22a60 <isr+0x6c>)
   22a2c:	2201      	movs	r2, #1
   22a2e:	605a      	str	r2, [r3, #4]
}
   22a30:	e00e      	b.n	22a50 <isr+0x5c>
	rngp->buffer[last] = byte;
   22a32:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22a34:	3201      	adds	r2, #1
   22a36:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22a38:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   22a3c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   22a40:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   22a42:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22a44:	3201      	adds	r2, #1
   22a46:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22a48:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   22a4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   22a50:	4804      	ldr	r0, [pc, #16]	; (22a64 <isr+0x70>)
}
   22a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22a56:	f002 b933 	b.w	24cc0 <z_impl_k_sem_give>
   22a5a:	bf00      	nop
   22a5c:	20003788 	.word	0x20003788
   22a60:	4000d000 	.word	0x4000d000
   22a64:	200037a0 	.word	0x200037a0

00022a68 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
   22a68:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   22a6a:	2301      	movs	r3, #1
   22a6c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22a6e:	4a11      	ldr	r2, [pc, #68]	; (22ab4 <compare_int_lock+0x4c>)
   22a70:	f3bf 8f5b 	dmb	ish
   22a74:	43dc      	mvns	r4, r3
   22a76:	e852 1f00 	ldrex	r1, [r2]
   22a7a:	ea01 0c04 	and.w	ip, r1, r4
   22a7e:	e842 ce00 	strex	lr, ip, [r2]
   22a82:	f1be 0f00 	cmp.w	lr, #0
   22a86:	d1f6      	bne.n	22a76 <compare_int_lock+0xe>
   22a88:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   22a90:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   22a94:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22a98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   22a9c:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   22aa0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   22aa4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
   22aa8:	420b      	tst	r3, r1
}
   22aaa:	bf14      	ite	ne
   22aac:	2001      	movne	r0, #1
   22aae:	2000      	moveq	r0, #0
   22ab0:	bd10      	pop	{r4, pc}
   22ab2:	bf00      	nop
   22ab4:	200037e0 	.word	0x200037e0

00022ab8 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22ab8:	4919      	ldr	r1, [pc, #100]	; (22b20 <sys_clock_timeout_handler+0x68>)
{
   22aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22abc:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   22abe:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22ac2:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   22ac4:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22ac8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22acc:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   22ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22ad2:	d222      	bcs.n	22b1a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22ad4:	4b13      	ldr	r3, [pc, #76]	; (22b24 <sys_clock_timeout_handler+0x6c>)
   22ad6:	681b      	ldr	r3, [r3, #0]
   22ad8:	0a1a      	lsrs	r2, r3, #8
   22ada:	061b      	lsls	r3, r3, #24
   22adc:	195e      	adds	r6, r3, r5
   22ade:	4b12      	ldr	r3, [pc, #72]	; (22b28 <sys_clock_timeout_handler+0x70>)
   22ae0:	f142 0700 	adc.w	r7, r2, #0
   22ae4:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
   22ae8:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   22aea:	f002 ff3f 	bl	2596c <sys_clock_announce>
    return p_reg->CC[ch];
   22aee:	00a3      	lsls	r3, r4, #2
   22af0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22af4:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   22af8:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   22afc:	42aa      	cmp	r2, r5
   22afe:	d10b      	bne.n	22b18 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   22b00:	b91e      	cbnz	r6, 22b0a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
   22b02:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   22b06:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->EVTENSET = mask;
   22b0a:	4b08      	ldr	r3, [pc, #32]	; (22b2c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22b10:	fa00 f404 	lsl.w	r4, r0, r4
   22b14:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   22b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
   22b1a:	2600      	movs	r6, #0
   22b1c:	e7e5      	b.n	22aea <sys_clock_timeout_handler+0x32>
   22b1e:	bf00      	nop
   22b20:	20001fd8 	.word	0x20001fd8
   22b24:	200037e4 	.word	0x200037e4
   22b28:	20001fc0 	.word	0x20001fc0
   22b2c:	40011000 	.word	0x40011000

00022b30 <compare_int_unlock>:
	if (key) {
   22b30:	b319      	cbz	r1, 22b7a <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22b32:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
   22b36:	2301      	movs	r3, #1
   22b38:	4a10      	ldr	r2, [pc, #64]	; (22b7c <compare_int_unlock+0x4c>)
   22b3a:	4083      	lsls	r3, r0
   22b3c:	e852 1f00 	ldrex	r1, [r2]
   22b40:	4319      	orrs	r1, r3
   22b42:	e842 1c00 	strex	ip, r1, [r2]
   22b46:	f1bc 0f00 	cmp.w	ip, #0
   22b4a:	d1f7      	bne.n	22b3c <compare_int_unlock+0xc>
   22b4c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   22b50:	4a0b      	ldr	r2, [pc, #44]	; (22b80 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22b52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22b56:	4083      	lsls	r3, r0
   22b58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22b5c:	4b09      	ldr	r3, [pc, #36]	; (22b84 <compare_int_unlock+0x54>)
   22b5e:	f3bf 8f5b 	dmb	ish
   22b62:	681b      	ldr	r3, [r3, #0]
   22b64:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22b68:	fa23 f000 	lsr.w	r0, r3, r0
   22b6c:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22b6e:	bf42      	ittt	mi
   22b70:	4b05      	ldrmi	r3, [pc, #20]	; (22b88 <compare_int_unlock+0x58>)
   22b72:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   22b76:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22b7a:	4770      	bx	lr
   22b7c:	200037e0 	.word	0x200037e0
   22b80:	40011000 	.word	0x40011000
   22b84:	200037dc 	.word	0x200037dc
   22b88:	e000e100 	.word	0xe000e100

00022b8c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22b8c:	4b0d      	ldr	r3, [pc, #52]	; (22bc4 <z_nrf_rtc_timer_read+0x38>)
   22b8e:	6818      	ldr	r0, [r3, #0]
   22b90:	0a01      	lsrs	r1, r0, #8
   22b92:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22b94:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22b98:	4b0b      	ldr	r3, [pc, #44]	; (22bc8 <z_nrf_rtc_timer_read+0x3c>)
   22b9a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22b9e:	1818      	adds	r0, r3, r0
   22ba0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22ba4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22ba8:	d20a      	bcs.n	22bc0 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22baa:	4b08      	ldr	r3, [pc, #32]	; (22bcc <z_nrf_rtc_timer_read+0x40>)
   22bac:	e9d3 2300 	ldrd	r2, r3, [r3]
   22bb0:	4290      	cmp	r0, r2
   22bb2:	eb71 0303 	sbcs.w	r3, r1, r3
   22bb6:	d203      	bcs.n	22bc0 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22bb8:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22bbc:	f141 0100 	adc.w	r1, r1, #0
}
   22bc0:	4770      	bx	lr
   22bc2:	bf00      	nop
   22bc4:	200037e4 	.word	0x200037e4
   22bc8:	40011000 	.word	0x40011000
   22bcc:	20001fc0 	.word	0x20001fc0

00022bd0 <compare_set>:
{
   22bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bd4:	b085      	sub	sp, #20
   22bd6:	4616      	mov	r6, r2
   22bd8:	4698      	mov	r8, r3
   22bda:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   22bdc:	f7ff ff44 	bl	22a68 <compare_int_lock>
   22be0:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22be2:	f7ff ffd3 	bl	22b8c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22be6:	42b0      	cmp	r0, r6
   22be8:	eb71 0308 	sbcs.w	r3, r1, r8
   22bec:	d278      	bcs.n	22ce0 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
   22bee:	4b46      	ldr	r3, [pc, #280]	; (22d08 <compare_set+0x138>)
   22bf0:	1a30      	subs	r0, r6, r0
   22bf2:	eb68 0101 	sbc.w	r1, r8, r1
   22bf6:	4298      	cmp	r0, r3
   22bf8:	f171 0300 	sbcs.w	r3, r1, #0
   22bfc:	f080 8081 	bcs.w	22d02 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
   22c00:	4b42      	ldr	r3, [pc, #264]	; (22d0c <compare_set+0x13c>)
   22c02:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   22c06:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
   22c0a:	45d8      	cmp	r8, fp
   22c0c:	bf08      	it	eq
   22c0e:	4556      	cmpeq	r6, sl
   22c10:	d051      	beq.n	22cb6 <compare_set+0xe6>
   22c12:	ea4f 0985 	mov.w	r9, r5, lsl #2
   22c16:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22c1a:	f105 0750 	add.w	r7, r5, #80	; 0x50
   22c1e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
   22c22:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c24:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   22c28:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22c2c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
   22c2e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
   22c32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22c36:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
   22c38:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   22c3c:	4b34      	ldr	r3, [pc, #208]	; (22d10 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22c3e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22c42:	4614      	mov	r4, r2
     return p_reg->COUNTER;
   22c44:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22c48:	1a40      	subs	r0, r0, r1
   22c4a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22c4e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22c52:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22c54:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
   22c58:	d107      	bne.n	22c6a <compare_set+0x9a>
   22c5a:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
   22c5e:	2013      	movs	r0, #19
   22c60:	f00b fac6 	bl	2e1f0 <z_impl_k_busy_wait>
   22c64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   22c68:	4b29      	ldr	r3, [pc, #164]	; (22d10 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22c6a:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
   22c6e:	eba4 000c 	sub.w	r0, r4, ip
   22c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   22c76:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22c7a:	bf88      	it	hi
   22c7c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22c7e:	2000      	movs	r0, #0
   22c80:	6038      	str	r0, [r7, #0]
   22c82:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
   22c84:	9801      	ldr	r0, [sp, #4]
   22c86:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22c8a:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   22c8e:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   22c92:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   22c96:	4281      	cmp	r1, r0
   22c98:	d006      	beq.n	22ca8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
   22c9a:	1a20      	subs	r0, r4, r0
   22c9c:	3802      	subs	r0, #2
   22c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22ca2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22ca6:	d819      	bhi.n	22cdc <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
   22ca8:	1aa4      	subs	r4, r4, r2
   22caa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22cae:	eb14 0a06 	adds.w	sl, r4, r6
   22cb2:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
   22cb6:	4915      	ldr	r1, [pc, #84]	; (22d0c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
   22cb8:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
   22cba:	012b      	lsls	r3, r5, #4
   22cbc:	eb01 1205 	add.w	r2, r1, r5, lsl #4
   22cc0:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
   22cc4:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
   22cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   22cc8:	6053      	str	r3, [r2, #4]
	return ret;
   22cca:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
   22ccc:	4628      	mov	r0, r5
   22cce:	9900      	ldr	r1, [sp, #0]
   22cd0:	f7ff ff2e 	bl	22b30 <compare_int_unlock>
}
   22cd4:	4620      	mov	r0, r4
   22cd6:	b005      	add	sp, #20
   22cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22cdc:	4620      	mov	r0, r4
   22cde:	e7b1      	b.n	22c44 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
   22ce0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22ce2:	4a0c      	ldr	r2, [pc, #48]	; (22d14 <compare_set+0x144>)
   22ce4:	f3bf 8f5b 	dmb	ish
   22ce8:	40ab      	lsls	r3, r5
   22cea:	e852 1f00 	ldrex	r1, [r2]
   22cee:	4319      	orrs	r1, r3
   22cf0:	e842 1000 	strex	r0, r1, [r2]
   22cf4:	2800      	cmp	r0, #0
   22cf6:	d1f8      	bne.n	22cea <compare_set+0x11a>
   22cf8:	f3bf 8f5b 	dmb	ish
   22cfc:	46b2      	mov	sl, r6
   22cfe:	46c3      	mov	fp, r8
   22d00:	e7d9      	b.n	22cb6 <compare_set+0xe6>
			return -EINVAL;
   22d02:	f06f 0415 	mvn.w	r4, #21
   22d06:	e7e1      	b.n	22ccc <compare_set+0xfc>
   22d08:	01000001 	.word	0x01000001
   22d0c:	20001fc8 	.word	0x20001fc8
   22d10:	40011000 	.word	0x40011000
   22d14:	200037dc 	.word	0x200037dc

00022d18 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d1a:	4b19      	ldr	r3, [pc, #100]	; (22d80 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   22d1c:	4d19      	ldr	r5, [pc, #100]	; (22d84 <sys_clock_driver_init+0x6c>)
   22d1e:	2400      	movs	r4, #0
   22d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22d28:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   22d2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22d30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22d34:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22d38:	4b13      	ldr	r3, [pc, #76]	; (22d88 <sys_clock_driver_init+0x70>)
   22d3a:	2602      	movs	r6, #2
   22d3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22d40:	2101      	movs	r1, #1
   22d42:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   22d46:	2011      	movs	r0, #17
   22d48:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22d4c:	4622      	mov	r2, r4
   22d4e:	f7e4 fcb5 	bl	76bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22d52:	2011      	movs	r0, #17
   22d54:	f7e4 fc80 	bl	7658 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22d58:	4a0c      	ldr	r2, [pc, #48]	; (22d8c <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22d5a:	2301      	movs	r3, #1
   22d5c:	60ab      	str	r3, [r5, #8]
   22d5e:	602b      	str	r3, [r5, #0]
   22d60:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22d62:	4b0b      	ldr	r3, [pc, #44]	; (22d90 <sys_clock_driver_init+0x78>)
   22d64:	4a0b      	ldr	r2, [pc, #44]	; (22d94 <sys_clock_driver_init+0x7c>)
   22d66:	9300      	str	r3, [sp, #0]
   22d68:	9401      	str	r4, [sp, #4]
   22d6a:	2300      	movs	r3, #0
   22d6c:	4620      	mov	r0, r4
   22d6e:	f7ff ff2f 	bl	22bd0 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22d72:	4630      	mov	r0, r6
   22d74:	f7fe f80a 	bl	20d8c <z_nrf_clock_control_lf_on>

	return 0;
}
   22d78:	4620      	mov	r0, r4
   22d7a:	b002      	add	sp, #8
   22d7c:	bd70      	pop	{r4, r5, r6, pc}
   22d7e:	bf00      	nop
   22d80:	20001fc8 	.word	0x20001fc8
   22d84:	40011000 	.word	0x40011000
   22d88:	e000e100 	.word	0xe000e100
   22d8c:	200037e0 	.word	0x200037e0
   22d90:	00022ab9 	.word	0x00022ab9
   22d94:	007fffff 	.word	0x007fffff

00022d98 <rtc_nrf_isr>:
{
   22d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
   22d9c:	4c35      	ldr	r4, [pc, #212]	; (22e74 <rtc_nrf_isr+0xdc>)
   22d9e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22da2:	079a      	lsls	r2, r3, #30
   22da4:	d50b      	bpl.n	22dbe <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22da6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22daa:	b143      	cbz	r3, 22dbe <rtc_nrf_isr+0x26>
		overflow_cnt++;
   22dac:	4a32      	ldr	r2, [pc, #200]	; (22e78 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22dae:	2300      	movs	r3, #0
   22db0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   22db4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   22db8:	6813      	ldr	r3, [r2, #0]
   22dba:	3301      	adds	r3, #1
   22dbc:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
   22dbe:	f04f 0320 	mov.w	r3, #32
   22dc2:	f3ef 8211 	mrs	r2, BASEPRI
   22dc6:	f383 8812 	msr	BASEPRI_MAX, r3
   22dca:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
   22dce:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22dd2:	03db      	lsls	r3, r3, #15
   22dd4:	d512      	bpl.n	22dfc <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22dd6:	f3bf 8f5b 	dmb	ish
   22dda:	4b28      	ldr	r3, [pc, #160]	; (22e7c <rtc_nrf_isr+0xe4>)
   22ddc:	e853 1f00 	ldrex	r1, [r3]
   22de0:	f021 0001 	bic.w	r0, r1, #1
   22de4:	e843 0600 	strex	r6, r0, [r3]
   22de8:	2e00      	cmp	r6, #0
   22dea:	d1f7      	bne.n	22ddc <rtc_nrf_isr+0x44>
   22dec:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22df0:	2900      	cmp	r1, #0
   22df2:	d136      	bne.n	22e62 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22df4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
   22df8:	2b00      	cmp	r3, #0
   22dfa:	d132      	bne.n	22e62 <rtc_nrf_isr+0xca>
{
   22dfc:	2300      	movs	r3, #0
	__asm__ volatile(
   22dfe:	f382 8811 	msr	BASEPRI, r2
   22e02:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
   22e06:	b34b      	cbz	r3, 22e5c <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
   22e08:	f7ff fec0 	bl	22b8c <z_nrf_rtc_timer_read>
	__asm__ volatile(
   22e0c:	f04f 0320 	mov.w	r3, #32
   22e10:	f3ef 8c11 	mrs	ip, BASEPRI
   22e14:	f383 8812 	msr	BASEPRI_MAX, r3
   22e18:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
   22e1c:	4b18      	ldr	r3, [pc, #96]	; (22e80 <rtc_nrf_isr+0xe8>)
   22e1e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
   22e22:	42b0      	cmp	r0, r6
   22e24:	eb71 0207 	sbcs.w	r2, r1, r7
   22e28:	f04f 0200 	mov.w	r2, #0
   22e2c:	d320      	bcc.n	22e70 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22e2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   22e32:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
   22e36:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22e3a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
   22e3e:	601a      	str	r2, [r3, #0]
    p_reg->EVTENCLR = mask;
   22e40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22e44:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
   22e48:	f38c 8811 	msr	BASEPRI, ip
   22e4c:	f3bf 8f6f 	isb	sy
		if (handler) {
   22e50:	b121      	cbz	r1, 22e5c <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
   22e52:	9500      	str	r5, [sp, #0]
   22e54:	4632      	mov	r2, r6
   22e56:	463b      	mov	r3, r7
   22e58:	2000      	movs	r0, #0
   22e5a:	4788      	blx	r1
}
   22e5c:	b003      	add	sp, #12
   22e5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22e62:	2300      	movs	r3, #0
   22e64:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
   22e68:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22e6c:	2301      	movs	r3, #1
}
   22e6e:	e7c6      	b.n	22dfe <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   22e70:	4611      	mov	r1, r2
   22e72:	e7e9      	b.n	22e48 <rtc_nrf_isr+0xb0>
   22e74:	40011000 	.word	0x40011000
   22e78:	200037e4 	.word	0x200037e4
   22e7c:	200037dc 	.word	0x200037dc
   22e80:	20001fc8 	.word	0x20001fc8

00022e84 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22e84:	1c43      	adds	r3, r0, #1
{
   22e86:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22e88:	d021      	beq.n	22ece <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22e8a:	2801      	cmp	r0, #1
   22e8c:	dd21      	ble.n	22ed2 <sys_clock_set_timeout+0x4e>
   22e8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22e92:	da20      	bge.n	22ed6 <sys_clock_set_timeout+0x52>
   22e94:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22e96:	f7ff fe79 	bl	22b8c <z_nrf_rtc_timer_read>
   22e9a:	4b10      	ldr	r3, [pc, #64]	; (22edc <sys_clock_set_timeout+0x58>)
   22e9c:	e9d3 1300 	ldrd	r1, r3, [r3]
   22ea0:	1a40      	subs	r0, r0, r1
		ticks = 0;
   22ea2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22ea6:	bf28      	it	cs
   22ea8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22eaa:	3001      	adds	r0, #1
   22eac:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
   22eae:	480c      	ldr	r0, [pc, #48]	; (22ee0 <sys_clock_set_timeout+0x5c>)
   22eb0:	4282      	cmp	r2, r0
   22eb2:	bf28      	it	cs
   22eb4:	4602      	movcs	r2, r0
   22eb6:	1852      	adds	r2, r2, r1
   22eb8:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22ebc:	4909      	ldr	r1, [pc, #36]	; (22ee4 <sys_clock_set_timeout+0x60>)
   22ebe:	9001      	str	r0, [sp, #4]
   22ec0:	9100      	str	r1, [sp, #0]
   22ec2:	f143 0300 	adc.w	r3, r3, #0
   22ec6:	f7ff fe83 	bl	22bd0 <compare_set>
}
   22eca:	b002      	add	sp, #8
   22ecc:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22ece:	4804      	ldr	r0, [pc, #16]	; (22ee0 <sys_clock_set_timeout+0x5c>)
   22ed0:	e7e0      	b.n	22e94 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22ed2:	2400      	movs	r4, #0
   22ed4:	e7df      	b.n	22e96 <sys_clock_set_timeout+0x12>
   22ed6:	4c02      	ldr	r4, [pc, #8]	; (22ee0 <sys_clock_set_timeout+0x5c>)
   22ed8:	e7dd      	b.n	22e96 <sys_clock_set_timeout+0x12>
   22eda:	bf00      	nop
   22edc:	20001fd8 	.word	0x20001fd8
   22ee0:	007fffff 	.word	0x007fffff
   22ee4:	00022ab9 	.word	0x00022ab9

00022ee8 <sys_clock_elapsed>:
{
   22ee8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22eea:	f7ff fe4f 	bl	22b8c <z_nrf_rtc_timer_read>
   22eee:	4b02      	ldr	r3, [pc, #8]	; (22ef8 <sys_clock_elapsed+0x10>)
   22ef0:	681b      	ldr	r3, [r3, #0]
}
   22ef2:	1ac0      	subs	r0, r0, r3
   22ef4:	bd08      	pop	{r3, pc}
   22ef6:	bf00      	nop
   22ef8:	20001fd8 	.word	0x20001fd8

00022efc <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   22efc:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
   22f00:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   22f04:	2a06      	cmp	r2, #6
   22f06:	d109      	bne.n	22f1c <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   22f08:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
   22f0c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   22f10:	3b03      	subs	r3, #3
   22f12:	2b04      	cmp	r3, #4
   22f14:	d802      	bhi.n	22f1c <nrf52_errata_16+0x20>
   22f16:	4a02      	ldr	r2, [pc, #8]	; (22f20 <nrf52_errata_16+0x24>)
   22f18:	5cd0      	ldrb	r0, [r2, r3]
   22f1a:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   22f1c:	2000      	movs	r0, #0
    #endif
}
   22f1e:	4770      	bx	lr
   22f20:	00033c74 	.word	0x00033c74

00022f24 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22f24:	4a02      	ldr	r2, [pc, #8]	; (22f30 <nvmc_wait+0xc>)
   22f26:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   22f2a:	2b00      	cmp	r3, #0
   22f2c:	d0fb      	beq.n	22f26 <nvmc_wait+0x2>
}
   22f2e:	4770      	bx	lr
   22f30:	4001e000 	.word	0x4001e000

00022f34 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   22f34:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
   22f36:	f00a fc68 	bl	2d80a <nrf52_errata_108>
   22f3a:	b140      	cbz	r0, 22f4e <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   22f3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22f40:	4a90      	ldr	r2, [pc, #576]	; (23184 <SystemInit+0x250>)
   22f42:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
   22f46:	f3c3 2304 	ubfx	r3, r3, #8, #5
   22f4a:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
   22f4e:	f7ff ffd5 	bl	22efc <nrf52_errata_16>
   22f52:	b110      	cbz	r0, 22f5a <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   22f54:	4b8c      	ldr	r3, [pc, #560]	; (23188 <SystemInit+0x254>)
   22f56:	4a8d      	ldr	r2, [pc, #564]	; (2318c <SystemInit+0x258>)
   22f58:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
   22f5a:	f00a fc56 	bl	2d80a <nrf52_errata_108>
   22f5e:	b148      	cbz	r0, 22f74 <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   22f60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22f64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   22f68:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
   22f6c:	f3c3 3342 	ubfx	r3, r3, #13, #3
   22f70:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
   22f74:	f7ff ffc2 	bl	22efc <nrf52_errata_16>
   22f78:	b130      	cbz	r0, 22f88 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   22f7a:	4a85      	ldr	r2, [pc, #532]	; (23190 <SystemInit+0x25c>)
   22f7c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
   22f80:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   22f84:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   22f88:	f00a fc3f 	bl	2d80a <nrf52_errata_108>
   22f8c:	b140      	cbz	r0, 22fa0 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
   22f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22f92:	2200      	movs	r2, #0
   22f94:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   22f98:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   22f9c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
   22fa0:	f7ff ffac 	bl	22efc <nrf52_errata_16>
   22fa4:	b120      	cbz	r0, 22fb0 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
   22fa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22faa:	2203      	movs	r2, #3
   22fac:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
   22fb0:	f7ff ffa4 	bl	22efc <nrf52_errata_16>
   22fb4:	b160      	cbz	r0, 22fd0 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
   22fb6:	4b77      	ldr	r3, [pc, #476]	; (23194 <SystemInit+0x260>)
   22fb8:	2205      	movs	r2, #5
   22fba:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
   22fbe:	2201      	movs	r2, #1
   22fc0:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
   22fc4:	2200      	movs	r2, #0
   22fc6:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
   22fca:	223f      	movs	r2, #63	; 0x3f
   22fcc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   22fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   22fd4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   22fd8:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   22fda:	bf09      	itett	eq
   22fdc:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   22fe0:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   22fe4:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   22fe8:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
   22fec:	bf08      	it	eq
   22fee:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   22ff2:	2a06      	cmp	r2, #6
   22ff4:	d14d      	bne.n	23092 <SystemInit+0x15e>
            {
                switch(var2)
   22ff6:	3b03      	subs	r3, #3
   22ff8:	2b04      	cmp	r3, #4
   22ffa:	d803      	bhi.n	23004 <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   22ffc:	4a66      	ldr	r2, [pc, #408]	; (23198 <SystemInit+0x264>)
   22ffe:	5cd3      	ldrb	r3, [r2, r3]
   23000:	2b00      	cmp	r3, #0
   23002:	d046      	beq.n	23092 <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   23004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23008:	4b64      	ldr	r3, [pc, #400]	; (2319c <SystemInit+0x268>)
   2300a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   2300e:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   23012:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   23016:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   2301a:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   2301e:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   23022:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   23026:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   2302a:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   2302e:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   23032:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   23036:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   2303a:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   2303e:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   23042:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   23046:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   2304a:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   2304e:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   23052:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   23056:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   2305a:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   2305e:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   23062:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   23066:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   2306a:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   2306e:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   23072:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   23076:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   2307a:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   2307e:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   23082:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   23086:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   2308a:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   2308e:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
   23092:	f00a fbba 	bl	2d80a <nrf52_errata_108>
   23096:	b148      	cbz	r0, 230ac <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   23098:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2309c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   230a0:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   230a4:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   230a8:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   230ac:	f00a fbad 	bl	2d80a <nrf52_errata_108>
   230b0:	b148      	cbz	r0, 230c6 <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   230b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   230b6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   230ba:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   230bc:	bf44      	itt	mi
   230be:	f06f 0201 	mvnmi.w	r2, #1
   230c2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   230c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   230ca:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   230ce:	2a06      	cmp	r2, #6
   230d0:	d126      	bne.n	23120 <SystemInit+0x1ec>
            {
                switch(var2)
   230d2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   230d6:	3b03      	subs	r3, #3
   230d8:	2b04      	cmp	r3, #4
   230da:	d802      	bhi.n	230e2 <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
   230dc:	4a30      	ldr	r2, [pc, #192]	; (231a0 <SystemInit+0x26c>)
   230de:	5cd3      	ldrb	r3, [r2, r3]
   230e0:	b163      	cbz	r3, 230fc <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   230e2:	4a30      	ldr	r2, [pc, #192]	; (231a4 <SystemInit+0x270>)
   230e4:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
   230e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   230ec:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   230f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   230f4:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
   230f8:	2b06      	cmp	r3, #6
   230fa:	d111      	bne.n	23120 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   230fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   23100:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
   23104:	3b03      	subs	r3, #3
   23106:	2b04      	cmp	r3, #4
   23108:	d802      	bhi.n	23110 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   2310a:	4a27      	ldr	r2, [pc, #156]	; (231a8 <SystemInit+0x274>)
   2310c:	5cd3      	ldrb	r3, [r2, r3]
   2310e:	b13b      	cbz	r3, 23120 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23110:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23114:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23118:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2311c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23120:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23124:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   23128:	2a00      	cmp	r2, #0
   2312a:	db03      	blt.n	23134 <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   2312c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23130:	2b00      	cmp	r3, #0
   23132:	da22      	bge.n	2317a <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23134:	491d      	ldr	r1, [pc, #116]	; (231ac <SystemInit+0x278>)
   23136:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23138:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   2313c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23140:	2415      	movs	r4, #21
    nvmc_wait();
   23142:	f7ff feef 	bl	22f24 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23146:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   2314a:	f7ff feeb 	bl	22f24 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2314e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   23152:	f7ff fee7 	bl	22f24 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23156:	2300      	movs	r3, #0
   23158:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   2315c:	f7ff fee2 	bl	22f24 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   23160:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23164:	490a      	ldr	r1, [pc, #40]	; (23190 <SystemInit+0x25c>)
   23166:	4b12      	ldr	r3, [pc, #72]	; (231b0 <SystemInit+0x27c>)
   23168:	68ca      	ldr	r2, [r1, #12]
   2316a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   2316e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23170:	60cb      	str	r3, [r1, #12]
   23172:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   23176:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23178:	e7fd      	b.n	23176 <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   2317a:	4b0e      	ldr	r3, [pc, #56]	; (231b4 <SystemInit+0x280>)
   2317c:	4a0e      	ldr	r2, [pc, #56]	; (231b8 <SystemInit+0x284>)
   2317e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   23180:	bd10      	pop	{r4, pc}
   23182:	bf00      	nop
   23184:	40013000 	.word	0x40013000
   23188:	4007c000 	.word	0x4007c000
   2318c:	baadf00d 	.word	0xbaadf00d
   23190:	e000ed00 	.word	0xe000ed00
   23194:	40005000 	.word	0x40005000
   23198:	00033c65 	.word	0x00033c65
   2319c:	4000c000 	.word	0x4000c000
   231a0:	00033c6a 	.word	0x00033c6a
   231a4:	40001000 	.word	0x40001000
   231a8:	00033c6f 	.word	0x00033c6f
   231ac:	4001e000 	.word	0x4001e000
   231b0:	05fa0004 	.word	0x05fa0004
   231b4:	200007e4 	.word	0x200007e4
   231b8:	03d09000 	.word	0x03d09000

000231bc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   231bc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   231be:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   231c0:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   231c2:	fab2 f382 	clz	r3, r2
   231c6:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
   231ca:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
   231cc:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
   231ce:	d014      	beq.n	231fa <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   231d0:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   231d4:	fa05 f303 	lsl.w	r3, r5, r3
   231d8:	ea22 0303 	bic.w	r3, r2, r3
   231dc:	e850 6f00 	ldrex	r6, [r0]
   231e0:	4296      	cmp	r6, r2
   231e2:	d104      	bne.n	231ee <nrfx_flag32_alloc+0x32>
   231e4:	e840 3c00 	strex	ip, r3, [r0]
   231e8:	f1bc 0f00 	cmp.w	ip, #0
   231ec:	d1f6      	bne.n	231dc <nrfx_flag32_alloc+0x20>
   231ee:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   231f2:	d1e5      	bne.n	231c0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   231f4:	4802      	ldr	r0, [pc, #8]	; (23200 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
   231f6:	700c      	strb	r4, [r1, #0]
}
   231f8:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   231fa:	4802      	ldr	r0, [pc, #8]	; (23204 <nrfx_flag32_alloc+0x48>)
   231fc:	e7fc      	b.n	231f8 <nrfx_flag32_alloc+0x3c>
   231fe:	bf00      	nop
   23200:	0bad0000 	.word	0x0bad0000
   23204:	0bad0002 	.word	0x0bad0002

00023208 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   23208:	6803      	ldr	r3, [r0, #0]
   2320a:	40cb      	lsrs	r3, r1
   2320c:	07db      	lsls	r3, r3, #31
{
   2320e:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   23210:	d415      	bmi.n	2323e <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   23212:	2301      	movs	r3, #1
   23214:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   23218:	6803      	ldr	r3, [r0, #0]
   2321a:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   2321e:	ea41 0203 	orr.w	r2, r1, r3
   23222:	e850 4f00 	ldrex	r4, [r0]
   23226:	429c      	cmp	r4, r3
   23228:	d104      	bne.n	23234 <nrfx_flag32_free+0x2c>
   2322a:	e840 2c00 	strex	ip, r2, [r0]
   2322e:	f1bc 0f00 	cmp.w	ip, #0
   23232:	d1f6      	bne.n	23222 <nrfx_flag32_free+0x1a>
   23234:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23238:	d1ee      	bne.n	23218 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   2323a:	4802      	ldr	r0, [pc, #8]	; (23244 <nrfx_flag32_free+0x3c>)
}
   2323c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   2323e:	4802      	ldr	r0, [pc, #8]	; (23248 <nrfx_flag32_free+0x40>)
   23240:	e7fc      	b.n	2323c <nrfx_flag32_free+0x34>
   23242:	bf00      	nop
   23244:	0bad0000 	.word	0x0bad0000
   23248:	0bad0004 	.word	0x0bad0004

0002324c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   2324c:	4b04      	ldr	r3, [pc, #16]	; (23260 <nrfx_clock_init+0x14>)
   2324e:	791a      	ldrb	r2, [r3, #4]
   23250:	b922      	cbnz	r2, 2325c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   23252:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   23254:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   23256:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   23258:	4802      	ldr	r0, [pc, #8]	; (23264 <nrfx_clock_init+0x18>)
   2325a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2325c:	4802      	ldr	r0, [pc, #8]	; (23268 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2325e:	4770      	bx	lr
   23260:	200037e8 	.word	0x200037e8
   23264:	0bad0000 	.word	0x0bad0000
   23268:	0bad000c 	.word	0x0bad000c

0002326c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2326c:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2326e:	b110      	cbz	r0, 23276 <nrfx_clock_start+0xa>
   23270:	2801      	cmp	r0, #1
   23272:	d034      	beq.n	232de <nrfx_clock_start+0x72>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   23274:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   23276:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2327a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2327e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   23282:	03c9      	lsls	r1, r1, #15
   23284:	d529      	bpl.n	232da <nrfx_clock_start+0x6e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   23286:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2328a:	2a01      	cmp	r2, #1
   2328c:	d125      	bne.n	232da <nrfx_clock_start+0x6e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2328e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23292:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23296:	2200      	movs	r2, #0
   23298:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2329c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   232a0:	2202      	movs	r2, #2
   232a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
   232a6:	4a13      	ldr	r2, [pc, #76]	; (232f4 <nrfx_clock_start+0x88>)
   232a8:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
   232ac:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
   232b0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
   232b4:	4b10      	ldr	r3, [pc, #64]	; (232f8 <nrfx_clock_start+0x8c>)
   232b6:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
   232b8:	f044 0101 	orr.w	r1, r4, #1
   232bc:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
   232be:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
   232c0:	6859      	ldr	r1, [r3, #4]
   232c2:	1b49      	subs	r1, r1, r5
   232c4:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
   232c8:	d3fa      	bcc.n	232c0 <nrfx_clock_start+0x54>
    DWT->CTRL = dwt_ctrl;
   232ca:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   232cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
   232d0:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   232d4:	2201      	movs	r2, #1
   232d6:	609a      	str	r2, [r3, #8]
}
   232d8:	e7cc      	b.n	23274 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
   232da:	2200      	movs	r2, #0
   232dc:	e7d7      	b.n	2328e <nrfx_clock_start+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   232de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   232e2:	2200      	movs	r2, #0
   232e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   232e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   232ec:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   232f0:	6018      	str	r0, [r3, #0]
}
   232f2:	e7bf      	b.n	23274 <nrfx_clock_start+0x8>
   232f4:	e000ed00 	.word	0xe000ed00
   232f8:	e0001000 	.word	0xe0001000

000232fc <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   232fc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   232fe:	b110      	cbz	r0, 23306 <nrfx_clock_stop+0xa>
   23300:	2801      	cmp	r0, #1
   23302:	d017      	beq.n	23334 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   23304:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   23306:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2330a:	2302      	movs	r3, #2
   2330c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23310:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   23314:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23318:	2301      	movs	r3, #1
   2331a:	60e3      	str	r3, [r4, #12]
   2331c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   23320:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   23324:	03db      	lsls	r3, r3, #15
   23326:	d5ed      	bpl.n	23304 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   23328:	2001      	movs	r0, #1
   2332a:	f00a fa7d 	bl	2d828 <nrfx_busy_wait>
   2332e:	3d01      	subs	r5, #1
   23330:	d1f6      	bne.n	23320 <nrfx_clock_stop+0x24>
   23332:	e7e7      	b.n	23304 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   23334:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23338:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2333a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2333e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   23342:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23346:	6060      	str	r0, [r4, #4]
   23348:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2334c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   23350:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   23354:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   23356:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2335a:	d505      	bpl.n	23368 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2335c:	b123      	cbz	r3, 23368 <nrfx_clock_stop+0x6c>
   2335e:	2001      	movs	r0, #1
   23360:	f00a fa62 	bl	2d828 <nrfx_busy_wait>
   23364:	3d01      	subs	r5, #1
   23366:	d1f1      	bne.n	2334c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   23368:	4b01      	ldr	r3, [pc, #4]	; (23370 <nrfx_clock_stop+0x74>)
   2336a:	2200      	movs	r2, #0
   2336c:	715a      	strb	r2, [r3, #5]
   2336e:	e7c9      	b.n	23304 <nrfx_clock_stop+0x8>
   23370:	200037e8 	.word	0x200037e8

00023374 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   23374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   23378:	b510      	push	{r4, lr}
   2337a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2337e:	b16a      	cbz	r2, 2339c <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23380:	2200      	movs	r2, #0
   23382:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   23386:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   2338a:	2201      	movs	r2, #1
   2338c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   23390:	4b11      	ldr	r3, [pc, #68]	; (233d8 <nrfx_power_clock_irq_handler+0x64>)
   23392:	7958      	ldrb	r0, [r3, #5]
   23394:	b910      	cbnz	r0, 2339c <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   23396:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23398:	681b      	ldr	r3, [r3, #0]
   2339a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2339c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   233a0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   233a4:	b172      	cbz	r2, 233c4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   233a6:	2200      	movs	r2, #0
   233a8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   233ac:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   233b0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   233b4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   233b8:	0792      	lsls	r2, r2, #30
   233ba:	d104      	bne.n	233c6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   233bc:	2201      	movs	r2, #1
   233be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   233c2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   233c4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   233c6:	2202      	movs	r2, #2
   233c8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   233cc:	4b02      	ldr	r3, [pc, #8]	; (233d8 <nrfx_power_clock_irq_handler+0x64>)
}
   233ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   233d2:	681b      	ldr	r3, [r3, #0]
   233d4:	2001      	movs	r0, #1
   233d6:	4718      	bx	r3
   233d8:	200037e8 	.word	0x200037e8

000233dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   233dc:	4b03      	ldr	r3, [pc, #12]	; (233ec <pin_in_use_by_te+0x10>)
   233de:	3008      	adds	r0, #8
   233e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
   233e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   233e8:	4770      	bx	lr
   233ea:	bf00      	nop
   233ec:	200007e8 	.word	0x200007e8

000233f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   233f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   233f2:	f100 0308 	add.w	r3, r0, #8
   233f6:	4c0c      	ldr	r4, [pc, #48]	; (23428 <call_handler+0x38>)
   233f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   233fc:	05da      	lsls	r2, r3, #23
{
   233fe:	4605      	mov	r5, r0
   23400:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23402:	d507      	bpl.n	23414 <call_handler+0x24>
   23404:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23408:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   2340c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   23410:	6852      	ldr	r2, [r2, #4]
   23412:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23414:	68a3      	ldr	r3, [r4, #8]
   23416:	b12b      	cbz	r3, 23424 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23418:	68e2      	ldr	r2, [r4, #12]
   2341a:	4631      	mov	r1, r6
   2341c:	4628      	mov	r0, r5
    }
}
   2341e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23422:	4718      	bx	r3
}
   23424:	bd70      	pop	{r4, r5, r6, pc}
   23426:	bf00      	nop
   23428:	200007e8 	.word	0x200007e8

0002342c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   2342c:	4a12      	ldr	r2, [pc, #72]	; (23478 <release_handler+0x4c>)
   2342e:	3008      	adds	r0, #8
{
   23430:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23432:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
   23436:	05d9      	lsls	r1, r3, #23
   23438:	d51b      	bpl.n	23472 <release_handler+0x46>
   2343a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   2343e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   23442:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23446:	f102 0410 	add.w	r4, r2, #16
   2344a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   2344c:	f834 3b02 	ldrh.w	r3, [r4], #2
   23450:	f413 7f80 	tst.w	r3, #256	; 0x100
   23454:	d003      	beq.n	2345e <release_handler+0x32>
   23456:	f3c3 2343 	ubfx	r3, r3, #9, #4
   2345a:	4299      	cmp	r1, r3
   2345c:	d009      	beq.n	23472 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   2345e:	3001      	adds	r0, #1
   23460:	2820      	cmp	r0, #32
   23462:	d1f3      	bne.n	2344c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   23464:	2300      	movs	r3, #0
   23466:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2346a:	4804      	ldr	r0, [pc, #16]	; (2347c <release_handler+0x50>)
}
   2346c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   2346e:	f7ff becb 	b.w	23208 <nrfx_flag32_free>
}
   23472:	bc10      	pop	{r4}
   23474:	4770      	bx	lr
   23476:	bf00      	nop
   23478:	200007e8 	.word	0x200007e8
   2347c:	2000083c 	.word	0x2000083c

00023480 <pin_handler_trigger_uninit>:
{
   23480:	b538      	push	{r3, r4, r5, lr}
   23482:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   23484:	f7ff ffaa 	bl	233dc <pin_in_use_by_te>
   23488:	4c09      	ldr	r4, [pc, #36]	; (234b0 <pin_handler_trigger_uninit+0x30>)
   2348a:	f102 0508 	add.w	r5, r2, #8
   2348e:	b140      	cbz	r0, 234a2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23490:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23494:	4907      	ldr	r1, [pc, #28]	; (234b4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23496:	0b5b      	lsrs	r3, r3, #13
   23498:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   2349c:	2000      	movs	r0, #0
   2349e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
   234a2:	4610      	mov	r0, r2
   234a4:	f7ff ffc2 	bl	2342c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   234a8:	2300      	movs	r3, #0
   234aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   234ae:	bd38      	pop	{r3, r4, r5, pc}
   234b0:	200007e8 	.word	0x200007e8
   234b4:	40006000 	.word	0x40006000

000234b8 <nrfx_gpiote_input_configure>:
{
   234b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   234bc:	4604      	mov	r4, r0
   234be:	461e      	mov	r6, r3
    if (p_input_config)
   234c0:	b309      	cbz	r1, 23506 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   234c2:	4f4d      	ldr	r7, [pc, #308]	; (235f8 <nrfx_gpiote_input_configure+0x140>)
   234c4:	f100 0808 	add.w	r8, r0, #8
   234c8:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   234cc:	07ab      	lsls	r3, r5, #30
   234ce:	d506      	bpl.n	234de <nrfx_gpiote_input_configure+0x26>
   234d0:	f7ff ff84 	bl	233dc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
   234d4:	b118      	cbz	r0, 234de <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
   234d6:	4849      	ldr	r0, [pc, #292]	; (235fc <nrfx_gpiote_input_configure+0x144>)
}
   234d8:	b002      	add	sp, #8
   234da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
   234de:	f004 001f 	and.w	r0, r4, #31
   234e2:	0080      	lsls	r0, r0, #2
   234e4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   234e8:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   234ea:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   234ee:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
   234f2:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   234f6:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   234fa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
   234fe:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   23502:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
   23506:	b192      	cbz	r2, 2352e <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23508:	4b3b      	ldr	r3, [pc, #236]	; (235f8 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   2350a:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   2350c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   2350e:	f104 0008 	add.w	r0, r4, #8
   23512:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   23516:	078f      	lsls	r7, r1, #30
   23518:	d50c      	bpl.n	23534 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
   2351a:	2a00      	cmp	r2, #0
   2351c:	d1db      	bne.n	234d6 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   2351e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   23522:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23526:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
   2352a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   2352e:	bbce      	cbnz	r6, 235a4 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
   23530:	4833      	ldr	r0, [pc, #204]	; (23600 <nrfx_gpiote_input_configure+0x148>)
   23532:	e7d1      	b.n	234d8 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   23534:	f021 0120 	bic.w	r1, r1, #32
   23538:	04c9      	lsls	r1, r1, #19
   2353a:	0cc9      	lsrs	r1, r1, #19
   2353c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   23540:	2a00      	cmp	r2, #0
   23542:	d0ec      	beq.n	2351e <nrfx_gpiote_input_configure+0x66>
                if (!edge)
   23544:	2d03      	cmp	r5, #3
   23546:	d8c6      	bhi.n	234d6 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
   23548:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2354a:	b92d      	cbnz	r5, 23558 <nrfx_gpiote_input_configure+0xa0>
   2354c:	4a2d      	ldr	r2, [pc, #180]	; (23604 <nrfx_gpiote_input_configure+0x14c>)
   2354e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   23552:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   23556:	e7e2      	b.n	2351e <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23558:	00ba      	lsls	r2, r7, #2
   2355a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   2355e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   23562:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   23566:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2356a:	f02c 0c03 	bic.w	ip, ip, #3
   2356e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   23572:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   23576:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
   2357a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   2357e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   23582:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   23586:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2358a:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
   2358e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
   23592:	ea4c 0c0e 	orr.w	ip, ip, lr
   23596:	f041 0120 	orr.w	r1, r1, #32
   2359a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   2359e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   235a2:	e7bc      	b.n	2351e <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   235a4:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
   235a8:	4620      	mov	r0, r4
   235aa:	f7ff ff3f 	bl	2342c <release_handler>
    if (!handler)
   235ae:	2f00      	cmp	r7, #0
   235b0:	d0be      	beq.n	23530 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   235b2:	4d11      	ldr	r5, [pc, #68]	; (235f8 <nrfx_gpiote_input_configure+0x140>)
   235b4:	682b      	ldr	r3, [r5, #0]
   235b6:	429f      	cmp	r7, r3
   235b8:	d104      	bne.n	235c4 <nrfx_gpiote_input_configure+0x10c>
   235ba:	686b      	ldr	r3, [r5, #4]
   235bc:	429e      	cmp	r6, r3
   235be:	d101      	bne.n	235c4 <nrfx_gpiote_input_configure+0x10c>
   235c0:	2200      	movs	r2, #0
   235c2:	e009      	b.n	235d8 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   235c4:	4810      	ldr	r0, [pc, #64]	; (23608 <nrfx_gpiote_input_configure+0x150>)
   235c6:	f10d 0107 	add.w	r1, sp, #7
   235ca:	f7ff fdf7 	bl	231bc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   235ce:	4b0c      	ldr	r3, [pc, #48]	; (23600 <nrfx_gpiote_input_configure+0x148>)
   235d0:	4298      	cmp	r0, r3
   235d2:	d181      	bne.n	234d8 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
   235d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
   235d8:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   235dc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   235e0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   235e2:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   235e4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   235e8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   235ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   235f0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   235f4:	e79c      	b.n	23530 <nrfx_gpiote_input_configure+0x78>
   235f6:	bf00      	nop
   235f8:	200007e8 	.word	0x200007e8
   235fc:	0bad0004 	.word	0x0bad0004
   23600:	0bad0000 	.word	0x0bad0000
   23604:	40006000 	.word	0x40006000
   23608:	2000083c 	.word	0x2000083c

0002360c <nrfx_gpiote_output_configure>:
{
   2360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2360e:	4604      	mov	r4, r0
    if (p_config)
   23610:	b371      	cbz	r1, 23670 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23612:	4e37      	ldr	r6, [pc, #220]	; (236f0 <nrfx_gpiote_output_configure+0xe4>)
   23614:	f100 0708 	add.w	r7, r0, #8
   23618:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   2361c:	07ab      	lsls	r3, r5, #30
   2361e:	d404      	bmi.n	2362a <nrfx_gpiote_output_configure+0x1e>
   23620:	f7ff fedc 	bl	233dc <pin_in_use_by_te>
   23624:	b108      	cbz	r0, 2362a <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
   23626:	4833      	ldr	r0, [pc, #204]	; (236f4 <nrfx_gpiote_output_configure+0xe8>)
}
   23628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   2362a:	f015 0f1c 	tst.w	r5, #28
   2362e:	784b      	ldrb	r3, [r1, #1]
   23630:	d001      	beq.n	23636 <nrfx_gpiote_output_configure+0x2a>
   23632:	2b01      	cmp	r3, #1
   23634:	d0f7      	beq.n	23626 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
   23636:	f004 001f 	and.w	r0, r4, #31
   2363a:	0080      	lsls	r0, r0, #2
   2363c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   23640:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
   23644:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   23648:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2364a:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
   2364c:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
   23650:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
   23654:	f02c 0c07 	bic.w	ip, ip, #7
   23658:	ea43 030c 	orr.w	r3, r3, ip
   2365c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   23660:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   23664:	f043 0301 	orr.w	r3, r3, #1
   23668:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
   2366c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
   23670:	b90a      	cbnz	r2, 23676 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
   23672:	4821      	ldr	r0, [pc, #132]	; (236f8 <nrfx_gpiote_output_configure+0xec>)
   23674:	e7d8      	b.n	23628 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23676:	4e1e      	ldr	r6, [pc, #120]	; (236f0 <nrfx_gpiote_output_configure+0xe4>)
   23678:	f104 0708 	add.w	r7, r4, #8
   2367c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   23680:	0783      	lsls	r3, r0, #30
   23682:	d5d0      	bpl.n	23626 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
   23684:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
   23688:	4661      	mov	r1, ip
   2368a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2368c:	f020 0020 	bic.w	r0, r0, #32
   23690:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   23694:	04c0      	lsls	r0, r0, #19
   23696:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2369a:	0cc0      	lsrs	r0, r0, #19
   2369c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   236a0:	2300      	movs	r3, #0
   236a2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   236a6:	7855      	ldrb	r5, [r2, #1]
   236a8:	2d00      	cmp	r5, #0
   236aa:	d0e2      	beq.n	23672 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   236ac:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   236b0:	7892      	ldrb	r2, [r2, #2]
   236b2:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
   236b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   236ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   236be:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   236c2:	0223      	lsls	r3, r4, #8
   236c4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   236c8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   236ca:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   236ce:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   236d2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   236d4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   236d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   236da:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   236de:	4313      	orrs	r3, r2
   236e0:	f040 0020 	orr.w	r0, r0, #32
   236e4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   236e8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   236ec:	e7c1      	b.n	23672 <nrfx_gpiote_output_configure+0x66>
   236ee:	bf00      	nop
   236f0:	200007e8 	.word	0x200007e8
   236f4:	0bad0004 	.word	0x0bad0004
   236f8:	0bad0000 	.word	0x0bad0000

000236fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   236fc:	4b01      	ldr	r3, [pc, #4]	; (23704 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   236fe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   23702:	4770      	bx	lr
   23704:	200007e8 	.word	0x200007e8

00023708 <nrfx_gpiote_channel_get>:
{
   23708:	b508      	push	{r3, lr}
   2370a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
   2370c:	f7ff fe66 	bl	233dc <pin_in_use_by_te>
   23710:	b138      	cbz	r0, 23722 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23712:	4b05      	ldr	r3, [pc, #20]	; (23728 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
   23714:	4805      	ldr	r0, [pc, #20]	; (2372c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23716:	3208      	adds	r2, #8
   23718:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
   2371c:	0b5b      	lsrs	r3, r3, #13
   2371e:	700b      	strb	r3, [r1, #0]
}
   23720:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23722:	4803      	ldr	r0, [pc, #12]	; (23730 <nrfx_gpiote_channel_get+0x28>)
   23724:	e7fc      	b.n	23720 <nrfx_gpiote_channel_get+0x18>
   23726:	bf00      	nop
   23728:	200007e8 	.word	0x200007e8
   2372c:	0bad0000 	.word	0x0bad0000
   23730:	0bad0004 	.word	0x0bad0004

00023734 <nrfx_gpiote_init>:
{
   23734:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   23736:	4c0f      	ldr	r4, [pc, #60]	; (23774 <nrfx_gpiote_init+0x40>)
   23738:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
   2373c:	b9bd      	cbnz	r5, 2376e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   2373e:	2240      	movs	r2, #64	; 0x40
   23740:	4629      	mov	r1, r5
   23742:	f104 0010 	add.w	r0, r4, #16
   23746:	f00a ff2f 	bl	2e5a8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   2374a:	2006      	movs	r0, #6
   2374c:	f7e3 ff84 	bl	7658 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23750:	4b09      	ldr	r3, [pc, #36]	; (23778 <nrfx_gpiote_init+0x44>)
    return err_code;
   23752:	480a      	ldr	r0, [pc, #40]	; (2377c <nrfx_gpiote_init+0x48>)
   23754:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
   23758:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
   2375c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23760:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   23764:	2301      	movs	r3, #1
   23766:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   2376a:	6563      	str	r3, [r4, #84]	; 0x54
}
   2376c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   2376e:	4804      	ldr	r0, [pc, #16]	; (23780 <nrfx_gpiote_init+0x4c>)
   23770:	e7fc      	b.n	2376c <nrfx_gpiote_init+0x38>
   23772:	bf00      	nop
   23774:	200007e8 	.word	0x200007e8
   23778:	40006000 	.word	0x40006000
   2377c:	0bad0000 	.word	0x0bad0000
   23780:	0bad0005 	.word	0x0bad0005

00023784 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   23784:	4b03      	ldr	r3, [pc, #12]	; (23794 <nrfx_gpiote_is_init+0x10>)
   23786:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
   2378a:	3800      	subs	r0, #0
   2378c:	bf18      	it	ne
   2378e:	2001      	movne	r0, #1
   23790:	4770      	bx	lr
   23792:	bf00      	nop
   23794:	200007e8 	.word	0x200007e8

00023798 <nrfx_gpiote_channel_free>:
{
   23798:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   2379a:	4801      	ldr	r0, [pc, #4]	; (237a0 <nrfx_gpiote_channel_free+0x8>)
   2379c:	f7ff bd34 	b.w	23208 <nrfx_flag32_free>
   237a0:	20000838 	.word	0x20000838

000237a4 <nrfx_gpiote_channel_alloc>:
{
   237a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   237a6:	4801      	ldr	r0, [pc, #4]	; (237ac <nrfx_gpiote_channel_alloc+0x8>)
   237a8:	f7ff bd08 	b.w	231bc <nrfx_flag32_alloc>
   237ac:	20000838 	.word	0x20000838

000237b0 <nrfx_gpiote_trigger_enable>:
{
   237b0:	b510      	push	{r4, lr}
   237b2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   237b4:	f7ff fe12 	bl	233dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   237b8:	f102 0408 	add.w	r4, r2, #8
   237bc:	4b1c      	ldr	r3, [pc, #112]	; (23830 <nrfx_gpiote_trigger_enable+0x80>)
   237be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   237c2:	b1e0      	cbz	r0, 237fe <nrfx_gpiote_trigger_enable+0x4e>
   237c4:	f013 0402 	ands.w	r4, r3, #2
   237c8:	d119      	bne.n	237fe <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   237ca:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   237cc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
   237ce:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
   237d2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
   237d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   237da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   237de:	6004      	str	r4, [r0, #0]
   237e0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   237e2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
   237e6:	f040 0001 	orr.w	r0, r0, #1
   237ea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
   237ee:	b129      	cbz	r1, 237fc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   237f0:	2201      	movs	r2, #1
   237f2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
   237f6:	4a0f      	ldr	r2, [pc, #60]	; (23834 <nrfx_gpiote_trigger_enable+0x84>)
   237f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   237fc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   237fe:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23802:	2b04      	cmp	r3, #4
   23804:	d010      	beq.n	23828 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23806:	2b05      	cmp	r3, #5
   23808:	d010      	beq.n	2382c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
   2380a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2380e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
   23812:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23816:	40d9      	lsrs	r1, r3
   23818:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2381c:	3102      	adds	r1, #2
}
   2381e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   23822:	4610      	mov	r0, r2
   23824:	f00a b80c 	b.w	2d840 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23828:	2103      	movs	r1, #3
   2382a:	e7f8      	b.n	2381e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2382c:	2102      	movs	r1, #2
   2382e:	e7f6      	b.n	2381e <nrfx_gpiote_trigger_enable+0x6e>
   23830:	200007e8 	.word	0x200007e8
   23834:	40006000 	.word	0x40006000

00023838 <nrfx_gpiote_trigger_disable>:
{
   23838:	b508      	push	{r3, lr}
   2383a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2383c:	f7ff fdce 	bl	233dc <pin_in_use_by_te>
   23840:	b1c0      	cbz	r0, 23874 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23842:	f102 0108 	add.w	r1, r2, #8
   23846:	4b0e      	ldr	r3, [pc, #56]	; (23880 <nrfx_gpiote_trigger_disable+0x48>)
   23848:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   2384c:	0799      	lsls	r1, r3, #30
   2384e:	d411      	bmi.n	23874 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   23850:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   23852:	2201      	movs	r2, #1
   23854:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   23856:	009b      	lsls	r3, r3, #2
   23858:	490a      	ldr	r1, [pc, #40]	; (23884 <nrfx_gpiote_trigger_disable+0x4c>)
   2385a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2385e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   23862:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23866:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   2386a:	f022 0203 	bic.w	r2, r2, #3
   2386e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   23872:	bd08      	pop	{r3, pc}
   23874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23878:	2100      	movs	r1, #0
   2387a:	4610      	mov	r0, r2
   2387c:	f009 bfe0 	b.w	2d840 <nrf_gpio_cfg_sense_set>
   23880:	200007e8 	.word	0x200007e8
   23884:	40006000 	.word	0x40006000

00023888 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23888:	4b0d      	ldr	r3, [pc, #52]	; (238c0 <nrfx_gpiote_pin_uninit+0x38>)
   2388a:	f100 0208 	add.w	r2, r0, #8
{
   2388e:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   23890:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   23894:	07db      	lsls	r3, r3, #31
{
   23896:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   23898:	d50f      	bpl.n	238ba <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
   2389a:	f7ff ffcd 	bl	23838 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   2389e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
   238a0:	f004 041f 	and.w	r4, r4, #31
   238a4:	f7ff fdec 	bl	23480 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
   238a8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   238ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   238b0:	2202      	movs	r2, #2
   238b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   238b6:	4803      	ldr	r0, [pc, #12]	; (238c4 <nrfx_gpiote_pin_uninit+0x3c>)
}
   238b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   238ba:	4803      	ldr	r0, [pc, #12]	; (238c8 <nrfx_gpiote_pin_uninit+0x40>)
   238bc:	e7fc      	b.n	238b8 <nrfx_gpiote_pin_uninit+0x30>
   238be:	bf00      	nop
   238c0:	200007e8 	.word	0x200007e8
   238c4:	0bad0000 	.word	0x0bad0000
   238c8:	0bad0004 	.word	0x0bad0004

000238cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   238cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238d0:	4b4e      	ldr	r3, [pc, #312]	; (23a0c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
   238d2:	484f      	ldr	r0, [pc, #316]	; (23a10 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   238d4:	494f      	ldr	r1, [pc, #316]	; (23a14 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
   238d6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   238d8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   238da:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   238dc:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   238de:	b136      	cbz	r6, 238ee <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
   238e0:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   238e4:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   238e6:	bf1e      	ittt	ne
   238e8:	601c      	strne	r4, [r3, #0]
   238ea:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   238ec:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   238ee:	3304      	adds	r3, #4
   238f0:	428b      	cmp	r3, r1
        }
        mask <<= 1;
   238f2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   238f6:	d1f1      	bne.n	238dc <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   238f8:	4b45      	ldr	r3, [pc, #276]	; (23a10 <nrfx_gpiote_irq_handler+0x144>)
   238fa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   238fe:	b1bb      	cbz	r3, 23930 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
   23900:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   23904:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   23908:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   2390a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2390e:	af01      	add	r7, sp, #4
   23910:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
   23914:	9c01      	ldr	r4, [sp, #4]
   23916:	b96c      	cbnz	r4, 23934 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23918:	4b3d      	ldr	r3, [pc, #244]	; (23a10 <nrfx_gpiote_irq_handler+0x144>)
   2391a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
   2391e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
   23922:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   23926:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
   23928:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
   2392c:	2b00      	cmp	r3, #0
   2392e:	d1ee      	bne.n	2390e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
   23930:	2401      	movs	r4, #1
   23932:	e066      	b.n	23a02 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
   23934:	fa94 f4a4 	rbit	r4, r4
   23938:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   2393c:	4a36      	ldr	r2, [pc, #216]	; (23a18 <nrfx_gpiote_irq_handler+0x14c>)
   2393e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   23942:	08e0      	lsrs	r0, r4, #3
   23944:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
   23948:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   2394c:	fa08 f203 	lsl.w	r2, r8, r3
   23950:	5c3b      	ldrb	r3, [r7, r0]
   23952:	ea23 0302 	bic.w	r3, r3, r2
   23956:	543b      	strb	r3, [r7, r0]
   23958:	00a3      	lsls	r3, r4, #2
   2395a:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
   2395e:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23962:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
   23966:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23968:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   2396a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
   2396e:	d518      	bpl.n	239a2 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
   23970:	4659      	mov	r1, fp
   23972:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   23974:	fa5f fa82 	uxtb.w	sl, r2
   23978:	f7ff fd3a 	bl	233f0 <call_handler>
   2397c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
   23980:	f3c3 4301 	ubfx	r3, r3, #16, #2
   23984:	459a      	cmp	sl, r3
   23986:	d107      	bne.n	23998 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   23988:	2100      	movs	r1, #0
   2398a:	4620      	mov	r0, r4
   2398c:	f009 ff58 	bl	2d840 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23990:	4651      	mov	r1, sl
   23992:	4620      	mov	r0, r4
   23994:	f009 ff54 	bl	2d840 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
   23998:	fa08 f404 	lsl.w	r4, r8, r4
   2399c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
   239a0:	e7b8      	b.n	23914 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   239a2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   239a4:	bf0c      	ite	eq
   239a6:	2103      	moveq	r1, #3
   239a8:	2102      	movne	r1, #2
   239aa:	4620      	mov	r0, r4
   239ac:	f009 ff48 	bl	2d840 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   239b0:	f1ba 0f03 	cmp.w	sl, #3
   239b4:	d004      	beq.n	239c0 <nrfx_gpiote_irq_handler+0xf4>
   239b6:	2a02      	cmp	r2, #2
   239b8:	d107      	bne.n	239ca <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   239ba:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   239be:	d1eb      	bne.n	23998 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
   239c0:	4659      	mov	r1, fp
   239c2:	4620      	mov	r0, r4
   239c4:	f7ff fd14 	bl	233f0 <call_handler>
   239c8:	e7e6      	b.n	23998 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   239ca:	2a03      	cmp	r2, #3
   239cc:	d1e4      	bne.n	23998 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   239ce:	f1ba 0f02 	cmp.w	sl, #2
   239d2:	e7f4      	b.n	239be <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
   239d4:	fa95 f3a5 	rbit	r3, r5
   239d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   239dc:	fa04 f203 	lsl.w	r2, r4, r3
   239e0:	009b      	lsls	r3, r3, #2
   239e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   239e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   239ea:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   239ee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   239f2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   239f6:	f3c0 2004 	ubfx	r0, r0, #8, #5
   239fa:	f3c1 4101 	ubfx	r1, r1, #16, #2
   239fe:	f7ff fcf7 	bl	233f0 <call_handler>
    while (mask)
   23a02:	2d00      	cmp	r5, #0
   23a04:	d1e6      	bne.n	239d4 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   23a06:	b003      	add	sp, #12
   23a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23a0c:	40006100 	.word	0x40006100
   23a10:	40006000 	.word	0x40006000
   23a14:	40006120 	.word	0x40006120
   23a18:	200007e8 	.word	0x200007e8

00023a1c <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23a1c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   23a1e:	4801      	ldr	r0, [pc, #4]	; (23a24 <nrfx_ppi_channel_alloc+0x8>)
   23a20:	f7ff bbcc 	b.w	231bc <nrfx_flag32_alloc>
   23a24:	20000844 	.word	0x20000844

00023a28 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
   23a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23a2c:	f890 8004 	ldrb.w	r8, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23a30:	4c44      	ldr	r4, [pc, #272]	; (23b44 <nrfx_pwm_init+0x11c>)
   23a32:	250c      	movs	r5, #12
   23a34:	fb05 f508 	mul.w	r5, r5, r8
   23a38:	1966      	adds	r6, r4, r5
{
   23a3a:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23a3c:	7a37      	ldrb	r7, [r6, #8]
   23a3e:	2f00      	cmp	r7, #0
   23a40:	d17d      	bne.n	23b3e <nrfx_pwm_init+0x116>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   23a42:	f891 c00c 	ldrb.w	ip, [r1, #12]
    p_cb->handler = handler;
   23a46:	5162      	str	r2, [r4, r5]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   23a48:	f891 900d 	ldrb.w	r9, [r1, #13]
    p_cb->p_context = p_context;
   23a4c:	6073      	str	r3, [r6, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
   23a4e:	f886 c00a 	strb.w	ip, [r6, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   23a52:	f1bc 0f00 	cmp.w	ip, #0
   23a56:	d032      	beq.n	23abe <nrfx_pwm_init+0x96>
   23a58:	f1b9 0f00 	cmp.w	r9, #0
   23a5c:	d02f      	beq.n	23abe <nrfx_pwm_init+0x96>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
   23a5e:	6800      	ldr	r0, [r0, #0]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
   23a60:	2301      	movs	r3, #1
   23a62:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_pwm_configure(p_instance->p_registers,
   23a66:	798d      	ldrb	r5, [r1, #6]
   23a68:	890b      	ldrh	r3, [r1, #8]
    p_reg->PRESCALER  = base_clock;
   23a6a:	794e      	ldrb	r6, [r1, #5]
   23a6c:	f8c0 650c 	str.w	r6, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
   23a70:	f8c0 5504 	str.w	r5, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
   23a74:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
   23a78:	894b      	ldrh	r3, [r1, #10]
   23a7a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
   23a7e:	2300      	movs	r3, #0
   23a80:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
   23a84:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23a88:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   23a8c:	f8d0 111c 	ldr.w	r1, [r0, #284]	; 0x11c
   23a90:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
   23a94:	f8d0 1110 	ldr.w	r1, [r0, #272]	; 0x110
   23a98:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
   23a9c:	f8d0 1114 	ldr.w	r1, [r0, #276]	; 0x114
   23aa0:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   23aa4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
   23aa8:	2a00      	cmp	r2, #0
   23aaa:	d143      	bne.n	23b34 <nrfx_pwm_init+0x10c>
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23aac:	230c      	movs	r3, #12
   23aae:	fb03 4408 	mla	r4, r3, r8, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   23ab2:	4825      	ldr	r0, [pc, #148]	; (23b48 <nrfx_pwm_init+0x120>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23ab4:	2301      	movs	r3, #1
   23ab6:	7223      	strb	r3, [r4, #8]
}
   23ab8:	b005      	add	sp, #20
   23aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23abe:	1e4f      	subs	r7, r1, #1
   23ac0:	466b      	mov	r3, sp
   23ac2:	f101 0b03 	add.w	fp, r1, #3
   23ac6:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
        uint8_t output_pin = p_config->output_pins[i];
   23aca:	f817 6f01 	ldrb.w	r6, [r7, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
   23ace:	2eff      	cmp	r6, #255	; 0xff
   23ad0:	d02c      	beq.n	23b2c <nrfx_pwm_init+0x104>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
   23ad2:	f026 0580 	bic.w	r5, r6, #128	; 0x80
   23ad6:	601d      	str	r5, [r3, #0]
            if (!p_config->skip_gpio_cfg)
   23ad8:	f1bc 0f00 	cmp.w	ip, #0
   23adc:	d111      	bne.n	23b02 <nrfx_pwm_init+0xda>
    *p_pin = pin_number & 0x1F;
   23ade:	f006 051f 	and.w	r5, r6, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   23ae2:	f04f 0a01 	mov.w	sl, #1
   23ae6:	fa0a fa05 	lsl.w	sl, sl, r5
    reg->PIN_CNF[pin_number] = cnf;
   23aea:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    if (value == 0)
   23aee:	0636      	lsls	r6, r6, #24
    reg->PIN_CNF[pin_number] = cnf;
   23af0:	f04f 0603 	mov.w	r6, #3
    p_reg->OUTCLR = clr_mask;
   23af4:	bf54      	ite	pl
   23af6:	f8ce a50c 	strpl.w	sl, [lr, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   23afa:	f8ce a508 	strmi.w	sl, [lr, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   23afe:	f84e 6025 	str.w	r6, [lr, r5, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   23b02:	45bb      	cmp	fp, r7
   23b04:	f103 0304 	add.w	r3, r3, #4
   23b08:	d1df      	bne.n	23aca <nrfx_pwm_init+0xa2>
    if (!p_config->skip_psel_cfg)
   23b0a:	f1b9 0f00 	cmp.w	r9, #0
   23b0e:	d1a6      	bne.n	23a5e <nrfx_pwm_init+0x36>
        nrf_pwm_pins_set(p_instance->p_registers, out_pins);
   23b10:	6803      	ldr	r3, [r0, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
   23b12:	9d00      	ldr	r5, [sp, #0]
   23b14:	f8c3 5560 	str.w	r5, [r3, #1376]	; 0x560
   23b18:	9d01      	ldr	r5, [sp, #4]
   23b1a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
   23b1e:	9d02      	ldr	r5, [sp, #8]
   23b20:	f8c3 5568 	str.w	r5, [r3, #1384]	; 0x568
   23b24:	9d03      	ldr	r5, [sp, #12]
   23b26:	f8c3 556c 	str.w	r5, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
   23b2a:	e798      	b.n	23a5e <nrfx_pwm_init+0x36>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
   23b2c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23b30:	601d      	str	r5, [r3, #0]
   23b32:	e7e6      	b.n	23b02 <nrfx_pwm_init+0xda>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
   23b34:	f340 3007 	sbfx	r0, r0, #12, #8
   23b38:	f7e3 fd8e 	bl	7658 <arch_irq_enable>
   23b3c:	e7b6      	b.n	23aac <nrfx_pwm_init+0x84>
        return err_code;
   23b3e:	4803      	ldr	r0, [pc, #12]	; (23b4c <nrfx_pwm_init+0x124>)
   23b40:	e7ba      	b.n	23ab8 <nrfx_pwm_init+0x90>
   23b42:	bf00      	nop
   23b44:	200037f0 	.word	0x200037f0
   23b48:	0bad0000 	.word	0x0bad0000
   23b4c:	0bad0005 	.word	0x0bad0005

00023b50 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
   23b50:	b4f0      	push	{r4, r5, r6, r7}
   23b52:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23b54:	7901      	ldrb	r1, [r0, #4]
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
   23b56:	6800      	ldr	r0, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   23b58:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
   23b5c:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
   23b5e:	68ae      	ldr	r6, [r5, #8]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   23b60:	f8c0 c520 	str.w	ip, [r0, #1312]	; 0x520
{
   23b64:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23b66:	4b18      	ldr	r3, [pc, #96]	; (23bc8 <nrfx_pwm_simple_playback+0x78>)
    p_reg->SEQ[seq_id].CNT = length;
   23b68:	f8c0 7524 	str.w	r7, [r0, #1316]	; 0x524
   23b6c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   23b70:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
   23b74:	68eb      	ldr	r3, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   23b76:	f8c0 6528 	str.w	r6, [r0, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   23b7a:	f8c0 352c 	str.w	r3, [r0, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
   23b7e:	f8c0 c540 	str.w	ip, [r0, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
   23b82:	f8c0 7544 	str.w	r7, [r0, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
   23b86:	f8c0 6548 	str.w	r6, [r0, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
   23b8a:	f8c0 354c 	str.w	r3, [r0, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
   23b8e:	f002 0301 	and.w	r3, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
   23b92:	eb03 0252 	add.w	r2, r3, r2, lsr #1
   23b96:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
   23b9a:	07e2      	lsls	r2, r4, #31
   23b9c:	d411      	bmi.n	23bc2 <nrfx_pwm_simple_playback+0x72>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
   23b9e:	f014 0202 	ands.w	r2, r4, #2
   23ba2:	d003      	beq.n	23bac <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
   23ba4:	2b00      	cmp	r3, #0
   23ba6:	bf14      	ite	ne
   23ba8:	2208      	movne	r2, #8
   23baa:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
   23bac:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
   23bae:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
   23bb2:	bf18      	it	ne
   23bb4:	230c      	movne	r3, #12
   23bb6:	b2e2      	uxtb	r2, r4
   23bb8:	bf08      	it	eq
   23bba:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
   23bbc:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
   23bbe:	f009 be4d 	b.w	2d85c <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
   23bc2:	2210      	movs	r2, #16
   23bc4:	e7f2      	b.n	23bac <nrfx_pwm_simple_playback+0x5c>
   23bc6:	bf00      	nop
   23bc8:	200037f0 	.word	0x200037f0

00023bcc <nrfx_pwm_is_stopped>:
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23bcc:	7903      	ldrb	r3, [r0, #4]

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   23bce:	4a08      	ldr	r2, [pc, #32]	; (23bf0 <nrfx_pwm_is_stopped+0x24>)
   23bd0:	210c      	movs	r1, #12
   23bd2:	fb01 2203 	mla	r2, r1, r3, r2
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   23bd6:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   23bd8:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23bda:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
   23bde:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
   23be0:	b919      	cbnz	r1, 23bea <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
   23be2:	1e98      	subs	r0, r3, #2
   23be4:	bf18      	it	ne
   23be6:	2001      	movne	r0, #1
   23be8:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23bea:	2001      	movs	r0, #1
   23bec:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
   23bee:	4770      	bx	lr
   23bf0:	200037f0 	.word	0x200037f0

00023bf4 <twim_irq_handler>:
{
    return nrf_twim_event_address_get(p_instance->p_twim, NRF_TWIM_EVENT_STOPPED);
}

static void twim_irq_handler(NRF_TWIM_Type * p_twim, twim_control_block_t * p_cb)
{
   23bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
}

NRF_STATIC_INLINE bool nrf_twim_event_check(NRF_TWIM_Type const * p_reg,
                                            nrf_twim_event_t      event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23bf6:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
   23bfa:	b087      	sub	sp, #28
   23bfc:	4604      	mov	r4, r0
   23bfe:	460d      	mov	r5, r1
    }
#endif

    NRFX_ASSERT(p_cb->handler);

    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   23c00:	b1f3      	cbz	r3, 23c40 <twim_irq_handler+0x4c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c02:	2300      	movs	r3, #0
   23c04:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   23c08:	f8d0 3124 	ldr.w	r3, [r0, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c0c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    {
        nrf_twim_event_clear(p_twim, NRF_TWIM_EVENT_ERROR);
        NRFX_LOG_DEBUG("TWIM: Event: %s.", EVT_TO_STR_TWIM(NRF_TWIM_EVENT_ERROR));
        if (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   23c10:	b9b3      	cbnz	r3, 23c40 <twim_irq_handler+0x4c>
        {
            nrf_twim_int_disable(p_twim, p_cb->int_mask);
   23c12:	688b      	ldr	r3, [r1, #8]
}

NRF_STATIC_INLINE void nrf_twim_int_disable(NRF_TWIM_Type * p_reg,
                                            uint32_t mask)
{
    p_reg->INTENCLR = mask;
   23c14:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   23c18:	2302      	movs	r3, #2
   23c1a:	608b      	str	r3, [r1, #8]
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   23c1c:	688b      	ldr	r3, [r1, #8]
    p_reg->INTENSET = mask;
   23c1e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c22:	f8d0 3160 	ldr.w	r3, [r0, #352]	; 0x160

            if (!(nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_LASTTX) &&
   23c26:	b11b      	cbz	r3, 23c30 <twim_irq_handler+0x3c>
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE uint32_t nrf_twim_shorts_get(NRF_TWIM_Type const * p_reg)
{
    return p_reg->SHORTS;
   23c28:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
   23c2c:	059f      	lsls	r7, r3, #22
   23c2e:	d402      	bmi.n	23c36 <twim_irq_handler+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23c30:	2301      	movs	r3, #1
   23c32:	6223      	str	r3, [r4, #32]
   23c34:	6163      	str	r3, [r4, #20]
            {
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_RESUME);
                nrf_twim_task_trigger(p_twim, NRF_TWIM_TASK_STOP);
            }

            p_cb->error = true;
   23c36:	2301      	movs	r3, #1
   23c38:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e

    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
    {
        p_cb->handler(&event, p_cb->p_context);
    }
}
   23c3c:	b007      	add	sp, #28
   23c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23c40:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   23c44:	2b00      	cmp	r3, #0
   23c46:	d044      	beq.n	23cd2 <twim_irq_handler+0xde>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23c48:	2300      	movs	r3, #0
   23c4a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
   23c4e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) && !p_cb->error)
   23c52:	6a2b      	ldr	r3, [r5, #32]
   23c54:	065e      	lsls	r6, r3, #25
   23c56:	d40a      	bmi.n	23c6e <twim_irq_handler+0x7a>
   23c58:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   23c5c:	b93b      	cbnz	r3, 23c6e <twim_irq_handler+0x7a>
            p_cb->error = !xfer_completeness_check(p_twim, p_cb);
   23c5e:	4629      	mov	r1, r5
   23c60:	4620      	mov	r0, r4
   23c62:	f009 fe34 	bl	2d8ce <xfer_completeness_check>
   23c66:	f080 0001 	eor.w	r0, r0, #1
   23c6a:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
        if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER))
   23c6e:	6a2b      	ldr	r3, [r5, #32]
   23c70:	f013 0c04 	ands.w	ip, r3, #4
   23c74:	d13e      	bne.n	23cf4 <twim_irq_handler+0x100>
            event.xfer_desc = p_cb->xfer_desc;
   23c76:	f105 070c 	add.w	r7, r5, #12
   23c7a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   23c7c:	ae01      	add	r6, sp, #4
   23c7e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
            if (!p_cb->repeated || p_cb->error)
   23c80:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
            event.xfer_desc = p_cb->xfer_desc;
   23c84:	683b      	ldr	r3, [r7, #0]
   23c86:	f8c4 c160 	str.w	ip, [r4, #352]	; 0x160
   23c8a:	6033      	str	r3, [r6, #0]
   23c8c:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   23c90:	f8c4 c15c 	str.w	ip, [r4, #348]	; 0x15c
   23c94:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
            if (!p_cb->repeated || p_cb->error)
   23c98:	f1be 0f00 	cmp.w	lr, #0
   23c9c:	d002      	beq.n	23ca4 <twim_irq_handler+0xb0>
   23c9e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   23ca2:	b33b      	cbz	r3, 23cf4 <twim_irq_handler+0x100>
    p_reg->SHORTS = mask;
   23ca4:	2300      	movs	r3, #0
   23ca6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
                p_cb->int_mask = 0;
   23caa:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   23cac:	4b2e      	ldr	r3, [pc, #184]	; (23d68 <twim_irq_handler+0x174>)
   23cae:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
   23cb2:	f344 3307 	sbfx	r3, r4, #12, #8
  if ((int32_t)(IRQn) >= 0)
   23cb6:	2b00      	cmp	r3, #0
   23cb8:	ea4f 3214 	mov.w	r2, r4, lsr #12
   23cbc:	db1a      	blt.n	23cf4 <twim_irq_handler+0x100>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   23cbe:	f002 011f 	and.w	r1, r2, #31
   23cc2:	095b      	lsrs	r3, r3, #5
   23cc4:	2201      	movs	r2, #1
   23cc6:	408a      	lsls	r2, r1
   23cc8:	3360      	adds	r3, #96	; 0x60
   23cca:	4928      	ldr	r1, [pc, #160]	; (23d6c <twim_irq_handler+0x178>)
   23ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   23cd0:	e010      	b.n	23cf4 <twim_irq_handler+0x100>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23cd2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   23cd6:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        if (p_cb->xfer_desc.type == NRFX_TWIM_XFER_TX)
   23cda:	7b2b      	ldrb	r3, [r5, #12]
   23cdc:	bb23      	cbnz	r3, 23d28 <twim_irq_handler+0x134>
            event.xfer_desc = p_cb->xfer_desc;
   23cde:	f105 070c 	add.w	r7, r5, #12
   23ce2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   23ce4:	ae01      	add	r6, sp, #4
   23ce6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   23ce8:	683b      	ldr	r3, [r7, #0]
   23cea:	6033      	str	r3, [r6, #0]
            if (!p_cb->repeated)
   23cec:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   23cf0:	2b00      	cmp	r3, #0
   23cf2:	d0d8      	beq.n	23ca6 <twim_irq_handler+0xb2>
    uint32_t error_source = p_reg->ERRORSRC;
   23cf4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   23cf8:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
    if (errorsrc & NRF_TWIM_ERROR_ADDRESS_NACK)
   23cfc:	0798      	lsls	r0, r3, #30
   23cfe:	d525      	bpl.n	23d4c <twim_irq_handler+0x158>
        event.type = NRFX_TWIM_EVT_ADDRESS_NACK;
   23d00:	2301      	movs	r3, #1
        event.type = NRFX_TWIM_EVT_DONE;
   23d02:	f88d 3000 	strb.w	r3, [sp]
    if (!p_cb->repeated)
   23d06:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   23d0a:	b90b      	cbnz	r3, 23d10 <twim_irq_handler+0x11c>
        p_cb->busy = false;
   23d0c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
    if (!(p_cb->flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER) || p_cb->error)
   23d10:	6a2b      	ldr	r3, [r5, #32]
   23d12:	075b      	lsls	r3, r3, #29
   23d14:	d503      	bpl.n	23d1e <twim_irq_handler+0x12a>
   23d16:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   23d1a:	2b00      	cmp	r3, #0
   23d1c:	d08e      	beq.n	23c3c <twim_irq_handler+0x48>
        p_cb->handler(&event, p_cb->p_context);
   23d1e:	e9d5 3100 	ldrd	r3, r1, [r5]
   23d22:	4668      	mov	r0, sp
   23d24:	4798      	blx	r3
   23d26:	e789      	b.n	23c3c <twim_irq_handler+0x48>
    p_reg->SHORTS = mask;
   23d28:	f44f 7300 	mov.w	r3, #512	; 0x200
   23d2c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK | NRF_TWIM_INT_ERROR_MASK;
   23d30:	f240 2302 	movw	r3, #514	; 0x202
   23d34:	60ab      	str	r3, [r5, #8]
    p_reg->INTENCLR = mask;
   23d36:	f103 73ce 	add.w	r3, r3, #27000832	; 0x19c0000
   23d3a:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
            nrf_twim_int_enable(p_twim, p_cb->int_mask);
   23d3e:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
   23d40:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23d44:	2301      	movs	r3, #1
   23d46:	60a3      	str	r3, [r4, #8]
   23d48:	6223      	str	r3, [r4, #32]
            return;
   23d4a:	e777      	b.n	23c3c <twim_irq_handler+0x48>
    else if (errorsrc & NRF_TWIM_ERROR_DATA_NACK)
   23d4c:	0759      	lsls	r1, r3, #29
   23d4e:	d501      	bpl.n	23d54 <twim_irq_handler+0x160>
        event.type = NRFX_TWIM_EVT_DATA_NACK;
   23d50:	2302      	movs	r3, #2
   23d52:	e7d6      	b.n	23d02 <twim_irq_handler+0x10e>
    else if (errorsrc & NRF_TWIM_ERROR_OVERRUN)
   23d54:	07da      	lsls	r2, r3, #31
   23d56:	d501      	bpl.n	23d5c <twim_irq_handler+0x168>
        event.type = NRFX_TWIM_EVT_OVERRUN;
   23d58:	2303      	movs	r3, #3
   23d5a:	e7d2      	b.n	23d02 <twim_irq_handler+0x10e>
    else if (p_cb->error)
   23d5c:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
   23d60:	2b00      	cmp	r3, #0
   23d62:	d0ce      	beq.n	23d02 <twim_irq_handler+0x10e>
        event.type = NRFX_TWIM_EVT_BUS_ERROR;
   23d64:	2304      	movs	r3, #4
   23d66:	e7cc      	b.n	23d02 <twim_irq_handler+0x10e>
   23d68:	019c0202 	.word	0x019c0202
   23d6c:	e000e100 	.word	0xe000e100

00023d70 <nrfx_twim_init>:
{
   23d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twim_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   23d72:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   23d74:	4d23      	ldr	r5, [pc, #140]	; (23e04 <nrfx_twim_init+0x94>)
   23d76:	f04f 0c34 	mov.w	ip, #52	; 0x34
   23d7a:	fb0c fc06 	mul.w	ip, ip, r6
   23d7e:	eb05 040c 	add.w	r4, r5, ip
   23d82:	f894 702d 	ldrb.w	r7, [r4, #45]	; 0x2d
   23d86:	2f00      	cmp	r7, #0
   23d88:	d13a      	bne.n	23e00 <nrfx_twim_init+0x90>
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   23d8a:	6800      	ldr	r0, [r0, #0]
    p_cb->p_context       = p_context;
   23d8c:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   23d8e:	7b4b      	ldrb	r3, [r1, #13]
   23d90:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   23d94:	7b8b      	ldrb	r3, [r1, #14]
    p_cb->int_mask        = 0;
   23d96:	60a7      	str	r7, [r4, #8]
    p_cb->repeated        = false;
   23d98:	f884 7030 	strb.w	r7, [r4, #48]	; 0x30
    p_cb->busy            = false;
   23d9c:	f884 702f 	strb.w	r7, [r4, #47]	; 0x2f
    p_cb->skip_gpio_cfg   = p_config->skip_gpio_cfg;
   23da0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    p_cb->handler         = event_handler;
   23da4:	f845 200c 	str.w	r2, [r5, ip]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
   23da8:	7bcc      	ldrb	r4, [r1, #15]
   23daa:	b1b3      	cbz	r3, 23dda <nrfx_twim_init+0x6a>
   23dac:	b92c      	cbnz	r4, 23dba <nrfx_twim_init+0x4a>
        nrf_twim_pins_set(p_twim, p_config->scl, p_config->sda);
   23dae:	e9d1 4300 	ldrd	r4, r3, [r1]
    p_reg->PSEL.SCL = scl_pin;
   23db2:	f8c0 4508 	str.w	r4, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   23db6:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
    nrf_twim_frequency_set(p_twim, (nrf_twim_frequency_t)p_config->frequency);
   23dba:	688b      	ldr	r3, [r1, #8]
    p_reg->FREQUENCY = frequency;
   23dbc:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   23dc0:	b11a      	cbz	r2, 23dca <nrfx_twim_init+0x5a>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twim));
   23dc2:	f340 3007 	sbfx	r0, r0, #12, #8
   23dc6:	f7e3 fc47 	bl	7658 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23dca:	2334      	movs	r3, #52	; 0x34
   23dcc:	fb03 5506 	mla	r5, r3, r6, r5
    return err_code;
   23dd0:	480d      	ldr	r0, [pc, #52]	; (23e08 <nrfx_twim_init+0x98>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23dd2:	2301      	movs	r3, #1
   23dd4:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   23dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
   23dda:	680b      	ldr	r3, [r1, #0]
   23ddc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   23de0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
   23de4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23de8:	f240 6c0c 	movw	ip, #1548	; 0x60c
   23dec:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
   23df0:	684b      	ldr	r3, [r1, #4]
   23df2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   23df6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23dfa:	f847 c023 	str.w	ip, [r7, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
   23dfe:	e7d5      	b.n	23dac <nrfx_twim_init+0x3c>
        return err_code;
   23e00:	4802      	ldr	r0, [pc, #8]	; (23e0c <nrfx_twim_init+0x9c>)
   23e02:	e7e9      	b.n	23dd8 <nrfx_twim_init+0x68>
   23e04:	200037fc 	.word	0x200037fc
   23e08:	0bad0000 	.word	0x0bad0000
   23e0c:	0bad0005 	.word	0x0bad0005

00023e10 <nrfx_twim_enable>:
    nrf_twim_enable(p_instance->p_twim);
   23e10:	6803      	ldr	r3, [r0, #0]
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   23e12:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   23e14:	2106      	movs	r1, #6
   23e16:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   23e1a:	4b04      	ldr	r3, [pc, #16]	; (23e2c <nrfx_twim_enable+0x1c>)
   23e1c:	2134      	movs	r1, #52	; 0x34
   23e1e:	fb01 3302 	mla	r3, r1, r2, r3
   23e22:	2202      	movs	r2, #2
   23e24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
   23e28:	4770      	bx	lr
   23e2a:	bf00      	nop
   23e2c:	200037fc 	.word	0x200037fc

00023e30 <nrfx_twim_disable>:
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   23e30:	7901      	ldrb	r1, [r0, #4]
    p_cb->int_mask = 0;
   23e32:	4b0c      	ldr	r3, [pc, #48]	; (23e64 <nrfx_twim_disable+0x34>)
    NRF_TWIM_Type * p_twim = p_instance->p_twim;
   23e34:	6802      	ldr	r2, [r0, #0]
    p_cb->int_mask = 0;
   23e36:	2034      	movs	r0, #52	; 0x34
   23e38:	fb00 3301 	mla	r3, r0, r1, r3
   23e3c:	2100      	movs	r1, #0
    p_reg->INTENCLR = mask;
   23e3e:	480a      	ldr	r0, [pc, #40]	; (23e68 <nrfx_twim_disable+0x38>)
   23e40:	6099      	str	r1, [r3, #8]
   23e42:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   23e46:	f8d2 0200 	ldr.w	r0, [r2, #512]	; 0x200
   23e4a:	f420 50bc 	bic.w	r0, r0, #6016	; 0x1780
   23e4e:	f8c2 0200 	str.w	r0, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   23e52:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   23e56:	2201      	movs	r2, #1
   23e58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    p_cb->busy = false;
   23e5c:	f883 102f 	strb.w	r1, [r3, #47]	; 0x2f
}
   23e60:	4770      	bx	lr
   23e62:	bf00      	nop
   23e64:	200037fc 	.word	0x200037fc
   23e68:	019c0202 	.word	0x019c0202

00023e6c <nrfx_twim_uninit>:
{
   23e6c:	b570      	push	{r4, r5, r6, lr}
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   23e6e:	7906      	ldrb	r6, [r0, #4]
    if (p_cb->handler)
   23e70:	4d18      	ldr	r5, [pc, #96]	; (23ed4 <nrfx_twim_uninit+0x68>)
   23e72:	2334      	movs	r3, #52	; 0x34
   23e74:	4373      	muls	r3, r6
{
   23e76:	4604      	mov	r4, r0
    if (p_cb->handler)
   23e78:	58eb      	ldr	r3, [r5, r3]
   23e7a:	b123      	cbz	r3, 23e86 <nrfx_twim_uninit+0x1a>
   23e7c:	6800      	ldr	r0, [r0, #0]
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_twim));
   23e7e:	f340 3007 	sbfx	r0, r0, #12, #8
   23e82:	f7e3 fbf9 	bl	7678 <arch_irq_disable>
    nrfx_twim_disable(p_instance);
   23e86:	4620      	mov	r0, r4
   23e88:	f7ff ffd2 	bl	23e30 <nrfx_twim_disable>
    if (!p_cb->skip_gpio_cfg && !p_cb->hold_bus_uninit)
   23e8c:	2334      	movs	r3, #52	; 0x34
   23e8e:	fb03 5306 	mla	r3, r3, r6, r5
   23e92:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
   23e96:	b9b2      	cbnz	r2, 23ec6 <nrfx_twim_uninit+0x5a>
   23e98:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   23e9c:	b99b      	cbnz	r3, 23ec6 <nrfx_twim_uninit+0x5a>
        nrf_gpio_cfg_default(nrf_twim_scl_pin_get(p_instance->p_twim));
   23e9e:	6820      	ldr	r0, [r4, #0]
    return p_reg->PSEL.SCL;
   23ea0:	f8d0 3508 	ldr.w	r3, [r0, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
   23ea4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   23ea8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   23eac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23eb0:	2102      	movs	r1, #2
   23eb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSEL.SDA;
   23eb6:	f8d0 350c 	ldr.w	r3, [r0, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
   23eba:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
   23ebe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   23ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
   23ec6:	2334      	movs	r3, #52	; 0x34
   23ec8:	fb03 5506 	mla	r5, r3, r6, r5
   23ecc:	2300      	movs	r3, #0
   23ece:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
}
   23ed2:	bd70      	pop	{r4, r5, r6, pc}
   23ed4:	200037fc 	.word	0x200037fc

00023ed8 <nrfx_twim_xfer>:
{
   23ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    p_cb->error = false;
   23edc:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 241b0 <nrfx_twim_xfer+0x2d8>
    twim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   23ee0:	f890 e004 	ldrb.w	lr, [r0, #4]
    err_code = twim_xfer(p_cb, (NRF_TWIM_Type *)p_instance->p_twim, p_xfer_desc, flags);
   23ee4:	6804      	ldr	r4, [r0, #0]
    p_cb->error = false;
   23ee6:	2334      	movs	r3, #52	; 0x34
   23ee8:	fb03 c30e 	mla	r3, r3, lr, ip
{
   23eec:	4617      	mov	r7, r2
    p_cb->error = false;
   23eee:	2200      	movs	r2, #0
   23ef0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   23ef4:	684b      	ldr	r3, [r1, #4]
{
   23ef6:	460d      	mov	r5, r1
    if (p_xfer_desc->primary_length != 0 && !nrfx_is_in_ram(p_xfer_desc->p_primary_buf))
   23ef8:	b14b      	cbz	r3, 23f0e <nrfx_twim_xfer+0x36>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   23efa:	68cb      	ldr	r3, [r1, #12]
   23efc:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
   23f00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   23f04:	d003      	beq.n	23f0e <nrfx_twim_xfer+0x36>
        return err_code;
   23f06:	4eab      	ldr	r6, [pc, #684]	; (241b4 <nrfx_twim_xfer+0x2dc>)
}
   23f08:	4630      	mov	r0, r6
   23f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (p_cb->busy)
   23f0e:	2634      	movs	r6, #52	; 0x34
    p_reg->INTENCLR = mask;
   23f10:	4ba9      	ldr	r3, [pc, #676]	; (241b8 <nrfx_twim_xfer+0x2e0>)
   23f12:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
   23f16:	fb06 c60e 	mla	r6, r6, lr, ip
   23f1a:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   23f1e:	f003 0aff 	and.w	sl, r3, #255	; 0xff
   23f22:	b123      	cbz	r3, 23f2e <nrfx_twim_xfer+0x56>
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   23f24:	68b3      	ldr	r3, [r6, #8]
    p_reg->INTENSET = mask;
   23f26:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
        return err_code;
   23f2a:	4ea4      	ldr	r6, [pc, #656]	; (241bc <nrfx_twim_xfer+0x2e4>)
   23f2c:	e7ec      	b.n	23f08 <nrfx_twim_xfer+0x30>
                      (NRFX_TWIM_FLAG_REPEATED_XFER & flags)) ? false: true;
   23f2e:	f017 0f14 	tst.w	r7, #20
   23f32:	bf0c      	ite	eq
   23f34:	2301      	moveq	r3, #1
   23f36:	2300      	movne	r3, #0
        p_cb->busy = ((NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER & flags) ||
   23f38:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
    p_cb->xfer_desc = *p_xfer_desc;
   23f3c:	46a9      	mov	r9, r5
   23f3e:	e8b9 000f 	ldmia.w	r9!, {r0, r1, r2, r3}
   23f42:	f106 080c 	add.w	r8, r6, #12
   23f46:	e8a8 000f 	stmia.w	r8!, {r0, r1, r2, r3}
   23f4a:	f8d9 3000 	ldr.w	r3, [r9]
   23f4e:	f8c8 3000 	str.w	r3, [r8]
    p_cb->repeated = (flags & NRFX_TWIM_FLAG_REPEATED_XFER) ? true : false;
   23f52:	f3c7 1300 	ubfx	r3, r7, #4, #1
   23f56:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags = flags;
   23f5a:	6237      	str	r7, [r6, #32]
    p_reg->ADDRESS = address;
   23f5c:	786b      	ldrb	r3, [r5, #1]
   23f5e:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23f62:	f8c4 a104 	str.w	sl, [r4, #260]	; 0x104
   23f66:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   23f6a:	f8c4 a124 	str.w	sl, [r4, #292]	; 0x124
   23f6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   23f72:	f8c4 a160 	str.w	sl, [r4, #352]	; 0x160
   23f76:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
   23f7a:	f8c4 a148 	str.w	sl, [r4, #328]	; 0x148
   23f7e:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (NRFX_TWIM_FLAG_TX_POSTINC & flags)
   23f82:	f017 0301 	ands.w	r3, r7, #1
    return p_reg->RXD.AMOUNT;
}

NRF_STATIC_INLINE void nrf_twim_tx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_ArrayList << TWIM_TXD_LIST_LIST_Pos;
   23f86:	bf18      	it	ne
   23f88:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_tx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->TXD.LIST = TWIM_TXD_LIST_LIST_Disabled << TWIM_TXD_LIST_LIST_Pos;
   23f8a:	f8c4 3550 	str.w	r3, [r4, #1360]	; 0x550
    if (NRFX_TWIM_FLAG_RX_POSTINC & flags)
   23f8e:	f017 0302 	ands.w	r3, r7, #2
}

NRF_STATIC_INLINE void nrf_twim_rx_list_enable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_ArrayList << TWIM_RXD_LIST_LIST_Pos;
   23f92:	bf18      	it	ne
   23f94:	2301      	movne	r3, #1
}

NRF_STATIC_INLINE void nrf_twim_rx_list_disable(NRF_TWIM_Type * p_reg)
{
    p_reg->RXD.LIST = TWIM_RXD_LIST_LIST_Disabled << TWIM_RXD_LIST_LIST_Pos;
   23f96:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
    switch (p_xfer_desc->type)
   23f9a:	782a      	ldrb	r2, [r5, #0]
   23f9c:	2a03      	cmp	r2, #3
   23f9e:	f200 80b5 	bhi.w	2410c <nrfx_twim_xfer+0x234>
   23fa2:	e8df f002 	tbb	[pc, r2]
   23fa6:	a084      	.short	0xa084
   23fa8:	0269      	.short	0x0269
   23faa:	692b      	ldr	r3, [r5, #16]
   23fac:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   23fb0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   23fb4:	d1a7      	bne.n	23f06 <nrfx_twim_xfer+0x2e>
    p_reg->SHORTS = mask;
   23fb6:	f44f 7180 	mov.w	r1, #256	; 0x100
   23fba:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23fbe:	68e8      	ldr	r0, [r5, #12]
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   23fc0:	6869      	ldr	r1, [r5, #4]
   23fc2:	f8c4 0544 	str.w	r0, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   23fc6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fca:	2100      	movs	r1, #0
   23fcc:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   23fd0:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   23fd4:	2001      	movs	r0, #1
   23fd6:	6220      	str	r0, [r4, #32]
   23fd8:	60a0      	str	r0, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23fda:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
        while (!nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_TXSTARTED))
   23fde:	2800      	cmp	r0, #0
   23fe0:	d0fb      	beq.n	23fda <nrfx_twim_xfer+0x102>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   23fe2:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
   23fe6:	f8d4 1150 	ldr.w	r1, [r4, #336]	; 0x150
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   23fea:	68a9      	ldr	r1, [r5, #8]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   23fec:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
        p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   23ff0:	2334      	movs	r3, #52	; 0x34
   23ff2:	fb03 c30e 	mla	r3, r3, lr, ip
    p_reg->TXD.MAXCNT = length;
   23ff6:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
   23ffa:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   23ffe:	6099      	str	r1, [r3, #8]
    nrf_twim_task_t  start_task = NRF_TWIM_TASK_STARTTX;
   24000:	2308      	movs	r3, #8
    nrfx_err_t err_code = NRFX_SUCCESS;
   24002:	4e6f      	ldr	r6, [pc, #444]	; (241c0 <nrfx_twim_xfer+0x2e8>)
    if (!(flags & NRFX_TWIM_FLAG_HOLD_XFER) && (p_xfer_desc->type != NRFX_TWIM_XFER_TXTX))
   24004:	0739      	lsls	r1, r7, #28
   24006:	d406      	bmi.n	24016 <nrfx_twim_xfer+0x13e>
   24008:	2a03      	cmp	r2, #3
   2400a:	d004      	beq.n	24016 <nrfx_twim_xfer+0x13e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2400c:	2201      	movs	r2, #1
   2400e:	50e2      	str	r2, [r4, r3]
        if (p_xfer_desc->primary_length == 0)
   24010:	686b      	ldr	r3, [r5, #4]
   24012:	b903      	cbnz	r3, 24016 <nrfx_twim_xfer+0x13e>
   24014:	6162      	str	r2, [r4, #20]
    if (p_cb->handler)
   24016:	2334      	movs	r3, #52	; 0x34
   24018:	fb03 f30e 	mul.w	r3, r3, lr
   2401c:	eb0c 0103 	add.w	r1, ip, r3
   24020:	f85c 2003 	ldr.w	r2, [ip, r3]
   24024:	2a00      	cmp	r2, #0
   24026:	d174      	bne.n	24112 <nrfx_twim_xfer+0x23a>
                transmission_finished = true;
   24028:	2101      	movs	r1, #1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2402a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   2402e:	f8d4 0104 	ldr.w	r0, [r4, #260]	; 0x104
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_STOPPED))
   24032:	2800      	cmp	r0, #0
   24034:	f040 8088 	bne.w	24148 <nrfx_twim_xfer+0x270>
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_SUSPENDED))
   24038:	3b00      	subs	r3, #0
   2403a:	bf18      	it	ne
   2403c:	2301      	movne	r3, #1
   2403e:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
            if (nrf_twim_event_check(p_twim, NRF_TWIM_EVENT_ERROR))
   24042:	2800      	cmp	r0, #0
   24044:	f000 8086 	beq.w	24154 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24048:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   2404c:	f8d4 0124 	ldr.w	r0, [r4, #292]	; 0x124
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24050:	f8d4 5160 	ldr.w	r5, [r4, #352]	; 0x160
    return p_reg->SHORTS;
   24054:	f8d4 0200 	ldr.w	r0, [r4, #512]	; 0x200
                if (!(lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_STOP_MASK)))
   24058:	b115      	cbz	r5, 24060 <nrfx_twim_xfer+0x188>
   2405a:	f410 7f00 	tst.w	r0, #512	; 0x200
   2405e:	d104      	bne.n	2406a <nrfx_twim_xfer+0x192>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24060:	6221      	str	r1, [r4, #32]
   24062:	6161      	str	r1, [r4, #20]
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   24064:	2d00      	cmp	r5, #0
   24066:	d0e0      	beq.n	2402a <nrfx_twim_xfer+0x152>
                    transmission_finished = false;
   24068:	2300      	movs	r3, #0
                if (lasttx_triggered && (shorts_mask & NRF_TWIM_SHORT_LASTTX_SUSPEND_MASK))
   2406a:	05c0      	lsls	r0, r0, #23
   2406c:	d572      	bpl.n	24154 <nrfx_twim_xfer+0x27c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2406e:	f8c4 2148 	str.w	r2, [r4, #328]	; 0x148
   24072:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        } while (!transmission_finished);
   24076:	e7d8      	b.n	2402a <nrfx_twim_xfer+0x152>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   24078:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2407a:	68e9      	ldr	r1, [r5, #12]
   2407c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   24080:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   24084:	692b      	ldr	r3, [r5, #16]
   24086:	f003 4160 	and.w	r1, r3, #3758096384	; 0xe0000000
        if (!nrfx_is_in_ram(p_xfer_desc->p_secondary_buf))
   2408a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
   2408e:	f47f af3a 	bne.w	23f06 <nrfx_twim_xfer+0x2e>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_secondary_buf, p_xfer_desc->secondary_length);
   24092:	68a9      	ldr	r1, [r5, #8]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   24094:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->SHORTS = mask;
   24098:	f44f 5384 	mov.w	r3, #4224	; 0x1080
    p_reg->RXD.MAXCNT = length;
   2409c:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   240a0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   240a4:	2334      	movs	r3, #52	; 0x34
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   240a6:	fb03 c30e 	mla	r3, r3, lr, ip
   240aa:	2102      	movs	r1, #2
   240ac:	e012      	b.n	240d4 <nrfx_twim_xfer+0x1fc>
        nrf_twim_tx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   240ae:	686b      	ldr	r3, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   240b0:	68e9      	ldr	r1, [r5, #12]
   240b2:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        if (NRFX_TWIM_FLAG_TX_NO_STOP & flags)
   240b6:	f017 0f20 	tst.w	r7, #32
    p_reg->TXD.MAXCNT = length;
   240ba:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
   240be:	f04f 0334 	mov.w	r3, #52	; 0x34
   240c2:	d00b      	beq.n	240dc <nrfx_twim_xfer+0x204>
    p_reg->SHORTS = mask;
   240c4:	f44f 7180 	mov.w	r1, #256	; 0x100
   240c8:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
            p_cb->int_mask = NRF_TWIM_INT_SUSPENDED_MASK;
   240cc:	fb03 c30e 	mla	r3, r3, lr, ip
   240d0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
            p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   240d4:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   240d6:	2301      	movs	r3, #1
   240d8:	6223      	str	r3, [r4, #32]
   240da:	e791      	b.n	24000 <nrfx_twim_xfer+0x128>
    p_reg->SHORTS = mask;
   240dc:	f44f 7100 	mov.w	r1, #512	; 0x200
   240e0:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
   240e4:	e7df      	b.n	240a6 <nrfx_twim_xfer+0x1ce>
        nrf_twim_rx_buffer_set(p_twim, p_xfer_desc->p_primary_buf, p_xfer_desc->primary_length);
   240e6:	686b      	ldr	r3, [r5, #4]
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   240e8:	68e9      	ldr	r1, [r5, #12]
   240ea:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   240ee:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    p_reg->SHORTS = mask;
   240f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   240f6:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        p_cb->int_mask = NRF_TWIM_INT_STOPPED_MASK;
   240fa:	2334      	movs	r3, #52	; 0x34
   240fc:	fb03 c30e 	mla	r3, r3, lr, ip
   24100:	2102      	movs	r1, #2
   24102:	6099      	str	r1, [r3, #8]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24104:	2301      	movs	r3, #1
   24106:	6223      	str	r3, [r4, #32]
        start_task = NRF_TWIM_TASK_STARTRX;
   24108:	2300      	movs	r3, #0
   2410a:	e77a      	b.n	24002 <nrfx_twim_xfer+0x12a>
    switch (p_xfer_desc->type)
   2410c:	4e2d      	ldr	r6, [pc, #180]	; (241c4 <nrfx_twim_xfer+0x2ec>)
   2410e:	2308      	movs	r3, #8
   24110:	e778      	b.n	24004 <nrfx_twim_xfer+0x12c>
        if (flags & NRFX_TWIM_FLAG_NO_XFER_EVT_HANDLER)
   24112:	077a      	lsls	r2, r7, #29
            p_cb->int_mask = 0;
   24114:	bf44      	itt	mi
   24116:	2300      	movmi	r3, #0
   24118:	608b      	strmi	r3, [r1, #8]
        if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK))
   2411a:	067b      	lsls	r3, r7, #25
   2411c:	d406      	bmi.n	2412c <nrfx_twim_xfer+0x254>
            p_cb->int_mask |= NRF_TWIM_INT_STOPPED_MASK;
   2411e:	2334      	movs	r3, #52	; 0x34
   24120:	fb03 c30e 	mla	r3, r3, lr, ip
   24124:	689a      	ldr	r2, [r3, #8]
   24126:	f042 0202 	orr.w	r2, r2, #2
   2412a:	609a      	str	r2, [r3, #8]
        p_cb->int_mask |= NRF_TWIM_INT_ERROR_MASK;
   2412c:	2334      	movs	r3, #52	; 0x34
   2412e:	fb03 cc0e 	mla	ip, r3, lr, ip
   24132:	f8dc 3008 	ldr.w	r3, [ip, #8]
   24136:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   2413a:	f8cc 3008 	str.w	r3, [ip, #8]
        nrf_twim_int_enable(p_twim, p_cb->int_mask);
   2413e:	f8dc 3008 	ldr.w	r3, [ip, #8]
    p_reg->INTENSET = mask;
   24142:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   24146:	e6df      	b.n	23f08 <nrfx_twim_xfer+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   24148:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
   2414c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
                transmission_finished = true;
   24150:	2301      	movs	r3, #1
   24152:	e774      	b.n	2403e <nrfx_twim_xfer+0x166>
        } while (!transmission_finished);
   24154:	2b00      	cmp	r3, #0
   24156:	f43f af68 	beq.w	2402a <nrfx_twim_xfer+0x152>
        p_cb->busy = false;
   2415a:	2134      	movs	r1, #52	; 0x34
    uint32_t error_source = p_reg->ERRORSRC;
   2415c:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   24160:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
   24164:	fb01 c20e 	mla	r2, r1, lr, ip
   24168:	2000      	movs	r0, #0
   2416a:	f882 002f 	strb.w	r0, [r2, #47]	; 0x2f
        if (errorsrc)
   2416e:	b18b      	cbz	r3, 24194 <nrfx_twim_xfer+0x2bc>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   24170:	4a15      	ldr	r2, [pc, #84]	; (241c8 <nrfx_twim_xfer+0x2f0>)
   24172:	4e16      	ldr	r6, [pc, #88]	; (241cc <nrfx_twim_xfer+0x2f4>)
   24174:	f013 0f01 	tst.w	r3, #1
   24178:	bf18      	it	ne
   2417a:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   2417c:	f013 0f02 	tst.w	r3, #2
   24180:	f102 0201 	add.w	r2, r2, #1
   24184:	bf18      	it	ne
   24186:	4616      	movne	r6, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   24188:	f013 0f04 	tst.w	r3, #4
   2418c:	4b10      	ldr	r3, [pc, #64]	; (241d0 <nrfx_twim_xfer+0x2f8>)
   2418e:	bf18      	it	ne
   24190:	461e      	movne	r6, r3
   24192:	e6b9      	b.n	23f08 <nrfx_twim_xfer+0x30>
            if (!(flags & NRFX_TWIM_FLAG_NO_SPURIOUS_STOP_CHECK) &&
   24194:	067b      	lsls	r3, r7, #25
   24196:	f53f aeb7 	bmi.w	23f08 <nrfx_twim_xfer+0x30>
                !xfer_completeness_check(p_twim, p_cb))
   2419a:	fb0e c101 	mla	r1, lr, r1, ip
   2419e:	4620      	mov	r0, r4
   241a0:	f009 fb95 	bl	2d8ce <xfer_completeness_check>
                err_code = NRFX_ERROR_INTERNAL;
   241a4:	4b09      	ldr	r3, [pc, #36]	; (241cc <nrfx_twim_xfer+0x2f4>)
   241a6:	2800      	cmp	r0, #0
   241a8:	bf08      	it	eq
   241aa:	461e      	moveq	r6, r3
   241ac:	e6ac      	b.n	23f08 <nrfx_twim_xfer+0x30>
   241ae:	bf00      	nop
   241b0:	200037fc 	.word	0x200037fc
   241b4:	0bad000a 	.word	0x0bad000a
   241b8:	019c0202 	.word	0x019c0202
   241bc:	0bad000b 	.word	0x0bad000b
   241c0:	0bad0000 	.word	0x0bad0000
   241c4:	0bad0004 	.word	0x0bad0004
   241c8:	0bae0000 	.word	0x0bae0000
   241cc:	0bad0001 	.word	0x0bad0001
   241d0:	0bae0002 	.word	0x0bae0002

000241d4 <nrfx_twim_0_irq_handler>:

#if NRFX_CHECK(NRFX_TWIM0_ENABLED)
void nrfx_twim_0_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM0, &m_cb[NRFX_TWIM0_INST_IDX]);
   241d4:	4901      	ldr	r1, [pc, #4]	; (241dc <nrfx_twim_0_irq_handler+0x8>)
   241d6:	4802      	ldr	r0, [pc, #8]	; (241e0 <nrfx_twim_0_irq_handler+0xc>)
   241d8:	f7ff bd0c 	b.w	23bf4 <twim_irq_handler>
   241dc:	200037fc 	.word	0x200037fc
   241e0:	40003000 	.word	0x40003000

000241e4 <nrfx_twim_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_TWIM1_ENABLED)
void nrfx_twim_1_irq_handler(void)
{
    twim_irq_handler(NRF_TWIM1, &m_cb[NRFX_TWIM1_INST_IDX]);
   241e4:	4902      	ldr	r1, [pc, #8]	; (241f0 <nrfx_twim_1_irq_handler+0xc>)
   241e6:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
   241ea:	f7ff bd03 	b.w	23bf4 <twim_irq_handler>
   241ee:	bf00      	nop
   241f0:	20003830 	.word	0x20003830

000241f4 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
   241f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    *p_pin = pin_number & 0x1F;
   241f8:	f000 001f 	and.w	r0, r0, #31
   241fc:	f001 061f 	and.w	r6, r1, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24200:	2401      	movs	r4, #1
    p_reg->OUTSET = set_mask;
   24202:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24206:	fa04 f800 	lsl.w	r8, r4, r0
    reg->PIN_CNF[pin_number] = cnf;
   2420a:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
   2420e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   24212:	f240 630d 	movw	r3, #1549	; 0x60d
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   24216:	40b4      	lsls	r4, r6
    p_reg->OUTSET = set_mask;
   24218:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
   2421c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   24220:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
   24224:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
   24228:	2004      	movs	r0, #4
   2422a:	f009 fafd 	bl	2d828 <nrfx_busy_wait>
   2422e:	2709      	movs	r7, #9
    return p_reg->IN;
   24230:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510

    for (uint8_t i = 0; i < 9; i++)
    {
        if (nrf_gpio_pin_read(sda_pin))
   24234:	421c      	tst	r4, r3
   24236:	d10d      	bne.n	24254 <nrfx_twi_twim_bus_recover+0x60>
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
   24238:	2004      	movs	r0, #4
    p_reg->OUTCLR = clr_mask;
   2423a:	f8c5 850c 	str.w	r8, [r5, #1292]	; 0x50c
   2423e:	f009 faf3 	bl	2d828 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   24242:	3f01      	subs	r7, #1
    p_reg->OUTSET = set_mask;
   24244:	f8c5 8508 	str.w	r8, [r5, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
   24248:	2004      	movs	r0, #4
   2424a:	f009 faed 	bl	2d828 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
   2424e:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
   24252:	d1ed      	bne.n	24230 <nrfx_twi_twim_bus_recover+0x3c>
    p_reg->OUTCLR = clr_mask;
   24254:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
   24258:	2004      	movs	r0, #4
   2425a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
   2425e:	f009 fae3 	bl	2d828 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
   24262:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
   24266:	2004      	movs	r0, #4
   24268:	f009 fade 	bl	2d828 <nrfx_busy_wait>
    return p_reg->IN;
   2426c:	f8d5 1510 	ldr.w	r1, [r5, #1296]	; 0x510

    if (nrf_gpio_pin_read(sda_pin))
   24270:	4803      	ldr	r0, [pc, #12]	; (24280 <nrfx_twi_twim_bus_recover+0x8c>)
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24272:	fa21 f606 	lsr.w	r6, r1, r6
   24276:	f006 0601 	and.w	r6, r6, #1
   2427a:	1b80      	subs	r0, r0, r6
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
   2427c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24280:	0bad0001 	.word	0x0bad0001

00024284 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   24284:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   24286:	4c11      	ldr	r4, [pc, #68]	; (242cc <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   24288:	4a11      	ldr	r2, [pc, #68]	; (242d0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   2428a:	4912      	ldr	r1, [pc, #72]	; (242d4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   2428c:	2303      	movs	r3, #3
   2428e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   24290:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24292:	4b11      	ldr	r3, [pc, #68]	; (242d8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   24294:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   24296:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   24298:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2429c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   2429e:	2300      	movs	r3, #0
   242a0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   242a2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   242a4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   242a6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   242a8:	4a0c      	ldr	r2, [pc, #48]	; (242dc <_DoInit+0x58>)
   242aa:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   242ac:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   242ae:	2210      	movs	r2, #16
   242b0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   242b2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   242b4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   242b6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   242b8:	f00a fae8 	bl	2e88c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   242bc:	4908      	ldr	r1, [pc, #32]	; (242e0 <_DoInit+0x5c>)
   242be:	4620      	mov	r0, r4
   242c0:	f00a fae4 	bl	2e88c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   242c4:	2320      	movs	r3, #32
   242c6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   242c8:	bd10      	pop	{r4, pc}
   242ca:	bf00      	nop
   242cc:	20003864 	.word	0x20003864
   242d0:	00033c79 	.word	0x00033c79
   242d4:	00033c82 	.word	0x00033c82
   242d8:	20003b38 	.word	0x20003b38
   242dc:	20003b28 	.word	0x20003b28
   242e0:	00033c86 	.word	0x00033c86

000242e4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   242e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   242e8:	4f23      	ldr	r7, [pc, #140]	; (24378 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   242ea:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   242ee:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   242f0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   242f4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   242f6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   242f8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   242fa:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   242fc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   242fe:	d834      	bhi.n	2436a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   24300:	f8d2 a020 	ldr.w	sl, [r2, #32]
   24304:	ebaa 0905 	sub.w	r9, sl, r5
   24308:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   2430c:	4294      	cmp	r4, r2
   2430e:	d811      	bhi.n	24334 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   24310:	f04f 0918 	mov.w	r9, #24
   24314:	fb06 9309 	mla	r3, r6, r9, r9
   24318:	443b      	add	r3, r7
   2431a:	4622      	mov	r2, r4
   2431c:	6858      	ldr	r0, [r3, #4]
   2431e:	4641      	mov	r1, r8
   24320:	4428      	add	r0, r5
   24322:	f00a f920 	bl	2e566 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   24326:	fb09 7606 	mla	r6, r9, r6, r7
   2432a:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2432c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   2432e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   24330:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   24334:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   24336:	429c      	cmp	r4, r3
   24338:	d81b      	bhi.n	24372 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2433a:	fb00 bb0b 	mla	fp, r0, fp, fp
   2433e:	44bb      	add	fp, r7
   24340:	464a      	mov	r2, r9
   24342:	f8db 0004 	ldr.w	r0, [fp, #4]
   24346:	442c      	add	r4, r5
   24348:	4428      	add	r0, r5
   2434a:	f00a f90c 	bl	2e566 <memcpy>
      if (NumBytes) {
   2434e:	ebb4 040a 	subs.w	r4, r4, sl
   24352:	d006      	beq.n	24362 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   24354:	f8db 0004 	ldr.w	r0, [fp, #4]
   24358:	4622      	mov	r2, r4
   2435a:	eb08 0109 	add.w	r1, r8, r9
   2435e:	f00a f902 	bl	2e566 <memcpy>
      pRing->WrOff = NumBytes;
   24362:	2018      	movs	r0, #24
   24364:	fb00 7606 	mla	r6, r0, r6, r7
   24368:	e7e0      	b.n	2432c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   2436a:	3b01      	subs	r3, #1
   2436c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2436e:	42a3      	cmp	r3, r4
   24370:	d2ce      	bcs.n	24310 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   24372:	2000      	movs	r0, #0
   24374:	e7dc      	b.n	24330 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   24376:	bf00      	nop
   24378:	20003864 	.word	0x20003864

0002437c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2437c:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
   2437e:	4b16      	ldr	r3, [pc, #88]	; (243d8 <SEGGER_RTT_WriteNoLock+0x5c>)
   24380:	2418      	movs	r4, #24
   24382:	fb00 4504 	mla	r5, r0, r4, r4
   24386:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
   24388:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2438c:	4616      	mov	r6, r2
  switch (pRing->Flags) {
   2438e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   24390:	2c01      	cmp	r4, #1
   24392:	d00e      	beq.n	243b2 <SEGGER_RTT_WriteNoLock+0x36>
   24394:	2c02      	cmp	r4, #2
   24396:	d018      	beq.n	243ca <SEGGER_RTT_WriteNoLock+0x4e>
   24398:	b9e4      	cbnz	r4, 243d4 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
   2439a:	4628      	mov	r0, r5
   2439c:	f009 fac7 	bl	2d92e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
   243a0:	4286      	cmp	r6, r0
   243a2:	d804      	bhi.n	243ae <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
   243a4:	4632      	mov	r2, r6
   243a6:	4628      	mov	r0, r5
   243a8:	f009 faca 	bl	2d940 <_WriteNoCheck>
   243ac:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
   243ae:	4620      	mov	r0, r4
   243b0:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
   243b2:	4628      	mov	r0, r5
   243b4:	f009 fabb 	bl	2d92e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
   243b8:	4286      	cmp	r6, r0
   243ba:	4634      	mov	r4, r6
   243bc:	bf28      	it	cs
   243be:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
   243c0:	4622      	mov	r2, r4
   243c2:	4628      	mov	r0, r5
   243c4:	f009 fabc 	bl	2d940 <_WriteNoCheck>
    break;
   243c8:	e7f1      	b.n	243ae <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
   243ca:	4628      	mov	r0, r5
}
   243cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
   243d0:	f009 bad3 	b.w	2d97a <_WriteBlocking>
  switch (pRing->Flags) {
   243d4:	2400      	movs	r4, #0
  return Status;
   243d6:	e7ea      	b.n	243ae <SEGGER_RTT_WriteNoLock+0x32>
   243d8:	20003864 	.word	0x20003864

000243dc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   243dc:	4b03      	ldr	r3, [pc, #12]	; (243ec <SEGGER_RTT_HasDataUp+0x10>)
   243de:	2218      	movs	r2, #24
   243e0:	fb02 3300 	mla	r3, r2, r0, r3
   243e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   243e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   243e8:	1a80      	subs	r0, r0, r2
   243ea:	4770      	bx	lr
   243ec:	20003864 	.word	0x20003864

000243f0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243f0:	4b0e      	ldr	r3, [pc, #56]	; (2442c <z_sys_init_run_level+0x3c>)
{
   243f2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   243f4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   243f8:	3001      	adds	r0, #1
   243fa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   243fe:	42a6      	cmp	r6, r4
   24400:	d800      	bhi.n	24404 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   24402:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24404:	e9d4 3500 	ldrd	r3, r5, [r4]
   24408:	4628      	mov	r0, r5
   2440a:	4798      	blx	r3
		if (dev != NULL) {
   2440c:	b165      	cbz	r5, 24428 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   2440e:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   24410:	b130      	cbz	r0, 24420 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24412:	2800      	cmp	r0, #0
   24414:	bfb8      	it	lt
   24416:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   24418:	28ff      	cmp	r0, #255	; 0xff
   2441a:	bfa8      	it	ge
   2441c:	20ff      	movge	r0, #255	; 0xff
   2441e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24420:	785a      	ldrb	r2, [r3, #1]
   24422:	f042 0201 	orr.w	r2, r2, #1
   24426:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24428:	3408      	adds	r4, #8
   2442a:	e7e8      	b.n	243fe <z_sys_init_run_level+0xe>
   2442c:	0003133c 	.word	0x0003133c

00024430 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   24430:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   24432:	4605      	mov	r5, r0
   24434:	b910      	cbnz	r0, 2443c <z_impl_device_get_binding+0xc>
		return NULL;
   24436:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   24438:	4620      	mov	r0, r4
   2443a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   2443c:	7803      	ldrb	r3, [r0, #0]
   2443e:	2b00      	cmp	r3, #0
   24440:	d0f9      	beq.n	24436 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   24442:	4c0e      	ldr	r4, [pc, #56]	; (2447c <z_impl_device_get_binding+0x4c>)
   24444:	4e0e      	ldr	r6, [pc, #56]	; (24480 <z_impl_device_get_binding+0x50>)
   24446:	42b4      	cmp	r4, r6
   24448:	d108      	bne.n	2445c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   2444a:	4c0c      	ldr	r4, [pc, #48]	; (2447c <z_impl_device_get_binding+0x4c>)
   2444c:	42b4      	cmp	r4, r6
   2444e:	d0f2      	beq.n	24436 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   24450:	4620      	mov	r0, r4
   24452:	f009 fac3 	bl	2d9dc <z_device_is_ready>
   24456:	b950      	cbnz	r0, 2446e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   24458:	3418      	adds	r4, #24
   2445a:	e7f7      	b.n	2444c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
   2445c:	4620      	mov	r0, r4
   2445e:	f009 fabd 	bl	2d9dc <z_device_is_ready>
   24462:	b110      	cbz	r0, 2446a <z_impl_device_get_binding+0x3a>
   24464:	6823      	ldr	r3, [r4, #0]
   24466:	42ab      	cmp	r3, r5
   24468:	d0e6      	beq.n	24438 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   2446a:	3418      	adds	r4, #24
   2446c:	e7eb      	b.n	24446 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2446e:	6821      	ldr	r1, [r4, #0]
   24470:	4628      	mov	r0, r5
   24472:	f7dc fe04 	bl	107e <strcmp>
   24476:	2800      	cmp	r0, #0
   24478:	d1ee      	bne.n	24458 <z_impl_device_get_binding+0x28>
   2447a:	e7dd      	b.n	24438 <z_impl_device_get_binding+0x8>
   2447c:	0002f080 	.word	0x0002f080
   24480:	0002f248 	.word	0x0002f248

00024484 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   24484:	4b01      	ldr	r3, [pc, #4]	; (2448c <z_impl_z_errno+0x8>)
   24486:	6898      	ldr	r0, [r3, #8]
}
   24488:	3064      	adds	r0, #100	; 0x64
   2448a:	4770      	bx	lr
   2448c:	2000390c 	.word	0x2000390c

00024490 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   24490:	b510      	push	{r4, lr}
   24492:	4604      	mov	r4, r0
   24494:	b088      	sub	sp, #32
	z_impl_log_panic();
   24496:	f7e2 fadd 	bl	6a54 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   2449a:	4b07      	ldr	r3, [pc, #28]	; (244b8 <k_sys_fatal_error_handler+0x28>)
   2449c:	9306      	str	r3, [sp, #24]
   2449e:	2302      	movs	r3, #2
   244a0:	9301      	str	r3, [sp, #4]
   244a2:	9305      	str	r3, [sp, #20]
   244a4:	4805      	ldr	r0, [pc, #20]	; (244bc <k_sys_fatal_error_handler+0x2c>)
   244a6:	2300      	movs	r3, #0
   244a8:	aa05      	add	r2, sp, #20
   244aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   244ae:	f004 faff 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	arch_system_halt(reason);
   244b2:	4620      	mov	r0, r4
   244b4:	f009 faab 	bl	2da0e <arch_system_halt>
   244b8:	00033c8d 	.word	0x00033c8d
   244bc:	0002f54c 	.word	0x0002f54c

000244c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   244c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   244c4:	4605      	mov	r5, r0
   244c6:	b08e      	sub	sp, #56	; 0x38
   244c8:	460e      	mov	r6, r1
	__asm__ volatile(
   244ca:	f04f 0320 	mov.w	r3, #32
   244ce:	f3ef 8811 	mrs	r8, BASEPRI
   244d2:	f383 8812 	msr	BASEPRI_MAX, r3
   244d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
   244da:	f001 f8ef 	bl	256bc <z_impl_z_current_get>
   244de:	2d04      	cmp	r5, #4
   244e0:	bf96      	itet	ls
   244e2:	4b22      	ldrls	r3, [pc, #136]	; (2456c <z_fatal_error+0xac>)
   244e4:	4b22      	ldrhi	r3, [pc, #136]	; (24570 <z_fatal_error+0xb0>)
   244e6:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   244ea:	4922      	ldr	r1, [pc, #136]	; (24574 <z_fatal_error+0xb4>)
   244ec:	9502      	str	r5, [sp, #8]
   244ee:	2700      	movs	r7, #0
   244f0:	e9cd 3703 	strd	r3, r7, [sp, #12]
   244f4:	4b20      	ldr	r3, [pc, #128]	; (24578 <z_fatal_error+0xb8>)
   244f6:	4604      	mov	r4, r0
   244f8:	e9cd 7300 	strd	r7, r3, [sp]
   244fc:	2201      	movs	r2, #1
   244fe:	463b      	mov	r3, r7
   24500:	4638      	mov	r0, r7
   24502:	f009 fa75 	bl	2d9f0 <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24506:	b17e      	cbz	r6, 24528 <z_fatal_error+0x68>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24508:	69f3      	ldr	r3, [r6, #28]
   2450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2450e:	b15b      	cbz	r3, 24528 <z_fatal_error+0x68>
		LOG_ERR("Fault during interrupt handling\n");
   24510:	4b1a      	ldr	r3, [pc, #104]	; (2457c <z_fatal_error+0xbc>)
   24512:	930c      	str	r3, [sp, #48]	; 0x30
   24514:	2302      	movs	r3, #2
   24516:	9307      	str	r3, [sp, #28]
   24518:	930b      	str	r3, [sp, #44]	; 0x2c
   2451a:	4816      	ldr	r0, [pc, #88]	; (24574 <z_fatal_error+0xb4>)
   2451c:	463b      	mov	r3, r7
   2451e:	aa0b      	add	r2, sp, #44	; 0x2c
   24520:	f44f 5182 	mov.w	r1, #4160	; 0x1040
   24524:	f004 fac4 	bl	28ab0 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24528:	b12c      	cbz	r4, 24536 <z_fatal_error+0x76>
   2452a:	4620      	mov	r0, r4
   2452c:	f009 fb10 	bl	2db50 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   24530:	b108      	cbz	r0, 24536 <z_fatal_error+0x76>
   24532:	7803      	ldrb	r3, [r0, #0]
   24534:	b903      	cbnz	r3, 24538 <z_fatal_error+0x78>
		thread_name = "unknown";
   24536:	4812      	ldr	r0, [pc, #72]	; (24580 <z_fatal_error+0xc0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24538:	4b12      	ldr	r3, [pc, #72]	; (24584 <z_fatal_error+0xc4>)
   2453a:	9301      	str	r3, [sp, #4]
   2453c:	2300      	movs	r3, #0
   2453e:	e9cd 4002 	strd	r4, r0, [sp, #8]
   24542:	9300      	str	r3, [sp, #0]
   24544:	4618      	mov	r0, r3
   24546:	2201      	movs	r2, #1
   24548:	490a      	ldr	r1, [pc, #40]	; (24574 <z_fatal_error+0xb4>)
   2454a:	f009 fa51 	bl	2d9f0 <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2454e:	4631      	mov	r1, r6
   24550:	4628      	mov	r0, r5
   24552:	f7ff ff9d 	bl	24490 <k_sys_fatal_error_handler>
	__asm__ volatile(
   24556:	f388 8811 	msr	BASEPRI, r8
   2455a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   2455e:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   24560:	b00e      	add	sp, #56	; 0x38
   24562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   24566:	f7e3 bcc5 	b.w	7ef4 <z_impl_k_thread_abort>
   2456a:	bf00      	nop
   2456c:	00031354 	.word	0x00031354
   24570:	00033c9c 	.word	0x00033c9c
   24574:	0002f54c 	.word	0x0002f54c
   24578:	00033cb2 	.word	0x00033cb2
   2457c:	00033cda 	.word	0x00033cda
   24580:	00033caa 	.word	0x00033caa
   24584:	00033cfb 	.word	0x00033cfb

00024588 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   24588:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   2458a:	2300      	movs	r3, #0
{
   2458c:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
   2458e:	2201      	movs	r2, #1
   24590:	e9cd 2304 	strd	r2, r3, [sp, #16]
   24594:	220f      	movs	r2, #15
   24596:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2459a:	9301      	str	r3, [sp, #4]
	struct k_thread *thread = &z_idle_threads[i];
   2459c:	4c0c      	ldr	r4, [pc, #48]	; (245d0 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2459e:	4b0d      	ldr	r3, [pc, #52]	; (245d4 <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
   245a0:	490d      	ldr	r1, [pc, #52]	; (245d8 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   245a2:	2218      	movs	r2, #24
	struct k_thread *thread = &z_idle_threads[i];
   245a4:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   245a8:	fb02 3300 	mla	r3, r2, r0, r3
	z_setup_new_thread(thread, stack,
   245ac:	f44f 75b0 	mov.w	r5, #352	; 0x160
   245b0:	9300      	str	r3, [sp, #0]
   245b2:	fb05 1100 	mla	r1, r5, r0, r1
   245b6:	4b09      	ldr	r3, [pc, #36]	; (245dc <init_idle_thread+0x54>)
   245b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   245bc:	4620      	mov	r0, r4
   245be:	f000 f90b 	bl	247d8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   245c2:	7b63      	ldrb	r3, [r4, #13]
   245c4:	f023 0304 	bic.w	r3, r3, #4
   245c8:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   245ca:	b007      	add	sp, #28
   245cc:	bd30      	pop	{r4, r5, pc}
   245ce:	bf00      	nop
   245d0:	20001fe0 	.word	0x20001fe0
   245d4:	2000390c 	.word	0x2000390c
   245d8:	200073e0 	.word	0x200073e0
   245dc:	0002494d 	.word	0x0002494d

000245e0 <bg_thread_main>:
{
   245e0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   245e2:	4b0a      	ldr	r3, [pc, #40]	; (2460c <bg_thread_main+0x2c>)
   245e4:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   245e6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   245e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   245ea:	f7ff ff01 	bl	243f0 <z_sys_init_run_level>
	boot_banner();
   245ee:	f001 fb6d 	bl	25ccc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   245f2:	2003      	movs	r0, #3
   245f4:	f7ff fefc 	bl	243f0 <z_sys_init_run_level>
	z_init_static_threads();
   245f8:	f000 f94c 	bl	24894 <z_init_static_threads>
	main();
   245fc:	f003 fc13 	bl	27e26 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24600:	4a03      	ldr	r2, [pc, #12]	; (24610 <bg_thread_main+0x30>)
   24602:	7b13      	ldrb	r3, [r2, #12]
   24604:	f023 0301 	bic.w	r3, r3, #1
   24608:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2460a:	bd08      	pop	{r3, pc}
   2460c:	20003f38 	.word	0x20003f38
   24610:	20002060 	.word	0x20002060

00024614 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   24614:	4802      	ldr	r0, [pc, #8]	; (24620 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   24616:	4a03      	ldr	r2, [pc, #12]	; (24624 <z_bss_zero+0x10>)
   24618:	2100      	movs	r1, #0
   2461a:	1a12      	subs	r2, r2, r0
   2461c:	f009 bfc4 	b.w	2e5a8 <memset>
   24620:	20000ef0 	.word	0x20000ef0
   24624:	20003f3c 	.word	0x20003f3c

00024628 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   24628:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2462a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 246f4 <z_cstart+0xcc>
   2462e:	b0a6      	sub	sp, #152	; 0x98
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   24630:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   24634:	4d30      	ldr	r5, [pc, #192]	; (246f8 <z_cstart+0xd0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
   24636:	4e31      	ldr	r6, [pc, #196]	; (246fc <z_cstart+0xd4>)
   24638:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2463a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 24700 <z_cstart+0xd8>
   2463e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   24642:	2400      	movs	r4, #0
   24644:	616b      	str	r3, [r5, #20]
   24646:	23e0      	movs	r3, #224	; 0xe0
   24648:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   2464c:	77ec      	strb	r4, [r5, #31]
   2464e:	762c      	strb	r4, [r5, #24]
   24650:	766c      	strb	r4, [r5, #25]
   24652:	76ac      	strb	r4, [r5, #26]
   24654:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   24658:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   2465a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   2465e:	626b      	str	r3, [r5, #36]	; 0x24
   24660:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   24664:	f7e3 fc10 	bl	7e88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   24668:	f7e2 ff72 	bl	7550 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   2466c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24670:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24672:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24674:	f7e3 fd00 	bl	8078 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24678:	f7e3 fc4e 	bl	7f18 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
   2467c:	f7e2 f8f4 	bl	6868 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
   24680:	f240 1301 	movw	r3, #257	; 0x101
   24684:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   24688:	ab06      	add	r3, sp, #24
   2468a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   2468c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
   24690:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   24692:	f009 f9a2 	bl	2d9da <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   24696:	4620      	mov	r0, r4
   24698:	f7ff feaa 	bl	243f0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   2469c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
   2469e:	4d19      	ldr	r5, [pc, #100]	; (24704 <z_cstart+0xdc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   246a0:	f7ff fea6 	bl	243f0 <z_sys_init_run_level>
	z_sched_init();
   246a4:	f000 ff5c 	bl	25560 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   246a8:	4b17      	ldr	r3, [pc, #92]	; (24708 <z_cstart+0xe0>)
   246aa:	9305      	str	r3, [sp, #20]
   246ac:	2301      	movs	r3, #1
   246ae:	4917      	ldr	r1, [pc, #92]	; (2470c <z_cstart+0xe4>)
   246b0:	9400      	str	r4, [sp, #0]
   246b2:	e9cd 4303 	strd	r4, r3, [sp, #12]
   246b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   246ba:	464b      	mov	r3, r9
   246bc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   246c0:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   246c2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   246c4:	f000 f888 	bl	247d8 <z_setup_new_thread>
   246c8:	7b6a      	ldrb	r2, [r5, #13]
   246ca:	4607      	mov	r7, r0
   246cc:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
   246d0:	4628      	mov	r0, r5
   246d2:	736a      	strb	r2, [r5, #13]
   246d4:	f009 fc90 	bl	2dff8 <z_ready_thread>
		init_idle_thread(i);
   246d8:	4620      	mov	r0, r4
   246da:	f7ff ff55 	bl	24588 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   246de:	4b0c      	ldr	r3, [pc, #48]	; (24710 <z_cstart+0xe8>)
   246e0:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   246e2:	464a      	mov	r2, r9
   246e4:	4639      	mov	r1, r7
   246e6:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   246e8:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   246ea:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   246ee:	f7e3 f8b9 	bl	7864 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   246f2:	bf00      	nop
   246f4:	20007d60 	.word	0x20007d60
   246f8:	e000ed00 	.word	0xe000ed00
   246fc:	2000390c 	.word	0x2000390c
   24700:	000245e1 	.word	0x000245e1
   24704:	20002060 	.word	0x20002060
   24708:	00033d5d 	.word	0x00033d5d
   2470c:	20006fc0 	.word	0x20006fc0
   24710:	20001fe0 	.word	0x20001fe0

00024714 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   24714:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   24716:	4c06      	ldr	r4, [pc, #24]	; (24730 <statics_init+0x1c>)
   24718:	4d06      	ldr	r5, [pc, #24]	; (24734 <statics_init+0x20>)
   2471a:	42ac      	cmp	r4, r5
   2471c:	d301      	bcc.n	24722 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   2471e:	2000      	movs	r0, #0
   24720:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   24722:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   24726:	4620      	mov	r0, r4
   24728:	f009 f97a 	bl	2da20 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   2472c:	3414      	adds	r4, #20
   2472e:	e7f4      	b.n	2471a <statics_init+0x6>
   24730:	20000c74 	.word	0x20000c74
   24734:	20000c74 	.word	0x20000c74

00024738 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
   24738:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2473a:	4b0e      	ldr	r3, [pc, #56]	; (24774 <init_mem_slab_module+0x3c>)
   2473c:	4c0e      	ldr	r4, [pc, #56]	; (24778 <init_mem_slab_module+0x40>)
   2473e:	42a3      	cmp	r3, r4
   24740:	d301      	bcc.n	24746 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   24742:	2000      	movs	r0, #0
	return rc;
}
   24744:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24746:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   2474a:	ea41 0200 	orr.w	r2, r1, r0
   2474e:	f012 0203 	ands.w	r2, r2, #3
   24752:	d10b      	bne.n	2476c <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   24754:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   24756:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   24758:	42aa      	cmp	r2, r5
   2475a:	d101      	bne.n	24760 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   2475c:	331c      	adds	r3, #28
   2475e:	e7ee      	b.n	2473e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   24760:	695e      	ldr	r6, [r3, #20]
   24762:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24764:	3201      	adds	r2, #1
		slab->free_list = p;
   24766:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   24768:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   2476a:	e7f5      	b.n	24758 <init_mem_slab_module+0x20>
	return rc;
   2476c:	f06f 0015 	mvn.w	r0, #21
   24770:	e7e8      	b.n	24744 <init_mem_slab_module+0xc>
   24772:	bf00      	nop
   24774:	20000c20 	.word	0x20000c20
   24778:	20000c74 	.word	0x20000c74

0002477c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   2477c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2477e:	460c      	mov	r4, r1
	__asm__ volatile(
   24780:	f04f 0520 	mov.w	r5, #32
   24784:	f3ef 8111 	mrs	r1, BASEPRI
   24788:	f385 8812 	msr	BASEPRI_MAX, r5
   2478c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24790:	6945      	ldr	r5, [r0, #20]
   24792:	b15d      	cbz	r5, 247ac <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   24794:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   24796:	682b      	ldr	r3, [r5, #0]
   24798:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2479a:	6983      	ldr	r3, [r0, #24]
   2479c:	3301      	adds	r3, #1
   2479e:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   247a0:	2000      	movs	r0, #0
	__asm__ volatile(
   247a2:	f381 8811 	msr	BASEPRI, r1
   247a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   247aa:	e011      	b.n	247d0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   247ac:	ea52 0c03 	orrs.w	ip, r2, r3
   247b0:	d103      	bne.n	247ba <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   247b2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   247b4:	f06f 000b 	mvn.w	r0, #11
   247b8:	e7f3      	b.n	247a2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   247ba:	e9cd 2300 	strd	r2, r3, [sp]
   247be:	4602      	mov	r2, r0
   247c0:	3008      	adds	r0, #8
   247c2:	f000 fe23 	bl	2540c <z_pend_curr>
		if (result == 0) {
   247c6:	b918      	cbnz	r0, 247d0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   247c8:	4b02      	ldr	r3, [pc, #8]	; (247d4 <k_mem_slab_alloc+0x58>)
   247ca:	689b      	ldr	r3, [r3, #8]
   247cc:	695b      	ldr	r3, [r3, #20]
   247ce:	6023      	str	r3, [r4, #0]
}
   247d0:	b003      	add	sp, #12
   247d2:	bd30      	pop	{r4, r5, pc}
   247d4:	2000390c 	.word	0x2000390c

000247d8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   247d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   247dc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   247de:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   247e0:	2604      	movs	r6, #4
   247e2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   247e4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   247e6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   247e8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   247ec:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   247ee:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
   247f0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   247f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   247f6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   247f8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   247fc:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   247fe:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   24802:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   24806:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   24808:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2480a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2480c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24810:	9202      	str	r2, [sp, #8]
   24812:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24814:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   24816:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2481a:	9200      	str	r2, [sp, #0]
   2481c:	4642      	mov	r2, r8
{
   2481e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   24820:	f7e2 ffee 	bl	7800 <arch_new_thread>
	if (!_current) {
   24824:	4b04      	ldr	r3, [pc, #16]	; (24838 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   24826:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   24828:	689b      	ldr	r3, [r3, #8]
   2482a:	b103      	cbz	r3, 2482e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   2482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   2482e:	6763      	str	r3, [r4, #116]	; 0x74
}
   24830:	4640      	mov	r0, r8
   24832:	b004      	add	sp, #16
   24834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24838:	2000390c 	.word	0x2000390c

0002483c <z_impl_k_thread_create>:
{
   2483c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2483e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24840:	2700      	movs	r7, #0
   24842:	9705      	str	r7, [sp, #20]
   24844:	9f10      	ldr	r7, [sp, #64]	; 0x40
   24846:	9704      	str	r7, [sp, #16]
   24848:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2484a:	9703      	str	r7, [sp, #12]
   2484c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   2484e:	9702      	str	r7, [sp, #8]
{
   24850:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   24854:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   24856:	9701      	str	r7, [sp, #4]
   24858:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2485a:	9700      	str	r7, [sp, #0]
{
   2485c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2485e:	f7ff ffbb 	bl	247d8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24862:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   24866:	bf08      	it	eq
   24868:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   2486c:	d005      	beq.n	2487a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2486e:	ea55 0306 	orrs.w	r3, r5, r6
   24872:	d105      	bne.n	24880 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   24874:	4620      	mov	r0, r4
   24876:	f000 fd6d 	bl	25354 <z_sched_start>
}
   2487a:	4620      	mov	r0, r4
   2487c:	b007      	add	sp, #28
   2487e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24880:	4903      	ldr	r1, [pc, #12]	; (24890 <z_impl_k_thread_create+0x54>)
   24882:	4632      	mov	r2, r6
   24884:	462b      	mov	r3, r5
   24886:	f104 0018 	add.w	r0, r4, #24
   2488a:	f000 fff5 	bl	25878 <z_add_timeout>
   2488e:	e7f4      	b.n	2487a <z_impl_k_thread_create+0x3e>
   24890:	0002e019 	.word	0x0002e019

00024894 <z_init_static_threads>:
{
   24894:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24898:	4c29      	ldr	r4, [pc, #164]	; (24940 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2489a:	4d2a      	ldr	r5, [pc, #168]	; (24944 <z_init_static_threads+0xb0>)
{
   2489c:	b087      	sub	sp, #28
   2489e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   248a0:	42ae      	cmp	r6, r5
   248a2:	f104 0430 	add.w	r4, r4, #48	; 0x30
   248a6:	d30f      	bcc.n	248c8 <z_init_static_threads+0x34>
	k_sched_lock();
   248a8:	f000 fc70 	bl	2518c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   248ac:	4c24      	ldr	r4, [pc, #144]	; (24940 <z_init_static_threads+0xac>)
   248ae:	f8df 9098 	ldr.w	r9, [pc, #152]	; 24948 <z_init_static_threads+0xb4>
   248b2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   248b6:	f240 37e7 	movw	r7, #999	; 0x3e7
   248ba:	42ac      	cmp	r4, r5
   248bc:	d320      	bcc.n	24900 <z_init_static_threads+0x6c>
}
   248be:	b007      	add	sp, #28
   248c0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   248c4:	f000 be30 	b.w	25528 <k_sched_unlock>
		z_setup_new_thread(
   248c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   248cc:	9305      	str	r3, [sp, #20]
   248ce:	f854 3c10 	ldr.w	r3, [r4, #-16]
   248d2:	9304      	str	r3, [sp, #16]
   248d4:	f854 3c14 	ldr.w	r3, [r4, #-20]
   248d8:	9303      	str	r3, [sp, #12]
   248da:	f854 3c18 	ldr.w	r3, [r4, #-24]
   248de:	9302      	str	r3, [sp, #8]
   248e0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   248e4:	9301      	str	r3, [sp, #4]
   248e6:	f854 3c20 	ldr.w	r3, [r4, #-32]
   248ea:	9300      	str	r3, [sp, #0]
   248ec:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   248f0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   248f4:	f7ff ff70 	bl	247d8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   248f8:	f854 3c30 	ldr.w	r3, [r4, #-48]
   248fc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   248fe:	e7ce      	b.n	2489e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24900:	6a63      	ldr	r3, [r4, #36]	; 0x24
   24902:	1c5a      	adds	r2, r3, #1
   24904:	d00d      	beq.n	24922 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   24906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2490a:	2100      	movs	r1, #0
   2490c:	4638      	mov	r0, r7
   2490e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24912:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   24916:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2491a:	d104      	bne.n	24926 <z_init_static_threads+0x92>
	z_sched_start(thread);
   2491c:	4640      	mov	r0, r8
   2491e:	f000 fd19 	bl	25354 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24922:	3430      	adds	r4, #48	; 0x30
   24924:	e7c9      	b.n	248ba <z_init_static_threads+0x26>
   24926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2492a:	2300      	movs	r3, #0
   2492c:	f7dc f974 	bl	c18 <__aeabi_uldivmod>
   24930:	4602      	mov	r2, r0
   24932:	460b      	mov	r3, r1
   24934:	f108 0018 	add.w	r0, r8, #24
   24938:	4649      	mov	r1, r9
   2493a:	f000 ff9d 	bl	25878 <z_add_timeout>
   2493e:	e7f0      	b.n	24922 <z_init_static_threads+0x8e>
   24940:	20000b30 	.word	0x20000b30
   24944:	20000c20 	.word	0x20000c20
   24948:	0002e019 	.word	0x0002e019

0002494c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   2494c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   2494e:	4c0b      	ldr	r4, [pc, #44]	; (2497c <idle+0x30>)
	return !z_sys_post_kernel;
   24950:	4d0b      	ldr	r5, [pc, #44]	; (24980 <idle+0x34>)
	__asm__ volatile(
   24952:	f04f 0220 	mov.w	r2, #32
   24956:	f3ef 8311 	mrs	r3, BASEPRI
   2495a:	f382 8812 	msr	BASEPRI_MAX, r2
   2495e:	f3bf 8f6f 	isb	sy
   24962:	f009 fc15 	bl	2e190 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   24966:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
   24968:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
   2496a:	b913      	cbnz	r3, 24972 <idle+0x26>
	arch_cpu_idle();
   2496c:	f7e2 fdf6 	bl	755c <arch_cpu_idle>
}
   24970:	e7ef      	b.n	24952 <idle+0x6>
   24972:	f7e2 fbed 	bl	7150 <pm_system_suspend>
   24976:	2800      	cmp	r0, #0
   24978:	d1eb      	bne.n	24952 <idle+0x6>
   2497a:	e7f7      	b.n	2496c <idle+0x20>
   2497c:	2000390c 	.word	0x2000390c
   24980:	20003f38 	.word	0x20003f38

00024984 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   24984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24988:	4604      	mov	r4, r0
   2498a:	460e      	mov	r6, r1

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2498c:	f100 0808 	add.w	r8, r0, #8
   24990:	f04f 0120 	mov.w	r1, #32
   24994:	f3ef 8711 	mrs	r7, BASEPRI
   24998:	f381 8812 	msr	BASEPRI_MAX, r1
   2499c:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   249a0:	6a05      	ldr	r5, [r0, #32]
   249a2:	68c1      	ldr	r1, [r0, #12]
   249a4:	428d      	cmp	r5, r1
   249a6:	d22f      	bcs.n	24a08 <z_impl_k_msgq_put+0x84>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   249a8:	f009 fb97 	bl	2e0da <z_unpend_first_thread>
		if (pending_thread != NULL) {
   249ac:	68a2      	ldr	r2, [r4, #8]
   249ae:	4605      	mov	r5, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   249b0:	4631      	mov	r1, r6
   249b2:	b178      	cbz	r0, 249d4 <z_impl_k_msgq_put+0x50>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   249b4:	2400      	movs	r4, #0
   249b6:	6940      	ldr	r0, [r0, #20]
   249b8:	f009 fdd5 	bl	2e566 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   249bc:	4628      	mov	r0, r5
   249be:	67ec      	str	r4, [r5, #124]	; 0x7c
   249c0:	f009 fb1a 	bl	2dff8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   249c4:	4640      	mov	r0, r8
   249c6:	4639      	mov	r1, r7
   249c8:	f000 fbce 	bl	25168 <z_reschedule>
			return 0;
   249cc:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   249ce:	b002      	add	sp, #8
   249d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   249d4:	69e0      	ldr	r0, [r4, #28]
   249d6:	f009 fdc6 	bl	2e566 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   249da:	69e3      	ldr	r3, [r4, #28]
   249dc:	68a2      	ldr	r2, [r4, #8]
   249de:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   249e0:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   249e2:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   249e4:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   249e6:	bf04      	itt	eq
   249e8:	6923      	ldreq	r3, [r4, #16]
   249ea:	61e3      	streq	r3, [r4, #28]
			msgq->used_msgs++;
   249ec:	6a23      	ldr	r3, [r4, #32]
   249ee:	3301      	adds	r3, #1
	z_handle_obj_poll_events(&msgq->poll_events, state);
   249f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
			msgq->used_msgs++;
   249f4:	6223      	str	r3, [r4, #32]
	z_handle_obj_poll_events(&msgq->poll_events, state);
   249f6:	2110      	movs	r1, #16
   249f8:	f009 fd90 	bl	2e51c <z_handle_obj_poll_events>
		result = 0;
   249fc:	2000      	movs	r0, #0
	__asm__ volatile(
   249fe:	f387 8811 	msr	BASEPRI, r7
   24a02:	f3bf 8f6f 	isb	sy
	return result;
   24a06:	e7e2      	b.n	249ce <z_impl_k_msgq_put+0x4a>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24a08:	ea52 0103 	orrs.w	r1, r2, r3
   24a0c:	d00a      	beq.n	24a24 <z_impl_k_msgq_put+0xa0>
		_current->base.swap_data = (void *) data;
   24a0e:	4907      	ldr	r1, [pc, #28]	; (24a2c <z_impl_k_msgq_put+0xa8>)
   24a10:	6889      	ldr	r1, [r1, #8]
   24a12:	614e      	str	r6, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   24a14:	e9cd 2300 	strd	r2, r3, [sp]
   24a18:	4639      	mov	r1, r7
   24a1a:	4602      	mov	r2, r0
   24a1c:	4640      	mov	r0, r8
   24a1e:	f000 fcf5 	bl	2540c <z_pend_curr>
		return result;
   24a22:	e7d4      	b.n	249ce <z_impl_k_msgq_put+0x4a>
		result = -ENOMSG;
   24a24:	f06f 0022 	mvn.w	r0, #34	; 0x22
   24a28:	e7e9      	b.n	249fe <z_impl_k_msgq_put+0x7a>
   24a2a:	bf00      	nop
   24a2c:	2000390c 	.word	0x2000390c

00024a30 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   24a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24a32:	4604      	mov	r4, r0

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   24a34:	f104 0708 	add.w	r7, r4, #8
{
   24a38:	4608      	mov	r0, r1
	__asm__ volatile(
   24a3a:	f04f 0120 	mov.w	r1, #32
   24a3e:	f3ef 8611 	mrs	r6, BASEPRI
   24a42:	f381 8812 	msr	BASEPRI_MAX, r1
   24a46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   24a4a:	6a21      	ldr	r1, [r4, #32]
   24a4c:	2900      	cmp	r1, #0
   24a4e:	d031      	beq.n	24ab4 <z_impl_k_msgq_get+0x84>
   24a50:	68a2      	ldr	r2, [r4, #8]
   24a52:	69a1      	ldr	r1, [r4, #24]
   24a54:	f009 fd87 	bl	2e566 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   24a58:	69a3      	ldr	r3, [r4, #24]
   24a5a:	68a2      	ldr	r2, [r4, #8]
   24a5c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   24a5e:	6962      	ldr	r2, [r4, #20]
		msgq->read_ptr += msgq->msg_size;
   24a60:	61a3      	str	r3, [r4, #24]
		if (msgq->read_ptr == msgq->buffer_end) {
   24a62:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   24a64:	bf04      	itt	eq
   24a66:	6923      	ldreq	r3, [r4, #16]
   24a68:	61a3      	streq	r3, [r4, #24]
		}
		msgq->used_msgs--;
   24a6a:	6a23      	ldr	r3, [r4, #32]
   24a6c:	3b01      	subs	r3, #1
   24a6e:	6223      	str	r3, [r4, #32]

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   24a70:	4620      	mov	r0, r4
   24a72:	f009 fb32 	bl	2e0da <z_unpend_first_thread>
		if (pending_thread != NULL) {
   24a76:	4605      	mov	r5, r0
   24a78:	b360      	cbz	r0, 24ad4 <z_impl_k_msgq_get+0xa4>
   24a7a:	6941      	ldr	r1, [r0, #20]
   24a7c:	68a2      	ldr	r2, [r4, #8]
   24a7e:	69e0      	ldr	r0, [r4, #28]
   24a80:	f009 fd71 	bl	2e566 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   24a84:	69e3      	ldr	r3, [r4, #28]
   24a86:	68a2      	ldr	r2, [r4, #8]
   24a88:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   24a8a:	6962      	ldr	r2, [r4, #20]
			msgq->write_ptr += msgq->msg_size;
   24a8c:	61e3      	str	r3, [r4, #28]
			if (msgq->write_ptr == msgq->buffer_end) {
   24a8e:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   24a90:	bf04      	itt	eq
   24a92:	6923      	ldreq	r3, [r4, #16]
   24a94:	61e3      	streq	r3, [r4, #28]
			}
			msgq->used_msgs++;
   24a96:	6a23      	ldr	r3, [r4, #32]
   24a98:	3301      	adds	r3, #1
   24a9a:	6223      	str	r3, [r4, #32]
   24a9c:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   24a9e:	4628      	mov	r0, r5
   24aa0:	67ec      	str	r4, [r5, #124]	; 0x7c
   24aa2:	f009 faa9 	bl	2dff8 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   24aa6:	4638      	mov	r0, r7
   24aa8:	4631      	mov	r1, r6
   24aaa:	f000 fb5d 	bl	25168 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   24aae:	4620      	mov	r0, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   24ab0:	b003      	add	sp, #12
   24ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24ab4:	ea52 0103 	orrs.w	r1, r2, r3
   24ab8:	d00a      	beq.n	24ad0 <z_impl_k_msgq_get+0xa0>
		_current->base.swap_data = data;
   24aba:	4909      	ldr	r1, [pc, #36]	; (24ae0 <z_impl_k_msgq_get+0xb0>)
   24abc:	6889      	ldr	r1, [r1, #8]
   24abe:	6148      	str	r0, [r1, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   24ac0:	e9cd 2300 	strd	r2, r3, [sp]
   24ac4:	4631      	mov	r1, r6
   24ac6:	4622      	mov	r2, r4
   24ac8:	4638      	mov	r0, r7
   24aca:	f000 fc9f 	bl	2540c <z_pend_curr>
		return result;
   24ace:	e7ef      	b.n	24ab0 <z_impl_k_msgq_get+0x80>
		result = -ENOMSG;
   24ad0:	f06f 0022 	mvn.w	r0, #34	; 0x22
	__asm__ volatile(
   24ad4:	f386 8811 	msr	BASEPRI, r6
   24ad8:	f3bf 8f6f 	isb	sy
	return result;
   24adc:	e7e8      	b.n	24ab0 <z_impl_k_msgq_get+0x80>
   24ade:	bf00      	nop
   24ae0:	2000390c 	.word	0x2000390c

00024ae4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   24ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   24ae8:	4604      	mov	r4, r0
   24aea:	4617      	mov	r7, r2
   24aec:	461e      	mov	r6, r3
	__asm__ volatile(
   24aee:	f04f 0320 	mov.w	r3, #32
   24af2:	f3ef 8811 	mrs	r8, BASEPRI
   24af6:	f383 8812 	msr	BASEPRI_MAX, r3
   24afa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   24afe:	68c3      	ldr	r3, [r0, #12]
   24b00:	4a32      	ldr	r2, [pc, #200]	; (24bcc <z_impl_k_mutex_lock+0xe8>)
   24b02:	b16b      	cbz	r3, 24b20 <z_impl_k_mutex_lock+0x3c>
   24b04:	6880      	ldr	r0, [r0, #8]
   24b06:	6891      	ldr	r1, [r2, #8]
   24b08:	4288      	cmp	r0, r1
   24b0a:	d019      	beq.n	24b40 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   24b0c:	ea57 0306 	orrs.w	r3, r7, r6
   24b10:	d118      	bne.n	24b44 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   24b12:	f388 8811 	msr	BASEPRI, r8
   24b16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   24b1a:	f06f 000f 	mvn.w	r0, #15
   24b1e:	e00c      	b.n	24b3a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   24b20:	6891      	ldr	r1, [r2, #8]
   24b22:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   24b26:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   24b28:	3301      	adds	r3, #1
   24b2a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   24b2c:	6893      	ldr	r3, [r2, #8]
   24b2e:	60a3      	str	r3, [r4, #8]
   24b30:	f388 8811 	msr	BASEPRI, r8
   24b34:	f3bf 8f6f 	isb	sy
		return 0;
   24b38:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24b3a:	b002      	add	sp, #8
   24b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   24b40:	6921      	ldr	r1, [r4, #16]
   24b42:	e7f0      	b.n	24b26 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   24b44:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24b48:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   24b4c:	4299      	cmp	r1, r3
   24b4e:	bfa8      	it	ge
   24b50:	4619      	movge	r1, r3
   24b52:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   24b56:	4291      	cmp	r1, r2
   24b58:	bfb8      	it	lt
   24b5a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24b5c:	428b      	cmp	r3, r1
   24b5e:	dd2e      	ble.n	24bbe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   24b60:	f009 f821 	bl	2dba6 <adjust_owner_prio.isra.0>
   24b64:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   24b66:	e9cd 7600 	strd	r7, r6, [sp]
   24b6a:	4819      	ldr	r0, [pc, #100]	; (24bd0 <z_impl_k_mutex_lock+0xec>)
   24b6c:	4622      	mov	r2, r4
   24b6e:	4641      	mov	r1, r8
   24b70:	f000 fc4c 	bl	2540c <z_pend_curr>
	if (got_mutex == 0) {
   24b74:	2800      	cmp	r0, #0
   24b76:	d0e0      	beq.n	24b3a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   24b78:	f04f 0320 	mov.w	r3, #32
   24b7c:	f3ef 8611 	mrs	r6, BASEPRI
   24b80:	f383 8812 	msr	BASEPRI_MAX, r3
   24b84:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   24b88:	6823      	ldr	r3, [r4, #0]
   24b8a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   24b8c:	429c      	cmp	r4, r3
   24b8e:	d00a      	beq.n	24ba6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   24b90:	b14b      	cbz	r3, 24ba6 <z_impl_k_mutex_lock+0xc2>
   24b92:	f993 300e 	ldrsb.w	r3, [r3, #14]
   24b96:	4299      	cmp	r1, r3
   24b98:	bfa8      	it	ge
   24b9a:	4619      	movge	r1, r3
   24b9c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24ba0:	4299      	cmp	r1, r3
   24ba2:	bfb8      	it	lt
   24ba4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   24ba6:	68a0      	ldr	r0, [r4, #8]
   24ba8:	f008 fffd 	bl	2dba6 <adjust_owner_prio.isra.0>
   24bac:	b900      	cbnz	r0, 24bb0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   24bae:	b145      	cbz	r5, 24bc2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   24bb0:	4807      	ldr	r0, [pc, #28]	; (24bd0 <z_impl_k_mutex_lock+0xec>)
   24bb2:	4631      	mov	r1, r6
   24bb4:	f000 fad8 	bl	25168 <z_reschedule>
	return -EAGAIN;
   24bb8:	f06f 000a 	mvn.w	r0, #10
   24bbc:	e7bd      	b.n	24b3a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   24bbe:	2500      	movs	r5, #0
   24bc0:	e7d1      	b.n	24b66 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   24bc2:	f386 8811 	msr	BASEPRI, r6
   24bc6:	f3bf 8f6f 	isb	sy
   24bca:	e7f5      	b.n	24bb8 <z_impl_k_mutex_lock+0xd4>
   24bcc:	2000390c 	.word	0x2000390c
   24bd0:	20003f39 	.word	0x20003f39

00024bd4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   24bd4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   24bd6:	6883      	ldr	r3, [r0, #8]
{
   24bd8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   24bda:	2b00      	cmp	r3, #0
   24bdc:	d032      	beq.n	24c44 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   24bde:	4a1c      	ldr	r2, [pc, #112]	; (24c50 <z_impl_k_mutex_unlock+0x7c>)
   24be0:	6892      	ldr	r2, [r2, #8]
   24be2:	4293      	cmp	r3, r2
   24be4:	d131      	bne.n	24c4a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   24be6:	7bda      	ldrb	r2, [r3, #15]
   24be8:	3a01      	subs	r2, #1
   24bea:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24bec:	68c3      	ldr	r3, [r0, #12]
   24bee:	2b01      	cmp	r3, #1
   24bf0:	d905      	bls.n	24bfe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   24bf2:	3b01      	subs	r3, #1
   24bf4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   24bf6:	f000 fc97 	bl	25528 <k_sched_unlock>

	return 0;
   24bfa:	2000      	movs	r0, #0
}
   24bfc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   24bfe:	f04f 0320 	mov.w	r3, #32
   24c02:	f3ef 8511 	mrs	r5, BASEPRI
   24c06:	f383 8812 	msr	BASEPRI_MAX, r3
   24c0a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   24c0e:	6901      	ldr	r1, [r0, #16]
   24c10:	6880      	ldr	r0, [r0, #8]
   24c12:	f008 ffc8 	bl	2dba6 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   24c16:	4620      	mov	r0, r4
   24c18:	f009 fa5f 	bl	2e0da <z_unpend_first_thread>
	mutex->owner = new_owner;
   24c1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24c1e:	b158      	cbz	r0, 24c38 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   24c20:	f990 200e 	ldrsb.w	r2, [r0, #14]
   24c24:	6122      	str	r2, [r4, #16]
   24c26:	2200      	movs	r2, #0
   24c28:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   24c2a:	f009 f9e5 	bl	2dff8 <z_ready_thread>
		z_reschedule(&lock, key);
   24c2e:	4809      	ldr	r0, [pc, #36]	; (24c54 <z_impl_k_mutex_unlock+0x80>)
   24c30:	4629      	mov	r1, r5
   24c32:	f000 fa99 	bl	25168 <z_reschedule>
   24c36:	e7de      	b.n	24bf6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   24c38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   24c3a:	f385 8811 	msr	BASEPRI, r5
   24c3e:	f3bf 8f6f 	isb	sy
   24c42:	e7d8      	b.n	24bf6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   24c44:	f06f 0015 	mvn.w	r0, #21
   24c48:	e7d8      	b.n	24bfc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   24c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24c4e:	e7d5      	b.n	24bfc <z_impl_k_mutex_unlock+0x28>
   24c50:	2000390c 	.word	0x2000390c
   24c54:	20003f39 	.word	0x20003f39

00024c58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   24c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
   24c5a:	4611      	mov	r1, r2
	__asm__ volatile(
   24c5c:	f04f 0220 	mov.w	r2, #32
   24c60:	f3ef 8511 	mrs	r5, BASEPRI
   24c64:	f382 8812 	msr	BASEPRI_MAX, r2
   24c68:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   24c6c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   24c6e:	b19c      	cbz	r4, 24c98 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c70:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c72:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c74:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c78:	4294      	cmp	r4, r2
	list->head = node;
   24c7a:	6003      	str	r3, [r0, #0]
	list->tail = node;
   24c7c:	bf08      	it	eq
   24c7e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   24c80:	2101      	movs	r1, #1
   24c82:	4620      	mov	r0, r4
   24c84:	f009 f802 	bl	2dc8c <z_queue_node_peek>
   24c88:	4604      	mov	r4, r0
	__asm__ volatile(
   24c8a:	f385 8811 	msr	BASEPRI, r5
   24c8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   24c92:	4620      	mov	r0, r4
   24c94:	b003      	add	sp, #12
   24c96:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24c98:	ea51 0203 	orrs.w	r2, r1, r3
   24c9c:	d0f5      	beq.n	24c8a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24c9e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24ca2:	e9cd 1300 	strd	r1, r3, [sp]
   24ca6:	4610      	mov	r0, r2
   24ca8:	4629      	mov	r1, r5
   24caa:	f000 fbaf 	bl	2540c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   24cae:	2800      	cmp	r0, #0
   24cb0:	d1ef      	bne.n	24c92 <z_impl_k_queue_get+0x3a>
   24cb2:	4b02      	ldr	r3, [pc, #8]	; (24cbc <z_impl_k_queue_get+0x64>)
   24cb4:	689b      	ldr	r3, [r3, #8]
   24cb6:	695c      	ldr	r4, [r3, #20]
   24cb8:	e7eb      	b.n	24c92 <z_impl_k_queue_get+0x3a>
   24cba:	bf00      	nop
   24cbc:	2000390c 	.word	0x2000390c

00024cc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24cc0:	b538      	push	{r3, r4, r5, lr}
   24cc2:	4604      	mov	r4, r0
	__asm__ volatile(
   24cc4:	f04f 0320 	mov.w	r3, #32
   24cc8:	f3ef 8511 	mrs	r5, BASEPRI
   24ccc:	f383 8812 	msr	BASEPRI_MAX, r3
   24cd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24cd4:	f009 fa01 	bl	2e0da <z_unpend_first_thread>

	if (thread != NULL) {
   24cd8:	b148      	cbz	r0, 24cee <z_impl_k_sem_give+0x2e>
   24cda:	2200      	movs	r2, #0
   24cdc:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24cde:	f009 f98b 	bl	2dff8 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24ce2:	4629      	mov	r1, r5
   24ce4:	4808      	ldr	r0, [pc, #32]	; (24d08 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   24cea:	f000 ba3d 	b.w	25168 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24cee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24cf2:	429a      	cmp	r2, r3
   24cf4:	bf18      	it	ne
   24cf6:	3301      	addne	r3, #1
   24cf8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24cfa:	2102      	movs	r1, #2
   24cfc:	f104 0010 	add.w	r0, r4, #16
   24d00:	f009 fc0c 	bl	2e51c <z_handle_obj_poll_events>
}
   24d04:	e7ed      	b.n	24ce2 <z_impl_k_sem_give+0x22>
   24d06:	bf00      	nop
   24d08:	20003f39 	.word	0x20003f39

00024d0c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24d0c:	b513      	push	{r0, r1, r4, lr}
   24d0e:	f04f 0420 	mov.w	r4, #32
   24d12:	f3ef 8111 	mrs	r1, BASEPRI
   24d16:	f384 8812 	msr	BASEPRI_MAX, r4
   24d1a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24d1e:	6884      	ldr	r4, [r0, #8]
   24d20:	b144      	cbz	r4, 24d34 <z_impl_k_sem_take+0x28>
		sem->count--;
   24d22:	3c01      	subs	r4, #1
   24d24:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   24d26:	f381 8811 	msr	BASEPRI, r1
   24d2a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   24d2e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   24d30:	b002      	add	sp, #8
   24d32:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24d34:	ea52 0403 	orrs.w	r4, r2, r3
   24d38:	d106      	bne.n	24d48 <z_impl_k_sem_take+0x3c>
   24d3a:	f381 8811 	msr	BASEPRI, r1
   24d3e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24d42:	f06f 000f 	mvn.w	r0, #15
   24d46:	e7f3      	b.n	24d30 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24d48:	e9cd 2300 	strd	r2, r3, [sp]
   24d4c:	4602      	mov	r2, r0
   24d4e:	4802      	ldr	r0, [pc, #8]	; (24d58 <z_impl_k_sem_take+0x4c>)
   24d50:	f000 fb5c 	bl	2540c <z_pend_curr>
	return ret;
   24d54:	e7ec      	b.n	24d30 <z_impl_k_sem_take+0x24>
   24d56:	bf00      	nop
   24d58:	20003f39 	.word	0x20003f39

00024d5c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24d5e:	4b09      	ldr	r3, [pc, #36]	; (24d84 <k_sys_work_q_init+0x28>)
   24d60:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24d62:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   24d64:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   24d66:	9300      	str	r3, [sp, #0]
   24d68:	4907      	ldr	r1, [pc, #28]	; (24d88 <k_sys_work_q_init+0x2c>)
   24d6a:	4808      	ldr	r0, [pc, #32]	; (24d8c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24d6c:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   24d74:	f44f 6280 	mov.w	r2, #1024	; 0x400
   24d78:	f000 f914 	bl	24fa4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24d7c:	4620      	mov	r0, r4
   24d7e:	b004      	add	sp, #16
   24d80:	bd10      	pop	{r4, pc}
   24d82:	bf00      	nop
   24d84:	00033d62 	.word	0x00033d62
   24d88:	20007d60 	.word	0x20007d60
   24d8c:	200020e0 	.word	0x200020e0

00024d90 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   24d94:	4e47      	ldr	r6, [pc, #284]	; (24eb4 <work_queue_main+0x124>)
   24d96:	b085      	sub	sp, #20
   24d98:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   24d9a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24d9e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   24da2:	f04f 0320 	mov.w	r3, #32
   24da6:	f3ef 8711 	mrs	r7, BASEPRI
   24daa:	f383 8812 	msr	BASEPRI_MAX, r3
   24dae:	f3bf 8f6f 	isb	sy
   24db2:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   24db6:	b98d      	cbnz	r5, 24ddc <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   24db8:	2102      	movs	r1, #2
   24dba:	f104 0098 	add.w	r0, r4, #152	; 0x98
   24dbe:	f008 ffde 	bl	2dd7e <flag_test_and_clear>
   24dc2:	2800      	cmp	r0, #0
   24dc4:	d135      	bne.n	24e32 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24dc6:	2300      	movs	r3, #0
   24dc8:	e9cd 8900 	strd	r8, r9, [sp]
   24dcc:	9302      	str	r3, [sp, #8]
   24dce:	f104 0288 	add.w	r2, r4, #136	; 0x88
   24dd2:	4639      	mov	r1, r7
   24dd4:	4838      	ldr	r0, [pc, #224]	; (24eb8 <work_queue_main+0x128>)
   24dd6:	f000 fcd9 	bl	2578c <z_sched_wait>
			continue;
   24dda:	e7e2      	b.n	24da2 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24ddc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   24de0:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   24de2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24de6:	4295      	cmp	r5, r2
   24de8:	d101      	bne.n	24dee <work_queue_main+0x5e>
	list->tail = node;
   24dea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   24dee:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24df2:	f043 0302 	orr.w	r3, r3, #2
   24df6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   24dfa:	68eb      	ldr	r3, [r5, #12]
   24dfc:	f023 0304 	bic.w	r3, r3, #4
   24e00:	f043 0301 	orr.w	r3, r3, #1
   24e04:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   24e06:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   24e08:	f387 8811 	msr	BASEPRI, r7
   24e0c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
   24e10:	4628      	mov	r0, r5
   24e12:	4798      	blx	r3
	__asm__ volatile(
   24e14:	f04f 0320 	mov.w	r3, #32
   24e18:	f3ef 8b11 	mrs	fp, BASEPRI
   24e1c:	f383 8812 	msr	BASEPRI_MAX, r3
   24e20:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   24e24:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24e26:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24e28:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24e2c:	d40b      	bmi.n	24e46 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   24e2e:	60ea      	str	r2, [r5, #12]
   24e30:	e00e      	b.n	24e50 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   24e32:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   24e36:	2200      	movs	r2, #0
   24e38:	2101      	movs	r1, #1
   24e3a:	4628      	mov	r0, r5
   24e3c:	f009 f975 	bl	2e12a <z_sched_wake>
   24e40:	2800      	cmp	r0, #0
   24e42:	d1f8      	bne.n	24e36 <work_queue_main+0xa6>
   24e44:	e7bf      	b.n	24dc6 <work_queue_main+0x36>
	return list->head;
   24e46:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   24e48:	f023 0303 	bic.w	r3, r3, #3
   24e4c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24e4e:	b970      	cbnz	r0, 24e6e <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   24e50:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   24e54:	f023 0302 	bic.w	r3, r3, #2
   24e58:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   24e5c:	f38b 8811 	msr	BASEPRI, fp
   24e60:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   24e64:	05d8      	lsls	r0, r3, #23
   24e66:	d49c      	bmi.n	24da2 <work_queue_main+0x12>
	z_impl_k_yield();
   24e68:	f000 fb86 	bl	25578 <z_impl_k_yield>
}
   24e6c:	e799      	b.n	24da2 <work_queue_main+0x12>
	return node->next;
   24e6e:	2700      	movs	r7, #0
   24e70:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   24e74:	463b      	mov	r3, r7
		if (wc->work == work) {
   24e76:	6842      	ldr	r2, [r0, #4]
   24e78:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   24e7a:	4601      	mov	r1, r0
		if (wc->work == work) {
   24e7c:	d10c      	bne.n	24e98 <work_queue_main+0x108>
	return node->next;
   24e7e:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e80:	b997      	cbnz	r7, 24ea8 <work_queue_main+0x118>
   24e82:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   24e84:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   24e86:	4282      	cmp	r2, r0
   24e88:	d100      	bne.n	24e8c <work_queue_main+0xfc>
	list->tail = node;
   24e8a:	6071      	str	r1, [r6, #4]
	parent->next = child;
   24e8c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   24e90:	f7ff ff16 	bl	24cc0 <z_impl_k_sem_give>
}
   24e94:	4639      	mov	r1, r7
   24e96:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24e98:	f1ba 0f00 	cmp.w	sl, #0
   24e9c:	d0d8      	beq.n	24e50 <work_queue_main+0xc0>
	return node->next;
   24e9e:	4650      	mov	r0, sl
   24ea0:	460f      	mov	r7, r1
   24ea2:	f8da a000 	ldr.w	sl, [sl]
   24ea6:	e7e6      	b.n	24e76 <work_queue_main+0xe6>
	return list->tail;
   24ea8:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   24eaa:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   24eac:	4290      	cmp	r0, r2
	list->tail = node;
   24eae:	bf08      	it	eq
   24eb0:	6077      	streq	r7, [r6, #4]
}
   24eb2:	e7eb      	b.n	24e8c <work_queue_main+0xfc>
   24eb4:	20003934 	.word	0x20003934
   24eb8:	20003f39 	.word	0x20003f39

00024ebc <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   24ebc:	68c3      	ldr	r3, [r0, #12]
{
   24ebe:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   24ec0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   24ec4:	079b      	lsls	r3, r3, #30
{
   24ec6:	4605      	mov	r5, r0
   24ec8:	460c      	mov	r4, r1
	if (ret) {
   24eca:	d50d      	bpl.n	24ee8 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   24ecc:	2201      	movs	r2, #1
   24ece:	2100      	movs	r1, #0
   24ed0:	f104 0008 	add.w	r0, r4, #8
   24ed4:	f008 ff43 	bl	2dd5e <z_impl_k_sem_init>
	parent->next = child;
   24ed8:	2300      	movs	r3, #0
   24eda:	6023      	str	r3, [r4, #0]
	return list->tail;
   24edc:	4b05      	ldr	r3, [pc, #20]	; (24ef4 <cancel_sync_locked+0x38>)
	canceler->work = work;
   24ede:	6065      	str	r5, [r4, #4]
   24ee0:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   24ee2:	b91a      	cbnz	r2, 24eec <cancel_sync_locked+0x30>
	list->head = node;
   24ee4:	e9c3 4400 	strd	r4, r4, [r3]
}
   24ee8:	4630      	mov	r0, r6
   24eea:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   24eec:	6014      	str	r4, [r2, #0]
	list->tail = node;
   24eee:	605c      	str	r4, [r3, #4]
}
   24ef0:	e7fa      	b.n	24ee8 <cancel_sync_locked+0x2c>
   24ef2:	bf00      	nop
   24ef4:	20003934 	.word	0x20003934

00024ef8 <submit_to_queue_locked>:
{
   24ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   24efa:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24efc:	079a      	lsls	r2, r3, #30
{
   24efe:	4604      	mov	r4, r0
   24f00:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24f02:	f3c3 0540 	ubfx	r5, r3, #1, #1
   24f06:	d41f      	bmi.n	24f48 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   24f08:	075f      	lsls	r7, r3, #29
   24f0a:	d41f      	bmi.n	24f4c <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   24f0c:	680a      	ldr	r2, [r1, #0]
   24f0e:	b90a      	cbnz	r2, 24f14 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   24f10:	6882      	ldr	r2, [r0, #8]
   24f12:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   24f14:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   24f16:	bf44      	itt	mi
   24f18:	68a3      	ldrmi	r3, [r4, #8]
   24f1a:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   24f1c:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   24f1e:	bf4c      	ite	mi
   24f20:	2502      	movmi	r5, #2
		ret = 1;
   24f22:	2501      	movpl	r5, #1
	if (queue == NULL) {
   24f24:	b37f      	cbz	r7, 24f86 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24f26:	4b1b      	ldr	r3, [pc, #108]	; (24f94 <submit_to_queue_locked+0x9c>)
   24f28:	689b      	ldr	r3, [r3, #8]
   24f2a:	42bb      	cmp	r3, r7
   24f2c:	d111      	bne.n	24f52 <submit_to_queue_locked+0x5a>
   24f2e:	f008 fe06 	bl	2db3e <k_is_in_isr>
   24f32:	f080 0001 	eor.w	r0, r0, #1
   24f36:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   24f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24f3c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   24f3e:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   24f42:	d523      	bpl.n	24f8c <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   24f44:	b13a      	cbz	r2, 24f56 <submit_to_queue_locked+0x5e>
   24f46:	b940      	cbnz	r0, 24f5a <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   24f48:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   24f4c:	2300      	movs	r3, #0
   24f4e:	6033      	str	r3, [r6, #0]
	return ret;
   24f50:	e013      	b.n	24f7a <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   24f52:	2000      	movs	r0, #0
   24f54:	e7f0      	b.n	24f38 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   24f56:	071b      	lsls	r3, r3, #28
   24f58:	d4f6      	bmi.n	24f48 <submit_to_queue_locked+0x50>
	parent->next = child;
   24f5a:	2300      	movs	r3, #0
   24f5c:	6023      	str	r3, [r4, #0]
	return list->tail;
   24f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   24f62:	b963      	cbnz	r3, 24f7e <submit_to_queue_locked+0x86>
	list->head = node;
   24f64:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   24f68:	4638      	mov	r0, r7
   24f6a:	f008 ff21 	bl	2ddb0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   24f6e:	68e3      	ldr	r3, [r4, #12]
   24f70:	f043 0304 	orr.w	r3, r3, #4
   24f74:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   24f76:	6833      	ldr	r3, [r6, #0]
   24f78:	60a3      	str	r3, [r4, #8]
}
   24f7a:	4628      	mov	r0, r5
   24f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   24f7e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   24f80:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   24f84:	e7f0      	b.n	24f68 <submit_to_queue_locked+0x70>
		return -EINVAL;
   24f86:	f06f 0515 	mvn.w	r5, #21
   24f8a:	e7df      	b.n	24f4c <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   24f8c:	f06f 0512 	mvn.w	r5, #18
   24f90:	e7dc      	b.n	24f4c <submit_to_queue_locked+0x54>
   24f92:	bf00      	nop
   24f94:	2000390c 	.word	0x2000390c

00024f98 <k_work_submit>:
{
   24f98:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   24f9a:	4801      	ldr	r0, [pc, #4]	; (24fa0 <k_work_submit+0x8>)
   24f9c:	f008 bf68 	b.w	2de70 <k_work_submit_to_queue>
   24fa0:	200020e0 	.word	0x200020e0

00024fa4 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   24fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
   24fa6:	b089      	sub	sp, #36	; 0x24
   24fa8:	4604      	mov	r4, r0
	list->head = NULL;
   24faa:	2000      	movs	r0, #0
	list->tail = NULL;
   24fac:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   24fb0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   24fb2:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   24fb6:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   24fba:	f104 0090 	add.w	r0, r4, #144	; 0x90
   24fbe:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   24fc2:	b31d      	cbz	r5, 2500c <k_work_queue_start+0x68>
   24fc4:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   24fc6:	2800      	cmp	r0, #0
   24fc8:	f240 1001 	movw	r0, #257	; 0x101
   24fcc:	bf08      	it	eq
   24fce:	2001      	moveq	r0, #1
	*flagp = flags;
   24fd0:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   24fd4:	2000      	movs	r0, #0
   24fd6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   24fda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   24fde:	e9cd 3003 	strd	r3, r0, [sp, #12]
   24fe2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   24fe6:	e9cd 6706 	strd	r6, r7, [sp, #24]
   24fea:	4b09      	ldr	r3, [pc, #36]	; (25010 <k_work_queue_start+0x6c>)
   24fec:	9400      	str	r4, [sp, #0]
   24fee:	4620      	mov	r0, r4
   24ff0:	f7ff fc24 	bl	2483c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   24ff4:	b125      	cbz	r5, 25000 <k_work_queue_start+0x5c>
   24ff6:	6829      	ldr	r1, [r5, #0]
   24ff8:	b111      	cbz	r1, 25000 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   24ffa:	4620      	mov	r0, r4
   24ffc:	f008 fda5 	bl	2db4a <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   25000:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   25002:	b009      	add	sp, #36	; 0x24
   25004:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   25008:	f008 bda4 	b.w	2db54 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2500c:	2001      	movs	r0, #1
   2500e:	e7df      	b.n	24fd0 <k_work_queue_start+0x2c>
   25010:	00024d91 	.word	0x00024d91

00025014 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   25014:	b513      	push	{r0, r1, r4, lr}
   25016:	9001      	str	r0, [sp, #4]
   25018:	4608      	mov	r0, r1
	__asm__ volatile(
   2501a:	f04f 0120 	mov.w	r1, #32
   2501e:	f3ef 8411 	mrs	r4, BASEPRI
   25022:	f381 8812 	msr	BASEPRI_MAX, r1
   25026:	f3bf 8f6f 	isb	sy
	return *flagp;
   2502a:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   2502c:	f011 0f0e 	tst.w	r1, #14
   25030:	d116      	bne.n	25060 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25032:	ea53 0c02 	orrs.w	ip, r3, r2
   25036:	d108      	bne.n	2504a <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   25038:	a901      	add	r1, sp, #4
   2503a:	f7ff ff5d 	bl	24ef8 <submit_to_queue_locked>
	__asm__ volatile(
   2503e:	f384 8811 	msr	BASEPRI, r4
   25042:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25046:	b002      	add	sp, #8
   25048:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   2504a:	f041 0108 	orr.w	r1, r1, #8
   2504e:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   25050:	9901      	ldr	r1, [sp, #4]
   25052:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25054:	3010      	adds	r0, #16
   25056:	4903      	ldr	r1, [pc, #12]	; (25064 <k_work_schedule_for_queue+0x50>)
   25058:	f000 fc0e 	bl	25878 <z_add_timeout>
	return ret;
   2505c:	2001      	movs	r0, #1
   2505e:	e7ee      	b.n	2503e <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   25060:	2000      	movs	r0, #0
   25062:	e7ec      	b.n	2503e <k_work_schedule_for_queue+0x2a>
   25064:	0002de21 	.word	0x0002de21

00025068 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   25068:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   2506a:	4801      	ldr	r0, [pc, #4]	; (25070 <k_work_schedule+0x8>)
   2506c:	f7ff bfd2 	b.w	25014 <k_work_schedule_for_queue>
   25070:	200020e0 	.word	0x200020e0

00025074 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   25074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25076:	460c      	mov	r4, r1
   25078:	9001      	str	r0, [sp, #4]
   2507a:	4616      	mov	r6, r2
   2507c:	461d      	mov	r5, r3
	__asm__ volatile(
   2507e:	f04f 0320 	mov.w	r3, #32
   25082:	f3ef 8711 	mrs	r7, BASEPRI
   25086:	f383 8812 	msr	BASEPRI_MAX, r3
   2508a:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2508e:	4608      	mov	r0, r1
   25090:	f008 fe80 	bl	2dd94 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25094:	ea55 0306 	orrs.w	r3, r5, r6
   25098:	d109      	bne.n	250ae <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   2509a:	a901      	add	r1, sp, #4
   2509c:	4620      	mov	r0, r4
   2509e:	f7ff ff2b 	bl	24ef8 <submit_to_queue_locked>
	__asm__ volatile(
   250a2:	f387 8811 	msr	BASEPRI, r7
   250a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   250aa:	b003      	add	sp, #12
   250ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   250ae:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   250b0:	4906      	ldr	r1, [pc, #24]	; (250cc <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   250b2:	f043 0308 	orr.w	r3, r3, #8
   250b6:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   250b8:	9b01      	ldr	r3, [sp, #4]
   250ba:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   250bc:	f104 0010 	add.w	r0, r4, #16
   250c0:	4632      	mov	r2, r6
   250c2:	462b      	mov	r3, r5
   250c4:	f000 fbd8 	bl	25878 <z_add_timeout>
	return ret;
   250c8:	2001      	movs	r0, #1
   250ca:	e7ea      	b.n	250a2 <k_work_reschedule_for_queue+0x2e>
   250cc:	0002de21 	.word	0x0002de21

000250d0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   250d0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   250d2:	4801      	ldr	r0, [pc, #4]	; (250d8 <k_work_reschedule+0x8>)
   250d4:	f7ff bfce 	b.w	25074 <k_work_reschedule_for_queue>
   250d8:	200020e0 	.word	0x200020e0

000250dc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   250dc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   250de:	4c08      	ldr	r4, [pc, #32]	; (25100 <z_reset_time_slice+0x24>)
   250e0:	6823      	ldr	r3, [r4, #0]
   250e2:	b15b      	cbz	r3, 250fc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   250e4:	f7fd ff00 	bl	22ee8 <sys_clock_elapsed>
   250e8:	4603      	mov	r3, r0
   250ea:	6820      	ldr	r0, [r4, #0]
   250ec:	4a05      	ldr	r2, [pc, #20]	; (25104 <z_reset_time_slice+0x28>)
   250ee:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   250f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   250f4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   250f6:	2100      	movs	r1, #0
   250f8:	f009 b85a 	b.w	2e1b0 <z_set_timeout_expiry>
}
   250fc:	bd10      	pop	{r4, pc}
   250fe:	bf00      	nop
   25100:	20003944 	.word	0x20003944
   25104:	2000390c 	.word	0x2000390c

00025108 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   25108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2510a:	4604      	mov	r4, r0
   2510c:	460d      	mov	r5, r1
	__asm__ volatile(
   2510e:	f04f 0320 	mov.w	r3, #32
   25112:	f3ef 8611 	mrs	r6, BASEPRI
   25116:	f383 8812 	msr	BASEPRI_MAX, r3
   2511a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2511e:	4b0f      	ldr	r3, [pc, #60]	; (2515c <k_sched_time_slice_set+0x54>)
   25120:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   25122:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   25126:	f240 30e7 	movw	r0, #999	; 0x3e7
   2512a:	6119      	str	r1, [r3, #16]
   2512c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25130:	2300      	movs	r3, #0
   25132:	fbe4 0107 	umlal	r0, r1, r4, r7
   25136:	f7db fd6f 	bl	c18 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2513a:	2c00      	cmp	r4, #0
   2513c:	4b08      	ldr	r3, [pc, #32]	; (25160 <k_sched_time_slice_set+0x58>)
   2513e:	dc09      	bgt.n	25154 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   25140:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   25142:	4b08      	ldr	r3, [pc, #32]	; (25164 <k_sched_time_slice_set+0x5c>)
   25144:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   25146:	f7ff ffc9 	bl	250dc <z_reset_time_slice>
	__asm__ volatile(
   2514a:	f386 8811 	msr	BASEPRI, r6
   2514e:	f3bf 8f6f 	isb	sy
	}
}
   25152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   25154:	2802      	cmp	r0, #2
   25156:	bfb8      	it	lt
   25158:	2002      	movlt	r0, #2
   2515a:	e7f1      	b.n	25140 <k_sched_time_slice_set+0x38>
   2515c:	2000390c 	.word	0x2000390c
   25160:	20003944 	.word	0x20003944
   25164:	20003940 	.word	0x20003940

00025168 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25168:	b949      	cbnz	r1, 2517e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2516a:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   2516e:	b930      	cbnz	r0, 2517e <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   25170:	4b05      	ldr	r3, [pc, #20]	; (25188 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   25172:	69da      	ldr	r2, [r3, #28]
   25174:	689b      	ldr	r3, [r3, #8]
   25176:	429a      	cmp	r2, r3
   25178:	d001      	beq.n	2517e <z_reschedule+0x16>
	ret = arch_swap(key);
   2517a:	f7e2 baed 	b.w	7758 <arch_swap>
   2517e:	f381 8811 	msr	BASEPRI, r1
   25182:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   25186:	4770      	bx	lr
   25188:	2000390c 	.word	0x2000390c

0002518c <k_sched_lock>:
	__asm__ volatile(
   2518c:	f04f 0320 	mov.w	r3, #32
   25190:	f3ef 8111 	mrs	r1, BASEPRI
   25194:	f383 8812 	msr	BASEPRI_MAX, r3
   25198:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   2519c:	4b04      	ldr	r3, [pc, #16]	; (251b0 <k_sched_lock+0x24>)
   2519e:	689a      	ldr	r2, [r3, #8]
   251a0:	7bd3      	ldrb	r3, [r2, #15]
   251a2:	3b01      	subs	r3, #1
   251a4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   251a6:	f381 8811 	msr	BASEPRI, r1
   251aa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   251ae:	4770      	bx	lr
   251b0:	2000390c 	.word	0x2000390c

000251b4 <update_cache>:
{
   251b4:	b538      	push	{r3, r4, r5, lr}
   251b6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   251b8:	480c      	ldr	r0, [pc, #48]	; (251ec <update_cache+0x38>)
   251ba:	4d0d      	ldr	r5, [pc, #52]	; (251f0 <update_cache+0x3c>)
   251bc:	f008 ff16 	bl	2dfec <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   251c0:	4604      	mov	r4, r0
   251c2:	b900      	cbnz	r0, 251c6 <update_cache+0x12>
   251c4:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   251c6:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   251c8:	b94a      	cbnz	r2, 251de <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   251ca:	7b5a      	ldrb	r2, [r3, #13]
   251cc:	06d2      	lsls	r2, r2, #27
   251ce:	d106      	bne.n	251de <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   251d0:	69a2      	ldr	r2, [r4, #24]
   251d2:	b922      	cbnz	r2, 251de <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   251d4:	89da      	ldrh	r2, [r3, #14]
   251d6:	2a7f      	cmp	r2, #127	; 0x7f
   251d8:	d901      	bls.n	251de <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   251da:	61eb      	str	r3, [r5, #28]
}
   251dc:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   251de:	429c      	cmp	r4, r3
   251e0:	d001      	beq.n	251e6 <update_cache+0x32>
			z_reset_time_slice();
   251e2:	f7ff ff7b 	bl	250dc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   251e6:	61ec      	str	r4, [r5, #28]
}
   251e8:	e7f8      	b.n	251dc <update_cache+0x28>
   251ea:	bf00      	nop
   251ec:	2000392c 	.word	0x2000392c
   251f0:	2000390c 	.word	0x2000390c

000251f4 <move_thread_to_end_of_prio_q>:
{
   251f4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   251f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   251fa:	7b43      	ldrb	r3, [r0, #13]
   251fc:	2a00      	cmp	r2, #0
{
   251fe:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   25200:	da04      	bge.n	2520c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25206:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   25208:	f008 fe9b 	bl	2df42 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2520c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   2520e:	4a15      	ldr	r2, [pc, #84]	; (25264 <move_thread_to_end_of_prio_q+0x70>)
   25210:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25214:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   25216:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2521a:	f102 0520 	add.w	r5, r2, #32
   2521e:	42ab      	cmp	r3, r5
   25220:	d01b      	beq.n	2525a <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25222:	b1d3      	cbz	r3, 2525a <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   25224:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   25228:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   2522c:	4286      	cmp	r6, r0
   2522e:	d00f      	beq.n	25250 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   25230:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25232:	2800      	cmp	r0, #0
   25234:	dd0c      	ble.n	25250 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   25236:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   25238:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   2523c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   2523e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   25240:	6890      	ldr	r0, [r2, #8]
   25242:	1a43      	subs	r3, r0, r1
   25244:	4258      	negs	r0, r3
}
   25246:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2524a:	4158      	adcs	r0, r3
   2524c:	f7ff bfb2 	b.w	251b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25250:	42a3      	cmp	r3, r4
   25252:	d002      	beq.n	2525a <move_thread_to_end_of_prio_q+0x66>
   25254:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25256:	2b00      	cmp	r3, #0
   25258:	d1e6      	bne.n	25228 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   2525a:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   2525e:	6021      	str	r1, [r4, #0]
	list->tail = node;
   25260:	6251      	str	r1, [r2, #36]	; 0x24
}
   25262:	e7ed      	b.n	25240 <move_thread_to_end_of_prio_q+0x4c>
   25264:	2000390c 	.word	0x2000390c

00025268 <z_time_slice>:
{
   25268:	b538      	push	{r3, r4, r5, lr}
   2526a:	4601      	mov	r1, r0
	__asm__ volatile(
   2526c:	f04f 0320 	mov.w	r3, #32
   25270:	f3ef 8411 	mrs	r4, BASEPRI
   25274:	f383 8812 	msr	BASEPRI_MAX, r3
   25278:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   2527c:	4b15      	ldr	r3, [pc, #84]	; (252d4 <z_time_slice+0x6c>)
   2527e:	4a16      	ldr	r2, [pc, #88]	; (252d8 <z_time_slice+0x70>)
   25280:	6898      	ldr	r0, [r3, #8]
   25282:	6815      	ldr	r5, [r2, #0]
   25284:	42a8      	cmp	r0, r5
   25286:	d106      	bne.n	25296 <z_time_slice+0x2e>
			z_reset_time_slice();
   25288:	f7ff ff28 	bl	250dc <z_reset_time_slice>
	__asm__ volatile(
   2528c:	f384 8811 	msr	BASEPRI, r4
   25290:	f3bf 8f6f 	isb	sy
}
   25294:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   25296:	2500      	movs	r5, #0
   25298:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2529a:	4a10      	ldr	r2, [pc, #64]	; (252dc <z_time_slice+0x74>)
   2529c:	6812      	ldr	r2, [r2, #0]
   2529e:	b1ba      	cbz	r2, 252d0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   252a0:	89c2      	ldrh	r2, [r0, #14]
   252a2:	2a7f      	cmp	r2, #127	; 0x7f
   252a4:	d814      	bhi.n	252d0 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   252a6:	7b42      	ldrb	r2, [r0, #13]
   252a8:	06d2      	lsls	r2, r2, #27
   252aa:	d111      	bne.n	252d0 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   252ac:	4a0c      	ldr	r2, [pc, #48]	; (252e0 <z_time_slice+0x78>)
   252ae:	f990 500e 	ldrsb.w	r5, [r0, #14]
   252b2:	6812      	ldr	r2, [r2, #0]
   252b4:	4295      	cmp	r5, r2
   252b6:	db0b      	blt.n	252d0 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   252b8:	4a0a      	ldr	r2, [pc, #40]	; (252e4 <z_time_slice+0x7c>)
   252ba:	4290      	cmp	r0, r2
   252bc:	d008      	beq.n	252d0 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   252be:	691a      	ldr	r2, [r3, #16]
   252c0:	428a      	cmp	r2, r1
   252c2:	dc02      	bgt.n	252ca <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   252c4:	f7ff ff96 	bl	251f4 <move_thread_to_end_of_prio_q>
   252c8:	e7de      	b.n	25288 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   252ca:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   252cc:	611a      	str	r2, [r3, #16]
   252ce:	e7dd      	b.n	2528c <z_time_slice+0x24>
   252d0:	2200      	movs	r2, #0
   252d2:	e7fb      	b.n	252cc <z_time_slice+0x64>
   252d4:	2000390c 	.word	0x2000390c
   252d8:	2000393c 	.word	0x2000393c
   252dc:	20003944 	.word	0x20003944
   252e0:	20003940 	.word	0x20003940
   252e4:	20001fe0 	.word	0x20001fe0

000252e8 <ready_thread>:
{
   252e8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   252ea:	f990 200d 	ldrsb.w	r2, [r0, #13]
   252ee:	7b43      	ldrb	r3, [r0, #13]
   252f0:	2a00      	cmp	r2, #0
   252f2:	db2a      	blt.n	2534a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   252f4:	06da      	lsls	r2, r3, #27
   252f6:	d128      	bne.n	2534a <ready_thread+0x62>
   252f8:	6982      	ldr	r2, [r0, #24]
   252fa:	bb32      	cbnz	r2, 2534a <ready_thread+0x62>
	return list->head == list;
   252fc:	4a14      	ldr	r2, [pc, #80]	; (25350 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   252fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25302:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   25304:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25308:	f102 0520 	add.w	r5, r2, #32
   2530c:	42ab      	cmp	r3, r5
   2530e:	d017      	beq.n	25340 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25310:	b1b3      	cbz	r3, 25340 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   25312:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   25316:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   2531a:	428e      	cmp	r6, r1
   2531c:	d00b      	beq.n	25336 <ready_thread+0x4e>
		return b2 - b1;
   2531e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25320:	2900      	cmp	r1, #0
   25322:	dd08      	ble.n	25336 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   25324:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25326:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   2532a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   2532c:	6058      	str	r0, [r3, #4]
}
   2532e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   25330:	2000      	movs	r0, #0
   25332:	f7ff bf3f 	b.w	251b4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25336:	42a3      	cmp	r3, r4
   25338:	d002      	beq.n	25340 <ready_thread+0x58>
   2533a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2533c:	2b00      	cmp	r3, #0
   2533e:	d1ea      	bne.n	25316 <ready_thread+0x2e>
	node->prev = tail;
   25340:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   25344:	6020      	str	r0, [r4, #0]
	list->tail = node;
   25346:	6250      	str	r0, [r2, #36]	; 0x24
}
   25348:	e7f1      	b.n	2532e <ready_thread+0x46>
}
   2534a:	bc70      	pop	{r4, r5, r6}
   2534c:	4770      	bx	lr
   2534e:	bf00      	nop
   25350:	2000390c 	.word	0x2000390c

00025354 <z_sched_start>:
{
   25354:	b510      	push	{r4, lr}
	__asm__ volatile(
   25356:	f04f 0220 	mov.w	r2, #32
   2535a:	f3ef 8411 	mrs	r4, BASEPRI
   2535e:	f382 8812 	msr	BASEPRI_MAX, r2
   25362:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   25366:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   25368:	0751      	lsls	r1, r2, #29
   2536a:	d404      	bmi.n	25376 <z_sched_start+0x22>
	__asm__ volatile(
   2536c:	f384 8811 	msr	BASEPRI, r4
   25370:	f3bf 8f6f 	isb	sy
}
   25374:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   25376:	f022 0204 	bic.w	r2, r2, #4
   2537a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   2537c:	f7ff ffb4 	bl	252e8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   25380:	4621      	mov	r1, r4
   25382:	4802      	ldr	r0, [pc, #8]	; (2538c <z_sched_start+0x38>)
}
   25384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   25388:	f7ff beee 	b.w	25168 <z_reschedule>
   2538c:	20003f39 	.word	0x20003f39

00025390 <unready_thread>:
{
   25390:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   25392:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   25396:	7b43      	ldrb	r3, [r0, #13]
   25398:	2a00      	cmp	r2, #0
{
   2539a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2539c:	da04      	bge.n	253a8 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2539e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   253a2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   253a4:	f008 fdcd 	bl	2df42 <sys_dlist_remove>
	update_cache(thread == _current);
   253a8:	4b04      	ldr	r3, [pc, #16]	; (253bc <unready_thread+0x2c>)
   253aa:	6898      	ldr	r0, [r3, #8]
   253ac:	1a43      	subs	r3, r0, r1
   253ae:	4258      	negs	r0, r3
   253b0:	4158      	adcs	r0, r3
}
   253b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   253b6:	f7ff befd 	b.w	251b4 <update_cache>
   253ba:	bf00      	nop
   253bc:	2000390c 	.word	0x2000390c

000253c0 <pend>:
{
   253c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253c4:	4606      	mov	r6, r0
   253c6:	4615      	mov	r5, r2
   253c8:	461c      	mov	r4, r3
	__asm__ volatile(
   253ca:	f04f 0320 	mov.w	r3, #32
   253ce:	f3ef 8711 	mrs	r7, BASEPRI
   253d2:	f383 8812 	msr	BASEPRI_MAX, r3
   253d6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   253da:	f008 fe3f 	bl	2e05c <add_to_waitq_locked>
	__asm__ volatile(
   253de:	f387 8811 	msr	BASEPRI, r7
   253e2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   253e6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   253ea:	bf08      	it	eq
   253ec:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   253f0:	d008      	beq.n	25404 <pend+0x44>
   253f2:	462a      	mov	r2, r5
   253f4:	4623      	mov	r3, r4
   253f6:	f106 0018 	add.w	r0, r6, #24
   253fa:	4903      	ldr	r1, [pc, #12]	; (25408 <pend+0x48>)
}
   253fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25400:	f000 ba3a 	b.w	25878 <z_add_timeout>
   25404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25408:	0002e019 	.word	0x0002e019

0002540c <z_pend_curr>:
{
   2540c:	b510      	push	{r4, lr}
	pending_current = _current;
   2540e:	4b07      	ldr	r3, [pc, #28]	; (2542c <z_pend_curr+0x20>)
   25410:	6898      	ldr	r0, [r3, #8]
   25412:	4b07      	ldr	r3, [pc, #28]	; (25430 <z_pend_curr+0x24>)
{
   25414:	460c      	mov	r4, r1
	pending_current = _current;
   25416:	6018      	str	r0, [r3, #0]
{
   25418:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2541a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   2541e:	f7ff ffcf 	bl	253c0 <pend>
   25422:	4620      	mov	r0, r4
}
   25424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   25428:	f7e2 b996 	b.w	7758 <arch_swap>
   2542c:	2000390c 	.word	0x2000390c
   25430:	2000393c 	.word	0x2000393c

00025434 <z_set_prio>:
{
   25434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25436:	4604      	mov	r4, r0
	__asm__ volatile(
   25438:	f04f 0320 	mov.w	r3, #32
   2543c:	f3ef 8611 	mrs	r6, BASEPRI
   25440:	f383 8812 	msr	BASEPRI_MAX, r3
   25444:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   25448:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2544a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   2544c:	b249      	sxtb	r1, r1
   2544e:	d133      	bne.n	254b8 <z_set_prio+0x84>
		if (need_sched) {
   25450:	6982      	ldr	r2, [r0, #24]
   25452:	bb8a      	cbnz	r2, 254b8 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25458:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2545a:	f008 fd72 	bl	2df42 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   2545e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   25460:	4a17      	ldr	r2, [pc, #92]	; (254c0 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   25462:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   25464:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25468:	7343      	strb	r3, [r0, #13]
   2546a:	4610      	mov	r0, r2
   2546c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25470:	4283      	cmp	r3, r0
   25472:	d01b      	beq.n	254ac <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25474:	b1d3      	cbz	r3, 254ac <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   25476:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
   25478:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   2547c:	42a9      	cmp	r1, r5
   2547e:	d010      	beq.n	254a2 <z_set_prio+0x6e>
		return b2 - b1;
   25480:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   25482:	2d00      	cmp	r5, #0
   25484:	dd0d      	ble.n	254a2 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   25486:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25488:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2548c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2548e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   25490:	2001      	movs	r0, #1
   25492:	f7ff fe8f 	bl	251b4 <update_cache>
   25496:	2001      	movs	r0, #1
	__asm__ volatile(
   25498:	f386 8811 	msr	BASEPRI, r6
   2549c:	f3bf 8f6f 	isb	sy
}
   254a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   254a2:	42bb      	cmp	r3, r7
   254a4:	d002      	beq.n	254ac <z_set_prio+0x78>
   254a6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   254a8:	2b00      	cmp	r3, #0
   254aa:	d1e5      	bne.n	25478 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   254ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
   254ae:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   254b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   254b4:	6254      	str	r4, [r2, #36]	; 0x24
}
   254b6:	e7eb      	b.n	25490 <z_set_prio+0x5c>
			thread->base.prio = prio;
   254b8:	73a1      	strb	r1, [r4, #14]
   254ba:	2000      	movs	r0, #0
   254bc:	e7ec      	b.n	25498 <z_set_prio+0x64>
   254be:	bf00      	nop
   254c0:	2000390c 	.word	0x2000390c

000254c4 <z_impl_k_thread_suspend>:
{
   254c4:	b570      	push	{r4, r5, r6, lr}
   254c6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   254c8:	3018      	adds	r0, #24
   254ca:	f008 fe4b 	bl	2e164 <z_abort_timeout>
	__asm__ volatile(
   254ce:	f04f 0320 	mov.w	r3, #32
   254d2:	f3ef 8611 	mrs	r6, BASEPRI
   254d6:	f383 8812 	msr	BASEPRI_MAX, r3
   254da:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   254de:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
   254e2:	7b63      	ldrb	r3, [r4, #13]
   254e4:	2a00      	cmp	r2, #0
   254e6:	da05      	bge.n	254f4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   254e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   254ec:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   254ee:	4620      	mov	r0, r4
   254f0:	f008 fd27 	bl	2df42 <sys_dlist_remove>
		update_cache(thread == _current);
   254f4:	4d0b      	ldr	r5, [pc, #44]	; (25524 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   254f6:	7b63      	ldrb	r3, [r4, #13]
   254f8:	68a8      	ldr	r0, [r5, #8]
   254fa:	f043 0310 	orr.w	r3, r3, #16
   254fe:	7363      	strb	r3, [r4, #13]
   25500:	1b03      	subs	r3, r0, r4
   25502:	4258      	negs	r0, r3
   25504:	4158      	adcs	r0, r3
   25506:	f7ff fe55 	bl	251b4 <update_cache>
	__asm__ volatile(
   2550a:	f386 8811 	msr	BASEPRI, r6
   2550e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   25512:	68ab      	ldr	r3, [r5, #8]
   25514:	42a3      	cmp	r3, r4
   25516:	d103      	bne.n	25520 <z_impl_k_thread_suspend+0x5c>
}
   25518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2551c:	f008 bd5c 	b.w	2dfd8 <z_reschedule_unlocked>
}
   25520:	bd70      	pop	{r4, r5, r6, pc}
   25522:	bf00      	nop
   25524:	2000390c 	.word	0x2000390c

00025528 <k_sched_unlock>:
{
   25528:	b510      	push	{r4, lr}
	__asm__ volatile(
   2552a:	f04f 0320 	mov.w	r3, #32
   2552e:	f3ef 8411 	mrs	r4, BASEPRI
   25532:	f383 8812 	msr	BASEPRI_MAX, r3
   25536:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   2553a:	4b08      	ldr	r3, [pc, #32]	; (2555c <k_sched_unlock+0x34>)
   2553c:	689a      	ldr	r2, [r3, #8]
   2553e:	7bd3      	ldrb	r3, [r2, #15]
   25540:	3301      	adds	r3, #1
   25542:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   25544:	2000      	movs	r0, #0
   25546:	f7ff fe35 	bl	251b4 <update_cache>
	__asm__ volatile(
   2554a:	f384 8811 	msr	BASEPRI, r4
   2554e:	f3bf 8f6f 	isb	sy
}
   25552:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   25556:	f008 bd3f 	b.w	2dfd8 <z_reschedule_unlocked>
   2555a:	bf00      	nop
   2555c:	2000390c 	.word	0x2000390c

00025560 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   25560:	4b04      	ldr	r3, [pc, #16]	; (25574 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   25562:	2100      	movs	r1, #0
   25564:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
   25568:	e9c3 2208 	strd	r2, r2, [r3, #32]
   2556c:	4608      	mov	r0, r1
   2556e:	f7ff bdcb 	b.w	25108 <k_sched_time_slice_set>
   25572:	bf00      	nop
   25574:	2000390c 	.word	0x2000390c

00025578 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   25578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2557a:	f04f 0320 	mov.w	r3, #32
   2557e:	f3ef 8511 	mrs	r5, BASEPRI
   25582:	f383 8812 	msr	BASEPRI_MAX, r3
   25586:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2558a:	491a      	ldr	r1, [pc, #104]	; (255f4 <z_impl_k_yield+0x7c>)
   2558c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2558e:	7b43      	ldrb	r3, [r0, #13]
   25590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25594:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25596:	f008 fcd4 	bl	2df42 <sys_dlist_remove>
	}
	queue_thread(_current);
   2559a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2559c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   2559e:	4608      	mov	r0, r1
   255a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
   255a4:	735a      	strb	r2, [r3, #13]
   255a6:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   255aa:	4282      	cmp	r2, r0
   255ac:	d01c      	beq.n	255e8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   255ae:	b1da      	cbz	r2, 255e8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   255b0:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
   255b2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   255b6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   255ba:	42a6      	cmp	r6, r4
   255bc:	d00f      	beq.n	255de <z_impl_k_yield+0x66>
		return b2 - b1;
   255be:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   255c0:	2c00      	cmp	r4, #0
   255c2:	dd0c      	ble.n	255de <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   255c4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   255c6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   255ca:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   255cc:	6053      	str	r3, [r2, #4]
	update_cache(1);
   255ce:	2001      	movs	r0, #1
   255d0:	f7ff fdf0 	bl	251b4 <update_cache>
   255d4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   255d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   255da:	f7e2 b8bd 	b.w	7758 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   255de:	42ba      	cmp	r2, r7
   255e0:	d002      	beq.n	255e8 <z_impl_k_yield+0x70>
   255e2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   255e4:	2a00      	cmp	r2, #0
   255e6:	d1e6      	bne.n	255b6 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   255e8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
   255ea:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   255ee:	6013      	str	r3, [r2, #0]
	list->tail = node;
   255f0:	624b      	str	r3, [r1, #36]	; 0x24
}
   255f2:	e7ec      	b.n	255ce <z_impl_k_yield+0x56>
   255f4:	2000390c 	.word	0x2000390c

000255f8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   255f8:	ea50 0301 	orrs.w	r3, r0, r1
{
   255fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25600:	4605      	mov	r5, r0
   25602:	460e      	mov	r6, r1
	if (ticks == 0) {
   25604:	d103      	bne.n	2560e <z_tick_sleep+0x16>
	z_impl_k_yield();
   25606:	f7ff ffb7 	bl	25578 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   2560a:	2000      	movs	r0, #0
   2560c:	e033      	b.n	25676 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   2560e:	f06f 0401 	mvn.w	r4, #1
   25612:	1a24      	subs	r4, r4, r0
   25614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25618:	eb63 0301 	sbc.w	r3, r3, r1
   2561c:	2c01      	cmp	r4, #1
   2561e:	f173 0300 	sbcs.w	r3, r3, #0
   25622:	da02      	bge.n	2562a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   25624:	f008 fdde 	bl	2e1e4 <sys_clock_tick_get_32>
   25628:	1944      	adds	r4, r0, r5
   2562a:	f04f 0320 	mov.w	r3, #32
   2562e:	f3ef 8811 	mrs	r8, BASEPRI
   25632:	f383 8812 	msr	BASEPRI_MAX, r3
   25636:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2563a:	4f10      	ldr	r7, [pc, #64]	; (2567c <z_tick_sleep+0x84>)
   2563c:	4b10      	ldr	r3, [pc, #64]	; (25680 <z_tick_sleep+0x88>)
   2563e:	68b8      	ldr	r0, [r7, #8]
   25640:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   25642:	f7ff fea5 	bl	25390 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   25646:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25648:	490e      	ldr	r1, [pc, #56]	; (25684 <z_tick_sleep+0x8c>)
   2564a:	462a      	mov	r2, r5
   2564c:	4633      	mov	r3, r6
   2564e:	3018      	adds	r0, #24
   25650:	f000 f912 	bl	25878 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   25654:	68ba      	ldr	r2, [r7, #8]
   25656:	7b53      	ldrb	r3, [r2, #13]
   25658:	f043 0310 	orr.w	r3, r3, #16
   2565c:	7353      	strb	r3, [r2, #13]
   2565e:	4640      	mov	r0, r8
   25660:	f7e2 f87a 	bl	7758 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   25664:	f008 fdbe 	bl	2e1e4 <sys_clock_tick_get_32>
   25668:	1a20      	subs	r0, r4, r0
   2566a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   2566e:	2801      	cmp	r0, #1
   25670:	f173 0300 	sbcs.w	r3, r3, #0
   25674:	dbc9      	blt.n	2560a <z_tick_sleep+0x12>
}
   25676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2567a:	bf00      	nop
   2567c:	2000390c 	.word	0x2000390c
   25680:	2000393c 	.word	0x2000393c
   25684:	0002e019 	.word	0x0002e019

00025688 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25688:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2568c:	bf08      	it	eq
   2568e:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   25692:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25694:	d106      	bne.n	256a4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   25696:	4b08      	ldr	r3, [pc, #32]	; (256b8 <z_impl_k_sleep+0x30>)
   25698:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   2569a:	f7ff ff13 	bl	254c4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2569e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   256a2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   256a4:	f7ff ffa8 	bl	255f8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
   256a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   256ac:	fb80 0303 	smull	r0, r3, r0, r3
   256b0:	0bc0      	lsrs	r0, r0, #15
   256b2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   256b6:	e7f4      	b.n	256a2 <z_impl_k_sleep+0x1a>
   256b8:	2000390c 	.word	0x2000390c

000256bc <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   256bc:	4b01      	ldr	r3, [pc, #4]	; (256c4 <z_impl_z_current_get+0x8>)
   256be:	6898      	ldr	r0, [r3, #8]
   256c0:	4770      	bx	lr
   256c2:	bf00      	nop
   256c4:	2000390c 	.word	0x2000390c

000256c8 <z_impl_k_is_preempt_thread>:
   256c8:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   256cc:	b93b      	cbnz	r3, 256de <z_impl_k_is_preempt_thread+0x16>
   256ce:	4b05      	ldr	r3, [pc, #20]	; (256e4 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   256d0:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   256d2:	89d8      	ldrh	r0, [r3, #14]
   256d4:	287f      	cmp	r0, #127	; 0x7f
   256d6:	bf8c      	ite	hi
   256d8:	2000      	movhi	r0, #0
   256da:	2001      	movls	r0, #1
   256dc:	4770      	bx	lr
   256de:	2000      	movs	r0, #0
}
   256e0:	4770      	bx	lr
   256e2:	bf00      	nop
   256e4:	2000390c 	.word	0x2000390c

000256e8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   256e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   256ec:	4604      	mov	r4, r0
   256ee:	f04f 0320 	mov.w	r3, #32
   256f2:	f3ef 8611 	mrs	r6, BASEPRI
   256f6:	f383 8812 	msr	BASEPRI_MAX, r3
   256fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   256fe:	7b43      	ldrb	r3, [r0, #13]
   25700:	071a      	lsls	r2, r3, #28
   25702:	d505      	bpl.n	25710 <z_thread_abort+0x28>
	__asm__ volatile(
   25704:	f386 8811 	msr	BASEPRI, r6
   25708:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   2570c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   25710:	f023 0220 	bic.w	r2, r3, #32
   25714:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   25718:	09d2      	lsrs	r2, r2, #7
   2571a:	d120      	bne.n	2575e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   2571c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2571e:	68a3      	ldr	r3, [r4, #8]
   25720:	b113      	cbz	r3, 25728 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   25722:	4620      	mov	r0, r4
   25724:	f008 fc15 	bl	2df52 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   25728:	f104 0018 	add.w	r0, r4, #24
   2572c:	f008 fd1a 	bl	2e164 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   25730:	f104 0758 	add.w	r7, r4, #88	; 0x58
   25734:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   25738:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2573a:	42bd      	cmp	r5, r7
   2573c:	d000      	beq.n	25740 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2573e:	b9b5      	cbnz	r5, 2576e <z_thread_abort+0x86>
		update_cache(1);
   25740:	2001      	movs	r0, #1
   25742:	f7ff fd37 	bl	251b4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   25746:	4b10      	ldr	r3, [pc, #64]	; (25788 <z_thread_abort+0xa0>)
   25748:	689b      	ldr	r3, [r3, #8]
   2574a:	42a3      	cmp	r3, r4
   2574c:	d1da      	bne.n	25704 <z_thread_abort+0x1c>
   2574e:	f3ef 8305 	mrs	r3, IPSR
   25752:	2b00      	cmp	r3, #0
   25754:	d1d6      	bne.n	25704 <z_thread_abort+0x1c>
   25756:	4630      	mov	r0, r6
   25758:	f7e1 fffe 	bl	7758 <arch_swap>
	return ret;
   2575c:	e7d2      	b.n	25704 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2575e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   25762:	f043 0308 	orr.w	r3, r3, #8
   25766:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   25768:	f008 fbeb 	bl	2df42 <sys_dlist_remove>
}
   2576c:	e7d7      	b.n	2571e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   2576e:	4628      	mov	r0, r5
   25770:	f008 fbef 	bl	2df52 <unpend_thread_no_timeout>
   25774:	f105 0018 	add.w	r0, r5, #24
   25778:	f008 fcf4 	bl	2e164 <z_abort_timeout>
   2577c:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   25780:	4628      	mov	r0, r5
   25782:	f7ff fdb1 	bl	252e8 <ready_thread>
   25786:	e7d7      	b.n	25738 <z_thread_abort+0x50>
   25788:	2000390c 	.word	0x2000390c

0002578c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   2578c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2578e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   25792:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   25794:	e9cd 6700 	strd	r6, r7, [sp]
   25798:	f7ff fe38 	bl	2540c <z_pend_curr>

	if (data != NULL) {
   2579c:	b11c      	cbz	r4, 257a6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2579e:	4b03      	ldr	r3, [pc, #12]	; (257ac <z_sched_wait+0x20>)
   257a0:	689b      	ldr	r3, [r3, #8]
   257a2:	695b      	ldr	r3, [r3, #20]
   257a4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   257a6:	b002      	add	sp, #8
   257a8:	bdd0      	pop	{r4, r6, r7, pc}
   257aa:	bf00      	nop
   257ac:	2000390c 	.word	0x2000390c

000257b0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
   257b0:	b508      	push	{r3, lr}
   257b2:	4806      	ldr	r0, [pc, #24]	; (257cc <z_data_copy+0x1c>)
   257b4:	4a06      	ldr	r2, [pc, #24]	; (257d0 <z_data_copy+0x20>)
   257b6:	4907      	ldr	r1, [pc, #28]	; (257d4 <z_data_copy+0x24>)
   257b8:	1a12      	subs	r2, r2, r0
   257ba:	f008 fed4 	bl	2e566 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   257be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   257c2:	4a05      	ldr	r2, [pc, #20]	; (257d8 <z_data_copy+0x28>)
   257c4:	4905      	ldr	r1, [pc, #20]	; (257dc <z_data_copy+0x2c>)
   257c6:	4806      	ldr	r0, [pc, #24]	; (257e0 <z_data_copy+0x30>)
   257c8:	f008 becd 	b.w	2e566 <memcpy>
   257cc:	20000000 	.word	0x20000000
   257d0:	20000eec 	.word	0x20000eec
   257d4:	00034028 	.word	0x00034028
   257d8:	00000000 	.word	0x00000000
   257dc:	00034028 	.word	0x00034028
   257e0:	20000000 	.word	0x20000000

000257e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   257e4:	4b03      	ldr	r3, [pc, #12]	; (257f4 <elapsed+0x10>)
   257e6:	681b      	ldr	r3, [r3, #0]
   257e8:	b90b      	cbnz	r3, 257ee <elapsed+0xa>
   257ea:	f7fd bb7d 	b.w	22ee8 <sys_clock_elapsed>
}
   257ee:	2000      	movs	r0, #0
   257f0:	4770      	bx	lr
   257f2:	bf00      	nop
   257f4:	20003948 	.word	0x20003948

000257f8 <next_timeout>:
	return list->head == list;
   257f8:	4b10      	ldr	r3, [pc, #64]	; (2583c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
   257fa:	b510      	push	{r4, lr}
   257fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   257fe:	429c      	cmp	r4, r3
   25800:	bf08      	it	eq
   25802:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   25804:	f7ff ffee 	bl	257e4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
   25808:	b1a4      	cbz	r4, 25834 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
   2580a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   2580e:	1a1b      	subs	r3, r3, r0
   25810:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
   25814:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25818:	f170 0200 	sbcs.w	r2, r0, #0
   2581c:	da0a      	bge.n	25834 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
   2581e:	2800      	cmp	r0, #0
   25820:	bfac      	ite	ge
   25822:	4618      	movge	r0, r3
   25824:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   25826:	4b06      	ldr	r3, [pc, #24]	; (25840 <next_timeout+0x48>)
   25828:	691b      	ldr	r3, [r3, #16]
   2582a:	b113      	cbz	r3, 25832 <next_timeout+0x3a>
   2582c:	4298      	cmp	r0, r3
   2582e:	bfa8      	it	ge
   25830:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   25832:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
   25834:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   25838:	e7f5      	b.n	25826 <next_timeout+0x2e>
   2583a:	bf00      	nop
   2583c:	20000848 	.word	0x20000848
   25840:	2000390c 	.word	0x2000390c

00025844 <remove_timeout>:
{
   25844:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   25846:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25848:	b168      	cbz	r0, 25866 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2584a:	4a0a      	ldr	r2, [pc, #40]	; (25874 <remove_timeout+0x30>)
   2584c:	6852      	ldr	r2, [r2, #4]
   2584e:	4290      	cmp	r0, r2
   25850:	d009      	beq.n	25866 <remove_timeout+0x22>
	if (next(t) != NULL) {
   25852:	b143      	cbz	r3, 25866 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   25854:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   25858:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2585c:	1912      	adds	r2, r2, r4
   2585e:	eb41 0105 	adc.w	r1, r1, r5
   25862:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   25866:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   25868:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2586a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2586c:	2300      	movs	r3, #0
	node->prev = NULL;
   2586e:	e9c0 3300 	strd	r3, r3, [r0]
}
   25872:	bd30      	pop	{r4, r5, pc}
   25874:	20000848 	.word	0x20000848

00025878 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   25878:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2587c:	bf08      	it	eq
   2587e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   25882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25884:	4604      	mov	r4, r0
   25886:	461f      	mov	r7, r3
   25888:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2588a:	d067      	beq.n	2595c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2588c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2588e:	f04f 0320 	mov.w	r3, #32
   25892:	f3ef 8611 	mrs	r6, BASEPRI
   25896:	f383 8812 	msr	BASEPRI_MAX, r3
   2589a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2589e:	f06f 0201 	mvn.w	r2, #1
   258a2:	1b53      	subs	r3, r2, r5
   258a4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   258a8:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   258ac:	2b00      	cmp	r3, #0
   258ae:	db1b      	blt.n	258e8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   258b0:	4b2b      	ldr	r3, [pc, #172]	; (25960 <z_add_timeout+0xe8>)
   258b2:	e9d3 1300 	ldrd	r1, r3, [r3]
   258b6:	1a52      	subs	r2, r2, r1
   258b8:	eb6c 0303 	sbc.w	r3, ip, r3
   258bc:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   258be:	eb63 0307 	sbc.w	r3, r3, r7
   258c2:	2d01      	cmp	r5, #1
   258c4:	f173 0200 	sbcs.w	r2, r3, #0
   258c8:	bfbc      	itt	lt
   258ca:	2501      	movlt	r5, #1
   258cc:	2300      	movlt	r3, #0
   258ce:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   258d2:	4824      	ldr	r0, [pc, #144]	; (25964 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   258d4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   258d8:	4283      	cmp	r3, r0
   258da:	d118      	bne.n	2590e <z_add_timeout+0x96>
	node->prev = tail;
   258dc:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   258e0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   258e4:	6044      	str	r4, [r0, #4]
}
   258e6:	e026      	b.n	25936 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   258e8:	f7ff ff7c 	bl	257e4 <elapsed>
   258ec:	3501      	adds	r5, #1
   258ee:	f147 0700 	adc.w	r7, r7, #0
   258f2:	182d      	adds	r5, r5, r0
   258f4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   258f8:	e9c4 5704 	strd	r5, r7, [r4, #16]
   258fc:	e7e9      	b.n	258d2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   258fe:	1a52      	subs	r2, r2, r1
   25900:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   25904:	459c      	cmp	ip, r3
   25906:	e9c4 2504 	strd	r2, r5, [r4, #16]
   2590a:	d0e7      	beq.n	258dc <z_add_timeout+0x64>
   2590c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   2590e:	2b00      	cmp	r3, #0
   25910:	d0e4      	beq.n	258dc <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   25912:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   25916:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2591a:	428a      	cmp	r2, r1
   2591c:	eb75 0e07 	sbcs.w	lr, r5, r7
   25920:	daed      	bge.n	258fe <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   25922:	1a8a      	subs	r2, r1, r2
   25924:	eb67 0505 	sbc.w	r5, r7, r5
   25928:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2592c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2592e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25932:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25934:	605c      	str	r4, [r3, #4]
	return list->head == list;
   25936:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25938:	4283      	cmp	r3, r0
   2593a:	d00b      	beq.n	25954 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2593c:	429c      	cmp	r4, r3
   2593e:	d109      	bne.n	25954 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   25940:	f7ff ff5a 	bl	257f8 <next_timeout>

			if (next_time == 0 ||
   25944:	b118      	cbz	r0, 2594e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   25946:	4b08      	ldr	r3, [pc, #32]	; (25968 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   25948:	691b      	ldr	r3, [r3, #16]
   2594a:	4283      	cmp	r3, r0
   2594c:	d002      	beq.n	25954 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   2594e:	2100      	movs	r1, #0
   25950:	f7fd fa98 	bl	22e84 <sys_clock_set_timeout>
	__asm__ volatile(
   25954:	f386 8811 	msr	BASEPRI, r6
   25958:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2595c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2595e:	bf00      	nop
   25960:	20002180 	.word	0x20002180
   25964:	20000848 	.word	0x20000848
   25968:	2000390c 	.word	0x2000390c

0002596c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2596c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25970:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   25972:	f7ff fc79 	bl	25268 <z_time_slice>
	__asm__ volatile(
   25976:	f04f 0320 	mov.w	r3, #32
   2597a:	f3ef 8411 	mrs	r4, BASEPRI
   2597e:	f383 8812 	msr	BASEPRI_MAX, r3
   25982:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   25986:	4e24      	ldr	r6, [pc, #144]	; (25a18 <sys_clock_announce+0xac>)
	return list->head == list;
   25988:	f8df 8090 	ldr.w	r8, [pc, #144]	; 25a1c <sys_clock_announce+0xb0>
   2598c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2598e:	4d24      	ldr	r5, [pc, #144]	; (25a20 <sys_clock_announce+0xb4>)
   25990:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   25994:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25996:	4540      	cmp	r0, r8
		curr_tick += dt;
   25998:	e9d5 1e00 	ldrd	r1, lr, [r5]
   2599c:	ea4f 77e2 	mov.w	r7, r2, asr #31
   259a0:	d00b      	beq.n	259ba <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   259a2:	b150      	cbz	r0, 259ba <sys_clock_announce+0x4e>
   259a4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   259a8:	429a      	cmp	r2, r3
   259aa:	eb77 090c 	sbcs.w	r9, r7, ip
   259ae:	da16      	bge.n	259de <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   259b0:	1a9b      	subs	r3, r3, r2
   259b2:	eb6c 0c07 	sbc.w	ip, ip, r7
   259b6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   259ba:	1852      	adds	r2, r2, r1
   259bc:	eb4e 0707 	adc.w	r7, lr, r7
   259c0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   259c4:	2500      	movs	r5, #0
   259c6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   259c8:	f7ff ff16 	bl	257f8 <next_timeout>
   259cc:	4629      	mov	r1, r5
   259ce:	f7fd fa59 	bl	22e84 <sys_clock_set_timeout>
	__asm__ volatile(
   259d2:	f384 8811 	msr	BASEPRI, r4
   259d6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   259da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   259de:	1859      	adds	r1, r3, r1
   259e0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   259e4:	1ad3      	subs	r3, r2, r3
   259e6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   259e8:	2200      	movs	r2, #0
   259ea:	2300      	movs	r3, #0
   259ec:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   259f0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   259f4:	f7ff ff26 	bl	25844 <remove_timeout>
   259f8:	f384 8811 	msr	BASEPRI, r4
   259fc:	f3bf 8f6f 	isb	sy
		t->fn(t);
   25a00:	6883      	ldr	r3, [r0, #8]
   25a02:	4798      	blx	r3
	__asm__ volatile(
   25a04:	f04f 0320 	mov.w	r3, #32
   25a08:	f3ef 8411 	mrs	r4, BASEPRI
   25a0c:	f383 8812 	msr	BASEPRI_MAX, r3
   25a10:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   25a14:	e7bc      	b.n	25990 <sys_clock_announce+0x24>
   25a16:	bf00      	nop
   25a18:	20003948 	.word	0x20003948
   25a1c:	20000848 	.word	0x20000848
   25a20:	20002180 	.word	0x20002180

00025a24 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   25a24:	b510      	push	{r4, lr}
   25a26:	f04f 0320 	mov.w	r3, #32
   25a2a:	f3ef 8411 	mrs	r4, BASEPRI
   25a2e:	f383 8812 	msr	BASEPRI_MAX, r3
   25a32:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   25a36:	f7fd fa57 	bl	22ee8 <sys_clock_elapsed>
   25a3a:	4a05      	ldr	r2, [pc, #20]	; (25a50 <sys_clock_tick_get+0x2c>)
   25a3c:	e9d2 3100 	ldrd	r3, r1, [r2]
   25a40:	18c0      	adds	r0, r0, r3
   25a42:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   25a46:	f384 8811 	msr	BASEPRI, r4
   25a4a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   25a4e:	bd10      	pop	{r4, pc}
   25a50:	20002180 	.word	0x20002180

00025a54 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   25a54:	b570      	push	{r4, r5, r6, lr}
   25a56:	4604      	mov	r4, r0
	__asm__ volatile(
   25a58:	f04f 0320 	mov.w	r3, #32
   25a5c:	f3ef 8511 	mrs	r5, BASEPRI
   25a60:	f383 8812 	msr	BASEPRI_MAX, r3
   25a64:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   25a68:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   25a6c:	3301      	adds	r3, #1
   25a6e:	f142 0200 	adc.w	r2, r2, #0
   25a72:	2b02      	cmp	r3, #2
   25a74:	f172 0300 	sbcs.w	r3, r2, #0
   25a78:	d304      	bcc.n	25a84 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25a7a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   25a7e:	4917      	ldr	r1, [pc, #92]	; (25adc <z_timer_expiration_handler+0x88>)
   25a80:	f7ff fefa 	bl	25878 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   25a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
   25a86:	3301      	adds	r3, #1
   25a88:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   25a8a:	6a23      	ldr	r3, [r4, #32]
   25a8c:	b173      	cbz	r3, 25aac <z_timer_expiration_handler+0x58>
	__asm__ volatile(
   25a8e:	f385 8811 	msr	BASEPRI, r5
   25a92:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   25a96:	6a23      	ldr	r3, [r4, #32]
   25a98:	4620      	mov	r0, r4
   25a9a:	4798      	blx	r3
	__asm__ volatile(
   25a9c:	f04f 0320 	mov.w	r3, #32
   25aa0:	f3ef 8511 	mrs	r5, BASEPRI
   25aa4:	f383 8812 	msr	BASEPRI_MAX, r3
   25aa8:	f3bf 8f6f 	isb	sy
	return list->head == list;
   25aac:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25ab0:	42a6      	cmp	r6, r4
   25ab2:	d000      	beq.n	25ab6 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   25ab4:	b926      	cbnz	r6, 25ac0 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
   25ab6:	f385 8811 	msr	BASEPRI, r5
   25aba:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   25abe:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
   25ac0:	4630      	mov	r0, r6
   25ac2:	f008 fa59 	bl	2df78 <z_unpend_thread_no_timeout>
   25ac6:	2300      	movs	r3, #0
   25ac8:	67f3      	str	r3, [r6, #124]	; 0x7c
   25aca:	f385 8811 	msr	BASEPRI, r5
   25ace:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   25ad2:	4630      	mov	r0, r6
}
   25ad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
   25ad8:	f008 ba8e 	b.w	2dff8 <z_ready_thread>
   25adc:	00025a55 	.word	0x00025a55

00025ae0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   25ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25ae4:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   25aea:	bf08      	it	eq
   25aec:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   25af0:	4606      	mov	r6, r0
   25af2:	461c      	mov	r4, r3
   25af4:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
   25af8:	4689      	mov	r9, r1
   25afa:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   25afc:	d03e      	beq.n	25b7c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25afe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   25b02:	bf08      	it	eq
   25b04:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   25b08:	4615      	mov	r5, r2
   25b0a:	4607      	mov	r7, r0
   25b0c:	d014      	beq.n	25b38 <z_impl_k_timer_start+0x58>
   25b0e:	ea50 0302 	orrs.w	r3, r0, r2
   25b12:	d011      	beq.n	25b38 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
   25b14:	f06f 0301 	mvn.w	r3, #1
   25b18:	1a9b      	subs	r3, r3, r2
   25b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25b1e:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   25b22:	2b00      	cmp	r3, #0
   25b24:	da08      	bge.n	25b38 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
   25b26:	2a02      	cmp	r2, #2
   25b28:	f170 0300 	sbcs.w	r3, r0, #0
   25b2c:	bfbc      	itt	lt
   25b2e:	2502      	movlt	r5, #2
   25b30:	2700      	movlt	r7, #0
   25b32:	3d01      	subs	r5, #1
   25b34:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   25b38:	f06f 0301 	mvn.w	r3, #1
   25b3c:	1a5b      	subs	r3, r3, r1
   25b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25b42:	eb63 0304 	sbc.w	r3, r3, r4
   25b46:	2b00      	cmp	r3, #0
   25b48:	da09      	bge.n	25b5e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   25b4a:	2901      	cmp	r1, #1
   25b4c:	f174 0300 	sbcs.w	r3, r4, #0
   25b50:	bfbc      	itt	lt
   25b52:	2101      	movlt	r1, #1
   25b54:	2400      	movlt	r4, #0
   25b56:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
   25b5a:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
   25b5e:	4630      	mov	r0, r6
   25b60:	f008 fb00 	bl	2e164 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   25b64:	2300      	movs	r3, #0
   25b66:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
   25b68:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25b6c:	464a      	mov	r2, r9
   25b6e:	4643      	mov	r3, r8
   25b70:	4630      	mov	r0, r6
   25b72:	4903      	ldr	r1, [pc, #12]	; (25b80 <z_impl_k_timer_start+0xa0>)
		     duration);
}
   25b74:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   25b78:	f7ff be7e 	b.w	25878 <z_add_timeout>
}
   25b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   25b80:	00025a55 	.word	0x00025a55

00025b84 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   25b84:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25b88:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   25b8a:	4b29      	ldr	r3, [pc, #164]	; (25c30 <z_impl_k_poll+0xac>)
   25b8c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   25b8e:	2301      	movs	r3, #1
   25b90:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   25b94:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   25b98:	ea52 0305 	orrs.w	r3, r2, r5
{
   25b9c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   25b9e:	bf0c      	ite	eq
   25ba0:	2301      	moveq	r3, #1
   25ba2:	2300      	movne	r3, #0
   25ba4:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   25ba8:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   25baa:	f008 fba8 	bl	2e2fe <register_events>
   25bae:	4681      	mov	r9, r0
	__asm__ volatile(
   25bb0:	f04f 0320 	mov.w	r3, #32
   25bb4:	f3ef 8a11 	mrs	sl, BASEPRI
   25bb8:	f383 8812 	msr	BASEPRI_MAX, r3
   25bbc:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   25bc0:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   25bc4:	b964      	cbnz	r4, 25be0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   25bc6:	4601      	mov	r1, r0
   25bc8:	4652      	mov	r2, sl
   25bca:	4640      	mov	r0, r8
   25bcc:	f008 fc68 	bl	2e4a0 <clear_event_registrations>
	__asm__ volatile(
   25bd0:	f38a 8811 	msr	BASEPRI, sl
   25bd4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   25bd8:	4620      	mov	r0, r4
   25bda:	b002      	add	sp, #8
   25bdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   25be0:	2300      	movs	r3, #0
   25be2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25be6:	ea56 0305 	orrs.w	r3, r6, r5
   25bea:	d106      	bne.n	25bfa <z_impl_k_poll+0x76>
   25bec:	f38a 8811 	msr	BASEPRI, sl
   25bf0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   25bf4:	f06f 040a 	mvn.w	r4, #10
   25bf8:	e7ee      	b.n	25bd8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   25bfa:	e9cd 6500 	strd	r6, r5, [sp]
   25bfe:	4a0d      	ldr	r2, [pc, #52]	; (25c34 <z_impl_k_poll+0xb0>)
   25c00:	480d      	ldr	r0, [pc, #52]	; (25c38 <z_impl_k_poll+0xb4>)
   25c02:	4651      	mov	r1, sl
   25c04:	f7ff fc02 	bl	2540c <z_pend_curr>
   25c08:	4604      	mov	r4, r0
	__asm__ volatile(
   25c0a:	f04f 0320 	mov.w	r3, #32
   25c0e:	f3ef 8511 	mrs	r5, BASEPRI
   25c12:	f383 8812 	msr	BASEPRI_MAX, r3
   25c16:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   25c1a:	462a      	mov	r2, r5
   25c1c:	4649      	mov	r1, r9
   25c1e:	4640      	mov	r0, r8
   25c20:	f008 fc3e 	bl	2e4a0 <clear_event_registrations>
	__asm__ volatile(
   25c24:	f385 8811 	msr	BASEPRI, r5
   25c28:	f3bf 8f6f 	isb	sy
	return swap_rc;
   25c2c:	e7d4      	b.n	25bd8 <z_impl_k_poll+0x54>
   25c2e:	bf00      	nop
   25c30:	2000390c 	.word	0x2000390c
   25c34:	20000850 	.word	0x20000850
   25c38:	20003f39 	.word	0x20003f39

00025c3c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   25c3c:	b538      	push	{r3, r4, r5, lr}
   25c3e:	4603      	mov	r3, r0
	__asm__ volatile(
   25c40:	f04f 0220 	mov.w	r2, #32
   25c44:	f3ef 8511 	mrs	r5, BASEPRI
   25c48:	f382 8812 	msr	BASEPRI_MAX, r2
   25c4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   25c50:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   25c52:	2101      	movs	r1, #1
   25c54:	6081      	str	r1, [r0, #8]
	return list->head == list;
   25c56:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   25c58:	4283      	cmp	r3, r0
   25c5a:	d106      	bne.n	25c6a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   25c5c:	f385 8811 	msr	BASEPRI, r5
   25c60:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   25c64:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   25c66:	4620      	mov	r0, r4
   25c68:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   25c6a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   25c6e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25c70:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25c72:	2300      	movs	r3, #0
	node->prev = NULL;
   25c74:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25c78:	f008 fbb8 	bl	2e3ec <signal_poll_event>
	z_reschedule(&lock, key);
   25c7c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   25c7e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   25c80:	4801      	ldr	r0, [pc, #4]	; (25c88 <z_impl_k_poll_signal_raise+0x4c>)
   25c82:	f7ff fa71 	bl	25168 <z_reschedule>
	return rc;
   25c86:	e7ee      	b.n	25c66 <z_impl_k_poll_signal_raise+0x2a>
   25c88:	20003f39 	.word	0x20003f39

00025c8c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   25c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   25c8e:	4606      	mov	r6, r0
   25c90:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   25c92:	f007 ff54 	bl	2db3e <k_is_in_isr>
   25c96:	b978      	cbnz	r0, 25cb8 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   25c98:	4b0b      	ldr	r3, [pc, #44]	; (25cc8 <z_thread_aligned_alloc+0x3c>)
   25c9a:	689b      	ldr	r3, [r3, #8]
   25c9c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   25c9e:	b17c      	cbz	r4, 25cc0 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   25ca0:	1d2a      	adds	r2, r5, #4
   25ca2:	d209      	bcs.n	25cb8 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   25ca4:	2000      	movs	r0, #0
   25ca6:	2100      	movs	r1, #0
   25ca8:	e9cd 0100 	strd	r0, r1, [sp]
   25cac:	f046 0104 	orr.w	r1, r6, #4
   25cb0:	4620      	mov	r0, r4
   25cb2:	f007 febd 	bl	2da30 <k_heap_aligned_alloc>
	if (mem == NULL) {
   25cb6:	b908      	cbnz	r0, 25cbc <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   25cb8:	2400      	movs	r4, #0
	}

	return ret;
   25cba:	e001      	b.n	25cc0 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   25cbc:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   25cbe:	1d04      	adds	r4, r0, #4
}
   25cc0:	4620      	mov	r0, r4
   25cc2:	b002      	add	sp, #8
   25cc4:	bd70      	pop	{r4, r5, r6, pc}
   25cc6:	bf00      	nop
   25cc8:	2000390c 	.word	0x2000390c

00025ccc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   25ccc:	4a02      	ldr	r2, [pc, #8]	; (25cd8 <boot_banner+0xc>)
   25cce:	4903      	ldr	r1, [pc, #12]	; (25cdc <boot_banner+0x10>)
   25cd0:	4803      	ldr	r0, [pc, #12]	; (25ce0 <boot_banner+0x14>)
   25cd2:	f002 b969 	b.w	27fa8 <printk>
   25cd6:	bf00      	nop
   25cd8:	000318d9 	.word	0x000318d9
   25cdc:	00033d6b 	.word	0x00033d6b
   25ce0:	00033d79 	.word	0x00033d79

00025ce4 <malloc>:
   25ce4:	4b02      	ldr	r3, [pc, #8]	; (25cf0 <malloc+0xc>)
   25ce6:	4601      	mov	r1, r0
   25ce8:	6818      	ldr	r0, [r3, #0]
   25cea:	f000 b84d 	b.w	25d88 <_malloc_r>
   25cee:	bf00      	nop
   25cf0:	20000858 	.word	0x20000858

00025cf4 <_free_r>:
   25cf4:	b538      	push	{r3, r4, r5, lr}
   25cf6:	4605      	mov	r5, r0
   25cf8:	2900      	cmp	r1, #0
   25cfa:	d041      	beq.n	25d80 <_free_r+0x8c>
   25cfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
   25d00:	1f0c      	subs	r4, r1, #4
   25d02:	2b00      	cmp	r3, #0
   25d04:	bfb8      	it	lt
   25d06:	18e4      	addlt	r4, r4, r3
   25d08:	f000 fc88 	bl	2661c <__malloc_lock>
   25d0c:	4a1d      	ldr	r2, [pc, #116]	; (25d84 <_free_r+0x90>)
   25d0e:	6813      	ldr	r3, [r2, #0]
   25d10:	b933      	cbnz	r3, 25d20 <_free_r+0x2c>
   25d12:	6063      	str	r3, [r4, #4]
   25d14:	6014      	str	r4, [r2, #0]
   25d16:	4628      	mov	r0, r5
   25d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25d1c:	f000 bc84 	b.w	26628 <__malloc_unlock>
   25d20:	42a3      	cmp	r3, r4
   25d22:	d908      	bls.n	25d36 <_free_r+0x42>
   25d24:	6820      	ldr	r0, [r4, #0]
   25d26:	1821      	adds	r1, r4, r0
   25d28:	428b      	cmp	r3, r1
   25d2a:	bf01      	itttt	eq
   25d2c:	6819      	ldreq	r1, [r3, #0]
   25d2e:	685b      	ldreq	r3, [r3, #4]
   25d30:	1809      	addeq	r1, r1, r0
   25d32:	6021      	streq	r1, [r4, #0]
   25d34:	e7ed      	b.n	25d12 <_free_r+0x1e>
   25d36:	461a      	mov	r2, r3
   25d38:	685b      	ldr	r3, [r3, #4]
   25d3a:	b10b      	cbz	r3, 25d40 <_free_r+0x4c>
   25d3c:	42a3      	cmp	r3, r4
   25d3e:	d9fa      	bls.n	25d36 <_free_r+0x42>
   25d40:	6811      	ldr	r1, [r2, #0]
   25d42:	1850      	adds	r0, r2, r1
   25d44:	42a0      	cmp	r0, r4
   25d46:	d10b      	bne.n	25d60 <_free_r+0x6c>
   25d48:	6820      	ldr	r0, [r4, #0]
   25d4a:	4401      	add	r1, r0
   25d4c:	1850      	adds	r0, r2, r1
   25d4e:	4283      	cmp	r3, r0
   25d50:	6011      	str	r1, [r2, #0]
   25d52:	d1e0      	bne.n	25d16 <_free_r+0x22>
   25d54:	6818      	ldr	r0, [r3, #0]
   25d56:	685b      	ldr	r3, [r3, #4]
   25d58:	6053      	str	r3, [r2, #4]
   25d5a:	4401      	add	r1, r0
   25d5c:	6011      	str	r1, [r2, #0]
   25d5e:	e7da      	b.n	25d16 <_free_r+0x22>
   25d60:	d902      	bls.n	25d68 <_free_r+0x74>
   25d62:	230c      	movs	r3, #12
   25d64:	602b      	str	r3, [r5, #0]
   25d66:	e7d6      	b.n	25d16 <_free_r+0x22>
   25d68:	6820      	ldr	r0, [r4, #0]
   25d6a:	1821      	adds	r1, r4, r0
   25d6c:	428b      	cmp	r3, r1
   25d6e:	bf04      	itt	eq
   25d70:	6819      	ldreq	r1, [r3, #0]
   25d72:	685b      	ldreq	r3, [r3, #4]
   25d74:	6063      	str	r3, [r4, #4]
   25d76:	bf04      	itt	eq
   25d78:	1809      	addeq	r1, r1, r0
   25d7a:	6021      	streq	r1, [r4, #0]
   25d7c:	6054      	str	r4, [r2, #4]
   25d7e:	e7ca      	b.n	25d16 <_free_r+0x22>
   25d80:	bd38      	pop	{r3, r4, r5, pc}
   25d82:	bf00      	nop
   25d84:	2000394c 	.word	0x2000394c

00025d88 <_malloc_r>:
   25d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25d8a:	1ccd      	adds	r5, r1, #3
   25d8c:	f025 0503 	bic.w	r5, r5, #3
   25d90:	3508      	adds	r5, #8
   25d92:	2d0c      	cmp	r5, #12
   25d94:	bf38      	it	cc
   25d96:	250c      	movcc	r5, #12
   25d98:	2d00      	cmp	r5, #0
   25d9a:	4606      	mov	r6, r0
   25d9c:	db01      	blt.n	25da2 <_malloc_r+0x1a>
   25d9e:	42a9      	cmp	r1, r5
   25da0:	d903      	bls.n	25daa <_malloc_r+0x22>
   25da2:	230c      	movs	r3, #12
   25da4:	6033      	str	r3, [r6, #0]
   25da6:	2000      	movs	r0, #0
   25da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25daa:	f000 fc37 	bl	2661c <__malloc_lock>
   25dae:	4921      	ldr	r1, [pc, #132]	; (25e34 <_malloc_r+0xac>)
   25db0:	680a      	ldr	r2, [r1, #0]
   25db2:	4614      	mov	r4, r2
   25db4:	b99c      	cbnz	r4, 25dde <_malloc_r+0x56>
   25db6:	4f20      	ldr	r7, [pc, #128]	; (25e38 <_malloc_r+0xb0>)
   25db8:	683b      	ldr	r3, [r7, #0]
   25dba:	b923      	cbnz	r3, 25dc6 <_malloc_r+0x3e>
   25dbc:	4621      	mov	r1, r4
   25dbe:	4630      	mov	r0, r6
   25dc0:	f000 fb8c 	bl	264dc <_sbrk_r>
   25dc4:	6038      	str	r0, [r7, #0]
   25dc6:	4629      	mov	r1, r5
   25dc8:	4630      	mov	r0, r6
   25dca:	f000 fb87 	bl	264dc <_sbrk_r>
   25dce:	1c43      	adds	r3, r0, #1
   25dd0:	d123      	bne.n	25e1a <_malloc_r+0x92>
   25dd2:	230c      	movs	r3, #12
   25dd4:	6033      	str	r3, [r6, #0]
   25dd6:	4630      	mov	r0, r6
   25dd8:	f000 fc26 	bl	26628 <__malloc_unlock>
   25ddc:	e7e3      	b.n	25da6 <_malloc_r+0x1e>
   25dde:	6823      	ldr	r3, [r4, #0]
   25de0:	1b5b      	subs	r3, r3, r5
   25de2:	d417      	bmi.n	25e14 <_malloc_r+0x8c>
   25de4:	2b0b      	cmp	r3, #11
   25de6:	d903      	bls.n	25df0 <_malloc_r+0x68>
   25de8:	6023      	str	r3, [r4, #0]
   25dea:	441c      	add	r4, r3
   25dec:	6025      	str	r5, [r4, #0]
   25dee:	e004      	b.n	25dfa <_malloc_r+0x72>
   25df0:	6863      	ldr	r3, [r4, #4]
   25df2:	42a2      	cmp	r2, r4
   25df4:	bf0c      	ite	eq
   25df6:	600b      	streq	r3, [r1, #0]
   25df8:	6053      	strne	r3, [r2, #4]
   25dfa:	4630      	mov	r0, r6
   25dfc:	f000 fc14 	bl	26628 <__malloc_unlock>
   25e00:	f104 000b 	add.w	r0, r4, #11
   25e04:	1d23      	adds	r3, r4, #4
   25e06:	f020 0007 	bic.w	r0, r0, #7
   25e0a:	1ac2      	subs	r2, r0, r3
   25e0c:	d0cc      	beq.n	25da8 <_malloc_r+0x20>
   25e0e:	1a1b      	subs	r3, r3, r0
   25e10:	50a3      	str	r3, [r4, r2]
   25e12:	e7c9      	b.n	25da8 <_malloc_r+0x20>
   25e14:	4622      	mov	r2, r4
   25e16:	6864      	ldr	r4, [r4, #4]
   25e18:	e7cc      	b.n	25db4 <_malloc_r+0x2c>
   25e1a:	1cc4      	adds	r4, r0, #3
   25e1c:	f024 0403 	bic.w	r4, r4, #3
   25e20:	42a0      	cmp	r0, r4
   25e22:	d0e3      	beq.n	25dec <_malloc_r+0x64>
   25e24:	1a21      	subs	r1, r4, r0
   25e26:	4630      	mov	r0, r6
   25e28:	f000 fb58 	bl	264dc <_sbrk_r>
   25e2c:	3001      	adds	r0, #1
   25e2e:	d1dd      	bne.n	25dec <_malloc_r+0x64>
   25e30:	e7cf      	b.n	25dd2 <_malloc_r+0x4a>
   25e32:	bf00      	nop
   25e34:	2000394c 	.word	0x2000394c
   25e38:	20003950 	.word	0x20003950

00025e3c <_printf_float>:
   25e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25e40:	b091      	sub	sp, #68	; 0x44
   25e42:	460c      	mov	r4, r1
   25e44:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   25e48:	4616      	mov	r6, r2
   25e4a:	461f      	mov	r7, r3
   25e4c:	4605      	mov	r5, r0
   25e4e:	f000 fbcf 	bl	265f0 <_localeconv_r>
   25e52:	6803      	ldr	r3, [r0, #0]
   25e54:	9309      	str	r3, [sp, #36]	; 0x24
   25e56:	4618      	mov	r0, r3
   25e58:	f7db f91b 	bl	1092 <strlen>
   25e5c:	2300      	movs	r3, #0
   25e5e:	930e      	str	r3, [sp, #56]	; 0x38
   25e60:	f8d8 3000 	ldr.w	r3, [r8]
   25e64:	900a      	str	r0, [sp, #40]	; 0x28
   25e66:	3307      	adds	r3, #7
   25e68:	f023 0307 	bic.w	r3, r3, #7
   25e6c:	f103 0208 	add.w	r2, r3, #8
   25e70:	f894 9018 	ldrb.w	r9, [r4, #24]
   25e74:	f8d4 b000 	ldr.w	fp, [r4]
   25e78:	f8c8 2000 	str.w	r2, [r8]
   25e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
   25e80:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
   25e84:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
   25e88:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
   25e8c:	930b      	str	r3, [sp, #44]	; 0x2c
   25e8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25e90:	4b9c      	ldr	r3, [pc, #624]	; (26104 <_printf_float+0x2c8>)
   25e92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25e96:	4640      	mov	r0, r8
   25e98:	f7da ff60 	bl	d5c <__aeabi_dcmpun>
   25e9c:	bb70      	cbnz	r0, 25efc <_printf_float+0xc0>
   25e9e:	4b99      	ldr	r3, [pc, #612]	; (26104 <_printf_float+0x2c8>)
   25ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25ea2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ea6:	4640      	mov	r0, r8
   25ea8:	f7da ff3a 	bl	d20 <__aeabi_dcmple>
   25eac:	bb30      	cbnz	r0, 25efc <_printf_float+0xc0>
   25eae:	2200      	movs	r2, #0
   25eb0:	2300      	movs	r3, #0
   25eb2:	4640      	mov	r0, r8
   25eb4:	4651      	mov	r1, sl
   25eb6:	f7da ff29 	bl	d0c <__aeabi_dcmplt>
   25eba:	b110      	cbz	r0, 25ec2 <_printf_float+0x86>
   25ebc:	232d      	movs	r3, #45	; 0x2d
   25ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25ec2:	4b91      	ldr	r3, [pc, #580]	; (26108 <_printf_float+0x2cc>)
   25ec4:	4891      	ldr	r0, [pc, #580]	; (2610c <_printf_float+0x2d0>)
   25ec6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
   25eca:	bf94      	ite	ls
   25ecc:	4698      	movls	r8, r3
   25ece:	4680      	movhi	r8, r0
   25ed0:	2303      	movs	r3, #3
   25ed2:	6123      	str	r3, [r4, #16]
   25ed4:	f02b 0304 	bic.w	r3, fp, #4
   25ed8:	6023      	str	r3, [r4, #0]
   25eda:	f04f 0a00 	mov.w	sl, #0
   25ede:	9700      	str	r7, [sp, #0]
   25ee0:	4633      	mov	r3, r6
   25ee2:	aa0f      	add	r2, sp, #60	; 0x3c
   25ee4:	4621      	mov	r1, r4
   25ee6:	4628      	mov	r0, r5
   25ee8:	f008 fc04 	bl	2e6f4 <_printf_common>
   25eec:	3001      	adds	r0, #1
   25eee:	f040 808f 	bne.w	26010 <_printf_float+0x1d4>
   25ef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ef6:	b011      	add	sp, #68	; 0x44
   25ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25efc:	4642      	mov	r2, r8
   25efe:	4653      	mov	r3, sl
   25f00:	4640      	mov	r0, r8
   25f02:	4651      	mov	r1, sl
   25f04:	f7da ff2a 	bl	d5c <__aeabi_dcmpun>
   25f08:	b140      	cbz	r0, 25f1c <_printf_float+0xe0>
   25f0a:	f1ba 0f00 	cmp.w	sl, #0
   25f0e:	bfbc      	itt	lt
   25f10:	232d      	movlt	r3, #45	; 0x2d
   25f12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
   25f16:	487e      	ldr	r0, [pc, #504]	; (26110 <_printf_float+0x2d4>)
   25f18:	4b7e      	ldr	r3, [pc, #504]	; (26114 <_printf_float+0x2d8>)
   25f1a:	e7d4      	b.n	25ec6 <_printf_float+0x8a>
   25f1c:	6863      	ldr	r3, [r4, #4]
   25f1e:	1c5a      	adds	r2, r3, #1
   25f20:	f009 01df 	and.w	r1, r9, #223	; 0xdf
   25f24:	d142      	bne.n	25fac <_printf_float+0x170>
   25f26:	2306      	movs	r3, #6
   25f28:	6063      	str	r3, [r4, #4]
   25f2a:	2200      	movs	r2, #0
   25f2c:	9206      	str	r2, [sp, #24]
   25f2e:	aa0e      	add	r2, sp, #56	; 0x38
   25f30:	e9cd 9204 	strd	r9, r2, [sp, #16]
   25f34:	aa0d      	add	r2, sp, #52	; 0x34
   25f36:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
   25f3a:	9203      	str	r2, [sp, #12]
   25f3c:	f10d 0233 	add.w	r2, sp, #51	; 0x33
   25f40:	e9cd 3201 	strd	r3, r2, [sp, #4]
   25f44:	6023      	str	r3, [r4, #0]
   25f46:	6863      	ldr	r3, [r4, #4]
   25f48:	9300      	str	r3, [sp, #0]
   25f4a:	4642      	mov	r2, r8
   25f4c:	4653      	mov	r3, sl
   25f4e:	4628      	mov	r0, r5
   25f50:	910b      	str	r1, [sp, #44]	; 0x2c
   25f52:	f008 fb31 	bl	2e5b8 <__cvt>
   25f56:	990b      	ldr	r1, [sp, #44]	; 0x2c
   25f58:	2947      	cmp	r1, #71	; 0x47
   25f5a:	4680      	mov	r8, r0
   25f5c:	990d      	ldr	r1, [sp, #52]	; 0x34
   25f5e:	d108      	bne.n	25f72 <_printf_float+0x136>
   25f60:	1cc8      	adds	r0, r1, #3
   25f62:	db02      	blt.n	25f6a <_printf_float+0x12e>
   25f64:	6863      	ldr	r3, [r4, #4]
   25f66:	4299      	cmp	r1, r3
   25f68:	dd40      	ble.n	25fec <_printf_float+0x1b0>
   25f6a:	f1a9 0902 	sub.w	r9, r9, #2
   25f6e:	fa5f f989 	uxtb.w	r9, r9
   25f72:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   25f76:	d81f      	bhi.n	25fb8 <_printf_float+0x17c>
   25f78:	3901      	subs	r1, #1
   25f7a:	464a      	mov	r2, r9
   25f7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
   25f80:	910d      	str	r1, [sp, #52]	; 0x34
   25f82:	f008 fb79 	bl	2e678 <__exponent>
   25f86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   25f88:	1813      	adds	r3, r2, r0
   25f8a:	2a01      	cmp	r2, #1
   25f8c:	4682      	mov	sl, r0
   25f8e:	6123      	str	r3, [r4, #16]
   25f90:	dc02      	bgt.n	25f98 <_printf_float+0x15c>
   25f92:	6822      	ldr	r2, [r4, #0]
   25f94:	07d2      	lsls	r2, r2, #31
   25f96:	d501      	bpl.n	25f9c <_printf_float+0x160>
   25f98:	3301      	adds	r3, #1
   25f9a:	6123      	str	r3, [r4, #16]
   25f9c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
   25fa0:	2b00      	cmp	r3, #0
   25fa2:	d09c      	beq.n	25ede <_printf_float+0xa2>
   25fa4:	232d      	movs	r3, #45	; 0x2d
   25fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   25faa:	e798      	b.n	25ede <_printf_float+0xa2>
   25fac:	2947      	cmp	r1, #71	; 0x47
   25fae:	d1bc      	bne.n	25f2a <_printf_float+0xee>
   25fb0:	2b00      	cmp	r3, #0
   25fb2:	d1ba      	bne.n	25f2a <_printf_float+0xee>
   25fb4:	2301      	movs	r3, #1
   25fb6:	e7b7      	b.n	25f28 <_printf_float+0xec>
   25fb8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
   25fbc:	d118      	bne.n	25ff0 <_printf_float+0x1b4>
   25fbe:	2900      	cmp	r1, #0
   25fc0:	6863      	ldr	r3, [r4, #4]
   25fc2:	dd0b      	ble.n	25fdc <_printf_float+0x1a0>
   25fc4:	6121      	str	r1, [r4, #16]
   25fc6:	b913      	cbnz	r3, 25fce <_printf_float+0x192>
   25fc8:	6822      	ldr	r2, [r4, #0]
   25fca:	07d0      	lsls	r0, r2, #31
   25fcc:	d502      	bpl.n	25fd4 <_printf_float+0x198>
   25fce:	3301      	adds	r3, #1
   25fd0:	440b      	add	r3, r1
   25fd2:	6123      	str	r3, [r4, #16]
   25fd4:	65a1      	str	r1, [r4, #88]	; 0x58
   25fd6:	f04f 0a00 	mov.w	sl, #0
   25fda:	e7df      	b.n	25f9c <_printf_float+0x160>
   25fdc:	b913      	cbnz	r3, 25fe4 <_printf_float+0x1a8>
   25fde:	6822      	ldr	r2, [r4, #0]
   25fe0:	07d2      	lsls	r2, r2, #31
   25fe2:	d501      	bpl.n	25fe8 <_printf_float+0x1ac>
   25fe4:	3302      	adds	r3, #2
   25fe6:	e7f4      	b.n	25fd2 <_printf_float+0x196>
   25fe8:	2301      	movs	r3, #1
   25fea:	e7f2      	b.n	25fd2 <_printf_float+0x196>
   25fec:	f04f 0967 	mov.w	r9, #103	; 0x67
   25ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25ff2:	4299      	cmp	r1, r3
   25ff4:	db05      	blt.n	26002 <_printf_float+0x1c6>
   25ff6:	6823      	ldr	r3, [r4, #0]
   25ff8:	6121      	str	r1, [r4, #16]
   25ffa:	07d8      	lsls	r0, r3, #31
   25ffc:	d5ea      	bpl.n	25fd4 <_printf_float+0x198>
   25ffe:	1c4b      	adds	r3, r1, #1
   26000:	e7e7      	b.n	25fd2 <_printf_float+0x196>
   26002:	2900      	cmp	r1, #0
   26004:	bfd4      	ite	le
   26006:	f1c1 0202 	rsble	r2, r1, #2
   2600a:	2201      	movgt	r2, #1
   2600c:	4413      	add	r3, r2
   2600e:	e7e0      	b.n	25fd2 <_printf_float+0x196>
   26010:	6823      	ldr	r3, [r4, #0]
   26012:	055a      	lsls	r2, r3, #21
   26014:	d407      	bmi.n	26026 <_printf_float+0x1ea>
   26016:	6923      	ldr	r3, [r4, #16]
   26018:	4642      	mov	r2, r8
   2601a:	4631      	mov	r1, r6
   2601c:	4628      	mov	r0, r5
   2601e:	47b8      	blx	r7
   26020:	3001      	adds	r0, #1
   26022:	d12b      	bne.n	2607c <_printf_float+0x240>
   26024:	e765      	b.n	25ef2 <_printf_float+0xb6>
   26026:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
   2602a:	f240 80dc 	bls.w	261e6 <_printf_float+0x3aa>
   2602e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   26032:	2200      	movs	r2, #0
   26034:	2300      	movs	r3, #0
   26036:	f7da fe5f 	bl	cf8 <__aeabi_dcmpeq>
   2603a:	2800      	cmp	r0, #0
   2603c:	d033      	beq.n	260a6 <_printf_float+0x26a>
   2603e:	4a36      	ldr	r2, [pc, #216]	; (26118 <_printf_float+0x2dc>)
   26040:	2301      	movs	r3, #1
   26042:	4631      	mov	r1, r6
   26044:	4628      	mov	r0, r5
   26046:	47b8      	blx	r7
   26048:	3001      	adds	r0, #1
   2604a:	f43f af52 	beq.w	25ef2 <_printf_float+0xb6>
   2604e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   26052:	429a      	cmp	r2, r3
   26054:	db02      	blt.n	2605c <_printf_float+0x220>
   26056:	6823      	ldr	r3, [r4, #0]
   26058:	07d8      	lsls	r0, r3, #31
   2605a:	d50f      	bpl.n	2607c <_printf_float+0x240>
   2605c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   26060:	4631      	mov	r1, r6
   26062:	4628      	mov	r0, r5
   26064:	47b8      	blx	r7
   26066:	3001      	adds	r0, #1
   26068:	f43f af43 	beq.w	25ef2 <_printf_float+0xb6>
   2606c:	f04f 0800 	mov.w	r8, #0
   26070:	f104 091a 	add.w	r9, r4, #26
   26074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26076:	3b01      	subs	r3, #1
   26078:	4543      	cmp	r3, r8
   2607a:	dc09      	bgt.n	26090 <_printf_float+0x254>
   2607c:	6823      	ldr	r3, [r4, #0]
   2607e:	079b      	lsls	r3, r3, #30
   26080:	f100 8101 	bmi.w	26286 <_printf_float+0x44a>
   26084:	68e0      	ldr	r0, [r4, #12]
   26086:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   26088:	4298      	cmp	r0, r3
   2608a:	bfb8      	it	lt
   2608c:	4618      	movlt	r0, r3
   2608e:	e732      	b.n	25ef6 <_printf_float+0xba>
   26090:	2301      	movs	r3, #1
   26092:	464a      	mov	r2, r9
   26094:	4631      	mov	r1, r6
   26096:	4628      	mov	r0, r5
   26098:	47b8      	blx	r7
   2609a:	3001      	adds	r0, #1
   2609c:	f43f af29 	beq.w	25ef2 <_printf_float+0xb6>
   260a0:	f108 0801 	add.w	r8, r8, #1
   260a4:	e7e6      	b.n	26074 <_printf_float+0x238>
   260a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   260a8:	2b00      	cmp	r3, #0
   260aa:	dc37      	bgt.n	2611c <_printf_float+0x2e0>
   260ac:	4a1a      	ldr	r2, [pc, #104]	; (26118 <_printf_float+0x2dc>)
   260ae:	2301      	movs	r3, #1
   260b0:	4631      	mov	r1, r6
   260b2:	4628      	mov	r0, r5
   260b4:	47b8      	blx	r7
   260b6:	3001      	adds	r0, #1
   260b8:	f43f af1b 	beq.w	25ef2 <_printf_float+0xb6>
   260bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   260c0:	4313      	orrs	r3, r2
   260c2:	d102      	bne.n	260ca <_printf_float+0x28e>
   260c4:	6823      	ldr	r3, [r4, #0]
   260c6:	07d9      	lsls	r1, r3, #31
   260c8:	d5d8      	bpl.n	2607c <_printf_float+0x240>
   260ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   260ce:	4631      	mov	r1, r6
   260d0:	4628      	mov	r0, r5
   260d2:	47b8      	blx	r7
   260d4:	3001      	adds	r0, #1
   260d6:	f43f af0c 	beq.w	25ef2 <_printf_float+0xb6>
   260da:	f04f 0900 	mov.w	r9, #0
   260de:	f104 0a1a 	add.w	sl, r4, #26
   260e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   260e4:	425b      	negs	r3, r3
   260e6:	454b      	cmp	r3, r9
   260e8:	dc01      	bgt.n	260ee <_printf_float+0x2b2>
   260ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   260ec:	e794      	b.n	26018 <_printf_float+0x1dc>
   260ee:	2301      	movs	r3, #1
   260f0:	4652      	mov	r2, sl
   260f2:	4631      	mov	r1, r6
   260f4:	4628      	mov	r0, r5
   260f6:	47b8      	blx	r7
   260f8:	3001      	adds	r0, #1
   260fa:	f43f aefa 	beq.w	25ef2 <_printf_float+0xb6>
   260fe:	f109 0901 	add.w	r9, r9, #1
   26102:	e7ee      	b.n	260e2 <_printf_float+0x2a6>
   26104:	7fefffff 	.word	0x7fefffff
   26108:	00033ea1 	.word	0x00033ea1
   2610c:	0003193a 	.word	0x0003193a
   26110:	00033ea9 	.word	0x00033ea9
   26114:	00033ea5 	.word	0x00033ea5
   26118:	00032122 	.word	0x00032122
   2611c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2611e:	6da3      	ldr	r3, [r4, #88]	; 0x58
   26120:	429a      	cmp	r2, r3
   26122:	bfa8      	it	ge
   26124:	461a      	movge	r2, r3
   26126:	2a00      	cmp	r2, #0
   26128:	4691      	mov	r9, r2
   2612a:	dc37      	bgt.n	2619c <_printf_float+0x360>
   2612c:	f04f 0b00 	mov.w	fp, #0
   26130:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   26134:	f104 021a 	add.w	r2, r4, #26
   26138:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
   2613c:	ebaa 0309 	sub.w	r3, sl, r9
   26140:	455b      	cmp	r3, fp
   26142:	dc33      	bgt.n	261ac <_printf_float+0x370>
   26144:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   26148:	429a      	cmp	r2, r3
   2614a:	db3b      	blt.n	261c4 <_printf_float+0x388>
   2614c:	6823      	ldr	r3, [r4, #0]
   2614e:	07da      	lsls	r2, r3, #31
   26150:	d438      	bmi.n	261c4 <_printf_float+0x388>
   26152:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26154:	990d      	ldr	r1, [sp, #52]	; 0x34
   26156:	eba3 020a 	sub.w	r2, r3, sl
   2615a:	eba3 0901 	sub.w	r9, r3, r1
   2615e:	4591      	cmp	r9, r2
   26160:	bfa8      	it	ge
   26162:	4691      	movge	r9, r2
   26164:	f1b9 0f00 	cmp.w	r9, #0
   26168:	dc34      	bgt.n	261d4 <_printf_float+0x398>
   2616a:	f04f 0800 	mov.w	r8, #0
   2616e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
   26172:	f104 0a1a 	add.w	sl, r4, #26
   26176:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   2617a:	1a9b      	subs	r3, r3, r2
   2617c:	eba3 0309 	sub.w	r3, r3, r9
   26180:	4543      	cmp	r3, r8
   26182:	f77f af7b 	ble.w	2607c <_printf_float+0x240>
   26186:	2301      	movs	r3, #1
   26188:	4652      	mov	r2, sl
   2618a:	4631      	mov	r1, r6
   2618c:	4628      	mov	r0, r5
   2618e:	47b8      	blx	r7
   26190:	3001      	adds	r0, #1
   26192:	f43f aeae 	beq.w	25ef2 <_printf_float+0xb6>
   26196:	f108 0801 	add.w	r8, r8, #1
   2619a:	e7ec      	b.n	26176 <_printf_float+0x33a>
   2619c:	4613      	mov	r3, r2
   2619e:	4631      	mov	r1, r6
   261a0:	4642      	mov	r2, r8
   261a2:	4628      	mov	r0, r5
   261a4:	47b8      	blx	r7
   261a6:	3001      	adds	r0, #1
   261a8:	d1c0      	bne.n	2612c <_printf_float+0x2f0>
   261aa:	e6a2      	b.n	25ef2 <_printf_float+0xb6>
   261ac:	2301      	movs	r3, #1
   261ae:	4631      	mov	r1, r6
   261b0:	4628      	mov	r0, r5
   261b2:	920b      	str	r2, [sp, #44]	; 0x2c
   261b4:	47b8      	blx	r7
   261b6:	3001      	adds	r0, #1
   261b8:	f43f ae9b 	beq.w	25ef2 <_printf_float+0xb6>
   261bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   261be:	f10b 0b01 	add.w	fp, fp, #1
   261c2:	e7b9      	b.n	26138 <_printf_float+0x2fc>
   261c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   261c8:	4631      	mov	r1, r6
   261ca:	4628      	mov	r0, r5
   261cc:	47b8      	blx	r7
   261ce:	3001      	adds	r0, #1
   261d0:	d1bf      	bne.n	26152 <_printf_float+0x316>
   261d2:	e68e      	b.n	25ef2 <_printf_float+0xb6>
   261d4:	464b      	mov	r3, r9
   261d6:	eb08 020a 	add.w	r2, r8, sl
   261da:	4631      	mov	r1, r6
   261dc:	4628      	mov	r0, r5
   261de:	47b8      	blx	r7
   261e0:	3001      	adds	r0, #1
   261e2:	d1c2      	bne.n	2616a <_printf_float+0x32e>
   261e4:	e685      	b.n	25ef2 <_printf_float+0xb6>
   261e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   261e8:	2a01      	cmp	r2, #1
   261ea:	dc01      	bgt.n	261f0 <_printf_float+0x3b4>
   261ec:	07db      	lsls	r3, r3, #31
   261ee:	d537      	bpl.n	26260 <_printf_float+0x424>
   261f0:	2301      	movs	r3, #1
   261f2:	4642      	mov	r2, r8
   261f4:	4631      	mov	r1, r6
   261f6:	4628      	mov	r0, r5
   261f8:	47b8      	blx	r7
   261fa:	3001      	adds	r0, #1
   261fc:	f43f ae79 	beq.w	25ef2 <_printf_float+0xb6>
   26200:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
   26204:	4631      	mov	r1, r6
   26206:	4628      	mov	r0, r5
   26208:	47b8      	blx	r7
   2620a:	3001      	adds	r0, #1
   2620c:	f43f ae71 	beq.w	25ef2 <_printf_float+0xb6>
   26210:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   26214:	2200      	movs	r2, #0
   26216:	2300      	movs	r3, #0
   26218:	f7da fd6e 	bl	cf8 <__aeabi_dcmpeq>
   2621c:	b9d8      	cbnz	r0, 26256 <_printf_float+0x41a>
   2621e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26220:	f108 0201 	add.w	r2, r8, #1
   26224:	3b01      	subs	r3, #1
   26226:	4631      	mov	r1, r6
   26228:	4628      	mov	r0, r5
   2622a:	47b8      	blx	r7
   2622c:	3001      	adds	r0, #1
   2622e:	d10e      	bne.n	2624e <_printf_float+0x412>
   26230:	e65f      	b.n	25ef2 <_printf_float+0xb6>
   26232:	2301      	movs	r3, #1
   26234:	464a      	mov	r2, r9
   26236:	4631      	mov	r1, r6
   26238:	4628      	mov	r0, r5
   2623a:	47b8      	blx	r7
   2623c:	3001      	adds	r0, #1
   2623e:	f43f ae58 	beq.w	25ef2 <_printf_float+0xb6>
   26242:	f108 0801 	add.w	r8, r8, #1
   26246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   26248:	3b01      	subs	r3, #1
   2624a:	4543      	cmp	r3, r8
   2624c:	dcf1      	bgt.n	26232 <_printf_float+0x3f6>
   2624e:	4653      	mov	r3, sl
   26250:	f104 0250 	add.w	r2, r4, #80	; 0x50
   26254:	e6e1      	b.n	2601a <_printf_float+0x1de>
   26256:	f04f 0800 	mov.w	r8, #0
   2625a:	f104 091a 	add.w	r9, r4, #26
   2625e:	e7f2      	b.n	26246 <_printf_float+0x40a>
   26260:	2301      	movs	r3, #1
   26262:	4642      	mov	r2, r8
   26264:	e7df      	b.n	26226 <_printf_float+0x3ea>
   26266:	2301      	movs	r3, #1
   26268:	464a      	mov	r2, r9
   2626a:	4631      	mov	r1, r6
   2626c:	4628      	mov	r0, r5
   2626e:	47b8      	blx	r7
   26270:	3001      	adds	r0, #1
   26272:	f43f ae3e 	beq.w	25ef2 <_printf_float+0xb6>
   26276:	f108 0801 	add.w	r8, r8, #1
   2627a:	68e3      	ldr	r3, [r4, #12]
   2627c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2627e:	1a5b      	subs	r3, r3, r1
   26280:	4543      	cmp	r3, r8
   26282:	dcf0      	bgt.n	26266 <_printf_float+0x42a>
   26284:	e6fe      	b.n	26084 <_printf_float+0x248>
   26286:	f04f 0800 	mov.w	r8, #0
   2628a:	f104 0919 	add.w	r9, r4, #25
   2628e:	e7f4      	b.n	2627a <_printf_float+0x43e>

00026290 <_printf_i>:
   26290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   26294:	7e0f      	ldrb	r7, [r1, #24]
   26296:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   26298:	2f78      	cmp	r7, #120	; 0x78
   2629a:	4691      	mov	r9, r2
   2629c:	4680      	mov	r8, r0
   2629e:	460c      	mov	r4, r1
   262a0:	469a      	mov	sl, r3
   262a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
   262a6:	d807      	bhi.n	262b8 <_printf_i+0x28>
   262a8:	2f62      	cmp	r7, #98	; 0x62
   262aa:	d80a      	bhi.n	262c2 <_printf_i+0x32>
   262ac:	2f00      	cmp	r7, #0
   262ae:	f000 80d8 	beq.w	26462 <_printf_i+0x1d2>
   262b2:	2f58      	cmp	r7, #88	; 0x58
   262b4:	f000 80a3 	beq.w	263fe <_printf_i+0x16e>
   262b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
   262bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   262c0:	e03a      	b.n	26338 <_printf_i+0xa8>
   262c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   262c6:	2b15      	cmp	r3, #21
   262c8:	d8f6      	bhi.n	262b8 <_printf_i+0x28>
   262ca:	a101      	add	r1, pc, #4	; (adr r1, 262d0 <_printf_i+0x40>)
   262cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   262d0:	00026329 	.word	0x00026329
   262d4:	0002633d 	.word	0x0002633d
   262d8:	000262b9 	.word	0x000262b9
   262dc:	000262b9 	.word	0x000262b9
   262e0:	000262b9 	.word	0x000262b9
   262e4:	000262b9 	.word	0x000262b9
   262e8:	0002633d 	.word	0x0002633d
   262ec:	000262b9 	.word	0x000262b9
   262f0:	000262b9 	.word	0x000262b9
   262f4:	000262b9 	.word	0x000262b9
   262f8:	000262b9 	.word	0x000262b9
   262fc:	00026449 	.word	0x00026449
   26300:	0002636d 	.word	0x0002636d
   26304:	0002642b 	.word	0x0002642b
   26308:	000262b9 	.word	0x000262b9
   2630c:	000262b9 	.word	0x000262b9
   26310:	0002646b 	.word	0x0002646b
   26314:	000262b9 	.word	0x000262b9
   26318:	0002636d 	.word	0x0002636d
   2631c:	000262b9 	.word	0x000262b9
   26320:	000262b9 	.word	0x000262b9
   26324:	00026433 	.word	0x00026433
   26328:	682b      	ldr	r3, [r5, #0]
   2632a:	1d1a      	adds	r2, r3, #4
   2632c:	681b      	ldr	r3, [r3, #0]
   2632e:	602a      	str	r2, [r5, #0]
   26330:	f104 0542 	add.w	r5, r4, #66	; 0x42
   26334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   26338:	2301      	movs	r3, #1
   2633a:	e0a3      	b.n	26484 <_printf_i+0x1f4>
   2633c:	6820      	ldr	r0, [r4, #0]
   2633e:	6829      	ldr	r1, [r5, #0]
   26340:	0606      	lsls	r6, r0, #24
   26342:	f101 0304 	add.w	r3, r1, #4
   26346:	d50a      	bpl.n	2635e <_printf_i+0xce>
   26348:	680e      	ldr	r6, [r1, #0]
   2634a:	602b      	str	r3, [r5, #0]
   2634c:	2e00      	cmp	r6, #0
   2634e:	da03      	bge.n	26358 <_printf_i+0xc8>
   26350:	232d      	movs	r3, #45	; 0x2d
   26352:	4276      	negs	r6, r6
   26354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   26358:	485e      	ldr	r0, [pc, #376]	; (264d4 <_printf_i+0x244>)
   2635a:	230a      	movs	r3, #10
   2635c:	e019      	b.n	26392 <_printf_i+0x102>
   2635e:	680e      	ldr	r6, [r1, #0]
   26360:	602b      	str	r3, [r5, #0]
   26362:	f010 0f40 	tst.w	r0, #64	; 0x40
   26366:	bf18      	it	ne
   26368:	b236      	sxthne	r6, r6
   2636a:	e7ef      	b.n	2634c <_printf_i+0xbc>
   2636c:	682b      	ldr	r3, [r5, #0]
   2636e:	6820      	ldr	r0, [r4, #0]
   26370:	1d19      	adds	r1, r3, #4
   26372:	6029      	str	r1, [r5, #0]
   26374:	0601      	lsls	r1, r0, #24
   26376:	d501      	bpl.n	2637c <_printf_i+0xec>
   26378:	681e      	ldr	r6, [r3, #0]
   2637a:	e002      	b.n	26382 <_printf_i+0xf2>
   2637c:	0646      	lsls	r6, r0, #25
   2637e:	d5fb      	bpl.n	26378 <_printf_i+0xe8>
   26380:	881e      	ldrh	r6, [r3, #0]
   26382:	4854      	ldr	r0, [pc, #336]	; (264d4 <_printf_i+0x244>)
   26384:	2f6f      	cmp	r7, #111	; 0x6f
   26386:	bf0c      	ite	eq
   26388:	2308      	moveq	r3, #8
   2638a:	230a      	movne	r3, #10
   2638c:	2100      	movs	r1, #0
   2638e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   26392:	6865      	ldr	r5, [r4, #4]
   26394:	60a5      	str	r5, [r4, #8]
   26396:	2d00      	cmp	r5, #0
   26398:	bfa2      	ittt	ge
   2639a:	6821      	ldrge	r1, [r4, #0]
   2639c:	f021 0104 	bicge.w	r1, r1, #4
   263a0:	6021      	strge	r1, [r4, #0]
   263a2:	b90e      	cbnz	r6, 263a8 <_printf_i+0x118>
   263a4:	2d00      	cmp	r5, #0
   263a6:	d04d      	beq.n	26444 <_printf_i+0x1b4>
   263a8:	4615      	mov	r5, r2
   263aa:	fbb6 f1f3 	udiv	r1, r6, r3
   263ae:	fb03 6711 	mls	r7, r3, r1, r6
   263b2:	5dc7      	ldrb	r7, [r0, r7]
   263b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
   263b8:	4637      	mov	r7, r6
   263ba:	42bb      	cmp	r3, r7
   263bc:	460e      	mov	r6, r1
   263be:	d9f4      	bls.n	263aa <_printf_i+0x11a>
   263c0:	2b08      	cmp	r3, #8
   263c2:	d10b      	bne.n	263dc <_printf_i+0x14c>
   263c4:	6823      	ldr	r3, [r4, #0]
   263c6:	07de      	lsls	r6, r3, #31
   263c8:	d508      	bpl.n	263dc <_printf_i+0x14c>
   263ca:	6923      	ldr	r3, [r4, #16]
   263cc:	6861      	ldr	r1, [r4, #4]
   263ce:	4299      	cmp	r1, r3
   263d0:	bfde      	ittt	le
   263d2:	2330      	movle	r3, #48	; 0x30
   263d4:	f805 3c01 	strble.w	r3, [r5, #-1]
   263d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
   263dc:	1b52      	subs	r2, r2, r5
   263de:	6122      	str	r2, [r4, #16]
   263e0:	f8cd a000 	str.w	sl, [sp]
   263e4:	464b      	mov	r3, r9
   263e6:	aa03      	add	r2, sp, #12
   263e8:	4621      	mov	r1, r4
   263ea:	4640      	mov	r0, r8
   263ec:	f008 f982 	bl	2e6f4 <_printf_common>
   263f0:	3001      	adds	r0, #1
   263f2:	d14c      	bne.n	2648e <_printf_i+0x1fe>
   263f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   263f8:	b004      	add	sp, #16
   263fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   263fe:	4835      	ldr	r0, [pc, #212]	; (264d4 <_printf_i+0x244>)
   26400:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
   26404:	6829      	ldr	r1, [r5, #0]
   26406:	6823      	ldr	r3, [r4, #0]
   26408:	f851 6b04 	ldr.w	r6, [r1], #4
   2640c:	6029      	str	r1, [r5, #0]
   2640e:	061d      	lsls	r5, r3, #24
   26410:	d514      	bpl.n	2643c <_printf_i+0x1ac>
   26412:	07df      	lsls	r7, r3, #31
   26414:	bf44      	itt	mi
   26416:	f043 0320 	orrmi.w	r3, r3, #32
   2641a:	6023      	strmi	r3, [r4, #0]
   2641c:	b91e      	cbnz	r6, 26426 <_printf_i+0x196>
   2641e:	6823      	ldr	r3, [r4, #0]
   26420:	f023 0320 	bic.w	r3, r3, #32
   26424:	6023      	str	r3, [r4, #0]
   26426:	2310      	movs	r3, #16
   26428:	e7b0      	b.n	2638c <_printf_i+0xfc>
   2642a:	6823      	ldr	r3, [r4, #0]
   2642c:	f043 0320 	orr.w	r3, r3, #32
   26430:	6023      	str	r3, [r4, #0]
   26432:	2378      	movs	r3, #120	; 0x78
   26434:	4828      	ldr	r0, [pc, #160]	; (264d8 <_printf_i+0x248>)
   26436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2643a:	e7e3      	b.n	26404 <_printf_i+0x174>
   2643c:	0659      	lsls	r1, r3, #25
   2643e:	bf48      	it	mi
   26440:	b2b6      	uxthmi	r6, r6
   26442:	e7e6      	b.n	26412 <_printf_i+0x182>
   26444:	4615      	mov	r5, r2
   26446:	e7bb      	b.n	263c0 <_printf_i+0x130>
   26448:	682b      	ldr	r3, [r5, #0]
   2644a:	6826      	ldr	r6, [r4, #0]
   2644c:	6961      	ldr	r1, [r4, #20]
   2644e:	1d18      	adds	r0, r3, #4
   26450:	6028      	str	r0, [r5, #0]
   26452:	0635      	lsls	r5, r6, #24
   26454:	681b      	ldr	r3, [r3, #0]
   26456:	d501      	bpl.n	2645c <_printf_i+0x1cc>
   26458:	6019      	str	r1, [r3, #0]
   2645a:	e002      	b.n	26462 <_printf_i+0x1d2>
   2645c:	0670      	lsls	r0, r6, #25
   2645e:	d5fb      	bpl.n	26458 <_printf_i+0x1c8>
   26460:	8019      	strh	r1, [r3, #0]
   26462:	2300      	movs	r3, #0
   26464:	6123      	str	r3, [r4, #16]
   26466:	4615      	mov	r5, r2
   26468:	e7ba      	b.n	263e0 <_printf_i+0x150>
   2646a:	682b      	ldr	r3, [r5, #0]
   2646c:	1d1a      	adds	r2, r3, #4
   2646e:	602a      	str	r2, [r5, #0]
   26470:	681d      	ldr	r5, [r3, #0]
   26472:	6862      	ldr	r2, [r4, #4]
   26474:	2100      	movs	r1, #0
   26476:	4628      	mov	r0, r5
   26478:	f7d9 fe32 	bl	e0 <memchr>
   2647c:	b108      	cbz	r0, 26482 <_printf_i+0x1f2>
   2647e:	1b40      	subs	r0, r0, r5
   26480:	6060      	str	r0, [r4, #4]
   26482:	6863      	ldr	r3, [r4, #4]
   26484:	6123      	str	r3, [r4, #16]
   26486:	2300      	movs	r3, #0
   26488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2648c:	e7a8      	b.n	263e0 <_printf_i+0x150>
   2648e:	6923      	ldr	r3, [r4, #16]
   26490:	462a      	mov	r2, r5
   26492:	4649      	mov	r1, r9
   26494:	4640      	mov	r0, r8
   26496:	47d0      	blx	sl
   26498:	3001      	adds	r0, #1
   2649a:	d0ab      	beq.n	263f4 <_printf_i+0x164>
   2649c:	6823      	ldr	r3, [r4, #0]
   2649e:	079b      	lsls	r3, r3, #30
   264a0:	d413      	bmi.n	264ca <_printf_i+0x23a>
   264a2:	68e0      	ldr	r0, [r4, #12]
   264a4:	9b03      	ldr	r3, [sp, #12]
   264a6:	4298      	cmp	r0, r3
   264a8:	bfb8      	it	lt
   264aa:	4618      	movlt	r0, r3
   264ac:	e7a4      	b.n	263f8 <_printf_i+0x168>
   264ae:	2301      	movs	r3, #1
   264b0:	4632      	mov	r2, r6
   264b2:	4649      	mov	r1, r9
   264b4:	4640      	mov	r0, r8
   264b6:	47d0      	blx	sl
   264b8:	3001      	adds	r0, #1
   264ba:	d09b      	beq.n	263f4 <_printf_i+0x164>
   264bc:	3501      	adds	r5, #1
   264be:	68e3      	ldr	r3, [r4, #12]
   264c0:	9903      	ldr	r1, [sp, #12]
   264c2:	1a5b      	subs	r3, r3, r1
   264c4:	42ab      	cmp	r3, r5
   264c6:	dcf2      	bgt.n	264ae <_printf_i+0x21e>
   264c8:	e7eb      	b.n	264a2 <_printf_i+0x212>
   264ca:	2500      	movs	r5, #0
   264cc:	f104 0619 	add.w	r6, r4, #25
   264d0:	e7f5      	b.n	264be <_printf_i+0x22e>
   264d2:	bf00      	nop
   264d4:	00033ead 	.word	0x00033ead
   264d8:	00033ebe 	.word	0x00033ebe

000264dc <_sbrk_r>:
   264dc:	b538      	push	{r3, r4, r5, lr}
   264de:	4d06      	ldr	r5, [pc, #24]	; (264f8 <_sbrk_r+0x1c>)
   264e0:	2300      	movs	r3, #0
   264e2:	4604      	mov	r4, r0
   264e4:	4608      	mov	r0, r1
   264e6:	602b      	str	r3, [r5, #0]
   264e8:	f7e1 fe30 	bl	814c <_sbrk>
   264ec:	1c43      	adds	r3, r0, #1
   264ee:	d102      	bne.n	264f6 <_sbrk_r+0x1a>
   264f0:	682b      	ldr	r3, [r5, #0]
   264f2:	b103      	cbz	r3, 264f6 <_sbrk_r+0x1a>
   264f4:	6023      	str	r3, [r4, #0]
   264f6:	bd38      	pop	{r3, r4, r5, pc}
   264f8:	20003954 	.word	0x20003954

000264fc <siscanf>:
   264fc:	b40e      	push	{r1, r2, r3}
   264fe:	b530      	push	{r4, r5, lr}
   26500:	b09c      	sub	sp, #112	; 0x70
   26502:	ac1f      	add	r4, sp, #124	; 0x7c
   26504:	f44f 7201 	mov.w	r2, #516	; 0x204
   26508:	f854 5b04 	ldr.w	r5, [r4], #4
   2650c:	f8ad 2014 	strh.w	r2, [sp, #20]
   26510:	9002      	str	r0, [sp, #8]
   26512:	9006      	str	r0, [sp, #24]
   26514:	f7da fdbd 	bl	1092 <strlen>
   26518:	4b0b      	ldr	r3, [pc, #44]	; (26548 <siscanf+0x4c>)
   2651a:	9003      	str	r0, [sp, #12]
   2651c:	9007      	str	r0, [sp, #28]
   2651e:	930b      	str	r3, [sp, #44]	; 0x2c
   26520:	480a      	ldr	r0, [pc, #40]	; (2654c <siscanf+0x50>)
   26522:	9401      	str	r4, [sp, #4]
   26524:	2300      	movs	r3, #0
   26526:	930f      	str	r3, [sp, #60]	; 0x3c
   26528:	9314      	str	r3, [sp, #80]	; 0x50
   2652a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2652e:	f8ad 3016 	strh.w	r3, [sp, #22]
   26532:	462a      	mov	r2, r5
   26534:	4623      	mov	r3, r4
   26536:	a902      	add	r1, sp, #8
   26538:	6800      	ldr	r0, [r0, #0]
   2653a:	f000 fc8f 	bl	26e5c <__ssvfiscanf_r>
   2653e:	b01c      	add	sp, #112	; 0x70
   26540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   26544:	b003      	add	sp, #12
   26546:	4770      	bx	lr
   26548:	0002e825 	.word	0x0002e825
   2654c:	20000858 	.word	0x20000858

00026550 <vsniprintf>:
   26550:	b507      	push	{r0, r1, r2, lr}
   26552:	9300      	str	r3, [sp, #0]
   26554:	4613      	mov	r3, r2
   26556:	460a      	mov	r2, r1
   26558:	4601      	mov	r1, r0
   2655a:	4803      	ldr	r0, [pc, #12]	; (26568 <vsniprintf+0x18>)
   2655c:	6800      	ldr	r0, [r0, #0]
   2655e:	f008 f9a9 	bl	2e8b4 <_vsniprintf_r>
   26562:	b003      	add	sp, #12
   26564:	f85d fb04 	ldr.w	pc, [sp], #4
   26568:	20000858 	.word	0x20000858

0002656c <_vsiprintf_r>:
   2656c:	b500      	push	{lr}
   2656e:	b09b      	sub	sp, #108	; 0x6c
   26570:	9100      	str	r1, [sp, #0]
   26572:	9104      	str	r1, [sp, #16]
   26574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   26578:	9105      	str	r1, [sp, #20]
   2657a:	9102      	str	r1, [sp, #8]
   2657c:	4905      	ldr	r1, [pc, #20]	; (26594 <_vsiprintf_r+0x28>)
   2657e:	9103      	str	r1, [sp, #12]
   26580:	4669      	mov	r1, sp
   26582:	f000 fb6b 	bl	26c5c <_svfiprintf_r>
   26586:	9b00      	ldr	r3, [sp, #0]
   26588:	2200      	movs	r2, #0
   2658a:	701a      	strb	r2, [r3, #0]
   2658c:	b01b      	add	sp, #108	; 0x6c
   2658e:	f85d fb04 	ldr.w	pc, [sp], #4
   26592:	bf00      	nop
   26594:	ffff0208 	.word	0xffff0208

00026598 <vsiprintf>:
   26598:	4613      	mov	r3, r2
   2659a:	460a      	mov	r2, r1
   2659c:	4601      	mov	r1, r0
   2659e:	4802      	ldr	r0, [pc, #8]	; (265a8 <vsiprintf+0x10>)
   265a0:	6800      	ldr	r0, [r0, #0]
   265a2:	f7ff bfe3 	b.w	2656c <_vsiprintf_r>
   265a6:	bf00      	nop
   265a8:	20000858 	.word	0x20000858

000265ac <_write_r>:
   265ac:	b538      	push	{r3, r4, r5, lr}
   265ae:	4d07      	ldr	r5, [pc, #28]	; (265cc <_write_r+0x20>)
   265b0:	4604      	mov	r4, r0
   265b2:	4608      	mov	r0, r1
   265b4:	4611      	mov	r1, r2
   265b6:	2200      	movs	r2, #0
   265b8:	602a      	str	r2, [r5, #0]
   265ba:	461a      	mov	r2, r3
   265bc:	f003 fc13 	bl	29de6 <_write>
   265c0:	1c43      	adds	r3, r0, #1
   265c2:	d102      	bne.n	265ca <_write_r+0x1e>
   265c4:	682b      	ldr	r3, [r5, #0]
   265c6:	b103      	cbz	r3, 265ca <_write_r+0x1e>
   265c8:	6023      	str	r3, [r4, #0]
   265ca:	bd38      	pop	{r3, r4, r5, pc}
   265cc:	20003954 	.word	0x20003954

000265d0 <_close_r>:
   265d0:	b538      	push	{r3, r4, r5, lr}
   265d2:	4d06      	ldr	r5, [pc, #24]	; (265ec <_close_r+0x1c>)
   265d4:	2300      	movs	r3, #0
   265d6:	4604      	mov	r4, r0
   265d8:	4608      	mov	r0, r1
   265da:	602b      	str	r3, [r5, #0]
   265dc:	f003 fc07 	bl	29dee <_close>
   265e0:	1c43      	adds	r3, r0, #1
   265e2:	d102      	bne.n	265ea <_close_r+0x1a>
   265e4:	682b      	ldr	r3, [r5, #0]
   265e6:	b103      	cbz	r3, 265ea <_close_r+0x1a>
   265e8:	6023      	str	r3, [r4, #0]
   265ea:	bd38      	pop	{r3, r4, r5, pc}
   265ec:	20003954 	.word	0x20003954

000265f0 <_localeconv_r>:
   265f0:	4800      	ldr	r0, [pc, #0]	; (265f4 <_localeconv_r+0x4>)
   265f2:	4770      	bx	lr
   265f4:	200009ac 	.word	0x200009ac

000265f8 <_lseek_r>:
   265f8:	b538      	push	{r3, r4, r5, lr}
   265fa:	4d07      	ldr	r5, [pc, #28]	; (26618 <_lseek_r+0x20>)
   265fc:	4604      	mov	r4, r0
   265fe:	4608      	mov	r0, r1
   26600:	4611      	mov	r1, r2
   26602:	2200      	movs	r2, #0
   26604:	602a      	str	r2, [r5, #0]
   26606:	461a      	mov	r2, r3
   26608:	f003 fbf4 	bl	29df4 <_lseek>
   2660c:	1c43      	adds	r3, r0, #1
   2660e:	d102      	bne.n	26616 <_lseek_r+0x1e>
   26610:	682b      	ldr	r3, [r5, #0]
   26612:	b103      	cbz	r3, 26616 <_lseek_r+0x1e>
   26614:	6023      	str	r3, [r4, #0]
   26616:	bd38      	pop	{r3, r4, r5, pc}
   26618:	20003954 	.word	0x20003954

0002661c <__malloc_lock>:
   2661c:	4801      	ldr	r0, [pc, #4]	; (26624 <__malloc_lock+0x8>)
   2661e:	f003 bc03 	b.w	29e28 <__retarget_lock_acquire_recursive>
   26622:	bf00      	nop
   26624:	20000c74 	.word	0x20000c74

00026628 <__malloc_unlock>:
   26628:	4801      	ldr	r0, [pc, #4]	; (26630 <__malloc_unlock+0x8>)
   2662a:	f003 bc03 	b.w	29e34 <__retarget_lock_release_recursive>
   2662e:	bf00      	nop
   26630:	20000c74 	.word	0x20000c74

00026634 <_Balloc>:
   26634:	b570      	push	{r4, r5, r6, lr}
   26636:	6a46      	ldr	r6, [r0, #36]	; 0x24
   26638:	4604      	mov	r4, r0
   2663a:	460d      	mov	r5, r1
   2663c:	b976      	cbnz	r6, 2665c <_Balloc+0x28>
   2663e:	2010      	movs	r0, #16
   26640:	f7ff fb50 	bl	25ce4 <malloc>
   26644:	4602      	mov	r2, r0
   26646:	6260      	str	r0, [r4, #36]	; 0x24
   26648:	b920      	cbnz	r0, 26654 <_Balloc+0x20>
   2664a:	4b18      	ldr	r3, [pc, #96]	; (266ac <_Balloc+0x78>)
   2664c:	4818      	ldr	r0, [pc, #96]	; (266b0 <_Balloc+0x7c>)
   2664e:	2166      	movs	r1, #102	; 0x66
   26650:	f000 ffce 	bl	275f0 <__assert_func>
   26654:	e9c0 6601 	strd	r6, r6, [r0, #4]
   26658:	6006      	str	r6, [r0, #0]
   2665a:	60c6      	str	r6, [r0, #12]
   2665c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   2665e:	68f3      	ldr	r3, [r6, #12]
   26660:	b183      	cbz	r3, 26684 <_Balloc+0x50>
   26662:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26664:	68db      	ldr	r3, [r3, #12]
   26666:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   2666a:	b9b8      	cbnz	r0, 2669c <_Balloc+0x68>
   2666c:	2101      	movs	r1, #1
   2666e:	fa01 f605 	lsl.w	r6, r1, r5
   26672:	1d72      	adds	r2, r6, #5
   26674:	0092      	lsls	r2, r2, #2
   26676:	4620      	mov	r0, r4
   26678:	f008 fa36 	bl	2eae8 <_calloc_r>
   2667c:	b160      	cbz	r0, 26698 <_Balloc+0x64>
   2667e:	e9c0 5601 	strd	r5, r6, [r0, #4]
   26682:	e00e      	b.n	266a2 <_Balloc+0x6e>
   26684:	2221      	movs	r2, #33	; 0x21
   26686:	2104      	movs	r1, #4
   26688:	4620      	mov	r0, r4
   2668a:	f008 fa2d 	bl	2eae8 <_calloc_r>
   2668e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26690:	60f0      	str	r0, [r6, #12]
   26692:	68db      	ldr	r3, [r3, #12]
   26694:	2b00      	cmp	r3, #0
   26696:	d1e4      	bne.n	26662 <_Balloc+0x2e>
   26698:	2000      	movs	r0, #0
   2669a:	bd70      	pop	{r4, r5, r6, pc}
   2669c:	6802      	ldr	r2, [r0, #0]
   2669e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   266a2:	2300      	movs	r3, #0
   266a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   266a8:	e7f7      	b.n	2669a <_Balloc+0x66>
   266aa:	bf00      	nop
   266ac:	00033edc 	.word	0x00033edc
   266b0:	00033f5e 	.word	0x00033f5e

000266b4 <_Bfree>:
   266b4:	b570      	push	{r4, r5, r6, lr}
   266b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   266b8:	4605      	mov	r5, r0
   266ba:	460c      	mov	r4, r1
   266bc:	b976      	cbnz	r6, 266dc <_Bfree+0x28>
   266be:	2010      	movs	r0, #16
   266c0:	f7ff fb10 	bl	25ce4 <malloc>
   266c4:	4602      	mov	r2, r0
   266c6:	6268      	str	r0, [r5, #36]	; 0x24
   266c8:	b920      	cbnz	r0, 266d4 <_Bfree+0x20>
   266ca:	4b09      	ldr	r3, [pc, #36]	; (266f0 <_Bfree+0x3c>)
   266cc:	4809      	ldr	r0, [pc, #36]	; (266f4 <_Bfree+0x40>)
   266ce:	218a      	movs	r1, #138	; 0x8a
   266d0:	f000 ff8e 	bl	275f0 <__assert_func>
   266d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   266d8:	6006      	str	r6, [r0, #0]
   266da:	60c6      	str	r6, [r0, #12]
   266dc:	b13c      	cbz	r4, 266ee <_Bfree+0x3a>
   266de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   266e0:	6862      	ldr	r2, [r4, #4]
   266e2:	68db      	ldr	r3, [r3, #12]
   266e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   266e8:	6021      	str	r1, [r4, #0]
   266ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   266ee:	bd70      	pop	{r4, r5, r6, pc}
   266f0:	00033edc 	.word	0x00033edc
   266f4:	00033f5e 	.word	0x00033f5e

000266f8 <__multadd>:
   266f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266fc:	690d      	ldr	r5, [r1, #16]
   266fe:	4607      	mov	r7, r0
   26700:	460c      	mov	r4, r1
   26702:	461e      	mov	r6, r3
   26704:	f101 0c14 	add.w	ip, r1, #20
   26708:	2000      	movs	r0, #0
   2670a:	f8dc 3000 	ldr.w	r3, [ip]
   2670e:	b299      	uxth	r1, r3
   26710:	fb02 6101 	mla	r1, r2, r1, r6
   26714:	0c1e      	lsrs	r6, r3, #16
   26716:	0c0b      	lsrs	r3, r1, #16
   26718:	fb02 3306 	mla	r3, r2, r6, r3
   2671c:	b289      	uxth	r1, r1
   2671e:	3001      	adds	r0, #1
   26720:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   26724:	4285      	cmp	r5, r0
   26726:	f84c 1b04 	str.w	r1, [ip], #4
   2672a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   2672e:	dcec      	bgt.n	2670a <__multadd+0x12>
   26730:	b30e      	cbz	r6, 26776 <__multadd+0x7e>
   26732:	68a3      	ldr	r3, [r4, #8]
   26734:	42ab      	cmp	r3, r5
   26736:	dc19      	bgt.n	2676c <__multadd+0x74>
   26738:	6861      	ldr	r1, [r4, #4]
   2673a:	4638      	mov	r0, r7
   2673c:	3101      	adds	r1, #1
   2673e:	f7ff ff79 	bl	26634 <_Balloc>
   26742:	4680      	mov	r8, r0
   26744:	b928      	cbnz	r0, 26752 <__multadd+0x5a>
   26746:	4602      	mov	r2, r0
   26748:	4b0c      	ldr	r3, [pc, #48]	; (2677c <__multadd+0x84>)
   2674a:	480d      	ldr	r0, [pc, #52]	; (26780 <__multadd+0x88>)
   2674c:	21b5      	movs	r1, #181	; 0xb5
   2674e:	f000 ff4f 	bl	275f0 <__assert_func>
   26752:	6922      	ldr	r2, [r4, #16]
   26754:	3202      	adds	r2, #2
   26756:	f104 010c 	add.w	r1, r4, #12
   2675a:	0092      	lsls	r2, r2, #2
   2675c:	300c      	adds	r0, #12
   2675e:	f007 ff02 	bl	2e566 <memcpy>
   26762:	4621      	mov	r1, r4
   26764:	4638      	mov	r0, r7
   26766:	f7ff ffa5 	bl	266b4 <_Bfree>
   2676a:	4644      	mov	r4, r8
   2676c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   26770:	3501      	adds	r5, #1
   26772:	615e      	str	r6, [r3, #20]
   26774:	6125      	str	r5, [r4, #16]
   26776:	4620      	mov	r0, r4
   26778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2677c:	00033f4d 	.word	0x00033f4d
   26780:	00033f5e 	.word	0x00033f5e

00026784 <__i2b>:
   26784:	b510      	push	{r4, lr}
   26786:	460c      	mov	r4, r1
   26788:	2101      	movs	r1, #1
   2678a:	f7ff ff53 	bl	26634 <_Balloc>
   2678e:	4602      	mov	r2, r0
   26790:	b928      	cbnz	r0, 2679e <__i2b+0x1a>
   26792:	4b05      	ldr	r3, [pc, #20]	; (267a8 <__i2b+0x24>)
   26794:	4805      	ldr	r0, [pc, #20]	; (267ac <__i2b+0x28>)
   26796:	f44f 71a0 	mov.w	r1, #320	; 0x140
   2679a:	f000 ff29 	bl	275f0 <__assert_func>
   2679e:	2301      	movs	r3, #1
   267a0:	6144      	str	r4, [r0, #20]
   267a2:	6103      	str	r3, [r0, #16]
   267a4:	bd10      	pop	{r4, pc}
   267a6:	bf00      	nop
   267a8:	00033f4d 	.word	0x00033f4d
   267ac:	00033f5e 	.word	0x00033f5e

000267b0 <__multiply>:
   267b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267b4:	4691      	mov	r9, r2
   267b6:	690a      	ldr	r2, [r1, #16]
   267b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
   267bc:	429a      	cmp	r2, r3
   267be:	bfb8      	it	lt
   267c0:	460b      	movlt	r3, r1
   267c2:	460c      	mov	r4, r1
   267c4:	bfbc      	itt	lt
   267c6:	464c      	movlt	r4, r9
   267c8:	4699      	movlt	r9, r3
   267ca:	6927      	ldr	r7, [r4, #16]
   267cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
   267d0:	68a3      	ldr	r3, [r4, #8]
   267d2:	6861      	ldr	r1, [r4, #4]
   267d4:	eb07 060a 	add.w	r6, r7, sl
   267d8:	42b3      	cmp	r3, r6
   267da:	b085      	sub	sp, #20
   267dc:	bfb8      	it	lt
   267de:	3101      	addlt	r1, #1
   267e0:	f7ff ff28 	bl	26634 <_Balloc>
   267e4:	b930      	cbnz	r0, 267f4 <__multiply+0x44>
   267e6:	4602      	mov	r2, r0
   267e8:	4b43      	ldr	r3, [pc, #268]	; (268f8 <__multiply+0x148>)
   267ea:	4844      	ldr	r0, [pc, #272]	; (268fc <__multiply+0x14c>)
   267ec:	f240 115d 	movw	r1, #349	; 0x15d
   267f0:	f000 fefe 	bl	275f0 <__assert_func>
   267f4:	f100 0514 	add.w	r5, r0, #20
   267f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   267fc:	462b      	mov	r3, r5
   267fe:	2200      	movs	r2, #0
   26800:	4543      	cmp	r3, r8
   26802:	d321      	bcc.n	26848 <__multiply+0x98>
   26804:	f104 0314 	add.w	r3, r4, #20
   26808:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   2680c:	f109 0314 	add.w	r3, r9, #20
   26810:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   26814:	9202      	str	r2, [sp, #8]
   26816:	1b3a      	subs	r2, r7, r4
   26818:	3a15      	subs	r2, #21
   2681a:	f022 0203 	bic.w	r2, r2, #3
   2681e:	3204      	adds	r2, #4
   26820:	f104 0115 	add.w	r1, r4, #21
   26824:	428f      	cmp	r7, r1
   26826:	bf38      	it	cc
   26828:	2204      	movcc	r2, #4
   2682a:	9201      	str	r2, [sp, #4]
   2682c:	9a02      	ldr	r2, [sp, #8]
   2682e:	9303      	str	r3, [sp, #12]
   26830:	429a      	cmp	r2, r3
   26832:	d80c      	bhi.n	2684e <__multiply+0x9e>
   26834:	2e00      	cmp	r6, #0
   26836:	dd03      	ble.n	26840 <__multiply+0x90>
   26838:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   2683c:	2b00      	cmp	r3, #0
   2683e:	d059      	beq.n	268f4 <__multiply+0x144>
   26840:	6106      	str	r6, [r0, #16]
   26842:	b005      	add	sp, #20
   26844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26848:	f843 2b04 	str.w	r2, [r3], #4
   2684c:	e7d8      	b.n	26800 <__multiply+0x50>
   2684e:	f8b3 a000 	ldrh.w	sl, [r3]
   26852:	f1ba 0f00 	cmp.w	sl, #0
   26856:	d023      	beq.n	268a0 <__multiply+0xf0>
   26858:	f104 0e14 	add.w	lr, r4, #20
   2685c:	46a9      	mov	r9, r5
   2685e:	f04f 0c00 	mov.w	ip, #0
   26862:	f85e 2b04 	ldr.w	r2, [lr], #4
   26866:	f8d9 1000 	ldr.w	r1, [r9]
   2686a:	fa1f fb82 	uxth.w	fp, r2
   2686e:	b289      	uxth	r1, r1
   26870:	fb0a 110b 	mla	r1, sl, fp, r1
   26874:	4461      	add	r1, ip
   26876:	f8d9 c000 	ldr.w	ip, [r9]
   2687a:	0c12      	lsrs	r2, r2, #16
   2687c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
   26880:	fb0a c202 	mla	r2, sl, r2, ip
   26884:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   26888:	b289      	uxth	r1, r1
   2688a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   2688e:	4577      	cmp	r7, lr
   26890:	f849 1b04 	str.w	r1, [r9], #4
   26894:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   26898:	d8e3      	bhi.n	26862 <__multiply+0xb2>
   2689a:	9a01      	ldr	r2, [sp, #4]
   2689c:	f845 c002 	str.w	ip, [r5, r2]
   268a0:	9a03      	ldr	r2, [sp, #12]
   268a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   268a6:	3304      	adds	r3, #4
   268a8:	f1b9 0f00 	cmp.w	r9, #0
   268ac:	d020      	beq.n	268f0 <__multiply+0x140>
   268ae:	6829      	ldr	r1, [r5, #0]
   268b0:	f104 0c14 	add.w	ip, r4, #20
   268b4:	46ae      	mov	lr, r5
   268b6:	f04f 0a00 	mov.w	sl, #0
   268ba:	f8bc b000 	ldrh.w	fp, [ip]
   268be:	f8be 2002 	ldrh.w	r2, [lr, #2]
   268c2:	fb09 220b 	mla	r2, r9, fp, r2
   268c6:	4492      	add	sl, r2
   268c8:	b289      	uxth	r1, r1
   268ca:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   268ce:	f84e 1b04 	str.w	r1, [lr], #4
   268d2:	f85c 2b04 	ldr.w	r2, [ip], #4
   268d6:	f8be 1000 	ldrh.w	r1, [lr]
   268da:	0c12      	lsrs	r2, r2, #16
   268dc:	fb09 1102 	mla	r1, r9, r2, r1
   268e0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   268e4:	4567      	cmp	r7, ip
   268e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   268ea:	d8e6      	bhi.n	268ba <__multiply+0x10a>
   268ec:	9a01      	ldr	r2, [sp, #4]
   268ee:	50a9      	str	r1, [r5, r2]
   268f0:	3504      	adds	r5, #4
   268f2:	e79b      	b.n	2682c <__multiply+0x7c>
   268f4:	3e01      	subs	r6, #1
   268f6:	e79d      	b.n	26834 <__multiply+0x84>
   268f8:	00033f4d 	.word	0x00033f4d
   268fc:	00033f5e 	.word	0x00033f5e

00026900 <__pow5mult>:
   26900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26904:	4615      	mov	r5, r2
   26906:	f012 0203 	ands.w	r2, r2, #3
   2690a:	4606      	mov	r6, r0
   2690c:	460f      	mov	r7, r1
   2690e:	d007      	beq.n	26920 <__pow5mult+0x20>
   26910:	4c25      	ldr	r4, [pc, #148]	; (269a8 <__pow5mult+0xa8>)
   26912:	3a01      	subs	r2, #1
   26914:	2300      	movs	r3, #0
   26916:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   2691a:	f7ff feed 	bl	266f8 <__multadd>
   2691e:	4607      	mov	r7, r0
   26920:	10ad      	asrs	r5, r5, #2
   26922:	d03d      	beq.n	269a0 <__pow5mult+0xa0>
   26924:	6a74      	ldr	r4, [r6, #36]	; 0x24
   26926:	b97c      	cbnz	r4, 26948 <__pow5mult+0x48>
   26928:	2010      	movs	r0, #16
   2692a:	f7ff f9db 	bl	25ce4 <malloc>
   2692e:	4602      	mov	r2, r0
   26930:	6270      	str	r0, [r6, #36]	; 0x24
   26932:	b928      	cbnz	r0, 26940 <__pow5mult+0x40>
   26934:	4b1d      	ldr	r3, [pc, #116]	; (269ac <__pow5mult+0xac>)
   26936:	481e      	ldr	r0, [pc, #120]	; (269b0 <__pow5mult+0xb0>)
   26938:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   2693c:	f000 fe58 	bl	275f0 <__assert_func>
   26940:	e9c0 4401 	strd	r4, r4, [r0, #4]
   26944:	6004      	str	r4, [r0, #0]
   26946:	60c4      	str	r4, [r0, #12]
   26948:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   2694c:	f8d8 4008 	ldr.w	r4, [r8, #8]
   26950:	b94c      	cbnz	r4, 26966 <__pow5mult+0x66>
   26952:	f240 2171 	movw	r1, #625	; 0x271
   26956:	4630      	mov	r0, r6
   26958:	f7ff ff14 	bl	26784 <__i2b>
   2695c:	2300      	movs	r3, #0
   2695e:	f8c8 0008 	str.w	r0, [r8, #8]
   26962:	4604      	mov	r4, r0
   26964:	6003      	str	r3, [r0, #0]
   26966:	f04f 0900 	mov.w	r9, #0
   2696a:	07eb      	lsls	r3, r5, #31
   2696c:	d50a      	bpl.n	26984 <__pow5mult+0x84>
   2696e:	4639      	mov	r1, r7
   26970:	4622      	mov	r2, r4
   26972:	4630      	mov	r0, r6
   26974:	f7ff ff1c 	bl	267b0 <__multiply>
   26978:	4639      	mov	r1, r7
   2697a:	4680      	mov	r8, r0
   2697c:	4630      	mov	r0, r6
   2697e:	f7ff fe99 	bl	266b4 <_Bfree>
   26982:	4647      	mov	r7, r8
   26984:	106d      	asrs	r5, r5, #1
   26986:	d00b      	beq.n	269a0 <__pow5mult+0xa0>
   26988:	6820      	ldr	r0, [r4, #0]
   2698a:	b938      	cbnz	r0, 2699c <__pow5mult+0x9c>
   2698c:	4622      	mov	r2, r4
   2698e:	4621      	mov	r1, r4
   26990:	4630      	mov	r0, r6
   26992:	f7ff ff0d 	bl	267b0 <__multiply>
   26996:	6020      	str	r0, [r4, #0]
   26998:	f8c0 9000 	str.w	r9, [r0]
   2699c:	4604      	mov	r4, r0
   2699e:	e7e4      	b.n	2696a <__pow5mult+0x6a>
   269a0:	4638      	mov	r0, r7
   269a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   269a6:	bf00      	nop
   269a8:	0003136c 	.word	0x0003136c
   269ac:	00033edc 	.word	0x00033edc
   269b0:	00033f5e 	.word	0x00033f5e

000269b4 <__lshift>:
   269b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   269b8:	460c      	mov	r4, r1
   269ba:	6849      	ldr	r1, [r1, #4]
   269bc:	6923      	ldr	r3, [r4, #16]
   269be:	eb03 1862 	add.w	r8, r3, r2, asr #5
   269c2:	68a3      	ldr	r3, [r4, #8]
   269c4:	4607      	mov	r7, r0
   269c6:	4691      	mov	r9, r2
   269c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
   269cc:	f108 0601 	add.w	r6, r8, #1
   269d0:	42b3      	cmp	r3, r6
   269d2:	db0b      	blt.n	269ec <__lshift+0x38>
   269d4:	4638      	mov	r0, r7
   269d6:	f7ff fe2d 	bl	26634 <_Balloc>
   269da:	4605      	mov	r5, r0
   269dc:	b948      	cbnz	r0, 269f2 <__lshift+0x3e>
   269de:	4602      	mov	r2, r0
   269e0:	4b2a      	ldr	r3, [pc, #168]	; (26a8c <__lshift+0xd8>)
   269e2:	482b      	ldr	r0, [pc, #172]	; (26a90 <__lshift+0xdc>)
   269e4:	f240 11d9 	movw	r1, #473	; 0x1d9
   269e8:	f000 fe02 	bl	275f0 <__assert_func>
   269ec:	3101      	adds	r1, #1
   269ee:	005b      	lsls	r3, r3, #1
   269f0:	e7ee      	b.n	269d0 <__lshift+0x1c>
   269f2:	2300      	movs	r3, #0
   269f4:	f100 0114 	add.w	r1, r0, #20
   269f8:	f100 0210 	add.w	r2, r0, #16
   269fc:	4618      	mov	r0, r3
   269fe:	4553      	cmp	r3, sl
   26a00:	db37      	blt.n	26a72 <__lshift+0xbe>
   26a02:	6920      	ldr	r0, [r4, #16]
   26a04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   26a08:	f104 0314 	add.w	r3, r4, #20
   26a0c:	f019 091f 	ands.w	r9, r9, #31
   26a10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   26a14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   26a18:	d02f      	beq.n	26a7a <__lshift+0xc6>
   26a1a:	f1c9 0e20 	rsb	lr, r9, #32
   26a1e:	468a      	mov	sl, r1
   26a20:	f04f 0c00 	mov.w	ip, #0
   26a24:	681a      	ldr	r2, [r3, #0]
   26a26:	fa02 f209 	lsl.w	r2, r2, r9
   26a2a:	ea42 020c 	orr.w	r2, r2, ip
   26a2e:	f84a 2b04 	str.w	r2, [sl], #4
   26a32:	f853 2b04 	ldr.w	r2, [r3], #4
   26a36:	4298      	cmp	r0, r3
   26a38:	fa22 fc0e 	lsr.w	ip, r2, lr
   26a3c:	d8f2      	bhi.n	26a24 <__lshift+0x70>
   26a3e:	1b03      	subs	r3, r0, r4
   26a40:	3b15      	subs	r3, #21
   26a42:	f023 0303 	bic.w	r3, r3, #3
   26a46:	3304      	adds	r3, #4
   26a48:	f104 0215 	add.w	r2, r4, #21
   26a4c:	4290      	cmp	r0, r2
   26a4e:	bf38      	it	cc
   26a50:	2304      	movcc	r3, #4
   26a52:	f841 c003 	str.w	ip, [r1, r3]
   26a56:	f1bc 0f00 	cmp.w	ip, #0
   26a5a:	d001      	beq.n	26a60 <__lshift+0xac>
   26a5c:	f108 0602 	add.w	r6, r8, #2
   26a60:	3e01      	subs	r6, #1
   26a62:	4638      	mov	r0, r7
   26a64:	612e      	str	r6, [r5, #16]
   26a66:	4621      	mov	r1, r4
   26a68:	f7ff fe24 	bl	266b4 <_Bfree>
   26a6c:	4628      	mov	r0, r5
   26a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26a72:	f842 0f04 	str.w	r0, [r2, #4]!
   26a76:	3301      	adds	r3, #1
   26a78:	e7c1      	b.n	269fe <__lshift+0x4a>
   26a7a:	3904      	subs	r1, #4
   26a7c:	f853 2b04 	ldr.w	r2, [r3], #4
   26a80:	f841 2f04 	str.w	r2, [r1, #4]!
   26a84:	4298      	cmp	r0, r3
   26a86:	d8f9      	bhi.n	26a7c <__lshift+0xc8>
   26a88:	e7ea      	b.n	26a60 <__lshift+0xac>
   26a8a:	bf00      	nop
   26a8c:	00033f4d 	.word	0x00033f4d
   26a90:	00033f5e 	.word	0x00033f5e

00026a94 <__mdiff>:
   26a94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26a98:	460d      	mov	r5, r1
   26a9a:	4607      	mov	r7, r0
   26a9c:	4611      	mov	r1, r2
   26a9e:	4628      	mov	r0, r5
   26aa0:	4614      	mov	r4, r2
   26aa2:	f008 f806 	bl	2eab2 <__mcmp>
   26aa6:	1e06      	subs	r6, r0, #0
   26aa8:	d111      	bne.n	26ace <__mdiff+0x3a>
   26aaa:	4631      	mov	r1, r6
   26aac:	4638      	mov	r0, r7
   26aae:	f7ff fdc1 	bl	26634 <_Balloc>
   26ab2:	4602      	mov	r2, r0
   26ab4:	b928      	cbnz	r0, 26ac2 <__mdiff+0x2e>
   26ab6:	4b39      	ldr	r3, [pc, #228]	; (26b9c <__mdiff+0x108>)
   26ab8:	f240 2132 	movw	r1, #562	; 0x232
   26abc:	4838      	ldr	r0, [pc, #224]	; (26ba0 <__mdiff+0x10c>)
   26abe:	f000 fd97 	bl	275f0 <__assert_func>
   26ac2:	2301      	movs	r3, #1
   26ac4:	e9c0 3604 	strd	r3, r6, [r0, #16]
   26ac8:	4610      	mov	r0, r2
   26aca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26ace:	bfa4      	itt	ge
   26ad0:	4623      	movge	r3, r4
   26ad2:	462c      	movge	r4, r5
   26ad4:	4638      	mov	r0, r7
   26ad6:	6861      	ldr	r1, [r4, #4]
   26ad8:	bfa6      	itte	ge
   26ada:	461d      	movge	r5, r3
   26adc:	2600      	movge	r6, #0
   26ade:	2601      	movlt	r6, #1
   26ae0:	f7ff fda8 	bl	26634 <_Balloc>
   26ae4:	4602      	mov	r2, r0
   26ae6:	b918      	cbnz	r0, 26af0 <__mdiff+0x5c>
   26ae8:	4b2c      	ldr	r3, [pc, #176]	; (26b9c <__mdiff+0x108>)
   26aea:	f44f 7110 	mov.w	r1, #576	; 0x240
   26aee:	e7e5      	b.n	26abc <__mdiff+0x28>
   26af0:	6927      	ldr	r7, [r4, #16]
   26af2:	60c6      	str	r6, [r0, #12]
   26af4:	692e      	ldr	r6, [r5, #16]
   26af6:	f104 0014 	add.w	r0, r4, #20
   26afa:	f105 0914 	add.w	r9, r5, #20
   26afe:	f102 0e14 	add.w	lr, r2, #20
   26b02:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
   26b06:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   26b0a:	3410      	adds	r4, #16
   26b0c:	46f2      	mov	sl, lr
   26b0e:	2100      	movs	r1, #0
   26b10:	f859 3b04 	ldr.w	r3, [r9], #4
   26b14:	f854 bf04 	ldr.w	fp, [r4, #4]!
   26b18:	fa1f f883 	uxth.w	r8, r3
   26b1c:	fa11 f18b 	uxtah	r1, r1, fp
   26b20:	0c1b      	lsrs	r3, r3, #16
   26b22:	eba1 0808 	sub.w	r8, r1, r8
   26b26:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   26b2a:	eb03 4328 	add.w	r3, r3, r8, asr #16
   26b2e:	fa1f f888 	uxth.w	r8, r8
   26b32:	1419      	asrs	r1, r3, #16
   26b34:	454e      	cmp	r6, r9
   26b36:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   26b3a:	f84a 3b04 	str.w	r3, [sl], #4
   26b3e:	d8e7      	bhi.n	26b10 <__mdiff+0x7c>
   26b40:	1b73      	subs	r3, r6, r5
   26b42:	3b15      	subs	r3, #21
   26b44:	f023 0303 	bic.w	r3, r3, #3
   26b48:	3304      	adds	r3, #4
   26b4a:	3515      	adds	r5, #21
   26b4c:	42ae      	cmp	r6, r5
   26b4e:	bf38      	it	cc
   26b50:	2304      	movcc	r3, #4
   26b52:	4418      	add	r0, r3
   26b54:	4473      	add	r3, lr
   26b56:	469e      	mov	lr, r3
   26b58:	4606      	mov	r6, r0
   26b5a:	4566      	cmp	r6, ip
   26b5c:	d30e      	bcc.n	26b7c <__mdiff+0xe8>
   26b5e:	f10c 0103 	add.w	r1, ip, #3
   26b62:	1a09      	subs	r1, r1, r0
   26b64:	f021 0103 	bic.w	r1, r1, #3
   26b68:	3803      	subs	r0, #3
   26b6a:	4584      	cmp	ip, r0
   26b6c:	bf38      	it	cc
   26b6e:	2100      	movcc	r1, #0
   26b70:	4419      	add	r1, r3
   26b72:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   26b76:	b17b      	cbz	r3, 26b98 <__mdiff+0x104>
   26b78:	6117      	str	r7, [r2, #16]
   26b7a:	e7a5      	b.n	26ac8 <__mdiff+0x34>
   26b7c:	f856 8b04 	ldr.w	r8, [r6], #4
   26b80:	fa11 f488 	uxtah	r4, r1, r8
   26b84:	1425      	asrs	r5, r4, #16
   26b86:	eb05 4518 	add.w	r5, r5, r8, lsr #16
   26b8a:	b2a4      	uxth	r4, r4
   26b8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   26b90:	f84e 4b04 	str.w	r4, [lr], #4
   26b94:	1429      	asrs	r1, r5, #16
   26b96:	e7e0      	b.n	26b5a <__mdiff+0xc6>
   26b98:	3f01      	subs	r7, #1
   26b9a:	e7ea      	b.n	26b72 <__mdiff+0xde>
   26b9c:	00033f4d 	.word	0x00033f4d
   26ba0:	00033f5e 	.word	0x00033f5e

00026ba4 <__d2b>:
   26ba4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26ba8:	2101      	movs	r1, #1
   26baa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
   26bae:	4690      	mov	r8, r2
   26bb0:	461d      	mov	r5, r3
   26bb2:	f7ff fd3f 	bl	26634 <_Balloc>
   26bb6:	4604      	mov	r4, r0
   26bb8:	b930      	cbnz	r0, 26bc8 <__d2b+0x24>
   26bba:	4602      	mov	r2, r0
   26bbc:	4b25      	ldr	r3, [pc, #148]	; (26c54 <__d2b+0xb0>)
   26bbe:	4826      	ldr	r0, [pc, #152]	; (26c58 <__d2b+0xb4>)
   26bc0:	f240 310a 	movw	r1, #778	; 0x30a
   26bc4:	f000 fd14 	bl	275f0 <__assert_func>
   26bc8:	f3c5 0313 	ubfx	r3, r5, #0, #20
   26bcc:	f3c5 550a 	ubfx	r5, r5, #20, #11
   26bd0:	bb2d      	cbnz	r5, 26c1e <__d2b+0x7a>
   26bd2:	9301      	str	r3, [sp, #4]
   26bd4:	f1b8 0300 	subs.w	r3, r8, #0
   26bd8:	d026      	beq.n	26c28 <__d2b+0x84>
   26bda:	4668      	mov	r0, sp
   26bdc:	9300      	str	r3, [sp, #0]
   26bde:	f007 ff3b 	bl	2ea58 <__lo0bits>
   26be2:	9900      	ldr	r1, [sp, #0]
   26be4:	b1f0      	cbz	r0, 26c24 <__d2b+0x80>
   26be6:	9a01      	ldr	r2, [sp, #4]
   26be8:	f1c0 0320 	rsb	r3, r0, #32
   26bec:	fa02 f303 	lsl.w	r3, r2, r3
   26bf0:	430b      	orrs	r3, r1
   26bf2:	40c2      	lsrs	r2, r0
   26bf4:	6163      	str	r3, [r4, #20]
   26bf6:	9201      	str	r2, [sp, #4]
   26bf8:	9b01      	ldr	r3, [sp, #4]
   26bfa:	61a3      	str	r3, [r4, #24]
   26bfc:	2b00      	cmp	r3, #0
   26bfe:	bf14      	ite	ne
   26c00:	2102      	movne	r1, #2
   26c02:	2101      	moveq	r1, #1
   26c04:	6121      	str	r1, [r4, #16]
   26c06:	b1c5      	cbz	r5, 26c3a <__d2b+0x96>
   26c08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   26c0c:	4405      	add	r5, r0
   26c0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   26c12:	603d      	str	r5, [r7, #0]
   26c14:	6030      	str	r0, [r6, #0]
   26c16:	4620      	mov	r0, r4
   26c18:	b002      	add	sp, #8
   26c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   26c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   26c22:	e7d6      	b.n	26bd2 <__d2b+0x2e>
   26c24:	6161      	str	r1, [r4, #20]
   26c26:	e7e7      	b.n	26bf8 <__d2b+0x54>
   26c28:	a801      	add	r0, sp, #4
   26c2a:	f007 ff15 	bl	2ea58 <__lo0bits>
   26c2e:	9b01      	ldr	r3, [sp, #4]
   26c30:	6163      	str	r3, [r4, #20]
   26c32:	2101      	movs	r1, #1
   26c34:	6121      	str	r1, [r4, #16]
   26c36:	3020      	adds	r0, #32
   26c38:	e7e5      	b.n	26c06 <__d2b+0x62>
   26c3a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
   26c3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   26c42:	6038      	str	r0, [r7, #0]
   26c44:	6918      	ldr	r0, [r3, #16]
   26c46:	f007 fee7 	bl	2ea18 <__hi0bits>
   26c4a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   26c4e:	6031      	str	r1, [r6, #0]
   26c50:	e7e1      	b.n	26c16 <__d2b+0x72>
   26c52:	bf00      	nop
   26c54:	00033f4d 	.word	0x00033f4d
   26c58:	00033f5e 	.word	0x00033f5e

00026c5c <_svfiprintf_r>:
   26c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c60:	4698      	mov	r8, r3
   26c62:	898b      	ldrh	r3, [r1, #12]
   26c64:	061b      	lsls	r3, r3, #24
   26c66:	b09d      	sub	sp, #116	; 0x74
   26c68:	4607      	mov	r7, r0
   26c6a:	460d      	mov	r5, r1
   26c6c:	4614      	mov	r4, r2
   26c6e:	d50e      	bpl.n	26c8e <_svfiprintf_r+0x32>
   26c70:	690b      	ldr	r3, [r1, #16]
   26c72:	b963      	cbnz	r3, 26c8e <_svfiprintf_r+0x32>
   26c74:	2140      	movs	r1, #64	; 0x40
   26c76:	f7ff f887 	bl	25d88 <_malloc_r>
   26c7a:	6028      	str	r0, [r5, #0]
   26c7c:	6128      	str	r0, [r5, #16]
   26c7e:	b920      	cbnz	r0, 26c8a <_svfiprintf_r+0x2e>
   26c80:	230c      	movs	r3, #12
   26c82:	603b      	str	r3, [r7, #0]
   26c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   26c88:	e0d1      	b.n	26e2e <_svfiprintf_r+0x1d2>
   26c8a:	2340      	movs	r3, #64	; 0x40
   26c8c:	616b      	str	r3, [r5, #20]
   26c8e:	2300      	movs	r3, #0
   26c90:	9309      	str	r3, [sp, #36]	; 0x24
   26c92:	2320      	movs	r3, #32
   26c94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   26c98:	f8cd 800c 	str.w	r8, [sp, #12]
   26c9c:	2330      	movs	r3, #48	; 0x30
   26c9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 26e48 <_svfiprintf_r+0x1ec>
   26ca2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   26ca6:	f04f 0901 	mov.w	r9, #1
   26caa:	4623      	mov	r3, r4
   26cac:	469a      	mov	sl, r3
   26cae:	f813 2b01 	ldrb.w	r2, [r3], #1
   26cb2:	b10a      	cbz	r2, 26cb8 <_svfiprintf_r+0x5c>
   26cb4:	2a25      	cmp	r2, #37	; 0x25
   26cb6:	d1f9      	bne.n	26cac <_svfiprintf_r+0x50>
   26cb8:	ebba 0b04 	subs.w	fp, sl, r4
   26cbc:	d00b      	beq.n	26cd6 <_svfiprintf_r+0x7a>
   26cbe:	465b      	mov	r3, fp
   26cc0:	4622      	mov	r2, r4
   26cc2:	4629      	mov	r1, r5
   26cc4:	4638      	mov	r0, r7
   26cc6:	f007 ff1d 	bl	2eb04 <__ssputs_r>
   26cca:	3001      	adds	r0, #1
   26ccc:	f000 80aa 	beq.w	26e24 <_svfiprintf_r+0x1c8>
   26cd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   26cd2:	445a      	add	r2, fp
   26cd4:	9209      	str	r2, [sp, #36]	; 0x24
   26cd6:	f89a 3000 	ldrb.w	r3, [sl]
   26cda:	2b00      	cmp	r3, #0
   26cdc:	f000 80a2 	beq.w	26e24 <_svfiprintf_r+0x1c8>
   26ce0:	2300      	movs	r3, #0
   26ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26ce6:	e9cd 2305 	strd	r2, r3, [sp, #20]
   26cea:	f10a 0a01 	add.w	sl, sl, #1
   26cee:	9304      	str	r3, [sp, #16]
   26cf0:	9307      	str	r3, [sp, #28]
   26cf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   26cf6:	931a      	str	r3, [sp, #104]	; 0x68
   26cf8:	4654      	mov	r4, sl
   26cfa:	2205      	movs	r2, #5
   26cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
   26d00:	4851      	ldr	r0, [pc, #324]	; (26e48 <_svfiprintf_r+0x1ec>)
   26d02:	f7d9 f9ed 	bl	e0 <memchr>
   26d06:	9a04      	ldr	r2, [sp, #16]
   26d08:	b9d8      	cbnz	r0, 26d42 <_svfiprintf_r+0xe6>
   26d0a:	06d0      	lsls	r0, r2, #27
   26d0c:	bf44      	itt	mi
   26d0e:	2320      	movmi	r3, #32
   26d10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   26d14:	0711      	lsls	r1, r2, #28
   26d16:	bf44      	itt	mi
   26d18:	232b      	movmi	r3, #43	; 0x2b
   26d1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   26d1e:	f89a 3000 	ldrb.w	r3, [sl]
   26d22:	2b2a      	cmp	r3, #42	; 0x2a
   26d24:	d015      	beq.n	26d52 <_svfiprintf_r+0xf6>
   26d26:	9a07      	ldr	r2, [sp, #28]
   26d28:	4654      	mov	r4, sl
   26d2a:	2000      	movs	r0, #0
   26d2c:	f04f 0c0a 	mov.w	ip, #10
   26d30:	4621      	mov	r1, r4
   26d32:	f811 3b01 	ldrb.w	r3, [r1], #1
   26d36:	3b30      	subs	r3, #48	; 0x30
   26d38:	2b09      	cmp	r3, #9
   26d3a:	d94e      	bls.n	26dda <_svfiprintf_r+0x17e>
   26d3c:	b1b0      	cbz	r0, 26d6c <_svfiprintf_r+0x110>
   26d3e:	9207      	str	r2, [sp, #28]
   26d40:	e014      	b.n	26d6c <_svfiprintf_r+0x110>
   26d42:	eba0 0308 	sub.w	r3, r0, r8
   26d46:	fa09 f303 	lsl.w	r3, r9, r3
   26d4a:	4313      	orrs	r3, r2
   26d4c:	9304      	str	r3, [sp, #16]
   26d4e:	46a2      	mov	sl, r4
   26d50:	e7d2      	b.n	26cf8 <_svfiprintf_r+0x9c>
   26d52:	9b03      	ldr	r3, [sp, #12]
   26d54:	1d19      	adds	r1, r3, #4
   26d56:	681b      	ldr	r3, [r3, #0]
   26d58:	9103      	str	r1, [sp, #12]
   26d5a:	2b00      	cmp	r3, #0
   26d5c:	bfbb      	ittet	lt
   26d5e:	425b      	neglt	r3, r3
   26d60:	f042 0202 	orrlt.w	r2, r2, #2
   26d64:	9307      	strge	r3, [sp, #28]
   26d66:	9307      	strlt	r3, [sp, #28]
   26d68:	bfb8      	it	lt
   26d6a:	9204      	strlt	r2, [sp, #16]
   26d6c:	7823      	ldrb	r3, [r4, #0]
   26d6e:	2b2e      	cmp	r3, #46	; 0x2e
   26d70:	d10c      	bne.n	26d8c <_svfiprintf_r+0x130>
   26d72:	7863      	ldrb	r3, [r4, #1]
   26d74:	2b2a      	cmp	r3, #42	; 0x2a
   26d76:	d135      	bne.n	26de4 <_svfiprintf_r+0x188>
   26d78:	9b03      	ldr	r3, [sp, #12]
   26d7a:	1d1a      	adds	r2, r3, #4
   26d7c:	681b      	ldr	r3, [r3, #0]
   26d7e:	9203      	str	r2, [sp, #12]
   26d80:	2b00      	cmp	r3, #0
   26d82:	bfb8      	it	lt
   26d84:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   26d88:	3402      	adds	r4, #2
   26d8a:	9305      	str	r3, [sp, #20]
   26d8c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 26e4c <_svfiprintf_r+0x1f0>
   26d90:	7821      	ldrb	r1, [r4, #0]
   26d92:	2203      	movs	r2, #3
   26d94:	4650      	mov	r0, sl
   26d96:	f7d9 f9a3 	bl	e0 <memchr>
   26d9a:	b140      	cbz	r0, 26dae <_svfiprintf_r+0x152>
   26d9c:	2340      	movs	r3, #64	; 0x40
   26d9e:	eba0 000a 	sub.w	r0, r0, sl
   26da2:	fa03 f000 	lsl.w	r0, r3, r0
   26da6:	9b04      	ldr	r3, [sp, #16]
   26da8:	4303      	orrs	r3, r0
   26daa:	3401      	adds	r4, #1
   26dac:	9304      	str	r3, [sp, #16]
   26dae:	f814 1b01 	ldrb.w	r1, [r4], #1
   26db2:	4827      	ldr	r0, [pc, #156]	; (26e50 <_svfiprintf_r+0x1f4>)
   26db4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   26db8:	2206      	movs	r2, #6
   26dba:	f7d9 f991 	bl	e0 <memchr>
   26dbe:	2800      	cmp	r0, #0
   26dc0:	d038      	beq.n	26e34 <_svfiprintf_r+0x1d8>
   26dc2:	4b24      	ldr	r3, [pc, #144]	; (26e54 <_svfiprintf_r+0x1f8>)
   26dc4:	bb1b      	cbnz	r3, 26e0e <_svfiprintf_r+0x1b2>
   26dc6:	9b03      	ldr	r3, [sp, #12]
   26dc8:	3307      	adds	r3, #7
   26dca:	f023 0307 	bic.w	r3, r3, #7
   26dce:	3308      	adds	r3, #8
   26dd0:	9303      	str	r3, [sp, #12]
   26dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   26dd4:	4433      	add	r3, r6
   26dd6:	9309      	str	r3, [sp, #36]	; 0x24
   26dd8:	e767      	b.n	26caa <_svfiprintf_r+0x4e>
   26dda:	fb0c 3202 	mla	r2, ip, r2, r3
   26dde:	460c      	mov	r4, r1
   26de0:	2001      	movs	r0, #1
   26de2:	e7a5      	b.n	26d30 <_svfiprintf_r+0xd4>
   26de4:	2300      	movs	r3, #0
   26de6:	3401      	adds	r4, #1
   26de8:	9305      	str	r3, [sp, #20]
   26dea:	4619      	mov	r1, r3
   26dec:	f04f 0c0a 	mov.w	ip, #10
   26df0:	4620      	mov	r0, r4
   26df2:	f810 2b01 	ldrb.w	r2, [r0], #1
   26df6:	3a30      	subs	r2, #48	; 0x30
   26df8:	2a09      	cmp	r2, #9
   26dfa:	d903      	bls.n	26e04 <_svfiprintf_r+0x1a8>
   26dfc:	2b00      	cmp	r3, #0
   26dfe:	d0c5      	beq.n	26d8c <_svfiprintf_r+0x130>
   26e00:	9105      	str	r1, [sp, #20]
   26e02:	e7c3      	b.n	26d8c <_svfiprintf_r+0x130>
   26e04:	fb0c 2101 	mla	r1, ip, r1, r2
   26e08:	4604      	mov	r4, r0
   26e0a:	2301      	movs	r3, #1
   26e0c:	e7f0      	b.n	26df0 <_svfiprintf_r+0x194>
   26e0e:	ab03      	add	r3, sp, #12
   26e10:	9300      	str	r3, [sp, #0]
   26e12:	462a      	mov	r2, r5
   26e14:	4b10      	ldr	r3, [pc, #64]	; (26e58 <_svfiprintf_r+0x1fc>)
   26e16:	a904      	add	r1, sp, #16
   26e18:	4638      	mov	r0, r7
   26e1a:	f7ff f80f 	bl	25e3c <_printf_float>
   26e1e:	1c42      	adds	r2, r0, #1
   26e20:	4606      	mov	r6, r0
   26e22:	d1d6      	bne.n	26dd2 <_svfiprintf_r+0x176>
   26e24:	89ab      	ldrh	r3, [r5, #12]
   26e26:	065b      	lsls	r3, r3, #25
   26e28:	f53f af2c 	bmi.w	26c84 <_svfiprintf_r+0x28>
   26e2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   26e2e:	b01d      	add	sp, #116	; 0x74
   26e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26e34:	ab03      	add	r3, sp, #12
   26e36:	9300      	str	r3, [sp, #0]
   26e38:	462a      	mov	r2, r5
   26e3a:	4b07      	ldr	r3, [pc, #28]	; (26e58 <_svfiprintf_r+0x1fc>)
   26e3c:	a904      	add	r1, sp, #16
   26e3e:	4638      	mov	r0, r7
   26e40:	f7ff fa26 	bl	26290 <_printf_i>
   26e44:	e7eb      	b.n	26e1e <_svfiprintf_r+0x1c2>
   26e46:	bf00      	nop
   26e48:	00033fb9 	.word	0x00033fb9
   26e4c:	00033fbf 	.word	0x00033fbf
   26e50:	00033fc3 	.word	0x00033fc3
   26e54:	00025e3d 	.word	0x00025e3d
   26e58:	0002eb05 	.word	0x0002eb05

00026e5c <__ssvfiscanf_r>:
   26e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e60:	460c      	mov	r4, r1
   26e62:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
   26e66:	2100      	movs	r1, #0
   26e68:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
   26e6c:	49a6      	ldr	r1, [pc, #664]	; (27108 <__ssvfiscanf_r+0x2ac>)
   26e6e:	91a0      	str	r1, [sp, #640]	; 0x280
   26e70:	f10d 0804 	add.w	r8, sp, #4
   26e74:	49a5      	ldr	r1, [pc, #660]	; (2710c <__ssvfiscanf_r+0x2b0>)
   26e76:	4fa6      	ldr	r7, [pc, #664]	; (27110 <__ssvfiscanf_r+0x2b4>)
   26e78:	f8df 9298 	ldr.w	r9, [pc, #664]	; 27114 <__ssvfiscanf_r+0x2b8>
   26e7c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
   26e80:	4606      	mov	r6, r0
   26e82:	91a1      	str	r1, [sp, #644]	; 0x284
   26e84:	9300      	str	r3, [sp, #0]
   26e86:	7813      	ldrb	r3, [r2, #0]
   26e88:	2b00      	cmp	r3, #0
   26e8a:	f000 815a 	beq.w	27142 <__ssvfiscanf_r+0x2e6>
   26e8e:	5dd9      	ldrb	r1, [r3, r7]
   26e90:	f011 0108 	ands.w	r1, r1, #8
   26e94:	f102 0501 	add.w	r5, r2, #1
   26e98:	d019      	beq.n	26ece <__ssvfiscanf_r+0x72>
   26e9a:	6863      	ldr	r3, [r4, #4]
   26e9c:	2b00      	cmp	r3, #0
   26e9e:	dd0f      	ble.n	26ec0 <__ssvfiscanf_r+0x64>
   26ea0:	6823      	ldr	r3, [r4, #0]
   26ea2:	781a      	ldrb	r2, [r3, #0]
   26ea4:	5cba      	ldrb	r2, [r7, r2]
   26ea6:	0712      	lsls	r2, r2, #28
   26ea8:	d401      	bmi.n	26eae <__ssvfiscanf_r+0x52>
   26eaa:	462a      	mov	r2, r5
   26eac:	e7eb      	b.n	26e86 <__ssvfiscanf_r+0x2a>
   26eae:	9a45      	ldr	r2, [sp, #276]	; 0x114
   26eb0:	3201      	adds	r2, #1
   26eb2:	9245      	str	r2, [sp, #276]	; 0x114
   26eb4:	6862      	ldr	r2, [r4, #4]
   26eb6:	3301      	adds	r3, #1
   26eb8:	3a01      	subs	r2, #1
   26eba:	6062      	str	r2, [r4, #4]
   26ebc:	6023      	str	r3, [r4, #0]
   26ebe:	e7ec      	b.n	26e9a <__ssvfiscanf_r+0x3e>
   26ec0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   26ec2:	4621      	mov	r1, r4
   26ec4:	4630      	mov	r0, r6
   26ec6:	4798      	blx	r3
   26ec8:	2800      	cmp	r0, #0
   26eca:	d0e9      	beq.n	26ea0 <__ssvfiscanf_r+0x44>
   26ecc:	e7ed      	b.n	26eaa <__ssvfiscanf_r+0x4e>
   26ece:	2b25      	cmp	r3, #37	; 0x25
   26ed0:	d012      	beq.n	26ef8 <__ssvfiscanf_r+0x9c>
   26ed2:	469a      	mov	sl, r3
   26ed4:	6863      	ldr	r3, [r4, #4]
   26ed6:	2b00      	cmp	r3, #0
   26ed8:	f340 8091 	ble.w	26ffe <__ssvfiscanf_r+0x1a2>
   26edc:	6822      	ldr	r2, [r4, #0]
   26ede:	7813      	ldrb	r3, [r2, #0]
   26ee0:	4553      	cmp	r3, sl
   26ee2:	f040 812e 	bne.w	27142 <__ssvfiscanf_r+0x2e6>
   26ee6:	6863      	ldr	r3, [r4, #4]
   26ee8:	3b01      	subs	r3, #1
   26eea:	6063      	str	r3, [r4, #4]
   26eec:	9b45      	ldr	r3, [sp, #276]	; 0x114
   26eee:	3201      	adds	r2, #1
   26ef0:	3301      	adds	r3, #1
   26ef2:	6022      	str	r2, [r4, #0]
   26ef4:	9345      	str	r3, [sp, #276]	; 0x114
   26ef6:	e7d8      	b.n	26eaa <__ssvfiscanf_r+0x4e>
   26ef8:	9141      	str	r1, [sp, #260]	; 0x104
   26efa:	9143      	str	r1, [sp, #268]	; 0x10c
   26efc:	7853      	ldrb	r3, [r2, #1]
   26efe:	2b2a      	cmp	r3, #42	; 0x2a
   26f00:	bf02      	ittt	eq
   26f02:	2310      	moveq	r3, #16
   26f04:	1c95      	addeq	r5, r2, #2
   26f06:	9341      	streq	r3, [sp, #260]	; 0x104
   26f08:	220a      	movs	r2, #10
   26f0a:	46aa      	mov	sl, r5
   26f0c:	f81a 1b01 	ldrb.w	r1, [sl], #1
   26f10:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   26f14:	2b09      	cmp	r3, #9
   26f16:	d91d      	bls.n	26f54 <__ssvfiscanf_r+0xf8>
   26f18:	487e      	ldr	r0, [pc, #504]	; (27114 <__ssvfiscanf_r+0x2b8>)
   26f1a:	2203      	movs	r2, #3
   26f1c:	f7d9 f8e0 	bl	e0 <memchr>
   26f20:	b140      	cbz	r0, 26f34 <__ssvfiscanf_r+0xd8>
   26f22:	2301      	movs	r3, #1
   26f24:	eba0 0009 	sub.w	r0, r0, r9
   26f28:	fa03 f000 	lsl.w	r0, r3, r0
   26f2c:	9b41      	ldr	r3, [sp, #260]	; 0x104
   26f2e:	4318      	orrs	r0, r3
   26f30:	9041      	str	r0, [sp, #260]	; 0x104
   26f32:	4655      	mov	r5, sl
   26f34:	f815 3b01 	ldrb.w	r3, [r5], #1
   26f38:	2b78      	cmp	r3, #120	; 0x78
   26f3a:	d806      	bhi.n	26f4a <__ssvfiscanf_r+0xee>
   26f3c:	2b57      	cmp	r3, #87	; 0x57
   26f3e:	d810      	bhi.n	26f62 <__ssvfiscanf_r+0x106>
   26f40:	2b25      	cmp	r3, #37	; 0x25
   26f42:	d0c6      	beq.n	26ed2 <__ssvfiscanf_r+0x76>
   26f44:	d856      	bhi.n	26ff4 <__ssvfiscanf_r+0x198>
   26f46:	2b00      	cmp	r3, #0
   26f48:	d064      	beq.n	27014 <__ssvfiscanf_r+0x1b8>
   26f4a:	2303      	movs	r3, #3
   26f4c:	9347      	str	r3, [sp, #284]	; 0x11c
   26f4e:	230a      	movs	r3, #10
   26f50:	9342      	str	r3, [sp, #264]	; 0x108
   26f52:	e071      	b.n	27038 <__ssvfiscanf_r+0x1dc>
   26f54:	9b43      	ldr	r3, [sp, #268]	; 0x10c
   26f56:	fb02 1103 	mla	r1, r2, r3, r1
   26f5a:	3930      	subs	r1, #48	; 0x30
   26f5c:	9143      	str	r1, [sp, #268]	; 0x10c
   26f5e:	4655      	mov	r5, sl
   26f60:	e7d3      	b.n	26f0a <__ssvfiscanf_r+0xae>
   26f62:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
   26f66:	2a20      	cmp	r2, #32
   26f68:	d8ef      	bhi.n	26f4a <__ssvfiscanf_r+0xee>
   26f6a:	a101      	add	r1, pc, #4	; (adr r1, 26f70 <__ssvfiscanf_r+0x114>)
   26f6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   26f70:	00027023 	.word	0x00027023
   26f74:	00026f4b 	.word	0x00026f4b
   26f78:	00026f4b 	.word	0x00026f4b
   26f7c:	00027081 	.word	0x00027081
   26f80:	00026f4b 	.word	0x00026f4b
   26f84:	00026f4b 	.word	0x00026f4b
   26f88:	00026f4b 	.word	0x00026f4b
   26f8c:	00026f4b 	.word	0x00026f4b
   26f90:	00026f4b 	.word	0x00026f4b
   26f94:	00026f4b 	.word	0x00026f4b
   26f98:	00026f4b 	.word	0x00026f4b
   26f9c:	00027097 	.word	0x00027097
   26fa0:	0002706d 	.word	0x0002706d
   26fa4:	00026ffb 	.word	0x00026ffb
   26fa8:	00026ffb 	.word	0x00026ffb
   26fac:	00026ffb 	.word	0x00026ffb
   26fb0:	00026f4b 	.word	0x00026f4b
   26fb4:	00027071 	.word	0x00027071
   26fb8:	00026f4b 	.word	0x00026f4b
   26fbc:	00026f4b 	.word	0x00026f4b
   26fc0:	00026f4b 	.word	0x00026f4b
   26fc4:	00026f4b 	.word	0x00026f4b
   26fc8:	000270a7 	.word	0x000270a7
   26fcc:	00027079 	.word	0x00027079
   26fd0:	0002701b 	.word	0x0002701b
   26fd4:	00026f4b 	.word	0x00026f4b
   26fd8:	00026f4b 	.word	0x00026f4b
   26fdc:	000270a3 	.word	0x000270a3
   26fe0:	00026f4b 	.word	0x00026f4b
   26fe4:	0002706d 	.word	0x0002706d
   26fe8:	00026f4b 	.word	0x00026f4b
   26fec:	00026f4b 	.word	0x00026f4b
   26ff0:	00027023 	.word	0x00027023
   26ff4:	3b45      	subs	r3, #69	; 0x45
   26ff6:	2b02      	cmp	r3, #2
   26ff8:	d8a7      	bhi.n	26f4a <__ssvfiscanf_r+0xee>
   26ffa:	2305      	movs	r3, #5
   26ffc:	e01b      	b.n	27036 <__ssvfiscanf_r+0x1da>
   26ffe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   27000:	4621      	mov	r1, r4
   27002:	4630      	mov	r0, r6
   27004:	4798      	blx	r3
   27006:	2800      	cmp	r0, #0
   27008:	f43f af68 	beq.w	26edc <__ssvfiscanf_r+0x80>
   2700c:	9844      	ldr	r0, [sp, #272]	; 0x110
   2700e:	2800      	cmp	r0, #0
   27010:	f040 808d 	bne.w	2712e <__ssvfiscanf_r+0x2d2>
   27014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27018:	e08f      	b.n	2713a <__ssvfiscanf_r+0x2de>
   2701a:	9a41      	ldr	r2, [sp, #260]	; 0x104
   2701c:	f042 0220 	orr.w	r2, r2, #32
   27020:	9241      	str	r2, [sp, #260]	; 0x104
   27022:	9a41      	ldr	r2, [sp, #260]	; 0x104
   27024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   27028:	9241      	str	r2, [sp, #260]	; 0x104
   2702a:	2210      	movs	r2, #16
   2702c:	2b6f      	cmp	r3, #111	; 0x6f
   2702e:	9242      	str	r2, [sp, #264]	; 0x108
   27030:	bf34      	ite	cc
   27032:	2303      	movcc	r3, #3
   27034:	2304      	movcs	r3, #4
   27036:	9347      	str	r3, [sp, #284]	; 0x11c
   27038:	6863      	ldr	r3, [r4, #4]
   2703a:	2b00      	cmp	r3, #0
   2703c:	dd42      	ble.n	270c4 <__ssvfiscanf_r+0x268>
   2703e:	9b41      	ldr	r3, [sp, #260]	; 0x104
   27040:	0659      	lsls	r1, r3, #25
   27042:	d404      	bmi.n	2704e <__ssvfiscanf_r+0x1f2>
   27044:	6823      	ldr	r3, [r4, #0]
   27046:	781a      	ldrb	r2, [r3, #0]
   27048:	5cba      	ldrb	r2, [r7, r2]
   2704a:	0712      	lsls	r2, r2, #28
   2704c:	d441      	bmi.n	270d2 <__ssvfiscanf_r+0x276>
   2704e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   27050:	2b02      	cmp	r3, #2
   27052:	dc50      	bgt.n	270f6 <__ssvfiscanf_r+0x29a>
   27054:	466b      	mov	r3, sp
   27056:	4622      	mov	r2, r4
   27058:	a941      	add	r1, sp, #260	; 0x104
   2705a:	4630      	mov	r0, r6
   2705c:	f000 f876 	bl	2714c <_scanf_chars>
   27060:	2801      	cmp	r0, #1
   27062:	d06e      	beq.n	27142 <__ssvfiscanf_r+0x2e6>
   27064:	2802      	cmp	r0, #2
   27066:	f47f af20 	bne.w	26eaa <__ssvfiscanf_r+0x4e>
   2706a:	e7cf      	b.n	2700c <__ssvfiscanf_r+0x1b0>
   2706c:	220a      	movs	r2, #10
   2706e:	e7dd      	b.n	2702c <__ssvfiscanf_r+0x1d0>
   27070:	2300      	movs	r3, #0
   27072:	9342      	str	r3, [sp, #264]	; 0x108
   27074:	2303      	movs	r3, #3
   27076:	e7de      	b.n	27036 <__ssvfiscanf_r+0x1da>
   27078:	2308      	movs	r3, #8
   2707a:	9342      	str	r3, [sp, #264]	; 0x108
   2707c:	2304      	movs	r3, #4
   2707e:	e7da      	b.n	27036 <__ssvfiscanf_r+0x1da>
   27080:	4629      	mov	r1, r5
   27082:	4640      	mov	r0, r8
   27084:	f007 fdf3 	bl	2ec6e <__sccl>
   27088:	9b41      	ldr	r3, [sp, #260]	; 0x104
   2708a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2708e:	9341      	str	r3, [sp, #260]	; 0x104
   27090:	4605      	mov	r5, r0
   27092:	2301      	movs	r3, #1
   27094:	e7cf      	b.n	27036 <__ssvfiscanf_r+0x1da>
   27096:	9b41      	ldr	r3, [sp, #260]	; 0x104
   27098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2709c:	9341      	str	r3, [sp, #260]	; 0x104
   2709e:	2300      	movs	r3, #0
   270a0:	e7c9      	b.n	27036 <__ssvfiscanf_r+0x1da>
   270a2:	2302      	movs	r3, #2
   270a4:	e7c7      	b.n	27036 <__ssvfiscanf_r+0x1da>
   270a6:	9841      	ldr	r0, [sp, #260]	; 0x104
   270a8:	06c3      	lsls	r3, r0, #27
   270aa:	f53f aefe 	bmi.w	26eaa <__ssvfiscanf_r+0x4e>
   270ae:	9b00      	ldr	r3, [sp, #0]
   270b0:	9a45      	ldr	r2, [sp, #276]	; 0x114
   270b2:	1d19      	adds	r1, r3, #4
   270b4:	9100      	str	r1, [sp, #0]
   270b6:	681b      	ldr	r3, [r3, #0]
   270b8:	f010 0f01 	tst.w	r0, #1
   270bc:	bf14      	ite	ne
   270be:	801a      	strhne	r2, [r3, #0]
   270c0:	601a      	streq	r2, [r3, #0]
   270c2:	e6f2      	b.n	26eaa <__ssvfiscanf_r+0x4e>
   270c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   270c6:	4621      	mov	r1, r4
   270c8:	4630      	mov	r0, r6
   270ca:	4798      	blx	r3
   270cc:	2800      	cmp	r0, #0
   270ce:	d0b6      	beq.n	2703e <__ssvfiscanf_r+0x1e2>
   270d0:	e79c      	b.n	2700c <__ssvfiscanf_r+0x1b0>
   270d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
   270d4:	3201      	adds	r2, #1
   270d6:	9245      	str	r2, [sp, #276]	; 0x114
   270d8:	6862      	ldr	r2, [r4, #4]
   270da:	3a01      	subs	r2, #1
   270dc:	2a00      	cmp	r2, #0
   270de:	6062      	str	r2, [r4, #4]
   270e0:	dd02      	ble.n	270e8 <__ssvfiscanf_r+0x28c>
   270e2:	3301      	adds	r3, #1
   270e4:	6023      	str	r3, [r4, #0]
   270e6:	e7ad      	b.n	27044 <__ssvfiscanf_r+0x1e8>
   270e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
   270ea:	4621      	mov	r1, r4
   270ec:	4630      	mov	r0, r6
   270ee:	4798      	blx	r3
   270f0:	2800      	cmp	r0, #0
   270f2:	d0a7      	beq.n	27044 <__ssvfiscanf_r+0x1e8>
   270f4:	e78a      	b.n	2700c <__ssvfiscanf_r+0x1b0>
   270f6:	2b04      	cmp	r3, #4
   270f8:	dc0e      	bgt.n	27118 <__ssvfiscanf_r+0x2bc>
   270fa:	466b      	mov	r3, sp
   270fc:	4622      	mov	r2, r4
   270fe:	a941      	add	r1, sp, #260	; 0x104
   27100:	4630      	mov	r0, r6
   27102:	f000 f87d 	bl	27200 <_scanf_i>
   27106:	e7ab      	b.n	27060 <__ssvfiscanf_r+0x204>
   27108:	0002ebbb 	.word	0x0002ebbb
   2710c:	0002ec35 	.word	0x0002ec35
   27110:	00033da1 	.word	0x00033da1
   27114:	00033fbf 	.word	0x00033fbf
   27118:	4b0b      	ldr	r3, [pc, #44]	; (27148 <__ssvfiscanf_r+0x2ec>)
   2711a:	2b00      	cmp	r3, #0
   2711c:	f43f aec5 	beq.w	26eaa <__ssvfiscanf_r+0x4e>
   27120:	466b      	mov	r3, sp
   27122:	4622      	mov	r2, r4
   27124:	a941      	add	r1, sp, #260	; 0x104
   27126:	4630      	mov	r0, r6
   27128:	f3af 8000 	nop.w
   2712c:	e798      	b.n	27060 <__ssvfiscanf_r+0x204>
   2712e:	89a3      	ldrh	r3, [r4, #12]
   27130:	f013 0f40 	tst.w	r3, #64	; 0x40
   27134:	bf18      	it	ne
   27136:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   2713a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
   2713e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27142:	9844      	ldr	r0, [sp, #272]	; 0x110
   27144:	e7f9      	b.n	2713a <__ssvfiscanf_r+0x2de>
   27146:	bf00      	nop
   27148:	00000000 	.word	0x00000000

0002714c <_scanf_chars>:
   2714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27150:	4615      	mov	r5, r2
   27152:	688a      	ldr	r2, [r1, #8]
   27154:	4680      	mov	r8, r0
   27156:	460c      	mov	r4, r1
   27158:	b932      	cbnz	r2, 27168 <_scanf_chars+0x1c>
   2715a:	698a      	ldr	r2, [r1, #24]
   2715c:	2a00      	cmp	r2, #0
   2715e:	bf0c      	ite	eq
   27160:	2201      	moveq	r2, #1
   27162:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   27166:	608a      	str	r2, [r1, #8]
   27168:	6822      	ldr	r2, [r4, #0]
   2716a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 271fc <_scanf_chars+0xb0>
   2716e:	06d1      	lsls	r1, r2, #27
   27170:	bf5f      	itttt	pl
   27172:	681a      	ldrpl	r2, [r3, #0]
   27174:	1d11      	addpl	r1, r2, #4
   27176:	6019      	strpl	r1, [r3, #0]
   27178:	6816      	ldrpl	r6, [r2, #0]
   2717a:	2700      	movs	r7, #0
   2717c:	69a0      	ldr	r0, [r4, #24]
   2717e:	b188      	cbz	r0, 271a4 <_scanf_chars+0x58>
   27180:	2801      	cmp	r0, #1
   27182:	d107      	bne.n	27194 <_scanf_chars+0x48>
   27184:	682b      	ldr	r3, [r5, #0]
   27186:	781a      	ldrb	r2, [r3, #0]
   27188:	6963      	ldr	r3, [r4, #20]
   2718a:	5c9b      	ldrb	r3, [r3, r2]
   2718c:	b953      	cbnz	r3, 271a4 <_scanf_chars+0x58>
   2718e:	2f00      	cmp	r7, #0
   27190:	d031      	beq.n	271f6 <_scanf_chars+0xaa>
   27192:	e022      	b.n	271da <_scanf_chars+0x8e>
   27194:	2802      	cmp	r0, #2
   27196:	d120      	bne.n	271da <_scanf_chars+0x8e>
   27198:	682b      	ldr	r3, [r5, #0]
   2719a:	781b      	ldrb	r3, [r3, #0]
   2719c:	f813 3009 	ldrb.w	r3, [r3, r9]
   271a0:	071b      	lsls	r3, r3, #28
   271a2:	d41a      	bmi.n	271da <_scanf_chars+0x8e>
   271a4:	6823      	ldr	r3, [r4, #0]
   271a6:	06da      	lsls	r2, r3, #27
   271a8:	bf5e      	ittt	pl
   271aa:	682b      	ldrpl	r3, [r5, #0]
   271ac:	781b      	ldrbpl	r3, [r3, #0]
   271ae:	f806 3b01 	strbpl.w	r3, [r6], #1
   271b2:	682a      	ldr	r2, [r5, #0]
   271b4:	686b      	ldr	r3, [r5, #4]
   271b6:	3201      	adds	r2, #1
   271b8:	602a      	str	r2, [r5, #0]
   271ba:	68a2      	ldr	r2, [r4, #8]
   271bc:	3b01      	subs	r3, #1
   271be:	3a01      	subs	r2, #1
   271c0:	606b      	str	r3, [r5, #4]
   271c2:	3701      	adds	r7, #1
   271c4:	60a2      	str	r2, [r4, #8]
   271c6:	b142      	cbz	r2, 271da <_scanf_chars+0x8e>
   271c8:	2b00      	cmp	r3, #0
   271ca:	dcd7      	bgt.n	2717c <_scanf_chars+0x30>
   271cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   271d0:	4629      	mov	r1, r5
   271d2:	4640      	mov	r0, r8
   271d4:	4798      	blx	r3
   271d6:	2800      	cmp	r0, #0
   271d8:	d0d0      	beq.n	2717c <_scanf_chars+0x30>
   271da:	6823      	ldr	r3, [r4, #0]
   271dc:	f013 0310 	ands.w	r3, r3, #16
   271e0:	d105      	bne.n	271ee <_scanf_chars+0xa2>
   271e2:	68e2      	ldr	r2, [r4, #12]
   271e4:	3201      	adds	r2, #1
   271e6:	60e2      	str	r2, [r4, #12]
   271e8:	69a2      	ldr	r2, [r4, #24]
   271ea:	b102      	cbz	r2, 271ee <_scanf_chars+0xa2>
   271ec:	7033      	strb	r3, [r6, #0]
   271ee:	6923      	ldr	r3, [r4, #16]
   271f0:	443b      	add	r3, r7
   271f2:	6123      	str	r3, [r4, #16]
   271f4:	2000      	movs	r0, #0
   271f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   271fa:	bf00      	nop
   271fc:	00033da1 	.word	0x00033da1

00027200 <_scanf_i>:
   27200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27204:	4698      	mov	r8, r3
   27206:	4b76      	ldr	r3, [pc, #472]	; (273e0 <_scanf_i+0x1e0>)
   27208:	460c      	mov	r4, r1
   2720a:	4682      	mov	sl, r0
   2720c:	4616      	mov	r6, r2
   2720e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   27212:	b087      	sub	sp, #28
   27214:	ab03      	add	r3, sp, #12
   27216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   2721a:	4b72      	ldr	r3, [pc, #456]	; (273e4 <_scanf_i+0x1e4>)
   2721c:	69a1      	ldr	r1, [r4, #24]
   2721e:	4a72      	ldr	r2, [pc, #456]	; (273e8 <_scanf_i+0x1e8>)
   27220:	2903      	cmp	r1, #3
   27222:	bf18      	it	ne
   27224:	461a      	movne	r2, r3
   27226:	68a3      	ldr	r3, [r4, #8]
   27228:	9201      	str	r2, [sp, #4]
   2722a:	1e5a      	subs	r2, r3, #1
   2722c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
   27230:	bf88      	it	hi
   27232:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
   27236:	4627      	mov	r7, r4
   27238:	bf82      	ittt	hi
   2723a:	eb03 0905 	addhi.w	r9, r3, r5
   2723e:	f240 135d 	movwhi	r3, #349	; 0x15d
   27242:	60a3      	strhi	r3, [r4, #8]
   27244:	f857 3b1c 	ldr.w	r3, [r7], #28
   27248:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
   2724c:	bf98      	it	ls
   2724e:	f04f 0900 	movls.w	r9, #0
   27252:	6023      	str	r3, [r4, #0]
   27254:	463d      	mov	r5, r7
   27256:	f04f 0b00 	mov.w	fp, #0
   2725a:	6831      	ldr	r1, [r6, #0]
   2725c:	ab03      	add	r3, sp, #12
   2725e:	7809      	ldrb	r1, [r1, #0]
   27260:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
   27264:	2202      	movs	r2, #2
   27266:	f7d8 ff3b 	bl	e0 <memchr>
   2726a:	b328      	cbz	r0, 272b8 <_scanf_i+0xb8>
   2726c:	f1bb 0f01 	cmp.w	fp, #1
   27270:	d159      	bne.n	27326 <_scanf_i+0x126>
   27272:	6862      	ldr	r2, [r4, #4]
   27274:	b92a      	cbnz	r2, 27282 <_scanf_i+0x82>
   27276:	6822      	ldr	r2, [r4, #0]
   27278:	2308      	movs	r3, #8
   2727a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   2727e:	6063      	str	r3, [r4, #4]
   27280:	6022      	str	r2, [r4, #0]
   27282:	6822      	ldr	r2, [r4, #0]
   27284:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
   27288:	6022      	str	r2, [r4, #0]
   2728a:	68a2      	ldr	r2, [r4, #8]
   2728c:	1e51      	subs	r1, r2, #1
   2728e:	60a1      	str	r1, [r4, #8]
   27290:	b192      	cbz	r2, 272b8 <_scanf_i+0xb8>
   27292:	6832      	ldr	r2, [r6, #0]
   27294:	1c51      	adds	r1, r2, #1
   27296:	6031      	str	r1, [r6, #0]
   27298:	7812      	ldrb	r2, [r2, #0]
   2729a:	f805 2b01 	strb.w	r2, [r5], #1
   2729e:	6872      	ldr	r2, [r6, #4]
   272a0:	3a01      	subs	r2, #1
   272a2:	2a00      	cmp	r2, #0
   272a4:	6072      	str	r2, [r6, #4]
   272a6:	dc07      	bgt.n	272b8 <_scanf_i+0xb8>
   272a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
   272ac:	4631      	mov	r1, r6
   272ae:	4650      	mov	r0, sl
   272b0:	4790      	blx	r2
   272b2:	2800      	cmp	r0, #0
   272b4:	f040 8085 	bne.w	273c2 <_scanf_i+0x1c2>
   272b8:	f10b 0b01 	add.w	fp, fp, #1
   272bc:	f1bb 0f03 	cmp.w	fp, #3
   272c0:	d1cb      	bne.n	2725a <_scanf_i+0x5a>
   272c2:	6863      	ldr	r3, [r4, #4]
   272c4:	b90b      	cbnz	r3, 272ca <_scanf_i+0xca>
   272c6:	230a      	movs	r3, #10
   272c8:	6063      	str	r3, [r4, #4]
   272ca:	6863      	ldr	r3, [r4, #4]
   272cc:	4947      	ldr	r1, [pc, #284]	; (273ec <_scanf_i+0x1ec>)
   272ce:	6960      	ldr	r0, [r4, #20]
   272d0:	1ac9      	subs	r1, r1, r3
   272d2:	f007 fccc 	bl	2ec6e <__sccl>
   272d6:	f04f 0b00 	mov.w	fp, #0
   272da:	68a3      	ldr	r3, [r4, #8]
   272dc:	6822      	ldr	r2, [r4, #0]
   272de:	2b00      	cmp	r3, #0
   272e0:	d03d      	beq.n	2735e <_scanf_i+0x15e>
   272e2:	6831      	ldr	r1, [r6, #0]
   272e4:	6960      	ldr	r0, [r4, #20]
   272e6:	f891 c000 	ldrb.w	ip, [r1]
   272ea:	f810 000c 	ldrb.w	r0, [r0, ip]
   272ee:	2800      	cmp	r0, #0
   272f0:	d035      	beq.n	2735e <_scanf_i+0x15e>
   272f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
   272f6:	d124      	bne.n	27342 <_scanf_i+0x142>
   272f8:	0510      	lsls	r0, r2, #20
   272fa:	d522      	bpl.n	27342 <_scanf_i+0x142>
   272fc:	f10b 0b01 	add.w	fp, fp, #1
   27300:	f1b9 0f00 	cmp.w	r9, #0
   27304:	d003      	beq.n	2730e <_scanf_i+0x10e>
   27306:	3301      	adds	r3, #1
   27308:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   2730c:	60a3      	str	r3, [r4, #8]
   2730e:	6873      	ldr	r3, [r6, #4]
   27310:	3b01      	subs	r3, #1
   27312:	2b00      	cmp	r3, #0
   27314:	6073      	str	r3, [r6, #4]
   27316:	dd1b      	ble.n	27350 <_scanf_i+0x150>
   27318:	6833      	ldr	r3, [r6, #0]
   2731a:	3301      	adds	r3, #1
   2731c:	6033      	str	r3, [r6, #0]
   2731e:	68a3      	ldr	r3, [r4, #8]
   27320:	3b01      	subs	r3, #1
   27322:	60a3      	str	r3, [r4, #8]
   27324:	e7d9      	b.n	272da <_scanf_i+0xda>
   27326:	f1bb 0f02 	cmp.w	fp, #2
   2732a:	d1ae      	bne.n	2728a <_scanf_i+0x8a>
   2732c:	6822      	ldr	r2, [r4, #0]
   2732e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
   27332:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   27336:	d1bf      	bne.n	272b8 <_scanf_i+0xb8>
   27338:	2310      	movs	r3, #16
   2733a:	6063      	str	r3, [r4, #4]
   2733c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   27340:	e7a2      	b.n	27288 <_scanf_i+0x88>
   27342:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
   27346:	6022      	str	r2, [r4, #0]
   27348:	780b      	ldrb	r3, [r1, #0]
   2734a:	f805 3b01 	strb.w	r3, [r5], #1
   2734e:	e7de      	b.n	2730e <_scanf_i+0x10e>
   27350:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
   27354:	4631      	mov	r1, r6
   27356:	4650      	mov	r0, sl
   27358:	4798      	blx	r3
   2735a:	2800      	cmp	r0, #0
   2735c:	d0df      	beq.n	2731e <_scanf_i+0x11e>
   2735e:	6823      	ldr	r3, [r4, #0]
   27360:	05db      	lsls	r3, r3, #23
   27362:	d50d      	bpl.n	27380 <_scanf_i+0x180>
   27364:	42bd      	cmp	r5, r7
   27366:	d909      	bls.n	2737c <_scanf_i+0x17c>
   27368:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   2736c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
   27370:	4632      	mov	r2, r6
   27372:	4650      	mov	r0, sl
   27374:	4798      	blx	r3
   27376:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2737a:	464d      	mov	r5, r9
   2737c:	42bd      	cmp	r5, r7
   2737e:	d02d      	beq.n	273dc <_scanf_i+0x1dc>
   27380:	6822      	ldr	r2, [r4, #0]
   27382:	f012 0210 	ands.w	r2, r2, #16
   27386:	d113      	bne.n	273b0 <_scanf_i+0x1b0>
   27388:	702a      	strb	r2, [r5, #0]
   2738a:	6863      	ldr	r3, [r4, #4]
   2738c:	9e01      	ldr	r6, [sp, #4]
   2738e:	4639      	mov	r1, r7
   27390:	4650      	mov	r0, sl
   27392:	47b0      	blx	r6
   27394:	6821      	ldr	r1, [r4, #0]
   27396:	f8d8 3000 	ldr.w	r3, [r8]
   2739a:	f011 0f20 	tst.w	r1, #32
   2739e:	d013      	beq.n	273c8 <_scanf_i+0x1c8>
   273a0:	1d1a      	adds	r2, r3, #4
   273a2:	f8c8 2000 	str.w	r2, [r8]
   273a6:	681b      	ldr	r3, [r3, #0]
   273a8:	6018      	str	r0, [r3, #0]
   273aa:	68e3      	ldr	r3, [r4, #12]
   273ac:	3301      	adds	r3, #1
   273ae:	60e3      	str	r3, [r4, #12]
   273b0:	1bed      	subs	r5, r5, r7
   273b2:	44ab      	add	fp, r5
   273b4:	6925      	ldr	r5, [r4, #16]
   273b6:	445d      	add	r5, fp
   273b8:	6125      	str	r5, [r4, #16]
   273ba:	2000      	movs	r0, #0
   273bc:	b007      	add	sp, #28
   273be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   273c2:	f04f 0b00 	mov.w	fp, #0
   273c6:	e7ca      	b.n	2735e <_scanf_i+0x15e>
   273c8:	1d1a      	adds	r2, r3, #4
   273ca:	f8c8 2000 	str.w	r2, [r8]
   273ce:	681b      	ldr	r3, [r3, #0]
   273d0:	f011 0f01 	tst.w	r1, #1
   273d4:	bf14      	ite	ne
   273d6:	8018      	strhne	r0, [r3, #0]
   273d8:	6018      	streq	r0, [r3, #0]
   273da:	e7e6      	b.n	273aa <_scanf_i+0x1aa>
   273dc:	2001      	movs	r0, #1
   273de:	e7ed      	b.n	273bc <_scanf_i+0x1bc>
   273e0:	0002f6e4 	.word	0x0002f6e4
   273e4:	0002ece3 	.word	0x0002ece3
   273e8:	0002ecdf 	.word	0x0002ecdf
   273ec:	00033fe3 	.word	0x00033fe3

000273f0 <_read_r>:
   273f0:	b538      	push	{r3, r4, r5, lr}
   273f2:	4d07      	ldr	r5, [pc, #28]	; (27410 <_read_r+0x20>)
   273f4:	4604      	mov	r4, r0
   273f6:	4608      	mov	r0, r1
   273f8:	4611      	mov	r1, r2
   273fa:	2200      	movs	r2, #0
   273fc:	602a      	str	r2, [r5, #0]
   273fe:	461a      	mov	r2, r3
   27400:	f002 fced 	bl	29dde <_read>
   27404:	1c43      	adds	r3, r0, #1
   27406:	d102      	bne.n	2740e <_read_r+0x1e>
   27408:	682b      	ldr	r3, [r5, #0]
   2740a:	b103      	cbz	r3, 2740e <_read_r+0x1e>
   2740c:	6023      	str	r3, [r4, #0]
   2740e:	bd38      	pop	{r3, r4, r5, pc}
   27410:	20003954 	.word	0x20003954

00027414 <_strtol_l.constprop.0>:
   27414:	2b01      	cmp	r3, #1
   27416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2741a:	4680      	mov	r8, r0
   2741c:	d001      	beq.n	27422 <_strtol_l.constprop.0+0xe>
   2741e:	2b24      	cmp	r3, #36	; 0x24
   27420:	d906      	bls.n	27430 <_strtol_l.constprop.0+0x1c>
   27422:	f002 fd09 	bl	29e38 <__errno>
   27426:	2316      	movs	r3, #22
   27428:	6003      	str	r3, [r0, #0]
   2742a:	2000      	movs	r0, #0
   2742c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   27430:	4f35      	ldr	r7, [pc, #212]	; (27508 <_strtol_l.constprop.0+0xf4>)
   27432:	460d      	mov	r5, r1
   27434:	4628      	mov	r0, r5
   27436:	f815 4b01 	ldrb.w	r4, [r5], #1
   2743a:	5de6      	ldrb	r6, [r4, r7]
   2743c:	f016 0608 	ands.w	r6, r6, #8
   27440:	d1f8      	bne.n	27434 <_strtol_l.constprop.0+0x20>
   27442:	2c2d      	cmp	r4, #45	; 0x2d
   27444:	d12f      	bne.n	274a6 <_strtol_l.constprop.0+0x92>
   27446:	782c      	ldrb	r4, [r5, #0]
   27448:	2601      	movs	r6, #1
   2744a:	1c85      	adds	r5, r0, #2
   2744c:	2b00      	cmp	r3, #0
   2744e:	d057      	beq.n	27500 <_strtol_l.constprop.0+0xec>
   27450:	2b10      	cmp	r3, #16
   27452:	d109      	bne.n	27468 <_strtol_l.constprop.0+0x54>
   27454:	2c30      	cmp	r4, #48	; 0x30
   27456:	d107      	bne.n	27468 <_strtol_l.constprop.0+0x54>
   27458:	7828      	ldrb	r0, [r5, #0]
   2745a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2745e:	2858      	cmp	r0, #88	; 0x58
   27460:	d149      	bne.n	274f6 <_strtol_l.constprop.0+0xe2>
   27462:	786c      	ldrb	r4, [r5, #1]
   27464:	2310      	movs	r3, #16
   27466:	3502      	adds	r5, #2
   27468:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
   2746c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   27470:	2700      	movs	r7, #0
   27472:	fbbe f9f3 	udiv	r9, lr, r3
   27476:	4638      	mov	r0, r7
   27478:	fb03 ea19 	mls	sl, r3, r9, lr
   2747c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   27480:	f1bc 0f09 	cmp.w	ip, #9
   27484:	d814      	bhi.n	274b0 <_strtol_l.constprop.0+0x9c>
   27486:	4664      	mov	r4, ip
   27488:	42a3      	cmp	r3, r4
   2748a:	dd22      	ble.n	274d2 <_strtol_l.constprop.0+0xbe>
   2748c:	2f00      	cmp	r7, #0
   2748e:	db1d      	blt.n	274cc <_strtol_l.constprop.0+0xb8>
   27490:	4581      	cmp	r9, r0
   27492:	d31b      	bcc.n	274cc <_strtol_l.constprop.0+0xb8>
   27494:	d101      	bne.n	2749a <_strtol_l.constprop.0+0x86>
   27496:	45a2      	cmp	sl, r4
   27498:	db18      	blt.n	274cc <_strtol_l.constprop.0+0xb8>
   2749a:	fb00 4003 	mla	r0, r0, r3, r4
   2749e:	2701      	movs	r7, #1
   274a0:	f815 4b01 	ldrb.w	r4, [r5], #1
   274a4:	e7ea      	b.n	2747c <_strtol_l.constprop.0+0x68>
   274a6:	2c2b      	cmp	r4, #43	; 0x2b
   274a8:	bf04      	itt	eq
   274aa:	782c      	ldrbeq	r4, [r5, #0]
   274ac:	1c85      	addeq	r5, r0, #2
   274ae:	e7cd      	b.n	2744c <_strtol_l.constprop.0+0x38>
   274b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   274b4:	f1bc 0f19 	cmp.w	ip, #25
   274b8:	d801      	bhi.n	274be <_strtol_l.constprop.0+0xaa>
   274ba:	3c37      	subs	r4, #55	; 0x37
   274bc:	e7e4      	b.n	27488 <_strtol_l.constprop.0+0x74>
   274be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   274c2:	f1bc 0f19 	cmp.w	ip, #25
   274c6:	d804      	bhi.n	274d2 <_strtol_l.constprop.0+0xbe>
   274c8:	3c57      	subs	r4, #87	; 0x57
   274ca:	e7dd      	b.n	27488 <_strtol_l.constprop.0+0x74>
   274cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   274d0:	e7e6      	b.n	274a0 <_strtol_l.constprop.0+0x8c>
   274d2:	2f00      	cmp	r7, #0
   274d4:	da07      	bge.n	274e6 <_strtol_l.constprop.0+0xd2>
   274d6:	2322      	movs	r3, #34	; 0x22
   274d8:	f8c8 3000 	str.w	r3, [r8]
   274dc:	4670      	mov	r0, lr
   274de:	2a00      	cmp	r2, #0
   274e0:	d0a4      	beq.n	2742c <_strtol_l.constprop.0+0x18>
   274e2:	1e69      	subs	r1, r5, #1
   274e4:	e005      	b.n	274f2 <_strtol_l.constprop.0+0xde>
   274e6:	b106      	cbz	r6, 274ea <_strtol_l.constprop.0+0xd6>
   274e8:	4240      	negs	r0, r0
   274ea:	2a00      	cmp	r2, #0
   274ec:	d09e      	beq.n	2742c <_strtol_l.constprop.0+0x18>
   274ee:	2f00      	cmp	r7, #0
   274f0:	d1f7      	bne.n	274e2 <_strtol_l.constprop.0+0xce>
   274f2:	6011      	str	r1, [r2, #0]
   274f4:	e79a      	b.n	2742c <_strtol_l.constprop.0+0x18>
   274f6:	2430      	movs	r4, #48	; 0x30
   274f8:	2b00      	cmp	r3, #0
   274fa:	d1b5      	bne.n	27468 <_strtol_l.constprop.0+0x54>
   274fc:	2308      	movs	r3, #8
   274fe:	e7b3      	b.n	27468 <_strtol_l.constprop.0+0x54>
   27500:	2c30      	cmp	r4, #48	; 0x30
   27502:	d0a9      	beq.n	27458 <_strtol_l.constprop.0+0x44>
   27504:	230a      	movs	r3, #10
   27506:	e7af      	b.n	27468 <_strtol_l.constprop.0+0x54>
   27508:	00033da1 	.word	0x00033da1

0002750c <_strtoul_l.constprop.0>:
   2750c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   27510:	4f36      	ldr	r7, [pc, #216]	; (275ec <_strtoul_l.constprop.0+0xe0>)
   27512:	4686      	mov	lr, r0
   27514:	460d      	mov	r5, r1
   27516:	4628      	mov	r0, r5
   27518:	f815 4b01 	ldrb.w	r4, [r5], #1
   2751c:	5de6      	ldrb	r6, [r4, r7]
   2751e:	f016 0608 	ands.w	r6, r6, #8
   27522:	d1f8      	bne.n	27516 <_strtoul_l.constprop.0+0xa>
   27524:	2c2d      	cmp	r4, #45	; 0x2d
   27526:	d12f      	bne.n	27588 <_strtoul_l.constprop.0+0x7c>
   27528:	782c      	ldrb	r4, [r5, #0]
   2752a:	2601      	movs	r6, #1
   2752c:	1c85      	adds	r5, r0, #2
   2752e:	2b00      	cmp	r3, #0
   27530:	d057      	beq.n	275e2 <_strtoul_l.constprop.0+0xd6>
   27532:	2b10      	cmp	r3, #16
   27534:	d109      	bne.n	2754a <_strtoul_l.constprop.0+0x3e>
   27536:	2c30      	cmp	r4, #48	; 0x30
   27538:	d107      	bne.n	2754a <_strtoul_l.constprop.0+0x3e>
   2753a:	7828      	ldrb	r0, [r5, #0]
   2753c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   27540:	2858      	cmp	r0, #88	; 0x58
   27542:	d149      	bne.n	275d8 <_strtoul_l.constprop.0+0xcc>
   27544:	786c      	ldrb	r4, [r5, #1]
   27546:	2310      	movs	r3, #16
   27548:	3502      	adds	r5, #2
   2754a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2754e:	2700      	movs	r7, #0
   27550:	fbb8 f8f3 	udiv	r8, r8, r3
   27554:	fb03 f908 	mul.w	r9, r3, r8
   27558:	ea6f 0909 	mvn.w	r9, r9
   2755c:	4638      	mov	r0, r7
   2755e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
   27562:	f1bc 0f09 	cmp.w	ip, #9
   27566:	d814      	bhi.n	27592 <_strtoul_l.constprop.0+0x86>
   27568:	4664      	mov	r4, ip
   2756a:	42a3      	cmp	r3, r4
   2756c:	dd22      	ble.n	275b4 <_strtoul_l.constprop.0+0xa8>
   2756e:	2f00      	cmp	r7, #0
   27570:	db1d      	blt.n	275ae <_strtoul_l.constprop.0+0xa2>
   27572:	4580      	cmp	r8, r0
   27574:	d31b      	bcc.n	275ae <_strtoul_l.constprop.0+0xa2>
   27576:	d101      	bne.n	2757c <_strtoul_l.constprop.0+0x70>
   27578:	45a1      	cmp	r9, r4
   2757a:	db18      	blt.n	275ae <_strtoul_l.constprop.0+0xa2>
   2757c:	fb00 4003 	mla	r0, r0, r3, r4
   27580:	2701      	movs	r7, #1
   27582:	f815 4b01 	ldrb.w	r4, [r5], #1
   27586:	e7ea      	b.n	2755e <_strtoul_l.constprop.0+0x52>
   27588:	2c2b      	cmp	r4, #43	; 0x2b
   2758a:	bf04      	itt	eq
   2758c:	782c      	ldrbeq	r4, [r5, #0]
   2758e:	1c85      	addeq	r5, r0, #2
   27590:	e7cd      	b.n	2752e <_strtoul_l.constprop.0+0x22>
   27592:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
   27596:	f1bc 0f19 	cmp.w	ip, #25
   2759a:	d801      	bhi.n	275a0 <_strtoul_l.constprop.0+0x94>
   2759c:	3c37      	subs	r4, #55	; 0x37
   2759e:	e7e4      	b.n	2756a <_strtoul_l.constprop.0+0x5e>
   275a0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
   275a4:	f1bc 0f19 	cmp.w	ip, #25
   275a8:	d804      	bhi.n	275b4 <_strtoul_l.constprop.0+0xa8>
   275aa:	3c57      	subs	r4, #87	; 0x57
   275ac:	e7dd      	b.n	2756a <_strtoul_l.constprop.0+0x5e>
   275ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   275b2:	e7e6      	b.n	27582 <_strtoul_l.constprop.0+0x76>
   275b4:	2f00      	cmp	r7, #0
   275b6:	da07      	bge.n	275c8 <_strtoul_l.constprop.0+0xbc>
   275b8:	2322      	movs	r3, #34	; 0x22
   275ba:	f8ce 3000 	str.w	r3, [lr]
   275be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   275c2:	b932      	cbnz	r2, 275d2 <_strtoul_l.constprop.0+0xc6>
   275c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   275c8:	b106      	cbz	r6, 275cc <_strtoul_l.constprop.0+0xc0>
   275ca:	4240      	negs	r0, r0
   275cc:	2a00      	cmp	r2, #0
   275ce:	d0f9      	beq.n	275c4 <_strtoul_l.constprop.0+0xb8>
   275d0:	b107      	cbz	r7, 275d4 <_strtoul_l.constprop.0+0xc8>
   275d2:	1e69      	subs	r1, r5, #1
   275d4:	6011      	str	r1, [r2, #0]
   275d6:	e7f5      	b.n	275c4 <_strtoul_l.constprop.0+0xb8>
   275d8:	2430      	movs	r4, #48	; 0x30
   275da:	2b00      	cmp	r3, #0
   275dc:	d1b5      	bne.n	2754a <_strtoul_l.constprop.0+0x3e>
   275de:	2308      	movs	r3, #8
   275e0:	e7b3      	b.n	2754a <_strtoul_l.constprop.0+0x3e>
   275e2:	2c30      	cmp	r4, #48	; 0x30
   275e4:	d0a9      	beq.n	2753a <_strtoul_l.constprop.0+0x2e>
   275e6:	230a      	movs	r3, #10
   275e8:	e7af      	b.n	2754a <_strtoul_l.constprop.0+0x3e>
   275ea:	bf00      	nop
   275ec:	00033da1 	.word	0x00033da1

000275f0 <__assert_func>:
   275f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   275f2:	4614      	mov	r4, r2
   275f4:	461a      	mov	r2, r3
   275f6:	4b09      	ldr	r3, [pc, #36]	; (2761c <__assert_func+0x2c>)
   275f8:	681b      	ldr	r3, [r3, #0]
   275fa:	4605      	mov	r5, r0
   275fc:	68d8      	ldr	r0, [r3, #12]
   275fe:	b14c      	cbz	r4, 27614 <__assert_func+0x24>
   27600:	4b07      	ldr	r3, [pc, #28]	; (27620 <__assert_func+0x30>)
   27602:	9100      	str	r1, [sp, #0]
   27604:	e9cd 3401 	strd	r3, r4, [sp, #4]
   27608:	4906      	ldr	r1, [pc, #24]	; (27624 <__assert_func+0x34>)
   2760a:	462b      	mov	r3, r5
   2760c:	f000 f98c 	bl	27928 <fiprintf>
   27610:	f007 fc5e 	bl	2eed0 <abort>
   27614:	4b04      	ldr	r3, [pc, #16]	; (27628 <__assert_func+0x38>)
   27616:	461c      	mov	r4, r3
   27618:	e7f3      	b.n	27602 <__assert_func+0x12>
   2761a:	bf00      	nop
   2761c:	20000858 	.word	0x20000858
   27620:	00033fe5 	.word	0x00033fe5
   27624:	00033ff2 	.word	0x00033ff2
   27628:	000318d9 	.word	0x000318d9

0002762c <__sflush_r>:
   2762c:	898a      	ldrh	r2, [r1, #12]
   2762e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27630:	4605      	mov	r5, r0
   27632:	0710      	lsls	r0, r2, #28
   27634:	460c      	mov	r4, r1
   27636:	d457      	bmi.n	276e8 <__sflush_r+0xbc>
   27638:	684b      	ldr	r3, [r1, #4]
   2763a:	2b00      	cmp	r3, #0
   2763c:	dc04      	bgt.n	27648 <__sflush_r+0x1c>
   2763e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   27640:	2b00      	cmp	r3, #0
   27642:	dc01      	bgt.n	27648 <__sflush_r+0x1c>
   27644:	2000      	movs	r0, #0
   27646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27648:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   2764a:	2e00      	cmp	r6, #0
   2764c:	d0fa      	beq.n	27644 <__sflush_r+0x18>
   2764e:	2300      	movs	r3, #0
   27650:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   27654:	682f      	ldr	r7, [r5, #0]
   27656:	602b      	str	r3, [r5, #0]
   27658:	d032      	beq.n	276c0 <__sflush_r+0x94>
   2765a:	6d60      	ldr	r0, [r4, #84]	; 0x54
   2765c:	89a3      	ldrh	r3, [r4, #12]
   2765e:	075a      	lsls	r2, r3, #29
   27660:	d505      	bpl.n	2766e <__sflush_r+0x42>
   27662:	6863      	ldr	r3, [r4, #4]
   27664:	1ac0      	subs	r0, r0, r3
   27666:	6b63      	ldr	r3, [r4, #52]	; 0x34
   27668:	b10b      	cbz	r3, 2766e <__sflush_r+0x42>
   2766a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2766c:	1ac0      	subs	r0, r0, r3
   2766e:	2300      	movs	r3, #0
   27670:	4602      	mov	r2, r0
   27672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
   27674:	6a21      	ldr	r1, [r4, #32]
   27676:	4628      	mov	r0, r5
   27678:	47b0      	blx	r6
   2767a:	1c43      	adds	r3, r0, #1
   2767c:	89a3      	ldrh	r3, [r4, #12]
   2767e:	d106      	bne.n	2768e <__sflush_r+0x62>
   27680:	6829      	ldr	r1, [r5, #0]
   27682:	291d      	cmp	r1, #29
   27684:	d82c      	bhi.n	276e0 <__sflush_r+0xb4>
   27686:	4a29      	ldr	r2, [pc, #164]	; (2772c <__sflush_r+0x100>)
   27688:	40ca      	lsrs	r2, r1
   2768a:	07d6      	lsls	r6, r2, #31
   2768c:	d528      	bpl.n	276e0 <__sflush_r+0xb4>
   2768e:	2200      	movs	r2, #0
   27690:	6062      	str	r2, [r4, #4]
   27692:	04d9      	lsls	r1, r3, #19
   27694:	6922      	ldr	r2, [r4, #16]
   27696:	6022      	str	r2, [r4, #0]
   27698:	d504      	bpl.n	276a4 <__sflush_r+0x78>
   2769a:	1c42      	adds	r2, r0, #1
   2769c:	d101      	bne.n	276a2 <__sflush_r+0x76>
   2769e:	682b      	ldr	r3, [r5, #0]
   276a0:	b903      	cbnz	r3, 276a4 <__sflush_r+0x78>
   276a2:	6560      	str	r0, [r4, #84]	; 0x54
   276a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   276a6:	602f      	str	r7, [r5, #0]
   276a8:	2900      	cmp	r1, #0
   276aa:	d0cb      	beq.n	27644 <__sflush_r+0x18>
   276ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
   276b0:	4299      	cmp	r1, r3
   276b2:	d002      	beq.n	276ba <__sflush_r+0x8e>
   276b4:	4628      	mov	r0, r5
   276b6:	f7fe fb1d 	bl	25cf4 <_free_r>
   276ba:	2000      	movs	r0, #0
   276bc:	6360      	str	r0, [r4, #52]	; 0x34
   276be:	e7c2      	b.n	27646 <__sflush_r+0x1a>
   276c0:	6a21      	ldr	r1, [r4, #32]
   276c2:	2301      	movs	r3, #1
   276c4:	4628      	mov	r0, r5
   276c6:	47b0      	blx	r6
   276c8:	1c41      	adds	r1, r0, #1
   276ca:	d1c7      	bne.n	2765c <__sflush_r+0x30>
   276cc:	682b      	ldr	r3, [r5, #0]
   276ce:	2b00      	cmp	r3, #0
   276d0:	d0c4      	beq.n	2765c <__sflush_r+0x30>
   276d2:	2b1d      	cmp	r3, #29
   276d4:	d001      	beq.n	276da <__sflush_r+0xae>
   276d6:	2b16      	cmp	r3, #22
   276d8:	d101      	bne.n	276de <__sflush_r+0xb2>
   276da:	602f      	str	r7, [r5, #0]
   276dc:	e7b2      	b.n	27644 <__sflush_r+0x18>
   276de:	89a3      	ldrh	r3, [r4, #12]
   276e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   276e4:	81a3      	strh	r3, [r4, #12]
   276e6:	e7ae      	b.n	27646 <__sflush_r+0x1a>
   276e8:	690f      	ldr	r7, [r1, #16]
   276ea:	2f00      	cmp	r7, #0
   276ec:	d0aa      	beq.n	27644 <__sflush_r+0x18>
   276ee:	0793      	lsls	r3, r2, #30
   276f0:	680e      	ldr	r6, [r1, #0]
   276f2:	bf08      	it	eq
   276f4:	694b      	ldreq	r3, [r1, #20]
   276f6:	600f      	str	r7, [r1, #0]
   276f8:	bf18      	it	ne
   276fa:	2300      	movne	r3, #0
   276fc:	1bf6      	subs	r6, r6, r7
   276fe:	608b      	str	r3, [r1, #8]
   27700:	2e00      	cmp	r6, #0
   27702:	dd9f      	ble.n	27644 <__sflush_r+0x18>
   27704:	6a21      	ldr	r1, [r4, #32]
   27706:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
   2770a:	4633      	mov	r3, r6
   2770c:	463a      	mov	r2, r7
   2770e:	4628      	mov	r0, r5
   27710:	47e0      	blx	ip
   27712:	2800      	cmp	r0, #0
   27714:	dc06      	bgt.n	27724 <__sflush_r+0xf8>
   27716:	89a3      	ldrh	r3, [r4, #12]
   27718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2771c:	81a3      	strh	r3, [r4, #12]
   2771e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27722:	e790      	b.n	27646 <__sflush_r+0x1a>
   27724:	4407      	add	r7, r0
   27726:	1a36      	subs	r6, r6, r0
   27728:	e7ea      	b.n	27700 <__sflush_r+0xd4>
   2772a:	bf00      	nop
   2772c:	20400001 	.word	0x20400001

00027730 <_fflush_r>:
   27730:	b538      	push	{r3, r4, r5, lr}
   27732:	690b      	ldr	r3, [r1, #16]
   27734:	4605      	mov	r5, r0
   27736:	460c      	mov	r4, r1
   27738:	b913      	cbnz	r3, 27740 <_fflush_r+0x10>
   2773a:	2500      	movs	r5, #0
   2773c:	4628      	mov	r0, r5
   2773e:	bd38      	pop	{r3, r4, r5, pc}
   27740:	b118      	cbz	r0, 2774a <_fflush_r+0x1a>
   27742:	6983      	ldr	r3, [r0, #24]
   27744:	b90b      	cbnz	r3, 2774a <_fflush_r+0x1a>
   27746:	f000 f871 	bl	2782c <__sinit>
   2774a:	4b14      	ldr	r3, [pc, #80]	; (2779c <_fflush_r+0x6c>)
   2774c:	429c      	cmp	r4, r3
   2774e:	d11b      	bne.n	27788 <_fflush_r+0x58>
   27750:	686c      	ldr	r4, [r5, #4]
   27752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27756:	2b00      	cmp	r3, #0
   27758:	d0ef      	beq.n	2773a <_fflush_r+0xa>
   2775a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   2775c:	07d0      	lsls	r0, r2, #31
   2775e:	d404      	bmi.n	2776a <_fflush_r+0x3a>
   27760:	0599      	lsls	r1, r3, #22
   27762:	d402      	bmi.n	2776a <_fflush_r+0x3a>
   27764:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27766:	f002 fb5f 	bl	29e28 <__retarget_lock_acquire_recursive>
   2776a:	4628      	mov	r0, r5
   2776c:	4621      	mov	r1, r4
   2776e:	f7ff ff5d 	bl	2762c <__sflush_r>
   27772:	6e63      	ldr	r3, [r4, #100]	; 0x64
   27774:	07da      	lsls	r2, r3, #31
   27776:	4605      	mov	r5, r0
   27778:	d4e0      	bmi.n	2773c <_fflush_r+0xc>
   2777a:	89a3      	ldrh	r3, [r4, #12]
   2777c:	059b      	lsls	r3, r3, #22
   2777e:	d4dd      	bmi.n	2773c <_fflush_r+0xc>
   27780:	6da0      	ldr	r0, [r4, #88]	; 0x58
   27782:	f002 fb57 	bl	29e34 <__retarget_lock_release_recursive>
   27786:	e7d9      	b.n	2773c <_fflush_r+0xc>
   27788:	4b05      	ldr	r3, [pc, #20]	; (277a0 <_fflush_r+0x70>)
   2778a:	429c      	cmp	r4, r3
   2778c:	d101      	bne.n	27792 <_fflush_r+0x62>
   2778e:	68ac      	ldr	r4, [r5, #8]
   27790:	e7df      	b.n	27752 <_fflush_r+0x22>
   27792:	4b04      	ldr	r3, [pc, #16]	; (277a4 <_fflush_r+0x74>)
   27794:	429c      	cmp	r4, r3
   27796:	bf08      	it	eq
   27798:	68ec      	ldreq	r4, [r5, #12]
   2779a:	e7da      	b.n	27752 <_fflush_r+0x22>
   2779c:	00031398 	.word	0x00031398
   277a0:	000313b8 	.word	0x000313b8
   277a4:	00031378 	.word	0x00031378

000277a8 <std>:
   277a8:	2300      	movs	r3, #0
   277aa:	b510      	push	{r4, lr}
   277ac:	4604      	mov	r4, r0
   277ae:	e9c0 3300 	strd	r3, r3, [r0]
   277b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   277b6:	6083      	str	r3, [r0, #8]
   277b8:	8181      	strh	r1, [r0, #12]
   277ba:	6643      	str	r3, [r0, #100]	; 0x64
   277bc:	81c2      	strh	r2, [r0, #14]
   277be:	6183      	str	r3, [r0, #24]
   277c0:	4619      	mov	r1, r3
   277c2:	2208      	movs	r2, #8
   277c4:	305c      	adds	r0, #92	; 0x5c
   277c6:	f006 feef 	bl	2e5a8 <memset>
   277ca:	4b05      	ldr	r3, [pc, #20]	; (277e0 <std+0x38>)
   277cc:	6263      	str	r3, [r4, #36]	; 0x24
   277ce:	4b05      	ldr	r3, [pc, #20]	; (277e4 <std+0x3c>)
   277d0:	62a3      	str	r3, [r4, #40]	; 0x28
   277d2:	4b05      	ldr	r3, [pc, #20]	; (277e8 <std+0x40>)
   277d4:	62e3      	str	r3, [r4, #44]	; 0x2c
   277d6:	4b05      	ldr	r3, [pc, #20]	; (277ec <std+0x44>)
   277d8:	6224      	str	r4, [r4, #32]
   277da:	6323      	str	r3, [r4, #48]	; 0x30
   277dc:	bd10      	pop	{r4, pc}
   277de:	bf00      	nop
   277e0:	0002e803 	.word	0x0002e803
   277e4:	0002e829 	.word	0x0002e829
   277e8:	0002e861 	.word	0x0002e861
   277ec:	0002e885 	.word	0x0002e885

000277f0 <_cleanup_r>:
   277f0:	4901      	ldr	r1, [pc, #4]	; (277f8 <_cleanup_r+0x8>)
   277f2:	f007 bac8 	b.w	2ed86 <_fwalk_reent>
   277f6:	bf00      	nop
   277f8:	00027731 	.word	0x00027731

000277fc <__sfp_lock_acquire>:
   277fc:	4801      	ldr	r0, [pc, #4]	; (27804 <__sfp_lock_acquire+0x8>)
   277fe:	f002 bb13 	b.w	29e28 <__retarget_lock_acquire_recursive>
   27802:	bf00      	nop
   27804:	20000c88 	.word	0x20000c88

00027808 <__sfp_lock_release>:
   27808:	4801      	ldr	r0, [pc, #4]	; (27810 <__sfp_lock_release+0x8>)
   2780a:	f002 bb13 	b.w	29e34 <__retarget_lock_release_recursive>
   2780e:	bf00      	nop
   27810:	20000c88 	.word	0x20000c88

00027814 <__sinit_lock_acquire>:
   27814:	4801      	ldr	r0, [pc, #4]	; (2781c <__sinit_lock_acquire+0x8>)
   27816:	f002 bb07 	b.w	29e28 <__retarget_lock_acquire_recursive>
   2781a:	bf00      	nop
   2781c:	20000c9c 	.word	0x20000c9c

00027820 <__sinit_lock_release>:
   27820:	4801      	ldr	r0, [pc, #4]	; (27828 <__sinit_lock_release+0x8>)
   27822:	f002 bb07 	b.w	29e34 <__retarget_lock_release_recursive>
   27826:	bf00      	nop
   27828:	20000c9c 	.word	0x20000c9c

0002782c <__sinit>:
   2782c:	b510      	push	{r4, lr}
   2782e:	4604      	mov	r4, r0
   27830:	f7ff fff0 	bl	27814 <__sinit_lock_acquire>
   27834:	69a3      	ldr	r3, [r4, #24]
   27836:	b11b      	cbz	r3, 27840 <__sinit+0x14>
   27838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2783c:	f7ff bff0 	b.w	27820 <__sinit_lock_release>
   27840:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
   27844:	6523      	str	r3, [r4, #80]	; 0x50
   27846:	4b13      	ldr	r3, [pc, #76]	; (27894 <__sinit+0x68>)
   27848:	4a13      	ldr	r2, [pc, #76]	; (27898 <__sinit+0x6c>)
   2784a:	681b      	ldr	r3, [r3, #0]
   2784c:	62a2      	str	r2, [r4, #40]	; 0x28
   2784e:	42a3      	cmp	r3, r4
   27850:	bf04      	itt	eq
   27852:	2301      	moveq	r3, #1
   27854:	61a3      	streq	r3, [r4, #24]
   27856:	4620      	mov	r0, r4
   27858:	f000 f820 	bl	2789c <__sfp>
   2785c:	6060      	str	r0, [r4, #4]
   2785e:	4620      	mov	r0, r4
   27860:	f000 f81c 	bl	2789c <__sfp>
   27864:	60a0      	str	r0, [r4, #8]
   27866:	4620      	mov	r0, r4
   27868:	f000 f818 	bl	2789c <__sfp>
   2786c:	2200      	movs	r2, #0
   2786e:	60e0      	str	r0, [r4, #12]
   27870:	2104      	movs	r1, #4
   27872:	6860      	ldr	r0, [r4, #4]
   27874:	f7ff ff98 	bl	277a8 <std>
   27878:	68a0      	ldr	r0, [r4, #8]
   2787a:	2201      	movs	r2, #1
   2787c:	2109      	movs	r1, #9
   2787e:	f7ff ff93 	bl	277a8 <std>
   27882:	68e0      	ldr	r0, [r4, #12]
   27884:	2202      	movs	r2, #2
   27886:	2112      	movs	r1, #18
   27888:	f7ff ff8e 	bl	277a8 <std>
   2788c:	2301      	movs	r3, #1
   2788e:	61a3      	str	r3, [r4, #24]
   27890:	e7d2      	b.n	27838 <__sinit+0xc>
   27892:	bf00      	nop
   27894:	00031368 	.word	0x00031368
   27898:	000277f1 	.word	0x000277f1

0002789c <__sfp>:
   2789c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2789e:	4607      	mov	r7, r0
   278a0:	f7ff ffac 	bl	277fc <__sfp_lock_acquire>
   278a4:	4b1e      	ldr	r3, [pc, #120]	; (27920 <__sfp+0x84>)
   278a6:	681e      	ldr	r6, [r3, #0]
   278a8:	69b3      	ldr	r3, [r6, #24]
   278aa:	b913      	cbnz	r3, 278b2 <__sfp+0x16>
   278ac:	4630      	mov	r0, r6
   278ae:	f7ff ffbd 	bl	2782c <__sinit>
   278b2:	3648      	adds	r6, #72	; 0x48
   278b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
   278b8:	3b01      	subs	r3, #1
   278ba:	d503      	bpl.n	278c4 <__sfp+0x28>
   278bc:	6833      	ldr	r3, [r6, #0]
   278be:	b30b      	cbz	r3, 27904 <__sfp+0x68>
   278c0:	6836      	ldr	r6, [r6, #0]
   278c2:	e7f7      	b.n	278b4 <__sfp+0x18>
   278c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
   278c8:	b9d5      	cbnz	r5, 27900 <__sfp+0x64>
   278ca:	4b16      	ldr	r3, [pc, #88]	; (27924 <__sfp+0x88>)
   278cc:	60e3      	str	r3, [r4, #12]
   278ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
   278d2:	6665      	str	r5, [r4, #100]	; 0x64
   278d4:	f002 fa9e 	bl	29e14 <__retarget_lock_init_recursive>
   278d8:	f7ff ff96 	bl	27808 <__sfp_lock_release>
   278dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
   278e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
   278e4:	6025      	str	r5, [r4, #0]
   278e6:	61a5      	str	r5, [r4, #24]
   278e8:	2208      	movs	r2, #8
   278ea:	4629      	mov	r1, r5
   278ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
   278f0:	f006 fe5a 	bl	2e5a8 <memset>
   278f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
   278f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
   278fc:	4620      	mov	r0, r4
   278fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27900:	3468      	adds	r4, #104	; 0x68
   27902:	e7d9      	b.n	278b8 <__sfp+0x1c>
   27904:	2104      	movs	r1, #4
   27906:	4638      	mov	r0, r7
   27908:	f007 fa27 	bl	2ed5a <__sfmoreglue>
   2790c:	4604      	mov	r4, r0
   2790e:	6030      	str	r0, [r6, #0]
   27910:	2800      	cmp	r0, #0
   27912:	d1d5      	bne.n	278c0 <__sfp+0x24>
   27914:	f7ff ff78 	bl	27808 <__sfp_lock_release>
   27918:	230c      	movs	r3, #12
   2791a:	603b      	str	r3, [r7, #0]
   2791c:	e7ee      	b.n	278fc <__sfp+0x60>
   2791e:	bf00      	nop
   27920:	00031368 	.word	0x00031368
   27924:	ffff0001 	.word	0xffff0001

00027928 <fiprintf>:
   27928:	b40e      	push	{r1, r2, r3}
   2792a:	b503      	push	{r0, r1, lr}
   2792c:	4601      	mov	r1, r0
   2792e:	ab03      	add	r3, sp, #12
   27930:	4805      	ldr	r0, [pc, #20]	; (27948 <fiprintf+0x20>)
   27932:	f853 2b04 	ldr.w	r2, [r3], #4
   27936:	6800      	ldr	r0, [r0, #0]
   27938:	9301      	str	r3, [sp, #4]
   2793a:	f000 f807 	bl	2794c <_vfiprintf_r>
   2793e:	b002      	add	sp, #8
   27940:	f85d eb04 	ldr.w	lr, [sp], #4
   27944:	b003      	add	sp, #12
   27946:	4770      	bx	lr
   27948:	20000858 	.word	0x20000858

0002794c <_vfiprintf_r>:
   2794c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27950:	460d      	mov	r5, r1
   27952:	b09d      	sub	sp, #116	; 0x74
   27954:	4614      	mov	r4, r2
   27956:	4698      	mov	r8, r3
   27958:	4606      	mov	r6, r0
   2795a:	b118      	cbz	r0, 27964 <_vfiprintf_r+0x18>
   2795c:	6983      	ldr	r3, [r0, #24]
   2795e:	b90b      	cbnz	r3, 27964 <_vfiprintf_r+0x18>
   27960:	f7ff ff64 	bl	2782c <__sinit>
   27964:	4b89      	ldr	r3, [pc, #548]	; (27b8c <_vfiprintf_r+0x240>)
   27966:	429d      	cmp	r5, r3
   27968:	d11b      	bne.n	279a2 <_vfiprintf_r+0x56>
   2796a:	6875      	ldr	r5, [r6, #4]
   2796c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   2796e:	07d9      	lsls	r1, r3, #31
   27970:	d405      	bmi.n	2797e <_vfiprintf_r+0x32>
   27972:	89ab      	ldrh	r3, [r5, #12]
   27974:	059a      	lsls	r2, r3, #22
   27976:	d402      	bmi.n	2797e <_vfiprintf_r+0x32>
   27978:	6da8      	ldr	r0, [r5, #88]	; 0x58
   2797a:	f002 fa55 	bl	29e28 <__retarget_lock_acquire_recursive>
   2797e:	89ab      	ldrh	r3, [r5, #12]
   27980:	071b      	lsls	r3, r3, #28
   27982:	d501      	bpl.n	27988 <_vfiprintf_r+0x3c>
   27984:	692b      	ldr	r3, [r5, #16]
   27986:	b9eb      	cbnz	r3, 279c4 <_vfiprintf_r+0x78>
   27988:	4629      	mov	r1, r5
   2798a:	4630      	mov	r0, r6
   2798c:	f000 f960 	bl	27c50 <__swsetup_r>
   27990:	b1c0      	cbz	r0, 279c4 <_vfiprintf_r+0x78>
   27992:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   27994:	07dc      	lsls	r4, r3, #31
   27996:	d50e      	bpl.n	279b6 <_vfiprintf_r+0x6a>
   27998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2799c:	b01d      	add	sp, #116	; 0x74
   2799e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   279a2:	4b7b      	ldr	r3, [pc, #492]	; (27b90 <_vfiprintf_r+0x244>)
   279a4:	429d      	cmp	r5, r3
   279a6:	d101      	bne.n	279ac <_vfiprintf_r+0x60>
   279a8:	68b5      	ldr	r5, [r6, #8]
   279aa:	e7df      	b.n	2796c <_vfiprintf_r+0x20>
   279ac:	4b79      	ldr	r3, [pc, #484]	; (27b94 <_vfiprintf_r+0x248>)
   279ae:	429d      	cmp	r5, r3
   279b0:	bf08      	it	eq
   279b2:	68f5      	ldreq	r5, [r6, #12]
   279b4:	e7da      	b.n	2796c <_vfiprintf_r+0x20>
   279b6:	89ab      	ldrh	r3, [r5, #12]
   279b8:	0598      	lsls	r0, r3, #22
   279ba:	d4ed      	bmi.n	27998 <_vfiprintf_r+0x4c>
   279bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   279be:	f002 fa39 	bl	29e34 <__retarget_lock_release_recursive>
   279c2:	e7e9      	b.n	27998 <_vfiprintf_r+0x4c>
   279c4:	2300      	movs	r3, #0
   279c6:	9309      	str	r3, [sp, #36]	; 0x24
   279c8:	2320      	movs	r3, #32
   279ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   279ce:	f8cd 800c 	str.w	r8, [sp, #12]
   279d2:	2330      	movs	r3, #48	; 0x30
   279d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 27b98 <_vfiprintf_r+0x24c>
   279d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   279dc:	f04f 0901 	mov.w	r9, #1
   279e0:	4623      	mov	r3, r4
   279e2:	469a      	mov	sl, r3
   279e4:	f813 2b01 	ldrb.w	r2, [r3], #1
   279e8:	b10a      	cbz	r2, 279ee <_vfiprintf_r+0xa2>
   279ea:	2a25      	cmp	r2, #37	; 0x25
   279ec:	d1f9      	bne.n	279e2 <_vfiprintf_r+0x96>
   279ee:	ebba 0b04 	subs.w	fp, sl, r4
   279f2:	d00b      	beq.n	27a0c <_vfiprintf_r+0xc0>
   279f4:	465b      	mov	r3, fp
   279f6:	4622      	mov	r2, r4
   279f8:	4629      	mov	r1, r5
   279fa:	4630      	mov	r0, r6
   279fc:	f007 fa49 	bl	2ee92 <__sfputs_r>
   27a00:	3001      	adds	r0, #1
   27a02:	f000 80aa 	beq.w	27b5a <_vfiprintf_r+0x20e>
   27a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
   27a08:	445a      	add	r2, fp
   27a0a:	9209      	str	r2, [sp, #36]	; 0x24
   27a0c:	f89a 3000 	ldrb.w	r3, [sl]
   27a10:	2b00      	cmp	r3, #0
   27a12:	f000 80a2 	beq.w	27b5a <_vfiprintf_r+0x20e>
   27a16:	2300      	movs	r3, #0
   27a18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
   27a20:	f10a 0a01 	add.w	sl, sl, #1
   27a24:	9304      	str	r3, [sp, #16]
   27a26:	9307      	str	r3, [sp, #28]
   27a28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   27a2c:	931a      	str	r3, [sp, #104]	; 0x68
   27a2e:	4654      	mov	r4, sl
   27a30:	2205      	movs	r2, #5
   27a32:	f814 1b01 	ldrb.w	r1, [r4], #1
   27a36:	4858      	ldr	r0, [pc, #352]	; (27b98 <_vfiprintf_r+0x24c>)
   27a38:	f7d8 fb52 	bl	e0 <memchr>
   27a3c:	9a04      	ldr	r2, [sp, #16]
   27a3e:	b9d8      	cbnz	r0, 27a78 <_vfiprintf_r+0x12c>
   27a40:	06d1      	lsls	r1, r2, #27
   27a42:	bf44      	itt	mi
   27a44:	2320      	movmi	r3, #32
   27a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   27a4a:	0713      	lsls	r3, r2, #28
   27a4c:	bf44      	itt	mi
   27a4e:	232b      	movmi	r3, #43	; 0x2b
   27a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   27a54:	f89a 3000 	ldrb.w	r3, [sl]
   27a58:	2b2a      	cmp	r3, #42	; 0x2a
   27a5a:	d015      	beq.n	27a88 <_vfiprintf_r+0x13c>
   27a5c:	9a07      	ldr	r2, [sp, #28]
   27a5e:	4654      	mov	r4, sl
   27a60:	2000      	movs	r0, #0
   27a62:	f04f 0c0a 	mov.w	ip, #10
   27a66:	4621      	mov	r1, r4
   27a68:	f811 3b01 	ldrb.w	r3, [r1], #1
   27a6c:	3b30      	subs	r3, #48	; 0x30
   27a6e:	2b09      	cmp	r3, #9
   27a70:	d94e      	bls.n	27b10 <_vfiprintf_r+0x1c4>
   27a72:	b1b0      	cbz	r0, 27aa2 <_vfiprintf_r+0x156>
   27a74:	9207      	str	r2, [sp, #28]
   27a76:	e014      	b.n	27aa2 <_vfiprintf_r+0x156>
   27a78:	eba0 0308 	sub.w	r3, r0, r8
   27a7c:	fa09 f303 	lsl.w	r3, r9, r3
   27a80:	4313      	orrs	r3, r2
   27a82:	9304      	str	r3, [sp, #16]
   27a84:	46a2      	mov	sl, r4
   27a86:	e7d2      	b.n	27a2e <_vfiprintf_r+0xe2>
   27a88:	9b03      	ldr	r3, [sp, #12]
   27a8a:	1d19      	adds	r1, r3, #4
   27a8c:	681b      	ldr	r3, [r3, #0]
   27a8e:	9103      	str	r1, [sp, #12]
   27a90:	2b00      	cmp	r3, #0
   27a92:	bfbb      	ittet	lt
   27a94:	425b      	neglt	r3, r3
   27a96:	f042 0202 	orrlt.w	r2, r2, #2
   27a9a:	9307      	strge	r3, [sp, #28]
   27a9c:	9307      	strlt	r3, [sp, #28]
   27a9e:	bfb8      	it	lt
   27aa0:	9204      	strlt	r2, [sp, #16]
   27aa2:	7823      	ldrb	r3, [r4, #0]
   27aa4:	2b2e      	cmp	r3, #46	; 0x2e
   27aa6:	d10c      	bne.n	27ac2 <_vfiprintf_r+0x176>
   27aa8:	7863      	ldrb	r3, [r4, #1]
   27aaa:	2b2a      	cmp	r3, #42	; 0x2a
   27aac:	d135      	bne.n	27b1a <_vfiprintf_r+0x1ce>
   27aae:	9b03      	ldr	r3, [sp, #12]
   27ab0:	1d1a      	adds	r2, r3, #4
   27ab2:	681b      	ldr	r3, [r3, #0]
   27ab4:	9203      	str	r2, [sp, #12]
   27ab6:	2b00      	cmp	r3, #0
   27ab8:	bfb8      	it	lt
   27aba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
   27abe:	3402      	adds	r4, #2
   27ac0:	9305      	str	r3, [sp, #20]
   27ac2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 27b9c <_vfiprintf_r+0x250>
   27ac6:	7821      	ldrb	r1, [r4, #0]
   27ac8:	2203      	movs	r2, #3
   27aca:	4650      	mov	r0, sl
   27acc:	f7d8 fb08 	bl	e0 <memchr>
   27ad0:	b140      	cbz	r0, 27ae4 <_vfiprintf_r+0x198>
   27ad2:	2340      	movs	r3, #64	; 0x40
   27ad4:	eba0 000a 	sub.w	r0, r0, sl
   27ad8:	fa03 f000 	lsl.w	r0, r3, r0
   27adc:	9b04      	ldr	r3, [sp, #16]
   27ade:	4303      	orrs	r3, r0
   27ae0:	3401      	adds	r4, #1
   27ae2:	9304      	str	r3, [sp, #16]
   27ae4:	f814 1b01 	ldrb.w	r1, [r4], #1
   27ae8:	482d      	ldr	r0, [pc, #180]	; (27ba0 <_vfiprintf_r+0x254>)
   27aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   27aee:	2206      	movs	r2, #6
   27af0:	f7d8 faf6 	bl	e0 <memchr>
   27af4:	2800      	cmp	r0, #0
   27af6:	d03f      	beq.n	27b78 <_vfiprintf_r+0x22c>
   27af8:	4b2a      	ldr	r3, [pc, #168]	; (27ba4 <_vfiprintf_r+0x258>)
   27afa:	bb1b      	cbnz	r3, 27b44 <_vfiprintf_r+0x1f8>
   27afc:	9b03      	ldr	r3, [sp, #12]
   27afe:	3307      	adds	r3, #7
   27b00:	f023 0307 	bic.w	r3, r3, #7
   27b04:	3308      	adds	r3, #8
   27b06:	9303      	str	r3, [sp, #12]
   27b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
   27b0a:	443b      	add	r3, r7
   27b0c:	9309      	str	r3, [sp, #36]	; 0x24
   27b0e:	e767      	b.n	279e0 <_vfiprintf_r+0x94>
   27b10:	fb0c 3202 	mla	r2, ip, r2, r3
   27b14:	460c      	mov	r4, r1
   27b16:	2001      	movs	r0, #1
   27b18:	e7a5      	b.n	27a66 <_vfiprintf_r+0x11a>
   27b1a:	2300      	movs	r3, #0
   27b1c:	3401      	adds	r4, #1
   27b1e:	9305      	str	r3, [sp, #20]
   27b20:	4619      	mov	r1, r3
   27b22:	f04f 0c0a 	mov.w	ip, #10
   27b26:	4620      	mov	r0, r4
   27b28:	f810 2b01 	ldrb.w	r2, [r0], #1
   27b2c:	3a30      	subs	r2, #48	; 0x30
   27b2e:	2a09      	cmp	r2, #9
   27b30:	d903      	bls.n	27b3a <_vfiprintf_r+0x1ee>
   27b32:	2b00      	cmp	r3, #0
   27b34:	d0c5      	beq.n	27ac2 <_vfiprintf_r+0x176>
   27b36:	9105      	str	r1, [sp, #20]
   27b38:	e7c3      	b.n	27ac2 <_vfiprintf_r+0x176>
   27b3a:	fb0c 2101 	mla	r1, ip, r1, r2
   27b3e:	4604      	mov	r4, r0
   27b40:	2301      	movs	r3, #1
   27b42:	e7f0      	b.n	27b26 <_vfiprintf_r+0x1da>
   27b44:	ab03      	add	r3, sp, #12
   27b46:	9300      	str	r3, [sp, #0]
   27b48:	462a      	mov	r2, r5
   27b4a:	4b17      	ldr	r3, [pc, #92]	; (27ba8 <_vfiprintf_r+0x25c>)
   27b4c:	a904      	add	r1, sp, #16
   27b4e:	4630      	mov	r0, r6
   27b50:	f7fe f974 	bl	25e3c <_printf_float>
   27b54:	4607      	mov	r7, r0
   27b56:	1c78      	adds	r0, r7, #1
   27b58:	d1d6      	bne.n	27b08 <_vfiprintf_r+0x1bc>
   27b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   27b5c:	07d9      	lsls	r1, r3, #31
   27b5e:	d405      	bmi.n	27b6c <_vfiprintf_r+0x220>
   27b60:	89ab      	ldrh	r3, [r5, #12]
   27b62:	059a      	lsls	r2, r3, #22
   27b64:	d402      	bmi.n	27b6c <_vfiprintf_r+0x220>
   27b66:	6da8      	ldr	r0, [r5, #88]	; 0x58
   27b68:	f002 f964 	bl	29e34 <__retarget_lock_release_recursive>
   27b6c:	89ab      	ldrh	r3, [r5, #12]
   27b6e:	065b      	lsls	r3, r3, #25
   27b70:	f53f af12 	bmi.w	27998 <_vfiprintf_r+0x4c>
   27b74:	9809      	ldr	r0, [sp, #36]	; 0x24
   27b76:	e711      	b.n	2799c <_vfiprintf_r+0x50>
   27b78:	ab03      	add	r3, sp, #12
   27b7a:	9300      	str	r3, [sp, #0]
   27b7c:	462a      	mov	r2, r5
   27b7e:	4b0a      	ldr	r3, [pc, #40]	; (27ba8 <_vfiprintf_r+0x25c>)
   27b80:	a904      	add	r1, sp, #16
   27b82:	4630      	mov	r0, r6
   27b84:	f7fe fb84 	bl	26290 <_printf_i>
   27b88:	e7e4      	b.n	27b54 <_vfiprintf_r+0x208>
   27b8a:	bf00      	nop
   27b8c:	00031398 	.word	0x00031398
   27b90:	000313b8 	.word	0x000313b8
   27b94:	00031378 	.word	0x00031378
   27b98:	00033fb9 	.word	0x00033fb9
   27b9c:	00033fbf 	.word	0x00033fbf
   27ba0:	00033fc3 	.word	0x00033fc3
   27ba4:	00025e3d 	.word	0x00025e3d
   27ba8:	0002ee93 	.word	0x0002ee93

00027bac <__swbuf_r>:
   27bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27bae:	460e      	mov	r6, r1
   27bb0:	4614      	mov	r4, r2
   27bb2:	4605      	mov	r5, r0
   27bb4:	b118      	cbz	r0, 27bbe <__swbuf_r+0x12>
   27bb6:	6983      	ldr	r3, [r0, #24]
   27bb8:	b90b      	cbnz	r3, 27bbe <__swbuf_r+0x12>
   27bba:	f7ff fe37 	bl	2782c <__sinit>
   27bbe:	4b21      	ldr	r3, [pc, #132]	; (27c44 <__swbuf_r+0x98>)
   27bc0:	429c      	cmp	r4, r3
   27bc2:	d12b      	bne.n	27c1c <__swbuf_r+0x70>
   27bc4:	686c      	ldr	r4, [r5, #4]
   27bc6:	69a3      	ldr	r3, [r4, #24]
   27bc8:	60a3      	str	r3, [r4, #8]
   27bca:	89a3      	ldrh	r3, [r4, #12]
   27bcc:	071a      	lsls	r2, r3, #28
   27bce:	d52f      	bpl.n	27c30 <__swbuf_r+0x84>
   27bd0:	6923      	ldr	r3, [r4, #16]
   27bd2:	b36b      	cbz	r3, 27c30 <__swbuf_r+0x84>
   27bd4:	6923      	ldr	r3, [r4, #16]
   27bd6:	6820      	ldr	r0, [r4, #0]
   27bd8:	1ac0      	subs	r0, r0, r3
   27bda:	6963      	ldr	r3, [r4, #20]
   27bdc:	b2f6      	uxtb	r6, r6
   27bde:	4283      	cmp	r3, r0
   27be0:	4637      	mov	r7, r6
   27be2:	dc04      	bgt.n	27bee <__swbuf_r+0x42>
   27be4:	4621      	mov	r1, r4
   27be6:	4628      	mov	r0, r5
   27be8:	f7ff fda2 	bl	27730 <_fflush_r>
   27bec:	bb30      	cbnz	r0, 27c3c <__swbuf_r+0x90>
   27bee:	68a3      	ldr	r3, [r4, #8]
   27bf0:	3b01      	subs	r3, #1
   27bf2:	60a3      	str	r3, [r4, #8]
   27bf4:	6823      	ldr	r3, [r4, #0]
   27bf6:	1c5a      	adds	r2, r3, #1
   27bf8:	6022      	str	r2, [r4, #0]
   27bfa:	701e      	strb	r6, [r3, #0]
   27bfc:	6963      	ldr	r3, [r4, #20]
   27bfe:	3001      	adds	r0, #1
   27c00:	4283      	cmp	r3, r0
   27c02:	d004      	beq.n	27c0e <__swbuf_r+0x62>
   27c04:	89a3      	ldrh	r3, [r4, #12]
   27c06:	07db      	lsls	r3, r3, #31
   27c08:	d506      	bpl.n	27c18 <__swbuf_r+0x6c>
   27c0a:	2e0a      	cmp	r6, #10
   27c0c:	d104      	bne.n	27c18 <__swbuf_r+0x6c>
   27c0e:	4621      	mov	r1, r4
   27c10:	4628      	mov	r0, r5
   27c12:	f7ff fd8d 	bl	27730 <_fflush_r>
   27c16:	b988      	cbnz	r0, 27c3c <__swbuf_r+0x90>
   27c18:	4638      	mov	r0, r7
   27c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c1c:	4b0a      	ldr	r3, [pc, #40]	; (27c48 <__swbuf_r+0x9c>)
   27c1e:	429c      	cmp	r4, r3
   27c20:	d101      	bne.n	27c26 <__swbuf_r+0x7a>
   27c22:	68ac      	ldr	r4, [r5, #8]
   27c24:	e7cf      	b.n	27bc6 <__swbuf_r+0x1a>
   27c26:	4b09      	ldr	r3, [pc, #36]	; (27c4c <__swbuf_r+0xa0>)
   27c28:	429c      	cmp	r4, r3
   27c2a:	bf08      	it	eq
   27c2c:	68ec      	ldreq	r4, [r5, #12]
   27c2e:	e7ca      	b.n	27bc6 <__swbuf_r+0x1a>
   27c30:	4621      	mov	r1, r4
   27c32:	4628      	mov	r0, r5
   27c34:	f000 f80c 	bl	27c50 <__swsetup_r>
   27c38:	2800      	cmp	r0, #0
   27c3a:	d0cb      	beq.n	27bd4 <__swbuf_r+0x28>
   27c3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27c40:	e7ea      	b.n	27c18 <__swbuf_r+0x6c>
   27c42:	bf00      	nop
   27c44:	00031398 	.word	0x00031398
   27c48:	000313b8 	.word	0x000313b8
   27c4c:	00031378 	.word	0x00031378

00027c50 <__swsetup_r>:
   27c50:	4b32      	ldr	r3, [pc, #200]	; (27d1c <__swsetup_r+0xcc>)
   27c52:	b570      	push	{r4, r5, r6, lr}
   27c54:	681d      	ldr	r5, [r3, #0]
   27c56:	4606      	mov	r6, r0
   27c58:	460c      	mov	r4, r1
   27c5a:	b125      	cbz	r5, 27c66 <__swsetup_r+0x16>
   27c5c:	69ab      	ldr	r3, [r5, #24]
   27c5e:	b913      	cbnz	r3, 27c66 <__swsetup_r+0x16>
   27c60:	4628      	mov	r0, r5
   27c62:	f7ff fde3 	bl	2782c <__sinit>
   27c66:	4b2e      	ldr	r3, [pc, #184]	; (27d20 <__swsetup_r+0xd0>)
   27c68:	429c      	cmp	r4, r3
   27c6a:	d10f      	bne.n	27c8c <__swsetup_r+0x3c>
   27c6c:	686c      	ldr	r4, [r5, #4]
   27c6e:	89a3      	ldrh	r3, [r4, #12]
   27c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   27c74:	0719      	lsls	r1, r3, #28
   27c76:	d42c      	bmi.n	27cd2 <__swsetup_r+0x82>
   27c78:	06dd      	lsls	r5, r3, #27
   27c7a:	d411      	bmi.n	27ca0 <__swsetup_r+0x50>
   27c7c:	2309      	movs	r3, #9
   27c7e:	6033      	str	r3, [r6, #0]
   27c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
   27c84:	81a3      	strh	r3, [r4, #12]
   27c86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27c8a:	e03e      	b.n	27d0a <__swsetup_r+0xba>
   27c8c:	4b25      	ldr	r3, [pc, #148]	; (27d24 <__swsetup_r+0xd4>)
   27c8e:	429c      	cmp	r4, r3
   27c90:	d101      	bne.n	27c96 <__swsetup_r+0x46>
   27c92:	68ac      	ldr	r4, [r5, #8]
   27c94:	e7eb      	b.n	27c6e <__swsetup_r+0x1e>
   27c96:	4b24      	ldr	r3, [pc, #144]	; (27d28 <__swsetup_r+0xd8>)
   27c98:	429c      	cmp	r4, r3
   27c9a:	bf08      	it	eq
   27c9c:	68ec      	ldreq	r4, [r5, #12]
   27c9e:	e7e6      	b.n	27c6e <__swsetup_r+0x1e>
   27ca0:	0758      	lsls	r0, r3, #29
   27ca2:	d512      	bpl.n	27cca <__swsetup_r+0x7a>
   27ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
   27ca6:	b141      	cbz	r1, 27cba <__swsetup_r+0x6a>
   27ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
   27cac:	4299      	cmp	r1, r3
   27cae:	d002      	beq.n	27cb6 <__swsetup_r+0x66>
   27cb0:	4630      	mov	r0, r6
   27cb2:	f7fe f81f 	bl	25cf4 <_free_r>
   27cb6:	2300      	movs	r3, #0
   27cb8:	6363      	str	r3, [r4, #52]	; 0x34
   27cba:	89a3      	ldrh	r3, [r4, #12]
   27cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   27cc0:	81a3      	strh	r3, [r4, #12]
   27cc2:	2300      	movs	r3, #0
   27cc4:	6063      	str	r3, [r4, #4]
   27cc6:	6923      	ldr	r3, [r4, #16]
   27cc8:	6023      	str	r3, [r4, #0]
   27cca:	89a3      	ldrh	r3, [r4, #12]
   27ccc:	f043 0308 	orr.w	r3, r3, #8
   27cd0:	81a3      	strh	r3, [r4, #12]
   27cd2:	6923      	ldr	r3, [r4, #16]
   27cd4:	b94b      	cbnz	r3, 27cea <__swsetup_r+0x9a>
   27cd6:	89a3      	ldrh	r3, [r4, #12]
   27cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
   27cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   27ce0:	d003      	beq.n	27cea <__swsetup_r+0x9a>
   27ce2:	4621      	mov	r1, r4
   27ce4:	4630      	mov	r0, r6
   27ce6:	f000 f821 	bl	27d2c <__smakebuf_r>
   27cea:	89a0      	ldrh	r0, [r4, #12]
   27cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   27cf0:	f010 0301 	ands.w	r3, r0, #1
   27cf4:	d00a      	beq.n	27d0c <__swsetup_r+0xbc>
   27cf6:	2300      	movs	r3, #0
   27cf8:	60a3      	str	r3, [r4, #8]
   27cfa:	6963      	ldr	r3, [r4, #20]
   27cfc:	425b      	negs	r3, r3
   27cfe:	61a3      	str	r3, [r4, #24]
   27d00:	6923      	ldr	r3, [r4, #16]
   27d02:	b943      	cbnz	r3, 27d16 <__swsetup_r+0xc6>
   27d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
   27d08:	d1ba      	bne.n	27c80 <__swsetup_r+0x30>
   27d0a:	bd70      	pop	{r4, r5, r6, pc}
   27d0c:	0781      	lsls	r1, r0, #30
   27d0e:	bf58      	it	pl
   27d10:	6963      	ldrpl	r3, [r4, #20]
   27d12:	60a3      	str	r3, [r4, #8]
   27d14:	e7f4      	b.n	27d00 <__swsetup_r+0xb0>
   27d16:	2000      	movs	r0, #0
   27d18:	e7f7      	b.n	27d0a <__swsetup_r+0xba>
   27d1a:	bf00      	nop
   27d1c:	20000858 	.word	0x20000858
   27d20:	00031398 	.word	0x00031398
   27d24:	000313b8 	.word	0x000313b8
   27d28:	00031378 	.word	0x00031378

00027d2c <__smakebuf_r>:
   27d2c:	898b      	ldrh	r3, [r1, #12]
   27d2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27d30:	079d      	lsls	r5, r3, #30
   27d32:	4606      	mov	r6, r0
   27d34:	460c      	mov	r4, r1
   27d36:	d507      	bpl.n	27d48 <__smakebuf_r+0x1c>
   27d38:	f104 0347 	add.w	r3, r4, #71	; 0x47
   27d3c:	6023      	str	r3, [r4, #0]
   27d3e:	6123      	str	r3, [r4, #16]
   27d40:	2301      	movs	r3, #1
   27d42:	6163      	str	r3, [r4, #20]
   27d44:	b002      	add	sp, #8
   27d46:	bd70      	pop	{r4, r5, r6, pc}
   27d48:	ab01      	add	r3, sp, #4
   27d4a:	466a      	mov	r2, sp
   27d4c:	f007 f8c7 	bl	2eede <__swhatbuf_r>
   27d50:	9900      	ldr	r1, [sp, #0]
   27d52:	4605      	mov	r5, r0
   27d54:	4630      	mov	r0, r6
   27d56:	f7fe f817 	bl	25d88 <_malloc_r>
   27d5a:	b948      	cbnz	r0, 27d70 <__smakebuf_r+0x44>
   27d5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   27d60:	059a      	lsls	r2, r3, #22
   27d62:	d4ef      	bmi.n	27d44 <__smakebuf_r+0x18>
   27d64:	f023 0303 	bic.w	r3, r3, #3
   27d68:	f043 0302 	orr.w	r3, r3, #2
   27d6c:	81a3      	strh	r3, [r4, #12]
   27d6e:	e7e3      	b.n	27d38 <__smakebuf_r+0xc>
   27d70:	4b0d      	ldr	r3, [pc, #52]	; (27da8 <__smakebuf_r+0x7c>)
   27d72:	62b3      	str	r3, [r6, #40]	; 0x28
   27d74:	89a3      	ldrh	r3, [r4, #12]
   27d76:	6020      	str	r0, [r4, #0]
   27d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   27d7c:	81a3      	strh	r3, [r4, #12]
   27d7e:	9b00      	ldr	r3, [sp, #0]
   27d80:	6163      	str	r3, [r4, #20]
   27d82:	9b01      	ldr	r3, [sp, #4]
   27d84:	6120      	str	r0, [r4, #16]
   27d86:	b15b      	cbz	r3, 27da0 <__smakebuf_r+0x74>
   27d88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   27d8c:	4630      	mov	r0, r6
   27d8e:	f000 f839 	bl	27e04 <_isatty_r>
   27d92:	b128      	cbz	r0, 27da0 <__smakebuf_r+0x74>
   27d94:	89a3      	ldrh	r3, [r4, #12]
   27d96:	f023 0303 	bic.w	r3, r3, #3
   27d9a:	f043 0301 	orr.w	r3, r3, #1
   27d9e:	81a3      	strh	r3, [r4, #12]
   27da0:	89a0      	ldrh	r0, [r4, #12]
   27da2:	4305      	orrs	r5, r0
   27da4:	81a5      	strh	r5, [r4, #12]
   27da6:	e7cd      	b.n	27d44 <__smakebuf_r+0x18>
   27da8:	000277f1 	.word	0x000277f1

00027dac <raise>:
   27dac:	4b02      	ldr	r3, [pc, #8]	; (27db8 <raise+0xc>)
   27dae:	4601      	mov	r1, r0
   27db0:	6818      	ldr	r0, [r3, #0]
   27db2:	f007 b8c1 	b.w	2ef38 <_raise_r>
   27db6:	bf00      	nop
   27db8:	20000858 	.word	0x20000858

00027dbc <_kill_r>:
   27dbc:	b538      	push	{r3, r4, r5, lr}
   27dbe:	4d07      	ldr	r5, [pc, #28]	; (27ddc <_kill_r+0x20>)
   27dc0:	2300      	movs	r3, #0
   27dc2:	4604      	mov	r4, r0
   27dc4:	4608      	mov	r0, r1
   27dc6:	4611      	mov	r1, r2
   27dc8:	602b      	str	r3, [r5, #0]
   27dca:	f002 f81a 	bl	29e02 <_kill>
   27dce:	1c43      	adds	r3, r0, #1
   27dd0:	d102      	bne.n	27dd8 <_kill_r+0x1c>
   27dd2:	682b      	ldr	r3, [r5, #0]
   27dd4:	b103      	cbz	r3, 27dd8 <_kill_r+0x1c>
   27dd6:	6023      	str	r3, [r4, #0]
   27dd8:	bd38      	pop	{r3, r4, r5, pc}
   27dda:	bf00      	nop
   27ddc:	20003954 	.word	0x20003954

00027de0 <_fstat_r>:
   27de0:	b538      	push	{r3, r4, r5, lr}
   27de2:	4d07      	ldr	r5, [pc, #28]	; (27e00 <_fstat_r+0x20>)
   27de4:	2300      	movs	r3, #0
   27de6:	4604      	mov	r4, r0
   27de8:	4608      	mov	r0, r1
   27dea:	4611      	mov	r1, r2
   27dec:	602b      	str	r3, [r5, #0]
   27dee:	f002 f80c 	bl	29e0a <_fstat>
   27df2:	1c43      	adds	r3, r0, #1
   27df4:	d102      	bne.n	27dfc <_fstat_r+0x1c>
   27df6:	682b      	ldr	r3, [r5, #0]
   27df8:	b103      	cbz	r3, 27dfc <_fstat_r+0x1c>
   27dfa:	6023      	str	r3, [r4, #0]
   27dfc:	bd38      	pop	{r3, r4, r5, pc}
   27dfe:	bf00      	nop
   27e00:	20003954 	.word	0x20003954

00027e04 <_isatty_r>:
   27e04:	b538      	push	{r3, r4, r5, lr}
   27e06:	4d06      	ldr	r5, [pc, #24]	; (27e20 <_isatty_r+0x1c>)
   27e08:	2300      	movs	r3, #0
   27e0a:	4604      	mov	r4, r0
   27e0c:	4608      	mov	r0, r1
   27e0e:	602b      	str	r3, [r5, #0]
   27e10:	f001 fff2 	bl	29df8 <_isatty>
   27e14:	1c43      	adds	r3, r0, #1
   27e16:	d102      	bne.n	27e1e <_isatty_r+0x1a>
   27e18:	682b      	ldr	r3, [r5, #0]
   27e1a:	b103      	cbz	r3, 27e1e <_isatty_r+0x1a>
   27e1c:	6023      	str	r3, [r4, #0]
   27e1e:	bd38      	pop	{r3, r4, r5, pc}
   27e20:	20003954 	.word	0x20003954

00027e24 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   27e24:	4770      	bx	lr

00027e26 <main>:
K_THREAD_DEFINE(send_message, 1024, thread_send_message, NULL, NULL, NULL, 20, 0, 0);
K_THREAD_DEFINE(get_message, 4096, thread_get_message, NULL, NULL, NULL, 20, 0, 0);
K_THREAD_DEFINE(read_button, 512, thread_read_button, NULL, NULL, NULL, 20, 0, 0);

void main(void)
{
   27e26:	b508      	push	{r3, lr}

    led_gpio_enable();
   27e28:	f7dd f936 	bl	5098 <led_gpio_enable>
    init_buzzer();
   27e2c:	f7dd fa2e 	bl	528c <init_buzzer>
    init_hts();
   27e30:	f7dd f8a4 	bl	4f7c <init_hts>
    init_lps();
   27e34:	f7dd f8ae 	bl	4f94 <init_lps>
    init_ccs();
   27e38:	f7dd f8b8 	bl	4fac <init_ccs>
    init_lis();
   27e3c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    init_lis();
   27e40:	f7dd b8d4 	b.w	4fec <init_lis>

00027e44 <k_msgq_purge>:
	z_impl_k_msgq_purge(msgq);
   27e44:	f005 be8f 	b.w	2db66 <z_impl_k_msgq_purge>

00027e48 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   27e48:	4601      	mov	r1, r0
   27e4a:	f240 30e7 	movw	r0, #999	; 0x3e7
   27e4e:	b508      	push	{r3, lr}
   27e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   27e54:	2300      	movs	r3, #0
   27e56:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   27e5a:	1449      	asrs	r1, r1, #17
   27e5c:	f7d8 fedc 	bl	c18 <__aeabi_uldivmod>
}
   27e60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   27e64:	f7fd bc10 	b.w	25688 <z_impl_k_sleep>

00027e68 <sensor_sample_fetch>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
   27e68:	6883      	ldr	r3, [r0, #8]
   27e6a:	2139      	movs	r1, #57	; 0x39
   27e6c:	68db      	ldr	r3, [r3, #12]
   27e6e:	4718      	bx	r3

00027e70 <sensor_channel_get>:
	return api->channel_get(dev, chan, val);
   27e70:	6883      	ldr	r3, [r0, #8]
   27e72:	691b      	ldr	r3, [r3, #16]
   27e74:	4718      	bx	r3

00027e76 <gpio_pin_configure>:

extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
{
   27e76:	b4f0      	push	{r4, r5, r6, r7}
   27e78:	4613      	mov	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   27e7a:	04d4      	lsls	r4, r2, #19
	const struct gpio_driver_api *api =
   27e7c:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
   27e7e:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
   27e80:	d506      	bpl.n	27e90 <gpio_pin_configure+0x1a>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
   27e82:	f412 6f40 	tst.w	r2, #3072	; 0xc00
   27e86:	d003      	beq.n	27e90 <gpio_pin_configure+0x1a>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   27e88:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
   27e8a:	bf48      	it	mi
   27e8c:	f483 6340 	eormi.w	r3, r3, #3072	; 0xc00
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27e90:	6834      	ldr	r4, [r6, #0]
   27e92:	2501      	movs	r5, #1
   27e94:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
   27e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   27e9a:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   27e9c:	bf4c      	ite	mi
   27e9e:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27ea0:	43ac      	bicpl	r4, r5
	return api->pin_configure(port, pin, flags);
   27ea2:	683b      	ldr	r3, [r7, #0]
   27ea4:	6034      	str	r4, [r6, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   27ea6:	bcf0      	pop	{r4, r5, r6, r7}
   27ea8:	4718      	bx	r3

00027eaa <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   27eaa:	2301      	movs	r3, #1
   27eac:	fa03 f101 	lsl.w	r1, r3, r1
   27eb0:	6903      	ldr	r3, [r0, #16]
   27eb2:	681b      	ldr	r3, [r3, #0]
   27eb4:	4219      	tst	r1, r3
   27eb6:	d003      	beq.n	27ec0 <gpio_pin_set+0x16>
	if (value != 0)	{
   27eb8:	b122      	cbz	r2, 27ec4 <gpio_pin_set+0x1a>
	return api->port_clear_bits_raw(port, pins);
   27eba:	6883      	ldr	r3, [r0, #8]
   27ebc:	691b      	ldr	r3, [r3, #16]
   27ebe:	e003      	b.n	27ec8 <gpio_pin_set+0x1e>
	if (value != 0)	{
   27ec0:	2a00      	cmp	r2, #0
   27ec2:	d0fa      	beq.n	27eba <gpio_pin_set+0x10>
	return api->port_set_bits_raw(port, pins);
   27ec4:	6883      	ldr	r3, [r0, #8]
   27ec6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   27ec8:	4718      	bx	r3

00027eca <device_get_binding>:
   27eca:	f7fc bab1 	b.w	24430 <z_impl_device_get_binding>

00027ece <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
   27ece:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27ed2:	4607      	mov	r7, r0
   27ed4:	460e      	mov	r6, r1
   27ed6:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, s_idx;

	if (buf == NULL) {
   27ed8:	461d      	mov	r5, r3
   27eda:	b1fb      	cbz	r3, 27f1c <cbpprintf_external+0x4e>
	args_size = buf[0] * sizeof(int);
	s_nbr     = buf[1];
	ros_nbr   = buf[2];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr);
   27edc:	7818      	ldrb	r0, [r3, #0]
   27ede:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
   27ee0:	f893 a001 	ldrb.w	sl, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr);
   27ee4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   27ee8:	441c      	add	r4, r3

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
   27eea:	f04f 0900 	mov.w	r9, #0
   27eee:	45d1      	cmp	r9, sl
   27ef0:	d308      	bcc.n	27f04 <cbpprintf_external+0x36>
	return formatter(out, ctx, fmt, u.ap);
   27ef2:	686a      	ldr	r2, [r5, #4]
   27ef4:	f105 0308 	add.w	r3, r5, #8
   27ef8:	4641      	mov	r1, r8
   27efa:	4638      	mov	r0, r7
   27efc:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
   27efe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
   27f02:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
   27f04:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
   27f08:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
   27f0c:	4620      	mov	r0, r4
   27f0e:	f7d9 f8c0 	bl	1092 <strlen>
   27f12:	3001      	adds	r0, #1
   27f14:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
   27f16:	f109 0901 	add.w	r9, r9, #1
   27f1a:	e7e8      	b.n	27eee <cbpprintf_external+0x20>
}
   27f1c:	f06f 0015 	mvn.w	r0, #21
   27f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00027f24 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27f24:	4603      	mov	r3, r0
   27f26:	b140      	cbz	r0, 27f3a <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27f28:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27f2a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   27f2e:	2a02      	cmp	r2, #2
   27f30:	d006      	beq.n	27f40 <sys_notify_validate+0x1c>
   27f32:	2a03      	cmp	r2, #3
   27f34:	d004      	beq.n	27f40 <sys_notify_validate+0x1c>
   27f36:	2a01      	cmp	r2, #1
   27f38:	d005      	beq.n	27f46 <sys_notify_validate+0x22>
		return -EINVAL;
   27f3a:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   27f3e:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   27f40:	681a      	ldr	r2, [r3, #0]
   27f42:	2a00      	cmp	r2, #0
   27f44:	d0f9      	beq.n	27f3a <sys_notify_validate+0x16>
		notify->result = 0;
   27f46:	2000      	movs	r0, #0
   27f48:	6098      	str	r0, [r3, #8]
   27f4a:	4770      	bx	lr

00027f4c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27f4c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27f4e:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   27f52:	2a02      	cmp	r2, #2
{
   27f54:	b510      	push	{r4, lr}
   27f56:	4603      	mov	r3, r0
	notify->result = res;
   27f58:	6081      	str	r1, [r0, #8]
	switch (method) {
   27f5a:	d00a      	beq.n	27f72 <sys_notify_finalize+0x26>
   27f5c:	2a03      	cmp	r2, #3
   27f5e:	d10b      	bne.n	27f78 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   27f60:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   27f62:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27f64:	2200      	movs	r2, #0
   27f66:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   27f68:	b108      	cbz	r0, 27f6e <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   27f6a:	f7fd fe67 	bl	25c3c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   27f6e:	4620      	mov	r0, r4
   27f70:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   27f72:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   27f74:	2400      	movs	r4, #0
		break;
   27f76:	e7f5      	b.n	27f64 <sys_notify_finalize+0x18>
	switch (method) {
   27f78:	2400      	movs	r4, #0
   27f7a:	4620      	mov	r0, r4
   27f7c:	e7f2      	b.n	27f64 <sys_notify_finalize+0x18>

00027f7e <arch_printk_char_out>:
}
   27f7e:	2000      	movs	r0, #0
   27f80:	4770      	bx	lr

00027f82 <str_out>:
{
   27f82:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27f84:	688a      	ldr	r2, [r1, #8]
   27f86:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   27f88:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27f8a:	b114      	cbz	r4, 27f92 <str_out+0x10>
   27f8c:	684b      	ldr	r3, [r1, #4]
   27f8e:	4293      	cmp	r3, r2
   27f90:	dc01      	bgt.n	27f96 <str_out+0x14>
		ctx->count++;
   27f92:	608d      	str	r5, [r1, #8]
}
   27f94:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   27f96:	3b01      	subs	r3, #1
   27f98:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   27f9a:	bf08      	it	eq
   27f9c:	2200      	moveq	r2, #0
   27f9e:	608d      	str	r5, [r1, #8]
   27fa0:	bf0c      	ite	eq
   27fa2:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   27fa4:	54a0      	strbne	r0, [r4, r2]
   27fa6:	e7f5      	b.n	27f94 <str_out+0x12>

00027fa8 <printk>:
{
   27fa8:	b40f      	push	{r0, r1, r2, r3}
   27faa:	b507      	push	{r0, r1, r2, lr}
   27fac:	a904      	add	r1, sp, #16
   27fae:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27fb2:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
   27fb4:	f000 fd09 	bl	289ca <z_log_vprintk>
}
   27fb8:	b003      	add	sp, #12
   27fba:	f85d eb04 	ldr.w	lr, [sp], #4
   27fbe:	b004      	add	sp, #16
   27fc0:	4770      	bx	lr

00027fc2 <snprintk>:
{
   27fc2:	b40c      	push	{r2, r3}
   27fc4:	b507      	push	{r0, r1, r2, lr}
   27fc6:	ab04      	add	r3, sp, #16
   27fc8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27fcc:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27fce:	f7dd fbd9 	bl	5784 <vsnprintk>
}
   27fd2:	b003      	add	sp, #12
   27fd4:	f85d eb04 	ldr.w	lr, [sp], #4
   27fd8:	b002      	add	sp, #8
   27fda:	4770      	bx	lr

00027fdc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27fdc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   27fde:	f013 0307 	ands.w	r3, r3, #7
   27fe2:	d105      	bne.n	27ff0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27fe4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   27fe6:	2b00      	cmp	r3, #0
   27fe8:	bf0c      	ite	eq
   27fea:	2000      	moveq	r0, #0
   27fec:	2003      	movne	r0, #3
   27fee:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   27ff0:	2b02      	cmp	r3, #2
   27ff2:	d105      	bne.n	28000 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27ff4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   27ff6:	2b00      	cmp	r3, #0
   27ff8:	bf14      	ite	ne
   27ffa:	2000      	movne	r0, #0
   27ffc:	2004      	moveq	r0, #4
   27ffe:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   28000:	2b01      	cmp	r3, #1
   28002:	d105      	bne.n	28010 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   28004:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   28006:	2b00      	cmp	r3, #0
   28008:	bf0c      	ite	eq
   2800a:	2000      	moveq	r0, #0
   2800c:	2005      	movne	r0, #5
   2800e:	4770      	bx	lr
	int evt = EVT_NOP;
   28010:	2000      	movs	r0, #0
}
   28012:	4770      	bx	lr

00028014 <notify_one>:
{
   28014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28018:	460d      	mov	r5, r1
   2801a:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2801c:	4619      	mov	r1, r3
   2801e:	1d28      	adds	r0, r5, #4
{
   28020:	4690      	mov	r8, r2
   28022:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28024:	f7ff ff92 	bl	27f4c <sys_notify_finalize>
	if (cb) {
   28028:	4604      	mov	r4, r0
   2802a:	b138      	cbz	r0, 2803c <notify_one+0x28>
		cb(mgr, cli, state, res);
   2802c:	4633      	mov	r3, r6
   2802e:	4642      	mov	r2, r8
   28030:	4629      	mov	r1, r5
   28032:	4638      	mov	r0, r7
   28034:	46a4      	mov	ip, r4
}
   28036:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2803a:	4760      	bx	ip
}
   2803c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028040 <transition_complete>:
{
   28040:	b410      	push	{r4}
	__asm__ volatile(
   28042:	f04f 0420 	mov.w	r4, #32
   28046:	f3ef 8211 	mrs	r2, BASEPRI
   2804a:	f384 8812 	msr	BASEPRI_MAX, r4
   2804e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   28052:	6141      	str	r1, [r0, #20]
}
   28054:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   28056:	2101      	movs	r1, #1
   28058:	f7dd bba8 	b.w	57ac <process_event>

0002805c <validate_args>:
{
   2805c:	b510      	push	{r4, lr}
   2805e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28060:	b140      	cbz	r0, 28074 <validate_args+0x18>
   28062:	b139      	cbz	r1, 28074 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   28064:	1d08      	adds	r0, r1, #4
   28066:	f7ff ff5d 	bl	27f24 <sys_notify_validate>
	if ((rv == 0)
   2806a:	b928      	cbnz	r0, 28078 <validate_args+0x1c>
	    && ((cli->notify.flags
   2806c:	68a3      	ldr	r3, [r4, #8]
   2806e:	f033 0303 	bics.w	r3, r3, #3
   28072:	d001      	beq.n	28078 <validate_args+0x1c>
		rv = -EINVAL;
   28074:	f06f 0015 	mvn.w	r0, #21
}
   28078:	bd10      	pop	{r4, pc}

0002807a <onoff_manager_init>:
{
   2807a:	b538      	push	{r3, r4, r5, lr}
   2807c:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2807e:	4605      	mov	r5, r0
   28080:	b158      	cbz	r0, 2809a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   28082:	b151      	cbz	r1, 2809a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   28084:	680b      	ldr	r3, [r1, #0]
   28086:	b143      	cbz	r3, 2809a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   28088:	684b      	ldr	r3, [r1, #4]
   2808a:	b133      	cbz	r3, 2809a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2808c:	221c      	movs	r2, #28
   2808e:	2100      	movs	r1, #0
   28090:	f006 fa8a 	bl	2e5a8 <memset>
   28094:	612c      	str	r4, [r5, #16]
	return 0;
   28096:	2000      	movs	r0, #0
}
   28098:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2809a:	f06f 0015 	mvn.w	r0, #21
   2809e:	e7fb      	b.n	28098 <onoff_manager_init+0x1e>

000280a0 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   280a0:	b570      	push	{r4, r5, r6, lr}
   280a2:	4604      	mov	r4, r0
   280a4:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   280a6:	f7ff ffd9 	bl	2805c <validate_args>

	if (rv < 0) {
   280aa:	1e05      	subs	r5, r0, #0
   280ac:	db31      	blt.n	28112 <onoff_request+0x72>
   280ae:	f04f 0320 	mov.w	r3, #32
   280b2:	f3ef 8111 	mrs	r1, BASEPRI
   280b6:	f383 8812 	msr	BASEPRI_MAX, r3
   280ba:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   280be:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   280c0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   280c2:	f64f 75ff 	movw	r5, #65535	; 0xffff
   280c6:	42ab      	cmp	r3, r5
   280c8:	f000 0207 	and.w	r2, r0, #7
   280cc:	d02e      	beq.n	2812c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   280ce:	2a02      	cmp	r2, #2
   280d0:	d10e      	bne.n	280f0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   280d2:	3301      	adds	r3, #1
   280d4:	8363      	strh	r3, [r4, #26]
	rv = state;
   280d6:	4615      	mov	r5, r2
		notify = true;
   280d8:	2301      	movs	r3, #1
	__asm__ volatile(
   280da:	f381 8811 	msr	BASEPRI, r1
   280de:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   280e2:	b1b3      	cbz	r3, 28112 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   280e4:	2300      	movs	r3, #0
   280e6:	4631      	mov	r1, r6
   280e8:	4620      	mov	r0, r4
   280ea:	f7ff ff93 	bl	28014 <notify_one>
   280ee:	e010      	b.n	28112 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   280f0:	0783      	lsls	r3, r0, #30
   280f2:	d001      	beq.n	280f8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   280f4:	2a06      	cmp	r2, #6
   280f6:	d10e      	bne.n	28116 <onoff_request+0x76>
	parent->next = child;
   280f8:	2300      	movs	r3, #0
   280fa:	6033      	str	r3, [r6, #0]
	return list->tail;
   280fc:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   280fe:	b993      	cbnz	r3, 28126 <onoff_request+0x86>
	list->head = node;
   28100:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   28104:	4615      	mov	r5, r2
   28106:	b962      	cbnz	r2, 28122 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   28108:	460a      	mov	r2, r1
   2810a:	4620      	mov	r0, r4
   2810c:	2102      	movs	r1, #2
   2810e:	f7dd fb4d 	bl	57ac <process_event>
		}
	}

	return rv;
}
   28112:	4628      	mov	r0, r5
   28114:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   28116:	2a05      	cmp	r2, #5
   28118:	bf0c      	ite	eq
   2811a:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   2811e:	f06f 0504 	mvnne.w	r5, #4
   28122:	2300      	movs	r3, #0
   28124:	e7d9      	b.n	280da <onoff_request+0x3a>
	parent->next = child;
   28126:	601e      	str	r6, [r3, #0]
	list->tail = node;
   28128:	6066      	str	r6, [r4, #4]
}
   2812a:	e7eb      	b.n	28104 <onoff_request+0x64>
		rv = -EAGAIN;
   2812c:	f06f 050a 	mvn.w	r5, #10
   28130:	e7f7      	b.n	28122 <onoff_request+0x82>

00028132 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   28132:	b510      	push	{r4, lr}
	__asm__ volatile(
   28134:	f04f 0320 	mov.w	r3, #32
   28138:	f3ef 8211 	mrs	r2, BASEPRI
   2813c:	f383 8812 	msr	BASEPRI_MAX, r3
   28140:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28144:	8b04      	ldrh	r4, [r0, #24]
   28146:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   2814a:	2c02      	cmp	r4, #2
   2814c:	d00a      	beq.n	28164 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   2814e:	2c01      	cmp	r4, #1
   28150:	bf0c      	ite	eq
   28152:	f06f 0004 	mvneq.w	r0, #4
   28156:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   2815a:	f382 8811 	msr	BASEPRI, r2
   2815e:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   28162:	e008      	b.n	28176 <onoff_release+0x44>
	mgr->refs -= 1U;
   28164:	8b43      	ldrh	r3, [r0, #26]
   28166:	3b01      	subs	r3, #1
   28168:	b29b      	uxth	r3, r3
   2816a:	8343      	strh	r3, [r0, #26]
	if (stop) {
   2816c:	b923      	cbnz	r3, 28178 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   2816e:	4621      	mov	r1, r4
   28170:	f7dd fb1c 	bl	57ac <process_event>
	int rv = state;
   28174:	4620      	mov	r0, r4
}
   28176:	bd10      	pop	{r4, pc}
	int rv = state;
   28178:	4620      	mov	r0, r4
   2817a:	e7ee      	b.n	2815a <onoff_release+0x28>

0002817c <onoff_sync_lock>:
	__asm__ volatile(
   2817c:	f04f 0220 	mov.w	r2, #32
   28180:	f3ef 8311 	mrs	r3, BASEPRI
   28184:	f382 8812 	msr	BASEPRI_MAX, r2
   28188:	f3bf 8f6f 	isb	sy
int onoff_sync_lock(struct onoff_sync_service *srv,
		    k_spinlock_key_t *keyp)
{
	*keyp = k_spin_lock(&srv->lock);
	return srv->count;
}
   2818c:	6800      	ldr	r0, [r0, #0]
	*keyp = k_spin_lock(&srv->lock);
   2818e:	600b      	str	r3, [r1, #0]
}
   28190:	4770      	bx	lr

00028192 <onoff_sync_finalize>:
int onoff_sync_finalize(struct onoff_sync_service *srv,
			k_spinlock_key_t key,
			struct onoff_client *cli,
			int res,
			bool on)
{
   28192:	b538      	push	{r3, r4, r5, lr}

	/* Clear errors visible when locked.  If they are to be
	 * preserved the caller must finalize with the previous
	 * error code.
	 */
	if (srv->count < 0) {
   28194:	6804      	ldr	r4, [r0, #0]
   28196:	2c00      	cmp	r4, #0
		srv->count = 0;
   28198:	bfbc      	itt	lt
   2819a:	2400      	movlt	r4, #0
   2819c:	6004      	strlt	r4, [r0, #0]
	}
	if (res < 0) {
   2819e:	2b00      	cmp	r3, #0
{
   281a0:	460d      	mov	r5, r1
   281a2:	4611      	mov	r1, r2
   281a4:	f89d 2010 	ldrb.w	r2, [sp, #16]
	if (res < 0) {
   281a8:	da0c      	bge.n	281c4 <onoff_sync_finalize+0x32>
		srv->count = res;
   281aa:	6003      	str	r3, [r0, #0]
		state = ONOFF_STATE_ERROR;
   281ac:	2201      	movs	r2, #1
		 * callbacks are used only when turning on don't
		 * bother changing it.
		 */
	}

	int rv = srv->count;
   281ae:	6804      	ldr	r4, [r0, #0]
	__asm__ volatile(
   281b0:	f385 8811 	msr	BASEPRI, r5
   281b4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&srv->lock, key);

	if (cli) {
   281b8:	b111      	cbz	r1, 281c0 <onoff_sync_finalize+0x2e>
		/* Detect service mis-use: onoff does not callback on transition
		 * to off, so no client should have been passed.
		 */
		__ASSERT_NO_MSG(on);
		notify_one(NULL, cli, state, res);
   281ba:	2000      	movs	r0, #0
   281bc:	f7ff ff2a 	bl	28014 <notify_one>
	}

	return rv;
}
   281c0:	4620      	mov	r0, r4
   281c2:	bd38      	pop	{r3, r4, r5, pc}
		srv->count += 1;
   281c4:	6804      	ldr	r4, [r0, #0]
	} else if (on) {
   281c6:	b11a      	cbz	r2, 281d0 <onoff_sync_finalize+0x3e>
		srv->count += 1;
   281c8:	3401      	adds	r4, #1
		srv->count -= 1;
   281ca:	6004      	str	r4, [r0, #0]
	uint32_t state = ONOFF_STATE_ON;
   281cc:	2202      	movs	r2, #2
   281ce:	e7ee      	b.n	281ae <onoff_sync_finalize+0x1c>
		srv->count -= 1;
   281d0:	3c01      	subs	r4, #1
   281d2:	e7fa      	b.n	281ca <onoff_sync_finalize+0x38>

000281d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   281d4:	4604      	mov	r4, r0
   281d6:	b508      	push	{r3, lr}
   281d8:	4608      	mov	r0, r1
   281da:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   281dc:	461a      	mov	r2, r3
   281de:	47a0      	blx	r4
	return z_impl_z_current_get();
   281e0:	f7fd fa6c 	bl	256bc <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   281e4:	f7df fe86 	bl	7ef4 <z_impl_k_thread_abort>

000281e8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   281e8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   281ec:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
   281ee:	0840      	lsrs	r0, r0, #1
   281f0:	4770      	bx	lr

000281f2 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
   281f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281f4:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
   281f6:	f7ff fff7 	bl	281e8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   281fa:	fab0 f080 	clz	r0, r0
   281fe:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   28202:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
   28206:	00ca      	lsls	r2, r1, #3
   28208:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2820c:	1d17      	adds	r7, r2, #4
{
   2820e:	460c      	mov	r4, r1
   28210:	3206      	adds	r2, #6
   28212:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
   28214:	b956      	cbnz	r6, 2822c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   28216:	2101      	movs	r1, #1
   28218:	fa01 f000 	lsl.w	r0, r1, r0
   2821c:	68d9      	ldr	r1, [r3, #12]
   2821e:	4301      	orrs	r1, r0
   28220:	60d9      	str	r1, [r3, #12]
		b->next = c;
   28222:	f8cc 4010 	str.w	r4, [ip, #16]
   28226:	53dd      	strh	r5, [r3, r7]
   28228:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
   2822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2822c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2822e:	3104      	adds	r1, #4
   28230:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   28232:	53d8      	strh	r0, [r3, r7]
   28234:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   28238:	529e      	strh	r6, [r3, r2]
   2823a:	80c5      	strh	r5, [r0, #6]
   2823c:	525d      	strh	r5, [r3, r1]
   2823e:	e7f4      	b.n	2822a <free_list_add+0x38>

00028240 <free_list_remove_bidx>:
{
   28240:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   28242:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   28246:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   28248:	4299      	cmp	r1, r3
   2824a:	f102 0104 	add.w	r1, r2, #4
   2824e:	d10a      	bne.n	28266 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   28250:	2301      	movs	r3, #1
   28252:	fa03 f202 	lsl.w	r2, r3, r2
   28256:	68c3      	ldr	r3, [r0, #12]
   28258:	ea23 0302 	bic.w	r3, r3, r2
   2825c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2825e:	2300      	movs	r3, #0
   28260:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   28264:	bd10      	pop	{r4, pc}
   28266:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   28268:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2826c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   28270:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   28274:	80cb      	strh	r3, [r1, #6]
   28276:	8082      	strh	r2, [r0, #4]
}
   28278:	e7f4      	b.n	28264 <free_list_remove_bidx+0x24>

0002827a <free_list_remove>:
{
   2827a:	b508      	push	{r3, lr}
   2827c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2827e:	f7ff ffb3 	bl	281e8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28282:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
   28286:	f1c2 021f 	rsb	r2, r2, #31
   2828a:	4618      	mov	r0, r3
}
   2828c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
   28290:	f7ff bfd6 	b.w	28240 <free_list_remove_bidx>

00028294 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   28294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28298:	fab1 f581 	clz	r5, r1
   2829c:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   282a0:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   282a4:	4603      	mov	r3, r0
	if (b->next) {
   282a6:	693a      	ldr	r2, [r7, #16]
{
   282a8:	460e      	mov	r6, r1
	if (b->next) {
   282aa:	b1c2      	cbz	r2, 282de <alloc_chunk+0x4a>
   282ac:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   282b0:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   282b2:	4618      	mov	r0, r3
   282b4:	4621      	mov	r1, r4
   282b6:	f7ff ff97 	bl	281e8 <chunk_size>
   282ba:	42b0      	cmp	r0, r6
   282bc:	d306      	bcc.n	282cc <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
   282be:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   282c0:	4618      	mov	r0, r3
   282c2:	f7ff ffbd 	bl	28240 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   282c6:	4620      	mov	r0, r4
   282c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   282cc:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
   282d0:	f1b8 0801 	subs.w	r8, r8, #1
   282d4:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
   282d6:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
   282d8:	d001      	beq.n	282de <alloc_chunk+0x4a>
   282da:	4282      	cmp	r2, r0
   282dc:	d1e8      	bne.n	282b0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   282de:	f1c5 0220 	rsb	r2, r5, #32
   282e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   282e6:	4094      	lsls	r4, r2
   282e8:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
   282ea:	4014      	ands	r4, r2
   282ec:	d0eb      	beq.n	282c6 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
   282ee:	fa94 f2a4 	rbit	r2, r4
   282f2:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   282f6:	1d11      	adds	r1, r2, #4
   282f8:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   282fc:	4621      	mov	r1, r4
   282fe:	e7df      	b.n	282c0 <alloc_chunk+0x2c>

00028300 <merge_chunks>:
{
   28300:	b538      	push	{r3, r4, r5, lr}
   28302:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   28304:	f7ff ff70 	bl	281e8 <chunk_size>
{
   28308:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2830a:	4604      	mov	r4, r0
   2830c:	4611      	mov	r1, r2
   2830e:	4618      	mov	r0, r3
   28310:	f7ff ff6a 	bl	281e8 <chunk_size>
		((uint16_t *)cmem)[f] = val;
   28314:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   28318:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2831a:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
   2831c:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
   2831e:	4618      	mov	r0, r3
   28320:	f7ff ff62 	bl	281e8 <chunk_size>
	void *cmem = &buf[c];
   28324:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   28326:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
   2832a:	bd38      	pop	{r3, r4, r5, pc}

0002832c <split_chunks>:
{
   2832c:	b538      	push	{r3, r4, r5, lr}
   2832e:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
   28330:	f7ff ff5a 	bl	281e8 <chunk_size>
{
   28334:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
   28336:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
   28338:	1a51      	subs	r1, r2, r1
   2833a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
   2833e:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28340:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   28342:	8060      	strh	r0, [r4, #2]
   28344:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28348:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2834a:	8044      	strh	r4, [r0, #2]
   2834c:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   28350:	4618      	mov	r0, r3
   28352:	4611      	mov	r1, r2
   28354:	f7ff ff48 	bl	281e8 <chunk_size>
	void *cmem = &buf[c];
   28358:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
   2835a:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
   2835e:	bd38      	pop	{r3, r4, r5, pc}

00028360 <free_chunk>:
{
   28360:	b538      	push	{r3, r4, r5, lr}
   28362:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   28364:	f7ff ff40 	bl	281e8 <chunk_size>
   28368:	460c      	mov	r4, r1
   2836a:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2836c:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28370:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   28372:	07da      	lsls	r2, r3, #31
   28374:	d40a      	bmi.n	2838c <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   28376:	4628      	mov	r0, r5
   28378:	f7ff ff7f 	bl	2827a <free_list_remove>
	return c + chunk_size(h, c);
   2837c:	4621      	mov	r1, r4
   2837e:	4628      	mov	r0, r5
   28380:	f7ff ff32 	bl	281e8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   28384:	1822      	adds	r2, r4, r0
   28386:	4628      	mov	r0, r5
   28388:	f7ff ffba 	bl	28300 <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2838c:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   28390:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   28392:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28396:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   28398:	07db      	lsls	r3, r3, #31
   2839a:	d40c      	bmi.n	283b6 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2839c:	4628      	mov	r0, r5
   2839e:	f7ff ff6c 	bl	2827a <free_list_remove>
		return ((uint16_t *)cmem)[f];
   283a2:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   283a6:	4622      	mov	r2, r4
   283a8:	1a61      	subs	r1, r4, r1
   283aa:	4628      	mov	r0, r5
   283ac:	f7ff ffa8 	bl	28300 <merge_chunks>
   283b0:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   283b4:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   283b6:	4621      	mov	r1, r4
   283b8:	4628      	mov	r0, r5
}
   283ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   283be:	f7ff bf18 	b.w	281f2 <free_list_add>

000283c2 <sys_heap_free>:
	if (mem == NULL) {
   283c2:	b161      	cbz	r1, 283de <sys_heap_free+0x1c>
   283c4:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   283c6:	3904      	subs	r1, #4
   283c8:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
   283ca:	f021 0307 	bic.w	r3, r1, #7
   283ce:	4403      	add	r3, r0
	free_chunk(h, c);
   283d0:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   283d2:	885a      	ldrh	r2, [r3, #2]
   283d4:	f022 0201 	bic.w	r2, r2, #1
   283d8:	805a      	strh	r2, [r3, #2]
   283da:	f7ff bfc1 	b.w	28360 <free_chunk>
}
   283de:	4770      	bx	lr

000283e0 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   283e0:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   283e2:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
   283e4:	b909      	cbnz	r1, 283ea <sys_heap_alloc+0xa>
		return NULL;
   283e6:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   283e8:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   283ea:	68ab      	ldr	r3, [r5, #8]
   283ec:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   283f0:	d9f9      	bls.n	283e6 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   283f2:	310b      	adds	r1, #11
   283f4:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   283f6:	4621      	mov	r1, r4
   283f8:	4628      	mov	r0, r5
   283fa:	f7ff ff4b 	bl	28294 <alloc_chunk>
	if (c == 0U) {
   283fe:	4606      	mov	r6, r0
   28400:	2800      	cmp	r0, #0
   28402:	d0f0      	beq.n	283e6 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   28404:	4601      	mov	r1, r0
   28406:	4628      	mov	r0, r5
   28408:	f7ff feee 	bl	281e8 <chunk_size>
   2840c:	42a0      	cmp	r0, r4
   2840e:	d907      	bls.n	28420 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
   28410:	1932      	adds	r2, r6, r4
   28412:	4628      	mov	r0, r5
   28414:	f7ff ff8a 	bl	2832c <split_chunks>
		free_list_add(h, c + chunk_sz);
   28418:	4611      	mov	r1, r2
   2841a:	4628      	mov	r0, r5
   2841c:	f7ff fee9 	bl	281f2 <free_list_add>
	void *cmem = &buf[c];
   28420:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   28424:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28426:	8853      	ldrh	r3, [r2, #2]
   28428:	f043 0301 	orr.w	r3, r3, #1
   2842c:	8053      	strh	r3, [r2, #2]
   2842e:	3004      	adds	r0, #4
	return mem;
   28430:	e7da      	b.n	283e8 <sys_heap_alloc+0x8>

00028432 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   28432:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28436:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   28438:	424a      	negs	r2, r1
   2843a:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   2843e:	ea31 0202 	bics.w	r2, r1, r2
{
   28442:	4603      	mov	r3, r0
	if (align != rew) {
   28444:	d00a      	beq.n	2845c <sys_heap_aligned_alloc+0x2a>
		return false;
   28446:	2f04      	cmp	r7, #4
   28448:	463a      	mov	r2, r7
   2844a:	46b9      	mov	r9, r7
   2844c:	bf28      	it	cs
   2844e:	2204      	movcs	r2, #4
		align -= rew;
   28450:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   28452:	b974      	cbnz	r4, 28472 <sys_heap_aligned_alloc+0x40>
		return NULL;
   28454:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
   28456:	4628      	mov	r0, r5
   28458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
   2845c:	2904      	cmp	r1, #4
   2845e:	d804      	bhi.n	2846a <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
   28460:	4621      	mov	r1, r4
}
   28462:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   28466:	f7ff bfbb 	b.w	283e0 <sys_heap_alloc>
		rew = 0;
   2846a:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   2846e:	2204      	movs	r2, #4
   28470:	e7ef      	b.n	28452 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
   28472:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
   28474:	68b3      	ldr	r3, [r6, #8]
   28476:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   2847a:	d9eb      	bls.n	28454 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2847c:	f104 010b 	add.w	r1, r4, #11
   28480:	4439      	add	r1, r7
   28482:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   28484:	08c9      	lsrs	r1, r1, #3
   28486:	4630      	mov	r0, r6
   28488:	f7ff ff04 	bl	28294 <alloc_chunk>
	if (c0 == 0) {
   2848c:	4680      	mov	r8, r0
   2848e:	2800      	cmp	r0, #0
   28490:	d0e0      	beq.n	28454 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   28492:	f109 0504 	add.w	r5, r9, #4
   28496:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   2849a:	1e7b      	subs	r3, r7, #1
   2849c:	4435      	add	r5, r6
   2849e:	441d      	add	r5, r3
   284a0:	427f      	negs	r7, r7
   284a2:	403d      	ands	r5, r7
   284a4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   284a8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   284aa:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   284ac:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   284ae:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   284b0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   284b4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   284b6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   284ba:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   284be:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   284c2:	d208      	bcs.n	284d6 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
   284c4:	4601      	mov	r1, r0
   284c6:	463a      	mov	r2, r7
   284c8:	4630      	mov	r0, r6
   284ca:	f7ff ff2f 	bl	2832c <split_chunks>
		free_list_add(h, c0);
   284ce:	4641      	mov	r1, r8
   284d0:	4630      	mov	r0, r6
   284d2:	f7ff fe8e 	bl	281f2 <free_list_add>
	return c + chunk_size(h, c);
   284d6:	4639      	mov	r1, r7
   284d8:	4630      	mov	r0, r6
   284da:	f7ff fe85 	bl	281e8 <chunk_size>
   284de:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   284e0:	4284      	cmp	r4, r0
   284e2:	d207      	bcs.n	284f4 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
   284e4:	4630      	mov	r0, r6
   284e6:	4622      	mov	r2, r4
   284e8:	f7ff ff20 	bl	2832c <split_chunks>
		free_list_add(h, c_end);
   284ec:	4621      	mov	r1, r4
   284ee:	4630      	mov	r0, r6
   284f0:	f7ff fe7f 	bl	281f2 <free_list_add>
	void *cmem = &buf[c];
   284f4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   284f8:	8873      	ldrh	r3, [r6, #2]
   284fa:	f043 0301 	orr.w	r3, r3, #1
   284fe:	8073      	strh	r3, [r6, #2]
   28500:	e7a9      	b.n	28456 <sys_heap_aligned_alloc+0x24>

00028502 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   28502:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   28504:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   28506:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   28508:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   2850c:	f021 0107 	bic.w	r1, r1, #7
{
   28510:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   28512:	1acd      	subs	r5, r1, r3
   28514:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
   28516:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
   28518:	fab2 f082 	clz	r0, r2
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   2851c:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
   28520:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28522:	3407      	adds	r4, #7
	h->avail_buckets = 0;
   28524:	2600      	movs	r6, #0
   28526:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   28528:	f1c0 0020 	rsb	r0, r0, #32
   2852c:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
   28530:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
   28532:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   28534:	eb04 0080 	add.w	r0, r4, r0, lsl #2
   28538:	4284      	cmp	r4, r0
   2853a:	d118      	bne.n	2856e <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2853c:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2853e:	f040 0001 	orr.w	r0, r0, #1
   28542:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
   28544:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   28548:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2854a:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
   2854c:	801e      	strh	r6, [r3, #0]
   2854e:	8067      	strh	r7, [r4, #2]
   28550:	195c      	adds	r4, r3, r5
   28552:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
   28556:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
   2855a:	8066      	strh	r6, [r4, #2]
   2855c:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2855e:	8850      	ldrh	r0, [r2, #2]
   28560:	f040 0001 	orr.w	r0, r0, #1
   28564:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
   28566:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
   28568:	4618      	mov	r0, r3
   2856a:	f7ff be42 	b.w	281f2 <free_list_add>
		h->buckets[i].next = 0;
   2856e:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
   28572:	e7e1      	b.n	28538 <sys_heap_init+0x36>

00028574 <_ldiv5>:
	uint32_t v_lo = *v;
   28574:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   28578:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   2857a:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   2857e:	fba2 2403 	umull	r2, r4, r2, r3
   28582:	18d5      	adds	r5, r2, r3
   28584:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   28588:	fba1 1303 	umull	r1, r3, r1, r3
   2858c:	1852      	adds	r2, r2, r1
   2858e:	eb44 0403 	adc.w	r4, r4, r3
   28592:	1952      	adds	r2, r2, r5
   28594:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   28598:	1889      	adds	r1, r1, r2
   2859a:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   2859e:	e9c0 1300 	strd	r1, r3, [r0]
}
   285a2:	bd30      	pop	{r4, r5, pc}

000285a4 <_get_digit>:
	if (*digit_count > 0) {
   285a4:	680a      	ldr	r2, [r1, #0]
   285a6:	2a00      	cmp	r2, #0
{
   285a8:	b510      	push	{r4, lr}
   285aa:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   285ac:	dd0f      	ble.n	285ce <_get_digit+0x2a>
		--*digit_count;
   285ae:	3a01      	subs	r2, #1
   285b0:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   285b2:	681a      	ldr	r2, [r3, #0]
   285b4:	6844      	ldr	r4, [r0, #4]
   285b6:	200a      	movs	r0, #10
   285b8:	fba2 1200 	umull	r1, r2, r2, r0
   285bc:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   285c0:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   285c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   285c6:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   285ca:	3030      	adds	r0, #48	; 0x30
}
   285cc:	bd10      	pop	{r4, pc}
		rval = '0';
   285ce:	2030      	movs	r0, #48	; 0x30
   285d0:	e7fc      	b.n	285cc <_get_digit+0x28>

000285d2 <outs>:
{
   285d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   285d6:	4607      	mov	r7, r0
   285d8:	4688      	mov	r8, r1
   285da:	4615      	mov	r5, r2
   285dc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   285de:	4614      	mov	r4, r2
   285e0:	42b4      	cmp	r4, r6
   285e2:	eba4 0005 	sub.w	r0, r4, r5
   285e6:	d302      	bcc.n	285ee <outs+0x1c>
   285e8:	b93e      	cbnz	r6, 285fa <outs+0x28>
   285ea:	7823      	ldrb	r3, [r4, #0]
   285ec:	b12b      	cbz	r3, 285fa <outs+0x28>
		int rc = out((int)*sp++, ctx);
   285ee:	f814 0b01 	ldrb.w	r0, [r4], #1
   285f2:	4641      	mov	r1, r8
   285f4:	47b8      	blx	r7
		if (rc < 0) {
   285f6:	2800      	cmp	r0, #0
   285f8:	daf2      	bge.n	285e0 <outs+0xe>
}
   285fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000285fe <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
   285fe:	4602      	mov	r2, r0
   28600:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
   28602:	68c0      	ldr	r0, [r0, #12]
   28604:	6814      	ldr	r4, [r2, #0]
   28606:	42a0      	cmp	r0, r4
   28608:	d904      	bls.n	28614 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
   2860a:	3801      	subs	r0, #1
   2860c:	1b00      	subs	r0, r0, r4
   2860e:	6008      	str	r0, [r1, #0]

		return false;
   28610:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
   28612:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28614:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
   28616:	b918      	cbnz	r0, 28620 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
   28618:	3b01      	subs	r3, #1
   2861a:	1b1b      	subs	r3, r3, r4
   2861c:	600b      	str	r3, [r1, #0]
		return false;
   2861e:	e7f8      	b.n	28612 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
   28620:	1b1b      	subs	r3, r3, r4
   28622:	600b      	str	r3, [r1, #0]
	return true;
   28624:	2001      	movs	r0, #1
   28626:	e7f4      	b.n	28612 <free_space+0x14>

00028628 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
   28628:	b510      	push	{r4, lr}
   2862a:	4604      	mov	r4, r0
	uint32_t i = idx + val;
   2862c:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   2862e:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
   28630:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
   28632:	07d2      	lsls	r2, r2, #31
   28634:	d502      	bpl.n	2863c <idx_inc+0x14>
		return i & (buffer->size - 1);
   28636:	3b01      	subs	r3, #1
   28638:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
   2863a:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
   2863c:	4298      	cmp	r0, r3
   2863e:	bf28      	it	cs
   28640:	1ac0      	subcs	r0, r0, r3
   28642:	e7fa      	b.n	2863a <idx_inc+0x12>

00028644 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
   28644:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28646:	69c2      	ldr	r2, [r0, #28]
{
   28648:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
   2864a:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   2864c:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
   2864e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
   28652:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28656:	462a      	mov	r2, r5
   28658:	6801      	ldr	r1, [r0, #0]
{
   2865a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   2865c:	f7ff ffe4 	bl	28628 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28660:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
   28662:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28664:	462a      	mov	r2, r5
   28666:	4620      	mov	r0, r4
   28668:	f7ff ffde 	bl	28628 <idx_inc>
   2866c:	6060      	str	r0, [r4, #4]
}
   2866e:	bd38      	pop	{r3, r4, r5, pc}

00028670 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
   28670:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28674:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   28678:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
   2867c:	461f      	mov	r7, r3
	*user_packet = false;
   2867e:	2300      	movs	r3, #0
   28680:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
   28682:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   28686:	f003 0303 	and.w	r3, r3, #3
   2868a:	2b02      	cmp	r3, #2
{
   2868c:	4604      	mov	r4, r0
   2868e:	468b      	mov	fp, r1
   28690:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
   28692:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   28696:	d103      	bne.n	286a0 <drop_item_locked+0x30>
		return item->skip.len;
   28698:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
   2869c:	08ad      	lsrs	r5, r5, #2
   2869e:	d12e      	bne.n	286fe <drop_item_locked+0x8e>
   286a0:	69a3      	ldr	r3, [r4, #24]
   286a2:	4630      	mov	r0, r6
   286a4:	4798      	blx	r3
   286a6:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
   286a8:	f1b8 0f00 	cmp.w	r8, #0
   286ac:	d036      	beq.n	2871c <drop_item_locked+0xac>
		if (item->hdr.busy) {
   286ae:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
   286b2:	079b      	lsls	r3, r3, #30
   286b4:	d52f      	bpl.n	28716 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
   286b6:	f10b 0101 	add.w	r1, fp, #1
   286ba:	4620      	mov	r0, r4
   286bc:	f7ff ffc2 	bl	28644 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   286c0:	6861      	ldr	r1, [r4, #4]
   286c2:	462a      	mov	r2, r5
   286c4:	4620      	mov	r0, r4
   286c6:	f7ff ffaf 	bl	28628 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   286ca:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
   286cc:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   286ce:	462a      	mov	r2, r5
   286d0:	4620      	mov	r0, r4
   286d2:	f7ff ffa9 	bl	28628 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   286d6:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
   286d8:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   286da:	68e1      	ldr	r1, [r4, #12]
   286dc:	4620      	mov	r0, r4
   286de:	f7ff ffa3 	bl	28628 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   286e2:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
   286e4:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
   286e8:	f002 0203 	and.w	r2, r2, #3
   286ec:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
   286ee:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
   286f2:	d10c      	bne.n	2870e <drop_item_locked+0x9e>
		return item->skip.len;
   286f4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
   286f8:	089b      	lsrs	r3, r3, #2
   286fa:	d008      	beq.n	2870e <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
   286fc:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
   286fe:	68e1      	ldr	r1, [r4, #12]
   28700:	462a      	mov	r2, r5
   28702:	4620      	mov	r0, r4
   28704:	f7ff ff90 	bl	28628 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
   28708:	e9c4 0002 	strd	r0, r0, [r4, #8]
   2870c:	e007      	b.n	2871e <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
   2870e:	69a3      	ldr	r3, [r4, #24]
   28710:	4630      	mov	r0, r6
   28712:	4798      	blx	r3
   28714:	4405      	add	r5, r0
			*user_packet = true;
   28716:	2301      	movs	r3, #1
   28718:	703b      	strb	r3, [r7, #0]
   2871a:	e7f0      	b.n	286fe <drop_item_locked+0x8e>
		item = NULL;
   2871c:	4646      	mov	r6, r8
	}

	return item;
}
   2871e:	4630      	mov	r0, r6
   28720:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028724 <mpsc_pbuf_init>:
{
   28724:	b538      	push	{r3, r4, r5, lr}
   28726:	460d      	mov	r5, r1
   28728:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2872a:	221c      	movs	r2, #28
   2872c:	2100      	movs	r1, #0
   2872e:	f005 ff3b 	bl	2e5a8 <memset>
	buffer->get_wlen = cfg->get_wlen;
   28732:	68eb      	ldr	r3, [r5, #12]
	buffer->size = cfg->size;
   28734:	686a      	ldr	r2, [r5, #4]
	buffer->get_wlen = cfg->get_wlen;
   28736:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
   28738:	68ab      	ldr	r3, [r5, #8]
   2873a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
   2873c:	682b      	ldr	r3, [r5, #0]
   2873e:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
   28740:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
   28742:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
   28744:	b122      	cbz	r2, 28750 <mpsc_pbuf_init+0x2c>
   28746:	1e51      	subs	r1, r2, #1
   28748:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
   2874a:	bf08      	it	eq
   2874c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
   28750:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
   28752:	2201      	movs	r2, #1
   28754:	f104 0024 	add.w	r0, r4, #36	; 0x24
   28758:	2100      	movs	r1, #0
}
   2875a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2875e:	f005 bafe 	b.w	2dd5e <z_impl_k_sem_init>

00028762 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
   28762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28766:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
   28768:	6a03      	ldr	r3, [r0, #32]
   2876a:	3b01      	subs	r3, #1
   2876c:	428b      	cmp	r3, r1
{
   2876e:	b085      	sub	sp, #20
   28770:	4604      	mov	r4, r0
   28772:	460f      	mov	r7, r1
   28774:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
   28776:	d364      	bcc.n	28842 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
   28778:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
   2877a:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
   2877c:	f100 0b24 	add.w	fp, r0, #36	; 0x24
	__asm__ volatile(
   28780:	f04f 0320 	mov.w	r3, #32
   28784:	f3ef 8611 	mrs	r6, BASEPRI
   28788:	f383 8812 	msr	BASEPRI_MAX, r3
   2878c:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
   28790:	a903      	add	r1, sp, #12
   28792:	4620      	mov	r0, r4
   28794:	f7ff ff33 	bl	285fe <free_space>
		if (free_wlen >= wlen) {
   28798:	9903      	ldr	r1, [sp, #12]
   2879a:	42b9      	cmp	r1, r7
   2879c:	d321      	bcc.n	287e2 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
   2879e:	6821      	ldr	r1, [r4, #0]
			item =
   287a0:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
   287a2:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
   287a6:	f022 0203 	bic.w	r2, r2, #3
   287aa:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
   287ae:	4620      	mov	r0, r4
   287b0:	463a      	mov	r2, r7
			item =
   287b2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
   287b6:	f7ff ff37 	bl	28628 <idx_inc>
		cont = false;
   287ba:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
   287bc:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
   287be:	f386 8811 	msr	BASEPRI, r6
   287c2:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
   287c6:	2b00      	cmp	r3, #0
   287c8:	d03d      	beq.n	28846 <mpsc_pbuf_alloc+0xe4>
   287ca:	2d00      	cmp	r5, #0
   287cc:	d0d8      	beq.n	28780 <mpsc_pbuf_alloc+0x1e>
   287ce:	f89d 300b 	ldrb.w	r3, [sp, #11]
   287d2:	2b00      	cmp	r3, #0
   287d4:	d0d4      	beq.n	28780 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
   287d6:	4629      	mov	r1, r5
   287d8:	6963      	ldr	r3, [r4, #20]
   287da:	4620      	mov	r0, r4
   287dc:	4798      	blx	r3
			dropped_item = NULL;
   287de:	2500      	movs	r5, #0
   287e0:	e7ce      	b.n	28780 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
   287e2:	b128      	cbz	r0, 287f0 <mpsc_pbuf_alloc+0x8e>
   287e4:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
   287e6:	4620      	mov	r0, r4
   287e8:	f7ff ff2c 	bl	28644 <add_skip_item>
			cont = true;
   287ec:	9b01      	ldr	r3, [sp, #4]
   287ee:	e7e6      	b.n	287be <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   287f0:	ea58 0309 	orrs.w	r3, r8, r9
   287f4:	d017      	beq.n	28826 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
   287f6:	f005 f9a2 	bl	2db3e <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   287fa:	b9a0      	cbnz	r0, 28826 <mpsc_pbuf_alloc+0xc4>
   287fc:	f386 8811 	msr	BASEPRI, r6
   28800:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
   28804:	4642      	mov	r2, r8
   28806:	464b      	mov	r3, r9
   28808:	4658      	mov	r0, fp
   2880a:	f7fc fa7f 	bl	24d0c <z_impl_k_sem_take>
	__asm__ volatile(
   2880e:	f04f 0320 	mov.w	r3, #32
   28812:	f3ef 8611 	mrs	r6, BASEPRI
   28816:	f383 8812 	msr	BASEPRI_MAX, r3
   2881a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
   2881e:	fab0 f380 	clz	r3, r0
   28822:	095b      	lsrs	r3, r3, #5
   28824:	e7cb      	b.n	287be <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
   28826:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
   28828:	9903      	ldr	r1, [sp, #12]
   2882a:	f10d 030b 	add.w	r3, sp, #11
   2882e:	f3c2 0240 	ubfx	r2, r2, #1, #1
   28832:	4620      	mov	r0, r4
   28834:	f7ff ff1c 	bl	28670 <drop_item_locked>
			cont = dropped_item != NULL;
   28838:	1e03      	subs	r3, r0, #0
   2883a:	4605      	mov	r5, r0
   2883c:	bf18      	it	ne
   2883e:	2301      	movne	r3, #1
   28840:	e7bd      	b.n	287be <mpsc_pbuf_alloc+0x5c>
		return NULL;
   28842:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
   28846:	4650      	mov	r0, sl
   28848:	b005      	add	sp, #20
   2884a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002884e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
   2884e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   28850:	6983      	ldr	r3, [r0, #24]
{
   28852:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   28854:	4608      	mov	r0, r1
{
   28856:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   28858:	4798      	blx	r3
   2885a:	4602      	mov	r2, r0
   2885c:	f04f 0320 	mov.w	r3, #32
   28860:	f3ef 8611 	mrs	r6, BASEPRI
   28864:	f383 8812 	msr	BASEPRI_MAX, r3
   28868:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
   2886c:	782b      	ldrb	r3, [r5, #0]
   2886e:	f043 0301 	orr.w	r3, r3, #1
   28872:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
   28874:	6861      	ldr	r1, [r4, #4]
   28876:	4620      	mov	r0, r4
   28878:	f7ff fed6 	bl	28628 <idx_inc>
   2887c:	6060      	str	r0, [r4, #4]
	__asm__ volatile(
   2887e:	f386 8811 	msr	BASEPRI, r6
   28882:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
   28886:	bd70      	pop	{r4, r5, r6, pc}

00028888 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
   28888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2888c:	4604      	mov	r4, r0
	__asm__ volatile(
   2888e:	f04f 0320 	mov.w	r3, #32
   28892:	f3ef 8611 	mrs	r6, BASEPRI
   28896:	f383 8812 	msr	BASEPRI_MAX, r3
   2889a:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   2889e:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
   288a2:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   288a4:	bf88      	it	hi
   288a6:	6a23      	ldrhi	r3, [r4, #32]
   288a8:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
   288aa:	b1f3      	cbz	r3, 288ea <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
   288ac:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
   288ae:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
   288b2:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
   288b6:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
   288ba:	d016      	beq.n	288ea <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
   288bc:	2b02      	cmp	r3, #2
   288be:	d103      	bne.n	288c8 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
   288c0:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
   288c4:	08ad      	lsrs	r5, r5, #2
   288c6:	d115      	bne.n	288f4 <mpsc_pbuf_claim+0x6c>
   288c8:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
   288ca:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
   288cc:	d50f      	bpl.n	288ee <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
   288ce:	f042 0202 	orr.w	r2, r2, #2
   288d2:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
   288d6:	4640      	mov	r0, r8
   288d8:	4798      	blx	r3
   288da:	4639      	mov	r1, r7
   288dc:	4602      	mov	r2, r0
   288de:	4620      	mov	r0, r4
   288e0:	f7ff fea2 	bl	28628 <idx_inc>
		cont = false;
   288e4:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
   288e6:	60a0      	str	r0, [r4, #8]
   288e8:	e011      	b.n	2890e <mpsc_pbuf_claim+0x86>
			item = NULL;
   288ea:	4698      	mov	r8, r3
   288ec:	e00f      	b.n	2890e <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
   288ee:	4640      	mov	r0, r8
   288f0:	4798      	blx	r3
   288f2:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
   288f4:	68a1      	ldr	r1, [r4, #8]
   288f6:	462a      	mov	r2, r5
   288f8:	4620      	mov	r0, r4
   288fa:	f7ff fe95 	bl	28628 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
   288fe:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
   28900:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
   28902:	462a      	mov	r2, r5
   28904:	4620      	mov	r0, r4
   28906:	f7ff fe8f 	bl	28628 <idx_inc>
				cont = true;
   2890a:	2301      	movs	r3, #1
				buffer->rd_idx =
   2890c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2890e:	f386 8811 	msr	BASEPRI, r6
   28912:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
   28916:	2b00      	cmp	r3, #0
   28918:	d1b9      	bne.n	2888e <mpsc_pbuf_claim+0x6>

	return item;
}
   2891a:	4640      	mov	r0, r8
   2891c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028920 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
   28920:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
   28922:	6983      	ldr	r3, [r0, #24]
{
   28924:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
   28926:	4608      	mov	r0, r1
{
   28928:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
   2892a:	4798      	blx	r3
   2892c:	4602      	mov	r2, r0
	__asm__ volatile(
   2892e:	f04f 0320 	mov.w	r3, #32
   28932:	f3ef 8611 	mrs	r6, BASEPRI
   28936:	f383 8812 	msr	BASEPRI_MAX, r3
   2893a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
   2893e:	782b      	ldrb	r3, [r5, #0]
   28940:	f36f 0300 	bfc	r3, #0, #1
   28944:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28946:	6923      	ldr	r3, [r4, #16]
   28948:	079b      	lsls	r3, r3, #30
   2894a:	d505      	bpl.n	28958 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
   2894c:	68e1      	ldr	r1, [r4, #12]
   2894e:	69e3      	ldr	r3, [r4, #28]
   28950:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
   28954:	429d      	cmp	r5, r3
   28956:	d112      	bne.n	2897e <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
   28958:	782b      	ldrb	r3, [r5, #0]
   2895a:	f36f 0341 	bfc	r3, #1, #1
   2895e:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
   28960:	68e1      	ldr	r1, [r4, #12]
   28962:	4620      	mov	r0, r4
   28964:	f7ff fe60 	bl	28628 <idx_inc>
   28968:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   2896a:	f386 8811 	msr	BASEPRI, r6
   2896e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   28972:	f104 0024 	add.w	r0, r4, #36	; 0x24
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
   28976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2897a:	f7fc b9a1 	b.w	24cc0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
   2897e:	682b      	ldr	r3, [r5, #0]
   28980:	f360 039f 	bfi	r3, r0, #2, #30
   28984:	602b      	str	r3, [r5, #0]
   28986:	e7f0      	b.n	2896a <mpsc_pbuf_free+0x4a>

00028988 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
   28988:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
   2898c:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
   2898e:	bf8a      	itet	hi
   28990:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
   28992:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
   28994:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
   28996:	1e18      	subs	r0, r3, #0
   28998:	bf18      	it	ne
   2899a:	2001      	movne	r0, #1
   2899c:	4770      	bx	lr

0002899e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2899e:	4770      	bx	lr

000289a0 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
   289a0:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
   289a2:	075b      	lsls	r3, r3, #29
   289a4:	d40b      	bmi.n	289be <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   289a6:	6803      	ldr	r3, [r0, #0]
   289a8:	8840      	ldrh	r0, [r0, #2]
   289aa:	f3c3 2349 	ubfx	r3, r3, #9, #10
   289ae:	f3c0 00cb 	ubfx	r0, r0, #3, #12
   289b2:	4418      	add	r0, r3
   289b4:	3013      	adds	r0, #19
   289b6:	f020 0007 	bic.w	r0, r0, #7
   289ba:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
   289bc:	4770      	bx	lr
	return 0;
   289be:	2000      	movs	r0, #0
}
   289c0:	4770      	bx	lr

000289c2 <default_get_timestamp>:
   289c2:	f004 bf1e 	b.w	2d802 <sys_clock_cycle_get_32>

000289c6 <dummy_timestamp>:
   289c6:	2000      	movs	r0, #0
   289c8:	4770      	bx	lr

000289ca <z_log_vprintk>:
{
   289ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   289cc:	2300      	movs	r3, #0
   289ce:	e9cd 0101 	strd	r0, r1, [sp, #4]
   289d2:	9300      	str	r3, [sp, #0]
   289d4:	461a      	mov	r2, r3
   289d6:	4619      	mov	r1, r3
   289d8:	4618      	mov	r0, r3
   289da:	f7de fa69 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   289de:	b005      	add	sp, #20
   289e0:	f85d fb04 	ldr.w	pc, [sp], #4

000289e4 <notify_drop>:
	z_log_dropped(true);
   289e4:	2001      	movs	r0, #1
   289e6:	f7dd beed 	b.w	67c4 <z_log_dropped>

000289ea <get_msg>:
{
   289ea:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
   289ec:	f7dd ff5e 	bl	68ac <z_log_msg2_claim>
}
   289f0:	bd08      	pop	{r3, pc}

000289f2 <z_log_get_tag>:
}
   289f2:	2000      	movs	r0, #0
   289f4:	4770      	bx	lr

000289f6 <buffer_write>:
{
   289f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   289f8:	4606      	mov	r6, r0
   289fa:	460d      	mov	r5, r1
   289fc:	4614      	mov	r4, r2
   289fe:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   28a00:	4621      	mov	r1, r4
   28a02:	4628      	mov	r0, r5
   28a04:	463a      	mov	r2, r7
   28a06:	47b0      	blx	r6
	} while (len != 0);
   28a08:	1a24      	subs	r4, r4, r0
		buf += processed;
   28a0a:	4405      	add	r5, r0
	} while (len != 0);
   28a0c:	d1f8      	bne.n	28a00 <buffer_write+0xa>
}
   28a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028a10 <log_output_flush>:
		     output->control_block->offset,
   28a10:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   28a12:	6881      	ldr	r1, [r0, #8]
{
   28a14:	b510      	push	{r4, lr}
   28a16:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   28a18:	e9d2 2300 	ldrd	r2, r3, [r2]
   28a1c:	6800      	ldr	r0, [r0, #0]
   28a1e:	f7ff ffea 	bl	289f6 <buffer_write>
	output->control_block->offset = 0;
   28a22:	6863      	ldr	r3, [r4, #4]
   28a24:	2200      	movs	r2, #0
   28a26:	601a      	str	r2, [r3, #0]
}
   28a28:	bd10      	pop	{r4, pc}

00028a2a <out_func>:
{
   28a2a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   28a2c:	684b      	ldr	r3, [r1, #4]
   28a2e:	681a      	ldr	r2, [r3, #0]
   28a30:	68cb      	ldr	r3, [r1, #12]
   28a32:	429a      	cmp	r2, r3
{
   28a34:	4605      	mov	r5, r0
   28a36:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   28a38:	d102      	bne.n	28a40 <out_func+0x16>
		log_output_flush(out_ctx);
   28a3a:	4608      	mov	r0, r1
   28a3c:	f7ff ffe8 	bl	28a10 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   28a40:	6863      	ldr	r3, [r4, #4]
   28a42:	f3bf 8f5b 	dmb	ish
   28a46:	e853 2f00 	ldrex	r2, [r3]
   28a4a:	1c51      	adds	r1, r2, #1
   28a4c:	e843 1000 	strex	r0, r1, [r3]
   28a50:	2800      	cmp	r0, #0
   28a52:	d1f8      	bne.n	28a46 <out_func+0x1c>
   28a54:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   28a58:	68a3      	ldr	r3, [r4, #8]
   28a5a:	549d      	strb	r5, [r3, r2]
}
   28a5c:	2000      	movs	r0, #0
   28a5e:	bd38      	pop	{r3, r4, r5, pc}

00028a60 <cr_out_func>:
{
   28a60:	b538      	push	{r3, r4, r5, lr}
   28a62:	4605      	mov	r5, r0
   28a64:	460c      	mov	r4, r1
	out_func(c, ctx);
   28a66:	f7ff ffe0 	bl	28a2a <out_func>
	if (c == '\n') {
   28a6a:	2d0a      	cmp	r5, #10
   28a6c:	d103      	bne.n	28a76 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
   28a6e:	4621      	mov	r1, r4
   28a70:	200d      	movs	r0, #13
   28a72:	f7ff ffda 	bl	28a2a <out_func>
}
   28a76:	2000      	movs	r0, #0
   28a78:	bd38      	pop	{r3, r4, r5, pc}

00028a7a <z_log_msg2_finalize>:
{
   28a7a:	b570      	push	{r4, r5, r6, lr}
   28a7c:	460e      	mov	r6, r1
   28a7e:	4615      	mov	r5, r2
   28a80:	4619      	mov	r1, r3
	if (!msg) {
   28a82:	4604      	mov	r4, r0
   28a84:	b918      	cbnz	r0, 28a8e <z_log_msg2_finalize+0x14>
}
   28a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
   28a8a:	f7dd be9b 	b.w	67c4 <z_log_dropped>
	if (data) {
   28a8e:	b143      	cbz	r3, 28aa2 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
   28a90:	f100 030c 	add.w	r3, r0, #12
   28a94:	f3c2 2049 	ubfx	r0, r2, #9, #10
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   28a98:	4418      	add	r0, r3
   28a9a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
   28a9e:	f005 fd62 	bl	2e566 <memcpy>
	msg->hdr.source = source;
   28aa2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
   28aa6:	4620      	mov	r0, r4
}
   28aa8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
   28aac:	f7dd bfc0 	b.w	6a30 <z_log_msg2_commit>

00028ab0 <z_impl_z_log_msg2_static_create>:
{
   28ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
   28ab4:	f3c1 2949 	ubfx	r9, r1, #9, #10
   28ab8:	f3c1 44cb 	ubfx	r4, r1, #19, #12
   28abc:	444c      	add	r4, r9
   28abe:	3413      	adds	r4, #19
   28ac0:	f024 0407 	bic.w	r4, r4, #7
   28ac4:	4606      	mov	r6, r0
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   28ac6:	08a0      	lsrs	r0, r4, #2
{
   28ac8:	460d      	mov	r5, r1
   28aca:	4690      	mov	r8, r2
   28acc:	461f      	mov	r7, r3
	struct log_msg2 *msg = z_log_msg2_alloc(msg_wlen);
   28ace:	f7dd fee5 	bl	689c <z_log_msg2_alloc>
	if (msg) {
   28ad2:	4604      	mov	r4, r0
   28ad4:	b120      	cbz	r0, 28ae0 <z_impl_z_log_msg2_static_create+0x30>
   28ad6:	464a      	mov	r2, r9
   28ad8:	4641      	mov	r1, r8
   28ada:	300c      	adds	r0, #12
   28adc:	f005 fd43 	bl	2e566 <memcpy>
	z_log_msg2_finalize(msg, source, desc, data);
   28ae0:	463b      	mov	r3, r7
   28ae2:	462a      	mov	r2, r5
   28ae4:	4631      	mov	r1, r6
   28ae6:	4620      	mov	r0, r4
}
   28ae8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_log_msg2_finalize(msg, source, desc, data);
   28aec:	f7ff bfc5 	b.w	28a7a <z_log_msg2_finalize>

00028af0 <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
   28af0:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   28af2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
   28af6:	46a4      	mov	ip, r4

  return ret;
}
   28af8:	bc10      	pop	{r4}
  ret = ctx->read_reg(ctx->handle, reg, data, len);
   28afa:	4760      	bx	ip

00028afc <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   28afc:	b410      	push	{r4}
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   28afe:	6804      	ldr	r4, [r0, #0]
   28b00:	6880      	ldr	r0, [r0, #8]
   28b02:	46a4      	mov	ip, r4

  return ret;
}
   28b04:	bc10      	pop	{r4}
  ret = ctx->write_reg(ctx->handle, reg, data, len);
   28b06:	4760      	bx	ip

00028b08 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
   28b08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b0a:	2301      	movs	r3, #1
{
   28b0c:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b0e:	aa01      	add	r2, sp, #4
   28b10:	2120      	movs	r1, #32
{
   28b12:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b14:	f7ff ffec 	bl	28af0 <hts221_read_reg>

  if (ret == 0)
   28b18:	b958      	cbnz	r0, 28b32 <hts221_data_rate_set+0x2a>
  {
    reg.odr = (uint8_t)val;
   28b1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28b1e:	f365 0301 	bfi	r3, r5, #0, #2
   28b22:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b26:	aa01      	add	r2, sp, #4
   28b28:	2301      	movs	r3, #1
   28b2a:	2120      	movs	r1, #32
   28b2c:	4620      	mov	r0, r4
   28b2e:	f7ff ffe5 	bl	28afc <hts221_write_reg>
  }

  return ret;
}
   28b32:	b003      	add	sp, #12
   28b34:	bd30      	pop	{r4, r5, pc}

00028b36 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   28b36:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b38:	2301      	movs	r3, #1
{
   28b3a:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b3c:	aa01      	add	r2, sp, #4
   28b3e:	2120      	movs	r1, #32
{
   28b40:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b42:	f7ff ffd5 	bl	28af0 <hts221_read_reg>

  if (ret == 0)
   28b46:	b958      	cbnz	r0, 28b60 <hts221_block_data_update_set+0x2a>
  {
    reg.bdu = val;
   28b48:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28b4c:	f365 0382 	bfi	r3, r5, #2, #1
   28b50:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b54:	aa01      	add	r2, sp, #4
   28b56:	2301      	movs	r3, #1
   28b58:	2120      	movs	r1, #32
   28b5a:	4620      	mov	r0, r4
   28b5c:	f7ff ffce 	bl	28afc <hts221_write_reg>
  }

  return ret;
}
   28b60:	b003      	add	sp, #12
   28b62:	bd30      	pop	{r4, r5, pc}

00028b64 <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   28b64:	460a      	mov	r2, r1
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
   28b66:	2301      	movs	r3, #1
   28b68:	210f      	movs	r1, #15
   28b6a:	f7ff bfc1 	b.w	28af0 <hts221_read_reg>

00028b6e <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
   28b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b70:	2301      	movs	r3, #1
{
   28b72:	460d      	mov	r5, r1
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b74:	aa01      	add	r2, sp, #4
   28b76:	2120      	movs	r1, #32
{
   28b78:	4604      	mov	r4, r0
  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b7a:	f7ff ffb9 	bl	28af0 <hts221_read_reg>

  if (ret == 0)
   28b7e:	b958      	cbnz	r0, 28b98 <hts221_power_on_set+0x2a>
  {
    reg.pd = val;
   28b80:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28b84:	f365 13c7 	bfi	r3, r5, #7, #1
   28b88:	f88d 3004 	strb.w	r3, [sp, #4]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
   28b8c:	aa01      	add	r2, sp, #4
   28b8e:	2301      	movs	r3, #1
   28b90:	2120      	movs	r1, #32
   28b92:	4620      	mov	r0, r4
   28b94:	f7ff ffb2 	bl	28afc <hts221_write_reg>
  }

  return ret;
}
   28b98:	b003      	add	sp, #12
   28b9a:	bd30      	pop	{r4, r5, pc}

00028b9c <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   28b9c:	b538      	push	{r3, r4, r5, lr}
   28b9e:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   28ba0:	42ab      	cmp	r3, r5
{
   28ba2:	4611      	mov	r1, r2
   28ba4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   28ba6:	d804      	bhi.n	28bb2 <_copy+0x16>
   28ba8:	461a      	mov	r2, r3
   28baa:	f005 fcdc 	bl	2e566 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   28bae:	4620      	mov	r0, r4
   28bb0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   28bb2:	2400      	movs	r4, #0
   28bb4:	e7fb      	b.n	28bae <_copy+0x12>

00028bb6 <_set>:
__ssp_bos_icheck3(memset, void *, int)
   28bb6:	f005 bcf7 	b.w	2e5a8 <memset>

00028bba <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28bba:	09c3      	lsrs	r3, r0, #7
   28bbc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28bc0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   28bc4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   28bc8:	b2c0      	uxtb	r0, r0
   28bca:	4770      	bx	lr

00028bcc <_set_secure.constprop.0>:
 * @param len IN -- number of times the value will be copied
 */
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
   28bcc:	b510      	push	{r4, lr}
   28bce:	460a      	mov	r2, r1
   28bd0:	2100      	movs	r1, #0
   28bd2:	4604      	mov	r4, r0
   28bd4:	f005 fce8 	bl	2e5a8 <memset>
{
  (void) memset(to, val, len);
#ifdef __GNUC__
  __asm__ __volatile__("" :: "g"(to) : "memory");
#endif /* __GNUC__ */
}
   28bd8:	bd10      	pop	{r4, pc}

00028bda <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   28bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28bde:	4605      	mov	r5, r0
   28be0:	b0a8      	sub	sp, #160	; 0xa0
   28be2:	460f      	mov	r7, r1
   28be4:	4614      	mov	r4, r2
   28be6:	2640      	movs	r6, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   28be8:	f102 0824 	add.w	r8, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   28bec:	f7de fb88 	bl	7300 <uECC_get_rng>
		if (!rng_function ||
   28bf0:	4603      	mov	r3, r0
   28bf2:	2800      	cmp	r0, #0
   28bf4:	d03c      	beq.n	28c70 <uECC_make_key+0x96>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   28bf6:	2140      	movs	r1, #64	; 0x40
   28bf8:	a808      	add	r0, sp, #32
   28bfa:	4798      	blx	r3
		if (!rng_function ||
   28bfc:	b3c0      	cbz	r0, 28c70 <uECC_make_key+0x96>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   28bfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   28c02:	f112 031f 	adds.w	r3, r2, #31
   28c06:	bf48      	it	mi
   28c08:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   28c0c:	a908      	add	r1, sp, #32
   28c0e:	4642      	mov	r2, r8
   28c10:	4668      	mov	r0, sp
   28c12:	f343 1347 	sbfx	r3, r3, #5, #8
   28c16:	f000 f9ea 	bl	28fee <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   28c1a:	4622      	mov	r2, r4
   28c1c:	4669      	mov	r1, sp
   28c1e:	a818      	add	r0, sp, #96	; 0x60
   28c20:	f000 fdff 	bl	29822 <EccPoint_compute_public_key>
   28c24:	b310      	cbz	r0, 28c6c <uECC_make_key+0x92>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   28c26:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   28c2a:	1dd9      	adds	r1, r3, #7
   28c2c:	bf48      	it	mi
   28c2e:	f103 010e 	addmi.w	r1, r3, #14
   28c32:	466a      	mov	r2, sp
   28c34:	10c9      	asrs	r1, r1, #3
   28c36:	4638      	mov	r0, r7
   28c38:	f000 fe1b 	bl	29872 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   28c3c:	f994 1001 	ldrsb.w	r1, [r4, #1]
   28c40:	aa18      	add	r2, sp, #96	; 0x60
   28c42:	4628      	mov	r0, r5
   28c44:	f000 fe15 	bl	29872 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28c48:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   28c4c:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   28c50:	ab18      	add	r3, sp, #96	; 0x60
   28c52:	1868      	adds	r0, r5, r1
   28c54:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   28c58:	f000 fe0b 	bl	29872 <uECC_vli_nativeToBytes>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);
   28c5c:	4668      	mov	r0, sp
   28c5e:	2120      	movs	r1, #32
   28c60:	f7ff ffb4 	bl	28bcc <_set_secure.constprop.0>

      			return 1;
   28c64:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   28c66:	b028      	add	sp, #160	; 0xa0
   28c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   28c6c:	3e01      	subs	r6, #1
   28c6e:	d1bd      	bne.n	28bec <uECC_make_key+0x12>
        		return 0;
   28c70:	2000      	movs	r0, #0
   28c72:	e7f8      	b.n	28c66 <uECC_make_key+0x8c>

00028c74 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   28c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   28c78:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   28c7a:	f993 6001 	ldrsb.w	r6, [r3, #1]
	wordcount_t num_words = curve->num_words;
   28c7e:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   28c82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   28c86:	b0a4      	sub	sp, #144	; 0x90
   28c88:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   28c8a:	1dda      	adds	r2, r3, #7
   28c8c:	bf48      	it	mi
   28c8e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   28c92:	ad04      	add	r5, sp, #16
{
   28c94:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   28c96:	af0c      	add	r7, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   28c98:	4628      	mov	r0, r5
   28c9a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   28c9c:	9502      	str	r5, [sp, #8]
   28c9e:	9703      	str	r7, [sp, #12]
	uECC_vli_bytesToNative(_private,
   28ca0:	f000 fdfb 	bl	2989a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   28ca4:	4632      	mov	r2, r6
   28ca6:	4649      	mov	r1, r9
   28ca8:	a814      	add	r0, sp, #80	; 0x50
   28caa:	f000 fdf6 	bl	2989a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   28cae:	ab14      	add	r3, sp, #80	; 0x50
   28cb0:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   28cb4:	4632      	mov	r2, r6
   28cb6:	eb09 0106 	add.w	r1, r9, r6
   28cba:	f000 fdee 	bl	2989a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   28cbe:	4623      	mov	r3, r4
   28cc0:	463a      	mov	r2, r7
   28cc2:	4629      	mov	r1, r5
   28cc4:	4628      	mov	r0, r5
   28cc6:	f000 fd80 	bl	297ca <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   28cca:	fab0 f380 	clz	r3, r0
   28cce:	9401      	str	r4, [sp, #4]
   28cd0:	aa24      	add	r2, sp, #144	; 0x90
   28cd2:	095b      	lsrs	r3, r3, #5
   28cd4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   28cd8:	8863      	ldrh	r3, [r4, #2]
   28cda:	3301      	adds	r3, #1
   28cdc:	b21b      	sxth	r3, r3
   28cde:	9300      	str	r3, [sp, #0]
   28ce0:	f851 2c88 	ldr.w	r2, [r1, #-136]
   28ce4:	a914      	add	r1, sp, #80	; 0x50
   28ce6:	2300      	movs	r3, #0
   28ce8:	4608      	mov	r0, r1
   28cea:	f000 fca1 	bl	29630 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   28cee:	aa14      	add	r2, sp, #80	; 0x50
   28cf0:	4631      	mov	r1, r6
   28cf2:	4640      	mov	r0, r8
   28cf4:	f000 fdbd 	bl	29872 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   28cf8:	4621      	mov	r1, r4
   28cfa:	a814      	add	r0, sp, #80	; 0x50
   28cfc:	f000 fc0d 	bl	2951a <EccPoint_isZero>

clear_and_out:
	/* erasing temporary buffer used to store secret: */
	_set_secure(p2, 0, sizeof(p2));
   28d00:	2108      	movs	r1, #8
	r = !EccPoint_isZero(_public, curve);
   28d02:	4604      	mov	r4, r0
	_set_secure(p2, 0, sizeof(p2));
   28d04:	eb0d 0001 	add.w	r0, sp, r1
   28d08:	f7ff ff60 	bl	28bcc <_set_secure.constprop.0>
	_set_secure(tmp, 0, sizeof(tmp));
   28d0c:	4638      	mov	r0, r7
   28d0e:	2120      	movs	r1, #32
   28d10:	f7ff ff5c 	bl	28bcc <_set_secure.constprop.0>
	_set_secure(_private, 0, sizeof(_private));
   28d14:	4628      	mov	r0, r5
   28d16:	2120      	movs	r1, #32
   28d18:	f7ff ff58 	bl	28bcc <_set_secure.constprop.0>

	return r;
}
   28d1c:	fab4 f084 	clz	r0, r4
   28d20:	0940      	lsrs	r0, r0, #5
   28d22:	b024      	add	sp, #144	; 0x90
   28d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00028d28 <uECC_vli_add>:
{
   28d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28d2a:	2400      	movs	r4, #0
{
   28d2c:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   28d2e:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28d30:	b265      	sxtb	r5, r4
   28d32:	42ab      	cmp	r3, r5
   28d34:	dc00      	bgt.n	28d38 <uECC_vli_add+0x10>
}
   28d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   28d38:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   28d3c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   28d40:	443d      	add	r5, r7
   28d42:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   28d44:	42af      	cmp	r7, r5
   28d46:	f000 0001 	and.w	r0, r0, #1
   28d4a:	bf18      	it	ne
   28d4c:	2000      	movne	r0, #0
		result[i] = sum;
   28d4e:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28d52:	bf88      	it	hi
   28d54:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   28d58:	3401      	adds	r4, #1
   28d5a:	e7e9      	b.n	28d30 <uECC_vli_add+0x8>

00028d5c <uECC_vli_rshift1>:
	vli += num_words;
   28d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   28d60:	2300      	movs	r3, #0
	while (vli-- > end) {
   28d62:	4288      	cmp	r0, r1
   28d64:	d300      	bcc.n	28d68 <uECC_vli_rshift1+0xc>
}
   28d66:	4770      	bx	lr
		uECC_word_t temp = *vli;
   28d68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   28d6c:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   28d70:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   28d72:	07d3      	lsls	r3, r2, #31
   28d74:	e7f5      	b.n	28d62 <uECC_vli_rshift1+0x6>

00028d76 <vli_modInv_update>:
	if (!EVEN(uv)) {
   28d76:	6803      	ldr	r3, [r0, #0]
{
   28d78:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   28d7a:	f013 0601 	ands.w	r6, r3, #1
{
   28d7e:	4605      	mov	r5, r0
   28d80:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   28d82:	d005      	beq.n	28d90 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   28d84:	4613      	mov	r3, r2
   28d86:	460a      	mov	r2, r1
   28d88:	4601      	mov	r1, r0
   28d8a:	f7ff ffcd 	bl	28d28 <uECC_vli_add>
   28d8e:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   28d90:	4621      	mov	r1, r4
   28d92:	4628      	mov	r0, r5
   28d94:	f7ff ffe2 	bl	28d5c <uECC_vli_rshift1>
	if (carry) {
   28d98:	b146      	cbz	r6, 28dac <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   28d9a:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   28d9e:	3a01      	subs	r2, #1
   28da0:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   28da4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   28da8:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   28dac:	bd70      	pop	{r4, r5, r6, pc}

00028dae <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   28dae:	f04f 0c00 	mov.w	ip, #0
{
   28db2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   28db6:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   28db8:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   28dba:	fa4f f98c 	sxtb.w	r9, ip
   28dbe:	454b      	cmp	r3, r9
   28dc0:	dc16      	bgt.n	28df0 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   28dc2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   28dc6:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   28dca:	9601      	str	r6, [sp, #4]
   28dcc:	f04f 0800 	mov.w	r8, #0
   28dd0:	9f01      	ldr	r7, [sp, #4]
   28dd2:	fa53 fe88 	uxtab	lr, r3, r8
   28dd6:	fa4f fe8e 	sxtb.w	lr, lr
   28dda:	45be      	cmp	lr, r7
   28ddc:	fa5f f688 	uxtb.w	r6, r8
   28de0:	db26      	blt.n	28e30 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   28de2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   28de6:	f840 4c04 	str.w	r4, [r0, #-4]
}
   28dea:	b003      	add	sp, #12
   28dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   28df0:	f04f 0e00 	mov.w	lr, #0
   28df4:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   28df8:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   28dfa:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   28dfe:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   28e02:	fba6 6707 	umull	r6, r7, r6, r7
   28e06:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   28e08:	f10e 0e01 	add.w	lr, lr, #1
   28e0c:	417d      	adcs	r5, r7
   28e0e:	fa4f f68e 	sxtb.w	r6, lr
   28e12:	f04f 0b00 	mov.w	fp, #0
   28e16:	bf28      	it	cs
   28e18:	f04f 0b01 	movcs.w	fp, #1
   28e1c:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   28e1e:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   28e20:	ddeb      	ble.n	28dfa <uECC_vli_mult+0x4c>
		result[k] = r0;
   28e22:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   28e26:	462c      	mov	r4, r5
   28e28:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   28e2c:	4645      	mov	r5, r8
   28e2e:	e7c4      	b.n	28dba <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28e30:	3601      	adds	r6, #1
   28e32:	46a9      	mov	r9, r5
   28e34:	b276      	sxtb	r6, r6
   28e36:	eb02 0a8e 	add.w	sl, r2, lr, lsl #2
   28e3a:	2500      	movs	r5, #0
   28e3c:	b277      	sxtb	r7, r6
   28e3e:	42bb      	cmp	r3, r7
   28e40:	dc05      	bgt.n	28e4e <uECC_vli_mult+0xa0>
		result[k] = r0;
   28e42:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   28e46:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   28e4a:	464c      	mov	r4, r9
   28e4c:	e7c0      	b.n	28dd0 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   28e4e:	f06f 0703 	mvn.w	r7, #3
   28e52:	4377      	muls	r7, r6
	uECC_dword_t p = (uECC_dword_t)a * b;
   28e54:	f851 c026 	ldr.w	ip, [r1, r6, lsl #2]
   28e58:	f85a 7007 	ldr.w	r7, [sl, r7]
   28e5c:	fba7 7c0c 	umull	r7, ip, r7, ip
   28e60:	193c      	adds	r4, r7, r4
   28e62:	eb5c 0909 	adcs.w	r9, ip, r9
   28e66:	f04f 0b00 	mov.w	fp, #0
   28e6a:	bf28      	it	cs
   28e6c:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   28e70:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   28e72:	3601      	adds	r6, #1
   28e74:	e7e2      	b.n	28e3c <uECC_vli_mult+0x8e>

00028e76 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   28e76:	2300      	movs	r3, #0
{
   28e78:	b510      	push	{r4, lr}
		 vli[i] = 0;
   28e7a:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   28e7c:	b25a      	sxtb	r2, r3
   28e7e:	4291      	cmp	r1, r2
   28e80:	dc00      	bgt.n	28e84 <uECC_vli_clear+0xe>
}
   28e82:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   28e84:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   28e88:	3301      	adds	r3, #1
   28e8a:	e7f7      	b.n	28e7c <uECC_vli_clear+0x6>

00028e8c <uECC_vli_isZero>:
{
   28e8c:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28e8e:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   28e90:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   28e92:	b25c      	sxtb	r4, r3
   28e94:	42a1      	cmp	r1, r4
   28e96:	dc03      	bgt.n	28ea0 <uECC_vli_isZero+0x14>
}
   28e98:	fab2 f082 	clz	r0, r2
   28e9c:	0940      	lsrs	r0, r0, #5
   28e9e:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   28ea0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   28ea4:	3301      	adds	r3, #1
   28ea6:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   28ea8:	e7f3      	b.n	28e92 <uECC_vli_isZero+0x6>

00028eaa <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28eaa:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   28eac:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   28eae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   28eb2:	f001 011f 	and.w	r1, r1, #31
   28eb6:	fa03 f101 	lsl.w	r1, r3, r1
}
   28eba:	4008      	ands	r0, r1
   28ebc:	4770      	bx	lr

00028ebe <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   28ebe:	3901      	subs	r1, #1
{
   28ec0:	b510      	push	{r4, lr}
   28ec2:	4602      	mov	r2, r0
   28ec4:	b249      	sxtb	r1, r1
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   28ec6:	1d04      	adds	r4, r0, #4
   28ec8:	0608      	lsls	r0, r1, #24
   28eca:	b2cb      	uxtb	r3, r1
   28ecc:	d404      	bmi.n	28ed8 <uECC_vli_numBits+0x1a>
   28ece:	3901      	subs	r1, #1
   28ed0:	f854 0021 	ldr.w	r0, [r4, r1, lsl #2]
   28ed4:	2800      	cmp	r0, #0
   28ed6:	d0f7      	beq.n	28ec8 <uECC_vli_numBits+0xa>
	return (i + 1);
   28ed8:	3301      	adds	r3, #1
   28eda:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   28edc:	b150      	cbz	r0, 28ef4 <uECC_vli_numBits+0x36>
	digit = vli[num_digits - 1];
   28ede:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   28ee2:	3b01      	subs	r3, #1
   28ee4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   28ee8:	2300      	movs	r3, #0
   28eea:	b922      	cbnz	r2, 28ef6 <uECC_vli_numBits+0x38>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   28eec:	3801      	subs	r0, #1
   28eee:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   28ef2:	b200      	sxth	r0, r0
}
   28ef4:	bd10      	pop	{r4, pc}
		digit >>= 1;
   28ef6:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   28ef8:	3301      	adds	r3, #1
   28efa:	e7f6      	b.n	28eea <uECC_vli_numBits+0x2c>

00028efc <uECC_vli_set>:
{
   28efc:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   28efe:	2300      	movs	r3, #0
   28f00:	b25c      	sxtb	r4, r3
   28f02:	42a2      	cmp	r2, r4
   28f04:	dc00      	bgt.n	28f08 <uECC_vli_set+0xc>
}
   28f06:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   28f08:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   28f0c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   28f10:	3301      	adds	r3, #1
   28f12:	e7f5      	b.n	28f00 <uECC_vli_set+0x4>

00028f14 <uECC_vli_cmp_unsafe>:
{
   28f14:	b510      	push	{r4, lr}
	for (i = num_words - 1; i >= 0; --i) {
   28f16:	3a01      	subs	r2, #1
   28f18:	b252      	sxtb	r2, r2
   28f1a:	0613      	lsls	r3, r2, #24
   28f1c:	d501      	bpl.n	28f22 <uECC_vli_cmp_unsafe+0xe>
	return 0;
   28f1e:	2000      	movs	r0, #0
}
   28f20:	bd10      	pop	{r4, pc}
		if (left[i] > right[i]) {
   28f22:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   28f26:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
   28f2a:	429c      	cmp	r4, r3
   28f2c:	d805      	bhi.n	28f3a <uECC_vli_cmp_unsafe+0x26>
		} else if (left[i] < right[i]) {
   28f2e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
   28f32:	d2f2      	bcs.n	28f1a <uECC_vli_cmp_unsafe+0x6>
			return -1;
   28f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28f38:	e7f2      	b.n	28f20 <uECC_vli_cmp_unsafe+0xc>
			return 1;
   28f3a:	2001      	movs	r0, #1
   28f3c:	e7f0      	b.n	28f20 <uECC_vli_cmp_unsafe+0xc>

00028f3e <uECC_vli_equal>:
{
   28f3e:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   28f40:	3a01      	subs	r2, #1
   28f42:	b252      	sxtb	r2, r2
	uECC_word_t diff = 0;
   28f44:	2300      	movs	r3, #0
	for (i = num_words - 1; i >= 0; --i) {
   28f46:	0614      	lsls	r4, r2, #24
   28f48:	d503      	bpl.n	28f52 <uECC_vli_equal+0x14>
}
   28f4a:	1e18      	subs	r0, r3, #0
   28f4c:	bf18      	it	ne
   28f4e:	2001      	movne	r0, #1
   28f50:	bd30      	pop	{r4, r5, pc}
		diff |= (left[i] ^ right[i]);
   28f52:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
   28f56:	f851 5022 	ldr.w	r5, [r1, r2, lsl #2]
   28f5a:	406c      	eors	r4, r5
   28f5c:	4323      	orrs	r3, r4
	for (i = num_words - 1; i >= 0; --i) {
   28f5e:	3a01      	subs	r2, #1
   28f60:	e7f1      	b.n	28f46 <uECC_vli_equal+0x8>

00028f62 <uECC_vli_sub>:
{
   28f62:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   28f64:	2400      	movs	r4, #0
{
   28f66:	4606      	mov	r6, r0
   28f68:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   28f6a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   28f6c:	b265      	sxtb	r5, r4
   28f6e:	4565      	cmp	r5, ip
   28f70:	db00      	blt.n	28f74 <uECC_vli_sub+0x12>
}
   28f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   28f74:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   28f78:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   28f7c:	1a3d      	subs	r5, r7, r0
   28f7e:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   28f80:	42af      	cmp	r7, r5
   28f82:	f000 0001 	and.w	r0, r0, #1
   28f86:	bf18      	it	ne
   28f88:	2000      	movne	r0, #0
		result[i] = diff;
   28f8a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   28f8e:	bf38      	it	cc
   28f90:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   28f94:	3401      	adds	r4, #1
   28f96:	e7e9      	b.n	28f6c <uECC_vli_sub+0xa>

00028f98 <uECC_vli_modAdd>:
{
   28f98:	b570      	push	{r4, r5, r6, lr}
   28f9a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   28f9e:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28fa0:	4633      	mov	r3, r6
{
   28fa2:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   28fa4:	f7ff fec0 	bl	28d28 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   28fa8:	b930      	cbnz	r0, 28fb8 <uECC_vli_modAdd+0x20>
   28faa:	4632      	mov	r2, r6
   28fac:	4621      	mov	r1, r4
   28fae:	4628      	mov	r0, r5
   28fb0:	f7ff ffb0 	bl	28f14 <uECC_vli_cmp_unsafe>
   28fb4:	2801      	cmp	r0, #1
   28fb6:	d007      	beq.n	28fc8 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   28fb8:	4633      	mov	r3, r6
   28fba:	462a      	mov	r2, r5
   28fbc:	4621      	mov	r1, r4
   28fbe:	4620      	mov	r0, r4
}
   28fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   28fc4:	f7ff bfcd 	b.w	28f62 <uECC_vli_sub>
}
   28fc8:	bd70      	pop	{r4, r5, r6, pc}

00028fca <uECC_vli_modSub>:
{
   28fca:	b570      	push	{r4, r5, r6, lr}
   28fcc:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   28fd0:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28fd2:	4633      	mov	r3, r6
{
   28fd4:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   28fd6:	f7ff ffc4 	bl	28f62 <uECC_vli_sub>
	if (l_borrow) {
   28fda:	b138      	cbz	r0, 28fec <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   28fdc:	4633      	mov	r3, r6
   28fde:	462a      	mov	r2, r5
   28fe0:	4621      	mov	r1, r4
   28fe2:	4620      	mov	r0, r4
}
   28fe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   28fe8:	f7ff be9e 	b.w	28d28 <uECC_vli_add>
}
   28fec:	bd70      	pop	{r4, r5, r6, pc}

00028fee <uECC_vli_mmod>:
{
   28fee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ff2:	b0a5      	sub	sp, #148	; 0x94
   28ff4:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   28ff6:	ab14      	add	r3, sp, #80	; 0x50
   28ff8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   28ffc:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   28ffe:	4629      	mov	r1, r5
   29000:	4610      	mov	r0, r2
{
   29002:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   29004:	f7ff ff5b 	bl	28ebe <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   29008:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2900c:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2900e:	2c00      	cmp	r4, #0
   29010:	4621      	mov	r1, r4
   29012:	bfb8      	it	lt
   29014:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29018:	4263      	negs	r3, r4
   2901a:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   2901e:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29022:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   29026:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   29028:	bf58      	it	pl
   2902a:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2902c:	f7ff ff23 	bl	28e76 <uECC_vli_clear>
	if (bit_shift > 0) {
   29030:	2e00      	cmp	r6, #0
   29032:	b208      	sxth	r0, r1
   29034:	dd2b      	ble.n	2908e <uECC_vli_mmod+0xa0>
   29036:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   29038:	2200      	movs	r2, #0
   2903a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2903e:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29042:	4613      	mov	r3, r2
   29044:	429d      	cmp	r5, r3
   29046:	d817      	bhi.n	29078 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   29048:	006b      	lsls	r3, r5, #1
   2904a:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2904c:	ab04      	add	r3, sp, #16
   2904e:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29052:	1e6f      	subs	r7, r5, #1
   29054:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   29056:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   29058:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2905c:	2c00      	cmp	r4, #0
   2905e:	da54      	bge.n	2910a <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   29060:	ab24      	add	r3, sp, #144	; 0x90
   29062:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   29066:	462a      	mov	r2, r5
   29068:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2906c:	4640      	mov	r0, r8
   2906e:	f7ff ff45 	bl	28efc <uECC_vli_set>
}
   29072:	b025      	add	sp, #148	; 0x94
   29074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   29078:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   2907c:	fa0c f106 	lsl.w	r1, ip, r6
   29080:	430a      	orrs	r2, r1
   29082:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   29086:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   29088:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2908c:	e7da      	b.n	29044 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2908e:	ab04      	add	r3, sp, #16
   29090:	462a      	mov	r2, r5
   29092:	4639      	mov	r1, r7
   29094:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   29098:	f7ff ff30 	bl	28efc <uECC_vli_set>
   2909c:	e7d4      	b.n	29048 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2909e:	fa0f fe82 	sxth.w	lr, r2
   290a2:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   290a6:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   290aa:	ab24      	add	r3, sp, #144	; 0x90
   290ac:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   290b0:	3001      	adds	r0, #1
   290b2:	f852 3c80 	ldr.w	r3, [r2, #-128]
   290b6:	440b      	add	r3, r1
   290b8:	ebbb 0303 	subs.w	r3, fp, r3
   290bc:	bf34      	ite	cc
   290be:	2201      	movcc	r2, #1
   290c0:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   290c2:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   290c4:	bf18      	it	ne
   290c6:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   290c8:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   290cc:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   290d0:	9b01      	ldr	r3, [sp, #4]
   290d2:	b242      	sxtb	r2, r0
   290d4:	429a      	cmp	r2, r3
   290d6:	dbe2      	blt.n	2909e <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   290d8:	1a73      	subs	r3, r6, r1
   290da:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   290dc:	4629      	mov	r1, r5
   290de:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   290e0:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   290e2:	f7ff fe3b 	bl	28d5c <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   290e6:	ab24      	add	r3, sp, #144	; 0x90
   290e8:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   290ec:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   290ee:	f853 2c80 	ldr.w	r2, [r3, #-128]
   290f2:	f857 3c80 	ldr.w	r3, [r7, #-128]
   290f6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   290fa:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   290fe:	4648      	mov	r0, r9
   29100:	3c01      	subs	r4, #1
   29102:	f7ff fe2b 	bl	28d5c <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   29106:	b224      	sxth	r4, r4
   29108:	e7a8      	b.n	2905c <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2910a:	ab24      	add	r3, sp, #144	; 0x90
   2910c:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   2910e:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   29112:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   29114:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   29118:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2911c:	e7d8      	b.n	290d0 <uECC_vli_mmod+0xe2>

0002911e <uECC_vli_modMult_fast>:
{
   2911e:	b530      	push	{r4, r5, lr}
   29120:	461c      	mov	r4, r3
   29122:	b091      	sub	sp, #68	; 0x44
   29124:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   29126:	f993 3000 	ldrsb.w	r3, [r3]
   2912a:	4668      	mov	r0, sp
   2912c:	f7ff fe3f 	bl	28dae <uECC_vli_mult>
	curve->mmod_fast(result, product);
   29130:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   29134:	4669      	mov	r1, sp
   29136:	4628      	mov	r0, r5
   29138:	4798      	blx	r3
}
   2913a:	b011      	add	sp, #68	; 0x44
   2913c:	bd30      	pop	{r4, r5, pc}

0002913e <uECC_vli_modSquare_fast>:
{
   2913e:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   29140:	460a      	mov	r2, r1
   29142:	f7ff bfec 	b.w	2911e <uECC_vli_modMult_fast>

00029146 <double_jacobian_default>:
{
   29146:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2914a:	f993 6000 	ldrsb.w	r6, [r3]
{
   2914e:	b092      	sub	sp, #72	; 0x48
   29150:	4604      	mov	r4, r0
   29152:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   29154:	4610      	mov	r0, r2
   29156:	4631      	mov	r1, r6
{
   29158:	4615      	mov	r5, r2
   2915a:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2915c:	f7ff fe96 	bl	28e8c <uECC_vli_isZero>
   29160:	2800      	cmp	r0, #0
   29162:	f040 8091 	bne.w	29288 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   29166:	463a      	mov	r2, r7
   29168:	4649      	mov	r1, r9
   2916a:	a802      	add	r0, sp, #8
   2916c:	f7ff ffe7 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   29170:	463b      	mov	r3, r7
   29172:	aa02      	add	r2, sp, #8
   29174:	4621      	mov	r1, r4
   29176:	a80a      	add	r0, sp, #40	; 0x28
   29178:	f7ff ffd1 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2917c:	a902      	add	r1, sp, #8
   2917e:	4608      	mov	r0, r1
   29180:	463a      	mov	r2, r7
   29182:	f7ff ffdc 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   29186:	463b      	mov	r3, r7
   29188:	462a      	mov	r2, r5
   2918a:	4649      	mov	r1, r9
   2918c:	4648      	mov	r0, r9
   2918e:	f7ff ffc6 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   29192:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   29196:	463a      	mov	r2, r7
   29198:	4629      	mov	r1, r5
   2919a:	4628      	mov	r0, r5
   2919c:	f7ff ffcf 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   291a0:	4643      	mov	r3, r8
   291a2:	462a      	mov	r2, r5
   291a4:	4621      	mov	r1, r4
   291a6:	4620      	mov	r0, r4
   291a8:	9600      	str	r6, [sp, #0]
   291aa:	f7ff fef5 	bl	28f98 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   291ae:	4643      	mov	r3, r8
   291b0:	462a      	mov	r2, r5
   291b2:	4629      	mov	r1, r5
   291b4:	4628      	mov	r0, r5
   291b6:	9600      	str	r6, [sp, #0]
   291b8:	f7ff feee 	bl	28f98 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   291bc:	4643      	mov	r3, r8
   291be:	462a      	mov	r2, r5
   291c0:	4621      	mov	r1, r4
   291c2:	4628      	mov	r0, r5
   291c4:	9600      	str	r6, [sp, #0]
   291c6:	f7ff ff00 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   291ca:	463b      	mov	r3, r7
   291cc:	462a      	mov	r2, r5
   291ce:	4621      	mov	r1, r4
   291d0:	4620      	mov	r0, r4
   291d2:	f7ff ffa4 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   291d6:	4643      	mov	r3, r8
   291d8:	4622      	mov	r2, r4
   291da:	4621      	mov	r1, r4
   291dc:	4628      	mov	r0, r5
   291de:	9600      	str	r6, [sp, #0]
   291e0:	f7ff feda 	bl	28f98 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   291e4:	4643      	mov	r3, r8
   291e6:	9600      	str	r6, [sp, #0]
   291e8:	462a      	mov	r2, r5
   291ea:	4621      	mov	r1, r4
   291ec:	4620      	mov	r0, r4
   291ee:	f7ff fed3 	bl	28f98 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   291f2:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   291f4:	07db      	lsls	r3, r3, #31
   291f6:	d54a      	bpl.n	2928e <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   291f8:	4633      	mov	r3, r6
   291fa:	4642      	mov	r2, r8
   291fc:	4621      	mov	r1, r4
   291fe:	4620      	mov	r0, r4
   29200:	f7ff fd92 	bl	28d28 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   29204:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   29206:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   29208:	4620      	mov	r0, r4
   2920a:	f7ff fda7 	bl	28d5c <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   2920e:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   29212:	3b01      	subs	r3, #1
   29214:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   29218:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2921c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   29220:	463a      	mov	r2, r7
   29222:	4621      	mov	r1, r4
   29224:	4628      	mov	r0, r5
   29226:	f7ff ff8a 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2922a:	4643      	mov	r3, r8
   2922c:	aa0a      	add	r2, sp, #40	; 0x28
   2922e:	4629      	mov	r1, r5
   29230:	4628      	mov	r0, r5
   29232:	9600      	str	r6, [sp, #0]
   29234:	f7ff fec9 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   29238:	4643      	mov	r3, r8
   2923a:	aa0a      	add	r2, sp, #40	; 0x28
   2923c:	4629      	mov	r1, r5
   2923e:	4628      	mov	r0, r5
   29240:	9600      	str	r6, [sp, #0]
   29242:	f7ff fec2 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   29246:	a90a      	add	r1, sp, #40	; 0x28
   29248:	4608      	mov	r0, r1
   2924a:	4643      	mov	r3, r8
   2924c:	462a      	mov	r2, r5
   2924e:	9600      	str	r6, [sp, #0]
   29250:	f7ff febb 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   29254:	463b      	mov	r3, r7
   29256:	aa0a      	add	r2, sp, #40	; 0x28
   29258:	4621      	mov	r1, r4
   2925a:	4620      	mov	r0, r4
   2925c:	f7ff ff5f 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   29260:	aa02      	add	r2, sp, #8
   29262:	4643      	mov	r3, r8
   29264:	4610      	mov	r0, r2
   29266:	4621      	mov	r1, r4
   29268:	9600      	str	r6, [sp, #0]
   2926a:	f7ff feae 	bl	28fca <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2926e:	4632      	mov	r2, r6
   29270:	4629      	mov	r1, r5
   29272:	4620      	mov	r0, r4
   29274:	f7ff fe42 	bl	28efc <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   29278:	4649      	mov	r1, r9
   2927a:	4628      	mov	r0, r5
   2927c:	f7ff fe3e 	bl	28efc <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   29280:	a902      	add	r1, sp, #8
   29282:	4648      	mov	r0, r9
   29284:	f7ff fe3a 	bl	28efc <uECC_vli_set>
}
   29288:	b012      	add	sp, #72	; 0x48
   2928a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2928e:	4631      	mov	r1, r6
   29290:	4620      	mov	r0, r4
   29292:	f7ff fd63 	bl	28d5c <uECC_vli_rshift1>
   29296:	e7c3      	b.n	29220 <double_jacobian_default+0xda>

00029298 <x_side_default>:
{
   29298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2929c:	4615      	mov	r5, r2
   2929e:	b08a      	sub	sp, #40	; 0x28
   292a0:	4604      	mov	r4, r0
   292a2:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   292a4:	221c      	movs	r2, #28
   292a6:	2100      	movs	r1, #0
   292a8:	a803      	add	r0, sp, #12
   292aa:	f005 f97d 	bl	2e5a8 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   292ae:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   292b0:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   292b4:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   292b6:	462a      	mov	r2, r5
   292b8:	4631      	mov	r1, r6
   292ba:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   292bc:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   292be:	f7ff ff3e 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   292c2:	463b      	mov	r3, r7
   292c4:	aa02      	add	r2, sp, #8
   292c6:	4621      	mov	r1, r4
   292c8:	4620      	mov	r0, r4
   292ca:	f8cd 8000 	str.w	r8, [sp]
   292ce:	f7ff fe7c 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   292d2:	462b      	mov	r3, r5
   292d4:	4632      	mov	r2, r6
   292d6:	4621      	mov	r1, r4
   292d8:	4620      	mov	r0, r4
   292da:	f7ff ff20 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   292de:	f8cd 8000 	str.w	r8, [sp]
   292e2:	463b      	mov	r3, r7
   292e4:	f105 0284 	add.w	r2, r5, #132	; 0x84
   292e8:	4621      	mov	r1, r4
   292ea:	4620      	mov	r0, r4
   292ec:	f7ff fe54 	bl	28f98 <uECC_vli_modAdd>
}
   292f0:	b00a      	add	sp, #40	; 0x28
   292f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000292f6 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   292f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   292fa:	b09a      	sub	sp, #104	; 0x68
   292fc:	4616      	mov	r6, r2
   292fe:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   29302:	4644      	mov	r4, r8
{
   29304:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   29306:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2930a:	9500      	str	r5, [sp, #0]
{
   2930c:	4607      	mov	r7, r0
   2930e:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29310:	4623      	mov	r3, r4
   29312:	4602      	mov	r2, r0
   29314:	4631      	mov	r1, r6
   29316:	a802      	add	r0, sp, #8
   29318:	f7ff fe57 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2931c:	a902      	add	r1, sp, #8
   2931e:	4642      	mov	r2, r8
   29320:	4608      	mov	r0, r1
   29322:	f7ff ff0c 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29326:	4643      	mov	r3, r8
   29328:	aa02      	add	r2, sp, #8
   2932a:	4639      	mov	r1, r7
   2932c:	4638      	mov	r0, r7
   2932e:	f7ff fef6 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   29332:	4643      	mov	r3, r8
   29334:	aa02      	add	r2, sp, #8
   29336:	4631      	mov	r1, r6
   29338:	4630      	mov	r0, r6
   2933a:	f7ff fef0 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   2933e:	4623      	mov	r3, r4
   29340:	4652      	mov	r2, sl
   29342:	4649      	mov	r1, r9
   29344:	a802      	add	r0, sp, #8
   29346:	9500      	str	r5, [sp, #0]
   29348:	f7ff fe26 	bl	28f98 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2934c:	4623      	mov	r3, r4
   2934e:	4652      	mov	r2, sl
   29350:	4649      	mov	r1, r9
   29352:	4648      	mov	r0, r9
   29354:	9500      	str	r5, [sp, #0]
   29356:	f7ff fe38 	bl	28fca <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2935a:	4623      	mov	r3, r4
   2935c:	463a      	mov	r2, r7
   2935e:	4631      	mov	r1, r6
   29360:	a80a      	add	r0, sp, #40	; 0x28
   29362:	9500      	str	r5, [sp, #0]
   29364:	f7ff fe31 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   29368:	4643      	mov	r3, r8
   2936a:	aa0a      	add	r2, sp, #40	; 0x28
   2936c:	4651      	mov	r1, sl
   2936e:	4650      	mov	r0, sl
   29370:	f7ff fed5 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   29374:	4623      	mov	r3, r4
   29376:	4632      	mov	r2, r6
   29378:	4639      	mov	r1, r7
   2937a:	a80a      	add	r0, sp, #40	; 0x28
   2937c:	9500      	str	r5, [sp, #0]
   2937e:	f7ff fe0b 	bl	28f98 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   29382:	4642      	mov	r2, r8
   29384:	4649      	mov	r1, r9
   29386:	4630      	mov	r0, r6
   29388:	f7ff fed9 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2938c:	4623      	mov	r3, r4
   2938e:	aa0a      	add	r2, sp, #40	; 0x28
   29390:	4631      	mov	r1, r6
   29392:	4630      	mov	r0, r6
   29394:	9500      	str	r5, [sp, #0]
   29396:	f7ff fe18 	bl	28fca <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2939a:	4623      	mov	r3, r4
   2939c:	4632      	mov	r2, r6
   2939e:	4639      	mov	r1, r7
   293a0:	a812      	add	r0, sp, #72	; 0x48
   293a2:	9500      	str	r5, [sp, #0]
   293a4:	f7ff fe11 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   293a8:	4643      	mov	r3, r8
   293aa:	aa12      	add	r2, sp, #72	; 0x48
   293ac:	4649      	mov	r1, r9
   293ae:	4648      	mov	r0, r9
   293b0:	f7ff feb5 	bl	2911e <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   293b4:	4623      	mov	r3, r4
   293b6:	4652      	mov	r2, sl
   293b8:	4649      	mov	r1, r9
   293ba:	4648      	mov	r0, r9
   293bc:	9500      	str	r5, [sp, #0]
   293be:	f7ff fe04 	bl	28fca <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   293c2:	4642      	mov	r2, r8
   293c4:	a902      	add	r1, sp, #8
   293c6:	a812      	add	r0, sp, #72	; 0x48
   293c8:	f7ff feb9 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   293cc:	a912      	add	r1, sp, #72	; 0x48
   293ce:	4623      	mov	r3, r4
   293d0:	aa0a      	add	r2, sp, #40	; 0x28
   293d2:	4608      	mov	r0, r1
   293d4:	9500      	str	r5, [sp, #0]
   293d6:	f7ff fdf8 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   293da:	4623      	mov	r3, r4
   293dc:	463a      	mov	r2, r7
   293de:	a912      	add	r1, sp, #72	; 0x48
   293e0:	a80a      	add	r0, sp, #40	; 0x28
   293e2:	9500      	str	r5, [sp, #0]
   293e4:	f7ff fdf1 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   293e8:	a90a      	add	r1, sp, #40	; 0x28
   293ea:	4643      	mov	r3, r8
   293ec:	aa02      	add	r2, sp, #8
   293ee:	4608      	mov	r0, r1
   293f0:	f7ff fe95 	bl	2911e <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   293f4:	4623      	mov	r3, r4
   293f6:	4652      	mov	r2, sl
   293f8:	a90a      	add	r1, sp, #40	; 0x28
   293fa:	4650      	mov	r0, sl
   293fc:	9500      	str	r5, [sp, #0]
   293fe:	f7ff fde4 	bl	28fca <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   29402:	462a      	mov	r2, r5
   29404:	a912      	add	r1, sp, #72	; 0x48
   29406:	4638      	mov	r0, r7
   29408:	f7ff fd78 	bl	28efc <uECC_vli_set>
}
   2940c:	b01a      	add	sp, #104	; 0x68
   2940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029412 <uECC_vli_modInv>:
{
   29412:	b5f0      	push	{r4, r5, r6, r7, lr}
   29414:	460f      	mov	r7, r1
   29416:	b0a1      	sub	sp, #132	; 0x84
   29418:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2941a:	4619      	mov	r1, r3
   2941c:	4638      	mov	r0, r7
{
   2941e:	4615      	mov	r5, r2
   29420:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   29422:	f7ff fd33 	bl	28e8c <uECC_vli_isZero>
   29426:	b128      	cbz	r0, 29434 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   29428:	4630      	mov	r0, r6
}
   2942a:	b021      	add	sp, #132	; 0x84
   2942c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   29430:	f7ff bd21 	b.w	28e76 <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   29434:	4622      	mov	r2, r4
   29436:	4639      	mov	r1, r7
   29438:	4668      	mov	r0, sp
   2943a:	f7ff fd5f 	bl	28efc <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   2943e:	4629      	mov	r1, r5
   29440:	a808      	add	r0, sp, #32
   29442:	f7ff fd5b 	bl	28efc <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   29446:	a810      	add	r0, sp, #64	; 0x40
   29448:	4621      	mov	r1, r4
   2944a:	f7ff fd14 	bl	28e76 <uECC_vli_clear>
	u[0] = 1;
   2944e:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   29450:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   29452:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   29454:	f7ff fd0f 	bl	28e76 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   29458:	4622      	mov	r2, r4
   2945a:	a908      	add	r1, sp, #32
   2945c:	4668      	mov	r0, sp
   2945e:	f7ff fd59 	bl	28f14 <uECC_vli_cmp_unsafe>
   29462:	b930      	cbnz	r0, 29472 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   29464:	4622      	mov	r2, r4
   29466:	a910      	add	r1, sp, #64	; 0x40
   29468:	4630      	mov	r0, r6
   2946a:	f7ff fd47 	bl	28efc <uECC_vli_set>
}
   2946e:	b021      	add	sp, #132	; 0x84
   29470:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   29472:	9b00      	ldr	r3, [sp, #0]
   29474:	07da      	lsls	r2, r3, #31
   29476:	d409      	bmi.n	2948c <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   29478:	4621      	mov	r1, r4
   2947a:	4668      	mov	r0, sp
   2947c:	f7ff fc6e 	bl	28d5c <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   29480:	4622      	mov	r2, r4
   29482:	4629      	mov	r1, r5
   29484:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   29486:	f7ff fc76 	bl	28d76 <vli_modInv_update>
   2948a:	e7e5      	b.n	29458 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2948c:	9b08      	ldr	r3, [sp, #32]
   2948e:	07db      	lsls	r3, r3, #31
   29490:	d407      	bmi.n	294a2 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   29492:	4621      	mov	r1, r4
   29494:	a808      	add	r0, sp, #32
   29496:	f7ff fc61 	bl	28d5c <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2949a:	4622      	mov	r2, r4
   2949c:	4629      	mov	r1, r5
   2949e:	a818      	add	r0, sp, #96	; 0x60
   294a0:	e7f1      	b.n	29486 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   294a2:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   294a4:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   294a6:	dd1c      	ble.n	294e2 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   294a8:	aa08      	add	r2, sp, #32
   294aa:	4669      	mov	r1, sp
   294ac:	4668      	mov	r0, sp
   294ae:	f7ff fd58 	bl	28f62 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   294b2:	4621      	mov	r1, r4
   294b4:	4668      	mov	r0, sp
   294b6:	f7ff fc51 	bl	28d5c <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   294ba:	4622      	mov	r2, r4
   294bc:	a918      	add	r1, sp, #96	; 0x60
   294be:	a810      	add	r0, sp, #64	; 0x40
   294c0:	f7ff fd28 	bl	28f14 <uECC_vli_cmp_unsafe>
   294c4:	2800      	cmp	r0, #0
   294c6:	da05      	bge.n	294d4 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   294c8:	a910      	add	r1, sp, #64	; 0x40
   294ca:	4623      	mov	r3, r4
   294cc:	462a      	mov	r2, r5
   294ce:	4608      	mov	r0, r1
   294d0:	f7ff fc2a 	bl	28d28 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   294d4:	a910      	add	r1, sp, #64	; 0x40
   294d6:	4623      	mov	r3, r4
   294d8:	aa18      	add	r2, sp, #96	; 0x60
   294da:	4608      	mov	r0, r1
   294dc:	f7ff fd41 	bl	28f62 <uECC_vli_sub>
   294e0:	e7ce      	b.n	29480 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   294e2:	466a      	mov	r2, sp
   294e4:	a808      	add	r0, sp, #32
   294e6:	f7ff fd3c 	bl	28f62 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   294ea:	4621      	mov	r1, r4
   294ec:	a808      	add	r0, sp, #32
   294ee:	f7ff fc35 	bl	28d5c <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   294f2:	4622      	mov	r2, r4
   294f4:	a910      	add	r1, sp, #64	; 0x40
   294f6:	a818      	add	r0, sp, #96	; 0x60
   294f8:	f7ff fd0c 	bl	28f14 <uECC_vli_cmp_unsafe>
   294fc:	2800      	cmp	r0, #0
   294fe:	da05      	bge.n	2950c <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   29500:	a918      	add	r1, sp, #96	; 0x60
   29502:	4623      	mov	r3, r4
   29504:	462a      	mov	r2, r5
   29506:	4608      	mov	r0, r1
   29508:	f7ff fc0e 	bl	28d28 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   2950c:	a918      	add	r1, sp, #96	; 0x60
   2950e:	4623      	mov	r3, r4
   29510:	aa10      	add	r2, sp, #64	; 0x40
   29512:	4608      	mov	r0, r1
   29514:	f7ff fd25 	bl	28f62 <uECC_vli_sub>
   29518:	e7bf      	b.n	2949a <uECC_vli_modInv+0x88>

0002951a <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   2951a:	7809      	ldrb	r1, [r1, #0]
   2951c:	0049      	lsls	r1, r1, #1
   2951e:	b249      	sxtb	r1, r1
   29520:	f7ff bcb4 	b.w	28e8c <uECC_vli_isZero>

00029524 <apply_z>:
{
   29524:	b5f0      	push	{r4, r5, r6, r7, lr}
   29526:	4615      	mov	r5, r2
   29528:	b089      	sub	sp, #36	; 0x24
   2952a:	461c      	mov	r4, r3
   2952c:	4607      	mov	r7, r0
   2952e:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   29530:	461a      	mov	r2, r3
   29532:	4629      	mov	r1, r5
   29534:	4668      	mov	r0, sp
   29536:	f7ff fe02 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   2953a:	4623      	mov	r3, r4
   2953c:	466a      	mov	r2, sp
   2953e:	4639      	mov	r1, r7
   29540:	4638      	mov	r0, r7
   29542:	f7ff fdec 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   29546:	4623      	mov	r3, r4
   29548:	462a      	mov	r2, r5
   2954a:	4669      	mov	r1, sp
   2954c:	4668      	mov	r0, sp
   2954e:	f7ff fde6 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   29552:	4623      	mov	r3, r4
   29554:	466a      	mov	r2, sp
   29556:	4631      	mov	r1, r6
   29558:	4630      	mov	r0, r6
   2955a:	f7ff fde0 	bl	2911e <uECC_vli_modMult_fast>
}
   2955e:	b009      	add	sp, #36	; 0x24
   29560:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029562 <XYcZ_add>:
{
   29562:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29566:	b08a      	sub	sp, #40	; 0x28
   29568:	4614      	mov	r4, r2
   2956a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2956e:	4655      	mov	r5, sl
{
   29570:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   29572:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   29576:	9600      	str	r6, [sp, #0]
{
   29578:	4680      	mov	r8, r0
   2957a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2957c:	462b      	mov	r3, r5
   2957e:	4602      	mov	r2, r0
   29580:	4621      	mov	r1, r4
   29582:	a802      	add	r0, sp, #8
   29584:	f7ff fd21 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   29588:	a902      	add	r1, sp, #8
   2958a:	4652      	mov	r2, sl
   2958c:	4608      	mov	r0, r1
   2958e:	f7ff fdd6 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   29592:	4653      	mov	r3, sl
   29594:	aa02      	add	r2, sp, #8
   29596:	4641      	mov	r1, r8
   29598:	4640      	mov	r0, r8
   2959a:	f7ff fdc0 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2959e:	4653      	mov	r3, sl
   295a0:	aa02      	add	r2, sp, #8
   295a2:	4621      	mov	r1, r4
   295a4:	4620      	mov	r0, r4
   295a6:	f7ff fdba 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   295aa:	462b      	mov	r3, r5
   295ac:	464a      	mov	r2, r9
   295ae:	4639      	mov	r1, r7
   295b0:	4638      	mov	r0, r7
   295b2:	9600      	str	r6, [sp, #0]
   295b4:	f7ff fd09 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   295b8:	4652      	mov	r2, sl
   295ba:	4639      	mov	r1, r7
   295bc:	a802      	add	r0, sp, #8
   295be:	f7ff fdbe 	bl	2913e <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   295c2:	a902      	add	r1, sp, #8
   295c4:	462b      	mov	r3, r5
   295c6:	4642      	mov	r2, r8
   295c8:	4608      	mov	r0, r1
   295ca:	9600      	str	r6, [sp, #0]
   295cc:	f7ff fcfd 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   295d0:	a902      	add	r1, sp, #8
   295d2:	462b      	mov	r3, r5
   295d4:	4622      	mov	r2, r4
   295d6:	4608      	mov	r0, r1
   295d8:	9600      	str	r6, [sp, #0]
   295da:	f7ff fcf6 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   295de:	462b      	mov	r3, r5
   295e0:	4642      	mov	r2, r8
   295e2:	4621      	mov	r1, r4
   295e4:	4620      	mov	r0, r4
   295e6:	9600      	str	r6, [sp, #0]
   295e8:	f7ff fcef 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   295ec:	4653      	mov	r3, sl
   295ee:	4622      	mov	r2, r4
   295f0:	4649      	mov	r1, r9
   295f2:	4648      	mov	r0, r9
   295f4:	f7ff fd93 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   295f8:	462b      	mov	r3, r5
   295fa:	aa02      	add	r2, sp, #8
   295fc:	4641      	mov	r1, r8
   295fe:	4620      	mov	r0, r4
   29600:	9600      	str	r6, [sp, #0]
   29602:	f7ff fce2 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   29606:	4653      	mov	r3, sl
   29608:	4622      	mov	r2, r4
   2960a:	4639      	mov	r1, r7
   2960c:	4638      	mov	r0, r7
   2960e:	f7ff fd86 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   29612:	462b      	mov	r3, r5
   29614:	464a      	mov	r2, r9
   29616:	4639      	mov	r1, r7
   29618:	4638      	mov	r0, r7
   2961a:	9600      	str	r6, [sp, #0]
   2961c:	f7ff fcd5 	bl	28fca <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   29620:	4632      	mov	r2, r6
   29622:	a902      	add	r1, sp, #8
   29624:	4620      	mov	r0, r4
   29626:	f7ff fc69 	bl	28efc <uECC_vli_set>
}
   2962a:	b00a      	add	sp, #40	; 0x28
   2962c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029630 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   29630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29634:	b0b1      	sub	sp, #196	; 0xc4
   29636:	e9cd 0103 	strd	r0, r1, [sp, #12]
   2963a:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   2963c:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   29640:	a818      	add	r0, sp, #96	; 0x60
{
   29642:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   29644:	463a      	mov	r2, r7
{
   29646:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   29648:	f7ff fc58 	bl	28efc <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   2964c:	00bb      	lsls	r3, r7, #2
   2964e:	9305      	str	r3, [sp, #20]
   29650:	9b04      	ldr	r3, [sp, #16]
   29652:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   29656:	4619      	mov	r1, r3
   29658:	a828      	add	r0, sp, #160	; 0xa0
   2965a:	9302      	str	r3, [sp, #8]
   2965c:	f7ff fc4e 	bl	28efc <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   29660:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   29664:	2d00      	cmp	r5, #0
   29666:	f000 8086 	beq.w	29776 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   2966a:	4632      	mov	r2, r6
   2966c:	4629      	mov	r1, r5
   2966e:	a808      	add	r0, sp, #32
   29670:	f7ff fc44 	bl	28efc <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   29674:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   29678:	4632      	mov	r2, r6
   2967a:	a918      	add	r1, sp, #96	; 0x60
   2967c:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   2967e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   29682:	f7ff fc3b 	bl	28efc <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   29686:	a928      	add	r1, sp, #160	; 0xa0
   29688:	4648      	mov	r0, r9
   2968a:	f7ff fc37 	bl	28efc <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   2968e:	4623      	mov	r3, r4
   29690:	aa08      	add	r2, sp, #32
   29692:	a818      	add	r0, sp, #96	; 0x60
   29694:	f7ff ff46 	bl	29524 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   29698:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   2969c:	4623      	mov	r3, r4
   2969e:	aa08      	add	r2, sp, #32
   296a0:	a928      	add	r1, sp, #160	; 0xa0
   296a2:	a818      	add	r0, sp, #96	; 0x60
   296a4:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   296a6:	4623      	mov	r3, r4
   296a8:	aa08      	add	r2, sp, #32
   296aa:	4649      	mov	r1, r9
   296ac:	4640      	mov	r0, r8
   296ae:	f7ff ff39 	bl	29524 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   296b2:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   296b6:	3d02      	subs	r5, #2
   296b8:	b22d      	sxth	r5, r5
   296ba:	2d00      	cmp	r5, #0
   296bc:	dc62      	bgt.n	29784 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   296be:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   296c2:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   296c4:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   296c8:	ab10      	add	r3, sp, #64	; 0x40
   296ca:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   296ce:	43ed      	mvns	r5, r5
   296d0:	ab20      	add	r3, sp, #128	; 0x80
   296d2:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   296d6:	f005 0501 	and.w	r5, r5, #1
   296da:	ab10      	add	r3, sp, #64	; 0x40
   296dc:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   296e0:	ab20      	add	r3, sp, #128	; 0x80
   296e2:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   296e6:	462b      	mov	r3, r5
   296e8:	464a      	mov	r2, r9
   296ea:	4631      	mov	r1, r6
   296ec:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   296ee:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   296f2:	f7ff fe00 	bl	292f6 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   296f6:	4653      	mov	r3, sl
   296f8:	aa10      	add	r2, sp, #64	; 0x40
   296fa:	a918      	add	r1, sp, #96	; 0x60
   296fc:	a808      	add	r0, sp, #32
   296fe:	9700      	str	r7, [sp, #0]
   29700:	f7ff fc63 	bl	28fca <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   29704:	a908      	add	r1, sp, #32
   29706:	4623      	mov	r3, r4
   29708:	4632      	mov	r2, r6
   2970a:	4608      	mov	r0, r1
   2970c:	f7ff fd07 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   29710:	a908      	add	r1, sp, #32
   29712:	9a04      	ldr	r2, [sp, #16]
   29714:	4623      	mov	r3, r4
   29716:	4608      	mov	r0, r1
   29718:	f7ff fd01 	bl	2911e <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   2971c:	a908      	add	r1, sp, #32
   2971e:	463b      	mov	r3, r7
   29720:	4652      	mov	r2, sl
   29722:	4608      	mov	r0, r1
   29724:	f7ff fe75 	bl	29412 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   29728:	a908      	add	r1, sp, #32
   2972a:	9a02      	ldr	r2, [sp, #8]
   2972c:	4623      	mov	r3, r4
   2972e:	4608      	mov	r0, r1
   29730:	f7ff fcf5 	bl	2911e <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   29734:	a908      	add	r1, sp, #32
   29736:	4623      	mov	r3, r4
   29738:	4642      	mov	r2, r8
   2973a:	4608      	mov	r0, r1
   2973c:	f7ff fcef 	bl	2911e <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   29740:	4633      	mov	r3, r6
   29742:	4642      	mov	r2, r8
   29744:	4629      	mov	r1, r5
   29746:	4648      	mov	r0, r9
   29748:	9400      	str	r4, [sp, #0]
   2974a:	f7ff ff0a 	bl	29562 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   2974e:	4623      	mov	r3, r4
   29750:	aa08      	add	r2, sp, #32
   29752:	a920      	add	r1, sp, #128	; 0x80
   29754:	a810      	add	r0, sp, #64	; 0x40
   29756:	f7ff fee5 	bl	29524 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   2975a:	9803      	ldr	r0, [sp, #12]
   2975c:	463a      	mov	r2, r7
   2975e:	a910      	add	r1, sp, #64	; 0x40
   29760:	f7ff fbcc 	bl	28efc <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   29764:	9803      	ldr	r0, [sp, #12]
   29766:	9b05      	ldr	r3, [sp, #20]
   29768:	a920      	add	r1, sp, #128	; 0x80
   2976a:	4418      	add	r0, r3
   2976c:	f7ff fbc6 	bl	28efc <uECC_vli_set>
}
   29770:	b031      	add	sp, #196	; 0xc4
   29772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   29776:	4631      	mov	r1, r6
   29778:	a808      	add	r0, sp, #32
   2977a:	f7ff fb7c 	bl	28e76 <uECC_vli_clear>
		z[0] = 1;
   2977e:	2301      	movs	r3, #1
   29780:	9308      	str	r3, [sp, #32]
   29782:	e777      	b.n	29674 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   29784:	4629      	mov	r1, r5
   29786:	4650      	mov	r0, sl
   29788:	f7ff fb8f 	bl	28eaa <uECC_vli_testBit>
   2978c:	fab0 f680 	clz	r6, r0
   29790:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   29792:	f1c6 0101 	rsb	r1, r6, #1
   29796:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   2979a:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   2979e:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   297a2:	4633      	mov	r3, r6
   297a4:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   297a8:	465a      	mov	r2, fp
   297aa:	9400      	str	r4, [sp, #0]
   297ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
   297b0:	f7ff fda1 	bl	292f6 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   297b4:	9907      	ldr	r1, [sp, #28]
   297b6:	9806      	ldr	r0, [sp, #24]
   297b8:	9400      	str	r4, [sp, #0]
   297ba:	460b      	mov	r3, r1
   297bc:	4602      	mov	r2, r0
   297be:	4631      	mov	r1, r6
   297c0:	4658      	mov	r0, fp
   297c2:	f7ff fece 	bl	29562 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   297c6:	3d01      	subs	r5, #1
   297c8:	e776      	b.n	296b8 <EccPoint_mult+0x88>

000297ca <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   297ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   297ce:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   297d2:	f119 081f 	adds.w	r8, r9, #31
{
   297d6:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   297d8:	bf48      	it	mi
   297da:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   297de:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   297e0:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   297e4:	3524      	adds	r5, #36	; 0x24
   297e6:	4601      	mov	r1, r0
{
   297e8:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   297ea:	4643      	mov	r3, r8
   297ec:	462a      	mov	r2, r5
   297ee:	4630      	mov	r0, r6
   297f0:	f7ff fa9a 	bl	28d28 <uECC_vli_add>
   297f4:	4604      	mov	r4, r0
   297f6:	b990      	cbnz	r0, 2981e <regularize_k+0x54>
   297f8:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   297fc:	da06      	bge.n	2980c <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   297fe:	4649      	mov	r1, r9
   29800:	4630      	mov	r0, r6
   29802:	f7ff fb52 	bl	28eaa <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   29806:	1e04      	subs	r4, r0, #0
   29808:	bf18      	it	ne
   2980a:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   2980c:	4643      	mov	r3, r8
   2980e:	462a      	mov	r2, r5
   29810:	4631      	mov	r1, r6
   29812:	4638      	mov	r0, r7
   29814:	f7ff fa88 	bl	28d28 <uECC_vli_add>

	return carry;
}
   29818:	4620      	mov	r0, r4
   2981a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   2981e:	2401      	movs	r4, #1
   29820:	e7f4      	b.n	2980c <regularize_k+0x42>

00029822 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   29822:	b530      	push	{r4, r5, lr}
   29824:	4614      	mov	r4, r2
   29826:	b095      	sub	sp, #84	; 0x54
   29828:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   2982a:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   2982c:	4623      	mov	r3, r4
{
   2982e:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   29830:	a904      	add	r1, sp, #16
   29832:	9102      	str	r1, [sp, #8]
   29834:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   29836:	f7ff ffc8 	bl	297ca <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   2983a:	fab0 f380 	clz	r3, r0
   2983e:	095b      	lsrs	r3, r3, #5
   29840:	aa14      	add	r2, sp, #80	; 0x50
   29842:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   29846:	8863      	ldrh	r3, [r4, #2]
   29848:	9401      	str	r4, [sp, #4]
   2984a:	3301      	adds	r3, #1
   2984c:	b21b      	sxth	r3, r3
   2984e:	9300      	str	r3, [sp, #0]
   29850:	f852 2c48 	ldr.w	r2, [r2, #-72]
   29854:	2300      	movs	r3, #0
   29856:	f104 0144 	add.w	r1, r4, #68	; 0x44
   2985a:	4628      	mov	r0, r5
   2985c:	f7ff fee8 	bl	29630 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   29860:	4621      	mov	r1, r4
   29862:	4628      	mov	r0, r5
   29864:	f7ff fe59 	bl	2951a <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   29868:	fab0 f080 	clz	r0, r0
   2986c:	0940      	lsrs	r0, r0, #5
   2986e:	b015      	add	sp, #84	; 0x54
   29870:	bd30      	pop	{r4, r5, pc}

00029872 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   29872:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   29874:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   29876:	1e4f      	subs	r7, r1, #1
   29878:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   2987a:	428c      	cmp	r4, r1
   2987c:	f105 0501 	add.w	r5, r5, #1
   29880:	db00      	blt.n	29884 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   29882:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   29884:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   29886:	f023 0603 	bic.w	r6, r3, #3
   2988a:	f003 0303 	and.w	r3, r3, #3
   2988e:	5996      	ldr	r6, [r2, r6]
   29890:	00db      	lsls	r3, r3, #3
   29892:	fa26 f303 	lsr.w	r3, r6, r3
   29896:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   29898:	e7ee      	b.n	29878 <uECC_vli_nativeToBytes+0x6>

0002989a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   2989a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2989c:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   2989e:	1cd1      	adds	r1, r2, #3
   298a0:	bf48      	it	mi
   298a2:	1d91      	addmi	r1, r2, #6
   298a4:	f341 0187 	sbfx	r1, r1, #2, #8
{
   298a8:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   298aa:	f7ff fae4 	bl	28e76 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   298ae:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   298b0:	1e67      	subs	r7, r4, #1
   298b2:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   298b4:	42a2      	cmp	r2, r4
   298b6:	f105 0501 	add.w	r5, r5, #1
   298ba:	db00      	blt.n	298be <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   298bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   298be:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   298c0:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   298c4:	5cb2      	ldrb	r2, [r6, r2]
   298c6:	f003 0303 	and.w	r3, r3, #3
   298ca:	00db      	lsls	r3, r3, #3
   298cc:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   298d0:	5842      	ldr	r2, [r0, r1]
   298d2:	431a      	orrs	r2, r3
   298d4:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   298d6:	e7ec      	b.n	298b2 <uECC_vli_bytesToNative+0x18>

000298d8 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   298d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   298da:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   298dc:	f991 6000 	ldrsb.w	r6, [r1]
{
   298e0:	4605      	mov	r5, r0
   298e2:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   298e4:	f7ff fe19 	bl	2951a <EccPoint_isZero>
   298e8:	bb28      	cbnz	r0, 29936 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   298ea:	1d27      	adds	r7, r4, #4
   298ec:	4632      	mov	r2, r6
   298ee:	4629      	mov	r1, r5
   298f0:	4638      	mov	r0, r7
   298f2:	f7ff fb0f 	bl	28f14 <uECC_vli_cmp_unsafe>
   298f6:	2801      	cmp	r0, #1
   298f8:	d120      	bne.n	2993c <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   298fa:	4632      	mov	r2, r6
   298fc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   29900:	4638      	mov	r0, r7
   29902:	f7ff fb07 	bl	28f14 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   29906:	2801      	cmp	r0, #1
   29908:	d118      	bne.n	2993c <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   2990a:	4622      	mov	r2, r4
   2990c:	4668      	mov	r0, sp
   2990e:	f7ff fc16 	bl	2913e <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   29912:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   29916:	4622      	mov	r2, r4
   29918:	4629      	mov	r1, r5
   2991a:	a808      	add	r0, sp, #32
   2991c:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   2991e:	4632      	mov	r2, r6
   29920:	a908      	add	r1, sp, #32
   29922:	4668      	mov	r0, sp
   29924:	f7ff fb0b 	bl	28f3e <uECC_vli_equal>
		return -3;
   29928:	2800      	cmp	r0, #0
   2992a:	bf0c      	ite	eq
   2992c:	2000      	moveq	r0, #0
   2992e:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   29932:	b011      	add	sp, #68	; 0x44
   29934:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   29936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2993a:	e7fa      	b.n	29932 <uECC_valid_point+0x5a>
		return -2;
   2993c:	f06f 0001 	mvn.w	r0, #1
   29940:	e7f7      	b.n	29932 <uECC_valid_point+0x5a>

00029942 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   29942:	b570      	push	{r4, r5, r6, lr}
   29944:	460c      	mov	r4, r1
   29946:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   29948:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   2994a:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   2994e:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   29950:	4601      	mov	r1, r0
   29952:	4668      	mov	r0, sp
   29954:	f7ff ffa1 	bl	2989a <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   29958:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   2995c:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   29960:	18a9      	adds	r1, r5, r2
   29962:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   29966:	f7ff ff98 	bl	2989a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   2996a:	2210      	movs	r2, #16
   2996c:	4631      	mov	r1, r6
   2996e:	4668      	mov	r0, sp
   29970:	f7ff fad0 	bl	28f14 <uECC_vli_cmp_unsafe>
   29974:	b128      	cbz	r0, 29982 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   29976:	4621      	mov	r1, r4
   29978:	4668      	mov	r0, sp
   2997a:	f7ff ffad 	bl	298d8 <uECC_valid_point>
}
   2997e:	b010      	add	sp, #64	; 0x40
   29980:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   29982:	f06f 0003 	mvn.w	r0, #3
   29986:	e7fa      	b.n	2997e <uECC_valid_public_key+0x3c>

00029988 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   29988:	78cb      	ldrb	r3, [r1, #3]
   2998a:	7802      	ldrb	r2, [r0, #0]
   2998c:	4053      	eors	r3, r2
   2998e:	7003      	strb	r3, [r0, #0]
   29990:	884b      	ldrh	r3, [r1, #2]
   29992:	7842      	ldrb	r2, [r0, #1]
   29994:	4053      	eors	r3, r2
   29996:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   29998:	680a      	ldr	r2, [r1, #0]
   2999a:	7883      	ldrb	r3, [r0, #2]
   2999c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299a0:	7083      	strb	r3, [r0, #2]
   299a2:	680a      	ldr	r2, [r1, #0]
   299a4:	78c3      	ldrb	r3, [r0, #3]
   299a6:	4053      	eors	r3, r2
   299a8:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   299aa:	79cb      	ldrb	r3, [r1, #7]
   299ac:	7902      	ldrb	r2, [r0, #4]
   299ae:	4053      	eors	r3, r2
   299b0:	7103      	strb	r3, [r0, #4]
   299b2:	88cb      	ldrh	r3, [r1, #6]
   299b4:	7942      	ldrb	r2, [r0, #5]
   299b6:	4053      	eors	r3, r2
   299b8:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   299ba:	684a      	ldr	r2, [r1, #4]
   299bc:	7983      	ldrb	r3, [r0, #6]
   299be:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299c2:	7183      	strb	r3, [r0, #6]
   299c4:	684a      	ldr	r2, [r1, #4]
   299c6:	79c3      	ldrb	r3, [r0, #7]
   299c8:	4053      	eors	r3, r2
   299ca:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   299cc:	7acb      	ldrb	r3, [r1, #11]
   299ce:	7a02      	ldrb	r2, [r0, #8]
   299d0:	4053      	eors	r3, r2
   299d2:	7203      	strb	r3, [r0, #8]
   299d4:	7a42      	ldrb	r2, [r0, #9]
   299d6:	894b      	ldrh	r3, [r1, #10]
   299d8:	4053      	eors	r3, r2
   299da:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   299dc:	688a      	ldr	r2, [r1, #8]
   299de:	7a83      	ldrb	r3, [r0, #10]
   299e0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   299e4:	7283      	strb	r3, [r0, #10]
   299e6:	688a      	ldr	r2, [r1, #8]
   299e8:	7ac3      	ldrb	r3, [r0, #11]
   299ea:	4053      	eors	r3, r2
   299ec:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   299ee:	7bcb      	ldrb	r3, [r1, #15]
   299f0:	7b02      	ldrb	r2, [r0, #12]
   299f2:	4053      	eors	r3, r2
   299f4:	7303      	strb	r3, [r0, #12]
   299f6:	89cb      	ldrh	r3, [r1, #14]
   299f8:	7b42      	ldrb	r2, [r0, #13]
   299fa:	4053      	eors	r3, r2
   299fc:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   299fe:	68ca      	ldr	r2, [r1, #12]
   29a00:	7b83      	ldrb	r3, [r0, #14]
   29a02:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   29a06:	7383      	strb	r3, [r0, #14]
   29a08:	68ca      	ldr	r2, [r1, #12]
   29a0a:	7bc3      	ldrb	r3, [r0, #15]
   29a0c:	4053      	eors	r3, r2
   29a0e:	73c3      	strb	r3, [r0, #15]
}
   29a10:	4770      	bx	lr

00029a12 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   29a12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   29a14:	7802      	ldrb	r2, [r0, #0]
   29a16:	f88d 2000 	strb.w	r2, [sp]
   29a1a:	7942      	ldrb	r2, [r0, #5]
   29a1c:	f88d 2001 	strb.w	r2, [sp, #1]
   29a20:	7a82      	ldrb	r2, [r0, #10]
   29a22:	f88d 2002 	strb.w	r2, [sp, #2]
   29a26:	7bc2      	ldrb	r2, [r0, #15]
   29a28:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   29a2c:	7902      	ldrb	r2, [r0, #4]
   29a2e:	f88d 2004 	strb.w	r2, [sp, #4]
   29a32:	7a42      	ldrb	r2, [r0, #9]
   29a34:	f88d 2005 	strb.w	r2, [sp, #5]
   29a38:	7b82      	ldrb	r2, [r0, #14]
   29a3a:	f88d 2006 	strb.w	r2, [sp, #6]
   29a3e:	78c2      	ldrb	r2, [r0, #3]
   29a40:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   29a44:	7a02      	ldrb	r2, [r0, #8]
   29a46:	f88d 2008 	strb.w	r2, [sp, #8]
   29a4a:	7b42      	ldrb	r2, [r0, #13]
   29a4c:	f88d 2009 	strb.w	r2, [sp, #9]
   29a50:	7882      	ldrb	r2, [r0, #2]
   29a52:	f88d 200a 	strb.w	r2, [sp, #10]
   29a56:	79c2      	ldrb	r2, [r0, #7]
   29a58:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   29a5c:	7b02      	ldrb	r2, [r0, #12]
   29a5e:	f88d 200c 	strb.w	r2, [sp, #12]
   29a62:	7842      	ldrb	r2, [r0, #1]
   29a64:	7ac3      	ldrb	r3, [r0, #11]
   29a66:	f88d 200d 	strb.w	r2, [sp, #13]
   29a6a:	7982      	ldrb	r2, [r0, #6]
   29a6c:	f88d 200e 	strb.w	r2, [sp, #14]
   29a70:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29a74:	2310      	movs	r3, #16
   29a76:	466a      	mov	r2, sp
   29a78:	4619      	mov	r1, r3
   29a7a:	f7ff f88f 	bl	28b9c <_copy>
}
   29a7e:	b005      	add	sp, #20
   29a80:	f85d fb04 	ldr.w	pc, [sp], #4

00029a84 <mult_row_column>:
{
   29a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29a86:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29a88:	7808      	ldrb	r0, [r1, #0]
{
   29a8a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   29a8c:	f7ff f895 	bl	28bba <_double_byte>
   29a90:	4605      	mov	r5, r0
   29a92:	7860      	ldrb	r0, [r4, #1]
   29a94:	f7ff f891 	bl	28bba <_double_byte>
   29a98:	78a2      	ldrb	r2, [r4, #2]
   29a9a:	7863      	ldrb	r3, [r4, #1]
   29a9c:	4053      	eors	r3, r2
   29a9e:	78e2      	ldrb	r2, [r4, #3]
   29aa0:	4053      	eors	r3, r2
   29aa2:	405d      	eors	r5, r3
   29aa4:	4045      	eors	r5, r0
   29aa6:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   29aa8:	7860      	ldrb	r0, [r4, #1]
   29aaa:	7827      	ldrb	r7, [r4, #0]
   29aac:	f7ff f885 	bl	28bba <_double_byte>
   29ab0:	4605      	mov	r5, r0
   29ab2:	78a0      	ldrb	r0, [r4, #2]
   29ab4:	f7ff f881 	bl	28bba <_double_byte>
   29ab8:	78a3      	ldrb	r3, [r4, #2]
   29aba:	405f      	eors	r7, r3
   29abc:	78e3      	ldrb	r3, [r4, #3]
   29abe:	405f      	eors	r7, r3
   29ac0:	407d      	eors	r5, r7
   29ac2:	4045      	eors	r5, r0
   29ac4:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   29ac6:	78a0      	ldrb	r0, [r4, #2]
   29ac8:	7865      	ldrb	r5, [r4, #1]
   29aca:	7827      	ldrb	r7, [r4, #0]
   29acc:	f7ff f875 	bl	28bba <_double_byte>
   29ad0:	406f      	eors	r7, r5
   29ad2:	4605      	mov	r5, r0
   29ad4:	78e0      	ldrb	r0, [r4, #3]
   29ad6:	f7ff f870 	bl	28bba <_double_byte>
   29ada:	78e3      	ldrb	r3, [r4, #3]
   29adc:	405f      	eors	r7, r3
   29ade:	407d      	eors	r5, r7
   29ae0:	4045      	eors	r5, r0
   29ae2:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   29ae4:	7820      	ldrb	r0, [r4, #0]
   29ae6:	f7ff f868 	bl	28bba <_double_byte>
   29aea:	7863      	ldrb	r3, [r4, #1]
   29aec:	7825      	ldrb	r5, [r4, #0]
   29aee:	405d      	eors	r5, r3
   29af0:	78a3      	ldrb	r3, [r4, #2]
   29af2:	405d      	eors	r5, r3
   29af4:	4045      	eors	r5, r0
   29af6:	78e0      	ldrb	r0, [r4, #3]
   29af8:	f7ff f85f 	bl	28bba <_double_byte>
   29afc:	b2ed      	uxtb	r5, r5
   29afe:	4045      	eors	r5, r0
   29b00:	70f5      	strb	r5, [r6, #3]
}
   29b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029b04 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   29b04:	b570      	push	{r4, r5, r6, lr}
   29b06:	4614      	mov	r4, r2
   29b08:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   29b0a:	4605      	mov	r5, r0
   29b0c:	2800      	cmp	r0, #0
   29b0e:	d049      	beq.n	29ba4 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   29b10:	2900      	cmp	r1, #0
   29b12:	d049      	beq.n	29ba8 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   29b14:	2a00      	cmp	r2, #0
   29b16:	d049      	beq.n	29bac <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   29b18:	2310      	movs	r3, #16
   29b1a:	460a      	mov	r2, r1
   29b1c:	4668      	mov	r0, sp
   29b1e:	4619      	mov	r1, r3
   29b20:	f7ff f83c 	bl	28b9c <_copy>
	add_round_key(state, s->words);
   29b24:	4621      	mov	r1, r4
   29b26:	4668      	mov	r0, sp
   29b28:	f7ff ff2e 	bl	29988 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   29b2c:	3410      	adds	r4, #16
   29b2e:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   29b32:	4668      	mov	r0, sp
   29b34:	f7dd fcae 	bl	7494 <sub_bytes>
		shift_rows(state);
   29b38:	4668      	mov	r0, sp
   29b3a:	f7ff ff6a 	bl	29a12 <shift_rows>
	mult_row_column(t, s);
   29b3e:	4669      	mov	r1, sp
   29b40:	a804      	add	r0, sp, #16
   29b42:	f7ff ff9f 	bl	29a84 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   29b46:	a901      	add	r1, sp, #4
   29b48:	a805      	add	r0, sp, #20
   29b4a:	f7ff ff9b 	bl	29a84 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   29b4e:	a902      	add	r1, sp, #8
   29b50:	a806      	add	r0, sp, #24
   29b52:	f7ff ff97 	bl	29a84 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   29b56:	a903      	add	r1, sp, #12
   29b58:	a807      	add	r0, sp, #28
   29b5a:	f7ff ff93 	bl	29a84 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   29b5e:	2310      	movs	r3, #16
   29b60:	4619      	mov	r1, r3
   29b62:	eb0d 0203 	add.w	r2, sp, r3
   29b66:	4668      	mov	r0, sp
   29b68:	f7ff f818 	bl	28b9c <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   29b6c:	4621      	mov	r1, r4
   29b6e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   29b70:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   29b72:	f7ff ff09 	bl	29988 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   29b76:	42a6      	cmp	r6, r4
   29b78:	d1db      	bne.n	29b32 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   29b7a:	f7dd fc8b 	bl	7494 <sub_bytes>
	shift_rows(state);
   29b7e:	4668      	mov	r0, sp
   29b80:	f7ff ff47 	bl	29a12 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   29b84:	4631      	mov	r1, r6
   29b86:	4668      	mov	r0, sp
   29b88:	f7ff fefe 	bl	29988 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   29b8c:	2310      	movs	r3, #16
   29b8e:	4619      	mov	r1, r3
   29b90:	466a      	mov	r2, sp
   29b92:	4628      	mov	r0, r5
   29b94:	f7ff f802 	bl	28b9c <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   29b98:	4668      	mov	r0, sp
   29b9a:	2210      	movs	r2, #16
   29b9c:	2100      	movs	r1, #0
   29b9e:	f7ff f80a 	bl	28bb6 <_set>

	return TC_CRYPTO_SUCCESS;
   29ba2:	2001      	movs	r0, #1
}
   29ba4:	b008      	add	sp, #32
   29ba6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29ba8:	4608      	mov	r0, r1
   29baa:	e7fb      	b.n	29ba4 <tc_aes_encrypt+0xa0>
   29bac:	4610      	mov	r0, r2
   29bae:	e7f9      	b.n	29ba4 <tc_aes_encrypt+0xa0>

00029bb0 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   29bb0:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29bb2:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   29bb4:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   29bb6:	f912 3b10 	ldrsb.w	r3, [r2], #16
   29bba:	2b00      	cmp	r3, #0
   29bbc:	bfb4      	ite	lt
   29bbe:	2387      	movlt	r3, #135	; 0x87
   29bc0:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   29bc2:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   29bc6:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   29bca:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   29bcc:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   29bd0:	d002      	beq.n	29bd8 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   29bd2:	7813      	ldrb	r3, [r2, #0]
   29bd4:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   29bd6:	e7f4      	b.n	29bc2 <gf_double+0x12>
	}
}
   29bd8:	bd10      	pop	{r4, pc}

00029bda <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   29bda:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   29bdc:	b120      	cbz	r0, 29be8 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   29bde:	2258      	movs	r2, #88	; 0x58
   29be0:	2100      	movs	r1, #0
   29be2:	f7fe ffe8 	bl	28bb6 <_set>
   29be6:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29be8:	bd08      	pop	{r3, pc}

00029bea <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   29bea:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29bec:	4604      	mov	r4, r0
   29bee:	b188      	cbz	r0, 29c14 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29bf0:	2210      	movs	r2, #16
   29bf2:	2100      	movs	r1, #0
   29bf4:	f7fe ffdf 	bl	28bb6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   29bf8:	2210      	movs	r2, #16
   29bfa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29bfe:	2100      	movs	r1, #0
   29c00:	f7fe ffd9 	bl	28bb6 <_set>
	s->leftover_offset = 0;
   29c04:	2300      	movs	r3, #0
   29c06:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   29c08:	2200      	movs	r2, #0
   29c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   29c0e:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   29c12:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   29c14:	bd10      	pop	{r4, pc}

00029c16 <tc_cmac_setup>:
{
   29c16:	b570      	push	{r4, r5, r6, lr}
   29c18:	460d      	mov	r5, r1
   29c1a:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   29c1c:	4604      	mov	r4, r0
   29c1e:	b310      	cbz	r0, 29c66 <tc_cmac_setup+0x50>
   29c20:	b311      	cbz	r1, 29c68 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   29c22:	2258      	movs	r2, #88	; 0x58
   29c24:	2100      	movs	r1, #0
   29c26:	f7fe ffc6 	bl	28bb6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   29c2a:	4629      	mov	r1, r5
	s->sched = sched;
   29c2c:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   29c2e:	4630      	mov	r0, r6
   29c30:	f7dd fc3c 	bl	74ac <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   29c34:	2210      	movs	r2, #16
   29c36:	2100      	movs	r1, #0
   29c38:	4620      	mov	r0, r4
   29c3a:	f7fe ffbc 	bl	28bb6 <_set>
	gf_double (s->K1, s->iv);
   29c3e:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   29c42:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29c44:	4621      	mov	r1, r4
   29c46:	4620      	mov	r0, r4
   29c48:	f7ff ff5c 	bl	29b04 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   29c4c:	4621      	mov	r1, r4
   29c4e:	4628      	mov	r0, r5
   29c50:	f7ff ffae 	bl	29bb0 <gf_double>
	gf_double (s->K2, s->K1);
   29c54:	4629      	mov	r1, r5
   29c56:	f104 0020 	add.w	r0, r4, #32
   29c5a:	f7ff ffa9 	bl	29bb0 <gf_double>
	tc_cmac_init(s);
   29c5e:	4620      	mov	r0, r4
   29c60:	f7ff ffc3 	bl	29bea <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   29c64:	2001      	movs	r0, #1
}
   29c66:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   29c68:	4608      	mov	r0, r1
   29c6a:	e7fc      	b.n	29c66 <tc_cmac_setup+0x50>

00029c6c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   29c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29c70:	460d      	mov	r5, r1
   29c72:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   29c74:	4604      	mov	r4, r0
   29c76:	2800      	cmp	r0, #0
   29c78:	d061      	beq.n	29d3e <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   29c7a:	b912      	cbnz	r2, 29c82 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   29c7c:	2001      	movs	r0, #1
}
   29c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   29c82:	2900      	cmp	r1, #0
   29c84:	d05b      	beq.n	29d3e <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   29c86:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   29c8a:	ea53 0102 	orrs.w	r1, r3, r2
   29c8e:	d056      	beq.n	29d3e <tc_cmac_update+0xd2>
	s->countdown--;
   29c90:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   29c92:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   29c96:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   29c9a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   29c9e:	f1b8 0f00 	cmp.w	r8, #0
   29ca2:	d02a      	beq.n	29cfa <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   29ca4:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29ca8:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   29cac:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29cae:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   29cb0:	d208      	bcs.n	29cc4 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   29cb2:	462a      	mov	r2, r5
   29cb4:	4633      	mov	r3, r6
   29cb6:	4631      	mov	r1, r6
   29cb8:	f7fe ff70 	bl	28b9c <_copy>
			s->leftover_offset += data_length;
   29cbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   29cbe:	4432      	add	r2, r6
   29cc0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   29cc2:	e7db      	b.n	29c7c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   29cc4:	463b      	mov	r3, r7
   29cc6:	462a      	mov	r2, r5
   29cc8:	4639      	mov	r1, r7
   29cca:	f7fe ff67 	bl	28b9c <_copy>
		data_length -= remaining_space;
   29cce:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   29cd0:	2300      	movs	r3, #0
   29cd2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   29cd4:	4446      	add	r6, r8
		data += remaining_space;
   29cd6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29cd8:	1e63      	subs	r3, r4, #1
   29cda:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   29cde:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29ce2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29ce6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   29ce8:	ea82 0200 	eor.w	r2, r2, r0
   29cec:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29cee:	d1f6      	bne.n	29cde <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29cf0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29cf2:	4621      	mov	r1, r4
   29cf4:	4620      	mov	r0, r4
   29cf6:	f7ff ff05 	bl	29b04 <tc_aes_encrypt>
   29cfa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   29cfe:	2e10      	cmp	r6, #16
   29d00:	d80a      	bhi.n	29d18 <tc_cmac_update+0xac>
	if (data_length > 0) {
   29d02:	2e00      	cmp	r6, #0
   29d04:	d0ba      	beq.n	29c7c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   29d06:	4633      	mov	r3, r6
   29d08:	462a      	mov	r2, r5
   29d0a:	4631      	mov	r1, r6
   29d0c:	f104 0030 	add.w	r0, r4, #48	; 0x30
   29d10:	f7fe ff44 	bl	28b9c <_copy>
		s->leftover_offset = data_length;
   29d14:	6466      	str	r6, [r4, #68]	; 0x44
   29d16:	e7b1      	b.n	29c7c <tc_cmac_update+0x10>
   29d18:	1e63      	subs	r3, r4, #1
   29d1a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   29d1c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29d20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d24:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   29d26:	ea82 0200 	eor.w	r2, r2, r0
   29d2a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d2c:	d1f6      	bne.n	29d1c <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   29d2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29d30:	4621      	mov	r1, r4
   29d32:	4620      	mov	r0, r4
   29d34:	f7ff fee6 	bl	29b04 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   29d38:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   29d3a:	3e10      	subs	r6, #16
   29d3c:	e7df      	b.n	29cfe <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   29d3e:	2000      	movs	r0, #0
   29d40:	e79d      	b.n	29c7e <tc_cmac_update+0x12>

00029d42 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   29d42:	b570      	push	{r4, r5, r6, lr}
   29d44:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   29d46:	4605      	mov	r5, r0
   29d48:	b1e8      	cbz	r0, 29d86 <tc_cmac_final+0x44>
   29d4a:	b369      	cbz	r1, 29da8 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   29d4c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   29d4e:	2a10      	cmp	r2, #16
   29d50:	d11a      	bne.n	29d88 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   29d52:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d54:	1e63      	subs	r3, r4, #1
   29d56:	3901      	subs	r1, #1
   29d58:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29d5c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   29d60:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   29d64:	4072      	eors	r2, r6
   29d66:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d6a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   29d6c:	ea82 0206 	eor.w	r2, r2, r6
   29d70:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   29d72:	d1f3      	bne.n	29d5c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   29d74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   29d76:	4621      	mov	r1, r4
   29d78:	4628      	mov	r0, r5
   29d7a:	f7ff fec3 	bl	29b04 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   29d7e:	4620      	mov	r0, r4
   29d80:	f7ff ff2b 	bl	29bda <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   29d84:	2001      	movs	r0, #1
}
   29d86:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   29d88:	f102 0030 	add.w	r0, r2, #48	; 0x30
   29d8c:	2100      	movs	r1, #0
   29d8e:	f1c2 0210 	rsb	r2, r2, #16
   29d92:	4420      	add	r0, r4
   29d94:	f7fe ff0f 	bl	28bb6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   29d98:	6c63      	ldr	r3, [r4, #68]	; 0x44
   29d9a:	4423      	add	r3, r4
   29d9c:	2280      	movs	r2, #128	; 0x80
   29d9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   29da2:	f104 0120 	add.w	r1, r4, #32
   29da6:	e7d5      	b.n	29d54 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   29da8:	4608      	mov	r0, r1
   29daa:	e7ec      	b.n	29d86 <tc_cmac_final+0x44>

00029dac <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   29dac:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   29dae:	6800      	ldr	r0, [r0, #0]
   29db0:	f7dd bbec 	b.w	758c <z_arm_fatal_error>

00029db4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   29db4:	2100      	movs	r1, #0
   29db6:	2001      	movs	r0, #1
   29db8:	f7dd bbe8 	b.w	758c <z_arm_fatal_error>

00029dbc <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
   29dbc:	b508      	push	{r3, lr}
	handler();
   29dbe:	f7dd fca3 	bl	7708 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   29dc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   29dc6:	f7dd bd83 	b.w	78d0 <z_arm_exc_exit>

00029dca <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   29dca:	2300      	movs	r3, #0
   29dcc:	f7fe be70 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

00029dd0 <malloc_prepare>:
}
   29dd0:	2000      	movs	r0, #0
   29dd2:	4770      	bx	lr

00029dd4 <_stdout_hook_default>:
}
   29dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29dd8:	4770      	bx	lr

00029dda <_stdin_hook_default>:
}
   29dda:	2000      	movs	r0, #0
   29ddc:	4770      	bx	lr

00029dde <_read>:
{
   29dde:	4608      	mov	r0, r1
   29de0:	4611      	mov	r1, r2
	return z_impl_zephyr_read_stdin(buf, nbytes);
   29de2:	f7de b97f 	b.w	80e4 <z_impl_zephyr_read_stdin>

00029de6 <_write>:
{
   29de6:	4608      	mov	r0, r1
   29de8:	4611      	mov	r1, r2
	return z_impl_zephyr_write_stdout(buf, nbytes);
   29dea:	f7de b98f 	b.w	810c <z_impl_zephyr_write_stdout>

00029dee <_close>:
   29dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   29df2:	4770      	bx	lr

00029df4 <_lseek>:
}
   29df4:	2000      	movs	r0, #0
   29df6:	4770      	bx	lr

00029df8 <_isatty>:
}
   29df8:	2802      	cmp	r0, #2
   29dfa:	bfcc      	ite	gt
   29dfc:	2000      	movgt	r0, #0
   29dfe:	2001      	movle	r0, #1
   29e00:	4770      	bx	lr

00029e02 <_kill>:
}
   29e02:	2000      	movs	r0, #0
   29e04:	4770      	bx	lr

00029e06 <_getpid>:
}
   29e06:	2000      	movs	r0, #0
   29e08:	4770      	bx	lr

00029e0a <_fstat>:
	st->st_mode = S_IFCHR;
   29e0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   29e0e:	604b      	str	r3, [r1, #4]
}
   29e10:	2000      	movs	r0, #0
   29e12:	4770      	bx	lr

00029e14 <__retarget_lock_init_recursive>:
{
   29e14:	b510      	push	{r4, lr}
   29e16:	4604      	mov	r4, r0
	*lock = malloc(sizeof(struct k_mutex));
   29e18:	2014      	movs	r0, #20
   29e1a:	f7fb ff63 	bl	25ce4 <malloc>
   29e1e:	6020      	str	r0, [r4, #0]
}
   29e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_impl_k_mutex_init(mutex);
   29e24:	f003 bec7 	b.w	2dbb6 <z_impl_k_mutex_init>

00029e28 <__retarget_lock_acquire_recursive>:
	return z_impl_k_mutex_lock(mutex, timeout);
   29e28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29e30:	f7fa be58 	b.w	24ae4 <z_impl_k_mutex_lock>

00029e34 <__retarget_lock_release_recursive>:
	return z_impl_k_mutex_unlock(mutex);
   29e34:	f7fa bece 	b.w	24bd4 <z_impl_k_mutex_unlock>

00029e38 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   29e38:	f7fa bb24 	b.w	24484 <z_impl_z_errno>

00029e3c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   29e3c:	b084      	sub	sp, #16
   29e3e:	ab04      	add	r3, sp, #16
   29e40:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   29e44:	f89d 3004 	ldrb.w	r3, [sp, #4]
   29e48:	2b06      	cmp	r3, #6
   29e4a:	d108      	bne.n	29e5e <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   29e4c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   29e50:	2201      	movs	r2, #1
   29e52:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   29e56:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   29e5a:	bf20      	wfe
    while (true)
   29e5c:	e7fd      	b.n	29e5a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   29e5e:	b004      	add	sp, #16
   29e60:	4770      	bx	lr

00029e62 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   29e62:	b084      	sub	sp, #16
   29e64:	ab04      	add	r3, sp, #16
   29e66:	e903 0007 	stmdb	r3, {r0, r1, r2}
   29e6a:	2300      	movs	r3, #0
   29e6c:	f383 8811 	msr	BASEPRI, r3
   29e70:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   29e74:	b004      	add	sp, #16
   29e76:	4770      	bx	lr

00029e78 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   29e78:	b530      	push	{r4, r5, lr}
   29e7a:	b085      	sub	sp, #20
   29e7c:	4614      	mov	r4, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   29e7e:	880a      	ldrh	r2, [r1, #0]
   29e80:	788b      	ldrb	r3, [r1, #2]
   29e82:	f8ad 2000 	strh.w	r2, [sp]
{
   29e86:	4605      	mov	r5, r0
	(void)memset(res + 3, 0, 13);
   29e88:	220d      	movs	r2, #13
   29e8a:	2100      	movs	r1, #0
   29e8c:	f10d 0003 	add.w	r0, sp, #3
	memcpy(res, r, 3);
   29e90:	f88d 3002 	strb.w	r3, [sp, #2]
	(void)memset(res + 3, 0, 13);
   29e94:	f004 fb88 	bl	2e5a8 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   29e98:	466a      	mov	r2, sp
   29e9a:	4669      	mov	r1, sp
   29e9c:	4628      	mov	r0, r5
   29e9e:	f7ea f971 	bl	14184 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   29ea2:	b928      	cbnz	r0, 29eb0 <ah+0x38>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29ea4:	f8bd 2000 	ldrh.w	r2, [sp]
   29ea8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   29eac:	8022      	strh	r2, [r4, #0]
   29eae:	70a3      	strb	r3, [r4, #2]
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
   29eb0:	b005      	add	sp, #20
   29eb2:	bd30      	pop	{r4, r5, pc}

00029eb4 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   29eb4:	b513      	push	{r0, r1, r4, lr}
   29eb6:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   29eb8:	aa01      	add	r2, sp, #4
   29eba:	3103      	adds	r1, #3
   29ebc:	f7ff ffdc 	bl	29e78 <ah>
	if (err) {
   29ec0:	b948      	cbnz	r0, 29ed6 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   29ec2:	2203      	movs	r2, #3
   29ec4:	a901      	add	r1, sp, #4
   29ec6:	4620      	mov	r0, r4
   29ec8:	f004 fb3d 	bl	2e546 <memcmp>
   29ecc:	fab0 f080 	clz	r0, r0
   29ed0:	0940      	lsrs	r0, r0, #5
}
   29ed2:	b002      	add	sp, #8
   29ed4:	bd10      	pop	{r4, pc}
		return false;
   29ed6:	2000      	movs	r0, #0
   29ed8:	e7fb      	b.n	29ed2 <bt_rpa_irk_matches+0x1e>

00029eda <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   29eda:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   29edc:	1cce      	adds	r6, r1, #3
{
   29ede:	4605      	mov	r5, r0
   29ee0:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   29ee2:	4630      	mov	r0, r6
   29ee4:	2103      	movs	r1, #3
   29ee6:	f7ea f94b 	bl	14180 <bt_rand>
	if (err) {
   29eea:	b960      	cbnz	r0, 29f06 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   29eec:	7963      	ldrb	r3, [r4, #5]
   29eee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   29ef2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   29ef6:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   29ef8:	4622      	mov	r2, r4
   29efa:	4631      	mov	r1, r6
   29efc:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   29efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   29f02:	f7ff bfb9 	b.w	29e78 <ah>
}
   29f06:	bd70      	pop	{r4, r5, r6, pc}

00029f08 <send_cmd_status>:
{
   29f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29f0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   29f10:	4606      	mov	r6, r0
   29f12:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   29f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29f18:	2100      	movs	r1, #0
   29f1a:	200f      	movs	r0, #15
   29f1c:	f7de fc0e 	bl	873c <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   29f20:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   29f22:	f100 0808 	add.w	r8, r0, #8
   29f26:	4604      	mov	r4, r0
   29f28:	7507      	strb	r7, [r0, #20]
   29f2a:	2102      	movs	r1, #2
   29f2c:	4640      	mov	r0, r8
   29f2e:	f002 fdcc 	bl	2caca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29f32:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   29f34:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   29f36:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   29f38:	7041      	strb	r1, [r0, #1]
   29f3a:	4640      	mov	r0, r8
   29f3c:	f002 fdc5 	bl	2caca <net_buf_simple_add>
	evt->ncmd = 1U;
   29f40:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   29f42:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   29f44:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   29f46:	4620      	mov	r0, r4
}
   29f48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   29f4c:	f7df be56 	b.w	9bfc <bt_recv_prio>

00029f50 <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   29f50:	f101 0320 	add.w	r3, r1, #32
   29f54:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   29f56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   29f5a:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   29f5e:	428b      	cmp	r3, r1
   29f60:	d1f9      	bne.n	29f56 <sys_memcpy_swap.constprop.0+0x6>
}
   29f62:	4770      	bx	lr

00029f64 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   29f64:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   29f68:	f043 0306 	orr.w	r3, r3, #6
   29f6c:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   29f70:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   29f74:	f043 0304 	orr.w	r3, r3, #4
   29f78:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   29f7c:	4770      	bx	lr

00029f7e <default_CSPRNG>:
{
   29f7e:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   29f80:	f7ea f8fe 	bl	14180 <bt_rand>
}
   29f84:	fab0 f080 	clz	r0, r0
   29f88:	0940      	lsrs	r0, r0, #5
   29f8a:	bd08      	pop	{r3, pc}

00029f8c <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   29f8c:	b510      	push	{r4, lr}
   29f8e:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   29f90:	7801      	ldrb	r1, [r0, #0]
   29f92:	7822      	ldrb	r2, [r4, #0]
   29f94:	428a      	cmp	r2, r1
{
   29f96:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   29f98:	d00f      	beq.n	29fba <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   29f9a:	4669      	mov	r1, sp
   29f9c:	f7de fb68 	bl	8670 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   29fa0:	a905      	add	r1, sp, #20
   29fa2:	4620      	mov	r0, r4
   29fa4:	f7de fb64 	bl	8670 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   29fa8:	2210      	movs	r2, #16
   29faa:	f10d 0115 	add.w	r1, sp, #21
   29fae:	f10d 0001 	add.w	r0, sp, #1
   29fb2:	f004 fac8 	bl	2e546 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   29fb6:	b00a      	add	sp, #40	; 0x28
   29fb8:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   29fba:	2a01      	cmp	r2, #1
   29fbc:	d006      	beq.n	29fcc <bt_uuid_cmp+0x40>
   29fbe:	2a02      	cmp	r2, #2
   29fc0:	d007      	beq.n	29fd2 <bt_uuid_cmp+0x46>
   29fc2:	b972      	cbnz	r2, 29fe2 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   29fc4:	8840      	ldrh	r0, [r0, #2]
   29fc6:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   29fc8:	1ac0      	subs	r0, r0, r3
   29fca:	e7f4      	b.n	29fb6 <bt_uuid_cmp+0x2a>
   29fcc:	6840      	ldr	r0, [r0, #4]
   29fce:	6863      	ldr	r3, [r4, #4]
   29fd0:	e7fa      	b.n	29fc8 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29fd2:	2210      	movs	r2, #16
   29fd4:	1c61      	adds	r1, r4, #1
   29fd6:	3001      	adds	r0, #1
}
   29fd8:	b00a      	add	sp, #40	; 0x28
   29fda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   29fde:	f004 bab2 	b.w	2e546 <memcmp>
	switch (u1->type) {
   29fe2:	f06f 0015 	mvn.w	r0, #21
   29fe6:	e7e6      	b.n	29fb6 <bt_uuid_cmp+0x2a>

00029fe8 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   29fe8:	2a04      	cmp	r2, #4
   29fea:	d00a      	beq.n	2a002 <bt_uuid_create+0x1a>
   29fec:	2a10      	cmp	r2, #16
   29fee:	d00d      	beq.n	2a00c <bt_uuid_create+0x24>
   29ff0:	2a02      	cmp	r2, #2
   29ff2:	f04f 0300 	mov.w	r3, #0
   29ff6:	d115      	bne.n	2a024 <bt_uuid_create+0x3c>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   29ff8:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   29ffa:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   29ffc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   29ffe:	2001      	movs	r0, #1
		break;
   2a000:	4770      	bx	lr
		uuid->type = BT_UUID_TYPE_32;
   2a002:	2301      	movs	r3, #1
   2a004:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a006:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2a008:	6042      	str	r2, [r0, #4]
		break;
   2a00a:	e7f8      	b.n	29ffe <bt_uuid_create+0x16>
		uuid->type = BT_UUID_TYPE_128;
   2a00c:	2302      	movs	r3, #2
   2a00e:	f800 3b01 	strb.w	r3, [r0], #1
   2a012:	f101 0310 	add.w	r3, r1, #16
   2a016:	f851 2b04 	ldr.w	r2, [r1], #4
   2a01a:	f840 2b04 	str.w	r2, [r0], #4
   2a01e:	4299      	cmp	r1, r3
   2a020:	d1f9      	bne.n	2a016 <bt_uuid_create+0x2e>
   2a022:	e7ec      	b.n	29ffe <bt_uuid_create+0x16>
	switch (data_len) {
   2a024:	4618      	mov	r0, r3
}
   2a026:	4770      	bx	lr

0002a028 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2a028:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2a02a:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2a02c:	2106      	movs	r1, #6
{
   2a02e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a030:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a034:	f7ea f8a4 	bl	14180 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2a038:	b918      	cbnz	r0, 2a042 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2a03a:	79a3      	ldrb	r3, [r4, #6]
   2a03c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a040:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   2a042:	bd10      	pop	{r4, pc}

0002a044 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a044:	280f      	cmp	r0, #15
   2a046:	d806      	bhi.n	2a056 <bt_hci_evt_get_flags+0x12>
   2a048:	280d      	cmp	r0, #13
   2a04a:	d80b      	bhi.n	2a064 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2a04c:	2805      	cmp	r0, #5
   2a04e:	bf14      	ite	ne
   2a050:	2002      	movne	r0, #2
   2a052:	2003      	moveq	r0, #3
   2a054:	4770      	bx	lr
	switch (evt) {
   2a056:	2813      	cmp	r0, #19
   2a058:	d004      	beq.n	2a064 <bt_hci_evt_get_flags+0x20>
   2a05a:	281a      	cmp	r0, #26
   2a05c:	bf14      	ite	ne
   2a05e:	2002      	movne	r0, #2
   2a060:	2001      	moveq	r0, #1
   2a062:	4770      	bx	lr
   2a064:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2a066:	4770      	bx	lr

0002a068 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2a068:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2a06c:	b193      	cbz	r3, 2a094 <update_sec_level+0x2c>
   2a06e:	7b5a      	ldrb	r2, [r3, #13]
   2a070:	07d1      	lsls	r1, r2, #31
   2a072:	d50f      	bpl.n	2a094 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   2a074:	06d2      	lsls	r2, r2, #27
   2a076:	d50b      	bpl.n	2a090 <update_sec_level+0x28>
   2a078:	7b1b      	ldrb	r3, [r3, #12]
   2a07a:	2b10      	cmp	r3, #16
   2a07c:	d108      	bne.n	2a090 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2a07e:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2a080:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   2a082:	7a82      	ldrb	r2, [r0, #10]
   2a084:	7a40      	ldrb	r0, [r0, #9]
}
   2a086:	4282      	cmp	r2, r0
   2a088:	bf8c      	ite	hi
   2a08a:	2000      	movhi	r0, #0
   2a08c:	2001      	movls	r0, #1
   2a08e:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2a090:	2303      	movs	r3, #3
   2a092:	e7f5      	b.n	2a080 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   2a094:	2302      	movs	r3, #2
   2a096:	e7f3      	b.n	2a080 <update_sec_level+0x18>

0002a098 <atomic_and>:
{
   2a098:	4603      	mov	r3, r0
}
   2a09a:	f3bf 8f5b 	dmb	ish
   2a09e:	e853 0f00 	ldrex	r0, [r3]
   2a0a2:	ea00 0201 	and.w	r2, r0, r1
   2a0a6:	e843 2c00 	strex	ip, r2, [r3]
   2a0aa:	f1bc 0f00 	cmp.w	ip, #0
   2a0ae:	d1f6      	bne.n	2a09e <atomic_and+0x6>
   2a0b0:	f3bf 8f5b 	dmb	ish
   2a0b4:	4770      	bx	lr

0002a0b6 <atomic_or>:
{
   2a0b6:	4603      	mov	r3, r0
}
   2a0b8:	f3bf 8f5b 	dmb	ish
   2a0bc:	e853 0f00 	ldrex	r0, [r3]
   2a0c0:	ea40 0201 	orr.w	r2, r0, r1
   2a0c4:	e843 2c00 	strex	ip, r2, [r3]
   2a0c8:	f1bc 0f00 	cmp.w	ip, #0
   2a0cc:	d1f6      	bne.n	2a0bc <atomic_or+0x6>
   2a0ce:	f3bf 8f5b 	dmb	ish
   2a0d2:	4770      	bx	lr

0002a0d4 <bt_addr_le_copy>:
   2a0d4:	680b      	ldr	r3, [r1, #0]
   2a0d6:	6003      	str	r3, [r0, #0]
   2a0d8:	888b      	ldrh	r3, [r1, #4]
   2a0da:	8083      	strh	r3, [r0, #4]
   2a0dc:	798b      	ldrb	r3, [r1, #6]
   2a0de:	7183      	strb	r3, [r0, #6]
}
   2a0e0:	4770      	bx	lr

0002a0e2 <bt_addr_copy>:
   2a0e2:	680b      	ldr	r3, [r1, #0]
   2a0e4:	6003      	str	r3, [r0, #0]
   2a0e6:	888b      	ldrh	r3, [r1, #4]
   2a0e8:	8083      	strh	r3, [r0, #4]
}
   2a0ea:	4770      	bx	lr

0002a0ec <z_log_msg2_static_create.constprop.0>:
   2a0ec:	2300      	movs	r3, #0
   2a0ee:	f7fe bcdf 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002a0f2 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a0f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a0f4:	ab0a      	add	r3, sp, #40	; 0x28
   2a0f6:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a0f8:	9302      	str	r3, [sp, #8]
   2a0fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a0fc:	9301      	str	r3, [sp, #4]
   2a0fe:	2300      	movs	r3, #0
   2a100:	9300      	str	r3, [sp, #0]
   2a102:	4618      	mov	r0, r3
   2a104:	f7dc fed4 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a108:	b007      	add	sp, #28
   2a10a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a10e <sys_put_le64>:
	dst[1] = val >> 8;
   2a10e:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   2a112:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2a114:	0e00      	lsrs	r0, r0, #24
   2a116:	7053      	strb	r3, [r2, #1]
   2a118:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2a11a:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2a11c:	f3c1 2007 	ubfx	r0, r1, #8, #8
   2a120:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   2a122:	7093      	strb	r3, [r2, #2]
   2a124:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2a126:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2a128:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2a12a:	71d1      	strb	r1, [r2, #7]
}
   2a12c:	4770      	bx	lr

0002a12e <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   2a12e:	f7df b901 	b.w	9334 <bt_le_create_conn_legacy>

0002a132 <bt_hci_disconnect>:
{
   2a132:	b570      	push	{r4, r5, r6, lr}
   2a134:	4606      	mov	r6, r0
   2a136:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a138:	f240 4006 	movw	r0, #1030	; 0x406
   2a13c:	2103      	movs	r1, #3
   2a13e:	f7de fee7 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a142:	4604      	mov	r4, r0
   2a144:	b168      	cbz	r0, 2a162 <bt_hci_disconnect+0x30>
   2a146:	2103      	movs	r1, #3
   2a148:	3008      	adds	r0, #8
   2a14a:	f002 fcbe 	bl	2caca <net_buf_simple_add>
	disconn->reason = reason;
   2a14e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2a150:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a152:	4621      	mov	r1, r4
   2a154:	2200      	movs	r2, #0
}
   2a156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a15a:	f240 4006 	movw	r0, #1030	; 0x406
   2a15e:	f7df b83f 	b.w	91e0 <bt_hci_cmd_send_sync>
}
   2a162:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a166:	bd70      	pop	{r4, r5, r6, pc}

0002a168 <bt_le_set_data_len>:
{
   2a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a16a:	4607      	mov	r7, r0
   2a16c:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a16e:	f242 0022 	movw	r0, #8226	; 0x2022
   2a172:	2106      	movs	r1, #6
{
   2a174:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2a176:	f7de fecb 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a17a:	4604      	mov	r4, r0
   2a17c:	b170      	cbz	r0, 2a19c <bt_le_set_data_len+0x34>
   2a17e:	2106      	movs	r1, #6
   2a180:	3008      	adds	r0, #8
   2a182:	f002 fca2 	bl	2caca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a186:	883b      	ldrh	r3, [r7, #0]
   2a188:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2a18a:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2a18c:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2a18e:	4621      	mov	r1, r4
   2a190:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2a194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2a198:	f7de bef4 	b.w	8f84 <bt_hci_cmd_send>
}
   2a19c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a1a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a1a2 <bt_le_set_phy>:
{
   2a1a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a1a6:	4680      	mov	r8, r0
   2a1a8:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a1aa:	f242 0032 	movw	r0, #8242	; 0x2032
   2a1ae:	2107      	movs	r1, #7
{
   2a1b0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2a1b4:	4616      	mov	r6, r2
   2a1b6:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2a1b8:	f7de feaa 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a1bc:	4604      	mov	r4, r0
   2a1be:	b190      	cbz	r0, 2a1e6 <bt_le_set_phy+0x44>
   2a1c0:	2107      	movs	r1, #7
   2a1c2:	3008      	adds	r0, #8
   2a1c4:	f002 fc81 	bl	2caca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a1c8:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2a1cc:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2a1ce:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2a1d0:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a1d2:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2a1d4:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2a1d8:	4621      	mov	r1, r4
   2a1da:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2a1de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2a1e2:	f7de becf 	b.w	8f84 <bt_hci_cmd_send>
}
   2a1e6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a1ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a1ee <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2a1ee:	6880      	ldr	r0, [r0, #8]
   2a1f0:	f7df ba00 	b.w	95f4 <bt_hci_le_enh_conn_complete>

0002a1f4 <le_legacy_conn_complete>:
{
   2a1f4:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2a1f6:	6881      	ldr	r1, [r0, #8]
{
   2a1f8:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2a1fa:	780b      	ldrb	r3, [r1, #0]
   2a1fc:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2a200:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2a204:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2a208:	78cb      	ldrb	r3, [r1, #3]
   2a20a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2a20e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2a212:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2a216:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2a21a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2a21e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2a222:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2a226:	7c4b      	ldrb	r3, [r1, #17]
   2a228:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2a22c:	a803      	add	r0, sp, #12
   2a22e:	3104      	adds	r1, #4
   2a230:	f7ff ff50 	bl	2a0d4 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2a234:	4669      	mov	r1, sp
   2a236:	2200      	movs	r2, #0
   2a238:	f10d 0013 	add.w	r0, sp, #19
   2a23c:	9200      	str	r2, [sp, #0]
   2a23e:	f8ad 2004 	strh.w	r2, [sp, #4]
   2a242:	f7ff ff4e 	bl	2a0e2 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2a246:	9200      	str	r2, [sp, #0]
   2a248:	f10d 0019 	add.w	r0, sp, #25
   2a24c:	808a      	strh	r2, [r1, #4]
   2a24e:	f7ff ff48 	bl	2a0e2 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   2a252:	a802      	add	r0, sp, #8
   2a254:	f7df f9ce 	bl	95f4 <bt_hci_le_enh_conn_complete>
}
   2a258:	b00b      	add	sp, #44	; 0x2c
   2a25a:	f85d fb04 	ldr.w	pc, [sp], #4

0002a25e <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2a25e:	8803      	ldrh	r3, [r0, #0]
   2a260:	8842      	ldrh	r2, [r0, #2]
   2a262:	4293      	cmp	r3, r2
{
   2a264:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2a266:	d819      	bhi.n	2a29c <bt_le_conn_params_valid+0x3e>
   2a268:	2b05      	cmp	r3, #5
   2a26a:	d917      	bls.n	2a29c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2a26c:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   2a270:	d814      	bhi.n	2a29c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   2a272:	8883      	ldrh	r3, [r0, #4]
   2a274:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   2a278:	d210      	bcs.n	2a29c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a27a:	88c0      	ldrh	r0, [r0, #6]
   2a27c:	f1a0 010a 	sub.w	r1, r0, #10
   2a280:	b289      	uxth	r1, r1
   2a282:	f640 4476 	movw	r4, #3190	; 0xc76
   2a286:	42a1      	cmp	r1, r4
   2a288:	d808      	bhi.n	2a29c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   2a28a:	3301      	adds	r3, #1
   2a28c:	b29b      	uxth	r3, r3
   2a28e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a290:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2a294:	bf34      	ite	cc
   2a296:	2001      	movcc	r0, #1
   2a298:	2000      	movcs	r0, #0
}
   2a29a:	bd10      	pop	{r4, pc}
		return false;
   2a29c:	2000      	movs	r0, #0
   2a29e:	e7fc      	b.n	2a29a <bt_le_conn_params_valid+0x3c>

0002a2a0 <bt_send>:
		return bt_hci_ecc_send(buf);
   2a2a0:	f7de b954 	b.w	854c <bt_hci_ecc_send>

0002a2a4 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   2a2a4:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2a2a6:	f7e6 fcf9 	bl	10c9c <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   2a2aa:	b118      	cbz	r0, 2a2b4 <bt_addr_le_is_bonded+0x10>
   2a2ac:	89c0      	ldrh	r0, [r0, #14]
   2a2ae:	3800      	subs	r0, #0
   2a2b0:	bf18      	it	ne
   2a2b2:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   2a2b4:	bd08      	pop	{r3, pc}

0002a2b6 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   2a2b6:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a2b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   2a2bc:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a2c2:	2100      	movs	r1, #0
{
   2a2c4:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2a2c6:	f7de fa39 	bl	873c <bt_buf_get_evt>
   2a2ca:	2102      	movs	r1, #2
   2a2cc:	4604      	mov	r4, r0
   2a2ce:	3008      	adds	r0, #8
   2a2d0:	f002 fbfb 	bl	2caca <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   2a2d4:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   2a2d6:	7045      	strb	r5, [r0, #1]

	return buf;
}
   2a2d8:	4620      	mov	r0, r4
   2a2da:	bd70      	pop	{r4, r5, r6, pc}

0002a2dc <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a2dc:	3103      	adds	r1, #3
{
   2a2de:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a2e0:	b2c9      	uxtb	r1, r1
{
   2a2e2:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2a2e4:	200e      	movs	r0, #14
   2a2e6:	f7ff ffe6 	bl	2a2b6 <bt_hci_evt_create>
   2a2ea:	2103      	movs	r1, #3
   2a2ec:	4604      	mov	r4, r0
   2a2ee:	3008      	adds	r0, #8
   2a2f0:	f002 fbeb 	bl	2caca <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   2a2f4:	2301      	movs	r3, #1
   2a2f6:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   2a2f8:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   2a2fc:	4620      	mov	r0, r4
   2a2fe:	bd38      	pop	{r3, r4, r5, pc}

0002a300 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   2a300:	b570      	push	{r4, r5, r6, lr}
   2a302:	4605      	mov	r5, r0
   2a304:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   2a306:	200f      	movs	r0, #15
   2a308:	2104      	movs	r1, #4
   2a30a:	f7ff ffd4 	bl	2a2b6 <bt_hci_evt_create>
   2a30e:	2104      	movs	r1, #4
   2a310:	4604      	mov	r4, r0
   2a312:	3008      	adds	r0, #8
   2a314:	f002 fbd9 	bl	2caca <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   2a318:	2201      	movs	r2, #1
	cs->status = status;
   2a31a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   2a31c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2a31e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2a320:	4620      	mov	r0, r4
   2a322:	bd70      	pop	{r4, r5, r6, pc}

0002a324 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a324:	f3bf 8f5b 	dmb	ish
   2a328:	6800      	ldr	r0, [r0, #0]
   2a32a:	f3bf 8f5b 	dmb	ish
}
   2a32e:	4770      	bx	lr

0002a330 <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a330:	f100 0310 	add.w	r3, r0, #16
   2a334:	f3bf 8f5b 	dmb	ish
   2a338:	e853 2f00 	ldrex	r2, [r3]
   2a33c:	f422 4180 	bic.w	r1, r2, #16384	; 0x4000
   2a340:	e843 1c00 	strex	ip, r1, [r3]
   2a344:	f1bc 0f00 	cmp.w	ip, #0
   2a348:	d1f6      	bne.n	2a338 <adv_unpause_enabled+0x8>
   2a34a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   2a34e:	0453      	lsls	r3, r2, #17
   2a350:	d502      	bpl.n	2a358 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   2a352:	2101      	movs	r1, #1
   2a354:	f000 b9b7 	b.w	2a6c6 <bt_le_adv_set_enable>
}
   2a358:	4770      	bx	lr

0002a35a <bt_addr_copy>:
   2a35a:	680b      	ldr	r3, [r1, #0]
   2a35c:	6003      	str	r3, [r0, #0]
   2a35e:	888b      	ldrh	r3, [r1, #4]
   2a360:	8083      	strh	r3, [r0, #4]
   2a362:	4770      	bx	lr

0002a364 <bt_addr_le_copy>:
   2a364:	680b      	ldr	r3, [r1, #0]
   2a366:	6003      	str	r3, [r0, #0]
   2a368:	888b      	ldrh	r3, [r1, #4]
   2a36a:	8083      	strh	r3, [r0, #4]
   2a36c:	798b      	ldrb	r3, [r1, #6]
   2a36e:	7183      	strb	r3, [r0, #6]
}
   2a370:	4770      	bx	lr

0002a372 <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   2a372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a374:	4607      	mov	r7, r0
   2a376:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   2a378:	f242 0027 	movw	r0, #8231	; 0x2027
   2a37c:	2127      	movs	r1, #39	; 0x27
   2a37e:	f7de fdc7 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a382:	4605      	mov	r5, r0
   2a384:	b1f8      	cbz	r0, 2a3c6 <hci_id_add.constprop.0+0x54>
   2a386:	2127      	movs	r1, #39	; 0x27
   2a388:	3008      	adds	r0, #8
   2a38a:	f002 fb9e 	bl	2caca <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   2a38e:	4639      	mov	r1, r7
   2a390:	f7ff ffe8 	bl	2a364 <bt_addr_le_copy>
   2a394:	4606      	mov	r6, r0
   2a396:	4621      	mov	r1, r4
   2a398:	1dc3      	adds	r3, r0, #7
   2a39a:	f104 0210 	add.w	r2, r4, #16
   2a39e:	f851 0b04 	ldr.w	r0, [r1], #4
   2a3a2:	f843 0b04 	str.w	r0, [r3], #4
   2a3a6:	4291      	cmp	r1, r2
   2a3a8:	d1f9      	bne.n	2a39e <hci_id_add.constprop.0+0x2c>
__ssp_bos_icheck3(memset, void *, int)
   2a3aa:	2210      	movs	r2, #16
   2a3ac:	2100      	movs	r1, #0
   2a3ae:	f106 0017 	add.w	r0, r6, #23
   2a3b2:	f004 f8f9 	bl	2e5a8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2a3b6:	4629      	mov	r1, r5
   2a3b8:	2200      	movs	r2, #0
}
   2a3ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   2a3be:	f242 0027 	movw	r0, #8231	; 0x2027
   2a3c2:	f7de bf0d 	b.w	91e0 <bt_hci_cmd_send_sync>
}
   2a3c6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a3cc <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   2a3cc:	7a03      	ldrb	r3, [r0, #8]
   2a3ce:	075b      	lsls	r3, r3, #29
   2a3d0:	d504      	bpl.n	2a3dc <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   2a3d2:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   2a3d6:	3001      	adds	r0, #1
   2a3d8:	f7ff bfcb 	b.w	2a372 <hci_id_add.constprop.0>
}
   2a3dc:	4770      	bx	lr

0002a3de <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2a3de:	2300      	movs	r3, #0
   2a3e0:	f7fe bb66 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002a3e4 <addr_res_enable>:
{
   2a3e4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a3e6:	2101      	movs	r1, #1
{
   2a3e8:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   2a3ea:	f242 002d 	movw	r0, #8237	; 0x202d
   2a3ee:	f7de fd8f 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a3f2:	4604      	mov	r4, r0
   2a3f4:	b158      	cbz	r0, 2a40e <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   2a3f6:	4629      	mov	r1, r5
   2a3f8:	3008      	adds	r0, #8
   2a3fa:	f002 fb75 	bl	2cae8 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a3fe:	4621      	mov	r1, r4
   2a400:	2200      	movs	r2, #0
}
   2a402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2a406:	f242 002d 	movw	r0, #8237	; 0x202d
   2a40a:	f7de bee9 	b.w	91e0 <bt_hci_cmd_send_sync>
}
   2a40e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a412:	bd38      	pop	{r3, r4, r5, pc}

0002a414 <is_adv_using_rand_addr>:
{
   2a414:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   2a416:	f7e0 f9f1 	bl	a7fc <bt_le_adv_lookup_legacy>
	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
   2a41a:	b120      	cbz	r0, 2a426 <is_adv_using_rand_addr+0x12>
   2a41c:	3010      	adds	r0, #16
   2a41e:	f7ff ff81 	bl	2a324 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a422:	f3c0 1080 	ubfx	r0, r0, #6, #1
}
   2a426:	bd08      	pop	{r3, pc}

0002a428 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a428:	f100 0210 	add.w	r2, r0, #16
{
   2a42c:	b508      	push	{r3, lr}
   2a42e:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2a430:	4610      	mov	r0, r2
   2a432:	f7ff ff77 	bl	2a324 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2a436:	0641      	lsls	r1, r0, #25
   2a438:	d511      	bpl.n	2a45e <adv_pause_enabled+0x36>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a43a:	f3bf 8f5b 	dmb	ish
   2a43e:	e852 1f00 	ldrex	r1, [r2]
   2a442:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
   2a446:	e842 1000 	strex	r0, r1, [r2]
   2a44a:	2800      	cmp	r0, #0
   2a44c:	d1f7      	bne.n	2a43e <adv_pause_enabled+0x16>
   2a44e:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   2a452:	4618      	mov	r0, r3
   2a454:	2100      	movs	r1, #0
}
   2a456:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_set_enable(adv, false);
   2a45a:	f000 b934 	b.w	2a6c6 <bt_le_adv_set_enable>
}
   2a45e:	bd08      	pop	{r3, pc}

0002a460 <bt_lookup_id_addr>:
{
   2a460:	b510      	push	{r4, lr}
   2a462:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2a464:	f7e6 fbe0 	bl	10c28 <bt_keys_find_irk>
		if (keys) {
   2a468:	b100      	cbz	r0, 2a46c <bt_lookup_id_addr+0xc>
			return &keys->addr;
   2a46a:	1c44      	adds	r4, r0, #1
}
   2a46c:	4620      	mov	r0, r4
   2a46e:	bd10      	pop	{r4, pc}

0002a470 <bt_id_set_private_addr>:
{
   2a470:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2a472:	2106      	movs	r1, #6
   2a474:	4668      	mov	r0, sp
   2a476:	f7e9 fe83 	bl	14180 <bt_rand>
	if (err) {
   2a47a:	b940      	cbnz	r0, 2a48e <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2a47c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2a480:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2a482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a486:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2a48a:	f7df fd57 	bl	9f3c <set_random_address>
}
   2a48e:	b003      	add	sp, #12
   2a490:	f85d fb04 	ldr.w	pc, [sp], #4

0002a494 <bt_id_set_adv_private_addr>:
{
   2a494:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2a496:	2106      	movs	r1, #6
   2a498:	4668      	mov	r0, sp
   2a49a:	f7e9 fe71 	bl	14180 <bt_rand>
	if (err) {
   2a49e:	b940      	cbnz	r0, 2a4b2 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2a4a0:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   2a4a4:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2a4a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2a4aa:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   2a4ae:	f7df fd45 	bl	9f3c <set_random_address>
}
   2a4b2:	b003      	add	sp, #12
   2a4b4:	f85d fb04 	ldr.w	pc, [sp], #4

0002a4b8 <bt_id_scan_random_addr_check>:
{
   2a4b8:	b508      	push	{r3, lr}
	adv = bt_le_adv_lookup_legacy();
   2a4ba:	f7e0 f99f 	bl	a7fc <bt_le_adv_lookup_legacy>
	if (!adv) {
   2a4be:	b110      	cbz	r0, 2a4c6 <bt_id_scan_random_addr_check+0xe>
   2a4c0:	3010      	adds	r0, #16
   2a4c2:	f7ff ff2f 	bl	2a324 <atomic_get>
}
   2a4c6:	2001      	movs	r0, #1
   2a4c8:	bd08      	pop	{r3, pc}

0002a4ca <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   2a4ca:	7a03      	ldrb	r3, [r0, #8]
   2a4cc:	07d9      	lsls	r1, r3, #31
   2a4ce:	d504      	bpl.n	2a4da <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2a4d0:	f023 0301 	bic.w	r3, r3, #1
   2a4d4:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   2a4d6:	f7df bdb5 	b.w	a044 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   2a4da:	0799      	lsls	r1, r3, #30
   2a4dc:	d504      	bpl.n	2a4e8 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2a4de:	f023 0302 	bic.w	r3, r3, #2
   2a4e2:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   2a4e4:	f7df bdc6 	b.w	a074 <bt_id_del>
}
   2a4e8:	4770      	bx	lr

0002a4ea <get_adv_channel_map>:
{
   2a4ea:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   2a4ec:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2a4f0:	bf0c      	ite	eq
   2a4f2:	2007      	moveq	r0, #7
   2a4f4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2a4f6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2a4f8:	bf48      	it	mi
   2a4fa:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2a4fe:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2a500:	bf48      	it	mi
   2a502:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2a506:	4770      	bx	lr

0002a508 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a508:	f3bf 8f5b 	dmb	ish
   2a50c:	6800      	ldr	r0, [r0, #0]
   2a50e:	f3bf 8f5b 	dmb	ish
}
   2a512:	4770      	bx	lr

0002a514 <atomic_and>:
{
   2a514:	4603      	mov	r3, r0
}
   2a516:	f3bf 8f5b 	dmb	ish
   2a51a:	e853 0f00 	ldrex	r0, [r3]
   2a51e:	ea00 0201 	and.w	r2, r0, r1
   2a522:	e843 2c00 	strex	ip, r2, [r3]
   2a526:	f1bc 0f00 	cmp.w	ip, #0
   2a52a:	d1f6      	bne.n	2a51a <atomic_and+0x6>
   2a52c:	f3bf 8f5b 	dmb	ish
   2a530:	4770      	bx	lr

0002a532 <bt_addr_le_copy>:
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a532:	680b      	ldr	r3, [r1, #0]
   2a534:	6003      	str	r3, [r0, #0]
   2a536:	888b      	ldrh	r3, [r1, #4]
   2a538:	8083      	strh	r3, [r0, #4]
   2a53a:	798b      	ldrb	r3, [r1, #6]
   2a53c:	7183      	strb	r3, [r0, #6]
   2a53e:	4770      	bx	lr

0002a540 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a540:	2301      	movs	r3, #1
{
   2a542:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2a544:	fa03 f101 	lsl.w	r1, r3, r1
{
   2a548:	4604      	mov	r4, r0
	if (val) {
   2a54a:	b162      	cbz	r2, 2a566 <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a54c:	f3bf 8f5b 	dmb	ish
   2a550:	e854 3f00 	ldrex	r3, [r4]
   2a554:	430b      	orrs	r3, r1
   2a556:	e844 3200 	strex	r2, r3, [r4]
   2a55a:	2a00      	cmp	r2, #0
   2a55c:	d1f8      	bne.n	2a550 <atomic_set_bit_to+0x10>
   2a55e:	f3bf 8f5b 	dmb	ish
	}
}
   2a562:	bc10      	pop	{r4}
   2a564:	4770      	bx	lr
   2a566:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a568:	43c9      	mvns	r1, r1
   2a56a:	f7ff bfd3 	b.w	2a514 <atomic_and>

0002a56e <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   2a56e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a572:	b087      	sub	sp, #28
   2a574:	4605      	mov	r5, r0
   2a576:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
   2a57a:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2a57e:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   2a582:	460c      	mov	r4, r1
   2a584:	4690      	mov	r8, r2
	struct bt_ad d[2] = {};
   2a586:	2100      	movs	r1, #0
   2a588:	2210      	movs	r2, #16
   2a58a:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   2a58c:	461f      	mov	r7, r3
	struct bt_ad d[2] = {};
   2a58e:	f004 f80b 	bl	2e5a8 <memset>
	if (name_type != ADV_NAME_TYPE_NONE) {
   2a592:	b186      	cbz	r6, 2a5b6 <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   2a594:	f7df fbe8 	bl	9d68 <bt_get_name>
   2a598:	4683      	mov	fp, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   2a59a:	2c00      	cmp	r4, #0
   2a59c:	d139      	bne.n	2a612 <le_adv_update.constprop.0+0xa4>
   2a59e:	2f00      	cmp	r7, #0
   2a5a0:	d142      	bne.n	2a628 <le_adv_update.constprop.0+0xba>
		data = (struct bt_data)BT_DATA(
   2a5a2:	4658      	mov	r0, fp
   2a5a4:	f7d6 fd75 	bl	1092 <strlen>
   2a5a8:	2309      	movs	r3, #9
   2a5aa:	f88d 3000 	strb.w	r3, [sp]
   2a5ae:	f88d 0001 	strb.w	r0, [sp, #1]
   2a5b2:	f8cd b004 	str.w	fp, [sp, #4]
		if (name_type == ADV_NAME_TYPE_AD) {
   2a5b6:	2e01      	cmp	r6, #1
			d_len = 2;
   2a5b8:	bf0c      	ite	eq
   2a5ba:	2202      	moveq	r2, #2
		d_len = 1;
   2a5bc:	2201      	movne	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2a5be:	a902      	add	r1, sp, #8
   2a5c0:	f242 0008 	movw	r0, #8200	; 0x2008
		d[0].len = ad_len;
   2a5c4:	e9cd 4802 	strd	r4, r8, [sp, #8]
			d[1].data = &data;
   2a5c8:	bf04      	itt	eq
   2a5ca:	f8cd d010 	streq.w	sp, [sp, #16]
			d[1].len = 1;
   2a5ce:	9605      	streq	r6, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2a5d0:	f7e0 f858 	bl	a684 <hci_set_ad>
		if (err) {
   2a5d4:	4604      	mov	r4, r0
   2a5d6:	b978      	cbnz	r0, 2a5f8 <le_adv_update.constprop.0+0x8a>
	if (scannable) {
   2a5d8:	f1ba 0f00 	cmp.w	sl, #0
   2a5dc:	d126      	bne.n	2a62c <le_adv_update.constprop.0+0xbe>
   2a5de:	3510      	adds	r5, #16
   2a5e0:	f3bf 8f5b 	dmb	ish
   2a5e4:	e855 3f00 	ldrex	r3, [r5]
   2a5e8:	f043 0304 	orr.w	r3, r3, #4
   2a5ec:	e845 3200 	strex	r2, r3, [r5]
   2a5f0:	2a00      	cmp	r2, #0
   2a5f2:	d1f7      	bne.n	2a5e4 <le_adv_update.constprop.0+0x76>
   2a5f4:	f3bf 8f5b 	dmb	ish
}
   2a5f8:	4620      	mov	r0, r4
   2a5fa:	b007      	add	sp, #28
   2a5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a600:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   2a604:	3a08      	subs	r2, #8
   2a606:	2a01      	cmp	r2, #1
   2a608:	d925      	bls.n	2a656 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2a60a:	3301      	adds	r3, #1
   2a60c:	4598      	cmp	r8, r3
   2a60e:	d1f7      	bne.n	2a600 <le_adv_update.constprop.0+0x92>
   2a610:	e7c5      	b.n	2a59e <le_adv_update.constprop.0+0x30>
   2a612:	2300      	movs	r3, #0
   2a614:	e7fa      	b.n	2a60c <le_adv_update.constprop.0+0x9e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   2a616:	f817 2033 	ldrb.w	r2, [r7, r3, lsl #3]
   2a61a:	3a08      	subs	r2, #8
   2a61c:	2a01      	cmp	r2, #1
   2a61e:	d91a      	bls.n	2a656 <le_adv_update.constprop.0+0xe8>
	for (i = 0; i < ad_len; i++) {
   2a620:	3301      	adds	r3, #1
   2a622:	4599      	cmp	r9, r3
   2a624:	d1f7      	bne.n	2a616 <le_adv_update.constprop.0+0xa8>
   2a626:	e7bc      	b.n	2a5a2 <le_adv_update.constprop.0+0x34>
   2a628:	2300      	movs	r3, #0
   2a62a:	e7fa      	b.n	2a622 <le_adv_update.constprop.0+0xb4>
		if (name_type == ADV_NAME_TYPE_SD) {
   2a62c:	2e02      	cmp	r6, #2
   2a62e:	f04f 0201 	mov.w	r2, #1
			d[1].len = 1;
   2a632:	bf08      	it	eq
   2a634:	9205      	streq	r2, [sp, #20]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a636:	a902      	add	r1, sp, #8
			d_len = 2;
   2a638:	bf08      	it	eq
   2a63a:	4632      	moveq	r2, r6
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a63c:	f242 0009 	movw	r0, #8201	; 0x2009
			d[1].data = &data;
   2a640:	bf08      	it	eq
   2a642:	f8cd d010 	streq.w	sp, [sp, #16]
		d[0].len = sd_len;
   2a646:	e9cd 7902 	strd	r7, r9, [sp, #8]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   2a64a:	f7e0 f81b 	bl	a684 <hci_set_ad>
		if (err) {
   2a64e:	2800      	cmp	r0, #0
   2a650:	d0c5      	beq.n	2a5de <le_adv_update.constprop.0+0x70>
   2a652:	4604      	mov	r4, r0
   2a654:	e7d0      	b.n	2a5f8 <le_adv_update.constprop.0+0x8a>
			return -EINVAL;
   2a656:	f06f 0415 	mvn.w	r4, #21
   2a65a:	e7cd      	b.n	2a5f8 <le_adv_update.constprop.0+0x8a>

0002a65c <get_adv_name_type_param>:
	if (param->options & BT_LE_ADV_OPT_USE_NAME) {
   2a65c:	6843      	ldr	r3, [r0, #4]
   2a65e:	f013 0008 	ands.w	r0, r3, #8
   2a662:	d00a      	beq.n	2a67a <get_adv_name_type_param+0x1e>
		if (param->options & BT_LE_ADV_OPT_FORCE_NAME_IN_AD) {
   2a664:	035a      	lsls	r2, r3, #13
   2a666:	d407      	bmi.n	2a678 <get_adv_name_type_param+0x1c>
		if ((param->options & BT_LE_ADV_OPT_EXT_ADV) &&
   2a668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
		return ADV_NAME_TYPE_SD;
   2a66c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   2a670:	bf0c      	ite	eq
   2a672:	2001      	moveq	r0, #1
   2a674:	2002      	movne	r0, #2
   2a676:	4770      	bx	lr
			return ADV_NAME_TYPE_AD;
   2a678:	2001      	movs	r0, #1
}
   2a67a:	4770      	bx	lr

0002a67c <bt_le_adv_set_enable_legacy>:
{
   2a67c:	b570      	push	{r4, r5, r6, lr}
   2a67e:	4606      	mov	r6, r0
   2a680:	b086      	sub	sp, #24
   2a682:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   2a684:	f242 000a 	movw	r0, #8202	; 0x200a
   2a688:	2101      	movs	r1, #1
   2a68a:	f7de fc41 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a68e:	4604      	mov	r4, r0
   2a690:	b1b0      	cbz	r0, 2a6c0 <bt_le_adv_set_enable_legacy+0x44>
   2a692:	3008      	adds	r0, #8
	if (enable) {
   2a694:	b195      	cbz	r5, 2a6bc <bt_le_adv_set_enable_legacy+0x40>
   2a696:	2101      	movs	r1, #1
   2a698:	f002 fa26 	bl	2cae8 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   2a69c:	f106 0210 	add.w	r2, r6, #16
   2a6a0:	a903      	add	r1, sp, #12
   2a6a2:	4620      	mov	r0, r4
   2a6a4:	9500      	str	r5, [sp, #0]
   2a6a6:	2306      	movs	r3, #6
   2a6a8:	f7de fc20 	bl	8eec <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   2a6ac:	2200      	movs	r2, #0
   2a6ae:	4621      	mov	r1, r4
   2a6b0:	f242 000a 	movw	r0, #8202	; 0x200a
   2a6b4:	f7de fd94 	bl	91e0 <bt_hci_cmd_send_sync>
}
   2a6b8:	b006      	add	sp, #24
   2a6ba:	bd70      	pop	{r4, r5, r6, pc}
   2a6bc:	4629      	mov	r1, r5
   2a6be:	e7eb      	b.n	2a698 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2a6c0:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a6c4:	e7f8      	b.n	2a6b8 <bt_le_adv_set_enable_legacy+0x3c>

0002a6c6 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   2a6c6:	f7ff bfd9 	b.w	2a67c <bt_le_adv_set_enable_legacy>

0002a6ca <bt_le_lim_adv_cancel_timeout>:
	return k_work_cancel_delayable(&adv->lim_adv_timeout_work);
   2a6ca:	3018      	adds	r0, #24
   2a6cc:	f003 bbf9 	b.w	2dec2 <k_work_cancel_delayable>

0002a6d0 <atomic_and>:
{
   2a6d0:	4603      	mov	r3, r0
}
   2a6d2:	f3bf 8f5b 	dmb	ish
   2a6d6:	e853 0f00 	ldrex	r0, [r3]
   2a6da:	ea00 0201 	and.w	r2, r0, r1
   2a6de:	e843 2c00 	strex	ip, r2, [r3]
   2a6e2:	f1bc 0f00 	cmp.w	ip, #0
   2a6e6:	d1f6      	bne.n	2a6d6 <atomic_and+0x6>
   2a6e8:	f3bf 8f5b 	dmb	ish
   2a6ec:	4770      	bx	lr

0002a6ee <bt_addr_le_copy>:
   2a6ee:	680b      	ldr	r3, [r1, #0]
   2a6f0:	6003      	str	r3, [r0, #0]
   2a6f2:	888b      	ldrh	r3, [r1, #4]
   2a6f4:	8083      	strh	r3, [r0, #4]
   2a6f6:	798b      	ldrb	r3, [r1, #6]
   2a6f8:	7183      	strb	r3, [r0, #6]
   2a6fa:	4770      	bx	lr

0002a6fc <bt_le_scan_set_enable>:
	return bt_le_scan_set_enable_legacy(enable);
   2a6fc:	f7e0 baa4 	b.w	ac48 <bt_le_scan_set_enable_legacy>

0002a700 <atomic_and>:
{
   2a700:	4603      	mov	r3, r0
}
   2a702:	f3bf 8f5b 	dmb	ish
   2a706:	e853 0f00 	ldrex	r0, [r3]
   2a70a:	ea00 0201 	and.w	r2, r0, r1
   2a70e:	e843 2c00 	strex	ip, r2, [r3]
   2a712:	f1bc 0f00 	cmp.w	ip, #0
   2a716:	d1f6      	bne.n	2a706 <atomic_and+0x6>
   2a718:	f3bf 8f5b 	dmb	ish
   2a71c:	4770      	bx	lr

0002a71e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a71e:	f3bf 8f5b 	dmb	ish
   2a722:	6800      	ldr	r0, [r0, #0]
   2a724:	f3bf 8f5b 	dmb	ish
}
   2a728:	4770      	bx	lr

0002a72a <atomic_or>:
{
   2a72a:	4603      	mov	r3, r0
}
   2a72c:	f3bf 8f5b 	dmb	ish
   2a730:	e853 0f00 	ldrex	r0, [r3]
   2a734:	ea40 0201 	orr.w	r2, r0, r1
   2a738:	e843 2c00 	strex	ip, r2, [r3]
   2a73c:	f1bc 0f00 	cmp.w	ip, #0
   2a740:	d1f6      	bne.n	2a730 <atomic_or+0x6>
   2a742:	f3bf 8f5b 	dmb	ish
   2a746:	4770      	bx	lr

0002a748 <bt_addr_le_copy>:
   2a748:	680b      	ldr	r3, [r1, #0]
   2a74a:	6003      	str	r3, [r0, #0]
   2a74c:	888b      	ldrh	r3, [r1, #4]
   2a74e:	8083      	strh	r3, [r0, #4]
   2a750:	798b      	ldrb	r3, [r1, #6]
   2a752:	7183      	strb	r3, [r0, #6]
   2a754:	4770      	bx	lr

0002a756 <z_log_msg2_static_create.constprop.0>:
   2a756:	2300      	movs	r3, #0
   2a758:	f7fe b9aa 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002a75c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2a75c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2a75e:	ab0a      	add	r3, sp, #40	; 0x28
   2a760:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2a762:	9302      	str	r3, [sp, #8]
   2a764:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2a766:	9301      	str	r3, [sp, #4]
   2a768:	2300      	movs	r3, #0
   2a76a:	9300      	str	r3, [sp, #0]
   2a76c:	2202      	movs	r2, #2
   2a76e:	4618      	mov	r0, r3
   2a770:	f7dc fb9e 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2a774:	b007      	add	sp, #28
   2a776:	f85d fb04 	ldr.w	pc, [sp], #4

0002a77a <tx_notify>:
{
   2a77a:	b570      	push	{r4, r5, r6, lr}
   2a77c:	4604      	mov	r4, r0
	__asm__ volatile(
   2a77e:	f04f 0220 	mov.w	r2, #32
   2a782:	f3ef 8311 	mrs	r3, BASEPRI
   2a786:	f382 8812 	msr	BASEPRI_MAX, r2
   2a78a:	f3bf 8f6f 	isb	sy
	return list->head;
   2a78e:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2a790:	b920      	cbnz	r0, 2a79c <tx_notify+0x22>
	__asm__ volatile(
   2a792:	f383 8811 	msr	BASEPRI, r3
   2a796:	f3bf 8f6f 	isb	sy
}
   2a79a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a79c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   2a79e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2a7a0:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2a7a2:	4288      	cmp	r0, r1
	list->tail = node;
   2a7a4:	bf08      	it	eq
   2a7a6:	6262      	streq	r2, [r4, #36]	; 0x24
   2a7a8:	f383 8811 	msr	BASEPRI, r3
   2a7ac:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2a7b0:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2a7b4:	f7e0 fd60 	bl	b278 <tx_free>
		cb(conn, user_data);
   2a7b8:	4631      	mov	r1, r6
   2a7ba:	4620      	mov	r0, r4
   2a7bc:	47a8      	blx	r5
	while (1) {
   2a7be:	e7de      	b.n	2a77e <tx_notify+0x4>

0002a7c0 <tx_complete_work>:
	tx_notify(conn);
   2a7c0:	3828      	subs	r0, #40	; 0x28
   2a7c2:	f7ff bfda 	b.w	2a77a <tx_notify>

0002a7c6 <bt_conn_reset_rx_state>:
{
   2a7c6:	b510      	push	{r4, lr}
   2a7c8:	4604      	mov	r4, r0
	if (!conn->rx) {
   2a7ca:	6900      	ldr	r0, [r0, #16]
   2a7cc:	b118      	cbz	r0, 2a7d6 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2a7ce:	f7f6 f92f 	bl	20a30 <net_buf_unref>
	conn->rx = NULL;
   2a7d2:	2300      	movs	r3, #0
   2a7d4:	6123      	str	r3, [r4, #16]
}
   2a7d6:	bd10      	pop	{r4, pc}

0002a7d8 <conn_cleanup>:
{
   2a7d8:	b570      	push	{r4, r5, r6, lr}
   2a7da:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   2a7dc:	f100 0638 	add.w	r6, r0, #56	; 0x38
   2a7e0:	2200      	movs	r2, #0
   2a7e2:	2300      	movs	r3, #0
   2a7e4:	4630      	mov	r0, r6
   2a7e6:	f002 f90d 	bl	2ca04 <net_buf_get>
   2a7ea:	4605      	mov	r5, r0
   2a7ec:	b950      	cbnz	r0, 2a804 <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   2a7ee:	4620      	mov	r0, r4
   2a7f0:	f7ff ffe9 	bl	2a7c6 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a7f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2a7f8:	2200      	movs	r2, #0
}
   2a7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   2a7fe:	2300      	movs	r3, #0
   2a800:	f7fa bc66 	b.w	250d0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   2a804:	6968      	ldr	r0, [r5, #20]
   2a806:	b108      	cbz	r0, 2a80c <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   2a808:	f7e0 fd36 	bl	b278 <tx_free>
		net_buf_unref(buf);
   2a80c:	4628      	mov	r0, r5
   2a80e:	f7f6 f90f 	bl	20a30 <net_buf_unref>
   2a812:	e7e5      	b.n	2a7e0 <conn_cleanup+0x8>

0002a814 <bt_conn_ref>:
{
   2a814:	b510      	push	{r4, lr}
   2a816:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2a818:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
   2a81c:	4610      	mov	r0, r2
   2a81e:	f7ff ff7e 	bl	2a71e <atomic_get>
		if (!old) {
   2a822:	b180      	cbz	r0, 2a846 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2a824:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2a828:	1c41      	adds	r1, r0, #1
   2a82a:	e852 4f00 	ldrex	r4, [r2]
   2a82e:	4284      	cmp	r4, r0
   2a830:	d104      	bne.n	2a83c <bt_conn_ref+0x28>
   2a832:	e842 1c00 	strex	ip, r1, [r2]
   2a836:	f1bc 0f00 	cmp.w	ip, #0
   2a83a:	d1f6      	bne.n	2a82a <bt_conn_ref+0x16>
   2a83c:	f3bf 8f5b 	dmb	ish
   2a840:	d1ec      	bne.n	2a81c <bt_conn_ref+0x8>
}
   2a842:	4618      	mov	r0, r3
   2a844:	bd10      	pop	{r4, pc}
			return NULL;
   2a846:	4603      	mov	r3, r0
   2a848:	e7fb      	b.n	2a842 <bt_conn_ref+0x2e>

0002a84a <bt_conn_unref>:
{
   2a84a:	b508      	push	{r3, lr}
   2a84c:	4603      	mov	r3, r0
	old = atomic_dec(&conn->ref);
   2a84e:	30b8      	adds	r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2a850:	f3bf 8f5b 	dmb	ish
   2a854:	e850 2f00 	ldrex	r2, [r0]
   2a858:	3a01      	subs	r2, #1
   2a85a:	e840 2100 	strex	r1, r2, [r0]
   2a85e:	2900      	cmp	r1, #0
   2a860:	d1f8      	bne.n	2a854 <bt_conn_unref+0xa>
   2a862:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2a866:	789b      	ldrb	r3, [r3, #2]
   2a868:	2b01      	cmp	r3, #1
   2a86a:	d106      	bne.n	2a87a <bt_conn_unref+0x30>
	    atomic_get(&conn->ref) == 0) {
   2a86c:	f7ff ff57 	bl	2a71e <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   2a870:	b918      	cbnz	r0, 2a87a <bt_conn_unref+0x30>
}
   2a872:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   2a876:	f7e0 b99d 	b.w	abb4 <bt_le_adv_resume>
}
   2a87a:	bd08      	pop	{r3, pc}

0002a87c <conn_lookup_handle>:
{
   2a87c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a880:	4607      	mov	r7, r0
   2a882:	460e      	mov	r6, r1
   2a884:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2a886:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a888:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   2a88c:	42b4      	cmp	r4, r6
   2a88e:	d103      	bne.n	2a898 <conn_lookup_handle+0x1c>
	return NULL;
   2a890:	2300      	movs	r3, #0
}
   2a892:	4618      	mov	r0, r3
   2a894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2a898:	fb09 7004 	mla	r0, r9, r4, r7
   2a89c:	f7ff ffba 	bl	2a814 <bt_conn_ref>
   2a8a0:	4603      	mov	r3, r0
		if (!conn) {
   2a8a2:	b158      	cbz	r0, 2a8bc <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2a8a4:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2a8a6:	2d01      	cmp	r5, #1
   2a8a8:	d002      	beq.n	2a8b0 <conn_lookup_handle+0x34>
   2a8aa:	3d07      	subs	r5, #7
   2a8ac:	2d01      	cmp	r5, #1
   2a8ae:	d803      	bhi.n	2a8b8 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2a8b0:	881a      	ldrh	r2, [r3, #0]
   2a8b2:	4542      	cmp	r2, r8
   2a8b4:	d0ed      	beq.n	2a892 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2a8b6:	4618      	mov	r0, r3
   2a8b8:	f7ff ffc7 	bl	2a84a <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2a8bc:	3401      	adds	r4, #1
   2a8be:	e7e5      	b.n	2a88c <conn_lookup_handle+0x10>

0002a8c0 <bt_conn_connected>:
{
   2a8c0:	b510      	push	{r4, lr}
   2a8c2:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2a8c4:	f7e1 fc0a 	bl	c0dc <bt_l2cap_connected>
	notify_connected(conn);
   2a8c8:	4620      	mov	r0, r4
}
   2a8ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2a8ce:	f7e0 bcdd 	b.w	b28c <notify_connected>

0002a8d2 <bt_conn_le_start_encryption>:
{
   2a8d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a8d6:	4681      	mov	r9, r0
   2a8d8:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2a8da:	f242 0019 	movw	r0, #8217	; 0x2019
   2a8de:	211c      	movs	r1, #28
{
   2a8e0:	9e08      	ldr	r6, [sp, #32]
   2a8e2:	4690      	mov	r8, r2
   2a8e4:	461f      	mov	r7, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
   2a8e6:	f7de fb13 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2a8ea:	4605      	mov	r5, r0
   2a8ec:	b338      	cbz	r0, 2a93e <bt_conn_le_start_encryption+0x6c>
	return net_buf_simple_add(&buf->b, len);
   2a8ee:	211c      	movs	r1, #28
   2a8f0:	3008      	adds	r0, #8
   2a8f2:	f002 f8ea 	bl	2caca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2a8f6:	4603      	mov	r3, r0
   2a8f8:	f8b9 2000 	ldrh.w	r2, [r9]
   2a8fc:	f823 2b02 	strh.w	r2, [r3], #2
   2a900:	6822      	ldr	r2, [r4, #0]
   2a902:	f8c0 2002 	str.w	r2, [r0, #2]
   2a906:	6862      	ldr	r2, [r4, #4]
   2a908:	605a      	str	r2, [r3, #4]
   2a90a:	f8b8 3000 	ldrh.w	r3, [r8]
   2a90e:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
   2a910:	f100 040c 	add.w	r4, r0, #12
   2a914:	4632      	mov	r2, r6
   2a916:	4639      	mov	r1, r7
   2a918:	4620      	mov	r0, r4
   2a91a:	f003 fe24 	bl	2e566 <memcpy>
	if (len < sizeof(cp->ltk)) {
   2a91e:	2e0f      	cmp	r6, #15
   2a920:	d805      	bhi.n	2a92e <bt_conn_le_start_encryption+0x5c>
__ssp_bos_icheck3(memset, void *, int)
   2a922:	f1c6 0210 	rsb	r2, r6, #16
   2a926:	2100      	movs	r1, #0
   2a928:	19a0      	adds	r0, r4, r6
   2a92a:	f003 fe3d 	bl	2e5a8 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2a92e:	4629      	mov	r1, r5
   2a930:	2200      	movs	r2, #0
}
   2a932:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
   2a936:	f242 0019 	movw	r0, #8217	; 0x2019
   2a93a:	f7de bc51 	b.w	91e0 <bt_hci_cmd_send_sync>
}
   2a93e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002a946 <bt_conn_set_security>:
{
   2a946:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2a948:	7b43      	ldrb	r3, [r0, #13]
   2a94a:	2b07      	cmp	r3, #7
{
   2a94c:	4604      	mov	r4, r0
   2a94e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2a950:	d11c      	bne.n	2a98c <bt_conn_set_security+0x46>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   2a952:	7a43      	ldrb	r3, [r0, #9]
   2a954:	428b      	cmp	r3, r1
   2a956:	d21c      	bcs.n	2a992 <bt_conn_set_security+0x4c>
   2a958:	7a83      	ldrb	r3, [r0, #10]
   2a95a:	428b      	cmp	r3, r1
   2a95c:	d219      	bcs.n	2a992 <bt_conn_set_security+0x4c>
	if (val) {
   2a95e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   2a960:	f100 0004 	add.w	r0, r0, #4
   2a964:	d50d      	bpl.n	2a982 <bt_conn_set_security+0x3c>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2a966:	f44f 6100 	mov.w	r1, #2048	; 0x800
   2a96a:	f7ff fede 	bl	2a72a <atomic_or>
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   2a96e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   2a972:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   2a974:	4620      	mov	r0, r4
   2a976:	f001 fea9 	bl	2c6cc <bt_smp_start_security>
	if (err) {
   2a97a:	b108      	cbz	r0, 2a980 <bt_conn_set_security+0x3a>
		conn->required_sec_level = conn->sec_level;
   2a97c:	7a63      	ldrb	r3, [r4, #9]
   2a97e:	72a3      	strb	r3, [r4, #10]
}
   2a980:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2a982:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   2a986:	f7ff febb 	bl	2a700 <atomic_and>
   2a98a:	e7f0      	b.n	2a96e <bt_conn_set_security+0x28>
		return -ENOTCONN;
   2a98c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2a990:	e7f6      	b.n	2a980 <bt_conn_set_security+0x3a>
		return 0;
   2a992:	2000      	movs	r0, #0
   2a994:	e7f4      	b.n	2a980 <bt_conn_set_security+0x3a>

0002a996 <bt_conn_get_security>:
}
   2a996:	7a40      	ldrb	r0, [r0, #9]
   2a998:	4770      	bx	lr

0002a99a <bt_conn_is_peer_addr_le>:
{
   2a99a:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2a99c:	7a03      	ldrb	r3, [r0, #8]
   2a99e:	428b      	cmp	r3, r1
{
   2a9a0:	4604      	mov	r4, r0
   2a9a2:	4615      	mov	r5, r2
	if (id != conn->id) {
   2a9a4:	d115      	bne.n	2a9d2 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2a9a6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2a9aa:	2207      	movs	r2, #7
   2a9ac:	4628      	mov	r0, r5
   2a9ae:	f003 fdca 	bl	2e546 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2a9b2:	b180      	cbz	r0, 2a9d6 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2a9b4:	78e3      	ldrb	r3, [r4, #3]
   2a9b6:	2207      	movs	r2, #7
   2a9b8:	b943      	cbnz	r3, 2a9cc <bt_conn_is_peer_addr_le+0x32>
   2a9ba:	f104 0196 	add.w	r1, r4, #150	; 0x96
   2a9be:	4628      	mov	r0, r5
   2a9c0:	f003 fdc1 	bl	2e546 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2a9c4:	fab0 f080 	clz	r0, r0
   2a9c8:	0940      	lsrs	r0, r0, #5
}
   2a9ca:	bd38      	pop	{r3, r4, r5, pc}
   2a9cc:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   2a9d0:	e7f5      	b.n	2a9be <bt_conn_is_peer_addr_le+0x24>
		return false;
   2a9d2:	2000      	movs	r0, #0
   2a9d4:	e7f9      	b.n	2a9ca <bt_conn_is_peer_addr_le+0x30>
		return true;
   2a9d6:	2001      	movs	r0, #1
   2a9d8:	e7f7      	b.n	2a9ca <bt_conn_is_peer_addr_le+0x30>

0002a9da <bt_conn_get_dst>:
}
   2a9da:	3088      	adds	r0, #136	; 0x88
   2a9dc:	4770      	bx	lr

0002a9de <bt_conn_disconnect>:
{
   2a9de:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a9e0:	7883      	ldrb	r3, [r0, #2]
   2a9e2:	2b01      	cmp	r3, #1
{
   2a9e4:	4604      	mov	r4, r0
   2a9e6:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2a9e8:	d103      	bne.n	2a9f2 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2a9ea:	2100      	movs	r1, #0
   2a9ec:	3088      	adds	r0, #136	; 0x88
   2a9ee:	f7e1 f91b 	bl	bc28 <bt_le_set_auto_conn>
	switch (conn->state) {
   2a9f2:	7b63      	ldrb	r3, [r4, #13]
   2a9f4:	3b02      	subs	r3, #2
   2a9f6:	2b06      	cmp	r3, #6
   2a9f8:	d805      	bhi.n	2aa06 <bt_conn_disconnect+0x28>
   2a9fa:	e8df f003 	tbb	[pc, r3]
   2a9fe:	0408      	.short	0x0408
   2aa00:	1a120404 	.word	0x1a120404
   2aa04:	10          	.byte	0x10
   2aa05:	00          	.byte	0x00
   2aa06:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2aa0a:	4628      	mov	r0, r5
   2aa0c:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2aa0e:	4620      	mov	r0, r4
		conn->err = reason;
   2aa10:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2aa12:	2100      	movs	r1, #0
   2aa14:	f7e0 fe6c 	bl	b6f0 <bt_conn_set_state>
			bt_le_scan_update(false);
   2aa18:	2000      	movs	r0, #0
   2aa1a:	f7e0 f997 	bl	ad4c <bt_le_scan_update>
		return 0;
   2aa1e:	2500      	movs	r5, #0
   2aa20:	e7f3      	b.n	2aa0a <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   2aa22:	f104 0058 	add.w	r0, r4, #88	; 0x58
   2aa26:	f003 fa4c 	bl	2dec2 <k_work_cancel_delayable>
}
   2aa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2aa2e:	f7de bcdf 	b.w	93f0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2aa32:	4629      	mov	r1, r5
   2aa34:	8820      	ldrh	r0, [r4, #0]
   2aa36:	f7ff fb7c 	bl	2a132 <bt_hci_disconnect>
	if (err) {
   2aa3a:	4605      	mov	r5, r0
   2aa3c:	2800      	cmp	r0, #0
   2aa3e:	d1e4      	bne.n	2aa0a <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   2aa40:	7b63      	ldrb	r3, [r4, #13]
   2aa42:	2b07      	cmp	r3, #7
   2aa44:	d1e1      	bne.n	2aa0a <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2aa46:	2108      	movs	r1, #8
   2aa48:	4620      	mov	r0, r4
   2aa4a:	f7e0 fe51 	bl	b6f0 <bt_conn_set_state>
   2aa4e:	e7dc      	b.n	2aa0a <bt_conn_disconnect+0x2c>

0002aa50 <bt_conn_le_conn_update>:
{
   2aa50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa52:	4607      	mov	r7, r0
   2aa54:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2aa56:	f242 0013 	movw	r0, #8211	; 0x2013
   2aa5a:	210e      	movs	r1, #14
   2aa5c:	f7de fa58 	bl	8f10 <bt_hci_cmd_create>
	if (!buf) {
   2aa60:	4606      	mov	r6, r0
   2aa62:	b1d0      	cbz	r0, 2aa9a <bt_conn_le_conn_update+0x4a>
   2aa64:	210e      	movs	r1, #14
   2aa66:	3008      	adds	r0, #8
   2aa68:	f002 f82f 	bl	2caca <net_buf_simple_add>
   2aa6c:	220e      	movs	r2, #14
   2aa6e:	4604      	mov	r4, r0
   2aa70:	2100      	movs	r1, #0
   2aa72:	f003 fd99 	bl	2e5a8 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2aa76:	883b      	ldrh	r3, [r7, #0]
   2aa78:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2aa7a:	882b      	ldrh	r3, [r5, #0]
   2aa7c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2aa7e:	886b      	ldrh	r3, [r5, #2]
   2aa80:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2aa82:	88ab      	ldrh	r3, [r5, #4]
   2aa84:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2aa86:	88eb      	ldrh	r3, [r5, #6]
   2aa88:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2aa8a:	4631      	mov	r1, r6
   2aa8c:	2200      	movs	r2, #0
}
   2aa8e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2aa92:	f242 0013 	movw	r0, #8211	; 0x2013
   2aa96:	f7de bba3 	b.w	91e0 <bt_hci_cmd_send_sync>
}
   2aa9a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aa9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aaa0 <bt_conn_le_param_update>:
	if (conn->le.interval >= param->interval_min &&
   2aaa0:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
{
   2aaa4:	4603      	mov	r3, r0
	if (conn->le.interval >= param->interval_min &&
   2aaa6:	8808      	ldrh	r0, [r1, #0]
   2aaa8:	4290      	cmp	r0, r2
{
   2aaaa:	b510      	push	{r4, lr}
	if (conn->le.interval >= param->interval_min &&
   2aaac:	d814      	bhi.n	2aad8 <bt_conn_le_param_update+0x38>
   2aaae:	8848      	ldrh	r0, [r1, #2]
   2aab0:	4290      	cmp	r0, r2
   2aab2:	d311      	bcc.n	2aad8 <bt_conn_le_param_update+0x38>
	    conn->le.interval <= param->interval_max &&
   2aab4:	f8b3 00a4 	ldrh.w	r0, [r3, #164]	; 0xa4
   2aab8:	888a      	ldrh	r2, [r1, #4]
   2aaba:	4290      	cmp	r0, r2
   2aabc:	d10c      	bne.n	2aad8 <bt_conn_le_param_update+0x38>
	    conn->le.latency == param->latency &&
   2aabe:	f8b3 00a6 	ldrh.w	r0, [r3, #166]	; 0xa6
   2aac2:	88ca      	ldrh	r2, [r1, #6]
   2aac4:	4290      	cmp	r0, r2
   2aac6:	d107      	bne.n	2aad8 <bt_conn_le_param_update+0x38>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2aac8:	f46f 7100 	mvn.w	r1, #512	; 0x200
   2aacc:	1d18      	adds	r0, r3, #4
   2aace:	f7ff fe17 	bl	2a700 <atomic_and>
		return -EALREADY;
   2aad2:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   2aad6:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2aad8:	78da      	ldrb	r2, [r3, #3]
   2aada:	b922      	cbnz	r2, 2aae6 <bt_conn_le_param_update+0x46>
}
   2aadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			return send_conn_le_param_update(conn, param);
   2aae0:	4618      	mov	r0, r3
   2aae2:	f7e1 b905 	b.w	bcf0 <send_conn_le_param_update>
		if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_UPDATE)) {
   2aae6:	1d1a      	adds	r2, r3, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2aae8:	4610      	mov	r0, r2
   2aaea:	f7ff fe18 	bl	2a71e <atomic_get>
   2aaee:	f3c0 2400 	ubfx	r4, r0, #8, #1
   2aaf2:	05c0      	lsls	r0, r0, #23
   2aaf4:	d4f2      	bmi.n	2aadc <bt_conn_le_param_update+0x3c>
		conn->le.interval_min = param->interval_min;
   2aaf6:	8808      	ldrh	r0, [r1, #0]
   2aaf8:	f8a3 00a0 	strh.w	r0, [r3, #160]	; 0xa0
		conn->le.interval_max = param->interval_max;
   2aafc:	8848      	ldrh	r0, [r1, #2]
   2aafe:	f8a3 00a2 	strh.w	r0, [r3, #162]	; 0xa2
		conn->le.pending_latency = param->latency;
   2ab02:	8888      	ldrh	r0, [r1, #4]
		conn->le.pending_timeout = param->timeout;
   2ab04:	88c9      	ldrh	r1, [r1, #6]
		conn->le.pending_latency = param->latency;
   2ab06:	f8a3 00a8 	strh.w	r0, [r3, #168]	; 0xa8
		conn->le.pending_timeout = param->timeout;
   2ab0a:	f8a3 10aa 	strh.w	r1, [r3, #170]	; 0xaa
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2ab0e:	4610      	mov	r0, r2
   2ab10:	f44f 7100 	mov.w	r1, #512	; 0x200
   2ab14:	f7ff fe09 	bl	2a72a <atomic_or>
	return 0;
   2ab18:	4620      	mov	r0, r4
}
   2ab1a:	e7dc      	b.n	2aad6 <bt_conn_le_param_update+0x36>

0002ab1c <l2cap_connected>:
}
   2ab1c:	4770      	bx	lr

0002ab1e <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2ab1e:	3010      	adds	r0, #16
   2ab20:	f003 b9cf 	b.w	2dec2 <k_work_cancel_delayable>

0002ab24 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2ab24:	2300      	movs	r3, #0
   2ab26:	f7fd bfc3 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002ab2a <bt_l2cap_chan_remove>:
	return list->head;
   2ab2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2ab2c:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ab2e:	b173      	cbz	r3, 2ab4e <bt_l2cap_chan_remove+0x24>
   2ab30:	3b08      	subs	r3, #8
   2ab32:	2500      	movs	r5, #0
	return node->next;
   2ab34:	461a      	mov	r2, r3
		if (chan == ch) {
   2ab36:	4299      	cmp	r1, r3
   2ab38:	f852 4f08 	ldr.w	r4, [r2, #8]!
   2ab3c:	d10d      	bne.n	2ab5a <bt_l2cap_chan_remove+0x30>
	return list->tail;
   2ab3e:	6d41      	ldr	r1, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2ab40:	b935      	cbnz	r5, 2ab50 <bt_l2cap_chan_remove+0x26>
   2ab42:	4291      	cmp	r1, r2
	list->head = node;
   2ab44:	6504      	str	r4, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2ab46:	d100      	bne.n	2ab4a <bt_l2cap_chan_remove+0x20>
	list->tail = node;
   2ab48:	6544      	str	r4, [r0, #84]	; 0x54
	parent->next = child;
   2ab4a:	2200      	movs	r2, #0
   2ab4c:	609a      	str	r2, [r3, #8]
}
   2ab4e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   2ab50:	4291      	cmp	r1, r2
	parent->next = child;
   2ab52:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2ab54:	bf08      	it	eq
   2ab56:	6545      	streq	r5, [r0, #84]	; 0x54
}
   2ab58:	e7f7      	b.n	2ab4a <bt_l2cap_chan_remove+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ab5a:	2c00      	cmp	r4, #0
   2ab5c:	d0f7      	beq.n	2ab4e <bt_l2cap_chan_remove+0x24>
   2ab5e:	f1a4 0308 	sub.w	r3, r4, #8
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2ab62:	4615      	mov	r5, r2
   2ab64:	e7e6      	b.n	2ab34 <bt_l2cap_chan_remove+0xa>

0002ab66 <bt_l2cap_chan_del>:
{
   2ab66:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2ab68:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2ab6c:	4604      	mov	r4, r0
	if (!chan->conn) {
   2ab6e:	b123      	cbz	r3, 2ab7a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ab70:	686b      	ldr	r3, [r5, #4]
   2ab72:	b103      	cbz	r3, 2ab76 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ab74:	4798      	blx	r3
	chan->conn = NULL;
   2ab76:	2300      	movs	r3, #0
   2ab78:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ab7a:	68e3      	ldr	r3, [r4, #12]
   2ab7c:	b10b      	cbz	r3, 2ab82 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ab7e:	4620      	mov	r0, r4
   2ab80:	4798      	blx	r3
	if (ops->released) {
   2ab82:	69eb      	ldr	r3, [r5, #28]
   2ab84:	b11b      	cbz	r3, 2ab8e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ab86:	4620      	mov	r0, r4
}
   2ab88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2ab8c:	4718      	bx	r3
}
   2ab8e:	bd70      	pop	{r4, r5, r6, pc}

0002ab90 <bt_l2cap_disconnected>:
	return list->head;
   2ab90:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2ab92:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ab94:	b160      	cbz	r0, 2abb0 <bt_l2cap_disconnected+0x20>
	return node->next;
   2ab96:	f850 4908 	ldr.w	r4, [r0], #-8
   2ab9a:	b104      	cbz	r4, 2ab9e <bt_l2cap_disconnected+0xe>
   2ab9c:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2ab9e:	f7ff ffe2 	bl	2ab66 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2aba2:	b12c      	cbz	r4, 2abb0 <bt_l2cap_disconnected+0x20>
   2aba4:	68a3      	ldr	r3, [r4, #8]
   2aba6:	b103      	cbz	r3, 2abaa <bt_l2cap_disconnected+0x1a>
   2aba8:	3b08      	subs	r3, #8
{
   2abaa:	4620      	mov	r0, r4
   2abac:	461c      	mov	r4, r3
   2abae:	e7f6      	b.n	2ab9e <bt_l2cap_disconnected+0xe>
}
   2abb0:	bd10      	pop	{r4, pc}

0002abb2 <bt_l2cap_security_changed>:
	return list->head;
   2abb2:	6d00      	ldr	r0, [r0, #80]	; 0x50
{
   2abb4:	b538      	push	{r3, r4, r5, lr}
   2abb6:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2abb8:	b178      	cbz	r0, 2abda <bt_l2cap_security_changed+0x28>
	return node->next;
   2abba:	f850 4908 	ldr.w	r4, [r0], #-8
   2abbe:	b104      	cbz	r4, 2abc2 <bt_l2cap_security_changed+0x10>
   2abc0:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   2abc2:	6843      	ldr	r3, [r0, #4]
   2abc4:	689b      	ldr	r3, [r3, #8]
   2abc6:	b10b      	cbz	r3, 2abcc <bt_l2cap_security_changed+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   2abc8:	4629      	mov	r1, r5
   2abca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2abcc:	b12c      	cbz	r4, 2abda <bt_l2cap_security_changed+0x28>
   2abce:	68a3      	ldr	r3, [r4, #8]
   2abd0:	b103      	cbz	r3, 2abd4 <bt_l2cap_security_changed+0x22>
   2abd2:	3b08      	subs	r3, #8
{
   2abd4:	4620      	mov	r0, r4
   2abd6:	461c      	mov	r4, r3
   2abd8:	e7f3      	b.n	2abc2 <bt_l2cap_security_changed+0x10>
}
   2abda:	bd38      	pop	{r3, r4, r5, pc}

0002abdc <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2abdc:	3104      	adds	r1, #4
   2abde:	f7e0 bea7 	b.w	b930 <bt_conn_create_pdu_timeout>

0002abe2 <bt_l2cap_send_cb>:
{
   2abe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2abe6:	4614      	mov	r4, r2
   2abe8:	4605      	mov	r5, r0
   2abea:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2abec:	f102 0008 	add.w	r0, r2, #8
   2abf0:	2104      	movs	r1, #4
   2abf2:	461e      	mov	r6, r3
   2abf4:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2abf8:	f001 ff88 	bl	2cb0c <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2abfc:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2abfe:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ac00:	3a04      	subs	r2, #4
   2ac02:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ac04:	4643      	mov	r3, r8
   2ac06:	4632      	mov	r2, r6
   2ac08:	4621      	mov	r1, r4
   2ac0a:	4628      	mov	r0, r5
}
   2ac0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ac10:	f7e0 bccc 	b.w	b5ac <bt_conn_send_cb>

0002ac14 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2ac14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2ac16:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2ac18:	2202      	movs	r2, #2
   2ac1a:	2001      	movs	r0, #1
   2ac1c:	f7e1 f9f0 	bl	c000 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   2ac20:	4604      	mov	r4, r0
   2ac22:	b198      	cbz	r0, 2ac4c <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2ac24:	2102      	movs	r1, #2
   2ac26:	3008      	adds	r0, #8
   2ac28:	f001 ff4f 	bl	2caca <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2ac2c:	2300      	movs	r3, #0
   2ac2e:	7003      	strb	r3, [r0, #0]
   2ac30:	7043      	strb	r3, [r0, #1]
   2ac32:	4622      	mov	r2, r4
   2ac34:	9300      	str	r3, [sp, #0]
   2ac36:	2105      	movs	r1, #5
   2ac38:	4628      	mov	r0, r5
   2ac3a:	f7ff ffd2 	bl	2abe2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2ac3e:	b128      	cbz	r0, 2ac4c <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2ac40:	4620      	mov	r0, r4
}
   2ac42:	b003      	add	sp, #12
   2ac44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2ac48:	f7f5 bef2 	b.w	20a30 <net_buf_unref>
}
   2ac4c:	b003      	add	sp, #12
   2ac4e:	bd30      	pop	{r4, r5, pc}

0002ac50 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2ac50:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac52:	b138      	cbz	r0, 2ac64 <bt_l2cap_le_lookup_tx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ac54:	f8b0 3078 	ldrh.w	r3, [r0, #120]	; 0x78
   2ac58:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac5a:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2ac5e:	d001      	beq.n	2ac64 <bt_l2cap_le_lookup_tx_cid+0x14>
	return node->next;
   2ac60:	6880      	ldr	r0, [r0, #8]
   2ac62:	e7f6      	b.n	2ac52 <bt_l2cap_le_lookup_tx_cid+0x2>
}
   2ac64:	4770      	bx	lr

0002ac66 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2ac66:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac68:	b138      	cbz	r0, 2ac7a <bt_l2cap_le_lookup_rx_cid+0x14>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ac6a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
   2ac6e:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ac70:	f1a0 0008 	sub.w	r0, r0, #8
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2ac74:	d001      	beq.n	2ac7a <bt_l2cap_le_lookup_rx_cid+0x14>
	return node->next;
   2ac76:	6880      	ldr	r0, [r0, #8]
   2ac78:	e7f6      	b.n	2ac68 <bt_l2cap_le_lookup_rx_cid+0x2>
}
   2ac7a:	4770      	bx	lr

0002ac7c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2ac7c:	4770      	bx	lr

0002ac7e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2ac7e:	4603      	mov	r3, r0
	return list->head;
   2ac80:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2ac82:	b128      	cbz	r0, 2ac90 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ac84:	6859      	ldr	r1, [r3, #4]
	return node->next;
   2ac86:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2ac88:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2ac8a:	4288      	cmp	r0, r1
	list->tail = node;
   2ac8c:	bf08      	it	eq
   2ac8e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2ac90:	4770      	bx	lr

0002ac92 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2ac92:	4603      	mov	r3, r0
	size_t bytes = 0;
   2ac94:	2000      	movs	r0, #0

	while (buf) {
   2ac96:	b903      	cbnz	r3, 2ac9a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2ac98:	4770      	bx	lr
		bytes += buf->len;
   2ac9a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2ac9c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2ac9e:	4410      	add	r0, r2
		buf = buf->frags;
   2aca0:	e7f9      	b.n	2ac96 <net_buf_frags_len+0x4>

0002aca2 <att_sent>:
	if (chan->ops->sent) {
   2aca2:	684b      	ldr	r3, [r1, #4]
   2aca4:	695b      	ldr	r3, [r3, #20]
{
   2aca6:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2aca8:	b103      	cbz	r3, 2acac <att_sent+0xa>
		chan->ops->sent(chan);
   2acaa:	4718      	bx	r3
}
   2acac:	4770      	bx	lr

0002acae <attr_read_type_cb>:
{
   2acae:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2acb0:	68d4      	ldr	r4, [r2, #12]
   2acb2:	7823      	ldrb	r3, [r4, #0]
   2acb4:	3102      	adds	r1, #2
   2acb6:	b913      	cbnz	r3, 2acbe <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2acb8:	7021      	strb	r1, [r4, #0]
	return true;
   2acba:	2001      	movs	r0, #1
   2acbc:	e006      	b.n	2accc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2acbe:	428b      	cmp	r3, r1
   2acc0:	d0fb      	beq.n	2acba <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2acc2:	8983      	ldrh	r3, [r0, #12]
   2acc4:	3b02      	subs	r3, #2
   2acc6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2acc8:	2000      	movs	r0, #0
   2acca:	6110      	str	r0, [r2, #16]
}
   2accc:	bd10      	pop	{r4, pc}

0002acce <att_prepare_write_req>:
}
   2acce:	2006      	movs	r0, #6
   2acd0:	4770      	bx	lr

0002acd2 <att_op_get_type>:
	switch (op) {
   2acd2:	281e      	cmp	r0, #30
   2acd4:	d816      	bhi.n	2ad04 <att_op_get_type+0x32>
   2acd6:	b308      	cbz	r0, 2ad1c <att_op_get_type+0x4a>
   2acd8:	1e43      	subs	r3, r0, #1
   2acda:	2b1d      	cmp	r3, #29
   2acdc:	d81e      	bhi.n	2ad1c <att_op_get_type+0x4a>
   2acde:	e8df f003 	tbb	[pc, r3]
   2ace2:	2317      	.short	0x2317
   2ace4:	23172317 	.word	0x23172317
   2ace8:	23172317 	.word	0x23172317
   2acec:	23172317 	.word	0x23172317
   2acf0:	23172317 	.word	0x23172317
   2acf4:	231d1d17 	.word	0x231d1d17
   2acf8:	1d172317 	.word	0x1d172317
   2acfc:	0f1b1d19 	.word	0x0f1b1d19
   2ad00:	2004      	movs	r0, #4
   2ad02:	4770      	bx	lr
   2ad04:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2ad08:	2b52      	cmp	r3, #82	; 0x52
   2ad0a:	d107      	bne.n	2ad1c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2ad0c:	2000      	movs	r0, #0
}
   2ad0e:	4770      	bx	lr
		return ATT_RESPONSE;
   2ad10:	2002      	movs	r0, #2
   2ad12:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2ad14:	2003      	movs	r0, #3
   2ad16:	4770      	bx	lr
		return ATT_INDICATION;
   2ad18:	2005      	movs	r0, #5
   2ad1a:	4770      	bx	lr
		return ATT_COMMAND;
   2ad1c:	f010 0f40 	tst.w	r0, #64	; 0x40
   2ad20:	bf0c      	ite	eq
   2ad22:	2006      	moveq	r0, #6
   2ad24:	2000      	movne	r0, #0
   2ad26:	4770      	bx	lr
		return ATT_REQUEST;
   2ad28:	2001      	movs	r0, #1
   2ad2a:	4770      	bx	lr

0002ad2c <att_notify_mult>:
{
   2ad2c:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2ad2e:	6803      	ldr	r3, [r0, #0]
   2ad30:	898a      	ldrh	r2, [r1, #12]
   2ad32:	6818      	ldr	r0, [r3, #0]
   2ad34:	6889      	ldr	r1, [r1, #8]
   2ad36:	f7e3 fddf 	bl	e8f8 <bt_gatt_mult_notification>
}
   2ad3a:	2000      	movs	r0, #0
   2ad3c:	bd08      	pop	{r3, pc}

0002ad3e <att_notify>:
{
   2ad3e:	b538      	push	{r3, r4, r5, lr}
   2ad40:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2ad42:	f101 0008 	add.w	r0, r1, #8
   2ad46:	460c      	mov	r4, r1
   2ad48:	f001 ff00 	bl	2cb4c <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2ad4c:	682d      	ldr	r5, [r5, #0]
   2ad4e:	89a3      	ldrh	r3, [r4, #12]
   2ad50:	68a2      	ldr	r2, [r4, #8]
   2ad52:	4601      	mov	r1, r0
   2ad54:	6828      	ldr	r0, [r5, #0]
   2ad56:	f001 f89f 	bl	2be98 <bt_gatt_notification>
}
   2ad5a:	2000      	movs	r0, #0
   2ad5c:	bd38      	pop	{r3, r4, r5, pc}

0002ad5e <att_chan_mtu_updated>:
{
   2ad5e:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2ad60:	6806      	ldr	r6, [r0, #0]
	return list->head;
   2ad62:	6a73      	ldr	r3, [r6, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ad64:	b1e3      	cbz	r3, 2ada0 <att_chan_mtu_updated+0x42>
	return node->next;
   2ad66:	681a      	ldr	r2, [r3, #0]
   2ad68:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
   2ad6c:	b10a      	cbz	r2, 2ad72 <att_chan_mtu_updated+0x14>
   2ad6e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2ad72:	2300      	movs	r3, #0
   2ad74:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   2ad76:	42a8      	cmp	r0, r5
   2ad78:	d009      	beq.n	2ad8e <att_chan_mtu_updated+0x30>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2ad7a:	f8b5 408a 	ldrh.w	r4, [r5, #138]	; 0x8a
   2ad7e:	42a1      	cmp	r1, r4
   2ad80:	bf38      	it	cc
   2ad82:	4621      	movcc	r1, r4
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2ad84:	f8b5 407a 	ldrh.w	r4, [r5, #122]	; 0x7a
   2ad88:	42a3      	cmp	r3, r4
   2ad8a:	bf38      	it	cc
   2ad8c:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ad8e:	b142      	cbz	r2, 2ada2 <att_chan_mtu_updated+0x44>
   2ad90:	f8d2 4144 	ldr.w	r4, [r2, #324]	; 0x144
   2ad94:	b10c      	cbz	r4, 2ad9a <att_chan_mtu_updated+0x3c>
   2ad96:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   2ad9a:	4615      	mov	r5, r2
   2ad9c:	4622      	mov	r2, r4
   2ad9e:	e7ea      	b.n	2ad76 <att_chan_mtu_updated+0x18>
   2ada0:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2ada2:	f8b0 408a 	ldrh.w	r4, [r0, #138]	; 0x8a
	    (updated_chan->chan.rx.mtu > max_rx)) {
   2ada6:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2adaa:	428c      	cmp	r4, r1
   2adac:	d801      	bhi.n	2adb2 <att_chan_mtu_updated+0x54>
   2adae:	429a      	cmp	r2, r3
   2adb0:	d909      	bls.n	2adc6 <att_chan_mtu_updated+0x68>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2adb2:	429a      	cmp	r2, r3
   2adb4:	bf38      	it	cc
   2adb6:	461a      	movcc	r2, r3
   2adb8:	42a1      	cmp	r1, r4
   2adba:	6830      	ldr	r0, [r6, #0]
   2adbc:	bf38      	it	cc
   2adbe:	4621      	movcc	r1, r4
}
   2adc0:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2adc2:	f7e3 be41 	b.w	ea48 <bt_gatt_att_max_mtu_changed>
}
   2adc6:	bc70      	pop	{r4, r5, r6}
   2adc8:	4770      	bx	lr

0002adca <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2adca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2adcc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2add0:	2300      	movs	r3, #0
   2add2:	9300      	str	r3, [sp, #0]
   2add4:	461a      	mov	r2, r3
   2add6:	f7e2 fdd9 	bl	d98c <bt_gatt_foreach_attr_type>
				  user_data);
}
   2adda:	b005      	add	sp, #20
   2addc:	f85d fb04 	ldr.w	pc, [sp], #4

0002ade0 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ade0:	68d0      	ldr	r0, [r2, #12]
   2ade2:	7803      	ldrb	r3, [r0, #0]
   2ade4:	3104      	adds	r1, #4
   2ade6:	b913      	cbnz	r3, 2adee <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ade8:	7001      	strb	r1, [r0, #0]
	return true;
   2adea:	2001      	movs	r0, #1
}
   2adec:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2adee:	428b      	cmp	r3, r1
   2adf0:	d0fb      	beq.n	2adea <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2adf2:	6891      	ldr	r1, [r2, #8]
   2adf4:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2adf6:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2adf8:	3b04      	subs	r3, #4
   2adfa:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2adfc:	6110      	str	r0, [r2, #16]
		return false;
   2adfe:	4770      	bx	lr

0002ae00 <chan_req_sent>:
	if (chan->req) {
   2ae00:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2ae04:	b133      	cbz	r3, 2ae14 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ae06:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ae0a:	2300      	movs	r3, #0
   2ae0c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   2ae10:	f7fa b95e 	b.w	250d0 <k_work_reschedule>
}
   2ae14:	4770      	bx	lr

0002ae16 <write_cb>:
{
   2ae16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ae18:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ae1a:	4601      	mov	r1, r0
{
   2ae1c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ae1e:	222a      	movs	r2, #42	; 0x2a
   2ae20:	6820      	ldr	r0, [r4, #0]
   2ae22:	f000 ff1e 	bl	2bc62 <bt_gatt_check_perm>
   2ae26:	4605      	mov	r5, r0
   2ae28:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2ae2a:	bb20      	cbnz	r0, 2ae76 <write_cb+0x60>
	if (!data->req) {
   2ae2c:	7a23      	ldrb	r3, [r4, #8]
   2ae2e:	b1ab      	cbz	r3, 2ae5c <write_cb+0x46>
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2ae30:	2b18      	cmp	r3, #24
   2ae32:	bf14      	ite	ne
   2ae34:	2300      	movne	r3, #0
   2ae36:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2ae38:	9301      	str	r3, [sp, #4]
   2ae3a:	8a63      	ldrh	r3, [r4, #18]
   2ae3c:	9300      	str	r3, [sp, #0]
   2ae3e:	68b7      	ldr	r7, [r6, #8]
   2ae40:	8a23      	ldrh	r3, [r4, #16]
   2ae42:	68e2      	ldr	r2, [r4, #12]
   2ae44:	6820      	ldr	r0, [r4, #0]
   2ae46:	4631      	mov	r1, r6
   2ae48:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2ae4a:	1e03      	subs	r3, r0, #0
   2ae4c:	db08      	blt.n	2ae60 <write_cb+0x4a>
   2ae4e:	8a22      	ldrh	r2, [r4, #16]
   2ae50:	4293      	cmp	r3, r2
   2ae52:	d10e      	bne.n	2ae72 <write_cb+0x5c>
	data->err = 0U;
   2ae54:	2300      	movs	r3, #0
   2ae56:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2ae58:	2501      	movs	r5, #1
   2ae5a:	e007      	b.n	2ae6c <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2ae5c:	2302      	movs	r3, #2
   2ae5e:	e7eb      	b.n	2ae38 <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2ae60:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2ae64:	d305      	bcc.n	2ae72 <write_cb+0x5c>
		return -err;
   2ae66:	425b      	negs	r3, r3
   2ae68:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2ae6a:	7523      	strb	r3, [r4, #20]
}
   2ae6c:	4628      	mov	r0, r5
   2ae6e:	b003      	add	sp, #12
   2ae70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2ae72:	230e      	movs	r3, #14
   2ae74:	e7f9      	b.n	2ae6a <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2ae76:	2500      	movs	r5, #0
   2ae78:	e7f8      	b.n	2ae6c <write_cb+0x56>

0002ae7a <find_info_cb>:
{
   2ae7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2ae7c:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2ae7e:	6816      	ldr	r6, [r2, #0]
{
   2ae80:	4605      	mov	r5, r0
   2ae82:	460f      	mov	r7, r1
   2ae84:	4614      	mov	r4, r2
	if (!data->rsp) {
   2ae86:	b963      	cbnz	r3, 2aea2 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   2ae88:	6850      	ldr	r0, [r2, #4]
   2ae8a:	2101      	movs	r1, #1
   2ae8c:	3008      	adds	r0, #8
   2ae8e:	f001 fe1c 	bl	2caca <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ae92:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2ae94:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ae96:	781b      	ldrb	r3, [r3, #0]
   2ae98:	2b00      	cmp	r3, #0
   2ae9a:	bf0c      	ite	eq
   2ae9c:	2301      	moveq	r3, #1
   2ae9e:	2302      	movne	r3, #2
   2aea0:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2aea2:	68a3      	ldr	r3, [r4, #8]
   2aea4:	781b      	ldrb	r3, [r3, #0]
   2aea6:	2b01      	cmp	r3, #1
   2aea8:	d003      	beq.n	2aeb2 <find_info_cb+0x38>
   2aeaa:	2b02      	cmp	r3, #2
   2aeac:	d019      	beq.n	2aee2 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2aeae:	2000      	movs	r0, #0
   2aeb0:	e016      	b.n	2aee0 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2aeb2:	682b      	ldr	r3, [r5, #0]
   2aeb4:	781b      	ldrb	r3, [r3, #0]
   2aeb6:	2b00      	cmp	r3, #0
   2aeb8:	d1f9      	bne.n	2aeae <find_info_cb+0x34>
   2aeba:	6860      	ldr	r0, [r4, #4]
   2aebc:	2104      	movs	r1, #4
   2aebe:	3008      	adds	r0, #8
   2aec0:	f001 fe03 	bl	2caca <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2aec4:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2aec6:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2aec8:	885b      	ldrh	r3, [r3, #2]
   2aeca:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2aecc:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2aece:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2aed0:	899b      	ldrh	r3, [r3, #12]
   2aed2:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2aed6:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2aed8:	2804      	cmp	r0, #4
   2aeda:	bf94      	ite	ls
   2aedc:	2000      	movls	r0, #0
   2aede:	2001      	movhi	r0, #1
}
   2aee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2aee2:	682b      	ldr	r3, [r5, #0]
   2aee4:	781b      	ldrb	r3, [r3, #0]
   2aee6:	2b02      	cmp	r3, #2
   2aee8:	d1e1      	bne.n	2aeae <find_info_cb+0x34>
   2aeea:	6860      	ldr	r0, [r4, #4]
   2aeec:	2112      	movs	r1, #18
   2aeee:	3008      	adds	r0, #8
   2aef0:	f001 fdeb 	bl	2caca <net_buf_simple_add>
   2aef4:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2aef6:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2aef8:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2aefa:	f823 7b02 	strh.w	r7, [r3], #2
   2aefe:	1c51      	adds	r1, r2, #1
   2af00:	3211      	adds	r2, #17
   2af02:	f851 0b04 	ldr.w	r0, [r1], #4
   2af06:	f843 0b04 	str.w	r0, [r3], #4
   2af0a:	4291      	cmp	r1, r2
   2af0c:	d1f9      	bne.n	2af02 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2af0e:	6863      	ldr	r3, [r4, #4]
   2af10:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2af14:	899b      	ldrh	r3, [r3, #12]
   2af16:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2af18:	2812      	cmp	r0, #18
   2af1a:	e7de      	b.n	2aeda <find_info_cb+0x60>

0002af1c <z_log_msg2_static_create.constprop.0>:
   2af1c:	2300      	movs	r3, #0
   2af1e:	f7fd bdc7 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002af22 <att_chan_read>:
{
   2af22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2af26:	4680      	mov	r8, r0
   2af28:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2af2a:	4610      	mov	r0, r2
{
   2af2c:	4699      	mov	r9, r3
   2af2e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2af30:	f7ff feaf 	bl	2ac92 <net_buf_frags_len>
   2af34:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2af38:	4283      	cmp	r3, r0
{
   2af3a:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2af3c:	d97a      	bls.n	2b034 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2af3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2af42:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2af44:	4630      	mov	r0, r6
   2af46:	f001 fd92 	bl	2ca6e <net_buf_frag_last>
	size_t len, total = 0;
   2af4a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2af4e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2af50:	4630      	mov	r0, r6
   2af52:	f7ff fe9e 	bl	2ac92 <net_buf_frags_len>
   2af56:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2af5a:	f105 0708 	add.w	r7, r5, #8
   2af5e:	1a24      	subs	r4, r4, r0
   2af60:	4638      	mov	r0, r7
   2af62:	f001 fdff 	bl	2cb64 <net_buf_simple_tailroom>
   2af66:	4284      	cmp	r4, r0
   2af68:	d211      	bcs.n	2af8e <att_chan_read+0x6c>
   2af6a:	4630      	mov	r0, r6
   2af6c:	f7ff fe91 	bl	2ac92 <net_buf_frags_len>
   2af70:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2af74:	1a24      	subs	r4, r4, r0
		if (!len) {
   2af76:	bb34      	cbnz	r4, 2afc6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2af78:	79b0      	ldrb	r0, [r6, #6]
   2af7a:	f7f5 fc95 	bl	208a8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2af7e:	2200      	movs	r2, #0
   2af80:	2300      	movs	r3, #0
   2af82:	f001 fd3a 	bl	2c9fa <net_buf_alloc_fixed>
			if (!frag) {
   2af86:	4605      	mov	r5, r0
   2af88:	b930      	cbnz	r0, 2af98 <att_chan_read+0x76>
	return total;
   2af8a:	4657      	mov	r7, sl
   2af8c:	e02c      	b.n	2afe8 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2af8e:	4638      	mov	r0, r7
   2af90:	f001 fde8 	bl	2cb64 <net_buf_simple_tailroom>
   2af94:	4604      	mov	r4, r0
   2af96:	e7ee      	b.n	2af76 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2af98:	4601      	mov	r1, r0
   2af9a:	4630      	mov	r0, r6
   2af9c:	f001 fd78 	bl	2ca90 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2afa0:	4630      	mov	r0, r6
   2afa2:	f7ff fe76 	bl	2ac92 <net_buf_frags_len>
   2afa6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2afaa:	f105 0708 	add.w	r7, r5, #8
   2afae:	1a24      	subs	r4, r4, r0
   2afb0:	4638      	mov	r0, r7
   2afb2:	f001 fdd7 	bl	2cb64 <net_buf_simple_tailroom>
   2afb6:	4284      	cmp	r4, r0
   2afb8:	d21a      	bcs.n	2aff0 <att_chan_read+0xce>
   2afba:	4630      	mov	r0, r6
   2afbc:	f7ff fe69 	bl	2ac92 <net_buf_frags_len>
   2afc0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2afc4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2afc6:	68a9      	ldr	r1, [r5, #8]
   2afc8:	89aa      	ldrh	r2, [r5, #12]
   2afca:	f8db 7004 	ldr.w	r7, [fp, #4]
   2afce:	9803      	ldr	r0, [sp, #12]
   2afd0:	f8cd 9000 	str.w	r9, [sp]
   2afd4:	440a      	add	r2, r1
   2afd6:	b2a3      	uxth	r3, r4
   2afd8:	4659      	mov	r1, fp
   2afda:	47b8      	blx	r7
		if (read < 0) {
   2afdc:	1e07      	subs	r7, r0, #0
   2afde:	da0c      	bge.n	2affa <att_chan_read+0xd8>
				return total;
   2afe0:	f1ba 0f00 	cmp.w	sl, #0
   2afe4:	bf18      	it	ne
   2afe6:	4657      	movne	r7, sl
}
   2afe8:	4638      	mov	r0, r7
   2afea:	b005      	add	sp, #20
   2afec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aff0:	4638      	mov	r0, r7
   2aff2:	f001 fdb7 	bl	2cb64 <net_buf_simple_tailroom>
   2aff6:	4604      	mov	r4, r0
   2aff8:	e7e5      	b.n	2afc6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2affa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2affc:	b993      	cbnz	r3, 2b024 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2affe:	4639      	mov	r1, r7
   2b000:	f105 0008 	add.w	r0, r5, #8
   2b004:	f001 fd61 	bl	2caca <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b008:	4630      	mov	r0, r6
   2b00a:	f7ff fe42 	bl	2ac92 <net_buf_frags_len>
   2b00e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2b012:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b014:	4283      	cmp	r3, r0
		total += read;
   2b016:	44ba      	add	sl, r7
		offset += read;
   2b018:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b01c:	d9b5      	bls.n	2af8a <att_chan_read+0x68>
   2b01e:	42a7      	cmp	r7, r4
   2b020:	d096      	beq.n	2af50 <att_chan_read+0x2e>
   2b022:	e7b2      	b.n	2af8a <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b024:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b028:	4639      	mov	r1, r7
   2b02a:	4628      	mov	r0, r5
   2b02c:	4798      	blx	r3
   2b02e:	2800      	cmp	r0, #0
   2b030:	d1e5      	bne.n	2affe <att_chan_read+0xdc>
   2b032:	e7aa      	b.n	2af8a <att_chan_read+0x68>
		return 0;
   2b034:	2700      	movs	r7, #0
   2b036:	e7d7      	b.n	2afe8 <att_chan_read+0xc6>

0002b038 <chan_req_send>:
{
   2b038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b03a:	688f      	ldr	r7, [r1, #8]
{
   2b03c:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b03e:	4638      	mov	r0, r7
   2b040:	f7ff fe27 	bl	2ac92 <net_buf_frags_len>
   2b044:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2b048:	4283      	cmp	r3, r0
{
   2b04a:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b04c:	d30d      	bcc.n	2b06a <chan_req_send+0x32>
	req->buf = NULL;
   2b04e:	2600      	movs	r6, #0
	chan->req = req;
   2b050:	f8c4 10f4 	str.w	r1, [r4, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2b054:	4632      	mov	r2, r6
	req->buf = NULL;
   2b056:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2b058:	4620      	mov	r0, r4
   2b05a:	4639      	mov	r1, r7
   2b05c:	f7e1 fb78 	bl	c750 <chan_send>
	if (err) {
   2b060:	b110      	cbz	r0, 2b068 <chan_req_send+0x30>
		req->buf = buf;
   2b062:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2b064:	f8c4 60f4 	str.w	r6, [r4, #244]	; 0xf4
}
   2b068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b06a:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b06e:	e7fb      	b.n	2b068 <chan_req_send+0x30>

0002b070 <process_queue>:
{
   2b070:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2b072:	2200      	movs	r2, #0
{
   2b074:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2b076:	2300      	movs	r3, #0
   2b078:	4608      	mov	r0, r1
{
   2b07a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2b07c:	f001 fcc2 	bl	2ca04 <net_buf_get>
	if (buf) {
   2b080:	4605      	mov	r5, r0
   2b082:	b160      	cbz	r0, 2b09e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2b084:	4601      	mov	r1, r0
   2b086:	2200      	movs	r2, #0
   2b088:	4620      	mov	r0, r4
   2b08a:	f7e1 fb61 	bl	c750 <chan_send>
		if (err) {
   2b08e:	4604      	mov	r4, r0
   2b090:	b118      	cbz	r0, 2b09a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2b092:	4629      	mov	r1, r5
   2b094:	4630      	mov	r0, r6
   2b096:	f002 fe1c 	bl	2dcd2 <k_queue_prepend>
}
   2b09a:	4620      	mov	r0, r4
   2b09c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b09e:	f06f 0401 	mvn.w	r4, #1
   2b0a2:	e7fa      	b.n	2b09a <process_queue+0x2a>

0002b0a4 <bt_att_chan_send_rsp>:
{
   2b0a4:	b538      	push	{r3, r4, r5, lr}
   2b0a6:	4604      	mov	r4, r0
   2b0a8:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2b0aa:	f7e1 fb51 	bl	c750 <chan_send>
	if (err) {
   2b0ae:	b130      	cbz	r0, 2b0be <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2b0b0:	4629      	mov	r1, r5
   2b0b2:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   2b0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2b0ba:	f001 bcc7 	b.w	2ca4c <net_buf_put>
}
   2b0be:	bd38      	pop	{r3, r4, r5, pc}

0002b0c0 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b0c0:	b510      	push	{r4, lr}
	return list->head;
   2b0c2:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b0c4:	2200      	movs	r2, #0
   2b0c6:	b153      	cbz	r3, 2b0de <sys_slist_find_and_remove.isra.0+0x1e>
   2b0c8:	428b      	cmp	r3, r1
   2b0ca:	d10e      	bne.n	2b0ea <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2b0cc:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2b0ce:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   2b0d0:	b932      	cbnz	r2, 2b0e0 <sys_slist_find_and_remove.isra.0+0x20>
   2b0d2:	42a1      	cmp	r1, r4
	list->head = node;
   2b0d4:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2b0d6:	d100      	bne.n	2b0da <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2b0d8:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2b0da:	2300      	movs	r3, #0
   2b0dc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b0de:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   2b0e0:	42a1      	cmp	r1, r4
	parent->next = child;
   2b0e2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b0e4:	bf08      	it	eq
   2b0e6:	6042      	streq	r2, [r0, #4]
}
   2b0e8:	e7f7      	b.n	2b0da <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2b0ea:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2b0ec:	681b      	ldr	r3, [r3, #0]
   2b0ee:	e7ea      	b.n	2b0c6 <sys_slist_find_and_remove.isra.0+0x6>

0002b0f0 <att_exec_write_req>:
   2b0f0:	2006      	movs	r0, #6
   2b0f2:	4770      	bx	lr

0002b0f4 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b0f4:	30f0      	adds	r0, #240	; 0xf0
   2b0f6:	f3bf 8f5b 	dmb	ish
   2b0fa:	e850 3f00 	ldrex	r3, [r0]
   2b0fe:	f023 0301 	bic.w	r3, r3, #1
   2b102:	e840 3200 	strex	r2, r3, [r0]
   2b106:	2a00      	cmp	r2, #0
   2b108:	d1f7      	bne.n	2b0fa <chan_rsp_sent+0x6>
   2b10a:	f3bf 8f5b 	dmb	ish
}
   2b10e:	4770      	bx	lr

0002b110 <chan_cfm_sent>:
   2b110:	30f0      	adds	r0, #240	; 0xf0
   2b112:	f3bf 8f5b 	dmb	ish
   2b116:	e850 3f00 	ldrex	r3, [r0]
   2b11a:	f023 0302 	bic.w	r3, r3, #2
   2b11e:	e840 3200 	strex	r2, r3, [r0]
   2b122:	2a00      	cmp	r2, #0
   2b124:	d1f7      	bne.n	2b116 <chan_cfm_sent+0x6>
   2b126:	f3bf 8f5b 	dmb	ish
}
   2b12a:	4770      	bx	lr

0002b12c <read_cb>:
{
   2b12c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2b130:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b134:	4606      	mov	r6, r0
	data->err = 0x00;
   2b136:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2b138:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2b13c:	7317      	strb	r7, [r2, #12]
{
   2b13e:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b140:	4631      	mov	r1, r6
   2b142:	2215      	movs	r2, #21
   2b144:	f000 fd8d 	bl	2bc62 <bt_gatt_check_perm>
   2b148:	4604      	mov	r4, r0
   2b14a:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2b14c:	b9a0      	cbnz	r0, 2b178 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b14e:	e9cd 0000 	strd	r0, r0, [sp]
   2b152:	88ab      	ldrh	r3, [r5, #4]
   2b154:	68aa      	ldr	r2, [r5, #8]
   2b156:	4631      	mov	r1, r6
   2b158:	4640      	mov	r0, r8
   2b15a:	f7ff fee2 	bl	2af22 <att_chan_read>
	if (ret < 0) {
   2b15e:	1e03      	subs	r3, r0, #0
   2b160:	da0c      	bge.n	2b17c <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2b162:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2b166:	bf26      	itte	cs
   2b168:	425b      	negcs	r3, r3
   2b16a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2b16c:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2b16e:	732b      	strb	r3, [r5, #12]
}
   2b170:	4620      	mov	r0, r4
   2b172:	b002      	add	sp, #8
   2b174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2b178:	463c      	mov	r4, r7
   2b17a:	e7f9      	b.n	2b170 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2b17c:	2401      	movs	r4, #1
   2b17e:	e7f7      	b.n	2b170 <read_cb+0x44>

0002b180 <bt_att_sent>:
{
   2b180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2b182:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2b186:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2b18a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b18c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2b190:	b10b      	cbz	r3, 2b196 <bt_att_sent+0x16>
		chan->sent(chan);
   2b192:	4638      	mov	r0, r7
   2b194:	4798      	blx	r3
   2b196:	f3bf 8f5b 	dmb	ish
   2b19a:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   2b19e:	e853 2f00 	ldrex	r2, [r3]
   2b1a2:	f022 0210 	bic.w	r2, r2, #16
   2b1a6:	e843 2100 	strex	r1, r2, [r3]
   2b1aa:	2900      	cmp	r1, #0
   2b1ac:	d1f7      	bne.n	2b19e <bt_att_sent+0x1e>
   2b1ae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2b1b2:	b30c      	cbz	r4, 2b1f8 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b1b4:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2b1b8:	b98b      	cbnz	r3, 2b1de <bt_att_sent+0x5e>
   2b1ba:	6863      	ldr	r3, [r4, #4]
   2b1bc:	b17b      	cbz	r3, 2b1de <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b1be:	1d20      	adds	r0, r4, #4
   2b1c0:	f7ff fd5d 	bl	2ac7e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b1c4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b1c6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b1c8:	4638      	mov	r0, r7
   2b1ca:	f7ff ff35 	bl	2b038 <chan_req_send>
   2b1ce:	2800      	cmp	r0, #0
   2b1d0:	da12      	bge.n	2b1f8 <bt_att_sent+0x78>
	parent->next = child;
   2b1d2:	6863      	ldr	r3, [r4, #4]
   2b1d4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b1d6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b1d8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b1da:	b903      	cbnz	r3, 2b1de <bt_att_sent+0x5e>
	list->tail = node;
   2b1dc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2b1de:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   2b1e2:	4638      	mov	r0, r7
   2b1e4:	f7ff ff44 	bl	2b070 <process_queue>
	if (!err) {
   2b1e8:	b130      	cbz	r0, 2b1f8 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2b1ea:	f104 010c 	add.w	r1, r4, #12
   2b1ee:	4638      	mov	r0, r7
}
   2b1f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2b1f4:	f7ff bf3c 	b.w	2b070 <process_queue>
}
   2b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b1fa <att_req_send_process>:
{
   2b1fa:	b570      	push	{r4, r5, r6, lr}
   2b1fc:	4604      	mov	r4, r0
	node = sys_slist_get(&att->reqs);
   2b1fe:	3004      	adds	r0, #4
   2b200:	f7ff fd3d 	bl	2ac7e <sys_slist_get>
	if (!node) {
   2b204:	4605      	mov	r5, r0
   2b206:	b1b8      	cbz	r0, 2b238 <att_req_send_process+0x3e>
	return list->head;
   2b208:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b20a:	b14b      	cbz	r3, 2b220 <att_req_send_process+0x26>
	return node->next;
   2b20c:	681e      	ldr	r6, [r3, #0]
   2b20e:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2b212:	b10e      	cbz	r6, 2b218 <att_req_send_process+0x1e>
   2b214:	f5a6 76a2 	sub.w	r6, r6, #324	; 0x144
		if (!chan->req) {
   2b218:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   2b21c:	b13b      	cbz	r3, 2b22e <att_req_send_process+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b21e:	b966      	cbnz	r6, 2b23a <att_req_send_process+0x40>
	parent->next = child;
   2b220:	6863      	ldr	r3, [r4, #4]
   2b222:	602b      	str	r3, [r5, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b224:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b226:	6065      	str	r5, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b228:	b933      	cbnz	r3, 2b238 <att_req_send_process+0x3e>
	list->tail = node;
   2b22a:	60a5      	str	r5, [r4, #8]
}
   2b22c:	e004      	b.n	2b238 <att_req_send_process+0x3e>
	return chan_req_send(chan, req);
   2b22e:	4629      	mov	r1, r5
   2b230:	f7ff ff02 	bl	2b038 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b234:	2800      	cmp	r0, #0
   2b236:	dbf2      	blt.n	2b21e <att_req_send_process+0x24>
}
   2b238:	bd70      	pop	{r4, r5, r6, pc}
	return node->next;
   2b23a:	f8d6 3144 	ldr.w	r3, [r6, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b23e:	b10b      	cbz	r3, 2b244 <att_req_send_process+0x4a>
   2b240:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b244:	4630      	mov	r0, r6
   2b246:	461e      	mov	r6, r3
   2b248:	e7e6      	b.n	2b218 <att_req_send_process+0x1e>

0002b24a <bt_att_status>:
{
   2b24a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b24c:	f3bf 8f5b 	dmb	ish
   2b250:	680b      	ldr	r3, [r1, #0]
   2b252:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b256:	07db      	lsls	r3, r3, #31
{
   2b258:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b25a:	d519      	bpl.n	2b290 <bt_att_status+0x46>
	if (!chan->att) {
   2b25c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2b260:	b1b0      	cbz	r0, 2b290 <bt_att_status+0x46>
	if (chan->req) {
   2b262:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   2b266:	b99b      	cbnz	r3, 2b290 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2b268:	3004      	adds	r0, #4
   2b26a:	f7ff fd08 	bl	2ac7e <sys_slist_get>
	if (!node) {
   2b26e:	4604      	mov	r4, r0
   2b270:	b170      	cbz	r0, 2b290 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   2b272:	4601      	mov	r1, r0
   2b274:	f1a5 0008 	sub.w	r0, r5, #8
   2b278:	f7ff fede 	bl	2b038 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b27c:	2800      	cmp	r0, #0
   2b27e:	da07      	bge.n	2b290 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2b280:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   2b284:	685a      	ldr	r2, [r3, #4]
   2b286:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b288:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b28a:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b28c:	b902      	cbnz	r2, 2b290 <bt_att_status+0x46>
	list->tail = node;
   2b28e:	609c      	str	r4, [r3, #8]
}
   2b290:	bd38      	pop	{r3, r4, r5, pc}

0002b292 <att_write_req>:
{
   2b292:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b294:	460c      	mov	r4, r1
   2b296:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b298:	f101 0008 	add.w	r0, r1, #8
   2b29c:	f001 fc56 	bl	2cb4c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2b2a0:	89a2      	ldrh	r2, [r4, #12]
   2b2a2:	9201      	str	r2, [sp, #4]
   2b2a4:	68a2      	ldr	r2, [r4, #8]
   2b2a6:	9200      	str	r2, [sp, #0]
   2b2a8:	4603      	mov	r3, r0
   2b2aa:	2213      	movs	r2, #19
   2b2ac:	2112      	movs	r1, #18
   2b2ae:	4628      	mov	r0, r5
   2b2b0:	f7e1 fc90 	bl	cbd4 <att_write_rsp.constprop.0>
}
   2b2b4:	b003      	add	sp, #12
   2b2b6:	bd30      	pop	{r4, r5, pc}

0002b2b8 <att_write_cmd>:
{
   2b2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2b2ba:	460c      	mov	r4, r1
   2b2bc:	4605      	mov	r5, r0
   2b2be:	f101 0008 	add.w	r0, r1, #8
   2b2c2:	f001 fc43 	bl	2cb4c <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   2b2c6:	89a2      	ldrh	r2, [r4, #12]
   2b2c8:	9201      	str	r2, [sp, #4]
   2b2ca:	68a2      	ldr	r2, [r4, #8]
   2b2cc:	9200      	str	r2, [sp, #0]
   2b2ce:	2200      	movs	r2, #0
   2b2d0:	4603      	mov	r3, r0
   2b2d2:	4611      	mov	r1, r2
   2b2d4:	4628      	mov	r0, r5
   2b2d6:	f7e1 fc7d 	bl	cbd4 <att_write_rsp.constprop.0>
}
   2b2da:	b003      	add	sp, #12
   2b2dc:	bd30      	pop	{r4, r5, pc}

0002b2de <att_read_blob_req>:
{
   2b2de:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2b2e0:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b2e2:	8813      	ldrh	r3, [r2, #0]
   2b2e4:	8852      	ldrh	r2, [r2, #2]
   2b2e6:	9200      	str	r2, [sp, #0]
   2b2e8:	210c      	movs	r1, #12
   2b2ea:	220d      	movs	r2, #13
   2b2ec:	f7e1 fde0 	bl	ceb0 <att_read_rsp>
}
   2b2f0:	b003      	add	sp, #12
   2b2f2:	f85d fb04 	ldr.w	pc, [sp], #4

0002b2f6 <att_read_req>:
{
   2b2f6:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2b2f8:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b2fa:	2200      	movs	r2, #0
   2b2fc:	881b      	ldrh	r3, [r3, #0]
   2b2fe:	9200      	str	r2, [sp, #0]
   2b300:	210a      	movs	r1, #10
   2b302:	220b      	movs	r2, #11
   2b304:	f7e1 fdd4 	bl	ceb0 <att_read_rsp>
}
   2b308:	b003      	add	sp, #12
   2b30a:	f85d fb04 	ldr.w	pc, [sp], #4

0002b30e <bt_att_init>:
	bt_gatt_init();
   2b30e:	f7e2 bab7 	b.w	d880 <bt_gatt_init>

0002b312 <bt_att_get_mtu>:
{
   2b312:	b508      	push	{r3, lr}
	att = att_get(conn);
   2b314:	f7e1 f92c 	bl	c570 <att_get>
	if (!att) {
   2b318:	b1b0      	cbz	r0, 2b348 <bt_att_get_mtu+0x36>
	return list->head;
   2b31a:	6a40      	ldr	r0, [r0, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b31c:	b1a0      	cbz	r0, 2b348 <bt_att_get_mtu+0x36>
	return node->next;
   2b31e:	6803      	ldr	r3, [r0, #0]
   2b320:	f5a0 71a2 	sub.w	r1, r0, #324	; 0x144
   2b324:	b10b      	cbz	r3, 2b32a <bt_att_get_mtu+0x18>
   2b326:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b32a:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2b32c:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2b330:	4290      	cmp	r0, r2
   2b332:	bf38      	it	cc
   2b334:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b336:	b13b      	cbz	r3, 2b348 <bt_att_get_mtu+0x36>
   2b338:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
   2b33c:	b10a      	cbz	r2, 2b342 <bt_att_get_mtu+0x30>
   2b33e:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   2b342:	4619      	mov	r1, r3
   2b344:	4613      	mov	r3, r2
   2b346:	e7f1      	b.n	2b32c <bt_att_get_mtu+0x1a>
}
   2b348:	bd08      	pop	{r3, pc}

0002b34a <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b34a:	898a      	ldrh	r2, [r1, #12]
   2b34c:	6889      	ldr	r1, [r1, #8]
   2b34e:	2300      	movs	r3, #0
   2b350:	f7e1 bf72 	b.w	d238 <att_handle_rsp>

0002b354 <att_handle_find_type_rsp>:
   2b354:	f7ff bff9 	b.w	2b34a <att_handle_find_info_rsp>

0002b358 <att_handle_read_type_rsp>:
   2b358:	f7ff bff7 	b.w	2b34a <att_handle_find_info_rsp>

0002b35c <att_handle_read_rsp>:
   2b35c:	f7ff bff5 	b.w	2b34a <att_handle_find_info_rsp>

0002b360 <att_handle_read_blob_rsp>:
   2b360:	f7ff bff3 	b.w	2b34a <att_handle_find_info_rsp>

0002b364 <att_handle_read_mult_rsp>:
   2b364:	f7ff bff1 	b.w	2b34a <att_handle_find_info_rsp>

0002b368 <att_handle_read_group_rsp>:
   2b368:	f7ff bfef 	b.w	2b34a <att_handle_find_info_rsp>

0002b36c <att_handle_write_rsp>:
   2b36c:	f7ff bfed 	b.w	2b34a <att_handle_find_info_rsp>

0002b370 <att_handle_prepare_write_rsp>:
   2b370:	f7ff bfeb 	b.w	2b34a <att_handle_find_info_rsp>

0002b374 <att_handle_exec_write_rsp>:
   2b374:	f7ff bfe9 	b.w	2b34a <att_handle_find_info_rsp>

0002b378 <att_confirm>:
   2b378:	f7ff bfe7 	b.w	2b34a <att_handle_find_info_rsp>

0002b37c <att_mtu_rsp>:
{
   2b37c:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2b37e:	688e      	ldr	r6, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
   2b380:	8833      	ldrh	r3, [r6, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b382:	2b16      	cmp	r3, #22
{
   2b384:	4604      	mov	r4, r0
   2b386:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b388:	d806      	bhi.n	2b398 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2b38a:	2200      	movs	r2, #0
   2b38c:	2304      	movs	r3, #4
   2b38e:	4611      	mov	r1, r2
}
   2b390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b394:	f7e1 bf50 	b.w	d238 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2b398:	2b41      	cmp	r3, #65	; 0x41
   2b39a:	bf28      	it	cs
   2b39c:	2341      	movcs	r3, #65	; 0x41
   2b39e:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b3a2:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2b3a6:	f7ff fcda 	bl	2ad5e <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b3aa:	89aa      	ldrh	r2, [r5, #12]
   2b3ac:	2300      	movs	r3, #0
   2b3ae:	4631      	mov	r1, r6
   2b3b0:	4620      	mov	r0, r4
   2b3b2:	e7ed      	b.n	2b390 <att_mtu_rsp+0x14>

0002b3b4 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   2b3b4:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   2b3b8:	b570      	push	{r4, r5, r6, lr}
   2b3ba:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2b3bc:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   2b3c0:	2b00      	cmp	r3, #0
   2b3c2:	d037      	beq.n	2b434 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   2b3c4:	b171      	cbz	r1, 2b3e4 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   2b3c6:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   2b3ca:	2b00      	cmp	r3, #0
   2b3cc:	d032      	beq.n	2b434 <bt_att_encrypt_change+0x80>
   2b3ce:	7c1b      	ldrb	r3, [r3, #16]
   2b3d0:	07da      	lsls	r2, r3, #31
   2b3d2:	d52f      	bpl.n	2b434 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   2b3d4:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   2b3d6:	2200      	movs	r2, #0
   2b3d8:	4630      	mov	r0, r6
   2b3da:	4611      	mov	r1, r2
}
   2b3dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   2b3e0:	f7e1 bf2a 	b.w	d238 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   2b3e4:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   2b3e6:	4628      	mov	r0, r5
   2b3e8:	f7e3 fb42 	bl	ea70 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2b3ec:	7a6b      	ldrb	r3, [r5, #9]
   2b3ee:	2b01      	cmp	r3, #1
   2b3f0:	d020      	beq.n	2b434 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   2b3f2:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   2b3f6:	b1ec      	cbz	r4, 2b434 <bt_att_encrypt_change+0x80>
   2b3f8:	7c23      	ldrb	r3, [r4, #16]
   2b3fa:	07db      	lsls	r3, r3, #31
   2b3fc:	d51a      	bpl.n	2b434 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2b3fe:	68e3      	ldr	r3, [r4, #12]
   2b400:	2b00      	cmp	r3, #0
   2b402:	d0e7      	beq.n	2b3d4 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   2b404:	6962      	ldr	r2, [r4, #20]
   2b406:	7c61      	ldrb	r1, [r4, #17]
   2b408:	4630      	mov	r0, r6
   2b40a:	f7e1 fa97 	bl	c93c <bt_att_chan_create_pdu>
	if (!buf) {
   2b40e:	4605      	mov	r5, r0
   2b410:	b140      	cbz	r0, 2b424 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   2b412:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2b416:	68e3      	ldr	r3, [r4, #12]
   2b418:	4798      	blx	r3
   2b41a:	4602      	mov	r2, r0
   2b41c:	b120      	cbz	r0, 2b428 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   2b41e:	4628      	mov	r0, r5
   2b420:	f7f5 fb06 	bl	20a30 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   2b424:	230e      	movs	r3, #14
   2b426:	e7d6      	b.n	2b3d6 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2b428:	4629      	mov	r1, r5
   2b42a:	4630      	mov	r0, r6
   2b42c:	f7e1 f990 	bl	c750 <chan_send>
   2b430:	2800      	cmp	r0, #0
   2b432:	d1f4      	bne.n	2b41e <bt_att_encrypt_change+0x6a>
}
   2b434:	bd70      	pop	{r4, r5, r6, pc}

0002b436 <bt_att_send>:
{
   2b436:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2b43a:	4607      	mov	r7, r0
   2b43c:	460d      	mov	r5, r1
   2b43e:	4616      	mov	r6, r2
   2b440:	4698      	mov	r8, r3
	att = att_get(conn);
   2b442:	f7e1 f895 	bl	c570 <att_get>
	if (!att) {
   2b446:	4604      	mov	r4, r0
   2b448:	b938      	cbnz	r0, 2b45a <bt_att_send+0x24>
		net_buf_unref(buf);
   2b44a:	4628      	mov	r0, r5
   2b44c:	f7f5 faf0 	bl	20a30 <net_buf_unref>
		return -ENOTCONN;
   2b450:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   2b454:	b002      	add	sp, #8
   2b456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2b45a:	b146      	cbz	r6, 2b46e <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   2b45c:	f8cd 8000 	str.w	r8, [sp]
   2b460:	4633      	mov	r3, r6
   2b462:	462a      	mov	r2, r5
   2b464:	2104      	movs	r1, #4
   2b466:	4638      	mov	r0, r7
   2b468:	f7ff fbbb 	bl	2abe2 <bt_l2cap_send_cb>
   2b46c:	e7f2      	b.n	2b454 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   2b46e:	f100 060c 	add.w	r6, r0, #12
   2b472:	4629      	mov	r1, r5
   2b474:	4630      	mov	r0, r6
   2b476:	f001 fae9 	bl	2ca4c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   2b47a:	2200      	movs	r2, #0
   2b47c:	2300      	movs	r3, #0
   2b47e:	4630      	mov	r0, r6
   2b480:	f001 fac0 	bl	2ca04 <net_buf_get>
	if (!buf) {
   2b484:	4605      	mov	r5, r0
   2b486:	b908      	cbnz	r0, 2b48c <bt_att_send+0x56>
	return 0;
   2b488:	2000      	movs	r0, #0
   2b48a:	e7e3      	b.n	2b454 <bt_att_send+0x1e>
	return list->head;
   2b48c:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b48e:	b1a3      	cbz	r3, 2b4ba <bt_att_send+0x84>
	return node->next;
   2b490:	681c      	ldr	r4, [r3, #0]
   2b492:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
   2b496:	b10c      	cbz	r4, 2b49c <bt_att_send+0x66>
   2b498:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   2b49c:	2200      	movs	r2, #0
   2b49e:	4629      	mov	r1, r5
   2b4a0:	f7e1 f956 	bl	c750 <chan_send>
		if (err >= 0) {
   2b4a4:	2800      	cmp	r0, #0
   2b4a6:	daef      	bge.n	2b488 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b4a8:	b13c      	cbz	r4, 2b4ba <bt_att_send+0x84>
   2b4aa:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   2b4ae:	b10b      	cbz	r3, 2b4b4 <bt_att_send+0x7e>
   2b4b0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   2b4b4:	4620      	mov	r0, r4
   2b4b6:	461c      	mov	r4, r3
   2b4b8:	e7f0      	b.n	2b49c <bt_att_send+0x66>
		k_queue_prepend(&att->tx_queue._queue, buf);
   2b4ba:	4629      	mov	r1, r5
   2b4bc:	4630      	mov	r0, r6
   2b4be:	f002 fc08 	bl	2dcd2 <k_queue_prepend>
   2b4c2:	e7e1      	b.n	2b488 <bt_att_send+0x52>

0002b4c4 <bt_att_req_send>:
{
   2b4c4:	b510      	push	{r4, lr}
   2b4c6:	460c      	mov	r4, r1
	att = att_get(conn);
   2b4c8:	f7e1 f852 	bl	c570 <att_get>
	if (!att) {
   2b4cc:	b160      	cbz	r0, 2b4e8 <bt_att_req_send+0x24>
	parent->next = child;
   2b4ce:	2300      	movs	r3, #0
   2b4d0:	6023      	str	r3, [r4, #0]
	return list->tail;
   2b4d2:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   2b4d4:	b92b      	cbnz	r3, 2b4e2 <bt_att_req_send+0x1e>
	list->head = node;
   2b4d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
	att_req_send_process(att);
   2b4da:	f7ff fe8e 	bl	2b1fa <att_req_send_process>
	return 0;
   2b4de:	2000      	movs	r0, #0
}
   2b4e0:	bd10      	pop	{r4, pc}
	parent->next = child;
   2b4e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2b4e4:	6084      	str	r4, [r0, #8]
}
   2b4e6:	e7f8      	b.n	2b4da <bt_att_req_send+0x16>
		return -ENOTCONN;
   2b4e8:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2b4ec:	e7f8      	b.n	2b4e0 <bt_att_req_send+0x1c>

0002b4ee <bt_att_find_req_by_user_data>:

struct bt_att_req *bt_att_find_req_by_user_data(struct bt_conn *conn, const void *user_data)
{
   2b4ee:	b510      	push	{r4, lr}
   2b4f0:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan;
	struct bt_att_req *req;

	att = att_get(conn);
   2b4f2:	f7e1 f83d 	bl	c570 <att_get>
	if (!att) {
   2b4f6:	b198      	cbz	r0, 2b520 <bt_att_find_req_by_user_data+0x32>
	return list->head;
   2b4f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b4fa:	b14b      	cbz	r3, 2b510 <bt_att_find_req_by_user_data+0x22>
		if (chan->req->user_data == user_data) {
   2b4fc:	f853 2c50 	ldr.w	r2, [r3, #-80]
   2b500:	6991      	ldr	r1, [r2, #24]
   2b502:	42a1      	cmp	r1, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   2b504:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (chan->req->user_data == user_data) {
   2b508:	d009      	beq.n	2b51e <bt_att_find_req_by_user_data+0x30>
	return node->next;
   2b50a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
   2b50e:	e7f4      	b.n	2b4fa <bt_att_find_req_by_user_data+0xc>
	return list->head;
   2b510:	6840      	ldr	r0, [r0, #4]
			return chan->req;
		}
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&att->reqs, req, node) {
   2b512:	b128      	cbz	r0, 2b520 <bt_att_find_req_by_user_data+0x32>
		if (req->user_data == user_data) {
   2b514:	6983      	ldr	r3, [r0, #24]
   2b516:	42a3      	cmp	r3, r4
   2b518:	d002      	beq.n	2b520 <bt_att_find_req_by_user_data+0x32>
	return node->next;
   2b51a:	6800      	ldr	r0, [r0, #0]
   2b51c:	e7f9      	b.n	2b512 <bt_att_find_req_by_user_data+0x24>
   2b51e:	4610      	mov	r0, r2
			return req;
		}
	}

	return NULL;
}
   2b520:	bd10      	pop	{r4, pc}

0002b522 <gatt_ccc_changed>:
{
   2b522:	460b      	mov	r3, r1
   2b524:	8909      	ldrh	r1, [r1, #8]
   2b526:	8a5a      	ldrh	r2, [r3, #18]
   2b528:	4291      	cmp	r1, r2
   2b52a:	bf38      	it	cc
   2b52c:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   2b52e:	8a9a      	ldrh	r2, [r3, #20]
   2b530:	428a      	cmp	r2, r1
   2b532:	d003      	beq.n	2b53c <gatt_ccc_changed+0x1a>
		ccc->value = value;
   2b534:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   2b536:	699b      	ldr	r3, [r3, #24]
   2b538:	b103      	cbz	r3, 2b53c <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   2b53a:	4718      	bx	r3
}
   2b53c:	4770      	bx	lr

0002b53e <gatt_indicate_rsp>:
{
   2b53e:	b510      	push	{r4, lr}
   2b540:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b542:	68a3      	ldr	r3, [r4, #8]
{
   2b544:	460a      	mov	r2, r1
	if (params->func) {
   2b546:	b10b      	cbz	r3, 2b54c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2b548:	4621      	mov	r1, r4
   2b54a:	4798      	blx	r3
	params->_ref--;
   2b54c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b54e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2b550:	3b01      	subs	r3, #1
   2b552:	b2db      	uxtb	r3, r3
   2b554:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b556:	b122      	cbz	r2, 2b562 <gatt_indicate_rsp+0x24>
   2b558:	b91b      	cbnz	r3, 2b562 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2b55a:	4620      	mov	r0, r4
}
   2b55c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2b560:	4710      	bx	r2
}
   2b562:	bd10      	pop	{r4, pc}

0002b564 <match_uuid>:
	data->attr = attr;
   2b564:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b566:	8091      	strh	r1, [r2, #4]
}
   2b568:	2000      	movs	r0, #0
   2b56a:	4770      	bx	lr

0002b56c <gatt_write_rsp>:
{
   2b56c:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2b56e:	6813      	ldr	r3, [r2, #0]
   2b570:	4718      	bx	r3

0002b572 <atomic_get>:
   2b572:	f3bf 8f5b 	dmb	ish
   2b576:	6800      	ldr	r0, [r0, #0]
   2b578:	f3bf 8f5b 	dmb	ish
}
   2b57c:	4770      	bx	lr

0002b57e <gen_hash_m>:
{
   2b57e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b580:	6807      	ldr	r7, [r0, #0]
   2b582:	783d      	ldrb	r5, [r7, #0]
{
   2b584:	b089      	sub	sp, #36	; 0x24
   2b586:	4606      	mov	r6, r0
   2b588:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b58a:	b10d      	cbz	r5, 2b590 <gen_hash_m+0x12>
	switch (u16->val) {
   2b58c:	2501      	movs	r5, #1
   2b58e:	e014      	b.n	2b5ba <gen_hash_m+0x3c>
   2b590:	887b      	ldrh	r3, [r7, #2]
   2b592:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b596:	d004      	beq.n	2b5a2 <gen_hash_m+0x24>
   2b598:	d812      	bhi.n	2b5c0 <gen_hash_m+0x42>
   2b59a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b59e:	2b03      	cmp	r3, #3
   2b5a0:	d8f4      	bhi.n	2b58c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b5a2:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b5a6:	2202      	movs	r2, #2
   2b5a8:	f10d 010a 	add.w	r1, sp, #10
   2b5ac:	4620      	mov	r0, r4
   2b5ae:	f7fe fb5d 	bl	29c6c <tc_cmac_update>
   2b5b2:	b9e0      	cbnz	r0, 2b5ee <gen_hash_m+0x70>
			state->err = -EINVAL;
   2b5b4:	f06f 0315 	mvn.w	r3, #21
   2b5b8:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2b5ba:	4628      	mov	r0, r5
   2b5bc:	b009      	add	sp, #36	; 0x24
   2b5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b5c0:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b5c4:	33ff      	adds	r3, #255	; 0xff
   2b5c6:	b29b      	uxth	r3, r3
   2b5c8:	2b04      	cmp	r3, #4
   2b5ca:	d8df      	bhi.n	2b58c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b5cc:	f8ad 100a 	strh.w	r1, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b5d0:	2202      	movs	r2, #2
   2b5d2:	f10d 010a 	add.w	r1, sp, #10
   2b5d6:	4620      	mov	r0, r4
   2b5d8:	f7fe fb48 	bl	29c6c <tc_cmac_update>
   2b5dc:	2800      	cmp	r0, #0
   2b5de:	d0e9      	beq.n	2b5b4 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2b5e0:	887b      	ldrh	r3, [r7, #2]
   2b5e2:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b5e6:	2202      	movs	r2, #2
   2b5e8:	f10d 010a 	add.w	r1, sp, #10
   2b5ec:	e016      	b.n	2b61c <gen_hash_m+0x9e>
		value = sys_cpu_to_le16(u16->val);
   2b5ee:	887b      	ldrh	r3, [r7, #2]
   2b5f0:	f8ad 300a 	strh.w	r3, [sp, #10]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b5f4:	2202      	movs	r2, #2
   2b5f6:	f10d 010a 	add.w	r1, sp, #10
   2b5fa:	4620      	mov	r0, r4
   2b5fc:	f7fe fb36 	bl	29c6c <tc_cmac_update>
   2b600:	2800      	cmp	r0, #0
   2b602:	d0d7      	beq.n	2b5b4 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b604:	2000      	movs	r0, #0
   2b606:	aa03      	add	r2, sp, #12
   2b608:	6877      	ldr	r7, [r6, #4]
   2b60a:	9000      	str	r0, [sp, #0]
   2b60c:	2313      	movs	r3, #19
   2b60e:	4631      	mov	r1, r6
   2b610:	47b8      	blx	r7
		if (len < 0) {
   2b612:	1e02      	subs	r2, r0, #0
   2b614:	da01      	bge.n	2b61a <gen_hash_m+0x9c>
			state->err = len;
   2b616:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b618:	e7cf      	b.n	2b5ba <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2b61a:	a903      	add	r1, sp, #12
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b61c:	4620      	mov	r0, r4
   2b61e:	f7fe fb25 	bl	29c6c <tc_cmac_update>
   2b622:	2800      	cmp	r0, #0
   2b624:	d1b2      	bne.n	2b58c <gen_hash_m+0xe>
   2b626:	e7c5      	b.n	2b5b4 <gen_hash_m+0x36>

0002b628 <bt_addr_le_cmp>:
   2b628:	2207      	movs	r2, #7
   2b62a:	f002 bf8c 	b.w	2e546 <memcmp>

0002b62e <find_ccc_cfg>:
{
   2b62e:	b573      	push	{r0, r1, r4, r5, r6, lr}
						    &cfg->peer)) {
   2b630:	1c4a      	adds	r2, r1, #1
{
   2b632:	460c      	mov	r4, r1
		if (conn) {
   2b634:	4605      	mov	r5, r0
   2b636:	b948      	cbnz	r0, 2b64c <find_ccc_cfg+0x1e>
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b638:	9000      	str	r0, [sp, #0]
   2b63a:	4669      	mov	r1, sp
   2b63c:	f8cd 0003 	str.w	r0, [sp, #3]
   2b640:	4610      	mov	r0, r2
   2b642:	f7ff fff1 	bl	2b628 <bt_addr_le_cmp>
   2b646:	b930      	cbnz	r0, 2b656 <find_ccc_cfg+0x28>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b648:	4626      	mov	r6, r4
   2b64a:	e00e      	b.n	2b66a <find_ccc_cfg+0x3c>
   2b64c:	7809      	ldrb	r1, [r1, #0]
   2b64e:	f7ff f9a4 	bl	2a99a <bt_conn_is_peer_addr_le>
   2b652:	2800      	cmp	r0, #0
   2b654:	d1f8      	bne.n	2b648 <find_ccc_cfg+0x1a>
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   2b656:	f104 060a 	add.w	r6, r4, #10
						    &cfg->peer)) {
   2b65a:	f104 020b 	add.w	r2, r4, #11
		if (conn) {
   2b65e:	b13d      	cbz	r5, 2b670 <find_ccc_cfg+0x42>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b660:	7aa1      	ldrb	r1, [r4, #10]
   2b662:	4628      	mov	r0, r5
   2b664:	f7ff f999 	bl	2a99a <bt_conn_is_peer_addr_le>
   2b668:	b158      	cbz	r0, 2b682 <find_ccc_cfg+0x54>
}
   2b66a:	4630      	mov	r0, r6
   2b66c:	b002      	add	sp, #8
   2b66e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b670:	4669      	mov	r1, sp
   2b672:	4610      	mov	r0, r2
   2b674:	9500      	str	r5, [sp, #0]
   2b676:	f8cd 5003 	str.w	r5, [sp, #3]
   2b67a:	f7ff ffd5 	bl	2b628 <bt_addr_le_cmp>
   2b67e:	2800      	cmp	r0, #0
   2b680:	d0f3      	beq.n	2b66a <find_ccc_cfg+0x3c>
	return NULL;
   2b682:	2600      	movs	r6, #0
   2b684:	e7f1      	b.n	2b66a <find_ccc_cfg+0x3c>

0002b686 <gatt_req_send>:
{
   2b686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2b68a:	4606      	mov	r6, r0
   2b68c:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b68e:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2b692:	2100      	movs	r1, #0
{
   2b694:	f89d a020 	ldrb.w	sl, [sp, #32]
   2b698:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   2b69c:	4617      	mov	r7, r2
   2b69e:	461d      	mov	r5, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2b6a0:	f7e1 fd96 	bl	d1d0 <bt_att_req_alloc>
	if (!req) {
   2b6a4:	4604      	mov	r4, r0
   2b6a6:	b920      	cbnz	r0, 2b6b2 <gatt_req_send+0x2c>
		return -ENOMEM;
   2b6a8:	f06f 050b 	mvn.w	r5, #11
}
   2b6ac:	4628      	mov	r0, r5
   2b6ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->att_op = op;
   2b6b2:	f880 a011 	strb.w	sl, [r0, #17]
	req->len = len;
   2b6b6:	f8c0 8014 	str.w	r8, [r0, #20]
	req->encode = encode;
   2b6ba:	60c5      	str	r5, [r0, #12]
	req->func = func;
   2b6bc:	f8c0 9004 	str.w	r9, [r0, #4]
	req->user_data = params;
   2b6c0:	6187      	str	r7, [r0, #24]
	buf = bt_att_create_pdu(conn, op, len);
   2b6c2:	4642      	mov	r2, r8
   2b6c4:	4651      	mov	r1, sl
   2b6c6:	4630      	mov	r0, r6
   2b6c8:	f7e1 fae8 	bl	cc9c <bt_att_create_pdu>
	if (!buf) {
   2b6cc:	b918      	cbnz	r0, 2b6d6 <gatt_req_send+0x50>
		bt_att_req_free(req);
   2b6ce:	4620      	mov	r0, r4
   2b6d0:	f7e1 fda0 	bl	d214 <bt_att_req_free>
   2b6d4:	e7e8      	b.n	2b6a8 <gatt_req_send+0x22>
	req->buf = buf;
   2b6d6:	60a0      	str	r0, [r4, #8]
	err = encode(buf, len, params);
   2b6d8:	463a      	mov	r2, r7
   2b6da:	4641      	mov	r1, r8
   2b6dc:	47a8      	blx	r5
	if (err) {
   2b6de:	4605      	mov	r5, r0
   2b6e0:	b118      	cbz	r0, 2b6ea <gatt_req_send+0x64>
		bt_att_req_free(req);
   2b6e2:	4620      	mov	r0, r4
   2b6e4:	f7e1 fd96 	bl	d214 <bt_att_req_free>
   2b6e8:	e7e0      	b.n	2b6ac <gatt_req_send+0x26>
	err = bt_att_req_send(conn, req);
   2b6ea:	4621      	mov	r1, r4
   2b6ec:	4630      	mov	r0, r6
   2b6ee:	f7ff fee9 	bl	2b4c4 <bt_att_req_send>
	if (err) {
   2b6f2:	4605      	mov	r5, r0
   2b6f4:	2800      	cmp	r0, #0
   2b6f6:	d0d9      	beq.n	2b6ac <gatt_req_send+0x26>
   2b6f8:	e7f3      	b.n	2b6e2 <gatt_req_send+0x5c>

0002b6fa <read_included_uuid_encode>:
{
   2b6fa:	b510      	push	{r4, lr}
	return net_buf_simple_add(&buf->b, len);
   2b6fc:	2102      	movs	r1, #2
   2b6fe:	3008      	adds	r0, #8
   2b700:	4614      	mov	r4, r2
   2b702:	f001 f9e2 	bl	2caca <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2b706:	8963      	ldrh	r3, [r4, #10]
   2b708:	8003      	strh	r3, [r0, #0]
}
   2b70a:	2000      	movs	r0, #0
   2b70c:	bd10      	pop	{r4, pc}

0002b70e <gatt_find_info_encode>:
{
   2b70e:	b510      	push	{r4, lr}
   2b710:	2104      	movs	r1, #4
   2b712:	3008      	adds	r0, #8
   2b714:	4614      	mov	r4, r2
   2b716:	f001 f9d8 	bl	2caca <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b71a:	8923      	ldrh	r3, [r4, #8]
   2b71c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b71e:	89e3      	ldrh	r3, [r4, #14]
   2b720:	8043      	strh	r3, [r0, #2]
}
   2b722:	2000      	movs	r0, #0
   2b724:	bd10      	pop	{r4, pc}

0002b726 <gatt_cancel_encode>:
{
   2b726:	b508      	push	{r3, lr}
   2b728:	2101      	movs	r1, #1
   2b72a:	3008      	adds	r0, #8
   2b72c:	f001 f9cd 	bl	2caca <net_buf_simple_add>
   2b730:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2b732:	2000      	movs	r0, #0
   2b734:	7018      	strb	r0, [r3, #0]
}
   2b736:	bd08      	pop	{r3, pc}

0002b738 <gatt_exec_encode>:
{
   2b738:	b508      	push	{r3, lr}
   2b73a:	2101      	movs	r1, #1
   2b73c:	3008      	adds	r0, #8
   2b73e:	f001 f9c4 	bl	2caca <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2b742:	2301      	movs	r3, #1
   2b744:	7003      	strb	r3, [r0, #0]
}
   2b746:	2000      	movs	r0, #0
   2b748:	bd08      	pop	{r3, pc}

0002b74a <gatt_read_group_encode>:
{
   2b74a:	b538      	push	{r3, r4, r5, lr}
   2b74c:	f100 0408 	add.w	r4, r0, #8
   2b750:	2104      	movs	r1, #4
   2b752:	4620      	mov	r0, r4
   2b754:	4615      	mov	r5, r2
   2b756:	f001 f9b8 	bl	2caca <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b75a:	892b      	ldrh	r3, [r5, #8]
   2b75c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b75e:	89eb      	ldrh	r3, [r5, #14]
   2b760:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2b762:	7c2b      	ldrb	r3, [r5, #16]
   2b764:	b933      	cbnz	r3, 2b774 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2b766:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2b76a:	4620      	mov	r0, r4
   2b76c:	f001 f9c4 	bl	2caf8 <net_buf_simple_add_le16>
}
   2b770:	2000      	movs	r0, #0
   2b772:	bd38      	pop	{r3, r4, r5, pc}
   2b774:	f642 0101 	movw	r1, #10241	; 0x2801
   2b778:	e7f7      	b.n	2b76a <gatt_read_group_encode+0x20>

0002b77a <gatt_read_type_encode>:
{
   2b77a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b77c:	f100 0408 	add.w	r4, r0, #8
   2b780:	2104      	movs	r1, #4
   2b782:	4620      	mov	r0, r4
   2b784:	4615      	mov	r5, r2
   2b786:	f001 f9a0 	bl	2caca <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b78a:	892b      	ldrh	r3, [r5, #8]
   2b78c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b78e:	89eb      	ldrh	r3, [r5, #14]
   2b790:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2b792:	7c2b      	ldrb	r3, [r5, #16]
   2b794:	2b02      	cmp	r3, #2
   2b796:	d004      	beq.n	2b7a2 <gatt_read_type_encode+0x28>
   2b798:	2b03      	cmp	r3, #3
   2b79a:	d009      	beq.n	2b7b0 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2b79c:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2b79e:	8859      	ldrh	r1, [r3, #2]
   2b7a0:	e001      	b.n	2b7a6 <gatt_read_type_encode+0x2c>
   2b7a2:	f642 0102 	movw	r1, #10242	; 0x2802
   2b7a6:	4620      	mov	r0, r4
   2b7a8:	f001 f9a6 	bl	2caf8 <net_buf_simple_add_le16>
}
   2b7ac:	2000      	movs	r0, #0
   2b7ae:	bd38      	pop	{r3, r4, r5, pc}
   2b7b0:	f642 0103 	movw	r1, #10243	; 0x2803
   2b7b4:	e7f7      	b.n	2b7a6 <gatt_read_type_encode+0x2c>

0002b7b6 <gatt_write_encode>:
{
   2b7b6:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b7b8:	2102      	movs	r1, #2
   2b7ba:	b085      	sub	sp, #20
   2b7bc:	4605      	mov	r5, r0
   2b7be:	3008      	adds	r0, #8
   2b7c0:	4614      	mov	r4, r2
   2b7c2:	f001 f982 	bl	2caca <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b7c6:	88a3      	ldrh	r3, [r4, #4]
   2b7c8:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2b7ca:	2300      	movs	r3, #0
   2b7cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b7d0:	2200      	movs	r2, #0
   2b7d2:	2300      	movs	r3, #0
   2b7d4:	e9cd 2300 	strd	r2, r3, [sp]
   2b7d8:	89a1      	ldrh	r1, [r4, #12]
   2b7da:	68a2      	ldr	r2, [r4, #8]
   2b7dc:	4628      	mov	r0, r5
   2b7de:	f7f5 f959 	bl	20a94 <net_buf_append_bytes>
	if (write != params->length) {
   2b7e2:	89a3      	ldrh	r3, [r4, #12]
		return -ENOMEM;
   2b7e4:	4283      	cmp	r3, r0
}
   2b7e6:	bf14      	ite	ne
   2b7e8:	f06f 000b 	mvnne.w	r0, #11
   2b7ec:	2000      	moveq	r0, #0
   2b7ee:	b005      	add	sp, #20
   2b7f0:	bd30      	pop	{r4, r5, pc}

0002b7f2 <gatt_prepare_write_encode>:
{
   2b7f2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b7f4:	4606      	mov	r6, r0
   2b7f6:	460c      	mov	r4, r1
   2b7f8:	3008      	adds	r0, #8
   2b7fa:	2104      	movs	r1, #4
   2b7fc:	4615      	mov	r5, r2
   2b7fe:	f001 f964 	bl	2caca <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b802:	88ab      	ldrh	r3, [r5, #4]
   2b804:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2b806:	88eb      	ldrh	r3, [r5, #6]
   2b808:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2b80a:	2300      	movs	r3, #0
   2b80c:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b810:	3c04      	subs	r4, #4
   2b812:	2300      	movs	r3, #0
   2b814:	2200      	movs	r2, #0
   2b816:	e9cd 2300 	strd	r2, r3, [sp]
   2b81a:	4621      	mov	r1, r4
   2b81c:	68aa      	ldr	r2, [r5, #8]
   2b81e:	4630      	mov	r0, r6
   2b820:	f7f5 f938 	bl	20a94 <net_buf_append_bytes>
		return -ENOMEM;
   2b824:	4284      	cmp	r4, r0
}
   2b826:	bf14      	ite	ne
   2b828:	f06f 000b 	mvnne.w	r0, #11
   2b82c:	2000      	moveq	r0, #0
   2b82e:	b004      	add	sp, #16
   2b830:	bd70      	pop	{r4, r5, r6, pc}

0002b832 <bt_addr_le_copy>:
   2b832:	680b      	ldr	r3, [r1, #0]
   2b834:	6003      	str	r3, [r0, #0]
   2b836:	888b      	ldrh	r3, [r1, #4]
   2b838:	8083      	strh	r3, [r0, #4]
   2b83a:	798b      	ldrb	r3, [r1, #6]
   2b83c:	7183      	strb	r3, [r0, #6]
}
   2b83e:	4770      	bx	lr

0002b840 <gatt_sub_free>:
{
   2b840:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   2b842:	2300      	movs	r3, #0
   2b844:	4669      	mov	r1, sp
   2b846:	3001      	adds	r0, #1
   2b848:	9300      	str	r3, [sp, #0]
   2b84a:	f8cd 3003 	str.w	r3, [sp, #3]
   2b84e:	f7ff fff0 	bl	2b832 <bt_addr_le_copy>
}
   2b852:	b003      	add	sp, #12
   2b854:	f85d fb04 	ldr.w	pc, [sp], #4

0002b858 <gatt_sub_remove>:
{
   2b858:	b570      	push	{r4, r5, r6, lr}
   2b85a:	460c      	mov	r4, r1
	if (params) {
   2b85c:	4619      	mov	r1, r3
   2b85e:	b16b      	cbz	r3, 2b87c <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2b860:	f103 0614 	add.w	r6, r3, #20
	return list->tail;
   2b864:	68e5      	ldr	r5, [r4, #12]
	return node->next;
   2b866:	695b      	ldr	r3, [r3, #20]
Z_GENLIST_REMOVE(slist, snode)
   2b868:	b97a      	cbnz	r2, 2b88a <gatt_sub_remove+0x32>
   2b86a:	42ae      	cmp	r6, r5
	list->head = node;
   2b86c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2b86e:	d100      	bne.n	2b872 <gatt_sub_remove+0x1a>
	list->tail = node;
   2b870:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2b872:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2b874:	680d      	ldr	r5, [r1, #0]
   2b876:	614b      	str	r3, [r1, #20]
   2b878:	461a      	mov	r2, r3
   2b87a:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2b87c:	68a3      	ldr	r3, [r4, #8]
   2b87e:	b94b      	cbnz	r3, 2b894 <gatt_sub_remove+0x3c>
		gatt_sub_free(sub);
   2b880:	4620      	mov	r0, r4
}
   2b882:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		gatt_sub_free(sub);
   2b886:	f7ff bfdb 	b.w	2b840 <gatt_sub_free>
Z_GENLIST_REMOVE(slist, snode)
   2b88a:	42ae      	cmp	r6, r5
	parent->next = child;
   2b88c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2b88e:	bf08      	it	eq
   2b890:	60e2      	streq	r2, [r4, #12]
}
   2b892:	e7ee      	b.n	2b872 <gatt_sub_remove+0x1a>
}
   2b894:	bd70      	pop	{r4, r5, r6, pc}

0002b896 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2b896:	2300      	movs	r3, #0
   2b898:	6003      	str	r3, [r0, #0]
   2b89a:	6043      	str	r3, [r0, #4]
   2b89c:	6083      	str	r3, [r0, #8]
}
   2b89e:	4770      	bx	lr

0002b8a0 <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2b8a0:	b538      	push	{r3, r4, r5, lr}
   2b8a2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2b8a6:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2b8a8:	460c      	mov	r4, r1
   2b8aa:	4611      	mov	r1, r2
	if (offset > value_len) {
   2b8ac:	d30a      	bcc.n	2b8c4 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2b8ae:	1aad      	subs	r5, r5, r2
   2b8b0:	42a5      	cmp	r5, r4
   2b8b2:	bfa8      	it	ge
   2b8b4:	4625      	movge	r5, r4
   2b8b6:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b8b8:	462a      	mov	r2, r5
   2b8ba:	4419      	add	r1, r3
   2b8bc:	f002 fe53 	bl	2e566 <memcpy>
}
   2b8c0:	4628      	mov	r0, r5
   2b8c2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b8c4:	f06f 0506 	mvn.w	r5, #6
   2b8c8:	e7fa      	b.n	2b8c0 <bt_gatt_attr_read.constprop.0+0x20>

0002b8ca <bt_gatt_attr_read_ccc>:
{
   2b8ca:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2b8cc:	68c9      	ldr	r1, [r1, #12]
{
   2b8ce:	b085      	sub	sp, #20
   2b8d0:	4614      	mov	r4, r2
   2b8d2:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2b8d4:	f7ff feab 	bl	2b62e <find_ccc_cfg>
	if (cfg) {
   2b8d8:	b100      	cbz	r0, 2b8dc <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2b8da:	8900      	ldrh	r0, [r0, #8]
   2b8dc:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2b8e0:	2302      	movs	r3, #2
   2b8e2:	9300      	str	r3, [sp, #0]
   2b8e4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2b8e8:	f10d 030e 	add.w	r3, sp, #14
   2b8ec:	4629      	mov	r1, r5
   2b8ee:	4620      	mov	r0, r4
   2b8f0:	f7ff ffd6 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2b8f4:	b005      	add	sp, #20
   2b8f6:	bd30      	pop	{r4, r5, pc}

0002b8f8 <bt_gatt_attr_read_service>:
{
   2b8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b8fa:	460c      	mov	r4, r1
   2b8fc:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2b8fe:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2b900:	781c      	ldrb	r4, [r3, #0]
{
   2b902:	4610      	mov	r0, r2
   2b904:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2b908:	b13c      	cbz	r4, 2b91a <bt_gatt_attr_read_service+0x22>
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b90a:	2410      	movs	r4, #16
   2b90c:	3301      	adds	r3, #1
   2b90e:	9406      	str	r4, [sp, #24]
}
   2b910:	b004      	add	sp, #16
   2b912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b916:	f7ff bfc3 	b.w	2b8a0 <bt_gatt_attr_read.constprop.0>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2b91a:	885b      	ldrh	r3, [r3, #2]
   2b91c:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b920:	2302      	movs	r3, #2
   2b922:	9300      	str	r3, [sp, #0]
   2b924:	f10d 030e 	add.w	r3, sp, #14
   2b928:	f7ff ffba 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2b92c:	b004      	add	sp, #16
   2b92e:	bd10      	pop	{r4, pc}

0002b930 <cf_read>:
{
   2b930:	b530      	push	{r4, r5, lr}
   2b932:	b085      	sub	sp, #20
   2b934:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2b936:	2300      	movs	r3, #0
{
   2b938:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2b93a:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2b93e:	f7e1 fd95 	bl	d46c <find_cf_cfg>
	if (cfg) {
   2b942:	b110      	cbz	r0, 2b94a <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2b944:	7a03      	ldrb	r3, [r0, #8]
   2b946:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2b94a:	2301      	movs	r3, #1
   2b94c:	9300      	str	r3, [sp, #0]
   2b94e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2b952:	ab03      	add	r3, sp, #12
   2b954:	4629      	mov	r1, r5
   2b956:	4620      	mov	r0, r4
   2b958:	f7ff ffa2 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2b95c:	b005      	add	sp, #20
   2b95e:	bd30      	pop	{r4, r5, pc}

0002b960 <read_name>:
{
   2b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b964:	4614      	mov	r4, r2
   2b966:	461d      	mov	r5, r3
   2b968:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2b96c:	f7de f9fc 	bl	9d68 <bt_get_name>
   2b970:	4606      	mov	r6, r0
				 strlen(name));
   2b972:	f7d5 fb8e 	bl	1092 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2b976:	b280      	uxth	r0, r0
   2b978:	9006      	str	r0, [sp, #24]
   2b97a:	4633      	mov	r3, r6
   2b97c:	463a      	mov	r2, r7
   2b97e:	4629      	mov	r1, r5
   2b980:	4620      	mov	r0, r4
}
   2b982:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2b986:	f7ff bf8b 	b.w	2b8a0 <bt_gatt_attr_read.constprop.0>

0002b98a <read_appearance>:
{
   2b98a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b98c:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2b98e:	2300      	movs	r3, #0
   2b990:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2b994:	2302      	movs	r3, #2
   2b996:	9300      	str	r3, [sp, #0]
{
   2b998:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2b99a:	f10d 030e 	add.w	r3, sp, #14
   2b99e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2b9a2:	f7ff ff7d 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2b9a6:	b005      	add	sp, #20
   2b9a8:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9ac <read_ppcp>:
{
   2b9ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b9ae:	4619      	mov	r1, r3
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2b9b0:	2318      	movs	r3, #24
   2b9b2:	f8ad 3008 	strh.w	r3, [sp, #8]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   2b9b6:	2328      	movs	r3, #40	; 0x28
   2b9b8:	f8ad 300a 	strh.w	r3, [sp, #10]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_LATENCY);
   2b9bc:	2300      	movs	r3, #0
   2b9be:	f8ad 300c 	strh.w	r3, [sp, #12]
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2b9c2:	232a      	movs	r3, #42	; 0x2a
   2b9c4:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2b9c8:	2308      	movs	r3, #8
   2b9ca:	9300      	str	r3, [sp, #0]
{
   2b9cc:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   2b9ce:	446b      	add	r3, sp
   2b9d0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2b9d4:	f7ff ff64 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2b9d8:	b005      	add	sp, #20
   2b9da:	f85d fb04 	ldr.w	pc, [sp], #4

0002b9de <z_log_msg2_static_create.constprop.0>:
   2b9de:	2300      	movs	r3, #0
   2b9e0:	f7fd b866 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002b9e4 <sc_clear>:
{
   2b9e4:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b9e6:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
   2b9ea:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b9ec:	4629      	mov	r1, r5
   2b9ee:	7a00      	ldrb	r0, [r0, #8]
   2b9f0:	f7fe fc58 	bl	2a2a4 <bt_addr_le_is_bonded>
   2b9f4:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2b9f6:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b9f8:	f7e1 fd66 	bl	d4c8 <find_sc_cfg>
		if (cfg) {
   2b9fc:	b118      	cbz	r0, 2ba06 <sc_clear+0x22>
}
   2b9fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2ba02:	f7ff bf48 	b.w	2b896 <clear_sc_cfg>
}
   2ba06:	bd38      	pop	{r3, r4, r5, pc}

0002ba08 <clear_cf_cfg>:
{
   2ba08:	b513      	push	{r0, r1, r4, lr}
   2ba0a:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2ba0c:	2400      	movs	r4, #0
   2ba0e:	4669      	mov	r1, sp
   2ba10:	3001      	adds	r0, #1
   2ba12:	9400      	str	r4, [sp, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2ba14:	320c      	adds	r2, #12
   2ba16:	f8cd 4003 	str.w	r4, [sp, #3]
   2ba1a:	f7ff ff0a 	bl	2b832 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2ba1e:	f802 4c04 	strb.w	r4, [r2, #-4]
   2ba22:	f3bf 8f5b 	dmb	ish
   2ba26:	e852 3f00 	ldrex	r3, [r2]
   2ba2a:	e842 4100 	strex	r1, r4, [r2]
   2ba2e:	2900      	cmp	r1, #0
   2ba30:	d1f9      	bne.n	2ba26 <clear_cf_cfg+0x1e>
   2ba32:	f3bf 8f5b 	dmb	ish
}
   2ba36:	b002      	add	sp, #8
   2ba38:	bd10      	pop	{r4, pc}

0002ba3a <gatt_find_type_encode>:
{
   2ba3a:	b538      	push	{r3, r4, r5, lr}
   2ba3c:	f100 0508 	add.w	r5, r0, #8
   2ba40:	2106      	movs	r1, #6
   2ba42:	4628      	mov	r0, r5
   2ba44:	4614      	mov	r4, r2
   2ba46:	f001 f840 	bl	2caca <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2ba4a:	8923      	ldrh	r3, [r4, #8]
   2ba4c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2ba4e:	89e3      	ldrh	r3, [r4, #14]
   2ba50:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2ba52:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   2ba54:	6821      	ldr	r1, [r4, #0]
		uuid_val = BT_UUID_GATT_SECONDARY_VAL;
   2ba56:	2b00      	cmp	r3, #0
   2ba58:	f642 0301 	movw	r3, #10241	; 0x2801
   2ba5c:	bf08      	it	eq
   2ba5e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
	req->type = sys_cpu_to_le16(uuid_val);
   2ba62:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2ba64:	780b      	ldrb	r3, [r1, #0]
   2ba66:	b11b      	cbz	r3, 2ba70 <gatt_find_type_encode+0x36>
   2ba68:	2b02      	cmp	r3, #2
   2ba6a:	d006      	beq.n	2ba7a <gatt_find_type_encode+0x40>
}
   2ba6c:	2000      	movs	r0, #0
   2ba6e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2ba70:	8849      	ldrh	r1, [r1, #2]
   2ba72:	4628      	mov	r0, r5
   2ba74:	f001 f840 	bl	2caf8 <net_buf_simple_add_le16>
}
   2ba78:	e7f8      	b.n	2ba6c <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2ba7a:	2210      	movs	r2, #16
   2ba7c:	3101      	adds	r1, #1
   2ba7e:	4628      	mov	r0, r5
   2ba80:	f001 f829 	bl	2cad6 <net_buf_simple_add_mem>
   2ba84:	e7f2      	b.n	2ba6c <gatt_find_type_encode+0x32>

0002ba86 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2ba86:	2a02      	cmp	r2, #2
{
   2ba88:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2ba8a:	d108      	bne.n	2ba9e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2ba8c:	2300      	movs	r3, #0
   2ba8e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2ba92:	461a      	mov	r2, r3
   2ba94:	7a00      	ldrb	r0, [r0, #8]
   2ba96:	f7e1 fddd 	bl	d654 <sc_save>
}
   2ba9a:	2002      	movs	r0, #2
   2ba9c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2ba9e:	f7ff ffa1 	bl	2b9e4 <sc_clear>
   2baa2:	e7fa      	b.n	2ba9a <sc_ccc_cfg_write+0x14>

0002baa4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2baa4:	2301      	movs	r3, #1
   2baa6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2baa8:	f3bf 8f5b 	dmb	ish
   2baac:	e850 2f00 	ldrex	r2, [r0]
   2bab0:	431a      	orrs	r2, r3
   2bab2:	e840 2100 	strex	r1, r2, [r0]
   2bab6:	2900      	cmp	r1, #0
   2bab8:	d1f8      	bne.n	2baac <atomic_set_bit+0x8>
   2baba:	f3bf 8f5b 	dmb	ish
}
   2babe:	4770      	bx	lr

0002bac0 <sc_restore_rsp>:
{
   2bac0:	b538      	push	{r3, r4, r5, lr}
   2bac2:	4605      	mov	r5, r0
   2bac4:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2bac6:	f7e1 fcd1 	bl	d46c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2baca:	b130      	cbz	r0, 2bada <sc_restore_rsp+0x1a>
   2bacc:	7a03      	ldrb	r3, [r0, #8]
   2bace:	07db      	lsls	r3, r3, #31
   2bad0:	d503      	bpl.n	2bada <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2bad2:	2100      	movs	r1, #0
   2bad4:	300c      	adds	r0, #12
   2bad6:	f7ff ffe5 	bl	2baa4 <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2bada:	b934      	cbnz	r4, 2baea <sc_restore_rsp+0x2a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2badc:	7a28      	ldrb	r0, [r5, #8]
   2bade:	f105 0188 	add.w	r1, r5, #136	; 0x88
   2bae2:	f7e1 fcf1 	bl	d4c8 <find_sc_cfg>
		if (sc_cfg) {
   2bae6:	b100      	cbz	r0, 2baea <sc_restore_rsp+0x2a>
   2bae8:	6084      	str	r4, [r0, #8]
}
   2baea:	bd38      	pop	{r3, r4, r5, pc}

0002baec <gatt_write_ccc_buf>:
{
   2baec:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2baee:	f100 0508 	add.w	r5, r0, #8
   2baf2:	2102      	movs	r1, #2
   2baf4:	4628      	mov	r0, r5
   2baf6:	4614      	mov	r4, r2
   2baf8:	f000 ffe7 	bl	2caca <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2bafc:	8963      	ldrh	r3, [r4, #10]
   2bafe:	8003      	strh	r3, [r0, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2bb00:	89a1      	ldrh	r1, [r4, #12]
   2bb02:	4628      	mov	r0, r5
   2bb04:	f000 fff8 	bl	2caf8 <net_buf_simple_add_le16>
	atomic_set_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING);
   2bb08:	f104 0010 	add.w	r0, r4, #16
   2bb0c:	2102      	movs	r1, #2
   2bb0e:	f7ff ffc9 	bl	2baa4 <atomic_set_bit>
}
   2bb12:	2000      	movs	r0, #0
   2bb14:	bd38      	pop	{r3, r4, r5, pc}

0002bb16 <gatt_write_ccc_rsp>:
{
   2bb16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bb1a:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bb1c:	f3bf 8f5b 	dmb	ish
   2bb20:	4606      	mov	r6, r0
   2bb22:	460d      	mov	r5, r1
   2bb24:	f104 0310 	add.w	r3, r4, #16
   2bb28:	e853 2f00 	ldrex	r2, [r3]
   2bb2c:	f022 0204 	bic.w	r2, r2, #4
   2bb30:	e843 2100 	strex	r1, r2, [r3]
   2bb34:	2900      	cmp	r1, #0
   2bb36:	d1f7      	bne.n	2bb28 <gatt_write_ccc_rsp+0x12>
   2bb38:	f3bf 8f5b 	dmb	ish
	if (err) {
   2bb3c:	b1dd      	cbz	r5, 2bb76 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2bb3e:	f7e1 fce3 	bl	d508 <gatt_sub_find>
		if (!sub) {
   2bb42:	4601      	mov	r1, r0
   2bb44:	b300      	cbz	r0, 2bb88 <gatt_write_ccc_rsp+0x72>
	return list->head;
   2bb46:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bb48:	b143      	cbz	r3, 2bb5c <gatt_write_ccc_rsp+0x46>
	return node->next;
   2bb4a:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2bb4c:	f104 0014 	add.w	r0, r4, #20
   2bb50:	4283      	cmp	r3, r0
   2bb52:	d10b      	bne.n	2bb6c <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2bb54:	4623      	mov	r3, r4
   2bb56:	4630      	mov	r0, r6
   2bb58:	f7ff fe7e 	bl	2b858 <gatt_sub_remove>
	if (params->write) {
   2bb5c:	6863      	ldr	r3, [r4, #4]
   2bb5e:	b19b      	cbz	r3, 2bb88 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2bb60:	4629      	mov	r1, r5
   2bb62:	4630      	mov	r0, r6
   2bb64:	2200      	movs	r2, #0
}
   2bb66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   2bb6a:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bb6c:	2a00      	cmp	r2, #0
   2bb6e:	d0f5      	beq.n	2bb5c <gatt_write_ccc_rsp+0x46>
	return node->next;
   2bb70:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bb72:	6812      	ldr	r2, [r2, #0]
   2bb74:	e7ec      	b.n	2bb50 <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   2bb76:	89a3      	ldrh	r3, [r4, #12]
   2bb78:	2b00      	cmp	r3, #0
   2bb7a:	d1ef      	bne.n	2bb5c <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   2bb7c:	6827      	ldr	r7, [r4, #0]
   2bb7e:	462b      	mov	r3, r5
   2bb80:	462a      	mov	r2, r5
   2bb82:	4621      	mov	r1, r4
   2bb84:	47b8      	blx	r7
   2bb86:	e7e9      	b.n	2bb5c <gatt_write_ccc_rsp+0x46>
}
   2bb88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bb8c <bt_gatt_attr_read>:
{
   2bb8c:	b538      	push	{r3, r4, r5, lr}
   2bb8e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2bb92:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2bb96:	428d      	cmp	r5, r1
{
   2bb98:	4610      	mov	r0, r2
	if (offset > value_len) {
   2bb9a:	d30b      	bcc.n	2bbb4 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2bb9c:	1a6d      	subs	r5, r5, r1
   2bb9e:	429d      	cmp	r5, r3
   2bba0:	bfa8      	it	ge
   2bba2:	461d      	movge	r5, r3
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bba4:	9b05      	ldr	r3, [sp, #20]
   2bba6:	b2ad      	uxth	r5, r5
   2bba8:	462a      	mov	r2, r5
   2bbaa:	4419      	add	r1, r3
   2bbac:	f002 fcdb 	bl	2e566 <memcpy>
}
   2bbb0:	4628      	mov	r0, r5
   2bbb2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2bbb4:	f06f 0506 	mvn.w	r5, #6
   2bbb8:	e7fa      	b.n	2bbb0 <bt_gatt_attr_read+0x24>

0002bbba <bt_gatt_attr_value_handle>:
{
   2bbba:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bbbc:	4604      	mov	r4, r0
   2bbbe:	b910      	cbnz	r0, 2bbc6 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2bbc0:	2000      	movs	r0, #0
}
   2bbc2:	b002      	add	sp, #8
   2bbc4:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bbc6:	2300      	movs	r3, #0
   2bbc8:	f88d 3004 	strb.w	r3, [sp, #4]
   2bbcc:	6800      	ldr	r0, [r0, #0]
   2bbce:	f642 0303 	movw	r3, #10243	; 0x2803
   2bbd2:	a901      	add	r1, sp, #4
   2bbd4:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bbd8:	f7fe f9d8 	bl	29f8c <bt_uuid_cmp>
   2bbdc:	2800      	cmp	r0, #0
   2bbde:	d1ef      	bne.n	2bbc0 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2bbe0:	68e3      	ldr	r3, [r4, #12]
   2bbe2:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bbe4:	2800      	cmp	r0, #0
   2bbe6:	d1ec      	bne.n	2bbc2 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bbe8:	4620      	mov	r0, r4
   2bbea:	f7e1 fe9f 	bl	d92c <bt_gatt_attr_get_handle>
   2bbee:	3001      	adds	r0, #1
   2bbf0:	b280      	uxth	r0, r0
	return handle;
   2bbf2:	e7e6      	b.n	2bbc2 <bt_gatt_attr_value_handle+0x8>

0002bbf4 <bt_gatt_attr_read_chrc>:
{
   2bbf4:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bbf6:	68cc      	ldr	r4, [r1, #12]
{
   2bbf8:	b088      	sub	sp, #32
   2bbfa:	4608      	mov	r0, r1
   2bbfc:	461e      	mov	r6, r3
	pdu.properties = chrc->properties;
   2bbfe:	79a3      	ldrb	r3, [r4, #6]
   2bc00:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2bc04:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bc06:	f7ff ffd8 	bl	2bbba <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bc0a:	6824      	ldr	r4, [r4, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bc0c:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bc10:	7823      	ldrb	r3, [r4, #0]
   2bc12:	b96b      	cbnz	r3, 2bc30 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bc14:	8863      	ldrh	r3, [r4, #2]
   2bc16:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2bc1a:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bc1c:	9300      	str	r3, [sp, #0]
   2bc1e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2bc22:	ab03      	add	r3, sp, #12
   2bc24:	4631      	mov	r1, r6
   2bc26:	4628      	mov	r0, r5
   2bc28:	f7ff fe3a 	bl	2b8a0 <bt_gatt_attr_read.constprop.0>
}
   2bc2c:	b008      	add	sp, #32
   2bc2e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bc30:	1c63      	adds	r3, r4, #1
   2bc32:	f10d 020f 	add.w	r2, sp, #15
   2bc36:	3411      	adds	r4, #17
   2bc38:	f853 1b04 	ldr.w	r1, [r3], #4
   2bc3c:	f842 1b04 	str.w	r1, [r2], #4
   2bc40:	42a3      	cmp	r3, r4
   2bc42:	d1f9      	bne.n	2bc38 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2bc44:	2313      	movs	r3, #19
   2bc46:	e7e9      	b.n	2bc1c <bt_gatt_attr_read_chrc+0x28>

0002bc48 <bt_gatt_foreach_attr>:
{
   2bc48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2bc4a:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bc4e:	2300      	movs	r3, #0
   2bc50:	9300      	str	r3, [sp, #0]
   2bc52:	461a      	mov	r2, r3
   2bc54:	f7e1 fe9a 	bl	d98c <bt_gatt_foreach_attr_type>
}
   2bc58:	b005      	add	sp, #20
   2bc5a:	f85d fb04 	ldr.w	pc, [sp], #4

0002bc5e <db_hash_process>:
	db_hash_gen(true);
   2bc5e:	f7e1 beef 	b.w	da40 <db_hash_gen.constprop.0>

0002bc62 <bt_gatt_check_perm>:
{
   2bc62:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   2bc64:	07d4      	lsls	r4, r2, #31
{
   2bc66:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bc68:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2bc6a:	d504      	bpl.n	2bc76 <bt_gatt_check_perm+0x14>
   2bc6c:	f010 0f15 	tst.w	r0, #21
   2bc70:	d01e      	beq.n	2bcb0 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bc72:	684b      	ldr	r3, [r1, #4]
   2bc74:	b1e3      	cbz	r3, 2bcb0 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bc76:	0793      	lsls	r3, r2, #30
   2bc78:	d504      	bpl.n	2bc84 <bt_gatt_check_perm+0x22>
   2bc7a:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   2bc7e:	d019      	beq.n	2bcb4 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bc80:	688b      	ldr	r3, [r1, #8]
   2bc82:	b1bb      	cbz	r3, 2bcb4 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   2bc84:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bc88:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bc8c:	d103      	bne.n	2bc96 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   2bc8e:	f014 000c 	ands.w	r0, r4, #12
   2bc92:	d107      	bne.n	2bca4 <bt_gatt_check_perm+0x42>
}
   2bc94:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bc96:	4628      	mov	r0, r5
   2bc98:	f7fe fe7d 	bl	2a996 <bt_conn_get_security>
   2bc9c:	2802      	cmp	r0, #2
   2bc9e:	d8f6      	bhi.n	2bc8e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   2bca0:	2005      	movs	r0, #5
   2bca2:	e7f7      	b.n	2bc94 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2bca4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2bca6:	2b00      	cmp	r3, #0
   2bca8:	bf14      	ite	ne
   2bcaa:	2000      	movne	r0, #0
   2bcac:	200f      	moveq	r0, #15
   2bcae:	e7f1      	b.n	2bc94 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2bcb0:	2002      	movs	r0, #2
   2bcb2:	e7ef      	b.n	2bc94 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2bcb4:	2003      	movs	r0, #3
   2bcb6:	e7ed      	b.n	2bc94 <bt_gatt_check_perm+0x32>

0002bcb8 <gatt_discover_next>:
{
   2bcb8:	b570      	push	{r4, r5, r6, lr}
   2bcba:	4605      	mov	r5, r0
   2bcbc:	4614      	mov	r4, r2
	if (!last_handle)
   2bcbe:	b929      	cbnz	r1, 2bccc <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   2bcc0:	4621      	mov	r1, r4
   2bcc2:	4628      	mov	r0, r5
   2bcc4:	f7e2 f99e 	bl	e004 <bt_gatt_discover>
   2bcc8:	b928      	cbnz	r0, 2bcd6 <gatt_discover_next+0x1e>
}
   2bcca:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2bccc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bcd0:	4291      	cmp	r1, r2
   2bcd2:	d107      	bne.n	2bce4 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   2bcd4:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2bcd6:	6863      	ldr	r3, [r4, #4]
   2bcd8:	4622      	mov	r2, r4
   2bcda:	4628      	mov	r0, r5
   2bcdc:	2100      	movs	r1, #0
}
   2bcde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2bce2:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2bce4:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2bce6:	1c4b      	adds	r3, r1, #1
   2bce8:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2bcea:	429a      	cmp	r2, r3
		params->start_handle++;
   2bcec:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2bcee:	d2e7      	bcs.n	2bcc0 <gatt_discover_next+0x8>
   2bcf0:	e7f1      	b.n	2bcd6 <gatt_discover_next+0x1e>

0002bcf2 <gatt_find_type_rsp>:
{
   2bcf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bcf6:	b088      	sub	sp, #32
   2bcf8:	4607      	mov	r7, r0
   2bcfa:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2bcfe:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2bd00:	b911      	cbnz	r1, 2bd08 <gatt_find_type_rsp+0x16>
   2bd02:	f013 0803 	ands.w	r8, r3, #3
   2bd06:	d008      	beq.n	2bd1a <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   2bd08:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2bd0c:	464a      	mov	r2, r9
   2bd0e:	2100      	movs	r1, #0
   2bd10:	4638      	mov	r0, r7
}
   2bd12:	b008      	add	sp, #32
   2bd14:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	params->func(conn, NULL, params);
   2bd18:	4718      	bx	r3
	for (uint8_t i = 0U; i < count; i++) {
   2bd1a:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2bd1e:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2bd22:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2bd24:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2bd28:	42ac      	cmp	r4, r5
   2bd2a:	d107      	bne.n	2bd3c <gatt_find_type_rsp+0x4a>
	gatt_discover_next(conn, end_handle, params);
   2bd2c:	464a      	mov	r2, r9
   2bd2e:	4641      	mov	r1, r8
   2bd30:	4638      	mov	r0, r7
}
   2bd32:	b008      	add	sp, #32
   2bd34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gatt_discover_next(conn, end_handle, params);
   2bd38:	f7ff bfbe 	b.w	2bcb8 <gatt_discover_next>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2bd3c:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2bd3e:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2bd42:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2bd46:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2bd48:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2bd4c:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2bd50:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2bd52:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2bd54:	bf0c      	ite	eq
   2bd56:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   2bd5a:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2bd5c:	ab01      	add	r3, sp, #4
   2bd5e:	f8ad 1002 	strh.w	r1, [sp, #2]
   2bd62:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   2bd64:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2bd68:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2bd6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2bd70:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2bd74:	f8cd d00c 	str.w	sp, [sp, #12]
   2bd78:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2bd7c:	464a      	mov	r2, r9
   2bd7e:	a903      	add	r1, sp, #12
   2bd80:	4638      	mov	r0, r7
   2bd82:	4798      	blx	r3
   2bd84:	3404      	adds	r4, #4
   2bd86:	2800      	cmp	r0, #0
   2bd88:	d1ce      	bne.n	2bd28 <gatt_find_type_rsp+0x36>
}
   2bd8a:	b008      	add	sp, #32
   2bd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bd90 <bt_gatt_cancel>:
{
   2bd90:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2bd92:	4604      	mov	r4, r0
   2bd94:	460d      	mov	r5, r1
	k_sched_lock();
   2bd96:	f7f9 f9f9 	bl	2518c <k_sched_lock>
	req = bt_att_find_req_by_user_data(conn, params);
   2bd9a:	4629      	mov	r1, r5
   2bd9c:	4620      	mov	r0, r4
   2bd9e:	f7ff fba6 	bl	2b4ee <bt_att_find_req_by_user_data>
	if (req) {
   2bda2:	4601      	mov	r1, r0
   2bda4:	b920      	cbnz	r0, 2bdb0 <bt_gatt_cancel+0x20>
}
   2bda6:	b002      	add	sp, #8
   2bda8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_sched_unlock();
   2bdac:	f7f9 bbbc 	b.w	25528 <k_sched_unlock>
		func = req->func;
   2bdb0:	6846      	ldr	r6, [r0, #4]
		bt_att_req_cancel(conn, req);
   2bdb2:	4620      	mov	r0, r4
   2bdb4:	f7e1 fb2c 	bl	d410 <bt_att_req_cancel>
	k_sched_unlock();
   2bdb8:	f7f9 fbb6 	bl	25528 <k_sched_unlock>
	if (func) {
   2bdbc:	b12e      	cbz	r6, 2bdca <bt_gatt_cancel+0x3a>
		func(conn, BT_ATT_ERR_UNLIKELY, NULL, 0, params);
   2bdbe:	2300      	movs	r3, #0
   2bdc0:	9500      	str	r5, [sp, #0]
   2bdc2:	461a      	mov	r2, r3
   2bdc4:	210e      	movs	r1, #14
   2bdc6:	4620      	mov	r0, r4
   2bdc8:	47b0      	blx	r6
}
   2bdca:	b002      	add	sp, #8
   2bdcc:	bd70      	pop	{r4, r5, r6, pc}

0002bdce <bt_gatt_unsubscribe>:
{
   2bdce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   2bdd2:	7b43      	ldrb	r3, [r0, #13]
   2bdd4:	2b07      	cmp	r3, #7
{
   2bdd6:	4680      	mov	r8, r0
   2bdd8:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   2bdda:	d155      	bne.n	2be88 <bt_gatt_unsubscribe+0xba>
	sub = gatt_sub_find(conn);
   2bddc:	f7e1 fb94 	bl	d508 <gatt_sub_find>
	if (!sub) {
   2bde0:	4606      	mov	r6, r0
   2bde2:	2800      	cmp	r0, #0
   2bde4:	d053      	beq.n	2be8e <bt_gatt_unsubscribe+0xc0>
	return list->head;
   2bde6:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bde8:	b104      	cbz	r4, 2bdec <bt_gatt_unsubscribe+0x1e>
   2bdea:	3c14      	subs	r4, #20
			has_subscription = true;
   2bdec:	2300      	movs	r3, #0
   2bdee:	461f      	mov	r7, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2bdf0:	bb5c      	cbnz	r4, 2be4a <bt_gatt_unsubscribe+0x7c>
	if (!found) {
   2bdf2:	2b00      	cmp	r3, #0
   2bdf4:	d04b      	beq.n	2be8e <bt_gatt_unsubscribe+0xc0>
	if (!has_subscription) {
   2bdf6:	2f00      	cmp	r7, #0
   2bdf8:	d035      	beq.n	2be66 <bt_gatt_unsubscribe+0x98>
   2bdfa:	68b3      	ldr	r3, [r6, #8]
	sys_slist_find_and_remove(&sub->list, &params->node);
   2bdfc:	f105 0214 	add.w	r2, r5, #20
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2be00:	b15b      	cbz	r3, 2be1a <bt_gatt_unsubscribe+0x4c>
   2be02:	429a      	cmp	r2, r3
   2be04:	d13d      	bne.n	2be82 <bt_gatt_unsubscribe+0xb4>
	return node->next;
   2be06:	696b      	ldr	r3, [r5, #20]
	return list->tail;
   2be08:	68f1      	ldr	r1, [r6, #12]
Z_GENLIST_REMOVE(slist, snode)
   2be0a:	2c00      	cmp	r4, #0
   2be0c:	d134      	bne.n	2be78 <bt_gatt_unsubscribe+0xaa>
   2be0e:	428a      	cmp	r2, r1
	list->head = node;
   2be10:	60b3      	str	r3, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   2be12:	d100      	bne.n	2be16 <bt_gatt_unsubscribe+0x48>
	list->tail = node;
   2be14:	60f3      	str	r3, [r6, #12]
	parent->next = child;
   2be16:	2300      	movs	r3, #0
   2be18:	616b      	str	r3, [r5, #20]
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2be1a:	f105 0010 	add.w	r0, r5, #16
   2be1e:	f7ff fba8 	bl	2b572 <atomic_get>
	if (atomic_test_bit(params->flags, BT_GATT_SUBSCRIBE_FLAG_WRITE_PENDING)) {
   2be22:	0743      	lsls	r3, r0, #29
   2be24:	d503      	bpl.n	2be2e <bt_gatt_unsubscribe+0x60>
		bt_gatt_cancel(conn, params);
   2be26:	4629      	mov	r1, r5
   2be28:	4640      	mov	r0, r8
   2be2a:	f7ff ffb1 	bl	2bd90 <bt_gatt_cancel>
	if (gatt_sub_is_empty(sub)) {
   2be2e:	68b3      	ldr	r3, [r6, #8]
   2be30:	b913      	cbnz	r3, 2be38 <bt_gatt_unsubscribe+0x6a>
		gatt_sub_free(sub);
   2be32:	4630      	mov	r0, r6
   2be34:	f7ff fd04 	bl	2b840 <gatt_sub_free>
	if (has_subscription) {
   2be38:	b367      	cbz	r7, 2be94 <bt_gatt_unsubscribe+0xc6>
		params->notify(conn, params, NULL, 0);
   2be3a:	2300      	movs	r3, #0
   2be3c:	682c      	ldr	r4, [r5, #0]
   2be3e:	461a      	mov	r2, r3
   2be40:	4629      	mov	r1, r5
   2be42:	4640      	mov	r0, r8
   2be44:	47a0      	blx	r4
	return 0;
   2be46:	2000      	movs	r0, #0
   2be48:	e014      	b.n	2be74 <bt_gatt_unsubscribe+0xa6>
		if (params == tmp) {
   2be4a:	42ac      	cmp	r4, r5
   2be4c:	d009      	beq.n	2be62 <bt_gatt_unsubscribe+0x94>
		if (tmp->value_handle == params->value_handle) {
   2be4e:	8921      	ldrh	r1, [r4, #8]
   2be50:	892a      	ldrh	r2, [r5, #8]
			has_subscription = true;
   2be52:	4291      	cmp	r1, r2
   2be54:	bf08      	it	eq
   2be56:	2701      	moveq	r7, #1
	return node->next;
   2be58:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   2be5a:	2c00      	cmp	r4, #0
   2be5c:	d0c9      	beq.n	2bdf2 <bt_gatt_unsubscribe+0x24>
   2be5e:	3c14      	subs	r4, #20
   2be60:	e7c6      	b.n	2bdf0 <bt_gatt_unsubscribe+0x22>
			found = true;
   2be62:	2301      	movs	r3, #1
   2be64:	e7f8      	b.n	2be58 <bt_gatt_unsubscribe+0x8a>
		params->value = 0x0000;
   2be66:	81af      	strh	r7, [r5, #12]
		err = gatt_write_ccc(conn, params);
   2be68:	4629      	mov	r1, r5
   2be6a:	4640      	mov	r0, r8
   2be6c:	f7e1 fb7a 	bl	d564 <gatt_write_ccc>
		if (err) {
   2be70:	2800      	cmp	r0, #0
   2be72:	d0c2      	beq.n	2bdfa <bt_gatt_unsubscribe+0x2c>
}
   2be74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
Z_GENLIST_REMOVE(slist, snode)
   2be78:	428a      	cmp	r2, r1
	parent->next = child;
   2be7a:	6023      	str	r3, [r4, #0]
	list->tail = node;
   2be7c:	bf08      	it	eq
   2be7e:	60f4      	streq	r4, [r6, #12]
}
   2be80:	e7c9      	b.n	2be16 <bt_gatt_unsubscribe+0x48>
	return node->next;
   2be82:	461c      	mov	r4, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2be84:	681b      	ldr	r3, [r3, #0]
   2be86:	e7bb      	b.n	2be00 <bt_gatt_unsubscribe+0x32>
		return -ENOTCONN;
   2be88:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   2be8c:	e7f2      	b.n	2be74 <bt_gatt_unsubscribe+0xa6>
		return -EINVAL;
   2be8e:	f06f 0015 	mvn.w	r0, #21
   2be92:	e7ef      	b.n	2be74 <bt_gatt_unsubscribe+0xa6>
	return 0;
   2be94:	4638      	mov	r0, r7
   2be96:	e7ed      	b.n	2be74 <bt_gatt_unsubscribe+0xa6>

0002be98 <bt_gatt_notification>:
{
   2be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2be9c:	4606      	mov	r6, r0
   2be9e:	460f      	mov	r7, r1
   2bea0:	4690      	mov	r8, r2
   2bea2:	4699      	mov	r9, r3
	sub = gatt_sub_find(conn);
   2bea4:	f7e1 fb30 	bl	d508 <gatt_sub_find>
	if (!sub) {
   2bea8:	b300      	cbz	r0, 2beec <bt_gatt_notification+0x54>
	return list->head;
   2beaa:	6884      	ldr	r4, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2beac:	b1f4      	cbz	r4, 2beec <bt_gatt_notification+0x54>
	return node->next;
   2beae:	f854 a914 	ldr.w	sl, [r4], #-20
   2beb2:	f1ba 0f00 	cmp.w	sl, #0
   2beb6:	d001      	beq.n	2bebc <bt_gatt_notification+0x24>
   2beb8:	f1aa 0a14 	sub.w	sl, sl, #20
		if (handle != params->value_handle) {
   2bebc:	8923      	ldrh	r3, [r4, #8]
   2bebe:	42bb      	cmp	r3, r7
   2bec0:	d10a      	bne.n	2bed8 <bt_gatt_notification+0x40>
		if (params->notify(conn, params, data, length) ==
   2bec2:	6825      	ldr	r5, [r4, #0]
   2bec4:	464b      	mov	r3, r9
   2bec6:	4642      	mov	r2, r8
   2bec8:	4621      	mov	r1, r4
   2beca:	4630      	mov	r0, r6
   2becc:	47a8      	blx	r5
   2bece:	b918      	cbnz	r0, 2bed8 <bt_gatt_notification+0x40>
			bt_gatt_unsubscribe(conn, params);
   2bed0:	4621      	mov	r1, r4
   2bed2:	4630      	mov	r0, r6
   2bed4:	f7ff ff7b 	bl	2bdce <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2bed8:	f1ba 0f00 	cmp.w	sl, #0
   2bedc:	d006      	beq.n	2beec <bt_gatt_notification+0x54>
   2bede:	f8da 5014 	ldr.w	r5, [sl, #20]
   2bee2:	b105      	cbz	r5, 2bee6 <bt_gatt_notification+0x4e>
   2bee4:	3d14      	subs	r5, #20
{
   2bee6:	4654      	mov	r4, sl
   2bee8:	46aa      	mov	sl, r5
   2beea:	e7e7      	b.n	2bebc <bt_gatt_notification+0x24>
}
   2beec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bef0 <bt_gatt_change_aware>:
{
   2bef0:	b510      	push	{r4, lr}
   2bef2:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2bef4:	f7e1 faba 	bl	d46c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2bef8:	b910      	cbnz	r0, 2bf00 <bt_gatt_change_aware+0x10>
		return true;
   2befa:	2401      	movs	r4, #1
}
   2befc:	4620      	mov	r0, r4
   2befe:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2bf00:	7a03      	ldrb	r3, [r0, #8]
   2bf02:	07d9      	lsls	r1, r3, #31
   2bf04:	d5f9      	bpl.n	2befa <bt_gatt_change_aware+0xa>
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2bf06:	f100 030c 	add.w	r3, r0, #12
   2bf0a:	4618      	mov	r0, r3
   2bf0c:	f7ff fb31 	bl	2b572 <atomic_get>
   2bf10:	f010 0101 	ands.w	r1, r0, #1
   2bf14:	d1f1      	bne.n	2befa <bt_gatt_change_aware+0xa>
	if (!req) {
   2bf16:	2c00      	cmp	r4, #0
   2bf18:	d0f0      	beq.n	2befc <bt_gatt_change_aware+0xc>
   2bf1a:	4618      	mov	r0, r3
   2bf1c:	f7ff fb29 	bl	2b572 <atomic_get>
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2bf20:	0782      	lsls	r2, r0, #30
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bf22:	f3c0 0440 	ubfx	r4, r0, #1, #1
   2bf26:	d50f      	bpl.n	2bf48 <bt_gatt_change_aware+0x58>
   2bf28:	f3bf 8f5b 	dmb	ish
   2bf2c:	e853 2f00 	ldrex	r2, [r3]
   2bf30:	f022 0202 	bic.w	r2, r2, #2
   2bf34:	e843 2000 	strex	r0, r2, [r3]
   2bf38:	2800      	cmp	r0, #0
   2bf3a:	d1f7      	bne.n	2bf2c <bt_gatt_change_aware+0x3c>
   2bf3c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2bf40:	4618      	mov	r0, r3
   2bf42:	f7ff fdaf 	bl	2baa4 <atomic_set_bit>
	return false;
   2bf46:	e7d9      	b.n	2befc <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2bf48:	2101      	movs	r1, #1
   2bf4a:	e7f9      	b.n	2bf40 <bt_gatt_change_aware+0x50>

0002bf4c <sys_memcpy_swap>:
	psrc += length - 1;
   2bf4c:	1e53      	subs	r3, r2, #1
   2bf4e:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2bf50:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2bf52:	f811 3901 	ldrb.w	r3, [r1], #-1
   2bf56:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   2bf5a:	4290      	cmp	r0, r2
   2bf5c:	d1f9      	bne.n	2bf52 <sys_memcpy_swap+0x6>
}
   2bf5e:	4770      	bx	lr

0002bf60 <le_sc_oob_config_set>:
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2bf60:	7ac2      	ldrb	r2, [r0, #11]
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2bf62:	7c83      	ldrb	r3, [r0, #18]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2bf64:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2bf68:	78c0      	ldrb	r0, [r0, #3]
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2bf6a:	f002 0201 	and.w	r2, r2, #1
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
   2bf6e:	f003 0301 	and.w	r3, r3, #1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2bf72:	b928      	cbnz	r0, 2bf80 <le_sc_oob_config_set+0x20>
		oob_config = req_oob_present ? BT_CONN_OOB_REMOTE_ONLY :
   2bf74:	b952      	cbnz	r2, 2bf8c <le_sc_oob_config_set+0x2c>
				     BT_CONN_OOB_BOTH_PEERS :
   2bf76:	2b00      	cmp	r3, #0
   2bf78:	bf0c      	ite	eq
   2bf7a:	2303      	moveq	r3, #3
   2bf7c:	2300      	movne	r3, #0
   2bf7e:	e009      	b.n	2bf94 <le_sc_oob_config_set+0x34>
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
   2bf80:	b952      	cbnz	r2, 2bf98 <le_sc_oob_config_set+0x38>
				     BT_CONN_OOB_BOTH_PEERS :
   2bf82:	2b00      	cmp	r3, #0
   2bf84:	bf0c      	ite	eq
   2bf86:	2303      	moveq	r3, #3
   2bf88:	2301      	movne	r3, #1
   2bf8a:	e003      	b.n	2bf94 <le_sc_oob_config_set+0x34>
				     BT_CONN_OOB_BOTH_PEERS :
   2bf8c:	2b00      	cmp	r3, #0
   2bf8e:	bf0c      	ite	eq
   2bf90:	2301      	moveq	r3, #1
   2bf92:	2302      	movne	r3, #2
	info->lesc.oob_config = oob_config;
   2bf94:	704b      	strb	r3, [r1, #1]
}
   2bf96:	4770      	bx	lr
				     BT_CONN_OOB_BOTH_PEERS :
   2bf98:	005b      	lsls	r3, r3, #1
   2bf9a:	e7fb      	b.n	2bf94 <le_sc_oob_config_set+0x34>

0002bf9c <smp_signing_info>:
}
   2bf9c:	2007      	movs	r0, #7
   2bf9e:	4770      	bx	lr

0002bfa0 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bfa0:	2301      	movs	r3, #1
   2bfa2:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2bfa4:	43db      	mvns	r3, r3
   2bfa6:	f3bf 8f5b 	dmb	ish
   2bfaa:	e850 2f00 	ldrex	r2, [r0]
   2bfae:	401a      	ands	r2, r3
   2bfb0:	e840 2100 	strex	r1, r2, [r0]
   2bfb4:	2900      	cmp	r1, #0
   2bfb6:	d1f8      	bne.n	2bfaa <atomic_clear_bit+0xa>
   2bfb8:	f3bf 8f5b 	dmb	ish
}
   2bfbc:	4770      	bx	lr

0002bfbe <bt_addr_le_copy>:
   2bfbe:	680b      	ldr	r3, [r1, #0]
   2bfc0:	6003      	str	r3, [r0, #0]
   2bfc2:	888b      	ldrh	r3, [r1, #4]
   2bfc4:	8083      	strh	r3, [r0, #4]
   2bfc6:	798b      	ldrb	r3, [r1, #6]
   2bfc8:	7183      	strb	r3, [r0, #6]
   2bfca:	4770      	bx	lr

0002bfcc <smp_s1>:
{
   2bfcc:	b410      	push	{r4}
   2bfce:	4614      	mov	r4, r2
   2bfd0:	461a      	mov	r2, r3
   2bfd2:	6823      	ldr	r3, [r4, #0]
   2bfd4:	6013      	str	r3, [r2, #0]
   2bfd6:	6863      	ldr	r3, [r4, #4]
   2bfd8:	6053      	str	r3, [r2, #4]
   2bfda:	680b      	ldr	r3, [r1, #0]
   2bfdc:	6093      	str	r3, [r2, #8]
   2bfde:	684b      	ldr	r3, [r1, #4]
}
   2bfe0:	bc10      	pop	{r4}
   2bfe2:	60d3      	str	r3, [r2, #12]
	return bt_encrypt_le(k, out, out);
   2bfe4:	4611      	mov	r1, r2
   2bfe6:	f7e8 b8cd 	b.w	14184 <bt_encrypt_le>

0002bfea <bt_smp_aes_cmac>:
{
   2bfea:	b570      	push	{r4, r5, r6, lr}
   2bfec:	b0c2      	sub	sp, #264	; 0x108
   2bfee:	460d      	mov	r5, r1
   2bff0:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2bff2:	4601      	mov	r1, r0
   2bff4:	aa16      	add	r2, sp, #88	; 0x58
   2bff6:	4668      	mov	r0, sp
{
   2bff8:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   2bffa:	f7fd fe0c 	bl	29c16 <tc_cmac_setup>
   2bffe:	b150      	cbz	r0, 2c016 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   2c000:	4632      	mov	r2, r6
   2c002:	4629      	mov	r1, r5
   2c004:	4668      	mov	r0, sp
   2c006:	f7fd fe31 	bl	29c6c <tc_cmac_update>
   2c00a:	b120      	cbz	r0, 2c016 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   2c00c:	4669      	mov	r1, sp
   2c00e:	4620      	mov	r0, r4
   2c010:	f7fd fe97 	bl	29d42 <tc_cmac_final>
   2c014:	b918      	cbnz	r0, 2c01e <bt_smp_aes_cmac+0x34>
		return -EIO;
   2c016:	f06f 0004 	mvn.w	r0, #4
}
   2c01a:	b042      	add	sp, #264	; 0x108
   2c01c:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   2c01e:	2000      	movs	r0, #0
   2c020:	e7fb      	b.n	2c01a <bt_smp_aes_cmac+0x30>

0002c022 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c022:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2c024:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c026:	2200      	movs	r2, #0
   2c028:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   2c02a:	4604      	mov	r4, r0
   2c02c:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   2c02e:	460a      	mov	r2, r1
   2c030:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   2c034:	2106      	movs	r1, #6
   2c036:	f7fe fdd4 	bl	2abe2 <bt_l2cap_send_cb>
   2c03a:	b128      	cbz	r0, 2c048 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   2c03c:	4628      	mov	r0, r5
}
   2c03e:	b003      	add	sp, #12
   2c040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2c044:	f7f4 bcf4 	b.w	20a30 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c048:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2c04c:	2300      	movs	r3, #0
   2c04e:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   2c052:	b003      	add	sp, #12
   2c054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   2c058:	f7f9 b83a 	b.w	250d0 <k_work_reschedule>

0002c05c <z_log_msg2_static_create.constprop.0>:
   2c05c:	2300      	movs	r3, #0
   2c05e:	f7fc bd27 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002c062 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2c062:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2c064:	ab0a      	add	r3, sp, #40	; 0x28
   2c066:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2c068:	9302      	str	r3, [sp, #8]
   2c06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c06c:	9301      	str	r3, [sp, #4]
   2c06e:	2300      	movs	r3, #0
   2c070:	9300      	str	r3, [sp, #0]
   2c072:	2201      	movs	r2, #1
   2c074:	4618      	mov	r0, r3
   2c076:	f7da ff1b 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2c07a:	b007      	add	sp, #28
   2c07c:	f85d fb04 	ldr.w	pc, [sp], #4

0002c080 <sys_mem_swap.constprop.0>:
static inline void sys_mem_swap(void *buf, size_t length)
   2c080:	b510      	push	{r4, lr}
   2c082:	1e43      	subs	r3, r0, #1
   2c084:	f100 0210 	add.w	r2, r0, #16
   2c088:	3007      	adds	r0, #7
		uint8_t tmp = ((uint8_t *)buf)[i];
   2c08a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   2c08e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2c092:	701c      	strb	r4, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   2c094:	4283      	cmp	r3, r0
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2c096:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < (length/2); i++) {
   2c098:	d1f7      	bne.n	2c08a <sys_mem_swap.constprop.0+0xa>
	}
}
   2c09a:	bd10      	pop	{r4, pc}

0002c09c <smp_f6>:
{
   2c09c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2c0a0:	b097      	sub	sp, #92	; 0x5c
   2c0a2:	4604      	mov	r4, r0
   2c0a4:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   2c0a6:	a805      	add	r0, sp, #20
   2c0a8:	2210      	movs	r2, #16
{
   2c0aa:	461d      	mov	r5, r3
   2c0ac:	e9dd 981f 	ldrd	r9, r8, [sp, #124]	; 0x7c
   2c0b0:	9f21      	ldr	r7, [sp, #132]	; 0x84
	sys_memcpy_swap(m, n1, 16);
   2c0b2:	f7ff ff4b 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2c0b6:	2210      	movs	r2, #16
   2c0b8:	4631      	mov	r1, r6
   2c0ba:	a809      	add	r0, sp, #36	; 0x24
   2c0bc:	f7ff ff46 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   2c0c0:	2210      	movs	r2, #16
   2c0c2:	4629      	mov	r1, r5
   2c0c4:	a80d      	add	r0, sp, #52	; 0x34
   2c0c6:	f7ff ff41 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   2c0ca:	991e      	ldr	r1, [sp, #120]	; 0x78
   2c0cc:	2203      	movs	r2, #3
   2c0ce:	a811      	add	r0, sp, #68	; 0x44
   2c0d0:	f7ff ff3c 	bl	2bf4c <sys_memcpy_swap>
	m[51] = a1->type;
   2c0d4:	4649      	mov	r1, r9
	memcpy(m + 52, a1->a.val, 6);
   2c0d6:	f8d9 0001 	ldr.w	r0, [r9, #1]
	m[51] = a1->type;
   2c0da:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c0de:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   2c0e2:	9012      	str	r0, [sp, #72]	; 0x48
   2c0e4:	888b      	ldrh	r3, [r1, #4]
   2c0e6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2c0ea:	2206      	movs	r2, #6
   2c0ec:	a812      	add	r0, sp, #72	; 0x48
   2c0ee:	f7ff ff2d 	bl	2bf4c <sys_memcpy_swap>
	m[58] = a2->type;
   2c0f2:	4641      	mov	r1, r8
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c0f4:	2206      	movs	r2, #6
	m[58] = a2->type;
   2c0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c0fa:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   2c0fe:	f8d8 3001 	ldr.w	r3, [r8, #1]
   2c102:	f8cd 304f 	str.w	r3, [sp, #79]	; 0x4f
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c106:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
	memcpy(m + 59, a2->a.val, 6);
   2c10a:	888b      	ldrh	r3, [r1, #4]
   2c10c:	f8ad 3053 	strh.w	r3, [sp, #83]	; 0x53
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   2c110:	f7ff ff1c 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   2c114:	4621      	mov	r1, r4
   2c116:	2210      	movs	r2, #16
   2c118:	a801      	add	r0, sp, #4
   2c11a:	f7ff ff17 	bl	2bf4c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   2c11e:	463b      	mov	r3, r7
   2c120:	2241      	movs	r2, #65	; 0x41
   2c122:	a905      	add	r1, sp, #20
   2c124:	a801      	add	r0, sp, #4
   2c126:	f7ff ff60 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
   2c12a:	4604      	mov	r4, r0
   2c12c:	b910      	cbnz	r0, 2c134 <smp_f6+0x98>
	sys_mem_swap(check, 16);
   2c12e:	4638      	mov	r0, r7
   2c130:	f7ff ffa6 	bl	2c080 <sys_mem_swap.constprop.0>
}
   2c134:	4620      	mov	r0, r4
   2c136:	b017      	add	sp, #92	; 0x5c
   2c138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0002c13c <smp_f4>:
{
   2c13c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c13e:	b097      	sub	sp, #92	; 0x5c
   2c140:	4614      	mov	r4, r2
   2c142:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   2c144:	2220      	movs	r2, #32
   2c146:	4601      	mov	r1, r0
   2c148:	a805      	add	r0, sp, #20
{
   2c14a:	461d      	mov	r5, r3
   2c14c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2c14e:	f7ff fefd 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   2c152:	2220      	movs	r2, #32
   2c154:	4631      	mov	r1, r6
   2c156:	a80d      	add	r0, sp, #52	; 0x34
   2c158:	f7ff fef8 	bl	2bf4c <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2c15c:	4621      	mov	r1, r4
   2c15e:	2210      	movs	r2, #16
   2c160:	a801      	add	r0, sp, #4
	m[64] = z;
   2c162:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   2c166:	f7ff fef1 	bl	2bf4c <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2c16a:	463b      	mov	r3, r7
   2c16c:	2241      	movs	r2, #65	; 0x41
   2c16e:	a905      	add	r1, sp, #20
   2c170:	a801      	add	r0, sp, #4
   2c172:	f7ff ff3a 	bl	2bfea <bt_smp_aes_cmac>
	if (err) {
   2c176:	4604      	mov	r4, r0
   2c178:	b910      	cbnz	r0, 2c180 <smp_f4+0x44>
	sys_mem_swap(res, 16);
   2c17a:	4638      	mov	r0, r7
   2c17c:	f7ff ff80 	bl	2c080 <sys_mem_swap.constprop.0>
}
   2c180:	4620      	mov	r0, r4
   2c182:	b017      	add	sp, #92	; 0x5c
   2c184:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c186 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2c186:	f3bf 8f5b 	dmb	ish
   2c18a:	6800      	ldr	r0, [r0, #0]
   2c18c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2c190:	4108      	asrs	r0, r1
}
   2c192:	f000 0001 	and.w	r0, r0, #1
   2c196:	4770      	bx	lr

0002c198 <smp_keys_check>:
{
   2c198:	b538      	push	{r3, r4, r5, lr}
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2c19a:	210b      	movs	r1, #11
{
   2c19c:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
   2c19e:	3004      	adds	r0, #4
   2c1a0:	f7ff fff1 	bl	2c186 <atomic_test_bit>
   2c1a4:	b108      	cbz	r0, 2c1aa <smp_keys_check+0x12>
		return false;
   2c1a6:	2000      	movs	r0, #0
}
   2c1a8:	bd38      	pop	{r3, r4, r5, pc}
	if (!conn->le.keys) {
   2c1aa:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c1ae:	b983      	cbnz	r3, 2c1d2 <smp_keys_check+0x3a>
						     conn->id, &conn->le.dst);
   2c1b0:	f104 0588 	add.w	r5, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
   2c1b4:	7a21      	ldrb	r1, [r4, #8]
   2c1b6:	462a      	mov	r2, r5
   2c1b8:	2020      	movs	r0, #32
   2c1ba:	f7e4 fd1f 	bl	10bfc <bt_keys_find>
   2c1be:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c1c2:	b930      	cbnz	r0, 2c1d2 <smp_keys_check+0x3a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
   2c1c4:	7a21      	ldrb	r1, [r4, #8]
   2c1c6:	462a      	mov	r2, r5
   2c1c8:	2004      	movs	r0, #4
   2c1ca:	f7e4 fd17 	bl	10bfc <bt_keys_find>
   2c1ce:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
   2c1d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c1d6:	2b00      	cmp	r3, #0
   2c1d8:	d0e5      	beq.n	2c1a6 <smp_keys_check+0xe>
   2c1da:	89da      	ldrh	r2, [r3, #14]
   2c1dc:	f002 0224 	and.w	r2, r2, #36	; 0x24
   2c1e0:	2a00      	cmp	r2, #0
   2c1e2:	d0e0      	beq.n	2c1a6 <smp_keys_check+0xe>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
   2c1e4:	7aa2      	ldrb	r2, [r4, #10]
   2c1e6:	2a02      	cmp	r2, #2
   2c1e8:	d902      	bls.n	2c1f0 <smp_keys_check+0x58>
   2c1ea:	7b5b      	ldrb	r3, [r3, #13]
   2c1ec:	07db      	lsls	r3, r3, #31
   2c1ee:	d5da      	bpl.n	2c1a6 <smp_keys_check+0xe>
	return true;
   2c1f0:	2001      	movs	r0, #1
   2c1f2:	e7d9      	b.n	2c1a8 <smp_keys_check+0x10>

0002c1f4 <update_keys_check>:
{
   2c1f4:	b510      	push	{r4, lr}
   2c1f6:	4603      	mov	r3, r0
	if (!keys ||
   2c1f8:	b1d9      	cbz	r1, 2c232 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   2c1fa:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   2c1fc:	f010 0f24 	tst.w	r0, #36	; 0x24
   2c200:	d017      	beq.n	2c232 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c202:	7d1a      	ldrb	r2, [r3, #20]
   2c204:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   2c206:	7b09      	ldrb	r1, [r1, #12]
   2c208:	42a2      	cmp	r2, r4
   2c20a:	bf28      	it	cs
   2c20c:	4622      	movcs	r2, r4
   2c20e:	4291      	cmp	r1, r2
   2c210:	d901      	bls.n	2c216 <update_keys_check+0x22>
		return false;
   2c212:	2000      	movs	r0, #0
}
   2c214:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c216:	0682      	lsls	r2, r0, #26
   2c218:	d404      	bmi.n	2c224 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   2c21a:	7a18      	ldrb	r0, [r3, #8]
   2c21c:	3800      	subs	r0, #0
   2c21e:	bf18      	it	ne
   2c220:	2001      	movne	r0, #1
   2c222:	e7f7      	b.n	2c214 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c224:	2105      	movs	r1, #5
   2c226:	1d18      	adds	r0, r3, #4
   2c228:	f7ff ffad 	bl	2c186 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   2c22c:	2800      	cmp	r0, #0
   2c22e:	d1f4      	bne.n	2c21a <update_keys_check+0x26>
   2c230:	e7ef      	b.n	2c212 <update_keys_check+0x1e>
		return true;
   2c232:	2001      	movs	r0, #1
   2c234:	e7ee      	b.n	2c214 <update_keys_check+0x20>

0002c236 <remote_sec_level_reachable>:
{
   2c236:	b508      	push	{r3, lr}
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
   2c238:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
   2c23c:	7a92      	ldrb	r2, [r2, #10]
	switch (sec) {
   2c23e:	2a03      	cmp	r2, #3
{
   2c240:	4603      	mov	r3, r0
	switch (sec) {
   2c242:	d014      	beq.n	2c26e <remote_sec_level_reachable+0x38>
   2c244:	d805      	bhi.n	2c252 <remote_sec_level_reachable+0x1c>
   2c246:	3a01      	subs	r2, #1
   2c248:	2a01      	cmp	r2, #1
   2c24a:	bf94      	ite	ls
   2c24c:	2000      	movls	r0, #0
   2c24e:	2008      	movhi	r0, #8
}
   2c250:	bd08      	pop	{r3, pc}
	switch (sec) {
   2c252:	2a04      	cmp	r2, #4
   2c254:	d10f      	bne.n	2c276 <remote_sec_level_reachable+0x40>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c256:	7d02      	ldrb	r2, [r0, #20]
   2c258:	7b41      	ldrb	r1, [r0, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
   2c25a:	428a      	cmp	r2, r1
   2c25c:	bf28      	it	cs
   2c25e:	460a      	movcs	r2, r1
   2c260:	2a10      	cmp	r2, #16
   2c262:	d10a      	bne.n	2c27a <remote_sec_level_reachable+0x44>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   2c264:	2105      	movs	r1, #5
   2c266:	3004      	adds	r0, #4
   2c268:	f7ff ff8d 	bl	2c186 <atomic_test_bit>
   2c26c:	b108      	cbz	r0, 2c272 <remote_sec_level_reachable+0x3c>
		if (smp->method == JUST_WORKS) {
   2c26e:	7a1b      	ldrb	r3, [r3, #8]
   2c270:	b92b      	cbnz	r3, 2c27e <remote_sec_level_reachable+0x48>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
   2c272:	2003      	movs	r0, #3
   2c274:	e7ec      	b.n	2c250 <remote_sec_level_reachable+0x1a>
	switch (sec) {
   2c276:	2008      	movs	r0, #8
   2c278:	e7ea      	b.n	2c250 <remote_sec_level_reachable+0x1a>
			return BT_SMP_ERR_ENC_KEY_SIZE;
   2c27a:	2006      	movs	r0, #6
   2c27c:	e7e8      	b.n	2c250 <remote_sec_level_reachable+0x1a>
		return 0;
   2c27e:	2000      	movs	r0, #0
   2c280:	e7e6      	b.n	2c250 <remote_sec_level_reachable+0x1a>

0002c282 <atomic_test_and_clear_bit>:
{
   2c282:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c284:	2301      	movs	r3, #1
   2c286:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2c28a:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2c28c:	f3bf 8f5b 	dmb	ish
   2c290:	e850 3f00 	ldrex	r3, [r0]
   2c294:	ea03 0c02 	and.w	ip, r3, r2
   2c298:	e840 ce00 	strex	lr, ip, [r0]
   2c29c:	f1be 0f00 	cmp.w	lr, #0
   2c2a0:	d1f6      	bne.n	2c290 <atomic_test_and_clear_bit+0xe>
   2c2a2:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   2c2a6:	420b      	tst	r3, r1
}
   2c2a8:	bf14      	ite	ne
   2c2aa:	2001      	movne	r0, #1
   2c2ac:	2000      	moveq	r0, #0
   2c2ae:	f85d fb04 	ldr.w	pc, [sp], #4

0002c2b2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2c2b2:	2301      	movs	r3, #1
   2c2b4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2c2b6:	f3bf 8f5b 	dmb	ish
   2c2ba:	e850 2f00 	ldrex	r2, [r0]
   2c2be:	431a      	orrs	r2, r3
   2c2c0:	e840 2100 	strex	r1, r2, [r0]
   2c2c4:	2900      	cmp	r1, #0
   2c2c6:	d1f8      	bne.n	2c2ba <atomic_set_bit+0x8>
   2c2c8:	f3bf 8f5b 	dmb	ish
}
   2c2cc:	4770      	bx	lr

0002c2ce <smp_keypress_notif>:
{
   2c2ce:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   2c2d0:	210e      	movs	r1, #14
   2c2d2:	f7ff ffee 	bl	2c2b2 <atomic_set_bit>
}
   2c2d6:	2000      	movs	r0, #0
   2c2d8:	bd08      	pop	{r3, pc}

0002c2da <generate_dhkey>:
{
   2c2da:	b510      	push	{r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c2dc:	2107      	movs	r1, #7
{
   2c2de:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c2e0:	3004      	adds	r0, #4
   2c2e2:	f7ff ffe6 	bl	2c2b2 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
   2c2e6:	2008      	movs	r0, #8
   2c2e8:	f7e2 fdfa 	bl	eee0 <smp_find>
   2c2ec:	b920      	cbnz	r0, 2c2f8 <generate_dhkey+0x1e>
		return smp_dhkey_generate(smp);
   2c2ee:	4620      	mov	r0, r4
}
   2c2f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return smp_dhkey_generate(smp);
   2c2f4:	f7e2 be94 	b.w	f020 <smp_dhkey_generate>
}
   2c2f8:	2000      	movs	r0, #0
   2c2fa:	bd10      	pop	{r4, pc}

0002c2fc <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c2fc:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c2fe:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2c300:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c302:	4628      	mov	r0, r5
   2c304:	2104      	movs	r1, #4
   2c306:	f7ff ff3e 	bl	2c186 <atomic_test_bit>
   2c30a:	b970      	cbnz	r0, 2c32a <smp_create_pdu.constprop.0+0x2e>
		timeout = SMP_TIMEOUT;
   2c30c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c310:	2100      	movs	r1, #0
		timeout = K_NO_WAIT;
   2c312:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2c314:	4608      	mov	r0, r1
   2c316:	f7fe fc61 	bl	2abdc <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   2c31a:	4604      	mov	r4, r0
   2c31c:	b938      	cbnz	r0, 2c32e <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2c31e:	2104      	movs	r1, #4
   2c320:	4628      	mov	r0, r5
   2c322:	f7ff ffc6 	bl	2c2b2 <atomic_set_bit>
}
   2c326:	4620      	mov	r0, r4
   2c328:	bd70      	pop	{r4, r5, r6, pc}
		timeout = K_NO_WAIT;
   2c32a:	2200      	movs	r2, #0
   2c32c:	e7f0      	b.n	2c310 <smp_create_pdu.constprop.0+0x14>
	return net_buf_simple_add(&buf->b, len);
   2c32e:	2101      	movs	r1, #1
   2c330:	3008      	adds	r0, #8
   2c332:	f000 fbca 	bl	2caca <net_buf_simple_add>
	hdr->code = op;
   2c336:	7006      	strb	r6, [r0, #0]
	return buf;
   2c338:	e7f5      	b.n	2c326 <smp_create_pdu.constprop.0+0x2a>

0002c33a <send_pairing_rsp>:
{
   2c33a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c33c:	2102      	movs	r1, #2
{
   2c33e:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   2c340:	f7ff ffdc 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2c344:	4605      	mov	r5, r0
   2c346:	b180      	cbz	r0, 2c36a <send_pairing_rsp+0x30>
   2c348:	2106      	movs	r1, #6
   2c34a:	3008      	adds	r0, #8
   2c34c:	f000 fbbd 	bl	2caca <net_buf_simple_add>
   2c350:	f8d4 3011 	ldr.w	r3, [r4, #17]
   2c354:	6003      	str	r3, [r0, #0]
   2c356:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   2c35a:	8083      	strh	r3, [r0, #4]
	smp_send(smp, rsp_buf, NULL, NULL);
   2c35c:	2200      	movs	r2, #0
   2c35e:	4620      	mov	r0, r4
   2c360:	4629      	mov	r1, r5
   2c362:	f7ff fe5e 	bl	2c022 <smp_send.constprop.0>
	return 0;
   2c366:	2000      	movs	r0, #0
}
   2c368:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c36a:	2008      	movs	r0, #8
   2c36c:	e7fc      	b.n	2c368 <send_pairing_rsp+0x2e>

0002c36e <smp_send_pairing_random>:
{
   2c36e:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c370:	2104      	movs	r1, #4
{
   2c372:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2c374:	f7ff ffc2 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   2c378:	4605      	mov	r5, r0
   2c37a:	b1a0      	cbz	r0, 2c3a6 <smp_send_pairing_random+0x38>
   2c37c:	2110      	movs	r1, #16
   2c37e:	3008      	adds	r0, #8
   2c380:	f000 fba3 	bl	2caca <net_buf_simple_add>
   2c384:	f104 0327 	add.w	r3, r4, #39	; 0x27
   2c388:	f104 0237 	add.w	r2, r4, #55	; 0x37
   2c38c:	f853 1b04 	ldr.w	r1, [r3], #4
   2c390:	f840 1b04 	str.w	r1, [r0], #4
   2c394:	4293      	cmp	r3, r2
   2c396:	d1f9      	bne.n	2c38c <smp_send_pairing_random+0x1e>
	smp_send(smp, rsp_buf, NULL, NULL);
   2c398:	4620      	mov	r0, r4
   2c39a:	2200      	movs	r2, #0
   2c39c:	4629      	mov	r1, r5
   2c39e:	f7ff fe40 	bl	2c022 <smp_send.constprop.0>
	return 0;
   2c3a2:	2000      	movs	r0, #0
}
   2c3a4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c3a6:	2008      	movs	r0, #8
   2c3a8:	e7fc      	b.n	2c3a4 <smp_send_pairing_random+0x36>

0002c3aa <sc_smp_send_dhkey_check>:
{
   2c3aa:	b570      	push	{r4, r5, r6, lr}
   2c3ac:	460c      	mov	r4, r1
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2c3ae:	210d      	movs	r1, #13
{
   2c3b0:	4606      	mov	r6, r0
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
   2c3b2:	f7ff ffa3 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!buf) {
   2c3b6:	4605      	mov	r5, r0
   2c3b8:	b198      	cbz	r0, 2c3e2 <sc_smp_send_dhkey_check+0x38>
   2c3ba:	2110      	movs	r1, #16
   2c3bc:	3008      	adds	r0, #8
   2c3be:	f000 fb84 	bl	2caca <net_buf_simple_add>
   2c3c2:	4621      	mov	r1, r4
   2c3c4:	f104 0310 	add.w	r3, r4, #16
   2c3c8:	f851 2b04 	ldr.w	r2, [r1], #4
   2c3cc:	f840 2b04 	str.w	r2, [r0], #4
   2c3d0:	4299      	cmp	r1, r3
   2c3d2:	d1f9      	bne.n	2c3c8 <sc_smp_send_dhkey_check+0x1e>
	smp_send(smp, buf, NULL, NULL);
   2c3d4:	4630      	mov	r0, r6
   2c3d6:	2200      	movs	r2, #0
   2c3d8:	4629      	mov	r1, r5
   2c3da:	f7ff fe22 	bl	2c022 <smp_send.constprop.0>
	return 0;
   2c3de:	2000      	movs	r0, #0
}
   2c3e0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   2c3e2:	2008      	movs	r0, #8
   2c3e4:	e7fc      	b.n	2c3e0 <sc_smp_send_dhkey_check+0x36>

0002c3e6 <smp_reset>:
{
   2c3e6:	b570      	push	{r4, r5, r6, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2c3e8:	1d03      	adds	r3, r0, #4
   2c3ea:	4604      	mov	r4, r0
   2c3ec:	2500      	movs	r5, #0
	struct bt_conn *conn = smp->chan.chan.conn;
   2c3ee:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
   2c3f2:	f3bf 8f5b 	dmb	ish
   2c3f6:	e853 2f00 	ldrex	r2, [r3]
   2c3fa:	e843 5100 	strex	r1, r5, [r3]
   2c3fe:	2900      	cmp	r1, #0
   2c400:	d1f9      	bne.n	2c3f6 <smp_reset+0x10>
   2c402:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   2c406:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   2c40a:	f001 fd5a 	bl	2dec2 <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   2c40e:	7225      	strb	r5, [r4, #8]
   2c410:	f3bf 8f5b 	dmb	ish
   2c414:	e854 3f00 	ldrex	r3, [r4]
   2c418:	e844 5200 	strex	r2, r5, [r4]
   2c41c:	2a00      	cmp	r2, #0
   2c41e:	d1f9      	bne.n	2c414 <smp_reset+0x2e>
   2c420:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c424:	78f3      	ldrb	r3, [r6, #3]
   2c426:	b92b      	cbnz	r3, 2c434 <smp_reset+0x4e>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2c428:	210b      	movs	r1, #11
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c42a:	4620      	mov	r0, r4
}
   2c42c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c430:	f7ff bf3f 	b.w	2c2b2 <atomic_set_bit>
   2c434:	2101      	movs	r1, #1
   2c436:	e7f8      	b.n	2c42a <smp_reset+0x44>

0002c438 <smp_c1>:
{
   2c438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2c43a:	b089      	sub	sp, #36	; 0x24
   2c43c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
   2c440:	4605      	mov	r5, r0
	p1[0] = ia->type;
   2c442:	7830      	ldrb	r0, [r6, #0]
   2c444:	f88d 0000 	strb.w	r0, [sp]
	p1[1] = ra->type;
   2c448:	7838      	ldrb	r0, [r7, #0]
   2c44a:	f88d 0001 	strb.w	r0, [sp, #1]
	memcpy(p1 + 2, preq, 7);
   2c44e:	6810      	ldr	r0, [r2, #0]
   2c450:	f8cd 0002 	str.w	r0, [sp, #2]
   2c454:	8890      	ldrh	r0, [r2, #4]
   2c456:	7992      	ldrb	r2, [r2, #6]
{
   2c458:	9c10      	ldr	r4, [sp, #64]	; 0x40
	memcpy(p1 + 2, preq, 7);
   2c45a:	f88d 2008 	strb.w	r2, [sp, #8]
	memcpy(p1 + 9, pres, 7);
   2c45e:	681a      	ldr	r2, [r3, #0]
   2c460:	f8cd 2009 	str.w	r2, [sp, #9]
   2c464:	889a      	ldrh	r2, [r3, #4]
   2c466:	799b      	ldrb	r3, [r3, #6]
	memcpy(p1 + 2, preq, 7);
   2c468:	f8ad 0006 	strh.w	r0, [sp, #6]
	memcpy(p1 + 9, pres, 7);
   2c46c:	f8ad 200d 	strh.w	r2, [sp, #13]
   2c470:	f88d 300f 	strb.w	r3, [sp, #15]
	while (len--) {
   2c474:	f101 0c10 	add.w	ip, r1, #16
   2c478:	4620      	mov	r0, r4
   2c47a:	466a      	mov	r2, sp
   2c47c:	458c      	cmp	ip, r1
   2c47e:	d124      	bne.n	2c4ca <smp_c1+0x92>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2c480:	4622      	mov	r2, r4
   2c482:	4621      	mov	r1, r4
   2c484:	4628      	mov	r0, r5
   2c486:	f7e7 fe7d 	bl	14184 <bt_encrypt_le>
	if (err) {
   2c48a:	4603      	mov	r3, r0
   2c48c:	bb70      	cbnz	r0, 2c4ec <smp_c1+0xb4>
	memcpy(p2, ra->a.val, 6);
   2c48e:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   2c492:	f8ad 2014 	strh.w	r2, [sp, #20]
	memcpy(p2 + 6, ia->a.val, 6);
   2c496:	f8d6 2001 	ldr.w	r2, [r6, #1]
	memcpy(p2, ra->a.val, 6);
   2c49a:	f8d7 0001 	ldr.w	r0, [r7, #1]
	memcpy(p2 + 6, ia->a.val, 6);
   2c49e:	f8cd 2016 	str.w	r2, [sp, #22]
   2c4a2:	f8b6 2005 	ldrh.w	r2, [r6, #5]
	memcpy(p2, ra->a.val, 6);
   2c4a6:	9004      	str	r0, [sp, #16]
	(void)memset(p2 + 12, 0, 4);
   2c4a8:	9307      	str	r3, [sp, #28]
	memcpy(p2 + 6, ia->a.val, 6);
   2c4aa:	f8ad 201a 	strh.w	r2, [sp, #26]
	while (len--) {
   2c4ae:	f104 0010 	add.w	r0, r4, #16
   2c4b2:	4623      	mov	r3, r4
   2c4b4:	a904      	add	r1, sp, #16
   2c4b6:	4283      	cmp	r3, r0
   2c4b8:	d110      	bne.n	2c4dc <smp_c1+0xa4>
	return bt_encrypt_le(k, enc_data, enc_data);
   2c4ba:	4622      	mov	r2, r4
   2c4bc:	4621      	mov	r1, r4
   2c4be:	4628      	mov	r0, r5
}
   2c4c0:	b009      	add	sp, #36	; 0x24
   2c4c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_encrypt_le(k, enc_data, enc_data);
   2c4c6:	f7e7 be5d 	b.w	14184 <bt_encrypt_le>
		*r++ = *p++ ^ *q++;
   2c4ca:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c4ce:	f812 eb01 	ldrb.w	lr, [r2], #1
   2c4d2:	ea83 030e 	eor.w	r3, r3, lr
   2c4d6:	f800 3b01 	strb.w	r3, [r0], #1
   2c4da:	e7cf      	b.n	2c47c <smp_c1+0x44>
   2c4dc:	f813 2b01 	ldrb.w	r2, [r3], #1
   2c4e0:	f811 6b01 	ldrb.w	r6, [r1], #1
   2c4e4:	4072      	eors	r2, r6
   2c4e6:	f803 2c01 	strb.w	r2, [r3, #-1]
   2c4ea:	e7e4      	b.n	2c4b6 <smp_c1+0x7e>
}
   2c4ec:	b009      	add	sp, #36	; 0x24
   2c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002c4f0 <legacy_send_pairing_confirm>:
{
   2c4f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c4f2:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   2c4f4:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
{
   2c4f8:	4605      	mov	r5, r0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2c4fa:	f7ff feff 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!buf) {
   2c4fe:	4606      	mov	r6, r0
   2c500:	b1c0      	cbz	r0, 2c534 <legacy_send_pairing_confirm+0x44>
   2c502:	2110      	movs	r1, #16
   2c504:	3008      	adds	r0, #8
   2c506:	f000 fae0 	bl	2caca <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2c50a:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2c50e:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   2c510:	9002      	str	r0, [sp, #8]
   2c512:	9301      	str	r3, [sp, #4]
   2c514:	9400      	str	r4, [sp, #0]
   2c516:	f105 0310 	add.w	r3, r5, #16
   2c51a:	f105 0209 	add.w	r2, r5, #9
   2c51e:	f105 0127 	add.w	r1, r5, #39	; 0x27
   2c522:	f105 0047 	add.w	r0, r5, #71	; 0x47
   2c526:	f7ff ff87 	bl	2c438 <smp_c1>
   2c52a:	4604      	mov	r4, r0
   2c52c:	b120      	cbz	r0, 2c538 <legacy_send_pairing_confirm+0x48>
		net_buf_unref(buf);
   2c52e:	4630      	mov	r0, r6
   2c530:	f7f4 fa7e 	bl	20a30 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   2c534:	2008      	movs	r0, #8
   2c536:	e009      	b.n	2c54c <legacy_send_pairing_confirm+0x5c>
	smp_send(smp, buf, NULL, NULL);
   2c538:	4602      	mov	r2, r0
   2c53a:	4631      	mov	r1, r6
   2c53c:	4628      	mov	r0, r5
   2c53e:	f7ff fd70 	bl	2c022 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c542:	1d28      	adds	r0, r5, #4
   2c544:	4621      	mov	r1, r4
   2c546:	f7ff fd2b 	bl	2bfa0 <atomic_clear_bit>
	return 0;
   2c54a:	4620      	mov	r0, r4
}
   2c54c:	b004      	add	sp, #16
   2c54e:	bd70      	pop	{r4, r5, r6, pc}

0002c550 <legacy_pairing_confirm>:
{
   2c550:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c552:	f8d0 20f0 	ldr.w	r2, [r0, #240]	; 0xf0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c556:	78d2      	ldrb	r2, [r2, #3]
{
   2c558:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2c55a:	b932      	cbnz	r2, 2c56a <legacy_pairing_confirm+0x1a>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
   2c55c:	2103      	movs	r1, #3
			atomic_set_bit(smp->allowed_cmds,
   2c55e:	f7ff fea8 	bl	2c2b2 <atomic_set_bit>
}
   2c562:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			return legacy_send_pairing_confirm(smp);
   2c566:	f7ff bfc3 	b.w	2c4f0 <legacy_send_pairing_confirm>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c56a:	1d02      	adds	r2, r0, #4
   2c56c:	210a      	movs	r1, #10
   2c56e:	4610      	mov	r0, r2
   2c570:	f7ff fe09 	bl	2c186 <atomic_test_bit>
   2c574:	b910      	cbnz	r0, 2c57c <legacy_pairing_confirm+0x2c>
			atomic_set_bit(smp->allowed_cmds,
   2c576:	2104      	movs	r1, #4
   2c578:	4618      	mov	r0, r3
   2c57a:	e7f0      	b.n	2c55e <legacy_pairing_confirm+0xe>
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2c57c:	4610      	mov	r0, r2
   2c57e:	2100      	movs	r1, #0
   2c580:	f7ff fe97 	bl	2c2b2 <atomic_set_bit>
}
   2c584:	2000      	movs	r0, #0
   2c586:	bd08      	pop	{r3, pc}

0002c588 <bt_smp_request_ltk>:
{
   2c588:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2c58c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2c590:	e9cd 2300 	strd	r2, r3, [sp]
   2c594:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   2c596:	f7e2 fba1 	bl	ecdc <smp_chan_get>
	if (!smp) {
   2c59a:	4605      	mov	r5, r0
   2c59c:	2800      	cmp	r0, #0
   2c59e:	f000 8090 	beq.w	2c6c2 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   2c5a2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c5a6:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   2c5a8:	f1b9 0f00 	cmp.w	r9, #0
   2c5ac:	d12a      	bne.n	2c604 <bt_smp_request_ltk+0x7c>
   2c5ae:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c5b2:	4313      	orrs	r3, r2
   2c5b4:	d126      	bne.n	2c604 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c5b6:	2103      	movs	r1, #3
   2c5b8:	4638      	mov	r0, r7
   2c5ba:	f7ff fde4 	bl	2c186 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2c5be:	b308      	cbz	r0, 2c604 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c5c0:	2101      	movs	r1, #1
   2c5c2:	4638      	mov	r0, r7
   2c5c4:	f7ff fddf 	bl	2c186 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   2c5c8:	4606      	mov	r6, r0
   2c5ca:	b1d8      	cbz	r0, 2c604 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   2c5cc:	7d2c      	ldrb	r4, [r5, #20]
   2c5ce:	7b6b      	ldrb	r3, [r5, #13]
   2c5d0:	429c      	cmp	r4, r3
   2c5d2:	bf28      	it	cs
   2c5d4:	461c      	movcs	r4, r3
   2c5d6:	4622      	mov	r2, r4
   2c5d8:	f105 0147 	add.w	r1, r5, #71	; 0x47
   2c5dc:	4640      	mov	r0, r8
   2c5de:	f001 ffc2 	bl	2e566 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c5e2:	2c0f      	cmp	r4, #15
   2c5e4:	d806      	bhi.n	2c5f4 <bt_smp_request_ltk+0x6c>
__ssp_bos_icheck3(memset, void *, int)
   2c5e6:	f1c4 0210 	rsb	r2, r4, #16
   2c5ea:	4649      	mov	r1, r9
   2c5ec:	eb08 0004 	add.w	r0, r8, r4
   2c5f0:	f001 ffda 	bl	2e5a8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c5f4:	2101      	movs	r1, #1
   2c5f6:	4638      	mov	r0, r7
   2c5f8:	f7ff fe5b 	bl	2c2b2 <atomic_set_bit>
}
   2c5fc:	4630      	mov	r0, r6
   2c5fe:	b003      	add	sp, #12
   2c600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   2c604:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c608:	b983      	cbnz	r3, 2c62c <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   2c60a:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2c60e:	7a21      	ldrb	r1, [r4, #8]
   2c610:	4632      	mov	r2, r6
   2c612:	2020      	movs	r0, #32
   2c614:	f7e4 faf2 	bl	10bfc <bt_keys_find>
   2c618:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c61c:	b930      	cbnz	r0, 2c62c <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_PERIPH_LTK,
   2c61e:	7a21      	ldrb	r1, [r4, #8]
   2c620:	4632      	mov	r2, r6
   2c622:	2001      	movs	r0, #1
   2c624:	f7e4 faea 	bl	10bfc <bt_keys_find>
   2c628:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c62c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c630:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2c634:	b9ee      	cbnz	r6, 2c672 <bt_smp_request_ltk+0xea>
   2c636:	e9dd 2300 	ldrd	r2, r3, [sp]
   2c63a:	4313      	orrs	r3, r2
   2c63c:	d119      	bne.n	2c672 <bt_smp_request_ltk+0xea>
   2c63e:	b388      	cbz	r0, 2c6a4 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2c640:	89c3      	ldrh	r3, [r0, #14]
   2c642:	069a      	lsls	r2, r3, #26
   2c644:	d516      	bpl.n	2c674 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   2c646:	7b04      	ldrb	r4, [r0, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c648:	f100 011a 	add.w	r1, r0, #26
   2c64c:	4622      	mov	r2, r4
   2c64e:	4640      	mov	r0, r8
   2c650:	f001 ff89 	bl	2e566 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2c654:	2c0f      	cmp	r4, #15
   2c656:	d806      	bhi.n	2c666 <bt_smp_request_ltk+0xde>
__ssp_bos_icheck3(memset, void *, int)
   2c658:	f1c4 0210 	rsb	r2, r4, #16
   2c65c:	4631      	mov	r1, r6
   2c65e:	eb08 0004 	add.w	r0, r8, r4
   2c662:	f001 ffa1 	bl	2e5a8 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c666:	2101      	movs	r1, #1
   2c668:	4638      	mov	r0, r7
   2c66a:	f7ff fe22 	bl	2c2b2 <atomic_set_bit>
		return true;
   2c66e:	2601      	movs	r6, #1
   2c670:	e7c4      	b.n	2c5fc <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c672:	b1b8      	cbz	r0, 2c6a4 <bt_smp_request_ltk+0x11c>
   2c674:	89c3      	ldrh	r3, [r0, #14]
   2c676:	07db      	lsls	r3, r3, #31
   2c678:	d514      	bpl.n	2c6a4 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c67a:	2208      	movs	r2, #8
   2c67c:	4669      	mov	r1, sp
   2c67e:	3040      	adds	r0, #64	; 0x40
   2c680:	f001 ff61 	bl	2e546 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_PERIPH_LTK) &&
   2c684:	b970      	cbnz	r0, 2c6a4 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->periph_ltk.ediv, &ediv, 2)) {
   2c686:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2c68a:	2202      	movs	r2, #2
   2c68c:	a90a      	add	r1, sp, #40	; 0x28
   2c68e:	3048      	adds	r0, #72	; 0x48
   2c690:	f001 ff59 	bl	2e546 <memcmp>
	    !memcmp(conn->le.keys->periph_ltk.rand, &rand, 8) &&
   2c694:	4606      	mov	r6, r0
   2c696:	b928      	cbnz	r0, 2c6a4 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   2c698:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2c69c:	7b0c      	ldrb	r4, [r1, #12]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2c69e:	314a      	adds	r1, #74	; 0x4a
   2c6a0:	4622      	mov	r2, r4
   2c6a2:	e7d4      	b.n	2c64e <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c6a4:	210f      	movs	r1, #15
   2c6a6:	4638      	mov	r0, r7
   2c6a8:	f7ff fd6d 	bl	2c186 <atomic_test_bit>
   2c6ac:	b120      	cbz	r0, 2c6b8 <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2c6ae:	2202      	movs	r2, #2
   2c6b0:	2106      	movs	r1, #6
   2c6b2:	4620      	mov	r0, r4
   2c6b4:	f7df fa0a 	bl	bacc <bt_conn_security_changed>
	smp_reset(smp);
   2c6b8:	4628      	mov	r0, r5
   2c6ba:	f7ff fe94 	bl	2c3e6 <smp_reset>
	return false;
   2c6be:	2600      	movs	r6, #0
   2c6c0:	e79c      	b.n	2c5fc <bt_smp_request_ltk+0x74>
		return false;
   2c6c2:	4606      	mov	r6, r0
   2c6c4:	e79a      	b.n	2c5fc <bt_smp_request_ltk+0x74>

0002c6c6 <bt_smp_sign>:
   2c6c6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c6ca:	4770      	bx	lr

0002c6cc <bt_smp_start_security>:
{
   2c6cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
   2c6d0:	78c6      	ldrb	r6, [r0, #3]
{
   2c6d2:	4604      	mov	r4, r0
	switch (conn->role) {
   2c6d4:	b126      	cbz	r6, 2c6e0 <bt_smp_start_security+0x14>
   2c6d6:	2e01      	cmp	r6, #1
   2c6d8:	d03d      	beq.n	2c756 <bt_smp_start_security+0x8a>
		return -EINVAL;
   2c6da:	f06f 0415 	mvn.w	r4, #21
   2c6de:	e005      	b.n	2c6ec <bt_smp_start_security+0x20>
		smp = smp_chan_get(conn);
   2c6e0:	f7e2 fafc 	bl	ecdc <smp_chan_get>
		if (!smp) {
   2c6e4:	4605      	mov	r5, r0
   2c6e6:	b928      	cbnz	r0, 2c6f4 <bt_smp_start_security+0x28>
			return -ENOTCONN;
   2c6e8:	f06f 047f 	mvn.w	r4, #127	; 0x7f
}
   2c6ec:	4620      	mov	r0, r4
   2c6ee:	b003      	add	sp, #12
   2c6f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2c6f4:	1d06      	adds	r6, r0, #4
   2c6f6:	2103      	movs	r1, #3
   2c6f8:	4630      	mov	r0, r6
   2c6fa:	f7ff fd44 	bl	2c186 <atomic_test_bit>
   2c6fe:	b110      	cbz	r0, 2c706 <bt_smp_start_security+0x3a>
			return -EBUSY;
   2c700:	f06f 040f 	mvn.w	r4, #15
   2c704:	e7f2      	b.n	2c6ec <bt_smp_start_security+0x20>
		if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c706:	2101      	movs	r1, #1
   2c708:	4630      	mov	r0, r6
   2c70a:	f7ff fd3c 	bl	2c186 <atomic_test_bit>
   2c70e:	2800      	cmp	r0, #0
   2c710:	d1f6      	bne.n	2c700 <bt_smp_start_security+0x34>
		if (!smp_keys_check(conn)) {
   2c712:	4620      	mov	r0, r4
   2c714:	f7ff fd40 	bl	2c198 <smp_keys_check>
   2c718:	b928      	cbnz	r0, 2c726 <bt_smp_start_security+0x5a>
			return smp_send_pairing_req(conn);
   2c71a:	4620      	mov	r0, r4
}
   2c71c:	b003      	add	sp, #12
   2c71e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			return smp_send_pairing_req(conn);
   2c722:	f7e2 be3f 	b.w	f3a4 <smp_send_pairing_req>
						  conn->le.keys->ltk.rand,
   2c726:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
		err = bt_conn_le_start_encryption(conn,
   2c72a:	7b0b      	ldrb	r3, [r1, #12]
   2c72c:	9300      	str	r3, [sp, #0]
   2c72e:	f101 0218 	add.w	r2, r1, #24
   2c732:	f101 031a 	add.w	r3, r1, #26
   2c736:	4620      	mov	r0, r4
   2c738:	3110      	adds	r1, #16
   2c73a:	f7fe f8ca 	bl	2a8d2 <bt_conn_le_start_encryption>
		if (err) {
   2c73e:	4604      	mov	r4, r0
   2c740:	2800      	cmp	r0, #0
   2c742:	d1d3      	bne.n	2c6ec <bt_smp_start_security+0x20>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
   2c744:	210b      	movs	r1, #11
   2c746:	4628      	mov	r0, r5
   2c748:	f7ff fdb3 	bl	2c2b2 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   2c74c:	2101      	movs	r1, #1
   2c74e:	4630      	mov	r0, r6
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c750:	f7ff fdaf 	bl	2c2b2 <atomic_set_bit>
	return 0;
   2c754:	e7ca      	b.n	2c6ec <bt_smp_start_security+0x20>
	smp = smp_chan_get(conn);
   2c756:	f7e2 fac1 	bl	ecdc <smp_chan_get>
	if (!smp) {
   2c75a:	4605      	mov	r5, r0
   2c75c:	2800      	cmp	r0, #0
   2c75e:	d0c3      	beq.n	2c6e8 <bt_smp_start_security+0x1c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2c760:	f100 0804 	add.w	r8, r0, #4
   2c764:	2104      	movs	r1, #4
   2c766:	4640      	mov	r0, r8
   2c768:	f7ff fd0d 	bl	2c186 <atomic_test_bit>
   2c76c:	2800      	cmp	r0, #0
   2c76e:	d150      	bne.n	2c812 <bt_smp_start_security+0x146>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   2c770:	2103      	movs	r1, #3
   2c772:	4640      	mov	r0, r8
   2c774:	f7ff fd07 	bl	2c186 <atomic_test_bit>
   2c778:	2800      	cmp	r0, #0
   2c77a:	d1c1      	bne.n	2c700 <bt_smp_start_security+0x34>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2c77c:	4631      	mov	r1, r6
   2c77e:	4640      	mov	r0, r8
   2c780:	f7ff fd01 	bl	2c186 <atomic_test_bit>
   2c784:	2800      	cmp	r0, #0
   2c786:	d1bb      	bne.n	2c700 <bt_smp_start_security+0x34>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2c788:	7aa0      	ldrb	r0, [r4, #10]
   2c78a:	f7e2 fb79 	bl	ee80 <sec_level_reachable.isra.0>
   2c78e:	b168      	cbz	r0, 2c7ac <bt_smp_start_security+0xe0>
	if (!conn->le.keys) {
   2c790:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   2c794:	b983      	cbnz	r3, 2c7b8 <bt_smp_start_security+0xec>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   2c796:	7a20      	ldrb	r0, [r4, #8]
   2c798:	f104 0188 	add.w	r1, r4, #136	; 0x88
   2c79c:	f7e4 f9f0 	bl	10b80 <bt_keys_get_addr>
   2c7a0:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   2c7a4:	b940      	cbnz	r0, 2c7b8 <bt_smp_start_security+0xec>
			return -ENOMEM;
   2c7a6:	f06f 040b 	mvn.w	r4, #11
   2c7aa:	e79f      	b.n	2c6ec <bt_smp_start_security+0x20>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
   2c7ac:	4620      	mov	r0, r4
   2c7ae:	f7ff fcf3 	bl	2c198 <smp_keys_check>
   2c7b2:	2800      	cmp	r0, #0
   2c7b4:	d1ec      	bne.n	2c790 <bt_smp_start_security+0xc4>
   2c7b6:	e790      	b.n	2c6da <bt_smp_start_security+0xe>
	if (smp_init(smp) != 0) {
   2c7b8:	4628      	mov	r0, r5
   2c7ba:	f7e2 fc15 	bl	efe8 <smp_init>
   2c7be:	4607      	mov	r7, r0
   2c7c0:	b110      	cbz	r0, 2c7c8 <bt_smp_start_security+0xfc>
		return -ENOBUFS;
   2c7c2:	f06f 0468 	mvn.w	r4, #104	; 0x68
   2c7c6:	e791      	b.n	2c6ec <bt_smp_start_security+0x20>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
   2c7c8:	210b      	movs	r1, #11
   2c7ca:	4628      	mov	r0, r5
   2c7cc:	f7ff fd96 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!req_buf) {
   2c7d0:	4606      	mov	r6, r0
   2c7d2:	2800      	cmp	r0, #0
   2c7d4:	d0f5      	beq.n	2c7c2 <bt_smp_start_security+0xf6>
   2c7d6:	2101      	movs	r1, #1
   2c7d8:	3008      	adds	r0, #8
   2c7da:	f000 f976 	bl	2caca <net_buf_simple_add>
   2c7de:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
   2c7e0:	2009      	movs	r0, #9
   2c7e2:	f7e2 fa37 	bl	ec54 <get_auth.constprop.0>
   2c7e6:	463b      	mov	r3, r7
   2c7e8:	f889 0000 	strb.w	r0, [r9]
   2c7ec:	4632      	mov	r2, r6
   2c7ee:	4620      	mov	r0, r4
   2c7f0:	9700      	str	r7, [sp, #0]
   2c7f2:	2106      	movs	r1, #6
   2c7f4:	f7fe f9f5 	bl	2abe2 <bt_l2cap_send_cb>
	if (err) {
   2c7f8:	4604      	mov	r4, r0
   2c7fa:	b118      	cbz	r0, 2c804 <bt_smp_start_security+0x138>
		net_buf_unref(req_buf);
   2c7fc:	4630      	mov	r0, r6
   2c7fe:	f7f4 f917 	bl	20a30 <net_buf_unref>
		return err;
   2c802:	e773      	b.n	2c6ec <bt_smp_start_security+0x20>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
   2c804:	210f      	movs	r1, #15
   2c806:	4640      	mov	r0, r8
   2c808:	f7ff fd53 	bl	2c2b2 <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   2c80c:	2101      	movs	r1, #1
   2c80e:	4628      	mov	r0, r5
   2c810:	e79e      	b.n	2c750 <bt_smp_start_security+0x84>
		return -EIO;
   2c812:	f06f 0404 	mvn.w	r4, #4
   2c816:	e769      	b.n	2c6ec <bt_smp_start_security+0x20>

0002c818 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c818:	1d03      	adds	r3, r0, #4
{
   2c81a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2c81c:	4605      	mov	r5, r0
   2c81e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c820:	4618      	mov	r0, r3
   2c822:	2103      	movs	r1, #3
   2c824:	f7ff fcaf 	bl	2c186 <atomic_test_bit>
   2c828:	b1f0      	cbz	r0, 2c868 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   2c82a:	4631      	mov	r1, r6
   2c82c:	4628      	mov	r0, r5
   2c82e:	f7e3 fde5 	bl	103fc <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   2c832:	2105      	movs	r1, #5
   2c834:	4628      	mov	r0, r5
   2c836:	f7ff fd61 	bl	2c2fc <smp_create_pdu.constprop.0>
	if (!buf) {
   2c83a:	4604      	mov	r4, r0
   2c83c:	b308      	cbz	r0, 2c882 <smp_error+0x6a>
   2c83e:	2101      	movs	r1, #1
   2c840:	3008      	adds	r0, #8
   2c842:	f000 f942 	bl	2caca <net_buf_simple_add>
	rsp->reason = reason;
   2c846:	7006      	strb	r6, [r0, #0]
   2c848:	2600      	movs	r6, #0
   2c84a:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   2c84e:	9600      	str	r6, [sp, #0]
   2c850:	4633      	mov	r3, r6
   2c852:	4622      	mov	r2, r4
   2c854:	2106      	movs	r1, #6
   2c856:	f7fe f9c4 	bl	2abe2 <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   2c85a:	b118      	cbz	r0, 2c864 <smp_error+0x4c>
		net_buf_unref(buf);
   2c85c:	4620      	mov	r0, r4
   2c85e:	f7f4 f8e7 	bl	20a30 <net_buf_unref>
	return 0;
   2c862:	4630      	mov	r0, r6
}
   2c864:	b002      	add	sp, #8
   2c866:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c868:	2101      	movs	r1, #1
   2c86a:	4618      	mov	r0, r3
   2c86c:	f7ff fc8b 	bl	2c186 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c870:	2800      	cmp	r0, #0
   2c872:	d1da      	bne.n	2c82a <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c874:	210f      	movs	r1, #15
   2c876:	4618      	mov	r0, r3
   2c878:	f7ff fc85 	bl	2c186 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c87c:	2800      	cmp	r0, #0
   2c87e:	d1d4      	bne.n	2c82a <smp_error+0x12>
   2c880:	e7d7      	b.n	2c832 <smp_error+0x1a>
		return -ENOBUFS;
   2c882:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2c886:	e7ed      	b.n	2c864 <smp_error+0x4c>

0002c888 <bt_smp_dhkey_ready>:
{
   2c888:	b570      	push	{r4, r5, r6, lr}
   2c88a:	4605      	mov	r5, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   2c88c:	2008      	movs	r0, #8
   2c88e:	f7e2 fb27 	bl	eee0 <smp_find>
	if (smp) {
   2c892:	4604      	mov	r4, r0
   2c894:	b1e8      	cbz	r0, 2c8d2 <bt_smp_dhkey_ready+0x4a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2c896:	1d06      	adds	r6, r0, #4
   2c898:	2108      	movs	r1, #8
   2c89a:	4630      	mov	r0, r6
   2c89c:	f7ff fb80 	bl	2bfa0 <atomic_clear_bit>
	if (!dhkey) {
   2c8a0:	2d00      	cmp	r5, #0
   2c8a2:	d03d      	beq.n	2c920 <bt_smp_dhkey_ready+0x98>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2c8a4:	2107      	movs	r1, #7
   2c8a6:	f7ff fb7b 	bl	2bfa0 <atomic_clear_bit>
   2c8aa:	4628      	mov	r0, r5
   2c8ac:	f104 0397 	add.w	r3, r4, #151	; 0x97
   2c8b0:	f105 0220 	add.w	r2, r5, #32
   2c8b4:	f850 1b04 	ldr.w	r1, [r0], #4
   2c8b8:	f843 1b04 	str.w	r1, [r3], #4
   2c8bc:	4290      	cmp	r0, r2
   2c8be:	d1f9      	bne.n	2c8b4 <bt_smp_dhkey_ready+0x2c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2c8c0:	210a      	movs	r1, #10
   2c8c2:	4630      	mov	r0, r6
   2c8c4:	f7ff fc5f 	bl	2c186 <atomic_test_bit>
   2c8c8:	b168      	cbz	r0, 2c8e6 <bt_smp_dhkey_ready+0x5e>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8ca:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8cc:	4630      	mov	r0, r6
   2c8ce:	f7ff fcf0 	bl	2c2b2 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   2c8d2:	2007      	movs	r0, #7
   2c8d4:	f7e2 fb04 	bl	eee0 <smp_find>
		if (smp) {
   2c8d8:	4604      	mov	r4, r0
   2c8da:	b118      	cbz	r0, 2c8e4 <bt_smp_dhkey_ready+0x5c>
			err = smp_dhkey_generate(smp);
   2c8dc:	f7e2 fba0 	bl	f020 <smp_dhkey_generate>
			if (err) {
   2c8e0:	4601      	mov	r1, r0
   2c8e2:	b9b0      	cbnz	r0, 2c912 <bt_smp_dhkey_ready+0x8a>
}
   2c8e4:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c8e6:	2110      	movs	r1, #16
   2c8e8:	4630      	mov	r0, r6
   2c8ea:	f7ff fc4c 	bl	2c186 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2c8ee:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2c8f0:	2800      	cmp	r0, #0
   2c8f2:	d1eb      	bne.n	2c8cc <bt_smp_dhkey_ready+0x44>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2c8f4:	4630      	mov	r0, r6
   2c8f6:	f7ff fc46 	bl	2c186 <atomic_test_bit>
   2c8fa:	2800      	cmp	r0, #0
   2c8fc:	d0e9      	beq.n	2c8d2 <bt_smp_dhkey_ready+0x4a>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c8fe:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   2c902:	78db      	ldrb	r3, [r3, #3]
			return compute_and_send_central_dhcheck(smp);
   2c904:	4620      	mov	r0, r4
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_CENTRAL) {
   2c906:	b943      	cbnz	r3, 2c91a <bt_smp_dhkey_ready+0x92>
			return compute_and_send_central_dhcheck(smp);
   2c908:	f7e3 f900 	bl	fb0c <compute_and_send_central_dhcheck>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2c90c:	4601      	mov	r1, r0
		if (err) {
   2c90e:	2800      	cmp	r0, #0
   2c910:	d0df      	beq.n	2c8d2 <bt_smp_dhkey_ready+0x4a>
			smp_error(smp, err);
   2c912:	4620      	mov	r0, r4
   2c914:	f7ff ff80 	bl	2c818 <smp_error>
   2c918:	e7db      	b.n	2c8d2 <bt_smp_dhkey_ready+0x4a>
		return  compute_and_check_and_send_periph_dhcheck(smp);
   2c91a:	f7e3 f973 	bl	fc04 <compute_and_check_and_send_periph_dhcheck>
   2c91e:	e7f5      	b.n	2c90c <bt_smp_dhkey_ready+0x84>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2c920:	210b      	movs	r1, #11
   2c922:	e7f6      	b.n	2c912 <bt_smp_dhkey_ready+0x8a>

0002c924 <bt_smp_disconnected>:
{
   2c924:	b570      	push	{r4, r5, r6, lr}
   2c926:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   2c928:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   2c92c:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c930:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   2c932:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   2c936:	f001 fac4 	bl	2dec2 <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c93a:	2103      	movs	r1, #3
   2c93c:	4620      	mov	r0, r4
   2c93e:	f7ff fc22 	bl	2c186 <atomic_test_bit>
   2c942:	b1a0      	cbz	r0, 2c96e <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2c944:	2108      	movs	r1, #8
   2c946:	4630      	mov	r0, r6
   2c948:	f7e3 fd58 	bl	103fc <smp_pairing_complete>
	if (keys) {
   2c94c:	b13d      	cbz	r5, 2c95e <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   2c94e:	89eb      	ldrh	r3, [r5, #14]
   2c950:	b113      	cbz	r3, 2c958 <bt_smp_disconnected+0x34>
   2c952:	7b6b      	ldrb	r3, [r5, #13]
   2c954:	079b      	lsls	r3, r3, #30
   2c956:	d502      	bpl.n	2c95e <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   2c958:	4628      	mov	r0, r5
   2c95a:	f000 f83f 	bl	2c9dc <bt_keys_clear>
__ssp_bos_icheck3(memset, void *, int)
   2c95e:	4630      	mov	r0, r6
   2c960:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   2c964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2c968:	2100      	movs	r1, #0
   2c96a:	f001 be1d 	b.w	2e5a8 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c96e:	2101      	movs	r1, #1
   2c970:	4620      	mov	r0, r4
   2c972:	f7ff fc08 	bl	2c186 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2c976:	2800      	cmp	r0, #0
   2c978:	d1e4      	bne.n	2c944 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   2c97a:	210f      	movs	r1, #15
   2c97c:	4620      	mov	r0, r4
   2c97e:	f7ff fc02 	bl	2c186 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2c982:	2800      	cmp	r0, #0
   2c984:	d1de      	bne.n	2c944 <bt_smp_disconnected+0x20>
   2c986:	e7e1      	b.n	2c94c <bt_smp_disconnected+0x28>

0002c988 <smp_ident_sent>:
{
   2c988:	b508      	push	{r3, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   2c98a:	7883      	ldrb	r3, [r0, #2]
   2c98c:	2b01      	cmp	r3, #1
   2c98e:	d110      	bne.n	2c9b2 <smp_ident_sent+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2c990:	2106      	movs	r1, #6
   2c992:	f7fe f95d 	bl	2ac50 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2c996:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   2c99a:	f023 0301 	bic.w	r3, r3, #1
   2c99e:	f800 3c08 	strb.w	r3, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   2c9a2:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   2c9a6:	b921      	cbnz	r1, 2c9b2 <smp_ident_sent+0x2a>
}
   2c9a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			smp_pairing_complete(smp, 0);
   2c9ac:	38f0      	subs	r0, #240	; 0xf0
   2c9ae:	f7e3 bd25 	b.w	103fc <smp_pairing_complete>
}
   2c9b2:	bd08      	pop	{r3, pc}

0002c9b4 <bt_keys_get_type>:
{
   2c9b4:	b570      	push	{r4, r5, r6, lr}
   2c9b6:	4604      	mov	r4, r0
   2c9b8:	460d      	mov	r5, r1
   2c9ba:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   2c9bc:	f7e4 f91e 	bl	10bfc <bt_keys_find>
	if (keys) {
   2c9c0:	b938      	cbnz	r0, 2c9d2 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   2c9c2:	4631      	mov	r1, r6
   2c9c4:	4628      	mov	r0, r5
   2c9c6:	f7e4 f8db 	bl	10b80 <bt_keys_get_addr>
	if (!keys) {
   2c9ca:	b110      	cbz	r0, 2c9d2 <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   2c9cc:	89c3      	ldrh	r3, [r0, #14]
   2c9ce:	431c      	orrs	r4, r3
   2c9d0:	81c4      	strh	r4, [r0, #14]
}
   2c9d2:	bd70      	pop	{r4, r5, r6, pc}

0002c9d4 <bt_keys_add_type>:
	keys->keys |= type;
   2c9d4:	89c3      	ldrh	r3, [r0, #14]
   2c9d6:	4319      	orrs	r1, r3
   2c9d8:	81c1      	strh	r1, [r0, #14]
}
   2c9da:	4770      	bx	lr

0002c9dc <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   2c9dc:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   2c9de:	7a03      	ldrb	r3, [r0, #8]
   2c9e0:	075b      	lsls	r3, r3, #29
{
   2c9e2:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2c9e4:	d501      	bpl.n	2c9ea <bt_keys_clear+0xe>
		bt_id_del(keys);
   2c9e6:	f7dd fb45 	bl	a074 <bt_id_del>
   2c9ea:	4620      	mov	r0, r4
   2c9ec:	225c      	movs	r2, #92	; 0x5c
		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
}
   2c9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c9f2:	2100      	movs	r1, #0
   2c9f4:	f001 bdd8 	b.w	2e5a8 <memset>

0002c9f8 <fixed_data_unref>:
}
   2c9f8:	4770      	bx	lr

0002c9fa <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c9fa:	6a41      	ldr	r1, [r0, #36]	; 0x24
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c9fc:	6849      	ldr	r1, [r1, #4]
   2c9fe:	6809      	ldr	r1, [r1, #0]
   2ca00:	f7f3 bf82 	b.w	20908 <net_buf_alloc_len>

0002ca04 <net_buf_get>:
{
   2ca04:	b570      	push	{r4, r5, r6, lr}
   2ca06:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2ca08:	f7f8 f926 	bl	24c58 <z_impl_k_queue_get>
	if (!buf) {
   2ca0c:	4605      	mov	r5, r0
   2ca0e:	b128      	cbz	r0, 2ca1c <net_buf_get+0x18>
   2ca10:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2ca12:	7963      	ldrb	r3, [r4, #5]
   2ca14:	f013 0301 	ands.w	r3, r3, #1
   2ca18:	d102      	bne.n	2ca20 <net_buf_get+0x1c>
	frag->frags = NULL;
   2ca1a:	6023      	str	r3, [r4, #0]
}
   2ca1c:	4628      	mov	r0, r5
   2ca1e:	bd70      	pop	{r4, r5, r6, pc}
   2ca20:	2300      	movs	r3, #0
   2ca22:	2200      	movs	r2, #0
   2ca24:	4630      	mov	r0, r6
   2ca26:	f7f8 f917 	bl	24c58 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2ca2a:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2ca2c:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2ca2e:	f023 0301 	bic.w	r3, r3, #1
   2ca32:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2ca34:	4604      	mov	r4, r0
   2ca36:	e7ec      	b.n	2ca12 <net_buf_get+0xe>

0002ca38 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2ca38:	b292      	uxth	r2, r2
	buf->__buf = data;
   2ca3a:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2ca3c:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2ca3e:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2ca40:	8082      	strh	r2, [r0, #4]
}
   2ca42:	4770      	bx	lr

0002ca44 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2ca44:	6883      	ldr	r3, [r0, #8]
   2ca46:	440b      	add	r3, r1
   2ca48:	6003      	str	r3, [r0, #0]
}
   2ca4a:	4770      	bx	lr

0002ca4c <net_buf_put>:
{
   2ca4c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2ca4e:	460a      	mov	r2, r1
   2ca50:	6814      	ldr	r4, [r2, #0]
   2ca52:	b914      	cbnz	r4, 2ca5a <net_buf_put+0xe>
}
   2ca54:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2ca56:	f001 b946 	b.w	2dce6 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2ca5a:	7953      	ldrb	r3, [r2, #5]
   2ca5c:	f043 0301 	orr.w	r3, r3, #1
   2ca60:	7153      	strb	r3, [r2, #5]
   2ca62:	4622      	mov	r2, r4
   2ca64:	e7f4      	b.n	2ca50 <net_buf_put+0x4>

0002ca66 <net_buf_ref>:
	buf->ref++;
   2ca66:	7902      	ldrb	r2, [r0, #4]
   2ca68:	3201      	adds	r2, #1
   2ca6a:	7102      	strb	r2, [r0, #4]
}
   2ca6c:	4770      	bx	lr

0002ca6e <net_buf_frag_last>:
{
   2ca6e:	4603      	mov	r3, r0
	while (buf->frags) {
   2ca70:	4618      	mov	r0, r3
   2ca72:	681b      	ldr	r3, [r3, #0]
   2ca74:	2b00      	cmp	r3, #0
   2ca76:	d1fb      	bne.n	2ca70 <net_buf_frag_last+0x2>
}
   2ca78:	4770      	bx	lr

0002ca7a <net_buf_frag_insert>:
	if (parent->frags) {
   2ca7a:	6802      	ldr	r2, [r0, #0]
{
   2ca7c:	b510      	push	{r4, lr}
	if (parent->frags) {
   2ca7e:	b12a      	cbz	r2, 2ca8c <net_buf_frag_insert+0x12>
   2ca80:	460b      	mov	r3, r1
	while (buf->frags) {
   2ca82:	461c      	mov	r4, r3
   2ca84:	681b      	ldr	r3, [r3, #0]
   2ca86:	2b00      	cmp	r3, #0
   2ca88:	d1fb      	bne.n	2ca82 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2ca8a:	6022      	str	r2, [r4, #0]
	parent->frags = frag;
   2ca8c:	6001      	str	r1, [r0, #0]
}
   2ca8e:	bd10      	pop	{r4, pc}

0002ca90 <net_buf_frag_add>:
{
   2ca90:	b510      	push	{r4, lr}
	if (!head) {
   2ca92:	4604      	mov	r4, r0
   2ca94:	b920      	cbnz	r0, 2caa0 <net_buf_frag_add+0x10>
	buf->ref++;
   2ca96:	790b      	ldrb	r3, [r1, #4]
   2ca98:	3301      	adds	r3, #1
   2ca9a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2ca9c:	4608      	mov	r0, r1
}
   2ca9e:	bd10      	pop	{r4, pc}
   2caa0:	4603      	mov	r3, r0
	while (buf->frags) {
   2caa2:	4618      	mov	r0, r3
   2caa4:	681b      	ldr	r3, [r3, #0]
   2caa6:	2b00      	cmp	r3, #0
   2caa8:	d1fb      	bne.n	2caa2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2caaa:	f7ff ffe6 	bl	2ca7a <net_buf_frag_insert>
   2caae:	4620      	mov	r0, r4
   2cab0:	e7f5      	b.n	2ca9e <net_buf_frag_add+0xe>

0002cab2 <net_buf_frag_del>:
{
   2cab2:	b510      	push	{r4, lr}
	if (parent) {
   2cab4:	b108      	cbz	r0, 2caba <net_buf_frag_del+0x8>
		parent->frags = frag->frags;
   2cab6:	680b      	ldr	r3, [r1, #0]
   2cab8:	6003      	str	r3, [r0, #0]
	next_frag = frag->frags;
   2caba:	680c      	ldr	r4, [r1, #0]
	frag->frags = NULL;
   2cabc:	2300      	movs	r3, #0
	net_buf_unref(frag);
   2cabe:	4608      	mov	r0, r1
	frag->frags = NULL;
   2cac0:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2cac2:	f7f3 ffb5 	bl	20a30 <net_buf_unref>
}
   2cac6:	4620      	mov	r0, r4
   2cac8:	bd10      	pop	{r4, pc}

0002caca <net_buf_simple_add>:
	return buf->data + buf->len;
   2caca:	8883      	ldrh	r3, [r0, #4]
   2cacc:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2cace:	4419      	add	r1, r3
   2cad0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2cad2:	18d0      	adds	r0, r2, r3
   2cad4:	4770      	bx	lr

0002cad6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2cad6:	b430      	push	{r4, r5}
   2cad8:	8884      	ldrh	r4, [r0, #4]
   2cada:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2cadc:	18a3      	adds	r3, r4, r2
   2cade:	8083      	strh	r3, [r0, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2cae0:	1928      	adds	r0, r5, r4
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
}
   2cae2:	bc30      	pop	{r4, r5}
   2cae4:	f001 bd3f 	b.w	2e566 <memcpy>

0002cae8 <net_buf_simple_add_u8>:
   2cae8:	8883      	ldrh	r3, [r0, #4]
   2caea:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2caec:	b510      	push	{r4, lr}
	buf->len += len;
   2caee:	1c5c      	adds	r4, r3, #1
   2caf0:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2caf2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2caf4:	18d0      	adds	r0, r2, r3
   2caf6:	bd10      	pop	{r4, pc}

0002caf8 <net_buf_simple_add_le16>:
   2caf8:	8883      	ldrh	r3, [r0, #4]
   2cafa:	6802      	ldr	r2, [r0, #0]

void net_buf_simple_add_le16(struct net_buf_simple *buf, uint16_t val)
{
   2cafc:	b530      	push	{r4, r5, lr}
   2cafe:	18d4      	adds	r4, r2, r3
	buf->len += len;
   2cb00:	1c9d      	adds	r5, r3, #2
   2cb02:	8085      	strh	r5, [r0, #4]
	dst[0] = val;
   2cb04:	54d1      	strb	r1, [r2, r3]
	dst[1] = val >> 8;
   2cb06:	0a09      	lsrs	r1, r1, #8
   2cb08:	7061      	strb	r1, [r4, #1]
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
}
   2cb0a:	bd30      	pop	{r4, r5, pc}

0002cb0c <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2cb0c:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2cb0e:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2cb10:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2cb12:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2cb14:	4411      	add	r1, r2
	buf->data -= len;
   2cb16:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2cb18:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2cb1a:	4770      	bx	lr

0002cb1c <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2cb1c:	8882      	ldrh	r2, [r0, #4]
   2cb1e:	1a52      	subs	r2, r2, r1
{
   2cb20:	4603      	mov	r3, r0
	buf->len -= len;
   2cb22:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2cb24:	6800      	ldr	r0, [r0, #0]
   2cb26:	4408      	add	r0, r1
   2cb28:	6018      	str	r0, [r3, #0]
}
   2cb2a:	4770      	bx	lr

0002cb2c <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2cb2c:	4603      	mov	r3, r0
	void *data = buf->data;
   2cb2e:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2cb30:	889a      	ldrh	r2, [r3, #4]
   2cb32:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2cb34:	4401      	add	r1, r0
	buf->len -= len;
   2cb36:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2cb38:	6019      	str	r1, [r3, #0]

	return data;
}
   2cb3a:	4770      	bx	lr

0002cb3c <net_buf_simple_pull_u8>:

uint8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   2cb3c:	b510      	push	{r4, lr}
	uint8_t val;

	val = buf->data[0];
   2cb3e:	6803      	ldr	r3, [r0, #0]
   2cb40:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2cb42:	2101      	movs	r1, #1
   2cb44:	f7ff ffea 	bl	2cb1c <net_buf_simple_pull>

	return val;
}
   2cb48:	4620      	mov	r0, r4
   2cb4a:	bd10      	pop	{r4, pc}

0002cb4c <net_buf_simple_pull_le16>:

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2cb4c:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2cb4e:	6803      	ldr	r3, [r0, #0]
   2cb50:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2cb52:	2102      	movs	r1, #2
   2cb54:	f7ff ffe2 	bl	2cb1c <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2cb58:	4620      	mov	r0, r4
   2cb5a:	bd10      	pop	{r4, pc}

0002cb5c <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2cb5c:	6802      	ldr	r2, [r0, #0]
   2cb5e:	6880      	ldr	r0, [r0, #8]
}
   2cb60:	1a10      	subs	r0, r2, r0
   2cb62:	4770      	bx	lr

0002cb64 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2cb64:	8883      	ldrh	r3, [r0, #4]
   2cb66:	88c2      	ldrh	r2, [r0, #6]
   2cb68:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2cb6a:	6803      	ldr	r3, [r0, #0]
   2cb6c:	6880      	ldr	r0, [r0, #8]
   2cb6e:	1a18      	subs	r0, r3, r0
}
   2cb70:	1a10      	subs	r0, r2, r0
   2cb72:	4770      	bx	lr

0002cb74 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   2cb74:	6903      	ldr	r3, [r0, #16]
   2cb76:	b2c9      	uxtb	r1, r1
   2cb78:	220c      	movs	r2, #12
   2cb7a:	fb01 3302 	mla	r3, r1, r2, r3
   2cb7e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   2cb80:	f000 0007 	and.w	r0, r0, #7
   2cb84:	4770      	bx	lr

0002cb86 <set_on_state>:
	__asm__ volatile(
   2cb86:	f04f 0320 	mov.w	r3, #32
   2cb8a:	f3ef 8211 	mrs	r2, BASEPRI
   2cb8e:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb92:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2cb96:	6803      	ldr	r3, [r0, #0]
   2cb98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2cb9c:	f043 0302 	orr.w	r3, r3, #2
   2cba0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2cba2:	f382 8811 	msr	BASEPRI, r2
   2cba6:	f3bf 8f6f 	isb	sy
}
   2cbaa:	4770      	bx	lr

0002cbac <stop>:
{
   2cbac:	4603      	mov	r3, r0
   2cbae:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   2cbb0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   2cbb2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2cbb4:	f04f 0420 	mov.w	r4, #32
   2cbb8:	f3ef 8611 	mrs	r6, BASEPRI
   2cbbc:	f384 8812 	msr	BASEPRI_MAX, r4
   2cbc0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cbc4:	250c      	movs	r5, #12
   2cbc6:	fb05 0401 	mla	r4, r5, r1, r0
   2cbca:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2cbcc:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   2cbd0:	d001      	beq.n	2cbd6 <stop+0x2a>
   2cbd2:	42a2      	cmp	r2, r4
   2cbd4:	d111      	bne.n	2cbfa <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2cbd6:	fb05 0001 	mla	r0, r5, r1, r0
   2cbda:	2201      	movs	r2, #1
   2cbdc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   2cbde:	2000      	movs	r0, #0
	__asm__ volatile(
   2cbe0:	f386 8811 	msr	BASEPRI, r6
   2cbe4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2cbe8:	b930      	cbnz	r0, 2cbf8 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   2cbea:	685b      	ldr	r3, [r3, #4]
   2cbec:	220c      	movs	r2, #12
   2cbee:	fb02 3101 	mla	r1, r2, r1, r3
   2cbf2:	684b      	ldr	r3, [r1, #4]
   2cbf4:	4798      	blx	r3
	return 0;
   2cbf6:	2000      	movs	r0, #0
}
   2cbf8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   2cbfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2cbfe:	e7ef      	b.n	2cbe0 <stop+0x34>

0002cc00 <api_stop>:
	return stop(dev, subsys, CTX_API);
   2cc00:	2280      	movs	r2, #128	; 0x80
   2cc02:	f7ff bfd3 	b.w	2cbac <stop>

0002cc06 <async_start>:
{
   2cc06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cc08:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   2cc0a:	6904      	ldr	r4, [r0, #16]
{
   2cc0c:	4605      	mov	r5, r0
   2cc0e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2cc10:	f04f 0020 	mov.w	r0, #32
   2cc14:	f3ef 8c11 	mrs	ip, BASEPRI
   2cc18:	f380 8812 	msr	BASEPRI_MAX, r0
   2cc1c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2cc20:	260c      	movs	r6, #12
   2cc22:	fb06 4601 	mla	r6, r6, r1, r4
   2cc26:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2cc28:	f000 0e07 	and.w	lr, r0, #7
   2cc2c:	f1be 0f01 	cmp.w	lr, #1
   2cc30:	d110      	bne.n	2cc54 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2cc32:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   2cc34:	2600      	movs	r6, #0
	__asm__ volatile(
   2cc36:	f38c 8811 	msr	BASEPRI, ip
   2cc3a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2cc3e:	b93e      	cbnz	r6, 2cc50 <async_start+0x4a>
	subdata->cb = cb;
   2cc40:	200c      	movs	r0, #12
   2cc42:	4341      	muls	r1, r0
   2cc44:	440c      	add	r4, r1
	subdata->user_data = user_data;
   2cc46:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2cc4a:	686b      	ldr	r3, [r5, #4]
   2cc4c:	585b      	ldr	r3, [r3, r1]
   2cc4e:	4798      	blx	r3
}
   2cc50:	4630      	mov	r0, r6
   2cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2cc54:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   2cc58:	4287      	cmp	r7, r0
   2cc5a:	bf14      	ite	ne
   2cc5c:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   2cc60:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   2cc64:	e7e7      	b.n	2cc36 <async_start+0x30>

0002cc66 <api_start>:
{
   2cc66:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   2cc68:	2480      	movs	r4, #128	; 0x80
   2cc6a:	9400      	str	r4, [sp, #0]
   2cc6c:	f7ff ffcb 	bl	2cc06 <async_start>
}
   2cc70:	b002      	add	sp, #8
   2cc72:	bd10      	pop	{r4, pc}

0002cc74 <onoff_started_callback>:
	return &data->mgr[type];
   2cc74:	6900      	ldr	r0, [r0, #16]
{
   2cc76:	b410      	push	{r4}
	return &data->mgr[type];
   2cc78:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2cc7a:	241c      	movs	r4, #28
   2cc7c:	fb03 0004 	mla	r0, r3, r4, r0
   2cc80:	2100      	movs	r1, #0
}
   2cc82:	bc10      	pop	{r4}
	notify(mgr, 0);
   2cc84:	4710      	bx	r2

0002cc86 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2cc86:	2000      	movs	r0, #0
   2cc88:	f7f6 bb38 	b.w	232fc <nrfx_clock_stop>

0002cc8c <blocking_start_callback>:
{
   2cc8c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2cc8e:	f7f8 b817 	b.w	24cc0 <z_impl_k_sem_give>

0002cc92 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cc92:	6843      	ldr	r3, [r0, #4]
   2cc94:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2cc96:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2cc9a:	600b      	str	r3, [r1, #0]
}
   2cc9c:	2000      	movs	r0, #0
   2cc9e:	4770      	bx	lr

0002cca0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2cca0:	6843      	ldr	r3, [r0, #4]
   2cca2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2cca4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2cca8:	4042      	eors	r2, r0
   2ccaa:	400a      	ands	r2, r1
   2ccac:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2ccae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2ccb2:	2000      	movs	r0, #0
   2ccb4:	4770      	bx	lr

0002ccb6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ccb6:	6843      	ldr	r3, [r0, #4]
   2ccb8:	685b      	ldr	r3, [r3, #4]
}
   2ccba:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2ccbc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2ccc0:	4770      	bx	lr

0002ccc2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ccc2:	6843      	ldr	r3, [r0, #4]
   2ccc4:	685b      	ldr	r3, [r3, #4]
}
   2ccc6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2ccc8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2cccc:	4770      	bx	lr

0002ccce <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2ccce:	6843      	ldr	r3, [r0, #4]
   2ccd0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2ccd2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2ccd6:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2ccd8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2ccdc:	2000      	movs	r0, #0
   2ccde:	4770      	bx	lr

0002cce0 <gpio_nrfx_manage_callback>:
	return port->data;
   2cce0:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2cce2:	6858      	ldr	r0, [r3, #4]
{
   2cce4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   2cce6:	b158      	cbz	r0, 2cd00 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cce8:	2400      	movs	r4, #0
   2ccea:	4281      	cmp	r1, r0
   2ccec:	d112      	bne.n	2cd14 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2ccee:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2ccf0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2ccf2:	b954      	cbnz	r4, 2cd0a <gpio_nrfx_manage_callback+0x2a>
   2ccf4:	428d      	cmp	r5, r1
	list->head = node;
   2ccf6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2ccf8:	d100      	bne.n	2ccfc <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2ccfa:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2ccfc:	2000      	movs	r0, #0
   2ccfe:	6008      	str	r0, [r1, #0]
	if (set) {
   2cd00:	b96a      	cbnz	r2, 2cd1e <gpio_nrfx_manage_callback+0x3e>
	return 0;
   2cd02:	2000      	movs	r0, #0
}
   2cd04:	bd30      	pop	{r4, r5, pc}
   2cd06:	4628      	mov	r0, r5
   2cd08:	e7ef      	b.n	2ccea <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2cd0a:	428d      	cmp	r5, r1
	parent->next = child;
   2cd0c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2cd0e:	bf08      	it	eq
   2cd10:	609c      	streq	r4, [r3, #8]
}
   2cd12:	e7f3      	b.n	2ccfc <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2cd14:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2cd16:	4604      	mov	r4, r0
   2cd18:	2d00      	cmp	r5, #0
   2cd1a:	d1f4      	bne.n	2cd06 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2cd1c:	b13a      	cbz	r2, 2cd2e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2cd1e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2cd20:	685a      	ldr	r2, [r3, #4]
   2cd22:	600a      	str	r2, [r1, #0]
	list->head = node;
   2cd24:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2cd26:	2800      	cmp	r0, #0
   2cd28:	d1eb      	bne.n	2cd02 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2cd2a:	6099      	str	r1, [r3, #8]
}
   2cd2c:	e7ea      	b.n	2cd04 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2cd2e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2cd32:	e7e7      	b.n	2cd04 <gpio_nrfx_manage_callback+0x24>

0002cd34 <pin_interrupt_configure>:
		return -ENOTSUP;
   2cd34:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
}
   2cd38:	bf14      	ite	ne
   2cd3a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
   2cd3e:	2000      	moveq	r0, #0
   2cd40:	4770      	bx	lr

0002cd42 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2cd42:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2cd44:	ab0a      	add	r3, sp, #40	; 0x28
   2cd46:	9305      	str	r3, [sp, #20]
   2cd48:	9302      	str	r3, [sp, #8]
   2cd4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2cd4c:	9301      	str	r3, [sp, #4]
   2cd4e:	2300      	movs	r3, #0
   2cd50:	9300      	str	r3, [sp, #0]
   2cd52:	4618      	mov	r0, r3
   2cd54:	f7da f8ac 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2cd58:	b007      	add	sp, #28
   2cd5a:	f85d fb04 	ldr.w	pc, [sp], #4

0002cd5e <k_sem_take.constprop.0.isra.0>:
	return z_impl_k_sem_take(sem, timeout);
   2cd5e:	f7f7 bfd5 	b.w	24d0c <z_impl_k_sem_take>

0002cd62 <i2c_write>:
{
   2cd62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   2cd64:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2cd68:	2202      	movs	r2, #2
   2cd6a:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2cd6e:	6882      	ldr	r2, [r0, #8]
   2cd70:	a901      	add	r1, sp, #4
   2cd72:	6894      	ldr	r4, [r2, #8]
   2cd74:	2201      	movs	r2, #1
   2cd76:	47a0      	blx	r4
}
   2cd78:	b004      	add	sp, #16
   2cd7a:	bd10      	pop	{r4, pc}

0002cd7c <i2c_reg_write_word_be>:
{
   2cd7c:	b507      	push	{r0, r1, r2, lr}
	uint8_t tx_buf[3] = { reg_addr, value >> 8, value & 0xff };
   2cd7e:	f88d 2004 	strb.w	r2, [sp, #4]
   2cd82:	0a1a      	lsrs	r2, r3, #8
   2cd84:	f88d 2005 	strb.w	r2, [sp, #5]
   2cd88:	f88d 3006 	strb.w	r3, [sp, #6]
	return i2c_write(dev, tx_buf, 3, dev_addr);
   2cd8c:	2203      	movs	r2, #3
   2cd8e:	460b      	mov	r3, r1
   2cd90:	a901      	add	r1, sp, #4
   2cd92:	f7ff ffe6 	bl	2cd62 <i2c_write>
}
   2cd96:	b003      	add	sp, #12
   2cd98:	f85d fb04 	ldr.w	pc, [sp], #4

0002cd9c <port_write>:
{
   2cd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cda0:	4605      	mov	r5, r0
   2cda2:	4689      	mov	r9, r1
   2cda4:	4614      	mov	r4, r2
   2cda6:	4698      	mov	r8, r3
	if (k_is_in_isr()) {
   2cda8:	f000 fec9 	bl	2db3e <k_is_in_isr>
   2cdac:	bb08      	cbnz	r0, 2cdf2 <port_write+0x56>
	const struct sx1509b_config *cfg = dev->config;
   2cdae:	686f      	ldr	r7, [r5, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2cdb0:	692d      	ldr	r5, [r5, #16]
	k_sem_take(&drv_data->lock, K_FOREVER);
   2cdb2:	f105 0620 	add.w	r6, r5, #32
   2cdb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cdba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cdbe:	4630      	mov	r0, r6
   2cdc0:	f7ff ffcd 	bl	2cd5e <k_sem_take.constprop.0.isra.0>
	uint16_t orig_out = *outp;
   2cdc4:	8b28      	ldrh	r0, [r5, #24]
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   2cdc6:	8939      	ldrh	r1, [r7, #8]
	uint16_t out = ((orig_out & ~mask) | (value & mask)) ^ toggle;
   2cdc8:	4044      	eors	r4, r0
   2cdca:	ea04 0409 	and.w	r4, r4, r9
   2cdce:	ea84 0408 	eor.w	r4, r4, r8
   2cdd2:	4044      	eors	r4, r0
   2cdd4:	b2a4      	uxth	r4, r4
	int rc = i2c_reg_write_word_be(drv_data->i2c_master, cfg->i2c_slave_addr,
   2cdd6:	6868      	ldr	r0, [r5, #4]
   2cdd8:	4623      	mov	r3, r4
   2cdda:	2210      	movs	r2, #16
   2cddc:	f7ff ffce 	bl	2cd7c <i2c_reg_write_word_be>
	if (rc == 0) {
   2cde0:	4607      	mov	r7, r0
   2cde2:	b900      	cbnz	r0, 2cde6 <port_write+0x4a>
		*outp = out;
   2cde4:	832c      	strh	r4, [r5, #24]
	z_impl_k_sem_give(sem);
   2cde6:	4630      	mov	r0, r6
   2cde8:	f7f7 ff6a 	bl	24cc0 <z_impl_k_sem_give>
}
   2cdec:	4638      	mov	r0, r7
   2cdee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EWOULDBLOCK;
   2cdf2:	f06f 070a 	mvn.w	r7, #10
   2cdf6:	e7f9      	b.n	2cdec <port_write+0x50>

0002cdf8 <port_toggle_bits>:
	return port_write(dev, 0, 0, pins);
   2cdf8:	2200      	movs	r2, #0
{
   2cdfa:	460b      	mov	r3, r1
	return port_write(dev, 0, 0, pins);
   2cdfc:	4611      	mov	r1, r2
   2cdfe:	f7ff bfcd 	b.w	2cd9c <port_write>

0002ce02 <port_clear_bits>:
	return port_write(dev, pins, 0, 0);
   2ce02:	2300      	movs	r3, #0
   2ce04:	461a      	mov	r2, r3
   2ce06:	f7ff bfc9 	b.w	2cd9c <port_write>

0002ce0a <port_set_bits>:
{
   2ce0a:	460a      	mov	r2, r1
	return port_write(dev, pins, pins, 0);
   2ce0c:	2300      	movs	r3, #0
   2ce0e:	f7ff bfc5 	b.w	2cd9c <port_write>

0002ce12 <port_set_masked>:
	return port_write(dev, mask, value, 0);
   2ce12:	2300      	movs	r3, #0
   2ce14:	f7ff bfc2 	b.w	2cd9c <port_write>

0002ce18 <write_pin_state>:
{
   2ce18:	b530      	push	{r4, r5, lr}
   2ce1a:	b087      	sub	sp, #28
   2ce1c:	460c      	mov	r4, r1
	pin_buf.reg = SX1509B_REG_INPUT_DISABLE;
   2ce1e:	2100      	movs	r1, #0
   2ce20:	f88d 1004 	strb.w	r1, [sp, #4]
	pin_buf.pins.input_disable = sys_cpu_to_be16(pins->input_disable);
   2ce24:	8811      	ldrh	r1, [r2, #0]
   2ce26:	ba49      	rev16	r1, r1
   2ce28:	f8ad 1005 	strh.w	r1, [sp, #5]
	pin_buf.pins.long_slew = sys_cpu_to_be16(pins->long_slew);
   2ce2c:	8851      	ldrh	r1, [r2, #2]
   2ce2e:	ba49      	rev16	r1, r1
   2ce30:	f8ad 1007 	strh.w	r1, [sp, #7]
	pin_buf.pins.low_drive = sys_cpu_to_be16(pins->low_drive);
   2ce34:	8891      	ldrh	r1, [r2, #4]
   2ce36:	ba49      	rev16	r1, r1
   2ce38:	f8ad 1009 	strh.w	r1, [sp, #9]
	pin_buf.pins.pull_up = sys_cpu_to_be16(pins->pull_up);
   2ce3c:	88d1      	ldrh	r1, [r2, #6]
   2ce3e:	ba49      	rev16	r1, r1
   2ce40:	f8ad 100b 	strh.w	r1, [sp, #11]
	pin_buf.pins.pull_down = sys_cpu_to_be16(pins->pull_down);
   2ce44:	8911      	ldrh	r1, [r2, #8]
   2ce46:	ba49      	rev16	r1, r1
   2ce48:	f8ad 100d 	strh.w	r1, [sp, #13]
	pin_buf.pins.open_drain = sys_cpu_to_be16(pins->open_drain);
   2ce4c:	8951      	ldrh	r1, [r2, #10]
   2ce4e:	ba49      	rev16	r1, r1
   2ce50:	f8ad 100f 	strh.w	r1, [sp, #15]
	pin_buf.pins.polarity = sys_cpu_to_be16(pins->polarity);
   2ce54:	8991      	ldrh	r1, [r2, #12]
   2ce56:	ba49      	rev16	r1, r1
   2ce58:	f8ad 1011 	strh.w	r1, [sp, #17]
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   2ce5c:	89d1      	ldrh	r1, [r2, #14]
   2ce5e:	8a12      	ldrh	r2, [r2, #16]
{
   2ce60:	4605      	mov	r5, r0
	pin_buf.pins.dir = sys_cpu_to_be16(pins->dir);
   2ce62:	ba49      	rev16	r1, r1
   2ce64:	f8ad 1013 	strh.w	r1, [sp, #19]
	pin_buf.pins.data = sys_cpu_to_be16(pins->data);
   2ce68:	ba51      	rev16	r1, r2
   2ce6a:	f8ad 1015 	strh.w	r1, [sp, #21]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2ce6e:	6860      	ldr	r0, [r4, #4]
   2ce70:	8929      	ldrh	r1, [r5, #8]
	if (data_first) {
   2ce72:	b163      	cbz	r3, 2ce8e <write_pin_state+0x76>
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2ce74:	4613      	mov	r3, r2
   2ce76:	2210      	movs	r2, #16
   2ce78:	f7ff ff80 	bl	2cd7c <i2c_reg_write_word_be>
		if (rc == 0) {
   2ce7c:	b928      	cbnz	r0, 2ce8a <write_pin_state+0x72>
			rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   2ce7e:	892b      	ldrh	r3, [r5, #8]
   2ce80:	6860      	ldr	r0, [r4, #4]
   2ce82:	2211      	movs	r2, #17
   2ce84:	a901      	add	r1, sp, #4
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   2ce86:	f7ff ff6c 	bl	2cd62 <i2c_write>
}
   2ce8a:	b007      	add	sp, #28
   2ce8c:	bd30      	pop	{r4, r5, pc}
		rc = i2c_write(drv_data->i2c_master, &pin_buf.reg,
   2ce8e:	460b      	mov	r3, r1
   2ce90:	2213      	movs	r2, #19
   2ce92:	a901      	add	r1, sp, #4
   2ce94:	e7f7      	b.n	2ce86 <write_pin_state+0x6e>

0002ce96 <sx1509b_config>:
{
   2ce96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const struct sx1509b_config *cfg = dev->config;
   2ce9a:	f8d0 a004 	ldr.w	sl, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2ce9e:	6904      	ldr	r4, [r0, #16]
{
   2cea0:	460d      	mov	r5, r1
   2cea2:	4617      	mov	r7, r2
	if (k_is_in_isr()) {
   2cea4:	f000 fe4b 	bl	2db3e <k_is_in_isr>
   2cea8:	4683      	mov	fp, r0
   2ceaa:	2800      	cmp	r0, #0
   2ceac:	f040 808c 	bne.w	2cfc8 <sx1509b_config+0x132>
	if ((flags & GPIO_DS_ALT) != 0) {
   2ceb0:	f417 0fa0 	tst.w	r7, #5242880	; 0x500000
   2ceb4:	f040 808b 	bne.w	2cfce <sx1509b_config+0x138>
	k_sem_take(&drv_data->lock, K_FOREVER);
   2ceb8:	f104 0920 	add.w	r9, r4, #32
   2cebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cec4:	4648      	mov	r0, r9
   2cec6:	f7ff ff4a 	bl	2cd5e <k_sem_take.constprop.0.isra.0>
		drv_data->led_drv_enable &= ~BIT(pin);
   2ceca:	2601      	movs	r6, #1
	if (drv_data->led_drv_enable & BIT(pin)) {
   2cecc:	8b63      	ldrh	r3, [r4, #26]
		drv_data->led_drv_enable &= ~BIT(pin);
   2cece:	40ae      	lsls	r6, r5
   2ced0:	b2b6      	uxth	r6, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   2ced2:	fa23 f505 	lsr.w	r5, r3, r5
		drv_data->led_drv_enable &= ~BIT(pin);
   2ced6:	ea6f 0806 	mvn.w	r8, r6
	if (drv_data->led_drv_enable & BIT(pin)) {
   2ceda:	07e9      	lsls	r1, r5, #31
		drv_data->led_drv_enable &= ~BIT(pin);
   2cedc:	fa1f f888 	uxth.w	r8, r8
	if (drv_data->led_drv_enable & BIT(pin)) {
   2cee0:	d44f      	bmi.n	2cf82 <sx1509b_config+0xec>
	pins->open_drain &= ~BIT(pin);
   2cee2:	8a63      	ldrh	r3, [r4, #18]
   2cee4:	ea03 0208 	and.w	r2, r3, r8
   2cee8:	8262      	strh	r2, [r4, #18]
	if ((flags & GPIO_SINGLE_ENDED) != 0) {
   2ceea:	07ba      	lsls	r2, r7, #30
   2ceec:	d45c      	bmi.n	2cfa8 <sx1509b_config+0x112>
		pins->pull_up |= BIT(pin);
   2ceee:	89e3      	ldrh	r3, [r4, #14]
	if ((flags & GPIO_PULL_UP) != 0) {
   2cef0:	06f8      	lsls	r0, r7, #27
		pins->pull_up |= BIT(pin);
   2cef2:	bf4c      	ite	mi
   2cef4:	4333      	orrmi	r3, r6
		pins->pull_up &= ~BIT(pin);
   2cef6:	ea03 0308 	andpl.w	r3, r3, r8
   2cefa:	81e3      	strh	r3, [r4, #14]
		pins->pull_down |= BIT(pin);
   2cefc:	8a23      	ldrh	r3, [r4, #16]
	if ((flags & GPIO_PULL_DOWN) != 0) {
   2cefe:	06b9      	lsls	r1, r7, #26
		pins->pull_down |= BIT(pin);
   2cf00:	bf4c      	ite	mi
   2cf02:	4333      	orrmi	r3, r6
		pins->pull_down &= ~BIT(pin);
   2cf04:	ea03 0308 	andpl.w	r3, r3, r8
   2cf08:	8223      	strh	r3, [r4, #16]
		pins->input_disable &= ~BIT(pin);
   2cf0a:	8923      	ldrh	r3, [r4, #8]
	if ((flags & GPIO_INPUT) != 0) {
   2cf0c:	05fa      	lsls	r2, r7, #23
		pins->input_disable &= ~BIT(pin);
   2cf0e:	bf4c      	ite	mi
   2cf10:	ea08 0303 	andmi.w	r3, r8, r3
		pins->input_disable |= BIT(pin);
   2cf14:	4333      	orrpl	r3, r6
	if ((flags & GPIO_OUTPUT) != 0) {
   2cf16:	05bd      	lsls	r5, r7, #22
   2cf18:	8123      	strh	r3, [r4, #8]
		pins->dir &= ~BIT(pin);
   2cf1a:	8ae3      	ldrh	r3, [r4, #22]
	if ((flags & GPIO_OUTPUT) != 0) {
   2cf1c:	d54e      	bpl.n	2cfbc <sx1509b_config+0x126>
		pins->dir &= ~BIT(pin);
   2cf1e:	ea08 0303 	and.w	r3, r8, r3
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   2cf22:	0578      	lsls	r0, r7, #21
		pins->dir &= ~BIT(pin);
   2cf24:	82e3      	strh	r3, [r4, #22]
		if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   2cf26:	d544      	bpl.n	2cfb2 <sx1509b_config+0x11c>
			pins->data &= ~BIT(pin);
   2cf28:	8b23      	ldrh	r3, [r4, #24]
   2cf2a:	ea08 0303 	and.w	r3, r8, r3
			pins->data |= BIT(pin);
   2cf2e:	8323      	strh	r3, [r4, #24]
			data_first = true;
   2cf30:	f04f 0b01 	mov.w	fp, #1
		debounce->debounce_enable |= BIT(pin);
   2cf34:	f8b4 301d 	ldrh.w	r3, [r4, #29]
	if ((flags & GPIO_INT_DEBOUNCE) != 0) {
   2cf38:	033a      	lsls	r2, r7, #12
		debounce->debounce_enable |= BIT(pin);
   2cf3a:	bf4c      	ite	mi
   2cf3c:	431e      	orrmi	r6, r3
		debounce->debounce_enable &= ~BIT(pin);
   2cf3e:	ea08 0603 	andpl.w	r6, r8, r3
   2cf42:	f8a4 601d 	strh.w	r6, [r4, #29]
	rc = write_pin_state(cfg, drv_data, pins, data_first);
   2cf46:	465b      	mov	r3, fp
   2cf48:	f104 0208 	add.w	r2, r4, #8
   2cf4c:	4621      	mov	r1, r4
   2cf4e:	4650      	mov	r0, sl
   2cf50:	f7ff ff62 	bl	2ce18 <write_pin_state>
	if (rc == 0) {
   2cf54:	4605      	mov	r5, r0
   2cf56:	bb00      	cbnz	r0, 2cf9a <sx1509b_config+0x104>
		debounce_buf.reg = SX1509B_REG_DEBOUNCE_CONFIG;
   2cf58:	2322      	movs	r3, #34	; 0x22
   2cf5a:	f88d 3004 	strb.w	r3, [sp, #4]
			= debounce->debounce_config;
   2cf5e:	7f23      	ldrb	r3, [r4, #28]
   2cf60:	f88d 3005 	strb.w	r3, [sp, #5]
			= sys_cpu_to_be16(debounce->debounce_enable);
   2cf64:	f8b4 301d 	ldrh.w	r3, [r4, #29]
		rc = i2c_write(drv_data->i2c_master,
   2cf68:	6860      	ldr	r0, [r4, #4]
			= sys_cpu_to_be16(debounce->debounce_enable);
   2cf6a:	ba5b      	rev16	r3, r3
		rc = i2c_write(drv_data->i2c_master,
   2cf6c:	2204      	movs	r2, #4
			= sys_cpu_to_be16(debounce->debounce_enable);
   2cf6e:	f8ad 3006 	strh.w	r3, [sp, #6]
		rc = i2c_write(drv_data->i2c_master,
   2cf72:	eb0d 0102 	add.w	r1, sp, r2
   2cf76:	f8ba 3008 	ldrh.w	r3, [sl, #8]
   2cf7a:	f7ff fef2 	bl	2cd62 <i2c_write>
   2cf7e:	4605      	mov	r5, r0
   2cf80:	e00b      	b.n	2cf9a <sx1509b_config+0x104>
		drv_data->led_drv_enable &= ~BIT(pin);
   2cf82:	ea03 0308 	and.w	r3, r3, r8
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2cf86:	f8ba 1008 	ldrh.w	r1, [sl, #8]
   2cf8a:	6860      	ldr	r0, [r4, #4]
		drv_data->led_drv_enable &= ~BIT(pin);
   2cf8c:	8363      	strh	r3, [r4, #26]
		rc = i2c_reg_write_word_be(drv_data->i2c_master,
   2cf8e:	2220      	movs	r2, #32
   2cf90:	f7ff fef4 	bl	2cd7c <i2c_reg_write_word_be>
		if (rc) {
   2cf94:	4605      	mov	r5, r0
   2cf96:	2800      	cmp	r0, #0
   2cf98:	d0a3      	beq.n	2cee2 <sx1509b_config+0x4c>
   2cf9a:	4648      	mov	r0, r9
   2cf9c:	f7f7 fe90 	bl	24cc0 <z_impl_k_sem_give>
}
   2cfa0:	4628      	mov	r0, r5
   2cfa2:	b003      	add	sp, #12
   2cfa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((flags & GPIO_LINE_OPEN_DRAIN) != 0) {
   2cfa8:	077d      	lsls	r5, r7, #29
   2cfaa:	d50a      	bpl.n	2cfc2 <sx1509b_config+0x12c>
			pins->open_drain |= BIT(pin);
   2cfac:	4333      	orrs	r3, r6
   2cfae:	8263      	strh	r3, [r4, #18]
   2cfb0:	e79d      	b.n	2ceee <sx1509b_config+0x58>
		} else if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2cfb2:	0539      	lsls	r1, r7, #20
   2cfb4:	d5be      	bpl.n	2cf34 <sx1509b_config+0x9e>
			pins->data |= BIT(pin);
   2cfb6:	8b23      	ldrh	r3, [r4, #24]
   2cfb8:	4333      	orrs	r3, r6
   2cfba:	e7b8      	b.n	2cf2e <sx1509b_config+0x98>
		pins->dir |= BIT(pin);
   2cfbc:	4333      	orrs	r3, r6
   2cfbe:	82e3      	strh	r3, [r4, #22]
   2cfc0:	e7b8      	b.n	2cf34 <sx1509b_config+0x9e>
			rc = -ENOTSUP;
   2cfc2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2cfc6:	e7e8      	b.n	2cf9a <sx1509b_config+0x104>
		return -EWOULDBLOCK;
   2cfc8:	f06f 050a 	mvn.w	r5, #10
   2cfcc:	e7e8      	b.n	2cfa0 <sx1509b_config+0x10a>
		return -ENOTSUP;
   2cfce:	f06f 0585 	mvn.w	r5, #133	; 0x85
   2cfd2:	e7e5      	b.n	2cfa0 <sx1509b_config+0x10a>

0002cfd4 <port_get>:
{
   2cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cfd8:	b088      	sub	sp, #32
	const struct sx1509b_config *cfg = dev->config;
   2cfda:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct sx1509b_drv_data *drv_data = dev->data;
   2cfde:	6907      	ldr	r7, [r0, #16]
{
   2cfe0:	460d      	mov	r5, r1
	if (k_is_in_isr()) {
   2cfe2:	f000 fdac 	bl	2db3e <k_is_in_isr>
   2cfe6:	4604      	mov	r4, r0
   2cfe8:	bb78      	cbnz	r0, 2d04a <port_get+0x76>
	k_sem_take(&drv_data->lock, K_FOREVER);
   2cfea:	f107 0620 	add.w	r6, r7, #32
   2cfee:	4630      	mov	r0, r6
   2cff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2cff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cff8:	f7ff feb1 	bl	2cd5e <k_sem_take.constprop.0.isra.0>
	msg[0].buf = (uint8_t *)write_buf;
   2cffc:	f10d 0205 	add.w	r2, sp, #5
   2d000:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
   2d002:	2201      	movs	r2, #1
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   2d004:	6878      	ldr	r0, [r7, #4]
   2d006:	9203      	str	r2, [sp, #12]
	uint8_t cmd = SX1509B_REG_DATA;
   2d008:	2310      	movs	r3, #16
	msg[1].buf = (uint8_t *)read_buf;
   2d00a:	f10d 0206 	add.w	r2, sp, #6
   2d00e:	f88d 3005 	strb.w	r3, [sp, #5]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d012:	2107      	movs	r1, #7
	rc = i2c_write_read(drv_data->i2c_master, cfg->i2c_slave_addr,
   2d014:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	msg[1].buf = (uint8_t *)read_buf;
   2d018:	9205      	str	r2, [sp, #20]
	msg[1].len = num_read;
   2d01a:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   2d01c:	f88d 4010 	strb.w	r4, [sp, #16]
	msg[1].len = num_read;
   2d020:	9206      	str	r2, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d022:	f88d 101c 	strb.w	r1, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d026:	6881      	ldr	r1, [r0, #8]
   2d028:	688c      	ldr	r4, [r1, #8]
   2d02a:	a902      	add	r1, sp, #8
   2d02c:	47a0      	blx	r4
	if (rc != 0) {
   2d02e:	4604      	mov	r4, r0
   2d030:	b920      	cbnz	r0, 2d03c <port_get+0x68>
	*value = sys_be16_to_cpu(pin_data);
   2d032:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2d036:	ba5b      	rev16	r3, r3
   2d038:	b29b      	uxth	r3, r3
   2d03a:	602b      	str	r3, [r5, #0]
   2d03c:	4630      	mov	r0, r6
   2d03e:	f7f7 fe3f 	bl	24cc0 <z_impl_k_sem_give>
}
   2d042:	4620      	mov	r0, r4
   2d044:	b008      	add	sp, #32
   2d046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EWOULDBLOCK;
   2d04a:	f06f 040a 	mvn.w	r4, #10
   2d04e:	e7f8      	b.n	2d042 <port_get+0x6e>

0002d050 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d050:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d052:	ab0a      	add	r3, sp, #40	; 0x28
   2d054:	9305      	str	r3, [sp, #20]
   2d056:	9302      	str	r3, [sp, #8]
   2d058:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d05a:	9301      	str	r3, [sp, #4]
   2d05c:	2300      	movs	r3, #0
   2d05e:	9300      	str	r3, [sp, #0]
   2d060:	2201      	movs	r2, #1
   2d062:	4618      	mov	r0, r3
   2d064:	f7d9 ff24 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2d068:	b007      	add	sp, #28
   2d06a:	f85d fb04 	ldr.w	pc, [sp], #4

0002d06e <twim_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twim_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(0);
   2d06e:	b510      	push	{r4, lr}
   2d070:	2200      	movs	r2, #0
   2d072:	4604      	mov	r4, r0
   2d074:	2101      	movs	r1, #1
   2d076:	2003      	movs	r0, #3
   2d078:	f7da fb20 	bl	76bc <z_arm_irq_priority_set>
   2d07c:	4620      	mov	r0, r4
   2d07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d082:	f7f4 b94d 	b.w	21320 <init_twim>

0002d086 <twim_1_init>:
#endif

#ifdef CONFIG_I2C_1_NRF_TWIM
I2C_NRFX_TWIM_DEVICE(1);
   2d086:	b510      	push	{r4, lr}
   2d088:	2200      	movs	r2, #0
   2d08a:	4604      	mov	r4, r0
   2d08c:	2101      	movs	r1, #1
   2d08e:	2004      	movs	r0, #4
   2d090:	f7da fb14 	bl	76bc <z_arm_irq_priority_set>
   2d094:	4620      	mov	r0, r4
   2d096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d09a:	f7f4 b941 	b.w	21320 <init_twim>

0002d09e <pwm_channel_is_active>:
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
   2d09e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	uint16_t pulse_cycle =
   2d0a2:	8880      	ldrh	r0, [r0, #4]
   2d0a4:	f3c0 000e 	ubfx	r0, r0, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
   2d0a8:	b120      	cbz	r0, 2d0b4 <pwm_channel_is_active+0x16>
   2d0aa:	898b      	ldrh	r3, [r1, #12]
   2d0ac:	4283      	cmp	r3, r0
   2d0ae:	bf94      	ite	ls
   2d0b0:	2000      	movls	r0, #0
   2d0b2:	2001      	movhi	r0, #1
}
   2d0b4:	4770      	bx	lr

0002d0b6 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
   2d0b6:	2300      	movs	r3, #0
   2d0b8:	f7fb bcfa 	b.w	28ab0 <z_impl_z_log_msg2_static_create>

0002d0bc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d0bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d0be:	ab0a      	add	r3, sp, #40	; 0x28
   2d0c0:	9305      	str	r3, [sp, #20]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, fmt, ap);
   2d0c2:	9302      	str	r3, [sp, #8]
   2d0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d0c6:	9301      	str	r3, [sp, #4]
   2d0c8:	2300      	movs	r3, #0
   2d0ca:	9300      	str	r3, [sp, #0]
   2d0cc:	2201      	movs	r2, #1
   2d0ce:	4618      	mov	r0, r3
   2d0d0:	f7d9 feee 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2d0d4:	b007      	add	sp, #28
   2d0d6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d0da <i2c_write_read.constprop.0>:
static inline int i2c_write_read(const struct device *dev, uint16_t addr,
   2d0da:	b510      	push	{r4, lr}
   2d0dc:	b086      	sub	sp, #24
	msg[1].len = num_read;
   2d0de:	e9cd 2303 	strd	r2, r3, [sp, #12]
	msg[0].buf = (uint8_t *)write_buf;
   2d0e2:	9100      	str	r1, [sp, #0]
	msg[0].len = num_write;
   2d0e4:	2101      	movs	r1, #1
   2d0e6:	9101      	str	r1, [sp, #4]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d0e8:	2307      	movs	r3, #7
	msg[0].flags = I2C_MSG_WRITE;
   2d0ea:	2100      	movs	r1, #0
   2d0ec:	f88d 1008 	strb.w	r1, [sp, #8]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d0f0:	f88d 3014 	strb.w	r3, [sp, #20]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d0f4:	6883      	ldr	r3, [r0, #8]
   2d0f6:	2202      	movs	r2, #2
   2d0f8:	689c      	ldr	r4, [r3, #8]
   2d0fa:	4669      	mov	r1, sp
   2d0fc:	235a      	movs	r3, #90	; 0x5a
   2d0fe:	47a0      	blx	r4
}
   2d100:	b006      	add	sp, #24
   2d102:	bd10      	pop	{r4, pc}

0002d104 <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d104:	2301      	movs	r3, #1
   2d106:	fa03 f101 	lsl.w	r1, r3, r1
   2d10a:	6903      	ldr	r3, [r0, #16]
   2d10c:	681b      	ldr	r3, [r3, #0]
   2d10e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2d110:	bf18      	it	ne
   2d112:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2d116:	b112      	cbz	r2, 2d11e <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   2d118:	6883      	ldr	r3, [r0, #8]
   2d11a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2d11c:	4718      	bx	r3
   2d11e:	6883      	ldr	r3, [r0, #8]
   2d120:	691b      	ldr	r3, [r3, #16]
   2d122:	e7fb      	b.n	2d11c <gpio_pin_set.isra.0+0x18>

0002d124 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   2d124:	4601      	mov	r1, r0
   2d126:	f240 30e7 	movw	r0, #999	; 0x3e7
   2d12a:	b508      	push	{r3, lr}
   2d12c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2d130:	2300      	movs	r3, #0
   2d132:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2d136:	1449      	asrs	r1, r1, #17
   2d138:	f7d3 fd6e 	bl	c18 <__aeabi_uldivmod>
}
   2d13c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   2d140:	f7f8 baa2 	b.w	25688 <z_impl_k_sleep>

0002d144 <i2c_write.constprop.0>:
static inline int i2c_write(const struct device *dev, const uint8_t *buf,
   2d144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	msg.len = num_bytes;
   2d146:	e9cd 1201 	strd	r1, r2, [sp, #4]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d14a:	2202      	movs	r2, #2
   2d14c:	f88d 200c 	strb.w	r2, [sp, #12]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d150:	6883      	ldr	r3, [r0, #8]
   2d152:	2201      	movs	r2, #1
   2d154:	689c      	ldr	r4, [r3, #8]
   2d156:	a901      	add	r1, sp, #4
   2d158:	235a      	movs	r3, #90	; 0x5a
   2d15a:	47a0      	blx	r4
}
   2d15c:	b004      	add	sp, #16
   2d15e:	bd10      	pop	{r4, pc}

0002d160 <set_wake.isra.0>:
static void set_wake(struct ccs811_data *drv_data, bool enable)
   2d160:	b510      	push	{r4, lr}
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   2d162:	460a      	mov	r2, r1
static void set_wake(struct ccs811_data *drv_data, bool enable)
   2d164:	460c      	mov	r4, r1
	gpio_pin_set(drv_data->wake_gpio, WAKE_PIN, enable);
   2d166:	210c      	movs	r1, #12
   2d168:	f7ff ffcc 	bl	2d104 <gpio_pin_set.isra.0>
	if (enable) {
   2d16c:	b124      	cbz	r4, 2d178 <set_wake.isra.0+0x18>
	z_impl_k_busy_wait(usec_to_wait);
   2d16e:	2032      	movs	r0, #50	; 0x32
}
   2d170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2d174:	f001 b83c 	b.w	2e1f0 <z_impl_k_busy_wait>
   2d178:	2014      	movs	r0, #20
   2d17a:	e7f9      	b.n	2d170 <set_wake.isra.0+0x10>

0002d17c <ccs811_sample_fetch>:
{
   2d17c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct ccs811_data *drv_data = dev->data;
   2d17e:	6905      	ldr	r5, [r0, #16]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   2d180:	2302      	movs	r3, #2
	uint16_t buf[4] = { 0 };
   2d182:	2400      	movs	r4, #0
	set_wake(drv_data, true);
   2d184:	68e8      	ldr	r0, [r5, #12]
	const uint8_t cmd = CCS811_REG_ALG_RESULT_DATA;
   2d186:	f88d 3007 	strb.w	r3, [sp, #7]
	set_wake(drv_data, true);
   2d18a:	2101      	movs	r1, #1
	uint16_t buf[4] = { 0 };
   2d18c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	set_wake(drv_data, true);
   2d190:	f7ff ffe6 	bl	2d160 <set_wake.isra.0>
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   2d194:	2308      	movs	r3, #8
   2d196:	eb0d 0203 	add.w	r2, sp, r3
   2d19a:	f10d 0107 	add.w	r1, sp, #7
   2d19e:	6828      	ldr	r0, [r5, #0]
   2d1a0:	f7ff ff9b 	bl	2d0da <i2c_write_read.constprop.0>
	set_wake(drv_data, false);
   2d1a4:	4621      	mov	r1, r4
	rc = i2c_write_read(drv_data->i2c, DT_INST_REG_ADDR(0),
   2d1a6:	4606      	mov	r6, r0
	set_wake(drv_data, false);
   2d1a8:	68e8      	ldr	r0, [r5, #12]
   2d1aa:	f7ff ffd9 	bl	2d160 <set_wake.isra.0>
	if (rc < 0) {
   2d1ae:	42a6      	cmp	r6, r4
   2d1b0:	db1b      	blt.n	2d1ea <ccs811_sample_fetch+0x6e>
	rp->co2 = sys_be16_to_cpu(buf[0]);
   2d1b2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	status = sys_le16_to_cpu(buf[2]); /* sic */
   2d1b6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
	rp->status = status;
   2d1ba:	82ea      	strh	r2, [r5, #22]
   2d1bc:	ba5b      	rev16	r3, r3
   2d1be:	b299      	uxth	r1, r3
	rp->co2 = sys_be16_to_cpu(buf[0]);
   2d1c0:	822b      	strh	r3, [r5, #16]
	rp->voc = sys_be16_to_cpu(buf[1]);
   2d1c2:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   2d1c6:	ba5b      	rev16	r3, r3
   2d1c8:	826b      	strh	r3, [r5, #18]
	rp->raw = sys_be16_to_cpu(buf[3]);
   2d1ca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   2d1ce:	ba5b      	rev16	r3, r3
   2d1d0:	82ab      	strh	r3, [r5, #20]
	if ((drv_data->app_fw_ver <= 0x11)
   2d1d2:	7e6b      	ldrb	r3, [r5, #25]
   2d1d4:	2b11      	cmp	r3, #17
   2d1d6:	d800      	bhi.n	2d1da <ccs811_sample_fetch+0x5e>
	    && (rp->co2 != 0)) {
   2d1d8:	b951      	cbnz	r1, 2d1f0 <ccs811_sample_fetch+0x74>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   2d1da:	f012 0f08 	tst.w	r2, #8
   2d1de:	bf14      	ite	ne
   2d1e0:	2000      	movne	r0, #0
   2d1e2:	f06f 000a 	mvneq.w	r0, #10
}
   2d1e6:	b004      	add	sp, #16
   2d1e8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   2d1ea:	f06f 0004 	mvn.w	r0, #4
   2d1ee:	e7fa      	b.n	2d1e6 <ccs811_sample_fetch+0x6a>
	return (status & CCS811_STATUS_DATA_READY) ? 0 : -EAGAIN;
   2d1f0:	4620      	mov	r0, r4
   2d1f2:	e7f8      	b.n	2d1e6 <ccs811_sample_fetch+0x6a>

0002d1f4 <ccs811_result>:
	return &drv_data->result;
   2d1f4:	6900      	ldr	r0, [r0, #16]
}
   2d1f6:	3010      	adds	r0, #16
   2d1f8:	4770      	bx	lr

0002d1fa <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d1fa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d1fc:	ab0a      	add	r3, sp, #40	; 0x28
   2d1fe:	9305      	str	r3, [sp, #20]
   2d200:	9302      	str	r3, [sp, #8]
   2d202:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d204:	9301      	str	r3, [sp, #4]
   2d206:	2300      	movs	r3, #0
   2d208:	9300      	str	r3, [sp, #0]
   2d20a:	4618      	mov	r0, r3
   2d20c:	f7d9 fe50 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2d210:	b007      	add	sp, #28
   2d212:	f85d fb04 	ldr.w	pc, [sp], #4

0002d216 <i2c_transfer>:

extern int z_impl_i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr);

__pinned_func
static inline int i2c_transfer(const struct device * dev, struct i2c_msg * msgs, uint8_t num_msgs, uint16_t addr)
{
   2d216:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d218:	6884      	ldr	r4, [r0, #8]
   2d21a:	68a4      	ldr	r4, [r4, #8]
   2d21c:	46a4      	mov	ip, r4
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
}
   2d21e:	bc10      	pop	{r4}
   2d220:	4760      	bx	ip

0002d222 <lis2dh_i2c_write_data>:
{
   2d222:	b530      	push	{r4, r5, lr}
   2d224:	461d      	mov	r5, r3
   2d226:	b089      	sub	sp, #36	; 0x24
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   2d228:	6903      	ldr	r3, [r0, #16]
{
   2d22a:	4604      	mov	r4, r0
	return i2c_burst_write(data->bus, cfg->bus_cfg.i2c_slv_addr,
   2d22c:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2d230:	6818      	ldr	r0, [r3, #0]
   2d232:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   2d236:	f10d 0107 	add.w	r1, sp, #7
   2d23a:	6863      	ldr	r3, [r4, #4]
   2d23c:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   2d23e:	2101      	movs	r1, #1
   2d240:	9103      	str	r1, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   2d242:	2100      	movs	r1, #0
   2d244:	891b      	ldrh	r3, [r3, #8]
   2d246:	f88d 1010 	strb.w	r1, [sp, #16]
   2d24a:	e9cd 2505 	strd	r2, r5, [sp, #20]
	return i2c_transfer(dev, msg, 2, dev_addr);
   2d24e:	a902      	add	r1, sp, #8
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d250:	2202      	movs	r2, #2
   2d252:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, dev_addr);
   2d256:	f7ff ffde 	bl	2d216 <i2c_transfer>
}
   2d25a:	b009      	add	sp, #36	; 0x24
   2d25c:	bd30      	pop	{r4, r5, pc}

0002d25e <lis2dh_i2c_read_data>:
{
   2d25e:	b530      	push	{r4, r5, lr}
   2d260:	4604      	mov	r4, r0
   2d262:	b089      	sub	sp, #36	; 0x24
   2d264:	461d      	mov	r5, r3
	return i2c_burst_read(data->bus, cfg->bus_cfg.i2c_slv_addr,
   2d266:	6903      	ldr	r3, [r0, #16]
   2d268:	f061 017f 	orn	r1, r1, #127	; 0x7f
   2d26c:	6818      	ldr	r0, [r3, #0]
   2d26e:	6863      	ldr	r3, [r4, #4]
   2d270:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2d274:	f10d 0107 	add.w	r1, sp, #7
   2d278:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   2d27a:	2101      	movs	r1, #1
   2d27c:	891b      	ldrh	r3, [r3, #8]
   2d27e:	9103      	str	r1, [sp, #12]
   2d280:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].flags = I2C_MSG_WRITE;
   2d284:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d286:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2d288:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d28c:	f88d 201c 	strb.w	r2, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   2d290:	a902      	add	r1, sp, #8
   2d292:	2202      	movs	r2, #2
   2d294:	f7ff ffbf 	bl	2d216 <i2c_transfer>
}
   2d298:	b009      	add	sp, #36	; 0x24
   2d29a:	bd30      	pop	{r4, r5, pc}

0002d29c <lis2dh_i2c_write_reg>:
{
   2d29c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2d29e:	4603      	mov	r3, r0
	return i2c_reg_write_byte(data->bus,
   2d2a0:	6900      	ldr	r0, [r0, #16]
   2d2a2:	685b      	ldr	r3, [r3, #4]
   2d2a4:	6800      	ldr	r0, [r0, #0]
	uint8_t tx_buf[2] = {reg_addr, value};
   2d2a6:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   2d2aa:	2202      	movs	r2, #2
   2d2ac:	891b      	ldrh	r3, [r3, #8]
	uint8_t tx_buf[2] = {reg_addr, value};
   2d2ae:	f88d 1000 	strb.w	r1, [sp]
	msg.len = num_bytes;
   2d2b2:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d2b4:	f88d 200c 	strb.w	r2, [sp, #12]
	return i2c_transfer(dev, &msg, 1, addr);
   2d2b8:	a901      	add	r1, sp, #4
   2d2ba:	2201      	movs	r2, #1
	msg.buf = (uint8_t *)buf;
   2d2bc:	f8cd d004 	str.w	sp, [sp, #4]
	return i2c_transfer(dev, &msg, 1, addr);
   2d2c0:	f7ff ffa9 	bl	2d216 <i2c_transfer>
}
   2d2c4:	b005      	add	sp, #20
   2d2c6:	f85d fb04 	ldr.w	pc, [sp], #4

0002d2ca <lis2dh_i2c_read_reg>:
{
   2d2ca:	b510      	push	{r4, lr}
   2d2cc:	4603      	mov	r3, r0
   2d2ce:	b088      	sub	sp, #32
	return i2c_reg_read_byte(data->bus,
   2d2d0:	6900      	ldr	r0, [r0, #16]
   2d2d2:	685b      	ldr	r3, [r3, #4]
   2d2d4:	6800      	ldr	r0, [r0, #0]
   2d2d6:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2d2da:	f10d 0107 	add.w	r1, sp, #7
   2d2de:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   2d2e0:	2101      	movs	r1, #1
   2d2e2:	891b      	ldrh	r3, [r3, #8]
   2d2e4:	9103      	str	r1, [sp, #12]
	msg[1].len = num_read;
   2d2e6:	e9cd 2105 	strd	r2, r1, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d2ea:	2207      	movs	r2, #7
   2d2ec:	f88d 201c 	strb.w	r2, [sp, #28]
	msg[0].flags = I2C_MSG_WRITE;
   2d2f0:	2400      	movs	r4, #0
	return i2c_transfer(dev, msg, 2, addr);
   2d2f2:	2202      	movs	r2, #2
   2d2f4:	a902      	add	r1, sp, #8
	msg[0].flags = I2C_MSG_WRITE;
   2d2f6:	f88d 4010 	strb.w	r4, [sp, #16]
	return i2c_transfer(dev, msg, 2, addr);
   2d2fa:	f7ff ff8c 	bl	2d216 <i2c_transfer>
}
   2d2fe:	b008      	add	sp, #32
   2d300:	bd10      	pop	{r4, pc}

0002d302 <lis2dh_i2c_update_reg>:
{
   2d302:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d306:	4698      	mov	r8, r3
	return i2c_reg_update_byte(data->bus,
   2d308:	6903      	ldr	r3, [r0, #16]
   2d30a:	f8d3 9000 	ldr.w	r9, [r3]
				   cfg->bus_cfg.i2c_slv_addr,
   2d30e:	6843      	ldr	r3, [r0, #4]
{
   2d310:	b088      	sub	sp, #32
   2d312:	f893 a008 	ldrb.w	sl, [r3, #8]
   2d316:	f88d 1004 	strb.w	r1, [sp, #4]
	msg[0].flags = I2C_MSG_WRITE;
   2d31a:	2300      	movs	r3, #0
	msg[0].len = num_write;
   2d31c:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   2d31e:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   2d322:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   2d326:	e9cd 3705 	strd	r3, r7, [sp, #20]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d32a:	2307      	movs	r3, #7
   2d32c:	460e      	mov	r6, r1
   2d32e:	4614      	mov	r4, r2
	msg[0].buf = (uint8_t *)write_buf;
   2d330:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d332:	f88d 301c 	strb.w	r3, [sp, #28]
	return i2c_transfer(dev, msg, 2, addr);
   2d336:	2202      	movs	r2, #2
   2d338:	4653      	mov	r3, sl
   2d33a:	a902      	add	r1, sp, #8
   2d33c:	4648      	mov	r0, r9
	msg[0].buf = (uint8_t *)write_buf;
   2d33e:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   2d340:	9703      	str	r7, [sp, #12]
	return i2c_transfer(dev, msg, 2, addr);
   2d342:	f7ff ff68 	bl	2d216 <i2c_transfer>
{
	uint8_t old_value, new_value;
	int rc;

	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
	if (rc != 0) {
   2d346:	b9b8      	cbnz	r0, 2d378 <lis2dh_i2c_update_reg+0x76>
		return rc;
	}

	new_value = (old_value & ~mask) | (value & mask);
   2d348:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2d34c:	ea23 0104 	bic.w	r1, r3, r4
   2d350:	ea04 0408 	and.w	r4, r4, r8
   2d354:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   2d356:	42a3      	cmp	r3, r4
   2d358:	d00e      	beq.n	2d378 <lis2dh_i2c_update_reg+0x76>
	msg.len = num_bytes;
   2d35a:	2302      	movs	r3, #2
   2d35c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d35e:	f88d 3010 	strb.w	r3, [sp, #16]
	return i2c_transfer(dev, &msg, 1, addr);
   2d362:	463a      	mov	r2, r7
   2d364:	4653      	mov	r3, sl
   2d366:	a902      	add	r1, sp, #8
   2d368:	4648      	mov	r0, r9
	uint8_t tx_buf[2] = {reg_addr, value};
   2d36a:	f88d 6004 	strb.w	r6, [sp, #4]
   2d36e:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   2d372:	9502      	str	r5, [sp, #8]
	return i2c_transfer(dev, &msg, 1, addr);
   2d374:	f7ff ff4f 	bl	2d216 <i2c_transfer>
}
   2d378:	b008      	add	sp, #32
   2d37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d37e <z_impl_i2c_transfer>:
{
   2d37e:	b410      	push	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d380:	6884      	ldr	r4, [r0, #8]
   2d382:	68a4      	ldr	r4, [r4, #8]
   2d384:	46a4      	mov	ip, r4
}
   2d386:	bc10      	pop	{r4}
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d388:	4760      	bx	ip

0002d38a <lps22hb_sample_fetch>:
{
   2d38a:	b530      	push	{r4, r5, lr}
   2d38c:	4603      	mov	r3, r0
   2d38e:	b08b      	sub	sp, #44	; 0x2c
	struct lps22hb_data *data = dev->data;
   2d390:	6905      	ldr	r5, [r0, #16]
	if (i2c_burst_read(data->i2c_master, config->i2c_slave_addr,
   2d392:	685b      	ldr	r3, [r3, #4]
   2d394:	6828      	ldr	r0, [r5, #0]
   2d396:	889b      	ldrh	r3, [r3, #4]
static inline int i2c_burst_read(const struct device *dev,
   2d398:	2228      	movs	r2, #40	; 0x28
   2d39a:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2d39e:	f10d 0207 	add.w	r2, sp, #7
   2d3a2:	9204      	str	r2, [sp, #16]
	msg[0].len = num_write;
   2d3a4:	2201      	movs	r2, #1
   2d3a6:	9205      	str	r2, [sp, #20]
	msg[1].buf = (uint8_t *)read_buf;
   2d3a8:	aa02      	add	r2, sp, #8
   2d3aa:	9207      	str	r2, [sp, #28]
	msg[1].len = num_read;
   2d3ac:	2205      	movs	r2, #5
	msg[0].flags = I2C_MSG_WRITE;
   2d3ae:	2400      	movs	r4, #0
	msg[1].len = num_read;
   2d3b0:	9208      	str	r2, [sp, #32]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d3b2:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2d3b4:	f88d 4018 	strb.w	r4, [sp, #24]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d3b8:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
   2d3bc:	2202      	movs	r2, #2
   2d3be:	a904      	add	r1, sp, #16
   2d3c0:	f7ff ffdd 	bl	2d37e <z_impl_i2c_transfer>
   2d3c4:	42a0      	cmp	r0, r4
   2d3c6:	db10      	blt.n	2d3ea <lps22hb_sample_fetch+0x60>
				     ((uint32_t)(out[2]) << 16));
   2d3c8:	f89d 300a 	ldrb.w	r3, [sp, #10]
				     ((uint32_t)(out[1]) << 8) |
   2d3cc:	f89d 2009 	ldrb.w	r2, [sp, #9]
				     ((uint32_t)(out[2]) << 16));
   2d3d0:	041b      	lsls	r3, r3, #16
				     ((uint32_t)(out[1]) << 8) |
   2d3d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   2d3d6:	f89d 2008 	ldrb.w	r2, [sp, #8]
				     ((uint32_t)(out[1]) << 8) |
   2d3da:	4313      	orrs	r3, r2
	data->sample_press = (int32_t)((uint32_t)(out[0]) |
   2d3dc:	606b      	str	r3, [r5, #4]
	data->sample_temp = (int16_t)((uint16_t)(out[3]) |
   2d3de:	f8bd 300b 	ldrh.w	r3, [sp, #11]
   2d3e2:	812b      	strh	r3, [r5, #8]
	return 0;
   2d3e4:	4620      	mov	r0, r4
}
   2d3e6:	b00b      	add	sp, #44	; 0x2c
   2d3e8:	bd30      	pop	{r4, r5, pc}
		return -EIO;
   2d3ea:	f06f 0004 	mvn.w	r0, #4
   2d3ee:	e7fa      	b.n	2d3e6 <lps22hb_sample_fetch+0x5c>

0002d3f0 <i2c_reg_update_byte.constprop.0>:
static inline int i2c_reg_update_byte(const struct device *dev,
   2d3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d3f4:	b088      	sub	sp, #32
   2d3f6:	4698      	mov	r8, r3
	msg[0].flags = I2C_MSG_WRITE;
   2d3f8:	2300      	movs	r3, #0
	msg[0].len = num_write;
   2d3fa:	2701      	movs	r7, #1
	msg[0].flags = I2C_MSG_WRITE;
   2d3fc:	f88d 3010 	strb.w	r3, [sp, #16]
	msg[1].buf = (uint8_t *)read_buf;
   2d400:	f10d 0303 	add.w	r3, sp, #3
	msg[1].len = num_read;
   2d404:	e9cd 3705 	strd	r3, r7, [sp, #20]
   2d408:	f04f 0910 	mov.w	r9, #16
	msg[0].buf = (uint8_t *)write_buf;
   2d40c:	ad01      	add	r5, sp, #4
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d40e:	2307      	movs	r3, #7
static inline int i2c_reg_update_byte(const struct device *dev,
   2d410:	4606      	mov	r6, r0
   2d412:	4614      	mov	r4, r2
	rc = i2c_reg_read_byte(dev, dev_addr, reg_addr, &old_value);
   2d414:	468a      	mov	sl, r1
   2d416:	f88d 9004 	strb.w	r9, [sp, #4]
	msg[0].buf = (uint8_t *)write_buf;
   2d41a:	9502      	str	r5, [sp, #8]
	msg[0].len = num_write;
   2d41c:	9703      	str	r7, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d41e:	f88d 301c 	strb.w	r3, [sp, #28]
   2d422:	2202      	movs	r2, #2
   2d424:	460b      	mov	r3, r1
   2d426:	a902      	add	r1, sp, #8
   2d428:	f7ff ffa9 	bl	2d37e <z_impl_i2c_transfer>
	if (rc != 0) {
   2d42c:	b9b8      	cbnz	r0, 2d45e <i2c_reg_update_byte.constprop.0+0x6e>
	new_value = (old_value & ~mask) | (value & mask);
   2d42e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   2d432:	ea23 0104 	bic.w	r1, r3, r4
   2d436:	ea04 0408 	and.w	r4, r4, r8
   2d43a:	430c      	orrs	r4, r1
	if (new_value == old_value) {
   2d43c:	42a3      	cmp	r3, r4
   2d43e:	d00e      	beq.n	2d45e <i2c_reg_update_byte.constprop.0+0x6e>
	msg.len = num_bytes;
   2d440:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
   2d442:	f88d 9004 	strb.w	r9, [sp, #4]
   2d446:	f88d 4005 	strb.w	r4, [sp, #5]
	msg.buf = (uint8_t *)buf;
   2d44a:	9502      	str	r5, [sp, #8]
	msg.len = num_bytes;
   2d44c:	9303      	str	r3, [sp, #12]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d44e:	f88d 3010 	strb.w	r3, [sp, #16]
   2d452:	4653      	mov	r3, sl
   2d454:	463a      	mov	r2, r7
   2d456:	a902      	add	r1, sp, #8
   2d458:	4630      	mov	r0, r6
   2d45a:	f7ff ff90 	bl	2d37e <z_impl_i2c_transfer>
		return 0;
	}

	return i2c_reg_write_byte(dev, dev_addr, reg_addr, new_value);
}
   2d45e:	b008      	add	sp, #32
   2d460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d464 <lps22hb_init>:
err_poweroff:
	return -EIO;
}

static int lps22hb_init(const struct device *dev)
{
   2d464:	b5f0      	push	{r4, r5, r6, r7, lr}
	const struct lps22hb_config * const config = dev->config;
	struct lps22hb_data *data = dev->data;

	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   2d466:	6843      	ldr	r3, [r0, #4]
	struct lps22hb_data *data = dev->data;
   2d468:	6905      	ldr	r5, [r0, #16]
{
   2d46a:	4604      	mov	r4, r0
   2d46c:	b089      	sub	sp, #36	; 0x24
	data->i2c_master = device_get_binding(config->i2c_master_dev_name);
   2d46e:	6818      	ldr	r0, [r3, #0]
   2d470:	f7f6 ffde 	bl	24430 <z_impl_device_get_binding>
   2d474:	6028      	str	r0, [r5, #0]

	if (!data->i2c_master) {
   2d476:	2800      	cmp	r0, #0
   2d478:	d037      	beq.n	2d4ea <lps22hb_init+0x86>
	struct lps22hb_data *data = dev->data;
   2d47a:	6926      	ldr	r6, [r4, #16]
	const struct lps22hb_config *config = dev->config;
   2d47c:	6867      	ldr	r7, [r4, #4]
	if (i2c_reg_read_byte(data->i2c_master, config->i2c_slave_addr,
   2d47e:	6830      	ldr	r0, [r6, #0]
   2d480:	88bb      	ldrh	r3, [r7, #4]
   2d482:	220f      	movs	r2, #15
   2d484:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2d488:	f10d 0207 	add.w	r2, sp, #7
   2d48c:	9202      	str	r2, [sp, #8]
	msg[1].buf = (uint8_t *)read_buf;
   2d48e:	f10d 0106 	add.w	r1, sp, #6
	msg[0].len = num_write;
   2d492:	2201      	movs	r2, #1
	msg[1].len = num_read;
   2d494:	e9cd 1205 	strd	r1, r2, [sp, #20]
	msg[0].len = num_write;
   2d498:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
   2d49a:	2500      	movs	r5, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d49c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2d49e:	f88d 5010 	strb.w	r5, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d4a2:	f88d 201c 	strb.w	r2, [sp, #28]
   2d4a6:	2202      	movs	r2, #2
   2d4a8:	a902      	add	r1, sp, #8
   2d4aa:	f7ff ff68 	bl	2d37e <z_impl_i2c_transfer>
   2d4ae:	42a8      	cmp	r0, r5
   2d4b0:	da03      	bge.n	2d4ba <lps22hb_init+0x56>
		return -EINVAL;
	}

	if (lps22hb_init_chip(dev) < 0) {
		LOG_DBG("Failed to initialize chip");
		return -EIO;
   2d4b2:	f06f 0004 	mvn.w	r0, #4
	}

	return 0;
}
   2d4b6:	b009      	add	sp, #36	; 0x24
   2d4b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (chip_id != LPS22HB_VAL_WHO_AM_I) {
   2d4ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
   2d4be:	2bb1      	cmp	r3, #177	; 0xb1
   2d4c0:	d1f7      	bne.n	2d4b2 <lps22hb_init+0x4e>
	return i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   2d4c2:	6861      	ldr	r1, [r4, #4]
   2d4c4:	6920      	ldr	r0, [r4, #16]
   2d4c6:	7909      	ldrb	r1, [r1, #4]
   2d4c8:	6800      	ldr	r0, [r0, #0]
   2d4ca:	2330      	movs	r3, #48	; 0x30
   2d4cc:	2270      	movs	r2, #112	; 0x70
   2d4ce:	f7ff ff8f 	bl	2d3f0 <i2c_reg_update_byte.constprop.0>
	if (lps22hb_set_odr_raw(dev, LPS22HB_DEFAULT_SAMPLING_RATE) < 0) {
   2d4d2:	2800      	cmp	r0, #0
   2d4d4:	dbed      	blt.n	2d4b2 <lps22hb_init+0x4e>
	if (i2c_reg_update_byte(data->i2c_master, config->i2c_slave_addr,
   2d4d6:	2302      	movs	r3, #2
   2d4d8:	7939      	ldrb	r1, [r7, #4]
   2d4da:	6830      	ldr	r0, [r6, #0]
   2d4dc:	461a      	mov	r2, r3
   2d4de:	f7ff ff87 	bl	2d3f0 <i2c_reg_update_byte.constprop.0>
   2d4e2:	2800      	cmp	r0, #0
   2d4e4:	dbe5      	blt.n	2d4b2 <lps22hb_init+0x4e>
	return 0;
   2d4e6:	4628      	mov	r0, r5
   2d4e8:	e7e5      	b.n	2d4b6 <lps22hb_init+0x52>
		return -EINVAL;
   2d4ea:	f06f 0015 	mvn.w	r0, #21
   2d4ee:	e7e2      	b.n	2d4b6 <lps22hb_init+0x52>

0002d4f0 <stmemsc_i2c_read>:

#include "stmemsc.h"

int stmemsc_i2c_read(const struct i2c_dt_spec *stmemsc,
			     uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   2d4f0:	b530      	push	{r4, r5, lr}
   2d4f2:	b089      	sub	sp, #36	; 0x24
   2d4f4:	4604      	mov	r4, r0
   2d4f6:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = (uint8_t *)write_buf;
   2d4fa:	f10d 0107 	add.w	r1, sp, #7
   2d4fe:	461d      	mov	r5, r3
   2d500:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   2d502:	2101      	movs	r1, #1
	return i2c_burst_read_dt(stmemsc, reg_addr, value, len);
   2d504:	e9cd 2505 	strd	r2, r5, [sp, #20]
   2d508:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d50a:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   2d50c:	2100      	movs	r1, #0
	return i2c_burst_read(spec->bus, spec->addr,
   2d50e:	6800      	ldr	r0, [r0, #0]
   2d510:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   2d512:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   2d516:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d51a:	6882      	ldr	r2, [r0, #8]
   2d51c:	a902      	add	r1, sp, #8
   2d51e:	6894      	ldr	r4, [r2, #8]
   2d520:	2202      	movs	r2, #2
   2d522:	47a0      	blx	r4
}
   2d524:	b009      	add	sp, #36	; 0x24
   2d526:	bd30      	pop	{r4, r5, pc}

0002d528 <stmemsc_i2c_write>:

int stmemsc_i2c_write(const struct i2c_dt_spec *stmemsc,
			      uint8_t reg_addr, uint8_t *value, uint8_t len)
{
   2d528:	b530      	push	{r4, r5, lr}
   2d52a:	b089      	sub	sp, #36	; 0x24
   2d52c:	4604      	mov	r4, r0
   2d52e:	f88d 1007 	strb.w	r1, [sp, #7]
	msg[0].buf = &start_addr;
   2d532:	f10d 0107 	add.w	r1, sp, #7
   2d536:	461d      	mov	r5, r3
   2d538:	9102      	str	r1, [sp, #8]
	msg[0].len = 1U;
   2d53a:	2101      	movs	r1, #1
	return i2c_burst_write_dt(stmemsc, reg_addr, value, len);
   2d53c:	e9cd 2505 	strd	r2, r5, [sp, #20]
   2d540:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d542:	2202      	movs	r2, #2
	msg[0].flags = I2C_MSG_WRITE;
   2d544:	2100      	movs	r1, #0
	return i2c_burst_write(spec->bus, spec->addr,
   2d546:	6800      	ldr	r0, [r0, #0]
   2d548:	88a3      	ldrh	r3, [r4, #4]
	msg[0].flags = I2C_MSG_WRITE;
   2d54a:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   2d54e:	f88d 201c 	strb.w	r2, [sp, #28]
	int res =  api->transfer(dev, msgs, num_msgs, addr);
   2d552:	6881      	ldr	r1, [r0, #8]
   2d554:	688c      	ldr	r4, [r1, #8]
   2d556:	a902      	add	r1, sp, #8
   2d558:	47a0      	blx	r4
}
   2d55a:	b009      	add	sp, #36	; 0x24
   2d55c:	bd30      	pop	{r4, r5, pc}

0002d55e <gpio_pin_set_dt>:
{
   2d55e:	4603      	mov	r3, r0
   2d560:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
   2d562:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2d564:	7919      	ldrb	r1, [r3, #4]
   2d566:	2301      	movs	r3, #1
   2d568:	fa03 f101 	lsl.w	r1, r3, r1
   2d56c:	6903      	ldr	r3, [r0, #16]
   2d56e:	681b      	ldr	r3, [r3, #0]
   2d570:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   2d572:	bf18      	it	ne
   2d574:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2d578:	b112      	cbz	r2, 2d580 <gpio_pin_set_dt+0x22>
	return api->port_set_bits_raw(port, pins);
   2d57a:	6883      	ldr	r3, [r0, #8]
   2d57c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2d57e:	4718      	bx	r3
   2d580:	6883      	ldr	r3, [r0, #8]
   2d582:	691b      	ldr	r3, [r3, #16]
   2d584:	e7fb      	b.n	2d57e <gpio_pin_set_dt+0x20>

0002d586 <disable_sync>:
{
   2d586:	b530      	push	{r4, r5, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   2d588:	6904      	ldr	r4, [r0, #16]
	const struct driver_config *cfg = dev->config;
   2d58a:	6845      	ldr	r5, [r0, #4]
{
   2d58c:	b085      	sub	sp, #20
	int rc = onoff_sync_lock(&data->srv, &key);
   2d58e:	a903      	add	r1, sp, #12
   2d590:	4620      	mov	r0, r4
   2d592:	f7fa fdf3 	bl	2817c <onoff_sync_lock>
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2d596:	7d29      	ldrb	r1, [r5, #20]
   2d598:	f011 0101 	ands.w	r1, r1, #1
	int rc = onoff_sync_lock(&data->srv, &key);
   2d59c:	4603      	mov	r3, r0
	if  ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2d59e:	d114      	bne.n	2d5ca <disable_sync+0x44>
	} else if (rc == 1) {
   2d5a0:	2801      	cmp	r0, #1
   2d5a2:	d10c      	bne.n	2d5be <disable_sync+0x38>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   2d5a4:	f105 000c 	add.w	r0, r5, #12
   2d5a8:	f7ff ffd9 	bl	2d55e <gpio_pin_set_dt>
   2d5ac:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, NULL, rc, false);
   2d5ae:	2200      	movs	r2, #0
   2d5b0:	9903      	ldr	r1, [sp, #12]
   2d5b2:	9200      	str	r2, [sp, #0]
   2d5b4:	4620      	mov	r0, r4
   2d5b6:	f7fa fdec 	bl	28192 <onoff_sync_finalize>
}
   2d5ba:	b005      	add	sp, #20
   2d5bc:	bd30      	pop	{r4, r5, pc}
		rc = -EINVAL;
   2d5be:	2800      	cmp	r0, #0
   2d5c0:	bf14      	ite	ne
   2d5c2:	4603      	movne	r3, r0
   2d5c4:	f06f 0315 	mvneq.w	r3, #21
   2d5c8:	e7f1      	b.n	2d5ae <disable_sync+0x28>
		rc = 0;
   2d5ca:	2300      	movs	r3, #0
   2d5cc:	e7ef      	b.n	2d5ae <disable_sync+0x28>

0002d5ce <enable_sync>:
{
   2d5ce:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc = onoff_sync_lock(&data->srv, &key);
   2d5d0:	6905      	ldr	r5, [r0, #16]
	const struct driver_config *cfg = dev->config;
   2d5d2:	6846      	ldr	r6, [r0, #4]
{
   2d5d4:	460c      	mov	r4, r1
	int rc = onoff_sync_lock(&data->srv, &key);
   2d5d6:	4628      	mov	r0, r5
   2d5d8:	a903      	add	r1, sp, #12
   2d5da:	f7fa fdcf 	bl	2817c <onoff_sync_lock>
	if ((rc == 0)
   2d5de:	4603      	mov	r3, r0
   2d5e0:	b940      	cbnz	r0, 2d5f4 <enable_sync+0x26>
	    && ((cfg->options & OPTION_ALWAYS_ON) == 0)) {
   2d5e2:	7d32      	ldrb	r2, [r6, #20]
   2d5e4:	07d2      	lsls	r2, r2, #31
   2d5e6:	d405      	bmi.n	2d5f4 <enable_sync+0x26>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   2d5e8:	2101      	movs	r1, #1
   2d5ea:	f106 000c 	add.w	r0, r6, #12
   2d5ee:	f7ff ffb6 	bl	2d55e <gpio_pin_set_dt>
   2d5f2:	4603      	mov	r3, r0
	return onoff_sync_finalize(&data->srv, key, cli, rc, true);
   2d5f4:	2201      	movs	r2, #1
   2d5f6:	9200      	str	r2, [sp, #0]
   2d5f8:	9903      	ldr	r1, [sp, #12]
   2d5fa:	4622      	mov	r2, r4
   2d5fc:	4628      	mov	r0, r5
   2d5fe:	f7fa fdc8 	bl	28192 <onoff_sync_finalize>
}
   2d602:	b004      	add	sp, #16
   2d604:	bd70      	pop	{r4, r5, r6, pc}

0002d606 <disable_onoff>:
	return onoff_release(&data->mgr);
   2d606:	6900      	ldr	r0, [r0, #16]
   2d608:	3004      	adds	r0, #4
   2d60a:	f7fa bd92 	b.w	28132 <onoff_release>

0002d60e <enable_onoff>:
	return onoff_request(&data->mgr, cli);
   2d60e:	6900      	ldr	r0, [r0, #16]
   2d610:	3004      	adds	r0, #4
   2d612:	f7fa bd45 	b.w	280a0 <onoff_request>

0002d616 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d616:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d618:	ab0a      	add	r3, sp, #40	; 0x28
   2d61a:	9305      	str	r3, [sp, #20]
   2d61c:	9302      	str	r3, [sp, #8]
   2d61e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d620:	9301      	str	r3, [sp, #4]
   2d622:	2300      	movs	r3, #0
   2d624:	9300      	str	r3, [sp, #0]
   2d626:	4618      	mov	r0, r3
   2d628:	f7d9 fc42 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2d62c:	b007      	add	sp, #28
   2d62e:	f85d fb04 	ldr.w	pc, [sp], #4

0002d632 <onoff_worker>:
{
   2d632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (data->task == WORK_TASK_ENABLE) {
   2d636:	f890 1034 	ldrb.w	r1, [r0, #52]	; 0x34
	const struct driver_config *cfg = data->dev->config;
   2d63a:	f850 3c20 	ldr.w	r3, [r0, #-32]
	onoff_notify_fn notify = data->notify;
   2d63e:	6b07      	ldr	r7, [r0, #48]	; 0x30
	const struct driver_config *cfg = data->dev->config;
   2d640:	685d      	ldr	r5, [r3, #4]
	if (data->task == WORK_TASK_ENABLE) {
   2d642:	2901      	cmp	r1, #1
{
   2d644:	4604      	mov	r4, r0
	struct driver_data_onoff *data
   2d646:	f1a0 0620 	sub.w	r6, r0, #32
	if (data->task == WORK_TASK_ENABLE) {
   2d64a:	d10f      	bne.n	2d66c <onoff_worker+0x3a>
		rc = gpio_pin_set_dt(&cfg->enable, true);
   2d64c:	f105 000c 	add.w	r0, r5, #12
   2d650:	f7ff ff85 	bl	2d55e <gpio_pin_set_dt>
		delay_us = cfg->startup_delay_us;
   2d654:	686a      	ldr	r2, [r5, #4]
		rc = gpio_pin_set_dt(&cfg->enable, true);
   2d656:	4603      	mov	r3, r0
	data->notify = NULL;
   2d658:	2100      	movs	r1, #0
   2d65a:	6321      	str	r1, [r4, #48]	; 0x30
	data->task = WORK_TASK_UNDEFINED;
   2d65c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
	finalize_transition(data, notify, delay_us, rc);
   2d660:	4630      	mov	r0, r6
   2d662:	4639      	mov	r1, r7
}
   2d664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   2d668:	f7f4 be8e 	b.w	22388 <finalize_transition>
	} else if (data->task == WORK_TASK_DISABLE) {
   2d66c:	2902      	cmp	r1, #2
   2d66e:	d107      	bne.n	2d680 <onoff_worker+0x4e>
		rc = gpio_pin_set_dt(&cfg->enable, false);
   2d670:	2100      	movs	r1, #0
   2d672:	f105 000c 	add.w	r0, r5, #12
   2d676:	f7ff ff72 	bl	2d55e <gpio_pin_set_dt>
		delay_us = cfg->off_on_delay_us;
   2d67a:	68aa      	ldr	r2, [r5, #8]
		rc = gpio_pin_set_dt(&cfg->enable, false);
   2d67c:	4603      	mov	r3, r0
		delay_us = cfg->off_on_delay_us;
   2d67e:	e7eb      	b.n	2d658 <onoff_worker+0x26>
	int rc = 0;
   2d680:	2300      	movs	r3, #0
	uint32_t delay_us = 0;
   2d682:	461a      	mov	r2, r3
   2d684:	e7e8      	b.n	2d658 <onoff_worker+0x26>

0002d686 <stop>:
{
   2d686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   2d68a:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2d68e:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   2d690:	1f06      	subs	r6, r0, #4
	const struct driver_config *cfg = data->dev->config;
   2d692:	6858      	ldr	r0, [r3, #4]
{
   2d694:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2d696:	7d01      	ldrb	r1, [r0, #20]
   2d698:	f011 0101 	ands.w	r1, r1, #1
   2d69c:	d113      	bne.n	2d6c6 <stop+0x40>
	uint32_t delay_us = cfg->off_on_delay_us;
   2d69e:	6887      	ldr	r7, [r0, #8]
	rc = gpio_pin_set_dt(&cfg->enable, false);
   2d6a0:	300c      	adds	r0, #12
   2d6a2:	f7ff ff5c 	bl	2d55e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   2d6a6:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, false);
   2d6aa:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   2d6ac:	d10d      	bne.n	2d6ca <stop+0x44>
		data->task = WORK_TASK_DISABLE;
   2d6ae:	2302      	movs	r3, #2
   2d6b0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   2d6b4:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2d6b6:	f104 001c 	add.w	r0, r4, #28
   2d6ba:	2200      	movs	r2, #0
}
   2d6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2d6c0:	2300      	movs	r3, #0
   2d6c2:	f7f7 bcd1 	b.w	25068 <k_work_schedule>
	int rc = 0;
   2d6c6:	2300      	movs	r3, #0
		delay_us = 0;
   2d6c8:	461f      	mov	r7, r3
	finalize_transition(data, notify, delay_us, rc);
   2d6ca:	463a      	mov	r2, r7
   2d6cc:	4629      	mov	r1, r5
   2d6ce:	4630      	mov	r0, r6
}
   2d6d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   2d6d4:	f7f4 be58 	b.w	22388 <finalize_transition>

0002d6d8 <start>:
{
   2d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct driver_config *cfg = data->dev->config;
   2d6dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
{
   2d6e0:	4604      	mov	r4, r0
	struct driver_data_onoff *data =
   2d6e2:	1f07      	subs	r7, r0, #4
	const struct driver_config *cfg = data->dev->config;
   2d6e4:	6858      	ldr	r0, [r3, #4]
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2d6e6:	7d03      	ldrb	r3, [r0, #20]
   2d6e8:	07db      	lsls	r3, r3, #31
{
   2d6ea:	460d      	mov	r5, r1
	if ((cfg->options & OPTION_ALWAYS_ON) != 0) {
   2d6ec:	d414      	bmi.n	2d718 <start+0x40>
	uint32_t delay_us = cfg->startup_delay_us;
   2d6ee:	6846      	ldr	r6, [r0, #4]
	rc = gpio_pin_set_dt(&cfg->enable, true);
   2d6f0:	2101      	movs	r1, #1
   2d6f2:	300c      	adds	r0, #12
   2d6f4:	f7ff ff33 	bl	2d55e <gpio_pin_set_dt>
	if (rc == -EWOULDBLOCK) {
   2d6f8:	f110 0f0b 	cmn.w	r0, #11
	rc = gpio_pin_set_dt(&cfg->enable, true);
   2d6fc:	4603      	mov	r3, r0
	if (rc == -EWOULDBLOCK) {
   2d6fe:	d10d      	bne.n	2d71c <start+0x44>
		data->task = WORK_TASK_ENABLE;
   2d700:	2301      	movs	r3, #1
   2d702:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
		data->notify = notify;
   2d706:	64e5      	str	r5, [r4, #76]	; 0x4c
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2d708:	f104 001c 	add.w	r0, r4, #28
   2d70c:	2200      	movs	r2, #0
}
   2d70e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		k_work_schedule(&data->dwork, K_NO_WAIT);
   2d712:	2300      	movs	r3, #0
   2d714:	f7f7 bca8 	b.w	25068 <k_work_schedule>
	int rc = 0;
   2d718:	2300      	movs	r3, #0
		delay_us = 0;
   2d71a:	461e      	mov	r6, r3
	finalize_transition(data, notify, delay_us, rc);
   2d71c:	4632      	mov	r2, r6
   2d71e:	4629      	mov	r1, r5
   2d720:	4638      	mov	r0, r7
}
   2d722:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	finalize_transition(data, notify, delay_us, rc);
   2d726:	f7f4 be2f 	b.w	22388 <finalize_transition>

0002d72a <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
   2d72a:	6902      	ldr	r2, [r0, #16]
{
   2d72c:	460b      	mov	r3, r1
	*cfg = data->uart_config;
   2d72e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2d732:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2d736:	2000      	movs	r0, #0
   2d738:	4770      	bx	lr

0002d73a <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2d73a:	6843      	ldr	r3, [r0, #4]
   2d73c:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2d73e:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2d742:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2d746:	4770      	bx	lr

0002d748 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2d748:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
   2d74a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2d74c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d74e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2d752:	b148      	cbz	r0, 2d768 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   2d754:	7c52      	ldrb	r2, [r2, #17]
   2d756:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d758:	2000      	movs	r0, #0
   2d75a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2d75e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d762:	2201      	movs	r2, #1
   2d764:	601a      	str	r2, [r3, #0]
	return 0;
   2d766:	4770      	bx	lr
		return -1;
   2d768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2d76c:	4770      	bx	lr

0002d76e <is_tx_ready.isra.0>:
	return config->uarte_regs;
   2d76e:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   2d770:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d772:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d776:	b940      	cbnz	r0, 2d78a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2d778:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2d77a:	079b      	lsls	r3, r3, #30
   2d77c:	d406      	bmi.n	2d78c <is_tx_ready.isra.0+0x1e>
   2d77e:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   2d782:	3800      	subs	r0, #0
   2d784:	bf18      	it	ne
   2d786:	2001      	movne	r0, #1
   2d788:	4770      	bx	lr
   2d78a:	2001      	movs	r0, #1
}
   2d78c:	4770      	bx	lr

0002d78e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
   2d78e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2d790:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
   2d792:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2d796:	05c9      	lsls	r1, r1, #23
   2d798:	d518      	bpl.n	2d7cc <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d79a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2d79e:	b1a9      	cbz	r1, 2d7cc <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2d7a0:	f04f 0020 	mov.w	r0, #32
   2d7a4:	f3ef 8111 	mrs	r1, BASEPRI
   2d7a8:	f380 8812 	msr	BASEPRI_MAX, r0
   2d7ac:	f3bf 8f6f 	isb	sy
   2d7b0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2d7b4:	b130      	cbz	r0, 2d7c4 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d7b6:	2000      	movs	r0, #0
   2d7b8:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
   2d7bc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d7c0:	2001      	movs	r0, #1
   2d7c2:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
   2d7c4:	f381 8811 	msr	BASEPRI, r1
   2d7c8:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2d7cc:	6852      	ldr	r2, [r2, #4]
   2d7ce:	06d2      	lsls	r2, r2, #27
   2d7d0:	d515      	bpl.n	2d7fe <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
   2d7d2:	f04f 0120 	mov.w	r1, #32
   2d7d6:	f3ef 8211 	mrs	r2, BASEPRI
   2d7da:	f381 8812 	msr	BASEPRI_MAX, r1
   2d7de:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2d7e2:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2d7e6:	b111      	cbz	r1, 2d7ee <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2d7e8:	2100      	movs	r1, #0
   2d7ea:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   2d7ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2d7f2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   2d7f6:	f382 8811 	msr	BASEPRI, r2
   2d7fa:	f3bf 8f6f 	isb	sy
}
   2d7fe:	4770      	bx	lr

0002d800 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2d800:	4770      	bx	lr

0002d802 <sys_clock_cycle_get_32>:
{
   2d802:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2d804:	f7f5 f9c2 	bl	22b8c <z_nrf_rtc_timer_read>
}
   2d808:	bd08      	pop	{r3, pc}

0002d80a <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   2d80a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2d80e:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
   2d812:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   2d814:	bf04      	itt	eq
   2d816:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
   2d81a:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
   2d81e:	1f83      	subs	r3, r0, #6
   2d820:	4258      	negs	r0, r3
   2d822:	4158      	adcs	r0, r3
   2d824:	4770      	bx	lr

0002d826 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2d826:	4700      	bx	r0

0002d828 <nrfx_busy_wait>:
   2d828:	f000 bce2 	b.w	2e1f0 <z_impl_k_busy_wait>

0002d82c <nrfx_clock_enable>:
{
   2d82c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2d82e:	2000      	movs	r0, #0
   2d830:	f7d9 ff36 	bl	76a0 <arch_irq_is_enabled>
   2d834:	b918      	cbnz	r0, 2d83e <nrfx_clock_enable+0x12>
}
   2d836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2d83a:	f7d9 bf0d 	b.w	7658 <arch_irq_enable>
   2d83e:	bd08      	pop	{r3, pc}

0002d840 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   2d840:	f000 001f 	and.w	r0, r0, #31
   2d844:	0080      	lsls	r0, r0, #2
   2d846:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2d84a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
   2d84e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2d852:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
   2d856:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
   2d85a:	4770      	bx	lr

0002d85c <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
   2d85c:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   2d85e:	2402      	movs	r4, #2
   2d860:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
   2d862:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
   2d864:	6809      	ldr	r1, [r1, #0]
   2d866:	b171      	cbz	r1, 2d886 <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
   2d868:	f012 0f04 	tst.w	r2, #4
   2d86c:	bf0c      	ite	eq
   2d86e:	2182      	moveq	r1, #130	; 0x82
   2d870:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
   2d872:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
   2d874:	bf48      	it	mi
   2d876:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
   2d87a:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
   2d87c:	bf48      	it	mi
   2d87e:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
   2d882:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
   2d886:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2d888:	f04f 0100 	mov.w	r1, #0
   2d88c:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d890:	bf58      	it	pl
   2d892:	2201      	movpl	r2, #1
   2d894:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
   2d898:	bf56      	itet	pl
   2d89a:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
   2d89c:	18c0      	addmi	r0, r0, r3
    return 0;
   2d89e:	4608      	movpl	r0, r1
}
   2d8a0:	bd10      	pop	{r4, pc}

0002d8a2 <nrfx_pwm_stop>:
{
   2d8a2:	b538      	push	{r3, r4, r5, lr}
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
   2d8a4:	6803      	ldr	r3, [r0, #0]
    p_reg->SHORTS = mask;
   2d8a6:	2200      	movs	r2, #0
   2d8a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2d8ac:	2201      	movs	r2, #1
   2d8ae:	605a      	str	r2, [r3, #4]
{
   2d8b0:	4605      	mov	r5, r0
   2d8b2:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
   2d8b4:	f7f6 f98a 	bl	23bcc <nrfx_pwm_is_stopped>
   2d8b8:	b938      	cbnz	r0, 2d8ca <nrfx_pwm_stop+0x28>
            if (nrfx_pwm_is_stopped(p_instance))
   2d8ba:	4628      	mov	r0, r5
   2d8bc:	f7f6 f986 	bl	23bcc <nrfx_pwm_is_stopped>
   2d8c0:	b918      	cbnz	r0, 2d8ca <nrfx_pwm_stop+0x28>
        } while (wait_until_stopped);
   2d8c2:	2c00      	cmp	r4, #0
   2d8c4:	d1f9      	bne.n	2d8ba <nrfx_pwm_stop+0x18>
}
   2d8c6:	4620      	mov	r0, r4
   2d8c8:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
   2d8ca:	2401      	movs	r4, #1
   2d8cc:	e7fb      	b.n	2d8c6 <nrfx_pwm_stop+0x24>

0002d8ce <xfer_completeness_check>:
    switch (p_cb->xfer_desc.type)
   2d8ce:	7b0a      	ldrb	r2, [r1, #12]
{
   2d8d0:	4603      	mov	r3, r0
    switch (p_cb->xfer_desc.type)
   2d8d2:	2a03      	cmp	r2, #3
   2d8d4:	d829      	bhi.n	2d92a <xfer_completeness_check+0x5c>
   2d8d6:	e8df f002 	tbb	[pc, r2]
   2d8da:	2521      	.short	0x2521
   2d8dc:	0219      	.short	0x0219
            if (((p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2d8de:	688a      	ldr	r2, [r1, #8]
   2d8e0:	0350      	lsls	r0, r2, #13
   2d8e2:	d504      	bpl.n	2d8ee <xfer_completeness_check+0x20>
    return p_reg->TXD.AMOUNT;
   2d8e4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
   2d8e8:	6908      	ldr	r0, [r1, #16]
   2d8ea:	4290      	cmp	r0, r2
   2d8ec:	d107      	bne.n	2d8fe <xfer_completeness_check+0x30>
                (!(p_cb->int_mask & NRF_TWIM_INT_SUSPENDED_MASK) &&
   2d8ee:	688a      	ldr	r2, [r1, #8]
                 (nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)) ||
   2d8f0:	0352      	lsls	r2, r2, #13
   2d8f2:	d41a      	bmi.n	2d92a <xfer_completeness_check+0x5c>
   2d8f4:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2d8f8:	6949      	ldr	r1, [r1, #20]
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2d8fa:	4291      	cmp	r1, r2
   2d8fc:	d015      	beq.n	2d92a <xfer_completeness_check+0x5c>
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2d8fe:	2000      	movs	r0, #0
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2d900:	2206      	movs	r2, #6
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Disabled << TWIM_ENABLE_ENABLE_Pos);
   2d902:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    p_reg->ENABLE = (TWIM_ENABLE_ENABLE_Enabled << TWIM_ENABLE_ENABLE_Pos);
   2d906:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   2d90a:	4770      	bx	lr
    return p_reg->TXD.AMOUNT;
   2d90c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if ((nrf_twim_txd_amount_get(p_twim) != p_cb->xfer_desc.primary_length) ||
   2d910:	6908      	ldr	r0, [r1, #16]
   2d912:	4290      	cmp	r0, r2
   2d914:	d1f3      	bne.n	2d8fe <xfer_completeness_check+0x30>
    return p_reg->RXD.AMOUNT;
   2d916:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2d91a:	e7ed      	b.n	2d8f8 <xfer_completeness_check+0x2a>
    return p_reg->TXD.AMOUNT;
   2d91c:	f8d3 254c 	ldr.w	r2, [r3, #1356]	; 0x54c
            if (nrf_twim_rxd_amount_get(p_twim) != p_cb->xfer_desc.primary_length)
   2d920:	6909      	ldr	r1, [r1, #16]
   2d922:	e7ea      	b.n	2d8fa <xfer_completeness_check+0x2c>
    return p_reg->RXD.AMOUNT;
   2d924:	f8d3 253c 	ldr.w	r2, [r3, #1340]	; 0x53c
   2d928:	e7fa      	b.n	2d920 <xfer_completeness_check+0x52>
    bool transfer_complete = true;
   2d92a:	2001      	movs	r0, #1
}
   2d92c:	4770      	bx	lr

0002d92e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
   2d92e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
   2d930:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
   2d932:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
   2d934:	bf9c      	itt	ls
   2d936:	6880      	ldrls	r0, [r0, #8]
   2d938:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
   2d93a:	3b01      	subs	r3, #1
   2d93c:	1a98      	subs	r0, r3, r2
}
   2d93e:	4770      	bx	lr

0002d940 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2d940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d944:	4604      	mov	r4, r0
  Rem = pRing->SizeOfBuffer - WrOff;
   2d946:	e9d0 8002 	ldrd	r8, r0, [r0, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d94a:	f8d4 c004 	ldr.w	ip, [r4, #4]
  Rem = pRing->SizeOfBuffer - WrOff;
   2d94e:	eba8 0600 	sub.w	r6, r8, r0
  if (Rem > NumBytes) {
   2d952:	4296      	cmp	r6, r2
    pRing->WrOff = WrOff + NumBytes;
   2d954:	eb00 0502 	add.w	r5, r0, r2
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
   2d958:	460f      	mov	r7, r1
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d95a:	4460      	add	r0, ip
  if (Rem > NumBytes) {
   2d95c:	d904      	bls.n	2d968 <_WriteNoCheck+0x28>
   2d95e:	f000 fe02 	bl	2e566 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
   2d962:	60e5      	str	r5, [r4, #12]
}
   2d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2d968:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
   2d96a:	eba5 0508 	sub.w	r5, r5, r8
   2d96e:	f000 fdfa 	bl	2e566 <memcpy>
   2d972:	6860      	ldr	r0, [r4, #4]
   2d974:	462a      	mov	r2, r5
   2d976:	19b9      	adds	r1, r7, r6
   2d978:	e7f1      	b.n	2d95e <_WriteNoCheck+0x1e>

0002d97a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2d97a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
   2d97e:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
   2d980:	4606      	mov	r6, r0
   2d982:	4689      	mov	r9, r1
   2d984:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
   2d986:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
   2d98a:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2d98c:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2d98e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
   2d990:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
   2d992:	bf28      	it	cs
   2d994:	18e4      	addcs	r4, r4, r3
   2d996:	3c01      	subs	r4, #1
   2d998:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
   2d99a:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
   2d99c:	42bc      	cmp	r4, r7
   2d99e:	bf28      	it	cs
   2d9a0:	463c      	movcs	r4, r7
   2d9a2:	4294      	cmp	r4, r2
   2d9a4:	bf28      	it	cs
   2d9a6:	4614      	movcs	r4, r2
   2d9a8:	4649      	mov	r1, r9
   2d9aa:	4428      	add	r0, r5
   2d9ac:	4622      	mov	r2, r4
   2d9ae:	f000 fdda 	bl	2e566 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
   2d9b2:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
   2d9b4:	4425      	add	r5, r4
      WrOff = 0u;
   2d9b6:	42ab      	cmp	r3, r5
   2d9b8:	bf08      	it	eq
   2d9ba:	2500      	moveq	r5, #0
  } while (NumBytes);
   2d9bc:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
   2d9be:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
   2d9c0:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
   2d9c2:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
   2d9c4:	d1e1      	bne.n	2d98a <_WriteBlocking+0x10>
}
   2d9c6:	4640      	mov	r0, r8
   2d9c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002d9cc <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2d9cc:	f7f6 bc5a 	b.w	24284 <_DoInit>

0002d9d0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2d9d0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2d9d2:	f7ff fffb 	bl	2d9cc <SEGGER_RTT_Init>

	return 0;
}
   2d9d6:	2000      	movs	r0, #0
   2d9d8:	bd08      	pop	{r3, pc}

0002d9da <z_device_state_init>:
}
   2d9da:	4770      	bx	lr

0002d9dc <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2d9dc:	b138      	cbz	r0, 2d9ee <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2d9de:	68c3      	ldr	r3, [r0, #12]
   2d9e0:	8818      	ldrh	r0, [r3, #0]
   2d9e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2d9e6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2d9ea:	4258      	negs	r0, r3
   2d9ec:	4158      	adcs	r0, r3
}
   2d9ee:	4770      	bx	lr

0002d9f0 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
   2d9f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
   2d9f2:	ab0a      	add	r3, sp, #40	; 0x28
   2d9f4:	9305      	str	r3, [sp, #20]
   2d9f6:	9302      	str	r3, [sp, #8]
   2d9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2d9fa:	9301      	str	r3, [sp, #4]
   2d9fc:	2300      	movs	r3, #0
   2d9fe:	9300      	str	r3, [sp, #0]
   2da00:	2201      	movs	r2, #1
   2da02:	4618      	mov	r0, r3
   2da04:	f7d9 fa54 	bl	6eb0 <z_impl_z_log_msg2_runtime_vcreate>
}
   2da08:	b007      	add	sp, #28
   2da0a:	f85d fb04 	ldr.w	pc, [sp], #4

0002da0e <arch_system_halt>:
	__asm__ volatile(
   2da0e:	f04f 0220 	mov.w	r2, #32
   2da12:	f3ef 8311 	mrs	r3, BASEPRI
   2da16:	f382 8812 	msr	BASEPRI_MAX, r2
   2da1a:	f3bf 8f6f 	isb	sy
	for (;;) {
   2da1e:	e7fe      	b.n	2da1e <arch_system_halt+0x10>

0002da20 <k_heap_init>:
{
   2da20:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2da22:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2da26:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2da2a:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2da2c:	f7fa bd69 	b.w	28502 <sys_heap_init>

0002da30 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2da30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2da34:	b085      	sub	sp, #20
   2da36:	4606      	mov	r6, r0
   2da38:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2da3a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2da3e:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2da40:	f000 fbda 	bl	2e1f8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2da44:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2da48:	4605      	mov	r5, r0
   2da4a:	460f      	mov	r7, r1
   2da4c:	f04f 0320 	mov.w	r3, #32
   2da50:	f3ef 8411 	mrs	r4, BASEPRI
   2da54:	f383 8812 	msr	BASEPRI_MAX, r3
   2da58:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2da5c:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2da60:	464a      	mov	r2, r9
   2da62:	4641      	mov	r1, r8
   2da64:	4630      	mov	r0, r6
   2da66:	f7fa fce4 	bl	28432 <sys_heap_aligned_alloc>
   2da6a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2da6c:	f7f7 ffda 	bl	25a24 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2da70:	9b03      	ldr	r3, [sp, #12]
   2da72:	b13b      	cbz	r3, 2da84 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2da74:	f384 8811 	msr	BASEPRI, r4
   2da78:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2da7c:	4618      	mov	r0, r3
   2da7e:	b005      	add	sp, #20
   2da80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2da84:	1a28      	subs	r0, r5, r0
   2da86:	eb67 0101 	sbc.w	r1, r7, r1
   2da8a:	2801      	cmp	r0, #1
   2da8c:	f171 0200 	sbcs.w	r2, r1, #0
   2da90:	dbf0      	blt.n	2da74 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2da92:	e9cd 0100 	strd	r0, r1, [sp]
   2da96:	465a      	mov	r2, fp
   2da98:	4621      	mov	r1, r4
   2da9a:	4650      	mov	r0, sl
   2da9c:	f7f7 fcb6 	bl	2540c <z_pend_curr>
	__asm__ volatile(
   2daa0:	f04f 0320 	mov.w	r3, #32
   2daa4:	f3ef 8411 	mrs	r4, BASEPRI
   2daa8:	f383 8812 	msr	BASEPRI_MAX, r3
   2daac:	f3bf 8f6f 	isb	sy
   2dab0:	e7d6      	b.n	2da60 <k_heap_aligned_alloc+0x30>

0002dab2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2dab2:	b538      	push	{r3, r4, r5, lr}
   2dab4:	4604      	mov	r4, r0
   2dab6:	f04f 0320 	mov.w	r3, #32
   2daba:	f3ef 8511 	mrs	r5, BASEPRI
   2dabe:	f383 8812 	msr	BASEPRI_MAX, r3
   2dac2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2dac6:	f7fa fc7c 	bl	283c2 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2daca:	f104 000c 	add.w	r0, r4, #12
   2dace:	f000 fb1c 	bl	2e10a <z_unpend_all>
   2dad2:	b130      	cbz	r0, 2dae2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2dad4:	4629      	mov	r1, r5
   2dad6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2dada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2dade:	f7f7 bb43 	b.w	25168 <z_reschedule>
	__asm__ volatile(
   2dae2:	f385 8811 	msr	BASEPRI, r5
   2dae6:	f3bf 8f6f 	isb	sy
}
   2daea:	bd38      	pop	{r3, r4, r5, pc}

0002daec <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2daec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2daee:	4604      	mov	r4, r0
   2daf0:	460d      	mov	r5, r1
	__asm__ volatile(
   2daf2:	f04f 0320 	mov.w	r3, #32
   2daf6:	f3ef 8611 	mrs	r6, BASEPRI
   2dafa:	f383 8812 	msr	BASEPRI_MAX, r3
   2dafe:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2db02:	6947      	ldr	r7, [r0, #20]
   2db04:	b977      	cbnz	r7, 2db24 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2db06:	f000 fae8 	bl	2e0da <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2db0a:	b158      	cbz	r0, 2db24 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2db0c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2db0e:	6142      	str	r2, [r0, #20]
   2db10:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2db12:	f000 fa71 	bl	2dff8 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2db16:	4631      	mov	r1, r6
   2db18:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2db1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2db20:	f7f7 bb22 	b.w	25168 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2db24:	682b      	ldr	r3, [r5, #0]
   2db26:	6962      	ldr	r2, [r4, #20]
   2db28:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2db2a:	682b      	ldr	r3, [r5, #0]
   2db2c:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2db2e:	69a3      	ldr	r3, [r4, #24]
   2db30:	3b01      	subs	r3, #1
   2db32:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2db34:	f386 8811 	msr	BASEPRI, r6
   2db38:	f3bf 8f6f 	isb	sy
}
   2db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002db3e <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2db3e:	f3ef 8005 	mrs	r0, IPSR
}
   2db42:	3800      	subs	r0, #0
   2db44:	bf18      	it	ne
   2db46:	2001      	movne	r0, #1
   2db48:	4770      	bx	lr

0002db4a <z_impl_k_thread_name_set>:
}
   2db4a:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2db4e:	4770      	bx	lr

0002db50 <k_thread_name_get>:
}
   2db50:	2000      	movs	r0, #0
   2db52:	4770      	bx	lr

0002db54 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2db54:	f7f7 bbfe 	b.w	25354 <z_sched_start>

0002db58 <z_pm_save_idle_exit>:
{
   2db58:	b508      	push	{r3, lr}
	pm_system_resume();
   2db5a:	f7d9 fab5 	bl	70c8 <pm_system_resume>
}
   2db5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2db62:	f7ff be4d 	b.w	2d800 <sys_clock_idle_exit>

0002db66 <z_impl_k_msgq_purge>:
}
#include <syscalls/k_msgq_peek_mrsh.c>
#endif

void z_impl_k_msgq_purge(struct k_msgq *msgq)
{
   2db66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2db68:	4604      	mov	r4, r0
	k_spinlock_key_t key;
	struct k_thread *pending_thread;

	key = k_spin_lock(&msgq->lock);
   2db6a:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   2db6e:	f04f 0320 	mov.w	r3, #32
   2db72:	f3ef 8611 	mrs	r6, BASEPRI
   2db76:	f383 8812 	msr	BASEPRI_MAX, r3
   2db7a:	f3bf 8f6f 	isb	sy
   2db7e:	f06f 0722 	mvn.w	r7, #34	; 0x22

	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, purge, msgq);

	/* wake up any threads that are waiting to write */
	while ((pending_thread = z_unpend_first_thread(&msgq->wait_q)) != NULL) {
   2db82:	4620      	mov	r0, r4
   2db84:	f000 faa9 	bl	2e0da <z_unpend_first_thread>
   2db88:	4603      	mov	r3, r0
   2db8a:	b940      	cbnz	r0, 2db9e <z_impl_k_msgq_purge+0x38>
		arch_thread_return_value_set(pending_thread, -ENOMSG);
		z_ready_thread(pending_thread);
	}

	msgq->used_msgs = 0;
	msgq->read_ptr = msgq->write_ptr;
   2db8c:	69e3      	ldr	r3, [r4, #28]
	msgq->used_msgs = 0;
   2db8e:	6220      	str	r0, [r4, #32]
	msgq->read_ptr = msgq->write_ptr;
   2db90:	61a3      	str	r3, [r4, #24]

	z_reschedule(&msgq->lock, key);
   2db92:	4631      	mov	r1, r6
   2db94:	4628      	mov	r0, r5
}
   2db96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_reschedule(&msgq->lock, key);
   2db9a:	f7f7 bae5 	b.w	25168 <z_reschedule>
   2db9e:	67df      	str	r7, [r3, #124]	; 0x7c
		z_ready_thread(pending_thread);
   2dba0:	f000 fa2a 	bl	2dff8 <z_ready_thread>
   2dba4:	e7ed      	b.n	2db82 <z_impl_k_msgq_purge+0x1c>

0002dba6 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2dba6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2dbaa:	428b      	cmp	r3, r1
   2dbac:	d001      	beq.n	2dbb2 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   2dbae:	f7f7 bc41 	b.w	25434 <z_set_prio>
}
   2dbb2:	2000      	movs	r0, #0
   2dbb4:	4770      	bx	lr

0002dbb6 <z_impl_k_mutex_init>:
{
   2dbb6:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2dbb8:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2dbba:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2dbbe:	e9c3 3300 	strd	r3, r3, [r3]
}
   2dbc2:	4770      	bx	lr

0002dbc4 <queue_insert>:
{
   2dbc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dbc8:	4699      	mov	r9, r3
   2dbca:	4604      	mov	r4, r0
   2dbcc:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2dbd0:	460d      	mov	r5, r1
   2dbd2:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2dbd4:	f100 0608 	add.w	r6, r0, #8
   2dbd8:	f04f 0220 	mov.w	r2, #32
   2dbdc:	f3ef 8711 	mrs	r7, BASEPRI
   2dbe0:	f382 8812 	msr	BASEPRI_MAX, r2
   2dbe4:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2dbe8:	b103      	cbz	r3, 2dbec <queue_insert+0x28>
	return list->tail;
   2dbea:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2dbec:	4630      	mov	r0, r6
   2dbee:	f000 fa74 	bl	2e0da <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2dbf2:	b158      	cbz	r0, 2dc0c <queue_insert+0x48>
   2dbf4:	2400      	movs	r4, #0
   2dbf6:	67c4      	str	r4, [r0, #124]	; 0x7c
   2dbf8:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2dbfc:	f000 f9fc 	bl	2dff8 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2dc00:	4630      	mov	r0, r6
   2dc02:	4639      	mov	r1, r7
   2dc04:	f7f7 fab0 	bl	25168 <z_reschedule>
	return 0;
   2dc08:	2000      	movs	r0, #0
   2dc0a:	e00c      	b.n	2dc26 <queue_insert+0x62>
	if (alloc) {
   2dc0c:	f1b9 0f00 	cmp.w	r9, #0
   2dc10:	d01b      	beq.n	2dc4a <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2dc12:	2108      	movs	r1, #8
   2dc14:	f7f8 f83a 	bl	25c8c <z_thread_aligned_alloc>
		if (anode == NULL) {
   2dc18:	b938      	cbnz	r0, 2dc2a <queue_insert+0x66>
	__asm__ volatile(
   2dc1a:	f387 8811 	msr	BASEPRI, r7
   2dc1e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2dc22:	f06f 000b 	mvn.w	r0, #11
}
   2dc26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2dc2a:	2301      	movs	r3, #1
		anode->data = data;
   2dc2c:	f8c0 8004 	str.w	r8, [r0, #4]
   2dc30:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc32:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc34:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2dc38:	b95d      	cbnz	r5, 2dc52 <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc3a:	6823      	ldr	r3, [r4, #0]
   2dc3c:	4313      	orrs	r3, r2
   2dc3e:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2dc40:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2dc42:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2dc44:	b973      	cbnz	r3, 2dc64 <queue_insert+0xa0>
	list->tail = node;
   2dc46:	6060      	str	r0, [r4, #4]
}
   2dc48:	e00c      	b.n	2dc64 <queue_insert+0xa0>
	node->next_and_flags = flags;
   2dc4a:	f8c8 9000 	str.w	r9, [r8]
}
   2dc4e:	4640      	mov	r0, r8
   2dc50:	e7ef      	b.n	2dc32 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2dc52:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2dc54:	f033 0303 	bics.w	r3, r3, #3
   2dc58:	d110      	bne.n	2dc7c <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc5a:	6002      	str	r2, [r0, #0]
	return list->tail;
   2dc5c:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2dc5e:	b93a      	cbnz	r2, 2dc70 <queue_insert+0xac>
	list->head = node;
   2dc60:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2dc64:	2104      	movs	r1, #4
   2dc66:	f104 0010 	add.w	r0, r4, #16
   2dc6a:	f000 fc57 	bl	2e51c <z_handle_obj_poll_events>
   2dc6e:	e7c7      	b.n	2dc00 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc70:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc72:	f003 0303 	and.w	r3, r3, #3
   2dc76:	4303      	orrs	r3, r0
   2dc78:	6013      	str	r3, [r2, #0]
   2dc7a:	e7e4      	b.n	2dc46 <queue_insert+0x82>
   2dc7c:	4313      	orrs	r3, r2
   2dc7e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc80:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dc82:	f003 0303 	and.w	r3, r3, #3
   2dc86:	4303      	orrs	r3, r0
   2dc88:	602b      	str	r3, [r5, #0]
}
   2dc8a:	e7eb      	b.n	2dc64 <queue_insert+0xa0>

0002dc8c <z_queue_node_peek>:
{
   2dc8c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2dc8e:	4604      	mov	r4, r0
   2dc90:	b130      	cbz	r0, 2dca0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dc92:	6802      	ldr	r2, [r0, #0]
   2dc94:	0793      	lsls	r3, r2, #30
   2dc96:	d003      	beq.n	2dca0 <z_queue_node_peek+0x14>
		ret = anode->data;
   2dc98:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2dc9a:	b109      	cbz	r1, 2dca0 <z_queue_node_peek+0x14>
			k_free(anode);
   2dc9c:	f000 fc4c 	bl	2e538 <k_free>
}
   2dca0:	4620      	mov	r0, r4
   2dca2:	bd10      	pop	{r4, pc}

0002dca4 <z_impl_k_queue_init>:
	list->head = NULL;
   2dca4:	2300      	movs	r3, #0
	list->tail = NULL;
   2dca6:	e9c0 3300 	strd	r3, r3, [r0]
   2dcaa:	f100 0308 	add.w	r3, r0, #8
   2dcae:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2dcb2:	f100 0310 	add.w	r3, r0, #16
   2dcb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2dcba:	4770      	bx	lr

0002dcbc <k_queue_append>:
{
   2dcbc:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2dcbe:	2301      	movs	r3, #1
   2dcc0:	9300      	str	r3, [sp, #0]
   2dcc2:	2300      	movs	r3, #0
{
   2dcc4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2dcc6:	4619      	mov	r1, r3
   2dcc8:	f7ff ff7c 	bl	2dbc4 <queue_insert>
}
   2dccc:	b003      	add	sp, #12
   2dcce:	f85d fb04 	ldr.w	pc, [sp], #4

0002dcd2 <k_queue_prepend>:
{
   2dcd2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2dcd4:	2300      	movs	r3, #0
{
   2dcd6:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2dcd8:	9300      	str	r3, [sp, #0]
   2dcda:	4619      	mov	r1, r3
   2dcdc:	f7ff ff72 	bl	2dbc4 <queue_insert>
}
   2dce0:	b003      	add	sp, #12
   2dce2:	f85d fb04 	ldr.w	pc, [sp], #4

0002dce6 <k_queue_append_list>:
{
   2dce6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dcea:	4605      	mov	r5, r0
   2dcec:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2dcee:	460c      	mov	r4, r1
   2dcf0:	b391      	cbz	r1, 2dd58 <k_queue_append_list+0x72>
   2dcf2:	b38a      	cbz	r2, 2dd58 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2dcf4:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2dcf8:	f04f 0320 	mov.w	r3, #32
   2dcfc:	f3ef 8811 	mrs	r8, BASEPRI
   2dd00:	f383 8812 	msr	BASEPRI_MAX, r3
   2dd04:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2dd08:	4638      	mov	r0, r7
   2dd0a:	f000 f9e6 	bl	2e0da <z_unpend_first_thread>
   2dd0e:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2dd12:	b920      	cbnz	r0, 2dd1e <k_queue_append_list+0x38>
	return list->tail;
   2dd14:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2dd16:	b9ca      	cbnz	r2, 2dd4c <k_queue_append_list+0x66>
	list->head = node;
   2dd18:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2dd1a:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2dd1c:	e00a      	b.n	2dd34 <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2dd1e:	6144      	str	r4, [r0, #20]
   2dd20:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2dd24:	f000 f968 	bl	2dff8 <z_ready_thread>
		head = *(void **)head;
   2dd28:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2dd2a:	4638      	mov	r0, r7
   2dd2c:	f000 f9d5 	bl	2e0da <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2dd30:	2c00      	cmp	r4, #0
   2dd32:	d1ee      	bne.n	2dd12 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2dd34:	2104      	movs	r1, #4
   2dd36:	f105 0010 	add.w	r0, r5, #16
   2dd3a:	f000 fbef 	bl	2e51c <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2dd3e:	4638      	mov	r0, r7
   2dd40:	4641      	mov	r1, r8
   2dd42:	f7f7 fa11 	bl	25168 <z_reschedule>
	return 0;
   2dd46:	2000      	movs	r0, #0
}
   2dd48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2dd4c:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2dd4e:	f003 0303 	and.w	r3, r3, #3
   2dd52:	431c      	orrs	r4, r3
   2dd54:	6014      	str	r4, [r2, #0]
}
   2dd56:	e7e0      	b.n	2dd1a <k_queue_append_list+0x34>
		return -EINVAL;
   2dd58:	f06f 0015 	mvn.w	r0, #21
   2dd5c:	e7f4      	b.n	2dd48 <k_queue_append_list+0x62>

0002dd5e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2dd5e:	b15a      	cbz	r2, 2dd78 <z_impl_k_sem_init+0x1a>
   2dd60:	428a      	cmp	r2, r1
   2dd62:	d309      	bcc.n	2dd78 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2dd64:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2dd68:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2dd6c:	e9c0 0000 	strd	r0, r0, [r0]
   2dd70:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2dd74:	2000      	movs	r0, #0
   2dd76:	4770      	bx	lr
		return -EINVAL;
   2dd78:	f06f 0015 	mvn.w	r0, #21
}
   2dd7c:	4770      	bx	lr

0002dd7e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2dd7e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2dd80:	2301      	movs	r3, #1
   2dd82:	408b      	lsls	r3, r1
   2dd84:	ea22 0303 	bic.w	r3, r2, r3
   2dd88:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2dd8a:	fa22 f001 	lsr.w	r0, r2, r1
}
   2dd8e:	f000 0001 	and.w	r0, r0, #1
   2dd92:	4770      	bx	lr

0002dd94 <unschedule_locked>:
{
   2dd94:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2dd96:	2103      	movs	r1, #3
{
   2dd98:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2dd9a:	300c      	adds	r0, #12
   2dd9c:	f7ff ffef 	bl	2dd7e <flag_test_and_clear>
   2dda0:	4604      	mov	r4, r0
   2dda2:	b118      	cbz	r0, 2ddac <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2dda4:	f105 0010 	add.w	r0, r5, #16
   2dda8:	f000 f9dc 	bl	2e164 <z_abort_timeout>
}
   2ddac:	4620      	mov	r0, r4
   2ddae:	bd38      	pop	{r3, r4, r5, pc}

0002ddb0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2ddb0:	b120      	cbz	r0, 2ddbc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2ddb2:	2200      	movs	r2, #0
   2ddb4:	4611      	mov	r1, r2
   2ddb6:	3088      	adds	r0, #136	; 0x88
   2ddb8:	f000 b9b7 	b.w	2e12a <z_sched_wake>
}
   2ddbc:	4770      	bx	lr

0002ddbe <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2ddbe:	68c3      	ldr	r3, [r0, #12]
{
   2ddc0:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ddc2:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2ddc6:	079b      	lsls	r3, r3, #30
{
   2ddc8:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2ddca:	d416      	bmi.n	2ddfa <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2ddcc:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2ddce:	2102      	movs	r1, #2
   2ddd0:	300c      	adds	r0, #12
   2ddd2:	f7ff ffd4 	bl	2dd7e <flag_test_and_clear>
   2ddd6:	b180      	cbz	r0, 2ddfa <cancel_async_locked+0x3c>
	return list->head;
   2ddd8:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2dddc:	b16a      	cbz	r2, 2ddfa <cancel_async_locked+0x3c>
   2ddde:	4294      	cmp	r4, r2
   2dde0:	d11b      	bne.n	2de1a <cancel_async_locked+0x5c>
	return node->next;
   2dde2:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2dde4:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2dde8:	b98d      	cbnz	r5, 2de0e <cancel_async_locked+0x50>
   2ddea:	428c      	cmp	r4, r1
	list->head = node;
   2ddec:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2ddf0:	d101      	bne.n	2ddf6 <cancel_async_locked+0x38>
	list->tail = node;
   2ddf2:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2ddf6:	2300      	movs	r3, #0
   2ddf8:	6023      	str	r3, [r4, #0]
	return *flagp;
   2ddfa:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2ddfc:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2de00:	bf1e      	ittt	ne
   2de02:	f043 0302 	orrne.w	r3, r3, #2
   2de06:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2de08:	f003 000f 	andne.w	r0, r3, #15
}
   2de0c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2de0e:	428c      	cmp	r4, r1
	parent->next = child;
   2de10:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2de12:	bf08      	it	eq
   2de14:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2de18:	e7ed      	b.n	2ddf6 <cancel_async_locked+0x38>
	return node->next;
   2de1a:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2de1c:	6812      	ldr	r2, [r2, #0]
   2de1e:	e7dd      	b.n	2dddc <cancel_async_locked+0x1e>

0002de20 <work_timeout>:
{
   2de20:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2de22:	4604      	mov	r4, r0
   2de24:	f04f 0320 	mov.w	r3, #32
   2de28:	f3ef 8511 	mrs	r5, BASEPRI
   2de2c:	f383 8812 	msr	BASEPRI_MAX, r3
   2de30:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2de34:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2de36:	f1a0 0610 	sub.w	r6, r0, #16
   2de3a:	2103      	movs	r1, #3
   2de3c:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2de3e:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2de40:	f7ff ff9d 	bl	2dd7e <flag_test_and_clear>
   2de44:	b128      	cbz	r0, 2de52 <work_timeout+0x32>
		queue = dw->queue;
   2de46:	69a3      	ldr	r3, [r4, #24]
   2de48:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2de4a:	a901      	add	r1, sp, #4
   2de4c:	4630      	mov	r0, r6
   2de4e:	f7f7 f853 	bl	24ef8 <submit_to_queue_locked>
	__asm__ volatile(
   2de52:	f385 8811 	msr	BASEPRI, r5
   2de56:	f3bf 8f6f 	isb	sy
}
   2de5a:	b002      	add	sp, #8
   2de5c:	bd70      	pop	{r4, r5, r6, pc}

0002de5e <k_work_init>:
{
   2de5e:	b538      	push	{r3, r4, r5, lr}
   2de60:	4604      	mov	r4, r0
   2de62:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2de64:	2210      	movs	r2, #16
   2de66:	2100      	movs	r1, #0
   2de68:	f000 fb9e 	bl	2e5a8 <memset>
   2de6c:	6065      	str	r5, [r4, #4]
}
   2de6e:	bd38      	pop	{r3, r4, r5, pc}

0002de70 <k_work_submit_to_queue>:
{
   2de70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2de72:	9001      	str	r0, [sp, #4]
   2de74:	4608      	mov	r0, r1
	__asm__ volatile(
   2de76:	f04f 0320 	mov.w	r3, #32
   2de7a:	f3ef 8511 	mrs	r5, BASEPRI
   2de7e:	f383 8812 	msr	BASEPRI_MAX, r3
   2de82:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2de86:	a901      	add	r1, sp, #4
   2de88:	f7f7 f836 	bl	24ef8 <submit_to_queue_locked>
   2de8c:	4604      	mov	r4, r0
	__asm__ volatile(
   2de8e:	f385 8811 	msr	BASEPRI, r5
   2de92:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2de96:	2800      	cmp	r0, #0
   2de98:	dd04      	ble.n	2dea4 <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2de9a:	f7f7 fc15 	bl	256c8 <z_impl_k_is_preempt_thread>
   2de9e:	b108      	cbz	r0, 2dea4 <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2dea0:	f7f7 fb6a 	bl	25578 <z_impl_k_yield>
}
   2dea4:	4620      	mov	r0, r4
   2dea6:	b003      	add	sp, #12
   2dea8:	bd30      	pop	{r4, r5, pc}

0002deaa <k_work_init_delayable>:
{
   2deaa:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2deac:	2230      	movs	r2, #48	; 0x30
{
   2deae:	4604      	mov	r4, r0
   2deb0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2deb2:	2100      	movs	r1, #0
   2deb4:	f000 fb78 	bl	2e5a8 <memset>
   2deb8:	f44f 7380 	mov.w	r3, #256	; 0x100
   2debc:	6065      	str	r5, [r4, #4]
   2debe:	60e3      	str	r3, [r4, #12]
}
   2dec0:	bd38      	pop	{r3, r4, r5, pc}

0002dec2 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2dec2:	b538      	push	{r3, r4, r5, lr}
   2dec4:	4604      	mov	r4, r0
	__asm__ volatile(
   2dec6:	f04f 0320 	mov.w	r3, #32
   2deca:	f3ef 8511 	mrs	r5, BASEPRI
   2dece:	f383 8812 	msr	BASEPRI_MAX, r3
   2ded2:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2ded6:	f7ff ff5d 	bl	2dd94 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2deda:	4620      	mov	r0, r4
   2dedc:	f7ff ff6f 	bl	2ddbe <cancel_async_locked>
	__asm__ volatile(
   2dee0:	f385 8811 	msr	BASEPRI, r5
   2dee4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2dee8:	bd38      	pop	{r3, r4, r5, pc}

0002deea <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2deea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2deec:	4604      	mov	r4, r0
   2deee:	460d      	mov	r5, r1
	__asm__ volatile(
   2def0:	f04f 0320 	mov.w	r3, #32
   2def4:	f3ef 8711 	mrs	r7, BASEPRI
   2def8:	f383 8812 	msr	BASEPRI_MAX, r3
   2defc:	f3bf 8f6f 	isb	sy
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2df00:	68c3      	ldr	r3, [r0, #12]
   2df02:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2df06:	2b00      	cmp	r3, #0
   2df08:	bf14      	ite	ne
   2df0a:	2601      	movne	r6, #1
   2df0c:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2df0e:	d009      	beq.n	2df24 <k_work_cancel_delayable_sync+0x3a>
	(void)unschedule_locked(dwork);
   2df10:	f7ff ff40 	bl	2dd94 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2df14:	4620      	mov	r0, r4
   2df16:	f7ff ff52 	bl	2ddbe <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2df1a:	4629      	mov	r1, r5
   2df1c:	4620      	mov	r0, r4
   2df1e:	f7f6 ffcd 	bl	24ebc <cancel_sync_locked>
   2df22:	4603      	mov	r3, r0
	__asm__ volatile(
   2df24:	f387 8811 	msr	BASEPRI, r7
   2df28:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2df2c:	b13b      	cbz	r3, 2df3e <k_work_cancel_delayable_sync+0x54>
	return z_impl_k_sem_take(sem, timeout);
   2df2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2df32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2df36:	f105 0008 	add.w	r0, r5, #8
   2df3a:	f7f6 fee7 	bl	24d0c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2df3e:	4630      	mov	r0, r6
   2df40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002df42 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2df42:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2df46:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2df48:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2df4a:	2300      	movs	r3, #0
	node->prev = NULL;
   2df4c:	e9c0 3300 	strd	r3, r3, [r0]
}
   2df50:	4770      	bx	lr

0002df52 <unpend_thread_no_timeout>:
{
   2df52:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2df54:	f7ff fff5 	bl	2df42 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2df58:	7b43      	ldrb	r3, [r0, #13]
   2df5a:	f023 0302 	bic.w	r3, r3, #2
   2df5e:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2df60:	2300      	movs	r3, #0
   2df62:	6083      	str	r3, [r0, #8]
}
   2df64:	bd08      	pop	{r3, pc}

0002df66 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2df66:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2df6a:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2df6e:	4283      	cmp	r3, r0
		return b2 - b1;
   2df70:	bf14      	ite	ne
   2df72:	1ac0      	subne	r0, r0, r3
	return 0;
   2df74:	2000      	moveq	r0, #0
}
   2df76:	4770      	bx	lr

0002df78 <z_unpend_thread_no_timeout>:
{
   2df78:	b508      	push	{r3, lr}
	__asm__ volatile(
   2df7a:	f04f 0320 	mov.w	r3, #32
   2df7e:	f3ef 8111 	mrs	r1, BASEPRI
   2df82:	f383 8812 	msr	BASEPRI_MAX, r3
   2df86:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2df8a:	f7ff ffe2 	bl	2df52 <unpend_thread_no_timeout>
	__asm__ volatile(
   2df8e:	f381 8811 	msr	BASEPRI, r1
   2df92:	f3bf 8f6f 	isb	sy
}
   2df96:	bd08      	pop	{r3, pc}

0002df98 <z_unpend_thread>:
{
   2df98:	b510      	push	{r4, lr}
	__asm__ volatile(
   2df9a:	f04f 0320 	mov.w	r3, #32
   2df9e:	f3ef 8411 	mrs	r4, BASEPRI
   2dfa2:	f383 8812 	msr	BASEPRI_MAX, r3
   2dfa6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2dfaa:	f7ff ffd2 	bl	2df52 <unpend_thread_no_timeout>
	__asm__ volatile(
   2dfae:	f384 8811 	msr	BASEPRI, r4
   2dfb2:	f3bf 8f6f 	isb	sy
}
   2dfb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2dfba:	3018      	adds	r0, #24
   2dfbc:	f000 b8d2 	b.w	2e164 <z_abort_timeout>

0002dfc0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2dfc0:	4603      	mov	r3, r0
   2dfc2:	b920      	cbnz	r0, 2dfce <z_reschedule_irqlock+0xe>
   2dfc4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2dfc8:	b90a      	cbnz	r2, 2dfce <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2dfca:	f7d9 bbc5 	b.w	7758 <arch_swap>
   2dfce:	f383 8811 	msr	BASEPRI, r3
   2dfd2:	f3bf 8f6f 	isb	sy
}
   2dfd6:	4770      	bx	lr

0002dfd8 <z_reschedule_unlocked>:
	__asm__ volatile(
   2dfd8:	f04f 0320 	mov.w	r3, #32
   2dfdc:	f3ef 8011 	mrs	r0, BASEPRI
   2dfe0:	f383 8812 	msr	BASEPRI_MAX, r3
   2dfe4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2dfe8:	f7ff bfea 	b.w	2dfc0 <z_reschedule_irqlock>

0002dfec <z_priq_dumb_best>:
{
   2dfec:	4603      	mov	r3, r0
	return list->head == list;
   2dfee:	6800      	ldr	r0, [r0, #0]
}
   2dff0:	4283      	cmp	r3, r0
   2dff2:	bf08      	it	eq
   2dff4:	2000      	moveq	r0, #0
   2dff6:	4770      	bx	lr

0002dff8 <z_ready_thread>:
{
   2dff8:	b510      	push	{r4, lr}
   2dffa:	f04f 0320 	mov.w	r3, #32
   2dffe:	f3ef 8411 	mrs	r4, BASEPRI
   2e002:	f383 8812 	msr	BASEPRI_MAX, r3
   2e006:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2e00a:	f7f7 f96d 	bl	252e8 <ready_thread>
	__asm__ volatile(
   2e00e:	f384 8811 	msr	BASEPRI, r4
   2e012:	f3bf 8f6f 	isb	sy
}
   2e016:	bd10      	pop	{r4, pc}

0002e018 <z_thread_timeout>:
{
   2e018:	b510      	push	{r4, lr}
   2e01a:	4601      	mov	r1, r0
	__asm__ volatile(
   2e01c:	f04f 0320 	mov.w	r3, #32
   2e020:	f3ef 8411 	mrs	r4, BASEPRI
   2e024:	f383 8812 	msr	BASEPRI_MAX, r3
   2e028:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2e02c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2e030:	f013 0f28 	tst.w	r3, #40	; 0x28
   2e034:	d10d      	bne.n	2e052 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2e036:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2e03a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2e03c:	b10b      	cbz	r3, 2e042 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2e03e:	f7ff ff88 	bl	2df52 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2e042:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2e046:	f023 0314 	bic.w	r3, r3, #20
   2e04a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2e04e:	f7f7 f94b 	bl	252e8 <ready_thread>
	__asm__ volatile(
   2e052:	f384 8811 	msr	BASEPRI, r4
   2e056:	f3bf 8f6f 	isb	sy
}
   2e05a:	bd10      	pop	{r4, pc}

0002e05c <add_to_waitq_locked>:
{
   2e05c:	b538      	push	{r3, r4, r5, lr}
   2e05e:	4604      	mov	r4, r0
   2e060:	460d      	mov	r5, r1
	unready_thread(thread);
   2e062:	f7f7 f995 	bl	25390 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2e066:	7b63      	ldrb	r3, [r4, #13]
   2e068:	f043 0302 	orr.w	r3, r3, #2
   2e06c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2e06e:	b195      	cbz	r5, 2e096 <add_to_waitq_locked+0x3a>
   2e070:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2e072:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e074:	429d      	cmp	r5, r3
   2e076:	d015      	beq.n	2e0a4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e078:	b1a3      	cbz	r3, 2e0a4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2e07a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2e07e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2e082:	4291      	cmp	r1, r2
   2e084:	d008      	beq.n	2e098 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2e086:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2e088:	2a00      	cmp	r2, #0
   2e08a:	dd05      	ble.n	2e098 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2e08c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2e08e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2e092:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2e094:	605c      	str	r4, [r3, #4]
}
   2e096:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2e098:	686a      	ldr	r2, [r5, #4]
   2e09a:	4293      	cmp	r3, r2
   2e09c:	d002      	beq.n	2e0a4 <add_to_waitq_locked+0x48>
   2e09e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2e0a0:	2b00      	cmp	r3, #0
   2e0a2:	d1ec      	bne.n	2e07e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2e0a4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2e0a6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2e0aa:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2e0ac:	606c      	str	r4, [r5, #4]
}
   2e0ae:	e7f2      	b.n	2e096 <add_to_waitq_locked+0x3a>

0002e0b0 <z_unpend1_no_timeout>:
{
   2e0b0:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e0b2:	f04f 0320 	mov.w	r3, #32
   2e0b6:	f3ef 8411 	mrs	r4, BASEPRI
   2e0ba:	f383 8812 	msr	BASEPRI_MAX, r3
   2e0be:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2e0c2:	f7ff ff93 	bl	2dfec <z_priq_dumb_best>
		if (thread != NULL) {
   2e0c6:	4601      	mov	r1, r0
   2e0c8:	b108      	cbz	r0, 2e0ce <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2e0ca:	f7ff ff42 	bl	2df52 <unpend_thread_no_timeout>
	__asm__ volatile(
   2e0ce:	f384 8811 	msr	BASEPRI, r4
   2e0d2:	f3bf 8f6f 	isb	sy
}
   2e0d6:	4608      	mov	r0, r1
   2e0d8:	bd10      	pop	{r4, pc}

0002e0da <z_unpend_first_thread>:
{
   2e0da:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2e0dc:	f04f 0320 	mov.w	r3, #32
   2e0e0:	f3ef 8511 	mrs	r5, BASEPRI
   2e0e4:	f383 8812 	msr	BASEPRI_MAX, r3
   2e0e8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2e0ec:	f7ff ff7e 	bl	2dfec <z_priq_dumb_best>
		if (thread != NULL) {
   2e0f0:	4604      	mov	r4, r0
   2e0f2:	b120      	cbz	r0, 2e0fe <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2e0f4:	f7ff ff2d 	bl	2df52 <unpend_thread_no_timeout>
   2e0f8:	3018      	adds	r0, #24
   2e0fa:	f000 f833 	bl	2e164 <z_abort_timeout>
	__asm__ volatile(
   2e0fe:	f385 8811 	msr	BASEPRI, r5
   2e102:	f3bf 8f6f 	isb	sy
}
   2e106:	4620      	mov	r0, r4
   2e108:	bd38      	pop	{r3, r4, r5, pc}

0002e10a <z_unpend_all>:
{
   2e10a:	b538      	push	{r3, r4, r5, lr}
   2e10c:	4605      	mov	r5, r0
	int need_sched = 0;
   2e10e:	2000      	movs	r0, #0
	return list->head == list;
   2e110:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e112:	42a5      	cmp	r5, r4
   2e114:	d000      	beq.n	2e118 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2e116:	b904      	cbnz	r4, 2e11a <z_unpend_all+0x10>
}
   2e118:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2e11a:	4620      	mov	r0, r4
   2e11c:	f7ff ff3c 	bl	2df98 <z_unpend_thread>
		z_ready_thread(thread);
   2e120:	4620      	mov	r0, r4
   2e122:	f7ff ff69 	bl	2dff8 <z_ready_thread>
		need_sched = 1;
   2e126:	2001      	movs	r0, #1
   2e128:	e7f2      	b.n	2e110 <z_unpend_all+0x6>

0002e12a <z_sched_wake>:
{
   2e12a:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2e12c:	f04f 0320 	mov.w	r3, #32
   2e130:	f3ef 8511 	mrs	r5, BASEPRI
   2e134:	f383 8812 	msr	BASEPRI_MAX, r3
   2e138:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2e13c:	f7ff ff56 	bl	2dfec <z_priq_dumb_best>
		if (thread != NULL) {
   2e140:	4604      	mov	r4, r0
   2e142:	b150      	cbz	r0, 2e15a <z_sched_wake+0x30>
   2e144:	67c1      	str	r1, [r0, #124]	; 0x7c
   2e146:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2e148:	f7ff ff03 	bl	2df52 <unpend_thread_no_timeout>
   2e14c:	3018      	adds	r0, #24
   2e14e:	f000 f809 	bl	2e164 <z_abort_timeout>
			ready_thread(thread);
   2e152:	4620      	mov	r0, r4
   2e154:	f7f7 f8c8 	bl	252e8 <ready_thread>
			ret = true;
   2e158:	2001      	movs	r0, #1
	__asm__ volatile(
   2e15a:	f385 8811 	msr	BASEPRI, r5
   2e15e:	f3bf 8f6f 	isb	sy
}
   2e162:	bd38      	pop	{r3, r4, r5, pc}

0002e164 <z_abort_timeout>:
{
   2e164:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e166:	f04f 0220 	mov.w	r2, #32
   2e16a:	f3ef 8411 	mrs	r4, BASEPRI
   2e16e:	f382 8812 	msr	BASEPRI_MAX, r2
   2e172:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2e176:	6803      	ldr	r3, [r0, #0]
   2e178:	b13b      	cbz	r3, 2e18a <z_abort_timeout+0x26>
			remove_timeout(to);
   2e17a:	f7f7 fb63 	bl	25844 <remove_timeout>
			ret = 0;
   2e17e:	2000      	movs	r0, #0
	__asm__ volatile(
   2e180:	f384 8811 	msr	BASEPRI, r4
   2e184:	f3bf 8f6f 	isb	sy
}
   2e188:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2e18a:	f06f 0015 	mvn.w	r0, #21
   2e18e:	e7f7      	b.n	2e180 <z_abort_timeout+0x1c>

0002e190 <z_get_next_timeout_expiry>:
{
   2e190:	b510      	push	{r4, lr}
	__asm__ volatile(
   2e192:	f04f 0320 	mov.w	r3, #32
   2e196:	f3ef 8411 	mrs	r4, BASEPRI
   2e19a:	f383 8812 	msr	BASEPRI_MAX, r3
   2e19e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2e1a2:	f7f7 fb29 	bl	257f8 <next_timeout>
	__asm__ volatile(
   2e1a6:	f384 8811 	msr	BASEPRI, r4
   2e1aa:	f3bf 8f6f 	isb	sy
}
   2e1ae:	bd10      	pop	{r4, pc}

0002e1b0 <z_set_timeout_expiry>:
{
   2e1b0:	b570      	push	{r4, r5, r6, lr}
   2e1b2:	4604      	mov	r4, r0
   2e1b4:	460d      	mov	r5, r1
	__asm__ volatile(
   2e1b6:	f04f 0320 	mov.w	r3, #32
   2e1ba:	f3ef 8611 	mrs	r6, BASEPRI
   2e1be:	f383 8812 	msr	BASEPRI_MAX, r3
   2e1c2:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2e1c6:	f7f7 fb17 	bl	257f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2e1ca:	2801      	cmp	r0, #1
   2e1cc:	dd05      	ble.n	2e1da <z_set_timeout_expiry+0x2a>
   2e1ce:	42a0      	cmp	r0, r4
   2e1d0:	db03      	blt.n	2e1da <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2e1d2:	4629      	mov	r1, r5
   2e1d4:	4620      	mov	r0, r4
   2e1d6:	f7f4 fe55 	bl	22e84 <sys_clock_set_timeout>
	__asm__ volatile(
   2e1da:	f386 8811 	msr	BASEPRI, r6
   2e1de:	f3bf 8f6f 	isb	sy
}
   2e1e2:	bd70      	pop	{r4, r5, r6, pc}

0002e1e4 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2e1e4:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2e1e6:	f7f7 fc1d 	bl	25a24 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2e1ea:	bd08      	pop	{r3, pc}

0002e1ec <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2e1ec:	f7f7 bc1a 	b.w	25a24 <sys_clock_tick_get>

0002e1f0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2e1f0:	b108      	cbz	r0, 2e1f6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2e1f2:	f7d9 bfe1 	b.w	81b8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2e1f6:	4770      	bx	lr

0002e1f8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e1f8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2e1fc:	bf08      	it	eq
   2e1fe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2e202:	b538      	push	{r3, r4, r5, lr}
   2e204:	4605      	mov	r5, r0
   2e206:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2e208:	d01d      	beq.n	2e246 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2e20a:	ea51 0300 	orrs.w	r3, r1, r0
   2e20e:	d103      	bne.n	2e218 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2e210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2e214:	f7f7 bc06 	b.w	25a24 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2e218:	f06f 0301 	mvn.w	r3, #1
   2e21c:	1a18      	subs	r0, r3, r0
   2e21e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2e222:	eb63 0101 	sbc.w	r1, r3, r1
   2e226:	2900      	cmp	r1, #0
   2e228:	da0c      	bge.n	2e244 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2e22a:	f7f7 fbfb 	bl	25a24 <sys_clock_tick_get>
   2e22e:	2d01      	cmp	r5, #1
   2e230:	4622      	mov	r2, r4
   2e232:	f174 0400 	sbcs.w	r4, r4, #0
   2e236:	462b      	mov	r3, r5
   2e238:	bfbc      	itt	lt
   2e23a:	2301      	movlt	r3, #1
   2e23c:	2200      	movlt	r2, #0
   2e23e:	1818      	adds	r0, r3, r0
   2e240:	eb41 0102 	adc.w	r1, r1, r2
}
   2e244:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2e246:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e24a:	4601      	mov	r1, r0
   2e24c:	e7fa      	b.n	2e244 <sys_clock_timeout_end_calc+0x4c>

0002e24e <k_timer_init>:
	timer->status = 0U;
   2e24e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2e250:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2e254:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2e258:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2e25c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2e260:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2e262:	6343      	str	r3, [r0, #52]	; 0x34
}
   2e264:	4770      	bx	lr

0002e266 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2e266:	b510      	push	{r4, lr}
   2e268:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2e26a:	f7ff ff7b 	bl	2e164 <z_abort_timeout>

	if (inactive) {
   2e26e:	b9b0      	cbnz	r0, 2e29e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2e270:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2e272:	b10b      	cbz	r3, 2e278 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2e274:	4620      	mov	r0, r4
   2e276:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2e278:	f104 0018 	add.w	r0, r4, #24
   2e27c:	f7ff ff18 	bl	2e0b0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2e280:	b168      	cbz	r0, 2e29e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2e282:	f7ff feb9 	bl	2dff8 <z_ready_thread>
	__asm__ volatile(
   2e286:	f04f 0320 	mov.w	r3, #32
   2e28a:	f3ef 8011 	mrs	r0, BASEPRI
   2e28e:	f383 8812 	msr	BASEPRI_MAX, r3
   2e292:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2e296:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2e29a:	f7ff be91 	b.w	2dfc0 <z_reschedule_irqlock>
   2e29e:	bd10      	pop	{r4, pc}

0002e2a0 <add_event>:
{
   2e2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e2a2:	460d      	mov	r5, r1
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2e2a4:	e9d0 1300 	ldrd	r1, r3, [r0]
   2e2a8:	4288      	cmp	r0, r1
   2e2aa:	4604      	mov	r4, r0
   2e2ac:	d00d      	beq.n	2e2ca <add_event+0x2a>
	if ((pending == NULL) ||
   2e2ae:	b163      	cbz	r3, 2e2ca <add_event+0x2a>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2e2b0:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2e2b2:	b100      	cbz	r0, 2e2b6 <add_event+0x16>
   2e2b4:	3860      	subs	r0, #96	; 0x60
   2e2b6:	f1a2 0760 	sub.w	r7, r2, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2e2ba:	4639      	mov	r1, r7
   2e2bc:	f7ff fe53 	bl	2df66 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2e2c0:	2800      	cmp	r0, #0
   2e2c2:	dc02      	bgt.n	2e2ca <add_event+0x2a>
	return list->head == list;
   2e2c4:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2e2c6:	42b4      	cmp	r4, r6
   2e2c8:	d109      	bne.n	2e2de <add_event+0x3e>
	sys_dnode_t *const tail = list->tail;
   2e2ca:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2e2cc:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2e2d0:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2e2d2:	6065      	str	r5, [r4, #4]
}
   2e2d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2e2d6:	6863      	ldr	r3, [r4, #4]
   2e2d8:	42b3      	cmp	r3, r6
   2e2da:	d0f6      	beq.n	2e2ca <add_event+0x2a>
   2e2dc:	6836      	ldr	r6, [r6, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2e2de:	2e00      	cmp	r6, #0
   2e2e0:	d0f3      	beq.n	2e2ca <add_event+0x2a>
		if (z_sched_prio_cmp(poller_thread(poller),
   2e2e2:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2e2e4:	b101      	cbz	r1, 2e2e8 <add_event+0x48>
   2e2e6:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2e2e8:	4638      	mov	r0, r7
   2e2ea:	f7ff fe3c 	bl	2df66 <z_sched_prio_cmp>
   2e2ee:	2800      	cmp	r0, #0
   2e2f0:	ddf1      	ble.n	2e2d6 <add_event+0x36>
	sys_dnode_t *const prev = successor->prev;
   2e2f2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2e2f4:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2e2f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2e2fa:	6075      	str	r5, [r6, #4]
			return;
   2e2fc:	e7ea      	b.n	2e2d4 <add_event+0x34>

0002e2fe <register_events>:
{
   2e2fe:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2e302:	2500      	movs	r5, #0
{
   2e304:	468b      	mov	fp, r1
   2e306:	4614      	mov	r4, r2
   2e308:	461f      	mov	r7, r3
   2e30a:	4682      	mov	sl, r0
	int events_registered = 0;
   2e30c:	462e      	mov	r6, r5
	event->poller = NULL;
   2e30e:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2e310:	455d      	cmp	r5, fp
   2e312:	db02      	blt.n	2e31a <register_events+0x1c>
}
   2e314:	4630      	mov	r0, r6
   2e316:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e31a:	f04f 0320 	mov.w	r3, #32
   2e31e:	f3ef 8911 	mrs	r9, BASEPRI
   2e322:	f383 8812 	msr	BASEPRI_MAX, r3
   2e326:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2e32a:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2e32e:	f003 031f 	and.w	r3, r3, #31
   2e332:	3b01      	subs	r3, #1
   2e334:	2b07      	cmp	r3, #7
   2e336:	d80f      	bhi.n	2e358 <register_events+0x5a>
   2e338:	e8df f003 	tbb	[pc, r3]
   2e33c:	0a0e041e 	.word	0x0a0e041e
   2e340:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2e344:	f8da 3010 	ldr.w	r3, [sl, #16]
   2e348:	689b      	ldr	r3, [r3, #8]
   2e34a:	b12b      	cbz	r3, 2e358 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2e34c:	2302      	movs	r3, #2
   2e34e:	e020      	b.n	2e392 <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2e350:	f8da 3010 	ldr.w	r3, [sl, #16]
   2e354:	681b      	ldr	r3, [r3, #0]
   2e356:	bb8b      	cbnz	r3, 2e3bc <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2e358:	bb47      	cbnz	r7, 2e3ac <register_events+0xae>
   2e35a:	7823      	ldrb	r3, [r4, #0]
   2e35c:	b333      	cbz	r3, 2e3ac <register_events+0xae>
	switch (event->type) {
   2e35e:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2e362:	f003 031f 	and.w	r3, r3, #31
   2e366:	3b01      	subs	r3, #1
   2e368:	2b07      	cmp	r3, #7
   2e36a:	d830      	bhi.n	2e3ce <register_events+0xd0>
   2e36c:	e8df f003 	tbb	[pc, r3]
   2e370:	282f2833 	.word	0x282f2833
   2e374:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2e378:	f8da 3010 	ldr.w	r3, [sl, #16]
   2e37c:	689b      	ldr	r3, [r3, #8]
   2e37e:	2b00      	cmp	r3, #0
   2e380:	d0ea      	beq.n	2e358 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2e382:	2301      	movs	r3, #1
   2e384:	e005      	b.n	2e392 <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2e386:	f8da 3010 	ldr.w	r3, [sl, #16]
   2e38a:	6a1b      	ldr	r3, [r3, #32]
   2e38c:	2b00      	cmp	r3, #0
   2e38e:	d0e3      	beq.n	2e358 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2e390:	2310      	movs	r3, #16
	event->state |= state;
   2e392:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2e396:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2e39a:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2e39e:	430b      	orrs	r3, r1
   2e3a0:	f363 3252 	bfi	r2, r3, #13, #6
   2e3a4:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2e3a8:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2e3ac:	f389 8811 	msr	BASEPRI, r9
   2e3b0:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2e3b4:	3501      	adds	r5, #1
   2e3b6:	f10a 0a14 	add.w	sl, sl, #20
   2e3ba:	e7a9      	b.n	2e310 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2e3bc:	2304      	movs	r3, #4
   2e3be:	e7e8      	b.n	2e392 <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2e3c0:	f8da 0010 	ldr.w	r0, [sl, #16]
   2e3c4:	4622      	mov	r2, r4
   2e3c6:	4651      	mov	r1, sl
   2e3c8:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2e3ca:	f7ff ff69 	bl	2e2a0 <add_event>
	event->poller = poller;
   2e3ce:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2e3d2:	3601      	adds	r6, #1
   2e3d4:	e7ea      	b.n	2e3ac <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2e3d6:	f8da 0010 	ldr.w	r0, [sl, #16]
   2e3da:	4622      	mov	r2, r4
   2e3dc:	4651      	mov	r1, sl
   2e3de:	e7f4      	b.n	2e3ca <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2e3e0:	f8da 0010 	ldr.w	r0, [sl, #16]
   2e3e4:	4622      	mov	r2, r4
   2e3e6:	4651      	mov	r1, sl
   2e3e8:	3024      	adds	r0, #36	; 0x24
   2e3ea:	e7ee      	b.n	2e3ca <register_events+0xcc>

0002e3ec <signal_poll_event>:
{
   2e3ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2e3f0:	6884      	ldr	r4, [r0, #8]
{
   2e3f2:	4605      	mov	r5, r0
   2e3f4:	460e      	mov	r6, r1
	if (poller != NULL) {
   2e3f6:	b144      	cbz	r4, 2e40a <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2e3f8:	7863      	ldrb	r3, [r4, #1]
   2e3fa:	2b01      	cmp	r3, #1
   2e3fc:	d136      	bne.n	2e46c <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2e3fe:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2e402:	f013 0302 	ands.w	r3, r3, #2
   2e406:	d10a      	bne.n	2e41e <signal_poll_event+0x32>
		poller->is_polling = false;
   2e408:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2e40a:	68eb      	ldr	r3, [r5, #12]
   2e40c:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2e410:	430e      	orrs	r6, r1
	event->poller = NULL;
   2e412:	2000      	movs	r0, #0
	event->state |= state;
   2e414:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2e418:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2e41a:	60eb      	str	r3, [r5, #12]
	return retcode;
   2e41c:	e00b      	b.n	2e436 <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2e41e:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2e422:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2e426:	bf08      	it	eq
   2e428:	f112 0f02 	cmneq.w	r2, #2
   2e42c:	d105      	bne.n	2e43a <signal_poll_event+0x4e>
		poller->is_polling = false;
   2e42e:	2300      	movs	r3, #0
   2e430:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2e432:	f06f 000a 	mvn.w	r0, #10
}
   2e436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2e43a:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2e43e:	4640      	mov	r0, r8
   2e440:	f7ff fdaa 	bl	2df98 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2e444:	2e08      	cmp	r6, #8
   2e446:	bf0c      	ite	eq
   2e448:	f06f 0303 	mvneq.w	r3, #3
   2e44c:	2300      	movne	r3, #0
   2e44e:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2e450:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2e454:	06db      	lsls	r3, r3, #27
   2e456:	d102      	bne.n	2e45e <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2e458:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2e45c:	b10f      	cbz	r7, 2e462 <signal_poll_event+0x76>
		poller->is_polling = false;
   2e45e:	2300      	movs	r3, #0
   2e460:	e7d2      	b.n	2e408 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2e462:	4640      	mov	r0, r8
   2e464:	f7ff fdc8 	bl	2dff8 <z_ready_thread>
		poller->is_polling = false;
   2e468:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2e46a:	e7ce      	b.n	2e40a <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2e46c:	2b02      	cmp	r3, #2
   2e46e:	d1f6      	bne.n	2e45e <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2e470:	7823      	ldrb	r3, [r4, #0]
   2e472:	2b00      	cmp	r3, #0
   2e474:	d0c9      	beq.n	2e40a <signal_poll_event+0x1e>
   2e476:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2e47a:	2f00      	cmp	r7, #0
   2e47c:	d0f4      	beq.n	2e468 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2e47e:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2e482:	f1a4 0914 	sub.w	r9, r4, #20
   2e486:	f104 0014 	add.w	r0, r4, #20
   2e48a:	f7ff fe6b 	bl	2e164 <z_abort_timeout>
		twork->poll_result = 0;
   2e48e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2e492:	4649      	mov	r1, r9
   2e494:	4638      	mov	r0, r7
   2e496:	f7ff fceb 	bl	2de70 <k_work_submit_to_queue>
		poller->is_polling = false;
   2e49a:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2e49e:	e7b4      	b.n	2e40a <signal_poll_event+0x1e>

0002e4a0 <clear_event_registrations>:
	while (num_events--) {
   2e4a0:	2314      	movs	r3, #20
{
   2e4a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   2e4a4:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2e4a8:	2400      	movs	r4, #0
   2e4aa:	2601      	movs	r6, #1
	while (num_events--) {
   2e4ac:	b901      	cbnz	r1, 2e4b0 <clear_event_registrations+0x10>
}
   2e4ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2e4b0:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2e4b4:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2e4b8:	f003 031f 	and.w	r3, r3, #31
   2e4bc:	2b08      	cmp	r3, #8
   2e4be:	f1a0 0714 	sub.w	r7, r0, #20
   2e4c2:	d80d      	bhi.n	2e4e0 <clear_event_registrations+0x40>
   2e4c4:	fa06 f303 	lsl.w	r3, r6, r3
   2e4c8:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2e4cc:	d008      	beq.n	2e4e0 <clear_event_registrations+0x40>
	return node->next != NULL;
   2e4ce:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2e4d2:	b12b      	cbz	r3, 2e4e0 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2e4d4:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2e4d8:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2e4da:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2e4dc:	e940 4405 	strd	r4, r4, [r0, #-20]
   2e4e0:	f382 8811 	msr	BASEPRI, r2
   2e4e4:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2e4e8:	f04f 0320 	mov.w	r3, #32
   2e4ec:	f3ef 8211 	mrs	r2, BASEPRI
   2e4f0:	f383 8812 	msr	BASEPRI_MAX, r3
   2e4f4:	f3bf 8f6f 	isb	sy
   2e4f8:	3901      	subs	r1, #1
   2e4fa:	4638      	mov	r0, r7
   2e4fc:	e7d6      	b.n	2e4ac <clear_event_registrations+0xc>

0002e4fe <k_poll_event_init>:
{
   2e4fe:	b510      	push	{r4, lr}
	event->type = type;
   2e500:	04d2      	lsls	r2, r2, #19
   2e502:	0209      	lsls	r1, r1, #8
   2e504:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2e508:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2e50c:	430a      	orrs	r2, r1
   2e50e:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2e510:	2400      	movs	r4, #0
	event->type = type;
   2e512:	430a      	orrs	r2, r1
	event->obj = obj;
   2e514:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2e518:	6084      	str	r4, [r0, #8]
}
   2e51a:	bd10      	pop	{r4, pc}

0002e51c <z_handle_obj_poll_events>:
{
   2e51c:	4603      	mov	r3, r0
	return list->head == list;
   2e51e:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2e520:	4283      	cmp	r3, r0
   2e522:	d008      	beq.n	2e536 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2e524:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2e528:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2e52a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2e52c:	2300      	movs	r3, #0
	node->prev = NULL;
   2e52e:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2e532:	f7ff bf5b 	b.w	2e3ec <signal_poll_event>
}
   2e536:	4770      	bx	lr

0002e538 <k_free>:
	if (ptr != NULL) {
   2e538:	b120      	cbz	r0, 2e544 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2e53a:	1f01      	subs	r1, r0, #4
   2e53c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2e540:	f7ff bab7 	b.w	2dab2 <k_heap_free>
}
   2e544:	4770      	bx	lr

0002e546 <memcmp>:
   2e546:	b510      	push	{r4, lr}
   2e548:	3901      	subs	r1, #1
   2e54a:	4402      	add	r2, r0
   2e54c:	4290      	cmp	r0, r2
   2e54e:	d101      	bne.n	2e554 <memcmp+0xe>
   2e550:	2000      	movs	r0, #0
   2e552:	e005      	b.n	2e560 <memcmp+0x1a>
   2e554:	7803      	ldrb	r3, [r0, #0]
   2e556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2e55a:	42a3      	cmp	r3, r4
   2e55c:	d001      	beq.n	2e562 <memcmp+0x1c>
   2e55e:	1b18      	subs	r0, r3, r4
   2e560:	bd10      	pop	{r4, pc}
   2e562:	3001      	adds	r0, #1
   2e564:	e7f2      	b.n	2e54c <memcmp+0x6>

0002e566 <memcpy>:
   2e566:	440a      	add	r2, r1
   2e568:	4291      	cmp	r1, r2
   2e56a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   2e56e:	d100      	bne.n	2e572 <memcpy+0xc>
   2e570:	4770      	bx	lr
   2e572:	b510      	push	{r4, lr}
   2e574:	f811 4b01 	ldrb.w	r4, [r1], #1
   2e578:	f803 4f01 	strb.w	r4, [r3, #1]!
   2e57c:	4291      	cmp	r1, r2
   2e57e:	d1f9      	bne.n	2e574 <memcpy+0xe>
   2e580:	bd10      	pop	{r4, pc}

0002e582 <__memcpy_chk>:
   2e582:	429a      	cmp	r2, r3
   2e584:	b508      	push	{r3, lr}
   2e586:	d901      	bls.n	2e58c <__memcpy_chk+0xa>
   2e588:	f7d9 fdf4 	bl	8174 <__chk_fail>
   2e58c:	4281      	cmp	r1, r0
   2e58e:	d804      	bhi.n	2e59a <__memcpy_chk+0x18>
   2e590:	188b      	adds	r3, r1, r2
   2e592:	4298      	cmp	r0, r3
   2e594:	d3f8      	bcc.n	2e588 <__memcpy_chk+0x6>
   2e596:	4281      	cmp	r1, r0
   2e598:	d102      	bne.n	2e5a0 <__memcpy_chk+0x1e>
   2e59a:	1883      	adds	r3, r0, r2
   2e59c:	4299      	cmp	r1, r3
   2e59e:	d3f3      	bcc.n	2e588 <__memcpy_chk+0x6>
   2e5a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2e5a4:	f7ff bfdf 	b.w	2e566 <memcpy>

0002e5a8 <memset>:
   2e5a8:	4402      	add	r2, r0
   2e5aa:	4603      	mov	r3, r0
   2e5ac:	4293      	cmp	r3, r2
   2e5ae:	d100      	bne.n	2e5b2 <memset+0xa>
   2e5b0:	4770      	bx	lr
   2e5b2:	f803 1b01 	strb.w	r1, [r3], #1
   2e5b6:	e7f9      	b.n	2e5ac <memset+0x4>

0002e5b8 <__cvt>:
   2e5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e5bc:	b088      	sub	sp, #32
   2e5be:	2b00      	cmp	r3, #0
   2e5c0:	461f      	mov	r7, r3
   2e5c2:	4614      	mov	r4, r2
   2e5c4:	bfb8      	it	lt
   2e5c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
   2e5ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2e5cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
   2e5ce:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   2e5d2:	bfb6      	itet	lt
   2e5d4:	461f      	movlt	r7, r3
   2e5d6:	2300      	movge	r3, #0
   2e5d8:	232d      	movlt	r3, #45	; 0x2d
   2e5da:	7013      	strb	r3, [r2, #0]
   2e5dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2e5de:	f023 0820 	bic.w	r8, r3, #32
   2e5e2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2e5e6:	d005      	beq.n	2e5f4 <__cvt+0x3c>
   2e5e8:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
   2e5ec:	d100      	bne.n	2e5f0 <__cvt+0x38>
   2e5ee:	3501      	adds	r5, #1
   2e5f0:	2302      	movs	r3, #2
   2e5f2:	e000      	b.n	2e5f6 <__cvt+0x3e>
   2e5f4:	2303      	movs	r3, #3
   2e5f6:	aa07      	add	r2, sp, #28
   2e5f8:	9204      	str	r2, [sp, #16]
   2e5fa:	aa06      	add	r2, sp, #24
   2e5fc:	e9cd a202 	strd	sl, r2, [sp, #8]
   2e600:	e9cd 3500 	strd	r3, r5, [sp]
   2e604:	4622      	mov	r2, r4
   2e606:	463b      	mov	r3, r7
   2e608:	f7d5 fafa 	bl	3c00 <_dtoa_r>
   2e60c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   2e610:	4606      	mov	r6, r0
   2e612:	d102      	bne.n	2e61a <__cvt+0x62>
   2e614:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2e616:	07db      	lsls	r3, r3, #31
   2e618:	d522      	bpl.n	2e660 <__cvt+0xa8>
   2e61a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   2e61e:	eb06 0905 	add.w	r9, r6, r5
   2e622:	d110      	bne.n	2e646 <__cvt+0x8e>
   2e624:	7833      	ldrb	r3, [r6, #0]
   2e626:	2b30      	cmp	r3, #48	; 0x30
   2e628:	d10a      	bne.n	2e640 <__cvt+0x88>
   2e62a:	2200      	movs	r2, #0
   2e62c:	2300      	movs	r3, #0
   2e62e:	4620      	mov	r0, r4
   2e630:	4639      	mov	r1, r7
   2e632:	f7d2 fb61 	bl	cf8 <__aeabi_dcmpeq>
   2e636:	b918      	cbnz	r0, 2e640 <__cvt+0x88>
   2e638:	f1c5 0501 	rsb	r5, r5, #1
   2e63c:	f8ca 5000 	str.w	r5, [sl]
   2e640:	f8da 3000 	ldr.w	r3, [sl]
   2e644:	4499      	add	r9, r3
   2e646:	2200      	movs	r2, #0
   2e648:	2300      	movs	r3, #0
   2e64a:	4620      	mov	r0, r4
   2e64c:	4639      	mov	r1, r7
   2e64e:	f7d2 fb53 	bl	cf8 <__aeabi_dcmpeq>
   2e652:	b108      	cbz	r0, 2e658 <__cvt+0xa0>
   2e654:	f8cd 901c 	str.w	r9, [sp, #28]
   2e658:	2230      	movs	r2, #48	; 0x30
   2e65a:	9b07      	ldr	r3, [sp, #28]
   2e65c:	454b      	cmp	r3, r9
   2e65e:	d307      	bcc.n	2e670 <__cvt+0xb8>
   2e660:	9b07      	ldr	r3, [sp, #28]
   2e662:	9a15      	ldr	r2, [sp, #84]	; 0x54
   2e664:	1b9b      	subs	r3, r3, r6
   2e666:	4630      	mov	r0, r6
   2e668:	6013      	str	r3, [r2, #0]
   2e66a:	b008      	add	sp, #32
   2e66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e670:	1c59      	adds	r1, r3, #1
   2e672:	9107      	str	r1, [sp, #28]
   2e674:	701a      	strb	r2, [r3, #0]
   2e676:	e7f0      	b.n	2e65a <__cvt+0xa2>

0002e678 <__exponent>:
   2e678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2e67a:	4603      	mov	r3, r0
   2e67c:	2900      	cmp	r1, #0
   2e67e:	bfb8      	it	lt
   2e680:	4249      	neglt	r1, r1
   2e682:	f803 2b02 	strb.w	r2, [r3], #2
   2e686:	bfb4      	ite	lt
   2e688:	222d      	movlt	r2, #45	; 0x2d
   2e68a:	222b      	movge	r2, #43	; 0x2b
   2e68c:	2909      	cmp	r1, #9
   2e68e:	7042      	strb	r2, [r0, #1]
   2e690:	dd2a      	ble.n	2e6e8 <__exponent+0x70>
   2e692:	f10d 0407 	add.w	r4, sp, #7
   2e696:	46a4      	mov	ip, r4
   2e698:	270a      	movs	r7, #10
   2e69a:	46a6      	mov	lr, r4
   2e69c:	460a      	mov	r2, r1
   2e69e:	fb91 f6f7 	sdiv	r6, r1, r7
   2e6a2:	fb07 1516 	mls	r5, r7, r6, r1
   2e6a6:	3530      	adds	r5, #48	; 0x30
   2e6a8:	2a63      	cmp	r2, #99	; 0x63
   2e6aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   2e6ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
   2e6b2:	4631      	mov	r1, r6
   2e6b4:	dcf1      	bgt.n	2e69a <__exponent+0x22>
   2e6b6:	3130      	adds	r1, #48	; 0x30
   2e6b8:	f1ae 0502 	sub.w	r5, lr, #2
   2e6bc:	f804 1c01 	strb.w	r1, [r4, #-1]
   2e6c0:	1c44      	adds	r4, r0, #1
   2e6c2:	4629      	mov	r1, r5
   2e6c4:	4561      	cmp	r1, ip
   2e6c6:	d30a      	bcc.n	2e6de <__exponent+0x66>
   2e6c8:	f10d 0209 	add.w	r2, sp, #9
   2e6cc:	eba2 020e 	sub.w	r2, r2, lr
   2e6d0:	4565      	cmp	r5, ip
   2e6d2:	bf88      	it	hi
   2e6d4:	2200      	movhi	r2, #0
   2e6d6:	4413      	add	r3, r2
   2e6d8:	1a18      	subs	r0, r3, r0
   2e6da:	b003      	add	sp, #12
   2e6dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2e6de:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e6e2:	f804 2f01 	strb.w	r2, [r4, #1]!
   2e6e6:	e7ed      	b.n	2e6c4 <__exponent+0x4c>
   2e6e8:	2330      	movs	r3, #48	; 0x30
   2e6ea:	3130      	adds	r1, #48	; 0x30
   2e6ec:	7083      	strb	r3, [r0, #2]
   2e6ee:	70c1      	strb	r1, [r0, #3]
   2e6f0:	1d03      	adds	r3, r0, #4
   2e6f2:	e7f1      	b.n	2e6d8 <__exponent+0x60>

0002e6f4 <_printf_common>:
   2e6f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2e6f8:	4616      	mov	r6, r2
   2e6fa:	4699      	mov	r9, r3
   2e6fc:	688a      	ldr	r2, [r1, #8]
   2e6fe:	690b      	ldr	r3, [r1, #16]
   2e700:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2e704:	4293      	cmp	r3, r2
   2e706:	bfb8      	it	lt
   2e708:	4613      	movlt	r3, r2
   2e70a:	6033      	str	r3, [r6, #0]
   2e70c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2e710:	4607      	mov	r7, r0
   2e712:	460c      	mov	r4, r1
   2e714:	b10a      	cbz	r2, 2e71a <_printf_common+0x26>
   2e716:	3301      	adds	r3, #1
   2e718:	6033      	str	r3, [r6, #0]
   2e71a:	6823      	ldr	r3, [r4, #0]
   2e71c:	0699      	lsls	r1, r3, #26
   2e71e:	bf42      	ittt	mi
   2e720:	6833      	ldrmi	r3, [r6, #0]
   2e722:	3302      	addmi	r3, #2
   2e724:	6033      	strmi	r3, [r6, #0]
   2e726:	6825      	ldr	r5, [r4, #0]
   2e728:	f015 0506 	ands.w	r5, r5, #6
   2e72c:	d106      	bne.n	2e73c <_printf_common+0x48>
   2e72e:	f104 0a19 	add.w	sl, r4, #25
   2e732:	68e3      	ldr	r3, [r4, #12]
   2e734:	6832      	ldr	r2, [r6, #0]
   2e736:	1a9b      	subs	r3, r3, r2
   2e738:	42ab      	cmp	r3, r5
   2e73a:	dc26      	bgt.n	2e78a <_printf_common+0x96>
   2e73c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2e740:	1e13      	subs	r3, r2, #0
   2e742:	6822      	ldr	r2, [r4, #0]
   2e744:	bf18      	it	ne
   2e746:	2301      	movne	r3, #1
   2e748:	0692      	lsls	r2, r2, #26
   2e74a:	d42b      	bmi.n	2e7a4 <_printf_common+0xb0>
   2e74c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2e750:	4649      	mov	r1, r9
   2e752:	4638      	mov	r0, r7
   2e754:	47c0      	blx	r8
   2e756:	3001      	adds	r0, #1
   2e758:	d01e      	beq.n	2e798 <_printf_common+0xa4>
   2e75a:	6823      	ldr	r3, [r4, #0]
   2e75c:	68e5      	ldr	r5, [r4, #12]
   2e75e:	6832      	ldr	r2, [r6, #0]
   2e760:	f003 0306 	and.w	r3, r3, #6
   2e764:	2b04      	cmp	r3, #4
   2e766:	bf08      	it	eq
   2e768:	1aad      	subeq	r5, r5, r2
   2e76a:	68a3      	ldr	r3, [r4, #8]
   2e76c:	6922      	ldr	r2, [r4, #16]
   2e76e:	bf0c      	ite	eq
   2e770:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2e774:	2500      	movne	r5, #0
   2e776:	4293      	cmp	r3, r2
   2e778:	bfc4      	itt	gt
   2e77a:	1a9b      	subgt	r3, r3, r2
   2e77c:	18ed      	addgt	r5, r5, r3
   2e77e:	2600      	movs	r6, #0
   2e780:	341a      	adds	r4, #26
   2e782:	42b5      	cmp	r5, r6
   2e784:	d11a      	bne.n	2e7bc <_printf_common+0xc8>
   2e786:	2000      	movs	r0, #0
   2e788:	e008      	b.n	2e79c <_printf_common+0xa8>
   2e78a:	2301      	movs	r3, #1
   2e78c:	4652      	mov	r2, sl
   2e78e:	4649      	mov	r1, r9
   2e790:	4638      	mov	r0, r7
   2e792:	47c0      	blx	r8
   2e794:	3001      	adds	r0, #1
   2e796:	d103      	bne.n	2e7a0 <_printf_common+0xac>
   2e798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2e7a0:	3501      	adds	r5, #1
   2e7a2:	e7c6      	b.n	2e732 <_printf_common+0x3e>
   2e7a4:	18e1      	adds	r1, r4, r3
   2e7a6:	1c5a      	adds	r2, r3, #1
   2e7a8:	2030      	movs	r0, #48	; 0x30
   2e7aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2e7ae:	4422      	add	r2, r4
   2e7b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2e7b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2e7b8:	3302      	adds	r3, #2
   2e7ba:	e7c7      	b.n	2e74c <_printf_common+0x58>
   2e7bc:	2301      	movs	r3, #1
   2e7be:	4622      	mov	r2, r4
   2e7c0:	4649      	mov	r1, r9
   2e7c2:	4638      	mov	r0, r7
   2e7c4:	47c0      	blx	r8
   2e7c6:	3001      	adds	r0, #1
   2e7c8:	d0e6      	beq.n	2e798 <_printf_common+0xa4>
   2e7ca:	3601      	adds	r6, #1
   2e7cc:	e7d9      	b.n	2e782 <_printf_common+0x8e>

0002e7ce <__sprintf_chk>:
   2e7ce:	b408      	push	{r3}
   2e7d0:	b517      	push	{r0, r1, r2, r4, lr}
   2e7d2:	ab05      	add	r3, sp, #20
   2e7d4:	1e14      	subs	r4, r2, #0
   2e7d6:	f853 1b04 	ldr.w	r1, [r3], #4
   2e7da:	9301      	str	r3, [sp, #4]
   2e7dc:	da07      	bge.n	2e7ee <__sprintf_chk+0x20>
   2e7de:	461a      	mov	r2, r3
   2e7e0:	f7f7 feda 	bl	26598 <vsiprintf>
   2e7e4:	b003      	add	sp, #12
   2e7e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2e7ea:	b001      	add	sp, #4
   2e7ec:	4770      	bx	lr
   2e7ee:	460a      	mov	r2, r1
   2e7f0:	4621      	mov	r1, r4
   2e7f2:	f7f7 fead 	bl	26550 <vsniprintf>
   2e7f6:	2800      	cmp	r0, #0
   2e7f8:	dbf4      	blt.n	2e7e4 <__sprintf_chk+0x16>
   2e7fa:	42a0      	cmp	r0, r4
   2e7fc:	d3f2      	bcc.n	2e7e4 <__sprintf_chk+0x16>
   2e7fe:	f7d9 fcb9 	bl	8174 <__chk_fail>

0002e802 <__sread>:
   2e802:	b510      	push	{r4, lr}
   2e804:	460c      	mov	r4, r1
   2e806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e80a:	f7f8 fdf1 	bl	273f0 <_read_r>
   2e80e:	2800      	cmp	r0, #0
   2e810:	bfab      	itete	ge
   2e812:	6d63      	ldrge	r3, [r4, #84]	; 0x54
   2e814:	89a3      	ldrhlt	r3, [r4, #12]
   2e816:	181b      	addge	r3, r3, r0
   2e818:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
   2e81c:	bfac      	ite	ge
   2e81e:	6563      	strge	r3, [r4, #84]	; 0x54
   2e820:	81a3      	strhlt	r3, [r4, #12]
   2e822:	bd10      	pop	{r4, pc}

0002e824 <__seofread>:
   2e824:	2000      	movs	r0, #0
   2e826:	4770      	bx	lr

0002e828 <__swrite>:
   2e828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e82c:	461f      	mov	r7, r3
   2e82e:	898b      	ldrh	r3, [r1, #12]
   2e830:	05db      	lsls	r3, r3, #23
   2e832:	4605      	mov	r5, r0
   2e834:	460c      	mov	r4, r1
   2e836:	4616      	mov	r6, r2
   2e838:	d505      	bpl.n	2e846 <__swrite+0x1e>
   2e83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e83e:	2302      	movs	r3, #2
   2e840:	2200      	movs	r2, #0
   2e842:	f7f7 fed9 	bl	265f8 <_lseek_r>
   2e846:	89a3      	ldrh	r3, [r4, #12]
   2e848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   2e84c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   2e850:	81a3      	strh	r3, [r4, #12]
   2e852:	4632      	mov	r2, r6
   2e854:	463b      	mov	r3, r7
   2e856:	4628      	mov	r0, r5
   2e858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2e85c:	f7f7 bea6 	b.w	265ac <_write_r>

0002e860 <__sseek>:
   2e860:	b510      	push	{r4, lr}
   2e862:	460c      	mov	r4, r1
   2e864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e868:	f7f7 fec6 	bl	265f8 <_lseek_r>
   2e86c:	1c43      	adds	r3, r0, #1
   2e86e:	89a3      	ldrh	r3, [r4, #12]
   2e870:	bf15      	itete	ne
   2e872:	6560      	strne	r0, [r4, #84]	; 0x54
   2e874:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   2e878:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   2e87c:	81a3      	strheq	r3, [r4, #12]
   2e87e:	bf18      	it	ne
   2e880:	81a3      	strhne	r3, [r4, #12]
   2e882:	bd10      	pop	{r4, pc}

0002e884 <__sclose>:
   2e884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2e888:	f7f7 bea2 	b.w	265d0 <_close_r>

0002e88c <strcpy>:
   2e88c:	4603      	mov	r3, r0
   2e88e:	f811 2b01 	ldrb.w	r2, [r1], #1
   2e892:	f803 2b01 	strb.w	r2, [r3], #1
   2e896:	2a00      	cmp	r2, #0
   2e898:	d1f9      	bne.n	2e88e <strcpy+0x2>
   2e89a:	4770      	bx	lr

0002e89c <strnlen>:
   2e89c:	b510      	push	{r4, lr}
   2e89e:	4602      	mov	r2, r0
   2e8a0:	4401      	add	r1, r0
   2e8a2:	428a      	cmp	r2, r1
   2e8a4:	4613      	mov	r3, r2
   2e8a6:	d003      	beq.n	2e8b0 <strnlen+0x14>
   2e8a8:	781c      	ldrb	r4, [r3, #0]
   2e8aa:	3201      	adds	r2, #1
   2e8ac:	2c00      	cmp	r4, #0
   2e8ae:	d1f8      	bne.n	2e8a2 <strnlen+0x6>
   2e8b0:	1a18      	subs	r0, r3, r0
   2e8b2:	bd10      	pop	{r4, pc}

0002e8b4 <_vsniprintf_r>:
   2e8b4:	b530      	push	{r4, r5, lr}
   2e8b6:	4614      	mov	r4, r2
   2e8b8:	2c00      	cmp	r4, #0
   2e8ba:	b09b      	sub	sp, #108	; 0x6c
   2e8bc:	4605      	mov	r5, r0
   2e8be:	461a      	mov	r2, r3
   2e8c0:	da05      	bge.n	2e8ce <_vsniprintf_r+0x1a>
   2e8c2:	238b      	movs	r3, #139	; 0x8b
   2e8c4:	6003      	str	r3, [r0, #0]
   2e8c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e8ca:	b01b      	add	sp, #108	; 0x6c
   2e8cc:	bd30      	pop	{r4, r5, pc}
   2e8ce:	f44f 7302 	mov.w	r3, #520	; 0x208
   2e8d2:	f8ad 300c 	strh.w	r3, [sp, #12]
   2e8d6:	bf14      	ite	ne
   2e8d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
   2e8dc:	4623      	moveq	r3, r4
   2e8de:	9302      	str	r3, [sp, #8]
   2e8e0:	9305      	str	r3, [sp, #20]
   2e8e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2e8e6:	9100      	str	r1, [sp, #0]
   2e8e8:	9104      	str	r1, [sp, #16]
   2e8ea:	f8ad 300e 	strh.w	r3, [sp, #14]
   2e8ee:	4669      	mov	r1, sp
   2e8f0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   2e8f2:	f7f8 f9b3 	bl	26c5c <_svfiprintf_r>
   2e8f6:	1c43      	adds	r3, r0, #1
   2e8f8:	bfbc      	itt	lt
   2e8fa:	238b      	movlt	r3, #139	; 0x8b
   2e8fc:	602b      	strlt	r3, [r5, #0]
   2e8fe:	2c00      	cmp	r4, #0
   2e900:	d0e3      	beq.n	2e8ca <_vsniprintf_r+0x16>
   2e902:	9b00      	ldr	r3, [sp, #0]
   2e904:	2200      	movs	r2, #0
   2e906:	701a      	strb	r2, [r3, #0]
   2e908:	e7df      	b.n	2e8ca <_vsniprintf_r+0x16>

0002e90a <quorem>:
   2e90a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e90e:	6903      	ldr	r3, [r0, #16]
   2e910:	690c      	ldr	r4, [r1, #16]
   2e912:	42a3      	cmp	r3, r4
   2e914:	4607      	mov	r7, r0
   2e916:	db7d      	blt.n	2ea14 <quorem+0x10a>
   2e918:	3c01      	subs	r4, #1
   2e91a:	f101 0814 	add.w	r8, r1, #20
   2e91e:	f100 0514 	add.w	r5, r0, #20
   2e922:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e926:	9301      	str	r3, [sp, #4]
   2e928:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
   2e92c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e930:	3301      	adds	r3, #1
   2e932:	429a      	cmp	r2, r3
   2e934:	ea4f 0b84 	mov.w	fp, r4, lsl #2
   2e938:	eb08 0984 	add.w	r9, r8, r4, lsl #2
   2e93c:	fbb2 f6f3 	udiv	r6, r2, r3
   2e940:	d32e      	bcc.n	2e9a0 <quorem+0x96>
   2e942:	f04f 0e00 	mov.w	lr, #0
   2e946:	4640      	mov	r0, r8
   2e948:	46ac      	mov	ip, r5
   2e94a:	46f2      	mov	sl, lr
   2e94c:	f850 2b04 	ldr.w	r2, [r0], #4
   2e950:	b293      	uxth	r3, r2
   2e952:	fb06 e303 	mla	r3, r6, r3, lr
   2e956:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   2e95a:	0c12      	lsrs	r2, r2, #16
   2e95c:	b29b      	uxth	r3, r3
   2e95e:	fb06 e202 	mla	r2, r6, r2, lr
   2e962:	ebaa 0303 	sub.w	r3, sl, r3
   2e966:	f8dc a000 	ldr.w	sl, [ip]
   2e96a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
   2e96e:	b292      	uxth	r2, r2
   2e970:	fa13 f38a 	uxtah	r3, r3, sl
   2e974:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
   2e978:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e97c:	b29b      	uxth	r3, r3
   2e97e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e982:	4581      	cmp	r9, r0
   2e984:	f84c 3b04 	str.w	r3, [ip], #4
   2e988:	ea4f 4a22 	mov.w	sl, r2, asr #16
   2e98c:	d2de      	bcs.n	2e94c <quorem+0x42>
   2e98e:	f855 300b 	ldr.w	r3, [r5, fp]
   2e992:	b92b      	cbnz	r3, 2e9a0 <quorem+0x96>
   2e994:	9b01      	ldr	r3, [sp, #4]
   2e996:	3b04      	subs	r3, #4
   2e998:	429d      	cmp	r5, r3
   2e99a:	461a      	mov	r2, r3
   2e99c:	d32e      	bcc.n	2e9fc <quorem+0xf2>
   2e99e:	613c      	str	r4, [r7, #16]
   2e9a0:	4638      	mov	r0, r7
   2e9a2:	f000 f886 	bl	2eab2 <__mcmp>
   2e9a6:	2800      	cmp	r0, #0
   2e9a8:	db24      	blt.n	2e9f4 <quorem+0xea>
   2e9aa:	3601      	adds	r6, #1
   2e9ac:	4628      	mov	r0, r5
   2e9ae:	f04f 0c00 	mov.w	ip, #0
   2e9b2:	f858 2b04 	ldr.w	r2, [r8], #4
   2e9b6:	f8d0 e000 	ldr.w	lr, [r0]
   2e9ba:	b293      	uxth	r3, r2
   2e9bc:	ebac 0303 	sub.w	r3, ip, r3
   2e9c0:	0c12      	lsrs	r2, r2, #16
   2e9c2:	fa13 f38e 	uxtah	r3, r3, lr
   2e9c6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
   2e9ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
   2e9ce:	b29b      	uxth	r3, r3
   2e9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2e9d4:	45c1      	cmp	r9, r8
   2e9d6:	f840 3b04 	str.w	r3, [r0], #4
   2e9da:	ea4f 4c22 	mov.w	ip, r2, asr #16
   2e9de:	d2e8      	bcs.n	2e9b2 <quorem+0xa8>
   2e9e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
   2e9e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   2e9e8:	b922      	cbnz	r2, 2e9f4 <quorem+0xea>
   2e9ea:	3b04      	subs	r3, #4
   2e9ec:	429d      	cmp	r5, r3
   2e9ee:	461a      	mov	r2, r3
   2e9f0:	d30a      	bcc.n	2ea08 <quorem+0xfe>
   2e9f2:	613c      	str	r4, [r7, #16]
   2e9f4:	4630      	mov	r0, r6
   2e9f6:	b003      	add	sp, #12
   2e9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9fc:	6812      	ldr	r2, [r2, #0]
   2e9fe:	3b04      	subs	r3, #4
   2ea00:	2a00      	cmp	r2, #0
   2ea02:	d1cc      	bne.n	2e99e <quorem+0x94>
   2ea04:	3c01      	subs	r4, #1
   2ea06:	e7c7      	b.n	2e998 <quorem+0x8e>
   2ea08:	6812      	ldr	r2, [r2, #0]
   2ea0a:	3b04      	subs	r3, #4
   2ea0c:	2a00      	cmp	r2, #0
   2ea0e:	d1f0      	bne.n	2e9f2 <quorem+0xe8>
   2ea10:	3c01      	subs	r4, #1
   2ea12:	e7eb      	b.n	2e9ec <quorem+0xe2>
   2ea14:	2000      	movs	r0, #0
   2ea16:	e7ee      	b.n	2e9f6 <quorem+0xec>

0002ea18 <__hi0bits>:
   2ea18:	0c02      	lsrs	r2, r0, #16
   2ea1a:	0412      	lsls	r2, r2, #16
   2ea1c:	4603      	mov	r3, r0
   2ea1e:	b9ca      	cbnz	r2, 2ea54 <__hi0bits+0x3c>
   2ea20:	0403      	lsls	r3, r0, #16
   2ea22:	2010      	movs	r0, #16
   2ea24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2ea28:	bf04      	itt	eq
   2ea2a:	021b      	lsleq	r3, r3, #8
   2ea2c:	3008      	addeq	r0, #8
   2ea2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2ea32:	bf04      	itt	eq
   2ea34:	011b      	lsleq	r3, r3, #4
   2ea36:	3004      	addeq	r0, #4
   2ea38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2ea3c:	bf04      	itt	eq
   2ea3e:	009b      	lsleq	r3, r3, #2
   2ea40:	3002      	addeq	r0, #2
   2ea42:	2b00      	cmp	r3, #0
   2ea44:	db05      	blt.n	2ea52 <__hi0bits+0x3a>
   2ea46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   2ea4a:	f100 0001 	add.w	r0, r0, #1
   2ea4e:	bf08      	it	eq
   2ea50:	2020      	moveq	r0, #32
   2ea52:	4770      	bx	lr
   2ea54:	2000      	movs	r0, #0
   2ea56:	e7e5      	b.n	2ea24 <__hi0bits+0xc>

0002ea58 <__lo0bits>:
   2ea58:	6803      	ldr	r3, [r0, #0]
   2ea5a:	4602      	mov	r2, r0
   2ea5c:	f013 0007 	ands.w	r0, r3, #7
   2ea60:	d00b      	beq.n	2ea7a <__lo0bits+0x22>
   2ea62:	07d9      	lsls	r1, r3, #31
   2ea64:	d421      	bmi.n	2eaaa <__lo0bits+0x52>
   2ea66:	0798      	lsls	r0, r3, #30
   2ea68:	bf49      	itett	mi
   2ea6a:	085b      	lsrmi	r3, r3, #1
   2ea6c:	089b      	lsrpl	r3, r3, #2
   2ea6e:	2001      	movmi	r0, #1
   2ea70:	6013      	strmi	r3, [r2, #0]
   2ea72:	bf5c      	itt	pl
   2ea74:	6013      	strpl	r3, [r2, #0]
   2ea76:	2002      	movpl	r0, #2
   2ea78:	4770      	bx	lr
   2ea7a:	b299      	uxth	r1, r3
   2ea7c:	b909      	cbnz	r1, 2ea82 <__lo0bits+0x2a>
   2ea7e:	0c1b      	lsrs	r3, r3, #16
   2ea80:	2010      	movs	r0, #16
   2ea82:	b2d9      	uxtb	r1, r3
   2ea84:	b909      	cbnz	r1, 2ea8a <__lo0bits+0x32>
   2ea86:	3008      	adds	r0, #8
   2ea88:	0a1b      	lsrs	r3, r3, #8
   2ea8a:	0719      	lsls	r1, r3, #28
   2ea8c:	bf04      	itt	eq
   2ea8e:	091b      	lsreq	r3, r3, #4
   2ea90:	3004      	addeq	r0, #4
   2ea92:	0799      	lsls	r1, r3, #30
   2ea94:	bf04      	itt	eq
   2ea96:	089b      	lsreq	r3, r3, #2
   2ea98:	3002      	addeq	r0, #2
   2ea9a:	07d9      	lsls	r1, r3, #31
   2ea9c:	d403      	bmi.n	2eaa6 <__lo0bits+0x4e>
   2ea9e:	085b      	lsrs	r3, r3, #1
   2eaa0:	f100 0001 	add.w	r0, r0, #1
   2eaa4:	d003      	beq.n	2eaae <__lo0bits+0x56>
   2eaa6:	6013      	str	r3, [r2, #0]
   2eaa8:	4770      	bx	lr
   2eaaa:	2000      	movs	r0, #0
   2eaac:	4770      	bx	lr
   2eaae:	2020      	movs	r0, #32
   2eab0:	4770      	bx	lr

0002eab2 <__mcmp>:
   2eab2:	690a      	ldr	r2, [r1, #16]
   2eab4:	4603      	mov	r3, r0
   2eab6:	6900      	ldr	r0, [r0, #16]
   2eab8:	1a80      	subs	r0, r0, r2
   2eaba:	b530      	push	{r4, r5, lr}
   2eabc:	d10d      	bne.n	2eada <__mcmp+0x28>
   2eabe:	3314      	adds	r3, #20
   2eac0:	3114      	adds	r1, #20
   2eac2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   2eac6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
   2eaca:	f854 5d04 	ldr.w	r5, [r4, #-4]!
   2eace:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2ead2:	4295      	cmp	r5, r2
   2ead4:	d002      	beq.n	2eadc <__mcmp+0x2a>
   2ead6:	d304      	bcc.n	2eae2 <__mcmp+0x30>
   2ead8:	2001      	movs	r0, #1
   2eada:	bd30      	pop	{r4, r5, pc}
   2eadc:	42a3      	cmp	r3, r4
   2eade:	d3f4      	bcc.n	2eaca <__mcmp+0x18>
   2eae0:	e7fb      	b.n	2eada <__mcmp+0x28>
   2eae2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eae6:	e7f8      	b.n	2eada <__mcmp+0x28>

0002eae8 <_calloc_r>:
   2eae8:	b538      	push	{r3, r4, r5, lr}
   2eaea:	fb02 f501 	mul.w	r5, r2, r1
   2eaee:	4629      	mov	r1, r5
   2eaf0:	f7f7 f94a 	bl	25d88 <_malloc_r>
   2eaf4:	4604      	mov	r4, r0
   2eaf6:	b118      	cbz	r0, 2eb00 <_calloc_r+0x18>
   2eaf8:	462a      	mov	r2, r5
   2eafa:	2100      	movs	r1, #0
   2eafc:	f7ff fd54 	bl	2e5a8 <memset>
   2eb00:	4620      	mov	r0, r4
   2eb02:	bd38      	pop	{r3, r4, r5, pc}

0002eb04 <__ssputs_r>:
   2eb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2eb08:	688e      	ldr	r6, [r1, #8]
   2eb0a:	429e      	cmp	r6, r3
   2eb0c:	4682      	mov	sl, r0
   2eb0e:	460c      	mov	r4, r1
   2eb10:	4690      	mov	r8, r2
   2eb12:	461f      	mov	r7, r3
   2eb14:	d838      	bhi.n	2eb88 <__ssputs_r+0x84>
   2eb16:	898a      	ldrh	r2, [r1, #12]
   2eb18:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2eb1c:	d032      	beq.n	2eb84 <__ssputs_r+0x80>
   2eb1e:	6825      	ldr	r5, [r4, #0]
   2eb20:	6909      	ldr	r1, [r1, #16]
   2eb22:	eba5 0901 	sub.w	r9, r5, r1
   2eb26:	6965      	ldr	r5, [r4, #20]
   2eb28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2eb2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2eb30:	3301      	adds	r3, #1
   2eb32:	444b      	add	r3, r9
   2eb34:	106d      	asrs	r5, r5, #1
   2eb36:	429d      	cmp	r5, r3
   2eb38:	bf38      	it	cc
   2eb3a:	461d      	movcc	r5, r3
   2eb3c:	0553      	lsls	r3, r2, #21
   2eb3e:	d531      	bpl.n	2eba4 <__ssputs_r+0xa0>
   2eb40:	4629      	mov	r1, r5
   2eb42:	f7f7 f921 	bl	25d88 <_malloc_r>
   2eb46:	4606      	mov	r6, r0
   2eb48:	b950      	cbnz	r0, 2eb60 <__ssputs_r+0x5c>
   2eb4a:	230c      	movs	r3, #12
   2eb4c:	f8ca 3000 	str.w	r3, [sl]
   2eb50:	89a3      	ldrh	r3, [r4, #12]
   2eb52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2eb56:	81a3      	strh	r3, [r4, #12]
   2eb58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eb5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2eb60:	6921      	ldr	r1, [r4, #16]
   2eb62:	464a      	mov	r2, r9
   2eb64:	f7ff fcff 	bl	2e566 <memcpy>
   2eb68:	89a3      	ldrh	r3, [r4, #12]
   2eb6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2eb6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2eb72:	81a3      	strh	r3, [r4, #12]
   2eb74:	6126      	str	r6, [r4, #16]
   2eb76:	6165      	str	r5, [r4, #20]
   2eb78:	444e      	add	r6, r9
   2eb7a:	eba5 0509 	sub.w	r5, r5, r9
   2eb7e:	6026      	str	r6, [r4, #0]
   2eb80:	60a5      	str	r5, [r4, #8]
   2eb82:	463e      	mov	r6, r7
   2eb84:	42be      	cmp	r6, r7
   2eb86:	d900      	bls.n	2eb8a <__ssputs_r+0x86>
   2eb88:	463e      	mov	r6, r7
   2eb8a:	6820      	ldr	r0, [r4, #0]
   2eb8c:	4632      	mov	r2, r6
   2eb8e:	4641      	mov	r1, r8
   2eb90:	f000 f92a 	bl	2ede8 <memmove>
   2eb94:	68a3      	ldr	r3, [r4, #8]
   2eb96:	1b9b      	subs	r3, r3, r6
   2eb98:	60a3      	str	r3, [r4, #8]
   2eb9a:	6823      	ldr	r3, [r4, #0]
   2eb9c:	4433      	add	r3, r6
   2eb9e:	6023      	str	r3, [r4, #0]
   2eba0:	2000      	movs	r0, #0
   2eba2:	e7db      	b.n	2eb5c <__ssputs_r+0x58>
   2eba4:	462a      	mov	r2, r5
   2eba6:	f000 f939 	bl	2ee1c <_realloc_r>
   2ebaa:	4606      	mov	r6, r0
   2ebac:	2800      	cmp	r0, #0
   2ebae:	d1e1      	bne.n	2eb74 <__ssputs_r+0x70>
   2ebb0:	6921      	ldr	r1, [r4, #16]
   2ebb2:	4650      	mov	r0, sl
   2ebb4:	f7f7 f89e 	bl	25cf4 <_free_r>
   2ebb8:	e7c7      	b.n	2eb4a <__ssputs_r+0x46>

0002ebba <_sungetc_r>:
   2ebba:	b538      	push	{r3, r4, r5, lr}
   2ebbc:	1c4b      	adds	r3, r1, #1
   2ebbe:	4614      	mov	r4, r2
   2ebc0:	d103      	bne.n	2ebca <_sungetc_r+0x10>
   2ebc2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2ebc6:	4628      	mov	r0, r5
   2ebc8:	bd38      	pop	{r3, r4, r5, pc}
   2ebca:	8993      	ldrh	r3, [r2, #12]
   2ebcc:	f023 0320 	bic.w	r3, r3, #32
   2ebd0:	8193      	strh	r3, [r2, #12]
   2ebd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2ebd4:	6852      	ldr	r2, [r2, #4]
   2ebd6:	b2cd      	uxtb	r5, r1
   2ebd8:	b18b      	cbz	r3, 2ebfe <_sungetc_r+0x44>
   2ebda:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2ebdc:	4293      	cmp	r3, r2
   2ebde:	dd08      	ble.n	2ebf2 <_sungetc_r+0x38>
   2ebe0:	6823      	ldr	r3, [r4, #0]
   2ebe2:	1e5a      	subs	r2, r3, #1
   2ebe4:	6022      	str	r2, [r4, #0]
   2ebe6:	f803 5c01 	strb.w	r5, [r3, #-1]
   2ebea:	6863      	ldr	r3, [r4, #4]
   2ebec:	3301      	adds	r3, #1
   2ebee:	6063      	str	r3, [r4, #4]
   2ebf0:	e7e9      	b.n	2ebc6 <_sungetc_r+0xc>
   2ebf2:	4621      	mov	r1, r4
   2ebf4:	f000 f877 	bl	2ece6 <__submore>
   2ebf8:	2800      	cmp	r0, #0
   2ebfa:	d0f1      	beq.n	2ebe0 <_sungetc_r+0x26>
   2ebfc:	e7e1      	b.n	2ebc2 <_sungetc_r+0x8>
   2ebfe:	6921      	ldr	r1, [r4, #16]
   2ec00:	6823      	ldr	r3, [r4, #0]
   2ec02:	b151      	cbz	r1, 2ec1a <_sungetc_r+0x60>
   2ec04:	4299      	cmp	r1, r3
   2ec06:	d208      	bcs.n	2ec1a <_sungetc_r+0x60>
   2ec08:	f813 1c01 	ldrb.w	r1, [r3, #-1]
   2ec0c:	42a9      	cmp	r1, r5
   2ec0e:	d104      	bne.n	2ec1a <_sungetc_r+0x60>
   2ec10:	3b01      	subs	r3, #1
   2ec12:	3201      	adds	r2, #1
   2ec14:	6023      	str	r3, [r4, #0]
   2ec16:	6062      	str	r2, [r4, #4]
   2ec18:	e7d5      	b.n	2ebc6 <_sungetc_r+0xc>
   2ec1a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
   2ec1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ec22:	6363      	str	r3, [r4, #52]	; 0x34
   2ec24:	2303      	movs	r3, #3
   2ec26:	63a3      	str	r3, [r4, #56]	; 0x38
   2ec28:	4623      	mov	r3, r4
   2ec2a:	f803 5f46 	strb.w	r5, [r3, #70]!
   2ec2e:	6023      	str	r3, [r4, #0]
   2ec30:	2301      	movs	r3, #1
   2ec32:	e7dc      	b.n	2ebee <_sungetc_r+0x34>

0002ec34 <__ssrefill_r>:
   2ec34:	b510      	push	{r4, lr}
   2ec36:	460c      	mov	r4, r1
   2ec38:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2ec3a:	b169      	cbz	r1, 2ec58 <__ssrefill_r+0x24>
   2ec3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ec40:	4299      	cmp	r1, r3
   2ec42:	d001      	beq.n	2ec48 <__ssrefill_r+0x14>
   2ec44:	f7f7 f856 	bl	25cf4 <_free_r>
   2ec48:	6c23      	ldr	r3, [r4, #64]	; 0x40
   2ec4a:	6063      	str	r3, [r4, #4]
   2ec4c:	2000      	movs	r0, #0
   2ec4e:	6360      	str	r0, [r4, #52]	; 0x34
   2ec50:	b113      	cbz	r3, 2ec58 <__ssrefill_r+0x24>
   2ec52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2ec54:	6023      	str	r3, [r4, #0]
   2ec56:	bd10      	pop	{r4, pc}
   2ec58:	6923      	ldr	r3, [r4, #16]
   2ec5a:	6023      	str	r3, [r4, #0]
   2ec5c:	2300      	movs	r3, #0
   2ec5e:	6063      	str	r3, [r4, #4]
   2ec60:	89a3      	ldrh	r3, [r4, #12]
   2ec62:	f043 0320 	orr.w	r3, r3, #32
   2ec66:	81a3      	strh	r3, [r4, #12]
   2ec68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ec6c:	e7f3      	b.n	2ec56 <__ssrefill_r+0x22>

0002ec6e <__sccl>:
   2ec6e:	b570      	push	{r4, r5, r6, lr}
   2ec70:	780b      	ldrb	r3, [r1, #0]
   2ec72:	4604      	mov	r4, r0
   2ec74:	2b5e      	cmp	r3, #94	; 0x5e
   2ec76:	bf0b      	itete	eq
   2ec78:	784b      	ldrbeq	r3, [r1, #1]
   2ec7a:	1c48      	addne	r0, r1, #1
   2ec7c:	1c88      	addeq	r0, r1, #2
   2ec7e:	2200      	movne	r2, #0
   2ec80:	bf08      	it	eq
   2ec82:	2201      	moveq	r2, #1
   2ec84:	1e61      	subs	r1, r4, #1
   2ec86:	f104 05ff 	add.w	r5, r4, #255	; 0xff
   2ec8a:	f801 2f01 	strb.w	r2, [r1, #1]!
   2ec8e:	42a9      	cmp	r1, r5
   2ec90:	d1fb      	bne.n	2ec8a <__sccl+0x1c>
   2ec92:	b90b      	cbnz	r3, 2ec98 <__sccl+0x2a>
   2ec94:	3801      	subs	r0, #1
   2ec96:	bd70      	pop	{r4, r5, r6, pc}
   2ec98:	f082 0201 	eor.w	r2, r2, #1
   2ec9c:	54e2      	strb	r2, [r4, r3]
   2ec9e:	4605      	mov	r5, r0
   2eca0:	4628      	mov	r0, r5
   2eca2:	f810 1b01 	ldrb.w	r1, [r0], #1
   2eca6:	292d      	cmp	r1, #45	; 0x2d
   2eca8:	d006      	beq.n	2ecb8 <__sccl+0x4a>
   2ecaa:	295d      	cmp	r1, #93	; 0x5d
   2ecac:	d0f3      	beq.n	2ec96 <__sccl+0x28>
   2ecae:	b909      	cbnz	r1, 2ecb4 <__sccl+0x46>
   2ecb0:	4628      	mov	r0, r5
   2ecb2:	e7f0      	b.n	2ec96 <__sccl+0x28>
   2ecb4:	460b      	mov	r3, r1
   2ecb6:	e7f1      	b.n	2ec9c <__sccl+0x2e>
   2ecb8:	786e      	ldrb	r6, [r5, #1]
   2ecba:	2e5d      	cmp	r6, #93	; 0x5d
   2ecbc:	d0fa      	beq.n	2ecb4 <__sccl+0x46>
   2ecbe:	42b3      	cmp	r3, r6
   2ecc0:	dcf8      	bgt.n	2ecb4 <__sccl+0x46>
   2ecc2:	3502      	adds	r5, #2
   2ecc4:	4619      	mov	r1, r3
   2ecc6:	3101      	adds	r1, #1
   2ecc8:	428e      	cmp	r6, r1
   2ecca:	5462      	strb	r2, [r4, r1]
   2eccc:	dcfb      	bgt.n	2ecc6 <__sccl+0x58>
   2ecce:	1af1      	subs	r1, r6, r3
   2ecd0:	3901      	subs	r1, #1
   2ecd2:	1c58      	adds	r0, r3, #1
   2ecd4:	42b3      	cmp	r3, r6
   2ecd6:	bfa8      	it	ge
   2ecd8:	2100      	movge	r1, #0
   2ecda:	1843      	adds	r3, r0, r1
   2ecdc:	e7e0      	b.n	2eca0 <__sccl+0x32>

0002ecde <_strtol_r>:
   2ecde:	f7f8 bb99 	b.w	27414 <_strtol_l.constprop.0>

0002ece2 <_strtoul_r>:
   2ece2:	f7f8 bc13 	b.w	2750c <_strtoul_l.constprop.0>

0002ece6 <__submore>:
   2ece6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ecea:	460c      	mov	r4, r1
   2ecec:	6b49      	ldr	r1, [r1, #52]	; 0x34
   2ecee:	f104 0344 	add.w	r3, r4, #68	; 0x44
   2ecf2:	4299      	cmp	r1, r3
   2ecf4:	d11d      	bne.n	2ed32 <__submore+0x4c>
   2ecf6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   2ecfa:	f7f7 f845 	bl	25d88 <_malloc_r>
   2ecfe:	b918      	cbnz	r0, 2ed08 <__submore+0x22>
   2ed00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ed04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ed08:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ed0c:	63a3      	str	r3, [r4, #56]	; 0x38
   2ed0e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
   2ed12:	6360      	str	r0, [r4, #52]	; 0x34
   2ed14:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
   2ed18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   2ed1c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
   2ed20:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
   2ed24:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
   2ed28:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
   2ed2c:	6020      	str	r0, [r4, #0]
   2ed2e:	2000      	movs	r0, #0
   2ed30:	e7e8      	b.n	2ed04 <__submore+0x1e>
   2ed32:	6ba6      	ldr	r6, [r4, #56]	; 0x38
   2ed34:	0077      	lsls	r7, r6, #1
   2ed36:	463a      	mov	r2, r7
   2ed38:	f000 f870 	bl	2ee1c <_realloc_r>
   2ed3c:	4605      	mov	r5, r0
   2ed3e:	2800      	cmp	r0, #0
   2ed40:	d0de      	beq.n	2ed00 <__submore+0x1a>
   2ed42:	eb00 0806 	add.w	r8, r0, r6
   2ed46:	4601      	mov	r1, r0
   2ed48:	4632      	mov	r2, r6
   2ed4a:	4640      	mov	r0, r8
   2ed4c:	f7ff fc0b 	bl	2e566 <memcpy>
   2ed50:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
   2ed54:	f8c4 8000 	str.w	r8, [r4]
   2ed58:	e7e9      	b.n	2ed2e <__submore+0x48>

0002ed5a <__sfmoreglue>:
   2ed5a:	b570      	push	{r4, r5, r6, lr}
   2ed5c:	2268      	movs	r2, #104	; 0x68
   2ed5e:	1e4d      	subs	r5, r1, #1
   2ed60:	4355      	muls	r5, r2
   2ed62:	460e      	mov	r6, r1
   2ed64:	f105 0174 	add.w	r1, r5, #116	; 0x74
   2ed68:	f7f7 f80e 	bl	25d88 <_malloc_r>
   2ed6c:	4604      	mov	r4, r0
   2ed6e:	b140      	cbz	r0, 2ed82 <__sfmoreglue+0x28>
   2ed70:	2100      	movs	r1, #0
   2ed72:	e9c0 1600 	strd	r1, r6, [r0]
   2ed76:	300c      	adds	r0, #12
   2ed78:	60a0      	str	r0, [r4, #8]
   2ed7a:	f105 0268 	add.w	r2, r5, #104	; 0x68
   2ed7e:	f7ff fc13 	bl	2e5a8 <memset>
   2ed82:	4620      	mov	r0, r4
   2ed84:	bd70      	pop	{r4, r5, r6, pc}

0002ed86 <_fwalk_reent>:
   2ed86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ed8a:	4606      	mov	r6, r0
   2ed8c:	4688      	mov	r8, r1
   2ed8e:	f100 0448 	add.w	r4, r0, #72	; 0x48
   2ed92:	2700      	movs	r7, #0
   2ed94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
   2ed98:	f1b9 0901 	subs.w	r9, r9, #1
   2ed9c:	d505      	bpl.n	2edaa <_fwalk_reent+0x24>
   2ed9e:	6824      	ldr	r4, [r4, #0]
   2eda0:	2c00      	cmp	r4, #0
   2eda2:	d1f7      	bne.n	2ed94 <_fwalk_reent+0xe>
   2eda4:	4638      	mov	r0, r7
   2eda6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2edaa:	89ab      	ldrh	r3, [r5, #12]
   2edac:	2b01      	cmp	r3, #1
   2edae:	d907      	bls.n	2edc0 <_fwalk_reent+0x3a>
   2edb0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
   2edb4:	3301      	adds	r3, #1
   2edb6:	d003      	beq.n	2edc0 <_fwalk_reent+0x3a>
   2edb8:	4629      	mov	r1, r5
   2edba:	4630      	mov	r0, r6
   2edbc:	47c0      	blx	r8
   2edbe:	4307      	orrs	r7, r0
   2edc0:	3568      	adds	r5, #104	; 0x68
   2edc2:	e7e9      	b.n	2ed98 <_fwalk_reent+0x12>

0002edc4 <__ascii_mbtowc>:
   2edc4:	b082      	sub	sp, #8
   2edc6:	b901      	cbnz	r1, 2edca <__ascii_mbtowc+0x6>
   2edc8:	a901      	add	r1, sp, #4
   2edca:	b142      	cbz	r2, 2edde <__ascii_mbtowc+0x1a>
   2edcc:	b14b      	cbz	r3, 2ede2 <__ascii_mbtowc+0x1e>
   2edce:	7813      	ldrb	r3, [r2, #0]
   2edd0:	600b      	str	r3, [r1, #0]
   2edd2:	7812      	ldrb	r2, [r2, #0]
   2edd4:	1e10      	subs	r0, r2, #0
   2edd6:	bf18      	it	ne
   2edd8:	2001      	movne	r0, #1
   2edda:	b002      	add	sp, #8
   2eddc:	4770      	bx	lr
   2edde:	4610      	mov	r0, r2
   2ede0:	e7fb      	b.n	2edda <__ascii_mbtowc+0x16>
   2ede2:	f06f 0001 	mvn.w	r0, #1
   2ede6:	e7f8      	b.n	2edda <__ascii_mbtowc+0x16>

0002ede8 <memmove>:
   2ede8:	4288      	cmp	r0, r1
   2edea:	b510      	push	{r4, lr}
   2edec:	eb01 0402 	add.w	r4, r1, r2
   2edf0:	d902      	bls.n	2edf8 <memmove+0x10>
   2edf2:	4284      	cmp	r4, r0
   2edf4:	4623      	mov	r3, r4
   2edf6:	d807      	bhi.n	2ee08 <memmove+0x20>
   2edf8:	1e43      	subs	r3, r0, #1
   2edfa:	42a1      	cmp	r1, r4
   2edfc:	d008      	beq.n	2ee10 <memmove+0x28>
   2edfe:	f811 2b01 	ldrb.w	r2, [r1], #1
   2ee02:	f803 2f01 	strb.w	r2, [r3, #1]!
   2ee06:	e7f8      	b.n	2edfa <memmove+0x12>
   2ee08:	4402      	add	r2, r0
   2ee0a:	4601      	mov	r1, r0
   2ee0c:	428a      	cmp	r2, r1
   2ee0e:	d100      	bne.n	2ee12 <memmove+0x2a>
   2ee10:	bd10      	pop	{r4, pc}
   2ee12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2ee16:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2ee1a:	e7f7      	b.n	2ee0c <memmove+0x24>

0002ee1c <_realloc_r>:
   2ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ee1e:	4607      	mov	r7, r0
   2ee20:	4614      	mov	r4, r2
   2ee22:	460e      	mov	r6, r1
   2ee24:	b921      	cbnz	r1, 2ee30 <_realloc_r+0x14>
   2ee26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ee2a:	4611      	mov	r1, r2
   2ee2c:	f7f6 bfac 	b.w	25d88 <_malloc_r>
   2ee30:	b922      	cbnz	r2, 2ee3c <_realloc_r+0x20>
   2ee32:	f7f6 ff5f 	bl	25cf4 <_free_r>
   2ee36:	4625      	mov	r5, r4
   2ee38:	4628      	mov	r0, r5
   2ee3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ee3c:	f000 f874 	bl	2ef28 <_malloc_usable_size_r>
   2ee40:	42a0      	cmp	r0, r4
   2ee42:	d20f      	bcs.n	2ee64 <_realloc_r+0x48>
   2ee44:	4621      	mov	r1, r4
   2ee46:	4638      	mov	r0, r7
   2ee48:	f7f6 ff9e 	bl	25d88 <_malloc_r>
   2ee4c:	4605      	mov	r5, r0
   2ee4e:	2800      	cmp	r0, #0
   2ee50:	d0f2      	beq.n	2ee38 <_realloc_r+0x1c>
   2ee52:	4631      	mov	r1, r6
   2ee54:	4622      	mov	r2, r4
   2ee56:	f7ff fb86 	bl	2e566 <memcpy>
   2ee5a:	4631      	mov	r1, r6
   2ee5c:	4638      	mov	r0, r7
   2ee5e:	f7f6 ff49 	bl	25cf4 <_free_r>
   2ee62:	e7e9      	b.n	2ee38 <_realloc_r+0x1c>
   2ee64:	4635      	mov	r5, r6
   2ee66:	e7e7      	b.n	2ee38 <_realloc_r+0x1c>

0002ee68 <__sfputc_r>:
   2ee68:	6893      	ldr	r3, [r2, #8]
   2ee6a:	3b01      	subs	r3, #1
   2ee6c:	2b00      	cmp	r3, #0
   2ee6e:	b410      	push	{r4}
   2ee70:	6093      	str	r3, [r2, #8]
   2ee72:	da07      	bge.n	2ee84 <__sfputc_r+0x1c>
   2ee74:	6994      	ldr	r4, [r2, #24]
   2ee76:	42a3      	cmp	r3, r4
   2ee78:	db01      	blt.n	2ee7e <__sfputc_r+0x16>
   2ee7a:	290a      	cmp	r1, #10
   2ee7c:	d102      	bne.n	2ee84 <__sfputc_r+0x1c>
   2ee7e:	bc10      	pop	{r4}
   2ee80:	f7f8 be94 	b.w	27bac <__swbuf_r>
   2ee84:	6813      	ldr	r3, [r2, #0]
   2ee86:	1c58      	adds	r0, r3, #1
   2ee88:	6010      	str	r0, [r2, #0]
   2ee8a:	7019      	strb	r1, [r3, #0]
   2ee8c:	4608      	mov	r0, r1
   2ee8e:	bc10      	pop	{r4}
   2ee90:	4770      	bx	lr

0002ee92 <__sfputs_r>:
   2ee92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ee94:	4606      	mov	r6, r0
   2ee96:	460f      	mov	r7, r1
   2ee98:	4614      	mov	r4, r2
   2ee9a:	18d5      	adds	r5, r2, r3
   2ee9c:	42ac      	cmp	r4, r5
   2ee9e:	d101      	bne.n	2eea4 <__sfputs_r+0x12>
   2eea0:	2000      	movs	r0, #0
   2eea2:	e007      	b.n	2eeb4 <__sfputs_r+0x22>
   2eea4:	f814 1b01 	ldrb.w	r1, [r4], #1
   2eea8:	463a      	mov	r2, r7
   2eeaa:	4630      	mov	r0, r6
   2eeac:	f7ff ffdc 	bl	2ee68 <__sfputc_r>
   2eeb0:	1c43      	adds	r3, r0, #1
   2eeb2:	d1f3      	bne.n	2ee9c <__sfputs_r+0xa>
   2eeb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002eeb6 <__ascii_wctomb>:
   2eeb6:	4603      	mov	r3, r0
   2eeb8:	4608      	mov	r0, r1
   2eeba:	b141      	cbz	r1, 2eece <__ascii_wctomb+0x18>
   2eebc:	2aff      	cmp	r2, #255	; 0xff
   2eebe:	d904      	bls.n	2eeca <__ascii_wctomb+0x14>
   2eec0:	228a      	movs	r2, #138	; 0x8a
   2eec2:	601a      	str	r2, [r3, #0]
   2eec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2eec8:	4770      	bx	lr
   2eeca:	700a      	strb	r2, [r1, #0]
   2eecc:	2001      	movs	r0, #1
   2eece:	4770      	bx	lr

0002eed0 <abort>:
   2eed0:	b508      	push	{r3, lr}
   2eed2:	2006      	movs	r0, #6
   2eed4:	f7f8 ff6a 	bl	27dac <raise>
   2eed8:	2001      	movs	r0, #1
   2eeda:	f7d9 f92f 	bl	813c <_exit>

0002eede <__swhatbuf_r>:
   2eede:	b570      	push	{r4, r5, r6, lr}
   2eee0:	460e      	mov	r6, r1
   2eee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   2eee6:	2900      	cmp	r1, #0
   2eee8:	b096      	sub	sp, #88	; 0x58
   2eeea:	4614      	mov	r4, r2
   2eeec:	461d      	mov	r5, r3
   2eeee:	da08      	bge.n	2ef02 <__swhatbuf_r+0x24>
   2eef0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
   2eef4:	2200      	movs	r2, #0
   2eef6:	602a      	str	r2, [r5, #0]
   2eef8:	061a      	lsls	r2, r3, #24
   2eefa:	d410      	bmi.n	2ef1e <__swhatbuf_r+0x40>
   2eefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2ef00:	e00e      	b.n	2ef20 <__swhatbuf_r+0x42>
   2ef02:	466a      	mov	r2, sp
   2ef04:	f7f8 ff6c 	bl	27de0 <_fstat_r>
   2ef08:	2800      	cmp	r0, #0
   2ef0a:	dbf1      	blt.n	2eef0 <__swhatbuf_r+0x12>
   2ef0c:	9a01      	ldr	r2, [sp, #4]
   2ef0e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   2ef12:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
   2ef16:	425a      	negs	r2, r3
   2ef18:	415a      	adcs	r2, r3
   2ef1a:	602a      	str	r2, [r5, #0]
   2ef1c:	e7ee      	b.n	2eefc <__swhatbuf_r+0x1e>
   2ef1e:	2340      	movs	r3, #64	; 0x40
   2ef20:	2000      	movs	r0, #0
   2ef22:	6023      	str	r3, [r4, #0]
   2ef24:	b016      	add	sp, #88	; 0x58
   2ef26:	bd70      	pop	{r4, r5, r6, pc}

0002ef28 <_malloc_usable_size_r>:
   2ef28:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2ef2c:	1f18      	subs	r0, r3, #4
   2ef2e:	2b00      	cmp	r3, #0
   2ef30:	bfbc      	itt	lt
   2ef32:	580b      	ldrlt	r3, [r1, r0]
   2ef34:	18c0      	addlt	r0, r0, r3
   2ef36:	4770      	bx	lr

0002ef38 <_raise_r>:
   2ef38:	291f      	cmp	r1, #31
   2ef3a:	b538      	push	{r3, r4, r5, lr}
   2ef3c:	4604      	mov	r4, r0
   2ef3e:	460d      	mov	r5, r1
   2ef40:	d904      	bls.n	2ef4c <_raise_r+0x14>
   2ef42:	2316      	movs	r3, #22
   2ef44:	6003      	str	r3, [r0, #0]
   2ef46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ef4a:	bd38      	pop	{r3, r4, r5, pc}
   2ef4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2ef4e:	b112      	cbz	r2, 2ef56 <_raise_r+0x1e>
   2ef50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   2ef54:	b94b      	cbnz	r3, 2ef6a <_raise_r+0x32>
   2ef56:	4620      	mov	r0, r4
   2ef58:	f000 f816 	bl	2ef88 <_getpid_r>
   2ef5c:	462a      	mov	r2, r5
   2ef5e:	4601      	mov	r1, r0
   2ef60:	4620      	mov	r0, r4
   2ef62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2ef66:	f7f8 bf29 	b.w	27dbc <_kill_r>
   2ef6a:	2b01      	cmp	r3, #1
   2ef6c:	d00a      	beq.n	2ef84 <_raise_r+0x4c>
   2ef6e:	1c59      	adds	r1, r3, #1
   2ef70:	d103      	bne.n	2ef7a <_raise_r+0x42>
   2ef72:	2316      	movs	r3, #22
   2ef74:	6003      	str	r3, [r0, #0]
   2ef76:	2001      	movs	r0, #1
   2ef78:	e7e7      	b.n	2ef4a <_raise_r+0x12>
   2ef7a:	2400      	movs	r4, #0
   2ef7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
   2ef80:	4628      	mov	r0, r5
   2ef82:	4798      	blx	r3
   2ef84:	2000      	movs	r0, #0
   2ef86:	e7e0      	b.n	2ef4a <_raise_r+0x12>

0002ef88 <_getpid_r>:
   2ef88:	f7fa bf3d 	b.w	29e06 <_getpid>

0002ef8c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2ef8c:	f7f3 bfd2 	b.w	22f34 <SystemInit>
